
Compresor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012e0c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012e0c  00012e0c  00022e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a34  20000000  00012e14  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a34  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a34  2**0
                  CONTENTS
  5 .bss          00001da8  20000a34  00013848  00030a34  2**2
                  ALLOC
  6 .stack        00010004  200027dc  000155f0  00030a34  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a34  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a62  2**0
                  CONTENTS, READONLY
  9 .debug_info   0008516e  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a8d8  00000000  00000000  000b5c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001b482  00000000  00000000  000c0501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003108  00000000  00000000  000db983  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002d80  00000000  00000000  000dea8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005047e  00000000  00000000  000e180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003f1a1  00000000  00000000  00131c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013cf96  00000000  00000000  00170e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cdb8  00000000  00000000  002addc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 27 01 20 99 0b 00 00 1d 0c 00 00 1d 0c 00 00     .'. ............
      10:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 00 00 00 00     ................
	...
      2c:	1d 0c 00 00 1d 0c 00 00 00 00 00 00 1d 0c 00 00     ................
      3c:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      4c:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      5c:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      6c:	d5 9d 00 00 d9 8b 00 00 e9 8b 00 00 1d 0c 00 00     ................
      7c:	f9 8b 00 00 09 8c 00 00 19 8c 00 00 29 8c 00 00     ............)...
      8c:	39 8c 00 00 49 8c 00 00 59 8c 00 00 1d 0c 00 00     9...I...Y.......
      9c:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      ac:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      bc:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      cc:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
      dc:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 00 00 00 00     ................
	...
      f4:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     104:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     114:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     124:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     134:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     144:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     154:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     164:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     174:	1d 0c 00 00 1d 0c 00 00 f5 80 00 00 bd ec 00 00     ................
     184:	cd ec 00 00 dd ec 00 00 ed ec 00 00 1d 0c 00 00     ................
     194:	51 b7 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     Q...............
     1a4:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 6d b7 00 00     ............m...
     1b4:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     1c4:	89 b7 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     1d4:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     1e4:	1d 0c 00 00 1d 0c 00 00 0d c4 00 00 1d 0c 00 00     ................
     1f4:	29 c4 00 00 1d 0c 00 00 45 c4 00 00 61 c4 00 00     ).......E...a...
     204:	7d c4 00 00 99 c4 00 00 1d 0c 00 00 1d 0c 00 00     }...............
     214:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     224:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     234:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     244:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................
     254:	1d 0c 00 00 1d 0c 00 00 1d 0c 00 00 1d 0c 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a34 	.word	0x20000a34
     280:	00000000 	.word	0x00000000
     284:	00012e14 	.word	0x00012e14

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00012e14 	.word	0x00012e14
     2c4:	20000a38 	.word	0x20000a38
     2c8:	00012e14 	.word	0x00012e14
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN20Compresor_ControllerC1Ev>:

#include "Compresor_Controller.h"
static uint8_t local_data_array[4];

// default constructor
Compresor_Controller::Compresor_Controller()
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     2de:	4618      	mov	r0, r3
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <_ZN20Compresor_ControllerC1Ev+0x2c>)
     2e2:	4798      	blx	r3
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	4618      	mov	r0, r3
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <_ZN20Compresor_ControllerC1Ev+0x30>)
     2ea:	4798      	blx	r3
     2ec:	4a05      	ldr	r2, [pc, #20]	; (304 <_ZN20Compresor_ControllerC1Ev+0x34>)
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	4618      	mov	r0, r3
     2f6:	3708      	adds	r7, #8
     2f8:	46bd      	mov	sp, r7
     2fa:	bd80      	pop	{r7, pc}
     2fc:	00000561 	.word	0x00000561
     300:	00000795 	.word	0x00000795
     304:	00011f10 	.word	0x00011f10

00000308 <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
     30e:	6078      	str	r0, [r7, #4]
     310:	4a08      	ldr	r2, [pc, #32]	; (334 <_ZN20Compresor_ControllerD1Ev+0x2c>)
     312:	687b      	ldr	r3, [r7, #4]
     314:	601a      	str	r2, [r3, #0]
     316:	687b      	ldr	r3, [r7, #4]
     318:	4618      	mov	r0, r3
     31a:	4b07      	ldr	r3, [pc, #28]	; (338 <_ZN20Compresor_ControllerD1Ev+0x30>)
     31c:	4798      	blx	r3
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     324:	4618      	mov	r0, r3
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <_ZN20Compresor_ControllerD1Ev+0x34>)
     328:	4798      	blx	r3
{
} //~Compresor_Controller
     32a:	687b      	ldr	r3, [r7, #4]
     32c:	4618      	mov	r0, r3
     32e:	3708      	adds	r7, #8
     330:	46bd      	mov	sp, r7
     332:	bd80      	pop	{r7, pc}
     334:	00011f10 	.word	0x00011f10
     338:	000007d1 	.word	0x000007d1
     33c:	00000581 	.word	0x00000581

00000340 <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
     340:	b590      	push	{r4, r7, lr}
     342:	b083      	sub	sp, #12
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	data_array=local_data_array;
     348:	687b      	ldr	r3, [r7, #4]
     34a:	4a1e      	ldr	r2, [pc, #120]	; (3c4 <_ZN20Compresor_Controller4InitEv+0x84>)
     34c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	isOK=InitExpander();
     350:	687b      	ldr	r3, [r7, #4]
     352:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     356:	4618      	mov	r0, r3
     358:	4b1b      	ldr	r3, [pc, #108]	; (3c8 <_ZN20Compresor_Controller4InitEv+0x88>)
     35a:	4798      	blx	r3
     35c:	4603      	mov	r3, r0
     35e:	461a      	mov	r2, r3
     360:	687b      	ldr	r3, [r7, #4]
     362:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
	if (isOK)
     366:	687b      	ldr	r3, [r7, #4]
     368:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
     36c:	b2db      	uxtb	r3, r3
     36e:	2b00      	cmp	r3, #0
     370:	d01f      	beq.n	3b2 <_ZN20Compresor_Controller4InitEv+0x72>
	{
		if (InitCANOpen())
     372:	687b      	ldr	r3, [r7, #4]
     374:	4618      	mov	r0, r3
     376:	4b15      	ldr	r3, [pc, #84]	; (3cc <_ZN20Compresor_Controller4InitEv+0x8c>)
     378:	4798      	blx	r3
     37a:	4603      	mov	r3, r0
     37c:	2b00      	cmp	r3, #0
     37e:	d018      	beq.n	3b2 <_ZN20Compresor_Controller4InitEv+0x72>
		{
			canopen_driver->canopen_ready=true;
     380:	4b13      	ldr	r3, [pc, #76]	; (3d0 <_ZN20Compresor_Controller4InitEv+0x90>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	2201      	movs	r2, #1
     386:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			Set_CAN_Enable(IsEnabledPointer());
     38a:	687c      	ldr	r4, [r7, #4]
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
     392:	4618      	mov	r0, r3
     394:	4b0f      	ldr	r3, [pc, #60]	; (3d4 <_ZN20Compresor_Controller4InitEv+0x94>)
     396:	4798      	blx	r3
     398:	4603      	mov	r3, r0
     39a:	4619      	mov	r1, r3
     39c:	4620      	mov	r0, r4
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <_ZN20Compresor_Controller4InitEv+0x98>)
     3a0:	4798      	blx	r3
			Set_Slave_ID(CCU_CANOPEN_NODE);
     3a2:	2102      	movs	r1, #2
     3a4:	6878      	ldr	r0, [r7, #4]
     3a6:	4b0d      	ldr	r3, [pc, #52]	; (3dc <_ZN20Compresor_Controller4InitEv+0x9c>)
     3a8:	4798      	blx	r3
			isOK=true;
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	2201      	movs	r2, #1
     3ae:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
		}
	} 
	else
	{
	}
	return isOK;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
     3b8:	b2db      	uxtb	r3, r3
}
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bd90      	pop	{r4, r7, pc}
     3c2:	bf00      	nop
     3c4:	20000b68 	.word	0x20000b68
     3c8:	00000595 	.word	0x00000595
     3cc:	000007f9 	.word	0x000007f9
     3d0:	20001a00 	.word	0x20001a00
     3d4:	00000691 	.word	0x00000691
     3d8:	000009f9 	.word	0x000009f9
     3dc:	000003e1 	.word	0x000003e1

000003e0 <_ZN20Compresor_Controller12Set_Slave_IDEh>:
uint8_t Compresor_Controller::Set_Slave_ID (uint8_t sn){
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
     3e8:	460b      	mov	r3, r1
     3ea:	70fb      	strb	r3, [r7, #3]
	return	canopen_driver->Set_Slave_Node(sn);
     3ec:	4b05      	ldr	r3, [pc, #20]	; (404 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x24>)
     3ee:	681b      	ldr	r3, [r3, #0]
     3f0:	78fa      	ldrb	r2, [r7, #3]
     3f2:	4611      	mov	r1, r2
     3f4:	4618      	mov	r0, r3
     3f6:	4b04      	ldr	r3, [pc, #16]	; (408 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x28>)
     3f8:	4798      	blx	r3
     3fa:	4603      	mov	r3, r0
}
     3fc:	4618      	mov	r0, r3
     3fe:	3708      	adds	r7, #8
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	20001a00 	.word	0x20001a00
     408:	00001e07 	.word	0x00001e07

0000040c <_Z41__static_initialization_and_destruction_0ii>:
void Compresor_Controller::GetCompressorStatus(void){
	data_array[0]=expander->ReadGPIORegister();
	memcpy(&data_array[1],&current_speed,2);
}
     40c:	b580      	push	{r7, lr}
     40e:	b082      	sub	sp, #8
     410:	af00      	add	r7, sp, #0
     412:	6078      	str	r0, [r7, #4]
     414:	6039      	str	r1, [r7, #0]
     416:	687b      	ldr	r3, [r7, #4]
     418:	2b01      	cmp	r3, #1
     41a:	d15d      	bne.n	4d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>
     41c:	683b      	ldr	r3, [r7, #0]
     41e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     422:	4293      	cmp	r3, r2
     424:	d158      	bne.n	4d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     426:	492e      	ldr	r1, [pc, #184]	; (4e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     428:	482e      	ldr	r0, [pc, #184]	; (4e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     42a:	4b2f      	ldr	r3, [pc, #188]	; (4e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     42c:	4798      	blx	r3
     42e:	4a2f      	ldr	r2, [pc, #188]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     430:	492f      	ldr	r1, [pc, #188]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     432:	482c      	ldr	r0, [pc, #176]	; (4e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     434:	4b2f      	ldr	r3, [pc, #188]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     436:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     438:	492f      	ldr	r1, [pc, #188]	; (4f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     43a:	4830      	ldr	r0, [pc, #192]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     43c:	4b30      	ldr	r3, [pc, #192]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     43e:	4798      	blx	r3
     440:	4a2a      	ldr	r2, [pc, #168]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     442:	4930      	ldr	r1, [pc, #192]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     444:	482d      	ldr	r0, [pc, #180]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     446:	4b2b      	ldr	r3, [pc, #172]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     448:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     44a:	492f      	ldr	r1, [pc, #188]	; (508 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     44c:	482f      	ldr	r0, [pc, #188]	; (50c <_Z41__static_initialization_and_destruction_0ii+0x100>)
     44e:	4b2c      	ldr	r3, [pc, #176]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     450:	4798      	blx	r3
     452:	4a26      	ldr	r2, [pc, #152]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     454:	492b      	ldr	r1, [pc, #172]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     456:	482d      	ldr	r0, [pc, #180]	; (50c <_Z41__static_initialization_and_destruction_0ii+0x100>)
     458:	4b26      	ldr	r3, [pc, #152]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     45a:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     45c:	492c      	ldr	r1, [pc, #176]	; (510 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     45e:	482d      	ldr	r0, [pc, #180]	; (514 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     460:	4b27      	ldr	r3, [pc, #156]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     462:	4798      	blx	r3
     464:	4a21      	ldr	r2, [pc, #132]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     466:	4927      	ldr	r1, [pc, #156]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     468:	482a      	ldr	r0, [pc, #168]	; (514 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     46a:	4b22      	ldr	r3, [pc, #136]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     46c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     46e:	492a      	ldr	r1, [pc, #168]	; (518 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     470:	482a      	ldr	r0, [pc, #168]	; (51c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     472:	4b23      	ldr	r3, [pc, #140]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     474:	4798      	blx	r3
     476:	4a1d      	ldr	r2, [pc, #116]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     478:	4922      	ldr	r1, [pc, #136]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     47a:	4828      	ldr	r0, [pc, #160]	; (51c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     47c:	4b1d      	ldr	r3, [pc, #116]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     47e:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     480:	4927      	ldr	r1, [pc, #156]	; (520 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     482:	4828      	ldr	r0, [pc, #160]	; (524 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     484:	4b1e      	ldr	r3, [pc, #120]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     486:	4798      	blx	r3
     488:	4a18      	ldr	r2, [pc, #96]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     48a:	491e      	ldr	r1, [pc, #120]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     48c:	4825      	ldr	r0, [pc, #148]	; (524 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     48e:	4b19      	ldr	r3, [pc, #100]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     490:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     492:	4925      	ldr	r1, [pc, #148]	; (528 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     494:	4825      	ldr	r0, [pc, #148]	; (52c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     496:	4b1a      	ldr	r3, [pc, #104]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     498:	4798      	blx	r3
     49a:	4a14      	ldr	r2, [pc, #80]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     49c:	4919      	ldr	r1, [pc, #100]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     49e:	4823      	ldr	r0, [pc, #140]	; (52c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     4a0:	4b14      	ldr	r3, [pc, #80]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     4a2:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     4a4:	4922      	ldr	r1, [pc, #136]	; (530 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     4a6:	4823      	ldr	r0, [pc, #140]	; (534 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     4a8:	4b15      	ldr	r3, [pc, #84]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     4aa:	4798      	blx	r3
     4ac:	4a0f      	ldr	r2, [pc, #60]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     4ae:	4915      	ldr	r1, [pc, #84]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     4b0:	4820      	ldr	r0, [pc, #128]	; (534 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     4b2:	4b10      	ldr	r3, [pc, #64]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     4b4:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     4b6:	4920      	ldr	r1, [pc, #128]	; (538 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     4b8:	4820      	ldr	r0, [pc, #128]	; (53c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     4ba:	4b11      	ldr	r3, [pc, #68]	; (500 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     4bc:	4798      	blx	r3
     4be:	4a0b      	ldr	r2, [pc, #44]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     4c0:	4910      	ldr	r1, [pc, #64]	; (504 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     4c2:	481e      	ldr	r0, [pc, #120]	; (53c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     4c4:	4b0b      	ldr	r3, [pc, #44]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     4c6:	4798      	blx	r3
     4c8:	481d      	ldr	r0, [pc, #116]	; (540 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     4ca:	4b1e      	ldr	r3, [pc, #120]	; (544 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     4cc:	4798      	blx	r3
     4ce:	4a07      	ldr	r2, [pc, #28]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     4d0:	491d      	ldr	r1, [pc, #116]	; (548 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     4d2:	481b      	ldr	r0, [pc, #108]	; (540 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     4d4:	4b07      	ldr	r3, [pc, #28]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     4d6:	4798      	blx	r3
     4d8:	bf00      	nop
     4da:	3708      	adds	r7, #8
     4dc:	46bd      	mov	sp, r7
     4de:	bd80      	pop	{r7, pc}
     4e0:	20002654 	.word	0x20002654
     4e4:	20000a50 	.word	0x20000a50
     4e8:	00011159 	.word	0x00011159
     4ec:	20000000 	.word	0x20000000
     4f0:	00011175 	.word	0x00011175
     4f4:	00011b95 	.word	0x00011b95
     4f8:	20002524 	.word	0x20002524
     4fc:	20000a68 	.word	0x20000a68
     500:	00011749 	.word	0x00011749
     504:	00011781 	.word	0x00011781
     508:	200025b8 	.word	0x200025b8
     50c:	20000a88 	.word	0x20000a88
     510:	200026dc 	.word	0x200026dc
     514:	20000aa8 	.word	0x20000aa8
     518:	200025d8 	.word	0x200025d8
     51c:	20000ac8 	.word	0x20000ac8
     520:	2000269c 	.word	0x2000269c
     524:	20000ae8 	.word	0x20000ae8
     528:	200026bc 	.word	0x200026bc
     52c:	20000b08 	.word	0x20000b08
     530:	20002594 	.word	0x20002594
     534:	20000b28 	.word	0x20000b28
     538:	20002634 	.word	0x20002634
     53c:	20000b48 	.word	0x20000b48
     540:	20000b6c 	.word	0x20000b6c
     544:	000002d1 	.word	0x000002d1
     548:	00000309 	.word	0x00000309

0000054c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
     54c:	b580      	push	{r7, lr}
     54e:	af00      	add	r7, sp, #0
     550:	f64f 71ff 	movw	r1, #65535	; 0xffff
     554:	2001      	movs	r0, #1
     556:	4b01      	ldr	r3, [pc, #4]	; (55c <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
     558:	4798      	blx	r3
     55a:	bd80      	pop	{r7, pc}
     55c:	0000040d 	.word	0x0000040d

00000560 <_ZN23Compresor_I2C_InterfaceC1Ev>:

#include "Compresor_I2C_Interface.h"

static	MCP23008_Class expandersCompresorStatic;
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
     560:	b480      	push	{r7}
     562:	b083      	sub	sp, #12
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
     568:	687b      	ldr	r3, [r7, #4]
     56a:	4a04      	ldr	r2, [pc, #16]	; (57c <_ZN23Compresor_I2C_InterfaceC1Ev+0x1c>)
     56c:	60da      	str	r2, [r3, #12]
} //Compresor_I2C_Interface
     56e:	687b      	ldr	r3, [r7, #4]
     570:	4618      	mov	r0, r3
     572:	370c      	adds	r7, #12
     574:	46bd      	mov	sp, r7
     576:	bc80      	pop	{r7}
     578:	4770      	bx	lr
     57a:	bf00      	nop
     57c:	20000d28 	.word	0x20000d28

00000580 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
     580:	b480      	push	{r7}
     582:	b083      	sub	sp, #12
     584:	af00      	add	r7, sp, #0
     586:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4618      	mov	r0, r3
     58c:	370c      	adds	r7, #12
     58e:	46bd      	mov	sp, r7
     590:	bc80      	pop	{r7}
     592:	4770      	bx	lr

00000594 <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	68db      	ldr	r3, [r3, #12]
     5a0:	7a1b      	ldrb	r3, [r3, #8]
     5a2:	b2db      	uxtb	r3, r3
     5a4:	2b00      	cmp	r3, #0
     5a6:	d104      	bne.n	5b2 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	68db      	ldr	r3, [r3, #12]
     5ac:	4618      	mov	r0, r3
     5ae:	4b17      	ldr	r3, [pc, #92]	; (60c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x78>)
     5b0:	4798      	blx	r3
	}
	if (i2c->isOK)
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	68db      	ldr	r3, [r3, #12]
     5b6:	7a5b      	ldrb	r3, [r3, #9]
     5b8:	b2db      	uxtb	r3, r3
     5ba:	2b00      	cmp	r3, #0
     5bc:	d018      	beq.n	5f0 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x5c>
	{
		expander=&expandersCompresorStatic;
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	4a13      	ldr	r2, [pc, #76]	; (610 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>)
     5c2:	609a      	str	r2, [r3, #8]
		expander->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	6898      	ldr	r0, [r3, #8]
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	68db      	ldr	r3, [r3, #12]
     5cc:	461a      	mov	r2, r3
     5ce:	2125      	movs	r1, #37	; 0x25
     5d0:	4b10      	ldr	r3, [pc, #64]	; (614 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x80>)
     5d2:	4798      	blx	r3
		expander->SetPortInput(0xf0);
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	689b      	ldr	r3, [r3, #8]
     5d8:	21f0      	movs	r1, #240	; 0xf0
     5da:	4618      	mov	r0, r3
     5dc:	4b0e      	ldr	r3, [pc, #56]	; (618 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x84>)
     5de:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
     5e0:	6878      	ldr	r0, [r7, #4]
     5e2:	4b0e      	ldr	r3, [pc, #56]	; (61c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x88>)
     5e4:	4798      	blx	r3
     5e6:	4603      	mov	r3, r0
     5e8:	461a      	mov	r2, r3
     5ea:	687b      	ldr	r3, [r7, #4]
     5ec:	741a      	strb	r2, [r3, #16]
     5ee:	e000      	b.n	5f2 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x5e>
	}
	else
	{
		asm("nop");
     5f0:	bf00      	nop
	}
	isOK=i2c->isOK;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	68db      	ldr	r3, [r3, #12]
     5f6:	7a5b      	ldrb	r3, [r3, #9]
     5f8:	b2da      	uxtb	r2, r3
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	741a      	strb	r2, [r3, #16]
		return isOK;
     5fe:	687b      	ldr	r3, [r7, #4]
     600:	7c1b      	ldrb	r3, [r3, #16]
}
     602:	4618      	mov	r0, r3
     604:	3708      	adds	r7, #8
     606:	46bd      	mov	sp, r7
     608:	bd80      	pop	{r7, pc}
     60a:	bf00      	nop
     60c:	00011189 	.word	0x00011189
     610:	20000d40 	.word	0x20000d40
     614:	0001133d 	.word	0x0001133d
     618:	000114a5 	.word	0x000114a5
     61c:	000006cd 	.word	0x000006cd

00000620 <_ZN23Compresor_I2C_Interface9SetEnableEb>:
	uint8_t r=expander->ReadGPIORegister();
	
	return r;
	
}
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
     620:	b580      	push	{r7, lr}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
     628:	460b      	mov	r3, r1
     62a:	70fb      	strb	r3, [r7, #3]

	enabled=expander->WriteDigit(0,state);
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	689b      	ldr	r3, [r3, #8]
     630:	78fa      	ldrb	r2, [r7, #3]
     632:	2100      	movs	r1, #0
     634:	4618      	mov	r0, r3
     636:	4b06      	ldr	r3, [pc, #24]	; (650 <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
     638:	4798      	blx	r3
     63a:	4603      	mov	r3, r0
     63c:	461a      	mov	r2, r3
     63e:	687b      	ldr	r3, [r7, #4]
     640:	745a      	strb	r2, [r3, #17]
	return uint8_t(enabled);
     642:	687b      	ldr	r3, [r7, #4]
     644:	7c5b      	ldrb	r3, [r3, #17]
}
     646:	4618      	mov	r0, r3
     648:	3708      	adds	r7, #8
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}
     64e:	bf00      	nop
     650:	00011611 	.word	0x00011611

00000654 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
     654:	b580      	push	{r7, lr}
     656:	b084      	sub	sp, #16
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]

	uint8_t value=expander->ReadGPIORegister();
     65c:	687b      	ldr	r3, [r7, #4]
     65e:	689b      	ldr	r3, [r3, #8]
     660:	4618      	mov	r0, r3
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
     664:	4798      	blx	r3
     666:	4603      	mov	r3, r0
     668:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
     66a:	7bfb      	ldrb	r3, [r7, #15]
     66c:	f003 0301 	and.w	r3, r3, #1
     670:	2b00      	cmp	r3, #0
     672:	bf14      	ite	ne
     674:	2301      	movne	r3, #1
     676:	2300      	moveq	r3, #0
     678:	b2da      	uxtb	r2, r3
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	745a      	strb	r2, [r3, #17]
	return enabled;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	7c5b      	ldrb	r3, [r3, #17]
}
     682:	4618      	mov	r0, r3
     684:	3710      	adds	r7, #16
     686:	46bd      	mov	sp, r7
     688:	bd80      	pop	{r7, pc}
     68a:	bf00      	nop
     68c:	00011421 	.word	0x00011421

00000690 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
     690:	b580      	push	{r7, lr}
     692:	b084      	sub	sp, #16
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]

	uint8_t value=expander->ReadGPIORegister();
     698:	687b      	ldr	r3, [r7, #4]
     69a:	689b      	ldr	r3, [r3, #8]
     69c:	4618      	mov	r0, r3
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
     6a0:	4798      	blx	r3
     6a2:	4603      	mov	r3, r0
     6a4:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
     6a6:	7bfb      	ldrb	r3, [r7, #15]
     6a8:	f003 0301 	and.w	r3, r3, #1
     6ac:	2b00      	cmp	r3, #0
     6ae:	bf14      	ite	ne
     6b0:	2301      	movne	r3, #1
     6b2:	2300      	moveq	r3, #0
     6b4:	b2da      	uxtb	r2, r3
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	745a      	strb	r2, [r3, #17]
	return &enabled;
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	3311      	adds	r3, #17
}
     6be:	4618      	mov	r0, r3
     6c0:	3710      	adds	r7, #16
     6c2:	46bd      	mov	sp, r7
     6c4:	bd80      	pop	{r7, pc}
     6c6:	bf00      	nop
     6c8:	00011421 	.word	0x00011421

000006cc <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
     6cc:	b480      	push	{r7}
     6ce:	b085      	sub	sp, #20
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
	bool result=true;
     6d4:	2301      	movs	r3, #1
     6d6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
     6d8:	2300      	movs	r3, #0
     6da:	73fb      	strb	r3, [r7, #15]
     6dc:	7bfb      	ldrb	r3, [r7, #15]
     6de:	2b03      	cmp	r3, #3
     6e0:	dc03      	bgt.n	6ea <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
     6e2:	7bfb      	ldrb	r3, [r7, #15]
     6e4:	3301      	adds	r3, #1
     6e6:	73fb      	strb	r3, [r7, #15]
     6e8:	e7f8      	b.n	6dc <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
     6ea:	7bbb      	ldrb	r3, [r7, #14]
     6ec:	4618      	mov	r0, r3
     6ee:	3714      	adds	r7, #20
     6f0:	46bd      	mov	sp, r7
     6f2:	bc80      	pop	{r7}
     6f4:	4770      	bx	lr
	...

000006f8 <_Z41__static_initialization_and_destruction_0ii>:
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
     700:	6039      	str	r1, [r7, #0]
     702:	687b      	ldr	r3, [r7, #4]
     704:	2b01      	cmp	r3, #1
     706:	d115      	bne.n	734 <_Z41__static_initialization_and_destruction_0ii+0x3c>
     708:	683b      	ldr	r3, [r7, #0]
     70a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     70e:	4293      	cmp	r3, r2
     710:	d110      	bne.n	734 <_Z41__static_initialization_and_destruction_0ii+0x3c>
     712:	490a      	ldr	r1, [pc, #40]	; (73c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     714:	480a      	ldr	r0, [pc, #40]	; (740 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     716:	4b0b      	ldr	r3, [pc, #44]	; (744 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     718:	4798      	blx	r3
     71a:	4a0b      	ldr	r2, [pc, #44]	; (748 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     71c:	490b      	ldr	r1, [pc, #44]	; (74c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     71e:	4808      	ldr	r0, [pc, #32]	; (740 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     720:	4b0b      	ldr	r3, [pc, #44]	; (750 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     722:	4798      	blx	r3
static	MCP23008_Class expandersCompresorStatic;
     724:	480b      	ldr	r0, [pc, #44]	; (754 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     726:	4b0c      	ldr	r3, [pc, #48]	; (758 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     728:	4798      	blx	r3
     72a:	4a07      	ldr	r2, [pc, #28]	; (748 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     72c:	490b      	ldr	r1, [pc, #44]	; (75c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     72e:	4809      	ldr	r0, [pc, #36]	; (754 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     730:	4b07      	ldr	r3, [pc, #28]	; (750 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     732:	4798      	blx	r3
     734:	bf00      	nop
     736:	3708      	adds	r7, #8
     738:	46bd      	mov	sp, r7
     73a:	bd80      	pop	{r7, pc}
     73c:	20002654 	.word	0x20002654
     740:	20000d28 	.word	0x20000d28
     744:	00011159 	.word	0x00011159
     748:	20000000 	.word	0x20000000
     74c:	00011175 	.word	0x00011175
     750:	00011b95 	.word	0x00011b95
     754:	20000d40 	.word	0x20000d40
     758:	00011315 	.word	0x00011315
     75c:	00011329 	.word	0x00011329

00000760 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
     760:	b580      	push	{r7, lr}
     762:	af00      	add	r7, sp, #0
     764:	f64f 71ff 	movw	r1, #65535	; 0xffff
     768:	2001      	movs	r0, #1
     76a:	4b01      	ldr	r3, [pc, #4]	; (770 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
     76c:	4798      	blx	r3
     76e:	bd80      	pop	{r7, pc}
     770:	000006f9 	.word	0x000006f9

00000774 <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
     774:	b480      	push	{r7}
     776:	b083      	sub	sp, #12
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
     77c:	4b04      	ldr	r3, [pc, #16]	; (790 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
     77e:	2201      	movs	r2, #1
     780:	701a      	strb	r2, [r3, #0]
	asm("nop" );
     782:	bf00      	nop
}
     784:	bf00      	nop
     786:	370c      	adds	r7, #12
     788:	46bd      	mov	sp, r7
     78a:	bc80      	pop	{r7}
     78c:	4770      	bx	lr
     78e:	bf00      	nop
     790:	20000ff0 	.word	0x20000ff0

00000794 <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
     794:	b580      	push	{r7, lr}
     796:	b082      	sub	sp, #8
     798:	af00      	add	r7, sp, #0
     79a:	6078      	str	r0, [r7, #4]
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	4618      	mov	r0, r3
     7a0:	4b08      	ldr	r3, [pc, #32]	; (7c4 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
     7a2:	4798      	blx	r3
     7a4:	4a08      	ldr	r2, [pc, #32]	; (7c8 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	4a07      	ldr	r2, [pc, #28]	; (7cc <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
     7ae:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	2201      	movs	r2, #1
     7b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
} //Compressor_Can_Interface
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	4618      	mov	r0, r3
     7be:	3708      	adds	r7, #8
     7c0:	46bd      	mov	sp, r7
     7c2:	bd80      	pop	{r7, pc}
     7c4:	00000f09 	.word	0x00000f09
     7c8:	00011f1c 	.word	0x00011f1c
     7cc:	20000ff0 	.word	0x20000ff0

000007d0 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
     7d0:	b580      	push	{r7, lr}
     7d2:	b082      	sub	sp, #8
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	4a05      	ldr	r2, [pc, #20]	; (7f0 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	601a      	str	r2, [r3, #0]
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	4618      	mov	r0, r3
     7e2:	4b04      	ldr	r3, [pc, #16]	; (7f4 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
     7e4:	4798      	blx	r3
{
} //~Compressor_Can_Interface
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	4618      	mov	r0, r3
     7ea:	3708      	adds	r7, #8
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}
     7f0:	00011f1c 	.word	0x00011f1c
     7f4:	00000f79 	.word	0x00000f79

000007f8 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
     7f8:	b580      	push	{r7, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
     800:	687b      	ldr	r3, [r7, #4]
     802:	4a1e      	ldr	r2, [pc, #120]	; (87c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
     804:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	speed=&local_speed;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	4a1d      	ldr	r2, [pc, #116]	; (880 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
     80c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
     810:	687b      	ldr	r3, [r7, #4]
     812:	4a1c      	ldr	r2, [pc, #112]	; (884 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
     814:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
     818:	687b      	ldr	r3, [r7, #4]
     81a:	2201      	movs	r2, #1
     81c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	cano=&canoStatic;
     820:	687b      	ldr	r3, [r7, #4]
     822:	4a19      	ldr	r2, [pc, #100]	; (888 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
     824:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	int_result=cano->Init(NMT_MASTER_NODE);
     828:	687b      	ldr	r3, [r7, #4]
     82a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     82e:	2101      	movs	r1, #1
     830:	4618      	mov	r0, r3
     832:	4b16      	ldr	r3, [pc, #88]	; (88c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
     834:	4798      	blx	r3
     836:	4602      	mov	r2, r0
     838:	687b      	ldr	r3, [r7, #4]
     83a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	if (int_result==0)
     83e:	687b      	ldr	r3, [r7, #4]
     840:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     844:	2b00      	cmp	r3, #0
     846:	d10b      	bne.n	860 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
     848:	687b      	ldr	r3, [r7, #4]
     84a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     84e:	2102      	movs	r1, #2
     850:	4618      	mov	r0, r3
     852:	4b0f      	ldr	r3, [pc, #60]	; (890 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
     854:	4798      	blx	r3
     856:	4603      	mov	r3, r0
     858:	461a      	mov	r2, r3
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     864:	490b      	ldr	r1, [pc, #44]	; (894 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
     866:	480c      	ldr	r0, [pc, #48]	; (898 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
     868:	4b0c      	ldr	r3, [pc, #48]	; (89c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
     86a:	4798      	blx	r3
	
	return boolResult;
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
	
}
     872:	4618      	mov	r0, r3
     874:	3708      	adds	r7, #8
     876:	46bd      	mov	sp, r7
     878:	bd80      	pop	{r7, pc}
     87a:	bf00      	nop
     87c:	20000fe8 	.word	0x20000fe8
     880:	20000ff2 	.word	0x20000ff2
     884:	20000ff0 	.word	0x20000ff0
     888:	20000e74 	.word	0x20000e74
     88c:	00000fa1 	.word	0x00000fa1
     890:	00001065 	.word	0x00001065
     894:	00000775 	.word	0x00000775
     898:	20000e54 	.word	0x20000e54
     89c:	00011849 	.word	0x00011849

000008a0 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
     8a8:	4b32      	ldr	r3, [pc, #200]	; (974 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd4>)
     8aa:	781b      	ldrb	r3, [r3, #0]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d05c      	beq.n	96a <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xca>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     8b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	7d1b      	ldrb	r3, [r3, #20]
     8be:	b2db      	uxtb	r3, r3
     8c0:	2b00      	cmp	r3, #0
     8c2:	bf14      	ite	ne
     8c4:	2301      	movne	r3, #1
     8c6:	2300      	moveq	r3, #0
     8c8:	b2db      	uxtb	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	d044      	beq.n	958 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb8>
		{
				syncWas=cano->Send_SYNC_Signal();
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     8d4:	330c      	adds	r3, #12
     8d6:	4618      	mov	r0, r3
     8d8:	4b27      	ldr	r3, [pc, #156]	; (978 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd8>)
     8da:	4798      	blx	r3
     8dc:	4603      	mov	r3, r0
     8de:	461a      	mov	r2, r3
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
				if (syncWas==0)
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
     8ec:	2b00      	cmp	r3, #0
     8ee:	d106      	bne.n	8fe <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x5e>
				{
					//cano->Pass_Temperature_To_voltage();
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
     8f6:	4a21      	ldr	r2, [pc, #132]	; (97c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xdc>)
     8f8:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
     8fc:	801a      	strh	r2, [r3, #0]
				//	current_speed=(uint16_t)(CO_OD_RAM.voltage)
				} 
				else
				{
				}
				is_enabled=ccu.IsEnabled();
     8fe:	4820      	ldr	r0, [pc, #128]	; (980 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe0>)
     900:	4b20      	ldr	r3, [pc, #128]	; (984 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe4>)
     902:	4798      	blx	r3
     904:	4603      	mov	r3, r0
     906:	461a      	mov	r2, r3
     908:	687b      	ldr	r3, [r7, #4]
     90a:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
				if ((is_enabled))
     90e:	687b      	ldr	r3, [r7, #4]
     910:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
     914:	2b00      	cmp	r3, #0
     916:	d00b      	beq.n	930 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x90>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
     918:	687b      	ldr	r3, [r7, #4]
     91a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
     91e:	8819      	ldrh	r1, [r3, #0]
     920:	687b      	ldr	r3, [r7, #4]
     922:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
     926:	461a      	mov	r2, r3
     928:	6878      	ldr	r0, [r7, #4]
     92a:	4b17      	ldr	r3, [pc, #92]	; (988 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
     92c:	4798      	blx	r3
     92e:	e007      	b.n	940 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
					
				}else{
					
					Convert_Uint16_Array(0,tx_can_buffer);
     930:	687b      	ldr	r3, [r7, #4]
     932:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
     936:	461a      	mov	r2, r3
     938:	2100      	movs	r1, #0
     93a:	6878      	ldr	r0, [r7, #4]
     93c:	4b12      	ldr	r3, [pc, #72]	; (988 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
     93e:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
     940:	687b      	ldr	r3, [r7, #4]
     942:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     946:	f103 0014 	add.w	r0, r3, #20
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
     950:	2202      	movs	r2, #2
     952:	4619      	mov	r1, r3
     954:	4b0d      	ldr	r3, [pc, #52]	; (98c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xec>)
     956:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
     958:	4b06      	ldr	r3, [pc, #24]	; (974 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xd4>)
     95a:	2200      	movs	r2, #0
     95c:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
     95e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     962:	490b      	ldr	r1, [pc, #44]	; (990 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
     964:	480b      	ldr	r0, [pc, #44]	; (994 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf4>)
     966:	4b0c      	ldr	r3, [pc, #48]	; (998 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf8>)
     968:	4798      	blx	r3
	} 
	else
	{
	}

}
     96a:	bf00      	nop
     96c:	3708      	adds	r7, #8
     96e:	46bd      	mov	sp, r7
     970:	bd80      	pop	{r7, pc}
     972:	bf00      	nop
     974:	20000ff0 	.word	0x20000ff0
     978:	00004621 	.word	0x00004621
     97c:	20000008 	.word	0x20000008
     980:	20000d08 	.word	0x20000d08
     984:	00000655 	.word	0x00000655
     988:	0000099d 	.word	0x0000099d
     98c:	00003919 	.word	0x00003919
     990:	00000775 	.word	0x00000775
     994:	20000e54 	.word	0x20000e54
     998:	00011849 	.word	0x00011849

0000099c <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
     99c:	b480      	push	{r7}
     99e:	b087      	sub	sp, #28
     9a0:	af00      	add	r7, sp, #0
     9a2:	60f8      	str	r0, [r7, #12]
     9a4:	460b      	mov	r3, r1
     9a6:	607a      	str	r2, [r7, #4]
     9a8:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
     9aa:	2300      	movs	r3, #0
     9ac:	75fb      	strb	r3, [r7, #23]
     9ae:	7dfb      	ldrb	r3, [r7, #23]
     9b0:	2b07      	cmp	r3, #7
     9b2:	dc18      	bgt.n	9e6 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
     9b4:	7dfb      	ldrb	r3, [r7, #23]
     9b6:	2b01      	cmp	r3, #1
     9b8:	dc0d      	bgt.n	9d6 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
     9ba:	7dfb      	ldrb	r3, [r7, #23]
     9bc:	68fa      	ldr	r2, [r7, #12]
     9be:	f8d2 2190 	ldr.w	r2, [r2, #400]	; 0x190
     9c2:	8812      	ldrh	r2, [r2, #0]
     9c4:	4611      	mov	r1, r2
     9c6:	7dfa      	ldrb	r2, [r7, #23]
     9c8:	00d2      	lsls	r2, r2, #3
     9ca:	fa41 f202 	asr.w	r2, r1, r2
     9ce:	b2d1      	uxtb	r1, r2
     9d0:	4a08      	ldr	r2, [pc, #32]	; (9f4 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     9d2:	54d1      	strb	r1, [r2, r3]
     9d4:	e003      	b.n	9de <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
     9d6:	7dfb      	ldrb	r3, [r7, #23]
     9d8:	4a06      	ldr	r2, [pc, #24]	; (9f4 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     9da:	2100      	movs	r1, #0
     9dc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
     9de:	7dfb      	ldrb	r3, [r7, #23]
     9e0:	3301      	adds	r3, #1
     9e2:	75fb      	strb	r3, [r7, #23]
     9e4:	e7e3      	b.n	9ae <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
     9e8:	607b      	str	r3, [r7, #4]
}
     9ea:	bf00      	nop
     9ec:	371c      	adds	r7, #28
     9ee:	46bd      	mov	sp, r7
     9f0:	bc80      	pop	{r7}
     9f2:	4770      	bx	lr
     9f4:	20000fe8 	.word	0x20000fe8

000009f8 <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
     9f8:	b480      	push	{r7}
     9fa:	b083      	sub	sp, #12
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
     a00:	6039      	str	r1, [r7, #0]
	enable=st;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	683a      	ldr	r2, [r7, #0]
     a06:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	return  *enable;
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
     a10:	781b      	ldrb	r3, [r3, #0]
}
     a12:	4618      	mov	r0, r3
     a14:	370c      	adds	r7, #12
     a16:	46bd      	mov	sp, r7
     a18:	bc80      	pop	{r7}
     a1a:	4770      	bx	lr

00000a1c <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
     a1c:	b480      	push	{r7}
     a1e:	b083      	sub	sp, #12
     a20:	af00      	add	r7, sp, #0
     a22:	6078      	str	r0, [r7, #4]
     a24:	460b      	mov	r3, r1
     a26:	807b      	strh	r3, [r7, #2]
	*speed=sp;
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
     a2e:	887a      	ldrh	r2, [r7, #2]
     a30:	801a      	strh	r2, [r3, #0]
}
     a32:	bf00      	nop
     a34:	370c      	adds	r7, #12
     a36:	46bd      	mov	sp, r7
     a38:	bc80      	pop	{r7}
     a3a:	4770      	bx	lr

00000a3c <_Z41__static_initialization_and_destruction_0ii>:
     a3c:	b580      	push	{r7, lr}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	2b01      	cmp	r3, #1
     a4a:	d15e      	bne.n	b0a <_Z41__static_initialization_and_destruction_0ii+0xce>
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     a52:	4293      	cmp	r3, r2
     a54:	d159      	bne.n	b0a <_Z41__static_initialization_and_destruction_0ii+0xce>
     a56:	492f      	ldr	r1, [pc, #188]	; (b14 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     a58:	482f      	ldr	r0, [pc, #188]	; (b18 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     a5a:	4b30      	ldr	r3, [pc, #192]	; (b1c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     a5c:	4798      	blx	r3
     a5e:	4a30      	ldr	r2, [pc, #192]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a60:	4930      	ldr	r1, [pc, #192]	; (b24 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     a62:	482d      	ldr	r0, [pc, #180]	; (b18 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     a64:	4b30      	ldr	r3, [pc, #192]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a66:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     a68:	4930      	ldr	r1, [pc, #192]	; (b2c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     a6a:	4831      	ldr	r0, [pc, #196]	; (b30 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     a6c:	4b31      	ldr	r3, [pc, #196]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a6e:	4798      	blx	r3
     a70:	4a2b      	ldr	r2, [pc, #172]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a72:	4931      	ldr	r1, [pc, #196]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a74:	482e      	ldr	r0, [pc, #184]	; (b30 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     a76:	4b2c      	ldr	r3, [pc, #176]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a78:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     a7a:	4930      	ldr	r1, [pc, #192]	; (b3c <_Z41__static_initialization_and_destruction_0ii+0x100>)
     a7c:	4830      	ldr	r0, [pc, #192]	; (b40 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     a7e:	4b2d      	ldr	r3, [pc, #180]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a80:	4798      	blx	r3
     a82:	4a27      	ldr	r2, [pc, #156]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a84:	492c      	ldr	r1, [pc, #176]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a86:	482e      	ldr	r0, [pc, #184]	; (b40 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     a88:	4b27      	ldr	r3, [pc, #156]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a8a:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     a8c:	492d      	ldr	r1, [pc, #180]	; (b44 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     a8e:	482e      	ldr	r0, [pc, #184]	; (b48 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     a90:	4b28      	ldr	r3, [pc, #160]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     a92:	4798      	blx	r3
     a94:	4a22      	ldr	r2, [pc, #136]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     a96:	4928      	ldr	r1, [pc, #160]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     a98:	482b      	ldr	r0, [pc, #172]	; (b48 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     a9a:	4b23      	ldr	r3, [pc, #140]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     a9c:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     a9e:	492b      	ldr	r1, [pc, #172]	; (b4c <_Z41__static_initialization_and_destruction_0ii+0x110>)
     aa0:	482b      	ldr	r0, [pc, #172]	; (b50 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     aa2:	4b24      	ldr	r3, [pc, #144]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     aa4:	4798      	blx	r3
     aa6:	4a1e      	ldr	r2, [pc, #120]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     aa8:	4923      	ldr	r1, [pc, #140]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     aaa:	4829      	ldr	r0, [pc, #164]	; (b50 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     aac:	4b1e      	ldr	r3, [pc, #120]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     aae:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     ab0:	4928      	ldr	r1, [pc, #160]	; (b54 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     ab2:	4829      	ldr	r0, [pc, #164]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     ab4:	4b1f      	ldr	r3, [pc, #124]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     ab6:	4798      	blx	r3
     ab8:	4a19      	ldr	r2, [pc, #100]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     aba:	491f      	ldr	r1, [pc, #124]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     abc:	4826      	ldr	r0, [pc, #152]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     abe:	4b1a      	ldr	r3, [pc, #104]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     ac0:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     ac2:	4926      	ldr	r1, [pc, #152]	; (b5c <_Z41__static_initialization_and_destruction_0ii+0x120>)
     ac4:	4826      	ldr	r0, [pc, #152]	; (b60 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     ac6:	4b1b      	ldr	r3, [pc, #108]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     ac8:	4798      	blx	r3
     aca:	4a15      	ldr	r2, [pc, #84]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     acc:	491a      	ldr	r1, [pc, #104]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     ace:	4824      	ldr	r0, [pc, #144]	; (b60 <_Z41__static_initialization_and_destruction_0ii+0x124>)
     ad0:	4b15      	ldr	r3, [pc, #84]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     ad2:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     ad4:	4923      	ldr	r1, [pc, #140]	; (b64 <_Z41__static_initialization_and_destruction_0ii+0x128>)
     ad6:	4824      	ldr	r0, [pc, #144]	; (b68 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     ad8:	4b16      	ldr	r3, [pc, #88]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     ada:	4798      	blx	r3
     adc:	4a10      	ldr	r2, [pc, #64]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     ade:	4916      	ldr	r1, [pc, #88]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     ae0:	4821      	ldr	r0, [pc, #132]	; (b68 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
     ae2:	4b11      	ldr	r3, [pc, #68]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     ae4:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     ae6:	4921      	ldr	r1, [pc, #132]	; (b6c <_Z41__static_initialization_and_destruction_0ii+0x130>)
     ae8:	4821      	ldr	r0, [pc, #132]	; (b70 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     aea:	4b12      	ldr	r3, [pc, #72]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     aec:	4798      	blx	r3
     aee:	4a0c      	ldr	r2, [pc, #48]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     af0:	4911      	ldr	r1, [pc, #68]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     af2:	481f      	ldr	r0, [pc, #124]	; (b70 <_Z41__static_initialization_and_destruction_0ii+0x134>)
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     af6:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
     af8:	491e      	ldr	r1, [pc, #120]	; (b74 <_Z41__static_initialization_and_destruction_0ii+0x138>)
     afa:	481f      	ldr	r0, [pc, #124]	; (b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     afc:	4b1f      	ldr	r3, [pc, #124]	; (b7c <_Z41__static_initialization_and_destruction_0ii+0x140>)
     afe:	4798      	blx	r3
     b00:	4a07      	ldr	r2, [pc, #28]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     b02:	491f      	ldr	r1, [pc, #124]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x144>)
     b04:	481c      	ldr	r0, [pc, #112]	; (b78 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
     b06:	4b08      	ldr	r3, [pc, #32]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     b08:	4798      	blx	r3
}
     b0a:	bf00      	nop
     b0c:	3708      	adds	r7, #8
     b0e:	46bd      	mov	sp, r7
     b10:	bd80      	pop	{r7, pc}
     b12:	bf00      	nop
     b14:	20002654 	.word	0x20002654
     b18:	20000d5c 	.word	0x20000d5c
     b1c:	00011159 	.word	0x00011159
     b20:	20000000 	.word	0x20000000
     b24:	00011175 	.word	0x00011175
     b28:	00011b95 	.word	0x00011b95
     b2c:	20002524 	.word	0x20002524
     b30:	20000d74 	.word	0x20000d74
     b34:	00011749 	.word	0x00011749
     b38:	00011781 	.word	0x00011781
     b3c:	200025b8 	.word	0x200025b8
     b40:	20000d94 	.word	0x20000d94
     b44:	200026dc 	.word	0x200026dc
     b48:	20000db4 	.word	0x20000db4
     b4c:	200025d8 	.word	0x200025d8
     b50:	20000dd4 	.word	0x20000dd4
     b54:	2000269c 	.word	0x2000269c
     b58:	20000df4 	.word	0x20000df4
     b5c:	200026bc 	.word	0x200026bc
     b60:	20000e14 	.word	0x20000e14
     b64:	20002594 	.word	0x20002594
     b68:	20000e34 	.word	0x20000e34
     b6c:	20002634 	.word	0x20002634
     b70:	20000e54 	.word	0x20000e54
     b74:	20002674 	.word	0x20002674
     b78:	20000e74 	.word	0x20000e74
     b7c:	00000f3d 	.word	0x00000f3d
     b80:	00000f79 	.word	0x00000f79

00000b84 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
     b84:	b580      	push	{r7, lr}
     b86:	af00      	add	r7, sp, #0
     b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b8c:	2001      	movs	r0, #1
     b8e:	4b01      	ldr	r3, [pc, #4]	; (b94 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
     b90:	4798      	blx	r3
     b92:	bd80      	pop	{r7, pc}
     b94:	00000a3d 	.word	0x00000a3d

00000b98 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     b98:	b580      	push	{r7, lr}
     b9a:	b082      	sub	sp, #8
     b9c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     b9e:	4b16      	ldr	r3, [pc, #88]	; (bf8 <Reset_Handler+0x60>)
     ba0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     ba2:	4b16      	ldr	r3, [pc, #88]	; (bfc <Reset_Handler+0x64>)
     ba4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	683b      	ldr	r3, [r7, #0]
     baa:	429a      	cmp	r2, r3
     bac:	d00c      	beq.n	bc8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     bae:	e007      	b.n	bc0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     bb0:	683b      	ldr	r3, [r7, #0]
     bb2:	1d1a      	adds	r2, r3, #4
     bb4:	603a      	str	r2, [r7, #0]
     bb6:	687a      	ldr	r2, [r7, #4]
     bb8:	1d11      	adds	r1, r2, #4
     bba:	6079      	str	r1, [r7, #4]
     bbc:	6812      	ldr	r2, [r2, #0]
     bbe:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     bc0:	683b      	ldr	r3, [r7, #0]
     bc2:	4a0f      	ldr	r2, [pc, #60]	; (c00 <Reset_Handler+0x68>)
     bc4:	4293      	cmp	r3, r2
     bc6:	d3f3      	bcc.n	bb0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     bc8:	4b0e      	ldr	r3, [pc, #56]	; (c04 <Reset_Handler+0x6c>)
     bca:	603b      	str	r3, [r7, #0]
     bcc:	e004      	b.n	bd8 <Reset_Handler+0x40>
                *pDest++ = 0;
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	1d1a      	adds	r2, r3, #4
     bd2:	603a      	str	r2, [r7, #0]
     bd4:	2200      	movs	r2, #0
     bd6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     bd8:	683b      	ldr	r3, [r7, #0]
     bda:	4a0b      	ldr	r2, [pc, #44]	; (c08 <Reset_Handler+0x70>)
     bdc:	4293      	cmp	r3, r2
     bde:	d3f6      	bcc.n	bce <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     be0:	4b0a      	ldr	r3, [pc, #40]	; (c0c <Reset_Handler+0x74>)
     be2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     be4:	4a0a      	ldr	r2, [pc, #40]	; (c10 <Reset_Handler+0x78>)
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     bec:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     bee:	4b09      	ldr	r3, [pc, #36]	; (c14 <Reset_Handler+0x7c>)
     bf0:	4798      	blx	r3

        /* Branch to main function */
        main();
     bf2:	4b09      	ldr	r3, [pc, #36]	; (c18 <Reset_Handler+0x80>)
     bf4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     bf6:	e7fe      	b.n	bf6 <Reset_Handler+0x5e>
     bf8:	00012e14 	.word	0x00012e14
     bfc:	20000000 	.word	0x20000000
     c00:	20000a34 	.word	0x20000a34
     c04:	20000a34 	.word	0x20000a34
     c08:	200027dc 	.word	0x200027dc
     c0c:	00000000 	.word	0x00000000
     c10:	e000ed00 	.word	0xe000ed00
     c14:	00011bc9 	.word	0x00011bc9
     c18:	00000ced 	.word	0x00000ced

00000c1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     c1c:	b480      	push	{r7}
     c1e:	af00      	add	r7, sp, #0
        while (1) {
			asm("nop");
     c20:	bf00      	nop
     c22:	e7fd      	b.n	c20 <Dummy_Handler+0x4>

00000c24 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c24:	b480      	push	{r7}
     c26:	b085      	sub	sp, #20
     c28:	af00      	add	r7, sp, #0
     c2a:	60f8      	str	r0, [r7, #12]
     c2c:	460b      	mov	r3, r1
     c2e:	607a      	str	r2, [r7, #4]
     c30:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c32:	7afb      	ldrb	r3, [r7, #11]
     c34:	68fa      	ldr	r2, [r7, #12]
     c36:	01db      	lsls	r3, r3, #7
     c38:	4413      	add	r3, r2
     c3a:	3318      	adds	r3, #24
     c3c:	687a      	ldr	r2, [r7, #4]
     c3e:	601a      	str	r2, [r3, #0]
}
     c40:	bf00      	nop
     c42:	3714      	adds	r7, #20
     c44:	46bd      	mov	sp, r7
     c46:	bc80      	pop	{r7}
     c48:	4770      	bx	lr

00000c4a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c4a:	b480      	push	{r7}
     c4c:	b085      	sub	sp, #20
     c4e:	af00      	add	r7, sp, #0
     c50:	60f8      	str	r0, [r7, #12]
     c52:	460b      	mov	r3, r1
     c54:	607a      	str	r2, [r7, #4]
     c56:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c58:	7afb      	ldrb	r3, [r7, #11]
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	01db      	lsls	r3, r3, #7
     c5e:	4413      	add	r3, r2
     c60:	3314      	adds	r3, #20
     c62:	687a      	ldr	r2, [r7, #4]
     c64:	601a      	str	r2, [r3, #0]
}
     c66:	bf00      	nop
     c68:	3714      	adds	r7, #20
     c6a:	46bd      	mov	sp, r7
     c6c:	bc80      	pop	{r7}
     c6e:	4770      	bx	lr

00000c70 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	4603      	mov	r3, r0
     c78:	6039      	str	r1, [r7, #0]
     c7a:	71fb      	strb	r3, [r7, #7]
     c7c:	4613      	mov	r3, r2
     c7e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     c80:	79bb      	ldrb	r3, [r7, #6]
     c82:	2b00      	cmp	r3, #0
     c84:	d006      	beq.n	c94 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     c86:	79fb      	ldrb	r3, [r7, #7]
     c88:	683a      	ldr	r2, [r7, #0]
     c8a:	4619      	mov	r1, r3
     c8c:	4806      	ldr	r0, [pc, #24]	; (ca8 <_gpio_set_level+0x38>)
     c8e:	4b07      	ldr	r3, [pc, #28]	; (cac <_gpio_set_level+0x3c>)
     c90:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     c92:	e005      	b.n	ca0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     c94:	79fb      	ldrb	r3, [r7, #7]
     c96:	683a      	ldr	r2, [r7, #0]
     c98:	4619      	mov	r1, r3
     c9a:	4803      	ldr	r0, [pc, #12]	; (ca8 <_gpio_set_level+0x38>)
     c9c:	4b04      	ldr	r3, [pc, #16]	; (cb0 <_gpio_set_level+0x40>)
     c9e:	4798      	blx	r3
}
     ca0:	bf00      	nop
     ca2:	3708      	adds	r7, #8
     ca4:	46bd      	mov	sp, r7
     ca6:	bd80      	pop	{r7, pc}
     ca8:	41008000 	.word	0x41008000
     cac:	00000c25 	.word	0x00000c25
     cb0:	00000c4b 	.word	0x00000c4b

00000cb4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     cb4:	b580      	push	{r7, lr}
     cb6:	b082      	sub	sp, #8
     cb8:	af00      	add	r7, sp, #0
     cba:	4603      	mov	r3, r0
     cbc:	460a      	mov	r2, r1
     cbe:	71fb      	strb	r3, [r7, #7]
     cc0:	4613      	mov	r3, r2
     cc2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     cc4:	79fb      	ldrb	r3, [r7, #7]
     cc6:	115b      	asrs	r3, r3, #5
     cc8:	b2d8      	uxtb	r0, r3
     cca:	79fb      	ldrb	r3, [r7, #7]
     ccc:	f003 031f 	and.w	r3, r3, #31
     cd0:	2201      	movs	r2, #1
     cd2:	fa02 f303 	lsl.w	r3, r2, r3
     cd6:	79ba      	ldrb	r2, [r7, #6]
     cd8:	4619      	mov	r1, r3
     cda:	4b03      	ldr	r3, [pc, #12]	; (ce8 <gpio_set_pin_level+0x34>)
     cdc:	4798      	blx	r3
}
     cde:	bf00      	nop
     ce0:	3708      	adds	r7, #8
     ce2:	46bd      	mov	sp, r7
     ce4:	bd80      	pop	{r7, pc}
     ce6:	bf00      	nop
     ce8:	00000c71 	.word	0x00000c71

00000cec <main>:
#include "Compresor_Controller.h"



int main(void)
{
     cec:	b580      	push	{r7, lr}
     cee:	b084      	sub	sp, #16
     cf0:	af00      	add	r7, sp, #0
	atmel_start_init();
     cf2:	4b2c      	ldr	r3, [pc, #176]	; (da4 <main+0xb8>)
     cf4:	4798      	blx	r3
	
	ccu.Init();
     cf6:	482c      	ldr	r0, [pc, #176]	; (da8 <main+0xbc>)
     cf8:	4b2c      	ldr	r3, [pc, #176]	; (dac <main+0xc0>)
     cfa:	4798      	blx	r3
	ccu.Set_CAN_Enable(ccu.IsEnabledPointer());
     cfc:	482c      	ldr	r0, [pc, #176]	; (db0 <main+0xc4>)
     cfe:	4b2d      	ldr	r3, [pc, #180]	; (db4 <main+0xc8>)
     d00:	4798      	blx	r3
     d02:	4603      	mov	r3, r0
     d04:	4619      	mov	r1, r3
     d06:	4828      	ldr	r0, [pc, #160]	; (da8 <main+0xbc>)
     d08:	4b2b      	ldr	r3, [pc, #172]	; (db8 <main+0xcc>)
     d0a:	4798      	blx	r3
	ccu.SetEnable(false);
     d0c:	2100      	movs	r1, #0
     d0e:	4828      	ldr	r0, [pc, #160]	; (db0 <main+0xc4>)
     d10:	4b2a      	ldr	r3, [pc, #168]	; (dbc <main+0xd0>)
     d12:	4798      	blx	r3
// 		{
// 			ccu.Periodic_Task();
// 			
// 				
// 		}
		ccu.SetEnable(true);
     d14:	2101      	movs	r1, #1
     d16:	4826      	ldr	r0, [pc, #152]	; (db0 <main+0xc4>)
     d18:	4b28      	ldr	r3, [pc, #160]	; (dbc <main+0xd0>)
     d1a:	4798      	blx	r3
		
		for (int dir = 1; dir > -2; dir=dir-2)
     d1c:	2301      	movs	r3, #1
     d1e:	60bb      	str	r3, [r7, #8]
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	f1b3 3fff 	cmp.w	r3, #4294967295
     d26:	db33      	blt.n	d90 <main+0xa4>
		{
			
			for (uint16_t i = (1-dir)*0x7fff; i < (dir+1)*0x7fff; i=i+dir*1)
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	f1c3 0301 	rsb	r3, r3, #1
     d2e:	b29b      	uxth	r3, r3
     d30:	461a      	mov	r2, r3
     d32:	03d2      	lsls	r2, r2, #15
     d34:	1ad3      	subs	r3, r2, r3
     d36:	80fb      	strh	r3, [r7, #6]
     d38:	88f9      	ldrh	r1, [r7, #6]
     d3a:	68bb      	ldr	r3, [r7, #8]
     d3c:	1c5a      	adds	r2, r3, #1
     d3e:	4613      	mov	r3, r2
     d40:	03db      	lsls	r3, r3, #15
     d42:	1a9b      	subs	r3, r3, r2
     d44:	4299      	cmp	r1, r3
     d46:	da1f      	bge.n	d88 <main+0x9c>
			//for (uint16_t i = 0; i <0xffff ; i++)
			{
				ccu.Set_Motor_Speed(i);
     d48:	88fb      	ldrh	r3, [r7, #6]
     d4a:	4619      	mov	r1, r3
     d4c:	4816      	ldr	r0, [pc, #88]	; (da8 <main+0xbc>)
     d4e:	4b1c      	ldr	r3, [pc, #112]	; (dc0 <main+0xd4>)
     d50:	4798      	blx	r3
				timeout=*ccu.syncCANOpenTimeout;
     d52:	4b15      	ldr	r3, [pc, #84]	; (da8 <main+0xbc>)
     d54:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	73fb      	strb	r3, [r7, #15]
				while (!timeout)
     d5c:	7bfb      	ldrb	r3, [r7, #15]
     d5e:	2b00      	cmp	r3, #0
     d60:	d105      	bne.n	d6e <main+0x82>
				{
					//gpio_set_pin_level(LED0,false);
					timeout=*ccu.syncCANOpenTimeout;
     d62:	4b11      	ldr	r3, [pc, #68]	; (da8 <main+0xbc>)
     d64:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	73fb      	strb	r3, [r7, #15]
				while (!timeout)
     d6c:	e7f6      	b.n	d5c <main+0x70>
				}
				ccu.Periodic_Task();
     d6e:	480e      	ldr	r0, [pc, #56]	; (da8 <main+0xbc>)
     d70:	4b14      	ldr	r3, [pc, #80]	; (dc4 <main+0xd8>)
     d72:	4798      	blx	r3
	
				gpio_set_pin_level(LED0,true);
     d74:	2101      	movs	r1, #1
     d76:	2052      	movs	r0, #82	; 0x52
     d78:	4b13      	ldr	r3, [pc, #76]	; (dc8 <main+0xdc>)
     d7a:	4798      	blx	r3
			for (uint16_t i = (1-dir)*0x7fff; i < (dir+1)*0x7fff; i=i+dir*1)
     d7c:	68bb      	ldr	r3, [r7, #8]
     d7e:	b29a      	uxth	r2, r3
     d80:	88fb      	ldrh	r3, [r7, #6]
     d82:	4413      	add	r3, r2
     d84:	80fb      	strh	r3, [r7, #6]
     d86:	e7d7      	b.n	d38 <main+0x4c>
		for (int dir = 1; dir > -2; dir=dir-2)
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	3b02      	subs	r3, #2
     d8c:	60bb      	str	r3, [r7, #8]
     d8e:	e7c7      	b.n	d20 <main+0x34>
			}
				
				
		}
		ccu.SetEnable(true);
     d90:	2101      	movs	r1, #1
     d92:	4807      	ldr	r0, [pc, #28]	; (db0 <main+0xc4>)
     d94:	4b09      	ldr	r3, [pc, #36]	; (dbc <main+0xd0>)
     d96:	4798      	blx	r3
		delay_ms(1000);
     d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d9c:	4b0b      	ldr	r3, [pc, #44]	; (dcc <main+0xe0>)
     d9e:	4798      	blx	r3
// 
// 		cano.Process();
// 		delay_ms(1);
		// 		cano.Periodic_Process();
		//  		delay_ms(1);
	}
     da0:	e7b8      	b.n	d14 <main+0x28>
     da2:	bf00      	nop
     da4:	00004675 	.word	0x00004675
     da8:	20000b6c 	.word	0x20000b6c
     dac:	00000341 	.word	0x00000341
     db0:	20000d08 	.word	0x20000d08
     db4:	00000691 	.word	0x00000691
     db8:	000009f9 	.word	0x000009f9
     dbc:	00000621 	.word	0x00000621
     dc0:	00000a1d 	.word	0x00000a1d
     dc4:	000008a1 	.word	0x000008a1
     dc8:	00000cb5 	.word	0x00000cb5
     dcc:	00005fdd 	.word	0x00005fdd

00000dd0 <_Z41__static_initialization_and_destruction_0ii>:
     dd0:	b580      	push	{r7, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
     dd8:	6039      	str	r1, [r7, #0]
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	2b01      	cmp	r3, #1
     dde:	d155      	bne.n	e8c <_Z41__static_initialization_and_destruction_0ii+0xbc>
     de0:	683b      	ldr	r3, [r7, #0]
     de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
     de6:	4293      	cmp	r3, r2
     de8:	d150      	bne.n	e8c <_Z41__static_initialization_and_destruction_0ii+0xbc>
     dea:	492a      	ldr	r1, [pc, #168]	; (e94 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     dec:	482a      	ldr	r0, [pc, #168]	; (e98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     dee:	4b2b      	ldr	r3, [pc, #172]	; (e9c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     df0:	4798      	blx	r3
     df2:	4a2b      	ldr	r2, [pc, #172]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     df4:	492b      	ldr	r1, [pc, #172]	; (ea4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     df6:	4828      	ldr	r0, [pc, #160]	; (e98 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     df8:	4b2b      	ldr	r3, [pc, #172]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     dfa:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     dfc:	492b      	ldr	r1, [pc, #172]	; (eac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     dfe:	482c      	ldr	r0, [pc, #176]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     e00:	4b2c      	ldr	r3, [pc, #176]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e02:	4798      	blx	r3
     e04:	4a26      	ldr	r2, [pc, #152]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e06:	492c      	ldr	r1, [pc, #176]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e08:	4829      	ldr	r0, [pc, #164]	; (eb0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     e0a:	4b27      	ldr	r3, [pc, #156]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e0c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     e0e:	492b      	ldr	r1, [pc, #172]	; (ebc <_Z41__static_initialization_and_destruction_0ii+0xec>)
     e10:	482b      	ldr	r0, [pc, #172]	; (ec0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     e12:	4b28      	ldr	r3, [pc, #160]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e14:	4798      	blx	r3
     e16:	4a22      	ldr	r2, [pc, #136]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e18:	4927      	ldr	r1, [pc, #156]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e1a:	4829      	ldr	r0, [pc, #164]	; (ec0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     e1c:	4b22      	ldr	r3, [pc, #136]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e1e:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     e20:	4928      	ldr	r1, [pc, #160]	; (ec4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     e22:	4829      	ldr	r0, [pc, #164]	; (ec8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     e24:	4b23      	ldr	r3, [pc, #140]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e26:	4798      	blx	r3
     e28:	4a1d      	ldr	r2, [pc, #116]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e2a:	4923      	ldr	r1, [pc, #140]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e2c:	4826      	ldr	r0, [pc, #152]	; (ec8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     e2e:	4b1e      	ldr	r3, [pc, #120]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e30:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     e32:	4926      	ldr	r1, [pc, #152]	; (ecc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     e34:	4826      	ldr	r0, [pc, #152]	; (ed0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     e36:	4b1f      	ldr	r3, [pc, #124]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e38:	4798      	blx	r3
     e3a:	4a19      	ldr	r2, [pc, #100]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e3c:	491e      	ldr	r1, [pc, #120]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e3e:	4824      	ldr	r0, [pc, #144]	; (ed0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     e40:	4b19      	ldr	r3, [pc, #100]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e42:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     e44:	4923      	ldr	r1, [pc, #140]	; (ed4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
     e46:	4824      	ldr	r0, [pc, #144]	; (ed8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     e48:	4b1a      	ldr	r3, [pc, #104]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e4a:	4798      	blx	r3
     e4c:	4a14      	ldr	r2, [pc, #80]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e4e:	491a      	ldr	r1, [pc, #104]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e50:	4821      	ldr	r0, [pc, #132]	; (ed8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     e52:	4b15      	ldr	r3, [pc, #84]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e54:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     e56:	4921      	ldr	r1, [pc, #132]	; (edc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     e58:	4821      	ldr	r0, [pc, #132]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     e5a:	4b16      	ldr	r3, [pc, #88]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e5c:	4798      	blx	r3
     e5e:	4a10      	ldr	r2, [pc, #64]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e60:	4915      	ldr	r1, [pc, #84]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e62:	481f      	ldr	r0, [pc, #124]	; (ee0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     e64:	4b10      	ldr	r3, [pc, #64]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e66:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     e68:	491e      	ldr	r1, [pc, #120]	; (ee4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
     e6a:	481f      	ldr	r0, [pc, #124]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     e6c:	4b11      	ldr	r3, [pc, #68]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e6e:	4798      	blx	r3
     e70:	4a0b      	ldr	r2, [pc, #44]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e72:	4911      	ldr	r1, [pc, #68]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e74:	481c      	ldr	r0, [pc, #112]	; (ee8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     e76:	4b0c      	ldr	r3, [pc, #48]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e78:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     e7a:	491c      	ldr	r1, [pc, #112]	; (eec <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     e7c:	481c      	ldr	r0, [pc, #112]	; (ef0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     e7e:	4b0d      	ldr	r3, [pc, #52]	; (eb4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     e80:	4798      	blx	r3
     e82:	4a07      	ldr	r2, [pc, #28]	; (ea0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     e84:	490c      	ldr	r1, [pc, #48]	; (eb8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     e86:	481a      	ldr	r0, [pc, #104]	; (ef0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     e88:	4b07      	ldr	r3, [pc, #28]	; (ea8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     e8a:	4798      	blx	r3
     e8c:	bf00      	nop
     e8e:	3708      	adds	r7, #8
     e90:	46bd      	mov	sp, r7
     e92:	bd80      	pop	{r7, pc}
     e94:	20002654 	.word	0x20002654
     e98:	20000ff4 	.word	0x20000ff4
     e9c:	00011159 	.word	0x00011159
     ea0:	20000000 	.word	0x20000000
     ea4:	00011175 	.word	0x00011175
     ea8:	00011b95 	.word	0x00011b95
     eac:	20002524 	.word	0x20002524
     eb0:	2000100c 	.word	0x2000100c
     eb4:	00011749 	.word	0x00011749
     eb8:	00011781 	.word	0x00011781
     ebc:	200025b8 	.word	0x200025b8
     ec0:	2000102c 	.word	0x2000102c
     ec4:	200026dc 	.word	0x200026dc
     ec8:	2000104c 	.word	0x2000104c
     ecc:	200025d8 	.word	0x200025d8
     ed0:	2000106c 	.word	0x2000106c
     ed4:	2000269c 	.word	0x2000269c
     ed8:	2000108c 	.word	0x2000108c
     edc:	200026bc 	.word	0x200026bc
     ee0:	200010ac 	.word	0x200010ac
     ee4:	20002594 	.word	0x20002594
     ee8:	200010cc 	.word	0x200010cc
     eec:	20002634 	.word	0x20002634
     ef0:	200010ec 	.word	0x200010ec

00000ef4 <_GLOBAL__sub_I_main>:
     ef4:	b580      	push	{r7, lr}
     ef6:	af00      	add	r7, sp, #0
     ef8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     efc:	2001      	movs	r0, #1
     efe:	4b01      	ldr	r3, [pc, #4]	; (f04 <_GLOBAL__sub_I_main+0x10>)
     f00:	4798      	blx	r3
     f02:	bd80      	pop	{r7, pc}
     f04:	00000dd1 	.word	0x00000dd1

00000f08 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
     f08:	b580      	push	{r7, lr}
     f0a:	b082      	sub	sp, #8
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
     f10:	687b      	ldr	r3, [r7, #4]
     f12:	4618      	mov	r0, r3
     f14:	4b06      	ldr	r3, [pc, #24]	; (f30 <_ZN13CANOpen_ClassC1Ev+0x28>)
     f16:	4798      	blx	r3
     f18:	4a06      	ldr	r2, [pc, #24]	; (f34 <_ZN13CANOpen_ClassC1Ev+0x2c>)
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     f1e:	4a06      	ldr	r2, [pc, #24]	; (f38 <_ZN13CANOpen_ClassC1Ev+0x30>)
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	4618      	mov	r0, r3
     f28:	3708      	adds	r7, #8
     f2a:	46bd      	mov	sp, r7
     f2c:	bd80      	pop	{r7, pc}
     f2e:	bf00      	nop
     f30:	000010bd 	.word	0x000010bd
     f34:	00011f28 	.word	0x00011f28
     f38:	2000110c 	.word	0x2000110c

00000f3c <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
     f3c:	b580      	push	{r7, lr}
     f3e:	b082      	sub	sp, #8
     f40:	af00      	add	r7, sp, #0
     f42:	6078      	str	r0, [r7, #4]
     f44:	6039      	str	r1, [r7, #0]
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	4618      	mov	r0, r3
     f4a:	4b08      	ldr	r3, [pc, #32]	; (f6c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
     f4c:	4798      	blx	r3
     f4e:	4a08      	ldr	r2, [pc, #32]	; (f70 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
     f54:	4a07      	ldr	r2, [pc, #28]	; (f74 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	6013      	str	r3, [r2, #0]
	canDescr=descr;
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	683a      	ldr	r2, [r7, #0]
     f5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
} //CANOpen_Class
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	4618      	mov	r0, r3
     f66:	3708      	adds	r7, #8
     f68:	46bd      	mov	sp, r7
     f6a:	bd80      	pop	{r7, pc}
     f6c:	000010bd 	.word	0x000010bd
     f70:	00011f28 	.word	0x00011f28
     f74:	2000110c 	.word	0x2000110c

00000f78 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	4a05      	ldr	r2, [pc, #20]	; (f98 <_ZN13CANOpen_ClassD1Ev+0x20>)
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	601a      	str	r2, [r3, #0]
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	4618      	mov	r0, r3
     f8a:	4b04      	ldr	r3, [pc, #16]	; (f9c <_ZN13CANOpen_ClassD1Ev+0x24>)
     f8c:	4798      	blx	r3
{
} //~CANOpen_Class
     f8e:	687b      	ldr	r3, [r7, #4]
     f90:	4618      	mov	r0, r3
     f92:	3708      	adds	r7, #8
     f94:	46bd      	mov	sp, r7
     f96:	bd80      	pop	{r7, pc}
     f98:	00011f28 	.word	0x00011f28
     f9c:	0000111d 	.word	0x0000111d

00000fa0 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
     fa0:	b590      	push	{r4, r7, lr}
     fa2:	b083      	sub	sp, #12
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
     fa8:	460b      	mov	r3, r1
     faa:	70fb      	strb	r3, [r7, #3]
	coNode=node;
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	78fa      	ldrb	r2, [r7, #3]
     fb0:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
     fb4:	6878      	ldr	r0, [r7, #4]
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
     fbc:	78fa      	ldrb	r2, [r7, #3]
     fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     fc2:	4c17      	ldr	r4, [pc, #92]	; (1020 <_ZN13CANOpen_Class4InitEh+0x80>)
     fc4:	47a0      	blx	r4
     fc6:	4603      	mov	r3, r0
     fc8:	461a      	mov	r2, r3
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	
	if (err==0)
     fd0:	687b      	ldr	r3, [r7, #4]
     fd2:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
     fd6:	2b00      	cmp	r3, #0
     fd8:	d116      	bne.n	1008 <_ZN13CANOpen_Class4InitEh+0x68>
	{
		canopen_driver->canopen_ready=true;
     fda:	4b12      	ldr	r3, [pc, #72]	; (1024 <_ZN13CANOpen_Class4InitEh+0x84>)
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	2201      	movs	r2, #1
     fe0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
     fe4:	6878      	ldr	r0, [r7, #4]
     fe6:	4b10      	ldr	r3, [pc, #64]	; (1028 <_ZN13CANOpen_Class4InitEh+0x88>)
     fe8:	4798      	blx	r3
     fea:	4603      	mov	r3, r0
     fec:	b25a      	sxtb	r2, r3
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
		if (node==1)
     ff4:	78fb      	ldrb	r3, [r7, #3]
     ff6:	2b01      	cmp	r3, #1
     ff8:	d10a      	bne.n	1010 <_ZN13CANOpen_Class4InitEh+0x70>
		{
			CO_sendNMTcommand(1,0);
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	2200      	movs	r2, #0
     ffe:	2101      	movs	r1, #1
    1000:	4618      	mov	r0, r3
    1002:	4b0a      	ldr	r3, [pc, #40]	; (102c <_ZN13CANOpen_Class4InitEh+0x8c>)
    1004:	4798      	blx	r3
    1006:	e003      	b.n	1010 <_ZN13CANOpen_Class4InitEh+0x70>
		}
			

		
	}else{
		return	(int)err;
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
    100e:	e002      	b.n	1016 <_ZN13CANOpen_Class4InitEh+0x76>
	}
	return	(int)err;
    1010:	687b      	ldr	r3, [r7, #4]
    1012:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
    1016:	4618      	mov	r0, r3
    1018:	370c      	adds	r7, #12
    101a:	46bd      	mov	sp, r7
    101c:	bd90      	pop	{r4, r7, pc}
    101e:	bf00      	nop
    1020:	0000122d 	.word	0x0000122d
    1024:	20001a00 	.word	0x20001a00
    1028:	00001031 	.word	0x00001031
    102c:	00001155 	.word	0x00001155

00001030 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    1030:	b580      	push	{r7, lr}
    1032:	b082      	sub	sp, #8
    1034:	af00      	add	r7, sp, #0
    1036:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    1038:	687b      	ldr	r3, [r7, #4]
    103a:	4618      	mov	r0, r3
    103c:	4b08      	ldr	r3, [pc, #32]	; (1060 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    103e:	4798      	blx	r3
    1040:	4603      	mov	r3, r0
    1042:	461a      	mov	r2, r3
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	2200      	movs	r2, #0
    104e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	return	(int)err;
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
    1058:	4618      	mov	r0, r3
    105a:	3708      	adds	r7, #8
    105c:	46bd      	mov	sp, r7
    105e:	bd80      	pop	{r7, pc}
    1060:	00001c55 	.word	0x00001c55

00001064 <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
    1064:	b580      	push	{r7, lr}
    1066:	b084      	sub	sp, #16
    1068:	af00      	add	r7, sp, #0
    106a:	6078      	str	r0, [r7, #4]
    106c:	460b      	mov	r3, r1
    106e:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
    1070:	2300      	movs	r3, #0
    1072:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	78fa      	ldrb	r2, [r7, #3]
    1078:	2101      	movs	r1, #1
    107a:	4618      	mov	r0, r3
    107c:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
    107e:	4798      	blx	r3
		delay_ms(100);
    1080:	2064      	movs	r0, #100	; 0x64
    1082:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
    1084:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    108e:	689a      	ldr	r2, [r3, #8]
    1090:	78fb      	ldrb	r3, [r7, #3]
    1092:	011b      	lsls	r3, r3, #4
    1094:	4413      	add	r3, r2
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b05      	cmp	r3, #5
    109a:	bf0c      	ite	eq
    109c:	2301      	moveq	r3, #1
    109e:	2300      	movne	r3, #0
    10a0:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	7bfa      	ldrb	r2, [r7, #15]
    10a6:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
//	}
	return	localOperational;
    10aa:	7bfb      	ldrb	r3, [r7, #15]
}
    10ac:	4618      	mov	r0, r3
    10ae:	3710      	adds	r7, #16
    10b0:	46bd      	mov	sp, r7
    10b2:	bd80      	pop	{r7, pc}
    10b4:	00001155 	.word	0x00001155
    10b8:	00005fdd 	.word	0x00005fdd

000010bc <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    10bc:	b580      	push	{r7, lr}
    10be:	b082      	sub	sp, #8
    10c0:	af00      	add	r7, sp, #0
    10c2:	6078      	str	r0, [r7, #4]
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	4618      	mov	r0, r3
    10c8:	4b10      	ldr	r3, [pc, #64]	; (110c <_ZN8CO_ClassC1Ev+0x50>)
    10ca:	4798      	blx	r3
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	f503 739c 	add.w	r3, r3, #312	; 0x138
    10d2:	4618      	mov	r0, r3
    10d4:	4b0e      	ldr	r3, [pc, #56]	; (1110 <_ZN8CO_ClassC1Ev+0x54>)
    10d6:	4798      	blx	r3
    10d8:	4a0e      	ldr	r2, [pc, #56]	; (1114 <_ZN8CO_ClassC1Ev+0x58>)
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    10de:	4b0e      	ldr	r3, [pc, #56]	; (1118 <_ZN8CO_ClassC1Ev+0x5c>)
    10e0:	681a      	ldr	r2, [r3, #0]
    10e2:	687b      	ldr	r3, [r7, #4]
    10e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	coCanDescr=NULL;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	2200      	movs	r2, #0
    10ec:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	CO_memoryUsed=sizeof(COO);
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	223c      	movs	r2, #60	; 0x3c
    10f4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	timer_next=NULL;
    10f8:	687b      	ldr	r3, [r7, #4]
    10fa:	2200      	movs	r2, #0
    10fc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
} //CO_Class
    1100:	687b      	ldr	r3, [r7, #4]
    1102:	4618      	mov	r0, r3
    1104:	3708      	adds	r7, #8
    1106:	46bd      	mov	sp, r7
    1108:	bd80      	pop	{r7, pc}
    110a:	bf00      	nop
    110c:	00001acd 	.word	0x00001acd
    1110:	00002ad9 	.word	0x00002ad9
    1114:	00011f34 	.word	0x00011f34
    1118:	2000114c 	.word	0x2000114c

0000111c <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    111c:	b580      	push	{r7, lr}
    111e:	b082      	sub	sp, #8
    1120:	af00      	add	r7, sp, #0
    1122:	6078      	str	r0, [r7, #4]
    1124:	4a08      	ldr	r2, [pc, #32]	; (1148 <_ZN8CO_ClassD1Ev+0x2c>)
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	601a      	str	r2, [r3, #0]
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	f503 739c 	add.w	r3, r3, #312	; 0x138
    1130:	4618      	mov	r0, r3
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <_ZN8CO_ClassD1Ev+0x30>)
    1134:	4798      	blx	r3
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	4618      	mov	r0, r3
    113a:	4b05      	ldr	r3, [pc, #20]	; (1150 <_ZN8CO_ClassD1Ev+0x34>)
    113c:	4798      	blx	r3
{
} //~CO_Class
    113e:	687b      	ldr	r3, [r7, #4]
    1140:	4618      	mov	r0, r3
    1142:	3708      	adds	r7, #8
    1144:	46bd      	mov	sp, r7
    1146:	bd80      	pop	{r7, pc}
    1148:	00011f34 	.word	0x00011f34
    114c:	00002aed 	.word	0x00002aed
    1150:	00001b45 	.word	0x00001b45

00001154 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    1154:	b580      	push	{r7, lr}
    1156:	b082      	sub	sp, #8
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
    115c:	460b      	mov	r3, r1
    115e:	70fb      	strb	r3, [r7, #3]
    1160:	4613      	mov	r3, r2
    1162:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    116a:	2b00      	cmp	r3, #0
    116c:	d101      	bne.n	1172 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    116e:	23f5      	movs	r3, #245	; 0xf5
    1170:	e053      	b.n	121a <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    1172:	687b      	ldr	r3, [r7, #4]
    1174:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    1178:	78fa      	ldrb	r2, [r7, #3]
    117a:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    117c:	687b      	ldr	r3, [r7, #4]
    117e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    1182:	78ba      	ldrb	r2, [r7, #2]
    1184:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    1186:	78bb      	ldrb	r3, [r7, #2]
    1188:	2b00      	cmp	r3, #0
    118a:	d006      	beq.n	119a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    118c:	4b25      	ldr	r3, [pc, #148]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	691b      	ldr	r3, [r3, #16]
    1192:	7a9b      	ldrb	r3, [r3, #10]
    1194:	78ba      	ldrb	r2, [r7, #2]
    1196:	429a      	cmp	r2, r3
    1198:	d135      	bne.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    119a:	78fb      	ldrb	r3, [r7, #3]
    119c:	2b80      	cmp	r3, #128	; 0x80
    119e:	d01f      	beq.n	11e0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    11a0:	2b80      	cmp	r3, #128	; 0x80
    11a2:	dc04      	bgt.n	11ae <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    11a4:	2b01      	cmp	r3, #1
    11a6:	d007      	beq.n	11b8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    11a8:	2b02      	cmp	r3, #2
    11aa:	d013      	beq.n	11d4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    11ac:	e02b      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    11ae:	2b81      	cmp	r3, #129	; 0x81
    11b0:	d01c      	beq.n	11ec <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    11b2:	2b82      	cmp	r3, #130	; 0x82
    11b4:	d020      	beq.n	11f8 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    11b6:	e026      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    11b8:	4b1a      	ldr	r3, [pc, #104]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	691b      	ldr	r3, [r3, #16]
    11be:	695b      	ldr	r3, [r3, #20]
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d11d      	bne.n	1204 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    11c8:	4b16      	ldr	r3, [pc, #88]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11ca:	681b      	ldr	r3, [r3, #0]
    11cc:	691b      	ldr	r3, [r3, #16]
    11ce:	2205      	movs	r2, #5
    11d0:	701a      	strb	r2, [r3, #0]
			}
			break;
    11d2:	e017      	b.n	1204 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    11d4:	4b13      	ldr	r3, [pc, #76]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11d6:	681b      	ldr	r3, [r3, #0]
    11d8:	691b      	ldr	r3, [r3, #16]
    11da:	2204      	movs	r2, #4
    11dc:	701a      	strb	r2, [r3, #0]
			break;
    11de:	e012      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    11e0:	4b10      	ldr	r3, [pc, #64]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	691b      	ldr	r3, [r3, #16]
    11e6:	227f      	movs	r2, #127	; 0x7f
    11e8:	701a      	strb	r2, [r3, #0]
			break;
    11ea:	e00c      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    11ec:	4b0d      	ldr	r3, [pc, #52]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	691b      	ldr	r3, [r3, #16]
    11f2:	2202      	movs	r2, #2
    11f4:	725a      	strb	r2, [r3, #9]
			break;
    11f6:	e006      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    11fa:	681b      	ldr	r3, [r3, #0]
    11fc:	691b      	ldr	r3, [r3, #16]
    11fe:	2201      	movs	r2, #1
    1200:	725a      	strb	r2, [r3, #9]
			break;
    1202:	e000      	b.n	1206 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    1204:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    1206:	687a      	ldr	r2, [r7, #4]
    1208:	687b      	ldr	r3, [r7, #4]
    120a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    120e:	4619      	mov	r1, r3
    1210:	4610      	mov	r0, r2
    1212:	4b05      	ldr	r3, [pc, #20]	; (1228 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    1214:	4798      	blx	r3
    1216:	4603      	mov	r3, r0
    1218:	b2db      	uxtb	r3, r3
}
    121a:	4618      	mov	r0, r3
    121c:	3708      	adds	r7, #8
    121e:	46bd      	mov	sp, r7
    1220:	bd80      	pop	{r7, pc}
    1222:	bf00      	nop
    1224:	2000114c 	.word	0x2000114c
    1228:	00001fd9 	.word	0x00001fd9

0000122c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    122e:	b099      	sub	sp, #100	; 0x64
    1230:	af0c      	add	r7, sp, #48	; 0x30
    1232:	61f8      	str	r0, [r7, #28]
    1234:	61b9      	str	r1, [r7, #24]
    1236:	613b      	str	r3, [r7, #16]
    1238:	4613      	mov	r3, r2
    123a:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    123c:	69fb      	ldr	r3, [r7, #28]
    123e:	69ba      	ldr	r2, [r7, #24]
    1240:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	coNode=nodeId;
    1244:	69fb      	ldr	r3, [r7, #28]
    1246:	7dfa      	ldrb	r2, [r7, #23]
    1248:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    124c:	4ba3      	ldr	r3, [pc, #652]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    124e:	4aa4      	ldr	r2, [pc, #656]	; (14e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    1250:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    1252:	4ba2      	ldr	r3, [pc, #648]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	4aa3      	ldr	r2, [pc, #652]	; (14e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    1258:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    125a:	4ba3      	ldr	r3, [pc, #652]	; (14e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    125c:	4aa3      	ldr	r2, [pc, #652]	; (14ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    125e:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    1260:	4ba3      	ldr	r3, [pc, #652]	; (14f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    1262:	4aa4      	ldr	r2, [pc, #656]	; (14f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    1264:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    1266:	69fb      	ldr	r3, [r7, #28]
    1268:	2200      	movs	r2, #0
    126a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    126e:	69fb      	ldr	r3, [r7, #28]
    1270:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    1274:	2b00      	cmp	r3, #0
    1276:	d118      	bne.n	12aa <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    1278:	4b98      	ldr	r3, [pc, #608]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    127a:	6819      	ldr	r1, [r3, #0]
    127c:	69fb      	ldr	r3, [r7, #28]
    127e:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
    1282:	69fb      	ldr	r3, [r7, #28]
    1284:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    1288:	4613      	mov	r3, r2
    128a:	011b      	lsls	r3, r3, #4
    128c:	4413      	add	r3, r2
    128e:	00db      	lsls	r3, r3, #3
    1290:	4a99      	ldr	r2, [pc, #612]	; (14f8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    1292:	441a      	add	r2, r3
    1294:	0083      	lsls	r3, r0, #2
    1296:	440b      	add	r3, r1
    1298:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    129a:	69fb      	ldr	r3, [r7, #28]
    129c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    12a0:	1c5a      	adds	r2, r3, #1
    12a2:	69fb      	ldr	r3, [r7, #28]
    12a4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    12a8:	e7e1      	b.n	126e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    12aa:	4b94      	ldr	r3, [pc, #592]	; (14fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    12ac:	4a94      	ldr	r2, [pc, #592]	; (1500 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    12ae:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    12b0:	4b8a      	ldr	r3, [pc, #552]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	4a93      	ldr	r2, [pc, #588]	; (1504 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    12b6:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    12b8:	4b88      	ldr	r3, [pc, #544]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	4a92      	ldr	r2, [pc, #584]	; (1508 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    12be:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    12c0:	4b86      	ldr	r3, [pc, #536]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	4a91      	ldr	r2, [pc, #580]	; (150c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    12c6:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    12c8:	4b84      	ldr	r3, [pc, #528]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	4a90      	ldr	r2, [pc, #576]	; (1510 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    12ce:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    12d0:	69fb      	ldr	r3, [r7, #28]
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    12d8:	69fb      	ldr	r3, [r7, #28]
    12da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    12de:	2b03      	cmp	r3, #3
    12e0:	d818      	bhi.n	1314 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    12e2:	4b7e      	ldr	r3, [pc, #504]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    12e4:	6819      	ldr	r1, [r3, #0]
    12e6:	69fb      	ldr	r3, [r7, #28]
    12e8:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
    12ec:	69fb      	ldr	r3, [r7, #28]
    12ee:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    12f2:	4613      	mov	r3, r2
    12f4:	005b      	lsls	r3, r3, #1
    12f6:	4413      	add	r3, r2
    12f8:	015b      	lsls	r3, r3, #5
    12fa:	4a86      	ldr	r2, [pc, #536]	; (1514 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    12fc:	441a      	add	r2, r3
    12fe:	1d83      	adds	r3, r0, #6
    1300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    1304:	69fb      	ldr	r3, [r7, #28]
    1306:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    130a:	1c5a      	adds	r2, r3, #1
    130c:	69fb      	ldr	r3, [r7, #28]
    130e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    1312:	e7e1      	b.n	12d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    1314:	69fb      	ldr	r3, [r7, #28]
    1316:	2200      	movs	r2, #0
    1318:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    131c:	69fb      	ldr	r3, [r7, #28]
    131e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    1322:	2b03      	cmp	r3, #3
    1324:	d817      	bhi.n	1356 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    1326:	4b6d      	ldr	r3, [pc, #436]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	69fa      	ldr	r2, [r7, #28]
    132c:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    1330:	69f9      	ldr	r1, [r7, #28]
    1332:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
    1336:	2058      	movs	r0, #88	; 0x58
    1338:	fb00 f101 	mul.w	r1, r0, r1
    133c:	4876      	ldr	r0, [pc, #472]	; (1518 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    133e:	4401      	add	r1, r0
    1340:	320a      	adds	r2, #10
    1342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    1346:	69fb      	ldr	r3, [r7, #28]
    1348:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    134c:	1c5a      	adds	r2, r3, #1
    134e:	69fb      	ldr	r3, [r7, #28]
    1350:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    1354:	e7e2      	b.n	131c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    1356:	4b61      	ldr	r3, [pc, #388]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	4a70      	ldr	r2, [pc, #448]	; (151c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    135c:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    135e:	4b70      	ldr	r3, [pc, #448]	; (1520 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    1360:	4a70      	ldr	r2, [pc, #448]	; (1524 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    1362:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    1364:	4b5d      	ldr	r3, [pc, #372]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	2200      	movs	r2, #0
    136c:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    136e:	69fa      	ldr	r2, [r7, #28]
    1370:	69fb      	ldr	r3, [r7, #28]
    1372:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    1376:	4619      	mov	r1, r3
    1378:	4610      	mov	r0, r2
    137a:	4b6b      	ldr	r3, [pc, #428]	; (1528 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    137c:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    137e:	7dfb      	ldrb	r3, [r7, #23]
    1380:	2b00      	cmp	r3, #0
    1382:	dd02      	ble.n	138a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    1384:	7dfb      	ldrb	r3, [r7, #23]
    1386:	2b7f      	cmp	r3, #127	; 0x7f
    1388:	dd05      	ble.n	1396 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    138a:	69f8      	ldr	r0, [r7, #28]
    138c:	4b67      	ldr	r3, [pc, #412]	; (152c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    138e:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    1390:	f06f 030b 	mvn.w	r3, #11
    1394:	e2fc      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
    1396:	69f8      	ldr	r0, [r7, #28]
    1398:	4b50      	ldr	r3, [pc, #320]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	6819      	ldr	r1, [r3, #0]
    139e:	69fb      	ldr	r3, [r7, #28]
    13a0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    13a4:	4b50      	ldr	r3, [pc, #320]	; (14e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    13a6:	681d      	ldr	r5, [r3, #0]
    13a8:	4b51      	ldr	r3, [pc, #324]	; (14f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	693a      	ldr	r2, [r7, #16]
    13ae:	9203      	str	r2, [sp, #12]
    13b0:	2209      	movs	r2, #9
    13b2:	9202      	str	r2, [sp, #8]
    13b4:	9301      	str	r3, [sp, #4]
    13b6:	230b      	movs	r3, #11
    13b8:	9300      	str	r3, [sp, #0]
    13ba:	462b      	mov	r3, r5
    13bc:	4622      	mov	r2, r4
    13be:	4c5c      	ldr	r4, [pc, #368]	; (1530 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    13c0:	47a0      	blx	r4
    13c2:	4603      	mov	r3, r0
    13c4:	461a      	mov	r2, r3
    13c6:	69fb      	ldr	r3, [r7, #28]
    13c8:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    13cc:	69fb      	ldr	r3, [r7, #28]
    13ce:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    13d2:	2b00      	cmp	r3, #0
    13d4:	d006      	beq.n	13e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    13d6:	69f8      	ldr	r0, [r7, #28]
    13d8:	4b54      	ldr	r3, [pc, #336]	; (152c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    13da:	4798      	blx	r3
    13dc:	69fb      	ldr	r3, [r7, #28]
    13de:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    13e2:	e2d5      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    13e4:	69fb      	ldr	r3, [r7, #28]
    13e6:	2200      	movs	r2, #0
    13e8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    13ec:	69fb      	ldr	r3, [r7, #28]
    13ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    13f2:	2b00      	cmp	r3, #0
    13f4:	f040 80a4 	bne.w	1540 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    13f8:	69fb      	ldr	r3, [r7, #28]
    13fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    13fe:	2b00      	cmp	r3, #0
    1400:	d108      	bne.n	1414 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    1402:	7dfb      	ldrb	r3, [r7, #23]
    1404:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    1408:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    140a:	7dfb      	ldrb	r3, [r7, #23]
    140c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    1410:	62bb      	str	r3, [r7, #40]	; 0x28
    1412:	e017      	b.n	1444 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    1414:	69fb      	ldr	r3, [r7, #28]
    1416:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    141a:	4946      	ldr	r1, [pc, #280]	; (1534 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    141c:	4613      	mov	r3, r2
    141e:	005b      	lsls	r3, r3, #1
    1420:	4413      	add	r3, r2
    1422:	009b      	lsls	r3, r3, #2
    1424:	440b      	add	r3, r1
    1426:	3364      	adds	r3, #100	; 0x64
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    142c:	69fb      	ldr	r3, [r7, #28]
    142e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
    1432:	4940      	ldr	r1, [pc, #256]	; (1534 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    1434:	4613      	mov	r3, r2
    1436:	005b      	lsls	r3, r3, #1
    1438:	4413      	add	r3, r2
    143a:	009b      	lsls	r3, r3, #2
    143c:	440b      	add	r3, r1
    143e:	3368      	adds	r3, #104	; 0x68
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    1444:	69fb      	ldr	r3, [r7, #28]
    1446:	f103 0e04 	add.w	lr, r3, #4
    144a:	4b24      	ldr	r3, [pc, #144]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    144c:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    144e:	69fb      	ldr	r3, [r7, #28]
    1450:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
    1454:	009b      	lsls	r3, r3, #2
    1456:	4413      	add	r3, r2
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    145c:	69fb      	ldr	r3, [r7, #28]
    145e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
    1462:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    1466:	69fb      	ldr	r3, [r7, #28]
    1468:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
    146c:	2b00      	cmp	r3, #0
    146e:	d003      	beq.n	1478 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    1470:	4b1a      	ldr	r3, [pc, #104]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1472:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    1474:	685b      	ldr	r3, [r3, #4]
    1476:	e000      	b.n	147a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    1478:	2300      	movs	r3, #0
    147a:	4920      	ldr	r1, [pc, #128]	; (14fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    147c:	6809      	ldr	r1, [r1, #0]
    147e:	4817      	ldr	r0, [pc, #92]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    1480:	6800      	ldr	r0, [r0, #0]
    1482:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    1484:	69fc      	ldr	r4, [r7, #28]
    1486:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_SDO_init(
    148a:	3406      	adds	r4, #6
    148c:	4d13      	ldr	r5, [pc, #76]	; (14dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    148e:	682d      	ldr	r5, [r5, #0]
    1490:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    1492:	69fe      	ldr	r6, [r7, #28]
    1494:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_SDO_init(
    1498:	3607      	adds	r6, #7
    149a:	9609      	str	r6, [sp, #36]	; 0x24
    149c:	9508      	str	r5, [sp, #32]
    149e:	9407      	str	r4, [sp, #28]
    14a0:	9006      	str	r0, [sp, #24]
    14a2:	7df8      	ldrb	r0, [r7, #23]
    14a4:	9005      	str	r0, [sp, #20]
    14a6:	9104      	str	r1, [sp, #16]
    14a8:	2137      	movs	r1, #55	; 0x37
    14aa:	9103      	str	r1, [sp, #12]
    14ac:	4922      	ldr	r1, [pc, #136]	; (1538 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    14ae:	9102      	str	r1, [sp, #8]
    14b0:	9301      	str	r3, [sp, #4]
    14b2:	9200      	str	r2, [sp, #0]
    14b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    14b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    14b8:	68f9      	ldr	r1, [r7, #12]
    14ba:	4670      	mov	r0, lr
    14bc:	4c1f      	ldr	r4, [pc, #124]	; (153c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    14be:	47a0      	blx	r4
    14c0:	4603      	mov	r3, r0
    14c2:	461a      	mov	r2, r3
    14c4:	69fb      	ldr	r3, [r7, #28]
    14c6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    14ca:	69fb      	ldr	r3, [r7, #28]
    14cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    14d0:	1c5a      	adds	r2, r3, #1
    14d2:	69fb      	ldr	r3, [r7, #28]
    14d4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    14d8:	e788      	b.n	13ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    14da:	bf00      	nop
    14dc:	2000114c 	.word	0x2000114c
    14e0:	20001110 	.word	0x20001110
    14e4:	20001160 	.word	0x20001160
    14e8:	20001150 	.word	0x20001150
    14ec:	20001184 	.word	0x20001184
    14f0:	20001154 	.word	0x20001154
    14f4:	20001234 	.word	0x20001234
    14f8:	200012c4 	.word	0x200012c4
    14fc:	20001158 	.word	0x20001158
    1500:	2000134c 	.word	0x2000134c
    1504:	200015e0 	.word	0x200015e0
    1508:	2000164c 	.word	0x2000164c
    150c:	20001668 	.word	0x20001668
    1510:	2000168c 	.word	0x2000168c
    1514:	200016c8 	.word	0x200016c8
    1518:	20001848 	.word	0x20001848
    151c:	200019a8 	.word	0x200019a8
    1520:	2000115c 	.word	0x2000115c
    1524:	200019c0 	.word	0x200019c0
    1528:	00001c39 	.word	0x00001c39
    152c:	000019bd 	.word	0x000019bd
    1530:	00001c9d 	.word	0x00001c9d
    1534:	20000184 	.word	0x20000184
    1538:	0001255c 	.word	0x0001255c
    153c:	00003cb5 	.word	0x00003cb5
	}

	if(err){CO_delete(); return err;}
    1540:	69fb      	ldr	r3, [r7, #28]
    1542:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1546:	2b00      	cmp	r3, #0
    1548:	d006      	beq.n	1558 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    154a:	69f8      	ldr	r0, [r7, #28]
    154c:	4b7c      	ldr	r3, [pc, #496]	; (1740 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    154e:	4798      	blx	r3
    1550:	69fb      	ldr	r3, [r7, #28]
    1552:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1556:	e21b      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
    1558:	69fb      	ldr	r3, [r7, #28]
    155a:	1d18      	adds	r0, r3, #4
    155c:	4b79      	ldr	r3, [pc, #484]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	6899      	ldr	r1, [r3, #8]
    1562:	4b78      	ldr	r3, [pc, #480]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1564:	681b      	ldr	r3, [r3, #0]
    1566:	68dc      	ldr	r4, [r3, #12]
    1568:	4b76      	ldr	r3, [pc, #472]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	685d      	ldr	r5, [r3, #4]
    156e:	4b75      	ldr	r3, [pc, #468]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1570:	681b      	ldr	r3, [r3, #0]
    1572:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    1574:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    1576:	3280      	adds	r2, #128	; 0x80
    1578:	9207      	str	r2, [sp, #28]
    157a:	2202      	movs	r2, #2
    157c:	9206      	str	r2, [sp, #24]
    157e:	9305      	str	r3, [sp, #20]
    1580:	2308      	movs	r3, #8
    1582:	9304      	str	r3, [sp, #16]
    1584:	4b70      	ldr	r3, [pc, #448]	; (1748 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    1586:	9303      	str	r3, [sp, #12]
    1588:	4b70      	ldr	r3, [pc, #448]	; (174c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    158a:	9302      	str	r3, [sp, #8]
    158c:	230a      	movs	r3, #10
    158e:	9301      	str	r3, [sp, #4]
    1590:	4b6f      	ldr	r3, [pc, #444]	; (1750 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    1592:	9300      	str	r3, [sp, #0]
    1594:	462b      	mov	r3, r5
    1596:	4622      	mov	r2, r4
    1598:	4c6e      	ldr	r4, [pc, #440]	; (1754 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    159a:	47a0      	blx	r4
    159c:	4603      	mov	r3, r0
    159e:	461a      	mov	r2, r3
    15a0:	69fb      	ldr	r3, [r7, #28]
    15a2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
    15a6:	69fb      	ldr	r3, [r7, #28]
    15a8:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    15ac:	2b00      	cmp	r3, #0
    15ae:	d006      	beq.n	15be <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    15b0:	69f8      	ldr	r0, [r7, #28]
    15b2:	4b63      	ldr	r3, [pc, #396]	; (1740 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    15b4:	4798      	blx	r3
    15b6:	69fb      	ldr	r3, [r7, #28]
    15b8:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    15bc:	e1e8      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
    15be:	4b61      	ldr	r3, [pc, #388]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	6918      	ldr	r0, [r3, #16]
    15c4:	4b5f      	ldr	r3, [pc, #380]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15c6:	681b      	ldr	r3, [r3, #0]
    15c8:	68dc      	ldr	r4, [r3, #12]
    15ca:	4b5e      	ldr	r3, [pc, #376]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	4a5c      	ldr	r2, [pc, #368]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    15d2:	6812      	ldr	r2, [r2, #0]
    15d4:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    15d6:	7df9      	ldrb	r1, [r7, #23]
    15d8:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    15dc:	7dfd      	ldrb	r5, [r7, #23]
    15de:	9106      	str	r1, [sp, #24]
    15e0:	2108      	movs	r1, #8
    15e2:	9105      	str	r1, [sp, #20]
    15e4:	9204      	str	r2, [sp, #16]
    15e6:	2200      	movs	r2, #0
    15e8:	9203      	str	r2, [sp, #12]
    15ea:	2200      	movs	r2, #0
    15ec:	9202      	str	r2, [sp, #8]
    15ee:	9301      	str	r3, [sp, #4]
    15f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    15f4:	9300      	str	r3, [sp, #0]
    15f6:	462b      	mov	r3, r5
    15f8:	4622      	mov	r2, r4
    15fa:	4601      	mov	r1, r0
    15fc:	69f8      	ldr	r0, [r7, #28]
    15fe:	4c56      	ldr	r4, [pc, #344]	; (1758 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    1600:	47a0      	blx	r4
    1602:	4603      	mov	r3, r0
    1604:	461a      	mov	r2, r3
    1606:	69fb      	ldr	r3, [r7, #28]
    1608:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
    160c:	69fb      	ldr	r3, [r7, #28]
    160e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1612:	2b00      	cmp	r3, #0
    1614:	d006      	beq.n	1624 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
    1616:	69f8      	ldr	r0, [r7, #28]
    1618:	4b49      	ldr	r3, [pc, #292]	; (1740 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    161a:	4798      	blx	r3
    161c:	69fb      	ldr	r3, [r7, #28]
    161e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1622:	e1b5      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
    1624:	7dfb      	ldrb	r3, [r7, #23]
    1626:	2b01      	cmp	r3, #1
    1628:	d10d      	bne.n	1646 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    162a:	69f8      	ldr	r0, [r7, #28]
    162c:	2300      	movs	r3, #0
    162e:	9301      	str	r3, [sp, #4]
    1630:	2302      	movs	r3, #2
    1632:	9300      	str	r3, [sp, #0]
    1634:	2300      	movs	r3, #0
    1636:	2200      	movs	r2, #0
    1638:	2100      	movs	r1, #0
    163a:	4c48      	ldr	r4, [pc, #288]	; (175c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    163c:	47a0      	blx	r4
    163e:	4602      	mov	r2, r0
    1640:	69fb      	ldr	r3, [r7, #28]
    1642:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	}else{

	}
       
	err = SYNC_Init(
    1646:	69fb      	ldr	r3, [r7, #28]
    1648:	f103 060c 	add.w	r6, r3, #12
    164c:	4b3d      	ldr	r3, [pc, #244]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	695b      	ldr	r3, [r3, #20]
    1652:	60fb      	str	r3, [r7, #12]
    1654:	4b3b      	ldr	r3, [pc, #236]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	689a      	ldr	r2, [r3, #8]
    165a:	60ba      	str	r2, [r7, #8]
    165c:	4b39      	ldr	r3, [pc, #228]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    165e:	681b      	ldr	r3, [r3, #0]
    1660:	6858      	ldr	r0, [r3, #4]
    1662:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    1664:	4b37      	ldr	r3, [pc, #220]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    166a:	603b      	str	r3, [r7, #0]
    166c:	4b3c      	ldr	r3, [pc, #240]	; (1760 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    166e:	689b      	ldr	r3, [r3, #8]
    1670:	4a3b      	ldr	r2, [pc, #236]	; (1760 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    1672:	68d2      	ldr	r2, [r2, #12]
    1674:	493a      	ldr	r1, [pc, #232]	; (1760 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    1676:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    167a:	4832      	ldr	r0, [pc, #200]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    167c:	6800      	ldr	r0, [r0, #0]
    167e:	6800      	ldr	r0, [r0, #0]
    1680:	4c30      	ldr	r4, [pc, #192]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1682:	6824      	ldr	r4, [r4, #0]
    1684:	6824      	ldr	r4, [r4, #0]
    1686:	2501      	movs	r5, #1
    1688:	9507      	str	r5, [sp, #28]
    168a:	9406      	str	r4, [sp, #24]
    168c:	2401      	movs	r4, #1
    168e:	9405      	str	r4, [sp, #20]
    1690:	9004      	str	r0, [sp, #16]
    1692:	9103      	str	r1, [sp, #12]
    1694:	9202      	str	r2, [sp, #8]
    1696:	9301      	str	r3, [sp, #4]
    1698:	683c      	ldr	r4, [r7, #0]
    169a:	9400      	str	r4, [sp, #0]
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	68ba      	ldr	r2, [r7, #8]
    16a0:	68f9      	ldr	r1, [r7, #12]
    16a2:	4630      	mov	r0, r6
    16a4:	4c2f      	ldr	r4, [pc, #188]	; (1764 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    16a6:	47a0      	blx	r4
    16a8:	4603      	mov	r3, r0
    16aa:	461a      	mov	r2, r3
    16ac:	69fb      	ldr	r3, [r7, #28]
    16ae:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    16b2:	69fb      	ldr	r3, [r7, #28]
    16b4:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    16b8:	2b00      	cmp	r3, #0
    16ba:	d006      	beq.n	16ca <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
    16bc:	69f8      	ldr	r0, [r7, #28]
    16be:	4b20      	ldr	r3, [pc, #128]	; (1740 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    16c0:	4798      	blx	r3
    16c2:	69fb      	ldr	r3, [r7, #28]
    16c4:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    16c8:	e162      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
    16ca:	69fb      	ldr	r3, [r7, #28]
    16cc:	2200      	movs	r2, #0
    16ce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    16d2:	69fb      	ldr	r3, [r7, #28]
    16d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    16d8:	2b03      	cmp	r3, #3
    16da:	f200 8097 	bhi.w	180c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    16de:	4b19      	ldr	r3, [pc, #100]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    16e0:	681b      	ldr	r3, [r3, #0]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    16e6:	69fb      	ldr	r3, [r7, #28]
    16e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    16ec:	1c9a      	adds	r2, r3, #2
    16ee:	69fb      	ldr	r3, [r7, #28]
    16f0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

		err = CO_RPDO_init(
    16f4:	69fb      	ldr	r3, [r7, #28]
    16f6:	f103 0e14 	add.w	lr, r3, #20
    16fa:	4b12      	ldr	r3, [pc, #72]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    16fc:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    16fe:	69fa      	ldr	r2, [r7, #28]
    1700:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_RPDO_init(
    1704:	3206      	adds	r2, #6
    1706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    170a:	60fb      	str	r3, [r7, #12]
    170c:	4b0d      	ldr	r3, [pc, #52]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	689b      	ldr	r3, [r3, #8]
    1712:	60bb      	str	r3, [r7, #8]
    1714:	4b0b      	ldr	r3, [pc, #44]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	685b      	ldr	r3, [r3, #4]
    171a:	607b      	str	r3, [r7, #4]
    171c:	4b09      	ldr	r3, [pc, #36]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    1722:	4b08      	ldr	r3, [pc, #32]	; (1744 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    1728:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    172a:	69fb      	ldr	r3, [r7, #28]
    172c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
    1730:	2b03      	cmp	r3, #3
    1732:	d819      	bhi.n	1768 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    1734:	69fb      	ldr	r3, [r7, #28]
    1736:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
    173a:	3302      	adds	r3, #2
    173c:	021a      	lsls	r2, r3, #8
    173e:	e014      	b.n	176a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
    1740:	000019bd 	.word	0x000019bd
    1744:	2000114c 	.word	0x2000114c
    1748:	20000014 	.word	0x20000014
    174c:	2000000c 	.word	0x2000000c
    1750:	2000003c 	.word	0x2000003c
    1754:	00002375 	.word	0x00002375
    1758:	000029c9 	.word	0x000029c9
    175c:	00001f2d 	.word	0x00001f2d
    1760:	20000184 	.word	0x20000184
    1764:	00004485 	.word	0x00004485
    1768:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    176a:	69fb      	ldr	r3, [r7, #28]
    176c:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
    1770:	460b      	mov	r3, r1
    1772:	005b      	lsls	r3, r3, #1
    1774:	440b      	add	r3, r1
    1776:	009b      	lsls	r3, r3, #2
    1778:	3368      	adds	r3, #104	; 0x68
    177a:	4987      	ldr	r1, [pc, #540]	; (1998 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    177c:	440b      	add	r3, r1
    177e:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    1780:	69fb      	ldr	r3, [r7, #28]
    1782:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
    1786:	460b      	mov	r3, r1
    1788:	00db      	lsls	r3, r3, #3
    178a:	440b      	add	r3, r1
    178c:	009b      	lsls	r3, r3, #2
    178e:	3398      	adds	r3, #152	; 0x98
    1790:	4981      	ldr	r1, [pc, #516]	; (1998 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    1792:	440b      	add	r3, r1
    1794:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    1796:	69f9      	ldr	r1, [r7, #28]
    1798:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_RPDO_init(
    179c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    17a0:	69fd      	ldr	r5, [r7, #28]
    17a2:	f8d5 5154 	ldr.w	r5, [r5, #340]	; 0x154
		err = CO_RPDO_init(
    17a6:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    17aa:	69fe      	ldr	r6, [r7, #28]
    17ac:	f8d6 614c 	ldr.w	r6, [r6, #332]	; 0x14c
    17b0:	960a      	str	r6, [sp, #40]	; 0x28
    17b2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    17b4:	9609      	str	r6, [sp, #36]	; 0x24
    17b6:	9508      	str	r5, [sp, #32]
    17b8:	9107      	str	r1, [sp, #28]
    17ba:	9306      	str	r3, [sp, #24]
    17bc:	9405      	str	r4, [sp, #20]
    17be:	2300      	movs	r3, #0
    17c0:	9304      	str	r3, [sp, #16]
    17c2:	9203      	str	r2, [sp, #12]
    17c4:	7dfb      	ldrb	r3, [r7, #23]
    17c6:	9302      	str	r3, [sp, #8]
    17c8:	683b      	ldr	r3, [r7, #0]
    17ca:	9301      	str	r3, [sp, #4]
    17cc:	9000      	str	r0, [sp, #0]
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	68ba      	ldr	r2, [r7, #8]
    17d2:	68f9      	ldr	r1, [r7, #12]
    17d4:	4670      	mov	r0, lr
    17d6:	4c71      	ldr	r4, [pc, #452]	; (199c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    17d8:	47a0      	blx	r4
    17da:	4603      	mov	r3, r0
    17dc:	461a      	mov	r2, r3
    17de:	69fb      	ldr	r3, [r7, #28]
    17e0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    17e4:	69fb      	ldr	r3, [r7, #28]
    17e6:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    17ea:	2b00      	cmp	r3, #0
    17ec:	d006      	beq.n	17fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
    17ee:	69f8      	ldr	r0, [r7, #28]
    17f0:	4b6b      	ldr	r3, [pc, #428]	; (19a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    17f2:	4798      	blx	r3
    17f4:	69fb      	ldr	r3, [r7, #28]
    17f6:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    17fa:	e0c9      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
    17fc:	69fb      	ldr	r3, [r7, #28]
    17fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    1802:	1c5a      	adds	r2, r3, #1
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    180a:	e762      	b.n	16d2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    180c:	69fb      	ldr	r3, [r7, #28]
    180e:	2200      	movs	r2, #0
    1810:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    1814:	69fb      	ldr	r3, [r7, #28]
    1816:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    181a:	2b03      	cmp	r3, #3
    181c:	d879      	bhi.n	1912 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
    181e:	69fb      	ldr	r3, [r7, #28]
    1820:	f103 0e14 	add.w	lr, r3, #20
    1824:	4b5f      	ldr	r3, [pc, #380]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1826:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    1828:	69fa      	ldr	r2, [r7, #28]
    182a:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_TPDO_init(
    182e:	320a      	adds	r2, #10
    1830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1834:	60fb      	str	r3, [r7, #12]
    1836:	4b5b      	ldr	r3, [pc, #364]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	689b      	ldr	r3, [r3, #8]
    183c:	60bb      	str	r3, [r7, #8]
    183e:	4b59      	ldr	r3, [pc, #356]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	685b      	ldr	r3, [r3, #4]
    1844:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    1846:	4b57      	ldr	r3, [pc, #348]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    184c:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    184e:	69fb      	ldr	r3, [r7, #28]
    1850:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_TPDO_init(
    1854:	2b03      	cmp	r3, #3
    1856:	d806      	bhi.n	1866 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    1858:	69fb      	ldr	r3, [r7, #28]
    185a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    185e:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    1860:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    1864:	e000      	b.n	1868 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
    1866:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    1868:	69fb      	ldr	r3, [r7, #28]
    186a:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
    186e:	460b      	mov	r3, r1
    1870:	00db      	lsls	r3, r3, #3
    1872:	1a5b      	subs	r3, r3, r1
    1874:	009b      	lsls	r3, r3, #2
    1876:	f503 7394 	add.w	r3, r3, #296	; 0x128
    187a:	4947      	ldr	r1, [pc, #284]	; (1998 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    187c:	440b      	add	r3, r1
    187e:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    1880:	69fb      	ldr	r3, [r7, #28]
    1882:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
    1886:	460b      	mov	r3, r1
    1888:	00db      	lsls	r3, r3, #3
    188a:	440b      	add	r3, r1
    188c:	009b      	lsls	r3, r3, #2
    188e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    1892:	4941      	ldr	r1, [pc, #260]	; (1998 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    1894:	440b      	add	r3, r1
    1896:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    1898:	69f9      	ldr	r1, [r7, #28]
    189a:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_TPDO_init(
    189e:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    18a2:	69fc      	ldr	r4, [r7, #28]
    18a4:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_TPDO_init(
    18a8:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    18ac:	4d3d      	ldr	r5, [pc, #244]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    18ae:	682d      	ldr	r5, [r5, #0]
    18b0:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    18b2:	69fe      	ldr	r6, [r7, #28]
    18b4:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_TPDO_init(
    18b8:	3603      	adds	r6, #3
    18ba:	9609      	str	r6, [sp, #36]	; 0x24
    18bc:	9508      	str	r5, [sp, #32]
    18be:	9407      	str	r4, [sp, #28]
    18c0:	9106      	str	r1, [sp, #24]
    18c2:	9305      	str	r3, [sp, #20]
    18c4:	9004      	str	r0, [sp, #16]
    18c6:	2300      	movs	r3, #0
    18c8:	9303      	str	r3, [sp, #12]
    18ca:	9202      	str	r2, [sp, #8]
    18cc:	7dfb      	ldrb	r3, [r7, #23]
    18ce:	9301      	str	r3, [sp, #4]
    18d0:	683b      	ldr	r3, [r7, #0]
    18d2:	9300      	str	r3, [sp, #0]
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	68ba      	ldr	r2, [r7, #8]
    18d8:	68f9      	ldr	r1, [r7, #12]
    18da:	4670      	mov	r0, lr
    18dc:	4c32      	ldr	r4, [pc, #200]	; (19a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    18de:	47a0      	blx	r4
    18e0:	4603      	mov	r3, r0
    18e2:	461a      	mov	r2, r3
    18e4:	69fb      	ldr	r3, [r7, #28]
    18e6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		if(err){CO_delete(); return err;}
    18ea:	69fb      	ldr	r3, [r7, #28]
    18ec:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    18f0:	2b00      	cmp	r3, #0
    18f2:	d006      	beq.n	1902 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
    18f4:	69f8      	ldr	r0, [r7, #28]
    18f6:	4b2a      	ldr	r3, [pc, #168]	; (19a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    18f8:	4798      	blx	r3
    18fa:	69fb      	ldr	r3, [r7, #28]
    18fc:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1900:	e046      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
    1902:	69fb      	ldr	r3, [r7, #28]
    1904:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    1908:	1c5a      	adds	r2, r3, #1
    190a:	69fb      	ldr	r3, [r7, #28]
    190c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    1910:	e780      	b.n	1814 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
    1912:	69fb      	ldr	r3, [r7, #28]
    1914:	f103 0220 	add.w	r2, r3, #32
    1918:	69fb      	ldr	r3, [r7, #28]
    191a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
    191e:	4619      	mov	r1, r3
    1920:	4610      	mov	r0, r2
    1922:	4b22      	ldr	r3, [pc, #136]	; (19ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
    1924:	4798      	blx	r3
	err = CO_HBconsumer_init(
    1926:	69fb      	ldr	r3, [r7, #28]
    1928:	f103 0020 	add.w	r0, r3, #32
    192c:	4b1d      	ldr	r3, [pc, #116]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    1932:	4b1c      	ldr	r3, [pc, #112]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	689d      	ldr	r5, [r3, #8]
    1938:	4b1a      	ldr	r3, [pc, #104]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	685e      	ldr	r6, [r3, #4]
    193e:	4b1c      	ldr	r3, [pc, #112]	; (19b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	4a18      	ldr	r2, [pc, #96]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1944:	6812      	ldr	r2, [r2, #0]
    1946:	6812      	ldr	r2, [r2, #0]
    1948:	2107      	movs	r1, #7
    194a:	9104      	str	r1, [sp, #16]
    194c:	9203      	str	r2, [sp, #12]
    194e:	2204      	movs	r2, #4
    1950:	9202      	str	r2, [sp, #8]
    1952:	9301      	str	r3, [sp, #4]
    1954:	4b17      	ldr	r3, [pc, #92]	; (19b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
    1956:	9300      	str	r3, [sp, #0]
    1958:	4633      	mov	r3, r6
    195a:	462a      	mov	r2, r5
    195c:	4621      	mov	r1, r4
    195e:	4c16      	ldr	r4, [pc, #88]	; (19b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
    1960:	47a0      	blx	r4
    1962:	4603      	mov	r3, r0
    1964:	461a      	mov	r2, r3
    1966:	69fb      	ldr	r3, [r7, #28]
    1968:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    196c:	69fb      	ldr	r3, [r7, #28]
    196e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1972:	2b00      	cmp	r3, #0
    1974:	d006      	beq.n	1984 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
    1976:	69f8      	ldr	r0, [r7, #28]
    1978:	4b09      	ldr	r3, [pc, #36]	; (19a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    197a:	4798      	blx	r3
    197c:	69fb      	ldr	r3, [r7, #28]
    197e:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
    1982:	e005      	b.n	1990 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    1984:	4b07      	ldr	r3, [pc, #28]	; (19a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	69fb      	ldr	r3, [r7, #28]
    198a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	return CO_ERROR_NO;
    198e:	2300      	movs	r3, #0
}
    1990:	4618      	mov	r0, r3
    1992:	3734      	adds	r7, #52	; 0x34
    1994:	46bd      	mov	sp, r7
    1996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1998:	20000184 	.word	0x20000184
    199c:	000036ad 	.word	0x000036ad
    19a0:	000019bd 	.word	0x000019bd
    19a4:	2000114c 	.word	0x2000114c
    19a8:	000037b5 	.word	0x000037b5
    19ac:	000028d1 	.word	0x000028d1
    19b0:	2000115c 	.word	0x2000115c
    19b4:	200001b4 	.word	0x200001b4
    19b8:	00002801 	.word	0x00002801

000019bc <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    19bc:	b580      	push	{r7, lr}
    19be:	b082      	sub	sp, #8
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    19c4:	687a      	ldr	r2, [r7, #4]
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    19cc:	4619      	mov	r1, r3
    19ce:	4610      	mov	r0, r2
    19d0:	4b04      	ldr	r3, [pc, #16]	; (19e4 <_ZN8CO_Class9CO_deleteEv+0x28>)
    19d2:	4798      	blx	r3
	CANmodule_Disable();
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	4618      	mov	r0, r3
    19d8:	4b03      	ldr	r3, [pc, #12]	; (19e8 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    19da:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    19dc:	bf00      	nop
    19de:	3708      	adds	r7, #8
    19e0:	46bd      	mov	sp, r7
    19e2:	bd80      	pop	{r7, pc}
    19e4:	00001c39 	.word	0x00001c39
    19e8:	00001df5 	.word	0x00001df5

000019ec <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    19ec:	b480      	push	{r7}
    19ee:	b083      	sub	sp, #12
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    19f8:	4618      	mov	r0, r3
    19fa:	370c      	adds	r7, #12
    19fc:	46bd      	mov	sp, r7
    19fe:	bc80      	pop	{r7}
    1a00:	4770      	bx	lr

00001a02 <_ZN15CO_Driver_Class12Get_Slave_IDEv>:
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message));
		void CAN_Polling_Tx(void);
		uint8_t Set_Slave_Node(uint8_t sn);
		uint8_t Get_Slave_ID(){return slave_node;}
    1a02:	b480      	push	{r7}
    1a04:	b083      	sub	sp, #12
    1a06:	af00      	add	r7, sp, #0
    1a08:	6078      	str	r0, [r7, #4]
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
    1a10:	4618      	mov	r0, r3
    1a12:	370c      	adds	r7, #12
    1a14:	46bd      	mov	sp, r7
    1a16:	bc80      	pop	{r7}
    1a18:	4770      	bx	lr
	...

00001a1c <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen_driver;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
    1a24:	4b12      	ldr	r3, [pc, #72]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	4a11      	ldr	r2, [pc, #68]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a2a:	6812      	ldr	r2, [r2, #0]
    1a2c:	3230      	adds	r2, #48	; 0x30
    1a2e:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
    1a30:	4b0f      	ldr	r3, [pc, #60]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	3370      	adds	r3, #112	; 0x70
    1a36:	4619      	mov	r1, r3
    1a38:	6878      	ldr	r0, [r7, #4]
    1a3a:	4b0e      	ldr	r3, [pc, #56]	; (1a74 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
    1a3c:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
    1a3e:	4b0c      	ldr	r3, [pc, #48]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a40:	681b      	ldr	r3, [r3, #0]
    1a42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    1a46:	b2db      	uxtb	r3, r3
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d007      	beq.n	1a5c <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
    1a4c:	4b08      	ldr	r3, [pc, #32]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	681b      	ldr	r3, [r3, #0]
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	4a06      	ldr	r2, [pc, #24]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a56:	6812      	ldr	r2, [r2, #0]
    1a58:	4610      	mov	r0, r2
    1a5a:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	2201      	movs	r2, #1
    1a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    1a66:	bf00      	nop
    1a68:	3708      	adds	r7, #8
    1a6a:	46bd      	mov	sp, r7
    1a6c:	bd80      	pop	{r7, pc}
    1a6e:	bf00      	nop
    1a70:	20001a00 	.word	0x20001a00
    1a74:	00005d89 	.word	0x00005d89

00001a78 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    1a78:	b590      	push	{r4, r7, lr}
    1a7a:	b083      	sub	sp, #12
    1a7c:	af00      	add	r7, sp, #0
    1a7e:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    1a80:	4b08      	ldr	r3, [pc, #32]	; (1aa4 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    1a82:	681c      	ldr	r4, [r3, #0]
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	4618      	mov	r0, r3
    1a8a:	4b07      	ldr	r3, [pc, #28]	; (1aa8 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    1a8c:	4798      	blx	r3
    1a8e:	4603      	mov	r3, r0
    1a90:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
    1a92:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	2201      	movs	r2, #1
    1a98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    1a9c:	bf00      	nop
    1a9e:	370c      	adds	r7, #12
    1aa0:	46bd      	mov	sp, r7
    1aa2:	bd90      	pop	{r4, r7, pc}
    1aa4:	20001a00 	.word	0x20001a00
    1aa8:	000019ed 	.word	0x000019ed

00001aac <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    1aac:	b480      	push	{r7}
    1aae:	b083      	sub	sp, #12
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	2201      	movs	r2, #1
    1aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
    1abe:	bf00      	nop
    1ac0:	370c      	adds	r7, #12
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bc80      	pop	{r7}
    1ac6:	4770      	bx	lr
    1ac8:	20001a00 	.word	0x20001a00

00001acc <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    1acc:	b580      	push	{r7, lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	3304      	adds	r3, #4
    1ad8:	4618      	mov	r0, r3
    1ada:	4b13      	ldr	r3, [pc, #76]	; (1b28 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    1adc:	4798      	blx	r3
    1ade:	6878      	ldr	r0, [r7, #4]
    1ae0:	4b12      	ldr	r3, [pc, #72]	; (1b2c <_ZN15CO_Driver_ClassC1Ev+0x60>)
    1ae2:	4798      	blx	r3
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	330c      	adds	r3, #12
    1ae8:	4618      	mov	r0, r3
    1aea:	4b11      	ldr	r3, [pc, #68]	; (1b30 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    1aec:	4798      	blx	r3
    1aee:	687b      	ldr	r3, [r7, #4]
    1af0:	3314      	adds	r3, #20
    1af2:	4618      	mov	r0, r3
    1af4:	4b0f      	ldr	r3, [pc, #60]	; (1b34 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    1af6:	4798      	blx	r3
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	3320      	adds	r3, #32
    1afc:	4618      	mov	r0, r3
    1afe:	4b0e      	ldr	r3, [pc, #56]	; (1b38 <_ZN15CO_Driver_ClassC1Ev+0x6c>)
    1b00:	4798      	blx	r3
    1b02:	4a0e      	ldr	r2, [pc, #56]	; (1b3c <_ZN15CO_Driver_ClassC1Ev+0x70>)
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	2200      	movs	r2, #0
    1b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
    1b10:	4a0b      	ldr	r2, [pc, #44]	; (1b40 <_ZN15CO_Driver_ClassC1Ev+0x74>)
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
    1b16:	687b      	ldr	r3, [r7, #4]
    1b18:	2200      	movs	r2, #0
    1b1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
} //CO_Driver_Class
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	4618      	mov	r0, r3
    1b22:	3708      	adds	r7, #8
    1b24:	46bd      	mov	sp, r7
    1b26:	bd80      	pop	{r7, pc}
    1b28:	00002249 	.word	0x00002249
    1b2c:	0000299f 	.word	0x0000299f
    1b30:	000041ad 	.word	0x000041ad
    1b34:	00002b01 	.word	0x00002b01
    1b38:	000027cd 	.word	0x000027cd
    1b3c:	00011f40 	.word	0x00011f40
    1b40:	20001a00 	.word	0x20001a00

00001b44 <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
    1b4c:	4a0f      	ldr	r2, [pc, #60]	; (1b8c <_ZN15CO_Driver_ClassD1Ev+0x48>)
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	601a      	str	r2, [r3, #0]
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	3320      	adds	r3, #32
    1b56:	4618      	mov	r0, r3
    1b58:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    1b5a:	4798      	blx	r3
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	3314      	adds	r3, #20
    1b60:	4618      	mov	r0, r3
    1b62:	4b0c      	ldr	r3, [pc, #48]	; (1b94 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    1b64:	4798      	blx	r3
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	330c      	adds	r3, #12
    1b6a:	4618      	mov	r0, r3
    1b6c:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    1b6e:	4798      	blx	r3
    1b70:	6878      	ldr	r0, [r7, #4]
    1b72:	4b0a      	ldr	r3, [pc, #40]	; (1b9c <_ZN15CO_Driver_ClassD1Ev+0x58>)
    1b74:	4798      	blx	r3
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	3304      	adds	r3, #4
    1b7a:	4618      	mov	r0, r3
    1b7c:	4b08      	ldr	r3, [pc, #32]	; (1ba0 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
    1b7e:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	4618      	mov	r0, r3
    1b84:	3708      	adds	r7, #8
    1b86:	46bd      	mov	sp, r7
    1b88:	bd80      	pop	{r7, pc}
    1b8a:	bf00      	nop
    1b8c:	00011f40 	.word	0x00011f40
    1b90:	000027ed 	.word	0x000027ed
    1b94:	00002b15 	.word	0x00002b15
    1b98:	000041c1 	.word	0x000041c1
    1b9c:	000029b3 	.word	0x000029b3
    1ba0:	00002271 	.word	0x00002271

00001ba4 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    1ba4:	b480      	push	{r7}
    1ba6:	b085      	sub	sp, #20
    1ba8:	af00      	add	r7, sp, #0
    1baa:	60f8      	str	r0, [r7, #12]
    1bac:	60b9      	str	r1, [r7, #8]
    1bae:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    1bb0:	68bb      	ldr	r3, [r7, #8]
    1bb2:	2200      	movs	r2, #0
    1bb4:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    1bb6:	68bb      	ldr	r3, [r7, #8]
    1bb8:	2200      	movs	r2, #0
    1bba:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	791a      	ldrb	r2, [r3, #4]
    1bc0:	68bb      	ldr	r3, [r7, #8]
    1bc2:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	089a      	lsrs	r2, r3, #2
    1bca:	68bb      	ldr	r3, [r7, #8]
    1bcc:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    1bce:	687b      	ldr	r3, [r7, #4]
    1bd0:	681b      	ldr	r3, [r3, #0]
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	f003 0302 	and.w	r3, r3, #2
    1bd8:	b2da      	uxtb	r2, r3
    1bda:	68bb      	ldr	r3, [r7, #8]
    1bdc:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	1d5a      	adds	r2, r3, #5
    1be2:	68bb      	ldr	r3, [r7, #8]
    1be4:	609a      	str	r2, [r3, #8]
}
    1be6:	bf00      	nop
    1be8:	3714      	adds	r7, #20
    1bea:	46bd      	mov	sp, r7
    1bec:	bc80      	pop	{r7}
    1bee:	4770      	bx	lr

00001bf0 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    1bf0:	b590      	push	{r4, r7, lr}
    1bf2:	b085      	sub	sp, #20
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	60f8      	str	r0, [r7, #12]
    1bf8:	60b9      	str	r1, [r7, #8]
    1bfa:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    1bfc:	687a      	ldr	r2, [r7, #4]
    1bfe:	68bb      	ldr	r3, [r7, #8]
    1c00:	4614      	mov	r4, r2
    1c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    1c08:	68bb      	ldr	r3, [r7, #8]
    1c0a:	7b1a      	ldrb	r2, [r3, #12]
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    1c10:	68bb      	ldr	r3, [r7, #8]
    1c12:	681a      	ldr	r2, [r3, #0]
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	f103 0015 	add.w	r0, r3, #21
    1c1e:	68bb      	ldr	r3, [r7, #8]
    1c20:	6899      	ldr	r1, [r3, #8]
    1c22:	68bb      	ldr	r3, [r7, #8]
    1c24:	7b1b      	ldrb	r3, [r3, #12]
    1c26:	461a      	mov	r2, r3
    1c28:	4b02      	ldr	r3, [pc, #8]	; (1c34 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    1c2a:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    1c2c:	bf00      	nop
    1c2e:	3714      	adds	r7, #20
    1c30:	46bd      	mov	sp, r7
    1c32:	bd90      	pop	{r4, r7, pc}
    1c34:	00011c19 	.word	0x00011c19

00001c38 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    1c38:	b480      	push	{r7}
    1c3a:	b083      	sub	sp, #12
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	6078      	str	r0, [r7, #4]
    1c40:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    1c42:	687b      	ldr	r3, [r7, #4]
    1c44:	683a      	ldr	r2, [r7, #0]
    1c46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    1c4a:	bf00      	nop
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	bc80      	pop	{r7}
    1c52:	4770      	bx	lr

00001c54 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    1c54:	b580      	push	{r7, lr}
    1c56:	b084      	sub	sp, #16
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	2200      	movs	r2, #0
    1c60:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1c6a:	681b      	ldr	r3, [r3, #0]
    1c6c:	4618      	mov	r0, r3
    1c6e:	4b0a      	ldr	r3, [pc, #40]	; (1c98 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    1c70:	4798      	blx	r3
    1c72:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    1c74:	68fb      	ldr	r3, [r7, #12]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d002      	beq.n	1c80 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1c7a:	f06f 030e 	mvn.w	r3, #14
    1c7e:	e007      	b.n	1c90 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1c86:	2201      	movs	r2, #1
    1c88:	751a      	strb	r2, [r3, #20]
	return Error;
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	f993 30a8 	ldrsb.w	r3, [r3, #168]	; 0xa8
}
    1c90:	4618      	mov	r0, r3
    1c92:	3710      	adds	r7, #16
    1c94:	46bd      	mov	sp, r7
    1c96:	bd80      	pop	{r7, pc}
    1c98:	00005d4d 	.word	0x00005d4d

00001c9c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b086      	sub	sp, #24
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	60f8      	str	r0, [r7, #12]
    1ca4:	60b9      	str	r1, [r7, #8]
    1ca6:	607a      	str	r2, [r7, #4]
    1ca8:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	687a      	ldr	r2, [r7, #4]
    1cae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    1cb2:	68bb      	ldr	r3, [r7, #8]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d005      	beq.n	1cc4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1cb8:	683b      	ldr	r3, [r7, #0]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d002      	beq.n	1cc4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    1cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d102      	bne.n	1cca <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    1cc4:	f04f 33ff 	mov.w	r3, #4294967295
    1cc8:	e085      	b.n	1dd6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    1cca:	68fb      	ldr	r3, [r7, #12]
    1ccc:	68ba      	ldr	r2, [r7, #8]
    1cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    1cd2:	68bb      	ldr	r3, [r7, #8]
    1cd4:	687a      	ldr	r2, [r7, #4]
    1cd6:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    1cd8:	68bb      	ldr	r3, [r7, #8]
    1cda:	683a      	ldr	r2, [r7, #0]
    1cdc:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    1cde:	68bb      	ldr	r3, [r7, #8]
    1ce0:	6a3a      	ldr	r2, [r7, #32]
    1ce2:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    1ce4:	68bb      	ldr	r3, [r7, #8]
    1ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ce8:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    1cea:	68bb      	ldr	r3, [r7, #8]
    1cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1cee:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    1cf0:	68bb      	ldr	r3, [r7, #8]
    1cf2:	2200      	movs	r2, #0
    1cf4:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    1cf6:	68bb      	ldr	r3, [r7, #8]
    1cf8:	2200      	movs	r2, #0
    1cfa:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    1cfc:	68bb      	ldr	r3, [r7, #8]
    1cfe:	2200      	movs	r2, #0
    1d00:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    1d02:	68bb      	ldr	r3, [r7, #8]
    1d04:	2201      	movs	r2, #1
    1d06:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    1d08:	68bb      	ldr	r3, [r7, #8]
    1d0a:	2200      	movs	r2, #0
    1d0c:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    1d0e:	68bb      	ldr	r3, [r7, #8]
    1d10:	2200      	movs	r2, #0
    1d12:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    1d14:	68bb      	ldr	r3, [r7, #8]
    1d16:	2200      	movs	r2, #0
    1d18:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    1d1a:	68fb      	ldr	r3, [r7, #12]
    1d1c:	2200      	movs	r2, #0
    1d1e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1d22:	68fb      	ldr	r3, [r7, #12]
    1d24:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1d28:	6a3b      	ldr	r3, [r7, #32]
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d217      	bcs.n	1d5e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1d34:	011b      	lsls	r3, r3, #4
    1d36:	683a      	ldr	r2, [r7, #0]
    1d38:	4413      	add	r3, r2
    1d3a:	2200      	movs	r2, #0
    1d3c:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1d44:	011b      	lsls	r3, r3, #4
    1d46:	683a      	ldr	r2, [r7, #0]
    1d48:	4413      	add	r3, r2
    1d4a:	2200      	movs	r2, #0
    1d4c:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    1d4e:	68fb      	ldr	r3, [r7, #12]
    1d50:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1d54:	1c5a      	adds	r2, r3, #1
    1d56:	68fb      	ldr	r3, [r7, #12]
    1d58:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1d5c:	e7e1      	b.n	1d22 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	2200      	movs	r2, #0
    1d62:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1d66:	68fb      	ldr	r3, [r7, #12]
    1d68:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1d6e:	429a      	cmp	r2, r3
    1d70:	d20f      	bcs.n	1d92 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
    1d72:	68fb      	ldr	r3, [r7, #12]
    1d74:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1d78:	011b      	lsls	r3, r3, #4
    1d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d7c:	4413      	add	r3, r2
    1d7e:	2200      	movs	r2, #0
    1d80:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    1d88:	1c5a      	adds	r2, r3, #1
    1d8a:	68fb      	ldr	r3, [r7, #12]
    1d8c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    1d90:	e7e9      	b.n	1d66 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
    1d92:	68f8      	ldr	r0, [r7, #12]
    1d94:	4b12      	ldr	r3, [pc, #72]	; (1de0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    1d96:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    1d98:	68fb      	ldr	r3, [r7, #12]
    1d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1d9e:	4a11      	ldr	r2, [pc, #68]	; (1de4 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    1da0:	2100      	movs	r1, #0
    1da2:	4618      	mov	r0, r3
    1da4:	4b10      	ldr	r3, [pc, #64]	; (1de8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1da6:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    1dae:	4a0f      	ldr	r2, [pc, #60]	; (1dec <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    1db0:	2102      	movs	r1, #2
    1db2:	4618      	mov	r0, r3
    1db4:	4b0c      	ldr	r3, [pc, #48]	; (1de8 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    1db6:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    1db8:	6878      	ldr	r0, [r7, #4]
    1dba:	4b0d      	ldr	r3, [pc, #52]	; (1df0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
    1dbc:	4798      	blx	r3
    1dbe:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    1dc0:	697b      	ldr	r3, [r7, #20]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d002      	beq.n	1dcc <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    1dc6:	f06f 030e 	mvn.w	r3, #14
    1dca:	e004      	b.n	1dd6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	}
	CAN_Module=CANmodule;
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	68ba      	ldr	r2, [r7, #8]
    1dd0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    1dd4:	2300      	movs	r3, #0
}
    1dd6:	4618      	mov	r0, r3
    1dd8:	3718      	adds	r7, #24
    1dda:	46bd      	mov	sp, r7
    1ddc:	bd80      	pop	{r7, pc}
    1dde:	bf00      	nop
    1de0:	00001df5 	.word	0x00001df5
    1de4:	00001a1d 	.word	0x00001a1d
    1de8:	00005e21 	.word	0x00005e21
    1dec:	00001a79 	.word	0x00001a79
    1df0:	00005d4d 	.word	0x00005d4d

00001df4 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    1df4:	b480      	push	{r7}
    1df6:	b083      	sub	sp, #12
    1df8:	af00      	add	r7, sp, #0
    1dfa:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    1dfc:	bf00      	nop
    1dfe:	370c      	adds	r7, #12
    1e00:	46bd      	mov	sp, r7
    1e02:	bc80      	pop	{r7}
    1e04:	4770      	bx	lr

00001e06 <_ZN15CO_Driver_Class14Set_Slave_NodeEh>:
uint8_t CO_Driver_Class::Set_Slave_Node(uint8_t sn){
    1e06:	b480      	push	{r7}
    1e08:	b083      	sub	sp, #12
    1e0a:	af00      	add	r7, sp, #0
    1e0c:	6078      	str	r0, [r7, #4]
    1e0e:	460b      	mov	r3, r1
    1e10:	70fb      	strb	r3, [r7, #3]
	slave_node=sn;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	78fa      	ldrb	r2, [r7, #3]
    1e16:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	return slave_node;
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
}
    1e20:	4618      	mov	r0, r3
    1e22:	370c      	adds	r7, #12
    1e24:	46bd      	mov	sp, r7
    1e26:	bc80      	pop	{r7}
    1e28:	4770      	bx	lr
	...

00001e2c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    1e2c:	b590      	push	{r4, r7, lr}
    1e2e:	b087      	sub	sp, #28
    1e30:	af00      	add	r7, sp, #0
    1e32:	60f8      	str	r0, [r7, #12]
    1e34:	60b9      	str	r1, [r7, #8]
    1e36:	607a      	str	r2, [r7, #4]
    1e38:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	2200      	movs	r2, #0
    1e3e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    1e42:	68fb      	ldr	r3, [r7, #12]
    1e44:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d060      	beq.n	1f0e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d05d      	beq.n	1f0e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1e54:	2b00      	cmp	r3, #0
    1e56:	d05a      	beq.n	1f0e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    1e58:	68fb      	ldr	r3, [r7, #12]
    1e5a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e5e:	689a      	ldr	r2, [r3, #8]
    1e60:	68bb      	ldr	r3, [r7, #8]
    1e62:	429a      	cmp	r2, r3
    1e64:	d953      	bls.n	1f0e <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    1e66:	68fb      	ldr	r3, [r7, #12]
    1e68:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1e6c:	685a      	ldr	r2, [r3, #4]
    1e6e:	68bb      	ldr	r3, [r7, #8]
    1e70:	011b      	lsls	r3, r3, #4
    1e72:	4413      	add	r3, r2
    1e74:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    1e76:	697b      	ldr	r3, [r7, #20]
    1e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1e7a:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    1e7c:	697b      	ldr	r3, [r7, #20]
    1e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1e80:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	009a      	lsls	r2, r3, #2
    1e86:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    1e8a:	4013      	ands	r3, r2
    1e8c:	697a      	ldr	r2, [r7, #20]
    1e8e:	6013      	str	r3, [r2, #0]
		if (rtr)
    1e90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1e94:	2b00      	cmp	r3, #0
    1e96:	d005      	beq.n	1ea4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    1e98:	697b      	ldr	r3, [r7, #20]
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	f043 0202 	orr.w	r2, r3, #2
    1ea0:	697b      	ldr	r3, [r7, #20]
    1ea2:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    1ea4:	683b      	ldr	r3, [r7, #0]
    1ea6:	009a      	lsls	r2, r3, #2
    1ea8:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    1eac:	4013      	ands	r3, r2
    1eae:	697a      	ldr	r2, [r7, #20]
    1eb0:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    1eb2:	697b      	ldr	r3, [r7, #20]
    1eb4:	685b      	ldr	r3, [r3, #4]
    1eb6:	f043 0202 	orr.w	r2, r3, #2
    1eba:	697b      	ldr	r3, [r7, #20]
    1ebc:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1ec4:	7d5b      	ldrb	r3, [r3, #21]
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	2b00      	cmp	r3, #0
    1eca:	bf14      	ite	ne
    1ecc:	2301      	movne	r3, #1
    1ece:	2300      	moveq	r3, #0
    1ed0:	b2db      	uxtb	r3, r3
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d120      	bne.n	1f18 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    1ed6:	697b      	ldr	r3, [r7, #20]
    1ed8:	681a      	ldr	r2, [r3, #0]
    1eda:	68fb      	ldr	r3, [r7, #12]
    1edc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			CO_Filter.mask = buffer->mask;
    1ee0:	697b      	ldr	r3, [r7, #20]
    1ee2:	685a      	ldr	r2, [r3, #4]
    1ee4:	68fb      	ldr	r3, [r7, #12]
    1ee6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1ef0:	6818      	ldr	r0, [r3, #0]
    1ef2:	68bb      	ldr	r3, [r7, #8]
    1ef4:	b2d9      	uxtb	r1, r3
    1ef6:	68fb      	ldr	r3, [r7, #12]
    1ef8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    1efc:	2200      	movs	r2, #0
    1efe:	4c0a      	ldr	r4, [pc, #40]	; (1f28 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    1f00:	47a0      	blx	r4
    1f02:	4603      	mov	r3, r0
    1f04:	b25a      	sxtb	r2, r3
    1f06:	68fb      	ldr	r3, [r7, #12]
    1f08:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		}
    1f0c:	e004      	b.n	1f18 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    1f0e:	68fb      	ldr	r3, [r7, #12]
    1f10:	22ff      	movs	r2, #255	; 0xff
    1f12:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    1f16:	e000      	b.n	1f1a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    1f18:	bf00      	nop
	}
	return ret;
    1f1a:	68fb      	ldr	r3, [r7, #12]
    1f1c:	f993 30a9 	ldrsb.w	r3, [r3, #169]	; 0xa9
}
    1f20:	4618      	mov	r0, r3
    1f22:	371c      	adds	r7, #28
    1f24:	46bd      	mov	sp, r7
    1f26:	bd90      	pop	{r4, r7, pc}
    1f28:	00005e9d 	.word	0x00005e9d

00001f2c <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    1f2c:	b480      	push	{r7}
    1f2e:	b085      	sub	sp, #20
    1f30:	af00      	add	r7, sp, #0
    1f32:	60f8      	str	r0, [r7, #12]
    1f34:	60b9      	str	r1, [r7, #8]
    1f36:	607a      	str	r2, [r7, #4]
    1f38:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    1f3a:	68fb      	ldr	r3, [r7, #12]
    1f3c:	2200      	movs	r2, #0
    1f3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d03c      	beq.n	1fc6 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    1f4c:	68fb      	ldr	r3, [r7, #12]
    1f4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f52:	691a      	ldr	r2, [r3, #16]
    1f54:	68bb      	ldr	r3, [r7, #8]
    1f56:	429a      	cmp	r2, r3
    1f58:	d935      	bls.n	1fc6 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    1f5a:	68fb      	ldr	r3, [r7, #12]
    1f5c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    1f60:	68da      	ldr	r2, [r3, #12]
    1f62:	68bb      	ldr	r3, [r7, #8]
    1f64:	011b      	lsls	r3, r3, #4
    1f66:	441a      	add	r2, r3
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    1f6e:	68fb      	ldr	r3, [r7, #12]
    1f70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1f74:	68fa      	ldr	r2, [r7, #12]
    1f76:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    1f7a:	6812      	ldr	r2, [r2, #0]
    1f7c:	f3c2 020a 	ubfx	r2, r2, #0, #11
    1f80:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    1f82:	68fb      	ldr	r3, [r7, #12]
    1f84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1f88:	687a      	ldr	r2, [r7, #4]
    1f8a:	0092      	lsls	r2, r2, #2
    1f8c:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    1f8e:	78fb      	ldrb	r3, [r7, #3]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d009      	beq.n	1fa8 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    1f94:	68fb      	ldr	r3, [r7, #12]
    1f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1f9a:	68fa      	ldr	r2, [r7, #12]
    1f9c:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    1fa0:	6812      	ldr	r2, [r2, #0]
    1fa2:	f042 0202 	orr.w	r2, r2, #2
    1fa6:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    1fa8:	68fb      	ldr	r3, [r7, #12]
    1faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1fae:	7e3a      	ldrb	r2, [r7, #24]
    1fb0:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    1fb2:	68fb      	ldr	r3, [r7, #12]
    1fb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1fb8:	2200      	movs	r2, #0
    1fba:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    1fbc:	68fb      	ldr	r3, [r7, #12]
    1fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1fc2:	7f3a      	ldrb	r2, [r7, #28]
    1fc4:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    1fc6:	68fb      	ldr	r3, [r7, #12]
    1fc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
    1fcc:	4618      	mov	r0, r3
    1fce:	3714      	adds	r7, #20
    1fd0:	46bd      	mov	sp, r7
    1fd2:	bc80      	pop	{r7}
    1fd4:	4770      	bx	lr
	...

00001fd8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    1fd8:	b590      	push	{r4, r7, lr}
    1fda:	b089      	sub	sp, #36	; 0x24
    1fdc:	af02      	add	r7, sp, #8
    1fde:	6078      	str	r0, [r7, #4]
    1fe0:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    1fe2:	687b      	ldr	r3, [r7, #4]
    1fe4:	2200      	movs	r2, #0
    1fe6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	if(buffer->bufferFull){
    1fea:	683b      	ldr	r3, [r7, #0]
    1fec:	7b5b      	ldrb	r3, [r3, #13]
    1fee:	b2db      	uxtb	r3, r3
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	bf14      	ite	ne
    1ff4:	2301      	movne	r3, #1
    1ff6:	2300      	moveq	r3, #0
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d01d      	beq.n	203a <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    1ffe:	687b      	ldr	r3, [r7, #4]
    2000:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2004:	7ddb      	ldrb	r3, [r3, #23]
    2006:	b2db      	uxtb	r3, r3
    2008:	2b00      	cmp	r3, #0
    200a:	bf0c      	ite	eq
    200c:	2301      	moveq	r3, #1
    200e:	2300      	movne	r3, #0
    2010:	b2db      	uxtb	r3, r3
    2012:	2b00      	cmp	r3, #0
    2014:	d00d      	beq.n	2032 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	1d18      	adds	r0, r3, #4
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2020:	6a19      	ldr	r1, [r3, #32]
    2022:	683b      	ldr	r3, [r7, #0]
    2024:	681b      	ldr	r3, [r3, #0]
    2026:	9300      	str	r3, [sp, #0]
    2028:	f248 1310 	movw	r3, #33040	; 0x8110
    202c:	2214      	movs	r2, #20
    202e:	4c35      	ldr	r4, [pc, #212]	; (2104 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    2030:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	22f7      	movs	r2, #247	; 0xf7
    2036:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	3384      	adds	r3, #132	; 0x84
    203e:	683a      	ldr	r2, [r7, #0]
    2040:	4619      	mov	r1, r3
    2042:	6878      	ldr	r0, [r7, #4]
    2044:	4b30      	ldr	r3, [pc, #192]	; (2108 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    2046:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    204e:	699b      	ldr	r3, [r3, #24]
    2050:	2b00      	cmp	r3, #0
    2052:	bf0c      	ite	eq
    2054:	2301      	moveq	r3, #1
    2056:	2300      	movne	r3, #0
    2058:	b2db      	uxtb	r3, r3
    205a:	2b00      	cmp	r3, #0
    205c:	d041      	beq.n	20e2 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2064:	683a      	ldr	r2, [r7, #0]
    2066:	7b92      	ldrb	r2, [r2, #14]
    2068:	b2d2      	uxtb	r2, r2
    206a:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	4a25      	ldr	r2, [pc, #148]	; (210c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    2076:	2101      	movs	r1, #1
    2078:	4618      	mov	r0, r3
    207a:	4b25      	ldr	r3, [pc, #148]	; (2110 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    207c:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2084:	681b      	ldr	r3, [r3, #0]
    2086:	4618      	mov	r0, r3
    2088:	4b22      	ldr	r3, [pc, #136]	; (2114 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    208a:	4798      	blx	r3
		receivedtxCOCallback=false;
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	2200      	movs	r2, #0
    2090:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2094:	f3ef 8310 	mrs	r3, PRIMASK
    2098:	60fb      	str	r3, [r7, #12]
  return(result);
    209a:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    209c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    209e:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    20a6:	681a      	ldr	r2, [r3, #0]
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	3384      	adds	r3, #132	; 0x84
    20ac:	4619      	mov	r1, r3
    20ae:	4610      	mov	r0, r2
    20b0:	4b19      	ldr	r3, [pc, #100]	; (2118 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    20b2:	4798      	blx	r3
    20b4:	4603      	mov	r3, r0
    20b6:	461a      	mov	r2, r3
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	629a      	str	r2, [r3, #40]	; 0x28
    20bc:	697b      	ldr	r3, [r7, #20]
    20be:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    20c0:	693b      	ldr	r3, [r7, #16]
    20c2:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20ca:	2b00      	cmp	r3, #0
    20cc:	bf14      	ite	ne
    20ce:	2301      	movne	r3, #1
    20d0:	2300      	moveq	r3, #0
    20d2:	b2db      	uxtb	r3, r3
    20d4:	2b00      	cmp	r3, #0
    20d6:	d00d      	beq.n	20f4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	22f1      	movs	r2, #241	; 0xf1
    20dc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    20e0:	e008      	b.n	20f4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    20e2:	683b      	ldr	r3, [r7, #0]
    20e4:	2201      	movs	r2, #1
    20e6:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    20ee:	699a      	ldr	r2, [r3, #24]
    20f0:	3201      	adds	r2, #1
    20f2:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	f993 30aa 	ldrsb.w	r3, [r3, #170]	; 0xaa
}
    20fa:	4618      	mov	r0, r3
    20fc:	371c      	adds	r7, #28
    20fe:	46bd      	mov	sp, r7
    2100:	bd90      	pop	{r4, r7, pc}
    2102:	bf00      	nop
    2104:	000024bd 	.word	0x000024bd
    2108:	00001ba5 	.word	0x00001ba5
    210c:	00001aad 	.word	0x00001aad
    2110:	00005e21 	.word	0x00005e21
    2114:	00005d4d 	.word	0x00005d4d
    2118:	00005dd5 	.word	0x00005dd5

0000211c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    211c:	b590      	push	{r4, r7, lr}
    211e:	b085      	sub	sp, #20
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]

	msgMatched = false;
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	2200      	movs	r2, #0
    2128:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	f103 0170 	add.w	r1, r3, #112	; 0x70
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2138:	461a      	mov	r2, r3
    213a:	6878      	ldr	r0, [r7, #4]
    213c:	4b3e      	ldr	r3, [pc, #248]	; (2238 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x11c>)
    213e:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    2146:	685a      	ldr	r2, [r3, #4]
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    2154:	009b      	lsls	r3, r3, #2
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
    215c:	4313      	orrs	r3, r2
    215e:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2200      	movs	r2, #0
    2164:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2174:	689b      	ldr	r3, [r3, #8]
    2176:	429a      	cmp	r2, r3
    2178:	d221      	bcs.n	21be <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    2180:	681a      	ldr	r2, [r3, #0]
    2182:	68fb      	ldr	r3, [r7, #12]
    2184:	405a      	eors	r2, r3
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    218c:	685b      	ldr	r3, [r3, #4]
    218e:	4013      	ands	r3, r2
    2190:	2b00      	cmp	r3, #0
    2192:	d104      	bne.n	219e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x82>
		{
			msgMatched = true;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2201      	movs	r2, #1
    2198:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			break;
    219c:	e00f      	b.n	21be <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
		}
		MsgBuff++;
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    21a4:	f103 0210 	add.w	r2, r3, #16
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    21b4:	1c5a      	adds	r2, r3, #1
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    21bc:	e7d4      	b.n	2168 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x4c>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    21c4:	2b00      	cmp	r3, #0
    21c6:	d018      	beq.n	21fa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    21ce:	2b00      	cmp	r3, #0
    21d0:	d013      	beq.n	21fa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    21d8:	68db      	ldr	r3, [r3, #12]
    21da:	2b00      	cmp	r3, #0
    21dc:	d00d      	beq.n	21fa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    21e4:	68db      	ldr	r3, [r3, #12]
    21e6:	687a      	ldr	r2, [r7, #4]
    21e8:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
    21ec:	6890      	ldr	r0, [r2, #8]
    21ee:	687a      	ldr	r2, [r7, #4]
    21f0:	f502 7280 	add.w	r2, r2, #256	; 0x100
    21f4:	4611      	mov	r1, r2
    21f6:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    21f8:	e019      	b.n	222e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x112>
		if (CANmessage.ident==(CO_CAN_ID_TPDO_1+canopen_driver->Get_Slave_ID()))
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    2200:	4b0e      	ldr	r3, [pc, #56]	; (223c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x120>)
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	4618      	mov	r0, r3
    2206:	4b0e      	ldr	r3, [pc, #56]	; (2240 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x124>)
    2208:	4798      	blx	r3
    220a:	4603      	mov	r3, r0
    220c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2210:	429c      	cmp	r4, r3
    2212:	bf0c      	ite	eq
    2214:	2301      	moveq	r3, #1
    2216:	2300      	movne	r3, #0
    2218:	b2db      	uxtb	r3, r3
    221a:	2b00      	cmp	r3, #0
    221c:	d007      	beq.n	222e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x112>
			memcpy((void*)CO_OD_RAM.voltage,(void*)CANmessage.data,2);
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	f203 1315 	addw	r3, r3, #277	; 0x115
    2224:	881b      	ldrh	r3, [r3, #0]
    2226:	b29a      	uxth	r2, r3
    2228:	4b06      	ldr	r3, [pc, #24]	; (2244 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x128>)
    222a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
    222e:	bf00      	nop
    2230:	3714      	adds	r7, #20
    2232:	46bd      	mov	sp, r7
    2234:	bd90      	pop	{r4, r7, pc}
    2236:	bf00      	nop
    2238:	00001bf1 	.word	0x00001bf1
    223c:	20001a00 	.word	0x20001a00
    2240:	00001a03 	.word	0x00001a03
    2244:	20000008 	.word	0x20000008

00002248 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
    2250:	6878      	ldr	r0, [r7, #4]
    2252:	4b05      	ldr	r3, [pc, #20]	; (2268 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    2254:	4798      	blx	r3
{
	ptrCOEMClass=this;
    2256:	4a05      	ldr	r2, [pc, #20]	; (226c <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	4618      	mov	r0, r3
    2260:	3708      	adds	r7, #8
    2262:	46bd      	mov	sp, r7
    2264:	bd80      	pop	{r7, pc}
    2266:	bf00      	nop
    2268:	00003985 	.word	0x00003985
    226c:	20001a04 	.word	0x20001a04

00002270 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	6878      	ldr	r0, [r7, #4]
    227a:	4b03      	ldr	r3, [pc, #12]	; (2288 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
    227c:	4798      	blx	r3
{
} //~CO_Emergency_Class
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	4618      	mov	r0, r3
    2282:	3708      	adds	r7, #8
    2284:	46bd      	mov	sp, r7
    2286:	bd80      	pop	{r7, pc}
    2288:	000039ad 	.word	0x000039ad

0000228c <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    228c:	b480      	push	{r7}
    228e:	b087      	sub	sp, #28
    2290:	af00      	add	r7, sp, #0
    2292:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    2294:	2300      	movs	r3, #0
    2296:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	685b      	ldr	r3, [r3, #4]
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	7f5b      	ldrb	r3, [r3, #29]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d017      	beq.n	22de <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    22ae:	693b      	ldr	r3, [r7, #16]
    22b0:	7a5b      	ldrb	r3, [r3, #9]
    22b2:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	7f1b      	ldrb	r3, [r3, #28]
    22b8:	2b00      	cmp	r3, #0
    22ba:	d104      	bne.n	22c6 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	685b      	ldr	r3, [r3, #4]
    22c0:	7bba      	ldrb	r2, [r7, #14]
    22c2:	701a      	strb	r2, [r3, #0]
    22c4:	e01b      	b.n	22fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	7f1b      	ldrb	r3, [r3, #28]
    22ca:	461a      	mov	r2, r3
    22cc:	7bbb      	ldrb	r3, [r7, #14]
    22ce:	429a      	cmp	r2, r3
    22d0:	dd02      	ble.n	22d8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    22d2:	4b0e      	ldr	r3, [pc, #56]	; (230c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    22d4:	617b      	str	r3, [r7, #20]
    22d6:	e012      	b.n	22fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    22d8:	2300      	movs	r3, #0
    22da:	617b      	str	r3, [r7, #20]
    22dc:	e00f      	b.n	22fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	7f1b      	ldrb	r3, [r3, #28]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d109      	bne.n	22fa <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    22e6:	7bfb      	ldrb	r3, [r7, #15]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d103      	bne.n	22f4 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    22ec:	693b      	ldr	r3, [r7, #16]
    22ee:	2200      	movs	r2, #0
    22f0:	725a      	strb	r2, [r3, #9]
    22f2:	e004      	b.n	22fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    22f4:	4b06      	ldr	r3, [pc, #24]	; (2310 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    22f6:	617b      	str	r3, [r7, #20]
    22f8:	e001      	b.n	22fe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    22fa:	4b06      	ldr	r3, [pc, #24]	; (2314 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    22fc:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    22fe:	697b      	ldr	r3, [r7, #20]
}
    2300:	4618      	mov	r0, r3
    2302:	371c      	adds	r7, #28
    2304:	46bd      	mov	sp, r7
    2306:	bc80      	pop	{r7}
    2308:	4770      	bx	lr
    230a:	bf00      	nop
    230c:	08000024 	.word	0x08000024
    2310:	06090030 	.word	0x06090030
    2314:	06010002 	.word	0x06010002

00002318 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    2318:	b580      	push	{r7, lr}
    231a:	b086      	sub	sp, #24
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    2320:	2300      	movs	r3, #0
    2322:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	681b      	ldr	r3, [r3, #0]
    2328:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    232a:	4b0f      	ldr	r3, [pc, #60]	; (2368 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	685b      	ldr	r3, [r3, #4]
    2332:	4619      	mov	r1, r3
    2334:	4610      	mov	r0, r2
    2336:	4b0d      	ldr	r3, [pc, #52]	; (236c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    2338:	4798      	blx	r3
    233a:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	7f5b      	ldrb	r3, [r3, #29]
    2340:	2b00      	cmp	r3, #0
    2342:	d00b      	beq.n	235c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    2344:	4b08      	ldr	r3, [pc, #32]	; (2368 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    2346:	6818      	ldr	r0, [r3, #0]
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	6859      	ldr	r1, [r3, #4]
    234c:	693b      	ldr	r3, [r7, #16]
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	461a      	mov	r2, r3
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	4413      	add	r3, r2
    2356:	461a      	mov	r2, r3
    2358:	4b05      	ldr	r3, [pc, #20]	; (2370 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    235a:	4798      	blx	r3
    }

    return ret;
    235c:	697b      	ldr	r3, [r7, #20]
}
    235e:	4618      	mov	r0, r3
    2360:	3718      	adds	r7, #24
    2362:	46bd      	mov	sp, r7
    2364:	bd80      	pop	{r7, pc}
    2366:	bf00      	nop
    2368:	20001a04 	.word	0x20001a04
    236c:	00003a05 	.word	0x00003a05
    2370:	00003a39 	.word	0x00003a39

00002374 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    2374:	b590      	push	{r4, r7, lr}
    2376:	b089      	sub	sp, #36	; 0x24
    2378:	af02      	add	r7, sp, #8
    237a:	60f8      	str	r0, [r7, #12]
    237c:	60b9      	str	r1, [r7, #8]
    237e:	607a      	str	r2, [r7, #4]
    2380:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    2382:	68bb      	ldr	r3, [r7, #8]
    2384:	2b00      	cmp	r3, #0
    2386:	d015      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	2b00      	cmp	r3, #0
    238c:	d012      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    238e:	683b      	ldr	r3, [r7, #0]
    2390:	2b00      	cmp	r3, #0
    2392:	d00f      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    2394:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2396:	2b00      	cmp	r3, #0
    2398:	d00c      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    239a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    239e:	2b05      	cmp	r3, #5
    23a0:	d908      	bls.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    23a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23a4:	2b00      	cmp	r3, #0
    23a6:	d005      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    23a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23aa:	2b00      	cmp	r3, #0
    23ac:	d002      	beq.n	23b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    23ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23b0:	2b00      	cmp	r3, #0
    23b2:	d102      	bne.n	23ba <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    23b4:	f04f 33ff 	mov.w	r3, #4294967295
    23b8:	e072      	b.n	24a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    23ba:	68bb      	ldr	r3, [r7, #8]
    23bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    23be:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    23c0:	68bb      	ldr	r3, [r7, #8]
    23c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    23c6:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    23c8:	68bb      	ldr	r3, [r7, #8]
    23ca:	3305      	adds	r3, #5
    23cc:	f103 0250 	add.w	r2, r3, #80	; 0x50
    23d0:	68bb      	ldr	r3, [r7, #8]
    23d2:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    23d4:	68bb      	ldr	r3, [r7, #8]
    23d6:	1d5a      	adds	r2, r3, #5
    23d8:	68bb      	ldr	r3, [r7, #8]
    23da:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    23dc:	68bb      	ldr	r3, [r7, #8]
    23de:	1d5a      	adds	r2, r3, #5
    23e0:	68bb      	ldr	r3, [r7, #8]
    23e2:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    23e4:	68bb      	ldr	r3, [r7, #8]
    23e6:	2200      	movs	r2, #0
    23e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    23ec:	68bb      	ldr	r3, [r7, #8]
    23ee:	2200      	movs	r2, #0
    23f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    23f4:	68bb      	ldr	r3, [r7, #8]
    23f6:	2200      	movs	r2, #0
    23f8:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	68ba      	ldr	r2, [r7, #8]
    23fe:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    2400:	687b      	ldr	r3, [r7, #4]
    2402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2404:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    240a:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    2412:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	2200      	movs	r2, #0
    2418:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	2200      	movs	r2, #0
    241e:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    2420:	2300      	movs	r3, #0
    2422:	75fb      	strb	r3, [r7, #23]
    2424:	7dfa      	ldrb	r2, [r7, #23]
    2426:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    242a:	429a      	cmp	r2, r3
    242c:	da09      	bge.n	2442 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    242e:	68bb      	ldr	r3, [r7, #8]
    2430:	681a      	ldr	r2, [r3, #0]
    2432:	7dfb      	ldrb	r3, [r7, #23]
    2434:	4413      	add	r3, r2
    2436:	2200      	movs	r2, #0
    2438:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    243a:	7dfb      	ldrb	r3, [r7, #23]
    243c:	3301      	adds	r3, #1
    243e:	75fb      	strb	r3, [r7, #23]
    2440:	e7f0      	b.n	2424 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    2442:	2300      	movs	r3, #0
    2444:	9301      	str	r3, [sp, #4]
    2446:	2300      	movs	r3, #0
    2448:	9300      	str	r3, [sp, #0]
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	4a16      	ldr	r2, [pc, #88]	; (24a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    244e:	f241 0103 	movw	r1, #4099	; 0x1003
    2452:	68f8      	ldr	r0, [r7, #12]
    2454:	4c15      	ldr	r4, [pc, #84]	; (24ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    2456:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    2458:	683b      	ldr	r3, [r7, #0]
    245a:	f103 0268 	add.w	r2, r3, #104	; 0x68
    245e:	2300      	movs	r3, #0
    2460:	9301      	str	r3, [sp, #4]
    2462:	2300      	movs	r3, #0
    2464:	9300      	str	r3, [sp, #0]
    2466:	4613      	mov	r3, r2
    2468:	4a11      	ldr	r2, [pc, #68]	; (24b0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    246a:	f241 0114 	movw	r1, #4116	; 0x1014
    246e:	68f8      	ldr	r0, [r7, #12]
    2470:	4c0e      	ldr	r4, [pc, #56]	; (24ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    2472:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    2474:	687b      	ldr	r3, [r7, #4]
    2476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2478:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	695b      	ldr	r3, [r3, #20]
    247e:	68ba      	ldr	r2, [r7, #8]
    2480:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
    2482:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    2484:	6818      	ldr	r0, [r3, #0]
    2486:	2300      	movs	r3, #0
    2488:	9301      	str	r3, [sp, #4]
    248a:	2308      	movs	r3, #8
    248c:	9300      	str	r3, [sp, #0]
    248e:	2300      	movs	r3, #0
    2490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2492:	6c39      	ldr	r1, [r7, #64]	; 0x40
    2494:	4c08      	ldr	r4, [pc, #32]	; (24b8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    2496:	47a0      	blx	r4
    2498:	4602      	mov	r2, r0
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    249e:	2300      	movs	r3, #0
}
    24a0:	4618      	mov	r0, r3
    24a2:	371c      	adds	r7, #28
    24a4:	46bd      	mov	sp, r7
    24a6:	bd90      	pop	{r4, r7, pc}
    24a8:	0000228d 	.word	0x0000228d
    24ac:	00003e59 	.word	0x00003e59
    24b0:	00002319 	.word	0x00002319
    24b4:	20001a00 	.word	0x20001a00
    24b8:	00001f2d 	.word	0x00001f2d

000024bc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    24bc:	b590      	push	{r4, r7, lr}
    24be:	b08d      	sub	sp, #52	; 0x34
    24c0:	af00      	add	r7, sp, #0
    24c2:	60f8      	str	r0, [r7, #12]
    24c4:	60b9      	str	r1, [r7, #8]
    24c6:	603b      	str	r3, [r7, #0]
    24c8:	4613      	mov	r3, r2
    24ca:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    24cc:	79fb      	ldrb	r3, [r7, #7]
    24ce:	10db      	asrs	r3, r3, #3
    24d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    24d4:	79fb      	ldrb	r3, [r7, #7]
    24d6:	f003 0307 	and.w	r3, r3, #7
    24da:	2201      	movs	r2, #1
    24dc:	fa02 f303 	lsl.w	r3, r2, r3
    24e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    24e4:	2300      	movs	r3, #0
    24e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    24e8:	2301      	movs	r3, #1
    24ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    24ee:	68bb      	ldr	r3, [r7, #8]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d103      	bne.n	24fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    24f4:	2300      	movs	r3, #0
    24f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    24fa:	e01e      	b.n	253a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    24fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2500:	68ba      	ldr	r2, [r7, #8]
    2502:	7912      	ldrb	r2, [r2, #4]
    2504:	4293      	cmp	r3, r2
    2506:	db07      	blt.n	2518 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    2508:	68bb      	ldr	r3, [r7, #8]
    250a:	79fa      	ldrb	r2, [r7, #7]
    250c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    2510:	2300      	movs	r3, #0
    2512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    2516:	e010      	b.n	253a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    2518:	68bb      	ldr	r3, [r7, #8]
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2520:	4413      	add	r3, r2
    2522:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    2524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2526:	781a      	ldrb	r2, [r3, #0]
    2528:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    252c:	4013      	ands	r3, r2
    252e:	b2db      	uxtb	r3, r3
    2530:	2b00      	cmp	r3, #0
    2532:	d002      	beq.n	253a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    2534:	2300      	movs	r3, #0
    2536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    253a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    253e:	2b00      	cmp	r3, #0
    2540:	d05c      	beq.n	25fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    2542:	79fb      	ldrb	r3, [r7, #7]
    2544:	2b00      	cmp	r3, #0
    2546:	d007      	beq.n	2558 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    2548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    254a:	781a      	ldrb	r2, [r3, #0]
    254c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2550:	4313      	orrs	r3, r2
    2552:	b2da      	uxtb	r2, r3
    2554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2556:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    2558:	68bb      	ldr	r3, [r7, #8]
    255a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    255e:	2b00      	cmp	r3, #0
    2560:	d004      	beq.n	256c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    2562:	68bb      	ldr	r3, [r7, #8]
    2564:	2202      	movs	r2, #2
    2566:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    256a:	e047      	b.n	25fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    256c:	463a      	mov	r2, r7
    256e:	f107 0318 	add.w	r3, r7, #24
    2572:	4619      	mov	r1, r3
    2574:	68f8      	ldr	r0, [r7, #12]
    2576:	4b23      	ldr	r3, [pc, #140]	; (2604 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    2578:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    257a:	2300      	movs	r3, #0
    257c:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    257e:	79fb      	ldrb	r3, [r7, #7]
    2580:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    2582:	f107 0318 	add.w	r3, r7, #24
    2586:	3304      	adds	r3, #4
    2588:	f107 0240 	add.w	r2, r7, #64	; 0x40
    258c:	4619      	mov	r1, r3
    258e:	68f8      	ldr	r0, [r7, #12]
    2590:	4b1d      	ldr	r3, [pc, #116]	; (2608 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    2592:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2594:	f3ef 8310 	mrs	r3, PRIMASK
    2598:	617b      	str	r3, [r7, #20]
  return(result);
    259a:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    259c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    259e:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    25a0:	68bb      	ldr	r3, [r7, #8]
    25a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    25a4:	f107 0218 	add.w	r2, r7, #24
    25a8:	2308      	movs	r3, #8
    25aa:	68f8      	ldr	r0, [r7, #12]
    25ac:	4c17      	ldr	r4, [pc, #92]	; (260c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    25ae:	47a0      	blx	r4
            em->bufWritePtr += 8;
    25b0:	68bb      	ldr	r3, [r7, #8]
    25b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    25b4:	f103 0208 	add.w	r2, r3, #8
    25b8:	68bb      	ldr	r3, [r7, #8]
    25ba:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    25bc:	68bb      	ldr	r3, [r7, #8]
    25be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    25c0:	68bb      	ldr	r3, [r7, #8]
    25c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    25c4:	429a      	cmp	r2, r3
    25c6:	d103      	bne.n	25d0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    25c8:	68bb      	ldr	r3, [r7, #8]
    25ca:	1d5a      	adds	r2, r3, #5
    25cc:	68bb      	ldr	r3, [r7, #8]
    25ce:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    25d0:	68bb      	ldr	r3, [r7, #8]
    25d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    25d4:	68bb      	ldr	r3, [r7, #8]
    25d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    25d8:	429a      	cmp	r2, r3
    25da:	d103      	bne.n	25e4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    25dc:	68bb      	ldr	r3, [r7, #8]
    25de:	2201      	movs	r2, #1
    25e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    25e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    25e8:	6a3b      	ldr	r3, [r7, #32]
    25ea:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    25ee:	68bb      	ldr	r3, [r7, #8]
    25f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    25f2:	2b00      	cmp	r3, #0
    25f4:	d002      	beq.n	25fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    25f6:	68bb      	ldr	r3, [r7, #8]
    25f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    25fa:	4798      	blx	r3
}
    25fc:	bf00      	nop
    25fe:	3734      	adds	r7, #52	; 0x34
    2600:	46bd      	mov	sp, r7
    2602:	bd90      	pop	{r4, r7, pc}
    2604:	00003a71 	.word	0x00003a71
    2608:	00003aa1 	.word	0x00003aa1
    260c:	000039c9 	.word	0x000039c9

00002610 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "string.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    2610:	b480      	push	{r7}
    2612:	b085      	sub	sp, #20
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7d1b      	ldrb	r3, [r3, #20]
    2622:	2b01      	cmp	r3, #1
    2624:	d106      	bne.n	2634 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	7d5a      	ldrb	r2, [r3, #21]
    262a:	68fb      	ldr	r3, [r7, #12]
    262c:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    262e:	68fb      	ldr	r3, [r7, #12]
    2630:	2201      	movs	r2, #1
    2632:	731a      	strb	r2, [r3, #12]
	}
	
	
	
}
    2634:	bf00      	nop
    2636:	3714      	adds	r7, #20
    2638:	46bd      	mov	sp, r7
    263a:	bc80      	pop	{r7}
    263c:	4770      	bx	lr
	...

00002640 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    2640:	b590      	push	{r4, r7, lr}
    2642:	b08d      	sub	sp, #52	; 0x34
    2644:	af04      	add	r7, sp, #16
    2646:	60f8      	str	r0, [r7, #12]
    2648:	460b      	mov	r3, r1
    264a:	607a      	str	r2, [r7, #4]
    264c:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    264e:	7afb      	ldrb	r3, [r7, #11]
    2650:	461a      	mov	r2, r3
    2652:	68fb      	ldr	r3, [r7, #12]
    2654:	7b1b      	ldrb	r3, [r3, #12]
    2656:	429a      	cmp	r2, r3
    2658:	da37      	bge.n	26ca <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
    265a:	7afb      	ldrb	r3, [r7, #11]
    265c:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	689a      	ldr	r2, [r3, #8]
    2662:	7afb      	ldrb	r3, [r7, #11]
    2664:	011b      	lsls	r3, r3, #4
    2666:	4413      	add	r3, r2
    2668:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    266a:	697b      	ldr	r3, [r7, #20]
    266c:	687a      	ldr	r2, [r7, #4]
    266e:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    2670:	697b      	ldr	r3, [r7, #20]
    2672:	2200      	movs	r2, #0
    2674:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    2676:	697b      	ldr	r3, [r7, #20]
    2678:	2200      	movs	r2, #0
    267a:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
    267c:	69bb      	ldr	r3, [r7, #24]
    267e:	2b00      	cmp	r3, #0
    2680:	d008      	beq.n	2694 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
    2682:	697b      	ldr	r3, [r7, #20]
    2684:	689b      	ldr	r3, [r3, #8]
    2686:	2b00      	cmp	r3, #0
    2688:	d004      	beq.n	2694 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
    268a:	69bb      	ldr	r3, [r7, #24]
    268c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    2690:	61fb      	str	r3, [r7, #28]
    2692:	e004      	b.n	269e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
    2694:	2300      	movs	r3, #0
    2696:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    2698:	697b      	ldr	r3, [r7, #20]
    269a:	2200      	movs	r2, #0
    269c:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
    269e:	4b0d      	ldr	r3, [pc, #52]	; (26d4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    26a0:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    26a2:	68fb      	ldr	r3, [r7, #12]
    26a4:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
    26a6:	7afa      	ldrb	r2, [r7, #11]
    26a8:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    26aa:	68fb      	ldr	r3, [r7, #12]
    26ac:	689a      	ldr	r2, [r3, #8]
    26ae:	7afb      	ldrb	r3, [r7, #11]
    26b0:	011b      	lsls	r3, r3, #4
    26b2:	4413      	add	r3, r2
	CO_HBcons_receive);
    26b4:	4a08      	ldr	r2, [pc, #32]	; (26d8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    26b6:	9202      	str	r2, [sp, #8]
    26b8:	9301      	str	r3, [sp, #4]
    26ba:	2300      	movs	r3, #0
    26bc:	9300      	str	r3, [sp, #0]
    26be:	f240 73ff 	movw	r3, #2047	; 0x7ff
    26c2:	69fa      	ldr	r2, [r7, #28]
    26c4:	4c05      	ldr	r4, [pc, #20]	; (26dc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    26c6:	47a0      	blx	r4
    26c8:	e000      	b.n	26cc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    26ca:	bf00      	nop
}
    26cc:	3724      	adds	r7, #36	; 0x24
    26ce:	46bd      	mov	sp, r7
    26d0:	bd90      	pop	{r4, r7, pc}
    26d2:	bf00      	nop
    26d4:	20001a00 	.word	0x20001a00
    26d8:	00002611 	.word	0x00002611
    26dc:	00001e2d 	.word	0x00001e2d

000026e0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    26e0:	b580      	push	{r7, lr}
    26e2:	b08c      	sub	sp, #48	; 0x30
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    26e8:	2300      	movs	r3, #0
    26ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	681b      	ldr	r3, [r3, #0]
    26f0:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
    26f2:	4b32      	ldr	r3, [pc, #200]	; (27bc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	1d1a      	adds	r2, r3, #4
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	685b      	ldr	r3, [r3, #4]
    26fc:	4619      	mov	r1, r3
    26fe:	4610      	mov	r0, r2
    2700:	4b2f      	ldr	r3, [pc, #188]	; (27c0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    2702:	4798      	blx	r3
    2704:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	7f5b      	ldrb	r3, [r3, #29]
    270a:	2b00      	cmp	r3, #0
    270c:	d150      	bne.n	27b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    270e:	6a3b      	ldr	r3, [r7, #32]
    2710:	0c1b      	lsrs	r3, r3, #16
    2712:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    2714:	6a3b      	ldr	r3, [r7, #32]
    2716:	b29b      	uxth	r3, r3
    2718:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    271a:	6a3b      	ldr	r3, [r7, #32]
    271c:	0ddb      	lsrs	r3, r3, #23
    271e:	05db      	lsls	r3, r3, #23
    2720:	2b00      	cmp	r3, #0
    2722:	d002      	beq.n	272a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    2724:	4b27      	ldr	r3, [pc, #156]	; (27c4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2726:	62fb      	str	r3, [r7, #44]	; 0x2c
    2728:	e036      	b.n	2798 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    272a:	69bb      	ldr	r3, [r7, #24]
    272c:	2b00      	cmp	r3, #0
    272e:	d02f      	beq.n	2790 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    2730:	7ffb      	ldrb	r3, [r7, #31]
    2732:	2b00      	cmp	r3, #0
    2734:	d02c      	beq.n	2790 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2736:	2300      	movs	r3, #0
    2738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    273c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2742:	7b12      	ldrb	r2, [r2, #12]
    2744:	4293      	cmp	r3, r2
    2746:	da26      	bge.n	2796 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    2748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    274a:	685a      	ldr	r2, [r3, #4]
    274c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2750:	009b      	lsls	r3, r3, #2
    2752:	4413      	add	r3, r2
    2754:	681b      	ldr	r3, [r3, #0]
    2756:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    2758:	697b      	ldr	r3, [r7, #20]
    275a:	0c1b      	lsrs	r3, r3, #16
    275c:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    275e:	697b      	ldr	r3, [r7, #20]
    2760:	b29b      	uxth	r3, r3
    2762:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	7f1b      	ldrb	r3, [r3, #28]
    2768:	1e5a      	subs	r2, r3, #1
    276a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    276e:	429a      	cmp	r2, r3
    2770:	d008      	beq.n	2784 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	2b00      	cmp	r3, #0
    2776:	d005      	beq.n	2784 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    2778:	7ffa      	ldrb	r2, [r7, #31]
    277a:	7cfb      	ldrb	r3, [r7, #19]
    277c:	429a      	cmp	r2, r3
    277e:	d101      	bne.n	2784 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    2780:	4b10      	ldr	r3, [pc, #64]	; (27c4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    2782:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    2784:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2788:	3301      	adds	r3, #1
    278a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    278e:	e7d5      	b.n	273c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    2790:	2300      	movs	r3, #0
    2792:	62fb      	str	r3, [r7, #44]	; 0x2c
    2794:	e000      	b.n	2798 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    2796:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    2798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    279a:	2b00      	cmp	r3, #0
    279c:	d108      	bne.n	27b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	7f1b      	ldrb	r3, [r3, #28]
    27a2:	3b01      	subs	r3, #1
    27a4:	b2db      	uxtb	r3, r3
    27a6:	6a3a      	ldr	r2, [r7, #32]
    27a8:	4619      	mov	r1, r3
    27aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    27ac:	4b06      	ldr	r3, [pc, #24]	; (27c8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    27ae:	4798      	blx	r3
		}
	}

	return ret;
    27b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    27b2:	4618      	mov	r0, r3
    27b4:	3730      	adds	r7, #48	; 0x30
    27b6:	46bd      	mov	sp, r7
    27b8:	bd80      	pop	{r7, pc}
    27ba:	bf00      	nop
    27bc:	20001a00 	.word	0x20001a00
    27c0:	00003a05 	.word	0x00003a05
    27c4:	06040043 	.word	0x06040043
    27c8:	00002641 	.word	0x00002641

000027cc <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    27cc:	b480      	push	{r7}
    27ce:	b083      	sub	sp, #12
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
    27d4:	4a04      	ldr	r2, [pc, #16]	; (27e8 <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	4618      	mov	r0, r3
    27de:	370c      	adds	r7, #12
    27e0:	46bd      	mov	sp, r7
    27e2:	bc80      	pop	{r7}
    27e4:	4770      	bx	lr
    27e6:	bf00      	nop
    27e8:	20001a08 	.word	0x20001a08

000027ec <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    27ec:	b480      	push	{r7}
    27ee:	b083      	sub	sp, #12
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	4618      	mov	r0, r3
    27f8:	370c      	adds	r7, #12
    27fa:	46bd      	mov	sp, r7
    27fc:	bc80      	pop	{r7}
    27fe:	4770      	bx	lr

00002800 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    2800:	b590      	push	{r4, r7, lr}
    2802:	b089      	sub	sp, #36	; 0x24
    2804:	af02      	add	r7, sp, #8
    2806:	60f8      	str	r0, [r7, #12]
    2808:	60b9      	str	r1, [r7, #8]
    280a:	607a      	str	r2, [r7, #4]
    280c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
    280e:	4a2b      	ldr	r2, [pc, #172]	; (28bc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    2810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2812:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    2814:	68bb      	ldr	r3, [r7, #8]
    2816:	2b00      	cmp	r3, #0
    2818:	d00e      	beq.n	2838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	2b00      	cmp	r3, #0
    281e:	d00b      	beq.n	2838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2820:	683b      	ldr	r3, [r7, #0]
    2822:	2b00      	cmp	r3, #0
    2824:	d008      	beq.n	2838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    2826:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2828:	2b00      	cmp	r3, #0
    282a:	d005      	beq.n	2838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    282e:	2b00      	cmp	r3, #0
    2830:	d002      	beq.n	2838 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
    2832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2834:	2b00      	cmp	r3, #0
    2836:	d102      	bne.n	283e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    2838:	f04f 33ff 	mov.w	r3, #4294967295
    283c:	e039      	b.n	28b2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
    283e:	68bb      	ldr	r3, [r7, #8]
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    2844:	68bb      	ldr	r3, [r7, #8]
    2846:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2848:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    284a:	68bb      	ldr	r3, [r7, #8]
    284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    284e:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    2850:	68bb      	ldr	r3, [r7, #8]
    2852:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    2856:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    2858:	68bb      	ldr	r3, [r7, #8]
    285a:	2200      	movs	r2, #0
    285c:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    285e:	68bb      	ldr	r3, [r7, #8]
    2860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2862:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    2864:	68bb      	ldr	r3, [r7, #8]
    2866:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2868:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    286a:	2300      	movs	r3, #0
    286c:	75fb      	strb	r3, [r7, #23]
    286e:	7dfb      	ldrb	r3, [r7, #23]
    2870:	68ba      	ldr	r2, [r7, #8]
    2872:	7b12      	ldrb	r2, [r2, #12]
    2874:	4293      	cmp	r3, r2
    2876:	da0e      	bge.n	2896 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    2878:	68bb      	ldr	r3, [r7, #8]
    287a:	685a      	ldr	r2, [r3, #4]
    287c:	7dfb      	ldrb	r3, [r7, #23]
    287e:	009b      	lsls	r3, r3, #2
    2880:	4413      	add	r3, r2
    2882:	681a      	ldr	r2, [r3, #0]
    2884:	7dfb      	ldrb	r3, [r7, #23]
    2886:	4619      	mov	r1, r3
    2888:	68b8      	ldr	r0, [r7, #8]
    288a:	4b0d      	ldr	r3, [pc, #52]	; (28c0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    288c:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    288e:	7dfb      	ldrb	r3, [r7, #23]
    2890:	3301      	adds	r3, #1
    2892:	75fb      	strb	r3, [r7, #23]
    2894:	e7eb      	b.n	286e <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    2896:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	1d18      	adds	r0, r3, #4
    289c:	2300      	movs	r3, #0
    289e:	9301      	str	r3, [sp, #4]
    28a0:	2300      	movs	r3, #0
    28a2:	9300      	str	r3, [sp, #0]
    28a4:	68bb      	ldr	r3, [r7, #8]
    28a6:	4a08      	ldr	r2, [pc, #32]	; (28c8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
    28a8:	f241 0116 	movw	r1, #4118	; 0x1016
    28ac:	4c07      	ldr	r4, [pc, #28]	; (28cc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
    28ae:	47a0      	blx	r4

	return CO_ERROR_NO;
    28b0:	2300      	movs	r3, #0
}
    28b2:	4618      	mov	r0, r3
    28b4:	371c      	adds	r7, #28
    28b6:	46bd      	mov	sp, r7
    28b8:	bd90      	pop	{r4, r7, pc}
    28ba:	bf00      	nop
    28bc:	20001a0c 	.word	0x20001a0c
    28c0:	00002641 	.word	0x00002641
    28c4:	20001a00 	.word	0x20001a00
    28c8:	000026e1 	.word	0x000026e1
    28cc:	00003e59 	.word	0x00003e59

000028d0 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    28d0:	b480      	push	{r7}
    28d2:	b083      	sub	sp, #12
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
    28d8:	460b      	mov	r3, r1
    28da:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	78fa      	ldrb	r2, [r7, #3]
    28e0:	711a      	strb	r2, [r3, #4]
}
    28e2:	bf00      	nop
    28e4:	370c      	adds	r7, #12
    28e6:	46bd      	mov	sp, r7
    28e8:	bc80      	pop	{r7}
    28ea:	4770      	bx	lr

000028ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    28ec:	b580      	push	{r7, lr}
    28ee:	b084      	sub	sp, #16
    28f0:	af00      	add	r7, sp, #0
    28f2:	6078      	str	r0, [r7, #4]
    28f4:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    28fa:	683b      	ldr	r3, [r7, #0]
    28fc:	7d9b      	ldrb	r3, [r3, #22]
    28fe:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    2900:	683b      	ldr	r3, [r7, #0]
    2902:	7d1b      	ldrb	r3, [r3, #20]
    2904:	2b02      	cmp	r3, #2
    2906:	d146      	bne.n	2996 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2908:	7afb      	ldrb	r3, [r7, #11]
    290a:	2b00      	cmp	r3, #0
    290c:	d004      	beq.n	2918 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    290e:	68fb      	ldr	r3, [r7, #12]
    2910:	7a9b      	ldrb	r3, [r3, #10]
    2912:	7afa      	ldrb	r2, [r7, #11]
    2914:	429a      	cmp	r2, r3
    2916:	d13e      	bne.n	2996 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    2918:	683b      	ldr	r3, [r7, #0]
    291a:	7d5b      	ldrb	r3, [r3, #21]
    291c:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	727b      	strb	r3, [r7, #9]

        switch(command){
    2924:	7abb      	ldrb	r3, [r7, #10]
    2926:	2b80      	cmp	r3, #128	; 0x80
    2928:	d019      	beq.n	295e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    292a:	2b80      	cmp	r3, #128	; 0x80
    292c:	dc04      	bgt.n	2938 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    292e:	2b01      	cmp	r3, #1
    2930:	d007      	beq.n	2942 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    2932:	2b02      	cmp	r3, #2
    2934:	d00f      	beq.n	2956 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    2936:	e01f      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    2938:	2b81      	cmp	r3, #129	; 0x81
    293a:	d014      	beq.n	2966 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    293c:	2b82      	cmp	r3, #130	; 0x82
    293e:	d016      	beq.n	296e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    2940:	e01a      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	695b      	ldr	r3, [r3, #20]
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	2b00      	cmp	r3, #0
    294c:	d113      	bne.n	2976 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	2205      	movs	r2, #5
    2952:	701a      	strb	r2, [r3, #0]
                }
                break;
    2954:	e00f      	b.n	2976 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    2956:	68fb      	ldr	r3, [r7, #12]
    2958:	2204      	movs	r2, #4
    295a:	701a      	strb	r2, [r3, #0]
                break;
    295c:	e00c      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    295e:	68fb      	ldr	r3, [r7, #12]
    2960:	227f      	movs	r2, #127	; 0x7f
    2962:	701a      	strb	r2, [r3, #0]
                break;
    2964:	e008      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    2966:	68fb      	ldr	r3, [r7, #12]
    2968:	2202      	movs	r2, #2
    296a:	725a      	strb	r2, [r3, #9]
                break;
    296c:	e004      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    296e:	68fb      	ldr	r3, [r7, #12]
    2970:	2201      	movs	r2, #1
    2972:	725a      	strb	r2, [r3, #9]
                break;
    2974:	e000      	b.n	2978 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    2976:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	69db      	ldr	r3, [r3, #28]
    297c:	2b00      	cmp	r3, #0
    297e:	d00a      	beq.n	2996 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	7a7a      	ldrb	r2, [r7, #9]
    2986:	429a      	cmp	r2, r3
    2988:	d005      	beq.n	2996 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    298a:	68fb      	ldr	r3, [r7, #12]
    298c:	69db      	ldr	r3, [r3, #28]
    298e:	68fa      	ldr	r2, [r7, #12]
    2990:	7812      	ldrb	r2, [r2, #0]
    2992:	4610      	mov	r0, r2
    2994:	4798      	blx	r3
        }
    }
}
    2996:	bf00      	nop
    2998:	3710      	adds	r7, #16
    299a:	46bd      	mov	sp, r7
    299c:	bd80      	pop	{r7, pc}

0000299e <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    299e:	b480      	push	{r7}
    29a0:	b083      	sub	sp, #12
    29a2:	af00      	add	r7, sp, #0
    29a4:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	4618      	mov	r0, r3
    29aa:	370c      	adds	r7, #12
    29ac:	46bd      	mov	sp, r7
    29ae:	bc80      	pop	{r7}
    29b0:	4770      	bx	lr

000029b2 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    29b2:	b480      	push	{r7}
    29b4:	b083      	sub	sp, #12
    29b6:	af00      	add	r7, sp, #0
    29b8:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    29ba:	687b      	ldr	r3, [r7, #4]
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	bc80      	pop	{r7}
    29c4:	4770      	bx	lr
	...

000029c8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    29c8:	b5b0      	push	{r4, r5, r7, lr}
    29ca:	b088      	sub	sp, #32
    29cc:	af04      	add	r7, sp, #16
    29ce:	60f8      	str	r0, [r7, #12]
    29d0:	60b9      	str	r1, [r7, #8]
    29d2:	607a      	str	r2, [r7, #4]
    29d4:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    29d6:	68bb      	ldr	r3, [r7, #8]
    29d8:	2b00      	cmp	r3, #0
    29da:	d008      	beq.n	29ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	2b00      	cmp	r3, #0
    29e0:	d005      	beq.n	29ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    29e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29e4:	2b00      	cmp	r3, #0
    29e6:	d002      	beq.n	29ee <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    29e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    29ea:	2b00      	cmp	r3, #0
    29ec:	d102      	bne.n	29f4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    29ee:	f04f 33ff 	mov.w	r3, #4294967295
    29f2:	e062      	b.n	2aba <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    29f4:	4a33      	ldr	r2, [pc, #204]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    29f6:	68bb      	ldr	r3, [r7, #8]
    29f8:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    29fa:	4b32      	ldr	r3, [pc, #200]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	2200      	movs	r2, #0
    2a00:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    2a02:	4b30      	ldr	r3, [pc, #192]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	2200      	movs	r2, #0
    2a08:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    2a0a:	4b2e      	ldr	r3, [pc, #184]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	2200      	movs	r2, #0
    2a10:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    2a12:	4b2c      	ldr	r3, [pc, #176]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	2200      	movs	r2, #0
    2a18:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    2a1a:	4b2a      	ldr	r3, [pc, #168]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	2200      	movs	r2, #0
    2a20:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    2a22:	4b28      	ldr	r3, [pc, #160]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	2200      	movs	r2, #0
    2a28:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    2a2a:	4b26      	ldr	r3, [pc, #152]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a2c:	681b      	ldr	r3, [r3, #0]
    2a2e:	2200      	movs	r2, #0
    2a30:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    2a32:	4b24      	ldr	r3, [pc, #144]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	22ff      	movs	r2, #255	; 0xff
    2a38:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    2a3a:	4b22      	ldr	r3, [pc, #136]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	2201      	movs	r2, #1
    2a40:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    2a42:	4b20      	ldr	r3, [pc, #128]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	78fa      	ldrb	r2, [r7, #3]
    2a48:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    2a4a:	4b1e      	ldr	r3, [pc, #120]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	6a3a      	ldr	r2, [r7, #32]
    2a50:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    2a52:	4b1c      	ldr	r3, [pc, #112]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	2200      	movs	r2, #0
    2a58:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    2a5a:	4b1a      	ldr	r3, [pc, #104]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a62:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    2a64:	4b17      	ldr	r3, [pc, #92]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    2a6c:	4b15      	ldr	r3, [pc, #84]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	2200      	movs	r2, #0
    2a72:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
    2a74:	4b14      	ldr	r3, [pc, #80]	; (2ac8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    2a76:	6818      	ldr	r0, [r3, #0]
    2a78:	4b12      	ldr	r3, [pc, #72]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a7a:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
    2a7c:	4a13      	ldr	r2, [pc, #76]	; (2acc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    2a7e:	9202      	str	r2, [sp, #8]
    2a80:	9301      	str	r3, [sp, #4]
    2a82:	2300      	movs	r3, #0
    2a84:	9300      	str	r3, [sp, #0]
    2a86:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2a8e:	4c10      	ldr	r4, [pc, #64]	; (2ad0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    2a90:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    2a92:	4b0c      	ldr	r3, [pc, #48]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a94:	681b      	ldr	r3, [r3, #0]
    2a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2a98:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
    2a9a:	4b0a      	ldr	r3, [pc, #40]	; (2ac4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    2a9c:	681c      	ldr	r4, [r3, #0]
    2a9e:	4b0a      	ldr	r3, [pc, #40]	; (2ac8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    2aa0:	6818      	ldr	r0, [r3, #0]
    2aa2:	2300      	movs	r3, #0
    2aa4:	9301      	str	r3, [sp, #4]
    2aa6:	2301      	movs	r3, #1
    2aa8:	9300      	str	r3, [sp, #0]
    2aaa:	2300      	movs	r3, #0
    2aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2ab0:	4d08      	ldr	r5, [pc, #32]	; (2ad4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
    2ab2:	47a8      	blx	r5
    2ab4:	4603      	mov	r3, r0
    2ab6:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    2ab8:	2300      	movs	r3, #0
}
    2aba:	4618      	mov	r0, r3
    2abc:	3710      	adds	r7, #16
    2abe:	46bd      	mov	sp, r7
    2ac0:	bdb0      	pop	{r4, r5, r7, pc}
    2ac2:	bf00      	nop
    2ac4:	20001a10 	.word	0x20001a10
    2ac8:	20001a00 	.word	0x20001a00
    2acc:	000028ed 	.word	0x000028ed
    2ad0:	00001e2d 	.word	0x00001e2d
    2ad4:	00001f2d 	.word	0x00001f2d

00002ad8 <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
    2ad8:	b480      	push	{r7}
    2ada:	b083      	sub	sp, #12
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
{
} //CO_OD
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	4618      	mov	r0, r3
    2ae4:	370c      	adds	r7, #12
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bc80      	pop	{r7}
    2aea:	4770      	bx	lr

00002aec <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
    2aec:	b480      	push	{r7}
    2aee:	b083      	sub	sp, #12
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	4618      	mov	r0, r3
    2af8:	370c      	adds	r7, #12
    2afa:	46bd      	mov	sp, r7
    2afc:	bc80      	pop	{r7}
    2afe:	4770      	bx	lr

00002b00 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
    2b00:	b480      	push	{r7}
    2b02:	b083      	sub	sp, #12
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	4618      	mov	r0, r3
    2b0c:	370c      	adds	r7, #12
    2b0e:	46bd      	mov	sp, r7
    2b10:	bc80      	pop	{r7}
    2b12:	4770      	bx	lr

00002b14 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    2b14:	b480      	push	{r7}
    2b16:	b083      	sub	sp, #12
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	4618      	mov	r0, r3
    2b20:	370c      	adds	r7, #12
    2b22:	46bd      	mov	sp, r7
    2b24:	bc80      	pop	{r7}
    2b26:	4770      	bx	lr

00002b28 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    2b28:	b580      	push	{r7, lr}
    2b2a:	b084      	sub	sp, #16
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
    2b30:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    2b36:	68fb      	ldr	r3, [r7, #12]
    2b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d076      	beq.n	2c2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2b40:	68fb      	ldr	r3, [r7, #12]
    2b42:	695b      	ldr	r3, [r3, #20]
    2b44:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    2b46:	2b05      	cmp	r3, #5
    2b48:	d171      	bne.n	2c2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	7d1b      	ldrb	r3, [r3, #20]
    2b4e:	461a      	mov	r2, r3
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    2b56:	429a      	cmp	r2, r3
    2b58:	db69      	blt.n	2c2e <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    2b60:	2b00      	cmp	r3, #0
    2b62:	d031      	beq.n	2bc8 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
    2b64:	68fb      	ldr	r3, [r7, #12]
    2b66:	689b      	ldr	r3, [r3, #8]
    2b68:	7edb      	ldrb	r3, [r3, #27]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d02c      	beq.n	2bc8 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    2b6e:	683b      	ldr	r3, [r7, #0]
    2b70:	7d5a      	ldrb	r2, [r3, #21]
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    2b78:	683b      	ldr	r3, [r7, #0]
    2b7a:	7d9a      	ldrb	r2, [r3, #22]
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    2b82:	683b      	ldr	r3, [r7, #0]
    2b84:	7dda      	ldrb	r2, [r3, #23]
    2b86:	68fb      	ldr	r3, [r7, #12]
    2b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    2b8c:	683b      	ldr	r3, [r7, #0]
    2b8e:	7e1a      	ldrb	r2, [r3, #24]
    2b90:	68fb      	ldr	r3, [r7, #12]
    2b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    2b96:	683b      	ldr	r3, [r7, #0]
    2b98:	7e5a      	ldrb	r2, [r3, #25]
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    2ba0:	683b      	ldr	r3, [r7, #0]
    2ba2:	7e9a      	ldrb	r2, [r3, #26]
    2ba4:	68fb      	ldr	r3, [r7, #12]
    2ba6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    2baa:	683b      	ldr	r3, [r7, #0]
    2bac:	7eda      	ldrb	r2, [r3, #27]
    2bae:	68fb      	ldr	r3, [r7, #12]
    2bb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    2bb4:	683b      	ldr	r3, [r7, #0]
    2bb6:	7f1a      	ldrb	r2, [r3, #28]
    2bb8:	68fb      	ldr	r3, [r7, #12]
    2bba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	2201      	movs	r2, #1
    2bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2bc6:	e02b      	b.n	2c20 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
    2bc8:	683b      	ldr	r3, [r7, #0]
    2bca:	7d5a      	ldrb	r2, [r3, #21]
    2bcc:	68fb      	ldr	r3, [r7, #12]
    2bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	7d9a      	ldrb	r2, [r3, #22]
    2bd6:	68fb      	ldr	r3, [r7, #12]
    2bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    2bdc:	683b      	ldr	r3, [r7, #0]
    2bde:	7dda      	ldrb	r2, [r3, #23]
    2be0:	68fb      	ldr	r3, [r7, #12]
    2be2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	7e1a      	ldrb	r2, [r3, #24]
    2bea:	68fb      	ldr	r3, [r7, #12]
    2bec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	7e5a      	ldrb	r2, [r3, #25]
    2bf4:	68fb      	ldr	r3, [r7, #12]
    2bf6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	7e9a      	ldrb	r2, [r3, #26]
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	7eda      	ldrb	r2, [r3, #27]
    2c08:	68fb      	ldr	r3, [r7, #12]
    2c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    2c0e:	683b      	ldr	r3, [r7, #0]
    2c10:	7f1a      	ldrb	r2, [r3, #28]
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
    2c18:	68fb      	ldr	r3, [r7, #12]
    2c1a:	2201      	movs	r2, #1
    2c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
    2c20:	683b      	ldr	r3, [r7, #0]
    2c22:	3315      	adds	r3, #21
    2c24:	2208      	movs	r2, #8
    2c26:	4619      	mov	r1, r3
    2c28:	4803      	ldr	r0, [pc, #12]	; (2c38 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
    2c2a:	4b04      	ldr	r3, [pc, #16]	; (2c3c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
    2c2c:	4798      	blx	r3
    }
}
    2c2e:	bf00      	nop
    2c30:	3710      	adds	r7, #16
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop
    2c38:	20001a29 	.word	0x20001a29
    2c3c:	00011c19 	.word	0x00011c19

00002c40 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    2c40:	b590      	push	{r4, r7, lr}
    2c42:	b089      	sub	sp, #36	; 0x24
    2c44:	af04      	add	r7, sp, #16
    2c46:	6078      	str	r0, [r7, #4]
    2c48:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    2c4a:	683b      	ldr	r3, [r7, #0]
    2c4c:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    2c4e:	683a      	ldr	r2, [r7, #0]
    2c50:	4b2d      	ldr	r3, [pc, #180]	; (2d08 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    2c52:	4013      	ands	r3, r2
    2c54:	2b00      	cmp	r3, #0
    2c56:	d123      	bne.n	2ca0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d01e      	beq.n	2ca0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    2c62:	68fb      	ldr	r3, [r7, #12]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d01b      	beq.n	2ca0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	69da      	ldr	r2, [r3, #28]
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	429a      	cmp	r2, r3
    2c70:	d105      	bne.n	2c7e <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	7e1b      	ldrb	r3, [r3, #24]
    2c76:	461a      	mov	r2, r3
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	4413      	add	r3, r2
    2c7c:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	2201      	movs	r2, #1
    2c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	68db      	ldr	r3, [r3, #12]
    2c8a:	7a1b      	ldrb	r3, [r3, #8]
    2c8c:	2bf0      	cmp	r3, #240	; 0xf0
    2c8e:	bfd4      	ite	le
    2c90:	2301      	movle	r3, #1
    2c92:	2300      	movgt	r3, #0
    2c94:	b2db      	uxtb	r3, r3
    2c96:	461a      	mov	r2, r3
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    2c9e:	e00d      	b.n	2cbc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    2ca0:	2300      	movs	r3, #0
    2ca2:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	2200      	movs	r2, #0
    2ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	2200      	movs	r2, #0
    2cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	2200      	movs	r2, #0
    2cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
    2cbc:	4b13      	ldr	r3, [pc, #76]	; (2d0c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    2cbe:	6818      	ldr	r0, [r3, #0]
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    2cc4:	4b12      	ldr	r3, [pc, #72]	; (2d10 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    2cc6:	9302      	str	r3, [sp, #8]
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	9301      	str	r3, [sp, #4]
    2ccc:	2300      	movs	r3, #0
    2cce:	9300      	str	r3, [sp, #0]
    2cd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2cd4:	68fa      	ldr	r2, [r7, #12]
    2cd6:	4c0f      	ldr	r4, [pc, #60]	; (2d14 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    2cd8:	47a0      	blx	r4
    2cda:	4603      	mov	r3, r0
    2cdc:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    2cde:	f997 300b 	ldrsb.w	r3, [r7, #11]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d00b      	beq.n	2cfe <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	2200      	movs	r2, #0
    2cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	2200      	movs	r2, #0
    2cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	2200      	movs	r2, #0
    2cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    2cfe:	bf00      	nop
    2d00:	3714      	adds	r7, #20
    2d02:	46bd      	mov	sp, r7
    2d04:	bd90      	pop	{r4, r7, pc}
    2d06:	bf00      	nop
    2d08:	bffff800 	.word	0xbffff800
    2d0c:	20001a00 	.word	0x20001a00
    2d10:	00002b29 	.word	0x00002b29
    2d14:	00001e2d 	.word	0x00001e2d

00002d18 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    2d18:	b590      	push	{r4, r7, lr}
    2d1a:	b089      	sub	sp, #36	; 0x24
    2d1c:	af02      	add	r7, sp, #8
    2d1e:	60f8      	str	r0, [r7, #12]
    2d20:	60b9      	str	r1, [r7, #8]
    2d22:	4613      	mov	r3, r2
    2d24:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    2d26:	68bb      	ldr	r3, [r7, #8]
    2d28:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    2d2a:	68ba      	ldr	r2, [r7, #8]
    2d2c:	4b1c      	ldr	r3, [pc, #112]	; (2da0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    2d2e:	4013      	ands	r3, r2
    2d30:	2b00      	cmp	r3, #0
    2d32:	d115      	bne.n	2d60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    2d34:	68fb      	ldr	r3, [r7, #12]
    2d36:	7f9b      	ldrb	r3, [r3, #30]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d011      	beq.n	2d60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    2d3c:	697b      	ldr	r3, [r7, #20]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d00e      	beq.n	2d60 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	699a      	ldr	r2, [r3, #24]
    2d46:	697b      	ldr	r3, [r7, #20]
    2d48:	429a      	cmp	r2, r3
    2d4a:	d105      	bne.n	2d58 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	7d1b      	ldrb	r3, [r3, #20]
    2d50:	461a      	mov	r2, r3
    2d52:	697b      	ldr	r3, [r7, #20]
    2d54:	4413      	add	r3, r2
    2d56:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    2d58:	68fb      	ldr	r3, [r7, #12]
    2d5a:	2201      	movs	r2, #1
    2d5c:	775a      	strb	r2, [r3, #29]
    2d5e:	e004      	b.n	2d6a <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    2d60:	2300      	movs	r3, #0
    2d62:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	2200      	movs	r2, #0
    2d68:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    2d6a:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    2d6c:	6818      	ldr	r0, [r3, #0]
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2d72:	68fb      	ldr	r3, [r7, #12]
    2d74:	7f9b      	ldrb	r3, [r3, #30]
    2d76:	79fa      	ldrb	r2, [r7, #7]
    2d78:	9201      	str	r2, [sp, #4]
    2d7a:	9300      	str	r3, [sp, #0]
    2d7c:	2300      	movs	r3, #0
    2d7e:	697a      	ldr	r2, [r7, #20]
    2d80:	4c09      	ldr	r4, [pc, #36]	; (2da8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    2d82:	47a0      	blx	r4
    2d84:	4602      	mov	r2, r0
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    2d8a:	68fb      	ldr	r3, [r7, #12]
    2d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d102      	bne.n	2d98 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    2d92:	68fb      	ldr	r3, [r7, #12]
    2d94:	2200      	movs	r2, #0
    2d96:	775a      	strb	r2, [r3, #29]
    }
}
    2d98:	bf00      	nop
    2d9a:	371c      	adds	r7, #28
    2d9c:	46bd      	mov	sp, r7
    2d9e:	bd90      	pop	{r4, r7, pc}
    2da0:	bffff800 	.word	0xbffff800
    2da4:	20001a00 	.word	0x20001a00
    2da8:	00001f2d 	.word	0x00001f2d

00002dac <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b08a      	sub	sp, #40	; 0x28
    2db0:	af00      	add	r7, sp, #0
    2db2:	60f8      	str	r0, [r7, #12]
    2db4:	60b9      	str	r1, [r7, #8]
    2db6:	603b      	str	r3, [r7, #0]
    2db8:	4613      	mov	r3, r2
    2dba:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    2dbc:	68bb      	ldr	r3, [r7, #8]
    2dbe:	0c1b      	lsrs	r3, r3, #16
    2dc0:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    2dc2:	68bb      	ldr	r3, [r7, #8]
    2dc4:	0a1b      	lsrs	r3, r3, #8
    2dc6:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    2dc8:	68bb      	ldr	r3, [r7, #8]
    2dca:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2dcc:	7ebb      	ldrb	r3, [r7, #26]
    2dce:	f003 0307 	and.w	r3, r3, #7
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d001      	beq.n	2dda <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    2dd6:	4b6b      	ldr	r3, [pc, #428]	; (2f84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2dd8:	e0cf      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    2dda:	7ebb      	ldrb	r3, [r7, #26]
    2ddc:	10db      	asrs	r3, r3, #3
    2dde:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    2de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2de2:	781a      	ldrb	r2, [r3, #0]
    2de4:	7ebb      	ldrb	r3, [r7, #26]
    2de6:	4413      	add	r3, r2
    2de8:	b2da      	uxtb	r2, r3
    2dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dec:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    2dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	2b08      	cmp	r3, #8
    2df4:	dd01      	ble.n	2dfa <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    2df6:	4b64      	ldr	r3, [pc, #400]	; (2f88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    2df8:	e0bf      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    2dfa:	69fb      	ldr	r3, [r7, #28]
    2dfc:	2b07      	cmp	r3, #7
    2dfe:	d832      	bhi.n	2e66 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    2e00:	7efb      	ldrb	r3, [r7, #27]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d12f      	bne.n	2e66 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    2e06:	2304      	movs	r3, #4
    2e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    2e0c:	69fb      	ldr	r3, [r7, #28]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d803      	bhi.n	2e1a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    2e12:	2300      	movs	r3, #0
    2e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2e18:	e012      	b.n	2e40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    2e1a:	69fb      	ldr	r3, [r7, #28]
    2e1c:	2b02      	cmp	r3, #2
    2e1e:	d002      	beq.n	2e26 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    2e20:	69fb      	ldr	r3, [r7, #28]
    2e22:	2b05      	cmp	r3, #5
    2e24:	d103      	bne.n	2e2e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    2e26:	2301      	movs	r3, #1
    2e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2e2c:	e008      	b.n	2e40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    2e2e:	69fb      	ldr	r3, [r7, #28]
    2e30:	2b03      	cmp	r3, #3
    2e32:	d002      	beq.n	2e3a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    2e34:	69fb      	ldr	r3, [r7, #28]
    2e36:	2b06      	cmp	r3, #6
    2e38:	d102      	bne.n	2e40 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    2e3a:	2302      	movs	r3, #2
    2e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2e40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2e44:	7ebb      	ldrb	r3, [r7, #26]
    2e46:	429a      	cmp	r2, r3
    2e48:	da01      	bge.n	2e4e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    2e4a:	4b4e      	ldr	r3, [pc, #312]	; (2f84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2e4c:	e095      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    2e4e:	79fb      	ldrb	r3, [r7, #7]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d103      	bne.n	2e5c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    2e54:	683b      	ldr	r3, [r7, #0]
    2e56:	4a4d      	ldr	r2, [pc, #308]	; (2f8c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    2e58:	601a      	str	r2, [r3, #0]
    2e5a:	e002      	b.n	2e62 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	4a4c      	ldr	r2, [pc, #304]	; (2f90 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    2e60:	601a      	str	r2, [r3, #0]

        return 0;
    2e62:	2300      	movs	r3, #0
    2e64:	e089      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
    2e66:	4b4b      	ldr	r3, [pc, #300]	; (2f94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2e68:	681b      	ldr	r3, [r3, #0]
    2e6a:	3304      	adds	r3, #4
    2e6c:	69f9      	ldr	r1, [r7, #28]
    2e6e:	4618      	mov	r0, r3
    2e70:	4b49      	ldr	r3, [pc, #292]	; (2f98 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    2e72:	4798      	blx	r3
    2e74:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    2e76:	697b      	ldr	r3, [r7, #20]
    2e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e7c:	4293      	cmp	r3, r2
    2e7e:	d00b      	beq.n	2e98 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    2e80:	7ef9      	ldrb	r1, [r7, #27]
    2e82:	68fb      	ldr	r3, [r7, #12]
    2e84:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2e86:	697a      	ldr	r2, [r7, #20]
    2e88:	4613      	mov	r3, r2
    2e8a:	009b      	lsls	r3, r3, #2
    2e8c:	4413      	add	r3, r2
    2e8e:	009b      	lsls	r3, r3, #2
    2e90:	4403      	add	r3, r0
    2e92:	791b      	ldrb	r3, [r3, #4]
    2e94:	4299      	cmp	r1, r3
    2e96:	dd01      	ble.n	2e9c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    2e98:	4b40      	ldr	r3, [pc, #256]	; (2f9c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    2e9a:	e06e      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
    2e9c:	4b3d      	ldr	r3, [pc, #244]	; (2f94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	3304      	adds	r3, #4
    2ea2:	7efa      	ldrb	r2, [r7, #27]
    2ea4:	6979      	ldr	r1, [r7, #20]
    2ea6:	4618      	mov	r0, r3
    2ea8:	4b3d      	ldr	r3, [pc, #244]	; (2fa0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    2eaa:	4798      	blx	r3
    2eac:	4603      	mov	r3, r0
    2eae:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2eb0:	79fb      	ldrb	r3, [r7, #7]
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d10b      	bne.n	2ece <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    2eb6:	7cfb      	ldrb	r3, [r7, #19]
    2eb8:	f003 0310 	and.w	r3, r3, #16
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d004      	beq.n	2eca <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    2ec0:	7cfb      	ldrb	r3, [r7, #19]
    2ec2:	f003 0308 	and.w	r3, r3, #8
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d101      	bne.n	2ece <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    2eca:	4b2e      	ldr	r3, [pc, #184]	; (2f84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2ecc:	e055      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2ece:	79fb      	ldrb	r3, [r7, #7]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d00b      	beq.n	2eec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    2ed4:	7cfb      	ldrb	r3, [r7, #19]
    2ed6:	f003 0320 	and.w	r3, r3, #32
    2eda:	2b00      	cmp	r3, #0
    2edc:	d004      	beq.n	2ee8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    2ede:	7cfb      	ldrb	r3, [r7, #19]
    2ee0:	f003 0304 	and.w	r3, r3, #4
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d101      	bne.n	2eec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    2ee8:	4b26      	ldr	r3, [pc, #152]	; (2f84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2eea:	e046      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
    2eec:	4b29      	ldr	r3, [pc, #164]	; (2f94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2eee:	681b      	ldr	r3, [r3, #0]
    2ef0:	3304      	adds	r3, #4
    2ef2:	7efa      	ldrb	r2, [r7, #27]
    2ef4:	6979      	ldr	r1, [r7, #20]
    2ef6:	4618      	mov	r0, r3
    2ef8:	4b2a      	ldr	r3, [pc, #168]	; (2fa4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    2efa:	4798      	blx	r3
    2efc:	4603      	mov	r3, r0
    2efe:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    2f00:	7cba      	ldrb	r2, [r7, #18]
    2f02:	7ebb      	ldrb	r3, [r7, #26]
    2f04:	429a      	cmp	r2, r3
    2f06:	da01      	bge.n	2f0c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    2f08:	4b1e      	ldr	r3, [pc, #120]	; (2f84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    2f0a:	e036      	b.n	2f7a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    2f0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
    2f10:	2b00      	cmp	r3, #0
    2f12:	da01      	bge.n	2f18 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    2f14:	2201      	movs	r2, #1
    2f16:	e000      	b.n	2f1a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    2f18:	2200      	movs	r2, #0
    2f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f1c:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
    2f1e:	4b1d      	ldr	r3, [pc, #116]	; (2f94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	3304      	adds	r3, #4
    2f24:	7efa      	ldrb	r2, [r7, #27]
    2f26:	6979      	ldr	r1, [r7, #20]
    2f28:	4618      	mov	r0, r3
    2f2a:	4b1f      	ldr	r3, [pc, #124]	; (2fa8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    2f2c:	4798      	blx	r3
    2f2e:	4602      	mov	r2, r0
    2f30:	683b      	ldr	r3, [r7, #0]
    2f32:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    2f34:	7cfb      	ldrb	r3, [r7, #19]
    2f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d01c      	beq.n	2f78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    2f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	461a      	mov	r2, r3
    2f44:	7ebb      	ldrb	r3, [r7, #26]
    2f46:	1ad3      	subs	r3, r2, r3
    2f48:	623b      	str	r3, [r7, #32]
    2f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2f4c:	781b      	ldrb	r3, [r3, #0]
    2f4e:	461a      	mov	r2, r3
    2f50:	6a3b      	ldr	r3, [r7, #32]
    2f52:	429a      	cmp	r2, r3
    2f54:	d910      	bls.n	2f78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    2f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	b25a      	sxtb	r2, r3
    2f5c:	2101      	movs	r1, #1
    2f5e:	6a3b      	ldr	r3, [r7, #32]
    2f60:	fa01 f303 	lsl.w	r3, r1, r3
    2f64:	b25b      	sxtb	r3, r3
    2f66:	4313      	orrs	r3, r2
    2f68:	b25b      	sxtb	r3, r3
    2f6a:	b2da      	uxtb	r2, r3
    2f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f6e:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    2f70:	6a3b      	ldr	r3, [r7, #32]
    2f72:	3301      	adds	r3, #1
    2f74:	623b      	str	r3, [r7, #32]
    2f76:	e7e8      	b.n	2f4a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    2f78:	2300      	movs	r3, #0
}
    2f7a:	4618      	mov	r0, r3
    2f7c:	3728      	adds	r7, #40	; 0x28
    2f7e:	46bd      	mov	sp, r7
    2f80:	bd80      	pop	{r7, pc}
    2f82:	bf00      	nop
    2f84:	06040041 	.word	0x06040041
    2f88:	06040042 	.word	0x06040042
    2f8c:	20001a38 	.word	0x20001a38
    2f90:	20001a34 	.word	0x20001a34
    2f94:	20001a00 	.word	0x20001a00
    2f98:	00003f15 	.word	0x00003f15
    2f9c:	06020000 	.word	0x06020000
    2fa0:	00004069 	.word	0x00004069
    2fa4:	00003fc1 	.word	0x00003fc1
    2fa8:	00004119 	.word	0x00004119

00002fac <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    2fac:	b590      	push	{r4, r7, lr}
    2fae:	b091      	sub	sp, #68	; 0x44
    2fb0:	af04      	add	r7, sp, #16
    2fb2:	6078      	str	r0, [r7, #4]
    2fb4:	460b      	mov	r3, r1
    2fb6:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    2fb8:	2300      	movs	r3, #0
    2fba:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    2fbc:	2300      	movs	r3, #0
    2fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	691b      	ldr	r3, [r3, #16]
    2fc4:	3304      	adds	r3, #4
    2fc6:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    2fc8:	78fb      	ldrb	r3, [r7, #3]
    2fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    2fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d045      	beq.n	305e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    2fd2:	2300      	movs	r3, #0
    2fd4:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    2fd6:	7dfb      	ldrb	r3, [r7, #23]
    2fd8:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    2fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fdc:	1d1a      	adds	r2, r3, #4
    2fde:	627a      	str	r2, [r7, #36]	; 0x24
    2fe0:	681b      	ldr	r3, [r3, #0]
    2fe2:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    2fe8:	f107 0210 	add.w	r2, r7, #16
    2fec:	f107 030e 	add.w	r3, r7, #14
    2ff0:	9302      	str	r3, [sp, #8]
    2ff2:	f107 030f 	add.w	r3, r7, #15
    2ff6:	9301      	str	r3, [sp, #4]
    2ff8:	f107 0317 	add.w	r3, r7, #23
    2ffc:	9300      	str	r3, [sp, #0]
    2ffe:	4613      	mov	r3, r2
    3000:	2200      	movs	r2, #0
    3002:	69b9      	ldr	r1, [r7, #24]
    3004:	4c1a      	ldr	r4, [pc, #104]	; (3070 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    3006:	47a0      	blx	r4
    3008:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    300c:	2b00      	cmp	r3, #0
    300e:	d00e      	beq.n	302e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    3010:	2300      	movs	r3, #0
    3012:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    3014:	4b17      	ldr	r3, [pc, #92]	; (3074 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	1d18      	adds	r0, r3, #4
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	6819      	ldr	r1, [r3, #0]
    301e:	69bb      	ldr	r3, [r7, #24]
    3020:	9300      	str	r3, [sp, #0]
    3022:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    3026:	221a      	movs	r2, #26
    3028:	4c13      	ldr	r4, [pc, #76]	; (3078 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    302a:	47a0      	blx	r4
    302c:	e017      	b.n	305e <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    302e:	7ffb      	ldrb	r3, [r7, #31]
    3030:	623b      	str	r3, [r7, #32]
    3032:	7dfb      	ldrb	r3, [r7, #23]
    3034:	461a      	mov	r2, r3
    3036:	6a3b      	ldr	r3, [r7, #32]
    3038:	429a      	cmp	r2, r3
    303a:	d90c      	bls.n	3056 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    303c:	693a      	ldr	r2, [r7, #16]
    303e:	1c53      	adds	r3, r2, #1
    3040:	613b      	str	r3, [r7, #16]
    3042:	6879      	ldr	r1, [r7, #4]
    3044:	6a3b      	ldr	r3, [r7, #32]
    3046:	3308      	adds	r3, #8
    3048:	009b      	lsls	r3, r3, #2
    304a:	440b      	add	r3, r1
    304c:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    304e:	6a3b      	ldr	r3, [r7, #32]
    3050:	3301      	adds	r3, #1
    3052:	623b      	str	r3, [r7, #32]
    3054:	e7ed      	b.n	3032 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    3056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3058:	3b01      	subs	r3, #1
    305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    305c:	e7b6      	b.n	2fcc <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    305e:	7dfa      	ldrb	r2, [r7, #23]
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    3066:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    3068:	4618      	mov	r0, r3
    306a:	3734      	adds	r7, #52	; 0x34
    306c:	46bd      	mov	sp, r7
    306e:	bd90      	pop	{r4, r7, pc}
    3070:	00002dad 	.word	0x00002dad
    3074:	20001a00 	.word	0x20001a00
    3078:	000024bd 	.word	0x000024bd

0000307c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    307c:	b590      	push	{r4, r7, lr}
    307e:	b091      	sub	sp, #68	; 0x44
    3080:	af04      	add	r7, sp, #16
    3082:	6078      	str	r0, [r7, #4]
    3084:	460b      	mov	r3, r1
    3086:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    3088:	2300      	movs	r3, #0
    308a:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    308c:	2300      	movs	r3, #0
    308e:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	68db      	ldr	r3, [r3, #12]
    3094:	3304      	adds	r3, #4
    3096:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	2200      	movs	r2, #0
    309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    30a0:	78fb      	ldrb	r3, [r7, #3]
    30a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    30a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    30a6:	2b00      	cmp	r3, #0
    30a8:	d042      	beq.n	3130 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    30aa:	7dfb      	ldrb	r3, [r7, #23]
    30ac:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    30ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30b0:	1d1a      	adds	r2, r3, #4
    30b2:	627a      	str	r2, [r7, #36]	; 0x24
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	6858      	ldr	r0, [r3, #4]
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    30c0:	f107 0110 	add.w	r1, r7, #16
    30c4:	f107 020f 	add.w	r2, r7, #15
    30c8:	9202      	str	r2, [sp, #8]
    30ca:	9301      	str	r3, [sp, #4]
    30cc:	f107 0317 	add.w	r3, r7, #23
    30d0:	9300      	str	r3, [sp, #0]
    30d2:	460b      	mov	r3, r1
    30d4:	2201      	movs	r2, #1
    30d6:	69b9      	ldr	r1, [r7, #24]
    30d8:	4c19      	ldr	r4, [pc, #100]	; (3140 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    30da:	47a0      	blx	r4
    30dc:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    30de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30e0:	2b00      	cmp	r3, #0
    30e2:	d00e      	beq.n	3102 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    30e4:	2300      	movs	r3, #0
    30e6:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    30e8:	4b16      	ldr	r3, [pc, #88]	; (3144 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	1d18      	adds	r0, r3, #4
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	6819      	ldr	r1, [r3, #0]
    30f2:	69bb      	ldr	r3, [r7, #24]
    30f4:	9300      	str	r3, [sp, #0]
    30f6:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    30fa:	221a      	movs	r2, #26
    30fc:	4c12      	ldr	r4, [pc, #72]	; (3148 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    30fe:	47a0      	blx	r4
    3100:	e016      	b.n	3130 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    3102:	7ffb      	ldrb	r3, [r7, #31]
    3104:	623b      	str	r3, [r7, #32]
    3106:	7dfb      	ldrb	r3, [r7, #23]
    3108:	461a      	mov	r2, r3
    310a:	6a3b      	ldr	r3, [r7, #32]
    310c:	429a      	cmp	r2, r3
    310e:	d90b      	bls.n	3128 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    3110:	693b      	ldr	r3, [r7, #16]
    3112:	1c5a      	adds	r2, r3, #1
    3114:	613a      	str	r2, [r7, #16]
    3116:	687a      	ldr	r2, [r7, #4]
    3118:	6a39      	ldr	r1, [r7, #32]
    311a:	3108      	adds	r1, #8
    311c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    3120:	6a3b      	ldr	r3, [r7, #32]
    3122:	3301      	adds	r3, #1
    3124:	623b      	str	r3, [r7, #32]
    3126:	e7ee      	b.n	3106 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    3128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    312a:	3b01      	subs	r3, #1
    312c:	62fb      	str	r3, [r7, #44]	; 0x2c
    312e:	e7b9      	b.n	30a4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    3130:	7dfa      	ldrb	r2, [r7, #23]
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	779a      	strb	r2, [r3, #30]

    return ret;
    3136:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    3138:	4618      	mov	r0, r3
    313a:	3734      	adds	r7, #52	; 0x34
    313c:	46bd      	mov	sp, r7
    313e:	bd90      	pop	{r4, r7, pc}
    3140:	00002dad 	.word	0x00002dad
    3144:	20001a00 	.word	0x20001a00
    3148:	000024bd 	.word	0x000024bd

0000314c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    314c:	b580      	push	{r7, lr}
    314e:	b088      	sub	sp, #32
    3150:	af00      	add	r7, sp, #0
    3152:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	7f5b      	ldrb	r3, [r3, #29]
    315e:	2b00      	cmp	r3, #0
    3160:	d025      	beq.n	31ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	7f1b      	ldrb	r3, [r3, #28]
    3166:	2b01      	cmp	r3, #1
    3168:	d11f      	bne.n	31aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    3170:	69bb      	ldr	r3, [r7, #24]
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	b29a      	uxth	r2, r3
    3176:	69fb      	ldr	r3, [r7, #28]
    3178:	69db      	ldr	r3, [r3, #28]
    317a:	429a      	cmp	r2, r3
    317c:	d10a      	bne.n	3194 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    317e:	69fb      	ldr	r3, [r7, #28]
    3180:	69db      	ldr	r3, [r3, #28]
    3182:	2b00      	cmp	r3, #0
    3184:	d006      	beq.n	3194 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    3186:	69bb      	ldr	r3, [r7, #24]
    3188:	681b      	ldr	r3, [r3, #0]
    318a:	69fa      	ldr	r2, [r7, #28]
    318c:	7e12      	ldrb	r2, [r2, #24]
    318e:	441a      	add	r2, r3
    3190:	69bb      	ldr	r3, [r7, #24]
    3192:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    3194:	69fb      	ldr	r3, [r7, #28]
    3196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    319a:	2b00      	cmp	r3, #0
    319c:	d105      	bne.n	31aa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    319e:	69bb      	ldr	r3, [r7, #24]
    31a0:	681b      	ldr	r3, [r3, #0]
    31a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    31a6:	69bb      	ldr	r3, [r7, #24]
    31a8:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    31aa:	2300      	movs	r3, #0
    31ac:	e07f      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    31ae:	69fb      	ldr	r3, [r7, #28]
    31b0:	f893 3020 	ldrb.w	r3, [r3, #32]
    31b4:	f003 0304 	and.w	r3, r3, #4
    31b8:	2b00      	cmp	r3, #0
    31ba:	d001      	beq.n	31c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    31bc:	4b3e      	ldr	r3, [pc, #248]	; (32b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    31be:	e076      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    31c0:	69fb      	ldr	r3, [r7, #28]
    31c2:	695b      	ldr	r3, [r3, #20]
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2b05      	cmp	r3, #5
    31c8:	d108      	bne.n	31dc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    31ca:	69fb      	ldr	r3, [r7, #28]
    31cc:	f893 3020 	ldrb.w	r3, [r3, #32]
    31d0:	f003 0301 	and.w	r3, r3, #1
    31d4:	2b00      	cmp	r3, #0
    31d6:	d001      	beq.n	31dc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    31d8:	4b38      	ldr	r3, [pc, #224]	; (32bc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    31da:	e068      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	7f1b      	ldrb	r3, [r3, #28]
    31e0:	2b01      	cmp	r3, #1
    31e2:	d139      	bne.n	3258 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	685b      	ldr	r3, [r3, #4]
    31e8:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    31ea:	697b      	ldr	r3, [r7, #20]
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	4b34      	ldr	r3, [pc, #208]	; (32c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    31f0:	4013      	ands	r3, r2
    31f2:	2b00      	cmp	r3, #0
    31f4:	d001      	beq.n	31fa <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    31f6:	4b33      	ldr	r3, [pc, #204]	; (32c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    31f8:	e059      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    31fa:	697b      	ldr	r3, [r7, #20]
    31fc:	681b      	ldr	r3, [r3, #0]
    31fe:	b29a      	uxth	r2, r3
    3200:	69fb      	ldr	r3, [r7, #28]
    3202:	69db      	ldr	r3, [r3, #28]
    3204:	69f9      	ldr	r1, [r7, #28]
    3206:	7e09      	ldrb	r1, [r1, #24]
    3208:	440b      	add	r3, r1
    320a:	429a      	cmp	r2, r3
    320c:	d10c      	bne.n	3228 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    320e:	697b      	ldr	r3, [r7, #20]
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    3216:	697b      	ldr	r3, [r7, #20]
    3218:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    321a:	697b      	ldr	r3, [r7, #20]
    321c:	681a      	ldr	r2, [r3, #0]
    321e:	69fb      	ldr	r3, [r7, #28]
    3220:	69db      	ldr	r3, [r3, #28]
    3222:	441a      	add	r2, r3
    3224:	697b      	ldr	r3, [r7, #20]
    3226:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    3228:	69fb      	ldr	r3, [r7, #28]
    322a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    322e:	2b00      	cmp	r3, #0
    3230:	d00b      	beq.n	324a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    3232:	697b      	ldr	r3, [r7, #20]
    3234:	681a      	ldr	r2, [r3, #0]
    3236:	69fb      	ldr	r3, [r7, #28]
    3238:	68db      	ldr	r3, [r3, #12]
    323a:	685b      	ldr	r3, [r3, #4]
    323c:	4053      	eors	r3, r2
    323e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3242:	2b00      	cmp	r3, #0
    3244:	d001      	beq.n	324a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    3246:	4b1f      	ldr	r3, [pc, #124]	; (32c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3248:	e031      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
    324a:	697b      	ldr	r3, [r7, #20]
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	4619      	mov	r1, r3
    3250:	69f8      	ldr	r0, [r7, #28]
    3252:	4b1d      	ldr	r3, [pc, #116]	; (32c8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    3254:	4798      	blx	r3
    3256:	e029      	b.n	32ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	7f1b      	ldrb	r3, [r3, #28]
    325c:	2b02      	cmp	r3, #2
    325e:	d125      	bne.n	32ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	685b      	ldr	r3, [r3, #4]
    3264:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    3266:	69fb      	ldr	r3, [r7, #28]
    3268:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    326c:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    326e:	693b      	ldr	r3, [r7, #16]
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2bf0      	cmp	r3, #240	; 0xf0
    3274:	dd05      	ble.n	3282 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    3276:	693b      	ldr	r3, [r7, #16]
    3278:	781b      	ldrb	r3, [r3, #0]
    327a:	2bfd      	cmp	r3, #253	; 0xfd
    327c:	dc01      	bgt.n	3282 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    327e:	4b11      	ldr	r3, [pc, #68]	; (32c4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    3280:	e015      	b.n	32ae <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    3282:	693b      	ldr	r3, [r7, #16]
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2bf0      	cmp	r3, #240	; 0xf0
    3288:	bfd4      	ite	le
    328a:	2301      	movle	r3, #1
    328c:	2300      	movgt	r3, #0
    328e:	b2db      	uxtb	r3, r3
    3290:	461a      	mov	r2, r3
    3292:	69fb      	ldr	r3, [r7, #28]
    3294:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    3298:	69fb      	ldr	r3, [r7, #28]
    329a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    329e:	7bfa      	ldrb	r2, [r7, #15]
    32a0:	429a      	cmp	r2, r3
    32a2:	d003      	beq.n	32ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    32a4:	69fb      	ldr	r3, [r7, #28]
    32a6:	2200      	movs	r2, #0
    32a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    32ac:	2300      	movs	r3, #0
}
    32ae:	4618      	mov	r0, r3
    32b0:	3720      	adds	r7, #32
    32b2:	46bd      	mov	sp, r7
    32b4:	bd80      	pop	{r7, pc}
    32b6:	bf00      	nop
    32b8:	06010002 	.word	0x06010002
    32bc:	08000022 	.word	0x08000022
    32c0:	3fff8000 	.word	0x3fff8000
    32c4:	06090030 	.word	0x06090030
    32c8:	00002c41 	.word	0x00002c41

000032cc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    32cc:	b580      	push	{r7, lr}
    32ce:	b088      	sub	sp, #32
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	7f1b      	ldrb	r3, [r3, #28]
    32de:	2b04      	cmp	r3, #4
    32e0:	d101      	bne.n	32e6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    32e2:	4b6d      	ldr	r3, [pc, #436]	; (3498 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    32e4:	e0d4      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	7f5b      	ldrb	r3, [r3, #29]
    32ea:	2b00      	cmp	r3, #0
    32ec:	d024      	beq.n	3338 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	7f1b      	ldrb	r3, [r3, #28]
    32f2:	2b01      	cmp	r3, #1
    32f4:	d11e      	bne.n	3334 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	685b      	ldr	r3, [r3, #4]
    32fa:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    32fc:	69bb      	ldr	r3, [r7, #24]
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	b29a      	uxth	r2, r3
    3302:	69fb      	ldr	r3, [r7, #28]
    3304:	699b      	ldr	r3, [r3, #24]
    3306:	429a      	cmp	r2, r3
    3308:	d10a      	bne.n	3320 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    330a:	69fb      	ldr	r3, [r7, #28]
    330c:	699b      	ldr	r3, [r3, #24]
    330e:	2b00      	cmp	r3, #0
    3310:	d006      	beq.n	3320 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    3312:	69bb      	ldr	r3, [r7, #24]
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	69fa      	ldr	r2, [r7, #28]
    3318:	7d12      	ldrb	r2, [r2, #20]
    331a:	441a      	add	r2, r3
    331c:	69bb      	ldr	r3, [r7, #24]
    331e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    3320:	69fb      	ldr	r3, [r7, #28]
    3322:	7f5b      	ldrb	r3, [r3, #29]
    3324:	2b00      	cmp	r3, #0
    3326:	d105      	bne.n	3334 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    3328:	69bb      	ldr	r3, [r7, #24]
    332a:	681b      	ldr	r3, [r3, #0]
    332c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    3330:	69bb      	ldr	r3, [r7, #24]
    3332:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    3334:	2300      	movs	r3, #0
    3336:	e0ab      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    3338:	69fb      	ldr	r3, [r7, #28]
    333a:	7f1b      	ldrb	r3, [r3, #28]
    333c:	f003 0304 	and.w	r3, r3, #4
    3340:	2b00      	cmp	r3, #0
    3342:	d001      	beq.n	3348 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    3344:	4b55      	ldr	r3, [pc, #340]	; (349c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    3346:	e0a3      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    3348:	69fb      	ldr	r3, [r7, #28]
    334a:	691b      	ldr	r3, [r3, #16]
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	2b05      	cmp	r3, #5
    3350:	d107      	bne.n	3362 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    3352:	69fb      	ldr	r3, [r7, #28]
    3354:	7f1b      	ldrb	r3, [r3, #28]
    3356:	f003 0301 	and.w	r3, r3, #1
    335a:	2b00      	cmp	r3, #0
    335c:	d001      	beq.n	3362 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    335e:	4b50      	ldr	r3, [pc, #320]	; (34a0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    3360:	e096      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    3362:	687b      	ldr	r3, [r7, #4]
    3364:	7f1b      	ldrb	r3, [r3, #28]
    3366:	2b01      	cmp	r3, #1
    3368:	d140      	bne.n	33ec <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	685b      	ldr	r3, [r3, #4]
    336e:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    3370:	697b      	ldr	r3, [r7, #20]
    3372:	681a      	ldr	r2, [r3, #0]
    3374:	4b4b      	ldr	r3, [pc, #300]	; (34a4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    3376:	4013      	ands	r3, r2
    3378:	2b00      	cmp	r3, #0
    337a:	d001      	beq.n	3380 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    337c:	4b4a      	ldr	r3, [pc, #296]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    337e:	e087      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    3380:	697b      	ldr	r3, [r7, #20]
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	b29a      	uxth	r2, r3
    3386:	69fb      	ldr	r3, [r7, #28]
    3388:	699b      	ldr	r3, [r3, #24]
    338a:	69f9      	ldr	r1, [r7, #28]
    338c:	7d09      	ldrb	r1, [r1, #20]
    338e:	440b      	add	r3, r1
    3390:	429a      	cmp	r2, r3
    3392:	d10c      	bne.n	33ae <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    3394:	697b      	ldr	r3, [r7, #20]
    3396:	681b      	ldr	r3, [r3, #0]
    3398:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    339c:	697b      	ldr	r3, [r7, #20]
    339e:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    33a0:	697b      	ldr	r3, [r7, #20]
    33a2:	681a      	ldr	r2, [r3, #0]
    33a4:	69fb      	ldr	r3, [r7, #28]
    33a6:	699b      	ldr	r3, [r3, #24]
    33a8:	441a      	add	r2, r3
    33aa:	697b      	ldr	r3, [r7, #20]
    33ac:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    33ae:	69fb      	ldr	r3, [r7, #28]
    33b0:	7f5b      	ldrb	r3, [r3, #29]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d00b      	beq.n	33ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    33b6:	697b      	ldr	r3, [r7, #20]
    33b8:	681a      	ldr	r2, [r3, #0]
    33ba:	69fb      	ldr	r3, [r7, #28]
    33bc:	689b      	ldr	r3, [r3, #8]
    33be:	685b      	ldr	r3, [r3, #4]
    33c0:	4053      	eors	r3, r2
    33c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    33c6:	2b00      	cmp	r3, #0
    33c8:	d001      	beq.n	33ce <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    33ca:	4b37      	ldr	r3, [pc, #220]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    33cc:	e060      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    33ce:	697b      	ldr	r3, [r7, #20]
    33d0:	6819      	ldr	r1, [r3, #0]
    33d2:	69fb      	ldr	r3, [r7, #28]
    33d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    33d6:	7b9b      	ldrb	r3, [r3, #14]
    33d8:	b2db      	uxtb	r3, r3
    33da:	461a      	mov	r2, r3
    33dc:	69f8      	ldr	r0, [r7, #28]
    33de:	4b33      	ldr	r3, [pc, #204]	; (34ac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    33e0:	4798      	blx	r3
        TPDO->syncCounter = 255;
    33e2:	69fb      	ldr	r3, [r7, #28]
    33e4:	22ff      	movs	r2, #255	; 0xff
    33e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    33ea:	e050      	b.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	7f1b      	ldrb	r3, [r3, #28]
    33f0:	2b02      	cmp	r3, #2
    33f2:	d11b      	bne.n	342c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	685b      	ldr	r3, [r3, #4]
    33f8:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    33fa:	693b      	ldr	r3, [r7, #16]
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	2bf0      	cmp	r3, #240	; 0xf0
    3400:	dd05      	ble.n	340e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    3402:	693b      	ldr	r3, [r7, #16]
    3404:	781b      	ldrb	r3, [r3, #0]
    3406:	2bfd      	cmp	r3, #253	; 0xfd
    3408:	dc01      	bgt.n	340e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    340a:	4b27      	ldr	r3, [pc, #156]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    340c:	e040      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    340e:	69fb      	ldr	r3, [r7, #28]
    3410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3412:	693a      	ldr	r2, [r7, #16]
    3414:	7812      	ldrb	r2, [r2, #0]
    3416:	2af0      	cmp	r2, #240	; 0xf0
    3418:	dc01      	bgt.n	341e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    341a:	2201      	movs	r2, #1
    341c:	e000      	b.n	3420 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    341e:	2200      	movs	r2, #0
    3420:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    3422:	69fb      	ldr	r3, [r7, #28]
    3424:	22ff      	movs	r2, #255	; 0xff
    3426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    342a:	e030      	b.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	7f1b      	ldrb	r3, [r3, #28]
    3430:	2b03      	cmp	r3, #3
    3432:	d109      	bne.n	3448 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3434:	69fb      	ldr	r3, [r7, #28]
    3436:	7f5b      	ldrb	r3, [r3, #29]
    3438:	2b00      	cmp	r3, #0
    343a:	d001      	beq.n	3440 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    343c:	4b1a      	ldr	r3, [pc, #104]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    343e:	e027      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    3440:	69fb      	ldr	r3, [r7, #28]
    3442:	2200      	movs	r2, #0
    3444:	645a      	str	r2, [r3, #68]	; 0x44
    3446:	e022      	b.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	7f1b      	ldrb	r3, [r3, #28]
    344c:	2b05      	cmp	r3, #5
    344e:	d10b      	bne.n	3468 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	685b      	ldr	r3, [r3, #4]
    3454:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    3456:	68bb      	ldr	r3, [r7, #8]
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    345e:	fb02 f203 	mul.w	r2, r2, r3
    3462:	69fb      	ldr	r3, [r7, #28]
    3464:	649a      	str	r2, [r3, #72]	; 0x48
    3466:	e012      	b.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	7f1b      	ldrb	r3, [r3, #28]
    346c:	2b06      	cmp	r3, #6
    346e:	d10e      	bne.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	685b      	ldr	r3, [r3, #4]
    3474:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    3476:	69fb      	ldr	r3, [r7, #28]
    3478:	7f5b      	ldrb	r3, [r3, #29]
    347a:	2b00      	cmp	r3, #0
    347c:	d001      	beq.n	3482 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    347e:	4b0a      	ldr	r3, [pc, #40]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    3480:	e006      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    3482:	68fb      	ldr	r3, [r7, #12]
    3484:	781b      	ldrb	r3, [r3, #0]
    3486:	2bf0      	cmp	r3, #240	; 0xf0
    3488:	dd01      	ble.n	348e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    348a:	4b07      	ldr	r3, [pc, #28]	; (34a8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    348c:	e000      	b.n	3490 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    348e:	2300      	movs	r3, #0
}
    3490:	4618      	mov	r0, r3
    3492:	3720      	adds	r7, #32
    3494:	46bd      	mov	sp, r7
    3496:	bd80      	pop	{r7, pc}
    3498:	06090011 	.word	0x06090011
    349c:	06010002 	.word	0x06010002
    34a0:	08000022 	.word	0x08000022
    34a4:	3fff8000 	.word	0x3fff8000
    34a8:	06090030 	.word	0x06090030
    34ac:	00002d19 	.word	0x00002d19

000034b0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    34b0:	b590      	push	{r4, r7, lr}
    34b2:	b08d      	sub	sp, #52	; 0x34
    34b4:	af04      	add	r7, sp, #16
    34b6:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	7f5b      	ldrb	r3, [r3, #29]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d010      	beq.n	34e8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	685b      	ldr	r3, [r3, #4]
    34ca:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	7f1b      	ldrb	r3, [r3, #28]
    34d0:	2b00      	cmp	r3, #0
    34d2:	d107      	bne.n	34e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    34d4:	69fb      	ldr	r3, [r7, #28]
    34d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    34da:	2b00      	cmp	r3, #0
    34dc:	d102      	bne.n	34e4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    34de:	69bb      	ldr	r3, [r7, #24]
    34e0:	2200      	movs	r2, #0
    34e2:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    34e4:	2300      	movs	r3, #0
    34e6:	e054      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    34e8:	69fb      	ldr	r3, [r7, #28]
    34ea:	f893 3020 	ldrb.w	r3, [r3, #32]
    34ee:	f003 0308 	and.w	r3, r3, #8
    34f2:	2b00      	cmp	r3, #0
    34f4:	d001      	beq.n	34fa <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    34f6:	4b29      	ldr	r3, [pc, #164]	; (359c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    34f8:	e04b      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    34fa:	69fb      	ldr	r3, [r7, #28]
    34fc:	695b      	ldr	r3, [r3, #20]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	2b05      	cmp	r3, #5
    3502:	d108      	bne.n	3516 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    3504:	69fb      	ldr	r3, [r7, #28]
    3506:	f893 3020 	ldrb.w	r3, [r3, #32]
    350a:	f003 0302 	and.w	r3, r3, #2
    350e:	2b00      	cmp	r3, #0
    3510:	d001      	beq.n	3516 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3512:	4b23      	ldr	r3, [pc, #140]	; (35a0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    3514:	e03d      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    3516:	69fb      	ldr	r3, [r7, #28]
    3518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    351c:	2b00      	cmp	r3, #0
    351e:	d001      	beq.n	3524 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3520:	4b20      	ldr	r3, [pc, #128]	; (35a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3522:	e036      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	7f1b      	ldrb	r3, [r3, #28]
    3528:	2b00      	cmp	r3, #0
    352a:	d110      	bne.n	354e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	685b      	ldr	r3, [r3, #4]
    3530:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    3532:	697b      	ldr	r3, [r7, #20]
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	2b08      	cmp	r3, #8
    3538:	dd01      	ble.n	353e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    353a:	4b1b      	ldr	r3, [pc, #108]	; (35a8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    353c:	e029      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    353e:	697b      	ldr	r3, [r7, #20]
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	4619      	mov	r1, r3
    3544:	69f8      	ldr	r0, [r7, #28]
    3546:	4b19      	ldr	r3, [pc, #100]	; (35ac <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    3548:	4798      	blx	r3
    354a:	4603      	mov	r3, r0
    354c:	e021      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	685b      	ldr	r3, [r3, #4]
    3552:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3554:	2300      	movs	r3, #0
    3556:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3558:	2300      	movs	r3, #0
    355a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    355c:	69fb      	ldr	r3, [r7, #28]
    355e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    3562:	2b00      	cmp	r3, #0
    3564:	d001      	beq.n	356a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3566:	4b0f      	ldr	r3, [pc, #60]	; (35a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    3568:	e013      	b.n	3592 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    356a:	69fb      	ldr	r3, [r7, #28]
    356c:	6858      	ldr	r0, [r3, #4]
    356e:	693b      	ldr	r3, [r7, #16]
    3570:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    3572:	f107 020c 	add.w	r2, r7, #12
    3576:	f107 0309 	add.w	r3, r7, #9
    357a:	9302      	str	r3, [sp, #8]
    357c:	f107 030a 	add.w	r3, r7, #10
    3580:	9301      	str	r3, [sp, #4]
    3582:	f107 030b 	add.w	r3, r7, #11
    3586:	9300      	str	r3, [sp, #0]
    3588:	4613      	mov	r3, r2
    358a:	2200      	movs	r2, #0
    358c:	4c08      	ldr	r4, [pc, #32]	; (35b0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    358e:	47a0      	blx	r4
    3590:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    3592:	4618      	mov	r0, r3
    3594:	3724      	adds	r7, #36	; 0x24
    3596:	46bd      	mov	sp, r7
    3598:	bd90      	pop	{r4, r7, pc}
    359a:	bf00      	nop
    359c:	06010002 	.word	0x06010002
    35a0:	08000022 	.word	0x08000022
    35a4:	06010000 	.word	0x06010000
    35a8:	06040042 	.word	0x06040042
    35ac:	00002fad 	.word	0x00002fad
    35b0:	00002dad 	.word	0x00002dad

000035b4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    35b4:	b590      	push	{r4, r7, lr}
    35b6:	b08d      	sub	sp, #52	; 0x34
    35b8:	af04      	add	r7, sp, #16
    35ba:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	681b      	ldr	r3, [r3, #0]
    35c0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	7f5b      	ldrb	r3, [r3, #29]
    35c6:	2b00      	cmp	r3, #0
    35c8:	d00f      	beq.n	35ea <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	685b      	ldr	r3, [r3, #4]
    35ce:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	7f1b      	ldrb	r3, [r3, #28]
    35d4:	2b00      	cmp	r3, #0
    35d6:	d106      	bne.n	35e6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    35d8:	69fb      	ldr	r3, [r7, #28]
    35da:	7f9b      	ldrb	r3, [r3, #30]
    35dc:	2b00      	cmp	r3, #0
    35de:	d102      	bne.n	35e6 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    35e0:	69bb      	ldr	r3, [r7, #24]
    35e2:	2200      	movs	r2, #0
    35e4:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    35e6:	2300      	movs	r3, #0
    35e8:	e050      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    35ea:	69fb      	ldr	r3, [r7, #28]
    35ec:	7f1b      	ldrb	r3, [r3, #28]
    35ee:	f003 0308 	and.w	r3, r3, #8
    35f2:	2b00      	cmp	r3, #0
    35f4:	d001      	beq.n	35fa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    35f6:	4b27      	ldr	r3, [pc, #156]	; (3694 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    35f8:	e048      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    35fa:	69fb      	ldr	r3, [r7, #28]
    35fc:	691b      	ldr	r3, [r3, #16]
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	2b05      	cmp	r3, #5
    3602:	d107      	bne.n	3614 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    3604:	69fb      	ldr	r3, [r7, #28]
    3606:	7f1b      	ldrb	r3, [r3, #28]
    3608:	f003 0302 	and.w	r3, r3, #2
    360c:	2b00      	cmp	r3, #0
    360e:	d001      	beq.n	3614 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    3610:	4b21      	ldr	r3, [pc, #132]	; (3698 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    3612:	e03b      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    3614:	69fb      	ldr	r3, [r7, #28]
    3616:	7f5b      	ldrb	r3, [r3, #29]
    3618:	2b00      	cmp	r3, #0
    361a:	d001      	beq.n	3620 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    361c:	4b1f      	ldr	r3, [pc, #124]	; (369c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    361e:	e035      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	7f1b      	ldrb	r3, [r3, #28]
    3624:	2b00      	cmp	r3, #0
    3626:	d110      	bne.n	364a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	685b      	ldr	r3, [r3, #4]
    362c:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    362e:	697b      	ldr	r3, [r7, #20]
    3630:	781b      	ldrb	r3, [r3, #0]
    3632:	2b08      	cmp	r3, #8
    3634:	dd01      	ble.n	363a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    3636:	4b1a      	ldr	r3, [pc, #104]	; (36a0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    3638:	e028      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    363a:	697b      	ldr	r3, [r7, #20]
    363c:	781b      	ldrb	r3, [r3, #0]
    363e:	4619      	mov	r1, r3
    3640:	69f8      	ldr	r0, [r7, #28]
    3642:	4b18      	ldr	r3, [pc, #96]	; (36a4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    3644:	4798      	blx	r3
    3646:	4603      	mov	r3, r0
    3648:	e020      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	685b      	ldr	r3, [r3, #4]
    364e:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    3650:	2300      	movs	r3, #0
    3652:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    3654:	2300      	movs	r3, #0
    3656:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    3658:	69fb      	ldr	r3, [r7, #28]
    365a:	7f9b      	ldrb	r3, [r3, #30]
    365c:	2b00      	cmp	r3, #0
    365e:	d001      	beq.n	3664 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    3660:	4b0e      	ldr	r3, [pc, #56]	; (369c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    3662:	e013      	b.n	368c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    3664:	69fb      	ldr	r3, [r7, #28]
    3666:	6858      	ldr	r0, [r3, #4]
    3668:	693b      	ldr	r3, [r7, #16]
    366a:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    366c:	f107 020c 	add.w	r2, r7, #12
    3670:	f107 0309 	add.w	r3, r7, #9
    3674:	9302      	str	r3, [sp, #8]
    3676:	f107 030a 	add.w	r3, r7, #10
    367a:	9301      	str	r3, [sp, #4]
    367c:	f107 030b 	add.w	r3, r7, #11
    3680:	9300      	str	r3, [sp, #0]
    3682:	4613      	mov	r3, r2
    3684:	2201      	movs	r2, #1
    3686:	4c08      	ldr	r4, [pc, #32]	; (36a8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    3688:	47a0      	blx	r4
    368a:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    368c:	4618      	mov	r0, r3
    368e:	3724      	adds	r7, #36	; 0x24
    3690:	46bd      	mov	sp, r7
    3692:	bd90      	pop	{r4, r7, pc}
    3694:	06010002 	.word	0x06010002
    3698:	08000022 	.word	0x08000022
    369c:	06010000 	.word	0x06010000
    36a0:	06040042 	.word	0x06040042
    36a4:	0000307d 	.word	0x0000307d
    36a8:	00002dad 	.word	0x00002dad

000036ac <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    36ac:	b590      	push	{r4, r7, lr}
    36ae:	b087      	sub	sp, #28
    36b0:	af02      	add	r7, sp, #8
    36b2:	60f8      	str	r0, [r7, #12]
    36b4:	60b9      	str	r1, [r7, #8]
    36b6:	607a      	str	r2, [r7, #4]
    36b8:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    36ba:	68bb      	ldr	r3, [r7, #8]
    36bc:	2b00      	cmp	r3, #0
    36be:	d014      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d011      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d00e      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36cc:	6a3b      	ldr	r3, [r7, #32]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d00b      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36d4:	2b00      	cmp	r3, #0
    36d6:	d008      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36da:	2b00      	cmp	r3, #0
    36dc:	d005      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    36de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36e0:	2b00      	cmp	r3, #0
    36e2:	d002      	beq.n	36ea <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    36e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    36e6:	2b00      	cmp	r3, #0
    36e8:	d102      	bne.n	36f0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    36ea:	f04f 33ff 	mov.w	r3, #4294967295
    36ee:	e050      	b.n	3792 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    36f0:	68bb      	ldr	r3, [r7, #8]
    36f2:	687a      	ldr	r2, [r7, #4]
    36f4:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    36f6:	68bb      	ldr	r3, [r7, #8]
    36f8:	683a      	ldr	r2, [r7, #0]
    36fa:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    36fc:	68bb      	ldr	r3, [r7, #8]
    36fe:	6a3a      	ldr	r2, [r7, #32]
    3700:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    3702:	68bb      	ldr	r3, [r7, #8]
    3704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3706:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    3708:	68bb      	ldr	r3, [r7, #8]
    370a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    370c:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    370e:	68bb      	ldr	r3, [r7, #8]
    3710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3712:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    3714:	68bb      	ldr	r3, [r7, #8]
    3716:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    371a:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    371c:	68bb      	ldr	r3, [r7, #8]
    371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3720:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    3722:	68bb      	ldr	r3, [r7, #8]
    3724:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    3728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    372c:	4b1b      	ldr	r3, [pc, #108]	; (379c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	1d18      	adds	r0, r3, #4
    3732:	2300      	movs	r3, #0
    3734:	9301      	str	r3, [sp, #4]
    3736:	2300      	movs	r3, #0
    3738:	9300      	str	r3, [sp, #0]
    373a:	68bb      	ldr	r3, [r7, #8]
    373c:	4a18      	ldr	r2, [pc, #96]	; (37a0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    373e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3740:	4c18      	ldr	r4, [pc, #96]	; (37a4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    3742:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    3744:	4b15      	ldr	r3, [pc, #84]	; (379c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    3746:	681b      	ldr	r3, [r3, #0]
    3748:	1d18      	adds	r0, r3, #4
    374a:	2300      	movs	r3, #0
    374c:	9301      	str	r3, [sp, #4]
    374e:	2300      	movs	r3, #0
    3750:	9300      	str	r3, [sp, #0]
    3752:	68bb      	ldr	r3, [r7, #8]
    3754:	4a14      	ldr	r2, [pc, #80]	; (37a8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    3756:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3758:	4c12      	ldr	r4, [pc, #72]	; (37a4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    375a:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    375c:	68bb      	ldr	r3, [r7, #8]
    375e:	2200      	movs	r2, #0
    3760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    3764:	68bb      	ldr	r3, [r7, #8]
    3766:	2200      	movs	r2, #0
    3768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    376c:	68bb      	ldr	r3, [r7, #8]
    376e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3770:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    3772:	68bb      	ldr	r3, [r7, #8]
    3774:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3776:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    3778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	4619      	mov	r1, r3
    377e:	68b8      	ldr	r0, [r7, #8]
    3780:	4b0a      	ldr	r3, [pc, #40]	; (37ac <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    3782:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    3784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3786:	685b      	ldr	r3, [r3, #4]
    3788:	4619      	mov	r1, r3
    378a:	68b8      	ldr	r0, [r7, #8]
    378c:	4b08      	ldr	r3, [pc, #32]	; (37b0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    378e:	4798      	blx	r3

    return CO_ERROR_NO;
    3790:	2300      	movs	r3, #0
}
    3792:	4618      	mov	r0, r3
    3794:	3714      	adds	r7, #20
    3796:	46bd      	mov	sp, r7
    3798:	bd90      	pop	{r4, r7, pc}
    379a:	bf00      	nop
    379c:	20001a00 	.word	0x20001a00
    37a0:	0000314d 	.word	0x0000314d
    37a4:	00003e59 	.word	0x00003e59
    37a8:	000034b1 	.word	0x000034b1
    37ac:	00002fad 	.word	0x00002fad
    37b0:	00002c41 	.word	0x00002c41

000037b4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    37b4:	b590      	push	{r4, r7, lr}
    37b6:	b087      	sub	sp, #28
    37b8:	af02      	add	r7, sp, #8
    37ba:	60f8      	str	r0, [r7, #12]
    37bc:	60b9      	str	r1, [r7, #8]
    37be:	607a      	str	r2, [r7, #4]
    37c0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    37c2:	68bb      	ldr	r3, [r7, #8]
    37c4:	2b00      	cmp	r3, #0
    37c6:	d011      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d00e      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    37ce:	683b      	ldr	r3, [r7, #0]
    37d0:	2b00      	cmp	r3, #0
    37d2:	d00b      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    37d4:	6a3b      	ldr	r3, [r7, #32]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d008      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    37da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37dc:	2b00      	cmp	r3, #0
    37de:	d005      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    37e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37e2:	2b00      	cmp	r3, #0
    37e4:	d002      	beq.n	37ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    37e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    37e8:	2b00      	cmp	r3, #0
    37ea:	d102      	bne.n	37f2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    37ec:	f04f 33ff 	mov.w	r3, #4294967295
    37f0:	e07e      	b.n	38f0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
    37f2:	68bb      	ldr	r3, [r7, #8]
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    37f8:	68bb      	ldr	r3, [r7, #8]
    37fa:	683a      	ldr	r2, [r7, #0]
    37fc:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    37fe:	68bb      	ldr	r3, [r7, #8]
    3800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3802:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    3804:	68bb      	ldr	r3, [r7, #8]
    3806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3808:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    380a:	68bb      	ldr	r3, [r7, #8]
    380c:	6a3a      	ldr	r2, [r7, #32]
    380e:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    3810:	68bb      	ldr	r3, [r7, #8]
    3812:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    3816:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    3818:	68bb      	ldr	r3, [r7, #8]
    381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    381c:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    381e:	68bb      	ldr	r3, [r7, #8]
    3820:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    3824:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    3826:	4b34      	ldr	r3, [pc, #208]	; (38f8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
    3828:	681b      	ldr	r3, [r3, #0]
    382a:	1d18      	adds	r0, r3, #4
    382c:	2300      	movs	r3, #0
    382e:	9301      	str	r3, [sp, #4]
    3830:	2300      	movs	r3, #0
    3832:	9300      	str	r3, [sp, #0]
    3834:	68bb      	ldr	r3, [r7, #8]
    3836:	4a31      	ldr	r2, [pc, #196]	; (38fc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
    3838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    383a:	4c31      	ldr	r4, [pc, #196]	; (3900 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
    383c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    383e:	4b2e      	ldr	r3, [pc, #184]	; (38f8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	1d18      	adds	r0, r3, #4
    3844:	2300      	movs	r3, #0
    3846:	9301      	str	r3, [sp, #4]
    3848:	2300      	movs	r3, #0
    384a:	9300      	str	r3, [sp, #0]
    384c:	68bb      	ldr	r3, [r7, #8]
    384e:	4a2d      	ldr	r2, [pc, #180]	; (3904 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
    3850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3852:	4c2b      	ldr	r4, [pc, #172]	; (3900 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
    3854:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    3856:	68bb      	ldr	r3, [r7, #8]
    3858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    385a:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    385c:	68bb      	ldr	r3, [r7, #8]
    385e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3860:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	22ff      	movs	r2, #255	; 0xff
    3866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    386a:	68bb      	ldr	r3, [r7, #8]
    386c:	2200      	movs	r2, #0
    386e:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    3870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3872:	695b      	ldr	r3, [r3, #20]
    3874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3878:	fb02 f203 	mul.w	r2, r2, r3
    387c:	68bb      	ldr	r3, [r7, #8]
    387e:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    3880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3882:	7a1b      	ldrb	r3, [r3, #8]
    3884:	2bfd      	cmp	r3, #253	; 0xfd
    3886:	dd02      	ble.n	388e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    3888:	68bb      	ldr	r3, [r7, #8]
    388a:	2201      	movs	r2, #1
    388c:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	4619      	mov	r1, r3
    3894:	68b8      	ldr	r0, [r7, #8]
    3896:	4b1c      	ldr	r3, [pc, #112]	; (3908 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
    3898:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    389c:	6859      	ldr	r1, [r3, #4]
    389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38a0:	7a1b      	ldrb	r3, [r3, #8]
    38a2:	2bf0      	cmp	r3, #240	; 0xf0
    38a4:	dc01      	bgt.n	38aa <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    38a6:	2301      	movs	r3, #1
    38a8:	e000      	b.n	38ac <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    38aa:	2300      	movs	r3, #0
    38ac:	461a      	mov	r2, r3
    38ae:	68b8      	ldr	r0, [r7, #8]
    38b0:	4b16      	ldr	r3, [pc, #88]	; (390c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
    38b2:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    38b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38b6:	7a1b      	ldrb	r3, [r3, #8]
    38b8:	2bf0      	cmp	r3, #240	; 0xf0
    38ba:	dd03      	ble.n	38c4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    38bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38be:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    38c0:	2bfd      	cmp	r3, #253	; 0xfd
    38c2:	dd03      	ble.n	38cc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    38c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38c6:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    38c8:	2bf0      	cmp	r3, #240	; 0xf0
    38ca:	dd02      	ble.n	38d2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    38cc:	68bb      	ldr	r3, [r7, #8]
    38ce:	2200      	movs	r2, #0
    38d0:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    38d8:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
    38da:	68bb      	ldr	r3, [r7, #8]
    38dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    38de:	2210      	movs	r2, #16
    38e0:	4619      	mov	r1, r3
    38e2:	480b      	ldr	r0, [pc, #44]	; (3910 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
    38e4:	4b0b      	ldr	r3, [pc, #44]	; (3914 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
    38e6:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	4a09      	ldr	r2, [pc, #36]	; (3910 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
    38ec:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
    38ee:	2300      	movs	r3, #0
}
    38f0:	4618      	mov	r0, r3
    38f2:	3714      	adds	r7, #20
    38f4:	46bd      	mov	sp, r7
    38f6:	bd90      	pop	{r4, r7, pc}
    38f8:	20001a00 	.word	0x20001a00
    38fc:	000032cd 	.word	0x000032cd
    3900:	00003e59 	.word	0x00003e59
    3904:	000035b5 	.word	0x000035b5
    3908:	0000307d 	.word	0x0000307d
    390c:	00002d19 	.word	0x00002d19
    3910:	20001a14 	.word	0x20001a14
    3914:	00011c19 	.word	0x00011c19

00003918 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
    3918:	b580      	push	{r7, lr}
    391a:	b086      	sub	sp, #24
    391c:	af00      	add	r7, sp, #0
    391e:	60f8      	str	r0, [r7, #12]
    3920:	60b9      	str	r1, [r7, #8]
    3922:	4613      	mov	r3, r2
    3924:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	79fa      	ldrb	r2, [r7, #7]
    392c:	f502 7200 	add.w	r2, r2, #512	; 0x200
    3930:	0092      	lsls	r2, r2, #2
    3932:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
    3934:	2300      	movs	r3, #0
    3936:	75fb      	strb	r3, [r7, #23]
    3938:	7dfb      	ldrb	r3, [r7, #23]
    393a:	2b07      	cmp	r3, #7
    393c:	dc0d      	bgt.n	395a <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
    393e:	68fb      	ldr	r3, [r7, #12]
    3940:	681a      	ldr	r2, [r3, #0]
    3942:	7dfb      	ldrb	r3, [r7, #23]
    3944:	7df9      	ldrb	r1, [r7, #23]
    3946:	68b8      	ldr	r0, [r7, #8]
    3948:	4401      	add	r1, r0
    394a:	7809      	ldrb	r1, [r1, #0]
    394c:	4413      	add	r3, r2
    394e:	460a      	mov	r2, r1
    3950:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
    3952:	7dfb      	ldrb	r3, [r7, #23]
    3954:	3301      	adds	r3, #1
    3956:	75fb      	strb	r3, [r7, #23]
    3958:	e7ee      	b.n	3938 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	2204      	movs	r2, #4
    3960:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
    3962:	4b06      	ldr	r3, [pc, #24]	; (397c <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
    3964:	681a      	ldr	r2, [r3, #0]
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	4619      	mov	r1, r3
    396c:	4610      	mov	r0, r2
    396e:	4b04      	ldr	r3, [pc, #16]	; (3980 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
    3970:	4798      	blx	r3
    3972:	4603      	mov	r3, r0
}
    3974:	4618      	mov	r0, r3
    3976:	3718      	adds	r7, #24
    3978:	46bd      	mov	sp, r7
    397a:	bd80      	pop	{r7, pc}
    397c:	20001a00 	.word	0x20001a00
    3980:	00001fd9 	.word	0x00001fd9

00003984 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
    3984:	b580      	push	{r7, lr}
    3986:	b082      	sub	sp, #8
    3988:	af00      	add	r7, sp, #0
    398a:	6078      	str	r0, [r7, #4]
    398c:	6878      	ldr	r0, [r7, #4]
    398e:	4b05      	ldr	r3, [pc, #20]	; (39a4 <_ZN12CO_SDO_ClassC1Ev+0x20>)
    3990:	4798      	blx	r3
{
	ptrCOSDOClass=this;
    3992:	4a05      	ldr	r2, [pc, #20]	; (39a8 <_ZN12CO_SDO_ClassC1Ev+0x24>)
    3994:	687b      	ldr	r3, [r7, #4]
    3996:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	4618      	mov	r0, r3
    399c:	3708      	adds	r7, #8
    399e:	46bd      	mov	sp, r7
    39a0:	bd80      	pop	{r7, pc}
    39a2:	bf00      	nop
    39a4:	0000464d 	.word	0x0000464d
    39a8:	20001a3c 	.word	0x20001a3c

000039ac <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
    39ac:	b580      	push	{r7, lr}
    39ae:	b082      	sub	sp, #8
    39b0:	af00      	add	r7, sp, #0
    39b2:	6078      	str	r0, [r7, #4]
    39b4:	6878      	ldr	r0, [r7, #4]
    39b6:	4b03      	ldr	r3, [pc, #12]	; (39c4 <_ZN12CO_SDO_ClassD1Ev+0x18>)
    39b8:	4798      	blx	r3
{
} //~CO_SDO_Class
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	4618      	mov	r0, r3
    39be:	3708      	adds	r7, #8
    39c0:	46bd      	mov	sp, r7
    39c2:	bd80      	pop	{r7, pc}
    39c4:	00004661 	.word	0x00004661

000039c8 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
    39c8:	b480      	push	{r7}
    39ca:	b087      	sub	sp, #28
    39cc:	af00      	add	r7, sp, #0
    39ce:	60f8      	str	r0, [r7, #12]
    39d0:	60b9      	str	r1, [r7, #8]
    39d2:	607a      	str	r2, [r7, #4]
    39d4:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
    39d6:	2300      	movs	r3, #0
    39d8:	617b      	str	r3, [r7, #20]
    39da:	697a      	ldr	r2, [r7, #20]
    39dc:	683b      	ldr	r3, [r7, #0]
    39de:	429a      	cmp	r2, r3
    39e0:	d20b      	bcs.n	39fa <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
    39e2:	68ba      	ldr	r2, [r7, #8]
    39e4:	697b      	ldr	r3, [r7, #20]
    39e6:	4413      	add	r3, r2
    39e8:	6879      	ldr	r1, [r7, #4]
    39ea:	697a      	ldr	r2, [r7, #20]
    39ec:	440a      	add	r2, r1
    39ee:	7812      	ldrb	r2, [r2, #0]
    39f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
    39f2:	697b      	ldr	r3, [r7, #20]
    39f4:	3301      	adds	r3, #1
    39f6:	617b      	str	r3, [r7, #20]
    39f8:	e7ef      	b.n	39da <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
    39fa:	bf00      	nop
    39fc:	371c      	adds	r7, #28
    39fe:	46bd      	mov	sp, r7
    3a00:	bc80      	pop	{r7}
    3a02:	4770      	bx	lr

00003a04 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
    3a04:	b480      	push	{r7}
    3a06:	b087      	sub	sp, #28
    3a08:	af00      	add	r7, sp, #0
    3a0a:	6078      	str	r0, [r7, #4]
    3a0c:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
    3a0e:	683b      	ldr	r3, [r7, #0]
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	3301      	adds	r3, #1
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
    3a1c:	683b      	ldr	r3, [r7, #0]
    3a1e:	3302      	adds	r3, #2
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
    3a24:	683b      	ldr	r3, [r7, #0]
    3a26:	3303      	adds	r3, #3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
    3a2c:	68bb      	ldr	r3, [r7, #8]
}
    3a2e:	4618      	mov	r0, r3
    3a30:	371c      	adds	r7, #28
    3a32:	46bd      	mov	sp, r7
    3a34:	bc80      	pop	{r7}
    3a36:	4770      	bx	lr

00003a38 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
    3a38:	b480      	push	{r7}
    3a3a:	b089      	sub	sp, #36	; 0x24
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60f8      	str	r0, [r7, #12]
    3a40:	60b9      	str	r1, [r7, #8]
    3a42:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
    3a48:	7c3a      	ldrb	r2, [r7, #16]
    3a4a:	68bb      	ldr	r3, [r7, #8]
    3a4c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
    3a4e:	68bb      	ldr	r3, [r7, #8]
    3a50:	3301      	adds	r3, #1
    3a52:	7c7a      	ldrb	r2, [r7, #17]
    3a54:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
    3a56:	68bb      	ldr	r3, [r7, #8]
    3a58:	3302      	adds	r3, #2
    3a5a:	7cba      	ldrb	r2, [r7, #18]
    3a5c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
    3a5e:	68bb      	ldr	r3, [r7, #8]
    3a60:	3303      	adds	r3, #3
    3a62:	7cfa      	ldrb	r2, [r7, #19]
    3a64:	701a      	strb	r2, [r3, #0]
}
    3a66:	bf00      	nop
    3a68:	3724      	adds	r7, #36	; 0x24
    3a6a:	46bd      	mov	sp, r7
    3a6c:	bc80      	pop	{r7}
    3a6e:	4770      	bx	lr

00003a70 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
    3a70:	b480      	push	{r7}
    3a72:	b087      	sub	sp, #28
    3a74:	af00      	add	r7, sp, #0
    3a76:	60f8      	str	r0, [r7, #12]
    3a78:	60b9      	str	r1, [r7, #8]
    3a7a:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    3a7c:	68bb      	ldr	r3, [r7, #8]
    3a7e:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    3a84:	693b      	ldr	r3, [r7, #16]
    3a86:	781a      	ldrb	r2, [r3, #0]
    3a88:	697b      	ldr	r3, [r7, #20]
    3a8a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    3a8c:	697b      	ldr	r3, [r7, #20]
    3a8e:	3301      	adds	r3, #1
    3a90:	693a      	ldr	r2, [r7, #16]
    3a92:	7852      	ldrb	r2, [r2, #1]
    3a94:	701a      	strb	r2, [r3, #0]
}
    3a96:	bf00      	nop
    3a98:	371c      	adds	r7, #28
    3a9a:	46bd      	mov	sp, r7
    3a9c:	bc80      	pop	{r7}
    3a9e:	4770      	bx	lr

00003aa0 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
    3aa0:	b480      	push	{r7}
    3aa2:	b087      	sub	sp, #28
    3aa4:	af00      	add	r7, sp, #0
    3aa6:	60f8      	str	r0, [r7, #12]
    3aa8:	60b9      	str	r1, [r7, #8]
    3aaa:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
    3aac:	68bb      	ldr	r3, [r7, #8]
    3aae:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
    3ab4:	693b      	ldr	r3, [r7, #16]
    3ab6:	781a      	ldrb	r2, [r3, #0]
    3ab8:	697b      	ldr	r3, [r7, #20]
    3aba:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
    3abc:	697b      	ldr	r3, [r7, #20]
    3abe:	3301      	adds	r3, #1
    3ac0:	693a      	ldr	r2, [r7, #16]
    3ac2:	7852      	ldrb	r2, [r2, #1]
    3ac4:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
    3ac6:	697b      	ldr	r3, [r7, #20]
    3ac8:	3302      	adds	r3, #2
    3aca:	693a      	ldr	r2, [r7, #16]
    3acc:	7892      	ldrb	r2, [r2, #2]
    3ace:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
    3ad0:	697b      	ldr	r3, [r7, #20]
    3ad2:	3303      	adds	r3, #3
    3ad4:	693a      	ldr	r2, [r7, #16]
    3ad6:	78d2      	ldrb	r2, [r2, #3]
    3ad8:	701a      	strb	r2, [r3, #0]
}
    3ada:	bf00      	nop
    3adc:	371c      	adds	r7, #28
    3ade:	46bd      	mov	sp, r7
    3ae0:	bc80      	pop	{r7}
    3ae2:	4770      	bx	lr

00003ae4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
    3ae4:	b580      	push	{r7, lr}
    3ae6:	b086      	sub	sp, #24
    3ae8:	af00      	add	r7, sp, #0
    3aea:	6078      	str	r0, [r7, #4]
    3aec:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
    3af2:	683b      	ldr	r3, [r7, #0]
    3af4:	7d1b      	ldrb	r3, [r3, #20]
    3af6:	2b08      	cmp	r3, #8
    3af8:	f040 80a4 	bne.w	3c44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    3afc:	693b      	ldr	r3, [r7, #16]
    3afe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    3b02:	2b00      	cmp	r3, #0
    3b04:	f040 809e 	bne.w	3c44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
    3b08:	693b      	ldr	r3, [r7, #16]
    3b0a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
    3b0e:	2b15      	cmp	r3, #21
    3b10:	d024      	beq.n	3b5c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
    3b12:	683b      	ldr	r3, [r7, #0]
    3b14:	7d5a      	ldrb	r2, [r3, #21]
    3b16:	693b      	ldr	r3, [r7, #16]
    3b18:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	7d9a      	ldrb	r2, [r3, #22]
    3b1e:	693b      	ldr	r3, [r7, #16]
    3b20:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
    3b22:	683b      	ldr	r3, [r7, #0]
    3b24:	7dda      	ldrb	r2, [r3, #23]
    3b26:	693b      	ldr	r3, [r7, #16]
    3b28:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
    3b2a:	683b      	ldr	r3, [r7, #0]
    3b2c:	7e1a      	ldrb	r2, [r3, #24]
    3b2e:	693b      	ldr	r3, [r7, #16]
    3b30:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
    3b32:	683b      	ldr	r3, [r7, #0]
    3b34:	7e5a      	ldrb	r2, [r3, #25]
    3b36:	693b      	ldr	r3, [r7, #16]
    3b38:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
    3b3a:	683b      	ldr	r3, [r7, #0]
    3b3c:	7e9a      	ldrb	r2, [r3, #26]
    3b3e:	693b      	ldr	r3, [r7, #16]
    3b40:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
    3b42:	683b      	ldr	r3, [r7, #0]
    3b44:	7eda      	ldrb	r2, [r3, #27]
    3b46:	693b      	ldr	r3, [r7, #16]
    3b48:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
    3b4a:	683b      	ldr	r3, [r7, #0]
    3b4c:	7f1a      	ldrb	r2, [r3, #28]
    3b4e:	693b      	ldr	r3, [r7, #16]
    3b50:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
    3b52:	693b      	ldr	r3, [r7, #16]
    3b54:	2201      	movs	r2, #1
    3b56:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    3b5a:	e067      	b.n	3c2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
    3b5c:	683b      	ldr	r3, [r7, #0]
    3b5e:	7d5a      	ldrb	r2, [r3, #21]
    3b60:	693b      	ldr	r3, [r7, #16]
    3b62:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
    3b64:	693b      	ldr	r3, [r7, #16]
    3b66:	781b      	ldrb	r3, [r3, #0]
    3b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b6c:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
    3b6e:	693b      	ldr	r3, [r7, #16]
    3b70:	2200      	movs	r2, #0
    3b72:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
    3b74:	7bfa      	ldrb	r2, [r7, #15]
    3b76:	693b      	ldr	r3, [r7, #16]
    3b78:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3b7c:	3301      	adds	r3, #1
    3b7e:	429a      	cmp	r2, r3
    3b80:	d141      	bne.n	3c06 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
    3b82:	693b      	ldr	r3, [r7, #16]
    3b84:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3b88:	3301      	adds	r3, #1
    3b8a:	b2da      	uxtb	r2, r3
    3b8c:	693b      	ldr	r3, [r7, #16]
    3b8e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
    3b92:	2301      	movs	r3, #1
    3b94:	75fb      	strb	r3, [r7, #23]
    3b96:	7dfb      	ldrb	r3, [r7, #23]
    3b98:	2b07      	cmp	r3, #7
    3b9a:	dc1d      	bgt.n	3bd8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
    3b9c:	693b      	ldr	r3, [r7, #16]
    3b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ba0:	693b      	ldr	r3, [r7, #16]
    3ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3ba4:	1c58      	adds	r0, r3, #1
    3ba6:	6939      	ldr	r1, [r7, #16]
    3ba8:	6388      	str	r0, [r1, #56]	; 0x38
    3baa:	4413      	add	r3, r2
    3bac:	7dfa      	ldrb	r2, [r7, #23]
    3bae:	6839      	ldr	r1, [r7, #0]
    3bb0:	440a      	add	r2, r1
    3bb2:	7d52      	ldrb	r2, [r2, #21]
    3bb4:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
    3bb6:	693b      	ldr	r3, [r7, #16]
    3bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3bba:	2b1f      	cmp	r3, #31
    3bbc:	d908      	bls.n	3bd0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3bbe:	693b      	ldr	r3, [r7, #16]
    3bc0:	2216      	movs	r2, #22
    3bc2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
    3bc6:	693b      	ldr	r3, [r7, #16]
    3bc8:	2201      	movs	r2, #1
    3bca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
    3bce:	e003      	b.n	3bd8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
    3bd0:	7dfb      	ldrb	r3, [r7, #23]
    3bd2:	3301      	adds	r3, #1
    3bd4:	75fb      	strb	r3, [r7, #23]
    3bd6:	e7de      	b.n	3b96 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
    3bd8:	693b      	ldr	r3, [r7, #16]
    3bda:	781b      	ldrb	r3, [r3, #0]
    3bdc:	b25b      	sxtb	r3, r3
    3bde:	2b00      	cmp	r3, #0
    3be0:	db08      	blt.n	3bf4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
    3be2:	693b      	ldr	r3, [r7, #16]
    3be4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3be8:	461a      	mov	r2, r3
    3bea:	693b      	ldr	r3, [r7, #16]
    3bec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    3bf0:	429a      	cmp	r2, r3
    3bf2:	db1b      	blt.n	3c2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3bf4:	693b      	ldr	r3, [r7, #16]
    3bf6:	2216      	movs	r2, #22
    3bf8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
    3bfc:	693b      	ldr	r3, [r7, #16]
    3bfe:	2201      	movs	r2, #1
    3c00:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    3c04:	e012      	b.n	3c2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
    3c06:	693b      	ldr	r3, [r7, #16]
    3c08:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3c0c:	7bfa      	ldrb	r2, [r7, #15]
    3c0e:	429a      	cmp	r2, r3
    3c10:	d00c      	beq.n	3c2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
    3c12:	693b      	ldr	r3, [r7, #16]
    3c14:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d007      	beq.n	3c2c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
    3c1c:	693b      	ldr	r3, [r7, #16]
    3c1e:	2216      	movs	r2, #22
    3c20:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
    3c24:	693b      	ldr	r3, [r7, #16]
    3c26:	2201      	movs	r2, #1
    3c28:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
    3c2c:	693b      	ldr	r3, [r7, #16]
    3c2e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
    3c32:	2b00      	cmp	r3, #0
    3c34:	d006      	beq.n	3c44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
    3c36:	693b      	ldr	r3, [r7, #16]
    3c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d002      	beq.n	3c44 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
    3c3e:	693b      	ldr	r3, [r7, #16]
    3c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    3c42:	4798      	blx	r3
        }
    }
}
    3c44:	bf00      	nop
    3c46:	3718      	adds	r7, #24
    3c48:	46bd      	mov	sp, r7
    3c4a:	bd80      	pop	{r7, pc}

00003c4c <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b086      	sub	sp, #24
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    3c54:	2300      	movs	r3, #0
    3c56:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
    3c58:	687b      	ldr	r3, [r7, #4]
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
    3c5e:	4b12      	ldr	r3, [pc, #72]	; (3ca8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	1d1a      	adds	r2, r3, #4
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	685b      	ldr	r3, [r3, #4]
    3c68:	4619      	mov	r1, r3
    3c6a:	4610      	mov	r0, r2
    3c6c:	4b0f      	ldr	r3, [pc, #60]	; (3cac <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
    3c6e:	4798      	blx	r3
    3c70:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	7f5b      	ldrb	r3, [r3, #29]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d010      	beq.n	3c9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	7f1b      	ldrb	r3, [r3, #28]
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d00c      	beq.n	3c9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
    3c82:	4b09      	ldr	r3, [pc, #36]	; (3ca8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
    3c84:	681b      	ldr	r3, [r3, #0]
    3c86:	1d18      	adds	r0, r3, #4
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	6859      	ldr	r1, [r3, #4]
    3c8c:	693b      	ldr	r3, [r7, #16]
    3c8e:	781b      	ldrb	r3, [r3, #0]
    3c90:	461a      	mov	r2, r3
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	4413      	add	r3, r2
    3c96:	461a      	mov	r2, r3
    3c98:	4b05      	ldr	r3, [pc, #20]	; (3cb0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
    3c9a:	4798      	blx	r3
    }

    return ret;
    3c9c:	697b      	ldr	r3, [r7, #20]
}
    3c9e:	4618      	mov	r0, r3
    3ca0:	3718      	adds	r7, #24
    3ca2:	46bd      	mov	sp, r7
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	bf00      	nop
    3ca8:	20001a00 	.word	0x20001a00
    3cac:	00003a05 	.word	0x00003a05
    3cb0:	00003a39 	.word	0x00003a39

00003cb4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    3cb4:	b5b0      	push	{r4, r5, r7, lr}
    3cb6:	b08a      	sub	sp, #40	; 0x28
    3cb8:	af04      	add	r7, sp, #16
    3cba:	60f8      	str	r0, [r7, #12]
    3cbc:	60b9      	str	r1, [r7, #8]
    3cbe:	607a      	str	r2, [r7, #4]
    3cc0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
    3cc2:	68bb      	ldr	r3, [r7, #8]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d005      	beq.n	3cd4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    3cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d002      	beq.n	3cd4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
    3cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d102      	bne.n	3cda <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    3cd4:	f04f 33ff 	mov.w	r3, #4294967295
    3cd8:	e0ac      	b.n	3e34 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
    3cda:	4a58      	ldr	r2, [pc, #352]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3cdc:	68bb      	ldr	r3, [r7, #8]
    3cde:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
    3ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d13b      	bne.n	3d5e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
    3ce6:	4b55      	ldr	r3, [pc, #340]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3ce8:	681b      	ldr	r3, [r3, #0]
    3cea:	2201      	movs	r2, #1
    3cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
    3cf0:	4b52      	ldr	r3, [pc, #328]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3cf6:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
    3cf8:	4b50      	ldr	r3, [pc, #320]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3cfa:	681b      	ldr	r3, [r3, #0]
    3cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3cfe:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
    3d00:	4b4e      	ldr	r3, [pc, #312]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d06:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
    3d08:	2300      	movs	r3, #0
    3d0a:	617b      	str	r3, [r7, #20]
    3d0c:	697a      	ldr	r2, [r7, #20]
    3d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d10:	429a      	cmp	r2, r3
    3d12:	d238      	bcs.n	3d86 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
    3d14:	4b49      	ldr	r3, [pc, #292]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3d1a:	697a      	ldr	r2, [r7, #20]
    3d1c:	4613      	mov	r3, r2
    3d1e:	005b      	lsls	r3, r3, #1
    3d20:	4413      	add	r3, r2
    3d22:	009b      	lsls	r3, r3, #2
    3d24:	440b      	add	r3, r1
    3d26:	2200      	movs	r2, #0
    3d28:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
    3d2a:	4b44      	ldr	r3, [pc, #272]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3d30:	697a      	ldr	r2, [r7, #20]
    3d32:	4613      	mov	r3, r2
    3d34:	005b      	lsls	r3, r3, #1
    3d36:	4413      	add	r3, r2
    3d38:	009b      	lsls	r3, r3, #2
    3d3a:	440b      	add	r3, r1
    3d3c:	2200      	movs	r2, #0
    3d3e:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
    3d40:	4b3e      	ldr	r3, [pc, #248]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3d46:	697a      	ldr	r2, [r7, #20]
    3d48:	4613      	mov	r3, r2
    3d4a:	005b      	lsls	r3, r3, #1
    3d4c:	4413      	add	r3, r2
    3d4e:	009b      	lsls	r3, r3, #2
    3d50:	440b      	add	r3, r1
    3d52:	2200      	movs	r2, #0
    3d54:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
    3d56:	697b      	ldr	r3, [r7, #20]
    3d58:	3301      	adds	r3, #1
    3d5a:	617b      	str	r3, [r7, #20]
    3d5c:	e7d6      	b.n	3d0c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
    3d5e:	4b37      	ldr	r3, [pc, #220]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2200      	movs	r2, #0
    3d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
    3d68:	4b34      	ldr	r3, [pc, #208]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3d70:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
    3d72:	4b32      	ldr	r3, [pc, #200]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
    3d7a:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
    3d7c:	4b2f      	ldr	r3, [pc, #188]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
    3d84:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
    3d86:	4b2d      	ldr	r3, [pc, #180]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    3d8e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
    3d92:	4b2a      	ldr	r3, [pc, #168]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	2200      	movs	r2, #0
    3d98:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
    3d9c:	4b27      	ldr	r3, [pc, #156]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	2200      	movs	r2, #0
    3da2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
    3da6:	4b25      	ldr	r3, [pc, #148]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	2200      	movs	r2, #0
    3dac:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
    3dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3db0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    3db4:	d10f      	bne.n	3dd6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
    3db6:	4b22      	ldr	r3, [pc, #136]	; (3e40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	1d18      	adds	r0, r3, #4
    3dbc:	4b1f      	ldr	r3, [pc, #124]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	f103 0268 	add.w	r2, r3, #104	; 0x68
    3dc4:	2300      	movs	r3, #0
    3dc6:	9301      	str	r3, [sp, #4]
    3dc8:	2300      	movs	r3, #0
    3dca:	9300      	str	r3, [sp, #0]
    3dcc:	4613      	mov	r3, r2
    3dce:	4a1d      	ldr	r2, [pc, #116]	; (3e44 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
    3dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3dd2:	4c1d      	ldr	r4, [pc, #116]	; (3e48 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
    3dd4:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	2b00      	cmp	r3, #0
    3dda:	db02      	blt.n	3de2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
    3ddc:	683b      	ldr	r3, [r7, #0]
    3dde:	2b00      	cmp	r3, #0
    3de0:	da03      	bge.n	3dea <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
    3de2:	2300      	movs	r3, #0
    3de4:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
    3de6:	2300      	movs	r3, #0
    3de8:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
    3dea:	4b15      	ldr	r3, [pc, #84]	; (3e40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3dec:	6818      	ldr	r0, [r3, #0]
    3dee:	4b13      	ldr	r3, [pc, #76]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3df0:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
    3df2:	4a16      	ldr	r2, [pc, #88]	; (3e4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
    3df4:	9202      	str	r2, [sp, #8]
    3df6:	9301      	str	r3, [sp, #4]
    3df8:	2300      	movs	r3, #0
    3dfa:	9300      	str	r3, [sp, #0]
    3dfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    3e00:	687a      	ldr	r2, [r7, #4]
    3e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
    3e04:	4c12      	ldr	r4, [pc, #72]	; (3e50 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
    3e06:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
    3e08:	4b0c      	ldr	r3, [pc, #48]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3e0a:	681b      	ldr	r3, [r3, #0]
    3e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    3e12:	4b0a      	ldr	r3, [pc, #40]	; (3e3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
    3e14:	681c      	ldr	r4, [r3, #0]
    3e16:	4b0a      	ldr	r3, [pc, #40]	; (3e40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
    3e18:	6818      	ldr	r0, [r3, #0]
    3e1a:	2300      	movs	r3, #0
    3e1c:	9301      	str	r3, [sp, #4]
    3e1e:	2308      	movs	r3, #8
    3e20:	9300      	str	r3, [sp, #0]
    3e22:	2300      	movs	r3, #0
    3e24:	683a      	ldr	r2, [r7, #0]
    3e26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3e28:	4d0a      	ldr	r5, [pc, #40]	; (3e54 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
    3e2a:	47a8      	blx	r5
    3e2c:	4603      	mov	r3, r0
    3e2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
    3e32:	2300      	movs	r3, #0
}
    3e34:	4618      	mov	r0, r3
    3e36:	3718      	adds	r7, #24
    3e38:	46bd      	mov	sp, r7
    3e3a:	bdb0      	pop	{r4, r5, r7, pc}
    3e3c:	20001a40 	.word	0x20001a40
    3e40:	20001a00 	.word	0x20001a00
    3e44:	00003c4d 	.word	0x00003c4d
    3e48:	00003e59 	.word	0x00003e59
    3e4c:	00003ae5 	.word	0x00003ae5
    3e50:	00001e2d 	.word	0x00001e2d
    3e54:	00001f2d 	.word	0x00001f2d

00003e58 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b088      	sub	sp, #32
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	60f8      	str	r0, [r7, #12]
    3e60:	60b9      	str	r1, [r7, #8]
    3e62:	607a      	str	r2, [r7, #4]
    3e64:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
    3e66:	4b28      	ldr	r3, [pc, #160]	; (3f08 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	3304      	adds	r3, #4
    3e6c:	68b9      	ldr	r1, [r7, #8]
    3e6e:	4618      	mov	r0, r3
    3e70:	4b26      	ldr	r3, [pc, #152]	; (3f0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
    3e72:	4798      	blx	r3
    3e74:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
    3e76:	69bb      	ldr	r3, [r7, #24]
    3e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    3e7c:	4293      	cmp	r3, r2
    3e7e:	d83e      	bhi.n	3efe <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
    3e80:	4b23      	ldr	r3, [pc, #140]	; (3f10 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3e86:	69ba      	ldr	r2, [r7, #24]
    3e88:	4613      	mov	r3, r2
    3e8a:	005b      	lsls	r3, r3, #1
    3e8c:	4413      	add	r3, r2
    3e8e:	009b      	lsls	r3, r3, #2
    3e90:	440b      	add	r3, r1
    3e92:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
    3e94:	4b1e      	ldr	r3, [pc, #120]	; (3f10 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3e9a:	69ba      	ldr	r2, [r7, #24]
    3e9c:	4613      	mov	r3, r2
    3e9e:	009b      	lsls	r3, r3, #2
    3ea0:	4413      	add	r3, r2
    3ea2:	009b      	lsls	r3, r3, #2
    3ea4:	440b      	add	r3, r1
    3ea6:	791b      	ldrb	r3, [r3, #4]
    3ea8:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
    3eaa:	697b      	ldr	r3, [r7, #20]
    3eac:	687a      	ldr	r2, [r7, #4]
    3eae:	601a      	str	r2, [r3, #0]
        ext->object = object;
    3eb0:	697b      	ldr	r3, [r7, #20]
    3eb2:	683a      	ldr	r2, [r7, #0]
    3eb4:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
    3eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d01b      	beq.n	3ef4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    3ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d017      	beq.n	3ef4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
    3ec4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    3ec8:	7cfb      	ldrb	r3, [r7, #19]
    3eca:	429a      	cmp	r2, r3
    3ecc:	d112      	bne.n	3ef4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
    3ece:	697b      	ldr	r3, [r7, #20]
    3ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ed2:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
    3ed4:	2300      	movs	r3, #0
    3ed6:	61fb      	str	r3, [r7, #28]
    3ed8:	7cfa      	ldrb	r2, [r7, #19]
    3eda:	69fb      	ldr	r3, [r7, #28]
    3edc:	429a      	cmp	r2, r3
    3ede:	d30d      	bcc.n	3efc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
    3ee0:	697b      	ldr	r3, [r7, #20]
    3ee2:	689a      	ldr	r2, [r3, #8]
    3ee4:	69fb      	ldr	r3, [r7, #28]
    3ee6:	4413      	add	r3, r2
    3ee8:	2200      	movs	r2, #0
    3eea:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
    3eec:	69fb      	ldr	r3, [r7, #28]
    3eee:	3301      	adds	r3, #1
    3ef0:	61fb      	str	r3, [r7, #28]
    3ef2:	e7f1      	b.n	3ed8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
    3ef4:	697b      	ldr	r3, [r7, #20]
    3ef6:	2200      	movs	r2, #0
    3ef8:	609a      	str	r2, [r3, #8]
        }
    }
}
    3efa:	e000      	b.n	3efe <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
    3efc:	bf00      	nop
}
    3efe:	bf00      	nop
    3f00:	3720      	adds	r7, #32
    3f02:	46bd      	mov	sp, r7
    3f04:	bd80      	pop	{r7, pc}
    3f06:	bf00      	nop
    3f08:	20001a00 	.word	0x20001a00
    3f0c:	00003f15 	.word	0x00003f15
    3f10:	20001a40 	.word	0x20001a40

00003f14 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
    3f14:	b480      	push	{r7}
    3f16:	b087      	sub	sp, #28
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
    3f1c:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
    3f1e:	2300      	movs	r3, #0
    3f20:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
    3f22:	4b26      	ldr	r3, [pc, #152]	; (3fbc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3f24:	681b      	ldr	r3, [r3, #0]
    3f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3f28:	3b01      	subs	r3, #1
    3f2a:	613b      	str	r3, [r7, #16]
    while(min < max){
    3f2c:	697a      	ldr	r2, [r7, #20]
    3f2e:	693b      	ldr	r3, [r7, #16]
    3f30:	429a      	cmp	r2, r3
    3f32:	d227      	bcs.n	3f84 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
    3f34:	697a      	ldr	r2, [r7, #20]
    3f36:	693b      	ldr	r3, [r7, #16]
    3f38:	4413      	add	r3, r2
    3f3a:	085b      	lsrs	r3, r3, #1
    3f3c:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
    3f3e:	4b1f      	ldr	r3, [pc, #124]	; (3fbc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3f44:	68fa      	ldr	r2, [r7, #12]
    3f46:	4613      	mov	r3, r2
    3f48:	009b      	lsls	r3, r3, #2
    3f4a:	4413      	add	r3, r2
    3f4c:	009b      	lsls	r3, r3, #2
    3f4e:	440b      	add	r3, r1
    3f50:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    3f52:	68bb      	ldr	r3, [r7, #8]
    3f54:	681a      	ldr	r2, [r3, #0]
    3f56:	683b      	ldr	r3, [r7, #0]
    3f58:	429a      	cmp	r2, r3
    3f5a:	d101      	bne.n	3f60 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
    3f5c:	68fb      	ldr	r3, [r7, #12]
    3f5e:	e028      	b.n	3fb2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
    3f60:	68bb      	ldr	r3, [r7, #8]
    3f62:	681a      	ldr	r2, [r3, #0]
    3f64:	683b      	ldr	r3, [r7, #0]
    3f66:	429a      	cmp	r2, r3
    3f68:	d908      	bls.n	3f7c <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
    3f6a:	68fb      	ldr	r3, [r7, #12]
    3f6c:	613b      	str	r3, [r7, #16]
            if(max) max--;
    3f6e:	693b      	ldr	r3, [r7, #16]
    3f70:	2b00      	cmp	r3, #0
    3f72:	d0db      	beq.n	3f2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    3f74:	693b      	ldr	r3, [r7, #16]
    3f76:	3b01      	subs	r3, #1
    3f78:	613b      	str	r3, [r7, #16]
    3f7a:	e7d7      	b.n	3f2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
    3f7c:	68fb      	ldr	r3, [r7, #12]
    3f7e:	3301      	adds	r3, #1
    3f80:	617b      	str	r3, [r7, #20]
    while(min < max){
    3f82:	e7d3      	b.n	3f2c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
    3f84:	697a      	ldr	r2, [r7, #20]
    3f86:	693b      	ldr	r3, [r7, #16]
    3f88:	429a      	cmp	r2, r3
    3f8a:	d110      	bne.n	3fae <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
    3f8c:	4b0b      	ldr	r3, [pc, #44]	; (3fbc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
    3f8e:	681b      	ldr	r3, [r3, #0]
    3f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3f92:	697a      	ldr	r2, [r7, #20]
    3f94:	4613      	mov	r3, r2
    3f96:	009b      	lsls	r3, r3, #2
    3f98:	4413      	add	r3, r2
    3f9a:	009b      	lsls	r3, r3, #2
    3f9c:	440b      	add	r3, r1
    3f9e:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
    3fa0:	68bb      	ldr	r3, [r7, #8]
    3fa2:	681a      	ldr	r2, [r3, #0]
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	429a      	cmp	r2, r3
    3fa8:	d101      	bne.n	3fae <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
    3faa:	697b      	ldr	r3, [r7, #20]
    3fac:	e001      	b.n	3fb2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
    3fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    3fb2:	4618      	mov	r0, r3
    3fb4:	371c      	adds	r7, #28
    3fb6:	46bd      	mov	sp, r7
    3fb8:	bc80      	pop	{r7}
    3fba:	4770      	bx	lr
    3fbc:	20001a40 	.word	0x20001a40

00003fc0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
    3fc0:	b480      	push	{r7}
    3fc2:	b087      	sub	sp, #28
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	60f8      	str	r0, [r7, #12]
    3fc8:	60b9      	str	r1, [r7, #8]
    3fca:	4613      	mov	r3, r2
    3fcc:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    3fce:	4b25      	ldr	r3, [pc, #148]	; (4064 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3fd4:	68ba      	ldr	r2, [r7, #8]
    3fd6:	4613      	mov	r3, r2
    3fd8:	009b      	lsls	r3, r3, #2
    3fda:	4413      	add	r3, r2
    3fdc:	009b      	lsls	r3, r3, #2
    3fde:	440b      	add	r3, r1
    3fe0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    3fe2:	68bb      	ldr	r3, [r7, #8]
    3fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3fe8:	4293      	cmp	r3, r2
    3fea:	d101      	bne.n	3ff0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
    3fec:	2300      	movs	r3, #0
    3fee:	e034      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
    3ff0:	697b      	ldr	r3, [r7, #20]
    3ff2:	791b      	ldrb	r3, [r3, #4]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d108      	bne.n	400a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
    3ff8:	697b      	ldr	r3, [r7, #20]
    3ffa:	691b      	ldr	r3, [r3, #16]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d101      	bne.n	4004 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
    4000:	2320      	movs	r3, #32
    4002:	e02a      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    4004:	697b      	ldr	r3, [r7, #20]
    4006:	68db      	ldr	r3, [r3, #12]
    4008:	e027      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
    400a:	697b      	ldr	r3, [r7, #20]
    400c:	689b      	ldr	r3, [r3, #8]
    400e:	2b00      	cmp	r3, #0
    4010:	d00d      	beq.n	402e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
    4012:	79fb      	ldrb	r3, [r7, #7]
    4014:	2b00      	cmp	r3, #0
    4016:	d101      	bne.n	401c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
    4018:	2301      	movs	r3, #1
    401a:	e01e      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
    401c:	697b      	ldr	r3, [r7, #20]
    401e:	691b      	ldr	r3, [r3, #16]
    4020:	2b00      	cmp	r3, #0
    4022:	d101      	bne.n	4028 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    4024:	2320      	movs	r3, #32
    4026:	e018      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
    4028:	697b      	ldr	r3, [r7, #20]
    402a:	68db      	ldr	r3, [r3, #12]
    402c:	e015      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
    402e:	697b      	ldr	r3, [r7, #20]
    4030:	6919      	ldr	r1, [r3, #16]
    4032:	79fa      	ldrb	r2, [r7, #7]
    4034:	4613      	mov	r3, r2
    4036:	005b      	lsls	r3, r3, #1
    4038:	4413      	add	r3, r2
    403a:	009b      	lsls	r3, r3, #2
    403c:	440b      	add	r3, r1
    403e:	681b      	ldr	r3, [r3, #0]
    4040:	2b00      	cmp	r3, #0
    4042:	d101      	bne.n	4048 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
    4044:	2320      	movs	r3, #32
    4046:	e008      	b.n	405a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
    4048:	697b      	ldr	r3, [r7, #20]
    404a:	6919      	ldr	r1, [r3, #16]
    404c:	79fa      	ldrb	r2, [r7, #7]
    404e:	4613      	mov	r3, r2
    4050:	005b      	lsls	r3, r3, #1
    4052:	4413      	add	r3, r2
    4054:	009b      	lsls	r3, r3, #2
    4056:	440b      	add	r3, r1
    4058:	689b      	ldr	r3, [r3, #8]
        }
    }
}
    405a:	4618      	mov	r0, r3
    405c:	371c      	adds	r7, #28
    405e:	46bd      	mov	sp, r7
    4060:	bc80      	pop	{r7}
    4062:	4770      	bx	lr
    4064:	20001a40 	.word	0x20001a40

00004068 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
    4068:	b480      	push	{r7}
    406a:	b089      	sub	sp, #36	; 0x24
    406c:	af00      	add	r7, sp, #0
    406e:	60f8      	str	r0, [r7, #12]
    4070:	60b9      	str	r1, [r7, #8]
    4072:	4613      	mov	r3, r2
    4074:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4076:	4b27      	ldr	r3, [pc, #156]	; (4114 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
    4078:	681b      	ldr	r3, [r3, #0]
    407a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    407c:	68ba      	ldr	r2, [r7, #8]
    407e:	4613      	mov	r3, r2
    4080:	009b      	lsls	r3, r3, #2
    4082:	4413      	add	r3, r2
    4084:	009b      	lsls	r3, r3, #2
    4086:	440b      	add	r3, r1
    4088:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    408a:	68bb      	ldr	r3, [r7, #8]
    408c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4090:	4293      	cmp	r3, r2
    4092:	d101      	bne.n	4098 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
    4094:	2300      	movs	r3, #0
    4096:	e037      	b.n	4108 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    4098:	697b      	ldr	r3, [r7, #20]
    409a:	791b      	ldrb	r3, [r3, #4]
    409c:	2b00      	cmp	r3, #0
    409e:	d102      	bne.n	40a6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
    40a0:	697b      	ldr	r3, [r7, #20]
    40a2:	689b      	ldr	r3, [r3, #8]
    40a4:	e030      	b.n	4108 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    40a6:	697b      	ldr	r3, [r7, #20]
    40a8:	689b      	ldr	r3, [r3, #8]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d023      	beq.n	40f6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
    40ae:	2300      	movs	r3, #0
    40b0:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
    40b2:	697b      	ldr	r3, [r7, #20]
    40b4:	689b      	ldr	r3, [r3, #8]
    40b6:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
    40b8:	697b      	ldr	r3, [r7, #20]
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	f241 0203 	movw	r2, #4099	; 0x1003
    40c0:	4293      	cmp	r3, r2
    40c2:	d108      	bne.n	40d6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
    40c4:	79fb      	ldrb	r3, [r7, #7]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d105      	bne.n	40d6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
    40ca:	2301      	movs	r3, #1
    40cc:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
    40ce:	69bb      	ldr	r3, [r7, #24]
    40d0:	f043 0308 	orr.w	r3, r3, #8
    40d4:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
    40d6:	79fb      	ldrb	r3, [r7, #7]
    40d8:	2b00      	cmp	r3, #0
    40da:	d10a      	bne.n	40f2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
    40dc:	7ffb      	ldrb	r3, [r7, #31]
    40de:	2b00      	cmp	r3, #0
    40e0:	d107      	bne.n	40f2 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
    40e2:	69bb      	ldr	r3, [r7, #24]
    40e4:	f023 0318 	bic.w	r3, r3, #24
    40e8:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
    40ea:	69bb      	ldr	r3, [r7, #24]
    40ec:	f043 0304 	orr.w	r3, r3, #4
    40f0:	61bb      	str	r3, [r7, #24]
        }
        return attr;
    40f2:	69bb      	ldr	r3, [r7, #24]
    40f4:	e008      	b.n	4108 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
    40f6:	697b      	ldr	r3, [r7, #20]
    40f8:	6919      	ldr	r1, [r3, #16]
    40fa:	79fa      	ldrb	r2, [r7, #7]
    40fc:	4613      	mov	r3, r2
    40fe:	005b      	lsls	r3, r3, #1
    4100:	4413      	add	r3, r2
    4102:	009b      	lsls	r3, r3, #2
    4104:	440b      	add	r3, r1
    4106:	685b      	ldr	r3, [r3, #4]
    }
}
    4108:	4618      	mov	r0, r3
    410a:	3724      	adds	r7, #36	; 0x24
    410c:	46bd      	mov	sp, r7
    410e:	bc80      	pop	{r7}
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	20001a40 	.word	0x20001a40

00004118 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
    4118:	b480      	push	{r7}
    411a:	b087      	sub	sp, #28
    411c:	af00      	add	r7, sp, #0
    411e:	60f8      	str	r0, [r7, #12]
    4120:	60b9      	str	r1, [r7, #8]
    4122:	4613      	mov	r3, r2
    4124:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
    4126:	4b20      	ldr	r3, [pc, #128]	; (41a8 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
    4128:	681b      	ldr	r3, [r3, #0]
    412a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    412c:	68ba      	ldr	r2, [r7, #8]
    412e:	4613      	mov	r3, r2
    4130:	009b      	lsls	r3, r3, #2
    4132:	4413      	add	r3, r2
    4134:	009b      	lsls	r3, r3, #2
    4136:	440b      	add	r3, r1
    4138:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
    413a:	68bb      	ldr	r3, [r7, #8]
    413c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4140:	4293      	cmp	r3, r2
    4142:	d101      	bne.n	4148 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
    4144:	2300      	movs	r3, #0
    4146:	e02a      	b.n	419e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
    4148:	697b      	ldr	r3, [r7, #20]
    414a:	791b      	ldrb	r3, [r3, #4]
    414c:	2b00      	cmp	r3, #0
    414e:	d102      	bne.n	4156 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
    4150:	697b      	ldr	r3, [r7, #20]
    4152:	691b      	ldr	r3, [r3, #16]
    4154:	e023      	b.n	419e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
    4156:	697b      	ldr	r3, [r7, #20]
    4158:	689b      	ldr	r3, [r3, #8]
    415a:	2b00      	cmp	r3, #0
    415c:	d016      	beq.n	418c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
    415e:	79fb      	ldrb	r3, [r7, #7]
    4160:	2b00      	cmp	r3, #0
    4162:	d102      	bne.n	416a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
    4164:	697b      	ldr	r3, [r7, #20]
    4166:	3304      	adds	r3, #4
    4168:	e019      	b.n	419e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	691b      	ldr	r3, [r3, #16]
    416e:	2b00      	cmp	r3, #0
    4170:	d101      	bne.n	4176 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
    4172:	2300      	movs	r3, #0
    4174:	e013      	b.n	419e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
    4176:	697b      	ldr	r3, [r7, #20]
    4178:	691a      	ldr	r2, [r3, #16]
    417a:	79fb      	ldrb	r3, [r7, #7]
    417c:	3b01      	subs	r3, #1
    417e:	4619      	mov	r1, r3
    4180:	697b      	ldr	r3, [r7, #20]
    4182:	68db      	ldr	r3, [r3, #12]
    4184:	fb03 f301 	mul.w	r3, r3, r1
    4188:	4413      	add	r3, r2
    418a:	e008      	b.n	419e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
    418c:	697b      	ldr	r3, [r7, #20]
    418e:	6919      	ldr	r1, [r3, #16]
    4190:	79fa      	ldrb	r2, [r7, #7]
    4192:	4613      	mov	r3, r2
    4194:	005b      	lsls	r3, r3, #1
    4196:	4413      	add	r3, r2
    4198:	009b      	lsls	r3, r3, #2
    419a:	440b      	add	r3, r1
    419c:	681b      	ldr	r3, [r3, #0]
    }
}
    419e:	4618      	mov	r0, r3
    41a0:	371c      	adds	r7, #28
    41a2:	46bd      	mov	sp, r7
    41a4:	bc80      	pop	{r7}
    41a6:	4770      	bx	lr
    41a8:	20001a40 	.word	0x20001a40

000041ac <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	4618      	mov	r0, r3
    41b8:	370c      	adds	r7, #12
    41ba:	46bd      	mov	sp, r7
    41bc:	bc80      	pop	{r7}
    41be:	4770      	bx	lr

000041c0 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
    41c0:	b480      	push	{r7}
    41c2:	b083      	sub	sp, #12
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	4618      	mov	r0, r3
    41cc:	370c      	adds	r7, #12
    41ce:	46bd      	mov	sp, r7
    41d0:	bc80      	pop	{r7}
    41d2:	4770      	bx	lr

000041d4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
    41d4:	b480      	push	{r7}
    41d6:	b085      	sub	sp, #20
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
    41e2:	68fb      	ldr	r3, [r7, #12]
    41e4:	685b      	ldr	r3, [r3, #4]
    41e6:	781b      	ldrb	r3, [r3, #0]
    41e8:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
    41ea:	7afb      	ldrb	r3, [r7, #11]
    41ec:	2b05      	cmp	r3, #5
    41ee:	d002      	beq.n	41f6 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
    41f0:	7afb      	ldrb	r3, [r7, #11]
    41f2:	2b7f      	cmp	r3, #127	; 0x7f
    41f4:	d132      	bne.n	425c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
    41f6:	68fb      	ldr	r3, [r7, #12]
    41f8:	7e1b      	ldrb	r3, [r3, #24]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d10e      	bne.n	421c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
    41fe:	683b      	ldr	r3, [r7, #0]
    4200:	7d1b      	ldrb	r3, [r3, #20]
    4202:	2b00      	cmp	r3, #0
    4204:	d103      	bne.n	420e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
    4206:	68fb      	ldr	r3, [r7, #12]
    4208:	2201      	movs	r2, #1
    420a:	769a      	strb	r2, [r3, #26]
    420c:	e018      	b.n	4240 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	7d1b      	ldrb	r3, [r3, #20]
    4212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	625a      	str	r2, [r3, #36]	; 0x24
    421a:	e011      	b.n	4240 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
    421c:	683b      	ldr	r3, [r7, #0]
    421e:	7d1b      	ldrb	r3, [r3, #20]
    4220:	2b01      	cmp	r3, #1
    4222:	d107      	bne.n	4234 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
    4224:	683b      	ldr	r3, [r7, #0]
    4226:	7d5a      	ldrb	r2, [r3, #21]
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
    422c:	68fb      	ldr	r3, [r7, #12]
    422e:	2201      	movs	r2, #1
    4230:	769a      	strb	r2, [r3, #26]
    4232:	e005      	b.n	4240 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	7d1b      	ldrb	r3, [r3, #20]
    4238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    423c:	68fb      	ldr	r3, [r7, #12]
    423e:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	7e9b      	ldrb	r3, [r3, #26]
    4244:	2b00      	cmp	r3, #0
    4246:	d009      	beq.n	425c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	7edb      	ldrb	r3, [r3, #27]
    424c:	2b00      	cmp	r3, #0
    424e:	bf0c      	ite	eq
    4250:	2301      	moveq	r3, #1
    4252:	2300      	movne	r3, #0
    4254:	b2db      	uxtb	r3, r3
    4256:	461a      	mov	r2, r3
    4258:	68fb      	ldr	r3, [r7, #12]
    425a:	76da      	strb	r2, [r3, #27]
        }
    }
}
    425c:	bf00      	nop
    425e:	3714      	adds	r7, #20
    4260:	46bd      	mov	sp, r7
    4262:	bc80      	pop	{r7}
    4264:	4770      	bx	lr
	...

00004268 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
    4268:	b590      	push	{r4, r7, lr}
    426a:	b08b      	sub	sp, #44	; 0x2c
    426c:	af04      	add	r7, sp, #16
    426e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    4270:	2300      	movs	r3, #0
    4272:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
    427a:	4b35      	ldr	r3, [pc, #212]	; (4350 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    427c:	681b      	ldr	r3, [r3, #0]
    427e:	1d1a      	adds	r2, r3, #4
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	685b      	ldr	r3, [r3, #4]
    4284:	4619      	mov	r1, r3
    4286:	4610      	mov	r0, r2
    4288:	4b32      	ldr	r3, [pc, #200]	; (4354 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
    428a:	4798      	blx	r3
    428c:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
    428e:	687b      	ldr	r3, [r7, #4]
    4290:	7f5b      	ldrb	r3, [r3, #29]
    4292:	2b00      	cmp	r3, #0
    4294:	d157      	bne.n	4346 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
    4296:	2300      	movs	r3, #0
    4298:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
    429a:	68bb      	ldr	r3, [r7, #8]
    429c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    42a0:	2b00      	cmp	r3, #0
    42a2:	d002      	beq.n	42aa <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
    42a4:	4b2c      	ldr	r3, [pc, #176]	; (4358 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
    42a6:	617b      	str	r3, [r7, #20]
    42a8:	e00d      	b.n	42c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
    42aa:	68bb      	ldr	r3, [r7, #8]
    42ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    42b0:	2b00      	cmp	r3, #0
    42b2:	d008      	beq.n	42c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	7a1b      	ldrb	r3, [r3, #8]
    42b8:	2b00      	cmp	r3, #0
    42ba:	d002      	beq.n	42c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
    42bc:	4b27      	ldr	r3, [pc, #156]	; (435c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
    42be:	617b      	str	r3, [r7, #20]
    42c0:	e001      	b.n	42c6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
    42c2:	2301      	movs	r3, #1
    42c4:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
    42c6:	697b      	ldr	r3, [r7, #20]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d13c      	bne.n	4346 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
    42cc:	68bb      	ldr	r3, [r7, #8]
    42ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
    42d2:	68fb      	ldr	r3, [r7, #12]
    42d4:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
    42d6:	7cfb      	ldrb	r3, [r7, #19]
    42d8:	2b00      	cmp	r3, #0
    42da:	d021      	beq.n	4320 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
    42dc:	2300      	movs	r3, #0
    42de:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
    42e0:	68fb      	ldr	r3, [r7, #12]
    42e2:	7e1b      	ldrb	r3, [r3, #24]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d007      	beq.n	42f8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
    42e8:	2301      	movs	r3, #1
    42ea:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	2200      	movs	r2, #0
    42f0:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	2200      	movs	r2, #0
    42f6:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    42f8:	4b15      	ldr	r3, [pc, #84]	; (4350 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    42fa:	6818      	ldr	r0, [r3, #0]
    42fc:	68fb      	ldr	r3, [r7, #12]
    42fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	68da      	ldr	r2, [r3, #12]
    4304:	2300      	movs	r3, #0
    4306:	9301      	str	r3, [sp, #4]
    4308:	7cbb      	ldrb	r3, [r7, #18]
    430a:	9300      	str	r3, [sp, #0]
    430c:	2300      	movs	r3, #0
    430e:	4c14      	ldr	r4, [pc, #80]	; (4360 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
    4310:	47a0      	blx	r4
    4312:	4602      	mov	r2, r0
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
    4318:	68fb      	ldr	r3, [r7, #12]
    431a:	2201      	movs	r2, #1
    431c:	721a      	strb	r2, [r3, #8]
    431e:	e002      	b.n	4326 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	2200      	movs	r2, #0
    4324:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
    4326:	4b0a      	ldr	r3, [pc, #40]	; (4350 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
    4328:	6818      	ldr	r0, [r3, #0]
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    432e:	68fb      	ldr	r3, [r7, #12]
    4330:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
    4332:	4b0c      	ldr	r3, [pc, #48]	; (4364 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
    4334:	9302      	str	r3, [sp, #8]
    4336:	68fb      	ldr	r3, [r7, #12]
    4338:	9301      	str	r3, [sp, #4]
    433a:	2300      	movs	r3, #0
    433c:	9300      	str	r3, [sp, #0]
    433e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    4342:	4c09      	ldr	r4, [pc, #36]	; (4368 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
    4344:	47a0      	blx	r4
        }
    }

    return ret;
    4346:	697b      	ldr	r3, [r7, #20]
}
    4348:	4618      	mov	r0, r3
    434a:	371c      	adds	r7, #28
    434c:	46bd      	mov	sp, r7
    434e:	bd90      	pop	{r4, r7, pc}
    4350:	20001a00 	.word	0x20001a00
    4354:	00003a05 	.word	0x00003a05
    4358:	06090030 	.word	0x06090030
    435c:	08000022 	.word	0x08000022
    4360:	00001f2d 	.word	0x00001f2d
    4364:	000041d5 	.word	0x000041d5
    4368:	00001e2d 	.word	0x00001e2d

0000436c <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
    436c:	b580      	push	{r7, lr}
    436e:	b086      	sub	sp, #24
    4370:	af00      	add	r7, sp, #0
    4372:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    4374:	2300      	movs	r3, #0
    4376:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
    437e:	4b19      	ldr	r3, [pc, #100]	; (43e4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	1d1a      	adds	r2, r3, #4
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	685b      	ldr	r3, [r3, #4]
    4388:	4619      	mov	r1, r3
    438a:	4610      	mov	r0, r2
    438c:	4b16      	ldr	r3, [pc, #88]	; (43e8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
    438e:	4798      	blx	r3
    4390:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	7f5b      	ldrb	r3, [r3, #29]
    4396:	2b00      	cmp	r3, #0
    4398:	d11f      	bne.n	43da <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
    439a:	693b      	ldr	r3, [r7, #16]
    439c:	691b      	ldr	r3, [r3, #16]
    439e:	2b00      	cmp	r3, #0
    43a0:	d105      	bne.n	43ae <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	2b00      	cmp	r3, #0
    43a6:	d002      	beq.n	43ae <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
    43a8:	693b      	ldr	r3, [r7, #16]
    43aa:	2200      	movs	r2, #0
    43ac:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
    43ae:	693b      	ldr	r3, [r7, #16]
    43b0:	68fa      	ldr	r2, [r7, #12]
    43b2:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	085a      	lsrs	r2, r3, #1
    43b8:	4613      	mov	r3, r2
    43ba:	005b      	lsls	r3, r3, #1
    43bc:	441a      	add	r2, r3
    43be:	693b      	ldr	r3, [r7, #16]
    43c0:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
    43c2:	693b      	ldr	r3, [r7, #16]
    43c4:	695a      	ldr	r2, [r3, #20]
    43c6:	68fb      	ldr	r3, [r7, #12]
    43c8:	429a      	cmp	r2, r3
    43ca:	d203      	bcs.n	43d4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
    43cc:	693b      	ldr	r3, [r7, #16]
    43ce:	f04f 32ff 	mov.w	r2, #4294967295
    43d2:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
    43d4:	693b      	ldr	r3, [r7, #16]
    43d6:	2200      	movs	r2, #0
    43d8:	621a      	str	r2, [r3, #32]
    }

    return ret;
    43da:	697b      	ldr	r3, [r7, #20]
}
    43dc:	4618      	mov	r0, r3
    43de:	3718      	adds	r7, #24
    43e0:	46bd      	mov	sp, r7
    43e2:	bd80      	pop	{r7, pc}
    43e4:	20001a00 	.word	0x20001a00
    43e8:	00003a05 	.word	0x00003a05

000043ec <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
    43ec:	b590      	push	{r4, r7, lr}
    43ee:	b089      	sub	sp, #36	; 0x24
    43f0:	af02      	add	r7, sp, #8
    43f2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    43f4:	2300      	movs	r3, #0
    43f6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	681b      	ldr	r3, [r3, #0]
    43fc:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	685b      	ldr	r3, [r3, #4]
    4402:	781b      	ldrb	r3, [r3, #0]
    4404:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	7f5b      	ldrb	r3, [r3, #29]
    440a:	2b00      	cmp	r3, #0
    440c:	d12c      	bne.n	4468 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
    440e:	2300      	movs	r3, #0
    4410:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
    4412:	68fb      	ldr	r3, [r7, #12]
    4414:	691b      	ldr	r3, [r3, #16]
    4416:	2b00      	cmp	r3, #0
    4418:	d002      	beq.n	4420 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
    441a:	4b16      	ldr	r3, [pc, #88]	; (4474 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
    441c:	617b      	str	r3, [r7, #20]
    441e:	e023      	b.n	4468 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
    4420:	7afb      	ldrb	r3, [r7, #11]
    4422:	2b01      	cmp	r3, #1
    4424:	d005      	beq.n	4432 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
    4426:	7afb      	ldrb	r3, [r7, #11]
    4428:	2bf0      	cmp	r3, #240	; 0xf0
    442a:	dd05      	ble.n	4438 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
    442c:	7afb      	ldrb	r3, [r7, #11]
    442e:	2bff      	cmp	r3, #255	; 0xff
    4430:	dc02      	bgt.n	4438 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
    4432:	4b11      	ldr	r3, [pc, #68]	; (4478 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
    4434:	617b      	str	r3, [r7, #20]
    4436:	e017      	b.n	4468 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	7afa      	ldrb	r2, [r7, #11]
    443c:	761a      	strb	r2, [r3, #24]
            if(value != 0){
    443e:	7afb      	ldrb	r3, [r7, #11]
    4440:	2b00      	cmp	r3, #0
    4442:	d001      	beq.n	4448 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
    4444:	2301      	movs	r3, #1
    4446:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
    4448:	4b0c      	ldr	r3, [pc, #48]	; (447c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
    444a:	6818      	ldr	r0, [r3, #0]
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4450:	68fb      	ldr	r3, [r7, #12]
    4452:	68da      	ldr	r2, [r3, #12]
    4454:	2300      	movs	r3, #0
    4456:	9301      	str	r3, [sp, #4]
    4458:	7cfb      	ldrb	r3, [r7, #19]
    445a:	9300      	str	r3, [sp, #0]
    445c:	2300      	movs	r3, #0
    445e:	4c08      	ldr	r4, [pc, #32]	; (4480 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
    4460:	47a0      	blx	r4
    4462:	4602      	mov	r2, r0
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
    4468:	697b      	ldr	r3, [r7, #20]
}
    446a:	4618      	mov	r0, r3
    446c:	371c      	adds	r7, #28
    446e:	46bd      	mov	sp, r7
    4470:	bd90      	pop	{r4, r7, pc}
    4472:	bf00      	nop
    4474:	08000022 	.word	0x08000022
    4478:	06090030 	.word	0x06090030
    447c:	20001a00 	.word	0x20001a00
    4480:	00001f2d 	.word	0x00001f2d

00004484 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    4484:	b590      	push	{r4, r7, lr}
    4486:	b08b      	sub	sp, #44	; 0x2c
    4488:	af04      	add	r7, sp, #16
    448a:	60f8      	str	r0, [r7, #12]
    448c:	60b9      	str	r1, [r7, #8]
    448e:	607a      	str	r2, [r7, #4]
    4490:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
    4492:	2300      	movs	r3, #0
    4494:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    4496:	68bb      	ldr	r3, [r7, #8]
    4498:	2b00      	cmp	r3, #0
    449a:	d00e      	beq.n	44ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	2b00      	cmp	r3, #0
    44a0:	d00b      	beq.n	44ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    44a2:	683b      	ldr	r3, [r7, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d008      	beq.n	44ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    44a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44aa:	2b00      	cmp	r3, #0
    44ac:	d005      	beq.n	44ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
    44ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    44b0:	2b00      	cmp	r3, #0
    44b2:	d002      	beq.n	44ba <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
    44b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    44b6:	2b00      	cmp	r3, #0
    44b8:	d102      	bne.n	44c0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    44ba:	f04f 33ff 	mov.w	r3, #4294967295
    44be:	e097      	b.n	45f0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
    44c0:	68bb      	ldr	r3, [r7, #8]
    44c2:	2200      	movs	r2, #0
    44c4:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
    44c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
    44cc:	68bb      	ldr	r3, [r7, #8]
    44ce:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
    44d0:	68bb      	ldr	r3, [r7, #8]
    44d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44d4:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
    44d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44d8:	4613      	mov	r3, r2
    44da:	005b      	lsls	r3, r3, #1
    44dc:	441a      	add	r2, r3
    44de:	68bb      	ldr	r3, [r7, #8]
    44e0:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
    44e2:	68bb      	ldr	r3, [r7, #8]
    44e4:	695a      	ldr	r2, [r3, #20]
    44e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    44e8:	429a      	cmp	r2, r3
    44ea:	d203      	bcs.n	44f4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
    44ec:	68bb      	ldr	r3, [r7, #8]
    44ee:	f04f 32ff 	mov.w	r2, #4294967295
    44f2:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
    44f4:	68bb      	ldr	r3, [r7, #8]
    44f6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    44fa:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
    44fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    4500:	2b00      	cmp	r3, #0
    4502:	d001      	beq.n	4508 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
    4504:	2301      	movs	r3, #1
    4506:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
    4508:	68bb      	ldr	r3, [r7, #8]
    450a:	2201      	movs	r2, #1
    450c:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
    450e:	68bb      	ldr	r3, [r7, #8]
    4510:	2200      	movs	r2, #0
    4512:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
    4514:	68bb      	ldr	r3, [r7, #8]
    4516:	2200      	movs	r2, #0
    4518:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
    451a:	68bb      	ldr	r3, [r7, #8]
    451c:	2200      	movs	r2, #0
    451e:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
    4520:	68bb      	ldr	r3, [r7, #8]
    4522:	2200      	movs	r2, #0
    4524:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
    4526:	68bb      	ldr	r3, [r7, #8]
    4528:	2200      	movs	r2, #0
    452a:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
    452c:	68bb      	ldr	r3, [r7, #8]
    452e:	687a      	ldr	r2, [r7, #4]
    4530:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
    4532:	68bb      	ldr	r3, [r7, #8]
    4534:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4536:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
    4538:	68bb      	ldr	r3, [r7, #8]
    453a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    453c:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
    4544:	4b2c      	ldr	r3, [pc, #176]	; (45f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	1d18      	adds	r0, r3, #4
    454a:	2300      	movs	r3, #0
    454c:	9301      	str	r3, [sp, #4]
    454e:	2300      	movs	r3, #0
    4550:	9300      	str	r3, [sp, #0]
    4552:	68bb      	ldr	r3, [r7, #8]
    4554:	4a29      	ldr	r2, [pc, #164]	; (45fc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
    4556:	f241 0105 	movw	r1, #4101	; 0x1005
    455a:	4c29      	ldr	r4, [pc, #164]	; (4600 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    455c:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
    455e:	4b26      	ldr	r3, [pc, #152]	; (45f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	1d18      	adds	r0, r3, #4
    4564:	2300      	movs	r3, #0
    4566:	9301      	str	r3, [sp, #4]
    4568:	2300      	movs	r3, #0
    456a:	9300      	str	r3, [sp, #0]
    456c:	68bb      	ldr	r3, [r7, #8]
    456e:	4a25      	ldr	r2, [pc, #148]	; (4604 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
    4570:	f241 0106 	movw	r1, #4102	; 0x1006
    4574:	4c22      	ldr	r4, [pc, #136]	; (4600 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    4576:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
    4578:	4b1f      	ldr	r3, [pc, #124]	; (45f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	1d18      	adds	r0, r3, #4
    457e:	2300      	movs	r3, #0
    4580:	9301      	str	r3, [sp, #4]
    4582:	2300      	movs	r3, #0
    4584:	9300      	str	r3, [sp, #0]
    4586:	68bb      	ldr	r3, [r7, #8]
    4588:	4a1f      	ldr	r2, [pc, #124]	; (4608 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
    458a:	f241 0119 	movw	r1, #4121	; 0x1019
    458e:	4c1c      	ldr	r4, [pc, #112]	; (4600 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
    4590:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
    4592:	4b19      	ldr	r3, [pc, #100]	; (45f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    4594:	6818      	ldr	r0, [r3, #0]
    4596:	68bb      	ldr	r3, [r7, #8]
    4598:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
    459a:	4b1c      	ldr	r3, [pc, #112]	; (460c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
    459c:	9302      	str	r3, [sp, #8]
    459e:	68bb      	ldr	r3, [r7, #8]
    45a0:	9301      	str	r3, [sp, #4]
    45a2:	2300      	movs	r3, #0
    45a4:	9300      	str	r3, [sp, #0]
    45a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
    45aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    45ac:	4c18      	ldr	r4, [pc, #96]	; (4610 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
    45ae:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
    45b0:	68bb      	ldr	r3, [r7, #8]
    45b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    45b4:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
    45b6:	68bb      	ldr	r3, [r7, #8]
    45b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45ba:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
    45bc:	4b0e      	ldr	r3, [pc, #56]	; (45f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
    45be:	6818      	ldr	r0, [r3, #0]
    45c0:	68bb      	ldr	r3, [r7, #8]
    45c2:	68da      	ldr	r2, [r3, #12]
    45c4:	2300      	movs	r3, #0
    45c6:	9301      	str	r3, [sp, #4]
    45c8:	7dfb      	ldrb	r3, [r7, #23]
    45ca:	9300      	str	r3, [sp, #0]
    45cc:	2300      	movs	r3, #0
    45ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
    45d0:	4c10      	ldr	r4, [pc, #64]	; (4614 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
    45d2:	47a0      	blx	r4
    45d4:	4602      	mov	r2, r0
    45d6:	68bb      	ldr	r3, [r7, #8]
    45d8:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
    45da:	68bb      	ldr	r3, [r7, #8]
    45dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    45de:	2210      	movs	r2, #16
    45e0:	4619      	mov	r1, r3
    45e2:	480d      	ldr	r0, [pc, #52]	; (4618 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
    45e4:	4b0d      	ldr	r3, [pc, #52]	; (461c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
    45e6:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	4a0b      	ldr	r2, [pc, #44]	; (4618 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
    45ec:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
    45ee:	2300      	movs	r3, #0
}
    45f0:	4618      	mov	r0, r3
    45f2:	371c      	adds	r7, #28
    45f4:	46bd      	mov	sp, r7
    45f6:	bd90      	pop	{r4, r7, pc}
    45f8:	20001a00 	.word	0x20001a00
    45fc:	00004269 	.word	0x00004269
    4600:	00003e59 	.word	0x00003e59
    4604:	0000436d 	.word	0x0000436d
    4608:	000043ed 	.word	0x000043ed
    460c:	000041d5 	.word	0x000041d5
    4610:	00001e2d 	.word	0x00001e2d
    4614:	00001f2d 	.word	0x00001f2d
    4618:	20001a44 	.word	0x20001a44
    461c:	00011c19 	.word	0x00011c19

00004620 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
    4620:	b580      	push	{r7, lr}
    4622:	b082      	sub	sp, #8
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
    4628:	4b06      	ldr	r3, [pc, #24]	; (4644 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	4619      	mov	r1, r3
    4632:	4610      	mov	r0, r2
    4634:	4b04      	ldr	r3, [pc, #16]	; (4648 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
    4636:	4798      	blx	r3
    4638:	4603      	mov	r3, r0
    463a:	b2db      	uxtb	r3, r3
}
    463c:	4618      	mov	r0, r3
    463e:	3708      	adds	r7, #8
    4640:	46bd      	mov	sp, r7
    4642:	bd80      	pop	{r7, pc}
    4644:	20001a00 	.word	0x20001a00
    4648:	00001fd9 	.word	0x00001fd9

0000464c <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
    464c:	b480      	push	{r7}
    464e:	b083      	sub	sp, #12
    4650:	af00      	add	r7, sp, #0
    4652:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	4618      	mov	r0, r3
    4658:	370c      	adds	r7, #12
    465a:	46bd      	mov	sp, r7
    465c:	bc80      	pop	{r7}
    465e:	4770      	bx	lr

00004660 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
    4660:	b480      	push	{r7}
    4662:	b083      	sub	sp, #12
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	4618      	mov	r0, r3
    466c:	370c      	adds	r7, #12
    466e:	46bd      	mov	sp, r7
    4670:	bc80      	pop	{r7}
    4672:	4770      	bx	lr

00004674 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4674:	b580      	push	{r7, lr}
    4676:	af00      	add	r7, sp, #0
	system_init();
    4678:	4b03      	ldr	r3, [pc, #12]	; (4688 <atmel_start_init+0x14>)
    467a:	4798      	blx	r3
	usb_init();
    467c:	4b03      	ldr	r3, [pc, #12]	; (468c <atmel_start_init+0x18>)
    467e:	4798      	blx	r3
	spi_nor_flash_init();
    4680:	4b03      	ldr	r3, [pc, #12]	; (4690 <atmel_start_init+0x1c>)
    4682:	4798      	blx	r3
}
    4684:	bf00      	nop
    4686:	bd80      	pop	{r7, pc}
    4688:	00005a75 	.word	0x00005a75
    468c:	0000f3c1 	.word	0x0000f3c1
    4690:	0000f355 	.word	0x0000f355

00004694 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4694:	b480      	push	{r7}
    4696:	b085      	sub	sp, #20
    4698:	af00      	add	r7, sp, #0
    469a:	60f8      	str	r0, [r7, #12]
    469c:	460b      	mov	r3, r1
    469e:	607a      	str	r2, [r7, #4]
    46a0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    46a2:	7afa      	ldrb	r2, [r7, #11]
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	3220      	adds	r2, #32
    46a8:	6879      	ldr	r1, [r7, #4]
    46aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    46ae:	bf00      	nop
    46b0:	3714      	adds	r7, #20
    46b2:	46bd      	mov	sp, r7
    46b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b8:	4770      	bx	lr

000046ba <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    46ba:	b480      	push	{r7}
    46bc:	b083      	sub	sp, #12
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	691b      	ldr	r3, [r3, #16]
    46c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ce:	bf00      	nop
    46d0:	370c      	adds	r7, #12
    46d2:	46bd      	mov	sp, r7
    46d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d8:	4770      	bx	lr

000046da <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    46da:	b480      	push	{r7}
    46dc:	b083      	sub	sp, #12
    46de:	af00      	add	r7, sp, #0
    46e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	691b      	ldr	r3, [r3, #16]
    46e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ee:	bf00      	nop
    46f0:	370c      	adds	r7, #12
    46f2:	46bd      	mov	sp, r7
    46f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f8:	4770      	bx	lr

000046fa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    46fa:	b480      	push	{r7}
    46fc:	b083      	sub	sp, #12
    46fe:	af00      	add	r7, sp, #0
    4700:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	691b      	ldr	r3, [r3, #16]
    4706:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    470e:	bf00      	nop
    4710:	370c      	adds	r7, #12
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    471a:	b480      	push	{r7}
    471c:	b083      	sub	sp, #12
    471e:	af00      	add	r7, sp, #0
    4720:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	691b      	ldr	r3, [r3, #16]
    4726:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    472e:	bf00      	nop
    4730:	370c      	adds	r7, #12
    4732:	46bd      	mov	sp, r7
    4734:	f85d 7b04 	ldr.w	r7, [sp], #4
    4738:	4770      	bx	lr

0000473a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    473a:	b480      	push	{r7}
    473c:	b083      	sub	sp, #12
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4742:	687b      	ldr	r3, [r7, #4]
    4744:	695b      	ldr	r3, [r3, #20]
    4746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    474e:	bf00      	nop
    4750:	370c      	adds	r7, #12
    4752:	46bd      	mov	sp, r7
    4754:	f85d 7b04 	ldr.w	r7, [sp], #4
    4758:	4770      	bx	lr

0000475a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    475a:	b480      	push	{r7}
    475c:	b083      	sub	sp, #12
    475e:	af00      	add	r7, sp, #0
    4760:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	695b      	ldr	r3, [r3, #20]
    4766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    476e:	bf00      	nop
    4770:	370c      	adds	r7, #12
    4772:	46bd      	mov	sp, r7
    4774:	f85d 7b04 	ldr.w	r7, [sp], #4
    4778:	4770      	bx	lr

0000477a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    477a:	b480      	push	{r7}
    477c:	b083      	sub	sp, #12
    477e:	af00      	add	r7, sp, #0
    4780:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4782:	687b      	ldr	r3, [r7, #4]
    4784:	695b      	ldr	r3, [r3, #20]
    4786:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    478e:	bf00      	nop
    4790:	370c      	adds	r7, #12
    4792:	46bd      	mov	sp, r7
    4794:	f85d 7b04 	ldr.w	r7, [sp], #4
    4798:	4770      	bx	lr

0000479a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    479a:	b480      	push	{r7}
    479c:	b083      	sub	sp, #12
    479e:	af00      	add	r7, sp, #0
    47a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    47a2:	687b      	ldr	r3, [r7, #4]
    47a4:	695b      	ldr	r3, [r3, #20]
    47a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	370c      	adds	r7, #12
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    47ba:	b480      	push	{r7}
    47bc:	b083      	sub	sp, #12
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	695b      	ldr	r3, [r3, #20]
    47c6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ce:	bf00      	nop
    47d0:	370c      	adds	r7, #12
    47d2:	46bd      	mov	sp, r7
    47d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47d8:	4770      	bx	lr

000047da <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    47da:	b480      	push	{r7}
    47dc:	b083      	sub	sp, #12
    47de:	af00      	add	r7, sp, #0
    47e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	699b      	ldr	r3, [r3, #24]
    47e6:	f043 0201 	orr.w	r2, r3, #1
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    47ee:	bf00      	nop
    47f0:	370c      	adds	r7, #12
    47f2:	46bd      	mov	sp, r7
    47f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47f8:	4770      	bx	lr

000047fa <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    47fa:	b480      	push	{r7}
    47fc:	b083      	sub	sp, #12
    47fe:	af00      	add	r7, sp, #0
    4800:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	699b      	ldr	r3, [r3, #24]
    4806:	f043 0202 	orr.w	r2, r3, #2
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    480e:	bf00      	nop
    4810:	370c      	adds	r7, #12
    4812:	46bd      	mov	sp, r7
    4814:	f85d 7b04 	ldr.w	r7, [sp], #4
    4818:	4770      	bx	lr

0000481a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    481a:	b480      	push	{r7}
    481c:	b083      	sub	sp, #12
    481e:	af00      	add	r7, sp, #0
    4820:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	699b      	ldr	r3, [r3, #24]
    4826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    482e:	bf00      	nop
    4830:	370c      	adds	r7, #12
    4832:	46bd      	mov	sp, r7
    4834:	f85d 7b04 	ldr.w	r7, [sp], #4
    4838:	4770      	bx	lr

0000483a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    483a:	b480      	push	{r7}
    483c:	b083      	sub	sp, #12
    483e:	af00      	add	r7, sp, #0
    4840:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	699b      	ldr	r3, [r3, #24]
    4846:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    484a:	687b      	ldr	r3, [r7, #4]
    484c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    484e:	bf00      	nop
    4850:	370c      	adds	r7, #12
    4852:	46bd      	mov	sp, r7
    4854:	f85d 7b04 	ldr.w	r7, [sp], #4
    4858:	4770      	bx	lr

0000485a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    485a:	b480      	push	{r7}
    485c:	b083      	sub	sp, #12
    485e:	af00      	add	r7, sp, #0
    4860:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	699b      	ldr	r3, [r3, #24]
    4866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    486e:	bf00      	nop
    4870:	370c      	adds	r7, #12
    4872:	46bd      	mov	sp, r7
    4874:	f85d 7b04 	ldr.w	r7, [sp], #4
    4878:	4770      	bx	lr

0000487a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    487a:	b480      	push	{r7}
    487c:	b083      	sub	sp, #12
    487e:	af00      	add	r7, sp, #0
    4880:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	699b      	ldr	r3, [r3, #24]
    4886:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    488a:	687b      	ldr	r3, [r7, #4]
    488c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    488e:	bf00      	nop
    4890:	370c      	adds	r7, #12
    4892:	46bd      	mov	sp, r7
    4894:	f85d 7b04 	ldr.w	r7, [sp], #4
    4898:	4770      	bx	lr

0000489a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    489a:	b480      	push	{r7}
    489c:	b083      	sub	sp, #12
    489e:	af00      	add	r7, sp, #0
    48a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	69db      	ldr	r3, [r3, #28]
    48a6:	f043 0208 	orr.w	r2, r3, #8
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48ae:	bf00      	nop
    48b0:	370c      	adds	r7, #12
    48b2:	46bd      	mov	sp, r7
    48b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b8:	4770      	bx	lr

000048ba <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    48ba:	b480      	push	{r7}
    48bc:	b083      	sub	sp, #12
    48be:	af00      	add	r7, sp, #0
    48c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	69db      	ldr	r3, [r3, #28]
    48c6:	f043 0220 	orr.w	r2, r3, #32
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48ce:	bf00      	nop
    48d0:	370c      	adds	r7, #12
    48d2:	46bd      	mov	sp, r7
    48d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d8:	4770      	bx	lr

000048da <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    48da:	b480      	push	{r7}
    48dc:	b083      	sub	sp, #12
    48de:	af00      	add	r7, sp, #0
    48e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	69db      	ldr	r3, [r3, #28]
    48e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    48ea:	687b      	ldr	r3, [r7, #4]
    48ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    48ee:	bf00      	nop
    48f0:	370c      	adds	r7, #12
    48f2:	46bd      	mov	sp, r7
    48f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f8:	4770      	bx	lr

000048fa <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    48fa:	b480      	push	{r7}
    48fc:	b083      	sub	sp, #12
    48fe:	af00      	add	r7, sp, #0
    4900:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	69db      	ldr	r3, [r3, #28]
    4906:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    490e:	bf00      	nop
    4910:	370c      	adds	r7, #12
    4912:	46bd      	mov	sp, r7
    4914:	f85d 7b04 	ldr.w	r7, [sp], #4
    4918:	4770      	bx	lr

0000491a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    491a:	b480      	push	{r7}
    491c:	b083      	sub	sp, #12
    491e:	af00      	add	r7, sp, #0
    4920:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4922:	687b      	ldr	r3, [r7, #4]
    4924:	6a1b      	ldr	r3, [r3, #32]
    4926:	f043 0201 	orr.w	r2, r3, #1
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    492e:	bf00      	nop
    4930:	370c      	adds	r7, #12
    4932:	46bd      	mov	sp, r7
    4934:	f85d 7b04 	ldr.w	r7, [sp], #4
    4938:	4770      	bx	lr

0000493a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    493a:	b480      	push	{r7}
    493c:	b083      	sub	sp, #12
    493e:	af00      	add	r7, sp, #0
    4940:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	6a1b      	ldr	r3, [r3, #32]
    4946:	f043 0202 	orr.w	r2, r3, #2
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    494e:	bf00      	nop
    4950:	370c      	adds	r7, #12
    4952:	46bd      	mov	sp, r7
    4954:	f85d 7b04 	ldr.w	r7, [sp], #4
    4958:	4770      	bx	lr

0000495a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    495a:	b480      	push	{r7}
    495c:	b083      	sub	sp, #12
    495e:	af00      	add	r7, sp, #0
    4960:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4962:	687b      	ldr	r3, [r7, #4]
    4964:	6a1b      	ldr	r3, [r3, #32]
    4966:	f043 0204 	orr.w	r2, r3, #4
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    496e:	bf00      	nop
    4970:	370c      	adds	r7, #12
    4972:	46bd      	mov	sp, r7
    4974:	f85d 7b04 	ldr.w	r7, [sp], #4
    4978:	4770      	bx	lr

0000497a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    497a:	b480      	push	{r7}
    497c:	b083      	sub	sp, #12
    497e:	af00      	add	r7, sp, #0
    4980:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	6a1b      	ldr	r3, [r3, #32]
    4986:	f043 0208 	orr.w	r2, r3, #8
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    498e:	bf00      	nop
    4990:	370c      	adds	r7, #12
    4992:	46bd      	mov	sp, r7
    4994:	f85d 7b04 	ldr.w	r7, [sp], #4
    4998:	4770      	bx	lr

0000499a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    499a:	b480      	push	{r7}
    499c:	b083      	sub	sp, #12
    499e:	af00      	add	r7, sp, #0
    49a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	6a1b      	ldr	r3, [r3, #32]
    49a6:	f043 0220 	orr.w	r2, r3, #32
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    49ae:	bf00      	nop
    49b0:	370c      	adds	r7, #12
    49b2:	46bd      	mov	sp, r7
    49b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b8:	4770      	bx	lr

000049ba <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    49ba:	b480      	push	{r7}
    49bc:	b083      	sub	sp, #12
    49be:	af00      	add	r7, sp, #0
    49c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	6a1b      	ldr	r3, [r3, #32]
    49c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    49ce:	bf00      	nop
    49d0:	370c      	adds	r7, #12
    49d2:	46bd      	mov	sp, r7
    49d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d8:	4770      	bx	lr

000049da <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    49da:	b480      	push	{r7}
    49dc:	b085      	sub	sp, #20
    49de:	af00      	add	r7, sp, #0
    49e0:	60f8      	str	r0, [r7, #12]
    49e2:	460b      	mov	r3, r1
    49e4:	607a      	str	r2, [r7, #4]
    49e6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    49e8:	7afb      	ldrb	r3, [r7, #11]
    49ea:	68fa      	ldr	r2, [r7, #12]
    49ec:	01db      	lsls	r3, r3, #7
    49ee:	4413      	add	r3, r2
    49f0:	3308      	adds	r3, #8
    49f2:	687a      	ldr	r2, [r7, #4]
    49f4:	601a      	str	r2, [r3, #0]
}
    49f6:	bf00      	nop
    49f8:	3714      	adds	r7, #20
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr

00004a02 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4a02:	b480      	push	{r7}
    4a04:	b085      	sub	sp, #20
    4a06:	af00      	add	r7, sp, #0
    4a08:	60f8      	str	r0, [r7, #12]
    4a0a:	460b      	mov	r3, r1
    4a0c:	607a      	str	r2, [r7, #4]
    4a0e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4a10:	7afb      	ldrb	r3, [r7, #11]
    4a12:	68fa      	ldr	r2, [r7, #12]
    4a14:	01db      	lsls	r3, r3, #7
    4a16:	4413      	add	r3, r2
    4a18:	3304      	adds	r3, #4
    4a1a:	687a      	ldr	r2, [r7, #4]
    4a1c:	601a      	str	r2, [r3, #0]
}
    4a1e:	bf00      	nop
    4a20:	3714      	adds	r7, #20
    4a22:	46bd      	mov	sp, r7
    4a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a28:	4770      	bx	lr

00004a2a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4a2a:	b480      	push	{r7}
    4a2c:	b085      	sub	sp, #20
    4a2e:	af00      	add	r7, sp, #0
    4a30:	60f8      	str	r0, [r7, #12]
    4a32:	460b      	mov	r3, r1
    4a34:	607a      	str	r2, [r7, #4]
    4a36:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a38:	7afb      	ldrb	r3, [r7, #11]
    4a3a:	68fa      	ldr	r2, [r7, #12]
    4a3c:	01db      	lsls	r3, r3, #7
    4a3e:	4413      	add	r3, r2
    4a40:	3318      	adds	r3, #24
    4a42:	687a      	ldr	r2, [r7, #4]
    4a44:	601a      	str	r2, [r3, #0]
}
    4a46:	bf00      	nop
    4a48:	3714      	adds	r7, #20
    4a4a:	46bd      	mov	sp, r7
    4a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a50:	4770      	bx	lr

00004a52 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4a52:	b480      	push	{r7}
    4a54:	b085      	sub	sp, #20
    4a56:	af00      	add	r7, sp, #0
    4a58:	60f8      	str	r0, [r7, #12]
    4a5a:	460b      	mov	r3, r1
    4a5c:	607a      	str	r2, [r7, #4]
    4a5e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4a60:	7afb      	ldrb	r3, [r7, #11]
    4a62:	68fa      	ldr	r2, [r7, #12]
    4a64:	01db      	lsls	r3, r3, #7
    4a66:	4413      	add	r3, r2
    4a68:	3314      	adds	r3, #20
    4a6a:	687a      	ldr	r2, [r7, #4]
    4a6c:	601a      	str	r2, [r3, #0]
}
    4a6e:	bf00      	nop
    4a70:	3714      	adds	r7, #20
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr

00004a7a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4a7a:	b480      	push	{r7}
    4a7c:	b085      	sub	sp, #20
    4a7e:	af00      	add	r7, sp, #0
    4a80:	6078      	str	r0, [r7, #4]
    4a82:	4608      	mov	r0, r1
    4a84:	4611      	mov	r1, r2
    4a86:	461a      	mov	r2, r3
    4a88:	4603      	mov	r3, r0
    4a8a:	70fb      	strb	r3, [r7, #3]
    4a8c:	460b      	mov	r3, r1
    4a8e:	70bb      	strb	r3, [r7, #2]
    4a90:	4613      	mov	r3, r2
    4a92:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a94:	78fa      	ldrb	r2, [r7, #3]
    4a96:	78bb      	ldrb	r3, [r7, #2]
    4a98:	6879      	ldr	r1, [r7, #4]
    4a9a:	01d2      	lsls	r2, r2, #7
    4a9c:	440a      	add	r2, r1
    4a9e:	4413      	add	r3, r2
    4aa0:	3330      	adds	r3, #48	; 0x30
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4aa6:	7bfb      	ldrb	r3, [r7, #15]
    4aa8:	f023 030f 	bic.w	r3, r3, #15
    4aac:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4aae:	787b      	ldrb	r3, [r7, #1]
    4ab0:	f003 030f 	and.w	r3, r3, #15
    4ab4:	b2da      	uxtb	r2, r3
    4ab6:	7bfb      	ldrb	r3, [r7, #15]
    4ab8:	4313      	orrs	r3, r2
    4aba:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4abc:	78fa      	ldrb	r2, [r7, #3]
    4abe:	78bb      	ldrb	r3, [r7, #2]
    4ac0:	6879      	ldr	r1, [r7, #4]
    4ac2:	01d2      	lsls	r2, r2, #7
    4ac4:	440a      	add	r2, r1
    4ac6:	4413      	add	r3, r2
    4ac8:	3330      	adds	r3, #48	; 0x30
    4aca:	7bfa      	ldrb	r2, [r7, #15]
    4acc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4ace:	bf00      	nop
    4ad0:	3714      	adds	r7, #20
    4ad2:	46bd      	mov	sp, r7
    4ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad8:	4770      	bx	lr

00004ada <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4ada:	b480      	push	{r7}
    4adc:	b085      	sub	sp, #20
    4ade:	af00      	add	r7, sp, #0
    4ae0:	6078      	str	r0, [r7, #4]
    4ae2:	4608      	mov	r0, r1
    4ae4:	4611      	mov	r1, r2
    4ae6:	461a      	mov	r2, r3
    4ae8:	4603      	mov	r3, r0
    4aea:	70fb      	strb	r3, [r7, #3]
    4aec:	460b      	mov	r3, r1
    4aee:	70bb      	strb	r3, [r7, #2]
    4af0:	4613      	mov	r3, r2
    4af2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4af4:	78fa      	ldrb	r2, [r7, #3]
    4af6:	78bb      	ldrb	r3, [r7, #2]
    4af8:	6879      	ldr	r1, [r7, #4]
    4afa:	01d2      	lsls	r2, r2, #7
    4afc:	440a      	add	r2, r1
    4afe:	4413      	add	r3, r2
    4b00:	3330      	adds	r3, #48	; 0x30
    4b02:	781b      	ldrb	r3, [r3, #0]
    4b04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4b06:	7bfb      	ldrb	r3, [r7, #15]
    4b08:	f003 030f 	and.w	r3, r3, #15
    4b0c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4b0e:	787b      	ldrb	r3, [r7, #1]
    4b10:	011b      	lsls	r3, r3, #4
    4b12:	b2da      	uxtb	r2, r3
    4b14:	7bfb      	ldrb	r3, [r7, #15]
    4b16:	4313      	orrs	r3, r2
    4b18:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b1a:	78fa      	ldrb	r2, [r7, #3]
    4b1c:	78bb      	ldrb	r3, [r7, #2]
    4b1e:	6879      	ldr	r1, [r7, #4]
    4b20:	01d2      	lsls	r2, r2, #7
    4b22:	440a      	add	r2, r1
    4b24:	4413      	add	r3, r2
    4b26:	3330      	adds	r3, #48	; 0x30
    4b28:	7bfa      	ldrb	r2, [r7, #15]
    4b2a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4b2c:	bf00      	nop
    4b2e:	3714      	adds	r7, #20
    4b30:	46bd      	mov	sp, r7
    4b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b36:	4770      	bx	lr

00004b38 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4b38:	b480      	push	{r7}
    4b3a:	b085      	sub	sp, #20
    4b3c:	af00      	add	r7, sp, #0
    4b3e:	6078      	str	r0, [r7, #4]
    4b40:	4608      	mov	r0, r1
    4b42:	4611      	mov	r1, r2
    4b44:	461a      	mov	r2, r3
    4b46:	4603      	mov	r3, r0
    4b48:	70fb      	strb	r3, [r7, #3]
    4b4a:	460b      	mov	r3, r1
    4b4c:	70bb      	strb	r3, [r7, #2]
    4b4e:	4613      	mov	r3, r2
    4b50:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4b52:	78fa      	ldrb	r2, [r7, #3]
    4b54:	78bb      	ldrb	r3, [r7, #2]
    4b56:	6879      	ldr	r1, [r7, #4]
    4b58:	01d2      	lsls	r2, r2, #7
    4b5a:	440a      	add	r2, r1
    4b5c:	4413      	add	r3, r2
    4b5e:	3340      	adds	r3, #64	; 0x40
    4b60:	781b      	ldrb	r3, [r3, #0]
    4b62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4b64:	7bfb      	ldrb	r3, [r7, #15]
    4b66:	f023 0301 	bic.w	r3, r3, #1
    4b6a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4b6c:	787a      	ldrb	r2, [r7, #1]
    4b6e:	7bfb      	ldrb	r3, [r7, #15]
    4b70:	4313      	orrs	r3, r2
    4b72:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4b74:	78fa      	ldrb	r2, [r7, #3]
    4b76:	78bb      	ldrb	r3, [r7, #2]
    4b78:	6879      	ldr	r1, [r7, #4]
    4b7a:	01d2      	lsls	r2, r2, #7
    4b7c:	440a      	add	r2, r1
    4b7e:	4413      	add	r3, r2
    4b80:	3340      	adds	r3, #64	; 0x40
    4b82:	7bfa      	ldrb	r2, [r7, #15]
    4b84:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4b86:	bf00      	nop
    4b88:	3714      	adds	r7, #20
    4b8a:	46bd      	mov	sp, r7
    4b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b90:	4770      	bx	lr

00004b92 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4b92:	b490      	push	{r4, r7}
    4b94:	b082      	sub	sp, #8
    4b96:	af00      	add	r7, sp, #0
    4b98:	6078      	str	r0, [r7, #4]
    4b9a:	460b      	mov	r3, r1
    4b9c:	70fb      	strb	r3, [r7, #3]
    4b9e:	4613      	mov	r3, r2
    4ba0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4ba2:	78fa      	ldrb	r2, [r7, #3]
    4ba4:	78bb      	ldrb	r3, [r7, #2]
    4ba6:	78f8      	ldrb	r0, [r7, #3]
    4ba8:	78b9      	ldrb	r1, [r7, #2]
    4baa:	687c      	ldr	r4, [r7, #4]
    4bac:	01c0      	lsls	r0, r0, #7
    4bae:	4420      	add	r0, r4
    4bb0:	4401      	add	r1, r0
    4bb2:	3140      	adds	r1, #64	; 0x40
    4bb4:	7809      	ldrb	r1, [r1, #0]
    4bb6:	b2c9      	uxtb	r1, r1
    4bb8:	f041 0104 	orr.w	r1, r1, #4
    4bbc:	b2c8      	uxtb	r0, r1
    4bbe:	6879      	ldr	r1, [r7, #4]
    4bc0:	01d2      	lsls	r2, r2, #7
    4bc2:	440a      	add	r2, r1
    4bc4:	4413      	add	r3, r2
    4bc6:	3340      	adds	r3, #64	; 0x40
    4bc8:	4602      	mov	r2, r0
    4bca:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4bcc:	bf00      	nop
    4bce:	3708      	adds	r7, #8
    4bd0:	46bd      	mov	sp, r7
    4bd2:	bc90      	pop	{r4, r7}
    4bd4:	4770      	bx	lr

00004bd6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4bd6:	b490      	push	{r4, r7}
    4bd8:	b082      	sub	sp, #8
    4bda:	af00      	add	r7, sp, #0
    4bdc:	6078      	str	r0, [r7, #4]
    4bde:	460b      	mov	r3, r1
    4be0:	70fb      	strb	r3, [r7, #3]
    4be2:	4613      	mov	r3, r2
    4be4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4be6:	78fa      	ldrb	r2, [r7, #3]
    4be8:	78bb      	ldrb	r3, [r7, #2]
    4bea:	78f8      	ldrb	r0, [r7, #3]
    4bec:	78b9      	ldrb	r1, [r7, #2]
    4bee:	687c      	ldr	r4, [r7, #4]
    4bf0:	01c0      	lsls	r0, r0, #7
    4bf2:	4420      	add	r0, r4
    4bf4:	4401      	add	r1, r0
    4bf6:	3140      	adds	r1, #64	; 0x40
    4bf8:	7809      	ldrb	r1, [r1, #0]
    4bfa:	b2c9      	uxtb	r1, r1
    4bfc:	f021 0104 	bic.w	r1, r1, #4
    4c00:	b2c8      	uxtb	r0, r1
    4c02:	6879      	ldr	r1, [r7, #4]
    4c04:	01d2      	lsls	r2, r2, #7
    4c06:	440a      	add	r2, r1
    4c08:	4413      	add	r3, r2
    4c0a:	3340      	adds	r3, #64	; 0x40
    4c0c:	4602      	mov	r2, r0
    4c0e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4c10:	bf00      	nop
    4c12:	3708      	adds	r7, #8
    4c14:	46bd      	mov	sp, r7
    4c16:	bc90      	pop	{r4, r7}
    4c18:	4770      	bx	lr

00004c1a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    4c1a:	b480      	push	{r7}
    4c1c:	b085      	sub	sp, #20
    4c1e:	af00      	add	r7, sp, #0
    4c20:	60f8      	str	r0, [r7, #12]
    4c22:	460b      	mov	r3, r1
    4c24:	607a      	str	r2, [r7, #4]
    4c26:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c28:	7afb      	ldrb	r3, [r7, #11]
    4c2a:	68fa      	ldr	r2, [r7, #12]
    4c2c:	01db      	lsls	r3, r3, #7
    4c2e:	4413      	add	r3, r2
    4c30:	3328      	adds	r3, #40	; 0x28
    4c32:	687a      	ldr	r2, [r7, #4]
    4c34:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4c36:	bf00      	nop
    4c38:	3714      	adds	r7, #20
    4c3a:	46bd      	mov	sp, r7
    4c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c40:	4770      	bx	lr
	...

00004c44 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4c44:	b580      	push	{r7, lr}
    4c46:	b082      	sub	sp, #8
    4c48:	af00      	add	r7, sp, #0
    4c4a:	4603      	mov	r3, r0
    4c4c:	6039      	str	r1, [r7, #0]
    4c4e:	71fb      	strb	r3, [r7, #7]
    4c50:	4613      	mov	r3, r2
    4c52:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4c54:	79bb      	ldrb	r3, [r7, #6]
    4c56:	2b01      	cmp	r3, #1
    4c58:	d01c      	beq.n	4c94 <_gpio_set_direction+0x50>
    4c5a:	2b02      	cmp	r3, #2
    4c5c:	d037      	beq.n	4cce <_gpio_set_direction+0x8a>
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d14e      	bne.n	4d00 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4c62:	79fb      	ldrb	r3, [r7, #7]
    4c64:	683a      	ldr	r2, [r7, #0]
    4c66:	4619      	mov	r1, r3
    4c68:	482a      	ldr	r0, [pc, #168]	; (4d14 <_gpio_set_direction+0xd0>)
    4c6a:	4b2b      	ldr	r3, [pc, #172]	; (4d18 <_gpio_set_direction+0xd4>)
    4c6c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4c6e:	683b      	ldr	r3, [r7, #0]
    4c70:	b29b      	uxth	r3, r3
    4c72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4c76:	79fb      	ldrb	r3, [r7, #7]
    4c78:	4619      	mov	r1, r3
    4c7a:	4826      	ldr	r0, [pc, #152]	; (4d14 <_gpio_set_direction+0xd0>)
    4c7c:	4b27      	ldr	r3, [pc, #156]	; (4d1c <_gpio_set_direction+0xd8>)
    4c7e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4c80:	683b      	ldr	r3, [r7, #0]
    4c82:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4c84:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4c88:	79fb      	ldrb	r3, [r7, #7]
    4c8a:	4619      	mov	r1, r3
    4c8c:	4821      	ldr	r0, [pc, #132]	; (4d14 <_gpio_set_direction+0xd0>)
    4c8e:	4b23      	ldr	r3, [pc, #140]	; (4d1c <_gpio_set_direction+0xd8>)
    4c90:	4798      	blx	r3
		break;
    4c92:	e03a      	b.n	4d0a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4c94:	79fb      	ldrb	r3, [r7, #7]
    4c96:	683a      	ldr	r2, [r7, #0]
    4c98:	4619      	mov	r1, r3
    4c9a:	481e      	ldr	r0, [pc, #120]	; (4d14 <_gpio_set_direction+0xd0>)
    4c9c:	4b1e      	ldr	r3, [pc, #120]	; (4d18 <_gpio_set_direction+0xd4>)
    4c9e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4ca0:	683b      	ldr	r3, [r7, #0]
    4ca2:	b29b      	uxth	r3, r3
    4ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4cac:	79f9      	ldrb	r1, [r7, #7]
    4cae:	461a      	mov	r2, r3
    4cb0:	4818      	ldr	r0, [pc, #96]	; (4d14 <_gpio_set_direction+0xd0>)
    4cb2:	4b1a      	ldr	r3, [pc, #104]	; (4d1c <_gpio_set_direction+0xd8>)
    4cb4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    4cb6:	683b      	ldr	r3, [r7, #0]
    4cb8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    4cba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4cc2:	79f9      	ldrb	r1, [r7, #7]
    4cc4:	461a      	mov	r2, r3
    4cc6:	4813      	ldr	r0, [pc, #76]	; (4d14 <_gpio_set_direction+0xd0>)
    4cc8:	4b14      	ldr	r3, [pc, #80]	; (4d1c <_gpio_set_direction+0xd8>)
    4cca:	4798      	blx	r3
		break;
    4ccc:	e01d      	b.n	4d0a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    4cce:	79fb      	ldrb	r3, [r7, #7]
    4cd0:	683a      	ldr	r2, [r7, #0]
    4cd2:	4619      	mov	r1, r3
    4cd4:	480f      	ldr	r0, [pc, #60]	; (4d14 <_gpio_set_direction+0xd0>)
    4cd6:	4b12      	ldr	r3, [pc, #72]	; (4d20 <_gpio_set_direction+0xdc>)
    4cd8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    4cda:	683b      	ldr	r3, [r7, #0]
    4cdc:	b29b      	uxth	r3, r3
    4cde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4ce2:	79fb      	ldrb	r3, [r7, #7]
    4ce4:	4619      	mov	r1, r3
    4ce6:	480b      	ldr	r0, [pc, #44]	; (4d14 <_gpio_set_direction+0xd0>)
    4ce8:	4b0c      	ldr	r3, [pc, #48]	; (4d1c <_gpio_set_direction+0xd8>)
    4cea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4cec:	683b      	ldr	r3, [r7, #0]
    4cee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4cf0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4cf4:	79fb      	ldrb	r3, [r7, #7]
    4cf6:	4619      	mov	r1, r3
    4cf8:	4806      	ldr	r0, [pc, #24]	; (4d14 <_gpio_set_direction+0xd0>)
    4cfa:	4b08      	ldr	r3, [pc, #32]	; (4d1c <_gpio_set_direction+0xd8>)
    4cfc:	4798      	blx	r3
		break;
    4cfe:	e004      	b.n	4d0a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    4d00:	2246      	movs	r2, #70	; 0x46
    4d02:	4908      	ldr	r1, [pc, #32]	; (4d24 <_gpio_set_direction+0xe0>)
    4d04:	2000      	movs	r0, #0
    4d06:	4b08      	ldr	r3, [pc, #32]	; (4d28 <_gpio_set_direction+0xe4>)
    4d08:	4798      	blx	r3
	}
}
    4d0a:	bf00      	nop
    4d0c:	3708      	adds	r7, #8
    4d0e:	46bd      	mov	sp, r7
    4d10:	bd80      	pop	{r7, pc}
    4d12:	bf00      	nop
    4d14:	41008000 	.word	0x41008000
    4d18:	00004a03 	.word	0x00004a03
    4d1c:	00004c1b 	.word	0x00004c1b
    4d20:	000049db 	.word	0x000049db
    4d24:	000129a8 	.word	0x000129a8
    4d28:	00007361 	.word	0x00007361

00004d2c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b082      	sub	sp, #8
    4d30:	af00      	add	r7, sp, #0
    4d32:	4603      	mov	r3, r0
    4d34:	6039      	str	r1, [r7, #0]
    4d36:	71fb      	strb	r3, [r7, #7]
    4d38:	4613      	mov	r3, r2
    4d3a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4d3c:	79bb      	ldrb	r3, [r7, #6]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d006      	beq.n	4d50 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4d42:	79fb      	ldrb	r3, [r7, #7]
    4d44:	683a      	ldr	r2, [r7, #0]
    4d46:	4619      	mov	r1, r3
    4d48:	4806      	ldr	r0, [pc, #24]	; (4d64 <_gpio_set_level+0x38>)
    4d4a:	4b07      	ldr	r3, [pc, #28]	; (4d68 <_gpio_set_level+0x3c>)
    4d4c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4d4e:	e005      	b.n	4d5c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4d50:	79fb      	ldrb	r3, [r7, #7]
    4d52:	683a      	ldr	r2, [r7, #0]
    4d54:	4619      	mov	r1, r3
    4d56:	4803      	ldr	r0, [pc, #12]	; (4d64 <_gpio_set_level+0x38>)
    4d58:	4b04      	ldr	r3, [pc, #16]	; (4d6c <_gpio_set_level+0x40>)
    4d5a:	4798      	blx	r3
}
    4d5c:	bf00      	nop
    4d5e:	3708      	adds	r7, #8
    4d60:	46bd      	mov	sp, r7
    4d62:	bd80      	pop	{r7, pc}
    4d64:	41008000 	.word	0x41008000
    4d68:	00004a2b 	.word	0x00004a2b
    4d6c:	00004a53 	.word	0x00004a53

00004d70 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4d70:	b580      	push	{r7, lr}
    4d72:	b082      	sub	sp, #8
    4d74:	af00      	add	r7, sp, #0
    4d76:	4603      	mov	r3, r0
    4d78:	71fb      	strb	r3, [r7, #7]
    4d7a:	460b      	mov	r3, r1
    4d7c:	71bb      	strb	r3, [r7, #6]
    4d7e:	4613      	mov	r3, r2
    4d80:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    4d82:	797b      	ldrb	r3, [r7, #5]
    4d84:	2b01      	cmp	r3, #1
    4d86:	d00a      	beq.n	4d9e <_gpio_set_pin_pull_mode+0x2e>
    4d88:	2b02      	cmp	r3, #2
    4d8a:	d01f      	beq.n	4dcc <_gpio_set_pin_pull_mode+0x5c>
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d134      	bne.n	4dfa <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4d90:	79ba      	ldrb	r2, [r7, #6]
    4d92:	79fb      	ldrb	r3, [r7, #7]
    4d94:	4619      	mov	r1, r3
    4d96:	481e      	ldr	r0, [pc, #120]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4d98:	4b1e      	ldr	r3, [pc, #120]	; (4e14 <_gpio_set_pin_pull_mode+0xa4>)
    4d9a:	4798      	blx	r3
		break;
    4d9c:	e033      	b.n	4e06 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4d9e:	79bb      	ldrb	r3, [r7, #6]
    4da0:	2201      	movs	r2, #1
    4da2:	409a      	lsls	r2, r3
    4da4:	79fb      	ldrb	r3, [r7, #7]
    4da6:	4619      	mov	r1, r3
    4da8:	4819      	ldr	r0, [pc, #100]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4daa:	4b1b      	ldr	r3, [pc, #108]	; (4e18 <_gpio_set_pin_pull_mode+0xa8>)
    4dac:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4dae:	79ba      	ldrb	r2, [r7, #6]
    4db0:	79fb      	ldrb	r3, [r7, #7]
    4db2:	4619      	mov	r1, r3
    4db4:	4816      	ldr	r0, [pc, #88]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4db6:	4b19      	ldr	r3, [pc, #100]	; (4e1c <_gpio_set_pin_pull_mode+0xac>)
    4db8:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4dba:	79bb      	ldrb	r3, [r7, #6]
    4dbc:	2201      	movs	r2, #1
    4dbe:	409a      	lsls	r2, r3
    4dc0:	79fb      	ldrb	r3, [r7, #7]
    4dc2:	4619      	mov	r1, r3
    4dc4:	4812      	ldr	r0, [pc, #72]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4dc6:	4b16      	ldr	r3, [pc, #88]	; (4e20 <_gpio_set_pin_pull_mode+0xb0>)
    4dc8:	4798      	blx	r3
		break;
    4dca:	e01c      	b.n	4e06 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4dcc:	79bb      	ldrb	r3, [r7, #6]
    4dce:	2201      	movs	r2, #1
    4dd0:	409a      	lsls	r2, r3
    4dd2:	79fb      	ldrb	r3, [r7, #7]
    4dd4:	4619      	mov	r1, r3
    4dd6:	480e      	ldr	r0, [pc, #56]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4dd8:	4b0f      	ldr	r3, [pc, #60]	; (4e18 <_gpio_set_pin_pull_mode+0xa8>)
    4dda:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4ddc:	79ba      	ldrb	r2, [r7, #6]
    4dde:	79fb      	ldrb	r3, [r7, #7]
    4de0:	4619      	mov	r1, r3
    4de2:	480b      	ldr	r0, [pc, #44]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4de4:	4b0d      	ldr	r3, [pc, #52]	; (4e1c <_gpio_set_pin_pull_mode+0xac>)
    4de6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    4de8:	79bb      	ldrb	r3, [r7, #6]
    4dea:	2201      	movs	r2, #1
    4dec:	409a      	lsls	r2, r3
    4dee:	79fb      	ldrb	r3, [r7, #7]
    4df0:	4619      	mov	r1, r3
    4df2:	4807      	ldr	r0, [pc, #28]	; (4e10 <_gpio_set_pin_pull_mode+0xa0>)
    4df4:	4b0b      	ldr	r3, [pc, #44]	; (4e24 <_gpio_set_pin_pull_mode+0xb4>)
    4df6:	4798      	blx	r3
		break;
    4df8:	e005      	b.n	4e06 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    4dfa:	2289      	movs	r2, #137	; 0x89
    4dfc:	490a      	ldr	r1, [pc, #40]	; (4e28 <_gpio_set_pin_pull_mode+0xb8>)
    4dfe:	2000      	movs	r0, #0
    4e00:	4b0a      	ldr	r3, [pc, #40]	; (4e2c <_gpio_set_pin_pull_mode+0xbc>)
    4e02:	4798      	blx	r3
		break;
    4e04:	bf00      	nop
	}
}
    4e06:	bf00      	nop
    4e08:	3708      	adds	r7, #8
    4e0a:	46bd      	mov	sp, r7
    4e0c:	bd80      	pop	{r7, pc}
    4e0e:	bf00      	nop
    4e10:	41008000 	.word	0x41008000
    4e14:	00004bd7 	.word	0x00004bd7
    4e18:	00004a03 	.word	0x00004a03
    4e1c:	00004b93 	.word	0x00004b93
    4e20:	00004a2b 	.word	0x00004a2b
    4e24:	00004a53 	.word	0x00004a53
    4e28:	000129a8 	.word	0x000129a8
    4e2c:	00007361 	.word	0x00007361

00004e30 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4e30:	b590      	push	{r4, r7, lr}
    4e32:	b085      	sub	sp, #20
    4e34:	af00      	add	r7, sp, #0
    4e36:	6078      	str	r0, [r7, #4]
    4e38:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	095b      	lsrs	r3, r3, #5
    4e3e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	b2db      	uxtb	r3, r3
    4e44:	f003 031f 	and.w	r3, r3, #31
    4e48:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4e4a:	683b      	ldr	r3, [r7, #0]
    4e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e50:	d106      	bne.n	4e60 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4e52:	7bba      	ldrb	r2, [r7, #14]
    4e54:	7bf9      	ldrb	r1, [r7, #15]
    4e56:	2300      	movs	r3, #0
    4e58:	4812      	ldr	r0, [pc, #72]	; (4ea4 <_gpio_set_pin_function+0x74>)
    4e5a:	4c13      	ldr	r4, [pc, #76]	; (4ea8 <_gpio_set_pin_function+0x78>)
    4e5c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4e5e:	e01d      	b.n	4e9c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4e60:	7bba      	ldrb	r2, [r7, #14]
    4e62:	7bf9      	ldrb	r1, [r7, #15]
    4e64:	2301      	movs	r3, #1
    4e66:	480f      	ldr	r0, [pc, #60]	; (4ea4 <_gpio_set_pin_function+0x74>)
    4e68:	4c0f      	ldr	r4, [pc, #60]	; (4ea8 <_gpio_set_pin_function+0x78>)
    4e6a:	47a0      	blx	r4
		if (pin & 1) {
    4e6c:	7bbb      	ldrb	r3, [r7, #14]
    4e6e:	f003 0301 	and.w	r3, r3, #1
    4e72:	2b00      	cmp	r3, #0
    4e74:	d009      	beq.n	4e8a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4e76:	7bbb      	ldrb	r3, [r7, #14]
    4e78:	085b      	lsrs	r3, r3, #1
    4e7a:	b2da      	uxtb	r2, r3
    4e7c:	683b      	ldr	r3, [r7, #0]
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	7bf9      	ldrb	r1, [r7, #15]
    4e82:	4808      	ldr	r0, [pc, #32]	; (4ea4 <_gpio_set_pin_function+0x74>)
    4e84:	4c09      	ldr	r4, [pc, #36]	; (4eac <_gpio_set_pin_function+0x7c>)
    4e86:	47a0      	blx	r4
}
    4e88:	e008      	b.n	4e9c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4e8a:	7bbb      	ldrb	r3, [r7, #14]
    4e8c:	085b      	lsrs	r3, r3, #1
    4e8e:	b2da      	uxtb	r2, r3
    4e90:	683b      	ldr	r3, [r7, #0]
    4e92:	b2db      	uxtb	r3, r3
    4e94:	7bf9      	ldrb	r1, [r7, #15]
    4e96:	4803      	ldr	r0, [pc, #12]	; (4ea4 <_gpio_set_pin_function+0x74>)
    4e98:	4c05      	ldr	r4, [pc, #20]	; (4eb0 <_gpio_set_pin_function+0x80>)
    4e9a:	47a0      	blx	r4
}
    4e9c:	bf00      	nop
    4e9e:	3714      	adds	r7, #20
    4ea0:	46bd      	mov	sp, r7
    4ea2:	bd90      	pop	{r4, r7, pc}
    4ea4:	41008000 	.word	0x41008000
    4ea8:	00004b39 	.word	0x00004b39
    4eac:	00004adb 	.word	0x00004adb
    4eb0:	00004a7b 	.word	0x00004a7b

00004eb4 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b082      	sub	sp, #8
    4eb8:	af00      	add	r7, sp, #0
    4eba:	4603      	mov	r3, r0
    4ebc:	460a      	mov	r2, r1
    4ebe:	71fb      	strb	r3, [r7, #7]
    4ec0:	4613      	mov	r3, r2
    4ec2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4ec4:	79fb      	ldrb	r3, [r7, #7]
    4ec6:	095b      	lsrs	r3, r3, #5
    4ec8:	b2d8      	uxtb	r0, r3
    4eca:	79fb      	ldrb	r3, [r7, #7]
    4ecc:	f003 031f 	and.w	r3, r3, #31
    4ed0:	b2db      	uxtb	r3, r3
    4ed2:	79ba      	ldrb	r2, [r7, #6]
    4ed4:	4619      	mov	r1, r3
    4ed6:	4b03      	ldr	r3, [pc, #12]	; (4ee4 <gpio_set_pin_pull_mode+0x30>)
    4ed8:	4798      	blx	r3
}
    4eda:	bf00      	nop
    4edc:	3708      	adds	r7, #8
    4ede:	46bd      	mov	sp, r7
    4ee0:	bd80      	pop	{r7, pc}
    4ee2:	bf00      	nop
    4ee4:	00004d71 	.word	0x00004d71

00004ee8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4ee8:	b580      	push	{r7, lr}
    4eea:	b082      	sub	sp, #8
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
    4ef0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4ef2:	6839      	ldr	r1, [r7, #0]
    4ef4:	6878      	ldr	r0, [r7, #4]
    4ef6:	4b03      	ldr	r3, [pc, #12]	; (4f04 <gpio_set_pin_function+0x1c>)
    4ef8:	4798      	blx	r3
}
    4efa:	bf00      	nop
    4efc:	3708      	adds	r7, #8
    4efe:	46bd      	mov	sp, r7
    4f00:	bd80      	pop	{r7, pc}
    4f02:	bf00      	nop
    4f04:	00004e31 	.word	0x00004e31

00004f08 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b082      	sub	sp, #8
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	4603      	mov	r3, r0
    4f10:	460a      	mov	r2, r1
    4f12:	71fb      	strb	r3, [r7, #7]
    4f14:	4613      	mov	r3, r2
    4f16:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4f18:	79fb      	ldrb	r3, [r7, #7]
    4f1a:	095b      	lsrs	r3, r3, #5
    4f1c:	b2d8      	uxtb	r0, r3
    4f1e:	79fb      	ldrb	r3, [r7, #7]
    4f20:	f003 031f 	and.w	r3, r3, #31
    4f24:	2201      	movs	r2, #1
    4f26:	fa02 f303 	lsl.w	r3, r2, r3
    4f2a:	79ba      	ldrb	r2, [r7, #6]
    4f2c:	4619      	mov	r1, r3
    4f2e:	4b03      	ldr	r3, [pc, #12]	; (4f3c <gpio_set_pin_direction+0x34>)
    4f30:	4798      	blx	r3
}
    4f32:	bf00      	nop
    4f34:	3708      	adds	r7, #8
    4f36:	46bd      	mov	sp, r7
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	bf00      	nop
    4f3c:	00004c45 	.word	0x00004c45

00004f40 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b082      	sub	sp, #8
    4f44:	af00      	add	r7, sp, #0
    4f46:	4603      	mov	r3, r0
    4f48:	460a      	mov	r2, r1
    4f4a:	71fb      	strb	r3, [r7, #7]
    4f4c:	4613      	mov	r3, r2
    4f4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4f50:	79fb      	ldrb	r3, [r7, #7]
    4f52:	095b      	lsrs	r3, r3, #5
    4f54:	b2d8      	uxtb	r0, r3
    4f56:	79fb      	ldrb	r3, [r7, #7]
    4f58:	f003 031f 	and.w	r3, r3, #31
    4f5c:	2201      	movs	r2, #1
    4f5e:	fa02 f303 	lsl.w	r3, r2, r3
    4f62:	79ba      	ldrb	r2, [r7, #6]
    4f64:	4619      	mov	r1, r3
    4f66:	4b03      	ldr	r3, [pc, #12]	; (4f74 <gpio_set_pin_level+0x34>)
    4f68:	4798      	blx	r3
}
    4f6a:	bf00      	nop
    4f6c:	3708      	adds	r7, #8
    4f6e:	46bd      	mov	sp, r7
    4f70:	bd80      	pop	{r7, pc}
    4f72:	bf00      	nop
    4f74:	00004d2d 	.word	0x00004d2d

00004f78 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	af00      	add	r7, sp, #0
	_init_chip();
    4f7c:	4b01      	ldr	r3, [pc, #4]	; (4f84 <init_mcu+0xc>)
    4f7e:	4798      	blx	r3
}
    4f80:	bf00      	nop
    4f82:	bd80      	pop	{r7, pc}
    4f84:	000085bd 	.word	0x000085bd

00004f88 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    4f88:	b580      	push	{r7, lr}
    4f8a:	b082      	sub	sp, #8
    4f8c:	af00      	add	r7, sp, #0
    4f8e:	6078      	str	r0, [r7, #4]
    4f90:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	2b00      	cmp	r3, #0
    4f96:	d004      	beq.n	4fa2 <wdt_init+0x1a>
    4f98:	683b      	ldr	r3, [r7, #0]
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d001      	beq.n	4fa2 <wdt_init+0x1a>
    4f9e:	2301      	movs	r3, #1
    4fa0:	e000      	b.n	4fa4 <wdt_init+0x1c>
    4fa2:	2300      	movs	r3, #0
    4fa4:	f003 0301 	and.w	r3, r3, #1
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	2248      	movs	r2, #72	; 0x48
    4fac:	4907      	ldr	r1, [pc, #28]	; (4fcc <wdt_init+0x44>)
    4fae:	4618      	mov	r0, r3
    4fb0:	4b07      	ldr	r3, [pc, #28]	; (4fd0 <wdt_init+0x48>)
    4fb2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    4fb4:	687b      	ldr	r3, [r7, #4]
    4fb6:	683a      	ldr	r2, [r7, #0]
    4fb8:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	4618      	mov	r0, r3
    4fbe:	4b05      	ldr	r3, [pc, #20]	; (4fd4 <wdt_init+0x4c>)
    4fc0:	4798      	blx	r3
    4fc2:	4603      	mov	r3, r0
}
    4fc4:	4618      	mov	r0, r3
    4fc6:	3708      	adds	r7, #8
    4fc8:	46bd      	mov	sp, r7
    4fca:	bd80      	pop	{r7, pc}
    4fcc:	000129c4 	.word	0x000129c4
    4fd0:	00007361 	.word	0x00007361
    4fd4:	0000edf9 	.word	0x0000edf9

00004fd8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    4fdc:	4804      	ldr	r0, [pc, #16]	; (4ff0 <CRC_CALC_init+0x18>)
    4fde:	4b05      	ldr	r3, [pc, #20]	; (4ff4 <CRC_CALC_init+0x1c>)
    4fe0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    4fe2:	4905      	ldr	r1, [pc, #20]	; (4ff8 <CRC_CALC_init+0x20>)
    4fe4:	4805      	ldr	r0, [pc, #20]	; (4ffc <CRC_CALC_init+0x24>)
    4fe6:	4b06      	ldr	r3, [pc, #24]	; (5000 <CRC_CALC_init+0x28>)
    4fe8:	4798      	blx	r3
}
    4fea:	bf00      	nop
    4fec:	bd80      	pop	{r7, pc}
    4fee:	bf00      	nop
    4ff0:	40000800 	.word	0x40000800
    4ff4:	000047fb 	.word	0x000047fb
    4ff8:	41002000 	.word	0x41002000
    4ffc:	20002720 	.word	0x20002720
    5000:	00005f5d 	.word	0x00005f5d

00005004 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    5004:	b580      	push	{r7, lr}
    5006:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5008:	2244      	movs	r2, #68	; 0x44
    500a:	2104      	movs	r1, #4
    500c:	483f      	ldr	r0, [pc, #252]	; (510c <EXTERNAL_IRQ_0_init+0x108>)
    500e:	4b40      	ldr	r3, [pc, #256]	; (5110 <EXTERNAL_IRQ_0_init+0x10c>)
    5010:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    5012:	4840      	ldr	r0, [pc, #256]	; (5114 <EXTERNAL_IRQ_0_init+0x110>)
    5014:	4b40      	ldr	r3, [pc, #256]	; (5118 <EXTERNAL_IRQ_0_init+0x114>)
    5016:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    5018:	2101      	movs	r1, #1
    501a:	2040      	movs	r0, #64	; 0x40
    501c:	4b3f      	ldr	r3, [pc, #252]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    501e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    5020:	2100      	movs	r1, #0
    5022:	2040      	movs	r0, #64	; 0x40
    5024:	4b3e      	ldr	r3, [pc, #248]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    5026:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    5028:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    502c:	2040      	movs	r0, #64	; 0x40
    502e:	4b3d      	ldr	r3, [pc, #244]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    5030:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    5032:	2101      	movs	r1, #1
    5034:	2021      	movs	r0, #33	; 0x21
    5036:	4b39      	ldr	r3, [pc, #228]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    5038:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    503a:	2100      	movs	r1, #0
    503c:	2021      	movs	r0, #33	; 0x21
    503e:	4b38      	ldr	r3, [pc, #224]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    5040:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    5042:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    5046:	2021      	movs	r0, #33	; 0x21
    5048:	4b36      	ldr	r3, [pc, #216]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    504a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    504c:	2101      	movs	r1, #1
    504e:	2003      	movs	r0, #3
    5050:	4b32      	ldr	r3, [pc, #200]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    5052:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    5054:	2102      	movs	r1, #2
    5056:	2003      	movs	r0, #3
    5058:	4b31      	ldr	r3, [pc, #196]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    505a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    505c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    5060:	2003      	movs	r0, #3
    5062:	4b30      	ldr	r3, [pc, #192]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    5064:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    5066:	2101      	movs	r1, #1
    5068:	2004      	movs	r0, #4
    506a:	4b2c      	ldr	r3, [pc, #176]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    506c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    506e:	2102      	movs	r1, #2
    5070:	2004      	movs	r0, #4
    5072:	4b2b      	ldr	r3, [pc, #172]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    5074:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    5076:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    507a:	2004      	movs	r0, #4
    507c:	4b29      	ldr	r3, [pc, #164]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    507e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    5080:	2101      	movs	r1, #1
    5082:	2005      	movs	r0, #5
    5084:	4b25      	ldr	r3, [pc, #148]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    5086:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    5088:	2102      	movs	r1, #2
    508a:	2005      	movs	r0, #5
    508c:	4b24      	ldr	r3, [pc, #144]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    508e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    5090:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    5094:	2005      	movs	r0, #5
    5096:	4b23      	ldr	r3, [pc, #140]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    5098:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    509a:	2101      	movs	r1, #1
    509c:	2056      	movs	r0, #86	; 0x56
    509e:	4b1f      	ldr	r3, [pc, #124]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    50a0:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    50a2:	2102      	movs	r1, #2
    50a4:	2056      	movs	r0, #86	; 0x56
    50a6:	4b1e      	ldr	r3, [pc, #120]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    50a8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    50aa:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    50ae:	2056      	movs	r0, #86	; 0x56
    50b0:	4b1c      	ldr	r3, [pc, #112]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    50b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    50b4:	2101      	movs	r1, #1
    50b6:	2057      	movs	r0, #87	; 0x57
    50b8:	4b18      	ldr	r3, [pc, #96]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    50ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    50bc:	2102      	movs	r1, #2
    50be:	2057      	movs	r0, #87	; 0x57
    50c0:	4b17      	ldr	r3, [pc, #92]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    50c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    50c4:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    50c8:	2057      	movs	r0, #87	; 0x57
    50ca:	4b16      	ldr	r3, [pc, #88]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    50cc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    50ce:	2101      	movs	r1, #1
    50d0:	2028      	movs	r0, #40	; 0x28
    50d2:	4b12      	ldr	r3, [pc, #72]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    50d4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    50d6:	2100      	movs	r1, #0
    50d8:	2028      	movs	r0, #40	; 0x28
    50da:	4b11      	ldr	r3, [pc, #68]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    50dc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    50de:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    50e2:	2028      	movs	r0, #40	; 0x28
    50e4:	4b0f      	ldr	r3, [pc, #60]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    50e6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    50e8:	2101      	movs	r1, #1
    50ea:	2029      	movs	r0, #41	; 0x29
    50ec:	4b0b      	ldr	r3, [pc, #44]	; (511c <EXTERNAL_IRQ_0_init+0x118>)
    50ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    50f0:	2100      	movs	r1, #0
    50f2:	2029      	movs	r0, #41	; 0x29
    50f4:	4b0a      	ldr	r3, [pc, #40]	; (5120 <EXTERNAL_IRQ_0_init+0x11c>)
    50f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    50f8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    50fc:	2029      	movs	r0, #41	; 0x29
    50fe:	4b09      	ldr	r3, [pc, #36]	; (5124 <EXTERNAL_IRQ_0_init+0x120>)
    5100:	4798      	blx	r3

	ext_irq_init();
    5102:	4b09      	ldr	r3, [pc, #36]	; (5128 <EXTERNAL_IRQ_0_init+0x124>)
    5104:	4798      	blx	r3
}
    5106:	bf00      	nop
    5108:	bd80      	pop	{r7, pc}
    510a:	bf00      	nop
    510c:	40001c00 	.word	0x40001c00
    5110:	00004695 	.word	0x00004695
    5114:	40000800 	.word	0x40000800
    5118:	0000477b 	.word	0x0000477b
    511c:	00004f09 	.word	0x00004f09
    5120:	00004eb5 	.word	0x00004eb5
    5124:	00004ee9 	.word	0x00004ee9
    5128:	00006025 	.word	0x00006025

0000512c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    512c:	b580      	push	{r7, lr}
    512e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5130:	2244      	movs	r2, #68	; 0x44
    5132:	210b      	movs	r1, #11
    5134:	4807      	ldr	r0, [pc, #28]	; (5154 <EVENT_SYSTEM_0_init+0x28>)
    5136:	4b08      	ldr	r3, [pc, #32]	; (5158 <EVENT_SYSTEM_0_init+0x2c>)
    5138:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    513a:	2244      	movs	r2, #68	; 0x44
    513c:	210c      	movs	r1, #12
    513e:	4805      	ldr	r0, [pc, #20]	; (5154 <EVENT_SYSTEM_0_init+0x28>)
    5140:	4b05      	ldr	r3, [pc, #20]	; (5158 <EVENT_SYSTEM_0_init+0x2c>)
    5142:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    5144:	4805      	ldr	r0, [pc, #20]	; (515c <EVENT_SYSTEM_0_init+0x30>)
    5146:	4b06      	ldr	r3, [pc, #24]	; (5160 <EVENT_SYSTEM_0_init+0x34>)
    5148:	4798      	blx	r3

	event_system_init();
    514a:	4b06      	ldr	r3, [pc, #24]	; (5164 <EVENT_SYSTEM_0_init+0x38>)
    514c:	4798      	blx	r3
}
    514e:	bf00      	nop
    5150:	bd80      	pop	{r7, pc}
    5152:	bf00      	nop
    5154:	40001c00 	.word	0x40001c00
    5158:	00004695 	.word	0x00004695
    515c:	40000800 	.word	0x40000800
    5160:	0000481b 	.word	0x0000481b
    5164:	00006011 	.word	0x00006011

00005168 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    5168:	b580      	push	{r7, lr}
    516a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    516c:	2101      	movs	r1, #1
    516e:	202b      	movs	r0, #43	; 0x2b
    5170:	4b2b      	ldr	r3, [pc, #172]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    5172:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    5174:	2100      	movs	r1, #0
    5176:	202b      	movs	r0, #43	; 0x2b
    5178:	4b2a      	ldr	r3, [pc, #168]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    517a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    517c:	492a      	ldr	r1, [pc, #168]	; (5228 <QSPI_N25Q256_PORT_init+0xc0>)
    517e:	202b      	movs	r0, #43	; 0x2b
    5180:	4b2a      	ldr	r3, [pc, #168]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    5182:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    5184:	2102      	movs	r1, #2
    5186:	2008      	movs	r0, #8
    5188:	4b25      	ldr	r3, [pc, #148]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    518a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    518c:	2100      	movs	r1, #0
    518e:	2008      	movs	r0, #8
    5190:	4b27      	ldr	r3, [pc, #156]	; (5230 <QSPI_N25Q256_PORT_init+0xc8>)
    5192:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    5194:	2100      	movs	r1, #0
    5196:	2008      	movs	r0, #8
    5198:	4b22      	ldr	r3, [pc, #136]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    519a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    519c:	4925      	ldr	r1, [pc, #148]	; (5234 <QSPI_N25Q256_PORT_init+0xcc>)
    519e:	2008      	movs	r0, #8
    51a0:	4b22      	ldr	r3, [pc, #136]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    51a2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    51a4:	2102      	movs	r1, #2
    51a6:	2009      	movs	r0, #9
    51a8:	4b1d      	ldr	r3, [pc, #116]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    51aa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    51ac:	2100      	movs	r1, #0
    51ae:	2009      	movs	r0, #9
    51b0:	4b1f      	ldr	r3, [pc, #124]	; (5230 <QSPI_N25Q256_PORT_init+0xc8>)
    51b2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    51b4:	2100      	movs	r1, #0
    51b6:	2009      	movs	r0, #9
    51b8:	4b1a      	ldr	r3, [pc, #104]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    51ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    51bc:	491e      	ldr	r1, [pc, #120]	; (5238 <QSPI_N25Q256_PORT_init+0xd0>)
    51be:	2009      	movs	r0, #9
    51c0:	4b1a      	ldr	r3, [pc, #104]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    51c2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    51c4:	2102      	movs	r1, #2
    51c6:	200a      	movs	r0, #10
    51c8:	4b15      	ldr	r3, [pc, #84]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    51ca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    51cc:	2100      	movs	r1, #0
    51ce:	200a      	movs	r0, #10
    51d0:	4b17      	ldr	r3, [pc, #92]	; (5230 <QSPI_N25Q256_PORT_init+0xc8>)
    51d2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    51d4:	2100      	movs	r1, #0
    51d6:	200a      	movs	r0, #10
    51d8:	4b12      	ldr	r3, [pc, #72]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    51da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    51dc:	4917      	ldr	r1, [pc, #92]	; (523c <QSPI_N25Q256_PORT_init+0xd4>)
    51de:	200a      	movs	r0, #10
    51e0:	4b12      	ldr	r3, [pc, #72]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    51e2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    51e4:	2102      	movs	r1, #2
    51e6:	200b      	movs	r0, #11
    51e8:	4b0d      	ldr	r3, [pc, #52]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    51ea:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    51ec:	2100      	movs	r1, #0
    51ee:	200b      	movs	r0, #11
    51f0:	4b0f      	ldr	r3, [pc, #60]	; (5230 <QSPI_N25Q256_PORT_init+0xc8>)
    51f2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    51f4:	2100      	movs	r1, #0
    51f6:	200b      	movs	r0, #11
    51f8:	4b0a      	ldr	r3, [pc, #40]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    51fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    51fc:	4910      	ldr	r1, [pc, #64]	; (5240 <QSPI_N25Q256_PORT_init+0xd8>)
    51fe:	200b      	movs	r0, #11
    5200:	4b0a      	ldr	r3, [pc, #40]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    5202:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    5204:	2101      	movs	r1, #1
    5206:	202a      	movs	r0, #42	; 0x2a
    5208:	4b05      	ldr	r3, [pc, #20]	; (5220 <QSPI_N25Q256_PORT_init+0xb8>)
    520a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    520c:	2100      	movs	r1, #0
    520e:	202a      	movs	r0, #42	; 0x2a
    5210:	4b04      	ldr	r3, [pc, #16]	; (5224 <QSPI_N25Q256_PORT_init+0xbc>)
    5212:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    5214:	490b      	ldr	r1, [pc, #44]	; (5244 <QSPI_N25Q256_PORT_init+0xdc>)
    5216:	202a      	movs	r0, #42	; 0x2a
    5218:	4b04      	ldr	r3, [pc, #16]	; (522c <QSPI_N25Q256_PORT_init+0xc4>)
    521a:	4798      	blx	r3
}
    521c:	bf00      	nop
    521e:	bd80      	pop	{r7, pc}
    5220:	00004f09 	.word	0x00004f09
    5224:	00004eb5 	.word	0x00004eb5
    5228:	002b0007 	.word	0x002b0007
    522c:	00004ee9 	.word	0x00004ee9
    5230:	00004f41 	.word	0x00004f41
    5234:	00080007 	.word	0x00080007
    5238:	00090007 	.word	0x00090007
    523c:	000a0007 	.word	0x000a0007
    5240:	000b0007 	.word	0x000b0007
    5244:	002a0007 	.word	0x002a0007

00005248 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    5248:	b580      	push	{r7, lr}
    524a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    524c:	4805      	ldr	r0, [pc, #20]	; (5264 <QSPI_N25Q256_CLOCK_init+0x1c>)
    524e:	4b06      	ldr	r3, [pc, #24]	; (5268 <QSPI_N25Q256_CLOCK_init+0x20>)
    5250:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    5252:	4804      	ldr	r0, [pc, #16]	; (5264 <QSPI_N25Q256_CLOCK_init+0x1c>)
    5254:	4b05      	ldr	r3, [pc, #20]	; (526c <QSPI_N25Q256_CLOCK_init+0x24>)
    5256:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    5258:	4802      	ldr	r0, [pc, #8]	; (5264 <QSPI_N25Q256_CLOCK_init+0x1c>)
    525a:	4b05      	ldr	r3, [pc, #20]	; (5270 <QSPI_N25Q256_CLOCK_init+0x28>)
    525c:	4798      	blx	r3
}
    525e:	bf00      	nop
    5260:	bd80      	pop	{r7, pc}
    5262:	bf00      	nop
    5264:	40000800 	.word	0x40000800
    5268:	000046db 	.word	0x000046db
    526c:	0000471b 	.word	0x0000471b
    5270:	000048fb 	.word	0x000048fb

00005274 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    5274:	b580      	push	{r7, lr}
    5276:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    5278:	4b04      	ldr	r3, [pc, #16]	; (528c <QSPI_N25Q256_init+0x18>)
    527a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    527c:	4904      	ldr	r1, [pc, #16]	; (5290 <QSPI_N25Q256_init+0x1c>)
    527e:	4805      	ldr	r0, [pc, #20]	; (5294 <QSPI_N25Q256_init+0x20>)
    5280:	4b05      	ldr	r3, [pc, #20]	; (5298 <QSPI_N25Q256_init+0x24>)
    5282:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    5284:	4b05      	ldr	r3, [pc, #20]	; (529c <QSPI_N25Q256_init+0x28>)
    5286:	4798      	blx	r3
}
    5288:	bf00      	nop
    528a:	bd80      	pop	{r7, pc}
    528c:	00005249 	.word	0x00005249
    5290:	42003400 	.word	0x42003400
    5294:	200025b4 	.word	0x200025b4
    5298:	0000633d 	.word	0x0000633d
    529c:	00005169 	.word	0x00005169

000052a0 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    52a4:	4802      	ldr	r0, [pc, #8]	; (52b0 <DATETIME_CLOCK_CLOCK_init+0x10>)
    52a6:	4b03      	ldr	r3, [pc, #12]	; (52b4 <DATETIME_CLOCK_CLOCK_init+0x14>)
    52a8:	4798      	blx	r3
}
    52aa:	bf00      	nop
    52ac:	bd80      	pop	{r7, pc}
    52ae:	bf00      	nop
    52b0:	40000800 	.word	0x40000800
    52b4:	0000475b 	.word	0x0000475b

000052b8 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    52b8:	b580      	push	{r7, lr}
    52ba:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    52bc:	4b03      	ldr	r3, [pc, #12]	; (52cc <DATETIME_CLOCK_init+0x14>)
    52be:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    52c0:	4903      	ldr	r1, [pc, #12]	; (52d0 <DATETIME_CLOCK_init+0x18>)
    52c2:	4804      	ldr	r0, [pc, #16]	; (52d4 <DATETIME_CLOCK_init+0x1c>)
    52c4:	4b04      	ldr	r3, [pc, #16]	; (52d8 <DATETIME_CLOCK_init+0x20>)
    52c6:	4798      	blx	r3
}
    52c8:	bf00      	nop
    52ca:	bd80      	pop	{r7, pc}
    52cc:	000052a1 	.word	0x000052a1
    52d0:	40002400 	.word	0x40002400
    52d4:	200026fc 	.word	0x200026fc
    52d8:	00005c65 	.word	0x00005c65

000052dc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    52dc:	b580      	push	{r7, lr}
    52de:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    52e0:	2101      	movs	r1, #1
    52e2:	2010      	movs	r0, #16
    52e4:	4b07      	ldr	r3, [pc, #28]	; (5304 <I2C_HEATERS_PORT_init+0x28>)
    52e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    52e8:	4907      	ldr	r1, [pc, #28]	; (5308 <I2C_HEATERS_PORT_init+0x2c>)
    52ea:	2010      	movs	r0, #16
    52ec:	4b07      	ldr	r3, [pc, #28]	; (530c <I2C_HEATERS_PORT_init+0x30>)
    52ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    52f0:	2101      	movs	r1, #1
    52f2:	2011      	movs	r0, #17
    52f4:	4b03      	ldr	r3, [pc, #12]	; (5304 <I2C_HEATERS_PORT_init+0x28>)
    52f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    52f8:	4905      	ldr	r1, [pc, #20]	; (5310 <I2C_HEATERS_PORT_init+0x34>)
    52fa:	2011      	movs	r0, #17
    52fc:	4b03      	ldr	r3, [pc, #12]	; (530c <I2C_HEATERS_PORT_init+0x30>)
    52fe:	4798      	blx	r3
}
    5300:	bf00      	nop
    5302:	bd80      	pop	{r7, pc}
    5304:	00004eb5 	.word	0x00004eb5
    5308:	00100002 	.word	0x00100002
    530c:	00004ee9 	.word	0x00004ee9
    5310:	00110002 	.word	0x00110002

00005314 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    5314:	b580      	push	{r7, lr}
    5316:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5318:	2242      	movs	r2, #66	; 0x42
    531a:	2108      	movs	r1, #8
    531c:	4806      	ldr	r0, [pc, #24]	; (5338 <I2C_HEATERS_CLOCK_init+0x24>)
    531e:	4b07      	ldr	r3, [pc, #28]	; (533c <I2C_HEATERS_CLOCK_init+0x28>)
    5320:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5322:	224a      	movs	r2, #74	; 0x4a
    5324:	2103      	movs	r1, #3
    5326:	4804      	ldr	r0, [pc, #16]	; (5338 <I2C_HEATERS_CLOCK_init+0x24>)
    5328:	4b04      	ldr	r3, [pc, #16]	; (533c <I2C_HEATERS_CLOCK_init+0x28>)
    532a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    532c:	4804      	ldr	r0, [pc, #16]	; (5340 <I2C_HEATERS_CLOCK_init+0x2c>)
    532e:	4b05      	ldr	r3, [pc, #20]	; (5344 <I2C_HEATERS_CLOCK_init+0x30>)
    5330:	4798      	blx	r3
}
    5332:	bf00      	nop
    5334:	bd80      	pop	{r7, pc}
    5336:	bf00      	nop
    5338:	40001c00 	.word	0x40001c00
    533c:	00004695 	.word	0x00004695
    5340:	40000800 	.word	0x40000800
    5344:	0000479b 	.word	0x0000479b

00005348 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    5348:	b580      	push	{r7, lr}
    534a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    534c:	4b04      	ldr	r3, [pc, #16]	; (5360 <I2C_HEATERS_init+0x18>)
    534e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    5350:	4904      	ldr	r1, [pc, #16]	; (5364 <I2C_HEATERS_init+0x1c>)
    5352:	4805      	ldr	r0, [pc, #20]	; (5368 <I2C_HEATERS_init+0x20>)
    5354:	4b05      	ldr	r3, [pc, #20]	; (536c <I2C_HEATERS_init+0x24>)
    5356:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    5358:	4b05      	ldr	r3, [pc, #20]	; (5370 <I2C_HEATERS_init+0x28>)
    535a:	4798      	blx	r3
}
    535c:	bf00      	nop
    535e:	bd80      	pop	{r7, pc}
    5360:	00005315 	.word	0x00005315
    5364:	40003400 	.word	0x40003400
    5368:	20002654 	.word	0x20002654
    536c:	00006195 	.word	0x00006195
    5370:	000052dd 	.word	0x000052dd

00005374 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    5374:	b580      	push	{r7, lr}
    5376:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    5378:	2100      	movs	r1, #0
    537a:	203b      	movs	r0, #59	; 0x3b
    537c:	4b11      	ldr	r3, [pc, #68]	; (53c4 <SPI_TEMP_PORT_init+0x50>)
    537e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    5380:	2102      	movs	r1, #2
    5382:	203b      	movs	r0, #59	; 0x3b
    5384:	4b10      	ldr	r3, [pc, #64]	; (53c8 <SPI_TEMP_PORT_init+0x54>)
    5386:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    5388:	4910      	ldr	r1, [pc, #64]	; (53cc <SPI_TEMP_PORT_init+0x58>)
    538a:	203b      	movs	r0, #59	; 0x3b
    538c:	4b10      	ldr	r3, [pc, #64]	; (53d0 <SPI_TEMP_PORT_init+0x5c>)
    538e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5390:	2100      	movs	r1, #0
    5392:	203a      	movs	r0, #58	; 0x3a
    5394:	4b0b      	ldr	r3, [pc, #44]	; (53c4 <SPI_TEMP_PORT_init+0x50>)
    5396:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5398:	2102      	movs	r1, #2
    539a:	203a      	movs	r0, #58	; 0x3a
    539c:	4b0a      	ldr	r3, [pc, #40]	; (53c8 <SPI_TEMP_PORT_init+0x54>)
    539e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    53a0:	490c      	ldr	r1, [pc, #48]	; (53d4 <SPI_TEMP_PORT_init+0x60>)
    53a2:	203a      	movs	r0, #58	; 0x3a
    53a4:	4b0a      	ldr	r3, [pc, #40]	; (53d0 <SPI_TEMP_PORT_init+0x5c>)
    53a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    53a8:	2101      	movs	r1, #1
    53aa:	203c      	movs	r0, #60	; 0x3c
    53ac:	4b06      	ldr	r3, [pc, #24]	; (53c8 <SPI_TEMP_PORT_init+0x54>)
    53ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    53b0:	2100      	movs	r1, #0
    53b2:	203c      	movs	r0, #60	; 0x3c
    53b4:	4b08      	ldr	r3, [pc, #32]	; (53d8 <SPI_TEMP_PORT_init+0x64>)
    53b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    53b8:	4908      	ldr	r1, [pc, #32]	; (53dc <SPI_TEMP_PORT_init+0x68>)
    53ba:	203c      	movs	r0, #60	; 0x3c
    53bc:	4b04      	ldr	r3, [pc, #16]	; (53d0 <SPI_TEMP_PORT_init+0x5c>)
    53be:	4798      	blx	r3
}
    53c0:	bf00      	nop
    53c2:	bd80      	pop	{r7, pc}
    53c4:	00004f41 	.word	0x00004f41
    53c8:	00004f09 	.word	0x00004f09
    53cc:	003b0003 	.word	0x003b0003
    53d0:	00004ee9 	.word	0x00004ee9
    53d4:	003a0003 	.word	0x003a0003
    53d8:	00004eb5 	.word	0x00004eb5
    53dc:	003c0003 	.word	0x003c0003

000053e0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    53e0:	b580      	push	{r7, lr}
    53e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53e4:	2245      	movs	r2, #69	; 0x45
    53e6:	2122      	movs	r1, #34	; 0x22
    53e8:	4806      	ldr	r0, [pc, #24]	; (5404 <SPI_TEMP_CLOCK_init+0x24>)
    53ea:	4b07      	ldr	r3, [pc, #28]	; (5408 <SPI_TEMP_CLOCK_init+0x28>)
    53ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53ee:	224a      	movs	r2, #74	; 0x4a
    53f0:	2103      	movs	r1, #3
    53f2:	4804      	ldr	r0, [pc, #16]	; (5404 <SPI_TEMP_CLOCK_init+0x24>)
    53f4:	4b04      	ldr	r3, [pc, #16]	; (5408 <SPI_TEMP_CLOCK_init+0x28>)
    53f6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    53f8:	4804      	ldr	r0, [pc, #16]	; (540c <SPI_TEMP_CLOCK_init+0x2c>)
    53fa:	4b05      	ldr	r3, [pc, #20]	; (5410 <SPI_TEMP_CLOCK_init+0x30>)
    53fc:	4798      	blx	r3
}
    53fe:	bf00      	nop
    5400:	bd80      	pop	{r7, pc}
    5402:	bf00      	nop
    5404:	40001c00 	.word	0x40001c00
    5408:	00004695 	.word	0x00004695
    540c:	40000800 	.word	0x40000800
    5410:	0000491b 	.word	0x0000491b

00005414 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    5414:	b580      	push	{r7, lr}
    5416:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5418:	4b05      	ldr	r3, [pc, #20]	; (5430 <SPI_TEMP_init+0x1c>)
    541a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    541c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5420:	4804      	ldr	r0, [pc, #16]	; (5434 <SPI_TEMP_init+0x20>)
    5422:	4b05      	ldr	r3, [pc, #20]	; (5438 <SPI_TEMP_init+0x24>)
    5424:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    5426:	4b05      	ldr	r3, [pc, #20]	; (543c <SPI_TEMP_init+0x28>)
    5428:	4798      	blx	r3
}
    542a:	bf00      	nop
    542c:	bd80      	pop	{r7, pc}
    542e:	bf00      	nop
    5430:	000053e1 	.word	0x000053e1
    5434:	2000255c 	.word	0x2000255c
    5438:	0000644d 	.word	0x0000644d
    543c:	00005375 	.word	0x00005375

00005440 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    5440:	b580      	push	{r7, lr}
    5442:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    5444:	2100      	movs	r1, #0
    5446:	2017      	movs	r0, #23
    5448:	4b07      	ldr	r3, [pc, #28]	; (5468 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    544a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    544c:	4907      	ldr	r1, [pc, #28]	; (546c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    544e:	2017      	movs	r0, #23
    5450:	4b07      	ldr	r3, [pc, #28]	; (5470 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    5452:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    5454:	2100      	movs	r1, #0
    5456:	2016      	movs	r0, #22
    5458:	4b03      	ldr	r3, [pc, #12]	; (5468 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    545a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    545c:	4905      	ldr	r1, [pc, #20]	; (5474 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    545e:	2016      	movs	r0, #22
    5460:	4b03      	ldr	r3, [pc, #12]	; (5470 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    5462:	4798      	blx	r3
}
    5464:	bf00      	nop
    5466:	bd80      	pop	{r7, pc}
    5468:	00004eb5 	.word	0x00004eb5
    546c:	00170003 	.word	0x00170003
    5470:	00004ee9 	.word	0x00004ee9
    5474:	00160003 	.word	0x00160003

00005478 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    5478:	b580      	push	{r7, lr}
    547a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    547c:	2244      	movs	r2, #68	; 0x44
    547e:	2123      	movs	r1, #35	; 0x23
    5480:	4806      	ldr	r0, [pc, #24]	; (549c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    5482:	4b07      	ldr	r3, [pc, #28]	; (54a0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    5484:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5486:	224a      	movs	r2, #74	; 0x4a
    5488:	2103      	movs	r1, #3
    548a:	4804      	ldr	r0, [pc, #16]	; (549c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    548c:	4b04      	ldr	r3, [pc, #16]	; (54a0 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    548e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5490:	4804      	ldr	r0, [pc, #16]	; (54a4 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    5492:	4b05      	ldr	r3, [pc, #20]	; (54a8 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    5494:	4798      	blx	r3
}
    5496:	bf00      	nop
    5498:	bd80      	pop	{r7, pc}
    549a:	bf00      	nop
    549c:	40001c00 	.word	0x40001c00
    54a0:	00004695 	.word	0x00004695
    54a4:	40000800 	.word	0x40000800
    54a8:	0000493b 	.word	0x0000493b

000054ac <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    54b0:	4b04      	ldr	r3, [pc, #16]	; (54c4 <I2C_FLAPPER_VALVE_init+0x18>)
    54b2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    54b4:	4904      	ldr	r1, [pc, #16]	; (54c8 <I2C_FLAPPER_VALVE_init+0x1c>)
    54b6:	4805      	ldr	r0, [pc, #20]	; (54cc <I2C_FLAPPER_VALVE_init+0x20>)
    54b8:	4b05      	ldr	r3, [pc, #20]	; (54d0 <I2C_FLAPPER_VALVE_init+0x24>)
    54ba:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    54bc:	4b05      	ldr	r3, [pc, #20]	; (54d4 <I2C_FLAPPER_VALVE_init+0x28>)
    54be:	4798      	blx	r3
}
    54c0:	bf00      	nop
    54c2:	bd80      	pop	{r7, pc}
    54c4:	00005479 	.word	0x00005479
    54c8:	43000400 	.word	0x43000400
    54cc:	200025f8 	.word	0x200025f8
    54d0:	00006195 	.word	0x00006195
    54d4:	00005441 	.word	0x00005441

000054d8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    54d8:	b580      	push	{r7, lr}
    54da:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    54dc:	2100      	movs	r1, #0
    54de:	2044      	movs	r0, #68	; 0x44
    54e0:	4b11      	ldr	r3, [pc, #68]	; (5528 <SPI_HI3593_PORT_init+0x50>)
    54e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    54e4:	2102      	movs	r1, #2
    54e6:	2044      	movs	r0, #68	; 0x44
    54e8:	4b10      	ldr	r3, [pc, #64]	; (552c <SPI_HI3593_PORT_init+0x54>)
    54ea:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    54ec:	4910      	ldr	r1, [pc, #64]	; (5530 <SPI_HI3593_PORT_init+0x58>)
    54ee:	2044      	movs	r0, #68	; 0x44
    54f0:	4b10      	ldr	r3, [pc, #64]	; (5534 <SPI_HI3593_PORT_init+0x5c>)
    54f2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    54f4:	2100      	movs	r1, #0
    54f6:	2045      	movs	r0, #69	; 0x45
    54f8:	4b0b      	ldr	r3, [pc, #44]	; (5528 <SPI_HI3593_PORT_init+0x50>)
    54fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    54fc:	2102      	movs	r1, #2
    54fe:	2045      	movs	r0, #69	; 0x45
    5500:	4b0a      	ldr	r3, [pc, #40]	; (552c <SPI_HI3593_PORT_init+0x54>)
    5502:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    5504:	490c      	ldr	r1, [pc, #48]	; (5538 <SPI_HI3593_PORT_init+0x60>)
    5506:	2045      	movs	r0, #69	; 0x45
    5508:	4b0a      	ldr	r3, [pc, #40]	; (5534 <SPI_HI3593_PORT_init+0x5c>)
    550a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    550c:	2101      	movs	r1, #1
    550e:	2047      	movs	r0, #71	; 0x47
    5510:	4b06      	ldr	r3, [pc, #24]	; (552c <SPI_HI3593_PORT_init+0x54>)
    5512:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    5514:	2100      	movs	r1, #0
    5516:	2047      	movs	r0, #71	; 0x47
    5518:	4b08      	ldr	r3, [pc, #32]	; (553c <SPI_HI3593_PORT_init+0x64>)
    551a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    551c:	4908      	ldr	r1, [pc, #32]	; (5540 <SPI_HI3593_PORT_init+0x68>)
    551e:	2047      	movs	r0, #71	; 0x47
    5520:	4b04      	ldr	r3, [pc, #16]	; (5534 <SPI_HI3593_PORT_init+0x5c>)
    5522:	4798      	blx	r3
}
    5524:	bf00      	nop
    5526:	bd80      	pop	{r7, pc}
    5528:	00004f41 	.word	0x00004f41
    552c:	00004f09 	.word	0x00004f09
    5530:	00440002 	.word	0x00440002
    5534:	00004ee9 	.word	0x00004ee9
    5538:	00450002 	.word	0x00450002
    553c:	00004eb5 	.word	0x00004eb5
    5540:	00470002 	.word	0x00470002

00005544 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    5544:	b580      	push	{r7, lr}
    5546:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5548:	2242      	movs	r2, #66	; 0x42
    554a:	2124      	movs	r1, #36	; 0x24
    554c:	4806      	ldr	r0, [pc, #24]	; (5568 <SPI_HI3593_CLOCK_init+0x24>)
    554e:	4b07      	ldr	r3, [pc, #28]	; (556c <SPI_HI3593_CLOCK_init+0x28>)
    5550:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5552:	224a      	movs	r2, #74	; 0x4a
    5554:	2103      	movs	r1, #3
    5556:	4804      	ldr	r0, [pc, #16]	; (5568 <SPI_HI3593_CLOCK_init+0x24>)
    5558:	4b04      	ldr	r3, [pc, #16]	; (556c <SPI_HI3593_CLOCK_init+0x28>)
    555a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    555c:	4804      	ldr	r0, [pc, #16]	; (5570 <SPI_HI3593_CLOCK_init+0x2c>)
    555e:	4b05      	ldr	r3, [pc, #20]	; (5574 <SPI_HI3593_CLOCK_init+0x30>)
    5560:	4798      	blx	r3
}
    5562:	bf00      	nop
    5564:	bd80      	pop	{r7, pc}
    5566:	bf00      	nop
    5568:	40001c00 	.word	0x40001c00
    556c:	00004695 	.word	0x00004695
    5570:	40000800 	.word	0x40000800
    5574:	0000495b 	.word	0x0000495b

00005578 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    5578:	b580      	push	{r7, lr}
    557a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    557c:	4b04      	ldr	r3, [pc, #16]	; (5590 <SPI_HI3593_init+0x18>)
    557e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    5580:	4904      	ldr	r1, [pc, #16]	; (5594 <SPI_HI3593_init+0x1c>)
    5582:	4805      	ldr	r0, [pc, #20]	; (5598 <SPI_HI3593_init+0x20>)
    5584:	4b05      	ldr	r3, [pc, #20]	; (559c <SPI_HI3593_init+0x24>)
    5586:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    5588:	4b05      	ldr	r3, [pc, #20]	; (55a0 <SPI_HI3593_init+0x28>)
    558a:	4798      	blx	r3
}
    558c:	bf00      	nop
    558e:	bd80      	pop	{r7, pc}
    5590:	00005545 	.word	0x00005545
    5594:	43000800 	.word	0x43000800
    5598:	20002544 	.word	0x20002544
    559c:	0000644d 	.word	0x0000644d
    55a0:	000054d9 	.word	0x000054d9

000055a4 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    55a8:	2100      	movs	r1, #0
    55aa:	2068      	movs	r0, #104	; 0x68
    55ac:	4b07      	ldr	r3, [pc, #28]	; (55cc <I2C_FANS_PORT_init+0x28>)
    55ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    55b0:	4907      	ldr	r1, [pc, #28]	; (55d0 <I2C_FANS_PORT_init+0x2c>)
    55b2:	2068      	movs	r0, #104	; 0x68
    55b4:	4b07      	ldr	r3, [pc, #28]	; (55d4 <I2C_FANS_PORT_init+0x30>)
    55b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    55b8:	2100      	movs	r1, #0
    55ba:	2069      	movs	r0, #105	; 0x69
    55bc:	4b03      	ldr	r3, [pc, #12]	; (55cc <I2C_FANS_PORT_init+0x28>)
    55be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    55c0:	4905      	ldr	r1, [pc, #20]	; (55d8 <I2C_FANS_PORT_init+0x34>)
    55c2:	2069      	movs	r0, #105	; 0x69
    55c4:	4b03      	ldr	r3, [pc, #12]	; (55d4 <I2C_FANS_PORT_init+0x30>)
    55c6:	4798      	blx	r3
}
    55c8:	bf00      	nop
    55ca:	bd80      	pop	{r7, pc}
    55cc:	00004eb5 	.word	0x00004eb5
    55d0:	00680002 	.word	0x00680002
    55d4:	00004ee9 	.word	0x00004ee9
    55d8:	00690002 	.word	0x00690002

000055dc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55e0:	2244      	movs	r2, #68	; 0x44
    55e2:	2125      	movs	r1, #37	; 0x25
    55e4:	4806      	ldr	r0, [pc, #24]	; (5600 <I2C_FANS_CLOCK_init+0x24>)
    55e6:	4b07      	ldr	r3, [pc, #28]	; (5604 <I2C_FANS_CLOCK_init+0x28>)
    55e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55ea:	224a      	movs	r2, #74	; 0x4a
    55ec:	2103      	movs	r1, #3
    55ee:	4804      	ldr	r0, [pc, #16]	; (5600 <I2C_FANS_CLOCK_init+0x24>)
    55f0:	4b04      	ldr	r3, [pc, #16]	; (5604 <I2C_FANS_CLOCK_init+0x28>)
    55f2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    55f4:	4804      	ldr	r0, [pc, #16]	; (5608 <I2C_FANS_CLOCK_init+0x2c>)
    55f6:	4b05      	ldr	r3, [pc, #20]	; (560c <I2C_FANS_CLOCK_init+0x30>)
    55f8:	4798      	blx	r3
}
    55fa:	bf00      	nop
    55fc:	bd80      	pop	{r7, pc}
    55fe:	bf00      	nop
    5600:	40001c00 	.word	0x40001c00
    5604:	00004695 	.word	0x00004695
    5608:	40000800 	.word	0x40000800
    560c:	0000497b 	.word	0x0000497b

00005610 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    5610:	b580      	push	{r7, lr}
    5612:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    5614:	4b04      	ldr	r3, [pc, #16]	; (5628 <I2C_FANS_init+0x18>)
    5616:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    5618:	4904      	ldr	r1, [pc, #16]	; (562c <I2C_FANS_init+0x1c>)
    561a:	4805      	ldr	r0, [pc, #20]	; (5630 <I2C_FANS_init+0x20>)
    561c:	4b05      	ldr	r3, [pc, #20]	; (5634 <I2C_FANS_init+0x24>)
    561e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    5620:	4b05      	ldr	r3, [pc, #20]	; (5638 <I2C_FANS_init+0x28>)
    5622:	4798      	blx	r3
}
    5624:	bf00      	nop
    5626:	bd80      	pop	{r7, pc}
    5628:	000055dd 	.word	0x000055dd
    562c:	43000c00 	.word	0x43000c00
    5630:	20002574 	.word	0x20002574
    5634:	00006195 	.word	0x00006195
    5638:	000055a5 	.word	0x000055a5

0000563c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    563c:	b580      	push	{r7, lr}
    563e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    5640:	4808      	ldr	r0, [pc, #32]	; (5664 <TIMER_USB_init+0x28>)
    5642:	4b09      	ldr	r3, [pc, #36]	; (5668 <TIMER_USB_init+0x2c>)
    5644:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5646:	2243      	movs	r2, #67	; 0x43
    5648:	2109      	movs	r1, #9
    564a:	4808      	ldr	r0, [pc, #32]	; (566c <TIMER_USB_init+0x30>)
    564c:	4b08      	ldr	r3, [pc, #32]	; (5670 <TIMER_USB_init+0x34>)
    564e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    5650:	4b08      	ldr	r3, [pc, #32]	; (5674 <TIMER_USB_init+0x38>)
    5652:	4798      	blx	r3
    5654:	4603      	mov	r3, r0
    5656:	461a      	mov	r2, r3
    5658:	4907      	ldr	r1, [pc, #28]	; (5678 <TIMER_USB_init+0x3c>)
    565a:	4808      	ldr	r0, [pc, #32]	; (567c <TIMER_USB_init+0x40>)
    565c:	4b08      	ldr	r3, [pc, #32]	; (5680 <TIMER_USB_init+0x44>)
    565e:	4798      	blx	r3
}
    5660:	bf00      	nop
    5662:	bd80      	pop	{r7, pc}
    5664:	40000800 	.word	0x40000800
    5668:	000047bb 	.word	0x000047bb
    566c:	40001c00 	.word	0x40001c00
    5670:	00004695 	.word	0x00004695
    5674:	0000c2e5 	.word	0x0000c2e5
    5678:	40003800 	.word	0x40003800
    567c:	200026bc 	.word	0x200026bc
    5680:	0000661d 	.word	0x0000661d

00005684 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5684:	b580      	push	{r7, lr}
    5686:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5688:	4808      	ldr	r0, [pc, #32]	; (56ac <TIMER_ARINC_init+0x28>)
    568a:	4b09      	ldr	r3, [pc, #36]	; (56b0 <TIMER_ARINC_init+0x2c>)
    568c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    568e:	2244      	movs	r2, #68	; 0x44
    5690:	211a      	movs	r1, #26
    5692:	4808      	ldr	r0, [pc, #32]	; (56b4 <TIMER_ARINC_init+0x30>)
    5694:	4b08      	ldr	r3, [pc, #32]	; (56b8 <TIMER_ARINC_init+0x34>)
    5696:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5698:	4b08      	ldr	r3, [pc, #32]	; (56bc <TIMER_ARINC_init+0x38>)
    569a:	4798      	blx	r3
    569c:	4603      	mov	r3, r0
    569e:	461a      	mov	r2, r3
    56a0:	4907      	ldr	r1, [pc, #28]	; (56c0 <TIMER_ARINC_init+0x3c>)
    56a2:	4808      	ldr	r0, [pc, #32]	; (56c4 <TIMER_ARINC_init+0x40>)
    56a4:	4b08      	ldr	r3, [pc, #32]	; (56c8 <TIMER_ARINC_init+0x44>)
    56a6:	4798      	blx	r3
}
    56a8:	bf00      	nop
    56aa:	bd80      	pop	{r7, pc}
    56ac:	40000800 	.word	0x40000800
    56b0:	0000487b 	.word	0x0000487b
    56b4:	40001c00 	.word	0x40001c00
    56b8:	00004695 	.word	0x00004695
    56bc:	0000c2e5 	.word	0x0000c2e5
    56c0:	4101a000 	.word	0x4101a000
    56c4:	2000269c 	.word	0x2000269c
    56c8:	0000661d 	.word	0x0000661d

000056cc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    56cc:	b580      	push	{r7, lr}
    56ce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    56d0:	4808      	ldr	r0, [pc, #32]	; (56f4 <TIMER_MAINTENANCE_init+0x28>)
    56d2:	4b09      	ldr	r3, [pc, #36]	; (56f8 <TIMER_MAINTENANCE_init+0x2c>)
    56d4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    56d6:	2246      	movs	r2, #70	; 0x46
    56d8:	211e      	movs	r1, #30
    56da:	4808      	ldr	r0, [pc, #32]	; (56fc <TIMER_MAINTENANCE_init+0x30>)
    56dc:	4b08      	ldr	r3, [pc, #32]	; (5700 <TIMER_MAINTENANCE_init+0x34>)
    56de:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    56e0:	4b08      	ldr	r3, [pc, #32]	; (5704 <TIMER_MAINTENANCE_init+0x38>)
    56e2:	4798      	blx	r3
    56e4:	4603      	mov	r3, r0
    56e6:	461a      	mov	r2, r3
    56e8:	4907      	ldr	r1, [pc, #28]	; (5708 <TIMER_MAINTENANCE_init+0x3c>)
    56ea:	4808      	ldr	r0, [pc, #32]	; (570c <TIMER_MAINTENANCE_init+0x40>)
    56ec:	4b08      	ldr	r3, [pc, #32]	; (5710 <TIMER_MAINTENANCE_init+0x44>)
    56ee:	4798      	blx	r3
}
    56f0:	bf00      	nop
    56f2:	bd80      	pop	{r7, pc}
    56f4:	40000800 	.word	0x40000800
    56f8:	000048bb 	.word	0x000048bb
    56fc:	40001c00 	.word	0x40001c00
    5700:	00004695 	.word	0x00004695
    5704:	0000c2e5 	.word	0x0000c2e5
    5708:	42001400 	.word	0x42001400
    570c:	20002594 	.word	0x20002594
    5710:	0000661d 	.word	0x0000661d

00005714 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5714:	b580      	push	{r7, lr}
    5716:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5718:	4808      	ldr	r0, [pc, #32]	; (573c <TIMER_INTERFACE_init+0x28>)
    571a:	4b09      	ldr	r3, [pc, #36]	; (5740 <TIMER_INTERFACE_init+0x2c>)
    571c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    571e:	2246      	movs	r2, #70	; 0x46
    5720:	211e      	movs	r1, #30
    5722:	4808      	ldr	r0, [pc, #32]	; (5744 <TIMER_INTERFACE_init+0x30>)
    5724:	4b08      	ldr	r3, [pc, #32]	; (5748 <TIMER_INTERFACE_init+0x34>)
    5726:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5728:	4b08      	ldr	r3, [pc, #32]	; (574c <TIMER_INTERFACE_init+0x38>)
    572a:	4798      	blx	r3
    572c:	4603      	mov	r3, r0
    572e:	461a      	mov	r2, r3
    5730:	4907      	ldr	r1, [pc, #28]	; (5750 <TIMER_INTERFACE_init+0x3c>)
    5732:	4808      	ldr	r0, [pc, #32]	; (5754 <TIMER_INTERFACE_init+0x40>)
    5734:	4b08      	ldr	r3, [pc, #32]	; (5758 <TIMER_INTERFACE_init+0x44>)
    5736:	4798      	blx	r3
}
    5738:	bf00      	nop
    573a:	bd80      	pop	{r7, pc}
    573c:	40000800 	.word	0x40000800
    5740:	000048db 	.word	0x000048db
    5744:	40001c00 	.word	0x40001c00
    5748:	00004695 	.word	0x00004695
    574c:	0000c2e5 	.word	0x0000c2e5
    5750:	42001800 	.word	0x42001800
    5754:	200025d8 	.word	0x200025d8
    5758:	0000661d 	.word	0x0000661d

0000575c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    575c:	b580      	push	{r7, lr}
    575e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5760:	4808      	ldr	r0, [pc, #32]	; (5784 <TIMER_EVENT_init+0x28>)
    5762:	4b09      	ldr	r3, [pc, #36]	; (5788 <TIMER_EVENT_init+0x2c>)
    5764:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5766:	2246      	movs	r2, #70	; 0x46
    5768:	2127      	movs	r1, #39	; 0x27
    576a:	4808      	ldr	r0, [pc, #32]	; (578c <TIMER_EVENT_init+0x30>)
    576c:	4b08      	ldr	r3, [pc, #32]	; (5790 <TIMER_EVENT_init+0x34>)
    576e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5770:	4b08      	ldr	r3, [pc, #32]	; (5794 <TIMER_EVENT_init+0x38>)
    5772:	4798      	blx	r3
    5774:	4603      	mov	r3, r0
    5776:	461a      	mov	r2, r3
    5778:	4907      	ldr	r1, [pc, #28]	; (5798 <TIMER_EVENT_init+0x3c>)
    577a:	4808      	ldr	r0, [pc, #32]	; (579c <TIMER_EVENT_init+0x40>)
    577c:	4b08      	ldr	r3, [pc, #32]	; (57a0 <TIMER_EVENT_init+0x44>)
    577e:	4798      	blx	r3
}
    5780:	bf00      	nop
    5782:	bd80      	pop	{r7, pc}
    5784:	40000800 	.word	0x40000800
    5788:	0000499b 	.word	0x0000499b
    578c:	40001c00 	.word	0x40001c00
    5790:	00004695 	.word	0x00004695
    5794:	0000c2e5 	.word	0x0000c2e5
    5798:	43001400 	.word	0x43001400
    579c:	200025b8 	.word	0x200025b8
    57a0:	0000661d 	.word	0x0000661d

000057a4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    57a4:	b480      	push	{r7}
    57a6:	af00      	add	r7, sp, #0
}
    57a8:	bf00      	nop
    57aa:	46bd      	mov	sp, r7
    57ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b0:	4770      	bx	lr
	...

000057b4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    57b8:	4804      	ldr	r0, [pc, #16]	; (57cc <LIVE_PULSE_CLOCK_init+0x18>)
    57ba:	4b05      	ldr	r3, [pc, #20]	; (57d0 <LIVE_PULSE_CLOCK_init+0x1c>)
    57bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    57be:	2240      	movs	r2, #64	; 0x40
    57c0:	2127      	movs	r1, #39	; 0x27
    57c2:	4804      	ldr	r0, [pc, #16]	; (57d4 <LIVE_PULSE_CLOCK_init+0x20>)
    57c4:	4b04      	ldr	r3, [pc, #16]	; (57d8 <LIVE_PULSE_CLOCK_init+0x24>)
    57c6:	4798      	blx	r3
}
    57c8:	bf00      	nop
    57ca:	bd80      	pop	{r7, pc}
    57cc:	40000800 	.word	0x40000800
    57d0:	000049bb 	.word	0x000049bb
    57d4:	40001c00 	.word	0x40001c00
    57d8:	00004695 	.word	0x00004695

000057dc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    57dc:	b580      	push	{r7, lr}
    57de:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    57e0:	4b06      	ldr	r3, [pc, #24]	; (57fc <LIVE_PULSE_init+0x20>)
    57e2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    57e4:	4b06      	ldr	r3, [pc, #24]	; (5800 <LIVE_PULSE_init+0x24>)
    57e6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    57e8:	4b06      	ldr	r3, [pc, #24]	; (5804 <LIVE_PULSE_init+0x28>)
    57ea:	4798      	blx	r3
    57ec:	4603      	mov	r3, r0
    57ee:	461a      	mov	r2, r3
    57f0:	4905      	ldr	r1, [pc, #20]	; (5808 <LIVE_PULSE_init+0x2c>)
    57f2:	4806      	ldr	r0, [pc, #24]	; (580c <LIVE_PULSE_init+0x30>)
    57f4:	4b06      	ldr	r3, [pc, #24]	; (5810 <LIVE_PULSE_init+0x34>)
    57f6:	4798      	blx	r3
}
    57f8:	bf00      	nop
    57fa:	bd80      	pop	{r7, pc}
    57fc:	000057b5 	.word	0x000057b5
    5800:	000057a5 	.word	0x000057a5
    5804:	0000c2f9 	.word	0x0000c2f9
    5808:	43001800 	.word	0x43001800
    580c:	20002618 	.word	0x20002618
    5810:	00006291 	.word	0x00006291

00005814 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5814:	b580      	push	{r7, lr}
    5816:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5818:	4804      	ldr	r0, [pc, #16]	; (582c <TIMER_HVAC_CLOCK_init+0x18>)
    581a:	4b05      	ldr	r3, [pc, #20]	; (5830 <TIMER_HVAC_CLOCK_init+0x1c>)
    581c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    581e:	2244      	movs	r2, #68	; 0x44
    5820:	2119      	movs	r1, #25
    5822:	4804      	ldr	r0, [pc, #16]	; (5834 <TIMER_HVAC_CLOCK_init+0x20>)
    5824:	4b04      	ldr	r3, [pc, #16]	; (5838 <TIMER_HVAC_CLOCK_init+0x24>)
    5826:	4798      	blx	r3
}
    5828:	bf00      	nop
    582a:	bd80      	pop	{r7, pc}
    582c:	40000800 	.word	0x40000800
    5830:	0000483b 	.word	0x0000483b
    5834:	40001c00 	.word	0x40001c00
    5838:	00004695 	.word	0x00004695

0000583c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    583c:	b580      	push	{r7, lr}
    583e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    5840:	4b05      	ldr	r3, [pc, #20]	; (5858 <TIMER_HVAC_init+0x1c>)
    5842:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    5844:	4b05      	ldr	r3, [pc, #20]	; (585c <TIMER_HVAC_init+0x20>)
    5846:	4798      	blx	r3
    5848:	4603      	mov	r3, r0
    584a:	461a      	mov	r2, r3
    584c:	4904      	ldr	r1, [pc, #16]	; (5860 <TIMER_HVAC_init+0x24>)
    584e:	4805      	ldr	r0, [pc, #20]	; (5864 <TIMER_HVAC_init+0x28>)
    5850:	4b05      	ldr	r3, [pc, #20]	; (5868 <TIMER_HVAC_init+0x2c>)
    5852:	4798      	blx	r3
}
    5854:	bf00      	nop
    5856:	bd80      	pop	{r7, pc}
    5858:	00005815 	.word	0x00005815
    585c:	0000b6c9 	.word	0x0000b6c9
    5860:	41016000 	.word	0x41016000
    5864:	200026dc 	.word	0x200026dc
    5868:	0000661d 	.word	0x0000661d

0000586c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    586c:	b580      	push	{r7, lr}
    586e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    5870:	4804      	ldr	r0, [pc, #16]	; (5884 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    5872:	4b05      	ldr	r3, [pc, #20]	; (5888 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    5874:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5876:	2244      	movs	r2, #68	; 0x44
    5878:	2119      	movs	r1, #25
    587a:	4804      	ldr	r0, [pc, #16]	; (588c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    587c:	4b04      	ldr	r3, [pc, #16]	; (5890 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    587e:	4798      	blx	r3
}
    5880:	bf00      	nop
    5882:	bd80      	pop	{r7, pc}
    5884:	40000800 	.word	0x40000800
    5888:	0000485b 	.word	0x0000485b
    588c:	40001c00 	.word	0x40001c00
    5890:	00004695 	.word	0x00004695

00005894 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5894:	b580      	push	{r7, lr}
    5896:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5898:	4b05      	ldr	r3, [pc, #20]	; (58b0 <TIMER_TEMPERATURES_init+0x1c>)
    589a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    589c:	4b05      	ldr	r3, [pc, #20]	; (58b4 <TIMER_TEMPERATURES_init+0x20>)
    589e:	4798      	blx	r3
    58a0:	4603      	mov	r3, r0
    58a2:	461a      	mov	r2, r3
    58a4:	4904      	ldr	r1, [pc, #16]	; (58b8 <TIMER_TEMPERATURES_init+0x24>)
    58a6:	4805      	ldr	r0, [pc, #20]	; (58bc <TIMER_TEMPERATURES_init+0x28>)
    58a8:	4b05      	ldr	r3, [pc, #20]	; (58c0 <TIMER_TEMPERATURES_init+0x2c>)
    58aa:	4798      	blx	r3
}
    58ac:	bf00      	nop
    58ae:	bd80      	pop	{r7, pc}
    58b0:	0000586d 	.word	0x0000586d
    58b4:	0000b6c9 	.word	0x0000b6c9
    58b8:	41018000 	.word	0x41018000
    58bc:	20002524 	.word	0x20002524
    58c0:	0000661d 	.word	0x0000661d

000058c4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    58c4:	b580      	push	{r7, lr}
    58c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    58c8:	4804      	ldr	r0, [pc, #16]	; (58dc <TIMER_CCU_CLOCK_init+0x18>)
    58ca:	4b05      	ldr	r3, [pc, #20]	; (58e0 <TIMER_CCU_CLOCK_init+0x1c>)
    58cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    58ce:	2240      	movs	r2, #64	; 0x40
    58d0:	211d      	movs	r1, #29
    58d2:	4804      	ldr	r0, [pc, #16]	; (58e4 <TIMER_CCU_CLOCK_init+0x20>)
    58d4:	4b04      	ldr	r3, [pc, #16]	; (58e8 <TIMER_CCU_CLOCK_init+0x24>)
    58d6:	4798      	blx	r3
}
    58d8:	bf00      	nop
    58da:	bd80      	pop	{r7, pc}
    58dc:	40000800 	.word	0x40000800
    58e0:	0000489b 	.word	0x0000489b
    58e4:	40001c00 	.word	0x40001c00
    58e8:	00004695 	.word	0x00004695

000058ec <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    58f0:	4b05      	ldr	r3, [pc, #20]	; (5908 <TIMER_CCU_init+0x1c>)
    58f2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    58f4:	4b05      	ldr	r3, [pc, #20]	; (590c <TIMER_CCU_init+0x20>)
    58f6:	4798      	blx	r3
    58f8:	4603      	mov	r3, r0
    58fa:	461a      	mov	r2, r3
    58fc:	4904      	ldr	r1, [pc, #16]	; (5910 <TIMER_CCU_init+0x24>)
    58fe:	4805      	ldr	r0, [pc, #20]	; (5914 <TIMER_CCU_init+0x28>)
    5900:	4b05      	ldr	r3, [pc, #20]	; (5918 <TIMER_CCU_init+0x2c>)
    5902:	4798      	blx	r3
}
    5904:	bf00      	nop
    5906:	bd80      	pop	{r7, pc}
    5908:	000058c5 	.word	0x000058c5
    590c:	0000b6c9 	.word	0x0000b6c9
    5910:	42000c00 	.word	0x42000c00
    5914:	20002634 	.word	0x20002634
    5918:	0000661d 	.word	0x0000661d

0000591c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    591c:	b580      	push	{r7, lr}
    591e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5920:	2102      	movs	r1, #2
    5922:	2018      	movs	r0, #24
    5924:	4b0f      	ldr	r3, [pc, #60]	; (5964 <CDCUSB_PORT_init+0x48>)
    5926:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5928:	2100      	movs	r1, #0
    592a:	2018      	movs	r0, #24
    592c:	4b0e      	ldr	r3, [pc, #56]	; (5968 <CDCUSB_PORT_init+0x4c>)
    592e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5930:	2100      	movs	r1, #0
    5932:	2018      	movs	r0, #24
    5934:	4b0d      	ldr	r3, [pc, #52]	; (596c <CDCUSB_PORT_init+0x50>)
    5936:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5938:	490d      	ldr	r1, [pc, #52]	; (5970 <CDCUSB_PORT_init+0x54>)
    593a:	2018      	movs	r0, #24
    593c:	4b0d      	ldr	r3, [pc, #52]	; (5974 <CDCUSB_PORT_init+0x58>)
    593e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5940:	2102      	movs	r1, #2
    5942:	2019      	movs	r0, #25
    5944:	4b07      	ldr	r3, [pc, #28]	; (5964 <CDCUSB_PORT_init+0x48>)
    5946:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5948:	2100      	movs	r1, #0
    594a:	2019      	movs	r0, #25
    594c:	4b06      	ldr	r3, [pc, #24]	; (5968 <CDCUSB_PORT_init+0x4c>)
    594e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5950:	2100      	movs	r1, #0
    5952:	2019      	movs	r0, #25
    5954:	4b05      	ldr	r3, [pc, #20]	; (596c <CDCUSB_PORT_init+0x50>)
    5956:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5958:	4907      	ldr	r1, [pc, #28]	; (5978 <CDCUSB_PORT_init+0x5c>)
    595a:	2019      	movs	r0, #25
    595c:	4b05      	ldr	r3, [pc, #20]	; (5974 <CDCUSB_PORT_init+0x58>)
    595e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5960:	bf00      	nop
    5962:	bd80      	pop	{r7, pc}
    5964:	00004f09 	.word	0x00004f09
    5968:	00004f41 	.word	0x00004f41
    596c:	00004eb5 	.word	0x00004eb5
    5970:	00180007 	.word	0x00180007
    5974:	00004ee9 	.word	0x00004ee9
    5978:	00190007 	.word	0x00190007

0000597c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    597c:	b580      	push	{r7, lr}
    597e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5980:	2242      	movs	r2, #66	; 0x42
    5982:	210a      	movs	r1, #10
    5984:	4805      	ldr	r0, [pc, #20]	; (599c <CDCUSB_CLOCK_init+0x20>)
    5986:	4b06      	ldr	r3, [pc, #24]	; (59a0 <CDCUSB_CLOCK_init+0x24>)
    5988:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    598a:	4806      	ldr	r0, [pc, #24]	; (59a4 <CDCUSB_CLOCK_init+0x28>)
    598c:	4b06      	ldr	r3, [pc, #24]	; (59a8 <CDCUSB_CLOCK_init+0x2c>)
    598e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5990:	4804      	ldr	r0, [pc, #16]	; (59a4 <CDCUSB_CLOCK_init+0x28>)
    5992:	4b06      	ldr	r3, [pc, #24]	; (59ac <CDCUSB_CLOCK_init+0x30>)
    5994:	4798      	blx	r3
}
    5996:	bf00      	nop
    5998:	bd80      	pop	{r7, pc}
    599a:	bf00      	nop
    599c:	40001c00 	.word	0x40001c00
    59a0:	00004695 	.word	0x00004695
    59a4:	40000800 	.word	0x40000800
    59a8:	000046bb 	.word	0x000046bb
    59ac:	000047db 	.word	0x000047db

000059b0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    59b0:	b580      	push	{r7, lr}
    59b2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    59b4:	4b03      	ldr	r3, [pc, #12]	; (59c4 <CDCUSB_init+0x14>)
    59b6:	4798      	blx	r3
	usb_d_init();
    59b8:	4b03      	ldr	r3, [pc, #12]	; (59c8 <CDCUSB_init+0x18>)
    59ba:	4798      	blx	r3
	CDCUSB_PORT_init();
    59bc:	4b03      	ldr	r3, [pc, #12]	; (59cc <CDCUSB_init+0x1c>)
    59be:	4798      	blx	r3
}
    59c0:	bf00      	nop
    59c2:	bd80      	pop	{r7, pc}
    59c4:	0000597d 	.word	0x0000597d
    59c8:	00006e0d 	.word	0x00006e0d
    59cc:	0000591d 	.word	0x0000591d

000059d0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    59d0:	b580      	push	{r7, lr}
    59d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    59d4:	4802      	ldr	r0, [pc, #8]	; (59e0 <WATCHDOG_CLOCK_init+0x10>)
    59d6:	4b03      	ldr	r3, [pc, #12]	; (59e4 <WATCHDOG_CLOCK_init+0x14>)
    59d8:	4798      	blx	r3
}
    59da:	bf00      	nop
    59dc:	bd80      	pop	{r7, pc}
    59de:	bf00      	nop
    59e0:	40000800 	.word	0x40000800
    59e4:	0000473b 	.word	0x0000473b

000059e8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    59e8:	b580      	push	{r7, lr}
    59ea:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    59ec:	4b03      	ldr	r3, [pc, #12]	; (59fc <WATCHDOG_init+0x14>)
    59ee:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    59f0:	4903      	ldr	r1, [pc, #12]	; (5a00 <WATCHDOG_init+0x18>)
    59f2:	4804      	ldr	r0, [pc, #16]	; (5a04 <WATCHDOG_init+0x1c>)
    59f4:	4b04      	ldr	r3, [pc, #16]	; (5a08 <WATCHDOG_init+0x20>)
    59f6:	4798      	blx	r3
}
    59f8:	bf00      	nop
    59fa:	bd80      	pop	{r7, pc}
    59fc:	000059d1 	.word	0x000059d1
    5a00:	40002000 	.word	0x40002000
    5a04:	2000271c 	.word	0x2000271c
    5a08:	00004f89 	.word	0x00004f89

00005a0c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5a10:	4904      	ldr	r1, [pc, #16]	; (5a24 <CAN_CCU_PORT_init+0x18>)
    5a12:	202d      	movs	r0, #45	; 0x2d
    5a14:	4b04      	ldr	r3, [pc, #16]	; (5a28 <CAN_CCU_PORT_init+0x1c>)
    5a16:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5a18:	4904      	ldr	r1, [pc, #16]	; (5a2c <CAN_CCU_PORT_init+0x20>)
    5a1a:	202c      	movs	r0, #44	; 0x2c
    5a1c:	4b02      	ldr	r3, [pc, #8]	; (5a28 <CAN_CCU_PORT_init+0x1c>)
    5a1e:	4798      	blx	r3
}
    5a20:	bf00      	nop
    5a22:	bd80      	pop	{r7, pc}
    5a24:	002d0007 	.word	0x002d0007
    5a28:	00004ee9 	.word	0x00004ee9
    5a2c:	002c0007 	.word	0x002c0007

00005a30 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5a30:	b580      	push	{r7, lr}
    5a32:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5a34:	4807      	ldr	r0, [pc, #28]	; (5a54 <CAN_CCU_init+0x24>)
    5a36:	4b08      	ldr	r3, [pc, #32]	; (5a58 <CAN_CCU_init+0x28>)
    5a38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a3a:	2249      	movs	r2, #73	; 0x49
    5a3c:	211c      	movs	r1, #28
    5a3e:	4807      	ldr	r0, [pc, #28]	; (5a5c <CAN_CCU_init+0x2c>)
    5a40:	4b07      	ldr	r3, [pc, #28]	; (5a60 <CAN_CCU_init+0x30>)
    5a42:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5a44:	4907      	ldr	r1, [pc, #28]	; (5a64 <CAN_CCU_init+0x34>)
    5a46:	4808      	ldr	r0, [pc, #32]	; (5a68 <CAN_CCU_init+0x38>)
    5a48:	4b08      	ldr	r3, [pc, #32]	; (5a6c <CAN_CCU_init+0x3c>)
    5a4a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5a4c:	4b08      	ldr	r3, [pc, #32]	; (5a70 <CAN_CCU_init+0x40>)
    5a4e:	4798      	blx	r3
}
    5a50:	bf00      	nop
    5a52:	bd80      	pop	{r7, pc}
    5a54:	40000800 	.word	0x40000800
    5a58:	000046fb 	.word	0x000046fb
    5a5c:	40001c00 	.word	0x40001c00
    5a60:	00004695 	.word	0x00004695
    5a64:	42000400 	.word	0x42000400
    5a68:	20002674 	.word	0x20002674
    5a6c:	00005cd5 	.word	0x00005cd5
    5a70:	00005a0d 	.word	0x00005a0d

00005a74 <system_init>:

void system_init(void)
{
    5a74:	b580      	push	{r7, lr}
    5a76:	af00      	add	r7, sp, #0
	init_mcu();
    5a78:	4b5f      	ldr	r3, [pc, #380]	; (5bf8 <system_init+0x184>)
    5a7a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    5a7c:	2100      	movs	r1, #0
    5a7e:	2007      	movs	r0, #7
    5a80:	4b5e      	ldr	r3, [pc, #376]	; (5bfc <system_init+0x188>)
    5a82:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    5a84:	2102      	movs	r1, #2
    5a86:	2007      	movs	r0, #7
    5a88:	4b5d      	ldr	r3, [pc, #372]	; (5c00 <system_init+0x18c>)
    5a8a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    5a8c:	f04f 31ff 	mov.w	r1, #4294967295
    5a90:	2007      	movs	r0, #7
    5a92:	4b5c      	ldr	r3, [pc, #368]	; (5c04 <system_init+0x190>)
    5a94:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5a96:	2101      	movs	r1, #1
    5a98:	200f      	movs	r0, #15
    5a9a:	4b58      	ldr	r3, [pc, #352]	; (5bfc <system_init+0x188>)
    5a9c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5a9e:	2102      	movs	r1, #2
    5aa0:	200f      	movs	r0, #15
    5aa2:	4b57      	ldr	r3, [pc, #348]	; (5c00 <system_init+0x18c>)
    5aa4:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    5aa6:	f04f 31ff 	mov.w	r1, #4294967295
    5aaa:	200f      	movs	r0, #15
    5aac:	4b55      	ldr	r3, [pc, #340]	; (5c04 <system_init+0x190>)
    5aae:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5ab0:	2101      	movs	r1, #1
    5ab2:	2013      	movs	r0, #19
    5ab4:	4b51      	ldr	r3, [pc, #324]	; (5bfc <system_init+0x188>)
    5ab6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    5ab8:	2102      	movs	r1, #2
    5aba:	2013      	movs	r0, #19
    5abc:	4b50      	ldr	r3, [pc, #320]	; (5c00 <system_init+0x18c>)
    5abe:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5ac0:	f04f 31ff 	mov.w	r1, #4294967295
    5ac4:	2013      	movs	r0, #19
    5ac6:	4b4f      	ldr	r3, [pc, #316]	; (5c04 <system_init+0x190>)
    5ac8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5aca:	2101      	movs	r1, #1
    5acc:	201b      	movs	r0, #27
    5ace:	4b4b      	ldr	r3, [pc, #300]	; (5bfc <system_init+0x188>)
    5ad0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5ad2:	2102      	movs	r1, #2
    5ad4:	201b      	movs	r0, #27
    5ad6:	4b4a      	ldr	r3, [pc, #296]	; (5c00 <system_init+0x18c>)
    5ad8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5ada:	f04f 31ff 	mov.w	r1, #4294967295
    5ade:	201b      	movs	r0, #27
    5ae0:	4b48      	ldr	r3, [pc, #288]	; (5c04 <system_init+0x190>)
    5ae2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    5ae4:	2101      	movs	r1, #1
    5ae6:	2027      	movs	r0, #39	; 0x27
    5ae8:	4b44      	ldr	r3, [pc, #272]	; (5bfc <system_init+0x188>)
    5aea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    5aec:	2102      	movs	r1, #2
    5aee:	2027      	movs	r0, #39	; 0x27
    5af0:	4b43      	ldr	r3, [pc, #268]	; (5c00 <system_init+0x18c>)
    5af2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    5af4:	f04f 31ff 	mov.w	r1, #4294967295
    5af8:	2027      	movs	r0, #39	; 0x27
    5afa:	4b42      	ldr	r3, [pc, #264]	; (5c04 <system_init+0x190>)
    5afc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5afe:	2101      	movs	r1, #1
    5b00:	203d      	movs	r0, #61	; 0x3d
    5b02:	4b3e      	ldr	r3, [pc, #248]	; (5bfc <system_init+0x188>)
    5b04:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5b06:	2102      	movs	r1, #2
    5b08:	203d      	movs	r0, #61	; 0x3d
    5b0a:	4b3d      	ldr	r3, [pc, #244]	; (5c00 <system_init+0x18c>)
    5b0c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5b0e:	f04f 31ff 	mov.w	r1, #4294967295
    5b12:	203d      	movs	r0, #61	; 0x3d
    5b14:	4b3b      	ldr	r3, [pc, #236]	; (5c04 <system_init+0x190>)
    5b16:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5b18:	2101      	movs	r1, #1
    5b1a:	203f      	movs	r0, #63	; 0x3f
    5b1c:	4b38      	ldr	r3, [pc, #224]	; (5c00 <system_init+0x18c>)
    5b1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5b20:	2101      	movs	r1, #1
    5b22:	203f      	movs	r0, #63	; 0x3f
    5b24:	4b38      	ldr	r3, [pc, #224]	; (5c08 <system_init+0x194>)
    5b26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5b28:	f04f 31ff 	mov.w	r1, #4294967295
    5b2c:	203f      	movs	r0, #63	; 0x3f
    5b2e:	4b35      	ldr	r3, [pc, #212]	; (5c04 <system_init+0x190>)
    5b30:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5b32:	2100      	movs	r1, #0
    5b34:	204d      	movs	r0, #77	; 0x4d
    5b36:	4b31      	ldr	r3, [pc, #196]	; (5bfc <system_init+0x188>)
    5b38:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5b3a:	2102      	movs	r1, #2
    5b3c:	204d      	movs	r0, #77	; 0x4d
    5b3e:	4b30      	ldr	r3, [pc, #192]	; (5c00 <system_init+0x18c>)
    5b40:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5b42:	f04f 31ff 	mov.w	r1, #4294967295
    5b46:	204d      	movs	r0, #77	; 0x4d
    5b48:	4b2e      	ldr	r3, [pc, #184]	; (5c04 <system_init+0x190>)
    5b4a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5b4c:	2101      	movs	r1, #1
    5b4e:	204e      	movs	r0, #78	; 0x4e
    5b50:	4b2a      	ldr	r3, [pc, #168]	; (5bfc <system_init+0x188>)
    5b52:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5b54:	2102      	movs	r1, #2
    5b56:	204e      	movs	r0, #78	; 0x4e
    5b58:	4b29      	ldr	r3, [pc, #164]	; (5c00 <system_init+0x18c>)
    5b5a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5b5c:	f04f 31ff 	mov.w	r1, #4294967295
    5b60:	204e      	movs	r0, #78	; 0x4e
    5b62:	4b28      	ldr	r3, [pc, #160]	; (5c04 <system_init+0x190>)
    5b64:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5b66:	2100      	movs	r1, #0
    5b68:	204f      	movs	r0, #79	; 0x4f
    5b6a:	4b24      	ldr	r3, [pc, #144]	; (5bfc <system_init+0x188>)
    5b6c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5b6e:	2102      	movs	r1, #2
    5b70:	204f      	movs	r0, #79	; 0x4f
    5b72:	4b23      	ldr	r3, [pc, #140]	; (5c00 <system_init+0x18c>)
    5b74:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5b76:	f04f 31ff 	mov.w	r1, #4294967295
    5b7a:	204f      	movs	r0, #79	; 0x4f
    5b7c:	4b21      	ldr	r3, [pc, #132]	; (5c04 <system_init+0x190>)
    5b7e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5b80:	2100      	movs	r1, #0
    5b82:	2052      	movs	r0, #82	; 0x52
    5b84:	4b1d      	ldr	r3, [pc, #116]	; (5bfc <system_init+0x188>)
    5b86:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5b88:	2102      	movs	r1, #2
    5b8a:	2052      	movs	r0, #82	; 0x52
    5b8c:	4b1c      	ldr	r3, [pc, #112]	; (5c00 <system_init+0x18c>)
    5b8e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5b90:	f04f 31ff 	mov.w	r1, #4294967295
    5b94:	2052      	movs	r0, #82	; 0x52
    5b96:	4b1b      	ldr	r3, [pc, #108]	; (5c04 <system_init+0x190>)
    5b98:	4798      	blx	r3

	CRC_CALC_init();
    5b9a:	4b1c      	ldr	r3, [pc, #112]	; (5c0c <system_init+0x198>)
    5b9c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5b9e:	4b1c      	ldr	r3, [pc, #112]	; (5c10 <system_init+0x19c>)
    5ba0:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5ba2:	4b1c      	ldr	r3, [pc, #112]	; (5c14 <system_init+0x1a0>)
    5ba4:	4798      	blx	r3

	QSPI_N25Q256_init();
    5ba6:	4b1c      	ldr	r3, [pc, #112]	; (5c18 <system_init+0x1a4>)
    5ba8:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5baa:	4b1c      	ldr	r3, [pc, #112]	; (5c1c <system_init+0x1a8>)
    5bac:	4798      	blx	r3

	I2C_HEATERS_init();
    5bae:	4b1c      	ldr	r3, [pc, #112]	; (5c20 <system_init+0x1ac>)
    5bb0:	4798      	blx	r3

	SPI_TEMP_init();
    5bb2:	4b1c      	ldr	r3, [pc, #112]	; (5c24 <system_init+0x1b0>)
    5bb4:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    5bb6:	4b1c      	ldr	r3, [pc, #112]	; (5c28 <system_init+0x1b4>)
    5bb8:	4798      	blx	r3

	SPI_HI3593_init();
    5bba:	4b1c      	ldr	r3, [pc, #112]	; (5c2c <system_init+0x1b8>)
    5bbc:	4798      	blx	r3

	I2C_FANS_init();
    5bbe:	4b1c      	ldr	r3, [pc, #112]	; (5c30 <system_init+0x1bc>)
    5bc0:	4798      	blx	r3

	TIMER_USB_init();
    5bc2:	4b1c      	ldr	r3, [pc, #112]	; (5c34 <system_init+0x1c0>)
    5bc4:	4798      	blx	r3
	TIMER_ARINC_init();
    5bc6:	4b1c      	ldr	r3, [pc, #112]	; (5c38 <system_init+0x1c4>)
    5bc8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    5bca:	4b1c      	ldr	r3, [pc, #112]	; (5c3c <system_init+0x1c8>)
    5bcc:	4798      	blx	r3
	TIMER_INTERFACE_init();
    5bce:	4b1c      	ldr	r3, [pc, #112]	; (5c40 <system_init+0x1cc>)
    5bd0:	4798      	blx	r3
	TIMER_EVENT_init();
    5bd2:	4b1c      	ldr	r3, [pc, #112]	; (5c44 <system_init+0x1d0>)
    5bd4:	4798      	blx	r3
	LIVE_PULSE_init();
    5bd6:	4b1c      	ldr	r3, [pc, #112]	; (5c48 <system_init+0x1d4>)
    5bd8:	4798      	blx	r3

	TIMER_HVAC_init();
    5bda:	4b1c      	ldr	r3, [pc, #112]	; (5c4c <system_init+0x1d8>)
    5bdc:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    5bde:	4b1c      	ldr	r3, [pc, #112]	; (5c50 <system_init+0x1dc>)
    5be0:	4798      	blx	r3

	TIMER_CCU_init();
    5be2:	4b1c      	ldr	r3, [pc, #112]	; (5c54 <system_init+0x1e0>)
    5be4:	4798      	blx	r3

	CDCUSB_init();
    5be6:	4b1c      	ldr	r3, [pc, #112]	; (5c58 <system_init+0x1e4>)
    5be8:	4798      	blx	r3

	WATCHDOG_init();
    5bea:	4b1c      	ldr	r3, [pc, #112]	; (5c5c <system_init+0x1e8>)
    5bec:	4798      	blx	r3
	CAN_CCU_init();
    5bee:	4b1c      	ldr	r3, [pc, #112]	; (5c60 <system_init+0x1ec>)
    5bf0:	4798      	blx	r3
}
    5bf2:	bf00      	nop
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	00004f79 	.word	0x00004f79
    5bfc:	00004f41 	.word	0x00004f41
    5c00:	00004f09 	.word	0x00004f09
    5c04:	00004ee9 	.word	0x00004ee9
    5c08:	00004eb5 	.word	0x00004eb5
    5c0c:	00004fd9 	.word	0x00004fd9
    5c10:	00005005 	.word	0x00005005
    5c14:	0000512d 	.word	0x0000512d
    5c18:	00005275 	.word	0x00005275
    5c1c:	000052b9 	.word	0x000052b9
    5c20:	00005349 	.word	0x00005349
    5c24:	00005415 	.word	0x00005415
    5c28:	000054ad 	.word	0x000054ad
    5c2c:	00005579 	.word	0x00005579
    5c30:	00005611 	.word	0x00005611
    5c34:	0000563d 	.word	0x0000563d
    5c38:	00005685 	.word	0x00005685
    5c3c:	000056cd 	.word	0x000056cd
    5c40:	00005715 	.word	0x00005715
    5c44:	0000575d 	.word	0x0000575d
    5c48:	000057dd 	.word	0x000057dd
    5c4c:	0000583d 	.word	0x0000583d
    5c50:	00005895 	.word	0x00005895
    5c54:	000058ed 	.word	0x000058ed
    5c58:	000059b1 	.word	0x000059b1
    5c5c:	000059e9 	.word	0x000059e9
    5c60:	00005a31 	.word	0x00005a31

00005c64 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    5c64:	b580      	push	{r7, lr}
    5c66:	b084      	sub	sp, #16
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
    5c6c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    5c6e:	2300      	movs	r3, #0
    5c70:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	2b00      	cmp	r3, #0
    5c76:	bf14      	ite	ne
    5c78:	2301      	movne	r3, #1
    5c7a:	2300      	moveq	r3, #0
    5c7c:	b2db      	uxtb	r3, r3
    5c7e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5c82:	4911      	ldr	r1, [pc, #68]	; (5cc8 <calendar_init+0x64>)
    5c84:	4618      	mov	r0, r3
    5c86:	4b11      	ldr	r3, [pc, #68]	; (5ccc <calendar_init+0x68>)
    5c88:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	681a      	ldr	r2, [r3, #0]
    5c8e:	683b      	ldr	r3, [r7, #0]
    5c90:	429a      	cmp	r2, r3
    5c92:	d101      	bne.n	5c98 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    5c94:	2300      	movs	r3, #0
    5c96:	e013      	b.n	5cc0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    5c98:	687b      	ldr	r3, [r7, #4]
    5c9a:	681b      	ldr	r3, [r3, #0]
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d002      	beq.n	5ca6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    5ca0:	f06f 0311 	mvn.w	r3, #17
    5ca4:	e00c      	b.n	5cc0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	683a      	ldr	r2, [r7, #0]
    5caa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	4618      	mov	r0, r3
    5cb0:	4b07      	ldr	r3, [pc, #28]	; (5cd0 <calendar_init+0x6c>)
    5cb2:	4798      	blx	r3
    5cb4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    5cbc:	619a      	str	r2, [r3, #24]

	return ret;
    5cbe:	68fb      	ldr	r3, [r7, #12]
}
    5cc0:	4618      	mov	r0, r3
    5cc2:	3710      	adds	r7, #16
    5cc4:	46bd      	mov	sp, r7
    5cc6:	bd80      	pop	{r7, pc}
    5cc8:	000129e0 	.word	0x000129e0
    5ccc:	00007361 	.word	0x00007361
    5cd0:	00009c99 	.word	0x00009c99

00005cd4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	b084      	sub	sp, #16
    5cd8:	af00      	add	r7, sp, #0
    5cda:	6078      	str	r0, [r7, #4]
    5cdc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d004      	beq.n	5cee <can_async_init+0x1a>
    5ce4:	683b      	ldr	r3, [r7, #0]
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d001      	beq.n	5cee <can_async_init+0x1a>
    5cea:	2301      	movs	r3, #1
    5cec:	e000      	b.n	5cf0 <can_async_init+0x1c>
    5cee:	2300      	movs	r3, #0
    5cf0:	f003 0301 	and.w	r3, r3, #1
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	2241      	movs	r2, #65	; 0x41
    5cf8:	490e      	ldr	r1, [pc, #56]	; (5d34 <can_async_init+0x60>)
    5cfa:	4618      	mov	r0, r3
    5cfc:	4b0e      	ldr	r3, [pc, #56]	; (5d38 <can_async_init+0x64>)
    5cfe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	6839      	ldr	r1, [r7, #0]
    5d04:	4618      	mov	r0, r3
    5d06:	4b0d      	ldr	r3, [pc, #52]	; (5d3c <can_async_init+0x68>)
    5d08:	4798      	blx	r3
    5d0a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    5d0c:	68fb      	ldr	r3, [r7, #12]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d001      	beq.n	5d16 <can_async_init+0x42>
		return rc;
    5d12:	68fb      	ldr	r3, [r7, #12]
    5d14:	e009      	b.n	5d2a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	4a09      	ldr	r2, [pc, #36]	; (5d40 <can_async_init+0x6c>)
    5d1a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	4a09      	ldr	r2, [pc, #36]	; (5d44 <can_async_init+0x70>)
    5d20:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	4a08      	ldr	r2, [pc, #32]	; (5d48 <can_async_init+0x74>)
    5d26:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5d28:	2300      	movs	r3, #0
}
    5d2a:	4618      	mov	r0, r3
    5d2c:	3710      	adds	r7, #16
    5d2e:	46bd      	mov	sp, r7
    5d30:	bd80      	pop	{r7, pc}
    5d32:	bf00      	nop
    5d34:	000129fc 	.word	0x000129fc
    5d38:	00007361 	.word	0x00007361
    5d3c:	00007ac9 	.word	0x00007ac9
    5d40:	00005ee9 	.word	0x00005ee9
    5d44:	00005f0d 	.word	0x00005f0d
    5d48:	00005f31 	.word	0x00005f31

00005d4c <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b082      	sub	sp, #8
    5d50:	af00      	add	r7, sp, #0
    5d52:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	2b00      	cmp	r3, #0
    5d58:	bf14      	ite	ne
    5d5a:	2301      	movne	r3, #1
    5d5c:	2300      	moveq	r3, #0
    5d5e:	b2db      	uxtb	r3, r3
    5d60:	225c      	movs	r2, #92	; 0x5c
    5d62:	4906      	ldr	r1, [pc, #24]	; (5d7c <can_async_enable+0x30>)
    5d64:	4618      	mov	r0, r3
    5d66:	4b06      	ldr	r3, [pc, #24]	; (5d80 <can_async_enable+0x34>)
    5d68:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	4618      	mov	r0, r3
    5d6e:	4b05      	ldr	r3, [pc, #20]	; (5d84 <can_async_enable+0x38>)
    5d70:	4798      	blx	r3
    5d72:	4603      	mov	r3, r0
}
    5d74:	4618      	mov	r0, r3
    5d76:	3708      	adds	r7, #8
    5d78:	46bd      	mov	sp, r7
    5d7a:	bd80      	pop	{r7, pc}
    5d7c:	000129fc 	.word	0x000129fc
    5d80:	00007361 	.word	0x00007361
    5d84:	00007cb1 	.word	0x00007cb1

00005d88 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
    5d90:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	2b00      	cmp	r3, #0
    5d96:	d004      	beq.n	5da2 <can_async_read+0x1a>
    5d98:	683b      	ldr	r3, [r7, #0]
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d001      	beq.n	5da2 <can_async_read+0x1a>
    5d9e:	2301      	movs	r3, #1
    5da0:	e000      	b.n	5da4 <can_async_read+0x1c>
    5da2:	2300      	movs	r3, #0
    5da4:	f003 0301 	and.w	r3, r3, #1
    5da8:	b2db      	uxtb	r3, r3
    5daa:	226e      	movs	r2, #110	; 0x6e
    5dac:	4906      	ldr	r1, [pc, #24]	; (5dc8 <can_async_read+0x40>)
    5dae:	4618      	mov	r0, r3
    5db0:	4b06      	ldr	r3, [pc, #24]	; (5dcc <can_async_read+0x44>)
    5db2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    5db4:	687b      	ldr	r3, [r7, #4]
    5db6:	6839      	ldr	r1, [r7, #0]
    5db8:	4618      	mov	r0, r3
    5dba:	4b05      	ldr	r3, [pc, #20]	; (5dd0 <can_async_read+0x48>)
    5dbc:	4798      	blx	r3
    5dbe:	4603      	mov	r3, r0
}
    5dc0:	4618      	mov	r0, r3
    5dc2:	3708      	adds	r7, #8
    5dc4:	46bd      	mov	sp, r7
    5dc6:	bd80      	pop	{r7, pc}
    5dc8:	000129fc 	.word	0x000129fc
    5dcc:	00007361 	.word	0x00007361
    5dd0:	00007cd1 	.word	0x00007cd1

00005dd4 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    5dd4:	b580      	push	{r7, lr}
    5dd6:	b082      	sub	sp, #8
    5dd8:	af00      	add	r7, sp, #0
    5dda:	6078      	str	r0, [r7, #4]
    5ddc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	2b00      	cmp	r3, #0
    5de2:	d004      	beq.n	5dee <can_async_write+0x1a>
    5de4:	683b      	ldr	r3, [r7, #0]
    5de6:	2b00      	cmp	r3, #0
    5de8:	d001      	beq.n	5dee <can_async_write+0x1a>
    5dea:	2301      	movs	r3, #1
    5dec:	e000      	b.n	5df0 <can_async_write+0x1c>
    5dee:	2300      	movs	r3, #0
    5df0:	f003 0301 	and.w	r3, r3, #1
    5df4:	b2db      	uxtb	r3, r3
    5df6:	2277      	movs	r2, #119	; 0x77
    5df8:	4906      	ldr	r1, [pc, #24]	; (5e14 <can_async_write+0x40>)
    5dfa:	4618      	mov	r0, r3
    5dfc:	4b06      	ldr	r3, [pc, #24]	; (5e18 <can_async_write+0x44>)
    5dfe:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	6839      	ldr	r1, [r7, #0]
    5e04:	4618      	mov	r0, r3
    5e06:	4b05      	ldr	r3, [pc, #20]	; (5e1c <can_async_write+0x48>)
    5e08:	4798      	blx	r3
    5e0a:	4603      	mov	r3, r0
}
    5e0c:	4618      	mov	r0, r3
    5e0e:	3708      	adds	r7, #8
    5e10:	46bd      	mov	sp, r7
    5e12:	bd80      	pop	{r7, pc}
    5e14:	000129fc 	.word	0x000129fc
    5e18:	00007361 	.word	0x00007361
    5e1c:	00007de1 	.word	0x00007de1

00005e20 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    5e20:	b580      	push	{r7, lr}
    5e22:	b084      	sub	sp, #16
    5e24:	af00      	add	r7, sp, #0
    5e26:	60f8      	str	r0, [r7, #12]
    5e28:	460b      	mov	r3, r1
    5e2a:	607a      	str	r2, [r7, #4]
    5e2c:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    5e2e:	68fb      	ldr	r3, [r7, #12]
    5e30:	2b00      	cmp	r3, #0
    5e32:	bf14      	ite	ne
    5e34:	2301      	movne	r3, #1
    5e36:	2300      	moveq	r3, #0
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	2281      	movs	r2, #129	; 0x81
    5e3c:	4914      	ldr	r1, [pc, #80]	; (5e90 <can_async_register_callback+0x70>)
    5e3e:	4618      	mov	r0, r3
    5e40:	4b14      	ldr	r3, [pc, #80]	; (5e94 <can_async_register_callback+0x74>)
    5e42:	4798      	blx	r3

	switch (type) {
    5e44:	7afb      	ldrb	r3, [r7, #11]
    5e46:	2b01      	cmp	r3, #1
    5e48:	d007      	beq.n	5e5a <can_async_register_callback+0x3a>
    5e4a:	2b02      	cmp	r3, #2
    5e4c:	d009      	beq.n	5e62 <can_async_register_callback+0x42>
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d10b      	bne.n	5e6a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	687a      	ldr	r2, [r7, #4]
    5e56:	621a      	str	r2, [r3, #32]
		break;
    5e58:	e00a      	b.n	5e70 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	687a      	ldr	r2, [r7, #4]
    5e5e:	61da      	str	r2, [r3, #28]
		break;
    5e60:	e006      	b.n	5e70 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    5e62:	68fb      	ldr	r3, [r7, #12]
    5e64:	687a      	ldr	r2, [r7, #4]
    5e66:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    5e68:	e002      	b.n	5e70 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    5e6a:	f06f 030c 	mvn.w	r3, #12
    5e6e:	e00b      	b.n	5e88 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    5e70:	68f8      	ldr	r0, [r7, #12]
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	2b00      	cmp	r3, #0
    5e76:	bf14      	ite	ne
    5e78:	2301      	movne	r3, #1
    5e7a:	2300      	moveq	r3, #0
    5e7c:	b2da      	uxtb	r2, r3
    5e7e:	7afb      	ldrb	r3, [r7, #11]
    5e80:	4619      	mov	r1, r3
    5e82:	4b05      	ldr	r3, [pc, #20]	; (5e98 <can_async_register_callback+0x78>)
    5e84:	4798      	blx	r3

	return ERR_NONE;
    5e86:	2300      	movs	r3, #0
}
    5e88:	4618      	mov	r0, r3
    5e8a:	3710      	adds	r7, #16
    5e8c:	46bd      	mov	sp, r7
    5e8e:	bd80      	pop	{r7, pc}
    5e90:	000129fc 	.word	0x000129fc
    5e94:	00007361 	.word	0x00007361
    5e98:	00007f9d 	.word	0x00007f9d

00005e9c <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    5e9c:	b590      	push	{r4, r7, lr}
    5e9e:	b085      	sub	sp, #20
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	60f8      	str	r0, [r7, #12]
    5ea4:	607b      	str	r3, [r7, #4]
    5ea6:	460b      	mov	r3, r1
    5ea8:	72fb      	strb	r3, [r7, #11]
    5eaa:	4613      	mov	r3, r2
    5eac:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    5eae:	68fb      	ldr	r3, [r7, #12]
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	bf14      	ite	ne
    5eb4:	2301      	movne	r3, #1
    5eb6:	2300      	moveq	r3, #0
    5eb8:	b2db      	uxtb	r3, r3
    5eba:	22b8      	movs	r2, #184	; 0xb8
    5ebc:	4907      	ldr	r1, [pc, #28]	; (5edc <can_async_set_filter+0x40>)
    5ebe:	4618      	mov	r0, r3
    5ec0:	4b07      	ldr	r3, [pc, #28]	; (5ee0 <can_async_set_filter+0x44>)
    5ec2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    5ec4:	68f8      	ldr	r0, [r7, #12]
    5ec6:	7aba      	ldrb	r2, [r7, #10]
    5ec8:	7af9      	ldrb	r1, [r7, #11]
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	4c05      	ldr	r4, [pc, #20]	; (5ee4 <can_async_set_filter+0x48>)
    5ece:	47a0      	blx	r4
    5ed0:	4603      	mov	r3, r0
}
    5ed2:	4618      	mov	r0, r3
    5ed4:	3714      	adds	r7, #20
    5ed6:	46bd      	mov	sp, r7
    5ed8:	bd90      	pop	{r4, r7, pc}
    5eda:	bf00      	nop
    5edc:	000129fc 	.word	0x000129fc
    5ee0:	00007361 	.word	0x00007361
    5ee4:	0000802d 	.word	0x0000802d

00005ee8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b084      	sub	sp, #16
    5eec:	af00      	add	r7, sp, #0
    5eee:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    5ef4:	68fb      	ldr	r3, [r7, #12]
    5ef6:	69db      	ldr	r3, [r3, #28]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d003      	beq.n	5f04 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    5efc:	68fb      	ldr	r3, [r7, #12]
    5efe:	69db      	ldr	r3, [r3, #28]
    5f00:	68f8      	ldr	r0, [r7, #12]
    5f02:	4798      	blx	r3
	}
}
    5f04:	bf00      	nop
    5f06:	3710      	adds	r7, #16
    5f08:	46bd      	mov	sp, r7
    5f0a:	bd80      	pop	{r7, pc}

00005f0c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    5f0c:	b580      	push	{r7, lr}
    5f0e:	b084      	sub	sp, #16
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    5f18:	68fb      	ldr	r3, [r7, #12]
    5f1a:	6a1b      	ldr	r3, [r3, #32]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d003      	beq.n	5f28 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    5f20:	68fb      	ldr	r3, [r7, #12]
    5f22:	6a1b      	ldr	r3, [r3, #32]
    5f24:	68f8      	ldr	r0, [r7, #12]
    5f26:	4798      	blx	r3
	}
}
    5f28:	bf00      	nop
    5f2a:	3710      	adds	r7, #16
    5f2c:	46bd      	mov	sp, r7
    5f2e:	bd80      	pop	{r7, pc}

00005f30 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    5f30:	b580      	push	{r7, lr}
    5f32:	b084      	sub	sp, #16
    5f34:	af00      	add	r7, sp, #0
    5f36:	6078      	str	r0, [r7, #4]
    5f38:	460b      	mov	r3, r1
    5f3a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    5f40:	68fb      	ldr	r3, [r7, #12]
    5f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f44:	2b00      	cmp	r3, #0
    5f46:	d005      	beq.n	5f54 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f4c:	78fa      	ldrb	r2, [r7, #3]
    5f4e:	4611      	mov	r1, r2
    5f50:	68f8      	ldr	r0, [r7, #12]
    5f52:	4798      	blx	r3
	}
}
    5f54:	bf00      	nop
    5f56:	3710      	adds	r7, #16
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}

00005f5c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5f5c:	b580      	push	{r7, lr}
    5f5e:	b082      	sub	sp, #8
    5f60:	af00      	add	r7, sp, #0
    5f62:	6078      	str	r0, [r7, #4]
    5f64:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d004      	beq.n	5f76 <crc_sync_init+0x1a>
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d001      	beq.n	5f76 <crc_sync_init+0x1a>
    5f72:	2301      	movs	r3, #1
    5f74:	e000      	b.n	5f78 <crc_sync_init+0x1c>
    5f76:	2300      	movs	r3, #0
    5f78:	f003 0301 	and.w	r3, r3, #1
    5f7c:	b2db      	uxtb	r3, r3
    5f7e:	222b      	movs	r2, #43	; 0x2b
    5f80:	4906      	ldr	r1, [pc, #24]	; (5f9c <crc_sync_init+0x40>)
    5f82:	4618      	mov	r0, r3
    5f84:	4b06      	ldr	r3, [pc, #24]	; (5fa0 <crc_sync_init+0x44>)
    5f86:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	6839      	ldr	r1, [r7, #0]
    5f8c:	4618      	mov	r0, r3
    5f8e:	4b05      	ldr	r3, [pc, #20]	; (5fa4 <crc_sync_init+0x48>)
    5f90:	4798      	blx	r3
    5f92:	4603      	mov	r3, r0
}
    5f94:	4618      	mov	r0, r3
    5f96:	3708      	adds	r7, #8
    5f98:	46bd      	mov	sp, r7
    5f9a:	bd80      	pop	{r7, pc}
    5f9c:	00012a18 	.word	0x00012a18
    5fa0:	00007361 	.word	0x00007361
    5fa4:	00008611 	.word	0x00008611

00005fa8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    5fa8:	b590      	push	{r4, r7, lr}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	4603      	mov	r3, r0
    5fb0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    5fb2:	4b07      	ldr	r3, [pc, #28]	; (5fd0 <delay_us+0x28>)
    5fb4:	681c      	ldr	r4, [r3, #0]
    5fb6:	88fb      	ldrh	r3, [r7, #6]
    5fb8:	4618      	mov	r0, r3
    5fba:	4b06      	ldr	r3, [pc, #24]	; (5fd4 <delay_us+0x2c>)
    5fbc:	4798      	blx	r3
    5fbe:	4603      	mov	r3, r0
    5fc0:	4619      	mov	r1, r3
    5fc2:	4620      	mov	r0, r4
    5fc4:	4b04      	ldr	r3, [pc, #16]	; (5fd8 <delay_us+0x30>)
    5fc6:	4798      	blx	r3
}
    5fc8:	bf00      	nop
    5fca:	370c      	adds	r7, #12
    5fcc:	46bd      	mov	sp, r7
    5fce:	bd90      	pop	{r4, r7, pc}
    5fd0:	20001a54 	.word	0x20001a54
    5fd4:	00008361 	.word	0x00008361
    5fd8:	000084f9 	.word	0x000084f9

00005fdc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    5fdc:	b590      	push	{r4, r7, lr}
    5fde:	b083      	sub	sp, #12
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	4603      	mov	r3, r0
    5fe4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    5fe6:	4b07      	ldr	r3, [pc, #28]	; (6004 <delay_ms+0x28>)
    5fe8:	681c      	ldr	r4, [r3, #0]
    5fea:	88fb      	ldrh	r3, [r7, #6]
    5fec:	4618      	mov	r0, r3
    5fee:	4b06      	ldr	r3, [pc, #24]	; (6008 <delay_ms+0x2c>)
    5ff0:	4798      	blx	r3
    5ff2:	4603      	mov	r3, r0
    5ff4:	4619      	mov	r1, r3
    5ff6:	4620      	mov	r0, r4
    5ff8:	4b04      	ldr	r3, [pc, #16]	; (600c <delay_ms+0x30>)
    5ffa:	4798      	blx	r3
}
    5ffc:	bf00      	nop
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	bd90      	pop	{r4, r7, pc}
    6004:	20001a54 	.word	0x20001a54
    6008:	000084cd 	.word	0x000084cd
    600c:	000084f9 	.word	0x000084f9

00006010 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    6010:	b580      	push	{r7, lr}
    6012:	af00      	add	r7, sp, #0
	return _event_system_init();
    6014:	4b02      	ldr	r3, [pc, #8]	; (6020 <event_system_init+0x10>)
    6016:	4798      	blx	r3
    6018:	4603      	mov	r3, r0
}
    601a:	4618      	mov	r0, r3
    601c:	bd80      	pop	{r7, pc}
    601e:	bf00      	nop
    6020:	00008cf5 	.word	0x00008cf5

00006024 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    6024:	b580      	push	{r7, lr}
    6026:	b082      	sub	sp, #8
    6028:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    602a:	2300      	movs	r3, #0
    602c:	80fb      	strh	r3, [r7, #6]
    602e:	e00e      	b.n	604e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    6030:	88fb      	ldrh	r3, [r7, #6]
    6032:	4a0c      	ldr	r2, [pc, #48]	; (6064 <ext_irq_init+0x40>)
    6034:	00db      	lsls	r3, r3, #3
    6036:	4413      	add	r3, r2
    6038:	f04f 32ff 	mov.w	r2, #4294967295
    603c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    603e:	88fb      	ldrh	r3, [r7, #6]
    6040:	4a08      	ldr	r2, [pc, #32]	; (6064 <ext_irq_init+0x40>)
    6042:	2100      	movs	r1, #0
    6044:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6048:	88fb      	ldrh	r3, [r7, #6]
    604a:	3301      	adds	r3, #1
    604c:	80fb      	strh	r3, [r7, #6]
    604e:	88fb      	ldrh	r3, [r7, #6]
    6050:	2b08      	cmp	r3, #8
    6052:	d9ed      	bls.n	6030 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    6054:	4804      	ldr	r0, [pc, #16]	; (6068 <ext_irq_init+0x44>)
    6056:	4b05      	ldr	r3, [pc, #20]	; (606c <ext_irq_init+0x48>)
    6058:	4798      	blx	r3
    605a:	4603      	mov	r3, r0
}
    605c:	4618      	mov	r0, r3
    605e:	3708      	adds	r7, #8
    6060:	46bd      	mov	sp, r7
    6062:	bd80      	pop	{r7, pc}
    6064:	20001a58 	.word	0x20001a58
    6068:	00006071 	.word	0x00006071
    606c:	00008919 	.word	0x00008919

00006070 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    6070:	b580      	push	{r7, lr}
    6072:	b084      	sub	sp, #16
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6078:	2300      	movs	r3, #0
    607a:	73fb      	strb	r3, [r7, #15]
    607c:	2309      	movs	r3, #9
    607e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    6080:	e02a      	b.n	60d8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    6082:	7bba      	ldrb	r2, [r7, #14]
    6084:	7bfb      	ldrb	r3, [r7, #15]
    6086:	4413      	add	r3, r2
    6088:	105b      	asrs	r3, r3, #1
    608a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    608c:	7b7b      	ldrb	r3, [r7, #13]
    608e:	2b08      	cmp	r3, #8
    6090:	d827      	bhi.n	60e2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    6092:	7b7b      	ldrb	r3, [r7, #13]
    6094:	4a16      	ldr	r2, [pc, #88]	; (60f0 <process_ext_irq+0x80>)
    6096:	00db      	lsls	r3, r3, #3
    6098:	4413      	add	r3, r2
    609a:	685a      	ldr	r2, [r3, #4]
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	429a      	cmp	r2, r3
    60a0:	d10b      	bne.n	60ba <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    60a2:	7b7b      	ldrb	r3, [r7, #13]
    60a4:	4a12      	ldr	r2, [pc, #72]	; (60f0 <process_ext_irq+0x80>)
    60a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d01b      	beq.n	60e6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    60ae:	7b7b      	ldrb	r3, [r7, #13]
    60b0:	4a0f      	ldr	r2, [pc, #60]	; (60f0 <process_ext_irq+0x80>)
    60b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    60b6:	4798      	blx	r3
			}
			return;
    60b8:	e015      	b.n	60e6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    60ba:	7b7b      	ldrb	r3, [r7, #13]
    60bc:	4a0c      	ldr	r2, [pc, #48]	; (60f0 <process_ext_irq+0x80>)
    60be:	00db      	lsls	r3, r3, #3
    60c0:	4413      	add	r3, r2
    60c2:	685a      	ldr	r2, [r3, #4]
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	429a      	cmp	r2, r3
    60c8:	d203      	bcs.n	60d2 <process_ext_irq+0x62>
			lower = middle + 1;
    60ca:	7b7b      	ldrb	r3, [r7, #13]
    60cc:	3301      	adds	r3, #1
    60ce:	73fb      	strb	r3, [r7, #15]
    60d0:	e002      	b.n	60d8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    60d2:	7b7b      	ldrb	r3, [r7, #13]
    60d4:	3b01      	subs	r3, #1
    60d6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    60d8:	7bba      	ldrb	r2, [r7, #14]
    60da:	7bfb      	ldrb	r3, [r7, #15]
    60dc:	429a      	cmp	r2, r3
    60de:	d2d0      	bcs.n	6082 <process_ext_irq+0x12>
    60e0:	e002      	b.n	60e8 <process_ext_irq+0x78>
			return;
    60e2:	bf00      	nop
    60e4:	e000      	b.n	60e8 <process_ext_irq+0x78>
			return;
    60e6:	bf00      	nop
		}
	}
}
    60e8:	3710      	adds	r7, #16
    60ea:	46bd      	mov	sp, r7
    60ec:	bd80      	pop	{r7, pc}
    60ee:	bf00      	nop
    60f0:	20001a58 	.word	0x20001a58

000060f4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    60f4:	b580      	push	{r7, lr}
    60f6:	b08a      	sub	sp, #40	; 0x28
    60f8:	af00      	add	r7, sp, #0
    60fa:	60f8      	str	r0, [r7, #12]
    60fc:	60b9      	str	r1, [r7, #8]
    60fe:	4613      	mov	r3, r2
    6100:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6102:	68fb      	ldr	r3, [r7, #12]
    6104:	3b14      	subs	r3, #20
    6106:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    610a:	8b9b      	ldrh	r3, [r3, #28]
    610c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    610e:	88fb      	ldrh	r3, [r7, #6]
    6110:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6112:	f248 0301 	movw	r3, #32769	; 0x8001
    6116:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6118:	68bb      	ldr	r3, [r7, #8]
    611a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    611e:	f107 0214 	add.w	r2, r7, #20
    6122:	4611      	mov	r1, r2
    6124:	4618      	mov	r0, r3
    6126:	4b06      	ldr	r3, [pc, #24]	; (6140 <i2c_m_sync_read+0x4c>)
    6128:	4798      	blx	r3
    612a:	6238      	str	r0, [r7, #32]

	if (ret) {
    612c:	6a3b      	ldr	r3, [r7, #32]
    612e:	2b00      	cmp	r3, #0
    6130:	d001      	beq.n	6136 <i2c_m_sync_read+0x42>
		return ret;
    6132:	6a3b      	ldr	r3, [r7, #32]
    6134:	e000      	b.n	6138 <i2c_m_sync_read+0x44>
	}

	return n;
    6136:	88fb      	ldrh	r3, [r7, #6]
}
    6138:	4618      	mov	r0, r3
    613a:	3728      	adds	r7, #40	; 0x28
    613c:	46bd      	mov	sp, r7
    613e:	bd80      	pop	{r7, pc}
    6140:	0000a955 	.word	0x0000a955

00006144 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6144:	b580      	push	{r7, lr}
    6146:	b08a      	sub	sp, #40	; 0x28
    6148:	af00      	add	r7, sp, #0
    614a:	60f8      	str	r0, [r7, #12]
    614c:	60b9      	str	r1, [r7, #8]
    614e:	4613      	mov	r3, r2
    6150:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6152:	68fb      	ldr	r3, [r7, #12]
    6154:	3b14      	subs	r3, #20
    6156:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    615a:	8b9b      	ldrh	r3, [r3, #28]
    615c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    615e:	88fb      	ldrh	r3, [r7, #6]
    6160:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6166:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6168:	68bb      	ldr	r3, [r7, #8]
    616a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    616e:	f107 0214 	add.w	r2, r7, #20
    6172:	4611      	mov	r1, r2
    6174:	4618      	mov	r0, r3
    6176:	4b06      	ldr	r3, [pc, #24]	; (6190 <i2c_m_sync_write+0x4c>)
    6178:	4798      	blx	r3
    617a:	6238      	str	r0, [r7, #32]

	if (ret) {
    617c:	6a3b      	ldr	r3, [r7, #32]
    617e:	2b00      	cmp	r3, #0
    6180:	d001      	beq.n	6186 <i2c_m_sync_write+0x42>
		return ret;
    6182:	6a3b      	ldr	r3, [r7, #32]
    6184:	e000      	b.n	6188 <i2c_m_sync_write+0x44>
	}

	return n;
    6186:	88fb      	ldrh	r3, [r7, #6]
}
    6188:	4618      	mov	r0, r3
    618a:	3728      	adds	r7, #40	; 0x28
    618c:	46bd      	mov	sp, r7
    618e:	bd80      	pop	{r7, pc}
    6190:	0000a955 	.word	0x0000a955

00006194 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6194:	b580      	push	{r7, lr}
    6196:	b084      	sub	sp, #16
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	2b00      	cmp	r3, #0
    61a2:	bf14      	ite	ne
    61a4:	2301      	movne	r3, #1
    61a6:	2300      	moveq	r3, #0
    61a8:	b2db      	uxtb	r3, r3
    61aa:	225e      	movs	r2, #94	; 0x5e
    61ac:	490c      	ldr	r1, [pc, #48]	; (61e0 <i2c_m_sync_init+0x4c>)
    61ae:	4618      	mov	r0, r3
    61b0:	4b0c      	ldr	r3, [pc, #48]	; (61e4 <i2c_m_sync_init+0x50>)
    61b2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	6839      	ldr	r1, [r7, #0]
    61b8:	4618      	mov	r0, r3
    61ba:	4b0b      	ldr	r3, [pc, #44]	; (61e8 <i2c_m_sync_init+0x54>)
    61bc:	4798      	blx	r3
    61be:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    61c0:	68fb      	ldr	r3, [r7, #12]
    61c2:	2b00      	cmp	r3, #0
    61c4:	d001      	beq.n	61ca <i2c_m_sync_init+0x36>
		return init_status;
    61c6:	68fb      	ldr	r3, [r7, #12]
    61c8:	e006      	b.n	61d8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    61ca:	687b      	ldr	r3, [r7, #4]
    61cc:	4a07      	ldr	r2, [pc, #28]	; (61ec <i2c_m_sync_init+0x58>)
    61ce:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	4a07      	ldr	r2, [pc, #28]	; (61f0 <i2c_m_sync_init+0x5c>)
    61d4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    61d6:	2300      	movs	r3, #0
}
    61d8:	4618      	mov	r0, r3
    61da:	3710      	adds	r7, #16
    61dc:	46bd      	mov	sp, r7
    61de:	bd80      	pop	{r7, pc}
    61e0:	00012a34 	.word	0x00012a34
    61e4:	00007361 	.word	0x00007361
    61e8:	0000a6f5 	.word	0x0000a6f5
    61ec:	000060f5 	.word	0x000060f5
    61f0:	00006145 	.word	0x00006145

000061f4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b082      	sub	sp, #8
    61f8:	af00      	add	r7, sp, #0
    61fa:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	4618      	mov	r0, r3
    6200:	4b03      	ldr	r3, [pc, #12]	; (6210 <i2c_m_sync_enable+0x1c>)
    6202:	4798      	blx	r3
    6204:	4603      	mov	r3, r0
}
    6206:	4618      	mov	r0, r3
    6208:	3708      	adds	r7, #8
    620a:	46bd      	mov	sp, r7
    620c:	bd80      	pop	{r7, pc}
    620e:	bf00      	nop
    6210:	0000a73d 	.word	0x0000a73d

00006214 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    6214:	b580      	push	{r7, lr}
    6216:	b082      	sub	sp, #8
    6218:	af00      	add	r7, sp, #0
    621a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	4618      	mov	r0, r3
    6220:	4b03      	ldr	r3, [pc, #12]	; (6230 <i2c_m_sync_disable+0x1c>)
    6222:	4798      	blx	r3
    6224:	4603      	mov	r3, r0
}
    6226:	4618      	mov	r0, r3
    6228:	3708      	adds	r7, #8
    622a:	46bd      	mov	sp, r7
    622c:	bd80      	pop	{r7, pc}
    622e:	bf00      	nop
    6230:	0000a77d 	.word	0x0000a77d

00006234 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    6234:	b480      	push	{r7}
    6236:	b085      	sub	sp, #20
    6238:	af00      	add	r7, sp, #0
    623a:	60f8      	str	r0, [r7, #12]
    623c:	460b      	mov	r3, r1
    623e:	607a      	str	r2, [r7, #4]
    6240:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6242:	897b      	ldrh	r3, [r7, #10]
    6244:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6248:	b21a      	sxth	r2, r3
    624a:	687b      	ldr	r3, [r7, #4]
    624c:	b21b      	sxth	r3, r3
    624e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6252:	b21b      	sxth	r3, r3
    6254:	4313      	orrs	r3, r2
    6256:	b21b      	sxth	r3, r3
    6258:	b29a      	uxth	r2, r3
    625a:	68fb      	ldr	r3, [r7, #12]
    625c:	839a      	strh	r2, [r3, #28]
    625e:	68fb      	ldr	r3, [r7, #12]
    6260:	8b9b      	ldrh	r3, [r3, #28]
}
    6262:	4618      	mov	r0, r3
    6264:	3714      	adds	r7, #20
    6266:	46bd      	mov	sp, r7
    6268:	f85d 7b04 	ldr.w	r7, [sp], #4
    626c:	4770      	bx	lr

0000626e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    626e:	b480      	push	{r7}
    6270:	b083      	sub	sp, #12
    6272:	af00      	add	r7, sp, #0
    6274:	6078      	str	r0, [r7, #4]
    6276:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	f103 0214 	add.w	r2, r3, #20
    627e:	683b      	ldr	r3, [r7, #0]
    6280:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6282:	2300      	movs	r3, #0
}
    6284:	4618      	mov	r0, r3
    6286:	370c      	adds	r7, #12
    6288:	46bd      	mov	sp, r7
    628a:	f85d 7b04 	ldr.w	r7, [sp], #4
    628e:	4770      	bx	lr

00006290 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6290:	b580      	push	{r7, lr}
    6292:	b084      	sub	sp, #16
    6294:	af00      	add	r7, sp, #0
    6296:	60f8      	str	r0, [r7, #12]
    6298:	60b9      	str	r1, [r7, #8]
    629a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	2b00      	cmp	r3, #0
    62a0:	d004      	beq.n	62ac <pwm_init+0x1c>
    62a2:	68bb      	ldr	r3, [r7, #8]
    62a4:	2b00      	cmp	r3, #0
    62a6:	d001      	beq.n	62ac <pwm_init+0x1c>
    62a8:	2301      	movs	r3, #1
    62aa:	e000      	b.n	62ae <pwm_init+0x1e>
    62ac:	2300      	movs	r3, #0
    62ae:	f003 0301 	and.w	r3, r3, #1
    62b2:	b2db      	uxtb	r3, r3
    62b4:	2233      	movs	r2, #51	; 0x33
    62b6:	490a      	ldr	r1, [pc, #40]	; (62e0 <pwm_init+0x50>)
    62b8:	4618      	mov	r0, r3
    62ba:	4b0a      	ldr	r3, [pc, #40]	; (62e4 <pwm_init+0x54>)
    62bc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	68b9      	ldr	r1, [r7, #8]
    62c2:	4618      	mov	r0, r3
    62c4:	4b08      	ldr	r3, [pc, #32]	; (62e8 <pwm_init+0x58>)
    62c6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    62c8:	68fb      	ldr	r3, [r7, #12]
    62ca:	4a08      	ldr	r2, [pc, #32]	; (62ec <pwm_init+0x5c>)
    62cc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    62ce:	68fb      	ldr	r3, [r7, #12]
    62d0:	4a07      	ldr	r2, [pc, #28]	; (62f0 <pwm_init+0x60>)
    62d2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    62d4:	2300      	movs	r3, #0
}
    62d6:	4618      	mov	r0, r3
    62d8:	3710      	adds	r7, #16
    62da:	46bd      	mov	sp, r7
    62dc:	bd80      	pop	{r7, pc}
    62de:	bf00      	nop
    62e0:	00012a50 	.word	0x00012a50
    62e4:	00007361 	.word	0x00007361
    62e8:	0000bf15 	.word	0x0000bf15
    62ec:	000062f5 	.word	0x000062f5
    62f0:	00006319 	.word	0x00006319

000062f4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6300:	68fb      	ldr	r3, [r7, #12]
    6302:	695b      	ldr	r3, [r3, #20]
    6304:	2b00      	cmp	r3, #0
    6306:	d003      	beq.n	6310 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	695b      	ldr	r3, [r3, #20]
    630c:	68f8      	ldr	r0, [r7, #12]
    630e:	4798      	blx	r3
	}
}
    6310:	bf00      	nop
    6312:	3710      	adds	r7, #16
    6314:	46bd      	mov	sp, r7
    6316:	bd80      	pop	{r7, pc}

00006318 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6318:	b580      	push	{r7, lr}
    631a:	b084      	sub	sp, #16
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6324:	68fb      	ldr	r3, [r7, #12]
    6326:	699b      	ldr	r3, [r3, #24]
    6328:	2b00      	cmp	r3, #0
    632a:	d003      	beq.n	6334 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	699b      	ldr	r3, [r3, #24]
    6330:	68f8      	ldr	r0, [r7, #12]
    6332:	4798      	blx	r3
	}
}
    6334:	bf00      	nop
    6336:	3710      	adds	r7, #16
    6338:	46bd      	mov	sp, r7
    633a:	bd80      	pop	{r7, pc}

0000633c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
    6344:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	2b00      	cmp	r3, #0
    634a:	d004      	beq.n	6356 <qspi_sync_init+0x1a>
    634c:	683b      	ldr	r3, [r7, #0]
    634e:	2b00      	cmp	r3, #0
    6350:	d001      	beq.n	6356 <qspi_sync_init+0x1a>
    6352:	2301      	movs	r3, #1
    6354:	e000      	b.n	6358 <qspi_sync_init+0x1c>
    6356:	2300      	movs	r3, #0
    6358:	f003 0301 	and.w	r3, r3, #1
    635c:	b2db      	uxtb	r3, r3
    635e:	2231      	movs	r2, #49	; 0x31
    6360:	4906      	ldr	r1, [pc, #24]	; (637c <qspi_sync_init+0x40>)
    6362:	4618      	mov	r0, r3
    6364:	4b06      	ldr	r3, [pc, #24]	; (6380 <qspi_sync_init+0x44>)
    6366:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	6839      	ldr	r1, [r7, #0]
    636c:	4618      	mov	r0, r3
    636e:	4b05      	ldr	r3, [pc, #20]	; (6384 <qspi_sync_init+0x48>)
    6370:	4798      	blx	r3
    6372:	4603      	mov	r3, r0
}
    6374:	4618      	mov	r0, r3
    6376:	3708      	adds	r7, #8
    6378:	46bd      	mov	sp, r7
    637a:	bd80      	pop	{r7, pc}
    637c:	00012a68 	.word	0x00012a68
    6380:	00007361 	.word	0x00007361
    6384:	000098d5 	.word	0x000098d5

00006388 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6388:	b580      	push	{r7, lr}
    638a:	b082      	sub	sp, #8
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	2b00      	cmp	r3, #0
    6394:	bf14      	ite	ne
    6396:	2301      	movne	r3, #1
    6398:	2300      	moveq	r3, #0
    639a:	b2db      	uxtb	r3, r3
    639c:	223f      	movs	r2, #63	; 0x3f
    639e:	4906      	ldr	r1, [pc, #24]	; (63b8 <qspi_sync_enable+0x30>)
    63a0:	4618      	mov	r0, r3
    63a2:	4b06      	ldr	r3, [pc, #24]	; (63bc <qspi_sync_enable+0x34>)
    63a4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	4618      	mov	r0, r3
    63aa:	4b05      	ldr	r3, [pc, #20]	; (63c0 <qspi_sync_enable+0x38>)
    63ac:	4798      	blx	r3
    63ae:	4603      	mov	r3, r0
}
    63b0:	4618      	mov	r0, r3
    63b2:	3708      	adds	r7, #8
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	00012a68 	.word	0x00012a68
    63bc:	00007361 	.word	0x00007361
    63c0:	00009949 	.word	0x00009949

000063c4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    63c4:	b580      	push	{r7, lr}
    63c6:	b082      	sub	sp, #8
    63c8:	af00      	add	r7, sp, #0
    63ca:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    63cc:	687b      	ldr	r3, [r7, #4]
    63ce:	2b00      	cmp	r3, #0
    63d0:	bf14      	ite	ne
    63d2:	2301      	movne	r3, #1
    63d4:	2300      	moveq	r3, #0
    63d6:	b2db      	uxtb	r3, r3
    63d8:	2246      	movs	r2, #70	; 0x46
    63da:	4906      	ldr	r1, [pc, #24]	; (63f4 <qspi_sync_disable+0x30>)
    63dc:	4618      	mov	r0, r3
    63de:	4b06      	ldr	r3, [pc, #24]	; (63f8 <qspi_sync_disable+0x34>)
    63e0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	4618      	mov	r0, r3
    63e6:	4b05      	ldr	r3, [pc, #20]	; (63fc <qspi_sync_disable+0x38>)
    63e8:	4798      	blx	r3
    63ea:	4603      	mov	r3, r0
}
    63ec:	4618      	mov	r0, r3
    63ee:	3708      	adds	r7, #8
    63f0:	46bd      	mov	sp, r7
    63f2:	bd80      	pop	{r7, pc}
    63f4:	00012a68 	.word	0x00012a68
    63f8:	00007361 	.word	0x00007361
    63fc:	0000996d 	.word	0x0000996d

00006400 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    6400:	b580      	push	{r7, lr}
    6402:	b082      	sub	sp, #8
    6404:	af00      	add	r7, sp, #0
    6406:	6078      	str	r0, [r7, #4]
    6408:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	2b00      	cmp	r3, #0
    640e:	d004      	beq.n	641a <qspi_sync_serial_run_command+0x1a>
    6410:	683b      	ldr	r3, [r7, #0]
    6412:	2b00      	cmp	r3, #0
    6414:	d001      	beq.n	641a <qspi_sync_serial_run_command+0x1a>
    6416:	2301      	movs	r3, #1
    6418:	e000      	b.n	641c <qspi_sync_serial_run_command+0x1c>
    641a:	2300      	movs	r3, #0
    641c:	f003 0301 	and.w	r3, r3, #1
    6420:	b2db      	uxtb	r3, r3
    6422:	224d      	movs	r2, #77	; 0x4d
    6424:	4906      	ldr	r1, [pc, #24]	; (6440 <qspi_sync_serial_run_command+0x40>)
    6426:	4618      	mov	r0, r3
    6428:	4b06      	ldr	r3, [pc, #24]	; (6444 <qspi_sync_serial_run_command+0x44>)
    642a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	6839      	ldr	r1, [r7, #0]
    6430:	4618      	mov	r0, r3
    6432:	4b05      	ldr	r3, [pc, #20]	; (6448 <qspi_sync_serial_run_command+0x48>)
    6434:	4798      	blx	r3
    6436:	4603      	mov	r3, r0
}
    6438:	4618      	mov	r0, r3
    643a:	3708      	adds	r7, #8
    643c:	46bd      	mov	sp, r7
    643e:	bd80      	pop	{r7, pc}
    6440:	00012a68 	.word	0x00012a68
    6444:	00007361 	.word	0x00007361
    6448:	00009ab9 	.word	0x00009ab9

0000644c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    644c:	b580      	push	{r7, lr}
    644e:	b084      	sub	sp, #16
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    6454:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6456:	2300      	movs	r3, #0
    6458:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	2b00      	cmp	r3, #0
    645e:	d004      	beq.n	646a <spi_m_sync_init+0x1e>
    6460:	683b      	ldr	r3, [r7, #0]
    6462:	2b00      	cmp	r3, #0
    6464:	d001      	beq.n	646a <spi_m_sync_init+0x1e>
    6466:	2301      	movs	r3, #1
    6468:	e000      	b.n	646c <spi_m_sync_init+0x20>
    646a:	2300      	movs	r3, #0
    646c:	f003 0301 	and.w	r3, r3, #1
    6470:	b2db      	uxtb	r3, r3
    6472:	2240      	movs	r2, #64	; 0x40
    6474:	4910      	ldr	r1, [pc, #64]	; (64b8 <spi_m_sync_init+0x6c>)
    6476:	4618      	mov	r0, r3
    6478:	4b10      	ldr	r3, [pc, #64]	; (64bc <spi_m_sync_init+0x70>)
    647a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	683a      	ldr	r2, [r7, #0]
    6480:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	3304      	adds	r3, #4
    6486:	6839      	ldr	r1, [r7, #0]
    6488:	4618      	mov	r0, r3
    648a:	4b0d      	ldr	r3, [pc, #52]	; (64c0 <spi_m_sync_init+0x74>)
    648c:	4798      	blx	r3
    648e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    6490:	68fb      	ldr	r3, [r7, #12]
    6492:	2b00      	cmp	r3, #0
    6494:	da01      	bge.n	649a <spi_m_sync_init+0x4e>
		return rc;
    6496:	68fb      	ldr	r3, [r7, #12]
    6498:	e00a      	b.n	64b0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    64a0:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	4a07      	ldr	r2, [pc, #28]	; (64c4 <spi_m_sync_init+0x78>)
    64a6:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	4a07      	ldr	r2, [pc, #28]	; (64c8 <spi_m_sync_init+0x7c>)
    64ac:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    64ae:	2300      	movs	r3, #0
}
    64b0:	4618      	mov	r0, r3
    64b2:	3710      	adds	r7, #16
    64b4:	46bd      	mov	sp, r7
    64b6:	bd80      	pop	{r7, pc}
    64b8:	00012a84 	.word	0x00012a84
    64bc:	00007361 	.word	0x00007361
    64c0:	0000ade9 	.word	0x0000ade9
    64c4:	000064cd 	.word	0x000064cd
    64c8:	00006525 	.word	0x00006525

000064cc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b088      	sub	sp, #32
    64d0:	af00      	add	r7, sp, #0
    64d2:	60f8      	str	r0, [r7, #12]
    64d4:	60b9      	str	r1, [r7, #8]
    64d6:	4613      	mov	r3, r2
    64d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	2b00      	cmp	r3, #0
    64de:	bf14      	ite	ne
    64e0:	2301      	movne	r3, #1
    64e2:	2300      	moveq	r3, #0
    64e4:	b2db      	uxtb	r3, r3
    64e6:	2287      	movs	r2, #135	; 0x87
    64e8:	490b      	ldr	r1, [pc, #44]	; (6518 <_spi_m_sync_io_read+0x4c>)
    64ea:	4618      	mov	r0, r3
    64ec:	4b0b      	ldr	r3, [pc, #44]	; (651c <_spi_m_sync_io_read+0x50>)
    64ee:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    64f0:	68fb      	ldr	r3, [r7, #12]
    64f2:	3b0c      	subs	r3, #12
    64f4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    64f6:	68bb      	ldr	r3, [r7, #8]
    64f8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    64fa:	2300      	movs	r3, #0
    64fc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    64fe:	88fb      	ldrh	r3, [r7, #6]
    6500:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6502:	f107 0310 	add.w	r3, r7, #16
    6506:	4619      	mov	r1, r3
    6508:	69f8      	ldr	r0, [r7, #28]
    650a:	4b05      	ldr	r3, [pc, #20]	; (6520 <_spi_m_sync_io_read+0x54>)
    650c:	4798      	blx	r3
    650e:	4603      	mov	r3, r0
}
    6510:	4618      	mov	r0, r3
    6512:	3720      	adds	r7, #32
    6514:	46bd      	mov	sp, r7
    6516:	bd80      	pop	{r7, pc}
    6518:	00012a84 	.word	0x00012a84
    651c:	00007361 	.word	0x00007361
    6520:	0000657d 	.word	0x0000657d

00006524 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6524:	b580      	push	{r7, lr}
    6526:	b088      	sub	sp, #32
    6528:	af00      	add	r7, sp, #0
    652a:	60f8      	str	r0, [r7, #12]
    652c:	60b9      	str	r1, [r7, #8]
    652e:	4613      	mov	r3, r2
    6530:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6532:	68fb      	ldr	r3, [r7, #12]
    6534:	2b00      	cmp	r3, #0
    6536:	bf14      	ite	ne
    6538:	2301      	movne	r3, #1
    653a:	2300      	moveq	r3, #0
    653c:	b2db      	uxtb	r3, r3
    653e:	22a3      	movs	r2, #163	; 0xa3
    6540:	490b      	ldr	r1, [pc, #44]	; (6570 <_spi_m_sync_io_write+0x4c>)
    6542:	4618      	mov	r0, r3
    6544:	4b0b      	ldr	r3, [pc, #44]	; (6574 <_spi_m_sync_io_write+0x50>)
    6546:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6548:	68fb      	ldr	r3, [r7, #12]
    654a:	3b0c      	subs	r3, #12
    654c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    654e:	2300      	movs	r3, #0
    6550:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6552:	68bb      	ldr	r3, [r7, #8]
    6554:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6556:	88fb      	ldrh	r3, [r7, #6]
    6558:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    655a:	f107 0310 	add.w	r3, r7, #16
    655e:	4619      	mov	r1, r3
    6560:	69f8      	ldr	r0, [r7, #28]
    6562:	4b05      	ldr	r3, [pc, #20]	; (6578 <_spi_m_sync_io_write+0x54>)
    6564:	4798      	blx	r3
    6566:	4603      	mov	r3, r0
}
    6568:	4618      	mov	r0, r3
    656a:	3720      	adds	r7, #32
    656c:	46bd      	mov	sp, r7
    656e:	bd80      	pop	{r7, pc}
    6570:	00012a84 	.word	0x00012a84
    6574:	00007361 	.word	0x00007361
    6578:	0000657d 	.word	0x0000657d

0000657c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    657c:	b580      	push	{r7, lr}
    657e:	b086      	sub	sp, #24
    6580:	af00      	add	r7, sp, #0
    6582:	6078      	str	r0, [r7, #4]
    6584:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	2b00      	cmp	r3, #0
    658a:	d004      	beq.n	6596 <spi_m_sync_transfer+0x1a>
    658c:	683b      	ldr	r3, [r7, #0]
    658e:	2b00      	cmp	r3, #0
    6590:	d001      	beq.n	6596 <spi_m_sync_transfer+0x1a>
    6592:	2301      	movs	r3, #1
    6594:	e000      	b.n	6598 <spi_m_sync_transfer+0x1c>
    6596:	2300      	movs	r3, #0
    6598:	f003 0301 	and.w	r3, r3, #1
    659c:	b2db      	uxtb	r3, r3
    659e:	22b3      	movs	r2, #179	; 0xb3
    65a0:	490c      	ldr	r1, [pc, #48]	; (65d4 <spi_m_sync_transfer+0x58>)
    65a2:	4618      	mov	r0, r3
    65a4:	4b0c      	ldr	r3, [pc, #48]	; (65d8 <spi_m_sync_transfer+0x5c>)
    65a6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    65a8:	683b      	ldr	r3, [r7, #0]
    65aa:	681b      	ldr	r3, [r3, #0]
    65ac:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    65ae:	683b      	ldr	r3, [r7, #0]
    65b0:	685b      	ldr	r3, [r3, #4]
    65b2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    65b4:	683b      	ldr	r3, [r7, #0]
    65b6:	689b      	ldr	r3, [r3, #8]
    65b8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	3304      	adds	r3, #4
    65be:	f107 020c 	add.w	r2, r7, #12
    65c2:	4611      	mov	r1, r2
    65c4:	4618      	mov	r0, r3
    65c6:	4b05      	ldr	r3, [pc, #20]	; (65dc <spi_m_sync_transfer+0x60>)
    65c8:	4798      	blx	r3
    65ca:	4603      	mov	r3, r0
}
    65cc:	4618      	mov	r0, r3
    65ce:	3718      	adds	r7, #24
    65d0:	46bd      	mov	sp, r7
    65d2:	bd80      	pop	{r7, pc}
    65d4:	00012a84 	.word	0x00012a84
    65d8:	00007361 	.word	0x00007361
    65dc:	0000b049 	.word	0x0000b049

000065e0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    65e0:	b480      	push	{r7}
    65e2:	b083      	sub	sp, #12
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	681b      	ldr	r3, [r3, #0]
}
    65ec:	4618      	mov	r0, r3
    65ee:	370c      	adds	r7, #12
    65f0:	46bd      	mov	sp, r7
    65f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65f6:	4770      	bx	lr

000065f8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    65f8:	b480      	push	{r7}
    65fa:	b083      	sub	sp, #12
    65fc:	af00      	add	r7, sp, #0
    65fe:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6600:	687b      	ldr	r3, [r7, #4]
    6602:	2b00      	cmp	r3, #0
    6604:	d002      	beq.n	660c <list_get_next_element+0x14>
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	e000      	b.n	660e <list_get_next_element+0x16>
    660c:	2300      	movs	r3, #0
}
    660e:	4618      	mov	r0, r3
    6610:	370c      	adds	r7, #12
    6612:	46bd      	mov	sp, r7
    6614:	f85d 7b04 	ldr.w	r7, [sp], #4
    6618:	4770      	bx	lr
	...

0000661c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    661c:	b580      	push	{r7, lr}
    661e:	b084      	sub	sp, #16
    6620:	af00      	add	r7, sp, #0
    6622:	60f8      	str	r0, [r7, #12]
    6624:	60b9      	str	r1, [r7, #8]
    6626:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    6628:	68fb      	ldr	r3, [r7, #12]
    662a:	2b00      	cmp	r3, #0
    662c:	d007      	beq.n	663e <timer_init+0x22>
    662e:	68bb      	ldr	r3, [r7, #8]
    6630:	2b00      	cmp	r3, #0
    6632:	d004      	beq.n	663e <timer_init+0x22>
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	2b00      	cmp	r3, #0
    6638:	d001      	beq.n	663e <timer_init+0x22>
    663a:	2301      	movs	r3, #1
    663c:	e000      	b.n	6640 <timer_init+0x24>
    663e:	2300      	movs	r3, #0
    6640:	f003 0301 	and.w	r3, r3, #1
    6644:	b2db      	uxtb	r3, r3
    6646:	223b      	movs	r2, #59	; 0x3b
    6648:	490c      	ldr	r1, [pc, #48]	; (667c <timer_init+0x60>)
    664a:	4618      	mov	r0, r3
    664c:	4b0c      	ldr	r3, [pc, #48]	; (6680 <timer_init+0x64>)
    664e:	4798      	blx	r3
	descr->func = func;
    6650:	68fb      	ldr	r3, [r7, #12]
    6652:	687a      	ldr	r2, [r7, #4]
    6654:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    6656:	68fb      	ldr	r3, [r7, #12]
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	681b      	ldr	r3, [r3, #0]
    665c:	68fa      	ldr	r2, [r7, #12]
    665e:	3204      	adds	r2, #4
    6660:	68b9      	ldr	r1, [r7, #8]
    6662:	4610      	mov	r0, r2
    6664:	4798      	blx	r3
	descr->time                           = 0;
    6666:	68fb      	ldr	r3, [r7, #12]
    6668:	2200      	movs	r2, #0
    666a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    666c:	68fb      	ldr	r3, [r7, #12]
    666e:	4a05      	ldr	r2, [pc, #20]	; (6684 <timer_init+0x68>)
    6670:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    6672:	2300      	movs	r3, #0
}
    6674:	4618      	mov	r0, r3
    6676:	3710      	adds	r7, #16
    6678:	46bd      	mov	sp, r7
    667a:	bd80      	pop	{r7, pc}
    667c:	00012aa0 	.word	0x00012aa0
    6680:	00007361 	.word	0x00007361
    6684:	000069a1 	.word	0x000069a1

00006688 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    6688:	b580      	push	{r7, lr}
    668a:	b082      	sub	sp, #8
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	2b00      	cmp	r3, #0
    6694:	d005      	beq.n	66a2 <timer_start+0x1a>
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	681b      	ldr	r3, [r3, #0]
    669a:	2b00      	cmp	r3, #0
    669c:	d001      	beq.n	66a2 <timer_start+0x1a>
    669e:	2301      	movs	r3, #1
    66a0:	e000      	b.n	66a4 <timer_start+0x1c>
    66a2:	2300      	movs	r3, #0
    66a4:	f003 0301 	and.w	r3, r3, #1
    66a8:	b2db      	uxtb	r3, r3
    66aa:	2254      	movs	r2, #84	; 0x54
    66ac:	490e      	ldr	r1, [pc, #56]	; (66e8 <timer_start+0x60>)
    66ae:	4618      	mov	r0, r3
    66b0:	4b0e      	ldr	r3, [pc, #56]	; (66ec <timer_start+0x64>)
    66b2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	681b      	ldr	r3, [r3, #0]
    66b8:	699b      	ldr	r3, [r3, #24]
    66ba:	687a      	ldr	r2, [r7, #4]
    66bc:	3204      	adds	r2, #4
    66be:	4610      	mov	r0, r2
    66c0:	4798      	blx	r3
    66c2:	4603      	mov	r3, r0
    66c4:	2b00      	cmp	r3, #0
    66c6:	d002      	beq.n	66ce <timer_start+0x46>
		return ERR_DENIED;
    66c8:	f06f 0310 	mvn.w	r3, #16
    66cc:	e007      	b.n	66de <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    66ce:	687b      	ldr	r3, [r7, #4]
    66d0:	681b      	ldr	r3, [r3, #0]
    66d2:	689b      	ldr	r3, [r3, #8]
    66d4:	687a      	ldr	r2, [r7, #4]
    66d6:	3204      	adds	r2, #4
    66d8:	4610      	mov	r0, r2
    66da:	4798      	blx	r3

	return ERR_NONE;
    66dc:	2300      	movs	r3, #0
}
    66de:	4618      	mov	r0, r3
    66e0:	3708      	adds	r7, #8
    66e2:	46bd      	mov	sp, r7
    66e4:	bd80      	pop	{r7, pc}
    66e6:	bf00      	nop
    66e8:	00012aa0 	.word	0x00012aa0
    66ec:	00007361 	.word	0x00007361

000066f0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    66f0:	b580      	push	{r7, lr}
    66f2:	b084      	sub	sp, #16
    66f4:	af00      	add	r7, sp, #0
    66f6:	6078      	str	r0, [r7, #4]
    66f8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d008      	beq.n	6712 <timer_add_task+0x22>
    6700:	683b      	ldr	r3, [r7, #0]
    6702:	2b00      	cmp	r3, #0
    6704:	d005      	beq.n	6712 <timer_add_task+0x22>
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	681b      	ldr	r3, [r3, #0]
    670a:	2b00      	cmp	r3, #0
    670c:	d001      	beq.n	6712 <timer_add_task+0x22>
    670e:	2301      	movs	r3, #1
    6710:	e000      	b.n	6714 <timer_add_task+0x24>
    6712:	2300      	movs	r3, #0
    6714:	f003 0301 	and.w	r3, r3, #1
    6718:	b2db      	uxtb	r3, r3
    671a:	227b      	movs	r2, #123	; 0x7b
    671c:	492f      	ldr	r1, [pc, #188]	; (67dc <timer_add_task+0xec>)
    671e:	4618      	mov	r0, r3
    6720:	4b2f      	ldr	r3, [pc, #188]	; (67e0 <timer_add_task+0xf0>)
    6722:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6724:	687b      	ldr	r3, [r7, #4]
    6726:	7f1b      	ldrb	r3, [r3, #28]
    6728:	b2db      	uxtb	r3, r3
    672a:	f043 0301 	orr.w	r3, r3, #1
    672e:	b2da      	uxtb	r2, r3
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	3318      	adds	r3, #24
    6738:	6839      	ldr	r1, [r7, #0]
    673a:	4618      	mov	r0, r3
    673c:	4b29      	ldr	r3, [pc, #164]	; (67e4 <timer_add_task+0xf4>)
    673e:	4798      	blx	r3
    6740:	4603      	mov	r3, r0
    6742:	2b00      	cmp	r3, #0
    6744:	d00f      	beq.n	6766 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6746:	687b      	ldr	r3, [r7, #4]
    6748:	7f1b      	ldrb	r3, [r3, #28]
    674a:	b2db      	uxtb	r3, r3
    674c:	f023 0301 	bic.w	r3, r3, #1
    6750:	b2da      	uxtb	r2, r3
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6756:	2280      	movs	r2, #128	; 0x80
    6758:	4920      	ldr	r1, [pc, #128]	; (67dc <timer_add_task+0xec>)
    675a:	2000      	movs	r0, #0
    675c:	4b20      	ldr	r3, [pc, #128]	; (67e0 <timer_add_task+0xf0>)
    675e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6760:	f06f 0311 	mvn.w	r3, #17
    6764:	e035      	b.n	67d2 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    6766:	687b      	ldr	r3, [r7, #4]
    6768:	695a      	ldr	r2, [r3, #20]
    676a:	683b      	ldr	r3, [r7, #0]
    676c:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    676e:	687b      	ldr	r3, [r7, #4]
    6770:	f103 0018 	add.w	r0, r3, #24
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	695b      	ldr	r3, [r3, #20]
    6778:	461a      	mov	r2, r3
    677a:	6839      	ldr	r1, [r7, #0]
    677c:	4b1a      	ldr	r3, [pc, #104]	; (67e8 <timer_add_task+0xf8>)
    677e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	7f1b      	ldrb	r3, [r3, #28]
    6784:	b2db      	uxtb	r3, r3
    6786:	f023 0301 	bic.w	r3, r3, #1
    678a:	b2da      	uxtb	r2, r3
    678c:	687b      	ldr	r3, [r7, #4]
    678e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	7f1b      	ldrb	r3, [r3, #28]
    6794:	b2db      	uxtb	r3, r3
    6796:	f003 0302 	and.w	r3, r3, #2
    679a:	2b00      	cmp	r3, #0
    679c:	d018      	beq.n	67d0 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    679e:	f107 030c 	add.w	r3, r7, #12
    67a2:	4618      	mov	r0, r3
    67a4:	4b11      	ldr	r3, [pc, #68]	; (67ec <timer_add_task+0xfc>)
    67a6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	7f1b      	ldrb	r3, [r3, #28]
    67ac:	b2db      	uxtb	r3, r3
    67ae:	f023 0302 	bic.w	r3, r3, #2
    67b2:	b2da      	uxtb	r2, r3
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	681b      	ldr	r3, [r3, #0]
    67bc:	69db      	ldr	r3, [r3, #28]
    67be:	687a      	ldr	r2, [r7, #4]
    67c0:	3204      	adds	r2, #4
    67c2:	4610      	mov	r0, r2
    67c4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    67c6:	f107 030c 	add.w	r3, r7, #12
    67ca:	4618      	mov	r0, r3
    67cc:	4b08      	ldr	r3, [pc, #32]	; (67f0 <timer_add_task+0x100>)
    67ce:	4798      	blx	r3
	}

	return ERR_NONE;
    67d0:	2300      	movs	r3, #0
}
    67d2:	4618      	mov	r0, r3
    67d4:	3710      	adds	r7, #16
    67d6:	46bd      	mov	sp, r7
    67d8:	bd80      	pop	{r7, pc}
    67da:	bf00      	nop
    67dc:	00012aa0 	.word	0x00012aa0
    67e0:	00007361 	.word	0x00007361
    67e4:	00007389 	.word	0x00007389
    67e8:	000068f1 	.word	0x000068f1
    67ec:	0000f3d1 	.word	0x0000f3d1
    67f0:	0000f3f7 	.word	0x0000f3f7

000067f4 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b084      	sub	sp, #16
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
    67fc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	2b00      	cmp	r3, #0
    6802:	d008      	beq.n	6816 <timer_remove_task+0x22>
    6804:	683b      	ldr	r3, [r7, #0]
    6806:	2b00      	cmp	r3, #0
    6808:	d005      	beq.n	6816 <timer_remove_task+0x22>
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	681b      	ldr	r3, [r3, #0]
    680e:	2b00      	cmp	r3, #0
    6810:	d001      	beq.n	6816 <timer_remove_task+0x22>
    6812:	2301      	movs	r3, #1
    6814:	e000      	b.n	6818 <timer_remove_task+0x24>
    6816:	2300      	movs	r3, #0
    6818:	f003 0301 	and.w	r3, r3, #1
    681c:	b2db      	uxtb	r3, r3
    681e:	2296      	movs	r2, #150	; 0x96
    6820:	492d      	ldr	r1, [pc, #180]	; (68d8 <timer_remove_task+0xe4>)
    6822:	4618      	mov	r0, r3
    6824:	4b2d      	ldr	r3, [pc, #180]	; (68dc <timer_remove_task+0xe8>)
    6826:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	7f1b      	ldrb	r3, [r3, #28]
    682c:	b2db      	uxtb	r3, r3
    682e:	f043 0301 	orr.w	r3, r3, #1
    6832:	b2da      	uxtb	r2, r3
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	3318      	adds	r3, #24
    683c:	6839      	ldr	r1, [r7, #0]
    683e:	4618      	mov	r0, r3
    6840:	4b27      	ldr	r3, [pc, #156]	; (68e0 <timer_remove_task+0xec>)
    6842:	4798      	blx	r3
    6844:	4603      	mov	r3, r0
    6846:	f083 0301 	eor.w	r3, r3, #1
    684a:	b2db      	uxtb	r3, r3
    684c:	2b00      	cmp	r3, #0
    684e:	d00f      	beq.n	6870 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	7f1b      	ldrb	r3, [r3, #28]
    6854:	b2db      	uxtb	r3, r3
    6856:	f023 0301 	bic.w	r3, r3, #1
    685a:	b2da      	uxtb	r2, r3
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6860:	229b      	movs	r2, #155	; 0x9b
    6862:	491d      	ldr	r1, [pc, #116]	; (68d8 <timer_remove_task+0xe4>)
    6864:	2000      	movs	r0, #0
    6866:	4b1d      	ldr	r3, [pc, #116]	; (68dc <timer_remove_task+0xe8>)
    6868:	4798      	blx	r3
		return ERR_NOT_FOUND;
    686a:	f06f 0309 	mvn.w	r3, #9
    686e:	e02e      	b.n	68ce <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	3318      	adds	r3, #24
    6874:	6839      	ldr	r1, [r7, #0]
    6876:	4618      	mov	r0, r3
    6878:	4b1a      	ldr	r3, [pc, #104]	; (68e4 <timer_remove_task+0xf0>)
    687a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	7f1b      	ldrb	r3, [r3, #28]
    6880:	b2db      	uxtb	r3, r3
    6882:	f023 0301 	bic.w	r3, r3, #1
    6886:	b2da      	uxtb	r2, r3
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	7f1b      	ldrb	r3, [r3, #28]
    6890:	b2db      	uxtb	r3, r3
    6892:	f003 0302 	and.w	r3, r3, #2
    6896:	2b00      	cmp	r3, #0
    6898:	d018      	beq.n	68cc <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    689a:	f107 030c 	add.w	r3, r7, #12
    689e:	4618      	mov	r0, r3
    68a0:	4b11      	ldr	r3, [pc, #68]	; (68e8 <timer_remove_task+0xf4>)
    68a2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	7f1b      	ldrb	r3, [r3, #28]
    68a8:	b2db      	uxtb	r3, r3
    68aa:	f023 0302 	bic.w	r3, r3, #2
    68ae:	b2da      	uxtb	r2, r3
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	681b      	ldr	r3, [r3, #0]
    68b8:	69db      	ldr	r3, [r3, #28]
    68ba:	687a      	ldr	r2, [r7, #4]
    68bc:	3204      	adds	r2, #4
    68be:	4610      	mov	r0, r2
    68c0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    68c2:	f107 030c 	add.w	r3, r7, #12
    68c6:	4618      	mov	r0, r3
    68c8:	4b08      	ldr	r3, [pc, #32]	; (68ec <timer_remove_task+0xf8>)
    68ca:	4798      	blx	r3
	}

	return ERR_NONE;
    68cc:	2300      	movs	r3, #0
}
    68ce:	4618      	mov	r0, r3
    68d0:	3710      	adds	r7, #16
    68d2:	46bd      	mov	sp, r7
    68d4:	bd80      	pop	{r7, pc}
    68d6:	bf00      	nop
    68d8:	00012aa0 	.word	0x00012aa0
    68dc:	00007361 	.word	0x00007361
    68e0:	00007389 	.word	0x00007389
    68e4:	000074eb 	.word	0x000074eb
    68e8:	0000f3d1 	.word	0x0000f3d1
    68ec:	0000f3f7 	.word	0x0000f3f7

000068f0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b088      	sub	sp, #32
    68f4:	af00      	add	r7, sp, #0
    68f6:	60f8      	str	r0, [r7, #12]
    68f8:	60b9      	str	r1, [r7, #8]
    68fa:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    68fc:	2300      	movs	r3, #0
    68fe:	61bb      	str	r3, [r7, #24]
    6900:	68f8      	ldr	r0, [r7, #12]
    6902:	4b23      	ldr	r3, [pc, #140]	; (6990 <timer_add_timer_task+0xa0>)
    6904:	4798      	blx	r3
    6906:	6138      	str	r0, [r7, #16]

	if (!head) {
    6908:	693b      	ldr	r3, [r7, #16]
    690a:	2b00      	cmp	r3, #0
    690c:	d104      	bne.n	6918 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    690e:	68b9      	ldr	r1, [r7, #8]
    6910:	68f8      	ldr	r0, [r7, #12]
    6912:	4b20      	ldr	r3, [pc, #128]	; (6994 <timer_add_timer_task+0xa4>)
    6914:	4798      	blx	r3
		return;
    6916:	e037      	b.n	6988 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6918:	693b      	ldr	r3, [r7, #16]
    691a:	61fb      	str	r3, [r7, #28]
    691c:	e022      	b.n	6964 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    691e:	69fb      	ldr	r3, [r7, #28]
    6920:	685a      	ldr	r2, [r3, #4]
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	429a      	cmp	r2, r3
    6926:	d808      	bhi.n	693a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    6928:	69fb      	ldr	r3, [r7, #28]
    692a:	689a      	ldr	r2, [r3, #8]
    692c:	69fb      	ldr	r3, [r7, #28]
    692e:	6859      	ldr	r1, [r3, #4]
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	1acb      	subs	r3, r1, r3
    6934:	4413      	add	r3, r2
    6936:	617b      	str	r3, [r7, #20]
    6938:	e009      	b.n	694e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    693a:	69fb      	ldr	r3, [r7, #28]
    693c:	689a      	ldr	r2, [r3, #8]
    693e:	69fb      	ldr	r3, [r7, #28]
    6940:	685b      	ldr	r3, [r3, #4]
    6942:	441a      	add	r2, r3
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	425b      	negs	r3, r3
    6948:	4413      	add	r3, r2
    694a:	3301      	adds	r3, #1
    694c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    694e:	68bb      	ldr	r3, [r7, #8]
    6950:	689a      	ldr	r2, [r3, #8]
    6952:	697b      	ldr	r3, [r7, #20]
    6954:	429a      	cmp	r2, r3
    6956:	d909      	bls.n	696c <timer_add_timer_task+0x7c>
			break;
		prev = it;
    6958:	69fb      	ldr	r3, [r7, #28]
    695a:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    695c:	69f8      	ldr	r0, [r7, #28]
    695e:	4b0e      	ldr	r3, [pc, #56]	; (6998 <timer_add_timer_task+0xa8>)
    6960:	4798      	blx	r3
    6962:	61f8      	str	r0, [r7, #28]
    6964:	69fb      	ldr	r3, [r7, #28]
    6966:	2b00      	cmp	r3, #0
    6968:	d1d9      	bne.n	691e <timer_add_timer_task+0x2e>
    696a:	e000      	b.n	696e <timer_add_timer_task+0x7e>
			break;
    696c:	bf00      	nop
	}

	if (it == head) {
    696e:	69fa      	ldr	r2, [r7, #28]
    6970:	693b      	ldr	r3, [r7, #16]
    6972:	429a      	cmp	r2, r3
    6974:	d104      	bne.n	6980 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    6976:	68b9      	ldr	r1, [r7, #8]
    6978:	68f8      	ldr	r0, [r7, #12]
    697a:	4b06      	ldr	r3, [pc, #24]	; (6994 <timer_add_timer_task+0xa4>)
    697c:	4798      	blx	r3
    697e:	e003      	b.n	6988 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    6980:	68b9      	ldr	r1, [r7, #8]
    6982:	69b8      	ldr	r0, [r7, #24]
    6984:	4b05      	ldr	r3, [pc, #20]	; (699c <timer_add_timer_task+0xac>)
    6986:	4798      	blx	r3
	}
}
    6988:	3720      	adds	r7, #32
    698a:	46bd      	mov	sp, r7
    698c:	bd80      	pop	{r7, pc}
    698e:	bf00      	nop
    6990:	000065e1 	.word	0x000065e1
    6994:	000073c1 	.word	0x000073c1
    6998:	000065f9 	.word	0x000065f9
    699c:	00007419 	.word	0x00007419

000069a0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b086      	sub	sp, #24
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	3b04      	subs	r3, #4
    69ac:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    69ae:	693b      	ldr	r3, [r7, #16]
    69b0:	3318      	adds	r3, #24
    69b2:	4618      	mov	r0, r3
    69b4:	4b27      	ldr	r3, [pc, #156]	; (6a54 <timer_process_counted+0xb4>)
    69b6:	4798      	blx	r3
    69b8:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    69ba:	693b      	ldr	r3, [r7, #16]
    69bc:	695b      	ldr	r3, [r3, #20]
    69be:	1c5a      	adds	r2, r3, #1
    69c0:	693b      	ldr	r3, [r7, #16]
    69c2:	615a      	str	r2, [r3, #20]
    69c4:	693b      	ldr	r3, [r7, #16]
    69c6:	695b      	ldr	r3, [r3, #20]
    69c8:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    69ca:	693b      	ldr	r3, [r7, #16]
    69cc:	7f1b      	ldrb	r3, [r3, #28]
    69ce:	b2db      	uxtb	r3, r3
    69d0:	f003 0301 	and.w	r3, r3, #1
    69d4:	2b00      	cmp	r3, #0
    69d6:	d106      	bne.n	69e6 <timer_process_counted+0x46>
    69d8:	693b      	ldr	r3, [r7, #16]
    69da:	7f1b      	ldrb	r3, [r3, #28]
    69dc:	b2db      	uxtb	r3, r3
    69de:	f003 0302 	and.w	r3, r3, #2
    69e2:	2b00      	cmp	r3, #0
    69e4:	d027      	beq.n	6a36 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    69e6:	693b      	ldr	r3, [r7, #16]
    69e8:	7f1b      	ldrb	r3, [r3, #28]
    69ea:	b2db      	uxtb	r3, r3
    69ec:	f043 0302 	orr.w	r3, r3, #2
    69f0:	b2da      	uxtb	r2, r3
    69f2:	693b      	ldr	r3, [r7, #16]
    69f4:	771a      	strb	r2, [r3, #28]
		return;
    69f6:	e029      	b.n	6a4c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    69f8:	697b      	ldr	r3, [r7, #20]
    69fa:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    69fc:	693b      	ldr	r3, [r7, #16]
    69fe:	3318      	adds	r3, #24
    6a00:	4618      	mov	r0, r3
    6a02:	4b15      	ldr	r3, [pc, #84]	; (6a58 <timer_process_counted+0xb8>)
    6a04:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6a06:	68bb      	ldr	r3, [r7, #8]
    6a08:	7c1b      	ldrb	r3, [r3, #16]
    6a0a:	2b01      	cmp	r3, #1
    6a0c:	d109      	bne.n	6a22 <timer_process_counted+0x82>
			tmp->time_label = time;
    6a0e:	68bb      	ldr	r3, [r7, #8]
    6a10:	68fa      	ldr	r2, [r7, #12]
    6a12:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    6a14:	693b      	ldr	r3, [r7, #16]
    6a16:	3318      	adds	r3, #24
    6a18:	68fa      	ldr	r2, [r7, #12]
    6a1a:	68b9      	ldr	r1, [r7, #8]
    6a1c:	4618      	mov	r0, r3
    6a1e:	4b0f      	ldr	r3, [pc, #60]	; (6a5c <timer_process_counted+0xbc>)
    6a20:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    6a22:	693b      	ldr	r3, [r7, #16]
    6a24:	3318      	adds	r3, #24
    6a26:	4618      	mov	r0, r3
    6a28:	4b0a      	ldr	r3, [pc, #40]	; (6a54 <timer_process_counted+0xb4>)
    6a2a:	4798      	blx	r3
    6a2c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    6a2e:	68bb      	ldr	r3, [r7, #8]
    6a30:	68db      	ldr	r3, [r3, #12]
    6a32:	68b8      	ldr	r0, [r7, #8]
    6a34:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    6a36:	697b      	ldr	r3, [r7, #20]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d007      	beq.n	6a4c <timer_process_counted+0xac>
    6a3c:	697b      	ldr	r3, [r7, #20]
    6a3e:	685b      	ldr	r3, [r3, #4]
    6a40:	68fa      	ldr	r2, [r7, #12]
    6a42:	1ad2      	subs	r2, r2, r3
    6a44:	697b      	ldr	r3, [r7, #20]
    6a46:	689b      	ldr	r3, [r3, #8]
    6a48:	429a      	cmp	r2, r3
    6a4a:	d2d5      	bcs.n	69f8 <timer_process_counted+0x58>
	}
}
    6a4c:	3718      	adds	r7, #24
    6a4e:	46bd      	mov	sp, r7
    6a50:	bd80      	pop	{r7, pc}
    6a52:	bf00      	nop
    6a54:	000065e1 	.word	0x000065e1
    6a58:	000074b9 	.word	0x000074b9
    6a5c:	000068f1 	.word	0x000068f1

00006a60 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    6a60:	b480      	push	{r7}
    6a62:	b085      	sub	sp, #20
    6a64:	af00      	add	r7, sp, #0
    6a66:	4603      	mov	r3, r0
    6a68:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6a6a:	2300      	movs	r3, #0
    6a6c:	73fb      	strb	r3, [r7, #15]
    6a6e:	e029      	b.n	6ac4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    6a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a74:	4a19      	ldr	r2, [pc, #100]	; (6adc <_usb_d_find_ep+0x7c>)
    6a76:	015b      	lsls	r3, r3, #5
    6a78:	4413      	add	r3, r2
    6a7a:	3301      	adds	r3, #1
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	79fa      	ldrb	r2, [r7, #7]
    6a80:	429a      	cmp	r2, r3
    6a82:	d102      	bne.n	6a8a <_usb_d_find_ep+0x2a>
			return i;
    6a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a88:	e022      	b.n	6ad0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    6a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6a8e:	4a13      	ldr	r2, [pc, #76]	; (6adc <_usb_d_find_ep+0x7c>)
    6a90:	015b      	lsls	r3, r3, #5
    6a92:	4413      	add	r3, r2
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d10e      	bne.n	6ab8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    6a9a:	79fb      	ldrb	r3, [r7, #7]
    6a9c:	f003 030f 	and.w	r3, r3, #15
    6aa0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6aa4:	490d      	ldr	r1, [pc, #52]	; (6adc <_usb_d_find_ep+0x7c>)
    6aa6:	0152      	lsls	r2, r2, #5
    6aa8:	440a      	add	r2, r1
    6aaa:	3201      	adds	r2, #1
    6aac:	7812      	ldrb	r2, [r2, #0]
    6aae:	4293      	cmp	r3, r2
    6ab0:	d102      	bne.n	6ab8 <_usb_d_find_ep+0x58>
			return i;
    6ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6ab6:	e00b      	b.n	6ad0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6abc:	b2db      	uxtb	r3, r3
    6abe:	3301      	adds	r3, #1
    6ac0:	b2db      	uxtb	r3, r3
    6ac2:	73fb      	strb	r3, [r7, #15]
    6ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6ac8:	2b03      	cmp	r3, #3
    6aca:	ddd1      	ble.n	6a70 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    6acc:	f04f 33ff 	mov.w	r3, #4294967295
}
    6ad0:	4618      	mov	r0, r3
    6ad2:	3714      	adds	r7, #20
    6ad4:	46bd      	mov	sp, r7
    6ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ada:	4770      	bx	lr
    6adc:	20001aa0 	.word	0x20001aa0

00006ae0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	b088      	sub	sp, #32
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	60ba      	str	r2, [r7, #8]
    6ae8:	607b      	str	r3, [r7, #4]
    6aea:	4603      	mov	r3, r0
    6aec:	73fb      	strb	r3, [r7, #15]
    6aee:	460b      	mov	r3, r1
    6af0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    6af2:	68bb      	ldr	r3, [r7, #8]
    6af4:	617b      	str	r3, [r7, #20]
    6af6:	687b      	ldr	r3, [r7, #4]
    6af8:	61bb      	str	r3, [r7, #24]
    6afa:	7bbb      	ldrb	r3, [r7, #14]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d004      	beq.n	6b0a <_usb_d_trans+0x2a>
    6b00:	7bfb      	ldrb	r3, [r7, #15]
    6b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b06:	b2db      	uxtb	r3, r3
    6b08:	e003      	b.n	6b12 <_usb_d_trans+0x32>
    6b0a:	7bfb      	ldrb	r3, [r7, #15]
    6b0c:	f003 030f 	and.w	r3, r3, #15
    6b10:	b2db      	uxtb	r3, r3
    6b12:	773b      	strb	r3, [r7, #28]
    6b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    6b18:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    6b1a:	f107 0314 	add.w	r3, r7, #20
    6b1e:	4618      	mov	r0, r3
    6b20:	4b03      	ldr	r3, [pc, #12]	; (6b30 <_usb_d_trans+0x50>)
    6b22:	4798      	blx	r3
    6b24:	4603      	mov	r3, r0
}
    6b26:	4618      	mov	r0, r3
    6b28:	3720      	adds	r7, #32
    6b2a:	46bd      	mov	sp, r7
    6b2c:	bd80      	pop	{r7, pc}
    6b2e:	bf00      	nop
    6b30:	0000ea59 	.word	0x0000ea59

00006b34 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    6b34:	b480      	push	{r7}
    6b36:	b085      	sub	sp, #20
    6b38:	af00      	add	r7, sp, #0
    6b3a:	60f8      	str	r0, [r7, #12]
    6b3c:	60b9      	str	r1, [r7, #8]
    6b3e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    6b40:	2300      	movs	r3, #0
}
    6b42:	4618      	mov	r0, r3
    6b44:	3714      	adds	r7, #20
    6b46:	46bd      	mov	sp, r7
    6b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b4c:	4770      	bx	lr
	...

00006b50 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    6b50:	b580      	push	{r7, lr}
    6b52:	b086      	sub	sp, #24
    6b54:	af00      	add	r7, sp, #0
    6b56:	4603      	mov	r3, r0
    6b58:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6b5a:	79fb      	ldrb	r3, [r7, #7]
    6b5c:	4618      	mov	r0, r3
    6b5e:	4b2a      	ldr	r3, [pc, #168]	; (6c08 <usb_d_cb_trans_setup+0xb8>)
    6b60:	4798      	blx	r3
    6b62:	4603      	mov	r3, r0
    6b64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6b6a:	015b      	lsls	r3, r3, #5
    6b6c:	4a27      	ldr	r2, [pc, #156]	; (6c0c <usb_d_cb_trans_setup+0xbc>)
    6b6e:	4413      	add	r3, r2
    6b70:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    6b72:	693b      	ldr	r3, [r7, #16]
    6b74:	330c      	adds	r3, #12
    6b76:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    6b78:	79fb      	ldrb	r3, [r7, #7]
    6b7a:	68f9      	ldr	r1, [r7, #12]
    6b7c:	4618      	mov	r0, r3
    6b7e:	4b24      	ldr	r3, [pc, #144]	; (6c10 <usb_d_cb_trans_setup+0xc0>)
    6b80:	4798      	blx	r3
    6b82:	4603      	mov	r3, r0
    6b84:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    6b86:	7afb      	ldrb	r3, [r7, #11]
    6b88:	2b08      	cmp	r3, #8
    6b8a:	d00d      	beq.n	6ba8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6b8c:	79fb      	ldrb	r3, [r7, #7]
    6b8e:	2101      	movs	r1, #1
    6b90:	4618      	mov	r0, r3
    6b92:	4b20      	ldr	r3, [pc, #128]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6b94:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6b96:	79fb      	ldrb	r3, [r7, #7]
    6b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b9c:	b2db      	uxtb	r3, r3
    6b9e:	2101      	movs	r1, #1
    6ba0:	4618      	mov	r0, r3
    6ba2:	4b1c      	ldr	r3, [pc, #112]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6ba4:	4798      	blx	r3
		return;
    6ba6:	e02b      	b.n	6c00 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6ba8:	79fb      	ldrb	r3, [r7, #7]
    6baa:	2100      	movs	r1, #0
    6bac:	4618      	mov	r0, r3
    6bae:	4b19      	ldr	r3, [pc, #100]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6bb0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    6bb2:	79fb      	ldrb	r3, [r7, #7]
    6bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bb8:	b2db      	uxtb	r3, r3
    6bba:	2100      	movs	r1, #0
    6bbc:	4618      	mov	r0, r3
    6bbe:	4b15      	ldr	r3, [pc, #84]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6bc0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    6bc2:	693b      	ldr	r3, [r7, #16]
    6bc4:	2201      	movs	r2, #1
    6bc6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    6bc8:	693b      	ldr	r3, [r7, #16]
    6bca:	695b      	ldr	r3, [r3, #20]
    6bcc:	79fa      	ldrb	r2, [r7, #7]
    6bce:	68f9      	ldr	r1, [r7, #12]
    6bd0:	4610      	mov	r0, r2
    6bd2:	4798      	blx	r3
    6bd4:	4603      	mov	r3, r0
    6bd6:	f083 0301 	eor.w	r3, r3, #1
    6bda:	b2db      	uxtb	r3, r3
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d00f      	beq.n	6c00 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    6be0:	693b      	ldr	r3, [r7, #16]
    6be2:	2205      	movs	r2, #5
    6be4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    6be6:	79fb      	ldrb	r3, [r7, #7]
    6be8:	2101      	movs	r1, #1
    6bea:	4618      	mov	r0, r3
    6bec:	4b09      	ldr	r3, [pc, #36]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6bee:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    6bf0:	79fb      	ldrb	r3, [r7, #7]
    6bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bf6:	b2db      	uxtb	r3, r3
    6bf8:	2101      	movs	r1, #1
    6bfa:	4618      	mov	r0, r3
    6bfc:	4b05      	ldr	r3, [pc, #20]	; (6c14 <usb_d_cb_trans_setup+0xc4>)
    6bfe:	4798      	blx	r3
	}
}
    6c00:	3718      	adds	r7, #24
    6c02:	46bd      	mov	sp, r7
    6c04:	bd80      	pop	{r7, pc}
    6c06:	bf00      	nop
    6c08:	00006a61 	.word	0x00006a61
    6c0c:	20001aa0 	.word	0x20001aa0
    6c10:	0000e9b1 	.word	0x0000e9b1
    6c14:	0000e829 	.word	0x0000e829

00006c18 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    6c18:	b580      	push	{r7, lr}
    6c1a:	b084      	sub	sp, #16
    6c1c:	af00      	add	r7, sp, #0
    6c1e:	4603      	mov	r3, r0
    6c20:	6039      	str	r1, [r7, #0]
    6c22:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6c24:	79fb      	ldrb	r3, [r7, #7]
    6c26:	4618      	mov	r0, r3
    6c28:	4b0d      	ldr	r3, [pc, #52]	; (6c60 <usb_d_cb_trans_more+0x48>)
    6c2a:	4798      	blx	r3
    6c2c:	4603      	mov	r3, r0
    6c2e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6c34:	015b      	lsls	r3, r3, #5
    6c36:	4a0b      	ldr	r2, [pc, #44]	; (6c64 <usb_d_cb_trans_more+0x4c>)
    6c38:	4413      	add	r3, r2
    6c3a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    6c3c:	68bb      	ldr	r3, [r7, #8]
    6c3e:	789b      	ldrb	r3, [r3, #2]
    6c40:	2b03      	cmp	r3, #3
    6c42:	d107      	bne.n	6c54 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    6c44:	68bb      	ldr	r3, [r7, #8]
    6c46:	699b      	ldr	r3, [r3, #24]
    6c48:	79fa      	ldrb	r2, [r7, #7]
    6c4a:	6839      	ldr	r1, [r7, #0]
    6c4c:	4610      	mov	r0, r2
    6c4e:	4798      	blx	r3
    6c50:	4603      	mov	r3, r0
    6c52:	e000      	b.n	6c56 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    6c54:	2300      	movs	r3, #0
}
    6c56:	4618      	mov	r0, r3
    6c58:	3710      	adds	r7, #16
    6c5a:	46bd      	mov	sp, r7
    6c5c:	bd80      	pop	{r7, pc}
    6c5e:	bf00      	nop
    6c60:	00006a61 	.word	0x00006a61
    6c64:	20001aa0 	.word	0x20001aa0

00006c68 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    6c68:	b590      	push	{r4, r7, lr}
    6c6a:	b087      	sub	sp, #28
    6c6c:	af02      	add	r7, sp, #8
    6c6e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	789b      	ldrb	r3, [r3, #2]
    6c74:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    6c76:	687b      	ldr	r3, [r7, #4]
    6c78:	7b1b      	ldrb	r3, [r3, #12]
    6c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6c7e:	2b00      	cmp	r3, #0
    6c80:	bf14      	ite	ne
    6c82:	2301      	movne	r3, #1
    6c84:	2300      	moveq	r3, #0
    6c86:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    6c88:	7bfb      	ldrb	r3, [r7, #15]
    6c8a:	2b03      	cmp	r3, #3
    6c8c:	d13a      	bne.n	6d04 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	69db      	ldr	r3, [r3, #28]
    6c92:	687a      	ldr	r2, [r7, #4]
    6c94:	7850      	ldrb	r0, [r2, #1]
    6c96:	687a      	ldr	r2, [r7, #4]
    6c98:	320c      	adds	r2, #12
    6c9a:	2101      	movs	r1, #1
    6c9c:	4798      	blx	r3
    6c9e:	4603      	mov	r3, r0
    6ca0:	737b      	strb	r3, [r7, #13]
		if (err) {
    6ca2:	7b7b      	ldrb	r3, [r7, #13]
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d015      	beq.n	6cd4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	2205      	movs	r2, #5
    6cac:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	2202      	movs	r2, #2
    6cb2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    6cb4:	7bbb      	ldrb	r3, [r7, #14]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d002      	beq.n	6cc0 <usb_d_ctrl_trans_done+0x58>
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	785b      	ldrb	r3, [r3, #1]
    6cbe:	e004      	b.n	6cca <usb_d_ctrl_trans_done+0x62>
    6cc0:	687b      	ldr	r3, [r7, #4]
    6cc2:	785b      	ldrb	r3, [r3, #1]
    6cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6cc8:	b2db      	uxtb	r3, r3
    6cca:	2101      	movs	r1, #1
    6ccc:	4618      	mov	r0, r3
    6cce:	4b15      	ldr	r3, [pc, #84]	; (6d24 <usb_d_ctrl_trans_done+0xbc>)
    6cd0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    6cd2:	e022      	b.n	6d1a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    6cd4:	687b      	ldr	r3, [r7, #4]
    6cd6:	2204      	movs	r2, #4
    6cd8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    6cda:	687b      	ldr	r3, [r7, #4]
    6cdc:	7858      	ldrb	r0, [r3, #1]
    6cde:	7bbb      	ldrb	r3, [r7, #14]
    6ce0:	2b00      	cmp	r3, #0
    6ce2:	bf14      	ite	ne
    6ce4:	2301      	movne	r3, #1
    6ce6:	2300      	moveq	r3, #0
    6ce8:	b2db      	uxtb	r3, r3
    6cea:	f083 0301 	eor.w	r3, r3, #1
    6cee:	b2db      	uxtb	r3, r3
    6cf0:	f003 0301 	and.w	r3, r3, #1
    6cf4:	b2d9      	uxtb	r1, r3
    6cf6:	2301      	movs	r3, #1
    6cf8:	9300      	str	r3, [sp, #0]
    6cfa:	2300      	movs	r3, #0
    6cfc:	2200      	movs	r2, #0
    6cfe:	4c0a      	ldr	r4, [pc, #40]	; (6d28 <usb_d_ctrl_trans_done+0xc0>)
    6d00:	47a0      	blx	r4
}
    6d02:	e00a      	b.n	6d1a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	69db      	ldr	r3, [r3, #28]
    6d08:	687a      	ldr	r2, [r7, #4]
    6d0a:	7850      	ldrb	r0, [r2, #1]
    6d0c:	687a      	ldr	r2, [r7, #4]
    6d0e:	320c      	adds	r2, #12
    6d10:	2100      	movs	r1, #0
    6d12:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	2202      	movs	r2, #2
    6d18:	709a      	strb	r2, [r3, #2]
}
    6d1a:	bf00      	nop
    6d1c:	3714      	adds	r7, #20
    6d1e:	46bd      	mov	sp, r7
    6d20:	bd90      	pop	{r4, r7, pc}
    6d22:	bf00      	nop
    6d24:	0000e829 	.word	0x0000e829
    6d28:	00006ae1 	.word	0x00006ae1

00006d2c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    6d2c:	b580      	push	{r7, lr}
    6d2e:	b086      	sub	sp, #24
    6d30:	af00      	add	r7, sp, #0
    6d32:	4603      	mov	r3, r0
    6d34:	60b9      	str	r1, [r7, #8]
    6d36:	607a      	str	r2, [r7, #4]
    6d38:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6d3a:	7bfb      	ldrb	r3, [r7, #15]
    6d3c:	4618      	mov	r0, r3
    6d3e:	4b2f      	ldr	r3, [pc, #188]	; (6dfc <_usb_d_cb_trans_done+0xd0>)
    6d40:	4798      	blx	r3
    6d42:	4603      	mov	r3, r0
    6d44:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6d4a:	015b      	lsls	r3, r3, #5
    6d4c:	4a2c      	ldr	r2, [pc, #176]	; (6e00 <_usb_d_cb_trans_done+0xd4>)
    6d4e:	4413      	add	r3, r2
    6d50:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    6d52:	68bb      	ldr	r3, [r7, #8]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d10e      	bne.n	6d76 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    6d58:	693b      	ldr	r3, [r7, #16]
    6d5a:	2200      	movs	r2, #0
    6d5c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6d5e:	693b      	ldr	r3, [r7, #16]
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	2b00      	cmp	r3, #0
    6d64:	d103      	bne.n	6d6e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    6d66:	6938      	ldr	r0, [r7, #16]
    6d68:	4b26      	ldr	r3, [pc, #152]	; (6e04 <_usb_d_cb_trans_done+0xd8>)
    6d6a:	4798      	blx	r3
			return;
    6d6c:	e043      	b.n	6df6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6d6e:	693b      	ldr	r3, [r7, #16]
    6d70:	2201      	movs	r2, #1
    6d72:	709a      	strb	r2, [r3, #2]
    6d74:	e038      	b.n	6de8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    6d76:	68bb      	ldr	r3, [r7, #8]
    6d78:	2b01      	cmp	r3, #1
    6d7a:	d113      	bne.n	6da4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    6d7c:	693b      	ldr	r3, [r7, #16]
    6d7e:	2202      	movs	r2, #2
    6d80:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6d82:	693b      	ldr	r3, [r7, #16]
    6d84:	781b      	ldrb	r3, [r3, #0]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d108      	bne.n	6d9c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6d8a:	693b      	ldr	r3, [r7, #16]
    6d8c:	2202      	movs	r2, #2
    6d8e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    6d90:	7bfb      	ldrb	r3, [r7, #15]
    6d92:	2100      	movs	r1, #0
    6d94:	4618      	mov	r0, r3
    6d96:	4b1c      	ldr	r3, [pc, #112]	; (6e08 <_usb_d_cb_trans_done+0xdc>)
    6d98:	4798      	blx	r3
    6d9a:	e025      	b.n	6de8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    6d9c:	693b      	ldr	r3, [r7, #16]
    6d9e:	2205      	movs	r2, #5
    6da0:	709a      	strb	r2, [r3, #2]
    6da2:	e021      	b.n	6de8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    6da4:	68bb      	ldr	r3, [r7, #8]
    6da6:	2b02      	cmp	r3, #2
    6da8:	d10e      	bne.n	6dc8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    6daa:	693b      	ldr	r3, [r7, #16]
    6dac:	2204      	movs	r2, #4
    6dae:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    6db0:	693b      	ldr	r3, [r7, #16]
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	2b00      	cmp	r3, #0
    6db6:	d103      	bne.n	6dc0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    6db8:	693b      	ldr	r3, [r7, #16]
    6dba:	2202      	movs	r2, #2
    6dbc:	709a      	strb	r2, [r3, #2]
			return;
    6dbe:	e01a      	b.n	6df6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    6dc0:	693b      	ldr	r3, [r7, #16]
    6dc2:	2201      	movs	r2, #1
    6dc4:	709a      	strb	r2, [r3, #2]
    6dc6:	e00f      	b.n	6de8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    6dc8:	68bb      	ldr	r3, [r7, #8]
    6dca:	2b03      	cmp	r3, #3
    6dcc:	d106      	bne.n	6ddc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    6dce:	693b      	ldr	r3, [r7, #16]
    6dd0:	2200      	movs	r2, #0
    6dd2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    6dd4:	693b      	ldr	r3, [r7, #16]
    6dd6:	2205      	movs	r2, #5
    6dd8:	70da      	strb	r2, [r3, #3]
    6dda:	e005      	b.n	6de8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    6ddc:	693b      	ldr	r3, [r7, #16]
    6dde:	2206      	movs	r2, #6
    6de0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    6de2:	693b      	ldr	r3, [r7, #16]
    6de4:	2206      	movs	r2, #6
    6de6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    6de8:	693b      	ldr	r3, [r7, #16]
    6dea:	69db      	ldr	r3, [r3, #28]
    6dec:	693a      	ldr	r2, [r7, #16]
    6dee:	78d1      	ldrb	r1, [r2, #3]
    6df0:	687a      	ldr	r2, [r7, #4]
    6df2:	7bf8      	ldrb	r0, [r7, #15]
    6df4:	4798      	blx	r3
}
    6df6:	3718      	adds	r7, #24
    6df8:	46bd      	mov	sp, r7
    6dfa:	bd80      	pop	{r7, pc}
    6dfc:	00006a61 	.word	0x00006a61
    6e00:	20001aa0 	.word	0x20001aa0
    6e04:	00006c69 	.word	0x00006c69
    6e08:	0000e829 	.word	0x0000e829

00006e0c <usb_d_init>:

int32_t usb_d_init(void)
{
    6e0c:	b580      	push	{r7, lr}
    6e0e:	b082      	sub	sp, #8
    6e10:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    6e12:	4b21      	ldr	r3, [pc, #132]	; (6e98 <usb_d_init+0x8c>)
    6e14:	4798      	blx	r3
    6e16:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    6e18:	683b      	ldr	r3, [r7, #0]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	da01      	bge.n	6e22 <usb_d_init+0x16>
		return rc;
    6e1e:	683b      	ldr	r3, [r7, #0]
    6e20:	e036      	b.n	6e90 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    6e22:	2280      	movs	r2, #128	; 0x80
    6e24:	2100      	movs	r1, #0
    6e26:	481d      	ldr	r0, [pc, #116]	; (6e9c <usb_d_init+0x90>)
    6e28:	4b1d      	ldr	r3, [pc, #116]	; (6ea0 <usb_d_init+0x94>)
    6e2a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6e2c:	2300      	movs	r3, #0
    6e2e:	71fb      	strb	r3, [r7, #7]
    6e30:	e01e      	b.n	6e70 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    6e32:	79fb      	ldrb	r3, [r7, #7]
    6e34:	4a19      	ldr	r2, [pc, #100]	; (6e9c <usb_d_init+0x90>)
    6e36:	015b      	lsls	r3, r3, #5
    6e38:	4413      	add	r3, r2
    6e3a:	3301      	adds	r3, #1
    6e3c:	22ff      	movs	r2, #255	; 0xff
    6e3e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    6e40:	79fb      	ldrb	r3, [r7, #7]
    6e42:	4a16      	ldr	r2, [pc, #88]	; (6e9c <usb_d_init+0x90>)
    6e44:	015b      	lsls	r3, r3, #5
    6e46:	4413      	add	r3, r2
    6e48:	3314      	adds	r3, #20
    6e4a:	4a16      	ldr	r2, [pc, #88]	; (6ea4 <usb_d_init+0x98>)
    6e4c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    6e4e:	79fb      	ldrb	r3, [r7, #7]
    6e50:	4a12      	ldr	r2, [pc, #72]	; (6e9c <usb_d_init+0x90>)
    6e52:	015b      	lsls	r3, r3, #5
    6e54:	4413      	add	r3, r2
    6e56:	3318      	adds	r3, #24
    6e58:	4a12      	ldr	r2, [pc, #72]	; (6ea4 <usb_d_init+0x98>)
    6e5a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    6e5c:	79fb      	ldrb	r3, [r7, #7]
    6e5e:	4a0f      	ldr	r2, [pc, #60]	; (6e9c <usb_d_init+0x90>)
    6e60:	015b      	lsls	r3, r3, #5
    6e62:	4413      	add	r3, r2
    6e64:	331c      	adds	r3, #28
    6e66:	4a0f      	ldr	r2, [pc, #60]	; (6ea4 <usb_d_init+0x98>)
    6e68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    6e6a:	79fb      	ldrb	r3, [r7, #7]
    6e6c:	3301      	adds	r3, #1
    6e6e:	71fb      	strb	r3, [r7, #7]
    6e70:	79fb      	ldrb	r3, [r7, #7]
    6e72:	2b03      	cmp	r3, #3
    6e74:	d9dd      	bls.n	6e32 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    6e76:	490c      	ldr	r1, [pc, #48]	; (6ea8 <usb_d_init+0x9c>)
    6e78:	2000      	movs	r0, #0
    6e7a:	4b0c      	ldr	r3, [pc, #48]	; (6eac <usb_d_init+0xa0>)
    6e7c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    6e7e:	490c      	ldr	r1, [pc, #48]	; (6eb0 <usb_d_init+0xa4>)
    6e80:	2001      	movs	r0, #1
    6e82:	4b0a      	ldr	r3, [pc, #40]	; (6eac <usb_d_init+0xa0>)
    6e84:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    6e86:	490b      	ldr	r1, [pc, #44]	; (6eb4 <usb_d_init+0xa8>)
    6e88:	2002      	movs	r0, #2
    6e8a:	4b08      	ldr	r3, [pc, #32]	; (6eac <usb_d_init+0xa0>)
    6e8c:	4798      	blx	r3
	return ERR_NONE;
    6e8e:	2300      	movs	r3, #0
}
    6e90:	4618      	mov	r0, r3
    6e92:	3708      	adds	r7, #8
    6e94:	46bd      	mov	sp, r7
    6e96:	bd80      	pop	{r7, pc}
    6e98:	0000e071 	.word	0x0000e071
    6e9c:	20001aa0 	.word	0x20001aa0
    6ea0:	00011d4d 	.word	0x00011d4d
    6ea4:	00006b35 	.word	0x00006b35
    6ea8:	00006b51 	.word	0x00006b51
    6eac:	0000ec65 	.word	0x0000ec65
    6eb0:	00006c19 	.word	0x00006c19
    6eb4:	00006d2d 	.word	0x00006d2d

00006eb8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    6eb8:	b580      	push	{r7, lr}
    6eba:	b082      	sub	sp, #8
    6ebc:	af00      	add	r7, sp, #0
    6ebe:	4603      	mov	r3, r0
    6ec0:	6039      	str	r1, [r7, #0]
    6ec2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    6ec4:	79fb      	ldrb	r3, [r7, #7]
    6ec6:	6839      	ldr	r1, [r7, #0]
    6ec8:	4618      	mov	r0, r3
    6eca:	4b03      	ldr	r3, [pc, #12]	; (6ed8 <usb_d_register_callback+0x20>)
    6ecc:	4798      	blx	r3
}
    6ece:	bf00      	nop
    6ed0:	3708      	adds	r7, #8
    6ed2:	46bd      	mov	sp, r7
    6ed4:	bd80      	pop	{r7, pc}
    6ed6:	bf00      	nop
    6ed8:	0000ec1d 	.word	0x0000ec1d

00006edc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    6edc:	b580      	push	{r7, lr}
    6ede:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    6ee0:	4b02      	ldr	r3, [pc, #8]	; (6eec <usb_d_enable+0x10>)
    6ee2:	4798      	blx	r3
    6ee4:	4603      	mov	r3, r0
}
    6ee6:	4618      	mov	r0, r3
    6ee8:	bd80      	pop	{r7, pc}
    6eea:	bf00      	nop
    6eec:	0000e161 	.word	0x0000e161

00006ef0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    6ef4:	4b01      	ldr	r3, [pc, #4]	; (6efc <usb_d_attach+0xc>)
    6ef6:	4798      	blx	r3
}
    6ef8:	bf00      	nop
    6efa:	bd80      	pop	{r7, pc}
    6efc:	0000e1e5 	.word	0x0000e1e5

00006f00 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    6f00:	b580      	push	{r7, lr}
    6f02:	b082      	sub	sp, #8
    6f04:	af00      	add	r7, sp, #0
    6f06:	4603      	mov	r3, r0
    6f08:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    6f0a:	79fb      	ldrb	r3, [r7, #7]
    6f0c:	4618      	mov	r0, r3
    6f0e:	4b03      	ldr	r3, [pc, #12]	; (6f1c <usb_d_set_address+0x1c>)
    6f10:	4798      	blx	r3
}
    6f12:	bf00      	nop
    6f14:	3708      	adds	r7, #8
    6f16:	46bd      	mov	sp, r7
    6f18:	bd80      	pop	{r7, pc}
    6f1a:	bf00      	nop
    6f1c:	0000e1f9 	.word	0x0000e1f9

00006f20 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    6f20:	b580      	push	{r7, lr}
    6f22:	b082      	sub	sp, #8
    6f24:	af00      	add	r7, sp, #0
    6f26:	4603      	mov	r3, r0
    6f28:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    6f2a:	79fb      	ldrb	r3, [r7, #7]
    6f2c:	b29b      	uxth	r3, r3
    6f2e:	461a      	mov	r2, r3
    6f30:	2100      	movs	r1, #0
    6f32:	2000      	movs	r0, #0
    6f34:	4b03      	ldr	r3, [pc, #12]	; (6f44 <usb_d_ep0_init+0x24>)
    6f36:	4798      	blx	r3
    6f38:	4603      	mov	r3, r0
}
    6f3a:	4618      	mov	r0, r3
    6f3c:	3708      	adds	r7, #8
    6f3e:	46bd      	mov	sp, r7
    6f40:	bd80      	pop	{r7, pc}
    6f42:	bf00      	nop
    6f44:	00006f49 	.word	0x00006f49

00006f48 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	b086      	sub	sp, #24
    6f4c:	af00      	add	r7, sp, #0
    6f4e:	4603      	mov	r3, r0
    6f50:	71fb      	strb	r3, [r7, #7]
    6f52:	460b      	mov	r3, r1
    6f54:	71bb      	strb	r3, [r7, #6]
    6f56:	4613      	mov	r3, r2
    6f58:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    6f5a:	79fb      	ldrb	r3, [r7, #7]
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b1e      	ldr	r3, [pc, #120]	; (6fd8 <usb_d_ep_init+0x90>)
    6f60:	4798      	blx	r3
    6f62:	4603      	mov	r3, r0
    6f64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f6a:	015b      	lsls	r3, r3, #5
    6f6c:	4a1b      	ldr	r2, [pc, #108]	; (6fdc <usb_d_ep_init+0x94>)
    6f6e:	4413      	add	r3, r2
    6f70:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    6f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f76:	2b00      	cmp	r3, #0
    6f78:	db02      	blt.n	6f80 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    6f7a:	f06f 0313 	mvn.w	r3, #19
    6f7e:	e027      	b.n	6fd0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    6f80:	20ff      	movs	r0, #255	; 0xff
    6f82:	4b15      	ldr	r3, [pc, #84]	; (6fd8 <usb_d_ep_init+0x90>)
    6f84:	4798      	blx	r3
    6f86:	4603      	mov	r3, r0
    6f88:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    6f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	da02      	bge.n	6f98 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    6f92:	f06f 0314 	mvn.w	r3, #20
    6f96:	e01b      	b.n	6fd0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    6f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6f9c:	015b      	lsls	r3, r3, #5
    6f9e:	4a0f      	ldr	r2, [pc, #60]	; (6fdc <usb_d_ep_init+0x94>)
    6fa0:	4413      	add	r3, r2
    6fa2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    6fa4:	88ba      	ldrh	r2, [r7, #4]
    6fa6:	79b9      	ldrb	r1, [r7, #6]
    6fa8:	79fb      	ldrb	r3, [r7, #7]
    6faa:	4618      	mov	r0, r3
    6fac:	4b0c      	ldr	r3, [pc, #48]	; (6fe0 <usb_d_ep_init+0x98>)
    6fae:	4798      	blx	r3
    6fb0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	da01      	bge.n	6fbc <usb_d_ep_init+0x74>
		return rc;
    6fb8:	68fb      	ldr	r3, [r7, #12]
    6fba:	e009      	b.n	6fd0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    6fbc:	693b      	ldr	r3, [r7, #16]
    6fbe:	79fa      	ldrb	r2, [r7, #7]
    6fc0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    6fc2:	79bb      	ldrb	r3, [r7, #6]
    6fc4:	f003 0303 	and.w	r3, r3, #3
    6fc8:	b2da      	uxtb	r2, r3
    6fca:	693b      	ldr	r3, [r7, #16]
    6fcc:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    6fce:	2300      	movs	r3, #0
}
    6fd0:	4618      	mov	r0, r3
    6fd2:	3718      	adds	r7, #24
    6fd4:	46bd      	mov	sp, r7
    6fd6:	bd80      	pop	{r7, pc}
    6fd8:	00006a61 	.word	0x00006a61
    6fdc:	20001aa0 	.word	0x20001aa0
    6fe0:	0000e299 	.word	0x0000e299

00006fe4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    6fe4:	b580      	push	{r7, lr}
    6fe6:	b084      	sub	sp, #16
    6fe8:	af00      	add	r7, sp, #0
    6fea:	4603      	mov	r3, r0
    6fec:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    6fee:	79fb      	ldrb	r3, [r7, #7]
    6ff0:	4618      	mov	r0, r3
    6ff2:	4b0d      	ldr	r3, [pc, #52]	; (7028 <usb_d_ep_deinit+0x44>)
    6ff4:	4798      	blx	r3
    6ff6:	4603      	mov	r3, r0
    6ff8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    6ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6ffe:	015b      	lsls	r3, r3, #5
    7000:	4a0a      	ldr	r2, [pc, #40]	; (702c <usb_d_ep_deinit+0x48>)
    7002:	4413      	add	r3, r2
    7004:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7006:	f997 300f 	ldrsb.w	r3, [r7, #15]
    700a:	2b00      	cmp	r3, #0
    700c:	db07      	blt.n	701e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    700e:	79fb      	ldrb	r3, [r7, #7]
    7010:	4618      	mov	r0, r3
    7012:	4b07      	ldr	r3, [pc, #28]	; (7030 <usb_d_ep_deinit+0x4c>)
    7014:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    7016:	68bb      	ldr	r3, [r7, #8]
    7018:	22ff      	movs	r2, #255	; 0xff
    701a:	705a      	strb	r2, [r3, #1]
    701c:	e000      	b.n	7020 <usb_d_ep_deinit+0x3c>
		return;
    701e:	bf00      	nop
}
    7020:	3710      	adds	r7, #16
    7022:	46bd      	mov	sp, r7
    7024:	bd80      	pop	{r7, pc}
    7026:	bf00      	nop
    7028:	00006a61 	.word	0x00006a61
    702c:	20001aa0 	.word	0x20001aa0
    7030:	0000e3cd 	.word	0x0000e3cd

00007034 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7034:	b580      	push	{r7, lr}
    7036:	b086      	sub	sp, #24
    7038:	af00      	add	r7, sp, #0
    703a:	4603      	mov	r3, r0
    703c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    703e:	79fb      	ldrb	r3, [r7, #7]
    7040:	4618      	mov	r0, r3
    7042:	4b15      	ldr	r3, [pc, #84]	; (7098 <usb_d_ep_enable+0x64>)
    7044:	4798      	blx	r3
    7046:	4603      	mov	r3, r0
    7048:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    704a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    704e:	015b      	lsls	r3, r3, #5
    7050:	4a12      	ldr	r2, [pc, #72]	; (709c <usb_d_ep_enable+0x68>)
    7052:	4413      	add	r3, r2
    7054:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7056:	f997 3017 	ldrsb.w	r3, [r7, #23]
    705a:	2b00      	cmp	r3, #0
    705c:	da02      	bge.n	7064 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    705e:	f06f 0311 	mvn.w	r3, #17
    7062:	e014      	b.n	708e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7064:	693b      	ldr	r3, [r7, #16]
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	2b00      	cmp	r3, #0
    706a:	d101      	bne.n	7070 <usb_d_ep_enable+0x3c>
    706c:	2202      	movs	r2, #2
    706e:	e000      	b.n	7072 <usb_d_ep_enable+0x3e>
    7070:	2201      	movs	r2, #1
    7072:	693b      	ldr	r3, [r7, #16]
    7074:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7076:	79fb      	ldrb	r3, [r7, #7]
    7078:	4618      	mov	r0, r3
    707a:	4b09      	ldr	r3, [pc, #36]	; (70a0 <usb_d_ep_enable+0x6c>)
    707c:	4798      	blx	r3
    707e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7080:	68fb      	ldr	r3, [r7, #12]
    7082:	2b00      	cmp	r3, #0
    7084:	da02      	bge.n	708c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7086:	693b      	ldr	r3, [r7, #16]
    7088:	2200      	movs	r2, #0
    708a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    708c:	68fb      	ldr	r3, [r7, #12]
}
    708e:	4618      	mov	r0, r3
    7090:	3718      	adds	r7, #24
    7092:	46bd      	mov	sp, r7
    7094:	bd80      	pop	{r7, pc}
    7096:	bf00      	nop
    7098:	00006a61 	.word	0x00006a61
    709c:	20001aa0 	.word	0x20001aa0
    70a0:	0000e4b1 	.word	0x0000e4b1

000070a4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    70a4:	b590      	push	{r4, r7, lr}
    70a6:	b08d      	sub	sp, #52	; 0x34
    70a8:	af02      	add	r7, sp, #8
    70aa:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	7a1b      	ldrb	r3, [r3, #8]
    70b0:	4618      	mov	r0, r3
    70b2:	4b51      	ldr	r3, [pc, #324]	; (71f8 <usb_d_ep_transfer+0x154>)
    70b4:	4798      	blx	r3
    70b6:	4603      	mov	r3, r0
    70b8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    70ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
    70be:	015b      	lsls	r3, r3, #5
    70c0:	4a4e      	ldr	r2, [pc, #312]	; (71fc <usb_d_ep_transfer+0x158>)
    70c2:	4413      	add	r3, r2
    70c4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	7a1b      	ldrb	r3, [r3, #8]
    70ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    70ce:	2b00      	cmp	r3, #0
    70d0:	bf14      	ite	ne
    70d2:	2301      	movne	r3, #1
    70d4:	2300      	moveq	r3, #0
    70d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    70da:	687b      	ldr	r3, [r7, #4]
    70dc:	7a5b      	ldrb	r3, [r3, #9]
    70de:	2b00      	cmp	r3, #0
    70e0:	bf14      	ite	ne
    70e2:	2301      	movne	r3, #1
    70e4:	2300      	moveq	r3, #0
    70e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	685b      	ldr	r3, [r3, #4]
    70ee:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    70f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    70f4:	2b00      	cmp	r3, #0
    70f6:	da02      	bge.n	70fe <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    70f8:	f06f 0311 	mvn.w	r3, #17
    70fc:	e077      	b.n	71ee <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    70fe:	f107 0308 	add.w	r3, r7, #8
    7102:	4618      	mov	r0, r3
    7104:	4b3e      	ldr	r3, [pc, #248]	; (7200 <usb_d_ep_transfer+0x15c>)
    7106:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7108:	69bb      	ldr	r3, [r7, #24]
    710a:	789b      	ldrb	r3, [r3, #2]
    710c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    710e:	7bfb      	ldrb	r3, [r7, #15]
    7110:	b2db      	uxtb	r3, r3
    7112:	2b01      	cmp	r3, #1
    7114:	d10c      	bne.n	7130 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7116:	69bb      	ldr	r3, [r7, #24]
    7118:	2203      	movs	r2, #3
    711a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    711c:	f107 0308 	add.w	r3, r7, #8
    7120:	4618      	mov	r0, r3
    7122:	4b38      	ldr	r3, [pc, #224]	; (7204 <usb_d_ep_transfer+0x160>)
    7124:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7126:	69bb      	ldr	r3, [r7, #24]
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	2b00      	cmp	r3, #0
    712c:	d151      	bne.n	71d2 <usb_d_ep_transfer+0x12e>
    712e:	e017      	b.n	7160 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7130:	f107 0308 	add.w	r3, r7, #8
    7134:	4618      	mov	r0, r3
    7136:	4b33      	ldr	r3, [pc, #204]	; (7204 <usb_d_ep_transfer+0x160>)
    7138:	4798      	blx	r3
		switch (state) {
    713a:	7bfb      	ldrb	r3, [r7, #15]
    713c:	b2db      	uxtb	r3, r3
    713e:	2b05      	cmp	r3, #5
    7140:	d004      	beq.n	714c <usb_d_ep_transfer+0xa8>
    7142:	2b06      	cmp	r3, #6
    7144:	d004      	beq.n	7150 <usb_d_ep_transfer+0xac>
    7146:	2b00      	cmp	r3, #0
    7148:	d005      	beq.n	7156 <usb_d_ep_transfer+0xb2>
    714a:	e007      	b.n	715c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    714c:	2302      	movs	r3, #2
    714e:	e04e      	b.n	71ee <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7150:	f06f 030f 	mvn.w	r3, #15
    7154:	e04b      	b.n	71ee <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7156:	f06f 0312 	mvn.w	r3, #18
    715a:	e048      	b.n	71ee <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    715c:	2301      	movs	r3, #1
    715e:	e046      	b.n	71ee <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7160:	69bb      	ldr	r3, [r7, #24]
    7162:	7c9b      	ldrb	r3, [r3, #18]
    7164:	b29a      	uxth	r2, r3
    7166:	69bb      	ldr	r3, [r7, #24]
    7168:	7cdb      	ldrb	r3, [r3, #19]
    716a:	b29b      	uxth	r3, r3
    716c:	021b      	lsls	r3, r3, #8
    716e:	b29b      	uxth	r3, r3
    7170:	4413      	add	r3, r2
    7172:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7174:	8afb      	ldrh	r3, [r7, #22]
    7176:	2b00      	cmp	r3, #0
    7178:	d10b      	bne.n	7192 <usb_d_ep_transfer+0xee>
			dir                 = true;
    717a:	2301      	movs	r3, #1
    717c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7180:	2300      	movs	r3, #0
    7182:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7184:	2301      	movs	r3, #1
    7186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    718a:	69bb      	ldr	r3, [r7, #24]
    718c:	2204      	movs	r2, #4
    718e:	709a      	strb	r2, [r3, #2]
    7190:	e01f      	b.n	71d2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7192:	69bb      	ldr	r3, [r7, #24]
    7194:	7b1b      	ldrb	r3, [r3, #12]
    7196:	f003 0380 	and.w	r3, r3, #128	; 0x80
    719a:	2b00      	cmp	r3, #0
    719c:	bf14      	ite	ne
    719e:	2301      	movne	r3, #1
    71a0:	2300      	moveq	r3, #0
    71a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    71a6:	8afa      	ldrh	r2, [r7, #22]
    71a8:	6a3b      	ldr	r3, [r7, #32]
    71aa:	429a      	cmp	r2, r3
    71ac:	d201      	bcs.n	71b2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    71ae:	8afb      	ldrh	r3, [r7, #22]
    71b0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    71b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    71b6:	2b00      	cmp	r3, #0
    71b8:	d008      	beq.n	71cc <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    71ba:	8afa      	ldrh	r2, [r7, #22]
    71bc:	6a3b      	ldr	r3, [r7, #32]
    71be:	429a      	cmp	r2, r3
    71c0:	bf8c      	ite	hi
    71c2:	2301      	movhi	r3, #1
    71c4:	2300      	movls	r3, #0
    71c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    71ca:	e002      	b.n	71d2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    71cc:	2300      	movs	r3, #0
    71ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    71d2:	687b      	ldr	r3, [r7, #4]
    71d4:	7a18      	ldrb	r0, [r3, #8]
    71d6:	687b      	ldr	r3, [r7, #4]
    71d8:	681a      	ldr	r2, [r3, #0]
    71da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    71de:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    71e2:	9300      	str	r3, [sp, #0]
    71e4:	6a3b      	ldr	r3, [r7, #32]
    71e6:	4c08      	ldr	r4, [pc, #32]	; (7208 <usb_d_ep_transfer+0x164>)
    71e8:	47a0      	blx	r4
    71ea:	6138      	str	r0, [r7, #16]
	return rc;
    71ec:	693b      	ldr	r3, [r7, #16]
}
    71ee:	4618      	mov	r0, r3
    71f0:	372c      	adds	r7, #44	; 0x2c
    71f2:	46bd      	mov	sp, r7
    71f4:	bd90      	pop	{r4, r7, pc}
    71f6:	bf00      	nop
    71f8:	00006a61 	.word	0x00006a61
    71fc:	20001aa0 	.word	0x20001aa0
    7200:	0000f3d1 	.word	0x0000f3d1
    7204:	0000f3f7 	.word	0x0000f3f7
    7208:	00006ae1 	.word	0x00006ae1

0000720c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    720c:	b580      	push	{r7, lr}
    720e:	b086      	sub	sp, #24
    7210:	af00      	add	r7, sp, #0
    7212:	4603      	mov	r3, r0
    7214:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7216:	79fb      	ldrb	r3, [r7, #7]
    7218:	4618      	mov	r0, r3
    721a:	4b1a      	ldr	r3, [pc, #104]	; (7284 <_usb_d_ep_halt_clr+0x78>)
    721c:	4798      	blx	r3
    721e:	4603      	mov	r3, r0
    7220:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7222:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7226:	015b      	lsls	r3, r3, #5
    7228:	4a17      	ldr	r2, [pc, #92]	; (7288 <_usb_d_ep_halt_clr+0x7c>)
    722a:	4413      	add	r3, r2
    722c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    722e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7232:	2b00      	cmp	r3, #0
    7234:	da02      	bge.n	723c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7236:	f06f 0311 	mvn.w	r3, #17
    723a:	e01f      	b.n	727c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    723c:	79fb      	ldrb	r3, [r7, #7]
    723e:	2102      	movs	r1, #2
    7240:	4618      	mov	r0, r3
    7242:	4b12      	ldr	r3, [pc, #72]	; (728c <_usb_d_ep_halt_clr+0x80>)
    7244:	4798      	blx	r3
    7246:	4603      	mov	r3, r0
    7248:	2b00      	cmp	r3, #0
    724a:	d016      	beq.n	727a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    724c:	79fb      	ldrb	r3, [r7, #7]
    724e:	2100      	movs	r1, #0
    7250:	4618      	mov	r0, r3
    7252:	4b0e      	ldr	r3, [pc, #56]	; (728c <_usb_d_ep_halt_clr+0x80>)
    7254:	4798      	blx	r3
    7256:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7258:	68fb      	ldr	r3, [r7, #12]
    725a:	2b00      	cmp	r3, #0
    725c:	da01      	bge.n	7262 <_usb_d_ep_halt_clr+0x56>
			return rc;
    725e:	68fb      	ldr	r3, [r7, #12]
    7260:	e00c      	b.n	727c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7262:	693b      	ldr	r3, [r7, #16]
    7264:	2201      	movs	r2, #1
    7266:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    7268:	693b      	ldr	r3, [r7, #16]
    726a:	2203      	movs	r2, #3
    726c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    726e:	693b      	ldr	r3, [r7, #16]
    7270:	69db      	ldr	r3, [r3, #28]
    7272:	79f8      	ldrb	r0, [r7, #7]
    7274:	2200      	movs	r2, #0
    7276:	2103      	movs	r1, #3
    7278:	4798      	blx	r3
	}
	return ERR_NONE;
    727a:	2300      	movs	r3, #0
}
    727c:	4618      	mov	r0, r3
    727e:	3718      	adds	r7, #24
    7280:	46bd      	mov	sp, r7
    7282:	bd80      	pop	{r7, pc}
    7284:	00006a61 	.word	0x00006a61
    7288:	20001aa0 	.word	0x20001aa0
    728c:	0000e829 	.word	0x0000e829

00007290 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    7290:	b580      	push	{r7, lr}
    7292:	b082      	sub	sp, #8
    7294:	af00      	add	r7, sp, #0
    7296:	4603      	mov	r3, r0
    7298:	460a      	mov	r2, r1
    729a:	71fb      	strb	r3, [r7, #7]
    729c:	4613      	mov	r3, r2
    729e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    72a0:	79bb      	ldrb	r3, [r7, #6]
    72a2:	2b00      	cmp	r3, #0
    72a4:	d105      	bne.n	72b2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    72a6:	79fb      	ldrb	r3, [r7, #7]
    72a8:	4618      	mov	r0, r3
    72aa:	4b0c      	ldr	r3, [pc, #48]	; (72dc <usb_d_ep_halt+0x4c>)
    72ac:	4798      	blx	r3
    72ae:	4603      	mov	r3, r0
    72b0:	e00f      	b.n	72d2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    72b2:	79bb      	ldrb	r3, [r7, #6]
    72b4:	2b01      	cmp	r3, #1
    72b6:	d106      	bne.n	72c6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    72b8:	79fb      	ldrb	r3, [r7, #7]
    72ba:	2101      	movs	r1, #1
    72bc:	4618      	mov	r0, r3
    72be:	4b08      	ldr	r3, [pc, #32]	; (72e0 <usb_d_ep_halt+0x50>)
    72c0:	4798      	blx	r3
    72c2:	4603      	mov	r3, r0
    72c4:	e005      	b.n	72d2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    72c6:	79fb      	ldrb	r3, [r7, #7]
    72c8:	2102      	movs	r1, #2
    72ca:	4618      	mov	r0, r3
    72cc:	4b04      	ldr	r3, [pc, #16]	; (72e0 <usb_d_ep_halt+0x50>)
    72ce:	4798      	blx	r3
    72d0:	4603      	mov	r3, r0
	}
}
    72d2:	4618      	mov	r0, r3
    72d4:	3708      	adds	r7, #8
    72d6:	46bd      	mov	sp, r7
    72d8:	bd80      	pop	{r7, pc}
    72da:	bf00      	nop
    72dc:	0000720d 	.word	0x0000720d
    72e0:	0000e829 	.word	0x0000e829

000072e4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b086      	sub	sp, #24
    72e8:	af00      	add	r7, sp, #0
    72ea:	4603      	mov	r3, r0
    72ec:	603a      	str	r2, [r7, #0]
    72ee:	71fb      	strb	r3, [r7, #7]
    72f0:	460b      	mov	r3, r1
    72f2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    72f4:	79fb      	ldrb	r3, [r7, #7]
    72f6:	4618      	mov	r0, r3
    72f8:	4b16      	ldr	r3, [pc, #88]	; (7354 <usb_d_ep_register_callback+0x70>)
    72fa:	4798      	blx	r3
    72fc:	4603      	mov	r3, r0
    72fe:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7300:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7304:	015b      	lsls	r3, r3, #5
    7306:	4a14      	ldr	r2, [pc, #80]	; (7358 <usb_d_ep_register_callback+0x74>)
    7308:	4413      	add	r3, r2
    730a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    730c:	683b      	ldr	r3, [r7, #0]
    730e:	2b00      	cmp	r3, #0
    7310:	d001      	beq.n	7316 <usb_d_ep_register_callback+0x32>
    7312:	683b      	ldr	r3, [r7, #0]
    7314:	e000      	b.n	7318 <usb_d_ep_register_callback+0x34>
    7316:	4b11      	ldr	r3, [pc, #68]	; (735c <usb_d_ep_register_callback+0x78>)
    7318:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    731a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    731e:	2b00      	cmp	r3, #0
    7320:	db13      	blt.n	734a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    7322:	79bb      	ldrb	r3, [r7, #6]
    7324:	2b01      	cmp	r3, #1
    7326:	d008      	beq.n	733a <usb_d_ep_register_callback+0x56>
    7328:	2b02      	cmp	r3, #2
    732a:	d00a      	beq.n	7342 <usb_d_ep_register_callback+0x5e>
    732c:	2b00      	cmp	r3, #0
    732e:	d000      	beq.n	7332 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    7330:	e00c      	b.n	734c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    7332:	693b      	ldr	r3, [r7, #16]
    7334:	68fa      	ldr	r2, [r7, #12]
    7336:	615a      	str	r2, [r3, #20]
		break;
    7338:	e008      	b.n	734c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    733a:	693b      	ldr	r3, [r7, #16]
    733c:	68fa      	ldr	r2, [r7, #12]
    733e:	619a      	str	r2, [r3, #24]
		break;
    7340:	e004      	b.n	734c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    7342:	693b      	ldr	r3, [r7, #16]
    7344:	68fa      	ldr	r2, [r7, #12]
    7346:	61da      	str	r2, [r3, #28]
		break;
    7348:	e000      	b.n	734c <usb_d_ep_register_callback+0x68>
		return;
    734a:	bf00      	nop
	}
}
    734c:	3718      	adds	r7, #24
    734e:	46bd      	mov	sp, r7
    7350:	bd80      	pop	{r7, pc}
    7352:	bf00      	nop
    7354:	00006a61 	.word	0x00006a61
    7358:	20001aa0 	.word	0x20001aa0
    735c:	00006b35 	.word	0x00006b35

00007360 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    7360:	b480      	push	{r7}
    7362:	b085      	sub	sp, #20
    7364:	af00      	add	r7, sp, #0
    7366:	4603      	mov	r3, r0
    7368:	60b9      	str	r1, [r7, #8]
    736a:	607a      	str	r2, [r7, #4]
    736c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    736e:	7bfb      	ldrb	r3, [r7, #15]
    7370:	f083 0301 	eor.w	r3, r3, #1
    7374:	b2db      	uxtb	r3, r3
    7376:	2b00      	cmp	r3, #0
    7378:	d000      	beq.n	737c <assert+0x1c>
		__asm("BKPT #0");
    737a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    737c:	bf00      	nop
    737e:	3714      	adds	r7, #20
    7380:	46bd      	mov	sp, r7
    7382:	f85d 7b04 	ldr.w	r7, [sp], #4
    7386:	4770      	bx	lr

00007388 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    7388:	b480      	push	{r7}
    738a:	b085      	sub	sp, #20
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
    7390:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	60fb      	str	r3, [r7, #12]
    7398:	e008      	b.n	73ac <is_list_element+0x24>
		if (it == element) {
    739a:	68fa      	ldr	r2, [r7, #12]
    739c:	683b      	ldr	r3, [r7, #0]
    739e:	429a      	cmp	r2, r3
    73a0:	d101      	bne.n	73a6 <is_list_element+0x1e>
			return true;
    73a2:	2301      	movs	r3, #1
    73a4:	e006      	b.n	73b4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    73a6:	68fb      	ldr	r3, [r7, #12]
    73a8:	681b      	ldr	r3, [r3, #0]
    73aa:	60fb      	str	r3, [r7, #12]
    73ac:	68fb      	ldr	r3, [r7, #12]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d1f3      	bne.n	739a <is_list_element+0x12>
		}
	}

	return false;
    73b2:	2300      	movs	r3, #0
}
    73b4:	4618      	mov	r0, r3
    73b6:	3714      	adds	r7, #20
    73b8:	46bd      	mov	sp, r7
    73ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    73be:	4770      	bx	lr

000073c0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    73c0:	b580      	push	{r7, lr}
    73c2:	b082      	sub	sp, #8
    73c4:	af00      	add	r7, sp, #0
    73c6:	6078      	str	r0, [r7, #4]
    73c8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    73ca:	6839      	ldr	r1, [r7, #0]
    73cc:	6878      	ldr	r0, [r7, #4]
    73ce:	4b0f      	ldr	r3, [pc, #60]	; (740c <list_insert_as_head+0x4c>)
    73d0:	4798      	blx	r3
    73d2:	4603      	mov	r3, r0
    73d4:	2b00      	cmp	r3, #0
    73d6:	bf14      	ite	ne
    73d8:	2301      	movne	r3, #1
    73da:	2300      	moveq	r3, #0
    73dc:	b2db      	uxtb	r3, r3
    73de:	f083 0301 	eor.w	r3, r3, #1
    73e2:	b2db      	uxtb	r3, r3
    73e4:	f003 0301 	and.w	r3, r3, #1
    73e8:	b2db      	uxtb	r3, r3
    73ea:	2239      	movs	r2, #57	; 0x39
    73ec:	4908      	ldr	r1, [pc, #32]	; (7410 <list_insert_as_head+0x50>)
    73ee:	4618      	mov	r0, r3
    73f0:	4b08      	ldr	r3, [pc, #32]	; (7414 <list_insert_as_head+0x54>)
    73f2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	681a      	ldr	r2, [r3, #0]
    73f8:	683b      	ldr	r3, [r7, #0]
    73fa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	683a      	ldr	r2, [r7, #0]
    7400:	601a      	str	r2, [r3, #0]
}
    7402:	bf00      	nop
    7404:	3708      	adds	r7, #8
    7406:	46bd      	mov	sp, r7
    7408:	bd80      	pop	{r7, pc}
    740a:	bf00      	nop
    740c:	00007389 	.word	0x00007389
    7410:	00012ab8 	.word	0x00012ab8
    7414:	00007361 	.word	0x00007361

00007418 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7418:	b480      	push	{r7}
    741a:	b083      	sub	sp, #12
    741c:	af00      	add	r7, sp, #0
    741e:	6078      	str	r0, [r7, #4]
    7420:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	681a      	ldr	r2, [r3, #0]
    7426:	683b      	ldr	r3, [r7, #0]
    7428:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    742a:	687b      	ldr	r3, [r7, #4]
    742c:	683a      	ldr	r2, [r7, #0]
    742e:	601a      	str	r2, [r3, #0]
}
    7430:	bf00      	nop
    7432:	370c      	adds	r7, #12
    7434:	46bd      	mov	sp, r7
    7436:	f85d 7b04 	ldr.w	r7, [sp], #4
    743a:	4770      	bx	lr

0000743c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    743c:	b580      	push	{r7, lr}
    743e:	b084      	sub	sp, #16
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
    7444:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7446:	687b      	ldr	r3, [r7, #4]
    7448:	681b      	ldr	r3, [r3, #0]
    744a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    744c:	6839      	ldr	r1, [r7, #0]
    744e:	6878      	ldr	r0, [r7, #4]
    7450:	4b16      	ldr	r3, [pc, #88]	; (74ac <list_insert_at_end+0x70>)
    7452:	4798      	blx	r3
    7454:	4603      	mov	r3, r0
    7456:	2b00      	cmp	r3, #0
    7458:	bf14      	ite	ne
    745a:	2301      	movne	r3, #1
    745c:	2300      	moveq	r3, #0
    745e:	b2db      	uxtb	r3, r3
    7460:	f083 0301 	eor.w	r3, r3, #1
    7464:	b2db      	uxtb	r3, r3
    7466:	f003 0301 	and.w	r3, r3, #1
    746a:	b2db      	uxtb	r3, r3
    746c:	224f      	movs	r2, #79	; 0x4f
    746e:	4910      	ldr	r1, [pc, #64]	; (74b0 <list_insert_at_end+0x74>)
    7470:	4618      	mov	r0, r3
    7472:	4b10      	ldr	r3, [pc, #64]	; (74b4 <list_insert_at_end+0x78>)
    7474:	4798      	blx	r3

	if (!list->head) {
    7476:	687b      	ldr	r3, [r7, #4]
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	2b00      	cmp	r3, #0
    747c:	d109      	bne.n	7492 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    747e:	687b      	ldr	r3, [r7, #4]
    7480:	683a      	ldr	r2, [r7, #0]
    7482:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7484:	683b      	ldr	r3, [r7, #0]
    7486:	2200      	movs	r2, #0
    7488:	601a      	str	r2, [r3, #0]
		return;
    748a:	e00c      	b.n	74a6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    748c:	68fb      	ldr	r3, [r7, #12]
    748e:	681b      	ldr	r3, [r3, #0]
    7490:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7492:	68fb      	ldr	r3, [r7, #12]
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	2b00      	cmp	r3, #0
    7498:	d1f8      	bne.n	748c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    749a:	68fb      	ldr	r3, [r7, #12]
    749c:	683a      	ldr	r2, [r7, #0]
    749e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    74a0:	683b      	ldr	r3, [r7, #0]
    74a2:	2200      	movs	r2, #0
    74a4:	601a      	str	r2, [r3, #0]
}
    74a6:	3710      	adds	r7, #16
    74a8:	46bd      	mov	sp, r7
    74aa:	bd80      	pop	{r7, pc}
    74ac:	00007389 	.word	0x00007389
    74b0:	00012ab8 	.word	0x00012ab8
    74b4:	00007361 	.word	0x00007361

000074b8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    74b8:	b480      	push	{r7}
    74ba:	b085      	sub	sp, #20
    74bc:	af00      	add	r7, sp, #0
    74be:	6078      	str	r0, [r7, #4]
	if (list->head) {
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	681b      	ldr	r3, [r3, #0]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d009      	beq.n	74dc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	681b      	ldr	r3, [r3, #0]
    74cc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	681b      	ldr	r3, [r3, #0]
    74d2:	681a      	ldr	r2, [r3, #0]
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    74d8:	68fb      	ldr	r3, [r7, #12]
    74da:	e000      	b.n	74de <list_remove_head+0x26>
	}

	return NULL;
    74dc:	2300      	movs	r3, #0
}
    74de:	4618      	mov	r0, r3
    74e0:	3714      	adds	r7, #20
    74e2:	46bd      	mov	sp, r7
    74e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    74e8:	4770      	bx	lr

000074ea <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    74ea:	b480      	push	{r7}
    74ec:	b085      	sub	sp, #20
    74ee:	af00      	add	r7, sp, #0
    74f0:	6078      	str	r0, [r7, #4]
    74f2:	6039      	str	r1, [r7, #0]
	if (!element) {
    74f4:	683b      	ldr	r3, [r7, #0]
    74f6:	2b00      	cmp	r3, #0
    74f8:	d101      	bne.n	74fe <list_delete_element+0x14>
		return false;
    74fa:	2300      	movs	r3, #0
    74fc:	e024      	b.n	7548 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    74fe:	687b      	ldr	r3, [r7, #4]
    7500:	681a      	ldr	r2, [r3, #0]
    7502:	683b      	ldr	r3, [r7, #0]
    7504:	429a      	cmp	r2, r3
    7506:	d106      	bne.n	7516 <list_delete_element+0x2c>
		list->head = list->head->next;
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	681b      	ldr	r3, [r3, #0]
    750c:	681a      	ldr	r2, [r3, #0]
    750e:	687b      	ldr	r3, [r7, #4]
    7510:	601a      	str	r2, [r3, #0]
		return true;
    7512:	2301      	movs	r3, #1
    7514:	e018      	b.n	7548 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7516:	687b      	ldr	r3, [r7, #4]
    7518:	681b      	ldr	r3, [r3, #0]
    751a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    751c:	e002      	b.n	7524 <list_delete_element+0x3a>
			it = it->next;
    751e:	68fb      	ldr	r3, [r7, #12]
    7520:	681b      	ldr	r3, [r3, #0]
    7522:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7524:	68fb      	ldr	r3, [r7, #12]
    7526:	2b00      	cmp	r3, #0
    7528:	d004      	beq.n	7534 <list_delete_element+0x4a>
    752a:	68fb      	ldr	r3, [r7, #12]
    752c:	681a      	ldr	r2, [r3, #0]
    752e:	683b      	ldr	r3, [r7, #0]
    7530:	429a      	cmp	r2, r3
    7532:	d1f4      	bne.n	751e <list_delete_element+0x34>
		}
		if (it) {
    7534:	68fb      	ldr	r3, [r7, #12]
    7536:	2b00      	cmp	r3, #0
    7538:	d005      	beq.n	7546 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    753a:	683b      	ldr	r3, [r7, #0]
    753c:	681a      	ldr	r2, [r3, #0]
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	601a      	str	r2, [r3, #0]
			return true;
    7542:	2301      	movs	r3, #1
    7544:	e000      	b.n	7548 <list_delete_element+0x5e>
		}
	}

	return false;
    7546:	2300      	movs	r3, #0
}
    7548:	4618      	mov	r0, r3
    754a:	3714      	adds	r7, #20
    754c:	46bd      	mov	sp, r7
    754e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7552:	4770      	bx	lr

00007554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7554:	b480      	push	{r7}
    7556:	b083      	sub	sp, #12
    7558:	af00      	add	r7, sp, #0
    755a:	4603      	mov	r3, r0
    755c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    755e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7562:	2b00      	cmp	r3, #0
    7564:	db0b      	blt.n	757e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7566:	4909      	ldr	r1, [pc, #36]	; (758c <__NVIC_EnableIRQ+0x38>)
    7568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    756c:	095b      	lsrs	r3, r3, #5
    756e:	88fa      	ldrh	r2, [r7, #6]
    7570:	f002 021f 	and.w	r2, r2, #31
    7574:	2001      	movs	r0, #1
    7576:	fa00 f202 	lsl.w	r2, r0, r2
    757a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    757e:	bf00      	nop
    7580:	370c      	adds	r7, #12
    7582:	46bd      	mov	sp, r7
    7584:	f85d 7b04 	ldr.w	r7, [sp], #4
    7588:	4770      	bx	lr
    758a:	bf00      	nop
    758c:	e000e100 	.word	0xe000e100

00007590 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7590:	b480      	push	{r7}
    7592:	b083      	sub	sp, #12
    7594:	af00      	add	r7, sp, #0
    7596:	4603      	mov	r3, r0
    7598:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    759a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    759e:	2b00      	cmp	r3, #0
    75a0:	db10      	blt.n	75c4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75a2:	490b      	ldr	r1, [pc, #44]	; (75d0 <__NVIC_DisableIRQ+0x40>)
    75a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75a8:	095b      	lsrs	r3, r3, #5
    75aa:	88fa      	ldrh	r2, [r7, #6]
    75ac:	f002 021f 	and.w	r2, r2, #31
    75b0:	2001      	movs	r0, #1
    75b2:	fa00 f202 	lsl.w	r2, r0, r2
    75b6:	3320      	adds	r3, #32
    75b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    75bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    75c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    75c4:	bf00      	nop
    75c6:	370c      	adds	r7, #12
    75c8:	46bd      	mov	sp, r7
    75ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    75ce:	4770      	bx	lr
    75d0:	e000e100 	.word	0xe000e100

000075d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    75d4:	b480      	push	{r7}
    75d6:	b083      	sub	sp, #12
    75d8:	af00      	add	r7, sp, #0
    75da:	4603      	mov	r3, r0
    75dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    75de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75e2:	2b00      	cmp	r3, #0
    75e4:	db0c      	blt.n	7600 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75e6:	4909      	ldr	r1, [pc, #36]	; (760c <__NVIC_ClearPendingIRQ+0x38>)
    75e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75ec:	095b      	lsrs	r3, r3, #5
    75ee:	88fa      	ldrh	r2, [r7, #6]
    75f0:	f002 021f 	and.w	r2, r2, #31
    75f4:	2001      	movs	r0, #1
    75f6:	fa00 f202 	lsl.w	r2, r0, r2
    75fa:	3360      	adds	r3, #96	; 0x60
    75fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7600:	bf00      	nop
    7602:	370c      	adds	r7, #12
    7604:	46bd      	mov	sp, r7
    7606:	f85d 7b04 	ldr.w	r7, [sp], #4
    760a:	4770      	bx	lr
    760c:	e000e100 	.word	0xe000e100

00007610 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    7610:	b480      	push	{r7}
    7612:	b083      	sub	sp, #12
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    761c:	095b      	lsrs	r3, r3, #5
    761e:	f003 0301 	and.w	r3, r3, #1
    7622:	2b00      	cmp	r3, #0
    7624:	bf14      	ite	ne
    7626:	2301      	movne	r3, #1
    7628:	2300      	moveq	r3, #0
    762a:	b2db      	uxtb	r3, r3
}
    762c:	4618      	mov	r0, r3
    762e:	370c      	adds	r7, #12
    7630:	46bd      	mov	sp, r7
    7632:	f85d 7b04 	ldr.w	r7, [sp], #4
    7636:	4770      	bx	lr

00007638 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    7638:	b480      	push	{r7}
    763a:	b083      	sub	sp, #12
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    764a:	4618      	mov	r0, r3
    764c:	370c      	adds	r7, #12
    764e:	46bd      	mov	sp, r7
    7650:	f85d 7b04 	ldr.w	r7, [sp], #4
    7654:	4770      	bx	lr

00007656 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    7656:	b480      	push	{r7}
    7658:	b083      	sub	sp, #12
    765a:	af00      	add	r7, sp, #0
    765c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7664:	0a1b      	lsrs	r3, r3, #8
    7666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    766a:	4618      	mov	r0, r3
    766c:	370c      	adds	r7, #12
    766e:	46bd      	mov	sp, r7
    7670:	f85d 7b04 	ldr.w	r7, [sp], #4
    7674:	4770      	bx	lr

00007676 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    7676:	b480      	push	{r7}
    7678:	b083      	sub	sp, #12
    767a:	af00      	add	r7, sp, #0
    767c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    7684:	0d5b      	lsrs	r3, r3, #21
    7686:	f003 0301 	and.w	r3, r3, #1
    768a:	2b00      	cmp	r3, #0
    768c:	bf14      	ite	ne
    768e:	2301      	movne	r3, #1
    7690:	2300      	moveq	r3, #0
    7692:	b2db      	uxtb	r3, r3
}
    7694:	4618      	mov	r0, r3
    7696:	370c      	adds	r7, #12
    7698:	46bd      	mov	sp, r7
    769a:	f85d 7b04 	ldr.w	r7, [sp], #4
    769e:	4770      	bx	lr

000076a0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    76a0:	b480      	push	{r7}
    76a2:	b083      	sub	sp, #12
    76a4:	af00      	add	r7, sp, #0
    76a6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    76ae:	0c1b      	lsrs	r3, r3, #16
    76b0:	f003 031f 	and.w	r3, r3, #31
}
    76b4:	4618      	mov	r0, r3
    76b6:	370c      	adds	r7, #12
    76b8:	46bd      	mov	sp, r7
    76ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    76be:	4770      	bx	lr

000076c0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    76c0:	b480      	push	{r7}
    76c2:	b083      	sub	sp, #12
    76c4:	af00      	add	r7, sp, #0
    76c6:	6078      	str	r0, [r7, #4]
    76c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	683a      	ldr	r2, [r7, #0]
    76ce:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    76d0:	bf00      	nop
    76d2:	370c      	adds	r7, #12
    76d4:	46bd      	mov	sp, r7
    76d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76da:	4770      	bx	lr

000076dc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    76dc:	b480      	push	{r7}
    76de:	b083      	sub	sp, #12
    76e0:	af00      	add	r7, sp, #0
    76e2:	6078      	str	r0, [r7, #4]
    76e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	683a      	ldr	r2, [r7, #0]
    76ea:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    76ec:	bf00      	nop
    76ee:	370c      	adds	r7, #12
    76f0:	46bd      	mov	sp, r7
    76f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    76f6:	4770      	bx	lr

000076f8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    76f8:	b480      	push	{r7}
    76fa:	b083      	sub	sp, #12
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	699b      	ldr	r3, [r3, #24]
    7704:	f043 0201 	orr.w	r2, r3, #1
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    770c:	bf00      	nop
    770e:	370c      	adds	r7, #12
    7710:	46bd      	mov	sp, r7
    7712:	f85d 7b04 	ldr.w	r7, [sp], #4
    7716:	4770      	bx	lr

00007718 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    7718:	b480      	push	{r7}
    771a:	b085      	sub	sp, #20
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	699b      	ldr	r3, [r3, #24]
    7724:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    7726:	68fb      	ldr	r3, [r7, #12]
    7728:	f003 0301 	and.w	r3, r3, #1
    772c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    772e:	68fb      	ldr	r3, [r7, #12]
    7730:	2b00      	cmp	r3, #0
    7732:	bf14      	ite	ne
    7734:	2301      	movne	r3, #1
    7736:	2300      	moveq	r3, #0
    7738:	b2db      	uxtb	r3, r3
}
    773a:	4618      	mov	r0, r3
    773c:	3714      	adds	r7, #20
    773e:	46bd      	mov	sp, r7
    7740:	f85d 7b04 	ldr.w	r7, [sp], #4
    7744:	4770      	bx	lr

00007746 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    7746:	b480      	push	{r7}
    7748:	b083      	sub	sp, #12
    774a:	af00      	add	r7, sp, #0
    774c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    774e:	687b      	ldr	r3, [r7, #4]
    7750:	699b      	ldr	r3, [r3, #24]
    7752:	f023 0201 	bic.w	r2, r3, #1
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    775a:	bf00      	nop
    775c:	370c      	adds	r7, #12
    775e:	46bd      	mov	sp, r7
    7760:	f85d 7b04 	ldr.w	r7, [sp], #4
    7764:	4770      	bx	lr

00007766 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    7766:	b480      	push	{r7}
    7768:	b083      	sub	sp, #12
    776a:	af00      	add	r7, sp, #0
    776c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	699b      	ldr	r3, [r3, #24]
    7772:	f043 0202 	orr.w	r2, r3, #2
    7776:	687b      	ldr	r3, [r7, #4]
    7778:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    777a:	bf00      	nop
    777c:	370c      	adds	r7, #12
    777e:	46bd      	mov	sp, r7
    7780:	f85d 7b04 	ldr.w	r7, [sp], #4
    7784:	4770      	bx	lr

00007786 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    7786:	b480      	push	{r7}
    7788:	b083      	sub	sp, #12
    778a:	af00      	add	r7, sp, #0
    778c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    778e:	687b      	ldr	r3, [r7, #4]
    7790:	699b      	ldr	r3, [r3, #24]
    7792:	f023 0202 	bic.w	r2, r3, #2
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    779a:	bf00      	nop
    779c:	370c      	adds	r7, #12
    779e:	46bd      	mov	sp, r7
    77a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77a4:	4770      	bx	lr

000077a6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    77a6:	b480      	push	{r7}
    77a8:	b085      	sub	sp, #20
    77aa:	af00      	add	r7, sp, #0
    77ac:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	699b      	ldr	r3, [r3, #24]
    77b2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    77b4:	68fb      	ldr	r3, [r7, #12]
    77b6:	0a1b      	lsrs	r3, r3, #8
    77b8:	f003 0301 	and.w	r3, r3, #1
    77bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    77be:	68fb      	ldr	r3, [r7, #12]
    77c0:	2b00      	cmp	r3, #0
    77c2:	bf14      	ite	ne
    77c4:	2301      	movne	r3, #1
    77c6:	2300      	moveq	r3, #0
    77c8:	b2db      	uxtb	r3, r3
}
    77ca:	4618      	mov	r0, r3
    77cc:	3714      	adds	r7, #20
    77ce:	46bd      	mov	sp, r7
    77d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    77d4:	4770      	bx	lr

000077d6 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    77d6:	b480      	push	{r7}
    77d8:	b085      	sub	sp, #20
    77da:	af00      	add	r7, sp, #0
    77dc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	699b      	ldr	r3, [r3, #24]
    77e2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    77e4:	68fb      	ldr	r3, [r7, #12]
    77e6:	0a5b      	lsrs	r3, r3, #9
    77e8:	f003 0301 	and.w	r3, r3, #1
    77ec:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    77ee:	68fb      	ldr	r3, [r7, #12]
    77f0:	2b00      	cmp	r3, #0
    77f2:	bf14      	ite	ne
    77f4:	2301      	movne	r3, #1
    77f6:	2300      	moveq	r3, #0
    77f8:	b2db      	uxtb	r3, r3
}
    77fa:	4618      	mov	r0, r3
    77fc:	3714      	adds	r7, #20
    77fe:	46bd      	mov	sp, r7
    7800:	f85d 7b04 	ldr.w	r7, [sp], #4
    7804:	4770      	bx	lr

00007806 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    7806:	b480      	push	{r7}
    7808:	b083      	sub	sp, #12
    780a:	af00      	add	r7, sp, #0
    780c:	6078      	str	r0, [r7, #4]
    780e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	699a      	ldr	r2, [r3, #24]
    7814:	683b      	ldr	r3, [r7, #0]
    7816:	431a      	orrs	r2, r3
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    781c:	bf00      	nop
    781e:	370c      	adds	r7, #12
    7820:	46bd      	mov	sp, r7
    7822:	f85d 7b04 	ldr.w	r7, [sp], #4
    7826:	4770      	bx	lr

00007828 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    7828:	b480      	push	{r7}
    782a:	b083      	sub	sp, #12
    782c:	af00      	add	r7, sp, #0
    782e:	6078      	str	r0, [r7, #4]
    7830:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    7832:	687b      	ldr	r3, [r7, #4]
    7834:	683a      	ldr	r2, [r7, #0]
    7836:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7838:	bf00      	nop
    783a:	370c      	adds	r7, #12
    783c:	46bd      	mov	sp, r7
    783e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7842:	4770      	bx	lr

00007844 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    7844:	b480      	push	{r7}
    7846:	b083      	sub	sp, #12
    7848:	af00      	add	r7, sp, #0
    784a:	6078      	str	r0, [r7, #4]
    784c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	683a      	ldr	r2, [r7, #0]
    7852:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    7854:	bf00      	nop
    7856:	370c      	adds	r7, #12
    7858:	46bd      	mov	sp, r7
    785a:	f85d 7b04 	ldr.w	r7, [sp], #4
    785e:	4770      	bx	lr

00007860 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    7860:	b480      	push	{r7}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
    7866:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    786c:	4618      	mov	r0, r3
    786e:	370c      	adds	r7, #12
    7870:	46bd      	mov	sp, r7
    7872:	f85d 7b04 	ldr.w	r7, [sp], #4
    7876:	4770      	bx	lr

00007878 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    7878:	b480      	push	{r7}
    787a:	b085      	sub	sp, #20
    787c:	af00      	add	r7, sp, #0
    787e:	6078      	str	r0, [r7, #4]
    7880:	460b      	mov	r3, r1
    7882:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7888:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    788a:	68fb      	ldr	r3, [r7, #12]
    788c:	f023 0301 	bic.w	r3, r3, #1
    7890:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    7892:	78fb      	ldrb	r3, [r7, #3]
    7894:	68fa      	ldr	r2, [r7, #12]
    7896:	4313      	orrs	r3, r2
    7898:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	68fa      	ldr	r2, [r7, #12]
    789e:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    78a0:	bf00      	nop
    78a2:	3714      	adds	r7, #20
    78a4:	46bd      	mov	sp, r7
    78a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    78aa:	4770      	bx	lr

000078ac <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    78ac:	b480      	push	{r7}
    78ae:	b085      	sub	sp, #20
    78b0:	af00      	add	r7, sp, #0
    78b2:	6078      	str	r0, [r7, #4]
    78b4:	460b      	mov	r3, r1
    78b6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    78b8:	687b      	ldr	r3, [r7, #4]
    78ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    78bc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    78be:	68fb      	ldr	r3, [r7, #12]
    78c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    78c4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    78c6:	78fb      	ldrb	r3, [r7, #3]
    78c8:	025b      	lsls	r3, r3, #9
    78ca:	461a      	mov	r2, r3
    78cc:	68fb      	ldr	r3, [r7, #12]
    78ce:	4313      	orrs	r3, r2
    78d0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	68fa      	ldr	r2, [r7, #12]
    78d6:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    78d8:	bf00      	nop
    78da:	3714      	adds	r7, #20
    78dc:	46bd      	mov	sp, r7
    78de:	f85d 7b04 	ldr.w	r7, [sp], #4
    78e2:	4770      	bx	lr

000078e4 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    78e4:	b480      	push	{r7}
    78e6:	b085      	sub	sp, #20
    78e8:	af00      	add	r7, sp, #0
    78ea:	6078      	str	r0, [r7, #4]
    78ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    78ee:	687b      	ldr	r3, [r7, #4]
    78f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    78f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    78f4:	68fa      	ldr	r2, [r7, #12]
    78f6:	683b      	ldr	r3, [r7, #0]
    78f8:	4013      	ands	r3, r2
    78fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    78fc:	68fb      	ldr	r3, [r7, #12]
}
    78fe:	4618      	mov	r0, r3
    7900:	3714      	adds	r7, #20
    7902:	46bd      	mov	sp, r7
    7904:	f85d 7b04 	ldr.w	r7, [sp], #4
    7908:	4770      	bx	lr

0000790a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    790a:	b480      	push	{r7}
    790c:	b083      	sub	sp, #12
    790e:	af00      	add	r7, sp, #0
    7910:	6078      	str	r0, [r7, #4]
    7912:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	683a      	ldr	r2, [r7, #0]
    7918:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    791a:	bf00      	nop
    791c:	370c      	adds	r7, #12
    791e:	46bd      	mov	sp, r7
    7920:	f85d 7b04 	ldr.w	r7, [sp], #4
    7924:	4770      	bx	lr

00007926 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    7926:	b480      	push	{r7}
    7928:	b083      	sub	sp, #12
    792a:	af00      	add	r7, sp, #0
    792c:	6078      	str	r0, [r7, #4]
    792e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	683a      	ldr	r2, [r7, #0]
    7934:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    7936:	bf00      	nop
    7938:	370c      	adds	r7, #12
    793a:	46bd      	mov	sp, r7
    793c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7940:	4770      	bx	lr

00007942 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    7942:	b480      	push	{r7}
    7944:	b083      	sub	sp, #12
    7946:	af00      	add	r7, sp, #0
    7948:	6078      	str	r0, [r7, #4]
    794a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	683a      	ldr	r2, [r7, #0]
    7950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    7954:	bf00      	nop
    7956:	370c      	adds	r7, #12
    7958:	46bd      	mov	sp, r7
    795a:	f85d 7b04 	ldr.w	r7, [sp], #4
    795e:	4770      	bx	lr

00007960 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    7960:	b480      	push	{r7}
    7962:	b083      	sub	sp, #12
    7964:	af00      	add	r7, sp, #0
    7966:	6078      	str	r0, [r7, #4]
    7968:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    796a:	687b      	ldr	r3, [r7, #4]
    796c:	683a      	ldr	r2, [r7, #0]
    796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    7972:	bf00      	nop
    7974:	370c      	adds	r7, #12
    7976:	46bd      	mov	sp, r7
    7978:	f85d 7b04 	ldr.w	r7, [sp], #4
    797c:	4770      	bx	lr

0000797e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    797e:	b480      	push	{r7}
    7980:	b083      	sub	sp, #12
    7982:	af00      	add	r7, sp, #0
    7984:	6078      	str	r0, [r7, #4]
    7986:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    7988:	687b      	ldr	r3, [r7, #4]
    798a:	683a      	ldr	r2, [r7, #0]
    798c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    7990:	bf00      	nop
    7992:	370c      	adds	r7, #12
    7994:	46bd      	mov	sp, r7
    7996:	f85d 7b04 	ldr.w	r7, [sp], #4
    799a:	4770      	bx	lr

0000799c <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    799c:	b480      	push	{r7}
    799e:	b083      	sub	sp, #12
    79a0:	af00      	add	r7, sp, #0
    79a2:	6078      	str	r0, [r7, #4]
    79a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	683a      	ldr	r2, [r7, #0]
    79aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    79ae:	bf00      	nop
    79b0:	370c      	adds	r7, #12
    79b2:	46bd      	mov	sp, r7
    79b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79b8:	4770      	bx	lr

000079ba <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    79ba:	b480      	push	{r7}
    79bc:	b083      	sub	sp, #12
    79be:	af00      	add	r7, sp, #0
    79c0:	6078      	str	r0, [r7, #4]
    79c2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	683a      	ldr	r2, [r7, #0]
    79c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    79cc:	bf00      	nop
    79ce:	370c      	adds	r7, #12
    79d0:	46bd      	mov	sp, r7
    79d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d6:	4770      	bx	lr

000079d8 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    79d8:	b480      	push	{r7}
    79da:	b085      	sub	sp, #20
    79dc:	af00      	add	r7, sp, #0
    79de:	6078      	str	r0, [r7, #4]
    79e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    79e2:	687b      	ldr	r3, [r7, #4]
    79e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    79e8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    79ea:	68fb      	ldr	r3, [r7, #12]
    79ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    79f0:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    79f2:	683b      	ldr	r3, [r7, #0]
    79f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    79f8:	68fa      	ldr	r2, [r7, #12]
    79fa:	4313      	orrs	r3, r2
    79fc:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	68fa      	ldr	r2, [r7, #12]
    7a02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a06:	bf00      	nop
    7a08:	3714      	adds	r7, #20
    7a0a:	46bd      	mov	sp, r7
    7a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a10:	4770      	bx	lr

00007a12 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    7a12:	b480      	push	{r7}
    7a14:	b083      	sub	sp, #12
    7a16:	af00      	add	r7, sp, #0
    7a18:	6078      	str	r0, [r7, #4]
    7a1a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	683a      	ldr	r2, [r7, #0]
    7a20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a24:	bf00      	nop
    7a26:	370c      	adds	r7, #12
    7a28:	46bd      	mov	sp, r7
    7a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2e:	4770      	bx	lr

00007a30 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	683a      	ldr	r2, [r7, #0]
    7a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a42:	bf00      	nop
    7a44:	370c      	adds	r7, #12
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr

00007a4e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    7a4e:	b480      	push	{r7}
    7a50:	b083      	sub	sp, #12
    7a52:	af00      	add	r7, sp, #0
    7a54:	6078      	str	r0, [r7, #4]
    7a56:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    7a58:	687b      	ldr	r3, [r7, #4]
    7a5a:	683a      	ldr	r2, [r7, #0]
    7a5c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a60:	bf00      	nop
    7a62:	370c      	adds	r7, #12
    7a64:	46bd      	mov	sp, r7
    7a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6a:	4770      	bx	lr

00007a6c <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    7a6c:	b480      	push	{r7}
    7a6e:	b083      	sub	sp, #12
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
    7a74:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    7a76:	687b      	ldr	r3, [r7, #4]
    7a78:	683a      	ldr	r2, [r7, #0]
    7a7a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a7e:	bf00      	nop
    7a80:	370c      	adds	r7, #12
    7a82:	46bd      	mov	sp, r7
    7a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a88:	4770      	bx	lr

00007a8a <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    7a8a:	b480      	push	{r7}
    7a8c:	b083      	sub	sp, #12
    7a8e:	af00      	add	r7, sp, #0
    7a90:	6078      	str	r0, [r7, #4]
    7a92:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	683a      	ldr	r2, [r7, #0]
    7a98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7a9c:	bf00      	nop
    7a9e:	370c      	adds	r7, #12
    7aa0:	46bd      	mov	sp, r7
    7aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa6:	4770      	bx	lr

00007aa8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    7aa8:	b480      	push	{r7}
    7aaa:	b083      	sub	sp, #12
    7aac:	af00      	add	r7, sp, #0
    7aae:	6078      	str	r0, [r7, #4]
    7ab0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	683a      	ldr	r2, [r7, #0]
    7ab6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7aba:	bf00      	nop
    7abc:	370c      	adds	r7, #12
    7abe:	46bd      	mov	sp, r7
    7ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ac4:	4770      	bx	lr
	...

00007ac8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	b082      	sub	sp, #8
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
    7ad0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    7ad2:	687b      	ldr	r3, [r7, #4]
    7ad4:	683a      	ldr	r2, [r7, #0]
    7ad6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	681b      	ldr	r3, [r3, #0]
    7adc:	4618      	mov	r0, r3
    7ade:	4b56      	ldr	r3, [pc, #344]	; (7c38 <_can_async_init+0x170>)
    7ae0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    7ae2:	bf00      	nop
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	681b      	ldr	r3, [r3, #0]
    7ae8:	4618      	mov	r0, r3
    7aea:	4b54      	ldr	r3, [pc, #336]	; (7c3c <_can_async_init+0x174>)
    7aec:	4798      	blx	r3
    7aee:	4603      	mov	r3, r0
    7af0:	f083 0301 	eor.w	r3, r3, #1
    7af4:	b2db      	uxtb	r3, r3
    7af6:	2b00      	cmp	r3, #0
    7af8:	d1f4      	bne.n	7ae4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	681b      	ldr	r3, [r3, #0]
    7afe:	4618      	mov	r0, r3
    7b00:	4b4f      	ldr	r3, [pc, #316]	; (7c40 <_can_async_init+0x178>)
    7b02:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    7b04:	683b      	ldr	r3, [r7, #0]
    7b06:	4a4f      	ldr	r2, [pc, #316]	; (7c44 <_can_async_init+0x17c>)
    7b08:	4293      	cmp	r3, r2
    7b0a:	d17c      	bne.n	7c06 <_can_async_init+0x13e>
		_can1_dev    = dev;
    7b0c:	4a4e      	ldr	r2, [pc, #312]	; (7c48 <_can_async_init+0x180>)
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    7b12:	687b      	ldr	r3, [r7, #4]
    7b14:	4a4d      	ldr	r2, [pc, #308]	; (7c4c <_can_async_init+0x184>)
    7b16:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    7b18:	687b      	ldr	r3, [r7, #4]
    7b1a:	681b      	ldr	r3, [r3, #0]
    7b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
    7b20:	4618      	mov	r0, r3
    7b22:	4b4b      	ldr	r3, [pc, #300]	; (7c50 <_can_async_init+0x188>)
    7b24:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	681b      	ldr	r3, [r3, #0]
    7b2a:	2102      	movs	r1, #2
    7b2c:	4618      	mov	r0, r3
    7b2e:	4b49      	ldr	r3, [pc, #292]	; (7c54 <_can_async_init+0x18c>)
    7b30:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    7b32:	687b      	ldr	r3, [r7, #4]
    7b34:	681b      	ldr	r3, [r3, #0]
    7b36:	f640 2103 	movw	r1, #2563	; 0xa03
    7b3a:	4618      	mov	r0, r3
    7b3c:	4b46      	ldr	r3, [pc, #280]	; (7c58 <_can_async_init+0x190>)
    7b3e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    7b48:	4618      	mov	r0, r3
    7b4a:	4b44      	ldr	r3, [pc, #272]	; (7c5c <_can_async_init+0x194>)
    7b4c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	681a      	ldr	r2, [r3, #0]
    7b52:	4b43      	ldr	r3, [pc, #268]	; (7c60 <_can_async_init+0x198>)
    7b54:	b29b      	uxth	r3, r3
    7b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7b5e:	4619      	mov	r1, r3
    7b60:	4610      	mov	r0, r2
    7b62:	4b40      	ldr	r3, [pc, #256]	; (7c64 <_can_async_init+0x19c>)
    7b64:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	681b      	ldr	r3, [r3, #0]
    7b6a:	2107      	movs	r1, #7
    7b6c:	4618      	mov	r0, r3
    7b6e:	4b3e      	ldr	r3, [pc, #248]	; (7c68 <_can_async_init+0x1a0>)
    7b70:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	681b      	ldr	r3, [r3, #0]
    7b76:	2107      	movs	r1, #7
    7b78:	4618      	mov	r0, r3
    7b7a:	4b3c      	ldr	r3, [pc, #240]	; (7c6c <_can_async_init+0x1a4>)
    7b7c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	681a      	ldr	r2, [r3, #0]
    7b82:	4b3b      	ldr	r3, [pc, #236]	; (7c70 <_can_async_init+0x1a8>)
    7b84:	b29b      	uxth	r3, r3
    7b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7b8a:	4619      	mov	r1, r3
    7b8c:	4610      	mov	r0, r2
    7b8e:	4b39      	ldr	r3, [pc, #228]	; (7c74 <_can_async_init+0x1ac>)
    7b90:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    7b92:	687b      	ldr	r3, [r7, #4]
    7b94:	681a      	ldr	r2, [r3, #0]
    7b96:	4b38      	ldr	r3, [pc, #224]	; (7c78 <_can_async_init+0x1b0>)
    7b98:	b29b      	uxth	r3, r3
    7b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7b9e:	4619      	mov	r1, r3
    7ba0:	4610      	mov	r0, r2
    7ba2:	4b36      	ldr	r3, [pc, #216]	; (7c7c <_can_async_init+0x1b4>)
    7ba4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	681b      	ldr	r3, [r3, #0]
    7baa:	2108      	movs	r1, #8
    7bac:	4618      	mov	r0, r3
    7bae:	4b34      	ldr	r3, [pc, #208]	; (7c80 <_can_async_init+0x1b8>)
    7bb0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	681a      	ldr	r2, [r3, #0]
    7bb6:	4b33      	ldr	r3, [pc, #204]	; (7c84 <_can_async_init+0x1bc>)
    7bb8:	b29b      	uxth	r3, r3
    7bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    7bbe:	4619      	mov	r1, r3
    7bc0:	4610      	mov	r0, r2
    7bc2:	4b31      	ldr	r3, [pc, #196]	; (7c88 <_can_async_init+0x1c0>)
    7bc4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    7bc6:	687b      	ldr	r3, [r7, #4]
    7bc8:	681a      	ldr	r2, [r3, #0]
    7bca:	4b30      	ldr	r3, [pc, #192]	; (7c8c <_can_async_init+0x1c4>)
    7bcc:	b29b      	uxth	r3, r3
    7bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7bd2:	4619      	mov	r1, r3
    7bd4:	4610      	mov	r0, r2
    7bd6:	4b2e      	ldr	r3, [pc, #184]	; (7c90 <_can_async_init+0x1c8>)
    7bd8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	681b      	ldr	r3, [r3, #0]
    7bde:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    7be2:	4618      	mov	r0, r3
    7be4:	4b2b      	ldr	r3, [pc, #172]	; (7c94 <_can_async_init+0x1cc>)
    7be6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    7be8:	204f      	movs	r0, #79	; 0x4f
    7bea:	4b2b      	ldr	r3, [pc, #172]	; (7c98 <_can_async_init+0x1d0>)
    7bec:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    7bee:	204f      	movs	r0, #79	; 0x4f
    7bf0:	4b2a      	ldr	r3, [pc, #168]	; (7c9c <_can_async_init+0x1d4>)
    7bf2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    7bf4:	204f      	movs	r0, #79	; 0x4f
    7bf6:	4b2a      	ldr	r3, [pc, #168]	; (7ca0 <_can_async_init+0x1d8>)
    7bf8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	2101      	movs	r1, #1
    7c00:	4618      	mov	r0, r3
    7c02:	4b28      	ldr	r3, [pc, #160]	; (7ca4 <_can_async_init+0x1dc>)
    7c04:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	681b      	ldr	r3, [r3, #0]
    7c0a:	4618      	mov	r0, r3
    7c0c:	4b26      	ldr	r3, [pc, #152]	; (7ca8 <_can_async_init+0x1e0>)
    7c0e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    7c10:	687b      	ldr	r3, [r7, #4]
    7c12:	681b      	ldr	r3, [r3, #0]
    7c14:	4618      	mov	r0, r3
    7c16:	4b25      	ldr	r3, [pc, #148]	; (7cac <_can_async_init+0x1e4>)
    7c18:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    7c1a:	bf00      	nop
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	4618      	mov	r0, r3
    7c22:	4b06      	ldr	r3, [pc, #24]	; (7c3c <_can_async_init+0x174>)
    7c24:	4798      	blx	r3
    7c26:	4603      	mov	r3, r0
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d1f7      	bne.n	7c1c <_can_async_init+0x154>
	};

	return ERR_NONE;
    7c2c:	2300      	movs	r3, #0
}
    7c2e:	4618      	mov	r0, r3
    7c30:	3708      	adds	r7, #8
    7c32:	46bd      	mov	sp, r7
    7c34:	bd80      	pop	{r7, pc}
    7c36:	bf00      	nop
    7c38:	000076f9 	.word	0x000076f9
    7c3c:	00007719 	.word	0x00007719
    7c40:	00007767 	.word	0x00007767
    7c44:	42000400 	.word	0x42000400
    7c48:	20001bc0 	.word	0x20001bc0
    7c4c:	200003fc 	.word	0x200003fc
    7c50:	00007807 	.word	0x00007807
    7c54:	000076c1 	.word	0x000076c1
    7c58:	00007829 	.word	0x00007829
    7c5c:	000076dd 	.word	0x000076dd
    7c60:	2000276c 	.word	0x2000276c
    7c64:	000079bb 	.word	0x000079bb
    7c68:	00007a13 	.word	0x00007a13
    7c6c:	00007a4f 	.word	0x00007a4f
    7c70:	20002724 	.word	0x20002724
    7c74:	00007a31 	.word	0x00007a31
    7c78:	20001b20 	.word	0x20001b20
    7c7c:	00007aa9 	.word	0x00007aa9
    7c80:	00007943 	.word	0x00007943
    7c84:	20001b30 	.word	0x20001b30
    7c88:	00007961 	.word	0x00007961
    7c8c:	20001bb0 	.word	0x20001bb0
    7c90:	0000797f 	.word	0x0000797f
    7c94:	0000799d 	.word	0x0000799d
    7c98:	00007591 	.word	0x00007591
    7c9c:	000075d5 	.word	0x000075d5
    7ca0:	00007555 	.word	0x00007555
    7ca4:	00007927 	.word	0x00007927
    7ca8:	00007787 	.word	0x00007787
    7cac:	00007747 	.word	0x00007747

00007cb0 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b082      	sub	sp, #8
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    7cb8:	687b      	ldr	r3, [r7, #4]
    7cba:	681b      	ldr	r3, [r3, #0]
    7cbc:	4618      	mov	r0, r3
    7cbe:	4b03      	ldr	r3, [pc, #12]	; (7ccc <_can_async_enable+0x1c>)
    7cc0:	4798      	blx	r3
	return ERR_NONE;
    7cc2:	2300      	movs	r3, #0
}
    7cc4:	4618      	mov	r0, r3
    7cc6:	3708      	adds	r7, #8
    7cc8:	46bd      	mov	sp, r7
    7cca:	bd80      	pop	{r7, pc}
    7ccc:	00007747 	.word	0x00007747

00007cd0 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    7cd0:	b590      	push	{r4, r7, lr}
    7cd2:	b089      	sub	sp, #36	; 0x24
    7cd4:	af00      	add	r7, sp, #0
    7cd6:	6078      	str	r0, [r7, #4]
    7cd8:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    7cda:	2300      	movs	r3, #0
    7cdc:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	4618      	mov	r0, r3
    7ce4:	4b37      	ldr	r3, [pc, #220]	; (7dc4 <_can_async_read+0xf4>)
    7ce6:	4798      	blx	r3
    7ce8:	4603      	mov	r3, r0
    7cea:	2b00      	cmp	r3, #0
    7cec:	d102      	bne.n	7cf4 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    7cee:	f06f 0309 	mvn.w	r3, #9
    7cf2:	e063      	b.n	7dbc <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	681b      	ldr	r3, [r3, #0]
    7cf8:	4618      	mov	r0, r3
    7cfa:	4b33      	ldr	r3, [pc, #204]	; (7dc8 <_can_async_read+0xf8>)
    7cfc:	4798      	blx	r3
    7cfe:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	4a31      	ldr	r2, [pc, #196]	; (7dcc <_can_async_read+0xfc>)
    7d06:	4293      	cmp	r3, r2
    7d08:	d108      	bne.n	7d1c <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    7d0a:	69ba      	ldr	r2, [r7, #24]
    7d0c:	4613      	mov	r3, r2
    7d0e:	00db      	lsls	r3, r3, #3
    7d10:	4413      	add	r3, r2
    7d12:	00db      	lsls	r3, r3, #3
    7d14:	461a      	mov	r2, r3
    7d16:	4b2e      	ldr	r3, [pc, #184]	; (7dd0 <_can_async_read+0x100>)
    7d18:	4413      	add	r3, r2
    7d1a:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    7d1c:	69fb      	ldr	r3, [r7, #28]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	d102      	bne.n	7d28 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    7d22:	f06f 031b 	mvn.w	r3, #27
    7d26:	e049      	b.n	7dbc <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    7d28:	69fb      	ldr	r3, [r7, #28]
    7d2a:	681b      	ldr	r3, [r3, #0]
    7d2c:	f3c3 7380 	ubfx	r3, r3, #30, #1
    7d30:	b2db      	uxtb	r3, r3
    7d32:	2b01      	cmp	r3, #1
    7d34:	d10a      	bne.n	7d4c <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	2201      	movs	r2, #1
    7d3a:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    7d3c:	69fb      	ldr	r3, [r7, #28]
    7d3e:	681b      	ldr	r3, [r3, #0]
    7d40:	f3c3 031c 	ubfx	r3, r3, #0, #29
    7d44:	461a      	mov	r2, r3
    7d46:	683b      	ldr	r3, [r7, #0]
    7d48:	601a      	str	r2, [r3, #0]
    7d4a:	e00a      	b.n	7d62 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    7d4c:	683b      	ldr	r3, [r7, #0]
    7d4e:	2200      	movs	r2, #0
    7d50:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    7d52:	69fb      	ldr	r3, [r7, #28]
    7d54:	681b      	ldr	r3, [r3, #0]
    7d56:	f3c3 031c 	ubfx	r3, r3, #0, #29
    7d5a:	149b      	asrs	r3, r3, #18
    7d5c:	461a      	mov	r2, r3
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    7d62:	69fb      	ldr	r3, [r7, #28]
    7d64:	681b      	ldr	r3, [r3, #0]
    7d66:	f3c3 7340 	ubfx	r3, r3, #29, #1
    7d6a:	b2db      	uxtb	r3, r3
    7d6c:	2b01      	cmp	r3, #1
    7d6e:	d102      	bne.n	7d76 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    7d70:	683b      	ldr	r3, [r7, #0]
    7d72:	2201      	movs	r2, #1
    7d74:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    7d76:	4b17      	ldr	r3, [pc, #92]	; (7dd4 <_can_async_read+0x104>)
    7d78:	f107 0408 	add.w	r4, r7, #8
    7d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    7d82:	69fb      	ldr	r3, [r7, #28]
    7d84:	685b      	ldr	r3, [r3, #4]
    7d86:	f3c3 4303 	ubfx	r3, r3, #16, #4
    7d8a:	b2db      	uxtb	r3, r3
    7d8c:	f107 0220 	add.w	r2, r7, #32
    7d90:	4413      	add	r3, r2
    7d92:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    7d96:	683b      	ldr	r3, [r7, #0]
    7d98:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    7d9a:	683b      	ldr	r3, [r7, #0]
    7d9c:	6898      	ldr	r0, [r3, #8]
    7d9e:	69fb      	ldr	r3, [r7, #28]
    7da0:	f103 0108 	add.w	r1, r3, #8
    7da4:	683b      	ldr	r3, [r7, #0]
    7da6:	7b1b      	ldrb	r3, [r3, #12]
    7da8:	461a      	mov	r2, r3
    7daa:	4b0b      	ldr	r3, [pc, #44]	; (7dd8 <_can_async_read+0x108>)
    7dac:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	681b      	ldr	r3, [r3, #0]
    7db2:	69b9      	ldr	r1, [r7, #24]
    7db4:	4618      	mov	r0, r3
    7db6:	4b09      	ldr	r3, [pc, #36]	; (7ddc <_can_async_read+0x10c>)
    7db8:	4798      	blx	r3

	return ERR_NONE;
    7dba:	2300      	movs	r3, #0
}
    7dbc:	4618      	mov	r0, r3
    7dbe:	3724      	adds	r7, #36	; 0x24
    7dc0:	46bd      	mov	sp, r7
    7dc2:	bd90      	pop	{r4, r7, pc}
    7dc4:	00007639 	.word	0x00007639
    7dc8:	00007657 	.word	0x00007657
    7dcc:	42000400 	.word	0x42000400
    7dd0:	2000276c 	.word	0x2000276c
    7dd4:	00012ad8 	.word	0x00012ad8
    7dd8:	00011c19 	.word	0x00011c19
    7ddc:	000079d9 	.word	0x000079d9

00007de0 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    7de0:	b590      	push	{r4, r7, lr}
    7de2:	b085      	sub	sp, #20
    7de4:	af00      	add	r7, sp, #0
    7de6:	6078      	str	r0, [r7, #4]
    7de8:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    7dea:	2300      	movs	r3, #0
    7dec:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    7dee:	687b      	ldr	r3, [r7, #4]
    7df0:	681b      	ldr	r3, [r3, #0]
    7df2:	4618      	mov	r0, r3
    7df4:	4b61      	ldr	r3, [pc, #388]	; (7f7c <_can_async_write+0x19c>)
    7df6:	4798      	blx	r3
    7df8:	4603      	mov	r3, r0
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d002      	beq.n	7e04 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    7dfe:	f06f 031b 	mvn.w	r3, #27
    7e02:	e0b7      	b.n	7f74 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	681b      	ldr	r3, [r3, #0]
    7e08:	4618      	mov	r0, r3
    7e0a:	4b5d      	ldr	r3, [pc, #372]	; (7f80 <_can_async_write+0x1a0>)
    7e0c:	4798      	blx	r3
    7e0e:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	681b      	ldr	r3, [r3, #0]
    7e14:	4a5b      	ldr	r2, [pc, #364]	; (7f84 <_can_async_write+0x1a4>)
    7e16:	4293      	cmp	r3, r2
    7e18:	d108      	bne.n	7e2c <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    7e1a:	68ba      	ldr	r2, [r7, #8]
    7e1c:	4613      	mov	r3, r2
    7e1e:	00db      	lsls	r3, r3, #3
    7e20:	4413      	add	r3, r2
    7e22:	00db      	lsls	r3, r3, #3
    7e24:	461a      	mov	r2, r3
    7e26:	4b58      	ldr	r3, [pc, #352]	; (7f88 <_can_async_write+0x1a8>)
    7e28:	4413      	add	r3, r2
    7e2a:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    7e2c:	68fb      	ldr	r3, [r7, #12]
    7e2e:	2b00      	cmp	r3, #0
    7e30:	d102      	bne.n	7e38 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    7e32:	f06f 031b 	mvn.w	r3, #27
    7e36:	e09d      	b.n	7f74 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	7b5b      	ldrb	r3, [r3, #13]
    7e3c:	2b01      	cmp	r3, #1
    7e3e:	d109      	bne.n	7e54 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    7e40:	683b      	ldr	r3, [r7, #0]
    7e42:	681a      	ldr	r2, [r3, #0]
    7e44:	68fb      	ldr	r3, [r7, #12]
    7e46:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    7e48:	68fa      	ldr	r2, [r7, #12]
    7e4a:	6813      	ldr	r3, [r2, #0]
    7e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    7e50:	6013      	str	r3, [r2, #0]
    7e52:	e004      	b.n	7e5e <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    7e54:	683b      	ldr	r3, [r7, #0]
    7e56:	681b      	ldr	r3, [r3, #0]
    7e58:	049a      	lsls	r2, r3, #18
    7e5a:	68fb      	ldr	r3, [r7, #12]
    7e5c:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    7e5e:	683b      	ldr	r3, [r7, #0]
    7e60:	7b1b      	ldrb	r3, [r3, #12]
    7e62:	2b08      	cmp	r3, #8
    7e64:	d80a      	bhi.n	7e7c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    7e66:	683b      	ldr	r3, [r7, #0]
    7e68:	7b1b      	ldrb	r3, [r3, #12]
    7e6a:	f003 030f 	and.w	r3, r3, #15
    7e6e:	b2d9      	uxtb	r1, r3
    7e70:	68fa      	ldr	r2, [r7, #12]
    7e72:	6853      	ldr	r3, [r2, #4]
    7e74:	f361 4313 	bfi	r3, r1, #16, #4
    7e78:	6053      	str	r3, [r2, #4]
    7e7a:	e04a      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    7e7c:	683b      	ldr	r3, [r7, #0]
    7e7e:	7b1b      	ldrb	r3, [r3, #12]
    7e80:	2b0c      	cmp	r3, #12
    7e82:	d806      	bhi.n	7e92 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    7e84:	68fa      	ldr	r2, [r7, #12]
    7e86:	6853      	ldr	r3, [r2, #4]
    7e88:	2109      	movs	r1, #9
    7e8a:	f361 4313 	bfi	r3, r1, #16, #4
    7e8e:	6053      	str	r3, [r2, #4]
    7e90:	e03f      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    7e92:	683b      	ldr	r3, [r7, #0]
    7e94:	7b1b      	ldrb	r3, [r3, #12]
    7e96:	2b10      	cmp	r3, #16
    7e98:	d806      	bhi.n	7ea8 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    7e9a:	68fa      	ldr	r2, [r7, #12]
    7e9c:	6853      	ldr	r3, [r2, #4]
    7e9e:	210a      	movs	r1, #10
    7ea0:	f361 4313 	bfi	r3, r1, #16, #4
    7ea4:	6053      	str	r3, [r2, #4]
    7ea6:	e034      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    7ea8:	683b      	ldr	r3, [r7, #0]
    7eaa:	7b1b      	ldrb	r3, [r3, #12]
    7eac:	2b14      	cmp	r3, #20
    7eae:	d806      	bhi.n	7ebe <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    7eb0:	68fa      	ldr	r2, [r7, #12]
    7eb2:	6853      	ldr	r3, [r2, #4]
    7eb4:	210b      	movs	r1, #11
    7eb6:	f361 4313 	bfi	r3, r1, #16, #4
    7eba:	6053      	str	r3, [r2, #4]
    7ebc:	e029      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    7ebe:	683b      	ldr	r3, [r7, #0]
    7ec0:	7b1b      	ldrb	r3, [r3, #12]
    7ec2:	2b18      	cmp	r3, #24
    7ec4:	d806      	bhi.n	7ed4 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    7ec6:	68fa      	ldr	r2, [r7, #12]
    7ec8:	6853      	ldr	r3, [r2, #4]
    7eca:	210c      	movs	r1, #12
    7ecc:	f361 4313 	bfi	r3, r1, #16, #4
    7ed0:	6053      	str	r3, [r2, #4]
    7ed2:	e01e      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    7ed4:	683b      	ldr	r3, [r7, #0]
    7ed6:	7b1b      	ldrb	r3, [r3, #12]
    7ed8:	2b20      	cmp	r3, #32
    7eda:	d806      	bhi.n	7eea <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    7edc:	68fa      	ldr	r2, [r7, #12]
    7ede:	6853      	ldr	r3, [r2, #4]
    7ee0:	210d      	movs	r1, #13
    7ee2:	f361 4313 	bfi	r3, r1, #16, #4
    7ee6:	6053      	str	r3, [r2, #4]
    7ee8:	e013      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    7eea:	683b      	ldr	r3, [r7, #0]
    7eec:	7b1b      	ldrb	r3, [r3, #12]
    7eee:	2b30      	cmp	r3, #48	; 0x30
    7ef0:	d806      	bhi.n	7f00 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    7ef2:	68fa      	ldr	r2, [r7, #12]
    7ef4:	6853      	ldr	r3, [r2, #4]
    7ef6:	210e      	movs	r1, #14
    7ef8:	f361 4313 	bfi	r3, r1, #16, #4
    7efc:	6053      	str	r3, [r2, #4]
    7efe:	e008      	b.n	7f12 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    7f00:	683b      	ldr	r3, [r7, #0]
    7f02:	7b1b      	ldrb	r3, [r3, #12]
    7f04:	2b40      	cmp	r3, #64	; 0x40
    7f06:	d804      	bhi.n	7f12 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    7f08:	68fa      	ldr	r2, [r7, #12]
    7f0a:	6853      	ldr	r3, [r2, #4]
    7f0c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    7f10:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	681b      	ldr	r3, [r3, #0]
    7f16:	4618      	mov	r0, r3
    7f18:	4b1c      	ldr	r3, [pc, #112]	; (7f8c <_can_async_write+0x1ac>)
    7f1a:	4798      	blx	r3
    7f1c:	4603      	mov	r3, r0
    7f1e:	4619      	mov	r1, r3
    7f20:	68fa      	ldr	r2, [r7, #12]
    7f22:	6853      	ldr	r3, [r2, #4]
    7f24:	f361 5355 	bfi	r3, r1, #21, #1
    7f28:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	4618      	mov	r0, r3
    7f30:	4b17      	ldr	r3, [pc, #92]	; (7f90 <_can_async_write+0x1b0>)
    7f32:	4798      	blx	r3
    7f34:	4603      	mov	r3, r0
    7f36:	4619      	mov	r1, r3
    7f38:	68fa      	ldr	r2, [r7, #12]
    7f3a:	6853      	ldr	r3, [r2, #4]
    7f3c:	f361 5314 	bfi	r3, r1, #20, #1
    7f40:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    7f42:	68fb      	ldr	r3, [r7, #12]
    7f44:	f103 0008 	add.w	r0, r3, #8
    7f48:	683b      	ldr	r3, [r7, #0]
    7f4a:	6899      	ldr	r1, [r3, #8]
    7f4c:	683b      	ldr	r3, [r7, #0]
    7f4e:	7b1b      	ldrb	r3, [r3, #12]
    7f50:	461a      	mov	r2, r3
    7f52:	4b10      	ldr	r3, [pc, #64]	; (7f94 <_can_async_write+0x1b4>)
    7f54:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	681c      	ldr	r4, [r3, #0]
    7f5a:	687b      	ldr	r3, [r7, #4]
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	4618      	mov	r0, r3
    7f60:	4b07      	ldr	r3, [pc, #28]	; (7f80 <_can_async_write+0x1a0>)
    7f62:	4798      	blx	r3
    7f64:	4602      	mov	r2, r0
    7f66:	2301      	movs	r3, #1
    7f68:	4093      	lsls	r3, r2
    7f6a:	4619      	mov	r1, r3
    7f6c:	4620      	mov	r0, r4
    7f6e:	4b0a      	ldr	r3, [pc, #40]	; (7f98 <_can_async_write+0x1b8>)
    7f70:	4798      	blx	r3
	return ERR_NONE;
    7f72:	2300      	movs	r3, #0
}
    7f74:	4618      	mov	r0, r3
    7f76:	3714      	adds	r7, #20
    7f78:	46bd      	mov	sp, r7
    7f7a:	bd90      	pop	{r4, r7, pc}
    7f7c:	00007677 	.word	0x00007677
    7f80:	000076a1 	.word	0x000076a1
    7f84:	42000400 	.word	0x42000400
    7f88:	20002724 	.word	0x20002724
    7f8c:	000077a7 	.word	0x000077a7
    7f90:	000077d7 	.word	0x000077d7
    7f94:	00011c19 	.word	0x00011c19
    7f98:	00007a6d 	.word	0x00007a6d

00007f9c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	b084      	sub	sp, #16
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	6078      	str	r0, [r7, #4]
    7fa4:	460b      	mov	r3, r1
    7fa6:	70fb      	strb	r3, [r7, #3]
    7fa8:	4613      	mov	r3, r2
    7faa:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    7fac:	78fb      	ldrb	r3, [r7, #3]
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d107      	bne.n	7fc2 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    7fb2:	687b      	ldr	r3, [r7, #4]
    7fb4:	681b      	ldr	r3, [r3, #0]
    7fb6:	78ba      	ldrb	r2, [r7, #2]
    7fb8:	4611      	mov	r1, r2
    7fba:	4618      	mov	r0, r3
    7fbc:	4b16      	ldr	r3, [pc, #88]	; (8018 <_can_async_set_irq_state+0x7c>)
    7fbe:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    7fc0:	e026      	b.n	8010 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    7fc2:	78fb      	ldrb	r3, [r7, #3]
    7fc4:	2b01      	cmp	r3, #1
    7fc6:	d10e      	bne.n	7fe6 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	681b      	ldr	r3, [r3, #0]
    7fcc:	78ba      	ldrb	r2, [r7, #2]
    7fce:	4611      	mov	r1, r2
    7fd0:	4618      	mov	r0, r3
    7fd2:	4b12      	ldr	r3, [pc, #72]	; (801c <_can_async_set_irq_state+0x80>)
    7fd4:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	681b      	ldr	r3, [r3, #0]
    7fda:	f04f 31ff 	mov.w	r1, #4294967295
    7fde:	4618      	mov	r0, r3
    7fe0:	4b0f      	ldr	r3, [pc, #60]	; (8020 <_can_async_set_irq_state+0x84>)
    7fe2:	4798      	blx	r3
	return;
    7fe4:	e014      	b.n	8010 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    7fe6:	78fb      	ldrb	r3, [r7, #3]
    7fe8:	2b02      	cmp	r3, #2
    7fea:	d111      	bne.n	8010 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	f240 2101 	movw	r1, #513	; 0x201
    7ff4:	4618      	mov	r0, r3
    7ff6:	4b0b      	ldr	r3, [pc, #44]	; (8024 <_can_async_set_irq_state+0x88>)
    7ff8:	4798      	blx	r3
    7ffa:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	681a      	ldr	r2, [r3, #0]
    8000:	68fb      	ldr	r3, [r7, #12]
    8002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8006:	4619      	mov	r1, r3
    8008:	4610      	mov	r0, r2
    800a:	4b07      	ldr	r3, [pc, #28]	; (8028 <_can_async_set_irq_state+0x8c>)
    800c:	4798      	blx	r3
	return;
    800e:	bf00      	nop
    8010:	bf00      	nop
}
    8012:	3710      	adds	r7, #16
    8014:	46bd      	mov	sp, r7
    8016:	bd80      	pop	{r7, pc}
    8018:	00007879 	.word	0x00007879
    801c:	000078ad 	.word	0x000078ad
    8020:	00007a8b 	.word	0x00007a8b
    8024:	000078e5 	.word	0x000078e5
    8028:	0000790b 	.word	0x0000790b

0000802c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    802c:	b480      	push	{r7}
    802e:	b087      	sub	sp, #28
    8030:	af00      	add	r7, sp, #0
    8032:	60f8      	str	r0, [r7, #12]
    8034:	607b      	str	r3, [r7, #4]
    8036:	460b      	mov	r3, r1
    8038:	72fb      	strb	r3, [r7, #11]
    803a:	4613      	mov	r3, r2
    803c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    803e:	68fb      	ldr	r3, [r7, #12]
    8040:	699b      	ldr	r3, [r3, #24]
    8042:	68da      	ldr	r2, [r3, #12]
    8044:	7afb      	ldrb	r3, [r7, #11]
    8046:	009b      	lsls	r3, r3, #2
    8048:	4413      	add	r3, r2
    804a:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    804c:	68fb      	ldr	r3, [r7, #12]
    804e:	699b      	ldr	r3, [r3, #24]
    8050:	691a      	ldr	r2, [r3, #16]
    8052:	7afb      	ldrb	r3, [r7, #11]
    8054:	00db      	lsls	r3, r3, #3
    8056:	4413      	add	r3, r2
    8058:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    805a:	7abb      	ldrb	r3, [r7, #10]
    805c:	2b00      	cmp	r3, #0
    805e:	d123      	bne.n	80a8 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	2b00      	cmp	r3, #0
    8064:	d104      	bne.n	8070 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    8066:	697b      	ldr	r3, [r7, #20]
    8068:	2200      	movs	r2, #0
    806a:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    806c:	2300      	movs	r3, #0
    806e:	e03b      	b.n	80e8 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	685a      	ldr	r2, [r3, #4]
    8074:	697b      	ldr	r3, [r7, #20]
    8076:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	681b      	ldr	r3, [r3, #0]
    807c:	b29b      	uxth	r3, r3
    807e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    8082:	b299      	uxth	r1, r3
    8084:	697a      	ldr	r2, [r7, #20]
    8086:	6813      	ldr	r3, [r2, #0]
    8088:	f361 431a 	bfi	r3, r1, #16, #11
    808c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    808e:	697a      	ldr	r2, [r7, #20]
    8090:	6813      	ldr	r3, [r2, #0]
    8092:	2102      	movs	r1, #2
    8094:	f361 739f 	bfi	r3, r1, #30, #2
    8098:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    809a:	697a      	ldr	r2, [r7, #20]
    809c:	6813      	ldr	r3, [r2, #0]
    809e:	2101      	movs	r1, #1
    80a0:	f361 63dd 	bfi	r3, r1, #27, #3
    80a4:	6013      	str	r3, [r2, #0]
    80a6:	e01e      	b.n	80e6 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    80a8:	7abb      	ldrb	r3, [r7, #10]
    80aa:	2b01      	cmp	r3, #1
    80ac:	d11b      	bne.n	80e6 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    80ae:	687b      	ldr	r3, [r7, #4]
    80b0:	2b00      	cmp	r3, #0
    80b2:	d104      	bne.n	80be <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    80b4:	693b      	ldr	r3, [r7, #16]
    80b6:	2200      	movs	r2, #0
    80b8:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    80ba:	2300      	movs	r3, #0
    80bc:	e014      	b.n	80e8 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    80be:	687b      	ldr	r3, [r7, #4]
    80c0:	681a      	ldr	r2, [r3, #0]
    80c2:	693b      	ldr	r3, [r7, #16]
    80c4:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    80c6:	693a      	ldr	r2, [r7, #16]
    80c8:	6813      	ldr	r3, [r2, #0]
    80ca:	2101      	movs	r1, #1
    80cc:	f361 735f 	bfi	r3, r1, #29, #3
    80d0:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    80d2:	687b      	ldr	r3, [r7, #4]
    80d4:	685a      	ldr	r2, [r3, #4]
    80d6:	693b      	ldr	r3, [r7, #16]
    80d8:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    80da:	693a      	ldr	r2, [r7, #16]
    80dc:	6853      	ldr	r3, [r2, #4]
    80de:	2102      	movs	r1, #2
    80e0:	f361 739f 	bfi	r3, r1, #30, #2
    80e4:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    80e6:	2300      	movs	r3, #0
}
    80e8:	4618      	mov	r0, r3
    80ea:	371c      	adds	r7, #28
    80ec:	46bd      	mov	sp, r7
    80ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f2:	4770      	bx	lr

000080f4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    80f4:	b590      	push	{r4, r7, lr}
    80f6:	b083      	sub	sp, #12
    80f8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    80fa:	4b2c      	ldr	r3, [pc, #176]	; (81ac <CAN1_Handler+0xb8>)
    80fc:	681b      	ldr	r3, [r3, #0]
    80fe:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8100:	687b      	ldr	r3, [r7, #4]
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	4618      	mov	r0, r3
    8106:	4b2a      	ldr	r3, [pc, #168]	; (81b0 <CAN1_Handler+0xbc>)
    8108:	4798      	blx	r3
    810a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    810c:	683b      	ldr	r3, [r7, #0]
    810e:	f003 0301 	and.w	r3, r3, #1
    8112:	2b00      	cmp	r3, #0
    8114:	d003      	beq.n	811e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	689b      	ldr	r3, [r3, #8]
    811a:	6878      	ldr	r0, [r7, #4]
    811c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    811e:	683b      	ldr	r3, [r7, #0]
    8120:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8124:	2b00      	cmp	r3, #0
    8126:	d003      	beq.n	8130 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	685b      	ldr	r3, [r3, #4]
    812c:	6878      	ldr	r0, [r7, #4]
    812e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8130:	683b      	ldr	r3, [r7, #0]
    8132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8136:	2b00      	cmp	r3, #0
    8138:	d004      	beq.n	8144 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    813a:	687b      	ldr	r3, [r7, #4]
    813c:	68db      	ldr	r3, [r3, #12]
    813e:	2103      	movs	r1, #3
    8140:	6878      	ldr	r0, [r7, #4]
    8142:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    8144:	683b      	ldr	r3, [r7, #0]
    8146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    814a:	2b00      	cmp	r3, #0
    814c:	d004      	beq.n	8158 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	68db      	ldr	r3, [r3, #12]
    8152:	2100      	movs	r1, #0
    8154:	6878      	ldr	r0, [r7, #4]
    8156:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    8158:	683b      	ldr	r3, [r7, #0]
    815a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    815e:	2b00      	cmp	r3, #0
    8160:	d00f      	beq.n	8182 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	68dc      	ldr	r4, [r3, #12]
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	681b      	ldr	r3, [r3, #0]
    816a:	4618      	mov	r0, r3
    816c:	4b11      	ldr	r3, [pc, #68]	; (81b4 <CAN1_Handler+0xc0>)
    816e:	4798      	blx	r3
    8170:	4603      	mov	r3, r0
    8172:	2b00      	cmp	r3, #0
    8174:	d001      	beq.n	817a <CAN1_Handler+0x86>
    8176:	2302      	movs	r3, #2
    8178:	e000      	b.n	817c <CAN1_Handler+0x88>
    817a:	2301      	movs	r3, #1
    817c:	4619      	mov	r1, r3
    817e:	6878      	ldr	r0, [r7, #4]
    8180:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    8182:	683b      	ldr	r3, [r7, #0]
    8184:	f003 0308 	and.w	r3, r3, #8
    8188:	2b00      	cmp	r3, #0
    818a:	d004      	beq.n	8196 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	68db      	ldr	r3, [r3, #12]
    8190:	2104      	movs	r1, #4
    8192:	6878      	ldr	r0, [r7, #4]
    8194:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	6839      	ldr	r1, [r7, #0]
    819c:	4618      	mov	r0, r3
    819e:	4b06      	ldr	r3, [pc, #24]	; (81b8 <CAN1_Handler+0xc4>)
    81a0:	4798      	blx	r3
}
    81a2:	bf00      	nop
    81a4:	370c      	adds	r7, #12
    81a6:	46bd      	mov	sp, r7
    81a8:	bd90      	pop	{r4, r7, pc}
    81aa:	bf00      	nop
    81ac:	20001bc0 	.word	0x20001bc0
    81b0:	00007861 	.word	0x00007861
    81b4:	00007611 	.word	0x00007611
    81b8:	00007845 	.word	0x00007845

000081bc <__NVIC_SetPendingIRQ>:
{
    81bc:	b480      	push	{r7}
    81be:	b083      	sub	sp, #12
    81c0:	af00      	add	r7, sp, #0
    81c2:	4603      	mov	r3, r0
    81c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    81c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81ca:	2b00      	cmp	r3, #0
    81cc:	db0c      	blt.n	81e8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81ce:	4909      	ldr	r1, [pc, #36]	; (81f4 <__NVIC_SetPendingIRQ+0x38>)
    81d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81d4:	095b      	lsrs	r3, r3, #5
    81d6:	88fa      	ldrh	r2, [r7, #6]
    81d8:	f002 021f 	and.w	r2, r2, #31
    81dc:	2001      	movs	r0, #1
    81de:	fa00 f202 	lsl.w	r2, r0, r2
    81e2:	3340      	adds	r3, #64	; 0x40
    81e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81e8:	bf00      	nop
    81ea:	370c      	adds	r7, #12
    81ec:	46bd      	mov	sp, r7
    81ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f2:	4770      	bx	lr
    81f4:	e000e100 	.word	0xe000e100

000081f8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    81f8:	b580      	push	{r7, lr}
    81fa:	b082      	sub	sp, #8
    81fc:	af00      	add	r7, sp, #0
    81fe:	4603      	mov	r3, r0
    8200:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    8202:	79fb      	ldrb	r3, [r7, #7]
    8204:	b21b      	sxth	r3, r3
    8206:	4618      	mov	r0, r3
    8208:	4b02      	ldr	r3, [pc, #8]	; (8214 <_irq_set+0x1c>)
    820a:	4798      	blx	r3
}
    820c:	bf00      	nop
    820e:	3708      	adds	r7, #8
    8210:	46bd      	mov	sp, r7
    8212:	bd80      	pop	{r7, pc}
    8214:	000081bd 	.word	0x000081bd

00008218 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    8218:	b480      	push	{r7}
    821a:	b083      	sub	sp, #12
    821c:	af00      	add	r7, sp, #0
    821e:	4603      	mov	r3, r0
    8220:	6039      	str	r1, [r7, #0]
    8222:	80fb      	strh	r3, [r7, #6]
    8224:	4613      	mov	r3, r2
    8226:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8228:	797b      	ldrb	r3, [r7, #5]
    822a:	3b04      	subs	r3, #4
    822c:	2b05      	cmp	r3, #5
    822e:	d86b      	bhi.n	8308 <_get_cycles_for_us_internal+0xf0>
    8230:	a201      	add	r2, pc, #4	; (adr r2, 8238 <_get_cycles_for_us_internal+0x20>)
    8232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8236:	bf00      	nop
    8238:	000082e7 	.word	0x000082e7
    823c:	000082c7 	.word	0x000082c7
    8240:	000082a9 	.word	0x000082a9
    8244:	0000828b 	.word	0x0000828b
    8248:	0000826d 	.word	0x0000826d
    824c:	00008251 	.word	0x00008251
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8250:	88fb      	ldrh	r3, [r7, #6]
    8252:	683a      	ldr	r2, [r7, #0]
    8254:	4935      	ldr	r1, [pc, #212]	; (832c <_get_cycles_for_us_internal+0x114>)
    8256:	fba1 1202 	umull	r1, r2, r1, r2
    825a:	0c92      	lsrs	r2, r2, #18
    825c:	fb02 f303 	mul.w	r3, r2, r3
    8260:	3302      	adds	r3, #2
    8262:	4a33      	ldr	r2, [pc, #204]	; (8330 <_get_cycles_for_us_internal+0x118>)
    8264:	fba2 2303 	umull	r2, r3, r2, r3
    8268:	085b      	lsrs	r3, r3, #1
    826a:	e059      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    826c:	88fb      	ldrh	r3, [r7, #6]
    826e:	683a      	ldr	r2, [r7, #0]
    8270:	0952      	lsrs	r2, r2, #5
    8272:	4930      	ldr	r1, [pc, #192]	; (8334 <_get_cycles_for_us_internal+0x11c>)
    8274:	fba1 1202 	umull	r1, r2, r1, r2
    8278:	09d2      	lsrs	r2, r2, #7
    827a:	fb02 f303 	mul.w	r3, r2, r3
    827e:	331d      	adds	r3, #29
    8280:	4a2d      	ldr	r2, [pc, #180]	; (8338 <_get_cycles_for_us_internal+0x120>)
    8282:	fba2 2303 	umull	r2, r3, r2, r3
    8286:	091b      	lsrs	r3, r3, #4
    8288:	e04a      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    828a:	88fb      	ldrh	r3, [r7, #6]
    828c:	683a      	ldr	r2, [r7, #0]
    828e:	492b      	ldr	r1, [pc, #172]	; (833c <_get_cycles_for_us_internal+0x124>)
    8290:	fba1 1202 	umull	r1, r2, r1, r2
    8294:	0b52      	lsrs	r2, r2, #13
    8296:	fb02 f303 	mul.w	r3, r2, r3
    829a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    829e:	4a28      	ldr	r2, [pc, #160]	; (8340 <_get_cycles_for_us_internal+0x128>)
    82a0:	fba2 2303 	umull	r2, r3, r2, r3
    82a4:	095b      	lsrs	r3, r3, #5
    82a6:	e03b      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    82a8:	88fb      	ldrh	r3, [r7, #6]
    82aa:	683a      	ldr	r2, [r7, #0]
    82ac:	4925      	ldr	r1, [pc, #148]	; (8344 <_get_cycles_for_us_internal+0x12c>)
    82ae:	fba1 1202 	umull	r1, r2, r1, r2
    82b2:	0992      	lsrs	r2, r2, #6
    82b4:	fb02 f303 	mul.w	r3, r2, r3
    82b8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    82bc:	4a22      	ldr	r2, [pc, #136]	; (8348 <_get_cycles_for_us_internal+0x130>)
    82be:	fba2 2303 	umull	r2, r3, r2, r3
    82c2:	099b      	lsrs	r3, r3, #6
    82c4:	e02c      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    82c6:	88fb      	ldrh	r3, [r7, #6]
    82c8:	683a      	ldr	r2, [r7, #0]
    82ca:	4920      	ldr	r1, [pc, #128]	; (834c <_get_cycles_for_us_internal+0x134>)
    82cc:	fba1 1202 	umull	r1, r2, r1, r2
    82d0:	0952      	lsrs	r2, r2, #5
    82d2:	fb02 f303 	mul.w	r3, r2, r3
    82d6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    82da:	332f      	adds	r3, #47	; 0x2f
    82dc:	4a1c      	ldr	r2, [pc, #112]	; (8350 <_get_cycles_for_us_internal+0x138>)
    82de:	fba2 2303 	umull	r2, r3, r2, r3
    82e2:	0b5b      	lsrs	r3, r3, #13
    82e4:	e01c      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    82e6:	88fb      	ldrh	r3, [r7, #6]
    82e8:	683a      	ldr	r2, [r7, #0]
    82ea:	491a      	ldr	r1, [pc, #104]	; (8354 <_get_cycles_for_us_internal+0x13c>)
    82ec:	fba1 1202 	umull	r1, r2, r1, r2
    82f0:	08d2      	lsrs	r2, r2, #3
    82f2:	fb02 f303 	mul.w	r3, r2, r3
    82f6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    82fa:	f203 33df 	addw	r3, r3, #991	; 0x3df
    82fe:	4a16      	ldr	r2, [pc, #88]	; (8358 <_get_cycles_for_us_internal+0x140>)
    8300:	fba2 2303 	umull	r2, r3, r2, r3
    8304:	0c5b      	lsrs	r3, r3, #17
    8306:	e00b      	b.n	8320 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    8308:	88fb      	ldrh	r3, [r7, #6]
    830a:	683a      	ldr	r2, [r7, #0]
    830c:	fb02 f303 	mul.w	r3, r2, r3
    8310:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8314:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8318:	4a10      	ldr	r2, [pc, #64]	; (835c <_get_cycles_for_us_internal+0x144>)
    831a:	fba2 2303 	umull	r2, r3, r2, r3
    831e:	0c9b      	lsrs	r3, r3, #18
	}
}
    8320:	4618      	mov	r0, r3
    8322:	370c      	adds	r7, #12
    8324:	46bd      	mov	sp, r7
    8326:	f85d 7b04 	ldr.w	r7, [sp], #4
    832a:	4770      	bx	lr
    832c:	431bde83 	.word	0x431bde83
    8330:	aaaaaaab 	.word	0xaaaaaaab
    8334:	0a7c5ac5 	.word	0x0a7c5ac5
    8338:	88888889 	.word	0x88888889
    833c:	d1b71759 	.word	0xd1b71759
    8340:	1b4e81b5 	.word	0x1b4e81b5
    8344:	10624dd3 	.word	0x10624dd3
    8348:	057619f1 	.word	0x057619f1
    834c:	51eb851f 	.word	0x51eb851f
    8350:	45e7b273 	.word	0x45e7b273
    8354:	cccccccd 	.word	0xcccccccd
    8358:	6fd91d85 	.word	0x6fd91d85
    835c:	165e9f81 	.word	0x165e9f81

00008360 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8360:	b580      	push	{r7, lr}
    8362:	b082      	sub	sp, #8
    8364:	af00      	add	r7, sp, #0
    8366:	4603      	mov	r3, r0
    8368:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    836a:	88fb      	ldrh	r3, [r7, #6]
    836c:	2209      	movs	r2, #9
    836e:	4904      	ldr	r1, [pc, #16]	; (8380 <_get_cycles_for_us+0x20>)
    8370:	4618      	mov	r0, r3
    8372:	4b04      	ldr	r3, [pc, #16]	; (8384 <_get_cycles_for_us+0x24>)
    8374:	4798      	blx	r3
    8376:	4603      	mov	r3, r0
}
    8378:	4618      	mov	r0, r3
    837a:	3708      	adds	r7, #8
    837c:	46bd      	mov	sp, r7
    837e:	bd80      	pop	{r7, pc}
    8380:	07270e00 	.word	0x07270e00
    8384:	00008219 	.word	0x00008219

00008388 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8388:	b480      	push	{r7}
    838a:	b083      	sub	sp, #12
    838c:	af00      	add	r7, sp, #0
    838e:	4603      	mov	r3, r0
    8390:	6039      	str	r1, [r7, #0]
    8392:	80fb      	strh	r3, [r7, #6]
    8394:	4613      	mov	r3, r2
    8396:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8398:	797b      	ldrb	r3, [r7, #5]
    839a:	3b04      	subs	r3, #4
    839c:	2b05      	cmp	r3, #5
    839e:	d870      	bhi.n	8482 <_get_cycles_for_ms_internal+0xfa>
    83a0:	a201      	add	r2, pc, #4	; (adr r2, 83a8 <_get_cycles_for_ms_internal+0x20>)
    83a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    83a6:	bf00      	nop
    83a8:	00008465 	.word	0x00008465
    83ac:	00008449 	.word	0x00008449
    83b0:	0000842d 	.word	0x0000842d
    83b4:	00008409 	.word	0x00008409
    83b8:	000083e5 	.word	0x000083e5
    83bc:	000083c1 	.word	0x000083c1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    83c0:	88fb      	ldrh	r3, [r7, #6]
    83c2:	683a      	ldr	r2, [r7, #0]
    83c4:	4937      	ldr	r1, [pc, #220]	; (84a4 <_get_cycles_for_ms_internal+0x11c>)
    83c6:	fba1 1202 	umull	r1, r2, r1, r2
    83ca:	0c92      	lsrs	r2, r2, #18
    83cc:	fb02 f303 	mul.w	r3, r2, r3
    83d0:	3302      	adds	r3, #2
    83d2:	4a35      	ldr	r2, [pc, #212]	; (84a8 <_get_cycles_for_ms_internal+0x120>)
    83d4:	fba2 2303 	umull	r2, r3, r2, r3
    83d8:	085b      	lsrs	r3, r3, #1
    83da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    83de:	fb02 f303 	mul.w	r3, r2, r3
    83e2:	e058      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    83e4:	88fb      	ldrh	r3, [r7, #6]
    83e6:	683a      	ldr	r2, [r7, #0]
    83e8:	0952      	lsrs	r2, r2, #5
    83ea:	4930      	ldr	r1, [pc, #192]	; (84ac <_get_cycles_for_ms_internal+0x124>)
    83ec:	fba1 1202 	umull	r1, r2, r1, r2
    83f0:	09d2      	lsrs	r2, r2, #7
    83f2:	fb02 f303 	mul.w	r3, r2, r3
    83f6:	3302      	adds	r3, #2
    83f8:	4a2b      	ldr	r2, [pc, #172]	; (84a8 <_get_cycles_for_ms_internal+0x120>)
    83fa:	fba2 2303 	umull	r2, r3, r2, r3
    83fe:	085b      	lsrs	r3, r3, #1
    8400:	2264      	movs	r2, #100	; 0x64
    8402:	fb02 f303 	mul.w	r3, r2, r3
    8406:	e046      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    8408:	88fb      	ldrh	r3, [r7, #6]
    840a:	683a      	ldr	r2, [r7, #0]
    840c:	4928      	ldr	r1, [pc, #160]	; (84b0 <_get_cycles_for_ms_internal+0x128>)
    840e:	fba1 1202 	umull	r1, r2, r1, r2
    8412:	0b52      	lsrs	r2, r2, #13
    8414:	fb02 f303 	mul.w	r3, r2, r3
    8418:	3302      	adds	r3, #2
    841a:	4a23      	ldr	r2, [pc, #140]	; (84a8 <_get_cycles_for_ms_internal+0x120>)
    841c:	fba2 2303 	umull	r2, r3, r2, r3
    8420:	085a      	lsrs	r2, r3, #1
    8422:	4613      	mov	r3, r2
    8424:	009b      	lsls	r3, r3, #2
    8426:	4413      	add	r3, r2
    8428:	005b      	lsls	r3, r3, #1
    842a:	e034      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    842c:	88fb      	ldrh	r3, [r7, #6]
    842e:	683a      	ldr	r2, [r7, #0]
    8430:	4920      	ldr	r1, [pc, #128]	; (84b4 <_get_cycles_for_ms_internal+0x12c>)
    8432:	fba1 1202 	umull	r1, r2, r1, r2
    8436:	0992      	lsrs	r2, r2, #6
    8438:	fb02 f303 	mul.w	r3, r2, r3
    843c:	3302      	adds	r3, #2
    843e:	4a1a      	ldr	r2, [pc, #104]	; (84a8 <_get_cycles_for_ms_internal+0x120>)
    8440:	fba2 2303 	umull	r2, r3, r2, r3
    8444:	085b      	lsrs	r3, r3, #1
    8446:	e026      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    8448:	88fb      	ldrh	r3, [r7, #6]
    844a:	683a      	ldr	r2, [r7, #0]
    844c:	491a      	ldr	r1, [pc, #104]	; (84b8 <_get_cycles_for_ms_internal+0x130>)
    844e:	fba1 1202 	umull	r1, r2, r1, r2
    8452:	0952      	lsrs	r2, r2, #5
    8454:	fb02 f303 	mul.w	r3, r2, r3
    8458:	331d      	adds	r3, #29
    845a:	4a18      	ldr	r2, [pc, #96]	; (84bc <_get_cycles_for_ms_internal+0x134>)
    845c:	fba2 2303 	umull	r2, r3, r2, r3
    8460:	091b      	lsrs	r3, r3, #4
    8462:	e018      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8464:	88fb      	ldrh	r3, [r7, #6]
    8466:	683a      	ldr	r2, [r7, #0]
    8468:	4915      	ldr	r1, [pc, #84]	; (84c0 <_get_cycles_for_ms_internal+0x138>)
    846a:	fba1 1202 	umull	r1, r2, r1, r2
    846e:	08d2      	lsrs	r2, r2, #3
    8470:	fb02 f303 	mul.w	r3, r2, r3
    8474:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8478:	4a12      	ldr	r2, [pc, #72]	; (84c4 <_get_cycles_for_ms_internal+0x13c>)
    847a:	fba2 2303 	umull	r2, r3, r2, r3
    847e:	095b      	lsrs	r3, r3, #5
    8480:	e009      	b.n	8496 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8482:	88fb      	ldrh	r3, [r7, #6]
    8484:	683a      	ldr	r2, [r7, #0]
    8486:	fb02 f303 	mul.w	r3, r2, r3
    848a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    848e:	4a0e      	ldr	r2, [pc, #56]	; (84c8 <_get_cycles_for_ms_internal+0x140>)
    8490:	fba2 2303 	umull	r2, r3, r2, r3
    8494:	099b      	lsrs	r3, r3, #6
	}
}
    8496:	4618      	mov	r0, r3
    8498:	370c      	adds	r7, #12
    849a:	46bd      	mov	sp, r7
    849c:	f85d 7b04 	ldr.w	r7, [sp], #4
    84a0:	4770      	bx	lr
    84a2:	bf00      	nop
    84a4:	431bde83 	.word	0x431bde83
    84a8:	aaaaaaab 	.word	0xaaaaaaab
    84ac:	0a7c5ac5 	.word	0x0a7c5ac5
    84b0:	d1b71759 	.word	0xd1b71759
    84b4:	10624dd3 	.word	0x10624dd3
    84b8:	51eb851f 	.word	0x51eb851f
    84bc:	88888889 	.word	0x88888889
    84c0:	cccccccd 	.word	0xcccccccd
    84c4:	1b4e81b5 	.word	0x1b4e81b5
    84c8:	057619f1 	.word	0x057619f1

000084cc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    84cc:	b580      	push	{r7, lr}
    84ce:	b082      	sub	sp, #8
    84d0:	af00      	add	r7, sp, #0
    84d2:	4603      	mov	r3, r0
    84d4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    84d6:	88fb      	ldrh	r3, [r7, #6]
    84d8:	2209      	movs	r2, #9
    84da:	4904      	ldr	r1, [pc, #16]	; (84ec <_get_cycles_for_ms+0x20>)
    84dc:	4618      	mov	r0, r3
    84de:	4b04      	ldr	r3, [pc, #16]	; (84f0 <_get_cycles_for_ms+0x24>)
    84e0:	4798      	blx	r3
    84e2:	4603      	mov	r3, r0
}
    84e4:	4618      	mov	r0, r3
    84e6:	3708      	adds	r7, #8
    84e8:	46bd      	mov	sp, r7
    84ea:	bd80      	pop	{r7, pc}
    84ec:	07270e00 	.word	0x07270e00
    84f0:	00008389 	.word	0x00008389
    84f4:	00000000 	.word	0x00000000

000084f8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    84f8:	b480      	push	{r7}
    84fa:	b083      	sub	sp, #12
    84fc:	af00      	add	r7, sp, #0
    84fe:	6078      	str	r0, [r7, #4]
    8500:	6039      	str	r1, [r7, #0]
    8502:	bf00      	nop
    8504:	f3af 8000 	nop.w

00008508 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8508:	3901      	subs	r1, #1
    850a:	d8fd      	bhi.n	8508 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    850c:	bf00      	nop
    850e:	370c      	adds	r7, #12
    8510:	46bd      	mov	sp, r7
    8512:	f85d 7b04 	ldr.w	r7, [sp], #4
    8516:	4770      	bx	lr

00008518 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8518:	b480      	push	{r7}
    851a:	b083      	sub	sp, #12
    851c:	af00      	add	r7, sp, #0
    851e:	6078      	str	r0, [r7, #4]
    8520:	460b      	mov	r3, r1
    8522:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	881b      	ldrh	r3, [r3, #0]
    8528:	b29a      	uxth	r2, r3
    852a:	887b      	ldrh	r3, [r7, #2]
    852c:	021b      	lsls	r3, r3, #8
    852e:	b29b      	uxth	r3, r3
    8530:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8534:	b29b      	uxth	r3, r3
    8536:	4313      	orrs	r3, r2
    8538:	b29a      	uxth	r2, r3
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    853e:	bf00      	nop
    8540:	370c      	adds	r7, #12
    8542:	46bd      	mov	sp, r7
    8544:	f85d 7b04 	ldr.w	r7, [sp], #4
    8548:	4770      	bx	lr

0000854a <hri_port_set_EVCTRL_reg>:
{
    854a:	b480      	push	{r7}
    854c:	b085      	sub	sp, #20
    854e:	af00      	add	r7, sp, #0
    8550:	60f8      	str	r0, [r7, #12]
    8552:	460b      	mov	r3, r1
    8554:	607a      	str	r2, [r7, #4]
    8556:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8558:	7afb      	ldrb	r3, [r7, #11]
    855a:	7afa      	ldrb	r2, [r7, #11]
    855c:	68f9      	ldr	r1, [r7, #12]
    855e:	01d2      	lsls	r2, r2, #7
    8560:	440a      	add	r2, r1
    8562:	322c      	adds	r2, #44	; 0x2c
    8564:	6811      	ldr	r1, [r2, #0]
    8566:	687a      	ldr	r2, [r7, #4]
    8568:	430a      	orrs	r2, r1
    856a:	68f9      	ldr	r1, [r7, #12]
    856c:	01db      	lsls	r3, r3, #7
    856e:	440b      	add	r3, r1
    8570:	332c      	adds	r3, #44	; 0x2c
    8572:	601a      	str	r2, [r3, #0]
}
    8574:	bf00      	nop
    8576:	3714      	adds	r7, #20
    8578:	46bd      	mov	sp, r7
    857a:	f85d 7b04 	ldr.w	r7, [sp], #4
    857e:	4770      	bx	lr

00008580 <_port_event_init>:

static inline void _port_event_init()
{
    8580:	b580      	push	{r7, lr}
    8582:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8584:	2200      	movs	r2, #0
    8586:	2100      	movs	r1, #0
    8588:	480a      	ldr	r0, [pc, #40]	; (85b4 <_port_event_init+0x34>)
    858a:	4b0b      	ldr	r3, [pc, #44]	; (85b8 <_port_event_init+0x38>)
    858c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    858e:	2200      	movs	r2, #0
    8590:	2101      	movs	r1, #1
    8592:	4808      	ldr	r0, [pc, #32]	; (85b4 <_port_event_init+0x34>)
    8594:	4b08      	ldr	r3, [pc, #32]	; (85b8 <_port_event_init+0x38>)
    8596:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8598:	f64e 72ef 	movw	r2, #61423	; 0xefef
    859c:	2102      	movs	r1, #2
    859e:	4805      	ldr	r0, [pc, #20]	; (85b4 <_port_event_init+0x34>)
    85a0:	4b05      	ldr	r3, [pc, #20]	; (85b8 <_port_event_init+0x38>)
    85a2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    85a4:	2200      	movs	r2, #0
    85a6:	2103      	movs	r1, #3
    85a8:	4802      	ldr	r0, [pc, #8]	; (85b4 <_port_event_init+0x34>)
    85aa:	4b03      	ldr	r3, [pc, #12]	; (85b8 <_port_event_init+0x38>)
    85ac:	4798      	blx	r3
}
    85ae:	bf00      	nop
    85b0:	bd80      	pop	{r7, pc}
    85b2:	bf00      	nop
    85b4:	41008000 	.word	0x41008000
    85b8:	0000854b 	.word	0x0000854b

000085bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    85bc:	b580      	push	{r7, lr}
    85be:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    85c0:	2104      	movs	r1, #4
    85c2:	480b      	ldr	r0, [pc, #44]	; (85f0 <_init_chip+0x34>)
    85c4:	4b0b      	ldr	r3, [pc, #44]	; (85f4 <_init_chip+0x38>)
    85c6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    85c8:	4b0b      	ldr	r3, [pc, #44]	; (85f8 <_init_chip+0x3c>)
    85ca:	4798      	blx	r3
	_oscctrl_init_sources();
    85cc:	4b0b      	ldr	r3, [pc, #44]	; (85fc <_init_chip+0x40>)
    85ce:	4798      	blx	r3
	_mclk_init();
    85d0:	4b0b      	ldr	r3, [pc, #44]	; (8600 <_init_chip+0x44>)
    85d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    85d4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    85d8:	4b0a      	ldr	r3, [pc, #40]	; (8604 <_init_chip+0x48>)
    85da:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    85dc:	4b0a      	ldr	r3, [pc, #40]	; (8608 <_init_chip+0x4c>)
    85de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    85e0:	f640 30df 	movw	r0, #3039	; 0xbdf
    85e4:	4b07      	ldr	r3, [pc, #28]	; (8604 <_init_chip+0x48>)
    85e6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    85e8:	4b08      	ldr	r3, [pc, #32]	; (860c <_init_chip+0x50>)
    85ea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    85ec:	bf00      	nop
    85ee:	bd80      	pop	{r7, pc}
    85f0:	41004000 	.word	0x41004000
    85f4:	00008519 	.word	0x00008519
    85f8:	0000900d 	.word	0x0000900d
    85fc:	000094d5 	.word	0x000094d5
    8600:	00008f2d 	.word	0x00008f2d
    8604:	00008dd5 	.word	0x00008dd5
    8608:	00009515 	.word	0x00009515
    860c:	00008581 	.word	0x00008581

00008610 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8610:	b480      	push	{r7}
    8612:	b083      	sub	sp, #12
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
    8618:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    861a:	687b      	ldr	r3, [r7, #4]
    861c:	683a      	ldr	r2, [r7, #0]
    861e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8620:	2300      	movs	r3, #0
}
    8622:	4618      	mov	r0, r3
    8624:	370c      	adds	r7, #12
    8626:	46bd      	mov	sp, r7
    8628:	f85d 7b04 	ldr.w	r7, [sp], #4
    862c:	4770      	bx	lr
	...

00008630 <__NVIC_EnableIRQ>:
{
    8630:	b480      	push	{r7}
    8632:	b083      	sub	sp, #12
    8634:	af00      	add	r7, sp, #0
    8636:	4603      	mov	r3, r0
    8638:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    863a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    863e:	2b00      	cmp	r3, #0
    8640:	db0b      	blt.n	865a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8642:	4909      	ldr	r1, [pc, #36]	; (8668 <__NVIC_EnableIRQ+0x38>)
    8644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8648:	095b      	lsrs	r3, r3, #5
    864a:	88fa      	ldrh	r2, [r7, #6]
    864c:	f002 021f 	and.w	r2, r2, #31
    8650:	2001      	movs	r0, #1
    8652:	fa00 f202 	lsl.w	r2, r0, r2
    8656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    865a:	bf00      	nop
    865c:	370c      	adds	r7, #12
    865e:	46bd      	mov	sp, r7
    8660:	f85d 7b04 	ldr.w	r7, [sp], #4
    8664:	4770      	bx	lr
    8666:	bf00      	nop
    8668:	e000e100 	.word	0xe000e100

0000866c <__NVIC_DisableIRQ>:
{
    866c:	b480      	push	{r7}
    866e:	b083      	sub	sp, #12
    8670:	af00      	add	r7, sp, #0
    8672:	4603      	mov	r3, r0
    8674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    867a:	2b00      	cmp	r3, #0
    867c:	db10      	blt.n	86a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    867e:	490b      	ldr	r1, [pc, #44]	; (86ac <__NVIC_DisableIRQ+0x40>)
    8680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8684:	095b      	lsrs	r3, r3, #5
    8686:	88fa      	ldrh	r2, [r7, #6]
    8688:	f002 021f 	and.w	r2, r2, #31
    868c:	2001      	movs	r0, #1
    868e:	fa00 f202 	lsl.w	r2, r0, r2
    8692:	3320      	adds	r3, #32
    8694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    869c:	f3bf 8f6f 	isb	sy
}
    86a0:	bf00      	nop
    86a2:	370c      	adds	r7, #12
    86a4:	46bd      	mov	sp, r7
    86a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86aa:	4770      	bx	lr
    86ac:	e000e100 	.word	0xe000e100

000086b0 <__NVIC_ClearPendingIRQ>:
{
    86b0:	b480      	push	{r7}
    86b2:	b083      	sub	sp, #12
    86b4:	af00      	add	r7, sp, #0
    86b6:	4603      	mov	r3, r0
    86b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    86ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86be:	2b00      	cmp	r3, #0
    86c0:	db0c      	blt.n	86dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86c2:	4909      	ldr	r1, [pc, #36]	; (86e8 <__NVIC_ClearPendingIRQ+0x38>)
    86c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86c8:	095b      	lsrs	r3, r3, #5
    86ca:	88fa      	ldrh	r2, [r7, #6]
    86cc:	f002 021f 	and.w	r2, r2, #31
    86d0:	2001      	movs	r0, #1
    86d2:	fa00 f202 	lsl.w	r2, r0, r2
    86d6:	3360      	adds	r3, #96	; 0x60
    86d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86dc:	bf00      	nop
    86de:	370c      	adds	r7, #12
    86e0:	46bd      	mov	sp, r7
    86e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86e6:	4770      	bx	lr
    86e8:	e000e100 	.word	0xe000e100

000086ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    86ec:	b480      	push	{r7}
    86ee:	b083      	sub	sp, #12
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
    86f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    86f6:	bf00      	nop
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	685a      	ldr	r2, [r3, #4]
    86fc:	683b      	ldr	r3, [r7, #0]
    86fe:	4013      	ands	r3, r2
    8700:	2b00      	cmp	r3, #0
    8702:	d1f9      	bne.n	86f8 <hri_eic_wait_for_sync+0xc>
	};
}
    8704:	bf00      	nop
    8706:	370c      	adds	r7, #12
    8708:	46bd      	mov	sp, r7
    870a:	f85d 7b04 	ldr.w	r7, [sp], #4
    870e:	4770      	bx	lr

00008710 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8710:	b480      	push	{r7}
    8712:	b083      	sub	sp, #12
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
    8718:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    871a:	687b      	ldr	r3, [r7, #4]
    871c:	685a      	ldr	r2, [r3, #4]
    871e:	683b      	ldr	r3, [r7, #0]
    8720:	4013      	ands	r3, r2
    8722:	2b00      	cmp	r3, #0
    8724:	bf14      	ite	ne
    8726:	2301      	movne	r3, #1
    8728:	2300      	moveq	r3, #0
    872a:	b2db      	uxtb	r3, r3
}
    872c:	4618      	mov	r0, r3
    872e:	370c      	adds	r7, #12
    8730:	46bd      	mov	sp, r7
    8732:	f85d 7b04 	ldr.w	r7, [sp], #4
    8736:	4770      	bx	lr

00008738 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8738:	b480      	push	{r7}
    873a:	b083      	sub	sp, #12
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	695b      	ldr	r3, [r3, #20]
}
    8744:	4618      	mov	r0, r3
    8746:	370c      	adds	r7, #12
    8748:	46bd      	mov	sp, r7
    874a:	f85d 7b04 	ldr.w	r7, [sp], #4
    874e:	4770      	bx	lr

00008750 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8750:	b480      	push	{r7}
    8752:	b083      	sub	sp, #12
    8754:	af00      	add	r7, sp, #0
    8756:	6078      	str	r0, [r7, #4]
    8758:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    875a:	687b      	ldr	r3, [r7, #4]
    875c:	683a      	ldr	r2, [r7, #0]
    875e:	615a      	str	r2, [r3, #20]
}
    8760:	bf00      	nop
    8762:	370c      	adds	r7, #12
    8764:	46bd      	mov	sp, r7
    8766:	f85d 7b04 	ldr.w	r7, [sp], #4
    876a:	4770      	bx	lr

0000876c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	781b      	ldrb	r3, [r3, #0]
    8778:	b2db      	uxtb	r3, r3
    877a:	f043 0302 	orr.w	r3, r3, #2
    877e:	b2da      	uxtb	r2, r3
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8784:	2103      	movs	r1, #3
    8786:	6878      	ldr	r0, [r7, #4]
    8788:	4b02      	ldr	r3, [pc, #8]	; (8794 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    878a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    878c:	bf00      	nop
    878e:	3708      	adds	r7, #8
    8790:	46bd      	mov	sp, r7
    8792:	bd80      	pop	{r7, pc}
    8794:	000086ed 	.word	0x000086ed

00008798 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8798:	b580      	push	{r7, lr}
    879a:	b082      	sub	sp, #8
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    87a0:	687b      	ldr	r3, [r7, #4]
    87a2:	781b      	ldrb	r3, [r3, #0]
    87a4:	b2db      	uxtb	r3, r3
    87a6:	f023 0302 	bic.w	r3, r3, #2
    87aa:	b2da      	uxtb	r2, r3
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    87b0:	2103      	movs	r1, #3
    87b2:	6878      	ldr	r0, [r7, #4]
    87b4:	4b02      	ldr	r3, [pc, #8]	; (87c0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    87b6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    87b8:	bf00      	nop
    87ba:	3708      	adds	r7, #8
    87bc:	46bd      	mov	sp, r7
    87be:	bd80      	pop	{r7, pc}
    87c0:	000086ed 	.word	0x000086ed

000087c4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b084      	sub	sp, #16
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
    87cc:	460b      	mov	r3, r1
    87ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    87d0:	687b      	ldr	r3, [r7, #4]
    87d2:	781b      	ldrb	r3, [r3, #0]
    87d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    87d6:	7bfb      	ldrb	r3, [r7, #15]
    87d8:	f023 0310 	bic.w	r3, r3, #16
    87dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    87de:	78fb      	ldrb	r3, [r7, #3]
    87e0:	011b      	lsls	r3, r3, #4
    87e2:	b25a      	sxtb	r2, r3
    87e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    87e8:	4313      	orrs	r3, r2
    87ea:	b25b      	sxtb	r3, r3
    87ec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    87ee:	687b      	ldr	r3, [r7, #4]
    87f0:	7bfa      	ldrb	r2, [r7, #15]
    87f2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    87f4:	2103      	movs	r1, #3
    87f6:	6878      	ldr	r0, [r7, #4]
    87f8:	4b02      	ldr	r3, [pc, #8]	; (8804 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    87fa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    87fc:	bf00      	nop
    87fe:	3710      	adds	r7, #16
    8800:	46bd      	mov	sp, r7
    8802:	bd80      	pop	{r7, pc}
    8804:	000086ed 	.word	0x000086ed

00008808 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8808:	b580      	push	{r7, lr}
    880a:	b084      	sub	sp, #16
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
    8810:	460b      	mov	r3, r1
    8812:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8814:	2103      	movs	r1, #3
    8816:	6878      	ldr	r0, [r7, #4]
    8818:	4b06      	ldr	r3, [pc, #24]	; (8834 <hri_eic_get_CTRLA_reg+0x2c>)
    881a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	781b      	ldrb	r3, [r3, #0]
    8820:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8822:	7bfa      	ldrb	r2, [r7, #15]
    8824:	78fb      	ldrb	r3, [r7, #3]
    8826:	4013      	ands	r3, r2
    8828:	73fb      	strb	r3, [r7, #15]
	return tmp;
    882a:	7bfb      	ldrb	r3, [r7, #15]
}
    882c:	4618      	mov	r0, r3
    882e:	3710      	adds	r7, #16
    8830:	46bd      	mov	sp, r7
    8832:	bd80      	pop	{r7, pc}
    8834:	000086ed 	.word	0x000086ed

00008838 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8838:	b580      	push	{r7, lr}
    883a:	b082      	sub	sp, #8
    883c:	af00      	add	r7, sp, #0
    883e:	6078      	str	r0, [r7, #4]
    8840:	460b      	mov	r3, r1
    8842:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8844:	687b      	ldr	r3, [r7, #4]
    8846:	78fa      	ldrb	r2, [r7, #3]
    8848:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    884a:	2103      	movs	r1, #3
    884c:	6878      	ldr	r0, [r7, #4]
    884e:	4b03      	ldr	r3, [pc, #12]	; (885c <hri_eic_write_CTRLA_reg+0x24>)
    8850:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8852:	bf00      	nop
    8854:	3708      	adds	r7, #8
    8856:	46bd      	mov	sp, r7
    8858:	bd80      	pop	{r7, pc}
    885a:	bf00      	nop
    885c:	000086ed 	.word	0x000086ed

00008860 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8860:	b480      	push	{r7}
    8862:	b083      	sub	sp, #12
    8864:	af00      	add	r7, sp, #0
    8866:	6078      	str	r0, [r7, #4]
    8868:	460b      	mov	r3, r1
    886a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    886c:	687b      	ldr	r3, [r7, #4]
    886e:	78fa      	ldrb	r2, [r7, #3]
    8870:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8872:	bf00      	nop
    8874:	370c      	adds	r7, #12
    8876:	46bd      	mov	sp, r7
    8878:	f85d 7b04 	ldr.w	r7, [sp], #4
    887c:	4770      	bx	lr

0000887e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    887e:	b480      	push	{r7}
    8880:	b083      	sub	sp, #12
    8882:	af00      	add	r7, sp, #0
    8884:	6078      	str	r0, [r7, #4]
    8886:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	683a      	ldr	r2, [r7, #0]
    888c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    888e:	bf00      	nop
    8890:	370c      	adds	r7, #12
    8892:	46bd      	mov	sp, r7
    8894:	f85d 7b04 	ldr.w	r7, [sp], #4
    8898:	4770      	bx	lr

0000889a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    889a:	b480      	push	{r7}
    889c:	b083      	sub	sp, #12
    889e:	af00      	add	r7, sp, #0
    88a0:	6078      	str	r0, [r7, #4]
    88a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	683a      	ldr	r2, [r7, #0]
    88a8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    88aa:	bf00      	nop
    88ac:	370c      	adds	r7, #12
    88ae:	46bd      	mov	sp, r7
    88b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b4:	4770      	bx	lr

000088b6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    88b6:	b480      	push	{r7}
    88b8:	b085      	sub	sp, #20
    88ba:	af00      	add	r7, sp, #0
    88bc:	60f8      	str	r0, [r7, #12]
    88be:	460b      	mov	r3, r1
    88c0:	607a      	str	r2, [r7, #4]
    88c2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    88c4:	7afb      	ldrb	r3, [r7, #11]
    88c6:	68fa      	ldr	r2, [r7, #12]
    88c8:	3306      	adds	r3, #6
    88ca:	009b      	lsls	r3, r3, #2
    88cc:	4413      	add	r3, r2
    88ce:	687a      	ldr	r2, [r7, #4]
    88d0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    88d2:	bf00      	nop
    88d4:	3714      	adds	r7, #20
    88d6:	46bd      	mov	sp, r7
    88d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88dc:	4770      	bx	lr

000088de <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    88de:	b480      	push	{r7}
    88e0:	b083      	sub	sp, #12
    88e2:	af00      	add	r7, sp, #0
    88e4:	6078      	str	r0, [r7, #4]
    88e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	683a      	ldr	r2, [r7, #0]
    88ec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    88ee:	bf00      	nop
    88f0:	370c      	adds	r7, #12
    88f2:	46bd      	mov	sp, r7
    88f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f8:	4770      	bx	lr

000088fa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    88fa:	b480      	push	{r7}
    88fc:	b083      	sub	sp, #12
    88fe:	af00      	add	r7, sp, #0
    8900:	6078      	str	r0, [r7, #4]
    8902:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	683a      	ldr	r2, [r7, #0]
    8908:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    890a:	bf00      	nop
    890c:	370c      	adds	r7, #12
    890e:	46bd      	mov	sp, r7
    8910:	f85d 7b04 	ldr.w	r7, [sp], #4
    8914:	4770      	bx	lr
	...

00008918 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8918:	b580      	push	{r7, lr}
    891a:	b082      	sub	sp, #8
    891c:	af00      	add	r7, sp, #0
    891e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8920:	2101      	movs	r1, #1
    8922:	484f      	ldr	r0, [pc, #316]	; (8a60 <_ext_irq_init+0x148>)
    8924:	4b4f      	ldr	r3, [pc, #316]	; (8a64 <_ext_irq_init+0x14c>)
    8926:	4798      	blx	r3
    8928:	4603      	mov	r3, r0
    892a:	f083 0301 	eor.w	r3, r3, #1
    892e:	b2db      	uxtb	r3, r3
    8930:	2b00      	cmp	r3, #0
    8932:	d011      	beq.n	8958 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8934:	2102      	movs	r1, #2
    8936:	484a      	ldr	r0, [pc, #296]	; (8a60 <_ext_irq_init+0x148>)
    8938:	4b4b      	ldr	r3, [pc, #300]	; (8a68 <_ext_irq_init+0x150>)
    893a:	4798      	blx	r3
    893c:	4603      	mov	r3, r0
    893e:	2b00      	cmp	r3, #0
    8940:	d006      	beq.n	8950 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8942:	4847      	ldr	r0, [pc, #284]	; (8a60 <_ext_irq_init+0x148>)
    8944:	4b49      	ldr	r3, [pc, #292]	; (8a6c <_ext_irq_init+0x154>)
    8946:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8948:	2102      	movs	r1, #2
    894a:	4845      	ldr	r0, [pc, #276]	; (8a60 <_ext_irq_init+0x148>)
    894c:	4b48      	ldr	r3, [pc, #288]	; (8a70 <_ext_irq_init+0x158>)
    894e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8950:	2101      	movs	r1, #1
    8952:	4843      	ldr	r0, [pc, #268]	; (8a60 <_ext_irq_init+0x148>)
    8954:	4b47      	ldr	r3, [pc, #284]	; (8a74 <_ext_irq_init+0x15c>)
    8956:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8958:	2101      	movs	r1, #1
    895a:	4841      	ldr	r0, [pc, #260]	; (8a60 <_ext_irq_init+0x148>)
    895c:	4b44      	ldr	r3, [pc, #272]	; (8a70 <_ext_irq_init+0x158>)
    895e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8960:	2100      	movs	r1, #0
    8962:	483f      	ldr	r0, [pc, #252]	; (8a60 <_ext_irq_init+0x148>)
    8964:	4b44      	ldr	r3, [pc, #272]	; (8a78 <_ext_irq_init+0x160>)
    8966:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8968:	2100      	movs	r1, #0
    896a:	483d      	ldr	r0, [pc, #244]	; (8a60 <_ext_irq_init+0x148>)
    896c:	4b43      	ldr	r3, [pc, #268]	; (8a7c <_ext_irq_init+0x164>)
    896e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8970:	2100      	movs	r1, #0
    8972:	483b      	ldr	r0, [pc, #236]	; (8a60 <_ext_irq_init+0x148>)
    8974:	4b42      	ldr	r3, [pc, #264]	; (8a80 <_ext_irq_init+0x168>)
    8976:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8978:	f240 31bb 	movw	r1, #955	; 0x3bb
    897c:	4838      	ldr	r0, [pc, #224]	; (8a60 <_ext_irq_init+0x148>)
    897e:	4b41      	ldr	r3, [pc, #260]	; (8a84 <_ext_irq_init+0x16c>)
    8980:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8982:	f240 313b 	movw	r1, #827	; 0x33b
    8986:	4836      	ldr	r0, [pc, #216]	; (8a60 <_ext_irq_init+0x148>)
    8988:	4b3f      	ldr	r3, [pc, #252]	; (8a88 <_ext_irq_init+0x170>)
    898a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    898c:	2100      	movs	r1, #0
    898e:	4834      	ldr	r0, [pc, #208]	; (8a60 <_ext_irq_init+0x148>)
    8990:	4b3e      	ldr	r3, [pc, #248]	; (8a8c <_ext_irq_init+0x174>)
    8992:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8994:	4a3e      	ldr	r2, [pc, #248]	; (8a90 <_ext_irq_init+0x178>)
    8996:	2100      	movs	r1, #0
    8998:	4831      	ldr	r0, [pc, #196]	; (8a60 <_ext_irq_init+0x148>)
    899a:	4b3e      	ldr	r3, [pc, #248]	; (8a94 <_ext_irq_init+0x17c>)
    899c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    899e:	2211      	movs	r2, #17
    89a0:	2101      	movs	r1, #1
    89a2:	482f      	ldr	r0, [pc, #188]	; (8a60 <_ext_irq_init+0x148>)
    89a4:	4b3b      	ldr	r3, [pc, #236]	; (8a94 <_ext_irq_init+0x17c>)
    89a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    89a8:	482d      	ldr	r0, [pc, #180]	; (8a60 <_ext_irq_init+0x148>)
    89aa:	4b3b      	ldr	r3, [pc, #236]	; (8a98 <_ext_irq_init+0x180>)
    89ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    89ae:	200c      	movs	r0, #12
    89b0:	4b3a      	ldr	r3, [pc, #232]	; (8a9c <_ext_irq_init+0x184>)
    89b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    89b4:	200c      	movs	r0, #12
    89b6:	4b3a      	ldr	r3, [pc, #232]	; (8aa0 <_ext_irq_init+0x188>)
    89b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    89ba:	200c      	movs	r0, #12
    89bc:	4b39      	ldr	r3, [pc, #228]	; (8aa4 <_ext_irq_init+0x18c>)
    89be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    89c0:	200d      	movs	r0, #13
    89c2:	4b36      	ldr	r3, [pc, #216]	; (8a9c <_ext_irq_init+0x184>)
    89c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    89c6:	200d      	movs	r0, #13
    89c8:	4b35      	ldr	r3, [pc, #212]	; (8aa0 <_ext_irq_init+0x188>)
    89ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    89cc:	200d      	movs	r0, #13
    89ce:	4b35      	ldr	r3, [pc, #212]	; (8aa4 <_ext_irq_init+0x18c>)
    89d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    89d2:	200f      	movs	r0, #15
    89d4:	4b31      	ldr	r3, [pc, #196]	; (8a9c <_ext_irq_init+0x184>)
    89d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    89d8:	200f      	movs	r0, #15
    89da:	4b31      	ldr	r3, [pc, #196]	; (8aa0 <_ext_irq_init+0x188>)
    89dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    89de:	200f      	movs	r0, #15
    89e0:	4b30      	ldr	r3, [pc, #192]	; (8aa4 <_ext_irq_init+0x18c>)
    89e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    89e4:	2010      	movs	r0, #16
    89e6:	4b2d      	ldr	r3, [pc, #180]	; (8a9c <_ext_irq_init+0x184>)
    89e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    89ea:	2010      	movs	r0, #16
    89ec:	4b2c      	ldr	r3, [pc, #176]	; (8aa0 <_ext_irq_init+0x188>)
    89ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    89f0:	2010      	movs	r0, #16
    89f2:	4b2c      	ldr	r3, [pc, #176]	; (8aa4 <_ext_irq_init+0x18c>)
    89f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    89f6:	2011      	movs	r0, #17
    89f8:	4b28      	ldr	r3, [pc, #160]	; (8a9c <_ext_irq_init+0x184>)
    89fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    89fc:	2011      	movs	r0, #17
    89fe:	4b28      	ldr	r3, [pc, #160]	; (8aa0 <_ext_irq_init+0x188>)
    8a00:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    8a02:	2011      	movs	r0, #17
    8a04:	4b27      	ldr	r3, [pc, #156]	; (8aa4 <_ext_irq_init+0x18c>)
    8a06:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    8a08:	2012      	movs	r0, #18
    8a0a:	4b24      	ldr	r3, [pc, #144]	; (8a9c <_ext_irq_init+0x184>)
    8a0c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    8a0e:	2012      	movs	r0, #18
    8a10:	4b23      	ldr	r3, [pc, #140]	; (8aa0 <_ext_irq_init+0x188>)
    8a12:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    8a14:	2012      	movs	r0, #18
    8a16:	4b23      	ldr	r3, [pc, #140]	; (8aa4 <_ext_irq_init+0x18c>)
    8a18:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    8a1a:	2013      	movs	r0, #19
    8a1c:	4b1f      	ldr	r3, [pc, #124]	; (8a9c <_ext_irq_init+0x184>)
    8a1e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    8a20:	2013      	movs	r0, #19
    8a22:	4b1f      	ldr	r3, [pc, #124]	; (8aa0 <_ext_irq_init+0x188>)
    8a24:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    8a26:	2013      	movs	r0, #19
    8a28:	4b1e      	ldr	r3, [pc, #120]	; (8aa4 <_ext_irq_init+0x18c>)
    8a2a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    8a2c:	2014      	movs	r0, #20
    8a2e:	4b1b      	ldr	r3, [pc, #108]	; (8a9c <_ext_irq_init+0x184>)
    8a30:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    8a32:	2014      	movs	r0, #20
    8a34:	4b1a      	ldr	r3, [pc, #104]	; (8aa0 <_ext_irq_init+0x188>)
    8a36:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    8a38:	2014      	movs	r0, #20
    8a3a:	4b1a      	ldr	r3, [pc, #104]	; (8aa4 <_ext_irq_init+0x18c>)
    8a3c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    8a3e:	2015      	movs	r0, #21
    8a40:	4b16      	ldr	r3, [pc, #88]	; (8a9c <_ext_irq_init+0x184>)
    8a42:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    8a44:	2015      	movs	r0, #21
    8a46:	4b16      	ldr	r3, [pc, #88]	; (8aa0 <_ext_irq_init+0x188>)
    8a48:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    8a4a:	2015      	movs	r0, #21
    8a4c:	4b15      	ldr	r3, [pc, #84]	; (8aa4 <_ext_irq_init+0x18c>)
    8a4e:	4798      	blx	r3

	callback = cb;
    8a50:	4a15      	ldr	r2, [pc, #84]	; (8aa8 <_ext_irq_init+0x190>)
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    8a56:	2300      	movs	r3, #0
}
    8a58:	4618      	mov	r0, r3
    8a5a:	3708      	adds	r7, #8
    8a5c:	46bd      	mov	sp, r7
    8a5e:	bd80      	pop	{r7, pc}
    8a60:	40002800 	.word	0x40002800
    8a64:	00008711 	.word	0x00008711
    8a68:	00008809 	.word	0x00008809
    8a6c:	00008799 	.word	0x00008799
    8a70:	000086ed 	.word	0x000086ed
    8a74:	00008839 	.word	0x00008839
    8a78:	000087c5 	.word	0x000087c5
    8a7c:	00008861 	.word	0x00008861
    8a80:	0000887f 	.word	0x0000887f
    8a84:	0000889b 	.word	0x0000889b
    8a88:	000088df 	.word	0x000088df
    8a8c:	000088fb 	.word	0x000088fb
    8a90:	90999013 	.word	0x90999013
    8a94:	000088b7 	.word	0x000088b7
    8a98:	0000876d 	.word	0x0000876d
    8a9c:	0000866d 	.word	0x0000866d
    8aa0:	000086b1 	.word	0x000086b1
    8aa4:	00008631 	.word	0x00008631
    8aa8:	20001bc4 	.word	0x20001bc4

00008aac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    8aac:	b580      	push	{r7, lr}
    8aae:	b084      	sub	sp, #16
    8ab0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    8ab2:	4841      	ldr	r0, [pc, #260]	; (8bb8 <_ext_irq_handler+0x10c>)
    8ab4:	4b41      	ldr	r3, [pc, #260]	; (8bbc <_ext_irq_handler+0x110>)
    8ab6:	4798      	blx	r3
    8ab8:	4603      	mov	r3, r0
    8aba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    8abc:	f04f 33ff 	mov.w	r3, #4294967295
    8ac0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    8ac2:	683b      	ldr	r3, [r7, #0]
    8ac4:	4619      	mov	r1, r3
    8ac6:	483c      	ldr	r0, [pc, #240]	; (8bb8 <_ext_irq_handler+0x10c>)
    8ac8:	4b3d      	ldr	r3, [pc, #244]	; (8bc0 <_ext_irq_handler+0x114>)
    8aca:	4798      	blx	r3

	ASSERT(callback);
    8acc:	4b3d      	ldr	r3, [pc, #244]	; (8bc4 <_ext_irq_handler+0x118>)
    8ace:	681b      	ldr	r3, [r3, #0]
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	bf14      	ite	ne
    8ad4:	2301      	movne	r3, #1
    8ad6:	2300      	moveq	r3, #0
    8ad8:	b2db      	uxtb	r3, r3
    8ada:	f44f 7284 	mov.w	r2, #264	; 0x108
    8ade:	493a      	ldr	r1, [pc, #232]	; (8bc8 <_ext_irq_handler+0x11c>)
    8ae0:	4618      	mov	r0, r3
    8ae2:	4b3a      	ldr	r3, [pc, #232]	; (8bcc <_ext_irq_handler+0x120>)
    8ae4:	4798      	blx	r3

	while (flags) {
    8ae6:	e060      	b.n	8baa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    8ae8:	683b      	ldr	r3, [r7, #0]
    8aea:	4618      	mov	r0, r3
    8aec:	4b38      	ldr	r3, [pc, #224]	; (8bd0 <_ext_irq_handler+0x124>)
    8aee:	4798      	blx	r3
    8af0:	4603      	mov	r3, r0
    8af2:	b2db      	uxtb	r3, r3
    8af4:	3b01      	subs	r3, #1
    8af6:	b2db      	uxtb	r3, r3
    8af8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8afa:	e047      	b.n	8b8c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    8afc:	2300      	movs	r3, #0
    8afe:	71fb      	strb	r3, [r7, #7]
    8b00:	2309      	movs	r3, #9
    8b02:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    8b04:	e024      	b.n	8b50 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    8b06:	79ba      	ldrb	r2, [r7, #6]
    8b08:	79fb      	ldrb	r3, [r7, #7]
    8b0a:	4413      	add	r3, r2
    8b0c:	105b      	asrs	r3, r3, #1
    8b0e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    8b10:	797b      	ldrb	r3, [r7, #5]
    8b12:	4a30      	ldr	r2, [pc, #192]	; (8bd4 <_ext_irq_handler+0x128>)
    8b14:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8b18:	461a      	mov	r2, r3
    8b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8b1e:	429a      	cmp	r2, r3
    8b20:	d106      	bne.n	8b30 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    8b22:	797b      	ldrb	r3, [r7, #5]
    8b24:	4a2b      	ldr	r2, [pc, #172]	; (8bd4 <_ext_irq_handler+0x128>)
    8b26:	00db      	lsls	r3, r3, #3
    8b28:	4413      	add	r3, r2
    8b2a:	685b      	ldr	r3, [r3, #4]
    8b2c:	60bb      	str	r3, [r7, #8]
					break;
    8b2e:	e013      	b.n	8b58 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    8b30:	797b      	ldrb	r3, [r7, #5]
    8b32:	4a28      	ldr	r2, [pc, #160]	; (8bd4 <_ext_irq_handler+0x128>)
    8b34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8b38:	461a      	mov	r2, r3
    8b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8b3e:	429a      	cmp	r2, r3
    8b40:	da03      	bge.n	8b4a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    8b42:	797b      	ldrb	r3, [r7, #5]
    8b44:	3301      	adds	r3, #1
    8b46:	71fb      	strb	r3, [r7, #7]
    8b48:	e002      	b.n	8b50 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    8b4a:	797b      	ldrb	r3, [r7, #5]
    8b4c:	3b01      	subs	r3, #1
    8b4e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    8b50:	79ba      	ldrb	r2, [r7, #6]
    8b52:	79fb      	ldrb	r3, [r7, #7]
    8b54:	429a      	cmp	r2, r3
    8b56:	d2d6      	bcs.n	8b06 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    8b58:	68bb      	ldr	r3, [r7, #8]
    8b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    8b5e:	d003      	beq.n	8b68 <_ext_irq_handler+0xbc>
				callback(pin);
    8b60:	4b18      	ldr	r3, [pc, #96]	; (8bc4 <_ext_irq_handler+0x118>)
    8b62:	681b      	ldr	r3, [r3, #0]
    8b64:	68b8      	ldr	r0, [r7, #8]
    8b66:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    8b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8b6c:	2201      	movs	r2, #1
    8b6e:	fa02 f303 	lsl.w	r3, r2, r3
    8b72:	43da      	mvns	r2, r3
    8b74:	683b      	ldr	r3, [r7, #0]
    8b76:	4013      	ands	r3, r2
    8b78:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    8b7a:	683b      	ldr	r3, [r7, #0]
    8b7c:	4618      	mov	r0, r3
    8b7e:	4b14      	ldr	r3, [pc, #80]	; (8bd0 <_ext_irq_handler+0x124>)
    8b80:	4798      	blx	r3
    8b82:	4603      	mov	r3, r0
    8b84:	b2db      	uxtb	r3, r3
    8b86:	3b01      	subs	r3, #1
    8b88:	b2db      	uxtb	r3, r3
    8b8a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8b90:	f1b3 3fff 	cmp.w	r3, #4294967295
    8b94:	d1b2      	bne.n	8afc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    8b96:	4808      	ldr	r0, [pc, #32]	; (8bb8 <_ext_irq_handler+0x10c>)
    8b98:	4b08      	ldr	r3, [pc, #32]	; (8bbc <_ext_irq_handler+0x110>)
    8b9a:	4798      	blx	r3
    8b9c:	4603      	mov	r3, r0
    8b9e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    8ba0:	683b      	ldr	r3, [r7, #0]
    8ba2:	4619      	mov	r1, r3
    8ba4:	4804      	ldr	r0, [pc, #16]	; (8bb8 <_ext_irq_handler+0x10c>)
    8ba6:	4b06      	ldr	r3, [pc, #24]	; (8bc0 <_ext_irq_handler+0x114>)
    8ba8:	4798      	blx	r3
	while (flags) {
    8baa:	683b      	ldr	r3, [r7, #0]
    8bac:	2b00      	cmp	r3, #0
    8bae:	d19b      	bne.n	8ae8 <_ext_irq_handler+0x3c>
	}
}
    8bb0:	bf00      	nop
    8bb2:	3710      	adds	r7, #16
    8bb4:	46bd      	mov	sp, r7
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	40002800 	.word	0x40002800
    8bbc:	00008739 	.word	0x00008739
    8bc0:	00008751 	.word	0x00008751
    8bc4:	20001bc4 	.word	0x20001bc4
    8bc8:	00012b30 	.word	0x00012b30
    8bcc:	00007361 	.word	0x00007361
    8bd0:	00011bad 	.word	0x00011bad
    8bd4:	00012ae8 	.word	0x00012ae8

00008bd8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    8bd8:	b580      	push	{r7, lr}
    8bda:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8bdc:	4b01      	ldr	r3, [pc, #4]	; (8be4 <EIC_0_Handler+0xc>)
    8bde:	4798      	blx	r3
} /**
    8be0:	bf00      	nop
    8be2:	bd80      	pop	{r7, pc}
    8be4:	00008aad 	.word	0x00008aad

00008be8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8bec:	4b01      	ldr	r3, [pc, #4]	; (8bf4 <EIC_1_Handler+0xc>)
    8bee:	4798      	blx	r3
} /**
    8bf0:	bf00      	nop
    8bf2:	bd80      	pop	{r7, pc}
    8bf4:	00008aad 	.word	0x00008aad

00008bf8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    8bf8:	b580      	push	{r7, lr}
    8bfa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8bfc:	4b01      	ldr	r3, [pc, #4]	; (8c04 <EIC_3_Handler+0xc>)
    8bfe:	4798      	blx	r3
} /**
    8c00:	bf00      	nop
    8c02:	bd80      	pop	{r7, pc}
    8c04:	00008aad 	.word	0x00008aad

00008c08 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    8c08:	b580      	push	{r7, lr}
    8c0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c0c:	4b01      	ldr	r3, [pc, #4]	; (8c14 <EIC_4_Handler+0xc>)
    8c0e:	4798      	blx	r3
} /**
    8c10:	bf00      	nop
    8c12:	bd80      	pop	{r7, pc}
    8c14:	00008aad 	.word	0x00008aad

00008c18 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    8c18:	b580      	push	{r7, lr}
    8c1a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c1c:	4b01      	ldr	r3, [pc, #4]	; (8c24 <EIC_5_Handler+0xc>)
    8c1e:	4798      	blx	r3
} /**
    8c20:	bf00      	nop
    8c22:	bd80      	pop	{r7, pc}
    8c24:	00008aad 	.word	0x00008aad

00008c28 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    8c28:	b580      	push	{r7, lr}
    8c2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c2c:	4b01      	ldr	r3, [pc, #4]	; (8c34 <EIC_6_Handler+0xc>)
    8c2e:	4798      	blx	r3
} /**
    8c30:	bf00      	nop
    8c32:	bd80      	pop	{r7, pc}
    8c34:	00008aad 	.word	0x00008aad

00008c38 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c3c:	4b01      	ldr	r3, [pc, #4]	; (8c44 <EIC_7_Handler+0xc>)
    8c3e:	4798      	blx	r3
} /**
    8c40:	bf00      	nop
    8c42:	bd80      	pop	{r7, pc}
    8c44:	00008aad 	.word	0x00008aad

00008c48 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c4c:	4b01      	ldr	r3, [pc, #4]	; (8c54 <EIC_8_Handler+0xc>)
    8c4e:	4798      	blx	r3
} /**
    8c50:	bf00      	nop
    8c52:	bd80      	pop	{r7, pc}
    8c54:	00008aad 	.word	0x00008aad

00008c58 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    8c58:	b580      	push	{r7, lr}
    8c5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8c5c:	4b01      	ldr	r3, [pc, #4]	; (8c64 <EIC_9_Handler+0xc>)
    8c5e:	4798      	blx	r3
}
    8c60:	bf00      	nop
    8c62:	bd80      	pop	{r7, pc}
    8c64:	00008aad 	.word	0x00008aad

00008c68 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    8c68:	b480      	push	{r7}
    8c6a:	b085      	sub	sp, #20
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	60f8      	str	r0, [r7, #12]
    8c70:	460b      	mov	r3, r1
    8c72:	607a      	str	r2, [r7, #4]
    8c74:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    8c76:	7afa      	ldrb	r2, [r7, #11]
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	3248      	adds	r2, #72	; 0x48
    8c7c:	6879      	ldr	r1, [r7, #4]
    8c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8c82:	bf00      	nop
    8c84:	3714      	adds	r7, #20
    8c86:	46bd      	mov	sp, r7
    8c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c8c:	4770      	bx	lr

00008c8e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    8c8e:	b480      	push	{r7}
    8c90:	b083      	sub	sp, #12
    8c92:	af00      	add	r7, sp, #0
    8c94:	6078      	str	r0, [r7, #4]
    8c96:	460b      	mov	r3, r1
    8c98:	70fb      	strb	r3, [r7, #3]
    8c9a:	4613      	mov	r3, r2
    8c9c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    8c9e:	78fb      	ldrb	r3, [r7, #3]
    8ca0:	687a      	ldr	r2, [r7, #4]
    8ca2:	3304      	adds	r3, #4
    8ca4:	00db      	lsls	r3, r3, #3
    8ca6:	4413      	add	r3, r2
    8ca8:	78ba      	ldrb	r2, [r7, #2]
    8caa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    8cac:	78fb      	ldrb	r3, [r7, #3]
    8cae:	78ba      	ldrb	r2, [r7, #2]
    8cb0:	43d2      	mvns	r2, r2
    8cb2:	b2d1      	uxtb	r1, r2
    8cb4:	687a      	ldr	r2, [r7, #4]
    8cb6:	3304      	adds	r3, #4
    8cb8:	00db      	lsls	r3, r3, #3
    8cba:	4413      	add	r3, r2
    8cbc:	460a      	mov	r2, r1
    8cbe:	711a      	strb	r2, [r3, #4]
}
    8cc0:	bf00      	nop
    8cc2:	370c      	adds	r7, #12
    8cc4:	46bd      	mov	sp, r7
    8cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cca:	4770      	bx	lr

00008ccc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    8ccc:	b480      	push	{r7}
    8cce:	b085      	sub	sp, #20
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	60f8      	str	r0, [r7, #12]
    8cd4:	460b      	mov	r3, r1
    8cd6:	607a      	str	r2, [r7, #4]
    8cd8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    8cda:	7afa      	ldrb	r2, [r7, #11]
    8cdc:	68fb      	ldr	r3, [r7, #12]
    8cde:	3204      	adds	r2, #4
    8ce0:	6879      	ldr	r1, [r7, #4]
    8ce2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8ce6:	bf00      	nop
    8ce8:	3714      	adds	r7, #20
    8cea:	46bd      	mov	sp, r7
    8cec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf0:	4770      	bx	lr
	...

00008cf4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    8cf4:	b580      	push	{r7, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    8cfa:	2300      	movs	r3, #0
    8cfc:	71fb      	strb	r3, [r7, #7]
    8cfe:	e00b      	b.n	8d18 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    8d00:	79fb      	ldrb	r3, [r7, #7]
    8d02:	4a18      	ldr	r2, [pc, #96]	; (8d64 <_event_system_init+0x70>)
    8d04:	5cd3      	ldrb	r3, [r2, r3]
    8d06:	461a      	mov	r2, r3
    8d08:	79fb      	ldrb	r3, [r7, #7]
    8d0a:	4619      	mov	r1, r3
    8d0c:	4816      	ldr	r0, [pc, #88]	; (8d68 <_event_system_init+0x74>)
    8d0e:	4b17      	ldr	r3, [pc, #92]	; (8d6c <_event_system_init+0x78>)
    8d10:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    8d12:	79fb      	ldrb	r3, [r7, #7]
    8d14:	3301      	adds	r3, #1
    8d16:	71fb      	strb	r3, [r7, #7]
    8d18:	79fb      	ldrb	r3, [r7, #7]
    8d1a:	2b42      	cmp	r3, #66	; 0x42
    8d1c:	d9f0      	bls.n	8d00 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    8d1e:	2300      	movs	r3, #0
    8d20:	71fb      	strb	r3, [r7, #7]
    8d22:	e016      	b.n	8d52 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    8d24:	79fb      	ldrb	r3, [r7, #7]
    8d26:	4a12      	ldr	r2, [pc, #72]	; (8d70 <_event_system_init+0x7c>)
    8d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8d2c:	461a      	mov	r2, r3
    8d2e:	79fb      	ldrb	r3, [r7, #7]
    8d30:	4619      	mov	r1, r3
    8d32:	480d      	ldr	r0, [pc, #52]	; (8d68 <_event_system_init+0x74>)
    8d34:	4b0f      	ldr	r3, [pc, #60]	; (8d74 <_event_system_init+0x80>)
    8d36:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    8d38:	79fb      	ldrb	r3, [r7, #7]
    8d3a:	4a0f      	ldr	r2, [pc, #60]	; (8d78 <_event_system_init+0x84>)
    8d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d40:	b2da      	uxtb	r2, r3
    8d42:	79fb      	ldrb	r3, [r7, #7]
    8d44:	4619      	mov	r1, r3
    8d46:	4808      	ldr	r0, [pc, #32]	; (8d68 <_event_system_init+0x74>)
    8d48:	4b0c      	ldr	r3, [pc, #48]	; (8d7c <_event_system_init+0x88>)
    8d4a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    8d4c:	79fb      	ldrb	r3, [r7, #7]
    8d4e:	3301      	adds	r3, #1
    8d50:	71fb      	strb	r3, [r7, #7]
    8d52:	79fb      	ldrb	r3, [r7, #7]
    8d54:	2b1f      	cmp	r3, #31
    8d56:	d9e5      	bls.n	8d24 <_event_system_init+0x30>
	}

	return ERR_NONE;
    8d58:	2300      	movs	r3, #0
}
    8d5a:	4618      	mov	r0, r3
    8d5c:	3708      	adds	r7, #8
    8d5e:	46bd      	mov	sp, r7
    8d60:	bd80      	pop	{r7, pc}
    8d62:	bf00      	nop
    8d64:	00012b48 	.word	0x00012b48
    8d68:	4100e000 	.word	0x4100e000
    8d6c:	00008c69 	.word	0x00008c69
    8d70:	00012b8c 	.word	0x00012b8c
    8d74:	00008ccd 	.word	0x00008ccd
    8d78:	00012bcc 	.word	0x00012bcc
    8d7c:	00008c8f 	.word	0x00008c8f

00008d80 <hri_gclk_wait_for_sync>:
{
    8d80:	b480      	push	{r7}
    8d82:	b083      	sub	sp, #12
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    8d8a:	bf00      	nop
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	685a      	ldr	r2, [r3, #4]
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	4013      	ands	r3, r2
    8d94:	2b00      	cmp	r3, #0
    8d96:	d1f9      	bne.n	8d8c <hri_gclk_wait_for_sync+0xc>
}
    8d98:	bf00      	nop
    8d9a:	370c      	adds	r7, #12
    8d9c:	46bd      	mov	sp, r7
    8d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8da2:	4770      	bx	lr

00008da4 <hri_gclk_write_GENCTRL_reg>:
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b084      	sub	sp, #16
    8da8:	af00      	add	r7, sp, #0
    8daa:	60f8      	str	r0, [r7, #12]
    8dac:	460b      	mov	r3, r1
    8dae:	607a      	str	r2, [r7, #4]
    8db0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    8db2:	7afa      	ldrb	r2, [r7, #11]
    8db4:	68fb      	ldr	r3, [r7, #12]
    8db6:	3208      	adds	r2, #8
    8db8:	6879      	ldr	r1, [r7, #4]
    8dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    8dbe:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    8dc2:	68f8      	ldr	r0, [r7, #12]
    8dc4:	4b02      	ldr	r3, [pc, #8]	; (8dd0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    8dc6:	4798      	blx	r3
}
    8dc8:	bf00      	nop
    8dca:	3710      	adds	r7, #16
    8dcc:	46bd      	mov	sp, r7
    8dce:	bd80      	pop	{r7, pc}
    8dd0:	00008d81 	.word	0x00008d81

00008dd4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b082      	sub	sp, #8
    8dd8:	af00      	add	r7, sp, #0
    8dda:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	f003 0301 	and.w	r3, r3, #1
    8de2:	2b00      	cmp	r3, #0
    8de4:	d004      	beq.n	8df0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    8de6:	4a3b      	ldr	r2, [pc, #236]	; (8ed4 <_gclk_init_generators_by_fref+0x100>)
    8de8:	2100      	movs	r1, #0
    8dea:	483b      	ldr	r0, [pc, #236]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8dec:	4b3b      	ldr	r3, [pc, #236]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8dee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	f003 0302 	and.w	r3, r3, #2
    8df6:	2b00      	cmp	r3, #0
    8df8:	d004      	beq.n	8e04 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    8dfa:	4a39      	ldr	r2, [pc, #228]	; (8ee0 <_gclk_init_generators_by_fref+0x10c>)
    8dfc:	2101      	movs	r1, #1
    8dfe:	4836      	ldr	r0, [pc, #216]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e00:	4b36      	ldr	r3, [pc, #216]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e02:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	f003 0304 	and.w	r3, r3, #4
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	d004      	beq.n	8e18 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    8e0e:	4a35      	ldr	r2, [pc, #212]	; (8ee4 <_gclk_init_generators_by_fref+0x110>)
    8e10:	2102      	movs	r1, #2
    8e12:	4831      	ldr	r0, [pc, #196]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e14:	4b31      	ldr	r3, [pc, #196]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e16:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	f003 0308 	and.w	r3, r3, #8
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d004      	beq.n	8e2c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    8e22:	4a31      	ldr	r2, [pc, #196]	; (8ee8 <_gclk_init_generators_by_fref+0x114>)
    8e24:	2103      	movs	r1, #3
    8e26:	482c      	ldr	r0, [pc, #176]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e28:	4b2c      	ldr	r3, [pc, #176]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e2a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	f003 0310 	and.w	r3, r3, #16
    8e32:	2b00      	cmp	r3, #0
    8e34:	d004      	beq.n	8e40 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    8e36:	4a2d      	ldr	r2, [pc, #180]	; (8eec <_gclk_init_generators_by_fref+0x118>)
    8e38:	2104      	movs	r1, #4
    8e3a:	4827      	ldr	r0, [pc, #156]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e3c:	4b27      	ldr	r3, [pc, #156]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e3e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	f003 0320 	and.w	r3, r3, #32
    8e46:	2b00      	cmp	r3, #0
    8e48:	d004      	beq.n	8e54 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    8e4a:	4a29      	ldr	r2, [pc, #164]	; (8ef0 <_gclk_init_generators_by_fref+0x11c>)
    8e4c:	2105      	movs	r1, #5
    8e4e:	4822      	ldr	r0, [pc, #136]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e50:	4b22      	ldr	r3, [pc, #136]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e52:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    8e54:	687b      	ldr	r3, [r7, #4]
    8e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d004      	beq.n	8e68 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    8e5e:	4a25      	ldr	r2, [pc, #148]	; (8ef4 <_gclk_init_generators_by_fref+0x120>)
    8e60:	2106      	movs	r1, #6
    8e62:	481d      	ldr	r0, [pc, #116]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e64:	4b1d      	ldr	r3, [pc, #116]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e66:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d004      	beq.n	8e7c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    8e72:	4a21      	ldr	r2, [pc, #132]	; (8ef8 <_gclk_init_generators_by_fref+0x124>)
    8e74:	2107      	movs	r1, #7
    8e76:	4818      	ldr	r0, [pc, #96]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e78:	4b18      	ldr	r3, [pc, #96]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e7a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8e82:	2b00      	cmp	r3, #0
    8e84:	d004      	beq.n	8e90 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    8e86:	4a1d      	ldr	r2, [pc, #116]	; (8efc <_gclk_init_generators_by_fref+0x128>)
    8e88:	2108      	movs	r1, #8
    8e8a:	4813      	ldr	r0, [pc, #76]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8e8c:	4b13      	ldr	r3, [pc, #76]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8e8e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8e96:	2b00      	cmp	r3, #0
    8e98:	d004      	beq.n	8ea4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    8e9a:	4a19      	ldr	r2, [pc, #100]	; (8f00 <_gclk_init_generators_by_fref+0x12c>)
    8e9c:	2109      	movs	r1, #9
    8e9e:	480e      	ldr	r0, [pc, #56]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8ea0:	4b0e      	ldr	r3, [pc, #56]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8ea2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d004      	beq.n	8eb8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    8eae:	4a15      	ldr	r2, [pc, #84]	; (8f04 <_gclk_init_generators_by_fref+0x130>)
    8eb0:	210a      	movs	r1, #10
    8eb2:	4809      	ldr	r0, [pc, #36]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8eb4:	4b09      	ldr	r3, [pc, #36]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8eb6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d004      	beq.n	8ecc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    8ec2:	4a11      	ldr	r2, [pc, #68]	; (8f08 <_gclk_init_generators_by_fref+0x134>)
    8ec4:	210b      	movs	r1, #11
    8ec6:	4804      	ldr	r0, [pc, #16]	; (8ed8 <_gclk_init_generators_by_fref+0x104>)
    8ec8:	4b04      	ldr	r3, [pc, #16]	; (8edc <_gclk_init_generators_by_fref+0x108>)
    8eca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    8ecc:	bf00      	nop
    8ece:	3708      	adds	r7, #8
    8ed0:	46bd      	mov	sp, r7
    8ed2:	bd80      	pop	{r7, pc}
    8ed4:	00010107 	.word	0x00010107
    8ed8:	40001c00 	.word	0x40001c00
    8edc:	00008da5 	.word	0x00008da5
    8ee0:	00010907 	.word	0x00010907
    8ee4:	00010906 	.word	0x00010906
    8ee8:	00020908 	.word	0x00020908
    8eec:	00010901 	.word	0x00010901
    8ef0:	00062901 	.word	0x00062901
    8ef4:	000c2901 	.word	0x000c2901
    8ef8:	00082908 	.word	0x00082908
    8efc:	00032901 	.word	0x00032901
    8f00:	00011908 	.word	0x00011908
    8f04:	00010905 	.word	0x00010905
    8f08:	00041905 	.word	0x00041905

00008f0c <hri_mclk_write_CPUDIV_reg>:
{
    8f0c:	b480      	push	{r7}
    8f0e:	b083      	sub	sp, #12
    8f10:	af00      	add	r7, sp, #0
    8f12:	6078      	str	r0, [r7, #4]
    8f14:	460b      	mov	r3, r1
    8f16:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	78fa      	ldrb	r2, [r7, #3]
    8f1c:	715a      	strb	r2, [r3, #5]
}
    8f1e:	bf00      	nop
    8f20:	370c      	adds	r7, #12
    8f22:	46bd      	mov	sp, r7
    8f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f28:	4770      	bx	lr
	...

00008f2c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    8f2c:	b580      	push	{r7, lr}
    8f2e:	b082      	sub	sp, #8
    8f30:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    8f32:	4b05      	ldr	r3, [pc, #20]	; (8f48 <_mclk_init+0x1c>)
    8f34:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    8f36:	2101      	movs	r1, #1
    8f38:	6878      	ldr	r0, [r7, #4]
    8f3a:	4b04      	ldr	r3, [pc, #16]	; (8f4c <_mclk_init+0x20>)
    8f3c:	4798      	blx	r3
}
    8f3e:	bf00      	nop
    8f40:	3708      	adds	r7, #8
    8f42:	46bd      	mov	sp, r7
    8f44:	bd80      	pop	{r7, pc}
    8f46:	bf00      	nop
    8f48:	40000800 	.word	0x40000800
    8f4c:	00008f0d 	.word	0x00008f0d

00008f50 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    8f50:	b480      	push	{r7}
    8f52:	b083      	sub	sp, #12
    8f54:	af00      	add	r7, sp, #0
    8f56:	6078      	str	r0, [r7, #4]
    8f58:	460b      	mov	r3, r1
    8f5a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	78fa      	ldrb	r2, [r7, #3]
    8f60:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8f62:	bf00      	nop
    8f64:	370c      	adds	r7, #12
    8f66:	46bd      	mov	sp, r7
    8f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f6c:	4770      	bx	lr

00008f6e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    8f6e:	b480      	push	{r7}
    8f70:	b083      	sub	sp, #12
    8f72:	af00      	add	r7, sp, #0
    8f74:	6078      	str	r0, [r7, #4]
    8f76:	460b      	mov	r3, r1
    8f78:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	887a      	ldrh	r2, [r7, #2]
    8f7e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8f80:	bf00      	nop
    8f82:	370c      	adds	r7, #12
    8f84:	46bd      	mov	sp, r7
    8f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f8a:	4770      	bx	lr

00008f8c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    8f8c:	b480      	push	{r7}
    8f8e:	b083      	sub	sp, #12
    8f90:	af00      	add	r7, sp, #0
    8f92:	6078      	str	r0, [r7, #4]
    8f94:	460b      	mov	r3, r1
    8f96:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	78fa      	ldrb	r2, [r7, #3]
    8f9c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8f9e:	bf00      	nop
    8fa0:	370c      	adds	r7, #12
    8fa2:	46bd      	mov	sp, r7
    8fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa8:	4770      	bx	lr

00008faa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    8faa:	b480      	push	{r7}
    8fac:	b083      	sub	sp, #12
    8fae:	af00      	add	r7, sp, #0
    8fb0:	6078      	str	r0, [r7, #4]
    8fb2:	460b      	mov	r3, r1
    8fb4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    8fb6:	687b      	ldr	r3, [r7, #4]
    8fb8:	78fa      	ldrb	r2, [r7, #3]
    8fba:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8fbc:	bf00      	nop
    8fbe:	370c      	adds	r7, #12
    8fc0:	46bd      	mov	sp, r7
    8fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc6:	4770      	bx	lr

00008fc8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    8fc8:	b480      	push	{r7}
    8fca:	b085      	sub	sp, #20
    8fcc:	af00      	add	r7, sp, #0
    8fce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	69db      	ldr	r3, [r3, #28]
    8fd4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    8fd6:	68fb      	ldr	r3, [r7, #12]
    8fd8:	0a1b      	lsrs	r3, r3, #8
    8fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8fde:	60fb      	str	r3, [r7, #12]
	return tmp;
    8fe0:	68fb      	ldr	r3, [r7, #12]
}
    8fe2:	4618      	mov	r0, r3
    8fe4:	3714      	adds	r7, #20
    8fe6:	46bd      	mov	sp, r7
    8fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fec:	4770      	bx	lr

00008fee <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    8fee:	b480      	push	{r7}
    8ff0:	b083      	sub	sp, #12
    8ff2:	af00      	add	r7, sp, #0
    8ff4:	6078      	str	r0, [r7, #4]
    8ff6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    8ff8:	687b      	ldr	r3, [r7, #4]
    8ffa:	683a      	ldr	r2, [r7, #0]
    8ffc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    8ffe:	bf00      	nop
    9000:	370c      	adds	r7, #12
    9002:	46bd      	mov	sp, r7
    9004:	f85d 7b04 	ldr.w	r7, [sp], #4
    9008:	4770      	bx	lr
	...

0000900c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    900c:	b580      	push	{r7, lr}
    900e:	b082      	sub	sp, #8
    9010:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    9012:	4b13      	ldr	r3, [pc, #76]	; (9060 <_osc32kctrl_init_sources+0x54>)
    9014:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    9016:	2300      	movs	r3, #0
    9018:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    901a:	f242 018e 	movw	r1, #8334	; 0x208e
    901e:	6878      	ldr	r0, [r7, #4]
    9020:	4b10      	ldr	r3, [pc, #64]	; (9064 <_osc32kctrl_init_sources+0x58>)
    9022:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    9024:	2100      	movs	r1, #0
    9026:	6878      	ldr	r0, [r7, #4]
    9028:	4b0f      	ldr	r3, [pc, #60]	; (9068 <_osc32kctrl_init_sources+0x5c>)
    902a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    902c:	2100      	movs	r1, #0
    902e:	6878      	ldr	r0, [r7, #4]
    9030:	4b0e      	ldr	r3, [pc, #56]	; (906c <_osc32kctrl_init_sources+0x60>)
    9032:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    9034:	6878      	ldr	r0, [r7, #4]
    9036:	4b0e      	ldr	r3, [pc, #56]	; (9070 <_osc32kctrl_init_sources+0x64>)
    9038:	4798      	blx	r3
    903a:	4603      	mov	r3, r0
    903c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    903e:	887b      	ldrh	r3, [r7, #2]
    9040:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    9042:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    9046:	4619      	mov	r1, r3
    9048:	6878      	ldr	r0, [r7, #4]
    904a:	4b0a      	ldr	r3, [pc, #40]	; (9074 <_osc32kctrl_init_sources+0x68>)
    904c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    904e:	2100      	movs	r1, #0
    9050:	6878      	ldr	r0, [r7, #4]
    9052:	4b09      	ldr	r3, [pc, #36]	; (9078 <_osc32kctrl_init_sources+0x6c>)
    9054:	4798      	blx	r3
	(void)calib;
}
    9056:	bf00      	nop
    9058:	3708      	adds	r7, #8
    905a:	46bd      	mov	sp, r7
    905c:	bd80      	pop	{r7, pc}
    905e:	bf00      	nop
    9060:	40001400 	.word	0x40001400
    9064:	00008f6f 	.word	0x00008f6f
    9068:	00008f8d 	.word	0x00008f8d
    906c:	00008fab 	.word	0x00008fab
    9070:	00008fc9 	.word	0x00008fc9
    9074:	00008fef 	.word	0x00008fef
    9078:	00008f51 	.word	0x00008f51

0000907c <hri_gclk_wait_for_sync>:
{
    907c:	b480      	push	{r7}
    907e:	b083      	sub	sp, #12
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9086:	bf00      	nop
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	685a      	ldr	r2, [r3, #4]
    908c:	683b      	ldr	r3, [r7, #0]
    908e:	4013      	ands	r3, r2
    9090:	2b00      	cmp	r3, #0
    9092:	d1f9      	bne.n	9088 <hri_gclk_wait_for_sync+0xc>
}
    9094:	bf00      	nop
    9096:	370c      	adds	r7, #12
    9098:	46bd      	mov	sp, r7
    909a:	f85d 7b04 	ldr.w	r7, [sp], #4
    909e:	4770      	bx	lr

000090a0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    90a0:	b480      	push	{r7}
    90a2:	b083      	sub	sp, #12
    90a4:	af00      	add	r7, sp, #0
    90a6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    90a8:	687b      	ldr	r3, [r7, #4]
    90aa:	685b      	ldr	r3, [r3, #4]
    90ac:	089b      	lsrs	r3, r3, #2
    90ae:	f003 0301 	and.w	r3, r3, #1
    90b2:	2b00      	cmp	r3, #0
    90b4:	bf14      	ite	ne
    90b6:	2301      	movne	r3, #1
    90b8:	2300      	moveq	r3, #0
    90ba:	b2db      	uxtb	r3, r3
}
    90bc:	4618      	mov	r0, r3
    90be:	370c      	adds	r7, #12
    90c0:	46bd      	mov	sp, r7
    90c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c6:	4770      	bx	lr

000090c8 <hri_gclk_read_SYNCBUSY_reg>:
{
    90c8:	b480      	push	{r7}
    90ca:	b083      	sub	sp, #12
    90cc:	af00      	add	r7, sp, #0
    90ce:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	685b      	ldr	r3, [r3, #4]
}
    90d4:	4618      	mov	r0, r3
    90d6:	370c      	adds	r7, #12
    90d8:	46bd      	mov	sp, r7
    90da:	f85d 7b04 	ldr.w	r7, [sp], #4
    90de:	4770      	bx	lr

000090e0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b086      	sub	sp, #24
    90e4:	af00      	add	r7, sp, #0
    90e6:	60f8      	str	r0, [r7, #12]
    90e8:	460b      	mov	r3, r1
    90ea:	607a      	str	r2, [r7, #4]
    90ec:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    90ee:	7afa      	ldrb	r2, [r7, #11]
    90f0:	68fb      	ldr	r3, [r7, #12]
    90f2:	3208      	adds	r2, #8
    90f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    90f8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    90fa:	697b      	ldr	r3, [r7, #20]
    90fc:	f023 030f 	bic.w	r3, r3, #15
    9100:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9102:	687b      	ldr	r3, [r7, #4]
    9104:	f003 030f 	and.w	r3, r3, #15
    9108:	697a      	ldr	r2, [r7, #20]
    910a:	4313      	orrs	r3, r2
    910c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    910e:	7afa      	ldrb	r2, [r7, #11]
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	3208      	adds	r2, #8
    9114:	6979      	ldr	r1, [r7, #20]
    9116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    911a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    911e:	68f8      	ldr	r0, [r7, #12]
    9120:	4b02      	ldr	r3, [pc, #8]	; (912c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    9122:	4798      	blx	r3
}
    9124:	bf00      	nop
    9126:	3718      	adds	r7, #24
    9128:	46bd      	mov	sp, r7
    912a:	bd80      	pop	{r7, pc}
    912c:	0000907d 	.word	0x0000907d

00009130 <hri_gclk_write_PCHCTRL_reg>:
{
    9130:	b480      	push	{r7}
    9132:	b085      	sub	sp, #20
    9134:	af00      	add	r7, sp, #0
    9136:	60f8      	str	r0, [r7, #12]
    9138:	460b      	mov	r3, r1
    913a:	607a      	str	r2, [r7, #4]
    913c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    913e:	7afa      	ldrb	r2, [r7, #11]
    9140:	68fb      	ldr	r3, [r7, #12]
    9142:	3220      	adds	r2, #32
    9144:	6879      	ldr	r1, [r7, #4]
    9146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    914a:	bf00      	nop
    914c:	3714      	adds	r7, #20
    914e:	46bd      	mov	sp, r7
    9150:	f85d 7b04 	ldr.w	r7, [sp], #4
    9154:	4770      	bx	lr

00009156 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    9156:	b480      	push	{r7}
    9158:	b085      	sub	sp, #20
    915a:	af00      	add	r7, sp, #0
    915c:	60f8      	str	r0, [r7, #12]
    915e:	460b      	mov	r3, r1
    9160:	607a      	str	r2, [r7, #4]
    9162:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9164:	bf00      	nop
    9166:	7afa      	ldrb	r2, [r7, #11]
    9168:	68f9      	ldr	r1, [r7, #12]
    916a:	4613      	mov	r3, r2
    916c:	009b      	lsls	r3, r3, #2
    916e:	4413      	add	r3, r2
    9170:	009b      	lsls	r3, r3, #2
    9172:	440b      	add	r3, r1
    9174:	333c      	adds	r3, #60	; 0x3c
    9176:	681a      	ldr	r2, [r3, #0]
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	4013      	ands	r3, r2
    917c:	2b00      	cmp	r3, #0
    917e:	d1f2      	bne.n	9166 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9180:	bf00      	nop
    9182:	3714      	adds	r7, #20
    9184:	46bd      	mov	sp, r7
    9186:	f85d 7b04 	ldr.w	r7, [sp], #4
    918a:	4770      	bx	lr

0000918c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    918c:	b480      	push	{r7}
    918e:	b083      	sub	sp, #12
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
    9194:	460b      	mov	r3, r1
    9196:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    9198:	78fa      	ldrb	r2, [r7, #3]
    919a:	6879      	ldr	r1, [r7, #4]
    919c:	4613      	mov	r3, r2
    919e:	009b      	lsls	r3, r3, #2
    91a0:	4413      	add	r3, r2
    91a2:	009b      	lsls	r3, r3, #2
    91a4:	440b      	add	r3, r1
    91a6:	3340      	adds	r3, #64	; 0x40
    91a8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    91aa:	f003 0301 	and.w	r3, r3, #1
    91ae:	2b00      	cmp	r3, #0
    91b0:	bf14      	ite	ne
    91b2:	2301      	movne	r3, #1
    91b4:	2300      	moveq	r3, #0
    91b6:	b2db      	uxtb	r3, r3
}
    91b8:	4618      	mov	r0, r3
    91ba:	370c      	adds	r7, #12
    91bc:	46bd      	mov	sp, r7
    91be:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c2:	4770      	bx	lr

000091c4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    91c4:	b480      	push	{r7}
    91c6:	b083      	sub	sp, #12
    91c8:	af00      	add	r7, sp, #0
    91ca:	6078      	str	r0, [r7, #4]
    91cc:	460b      	mov	r3, r1
    91ce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    91d0:	78fa      	ldrb	r2, [r7, #3]
    91d2:	6879      	ldr	r1, [r7, #4]
    91d4:	4613      	mov	r3, r2
    91d6:	009b      	lsls	r3, r3, #2
    91d8:	4413      	add	r3, r2
    91da:	009b      	lsls	r3, r3, #2
    91dc:	440b      	add	r3, r1
    91de:	3340      	adds	r3, #64	; 0x40
    91e0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    91e2:	085b      	lsrs	r3, r3, #1
    91e4:	f003 0301 	and.w	r3, r3, #1
    91e8:	2b00      	cmp	r3, #0
    91ea:	bf14      	ite	ne
    91ec:	2301      	movne	r3, #1
    91ee:	2300      	moveq	r3, #0
    91f0:	b2db      	uxtb	r3, r3
}
    91f2:	4618      	mov	r0, r3
    91f4:	370c      	adds	r7, #12
    91f6:	46bd      	mov	sp, r7
    91f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    91fc:	4770      	bx	lr
	...

00009200 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9200:	b580      	push	{r7, lr}
    9202:	b082      	sub	sp, #8
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
    9208:	460b      	mov	r3, r1
    920a:	70fb      	strb	r3, [r7, #3]
    920c:	4613      	mov	r3, r2
    920e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9210:	78fa      	ldrb	r2, [r7, #3]
    9212:	6879      	ldr	r1, [r7, #4]
    9214:	4613      	mov	r3, r2
    9216:	009b      	lsls	r3, r3, #2
    9218:	4413      	add	r3, r2
    921a:	009b      	lsls	r3, r3, #2
    921c:	440b      	add	r3, r1
    921e:	3330      	adds	r3, #48	; 0x30
    9220:	78ba      	ldrb	r2, [r7, #2]
    9222:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    9224:	78fb      	ldrb	r3, [r7, #3]
    9226:	2202      	movs	r2, #2
    9228:	4619      	mov	r1, r3
    922a:	6878      	ldr	r0, [r7, #4]
    922c:	4b02      	ldr	r3, [pc, #8]	; (9238 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    922e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9230:	bf00      	nop
    9232:	3708      	adds	r7, #8
    9234:	46bd      	mov	sp, r7
    9236:	bd80      	pop	{r7, pc}
    9238:	00009157 	.word	0x00009157

0000923c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    923c:	b580      	push	{r7, lr}
    923e:	b084      	sub	sp, #16
    9240:	af00      	add	r7, sp, #0
    9242:	60f8      	str	r0, [r7, #12]
    9244:	460b      	mov	r3, r1
    9246:	607a      	str	r2, [r7, #4]
    9248:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    924a:	7afa      	ldrb	r2, [r7, #11]
    924c:	68f9      	ldr	r1, [r7, #12]
    924e:	4613      	mov	r3, r2
    9250:	009b      	lsls	r3, r3, #2
    9252:	4413      	add	r3, r2
    9254:	009b      	lsls	r3, r3, #2
    9256:	440b      	add	r3, r1
    9258:	3334      	adds	r3, #52	; 0x34
    925a:	687a      	ldr	r2, [r7, #4]
    925c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    925e:	7afb      	ldrb	r3, [r7, #11]
    9260:	2206      	movs	r2, #6
    9262:	4619      	mov	r1, r3
    9264:	68f8      	ldr	r0, [r7, #12]
    9266:	4b03      	ldr	r3, [pc, #12]	; (9274 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    9268:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    926a:	bf00      	nop
    926c:	3710      	adds	r7, #16
    926e:	46bd      	mov	sp, r7
    9270:	bd80      	pop	{r7, pc}
    9272:	bf00      	nop
    9274:	00009157 	.word	0x00009157

00009278 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    9278:	b480      	push	{r7}
    927a:	b085      	sub	sp, #20
    927c:	af00      	add	r7, sp, #0
    927e:	60f8      	str	r0, [r7, #12]
    9280:	460b      	mov	r3, r1
    9282:	607a      	str	r2, [r7, #4]
    9284:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    9286:	7afa      	ldrb	r2, [r7, #11]
    9288:	68f9      	ldr	r1, [r7, #12]
    928a:	4613      	mov	r3, r2
    928c:	009b      	lsls	r3, r3, #2
    928e:	4413      	add	r3, r2
    9290:	009b      	lsls	r3, r3, #2
    9292:	440b      	add	r3, r1
    9294:	3338      	adds	r3, #56	; 0x38
    9296:	687a      	ldr	r2, [r7, #4]
    9298:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    929a:	bf00      	nop
    929c:	3714      	adds	r7, #20
    929e:	46bd      	mov	sp, r7
    92a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a4:	4770      	bx	lr

000092a6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    92a6:	b480      	push	{r7}
    92a8:	b083      	sub	sp, #12
    92aa:	af00      	add	r7, sp, #0
    92ac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	691b      	ldr	r3, [r3, #16]
    92b2:	085b      	lsrs	r3, r3, #1
    92b4:	f003 0301 	and.w	r3, r3, #1
    92b8:	2b00      	cmp	r3, #0
    92ba:	bf14      	ite	ne
    92bc:	2301      	movne	r3, #1
    92be:	2300      	moveq	r3, #0
    92c0:	b2db      	uxtb	r3, r3
}
    92c2:	4618      	mov	r0, r3
    92c4:	370c      	adds	r7, #12
    92c6:	46bd      	mov	sp, r7
    92c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92cc:	4770      	bx	lr

000092ce <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    92ce:	b480      	push	{r7}
    92d0:	b083      	sub	sp, #12
    92d2:	af00      	add	r7, sp, #0
    92d4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	691b      	ldr	r3, [r3, #16]
    92da:	0a1b      	lsrs	r3, r3, #8
    92dc:	f003 0301 	and.w	r3, r3, #1
    92e0:	2b00      	cmp	r3, #0
    92e2:	bf14      	ite	ne
    92e4:	2301      	movne	r3, #1
    92e6:	2300      	moveq	r3, #0
    92e8:	b2db      	uxtb	r3, r3
}
    92ea:	4618      	mov	r0, r3
    92ec:	370c      	adds	r7, #12
    92ee:	46bd      	mov	sp, r7
    92f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f4:	4770      	bx	lr

000092f6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    92f6:	b480      	push	{r7}
    92f8:	b085      	sub	sp, #20
    92fa:	af00      	add	r7, sp, #0
    92fc:	6078      	str	r0, [r7, #4]
    92fe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	691b      	ldr	r3, [r3, #16]
    9304:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9306:	68fa      	ldr	r2, [r7, #12]
    9308:	683b      	ldr	r3, [r7, #0]
    930a:	4013      	ands	r3, r2
    930c:	60fb      	str	r3, [r7, #12]
	return tmp;
    930e:	68fb      	ldr	r3, [r7, #12]
}
    9310:	4618      	mov	r0, r3
    9312:	3714      	adds	r7, #20
    9314:	46bd      	mov	sp, r7
    9316:	f85d 7b04 	ldr.w	r7, [sp], #4
    931a:	4770      	bx	lr

0000931c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    931c:	b480      	push	{r7}
    931e:	b085      	sub	sp, #20
    9320:	af00      	add	r7, sp, #0
    9322:	60f8      	str	r0, [r7, #12]
    9324:	460b      	mov	r3, r1
    9326:	607a      	str	r2, [r7, #4]
    9328:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    932a:	7afb      	ldrb	r3, [r7, #11]
    932c:	68fa      	ldr	r2, [r7, #12]
    932e:	3304      	adds	r3, #4
    9330:	009b      	lsls	r3, r3, #2
    9332:	4413      	add	r3, r2
    9334:	687a      	ldr	r2, [r7, #4]
    9336:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9338:	bf00      	nop
    933a:	3714      	adds	r7, #20
    933c:	46bd      	mov	sp, r7
    933e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9342:	4770      	bx	lr

00009344 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9344:	b480      	push	{r7}
    9346:	b083      	sub	sp, #12
    9348:	af00      	add	r7, sp, #0
    934a:	6078      	str	r0, [r7, #4]
    934c:	460b      	mov	r3, r1
    934e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	78fa      	ldrb	r2, [r7, #3]
    9354:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9356:	bf00      	nop
    9358:	370c      	adds	r7, #12
    935a:	46bd      	mov	sp, r7
    935c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9360:	4770      	bx	lr

00009362 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9362:	b480      	push	{r7}
    9364:	b085      	sub	sp, #20
    9366:	af00      	add	r7, sp, #0
    9368:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	f893 3020 	ldrb.w	r3, [r3, #32]
    9370:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9372:	7bfb      	ldrb	r3, [r7, #15]
    9374:	f003 0301 	and.w	r3, r3, #1
    9378:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    937a:	7bfb      	ldrb	r3, [r7, #15]
    937c:	2b00      	cmp	r3, #0
    937e:	bf14      	ite	ne
    9380:	2301      	movne	r3, #1
    9382:	2300      	moveq	r3, #0
    9384:	b2db      	uxtb	r3, r3
}
    9386:	4618      	mov	r0, r3
    9388:	3714      	adds	r7, #20
    938a:	46bd      	mov	sp, r7
    938c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9390:	4770      	bx	lr

00009392 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9392:	b480      	push	{r7}
    9394:	b083      	sub	sp, #12
    9396:	af00      	add	r7, sp, #0
    9398:	6078      	str	r0, [r7, #4]
    939a:	460b      	mov	r3, r1
    939c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	78fa      	ldrb	r2, [r7, #3]
    93a2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    93a6:	bf00      	nop
    93a8:	370c      	adds	r7, #12
    93aa:	46bd      	mov	sp, r7
    93ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    93b0:	4770      	bx	lr

000093b2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    93b2:	b480      	push	{r7}
    93b4:	b083      	sub	sp, #12
    93b6:	af00      	add	r7, sp, #0
    93b8:	6078      	str	r0, [r7, #4]
    93ba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	683a      	ldr	r2, [r7, #0]
    93c0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    93c2:	bf00      	nop
    93c4:	370c      	adds	r7, #12
    93c6:	46bd      	mov	sp, r7
    93c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93cc:	4770      	bx	lr

000093ce <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    93ce:	b480      	push	{r7}
    93d0:	b083      	sub	sp, #12
    93d2:	af00      	add	r7, sp, #0
    93d4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    93d6:	687b      	ldr	r3, [r7, #4]
    93d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    93da:	4618      	mov	r0, r3
    93dc:	370c      	adds	r7, #12
    93de:	46bd      	mov	sp, r7
    93e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e4:	4770      	bx	lr

000093e6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    93e6:	b480      	push	{r7}
    93e8:	b083      	sub	sp, #12
    93ea:	af00      	add	r7, sp, #0
    93ec:	6078      	str	r0, [r7, #4]
    93ee:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    93f0:	687b      	ldr	r3, [r7, #4]
    93f2:	683a      	ldr	r2, [r7, #0]
    93f4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    93f6:	bf00      	nop
    93f8:	370c      	adds	r7, #12
    93fa:	46bd      	mov	sp, r7
    93fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9400:	4770      	bx	lr

00009402 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9402:	b480      	push	{r7}
    9404:	b085      	sub	sp, #20
    9406:	af00      	add	r7, sp, #0
    9408:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9410:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9412:	7bfb      	ldrb	r3, [r7, #15]
    9414:	085b      	lsrs	r3, r3, #1
    9416:	b2db      	uxtb	r3, r3
    9418:	f003 0301 	and.w	r3, r3, #1
    941c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    941e:	7bfb      	ldrb	r3, [r7, #15]
    9420:	2b00      	cmp	r3, #0
    9422:	bf14      	ite	ne
    9424:	2301      	movne	r3, #1
    9426:	2300      	moveq	r3, #0
    9428:	b2db      	uxtb	r3, r3
}
    942a:	4618      	mov	r0, r3
    942c:	3714      	adds	r7, #20
    942e:	46bd      	mov	sp, r7
    9430:	f85d 7b04 	ldr.w	r7, [sp], #4
    9434:	4770      	bx	lr

00009436 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9436:	b480      	push	{r7}
    9438:	b085      	sub	sp, #20
    943a:	af00      	add	r7, sp, #0
    943c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9444:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9446:	7bfb      	ldrb	r3, [r7, #15]
    9448:	089b      	lsrs	r3, r3, #2
    944a:	b2db      	uxtb	r3, r3
    944c:	f003 0301 	and.w	r3, r3, #1
    9450:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9452:	7bfb      	ldrb	r3, [r7, #15]
    9454:	2b00      	cmp	r3, #0
    9456:	bf14      	ite	ne
    9458:	2301      	movne	r3, #1
    945a:	2300      	moveq	r3, #0
    945c:	b2db      	uxtb	r3, r3
}
    945e:	4618      	mov	r0, r3
    9460:	3714      	adds	r7, #20
    9462:	46bd      	mov	sp, r7
    9464:	f85d 7b04 	ldr.w	r7, [sp], #4
    9468:	4770      	bx	lr

0000946a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    946a:	b480      	push	{r7}
    946c:	b085      	sub	sp, #20
    946e:	af00      	add	r7, sp, #0
    9470:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9478:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    947a:	7bfb      	ldrb	r3, [r7, #15]
    947c:	08db      	lsrs	r3, r3, #3
    947e:	b2db      	uxtb	r3, r3
    9480:	f003 0301 	and.w	r3, r3, #1
    9484:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9486:	7bfb      	ldrb	r3, [r7, #15]
    9488:	2b00      	cmp	r3, #0
    948a:	bf14      	ite	ne
    948c:	2301      	movne	r3, #1
    948e:	2300      	moveq	r3, #0
    9490:	b2db      	uxtb	r3, r3
}
    9492:	4618      	mov	r0, r3
    9494:	3714      	adds	r7, #20
    9496:	46bd      	mov	sp, r7
    9498:	f85d 7b04 	ldr.w	r7, [sp], #4
    949c:	4770      	bx	lr

0000949e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    949e:	b480      	push	{r7}
    94a0:	b085      	sub	sp, #20
    94a2:	af00      	add	r7, sp, #0
    94a4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    94ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    94ae:	7bfb      	ldrb	r3, [r7, #15]
    94b0:	091b      	lsrs	r3, r3, #4
    94b2:	b2db      	uxtb	r3, r3
    94b4:	f003 0301 	and.w	r3, r3, #1
    94b8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    94ba:	7bfb      	ldrb	r3, [r7, #15]
    94bc:	2b00      	cmp	r3, #0
    94be:	bf14      	ite	ne
    94c0:	2301      	movne	r3, #1
    94c2:	2300      	moveq	r3, #0
    94c4:	b2db      	uxtb	r3, r3
}
    94c6:	4618      	mov	r0, r3
    94c8:	3714      	adds	r7, #20
    94ca:	46bd      	mov	sp, r7
    94cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d0:	4770      	bx	lr
	...

000094d4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    94d4:	b580      	push	{r7, lr}
    94d6:	b082      	sub	sp, #8
    94d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    94da:	4b0a      	ldr	r3, [pc, #40]	; (9504 <_oscctrl_init_sources+0x30>)
    94dc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    94de:	4a0a      	ldr	r2, [pc, #40]	; (9508 <_oscctrl_init_sources+0x34>)
    94e0:	2101      	movs	r1, #1
    94e2:	6878      	ldr	r0, [r7, #4]
    94e4:	4b09      	ldr	r3, [pc, #36]	; (950c <_oscctrl_init_sources+0x38>)
    94e6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    94e8:	bf00      	nop
    94ea:	6878      	ldr	r0, [r7, #4]
    94ec:	4b08      	ldr	r3, [pc, #32]	; (9510 <_oscctrl_init_sources+0x3c>)
    94ee:	4798      	blx	r3
    94f0:	4603      	mov	r3, r0
    94f2:	f083 0301 	eor.w	r3, r3, #1
    94f6:	b2db      	uxtb	r3, r3
    94f8:	2b00      	cmp	r3, #0
    94fa:	d1f6      	bne.n	94ea <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    94fc:	bf00      	nop
    94fe:	3708      	adds	r7, #8
    9500:	46bd      	mov	sp, r7
    9502:	bd80      	pop	{r7, pc}
    9504:	40001000 	.word	0x40001000
    9508:	03002646 	.word	0x03002646
    950c:	0000931d 	.word	0x0000931d
    9510:	000092a7 	.word	0x000092a7

00009514 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9514:	b580      	push	{r7, lr}
    9516:	b084      	sub	sp, #16
    9518:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    951a:	4b6b      	ldr	r3, [pc, #428]	; (96c8 <_oscctrl_init_referenced_generators+0x1b4>)
    951c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    951e:	2204      	movs	r2, #4
    9520:	2100      	movs	r1, #0
    9522:	486a      	ldr	r0, [pc, #424]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    9524:	4b6a      	ldr	r3, [pc, #424]	; (96d0 <_oscctrl_init_referenced_generators+0x1bc>)
    9526:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9528:	bf00      	nop
    952a:	4868      	ldr	r0, [pc, #416]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    952c:	4b69      	ldr	r3, [pc, #420]	; (96d4 <_oscctrl_init_referenced_generators+0x1c0>)
    952e:	4798      	blx	r3
    9530:	4603      	mov	r3, r0
    9532:	2b00      	cmp	r3, #0
    9534:	d1f9      	bne.n	952a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9536:	2100      	movs	r1, #0
    9538:	68f8      	ldr	r0, [r7, #12]
    953a:	4b67      	ldr	r3, [pc, #412]	; (96d8 <_oscctrl_init_referenced_generators+0x1c4>)
    953c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    953e:	4967      	ldr	r1, [pc, #412]	; (96dc <_oscctrl_init_referenced_generators+0x1c8>)
    9540:	68f8      	ldr	r0, [r7, #12]
    9542:	4b67      	ldr	r3, [pc, #412]	; (96e0 <_oscctrl_init_referenced_generators+0x1cc>)
    9544:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9546:	bf00      	nop
    9548:	68f8      	ldr	r0, [r7, #12]
    954a:	4b66      	ldr	r3, [pc, #408]	; (96e4 <_oscctrl_init_referenced_generators+0x1d0>)
    954c:	4798      	blx	r3
    954e:	4603      	mov	r3, r0
    9550:	2b00      	cmp	r3, #0
    9552:	d1f9      	bne.n	9548 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9554:	2100      	movs	r1, #0
    9556:	68f8      	ldr	r0, [r7, #12]
    9558:	4b63      	ldr	r3, [pc, #396]	; (96e8 <_oscctrl_init_referenced_generators+0x1d4>)
    955a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    955c:	bf00      	nop
    955e:	68f8      	ldr	r0, [r7, #12]
    9560:	4b62      	ldr	r3, [pc, #392]	; (96ec <_oscctrl_init_referenced_generators+0x1d8>)
    9562:	4798      	blx	r3
    9564:	4603      	mov	r3, r0
    9566:	2b00      	cmp	r3, #0
    9568:	d1f9      	bne.n	955e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    956a:	2302      	movs	r3, #2
    956c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    956e:	7afb      	ldrb	r3, [r7, #11]
    9570:	4619      	mov	r1, r3
    9572:	68f8      	ldr	r0, [r7, #12]
    9574:	4b58      	ldr	r3, [pc, #352]	; (96d8 <_oscctrl_init_referenced_generators+0x1c4>)
    9576:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    9578:	bf00      	nop
    957a:	68f8      	ldr	r0, [r7, #12]
    957c:	4b5c      	ldr	r3, [pc, #368]	; (96f0 <_oscctrl_init_referenced_generators+0x1dc>)
    957e:	4798      	blx	r3
    9580:	4603      	mov	r3, r0
    9582:	2b00      	cmp	r3, #0
    9584:	d1f9      	bne.n	957a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    9586:	68f8      	ldr	r0, [r7, #12]
    9588:	4b5a      	ldr	r3, [pc, #360]	; (96f4 <_oscctrl_init_referenced_generators+0x1e0>)
    958a:	4798      	blx	r3
    958c:	4603      	mov	r3, r0
    958e:	4619      	mov	r1, r3
    9590:	68f8      	ldr	r0, [r7, #12]
    9592:	4b59      	ldr	r3, [pc, #356]	; (96f8 <_oscctrl_init_referenced_generators+0x1e4>)
    9594:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    9596:	bf00      	nop
    9598:	68f8      	ldr	r0, [r7, #12]
    959a:	4b58      	ldr	r3, [pc, #352]	; (96fc <_oscctrl_init_referenced_generators+0x1e8>)
    959c:	4798      	blx	r3
    959e:	4603      	mov	r3, r0
    95a0:	2b00      	cmp	r3, #0
    95a2:	d1f9      	bne.n	9598 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    95a4:	2319      	movs	r3, #25
    95a6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    95a8:	7afb      	ldrb	r3, [r7, #11]
    95aa:	4619      	mov	r1, r3
    95ac:	68f8      	ldr	r0, [r7, #12]
    95ae:	4b4e      	ldr	r3, [pc, #312]	; (96e8 <_oscctrl_init_referenced_generators+0x1d4>)
    95b0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    95b2:	bf00      	nop
    95b4:	68f8      	ldr	r0, [r7, #12]
    95b6:	4b4d      	ldr	r3, [pc, #308]	; (96ec <_oscctrl_init_referenced_generators+0x1d8>)
    95b8:	4798      	blx	r3
    95ba:	4603      	mov	r3, r0
    95bc:	2b00      	cmp	r3, #0
    95be:	d1f9      	bne.n	95b4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    95c0:	2245      	movs	r2, #69	; 0x45
    95c2:	2101      	movs	r1, #1
    95c4:	4841      	ldr	r0, [pc, #260]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    95c6:	4b4e      	ldr	r3, [pc, #312]	; (9700 <_oscctrl_init_referenced_generators+0x1ec>)
    95c8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    95ca:	223b      	movs	r2, #59	; 0x3b
    95cc:	2100      	movs	r1, #0
    95ce:	68f8      	ldr	r0, [r7, #12]
    95d0:	4b4c      	ldr	r3, [pc, #304]	; (9704 <_oscctrl_init_referenced_generators+0x1f0>)
    95d2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    95d4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    95d8:	2100      	movs	r1, #0
    95da:	68f8      	ldr	r0, [r7, #12]
    95dc:	4b4a      	ldr	r3, [pc, #296]	; (9708 <_oscctrl_init_referenced_generators+0x1f4>)
    95de:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    95e0:	2242      	movs	r2, #66	; 0x42
    95e2:	2100      	movs	r1, #0
    95e4:	68f8      	ldr	r0, [r7, #12]
    95e6:	4b49      	ldr	r3, [pc, #292]	; (970c <_oscctrl_init_referenced_generators+0x1f8>)
    95e8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    95ea:	4a49      	ldr	r2, [pc, #292]	; (9710 <_oscctrl_init_referenced_generators+0x1fc>)
    95ec:	2101      	movs	r1, #1
    95ee:	68f8      	ldr	r0, [r7, #12]
    95f0:	4b44      	ldr	r3, [pc, #272]	; (9704 <_oscctrl_init_referenced_generators+0x1f0>)
    95f2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    95f4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    95f8:	2101      	movs	r1, #1
    95fa:	68f8      	ldr	r0, [r7, #12]
    95fc:	4b42      	ldr	r3, [pc, #264]	; (9708 <_oscctrl_init_referenced_generators+0x1f4>)
    95fe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    9600:	2202      	movs	r2, #2
    9602:	2101      	movs	r1, #1
    9604:	68f8      	ldr	r0, [r7, #12]
    9606:	4b41      	ldr	r3, [pc, #260]	; (970c <_oscctrl_init_referenced_generators+0x1f8>)
    9608:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    960a:	68f8      	ldr	r0, [r7, #12]
    960c:	4b41      	ldr	r3, [pc, #260]	; (9714 <_oscctrl_init_referenced_generators+0x200>)
    960e:	4798      	blx	r3
    9610:	4603      	mov	r3, r0
    9612:	2b00      	cmp	r3, #0
    9614:	d00c      	beq.n	9630 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    9616:	f44f 6310 	mov.w	r3, #2304	; 0x900
    961a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    961c:	bf00      	nop
    961e:	6879      	ldr	r1, [r7, #4]
    9620:	68f8      	ldr	r0, [r7, #12]
    9622:	4b3d      	ldr	r3, [pc, #244]	; (9718 <_oscctrl_init_referenced_generators+0x204>)
    9624:	4798      	blx	r3
    9626:	4602      	mov	r2, r0
    9628:	687b      	ldr	r3, [r7, #4]
    962a:	429a      	cmp	r2, r3
    962c:	d1f7      	bne.n	961e <_oscctrl_init_referenced_generators+0x10a>
    962e:	e009      	b.n	9644 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9630:	bf00      	nop
    9632:	68f8      	ldr	r0, [r7, #12]
    9634:	4b39      	ldr	r3, [pc, #228]	; (971c <_oscctrl_init_referenced_generators+0x208>)
    9636:	4798      	blx	r3
    9638:	4603      	mov	r3, r0
    963a:	f083 0301 	eor.w	r3, r3, #1
    963e:	b2db      	uxtb	r3, r3
    9640:	2b00      	cmp	r3, #0
    9642:	d1f6      	bne.n	9632 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9644:	bf00      	nop
    9646:	2100      	movs	r1, #0
    9648:	68f8      	ldr	r0, [r7, #12]
    964a:	4b35      	ldr	r3, [pc, #212]	; (9720 <_oscctrl_init_referenced_generators+0x20c>)
    964c:	4798      	blx	r3
    964e:	4603      	mov	r3, r0
    9650:	f083 0301 	eor.w	r3, r3, #1
    9654:	b2db      	uxtb	r3, r3
    9656:	2b00      	cmp	r3, #0
    9658:	d009      	beq.n	966e <_oscctrl_init_referenced_generators+0x15a>
    965a:	2100      	movs	r1, #0
    965c:	68f8      	ldr	r0, [r7, #12]
    965e:	4b31      	ldr	r3, [pc, #196]	; (9724 <_oscctrl_init_referenced_generators+0x210>)
    9660:	4798      	blx	r3
    9662:	4603      	mov	r3, r0
    9664:	f083 0301 	eor.w	r3, r3, #1
    9668:	b2db      	uxtb	r3, r3
    966a:	2b00      	cmp	r3, #0
    966c:	d1eb      	bne.n	9646 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    966e:	bf00      	nop
    9670:	2101      	movs	r1, #1
    9672:	68f8      	ldr	r0, [r7, #12]
    9674:	4b2a      	ldr	r3, [pc, #168]	; (9720 <_oscctrl_init_referenced_generators+0x20c>)
    9676:	4798      	blx	r3
    9678:	4603      	mov	r3, r0
    967a:	f083 0301 	eor.w	r3, r3, #1
    967e:	b2db      	uxtb	r3, r3
    9680:	2b00      	cmp	r3, #0
    9682:	d009      	beq.n	9698 <_oscctrl_init_referenced_generators+0x184>
    9684:	2101      	movs	r1, #1
    9686:	68f8      	ldr	r0, [r7, #12]
    9688:	4b26      	ldr	r3, [pc, #152]	; (9724 <_oscctrl_init_referenced_generators+0x210>)
    968a:	4798      	blx	r3
    968c:	4603      	mov	r3, r0
    968e:	f083 0301 	eor.w	r3, r3, #1
    9692:	b2db      	uxtb	r3, r3
    9694:	2b00      	cmp	r3, #0
    9696:	d1eb      	bne.n	9670 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9698:	bf00      	nop
    969a:	480c      	ldr	r0, [pc, #48]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    969c:	4b22      	ldr	r3, [pc, #136]	; (9728 <_oscctrl_init_referenced_generators+0x214>)
    969e:	4798      	blx	r3
    96a0:	4603      	mov	r3, r0
    96a2:	2b00      	cmp	r3, #0
    96a4:	d1f9      	bne.n	969a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    96a6:	2207      	movs	r2, #7
    96a8:	2100      	movs	r1, #0
    96aa:	4808      	ldr	r0, [pc, #32]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    96ac:	4b08      	ldr	r3, [pc, #32]	; (96d0 <_oscctrl_init_referenced_generators+0x1bc>)
    96ae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    96b0:	bf00      	nop
    96b2:	4806      	ldr	r0, [pc, #24]	; (96cc <_oscctrl_init_referenced_generators+0x1b8>)
    96b4:	4b07      	ldr	r3, [pc, #28]	; (96d4 <_oscctrl_init_referenced_generators+0x1c0>)
    96b6:	4798      	blx	r3
    96b8:	4603      	mov	r3, r0
    96ba:	2b00      	cmp	r3, #0
    96bc:	d1f9      	bne.n	96b2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    96be:	bf00      	nop
    96c0:	3710      	adds	r7, #16
    96c2:	46bd      	mov	sp, r7
    96c4:	bd80      	pop	{r7, pc}
    96c6:	bf00      	nop
    96c8:	40001000 	.word	0x40001000
    96cc:	40001c00 	.word	0x40001c00
    96d0:	000090e1 	.word	0x000090e1
    96d4:	000090a1 	.word	0x000090a1
    96d8:	00009345 	.word	0x00009345
    96dc:	0401bb80 	.word	0x0401bb80
    96e0:	000093e7 	.word	0x000093e7
    96e4:	0000949f 	.word	0x0000949f
    96e8:	00009393 	.word	0x00009393
    96ec:	00009437 	.word	0x00009437
    96f0:	00009403 	.word	0x00009403
    96f4:	000093cf 	.word	0x000093cf
    96f8:	000093b3 	.word	0x000093b3
    96fc:	0000946b 	.word	0x0000946b
    9700:	00009131 	.word	0x00009131
    9704:	0000923d 	.word	0x0000923d
    9708:	00009279 	.word	0x00009279
    970c:	00009201 	.word	0x00009201
    9710:	000407a0 	.word	0x000407a0
    9714:	00009363 	.word	0x00009363
    9718:	000092f7 	.word	0x000092f7
    971c:	000092cf 	.word	0x000092cf
    9720:	0000918d 	.word	0x0000918d
    9724:	000091c5 	.word	0x000091c5
    9728:	000090c9 	.word	0x000090c9

0000972c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    972c:	b480      	push	{r7}
    972e:	b083      	sub	sp, #12
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	69db      	ldr	r3, [r3, #28]
    9738:	0a9b      	lsrs	r3, r3, #10
    973a:	f003 0301 	and.w	r3, r3, #1
    973e:	2b00      	cmp	r3, #0
    9740:	bf14      	ite	ne
    9742:	2301      	movne	r3, #1
    9744:	2300      	moveq	r3, #0
    9746:	b2db      	uxtb	r3, r3
}
    9748:	4618      	mov	r0, r3
    974a:	370c      	adds	r7, #12
    974c:	46bd      	mov	sp, r7
    974e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9752:	4770      	bx	lr

00009754 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    9754:	b480      	push	{r7}
    9756:	b083      	sub	sp, #12
    9758:	af00      	add	r7, sp, #0
    975a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9762:	61da      	str	r2, [r3, #28]
}
    9764:	bf00      	nop
    9766:	370c      	adds	r7, #12
    9768:	46bd      	mov	sp, r7
    976a:	f85d 7b04 	ldr.w	r7, [sp], #4
    976e:	4770      	bx	lr

00009770 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    9770:	b480      	push	{r7}
    9772:	b083      	sub	sp, #12
    9774:	af00      	add	r7, sp, #0
    9776:	6078      	str	r0, [r7, #4]
    9778:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	683a      	ldr	r2, [r7, #0]
    977e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9780:	bf00      	nop
    9782:	370c      	adds	r7, #12
    9784:	46bd      	mov	sp, r7
    9786:	f85d 7b04 	ldr.w	r7, [sp], #4
    978a:	4770      	bx	lr

0000978c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    978c:	b480      	push	{r7}
    978e:	b083      	sub	sp, #12
    9790:	af00      	add	r7, sp, #0
    9792:	6078      	str	r0, [r7, #4]
    9794:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    9796:	687b      	ldr	r3, [r7, #4]
    9798:	683a      	ldr	r2, [r7, #0]
    979a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    979c:	bf00      	nop
    979e:	370c      	adds	r7, #12
    97a0:	46bd      	mov	sp, r7
    97a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    97a6:	4770      	bx	lr

000097a8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    97a8:	b480      	push	{r7}
    97aa:	b083      	sub	sp, #12
    97ac:	af00      	add	r7, sp, #0
    97ae:	6078      	str	r0, [r7, #4]
    97b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	683a      	ldr	r2, [r7, #0]
    97b6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    97b8:	bf00      	nop
    97ba:	370c      	adds	r7, #12
    97bc:	46bd      	mov	sp, r7
    97be:	f85d 7b04 	ldr.w	r7, [sp], #4
    97c2:	4770      	bx	lr

000097c4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    97c4:	b480      	push	{r7}
    97c6:	b083      	sub	sp, #12
    97c8:	af00      	add	r7, sp, #0
    97ca:	6078      	str	r0, [r7, #4]
    97cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    97ce:	687b      	ldr	r3, [r7, #4]
    97d0:	683a      	ldr	r2, [r7, #0]
    97d2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    97d4:	bf00      	nop
    97d6:	370c      	adds	r7, #12
    97d8:	46bd      	mov	sp, r7
    97da:	f85d 7b04 	ldr.w	r7, [sp], #4
    97de:	4770      	bx	lr

000097e0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    97e0:	b480      	push	{r7}
    97e2:	b085      	sub	sp, #20
    97e4:	af00      	add	r7, sp, #0
    97e6:	6078      	str	r0, [r7, #4]
    97e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    97ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    97f0:	68fb      	ldr	r3, [r7, #12]
    97f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    97f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    97f8:	683b      	ldr	r3, [r7, #0]
    97fa:	b2db      	uxtb	r3, r3
    97fc:	68fa      	ldr	r2, [r7, #12]
    97fe:	4313      	orrs	r3, r2
    9800:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9802:	687b      	ldr	r3, [r7, #4]
    9804:	68fa      	ldr	r2, [r7, #12]
    9806:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9808:	bf00      	nop
    980a:	3714      	adds	r7, #20
    980c:	46bd      	mov	sp, r7
    980e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9812:	4770      	bx	lr

00009814 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9814:	b480      	push	{r7}
    9816:	b085      	sub	sp, #20
    9818:	af00      	add	r7, sp, #0
    981a:	6078      	str	r0, [r7, #4]
    981c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9822:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    982a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    982c:	683b      	ldr	r3, [r7, #0]
    982e:	041b      	lsls	r3, r3, #16
    9830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    9834:	68fa      	ldr	r2, [r7, #12]
    9836:	4313      	orrs	r3, r2
    9838:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    983a:	687b      	ldr	r3, [r7, #4]
    983c:	68fa      	ldr	r2, [r7, #12]
    983e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9840:	bf00      	nop
    9842:	3714      	adds	r7, #20
    9844:	46bd      	mov	sp, r7
    9846:	f85d 7b04 	ldr.w	r7, [sp], #4
    984a:	4770      	bx	lr

0000984c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    984c:	b480      	push	{r7}
    984e:	b083      	sub	sp, #12
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
    9854:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    9856:	687b      	ldr	r3, [r7, #4]
    9858:	683a      	ldr	r2, [r7, #0]
    985a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    985c:	bf00      	nop
    985e:	370c      	adds	r7, #12
    9860:	46bd      	mov	sp, r7
    9862:	f85d 7b04 	ldr.w	r7, [sp], #4
    9866:	4770      	bx	lr

00009868 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    9868:	b480      	push	{r7}
    986a:	b083      	sub	sp, #12
    986c:	af00      	add	r7, sp, #0
    986e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    9870:	687b      	ldr	r3, [r7, #4]
    9872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    9874:	4618      	mov	r0, r3
    9876:	370c      	adds	r7, #12
    9878:	46bd      	mov	sp, r7
    987a:	f85d 7b04 	ldr.w	r7, [sp], #4
    987e:	4770      	bx	lr

00009880 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    9880:	b480      	push	{r7}
    9882:	b085      	sub	sp, #20
    9884:	af00      	add	r7, sp, #0
    9886:	60f8      	str	r0, [r7, #12]
    9888:	60b9      	str	r1, [r7, #8]
    988a:	607a      	str	r2, [r7, #4]
	while (count--) {
    988c:	e007      	b.n	989e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    988e:	68fb      	ldr	r3, [r7, #12]
    9890:	1c5a      	adds	r2, r3, #1
    9892:	60fa      	str	r2, [r7, #12]
    9894:	68ba      	ldr	r2, [r7, #8]
    9896:	1c51      	adds	r1, r2, #1
    9898:	60b9      	str	r1, [r7, #8]
    989a:	7812      	ldrb	r2, [r2, #0]
    989c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    989e:	687b      	ldr	r3, [r7, #4]
    98a0:	1e5a      	subs	r2, r3, #1
    98a2:	607a      	str	r2, [r7, #4]
    98a4:	2b00      	cmp	r3, #0
    98a6:	d1f2      	bne.n	988e <_qspi_memcpy+0xe>
	}
}
    98a8:	bf00      	nop
    98aa:	3714      	adds	r7, #20
    98ac:	46bd      	mov	sp, r7
    98ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    98b2:	4770      	bx	lr

000098b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    98b4:	b580      	push	{r7, lr}
    98b6:	b082      	sub	sp, #8
    98b8:	af00      	add	r7, sp, #0
    98ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    98bc:	4903      	ldr	r1, [pc, #12]	; (98cc <_qspi_end_transfer+0x18>)
    98be:	6878      	ldr	r0, [r7, #4]
    98c0:	4b03      	ldr	r3, [pc, #12]	; (98d0 <_qspi_end_transfer+0x1c>)
    98c2:	4798      	blx	r3
}
    98c4:	bf00      	nop
    98c6:	3708      	adds	r7, #8
    98c8:	46bd      	mov	sp, r7
    98ca:	bd80      	pop	{r7, pc}
    98cc:	01000002 	.word	0x01000002
    98d0:	00009771 	.word	0x00009771

000098d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    98d4:	b580      	push	{r7, lr}
    98d6:	b082      	sub	sp, #8
    98d8:	af00      	add	r7, sp, #0
    98da:	6078      	str	r0, [r7, #4]
    98dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d004      	beq.n	98ee <_qspi_sync_init+0x1a>
    98e4:	683b      	ldr	r3, [r7, #0]
    98e6:	2b00      	cmp	r3, #0
    98e8:	d001      	beq.n	98ee <_qspi_sync_init+0x1a>
    98ea:	2301      	movs	r3, #1
    98ec:	e000      	b.n	98f0 <_qspi_sync_init+0x1c>
    98ee:	2300      	movs	r3, #0
    98f0:	f003 0301 	and.w	r3, r3, #1
    98f4:	b2db      	uxtb	r3, r3
    98f6:	2240      	movs	r2, #64	; 0x40
    98f8:	490c      	ldr	r1, [pc, #48]	; (992c <_qspi_sync_init+0x58>)
    98fa:	4618      	mov	r0, r3
    98fc:	4b0c      	ldr	r3, [pc, #48]	; (9930 <_qspi_sync_init+0x5c>)
    98fe:	4798      	blx	r3
	dev->prvt = hw;
    9900:	687b      	ldr	r3, [r7, #4]
    9902:	683a      	ldr	r2, [r7, #0]
    9904:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    9906:	687b      	ldr	r3, [r7, #4]
    9908:	681b      	ldr	r3, [r3, #0]
    990a:	2101      	movs	r1, #1
    990c:	4618      	mov	r0, r3
    990e:	4b09      	ldr	r3, [pc, #36]	; (9934 <_qspi_sync_init+0x60>)
    9910:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    9912:	4909      	ldr	r1, [pc, #36]	; (9938 <_qspi_sync_init+0x64>)
    9914:	6838      	ldr	r0, [r7, #0]
    9916:	4b09      	ldr	r3, [pc, #36]	; (993c <_qspi_sync_init+0x68>)
    9918:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    991a:	4909      	ldr	r1, [pc, #36]	; (9940 <_qspi_sync_init+0x6c>)
    991c:	6838      	ldr	r0, [r7, #0]
    991e:	4b09      	ldr	r3, [pc, #36]	; (9944 <_qspi_sync_init+0x70>)
    9920:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    9922:	2300      	movs	r3, #0
}
    9924:	4618      	mov	r0, r3
    9926:	3708      	adds	r7, #8
    9928:	46bd      	mov	sp, r7
    992a:	bd80      	pop	{r7, pc}
    992c:	00012c4c 	.word	0x00012c4c
    9930:	00007361 	.word	0x00007361
    9934:	00009771 	.word	0x00009771
    9938:	06000011 	.word	0x06000011
    993c:	0000978d 	.word	0x0000978d
    9940:	00241300 	.word	0x00241300
    9944:	000097a9 	.word	0x000097a9

00009948 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    9948:	b580      	push	{r7, lr}
    994a:	b082      	sub	sp, #8
    994c:	af00      	add	r7, sp, #0
    994e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	681b      	ldr	r3, [r3, #0]
    9954:	2102      	movs	r1, #2
    9956:	4618      	mov	r0, r3
    9958:	4b03      	ldr	r3, [pc, #12]	; (9968 <_qspi_sync_enable+0x20>)
    995a:	4798      	blx	r3
	return ERR_NONE;
    995c:	2300      	movs	r3, #0
}
    995e:	4618      	mov	r0, r3
    9960:	3708      	adds	r7, #8
    9962:	46bd      	mov	sp, r7
    9964:	bd80      	pop	{r7, pc}
    9966:	bf00      	nop
    9968:	00009771 	.word	0x00009771

0000996c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    996c:	b580      	push	{r7, lr}
    996e:	b082      	sub	sp, #8
    9970:	af00      	add	r7, sp, #0
    9972:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	681b      	ldr	r3, [r3, #0]
    9978:	2100      	movs	r1, #0
    997a:	4618      	mov	r0, r3
    997c:	4b03      	ldr	r3, [pc, #12]	; (998c <_qspi_sync_disable+0x20>)
    997e:	4798      	blx	r3
	return ERR_NONE;
    9980:	2300      	movs	r3, #0
}
    9982:	4618      	mov	r0, r3
    9984:	3708      	adds	r7, #8
    9986:	46bd      	mov	sp, r7
    9988:	bd80      	pop	{r7, pc}
    998a:	bf00      	nop
    998c:	00009771 	.word	0x00009771

00009990 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9990:	b580      	push	{r7, lr}
    9992:	b084      	sub	sp, #16
    9994:	af00      	add	r7, sp, #0
    9996:	6078      	str	r0, [r7, #4]
    9998:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    999a:	687b      	ldr	r3, [r7, #4]
    999c:	681b      	ldr	r3, [r3, #0]
    999e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    99a0:	683b      	ldr	r3, [r7, #0]
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	f003 0320 	and.w	r3, r3, #32
    99a8:	b2db      	uxtb	r3, r3
    99aa:	2b00      	cmp	r3, #0
    99ac:	d005      	beq.n	99ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    99ae:	683b      	ldr	r3, [r7, #0]
    99b0:	689b      	ldr	r3, [r3, #8]
    99b2:	4619      	mov	r1, r3
    99b4:	68f8      	ldr	r0, [r7, #12]
    99b6:	4b13      	ldr	r3, [pc, #76]	; (9a04 <_qspi_sync_command_set_ifr+0x74>)
    99b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    99ba:	683b      	ldr	r3, [r7, #0]
    99bc:	781b      	ldrb	r3, [r3, #0]
    99be:	f003 0310 	and.w	r3, r3, #16
    99c2:	b2db      	uxtb	r3, r3
    99c4:	2b00      	cmp	r3, #0
    99c6:	d005      	beq.n	99d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    99c8:	683b      	ldr	r3, [r7, #0]
    99ca:	791b      	ldrb	r3, [r3, #4]
    99cc:	4619      	mov	r1, r3
    99ce:	68f8      	ldr	r0, [r7, #12]
    99d0:	4b0d      	ldr	r3, [pc, #52]	; (9a08 <_qspi_sync_command_set_ifr+0x78>)
    99d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    99d4:	683b      	ldr	r3, [r7, #0]
    99d6:	781b      	ldrb	r3, [r3, #0]
    99d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    99dc:	b2db      	uxtb	r3, r3
    99de:	2b00      	cmp	r3, #0
    99e0:	d005      	beq.n	99ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    99e2:	683b      	ldr	r3, [r7, #0]
    99e4:	795b      	ldrb	r3, [r3, #5]
    99e6:	4619      	mov	r1, r3
    99e8:	68f8      	ldr	r0, [r7, #12]
    99ea:	4b08      	ldr	r3, [pc, #32]	; (9a0c <_qspi_sync_command_set_ifr+0x7c>)
    99ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    99ee:	683b      	ldr	r3, [r7, #0]
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	4619      	mov	r1, r3
    99f4:	68f8      	ldr	r0, [r7, #12]
    99f6:	4b06      	ldr	r3, [pc, #24]	; (9a10 <_qspi_sync_command_set_ifr+0x80>)
    99f8:	4798      	blx	r3
}
    99fa:	bf00      	nop
    99fc:	3710      	adds	r7, #16
    99fe:	46bd      	mov	sp, r7
    9a00:	bd80      	pop	{r7, pc}
    9a02:	bf00      	nop
    9a04:	000097c5 	.word	0x000097c5
    9a08:	000097e1 	.word	0x000097e1
    9a0c:	00009815 	.word	0x00009815
    9a10:	0000984d 	.word	0x0000984d

00009a14 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b084      	sub	sp, #16
    9a18:	af00      	add	r7, sp, #0
    9a1a:	6078      	str	r0, [r7, #4]
    9a1c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	681b      	ldr	r3, [r3, #0]
    9a22:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    9a24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9a28:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    9a2a:	683b      	ldr	r3, [r7, #0]
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	f003 0320 	and.w	r3, r3, #32
    9a32:	b2db      	uxtb	r3, r3
    9a34:	2b00      	cmp	r3, #0
    9a36:	d004      	beq.n	9a42 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    9a38:	683b      	ldr	r3, [r7, #0]
    9a3a:	689b      	ldr	r3, [r3, #8]
    9a3c:	68fa      	ldr	r2, [r7, #12]
    9a3e:	4413      	add	r3, r2
    9a40:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    9a42:	68b8      	ldr	r0, [r7, #8]
    9a44:	4b18      	ldr	r3, [pc, #96]	; (9aa8 <_qspi_sync_run_transfer+0x94>)
    9a46:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    9a48:	683b      	ldr	r3, [r7, #0]
    9a4a:	691b      	ldr	r3, [r3, #16]
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d103      	bne.n	9a58 <_qspi_sync_run_transfer+0x44>
    9a50:	683b      	ldr	r3, [r7, #0]
    9a52:	695b      	ldr	r3, [r3, #20]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d001      	beq.n	9a5c <_qspi_sync_run_transfer+0x48>
    9a58:	2301      	movs	r3, #1
    9a5a:	e000      	b.n	9a5e <_qspi_sync_run_transfer+0x4a>
    9a5c:	2300      	movs	r3, #0
    9a5e:	f003 0301 	and.w	r3, r3, #1
    9a62:	b2db      	uxtb	r3, r3
    9a64:	2282      	movs	r2, #130	; 0x82
    9a66:	4911      	ldr	r1, [pc, #68]	; (9aac <_qspi_sync_run_transfer+0x98>)
    9a68:	4618      	mov	r0, r3
    9a6a:	4b11      	ldr	r3, [pc, #68]	; (9ab0 <_qspi_sync_run_transfer+0x9c>)
    9a6c:	4798      	blx	r3

	if (cmd->tx_buf) {
    9a6e:	683b      	ldr	r3, [r7, #0]
    9a70:	691b      	ldr	r3, [r3, #16]
    9a72:	2b00      	cmp	r3, #0
    9a74:	d008      	beq.n	9a88 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    9a76:	683b      	ldr	r3, [r7, #0]
    9a78:	6919      	ldr	r1, [r3, #16]
    9a7a:	683b      	ldr	r3, [r7, #0]
    9a7c:	68db      	ldr	r3, [r3, #12]
    9a7e:	461a      	mov	r2, r3
    9a80:	68f8      	ldr	r0, [r7, #12]
    9a82:	4b0c      	ldr	r3, [pc, #48]	; (9ab4 <_qspi_sync_run_transfer+0xa0>)
    9a84:	4798      	blx	r3
    9a86:	e007      	b.n	9a98 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    9a88:	683b      	ldr	r3, [r7, #0]
    9a8a:	6958      	ldr	r0, [r3, #20]
    9a8c:	683b      	ldr	r3, [r7, #0]
    9a8e:	68db      	ldr	r3, [r3, #12]
    9a90:	461a      	mov	r2, r3
    9a92:	68f9      	ldr	r1, [r7, #12]
    9a94:	4b07      	ldr	r3, [pc, #28]	; (9ab4 <_qspi_sync_run_transfer+0xa0>)
    9a96:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    9a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a9c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    9aa0:	bf00      	nop
    9aa2:	3710      	adds	r7, #16
    9aa4:	46bd      	mov	sp, r7
    9aa6:	bd80      	pop	{r7, pc}
    9aa8:	00009869 	.word	0x00009869
    9aac:	00012c4c 	.word	0x00012c4c
    9ab0:	00007361 	.word	0x00007361
    9ab4:	00009881 	.word	0x00009881

00009ab8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9ab8:	b580      	push	{r7, lr}
    9aba:	b082      	sub	sp, #8
    9abc:	af00      	add	r7, sp, #0
    9abe:	6078      	str	r0, [r7, #4]
    9ac0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    9ac2:	6839      	ldr	r1, [r7, #0]
    9ac4:	6878      	ldr	r0, [r7, #4]
    9ac6:	4b14      	ldr	r3, [pc, #80]	; (9b18 <_qspi_sync_serial_run_command+0x60>)
    9ac8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    9aca:	683b      	ldr	r3, [r7, #0]
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9ad2:	b2db      	uxtb	r3, r3
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d003      	beq.n	9ae0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    9ad8:	6839      	ldr	r1, [r7, #0]
    9ada:	6878      	ldr	r0, [r7, #4]
    9adc:	4b0f      	ldr	r3, [pc, #60]	; (9b1c <_qspi_sync_serial_run_command+0x64>)
    9ade:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	681b      	ldr	r3, [r3, #0]
    9ae4:	4618      	mov	r0, r3
    9ae6:	4b0e      	ldr	r3, [pc, #56]	; (9b20 <_qspi_sync_serial_run_command+0x68>)
    9ae8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    9aea:	bf00      	nop
    9aec:	687b      	ldr	r3, [r7, #4]
    9aee:	681b      	ldr	r3, [r3, #0]
    9af0:	4618      	mov	r0, r3
    9af2:	4b0c      	ldr	r3, [pc, #48]	; (9b24 <_qspi_sync_serial_run_command+0x6c>)
    9af4:	4798      	blx	r3
    9af6:	4603      	mov	r3, r0
    9af8:	f083 0301 	eor.w	r3, r3, #1
    9afc:	b2db      	uxtb	r3, r3
    9afe:	2b00      	cmp	r3, #0
    9b00:	d1f4      	bne.n	9aec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	681b      	ldr	r3, [r3, #0]
    9b06:	4618      	mov	r0, r3
    9b08:	4b07      	ldr	r3, [pc, #28]	; (9b28 <_qspi_sync_serial_run_command+0x70>)
    9b0a:	4798      	blx	r3
	return ERR_NONE;
    9b0c:	2300      	movs	r3, #0
}
    9b0e:	4618      	mov	r0, r3
    9b10:	3708      	adds	r7, #8
    9b12:	46bd      	mov	sp, r7
    9b14:	bd80      	pop	{r7, pc}
    9b16:	bf00      	nop
    9b18:	00009991 	.word	0x00009991
    9b1c:	00009a15 	.word	0x00009a15
    9b20:	000098b5 	.word	0x000098b5
    9b24:	0000972d 	.word	0x0000972d
    9b28:	00009755 	.word	0x00009755

00009b2c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    9b2c:	b480      	push	{r7}
    9b2e:	b083      	sub	sp, #12
    9b30:	af00      	add	r7, sp, #0
    9b32:	6078      	str	r0, [r7, #4]
    9b34:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9b36:	bf00      	nop
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	691a      	ldr	r2, [r3, #16]
    9b3c:	683b      	ldr	r3, [r7, #0]
    9b3e:	4013      	ands	r3, r2
    9b40:	2b00      	cmp	r3, #0
    9b42:	d1f9      	bne.n	9b38 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    9b44:	bf00      	nop
    9b46:	370c      	adds	r7, #12
    9b48:	46bd      	mov	sp, r7
    9b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b4e:	4770      	bx	lr

00009b50 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    9b50:	b480      	push	{r7}
    9b52:	b083      	sub	sp, #12
    9b54:	af00      	add	r7, sp, #0
    9b56:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    9b5e:	819a      	strh	r2, [r3, #12]
}
    9b60:	bf00      	nop
    9b62:	370c      	adds	r7, #12
    9b64:	46bd      	mov	sp, r7
    9b66:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b6a:	4770      	bx	lr

00009b6c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    9b6c:	b480      	push	{r7}
    9b6e:	b083      	sub	sp, #12
    9b70:	af00      	add	r7, sp, #0
    9b72:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    9b74:	687b      	ldr	r3, [r7, #4]
    9b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9b7a:	819a      	strh	r2, [r3, #12]
}
    9b7c:	bf00      	nop
    9b7e:	370c      	adds	r7, #12
    9b80:	46bd      	mov	sp, r7
    9b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b86:	4770      	bx	lr

00009b88 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    9b88:	b480      	push	{r7}
    9b8a:	b083      	sub	sp, #12
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	899b      	ldrh	r3, [r3, #12]
    9b94:	b29b      	uxth	r3, r3
}
    9b96:	4618      	mov	r0, r3
    9b98:	370c      	adds	r7, #12
    9b9a:	46bd      	mov	sp, r7
    9b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ba0:	4770      	bx	lr

00009ba2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    9ba2:	b480      	push	{r7}
    9ba4:	b083      	sub	sp, #12
    9ba6:	af00      	add	r7, sp, #0
    9ba8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	895b      	ldrh	r3, [r3, #10]
    9bae:	b29b      	uxth	r3, r3
}
    9bb0:	4618      	mov	r0, r3
    9bb2:	370c      	adds	r7, #12
    9bb4:	46bd      	mov	sp, r7
    9bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bba:	4770      	bx	lr

00009bbc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    9bbc:	b580      	push	{r7, lr}
    9bbe:	b082      	sub	sp, #8
    9bc0:	af00      	add	r7, sp, #0
    9bc2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	881b      	ldrh	r3, [r3, #0]
    9bc8:	b29b      	uxth	r3, r3
    9bca:	f043 0301 	orr.w	r3, r3, #1
    9bce:	b29a      	uxth	r2, r3
    9bd0:	687b      	ldr	r3, [r7, #4]
    9bd2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    9bd4:	2101      	movs	r1, #1
    9bd6:	6878      	ldr	r0, [r7, #4]
    9bd8:	4b02      	ldr	r3, [pc, #8]	; (9be4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    9bda:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9bdc:	bf00      	nop
    9bde:	3708      	adds	r7, #8
    9be0:	46bd      	mov	sp, r7
    9be2:	bd80      	pop	{r7, pc}
    9be4:	00009b2d 	.word	0x00009b2d

00009be8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9be8:	b580      	push	{r7, lr}
    9bea:	b084      	sub	sp, #16
    9bec:	af00      	add	r7, sp, #0
    9bee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9bf0:	f248 0103 	movw	r1, #32771	; 0x8003
    9bf4:	6878      	ldr	r0, [r7, #4]
    9bf6:	4b0a      	ldr	r3, [pc, #40]	; (9c20 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    9bf8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    9bfa:	687b      	ldr	r3, [r7, #4]
    9bfc:	881b      	ldrh	r3, [r3, #0]
    9bfe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    9c00:	89fb      	ldrh	r3, [r7, #14]
    9c02:	085b      	lsrs	r3, r3, #1
    9c04:	b29b      	uxth	r3, r3
    9c06:	f003 0301 	and.w	r3, r3, #1
    9c0a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    9c0c:	89fb      	ldrh	r3, [r7, #14]
    9c0e:	2b00      	cmp	r3, #0
    9c10:	bf14      	ite	ne
    9c12:	2301      	movne	r3, #1
    9c14:	2300      	moveq	r3, #0
    9c16:	b2db      	uxtb	r3, r3
}
    9c18:	4618      	mov	r0, r3
    9c1a:	3710      	adds	r7, #16
    9c1c:	46bd      	mov	sp, r7
    9c1e:	bd80      	pop	{r7, pc}
    9c20:	00009b2d 	.word	0x00009b2d

00009c24 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b082      	sub	sp, #8
    9c28:	af00      	add	r7, sp, #0
    9c2a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	881b      	ldrh	r3, [r3, #0]
    9c30:	b29b      	uxth	r3, r3
    9c32:	f023 0302 	bic.w	r3, r3, #2
    9c36:	b29a      	uxth	r2, r3
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9c3c:	f248 0103 	movw	r1, #32771	; 0x8003
    9c40:	6878      	ldr	r0, [r7, #4]
    9c42:	4b03      	ldr	r3, [pc, #12]	; (9c50 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    9c44:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9c46:	bf00      	nop
    9c48:	3708      	adds	r7, #8
    9c4a:	46bd      	mov	sp, r7
    9c4c:	bd80      	pop	{r7, pc}
    9c4e:	bf00      	nop
    9c50:	00009b2d 	.word	0x00009b2d

00009c54 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    9c54:	b580      	push	{r7, lr}
    9c56:	b082      	sub	sp, #8
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
    9c5c:	460b      	mov	r3, r1
    9c5e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	887a      	ldrh	r2, [r7, #2]
    9c64:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    9c66:	f248 0103 	movw	r1, #32771	; 0x8003
    9c6a:	6878      	ldr	r0, [r7, #4]
    9c6c:	4b02      	ldr	r3, [pc, #8]	; (9c78 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    9c6e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    9c70:	bf00      	nop
    9c72:	3708      	adds	r7, #8
    9c74:	46bd      	mov	sp, r7
    9c76:	bd80      	pop	{r7, pc}
    9c78:	00009b2d 	.word	0x00009b2d

00009c7c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    9c7c:	b480      	push	{r7}
    9c7e:	b083      	sub	sp, #12
    9c80:	af00      	add	r7, sp, #0
    9c82:	6078      	str	r0, [r7, #4]
    9c84:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	683a      	ldr	r2, [r7, #0]
    9c8a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    9c8c:	bf00      	nop
    9c8e:	370c      	adds	r7, #12
    9c90:	46bd      	mov	sp, r7
    9c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c96:	4770      	bx	lr

00009c98 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b082      	sub	sp, #8
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d005      	beq.n	9cb2 <_calendar_init+0x1a>
    9ca6:	687b      	ldr	r3, [r7, #4]
    9ca8:	681b      	ldr	r3, [r3, #0]
    9caa:	2b00      	cmp	r3, #0
    9cac:	d001      	beq.n	9cb2 <_calendar_init+0x1a>
    9cae:	2301      	movs	r3, #1
    9cb0:	e000      	b.n	9cb4 <_calendar_init+0x1c>
    9cb2:	2300      	movs	r3, #0
    9cb4:	f003 0301 	and.w	r3, r3, #1
    9cb8:	b2db      	uxtb	r3, r3
    9cba:	222f      	movs	r2, #47	; 0x2f
    9cbc:	491b      	ldr	r1, [pc, #108]	; (9d2c <_calendar_init+0x94>)
    9cbe:	4618      	mov	r0, r3
    9cc0:	4b1b      	ldr	r3, [pc, #108]	; (9d30 <_calendar_init+0x98>)
    9cc2:	4798      	blx	r3

	_rtc_dev = dev;
    9cc4:	4a1b      	ldr	r2, [pc, #108]	; (9d34 <_calendar_init+0x9c>)
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	681b      	ldr	r3, [r3, #0]
    9cce:	4618      	mov	r0, r3
    9cd0:	4b19      	ldr	r3, [pc, #100]	; (9d38 <_calendar_init+0xa0>)
    9cd2:	4798      	blx	r3
    9cd4:	4603      	mov	r3, r0
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d00a      	beq.n	9cf0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	681b      	ldr	r3, [r3, #0]
    9cde:	4618      	mov	r0, r3
    9ce0:	4b16      	ldr	r3, [pc, #88]	; (9d3c <_calendar_init+0xa4>)
    9ce2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	681b      	ldr	r3, [r3, #0]
    9ce8:	2102      	movs	r1, #2
    9cea:	4618      	mov	r0, r3
    9cec:	4b14      	ldr	r3, [pc, #80]	; (9d40 <_calendar_init+0xa8>)
    9cee:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	681b      	ldr	r3, [r3, #0]
    9cf4:	4618      	mov	r0, r3
    9cf6:	4b13      	ldr	r3, [pc, #76]	; (9d44 <_calendar_init+0xac>)
    9cf8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    9cfa:	687b      	ldr	r3, [r7, #4]
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	2101      	movs	r1, #1
    9d00:	4618      	mov	r0, r3
    9d02:	4b0f      	ldr	r3, [pc, #60]	; (9d40 <_calendar_init+0xa8>)
    9d04:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    9d0e:	4618      	mov	r0, r3
    9d10:	4b0d      	ldr	r3, [pc, #52]	; (9d48 <_calendar_init+0xb0>)
    9d12:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    9d18:	2100      	movs	r1, #0
    9d1a:	4618      	mov	r0, r3
    9d1c:	4b0b      	ldr	r3, [pc, #44]	; (9d4c <_calendar_init+0xb4>)
    9d1e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    9d20:	2300      	movs	r3, #0
}
    9d22:	4618      	mov	r0, r3
    9d24:	3708      	adds	r7, #8
    9d26:	46bd      	mov	sp, r7
    9d28:	bd80      	pop	{r7, pc}
    9d2a:	bf00      	nop
    9d2c:	00012c64 	.word	0x00012c64
    9d30:	00007361 	.word	0x00007361
    9d34:	20001bc8 	.word	0x20001bc8
    9d38:	00009be9 	.word	0x00009be9
    9d3c:	00009c25 	.word	0x00009c25
    9d40:	00009b2d 	.word	0x00009b2d
    9d44:	00009bbd 	.word	0x00009bbd
    9d48:	00009c55 	.word	0x00009c55
    9d4c:	00009c7d 	.word	0x00009c7d

00009d50 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    9d50:	b580      	push	{r7, lr}
    9d52:	b084      	sub	sp, #16
    9d54:	af00      	add	r7, sp, #0
    9d56:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    9d58:	687b      	ldr	r3, [r7, #4]
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	4618      	mov	r0, r3
    9d5e:	4b19      	ldr	r3, [pc, #100]	; (9dc4 <_rtc_interrupt_handler+0x74>)
    9d60:	4798      	blx	r3
    9d62:	4603      	mov	r3, r0
    9d64:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	681b      	ldr	r3, [r3, #0]
    9d6a:	4618      	mov	r0, r3
    9d6c:	4b16      	ldr	r3, [pc, #88]	; (9dc8 <_rtc_interrupt_handler+0x78>)
    9d6e:	4798      	blx	r3
    9d70:	4603      	mov	r3, r0
    9d72:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    9d74:	89fa      	ldrh	r2, [r7, #14]
    9d76:	89bb      	ldrh	r3, [r7, #12]
    9d78:	4013      	ands	r3, r2
    9d7a:	b29b      	uxth	r3, r3
    9d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9d80:	2b00      	cmp	r3, #0
    9d82:	d009      	beq.n	9d98 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    9d84:	687b      	ldr	r3, [r7, #4]
    9d86:	685b      	ldr	r3, [r3, #4]
    9d88:	6878      	ldr	r0, [r7, #4]
    9d8a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    9d8c:	687b      	ldr	r3, [r7, #4]
    9d8e:	681b      	ldr	r3, [r3, #0]
    9d90:	4618      	mov	r0, r3
    9d92:	4b0e      	ldr	r3, [pc, #56]	; (9dcc <_rtc_interrupt_handler+0x7c>)
    9d94:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    9d96:	e010      	b.n	9dba <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    9d98:	89fa      	ldrh	r2, [r7, #14]
    9d9a:	89bb      	ldrh	r3, [r7, #12]
    9d9c:	4013      	ands	r3, r2
    9d9e:	b29b      	uxth	r3, r3
    9da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9da4:	2b00      	cmp	r3, #0
    9da6:	d008      	beq.n	9dba <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    9da8:	687b      	ldr	r3, [r7, #4]
    9daa:	689b      	ldr	r3, [r3, #8]
    9dac:	6878      	ldr	r0, [r7, #4]
    9dae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	681b      	ldr	r3, [r3, #0]
    9db4:	4618      	mov	r0, r3
    9db6:	4b06      	ldr	r3, [pc, #24]	; (9dd0 <_rtc_interrupt_handler+0x80>)
    9db8:	4798      	blx	r3
}
    9dba:	bf00      	nop
    9dbc:	3710      	adds	r7, #16
    9dbe:	46bd      	mov	sp, r7
    9dc0:	bd80      	pop	{r7, pc}
    9dc2:	bf00      	nop
    9dc4:	00009b89 	.word	0x00009b89
    9dc8:	00009ba3 	.word	0x00009ba3
    9dcc:	00009b51 	.word	0x00009b51
    9dd0:	00009b6d 	.word	0x00009b6d

00009dd4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    9dd4:	b580      	push	{r7, lr}
    9dd6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    9dd8:	4b03      	ldr	r3, [pc, #12]	; (9de8 <RTC_Handler+0x14>)
    9dda:	681b      	ldr	r3, [r3, #0]
    9ddc:	4618      	mov	r0, r3
    9dde:	4b03      	ldr	r3, [pc, #12]	; (9dec <RTC_Handler+0x18>)
    9de0:	4798      	blx	r3
}
    9de2:	bf00      	nop
    9de4:	bd80      	pop	{r7, pc}
    9de6:	bf00      	nop
    9de8:	20001bc8 	.word	0x20001bc8
    9dec:	00009d51 	.word	0x00009d51

00009df0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9df0:	b480      	push	{r7}
    9df2:	b083      	sub	sp, #12
    9df4:	af00      	add	r7, sp, #0
    9df6:	6078      	str	r0, [r7, #4]
    9df8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9dfa:	bf00      	nop
    9dfc:	687b      	ldr	r3, [r7, #4]
    9dfe:	69da      	ldr	r2, [r3, #28]
    9e00:	683b      	ldr	r3, [r7, #0]
    9e02:	4013      	ands	r3, r2
    9e04:	2b00      	cmp	r3, #0
    9e06:	d1f9      	bne.n	9dfc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    9e08:	bf00      	nop
    9e0a:	370c      	adds	r7, #12
    9e0c:	46bd      	mov	sp, r7
    9e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e12:	4770      	bx	lr

00009e14 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    9e14:	b480      	push	{r7}
    9e16:	b083      	sub	sp, #12
    9e18:	af00      	add	r7, sp, #0
    9e1a:	6078      	str	r0, [r7, #4]
    9e1c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    9e1e:	687b      	ldr	r3, [r7, #4]
    9e20:	69da      	ldr	r2, [r3, #28]
    9e22:	683b      	ldr	r3, [r7, #0]
    9e24:	4013      	ands	r3, r2
    9e26:	2b00      	cmp	r3, #0
    9e28:	bf14      	ite	ne
    9e2a:	2301      	movne	r3, #1
    9e2c:	2300      	moveq	r3, #0
    9e2e:	b2db      	uxtb	r3, r3
}
    9e30:	4618      	mov	r0, r3
    9e32:	370c      	adds	r7, #12
    9e34:	46bd      	mov	sp, r7
    9e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e3a:	4770      	bx	lr

00009e3c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9e3c:	b480      	push	{r7}
    9e3e:	b083      	sub	sp, #12
    9e40:	af00      	add	r7, sp, #0
    9e42:	6078      	str	r0, [r7, #4]
    9e44:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    9e46:	bf00      	nop
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	69da      	ldr	r2, [r3, #28]
    9e4c:	683b      	ldr	r3, [r7, #0]
    9e4e:	4013      	ands	r3, r2
    9e50:	2b00      	cmp	r3, #0
    9e52:	d1f9      	bne.n	9e48 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    9e54:	bf00      	nop
    9e56:	370c      	adds	r7, #12
    9e58:	46bd      	mov	sp, r7
    9e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e5e:	4770      	bx	lr

00009e60 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    9e60:	b480      	push	{r7}
    9e62:	b083      	sub	sp, #12
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
    9e68:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    9e6a:	687b      	ldr	r3, [r7, #4]
    9e6c:	69da      	ldr	r2, [r3, #28]
    9e6e:	683b      	ldr	r3, [r7, #0]
    9e70:	4013      	ands	r3, r2
    9e72:	2b00      	cmp	r3, #0
    9e74:	bf14      	ite	ne
    9e76:	2301      	movne	r3, #1
    9e78:	2300      	moveq	r3, #0
    9e7a:	b2db      	uxtb	r3, r3
}
    9e7c:	4618      	mov	r0, r3
    9e7e:	370c      	adds	r7, #12
    9e80:	46bd      	mov	sp, r7
    9e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e86:	4770      	bx	lr

00009e88 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    9e88:	b480      	push	{r7}
    9e8a:	b083      	sub	sp, #12
    9e8c:	af00      	add	r7, sp, #0
    9e8e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	2201      	movs	r2, #1
    9e94:	761a      	strb	r2, [r3, #24]
}
    9e96:	bf00      	nop
    9e98:	370c      	adds	r7, #12
    9e9a:	46bd      	mov	sp, r7
    9e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ea0:	4770      	bx	lr

00009ea2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    9ea2:	b480      	push	{r7}
    9ea4:	b083      	sub	sp, #12
    9ea6:	af00      	add	r7, sp, #0
    9ea8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	2202      	movs	r2, #2
    9eae:	761a      	strb	r2, [r3, #24]
}
    9eb0:	bf00      	nop
    9eb2:	370c      	adds	r7, #12
    9eb4:	46bd      	mov	sp, r7
    9eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eba:	4770      	bx	lr

00009ebc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    9ebc:	b480      	push	{r7}
    9ebe:	b083      	sub	sp, #12
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	7e1b      	ldrb	r3, [r3, #24]
    9ec8:	b2db      	uxtb	r3, r3
}
    9eca:	4618      	mov	r0, r3
    9ecc:	370c      	adds	r7, #12
    9ece:	46bd      	mov	sp, r7
    9ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ed4:	4770      	bx	lr

00009ed6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    9ed6:	b480      	push	{r7}
    9ed8:	b085      	sub	sp, #20
    9eda:	af00      	add	r7, sp, #0
    9edc:	6078      	str	r0, [r7, #4]
    9ede:	460b      	mov	r3, r1
    9ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	7e1b      	ldrb	r3, [r3, #24]
    9ee6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9ee8:	7bfa      	ldrb	r2, [r7, #15]
    9eea:	78fb      	ldrb	r3, [r7, #3]
    9eec:	4013      	ands	r3, r2
    9eee:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9ef0:	7bfb      	ldrb	r3, [r7, #15]
}
    9ef2:	4618      	mov	r0, r3
    9ef4:	3714      	adds	r7, #20
    9ef6:	46bd      	mov	sp, r7
    9ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9efc:	4770      	bx	lr

00009efe <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    9efe:	b480      	push	{r7}
    9f00:	b083      	sub	sp, #12
    9f02:	af00      	add	r7, sp, #0
    9f04:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	7e1b      	ldrb	r3, [r3, #24]
    9f0a:	b2db      	uxtb	r3, r3
}
    9f0c:	4618      	mov	r0, r3
    9f0e:	370c      	adds	r7, #12
    9f10:	46bd      	mov	sp, r7
    9f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f16:	4770      	bx	lr

00009f18 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    9f18:	b480      	push	{r7}
    9f1a:	b083      	sub	sp, #12
    9f1c:	af00      	add	r7, sp, #0
    9f1e:	6078      	str	r0, [r7, #4]
    9f20:	460b      	mov	r3, r1
    9f22:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    9f24:	687b      	ldr	r3, [r7, #4]
    9f26:	78fa      	ldrb	r2, [r7, #3]
    9f28:	761a      	strb	r2, [r3, #24]
}
    9f2a:	bf00      	nop
    9f2c:	370c      	adds	r7, #12
    9f2e:	46bd      	mov	sp, r7
    9f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f34:	4770      	bx	lr
	...

00009f38 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9f38:	b580      	push	{r7, lr}
    9f3a:	b082      	sub	sp, #8
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	681b      	ldr	r3, [r3, #0]
    9f44:	f043 0202 	orr.w	r2, r3, #2
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9f4c:	2103      	movs	r1, #3
    9f4e:	6878      	ldr	r0, [r7, #4]
    9f50:	4b02      	ldr	r3, [pc, #8]	; (9f5c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    9f52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9f54:	bf00      	nop
    9f56:	3708      	adds	r7, #8
    9f58:	46bd      	mov	sp, r7
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	00009df1 	.word	0x00009df1

00009f60 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9f60:	b580      	push	{r7, lr}
    9f62:	b082      	sub	sp, #8
    9f64:	af00      	add	r7, sp, #0
    9f66:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9f68:	687b      	ldr	r3, [r7, #4]
    9f6a:	681b      	ldr	r3, [r3, #0]
    9f6c:	f023 0202 	bic.w	r2, r3, #2
    9f70:	687b      	ldr	r3, [r7, #4]
    9f72:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9f74:	2103      	movs	r1, #3
    9f76:	6878      	ldr	r0, [r7, #4]
    9f78:	4b02      	ldr	r3, [pc, #8]	; (9f84 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    9f7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    9f7c:	bf00      	nop
    9f7e:	3708      	adds	r7, #8
    9f80:	46bd      	mov	sp, r7
    9f82:	bd80      	pop	{r7, pc}
    9f84:	00009df1 	.word	0x00009df1

00009f88 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    9f88:	b480      	push	{r7}
    9f8a:	b085      	sub	sp, #20
    9f8c:	af00      	add	r7, sp, #0
    9f8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9f90:	687b      	ldr	r3, [r7, #4]
    9f92:	681b      	ldr	r3, [r3, #0]
    9f94:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    9f96:	68fb      	ldr	r3, [r7, #12]
    9f98:	0edb      	lsrs	r3, r3, #27
    9f9a:	f003 0301 	and.w	r3, r3, #1
    9f9e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	bf14      	ite	ne
    9fa6:	2301      	movne	r3, #1
    9fa8:	2300      	moveq	r3, #0
    9faa:	b2db      	uxtb	r3, r3
}
    9fac:	4618      	mov	r0, r3
    9fae:	3714      	adds	r7, #20
    9fb0:	46bd      	mov	sp, r7
    9fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fb6:	4770      	bx	lr

00009fb8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    9fb8:	b580      	push	{r7, lr}
    9fba:	b084      	sub	sp, #16
    9fbc:	af00      	add	r7, sp, #0
    9fbe:	6078      	str	r0, [r7, #4]
    9fc0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9fc2:	2103      	movs	r1, #3
    9fc4:	6878      	ldr	r0, [r7, #4]
    9fc6:	4b07      	ldr	r3, [pc, #28]	; (9fe4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    9fc8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9fca:	687b      	ldr	r3, [r7, #4]
    9fcc:	681b      	ldr	r3, [r3, #0]
    9fce:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9fd0:	68fa      	ldr	r2, [r7, #12]
    9fd2:	683b      	ldr	r3, [r7, #0]
    9fd4:	4013      	ands	r3, r2
    9fd6:	60fb      	str	r3, [r7, #12]
	return tmp;
    9fd8:	68fb      	ldr	r3, [r7, #12]
}
    9fda:	4618      	mov	r0, r3
    9fdc:	3710      	adds	r7, #16
    9fde:	46bd      	mov	sp, r7
    9fe0:	bd80      	pop	{r7, pc}
    9fe2:	bf00      	nop
    9fe4:	00009df1 	.word	0x00009df1

00009fe8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    9fe8:	b580      	push	{r7, lr}
    9fea:	b082      	sub	sp, #8
    9fec:	af00      	add	r7, sp, #0
    9fee:	6078      	str	r0, [r7, #4]
    9ff0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    9ff2:	687b      	ldr	r3, [r7, #4]
    9ff4:	683a      	ldr	r2, [r7, #0]
    9ff6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    9ff8:	2103      	movs	r1, #3
    9ffa:	6878      	ldr	r0, [r7, #4]
    9ffc:	4b02      	ldr	r3, [pc, #8]	; (a008 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    9ffe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a000:	bf00      	nop
    a002:	3708      	adds	r7, #8
    a004:	46bd      	mov	sp, r7
    a006:	bd80      	pop	{r7, pc}
    a008:	00009df1 	.word	0x00009df1

0000a00c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a00c:	b580      	push	{r7, lr}
    a00e:	b084      	sub	sp, #16
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a014:	2103      	movs	r1, #3
    a016:	6878      	ldr	r0, [r7, #4]
    a018:	4b09      	ldr	r3, [pc, #36]	; (a040 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    a01a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    a022:	68fb      	ldr	r3, [r7, #12]
    a024:	085b      	lsrs	r3, r3, #1
    a026:	f003 0301 	and.w	r3, r3, #1
    a02a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a02c:	68fb      	ldr	r3, [r7, #12]
    a02e:	2b00      	cmp	r3, #0
    a030:	bf14      	ite	ne
    a032:	2301      	movne	r3, #1
    a034:	2300      	moveq	r3, #0
    a036:	b2db      	uxtb	r3, r3
}
    a038:	4618      	mov	r0, r3
    a03a:	3710      	adds	r7, #16
    a03c:	46bd      	mov	sp, r7
    a03e:	bd80      	pop	{r7, pc}
    a040:	00009e3d 	.word	0x00009e3d

0000a044 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a044:	b580      	push	{r7, lr}
    a046:	b082      	sub	sp, #8
    a048:	af00      	add	r7, sp, #0
    a04a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	681b      	ldr	r3, [r3, #0]
    a050:	f023 0202 	bic.w	r2, r3, #2
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a058:	2103      	movs	r1, #3
    a05a:	6878      	ldr	r0, [r7, #4]
    a05c:	4b02      	ldr	r3, [pc, #8]	; (a068 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    a05e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a060:	bf00      	nop
    a062:	3708      	adds	r7, #8
    a064:	46bd      	mov	sp, r7
    a066:	bd80      	pop	{r7, pc}
    a068:	00009e3d 	.word	0x00009e3d

0000a06c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    a06c:	b580      	push	{r7, lr}
    a06e:	b084      	sub	sp, #16
    a070:	af00      	add	r7, sp, #0
    a072:	6078      	str	r0, [r7, #4]
    a074:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a076:	2103      	movs	r1, #3
    a078:	6878      	ldr	r0, [r7, #4]
    a07a:	4b07      	ldr	r3, [pc, #28]	; (a098 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    a07c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	681b      	ldr	r3, [r3, #0]
    a082:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a084:	68fa      	ldr	r2, [r7, #12]
    a086:	683b      	ldr	r3, [r7, #0]
    a088:	4013      	ands	r3, r2
    a08a:	60fb      	str	r3, [r7, #12]
	return tmp;
    a08c:	68fb      	ldr	r3, [r7, #12]
}
    a08e:	4618      	mov	r0, r3
    a090:	3710      	adds	r7, #16
    a092:	46bd      	mov	sp, r7
    a094:	bd80      	pop	{r7, pc}
    a096:	bf00      	nop
    a098:	00009e3d 	.word	0x00009e3d

0000a09c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    a09c:	b580      	push	{r7, lr}
    a09e:	b082      	sub	sp, #8
    a0a0:	af00      	add	r7, sp, #0
    a0a2:	6078      	str	r0, [r7, #4]
    a0a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    a0a6:	687b      	ldr	r3, [r7, #4]
    a0a8:	683a      	ldr	r2, [r7, #0]
    a0aa:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a0ac:	2103      	movs	r1, #3
    a0ae:	6878      	ldr	r0, [r7, #4]
    a0b0:	4b02      	ldr	r3, [pc, #8]	; (a0bc <hri_sercomspi_write_CTRLA_reg+0x20>)
    a0b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a0b4:	bf00      	nop
    a0b6:	3708      	adds	r7, #8
    a0b8:	46bd      	mov	sp, r7
    a0ba:	bd80      	pop	{r7, pc}
    a0bc:	00009e3d 	.word	0x00009e3d

0000a0c0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    a0c0:	b580      	push	{r7, lr}
    a0c2:	b082      	sub	sp, #8
    a0c4:	af00      	add	r7, sp, #0
    a0c6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	685b      	ldr	r3, [r3, #4]
    a0cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a0d4:	2104      	movs	r1, #4
    a0d6:	6878      	ldr	r0, [r7, #4]
    a0d8:	4b02      	ldr	r3, [pc, #8]	; (a0e4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    a0da:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a0dc:	bf00      	nop
    a0de:	3708      	adds	r7, #8
    a0e0:	46bd      	mov	sp, r7
    a0e2:	bd80      	pop	{r7, pc}
    a0e4:	00009df1 	.word	0x00009df1

0000a0e8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    a0e8:	b580      	push	{r7, lr}
    a0ea:	b082      	sub	sp, #8
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	685b      	ldr	r3, [r3, #4]
    a0f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a0fc:	2104      	movs	r1, #4
    a0fe:	6878      	ldr	r0, [r7, #4]
    a100:	4b02      	ldr	r3, [pc, #8]	; (a10c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    a102:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a104:	bf00      	nop
    a106:	3708      	adds	r7, #8
    a108:	46bd      	mov	sp, r7
    a10a:	bd80      	pop	{r7, pc}
    a10c:	00009df1 	.word	0x00009df1

0000a110 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    a110:	b580      	push	{r7, lr}
    a112:	b082      	sub	sp, #8
    a114:	af00      	add	r7, sp, #0
    a116:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	685b      	ldr	r3, [r3, #4]
    a11c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a124:	2104      	movs	r1, #4
    a126:	6878      	ldr	r0, [r7, #4]
    a128:	4b02      	ldr	r3, [pc, #8]	; (a134 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    a12a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a12c:	bf00      	nop
    a12e:	3708      	adds	r7, #8
    a130:	46bd      	mov	sp, r7
    a132:	bd80      	pop	{r7, pc}
    a134:	00009df1 	.word	0x00009df1

0000a138 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    a138:	b580      	push	{r7, lr}
    a13a:	b082      	sub	sp, #8
    a13c:	af00      	add	r7, sp, #0
    a13e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	685b      	ldr	r3, [r3, #4]
    a144:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a14c:	2104      	movs	r1, #4
    a14e:	6878      	ldr	r0, [r7, #4]
    a150:	4b02      	ldr	r3, [pc, #8]	; (a15c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    a152:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a154:	bf00      	nop
    a156:	3708      	adds	r7, #8
    a158:	46bd      	mov	sp, r7
    a15a:	bd80      	pop	{r7, pc}
    a15c:	00009df1 	.word	0x00009df1

0000a160 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    a160:	b580      	push	{r7, lr}
    a162:	b082      	sub	sp, #8
    a164:	af00      	add	r7, sp, #0
    a166:	6078      	str	r0, [r7, #4]
    a168:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	685a      	ldr	r2, [r3, #4]
    a16e:	683b      	ldr	r3, [r7, #0]
    a170:	041b      	lsls	r3, r3, #16
    a172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    a176:	431a      	orrs	r2, r3
    a178:	687b      	ldr	r3, [r7, #4]
    a17a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a17c:	2104      	movs	r1, #4
    a17e:	6878      	ldr	r0, [r7, #4]
    a180:	4b02      	ldr	r3, [pc, #8]	; (a18c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    a182:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a184:	bf00      	nop
    a186:	3708      	adds	r7, #8
    a188:	46bd      	mov	sp, r7
    a18a:	bd80      	pop	{r7, pc}
    a18c:	00009df1 	.word	0x00009df1

0000a190 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    a190:	b580      	push	{r7, lr}
    a192:	b082      	sub	sp, #8
    a194:	af00      	add	r7, sp, #0
    a196:	6078      	str	r0, [r7, #4]
    a198:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	683a      	ldr	r2, [r7, #0]
    a19e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a1a0:	2104      	movs	r1, #4
    a1a2:	6878      	ldr	r0, [r7, #4]
    a1a4:	4b02      	ldr	r3, [pc, #8]	; (a1b0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    a1a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a1a8:	bf00      	nop
    a1aa:	3708      	adds	r7, #8
    a1ac:	46bd      	mov	sp, r7
    a1ae:	bd80      	pop	{r7, pc}
    a1b0:	00009df1 	.word	0x00009df1

0000a1b4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b082      	sub	sp, #8
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
    a1bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	683a      	ldr	r2, [r7, #0]
    a1c2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    a1c4:	2117      	movs	r1, #23
    a1c6:	6878      	ldr	r0, [r7, #4]
    a1c8:	4b02      	ldr	r3, [pc, #8]	; (a1d4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    a1ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a1cc:	bf00      	nop
    a1ce:	3708      	adds	r7, #8
    a1d0:	46bd      	mov	sp, r7
    a1d2:	bd80      	pop	{r7, pc}
    a1d4:	00009e3d 	.word	0x00009e3d

0000a1d8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    a1d8:	b480      	push	{r7}
    a1da:	b083      	sub	sp, #12
    a1dc:	af00      	add	r7, sp, #0
    a1de:	6078      	str	r0, [r7, #4]
    a1e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    a1e2:	687b      	ldr	r3, [r7, #4]
    a1e4:	683a      	ldr	r2, [r7, #0]
    a1e6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a1e8:	bf00      	nop
    a1ea:	370c      	adds	r7, #12
    a1ec:	46bd      	mov	sp, r7
    a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1f2:	4770      	bx	lr

0000a1f4 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    a1f4:	b480      	push	{r7}
    a1f6:	b083      	sub	sp, #12
    a1f8:	af00      	add	r7, sp, #0
    a1fa:	6078      	str	r0, [r7, #4]
    a1fc:	460b      	mov	r3, r1
    a1fe:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    a200:	687b      	ldr	r3, [r7, #4]
    a202:	78fa      	ldrb	r2, [r7, #3]
    a204:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a206:	bf00      	nop
    a208:	370c      	adds	r7, #12
    a20a:	46bd      	mov	sp, r7
    a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a210:	4770      	bx	lr
	...

0000a214 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    a214:	b580      	push	{r7, lr}
    a216:	b084      	sub	sp, #16
    a218:	af00      	add	r7, sp, #0
    a21a:	6078      	str	r0, [r7, #4]
    a21c:	460b      	mov	r3, r1
    a21e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a224:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    a226:	68fb      	ldr	r3, [r7, #12]
    a228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    a22c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    a22e:	78fb      	ldrb	r3, [r7, #3]
    a230:	039b      	lsls	r3, r3, #14
    a232:	461a      	mov	r2, r3
    a234:	68fb      	ldr	r3, [r7, #12]
    a236:	4313      	orrs	r3, r2
    a238:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	68fa      	ldr	r2, [r7, #12]
    a23e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a240:	2104      	movs	r1, #4
    a242:	6878      	ldr	r0, [r7, #4]
    a244:	4b02      	ldr	r3, [pc, #8]	; (a250 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    a246:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a248:	bf00      	nop
    a24a:	3710      	adds	r7, #16
    a24c:	46bd      	mov	sp, r7
    a24e:	bd80      	pop	{r7, pc}
    a250:	00009df1 	.word	0x00009df1

0000a254 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    a254:	b580      	push	{r7, lr}
    a256:	b082      	sub	sp, #8
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	683a      	ldr	r2, [r7, #0]
    a262:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a264:	2104      	movs	r1, #4
    a266:	6878      	ldr	r0, [r7, #4]
    a268:	4b02      	ldr	r3, [pc, #8]	; (a274 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    a26a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a26c:	bf00      	nop
    a26e:	3708      	adds	r7, #8
    a270:	46bd      	mov	sp, r7
    a272:	bd80      	pop	{r7, pc}
    a274:	00009df1 	.word	0x00009df1

0000a278 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    a278:	b580      	push	{r7, lr}
    a27a:	b082      	sub	sp, #8
    a27c:	af00      	add	r7, sp, #0
    a27e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a280:	2104      	movs	r1, #4
    a282:	6878      	ldr	r0, [r7, #4]
    a284:	4b03      	ldr	r3, [pc, #12]	; (a294 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    a286:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    a28c:	4618      	mov	r0, r3
    a28e:	3708      	adds	r7, #8
    a290:	46bd      	mov	sp, r7
    a292:	bd80      	pop	{r7, pc}
    a294:	00009df1 	.word	0x00009df1

0000a298 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    a298:	b480      	push	{r7}
    a29a:	b083      	sub	sp, #12
    a29c:	af00      	add	r7, sp, #0
    a29e:	6078      	str	r0, [r7, #4]
    a2a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    a2a2:	687b      	ldr	r3, [r7, #4]
    a2a4:	683a      	ldr	r2, [r7, #0]
    a2a6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a2a8:	bf00      	nop
    a2aa:	370c      	adds	r7, #12
    a2ac:	46bd      	mov	sp, r7
    a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2b2:	4770      	bx	lr

0000a2b4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	b082      	sub	sp, #8
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
    a2bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    a2be:	687b      	ldr	r3, [r7, #4]
    a2c0:	683a      	ldr	r2, [r7, #0]
    a2c2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a2c4:	2104      	movs	r1, #4
    a2c6:	6878      	ldr	r0, [r7, #4]
    a2c8:	4b02      	ldr	r3, [pc, #8]	; (a2d4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    a2ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a2cc:	bf00      	nop
    a2ce:	3708      	adds	r7, #8
    a2d0:	46bd      	mov	sp, r7
    a2d2:	bd80      	pop	{r7, pc}
    a2d4:	00009df1 	.word	0x00009df1

0000a2d8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    a2d8:	b580      	push	{r7, lr}
    a2da:	b082      	sub	sp, #8
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a2e0:	2104      	movs	r1, #4
    a2e2:	6878      	ldr	r0, [r7, #4]
    a2e4:	4b03      	ldr	r3, [pc, #12]	; (a2f4 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    a2e6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    a2ec:	4618      	mov	r0, r3
    a2ee:	3708      	adds	r7, #8
    a2f0:	46bd      	mov	sp, r7
    a2f2:	bd80      	pop	{r7, pc}
    a2f4:	00009df1 	.word	0x00009df1

0000a2f8 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    a2f8:	b480      	push	{r7}
    a2fa:	b083      	sub	sp, #12
    a2fc:	af00      	add	r7, sp, #0
    a2fe:	6078      	str	r0, [r7, #4]
    a300:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	683a      	ldr	r2, [r7, #0]
    a306:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a308:	bf00      	nop
    a30a:	370c      	adds	r7, #12
    a30c:	46bd      	mov	sp, r7
    a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a312:	4770      	bx	lr

0000a314 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    a314:	b480      	push	{r7}
    a316:	b083      	sub	sp, #12
    a318:	af00      	add	r7, sp, #0
    a31a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    a320:	4618      	mov	r0, r3
    a322:	370c      	adds	r7, #12
    a324:	46bd      	mov	sp, r7
    a326:	f85d 7b04 	ldr.w	r7, [sp], #4
    a32a:	4770      	bx	lr

0000a32c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    a32c:	b480      	push	{r7}
    a32e:	b083      	sub	sp, #12
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
    a334:	460b      	mov	r3, r1
    a336:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	78fa      	ldrb	r2, [r7, #3]
    a33c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a340:	bf00      	nop
    a342:	370c      	adds	r7, #12
    a344:	46bd      	mov	sp, r7
    a346:	f85d 7b04 	ldr.w	r7, [sp], #4
    a34a:	4770      	bx	lr

0000a34c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    a34c:	b480      	push	{r7}
    a34e:	b083      	sub	sp, #12
    a350:	af00      	add	r7, sp, #0
    a352:	6078      	str	r0, [r7, #4]
    a354:	460b      	mov	r3, r1
    a356:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	887a      	ldrh	r2, [r7, #2]
    a35c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a35e:	bf00      	nop
    a360:	370c      	adds	r7, #12
    a362:	46bd      	mov	sp, r7
    a364:	f85d 7b04 	ldr.w	r7, [sp], #4
    a368:	4770      	bx	lr
	...

0000a36c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    a36c:	b580      	push	{r7, lr}
    a36e:	b082      	sub	sp, #8
    a370:	af00      	add	r7, sp, #0
    a372:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a374:	2104      	movs	r1, #4
    a376:	6878      	ldr	r0, [r7, #4]
    a378:	4b06      	ldr	r3, [pc, #24]	; (a394 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    a37a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    a37c:	687b      	ldr	r3, [r7, #4]
    a37e:	8b5b      	ldrh	r3, [r3, #26]
    a380:	b29b      	uxth	r3, r3
    a382:	091b      	lsrs	r3, r3, #4
    a384:	b29b      	uxth	r3, r3
    a386:	f003 0303 	and.w	r3, r3, #3
    a38a:	b29b      	uxth	r3, r3
}
    a38c:	4618      	mov	r0, r3
    a38e:	3708      	adds	r7, #8
    a390:	46bd      	mov	sp, r7
    a392:	bd80      	pop	{r7, pc}
    a394:	00009df1 	.word	0x00009df1

0000a398 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    a398:	b580      	push	{r7, lr}
    a39a:	b082      	sub	sp, #8
    a39c:	af00      	add	r7, sp, #0
    a39e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a3a0:	2104      	movs	r1, #4
    a3a2:	6878      	ldr	r0, [r7, #4]
    a3a4:	4b04      	ldr	r3, [pc, #16]	; (a3b8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    a3a6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    a3a8:	687b      	ldr	r3, [r7, #4]
    a3aa:	8b5b      	ldrh	r3, [r3, #26]
    a3ac:	b29b      	uxth	r3, r3
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	3708      	adds	r7, #8
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop
    a3b8:	00009df1 	.word	0x00009df1

0000a3bc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    a3bc:	b580      	push	{r7, lr}
    a3be:	b082      	sub	sp, #8
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	6078      	str	r0, [r7, #4]
    a3c4:	460b      	mov	r3, r1
    a3c6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    a3c8:	687b      	ldr	r3, [r7, #4]
    a3ca:	887a      	ldrh	r2, [r7, #2]
    a3cc:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a3ce:	2104      	movs	r1, #4
    a3d0:	6878      	ldr	r0, [r7, #4]
    a3d2:	4b03      	ldr	r3, [pc, #12]	; (a3e0 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    a3d4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a3d6:	bf00      	nop
    a3d8:	3708      	adds	r7, #8
    a3da:	46bd      	mov	sp, r7
    a3dc:	bd80      	pop	{r7, pc}
    a3de:	bf00      	nop
    a3e0:	00009df1 	.word	0x00009df1

0000a3e4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    a3e4:	b4b0      	push	{r4, r5, r7}
    a3e6:	b08d      	sub	sp, #52	; 0x34
    a3e8:	af00      	add	r7, sp, #0
    a3ea:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    a3ec:	4b13      	ldr	r3, [pc, #76]	; (a43c <_sercom_get_hardware_index+0x58>)
    a3ee:	f107 040c 	add.w	r4, r7, #12
    a3f2:	461d      	mov	r5, r3
    a3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a3f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a3f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a3fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a400:	2300      	movs	r3, #0
    a402:	62fb      	str	r3, [r7, #44]	; 0x2c
    a404:	e010      	b.n	a428 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a408:	009b      	lsls	r3, r3, #2
    a40a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a40e:	4413      	add	r3, r2
    a410:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a414:	461a      	mov	r2, r3
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	429a      	cmp	r2, r3
    a41a:	d102      	bne.n	a422 <_sercom_get_hardware_index+0x3e>
			return i;
    a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a41e:	b2db      	uxtb	r3, r3
    a420:	e006      	b.n	a430 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a424:	3301      	adds	r3, #1
    a426:	62fb      	str	r3, [r7, #44]	; 0x2c
    a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a42a:	2b07      	cmp	r3, #7
    a42c:	d9eb      	bls.n	a406 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    a42e:	2300      	movs	r3, #0
}
    a430:	4618      	mov	r0, r3
    a432:	3734      	adds	r7, #52	; 0x34
    a434:	46bd      	mov	sp, r7
    a436:	bcb0      	pop	{r4, r5, r7}
    a438:	4770      	bx	lr
    a43a:	bf00      	nop
    a43c:	00012c98 	.word	0x00012c98

0000a440 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    a440:	b580      	push	{r7, lr}
    a442:	b084      	sub	sp, #16
    a444:	af00      	add	r7, sp, #0
    a446:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    a448:	6878      	ldr	r0, [r7, #4]
    a44a:	4b13      	ldr	r3, [pc, #76]	; (a498 <_get_i2cm_index+0x58>)
    a44c:	4798      	blx	r3
    a44e:	4603      	mov	r3, r0
    a450:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    a452:	2300      	movs	r3, #0
    a454:	73fb      	strb	r3, [r7, #15]
    a456:	e010      	b.n	a47a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    a458:	7bfa      	ldrb	r2, [r7, #15]
    a45a:	4910      	ldr	r1, [pc, #64]	; (a49c <_get_i2cm_index+0x5c>)
    a45c:	4613      	mov	r3, r2
    a45e:	005b      	lsls	r3, r3, #1
    a460:	4413      	add	r3, r2
    a462:	00db      	lsls	r3, r3, #3
    a464:	440b      	add	r3, r1
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	7bba      	ldrb	r2, [r7, #14]
    a46a:	429a      	cmp	r2, r3
    a46c:	d102      	bne.n	a474 <_get_i2cm_index+0x34>
			return i;
    a46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a472:	e00d      	b.n	a490 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    a474:	7bfb      	ldrb	r3, [r7, #15]
    a476:	3301      	adds	r3, #1
    a478:	73fb      	strb	r3, [r7, #15]
    a47a:	7bfb      	ldrb	r3, [r7, #15]
    a47c:	2b02      	cmp	r3, #2
    a47e:	d9eb      	bls.n	a458 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    a480:	f240 32a6 	movw	r2, #934	; 0x3a6
    a484:	4906      	ldr	r1, [pc, #24]	; (a4a0 <_get_i2cm_index+0x60>)
    a486:	2000      	movs	r0, #0
    a488:	4b06      	ldr	r3, [pc, #24]	; (a4a4 <_get_i2cm_index+0x64>)
    a48a:	4798      	blx	r3
	return -1;
    a48c:	f04f 33ff 	mov.w	r3, #4294967295
}
    a490:	4618      	mov	r0, r3
    a492:	3710      	adds	r7, #16
    a494:	46bd      	mov	sp, r7
    a496:	bd80      	pop	{r7, pc}
    a498:	0000a3e5 	.word	0x0000a3e5
    a49c:	20000410 	.word	0x20000410
    a4a0:	00012c7c 	.word	0x00012c7c
    a4a4:	00007361 	.word	0x00007361

0000a4a8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    a4a8:	b580      	push	{r7, lr}
    a4aa:	b082      	sub	sp, #8
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    a4b0:	2103      	movs	r1, #3
    a4b2:	6878      	ldr	r0, [r7, #4]
    a4b4:	4b02      	ldr	r3, [pc, #8]	; (a4c0 <_sercom_i2c_send_stop+0x18>)
    a4b6:	4798      	blx	r3
}
    a4b8:	bf00      	nop
    a4ba:	3708      	adds	r7, #8
    a4bc:	46bd      	mov	sp, r7
    a4be:	bd80      	pop	{r7, pc}
    a4c0:	0000a161 	.word	0x0000a161

0000a4c4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    a4c4:	b590      	push	{r4, r7, lr}
    a4c6:	b087      	sub	sp, #28
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	60f8      	str	r0, [r7, #12]
    a4cc:	60b9      	str	r1, [r7, #8]
    a4ce:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a4d0:	68f8      	ldr	r0, [r7, #12]
    a4d2:	4b7d      	ldr	r3, [pc, #500]	; (a6c8 <_sercom_i2c_sync_analyse_flags+0x204>)
    a4d4:	4798      	blx	r3
    a4d6:	4603      	mov	r3, r0
    a4d8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    a4da:	68f8      	ldr	r0, [r7, #12]
    a4dc:	4b7b      	ldr	r3, [pc, #492]	; (a6cc <_sercom_i2c_sync_analyse_flags+0x208>)
    a4de:	4798      	blx	r3
    a4e0:	4603      	mov	r3, r0
    a4e2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    a4e4:	68bb      	ldr	r3, [r7, #8]
    a4e6:	f003 0301 	and.w	r3, r3, #1
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	f000 8095 	beq.w	a61a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    a4f0:	8a7b      	ldrh	r3, [r7, #18]
    a4f2:	f003 0302 	and.w	r3, r3, #2
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d01d      	beq.n	a536 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    a4fa:	68f8      	ldr	r0, [r7, #12]
    a4fc:	4b74      	ldr	r3, [pc, #464]	; (a6d0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    a4fe:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    a500:	687b      	ldr	r3, [r7, #4]
    a502:	885b      	ldrh	r3, [r3, #2]
    a504:	b29b      	uxth	r3, r3
    a506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a50a:	b29a      	uxth	r2, r3
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	885b      	ldrh	r3, [r3, #2]
    a514:	b29b      	uxth	r3, r3
    a516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a51a:	b29a      	uxth	r2, r3
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    a520:	8a7b      	ldrh	r3, [r7, #18]
    a522:	f003 0301 	and.w	r3, r3, #1
    a526:	2b00      	cmp	r3, #0
    a528:	d002      	beq.n	a530 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    a52a:	f06f 0304 	mvn.w	r3, #4
    a52e:	e0c6      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    a530:	f06f 0303 	mvn.w	r3, #3
    a534:	e0c3      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    a536:	8a7b      	ldrh	r3, [r7, #18]
    a538:	f003 0304 	and.w	r3, r3, #4
    a53c:	2b00      	cmp	r3, #0
    a53e:	d01f      	beq.n	a580 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    a540:	687b      	ldr	r3, [r7, #4]
    a542:	685b      	ldr	r3, [r3, #4]
    a544:	2b00      	cmp	r3, #0
    a546:	dd07      	ble.n	a558 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    a548:	687b      	ldr	r3, [r7, #4]
    a54a:	885b      	ldrh	r3, [r3, #2]
    a54c:	b29b      	uxth	r3, r3
    a54e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    a552:	b29a      	uxth	r2, r3
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    a558:	687b      	ldr	r3, [r7, #4]
    a55a:	885b      	ldrh	r3, [r3, #2]
    a55c:	b29b      	uxth	r3, r3
    a55e:	b21b      	sxth	r3, r3
    a560:	2b00      	cmp	r3, #0
    a562:	da02      	bge.n	a56a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    a564:	68f8      	ldr	r0, [r7, #12]
    a566:	4b5b      	ldr	r3, [pc, #364]	; (a6d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a568:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	885b      	ldrh	r3, [r3, #2]
    a56e:	b29b      	uxth	r3, r3
    a570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a574:	b29a      	uxth	r2, r3
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    a57a:	f06f 0301 	mvn.w	r3, #1
    a57e:	e09e      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	885b      	ldrh	r3, [r3, #2]
    a584:	b29b      	uxth	r3, r3
    a586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a58a:	2b00      	cmp	r3, #0
    a58c:	d01c      	beq.n	a5c8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	881b      	ldrh	r3, [r3, #0]
    a592:	121b      	asrs	r3, r3, #8
    a594:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a596:	f003 0406 	and.w	r4, r3, #6
    a59a:	68f8      	ldr	r0, [r7, #12]
    a59c:	4b4e      	ldr	r3, [pc, #312]	; (a6d8 <_sercom_i2c_sync_analyse_flags+0x214>)
    a59e:	4798      	blx	r3
    a5a0:	4603      	mov	r3, r0
    a5a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a5a6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    a5a8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    a5ac:	4619      	mov	r1, r3
    a5ae:	68f8      	ldr	r0, [r7, #12]
    a5b0:	4b4a      	ldr	r3, [pc, #296]	; (a6dc <_sercom_i2c_sync_analyse_flags+0x218>)
    a5b2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    a5b4:	687b      	ldr	r3, [r7, #4]
    a5b6:	885b      	ldrh	r3, [r3, #2]
    a5b8:	b29b      	uxth	r3, r3
    a5ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    a5be:	b29a      	uxth	r2, r3
    a5c0:	687b      	ldr	r3, [r7, #4]
    a5c2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    a5c4:	2300      	movs	r3, #0
    a5c6:	e07a      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	685b      	ldr	r3, [r3, #4]
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	d111      	bne.n	a5f4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    a5d0:	687b      	ldr	r3, [r7, #4]
    a5d2:	885b      	ldrh	r3, [r3, #2]
    a5d4:	b29b      	uxth	r3, r3
    a5d6:	b21b      	sxth	r3, r3
    a5d8:	2b00      	cmp	r3, #0
    a5da:	da02      	bge.n	a5e2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    a5dc:	68f8      	ldr	r0, [r7, #12]
    a5de:	4b3d      	ldr	r3, [pc, #244]	; (a6d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a5e0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a5e2:	687b      	ldr	r3, [r7, #4]
    a5e4:	885b      	ldrh	r3, [r3, #2]
    a5e6:	b29b      	uxth	r3, r3
    a5e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a5ec:	b29a      	uxth	r2, r3
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	805a      	strh	r2, [r3, #2]
    a5f2:	e010      	b.n	a616 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	689b      	ldr	r3, [r3, #8]
    a5f8:	781b      	ldrb	r3, [r3, #0]
    a5fa:	4619      	mov	r1, r3
    a5fc:	68f8      	ldr	r0, [r7, #12]
    a5fe:	4b38      	ldr	r3, [pc, #224]	; (a6e0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    a600:	4798      	blx	r3
				msg->buffer++;
    a602:	687b      	ldr	r3, [r7, #4]
    a604:	689b      	ldr	r3, [r3, #8]
    a606:	1c5a      	adds	r2, r3, #1
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	609a      	str	r2, [r3, #8]
				msg->len--;
    a60c:	687b      	ldr	r3, [r7, #4]
    a60e:	685b      	ldr	r3, [r3, #4]
    a610:	1e5a      	subs	r2, r3, #1
    a612:	687b      	ldr	r3, [r7, #4]
    a614:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    a616:	2300      	movs	r3, #0
    a618:	e051      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    a61a:	68bb      	ldr	r3, [r7, #8]
    a61c:	f003 0302 	and.w	r3, r3, #2
    a620:	2b00      	cmp	r3, #0
    a622:	d04b      	beq.n	a6bc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	685b      	ldr	r3, [r3, #4]
    a628:	2b00      	cmp	r3, #0
    a62a:	d041      	beq.n	a6b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    a62c:	8a7b      	ldrh	r3, [r7, #18]
    a62e:	f003 0304 	and.w	r3, r3, #4
    a632:	2b00      	cmp	r3, #0
    a634:	d13c      	bne.n	a6b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	685b      	ldr	r3, [r3, #4]
    a63a:	1e5a      	subs	r2, r3, #1
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	685b      	ldr	r3, [r3, #4]
    a644:	2b00      	cmp	r3, #0
    a646:	d102      	bne.n	a64e <_sercom_i2c_sync_analyse_flags+0x18a>
    a648:	697b      	ldr	r3, [r7, #20]
    a64a:	2b00      	cmp	r3, #0
    a64c:	d006      	beq.n	a65c <_sercom_i2c_sync_analyse_flags+0x198>
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	685b      	ldr	r3, [r3, #4]
    a652:	2b01      	cmp	r3, #1
    a654:	d105      	bne.n	a662 <_sercom_i2c_sync_analyse_flags+0x19e>
    a656:	697b      	ldr	r3, [r7, #20]
    a658:	2b00      	cmp	r3, #0
    a65a:	d002      	beq.n	a662 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a65c:	68f8      	ldr	r0, [r7, #12]
    a65e:	4b21      	ldr	r3, [pc, #132]	; (a6e4 <_sercom_i2c_sync_analyse_flags+0x220>)
    a660:	4798      	blx	r3
			}

			if (msg->len == 0) {
    a662:	687b      	ldr	r3, [r7, #4]
    a664:	685b      	ldr	r3, [r3, #4]
    a666:	2b00      	cmp	r3, #0
    a668:	d113      	bne.n	a692 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    a66a:	687b      	ldr	r3, [r7, #4]
    a66c:	885b      	ldrh	r3, [r3, #2]
    a66e:	b29b      	uxth	r3, r3
    a670:	b21b      	sxth	r3, r3
    a672:	2b00      	cmp	r3, #0
    a674:	da05      	bge.n	a682 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    a676:	68f8      	ldr	r0, [r7, #12]
    a678:	4b1b      	ldr	r3, [pc, #108]	; (a6e8 <_sercom_i2c_sync_analyse_flags+0x224>)
    a67a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    a67c:	68f8      	ldr	r0, [r7, #12]
    a67e:	4b15      	ldr	r3, [pc, #84]	; (a6d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    a680:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	885b      	ldrh	r3, [r3, #2]
    a686:	b29b      	uxth	r3, r3
    a688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a68c:	b29a      	uxth	r2, r3
    a68e:	687b      	ldr	r3, [r7, #4]
    a690:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	689c      	ldr	r4, [r3, #8]
    a696:	1c62      	adds	r2, r4, #1
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	609a      	str	r2, [r3, #8]
    a69c:	68f8      	ldr	r0, [r7, #12]
    a69e:	4b13      	ldr	r3, [pc, #76]	; (a6ec <_sercom_i2c_sync_analyse_flags+0x228>)
    a6a0:	4798      	blx	r3
    a6a2:	4603      	mov	r3, r0
    a6a4:	b2db      	uxtb	r3, r3
    a6a6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a6a8:	68f8      	ldr	r0, [r7, #12]
    a6aa:	4b11      	ldr	r3, [pc, #68]	; (a6f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a6ac:	4798      	blx	r3
    a6ae:	e005      	b.n	a6bc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    a6b0:	68f8      	ldr	r0, [r7, #12]
    a6b2:	4b0f      	ldr	r3, [pc, #60]	; (a6f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    a6b4:	4798      	blx	r3
			return I2C_NACK;
    a6b6:	f06f 0301 	mvn.w	r3, #1
    a6ba:	e000      	b.n	a6be <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    a6bc:	2300      	movs	r3, #0
}
    a6be:	4618      	mov	r0, r3
    a6c0:	371c      	adds	r7, #28
    a6c2:	46bd      	mov	sp, r7
    a6c4:	bd90      	pop	{r4, r7, pc}
    a6c6:	bf00      	nop
    a6c8:	00009f89 	.word	0x00009f89
    a6cc:	0000a399 	.word	0x0000a399
    a6d0:	00009e89 	.word	0x00009e89
    a6d4:	0000a4a9 	.word	0x0000a4a9
    a6d8:	0000a279 	.word	0x0000a279
    a6dc:	0000a255 	.word	0x0000a255
    a6e0:	0000a2b5 	.word	0x0000a2b5
    a6e4:	0000a111 	.word	0x0000a111
    a6e8:	0000a0e9 	.word	0x0000a0e9
    a6ec:	0000a2d9 	.word	0x0000a2d9
    a6f0:	00009ea3 	.word	0x00009ea3

0000a6f4 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    a6f4:	b580      	push	{r7, lr}
    a6f6:	b082      	sub	sp, #8
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	6078      	str	r0, [r7, #4]
    a6fc:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	2b00      	cmp	r3, #0
    a702:	bf14      	ite	ne
    a704:	2301      	movne	r3, #1
    a706:	2300      	moveq	r3, #0
    a708:	b2db      	uxtb	r3, r3
    a70a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    a70e:	4908      	ldr	r1, [pc, #32]	; (a730 <_i2c_m_sync_init+0x3c>)
    a710:	4618      	mov	r0, r3
    a712:	4b08      	ldr	r3, [pc, #32]	; (a734 <_i2c_m_sync_init+0x40>)
    a714:	4798      	blx	r3

	i2c_dev->hw = hw;
    a716:	687b      	ldr	r3, [r7, #4]
    a718:	683a      	ldr	r2, [r7, #0]
    a71a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    a71c:	687b      	ldr	r3, [r7, #4]
    a71e:	6839      	ldr	r1, [r7, #0]
    a720:	4618      	mov	r0, r3
    a722:	4b05      	ldr	r3, [pc, #20]	; (a738 <_i2c_m_sync_init+0x44>)
    a724:	4798      	blx	r3
    a726:	4603      	mov	r3, r0
}
    a728:	4618      	mov	r0, r3
    a72a:	3708      	adds	r7, #8
    a72c:	46bd      	mov	sp, r7
    a72e:	bd80      	pop	{r7, pc}
    a730:	00012c7c 	.word	0x00012c7c
    a734:	00007361 	.word	0x00007361
    a738:	0000ab0d 	.word	0x0000ab0d

0000a73c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    a73c:	b580      	push	{r7, lr}
    a73e:	b082      	sub	sp, #8
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	2b00      	cmp	r3, #0
    a748:	bf14      	ite	ne
    a74a:	2301      	movne	r3, #1
    a74c:	2300      	moveq	r3, #0
    a74e:	b2db      	uxtb	r3, r3
    a750:	f240 5235 	movw	r2, #1333	; 0x535
    a754:	4906      	ldr	r1, [pc, #24]	; (a770 <_i2c_m_sync_enable+0x34>)
    a756:	4618      	mov	r0, r3
    a758:	4b06      	ldr	r3, [pc, #24]	; (a774 <_i2c_m_sync_enable+0x38>)
    a75a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	691b      	ldr	r3, [r3, #16]
    a760:	4618      	mov	r0, r3
    a762:	4b05      	ldr	r3, [pc, #20]	; (a778 <_i2c_m_sync_enable+0x3c>)
    a764:	4798      	blx	r3
    a766:	4603      	mov	r3, r0
}
    a768:	4618      	mov	r0, r3
    a76a:	3708      	adds	r7, #8
    a76c:	46bd      	mov	sp, r7
    a76e:	bd80      	pop	{r7, pc}
    a770:	00012c7c 	.word	0x00012c7c
    a774:	00007361 	.word	0x00007361
    a778:	0000aa81 	.word	0x0000aa81

0000a77c <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    a77c:	b580      	push	{r7, lr}
    a77e:	b084      	sub	sp, #16
    a780:	af00      	add	r7, sp, #0
    a782:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    a784:	687b      	ldr	r3, [r7, #4]
    a786:	691b      	ldr	r3, [r3, #16]
    a788:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    a78a:	687b      	ldr	r3, [r7, #4]
    a78c:	2b00      	cmp	r3, #0
    a78e:	bf14      	ite	ne
    a790:	2301      	movne	r3, #1
    a792:	2300      	moveq	r3, #0
    a794:	b2db      	uxtb	r3, r3
    a796:	f240 5243 	movw	r2, #1347	; 0x543
    a79a:	490c      	ldr	r1, [pc, #48]	; (a7cc <_i2c_m_sync_disable+0x50>)
    a79c:	4618      	mov	r0, r3
    a79e:	4b0c      	ldr	r3, [pc, #48]	; (a7d0 <_i2c_m_sync_disable+0x54>)
    a7a0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	691b      	ldr	r3, [r3, #16]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	bf14      	ite	ne
    a7aa:	2301      	movne	r3, #1
    a7ac:	2300      	moveq	r3, #0
    a7ae:	b2db      	uxtb	r3, r3
    a7b0:	f240 5244 	movw	r2, #1348	; 0x544
    a7b4:	4905      	ldr	r1, [pc, #20]	; (a7cc <_i2c_m_sync_disable+0x50>)
    a7b6:	4618      	mov	r0, r3
    a7b8:	4b05      	ldr	r3, [pc, #20]	; (a7d0 <_i2c_m_sync_disable+0x54>)
    a7ba:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    a7bc:	68f8      	ldr	r0, [r7, #12]
    a7be:	4b05      	ldr	r3, [pc, #20]	; (a7d4 <_i2c_m_sync_disable+0x58>)
    a7c0:	4798      	blx	r3

	return ERR_NONE;
    a7c2:	2300      	movs	r3, #0
}
    a7c4:	4618      	mov	r0, r3
    a7c6:	3710      	adds	r7, #16
    a7c8:	46bd      	mov	sp, r7
    a7ca:	bd80      	pop	{r7, pc}
    a7cc:	00012c7c 	.word	0x00012c7c
    a7d0:	00007361 	.word	0x00007361
    a7d4:	00009f61 	.word	0x00009f61

0000a7d8 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b084      	sub	sp, #16
    a7dc:	af00      	add	r7, sp, #0
    a7de:	6078      	str	r0, [r7, #4]
    a7e0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    a7e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a7e6:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	691b      	ldr	r3, [r3, #16]
    a7ec:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    a7ee:	68b8      	ldr	r0, [r7, #8]
    a7f0:	4b0f      	ldr	r3, [pc, #60]	; (a830 <_sercom_i2c_sync_wait_bus+0x58>)
    a7f2:	4798      	blx	r3
    a7f4:	4603      	mov	r3, r0
    a7f6:	461a      	mov	r2, r3
    a7f8:	683b      	ldr	r3, [r7, #0]
    a7fa:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    a7fc:	68fb      	ldr	r3, [r7, #12]
    a7fe:	1e5a      	subs	r2, r3, #1
    a800:	60fa      	str	r2, [r7, #12]
    a802:	2b00      	cmp	r3, #0
    a804:	d102      	bne.n	a80c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    a806:	f06f 0304 	mvn.w	r3, #4
    a80a:	e00c      	b.n	a826 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a80c:	683b      	ldr	r3, [r7, #0]
    a80e:	681b      	ldr	r3, [r3, #0]
    a810:	f003 0301 	and.w	r3, r3, #1
    a814:	2b00      	cmp	r3, #0
    a816:	d105      	bne.n	a824 <_sercom_i2c_sync_wait_bus+0x4c>
    a818:	683b      	ldr	r3, [r7, #0]
    a81a:	681b      	ldr	r3, [r3, #0]
    a81c:	f003 0302 	and.w	r3, r3, #2
    a820:	2b00      	cmp	r3, #0
    a822:	d0e4      	beq.n	a7ee <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    a824:	2300      	movs	r3, #0
}
    a826:	4618      	mov	r0, r3
    a828:	3710      	adds	r7, #16
    a82a:	46bd      	mov	sp, r7
    a82c:	bd80      	pop	{r7, pc}
    a82e:	bf00      	nop
    a830:	00009ebd 	.word	0x00009ebd

0000a834 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    a834:	b590      	push	{r4, r7, lr}
    a836:	b087      	sub	sp, #28
    a838:	af00      	add	r7, sp, #0
    a83a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    a83c:	687b      	ldr	r3, [r7, #4]
    a83e:	691b      	ldr	r3, [r3, #16]
    a840:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    a842:	687b      	ldr	r3, [r7, #4]
    a844:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    a846:	6978      	ldr	r0, [r7, #20]
    a848:	4b39      	ldr	r3, [pc, #228]	; (a930 <_sercom_i2c_sync_send_address+0xfc>)
    a84a:	4798      	blx	r3
    a84c:	4603      	mov	r3, r0
    a84e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	2b00      	cmp	r3, #0
    a854:	bf14      	ite	ne
    a856:	2301      	movne	r3, #1
    a858:	2300      	moveq	r3, #0
    a85a:	b2db      	uxtb	r3, r3
    a85c:	f240 52a5 	movw	r2, #1445	; 0x5a5
    a860:	4934      	ldr	r1, [pc, #208]	; (a934 <_sercom_i2c_sync_send_address+0x100>)
    a862:	4618      	mov	r0, r3
    a864:	4b34      	ldr	r3, [pc, #208]	; (a938 <_sercom_i2c_sync_send_address+0x104>)
    a866:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    a868:	693b      	ldr	r3, [r7, #16]
    a86a:	685b      	ldr	r3, [r3, #4]
    a86c:	2b01      	cmp	r3, #1
    a86e:	d106      	bne.n	a87e <_sercom_i2c_sync_send_address+0x4a>
    a870:	68fb      	ldr	r3, [r7, #12]
    a872:	2b00      	cmp	r3, #0
    a874:	d003      	beq.n	a87e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    a876:	6978      	ldr	r0, [r7, #20]
    a878:	4b30      	ldr	r3, [pc, #192]	; (a93c <_sercom_i2c_sync_send_address+0x108>)
    a87a:	4798      	blx	r3
    a87c:	e002      	b.n	a884 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    a87e:	6978      	ldr	r0, [r7, #20]
    a880:	4b2f      	ldr	r3, [pc, #188]	; (a940 <_sercom_i2c_sync_send_address+0x10c>)
    a882:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    a884:	693b      	ldr	r3, [r7, #16]
    a886:	881b      	ldrh	r3, [r3, #0]
    a888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a88c:	2b00      	cmp	r3, #0
    a88e:	d022      	beq.n	a8d6 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    a890:	693b      	ldr	r3, [r7, #16]
    a892:	885b      	ldrh	r3, [r3, #2]
    a894:	b29b      	uxth	r3, r3
    a896:	f003 0301 	and.w	r3, r3, #1
    a89a:	2b00      	cmp	r3, #0
    a89c:	d007      	beq.n	a8ae <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    a89e:	693b      	ldr	r3, [r7, #16]
    a8a0:	885b      	ldrh	r3, [r3, #2]
    a8a2:	b29b      	uxth	r3, r3
    a8a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    a8a8:	b29a      	uxth	r2, r3
    a8aa:	693b      	ldr	r3, [r7, #16]
    a8ac:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    a8ae:	693b      	ldr	r3, [r7, #16]
    a8b0:	881b      	ldrh	r3, [r3, #0]
    a8b2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a8b4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    a8b8:	401c      	ands	r4, r3
    a8ba:	6978      	ldr	r0, [r7, #20]
    a8bc:	4b21      	ldr	r3, [pc, #132]	; (a944 <_sercom_i2c_sync_send_address+0x110>)
    a8be:	4798      	blx	r3
    a8c0:	4603      	mov	r3, r0
    a8c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a8c6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    a8c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a8cc:	4619      	mov	r1, r3
    a8ce:	6978      	ldr	r0, [r7, #20]
    a8d0:	4b1d      	ldr	r3, [pc, #116]	; (a948 <_sercom_i2c_sync_send_address+0x114>)
    a8d2:	4798      	blx	r3
    a8d4:	e01a      	b.n	a90c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    a8d6:	693b      	ldr	r3, [r7, #16]
    a8d8:	881b      	ldrh	r3, [r3, #0]
    a8da:	005b      	lsls	r3, r3, #1
    a8dc:	b2db      	uxtb	r3, r3
    a8de:	693a      	ldr	r2, [r7, #16]
    a8e0:	8852      	ldrh	r2, [r2, #2]
    a8e2:	b292      	uxth	r2, r2
    a8e4:	f002 0201 	and.w	r2, r2, #1
    a8e8:	2a00      	cmp	r2, #0
    a8ea:	bf14      	ite	ne
    a8ec:	2201      	movne	r2, #1
    a8ee:	2200      	moveq	r2, #0
    a8f0:	b2d2      	uxtb	r2, r2
    a8f2:	4313      	orrs	r3, r2
    a8f4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a8f6:	6978      	ldr	r0, [r7, #20]
    a8f8:	4b12      	ldr	r3, [pc, #72]	; (a944 <_sercom_i2c_sync_send_address+0x110>)
    a8fa:	4798      	blx	r3
    a8fc:	4603      	mov	r3, r0
    a8fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    a902:	4323      	orrs	r3, r4
    a904:	4619      	mov	r1, r3
    a906:	6978      	ldr	r0, [r7, #20]
    a908:	4b0f      	ldr	r3, [pc, #60]	; (a948 <_sercom_i2c_sync_send_address+0x114>)
    a90a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    a90c:	f107 0308 	add.w	r3, r7, #8
    a910:	4619      	mov	r1, r3
    a912:	6878      	ldr	r0, [r7, #4]
    a914:	4b0d      	ldr	r3, [pc, #52]	; (a94c <_sercom_i2c_sync_send_address+0x118>)
    a916:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    a918:	68bb      	ldr	r3, [r7, #8]
    a91a:	693a      	ldr	r2, [r7, #16]
    a91c:	4619      	mov	r1, r3
    a91e:	6978      	ldr	r0, [r7, #20]
    a920:	4b0b      	ldr	r3, [pc, #44]	; (a950 <_sercom_i2c_sync_send_address+0x11c>)
    a922:	4798      	blx	r3
    a924:	4603      	mov	r3, r0
}
    a926:	4618      	mov	r0, r3
    a928:	371c      	adds	r7, #28
    a92a:	46bd      	mov	sp, r7
    a92c:	bd90      	pop	{r4, r7, pc}
    a92e:	bf00      	nop
    a930:	00009f89 	.word	0x00009f89
    a934:	00012c7c 	.word	0x00012c7c
    a938:	00007361 	.word	0x00007361
    a93c:	0000a111 	.word	0x0000a111
    a940:	0000a139 	.word	0x0000a139
    a944:	0000a279 	.word	0x0000a279
    a948:	0000a255 	.word	0x0000a255
    a94c:	0000a7d9 	.word	0x0000a7d9
    a950:	0000a4c5 	.word	0x0000a4c5

0000a954 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    a954:	b580      	push	{r7, lr}
    a956:	b086      	sub	sp, #24
    a958:	af00      	add	r7, sp, #0
    a95a:	6078      	str	r0, [r7, #4]
    a95c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    a95e:	687b      	ldr	r3, [r7, #4]
    a960:	691b      	ldr	r3, [r3, #16]
    a962:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    a964:	687b      	ldr	r3, [r7, #4]
    a966:	2b00      	cmp	r3, #0
    a968:	bf14      	ite	ne
    a96a:	2301      	movne	r3, #1
    a96c:	2300      	moveq	r3, #0
    a96e:	b2db      	uxtb	r3, r3
    a970:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    a974:	493b      	ldr	r1, [pc, #236]	; (aa64 <_i2c_m_sync_transfer+0x110>)
    a976:	4618      	mov	r0, r3
    a978:	4b3b      	ldr	r3, [pc, #236]	; (aa68 <_i2c_m_sync_transfer+0x114>)
    a97a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    a97c:	687b      	ldr	r3, [r7, #4]
    a97e:	691b      	ldr	r3, [r3, #16]
    a980:	2b00      	cmp	r3, #0
    a982:	bf14      	ite	ne
    a984:	2301      	movne	r3, #1
    a986:	2300      	moveq	r3, #0
    a988:	b2db      	uxtb	r3, r3
    a98a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    a98e:	4935      	ldr	r1, [pc, #212]	; (aa64 <_i2c_m_sync_transfer+0x110>)
    a990:	4618      	mov	r0, r3
    a992:	4b35      	ldr	r3, [pc, #212]	; (aa68 <_i2c_m_sync_transfer+0x114>)
    a994:	4798      	blx	r3
	ASSERT(msg);
    a996:	683b      	ldr	r3, [r7, #0]
    a998:	2b00      	cmp	r3, #0
    a99a:	bf14      	ite	ne
    a99c:	2301      	movne	r3, #1
    a99e:	2300      	moveq	r3, #0
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	f240 52d2 	movw	r2, #1490	; 0x5d2
    a9a6:	492f      	ldr	r1, [pc, #188]	; (aa64 <_i2c_m_sync_transfer+0x110>)
    a9a8:	4618      	mov	r0, r3
    a9aa:	4b2f      	ldr	r3, [pc, #188]	; (aa68 <_i2c_m_sync_transfer+0x114>)
    a9ac:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a9ae:	687b      	ldr	r3, [r7, #4]
    a9b0:	885b      	ldrh	r3, [r3, #2]
    a9b2:	b29b      	uxth	r3, r3
    a9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d002      	beq.n	a9c2 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    a9bc:	f06f 0305 	mvn.w	r3, #5
    a9c0:	e04c      	b.n	aa5c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    a9c2:	683b      	ldr	r3, [r7, #0]
    a9c4:	885b      	ldrh	r3, [r3, #2]
    a9c6:	b29b      	uxth	r3, r3
    a9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a9cc:	b29a      	uxth	r2, r3
    a9ce:	683b      	ldr	r3, [r7, #0]
    a9d0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    a9d2:	687b      	ldr	r3, [r7, #4]
    a9d4:	683a      	ldr	r2, [r7, #0]
    a9d6:	ca07      	ldmia	r2, {r0, r1, r2}
    a9d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    a9dc:	6938      	ldr	r0, [r7, #16]
    a9de:	4b23      	ldr	r3, [pc, #140]	; (aa6c <_i2c_m_sync_transfer+0x118>)
    a9e0:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    a9e2:	6878      	ldr	r0, [r7, #4]
    a9e4:	4b22      	ldr	r3, [pc, #136]	; (aa70 <_i2c_m_sync_transfer+0x11c>)
    a9e6:	4798      	blx	r3
    a9e8:	6178      	str	r0, [r7, #20]

	if (ret) {
    a9ea:	697b      	ldr	r3, [r7, #20]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d02d      	beq.n	aa4c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	885b      	ldrh	r3, [r3, #2]
    a9f4:	b29b      	uxth	r3, r3
    a9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    a9fa:	b29a      	uxth	r2, r3
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	805a      	strh	r2, [r3, #2]

		return ret;
    aa00:	697b      	ldr	r3, [r7, #20]
    aa02:	e02b      	b.n	aa5c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    aa04:	f107 030c 	add.w	r3, r7, #12
    aa08:	4619      	mov	r1, r3
    aa0a:	6878      	ldr	r0, [r7, #4]
    aa0c:	4b19      	ldr	r3, [pc, #100]	; (aa74 <_i2c_m_sync_transfer+0x120>)
    aa0e:	4798      	blx	r3
    aa10:	6178      	str	r0, [r7, #20]

		if (ret) {
    aa12:	697b      	ldr	r3, [r7, #20]
    aa14:	2b00      	cmp	r3, #0
    aa16:	d012      	beq.n	aa3e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    aa18:	683b      	ldr	r3, [r7, #0]
    aa1a:	885b      	ldrh	r3, [r3, #2]
    aa1c:	b29b      	uxth	r3, r3
    aa1e:	b21b      	sxth	r3, r3
    aa20:	2b00      	cmp	r3, #0
    aa22:	da02      	bge.n	aa2a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    aa24:	6938      	ldr	r0, [r7, #16]
    aa26:	4b14      	ldr	r3, [pc, #80]	; (aa78 <_i2c_m_sync_transfer+0x124>)
    aa28:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    aa2a:	687b      	ldr	r3, [r7, #4]
    aa2c:	885b      	ldrh	r3, [r3, #2]
    aa2e:	b29b      	uxth	r3, r3
    aa30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    aa34:	b29a      	uxth	r2, r3
    aa36:	687b      	ldr	r3, [r7, #4]
    aa38:	805a      	strh	r2, [r3, #2]

			return ret;
    aa3a:	697b      	ldr	r3, [r7, #20]
    aa3c:	e00e      	b.n	aa5c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    aa3e:	68fb      	ldr	r3, [r7, #12]
    aa40:	687a      	ldr	r2, [r7, #4]
    aa42:	4619      	mov	r1, r3
    aa44:	6938      	ldr	r0, [r7, #16]
    aa46:	4b0d      	ldr	r3, [pc, #52]	; (aa7c <_i2c_m_sync_transfer+0x128>)
    aa48:	4798      	blx	r3
    aa4a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	885b      	ldrh	r3, [r3, #2]
    aa50:	b29b      	uxth	r3, r3
    aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
    aa56:	2b00      	cmp	r3, #0
    aa58:	d1d4      	bne.n	aa04 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    aa5a:	697b      	ldr	r3, [r7, #20]
}
    aa5c:	4618      	mov	r0, r3
    aa5e:	3718      	adds	r7, #24
    aa60:	46bd      	mov	sp, r7
    aa62:	bd80      	pop	{r7, pc}
    aa64:	00012c7c 	.word	0x00012c7c
    aa68:	00007361 	.word	0x00007361
    aa6c:	0000a0c1 	.word	0x0000a0c1
    aa70:	0000a835 	.word	0x0000a835
    aa74:	0000a7d9 	.word	0x0000a7d9
    aa78:	0000a4a9 	.word	0x0000a4a9
    aa7c:	0000a4c5 	.word	0x0000a4c5

0000aa80 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b084      	sub	sp, #16
    aa84:	af00      	add	r7, sp, #0
    aa86:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    aa88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa8c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    aa8e:	2304      	movs	r3, #4
    aa90:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    aa92:	687b      	ldr	r3, [r7, #4]
    aa94:	2b00      	cmp	r3, #0
    aa96:	bf14      	ite	ne
    aa98:	2301      	movne	r3, #1
    aa9a:	2300      	moveq	r3, #0
    aa9c:	b2db      	uxtb	r3, r3
    aa9e:	f240 6205 	movw	r2, #1541	; 0x605
    aaa2:	4915      	ldr	r1, [pc, #84]	; (aaf8 <_i2c_m_enable_implementation+0x78>)
    aaa4:	4618      	mov	r0, r3
    aaa6:	4b15      	ldr	r3, [pc, #84]	; (aafc <_i2c_m_enable_implementation+0x7c>)
    aaa8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    aaaa:	6878      	ldr	r0, [r7, #4]
    aaac:	4b14      	ldr	r3, [pc, #80]	; (ab00 <_i2c_m_enable_implementation+0x80>)
    aaae:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    aab0:	e016      	b.n	aae0 <_i2c_m_enable_implementation+0x60>
		timeout--;
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	3b01      	subs	r3, #1
    aab6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    aab8:	68fb      	ldr	r3, [r7, #12]
    aaba:	2b00      	cmp	r3, #0
    aabc:	dc10      	bgt.n	aae0 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    aabe:	68bb      	ldr	r3, [r7, #8]
    aac0:	3b01      	subs	r3, #1
    aac2:	60bb      	str	r3, [r7, #8]
    aac4:	68bb      	ldr	r3, [r7, #8]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d007      	beq.n	aada <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    aaca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aace:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    aad0:	2110      	movs	r1, #16
    aad2:	6878      	ldr	r0, [r7, #4]
    aad4:	4b0b      	ldr	r3, [pc, #44]	; (ab04 <_i2c_m_enable_implementation+0x84>)
    aad6:	4798      	blx	r3
    aad8:	e002      	b.n	aae0 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    aada:	f06f 0305 	mvn.w	r3, #5
    aade:	e006      	b.n	aaee <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    aae0:	6878      	ldr	r0, [r7, #4]
    aae2:	4b09      	ldr	r3, [pc, #36]	; (ab08 <_i2c_m_enable_implementation+0x88>)
    aae4:	4798      	blx	r3
    aae6:	4603      	mov	r3, r0
    aae8:	2b01      	cmp	r3, #1
    aaea:	d1e2      	bne.n	aab2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    aaec:	2300      	movs	r3, #0
}
    aaee:	4618      	mov	r0, r3
    aaf0:	3710      	adds	r7, #16
    aaf2:	46bd      	mov	sp, r7
    aaf4:	bd80      	pop	{r7, pc}
    aaf6:	bf00      	nop
    aaf8:	00012c7c 	.word	0x00012c7c
    aafc:	00007361 	.word	0x00007361
    ab00:	00009f39 	.word	0x00009f39
    ab04:	0000a3bd 	.word	0x0000a3bd
    ab08:	0000a36d 	.word	0x0000a36d

0000ab0c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    ab0c:	b580      	push	{r7, lr}
    ab0e:	b084      	sub	sp, #16
    ab10:	af00      	add	r7, sp, #0
    ab12:	6078      	str	r0, [r7, #4]
    ab14:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    ab16:	6838      	ldr	r0, [r7, #0]
    ab18:	4b42      	ldr	r3, [pc, #264]	; (ac24 <_i2c_m_sync_init_impl+0x118>)
    ab1a:	4798      	blx	r3
    ab1c:	4603      	mov	r3, r0
    ab1e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    ab20:	2101      	movs	r1, #1
    ab22:	6838      	ldr	r0, [r7, #0]
    ab24:	4b40      	ldr	r3, [pc, #256]	; (ac28 <_i2c_m_sync_init_impl+0x11c>)
    ab26:	4798      	blx	r3
    ab28:	4603      	mov	r3, r0
    ab2a:	f083 0301 	eor.w	r3, r3, #1
    ab2e:	b2db      	uxtb	r3, r3
    ab30:	2b00      	cmp	r3, #0
    ab32:	d020      	beq.n	ab76 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    ab34:	7bfa      	ldrb	r2, [r7, #15]
    ab36:	493d      	ldr	r1, [pc, #244]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    ab38:	4613      	mov	r3, r2
    ab3a:	005b      	lsls	r3, r3, #1
    ab3c:	4413      	add	r3, r2
    ab3e:	00db      	lsls	r3, r3, #3
    ab40:	440b      	add	r3, r1
    ab42:	3304      	adds	r3, #4
    ab44:	681b      	ldr	r3, [r3, #0]
    ab46:	f003 031c 	and.w	r3, r3, #28
    ab4a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    ab4c:	2102      	movs	r1, #2
    ab4e:	6838      	ldr	r0, [r7, #0]
    ab50:	4b37      	ldr	r3, [pc, #220]	; (ac30 <_i2c_m_sync_init_impl+0x124>)
    ab52:	4798      	blx	r3
    ab54:	4603      	mov	r3, r0
    ab56:	2b00      	cmp	r3, #0
    ab58:	d006      	beq.n	ab68 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    ab5a:	6838      	ldr	r0, [r7, #0]
    ab5c:	4b35      	ldr	r3, [pc, #212]	; (ac34 <_i2c_m_sync_init_impl+0x128>)
    ab5e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    ab60:	2102      	movs	r1, #2
    ab62:	6838      	ldr	r0, [r7, #0]
    ab64:	4b34      	ldr	r3, [pc, #208]	; (ac38 <_i2c_m_sync_init_impl+0x12c>)
    ab66:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    ab68:	68bb      	ldr	r3, [r7, #8]
    ab6a:	f043 0301 	orr.w	r3, r3, #1
    ab6e:	4619      	mov	r1, r3
    ab70:	6838      	ldr	r0, [r7, #0]
    ab72:	4b32      	ldr	r3, [pc, #200]	; (ac3c <_i2c_m_sync_init_impl+0x130>)
    ab74:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    ab76:	2101      	movs	r1, #1
    ab78:	6838      	ldr	r0, [r7, #0]
    ab7a:	4b2f      	ldr	r3, [pc, #188]	; (ac38 <_i2c_m_sync_init_impl+0x12c>)
    ab7c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    ab7e:	7bfa      	ldrb	r2, [r7, #15]
    ab80:	492a      	ldr	r1, [pc, #168]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    ab82:	4613      	mov	r3, r2
    ab84:	005b      	lsls	r3, r3, #1
    ab86:	4413      	add	r3, r2
    ab88:	00db      	lsls	r3, r3, #3
    ab8a:	440b      	add	r3, r1
    ab8c:	3304      	adds	r3, #4
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	4619      	mov	r1, r3
    ab92:	6838      	ldr	r0, [r7, #0]
    ab94:	4b29      	ldr	r3, [pc, #164]	; (ac3c <_i2c_m_sync_init_impl+0x130>)
    ab96:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    ab98:	7bfa      	ldrb	r2, [r7, #15]
    ab9a:	4924      	ldr	r1, [pc, #144]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    ab9c:	4613      	mov	r3, r2
    ab9e:	005b      	lsls	r3, r3, #1
    aba0:	4413      	add	r3, r2
    aba2:	00db      	lsls	r3, r3, #3
    aba4:	440b      	add	r3, r1
    aba6:	3308      	adds	r3, #8
    aba8:	681b      	ldr	r3, [r3, #0]
    abaa:	4619      	mov	r1, r3
    abac:	6838      	ldr	r0, [r7, #0]
    abae:	4b24      	ldr	r3, [pc, #144]	; (ac40 <_i2c_m_sync_init_impl+0x134>)
    abb0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    abb2:	7bfa      	ldrb	r2, [r7, #15]
    abb4:	491d      	ldr	r1, [pc, #116]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    abb6:	4613      	mov	r3, r2
    abb8:	005b      	lsls	r3, r3, #1
    abba:	4413      	add	r3, r2
    abbc:	00db      	lsls	r3, r3, #3
    abbe:	440b      	add	r3, r1
    abc0:	330c      	adds	r3, #12
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	4619      	mov	r1, r3
    abc6:	6838      	ldr	r0, [r7, #0]
    abc8:	4b1e      	ldr	r3, [pc, #120]	; (ac44 <_i2c_m_sync_init_impl+0x138>)
    abca:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    abcc:	7bfa      	ldrb	r2, [r7, #15]
    abce:	4917      	ldr	r1, [pc, #92]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    abd0:	4613      	mov	r3, r2
    abd2:	005b      	lsls	r3, r3, #1
    abd4:	4413      	add	r3, r2
    abd6:	00db      	lsls	r3, r3, #3
    abd8:	440b      	add	r3, r1
    abda:	3304      	adds	r3, #4
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	0e1b      	lsrs	r3, r3, #24
    abe0:	b29b      	uxth	r3, r3
    abe2:	f003 0303 	and.w	r3, r3, #3
    abe6:	b29a      	uxth	r2, r3
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    abec:	687b      	ldr	r3, [r7, #4]
    abee:	899b      	ldrh	r3, [r3, #12]
    abf0:	2b01      	cmp	r3, #1
    abf2:	bf8c      	ite	hi
    abf4:	2301      	movhi	r3, #1
    abf6:	2300      	movls	r3, #0
    abf8:	b2db      	uxtb	r3, r3
    abfa:	4619      	mov	r1, r3
    abfc:	6838      	ldr	r0, [r7, #0]
    abfe:	4b12      	ldr	r3, [pc, #72]	; (ac48 <_i2c_m_sync_init_impl+0x13c>)
    ac00:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    ac02:	7bfa      	ldrb	r2, [r7, #15]
    ac04:	4909      	ldr	r1, [pc, #36]	; (ac2c <_i2c_m_sync_init_impl+0x120>)
    ac06:	4613      	mov	r3, r2
    ac08:	005b      	lsls	r3, r3, #1
    ac0a:	4413      	add	r3, r2
    ac0c:	00db      	lsls	r3, r3, #3
    ac0e:	440b      	add	r3, r1
    ac10:	3312      	adds	r3, #18
    ac12:	881a      	ldrh	r2, [r3, #0]
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    ac18:	2300      	movs	r3, #0
}
    ac1a:	4618      	mov	r0, r3
    ac1c:	3710      	adds	r7, #16
    ac1e:	46bd      	mov	sp, r7
    ac20:	bd80      	pop	{r7, pc}
    ac22:	bf00      	nop
    ac24:	0000a441 	.word	0x0000a441
    ac28:	00009e15 	.word	0x00009e15
    ac2c:	20000410 	.word	0x20000410
    ac30:	00009fb9 	.word	0x00009fb9
    ac34:	00009f61 	.word	0x00009f61
    ac38:	00009df1 	.word	0x00009df1
    ac3c:	00009fe9 	.word	0x00009fe9
    ac40:	0000a191 	.word	0x0000a191
    ac44:	0000a1d9 	.word	0x0000a1d9
    ac48:	0000a215 	.word	0x0000a215

0000ac4c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	b082      	sub	sp, #8
    ac50:	af00      	add	r7, sp, #0
    ac52:	6078      	str	r0, [r7, #4]
    ac54:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d004      	beq.n	ac66 <_spi_load_regs_master+0x1a>
    ac5c:	683b      	ldr	r3, [r7, #0]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d001      	beq.n	ac66 <_spi_load_regs_master+0x1a>
    ac62:	2301      	movs	r3, #1
    ac64:	e000      	b.n	ac68 <_spi_load_regs_master+0x1c>
    ac66:	2300      	movs	r3, #0
    ac68:	f003 0301 	and.w	r3, r3, #1
    ac6c:	b2db      	uxtb	r3, r3
    ac6e:	f640 1209 	movw	r2, #2313	; 0x909
    ac72:	4915      	ldr	r1, [pc, #84]	; (acc8 <_spi_load_regs_master+0x7c>)
    ac74:	4618      	mov	r0, r3
    ac76:	4b15      	ldr	r3, [pc, #84]	; (accc <_spi_load_regs_master+0x80>)
    ac78:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ac7a:	683b      	ldr	r3, [r7, #0]
    ac7c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ac7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ac82:	f023 0301 	bic.w	r3, r3, #1
    ac86:	4619      	mov	r1, r3
    ac88:	6878      	ldr	r0, [r7, #4]
    ac8a:	4b11      	ldr	r3, [pc, #68]	; (acd0 <_spi_load_regs_master+0x84>)
    ac8c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    ac8e:	683b      	ldr	r3, [r7, #0]
    ac90:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    ac92:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    ac96:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    ac9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ac9e:	4619      	mov	r1, r3
    aca0:	6878      	ldr	r0, [r7, #4]
    aca2:	4b0c      	ldr	r3, [pc, #48]	; (acd4 <_spi_load_regs_master+0x88>)
    aca4:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    aca6:	683b      	ldr	r3, [r7, #0]
    aca8:	7b1b      	ldrb	r3, [r3, #12]
    acaa:	4619      	mov	r1, r3
    acac:	6878      	ldr	r0, [r7, #4]
    acae:	4b0a      	ldr	r3, [pc, #40]	; (acd8 <_spi_load_regs_master+0x8c>)
    acb0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    acb2:	683b      	ldr	r3, [r7, #0]
    acb4:	7b5b      	ldrb	r3, [r3, #13]
    acb6:	4619      	mov	r1, r3
    acb8:	6878      	ldr	r0, [r7, #4]
    acba:	4b08      	ldr	r3, [pc, #32]	; (acdc <_spi_load_regs_master+0x90>)
    acbc:	4798      	blx	r3
}
    acbe:	bf00      	nop
    acc0:	3708      	adds	r7, #8
    acc2:	46bd      	mov	sp, r7
    acc4:	bd80      	pop	{r7, pc}
    acc6:	bf00      	nop
    acc8:	00012c7c 	.word	0x00012c7c
    accc:	00007361 	.word	0x00007361
    acd0:	0000a09d 	.word	0x0000a09d
    acd4:	0000a1b5 	.word	0x0000a1b5
    acd8:	0000a1f5 	.word	0x0000a1f5
    acdc:	0000a32d 	.word	0x0000a32d

0000ace0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    ace0:	b580      	push	{r7, lr}
    ace2:	b082      	sub	sp, #8
    ace4:	af00      	add	r7, sp, #0
    ace6:	6078      	str	r0, [r7, #4]
    ace8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    acea:	687b      	ldr	r3, [r7, #4]
    acec:	2b00      	cmp	r3, #0
    acee:	d004      	beq.n	acfa <_spi_load_regs_slave+0x1a>
    acf0:	683b      	ldr	r3, [r7, #0]
    acf2:	2b00      	cmp	r3, #0
    acf4:	d001      	beq.n	acfa <_spi_load_regs_slave+0x1a>
    acf6:	2301      	movs	r3, #1
    acf8:	e000      	b.n	acfc <_spi_load_regs_slave+0x1c>
    acfa:	2300      	movs	r3, #0
    acfc:	f003 0301 	and.w	r3, r3, #1
    ad00:	b2db      	uxtb	r3, r3
    ad02:	f640 121d 	movw	r2, #2333	; 0x91d
    ad06:	491a      	ldr	r1, [pc, #104]	; (ad70 <_spi_load_regs_slave+0x90>)
    ad08:	4618      	mov	r0, r3
    ad0a:	4b1a      	ldr	r3, [pc, #104]	; (ad74 <_spi_load_regs_slave+0x94>)
    ad0c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ad0e:	683b      	ldr	r3, [r7, #0]
    ad10:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ad12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ad16:	f023 0301 	bic.w	r3, r3, #1
    ad1a:	4619      	mov	r1, r3
    ad1c:	6878      	ldr	r0, [r7, #4]
    ad1e:	4b16      	ldr	r3, [pc, #88]	; (ad78 <_spi_load_regs_slave+0x98>)
    ad20:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    ad22:	683b      	ldr	r3, [r7, #0]
    ad24:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    ad26:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    ad2a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    ad2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ad32:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    ad36:	4619      	mov	r1, r3
    ad38:	6878      	ldr	r0, [r7, #4]
    ad3a:	4b10      	ldr	r3, [pc, #64]	; (ad7c <_spi_load_regs_slave+0x9c>)
    ad3c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    ad3e:	683b      	ldr	r3, [r7, #0]
    ad40:	689b      	ldr	r3, [r3, #8]
    ad42:	4619      	mov	r1, r3
    ad44:	6878      	ldr	r0, [r7, #4]
    ad46:	4b0e      	ldr	r3, [pc, #56]	; (ad80 <_spi_load_regs_slave+0xa0>)
    ad48:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ad4a:	683b      	ldr	r3, [r7, #0]
    ad4c:	7b5b      	ldrb	r3, [r3, #13]
    ad4e:	4619      	mov	r1, r3
    ad50:	6878      	ldr	r0, [r7, #4]
    ad52:	4b0c      	ldr	r3, [pc, #48]	; (ad84 <_spi_load_regs_slave+0xa4>)
    ad54:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    ad56:	bf00      	nop
    ad58:	f04f 31ff 	mov.w	r1, #4294967295
    ad5c:	6878      	ldr	r0, [r7, #4]
    ad5e:	4b0a      	ldr	r3, [pc, #40]	; (ad88 <_spi_load_regs_slave+0xa8>)
    ad60:	4798      	blx	r3
    ad62:	4603      	mov	r3, r0
    ad64:	2b00      	cmp	r3, #0
    ad66:	d1f7      	bne.n	ad58 <_spi_load_regs_slave+0x78>
		;
}
    ad68:	bf00      	nop
    ad6a:	3708      	adds	r7, #8
    ad6c:	46bd      	mov	sp, r7
    ad6e:	bd80      	pop	{r7, pc}
    ad70:	00012c7c 	.word	0x00012c7c
    ad74:	00007361 	.word	0x00007361
    ad78:	0000a09d 	.word	0x0000a09d
    ad7c:	0000a1b5 	.word	0x0000a1b5
    ad80:	0000a299 	.word	0x0000a299
    ad84:	0000a32d 	.word	0x0000a32d
    ad88:	00009e61 	.word	0x00009e61

0000ad8c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b084      	sub	sp, #16
    ad90:	af00      	add	r7, sp, #0
    ad92:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    ad94:	687b      	ldr	r3, [r7, #4]
    ad96:	4618      	mov	r0, r3
    ad98:	4b11      	ldr	r3, [pc, #68]	; (ade0 <_spi_get_regs+0x54>)
    ad9a:	4798      	blx	r3
    ad9c:	4603      	mov	r3, r0
    ad9e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    ada0:	2300      	movs	r3, #0
    ada2:	73fb      	strb	r3, [r7, #15]
    ada4:	e014      	b.n	add0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    ada6:	7bfa      	ldrb	r2, [r7, #15]
    ada8:	490e      	ldr	r1, [pc, #56]	; (ade4 <_spi_get_regs+0x58>)
    adaa:	4613      	mov	r3, r2
    adac:	011b      	lsls	r3, r3, #4
    adae:	4413      	add	r3, r2
    adb0:	440b      	add	r3, r1
    adb2:	3310      	adds	r3, #16
    adb4:	781b      	ldrb	r3, [r3, #0]
    adb6:	7bba      	ldrb	r2, [r7, #14]
    adb8:	429a      	cmp	r2, r3
    adba:	d106      	bne.n	adca <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    adbc:	7bfa      	ldrb	r2, [r7, #15]
    adbe:	4613      	mov	r3, r2
    adc0:	011b      	lsls	r3, r3, #4
    adc2:	4413      	add	r3, r2
    adc4:	4a07      	ldr	r2, [pc, #28]	; (ade4 <_spi_get_regs+0x58>)
    adc6:	4413      	add	r3, r2
    adc8:	e006      	b.n	add8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    adca:	7bfb      	ldrb	r3, [r7, #15]
    adcc:	3301      	adds	r3, #1
    adce:	73fb      	strb	r3, [r7, #15]
    add0:	7bfb      	ldrb	r3, [r7, #15]
    add2:	2b01      	cmp	r3, #1
    add4:	d9e7      	bls.n	ada6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    add6:	2300      	movs	r3, #0
}
    add8:	4618      	mov	r0, r3
    adda:	3710      	adds	r7, #16
    addc:	46bd      	mov	sp, r7
    adde:	bd80      	pop	{r7, pc}
    ade0:	0000a3e5 	.word	0x0000a3e5
    ade4:	00012cb8 	.word	0x00012cb8

0000ade8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    ade8:	b580      	push	{r7, lr}
    adea:	b084      	sub	sp, #16
    adec:	af00      	add	r7, sp, #0
    adee:	6078      	str	r0, [r7, #4]
    adf0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    adf2:	683b      	ldr	r3, [r7, #0]
    adf4:	4618      	mov	r0, r3
    adf6:	4b35      	ldr	r3, [pc, #212]	; (aecc <_spi_m_sync_init+0xe4>)
    adf8:	4798      	blx	r3
    adfa:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	2b00      	cmp	r3, #0
    ae00:	d004      	beq.n	ae0c <_spi_m_sync_init+0x24>
    ae02:	683b      	ldr	r3, [r7, #0]
    ae04:	2b00      	cmp	r3, #0
    ae06:	d001      	beq.n	ae0c <_spi_m_sync_init+0x24>
    ae08:	2301      	movs	r3, #1
    ae0a:	e000      	b.n	ae0e <_spi_m_sync_init+0x26>
    ae0c:	2300      	movs	r3, #0
    ae0e:	f003 0301 	and.w	r3, r3, #1
    ae12:	b2db      	uxtb	r3, r3
    ae14:	f640 123f 	movw	r2, #2367	; 0x93f
    ae18:	492d      	ldr	r1, [pc, #180]	; (aed0 <_spi_m_sync_init+0xe8>)
    ae1a:	4618      	mov	r0, r3
    ae1c:	4b2d      	ldr	r3, [pc, #180]	; (aed4 <_spi_m_sync_init+0xec>)
    ae1e:	4798      	blx	r3

	if (regs == NULL) {
    ae20:	68fb      	ldr	r3, [r7, #12]
    ae22:	2b00      	cmp	r3, #0
    ae24:	d102      	bne.n	ae2c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    ae26:	f06f 030c 	mvn.w	r3, #12
    ae2a:	e04a      	b.n	aec2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    ae2c:	2101      	movs	r1, #1
    ae2e:	6838      	ldr	r0, [r7, #0]
    ae30:	4b29      	ldr	r3, [pc, #164]	; (aed8 <_spi_m_sync_init+0xf0>)
    ae32:	4798      	blx	r3
    ae34:	4603      	mov	r3, r0
    ae36:	f083 0301 	eor.w	r3, r3, #1
    ae3a:	b2db      	uxtb	r3, r3
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d019      	beq.n	ae74 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    ae40:	68fb      	ldr	r3, [r7, #12]
    ae42:	681b      	ldr	r3, [r3, #0]
    ae44:	f003 031c 	and.w	r3, r3, #28
    ae48:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    ae4a:	2102      	movs	r1, #2
    ae4c:	6838      	ldr	r0, [r7, #0]
    ae4e:	4b23      	ldr	r3, [pc, #140]	; (aedc <_spi_m_sync_init+0xf4>)
    ae50:	4798      	blx	r3
    ae52:	4603      	mov	r3, r0
    ae54:	2b00      	cmp	r3, #0
    ae56:	d006      	beq.n	ae66 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    ae58:	6838      	ldr	r0, [r7, #0]
    ae5a:	4b21      	ldr	r3, [pc, #132]	; (aee0 <_spi_m_sync_init+0xf8>)
    ae5c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    ae5e:	2102      	movs	r1, #2
    ae60:	6838      	ldr	r0, [r7, #0]
    ae62:	4b20      	ldr	r3, [pc, #128]	; (aee4 <_spi_m_sync_init+0xfc>)
    ae64:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    ae66:	68bb      	ldr	r3, [r7, #8]
    ae68:	f043 0301 	orr.w	r3, r3, #1
    ae6c:	4619      	mov	r1, r3
    ae6e:	6838      	ldr	r0, [r7, #0]
    ae70:	4b1d      	ldr	r3, [pc, #116]	; (aee8 <_spi_m_sync_init+0x100>)
    ae72:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    ae74:	2101      	movs	r1, #1
    ae76:	6838      	ldr	r0, [r7, #0]
    ae78:	4b1a      	ldr	r3, [pc, #104]	; (aee4 <_spi_m_sync_init+0xfc>)
    ae7a:	4798      	blx	r3

	dev->prvt = hw;
    ae7c:	687b      	ldr	r3, [r7, #4]
    ae7e:	683a      	ldr	r2, [r7, #0]
    ae80:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    ae82:	68fb      	ldr	r3, [r7, #12]
    ae84:	681b      	ldr	r3, [r3, #0]
    ae86:	f003 031c 	and.w	r3, r3, #28
    ae8a:	2b08      	cmp	r3, #8
    ae8c:	d104      	bne.n	ae98 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    ae8e:	68f9      	ldr	r1, [r7, #12]
    ae90:	6838      	ldr	r0, [r7, #0]
    ae92:	4b16      	ldr	r3, [pc, #88]	; (aeec <_spi_m_sync_init+0x104>)
    ae94:	4798      	blx	r3
    ae96:	e003      	b.n	aea0 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    ae98:	68f9      	ldr	r1, [r7, #12]
    ae9a:	6838      	ldr	r0, [r7, #0]
    ae9c:	4b14      	ldr	r3, [pc, #80]	; (aef0 <_spi_m_sync_init+0x108>)
    ae9e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	685b      	ldr	r3, [r3, #4]
    aea4:	f003 0307 	and.w	r3, r3, #7
    aea8:	2b00      	cmp	r3, #0
    aeaa:	d101      	bne.n	aeb0 <_spi_m_sync_init+0xc8>
    aeac:	2201      	movs	r2, #1
    aeae:	e000      	b.n	aeb2 <_spi_m_sync_init+0xca>
    aeb0:	2202      	movs	r2, #2
    aeb2:	687b      	ldr	r3, [r7, #4]
    aeb4:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    aeb6:	68fb      	ldr	r3, [r7, #12]
    aeb8:	89db      	ldrh	r3, [r3, #14]
    aeba:	b29a      	uxth	r2, r3
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    aec0:	2300      	movs	r3, #0
}
    aec2:	4618      	mov	r0, r3
    aec4:	3710      	adds	r7, #16
    aec6:	46bd      	mov	sp, r7
    aec8:	bd80      	pop	{r7, pc}
    aeca:	bf00      	nop
    aecc:	0000ad8d 	.word	0x0000ad8d
    aed0:	00012c7c 	.word	0x00012c7c
    aed4:	00007361 	.word	0x00007361
    aed8:	00009e61 	.word	0x00009e61
    aedc:	0000a06d 	.word	0x0000a06d
    aee0:	0000a045 	.word	0x0000a045
    aee4:	00009e3d 	.word	0x00009e3d
    aee8:	0000a09d 	.word	0x0000a09d
    aeec:	0000ace1 	.word	0x0000ace1
    aef0:	0000ac4d 	.word	0x0000ac4d

0000aef4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b082      	sub	sp, #8
    aef8:	af00      	add	r7, sp, #0
    aefa:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    aefc:	bf00      	nop
    aefe:	2103      	movs	r1, #3
    af00:	6878      	ldr	r0, [r7, #4]
    af02:	4b06      	ldr	r3, [pc, #24]	; (af1c <_spi_wait_bus_idle+0x28>)
    af04:	4798      	blx	r3
    af06:	4603      	mov	r3, r0
    af08:	2b00      	cmp	r3, #0
    af0a:	d0f8      	beq.n	aefe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    af0c:	2103      	movs	r1, #3
    af0e:	6878      	ldr	r0, [r7, #4]
    af10:	4b03      	ldr	r3, [pc, #12]	; (af20 <_spi_wait_bus_idle+0x2c>)
    af12:	4798      	blx	r3
}
    af14:	bf00      	nop
    af16:	3708      	adds	r7, #8
    af18:	46bd      	mov	sp, r7
    af1a:	bd80      	pop	{r7, pc}
    af1c:	00009ed7 	.word	0x00009ed7
    af20:	00009f19 	.word	0x00009f19

0000af24 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    af24:	b580      	push	{r7, lr}
    af26:	b086      	sub	sp, #24
    af28:	af00      	add	r7, sp, #0
    af2a:	60f8      	str	r0, [r7, #12]
    af2c:	60b9      	str	r1, [r7, #8]
    af2e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    af30:	68bb      	ldr	r3, [r7, #8]
    af32:	f003 0304 	and.w	r3, r3, #4
    af36:	2b00      	cmp	r3, #0
    af38:	d101      	bne.n	af3e <_spi_rx_check_and_receive+0x1a>
		return false;
    af3a:	2300      	movs	r3, #0
    af3c:	e022      	b.n	af84 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    af3e:	68f8      	ldr	r0, [r7, #12]
    af40:	4b12      	ldr	r3, [pc, #72]	; (af8c <_spi_rx_check_and_receive+0x68>)
    af42:	4798      	blx	r3
    af44:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    af46:	687b      	ldr	r3, [r7, #4]
    af48:	685b      	ldr	r3, [r3, #4]
    af4a:	2b00      	cmp	r3, #0
    af4c:	d014      	beq.n	af78 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    af4e:	687b      	ldr	r3, [r7, #4]
    af50:	685b      	ldr	r3, [r3, #4]
    af52:	1c59      	adds	r1, r3, #1
    af54:	687a      	ldr	r2, [r7, #4]
    af56:	6051      	str	r1, [r2, #4]
    af58:	697a      	ldr	r2, [r7, #20]
    af5a:	b2d2      	uxtb	r2, r2
    af5c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    af5e:	687b      	ldr	r3, [r7, #4]
    af60:	7c1b      	ldrb	r3, [r3, #16]
    af62:	2b01      	cmp	r3, #1
    af64:	d908      	bls.n	af78 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    af66:	687b      	ldr	r3, [r7, #4]
    af68:	685b      	ldr	r3, [r3, #4]
    af6a:	1c59      	adds	r1, r3, #1
    af6c:	687a      	ldr	r2, [r7, #4]
    af6e:	6051      	str	r1, [r2, #4]
    af70:	697a      	ldr	r2, [r7, #20]
    af72:	0a12      	lsrs	r2, r2, #8
    af74:	b2d2      	uxtb	r2, r2
    af76:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	68db      	ldr	r3, [r3, #12]
    af7c:	1c5a      	adds	r2, r3, #1
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	60da      	str	r2, [r3, #12]

	return true;
    af82:	2301      	movs	r3, #1
}
    af84:	4618      	mov	r0, r3
    af86:	3718      	adds	r7, #24
    af88:	46bd      	mov	sp, r7
    af8a:	bd80      	pop	{r7, pc}
    af8c:	0000a315 	.word	0x0000a315

0000af90 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    af90:	b580      	push	{r7, lr}
    af92:	b086      	sub	sp, #24
    af94:	af00      	add	r7, sp, #0
    af96:	60f8      	str	r0, [r7, #12]
    af98:	60b9      	str	r1, [r7, #8]
    af9a:	607a      	str	r2, [r7, #4]
    af9c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    af9e:	68bb      	ldr	r3, [r7, #8]
    afa0:	f003 0301 	and.w	r3, r3, #1
    afa4:	2b00      	cmp	r3, #0
    afa6:	d028      	beq.n	affa <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    afa8:	687b      	ldr	r3, [r7, #4]
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	2b00      	cmp	r3, #0
    afae:	d018      	beq.n	afe2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	681b      	ldr	r3, [r3, #0]
    afb4:	1c59      	adds	r1, r3, #1
    afb6:	687a      	ldr	r2, [r7, #4]
    afb8:	6011      	str	r1, [r2, #0]
    afba:	781b      	ldrb	r3, [r3, #0]
    afbc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    afbe:	687b      	ldr	r3, [r7, #4]
    afc0:	7c1b      	ldrb	r3, [r3, #16]
    afc2:	2b01      	cmp	r3, #1
    afc4:	d90f      	bls.n	afe6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    afc6:	687b      	ldr	r3, [r7, #4]
    afc8:	681b      	ldr	r3, [r3, #0]
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	021b      	lsls	r3, r3, #8
    afce:	461a      	mov	r2, r3
    afd0:	697b      	ldr	r3, [r7, #20]
    afd2:	4313      	orrs	r3, r2
    afd4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    afd6:	687b      	ldr	r3, [r7, #4]
    afd8:	681b      	ldr	r3, [r3, #0]
    afda:	1c5a      	adds	r2, r3, #1
    afdc:	687b      	ldr	r3, [r7, #4]
    afde:	601a      	str	r2, [r3, #0]
    afe0:	e001      	b.n	afe6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    afe2:	887b      	ldrh	r3, [r7, #2]
    afe4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	689b      	ldr	r3, [r3, #8]
    afea:	1c5a      	adds	r2, r3, #1
    afec:	687b      	ldr	r3, [r7, #4]
    afee:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    aff0:	6979      	ldr	r1, [r7, #20]
    aff2:	68f8      	ldr	r0, [r7, #12]
    aff4:	4b03      	ldr	r3, [pc, #12]	; (b004 <_spi_tx_check_and_send+0x74>)
    aff6:	4798      	blx	r3
    aff8:	e000      	b.n	affc <_spi_tx_check_and_send+0x6c>
		return;
    affa:	bf00      	nop
}
    affc:	3718      	adds	r7, #24
    affe:	46bd      	mov	sp, r7
    b000:	bd80      	pop	{r7, pc}
    b002:	bf00      	nop
    b004:	0000a2f9 	.word	0x0000a2f9

0000b008 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    b008:	b580      	push	{r7, lr}
    b00a:	b082      	sub	sp, #8
    b00c:	af00      	add	r7, sp, #0
    b00e:	6078      	str	r0, [r7, #4]
    b010:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    b012:	687b      	ldr	r3, [r7, #4]
    b014:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b018:	2b00      	cmp	r3, #0
    b01a:	d00b      	beq.n	b034 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    b01c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b020:	6838      	ldr	r0, [r7, #0]
    b022:	4b07      	ldr	r3, [pc, #28]	; (b040 <_spi_err_check+0x38>)
    b024:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    b026:	2180      	movs	r1, #128	; 0x80
    b028:	6838      	ldr	r0, [r7, #0]
    b02a:	4b06      	ldr	r3, [pc, #24]	; (b044 <_spi_err_check+0x3c>)
    b02c:	4798      	blx	r3
		return ERR_OVERFLOW;
    b02e:	f06f 0312 	mvn.w	r3, #18
    b032:	e000      	b.n	b036 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    b034:	2300      	movs	r3, #0
}
    b036:	4618      	mov	r0, r3
    b038:	3708      	adds	r7, #8
    b03a:	46bd      	mov	sp, r7
    b03c:	bd80      	pop	{r7, pc}
    b03e:	bf00      	nop
    b040:	0000a34d 	.word	0x0000a34d
    b044:	00009f19 	.word	0x00009f19

0000b048 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    b048:	b590      	push	{r4, r7, lr}
    b04a:	b08b      	sub	sp, #44	; 0x2c
    b04c:	af00      	add	r7, sp, #0
    b04e:	6078      	str	r0, [r7, #4]
    b050:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	681b      	ldr	r3, [r3, #0]
    b056:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    b058:	2300      	movs	r3, #0
    b05a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    b05c:	683b      	ldr	r3, [r7, #0]
    b05e:	681b      	ldr	r3, [r3, #0]
    b060:	60bb      	str	r3, [r7, #8]
    b062:	683b      	ldr	r3, [r7, #0]
    b064:	685b      	ldr	r3, [r3, #4]
    b066:	60fb      	str	r3, [r7, #12]
    b068:	2300      	movs	r3, #0
    b06a:	613b      	str	r3, [r7, #16]
    b06c:	2300      	movs	r3, #0
    b06e:	617b      	str	r3, [r7, #20]
    b070:	687b      	ldr	r3, [r7, #4]
    b072:	791b      	ldrb	r3, [r3, #4]
    b074:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    b076:	687b      	ldr	r3, [r7, #4]
    b078:	2b00      	cmp	r3, #0
    b07a:	d004      	beq.n	b086 <_spi_m_sync_trans+0x3e>
    b07c:	6a3b      	ldr	r3, [r7, #32]
    b07e:	2b00      	cmp	r3, #0
    b080:	d001      	beq.n	b086 <_spi_m_sync_trans+0x3e>
    b082:	2301      	movs	r3, #1
    b084:	e000      	b.n	b088 <_spi_m_sync_trans+0x40>
    b086:	2300      	movs	r3, #0
    b088:	f003 0301 	and.w	r3, r3, #1
    b08c:	b2db      	uxtb	r3, r3
    b08e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    b092:	492b      	ldr	r1, [pc, #172]	; (b140 <_spi_m_sync_trans+0xf8>)
    b094:	4618      	mov	r0, r3
    b096:	4b2b      	ldr	r3, [pc, #172]	; (b144 <_spi_m_sync_trans+0xfc>)
    b098:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    b09a:	2107      	movs	r1, #7
    b09c:	6a38      	ldr	r0, [r7, #32]
    b09e:	4b2a      	ldr	r3, [pc, #168]	; (b148 <_spi_m_sync_trans+0x100>)
    b0a0:	4798      	blx	r3
    b0a2:	4603      	mov	r3, r0
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d002      	beq.n	b0ae <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    b0a8:	f06f 0303 	mvn.w	r3, #3
    b0ac:	e043      	b.n	b136 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    b0ae:	6a38      	ldr	r0, [r7, #32]
    b0b0:	4b26      	ldr	r3, [pc, #152]	; (b14c <_spi_m_sync_trans+0x104>)
    b0b2:	4798      	blx	r3
    b0b4:	4603      	mov	r3, r0
    b0b6:	f083 0301 	eor.w	r3, r3, #1
    b0ba:	b2db      	uxtb	r3, r3
    b0bc:	2b00      	cmp	r3, #0
    b0be:	d002      	beq.n	b0c6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    b0c0:	f06f 0313 	mvn.w	r3, #19
    b0c4:	e037      	b.n	b136 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    b0c6:	6a38      	ldr	r0, [r7, #32]
    b0c8:	4b21      	ldr	r3, [pc, #132]	; (b150 <_spi_m_sync_trans+0x108>)
    b0ca:	4798      	blx	r3
    b0cc:	4603      	mov	r3, r0
    b0ce:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    b0d0:	f107 0308 	add.w	r3, r7, #8
    b0d4:	461a      	mov	r2, r3
    b0d6:	69f9      	ldr	r1, [r7, #28]
    b0d8:	6a38      	ldr	r0, [r7, #32]
    b0da:	4b1e      	ldr	r3, [pc, #120]	; (b154 <_spi_m_sync_trans+0x10c>)
    b0dc:	4798      	blx	r3
    b0de:	4603      	mov	r3, r0
    b0e0:	f083 0301 	eor.w	r3, r3, #1
    b0e4:	b2db      	uxtb	r3, r3
    b0e6:	2b00      	cmp	r3, #0
    b0e8:	d00b      	beq.n	b102 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    b0ea:	697a      	ldr	r2, [r7, #20]
    b0ec:	693b      	ldr	r3, [r7, #16]
    b0ee:	429a      	cmp	r2, r3
    b0f0:	d307      	bcc.n	b102 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	88db      	ldrh	r3, [r3, #6]
    b0f6:	f107 0208 	add.w	r2, r7, #8
    b0fa:	69f9      	ldr	r1, [r7, #28]
    b0fc:	6a38      	ldr	r0, [r7, #32]
    b0fe:	4c16      	ldr	r4, [pc, #88]	; (b158 <_spi_m_sync_trans+0x110>)
    b100:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    b102:	6a39      	ldr	r1, [r7, #32]
    b104:	69f8      	ldr	r0, [r7, #28]
    b106:	4b15      	ldr	r3, [pc, #84]	; (b15c <_spi_m_sync_trans+0x114>)
    b108:	4798      	blx	r3
    b10a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b10e:	2b00      	cmp	r3, #0
    b110:	db0c      	blt.n	b12c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    b112:	693a      	ldr	r2, [r7, #16]
    b114:	683b      	ldr	r3, [r7, #0]
    b116:	689b      	ldr	r3, [r3, #8]
    b118:	429a      	cmp	r2, r3
    b11a:	d3d4      	bcc.n	b0c6 <_spi_m_sync_trans+0x7e>
    b11c:	697a      	ldr	r2, [r7, #20]
    b11e:	683b      	ldr	r3, [r7, #0]
    b120:	689b      	ldr	r3, [r3, #8]
    b122:	429a      	cmp	r2, r3
    b124:	d3cf      	bcc.n	b0c6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    b126:	693b      	ldr	r3, [r7, #16]
    b128:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    b12a:	e000      	b.n	b12e <_spi_m_sync_trans+0xe6>
			break;
    b12c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    b12e:	6a38      	ldr	r0, [r7, #32]
    b130:	4b0b      	ldr	r3, [pc, #44]	; (b160 <_spi_m_sync_trans+0x118>)
    b132:	4798      	blx	r3

	return rc;
    b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b136:	4618      	mov	r0, r3
    b138:	372c      	adds	r7, #44	; 0x2c
    b13a:	46bd      	mov	sp, r7
    b13c:	bd90      	pop	{r4, r7, pc}
    b13e:	bf00      	nop
    b140:	00012c7c 	.word	0x00012c7c
    b144:	00007361 	.word	0x00007361
    b148:	00009e61 	.word	0x00009e61
    b14c:	0000a00d 	.word	0x0000a00d
    b150:	00009eff 	.word	0x00009eff
    b154:	0000af25 	.word	0x0000af25
    b158:	0000af91 	.word	0x0000af91
    b15c:	0000b009 	.word	0x0000b009
    b160:	0000aef5 	.word	0x0000aef5

0000b164 <__NVIC_EnableIRQ>:
{
    b164:	b480      	push	{r7}
    b166:	b083      	sub	sp, #12
    b168:	af00      	add	r7, sp, #0
    b16a:	4603      	mov	r3, r0
    b16c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b16e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b172:	2b00      	cmp	r3, #0
    b174:	db0b      	blt.n	b18e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b176:	4909      	ldr	r1, [pc, #36]	; (b19c <__NVIC_EnableIRQ+0x38>)
    b178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b17c:	095b      	lsrs	r3, r3, #5
    b17e:	88fa      	ldrh	r2, [r7, #6]
    b180:	f002 021f 	and.w	r2, r2, #31
    b184:	2001      	movs	r0, #1
    b186:	fa00 f202 	lsl.w	r2, r0, r2
    b18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b18e:	bf00      	nop
    b190:	370c      	adds	r7, #12
    b192:	46bd      	mov	sp, r7
    b194:	f85d 7b04 	ldr.w	r7, [sp], #4
    b198:	4770      	bx	lr
    b19a:	bf00      	nop
    b19c:	e000e100 	.word	0xe000e100

0000b1a0 <__NVIC_DisableIRQ>:
{
    b1a0:	b480      	push	{r7}
    b1a2:	b083      	sub	sp, #12
    b1a4:	af00      	add	r7, sp, #0
    b1a6:	4603      	mov	r3, r0
    b1a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b1aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	db10      	blt.n	b1d4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b1b2:	490b      	ldr	r1, [pc, #44]	; (b1e0 <__NVIC_DisableIRQ+0x40>)
    b1b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b1b8:	095b      	lsrs	r3, r3, #5
    b1ba:	88fa      	ldrh	r2, [r7, #6]
    b1bc:	f002 021f 	and.w	r2, r2, #31
    b1c0:	2001      	movs	r0, #1
    b1c2:	fa00 f202 	lsl.w	r2, r0, r2
    b1c6:	3320      	adds	r3, #32
    b1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    b1cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b1d0:	f3bf 8f6f 	isb	sy
}
    b1d4:	bf00      	nop
    b1d6:	370c      	adds	r7, #12
    b1d8:	46bd      	mov	sp, r7
    b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1de:	4770      	bx	lr
    b1e0:	e000e100 	.word	0xe000e100

0000b1e4 <__NVIC_ClearPendingIRQ>:
{
    b1e4:	b480      	push	{r7}
    b1e6:	b083      	sub	sp, #12
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	4603      	mov	r3, r0
    b1ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b1ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	db0c      	blt.n	b210 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b1f6:	4909      	ldr	r1, [pc, #36]	; (b21c <__NVIC_ClearPendingIRQ+0x38>)
    b1f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b1fc:	095b      	lsrs	r3, r3, #5
    b1fe:	88fa      	ldrh	r2, [r7, #6]
    b200:	f002 021f 	and.w	r2, r2, #31
    b204:	2001      	movs	r0, #1
    b206:	fa00 f202 	lsl.w	r2, r0, r2
    b20a:	3360      	adds	r3, #96	; 0x60
    b20c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b210:	bf00      	nop
    b212:	370c      	adds	r7, #12
    b214:	46bd      	mov	sp, r7
    b216:	f85d 7b04 	ldr.w	r7, [sp], #4
    b21a:	4770      	bx	lr
    b21c:	e000e100 	.word	0xe000e100

0000b220 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    b220:	b480      	push	{r7}
    b222:	b083      	sub	sp, #12
    b224:	af00      	add	r7, sp, #0
    b226:	6078      	str	r0, [r7, #4]
    b228:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    b22a:	bf00      	nop
    b22c:	687b      	ldr	r3, [r7, #4]
    b22e:	689a      	ldr	r2, [r3, #8]
    b230:	683b      	ldr	r3, [r7, #0]
    b232:	4013      	ands	r3, r2
    b234:	2b00      	cmp	r3, #0
    b236:	d1f9      	bne.n	b22c <hri_tcc_wait_for_sync+0xc>
	};
}
    b238:	bf00      	nop
    b23a:	370c      	adds	r7, #12
    b23c:	46bd      	mov	sp, r7
    b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b242:	4770      	bx	lr

0000b244 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    b244:	b480      	push	{r7}
    b246:	b083      	sub	sp, #12
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
    b24c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	689a      	ldr	r2, [r3, #8]
    b252:	683b      	ldr	r3, [r7, #0]
    b254:	4013      	ands	r3, r2
    b256:	2b00      	cmp	r3, #0
    b258:	bf14      	ite	ne
    b25a:	2301      	movne	r3, #1
    b25c:	2300      	moveq	r3, #0
    b25e:	b2db      	uxtb	r3, r3
}
    b260:	4618      	mov	r0, r3
    b262:	370c      	adds	r7, #12
    b264:	46bd      	mov	sp, r7
    b266:	f85d 7b04 	ldr.w	r7, [sp], #4
    b26a:	4770      	bx	lr

0000b26c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    b26c:	b480      	push	{r7}
    b26e:	b083      	sub	sp, #12
    b270:	af00      	add	r7, sp, #0
    b272:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b278:	f003 0301 	and.w	r3, r3, #1
    b27c:	2b00      	cmp	r3, #0
    b27e:	bf14      	ite	ne
    b280:	2301      	movne	r3, #1
    b282:	2300      	moveq	r3, #0
    b284:	b2db      	uxtb	r3, r3
}
    b286:	4618      	mov	r0, r3
    b288:	370c      	adds	r7, #12
    b28a:	46bd      	mov	sp, r7
    b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b290:	4770      	bx	lr

0000b292 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    b292:	b480      	push	{r7}
    b294:	b083      	sub	sp, #12
    b296:	af00      	add	r7, sp, #0
    b298:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    b29a:	687b      	ldr	r3, [r7, #4]
    b29c:	2201      	movs	r2, #1
    b29e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    b2a0:	bf00      	nop
    b2a2:	370c      	adds	r7, #12
    b2a4:	46bd      	mov	sp, r7
    b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2aa:	4770      	bx	lr

0000b2ac <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    b2ac:	b480      	push	{r7}
    b2ae:	b083      	sub	sp, #12
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	6078      	str	r0, [r7, #4]
    b2b4:	460b      	mov	r3, r1
    b2b6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	78fa      	ldrb	r2, [r7, #3]
    b2bc:	715a      	strb	r2, [r3, #5]
}
    b2be:	bf00      	nop
    b2c0:	370c      	adds	r7, #12
    b2c2:	46bd      	mov	sp, r7
    b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c8:	4770      	bx	lr

0000b2ca <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    b2ca:	b480      	push	{r7}
    b2cc:	b083      	sub	sp, #12
    b2ce:	af00      	add	r7, sp, #0
    b2d0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	2201      	movs	r2, #1
    b2d6:	629a      	str	r2, [r3, #40]	; 0x28
}
    b2d8:	bf00      	nop
    b2da:	370c      	adds	r7, #12
    b2dc:	46bd      	mov	sp, r7
    b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2e2:	4770      	bx	lr

0000b2e4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    b2e4:	b580      	push	{r7, lr}
    b2e6:	b082      	sub	sp, #8
    b2e8:	af00      	add	r7, sp, #0
    b2ea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	681b      	ldr	r3, [r3, #0]
    b2f0:	f043 0201 	orr.w	r2, r3, #1
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    b2f8:	2101      	movs	r1, #1
    b2fa:	6878      	ldr	r0, [r7, #4]
    b2fc:	4b02      	ldr	r3, [pc, #8]	; (b308 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    b2fe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b300:	bf00      	nop
    b302:	3708      	adds	r7, #8
    b304:	46bd      	mov	sp, r7
    b306:	bd80      	pop	{r7, pc}
    b308:	0000b221 	.word	0x0000b221

0000b30c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b30c:	b580      	push	{r7, lr}
    b30e:	b082      	sub	sp, #8
    b310:	af00      	add	r7, sp, #0
    b312:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    b314:	687b      	ldr	r3, [r7, #4]
    b316:	681b      	ldr	r3, [r3, #0]
    b318:	f043 0202 	orr.w	r2, r3, #2
    b31c:	687b      	ldr	r3, [r7, #4]
    b31e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b320:	2103      	movs	r1, #3
    b322:	6878      	ldr	r0, [r7, #4]
    b324:	4b02      	ldr	r3, [pc, #8]	; (b330 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    b326:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b328:	bf00      	nop
    b32a:	3708      	adds	r7, #8
    b32c:	46bd      	mov	sp, r7
    b32e:	bd80      	pop	{r7, pc}
    b330:	0000b221 	.word	0x0000b221

0000b334 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b334:	b580      	push	{r7, lr}
    b336:	b084      	sub	sp, #16
    b338:	af00      	add	r7, sp, #0
    b33a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b33c:	2103      	movs	r1, #3
    b33e:	6878      	ldr	r0, [r7, #4]
    b340:	4b09      	ldr	r3, [pc, #36]	; (b368 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    b342:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    b344:	687b      	ldr	r3, [r7, #4]
    b346:	681b      	ldr	r3, [r3, #0]
    b348:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    b34a:	68fb      	ldr	r3, [r7, #12]
    b34c:	085b      	lsrs	r3, r3, #1
    b34e:	f003 0301 	and.w	r3, r3, #1
    b352:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b354:	68fb      	ldr	r3, [r7, #12]
    b356:	2b00      	cmp	r3, #0
    b358:	bf14      	ite	ne
    b35a:	2301      	movne	r3, #1
    b35c:	2300      	moveq	r3, #0
    b35e:	b2db      	uxtb	r3, r3
}
    b360:	4618      	mov	r0, r3
    b362:	3710      	adds	r7, #16
    b364:	46bd      	mov	sp, r7
    b366:	bd80      	pop	{r7, pc}
    b368:	0000b221 	.word	0x0000b221

0000b36c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b36c:	b580      	push	{r7, lr}
    b36e:	b082      	sub	sp, #8
    b370:	af00      	add	r7, sp, #0
    b372:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	681b      	ldr	r3, [r3, #0]
    b378:	f023 0202 	bic.w	r2, r3, #2
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b380:	2103      	movs	r1, #3
    b382:	6878      	ldr	r0, [r7, #4]
    b384:	4b02      	ldr	r3, [pc, #8]	; (b390 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    b386:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b388:	bf00      	nop
    b38a:	3708      	adds	r7, #8
    b38c:	46bd      	mov	sp, r7
    b38e:	bd80      	pop	{r7, pc}
    b390:	0000b221 	.word	0x0000b221

0000b394 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    b394:	b580      	push	{r7, lr}
    b396:	b084      	sub	sp, #16
    b398:	af00      	add	r7, sp, #0
    b39a:	6078      	str	r0, [r7, #4]
    b39c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b39e:	2103      	movs	r1, #3
    b3a0:	6878      	ldr	r0, [r7, #4]
    b3a2:	4b07      	ldr	r3, [pc, #28]	; (b3c0 <hri_tcc_get_CTRLA_reg+0x2c>)
    b3a4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	681b      	ldr	r3, [r3, #0]
    b3aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b3ac:	68fa      	ldr	r2, [r7, #12]
    b3ae:	683b      	ldr	r3, [r7, #0]
    b3b0:	4013      	ands	r3, r2
    b3b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    b3b4:	68fb      	ldr	r3, [r7, #12]
}
    b3b6:	4618      	mov	r0, r3
    b3b8:	3710      	adds	r7, #16
    b3ba:	46bd      	mov	sp, r7
    b3bc:	bd80      	pop	{r7, pc}
    b3be:	bf00      	nop
    b3c0:	0000b221 	.word	0x0000b221

0000b3c4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b082      	sub	sp, #8
    b3c8:	af00      	add	r7, sp, #0
    b3ca:	6078      	str	r0, [r7, #4]
    b3cc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    b3ce:	687b      	ldr	r3, [r7, #4]
    b3d0:	683a      	ldr	r2, [r7, #0]
    b3d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    b3d4:	2103      	movs	r1, #3
    b3d6:	6878      	ldr	r0, [r7, #4]
    b3d8:	4b02      	ldr	r3, [pc, #8]	; (b3e4 <hri_tcc_write_CTRLA_reg+0x20>)
    b3da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b3dc:	bf00      	nop
    b3de:	3708      	adds	r7, #8
    b3e0:	46bd      	mov	sp, r7
    b3e2:	bd80      	pop	{r7, pc}
    b3e4:	0000b221 	.word	0x0000b221

0000b3e8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    b3e8:	b480      	push	{r7}
    b3ea:	b083      	sub	sp, #12
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	6078      	str	r0, [r7, #4]
    b3f0:	460b      	mov	r3, r1
    b3f2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	78fa      	ldrb	r2, [r7, #3]
    b3f8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    b3fa:	bf00      	nop
    b3fc:	370c      	adds	r7, #12
    b3fe:	46bd      	mov	sp, r7
    b400:	f85d 7b04 	ldr.w	r7, [sp], #4
    b404:	4770      	bx	lr

0000b406 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    b406:	b480      	push	{r7}
    b408:	b083      	sub	sp, #12
    b40a:	af00      	add	r7, sp, #0
    b40c:	6078      	str	r0, [r7, #4]
    b40e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    b410:	687b      	ldr	r3, [r7, #4]
    b412:	683a      	ldr	r2, [r7, #0]
    b414:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    b416:	bf00      	nop
    b418:	370c      	adds	r7, #12
    b41a:	46bd      	mov	sp, r7
    b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b420:	4770      	bx	lr
	...

0000b424 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    b424:	b580      	push	{r7, lr}
    b426:	b082      	sub	sp, #8
    b428:	af00      	add	r7, sp, #0
    b42a:	6078      	str	r0, [r7, #4]
    b42c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	683a      	ldr	r2, [r7, #0]
    b432:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    b434:	2180      	movs	r1, #128	; 0x80
    b436:	6878      	ldr	r0, [r7, #4]
    b438:	4b02      	ldr	r3, [pc, #8]	; (b444 <hri_tcc_write_PER_reg+0x20>)
    b43a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    b43c:	bf00      	nop
    b43e:	3708      	adds	r7, #8
    b440:	46bd      	mov	sp, r7
    b442:	bd80      	pop	{r7, pc}
    b444:	0000b221 	.word	0x0000b221

0000b448 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    b448:	b580      	push	{r7, lr}
    b44a:	b082      	sub	sp, #8
    b44c:	af00      	add	r7, sp, #0
    b44e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    b450:	2180      	movs	r1, #128	; 0x80
    b452:	6878      	ldr	r0, [r7, #4]
    b454:	4b03      	ldr	r3, [pc, #12]	; (b464 <hri_tcc_read_PER_reg+0x1c>)
    b456:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    b458:	687b      	ldr	r3, [r7, #4]
    b45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    b45c:	4618      	mov	r0, r3
    b45e:	3708      	adds	r7, #8
    b460:	46bd      	mov	sp, r7
    b462:	bd80      	pop	{r7, pc}
    b464:	0000b221 	.word	0x0000b221

0000b468 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    b468:	b480      	push	{r7}
    b46a:	b083      	sub	sp, #12
    b46c:	af00      	add	r7, sp, #0
    b46e:	6078      	str	r0, [r7, #4]
    b470:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	4a0c      	ldr	r2, [pc, #48]	; (b4a8 <_tcc_init_irq_param+0x40>)
    b476:	4293      	cmp	r3, r2
    b478:	d102      	bne.n	b480 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    b47a:	4a0c      	ldr	r2, [pc, #48]	; (b4ac <_tcc_init_irq_param+0x44>)
    b47c:	683b      	ldr	r3, [r7, #0]
    b47e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	4a0b      	ldr	r2, [pc, #44]	; (b4b0 <_tcc_init_irq_param+0x48>)
    b484:	4293      	cmp	r3, r2
    b486:	d102      	bne.n	b48e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    b488:	4a0a      	ldr	r2, [pc, #40]	; (b4b4 <_tcc_init_irq_param+0x4c>)
    b48a:	683b      	ldr	r3, [r7, #0]
    b48c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    b48e:	687b      	ldr	r3, [r7, #4]
    b490:	4a09      	ldr	r2, [pc, #36]	; (b4b8 <_tcc_init_irq_param+0x50>)
    b492:	4293      	cmp	r3, r2
    b494:	d102      	bne.n	b49c <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    b496:	4a09      	ldr	r2, [pc, #36]	; (b4bc <_tcc_init_irq_param+0x54>)
    b498:	683b      	ldr	r3, [r7, #0]
    b49a:	6013      	str	r3, [r2, #0]
	}
}
    b49c:	bf00      	nop
    b49e:	370c      	adds	r7, #12
    b4a0:	46bd      	mov	sp, r7
    b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4a6:	4770      	bx	lr
    b4a8:	41016000 	.word	0x41016000
    b4ac:	20001bcc 	.word	0x20001bcc
    b4b0:	41018000 	.word	0x41018000
    b4b4:	20001bd0 	.word	0x20001bd0
    b4b8:	42000c00 	.word	0x42000c00
    b4bc:	20001bd4 	.word	0x20001bd4

0000b4c0 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    b4c0:	b580      	push	{r7, lr}
    b4c2:	b084      	sub	sp, #16
    b4c4:	af00      	add	r7, sp, #0
    b4c6:	6078      	str	r0, [r7, #4]
    b4c8:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b4ca:	6838      	ldr	r0, [r7, #0]
    b4cc:	4b33      	ldr	r3, [pc, #204]	; (b59c <_tcc_timer_init+0xdc>)
    b4ce:	4798      	blx	r3
    b4d0:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    b4d2:	68fb      	ldr	r3, [r7, #12]
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d102      	bne.n	b4de <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    b4d8:	f06f 0309 	mvn.w	r3, #9
    b4dc:	e05a      	b.n	b594 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    b4de:	687b      	ldr	r3, [r7, #4]
    b4e0:	683a      	ldr	r2, [r7, #0]
    b4e2:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    b4e4:	2101      	movs	r1, #1
    b4e6:	6838      	ldr	r0, [r7, #0]
    b4e8:	4b2d      	ldr	r3, [pc, #180]	; (b5a0 <_tcc_timer_init+0xe0>)
    b4ea:	4798      	blx	r3
    b4ec:	4603      	mov	r3, r0
    b4ee:	f083 0301 	eor.w	r3, r3, #1
    b4f2:	b2db      	uxtb	r3, r3
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d011      	beq.n	b51c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    b4f8:	2102      	movs	r1, #2
    b4fa:	6838      	ldr	r0, [r7, #0]
    b4fc:	4b29      	ldr	r3, [pc, #164]	; (b5a4 <_tcc_timer_init+0xe4>)
    b4fe:	4798      	blx	r3
    b500:	4603      	mov	r3, r0
    b502:	2b00      	cmp	r3, #0
    b504:	d006      	beq.n	b514 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    b506:	6838      	ldr	r0, [r7, #0]
    b508:	4b27      	ldr	r3, [pc, #156]	; (b5a8 <_tcc_timer_init+0xe8>)
    b50a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    b50c:	2102      	movs	r1, #2
    b50e:	6838      	ldr	r0, [r7, #0]
    b510:	4b26      	ldr	r3, [pc, #152]	; (b5ac <_tcc_timer_init+0xec>)
    b512:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    b514:	2101      	movs	r1, #1
    b516:	6838      	ldr	r0, [r7, #0]
    b518:	4b25      	ldr	r3, [pc, #148]	; (b5b0 <_tcc_timer_init+0xf0>)
    b51a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    b51c:	2101      	movs	r1, #1
    b51e:	6838      	ldr	r0, [r7, #0]
    b520:	4b22      	ldr	r3, [pc, #136]	; (b5ac <_tcc_timer_init+0xec>)
    b522:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    b524:	68fb      	ldr	r3, [r7, #12]
    b526:	689b      	ldr	r3, [r3, #8]
    b528:	4619      	mov	r1, r3
    b52a:	6838      	ldr	r0, [r7, #0]
    b52c:	4b20      	ldr	r3, [pc, #128]	; (b5b0 <_tcc_timer_init+0xf0>)
    b52e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    b530:	68fb      	ldr	r3, [r7, #12]
    b532:	7b1b      	ldrb	r3, [r3, #12]
    b534:	4619      	mov	r1, r3
    b536:	6838      	ldr	r0, [r7, #0]
    b538:	4b1e      	ldr	r3, [pc, #120]	; (b5b4 <_tcc_timer_init+0xf4>)
    b53a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    b53c:	68fb      	ldr	r3, [r7, #12]
    b53e:	7b5b      	ldrb	r3, [r3, #13]
    b540:	4619      	mov	r1, r3
    b542:	6838      	ldr	r0, [r7, #0]
    b544:	4b1c      	ldr	r3, [pc, #112]	; (b5b8 <_tcc_timer_init+0xf8>)
    b546:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    b548:	68fb      	ldr	r3, [r7, #12]
    b54a:	691b      	ldr	r3, [r3, #16]
    b54c:	4619      	mov	r1, r3
    b54e:	6838      	ldr	r0, [r7, #0]
    b550:	4b1a      	ldr	r3, [pc, #104]	; (b5bc <_tcc_timer_init+0xfc>)
    b552:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    b554:	68fb      	ldr	r3, [r7, #12]
    b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b558:	4619      	mov	r1, r3
    b55a:	6838      	ldr	r0, [r7, #0]
    b55c:	4b18      	ldr	r3, [pc, #96]	; (b5c0 <_tcc_timer_init+0x100>)
    b55e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    b560:	6838      	ldr	r0, [r7, #0]
    b562:	4b18      	ldr	r3, [pc, #96]	; (b5c4 <_tcc_timer_init+0x104>)
    b564:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    b566:	6879      	ldr	r1, [r7, #4]
    b568:	6838      	ldr	r0, [r7, #0]
    b56a:	4b17      	ldr	r3, [pc, #92]	; (b5c8 <_tcc_timer_init+0x108>)
    b56c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    b56e:	68fb      	ldr	r3, [r7, #12]
    b570:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b574:	4618      	mov	r0, r3
    b576:	4b15      	ldr	r3, [pc, #84]	; (b5cc <_tcc_timer_init+0x10c>)
    b578:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    b57a:	68fb      	ldr	r3, [r7, #12]
    b57c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b580:	4618      	mov	r0, r3
    b582:	4b13      	ldr	r3, [pc, #76]	; (b5d0 <_tcc_timer_init+0x110>)
    b584:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    b586:	68fb      	ldr	r3, [r7, #12]
    b588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b58c:	4618      	mov	r0, r3
    b58e:	4b11      	ldr	r3, [pc, #68]	; (b5d4 <_tcc_timer_init+0x114>)
    b590:	4798      	blx	r3

	return ERR_NONE;
    b592:	2300      	movs	r3, #0
}
    b594:	4618      	mov	r0, r3
    b596:	3710      	adds	r7, #16
    b598:	46bd      	mov	sp, r7
    b59a:	bd80      	pop	{r7, pc}
    b59c:	0000b7a5 	.word	0x0000b7a5
    b5a0:	0000b245 	.word	0x0000b245
    b5a4:	0000b395 	.word	0x0000b395
    b5a8:	0000b36d 	.word	0x0000b36d
    b5ac:	0000b221 	.word	0x0000b221
    b5b0:	0000b3c5 	.word	0x0000b3c5
    b5b4:	0000b2ad 	.word	0x0000b2ad
    b5b8:	0000b3e9 	.word	0x0000b3e9
    b5bc:	0000b407 	.word	0x0000b407
    b5c0:	0000b425 	.word	0x0000b425
    b5c4:	0000b2cb 	.word	0x0000b2cb
    b5c8:	0000b469 	.word	0x0000b469
    b5cc:	0000b1a1 	.word	0x0000b1a1
    b5d0:	0000b1e5 	.word	0x0000b1e5
    b5d4:	0000b165 	.word	0x0000b165

0000b5d8 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	b084      	sub	sp, #16
    b5dc:	af00      	add	r7, sp, #0
    b5de:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	68db      	ldr	r3, [r3, #12]
    b5e4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b5e6:	68f8      	ldr	r0, [r7, #12]
    b5e8:	4b0a      	ldr	r3, [pc, #40]	; (b614 <_tcc_timer_deinit+0x3c>)
    b5ea:	4798      	blx	r3
    b5ec:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    b5ee:	68bb      	ldr	r3, [r7, #8]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d00b      	beq.n	b60c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    b5f4:	68bb      	ldr	r3, [r7, #8]
    b5f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b5fa:	4618      	mov	r0, r3
    b5fc:	4b06      	ldr	r3, [pc, #24]	; (b618 <_tcc_timer_deinit+0x40>)
    b5fe:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    b600:	68f8      	ldr	r0, [r7, #12]
    b602:	4b06      	ldr	r3, [pc, #24]	; (b61c <_tcc_timer_deinit+0x44>)
    b604:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    b606:	68f8      	ldr	r0, [r7, #12]
    b608:	4b05      	ldr	r3, [pc, #20]	; (b620 <_tcc_timer_deinit+0x48>)
    b60a:	4798      	blx	r3
	}
}
    b60c:	bf00      	nop
    b60e:	3710      	adds	r7, #16
    b610:	46bd      	mov	sp, r7
    b612:	bd80      	pop	{r7, pc}
    b614:	0000b7a5 	.word	0x0000b7a5
    b618:	0000b1a1 	.word	0x0000b1a1
    b61c:	0000b36d 	.word	0x0000b36d
    b620:	0000b2e5 	.word	0x0000b2e5

0000b624 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    b624:	b580      	push	{r7, lr}
    b626:	b082      	sub	sp, #8
    b628:	af00      	add	r7, sp, #0
    b62a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	68db      	ldr	r3, [r3, #12]
    b630:	4618      	mov	r0, r3
    b632:	4b03      	ldr	r3, [pc, #12]	; (b640 <_tcc_timer_start+0x1c>)
    b634:	4798      	blx	r3
}
    b636:	bf00      	nop
    b638:	3708      	adds	r7, #8
    b63a:	46bd      	mov	sp, r7
    b63c:	bd80      	pop	{r7, pc}
    b63e:	bf00      	nop
    b640:	0000b30d 	.word	0x0000b30d

0000b644 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    b644:	b580      	push	{r7, lr}
    b646:	b082      	sub	sp, #8
    b648:	af00      	add	r7, sp, #0
    b64a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    b64c:	687b      	ldr	r3, [r7, #4]
    b64e:	68db      	ldr	r3, [r3, #12]
    b650:	4618      	mov	r0, r3
    b652:	4b03      	ldr	r3, [pc, #12]	; (b660 <_tcc_timer_stop+0x1c>)
    b654:	4798      	blx	r3
}
    b656:	bf00      	nop
    b658:	3708      	adds	r7, #8
    b65a:	46bd      	mov	sp, r7
    b65c:	bd80      	pop	{r7, pc}
    b65e:	bf00      	nop
    b660:	0000b36d 	.word	0x0000b36d

0000b664 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    b664:	b580      	push	{r7, lr}
    b666:	b082      	sub	sp, #8
    b668:	af00      	add	r7, sp, #0
    b66a:	6078      	str	r0, [r7, #4]
    b66c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    b66e:	687b      	ldr	r3, [r7, #4]
    b670:	68db      	ldr	r3, [r3, #12]
    b672:	6839      	ldr	r1, [r7, #0]
    b674:	4618      	mov	r0, r3
    b676:	4b03      	ldr	r3, [pc, #12]	; (b684 <_tcc_timer_set_period+0x20>)
    b678:	4798      	blx	r3
}
    b67a:	bf00      	nop
    b67c:	3708      	adds	r7, #8
    b67e:	46bd      	mov	sp, r7
    b680:	bd80      	pop	{r7, pc}
    b682:	bf00      	nop
    b684:	0000b425 	.word	0x0000b425

0000b688 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    b688:	b580      	push	{r7, lr}
    b68a:	b082      	sub	sp, #8
    b68c:	af00      	add	r7, sp, #0
    b68e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	68db      	ldr	r3, [r3, #12]
    b694:	4618      	mov	r0, r3
    b696:	4b03      	ldr	r3, [pc, #12]	; (b6a4 <_tcc_timer_get_period+0x1c>)
    b698:	4798      	blx	r3
    b69a:	4603      	mov	r3, r0
}
    b69c:	4618      	mov	r0, r3
    b69e:	3708      	adds	r7, #8
    b6a0:	46bd      	mov	sp, r7
    b6a2:	bd80      	pop	{r7, pc}
    b6a4:	0000b449 	.word	0x0000b449

0000b6a8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    b6a8:	b580      	push	{r7, lr}
    b6aa:	b082      	sub	sp, #8
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	68db      	ldr	r3, [r3, #12]
    b6b4:	4618      	mov	r0, r3
    b6b6:	4b03      	ldr	r3, [pc, #12]	; (b6c4 <_tcc_timer_is_started+0x1c>)
    b6b8:	4798      	blx	r3
    b6ba:	4603      	mov	r3, r0
}
    b6bc:	4618      	mov	r0, r3
    b6be:	3708      	adds	r7, #8
    b6c0:	46bd      	mov	sp, r7
    b6c2:	bd80      	pop	{r7, pc}
    b6c4:	0000b335 	.word	0x0000b335

0000b6c8 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    b6c8:	b480      	push	{r7}
    b6ca:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    b6cc:	4b02      	ldr	r3, [pc, #8]	; (b6d8 <_tcc_get_timer+0x10>)
}
    b6ce:	4618      	mov	r0, r3
    b6d0:	46bd      	mov	sp, r7
    b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6d6:	4770      	bx	lr
    b6d8:	200004e8 	.word	0x200004e8

0000b6dc <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    b6dc:	b580      	push	{r7, lr}
    b6de:	b084      	sub	sp, #16
    b6e0:	af00      	add	r7, sp, #0
    b6e2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    b6e4:	687b      	ldr	r3, [r7, #4]
    b6e6:	68db      	ldr	r3, [r3, #12]
    b6e8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    b6ea:	68f8      	ldr	r0, [r7, #12]
    b6ec:	4b08      	ldr	r3, [pc, #32]	; (b710 <_tcc_timer_set_irq+0x34>)
    b6ee:	4798      	blx	r3
    b6f0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    b6f2:	68bb      	ldr	r3, [r7, #8]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	d006      	beq.n	b706 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    b6f8:	68bb      	ldr	r3, [r7, #8]
    b6fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    b6fe:	b2db      	uxtb	r3, r3
    b700:	4618      	mov	r0, r3
    b702:	4b04      	ldr	r3, [pc, #16]	; (b714 <_tcc_timer_set_irq+0x38>)
    b704:	4798      	blx	r3
	}
}
    b706:	bf00      	nop
    b708:	3710      	adds	r7, #16
    b70a:	46bd      	mov	sp, r7
    b70c:	bd80      	pop	{r7, pc}
    b70e:	bf00      	nop
    b710:	0000b7a5 	.word	0x0000b7a5
    b714:	000081f9 	.word	0x000081f9

0000b718 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    b718:	b580      	push	{r7, lr}
    b71a:	b084      	sub	sp, #16
    b71c:	af00      	add	r7, sp, #0
    b71e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    b720:	687b      	ldr	r3, [r7, #4]
    b722:	68db      	ldr	r3, [r3, #12]
    b724:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    b726:	68f8      	ldr	r0, [r7, #12]
    b728:	4b07      	ldr	r3, [pc, #28]	; (b748 <tcc_interrupt_handler+0x30>)
    b72a:	4798      	blx	r3
    b72c:	4603      	mov	r3, r0
    b72e:	2b00      	cmp	r3, #0
    b730:	d006      	beq.n	b740 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    b732:	68f8      	ldr	r0, [r7, #12]
    b734:	4b05      	ldr	r3, [pc, #20]	; (b74c <tcc_interrupt_handler+0x34>)
    b736:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	681b      	ldr	r3, [r3, #0]
    b73c:	6878      	ldr	r0, [r7, #4]
    b73e:	4798      	blx	r3
	}
}
    b740:	bf00      	nop
    b742:	3710      	adds	r7, #16
    b744:	46bd      	mov	sp, r7
    b746:	bd80      	pop	{r7, pc}
    b748:	0000b26d 	.word	0x0000b26d
    b74c:	0000b293 	.word	0x0000b293

0000b750 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    b750:	b580      	push	{r7, lr}
    b752:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    b754:	4b03      	ldr	r3, [pc, #12]	; (b764 <TCC0_0_Handler+0x14>)
    b756:	681b      	ldr	r3, [r3, #0]
    b758:	4618      	mov	r0, r3
    b75a:	4b03      	ldr	r3, [pc, #12]	; (b768 <TCC0_0_Handler+0x18>)
    b75c:	4798      	blx	r3
}
    b75e:	bf00      	nop
    b760:	bd80      	pop	{r7, pc}
    b762:	bf00      	nop
    b764:	20001bcc 	.word	0x20001bcc
    b768:	0000b719 	.word	0x0000b719

0000b76c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    b76c:	b580      	push	{r7, lr}
    b76e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    b770:	4b03      	ldr	r3, [pc, #12]	; (b780 <TCC1_0_Handler+0x14>)
    b772:	681b      	ldr	r3, [r3, #0]
    b774:	4618      	mov	r0, r3
    b776:	4b03      	ldr	r3, [pc, #12]	; (b784 <TCC1_0_Handler+0x18>)
    b778:	4798      	blx	r3
}
    b77a:	bf00      	nop
    b77c:	bd80      	pop	{r7, pc}
    b77e:	bf00      	nop
    b780:	20001bd0 	.word	0x20001bd0
    b784:	0000b719 	.word	0x0000b719

0000b788 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    b788:	b580      	push	{r7, lr}
    b78a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    b78c:	4b03      	ldr	r3, [pc, #12]	; (b79c <TCC2_0_Handler+0x14>)
    b78e:	681b      	ldr	r3, [r3, #0]
    b790:	4618      	mov	r0, r3
    b792:	4b03      	ldr	r3, [pc, #12]	; (b7a0 <TCC2_0_Handler+0x18>)
    b794:	4798      	blx	r3
}
    b796:	bf00      	nop
    b798:	bd80      	pop	{r7, pc}
    b79a:	bf00      	nop
    b79c:	20001bd4 	.word	0x20001bd4
    b7a0:	0000b719 	.word	0x0000b719

0000b7a4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    b7a4:	b480      	push	{r7}
    b7a6:	b085      	sub	sp, #20
    b7a8:	af00      	add	r7, sp, #0
    b7aa:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    b7ac:	2300      	movs	r3, #0
    b7ae:	73fb      	strb	r3, [r7, #15]
    b7b0:	e015      	b.n	b7de <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    b7b2:	7bfa      	ldrb	r2, [r7, #15]
    b7b4:	490f      	ldr	r1, [pc, #60]	; (b7f4 <_get_tcc_cfg+0x50>)
    b7b6:	4613      	mov	r3, r2
    b7b8:	005b      	lsls	r3, r3, #1
    b7ba:	4413      	add	r3, r2
    b7bc:	011b      	lsls	r3, r3, #4
    b7be:	440b      	add	r3, r1
    b7c0:	681a      	ldr	r2, [r3, #0]
    b7c2:	687b      	ldr	r3, [r7, #4]
    b7c4:	429a      	cmp	r2, r3
    b7c6:	d107      	bne.n	b7d8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    b7c8:	7bfa      	ldrb	r2, [r7, #15]
    b7ca:	4613      	mov	r3, r2
    b7cc:	005b      	lsls	r3, r3, #1
    b7ce:	4413      	add	r3, r2
    b7d0:	011b      	lsls	r3, r3, #4
    b7d2:	4a08      	ldr	r2, [pc, #32]	; (b7f4 <_get_tcc_cfg+0x50>)
    b7d4:	4413      	add	r3, r2
    b7d6:	e006      	b.n	b7e6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    b7d8:	7bfb      	ldrb	r3, [r7, #15]
    b7da:	3301      	adds	r3, #1
    b7dc:	73fb      	strb	r3, [r7, #15]
    b7de:	7bfb      	ldrb	r3, [r7, #15]
    b7e0:	2b02      	cmp	r3, #2
    b7e2:	d9e6      	bls.n	b7b2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    b7e4:	2300      	movs	r3, #0
}
    b7e6:	4618      	mov	r0, r3
    b7e8:	3714      	adds	r7, #20
    b7ea:	46bd      	mov	sp, r7
    b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7f0:	4770      	bx	lr
    b7f2:	bf00      	nop
    b7f4:	20000458 	.word	0x20000458

0000b7f8 <__NVIC_EnableIRQ>:
{
    b7f8:	b480      	push	{r7}
    b7fa:	b083      	sub	sp, #12
    b7fc:	af00      	add	r7, sp, #0
    b7fe:	4603      	mov	r3, r0
    b800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b806:	2b00      	cmp	r3, #0
    b808:	db0b      	blt.n	b822 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b80a:	4909      	ldr	r1, [pc, #36]	; (b830 <__NVIC_EnableIRQ+0x38>)
    b80c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b810:	095b      	lsrs	r3, r3, #5
    b812:	88fa      	ldrh	r2, [r7, #6]
    b814:	f002 021f 	and.w	r2, r2, #31
    b818:	2001      	movs	r0, #1
    b81a:	fa00 f202 	lsl.w	r2, r0, r2
    b81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b822:	bf00      	nop
    b824:	370c      	adds	r7, #12
    b826:	46bd      	mov	sp, r7
    b828:	f85d 7b04 	ldr.w	r7, [sp], #4
    b82c:	4770      	bx	lr
    b82e:	bf00      	nop
    b830:	e000e100 	.word	0xe000e100

0000b834 <__NVIC_DisableIRQ>:
{
    b834:	b480      	push	{r7}
    b836:	b083      	sub	sp, #12
    b838:	af00      	add	r7, sp, #0
    b83a:	4603      	mov	r3, r0
    b83c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b83e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b842:	2b00      	cmp	r3, #0
    b844:	db10      	blt.n	b868 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b846:	490b      	ldr	r1, [pc, #44]	; (b874 <__NVIC_DisableIRQ+0x40>)
    b848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b84c:	095b      	lsrs	r3, r3, #5
    b84e:	88fa      	ldrh	r2, [r7, #6]
    b850:	f002 021f 	and.w	r2, r2, #31
    b854:	2001      	movs	r0, #1
    b856:	fa00 f202 	lsl.w	r2, r0, r2
    b85a:	3320      	adds	r3, #32
    b85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    b860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b864:	f3bf 8f6f 	isb	sy
}
    b868:	bf00      	nop
    b86a:	370c      	adds	r7, #12
    b86c:	46bd      	mov	sp, r7
    b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b872:	4770      	bx	lr
    b874:	e000e100 	.word	0xe000e100

0000b878 <__NVIC_ClearPendingIRQ>:
{
    b878:	b480      	push	{r7}
    b87a:	b083      	sub	sp, #12
    b87c:	af00      	add	r7, sp, #0
    b87e:	4603      	mov	r3, r0
    b880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    b882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b886:	2b00      	cmp	r3, #0
    b888:	db0c      	blt.n	b8a4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b88a:	4909      	ldr	r1, [pc, #36]	; (b8b0 <__NVIC_ClearPendingIRQ+0x38>)
    b88c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    b890:	095b      	lsrs	r3, r3, #5
    b892:	88fa      	ldrh	r2, [r7, #6]
    b894:	f002 021f 	and.w	r2, r2, #31
    b898:	2001      	movs	r0, #1
    b89a:	fa00 f202 	lsl.w	r2, r0, r2
    b89e:	3360      	adds	r3, #96	; 0x60
    b8a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8a4:	bf00      	nop
    b8a6:	370c      	adds	r7, #12
    b8a8:	46bd      	mov	sp, r7
    b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ae:	4770      	bx	lr
    b8b0:	e000e100 	.word	0xe000e100

0000b8b4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b8b4:	b480      	push	{r7}
    b8b6:	b083      	sub	sp, #12
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	6078      	str	r0, [r7, #4]
    b8bc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    b8be:	bf00      	nop
    b8c0:	687b      	ldr	r3, [r7, #4]
    b8c2:	691a      	ldr	r2, [r3, #16]
    b8c4:	683b      	ldr	r3, [r7, #0]
    b8c6:	4013      	ands	r3, r2
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d1f9      	bne.n	b8c0 <hri_tc_wait_for_sync+0xc>
	};
}
    b8cc:	bf00      	nop
    b8ce:	370c      	adds	r7, #12
    b8d0:	46bd      	mov	sp, r7
    b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8d6:	4770      	bx	lr

0000b8d8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    b8d8:	b480      	push	{r7}
    b8da:	b083      	sub	sp, #12
    b8dc:	af00      	add	r7, sp, #0
    b8de:	6078      	str	r0, [r7, #4]
    b8e0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    b8e2:	687b      	ldr	r3, [r7, #4]
    b8e4:	691a      	ldr	r2, [r3, #16]
    b8e6:	683b      	ldr	r3, [r7, #0]
    b8e8:	4013      	ands	r3, r2
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	bf14      	ite	ne
    b8ee:	2301      	movne	r3, #1
    b8f0:	2300      	moveq	r3, #0
    b8f2:	b2db      	uxtb	r3, r3
}
    b8f4:	4618      	mov	r0, r3
    b8f6:	370c      	adds	r7, #12
    b8f8:	46bd      	mov	sp, r7
    b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8fe:	4770      	bx	lr

0000b900 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    b900:	b480      	push	{r7}
    b902:	b083      	sub	sp, #12
    b904:	af00      	add	r7, sp, #0
    b906:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    b908:	687b      	ldr	r3, [r7, #4]
    b90a:	7a9b      	ldrb	r3, [r3, #10]
    b90c:	b2db      	uxtb	r3, r3
    b90e:	f003 0301 	and.w	r3, r3, #1
    b912:	2b00      	cmp	r3, #0
    b914:	bf14      	ite	ne
    b916:	2301      	movne	r3, #1
    b918:	2300      	moveq	r3, #0
    b91a:	b2db      	uxtb	r3, r3
}
    b91c:	4618      	mov	r0, r3
    b91e:	370c      	adds	r7, #12
    b920:	46bd      	mov	sp, r7
    b922:	f85d 7b04 	ldr.w	r7, [sp], #4
    b926:	4770      	bx	lr

0000b928 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    b928:	b480      	push	{r7}
    b92a:	b083      	sub	sp, #12
    b92c:	af00      	add	r7, sp, #0
    b92e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	2201      	movs	r2, #1
    b934:	729a      	strb	r2, [r3, #10]
}
    b936:	bf00      	nop
    b938:	370c      	adds	r7, #12
    b93a:	46bd      	mov	sp, r7
    b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b940:	4770      	bx	lr

0000b942 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    b942:	b480      	push	{r7}
    b944:	b083      	sub	sp, #12
    b946:	af00      	add	r7, sp, #0
    b948:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    b94a:	687b      	ldr	r3, [r7, #4]
    b94c:	2202      	movs	r2, #2
    b94e:	729a      	strb	r2, [r3, #10]
}
    b950:	bf00      	nop
    b952:	370c      	adds	r7, #12
    b954:	46bd      	mov	sp, r7
    b956:	f85d 7b04 	ldr.w	r7, [sp], #4
    b95a:	4770      	bx	lr

0000b95c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    b95c:	b480      	push	{r7}
    b95e:	b083      	sub	sp, #12
    b960:	af00      	add	r7, sp, #0
    b962:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    b964:	687b      	ldr	r3, [r7, #4]
    b966:	2201      	movs	r2, #1
    b968:	725a      	strb	r2, [r3, #9]
}
    b96a:	bf00      	nop
    b96c:	370c      	adds	r7, #12
    b96e:	46bd      	mov	sp, r7
    b970:	f85d 7b04 	ldr.w	r7, [sp], #4
    b974:	4770      	bx	lr

0000b976 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    b976:	b480      	push	{r7}
    b978:	b083      	sub	sp, #12
    b97a:	af00      	add	r7, sp, #0
    b97c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    b97e:	687b      	ldr	r3, [r7, #4]
    b980:	7a5b      	ldrb	r3, [r3, #9]
    b982:	b2db      	uxtb	r3, r3
    b984:	085b      	lsrs	r3, r3, #1
    b986:	f003 0301 	and.w	r3, r3, #1
    b98a:	2b00      	cmp	r3, #0
    b98c:	bf14      	ite	ne
    b98e:	2301      	movne	r3, #1
    b990:	2300      	moveq	r3, #0
    b992:	b2db      	uxtb	r3, r3
}
    b994:	4618      	mov	r0, r3
    b996:	370c      	adds	r7, #12
    b998:	46bd      	mov	sp, r7
    b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b99e:	4770      	bx	lr

0000b9a0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    b9a0:	b580      	push	{r7, lr}
    b9a2:	b082      	sub	sp, #8
    b9a4:	af00      	add	r7, sp, #0
    b9a6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    b9a8:	687b      	ldr	r3, [r7, #4]
    b9aa:	681b      	ldr	r3, [r3, #0]
    b9ac:	f043 0201 	orr.w	r2, r3, #1
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    b9b4:	2101      	movs	r1, #1
    b9b6:	6878      	ldr	r0, [r7, #4]
    b9b8:	4b02      	ldr	r3, [pc, #8]	; (b9c4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    b9ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b9bc:	bf00      	nop
    b9be:	3708      	adds	r7, #8
    b9c0:	46bd      	mov	sp, r7
    b9c2:	bd80      	pop	{r7, pc}
    b9c4:	0000b8b5 	.word	0x0000b8b5

0000b9c8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b9c8:	b580      	push	{r7, lr}
    b9ca:	b082      	sub	sp, #8
    b9cc:	af00      	add	r7, sp, #0
    b9ce:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	681b      	ldr	r3, [r3, #0]
    b9d4:	f043 0202 	orr.w	r2, r3, #2
    b9d8:	687b      	ldr	r3, [r7, #4]
    b9da:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b9dc:	2103      	movs	r1, #3
    b9de:	6878      	ldr	r0, [r7, #4]
    b9e0:	4b02      	ldr	r3, [pc, #8]	; (b9ec <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    b9e2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    b9e4:	bf00      	nop
    b9e6:	3708      	adds	r7, #8
    b9e8:	46bd      	mov	sp, r7
    b9ea:	bd80      	pop	{r7, pc}
    b9ec:	0000b8b5 	.word	0x0000b8b5

0000b9f0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b9f0:	b580      	push	{r7, lr}
    b9f2:	b084      	sub	sp, #16
    b9f4:	af00      	add	r7, sp, #0
    b9f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    b9f8:	2103      	movs	r1, #3
    b9fa:	6878      	ldr	r0, [r7, #4]
    b9fc:	4b09      	ldr	r3, [pc, #36]	; (ba24 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    b9fe:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ba00:	687b      	ldr	r3, [r7, #4]
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    ba06:	68fb      	ldr	r3, [r7, #12]
    ba08:	085b      	lsrs	r3, r3, #1
    ba0a:	f003 0301 	and.w	r3, r3, #1
    ba0e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    ba10:	68fb      	ldr	r3, [r7, #12]
    ba12:	2b00      	cmp	r3, #0
    ba14:	bf14      	ite	ne
    ba16:	2301      	movne	r3, #1
    ba18:	2300      	moveq	r3, #0
    ba1a:	b2db      	uxtb	r3, r3
}
    ba1c:	4618      	mov	r0, r3
    ba1e:	3710      	adds	r7, #16
    ba20:	46bd      	mov	sp, r7
    ba22:	bd80      	pop	{r7, pc}
    ba24:	0000b8b5 	.word	0x0000b8b5

0000ba28 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ba28:	b580      	push	{r7, lr}
    ba2a:	b082      	sub	sp, #8
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	681b      	ldr	r3, [r3, #0]
    ba34:	f023 0202 	bic.w	r2, r3, #2
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ba3c:	2103      	movs	r1, #3
    ba3e:	6878      	ldr	r0, [r7, #4]
    ba40:	4b02      	ldr	r3, [pc, #8]	; (ba4c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    ba42:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ba44:	bf00      	nop
    ba46:	3708      	adds	r7, #8
    ba48:	46bd      	mov	sp, r7
    ba4a:	bd80      	pop	{r7, pc}
    ba4c:	0000b8b5 	.word	0x0000b8b5

0000ba50 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    ba50:	b480      	push	{r7}
    ba52:	b085      	sub	sp, #20
    ba54:	af00      	add	r7, sp, #0
    ba56:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ba58:	687b      	ldr	r3, [r7, #4]
    ba5a:	681b      	ldr	r3, [r3, #0]
    ba5c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    ba5e:	68fb      	ldr	r3, [r7, #12]
    ba60:	089b      	lsrs	r3, r3, #2
    ba62:	f003 0303 	and.w	r3, r3, #3
    ba66:	60fb      	str	r3, [r7, #12]
	return tmp;
    ba68:	68fb      	ldr	r3, [r7, #12]
}
    ba6a:	4618      	mov	r0, r3
    ba6c:	3714      	adds	r7, #20
    ba6e:	46bd      	mov	sp, r7
    ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba74:	4770      	bx	lr
	...

0000ba78 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    ba78:	b580      	push	{r7, lr}
    ba7a:	b084      	sub	sp, #16
    ba7c:	af00      	add	r7, sp, #0
    ba7e:	6078      	str	r0, [r7, #4]
    ba80:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    ba82:	2103      	movs	r1, #3
    ba84:	6878      	ldr	r0, [r7, #4]
    ba86:	4b07      	ldr	r3, [pc, #28]	; (baa4 <hri_tc_get_CTRLA_reg+0x2c>)
    ba88:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    ba8a:	687b      	ldr	r3, [r7, #4]
    ba8c:	681b      	ldr	r3, [r3, #0]
    ba8e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ba90:	68fa      	ldr	r2, [r7, #12]
    ba92:	683b      	ldr	r3, [r7, #0]
    ba94:	4013      	ands	r3, r2
    ba96:	60fb      	str	r3, [r7, #12]
	return tmp;
    ba98:	68fb      	ldr	r3, [r7, #12]
}
    ba9a:	4618      	mov	r0, r3
    ba9c:	3710      	adds	r7, #16
    ba9e:	46bd      	mov	sp, r7
    baa0:	bd80      	pop	{r7, pc}
    baa2:	bf00      	nop
    baa4:	0000b8b5 	.word	0x0000b8b5

0000baa8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b082      	sub	sp, #8
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
    bab0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    bab2:	687b      	ldr	r3, [r7, #4]
    bab4:	683a      	ldr	r2, [r7, #0]
    bab6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    bab8:	2103      	movs	r1, #3
    baba:	6878      	ldr	r0, [r7, #4]
    babc:	4b02      	ldr	r3, [pc, #8]	; (bac8 <hri_tc_write_CTRLA_reg+0x20>)
    babe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bac0:	bf00      	nop
    bac2:	3708      	adds	r7, #8
    bac4:	46bd      	mov	sp, r7
    bac6:	bd80      	pop	{r7, pc}
    bac8:	0000b8b5 	.word	0x0000b8b5

0000bacc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    bacc:	b480      	push	{r7}
    bace:	b083      	sub	sp, #12
    bad0:	af00      	add	r7, sp, #0
    bad2:	6078      	str	r0, [r7, #4]
    bad4:	460b      	mov	r3, r1
    bad6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    bad8:	687b      	ldr	r3, [r7, #4]
    bada:	887a      	ldrh	r2, [r7, #2]
    badc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    bade:	bf00      	nop
    bae0:	370c      	adds	r7, #12
    bae2:	46bd      	mov	sp, r7
    bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bae8:	4770      	bx	lr

0000baea <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    baea:	b480      	push	{r7}
    baec:	b083      	sub	sp, #12
    baee:	af00      	add	r7, sp, #0
    baf0:	6078      	str	r0, [r7, #4]
    baf2:	460b      	mov	r3, r1
    baf4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    baf6:	687b      	ldr	r3, [r7, #4]
    baf8:	78fa      	ldrb	r2, [r7, #3]
    bafa:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    bafc:	bf00      	nop
    bafe:	370c      	adds	r7, #12
    bb00:	46bd      	mov	sp, r7
    bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb06:	4770      	bx	lr

0000bb08 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    bb08:	b480      	push	{r7}
    bb0a:	b083      	sub	sp, #12
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	6078      	str	r0, [r7, #4]
    bb10:	460b      	mov	r3, r1
    bb12:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    bb14:	687b      	ldr	r3, [r7, #4]
    bb16:	78fa      	ldrb	r2, [r7, #3]
    bb18:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    bb1a:	bf00      	nop
    bb1c:	370c      	adds	r7, #12
    bb1e:	46bd      	mov	sp, r7
    bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb24:	4770      	bx	lr
	...

0000bb28 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    bb28:	b580      	push	{r7, lr}
    bb2a:	b082      	sub	sp, #8
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    bb30:	460b      	mov	r3, r1
    bb32:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	78fa      	ldrb	r2, [r7, #3]
    bb38:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    bb3a:	2120      	movs	r1, #32
    bb3c:	6878      	ldr	r0, [r7, #4]
    bb3e:	4b03      	ldr	r3, [pc, #12]	; (bb4c <hri_tccount8_write_PER_reg+0x24>)
    bb40:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bb42:	bf00      	nop
    bb44:	3708      	adds	r7, #8
    bb46:	46bd      	mov	sp, r7
    bb48:	bd80      	pop	{r7, pc}
    bb4a:	bf00      	nop
    bb4c:	0000b8b5 	.word	0x0000b8b5

0000bb50 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	b082      	sub	sp, #8
    bb54:	af00      	add	r7, sp, #0
    bb56:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    bb58:	2120      	movs	r1, #32
    bb5a:	6878      	ldr	r0, [r7, #4]
    bb5c:	4b04      	ldr	r3, [pc, #16]	; (bb70 <hri_tccount8_read_PER_reg+0x20>)
    bb5e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    bb60:	687b      	ldr	r3, [r7, #4]
    bb62:	7edb      	ldrb	r3, [r3, #27]
    bb64:	b2db      	uxtb	r3, r3
}
    bb66:	4618      	mov	r0, r3
    bb68:	3708      	adds	r7, #8
    bb6a:	46bd      	mov	sp, r7
    bb6c:	bd80      	pop	{r7, pc}
    bb6e:	bf00      	nop
    bb70:	0000b8b5 	.word	0x0000b8b5

0000bb74 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    bb74:	b580      	push	{r7, lr}
    bb76:	b082      	sub	sp, #8
    bb78:	af00      	add	r7, sp, #0
    bb7a:	6078      	str	r0, [r7, #4]
    bb7c:	460b      	mov	r3, r1
    bb7e:	70fb      	strb	r3, [r7, #3]
    bb80:	4613      	mov	r3, r2
    bb82:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    bb84:	78fb      	ldrb	r3, [r7, #3]
    bb86:	687a      	ldr	r2, [r7, #4]
    bb88:	4413      	add	r3, r2
    bb8a:	78ba      	ldrb	r2, [r7, #2]
    bb8c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bb8e:	21c0      	movs	r1, #192	; 0xc0
    bb90:	6878      	ldr	r0, [r7, #4]
    bb92:	4b03      	ldr	r3, [pc, #12]	; (bba0 <hri_tccount8_write_CC_reg+0x2c>)
    bb94:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bb96:	bf00      	nop
    bb98:	3708      	adds	r7, #8
    bb9a:	46bd      	mov	sp, r7
    bb9c:	bd80      	pop	{r7, pc}
    bb9e:	bf00      	nop
    bba0:	0000b8b5 	.word	0x0000b8b5

0000bba4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	b082      	sub	sp, #8
    bba8:	af00      	add	r7, sp, #0
    bbaa:	6078      	str	r0, [r7, #4]
    bbac:	460b      	mov	r3, r1
    bbae:	70fb      	strb	r3, [r7, #3]
    bbb0:	4613      	mov	r3, r2
    bbb2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    bbb4:	78fb      	ldrb	r3, [r7, #3]
    bbb6:	687a      	ldr	r2, [r7, #4]
    bbb8:	330c      	adds	r3, #12
    bbba:	005b      	lsls	r3, r3, #1
    bbbc:	4413      	add	r3, r2
    bbbe:	883a      	ldrh	r2, [r7, #0]
    bbc0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bbc2:	21c0      	movs	r1, #192	; 0xc0
    bbc4:	6878      	ldr	r0, [r7, #4]
    bbc6:	4b03      	ldr	r3, [pc, #12]	; (bbd4 <hri_tccount16_write_CC_reg+0x30>)
    bbc8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bbca:	bf00      	nop
    bbcc:	3708      	adds	r7, #8
    bbce:	46bd      	mov	sp, r7
    bbd0:	bd80      	pop	{r7, pc}
    bbd2:	bf00      	nop
    bbd4:	0000b8b5 	.word	0x0000b8b5

0000bbd8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    bbd8:	b580      	push	{r7, lr}
    bbda:	b082      	sub	sp, #8
    bbdc:	af00      	add	r7, sp, #0
    bbde:	6078      	str	r0, [r7, #4]
    bbe0:	460b      	mov	r3, r1
    bbe2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bbe4:	21c0      	movs	r1, #192	; 0xc0
    bbe6:	6878      	ldr	r0, [r7, #4]
    bbe8:	4b06      	ldr	r3, [pc, #24]	; (bc04 <hri_tccount16_read_CC_reg+0x2c>)
    bbea:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    bbec:	78fb      	ldrb	r3, [r7, #3]
    bbee:	687a      	ldr	r2, [r7, #4]
    bbf0:	330c      	adds	r3, #12
    bbf2:	005b      	lsls	r3, r3, #1
    bbf4:	4413      	add	r3, r2
    bbf6:	889b      	ldrh	r3, [r3, #4]
    bbf8:	b29b      	uxth	r3, r3
}
    bbfa:	4618      	mov	r0, r3
    bbfc:	3708      	adds	r7, #8
    bbfe:	46bd      	mov	sp, r7
    bc00:	bd80      	pop	{r7, pc}
    bc02:	bf00      	nop
    bc04:	0000b8b5 	.word	0x0000b8b5

0000bc08 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    bc08:	b580      	push	{r7, lr}
    bc0a:	b084      	sub	sp, #16
    bc0c:	af00      	add	r7, sp, #0
    bc0e:	60f8      	str	r0, [r7, #12]
    bc10:	460b      	mov	r3, r1
    bc12:	607a      	str	r2, [r7, #4]
    bc14:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    bc16:	7afb      	ldrb	r3, [r7, #11]
    bc18:	68fa      	ldr	r2, [r7, #12]
    bc1a:	3306      	adds	r3, #6
    bc1c:	009b      	lsls	r3, r3, #2
    bc1e:	4413      	add	r3, r2
    bc20:	687a      	ldr	r2, [r7, #4]
    bc22:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bc24:	21c0      	movs	r1, #192	; 0xc0
    bc26:	68f8      	ldr	r0, [r7, #12]
    bc28:	4b02      	ldr	r3, [pc, #8]	; (bc34 <hri_tccount32_write_CC_reg+0x2c>)
    bc2a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    bc2c:	bf00      	nop
    bc2e:	3710      	adds	r7, #16
    bc30:	46bd      	mov	sp, r7
    bc32:	bd80      	pop	{r7, pc}
    bc34:	0000b8b5 	.word	0x0000b8b5

0000bc38 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    bc38:	b580      	push	{r7, lr}
    bc3a:	b082      	sub	sp, #8
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	6078      	str	r0, [r7, #4]
    bc40:	460b      	mov	r3, r1
    bc42:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    bc44:	21c0      	movs	r1, #192	; 0xc0
    bc46:	6878      	ldr	r0, [r7, #4]
    bc48:	4b05      	ldr	r3, [pc, #20]	; (bc60 <hri_tccount32_read_CC_reg+0x28>)
    bc4a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    bc4c:	78fb      	ldrb	r3, [r7, #3]
    bc4e:	687a      	ldr	r2, [r7, #4]
    bc50:	3306      	adds	r3, #6
    bc52:	009b      	lsls	r3, r3, #2
    bc54:	4413      	add	r3, r2
    bc56:	685b      	ldr	r3, [r3, #4]
}
    bc58:	4618      	mov	r0, r3
    bc5a:	3708      	adds	r7, #8
    bc5c:	46bd      	mov	sp, r7
    bc5e:	bd80      	pop	{r7, pc}
    bc60:	0000b8b5 	.word	0x0000b8b5

0000bc64 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    bc64:	b580      	push	{r7, lr}
    bc66:	b084      	sub	sp, #16
    bc68:	af00      	add	r7, sp, #0
    bc6a:	6078      	str	r0, [r7, #4]
    bc6c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    bc6e:	6838      	ldr	r0, [r7, #0]
    bc70:	4b93      	ldr	r3, [pc, #588]	; (bec0 <_tc_timer_init+0x25c>)
    bc72:	4798      	blx	r3
    bc74:	4603      	mov	r3, r0
    bc76:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    bc78:	687b      	ldr	r3, [r7, #4]
    bc7a:	683a      	ldr	r2, [r7, #0]
    bc7c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    bc7e:	22a4      	movs	r2, #164	; 0xa4
    bc80:	4990      	ldr	r1, [pc, #576]	; (bec4 <_tc_timer_init+0x260>)
    bc82:	2001      	movs	r0, #1
    bc84:	4b90      	ldr	r3, [pc, #576]	; (bec8 <_tc_timer_init+0x264>)
    bc86:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    bc88:	2101      	movs	r1, #1
    bc8a:	6838      	ldr	r0, [r7, #0]
    bc8c:	4b8f      	ldr	r3, [pc, #572]	; (becc <_tc_timer_init+0x268>)
    bc8e:	4798      	blx	r3
    bc90:	4603      	mov	r3, r0
    bc92:	f083 0301 	eor.w	r3, r3, #1
    bc96:	b2db      	uxtb	r3, r3
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d011      	beq.n	bcc0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    bc9c:	2102      	movs	r1, #2
    bc9e:	6838      	ldr	r0, [r7, #0]
    bca0:	4b8b      	ldr	r3, [pc, #556]	; (bed0 <_tc_timer_init+0x26c>)
    bca2:	4798      	blx	r3
    bca4:	4603      	mov	r3, r0
    bca6:	2b00      	cmp	r3, #0
    bca8:	d006      	beq.n	bcb8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    bcaa:	6838      	ldr	r0, [r7, #0]
    bcac:	4b89      	ldr	r3, [pc, #548]	; (bed4 <_tc_timer_init+0x270>)
    bcae:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    bcb0:	2102      	movs	r1, #2
    bcb2:	6838      	ldr	r0, [r7, #0]
    bcb4:	4b88      	ldr	r3, [pc, #544]	; (bed8 <_tc_timer_init+0x274>)
    bcb6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    bcb8:	2101      	movs	r1, #1
    bcba:	6838      	ldr	r0, [r7, #0]
    bcbc:	4b87      	ldr	r3, [pc, #540]	; (bedc <_tc_timer_init+0x278>)
    bcbe:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    bcc0:	2101      	movs	r1, #1
    bcc2:	6838      	ldr	r0, [r7, #0]
    bcc4:	4b84      	ldr	r3, [pc, #528]	; (bed8 <_tc_timer_init+0x274>)
    bcc6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    bcc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bccc:	4984      	ldr	r1, [pc, #528]	; (bee0 <_tc_timer_init+0x27c>)
    bcce:	4613      	mov	r3, r2
    bcd0:	009b      	lsls	r3, r3, #2
    bcd2:	4413      	add	r3, r2
    bcd4:	009b      	lsls	r3, r3, #2
    bcd6:	440b      	add	r3, r1
    bcd8:	3304      	adds	r3, #4
    bcda:	681b      	ldr	r3, [r3, #0]
    bcdc:	4619      	mov	r1, r3
    bcde:	6838      	ldr	r0, [r7, #0]
    bce0:	4b7e      	ldr	r3, [pc, #504]	; (bedc <_tc_timer_init+0x278>)
    bce2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    bce4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bce8:	497d      	ldr	r1, [pc, #500]	; (bee0 <_tc_timer_init+0x27c>)
    bcea:	4613      	mov	r3, r2
    bcec:	009b      	lsls	r3, r3, #2
    bcee:	4413      	add	r3, r2
    bcf0:	009b      	lsls	r3, r3, #2
    bcf2:	440b      	add	r3, r1
    bcf4:	330a      	adds	r3, #10
    bcf6:	781b      	ldrb	r3, [r3, #0]
    bcf8:	4619      	mov	r1, r3
    bcfa:	6838      	ldr	r0, [r7, #0]
    bcfc:	4b79      	ldr	r3, [pc, #484]	; (bee4 <_tc_timer_init+0x280>)
    bcfe:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bd00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd04:	4976      	ldr	r1, [pc, #472]	; (bee0 <_tc_timer_init+0x27c>)
    bd06:	4613      	mov	r3, r2
    bd08:	009b      	lsls	r3, r3, #2
    bd0a:	4413      	add	r3, r2
    bd0c:	009b      	lsls	r3, r3, #2
    bd0e:	440b      	add	r3, r1
    bd10:	3308      	adds	r3, #8
    bd12:	881b      	ldrh	r3, [r3, #0]
    bd14:	4619      	mov	r1, r3
    bd16:	6838      	ldr	r0, [r7, #0]
    bd18:	4b73      	ldr	r3, [pc, #460]	; (bee8 <_tc_timer_init+0x284>)
    bd1a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    bd1c:	2101      	movs	r1, #1
    bd1e:	6838      	ldr	r0, [r7, #0]
    bd20:	4b72      	ldr	r3, [pc, #456]	; (beec <_tc_timer_init+0x288>)
    bd22:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    bd24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd28:	496d      	ldr	r1, [pc, #436]	; (bee0 <_tc_timer_init+0x27c>)
    bd2a:	4613      	mov	r3, r2
    bd2c:	009b      	lsls	r3, r3, #2
    bd2e:	4413      	add	r3, r2
    bd30:	009b      	lsls	r3, r3, #2
    bd32:	440b      	add	r3, r1
    bd34:	3304      	adds	r3, #4
    bd36:	681b      	ldr	r3, [r3, #0]
    bd38:	f003 030c 	and.w	r3, r3, #12
    bd3c:	2b08      	cmp	r3, #8
    bd3e:	d11e      	bne.n	bd7e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bd40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd44:	4966      	ldr	r1, [pc, #408]	; (bee0 <_tc_timer_init+0x27c>)
    bd46:	4613      	mov	r3, r2
    bd48:	009b      	lsls	r3, r3, #2
    bd4a:	4413      	add	r3, r2
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	440b      	add	r3, r1
    bd50:	330c      	adds	r3, #12
    bd52:	681b      	ldr	r3, [r3, #0]
    bd54:	461a      	mov	r2, r3
    bd56:	2100      	movs	r1, #0
    bd58:	6838      	ldr	r0, [r7, #0]
    bd5a:	4b65      	ldr	r3, [pc, #404]	; (bef0 <_tc_timer_init+0x28c>)
    bd5c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    bd5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd62:	495f      	ldr	r1, [pc, #380]	; (bee0 <_tc_timer_init+0x27c>)
    bd64:	4613      	mov	r3, r2
    bd66:	009b      	lsls	r3, r3, #2
    bd68:	4413      	add	r3, r2
    bd6a:	009b      	lsls	r3, r3, #2
    bd6c:	440b      	add	r3, r1
    bd6e:	3310      	adds	r3, #16
    bd70:	681b      	ldr	r3, [r3, #0]
    bd72:	461a      	mov	r2, r3
    bd74:	2101      	movs	r1, #1
    bd76:	6838      	ldr	r0, [r7, #0]
    bd78:	4b5d      	ldr	r3, [pc, #372]	; (bef0 <_tc_timer_init+0x28c>)
    bd7a:	4798      	blx	r3
    bd7c:	e06a      	b.n	be54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    bd7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd82:	4957      	ldr	r1, [pc, #348]	; (bee0 <_tc_timer_init+0x27c>)
    bd84:	4613      	mov	r3, r2
    bd86:	009b      	lsls	r3, r3, #2
    bd88:	4413      	add	r3, r2
    bd8a:	009b      	lsls	r3, r3, #2
    bd8c:	440b      	add	r3, r1
    bd8e:	3304      	adds	r3, #4
    bd90:	681b      	ldr	r3, [r3, #0]
    bd92:	f003 030c 	and.w	r3, r3, #12
    bd96:	2b00      	cmp	r3, #0
    bd98:	d120      	bne.n	bddc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    bd9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bd9e:	4950      	ldr	r1, [pc, #320]	; (bee0 <_tc_timer_init+0x27c>)
    bda0:	4613      	mov	r3, r2
    bda2:	009b      	lsls	r3, r3, #2
    bda4:	4413      	add	r3, r2
    bda6:	009b      	lsls	r3, r3, #2
    bda8:	440b      	add	r3, r1
    bdaa:	330c      	adds	r3, #12
    bdac:	681b      	ldr	r3, [r3, #0]
    bdae:	b29b      	uxth	r3, r3
    bdb0:	461a      	mov	r2, r3
    bdb2:	2100      	movs	r1, #0
    bdb4:	6838      	ldr	r0, [r7, #0]
    bdb6:	4b4f      	ldr	r3, [pc, #316]	; (bef4 <_tc_timer_init+0x290>)
    bdb8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    bdba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bdbe:	4948      	ldr	r1, [pc, #288]	; (bee0 <_tc_timer_init+0x27c>)
    bdc0:	4613      	mov	r3, r2
    bdc2:	009b      	lsls	r3, r3, #2
    bdc4:	4413      	add	r3, r2
    bdc6:	009b      	lsls	r3, r3, #2
    bdc8:	440b      	add	r3, r1
    bdca:	3310      	adds	r3, #16
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	b29b      	uxth	r3, r3
    bdd0:	461a      	mov	r2, r3
    bdd2:	2101      	movs	r1, #1
    bdd4:	6838      	ldr	r0, [r7, #0]
    bdd6:	4b47      	ldr	r3, [pc, #284]	; (bef4 <_tc_timer_init+0x290>)
    bdd8:	4798      	blx	r3
    bdda:	e03b      	b.n	be54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    bddc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bde0:	493f      	ldr	r1, [pc, #252]	; (bee0 <_tc_timer_init+0x27c>)
    bde2:	4613      	mov	r3, r2
    bde4:	009b      	lsls	r3, r3, #2
    bde6:	4413      	add	r3, r2
    bde8:	009b      	lsls	r3, r3, #2
    bdea:	440b      	add	r3, r1
    bdec:	3304      	adds	r3, #4
    bdee:	681b      	ldr	r3, [r3, #0]
    bdf0:	f003 030c 	and.w	r3, r3, #12
    bdf4:	2b04      	cmp	r3, #4
    bdf6:	d12d      	bne.n	be54 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    bdf8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bdfc:	4938      	ldr	r1, [pc, #224]	; (bee0 <_tc_timer_init+0x27c>)
    bdfe:	4613      	mov	r3, r2
    be00:	009b      	lsls	r3, r3, #2
    be02:	4413      	add	r3, r2
    be04:	009b      	lsls	r3, r3, #2
    be06:	440b      	add	r3, r1
    be08:	330c      	adds	r3, #12
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	b2db      	uxtb	r3, r3
    be0e:	461a      	mov	r2, r3
    be10:	2100      	movs	r1, #0
    be12:	6838      	ldr	r0, [r7, #0]
    be14:	4b38      	ldr	r3, [pc, #224]	; (bef8 <_tc_timer_init+0x294>)
    be16:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    be18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be1c:	4930      	ldr	r1, [pc, #192]	; (bee0 <_tc_timer_init+0x27c>)
    be1e:	4613      	mov	r3, r2
    be20:	009b      	lsls	r3, r3, #2
    be22:	4413      	add	r3, r2
    be24:	009b      	lsls	r3, r3, #2
    be26:	440b      	add	r3, r1
    be28:	3310      	adds	r3, #16
    be2a:	681b      	ldr	r3, [r3, #0]
    be2c:	b2db      	uxtb	r3, r3
    be2e:	461a      	mov	r2, r3
    be30:	2101      	movs	r1, #1
    be32:	6838      	ldr	r0, [r7, #0]
    be34:	4b30      	ldr	r3, [pc, #192]	; (bef8 <_tc_timer_init+0x294>)
    be36:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    be38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be3c:	4928      	ldr	r1, [pc, #160]	; (bee0 <_tc_timer_init+0x27c>)
    be3e:	4613      	mov	r3, r2
    be40:	009b      	lsls	r3, r3, #2
    be42:	4413      	add	r3, r2
    be44:	009b      	lsls	r3, r3, #2
    be46:	440b      	add	r3, r1
    be48:	330b      	adds	r3, #11
    be4a:	781b      	ldrb	r3, [r3, #0]
    be4c:	4619      	mov	r1, r3
    be4e:	6838      	ldr	r0, [r7, #0]
    be50:	4b2a      	ldr	r3, [pc, #168]	; (befc <_tc_timer_init+0x298>)
    be52:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    be54:	6838      	ldr	r0, [r7, #0]
    be56:	4b2a      	ldr	r3, [pc, #168]	; (bf00 <_tc_timer_init+0x29c>)
    be58:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    be5a:	6879      	ldr	r1, [r7, #4]
    be5c:	6838      	ldr	r0, [r7, #0]
    be5e:	4b29      	ldr	r3, [pc, #164]	; (bf04 <_tc_timer_init+0x2a0>)
    be60:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    be62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be66:	491e      	ldr	r1, [pc, #120]	; (bee0 <_tc_timer_init+0x27c>)
    be68:	4613      	mov	r3, r2
    be6a:	009b      	lsls	r3, r3, #2
    be6c:	4413      	add	r3, r2
    be6e:	009b      	lsls	r3, r3, #2
    be70:	440b      	add	r3, r1
    be72:	3302      	adds	r3, #2
    be74:	f9b3 3000 	ldrsh.w	r3, [r3]
    be78:	4618      	mov	r0, r3
    be7a:	4b23      	ldr	r3, [pc, #140]	; (bf08 <_tc_timer_init+0x2a4>)
    be7c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    be7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be82:	4917      	ldr	r1, [pc, #92]	; (bee0 <_tc_timer_init+0x27c>)
    be84:	4613      	mov	r3, r2
    be86:	009b      	lsls	r3, r3, #2
    be88:	4413      	add	r3, r2
    be8a:	009b      	lsls	r3, r3, #2
    be8c:	440b      	add	r3, r1
    be8e:	3302      	adds	r3, #2
    be90:	f9b3 3000 	ldrsh.w	r3, [r3]
    be94:	4618      	mov	r0, r3
    be96:	4b1d      	ldr	r3, [pc, #116]	; (bf0c <_tc_timer_init+0x2a8>)
    be98:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    be9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    be9e:	4910      	ldr	r1, [pc, #64]	; (bee0 <_tc_timer_init+0x27c>)
    bea0:	4613      	mov	r3, r2
    bea2:	009b      	lsls	r3, r3, #2
    bea4:	4413      	add	r3, r2
    bea6:	009b      	lsls	r3, r3, #2
    bea8:	440b      	add	r3, r1
    beaa:	3302      	adds	r3, #2
    beac:	f9b3 3000 	ldrsh.w	r3, [r3]
    beb0:	4618      	mov	r0, r3
    beb2:	4b17      	ldr	r3, [pc, #92]	; (bf10 <_tc_timer_init+0x2ac>)
    beb4:	4798      	blx	r3

	return ERR_NONE;
    beb6:	2300      	movs	r3, #0
}
    beb8:	4618      	mov	r0, r3
    beba:	3710      	adds	r7, #16
    bebc:	46bd      	mov	sp, r7
    bebe:	bd80      	pop	{r7, pc}
    bec0:	0000c4b5 	.word	0x0000c4b5
    bec4:	00012cdc 	.word	0x00012cdc
    bec8:	00007361 	.word	0x00007361
    becc:	0000b8d9 	.word	0x0000b8d9
    bed0:	0000ba79 	.word	0x0000ba79
    bed4:	0000ba29 	.word	0x0000ba29
    bed8:	0000b8b5 	.word	0x0000b8b5
    bedc:	0000baa9 	.word	0x0000baa9
    bee0:	20000508 	.word	0x20000508
    bee4:	0000bb09 	.word	0x0000bb09
    bee8:	0000bacd 	.word	0x0000bacd
    beec:	0000baeb 	.word	0x0000baeb
    bef0:	0000bc09 	.word	0x0000bc09
    bef4:	0000bba5 	.word	0x0000bba5
    bef8:	0000bb75 	.word	0x0000bb75
    befc:	0000bb29 	.word	0x0000bb29
    bf00:	0000b95d 	.word	0x0000b95d
    bf04:	0000c51d 	.word	0x0000c51d
    bf08:	0000b835 	.word	0x0000b835
    bf0c:	0000b879 	.word	0x0000b879
    bf10:	0000b7f9 	.word	0x0000b7f9

0000bf14 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    bf14:	b580      	push	{r7, lr}
    bf16:	b084      	sub	sp, #16
    bf18:	af00      	add	r7, sp, #0
    bf1a:	6078      	str	r0, [r7, #4]
    bf1c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    bf1e:	6838      	ldr	r0, [r7, #0]
    bf20:	4b73      	ldr	r3, [pc, #460]	; (c0f0 <_pwm_init+0x1dc>)
    bf22:	4798      	blx	r3
    bf24:	4603      	mov	r3, r0
    bf26:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    bf28:	687b      	ldr	r3, [r7, #4]
    bf2a:	683a      	ldr	r2, [r7, #0]
    bf2c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    bf2e:	2101      	movs	r1, #1
    bf30:	6838      	ldr	r0, [r7, #0]
    bf32:	4b70      	ldr	r3, [pc, #448]	; (c0f4 <_pwm_init+0x1e0>)
    bf34:	4798      	blx	r3
    bf36:	4603      	mov	r3, r0
    bf38:	f083 0301 	eor.w	r3, r3, #1
    bf3c:	b2db      	uxtb	r3, r3
    bf3e:	2b00      	cmp	r3, #0
    bf40:	d011      	beq.n	bf66 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    bf42:	2102      	movs	r1, #2
    bf44:	6838      	ldr	r0, [r7, #0]
    bf46:	4b6c      	ldr	r3, [pc, #432]	; (c0f8 <_pwm_init+0x1e4>)
    bf48:	4798      	blx	r3
    bf4a:	4603      	mov	r3, r0
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d006      	beq.n	bf5e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    bf50:	6838      	ldr	r0, [r7, #0]
    bf52:	4b6a      	ldr	r3, [pc, #424]	; (c0fc <_pwm_init+0x1e8>)
    bf54:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    bf56:	2102      	movs	r1, #2
    bf58:	6838      	ldr	r0, [r7, #0]
    bf5a:	4b69      	ldr	r3, [pc, #420]	; (c100 <_pwm_init+0x1ec>)
    bf5c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    bf5e:	2101      	movs	r1, #1
    bf60:	6838      	ldr	r0, [r7, #0]
    bf62:	4b68      	ldr	r3, [pc, #416]	; (c104 <_pwm_init+0x1f0>)
    bf64:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    bf66:	2101      	movs	r1, #1
    bf68:	6838      	ldr	r0, [r7, #0]
    bf6a:	4b65      	ldr	r3, [pc, #404]	; (c100 <_pwm_init+0x1ec>)
    bf6c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    bf6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf72:	4965      	ldr	r1, [pc, #404]	; (c108 <_pwm_init+0x1f4>)
    bf74:	4613      	mov	r3, r2
    bf76:	009b      	lsls	r3, r3, #2
    bf78:	4413      	add	r3, r2
    bf7a:	009b      	lsls	r3, r3, #2
    bf7c:	440b      	add	r3, r1
    bf7e:	3304      	adds	r3, #4
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	4619      	mov	r1, r3
    bf84:	6838      	ldr	r0, [r7, #0]
    bf86:	4b5f      	ldr	r3, [pc, #380]	; (c104 <_pwm_init+0x1f0>)
    bf88:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    bf8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bf8e:	495e      	ldr	r1, [pc, #376]	; (c108 <_pwm_init+0x1f4>)
    bf90:	4613      	mov	r3, r2
    bf92:	009b      	lsls	r3, r3, #2
    bf94:	4413      	add	r3, r2
    bf96:	009b      	lsls	r3, r3, #2
    bf98:	440b      	add	r3, r1
    bf9a:	330a      	adds	r3, #10
    bf9c:	781b      	ldrb	r3, [r3, #0]
    bf9e:	4619      	mov	r1, r3
    bfa0:	6838      	ldr	r0, [r7, #0]
    bfa2:	4b5a      	ldr	r3, [pc, #360]	; (c10c <_pwm_init+0x1f8>)
    bfa4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bfa6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bfaa:	4957      	ldr	r1, [pc, #348]	; (c108 <_pwm_init+0x1f4>)
    bfac:	4613      	mov	r3, r2
    bfae:	009b      	lsls	r3, r3, #2
    bfb0:	4413      	add	r3, r2
    bfb2:	009b      	lsls	r3, r3, #2
    bfb4:	440b      	add	r3, r1
    bfb6:	3308      	adds	r3, #8
    bfb8:	881b      	ldrh	r3, [r3, #0]
    bfba:	4619      	mov	r1, r3
    bfbc:	6838      	ldr	r0, [r7, #0]
    bfbe:	4b54      	ldr	r3, [pc, #336]	; (c110 <_pwm_init+0x1fc>)
    bfc0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    bfc2:	2103      	movs	r1, #3
    bfc4:	6838      	ldr	r0, [r7, #0]
    bfc6:	4b53      	ldr	r3, [pc, #332]	; (c114 <_pwm_init+0x200>)
    bfc8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    bfca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bfce:	494e      	ldr	r1, [pc, #312]	; (c108 <_pwm_init+0x1f4>)
    bfd0:	4613      	mov	r3, r2
    bfd2:	009b      	lsls	r3, r3, #2
    bfd4:	4413      	add	r3, r2
    bfd6:	009b      	lsls	r3, r3, #2
    bfd8:	440b      	add	r3, r1
    bfda:	3304      	adds	r3, #4
    bfdc:	681b      	ldr	r3, [r3, #0]
    bfde:	f003 030c 	and.w	r3, r3, #12
    bfe2:	2b08      	cmp	r3, #8
    bfe4:	d11e      	bne.n	c024 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bfe6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    bfea:	4947      	ldr	r1, [pc, #284]	; (c108 <_pwm_init+0x1f4>)
    bfec:	4613      	mov	r3, r2
    bfee:	009b      	lsls	r3, r3, #2
    bff0:	4413      	add	r3, r2
    bff2:	009b      	lsls	r3, r3, #2
    bff4:	440b      	add	r3, r1
    bff6:	330c      	adds	r3, #12
    bff8:	681b      	ldr	r3, [r3, #0]
    bffa:	461a      	mov	r2, r3
    bffc:	2100      	movs	r1, #0
    bffe:	6838      	ldr	r0, [r7, #0]
    c000:	4b45      	ldr	r3, [pc, #276]	; (c118 <_pwm_init+0x204>)
    c002:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    c004:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c008:	493f      	ldr	r1, [pc, #252]	; (c108 <_pwm_init+0x1f4>)
    c00a:	4613      	mov	r3, r2
    c00c:	009b      	lsls	r3, r3, #2
    c00e:	4413      	add	r3, r2
    c010:	009b      	lsls	r3, r3, #2
    c012:	440b      	add	r3, r1
    c014:	3310      	adds	r3, #16
    c016:	681b      	ldr	r3, [r3, #0]
    c018:	461a      	mov	r2, r3
    c01a:	2101      	movs	r1, #1
    c01c:	6838      	ldr	r0, [r7, #0]
    c01e:	4b3e      	ldr	r3, [pc, #248]	; (c118 <_pwm_init+0x204>)
    c020:	4798      	blx	r3
    c022:	e031      	b.n	c088 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    c024:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c028:	4937      	ldr	r1, [pc, #220]	; (c108 <_pwm_init+0x1f4>)
    c02a:	4613      	mov	r3, r2
    c02c:	009b      	lsls	r3, r3, #2
    c02e:	4413      	add	r3, r2
    c030:	009b      	lsls	r3, r3, #2
    c032:	440b      	add	r3, r1
    c034:	3304      	adds	r3, #4
    c036:	681b      	ldr	r3, [r3, #0]
    c038:	f003 030c 	and.w	r3, r3, #12
    c03c:	2b00      	cmp	r3, #0
    c03e:	d120      	bne.n	c082 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    c040:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c044:	4930      	ldr	r1, [pc, #192]	; (c108 <_pwm_init+0x1f4>)
    c046:	4613      	mov	r3, r2
    c048:	009b      	lsls	r3, r3, #2
    c04a:	4413      	add	r3, r2
    c04c:	009b      	lsls	r3, r3, #2
    c04e:	440b      	add	r3, r1
    c050:	330c      	adds	r3, #12
    c052:	681b      	ldr	r3, [r3, #0]
    c054:	b29b      	uxth	r3, r3
    c056:	461a      	mov	r2, r3
    c058:	2100      	movs	r1, #0
    c05a:	6838      	ldr	r0, [r7, #0]
    c05c:	4b2f      	ldr	r3, [pc, #188]	; (c11c <_pwm_init+0x208>)
    c05e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    c060:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c064:	4928      	ldr	r1, [pc, #160]	; (c108 <_pwm_init+0x1f4>)
    c066:	4613      	mov	r3, r2
    c068:	009b      	lsls	r3, r3, #2
    c06a:	4413      	add	r3, r2
    c06c:	009b      	lsls	r3, r3, #2
    c06e:	440b      	add	r3, r1
    c070:	3310      	adds	r3, #16
    c072:	681b      	ldr	r3, [r3, #0]
    c074:	b29b      	uxth	r3, r3
    c076:	461a      	mov	r2, r3
    c078:	2101      	movs	r1, #1
    c07a:	6838      	ldr	r0, [r7, #0]
    c07c:	4b27      	ldr	r3, [pc, #156]	; (c11c <_pwm_init+0x208>)
    c07e:	4798      	blx	r3
    c080:	e002      	b.n	c088 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    c082:	f04f 33ff 	mov.w	r3, #4294967295
    c086:	e02e      	b.n	c0e6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    c088:	6879      	ldr	r1, [r7, #4]
    c08a:	6838      	ldr	r0, [r7, #0]
    c08c:	4b24      	ldr	r3, [pc, #144]	; (c120 <_pwm_init+0x20c>)
    c08e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    c090:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c094:	491c      	ldr	r1, [pc, #112]	; (c108 <_pwm_init+0x1f4>)
    c096:	4613      	mov	r3, r2
    c098:	009b      	lsls	r3, r3, #2
    c09a:	4413      	add	r3, r2
    c09c:	009b      	lsls	r3, r3, #2
    c09e:	440b      	add	r3, r1
    c0a0:	3302      	adds	r3, #2
    c0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    c0a6:	4618      	mov	r0, r3
    c0a8:	4b1e      	ldr	r3, [pc, #120]	; (c124 <_pwm_init+0x210>)
    c0aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    c0ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c0b0:	4915      	ldr	r1, [pc, #84]	; (c108 <_pwm_init+0x1f4>)
    c0b2:	4613      	mov	r3, r2
    c0b4:	009b      	lsls	r3, r3, #2
    c0b6:	4413      	add	r3, r2
    c0b8:	009b      	lsls	r3, r3, #2
    c0ba:	440b      	add	r3, r1
    c0bc:	3302      	adds	r3, #2
    c0be:	f9b3 3000 	ldrsh.w	r3, [r3]
    c0c2:	4618      	mov	r0, r3
    c0c4:	4b18      	ldr	r3, [pc, #96]	; (c128 <_pwm_init+0x214>)
    c0c6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    c0c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    c0cc:	490e      	ldr	r1, [pc, #56]	; (c108 <_pwm_init+0x1f4>)
    c0ce:	4613      	mov	r3, r2
    c0d0:	009b      	lsls	r3, r3, #2
    c0d2:	4413      	add	r3, r2
    c0d4:	009b      	lsls	r3, r3, #2
    c0d6:	440b      	add	r3, r1
    c0d8:	3302      	adds	r3, #2
    c0da:	f9b3 3000 	ldrsh.w	r3, [r3]
    c0de:	4618      	mov	r0, r3
    c0e0:	4b12      	ldr	r3, [pc, #72]	; (c12c <_pwm_init+0x218>)
    c0e2:	4798      	blx	r3

	return 0;
    c0e4:	2300      	movs	r3, #0
}
    c0e6:	4618      	mov	r0, r3
    c0e8:	3710      	adds	r7, #16
    c0ea:	46bd      	mov	sp, r7
    c0ec:	bd80      	pop	{r7, pc}
    c0ee:	bf00      	nop
    c0f0:	0000c4b5 	.word	0x0000c4b5
    c0f4:	0000b8d9 	.word	0x0000b8d9
    c0f8:	0000ba79 	.word	0x0000ba79
    c0fc:	0000ba29 	.word	0x0000ba29
    c100:	0000b8b5 	.word	0x0000b8b5
    c104:	0000baa9 	.word	0x0000baa9
    c108:	20000508 	.word	0x20000508
    c10c:	0000bb09 	.word	0x0000bb09
    c110:	0000bacd 	.word	0x0000bacd
    c114:	0000baeb 	.word	0x0000baeb
    c118:	0000bc09 	.word	0x0000bc09
    c11c:	0000bba5 	.word	0x0000bba5
    c120:	0000c51d 	.word	0x0000c51d
    c124:	0000b835 	.word	0x0000b835
    c128:	0000b879 	.word	0x0000b879
    c12c:	0000b7f9 	.word	0x0000b7f9

0000c130 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    c130:	b580      	push	{r7, lr}
    c132:	b084      	sub	sp, #16
    c134:	af00      	add	r7, sp, #0
    c136:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c138:	687b      	ldr	r3, [r7, #4]
    c13a:	68db      	ldr	r3, [r3, #12]
    c13c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    c13e:	68f8      	ldr	r0, [r7, #12]
    c140:	4b10      	ldr	r3, [pc, #64]	; (c184 <_tc_timer_deinit+0x54>)
    c142:	4798      	blx	r3
    c144:	4603      	mov	r3, r0
    c146:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    c148:	22f9      	movs	r2, #249	; 0xf9
    c14a:	490f      	ldr	r1, [pc, #60]	; (c188 <_tc_timer_deinit+0x58>)
    c14c:	2001      	movs	r0, #1
    c14e:	4b0f      	ldr	r3, [pc, #60]	; (c18c <_tc_timer_deinit+0x5c>)
    c150:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    c152:	f997 200b 	ldrsb.w	r2, [r7, #11]
    c156:	490e      	ldr	r1, [pc, #56]	; (c190 <_tc_timer_deinit+0x60>)
    c158:	4613      	mov	r3, r2
    c15a:	009b      	lsls	r3, r3, #2
    c15c:	4413      	add	r3, r2
    c15e:	009b      	lsls	r3, r3, #2
    c160:	440b      	add	r3, r1
    c162:	3302      	adds	r3, #2
    c164:	f9b3 3000 	ldrsh.w	r3, [r3]
    c168:	4618      	mov	r0, r3
    c16a:	4b0a      	ldr	r3, [pc, #40]	; (c194 <_tc_timer_deinit+0x64>)
    c16c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    c16e:	68f8      	ldr	r0, [r7, #12]
    c170:	4b09      	ldr	r3, [pc, #36]	; (c198 <_tc_timer_deinit+0x68>)
    c172:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    c174:	68f8      	ldr	r0, [r7, #12]
    c176:	4b09      	ldr	r3, [pc, #36]	; (c19c <_tc_timer_deinit+0x6c>)
    c178:	4798      	blx	r3
}
    c17a:	bf00      	nop
    c17c:	3710      	adds	r7, #16
    c17e:	46bd      	mov	sp, r7
    c180:	bd80      	pop	{r7, pc}
    c182:	bf00      	nop
    c184:	0000c4b5 	.word	0x0000c4b5
    c188:	00012cdc 	.word	0x00012cdc
    c18c:	00007361 	.word	0x00007361
    c190:	20000508 	.word	0x20000508
    c194:	0000b835 	.word	0x0000b835
    c198:	0000ba29 	.word	0x0000ba29
    c19c:	0000b9a1 	.word	0x0000b9a1

0000c1a0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b082      	sub	sp, #8
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    c1a8:	687b      	ldr	r3, [r7, #4]
    c1aa:	68db      	ldr	r3, [r3, #12]
    c1ac:	4618      	mov	r0, r3
    c1ae:	4b03      	ldr	r3, [pc, #12]	; (c1bc <_tc_timer_start+0x1c>)
    c1b0:	4798      	blx	r3
}
    c1b2:	bf00      	nop
    c1b4:	3708      	adds	r7, #8
    c1b6:	46bd      	mov	sp, r7
    c1b8:	bd80      	pop	{r7, pc}
    c1ba:	bf00      	nop
    c1bc:	0000b9c9 	.word	0x0000b9c9

0000c1c0 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    c1c0:	b580      	push	{r7, lr}
    c1c2:	b082      	sub	sp, #8
    c1c4:	af00      	add	r7, sp, #0
    c1c6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    c1c8:	687b      	ldr	r3, [r7, #4]
    c1ca:	68db      	ldr	r3, [r3, #12]
    c1cc:	4618      	mov	r0, r3
    c1ce:	4b03      	ldr	r3, [pc, #12]	; (c1dc <_tc_timer_stop+0x1c>)
    c1d0:	4798      	blx	r3
}
    c1d2:	bf00      	nop
    c1d4:	3708      	adds	r7, #8
    c1d6:	46bd      	mov	sp, r7
    c1d8:	bd80      	pop	{r7, pc}
    c1da:	bf00      	nop
    c1dc:	0000ba29 	.word	0x0000ba29

0000c1e0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    c1e0:	b580      	push	{r7, lr}
    c1e2:	b084      	sub	sp, #16
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	6078      	str	r0, [r7, #4]
    c1e8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    c1ea:	687b      	ldr	r3, [r7, #4]
    c1ec:	68db      	ldr	r3, [r3, #12]
    c1ee:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c1f0:	68f8      	ldr	r0, [r7, #12]
    c1f2:	4b14      	ldr	r3, [pc, #80]	; (c244 <_tc_timer_set_period+0x64>)
    c1f4:	4798      	blx	r3
    c1f6:	4603      	mov	r3, r0
    c1f8:	2b02      	cmp	r3, #2
    c1fa:	d105      	bne.n	c208 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    c1fc:	683a      	ldr	r2, [r7, #0]
    c1fe:	2100      	movs	r1, #0
    c200:	68f8      	ldr	r0, [r7, #12]
    c202:	4b11      	ldr	r3, [pc, #68]	; (c248 <_tc_timer_set_period+0x68>)
    c204:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    c206:	e019      	b.n	c23c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c208:	68f8      	ldr	r0, [r7, #12]
    c20a:	4b0e      	ldr	r3, [pc, #56]	; (c244 <_tc_timer_set_period+0x64>)
    c20c:	4798      	blx	r3
    c20e:	4603      	mov	r3, r0
    c210:	2b00      	cmp	r3, #0
    c212:	d107      	bne.n	c224 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    c214:	683b      	ldr	r3, [r7, #0]
    c216:	b29b      	uxth	r3, r3
    c218:	461a      	mov	r2, r3
    c21a:	2100      	movs	r1, #0
    c21c:	68f8      	ldr	r0, [r7, #12]
    c21e:	4b0b      	ldr	r3, [pc, #44]	; (c24c <_tc_timer_set_period+0x6c>)
    c220:	4798      	blx	r3
}
    c222:	e00b      	b.n	c23c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c224:	68f8      	ldr	r0, [r7, #12]
    c226:	4b07      	ldr	r3, [pc, #28]	; (c244 <_tc_timer_set_period+0x64>)
    c228:	4798      	blx	r3
    c22a:	4603      	mov	r3, r0
    c22c:	2b01      	cmp	r3, #1
    c22e:	d105      	bne.n	c23c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    c230:	683b      	ldr	r3, [r7, #0]
    c232:	b2db      	uxtb	r3, r3
    c234:	4619      	mov	r1, r3
    c236:	68f8      	ldr	r0, [r7, #12]
    c238:	4b05      	ldr	r3, [pc, #20]	; (c250 <_tc_timer_set_period+0x70>)
    c23a:	4798      	blx	r3
}
    c23c:	bf00      	nop
    c23e:	3710      	adds	r7, #16
    c240:	46bd      	mov	sp, r7
    c242:	bd80      	pop	{r7, pc}
    c244:	0000ba51 	.word	0x0000ba51
    c248:	0000bc09 	.word	0x0000bc09
    c24c:	0000bba5 	.word	0x0000bba5
    c250:	0000bb29 	.word	0x0000bb29

0000c254 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    c254:	b580      	push	{r7, lr}
    c256:	b084      	sub	sp, #16
    c258:	af00      	add	r7, sp, #0
    c25a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c25c:	687b      	ldr	r3, [r7, #4]
    c25e:	68db      	ldr	r3, [r3, #12]
    c260:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c262:	68f8      	ldr	r0, [r7, #12]
    c264:	4b13      	ldr	r3, [pc, #76]	; (c2b4 <_tc_timer_get_period+0x60>)
    c266:	4798      	blx	r3
    c268:	4603      	mov	r3, r0
    c26a:	2b02      	cmp	r3, #2
    c26c:	d105      	bne.n	c27a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    c26e:	2100      	movs	r1, #0
    c270:	68f8      	ldr	r0, [r7, #12]
    c272:	4b11      	ldr	r3, [pc, #68]	; (c2b8 <_tc_timer_get_period+0x64>)
    c274:	4798      	blx	r3
    c276:	4603      	mov	r3, r0
    c278:	e017      	b.n	c2aa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c27a:	68f8      	ldr	r0, [r7, #12]
    c27c:	4b0d      	ldr	r3, [pc, #52]	; (c2b4 <_tc_timer_get_period+0x60>)
    c27e:	4798      	blx	r3
    c280:	4603      	mov	r3, r0
    c282:	2b00      	cmp	r3, #0
    c284:	d105      	bne.n	c292 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    c286:	2100      	movs	r1, #0
    c288:	68f8      	ldr	r0, [r7, #12]
    c28a:	4b0c      	ldr	r3, [pc, #48]	; (c2bc <_tc_timer_get_period+0x68>)
    c28c:	4798      	blx	r3
    c28e:	4603      	mov	r3, r0
    c290:	e00b      	b.n	c2aa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    c292:	68f8      	ldr	r0, [r7, #12]
    c294:	4b07      	ldr	r3, [pc, #28]	; (c2b4 <_tc_timer_get_period+0x60>)
    c296:	4798      	blx	r3
    c298:	4603      	mov	r3, r0
    c29a:	2b01      	cmp	r3, #1
    c29c:	d104      	bne.n	c2a8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    c29e:	68f8      	ldr	r0, [r7, #12]
    c2a0:	4b07      	ldr	r3, [pc, #28]	; (c2c0 <_tc_timer_get_period+0x6c>)
    c2a2:	4798      	blx	r3
    c2a4:	4603      	mov	r3, r0
    c2a6:	e000      	b.n	c2aa <_tc_timer_get_period+0x56>
	}

	return 0;
    c2a8:	2300      	movs	r3, #0
}
    c2aa:	4618      	mov	r0, r3
    c2ac:	3710      	adds	r7, #16
    c2ae:	46bd      	mov	sp, r7
    c2b0:	bd80      	pop	{r7, pc}
    c2b2:	bf00      	nop
    c2b4:	0000ba51 	.word	0x0000ba51
    c2b8:	0000bc39 	.word	0x0000bc39
    c2bc:	0000bbd9 	.word	0x0000bbd9
    c2c0:	0000bb51 	.word	0x0000bb51

0000c2c4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b082      	sub	sp, #8
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    c2cc:	687b      	ldr	r3, [r7, #4]
    c2ce:	68db      	ldr	r3, [r3, #12]
    c2d0:	4618      	mov	r0, r3
    c2d2:	4b03      	ldr	r3, [pc, #12]	; (c2e0 <_tc_timer_is_started+0x1c>)
    c2d4:	4798      	blx	r3
    c2d6:	4603      	mov	r3, r0
}
    c2d8:	4618      	mov	r0, r3
    c2da:	3708      	adds	r7, #8
    c2dc:	46bd      	mov	sp, r7
    c2de:	bd80      	pop	{r7, pc}
    c2e0:	0000b9f1 	.word	0x0000b9f1

0000c2e4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    c2e4:	b480      	push	{r7}
    c2e6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    c2e8:	4b02      	ldr	r3, [pc, #8]	; (c2f4 <_tc_get_timer+0x10>)
}
    c2ea:	4618      	mov	r0, r3
    c2ec:	46bd      	mov	sp, r7
    c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2f2:	4770      	bx	lr
    c2f4:	20000580 	.word	0x20000580

0000c2f8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    c2f8:	b480      	push	{r7}
    c2fa:	af00      	add	r7, sp, #0
	return NULL;
    c2fc:	2300      	movs	r3, #0
}
    c2fe:	4618      	mov	r0, r3
    c300:	46bd      	mov	sp, r7
    c302:	f85d 7b04 	ldr.w	r7, [sp], #4
    c306:	4770      	bx	lr

0000c308 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    c308:	b580      	push	{r7, lr}
    c30a:	b084      	sub	sp, #16
    c30c:	af00      	add	r7, sp, #0
    c30e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c310:	687b      	ldr	r3, [r7, #4]
    c312:	68db      	ldr	r3, [r3, #12]
    c314:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    c316:	68f8      	ldr	r0, [r7, #12]
    c318:	4b0e      	ldr	r3, [pc, #56]	; (c354 <_tc_timer_set_irq+0x4c>)
    c31a:	4798      	blx	r3
    c31c:	4603      	mov	r3, r0
    c31e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    c320:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    c324:	490c      	ldr	r1, [pc, #48]	; (c358 <_tc_timer_set_irq+0x50>)
    c326:	2001      	movs	r0, #1
    c328:	4b0c      	ldr	r3, [pc, #48]	; (c35c <_tc_timer_set_irq+0x54>)
    c32a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    c32c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    c330:	490b      	ldr	r1, [pc, #44]	; (c360 <_tc_timer_set_irq+0x58>)
    c332:	4613      	mov	r3, r2
    c334:	009b      	lsls	r3, r3, #2
    c336:	4413      	add	r3, r2
    c338:	009b      	lsls	r3, r3, #2
    c33a:	440b      	add	r3, r1
    c33c:	3302      	adds	r3, #2
    c33e:	f9b3 3000 	ldrsh.w	r3, [r3]
    c342:	b2db      	uxtb	r3, r3
    c344:	4618      	mov	r0, r3
    c346:	4b07      	ldr	r3, [pc, #28]	; (c364 <_tc_timer_set_irq+0x5c>)
    c348:	4798      	blx	r3
}
    c34a:	bf00      	nop
    c34c:	3710      	adds	r7, #16
    c34e:	46bd      	mov	sp, r7
    c350:	bd80      	pop	{r7, pc}
    c352:	bf00      	nop
    c354:	0000c4b5 	.word	0x0000c4b5
    c358:	00012cdc 	.word	0x00012cdc
    c35c:	00007361 	.word	0x00007361
    c360:	20000508 	.word	0x20000508
    c364:	000081f9 	.word	0x000081f9

0000c368 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    c368:	b580      	push	{r7, lr}
    c36a:	b084      	sub	sp, #16
    c36c:	af00      	add	r7, sp, #0
    c36e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c370:	687b      	ldr	r3, [r7, #4]
    c372:	68db      	ldr	r3, [r3, #12]
    c374:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    c376:	68f8      	ldr	r0, [r7, #12]
    c378:	4b07      	ldr	r3, [pc, #28]	; (c398 <tc_interrupt_handler+0x30>)
    c37a:	4798      	blx	r3
    c37c:	4603      	mov	r3, r0
    c37e:	2b00      	cmp	r3, #0
    c380:	d006      	beq.n	c390 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    c382:	68f8      	ldr	r0, [r7, #12]
    c384:	4b05      	ldr	r3, [pc, #20]	; (c39c <tc_interrupt_handler+0x34>)
    c386:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    c388:	687b      	ldr	r3, [r7, #4]
    c38a:	681b      	ldr	r3, [r3, #0]
    c38c:	6878      	ldr	r0, [r7, #4]
    c38e:	4798      	blx	r3
	}
}
    c390:	bf00      	nop
    c392:	3710      	adds	r7, #16
    c394:	46bd      	mov	sp, r7
    c396:	bd80      	pop	{r7, pc}
    c398:	0000b901 	.word	0x0000b901
    c39c:	0000b929 	.word	0x0000b929

0000c3a0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    c3a0:	b580      	push	{r7, lr}
    c3a2:	b084      	sub	sp, #16
    c3a4:	af00      	add	r7, sp, #0
    c3a6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c3a8:	687b      	ldr	r3, [r7, #4]
    c3aa:	691b      	ldr	r3, [r3, #16]
    c3ac:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    c3ae:	68f8      	ldr	r0, [r7, #12]
    c3b0:	4b12      	ldr	r3, [pc, #72]	; (c3fc <tc_pwm_interrupt_handler+0x5c>)
    c3b2:	4798      	blx	r3
    c3b4:	4603      	mov	r3, r0
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	d00a      	beq.n	c3d0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    c3ba:	68f8      	ldr	r0, [r7, #12]
    c3bc:	4b10      	ldr	r3, [pc, #64]	; (c400 <tc_pwm_interrupt_handler+0x60>)
    c3be:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    c3c0:	687b      	ldr	r3, [r7, #4]
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d003      	beq.n	c3d0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    c3c8:	687b      	ldr	r3, [r7, #4]
    c3ca:	681b      	ldr	r3, [r3, #0]
    c3cc:	6878      	ldr	r0, [r7, #4]
    c3ce:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    c3d0:	68f8      	ldr	r0, [r7, #12]
    c3d2:	4b0c      	ldr	r3, [pc, #48]	; (c404 <tc_pwm_interrupt_handler+0x64>)
    c3d4:	4798      	blx	r3
    c3d6:	4603      	mov	r3, r0
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d00a      	beq.n	c3f2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    c3dc:	68f8      	ldr	r0, [r7, #12]
    c3de:	4b0a      	ldr	r3, [pc, #40]	; (c408 <tc_pwm_interrupt_handler+0x68>)
    c3e0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    c3e2:	687b      	ldr	r3, [r7, #4]
    c3e4:	685b      	ldr	r3, [r3, #4]
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d003      	beq.n	c3f2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    c3ea:	687b      	ldr	r3, [r7, #4]
    c3ec:	685b      	ldr	r3, [r3, #4]
    c3ee:	6878      	ldr	r0, [r7, #4]
    c3f0:	4798      	blx	r3
		}
	}
}
    c3f2:	bf00      	nop
    c3f4:	3710      	adds	r7, #16
    c3f6:	46bd      	mov	sp, r7
    c3f8:	bd80      	pop	{r7, pc}
    c3fa:	bf00      	nop
    c3fc:	0000b901 	.word	0x0000b901
    c400:	0000b929 	.word	0x0000b929
    c404:	0000b977 	.word	0x0000b977
    c408:	0000b943 	.word	0x0000b943

0000c40c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    c40c:	b580      	push	{r7, lr}
    c40e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    c410:	4b03      	ldr	r3, [pc, #12]	; (c420 <TC0_Handler+0x14>)
    c412:	681b      	ldr	r3, [r3, #0]
    c414:	4618      	mov	r0, r3
    c416:	4b03      	ldr	r3, [pc, #12]	; (c424 <TC0_Handler+0x18>)
    c418:	4798      	blx	r3
}
    c41a:	bf00      	nop
    c41c:	bd80      	pop	{r7, pc}
    c41e:	bf00      	nop
    c420:	20001bd8 	.word	0x20001bd8
    c424:	0000c369 	.word	0x0000c369

0000c428 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    c428:	b580      	push	{r7, lr}
    c42a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    c42c:	4b03      	ldr	r3, [pc, #12]	; (c43c <TC2_Handler+0x14>)
    c42e:	681b      	ldr	r3, [r3, #0]
    c430:	4618      	mov	r0, r3
    c432:	4b03      	ldr	r3, [pc, #12]	; (c440 <TC2_Handler+0x18>)
    c434:	4798      	blx	r3
}
    c436:	bf00      	nop
    c438:	bd80      	pop	{r7, pc}
    c43a:	bf00      	nop
    c43c:	20001bdc 	.word	0x20001bdc
    c440:	0000c369 	.word	0x0000c369

0000c444 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    c444:	b580      	push	{r7, lr}
    c446:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    c448:	4b03      	ldr	r3, [pc, #12]	; (c458 <TC4_Handler+0x14>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	4618      	mov	r0, r3
    c44e:	4b03      	ldr	r3, [pc, #12]	; (c45c <TC4_Handler+0x18>)
    c450:	4798      	blx	r3
}
    c452:	bf00      	nop
    c454:	bd80      	pop	{r7, pc}
    c456:	bf00      	nop
    c458:	20001be0 	.word	0x20001be0
    c45c:	0000c369 	.word	0x0000c369

0000c460 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    c460:	b580      	push	{r7, lr}
    c462:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    c464:	4b03      	ldr	r3, [pc, #12]	; (c474 <TC5_Handler+0x14>)
    c466:	681b      	ldr	r3, [r3, #0]
    c468:	4618      	mov	r0, r3
    c46a:	4b03      	ldr	r3, [pc, #12]	; (c478 <TC5_Handler+0x18>)
    c46c:	4798      	blx	r3
}
    c46e:	bf00      	nop
    c470:	bd80      	pop	{r7, pc}
    c472:	bf00      	nop
    c474:	20001be4 	.word	0x20001be4
    c478:	0000c369 	.word	0x0000c369

0000c47c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    c47c:	b580      	push	{r7, lr}
    c47e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    c480:	4b03      	ldr	r3, [pc, #12]	; (c490 <TC6_Handler+0x14>)
    c482:	681b      	ldr	r3, [r3, #0]
    c484:	4618      	mov	r0, r3
    c486:	4b03      	ldr	r3, [pc, #12]	; (c494 <TC6_Handler+0x18>)
    c488:	4798      	blx	r3
}
    c48a:	bf00      	nop
    c48c:	bd80      	pop	{r7, pc}
    c48e:	bf00      	nop
    c490:	20001be8 	.word	0x20001be8
    c494:	0000c369 	.word	0x0000c369

0000c498 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    c498:	b580      	push	{r7, lr}
    c49a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    c49c:	4b03      	ldr	r3, [pc, #12]	; (c4ac <TC7_Handler+0x14>)
    c49e:	681b      	ldr	r3, [r3, #0]
    c4a0:	4618      	mov	r0, r3
    c4a2:	4b03      	ldr	r3, [pc, #12]	; (c4b0 <TC7_Handler+0x18>)
    c4a4:	4798      	blx	r3
}
    c4a6:	bf00      	nop
    c4a8:	bd80      	pop	{r7, pc}
    c4aa:	bf00      	nop
    c4ac:	20001bec 	.word	0x20001bec
    c4b0:	0000c3a1 	.word	0x0000c3a1

0000c4b4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    c4b4:	b580      	push	{r7, lr}
    c4b6:	b084      	sub	sp, #16
    c4b8:	af00      	add	r7, sp, #0
    c4ba:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    c4bc:	6878      	ldr	r0, [r7, #4]
    c4be:	4b13      	ldr	r3, [pc, #76]	; (c50c <get_tc_index+0x58>)
    c4c0:	4798      	blx	r3
    c4c2:	4603      	mov	r3, r0
    c4c4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    c4c6:	2300      	movs	r3, #0
    c4c8:	73fb      	strb	r3, [r7, #15]
    c4ca:	e010      	b.n	c4ee <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    c4cc:	7bfa      	ldrb	r2, [r7, #15]
    c4ce:	4910      	ldr	r1, [pc, #64]	; (c510 <get_tc_index+0x5c>)
    c4d0:	4613      	mov	r3, r2
    c4d2:	009b      	lsls	r3, r3, #2
    c4d4:	4413      	add	r3, r2
    c4d6:	009b      	lsls	r3, r3, #2
    c4d8:	440b      	add	r3, r1
    c4da:	781b      	ldrb	r3, [r3, #0]
    c4dc:	7bba      	ldrb	r2, [r7, #14]
    c4de:	429a      	cmp	r2, r3
    c4e0:	d102      	bne.n	c4e8 <get_tc_index+0x34>
			return i;
    c4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    c4e6:	e00d      	b.n	c504 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    c4e8:	7bfb      	ldrb	r3, [r7, #15]
    c4ea:	3301      	adds	r3, #1
    c4ec:	73fb      	strb	r3, [r7, #15]
    c4ee:	7bfb      	ldrb	r3, [r7, #15]
    c4f0:	2b05      	cmp	r3, #5
    c4f2:	d9eb      	bls.n	c4cc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    c4f4:	f240 221d 	movw	r2, #541	; 0x21d
    c4f8:	4906      	ldr	r1, [pc, #24]	; (c514 <get_tc_index+0x60>)
    c4fa:	2000      	movs	r0, #0
    c4fc:	4b06      	ldr	r3, [pc, #24]	; (c518 <get_tc_index+0x64>)
    c4fe:	4798      	blx	r3
	return -1;
    c500:	f04f 33ff 	mov.w	r3, #4294967295
}
    c504:	4618      	mov	r0, r3
    c506:	3710      	adds	r7, #16
    c508:	46bd      	mov	sp, r7
    c50a:	bd80      	pop	{r7, pc}
    c50c:	0000c5b9 	.word	0x0000c5b9
    c510:	20000508 	.word	0x20000508
    c514:	00012cdc 	.word	0x00012cdc
    c518:	00007361 	.word	0x00007361

0000c51c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    c51c:	b480      	push	{r7}
    c51e:	b083      	sub	sp, #12
    c520:	af00      	add	r7, sp, #0
    c522:	6078      	str	r0, [r7, #4]
    c524:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    c526:	687b      	ldr	r3, [r7, #4]
    c528:	4a17      	ldr	r2, [pc, #92]	; (c588 <_tc_init_irq_param+0x6c>)
    c52a:	4293      	cmp	r3, r2
    c52c:	d102      	bne.n	c534 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    c52e:	4a17      	ldr	r2, [pc, #92]	; (c58c <_tc_init_irq_param+0x70>)
    c530:	683b      	ldr	r3, [r7, #0]
    c532:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	4a16      	ldr	r2, [pc, #88]	; (c590 <_tc_init_irq_param+0x74>)
    c538:	4293      	cmp	r3, r2
    c53a:	d102      	bne.n	c542 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    c53c:	4a15      	ldr	r2, [pc, #84]	; (c594 <_tc_init_irq_param+0x78>)
    c53e:	683b      	ldr	r3, [r7, #0]
    c540:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	4a14      	ldr	r2, [pc, #80]	; (c598 <_tc_init_irq_param+0x7c>)
    c546:	4293      	cmp	r3, r2
    c548:	d102      	bne.n	c550 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    c54a:	4a14      	ldr	r2, [pc, #80]	; (c59c <_tc_init_irq_param+0x80>)
    c54c:	683b      	ldr	r3, [r7, #0]
    c54e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    c550:	687b      	ldr	r3, [r7, #4]
    c552:	4a13      	ldr	r2, [pc, #76]	; (c5a0 <_tc_init_irq_param+0x84>)
    c554:	4293      	cmp	r3, r2
    c556:	d102      	bne.n	c55e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    c558:	4a12      	ldr	r2, [pc, #72]	; (c5a4 <_tc_init_irq_param+0x88>)
    c55a:	683b      	ldr	r3, [r7, #0]
    c55c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	4a11      	ldr	r2, [pc, #68]	; (c5a8 <_tc_init_irq_param+0x8c>)
    c562:	4293      	cmp	r3, r2
    c564:	d102      	bne.n	c56c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    c566:	4a11      	ldr	r2, [pc, #68]	; (c5ac <_tc_init_irq_param+0x90>)
    c568:	683b      	ldr	r3, [r7, #0]
    c56a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    c56c:	687b      	ldr	r3, [r7, #4]
    c56e:	4a10      	ldr	r2, [pc, #64]	; (c5b0 <_tc_init_irq_param+0x94>)
    c570:	4293      	cmp	r3, r2
    c572:	d102      	bne.n	c57a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    c574:	4a0f      	ldr	r2, [pc, #60]	; (c5b4 <_tc_init_irq_param+0x98>)
    c576:	683b      	ldr	r3, [r7, #0]
    c578:	6013      	str	r3, [r2, #0]
	}
}
    c57a:	bf00      	nop
    c57c:	370c      	adds	r7, #12
    c57e:	46bd      	mov	sp, r7
    c580:	f85d 7b04 	ldr.w	r7, [sp], #4
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	40003800 	.word	0x40003800
    c58c:	20001bd8 	.word	0x20001bd8
    c590:	4101a000 	.word	0x4101a000
    c594:	20001bdc 	.word	0x20001bdc
    c598:	42001400 	.word	0x42001400
    c59c:	20001be0 	.word	0x20001be0
    c5a0:	42001800 	.word	0x42001800
    c5a4:	20001be4 	.word	0x20001be4
    c5a8:	43001400 	.word	0x43001400
    c5ac:	20001be8 	.word	0x20001be8
    c5b0:	43001800 	.word	0x43001800
    c5b4:	20001bec 	.word	0x20001bec

0000c5b8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    c5b8:	b4b0      	push	{r4, r5, r7}
    c5ba:	b08d      	sub	sp, #52	; 0x34
    c5bc:	af00      	add	r7, sp, #0
    c5be:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    c5c0:	4b13      	ldr	r3, [pc, #76]	; (c610 <_get_hardware_offset+0x58>)
    c5c2:	f107 040c 	add.w	r4, r7, #12
    c5c6:	461d      	mov	r5, r3
    c5c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c5cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c5d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c5d4:	2300      	movs	r3, #0
    c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5d8:	e010      	b.n	c5fc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5dc:	009b      	lsls	r3, r3, #2
    c5de:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c5e2:	4413      	add	r3, r2
    c5e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    c5e8:	461a      	mov	r2, r3
    c5ea:	687b      	ldr	r3, [r7, #4]
    c5ec:	429a      	cmp	r2, r3
    c5ee:	d102      	bne.n	c5f6 <_get_hardware_offset+0x3e>
			return i;
    c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f2:	b2db      	uxtb	r3, r3
    c5f4:	e006      	b.n	c604 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f8:	3301      	adds	r3, #1
    c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5fe:	2b07      	cmp	r3, #7
    c600:	d9eb      	bls.n	c5da <_get_hardware_offset+0x22>
		}
	}
	return 0;
    c602:	2300      	movs	r3, #0
}
    c604:	4618      	mov	r0, r3
    c606:	3734      	adds	r7, #52	; 0x34
    c608:	46bd      	mov	sp, r7
    c60a:	bcb0      	pop	{r4, r5, r7}
    c60c:	4770      	bx	lr
    c60e:	bf00      	nop
    c610:	00012cf0 	.word	0x00012cf0

0000c614 <__NVIC_EnableIRQ>:
{
    c614:	b480      	push	{r7}
    c616:	b083      	sub	sp, #12
    c618:	af00      	add	r7, sp, #0
    c61a:	4603      	mov	r3, r0
    c61c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c61e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c622:	2b00      	cmp	r3, #0
    c624:	db0b      	blt.n	c63e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c626:	4909      	ldr	r1, [pc, #36]	; (c64c <__NVIC_EnableIRQ+0x38>)
    c628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c62c:	095b      	lsrs	r3, r3, #5
    c62e:	88fa      	ldrh	r2, [r7, #6]
    c630:	f002 021f 	and.w	r2, r2, #31
    c634:	2001      	movs	r0, #1
    c636:	fa00 f202 	lsl.w	r2, r0, r2
    c63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c63e:	bf00      	nop
    c640:	370c      	adds	r7, #12
    c642:	46bd      	mov	sp, r7
    c644:	f85d 7b04 	ldr.w	r7, [sp], #4
    c648:	4770      	bx	lr
    c64a:	bf00      	nop
    c64c:	e000e100 	.word	0xe000e100

0000c650 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    c650:	b480      	push	{r7}
    c652:	b087      	sub	sp, #28
    c654:	af00      	add	r7, sp, #0
    c656:	60f8      	str	r0, [r7, #12]
    c658:	460b      	mov	r3, r1
    c65a:	607a      	str	r2, [r7, #4]
    c65c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    c65e:	7afa      	ldrb	r2, [r7, #11]
    c660:	68f9      	ldr	r1, [r7, #12]
    c662:	4613      	mov	r3, r2
    c664:	009b      	lsls	r3, r3, #2
    c666:	4413      	add	r3, r2
    c668:	009b      	lsls	r3, r3, #2
    c66a:	440b      	add	r3, r1
    c66c:	3340      	adds	r3, #64	; 0x40
    c66e:	681b      	ldr	r3, [r3, #0]
    c670:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    c672:	697a      	ldr	r2, [r7, #20]
    c674:	687b      	ldr	r3, [r7, #4]
    c676:	4013      	ands	r3, r2
    c678:	617b      	str	r3, [r7, #20]
	return tmp;
    c67a:	697b      	ldr	r3, [r7, #20]
}
    c67c:	4618      	mov	r0, r3
    c67e:	371c      	adds	r7, #28
    c680:	46bd      	mov	sp, r7
    c682:	f85d 7b04 	ldr.w	r7, [sp], #4
    c686:	4770      	bx	lr

0000c688 <hri_oscctrl_get_STATUS_reg>:
{
    c688:	b480      	push	{r7}
    c68a:	b085      	sub	sp, #20
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
    c690:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c692:	687b      	ldr	r3, [r7, #4]
    c694:	691b      	ldr	r3, [r3, #16]
    c696:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c698:	68fa      	ldr	r2, [r7, #12]
    c69a:	683b      	ldr	r3, [r7, #0]
    c69c:	4013      	ands	r3, r2
    c69e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c6a0:	68fb      	ldr	r3, [r7, #12]
}
    c6a2:	4618      	mov	r0, r3
    c6a4:	3714      	adds	r7, #20
    c6a6:	46bd      	mov	sp, r7
    c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6ac:	4770      	bx	lr

0000c6ae <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    c6ae:	b480      	push	{r7}
    c6b0:	b085      	sub	sp, #20
    c6b2:	af00      	add	r7, sp, #0
    c6b4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c6b6:	687b      	ldr	r3, [r7, #4]
    c6b8:	f893 3020 	ldrb.w	r3, [r3, #32]
    c6bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    c6be:	7bfb      	ldrb	r3, [r7, #15]
    c6c0:	f003 0301 	and.w	r3, r3, #1
    c6c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    c6c6:	7bfb      	ldrb	r3, [r7, #15]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	bf14      	ite	ne
    c6cc:	2301      	movne	r3, #1
    c6ce:	2300      	moveq	r3, #0
    c6d0:	b2db      	uxtb	r3, r3
}
    c6d2:	4618      	mov	r0, r3
    c6d4:	3714      	adds	r7, #20
    c6d6:	46bd      	mov	sp, r7
    c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6dc:	4770      	bx	lr

0000c6de <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c6de:	b480      	push	{r7}
    c6e0:	b083      	sub	sp, #12
    c6e2:	af00      	add	r7, sp, #0
    c6e4:	6078      	str	r0, [r7, #4]
    c6e6:	460b      	mov	r3, r1
    c6e8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c6ea:	bf00      	nop
    c6ec:	687b      	ldr	r3, [r7, #4]
    c6ee:	789b      	ldrb	r3, [r3, #2]
    c6f0:	b2da      	uxtb	r2, r3
    c6f2:	78fb      	ldrb	r3, [r7, #3]
    c6f4:	4013      	ands	r3, r2
    c6f6:	b2db      	uxtb	r3, r3
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d1f7      	bne.n	c6ec <hri_usb_wait_for_sync+0xe>
	};
}
    c6fc:	bf00      	nop
    c6fe:	370c      	adds	r7, #12
    c700:	46bd      	mov	sp, r7
    c702:	f85d 7b04 	ldr.w	r7, [sp], #4
    c706:	4770      	bx	lr

0000c708 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    c708:	b480      	push	{r7}
    c70a:	b083      	sub	sp, #12
    c70c:	af00      	add	r7, sp, #0
    c70e:	6078      	str	r0, [r7, #4]
    c710:	460b      	mov	r3, r1
    c712:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	789b      	ldrb	r3, [r3, #2]
    c718:	b2da      	uxtb	r2, r3
    c71a:	78fb      	ldrb	r3, [r7, #3]
    c71c:	4013      	ands	r3, r2
    c71e:	b2db      	uxtb	r3, r3
    c720:	2b00      	cmp	r3, #0
    c722:	bf14      	ite	ne
    c724:	2301      	movne	r3, #1
    c726:	2300      	moveq	r3, #0
    c728:	b2db      	uxtb	r3, r3
}
    c72a:	4618      	mov	r0, r3
    c72c:	370c      	adds	r7, #12
    c72e:	46bd      	mov	sp, r7
    c730:	f85d 7b04 	ldr.w	r7, [sp], #4
    c734:	4770      	bx	lr

0000c736 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    c736:	b480      	push	{r7}
    c738:	b085      	sub	sp, #20
    c73a:	af00      	add	r7, sp, #0
    c73c:	6078      	str	r0, [r7, #4]
    c73e:	460b      	mov	r3, r1
    c740:	70fb      	strb	r3, [r7, #3]
    c742:	4613      	mov	r3, r2
    c744:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c746:	78fb      	ldrb	r3, [r7, #3]
    c748:	687a      	ldr	r2, [r7, #4]
    c74a:	3308      	adds	r3, #8
    c74c:	015b      	lsls	r3, r3, #5
    c74e:	4413      	add	r3, r2
    c750:	3307      	adds	r3, #7
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    c756:	7bfa      	ldrb	r2, [r7, #15]
    c758:	78bb      	ldrb	r3, [r7, #2]
    c75a:	4013      	ands	r3, r2
    c75c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c75e:	7bfb      	ldrb	r3, [r7, #15]
}
    c760:	4618      	mov	r0, r3
    c762:	3714      	adds	r7, #20
    c764:	46bd      	mov	sp, r7
    c766:	f85d 7b04 	ldr.w	r7, [sp], #4
    c76a:	4770      	bx	lr

0000c76c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    c76c:	b480      	push	{r7}
    c76e:	b083      	sub	sp, #12
    c770:	af00      	add	r7, sp, #0
    c772:	6078      	str	r0, [r7, #4]
    c774:	460b      	mov	r3, r1
    c776:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c778:	78fb      	ldrb	r3, [r7, #3]
    c77a:	687a      	ldr	r2, [r7, #4]
    c77c:	3308      	adds	r3, #8
    c77e:	015b      	lsls	r3, r3, #5
    c780:	4413      	add	r3, r2
    c782:	3307      	adds	r3, #7
    c784:	781b      	ldrb	r3, [r3, #0]
    c786:	b2db      	uxtb	r3, r3
}
    c788:	4618      	mov	r0, r3
    c78a:	370c      	adds	r7, #12
    c78c:	46bd      	mov	sp, r7
    c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c792:	4770      	bx	lr

0000c794 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    c794:	b480      	push	{r7}
    c796:	b083      	sub	sp, #12
    c798:	af00      	add	r7, sp, #0
    c79a:	6078      	str	r0, [r7, #4]
    c79c:	460b      	mov	r3, r1
    c79e:	70fb      	strb	r3, [r7, #3]
    c7a0:	4613      	mov	r3, r2
    c7a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c7a4:	78fb      	ldrb	r3, [r7, #3]
    c7a6:	687a      	ldr	r2, [r7, #4]
    c7a8:	3308      	adds	r3, #8
    c7aa:	015b      	lsls	r3, r3, #5
    c7ac:	4413      	add	r3, r2
    c7ae:	3307      	adds	r3, #7
    c7b0:	78ba      	ldrb	r2, [r7, #2]
    c7b2:	701a      	strb	r2, [r3, #0]
}
    c7b4:	bf00      	nop
    c7b6:	370c      	adds	r7, #12
    c7b8:	46bd      	mov	sp, r7
    c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7be:	4770      	bx	lr

0000c7c0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    c7c0:	b480      	push	{r7}
    c7c2:	b083      	sub	sp, #12
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	6078      	str	r0, [r7, #4]
    c7c8:	460b      	mov	r3, r1
    c7ca:	70fb      	strb	r3, [r7, #3]
    c7cc:	4613      	mov	r3, r2
    c7ce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c7d0:	78fb      	ldrb	r3, [r7, #3]
    c7d2:	687a      	ldr	r2, [r7, #4]
    c7d4:	3308      	adds	r3, #8
    c7d6:	015b      	lsls	r3, r3, #5
    c7d8:	4413      	add	r3, r2
    c7da:	3305      	adds	r3, #5
    c7dc:	78ba      	ldrb	r2, [r7, #2]
    c7de:	701a      	strb	r2, [r3, #0]
}
    c7e0:	bf00      	nop
    c7e2:	370c      	adds	r7, #12
    c7e4:	46bd      	mov	sp, r7
    c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7ea:	4770      	bx	lr

0000c7ec <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    c7ec:	b480      	push	{r7}
    c7ee:	b083      	sub	sp, #12
    c7f0:	af00      	add	r7, sp, #0
    c7f2:	6078      	str	r0, [r7, #4]
    c7f4:	460b      	mov	r3, r1
    c7f6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    c7f8:	78fb      	ldrb	r3, [r7, #3]
    c7fa:	687a      	ldr	r2, [r7, #4]
    c7fc:	3308      	adds	r3, #8
    c7fe:	015b      	lsls	r3, r3, #5
    c800:	4413      	add	r3, r2
    c802:	3306      	adds	r3, #6
    c804:	781b      	ldrb	r3, [r3, #0]
    c806:	b2db      	uxtb	r3, r3
}
    c808:	4618      	mov	r0, r3
    c80a:	370c      	adds	r7, #12
    c80c:	46bd      	mov	sp, r7
    c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c812:	4770      	bx	lr

0000c814 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    c814:	b480      	push	{r7}
    c816:	b083      	sub	sp, #12
    c818:	af00      	add	r7, sp, #0
    c81a:	6078      	str	r0, [r7, #4]
    c81c:	460b      	mov	r3, r1
    c81e:	70fb      	strb	r3, [r7, #3]
    c820:	4613      	mov	r3, r2
    c822:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c824:	78fb      	ldrb	r3, [r7, #3]
    c826:	687a      	ldr	r2, [r7, #4]
    c828:	3308      	adds	r3, #8
    c82a:	015b      	lsls	r3, r3, #5
    c82c:	4413      	add	r3, r2
    c82e:	3304      	adds	r3, #4
    c830:	78ba      	ldrb	r2, [r7, #2]
    c832:	701a      	strb	r2, [r3, #0]
}
    c834:	bf00      	nop
    c836:	370c      	adds	r7, #12
    c838:	46bd      	mov	sp, r7
    c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c83e:	4770      	bx	lr

0000c840 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    c840:	b480      	push	{r7}
    c842:	b083      	sub	sp, #12
    c844:	af00      	add	r7, sp, #0
    c846:	6078      	str	r0, [r7, #4]
    c848:	460b      	mov	r3, r1
    c84a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c84c:	78fb      	ldrb	r3, [r7, #3]
    c84e:	687a      	ldr	r2, [r7, #4]
    c850:	015b      	lsls	r3, r3, #5
    c852:	4413      	add	r3, r2
    c854:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c858:	2210      	movs	r2, #16
    c85a:	701a      	strb	r2, [r3, #0]
}
    c85c:	bf00      	nop
    c85e:	370c      	adds	r7, #12
    c860:	46bd      	mov	sp, r7
    c862:	f85d 7b04 	ldr.w	r7, [sp], #4
    c866:	4770      	bx	lr

0000c868 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    c868:	b480      	push	{r7}
    c86a:	b083      	sub	sp, #12
    c86c:	af00      	add	r7, sp, #0
    c86e:	6078      	str	r0, [r7, #4]
    c870:	460b      	mov	r3, r1
    c872:	70fb      	strb	r3, [r7, #3]
    c874:	4613      	mov	r3, r2
    c876:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c878:	78fb      	ldrb	r3, [r7, #3]
    c87a:	687a      	ldr	r2, [r7, #4]
    c87c:	015b      	lsls	r3, r3, #5
    c87e:	4413      	add	r3, r2
    c880:	f203 1309 	addw	r3, r3, #265	; 0x109
    c884:	78ba      	ldrb	r2, [r7, #2]
    c886:	701a      	strb	r2, [r3, #0]
}
    c888:	bf00      	nop
    c88a:	370c      	adds	r7, #12
    c88c:	46bd      	mov	sp, r7
    c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c892:	4770      	bx	lr

0000c894 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    c894:	b480      	push	{r7}
    c896:	b083      	sub	sp, #12
    c898:	af00      	add	r7, sp, #0
    c89a:	6078      	str	r0, [r7, #4]
    c89c:	460b      	mov	r3, r1
    c89e:	70fb      	strb	r3, [r7, #3]
    c8a0:	4613      	mov	r3, r2
    c8a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c8a4:	78fb      	ldrb	r3, [r7, #3]
    c8a6:	687a      	ldr	r2, [r7, #4]
    c8a8:	015b      	lsls	r3, r3, #5
    c8aa:	4413      	add	r3, r2
    c8ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c8b0:	78ba      	ldrb	r2, [r7, #2]
    c8b2:	701a      	strb	r2, [r3, #0]
}
    c8b4:	bf00      	nop
    c8b6:	370c      	adds	r7, #12
    c8b8:	46bd      	mov	sp, r7
    c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8be:	4770      	bx	lr

0000c8c0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c8c0:	b480      	push	{r7}
    c8c2:	b085      	sub	sp, #20
    c8c4:	af00      	add	r7, sp, #0
    c8c6:	6078      	str	r0, [r7, #4]
    c8c8:	460b      	mov	r3, r1
    c8ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c8cc:	78fb      	ldrb	r3, [r7, #3]
    c8ce:	687a      	ldr	r2, [r7, #4]
    c8d0:	3308      	adds	r3, #8
    c8d2:	015b      	lsls	r3, r3, #5
    c8d4:	4413      	add	r3, r2
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c8da:	7bfb      	ldrb	r3, [r7, #15]
    c8dc:	f003 0307 	and.w	r3, r3, #7
    c8e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
    c8e4:	4618      	mov	r0, r3
    c8e6:	3714      	adds	r7, #20
    c8e8:	46bd      	mov	sp, r7
    c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8ee:	4770      	bx	lr

0000c8f0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    c8f0:	b480      	push	{r7}
    c8f2:	b085      	sub	sp, #20
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	6078      	str	r0, [r7, #4]
    c8f8:	460b      	mov	r3, r1
    c8fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c8fc:	78fb      	ldrb	r3, [r7, #3]
    c8fe:	687a      	ldr	r2, [r7, #4]
    c900:	3308      	adds	r3, #8
    c902:	015b      	lsls	r3, r3, #5
    c904:	4413      	add	r3, r2
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c90a:	7bfb      	ldrb	r3, [r7, #15]
    c90c:	091b      	lsrs	r3, r3, #4
    c90e:	b2db      	uxtb	r3, r3
    c910:	f003 0307 	and.w	r3, r3, #7
    c914:	73fb      	strb	r3, [r7, #15]
	return tmp;
    c916:	7bfb      	ldrb	r3, [r7, #15]
}
    c918:	4618      	mov	r0, r3
    c91a:	3714      	adds	r7, #20
    c91c:	46bd      	mov	sp, r7
    c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c922:	4770      	bx	lr

0000c924 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    c924:	b480      	push	{r7}
    c926:	b083      	sub	sp, #12
    c928:	af00      	add	r7, sp, #0
    c92a:	6078      	str	r0, [r7, #4]
    c92c:	460b      	mov	r3, r1
    c92e:	70fb      	strb	r3, [r7, #3]
    c930:	4613      	mov	r3, r2
    c932:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c934:	78fb      	ldrb	r3, [r7, #3]
    c936:	687a      	ldr	r2, [r7, #4]
    c938:	3308      	adds	r3, #8
    c93a:	015b      	lsls	r3, r3, #5
    c93c:	4413      	add	r3, r2
    c93e:	78ba      	ldrb	r2, [r7, #2]
    c940:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    c942:	bf00      	nop
    c944:	370c      	adds	r7, #12
    c946:	46bd      	mov	sp, r7
    c948:	f85d 7b04 	ldr.w	r7, [sp], #4
    c94c:	4770      	bx	lr

0000c94e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    c94e:	b480      	push	{r7}
    c950:	b083      	sub	sp, #12
    c952:	af00      	add	r7, sp, #0
    c954:	6078      	str	r0, [r7, #4]
    c956:	460b      	mov	r3, r1
    c958:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c95a:	78fb      	ldrb	r3, [r7, #3]
    c95c:	687a      	ldr	r2, [r7, #4]
    c95e:	3308      	adds	r3, #8
    c960:	015b      	lsls	r3, r3, #5
    c962:	4413      	add	r3, r2
    c964:	781b      	ldrb	r3, [r3, #0]
    c966:	b2db      	uxtb	r3, r3
}
    c968:	4618      	mov	r0, r3
    c96a:	370c      	adds	r7, #12
    c96c:	46bd      	mov	sp, r7
    c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c972:	4770      	bx	lr

0000c974 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    c974:	b480      	push	{r7}
    c976:	b083      	sub	sp, #12
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c97c:	687b      	ldr	r3, [r7, #4]
    c97e:	8b9b      	ldrh	r3, [r3, #28]
    c980:	b29b      	uxth	r3, r3
}
    c982:	4618      	mov	r0, r3
    c984:	370c      	adds	r7, #12
    c986:	46bd      	mov	sp, r7
    c988:	f85d 7b04 	ldr.w	r7, [sp], #4
    c98c:	4770      	bx	lr

0000c98e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    c98e:	b480      	push	{r7}
    c990:	b083      	sub	sp, #12
    c992:	af00      	add	r7, sp, #0
    c994:	6078      	str	r0, [r7, #4]
    c996:	460b      	mov	r3, r1
    c998:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c99a:	687b      	ldr	r3, [r7, #4]
    c99c:	887a      	ldrh	r2, [r7, #2]
    c99e:	839a      	strh	r2, [r3, #28]
}
    c9a0:	bf00      	nop
    c9a2:	370c      	adds	r7, #12
    c9a4:	46bd      	mov	sp, r7
    c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9aa:	4770      	bx	lr

0000c9ac <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c9ac:	b480      	push	{r7}
    c9ae:	b083      	sub	sp, #12
    c9b0:	af00      	add	r7, sp, #0
    c9b2:	6078      	str	r0, [r7, #4]
    c9b4:	460b      	mov	r3, r1
    c9b6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c9b8:	687b      	ldr	r3, [r7, #4]
    c9ba:	887a      	ldrh	r2, [r7, #2]
    c9bc:	831a      	strh	r2, [r3, #24]
}
    c9be:	bf00      	nop
    c9c0:	370c      	adds	r7, #12
    c9c2:	46bd      	mov	sp, r7
    c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9c8:	4770      	bx	lr

0000c9ca <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    c9ca:	b480      	push	{r7}
    c9cc:	b083      	sub	sp, #12
    c9ce:	af00      	add	r7, sp, #0
    c9d0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	8b1b      	ldrh	r3, [r3, #24]
    c9d6:	b29b      	uxth	r3, r3
}
    c9d8:	4618      	mov	r0, r3
    c9da:	370c      	adds	r7, #12
    c9dc:	46bd      	mov	sp, r7
    c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9e2:	4770      	bx	lr

0000c9e4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    c9e4:	b480      	push	{r7}
    c9e6:	b083      	sub	sp, #12
    c9e8:	af00      	add	r7, sp, #0
    c9ea:	6078      	str	r0, [r7, #4]
    c9ec:	460b      	mov	r3, r1
    c9ee:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c9f0:	687b      	ldr	r3, [r7, #4]
    c9f2:	887a      	ldrh	r2, [r7, #2]
    c9f4:	829a      	strh	r2, [r3, #20]
}
    c9f6:	bf00      	nop
    c9f8:	370c      	adds	r7, #12
    c9fa:	46bd      	mov	sp, r7
    c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca00:	4770      	bx	lr

0000ca02 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    ca02:	b480      	push	{r7}
    ca04:	b085      	sub	sp, #20
    ca06:	af00      	add	r7, sp, #0
    ca08:	6078      	str	r0, [r7, #4]
    ca0a:	460b      	mov	r3, r1
    ca0c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	789b      	ldrb	r3, [r3, #2]
    ca12:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ca14:	7bfa      	ldrb	r2, [r7, #15]
    ca16:	78fb      	ldrb	r3, [r7, #3]
    ca18:	4013      	ands	r3, r2
    ca1a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
    ca1e:	4618      	mov	r0, r3
    ca20:	3714      	adds	r7, #20
    ca22:	46bd      	mov	sp, r7
    ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca28:	4770      	bx	lr
	...

0000ca2c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    ca2c:	b580      	push	{r7, lr}
    ca2e:	b082      	sub	sp, #8
    ca30:	af00      	add	r7, sp, #0
    ca32:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    ca34:	687b      	ldr	r3, [r7, #4]
    ca36:	781b      	ldrb	r3, [r3, #0]
    ca38:	b2db      	uxtb	r3, r3
    ca3a:	f023 0302 	bic.w	r3, r3, #2
    ca3e:	b2da      	uxtb	r2, r3
    ca40:	687b      	ldr	r3, [r7, #4]
    ca42:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    ca44:	2103      	movs	r1, #3
    ca46:	6878      	ldr	r0, [r7, #4]
    ca48:	4b02      	ldr	r3, [pc, #8]	; (ca54 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    ca4a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    ca4c:	bf00      	nop
    ca4e:	3708      	adds	r7, #8
    ca50:	46bd      	mov	sp, r7
    ca52:	bd80      	pop	{r7, pc}
    ca54:	0000c6df 	.word	0x0000c6df

0000ca58 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    ca58:	b580      	push	{r7, lr}
    ca5a:	b084      	sub	sp, #16
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	6078      	str	r0, [r7, #4]
    ca60:	460b      	mov	r3, r1
    ca62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ca64:	2103      	movs	r1, #3
    ca66:	6878      	ldr	r0, [r7, #4]
    ca68:	4b06      	ldr	r3, [pc, #24]	; (ca84 <hri_usb_get_CTRLA_reg+0x2c>)
    ca6a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	781b      	ldrb	r3, [r3, #0]
    ca70:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ca72:	7bfa      	ldrb	r2, [r7, #15]
    ca74:	78fb      	ldrb	r3, [r7, #3]
    ca76:	4013      	ands	r3, r2
    ca78:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
    ca7c:	4618      	mov	r0, r3
    ca7e:	3710      	adds	r7, #16
    ca80:	46bd      	mov	sp, r7
    ca82:	bd80      	pop	{r7, pc}
    ca84:	0000c6df 	.word	0x0000c6df

0000ca88 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    ca88:	b580      	push	{r7, lr}
    ca8a:	b082      	sub	sp, #8
    ca8c:	af00      	add	r7, sp, #0
    ca8e:	6078      	str	r0, [r7, #4]
    ca90:	460b      	mov	r3, r1
    ca92:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	78fa      	ldrb	r2, [r7, #3]
    ca98:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    ca9a:	2103      	movs	r1, #3
    ca9c:	6878      	ldr	r0, [r7, #4]
    ca9e:	4b03      	ldr	r3, [pc, #12]	; (caac <hri_usb_write_CTRLA_reg+0x24>)
    caa0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    caa2:	bf00      	nop
    caa4:	3708      	adds	r7, #8
    caa6:	46bd      	mov	sp, r7
    caa8:	bd80      	pop	{r7, pc}
    caaa:	bf00      	nop
    caac:	0000c6df 	.word	0x0000c6df

0000cab0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    cab0:	b580      	push	{r7, lr}
    cab2:	b082      	sub	sp, #8
    cab4:	af00      	add	r7, sp, #0
    cab6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    cab8:	2103      	movs	r1, #3
    caba:	6878      	ldr	r0, [r7, #4]
    cabc:	4b04      	ldr	r3, [pc, #16]	; (cad0 <hri_usb_read_CTRLA_reg+0x20>)
    cabe:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    cac0:	687b      	ldr	r3, [r7, #4]
    cac2:	781b      	ldrb	r3, [r3, #0]
    cac4:	b2db      	uxtb	r3, r3
}
    cac6:	4618      	mov	r0, r3
    cac8:	3708      	adds	r7, #8
    caca:	46bd      	mov	sp, r7
    cacc:	bd80      	pop	{r7, pc}
    cace:	bf00      	nop
    cad0:	0000c6df 	.word	0x0000c6df

0000cad4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    cad4:	b480      	push	{r7}
    cad6:	b083      	sub	sp, #12
    cad8:	af00      	add	r7, sp, #0
    cada:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    cadc:	687b      	ldr	r3, [r7, #4]
    cade:	891b      	ldrh	r3, [r3, #8]
    cae0:	b29b      	uxth	r3, r3
    cae2:	f023 0301 	bic.w	r3, r3, #1
    cae6:	b29a      	uxth	r2, r3
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    caec:	bf00      	nop
    caee:	370c      	adds	r7, #12
    caf0:	46bd      	mov	sp, r7
    caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    caf6:	4770      	bx	lr

0000caf8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    caf8:	b480      	push	{r7}
    cafa:	b083      	sub	sp, #12
    cafc:	af00      	add	r7, sp, #0
    cafe:	6078      	str	r0, [r7, #4]
    cb00:	460b      	mov	r3, r1
    cb02:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    cb04:	687b      	ldr	r3, [r7, #4]
    cb06:	887a      	ldrh	r2, [r7, #2]
    cb08:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    cb0a:	bf00      	nop
    cb0c:	370c      	adds	r7, #12
    cb0e:	46bd      	mov	sp, r7
    cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb14:	4770      	bx	lr

0000cb16 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    cb16:	b480      	push	{r7}
    cb18:	b083      	sub	sp, #12
    cb1a:	af00      	add	r7, sp, #0
    cb1c:	6078      	str	r0, [r7, #4]
    cb1e:	460b      	mov	r3, r1
    cb20:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	78fa      	ldrb	r2, [r7, #3]
    cb26:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    cb28:	bf00      	nop
    cb2a:	370c      	adds	r7, #12
    cb2c:	46bd      	mov	sp, r7
    cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb32:	4770      	bx	lr

0000cb34 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    cb34:	b480      	push	{r7}
    cb36:	b083      	sub	sp, #12
    cb38:	af00      	add	r7, sp, #0
    cb3a:	6078      	str	r0, [r7, #4]
    cb3c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    cb3e:	687b      	ldr	r3, [r7, #4]
    cb40:	683a      	ldr	r2, [r7, #0]
    cb42:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    cb44:	bf00      	nop
    cb46:	370c      	adds	r7, #12
    cb48:	46bd      	mov	sp, r7
    cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb4e:	4770      	bx	lr

0000cb50 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    cb50:	b480      	push	{r7}
    cb52:	b083      	sub	sp, #12
    cb54:	af00      	add	r7, sp, #0
    cb56:	6078      	str	r0, [r7, #4]
    cb58:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    cb5a:	2300      	movs	r3, #0
}
    cb5c:	4618      	mov	r0, r3
    cb5e:	370c      	adds	r7, #12
    cb60:	46bd      	mov	sp, r7
    cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb66:	4770      	bx	lr

0000cb68 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    cb68:	b480      	push	{r7}
    cb6a:	b085      	sub	sp, #20
    cb6c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    cb6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb72:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    cb74:	4b28      	ldr	r3, [pc, #160]	; (cc18 <_usb_load_calib+0xb0>)
    cb76:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    cb78:	f003 031f 	and.w	r3, r3, #31
    cb7c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    cb7e:	4b26      	ldr	r3, [pc, #152]	; (cc18 <_usb_load_calib+0xb0>)
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    cb84:	f003 031f 	and.w	r3, r3, #31
    cb88:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    cb8a:	4b23      	ldr	r3, [pc, #140]	; (cc18 <_usb_load_calib+0xb0>)
    cb8c:	681b      	ldr	r3, [r3, #0]
    cb8e:	0a9b      	lsrs	r3, r3, #10
    cb90:	f003 0307 	and.w	r3, r3, #7
    cb94:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    cb96:	68fb      	ldr	r3, [r7, #12]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d002      	beq.n	cba2 <_usb_load_calib+0x3a>
    cb9c:	68fb      	ldr	r3, [r7, #12]
    cb9e:	2b1f      	cmp	r3, #31
    cba0:	d101      	bne.n	cba6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    cba2:	2309      	movs	r3, #9
    cba4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d002      	beq.n	cbb2 <_usb_load_calib+0x4a>
    cbac:	68bb      	ldr	r3, [r7, #8]
    cbae:	2b1f      	cmp	r3, #31
    cbb0:	d101      	bne.n	cbb6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    cbb2:	2319      	movs	r3, #25
    cbb4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    cbb6:	687b      	ldr	r3, [r7, #4]
    cbb8:	2b00      	cmp	r3, #0
    cbba:	d002      	beq.n	cbc2 <_usb_load_calib+0x5a>
    cbbc:	687b      	ldr	r3, [r7, #4]
    cbbe:	2b07      	cmp	r3, #7
    cbc0:	d101      	bne.n	cbc6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    cbc2:	2306      	movs	r3, #6
    cbc4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    cbc6:	68fb      	ldr	r3, [r7, #12]
    cbc8:	b29b      	uxth	r3, r3
    cbca:	019b      	lsls	r3, r3, #6
    cbcc:	b29b      	uxth	r3, r3
    cbce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    cbd2:	b29a      	uxth	r2, r3
    cbd4:	68bb      	ldr	r3, [r7, #8]
    cbd6:	b29b      	uxth	r3, r3
    cbd8:	f003 031f 	and.w	r3, r3, #31
    cbdc:	b29b      	uxth	r3, r3
    cbde:	4313      	orrs	r3, r2
    cbe0:	b29a      	uxth	r2, r3
    cbe2:	687b      	ldr	r3, [r7, #4]
    cbe4:	b29b      	uxth	r3, r3
    cbe6:	031b      	lsls	r3, r3, #12
    cbe8:	b29b      	uxth	r3, r3
    cbea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    cbee:	b29b      	uxth	r3, r3
    cbf0:	4313      	orrs	r3, r2
    cbf2:	b29a      	uxth	r2, r3
    cbf4:	683b      	ldr	r3, [r7, #0]
    cbf6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    cbf8:	683a      	ldr	r2, [r7, #0]
    cbfa:	78d3      	ldrb	r3, [r2, #3]
    cbfc:	f043 0303 	orr.w	r3, r3, #3
    cc00:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    cc02:	683a      	ldr	r2, [r7, #0]
    cc04:	78d3      	ldrb	r3, [r2, #3]
    cc06:	f043 030c 	orr.w	r3, r3, #12
    cc0a:	70d3      	strb	r3, [r2, #3]
}
    cc0c:	bf00      	nop
    cc0e:	3714      	adds	r7, #20
    cc10:	46bd      	mov	sp, r7
    cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc16:	4770      	bx	lr
    cc18:	00800084 	.word	0x00800084

0000cc1c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    cc20:	bf00      	nop
    cc22:	2203      	movs	r2, #3
    cc24:	2100      	movs	r1, #0
    cc26:	4804      	ldr	r0, [pc, #16]	; (cc38 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    cc28:	4b04      	ldr	r3, [pc, #16]	; (cc3c <_usb_d_dev_wait_dpll_rdy+0x20>)
    cc2a:	4798      	blx	r3
    cc2c:	4603      	mov	r3, r0
    cc2e:	2b03      	cmp	r3, #3
    cc30:	d1f7      	bne.n	cc22 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    cc32:	bf00      	nop
    cc34:	bd80      	pop	{r7, pc}
    cc36:	bf00      	nop
    cc38:	40001000 	.word	0x40001000
    cc3c:	0000c651 	.word	0x0000c651

0000cc40 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    cc40:	b580      	push	{r7, lr}
    cc42:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    cc44:	480e      	ldr	r0, [pc, #56]	; (cc80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cc46:	4b0f      	ldr	r3, [pc, #60]	; (cc84 <_usb_d_dev_wait_dfll_rdy+0x44>)
    cc48:	4798      	blx	r3
    cc4a:	4603      	mov	r3, r0
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d00a      	beq.n	cc66 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    cc50:	bf00      	nop
    cc52:	f44f 6110 	mov.w	r1, #2304	; 0x900
    cc56:	480a      	ldr	r0, [pc, #40]	; (cc80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cc58:	4b0b      	ldr	r3, [pc, #44]	; (cc88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    cc5a:	4798      	blx	r3
    cc5c:	4603      	mov	r3, r0
    cc5e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    cc62:	d1f6      	bne.n	cc52 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    cc64:	e009      	b.n	cc7a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    cc66:	bf00      	nop
    cc68:	f44f 7180 	mov.w	r1, #256	; 0x100
    cc6c:	4804      	ldr	r0, [pc, #16]	; (cc80 <_usb_d_dev_wait_dfll_rdy+0x40>)
    cc6e:	4b06      	ldr	r3, [pc, #24]	; (cc88 <_usb_d_dev_wait_dfll_rdy+0x48>)
    cc70:	4798      	blx	r3
    cc72:	4603      	mov	r3, r0
    cc74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    cc78:	d1f6      	bne.n	cc68 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    cc7a:	bf00      	nop
    cc7c:	bd80      	pop	{r7, pc}
    cc7e:	bf00      	nop
    cc80:	40001000 	.word	0x40001000
    cc84:	0000c6af 	.word	0x0000c6af
    cc88:	0000c689 	.word	0x0000c689

0000cc8c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    cc8c:	b580      	push	{r7, lr}
    cc8e:	b082      	sub	sp, #8
    cc90:	af00      	add	r7, sp, #0
    cc92:	4603      	mov	r3, r0
    cc94:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    cc96:	79fb      	ldrb	r3, [r7, #7]
    cc98:	2b00      	cmp	r3, #0
    cc9a:	d102      	bne.n	cca2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    cc9c:	4b05      	ldr	r3, [pc, #20]	; (ccb4 <_usb_d_dev_wait_clk_rdy+0x28>)
    cc9e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    cca0:	e004      	b.n	ccac <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    cca2:	79fb      	ldrb	r3, [r7, #7]
    cca4:	2b01      	cmp	r3, #1
    cca6:	d101      	bne.n	ccac <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    cca8:	4b03      	ldr	r3, [pc, #12]	; (ccb8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    ccaa:	4798      	blx	r3
}
    ccac:	bf00      	nop
    ccae:	3708      	adds	r7, #8
    ccb0:	46bd      	mov	sp, r7
    ccb2:	bd80      	pop	{r7, pc}
    ccb4:	0000cc41 	.word	0x0000cc41
    ccb8:	0000cc1d 	.word	0x0000cc1d

0000ccbc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b082      	sub	sp, #8
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	4603      	mov	r3, r0
    ccc4:	6039      	str	r1, [r7, #0]
    ccc6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    ccc8:	683b      	ldr	r3, [r7, #0]
    ccca:	b2da      	uxtb	r2, r3
    cccc:	79fb      	ldrb	r3, [r7, #7]
    ccce:	4619      	mov	r1, r3
    ccd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ccd4:	4b02      	ldr	r3, [pc, #8]	; (cce0 <_usbd_ep_int_ack+0x24>)
    ccd6:	4798      	blx	r3
}
    ccd8:	bf00      	nop
    ccda:	3708      	adds	r7, #8
    ccdc:	46bd      	mov	sp, r7
    ccde:	bd80      	pop	{r7, pc}
    cce0:	0000c795 	.word	0x0000c795

0000cce4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    cce4:	b580      	push	{r7, lr}
    cce6:	b082      	sub	sp, #8
    cce8:	af00      	add	r7, sp, #0
    ccea:	4603      	mov	r3, r0
    ccec:	6039      	str	r1, [r7, #0]
    ccee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    ccf0:	683b      	ldr	r3, [r7, #0]
    ccf2:	b2da      	uxtb	r2, r3
    ccf4:	79fb      	ldrb	r3, [r7, #7]
    ccf6:	4619      	mov	r1, r3
    ccf8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ccfc:	4b02      	ldr	r3, [pc, #8]	; (cd08 <_usbd_ep_int_en+0x24>)
    ccfe:	4798      	blx	r3
}
    cd00:	bf00      	nop
    cd02:	3708      	adds	r7, #8
    cd04:	46bd      	mov	sp, r7
    cd06:	bd80      	pop	{r7, pc}
    cd08:	0000c869 	.word	0x0000c869

0000cd0c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    cd0c:	b580      	push	{r7, lr}
    cd0e:	b082      	sub	sp, #8
    cd10:	af00      	add	r7, sp, #0
    cd12:	4603      	mov	r3, r0
    cd14:	6039      	str	r1, [r7, #0]
    cd16:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    cd18:	683b      	ldr	r3, [r7, #0]
    cd1a:	b2da      	uxtb	r2, r3
    cd1c:	79fb      	ldrb	r3, [r7, #7]
    cd1e:	4619      	mov	r1, r3
    cd20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cd24:	4b02      	ldr	r3, [pc, #8]	; (cd30 <_usbd_ep_int_dis+0x24>)
    cd26:	4798      	blx	r3
}
    cd28:	bf00      	nop
    cd2a:	3708      	adds	r7, #8
    cd2c:	46bd      	mov	sp, r7
    cd2e:	bd80      	pop	{r7, pc}
    cd30:	0000c895 	.word	0x0000c895

0000cd34 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    cd34:	b580      	push	{r7, lr}
    cd36:	b082      	sub	sp, #8
    cd38:	af00      	add	r7, sp, #0
    cd3a:	4603      	mov	r3, r0
    cd3c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    cd3e:	79fb      	ldrb	r3, [r7, #7]
    cd40:	4619      	mov	r1, r3
    cd42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cd46:	4b06      	ldr	r3, [pc, #24]	; (cd60 <_usbd_ep_is_ctrl+0x2c>)
    cd48:	4798      	blx	r3
    cd4a:	4603      	mov	r3, r0
    cd4c:	2b11      	cmp	r3, #17
    cd4e:	bf0c      	ite	eq
    cd50:	2301      	moveq	r3, #1
    cd52:	2300      	movne	r3, #0
    cd54:	b2db      	uxtb	r3, r3
}
    cd56:	4618      	mov	r0, r3
    cd58:	3708      	adds	r7, #8
    cd5a:	46bd      	mov	sp, r7
    cd5c:	bd80      	pop	{r7, pc}
    cd5e:	bf00      	nop
    cd60:	0000c94f 	.word	0x0000c94f

0000cd64 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    cd64:	b580      	push	{r7, lr}
    cd66:	b082      	sub	sp, #8
    cd68:	af00      	add	r7, sp, #0
    cd6a:	4603      	mov	r3, r0
    cd6c:	71fb      	strb	r3, [r7, #7]
    cd6e:	460b      	mov	r3, r1
    cd70:	71bb      	strb	r3, [r7, #6]
    cd72:	4613      	mov	r3, r2
    cd74:	717b      	strb	r3, [r7, #5]
	if (st) {
    cd76:	797b      	ldrb	r3, [r7, #5]
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d00b      	beq.n	cd94 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cd7c:	79bb      	ldrb	r3, [r7, #6]
    cd7e:	2210      	movs	r2, #16
    cd80:	fa02 f303 	lsl.w	r3, r2, r3
    cd84:	b2da      	uxtb	r2, r3
    cd86:	79fb      	ldrb	r3, [r7, #7]
    cd88:	4619      	mov	r1, r3
    cd8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cd8e:	4b09      	ldr	r3, [pc, #36]	; (cdb4 <_usbd_ep_set_stall+0x50>)
    cd90:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    cd92:	e00a      	b.n	cdaa <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cd94:	79bb      	ldrb	r3, [r7, #6]
    cd96:	2210      	movs	r2, #16
    cd98:	fa02 f303 	lsl.w	r3, r2, r3
    cd9c:	b2da      	uxtb	r2, r3
    cd9e:	79fb      	ldrb	r3, [r7, #7]
    cda0:	4619      	mov	r1, r3
    cda2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cda6:	4b04      	ldr	r3, [pc, #16]	; (cdb8 <_usbd_ep_set_stall+0x54>)
    cda8:	4798      	blx	r3
}
    cdaa:	bf00      	nop
    cdac:	3708      	adds	r7, #8
    cdae:	46bd      	mov	sp, r7
    cdb0:	bd80      	pop	{r7, pc}
    cdb2:	bf00      	nop
    cdb4:	0000c7c1 	.word	0x0000c7c1
    cdb8:	0000c815 	.word	0x0000c815

0000cdbc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    cdbc:	b580      	push	{r7, lr}
    cdbe:	b084      	sub	sp, #16
    cdc0:	af00      	add	r7, sp, #0
    cdc2:	4603      	mov	r3, r0
    cdc4:	460a      	mov	r2, r1
    cdc6:	71fb      	strb	r3, [r7, #7]
    cdc8:	4613      	mov	r3, r2
    cdca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    cdcc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cdd0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cdd2:	79fb      	ldrb	r3, [r7, #7]
    cdd4:	4619      	mov	r1, r3
    cdd6:	68f8      	ldr	r0, [r7, #12]
    cdd8:	4b08      	ldr	r3, [pc, #32]	; (cdfc <_usbd_ep_is_stalled+0x40>)
    cdda:	4798      	blx	r3
    cddc:	4603      	mov	r3, r0
    cdde:	4619      	mov	r1, r3
    cde0:	79bb      	ldrb	r3, [r7, #6]
    cde2:	2210      	movs	r2, #16
    cde4:	fa02 f303 	lsl.w	r3, r2, r3
    cde8:	400b      	ands	r3, r1
    cdea:	2b00      	cmp	r3, #0
    cdec:	bf14      	ite	ne
    cdee:	2301      	movne	r3, #1
    cdf0:	2300      	moveq	r3, #0
    cdf2:	b2db      	uxtb	r3, r3
}
    cdf4:	4618      	mov	r0, r3
    cdf6:	3710      	adds	r7, #16
    cdf8:	46bd      	mov	sp, r7
    cdfa:	bd80      	pop	{r7, pc}
    cdfc:	0000c7ed 	.word	0x0000c7ed

0000ce00 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    ce00:	b580      	push	{r7, lr}
    ce02:	b084      	sub	sp, #16
    ce04:	af00      	add	r7, sp, #0
    ce06:	4603      	mov	r3, r0
    ce08:	460a      	mov	r2, r1
    ce0a:	71fb      	strb	r3, [r7, #7]
    ce0c:	4613      	mov	r3, r2
    ce0e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    ce10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ce14:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ce16:	79fb      	ldrb	r3, [r7, #7]
    ce18:	4619      	mov	r1, r3
    ce1a:	68f8      	ldr	r0, [r7, #12]
    ce1c:	4b08      	ldr	r3, [pc, #32]	; (ce40 <_usbd_ep_is_stall_sent+0x40>)
    ce1e:	4798      	blx	r3
    ce20:	4603      	mov	r3, r0
    ce22:	4619      	mov	r1, r3
    ce24:	79bb      	ldrb	r3, [r7, #6]
    ce26:	2220      	movs	r2, #32
    ce28:	fa02 f303 	lsl.w	r3, r2, r3
    ce2c:	400b      	ands	r3, r1
    ce2e:	2b00      	cmp	r3, #0
    ce30:	bf14      	ite	ne
    ce32:	2301      	movne	r3, #1
    ce34:	2300      	moveq	r3, #0
    ce36:	b2db      	uxtb	r3, r3
}
    ce38:	4618      	mov	r0, r3
    ce3a:	3710      	adds	r7, #16
    ce3c:	46bd      	mov	sp, r7
    ce3e:	bd80      	pop	{r7, pc}
    ce40:	0000c76d 	.word	0x0000c76d

0000ce44 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    ce44:	b580      	push	{r7, lr}
    ce46:	b082      	sub	sp, #8
    ce48:	af00      	add	r7, sp, #0
    ce4a:	4603      	mov	r3, r0
    ce4c:	460a      	mov	r2, r1
    ce4e:	71fb      	strb	r3, [r7, #7]
    ce50:	4613      	mov	r3, r2
    ce52:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ce54:	79bb      	ldrb	r3, [r7, #6]
    ce56:	2220      	movs	r2, #32
    ce58:	409a      	lsls	r2, r3
    ce5a:	79fb      	ldrb	r3, [r7, #7]
    ce5c:	4611      	mov	r1, r2
    ce5e:	4618      	mov	r0, r3
    ce60:	4b02      	ldr	r3, [pc, #8]	; (ce6c <_usbd_ep_ack_stall+0x28>)
    ce62:	4798      	blx	r3
}
    ce64:	bf00      	nop
    ce66:	3708      	adds	r7, #8
    ce68:	46bd      	mov	sp, r7
    ce6a:	bd80      	pop	{r7, pc}
    ce6c:	0000ccbd 	.word	0x0000ccbd

0000ce70 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    ce70:	b580      	push	{r7, lr}
    ce72:	b082      	sub	sp, #8
    ce74:	af00      	add	r7, sp, #0
    ce76:	4603      	mov	r3, r0
    ce78:	71fb      	strb	r3, [r7, #7]
    ce7a:	460b      	mov	r3, r1
    ce7c:	71bb      	strb	r3, [r7, #6]
    ce7e:	4613      	mov	r3, r2
    ce80:	717b      	strb	r3, [r7, #5]
	if (en) {
    ce82:	797b      	ldrb	r3, [r7, #5]
    ce84:	2b00      	cmp	r3, #0
    ce86:	d008      	beq.n	ce9a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ce88:	79bb      	ldrb	r3, [r7, #6]
    ce8a:	2220      	movs	r2, #32
    ce8c:	409a      	lsls	r2, r3
    ce8e:	79fb      	ldrb	r3, [r7, #7]
    ce90:	4611      	mov	r1, r2
    ce92:	4618      	mov	r0, r3
    ce94:	4b07      	ldr	r3, [pc, #28]	; (ceb4 <_usbd_ep_int_stall_en+0x44>)
    ce96:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    ce98:	e007      	b.n	ceaa <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ce9a:	79bb      	ldrb	r3, [r7, #6]
    ce9c:	2220      	movs	r2, #32
    ce9e:	409a      	lsls	r2, r3
    cea0:	79fb      	ldrb	r3, [r7, #7]
    cea2:	4611      	mov	r1, r2
    cea4:	4618      	mov	r0, r3
    cea6:	4b04      	ldr	r3, [pc, #16]	; (ceb8 <_usbd_ep_int_stall_en+0x48>)
    cea8:	4798      	blx	r3
}
    ceaa:	bf00      	nop
    ceac:	3708      	adds	r7, #8
    ceae:	46bd      	mov	sp, r7
    ceb0:	bd80      	pop	{r7, pc}
    ceb2:	bf00      	nop
    ceb4:	0000cce5 	.word	0x0000cce5
    ceb8:	0000cd0d 	.word	0x0000cd0d

0000cebc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    cebc:	b580      	push	{r7, lr}
    cebe:	b082      	sub	sp, #8
    cec0:	af00      	add	r7, sp, #0
    cec2:	4603      	mov	r3, r0
    cec4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    cec6:	79fb      	ldrb	r3, [r7, #7]
    cec8:	4619      	mov	r1, r3
    ceca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cece:	4b03      	ldr	r3, [pc, #12]	; (cedc <_usbd_ep_stop_setup+0x20>)
    ced0:	4798      	blx	r3
}
    ced2:	bf00      	nop
    ced4:	3708      	adds	r7, #8
    ced6:	46bd      	mov	sp, r7
    ced8:	bd80      	pop	{r7, pc}
    ceda:	bf00      	nop
    cedc:	0000c841 	.word	0x0000c841

0000cee0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    cee0:	b580      	push	{r7, lr}
    cee2:	b082      	sub	sp, #8
    cee4:	af00      	add	r7, sp, #0
    cee6:	4603      	mov	r3, r0
    cee8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ceea:	79fb      	ldrb	r3, [r7, #7]
    ceec:	2210      	movs	r2, #16
    ceee:	4619      	mov	r1, r3
    cef0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cef4:	4b05      	ldr	r3, [pc, #20]	; (cf0c <_usbd_ep_is_setup+0x2c>)
    cef6:	4798      	blx	r3
    cef8:	4603      	mov	r3, r0
    cefa:	2b00      	cmp	r3, #0
    cefc:	bf14      	ite	ne
    cefe:	2301      	movne	r3, #1
    cf00:	2300      	moveq	r3, #0
    cf02:	b2db      	uxtb	r3, r3
}
    cf04:	4618      	mov	r0, r3
    cf06:	3708      	adds	r7, #8
    cf08:	46bd      	mov	sp, r7
    cf0a:	bd80      	pop	{r7, pc}
    cf0c:	0000c737 	.word	0x0000c737

0000cf10 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    cf10:	b580      	push	{r7, lr}
    cf12:	b082      	sub	sp, #8
    cf14:	af00      	add	r7, sp, #0
    cf16:	4603      	mov	r3, r0
    cf18:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    cf1a:	79fb      	ldrb	r3, [r7, #7]
    cf1c:	2110      	movs	r1, #16
    cf1e:	4618      	mov	r0, r3
    cf20:	4b02      	ldr	r3, [pc, #8]	; (cf2c <_usbd_ep_ack_setup+0x1c>)
    cf22:	4798      	blx	r3
}
    cf24:	bf00      	nop
    cf26:	3708      	adds	r7, #8
    cf28:	46bd      	mov	sp, r7
    cf2a:	bd80      	pop	{r7, pc}
    cf2c:	0000ccbd 	.word	0x0000ccbd

0000cf30 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    cf30:	b580      	push	{r7, lr}
    cf32:	b082      	sub	sp, #8
    cf34:	af00      	add	r7, sp, #0
    cf36:	4603      	mov	r3, r0
    cf38:	71fb      	strb	r3, [r7, #7]
    cf3a:	460b      	mov	r3, r1
    cf3c:	71bb      	strb	r3, [r7, #6]
    cf3e:	4613      	mov	r3, r2
    cf40:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    cf42:	797b      	ldrb	r3, [r7, #5]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d00b      	beq.n	cf60 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    cf48:	79bb      	ldrb	r3, [r7, #6]
    cf4a:	2201      	movs	r2, #1
    cf4c:	fa02 f303 	lsl.w	r3, r2, r3
    cf50:	b2da      	uxtb	r2, r3
    cf52:	79fb      	ldrb	r3, [r7, #7]
    cf54:	4619      	mov	r1, r3
    cf56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf5a:	4b09      	ldr	r3, [pc, #36]	; (cf80 <_usbd_ep_set_toggle+0x50>)
    cf5c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    cf5e:	e00a      	b.n	cf76 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    cf60:	79bb      	ldrb	r3, [r7, #6]
    cf62:	2201      	movs	r2, #1
    cf64:	fa02 f303 	lsl.w	r3, r2, r3
    cf68:	b2da      	uxtb	r2, r3
    cf6a:	79fb      	ldrb	r3, [r7, #7]
    cf6c:	4619      	mov	r1, r3
    cf6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    cf72:	4b04      	ldr	r3, [pc, #16]	; (cf84 <_usbd_ep_set_toggle+0x54>)
    cf74:	4798      	blx	r3
}
    cf76:	bf00      	nop
    cf78:	3708      	adds	r7, #8
    cf7a:	46bd      	mov	sp, r7
    cf7c:	bd80      	pop	{r7, pc}
    cf7e:	bf00      	nop
    cf80:	0000c7c1 	.word	0x0000c7c1
    cf84:	0000c815 	.word	0x0000c815

0000cf88 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b082      	sub	sp, #8
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	4603      	mov	r3, r0
    cf90:	460a      	mov	r2, r1
    cf92:	71fb      	strb	r3, [r7, #7]
    cf94:	4613      	mov	r3, r2
    cf96:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    cf98:	79bb      	ldrb	r3, [r7, #6]
    cf9a:	2201      	movs	r2, #1
    cf9c:	409a      	lsls	r2, r3
    cf9e:	79fb      	ldrb	r3, [r7, #7]
    cfa0:	4611      	mov	r1, r2
    cfa2:	4618      	mov	r0, r3
    cfa4:	4b02      	ldr	r3, [pc, #8]	; (cfb0 <_usbd_ep_ack_io_cpt+0x28>)
    cfa6:	4798      	blx	r3
}
    cfa8:	bf00      	nop
    cfaa:	3708      	adds	r7, #8
    cfac:	46bd      	mov	sp, r7
    cfae:	bd80      	pop	{r7, pc}
    cfb0:	0000ccbd 	.word	0x0000ccbd

0000cfb4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    cfb4:	b480      	push	{r7}
    cfb6:	b085      	sub	sp, #20
    cfb8:	af00      	add	r7, sp, #0
    cfba:	4603      	mov	r3, r0
    cfbc:	603a      	str	r2, [r7, #0]
    cfbe:	71fb      	strb	r3, [r7, #7]
    cfc0:	460b      	mov	r3, r1
    cfc2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cfc4:	79fa      	ldrb	r2, [r7, #7]
    cfc6:	79bb      	ldrb	r3, [r7, #6]
    cfc8:	0052      	lsls	r2, r2, #1
    cfca:	4413      	add	r3, r2
    cfcc:	011b      	lsls	r3, r3, #4
    cfce:	4a06      	ldr	r2, [pc, #24]	; (cfe8 <_usbd_ep_set_buf+0x34>)
    cfd0:	4413      	add	r3, r2
    cfd2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    cfd4:	68fb      	ldr	r3, [r7, #12]
    cfd6:	683a      	ldr	r2, [r7, #0]
    cfd8:	601a      	str	r2, [r3, #0]
}
    cfda:	bf00      	nop
    cfdc:	3714      	adds	r7, #20
    cfde:	46bd      	mov	sp, r7
    cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfe4:	4770      	bx	lr
    cfe6:	bf00      	nop
    cfe8:	20001ef8 	.word	0x20001ef8

0000cfec <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    cfec:	b480      	push	{r7}
    cfee:	b085      	sub	sp, #20
    cff0:	af00      	add	r7, sp, #0
    cff2:	4603      	mov	r3, r0
    cff4:	71fb      	strb	r3, [r7, #7]
    cff6:	460b      	mov	r3, r1
    cff8:	71bb      	strb	r3, [r7, #6]
    cffa:	4613      	mov	r3, r2
    cffc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    cffe:	79fa      	ldrb	r2, [r7, #7]
    d000:	79bb      	ldrb	r3, [r7, #6]
    d002:	0052      	lsls	r2, r2, #1
    d004:	4413      	add	r3, r2
    d006:	011b      	lsls	r3, r3, #4
    d008:	4a08      	ldr	r2, [pc, #32]	; (d02c <_usbd_ep_set_in_count+0x40>)
    d00a:	4413      	add	r3, r2
    d00c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    d00e:	88bb      	ldrh	r3, [r7, #4]
    d010:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d014:	b299      	uxth	r1, r3
    d016:	68fa      	ldr	r2, [r7, #12]
    d018:	6853      	ldr	r3, [r2, #4]
    d01a:	f361 339b 	bfi	r3, r1, #14, #14
    d01e:	6053      	str	r3, [r2, #4]
}
    d020:	bf00      	nop
    d022:	3714      	adds	r7, #20
    d024:	46bd      	mov	sp, r7
    d026:	f85d 7b04 	ldr.w	r7, [sp], #4
    d02a:	4770      	bx	lr
    d02c:	20001ef8 	.word	0x20001ef8

0000d030 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    d030:	b480      	push	{r7}
    d032:	b085      	sub	sp, #20
    d034:	af00      	add	r7, sp, #0
    d036:	4603      	mov	r3, r0
    d038:	71fb      	strb	r3, [r7, #7]
    d03a:	460b      	mov	r3, r1
    d03c:	71bb      	strb	r3, [r7, #6]
    d03e:	4613      	mov	r3, r2
    d040:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d042:	79fa      	ldrb	r2, [r7, #7]
    d044:	79bb      	ldrb	r3, [r7, #6]
    d046:	0052      	lsls	r2, r2, #1
    d048:	4413      	add	r3, r2
    d04a:	011b      	lsls	r3, r3, #4
    d04c:	4a08      	ldr	r2, [pc, #32]	; (d070 <_usbd_ep_set_in_size+0x40>)
    d04e:	4413      	add	r3, r2
    d050:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    d052:	88bb      	ldrh	r3, [r7, #4]
    d054:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d058:	b299      	uxth	r1, r3
    d05a:	68fa      	ldr	r2, [r7, #12]
    d05c:	6853      	ldr	r3, [r2, #4]
    d05e:	f361 030d 	bfi	r3, r1, #0, #14
    d062:	6053      	str	r3, [r2, #4]
}
    d064:	bf00      	nop
    d066:	3714      	adds	r7, #20
    d068:	46bd      	mov	sp, r7
    d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d06e:	4770      	bx	lr
    d070:	20001ef8 	.word	0x20001ef8

0000d074 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    d074:	b480      	push	{r7}
    d076:	b085      	sub	sp, #20
    d078:	af00      	add	r7, sp, #0
    d07a:	4603      	mov	r3, r0
    d07c:	71fb      	strb	r3, [r7, #7]
    d07e:	460b      	mov	r3, r1
    d080:	71bb      	strb	r3, [r7, #6]
    d082:	4613      	mov	r3, r2
    d084:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d086:	79fa      	ldrb	r2, [r7, #7]
    d088:	79bb      	ldrb	r3, [r7, #6]
    d08a:	0052      	lsls	r2, r2, #1
    d08c:	4413      	add	r3, r2
    d08e:	011b      	lsls	r3, r3, #4
    d090:	4a08      	ldr	r2, [pc, #32]	; (d0b4 <_usbd_ep_set_out_count+0x40>)
    d092:	4413      	add	r3, r2
    d094:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    d096:	88bb      	ldrh	r3, [r7, #4]
    d098:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d09c:	b299      	uxth	r1, r3
    d09e:	68fa      	ldr	r2, [r7, #12]
    d0a0:	6853      	ldr	r3, [r2, #4]
    d0a2:	f361 030d 	bfi	r3, r1, #0, #14
    d0a6:	6053      	str	r3, [r2, #4]
}
    d0a8:	bf00      	nop
    d0aa:	3714      	adds	r7, #20
    d0ac:	46bd      	mov	sp, r7
    d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b2:	4770      	bx	lr
    d0b4:	20001ef8 	.word	0x20001ef8

0000d0b8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    d0b8:	b480      	push	{r7}
    d0ba:	b085      	sub	sp, #20
    d0bc:	af00      	add	r7, sp, #0
    d0be:	4603      	mov	r3, r0
    d0c0:	71fb      	strb	r3, [r7, #7]
    d0c2:	460b      	mov	r3, r1
    d0c4:	71bb      	strb	r3, [r7, #6]
    d0c6:	4613      	mov	r3, r2
    d0c8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d0ca:	79fa      	ldrb	r2, [r7, #7]
    d0cc:	79bb      	ldrb	r3, [r7, #6]
    d0ce:	0052      	lsls	r2, r2, #1
    d0d0:	4413      	add	r3, r2
    d0d2:	011b      	lsls	r3, r3, #4
    d0d4:	4a08      	ldr	r2, [pc, #32]	; (d0f8 <_usbd_ep_set_out_size+0x40>)
    d0d6:	4413      	add	r3, r2
    d0d8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    d0da:	88bb      	ldrh	r3, [r7, #4]
    d0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d0e0:	b299      	uxth	r1, r3
    d0e2:	68fa      	ldr	r2, [r7, #12]
    d0e4:	6853      	ldr	r3, [r2, #4]
    d0e6:	f361 339b 	bfi	r3, r1, #14, #14
    d0ea:	6053      	str	r3, [r2, #4]
}
    d0ec:	bf00      	nop
    d0ee:	3714      	adds	r7, #20
    d0f0:	46bd      	mov	sp, r7
    d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f6:	4770      	bx	lr
    d0f8:	20001ef8 	.word	0x20001ef8

0000d0fc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    d0fc:	b580      	push	{r7, lr}
    d0fe:	b084      	sub	sp, #16
    d100:	af00      	add	r7, sp, #0
    d102:	60ba      	str	r2, [r7, #8]
    d104:	607b      	str	r3, [r7, #4]
    d106:	4603      	mov	r3, r0
    d108:	73fb      	strb	r3, [r7, #15]
    d10a:	460b      	mov	r3, r1
    d10c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    d10e:	68bb      	ldr	r3, [r7, #8]
    d110:	b29a      	uxth	r2, r3
    d112:	7bb9      	ldrb	r1, [r7, #14]
    d114:	7bfb      	ldrb	r3, [r7, #15]
    d116:	4618      	mov	r0, r3
    d118:	4b06      	ldr	r3, [pc, #24]	; (d134 <_usbd_ep_set_in_trans+0x38>)
    d11a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    d11c:	687b      	ldr	r3, [r7, #4]
    d11e:	b29a      	uxth	r2, r3
    d120:	7bb9      	ldrb	r1, [r7, #14]
    d122:	7bfb      	ldrb	r3, [r7, #15]
    d124:	4618      	mov	r0, r3
    d126:	4b04      	ldr	r3, [pc, #16]	; (d138 <_usbd_ep_set_in_trans+0x3c>)
    d128:	4798      	blx	r3
}
    d12a:	bf00      	nop
    d12c:	3710      	adds	r7, #16
    d12e:	46bd      	mov	sp, r7
    d130:	bd80      	pop	{r7, pc}
    d132:	bf00      	nop
    d134:	0000d031 	.word	0x0000d031
    d138:	0000cfed 	.word	0x0000cfed

0000d13c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    d13c:	b580      	push	{r7, lr}
    d13e:	b084      	sub	sp, #16
    d140:	af00      	add	r7, sp, #0
    d142:	60ba      	str	r2, [r7, #8]
    d144:	607b      	str	r3, [r7, #4]
    d146:	4603      	mov	r3, r0
    d148:	73fb      	strb	r3, [r7, #15]
    d14a:	460b      	mov	r3, r1
    d14c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    d14e:	68bb      	ldr	r3, [r7, #8]
    d150:	b29a      	uxth	r2, r3
    d152:	7bb9      	ldrb	r1, [r7, #14]
    d154:	7bfb      	ldrb	r3, [r7, #15]
    d156:	4618      	mov	r0, r3
    d158:	4b06      	ldr	r3, [pc, #24]	; (d174 <_usbd_ep_set_out_trans+0x38>)
    d15a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	b29a      	uxth	r2, r3
    d160:	7bb9      	ldrb	r1, [r7, #14]
    d162:	7bfb      	ldrb	r3, [r7, #15]
    d164:	4618      	mov	r0, r3
    d166:	4b04      	ldr	r3, [pc, #16]	; (d178 <_usbd_ep_set_out_trans+0x3c>)
    d168:	4798      	blx	r3
}
    d16a:	bf00      	nop
    d16c:	3710      	adds	r7, #16
    d16e:	46bd      	mov	sp, r7
    d170:	bd80      	pop	{r7, pc}
    d172:	bf00      	nop
    d174:	0000d0b9 	.word	0x0000d0b9
    d178:	0000d075 	.word	0x0000d075

0000d17c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    d17c:	b480      	push	{r7}
    d17e:	b085      	sub	sp, #20
    d180:	af00      	add	r7, sp, #0
    d182:	4603      	mov	r3, r0
    d184:	460a      	mov	r2, r1
    d186:	71fb      	strb	r3, [r7, #7]
    d188:	4613      	mov	r3, r2
    d18a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    d18c:	79fa      	ldrb	r2, [r7, #7]
    d18e:	79bb      	ldrb	r3, [r7, #6]
    d190:	0052      	lsls	r2, r2, #1
    d192:	4413      	add	r3, r2
    d194:	011b      	lsls	r3, r3, #4
    d196:	4a06      	ldr	r2, [pc, #24]	; (d1b0 <_usbd_ep_clear_bank_status+0x34>)
    d198:	4413      	add	r3, r2
    d19a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    d19c:	68fb      	ldr	r3, [r7, #12]
    d19e:	2200      	movs	r2, #0
    d1a0:	729a      	strb	r2, [r3, #10]
}
    d1a2:	bf00      	nop
    d1a4:	3714      	adds	r7, #20
    d1a6:	46bd      	mov	sp, r7
    d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1ac:	4770      	bx	lr
    d1ae:	bf00      	nop
    d1b0:	20001ef8 	.word	0x20001ef8

0000d1b4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b082      	sub	sp, #8
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	4603      	mov	r3, r0
    d1bc:	71fb      	strb	r3, [r7, #7]
    d1be:	460b      	mov	r3, r1
    d1c0:	71bb      	strb	r3, [r7, #6]
    d1c2:	4613      	mov	r3, r2
    d1c4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    d1c6:	797b      	ldrb	r3, [r7, #5]
    d1c8:	2b00      	cmp	r3, #0
    d1ca:	d00b      	beq.n	d1e4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d1cc:	79bb      	ldrb	r3, [r7, #6]
    d1ce:	2240      	movs	r2, #64	; 0x40
    d1d0:	fa02 f303 	lsl.w	r3, r2, r3
    d1d4:	b2da      	uxtb	r2, r3
    d1d6:	79fb      	ldrb	r3, [r7, #7]
    d1d8:	4619      	mov	r1, r3
    d1da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d1de:	4b09      	ldr	r3, [pc, #36]	; (d204 <_usbd_ep_set_in_rdy+0x50>)
    d1e0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    d1e2:	e00a      	b.n	d1fa <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d1e4:	79bb      	ldrb	r3, [r7, #6]
    d1e6:	2240      	movs	r2, #64	; 0x40
    d1e8:	fa02 f303 	lsl.w	r3, r2, r3
    d1ec:	b2da      	uxtb	r2, r3
    d1ee:	79fb      	ldrb	r3, [r7, #7]
    d1f0:	4619      	mov	r1, r3
    d1f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d1f6:	4b04      	ldr	r3, [pc, #16]	; (d208 <_usbd_ep_set_in_rdy+0x54>)
    d1f8:	4798      	blx	r3
}
    d1fa:	bf00      	nop
    d1fc:	3708      	adds	r7, #8
    d1fe:	46bd      	mov	sp, r7
    d200:	bd80      	pop	{r7, pc}
    d202:	bf00      	nop
    d204:	0000c7c1 	.word	0x0000c7c1
    d208:	0000c815 	.word	0x0000c815

0000d20c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    d20c:	b580      	push	{r7, lr}
    d20e:	b082      	sub	sp, #8
    d210:	af00      	add	r7, sp, #0
    d212:	4603      	mov	r3, r0
    d214:	71fb      	strb	r3, [r7, #7]
    d216:	460b      	mov	r3, r1
    d218:	71bb      	strb	r3, [r7, #6]
    d21a:	4613      	mov	r3, r2
    d21c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    d21e:	797b      	ldrb	r3, [r7, #5]
    d220:	2b00      	cmp	r3, #0
    d222:	d00b      	beq.n	d23c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d224:	79bb      	ldrb	r3, [r7, #6]
    d226:	2240      	movs	r2, #64	; 0x40
    d228:	fa02 f303 	lsl.w	r3, r2, r3
    d22c:	b2da      	uxtb	r2, r3
    d22e:	79fb      	ldrb	r3, [r7, #7]
    d230:	4619      	mov	r1, r3
    d232:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d236:	4b09      	ldr	r3, [pc, #36]	; (d25c <_usbd_ep_set_out_rdy+0x50>)
    d238:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    d23a:	e00a      	b.n	d252 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    d23c:	79bb      	ldrb	r3, [r7, #6]
    d23e:	2240      	movs	r2, #64	; 0x40
    d240:	fa02 f303 	lsl.w	r3, r2, r3
    d244:	b2da      	uxtb	r2, r3
    d246:	79fb      	ldrb	r3, [r7, #7]
    d248:	4619      	mov	r1, r3
    d24a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d24e:	4b04      	ldr	r3, [pc, #16]	; (d260 <_usbd_ep_set_out_rdy+0x54>)
    d250:	4798      	blx	r3
}
    d252:	bf00      	nop
    d254:	3708      	adds	r7, #8
    d256:	46bd      	mov	sp, r7
    d258:	bd80      	pop	{r7, pc}
    d25a:	bf00      	nop
    d25c:	0000c815 	.word	0x0000c815
    d260:	0000c7c1 	.word	0x0000c7c1

0000d264 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    d264:	b480      	push	{r7}
    d266:	b083      	sub	sp, #12
    d268:	af00      	add	r7, sp, #0
    d26a:	4603      	mov	r3, r0
    d26c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    d26e:	88fb      	ldrh	r3, [r7, #6]
    d270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d274:	d820      	bhi.n	d2b8 <_usbd_ep_pcksize_size+0x54>
    d276:	88fb      	ldrh	r3, [r7, #6]
    d278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d27c:	d81a      	bhi.n	d2b4 <_usbd_ep_pcksize_size+0x50>
    d27e:	88fb      	ldrh	r3, [r7, #6]
    d280:	2b80      	cmp	r3, #128	; 0x80
    d282:	d815      	bhi.n	d2b0 <_usbd_ep_pcksize_size+0x4c>
    d284:	88fb      	ldrh	r3, [r7, #6]
    d286:	2b40      	cmp	r3, #64	; 0x40
    d288:	d810      	bhi.n	d2ac <_usbd_ep_pcksize_size+0x48>
    d28a:	88fb      	ldrh	r3, [r7, #6]
    d28c:	2b20      	cmp	r3, #32
    d28e:	d80b      	bhi.n	d2a8 <_usbd_ep_pcksize_size+0x44>
    d290:	88fb      	ldrh	r3, [r7, #6]
    d292:	2b10      	cmp	r3, #16
    d294:	d806      	bhi.n	d2a4 <_usbd_ep_pcksize_size+0x40>
    d296:	88fb      	ldrh	r3, [r7, #6]
    d298:	2b08      	cmp	r3, #8
    d29a:	bf8c      	ite	hi
    d29c:	2301      	movhi	r3, #1
    d29e:	2300      	movls	r3, #0
    d2a0:	b2db      	uxtb	r3, r3
    d2a2:	e00a      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2a4:	2302      	movs	r3, #2
    d2a6:	e008      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2a8:	2303      	movs	r3, #3
    d2aa:	e006      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2ac:	2304      	movs	r3, #4
    d2ae:	e004      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2b0:	2305      	movs	r3, #5
    d2b2:	e002      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2b4:	2306      	movs	r3, #6
    d2b6:	e000      	b.n	d2ba <_usbd_ep_pcksize_size+0x56>
    d2b8:	2307      	movs	r3, #7
}
    d2ba:	4618      	mov	r0, r3
    d2bc:	370c      	adds	r7, #12
    d2be:	46bd      	mov	sp, r7
    d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2c4:	4770      	bx	lr
	...

0000d2c8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    d2c8:	b480      	push	{r7}
    d2ca:	b085      	sub	sp, #20
    d2cc:	af00      	add	r7, sp, #0
    d2ce:	4603      	mov	r3, r0
    d2d0:	460a      	mov	r2, r1
    d2d2:	71fb      	strb	r3, [r7, #7]
    d2d4:	4613      	mov	r3, r2
    d2d6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    d2d8:	79fb      	ldrb	r3, [r7, #7]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d008      	beq.n	d2f0 <_usb_d_dev_ept+0x28>
    d2de:	79bb      	ldrb	r3, [r7, #6]
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d003      	beq.n	d2ec <_usb_d_dev_ept+0x24>
    d2e4:	79fb      	ldrb	r3, [r7, #7]
    d2e6:	3304      	adds	r3, #4
    d2e8:	b2db      	uxtb	r3, r3
    d2ea:	e002      	b.n	d2f2 <_usb_d_dev_ept+0x2a>
    d2ec:	79fb      	ldrb	r3, [r7, #7]
    d2ee:	e000      	b.n	d2f2 <_usb_d_dev_ept+0x2a>
    d2f0:	2300      	movs	r3, #0
    d2f2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    d2f4:	7bfa      	ldrb	r2, [r7, #15]
    d2f6:	4613      	mov	r3, r2
    d2f8:	009b      	lsls	r3, r3, #2
    d2fa:	4413      	add	r3, r2
    d2fc:	009b      	lsls	r3, r3, #2
    d2fe:	3310      	adds	r3, #16
    d300:	4a04      	ldr	r2, [pc, #16]	; (d314 <_usb_d_dev_ept+0x4c>)
    d302:	4413      	add	r3, r2
    d304:	3304      	adds	r3, #4
}
    d306:	4618      	mov	r0, r3
    d308:	3714      	adds	r7, #20
    d30a:	46bd      	mov	sp, r7
    d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d310:	4770      	bx	lr
    d312:	bf00      	nop
    d314:	20001e30 	.word	0x20001e30

0000d318 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    d318:	b580      	push	{r7, lr}
    d31a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    d31c:	2104      	movs	r1, #4
    d31e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d322:	4b03      	ldr	r3, [pc, #12]	; (d330 <_usb_d_dev_sof+0x18>)
    d324:	4798      	blx	r3
	dev_inst.callbacks.sof();
    d326:	4b03      	ldr	r3, [pc, #12]	; (d334 <_usb_d_dev_sof+0x1c>)
    d328:	681b      	ldr	r3, [r3, #0]
    d32a:	4798      	blx	r3
}
    d32c:	bf00      	nop
    d32e:	bd80      	pop	{r7, pc}
    d330:	0000c98f 	.word	0x0000c98f
    d334:	20001e30 	.word	0x20001e30

0000d338 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    d338:	b580      	push	{r7, lr}
    d33a:	b084      	sub	sp, #16
    d33c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    d33e:	2300      	movs	r3, #0
    d340:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d342:	f240 2101 	movw	r1, #513	; 0x201
    d346:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d34a:	4b1a      	ldr	r3, [pc, #104]	; (d3b4 <_usb_d_dev_lpmsusp+0x7c>)
    d34c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d34e:	f240 2101 	movw	r1, #513	; 0x201
    d352:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d356:	4b18      	ldr	r3, [pc, #96]	; (d3b8 <_usb_d_dev_lpmsusp+0x80>)
    d358:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d35a:	2170      	movs	r1, #112	; 0x70
    d35c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d360:	4b16      	ldr	r3, [pc, #88]	; (d3bc <_usb_d_dev_lpmsusp+0x84>)
    d362:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    d364:	2300      	movs	r3, #0
    d366:	73fb      	strb	r3, [r7, #15]
    d368:	e018      	b.n	d39c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    d36a:	7bfb      	ldrb	r3, [r7, #15]
    d36c:	015b      	lsls	r3, r3, #5
    d36e:	4a14      	ldr	r2, [pc, #80]	; (d3c0 <_usb_d_dev_lpmsusp+0x88>)
    d370:	4413      	add	r3, r2
    d372:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    d374:	687b      	ldr	r3, [r7, #4]
    d376:	891b      	ldrh	r3, [r3, #8]
    d378:	f3c3 0303 	ubfx	r3, r3, #0, #4
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b03      	cmp	r3, #3
    d380:	d109      	bne.n	d396 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    d382:	687b      	ldr	r3, [r7, #4]
    d384:	891b      	ldrh	r3, [r3, #8]
    d386:	f3c3 130a 	ubfx	r3, r3, #4, #11
    d38a:	b29b      	uxth	r3, r3
    d38c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    d38e:	687b      	ldr	r3, [r7, #4]
    d390:	2200      	movs	r2, #0
    d392:	811a      	strh	r2, [r3, #8]
			break;
    d394:	e005      	b.n	d3a2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    d396:	7bfb      	ldrb	r3, [r7, #15]
    d398:	3301      	adds	r3, #1
    d39a:	73fb      	strb	r3, [r7, #15]
    d39c:	7bfb      	ldrb	r3, [r7, #15]
    d39e:	2b03      	cmp	r3, #3
    d3a0:	d9e3      	bls.n	d36a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    d3a2:	4b08      	ldr	r3, [pc, #32]	; (d3c4 <_usb_d_dev_lpmsusp+0x8c>)
    d3a4:	685b      	ldr	r3, [r3, #4]
    d3a6:	68b9      	ldr	r1, [r7, #8]
    d3a8:	2003      	movs	r0, #3
    d3aa:	4798      	blx	r3
}
    d3ac:	bf00      	nop
    d3ae:	3710      	adds	r7, #16
    d3b0:	46bd      	mov	sp, r7
    d3b2:	bd80      	pop	{r7, pc}
    d3b4:	0000c98f 	.word	0x0000c98f
    d3b8:	0000c9e5 	.word	0x0000c9e5
    d3bc:	0000c9ad 	.word	0x0000c9ad
    d3c0:	20001ef8 	.word	0x20001ef8
    d3c4:	20001e30 	.word	0x20001e30

0000d3c8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    d3cc:	2180      	movs	r1, #128	; 0x80
    d3ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3d2:	4b04      	ldr	r3, [pc, #16]	; (d3e4 <_usb_d_dev_ramerr+0x1c>)
    d3d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    d3d6:	4b04      	ldr	r3, [pc, #16]	; (d3e8 <_usb_d_dev_ramerr+0x20>)
    d3d8:	685b      	ldr	r3, [r3, #4]
    d3da:	2100      	movs	r1, #0
    d3dc:	2005      	movs	r0, #5
    d3de:	4798      	blx	r3
}
    d3e0:	bf00      	nop
    d3e2:	bd80      	pop	{r7, pc}
    d3e4:	0000c98f 	.word	0x0000c98f
    d3e8:	20001e30 	.word	0x20001e30

0000d3ec <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    d3ec:	b580      	push	{r7, lr}
    d3ee:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d3f0:	2170      	movs	r1, #112	; 0x70
    d3f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d3f6:	4b0b      	ldr	r3, [pc, #44]	; (d424 <_usb_d_dev_wakeup+0x38>)
    d3f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d3fa:	2170      	movs	r1, #112	; 0x70
    d3fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d400:	4b09      	ldr	r3, [pc, #36]	; (d428 <_usb_d_dev_wakeup+0x3c>)
    d402:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d404:	f240 2101 	movw	r1, #513	; 0x201
    d408:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d40c:	4b07      	ldr	r3, [pc, #28]	; (d42c <_usb_d_dev_wakeup+0x40>)
    d40e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    d410:	2000      	movs	r0, #0
    d412:	4b07      	ldr	r3, [pc, #28]	; (d430 <_usb_d_dev_wakeup+0x44>)
    d414:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    d416:	4b07      	ldr	r3, [pc, #28]	; (d434 <_usb_d_dev_wakeup+0x48>)
    d418:	685b      	ldr	r3, [r3, #4]
    d41a:	2100      	movs	r1, #0
    d41c:	2002      	movs	r0, #2
    d41e:	4798      	blx	r3
}
    d420:	bf00      	nop
    d422:	bd80      	pop	{r7, pc}
    d424:	0000c98f 	.word	0x0000c98f
    d428:	0000c9e5 	.word	0x0000c9e5
    d42c:	0000c9ad 	.word	0x0000c9ad
    d430:	0000cc8d 	.word	0x0000cc8d
    d434:	20001e30 	.word	0x20001e30

0000d438 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    d438:	b580      	push	{r7, lr}
    d43a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    d43c:	2200      	movs	r2, #0
    d43e:	2100      	movs	r1, #0
    d440:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d444:	4b0d      	ldr	r3, [pc, #52]	; (d47c <_usb_d_dev_reset+0x44>)
    d446:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    d448:	2108      	movs	r1, #8
    d44a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d44e:	4b0c      	ldr	r3, [pc, #48]	; (d480 <_usb_d_dev_reset+0x48>)
    d450:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d452:	2170      	movs	r1, #112	; 0x70
    d454:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d458:	4b0a      	ldr	r3, [pc, #40]	; (d484 <_usb_d_dev_reset+0x4c>)
    d45a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d45c:	f240 2101 	movw	r1, #513	; 0x201
    d460:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d464:	4b08      	ldr	r3, [pc, #32]	; (d488 <_usb_d_dev_reset+0x50>)
    d466:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    d468:	4b08      	ldr	r3, [pc, #32]	; (d48c <_usb_d_dev_reset+0x54>)
    d46a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    d46c:	4b08      	ldr	r3, [pc, #32]	; (d490 <_usb_d_dev_reset+0x58>)
    d46e:	685b      	ldr	r3, [r3, #4]
    d470:	2100      	movs	r1, #0
    d472:	2001      	movs	r0, #1
    d474:	4798      	blx	r3
}
    d476:	bf00      	nop
    d478:	bd80      	pop	{r7, pc}
    d47a:	bf00      	nop
    d47c:	0000c925 	.word	0x0000c925
    d480:	0000c98f 	.word	0x0000c98f
    d484:	0000c9e5 	.word	0x0000c9e5
    d488:	0000c9ad 	.word	0x0000c9ad
    d48c:	0000dff5 	.word	0x0000dff5
    d490:	20001e30 	.word	0x20001e30

0000d494 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    d494:	b580      	push	{r7, lr}
    d496:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d498:	f240 2101 	movw	r1, #513	; 0x201
    d49c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d4a0:	4b09      	ldr	r3, [pc, #36]	; (d4c8 <_usb_d_dev_suspend+0x34>)
    d4a2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    d4a4:	f240 2101 	movw	r1, #513	; 0x201
    d4a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d4ac:	4b07      	ldr	r3, [pc, #28]	; (d4cc <_usb_d_dev_suspend+0x38>)
    d4ae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    d4b0:	2170      	movs	r1, #112	; 0x70
    d4b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d4b6:	4b06      	ldr	r3, [pc, #24]	; (d4d0 <_usb_d_dev_suspend+0x3c>)
    d4b8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    d4ba:	4b06      	ldr	r3, [pc, #24]	; (d4d4 <_usb_d_dev_suspend+0x40>)
    d4bc:	685b      	ldr	r3, [r3, #4]
    d4be:	2100      	movs	r1, #0
    d4c0:	2004      	movs	r0, #4
    d4c2:	4798      	blx	r3
}
    d4c4:	bf00      	nop
    d4c6:	bd80      	pop	{r7, pc}
    d4c8:	0000c98f 	.word	0x0000c98f
    d4cc:	0000c9e5 	.word	0x0000c9e5
    d4d0:	0000c9ad 	.word	0x0000c9ad
    d4d4:	20001e30 	.word	0x20001e30

0000d4d8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    d4d8:	b580      	push	{r7, lr}
    d4da:	b082      	sub	sp, #8
    d4dc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    d4de:	2301      	movs	r3, #1
    d4e0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    d4e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d4e6:	4b22      	ldr	r3, [pc, #136]	; (d570 <_usb_d_dev_handle_nep+0x98>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
    d4ec:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    d4ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    d4f2:	4b20      	ldr	r3, [pc, #128]	; (d574 <_usb_d_dev_handle_nep+0x9c>)
    d4f4:	4798      	blx	r3
    d4f6:	4603      	mov	r3, r0
    d4f8:	461a      	mov	r2, r3
    d4fa:	88bb      	ldrh	r3, [r7, #4]
    d4fc:	4013      	ands	r3, r2
    d4fe:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    d500:	88bb      	ldrh	r3, [r7, #4]
    d502:	f003 0304 	and.w	r3, r3, #4
    d506:	2b00      	cmp	r3, #0
    d508:	d003      	beq.n	d512 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    d50a:	4b1b      	ldr	r3, [pc, #108]	; (d578 <_usb_d_dev_handle_nep+0xa0>)
    d50c:	4798      	blx	r3
		return true;
    d50e:	2301      	movs	r3, #1
    d510:	e02a      	b.n	d568 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    d512:	88bb      	ldrh	r3, [r7, #4]
    d514:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d518:	2b00      	cmp	r3, #0
    d51a:	d002      	beq.n	d522 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    d51c:	4b17      	ldr	r3, [pc, #92]	; (d57c <_usb_d_dev_handle_nep+0xa4>)
    d51e:	4798      	blx	r3
    d520:	e021      	b.n	d566 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    d522:	88bb      	ldrh	r3, [r7, #4]
    d524:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d528:	2b00      	cmp	r3, #0
    d52a:	d002      	beq.n	d532 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    d52c:	4b14      	ldr	r3, [pc, #80]	; (d580 <_usb_d_dev_handle_nep+0xa8>)
    d52e:	4798      	blx	r3
    d530:	e019      	b.n	d566 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    d532:	88bb      	ldrh	r3, [r7, #4]
    d534:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d538:	2b00      	cmp	r3, #0
    d53a:	d002      	beq.n	d542 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    d53c:	4b11      	ldr	r3, [pc, #68]	; (d584 <_usb_d_dev_handle_nep+0xac>)
    d53e:	4798      	blx	r3
    d540:	e011      	b.n	d566 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    d542:	88bb      	ldrh	r3, [r7, #4]
    d544:	f003 0308 	and.w	r3, r3, #8
    d548:	2b00      	cmp	r3, #0
    d54a:	d002      	beq.n	d552 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    d54c:	4b0e      	ldr	r3, [pc, #56]	; (d588 <_usb_d_dev_handle_nep+0xb0>)
    d54e:	4798      	blx	r3
    d550:	e009      	b.n	d566 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    d552:	88bb      	ldrh	r3, [r7, #4]
    d554:	f003 0301 	and.w	r3, r3, #1
    d558:	2b00      	cmp	r3, #0
    d55a:	d002      	beq.n	d562 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    d55c:	4b0b      	ldr	r3, [pc, #44]	; (d58c <_usb_d_dev_handle_nep+0xb4>)
    d55e:	4798      	blx	r3
    d560:	e001      	b.n	d566 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    d562:	2300      	movs	r3, #0
    d564:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    d566:	79fb      	ldrb	r3, [r7, #7]
}
    d568:	4618      	mov	r0, r3
    d56a:	3708      	adds	r7, #8
    d56c:	46bd      	mov	sp, r7
    d56e:	bd80      	pop	{r7, pc}
    d570:	0000c975 	.word	0x0000c975
    d574:	0000c9cb 	.word	0x0000c9cb
    d578:	0000d319 	.word	0x0000d319
    d57c:	0000d339 	.word	0x0000d339
    d580:	0000d3c9 	.word	0x0000d3c9
    d584:	0000d3ed 	.word	0x0000d3ed
    d588:	0000d439 	.word	0x0000d439
    d58c:	0000d495 	.word	0x0000d495

0000d590 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d590:	b590      	push	{r4, r7, lr}
    d592:	b089      	sub	sp, #36	; 0x24
    d594:	af00      	add	r7, sp, #0
    d596:	6078      	str	r0, [r7, #4]
    d598:	460b      	mov	r3, r1
    d59a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    d59c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d5a0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	7c9b      	ldrb	r3, [r3, #18]
    d5a6:	f003 030f 	and.w	r3, r3, #15
    d5aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d5ac:	7dfb      	ldrb	r3, [r7, #23]
    d5ae:	015b      	lsls	r3, r3, #5
    d5b0:	4a73      	ldr	r2, [pc, #460]	; (d780 <_usb_d_dev_in_next+0x1f0>)
    d5b2:	4413      	add	r3, r2
    d5b4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    d5b6:	78fb      	ldrb	r3, [r7, #3]
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d006      	beq.n	d5ca <_usb_d_dev_in_next+0x3a>
    d5bc:	693b      	ldr	r3, [r7, #16]
    d5be:	3310      	adds	r3, #16
    d5c0:	685b      	ldr	r3, [r3, #4]
    d5c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d5c6:	b29b      	uxth	r3, r3
    d5c8:	e000      	b.n	d5cc <_usb_d_dev_in_next+0x3c>
    d5ca:	2300      	movs	r3, #0
    d5cc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    d5ce:	687b      	ldr	r3, [r7, #4]
    d5d0:	8a1b      	ldrh	r3, [r3, #16]
    d5d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d5d6:	4293      	cmp	r3, r2
    d5d8:	d103      	bne.n	d5e2 <_usb_d_dev_in_next+0x52>
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	8a1b      	ldrh	r3, [r3, #16]
    d5de:	b21b      	sxth	r3, r3
    d5e0:	e004      	b.n	d5ec <_usb_d_dev_in_next+0x5c>
    d5e2:	687b      	ldr	r3, [r7, #4]
    d5e4:	8a1b      	ldrh	r3, [r3, #16]
    d5e6:	3b01      	subs	r3, #1
    d5e8:	b29b      	uxth	r3, r3
    d5ea:	b21b      	sxth	r3, r3
    d5ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    d5f0:	4013      	ands	r3, r2
    d5f2:	b21b      	sxth	r3, r3
    d5f4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    d5f6:	2300      	movs	r3, #0
    d5f8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	7cdb      	ldrb	r3, [r3, #19]
    d5fe:	f003 0307 	and.w	r3, r3, #7
    d602:	b2db      	uxtb	r3, r3
    d604:	2b01      	cmp	r3, #1
    d606:	bf0c      	ite	eq
    d608:	2301      	moveq	r3, #1
    d60a:	2300      	movne	r3, #0
    d60c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    d60e:	78fb      	ldrb	r3, [r7, #3]
    d610:	2b00      	cmp	r3, #0
    d612:	d004      	beq.n	d61e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    d614:	7dfb      	ldrb	r3, [r7, #23]
    d616:	2101      	movs	r1, #1
    d618:	4618      	mov	r0, r3
    d61a:	4b5a      	ldr	r3, [pc, #360]	; (d784 <_usb_d_dev_in_next+0x1f4>)
    d61c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    d61e:	687b      	ldr	r3, [r7, #4]
    d620:	689a      	ldr	r2, [r3, #8]
    d622:	89fb      	ldrh	r3, [r7, #14]
    d624:	441a      	add	r2, r3
    d626:	687b      	ldr	r3, [r7, #4]
    d628:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    d62a:	687b      	ldr	r3, [r7, #4]
    d62c:	689a      	ldr	r2, [r3, #8]
    d62e:	687b      	ldr	r3, [r7, #4]
    d630:	685b      	ldr	r3, [r3, #4]
    d632:	429a      	cmp	r2, r3
    d634:	d243      	bcs.n	d6be <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    d636:	687b      	ldr	r3, [r7, #4]
    d638:	685b      	ldr	r3, [r3, #4]
    d63a:	b29a      	uxth	r2, r3
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	689b      	ldr	r3, [r3, #8]
    d640:	b29b      	uxth	r3, r3
    d642:	1ad3      	subs	r3, r2, r3
    d644:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    d646:	687b      	ldr	r3, [r7, #4]
    d648:	7cdb      	ldrb	r3, [r3, #19]
    d64a:	f003 0320 	and.w	r3, r3, #32
    d64e:	b2db      	uxtb	r3, r3
    d650:	2b00      	cmp	r3, #0
    d652:	d01b      	beq.n	d68c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    d654:	687b      	ldr	r3, [r7, #4]
    d656:	8a1b      	ldrh	r3, [r3, #16]
    d658:	8bfa      	ldrh	r2, [r7, #30]
    d65a:	429a      	cmp	r2, r3
    d65c:	d902      	bls.n	d664 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    d65e:	687b      	ldr	r3, [r7, #4]
    d660:	8a1b      	ldrh	r3, [r3, #16]
    d662:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    d664:	687b      	ldr	r3, [r7, #4]
    d666:	68d8      	ldr	r0, [r3, #12]
    d668:	687b      	ldr	r3, [r7, #4]
    d66a:	681a      	ldr	r2, [r3, #0]
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	689b      	ldr	r3, [r3, #8]
    d670:	4413      	add	r3, r2
    d672:	8bfa      	ldrh	r2, [r7, #30]
    d674:	4619      	mov	r1, r3
    d676:	4b44      	ldr	r3, [pc, #272]	; (d788 <_usb_d_dev_in_next+0x1f8>)
    d678:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	68db      	ldr	r3, [r3, #12]
    d67e:	461a      	mov	r2, r3
    d680:	7dfb      	ldrb	r3, [r7, #23]
    d682:	2101      	movs	r1, #1
    d684:	4618      	mov	r0, r3
    d686:	4b41      	ldr	r3, [pc, #260]	; (d78c <_usb_d_dev_in_next+0x1fc>)
    d688:	4798      	blx	r3
    d68a:	e011      	b.n	d6b0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    d68c:	8bfb      	ldrh	r3, [r7, #30]
    d68e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d692:	d902      	bls.n	d69a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    d694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d698:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d69a:	687b      	ldr	r3, [r7, #4]
    d69c:	681a      	ldr	r2, [r3, #0]
    d69e:	687b      	ldr	r3, [r7, #4]
    d6a0:	689b      	ldr	r3, [r3, #8]
    d6a2:	4413      	add	r3, r2
    d6a4:	461a      	mov	r2, r3
    d6a6:	7dfb      	ldrb	r3, [r7, #23]
    d6a8:	2101      	movs	r1, #1
    d6aa:	4618      	mov	r0, r3
    d6ac:	4b37      	ldr	r3, [pc, #220]	; (d78c <_usb_d_dev_in_next+0x1fc>)
    d6ae:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    d6b0:	8bfa      	ldrh	r2, [r7, #30]
    d6b2:	7df8      	ldrb	r0, [r7, #23]
    d6b4:	2300      	movs	r3, #0
    d6b6:	2101      	movs	r1, #1
    d6b8:	4c35      	ldr	r4, [pc, #212]	; (d790 <_usb_d_dev_in_next+0x200>)
    d6ba:	47a0      	blx	r4
		goto _in_tx_exec;
    d6bc:	e041      	b.n	d742 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    d6be:	687b      	ldr	r3, [r7, #4]
    d6c0:	7cdb      	ldrb	r3, [r3, #19]
    d6c2:	f003 0310 	and.w	r3, r3, #16
    d6c6:	b2db      	uxtb	r3, r3
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d00b      	beq.n	d6e4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    d6cc:	687a      	ldr	r2, [r7, #4]
    d6ce:	7cd3      	ldrb	r3, [r2, #19]
    d6d0:	f36f 1304 	bfc	r3, #4, #1
    d6d4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    d6d6:	7df8      	ldrb	r0, [r7, #23]
    d6d8:	2300      	movs	r3, #0
    d6da:	2200      	movs	r2, #0
    d6dc:	2101      	movs	r1, #1
    d6de:	4c2c      	ldr	r4, [pc, #176]	; (d790 <_usb_d_dev_in_next+0x200>)
    d6e0:	47a0      	blx	r4
		goto _in_tx_exec;
    d6e2:	e02e      	b.n	d742 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    d6e4:	7afb      	ldrb	r3, [r7, #11]
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d006      	beq.n	d6f8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    d6ea:	7dfb      	ldrb	r3, [r7, #23]
    d6ec:	224b      	movs	r2, #75	; 0x4b
    d6ee:	4619      	mov	r1, r3
    d6f0:	69b8      	ldr	r0, [r7, #24]
    d6f2:	4b28      	ldr	r3, [pc, #160]	; (d794 <_usb_d_dev_in_next+0x204>)
    d6f4:	4798      	blx	r3
    d6f6:	e005      	b.n	d704 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    d6f8:	7dfb      	ldrb	r3, [r7, #23]
    d6fa:	224a      	movs	r2, #74	; 0x4a
    d6fc:	4619      	mov	r1, r3
    d6fe:	69b8      	ldr	r0, [r7, #24]
    d700:	4b24      	ldr	r3, [pc, #144]	; (d794 <_usb_d_dev_in_next+0x204>)
    d702:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    d704:	687b      	ldr	r3, [r7, #4]
    d706:	8a1b      	ldrh	r3, [r3, #16]
    d708:	89ba      	ldrh	r2, [r7, #12]
    d70a:	429a      	cmp	r2, r3
    d70c:	d114      	bne.n	d738 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    d70e:	687a      	ldr	r2, [r7, #4]
    d710:	7cd3      	ldrb	r3, [r2, #19]
    d712:	f36f 1386 	bfc	r3, #6, #1
    d716:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    d718:	4b1f      	ldr	r3, [pc, #124]	; (d798 <_usb_d_dev_in_next+0x208>)
    d71a:	68db      	ldr	r3, [r3, #12]
    d71c:	687a      	ldr	r2, [r7, #4]
    d71e:	7c90      	ldrb	r0, [r2, #18]
    d720:	687a      	ldr	r2, [r7, #4]
    d722:	6892      	ldr	r2, [r2, #8]
    d724:	4611      	mov	r1, r2
    d726:	4798      	blx	r3
    d728:	4603      	mov	r3, r0
    d72a:	2b00      	cmp	r3, #0
    d72c:	d124      	bne.n	d778 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    d72e:	687a      	ldr	r2, [r7, #4]
    d730:	7cd3      	ldrb	r3, [r2, #19]
    d732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d736:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d738:	2100      	movs	r1, #0
    d73a:	6878      	ldr	r0, [r7, #4]
    d73c:	4b17      	ldr	r3, [pc, #92]	; (d79c <_usb_d_dev_in_next+0x20c>)
    d73e:	4798      	blx	r3
	return;
    d740:	e01b      	b.n	d77a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    d742:	78fb      	ldrb	r3, [r7, #3]
    d744:	f083 0301 	eor.w	r3, r3, #1
    d748:	b2db      	uxtb	r3, r3
    d74a:	2b00      	cmp	r3, #0
    d74c:	d00d      	beq.n	d76a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    d74e:	7afb      	ldrb	r3, [r7, #11]
    d750:	2b00      	cmp	r3, #0
    d752:	d002      	beq.n	d75a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    d754:	234e      	movs	r3, #78	; 0x4e
    d756:	777b      	strb	r3, [r7, #29]
    d758:	e001      	b.n	d75e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    d75a:	234a      	movs	r3, #74	; 0x4a
    d75c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    d75e:	7f7a      	ldrb	r2, [r7, #29]
    d760:	7dfb      	ldrb	r3, [r7, #23]
    d762:	4619      	mov	r1, r3
    d764:	69b8      	ldr	r0, [r7, #24]
    d766:	4b0e      	ldr	r3, [pc, #56]	; (d7a0 <_usb_d_dev_in_next+0x210>)
    d768:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    d76a:	7dfb      	ldrb	r3, [r7, #23]
    d76c:	2201      	movs	r2, #1
    d76e:	2101      	movs	r1, #1
    d770:	4618      	mov	r0, r3
    d772:	4b0c      	ldr	r3, [pc, #48]	; (d7a4 <_usb_d_dev_in_next+0x214>)
    d774:	4798      	blx	r3
    d776:	e000      	b.n	d77a <_usb_d_dev_in_next+0x1ea>
			return;
    d778:	bf00      	nop
}
    d77a:	3724      	adds	r7, #36	; 0x24
    d77c:	46bd      	mov	sp, r7
    d77e:	bd90      	pop	{r4, r7, pc}
    d780:	20001ef8 	.word	0x20001ef8
    d784:	0000cf89 	.word	0x0000cf89
    d788:	00011c19 	.word	0x00011c19
    d78c:	0000cfb5 	.word	0x0000cfb5
    d790:	0000d0fd 	.word	0x0000d0fd
    d794:	0000c895 	.word	0x0000c895
    d798:	20001e30 	.word	0x20001e30
    d79c:	0000e8b9 	.word	0x0000e8b9
    d7a0:	0000c869 	.word	0x0000c869
    d7a4:	0000d1b5 	.word	0x0000d1b5

0000d7a8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    d7a8:	b590      	push	{r4, r7, lr}
    d7aa:	b08b      	sub	sp, #44	; 0x2c
    d7ac:	af00      	add	r7, sp, #0
    d7ae:	6078      	str	r0, [r7, #4]
    d7b0:	460b      	mov	r3, r1
    d7b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    d7b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    d7b8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    d7ba:	687b      	ldr	r3, [r7, #4]
    d7bc:	7c9b      	ldrb	r3, [r3, #18]
    d7be:	f003 030f 	and.w	r3, r3, #15
    d7c2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    d7c4:	7ffb      	ldrb	r3, [r7, #31]
    d7c6:	015b      	lsls	r3, r3, #5
    d7c8:	4a94      	ldr	r2, [pc, #592]	; (da1c <_usb_d_dev_out_next+0x274>)
    d7ca:	4413      	add	r3, r2
    d7cc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    d7ce:	78fb      	ldrb	r3, [r7, #3]
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	d005      	beq.n	d7e0 <_usb_d_dev_out_next+0x38>
    d7d4:	69bb      	ldr	r3, [r7, #24]
    d7d6:	685b      	ldr	r3, [r3, #4]
    d7d8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    d7dc:	b29b      	uxth	r3, r3
    d7de:	e000      	b.n	d7e2 <_usb_d_dev_out_next+0x3a>
    d7e0:	2300      	movs	r3, #0
    d7e2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    d7e4:	78fb      	ldrb	r3, [r7, #3]
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	d005      	beq.n	d7f6 <_usb_d_dev_out_next+0x4e>
    d7ea:	69bb      	ldr	r3, [r7, #24]
    d7ec:	685b      	ldr	r3, [r3, #4]
    d7ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    d7f2:	b29b      	uxth	r3, r3
    d7f4:	e000      	b.n	d7f8 <_usb_d_dev_out_next+0x50>
    d7f6:	2300      	movs	r3, #0
    d7f8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d7fa:	687b      	ldr	r3, [r7, #4]
    d7fc:	8a1b      	ldrh	r3, [r3, #16]
    d7fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d802:	4293      	cmp	r3, r2
    d804:	d004      	beq.n	d810 <_usb_d_dev_out_next+0x68>
    d806:	687b      	ldr	r3, [r7, #4]
    d808:	8a1b      	ldrh	r3, [r3, #16]
    d80a:	3b01      	subs	r3, #1
    d80c:	b29b      	uxth	r3, r3
    d80e:	e001      	b.n	d814 <_usb_d_dev_out_next+0x6c>
    d810:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d814:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    d816:	8aba      	ldrh	r2, [r7, #20]
    d818:	8a7b      	ldrh	r3, [r7, #18]
    d81a:	4013      	ands	r3, r2
    d81c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    d81e:	687b      	ldr	r3, [r7, #4]
    d820:	7cdb      	ldrb	r3, [r3, #19]
    d822:	f003 0307 	and.w	r3, r3, #7
    d826:	b2db      	uxtb	r3, r3
    d828:	2b01      	cmp	r3, #1
    d82a:	bf0c      	ite	eq
    d82c:	2301      	moveq	r3, #1
    d82e:	2300      	movne	r3, #0
    d830:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    d832:	78fb      	ldrb	r3, [r7, #3]
    d834:	2b00      	cmp	r3, #0
    d836:	d004      	beq.n	d842 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    d838:	7ffb      	ldrb	r3, [r7, #31]
    d83a:	2100      	movs	r1, #0
    d83c:	4618      	mov	r0, r3
    d83e:	4b78      	ldr	r3, [pc, #480]	; (da20 <_usb_d_dev_out_next+0x278>)
    d840:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    d842:	687b      	ldr	r3, [r7, #4]
    d844:	7cdb      	ldrb	r3, [r3, #19]
    d846:	f003 0320 	and.w	r3, r3, #32
    d84a:	b2db      	uxtb	r3, r3
    d84c:	2b00      	cmp	r3, #0
    d84e:	d01c      	beq.n	d88a <_usb_d_dev_out_next+0xe2>
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	685b      	ldr	r3, [r3, #4]
    d854:	2b00      	cmp	r3, #0
    d856:	d018      	beq.n	d88a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	685b      	ldr	r3, [r3, #4]
    d85c:	b29a      	uxth	r2, r3
    d85e:	687b      	ldr	r3, [r7, #4]
    d860:	689b      	ldr	r3, [r3, #8]
    d862:	b29b      	uxth	r3, r3
    d864:	1ad3      	subs	r3, r2, r3
    d866:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    d868:	687b      	ldr	r3, [r7, #4]
    d86a:	681a      	ldr	r2, [r3, #0]
    d86c:	687b      	ldr	r3, [r7, #4]
    d86e:	689b      	ldr	r3, [r3, #8]
    d870:	18d0      	adds	r0, r2, r3
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	68d9      	ldr	r1, [r3, #12]
    d876:	89ba      	ldrh	r2, [r7, #12]
    d878:	8a3b      	ldrh	r3, [r7, #16]
    d87a:	429a      	cmp	r2, r3
    d87c:	d901      	bls.n	d882 <_usb_d_dev_out_next+0xda>
    d87e:	8a3b      	ldrh	r3, [r7, #16]
    d880:	e000      	b.n	d884 <_usb_d_dev_out_next+0xdc>
    d882:	89bb      	ldrh	r3, [r7, #12]
    d884:	461a      	mov	r2, r3
    d886:	4b67      	ldr	r3, [pc, #412]	; (da24 <_usb_d_dev_out_next+0x27c>)
    d888:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    d88a:	687b      	ldr	r3, [r7, #4]
    d88c:	685b      	ldr	r3, [r3, #4]
    d88e:	2b00      	cmp	r3, #0
    d890:	d121      	bne.n	d8d6 <_usb_d_dev_out_next+0x12e>
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	7cdb      	ldrb	r3, [r3, #19]
    d896:	f003 0310 	and.w	r3, r3, #16
    d89a:	b2db      	uxtb	r3, r3
    d89c:	2b00      	cmp	r3, #0
    d89e:	d01a      	beq.n	d8d6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    d8a0:	687a      	ldr	r2, [r7, #4]
    d8a2:	7cd3      	ldrb	r3, [r2, #19]
    d8a4:	f36f 1304 	bfc	r3, #4, #1
    d8a8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    d8aa:	687a      	ldr	r2, [r7, #4]
    d8ac:	7cd3      	ldrb	r3, [r2, #19]
    d8ae:	f043 0320 	orr.w	r3, r3, #32
    d8b2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	68db      	ldr	r3, [r3, #12]
    d8b8:	461a      	mov	r2, r3
    d8ba:	7ffb      	ldrb	r3, [r7, #31]
    d8bc:	2100      	movs	r1, #0
    d8be:	4618      	mov	r0, r3
    d8c0:	4b59      	ldr	r3, [pc, #356]	; (da28 <_usb_d_dev_out_next+0x280>)
    d8c2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    d8c4:	687b      	ldr	r3, [r7, #4]
    d8c6:	8a1b      	ldrh	r3, [r3, #16]
    d8c8:	461a      	mov	r2, r3
    d8ca:	7ff8      	ldrb	r0, [r7, #31]
    d8cc:	2300      	movs	r3, #0
    d8ce:	2100      	movs	r1, #0
    d8d0:	4c56      	ldr	r4, [pc, #344]	; (da2c <_usb_d_dev_out_next+0x284>)
    d8d2:	47a0      	blx	r4
		goto _out_rx_exec;
    d8d4:	e090      	b.n	d9f8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    d8d6:	78fb      	ldrb	r3, [r7, #3]
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d010      	beq.n	d8fe <_usb_d_dev_out_next+0x156>
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	8a1b      	ldrh	r3, [r3, #16]
    d8e0:	8a3a      	ldrh	r2, [r7, #16]
    d8e2:	429a      	cmp	r2, r3
    d8e4:	d20b      	bcs.n	d8fe <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    d8e6:	687a      	ldr	r2, [r7, #4]
    d8e8:	7cd3      	ldrb	r3, [r2, #19]
    d8ea:	f36f 1304 	bfc	r3, #4, #1
    d8ee:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    d8f0:	687b      	ldr	r3, [r7, #4]
    d8f2:	689a      	ldr	r2, [r3, #8]
    d8f4:	8abb      	ldrh	r3, [r7, #20]
    d8f6:	441a      	add	r2, r3
    d8f8:	687b      	ldr	r3, [r7, #4]
    d8fa:	609a      	str	r2, [r3, #8]
    d8fc:	e05c      	b.n	d9b8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	689a      	ldr	r2, [r3, #8]
    d902:	8afb      	ldrh	r3, [r7, #22]
    d904:	441a      	add	r2, r3
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	689a      	ldr	r2, [r3, #8]
    d90e:	687b      	ldr	r3, [r7, #4]
    d910:	685b      	ldr	r3, [r3, #4]
    d912:	429a      	cmp	r2, r3
    d914:	d250      	bcs.n	d9b8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	685b      	ldr	r3, [r3, #4]
    d91a:	b29a      	uxth	r2, r3
    d91c:	687b      	ldr	r3, [r7, #4]
    d91e:	689b      	ldr	r3, [r3, #8]
    d920:	b29b      	uxth	r3, r3
    d922:	1ad3      	subs	r3, r2, r3
    d924:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	7cdb      	ldrb	r3, [r3, #19]
    d92a:	f003 0320 	and.w	r3, r3, #32
    d92e:	b2db      	uxtb	r3, r3
    d930:	2b00      	cmp	r3, #0
    d932:	d010      	beq.n	d956 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    d934:	687b      	ldr	r3, [r7, #4]
    d936:	8a1b      	ldrh	r3, [r3, #16]
    d938:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d93a:	429a      	cmp	r2, r3
    d93c:	d902      	bls.n	d944 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	8a1b      	ldrh	r3, [r3, #16]
    d942:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d944:	687b      	ldr	r3, [r7, #4]
    d946:	68db      	ldr	r3, [r3, #12]
    d948:	461a      	mov	r2, r3
    d94a:	7ffb      	ldrb	r3, [r7, #31]
    d94c:	2100      	movs	r1, #0
    d94e:	4618      	mov	r0, r3
    d950:	4b35      	ldr	r3, [pc, #212]	; (da28 <_usb_d_dev_out_next+0x280>)
    d952:	4798      	blx	r3
    d954:	e029      	b.n	d9aa <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	8a1b      	ldrh	r3, [r3, #16]
    d95a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d95c:	429a      	cmp	r2, r3
    d95e:	d90f      	bls.n	d980 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    d960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    d962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    d966:	d903      	bls.n	d970 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    d968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d96c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d96e:	e011      	b.n	d994 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    d970:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d972:	8a7b      	ldrh	r3, [r7, #18]
    d974:	4013      	ands	r3, r2
    d976:	b29b      	uxth	r3, r3
    d978:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d97a:	1ad3      	subs	r3, r2, r3
    d97c:	84fb      	strh	r3, [r7, #38]	; 0x26
    d97e:	e009      	b.n	d994 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    d980:	687b      	ldr	r3, [r7, #4]
    d982:	8a1b      	ldrh	r3, [r3, #16]
    d984:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d986:	429a      	cmp	r2, r3
    d988:	d204      	bcs.n	d994 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    d98a:	687a      	ldr	r2, [r7, #4]
    d98c:	7cd3      	ldrb	r3, [r2, #19]
    d98e:	f043 0320 	orr.w	r3, r3, #32
    d992:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    d994:	687b      	ldr	r3, [r7, #4]
    d996:	681a      	ldr	r2, [r3, #0]
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	689b      	ldr	r3, [r3, #8]
    d99c:	4413      	add	r3, r2
    d99e:	461a      	mov	r2, r3
    d9a0:	7ffb      	ldrb	r3, [r7, #31]
    d9a2:	2100      	movs	r1, #0
    d9a4:	4618      	mov	r0, r3
    d9a6:	4b20      	ldr	r3, [pc, #128]	; (da28 <_usb_d_dev_out_next+0x280>)
    d9a8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    d9aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    d9ac:	7ff8      	ldrb	r0, [r7, #31]
    d9ae:	2300      	movs	r3, #0
    d9b0:	2100      	movs	r1, #0
    d9b2:	4c1e      	ldr	r4, [pc, #120]	; (da2c <_usb_d_dev_out_next+0x284>)
    d9b4:	47a0      	blx	r4
			goto _out_rx_exec;
    d9b6:	e01f      	b.n	d9f8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    d9b8:	7bfb      	ldrb	r3, [r7, #15]
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d006      	beq.n	d9cc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    d9be:	7ffb      	ldrb	r3, [r7, #31]
    d9c0:	222d      	movs	r2, #45	; 0x2d
    d9c2:	4619      	mov	r1, r3
    d9c4:	6a38      	ldr	r0, [r7, #32]
    d9c6:	4b1a      	ldr	r3, [pc, #104]	; (da30 <_usb_d_dev_out_next+0x288>)
    d9c8:	4798      	blx	r3
    d9ca:	e005      	b.n	d9d8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    d9cc:	7ffb      	ldrb	r3, [r7, #31]
    d9ce:	2225      	movs	r2, #37	; 0x25
    d9d0:	4619      	mov	r1, r3
    d9d2:	6a38      	ldr	r0, [r7, #32]
    d9d4:	4b16      	ldr	r3, [pc, #88]	; (da30 <_usb_d_dev_out_next+0x288>)
    d9d6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    d9d8:	7ffb      	ldrb	r3, [r7, #31]
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d107      	bne.n	d9ee <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    d9de:	687b      	ldr	r3, [r7, #4]
    d9e0:	68db      	ldr	r3, [r3, #12]
    d9e2:	461a      	mov	r2, r3
    d9e4:	7ffb      	ldrb	r3, [r7, #31]
    d9e6:	2100      	movs	r1, #0
    d9e8:	4618      	mov	r0, r3
    d9ea:	4b0f      	ldr	r3, [pc, #60]	; (da28 <_usb_d_dev_out_next+0x280>)
    d9ec:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    d9ee:	2100      	movs	r1, #0
    d9f0:	6878      	ldr	r0, [r7, #4]
    d9f2:	4b10      	ldr	r3, [pc, #64]	; (da34 <_usb_d_dev_out_next+0x28c>)
    d9f4:	4798      	blx	r3
	return;
    d9f6:	e031      	b.n	da5c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    d9f8:	78fb      	ldrb	r3, [r7, #3]
    d9fa:	f083 0301 	eor.w	r3, r3, #1
    d9fe:	b2db      	uxtb	r3, r3
    da00:	2b00      	cmp	r3, #0
    da02:	d025      	beq.n	da50 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    da04:	7bfb      	ldrb	r3, [r7, #15]
    da06:	2b00      	cmp	r3, #0
    da08:	d018      	beq.n	da3c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    da0a:	7ffb      	ldrb	r3, [r7, #31]
    da0c:	2101      	movs	r1, #1
    da0e:	4618      	mov	r0, r3
    da10:	4b09      	ldr	r3, [pc, #36]	; (da38 <_usb_d_dev_out_next+0x290>)
    da12:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    da14:	232d      	movs	r3, #45	; 0x2d
    da16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    da1a:	e012      	b.n	da42 <_usb_d_dev_out_next+0x29a>
    da1c:	20001ef8 	.word	0x20001ef8
    da20:	0000cf89 	.word	0x0000cf89
    da24:	00011c19 	.word	0x00011c19
    da28:	0000cfb5 	.word	0x0000cfb5
    da2c:	0000d13d 	.word	0x0000d13d
    da30:	0000c895 	.word	0x0000c895
    da34:	0000e8b9 	.word	0x0000e8b9
    da38:	0000d17d 	.word	0x0000d17d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    da3c:	2325      	movs	r3, #37	; 0x25
    da3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    da42:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    da46:	7ffb      	ldrb	r3, [r7, #31]
    da48:	4619      	mov	r1, r3
    da4a:	6a38      	ldr	r0, [r7, #32]
    da4c:	4b05      	ldr	r3, [pc, #20]	; (da64 <_usb_d_dev_out_next+0x2bc>)
    da4e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    da50:	7ffb      	ldrb	r3, [r7, #31]
    da52:	2201      	movs	r2, #1
    da54:	2100      	movs	r1, #0
    da56:	4618      	mov	r0, r3
    da58:	4b03      	ldr	r3, [pc, #12]	; (da68 <_usb_d_dev_out_next+0x2c0>)
    da5a:	4798      	blx	r3
}
    da5c:	372c      	adds	r7, #44	; 0x2c
    da5e:	46bd      	mov	sp, r7
    da60:	bd90      	pop	{r4, r7, pc}
    da62:	bf00      	nop
    da64:	0000c869 	.word	0x0000c869
    da68:	0000d20d 	.word	0x0000d20d

0000da6c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    da6c:	b580      	push	{r7, lr}
    da6e:	b084      	sub	sp, #16
    da70:	af00      	add	r7, sp, #0
    da72:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    da74:	687b      	ldr	r3, [r7, #4]
    da76:	7c9b      	ldrb	r3, [r3, #18]
    da78:	f003 030f 	and.w	r3, r3, #15
    da7c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    da7e:	687b      	ldr	r3, [r7, #4]
    da80:	7cdb      	ldrb	r3, [r3, #19]
    da82:	f003 0307 	and.w	r3, r3, #7
    da86:	b2db      	uxtb	r3, r3
    da88:	2b01      	cmp	r3, #1
    da8a:	bf0c      	ite	eq
    da8c:	2301      	moveq	r3, #1
    da8e:	2300      	movne	r3, #0
    da90:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    da92:	7bbb      	ldrb	r3, [r7, #14]
    da94:	f083 0301 	eor.w	r3, r3, #1
    da98:	b2db      	uxtb	r3, r3
    da9a:	2b00      	cmp	r3, #0
    da9c:	d008      	beq.n	dab0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    da9e:	7bfb      	ldrb	r3, [r7, #15]
    daa0:	4618      	mov	r0, r3
    daa2:	4b20      	ldr	r3, [pc, #128]	; (db24 <_usb_d_dev_handle_setup+0xb8>)
    daa4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    daa6:	7bfb      	ldrb	r3, [r7, #15]
    daa8:	4618      	mov	r0, r3
    daaa:	4b1f      	ldr	r3, [pc, #124]	; (db28 <_usb_d_dev_handle_setup+0xbc>)
    daac:	4798      	blx	r3
		return;
    daae:	e036      	b.n	db1e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    dab0:	687b      	ldr	r3, [r7, #4]
    dab2:	7cdb      	ldrb	r3, [r3, #19]
    dab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dab8:	b2db      	uxtb	r3, r3
    daba:	2b00      	cmp	r3, #0
    dabc:	d010      	beq.n	dae0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    dabe:	687a      	ldr	r2, [r7, #4]
    dac0:	7cd3      	ldrb	r3, [r2, #19]
    dac2:	f36f 1386 	bfc	r3, #6, #1
    dac6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    dac8:	7bfb      	ldrb	r3, [r7, #15]
    daca:	2200      	movs	r2, #0
    dacc:	2101      	movs	r1, #1
    dace:	4618      	mov	r0, r3
    dad0:	4b16      	ldr	r3, [pc, #88]	; (db2c <_usb_d_dev_handle_setup+0xc0>)
    dad2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    dad4:	7bfb      	ldrb	r3, [r7, #15]
    dad6:	2200      	movs	r2, #0
    dad8:	2100      	movs	r1, #0
    dada:	4618      	mov	r0, r3
    dadc:	4b14      	ldr	r3, [pc, #80]	; (db30 <_usb_d_dev_handle_setup+0xc4>)
    dade:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    dae0:	687a      	ldr	r2, [r7, #4]
    dae2:	7cd3      	ldrb	r3, [r2, #19]
    dae4:	f36f 03c3 	bfc	r3, #3, #1
    dae8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    daea:	7bfb      	ldrb	r3, [r7, #15]
    daec:	2100      	movs	r1, #0
    daee:	4618      	mov	r0, r3
    daf0:	4b10      	ldr	r3, [pc, #64]	; (db34 <_usb_d_dev_handle_setup+0xc8>)
    daf2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    daf4:	7bfb      	ldrb	r3, [r7, #15]
    daf6:	2101      	movs	r1, #1
    daf8:	4618      	mov	r0, r3
    dafa:	4b0e      	ldr	r3, [pc, #56]	; (db34 <_usb_d_dev_handle_setup+0xc8>)
    dafc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    dafe:	7bfb      	ldrb	r3, [r7, #15]
    db00:	216f      	movs	r1, #111	; 0x6f
    db02:	4618      	mov	r0, r3
    db04:	4b0c      	ldr	r3, [pc, #48]	; (db38 <_usb_d_dev_handle_setup+0xcc>)
    db06:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    db08:	7bfb      	ldrb	r3, [r7, #15]
    db0a:	216f      	movs	r1, #111	; 0x6f
    db0c:	4618      	mov	r0, r3
    db0e:	4b0b      	ldr	r3, [pc, #44]	; (db3c <_usb_d_dev_handle_setup+0xd0>)
    db10:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    db12:	4b0b      	ldr	r3, [pc, #44]	; (db40 <_usb_d_dev_handle_setup+0xd4>)
    db14:	689b      	ldr	r3, [r3, #8]
    db16:	687a      	ldr	r2, [r7, #4]
    db18:	7c92      	ldrb	r2, [r2, #18]
    db1a:	4610      	mov	r0, r2
    db1c:	4798      	blx	r3
}
    db1e:	3710      	adds	r7, #16
    db20:	46bd      	mov	sp, r7
    db22:	bd80      	pop	{r7, pc}
    db24:	0000cf11 	.word	0x0000cf11
    db28:	0000cebd 	.word	0x0000cebd
    db2c:	0000d1b5 	.word	0x0000d1b5
    db30:	0000d20d 	.word	0x0000d20d
    db34:	0000d17d 	.word	0x0000d17d
    db38:	0000ccbd 	.word	0x0000ccbd
    db3c:	0000cd0d 	.word	0x0000cd0d
    db40:	20001e30 	.word	0x20001e30

0000db44 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    db44:	b580      	push	{r7, lr}
    db46:	b084      	sub	sp, #16
    db48:	af00      	add	r7, sp, #0
    db4a:	6078      	str	r0, [r7, #4]
    db4c:	460b      	mov	r3, r1
    db4e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    db50:	687b      	ldr	r3, [r7, #4]
    db52:	7c9b      	ldrb	r3, [r3, #18]
    db54:	f003 030f 	and.w	r3, r3, #15
    db58:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    db5a:	78f9      	ldrb	r1, [r7, #3]
    db5c:	7bfb      	ldrb	r3, [r7, #15]
    db5e:	2200      	movs	r2, #0
    db60:	4618      	mov	r0, r3
    db62:	4b07      	ldr	r3, [pc, #28]	; (db80 <_usb_d_dev_handle_stall+0x3c>)
    db64:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    db66:	4b07      	ldr	r3, [pc, #28]	; (db84 <_usb_d_dev_handle_stall+0x40>)
    db68:	691b      	ldr	r3, [r3, #16]
    db6a:	687a      	ldr	r2, [r7, #4]
    db6c:	7c90      	ldrb	r0, [r2, #18]
    db6e:	687a      	ldr	r2, [r7, #4]
    db70:	6892      	ldr	r2, [r2, #8]
    db72:	2101      	movs	r1, #1
    db74:	4798      	blx	r3
}
    db76:	bf00      	nop
    db78:	3710      	adds	r7, #16
    db7a:	46bd      	mov	sp, r7
    db7c:	bd80      	pop	{r7, pc}
    db7e:	bf00      	nop
    db80:	0000ce71 	.word	0x0000ce71
    db84:	20001e30 	.word	0x20001e30

0000db88 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    db88:	b580      	push	{r7, lr}
    db8a:	b088      	sub	sp, #32
    db8c:	af00      	add	r7, sp, #0
    db8e:	6078      	str	r0, [r7, #4]
    db90:	460b      	mov	r3, r1
    db92:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    db94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    db98:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	7c9b      	ldrb	r3, [r3, #18]
    db9e:	f003 030f 	and.w	r3, r3, #15
    dba2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    dba4:	4b61      	ldr	r3, [pc, #388]	; (dd2c <_usb_d_dev_handle_trfail+0x1a4>)
    dba6:	881b      	ldrh	r3, [r3, #0]
    dba8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    dbaa:	7efb      	ldrb	r3, [r7, #27]
    dbac:	015b      	lsls	r3, r3, #5
    dbae:	4a60      	ldr	r2, [pc, #384]	; (dd30 <_usb_d_dev_handle_trfail+0x1a8>)
    dbb0:	4413      	add	r3, r2
    dbb2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    dbb4:	78fb      	ldrb	r3, [r7, #3]
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d006      	beq.n	dbc8 <_usb_d_dev_handle_trfail+0x40>
    dbba:	7efb      	ldrb	r3, [r7, #27]
    dbbc:	4619      	mov	r1, r3
    dbbe:	69f8      	ldr	r0, [r7, #28]
    dbc0:	4b5c      	ldr	r3, [pc, #368]	; (dd34 <_usb_d_dev_handle_trfail+0x1ac>)
    dbc2:	4798      	blx	r3
    dbc4:	4603      	mov	r3, r0
    dbc6:	e005      	b.n	dbd4 <_usb_d_dev_handle_trfail+0x4c>
    dbc8:	7efb      	ldrb	r3, [r7, #27]
    dbca:	4619      	mov	r1, r3
    dbcc:	69f8      	ldr	r0, [r7, #28]
    dbce:	4b5a      	ldr	r3, [pc, #360]	; (dd38 <_usb_d_dev_handle_trfail+0x1b0>)
    dbd0:	4798      	blx	r3
    dbd2:	4603      	mov	r3, r0
    dbd4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    dbd6:	687b      	ldr	r3, [r7, #4]
    dbd8:	7cdb      	ldrb	r3, [r3, #19]
    dbda:	f003 0307 	and.w	r3, r3, #7
    dbde:	b2db      	uxtb	r3, r3
    dbe0:	2b01      	cmp	r3, #1
    dbe2:	bf0c      	ite	eq
    dbe4:	2301      	moveq	r3, #1
    dbe6:	2300      	movne	r3, #0
    dbe8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    dbea:	78fb      	ldrb	r3, [r7, #3]
    dbec:	011b      	lsls	r3, r3, #4
    dbee:	697a      	ldr	r2, [r7, #20]
    dbf0:	4413      	add	r3, r2
    dbf2:	7a9b      	ldrb	r3, [r3, #10]
    dbf4:	b2db      	uxtb	r3, r3
    dbf6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    dbf8:	7cfb      	ldrb	r3, [r7, #19]
    dbfa:	2b02      	cmp	r3, #2
    dbfc:	d12f      	bne.n	dc5e <_usb_d_dev_handle_trfail+0xd6>
    dbfe:	7b3b      	ldrb	r3, [r7, #12]
    dc00:	f003 0301 	and.w	r3, r3, #1
    dc04:	b2db      	uxtb	r3, r3
    dc06:	2b00      	cmp	r3, #0
    dc08:	d029      	beq.n	dc5e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    dc0a:	78fb      	ldrb	r3, [r7, #3]
    dc0c:	011b      	lsls	r3, r3, #4
    dc0e:	697a      	ldr	r2, [r7, #20]
    dc10:	441a      	add	r2, r3
    dc12:	7a93      	ldrb	r3, [r2, #10]
    dc14:	f36f 0300 	bfc	r3, #0, #1
    dc18:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    dc1a:	78fb      	ldrb	r3, [r7, #3]
    dc1c:	f107 0220 	add.w	r2, r7, #32
    dc20:	4413      	add	r3, r2
    dc22:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc26:	7efb      	ldrb	r3, [r7, #27]
    dc28:	4619      	mov	r1, r3
    dc2a:	69f8      	ldr	r0, [r7, #28]
    dc2c:	4b43      	ldr	r3, [pc, #268]	; (dd3c <_usb_d_dev_handle_trfail+0x1b4>)
    dc2e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    dc30:	78fb      	ldrb	r3, [r7, #3]
    dc32:	f107 0220 	add.w	r2, r7, #32
    dc36:	4413      	add	r3, r2
    dc38:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc3c:	7efb      	ldrb	r3, [r7, #27]
    dc3e:	4619      	mov	r1, r3
    dc40:	69f8      	ldr	r0, [r7, #28]
    dc42:	4b3f      	ldr	r3, [pc, #252]	; (dd40 <_usb_d_dev_handle_trfail+0x1b8>)
    dc44:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    dc46:	78fb      	ldrb	r3, [r7, #3]
    dc48:	2b00      	cmp	r3, #0
    dc4a:	bf14      	ite	ne
    dc4c:	2301      	movne	r3, #1
    dc4e:	2300      	moveq	r3, #0
    dc50:	b2db      	uxtb	r3, r3
    dc52:	2204      	movs	r2, #4
    dc54:	4619      	mov	r1, r3
    dc56:	6878      	ldr	r0, [r7, #4]
    dc58:	4b3a      	ldr	r3, [pc, #232]	; (dd44 <_usb_d_dev_handle_trfail+0x1bc>)
    dc5a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    dc5c:	e062      	b.n	dd24 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    dc5e:	7b3b      	ldrb	r3, [r7, #12]
    dc60:	f003 0302 	and.w	r3, r3, #2
    dc64:	b2db      	uxtb	r3, r3
    dc66:	2b00      	cmp	r3, #0
    dc68:	d040      	beq.n	dcec <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    dc6a:	78fb      	ldrb	r3, [r7, #3]
    dc6c:	011b      	lsls	r3, r3, #4
    dc6e:	697a      	ldr	r2, [r7, #20]
    dc70:	441a      	add	r2, r3
    dc72:	7a93      	ldrb	r3, [r2, #10]
    dc74:	f36f 0341 	bfc	r3, #1, #1
    dc78:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    dc7a:	78fb      	ldrb	r3, [r7, #3]
    dc7c:	f107 0220 	add.w	r2, r7, #32
    dc80:	4413      	add	r3, r2
    dc82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc86:	7efb      	ldrb	r3, [r7, #27]
    dc88:	4619      	mov	r1, r3
    dc8a:	69f8      	ldr	r0, [r7, #28]
    dc8c:	4b2b      	ldr	r3, [pc, #172]	; (dd3c <_usb_d_dev_handle_trfail+0x1b4>)
    dc8e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    dc90:	78fb      	ldrb	r3, [r7, #3]
    dc92:	f107 0220 	add.w	r2, r7, #32
    dc96:	4413      	add	r3, r2
    dc98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dc9c:	7efb      	ldrb	r3, [r7, #27]
    dc9e:	4619      	mov	r1, r3
    dca0:	69f8      	ldr	r0, [r7, #28]
    dca2:	4b27      	ldr	r3, [pc, #156]	; (dd40 <_usb_d_dev_handle_trfail+0x1b8>)
    dca4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    dca6:	7cbb      	ldrb	r3, [r7, #18]
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d03b      	beq.n	dd24 <_usb_d_dev_handle_trfail+0x19c>
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	7cdb      	ldrb	r3, [r3, #19]
    dcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dcb4:	b2db      	uxtb	r3, r3
    dcb6:	2b00      	cmp	r3, #0
    dcb8:	d034      	beq.n	dd24 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	7cdb      	ldrb	r3, [r3, #19]
    dcbe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    dcc2:	b2db      	uxtb	r3, r3
    dcc4:	461a      	mov	r2, r3
    dcc6:	78fb      	ldrb	r3, [r7, #3]
    dcc8:	4293      	cmp	r3, r2
    dcca:	d02b      	beq.n	dd24 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    dccc:	687b      	ldr	r3, [r7, #4]
    dcce:	7cdb      	ldrb	r3, [r3, #19]
    dcd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    dcd4:	b2db      	uxtb	r3, r3
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	bf14      	ite	ne
    dcda:	2301      	movne	r3, #1
    dcdc:	2300      	moveq	r3, #0
    dcde:	b2db      	uxtb	r3, r3
    dce0:	2200      	movs	r2, #0
    dce2:	4619      	mov	r1, r3
    dce4:	6878      	ldr	r0, [r7, #4]
    dce6:	4b17      	ldr	r3, [pc, #92]	; (dd44 <_usb_d_dev_handle_trfail+0x1bc>)
    dce8:	4798      	blx	r3
}
    dcea:	e01b      	b.n	dd24 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    dcec:	78fa      	ldrb	r2, [r7, #3]
    dcee:	7efb      	ldrb	r3, [r7, #27]
    dcf0:	4611      	mov	r1, r2
    dcf2:	4618      	mov	r0, r3
    dcf4:	4b14      	ldr	r3, [pc, #80]	; (dd48 <_usb_d_dev_handle_trfail+0x1c0>)
    dcf6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    dcf8:	78fb      	ldrb	r3, [r7, #3]
    dcfa:	f107 0220 	add.w	r2, r7, #32
    dcfe:	4413      	add	r3, r2
    dd00:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dd04:	7efb      	ldrb	r3, [r7, #27]
    dd06:	4619      	mov	r1, r3
    dd08:	69f8      	ldr	r0, [r7, #28]
    dd0a:	4b0c      	ldr	r3, [pc, #48]	; (dd3c <_usb_d_dev_handle_trfail+0x1b4>)
    dd0c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    dd0e:	78fb      	ldrb	r3, [r7, #3]
    dd10:	f107 0220 	add.w	r2, r7, #32
    dd14:	4413      	add	r3, r2
    dd16:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    dd1a:	7efb      	ldrb	r3, [r7, #27]
    dd1c:	4619      	mov	r1, r3
    dd1e:	69f8      	ldr	r0, [r7, #28]
    dd20:	4b07      	ldr	r3, [pc, #28]	; (dd40 <_usb_d_dev_handle_trfail+0x1b8>)
    dd22:	4798      	blx	r3
}
    dd24:	bf00      	nop
    dd26:	3720      	adds	r7, #32
    dd28:	46bd      	mov	sp, r7
    dd2a:	bd80      	pop	{r7, pc}
    dd2c:	00012d4c 	.word	0x00012d4c
    dd30:	20001ef8 	.word	0x20001ef8
    dd34:	0000c8f1 	.word	0x0000c8f1
    dd38:	0000c8c1 	.word	0x0000c8c1
    dd3c:	0000c795 	.word	0x0000c795
    dd40:	0000c895 	.word	0x0000c895
    dd44:	0000e901 	.word	0x0000e901
    dd48:	0000d17d 	.word	0x0000d17d

0000dd4c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    dd4c:	b580      	push	{r7, lr}
    dd4e:	b082      	sub	sp, #8
    dd50:	af00      	add	r7, sp, #0
    dd52:	6078      	str	r0, [r7, #4]
    dd54:	460b      	mov	r3, r1
    dd56:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    dd58:	78fb      	ldrb	r3, [r7, #3]
    dd5a:	f003 0310 	and.w	r3, r3, #16
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d003      	beq.n	dd6a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    dd62:	6878      	ldr	r0, [r7, #4]
    dd64:	4b0c      	ldr	r3, [pc, #48]	; (dd98 <_usb_d_dev_trans_setup_isr+0x4c>)
    dd66:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    dd68:	e012      	b.n	dd90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    dd6a:	78fb      	ldrb	r3, [r7, #3]
    dd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    dd70:	2b00      	cmp	r3, #0
    dd72:	d004      	beq.n	dd7e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    dd74:	2101      	movs	r1, #1
    dd76:	6878      	ldr	r0, [r7, #4]
    dd78:	4b08      	ldr	r3, [pc, #32]	; (dd9c <_usb_d_dev_trans_setup_isr+0x50>)
    dd7a:	4798      	blx	r3
}
    dd7c:	e008      	b.n	dd90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    dd7e:	78fb      	ldrb	r3, [r7, #3]
    dd80:	f003 0320 	and.w	r3, r3, #32
    dd84:	2b00      	cmp	r3, #0
    dd86:	d003      	beq.n	dd90 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    dd88:	2100      	movs	r1, #0
    dd8a:	6878      	ldr	r0, [r7, #4]
    dd8c:	4b03      	ldr	r3, [pc, #12]	; (dd9c <_usb_d_dev_trans_setup_isr+0x50>)
    dd8e:	4798      	blx	r3
}
    dd90:	bf00      	nop
    dd92:	3708      	adds	r7, #8
    dd94:	46bd      	mov	sp, r7
    dd96:	bd80      	pop	{r7, pc}
    dd98:	0000da6d 	.word	0x0000da6d
    dd9c:	0000db45 	.word	0x0000db45

0000dda0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    dda0:	b580      	push	{r7, lr}
    dda2:	b082      	sub	sp, #8
    dda4:	af00      	add	r7, sp, #0
    dda6:	6078      	str	r0, [r7, #4]
    dda8:	460b      	mov	r3, r1
    ddaa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ddac:	78fb      	ldrb	r3, [r7, #3]
    ddae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d004      	beq.n	ddc0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    ddb6:	2101      	movs	r1, #1
    ddb8:	6878      	ldr	r0, [r7, #4]
    ddba:	4b1a      	ldr	r3, [pc, #104]	; (de24 <_usb_d_dev_trans_in_isr+0x84>)
    ddbc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ddbe:	e02c      	b.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ddc0:	78fb      	ldrb	r3, [r7, #3]
    ddc2:	f003 0308 	and.w	r3, r3, #8
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d004      	beq.n	ddd4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    ddca:	2101      	movs	r1, #1
    ddcc:	6878      	ldr	r0, [r7, #4]
    ddce:	4b16      	ldr	r3, [pc, #88]	; (de28 <_usb_d_dev_trans_in_isr+0x88>)
    ddd0:	4798      	blx	r3
}
    ddd2:	e022      	b.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ddd4:	78fb      	ldrb	r3, [r7, #3]
    ddd6:	f003 0302 	and.w	r3, r3, #2
    ddda:	2b00      	cmp	r3, #0
    dddc:	d004      	beq.n	dde8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ddde:	2101      	movs	r1, #1
    dde0:	6878      	ldr	r0, [r7, #4]
    dde2:	4b12      	ldr	r3, [pc, #72]	; (de2c <_usb_d_dev_trans_in_isr+0x8c>)
    dde4:	4798      	blx	r3
}
    dde6:	e018      	b.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    dde8:	687b      	ldr	r3, [r7, #4]
    ddea:	7cdb      	ldrb	r3, [r3, #19]
    ddec:	f003 0307 	and.w	r3, r3, #7
    ddf0:	b2db      	uxtb	r3, r3
    ddf2:	2b01      	cmp	r3, #1
    ddf4:	d111      	bne.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ddf6:	78fb      	ldrb	r3, [r7, #3]
    ddf8:	f003 0304 	and.w	r3, r3, #4
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	d004      	beq.n	de0a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    de00:	2100      	movs	r1, #0
    de02:	6878      	ldr	r0, [r7, #4]
    de04:	4b08      	ldr	r3, [pc, #32]	; (de28 <_usb_d_dev_trans_in_isr+0x88>)
    de06:	4798      	blx	r3
}
    de08:	e007      	b.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    de0a:	78fb      	ldrb	r3, [r7, #3]
    de0c:	f003 0310 	and.w	r3, r3, #16
    de10:	2b00      	cmp	r3, #0
    de12:	d002      	beq.n	de1a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    de14:	6878      	ldr	r0, [r7, #4]
    de16:	4b06      	ldr	r3, [pc, #24]	; (de30 <_usb_d_dev_trans_in_isr+0x90>)
    de18:	4798      	blx	r3
}
    de1a:	bf00      	nop
    de1c:	3708      	adds	r7, #8
    de1e:	46bd      	mov	sp, r7
    de20:	bd80      	pop	{r7, pc}
    de22:	bf00      	nop
    de24:	0000db45 	.word	0x0000db45
    de28:	0000db89 	.word	0x0000db89
    de2c:	0000d591 	.word	0x0000d591
    de30:	0000da6d 	.word	0x0000da6d

0000de34 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    de34:	b580      	push	{r7, lr}
    de36:	b082      	sub	sp, #8
    de38:	af00      	add	r7, sp, #0
    de3a:	6078      	str	r0, [r7, #4]
    de3c:	460b      	mov	r3, r1
    de3e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    de40:	78fb      	ldrb	r3, [r7, #3]
    de42:	f003 0320 	and.w	r3, r3, #32
    de46:	2b00      	cmp	r3, #0
    de48:	d004      	beq.n	de54 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    de4a:	2100      	movs	r1, #0
    de4c:	6878      	ldr	r0, [r7, #4]
    de4e:	4b1a      	ldr	r3, [pc, #104]	; (deb8 <_usb_d_dev_trans_out_isr+0x84>)
    de50:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    de52:	e02c      	b.n	deae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    de54:	78fb      	ldrb	r3, [r7, #3]
    de56:	f003 0304 	and.w	r3, r3, #4
    de5a:	2b00      	cmp	r3, #0
    de5c:	d004      	beq.n	de68 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    de5e:	2100      	movs	r1, #0
    de60:	6878      	ldr	r0, [r7, #4]
    de62:	4b16      	ldr	r3, [pc, #88]	; (debc <_usb_d_dev_trans_out_isr+0x88>)
    de64:	4798      	blx	r3
}
    de66:	e022      	b.n	deae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    de68:	78fb      	ldrb	r3, [r7, #3]
    de6a:	f003 0301 	and.w	r3, r3, #1
    de6e:	2b00      	cmp	r3, #0
    de70:	d004      	beq.n	de7c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    de72:	2101      	movs	r1, #1
    de74:	6878      	ldr	r0, [r7, #4]
    de76:	4b12      	ldr	r3, [pc, #72]	; (dec0 <_usb_d_dev_trans_out_isr+0x8c>)
    de78:	4798      	blx	r3
}
    de7a:	e018      	b.n	deae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    de7c:	687b      	ldr	r3, [r7, #4]
    de7e:	7cdb      	ldrb	r3, [r3, #19]
    de80:	f003 0307 	and.w	r3, r3, #7
    de84:	b2db      	uxtb	r3, r3
    de86:	2b01      	cmp	r3, #1
    de88:	d111      	bne.n	deae <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    de8a:	78fb      	ldrb	r3, [r7, #3]
    de8c:	f003 0308 	and.w	r3, r3, #8
    de90:	2b00      	cmp	r3, #0
    de92:	d004      	beq.n	de9e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    de94:	2101      	movs	r1, #1
    de96:	6878      	ldr	r0, [r7, #4]
    de98:	4b08      	ldr	r3, [pc, #32]	; (debc <_usb_d_dev_trans_out_isr+0x88>)
    de9a:	4798      	blx	r3
}
    de9c:	e007      	b.n	deae <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    de9e:	78fb      	ldrb	r3, [r7, #3]
    dea0:	f003 0310 	and.w	r3, r3, #16
    dea4:	2b00      	cmp	r3, #0
    dea6:	d002      	beq.n	deae <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    dea8:	6878      	ldr	r0, [r7, #4]
    deaa:	4b06      	ldr	r3, [pc, #24]	; (dec4 <_usb_d_dev_trans_out_isr+0x90>)
    deac:	4798      	blx	r3
}
    deae:	bf00      	nop
    deb0:	3708      	adds	r7, #8
    deb2:	46bd      	mov	sp, r7
    deb4:	bd80      	pop	{r7, pc}
    deb6:	bf00      	nop
    deb8:	0000db45 	.word	0x0000db45
    debc:	0000db89 	.word	0x0000db89
    dec0:	0000d7a9 	.word	0x0000d7a9
    dec4:	0000da6d 	.word	0x0000da6d

0000dec8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    dec8:	b580      	push	{r7, lr}
    deca:	b084      	sub	sp, #16
    decc:	af00      	add	r7, sp, #0
    dece:	6078      	str	r0, [r7, #4]
    ded0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    ded2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ded6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ded8:	683b      	ldr	r3, [r7, #0]
    deda:	7c9b      	ldrb	r3, [r3, #18]
    dedc:	f003 030f 	and.w	r3, r3, #15
    dee0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    dee2:	7afb      	ldrb	r3, [r7, #11]
    dee4:	2201      	movs	r2, #1
    dee6:	409a      	lsls	r2, r3
    dee8:	687b      	ldr	r3, [r7, #4]
    deea:	4013      	ands	r3, r2
    deec:	2b00      	cmp	r3, #0
    deee:	d03d      	beq.n	df6c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    def0:	7afb      	ldrb	r3, [r7, #11]
    def2:	68fa      	ldr	r2, [r7, #12]
    def4:	3308      	adds	r3, #8
    def6:	015b      	lsls	r3, r3, #5
    def8:	4413      	add	r3, r2
    defa:	3307      	adds	r3, #7
    defc:	781b      	ldrb	r3, [r3, #0]
    defe:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    df00:	7afb      	ldrb	r3, [r7, #11]
    df02:	68fa      	ldr	r2, [r7, #12]
    df04:	015b      	lsls	r3, r3, #5
    df06:	4413      	add	r3, r2
    df08:	f203 1309 	addw	r3, r3, #265	; 0x109
    df0c:	781b      	ldrb	r3, [r3, #0]
    df0e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    df10:	7aba      	ldrb	r2, [r7, #10]
    df12:	7a7b      	ldrb	r3, [r7, #9]
    df14:	4013      	ands	r3, r2
    df16:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    df18:	7abb      	ldrb	r3, [r7, #10]
    df1a:	2b00      	cmp	r3, #0
    df1c:	d027      	beq.n	df6e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    df1e:	683b      	ldr	r3, [r7, #0]
    df20:	7cdb      	ldrb	r3, [r3, #19]
    df22:	f003 0307 	and.w	r3, r3, #7
    df26:	b2db      	uxtb	r3, r3
    df28:	2b01      	cmp	r3, #1
    df2a:	d10c      	bne.n	df46 <_usb_d_dev_handle_eps+0x7e>
    df2c:	683b      	ldr	r3, [r7, #0]
    df2e:	7cdb      	ldrb	r3, [r3, #19]
    df30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    df34:	b2db      	uxtb	r3, r3
    df36:	2b00      	cmp	r3, #0
    df38:	d105      	bne.n	df46 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    df3a:	7abb      	ldrb	r3, [r7, #10]
    df3c:	4619      	mov	r1, r3
    df3e:	6838      	ldr	r0, [r7, #0]
    df40:	4b0c      	ldr	r3, [pc, #48]	; (df74 <_usb_d_dev_handle_eps+0xac>)
    df42:	4798      	blx	r3
    df44:	e013      	b.n	df6e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    df46:	683b      	ldr	r3, [r7, #0]
    df48:	7cdb      	ldrb	r3, [r3, #19]
    df4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    df4e:	b2db      	uxtb	r3, r3
    df50:	2b00      	cmp	r3, #0
    df52:	d005      	beq.n	df60 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    df54:	7abb      	ldrb	r3, [r7, #10]
    df56:	4619      	mov	r1, r3
    df58:	6838      	ldr	r0, [r7, #0]
    df5a:	4b07      	ldr	r3, [pc, #28]	; (df78 <_usb_d_dev_handle_eps+0xb0>)
    df5c:	4798      	blx	r3
    df5e:	e006      	b.n	df6e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    df60:	7abb      	ldrb	r3, [r7, #10]
    df62:	4619      	mov	r1, r3
    df64:	6838      	ldr	r0, [r7, #0]
    df66:	4b05      	ldr	r3, [pc, #20]	; (df7c <_usb_d_dev_handle_eps+0xb4>)
    df68:	4798      	blx	r3
    df6a:	e000      	b.n	df6e <_usb_d_dev_handle_eps+0xa6>
		return;
    df6c:	bf00      	nop
		}
	}
}
    df6e:	3710      	adds	r7, #16
    df70:	46bd      	mov	sp, r7
    df72:	bd80      	pop	{r7, pc}
    df74:	0000dd4d 	.word	0x0000dd4d
    df78:	0000dda1 	.word	0x0000dda1
    df7c:	0000de35 	.word	0x0000de35

0000df80 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    df80:	b580      	push	{r7, lr}
    df82:	b084      	sub	sp, #16
    df84:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    df86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    df8a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    df8c:	68bb      	ldr	r3, [r7, #8]
    df8e:	8c1b      	ldrh	r3, [r3, #32]
    df90:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    df92:	88fb      	ldrh	r3, [r7, #6]
    df94:	2b00      	cmp	r3, #0
    df96:	d104      	bne.n	dfa2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    df98:	4b13      	ldr	r3, [pc, #76]	; (dfe8 <_usb_d_dev_handler+0x68>)
    df9a:	4798      	blx	r3
    df9c:	4603      	mov	r3, r0
    df9e:	2b00      	cmp	r3, #0
    dfa0:	d11e      	bne.n	dfe0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    dfa2:	2300      	movs	r3, #0
    dfa4:	73fb      	strb	r3, [r7, #15]
    dfa6:	e017      	b.n	dfd8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    dfa8:	7bfa      	ldrb	r2, [r7, #15]
    dfaa:	4613      	mov	r3, r2
    dfac:	009b      	lsls	r3, r3, #2
    dfae:	4413      	add	r3, r2
    dfb0:	009b      	lsls	r3, r3, #2
    dfb2:	3310      	adds	r3, #16
    dfb4:	4a0d      	ldr	r2, [pc, #52]	; (dfec <_usb_d_dev_handler+0x6c>)
    dfb6:	4413      	add	r3, r2
    dfb8:	3304      	adds	r3, #4
    dfba:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    dfbc:	683b      	ldr	r3, [r7, #0]
    dfbe:	7c9b      	ldrb	r3, [r3, #18]
    dfc0:	2bff      	cmp	r3, #255	; 0xff
    dfc2:	d005      	beq.n	dfd0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    dfc4:	88fb      	ldrh	r3, [r7, #6]
    dfc6:	6839      	ldr	r1, [r7, #0]
    dfc8:	4618      	mov	r0, r3
    dfca:	4b09      	ldr	r3, [pc, #36]	; (dff0 <_usb_d_dev_handler+0x70>)
    dfcc:	4798      	blx	r3
    dfce:	e000      	b.n	dfd2 <_usb_d_dev_handler+0x52>
			continue;
    dfd0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    dfd2:	7bfb      	ldrb	r3, [r7, #15]
    dfd4:	3301      	adds	r3, #1
    dfd6:	73fb      	strb	r3, [r7, #15]
    dfd8:	7bfb      	ldrb	r3, [r7, #15]
    dfda:	2b08      	cmp	r3, #8
    dfdc:	d9e4      	bls.n	dfa8 <_usb_d_dev_handler+0x28>
    dfde:	e000      	b.n	dfe2 <_usb_d_dev_handler+0x62>
			return;
    dfe0:	bf00      	nop
	}
}
    dfe2:	3710      	adds	r7, #16
    dfe4:	46bd      	mov	sp, r7
    dfe6:	bd80      	pop	{r7, pc}
    dfe8:	0000d4d9 	.word	0x0000d4d9
    dfec:	20001e30 	.word	0x20001e30
    dff0:	0000dec9 	.word	0x0000dec9

0000dff4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    dff4:	b580      	push	{r7, lr}
    dff6:	b082      	sub	sp, #8
    dff8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    dffa:	2300      	movs	r3, #0
    dffc:	71fb      	strb	r3, [r7, #7]
    dffe:	e023      	b.n	e048 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    e000:	79fa      	ldrb	r2, [r7, #7]
    e002:	4613      	mov	r3, r2
    e004:	009b      	lsls	r3, r3, #2
    e006:	4413      	add	r3, r2
    e008:	009b      	lsls	r3, r3, #2
    e00a:	3310      	adds	r3, #16
    e00c:	4a14      	ldr	r2, [pc, #80]	; (e060 <_usb_d_dev_reset_epts+0x6c>)
    e00e:	4413      	add	r3, r2
    e010:	3304      	adds	r3, #4
    e012:	2103      	movs	r1, #3
    e014:	4618      	mov	r0, r3
    e016:	4b13      	ldr	r3, [pc, #76]	; (e064 <_usb_d_dev_reset_epts+0x70>)
    e018:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    e01a:	79fa      	ldrb	r2, [r7, #7]
    e01c:	4910      	ldr	r1, [pc, #64]	; (e060 <_usb_d_dev_reset_epts+0x6c>)
    e01e:	4613      	mov	r3, r2
    e020:	009b      	lsls	r3, r3, #2
    e022:	4413      	add	r3, r2
    e024:	009b      	lsls	r3, r3, #2
    e026:	440b      	add	r3, r1
    e028:	3326      	adds	r3, #38	; 0x26
    e02a:	22ff      	movs	r2, #255	; 0xff
    e02c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    e02e:	79fa      	ldrb	r2, [r7, #7]
    e030:	490b      	ldr	r1, [pc, #44]	; (e060 <_usb_d_dev_reset_epts+0x6c>)
    e032:	4613      	mov	r3, r2
    e034:	009b      	lsls	r3, r3, #2
    e036:	4413      	add	r3, r2
    e038:	009b      	lsls	r3, r3, #2
    e03a:	440b      	add	r3, r1
    e03c:	3327      	adds	r3, #39	; 0x27
    e03e:	2200      	movs	r2, #0
    e040:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    e042:	79fb      	ldrb	r3, [r7, #7]
    e044:	3301      	adds	r3, #1
    e046:	71fb      	strb	r3, [r7, #7]
    e048:	79fb      	ldrb	r3, [r7, #7]
    e04a:	2b08      	cmp	r3, #8
    e04c:	d9d8      	bls.n	e000 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    e04e:	22a0      	movs	r2, #160	; 0xa0
    e050:	2100      	movs	r1, #0
    e052:	4805      	ldr	r0, [pc, #20]	; (e068 <_usb_d_dev_reset_epts+0x74>)
    e054:	4b05      	ldr	r3, [pc, #20]	; (e06c <_usb_d_dev_reset_epts+0x78>)
    e056:	4798      	blx	r3
}
    e058:	bf00      	nop
    e05a:	3708      	adds	r7, #8
    e05c:	46bd      	mov	sp, r7
    e05e:	bd80      	pop	{r7, pc}
    e060:	20001e30 	.word	0x20001e30
    e064:	0000e8b9 	.word	0x0000e8b9
    e068:	20001ef8 	.word	0x20001ef8
    e06c:	00011d4d 	.word	0x00011d4d

0000e070 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    e070:	b580      	push	{r7, lr}
    e072:	b084      	sub	sp, #16
    e074:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    e076:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e07a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    e07c:	2301      	movs	r3, #1
    e07e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    e080:	2304      	movs	r3, #4
    e082:	713b      	strb	r3, [r7, #4]
    e084:	2300      	movs	r3, #0
    e086:	717b      	strb	r3, [r7, #5]
    e088:	2300      	movs	r3, #0
    e08a:	71bb      	strb	r3, [r7, #6]
    e08c:	2300      	movs	r3, #0
    e08e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    e090:	2101      	movs	r1, #1
    e092:	68f8      	ldr	r0, [r7, #12]
    e094:	4b26      	ldr	r3, [pc, #152]	; (e130 <_usb_d_dev_init+0xc0>)
    e096:	4798      	blx	r3
    e098:	4603      	mov	r3, r0
    e09a:	f083 0301 	eor.w	r3, r3, #1
    e09e:	b2db      	uxtb	r3, r3
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	d011      	beq.n	e0c8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    e0a4:	2102      	movs	r1, #2
    e0a6:	68f8      	ldr	r0, [r7, #12]
    e0a8:	4b22      	ldr	r3, [pc, #136]	; (e134 <_usb_d_dev_init+0xc4>)
    e0aa:	4798      	blx	r3
    e0ac:	4603      	mov	r3, r0
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d006      	beq.n	e0c0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    e0b2:	68f8      	ldr	r0, [r7, #12]
    e0b4:	4b20      	ldr	r3, [pc, #128]	; (e138 <_usb_d_dev_init+0xc8>)
    e0b6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    e0b8:	2102      	movs	r1, #2
    e0ba:	68f8      	ldr	r0, [r7, #12]
    e0bc:	4b1f      	ldr	r3, [pc, #124]	; (e13c <_usb_d_dev_init+0xcc>)
    e0be:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    e0c0:	2101      	movs	r1, #1
    e0c2:	68f8      	ldr	r0, [r7, #12]
    e0c4:	4b1e      	ldr	r3, [pc, #120]	; (e140 <_usb_d_dev_init+0xd0>)
    e0c6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    e0c8:	2101      	movs	r1, #1
    e0ca:	68f8      	ldr	r0, [r7, #12]
    e0cc:	4b1b      	ldr	r3, [pc, #108]	; (e13c <_usb_d_dev_init+0xcc>)
    e0ce:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    e0d0:	4b1c      	ldr	r3, [pc, #112]	; (e144 <_usb_d_dev_init+0xd4>)
    e0d2:	4a1d      	ldr	r2, [pc, #116]	; (e148 <_usb_d_dev_init+0xd8>)
    e0d4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    e0d6:	4b1b      	ldr	r3, [pc, #108]	; (e144 <_usb_d_dev_init+0xd4>)
    e0d8:	4a1b      	ldr	r2, [pc, #108]	; (e148 <_usb_d_dev_init+0xd8>)
    e0da:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    e0dc:	4b19      	ldr	r3, [pc, #100]	; (e144 <_usb_d_dev_init+0xd4>)
    e0de:	4a1a      	ldr	r2, [pc, #104]	; (e148 <_usb_d_dev_init+0xd8>)
    e0e0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    e0e2:	4b18      	ldr	r3, [pc, #96]	; (e144 <_usb_d_dev_init+0xd4>)
    e0e4:	4a18      	ldr	r2, [pc, #96]	; (e148 <_usb_d_dev_init+0xd8>)
    e0e6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    e0e8:	4b16      	ldr	r3, [pc, #88]	; (e144 <_usb_d_dev_init+0xd4>)
    e0ea:	4a17      	ldr	r2, [pc, #92]	; (e148 <_usb_d_dev_init+0xd8>)
    e0ec:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    e0ee:	4b17      	ldr	r3, [pc, #92]	; (e14c <_usb_d_dev_init+0xdc>)
    e0f0:	4798      	blx	r3

	_usb_load_calib();
    e0f2:	4b17      	ldr	r3, [pc, #92]	; (e150 <_usb_d_dev_init+0xe0>)
    e0f4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    e0f6:	2104      	movs	r1, #4
    e0f8:	68f8      	ldr	r0, [r7, #12]
    e0fa:	4b11      	ldr	r3, [pc, #68]	; (e140 <_usb_d_dev_init+0xd0>)
    e0fc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    e0fe:	4b15      	ldr	r3, [pc, #84]	; (e154 <_usb_d_dev_init+0xe4>)
    e100:	4619      	mov	r1, r3
    e102:	68f8      	ldr	r0, [r7, #12]
    e104:	4b14      	ldr	r3, [pc, #80]	; (e158 <_usb_d_dev_init+0xe8>)
    e106:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    e108:	7afb      	ldrb	r3, [r7, #11]
    e10a:	f107 0210 	add.w	r2, r7, #16
    e10e:	4413      	add	r3, r2
    e110:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    e114:	f043 0301 	orr.w	r3, r3, #1
    e118:	b2db      	uxtb	r3, r3
    e11a:	b29b      	uxth	r3, r3
    e11c:	4619      	mov	r1, r3
    e11e:	68f8      	ldr	r0, [r7, #12]
    e120:	4b0e      	ldr	r3, [pc, #56]	; (e15c <_usb_d_dev_init+0xec>)
    e122:	4798      	blx	r3

	return ERR_NONE;
    e124:	2300      	movs	r3, #0
}
    e126:	4618      	mov	r0, r3
    e128:	3710      	adds	r7, #16
    e12a:	46bd      	mov	sp, r7
    e12c:	bd80      	pop	{r7, pc}
    e12e:	bf00      	nop
    e130:	0000c709 	.word	0x0000c709
    e134:	0000ca59 	.word	0x0000ca59
    e138:	0000ca2d 	.word	0x0000ca2d
    e13c:	0000c6df 	.word	0x0000c6df
    e140:	0000ca89 	.word	0x0000ca89
    e144:	20001e30 	.word	0x20001e30
    e148:	0000cb51 	.word	0x0000cb51
    e14c:	0000dff5 	.word	0x0000dff5
    e150:	0000cb69 	.word	0x0000cb69
    e154:	20001ef8 	.word	0x20001ef8
    e158:	0000cb35 	.word	0x0000cb35
    e15c:	0000caf9 	.word	0x0000caf9

0000e160 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    e160:	b580      	push	{r7, lr}
    e162:	b082      	sub	sp, #8
    e164:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    e166:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e16a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    e16c:	2103      	movs	r1, #3
    e16e:	6878      	ldr	r0, [r7, #4]
    e170:	4b17      	ldr	r3, [pc, #92]	; (e1d0 <_usb_d_dev_enable+0x70>)
    e172:	4798      	blx	r3
    e174:	4603      	mov	r3, r0
    e176:	2b00      	cmp	r3, #0
    e178:	d002      	beq.n	e180 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    e17a:	f06f 0310 	mvn.w	r3, #16
    e17e:	e023      	b.n	e1c8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    e180:	6878      	ldr	r0, [r7, #4]
    e182:	4b14      	ldr	r3, [pc, #80]	; (e1d4 <_usb_d_dev_enable+0x74>)
    e184:	4798      	blx	r3
    e186:	4603      	mov	r3, r0
    e188:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    e18a:	78fb      	ldrb	r3, [r7, #3]
    e18c:	f003 0302 	and.w	r3, r3, #2
    e190:	2b00      	cmp	r3, #0
    e192:	d107      	bne.n	e1a4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    e194:	78fb      	ldrb	r3, [r7, #3]
    e196:	f043 0302 	orr.w	r3, r3, #2
    e19a:	b2db      	uxtb	r3, r3
    e19c:	4619      	mov	r1, r3
    e19e:	6878      	ldr	r0, [r7, #4]
    e1a0:	4b0d      	ldr	r3, [pc, #52]	; (e1d8 <_usb_d_dev_enable+0x78>)
    e1a2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    e1a4:	2050      	movs	r0, #80	; 0x50
    e1a6:	4b0d      	ldr	r3, [pc, #52]	; (e1dc <_usb_d_dev_enable+0x7c>)
    e1a8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    e1aa:	2051      	movs	r0, #81	; 0x51
    e1ac:	4b0b      	ldr	r3, [pc, #44]	; (e1dc <_usb_d_dev_enable+0x7c>)
    e1ae:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    e1b0:	2052      	movs	r0, #82	; 0x52
    e1b2:	4b0a      	ldr	r3, [pc, #40]	; (e1dc <_usb_d_dev_enable+0x7c>)
    e1b4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    e1b6:	2053      	movs	r0, #83	; 0x53
    e1b8:	4b08      	ldr	r3, [pc, #32]	; (e1dc <_usb_d_dev_enable+0x7c>)
    e1ba:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    e1bc:	f240 218d 	movw	r1, #653	; 0x28d
    e1c0:	6878      	ldr	r0, [r7, #4]
    e1c2:	4b07      	ldr	r3, [pc, #28]	; (e1e0 <_usb_d_dev_enable+0x80>)
    e1c4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    e1c6:	2300      	movs	r3, #0
}
    e1c8:	4618      	mov	r0, r3
    e1ca:	3708      	adds	r7, #8
    e1cc:	46bd      	mov	sp, r7
    e1ce:	bd80      	pop	{r7, pc}
    e1d0:	0000ca03 	.word	0x0000ca03
    e1d4:	0000cab1 	.word	0x0000cab1
    e1d8:	0000ca89 	.word	0x0000ca89
    e1dc:	0000c615 	.word	0x0000c615
    e1e0:	0000c9ad 	.word	0x0000c9ad

0000e1e4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    e1e4:	b580      	push	{r7, lr}
    e1e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    e1e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e1ec:	4b01      	ldr	r3, [pc, #4]	; (e1f4 <_usb_d_dev_attach+0x10>)
    e1ee:	4798      	blx	r3
}
    e1f0:	bf00      	nop
    e1f2:	bd80      	pop	{r7, pc}
    e1f4:	0000cad5 	.word	0x0000cad5

0000e1f8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    e1f8:	b580      	push	{r7, lr}
    e1fa:	b082      	sub	sp, #8
    e1fc:	af00      	add	r7, sp, #0
    e1fe:	4603      	mov	r3, r0
    e200:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    e202:	79fb      	ldrb	r3, [r7, #7]
    e204:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e208:	b2db      	uxtb	r3, r3
    e20a:	4619      	mov	r1, r3
    e20c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e210:	4b02      	ldr	r3, [pc, #8]	; (e21c <_usb_d_dev_set_address+0x24>)
    e212:	4798      	blx	r3
}
    e214:	bf00      	nop
    e216:	3708      	adds	r7, #8
    e218:	46bd      	mov	sp, r7
    e21a:	bd80      	pop	{r7, pc}
    e21c:	0000cb17 	.word	0x0000cb17

0000e220 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    e220:	b590      	push	{r4, r7, lr}
    e222:	b085      	sub	sp, #20
    e224:	af00      	add	r7, sp, #0
    e226:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    e228:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e22c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e22e:	687b      	ldr	r3, [r7, #4]
    e230:	7c9b      	ldrb	r3, [r3, #18]
    e232:	f003 030f 	and.w	r3, r3, #15
    e236:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e238:	687b      	ldr	r3, [r7, #4]
    e23a:	68db      	ldr	r3, [r3, #12]
    e23c:	461a      	mov	r2, r3
    e23e:	7afb      	ldrb	r3, [r7, #11]
    e240:	2100      	movs	r1, #0
    e242:	4618      	mov	r0, r3
    e244:	4b0f      	ldr	r3, [pc, #60]	; (e284 <_usb_d_dev_trans_setup+0x64>)
    e246:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    e248:	687b      	ldr	r3, [r7, #4]
    e24a:	8a1b      	ldrh	r3, [r3, #16]
    e24c:	461a      	mov	r2, r3
    e24e:	7af8      	ldrb	r0, [r7, #11]
    e250:	2300      	movs	r3, #0
    e252:	2100      	movs	r1, #0
    e254:	4c0c      	ldr	r4, [pc, #48]	; (e288 <_usb_d_dev_trans_setup+0x68>)
    e256:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    e258:	7afb      	ldrb	r3, [r7, #11]
    e25a:	22b0      	movs	r2, #176	; 0xb0
    e25c:	4619      	mov	r1, r3
    e25e:	68f8      	ldr	r0, [r7, #12]
    e260:	4b0a      	ldr	r3, [pc, #40]	; (e28c <_usb_d_dev_trans_setup+0x6c>)
    e262:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    e264:	7afb      	ldrb	r3, [r7, #11]
    e266:	2200      	movs	r2, #0
    e268:	2100      	movs	r1, #0
    e26a:	4618      	mov	r0, r3
    e26c:	4b08      	ldr	r3, [pc, #32]	; (e290 <_usb_d_dev_trans_setup+0x70>)
    e26e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    e270:	7afb      	ldrb	r3, [r7, #11]
    e272:	2210      	movs	r2, #16
    e274:	4619      	mov	r1, r3
    e276:	68f8      	ldr	r0, [r7, #12]
    e278:	4b06      	ldr	r3, [pc, #24]	; (e294 <_usb_d_dev_trans_setup+0x74>)
    e27a:	4798      	blx	r3
}
    e27c:	bf00      	nop
    e27e:	3714      	adds	r7, #20
    e280:	46bd      	mov	sp, r7
    e282:	bd90      	pop	{r4, r7, pc}
    e284:	0000cfb5 	.word	0x0000cfb5
    e288:	0000d13d 	.word	0x0000d13d
    e28c:	0000c815 	.word	0x0000c815
    e290:	0000d20d 	.word	0x0000d20d
    e294:	0000c869 	.word	0x0000c869

0000e298 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    e298:	b580      	push	{r7, lr}
    e29a:	b088      	sub	sp, #32
    e29c:	af00      	add	r7, sp, #0
    e29e:	4603      	mov	r3, r0
    e2a0:	71fb      	strb	r3, [r7, #7]
    e2a2:	460b      	mov	r3, r1
    e2a4:	71bb      	strb	r3, [r7, #6]
    e2a6:	4613      	mov	r3, r2
    e2a8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    e2aa:	79fb      	ldrb	r3, [r7, #7]
    e2ac:	f003 030f 	and.w	r3, r3, #15
    e2b0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    e2b2:	79fb      	ldrb	r3, [r7, #7]
    e2b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e2b8:	2b00      	cmp	r3, #0
    e2ba:	bf14      	ite	ne
    e2bc:	2301      	movne	r3, #1
    e2be:	2300      	moveq	r3, #0
    e2c0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e2c2:	7fba      	ldrb	r2, [r7, #30]
    e2c4:	7ffb      	ldrb	r3, [r7, #31]
    e2c6:	4611      	mov	r1, r2
    e2c8:	4618      	mov	r0, r3
    e2ca:	4b3e      	ldr	r3, [pc, #248]	; (e3c4 <_usb_d_dev_ep_init+0x12c>)
    e2cc:	4798      	blx	r3
    e2ce:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    e2d0:	79bb      	ldrb	r3, [r7, #6]
    e2d2:	f003 0303 	and.w	r3, r3, #3
    e2d6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    e2d8:	7ffa      	ldrb	r2, [r7, #31]
    e2da:	4613      	mov	r3, r2
    e2dc:	005b      	lsls	r3, r3, #1
    e2de:	4413      	add	r3, r2
    e2e0:	009b      	lsls	r3, r3, #2
    e2e2:	4a39      	ldr	r2, [pc, #228]	; (e3c8 <_usb_d_dev_ep_init+0x130>)
    e2e4:	4413      	add	r3, r2
    e2e6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    e2e8:	7ffb      	ldrb	r3, [r7, #31]
    e2ea:	2b04      	cmp	r3, #4
    e2ec:	d902      	bls.n	e2f4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    e2ee:	f06f 0311 	mvn.w	r3, #17
    e2f2:	e063      	b.n	e3bc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    e2f4:	69bb      	ldr	r3, [r7, #24]
    e2f6:	7c9b      	ldrb	r3, [r3, #18]
    e2f8:	2bff      	cmp	r3, #255	; 0xff
    e2fa:	d002      	beq.n	e302 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    e2fc:	f06f 0313 	mvn.w	r3, #19
    e300:	e05c      	b.n	e3bc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    e302:	7dfb      	ldrb	r3, [r7, #23]
    e304:	2b00      	cmp	r3, #0
    e306:	d11f      	bne.n	e348 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    e308:	7fbb      	ldrb	r3, [r7, #30]
    e30a:	2b00      	cmp	r3, #0
    e30c:	bf14      	ite	ne
    e30e:	2301      	movne	r3, #1
    e310:	2300      	moveq	r3, #0
    e312:	b2db      	uxtb	r3, r3
    e314:	f083 0301 	eor.w	r3, r3, #1
    e318:	b2db      	uxtb	r3, r3
    e31a:	f003 0301 	and.w	r3, r3, #1
    e31e:	b2da      	uxtb	r2, r3
    e320:	7ffb      	ldrb	r3, [r7, #31]
    e322:	4611      	mov	r1, r2
    e324:	4618      	mov	r0, r3
    e326:	4b27      	ldr	r3, [pc, #156]	; (e3c4 <_usb_d_dev_ep_init+0x12c>)
    e328:	4798      	blx	r3
    e32a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	7c9b      	ldrb	r3, [r3, #18]
    e330:	2bff      	cmp	r3, #255	; 0xff
    e332:	d002      	beq.n	e33a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    e334:	f06f 0313 	mvn.w	r3, #19
    e338:	e040      	b.n	e3bc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    e33a:	693b      	ldr	r3, [r7, #16]
    e33c:	681b      	ldr	r3, [r3, #0]
    e33e:	2b00      	cmp	r3, #0
    e340:	d102      	bne.n	e348 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    e342:	f06f 0312 	mvn.w	r3, #18
    e346:	e039      	b.n	e3bc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    e348:	7fbb      	ldrb	r3, [r7, #30]
    e34a:	2b00      	cmp	r3, #0
    e34c:	d007      	beq.n	e35e <_usb_d_dev_ep_init+0xc6>
    e34e:	693b      	ldr	r3, [r7, #16]
    e350:	685b      	ldr	r3, [r3, #4]
    e352:	2b00      	cmp	r3, #0
    e354:	bf14      	ite	ne
    e356:	2301      	movne	r3, #1
    e358:	2300      	moveq	r3, #0
    e35a:	b2db      	uxtb	r3, r3
    e35c:	e006      	b.n	e36c <_usb_d_dev_ep_init+0xd4>
    e35e:	693b      	ldr	r3, [r7, #16]
    e360:	681b      	ldr	r3, [r3, #0]
    e362:	2b00      	cmp	r3, #0
    e364:	bf14      	ite	ne
    e366:	2301      	movne	r3, #1
    e368:	2300      	moveq	r3, #0
    e36a:	b2db      	uxtb	r3, r3
    e36c:	2b00      	cmp	r3, #0
    e36e:	d00f      	beq.n	e390 <_usb_d_dev_ep_init+0xf8>
    e370:	7fbb      	ldrb	r3, [r7, #30]
    e372:	2b00      	cmp	r3, #0
    e374:	d003      	beq.n	e37e <_usb_d_dev_ep_init+0xe6>
    e376:	693b      	ldr	r3, [r7, #16]
    e378:	895b      	ldrh	r3, [r3, #10]
    e37a:	461a      	mov	r2, r3
    e37c:	e002      	b.n	e384 <_usb_d_dev_ep_init+0xec>
    e37e:	693b      	ldr	r3, [r7, #16]
    e380:	891b      	ldrh	r3, [r3, #8]
    e382:	461a      	mov	r2, r3
    e384:	88bb      	ldrh	r3, [r7, #4]
    e386:	429a      	cmp	r2, r3
    e388:	da02      	bge.n	e390 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    e38a:	f06f 0312 	mvn.w	r3, #18
    e38e:	e015      	b.n	e3bc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    e390:	7fbb      	ldrb	r3, [r7, #30]
    e392:	2b00      	cmp	r3, #0
    e394:	d002      	beq.n	e39c <_usb_d_dev_ep_init+0x104>
    e396:	693b      	ldr	r3, [r7, #16]
    e398:	685b      	ldr	r3, [r3, #4]
    e39a:	e001      	b.n	e3a0 <_usb_d_dev_ep_init+0x108>
    e39c:	693b      	ldr	r3, [r7, #16]
    e39e:	681b      	ldr	r3, [r3, #0]
    e3a0:	69ba      	ldr	r2, [r7, #24]
    e3a2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    e3a4:	69bb      	ldr	r3, [r7, #24]
    e3a6:	88ba      	ldrh	r2, [r7, #4]
    e3a8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    e3aa:	7dfb      	ldrb	r3, [r7, #23]
    e3ac:	3301      	adds	r3, #1
    e3ae:	b2da      	uxtb	r2, r3
    e3b0:	69bb      	ldr	r3, [r7, #24]
    e3b2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    e3b4:	69bb      	ldr	r3, [r7, #24]
    e3b6:	79fa      	ldrb	r2, [r7, #7]
    e3b8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    e3ba:	2300      	movs	r3, #0
}
    e3bc:	4618      	mov	r0, r3
    e3be:	3720      	adds	r7, #32
    e3c0:	46bd      	mov	sp, r7
    e3c2:	bd80      	pop	{r7, pc}
    e3c4:	0000d2c9 	.word	0x0000d2c9
    e3c8:	00012d10 	.word	0x00012d10

0000e3cc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    e3cc:	b580      	push	{r7, lr}
    e3ce:	b086      	sub	sp, #24
    e3d0:	af00      	add	r7, sp, #0
    e3d2:	4603      	mov	r3, r0
    e3d4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    e3d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e3da:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    e3dc:	79fb      	ldrb	r3, [r7, #7]
    e3de:	f003 030f 	and.w	r3, r3, #15
    e3e2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    e3e4:	79fb      	ldrb	r3, [r7, #7]
    e3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	bf14      	ite	ne
    e3ee:	2301      	movne	r3, #1
    e3f0:	2300      	moveq	r3, #0
    e3f2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e3f4:	7cba      	ldrb	r2, [r7, #18]
    e3f6:	7cfb      	ldrb	r3, [r7, #19]
    e3f8:	4611      	mov	r1, r2
    e3fa:	4618      	mov	r0, r3
    e3fc:	4b2a      	ldr	r3, [pc, #168]	; (e4a8 <_usb_d_dev_ep_deinit+0xdc>)
    e3fe:	4798      	blx	r3
    e400:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    e402:	7cfb      	ldrb	r3, [r7, #19]
    e404:	2b04      	cmp	r3, #4
    e406:	d84a      	bhi.n	e49e <_usb_d_dev_ep_deinit+0xd2>
    e408:	68fb      	ldr	r3, [r7, #12]
    e40a:	7c9b      	ldrb	r3, [r3, #18]
    e40c:	2bff      	cmp	r3, #255	; 0xff
    e40e:	d046      	beq.n	e49e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    e410:	7cbb      	ldrb	r3, [r7, #18]
    e412:	2203      	movs	r2, #3
    e414:	4619      	mov	r1, r3
    e416:	68f8      	ldr	r0, [r7, #12]
    e418:	4b24      	ldr	r3, [pc, #144]	; (e4ac <_usb_d_dev_ep_deinit+0xe0>)
    e41a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    e41c:	68fb      	ldr	r3, [r7, #12]
    e41e:	7cdb      	ldrb	r3, [r3, #19]
    e420:	f003 0307 	and.w	r3, r3, #7
    e424:	b2db      	uxtb	r3, r3
    e426:	2b01      	cmp	r3, #1
    e428:	d107      	bne.n	e43a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    e42a:	79fb      	ldrb	r3, [r7, #7]
    e42c:	697a      	ldr	r2, [r7, #20]
    e42e:	3308      	adds	r3, #8
    e430:	015b      	lsls	r3, r3, #5
    e432:	4413      	add	r3, r2
    e434:	2200      	movs	r2, #0
    e436:	701a      	strb	r2, [r3, #0]
    e438:	e02a      	b.n	e490 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    e43a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    e43e:	2b00      	cmp	r3, #0
    e440:	da15      	bge.n	e46e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    e442:	79fb      	ldrb	r3, [r7, #7]
    e444:	f003 030f 	and.w	r3, r3, #15
    e448:	79fa      	ldrb	r2, [r7, #7]
    e44a:	f002 020f 	and.w	r2, r2, #15
    e44e:	6979      	ldr	r1, [r7, #20]
    e450:	3208      	adds	r2, #8
    e452:	0152      	lsls	r2, r2, #5
    e454:	440a      	add	r2, r1
    e456:	7812      	ldrb	r2, [r2, #0]
    e458:	b2d2      	uxtb	r2, r2
    e45a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    e45e:	b2d1      	uxtb	r1, r2
    e460:	697a      	ldr	r2, [r7, #20]
    e462:	3308      	adds	r3, #8
    e464:	015b      	lsls	r3, r3, #5
    e466:	4413      	add	r3, r2
    e468:	460a      	mov	r2, r1
    e46a:	701a      	strb	r2, [r3, #0]
    e46c:	e010      	b.n	e490 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    e46e:	79fb      	ldrb	r3, [r7, #7]
    e470:	79fa      	ldrb	r2, [r7, #7]
    e472:	6979      	ldr	r1, [r7, #20]
    e474:	3208      	adds	r2, #8
    e476:	0152      	lsls	r2, r2, #5
    e478:	440a      	add	r2, r1
    e47a:	7812      	ldrb	r2, [r2, #0]
    e47c:	b2d2      	uxtb	r2, r2
    e47e:	f022 0207 	bic.w	r2, r2, #7
    e482:	b2d1      	uxtb	r1, r2
    e484:	697a      	ldr	r2, [r7, #20]
    e486:	3308      	adds	r3, #8
    e488:	015b      	lsls	r3, r3, #5
    e48a:	4413      	add	r3, r2
    e48c:	460a      	mov	r2, r1
    e48e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    e490:	68fb      	ldr	r3, [r7, #12]
    e492:	2200      	movs	r2, #0
    e494:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    e496:	68fb      	ldr	r3, [r7, #12]
    e498:	22ff      	movs	r2, #255	; 0xff
    e49a:	749a      	strb	r2, [r3, #18]
    e49c:	e000      	b.n	e4a0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    e49e:	bf00      	nop
}
    e4a0:	3718      	adds	r7, #24
    e4a2:	46bd      	mov	sp, r7
    e4a4:	bd80      	pop	{r7, pc}
    e4a6:	bf00      	nop
    e4a8:	0000d2c9 	.word	0x0000d2c9
    e4ac:	0000e901 	.word	0x0000e901

0000e4b0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    e4b0:	b5b0      	push	{r4, r5, r7, lr}
    e4b2:	b088      	sub	sp, #32
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	4603      	mov	r3, r0
    e4b8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    e4ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e4be:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    e4c0:	79fb      	ldrb	r3, [r7, #7]
    e4c2:	f003 030f 	and.w	r3, r3, #15
    e4c6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    e4c8:	79fb      	ldrb	r3, [r7, #7]
    e4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	bf14      	ite	ne
    e4d2:	2301      	movne	r3, #1
    e4d4:	2300      	moveq	r3, #0
    e4d6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    e4d8:	7eba      	ldrb	r2, [r7, #26]
    e4da:	7efb      	ldrb	r3, [r7, #27]
    e4dc:	4611      	mov	r1, r2
    e4de:	4618      	mov	r0, r3
    e4e0:	4b70      	ldr	r3, [pc, #448]	; (e6a4 <_usb_d_dev_ep_enable+0x1f4>)
    e4e2:	4798      	blx	r3
    e4e4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    e4e6:	7efb      	ldrb	r3, [r7, #27]
    e4e8:	4619      	mov	r1, r3
    e4ea:	69f8      	ldr	r0, [r7, #28]
    e4ec:	4b6e      	ldr	r3, [pc, #440]	; (e6a8 <_usb_d_dev_ep_enable+0x1f8>)
    e4ee:	4798      	blx	r3
    e4f0:	4603      	mov	r3, r0
    e4f2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    e4f4:	7efb      	ldrb	r3, [r7, #27]
    e4f6:	2b04      	cmp	r3, #4
    e4f8:	d803      	bhi.n	e502 <_usb_d_dev_ep_enable+0x52>
    e4fa:	697b      	ldr	r3, [r7, #20]
    e4fc:	7c9b      	ldrb	r3, [r3, #18]
    e4fe:	2bff      	cmp	r3, #255	; 0xff
    e500:	d102      	bne.n	e508 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    e502:	f06f 0311 	mvn.w	r3, #17
    e506:	e0c8      	b.n	e69a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    e508:	7efb      	ldrb	r3, [r7, #27]
    e50a:	015b      	lsls	r3, r3, #5
    e50c:	4a67      	ldr	r2, [pc, #412]	; (e6ac <_usb_d_dev_ep_enable+0x1fc>)
    e50e:	4413      	add	r3, r2
    e510:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    e512:	697b      	ldr	r3, [r7, #20]
    e514:	7cdb      	ldrb	r3, [r3, #19]
    e516:	f003 0307 	and.w	r3, r3, #7
    e51a:	b2db      	uxtb	r3, r3
    e51c:	2b01      	cmp	r3, #1
    e51e:	d14b      	bne.n	e5b8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    e520:	7cfb      	ldrb	r3, [r7, #19]
    e522:	f003 0377 	and.w	r3, r3, #119	; 0x77
    e526:	2b00      	cmp	r3, #0
    e528:	d002      	beq.n	e530 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    e52a:	f06f 0313 	mvn.w	r3, #19
    e52e:	e0b4      	b.n	e69a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    e530:	7efb      	ldrb	r3, [r7, #27]
    e532:	2211      	movs	r2, #17
    e534:	4619      	mov	r1, r3
    e536:	69f8      	ldr	r0, [r7, #28]
    e538:	4b5d      	ldr	r3, [pc, #372]	; (e6b0 <_usb_d_dev_ep_enable+0x200>)
    e53a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e53c:	697b      	ldr	r3, [r7, #20]
    e53e:	8a1b      	ldrh	r3, [r3, #16]
    e540:	039b      	lsls	r3, r3, #14
    e542:	4c5c      	ldr	r4, [pc, #368]	; (e6b4 <_usb_d_dev_ep_enable+0x204>)
    e544:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e546:	697b      	ldr	r3, [r7, #20]
    e548:	8a1b      	ldrh	r3, [r3, #16]
    e54a:	4618      	mov	r0, r3
    e54c:	4b5a      	ldr	r3, [pc, #360]	; (e6b8 <_usb_d_dev_ep_enable+0x208>)
    e54e:	4798      	blx	r3
    e550:	4603      	mov	r3, r0
    e552:	071b      	lsls	r3, r3, #28
    e554:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e558:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    e560:	68fb      	ldr	r3, [r7, #12]
    e562:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e566:	697b      	ldr	r3, [r7, #20]
    e568:	8a1b      	ldrh	r3, [r3, #16]
    e56a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e56e:	697b      	ldr	r3, [r7, #20]
    e570:	8a1b      	ldrh	r3, [r3, #16]
    e572:	4618      	mov	r0, r3
    e574:	4b50      	ldr	r3, [pc, #320]	; (e6b8 <_usb_d_dev_ep_enable+0x208>)
    e576:	4798      	blx	r3
    e578:	4603      	mov	r3, r0
    e57a:	071b      	lsls	r3, r3, #28
    e57c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e580:	432b      	orrs	r3, r5
    e582:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e584:	7efb      	ldrb	r3, [r7, #27]
    e586:	2200      	movs	r2, #0
    e588:	2100      	movs	r1, #0
    e58a:	4618      	mov	r0, r3
    e58c:	4b4b      	ldr	r3, [pc, #300]	; (e6bc <_usb_d_dev_ep_enable+0x20c>)
    e58e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    e590:	7efb      	ldrb	r3, [r7, #27]
    e592:	2200      	movs	r2, #0
    e594:	2101      	movs	r1, #1
    e596:	4618      	mov	r0, r3
    e598:	4b49      	ldr	r3, [pc, #292]	; (e6c0 <_usb_d_dev_ep_enable+0x210>)
    e59a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    e59c:	7efb      	ldrb	r3, [r7, #27]
    e59e:	2100      	movs	r1, #0
    e5a0:	4618      	mov	r0, r3
    e5a2:	4b48      	ldr	r3, [pc, #288]	; (e6c4 <_usb_d_dev_ep_enable+0x214>)
    e5a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e5a6:	7efb      	ldrb	r3, [r7, #27]
    e5a8:	2101      	movs	r1, #1
    e5aa:	4618      	mov	r0, r3
    e5ac:	4b45      	ldr	r3, [pc, #276]	; (e6c4 <_usb_d_dev_ep_enable+0x214>)
    e5ae:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    e5b0:	6978      	ldr	r0, [r7, #20]
    e5b2:	4b45      	ldr	r3, [pc, #276]	; (e6c8 <_usb_d_dev_ep_enable+0x218>)
    e5b4:	4798      	blx	r3
    e5b6:	e06f      	b.n	e698 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    e5b8:	7ebb      	ldrb	r3, [r7, #26]
    e5ba:	2b00      	cmp	r3, #0
    e5bc:	d038      	beq.n	e630 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    e5be:	7cfb      	ldrb	r3, [r7, #19]
    e5c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e5c4:	2b00      	cmp	r3, #0
    e5c6:	d002      	beq.n	e5ce <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    e5c8:	f06f 0313 	mvn.w	r3, #19
    e5cc:	e065      	b.n	e69a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    e5ce:	697b      	ldr	r3, [r7, #20]
    e5d0:	7cdb      	ldrb	r3, [r3, #19]
    e5d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e5d6:	b2db      	uxtb	r3, r3
    e5d8:	011b      	lsls	r3, r3, #4
    e5da:	b2db      	uxtb	r3, r3
    e5dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e5e0:	b2da      	uxtb	r2, r3
    e5e2:	7cfb      	ldrb	r3, [r7, #19]
    e5e4:	4313      	orrs	r3, r2
    e5e6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e5e8:	7cfa      	ldrb	r2, [r7, #19]
    e5ea:	7efb      	ldrb	r3, [r7, #27]
    e5ec:	4619      	mov	r1, r3
    e5ee:	69f8      	ldr	r0, [r7, #28]
    e5f0:	4b2f      	ldr	r3, [pc, #188]	; (e6b0 <_usb_d_dev_ep_enable+0x200>)
    e5f2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    e5f4:	68fb      	ldr	r3, [r7, #12]
    e5f6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e5fa:	697b      	ldr	r3, [r7, #20]
    e5fc:	8a1b      	ldrh	r3, [r3, #16]
    e5fe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    e602:	697b      	ldr	r3, [r7, #20]
    e604:	8a1b      	ldrh	r3, [r3, #16]
    e606:	4618      	mov	r0, r3
    e608:	4b2b      	ldr	r3, [pc, #172]	; (e6b8 <_usb_d_dev_ep_enable+0x208>)
    e60a:	4798      	blx	r3
    e60c:	4603      	mov	r3, r0
    e60e:	071b      	lsls	r3, r3, #28
    e610:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e614:	432b      	orrs	r3, r5
    e616:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e618:	7efb      	ldrb	r3, [r7, #27]
    e61a:	2200      	movs	r2, #0
    e61c:	2101      	movs	r1, #1
    e61e:	4618      	mov	r0, r3
    e620:	4b27      	ldr	r3, [pc, #156]	; (e6c0 <_usb_d_dev_ep_enable+0x210>)
    e622:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    e624:	7efb      	ldrb	r3, [r7, #27]
    e626:	2101      	movs	r1, #1
    e628:	4618      	mov	r0, r3
    e62a:	4b26      	ldr	r3, [pc, #152]	; (e6c4 <_usb_d_dev_ep_enable+0x214>)
    e62c:	4798      	blx	r3
    e62e:	e033      	b.n	e698 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    e630:	7cfb      	ldrb	r3, [r7, #19]
    e632:	f003 0307 	and.w	r3, r3, #7
    e636:	2b00      	cmp	r3, #0
    e638:	d002      	beq.n	e640 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    e63a:	f06f 0313 	mvn.w	r3, #19
    e63e:	e02c      	b.n	e69a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    e640:	697b      	ldr	r3, [r7, #20]
    e642:	7cdb      	ldrb	r3, [r3, #19]
    e644:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e648:	b2db      	uxtb	r3, r3
    e64a:	461a      	mov	r2, r3
    e64c:	7cfb      	ldrb	r3, [r7, #19]
    e64e:	4313      	orrs	r3, r2
    e650:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    e652:	7cfa      	ldrb	r2, [r7, #19]
    e654:	7efb      	ldrb	r3, [r7, #27]
    e656:	4619      	mov	r1, r3
    e658:	69f8      	ldr	r0, [r7, #28]
    e65a:	4b15      	ldr	r3, [pc, #84]	; (e6b0 <_usb_d_dev_ep_enable+0x200>)
    e65c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e65e:	697b      	ldr	r3, [r7, #20]
    e660:	8a1b      	ldrh	r3, [r3, #16]
    e662:	039b      	lsls	r3, r3, #14
    e664:	4c13      	ldr	r4, [pc, #76]	; (e6b4 <_usb_d_dev_ep_enable+0x204>)
    e666:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    e668:	697b      	ldr	r3, [r7, #20]
    e66a:	8a1b      	ldrh	r3, [r3, #16]
    e66c:	4618      	mov	r0, r3
    e66e:	4b12      	ldr	r3, [pc, #72]	; (e6b8 <_usb_d_dev_ep_enable+0x208>)
    e670:	4798      	blx	r3
    e672:	4603      	mov	r3, r0
    e674:	071b      	lsls	r3, r3, #28
    e676:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    e67a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    e67e:	68fb      	ldr	r3, [r7, #12]
    e680:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e682:	7efb      	ldrb	r3, [r7, #27]
    e684:	2200      	movs	r2, #0
    e686:	2100      	movs	r1, #0
    e688:	4618      	mov	r0, r3
    e68a:	4b0c      	ldr	r3, [pc, #48]	; (e6bc <_usb_d_dev_ep_enable+0x20c>)
    e68c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    e68e:	7efb      	ldrb	r3, [r7, #27]
    e690:	2100      	movs	r1, #0
    e692:	4618      	mov	r0, r3
    e694:	4b0b      	ldr	r3, [pc, #44]	; (e6c4 <_usb_d_dev_ep_enable+0x214>)
    e696:	4798      	blx	r3
	}

	return USB_OK;
    e698:	2300      	movs	r3, #0
}
    e69a:	4618      	mov	r0, r3
    e69c:	3720      	adds	r7, #32
    e69e:	46bd      	mov	sp, r7
    e6a0:	bdb0      	pop	{r4, r5, r7, pc}
    e6a2:	bf00      	nop
    e6a4:	0000d2c9 	.word	0x0000d2c9
    e6a8:	0000c94f 	.word	0x0000c94f
    e6ac:	20001ef8 	.word	0x20001ef8
    e6b0:	0000c925 	.word	0x0000c925
    e6b4:	0fffc000 	.word	0x0fffc000
    e6b8:	0000d265 	.word	0x0000d265
    e6bc:	0000d20d 	.word	0x0000d20d
    e6c0:	0000d1b5 	.word	0x0000d1b5
    e6c4:	0000d17d 	.word	0x0000d17d
    e6c8:	0000e221 	.word	0x0000e221

0000e6cc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    e6cc:	b580      	push	{r7, lr}
    e6ce:	b084      	sub	sp, #16
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	6078      	str	r0, [r7, #4]
    e6d4:	460b      	mov	r3, r1
    e6d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e6d8:	687b      	ldr	r3, [r7, #4]
    e6da:	7c9b      	ldrb	r3, [r3, #18]
    e6dc:	f003 030f 	and.w	r3, r3, #15
    e6e0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    e6e2:	78fa      	ldrb	r2, [r7, #3]
    e6e4:	7bfb      	ldrb	r3, [r7, #15]
    e6e6:	4611      	mov	r1, r2
    e6e8:	4618      	mov	r0, r3
    e6ea:	4b03      	ldr	r3, [pc, #12]	; (e6f8 <_usb_d_dev_ep_stall_get+0x2c>)
    e6ec:	4798      	blx	r3
    e6ee:	4603      	mov	r3, r0
}
    e6f0:	4618      	mov	r0, r3
    e6f2:	3710      	adds	r7, #16
    e6f4:	46bd      	mov	sp, r7
    e6f6:	bd80      	pop	{r7, pc}
    e6f8:	0000cdbd 	.word	0x0000cdbd

0000e6fc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    e6fc:	b580      	push	{r7, lr}
    e6fe:	b084      	sub	sp, #16
    e700:	af00      	add	r7, sp, #0
    e702:	6078      	str	r0, [r7, #4]
    e704:	460b      	mov	r3, r1
    e706:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e708:	687b      	ldr	r3, [r7, #4]
    e70a:	7c9b      	ldrb	r3, [r3, #18]
    e70c:	f003 030f 	and.w	r3, r3, #15
    e710:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    e712:	78f9      	ldrb	r1, [r7, #3]
    e714:	7bfb      	ldrb	r3, [r7, #15]
    e716:	2201      	movs	r2, #1
    e718:	4618      	mov	r0, r3
    e71a:	4b0a      	ldr	r3, [pc, #40]	; (e744 <_usb_d_dev_ep_stall_set+0x48>)
    e71c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e71e:	78fb      	ldrb	r3, [r7, #3]
    e720:	2220      	movs	r2, #32
    e722:	409a      	lsls	r2, r3
    e724:	7bfb      	ldrb	r3, [r7, #15]
    e726:	4611      	mov	r1, r2
    e728:	4618      	mov	r0, r3
    e72a:	4b07      	ldr	r3, [pc, #28]	; (e748 <_usb_d_dev_ep_stall_set+0x4c>)
    e72c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    e72e:	687a      	ldr	r2, [r7, #4]
    e730:	7cd3      	ldrb	r3, [r2, #19]
    e732:	f043 0308 	orr.w	r3, r3, #8
    e736:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    e738:	2300      	movs	r3, #0
}
    e73a:	4618      	mov	r0, r3
    e73c:	3710      	adds	r7, #16
    e73e:	46bd      	mov	sp, r7
    e740:	bd80      	pop	{r7, pc}
    e742:	bf00      	nop
    e744:	0000cd65 	.word	0x0000cd65
    e748:	0000cce5 	.word	0x0000cce5

0000e74c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    e74c:	b580      	push	{r7, lr}
    e74e:	b084      	sub	sp, #16
    e750:	af00      	add	r7, sp, #0
    e752:	6078      	str	r0, [r7, #4]
    e754:	460b      	mov	r3, r1
    e756:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    e758:	687b      	ldr	r3, [r7, #4]
    e75a:	7c9b      	ldrb	r3, [r3, #18]
    e75c:	f003 030f 	and.w	r3, r3, #15
    e760:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    e762:	78fa      	ldrb	r2, [r7, #3]
    e764:	7bfb      	ldrb	r3, [r7, #15]
    e766:	4611      	mov	r1, r2
    e768:	4618      	mov	r0, r3
    e76a:	4b28      	ldr	r3, [pc, #160]	; (e80c <_usb_d_dev_ep_stall_clr+0xc0>)
    e76c:	4798      	blx	r3
    e76e:	4603      	mov	r3, r0
    e770:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    e772:	7bbb      	ldrb	r3, [r7, #14]
    e774:	f083 0301 	eor.w	r3, r3, #1
    e778:	b2db      	uxtb	r3, r3
    e77a:	2b00      	cmp	r3, #0
    e77c:	d001      	beq.n	e782 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    e77e:	2300      	movs	r3, #0
    e780:	e040      	b.n	e804 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    e782:	78f9      	ldrb	r1, [r7, #3]
    e784:	7bfb      	ldrb	r3, [r7, #15]
    e786:	2200      	movs	r2, #0
    e788:	4618      	mov	r0, r3
    e78a:	4b21      	ldr	r3, [pc, #132]	; (e810 <_usb_d_dev_ep_stall_clr+0xc4>)
    e78c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    e78e:	78fb      	ldrb	r3, [r7, #3]
    e790:	2220      	movs	r2, #32
    e792:	409a      	lsls	r2, r3
    e794:	7bfb      	ldrb	r3, [r7, #15]
    e796:	4611      	mov	r1, r2
    e798:	4618      	mov	r0, r3
    e79a:	4b1e      	ldr	r3, [pc, #120]	; (e814 <_usb_d_dev_ep_stall_clr+0xc8>)
    e79c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    e79e:	78fa      	ldrb	r2, [r7, #3]
    e7a0:	7bfb      	ldrb	r3, [r7, #15]
    e7a2:	4611      	mov	r1, r2
    e7a4:	4618      	mov	r0, r3
    e7a6:	4b1c      	ldr	r3, [pc, #112]	; (e818 <_usb_d_dev_ep_stall_clr+0xcc>)
    e7a8:	4798      	blx	r3
    e7aa:	4603      	mov	r3, r0
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	d00b      	beq.n	e7c8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    e7b0:	78fa      	ldrb	r2, [r7, #3]
    e7b2:	7bfb      	ldrb	r3, [r7, #15]
    e7b4:	4611      	mov	r1, r2
    e7b6:	4618      	mov	r0, r3
    e7b8:	4b18      	ldr	r3, [pc, #96]	; (e81c <_usb_d_dev_ep_stall_clr+0xd0>)
    e7ba:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    e7bc:	78f9      	ldrb	r1, [r7, #3]
    e7be:	7bfb      	ldrb	r3, [r7, #15]
    e7c0:	2200      	movs	r2, #0
    e7c2:	4618      	mov	r0, r3
    e7c4:	4b16      	ldr	r3, [pc, #88]	; (e820 <_usb_d_dev_ep_stall_clr+0xd4>)
    e7c6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    e7c8:	687b      	ldr	r3, [r7, #4]
    e7ca:	7cdb      	ldrb	r3, [r3, #19]
    e7cc:	f003 0307 	and.w	r3, r3, #7
    e7d0:	b2db      	uxtb	r3, r3
    e7d2:	2b01      	cmp	r3, #1
    e7d4:	d110      	bne.n	e7f8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    e7d6:	7bfb      	ldrb	r3, [r7, #15]
    e7d8:	4619      	mov	r1, r3
    e7da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e7de:	4b11      	ldr	r3, [pc, #68]	; (e824 <_usb_d_dev_ep_stall_clr+0xd8>)
    e7e0:	4798      	blx	r3
    e7e2:	4603      	mov	r3, r0
    e7e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e7e8:	2b00      	cmp	r3, #0
    e7ea:	d10a      	bne.n	e802 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    e7ec:	687a      	ldr	r2, [r7, #4]
    e7ee:	7cd3      	ldrb	r3, [r2, #19]
    e7f0:	f36f 03c3 	bfc	r3, #3, #1
    e7f4:	74d3      	strb	r3, [r2, #19]
    e7f6:	e004      	b.n	e802 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    e7f8:	687a      	ldr	r2, [r7, #4]
    e7fa:	7cd3      	ldrb	r3, [r2, #19]
    e7fc:	f36f 03c3 	bfc	r3, #3, #1
    e800:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    e802:	2300      	movs	r3, #0
}
    e804:	4618      	mov	r0, r3
    e806:	3710      	adds	r7, #16
    e808:	46bd      	mov	sp, r7
    e80a:	bd80      	pop	{r7, pc}
    e80c:	0000cdbd 	.word	0x0000cdbd
    e810:	0000cd65 	.word	0x0000cd65
    e814:	0000cd0d 	.word	0x0000cd0d
    e818:	0000ce01 	.word	0x0000ce01
    e81c:	0000ce45 	.word	0x0000ce45
    e820:	0000cf31 	.word	0x0000cf31
    e824:	0000c7ed 	.word	0x0000c7ed

0000e828 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    e828:	b580      	push	{r7, lr}
    e82a:	b086      	sub	sp, #24
    e82c:	af00      	add	r7, sp, #0
    e82e:	4603      	mov	r3, r0
    e830:	460a      	mov	r2, r1
    e832:	71fb      	strb	r3, [r7, #7]
    e834:	4613      	mov	r3, r2
    e836:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    e838:	79fb      	ldrb	r3, [r7, #7]
    e83a:	f003 030f 	and.w	r3, r3, #15
    e83e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    e840:	79fb      	ldrb	r3, [r7, #7]
    e842:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e846:	2b00      	cmp	r3, #0
    e848:	bf14      	ite	ne
    e84a:	2301      	movne	r3, #1
    e84c:	2300      	moveq	r3, #0
    e84e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    e850:	7cba      	ldrb	r2, [r7, #18]
    e852:	7cfb      	ldrb	r3, [r7, #19]
    e854:	4611      	mov	r1, r2
    e856:	4618      	mov	r0, r3
    e858:	4b13      	ldr	r3, [pc, #76]	; (e8a8 <_usb_d_dev_ep_stall+0x80>)
    e85a:	4798      	blx	r3
    e85c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    e85e:	7cfb      	ldrb	r3, [r7, #19]
    e860:	2b04      	cmp	r3, #4
    e862:	d902      	bls.n	e86a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    e864:	f06f 0311 	mvn.w	r3, #17
    e868:	e01a      	b.n	e8a0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    e86a:	79bb      	ldrb	r3, [r7, #6]
    e86c:	2b01      	cmp	r3, #1
    e86e:	d106      	bne.n	e87e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    e870:	7cbb      	ldrb	r3, [r7, #18]
    e872:	4619      	mov	r1, r3
    e874:	68f8      	ldr	r0, [r7, #12]
    e876:	4b0d      	ldr	r3, [pc, #52]	; (e8ac <_usb_d_dev_ep_stall+0x84>)
    e878:	4798      	blx	r3
    e87a:	6178      	str	r0, [r7, #20]
    e87c:	e00f      	b.n	e89e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    e87e:	79bb      	ldrb	r3, [r7, #6]
    e880:	2b00      	cmp	r3, #0
    e882:	d106      	bne.n	e892 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    e884:	7cbb      	ldrb	r3, [r7, #18]
    e886:	4619      	mov	r1, r3
    e888:	68f8      	ldr	r0, [r7, #12]
    e88a:	4b09      	ldr	r3, [pc, #36]	; (e8b0 <_usb_d_dev_ep_stall+0x88>)
    e88c:	4798      	blx	r3
    e88e:	6178      	str	r0, [r7, #20]
    e890:	e005      	b.n	e89e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    e892:	7cbb      	ldrb	r3, [r7, #18]
    e894:	4619      	mov	r1, r3
    e896:	68f8      	ldr	r0, [r7, #12]
    e898:	4b06      	ldr	r3, [pc, #24]	; (e8b4 <_usb_d_dev_ep_stall+0x8c>)
    e89a:	4798      	blx	r3
    e89c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    e89e:	697b      	ldr	r3, [r7, #20]
}
    e8a0:	4618      	mov	r0, r3
    e8a2:	3718      	adds	r7, #24
    e8a4:	46bd      	mov	sp, r7
    e8a6:	bd80      	pop	{r7, pc}
    e8a8:	0000d2c9 	.word	0x0000d2c9
    e8ac:	0000e6fd 	.word	0x0000e6fd
    e8b0:	0000e74d 	.word	0x0000e74d
    e8b4:	0000e6cd 	.word	0x0000e6cd

0000e8b8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    e8b8:	b580      	push	{r7, lr}
    e8ba:	b082      	sub	sp, #8
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
    e8c0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e8c2:	687b      	ldr	r3, [r7, #4]
    e8c4:	7c9b      	ldrb	r3, [r3, #18]
    e8c6:	2bff      	cmp	r3, #255	; 0xff
    e8c8:	d014      	beq.n	e8f4 <_usb_d_dev_trans_done+0x3c>
    e8ca:	687b      	ldr	r3, [r7, #4]
    e8cc:	7cdb      	ldrb	r3, [r3, #19]
    e8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e8d2:	b2db      	uxtb	r3, r3
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d00d      	beq.n	e8f4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    e8d8:	687a      	ldr	r2, [r7, #4]
    e8da:	7cd3      	ldrb	r3, [r2, #19]
    e8dc:	f36f 1386 	bfc	r3, #6, #1
    e8e0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    e8e2:	4b06      	ldr	r3, [pc, #24]	; (e8fc <_usb_d_dev_trans_done+0x44>)
    e8e4:	691b      	ldr	r3, [r3, #16]
    e8e6:	687a      	ldr	r2, [r7, #4]
    e8e8:	7c90      	ldrb	r0, [r2, #18]
    e8ea:	687a      	ldr	r2, [r7, #4]
    e8ec:	6892      	ldr	r2, [r2, #8]
    e8ee:	6839      	ldr	r1, [r7, #0]
    e8f0:	4798      	blx	r3
    e8f2:	e000      	b.n	e8f6 <_usb_d_dev_trans_done+0x3e>
		return;
    e8f4:	bf00      	nop
}
    e8f6:	3708      	adds	r7, #8
    e8f8:	46bd      	mov	sp, r7
    e8fa:	bd80      	pop	{r7, pc}
    e8fc:	20001e30 	.word	0x20001e30

0000e900 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    e900:	b580      	push	{r7, lr}
    e902:	b086      	sub	sp, #24
    e904:	af00      	add	r7, sp, #0
    e906:	60f8      	str	r0, [r7, #12]
    e908:	460b      	mov	r3, r1
    e90a:	607a      	str	r2, [r7, #4]
    e90c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    e90e:	68fb      	ldr	r3, [r7, #12]
    e910:	7c9b      	ldrb	r3, [r3, #18]
    e912:	f003 030f 	and.w	r3, r3, #15
    e916:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    e918:	4b1f      	ldr	r3, [pc, #124]	; (e998 <_usb_d_dev_trans_stop+0x98>)
    e91a:	881b      	ldrh	r3, [r3, #0]
    e91c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    e91e:	68fb      	ldr	r3, [r7, #12]
    e920:	7c9b      	ldrb	r3, [r3, #18]
    e922:	2bff      	cmp	r3, #255	; 0xff
    e924:	d033      	beq.n	e98e <_usb_d_dev_trans_stop+0x8e>
    e926:	68fb      	ldr	r3, [r7, #12]
    e928:	7cdb      	ldrb	r3, [r3, #19]
    e92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e92e:	b2db      	uxtb	r3, r3
    e930:	2b00      	cmp	r3, #0
    e932:	d02c      	beq.n	e98e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    e934:	7afb      	ldrb	r3, [r7, #11]
    e936:	2b00      	cmp	r3, #0
    e938:	d006      	beq.n	e948 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e93a:	7dfb      	ldrb	r3, [r7, #23]
    e93c:	2200      	movs	r2, #0
    e93e:	2101      	movs	r1, #1
    e940:	4618      	mov	r0, r3
    e942:	4b16      	ldr	r3, [pc, #88]	; (e99c <_usb_d_dev_trans_stop+0x9c>)
    e944:	4798      	blx	r3
    e946:	e005      	b.n	e954 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    e948:	7dfb      	ldrb	r3, [r7, #23]
    e94a:	2200      	movs	r2, #0
    e94c:	2100      	movs	r1, #0
    e94e:	4618      	mov	r0, r3
    e950:	4b13      	ldr	r3, [pc, #76]	; (e9a0 <_usb_d_dev_trans_stop+0xa0>)
    e952:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    e954:	7afb      	ldrb	r3, [r7, #11]
    e956:	f107 0218 	add.w	r2, r7, #24
    e95a:	4413      	add	r3, r2
    e95c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e960:	461a      	mov	r2, r3
    e962:	7dfb      	ldrb	r3, [r7, #23]
    e964:	4611      	mov	r1, r2
    e966:	4618      	mov	r0, r3
    e968:	4b0e      	ldr	r3, [pc, #56]	; (e9a4 <_usb_d_dev_trans_stop+0xa4>)
    e96a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    e96c:	7afb      	ldrb	r3, [r7, #11]
    e96e:	f107 0218 	add.w	r2, r7, #24
    e972:	4413      	add	r3, r2
    e974:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    e978:	461a      	mov	r2, r3
    e97a:	7dfb      	ldrb	r3, [r7, #23]
    e97c:	4611      	mov	r1, r2
    e97e:	4618      	mov	r0, r3
    e980:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <_usb_d_dev_trans_stop+0xa8>)
    e982:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    e984:	6879      	ldr	r1, [r7, #4]
    e986:	68f8      	ldr	r0, [r7, #12]
    e988:	4b08      	ldr	r3, [pc, #32]	; (e9ac <_usb_d_dev_trans_stop+0xac>)
    e98a:	4798      	blx	r3
    e98c:	e000      	b.n	e990 <_usb_d_dev_trans_stop+0x90>
		return;
    e98e:	bf00      	nop
}
    e990:	3718      	adds	r7, #24
    e992:	46bd      	mov	sp, r7
    e994:	bd80      	pop	{r7, pc}
    e996:	bf00      	nop
    e998:	00012d50 	.word	0x00012d50
    e99c:	0000d1b5 	.word	0x0000d1b5
    e9a0:	0000d20d 	.word	0x0000d20d
    e9a4:	0000ccbd 	.word	0x0000ccbd
    e9a8:	0000cd0d 	.word	0x0000cd0d
    e9ac:	0000e8b9 	.word	0x0000e8b9

0000e9b0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b086      	sub	sp, #24
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	4603      	mov	r3, r0
    e9b8:	6039      	str	r1, [r7, #0]
    e9ba:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    e9bc:	79fb      	ldrb	r3, [r7, #7]
    e9be:	f003 030f 	and.w	r3, r3, #15
    e9c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    e9c4:	7dfb      	ldrb	r3, [r7, #23]
    e9c6:	015b      	lsls	r3, r3, #5
    e9c8:	4a1e      	ldr	r2, [pc, #120]	; (ea44 <_usb_d_dev_ep_read_req+0x94>)
    e9ca:	4413      	add	r3, r2
    e9cc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    e9ce:	693b      	ldr	r3, [r7, #16]
    e9d0:	681b      	ldr	r3, [r3, #0]
    e9d2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    e9d4:	693b      	ldr	r3, [r7, #16]
    e9d6:	685b      	ldr	r3, [r3, #4]
    e9d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e9dc:	b29b      	uxth	r3, r3
    e9de:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    e9e0:	7dfb      	ldrb	r3, [r7, #23]
    e9e2:	2b04      	cmp	r3, #4
    e9e4:	d802      	bhi.n	e9ec <_usb_d_dev_ep_read_req+0x3c>
    e9e6:	683b      	ldr	r3, [r7, #0]
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d102      	bne.n	e9f2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    e9ec:	f06f 0311 	mvn.w	r3, #17
    e9f0:	e023      	b.n	ea3a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    e9f2:	7dfb      	ldrb	r3, [r7, #23]
    e9f4:	4618      	mov	r0, r3
    e9f6:	4b14      	ldr	r3, [pc, #80]	; (ea48 <_usb_d_dev_ep_read_req+0x98>)
    e9f8:	4798      	blx	r3
    e9fa:	4603      	mov	r3, r0
    e9fc:	f083 0301 	eor.w	r3, r3, #1
    ea00:	b2db      	uxtb	r3, r3
    ea02:	2b00      	cmp	r3, #0
    ea04:	d002      	beq.n	ea0c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    ea06:	f06f 0312 	mvn.w	r3, #18
    ea0a:	e016      	b.n	ea3a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    ea0c:	7dfb      	ldrb	r3, [r7, #23]
    ea0e:	4618      	mov	r0, r3
    ea10:	4b0e      	ldr	r3, [pc, #56]	; (ea4c <_usb_d_dev_ep_read_req+0x9c>)
    ea12:	4798      	blx	r3
    ea14:	4603      	mov	r3, r0
    ea16:	f083 0301 	eor.w	r3, r3, #1
    ea1a:	b2db      	uxtb	r3, r3
    ea1c:	2b00      	cmp	r3, #0
    ea1e:	d001      	beq.n	ea24 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    ea20:	2300      	movs	r3, #0
    ea22:	e00a      	b.n	ea3a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    ea24:	68fb      	ldr	r3, [r7, #12]
    ea26:	2208      	movs	r2, #8
    ea28:	4619      	mov	r1, r3
    ea2a:	6838      	ldr	r0, [r7, #0]
    ea2c:	4b08      	ldr	r3, [pc, #32]	; (ea50 <_usb_d_dev_ep_read_req+0xa0>)
    ea2e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    ea30:	7dfb      	ldrb	r3, [r7, #23]
    ea32:	4618      	mov	r0, r3
    ea34:	4b07      	ldr	r3, [pc, #28]	; (ea54 <_usb_d_dev_ep_read_req+0xa4>)
    ea36:	4798      	blx	r3

	return bytes;
    ea38:	897b      	ldrh	r3, [r7, #10]
}
    ea3a:	4618      	mov	r0, r3
    ea3c:	3718      	adds	r7, #24
    ea3e:	46bd      	mov	sp, r7
    ea40:	bd80      	pop	{r7, pc}
    ea42:	bf00      	nop
    ea44:	20001ef8 	.word	0x20001ef8
    ea48:	0000cd35 	.word	0x0000cd35
    ea4c:	0000cee1 	.word	0x0000cee1
    ea50:	00011c19 	.word	0x00011c19
    ea54:	0000cf11 	.word	0x0000cf11

0000ea58 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ea58:	b580      	push	{r7, lr}
    ea5a:	b086      	sub	sp, #24
    ea5c:	af00      	add	r7, sp, #0
    ea5e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ea60:	687b      	ldr	r3, [r7, #4]
    ea62:	7a1b      	ldrb	r3, [r3, #8]
    ea64:	f003 030f 	and.w	r3, r3, #15
    ea68:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	7a1b      	ldrb	r3, [r3, #8]
    ea6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ea72:	2b00      	cmp	r3, #0
    ea74:	bf14      	ite	ne
    ea76:	2301      	movne	r3, #1
    ea78:	2300      	moveq	r3, #0
    ea7a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ea7c:	7d7a      	ldrb	r2, [r7, #21]
    ea7e:	7dbb      	ldrb	r3, [r7, #22]
    ea80:	4611      	mov	r1, r2
    ea82:	4618      	mov	r0, r3
    ea84:	4b5f      	ldr	r3, [pc, #380]	; (ec04 <_usb_d_dev_ep_trans+0x1ac>)
    ea86:	4798      	blx	r3
    ea88:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ea8a:	693b      	ldr	r3, [r7, #16]
    ea8c:	8a1b      	ldrh	r3, [r3, #16]
    ea8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ea92:	4293      	cmp	r3, r2
    ea94:	d004      	beq.n	eaa0 <_usb_d_dev_ep_trans+0x48>
    ea96:	693b      	ldr	r3, [r7, #16]
    ea98:	8a1b      	ldrh	r3, [r3, #16]
    ea9a:	3b01      	subs	r3, #1
    ea9c:	b29b      	uxth	r3, r3
    ea9e:	e001      	b.n	eaa4 <_usb_d_dev_ep_trans+0x4c>
    eaa0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    eaa4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    eaa6:	687b      	ldr	r3, [r7, #4]
    eaa8:	685a      	ldr	r2, [r3, #4]
    eaaa:	89fb      	ldrh	r3, [r7, #14]
    eaac:	4013      	ands	r3, r2
    eaae:	2b00      	cmp	r3, #0
    eab0:	bf14      	ite	ne
    eab2:	2301      	movne	r3, #1
    eab4:	2300      	moveq	r3, #0
    eab6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    eab8:	2300      	movs	r3, #0
    eaba:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    eabc:	7dbb      	ldrb	r3, [r7, #22]
    eabe:	2b04      	cmp	r3, #4
    eac0:	d902      	bls.n	eac8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    eac2:	f06f 0311 	mvn.w	r3, #17
    eac6:	e098      	b.n	ebfa <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    eac8:	687b      	ldr	r3, [r7, #4]
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ead0:	d31a      	bcc.n	eb08 <_usb_d_dev_ep_trans+0xb0>
    ead2:	687b      	ldr	r3, [r7, #4]
    ead4:	681b      	ldr	r3, [r3, #0]
    ead6:	461a      	mov	r2, r3
    ead8:	687b      	ldr	r3, [r7, #4]
    eada:	685b      	ldr	r3, [r3, #4]
    eadc:	4413      	add	r3, r2
    eade:	4a4a      	ldr	r2, [pc, #296]	; (ec08 <_usb_d_dev_ep_trans+0x1b0>)
    eae0:	4293      	cmp	r3, r2
    eae2:	d811      	bhi.n	eb08 <_usb_d_dev_ep_trans+0xb0>
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	681b      	ldr	r3, [r3, #0]
    eae8:	f003 0303 	and.w	r3, r3, #3
    eaec:	2b00      	cmp	r3, #0
    eaee:	d10b      	bne.n	eb08 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    eaf0:	7d7b      	ldrb	r3, [r7, #21]
    eaf2:	f083 0301 	eor.w	r3, r3, #1
    eaf6:	b2db      	uxtb	r3, r3
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d00e      	beq.n	eb1a <_usb_d_dev_ep_trans+0xc2>
    eafc:	687b      	ldr	r3, [r7, #4]
    eafe:	685b      	ldr	r3, [r3, #4]
    eb00:	693a      	ldr	r2, [r7, #16]
    eb02:	8a12      	ldrh	r2, [r2, #16]
    eb04:	4293      	cmp	r3, r2
    eb06:	d208      	bcs.n	eb1a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    eb08:	693b      	ldr	r3, [r7, #16]
    eb0a:	68db      	ldr	r3, [r3, #12]
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	d102      	bne.n	eb16 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    eb10:	f06f 0312 	mvn.w	r3, #18
    eb14:	e071      	b.n	ebfa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    eb16:	2301      	movs	r3, #1
    eb18:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    eb1a:	7d7b      	ldrb	r3, [r7, #21]
    eb1c:	f083 0301 	eor.w	r3, r3, #1
    eb20:	b2db      	uxtb	r3, r3
    eb22:	2b00      	cmp	r3, #0
    eb24:	d009      	beq.n	eb3a <_usb_d_dev_ep_trans+0xe2>
    eb26:	7b7b      	ldrb	r3, [r7, #13]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d006      	beq.n	eb3a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    eb2c:	693b      	ldr	r3, [r7, #16]
    eb2e:	68db      	ldr	r3, [r3, #12]
    eb30:	2b00      	cmp	r3, #0
    eb32:	d102      	bne.n	eb3a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    eb34:	f06f 0311 	mvn.w	r3, #17
    eb38:	e05f      	b.n	ebfa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    eb3a:	693b      	ldr	r3, [r7, #16]
    eb3c:	7cdb      	ldrb	r3, [r3, #19]
    eb3e:	f003 0308 	and.w	r3, r3, #8
    eb42:	b2db      	uxtb	r3, r3
    eb44:	2b00      	cmp	r3, #0
    eb46:	d001      	beq.n	eb4c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    eb48:	2302      	movs	r3, #2
    eb4a:	e056      	b.n	ebfa <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    eb4c:	f107 0308 	add.w	r3, r7, #8
    eb50:	4618      	mov	r0, r3
    eb52:	4b2e      	ldr	r3, [pc, #184]	; (ec0c <_usb_d_dev_ep_trans+0x1b4>)
    eb54:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    eb56:	693b      	ldr	r3, [r7, #16]
    eb58:	7cdb      	ldrb	r3, [r3, #19]
    eb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    eb5e:	b2db      	uxtb	r3, r3
    eb60:	2b00      	cmp	r3, #0
    eb62:	d006      	beq.n	eb72 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    eb64:	f107 0308 	add.w	r3, r7, #8
    eb68:	4618      	mov	r0, r3
    eb6a:	4b29      	ldr	r3, [pc, #164]	; (ec10 <_usb_d_dev_ep_trans+0x1b8>)
    eb6c:	4798      	blx	r3
		return USB_BUSY;
    eb6e:	2301      	movs	r3, #1
    eb70:	e043      	b.n	ebfa <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    eb72:	693a      	ldr	r2, [r7, #16]
    eb74:	7cd3      	ldrb	r3, [r2, #19]
    eb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb7a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    eb7c:	f107 0308 	add.w	r3, r7, #8
    eb80:	4618      	mov	r0, r3
    eb82:	4b23      	ldr	r3, [pc, #140]	; (ec10 <_usb_d_dev_ep_trans+0x1b8>)
    eb84:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    eb86:	687b      	ldr	r3, [r7, #4]
    eb88:	681a      	ldr	r2, [r3, #0]
    eb8a:	693b      	ldr	r3, [r7, #16]
    eb8c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    eb8e:	687b      	ldr	r3, [r7, #4]
    eb90:	685a      	ldr	r2, [r3, #4]
    eb92:	693b      	ldr	r3, [r7, #16]
    eb94:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    eb96:	693b      	ldr	r3, [r7, #16]
    eb98:	2200      	movs	r2, #0
    eb9a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    eb9c:	693a      	ldr	r2, [r7, #16]
    eb9e:	7cd3      	ldrb	r3, [r2, #19]
    eba0:	7d79      	ldrb	r1, [r7, #21]
    eba2:	f361 13c7 	bfi	r3, r1, #7, #1
    eba6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    eba8:	693a      	ldr	r2, [r7, #16]
    ebaa:	7cd3      	ldrb	r3, [r2, #19]
    ebac:	7df9      	ldrb	r1, [r7, #23]
    ebae:	f361 1345 	bfi	r3, r1, #5, #1
    ebb2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	7a5b      	ldrb	r3, [r3, #9]
    ebb8:	2b00      	cmp	r3, #0
    ebba:	d007      	beq.n	ebcc <_usb_d_dev_ep_trans+0x174>
    ebbc:	7b7b      	ldrb	r3, [r7, #13]
    ebbe:	f083 0301 	eor.w	r3, r3, #1
    ebc2:	b2db      	uxtb	r3, r3
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d001      	beq.n	ebcc <_usb_d_dev_ep_trans+0x174>
    ebc8:	2301      	movs	r3, #1
    ebca:	e000      	b.n	ebce <_usb_d_dev_ep_trans+0x176>
    ebcc:	2300      	movs	r3, #0
    ebce:	b2db      	uxtb	r3, r3
    ebd0:	f003 0301 	and.w	r3, r3, #1
    ebd4:	b2d9      	uxtb	r1, r3
    ebd6:	693a      	ldr	r2, [r7, #16]
    ebd8:	7cd3      	ldrb	r3, [r2, #19]
    ebda:	f361 1304 	bfi	r3, r1, #4, #1
    ebde:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    ebe0:	7d7b      	ldrb	r3, [r7, #21]
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d004      	beq.n	ebf0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    ebe6:	2100      	movs	r1, #0
    ebe8:	6938      	ldr	r0, [r7, #16]
    ebea:	4b0a      	ldr	r3, [pc, #40]	; (ec14 <_usb_d_dev_ep_trans+0x1bc>)
    ebec:	4798      	blx	r3
    ebee:	e003      	b.n	ebf8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ebf0:	2100      	movs	r1, #0
    ebf2:	6938      	ldr	r0, [r7, #16]
    ebf4:	4b08      	ldr	r3, [pc, #32]	; (ec18 <_usb_d_dev_ep_trans+0x1c0>)
    ebf6:	4798      	blx	r3
	}

	return ERR_NONE;
    ebf8:	2300      	movs	r3, #0
}
    ebfa:	4618      	mov	r0, r3
    ebfc:	3718      	adds	r7, #24
    ebfe:	46bd      	mov	sp, r7
    ec00:	bd80      	pop	{r7, pc}
    ec02:	bf00      	nop
    ec04:	0000d2c9 	.word	0x0000d2c9
    ec08:	20041fff 	.word	0x20041fff
    ec0c:	0000f3d1 	.word	0x0000f3d1
    ec10:	0000f3f7 	.word	0x0000f3f7
    ec14:	0000d591 	.word	0x0000d591
    ec18:	0000d7a9 	.word	0x0000d7a9

0000ec1c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ec1c:	b480      	push	{r7}
    ec1e:	b085      	sub	sp, #20
    ec20:	af00      	add	r7, sp, #0
    ec22:	4603      	mov	r3, r0
    ec24:	6039      	str	r1, [r7, #0]
    ec26:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ec28:	683b      	ldr	r3, [r7, #0]
    ec2a:	2b00      	cmp	r3, #0
    ec2c:	d001      	beq.n	ec32 <_usb_d_dev_register_callback+0x16>
    ec2e:	683b      	ldr	r3, [r7, #0]
    ec30:	e000      	b.n	ec34 <_usb_d_dev_register_callback+0x18>
    ec32:	4b0a      	ldr	r3, [pc, #40]	; (ec5c <_usb_d_dev_register_callback+0x40>)
    ec34:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ec36:	79fb      	ldrb	r3, [r7, #7]
    ec38:	2b01      	cmp	r3, #1
    ec3a:	d103      	bne.n	ec44 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ec3c:	4a08      	ldr	r2, [pc, #32]	; (ec60 <_usb_d_dev_register_callback+0x44>)
    ec3e:	68fb      	ldr	r3, [r7, #12]
    ec40:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ec42:	e005      	b.n	ec50 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ec44:	79fb      	ldrb	r3, [r7, #7]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d102      	bne.n	ec50 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ec4a:	4a05      	ldr	r2, [pc, #20]	; (ec60 <_usb_d_dev_register_callback+0x44>)
    ec4c:	68fb      	ldr	r3, [r7, #12]
    ec4e:	6013      	str	r3, [r2, #0]
}
    ec50:	bf00      	nop
    ec52:	3714      	adds	r7, #20
    ec54:	46bd      	mov	sp, r7
    ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
    ec5a:	4770      	bx	lr
    ec5c:	0000cb51 	.word	0x0000cb51
    ec60:	20001e30 	.word	0x20001e30

0000ec64 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ec64:	b480      	push	{r7}
    ec66:	b085      	sub	sp, #20
    ec68:	af00      	add	r7, sp, #0
    ec6a:	4603      	mov	r3, r0
    ec6c:	6039      	str	r1, [r7, #0]
    ec6e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ec70:	683b      	ldr	r3, [r7, #0]
    ec72:	2b00      	cmp	r3, #0
    ec74:	d001      	beq.n	ec7a <_usb_d_dev_register_ep_callback+0x16>
    ec76:	683b      	ldr	r3, [r7, #0]
    ec78:	e000      	b.n	ec7c <_usb_d_dev_register_ep_callback+0x18>
    ec7a:	4b0e      	ldr	r3, [pc, #56]	; (ecb4 <_usb_d_dev_register_ep_callback+0x50>)
    ec7c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ec7e:	79fb      	ldrb	r3, [r7, #7]
    ec80:	2b00      	cmp	r3, #0
    ec82:	d103      	bne.n	ec8c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ec84:	4a0c      	ldr	r2, [pc, #48]	; (ecb8 <_usb_d_dev_register_ep_callback+0x54>)
    ec86:	68fb      	ldr	r3, [r7, #12]
    ec88:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    ec8a:	e00c      	b.n	eca6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    ec8c:	79fb      	ldrb	r3, [r7, #7]
    ec8e:	2b01      	cmp	r3, #1
    ec90:	d103      	bne.n	ec9a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    ec92:	4a09      	ldr	r2, [pc, #36]	; (ecb8 <_usb_d_dev_register_ep_callback+0x54>)
    ec94:	68fb      	ldr	r3, [r7, #12]
    ec96:	60d3      	str	r3, [r2, #12]
}
    ec98:	e005      	b.n	eca6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ec9a:	79fb      	ldrb	r3, [r7, #7]
    ec9c:	2b02      	cmp	r3, #2
    ec9e:	d102      	bne.n	eca6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    eca0:	4a05      	ldr	r2, [pc, #20]	; (ecb8 <_usb_d_dev_register_ep_callback+0x54>)
    eca2:	68fb      	ldr	r3, [r7, #12]
    eca4:	6113      	str	r3, [r2, #16]
}
    eca6:	bf00      	nop
    eca8:	3714      	adds	r7, #20
    ecaa:	46bd      	mov	sp, r7
    ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecb0:	4770      	bx	lr
    ecb2:	bf00      	nop
    ecb4:	0000cb51 	.word	0x0000cb51
    ecb8:	20001e30 	.word	0x20001e30

0000ecbc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ecbc:	b580      	push	{r7, lr}
    ecbe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ecc0:	4b01      	ldr	r3, [pc, #4]	; (ecc8 <USB_0_Handler+0xc>)
    ecc2:	4798      	blx	r3
}
    ecc4:	bf00      	nop
    ecc6:	bd80      	pop	{r7, pc}
    ecc8:	0000df81 	.word	0x0000df81

0000eccc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    eccc:	b580      	push	{r7, lr}
    ecce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ecd0:	4b01      	ldr	r3, [pc, #4]	; (ecd8 <USB_1_Handler+0xc>)
    ecd2:	4798      	blx	r3
}
    ecd4:	bf00      	nop
    ecd6:	bd80      	pop	{r7, pc}
    ecd8:	0000df81 	.word	0x0000df81

0000ecdc <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ecdc:	b580      	push	{r7, lr}
    ecde:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ece0:	4b01      	ldr	r3, [pc, #4]	; (ece8 <USB_2_Handler+0xc>)
    ece2:	4798      	blx	r3
}
    ece4:	bf00      	nop
    ece6:	bd80      	pop	{r7, pc}
    ece8:	0000df81 	.word	0x0000df81

0000ecec <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ecec:	b580      	push	{r7, lr}
    ecee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ecf0:	4b01      	ldr	r3, [pc, #4]	; (ecf8 <USB_3_Handler+0xc>)
    ecf2:	4798      	blx	r3
}
    ecf4:	bf00      	nop
    ecf6:	bd80      	pop	{r7, pc}
    ecf8:	0000df81 	.word	0x0000df81

0000ecfc <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ecfc:	b480      	push	{r7}
    ecfe:	b083      	sub	sp, #12
    ed00:	af00      	add	r7, sp, #0
    ed02:	6078      	str	r0, [r7, #4]
    ed04:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ed06:	bf00      	nop
    ed08:	687b      	ldr	r3, [r7, #4]
    ed0a:	689a      	ldr	r2, [r3, #8]
    ed0c:	683b      	ldr	r3, [r7, #0]
    ed0e:	4013      	ands	r3, r2
    ed10:	2b00      	cmp	r3, #0
    ed12:	d1f9      	bne.n	ed08 <hri_wdt_wait_for_sync+0xc>
	};
}
    ed14:	bf00      	nop
    ed16:	370c      	adds	r7, #12
    ed18:	46bd      	mov	sp, r7
    ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed1e:	4770      	bx	lr

0000ed20 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ed20:	b580      	push	{r7, lr}
    ed22:	b084      	sub	sp, #16
    ed24:	af00      	add	r7, sp, #0
    ed26:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ed28:	210e      	movs	r1, #14
    ed2a:	6878      	ldr	r0, [r7, #4]
    ed2c:	4b0a      	ldr	r3, [pc, #40]	; (ed58 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ed2e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ed30:	687b      	ldr	r3, [r7, #4]
    ed32:	781b      	ldrb	r3, [r3, #0]
    ed34:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ed36:	7bfb      	ldrb	r3, [r7, #15]
    ed38:	085b      	lsrs	r3, r3, #1
    ed3a:	b2db      	uxtb	r3, r3
    ed3c:	f003 0301 	and.w	r3, r3, #1
    ed40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ed42:	7bfb      	ldrb	r3, [r7, #15]
    ed44:	2b00      	cmp	r3, #0
    ed46:	bf14      	ite	ne
    ed48:	2301      	movne	r3, #1
    ed4a:	2300      	moveq	r3, #0
    ed4c:	b2db      	uxtb	r3, r3
}
    ed4e:	4618      	mov	r0, r3
    ed50:	3710      	adds	r7, #16
    ed52:	46bd      	mov	sp, r7
    ed54:	bd80      	pop	{r7, pc}
    ed56:	bf00      	nop
    ed58:	0000ecfd 	.word	0x0000ecfd

0000ed5c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ed5c:	b580      	push	{r7, lr}
    ed5e:	b082      	sub	sp, #8
    ed60:	af00      	add	r7, sp, #0
    ed62:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ed64:	687b      	ldr	r3, [r7, #4]
    ed66:	781b      	ldrb	r3, [r3, #0]
    ed68:	b2db      	uxtb	r3, r3
    ed6a:	f023 0304 	bic.w	r3, r3, #4
    ed6e:	b2da      	uxtb	r2, r3
    ed70:	687b      	ldr	r3, [r7, #4]
    ed72:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ed74:	210e      	movs	r1, #14
    ed76:	6878      	ldr	r0, [r7, #4]
    ed78:	4b02      	ldr	r3, [pc, #8]	; (ed84 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ed7a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ed7c:	bf00      	nop
    ed7e:	3708      	adds	r7, #8
    ed80:	46bd      	mov	sp, r7
    ed82:	bd80      	pop	{r7, pc}
    ed84:	0000ecfd 	.word	0x0000ecfd

0000ed88 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ed88:	b580      	push	{r7, lr}
    ed8a:	b084      	sub	sp, #16
    ed8c:	af00      	add	r7, sp, #0
    ed8e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ed90:	210e      	movs	r1, #14
    ed92:	6878      	ldr	r0, [r7, #4]
    ed94:	4b08      	ldr	r3, [pc, #32]	; (edb8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ed96:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ed98:	687b      	ldr	r3, [r7, #4]
    ed9a:	781b      	ldrb	r3, [r3, #0]
    ed9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ed9e:	7bfb      	ldrb	r3, [r7, #15]
    eda0:	09db      	lsrs	r3, r3, #7
    eda2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    eda4:	7bfb      	ldrb	r3, [r7, #15]
    eda6:	2b00      	cmp	r3, #0
    eda8:	bf14      	ite	ne
    edaa:	2301      	movne	r3, #1
    edac:	2300      	moveq	r3, #0
    edae:	b2db      	uxtb	r3, r3
}
    edb0:	4618      	mov	r0, r3
    edb2:	3710      	adds	r7, #16
    edb4:	46bd      	mov	sp, r7
    edb6:	bd80      	pop	{r7, pc}
    edb8:	0000ecfd 	.word	0x0000ecfd

0000edbc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    edbc:	b480      	push	{r7}
    edbe:	b085      	sub	sp, #20
    edc0:	af00      	add	r7, sp, #0
    edc2:	6078      	str	r0, [r7, #4]
    edc4:	460b      	mov	r3, r1
    edc6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    edc8:	687b      	ldr	r3, [r7, #4]
    edca:	785b      	ldrb	r3, [r3, #1]
    edcc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    edce:	7bfb      	ldrb	r3, [r7, #15]
    edd0:	f023 030f 	bic.w	r3, r3, #15
    edd4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    edd6:	78fb      	ldrb	r3, [r7, #3]
    edd8:	f003 030f 	and.w	r3, r3, #15
    eddc:	b2da      	uxtb	r2, r3
    edde:	7bfb      	ldrb	r3, [r7, #15]
    ede0:	4313      	orrs	r3, r2
    ede2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ede4:	687b      	ldr	r3, [r7, #4]
    ede6:	7bfa      	ldrb	r2, [r7, #15]
    ede8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    edea:	bf00      	nop
    edec:	3714      	adds	r7, #20
    edee:	46bd      	mov	sp, r7
    edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    edf4:	4770      	bx	lr
	...

0000edf8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    edf8:	b580      	push	{r7, lr}
    edfa:	b082      	sub	sp, #8
    edfc:	af00      	add	r7, sp, #0
    edfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ee00:	687b      	ldr	r3, [r7, #4]
    ee02:	2b00      	cmp	r3, #0
    ee04:	d005      	beq.n	ee12 <_wdt_init+0x1a>
    ee06:	687b      	ldr	r3, [r7, #4]
    ee08:	681b      	ldr	r3, [r3, #0]
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d001      	beq.n	ee12 <_wdt_init+0x1a>
    ee0e:	2301      	movs	r3, #1
    ee10:	e000      	b.n	ee14 <_wdt_init+0x1c>
    ee12:	2300      	movs	r3, #0
    ee14:	f003 0301 	and.w	r3, r3, #1
    ee18:	b2db      	uxtb	r3, r3
    ee1a:	2250      	movs	r2, #80	; 0x50
    ee1c:	4913      	ldr	r1, [pc, #76]	; (ee6c <_wdt_init+0x74>)
    ee1e:	4618      	mov	r0, r3
    ee20:	4b13      	ldr	r3, [pc, #76]	; (ee70 <_wdt_init+0x78>)
    ee22:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ee24:	687b      	ldr	r3, [r7, #4]
    ee26:	681b      	ldr	r3, [r3, #0]
    ee28:	4618      	mov	r0, r3
    ee2a:	4b12      	ldr	r3, [pc, #72]	; (ee74 <_wdt_init+0x7c>)
    ee2c:	4798      	blx	r3
    ee2e:	4603      	mov	r3, r0
    ee30:	2b00      	cmp	r3, #0
    ee32:	d107      	bne.n	ee44 <_wdt_init+0x4c>
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	681b      	ldr	r3, [r3, #0]
    ee38:	4618      	mov	r0, r3
    ee3a:	4b0f      	ldr	r3, [pc, #60]	; (ee78 <_wdt_init+0x80>)
    ee3c:	4798      	blx	r3
    ee3e:	4603      	mov	r3, r0
    ee40:	2b00      	cmp	r3, #0
    ee42:	d002      	beq.n	ee4a <_wdt_init+0x52>
		return ERR_DENIED;
    ee44:	f06f 0310 	mvn.w	r3, #16
    ee48:	e00b      	b.n	ee62 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ee4a:	687b      	ldr	r3, [r7, #4]
    ee4c:	681b      	ldr	r3, [r3, #0]
    ee4e:	4618      	mov	r0, r3
    ee50:	4b0a      	ldr	r3, [pc, #40]	; (ee7c <_wdt_init+0x84>)
    ee52:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ee54:	687b      	ldr	r3, [r7, #4]
    ee56:	681b      	ldr	r3, [r3, #0]
    ee58:	210b      	movs	r1, #11
    ee5a:	4618      	mov	r0, r3
    ee5c:	4b08      	ldr	r3, [pc, #32]	; (ee80 <_wdt_init+0x88>)
    ee5e:	4798      	blx	r3
	}

	return ERR_NONE;
    ee60:	2300      	movs	r3, #0
}
    ee62:	4618      	mov	r0, r3
    ee64:	3708      	adds	r7, #8
    ee66:	46bd      	mov	sp, r7
    ee68:	bd80      	pop	{r7, pc}
    ee6a:	bf00      	nop
    ee6c:	00012d54 	.word	0x00012d54
    ee70:	00007361 	.word	0x00007361
    ee74:	0000ed89 	.word	0x0000ed89
    ee78:	0000ed21 	.word	0x0000ed21
    ee7c:	0000ed5d 	.word	0x0000ed5d
    ee80:	0000edbd 	.word	0x0000edbd

0000ee84 <hri_port_set_DIR_reg>:
{
    ee84:	b480      	push	{r7}
    ee86:	b085      	sub	sp, #20
    ee88:	af00      	add	r7, sp, #0
    ee8a:	60f8      	str	r0, [r7, #12]
    ee8c:	460b      	mov	r3, r1
    ee8e:	607a      	str	r2, [r7, #4]
    ee90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ee92:	7afb      	ldrb	r3, [r7, #11]
    ee94:	68fa      	ldr	r2, [r7, #12]
    ee96:	01db      	lsls	r3, r3, #7
    ee98:	4413      	add	r3, r2
    ee9a:	3308      	adds	r3, #8
    ee9c:	687a      	ldr	r2, [r7, #4]
    ee9e:	601a      	str	r2, [r3, #0]
}
    eea0:	bf00      	nop
    eea2:	3714      	adds	r7, #20
    eea4:	46bd      	mov	sp, r7
    eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    eeaa:	4770      	bx	lr

0000eeac <hri_port_clear_DIR_reg>:
{
    eeac:	b480      	push	{r7}
    eeae:	b085      	sub	sp, #20
    eeb0:	af00      	add	r7, sp, #0
    eeb2:	60f8      	str	r0, [r7, #12]
    eeb4:	460b      	mov	r3, r1
    eeb6:	607a      	str	r2, [r7, #4]
    eeb8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    eeba:	7afb      	ldrb	r3, [r7, #11]
    eebc:	68fa      	ldr	r2, [r7, #12]
    eebe:	01db      	lsls	r3, r3, #7
    eec0:	4413      	add	r3, r2
    eec2:	3304      	adds	r3, #4
    eec4:	687a      	ldr	r2, [r7, #4]
    eec6:	601a      	str	r2, [r3, #0]
}
    eec8:	bf00      	nop
    eeca:	3714      	adds	r7, #20
    eecc:	46bd      	mov	sp, r7
    eece:	f85d 7b04 	ldr.w	r7, [sp], #4
    eed2:	4770      	bx	lr

0000eed4 <hri_port_set_OUT_reg>:
{
    eed4:	b480      	push	{r7}
    eed6:	b085      	sub	sp, #20
    eed8:	af00      	add	r7, sp, #0
    eeda:	60f8      	str	r0, [r7, #12]
    eedc:	460b      	mov	r3, r1
    eede:	607a      	str	r2, [r7, #4]
    eee0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    eee2:	7afb      	ldrb	r3, [r7, #11]
    eee4:	68fa      	ldr	r2, [r7, #12]
    eee6:	01db      	lsls	r3, r3, #7
    eee8:	4413      	add	r3, r2
    eeea:	3318      	adds	r3, #24
    eeec:	687a      	ldr	r2, [r7, #4]
    eeee:	601a      	str	r2, [r3, #0]
}
    eef0:	bf00      	nop
    eef2:	3714      	adds	r7, #20
    eef4:	46bd      	mov	sp, r7
    eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    eefa:	4770      	bx	lr

0000eefc <hri_port_clear_OUT_reg>:
{
    eefc:	b480      	push	{r7}
    eefe:	b085      	sub	sp, #20
    ef00:	af00      	add	r7, sp, #0
    ef02:	60f8      	str	r0, [r7, #12]
    ef04:	460b      	mov	r3, r1
    ef06:	607a      	str	r2, [r7, #4]
    ef08:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ef0a:	7afb      	ldrb	r3, [r7, #11]
    ef0c:	68fa      	ldr	r2, [r7, #12]
    ef0e:	01db      	lsls	r3, r3, #7
    ef10:	4413      	add	r3, r2
    ef12:	3314      	adds	r3, #20
    ef14:	687a      	ldr	r2, [r7, #4]
    ef16:	601a      	str	r2, [r3, #0]
}
    ef18:	bf00      	nop
    ef1a:	3714      	adds	r7, #20
    ef1c:	46bd      	mov	sp, r7
    ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef22:	4770      	bx	lr

0000ef24 <hri_port_write_PMUX_PMUXE_bf>:
{
    ef24:	b480      	push	{r7}
    ef26:	b085      	sub	sp, #20
    ef28:	af00      	add	r7, sp, #0
    ef2a:	6078      	str	r0, [r7, #4]
    ef2c:	4608      	mov	r0, r1
    ef2e:	4611      	mov	r1, r2
    ef30:	461a      	mov	r2, r3
    ef32:	4603      	mov	r3, r0
    ef34:	70fb      	strb	r3, [r7, #3]
    ef36:	460b      	mov	r3, r1
    ef38:	70bb      	strb	r3, [r7, #2]
    ef3a:	4613      	mov	r3, r2
    ef3c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ef3e:	78fa      	ldrb	r2, [r7, #3]
    ef40:	78bb      	ldrb	r3, [r7, #2]
    ef42:	6879      	ldr	r1, [r7, #4]
    ef44:	01d2      	lsls	r2, r2, #7
    ef46:	440a      	add	r2, r1
    ef48:	4413      	add	r3, r2
    ef4a:	3330      	adds	r3, #48	; 0x30
    ef4c:	781b      	ldrb	r3, [r3, #0]
    ef4e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ef50:	7bfb      	ldrb	r3, [r7, #15]
    ef52:	f023 030f 	bic.w	r3, r3, #15
    ef56:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ef58:	787b      	ldrb	r3, [r7, #1]
    ef5a:	f003 030f 	and.w	r3, r3, #15
    ef5e:	b2da      	uxtb	r2, r3
    ef60:	7bfb      	ldrb	r3, [r7, #15]
    ef62:	4313      	orrs	r3, r2
    ef64:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ef66:	78fa      	ldrb	r2, [r7, #3]
    ef68:	78bb      	ldrb	r3, [r7, #2]
    ef6a:	6879      	ldr	r1, [r7, #4]
    ef6c:	01d2      	lsls	r2, r2, #7
    ef6e:	440a      	add	r2, r1
    ef70:	4413      	add	r3, r2
    ef72:	3330      	adds	r3, #48	; 0x30
    ef74:	7bfa      	ldrb	r2, [r7, #15]
    ef76:	701a      	strb	r2, [r3, #0]
}
    ef78:	bf00      	nop
    ef7a:	3714      	adds	r7, #20
    ef7c:	46bd      	mov	sp, r7
    ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ef82:	4770      	bx	lr

0000ef84 <hri_port_write_PMUX_PMUXO_bf>:
{
    ef84:	b480      	push	{r7}
    ef86:	b085      	sub	sp, #20
    ef88:	af00      	add	r7, sp, #0
    ef8a:	6078      	str	r0, [r7, #4]
    ef8c:	4608      	mov	r0, r1
    ef8e:	4611      	mov	r1, r2
    ef90:	461a      	mov	r2, r3
    ef92:	4603      	mov	r3, r0
    ef94:	70fb      	strb	r3, [r7, #3]
    ef96:	460b      	mov	r3, r1
    ef98:	70bb      	strb	r3, [r7, #2]
    ef9a:	4613      	mov	r3, r2
    ef9c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ef9e:	78fa      	ldrb	r2, [r7, #3]
    efa0:	78bb      	ldrb	r3, [r7, #2]
    efa2:	6879      	ldr	r1, [r7, #4]
    efa4:	01d2      	lsls	r2, r2, #7
    efa6:	440a      	add	r2, r1
    efa8:	4413      	add	r3, r2
    efaa:	3330      	adds	r3, #48	; 0x30
    efac:	781b      	ldrb	r3, [r3, #0]
    efae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    efb0:	7bfb      	ldrb	r3, [r7, #15]
    efb2:	f003 030f 	and.w	r3, r3, #15
    efb6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    efb8:	787b      	ldrb	r3, [r7, #1]
    efba:	011b      	lsls	r3, r3, #4
    efbc:	b2da      	uxtb	r2, r3
    efbe:	7bfb      	ldrb	r3, [r7, #15]
    efc0:	4313      	orrs	r3, r2
    efc2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    efc4:	78fa      	ldrb	r2, [r7, #3]
    efc6:	78bb      	ldrb	r3, [r7, #2]
    efc8:	6879      	ldr	r1, [r7, #4]
    efca:	01d2      	lsls	r2, r2, #7
    efcc:	440a      	add	r2, r1
    efce:	4413      	add	r3, r2
    efd0:	3330      	adds	r3, #48	; 0x30
    efd2:	7bfa      	ldrb	r2, [r7, #15]
    efd4:	701a      	strb	r2, [r3, #0]
}
    efd6:	bf00      	nop
    efd8:	3714      	adds	r7, #20
    efda:	46bd      	mov	sp, r7
    efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    efe0:	4770      	bx	lr

0000efe2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    efe2:	b480      	push	{r7}
    efe4:	b085      	sub	sp, #20
    efe6:	af00      	add	r7, sp, #0
    efe8:	6078      	str	r0, [r7, #4]
    efea:	4608      	mov	r0, r1
    efec:	4611      	mov	r1, r2
    efee:	461a      	mov	r2, r3
    eff0:	4603      	mov	r3, r0
    eff2:	70fb      	strb	r3, [r7, #3]
    eff4:	460b      	mov	r3, r1
    eff6:	70bb      	strb	r3, [r7, #2]
    eff8:	4613      	mov	r3, r2
    effa:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    effc:	78fa      	ldrb	r2, [r7, #3]
    effe:	78bb      	ldrb	r3, [r7, #2]
    f000:	6879      	ldr	r1, [r7, #4]
    f002:	01d2      	lsls	r2, r2, #7
    f004:	440a      	add	r2, r1
    f006:	4413      	add	r3, r2
    f008:	3340      	adds	r3, #64	; 0x40
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    f00e:	7bfb      	ldrb	r3, [r7, #15]
    f010:	f023 0301 	bic.w	r3, r3, #1
    f014:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    f016:	787a      	ldrb	r2, [r7, #1]
    f018:	7bfb      	ldrb	r3, [r7, #15]
    f01a:	4313      	orrs	r3, r2
    f01c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f01e:	78fa      	ldrb	r2, [r7, #3]
    f020:	78bb      	ldrb	r3, [r7, #2]
    f022:	6879      	ldr	r1, [r7, #4]
    f024:	01d2      	lsls	r2, r2, #7
    f026:	440a      	add	r2, r1
    f028:	4413      	add	r3, r2
    f02a:	3340      	adds	r3, #64	; 0x40
    f02c:	7bfa      	ldrb	r2, [r7, #15]
    f02e:	701a      	strb	r2, [r3, #0]
}
    f030:	bf00      	nop
    f032:	3714      	adds	r7, #20
    f034:	46bd      	mov	sp, r7
    f036:	f85d 7b04 	ldr.w	r7, [sp], #4
    f03a:	4770      	bx	lr

0000f03c <hri_port_write_WRCONFIG_reg>:
{
    f03c:	b480      	push	{r7}
    f03e:	b085      	sub	sp, #20
    f040:	af00      	add	r7, sp, #0
    f042:	60f8      	str	r0, [r7, #12]
    f044:	460b      	mov	r3, r1
    f046:	607a      	str	r2, [r7, #4]
    f048:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    f04a:	7afb      	ldrb	r3, [r7, #11]
    f04c:	68fa      	ldr	r2, [r7, #12]
    f04e:	01db      	lsls	r3, r3, #7
    f050:	4413      	add	r3, r2
    f052:	3328      	adds	r3, #40	; 0x28
    f054:	687a      	ldr	r2, [r7, #4]
    f056:	601a      	str	r2, [r3, #0]
}
    f058:	bf00      	nop
    f05a:	3714      	adds	r7, #20
    f05c:	46bd      	mov	sp, r7
    f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f062:	4770      	bx	lr

0000f064 <_gpio_set_direction>:
{
    f064:	b580      	push	{r7, lr}
    f066:	b082      	sub	sp, #8
    f068:	af00      	add	r7, sp, #0
    f06a:	4603      	mov	r3, r0
    f06c:	6039      	str	r1, [r7, #0]
    f06e:	71fb      	strb	r3, [r7, #7]
    f070:	4613      	mov	r3, r2
    f072:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    f074:	79bb      	ldrb	r3, [r7, #6]
    f076:	2b01      	cmp	r3, #1
    f078:	d01c      	beq.n	f0b4 <_gpio_set_direction+0x50>
    f07a:	2b02      	cmp	r3, #2
    f07c:	d037      	beq.n	f0ee <_gpio_set_direction+0x8a>
    f07e:	2b00      	cmp	r3, #0
    f080:	d14e      	bne.n	f120 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    f082:	79fb      	ldrb	r3, [r7, #7]
    f084:	683a      	ldr	r2, [r7, #0]
    f086:	4619      	mov	r1, r3
    f088:	482a      	ldr	r0, [pc, #168]	; (f134 <_gpio_set_direction+0xd0>)
    f08a:	4b2b      	ldr	r3, [pc, #172]	; (f138 <_gpio_set_direction+0xd4>)
    f08c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    f08e:	683b      	ldr	r3, [r7, #0]
    f090:	b29b      	uxth	r3, r3
    f092:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    f096:	79fb      	ldrb	r3, [r7, #7]
    f098:	4619      	mov	r1, r3
    f09a:	4826      	ldr	r0, [pc, #152]	; (f134 <_gpio_set_direction+0xd0>)
    f09c:	4b27      	ldr	r3, [pc, #156]	; (f13c <_gpio_set_direction+0xd8>)
    f09e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    f0a0:	683b      	ldr	r3, [r7, #0]
    f0a2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    f0a4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    f0a8:	79fb      	ldrb	r3, [r7, #7]
    f0aa:	4619      	mov	r1, r3
    f0ac:	4821      	ldr	r0, [pc, #132]	; (f134 <_gpio_set_direction+0xd0>)
    f0ae:	4b23      	ldr	r3, [pc, #140]	; (f13c <_gpio_set_direction+0xd8>)
    f0b0:	4798      	blx	r3
		break;
    f0b2:	e03a      	b.n	f12a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    f0b4:	79fb      	ldrb	r3, [r7, #7]
    f0b6:	683a      	ldr	r2, [r7, #0]
    f0b8:	4619      	mov	r1, r3
    f0ba:	481e      	ldr	r0, [pc, #120]	; (f134 <_gpio_set_direction+0xd0>)
    f0bc:	4b1e      	ldr	r3, [pc, #120]	; (f138 <_gpio_set_direction+0xd4>)
    f0be:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    f0c0:	683b      	ldr	r3, [r7, #0]
    f0c2:	b29b      	uxth	r3, r3
    f0c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    f0c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f0cc:	79f9      	ldrb	r1, [r7, #7]
    f0ce:	461a      	mov	r2, r3
    f0d0:	4818      	ldr	r0, [pc, #96]	; (f134 <_gpio_set_direction+0xd0>)
    f0d2:	4b1a      	ldr	r3, [pc, #104]	; (f13c <_gpio_set_direction+0xd8>)
    f0d4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    f0d6:	683b      	ldr	r3, [r7, #0]
    f0d8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    f0da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    f0de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f0e2:	79f9      	ldrb	r1, [r7, #7]
    f0e4:	461a      	mov	r2, r3
    f0e6:	4813      	ldr	r0, [pc, #76]	; (f134 <_gpio_set_direction+0xd0>)
    f0e8:	4b14      	ldr	r3, [pc, #80]	; (f13c <_gpio_set_direction+0xd8>)
    f0ea:	4798      	blx	r3
		break;
    f0ec:	e01d      	b.n	f12a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    f0ee:	79fb      	ldrb	r3, [r7, #7]
    f0f0:	683a      	ldr	r2, [r7, #0]
    f0f2:	4619      	mov	r1, r3
    f0f4:	480f      	ldr	r0, [pc, #60]	; (f134 <_gpio_set_direction+0xd0>)
    f0f6:	4b12      	ldr	r3, [pc, #72]	; (f140 <_gpio_set_direction+0xdc>)
    f0f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    f0fa:	683b      	ldr	r3, [r7, #0]
    f0fc:	b29b      	uxth	r3, r3
    f0fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    f102:	79fb      	ldrb	r3, [r7, #7]
    f104:	4619      	mov	r1, r3
    f106:	480b      	ldr	r0, [pc, #44]	; (f134 <_gpio_set_direction+0xd0>)
    f108:	4b0c      	ldr	r3, [pc, #48]	; (f13c <_gpio_set_direction+0xd8>)
    f10a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    f10c:	683b      	ldr	r3, [r7, #0]
    f10e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    f110:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    f114:	79fb      	ldrb	r3, [r7, #7]
    f116:	4619      	mov	r1, r3
    f118:	4806      	ldr	r0, [pc, #24]	; (f134 <_gpio_set_direction+0xd0>)
    f11a:	4b08      	ldr	r3, [pc, #32]	; (f13c <_gpio_set_direction+0xd8>)
    f11c:	4798      	blx	r3
		break;
    f11e:	e004      	b.n	f12a <_gpio_set_direction+0xc6>
		ASSERT(false);
    f120:	2246      	movs	r2, #70	; 0x46
    f122:	4908      	ldr	r1, [pc, #32]	; (f144 <_gpio_set_direction+0xe0>)
    f124:	2000      	movs	r0, #0
    f126:	4b08      	ldr	r3, [pc, #32]	; (f148 <_gpio_set_direction+0xe4>)
    f128:	4798      	blx	r3
}
    f12a:	bf00      	nop
    f12c:	3708      	adds	r7, #8
    f12e:	46bd      	mov	sp, r7
    f130:	bd80      	pop	{r7, pc}
    f132:	bf00      	nop
    f134:	41008000 	.word	0x41008000
    f138:	0000eead 	.word	0x0000eead
    f13c:	0000f03d 	.word	0x0000f03d
    f140:	0000ee85 	.word	0x0000ee85
    f144:	00012d6c 	.word	0x00012d6c
    f148:	00007361 	.word	0x00007361

0000f14c <_gpio_set_level>:
{
    f14c:	b580      	push	{r7, lr}
    f14e:	b082      	sub	sp, #8
    f150:	af00      	add	r7, sp, #0
    f152:	4603      	mov	r3, r0
    f154:	6039      	str	r1, [r7, #0]
    f156:	71fb      	strb	r3, [r7, #7]
    f158:	4613      	mov	r3, r2
    f15a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    f15c:	79bb      	ldrb	r3, [r7, #6]
    f15e:	2b00      	cmp	r3, #0
    f160:	d006      	beq.n	f170 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    f162:	79fb      	ldrb	r3, [r7, #7]
    f164:	683a      	ldr	r2, [r7, #0]
    f166:	4619      	mov	r1, r3
    f168:	4806      	ldr	r0, [pc, #24]	; (f184 <_gpio_set_level+0x38>)
    f16a:	4b07      	ldr	r3, [pc, #28]	; (f188 <_gpio_set_level+0x3c>)
    f16c:	4798      	blx	r3
}
    f16e:	e005      	b.n	f17c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    f170:	79fb      	ldrb	r3, [r7, #7]
    f172:	683a      	ldr	r2, [r7, #0]
    f174:	4619      	mov	r1, r3
    f176:	4803      	ldr	r0, [pc, #12]	; (f184 <_gpio_set_level+0x38>)
    f178:	4b04      	ldr	r3, [pc, #16]	; (f18c <_gpio_set_level+0x40>)
    f17a:	4798      	blx	r3
}
    f17c:	bf00      	nop
    f17e:	3708      	adds	r7, #8
    f180:	46bd      	mov	sp, r7
    f182:	bd80      	pop	{r7, pc}
    f184:	41008000 	.word	0x41008000
    f188:	0000eed5 	.word	0x0000eed5
    f18c:	0000eefd 	.word	0x0000eefd

0000f190 <_gpio_set_pin_function>:
{
    f190:	b590      	push	{r4, r7, lr}
    f192:	b085      	sub	sp, #20
    f194:	af00      	add	r7, sp, #0
    f196:	6078      	str	r0, [r7, #4]
    f198:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    f19a:	687b      	ldr	r3, [r7, #4]
    f19c:	095b      	lsrs	r3, r3, #5
    f19e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    f1a0:	687b      	ldr	r3, [r7, #4]
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	f003 031f 	and.w	r3, r3, #31
    f1a8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    f1aa:	683b      	ldr	r3, [r7, #0]
    f1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    f1b0:	d106      	bne.n	f1c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    f1b2:	7bba      	ldrb	r2, [r7, #14]
    f1b4:	7bf9      	ldrb	r1, [r7, #15]
    f1b6:	2300      	movs	r3, #0
    f1b8:	4812      	ldr	r0, [pc, #72]	; (f204 <_gpio_set_pin_function+0x74>)
    f1ba:	4c13      	ldr	r4, [pc, #76]	; (f208 <_gpio_set_pin_function+0x78>)
    f1bc:	47a0      	blx	r4
}
    f1be:	e01d      	b.n	f1fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    f1c0:	7bba      	ldrb	r2, [r7, #14]
    f1c2:	7bf9      	ldrb	r1, [r7, #15]
    f1c4:	2301      	movs	r3, #1
    f1c6:	480f      	ldr	r0, [pc, #60]	; (f204 <_gpio_set_pin_function+0x74>)
    f1c8:	4c0f      	ldr	r4, [pc, #60]	; (f208 <_gpio_set_pin_function+0x78>)
    f1ca:	47a0      	blx	r4
		if (pin & 1) {
    f1cc:	7bbb      	ldrb	r3, [r7, #14]
    f1ce:	f003 0301 	and.w	r3, r3, #1
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d009      	beq.n	f1ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    f1d6:	7bbb      	ldrb	r3, [r7, #14]
    f1d8:	085b      	lsrs	r3, r3, #1
    f1da:	b2da      	uxtb	r2, r3
    f1dc:	683b      	ldr	r3, [r7, #0]
    f1de:	b2db      	uxtb	r3, r3
    f1e0:	7bf9      	ldrb	r1, [r7, #15]
    f1e2:	4808      	ldr	r0, [pc, #32]	; (f204 <_gpio_set_pin_function+0x74>)
    f1e4:	4c09      	ldr	r4, [pc, #36]	; (f20c <_gpio_set_pin_function+0x7c>)
    f1e6:	47a0      	blx	r4
}
    f1e8:	e008      	b.n	f1fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    f1ea:	7bbb      	ldrb	r3, [r7, #14]
    f1ec:	085b      	lsrs	r3, r3, #1
    f1ee:	b2da      	uxtb	r2, r3
    f1f0:	683b      	ldr	r3, [r7, #0]
    f1f2:	b2db      	uxtb	r3, r3
    f1f4:	7bf9      	ldrb	r1, [r7, #15]
    f1f6:	4803      	ldr	r0, [pc, #12]	; (f204 <_gpio_set_pin_function+0x74>)
    f1f8:	4c05      	ldr	r4, [pc, #20]	; (f210 <_gpio_set_pin_function+0x80>)
    f1fa:	47a0      	blx	r4
}
    f1fc:	bf00      	nop
    f1fe:	3714      	adds	r7, #20
    f200:	46bd      	mov	sp, r7
    f202:	bd90      	pop	{r4, r7, pc}
    f204:	41008000 	.word	0x41008000
    f208:	0000efe3 	.word	0x0000efe3
    f20c:	0000ef85 	.word	0x0000ef85
    f210:	0000ef25 	.word	0x0000ef25

0000f214 <gpio_set_pin_function>:
{
    f214:	b580      	push	{r7, lr}
    f216:	b082      	sub	sp, #8
    f218:	af00      	add	r7, sp, #0
    f21a:	6078      	str	r0, [r7, #4]
    f21c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    f21e:	6839      	ldr	r1, [r7, #0]
    f220:	6878      	ldr	r0, [r7, #4]
    f222:	4b03      	ldr	r3, [pc, #12]	; (f230 <gpio_set_pin_function+0x1c>)
    f224:	4798      	blx	r3
}
    f226:	bf00      	nop
    f228:	3708      	adds	r7, #8
    f22a:	46bd      	mov	sp, r7
    f22c:	bd80      	pop	{r7, pc}
    f22e:	bf00      	nop
    f230:	0000f191 	.word	0x0000f191

0000f234 <gpio_set_pin_direction>:
{
    f234:	b580      	push	{r7, lr}
    f236:	b082      	sub	sp, #8
    f238:	af00      	add	r7, sp, #0
    f23a:	4603      	mov	r3, r0
    f23c:	460a      	mov	r2, r1
    f23e:	71fb      	strb	r3, [r7, #7]
    f240:	4613      	mov	r3, r2
    f242:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f244:	79fb      	ldrb	r3, [r7, #7]
    f246:	095b      	lsrs	r3, r3, #5
    f248:	b2d8      	uxtb	r0, r3
    f24a:	79fb      	ldrb	r3, [r7, #7]
    f24c:	f003 031f 	and.w	r3, r3, #31
    f250:	2201      	movs	r2, #1
    f252:	fa02 f303 	lsl.w	r3, r2, r3
    f256:	79ba      	ldrb	r2, [r7, #6]
    f258:	4619      	mov	r1, r3
    f25a:	4b03      	ldr	r3, [pc, #12]	; (f268 <gpio_set_pin_direction+0x34>)
    f25c:	4798      	blx	r3
}
    f25e:	bf00      	nop
    f260:	3708      	adds	r7, #8
    f262:	46bd      	mov	sp, r7
    f264:	bd80      	pop	{r7, pc}
    f266:	bf00      	nop
    f268:	0000f065 	.word	0x0000f065

0000f26c <gpio_set_pin_level>:
{
    f26c:	b580      	push	{r7, lr}
    f26e:	b082      	sub	sp, #8
    f270:	af00      	add	r7, sp, #0
    f272:	4603      	mov	r3, r0
    f274:	460a      	mov	r2, r1
    f276:	71fb      	strb	r3, [r7, #7]
    f278:	4613      	mov	r3, r2
    f27a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    f27c:	79fb      	ldrb	r3, [r7, #7]
    f27e:	095b      	lsrs	r3, r3, #5
    f280:	b2d8      	uxtb	r0, r3
    f282:	79fb      	ldrb	r3, [r7, #7]
    f284:	f003 031f 	and.w	r3, r3, #31
    f288:	2201      	movs	r2, #1
    f28a:	fa02 f303 	lsl.w	r3, r2, r3
    f28e:	79ba      	ldrb	r2, [r7, #6]
    f290:	4619      	mov	r1, r3
    f292:	4b03      	ldr	r3, [pc, #12]	; (f2a0 <gpio_set_pin_level+0x34>)
    f294:	4798      	blx	r3
}
    f296:	bf00      	nop
    f298:	3708      	adds	r7, #8
    f29a:	46bd      	mov	sp, r7
    f29c:	bd80      	pop	{r7, pc}
    f29e:	bf00      	nop
    f2a0:	0000f14d 	.word	0x0000f14d

0000f2a4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    f2a4:	b580      	push	{r7, lr}
    f2a6:	b082      	sub	sp, #8
    f2a8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    f2aa:	2100      	movs	r1, #0
    f2ac:	2008      	movs	r0, #8
    f2ae:	4b24      	ldr	r3, [pc, #144]	; (f340 <QSPI_N25Q256_exit_xip+0x9c>)
    f2b0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    f2b2:	2100      	movs	r1, #0
    f2b4:	202b      	movs	r0, #43	; 0x2b
    f2b6:	4b22      	ldr	r3, [pc, #136]	; (f340 <QSPI_N25Q256_exit_xip+0x9c>)
    f2b8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    f2ba:	2100      	movs	r1, #0
    f2bc:	202a      	movs	r0, #42	; 0x2a
    f2be:	4b20      	ldr	r3, [pc, #128]	; (f340 <QSPI_N25Q256_exit_xip+0x9c>)
    f2c0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    f2c2:	2102      	movs	r1, #2
    f2c4:	2008      	movs	r0, #8
    f2c6:	4b1f      	ldr	r3, [pc, #124]	; (f344 <QSPI_N25Q256_exit_xip+0xa0>)
    f2c8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    f2ca:	2102      	movs	r1, #2
    f2cc:	202b      	movs	r0, #43	; 0x2b
    f2ce:	4b1d      	ldr	r3, [pc, #116]	; (f344 <QSPI_N25Q256_exit_xip+0xa0>)
    f2d0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    f2d2:	2102      	movs	r1, #2
    f2d4:	202a      	movs	r0, #42	; 0x2a
    f2d6:	4b1b      	ldr	r3, [pc, #108]	; (f344 <QSPI_N25Q256_exit_xip+0xa0>)
    f2d8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    f2da:	2101      	movs	r1, #1
    f2dc:	2008      	movs	r0, #8
    f2de:	4b1a      	ldr	r3, [pc, #104]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f2e0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    f2e2:	2100      	movs	r1, #0
    f2e4:	202b      	movs	r0, #43	; 0x2b
    f2e6:	4b18      	ldr	r3, [pc, #96]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f2e8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    f2ea:	2100      	movs	r1, #0
    f2ec:	202a      	movs	r0, #42	; 0x2a
    f2ee:	4b16      	ldr	r3, [pc, #88]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f2f0:	4798      	blx	r3

	delay_us(1);
    f2f2:	2001      	movs	r0, #1
    f2f4:	4b15      	ldr	r3, [pc, #84]	; (f34c <QSPI_N25Q256_exit_xip+0xa8>)
    f2f6:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    f2f8:	2300      	movs	r3, #0
    f2fa:	607b      	str	r3, [r7, #4]
    f2fc:	e010      	b.n	f320 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    f2fe:	2101      	movs	r1, #1
    f300:	202a      	movs	r0, #42	; 0x2a
    f302:	4b11      	ldr	r3, [pc, #68]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f304:	4798      	blx	r3
		delay_us(1);
    f306:	2001      	movs	r0, #1
    f308:	4b10      	ldr	r3, [pc, #64]	; (f34c <QSPI_N25Q256_exit_xip+0xa8>)
    f30a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    f30c:	2100      	movs	r1, #0
    f30e:	202a      	movs	r0, #42	; 0x2a
    f310:	4b0d      	ldr	r3, [pc, #52]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f312:	4798      	blx	r3
		delay_us(1);
    f314:	2001      	movs	r0, #1
    f316:	4b0d      	ldr	r3, [pc, #52]	; (f34c <QSPI_N25Q256_exit_xip+0xa8>)
    f318:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    f31a:	687b      	ldr	r3, [r7, #4]
    f31c:	3301      	adds	r3, #1
    f31e:	607b      	str	r3, [r7, #4]
    f320:	687b      	ldr	r3, [r7, #4]
    f322:	2b06      	cmp	r3, #6
    f324:	ddeb      	ble.n	f2fe <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    f326:	2101      	movs	r1, #1
    f328:	202b      	movs	r0, #43	; 0x2b
    f32a:	4b07      	ldr	r3, [pc, #28]	; (f348 <QSPI_N25Q256_exit_xip+0xa4>)
    f32c:	4798      	blx	r3
	delay_us(1);
    f32e:	2001      	movs	r0, #1
    f330:	4b06      	ldr	r3, [pc, #24]	; (f34c <QSPI_N25Q256_exit_xip+0xa8>)
    f332:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    f334:	4b06      	ldr	r3, [pc, #24]	; (f350 <QSPI_N25Q256_exit_xip+0xac>)
    f336:	4798      	blx	r3
}
    f338:	bf00      	nop
    f33a:	3708      	adds	r7, #8
    f33c:	46bd      	mov	sp, r7
    f33e:	bd80      	pop	{r7, pc}
    f340:	0000f215 	.word	0x0000f215
    f344:	0000f235 	.word	0x0000f235
    f348:	0000f26d 	.word	0x0000f26d
    f34c:	00005fa9 	.word	0x00005fa9
    f350:	00005169 	.word	0x00005169

0000f354 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    f354:	b598      	push	{r3, r4, r7, lr}
    f356:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    f358:	4806      	ldr	r0, [pc, #24]	; (f374 <spi_nor_flash_init+0x20>)
    f35a:	4b07      	ldr	r3, [pc, #28]	; (f378 <spi_nor_flash_init+0x24>)
    f35c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    f35e:	2300      	movs	r3, #0
    f360:	4a06      	ldr	r2, [pc, #24]	; (f37c <spi_nor_flash_init+0x28>)
    f362:	4904      	ldr	r1, [pc, #16]	; (f374 <spi_nor_flash_init+0x20>)
    f364:	4806      	ldr	r0, [pc, #24]	; (f380 <spi_nor_flash_init+0x2c>)
    f366:	4c07      	ldr	r4, [pc, #28]	; (f384 <spi_nor_flash_init+0x30>)
    f368:	47a0      	blx	r4
    f36a:	4602      	mov	r2, r0
    f36c:	4b06      	ldr	r3, [pc, #24]	; (f388 <spi_nor_flash_init+0x34>)
    f36e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    f370:	bf00      	nop
    f372:	bd98      	pop	{r3, r4, r7, pc}
    f374:	200025b4 	.word	0x200025b4
    f378:	00006389 	.word	0x00006389
    f37c:	0000f2a5 	.word	0x0000f2a5
    f380:	20001f98 	.word	0x20001f98
    f384:	0000f7c1 	.word	0x0000f7c1
    f388:	200027b4 	.word	0x200027b4

0000f38c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    f38c:	b580      	push	{r7, lr}
    f38e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    f390:	4805      	ldr	r0, [pc, #20]	; (f3a8 <cdc_device_acm_init+0x1c>)
    f392:	4b06      	ldr	r3, [pc, #24]	; (f3ac <cdc_device_acm_init+0x20>)
    f394:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    f396:	4b06      	ldr	r3, [pc, #24]	; (f3b0 <cdc_device_acm_init+0x24>)
    f398:	4798      	blx	r3

	usbdc_start(single_desc);
    f39a:	4806      	ldr	r0, [pc, #24]	; (f3b4 <cdc_device_acm_init+0x28>)
    f39c:	4b06      	ldr	r3, [pc, #24]	; (f3b8 <cdc_device_acm_init+0x2c>)
    f39e:	4798      	blx	r3
	usbdc_attach();
    f3a0:	4b06      	ldr	r3, [pc, #24]	; (f3bc <cdc_device_acm_init+0x30>)
    f3a2:	4798      	blx	r3
}
    f3a4:	bf00      	nop
    f3a6:	bd80      	pop	{r7, pc}
    f3a8:	20001fe8 	.word	0x20001fe8
    f3ac:	00010dad 	.word	0x00010dad
    f3b0:	00010161 	.word	0x00010161
    f3b4:	200005f8 	.word	0x200005f8
    f3b8:	00010e49 	.word	0x00010e49
    f3bc:	00010e99 	.word	0x00010e99

0000f3c0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    f3c0:	b580      	push	{r7, lr}
    f3c2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    f3c4:	4b01      	ldr	r3, [pc, #4]	; (f3cc <usb_init+0xc>)
    f3c6:	4798      	blx	r3
}
    f3c8:	bf00      	nop
    f3ca:	bd80      	pop	{r7, pc}
    f3cc:	0000f38d 	.word	0x0000f38d

0000f3d0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    f3d0:	b480      	push	{r7}
    f3d2:	b085      	sub	sp, #20
    f3d4:	af00      	add	r7, sp, #0
    f3d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f3d8:	f3ef 8310 	mrs	r3, PRIMASK
    f3dc:	60fb      	str	r3, [r7, #12]
  return(result);
    f3de:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    f3e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f3e6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    f3ea:	bf00      	nop
    f3ec:	3714      	adds	r7, #20
    f3ee:	46bd      	mov	sp, r7
    f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    f3f4:	4770      	bx	lr

0000f3f6 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    f3f6:	b480      	push	{r7}
    f3f8:	b085      	sub	sp, #20
    f3fa:	af00      	add	r7, sp, #0
    f3fc:	6078      	str	r0, [r7, #4]
    f3fe:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    f402:	687b      	ldr	r3, [r7, #4]
    f404:	681b      	ldr	r3, [r3, #0]
    f406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    f408:	68fb      	ldr	r3, [r7, #12]
    f40a:	f383 8810 	msr	PRIMASK, r3
}
    f40e:	bf00      	nop
    f410:	3714      	adds	r7, #20
    f412:	46bd      	mov	sp, r7
    f414:	f85d 7b04 	ldr.w	r7, [sp], #4
    f418:	4770      	bx	lr
	...

0000f41c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    f41c:	b580      	push	{r7, lr}
    f41e:	b08c      	sub	sp, #48	; 0x30
    f420:	af00      	add	r7, sp, #0
    f422:	6078      	str	r0, [r7, #4]
    f424:	460b      	mov	r3, r1
    f426:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f42c:	687b      	ldr	r3, [r7, #4]
    f42e:	681b      	ldr	r3, [r3, #0]
    f430:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    f432:	f107 030c 	add.w	r3, r7, #12
    f436:	2200      	movs	r2, #0
    f438:	601a      	str	r2, [r3, #0]
    f43a:	605a      	str	r2, [r3, #4]
    f43c:	609a      	str	r2, [r3, #8]
    f43e:	60da      	str	r2, [r3, #12]
    f440:	611a      	str	r2, [r3, #16]
    f442:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f446:	7b1b      	ldrb	r3, [r3, #12]
    f448:	2b00      	cmp	r3, #0
    f44a:	d001      	beq.n	f450 <n25q256a_xip_confirm+0x34>
    f44c:	2206      	movs	r2, #6
    f44e:	e000      	b.n	f452 <n25q256a_xip_confirm+0x36>
    f450:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f452:	7b3b      	ldrb	r3, [r7, #12]
    f454:	f362 0302 	bfi	r3, r2, #0, #3
    f458:	733b      	strb	r3, [r7, #12]
    f45a:	7b3b      	ldrb	r3, [r7, #12]
    f45c:	f043 0310 	orr.w	r3, r3, #16
    f460:	733b      	strb	r3, [r7, #12]
    f462:	7b3b      	ldrb	r3, [r7, #12]
    f464:	f043 0320 	orr.w	r3, r3, #32
    f468:	733b      	strb	r3, [r7, #12]
    f46a:	7b3b      	ldrb	r3, [r7, #12]
    f46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f470:	733b      	strb	r3, [r7, #12]
    f472:	7b3b      	ldrb	r3, [r7, #12]
    f474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f478:	733b      	strb	r3, [r7, #12]
    f47a:	7b7b      	ldrb	r3, [r7, #13]
    f47c:	f043 0303 	orr.w	r3, r3, #3
    f480:	737b      	strb	r3, [r7, #13]
    f482:	7b7b      	ldrb	r3, [r7, #13]
    f484:	2201      	movs	r2, #1
    f486:	f362 1305 	bfi	r3, r2, #4, #2
    f48a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f48e:	7b1b      	ldrb	r3, [r3, #12]
    f490:	2b00      	cmp	r3, #0
    f492:	d001      	beq.n	f498 <n25q256a_xip_confirm+0x7c>
    f494:	2208      	movs	r2, #8
    f496:	e000      	b.n	f49a <n25q256a_xip_confirm+0x7e>
    f498:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    f49a:	7bbb      	ldrb	r3, [r7, #14]
    f49c:	f362 0304 	bfi	r3, r2, #0, #5
    f4a0:	73bb      	strb	r3, [r7, #14]
    f4a2:	230b      	movs	r3, #11
    f4a4:	743b      	strb	r3, [r7, #16]
    f4a6:	78fb      	ldrb	r3, [r7, #3]
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	d001      	beq.n	f4b0 <n25q256a_xip_confirm+0x94>
    f4ac:	2300      	movs	r3, #0
    f4ae:	e000      	b.n	f4b2 <n25q256a_xip_confirm+0x96>
    f4b0:	23ff      	movs	r3, #255	; 0xff
    f4b2:	747b      	strb	r3, [r7, #17]
    f4b4:	2301      	movs	r3, #1
    f4b6:	61bb      	str	r3, [r7, #24]
    f4b8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    f4bc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    f4be:	f107 030c 	add.w	r3, r7, #12
    f4c2:	4619      	mov	r1, r3
    f4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f4c6:	4b07      	ldr	r3, [pc, #28]	; (f4e4 <n25q256a_xip_confirm+0xc8>)
    f4c8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    f4ca:	78fb      	ldrb	r3, [r7, #3]
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d001      	beq.n	f4d4 <n25q256a_xip_confirm+0xb8>
    f4d0:	2202      	movs	r2, #2
    f4d2:	e000      	b.n	f4d6 <n25q256a_xip_confirm+0xba>
    f4d4:	2201      	movs	r2, #1
    f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4d8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    f4da:	2300      	movs	r3, #0
}
    f4dc:	4618      	mov	r0, r3
    f4de:	3730      	adds	r7, #48	; 0x30
    f4e0:	46bd      	mov	sp, r7
    f4e2:	bd80      	pop	{r7, pc}
    f4e4:	00006401 	.word	0x00006401

0000f4e8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    f4e8:	b580      	push	{r7, lr}
    f4ea:	b08c      	sub	sp, #48	; 0x30
    f4ec:	af00      	add	r7, sp, #0
    f4ee:	6078      	str	r0, [r7, #4]
    f4f0:	460b      	mov	r3, r1
    f4f2:	70fb      	strb	r3, [r7, #3]
    f4f4:	4613      	mov	r3, r2
    f4f6:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    f4f8:	2300      	movs	r3, #0
    f4fa:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    f4fc:	687b      	ldr	r3, [r7, #4]
    f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    f500:	687b      	ldr	r3, [r7, #4]
    f502:	681b      	ldr	r3, [r3, #0]
    f504:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    f506:	f107 030c 	add.w	r3, r7, #12
    f50a:	2200      	movs	r2, #0
    f50c:	601a      	str	r2, [r3, #0]
    f50e:	605a      	str	r2, [r3, #4]
    f510:	609a      	str	r2, [r3, #8]
    f512:	60da      	str	r2, [r3, #12]
    f514:	611a      	str	r2, [r3, #16]
    f516:	615a      	str	r2, [r3, #20]
    f518:	78fb      	ldrb	r3, [r7, #3]
    f51a:	f003 0307 	and.w	r3, r3, #7
    f51e:	b2da      	uxtb	r2, r3
    f520:	7b3b      	ldrb	r3, [r7, #12]
    f522:	f362 0302 	bfi	r3, r2, #0, #3
    f526:	733b      	strb	r3, [r7, #12]
    f528:	7b3b      	ldrb	r3, [r7, #12]
    f52a:	f043 0310 	orr.w	r3, r3, #16
    f52e:	733b      	strb	r3, [r7, #12]
    f530:	7b3b      	ldrb	r3, [r7, #12]
    f532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f536:	733b      	strb	r3, [r7, #12]
    f538:	78bb      	ldrb	r3, [r7, #2]
    f53a:	743b      	strb	r3, [r7, #16]
    f53c:	2301      	movs	r3, #1
    f53e:	61bb      	str	r3, [r7, #24]
    f540:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f544:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f548:	7b5b      	ldrb	r3, [r3, #13]
    f54a:	2b00      	cmp	r3, #0
    f54c:	d003      	beq.n	f556 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    f54e:	2100      	movs	r1, #0
    f550:	6878      	ldr	r0, [r7, #4]
    f552:	4b0a      	ldr	r3, [pc, #40]	; (f57c <n25q256a_read_reg+0x94>)
    f554:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f556:	f107 030c 	add.w	r3, r7, #12
    f55a:	4619      	mov	r1, r3
    f55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f55e:	4b08      	ldr	r3, [pc, #32]	; (f580 <n25q256a_read_reg+0x98>)
    f560:	4798      	blx	r3
	if (n25q->xip_mode) {
    f562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f564:	7b5b      	ldrb	r3, [r3, #13]
    f566:	2b00      	cmp	r3, #0
    f568:	d003      	beq.n	f572 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    f56a:	2101      	movs	r1, #1
    f56c:	6878      	ldr	r0, [r7, #4]
    f56e:	4b03      	ldr	r3, [pc, #12]	; (f57c <n25q256a_read_reg+0x94>)
    f570:	4798      	blx	r3
	}
	return status;
    f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    f574:	4618      	mov	r0, r3
    f576:	3730      	adds	r7, #48	; 0x30
    f578:	46bd      	mov	sp, r7
    f57a:	bd80      	pop	{r7, pc}
    f57c:	0000f41d 	.word	0x0000f41d
    f580:	00006401 	.word	0x00006401

0000f584 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    f584:	b580      	push	{r7, lr}
    f586:	b08c      	sub	sp, #48	; 0x30
    f588:	af00      	add	r7, sp, #0
    f58a:	60f8      	str	r0, [r7, #12]
    f58c:	607b      	str	r3, [r7, #4]
    f58e:	460b      	mov	r3, r1
    f590:	72fb      	strb	r3, [r7, #11]
    f592:	4613      	mov	r3, r2
    f594:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f596:	68fb      	ldr	r3, [r7, #12]
    f598:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f59a:	68fb      	ldr	r3, [r7, #12]
    f59c:	681b      	ldr	r3, [r3, #0]
    f59e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    f5a0:	f107 0310 	add.w	r3, r7, #16
    f5a4:	2200      	movs	r2, #0
    f5a6:	601a      	str	r2, [r3, #0]
    f5a8:	605a      	str	r2, [r3, #4]
    f5aa:	609a      	str	r2, [r3, #8]
    f5ac:	60da      	str	r2, [r3, #12]
    f5ae:	611a      	str	r2, [r3, #16]
    f5b0:	615a      	str	r2, [r3, #20]
    f5b2:	7afb      	ldrb	r3, [r7, #11]
    f5b4:	f003 0307 	and.w	r3, r3, #7
    f5b8:	b2da      	uxtb	r2, r3
    f5ba:	7c3b      	ldrb	r3, [r7, #16]
    f5bc:	f362 0302 	bfi	r3, r2, #0, #3
    f5c0:	743b      	strb	r3, [r7, #16]
    f5c2:	7c3b      	ldrb	r3, [r7, #16]
    f5c4:	f043 0310 	orr.w	r3, r3, #16
    f5c8:	743b      	strb	r3, [r7, #16]
    f5ca:	7c3b      	ldrb	r3, [r7, #16]
    f5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f5d0:	743b      	strb	r3, [r7, #16]
    f5d2:	7c7b      	ldrb	r3, [r7, #17]
    f5d4:	2202      	movs	r2, #2
    f5d6:	f362 1305 	bfi	r3, r2, #4, #2
    f5da:	747b      	strb	r3, [r7, #17]
    f5dc:	7abb      	ldrb	r3, [r7, #10]
    f5de:	753b      	strb	r3, [r7, #20]
    f5e0:	2301      	movs	r3, #1
    f5e2:	61fb      	str	r3, [r7, #28]
    f5e4:	1d3b      	adds	r3, r7, #4
    f5e6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    f5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f5ea:	7b5b      	ldrb	r3, [r3, #13]
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d003      	beq.n	f5f8 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    f5f0:	2100      	movs	r1, #0
    f5f2:	68f8      	ldr	r0, [r7, #12]
    f5f4:	4b09      	ldr	r3, [pc, #36]	; (f61c <n25q256a_write_reg+0x98>)
    f5f6:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    f5f8:	f107 0310 	add.w	r3, r7, #16
    f5fc:	4619      	mov	r1, r3
    f5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f600:	4b07      	ldr	r3, [pc, #28]	; (f620 <n25q256a_write_reg+0x9c>)
    f602:	4798      	blx	r3
	if (n25q->xip_mode) {
    f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f606:	7b5b      	ldrb	r3, [r3, #13]
    f608:	2b00      	cmp	r3, #0
    f60a:	d003      	beq.n	f614 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    f60c:	2101      	movs	r1, #1
    f60e:	68f8      	ldr	r0, [r7, #12]
    f610:	4b02      	ldr	r3, [pc, #8]	; (f61c <n25q256a_write_reg+0x98>)
    f612:	4798      	blx	r3
	}
}
    f614:	bf00      	nop
    f616:	3730      	adds	r7, #48	; 0x30
    f618:	46bd      	mov	sp, r7
    f61a:	bd80      	pop	{r7, pc}
    f61c:	0000f41d 	.word	0x0000f41d
    f620:	00006401 	.word	0x00006401

0000f624 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    f624:	b580      	push	{r7, lr}
    f626:	b090      	sub	sp, #64	; 0x40
    f628:	af00      	add	r7, sp, #0
    f62a:	6078      	str	r0, [r7, #4]
    f62c:	460b      	mov	r3, r1
    f62e:	70fb      	strb	r3, [r7, #3]
    f630:	4613      	mov	r3, r2
    f632:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f634:	687b      	ldr	r3, [r7, #4]
    f636:	681b      	ldr	r3, [r3, #0]
    f638:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    f63a:	78bb      	ldrb	r3, [r7, #2]
    f63c:	2b00      	cmp	r3, #0
    f63e:	d001      	beq.n	f644 <n25q256a_write_enable+0x20>
    f640:	2306      	movs	r3, #6
    f642:	e000      	b.n	f646 <n25q256a_write_enable+0x22>
    f644:	2304      	movs	r3, #4
    f646:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    f64a:	f107 0320 	add.w	r3, r7, #32
    f64e:	2200      	movs	r2, #0
    f650:	601a      	str	r2, [r3, #0]
    f652:	605a      	str	r2, [r3, #4]
    f654:	609a      	str	r2, [r3, #8]
    f656:	60da      	str	r2, [r3, #12]
    f658:	611a      	str	r2, [r3, #16]
    f65a:	615a      	str	r2, [r3, #20]
    f65c:	78fb      	ldrb	r3, [r7, #3]
    f65e:	f003 0307 	and.w	r3, r3, #7
    f662:	b2da      	uxtb	r2, r3
    f664:	f897 3020 	ldrb.w	r3, [r7, #32]
    f668:	f362 0302 	bfi	r3, r2, #0, #3
    f66c:	f887 3020 	strb.w	r3, [r7, #32]
    f670:	f897 3020 	ldrb.w	r3, [r7, #32]
    f674:	f043 0310 	orr.w	r3, r3, #16
    f678:	f887 3020 	strb.w	r3, [r7, #32]
    f67c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    f680:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    f684:	f107 0308 	add.w	r3, r7, #8
    f688:	2200      	movs	r2, #0
    f68a:	601a      	str	r2, [r3, #0]
    f68c:	605a      	str	r2, [r3, #4]
    f68e:	609a      	str	r2, [r3, #8]
    f690:	60da      	str	r2, [r3, #12]
    f692:	611a      	str	r2, [r3, #16]
    f694:	615a      	str	r2, [r3, #20]
    f696:	78fb      	ldrb	r3, [r7, #3]
    f698:	f003 0307 	and.w	r3, r3, #7
    f69c:	b2da      	uxtb	r2, r3
    f69e:	7a3b      	ldrb	r3, [r7, #8]
    f6a0:	f362 0302 	bfi	r3, r2, #0, #3
    f6a4:	723b      	strb	r3, [r7, #8]
    f6a6:	7a3b      	ldrb	r3, [r7, #8]
    f6a8:	f043 0310 	orr.w	r3, r3, #16
    f6ac:	723b      	strb	r3, [r7, #8]
    f6ae:	7a3b      	ldrb	r3, [r7, #8]
    f6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f6b4:	723b      	strb	r3, [r7, #8]
    f6b6:	2305      	movs	r3, #5
    f6b8:	733b      	strb	r3, [r7, #12]
    f6ba:	2301      	movs	r3, #1
    f6bc:	617b      	str	r3, [r7, #20]
    f6be:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    f6c2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    f6c4:	f107 0320 	add.w	r3, r7, #32
    f6c8:	4619      	mov	r1, r3
    f6ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f6cc:	4b08      	ldr	r3, [pc, #32]	; (f6f0 <n25q256a_write_enable+0xcc>)
    f6ce:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    f6d0:	f107 0308 	add.w	r3, r7, #8
    f6d4:	4619      	mov	r1, r3
    f6d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f6d8:	4b05      	ldr	r3, [pc, #20]	; (f6f0 <n25q256a_write_enable+0xcc>)
    f6da:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    f6dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    f6e0:	f003 0302 	and.w	r3, r3, #2
    f6e4:	2b00      	cmp	r3, #0
    f6e6:	d0ed      	beq.n	f6c4 <n25q256a_write_enable+0xa0>
}
    f6e8:	bf00      	nop
    f6ea:	3740      	adds	r7, #64	; 0x40
    f6ec:	46bd      	mov	sp, r7
    f6ee:	bd80      	pop	{r7, pc}
    f6f0:	00006401 	.word	0x00006401

0000f6f4 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    f6f4:	b590      	push	{r4, r7, lr}
    f6f6:	b087      	sub	sp, #28
    f6f8:	af00      	add	r7, sp, #0
    f6fa:	6078      	str	r0, [r7, #4]
    f6fc:	460b      	mov	r3, r1
    f6fe:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f704:	68fb      	ldr	r3, [r7, #12]
    f706:	7b1b      	ldrb	r3, [r3, #12]
    f708:	2b00      	cmp	r3, #0
    f70a:	d001      	beq.n	f710 <n25q256a_switch_mode+0x1c>
    f70c:	2306      	movs	r3, #6
    f70e:	e000      	b.n	f712 <n25q256a_switch_mode+0x1e>
    f710:	2300      	movs	r3, #0
    f712:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f714:	7afb      	ldrb	r3, [r7, #11]
    f716:	2265      	movs	r2, #101	; 0x65
    f718:	4619      	mov	r1, r3
    f71a:	6878      	ldr	r0, [r7, #4]
    f71c:	4b25      	ldr	r3, [pc, #148]	; (f7b4 <n25q256a_switch_mode+0xc0>)
    f71e:	4798      	blx	r3
    f720:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    f722:	2300      	movs	r3, #0
    f724:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    f726:	68fb      	ldr	r3, [r7, #12]
    f728:	7b1b      	ldrb	r3, [r3, #12]
    f72a:	78fa      	ldrb	r2, [r7, #3]
    f72c:	429a      	cmp	r2, r3
    f72e:	d03d      	beq.n	f7ac <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    f730:	78fb      	ldrb	r3, [r7, #3]
    f732:	2b00      	cmp	r3, #0
    f734:	d00b      	beq.n	f74e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    f736:	697b      	ldr	r3, [r7, #20]
    f738:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f73c:	2b00      	cmp	r3, #0
    f73e:	d011      	beq.n	f764 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    f740:	697b      	ldr	r3, [r7, #20]
    f742:	f003 031f 	and.w	r3, r3, #31
    f746:	617b      	str	r3, [r7, #20]
			modify = 1;
    f748:	2301      	movs	r3, #1
    f74a:	74fb      	strb	r3, [r7, #19]
    f74c:	e00a      	b.n	f764 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    f74e:	697b      	ldr	r3, [r7, #20]
    f750:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f754:	2b00      	cmp	r3, #0
    f756:	d105      	bne.n	f764 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    f758:	697b      	ldr	r3, [r7, #20]
    f75a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    f75e:	617b      	str	r3, [r7, #20]
			modify = 1;
    f760:	2301      	movs	r3, #1
    f762:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    f764:	7cfb      	ldrb	r3, [r7, #19]
    f766:	2b00      	cmp	r3, #0
    f768:	d021      	beq.n	f7ae <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    f76a:	68fb      	ldr	r3, [r7, #12]
    f76c:	78fa      	ldrb	r2, [r7, #3]
    f76e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    f770:	7afb      	ldrb	r3, [r7, #11]
    f772:	2201      	movs	r2, #1
    f774:	4619      	mov	r1, r3
    f776:	6878      	ldr	r0, [r7, #4]
    f778:	4b0f      	ldr	r3, [pc, #60]	; (f7b8 <n25q256a_switch_mode+0xc4>)
    f77a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    f77c:	7af9      	ldrb	r1, [r7, #11]
    f77e:	697b      	ldr	r3, [r7, #20]
    f780:	2261      	movs	r2, #97	; 0x61
    f782:	6878      	ldr	r0, [r7, #4]
    f784:	4c0d      	ldr	r4, [pc, #52]	; (f7bc <n25q256a_switch_mode+0xc8>)
    f786:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f788:	78fb      	ldrb	r3, [r7, #3]
    f78a:	2b00      	cmp	r3, #0
    f78c:	d001      	beq.n	f792 <n25q256a_switch_mode+0x9e>
    f78e:	2306      	movs	r3, #6
    f790:	e000      	b.n	f794 <n25q256a_switch_mode+0xa0>
    f792:	2300      	movs	r3, #0
    f794:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    f796:	7afb      	ldrb	r3, [r7, #11]
    f798:	2265      	movs	r2, #101	; 0x65
    f79a:	4619      	mov	r1, r3
    f79c:	6878      	ldr	r0, [r7, #4]
    f79e:	4b05      	ldr	r3, [pc, #20]	; (f7b4 <n25q256a_switch_mode+0xc0>)
    f7a0:	4798      	blx	r3
    f7a2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    f7a4:	68fb      	ldr	r3, [r7, #12]
    f7a6:	78fa      	ldrb	r2, [r7, #3]
    f7a8:	731a      	strb	r2, [r3, #12]
    f7aa:	e000      	b.n	f7ae <n25q256a_switch_mode+0xba>
		return;
    f7ac:	bf00      	nop
	}
}
    f7ae:	371c      	adds	r7, #28
    f7b0:	46bd      	mov	sp, r7
    f7b2:	bd90      	pop	{r4, r7, pc}
    f7b4:	0000f4e9 	.word	0x0000f4e9
    f7b8:	0000f625 	.word	0x0000f625
    f7bc:	0000f585 	.word	0x0000f585

0000f7c0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    f7c0:	b580      	push	{r7, lr}
    f7c2:	b086      	sub	sp, #24
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	60f8      	str	r0, [r7, #12]
    f7c8:	60b9      	str	r1, [r7, #8]
    f7ca:	607a      	str	r2, [r7, #4]
    f7cc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    f7ce:	68fb      	ldr	r3, [r7, #12]
    f7d0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    f7d2:	4a0c      	ldr	r2, [pc, #48]	; (f804 <n25q256a_construct+0x44>)
    f7d4:	68b9      	ldr	r1, [r7, #8]
    f7d6:	68f8      	ldr	r0, [r7, #12]
    f7d8:	4b0b      	ldr	r3, [pc, #44]	; (f808 <n25q256a_construct+0x48>)
    f7da:	4798      	blx	r3
	n25q->quad_mode    = 0;
    f7dc:	697b      	ldr	r3, [r7, #20]
    f7de:	2200      	movs	r2, #0
    f7e0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    f7e2:	697b      	ldr	r3, [r7, #20]
    f7e4:	2200      	movs	r2, #0
    f7e6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    f7e8:	697b      	ldr	r3, [r7, #20]
    f7ea:	687a      	ldr	r2, [r7, #4]
    f7ec:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    f7ee:	78fb      	ldrb	r3, [r7, #3]
    f7f0:	4619      	mov	r1, r3
    f7f2:	68f8      	ldr	r0, [r7, #12]
    f7f4:	4b05      	ldr	r3, [pc, #20]	; (f80c <n25q256a_construct+0x4c>)
    f7f6:	4798      	blx	r3
	return me;
    f7f8:	68fb      	ldr	r3, [r7, #12]
}
    f7fa:	4618      	mov	r0, r3
    f7fc:	3718      	adds	r7, #24
    f7fe:	46bd      	mov	sp, r7
    f800:	bd80      	pop	{r7, pc}
    f802:	bf00      	nop
    f804:	00012d88 	.word	0x00012d88
    f808:	0000fc9d 	.word	0x0000fc9d
    f80c:	0000f6f5 	.word	0x0000f6f5

0000f810 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f810:	b580      	push	{r7, lr}
    f812:	b08c      	sub	sp, #48	; 0x30
    f814:	af00      	add	r7, sp, #0
    f816:	60f8      	str	r0, [r7, #12]
    f818:	60b9      	str	r1, [r7, #8]
    f81a:	607a      	str	r2, [r7, #4]
    f81c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f81e:	68fb      	ldr	r3, [r7, #12]
    f820:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f822:	68fb      	ldr	r3, [r7, #12]
    f824:	681b      	ldr	r3, [r3, #0]
    f826:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    f828:	f107 0310 	add.w	r3, r7, #16
    f82c:	2200      	movs	r2, #0
    f82e:	601a      	str	r2, [r3, #0]
    f830:	605a      	str	r2, [r3, #4]
    f832:	609a      	str	r2, [r3, #8]
    f834:	60da      	str	r2, [r3, #12]
    f836:	611a      	str	r2, [r3, #16]
    f838:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f83c:	7b1b      	ldrb	r3, [r3, #12]
    f83e:	2b00      	cmp	r3, #0
    f840:	d001      	beq.n	f846 <n25q256a_read+0x36>
    f842:	2206      	movs	r2, #6
    f844:	e000      	b.n	f848 <n25q256a_read+0x38>
    f846:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    f848:	7c3b      	ldrb	r3, [r7, #16]
    f84a:	f362 0302 	bfi	r3, r2, #0, #3
    f84e:	743b      	strb	r3, [r7, #16]
    f850:	7c3b      	ldrb	r3, [r7, #16]
    f852:	f043 0310 	orr.w	r3, r3, #16
    f856:	743b      	strb	r3, [r7, #16]
    f858:	7c3b      	ldrb	r3, [r7, #16]
    f85a:	f043 0320 	orr.w	r3, r3, #32
    f85e:	743b      	strb	r3, [r7, #16]
    f860:	7c3b      	ldrb	r3, [r7, #16]
    f862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f866:	743b      	strb	r3, [r7, #16]
    f868:	7c7b      	ldrb	r3, [r7, #17]
    f86a:	2201      	movs	r2, #1
    f86c:	f362 1305 	bfi	r3, r2, #4, #2
    f870:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    f872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f874:	7b1b      	ldrb	r3, [r3, #12]
    f876:	2b00      	cmp	r3, #0
    f878:	d001      	beq.n	f87e <n25q256a_read+0x6e>
    f87a:	220a      	movs	r2, #10
    f87c:	e000      	b.n	f880 <n25q256a_read+0x70>
    f87e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    f880:	7cbb      	ldrb	r3, [r7, #18]
    f882:	f362 0304 	bfi	r3, r2, #0, #5
    f886:	74bb      	strb	r3, [r7, #18]
    f888:	230b      	movs	r3, #11
    f88a:	753b      	strb	r3, [r7, #20]
    f88c:	687b      	ldr	r3, [r7, #4]
    f88e:	61bb      	str	r3, [r7, #24]
    f890:	683b      	ldr	r3, [r7, #0]
    f892:	61fb      	str	r3, [r7, #28]
    f894:	68bb      	ldr	r3, [r7, #8]
    f896:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    f898:	f107 0310 	add.w	r3, r7, #16
    f89c:	4619      	mov	r1, r3
    f89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f8a0:	4b03      	ldr	r3, [pc, #12]	; (f8b0 <n25q256a_read+0xa0>)
    f8a2:	4798      	blx	r3
	return ERR_NONE;
    f8a4:	2300      	movs	r3, #0
}
    f8a6:	4618      	mov	r0, r3
    f8a8:	3730      	adds	r7, #48	; 0x30
    f8aa:	46bd      	mov	sp, r7
    f8ac:	bd80      	pop	{r7, pc}
    f8ae:	bf00      	nop
    f8b0:	00006401 	.word	0x00006401

0000f8b4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    f8b4:	b580      	push	{r7, lr}
    f8b6:	b08c      	sub	sp, #48	; 0x30
    f8b8:	af00      	add	r7, sp, #0
    f8ba:	60f8      	str	r0, [r7, #12]
    f8bc:	60b9      	str	r1, [r7, #8]
    f8be:	607a      	str	r2, [r7, #4]
    f8c0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f8c2:	68fb      	ldr	r3, [r7, #12]
    f8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f8c6:	68fb      	ldr	r3, [r7, #12]
    f8c8:	681b      	ldr	r3, [r3, #0]
    f8ca:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    f8cc:	f107 0310 	add.w	r3, r7, #16
    f8d0:	2200      	movs	r2, #0
    f8d2:	601a      	str	r2, [r3, #0]
    f8d4:	605a      	str	r2, [r3, #4]
    f8d6:	609a      	str	r2, [r3, #8]
    f8d8:	60da      	str	r2, [r3, #12]
    f8da:	611a      	str	r2, [r3, #16]
    f8dc:	615a      	str	r2, [r3, #20]
    f8de:	7c3b      	ldrb	r3, [r7, #16]
    f8e0:	f043 0310 	orr.w	r3, r3, #16
    f8e4:	743b      	strb	r3, [r7, #16]
    f8e6:	7c3b      	ldrb	r3, [r7, #16]
    f8e8:	f043 0320 	orr.w	r3, r3, #32
    f8ec:	743b      	strb	r3, [r7, #16]
    f8ee:	7c3b      	ldrb	r3, [r7, #16]
    f8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f8f4:	743b      	strb	r3, [r7, #16]
    f8f6:	7c7b      	ldrb	r3, [r7, #17]
    f8f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    f8fc:	747b      	strb	r3, [r7, #17]
    f8fe:	2302      	movs	r3, #2
    f900:	753b      	strb	r3, [r7, #20]
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	61bb      	str	r3, [r7, #24]
    f906:	683b      	ldr	r3, [r7, #0]
    f908:	61fb      	str	r3, [r7, #28]
    f90a:	68bb      	ldr	r3, [r7, #8]
    f90c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f910:	7b1b      	ldrb	r3, [r3, #12]
    f912:	2b00      	cmp	r3, #0
    f914:	d001      	beq.n	f91a <n25q256a_write+0x66>
    f916:	2206      	movs	r2, #6
    f918:	e000      	b.n	f91c <n25q256a_write+0x68>
    f91a:	2200      	movs	r2, #0
    f91c:	7c3b      	ldrb	r3, [r7, #16]
    f91e:	f362 0302 	bfi	r3, r2, #0, #3
    f922:	743b      	strb	r3, [r7, #16]
	while (length) {
    f924:	e035      	b.n	f992 <n25q256a_write+0xde>
		cmd.address = address;
    f926:	687b      	ldr	r3, [r7, #4]
    f928:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    f92a:	683b      	ldr	r3, [r7, #0]
    f92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f930:	d802      	bhi.n	f938 <n25q256a_write+0x84>
			cmd.buf_len = length;
    f932:	683b      	ldr	r3, [r7, #0]
    f934:	61fb      	str	r3, [r7, #28]
    f936:	e002      	b.n	f93e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    f938:	f44f 7380 	mov.w	r3, #256	; 0x100
    f93c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    f93e:	7c3b      	ldrb	r3, [r7, #16]
    f940:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f944:	b2db      	uxtb	r3, r3
    f946:	2201      	movs	r2, #1
    f948:	4619      	mov	r1, r3
    f94a:	68f8      	ldr	r0, [r7, #12]
    f94c:	4b19      	ldr	r3, [pc, #100]	; (f9b4 <n25q256a_write+0x100>)
    f94e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    f950:	f107 0310 	add.w	r3, r7, #16
    f954:	4619      	mov	r1, r3
    f956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f958:	4b17      	ldr	r3, [pc, #92]	; (f9b8 <n25q256a_write+0x104>)
    f95a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    f95c:	bf00      	nop
    f95e:	7c3b      	ldrb	r3, [r7, #16]
    f960:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f964:	b2db      	uxtb	r3, r3
    f966:	2270      	movs	r2, #112	; 0x70
    f968:	4619      	mov	r1, r3
    f96a:	68f8      	ldr	r0, [r7, #12]
    f96c:	4b13      	ldr	r3, [pc, #76]	; (f9bc <n25q256a_write+0x108>)
    f96e:	4798      	blx	r3
    f970:	4603      	mov	r3, r0
    f972:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f976:	2b00      	cmp	r3, #0
    f978:	d0f1      	beq.n	f95e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    f97a:	6a3a      	ldr	r2, [r7, #32]
    f97c:	69fb      	ldr	r3, [r7, #28]
    f97e:	4413      	add	r3, r2
    f980:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    f982:	69fb      	ldr	r3, [r7, #28]
    f984:	683a      	ldr	r2, [r7, #0]
    f986:	1ad3      	subs	r3, r2, r3
    f988:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    f98a:	69fb      	ldr	r3, [r7, #28]
    f98c:	687a      	ldr	r2, [r7, #4]
    f98e:	4413      	add	r3, r2
    f990:	607b      	str	r3, [r7, #4]
	while (length) {
    f992:	683b      	ldr	r3, [r7, #0]
    f994:	2b00      	cmp	r3, #0
    f996:	d1c6      	bne.n	f926 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    f998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f99a:	7b5b      	ldrb	r3, [r3, #13]
    f99c:	2b00      	cmp	r3, #0
    f99e:	d003      	beq.n	f9a8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    f9a0:	2101      	movs	r1, #1
    f9a2:	68f8      	ldr	r0, [r7, #12]
    f9a4:	4b06      	ldr	r3, [pc, #24]	; (f9c0 <n25q256a_write+0x10c>)
    f9a6:	4798      	blx	r3
	}
	return ERR_NONE;
    f9a8:	2300      	movs	r3, #0
}
    f9aa:	4618      	mov	r0, r3
    f9ac:	3730      	adds	r7, #48	; 0x30
    f9ae:	46bd      	mov	sp, r7
    f9b0:	bd80      	pop	{r7, pc}
    f9b2:	bf00      	nop
    f9b4:	0000f625 	.word	0x0000f625
    f9b8:	00006401 	.word	0x00006401
    f9bc:	0000f4e9 	.word	0x0000f4e9
    f9c0:	0000f41d 	.word	0x0000f41d

0000f9c4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    f9c4:	b580      	push	{r7, lr}
    f9c6:	b090      	sub	sp, #64	; 0x40
    f9c8:	af00      	add	r7, sp, #0
    f9ca:	60f8      	str	r0, [r7, #12]
    f9cc:	60b9      	str	r1, [r7, #8]
    f9ce:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    f9d0:	68fb      	ldr	r3, [r7, #12]
    f9d2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    f9d4:	68fb      	ldr	r3, [r7, #12]
    f9d6:	681b      	ldr	r3, [r3, #0]
    f9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    f9da:	f107 0314 	add.w	r3, r7, #20
    f9de:	2200      	movs	r2, #0
    f9e0:	601a      	str	r2, [r3, #0]
    f9e2:	605a      	str	r2, [r3, #4]
    f9e4:	609a      	str	r2, [r3, #8]
    f9e6:	60da      	str	r2, [r3, #12]
    f9e8:	611a      	str	r2, [r3, #16]
    f9ea:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    f9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f9ee:	7b1b      	ldrb	r3, [r3, #12]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d001      	beq.n	f9f8 <n25q256a_erase+0x34>
    f9f4:	2206      	movs	r2, #6
    f9f6:	e000      	b.n	f9fa <n25q256a_erase+0x36>
    f9f8:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    f9fa:	7d3b      	ldrb	r3, [r7, #20]
    f9fc:	f362 0302 	bfi	r3, r2, #0, #3
    fa00:	753b      	strb	r3, [r7, #20]
    fa02:	7d3b      	ldrb	r3, [r7, #20]
    fa04:	f043 0310 	orr.w	r3, r3, #16
    fa08:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    fa0a:	687b      	ldr	r3, [r7, #4]
    fa0c:	4a56      	ldr	r2, [pc, #344]	; (fb68 <n25q256a_erase+0x1a4>)
    fa0e:	4293      	cmp	r3, r2
    fa10:	bf94      	ite	ls
    fa12:	2301      	movls	r3, #1
    fa14:	2300      	movhi	r3, #0
    fa16:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    fa18:	7d3b      	ldrb	r3, [r7, #20]
    fa1a:	f362 1345 	bfi	r3, r2, #5, #1
    fa1e:	753b      	strb	r3, [r7, #20]
    fa20:	7d7b      	ldrb	r3, [r7, #21]
    fa22:	2202      	movs	r2, #2
    fa24:	f362 1305 	bfi	r3, r2, #4, #2
    fa28:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    fa2a:	68bb      	ldr	r3, [r7, #8]
    fa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    fa2e:	687b      	ldr	r3, [r7, #4]
    fa30:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    fa32:	2300      	movs	r3, #0
    fa34:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    fa36:	687b      	ldr	r3, [r7, #4]
    fa38:	f3c3 030b 	ubfx	r3, r3, #0, #12
    fa3c:	2b00      	cmp	r3, #0
    fa3e:	d104      	bne.n	fa4a <n25q256a_erase+0x86>
    fa40:	68bb      	ldr	r3, [r7, #8]
    fa42:	f3c3 030b 	ubfx	r3, r3, #0, #12
    fa46:	2b00      	cmp	r3, #0
    fa48:	d002      	beq.n	fa50 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    fa4a:	f06f 030c 	mvn.w	r3, #12
    fa4e:	e087      	b.n	fb60 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    fa50:	687b      	ldr	r3, [r7, #4]
    fa52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    fa56:	d368      	bcc.n	fb2a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    fa58:	23c7      	movs	r3, #199	; 0xc7
    fa5a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    fa5c:	7d3b      	ldrb	r3, [r7, #20]
    fa5e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fa62:	b2db      	uxtb	r3, r3
    fa64:	2201      	movs	r2, #1
    fa66:	4619      	mov	r1, r3
    fa68:	68f8      	ldr	r0, [r7, #12]
    fa6a:	4b40      	ldr	r3, [pc, #256]	; (fb6c <n25q256a_erase+0x1a8>)
    fa6c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    fa6e:	f107 0314 	add.w	r3, r7, #20
    fa72:	4619      	mov	r1, r3
    fa74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fa76:	4b3e      	ldr	r3, [pc, #248]	; (fb70 <n25q256a_erase+0x1ac>)
    fa78:	4798      	blx	r3
    fa7a:	e059      	b.n	fb30 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    fa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa7e:	b29b      	uxth	r3, r3
    fa80:	2b00      	cmp	r3, #0
    fa82:	d11f      	bne.n	fac4 <n25q256a_erase+0x100>
    fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fa86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    fa8a:	d31b      	bcc.n	fac4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    fa8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fa8e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    fa90:	23d8      	movs	r3, #216	; 0xd8
    fa92:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    fa94:	7d3b      	ldrb	r3, [r7, #20]
    fa96:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fa9a:	b2db      	uxtb	r3, r3
    fa9c:	2201      	movs	r2, #1
    fa9e:	4619      	mov	r1, r3
    faa0:	68f8      	ldr	r0, [r7, #12]
    faa2:	4b32      	ldr	r3, [pc, #200]	; (fb6c <n25q256a_erase+0x1a8>)
    faa4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    faa6:	f107 0314 	add.w	r3, r7, #20
    faaa:	4619      	mov	r1, r3
    faac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    faae:	4b30      	ldr	r3, [pc, #192]	; (fb70 <n25q256a_erase+0x1ac>)
    fab0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    fab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fab4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    fab8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    faba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fabc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    fac0:	63bb      	str	r3, [r7, #56]	; 0x38
    fac2:	e023      	b.n	fb0c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    fac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    faca:	d31b      	bcc.n	fb04 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    face:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    fad0:	2320      	movs	r3, #32
    fad2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    fad4:	7d3b      	ldrb	r3, [r7, #20]
    fad6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fada:	b2db      	uxtb	r3, r3
    fadc:	2201      	movs	r2, #1
    fade:	4619      	mov	r1, r3
    fae0:	68f8      	ldr	r0, [r7, #12]
    fae2:	4b22      	ldr	r3, [pc, #136]	; (fb6c <n25q256a_erase+0x1a8>)
    fae4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    fae6:	f107 0314 	add.w	r3, r7, #20
    faea:	4619      	mov	r1, r3
    faec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    faee:	4b20      	ldr	r3, [pc, #128]	; (fb70 <n25q256a_erase+0x1ac>)
    faf0:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    faf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    faf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    faf8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    fafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fafc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    fb00:	63bb      	str	r3, [r7, #56]	; 0x38
    fb02:	e003      	b.n	fb0c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    fb04:	f06f 030c 	mvn.w	r3, #12
    fb08:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    fb0a:	e011      	b.n	fb30 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    fb0c:	bf00      	nop
    fb0e:	7d3b      	ldrb	r3, [r7, #20]
    fb10:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fb14:	b2db      	uxtb	r3, r3
    fb16:	2270      	movs	r2, #112	; 0x70
    fb18:	4619      	mov	r1, r3
    fb1a:	68f8      	ldr	r0, [r7, #12]
    fb1c:	4b15      	ldr	r3, [pc, #84]	; (fb74 <n25q256a_erase+0x1b0>)
    fb1e:	4798      	blx	r3
    fb20:	4603      	mov	r3, r0
    fb22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb26:	2b00      	cmp	r3, #0
    fb28:	d0f1      	beq.n	fb0e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    fb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	d1a5      	bne.n	fa7c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    fb30:	bf00      	nop
    fb32:	7d3b      	ldrb	r3, [r7, #20]
    fb34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fb38:	b2db      	uxtb	r3, r3
    fb3a:	2270      	movs	r2, #112	; 0x70
    fb3c:	4619      	mov	r1, r3
    fb3e:	68f8      	ldr	r0, [r7, #12]
    fb40:	4b0c      	ldr	r3, [pc, #48]	; (fb74 <n25q256a_erase+0x1b0>)
    fb42:	4798      	blx	r3
    fb44:	4603      	mov	r3, r0
    fb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	d0f1      	beq.n	fb32 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fb50:	7b5b      	ldrb	r3, [r3, #13]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d003      	beq.n	fb5e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    fb56:	2101      	movs	r1, #1
    fb58:	68f8      	ldr	r0, [r7, #12]
    fb5a:	4b07      	ldr	r3, [pc, #28]	; (fb78 <n25q256a_erase+0x1b4>)
    fb5c:	4798      	blx	r3
	}
	return rc;
    fb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    fb60:	4618      	mov	r0, r3
    fb62:	3740      	adds	r7, #64	; 0x40
    fb64:	46bd      	mov	sp, r7
    fb66:	bd80      	pop	{r7, pc}
    fb68:	001fffff 	.word	0x001fffff
    fb6c:	0000f625 	.word	0x0000f625
    fb70:	00006401 	.word	0x00006401
    fb74:	0000f4e9 	.word	0x0000f4e9
    fb78:	0000f41d 	.word	0x0000f41d

0000fb7c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    fb7c:	b590      	push	{r4, r7, lr}
    fb7e:	b085      	sub	sp, #20
    fb80:	af00      	add	r7, sp, #0
    fb82:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    fb84:	687b      	ldr	r3, [r7, #4]
    fb86:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    fb88:	68fb      	ldr	r3, [r7, #12]
    fb8a:	7b1b      	ldrb	r3, [r3, #12]
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d001      	beq.n	fb94 <n25q256a_enable_xip+0x18>
    fb90:	2306      	movs	r3, #6
    fb92:	e000      	b.n	fb96 <n25q256a_enable_xip+0x1a>
    fb94:	2300      	movs	r3, #0
    fb96:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    fb98:	68fb      	ldr	r3, [r7, #12]
    fb9a:	7b5b      	ldrb	r3, [r3, #13]
    fb9c:	2b00      	cmp	r3, #0
    fb9e:	d129      	bne.n	fbf4 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    fba0:	7afb      	ldrb	r3, [r7, #11]
    fba2:	2285      	movs	r2, #133	; 0x85
    fba4:	4619      	mov	r1, r3
    fba6:	6878      	ldr	r0, [r7, #4]
    fba8:	4b15      	ldr	r3, [pc, #84]	; (fc00 <n25q256a_enable_xip+0x84>)
    fbaa:	4798      	blx	r3
    fbac:	4603      	mov	r3, r0
    fbae:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    fbb0:	7abb      	ldrb	r3, [r7, #10]
    fbb2:	f003 0308 	and.w	r3, r3, #8
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d015      	beq.n	fbe6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    fbba:	7abb      	ldrb	r3, [r7, #10]
    fbbc:	f023 0308 	bic.w	r3, r3, #8
    fbc0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    fbc2:	7abb      	ldrb	r3, [r7, #10]
    fbc4:	7af9      	ldrb	r1, [r7, #11]
    fbc6:	2281      	movs	r2, #129	; 0x81
    fbc8:	6878      	ldr	r0, [r7, #4]
    fbca:	4c0e      	ldr	r4, [pc, #56]	; (fc04 <n25q256a_enable_xip+0x88>)
    fbcc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    fbce:	bf00      	nop
    fbd0:	7afb      	ldrb	r3, [r7, #11]
    fbd2:	2270      	movs	r2, #112	; 0x70
    fbd4:	4619      	mov	r1, r3
    fbd6:	6878      	ldr	r0, [r7, #4]
    fbd8:	4b09      	ldr	r3, [pc, #36]	; (fc00 <n25q256a_enable_xip+0x84>)
    fbda:	4798      	blx	r3
    fbdc:	4603      	mov	r3, r0
    fbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	d0f4      	beq.n	fbd0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    fbe6:	68fb      	ldr	r3, [r7, #12]
    fbe8:	2201      	movs	r2, #1
    fbea:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    fbec:	2101      	movs	r1, #1
    fbee:	6878      	ldr	r0, [r7, #4]
    fbf0:	4b05      	ldr	r3, [pc, #20]	; (fc08 <n25q256a_enable_xip+0x8c>)
    fbf2:	4798      	blx	r3
	}
	return ERR_NONE;
    fbf4:	2300      	movs	r3, #0
}
    fbf6:	4618      	mov	r0, r3
    fbf8:	3714      	adds	r7, #20
    fbfa:	46bd      	mov	sp, r7
    fbfc:	bd90      	pop	{r4, r7, pc}
    fbfe:	bf00      	nop
    fc00:	0000f4e9 	.word	0x0000f4e9
    fc04:	0000f585 	.word	0x0000f585
    fc08:	0000f41d 	.word	0x0000f41d

0000fc0c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    fc0c:	b580      	push	{r7, lr}
    fc0e:	b086      	sub	sp, #24
    fc10:	af00      	add	r7, sp, #0
    fc12:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    fc14:	687b      	ldr	r3, [r7, #4]
    fc16:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    fc18:	687b      	ldr	r3, [r7, #4]
    fc1a:	681b      	ldr	r3, [r3, #0]
    fc1c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    fc1e:	697b      	ldr	r3, [r7, #20]
    fc20:	7b1b      	ldrb	r3, [r3, #12]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d001      	beq.n	fc2a <n25q256a_disable_xip+0x1e>
    fc26:	2306      	movs	r3, #6
    fc28:	e000      	b.n	fc2c <n25q256a_disable_xip+0x20>
    fc2a:	2300      	movs	r3, #0
    fc2c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    fc2e:	2100      	movs	r1, #0
    fc30:	6878      	ldr	r0, [r7, #4]
    fc32:	4b15      	ldr	r3, [pc, #84]	; (fc88 <n25q256a_disable_xip+0x7c>)
    fc34:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    fc36:	7bfb      	ldrb	r3, [r7, #15]
    fc38:	2285      	movs	r2, #133	; 0x85
    fc3a:	4619      	mov	r1, r3
    fc3c:	6878      	ldr	r0, [r7, #4]
    fc3e:	4b13      	ldr	r3, [pc, #76]	; (fc8c <n25q256a_disable_xip+0x80>)
    fc40:	4798      	blx	r3
    fc42:	4603      	mov	r3, r0
    fc44:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    fc46:	7bbb      	ldrb	r3, [r7, #14]
    fc48:	f003 0308 	and.w	r3, r3, #8
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d113      	bne.n	fc78 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    fc50:	697b      	ldr	r3, [r7, #20]
    fc52:	689b      	ldr	r3, [r3, #8]
    fc54:	2b00      	cmp	r3, #0
    fc56:	d00f      	beq.n	fc78 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    fc58:	693b      	ldr	r3, [r7, #16]
    fc5a:	681b      	ldr	r3, [r3, #0]
    fc5c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    fc5e:	6938      	ldr	r0, [r7, #16]
    fc60:	4b0b      	ldr	r3, [pc, #44]	; (fc90 <n25q256a_disable_xip+0x84>)
    fc62:	4798      	blx	r3
			n25q->pin_exit_xip();
    fc64:	697b      	ldr	r3, [r7, #20]
    fc66:	689b      	ldr	r3, [r3, #8]
    fc68:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    fc6a:	68b9      	ldr	r1, [r7, #8]
    fc6c:	6938      	ldr	r0, [r7, #16]
    fc6e:	4b09      	ldr	r3, [pc, #36]	; (fc94 <n25q256a_disable_xip+0x88>)
    fc70:	4798      	blx	r3
			qspi_sync_enable(descr);
    fc72:	6938      	ldr	r0, [r7, #16]
    fc74:	4b08      	ldr	r3, [pc, #32]	; (fc98 <n25q256a_disable_xip+0x8c>)
    fc76:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    fc78:	697b      	ldr	r3, [r7, #20]
    fc7a:	2200      	movs	r2, #0
    fc7c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    fc7e:	2300      	movs	r3, #0
}
    fc80:	4618      	mov	r0, r3
    fc82:	3718      	adds	r7, #24
    fc84:	46bd      	mov	sp, r7
    fc86:	bd80      	pop	{r7, pc}
    fc88:	0000f41d 	.word	0x0000f41d
    fc8c:	0000f4e9 	.word	0x0000f4e9
    fc90:	000063c5 	.word	0x000063c5
    fc94:	0000633d 	.word	0x0000633d
    fc98:	00006389 	.word	0x00006389

0000fc9c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    fc9c:	b480      	push	{r7}
    fc9e:	b085      	sub	sp, #20
    fca0:	af00      	add	r7, sp, #0
    fca2:	60f8      	str	r0, [r7, #12]
    fca4:	60b9      	str	r1, [r7, #8]
    fca6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    fca8:	68fb      	ldr	r3, [r7, #12]
    fcaa:	68ba      	ldr	r2, [r7, #8]
    fcac:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    fcae:	68fb      	ldr	r3, [r7, #12]
    fcb0:	687a      	ldr	r2, [r7, #4]
    fcb2:	605a      	str	r2, [r3, #4]

	return me;
    fcb4:	68fb      	ldr	r3, [r7, #12]
}
    fcb6:	4618      	mov	r0, r3
    fcb8:	3714      	adds	r7, #20
    fcba:	46bd      	mov	sp, r7
    fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    fcc0:	4770      	bx	lr

0000fcc2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    fcc2:	b480      	push	{r7}
    fcc4:	b083      	sub	sp, #12
    fcc6:	af00      	add	r7, sp, #0
    fcc8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    fcca:	687b      	ldr	r3, [r7, #4]
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	b29a      	uxth	r2, r3
    fcd0:	687b      	ldr	r3, [r7, #4]
    fcd2:	3301      	adds	r3, #1
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	b29b      	uxth	r3, r3
    fcd8:	021b      	lsls	r3, r3, #8
    fcda:	b29b      	uxth	r3, r3
    fcdc:	4413      	add	r3, r2
    fcde:	b29b      	uxth	r3, r3
}
    fce0:	4618      	mov	r0, r3
    fce2:	370c      	adds	r7, #12
    fce4:	46bd      	mov	sp, r7
    fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fcea:	4770      	bx	lr

0000fcec <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    fcec:	b480      	push	{r7}
    fcee:	b083      	sub	sp, #12
    fcf0:	af00      	add	r7, sp, #0
    fcf2:	6078      	str	r0, [r7, #4]
	return desc[0];
    fcf4:	687b      	ldr	r3, [r7, #4]
    fcf6:	781b      	ldrb	r3, [r3, #0]
}
    fcf8:	4618      	mov	r0, r3
    fcfa:	370c      	adds	r7, #12
    fcfc:	46bd      	mov	sp, r7
    fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd02:	4770      	bx	lr

0000fd04 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    fd04:	b580      	push	{r7, lr}
    fd06:	b082      	sub	sp, #8
    fd08:	af00      	add	r7, sp, #0
    fd0a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    fd0c:	6878      	ldr	r0, [r7, #4]
    fd0e:	4b05      	ldr	r3, [pc, #20]	; (fd24 <usb_desc_next+0x20>)
    fd10:	4798      	blx	r3
    fd12:	4603      	mov	r3, r0
    fd14:	461a      	mov	r2, r3
    fd16:	687b      	ldr	r3, [r7, #4]
    fd18:	4413      	add	r3, r2
}
    fd1a:	4618      	mov	r0, r3
    fd1c:	3708      	adds	r7, #8
    fd1e:	46bd      	mov	sp, r7
    fd20:	bd80      	pop	{r7, pc}
    fd22:	bf00      	nop
    fd24:	0000fced 	.word	0x0000fced

0000fd28 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    fd28:	b580      	push	{r7, lr}
    fd2a:	b08c      	sub	sp, #48	; 0x30
    fd2c:	af00      	add	r7, sp, #0
    fd2e:	6078      	str	r0, [r7, #4]
    fd30:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    fd32:	687b      	ldr	r3, [r7, #4]
    fd34:	689b      	ldr	r3, [r3, #8]
    fd36:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    fd38:	683b      	ldr	r3, [r7, #0]
    fd3a:	681b      	ldr	r3, [r3, #0]
    fd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    fd3e:	2300      	movs	r3, #0
    fd40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fd44:	e08f      	b.n	fe66 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    fd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd48:	2b00      	cmp	r3, #0
    fd4a:	d102      	bne.n	fd52 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    fd4c:	f06f 0309 	mvn.w	r3, #9
    fd50:	e092      	b.n	fe78 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd54:	789b      	ldrb	r3, [r3, #2]
    fd56:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd5a:	795b      	ldrb	r3, [r3, #5]
    fd5c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    fd5e:	7c7b      	ldrb	r3, [r7, #17]
    fd60:	2b02      	cmp	r3, #2
    fd62:	d002      	beq.n	fd6a <cdcdf_acm_enable+0x42>
    fd64:	7c7b      	ldrb	r3, [r7, #17]
    fd66:	2b0a      	cmp	r3, #10
    fd68:	d121      	bne.n	fdae <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    fd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd6e:	6a3a      	ldr	r2, [r7, #32]
    fd70:	5cd2      	ldrb	r2, [r2, r3]
    fd72:	7bbb      	ldrb	r3, [r7, #14]
    fd74:	429a      	cmp	r2, r3
    fd76:	d102      	bne.n	fd7e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    fd78:	f06f 0311 	mvn.w	r3, #17
    fd7c:	e07c      	b.n	fe78 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    fd7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd82:	6a3a      	ldr	r2, [r7, #32]
    fd84:	5cd3      	ldrb	r3, [r2, r3]
    fd86:	2bff      	cmp	r3, #255	; 0xff
    fd88:	d002      	beq.n	fd90 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    fd8a:	f06f 031b 	mvn.w	r3, #27
    fd8e:	e073      	b.n	fe78 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    fd90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fd94:	7bb9      	ldrb	r1, [r7, #14]
    fd96:	6a3a      	ldr	r2, [r7, #32]
    fd98:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    fd9a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    fd9c:	683b      	ldr	r3, [r7, #0]
    fd9e:	685b      	ldr	r3, [r3, #4]
    fda0:	2205      	movs	r2, #5
    fda2:	4619      	mov	r1, r3
    fda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fda6:	4b36      	ldr	r3, [pc, #216]	; (fe80 <cdcdf_acm_enable+0x158>)
    fda8:	4798      	blx	r3
    fdaa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    fdac:	e047      	b.n	fe3e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    fdae:	f06f 0309 	mvn.w	r3, #9
    fdb2:	e061      	b.n	fe78 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdb6:	789b      	ldrb	r3, [r3, #2]
    fdb8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdbc:	78db      	ldrb	r3, [r3, #3]
    fdbe:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdc2:	3304      	adds	r3, #4
    fdc4:	4618      	mov	r0, r3
    fdc6:	4b2f      	ldr	r3, [pc, #188]	; (fe84 <cdcdf_acm_enable+0x15c>)
    fdc8:	4798      	blx	r3
    fdca:	4603      	mov	r3, r0
    fdcc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    fdce:	7ebb      	ldrb	r3, [r7, #26]
    fdd0:	7ef9      	ldrb	r1, [r7, #27]
    fdd2:	8bba      	ldrh	r2, [r7, #28]
    fdd4:	4618      	mov	r0, r3
    fdd6:	4b2c      	ldr	r3, [pc, #176]	; (fe88 <cdcdf_acm_enable+0x160>)
    fdd8:	4798      	blx	r3
    fdda:	4603      	mov	r3, r0
    fddc:	2b00      	cmp	r3, #0
    fdde:	d002      	beq.n	fde6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    fde0:	f06f 0313 	mvn.w	r3, #19
    fde4:	e048      	b.n	fe78 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    fde6:	7ebb      	ldrb	r3, [r7, #26]
    fde8:	b25b      	sxtb	r3, r3
    fdea:	2b00      	cmp	r3, #0
    fdec:	da0f      	bge.n	fe0e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    fdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fdf2:	7eb9      	ldrb	r1, [r7, #26]
    fdf4:	6a3a      	ldr	r2, [r7, #32]
    fdf6:	4413      	add	r3, r2
    fdf8:	460a      	mov	r2, r1
    fdfa:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    fdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fe00:	6a3a      	ldr	r2, [r7, #32]
    fe02:	4413      	add	r3, r2
    fe04:	789b      	ldrb	r3, [r3, #2]
    fe06:	4618      	mov	r0, r3
    fe08:	4b20      	ldr	r3, [pc, #128]	; (fe8c <cdcdf_acm_enable+0x164>)
    fe0a:	4798      	blx	r3
    fe0c:	e007      	b.n	fe1e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    fe0e:	7eba      	ldrb	r2, [r7, #26]
    fe10:	6a3b      	ldr	r3, [r7, #32]
    fe12:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    fe14:	6a3b      	ldr	r3, [r7, #32]
    fe16:	791b      	ldrb	r3, [r3, #4]
    fe18:	4618      	mov	r0, r3
    fe1a:	4b1c      	ldr	r3, [pc, #112]	; (fe8c <cdcdf_acm_enable+0x164>)
    fe1c:	4798      	blx	r3
			}
			desc->sod = ep;
    fe1e:	683b      	ldr	r3, [r7, #0]
    fe20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fe22:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    fe24:	683b      	ldr	r3, [r7, #0]
    fe26:	681b      	ldr	r3, [r3, #0]
    fe28:	4618      	mov	r0, r3
    fe2a:	4b19      	ldr	r3, [pc, #100]	; (fe90 <cdcdf_acm_enable+0x168>)
    fe2c:	4798      	blx	r3
    fe2e:	4602      	mov	r2, r0
    fe30:	683b      	ldr	r3, [r7, #0]
    fe32:	685b      	ldr	r3, [r3, #4]
    fe34:	4619      	mov	r1, r3
    fe36:	4610      	mov	r0, r2
    fe38:	4b16      	ldr	r3, [pc, #88]	; (fe94 <cdcdf_acm_enable+0x16c>)
    fe3a:	4798      	blx	r3
    fe3c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe40:	2b00      	cmp	r3, #0
    fe42:	d1b7      	bne.n	fdb4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    fe44:	683b      	ldr	r3, [r7, #0]
    fe46:	681b      	ldr	r3, [r3, #0]
    fe48:	4618      	mov	r0, r3
    fe4a:	4b11      	ldr	r3, [pc, #68]	; (fe90 <cdcdf_acm_enable+0x168>)
    fe4c:	4798      	blx	r3
    fe4e:	683b      	ldr	r3, [r7, #0]
    fe50:	685b      	ldr	r3, [r3, #4]
    fe52:	2204      	movs	r2, #4
    fe54:	4619      	mov	r1, r3
    fe56:	4b0a      	ldr	r3, [pc, #40]	; (fe80 <cdcdf_acm_enable+0x158>)
    fe58:	4798      	blx	r3
    fe5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    fe5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fe60:	3301      	adds	r3, #1
    fe62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fe66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    fe6a:	2b01      	cmp	r3, #1
    fe6c:	f67f af6b 	bls.w	fd46 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    fe70:	4b09      	ldr	r3, [pc, #36]	; (fe98 <cdcdf_acm_enable+0x170>)
    fe72:	2201      	movs	r2, #1
    fe74:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    fe76:	2300      	movs	r3, #0
}
    fe78:	4618      	mov	r0, r3
    fe7a:	3730      	adds	r7, #48	; 0x30
    fe7c:	46bd      	mov	sp, r7
    fe7e:	bd80      	pop	{r7, pc}
    fe80:	00010fad 	.word	0x00010fad
    fe84:	0000fcc3 	.word	0x0000fcc3
    fe88:	00006f49 	.word	0x00006f49
    fe8c:	00007035 	.word	0x00007035
    fe90:	0000fd05 	.word	0x0000fd05
    fe94:	00011009 	.word	0x00011009
    fe98:	20002034 	.word	0x20002034

0000fe9c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    fe9c:	b580      	push	{r7, lr}
    fe9e:	b088      	sub	sp, #32
    fea0:	af00      	add	r7, sp, #0
    fea2:	6078      	str	r0, [r7, #4]
    fea4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    fea6:	687b      	ldr	r3, [r7, #4]
    fea8:	689b      	ldr	r3, [r3, #8]
    feaa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    feac:	683b      	ldr	r3, [r7, #0]
    feae:	2b00      	cmp	r3, #0
    feb0:	d00c      	beq.n	fecc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    feb2:	683b      	ldr	r3, [r7, #0]
    feb4:	681b      	ldr	r3, [r3, #0]
    feb6:	795b      	ldrb	r3, [r3, #5]
    feb8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    feba:	7c7b      	ldrb	r3, [r7, #17]
    febc:	2b02      	cmp	r3, #2
    febe:	d005      	beq.n	fecc <cdcdf_acm_disable+0x30>
    fec0:	7c7b      	ldrb	r3, [r7, #17]
    fec2:	2b0a      	cmp	r3, #10
    fec4:	d002      	beq.n	fecc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    fec6:	f06f 0309 	mvn.w	r3, #9
    feca:	e035      	b.n	ff38 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    fecc:	2300      	movs	r3, #0
    fece:	77fb      	strb	r3, [r7, #31]
    fed0:	e01f      	b.n	ff12 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    fed2:	7ffb      	ldrb	r3, [r7, #31]
    fed4:	69ba      	ldr	r2, [r7, #24]
    fed6:	5cd3      	ldrb	r3, [r2, r3]
    fed8:	2bff      	cmp	r3, #255	; 0xff
    feda:	d016      	beq.n	ff0a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    fedc:	7ffb      	ldrb	r3, [r7, #31]
    fede:	69ba      	ldr	r2, [r7, #24]
    fee0:	21ff      	movs	r1, #255	; 0xff
    fee2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    fee4:	7ffb      	ldrb	r3, [r7, #31]
    fee6:	69ba      	ldr	r2, [r7, #24]
    fee8:	4413      	add	r3, r2
    feea:	789b      	ldrb	r3, [r3, #2]
    feec:	2bff      	cmp	r3, #255	; 0xff
    feee:	d00d      	beq.n	ff0c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    fef0:	7ffb      	ldrb	r3, [r7, #31]
    fef2:	69ba      	ldr	r2, [r7, #24]
    fef4:	4413      	add	r3, r2
    fef6:	789b      	ldrb	r3, [r3, #2]
    fef8:	4618      	mov	r0, r3
    fefa:	4b11      	ldr	r3, [pc, #68]	; (ff40 <cdcdf_acm_disable+0xa4>)
    fefc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    fefe:	7ffb      	ldrb	r3, [r7, #31]
    ff00:	69ba      	ldr	r2, [r7, #24]
    ff02:	4413      	add	r3, r2
    ff04:	22ff      	movs	r2, #255	; 0xff
    ff06:	709a      	strb	r2, [r3, #2]
    ff08:	e000      	b.n	ff0c <cdcdf_acm_disable+0x70>
			continue;
    ff0a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    ff0c:	7ffb      	ldrb	r3, [r7, #31]
    ff0e:	3301      	adds	r3, #1
    ff10:	77fb      	strb	r3, [r7, #31]
    ff12:	7ffb      	ldrb	r3, [r7, #31]
    ff14:	2b01      	cmp	r3, #1
    ff16:	d9dc      	bls.n	fed2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    ff18:	69bb      	ldr	r3, [r7, #24]
    ff1a:	791b      	ldrb	r3, [r3, #4]
    ff1c:	2bff      	cmp	r3, #255	; 0xff
    ff1e:	d007      	beq.n	ff30 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    ff20:	69bb      	ldr	r3, [r7, #24]
    ff22:	791b      	ldrb	r3, [r3, #4]
    ff24:	4618      	mov	r0, r3
    ff26:	4b06      	ldr	r3, [pc, #24]	; (ff40 <cdcdf_acm_disable+0xa4>)
    ff28:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ff2a:	69bb      	ldr	r3, [r7, #24]
    ff2c:	22ff      	movs	r2, #255	; 0xff
    ff2e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    ff30:	4b04      	ldr	r3, [pc, #16]	; (ff44 <cdcdf_acm_disable+0xa8>)
    ff32:	2200      	movs	r2, #0
    ff34:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ff36:	2300      	movs	r3, #0
}
    ff38:	4618      	mov	r0, r3
    ff3a:	3720      	adds	r7, #32
    ff3c:	46bd      	mov	sp, r7
    ff3e:	bd80      	pop	{r7, pc}
    ff40:	00006fe5 	.word	0x00006fe5
    ff44:	20002034 	.word	0x20002034

0000ff48 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    ff48:	b580      	push	{r7, lr}
    ff4a:	b084      	sub	sp, #16
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	60f8      	str	r0, [r7, #12]
    ff50:	460b      	mov	r3, r1
    ff52:	607a      	str	r2, [r7, #4]
    ff54:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    ff56:	7afb      	ldrb	r3, [r7, #11]
    ff58:	2b01      	cmp	r3, #1
    ff5a:	d009      	beq.n	ff70 <cdcdf_acm_ctrl+0x28>
    ff5c:	2b02      	cmp	r3, #2
    ff5e:	d00d      	beq.n	ff7c <cdcdf_acm_ctrl+0x34>
    ff60:	2b00      	cmp	r3, #0
    ff62:	d10e      	bne.n	ff82 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    ff64:	6879      	ldr	r1, [r7, #4]
    ff66:	68f8      	ldr	r0, [r7, #12]
    ff68:	4b09      	ldr	r3, [pc, #36]	; (ff90 <cdcdf_acm_ctrl+0x48>)
    ff6a:	4798      	blx	r3
    ff6c:	4603      	mov	r3, r0
    ff6e:	e00a      	b.n	ff86 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    ff70:	6879      	ldr	r1, [r7, #4]
    ff72:	68f8      	ldr	r0, [r7, #12]
    ff74:	4b07      	ldr	r3, [pc, #28]	; (ff94 <cdcdf_acm_ctrl+0x4c>)
    ff76:	4798      	blx	r3
    ff78:	4603      	mov	r3, r0
    ff7a:	e004      	b.n	ff86 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    ff7c:	f06f 031a 	mvn.w	r3, #26
    ff80:	e001      	b.n	ff86 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    ff82:	f06f 030c 	mvn.w	r3, #12
	}
}
    ff86:	4618      	mov	r0, r3
    ff88:	3710      	adds	r7, #16
    ff8a:	46bd      	mov	sp, r7
    ff8c:	bd80      	pop	{r7, pc}
    ff8e:	bf00      	nop
    ff90:	0000fd29 	.word	0x0000fd29
    ff94:	0000fe9d 	.word	0x0000fe9d

0000ff98 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ff98:	b590      	push	{r4, r7, lr}
    ff9a:	b087      	sub	sp, #28
    ff9c:	af00      	add	r7, sp, #0
    ff9e:	4603      	mov	r3, r0
    ffa0:	6039      	str	r1, [r7, #0]
    ffa2:	71fb      	strb	r3, [r7, #7]
    ffa4:	4613      	mov	r3, r2
    ffa6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    ffa8:	683b      	ldr	r3, [r7, #0]
    ffaa:	799a      	ldrb	r2, [r3, #6]
    ffac:	79db      	ldrb	r3, [r3, #7]
    ffae:	021b      	lsls	r3, r3, #8
    ffb0:	4313      	orrs	r3, r2
    ffb2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    ffb4:	4b2b      	ldr	r3, [pc, #172]	; (10064 <STACK_SIZE+0x64>)
    ffb6:	4798      	blx	r3
    ffb8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    ffba:	683b      	ldr	r3, [r7, #0]
    ffbc:	785b      	ldrb	r3, [r3, #1]
    ffbe:	2b20      	cmp	r3, #32
    ffc0:	d002      	beq.n	ffc8 <cdcdf_acm_set_req+0x30>
    ffc2:	2b22      	cmp	r3, #34	; 0x22
    ffc4:	d034      	beq.n	10030 <STACK_SIZE+0x30>
    ffc6:	e046      	b.n	10056 <STACK_SIZE+0x56>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ffc8:	8afb      	ldrh	r3, [r7, #22]
    ffca:	2b07      	cmp	r3, #7
    ffcc:	d002      	beq.n	ffd4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    ffce:	f04f 33ff 	mov.w	r3, #4294967295
    ffd2:	e042      	b.n	1005a <STACK_SIZE+0x5a>
		}
		if (USB_SETUP_STAGE == stage) {
    ffd4:	79bb      	ldrb	r3, [r7, #6]
    ffd6:	2b00      	cmp	r3, #0
    ffd8:	d107      	bne.n	ffea <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    ffda:	8afa      	ldrh	r2, [r7, #22]
    ffdc:	79f8      	ldrb	r0, [r7, #7]
    ffde:	2300      	movs	r3, #0
    ffe0:	6939      	ldr	r1, [r7, #16]
    ffe2:	4c21      	ldr	r4, [pc, #132]	; (10068 <STACK_SIZE+0x68>)
    ffe4:	47a0      	blx	r4
    ffe6:	4603      	mov	r3, r0
    ffe8:	e037      	b.n	1005a <STACK_SIZE+0x5a>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    ffea:	693a      	ldr	r2, [r7, #16]
    ffec:	f107 0308 	add.w	r3, r7, #8
    fff0:	6810      	ldr	r0, [r2, #0]
    fff2:	6018      	str	r0, [r3, #0]
    fff4:	8891      	ldrh	r1, [r2, #4]
    fff6:	7992      	ldrb	r2, [r2, #6]
    fff8:	8099      	strh	r1, [r3, #4]
    fffa:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    fffc:	4b1b      	ldr	r3, [pc, #108]	; (1006c <STACK_SIZE+0x6c>)
    fffe:	681b      	ldr	r3, [r3, #0]
   10000:	2b00      	cmp	r3, #0
   10002:	d008      	beq.n	10016 <STACK_SIZE+0x16>
   10004:	4b19      	ldr	r3, [pc, #100]	; (1006c <STACK_SIZE+0x6c>)
   10006:	681b      	ldr	r3, [r3, #0]
   10008:	f107 0208 	add.w	r2, r7, #8
   1000c:	4610      	mov	r0, r2
   1000e:	4798      	blx	r3
   10010:	4603      	mov	r3, r0
   10012:	2b00      	cmp	r3, #0
   10014:	d00a      	beq.n	1002c <STACK_SIZE+0x2c>
				usbd_cdc_line_coding = line_coding_tmp;
   10016:	4b16      	ldr	r3, [pc, #88]	; (10070 <STACK_SIZE+0x70>)
   10018:	f107 0208 	add.w	r2, r7, #8
   1001c:	e892 0003 	ldmia.w	r2, {r0, r1}
   10020:	6018      	str	r0, [r3, #0]
   10022:	3304      	adds	r3, #4
   10024:	8019      	strh	r1, [r3, #0]
   10026:	3302      	adds	r3, #2
   10028:	0c0a      	lsrs	r2, r1, #16
   1002a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   1002c:	2300      	movs	r3, #0
   1002e:	e014      	b.n	1005a <STACK_SIZE+0x5a>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   10030:	2300      	movs	r3, #0
   10032:	2200      	movs	r2, #0
   10034:	2100      	movs	r1, #0
   10036:	2000      	movs	r0, #0
   10038:	4c0b      	ldr	r4, [pc, #44]	; (10068 <STACK_SIZE+0x68>)
   1003a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   1003c:	4b0d      	ldr	r3, [pc, #52]	; (10074 <STACK_SIZE+0x74>)
   1003e:	681b      	ldr	r3, [r3, #0]
   10040:	2b00      	cmp	r3, #0
   10042:	d006      	beq.n	10052 <STACK_SIZE+0x52>
			cdcdf_acm_notify_state(req->wValue);
   10044:	4b0b      	ldr	r3, [pc, #44]	; (10074 <STACK_SIZE+0x74>)
   10046:	681b      	ldr	r3, [r3, #0]
   10048:	683a      	ldr	r2, [r7, #0]
   1004a:	8852      	ldrh	r2, [r2, #2]
   1004c:	b292      	uxth	r2, r2
   1004e:	4610      	mov	r0, r2
   10050:	4798      	blx	r3
		}
		return ERR_NONE;
   10052:	2300      	movs	r3, #0
   10054:	e001      	b.n	1005a <STACK_SIZE+0x5a>
	default:
		return ERR_INVALID_ARG;
   10056:	f06f 030c 	mvn.w	r3, #12
	}
}
   1005a:	4618      	mov	r0, r3
   1005c:	371c      	adds	r7, #28
   1005e:	46bd      	mov	sp, r7
   10060:	bd90      	pop	{r4, r7, pc}
   10062:	bf00      	nop
   10064:	00010ea9 	.word	0x00010ea9
   10068:	00010d1d 	.word	0x00010d1d
   1006c:	20002048 	.word	0x20002048
   10070:	2000203c 	.word	0x2000203c
   10074:	20002044 	.word	0x20002044

00010078 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10078:	b590      	push	{r4, r7, lr}
   1007a:	b085      	sub	sp, #20
   1007c:	af00      	add	r7, sp, #0
   1007e:	4603      	mov	r3, r0
   10080:	6039      	str	r1, [r7, #0]
   10082:	71fb      	strb	r3, [r7, #7]
   10084:	4613      	mov	r3, r2
   10086:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   10088:	683b      	ldr	r3, [r7, #0]
   1008a:	799a      	ldrb	r2, [r3, #6]
   1008c:	79db      	ldrb	r3, [r3, #7]
   1008e:	021b      	lsls	r3, r3, #8
   10090:	4313      	orrs	r3, r2
   10092:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   10094:	79bb      	ldrb	r3, [r7, #6]
   10096:	2b01      	cmp	r3, #1
   10098:	d101      	bne.n	1009e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   1009a:	2300      	movs	r3, #0
   1009c:	e013      	b.n	100c6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   1009e:	683b      	ldr	r3, [r7, #0]
   100a0:	785b      	ldrb	r3, [r3, #1]
   100a2:	2b21      	cmp	r3, #33	; 0x21
   100a4:	d10d      	bne.n	100c2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   100a6:	89fb      	ldrh	r3, [r7, #14]
   100a8:	2b07      	cmp	r3, #7
   100aa:	d002      	beq.n	100b2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   100ac:	f04f 33ff 	mov.w	r3, #4294967295
   100b0:	e009      	b.n	100c6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   100b2:	89fa      	ldrh	r2, [r7, #14]
   100b4:	79f8      	ldrb	r0, [r7, #7]
   100b6:	2300      	movs	r3, #0
   100b8:	4905      	ldr	r1, [pc, #20]	; (100d0 <cdcdf_acm_get_req+0x58>)
   100ba:	4c06      	ldr	r4, [pc, #24]	; (100d4 <cdcdf_acm_get_req+0x5c>)
   100bc:	47a0      	blx	r4
   100be:	4603      	mov	r3, r0
   100c0:	e001      	b.n	100c6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   100c2:	f06f 030c 	mvn.w	r3, #12
	}
}
   100c6:	4618      	mov	r0, r3
   100c8:	3714      	adds	r7, #20
   100ca:	46bd      	mov	sp, r7
   100cc:	bd90      	pop	{r4, r7, pc}
   100ce:	bf00      	nop
   100d0:	2000203c 	.word	0x2000203c
   100d4:	00010d1d 	.word	0x00010d1d

000100d8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   100d8:	b580      	push	{r7, lr}
   100da:	b082      	sub	sp, #8
   100dc:	af00      	add	r7, sp, #0
   100de:	4603      	mov	r3, r0
   100e0:	6039      	str	r1, [r7, #0]
   100e2:	71fb      	strb	r3, [r7, #7]
   100e4:	4613      	mov	r3, r2
   100e6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   100e8:	683b      	ldr	r3, [r7, #0]
   100ea:	781b      	ldrb	r3, [r3, #0]
   100ec:	095b      	lsrs	r3, r3, #5
   100ee:	b2db      	uxtb	r3, r3
   100f0:	f003 0303 	and.w	r3, r3, #3
   100f4:	2b01      	cmp	r3, #1
   100f6:	d002      	beq.n	100fe <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   100f8:	f06f 0309 	mvn.w	r3, #9
   100fc:	e026      	b.n	1014c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   100fe:	683b      	ldr	r3, [r7, #0]
   10100:	889b      	ldrh	r3, [r3, #4]
   10102:	b29a      	uxth	r2, r3
   10104:	4b13      	ldr	r3, [pc, #76]	; (10154 <cdcdf_acm_req+0x7c>)
   10106:	781b      	ldrb	r3, [r3, #0]
   10108:	b29b      	uxth	r3, r3
   1010a:	429a      	cmp	r2, r3
   1010c:	d007      	beq.n	1011e <cdcdf_acm_req+0x46>
   1010e:	683b      	ldr	r3, [r7, #0]
   10110:	889b      	ldrh	r3, [r3, #4]
   10112:	b29a      	uxth	r2, r3
   10114:	4b0f      	ldr	r3, [pc, #60]	; (10154 <cdcdf_acm_req+0x7c>)
   10116:	785b      	ldrb	r3, [r3, #1]
   10118:	b29b      	uxth	r3, r3
   1011a:	429a      	cmp	r2, r3
   1011c:	d114      	bne.n	10148 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   1011e:	683b      	ldr	r3, [r7, #0]
   10120:	781b      	ldrb	r3, [r3, #0]
   10122:	b25b      	sxtb	r3, r3
   10124:	2b00      	cmp	r3, #0
   10126:	da07      	bge.n	10138 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   10128:	79ba      	ldrb	r2, [r7, #6]
   1012a:	79fb      	ldrb	r3, [r7, #7]
   1012c:	6839      	ldr	r1, [r7, #0]
   1012e:	4618      	mov	r0, r3
   10130:	4b09      	ldr	r3, [pc, #36]	; (10158 <cdcdf_acm_req+0x80>)
   10132:	4798      	blx	r3
   10134:	4603      	mov	r3, r0
   10136:	e009      	b.n	1014c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   10138:	79ba      	ldrb	r2, [r7, #6]
   1013a:	79fb      	ldrb	r3, [r7, #7]
   1013c:	6839      	ldr	r1, [r7, #0]
   1013e:	4618      	mov	r0, r3
   10140:	4b06      	ldr	r3, [pc, #24]	; (1015c <cdcdf_acm_req+0x84>)
   10142:	4798      	blx	r3
   10144:	4603      	mov	r3, r0
   10146:	e001      	b.n	1014c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   10148:	f06f 0309 	mvn.w	r3, #9
	}
}
   1014c:	4618      	mov	r0, r3
   1014e:	3708      	adds	r7, #8
   10150:	46bd      	mov	sp, r7
   10152:	bd80      	pop	{r7, pc}
   10154:	20002034 	.word	0x20002034
   10158:	00010079 	.word	0x00010079
   1015c:	0000ff99 	.word	0x0000ff99

00010160 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   10160:	b580      	push	{r7, lr}
   10162:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   10164:	4b0b      	ldr	r3, [pc, #44]	; (10194 <cdcdf_acm_init+0x34>)
   10166:	4798      	blx	r3
   10168:	4603      	mov	r3, r0
   1016a:	2b01      	cmp	r3, #1
   1016c:	d902      	bls.n	10174 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   1016e:	f06f 0310 	mvn.w	r3, #16
   10172:	e00d      	b.n	10190 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   10174:	4b08      	ldr	r3, [pc, #32]	; (10198 <cdcdf_acm_init+0x38>)
   10176:	4a09      	ldr	r2, [pc, #36]	; (1019c <cdcdf_acm_init+0x3c>)
   10178:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   1017a:	4b07      	ldr	r3, [pc, #28]	; (10198 <cdcdf_acm_init+0x38>)
   1017c:	4a08      	ldr	r2, [pc, #32]	; (101a0 <cdcdf_acm_init+0x40>)
   1017e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   10180:	4805      	ldr	r0, [pc, #20]	; (10198 <cdcdf_acm_init+0x38>)
   10182:	4b08      	ldr	r3, [pc, #32]	; (101a4 <cdcdf_acm_init+0x44>)
   10184:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   10186:	4908      	ldr	r1, [pc, #32]	; (101a8 <cdcdf_acm_init+0x48>)
   10188:	2001      	movs	r0, #1
   1018a:	4b08      	ldr	r3, [pc, #32]	; (101ac <cdcdf_acm_init+0x4c>)
   1018c:	4798      	blx	r3
	return ERR_NONE;
   1018e:	2300      	movs	r3, #0
}
   10190:	4618      	mov	r0, r3
   10192:	bd80      	pop	{r7, pc}
   10194:	00010ec1 	.word	0x00010ec1
   10198:	20002028 	.word	0x20002028
   1019c:	0000ff49 	.word	0x0000ff49
   101a0:	20002034 	.word	0x20002034
   101a4:	00010e29 	.word	0x00010e29
   101a8:	20000600 	.word	0x20000600
   101ac:	00010d59 	.word	0x00010d59

000101b0 <usb_get_u16>:
{
   101b0:	b480      	push	{r7}
   101b2:	b083      	sub	sp, #12
   101b4:	af00      	add	r7, sp, #0
   101b6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   101b8:	687b      	ldr	r3, [r7, #4]
   101ba:	781b      	ldrb	r3, [r3, #0]
   101bc:	b29a      	uxth	r2, r3
   101be:	687b      	ldr	r3, [r7, #4]
   101c0:	3301      	adds	r3, #1
   101c2:	781b      	ldrb	r3, [r3, #0]
   101c4:	b29b      	uxth	r3, r3
   101c6:	021b      	lsls	r3, r3, #8
   101c8:	b29b      	uxth	r3, r3
   101ca:	4413      	add	r3, r2
   101cc:	b29b      	uxth	r3, r3
}
   101ce:	4618      	mov	r0, r3
   101d0:	370c      	adds	r7, #12
   101d2:	46bd      	mov	sp, r7
   101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   101d8:	4770      	bx	lr

000101da <usb_desc_len>:
{
   101da:	b480      	push	{r7}
   101dc:	b083      	sub	sp, #12
   101de:	af00      	add	r7, sp, #0
   101e0:	6078      	str	r0, [r7, #4]
	return desc[0];
   101e2:	687b      	ldr	r3, [r7, #4]
   101e4:	781b      	ldrb	r3, [r3, #0]
}
   101e6:	4618      	mov	r0, r3
   101e8:	370c      	adds	r7, #12
   101ea:	46bd      	mov	sp, r7
   101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   101f0:	4770      	bx	lr
	...

000101f4 <usb_desc_next>:
{
   101f4:	b580      	push	{r7, lr}
   101f6:	b082      	sub	sp, #8
   101f8:	af00      	add	r7, sp, #0
   101fa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   101fc:	6878      	ldr	r0, [r7, #4]
   101fe:	4b05      	ldr	r3, [pc, #20]	; (10214 <usb_desc_next+0x20>)
   10200:	4798      	blx	r3
   10202:	4603      	mov	r3, r0
   10204:	461a      	mov	r2, r3
   10206:	687b      	ldr	r3, [r7, #4]
   10208:	4413      	add	r3, r2
}
   1020a:	4618      	mov	r0, r3
   1020c:	3708      	adds	r7, #8
   1020e:	46bd      	mov	sp, r7
   10210:	bd80      	pop	{r7, pc}
   10212:	bf00      	nop
   10214:	000101db 	.word	0x000101db

00010218 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   10218:	b580      	push	{r7, lr}
   1021a:	b082      	sub	sp, #8
   1021c:	af00      	add	r7, sp, #0
   1021e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10220:	687b      	ldr	r3, [r7, #4]
   10222:	3302      	adds	r3, #2
   10224:	4618      	mov	r0, r3
   10226:	4b03      	ldr	r3, [pc, #12]	; (10234 <usb_cfg_desc_total_len+0x1c>)
   10228:	4798      	blx	r3
   1022a:	4603      	mov	r3, r0
}
   1022c:	4618      	mov	r0, r3
   1022e:	3708      	adds	r7, #8
   10230:	46bd      	mov	sp, r7
   10232:	bd80      	pop	{r7, pc}
   10234:	000101b1 	.word	0x000101b1

00010238 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   10238:	b590      	push	{r4, r7, lr}
   1023a:	b085      	sub	sp, #20
   1023c:	af00      	add	r7, sp, #0
   1023e:	4603      	mov	r3, r0
   10240:	6039      	str	r1, [r7, #0]
   10242:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   10244:	2300      	movs	r3, #0
   10246:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   10248:	683b      	ldr	r3, [r7, #0]
   1024a:	799a      	ldrb	r2, [r3, #6]
   1024c:	79db      	ldrb	r3, [r3, #7]
   1024e:	021b      	lsls	r3, r3, #8
   10250:	4313      	orrs	r3, r2
   10252:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   10254:	897b      	ldrh	r3, [r7, #10]
   10256:	2b12      	cmp	r3, #18
   10258:	d901      	bls.n	1025e <usbdc_get_dev_desc+0x26>
		length = 0x12;
   1025a:	2312      	movs	r3, #18
   1025c:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   1025e:	68fb      	ldr	r3, [r7, #12]
   10260:	2b00      	cmp	r3, #0
   10262:	d10a      	bne.n	1027a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   10264:	4b0f      	ldr	r3, [pc, #60]	; (102a4 <usbdc_get_dev_desc+0x6c>)
   10266:	681b      	ldr	r3, [r3, #0]
   10268:	6818      	ldr	r0, [r3, #0]
   1026a:	4b0e      	ldr	r3, [pc, #56]	; (102a4 <usbdc_get_dev_desc+0x6c>)
   1026c:	681b      	ldr	r3, [r3, #0]
   1026e:	685b      	ldr	r3, [r3, #4]
   10270:	2201      	movs	r2, #1
   10272:	4619      	mov	r1, r3
   10274:	4b0c      	ldr	r3, [pc, #48]	; (102a8 <usbdc_get_dev_desc+0x70>)
   10276:	4798      	blx	r3
   10278:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   1027a:	68fb      	ldr	r3, [r7, #12]
   1027c:	2b00      	cmp	r3, #0
   1027e:	d101      	bne.n	10284 <usbdc_get_dev_desc+0x4c>
		return false;
   10280:	2300      	movs	r3, #0
   10282:	e00b      	b.n	1029c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   10284:	897a      	ldrh	r2, [r7, #10]
   10286:	79f8      	ldrb	r0, [r7, #7]
   10288:	2300      	movs	r3, #0
   1028a:	68f9      	ldr	r1, [r7, #12]
   1028c:	4c07      	ldr	r4, [pc, #28]	; (102ac <usbdc_get_dev_desc+0x74>)
   1028e:	47a0      	blx	r4
   10290:	4603      	mov	r3, r0
   10292:	2b00      	cmp	r3, #0
   10294:	d001      	beq.n	1029a <usbdc_get_dev_desc+0x62>
		return false;
   10296:	2300      	movs	r3, #0
   10298:	e000      	b.n	1029c <usbdc_get_dev_desc+0x64>
	}
	return true;
   1029a:	2301      	movs	r3, #1
}
   1029c:	4618      	mov	r0, r3
   1029e:	3714      	adds	r7, #20
   102a0:	46bd      	mov	sp, r7
   102a2:	bd90      	pop	{r4, r7, pc}
   102a4:	2000204c 	.word	0x2000204c
   102a8:	00010fad 	.word	0x00010fad
   102ac:	00010d1d 	.word	0x00010d1d

000102b0 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   102b0:	b590      	push	{r4, r7, lr}
   102b2:	b087      	sub	sp, #28
   102b4:	af00      	add	r7, sp, #0
   102b6:	4603      	mov	r3, r0
   102b8:	6039      	str	r1, [r7, #0]
   102ba:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   102bc:	2300      	movs	r3, #0
   102be:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   102c0:	683b      	ldr	r3, [r7, #0]
   102c2:	799a      	ldrb	r2, [r3, #6]
   102c4:	79db      	ldrb	r3, [r3, #7]
   102c6:	021b      	lsls	r3, r3, #8
   102c8:	4313      	orrs	r3, r2
   102ca:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   102cc:	683b      	ldr	r3, [r7, #0]
   102ce:	885b      	ldrh	r3, [r3, #2]
   102d0:	b29b      	uxth	r3, r3
   102d2:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   102d4:	8a7a      	ldrh	r2, [r7, #18]
   102d6:	4b1e      	ldr	r3, [pc, #120]	; (10350 <usbdc_get_cfg_desc+0xa0>)
   102d8:	7f1b      	ldrb	r3, [r3, #28]
   102da:	3b01      	subs	r3, #1
   102dc:	4013      	ands	r3, r2
   102de:	2b00      	cmp	r3, #0
   102e0:	bf0c      	ite	eq
   102e2:	2301      	moveq	r3, #1
   102e4:	2300      	movne	r3, #0
   102e6:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   102e8:	697b      	ldr	r3, [r7, #20]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d10c      	bne.n	10308 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   102ee:	4b18      	ldr	r3, [pc, #96]	; (10350 <usbdc_get_cfg_desc+0xa0>)
   102f0:	681b      	ldr	r3, [r3, #0]
   102f2:	6818      	ldr	r0, [r3, #0]
   102f4:	4b16      	ldr	r3, [pc, #88]	; (10350 <usbdc_get_cfg_desc+0xa0>)
   102f6:	681b      	ldr	r3, [r3, #0]
   102f8:	6859      	ldr	r1, [r3, #4]
   102fa:	7c3b      	ldrb	r3, [r7, #16]
   102fc:	3301      	adds	r3, #1
   102fe:	b2db      	uxtb	r3, r3
   10300:	461a      	mov	r2, r3
   10302:	4b14      	ldr	r3, [pc, #80]	; (10354 <usbdc_get_cfg_desc+0xa4>)
   10304:	4798      	blx	r3
   10306:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   10308:	697b      	ldr	r3, [r7, #20]
   1030a:	2b00      	cmp	r3, #0
   1030c:	d101      	bne.n	10312 <usbdc_get_cfg_desc+0x62>
		return false;
   1030e:	2300      	movs	r3, #0
   10310:	e019      	b.n	10346 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   10312:	6978      	ldr	r0, [r7, #20]
   10314:	4b10      	ldr	r3, [pc, #64]	; (10358 <usbdc_get_cfg_desc+0xa8>)
   10316:	4798      	blx	r3
   10318:	4603      	mov	r3, r0
   1031a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   1031c:	8a7a      	ldrh	r2, [r7, #18]
   1031e:	89fb      	ldrh	r3, [r7, #14]
   10320:	429a      	cmp	r2, r3
   10322:	d802      	bhi.n	1032a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   10324:	2300      	movs	r3, #0
   10326:	747b      	strb	r3, [r7, #17]
   10328:	e001      	b.n	1032e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   1032a:	89fb      	ldrh	r3, [r7, #14]
   1032c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   1032e:	8a7a      	ldrh	r2, [r7, #18]
   10330:	7c7b      	ldrb	r3, [r7, #17]
   10332:	79f8      	ldrb	r0, [r7, #7]
   10334:	6979      	ldr	r1, [r7, #20]
   10336:	4c09      	ldr	r4, [pc, #36]	; (1035c <usbdc_get_cfg_desc+0xac>)
   10338:	47a0      	blx	r4
   1033a:	4603      	mov	r3, r0
   1033c:	2b00      	cmp	r3, #0
   1033e:	d001      	beq.n	10344 <usbdc_get_cfg_desc+0x94>
		return false;
   10340:	2300      	movs	r3, #0
   10342:	e000      	b.n	10346 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   10344:	2301      	movs	r3, #1
}
   10346:	4618      	mov	r0, r3
   10348:	371c      	adds	r7, #28
   1034a:	46bd      	mov	sp, r7
   1034c:	bd90      	pop	{r4, r7, pc}
   1034e:	bf00      	nop
   10350:	2000204c 	.word	0x2000204c
   10354:	0001106d 	.word	0x0001106d
   10358:	00010219 	.word	0x00010219
   1035c:	00010d1d 	.word	0x00010d1d

00010360 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   10360:	b590      	push	{r4, r7, lr}
   10362:	b085      	sub	sp, #20
   10364:	af00      	add	r7, sp, #0
   10366:	4603      	mov	r3, r0
   10368:	6039      	str	r1, [r7, #0]
   1036a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   1036c:	683b      	ldr	r3, [r7, #0]
   1036e:	799a      	ldrb	r2, [r3, #6]
   10370:	79db      	ldrb	r3, [r3, #7]
   10372:	021b      	lsls	r3, r3, #8
   10374:	4313      	orrs	r3, r2
   10376:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   10378:	683b      	ldr	r3, [r7, #0]
   1037a:	885b      	ldrh	r3, [r3, #2]
   1037c:	b29b      	uxth	r3, r3
   1037e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   10380:	89fa      	ldrh	r2, [r7, #14]
   10382:	4b1a      	ldr	r3, [pc, #104]	; (103ec <usbdc_get_str_desc+0x8c>)
   10384:	7f1b      	ldrb	r3, [r3, #28]
   10386:	3b01      	subs	r3, #1
   10388:	4013      	ands	r3, r2
   1038a:	2b00      	cmp	r3, #0
   1038c:	bf0c      	ite	eq
   1038e:	2301      	moveq	r3, #1
   10390:	2300      	movne	r3, #0
   10392:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   10394:	4b15      	ldr	r3, [pc, #84]	; (103ec <usbdc_get_str_desc+0x8c>)
   10396:	681b      	ldr	r3, [r3, #0]
   10398:	6818      	ldr	r0, [r3, #0]
   1039a:	4b14      	ldr	r3, [pc, #80]	; (103ec <usbdc_get_str_desc+0x8c>)
   1039c:	681b      	ldr	r3, [r3, #0]
   1039e:	685b      	ldr	r3, [r3, #4]
   103a0:	7b3a      	ldrb	r2, [r7, #12]
   103a2:	4619      	mov	r1, r3
   103a4:	4b12      	ldr	r3, [pc, #72]	; (103f0 <usbdc_get_str_desc+0x90>)
   103a6:	4798      	blx	r3
   103a8:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   103aa:	68bb      	ldr	r3, [r7, #8]
   103ac:	2b00      	cmp	r3, #0
   103ae:	d101      	bne.n	103b4 <usbdc_get_str_desc+0x54>
		return false;
   103b0:	2300      	movs	r3, #0
   103b2:	e017      	b.n	103e4 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   103b4:	68bb      	ldr	r3, [r7, #8]
   103b6:	781b      	ldrb	r3, [r3, #0]
   103b8:	b29b      	uxth	r3, r3
   103ba:	89fa      	ldrh	r2, [r7, #14]
   103bc:	429a      	cmp	r2, r3
   103be:	d802      	bhi.n	103c6 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   103c0:	2300      	movs	r3, #0
   103c2:	737b      	strb	r3, [r7, #13]
   103c4:	e002      	b.n	103cc <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   103c6:	68bb      	ldr	r3, [r7, #8]
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   103cc:	89fa      	ldrh	r2, [r7, #14]
   103ce:	7b7b      	ldrb	r3, [r7, #13]
   103d0:	79f8      	ldrb	r0, [r7, #7]
   103d2:	68b9      	ldr	r1, [r7, #8]
   103d4:	4c07      	ldr	r4, [pc, #28]	; (103f4 <usbdc_get_str_desc+0x94>)
   103d6:	47a0      	blx	r4
   103d8:	4603      	mov	r3, r0
   103da:	2b00      	cmp	r3, #0
   103dc:	d001      	beq.n	103e2 <usbdc_get_str_desc+0x82>
		return false;
   103de:	2300      	movs	r3, #0
   103e0:	e000      	b.n	103e4 <usbdc_get_str_desc+0x84>
	}
	return true;
   103e2:	2301      	movs	r3, #1
}
   103e4:	4618      	mov	r0, r3
   103e6:	3714      	adds	r7, #20
   103e8:	46bd      	mov	sp, r7
   103ea:	bd90      	pop	{r4, r7, pc}
   103ec:	2000204c 	.word	0x2000204c
   103f0:	000110e5 	.word	0x000110e5
   103f4:	00010d1d 	.word	0x00010d1d

000103f8 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   103f8:	b580      	push	{r7, lr}
   103fa:	b084      	sub	sp, #16
   103fc:	af00      	add	r7, sp, #0
   103fe:	4603      	mov	r3, r0
   10400:	6039      	str	r1, [r7, #0]
   10402:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   10404:	683b      	ldr	r3, [r7, #0]
   10406:	885b      	ldrh	r3, [r3, #2]
   10408:	b29b      	uxth	r3, r3
   1040a:	0a1b      	lsrs	r3, r3, #8
   1040c:	b29b      	uxth	r3, r3
   1040e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   10410:	7bfb      	ldrb	r3, [r7, #15]
   10412:	2b02      	cmp	r3, #2
   10414:	d00d      	beq.n	10432 <usbdc_get_desc_req+0x3a>
   10416:	2b03      	cmp	r3, #3
   10418:	d012      	beq.n	10440 <usbdc_get_desc_req+0x48>
   1041a:	2b01      	cmp	r3, #1
   1041c:	d002      	beq.n	10424 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   1041e:	bf00      	nop
	}
	return false;
   10420:	2300      	movs	r3, #0
   10422:	e013      	b.n	1044c <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   10424:	79fb      	ldrb	r3, [r7, #7]
   10426:	6839      	ldr	r1, [r7, #0]
   10428:	4618      	mov	r0, r3
   1042a:	4b0a      	ldr	r3, [pc, #40]	; (10454 <usbdc_get_desc_req+0x5c>)
   1042c:	4798      	blx	r3
   1042e:	4603      	mov	r3, r0
   10430:	e00c      	b.n	1044c <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   10432:	79fb      	ldrb	r3, [r7, #7]
   10434:	6839      	ldr	r1, [r7, #0]
   10436:	4618      	mov	r0, r3
   10438:	4b07      	ldr	r3, [pc, #28]	; (10458 <usbdc_get_desc_req+0x60>)
   1043a:	4798      	blx	r3
   1043c:	4603      	mov	r3, r0
   1043e:	e005      	b.n	1044c <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   10440:	79fb      	ldrb	r3, [r7, #7]
   10442:	6839      	ldr	r1, [r7, #0]
   10444:	4618      	mov	r0, r3
   10446:	4b05      	ldr	r3, [pc, #20]	; (1045c <usbdc_get_desc_req+0x64>)
   10448:	4798      	blx	r3
   1044a:	4603      	mov	r3, r0
}
   1044c:	4618      	mov	r0, r3
   1044e:	3710      	adds	r7, #16
   10450:	46bd      	mov	sp, r7
   10452:	bd80      	pop	{r7, pc}
   10454:	00010239 	.word	0x00010239
   10458:	000102b1 	.word	0x000102b1
   1045c:	00010361 	.word	0x00010361

00010460 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   10460:	b590      	push	{r4, r7, lr}
   10462:	b085      	sub	sp, #20
   10464:	af00      	add	r7, sp, #0
   10466:	4603      	mov	r3, r0
   10468:	6039      	str	r1, [r7, #0]
   1046a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1046c:	683b      	ldr	r3, [r7, #0]
   1046e:	781b      	ldrb	r3, [r3, #0]
   10470:	f003 031f 	and.w	r3, r3, #31
   10474:	2b00      	cmp	r3, #0
   10476:	db1b      	blt.n	104b0 <usbdc_get_status_req+0x50>
   10478:	2b01      	cmp	r3, #1
   1047a:	dd02      	ble.n	10482 <usbdc_get_status_req+0x22>
   1047c:	2b02      	cmp	r3, #2
   1047e:	d003      	beq.n	10488 <usbdc_get_status_req+0x28>
   10480:	e016      	b.n	104b0 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   10482:	2300      	movs	r3, #0
   10484:	60fb      	str	r3, [r7, #12]
		break;
   10486:	e015      	b.n	104b4 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   10488:	683b      	ldr	r3, [r7, #0]
   1048a:	889b      	ldrh	r3, [r3, #4]
   1048c:	b29b      	uxth	r3, r3
   1048e:	b2db      	uxtb	r3, r3
   10490:	2102      	movs	r1, #2
   10492:	4618      	mov	r0, r3
   10494:	4b0f      	ldr	r3, [pc, #60]	; (104d4 <usbdc_get_status_req+0x74>)
   10496:	4798      	blx	r3
   10498:	4603      	mov	r3, r0
   1049a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   1049c:	68fb      	ldr	r3, [r7, #12]
   1049e:	2b00      	cmp	r3, #0
   104a0:	da01      	bge.n	104a6 <usbdc_get_status_req+0x46>
			return false;
   104a2:	2300      	movs	r3, #0
   104a4:	e012      	b.n	104cc <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   104a6:	68fb      	ldr	r3, [r7, #12]
   104a8:	f003 0301 	and.w	r3, r3, #1
   104ac:	60fb      	str	r3, [r7, #12]
		break;
   104ae:	e001      	b.n	104b4 <usbdc_get_status_req+0x54>
	default:
		return false;
   104b0:	2300      	movs	r3, #0
   104b2:	e00b      	b.n	104cc <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   104b4:	4b08      	ldr	r3, [pc, #32]	; (104d8 <usbdc_get_status_req+0x78>)
   104b6:	695b      	ldr	r3, [r3, #20]
   104b8:	89ba      	ldrh	r2, [r7, #12]
   104ba:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   104bc:	4b06      	ldr	r3, [pc, #24]	; (104d8 <usbdc_get_status_req+0x78>)
   104be:	6959      	ldr	r1, [r3, #20]
   104c0:	79f8      	ldrb	r0, [r7, #7]
   104c2:	2300      	movs	r3, #0
   104c4:	2202      	movs	r2, #2
   104c6:	4c05      	ldr	r4, [pc, #20]	; (104dc <usbdc_get_status_req+0x7c>)
   104c8:	47a0      	blx	r4
	return true;
   104ca:	2301      	movs	r3, #1
}
   104cc:	4618      	mov	r0, r3
   104ce:	3714      	adds	r7, #20
   104d0:	46bd      	mov	sp, r7
   104d2:	bd90      	pop	{r4, r7, pc}
   104d4:	00007291 	.word	0x00007291
   104d8:	2000204c 	.word	0x2000204c
   104dc:	00010d1d 	.word	0x00010d1d

000104e0 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   104e0:	b590      	push	{r4, r7, lr}
   104e2:	b085      	sub	sp, #20
   104e4:	af00      	add	r7, sp, #0
   104e6:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   104e8:	4b1f      	ldr	r3, [pc, #124]	; (10568 <usbdc_get_interface+0x88>)
   104ea:	691b      	ldr	r3, [r3, #16]
   104ec:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   104ee:	4b1e      	ldr	r3, [pc, #120]	; (10568 <usbdc_get_interface+0x88>)
   104f0:	7f5b      	ldrb	r3, [r3, #29]
   104f2:	461a      	mov	r2, r3
   104f4:	687b      	ldr	r3, [r7, #4]
   104f6:	889b      	ldrh	r3, [r3, #4]
   104f8:	b29b      	uxth	r3, r3
   104fa:	fa42 f303 	asr.w	r3, r2, r3
   104fe:	f003 0301 	and.w	r3, r3, #1
   10502:	2b00      	cmp	r3, #0
   10504:	d128      	bne.n	10558 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   10506:	4b18      	ldr	r3, [pc, #96]	; (10568 <usbdc_get_interface+0x88>)
   10508:	695b      	ldr	r3, [r3, #20]
   1050a:	2200      	movs	r2, #0
   1050c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1050e:	4b16      	ldr	r3, [pc, #88]	; (10568 <usbdc_get_interface+0x88>)
   10510:	6959      	ldr	r1, [r3, #20]
   10512:	2300      	movs	r3, #0
   10514:	2201      	movs	r2, #1
   10516:	2000      	movs	r0, #0
   10518:	4c14      	ldr	r4, [pc, #80]	; (1056c <usbdc_get_interface+0x8c>)
   1051a:	47a0      	blx	r4
		return true;
   1051c:	2301      	movs	r3, #1
   1051e:	e01f      	b.n	10560 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   10520:	68fb      	ldr	r3, [r7, #12]
   10522:	685b      	ldr	r3, [r3, #4]
   10524:	687a      	ldr	r2, [r7, #4]
   10526:	2102      	movs	r1, #2
   10528:	68f8      	ldr	r0, [r7, #12]
   1052a:	4798      	blx	r3
   1052c:	60b8      	str	r0, [r7, #8]
   1052e:	68bb      	ldr	r3, [r7, #8]
   10530:	2b00      	cmp	r3, #0
   10532:	da03      	bge.n	1053c <usbdc_get_interface+0x5c>
			func = func->next;
   10534:	68fb      	ldr	r3, [r7, #12]
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	60fb      	str	r3, [r7, #12]
   1053a:	e00d      	b.n	10558 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   1053c:	4b0a      	ldr	r3, [pc, #40]	; (10568 <usbdc_get_interface+0x88>)
   1053e:	695b      	ldr	r3, [r3, #20]
   10540:	68ba      	ldr	r2, [r7, #8]
   10542:	b2d2      	uxtb	r2, r2
   10544:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   10546:	4b08      	ldr	r3, [pc, #32]	; (10568 <usbdc_get_interface+0x88>)
   10548:	6959      	ldr	r1, [r3, #20]
   1054a:	2300      	movs	r3, #0
   1054c:	2201      	movs	r2, #1
   1054e:	2000      	movs	r0, #0
   10550:	4c06      	ldr	r4, [pc, #24]	; (1056c <usbdc_get_interface+0x8c>)
   10552:	47a0      	blx	r4
			return true;
   10554:	2301      	movs	r3, #1
   10556:	e003      	b.n	10560 <usbdc_get_interface+0x80>
	while (NULL != func) {
   10558:	68fb      	ldr	r3, [r7, #12]
   1055a:	2b00      	cmp	r3, #0
   1055c:	d1e0      	bne.n	10520 <usbdc_get_interface+0x40>
		}
	}
	return false;
   1055e:	2300      	movs	r3, #0
}
   10560:	4618      	mov	r0, r3
   10562:	3714      	adds	r7, #20
   10564:	46bd      	mov	sp, r7
   10566:	bd90      	pop	{r4, r7, pc}
   10568:	2000204c 	.word	0x2000204c
   1056c:	00010d1d 	.word	0x00010d1d

00010570 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   10570:	b590      	push	{r4, r7, lr}
   10572:	b083      	sub	sp, #12
   10574:	af00      	add	r7, sp, #0
   10576:	4603      	mov	r3, r0
   10578:	6039      	str	r1, [r7, #0]
   1057a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   1057c:	683b      	ldr	r3, [r7, #0]
   1057e:	785b      	ldrb	r3, [r3, #1]
   10580:	2b0a      	cmp	r3, #10
   10582:	d83a      	bhi.n	105fa <usbdc_get_req+0x8a>
   10584:	a201      	add	r2, pc, #4	; (adr r2, 1058c <usbdc_get_req+0x1c>)
   10586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1058a:	bf00      	nop
   1058c:	000105e3 	.word	0x000105e3
   10590:	000105fb 	.word	0x000105fb
   10594:	000105fb 	.word	0x000105fb
   10598:	000105fb 	.word	0x000105fb
   1059c:	000105fb 	.word	0x000105fb
   105a0:	000105fb 	.word	0x000105fb
   105a4:	000105b9 	.word	0x000105b9
   105a8:	000105fb 	.word	0x000105fb
   105ac:	000105c7 	.word	0x000105c7
   105b0:	000105fb 	.word	0x000105fb
   105b4:	000105f1 	.word	0x000105f1
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   105b8:	79fb      	ldrb	r3, [r7, #7]
   105ba:	6839      	ldr	r1, [r7, #0]
   105bc:	4618      	mov	r0, r3
   105be:	4b11      	ldr	r3, [pc, #68]	; (10604 <usbdc_get_req+0x94>)
   105c0:	4798      	blx	r3
   105c2:	4603      	mov	r3, r0
   105c4:	e01a      	b.n	105fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   105c6:	4b10      	ldr	r3, [pc, #64]	; (10608 <usbdc_get_req+0x98>)
   105c8:	695b      	ldr	r3, [r3, #20]
   105ca:	4a0f      	ldr	r2, [pc, #60]	; (10608 <usbdc_get_req+0x98>)
   105cc:	7ed2      	ldrb	r2, [r2, #27]
   105ce:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   105d0:	4b0d      	ldr	r3, [pc, #52]	; (10608 <usbdc_get_req+0x98>)
   105d2:	6959      	ldr	r1, [r3, #20]
   105d4:	79f8      	ldrb	r0, [r7, #7]
   105d6:	2300      	movs	r3, #0
   105d8:	2201      	movs	r2, #1
   105da:	4c0c      	ldr	r4, [pc, #48]	; (1060c <usbdc_get_req+0x9c>)
   105dc:	47a0      	blx	r4
		return true;
   105de:	2301      	movs	r3, #1
   105e0:	e00c      	b.n	105fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   105e2:	79fb      	ldrb	r3, [r7, #7]
   105e4:	6839      	ldr	r1, [r7, #0]
   105e6:	4618      	mov	r0, r3
   105e8:	4b09      	ldr	r3, [pc, #36]	; (10610 <usbdc_get_req+0xa0>)
   105ea:	4798      	blx	r3
   105ec:	4603      	mov	r3, r0
   105ee:	e005      	b.n	105fc <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   105f0:	6838      	ldr	r0, [r7, #0]
   105f2:	4b08      	ldr	r3, [pc, #32]	; (10614 <usbdc_get_req+0xa4>)
   105f4:	4798      	blx	r3
   105f6:	4603      	mov	r3, r0
   105f8:	e000      	b.n	105fc <usbdc_get_req+0x8c>
	default:
		return false;
   105fa:	2300      	movs	r3, #0
	}
}
   105fc:	4618      	mov	r0, r3
   105fe:	370c      	adds	r7, #12
   10600:	46bd      	mov	sp, r7
   10602:	bd90      	pop	{r4, r7, pc}
   10604:	000103f9 	.word	0x000103f9
   10608:	2000204c 	.word	0x2000204c
   1060c:	00010d1d 	.word	0x00010d1d
   10610:	00010461 	.word	0x00010461
   10614:	000104e1 	.word	0x000104e1

00010618 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   10618:	b590      	push	{r4, r7, lr}
   1061a:	b083      	sub	sp, #12
   1061c:	af00      	add	r7, sp, #0
   1061e:	4603      	mov	r3, r0
   10620:	6039      	str	r1, [r7, #0]
   10622:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   10624:	683b      	ldr	r3, [r7, #0]
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	f003 031f 	and.w	r3, r3, #31
   1062c:	2b02      	cmp	r3, #2
   1062e:	d116      	bne.n	1065e <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   10630:	683b      	ldr	r3, [r7, #0]
   10632:	88db      	ldrh	r3, [r3, #6]
   10634:	b29b      	uxth	r3, r3
   10636:	2b00      	cmp	r3, #0
   10638:	d001      	beq.n	1063e <usbdc_clear_ftr_req+0x26>
			return false;
   1063a:	2300      	movs	r3, #0
   1063c:	e010      	b.n	10660 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   1063e:	683b      	ldr	r3, [r7, #0]
   10640:	889b      	ldrh	r3, [r3, #4]
   10642:	b29b      	uxth	r3, r3
   10644:	b2db      	uxtb	r3, r3
   10646:	2100      	movs	r1, #0
   10648:	4618      	mov	r0, r3
   1064a:	4b07      	ldr	r3, [pc, #28]	; (10668 <usbdc_clear_ftr_req+0x50>)
   1064c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1064e:	79f8      	ldrb	r0, [r7, #7]
   10650:	2301      	movs	r3, #1
   10652:	2200      	movs	r2, #0
   10654:	2100      	movs	r1, #0
   10656:	4c05      	ldr	r4, [pc, #20]	; (1066c <usbdc_clear_ftr_req+0x54>)
   10658:	47a0      	blx	r4
		return true;
   1065a:	2301      	movs	r3, #1
   1065c:	e000      	b.n	10660 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   1065e:	2300      	movs	r3, #0
	}
}
   10660:	4618      	mov	r0, r3
   10662:	370c      	adds	r7, #12
   10664:	46bd      	mov	sp, r7
   10666:	bd90      	pop	{r4, r7, pc}
   10668:	00007291 	.word	0x00007291
   1066c:	00010d1d 	.word	0x00010d1d

00010670 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   10670:	b590      	push	{r4, r7, lr}
   10672:	b083      	sub	sp, #12
   10674:	af00      	add	r7, sp, #0
   10676:	4603      	mov	r3, r0
   10678:	6039      	str	r1, [r7, #0]
   1067a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1067c:	683b      	ldr	r3, [r7, #0]
   1067e:	781b      	ldrb	r3, [r3, #0]
   10680:	f003 031f 	and.w	r3, r3, #31
   10684:	2b02      	cmp	r3, #2
   10686:	d116      	bne.n	106b6 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   10688:	683b      	ldr	r3, [r7, #0]
   1068a:	88db      	ldrh	r3, [r3, #6]
   1068c:	b29b      	uxth	r3, r3
   1068e:	2b00      	cmp	r3, #0
   10690:	d001      	beq.n	10696 <usbdc_set_ftr_req+0x26>
			return false;
   10692:	2300      	movs	r3, #0
   10694:	e010      	b.n	106b8 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   10696:	683b      	ldr	r3, [r7, #0]
   10698:	889b      	ldrh	r3, [r3, #4]
   1069a:	b29b      	uxth	r3, r3
   1069c:	b2db      	uxtb	r3, r3
   1069e:	2101      	movs	r1, #1
   106a0:	4618      	mov	r0, r3
   106a2:	4b07      	ldr	r3, [pc, #28]	; (106c0 <usbdc_set_ftr_req+0x50>)
   106a4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   106a6:	79f8      	ldrb	r0, [r7, #7]
   106a8:	2301      	movs	r3, #1
   106aa:	2200      	movs	r2, #0
   106ac:	2100      	movs	r1, #0
   106ae:	4c05      	ldr	r4, [pc, #20]	; (106c4 <usbdc_set_ftr_req+0x54>)
   106b0:	47a0      	blx	r4
		return true;
   106b2:	2301      	movs	r3, #1
   106b4:	e000      	b.n	106b8 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   106b6:	2300      	movs	r3, #0
	}
}
   106b8:	4618      	mov	r0, r3
   106ba:	370c      	adds	r7, #12
   106bc:	46bd      	mov	sp, r7
   106be:	bd90      	pop	{r4, r7, pc}
   106c0:	00007291 	.word	0x00007291
   106c4:	00010d1d 	.word	0x00010d1d

000106c8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   106c8:	b580      	push	{r7, lr}
   106ca:	b082      	sub	sp, #8
   106cc:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   106ce:	4b0a      	ldr	r3, [pc, #40]	; (106f8 <usbdc_unconfig+0x30>)
   106d0:	691b      	ldr	r3, [r3, #16]
   106d2:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   106d4:	e008      	b.n	106e8 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   106d6:	687b      	ldr	r3, [r7, #4]
   106d8:	685b      	ldr	r3, [r3, #4]
   106da:	2200      	movs	r2, #0
   106dc:	2101      	movs	r1, #1
   106de:	6878      	ldr	r0, [r7, #4]
   106e0:	4798      	blx	r3
		func = func->next;
   106e2:	687b      	ldr	r3, [r7, #4]
   106e4:	681b      	ldr	r3, [r3, #0]
   106e6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   106e8:	687b      	ldr	r3, [r7, #4]
   106ea:	2b00      	cmp	r3, #0
   106ec:	d1f3      	bne.n	106d6 <usbdc_unconfig+0xe>
	}
}
   106ee:	bf00      	nop
   106f0:	3708      	adds	r7, #8
   106f2:	46bd      	mov	sp, r7
   106f4:	bd80      	pop	{r7, pc}
   106f6:	bf00      	nop
   106f8:	2000204c 	.word	0x2000204c

000106fc <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   106fc:	b580      	push	{r7, lr}
   106fe:	b088      	sub	sp, #32
   10700:	af00      	add	r7, sp, #0
   10702:	4603      	mov	r3, r0
   10704:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   10706:	2300      	movs	r3, #0
   10708:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   1070a:	23ff      	movs	r3, #255	; 0xff
   1070c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   1070e:	79fb      	ldrb	r3, [r7, #7]
   10710:	2b00      	cmp	r3, #0
   10712:	d103      	bne.n	1071c <usbdc_set_config+0x20>
		usbdc_unconfig();
   10714:	4b2e      	ldr	r3, [pc, #184]	; (107d0 <usbdc_set_config+0xd4>)
   10716:	4798      	blx	r3
		return true;
   10718:	2301      	movs	r3, #1
   1071a:	e055      	b.n	107c8 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   1071c:	69bb      	ldr	r3, [r7, #24]
   1071e:	2b00      	cmp	r3, #0
   10720:	d10a      	bne.n	10738 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   10722:	4b2c      	ldr	r3, [pc, #176]	; (107d4 <usbdc_set_config+0xd8>)
   10724:	681b      	ldr	r3, [r3, #0]
   10726:	6818      	ldr	r0, [r3, #0]
   10728:	4b2a      	ldr	r3, [pc, #168]	; (107d4 <usbdc_set_config+0xd8>)
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	685b      	ldr	r3, [r3, #4]
   1072e:	79fa      	ldrb	r2, [r7, #7]
   10730:	4619      	mov	r1, r3
   10732:	4b29      	ldr	r3, [pc, #164]	; (107d8 <usbdc_set_config+0xdc>)
   10734:	4798      	blx	r3
   10736:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   10738:	69bb      	ldr	r3, [r7, #24]
   1073a:	2b00      	cmp	r3, #0
   1073c:	d101      	bne.n	10742 <usbdc_set_config+0x46>
		return false;
   1073e:	2300      	movs	r3, #0
   10740:	e042      	b.n	107c8 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   10742:	69b8      	ldr	r0, [r7, #24]
   10744:	4b25      	ldr	r3, [pc, #148]	; (107dc <usbdc_set_config+0xe0>)
   10746:	4798      	blx	r3
   10748:	4603      	mov	r3, r0
   1074a:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   1074c:	8abb      	ldrh	r3, [r7, #20]
   1074e:	69ba      	ldr	r2, [r7, #24]
   10750:	4413      	add	r3, r2
   10752:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   10754:	693b      	ldr	r3, [r7, #16]
   10756:	2204      	movs	r2, #4
   10758:	4619      	mov	r1, r3
   1075a:	69b8      	ldr	r0, [r7, #24]
   1075c:	4b20      	ldr	r3, [pc, #128]	; (107e0 <usbdc_set_config+0xe4>)
   1075e:	4798      	blx	r3
   10760:	4603      	mov	r3, r0
   10762:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   10764:	e02c      	b.n	107c0 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   10766:	68fb      	ldr	r3, [r7, #12]
   10768:	3302      	adds	r3, #2
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	7dfa      	ldrb	r2, [r7, #23]
   1076e:	429a      	cmp	r2, r3
   10770:	d018      	beq.n	107a4 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   10772:	68fb      	ldr	r3, [r7, #12]
   10774:	789b      	ldrb	r3, [r3, #2]
   10776:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   10778:	4b16      	ldr	r3, [pc, #88]	; (107d4 <usbdc_set_config+0xd8>)
   1077a:	691b      	ldr	r3, [r3, #16]
   1077c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1077e:	e00c      	b.n	1079a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   10780:	69fb      	ldr	r3, [r7, #28]
   10782:	685b      	ldr	r3, [r3, #4]
   10784:	f107 020c 	add.w	r2, r7, #12
   10788:	2100      	movs	r1, #0
   1078a:	69f8      	ldr	r0, [r7, #28]
   1078c:	4798      	blx	r3
   1078e:	4603      	mov	r3, r0
   10790:	2b00      	cmp	r3, #0
   10792:	d006      	beq.n	107a2 <usbdc_set_config+0xa6>
					func = func->next;
   10794:	69fb      	ldr	r3, [r7, #28]
   10796:	681b      	ldr	r3, [r3, #0]
   10798:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1079a:	69fb      	ldr	r3, [r7, #28]
   1079c:	2b00      	cmp	r3, #0
   1079e:	d1ef      	bne.n	10780 <usbdc_set_config+0x84>
   107a0:	e000      	b.n	107a4 <usbdc_set_config+0xa8>
				} else {
					break;
   107a2:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   107a4:	68fb      	ldr	r3, [r7, #12]
   107a6:	4618      	mov	r0, r3
   107a8:	4b0e      	ldr	r3, [pc, #56]	; (107e4 <usbdc_set_config+0xe8>)
   107aa:	4798      	blx	r3
   107ac:	4603      	mov	r3, r0
   107ae:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   107b0:	68fb      	ldr	r3, [r7, #12]
   107b2:	6939      	ldr	r1, [r7, #16]
   107b4:	2204      	movs	r2, #4
   107b6:	4618      	mov	r0, r3
   107b8:	4b09      	ldr	r3, [pc, #36]	; (107e0 <usbdc_set_config+0xe4>)
   107ba:	4798      	blx	r3
   107bc:	4603      	mov	r3, r0
   107be:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   107c0:	68fb      	ldr	r3, [r7, #12]
   107c2:	2b00      	cmp	r3, #0
   107c4:	d1cf      	bne.n	10766 <usbdc_set_config+0x6a>
	}
	return true;
   107c6:	2301      	movs	r3, #1
}
   107c8:	4618      	mov	r0, r3
   107ca:	3720      	adds	r7, #32
   107cc:	46bd      	mov	sp, r7
   107ce:	bd80      	pop	{r7, pc}
   107d0:	000106c9 	.word	0x000106c9
   107d4:	2000204c 	.word	0x2000204c
   107d8:	0001106d 	.word	0x0001106d
   107dc:	00010219 	.word	0x00010219
   107e0:	00010fad 	.word	0x00010fad
   107e4:	000101f5 	.word	0x000101f5

000107e8 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   107e8:	b580      	push	{r7, lr}
   107ea:	b082      	sub	sp, #8
   107ec:	af00      	add	r7, sp, #0
   107ee:	4603      	mov	r3, r0
   107f0:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   107f2:	79fb      	ldrb	r3, [r7, #7]
   107f4:	4618      	mov	r0, r3
   107f6:	4b03      	ldr	r3, [pc, #12]	; (10804 <usbdc_set_address+0x1c>)
   107f8:	4798      	blx	r3
}
   107fa:	bf00      	nop
   107fc:	3708      	adds	r7, #8
   107fe:	46bd      	mov	sp, r7
   10800:	bd80      	pop	{r7, pc}
   10802:	bf00      	nop
   10804:	00006f01 	.word	0x00006f01

00010808 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   10808:	b590      	push	{r4, r7, lr}
   1080a:	b087      	sub	sp, #28
   1080c:	af00      	add	r7, sp, #0
   1080e:	4603      	mov	r3, r0
   10810:	460a      	mov	r2, r1
   10812:	80fb      	strh	r3, [r7, #6]
   10814:	4613      	mov	r3, r2
   10816:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   10818:	2300      	movs	r3, #0
   1081a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   1081c:	693b      	ldr	r3, [r7, #16]
   1081e:	2b00      	cmp	r3, #0
   10820:	d10b      	bne.n	1083a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   10822:	4b43      	ldr	r3, [pc, #268]	; (10930 <usbdc_set_interface+0x128>)
   10824:	681b      	ldr	r3, [r3, #0]
   10826:	6818      	ldr	r0, [r3, #0]
   10828:	4b41      	ldr	r3, [pc, #260]	; (10930 <usbdc_set_interface+0x128>)
   1082a:	681b      	ldr	r3, [r3, #0]
   1082c:	6859      	ldr	r1, [r3, #4]
   1082e:	4b40      	ldr	r3, [pc, #256]	; (10930 <usbdc_set_interface+0x128>)
   10830:	7edb      	ldrb	r3, [r3, #27]
   10832:	461a      	mov	r2, r3
   10834:	4b3f      	ldr	r3, [pc, #252]	; (10934 <usbdc_set_interface+0x12c>)
   10836:	4798      	blx	r3
   10838:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   1083a:	693b      	ldr	r3, [r7, #16]
   1083c:	2b00      	cmp	r3, #0
   1083e:	d101      	bne.n	10844 <usbdc_set_interface+0x3c>
		return false;
   10840:	2300      	movs	r3, #0
   10842:	e071      	b.n	10928 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   10844:	693b      	ldr	r3, [r7, #16]
   10846:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   10848:	6938      	ldr	r0, [r7, #16]
   1084a:	4b3b      	ldr	r3, [pc, #236]	; (10938 <usbdc_set_interface+0x130>)
   1084c:	4798      	blx	r3
   1084e:	4603      	mov	r3, r0
   10850:	461a      	mov	r2, r3
   10852:	693b      	ldr	r3, [r7, #16]
   10854:	4413      	add	r3, r2
   10856:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   10858:	68bb      	ldr	r3, [r7, #8]
   1085a:	68f9      	ldr	r1, [r7, #12]
   1085c:	2204      	movs	r2, #4
   1085e:	4618      	mov	r0, r3
   10860:	4b36      	ldr	r3, [pc, #216]	; (1093c <usbdc_set_interface+0x134>)
   10862:	4798      	blx	r3
   10864:	6138      	str	r0, [r7, #16]
   10866:	693b      	ldr	r3, [r7, #16]
   10868:	2b00      	cmp	r3, #0
   1086a:	d113      	bne.n	10894 <usbdc_set_interface+0x8c>
		return false;
   1086c:	2300      	movs	r3, #0
   1086e:	e05b      	b.n	10928 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   10870:	68bb      	ldr	r3, [r7, #8]
   10872:	4618      	mov	r0, r3
   10874:	4b32      	ldr	r3, [pc, #200]	; (10940 <usbdc_set_interface+0x138>)
   10876:	4798      	blx	r3
   10878:	4603      	mov	r3, r0
   1087a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1087c:	68bb      	ldr	r3, [r7, #8]
   1087e:	68f9      	ldr	r1, [r7, #12]
   10880:	2204      	movs	r2, #4
   10882:	4618      	mov	r0, r3
   10884:	4b2d      	ldr	r3, [pc, #180]	; (1093c <usbdc_set_interface+0x134>)
   10886:	4798      	blx	r3
   10888:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   1088a:	693b      	ldr	r3, [r7, #16]
   1088c:	2b00      	cmp	r3, #0
   1088e:	d101      	bne.n	10894 <usbdc_set_interface+0x8c>
			return false;
   10890:	2300      	movs	r3, #0
   10892:	e049      	b.n	10928 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   10894:	693b      	ldr	r3, [r7, #16]
   10896:	3302      	adds	r3, #2
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	b29b      	uxth	r3, r3
   1089c:	88ba      	ldrh	r2, [r7, #4]
   1089e:	429a      	cmp	r2, r3
   108a0:	d1e6      	bne.n	10870 <usbdc_set_interface+0x68>
   108a2:	693b      	ldr	r3, [r7, #16]
   108a4:	3303      	adds	r3, #3
   108a6:	781b      	ldrb	r3, [r3, #0]
   108a8:	b29b      	uxth	r3, r3
   108aa:	88fa      	ldrh	r2, [r7, #6]
   108ac:	429a      	cmp	r2, r3
   108ae:	d1df      	bne.n	10870 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   108b0:	693b      	ldr	r3, [r7, #16]
   108b2:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   108b4:	4b1e      	ldr	r3, [pc, #120]	; (10930 <usbdc_set_interface+0x128>)
   108b6:	691b      	ldr	r3, [r3, #16]
   108b8:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   108ba:	e031      	b.n	10920 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   108bc:	697b      	ldr	r3, [r7, #20]
   108be:	685b      	ldr	r3, [r3, #4]
   108c0:	f107 0208 	add.w	r2, r7, #8
   108c4:	2101      	movs	r1, #1
   108c6:	6978      	ldr	r0, [r7, #20]
   108c8:	4798      	blx	r3
   108ca:	4603      	mov	r3, r0
   108cc:	2b00      	cmp	r3, #0
   108ce:	d003      	beq.n	108d8 <usbdc_set_interface+0xd0>
			func = func->next;
   108d0:	697b      	ldr	r3, [r7, #20]
   108d2:	681b      	ldr	r3, [r3, #0]
   108d4:	617b      	str	r3, [r7, #20]
   108d6:	e023      	b.n	10920 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   108d8:	697b      	ldr	r3, [r7, #20]
   108da:	685b      	ldr	r3, [r3, #4]
   108dc:	f107 0208 	add.w	r2, r7, #8
   108e0:	2100      	movs	r1, #0
   108e2:	6978      	ldr	r0, [r7, #20]
   108e4:	4798      	blx	r3
   108e6:	4603      	mov	r3, r0
   108e8:	2b00      	cmp	r3, #0
   108ea:	d117      	bne.n	1091c <usbdc_set_interface+0x114>
			if (alt_set) {
   108ec:	88fb      	ldrh	r3, [r7, #6]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d00c      	beq.n	1090c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   108f2:	4b0f      	ldr	r3, [pc, #60]	; (10930 <usbdc_set_interface+0x128>)
   108f4:	7f5b      	ldrb	r3, [r3, #29]
   108f6:	b25a      	sxtb	r2, r3
   108f8:	88bb      	ldrh	r3, [r7, #4]
   108fa:	2101      	movs	r1, #1
   108fc:	fa01 f303 	lsl.w	r3, r1, r3
   10900:	b25b      	sxtb	r3, r3
   10902:	4313      	orrs	r3, r2
   10904:	b25b      	sxtb	r3, r3
   10906:	b2da      	uxtb	r2, r3
   10908:	4b09      	ldr	r3, [pc, #36]	; (10930 <usbdc_set_interface+0x128>)
   1090a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   1090c:	2300      	movs	r3, #0
   1090e:	2200      	movs	r2, #0
   10910:	2100      	movs	r1, #0
   10912:	2000      	movs	r0, #0
   10914:	4c0b      	ldr	r4, [pc, #44]	; (10944 <usbdc_set_interface+0x13c>)
   10916:	47a0      	blx	r4
			return true;
   10918:	2301      	movs	r3, #1
   1091a:	e005      	b.n	10928 <usbdc_set_interface+0x120>
		} else {
			return false;
   1091c:	2300      	movs	r3, #0
   1091e:	e003      	b.n	10928 <usbdc_set_interface+0x120>
	while (NULL != func) {
   10920:	697b      	ldr	r3, [r7, #20]
   10922:	2b00      	cmp	r3, #0
   10924:	d1ca      	bne.n	108bc <usbdc_set_interface+0xb4>
		}
	}

	return false;
   10926:	2300      	movs	r3, #0
}
   10928:	4618      	mov	r0, r3
   1092a:	371c      	adds	r7, #28
   1092c:	46bd      	mov	sp, r7
   1092e:	bd90      	pop	{r4, r7, pc}
   10930:	2000204c 	.word	0x2000204c
   10934:	0001106d 	.word	0x0001106d
   10938:	00010219 	.word	0x00010219
   1093c:	00010fad 	.word	0x00010fad
   10940:	000101f5 	.word	0x000101f5
   10944:	00010d1d 	.word	0x00010d1d

00010948 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   10948:	b590      	push	{r4, r7, lr}
   1094a:	b083      	sub	sp, #12
   1094c:	af00      	add	r7, sp, #0
   1094e:	4603      	mov	r3, r0
   10950:	6039      	str	r1, [r7, #0]
   10952:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   10954:	683b      	ldr	r3, [r7, #0]
   10956:	785b      	ldrb	r3, [r3, #1]
   10958:	3b01      	subs	r3, #1
   1095a:	2b0a      	cmp	r3, #10
   1095c:	d85b      	bhi.n	10a16 <usbdc_set_req+0xce>
   1095e:	a201      	add	r2, pc, #4	; (adr r2, 10964 <usbdc_set_req+0x1c>)
   10960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10964:	000109e3 	.word	0x000109e3
   10968:	00010a17 	.word	0x00010a17
   1096c:	000109f1 	.word	0x000109f1
   10970:	00010a17 	.word	0x00010a17
   10974:	00010991 	.word	0x00010991
   10978:	00010a17 	.word	0x00010a17
   1097c:	00010a17 	.word	0x00010a17
   10980:	00010a17 	.word	0x00010a17
   10984:	000109ab 	.word	0x000109ab
   10988:	00010a17 	.word	0x00010a17
   1098c:	000109ff 	.word	0x000109ff
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   10990:	79f8      	ldrb	r0, [r7, #7]
   10992:	2301      	movs	r3, #1
   10994:	2200      	movs	r2, #0
   10996:	2100      	movs	r1, #0
   10998:	4c21      	ldr	r4, [pc, #132]	; (10a20 <usbdc_set_req+0xd8>)
   1099a:	47a0      	blx	r4
   1099c:	4603      	mov	r3, r0
   1099e:	2b00      	cmp	r3, #0
   109a0:	bf0c      	ite	eq
   109a2:	2301      	moveq	r3, #1
   109a4:	2300      	movne	r3, #0
   109a6:	b2db      	uxtb	r3, r3
   109a8:	e036      	b.n	10a18 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   109aa:	683b      	ldr	r3, [r7, #0]
   109ac:	885b      	ldrh	r3, [r3, #2]
   109ae:	b29b      	uxth	r3, r3
   109b0:	b2db      	uxtb	r3, r3
   109b2:	4618      	mov	r0, r3
   109b4:	4b1b      	ldr	r3, [pc, #108]	; (10a24 <usbdc_set_req+0xdc>)
   109b6:	4798      	blx	r3
   109b8:	4603      	mov	r3, r0
   109ba:	f083 0301 	eor.w	r3, r3, #1
   109be:	b2db      	uxtb	r3, r3
   109c0:	2b00      	cmp	r3, #0
   109c2:	d001      	beq.n	109c8 <usbdc_set_req+0x80>
			return false;
   109c4:	2300      	movs	r3, #0
   109c6:	e027      	b.n	10a18 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   109c8:	79f8      	ldrb	r0, [r7, #7]
   109ca:	2301      	movs	r3, #1
   109cc:	2200      	movs	r2, #0
   109ce:	2100      	movs	r1, #0
   109d0:	4c13      	ldr	r4, [pc, #76]	; (10a20 <usbdc_set_req+0xd8>)
   109d2:	47a0      	blx	r4
   109d4:	4603      	mov	r3, r0
   109d6:	2b00      	cmp	r3, #0
   109d8:	bf0c      	ite	eq
   109da:	2301      	moveq	r3, #1
   109dc:	2300      	movne	r3, #0
   109de:	b2db      	uxtb	r3, r3
   109e0:	e01a      	b.n	10a18 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   109e2:	79fb      	ldrb	r3, [r7, #7]
   109e4:	6839      	ldr	r1, [r7, #0]
   109e6:	4618      	mov	r0, r3
   109e8:	4b0f      	ldr	r3, [pc, #60]	; (10a28 <usbdc_set_req+0xe0>)
   109ea:	4798      	blx	r3
   109ec:	4603      	mov	r3, r0
   109ee:	e013      	b.n	10a18 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   109f0:	79fb      	ldrb	r3, [r7, #7]
   109f2:	6839      	ldr	r1, [r7, #0]
   109f4:	4618      	mov	r0, r3
   109f6:	4b0d      	ldr	r3, [pc, #52]	; (10a2c <usbdc_set_req+0xe4>)
   109f8:	4798      	blx	r3
   109fa:	4603      	mov	r3, r0
   109fc:	e00c      	b.n	10a18 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   109fe:	683b      	ldr	r3, [r7, #0]
   10a00:	885b      	ldrh	r3, [r3, #2]
   10a02:	b29a      	uxth	r2, r3
   10a04:	683b      	ldr	r3, [r7, #0]
   10a06:	889b      	ldrh	r3, [r3, #4]
   10a08:	b29b      	uxth	r3, r3
   10a0a:	4619      	mov	r1, r3
   10a0c:	4610      	mov	r0, r2
   10a0e:	4b08      	ldr	r3, [pc, #32]	; (10a30 <usbdc_set_req+0xe8>)
   10a10:	4798      	blx	r3
   10a12:	4603      	mov	r3, r0
   10a14:	e000      	b.n	10a18 <usbdc_set_req+0xd0>
	default:
		return false;
   10a16:	2300      	movs	r3, #0
	}
}
   10a18:	4618      	mov	r0, r3
   10a1a:	370c      	adds	r7, #12
   10a1c:	46bd      	mov	sp, r7
   10a1e:	bd90      	pop	{r4, r7, pc}
   10a20:	00010d1d 	.word	0x00010d1d
   10a24:	000106fd 	.word	0x000106fd
   10a28:	00010619 	.word	0x00010619
   10a2c:	00010671 	.word	0x00010671
   10a30:	00010809 	.word	0x00010809

00010a34 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   10a34:	b580      	push	{r7, lr}
   10a36:	b082      	sub	sp, #8
   10a38:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   10a3a:	4b0a      	ldr	r3, [pc, #40]	; (10a64 <usbdc_sof_notify+0x30>)
   10a3c:	685b      	ldr	r3, [r3, #4]
   10a3e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   10a40:	e009      	b.n	10a56 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   10a42:	687b      	ldr	r3, [r7, #4]
   10a44:	685b      	ldr	r3, [r3, #4]
   10a46:	2b00      	cmp	r3, #0
   10a48:	d002      	beq.n	10a50 <usbdc_sof_notify+0x1c>
			sof->cb();
   10a4a:	687b      	ldr	r3, [r7, #4]
   10a4c:	685b      	ldr	r3, [r3, #4]
   10a4e:	4798      	blx	r3
		}
		sof = sof->next;
   10a50:	687b      	ldr	r3, [r7, #4]
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   10a56:	687b      	ldr	r3, [r7, #4]
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d1f2      	bne.n	10a42 <usbdc_sof_notify+0xe>
	}
}
   10a5c:	bf00      	nop
   10a5e:	3708      	adds	r7, #8
   10a60:	46bd      	mov	sp, r7
   10a62:	bd80      	pop	{r7, pc}
   10a64:	2000204c 	.word	0x2000204c

00010a68 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   10a68:	b580      	push	{r7, lr}
   10a6a:	b084      	sub	sp, #16
   10a6c:	af00      	add	r7, sp, #0
   10a6e:	4603      	mov	r3, r0
   10a70:	6039      	str	r1, [r7, #0]
   10a72:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   10a74:	4b0b      	ldr	r3, [pc, #44]	; (10aa4 <usbdc_change_notify+0x3c>)
   10a76:	68db      	ldr	r3, [r3, #12]
   10a78:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   10a7a:	e00c      	b.n	10a96 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   10a7c:	68fb      	ldr	r3, [r7, #12]
   10a7e:	685b      	ldr	r3, [r3, #4]
   10a80:	2b00      	cmp	r3, #0
   10a82:	d005      	beq.n	10a90 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   10a84:	68fb      	ldr	r3, [r7, #12]
   10a86:	685b      	ldr	r3, [r3, #4]
   10a88:	79fa      	ldrb	r2, [r7, #7]
   10a8a:	6839      	ldr	r1, [r7, #0]
   10a8c:	4610      	mov	r0, r2
   10a8e:	4798      	blx	r3
		}
		cg = cg->next;
   10a90:	68fb      	ldr	r3, [r7, #12]
   10a92:	681b      	ldr	r3, [r3, #0]
   10a94:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   10a96:	68fb      	ldr	r3, [r7, #12]
   10a98:	2b00      	cmp	r3, #0
   10a9a:	d1ef      	bne.n	10a7c <usbdc_change_notify+0x14>
	}
}
   10a9c:	bf00      	nop
   10a9e:	3710      	adds	r7, #16
   10aa0:	46bd      	mov	sp, r7
   10aa2:	bd80      	pop	{r7, pc}
   10aa4:	2000204c 	.word	0x2000204c

00010aa8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   10aa8:	b580      	push	{r7, lr}
   10aaa:	b084      	sub	sp, #16
   10aac:	af00      	add	r7, sp, #0
   10aae:	4603      	mov	r3, r0
   10ab0:	6039      	str	r1, [r7, #0]
   10ab2:	71fb      	strb	r3, [r7, #7]
   10ab4:	4613      	mov	r3, r2
   10ab6:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   10ab8:	4b12      	ldr	r3, [pc, #72]	; (10b04 <usbdc_request_handler+0x5c>)
   10aba:	689b      	ldr	r3, [r3, #8]
   10abc:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   10abe:	e019      	b.n	10af4 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   10ac0:	68fb      	ldr	r3, [r7, #12]
   10ac2:	685b      	ldr	r3, [r3, #4]
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	d012      	beq.n	10aee <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   10ac8:	68fb      	ldr	r3, [r7, #12]
   10aca:	685b      	ldr	r3, [r3, #4]
   10acc:	79ba      	ldrb	r2, [r7, #6]
   10ace:	79f8      	ldrb	r0, [r7, #7]
   10ad0:	6839      	ldr	r1, [r7, #0]
   10ad2:	4798      	blx	r3
   10ad4:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   10ad6:	68bb      	ldr	r3, [r7, #8]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d101      	bne.n	10ae0 <usbdc_request_handler+0x38>
				return true;
   10adc:	2301      	movs	r3, #1
   10ade:	e00d      	b.n	10afc <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   10ae0:	68bb      	ldr	r3, [r7, #8]
   10ae2:	f113 0f0a 	cmn.w	r3, #10
   10ae6:	d002      	beq.n	10aee <usbdc_request_handler+0x46>
				return -1;
   10ae8:	f04f 33ff 	mov.w	r3, #4294967295
   10aec:	e006      	b.n	10afc <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   10aee:	68fb      	ldr	r3, [r7, #12]
   10af0:	681b      	ldr	r3, [r3, #0]
   10af2:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   10af4:	68fb      	ldr	r3, [r7, #12]
   10af6:	2b00      	cmp	r3, #0
   10af8:	d1e2      	bne.n	10ac0 <usbdc_request_handler+0x18>
	}
	return false;
   10afa:	2300      	movs	r3, #0
}
   10afc:	4618      	mov	r0, r3
   10afe:	3710      	adds	r7, #16
   10b00:	46bd      	mov	sp, r7
   10b02:	bd80      	pop	{r7, pc}
   10b04:	2000204c 	.word	0x2000204c

00010b08 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   10b0c:	4b01      	ldr	r3, [pc, #4]	; (10b14 <usbd_sof_cb+0xc>)
   10b0e:	4798      	blx	r3
}
   10b10:	bf00      	nop
   10b12:	bd80      	pop	{r7, pc}
   10b14:	00010a35 	.word	0x00010a35

00010b18 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   10b18:	b580      	push	{r7, lr}
   10b1a:	b082      	sub	sp, #8
   10b1c:	af00      	add	r7, sp, #0
   10b1e:	4603      	mov	r3, r0
   10b20:	6039      	str	r1, [r7, #0]
   10b22:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   10b24:	79fb      	ldrb	r3, [r7, #7]
   10b26:	2200      	movs	r2, #0
   10b28:	6839      	ldr	r1, [r7, #0]
   10b2a:	4618      	mov	r0, r3
   10b2c:	4b14      	ldr	r3, [pc, #80]	; (10b80 <usbdc_cb_ctl_req+0x68>)
   10b2e:	4798      	blx	r3
   10b30:	4603      	mov	r3, r0
   10b32:	f1b3 3fff 	cmp.w	r3, #4294967295
   10b36:	d00b      	beq.n	10b50 <usbdc_cb_ctl_req+0x38>
   10b38:	2b01      	cmp	r3, #1
   10b3a:	d007      	beq.n	10b4c <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   10b3c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   10b3e:	683b      	ldr	r3, [r7, #0]
   10b40:	781b      	ldrb	r3, [r3, #0]
   10b42:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   10b46:	2b00      	cmp	r3, #0
   10b48:	d007      	beq.n	10b5a <usbdc_cb_ctl_req+0x42>
   10b4a:	e003      	b.n	10b54 <usbdc_cb_ctl_req+0x3c>
		return true;
   10b4c:	2301      	movs	r3, #1
   10b4e:	e013      	b.n	10b78 <usbdc_cb_ctl_req+0x60>
		return false;
   10b50:	2300      	movs	r3, #0
   10b52:	e011      	b.n	10b78 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   10b54:	2b80      	cmp	r3, #128	; 0x80
   10b56:	d007      	beq.n	10b68 <usbdc_cb_ctl_req+0x50>
   10b58:	e00d      	b.n	10b76 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   10b5a:	79fb      	ldrb	r3, [r7, #7]
   10b5c:	6839      	ldr	r1, [r7, #0]
   10b5e:	4618      	mov	r0, r3
   10b60:	4b08      	ldr	r3, [pc, #32]	; (10b84 <usbdc_cb_ctl_req+0x6c>)
   10b62:	4798      	blx	r3
   10b64:	4603      	mov	r3, r0
   10b66:	e007      	b.n	10b78 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   10b68:	79fb      	ldrb	r3, [r7, #7]
   10b6a:	6839      	ldr	r1, [r7, #0]
   10b6c:	4618      	mov	r0, r3
   10b6e:	4b06      	ldr	r3, [pc, #24]	; (10b88 <usbdc_cb_ctl_req+0x70>)
   10b70:	4798      	blx	r3
   10b72:	4603      	mov	r3, r0
   10b74:	e000      	b.n	10b78 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   10b76:	2300      	movs	r3, #0
	}
}
   10b78:	4618      	mov	r0, r3
   10b7a:	3708      	adds	r7, #8
   10b7c:	46bd      	mov	sp, r7
   10b7e:	bd80      	pop	{r7, pc}
   10b80:	00010aa9 	.word	0x00010aa9
   10b84:	00010949 	.word	0x00010949
   10b88:	00010571 	.word	0x00010571

00010b8c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   10b8c:	b580      	push	{r7, lr}
   10b8e:	b082      	sub	sp, #8
   10b90:	af00      	add	r7, sp, #0
   10b92:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   10b94:	687b      	ldr	r3, [r7, #4]
   10b96:	781b      	ldrb	r3, [r3, #0]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	d135      	bne.n	10c08 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   10b9c:	687b      	ldr	r3, [r7, #4]
   10b9e:	785b      	ldrb	r3, [r3, #1]
   10ba0:	2b05      	cmp	r3, #5
   10ba2:	d019      	beq.n	10bd8 <usbdc_ctrl_status_end+0x4c>
   10ba4:	2b09      	cmp	r3, #9
   10ba6:	d000      	beq.n	10baa <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   10ba8:	e02f      	b.n	10c0a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   10baa:	687b      	ldr	r3, [r7, #4]
   10bac:	885b      	ldrh	r3, [r3, #2]
   10bae:	b29b      	uxth	r3, r3
   10bb0:	b2da      	uxtb	r2, r3
   10bb2:	4b17      	ldr	r3, [pc, #92]	; (10c10 <usbdc_ctrl_status_end+0x84>)
   10bb4:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   10bb6:	687b      	ldr	r3, [r7, #4]
   10bb8:	885b      	ldrh	r3, [r3, #2]
   10bba:	b29b      	uxth	r3, r3
   10bbc:	2b00      	cmp	r3, #0
   10bbe:	d001      	beq.n	10bc4 <usbdc_ctrl_status_end+0x38>
   10bc0:	2204      	movs	r2, #4
   10bc2:	e000      	b.n	10bc6 <usbdc_ctrl_status_end+0x3a>
   10bc4:	2203      	movs	r2, #3
   10bc6:	4b12      	ldr	r3, [pc, #72]	; (10c10 <usbdc_ctrl_status_end+0x84>)
   10bc8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   10bca:	4b11      	ldr	r3, [pc, #68]	; (10c10 <usbdc_ctrl_status_end+0x84>)
   10bcc:	7e9b      	ldrb	r3, [r3, #26]
   10bce:	4619      	mov	r1, r3
   10bd0:	2001      	movs	r0, #1
   10bd2:	4b10      	ldr	r3, [pc, #64]	; (10c14 <usbdc_ctrl_status_end+0x88>)
   10bd4:	4798      	blx	r3
		break;
   10bd6:	e018      	b.n	10c0a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   10bd8:	687b      	ldr	r3, [r7, #4]
   10bda:	885b      	ldrh	r3, [r3, #2]
   10bdc:	b29b      	uxth	r3, r3
   10bde:	b2db      	uxtb	r3, r3
   10be0:	4618      	mov	r0, r3
   10be2:	4b0d      	ldr	r3, [pc, #52]	; (10c18 <usbdc_ctrl_status_end+0x8c>)
   10be4:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   10be6:	687b      	ldr	r3, [r7, #4]
   10be8:	885b      	ldrh	r3, [r3, #2]
   10bea:	b29b      	uxth	r3, r3
   10bec:	2b00      	cmp	r3, #0
   10bee:	d001      	beq.n	10bf4 <usbdc_ctrl_status_end+0x68>
   10bf0:	2203      	movs	r2, #3
   10bf2:	e000      	b.n	10bf6 <usbdc_ctrl_status_end+0x6a>
   10bf4:	2202      	movs	r2, #2
   10bf6:	4b06      	ldr	r3, [pc, #24]	; (10c10 <usbdc_ctrl_status_end+0x84>)
   10bf8:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   10bfa:	4b05      	ldr	r3, [pc, #20]	; (10c10 <usbdc_ctrl_status_end+0x84>)
   10bfc:	7e9b      	ldrb	r3, [r3, #26]
   10bfe:	4619      	mov	r1, r3
   10c00:	2001      	movs	r0, #1
   10c02:	4b04      	ldr	r3, [pc, #16]	; (10c14 <usbdc_ctrl_status_end+0x88>)
   10c04:	4798      	blx	r3
		break;
   10c06:	e000      	b.n	10c0a <usbdc_ctrl_status_end+0x7e>
		return;
   10c08:	bf00      	nop
	}
}
   10c0a:	3708      	adds	r7, #8
   10c0c:	46bd      	mov	sp, r7
   10c0e:	bd80      	pop	{r7, pc}
   10c10:	2000204c 	.word	0x2000204c
   10c14:	00010a69 	.word	0x00010a69
   10c18:	000107e9 	.word	0x000107e9

00010c1c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   10c1c:	b580      	push	{r7, lr}
   10c1e:	b082      	sub	sp, #8
   10c20:	af00      	add	r7, sp, #0
   10c22:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   10c24:	2201      	movs	r2, #1
   10c26:	6879      	ldr	r1, [r7, #4]
   10c28:	2000      	movs	r0, #0
   10c2a:	4b03      	ldr	r3, [pc, #12]	; (10c38 <usbdc_ctrl_data_end+0x1c>)
   10c2c:	4798      	blx	r3
	return false;
   10c2e:	2300      	movs	r3, #0
}
   10c30:	4618      	mov	r0, r3
   10c32:	3708      	adds	r7, #8
   10c34:	46bd      	mov	sp, r7
   10c36:	bd80      	pop	{r7, pc}
   10c38:	00010aa9 	.word	0x00010aa9

00010c3c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   10c3c:	b580      	push	{r7, lr}
   10c3e:	b082      	sub	sp, #8
   10c40:	af00      	add	r7, sp, #0
   10c42:	4603      	mov	r3, r0
   10c44:	603a      	str	r2, [r7, #0]
   10c46:	71fb      	strb	r3, [r7, #7]
   10c48:	460b      	mov	r3, r1
   10c4a:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   10c4c:	79bb      	ldrb	r3, [r7, #6]
   10c4e:	2b00      	cmp	r3, #0
   10c50:	d002      	beq.n	10c58 <usbdc_cb_ctl_done+0x1c>
   10c52:	2b01      	cmp	r3, #1
   10c54:	d004      	beq.n	10c60 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   10c56:	e008      	b.n	10c6a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   10c58:	6838      	ldr	r0, [r7, #0]
   10c5a:	4b06      	ldr	r3, [pc, #24]	; (10c74 <usbdc_cb_ctl_done+0x38>)
   10c5c:	4798      	blx	r3
		break;
   10c5e:	e004      	b.n	10c6a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   10c60:	6838      	ldr	r0, [r7, #0]
   10c62:	4b05      	ldr	r3, [pc, #20]	; (10c78 <usbdc_cb_ctl_done+0x3c>)
   10c64:	4798      	blx	r3
   10c66:	4603      	mov	r3, r0
   10c68:	e000      	b.n	10c6c <usbdc_cb_ctl_done+0x30>
	}
	return false;
   10c6a:	2300      	movs	r3, #0
}
   10c6c:	4618      	mov	r0, r3
   10c6e:	3708      	adds	r7, #8
   10c70:	46bd      	mov	sp, r7
   10c72:	bd80      	pop	{r7, pc}
   10c74:	00010b8d 	.word	0x00010b8d
   10c78:	00010c1d 	.word	0x00010c1d

00010c7c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   10c7c:	b580      	push	{r7, lr}
   10c7e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   10c80:	4b10      	ldr	r3, [pc, #64]	; (10cc4 <usbdc_reset+0x48>)
   10c82:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   10c84:	4b10      	ldr	r3, [pc, #64]	; (10cc8 <usbdc_reset+0x4c>)
   10c86:	2202      	movs	r2, #2
   10c88:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   10c8a:	4b0f      	ldr	r3, [pc, #60]	; (10cc8 <usbdc_reset+0x4c>)
   10c8c:	2200      	movs	r2, #0
   10c8e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   10c90:	4b0d      	ldr	r3, [pc, #52]	; (10cc8 <usbdc_reset+0x4c>)
   10c92:	2200      	movs	r2, #0
   10c94:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   10c96:	2000      	movs	r0, #0
   10c98:	4b0c      	ldr	r3, [pc, #48]	; (10ccc <usbdc_reset+0x50>)
   10c9a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   10c9c:	4b0a      	ldr	r3, [pc, #40]	; (10cc8 <usbdc_reset+0x4c>)
   10c9e:	7f1b      	ldrb	r3, [r3, #28]
   10ca0:	4618      	mov	r0, r3
   10ca2:	4b0b      	ldr	r3, [pc, #44]	; (10cd0 <usbdc_reset+0x54>)
   10ca4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   10ca6:	4a0b      	ldr	r2, [pc, #44]	; (10cd4 <usbdc_reset+0x58>)
   10ca8:	2100      	movs	r1, #0
   10caa:	2000      	movs	r0, #0
   10cac:	4b0a      	ldr	r3, [pc, #40]	; (10cd8 <usbdc_reset+0x5c>)
   10cae:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   10cb0:	4a0a      	ldr	r2, [pc, #40]	; (10cdc <usbdc_reset+0x60>)
   10cb2:	2102      	movs	r1, #2
   10cb4:	2000      	movs	r0, #0
   10cb6:	4b08      	ldr	r3, [pc, #32]	; (10cd8 <usbdc_reset+0x5c>)
   10cb8:	4798      	blx	r3
	usb_d_ep_enable(0);
   10cba:	2000      	movs	r0, #0
   10cbc:	4b08      	ldr	r3, [pc, #32]	; (10ce0 <usbdc_reset+0x64>)
   10cbe:	4798      	blx	r3
}
   10cc0:	bf00      	nop
   10cc2:	bd80      	pop	{r7, pc}
   10cc4:	000106c9 	.word	0x000106c9
   10cc8:	2000204c 	.word	0x2000204c
   10ccc:	00006fe5 	.word	0x00006fe5
   10cd0:	00006f21 	.word	0x00006f21
   10cd4:	00010b19 	.word	0x00010b19
   10cd8:	000072e5 	.word	0x000072e5
   10cdc:	00010c3d 	.word	0x00010c3d
   10ce0:	00007035 	.word	0x00007035

00010ce4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   10ce4:	b580      	push	{r7, lr}
   10ce6:	b082      	sub	sp, #8
   10ce8:	af00      	add	r7, sp, #0
   10cea:	4603      	mov	r3, r0
   10cec:	6039      	str	r1, [r7, #0]
   10cee:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   10cf0:	79fb      	ldrb	r3, [r7, #7]
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d002      	beq.n	10cfc <usbd_event_cb+0x18>
   10cf6:	2b01      	cmp	r3, #1
   10cf8:	d005      	beq.n	10d06 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   10cfa:	e007      	b.n	10d0c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   10cfc:	6839      	ldr	r1, [r7, #0]
   10cfe:	2000      	movs	r0, #0
   10d00:	4b04      	ldr	r3, [pc, #16]	; (10d14 <usbd_event_cb+0x30>)
   10d02:	4798      	blx	r3
		break;
   10d04:	e002      	b.n	10d0c <usbd_event_cb+0x28>
		usbdc_reset();
   10d06:	4b04      	ldr	r3, [pc, #16]	; (10d18 <usbd_event_cb+0x34>)
   10d08:	4798      	blx	r3
		break;
   10d0a:	bf00      	nop
	}
}
   10d0c:	bf00      	nop
   10d0e:	3708      	adds	r7, #8
   10d10:	46bd      	mov	sp, r7
   10d12:	bd80      	pop	{r7, pc}
   10d14:	00010a69 	.word	0x00010a69
   10d18:	00010c7d 	.word	0x00010c7d

00010d1c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b088      	sub	sp, #32
   10d20:	af00      	add	r7, sp, #0
   10d22:	60b9      	str	r1, [r7, #8]
   10d24:	607a      	str	r2, [r7, #4]
   10d26:	461a      	mov	r2, r3
   10d28:	4603      	mov	r3, r0
   10d2a:	73fb      	strb	r3, [r7, #15]
   10d2c:	4613      	mov	r3, r2
   10d2e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   10d30:	68bb      	ldr	r3, [r7, #8]
   10d32:	617b      	str	r3, [r7, #20]
   10d34:	687b      	ldr	r3, [r7, #4]
   10d36:	61bb      	str	r3, [r7, #24]
   10d38:	7bfb      	ldrb	r3, [r7, #15]
   10d3a:	773b      	strb	r3, [r7, #28]
   10d3c:	7bbb      	ldrb	r3, [r7, #14]
   10d3e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   10d40:	f107 0314 	add.w	r3, r7, #20
   10d44:	4618      	mov	r0, r3
   10d46:	4b03      	ldr	r3, [pc, #12]	; (10d54 <usbdc_xfer+0x38>)
   10d48:	4798      	blx	r3
   10d4a:	4603      	mov	r3, r0
}
   10d4c:	4618      	mov	r0, r3
   10d4e:	3720      	adds	r7, #32
   10d50:	46bd      	mov	sp, r7
   10d52:	bd80      	pop	{r7, pc}
   10d54:	000070a5 	.word	0x000070a5

00010d58 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   10d58:	b580      	push	{r7, lr}
   10d5a:	b082      	sub	sp, #8
   10d5c:	af00      	add	r7, sp, #0
   10d5e:	4603      	mov	r3, r0
   10d60:	6039      	str	r1, [r7, #0]
   10d62:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   10d64:	79fb      	ldrb	r3, [r7, #7]
   10d66:	2b01      	cmp	r3, #1
   10d68:	d009      	beq.n	10d7e <usbdc_register_handler+0x26>
   10d6a:	2b02      	cmp	r3, #2
   10d6c:	d00c      	beq.n	10d88 <usbdc_register_handler+0x30>
   10d6e:	2b00      	cmp	r3, #0
   10d70:	d000      	beq.n	10d74 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   10d72:	e00e      	b.n	10d92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   10d74:	6839      	ldr	r1, [r7, #0]
   10d76:	4809      	ldr	r0, [pc, #36]	; (10d9c <usbdc_register_handler+0x44>)
   10d78:	4b09      	ldr	r3, [pc, #36]	; (10da0 <usbdc_register_handler+0x48>)
   10d7a:	4798      	blx	r3
		break;
   10d7c:	e009      	b.n	10d92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   10d7e:	6839      	ldr	r1, [r7, #0]
   10d80:	4808      	ldr	r0, [pc, #32]	; (10da4 <usbdc_register_handler+0x4c>)
   10d82:	4b07      	ldr	r3, [pc, #28]	; (10da0 <usbdc_register_handler+0x48>)
   10d84:	4798      	blx	r3
		break;
   10d86:	e004      	b.n	10d92 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   10d88:	6839      	ldr	r1, [r7, #0]
   10d8a:	4807      	ldr	r0, [pc, #28]	; (10da8 <usbdc_register_handler+0x50>)
   10d8c:	4b04      	ldr	r3, [pc, #16]	; (10da0 <usbdc_register_handler+0x48>)
   10d8e:	4798      	blx	r3
		break;
   10d90:	bf00      	nop
	}
}
   10d92:	bf00      	nop
   10d94:	3708      	adds	r7, #8
   10d96:	46bd      	mov	sp, r7
   10d98:	bd80      	pop	{r7, pc}
   10d9a:	bf00      	nop
   10d9c:	20002050 	.word	0x20002050
   10da0:	0000743d 	.word	0x0000743d
   10da4:	20002054 	.word	0x20002054
   10da8:	20002058 	.word	0x20002058

00010dac <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   10dac:	b580      	push	{r7, lr}
   10dae:	b084      	sub	sp, #16
   10db0:	af00      	add	r7, sp, #0
   10db2:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   10db4:	687b      	ldr	r3, [r7, #4]
   10db6:	2b00      	cmp	r3, #0
   10db8:	bf14      	ite	ne
   10dba:	2301      	movne	r3, #1
   10dbc:	2300      	moveq	r3, #0
   10dbe:	b2db      	uxtb	r3, r3
   10dc0:	f240 3255 	movw	r2, #853	; 0x355
   10dc4:	4910      	ldr	r1, [pc, #64]	; (10e08 <usbdc_init+0x5c>)
   10dc6:	4618      	mov	r0, r3
   10dc8:	4b10      	ldr	r3, [pc, #64]	; (10e0c <usbdc_init+0x60>)
   10dca:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   10dcc:	4b10      	ldr	r3, [pc, #64]	; (10e10 <usbdc_init+0x64>)
   10dce:	4798      	blx	r3
   10dd0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   10dd2:	68fb      	ldr	r3, [r7, #12]
   10dd4:	2b00      	cmp	r3, #0
   10dd6:	da01      	bge.n	10ddc <usbdc_init+0x30>
		return rc;
   10dd8:	68fb      	ldr	r3, [r7, #12]
   10dda:	e010      	b.n	10dfe <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   10ddc:	2220      	movs	r2, #32
   10dde:	2100      	movs	r1, #0
   10de0:	480c      	ldr	r0, [pc, #48]	; (10e14 <usbdc_init+0x68>)
   10de2:	4b0d      	ldr	r3, [pc, #52]	; (10e18 <usbdc_init+0x6c>)
   10de4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   10de6:	4a0b      	ldr	r2, [pc, #44]	; (10e14 <usbdc_init+0x68>)
   10de8:	687b      	ldr	r3, [r7, #4]
   10dea:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   10dec:	490b      	ldr	r1, [pc, #44]	; (10e1c <usbdc_init+0x70>)
   10dee:	2000      	movs	r0, #0
   10df0:	4b0b      	ldr	r3, [pc, #44]	; (10e20 <usbdc_init+0x74>)
   10df2:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   10df4:	490b      	ldr	r1, [pc, #44]	; (10e24 <usbdc_init+0x78>)
   10df6:	2001      	movs	r0, #1
   10df8:	4b09      	ldr	r3, [pc, #36]	; (10e20 <usbdc_init+0x74>)
   10dfa:	4798      	blx	r3

	return 0;
   10dfc:	2300      	movs	r3, #0
}
   10dfe:	4618      	mov	r0, r3
   10e00:	3710      	adds	r7, #16
   10e02:	46bd      	mov	sp, r7
   10e04:	bd80      	pop	{r7, pc}
   10e06:	bf00      	nop
   10e08:	00012d9c 	.word	0x00012d9c
   10e0c:	00007361 	.word	0x00007361
   10e10:	00006e0d 	.word	0x00006e0d
   10e14:	2000204c 	.word	0x2000204c
   10e18:	00011d4d 	.word	0x00011d4d
   10e1c:	00010b09 	.word	0x00010b09
   10e20:	00006eb9 	.word	0x00006eb9
   10e24:	00010ce5 	.word	0x00010ce5

00010e28 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   10e28:	b580      	push	{r7, lr}
   10e2a:	b082      	sub	sp, #8
   10e2c:	af00      	add	r7, sp, #0
   10e2e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   10e30:	6879      	ldr	r1, [r7, #4]
   10e32:	4803      	ldr	r0, [pc, #12]	; (10e40 <usbdc_register_function+0x18>)
   10e34:	4b03      	ldr	r3, [pc, #12]	; (10e44 <usbdc_register_function+0x1c>)
   10e36:	4798      	blx	r3
}
   10e38:	bf00      	nop
   10e3a:	3708      	adds	r7, #8
   10e3c:	46bd      	mov	sp, r7
   10e3e:	bd80      	pop	{r7, pc}
   10e40:	2000205c 	.word	0x2000205c
   10e44:	0000743d 	.word	0x0000743d

00010e48 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   10e48:	b580      	push	{r7, lr}
   10e4a:	b082      	sub	sp, #8
   10e4c:	af00      	add	r7, sp, #0
   10e4e:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   10e50:	4b0f      	ldr	r3, [pc, #60]	; (10e90 <usbdc_start+0x48>)
   10e52:	7e9b      	ldrb	r3, [r3, #26]
   10e54:	2b00      	cmp	r3, #0
   10e56:	d002      	beq.n	10e5e <usbdc_start+0x16>
		return ERR_BUSY;
   10e58:	f06f 0303 	mvn.w	r3, #3
   10e5c:	e013      	b.n	10e86 <usbdc_start+0x3e>
	}

	if (desces) {
   10e5e:	687b      	ldr	r3, [r7, #4]
   10e60:	2b00      	cmp	r3, #0
   10e62:	d00e      	beq.n	10e82 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   10e64:	4a0a      	ldr	r2, [pc, #40]	; (10e90 <usbdc_start+0x48>)
   10e66:	687b      	ldr	r3, [r7, #4]
   10e68:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   10e6a:	687b      	ldr	r3, [r7, #4]
   10e6c:	681b      	ldr	r3, [r3, #0]
   10e6e:	79da      	ldrb	r2, [r3, #7]
   10e70:	4b07      	ldr	r3, [pc, #28]	; (10e90 <usbdc_start+0x48>)
   10e72:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   10e74:	4b06      	ldr	r3, [pc, #24]	; (10e90 <usbdc_start+0x48>)
   10e76:	2201      	movs	r2, #1
   10e78:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   10e7a:	4b06      	ldr	r3, [pc, #24]	; (10e94 <usbdc_start+0x4c>)
   10e7c:	4798      	blx	r3
	return ERR_NONE;
   10e7e:	2300      	movs	r3, #0
   10e80:	e001      	b.n	10e86 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   10e82:	f06f 0308 	mvn.w	r3, #8
}
   10e86:	4618      	mov	r0, r3
   10e88:	3708      	adds	r7, #8
   10e8a:	46bd      	mov	sp, r7
   10e8c:	bd80      	pop	{r7, pc}
   10e8e:	bf00      	nop
   10e90:	2000204c 	.word	0x2000204c
   10e94:	00006edd 	.word	0x00006edd

00010e98 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   10e98:	b580      	push	{r7, lr}
   10e9a:	af00      	add	r7, sp, #0
	usb_d_attach();
   10e9c:	4b01      	ldr	r3, [pc, #4]	; (10ea4 <usbdc_attach+0xc>)
   10e9e:	4798      	blx	r3
}
   10ea0:	bf00      	nop
   10ea2:	bd80      	pop	{r7, pc}
   10ea4:	00006ef1 	.word	0x00006ef1

00010ea8 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   10ea8:	b480      	push	{r7}
   10eaa:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   10eac:	4b03      	ldr	r3, [pc, #12]	; (10ebc <usbdc_get_ctrl_buffer+0x14>)
   10eae:	695b      	ldr	r3, [r3, #20]
}
   10eb0:	4618      	mov	r0, r3
   10eb2:	46bd      	mov	sp, r7
   10eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10eb8:	4770      	bx	lr
   10eba:	bf00      	nop
   10ebc:	2000204c 	.word	0x2000204c

00010ec0 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   10ec0:	b480      	push	{r7}
   10ec2:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   10ec4:	4b07      	ldr	r3, [pc, #28]	; (10ee4 <usbdc_get_state+0x24>)
   10ec6:	7e9b      	ldrb	r3, [r3, #26]
   10ec8:	f003 0310 	and.w	r3, r3, #16
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d001      	beq.n	10ed4 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   10ed0:	2310      	movs	r3, #16
   10ed2:	e001      	b.n	10ed8 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   10ed4:	4b03      	ldr	r3, [pc, #12]	; (10ee4 <usbdc_get_state+0x24>)
   10ed6:	7e9b      	ldrb	r3, [r3, #26]
}
   10ed8:	4618      	mov	r0, r3
   10eda:	46bd      	mov	sp, r7
   10edc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ee0:	4770      	bx	lr
   10ee2:	bf00      	nop
   10ee4:	2000204c 	.word	0x2000204c

00010ee8 <usb_get_u16>:
{
   10ee8:	b480      	push	{r7}
   10eea:	b083      	sub	sp, #12
   10eec:	af00      	add	r7, sp, #0
   10eee:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10ef0:	687b      	ldr	r3, [r7, #4]
   10ef2:	781b      	ldrb	r3, [r3, #0]
   10ef4:	b29a      	uxth	r2, r3
   10ef6:	687b      	ldr	r3, [r7, #4]
   10ef8:	3301      	adds	r3, #1
   10efa:	781b      	ldrb	r3, [r3, #0]
   10efc:	b29b      	uxth	r3, r3
   10efe:	021b      	lsls	r3, r3, #8
   10f00:	b29b      	uxth	r3, r3
   10f02:	4413      	add	r3, r2
   10f04:	b29b      	uxth	r3, r3
}
   10f06:	4618      	mov	r0, r3
   10f08:	370c      	adds	r7, #12
   10f0a:	46bd      	mov	sp, r7
   10f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f10:	4770      	bx	lr

00010f12 <usb_desc_len>:
{
   10f12:	b480      	push	{r7}
   10f14:	b083      	sub	sp, #12
   10f16:	af00      	add	r7, sp, #0
   10f18:	6078      	str	r0, [r7, #4]
	return desc[0];
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	781b      	ldrb	r3, [r3, #0]
}
   10f1e:	4618      	mov	r0, r3
   10f20:	370c      	adds	r7, #12
   10f22:	46bd      	mov	sp, r7
   10f24:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f28:	4770      	bx	lr

00010f2a <usb_desc_type>:
{
   10f2a:	b480      	push	{r7}
   10f2c:	b083      	sub	sp, #12
   10f2e:	af00      	add	r7, sp, #0
   10f30:	6078      	str	r0, [r7, #4]
	return desc[1];
   10f32:	687b      	ldr	r3, [r7, #4]
   10f34:	3301      	adds	r3, #1
   10f36:	781b      	ldrb	r3, [r3, #0]
}
   10f38:	4618      	mov	r0, r3
   10f3a:	370c      	adds	r7, #12
   10f3c:	46bd      	mov	sp, r7
   10f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f42:	4770      	bx	lr

00010f44 <usb_desc_next>:
{
   10f44:	b580      	push	{r7, lr}
   10f46:	b082      	sub	sp, #8
   10f48:	af00      	add	r7, sp, #0
   10f4a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10f4c:	6878      	ldr	r0, [r7, #4]
   10f4e:	4b05      	ldr	r3, [pc, #20]	; (10f64 <usb_desc_next+0x20>)
   10f50:	4798      	blx	r3
   10f52:	4603      	mov	r3, r0
   10f54:	461a      	mov	r2, r3
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	4413      	add	r3, r2
}
   10f5a:	4618      	mov	r0, r3
   10f5c:	3708      	adds	r7, #8
   10f5e:	46bd      	mov	sp, r7
   10f60:	bd80      	pop	{r7, pc}
   10f62:	bf00      	nop
   10f64:	00010f13 	.word	0x00010f13

00010f68 <usb_cfg_desc_total_len>:
{
   10f68:	b580      	push	{r7, lr}
   10f6a:	b082      	sub	sp, #8
   10f6c:	af00      	add	r7, sp, #0
   10f6e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   10f70:	687b      	ldr	r3, [r7, #4]
   10f72:	3302      	adds	r3, #2
   10f74:	4618      	mov	r0, r3
   10f76:	4b03      	ldr	r3, [pc, #12]	; (10f84 <usb_cfg_desc_total_len+0x1c>)
   10f78:	4798      	blx	r3
   10f7a:	4603      	mov	r3, r0
}
   10f7c:	4618      	mov	r0, r3
   10f7e:	3708      	adds	r7, #8
   10f80:	46bd      	mov	sp, r7
   10f82:	bd80      	pop	{r7, pc}
   10f84:	00010ee9 	.word	0x00010ee9

00010f88 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   10f88:	b580      	push	{r7, lr}
   10f8a:	b082      	sub	sp, #8
   10f8c:	af00      	add	r7, sp, #0
   10f8e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   10f90:	6878      	ldr	r0, [r7, #4]
   10f92:	4b05      	ldr	r3, [pc, #20]	; (10fa8 <usb_cfg_desc_next+0x20>)
   10f94:	4798      	blx	r3
   10f96:	4603      	mov	r3, r0
   10f98:	461a      	mov	r2, r3
   10f9a:	687b      	ldr	r3, [r7, #4]
   10f9c:	4413      	add	r3, r2
}
   10f9e:	4618      	mov	r0, r3
   10fa0:	3708      	adds	r7, #8
   10fa2:	46bd      	mov	sp, r7
   10fa4:	bd80      	pop	{r7, pc}
   10fa6:	bf00      	nop
   10fa8:	00010f69 	.word	0x00010f69

00010fac <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   10fac:	b580      	push	{r7, lr}
   10fae:	b084      	sub	sp, #16
   10fb0:	af00      	add	r7, sp, #0
   10fb2:	60f8      	str	r0, [r7, #12]
   10fb4:	60b9      	str	r1, [r7, #8]
   10fb6:	4613      	mov	r3, r2
   10fb8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   10fba:	e015      	b.n	10fe8 <usb_find_desc+0x3c>
		_desc_len_check();
   10fbc:	68f8      	ldr	r0, [r7, #12]
   10fbe:	4b0f      	ldr	r3, [pc, #60]	; (10ffc <usb_find_desc+0x50>)
   10fc0:	4798      	blx	r3
   10fc2:	4603      	mov	r3, r0
   10fc4:	2b01      	cmp	r3, #1
   10fc6:	d801      	bhi.n	10fcc <usb_find_desc+0x20>
   10fc8:	2300      	movs	r3, #0
   10fca:	e012      	b.n	10ff2 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   10fcc:	68f8      	ldr	r0, [r7, #12]
   10fce:	4b0c      	ldr	r3, [pc, #48]	; (11000 <usb_find_desc+0x54>)
   10fd0:	4798      	blx	r3
   10fd2:	4603      	mov	r3, r0
   10fd4:	461a      	mov	r2, r3
   10fd6:	79fb      	ldrb	r3, [r7, #7]
   10fd8:	4293      	cmp	r3, r2
   10fda:	d101      	bne.n	10fe0 <usb_find_desc+0x34>
			return desc;
   10fdc:	68fb      	ldr	r3, [r7, #12]
   10fde:	e008      	b.n	10ff2 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   10fe0:	68f8      	ldr	r0, [r7, #12]
   10fe2:	4b08      	ldr	r3, [pc, #32]	; (11004 <usb_find_desc+0x58>)
   10fe4:	4798      	blx	r3
   10fe6:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   10fe8:	68fa      	ldr	r2, [r7, #12]
   10fea:	68bb      	ldr	r3, [r7, #8]
   10fec:	429a      	cmp	r2, r3
   10fee:	d3e5      	bcc.n	10fbc <usb_find_desc+0x10>
	}
	return NULL;
   10ff0:	2300      	movs	r3, #0
}
   10ff2:	4618      	mov	r0, r3
   10ff4:	3710      	adds	r7, #16
   10ff6:	46bd      	mov	sp, r7
   10ff8:	bd80      	pop	{r7, pc}
   10ffa:	bf00      	nop
   10ffc:	00010f13 	.word	0x00010f13
   11000:	00010f2b 	.word	0x00010f2b
   11004:	00010f45 	.word	0x00010f45

00011008 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   11008:	b580      	push	{r7, lr}
   1100a:	b082      	sub	sp, #8
   1100c:	af00      	add	r7, sp, #0
   1100e:	6078      	str	r0, [r7, #4]
   11010:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   11012:	e019      	b.n	11048 <usb_find_ep_desc+0x40>
		_desc_len_check();
   11014:	6878      	ldr	r0, [r7, #4]
   11016:	4b12      	ldr	r3, [pc, #72]	; (11060 <usb_find_ep_desc+0x58>)
   11018:	4798      	blx	r3
   1101a:	4603      	mov	r3, r0
   1101c:	2b01      	cmp	r3, #1
   1101e:	d801      	bhi.n	11024 <usb_find_ep_desc+0x1c>
   11020:	2300      	movs	r3, #0
   11022:	e018      	b.n	11056 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   11024:	6878      	ldr	r0, [r7, #4]
   11026:	4b0f      	ldr	r3, [pc, #60]	; (11064 <usb_find_ep_desc+0x5c>)
   11028:	4798      	blx	r3
   1102a:	4603      	mov	r3, r0
   1102c:	2b04      	cmp	r3, #4
   1102e:	d010      	beq.n	11052 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   11030:	6878      	ldr	r0, [r7, #4]
   11032:	4b0c      	ldr	r3, [pc, #48]	; (11064 <usb_find_ep_desc+0x5c>)
   11034:	4798      	blx	r3
   11036:	4603      	mov	r3, r0
   11038:	2b05      	cmp	r3, #5
   1103a:	d101      	bne.n	11040 <usb_find_ep_desc+0x38>
			return desc;
   1103c:	687b      	ldr	r3, [r7, #4]
   1103e:	e00a      	b.n	11056 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   11040:	6878      	ldr	r0, [r7, #4]
   11042:	4b09      	ldr	r3, [pc, #36]	; (11068 <usb_find_ep_desc+0x60>)
   11044:	4798      	blx	r3
   11046:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   11048:	687a      	ldr	r2, [r7, #4]
   1104a:	683b      	ldr	r3, [r7, #0]
   1104c:	429a      	cmp	r2, r3
   1104e:	d3e1      	bcc.n	11014 <usb_find_ep_desc+0xc>
   11050:	e000      	b.n	11054 <usb_find_ep_desc+0x4c>
			break;
   11052:	bf00      	nop
	}
	return NULL;
   11054:	2300      	movs	r3, #0
}
   11056:	4618      	mov	r0, r3
   11058:	3708      	adds	r7, #8
   1105a:	46bd      	mov	sp, r7
   1105c:	bd80      	pop	{r7, pc}
   1105e:	bf00      	nop
   11060:	00010f13 	.word	0x00010f13
   11064:	00010f2b 	.word	0x00010f2b
   11068:	00010f45 	.word	0x00010f45

0001106c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   1106c:	b580      	push	{r7, lr}
   1106e:	b084      	sub	sp, #16
   11070:	af00      	add	r7, sp, #0
   11072:	60f8      	str	r0, [r7, #12]
   11074:	60b9      	str	r1, [r7, #8]
   11076:	4613      	mov	r3, r2
   11078:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   1107a:	2202      	movs	r2, #2
   1107c:	68b9      	ldr	r1, [r7, #8]
   1107e:	68f8      	ldr	r0, [r7, #12]
   11080:	4b15      	ldr	r3, [pc, #84]	; (110d8 <usb_find_cfg_desc+0x6c>)
   11082:	4798      	blx	r3
   11084:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   11086:	68fb      	ldr	r3, [r7, #12]
   11088:	2b00      	cmp	r3, #0
   1108a:	d11a      	bne.n	110c2 <usb_find_cfg_desc+0x56>
		return NULL;
   1108c:	2300      	movs	r3, #0
   1108e:	e01f      	b.n	110d0 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   11090:	68f8      	ldr	r0, [r7, #12]
   11092:	4b12      	ldr	r3, [pc, #72]	; (110dc <usb_find_cfg_desc+0x70>)
   11094:	4798      	blx	r3
   11096:	4603      	mov	r3, r0
   11098:	2b01      	cmp	r3, #1
   1109a:	d801      	bhi.n	110a0 <usb_find_cfg_desc+0x34>
   1109c:	2300      	movs	r3, #0
   1109e:	e017      	b.n	110d0 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   110a0:	68fb      	ldr	r3, [r7, #12]
   110a2:	3301      	adds	r3, #1
   110a4:	781b      	ldrb	r3, [r3, #0]
   110a6:	2b02      	cmp	r3, #2
   110a8:	d110      	bne.n	110cc <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   110aa:	68fb      	ldr	r3, [r7, #12]
   110ac:	3305      	adds	r3, #5
   110ae:	781b      	ldrb	r3, [r3, #0]
   110b0:	79fa      	ldrb	r2, [r7, #7]
   110b2:	429a      	cmp	r2, r3
   110b4:	d101      	bne.n	110ba <usb_find_cfg_desc+0x4e>
			return desc;
   110b6:	68fb      	ldr	r3, [r7, #12]
   110b8:	e00a      	b.n	110d0 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   110ba:	68f8      	ldr	r0, [r7, #12]
   110bc:	4b08      	ldr	r3, [pc, #32]	; (110e0 <usb_find_cfg_desc+0x74>)
   110be:	4798      	blx	r3
   110c0:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   110c2:	68fa      	ldr	r2, [r7, #12]
   110c4:	68bb      	ldr	r3, [r7, #8]
   110c6:	429a      	cmp	r2, r3
   110c8:	d3e2      	bcc.n	11090 <usb_find_cfg_desc+0x24>
   110ca:	e000      	b.n	110ce <usb_find_cfg_desc+0x62>
			break;
   110cc:	bf00      	nop
	}
	return NULL;
   110ce:	2300      	movs	r3, #0
}
   110d0:	4618      	mov	r0, r3
   110d2:	3710      	adds	r7, #16
   110d4:	46bd      	mov	sp, r7
   110d6:	bd80      	pop	{r7, pc}
   110d8:	00010fad 	.word	0x00010fad
   110dc:	00010f13 	.word	0x00010f13
   110e0:	00010f89 	.word	0x00010f89

000110e4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   110e4:	b580      	push	{r7, lr}
   110e6:	b086      	sub	sp, #24
   110e8:	af00      	add	r7, sp, #0
   110ea:	60f8      	str	r0, [r7, #12]
   110ec:	60b9      	str	r1, [r7, #8]
   110ee:	4613      	mov	r3, r2
   110f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   110f2:	2300      	movs	r3, #0
   110f4:	75fb      	strb	r3, [r7, #23]
   110f6:	e020      	b.n	1113a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   110f8:	2203      	movs	r2, #3
   110fa:	68b9      	ldr	r1, [r7, #8]
   110fc:	68f8      	ldr	r0, [r7, #12]
   110fe:	4b13      	ldr	r3, [pc, #76]	; (1114c <usb_find_str_desc+0x68>)
   11100:	4798      	blx	r3
   11102:	60f8      	str	r0, [r7, #12]
		if (desc) {
   11104:	68fb      	ldr	r3, [r7, #12]
   11106:	2b00      	cmp	r3, #0
   11108:	d015      	beq.n	11136 <usb_find_str_desc+0x52>
			_desc_len_check();
   1110a:	68f8      	ldr	r0, [r7, #12]
   1110c:	4b10      	ldr	r3, [pc, #64]	; (11150 <usb_find_str_desc+0x6c>)
   1110e:	4798      	blx	r3
   11110:	4603      	mov	r3, r0
   11112:	2b01      	cmp	r3, #1
   11114:	d801      	bhi.n	1111a <usb_find_str_desc+0x36>
   11116:	2300      	movs	r3, #0
   11118:	e014      	b.n	11144 <usb_find_str_desc+0x60>
			if (i == str_index) {
   1111a:	7dfa      	ldrb	r2, [r7, #23]
   1111c:	79fb      	ldrb	r3, [r7, #7]
   1111e:	429a      	cmp	r2, r3
   11120:	d101      	bne.n	11126 <usb_find_str_desc+0x42>
				return desc;
   11122:	68fb      	ldr	r3, [r7, #12]
   11124:	e00e      	b.n	11144 <usb_find_str_desc+0x60>
			}
			i++;
   11126:	7dfb      	ldrb	r3, [r7, #23]
   11128:	3301      	adds	r3, #1
   1112a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   1112c:	68f8      	ldr	r0, [r7, #12]
   1112e:	4b09      	ldr	r3, [pc, #36]	; (11154 <usb_find_str_desc+0x70>)
   11130:	4798      	blx	r3
   11132:	60f8      	str	r0, [r7, #12]
   11134:	e001      	b.n	1113a <usb_find_str_desc+0x56>
		} else {
			return NULL;
   11136:	2300      	movs	r3, #0
   11138:	e004      	b.n	11144 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   1113a:	68fa      	ldr	r2, [r7, #12]
   1113c:	68bb      	ldr	r3, [r7, #8]
   1113e:	429a      	cmp	r2, r3
   11140:	d3da      	bcc.n	110f8 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   11142:	2300      	movs	r3, #0
}
   11144:	4618      	mov	r0, r3
   11146:	3718      	adds	r7, #24
   11148:	46bd      	mov	sp, r7
   1114a:	bd80      	pop	{r7, pc}
   1114c:	00010fad 	.word	0x00010fad
   11150:	00010f13 	.word	0x00010f13
   11154:	00010f45 	.word	0x00010f45

00011158 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   11158:	b480      	push	{r7}
   1115a:	b083      	sub	sp, #12
   1115c:	af00      	add	r7, sp, #0
   1115e:	6078      	str	r0, [r7, #4]
   11160:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   11162:	687b      	ldr	r3, [r7, #4]
   11164:	683a      	ldr	r2, [r7, #0]
   11166:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   11168:	687b      	ldr	r3, [r7, #4]
   1116a:	4618      	mov	r0, r3
   1116c:	370c      	adds	r7, #12
   1116e:	46bd      	mov	sp, r7
   11170:	bc80      	pop	{r7}
   11172:	4770      	bx	lr

00011174 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   11174:	b480      	push	{r7}
   11176:	b083      	sub	sp, #12
   11178:	af00      	add	r7, sp, #0
   1117a:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   1117c:	687b      	ldr	r3, [r7, #4]
   1117e:	4618      	mov	r0, r3
   11180:	370c      	adds	r7, #12
   11182:	46bd      	mov	sp, r7
   11184:	bc80      	pop	{r7}
   11186:	4770      	bx	lr

00011188 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   11188:	b580      	push	{r7, lr}
   1118a:	b082      	sub	sp, #8
   1118c:	af00      	add	r7, sp, #0
   1118e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   11190:	687b      	ldr	r3, [r7, #4]
   11192:	4a23      	ldr	r2, [pc, #140]	; (11220 <_ZN14I2C_Sync_Class4InitEv+0x98>)
   11194:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   11196:	687b      	ldr	r3, [r7, #4]
   11198:	4a21      	ldr	r2, [pc, #132]	; (11220 <_ZN14I2C_Sync_Class4InitEv+0x98>)
   1119a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   1119c:	687b      	ldr	r3, [r7, #4]
   1119e:	691a      	ldr	r2, [r3, #16]
   111a0:	687b      	ldr	r3, [r7, #4]
   111a2:	330c      	adds	r3, #12
   111a4:	4619      	mov	r1, r3
   111a6:	4610      	mov	r0, r2
   111a8:	4b1e      	ldr	r3, [pc, #120]	; (11224 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
   111aa:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   111ac:	687b      	ldr	r3, [r7, #4]
   111ae:	691b      	ldr	r3, [r3, #16]
   111b0:	4618      	mov	r0, r3
   111b2:	4b1d      	ldr	r3, [pc, #116]	; (11228 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
   111b4:	4798      	blx	r3
   111b6:	4603      	mov	r3, r0
   111b8:	b2da      	uxtb	r2, r3
   111ba:	687b      	ldr	r3, [r7, #4]
   111bc:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
   111be:	687b      	ldr	r3, [r7, #4]
   111c0:	7d1b      	ldrb	r3, [r3, #20]
   111c2:	2b00      	cmp	r3, #0
   111c4:	bf0c      	ite	eq
   111c6:	2301      	moveq	r3, #1
   111c8:	2300      	movne	r3, #0
   111ca:	b2da      	uxtb	r2, r3
   111cc:	687b      	ldr	r3, [r7, #4]
   111ce:	725a      	strb	r2, [r3, #9]
	if (isOK)
   111d0:	687b      	ldr	r3, [r7, #4]
   111d2:	7a5b      	ldrb	r3, [r3, #9]
   111d4:	b2db      	uxtb	r3, r3
   111d6:	2b00      	cmp	r3, #0
   111d8:	d116      	bne.n	11208 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
   111da:	687b      	ldr	r3, [r7, #4]
   111dc:	691b      	ldr	r3, [r3, #16]
   111de:	4618      	mov	r0, r3
   111e0:	4b12      	ldr	r3, [pc, #72]	; (1122c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
   111e2:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   111e4:	687b      	ldr	r3, [r7, #4]
   111e6:	691b      	ldr	r3, [r3, #16]
   111e8:	4618      	mov	r0, r3
   111ea:	4b0f      	ldr	r3, [pc, #60]	; (11228 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
   111ec:	4798      	blx	r3
   111ee:	4603      	mov	r3, r0
   111f0:	b2da      	uxtb	r2, r3
   111f2:	687b      	ldr	r3, [r7, #4]
   111f4:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
   111f6:	687b      	ldr	r3, [r7, #4]
   111f8:	7d1b      	ldrb	r3, [r3, #20]
   111fa:	2b00      	cmp	r3, #0
   111fc:	bf0c      	ite	eq
   111fe:	2301      	moveq	r3, #1
   11200:	2300      	movne	r3, #0
   11202:	b2da      	uxtb	r2, r3
   11204:	687b      	ldr	r3, [r7, #4]
   11206:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
   11208:	687b      	ldr	r3, [r7, #4]
   1120a:	7a5b      	ldrb	r3, [r3, #9]
   1120c:	b2da      	uxtb	r2, r3
   1120e:	687b      	ldr	r3, [r7, #4]
   11210:	721a      	strb	r2, [r3, #8]
	return isOK;
   11212:	687b      	ldr	r3, [r7, #4]
   11214:	7a5b      	ldrb	r3, [r3, #9]
   11216:	b2db      	uxtb	r3, r3
	
}
   11218:	4618      	mov	r0, r3
   1121a:	3708      	adds	r7, #8
   1121c:	46bd      	mov	sp, r7
   1121e:	bd80      	pop	{r7, pc}
   11220:	20002084 	.word	0x20002084
   11224:	0000626f 	.word	0x0000626f
   11228:	000061f5 	.word	0x000061f5
   1122c:	00006215 	.word	0x00006215

00011230 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   11230:	b580      	push	{r7, lr}
   11232:	b082      	sub	sp, #8
   11234:	af00      	add	r7, sp, #0
   11236:	6078      	str	r0, [r7, #4]
   11238:	460b      	mov	r3, r1
   1123a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   1123c:	687b      	ldr	r3, [r7, #4]
   1123e:	691b      	ldr	r3, [r3, #16]
   11240:	78fa      	ldrb	r2, [r7, #3]
   11242:	b211      	sxth	r1, r2
   11244:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11248:	4618      	mov	r0, r3
   1124a:	4b03      	ldr	r3, [pc, #12]	; (11258 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   1124c:	4798      	blx	r3
   1124e:	4603      	mov	r3, r0
}
   11250:	4618      	mov	r0, r3
   11252:	3708      	adds	r7, #8
   11254:	46bd      	mov	sp, r7
   11256:	bd80      	pop	{r7, pc}
   11258:	00006235 	.word	0x00006235

0001125c <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   1125c:	b580      	push	{r7, lr}
   1125e:	b086      	sub	sp, #24
   11260:	af00      	add	r7, sp, #0
   11262:	60f8      	str	r0, [r7, #12]
   11264:	60b9      	str	r1, [r7, #8]
   11266:	4613      	mov	r3, r2
   11268:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   1126a:	68fb      	ldr	r3, [r7, #12]
   1126c:	68db      	ldr	r3, [r3, #12]
   1126e:	88fa      	ldrh	r2, [r7, #6]
   11270:	68b9      	ldr	r1, [r7, #8]
   11272:	4618      	mov	r0, r3
   11274:	4b03      	ldr	r3, [pc, #12]	; (11284 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   11276:	4798      	blx	r3
   11278:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   1127a:	697b      	ldr	r3, [r7, #20]
}
   1127c:	4618      	mov	r0, r3
   1127e:	3718      	adds	r7, #24
   11280:	46bd      	mov	sp, r7
   11282:	bd80      	pop	{r7, pc}
   11284:	00011af5 	.word	0x00011af5

00011288 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   11288:	b580      	push	{r7, lr}
   1128a:	b086      	sub	sp, #24
   1128c:	af00      	add	r7, sp, #0
   1128e:	60f8      	str	r0, [r7, #12]
   11290:	60b9      	str	r1, [r7, #8]
   11292:	4613      	mov	r3, r2
   11294:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   11296:	68fb      	ldr	r3, [r7, #12]
   11298:	68db      	ldr	r3, [r3, #12]
   1129a:	88fa      	ldrh	r2, [r7, #6]
   1129c:	68b9      	ldr	r1, [r7, #8]
   1129e:	4618      	mov	r0, r3
   112a0:	4b03      	ldr	r3, [pc, #12]	; (112b0 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   112a2:	4798      	blx	r3
   112a4:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   112a6:	697b      	ldr	r3, [r7, #20]
}
   112a8:	4618      	mov	r0, r3
   112aa:	3718      	adds	r7, #24
   112ac:	46bd      	mov	sp, r7
   112ae:	bd80      	pop	{r7, pc}
   112b0:	00011b45 	.word	0x00011b45

000112b4 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
   112b4:	b580      	push	{r7, lr}
   112b6:	b082      	sub	sp, #8
   112b8:	af00      	add	r7, sp, #0
   112ba:	6078      	str	r0, [r7, #4]
   112bc:	6039      	str	r1, [r7, #0]
   112be:	687b      	ldr	r3, [r7, #4]
   112c0:	2b01      	cmp	r3, #1
   112c2:	d10d      	bne.n	112e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   112c4:	683b      	ldr	r3, [r7, #0]
   112c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   112ca:	4293      	cmp	r3, r2
   112cc:	d108      	bne.n	112e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   112ce:	4906      	ldr	r1, [pc, #24]	; (112e8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   112d0:	4806      	ldr	r0, [pc, #24]	; (112ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   112d2:	4b07      	ldr	r3, [pc, #28]	; (112f0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   112d4:	4798      	blx	r3
   112d6:	4a07      	ldr	r2, [pc, #28]	; (112f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   112d8:	4907      	ldr	r1, [pc, #28]	; (112f8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   112da:	4804      	ldr	r0, [pc, #16]	; (112ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
   112dc:	4b07      	ldr	r3, [pc, #28]	; (112fc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   112de:	4798      	blx	r3
   112e0:	bf00      	nop
   112e2:	3708      	adds	r7, #8
   112e4:	46bd      	mov	sp, r7
   112e6:	bd80      	pop	{r7, pc}
   112e8:	20002654 	.word	0x20002654
   112ec:	2000206c 	.word	0x2000206c
   112f0:	00011159 	.word	0x00011159
   112f4:	20000000 	.word	0x20000000
   112f8:	00011175 	.word	0x00011175
   112fc:	00011b95 	.word	0x00011b95

00011300 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
   11300:	b580      	push	{r7, lr}
   11302:	af00      	add	r7, sp, #0
   11304:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11308:	2001      	movs	r0, #1
   1130a:	4b01      	ldr	r3, [pc, #4]	; (11310 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
   1130c:	4798      	blx	r3
   1130e:	bd80      	pop	{r7, pc}
   11310:	000112b5 	.word	0x000112b5

00011314 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   11314:	b480      	push	{r7}
   11316:	b083      	sub	sp, #12
   11318:	af00      	add	r7, sp, #0
   1131a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1131c:	687b      	ldr	r3, [r7, #4]
   1131e:	4618      	mov	r0, r3
   11320:	370c      	adds	r7, #12
   11322:	46bd      	mov	sp, r7
   11324:	bc80      	pop	{r7}
   11326:	4770      	bx	lr

00011328 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   11328:	b480      	push	{r7}
   1132a:	b083      	sub	sp, #12
   1132c:	af00      	add	r7, sp, #0
   1132e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   11330:	687b      	ldr	r3, [r7, #4]
   11332:	4618      	mov	r0, r3
   11334:	370c      	adds	r7, #12
   11336:	46bd      	mov	sp, r7
   11338:	bc80      	pop	{r7}
   1133a:	4770      	bx	lr

0001133c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   1133c:	b480      	push	{r7}
   1133e:	b085      	sub	sp, #20
   11340:	af00      	add	r7, sp, #0
   11342:	60f8      	str	r0, [r7, #12]
   11344:	460b      	mov	r3, r1
   11346:	607a      	str	r2, [r7, #4]
   11348:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   1134a:	687b      	ldr	r3, [r7, #4]
   1134c:	681a      	ldr	r2, [r3, #0]
   1134e:	68fb      	ldr	r3, [r7, #12]
   11350:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   11352:	687b      	ldr	r3, [r7, #4]
   11354:	685a      	ldr	r2, [r3, #4]
   11356:	68fb      	ldr	r3, [r7, #12]
   11358:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   1135a:	68fb      	ldr	r3, [r7, #12]
   1135c:	7afa      	ldrb	r2, [r7, #11]
   1135e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   11360:	68fb      	ldr	r3, [r7, #12]
   11362:	687a      	ldr	r2, [r7, #4]
   11364:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11366:	68fb      	ldr	r3, [r7, #12]
   11368:	68db      	ldr	r3, [r3, #12]
   1136a:	7a5b      	ldrb	r3, [r3, #9]
   1136c:	b2da      	uxtb	r2, r3
   1136e:	68fb      	ldr	r3, [r7, #12]
   11370:	719a      	strb	r2, [r3, #6]
	return isOK;
   11372:	68fb      	ldr	r3, [r7, #12]
   11374:	799b      	ldrb	r3, [r3, #6]
   11376:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   11378:	4618      	mov	r0, r3
   1137a:	3714      	adds	r7, #20
   1137c:	46bd      	mov	sp, r7
   1137e:	bc80      	pop	{r7}
   11380:	4770      	bx	lr

00011382 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   11382:	b480      	push	{r7}
   11384:	b083      	sub	sp, #12
   11386:	af00      	add	r7, sp, #0
   11388:	6078      	str	r0, [r7, #4]
   1138a:	460b      	mov	r3, r1
   1138c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   1138e:	78fb      	ldrb	r3, [r7, #3]
   11390:	f003 0307 	and.w	r3, r3, #7
   11394:	b2db      	uxtb	r3, r3
}
   11396:	4618      	mov	r0, r3
   11398:	370c      	adds	r7, #12
   1139a:	46bd      	mov	sp, r7
   1139c:	bc80      	pop	{r7}
   1139e:	4770      	bx	lr

000113a0 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   113a0:	b480      	push	{r7}
   113a2:	b083      	sub	sp, #12
   113a4:	af00      	add	r7, sp, #0
   113a6:	6078      	str	r0, [r7, #4]
   113a8:	4608      	mov	r0, r1
   113aa:	4611      	mov	r1, r2
   113ac:	461a      	mov	r2, r3
   113ae:	4603      	mov	r3, r0
   113b0:	70fb      	strb	r3, [r7, #3]
   113b2:	460b      	mov	r3, r1
   113b4:	70bb      	strb	r3, [r7, #2]
   113b6:	4613      	mov	r3, r2
   113b8:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   113ba:	78fb      	ldrb	r3, [r7, #3]
   113bc:	2b07      	cmp	r3, #7
   113be:	dc01      	bgt.n	113c4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   113c0:	78bb      	ldrb	r3, [r7, #2]
   113c2:	e000      	b.n	113c6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   113c4:	787b      	ldrb	r3, [r7, #1]
}
   113c6:	4618      	mov	r0, r3
   113c8:	370c      	adds	r7, #12
   113ca:	46bd      	mov	sp, r7
   113cc:	bc80      	pop	{r7}
   113ce:	4770      	bx	lr

000113d0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   113d0:	b580      	push	{r7, lr}
   113d2:	b082      	sub	sp, #8
   113d4:	af00      	add	r7, sp, #0
   113d6:	6078      	str	r0, [r7, #4]
   113d8:	460b      	mov	r3, r1
   113da:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   113dc:	687b      	ldr	r3, [r7, #4]
   113de:	68da      	ldr	r2, [r3, #12]
   113e0:	687b      	ldr	r3, [r7, #4]
   113e2:	7a1b      	ldrb	r3, [r3, #8]
   113e4:	4619      	mov	r1, r3
   113e6:	4610      	mov	r0, r2
   113e8:	4b0a      	ldr	r3, [pc, #40]	; (11414 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   113ea:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   113ec:	687b      	ldr	r3, [r7, #4]
   113ee:	68db      	ldr	r3, [r3, #12]
   113f0:	1cf9      	adds	r1, r7, #3
   113f2:	2201      	movs	r2, #1
   113f4:	4618      	mov	r0, r3
   113f6:	4b08      	ldr	r3, [pc, #32]	; (11418 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   113f8:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   113fa:	687b      	ldr	r3, [r7, #4]
   113fc:	68db      	ldr	r3, [r3, #12]
   113fe:	6879      	ldr	r1, [r7, #4]
   11400:	2201      	movs	r2, #1
   11402:	4618      	mov	r0, r3
   11404:	4b05      	ldr	r3, [pc, #20]	; (1141c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   11406:	4798      	blx	r3

	return registerValue;
   11408:	687b      	ldr	r3, [r7, #4]
   1140a:	781b      	ldrb	r3, [r3, #0]
}
   1140c:	4618      	mov	r0, r3
   1140e:	3708      	adds	r7, #8
   11410:	46bd      	mov	sp, r7
   11412:	bd80      	pop	{r7, pc}
   11414:	00011231 	.word	0x00011231
   11418:	0001125d 	.word	0x0001125d
   1141c:	00011289 	.word	0x00011289

00011420 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   11420:	b580      	push	{r7, lr}
   11422:	b084      	sub	sp, #16
   11424:	af00      	add	r7, sp, #0
   11426:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11428:	687b      	ldr	r3, [r7, #4]
   1142a:	68da      	ldr	r2, [r3, #12]
   1142c:	687b      	ldr	r3, [r7, #4]
   1142e:	7a1b      	ldrb	r3, [r3, #8]
   11430:	4619      	mov	r1, r3
   11432:	4610      	mov	r0, r2
   11434:	4b06      	ldr	r3, [pc, #24]	; (11450 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   11436:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   11438:	2109      	movs	r1, #9
   1143a:	6878      	ldr	r0, [r7, #4]
   1143c:	4b05      	ldr	r3, [pc, #20]	; (11454 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   1143e:	4798      	blx	r3
   11440:	4603      	mov	r3, r0
   11442:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11444:	7bfb      	ldrb	r3, [r7, #15]
}
   11446:	4618      	mov	r0, r3
   11448:	3710      	adds	r7, #16
   1144a:	46bd      	mov	sp, r7
   1144c:	bd80      	pop	{r7, pc}
   1144e:	bf00      	nop
   11450:	00011231 	.word	0x00011231
   11454:	000113d1 	.word	0x000113d1

00011458 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   11458:	b580      	push	{r7, lr}
   1145a:	b084      	sub	sp, #16
   1145c:	af00      	add	r7, sp, #0
   1145e:	6078      	str	r0, [r7, #4]
   11460:	460b      	mov	r3, r1
   11462:	70fb      	strb	r3, [r7, #3]
   11464:	4613      	mov	r3, r2
   11466:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   11468:	687b      	ldr	r3, [r7, #4]
   1146a:	68da      	ldr	r2, [r3, #12]
   1146c:	687b      	ldr	r3, [r7, #4]
   1146e:	7a1b      	ldrb	r3, [r3, #8]
   11470:	4619      	mov	r1, r3
   11472:	4610      	mov	r0, r2
   11474:	4b09      	ldr	r3, [pc, #36]	; (1149c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   11476:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   11478:	78fb      	ldrb	r3, [r7, #3]
   1147a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   1147c:	78bb      	ldrb	r3, [r7, #2]
   1147e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   11480:	687b      	ldr	r3, [r7, #4]
   11482:	68db      	ldr	r3, [r3, #12]
   11484:	f107 010c 	add.w	r1, r7, #12
   11488:	2202      	movs	r2, #2
   1148a:	4618      	mov	r0, r3
   1148c:	4b04      	ldr	r3, [pc, #16]	; (114a0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   1148e:	4798      	blx	r3
   11490:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   11492:	4618      	mov	r0, r3
   11494:	3710      	adds	r7, #16
   11496:	46bd      	mov	sp, r7
   11498:	bd80      	pop	{r7, pc}
   1149a:	bf00      	nop
   1149c:	00011231 	.word	0x00011231
   114a0:	0001125d 	.word	0x0001125d

000114a4 <_ZN14MCP23008_Class12SetPortInputEh>:
	{
		pinMode(i,MCP23008_INPUT);
		pullUp(i,MCP23008_HIGH);
	}
}
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   114a4:	b580      	push	{r7, lr}
   114a6:	b084      	sub	sp, #16
   114a8:	af00      	add	r7, sp, #0
   114aa:	6078      	str	r0, [r7, #4]
   114ac:	460b      	mov	r3, r1
   114ae:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   114b0:	78fb      	ldrb	r3, [r7, #3]
   114b2:	2b00      	cmp	r3, #0
   114b4:	dd23      	ble.n	114fe <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   114b6:	2300      	movs	r3, #0
   114b8:	73fb      	strb	r3, [r7, #15]
   114ba:	7bfb      	ldrb	r3, [r7, #15]
   114bc:	2b07      	cmp	r3, #7
   114be:	dc21      	bgt.n	11504 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   114c0:	78fa      	ldrb	r2, [r7, #3]
   114c2:	7bfb      	ldrb	r3, [r7, #15]
   114c4:	fa42 f303 	asr.w	r3, r2, r3
   114c8:	f003 0301 	and.w	r3, r3, #1
   114cc:	2b00      	cmp	r3, #0
   114ce:	d00c      	beq.n	114ea <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   114d0:	7bfb      	ldrb	r3, [r7, #15]
   114d2:	2201      	movs	r2, #1
   114d4:	4619      	mov	r1, r3
   114d6:	6878      	ldr	r0, [r7, #4]
   114d8:	4b0c      	ldr	r3, [pc, #48]	; (1150c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   114da:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   114dc:	7bfb      	ldrb	r3, [r7, #15]
   114de:	2201      	movs	r2, #1
   114e0:	4619      	mov	r1, r3
   114e2:	6878      	ldr	r0, [r7, #4]
   114e4:	4b0a      	ldr	r3, [pc, #40]	; (11510 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   114e6:	4798      	blx	r3
   114e8:	e005      	b.n	114f6 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   114ea:	7bfb      	ldrb	r3, [r7, #15]
   114ec:	2200      	movs	r2, #0
   114ee:	4619      	mov	r1, r3
   114f0:	6878      	ldr	r0, [r7, #4]
   114f2:	4b06      	ldr	r3, [pc, #24]	; (1150c <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   114f4:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   114f6:	7bfb      	ldrb	r3, [r7, #15]
   114f8:	3301      	adds	r3, #1
   114fa:	73fb      	strb	r3, [r7, #15]
   114fc:	e7dd      	b.n	114ba <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   114fe:	6878      	ldr	r0, [r7, #4]
   11500:	4b04      	ldr	r3, [pc, #16]	; (11514 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11502:	4798      	blx	r3
	}
	
}
   11504:	bf00      	nop
   11506:	3710      	adds	r7, #16
   11508:	46bd      	mov	sp, r7
   1150a:	bd80      	pop	{r7, pc}
   1150c:	000115d9 	.word	0x000115d9
   11510:	000116bd 	.word	0x000116bd
   11514:	00011519 	.word	0x00011519

00011518 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11518:	b580      	push	{r7, lr}
   1151a:	b084      	sub	sp, #16
   1151c:	af00      	add	r7, sp, #0
   1151e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   11520:	2300      	movs	r3, #0
   11522:	73fb      	strb	r3, [r7, #15]
   11524:	7bfb      	ldrb	r3, [r7, #15]
   11526:	2b07      	cmp	r3, #7
   11528:	dc09      	bgt.n	1153e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   1152a:	7bfb      	ldrb	r3, [r7, #15]
   1152c:	2200      	movs	r2, #0
   1152e:	4619      	mov	r1, r3
   11530:	6878      	ldr	r0, [r7, #4]
   11532:	4b05      	ldr	r3, [pc, #20]	; (11548 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11534:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11536:	7bfb      	ldrb	r3, [r7, #15]
   11538:	3301      	adds	r3, #1
   1153a:	73fb      	strb	r3, [r7, #15]
   1153c:	e7f2      	b.n	11524 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1153e:	bf00      	nop
   11540:	3710      	adds	r7, #16
   11542:	46bd      	mov	sp, r7
   11544:	bd80      	pop	{r7, pc}
   11546:	bf00      	nop
   11548:	000115d9 	.word	0x000115d9

0001154c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   1154c:	b580      	push	{r7, lr}
   1154e:	b084      	sub	sp, #16
   11550:	af00      	add	r7, sp, #0
   11552:	6078      	str	r0, [r7, #4]
   11554:	4608      	mov	r0, r1
   11556:	4611      	mov	r1, r2
   11558:	461a      	mov	r2, r3
   1155a:	4603      	mov	r3, r0
   1155c:	70fb      	strb	r3, [r7, #3]
   1155e:	460b      	mov	r3, r1
   11560:	70bb      	strb	r3, [r7, #2]
   11562:	4613      	mov	r3, r2
   11564:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   11566:	787b      	ldrb	r3, [r7, #1]
   11568:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   1156a:	78fb      	ldrb	r3, [r7, #3]
   1156c:	4619      	mov	r1, r3
   1156e:	6878      	ldr	r0, [r7, #4]
   11570:	4b16      	ldr	r3, [pc, #88]	; (115cc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   11572:	4798      	blx	r3
   11574:	4603      	mov	r3, r0
   11576:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   11578:	7bfb      	ldrb	r3, [r7, #15]
   1157a:	4619      	mov	r1, r3
   1157c:	6878      	ldr	r0, [r7, #4]
   1157e:	4b14      	ldr	r3, [pc, #80]	; (115d0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11580:	4798      	blx	r3
   11582:	4603      	mov	r3, r0
   11584:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   11586:	78bb      	ldrb	r3, [r7, #2]
   11588:	2b00      	cmp	r3, #0
   1158a:	d009      	beq.n	115a0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   1158c:	7bba      	ldrb	r2, [r7, #14]
   1158e:	7b7b      	ldrb	r3, [r7, #13]
   11590:	4619      	mov	r1, r3
   11592:	2301      	movs	r3, #1
   11594:	408b      	lsls	r3, r1
   11596:	b2db      	uxtb	r3, r3
   11598:	4313      	orrs	r3, r2
   1159a:	b2db      	uxtb	r3, r3
   1159c:	73bb      	strb	r3, [r7, #14]
   1159e:	e00a      	b.n	115b6 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   115a0:	7bba      	ldrb	r2, [r7, #14]
   115a2:	7b7b      	ldrb	r3, [r7, #13]
   115a4:	4619      	mov	r1, r3
   115a6:	2301      	movs	r3, #1
   115a8:	408b      	lsls	r3, r1
   115aa:	b2db      	uxtb	r3, r3
   115ac:	43db      	mvns	r3, r3
   115ae:	b2db      	uxtb	r3, r3
   115b0:	4013      	ands	r3, r2
   115b2:	b2db      	uxtb	r3, r3
   115b4:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   115b6:	7bba      	ldrb	r2, [r7, #14]
   115b8:	7bfb      	ldrb	r3, [r7, #15]
   115ba:	4619      	mov	r1, r3
   115bc:	6878      	ldr	r0, [r7, #4]
   115be:	4b05      	ldr	r3, [pc, #20]	; (115d4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   115c0:	4798      	blx	r3
}
   115c2:	bf00      	nop
   115c4:	3710      	adds	r7, #16
   115c6:	46bd      	mov	sp, r7
   115c8:	bd80      	pop	{r7, pc}
   115ca:	bf00      	nop
   115cc:	00011383 	.word	0x00011383
   115d0:	000113d1 	.word	0x000113d1
   115d4:	00011459 	.word	0x00011459

000115d8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   115d8:	b590      	push	{r4, r7, lr}
   115da:	b085      	sub	sp, #20
   115dc:	af02      	add	r7, sp, #8
   115de:	6078      	str	r0, [r7, #4]
   115e0:	460b      	mov	r3, r1
   115e2:	70fb      	strb	r3, [r7, #3]
   115e4:	4613      	mov	r3, r2
   115e6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   115e8:	78bb      	ldrb	r3, [r7, #2]
   115ea:	2b01      	cmp	r3, #1
   115ec:	bf0c      	ite	eq
   115ee:	2301      	moveq	r3, #1
   115f0:	2300      	movne	r3, #0
   115f2:	b2db      	uxtb	r3, r3
   115f4:	461a      	mov	r2, r3
   115f6:	78f9      	ldrb	r1, [r7, #3]
   115f8:	2300      	movs	r3, #0
   115fa:	9300      	str	r3, [sp, #0]
   115fc:	2300      	movs	r3, #0
   115fe:	6878      	ldr	r0, [r7, #4]
   11600:	4c02      	ldr	r4, [pc, #8]	; (1160c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11602:	47a0      	blx	r4
}
   11604:	bf00      	nop
   11606:	370c      	adds	r7, #12
   11608:	46bd      	mov	sp, r7
   1160a:	bd90      	pop	{r4, r7, pc}
   1160c:	0001154d 	.word	0x0001154d

00011610 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11610:	b590      	push	{r4, r7, lr}
   11612:	b085      	sub	sp, #20
   11614:	af00      	add	r7, sp, #0
   11616:	6078      	str	r0, [r7, #4]
   11618:	460b      	mov	r3, r1
   1161a:	70fb      	strb	r3, [r7, #3]
   1161c:	4613      	mov	r3, r2
   1161e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11620:	78fb      	ldrb	r3, [r7, #3]
   11622:	4619      	mov	r1, r3
   11624:	6878      	ldr	r0, [r7, #4]
   11626:	4b21      	ldr	r3, [pc, #132]	; (116ac <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11628:	4798      	blx	r3
   1162a:	4603      	mov	r3, r0
   1162c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1162e:	78f9      	ldrb	r1, [r7, #3]
   11630:	230a      	movs	r3, #10
   11632:	220a      	movs	r2, #10
   11634:	6878      	ldr	r0, [r7, #4]
   11636:	4c1e      	ldr	r4, [pc, #120]	; (116b0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11638:	47a0      	blx	r4
   1163a:	4603      	mov	r3, r0
   1163c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1163e:	7bfb      	ldrb	r3, [r7, #15]
   11640:	4619      	mov	r1, r3
   11642:	6878      	ldr	r0, [r7, #4]
   11644:	4b1b      	ldr	r3, [pc, #108]	; (116b4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11646:	4798      	blx	r3
   11648:	4603      	mov	r3, r0
   1164a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   1164c:	78bb      	ldrb	r3, [r7, #2]
   1164e:	2b00      	cmp	r3, #0
   11650:	d009      	beq.n	11666 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11652:	7bba      	ldrb	r2, [r7, #14]
   11654:	7b7b      	ldrb	r3, [r7, #13]
   11656:	4619      	mov	r1, r3
   11658:	2301      	movs	r3, #1
   1165a:	408b      	lsls	r3, r1
   1165c:	b2db      	uxtb	r3, r3
   1165e:	4313      	orrs	r3, r2
   11660:	b2db      	uxtb	r3, r3
   11662:	73bb      	strb	r3, [r7, #14]
   11664:	e00a      	b.n	1167c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11666:	7bba      	ldrb	r2, [r7, #14]
   11668:	7b7b      	ldrb	r3, [r7, #13]
   1166a:	4619      	mov	r1, r3
   1166c:	2301      	movs	r3, #1
   1166e:	408b      	lsls	r3, r1
   11670:	b2db      	uxtb	r3, r3
   11672:	43db      	mvns	r3, r3
   11674:	b2db      	uxtb	r3, r3
   11676:	4013      	ands	r3, r2
   11678:	b2db      	uxtb	r3, r3
   1167a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   1167c:	78f9      	ldrb	r1, [r7, #3]
   1167e:	2309      	movs	r3, #9
   11680:	2209      	movs	r2, #9
   11682:	6878      	ldr	r0, [r7, #4]
   11684:	4c0a      	ldr	r4, [pc, #40]	; (116b0 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11686:	47a0      	blx	r4
   11688:	4603      	mov	r3, r0
   1168a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   1168c:	7bba      	ldrb	r2, [r7, #14]
   1168e:	7bfb      	ldrb	r3, [r7, #15]
   11690:	4619      	mov	r1, r3
   11692:	6878      	ldr	r0, [r7, #4]
   11694:	4b08      	ldr	r3, [pc, #32]	; (116b8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   11696:	4798      	blx	r3
   11698:	4603      	mov	r3, r0
   1169a:	2b00      	cmp	r3, #0
   1169c:	bf0c      	ite	eq
   1169e:	2301      	moveq	r3, #1
   116a0:	2300      	movne	r3, #0
   116a2:	b2db      	uxtb	r3, r3
}
   116a4:	4618      	mov	r0, r3
   116a6:	3714      	adds	r7, #20
   116a8:	46bd      	mov	sp, r7
   116aa:	bd90      	pop	{r4, r7, pc}
   116ac:	00011383 	.word	0x00011383
   116b0:	000113a1 	.word	0x000113a1
   116b4:	000113d1 	.word	0x000113d1
   116b8:	00011459 	.word	0x00011459

000116bc <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   116bc:	b590      	push	{r4, r7, lr}
   116be:	b085      	sub	sp, #20
   116c0:	af02      	add	r7, sp, #8
   116c2:	6078      	str	r0, [r7, #4]
   116c4:	460b      	mov	r3, r1
   116c6:	70fb      	strb	r3, [r7, #3]
   116c8:	4613      	mov	r3, r2
   116ca:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   116cc:	78ba      	ldrb	r2, [r7, #2]
   116ce:	78f9      	ldrb	r1, [r7, #3]
   116d0:	2306      	movs	r3, #6
   116d2:	9300      	str	r3, [sp, #0]
   116d4:	2306      	movs	r3, #6
   116d6:	6878      	ldr	r0, [r7, #4]
   116d8:	4c02      	ldr	r4, [pc, #8]	; (116e4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   116da:	47a0      	blx	r4
}
   116dc:	bf00      	nop
   116de:	370c      	adds	r7, #12
   116e0:	46bd      	mov	sp, r7
   116e2:	bd90      	pop	{r4, r7, pc}
   116e4:	0001154d 	.word	0x0001154d

000116e8 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   116e8:	b580      	push	{r7, lr}
   116ea:	b082      	sub	sp, #8
   116ec:	af00      	add	r7, sp, #0
   116ee:	6078      	str	r0, [r7, #4]
   116f0:	6039      	str	r1, [r7, #0]
   116f2:	687b      	ldr	r3, [r7, #4]
   116f4:	2b01      	cmp	r3, #1
   116f6:	d10d      	bne.n	11714 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   116f8:	683b      	ldr	r3, [r7, #0]
   116fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   116fe:	4293      	cmp	r3, r2
   11700:	d108      	bne.n	11714 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   11702:	4906      	ldr	r1, [pc, #24]	; (1171c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11704:	4806      	ldr	r0, [pc, #24]	; (11720 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11706:	4b07      	ldr	r3, [pc, #28]	; (11724 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11708:	4798      	blx	r3
   1170a:	4a07      	ldr	r2, [pc, #28]	; (11728 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1170c:	4907      	ldr	r1, [pc, #28]	; (1172c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1170e:	4804      	ldr	r0, [pc, #16]	; (11720 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11710:	4b07      	ldr	r3, [pc, #28]	; (11730 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   11712:	4798      	blx	r3
   11714:	bf00      	nop
   11716:	3708      	adds	r7, #8
   11718:	46bd      	mov	sp, r7
   1171a:	bd80      	pop	{r7, pc}
   1171c:	20002654 	.word	0x20002654
   11720:	20002104 	.word	0x20002104
   11724:	00011159 	.word	0x00011159
   11728:	20000000 	.word	0x20000000
   1172c:	00011175 	.word	0x00011175
   11730:	00011b95 	.word	0x00011b95

00011734 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   11734:	b580      	push	{r7, lr}
   11736:	af00      	add	r7, sp, #0
   11738:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1173c:	2001      	movs	r0, #1
   1173e:	4b01      	ldr	r3, [pc, #4]	; (11744 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   11740:	4798      	blx	r3
   11742:	bd80      	pop	{r7, pc}
   11744:	000116e9 	.word	0x000116e9

00011748 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   11748:	b480      	push	{r7}
   1174a:	b083      	sub	sp, #12
   1174c:	af00      	add	r7, sp, #0
   1174e:	6078      	str	r0, [r7, #4]
   11750:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   11752:	687b      	ldr	r3, [r7, #4]
   11754:	683a      	ldr	r2, [r7, #0]
   11756:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   11758:	687b      	ldr	r3, [r7, #4]
   1175a:	68db      	ldr	r3, [r3, #12]
   1175c:	2200      	movs	r2, #0
   1175e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   11760:	4a06      	ldr	r2, [pc, #24]	; (1177c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   11762:	687b      	ldr	r3, [r7, #4]
   11764:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   11766:	687b      	ldr	r3, [r7, #4]
   11768:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1176c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   1176e:	687b      	ldr	r3, [r7, #4]
   11770:	4618      	mov	r0, r3
   11772:	370c      	adds	r7, #12
   11774:	46bd      	mov	sp, r7
   11776:	bc80      	pop	{r7}
   11778:	4770      	bx	lr
   1177a:	bf00      	nop
   1177c:	2000221c 	.word	0x2000221c

00011780 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   11780:	b480      	push	{r7}
   11782:	b083      	sub	sp, #12
   11784:	af00      	add	r7, sp, #0
   11786:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   11788:	687b      	ldr	r3, [r7, #4]
   1178a:	2200      	movs	r2, #0
   1178c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   1178e:	687b      	ldr	r3, [r7, #4]
   11790:	4618      	mov	r0, r3
   11792:	370c      	adds	r7, #12
   11794:	46bd      	mov	sp, r7
   11796:	bc80      	pop	{r7}
   11798:	4770      	bx	lr
	...

0001179c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   1179c:	b580      	push	{r7, lr}
   1179e:	b086      	sub	sp, #24
   117a0:	af00      	add	r7, sp, #0
   117a2:	60f8      	str	r0, [r7, #12]
   117a4:	60b9      	str	r1, [r7, #8]
   117a6:	607a      	str	r2, [r7, #4]
   117a8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   117aa:	68b9      	ldr	r1, [r7, #8]
   117ac:	68f8      	ldr	r0, [r7, #12]
   117ae:	4b0e      	ldr	r3, [pc, #56]	; (117e8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   117b0:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   117b2:	68fb      	ldr	r3, [r7, #12]
   117b4:	699b      	ldr	r3, [r3, #24]
   117b6:	687a      	ldr	r2, [r7, #4]
   117b8:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   117ba:	68fb      	ldr	r3, [r7, #12]
   117bc:	699b      	ldr	r3, [r3, #24]
   117be:	68ba      	ldr	r2, [r7, #8]
   117c0:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   117c2:	68fb      	ldr	r3, [r7, #12]
   117c4:	699b      	ldr	r3, [r3, #24]
   117c6:	78fa      	ldrb	r2, [r7, #3]
   117c8:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   117ca:	68fb      	ldr	r3, [r7, #12]
   117cc:	68da      	ldr	r2, [r3, #12]
   117ce:	68fb      	ldr	r3, [r7, #12]
   117d0:	699b      	ldr	r3, [r3, #24]
   117d2:	4619      	mov	r1, r3
   117d4:	4610      	mov	r0, r2
   117d6:	4b05      	ldr	r3, [pc, #20]	; (117ec <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   117d8:	4798      	blx	r3
   117da:	6178      	str	r0, [r7, #20]
	
	return status;
   117dc:	697b      	ldr	r3, [r7, #20]
}
   117de:	4618      	mov	r0, r3
   117e0:	3718      	adds	r7, #24
   117e2:	46bd      	mov	sp, r7
   117e4:	bd80      	pop	{r7, pc}
   117e6:	bf00      	nop
   117e8:	00011905 	.word	0x00011905
   117ec:	000066f1 	.word	0x000066f1

000117f0 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   117f0:	b580      	push	{r7, lr}
   117f2:	b082      	sub	sp, #8
   117f4:	af00      	add	r7, sp, #0
   117f6:	6078      	str	r0, [r7, #4]
   117f8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   117fa:	6839      	ldr	r1, [r7, #0]
   117fc:	6878      	ldr	r0, [r7, #4]
   117fe:	4b0f      	ldr	r3, [pc, #60]	; (1183c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   11800:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   11802:	687b      	ldr	r3, [r7, #4]
   11804:	68db      	ldr	r3, [r3, #12]
   11806:	f103 0218 	add.w	r2, r3, #24
   1180a:	687b      	ldr	r3, [r7, #4]
   1180c:	699b      	ldr	r3, [r3, #24]
   1180e:	4619      	mov	r1, r3
   11810:	4610      	mov	r0, r2
   11812:	4b0b      	ldr	r3, [pc, #44]	; (11840 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   11814:	4798      	blx	r3
   11816:	4603      	mov	r3, r0
   11818:	2b00      	cmp	r3, #0
   1181a:	d007      	beq.n	1182c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   1181c:	687b      	ldr	r3, [r7, #4]
   1181e:	68da      	ldr	r2, [r3, #12]
   11820:	687b      	ldr	r3, [r7, #4]
   11822:	699b      	ldr	r3, [r3, #24]
   11824:	4619      	mov	r1, r3
   11826:	4610      	mov	r0, r2
   11828:	4b06      	ldr	r3, [pc, #24]	; (11844 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   1182a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   1182c:	687b      	ldr	r3, [r7, #4]
   1182e:	699b      	ldr	r3, [r3, #24]
   11830:	2200      	movs	r2, #0
   11832:	60da      	str	r2, [r3, #12]
}
   11834:	bf00      	nop
   11836:	3708      	adds	r7, #8
   11838:	46bd      	mov	sp, r7
   1183a:	bd80      	pop	{r7, pc}
   1183c:	00011985 	.word	0x00011985
   11840:	00007389 	.word	0x00007389
   11844:	000067f5 	.word	0x000067f5

00011848 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   11848:	b590      	push	{r4, r7, lr}
   1184a:	b087      	sub	sp, #28
   1184c:	af00      	add	r7, sp, #0
   1184e:	60f8      	str	r0, [r7, #12]
   11850:	60b9      	str	r1, [r7, #8]
   11852:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   11854:	2300      	movs	r3, #0
   11856:	687a      	ldr	r2, [r7, #4]
   11858:	68b9      	ldr	r1, [r7, #8]
   1185a:	68f8      	ldr	r0, [r7, #12]
   1185c:	4c0c      	ldr	r4, [pc, #48]	; (11890 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   1185e:	47a0      	blx	r4
   11860:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   11862:	68fb      	ldr	r3, [r7, #12]
   11864:	68db      	ldr	r3, [r3, #12]
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	699b      	ldr	r3, [r3, #24]
   1186a:	68fa      	ldr	r2, [r7, #12]
   1186c:	68d2      	ldr	r2, [r2, #12]
   1186e:	3204      	adds	r2, #4
   11870:	4610      	mov	r0, r2
   11872:	4798      	blx	r3
   11874:	4603      	mov	r3, r0
   11876:	2b00      	cmp	r3, #0
   11878:	d105      	bne.n	11886 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   1187a:	68fb      	ldr	r3, [r7, #12]
   1187c:	68db      	ldr	r3, [r3, #12]
   1187e:	4618      	mov	r0, r3
   11880:	4b04      	ldr	r3, [pc, #16]	; (11894 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   11882:	4798      	blx	r3
   11884:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   11886:	697b      	ldr	r3, [r7, #20]
}
   11888:	4618      	mov	r0, r3
   1188a:	371c      	adds	r7, #28
   1188c:	46bd      	mov	sp, r7
   1188e:	bd90      	pop	{r4, r7, pc}
   11890:	0001179d 	.word	0x0001179d
   11894:	00006689 	.word	0x00006689

00011898 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   11898:	b480      	push	{r7}
   1189a:	b085      	sub	sp, #20
   1189c:	af00      	add	r7, sp, #0
   1189e:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   118a0:	2300      	movs	r3, #0
   118a2:	73fb      	strb	r3, [r7, #15]
   118a4:	7bfb      	ldrb	r3, [r7, #15]
   118a6:	2b1f      	cmp	r3, #31
   118a8:	dc23      	bgt.n	118f2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   118aa:	687b      	ldr	r3, [r7, #4]
   118ac:	7f1a      	ldrb	r2, [r3, #28]
   118ae:	7bfb      	ldrb	r3, [r7, #15]
   118b0:	4413      	add	r3, r2
   118b2:	b2db      	uxtb	r3, r3
   118b4:	f003 031f 	and.w	r3, r3, #31
   118b8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   118ba:	7bba      	ldrb	r2, [r7, #14]
   118bc:	4910      	ldr	r1, [pc, #64]	; (11900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   118be:	4613      	mov	r3, r2
   118c0:	009b      	lsls	r3, r3, #2
   118c2:	4413      	add	r3, r2
   118c4:	009b      	lsls	r3, r3, #2
   118c6:	440b      	add	r3, r1
   118c8:	330c      	adds	r3, #12
   118ca:	681b      	ldr	r3, [r3, #0]
   118cc:	2b00      	cmp	r3, #0
   118ce:	d10c      	bne.n	118ea <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   118d0:	7bba      	ldrb	r2, [r7, #14]
   118d2:	4613      	mov	r3, r2
   118d4:	009b      	lsls	r3, r3, #2
   118d6:	4413      	add	r3, r2
   118d8:	009b      	lsls	r3, r3, #2
   118da:	4a09      	ldr	r2, [pc, #36]	; (11900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   118dc:	441a      	add	r2, r3
   118de:	687b      	ldr	r3, [r7, #4]
   118e0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   118e2:	687b      	ldr	r3, [r7, #4]
   118e4:	7bba      	ldrb	r2, [r7, #14]
   118e6:	771a      	strb	r2, [r3, #28]
			return;
   118e8:	e006      	b.n	118f8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   118ea:	7bfb      	ldrb	r3, [r7, #15]
   118ec:	3301      	adds	r3, #1
   118ee:	73fb      	strb	r3, [r7, #15]
   118f0:	e7d8      	b.n	118a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   118f2:	687b      	ldr	r3, [r7, #4]
   118f4:	4a02      	ldr	r2, [pc, #8]	; (11900 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   118f6:	619a      	str	r2, [r3, #24]

}
   118f8:	3714      	adds	r7, #20
   118fa:	46bd      	mov	sp, r7
   118fc:	bc80      	pop	{r7}
   118fe:	4770      	bx	lr
   11900:	20002220 	.word	0x20002220

00011904 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   11904:	b580      	push	{r7, lr}
   11906:	b084      	sub	sp, #16
   11908:	af00      	add	r7, sp, #0
   1190a:	6078      	str	r0, [r7, #4]
   1190c:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1190e:	2300      	movs	r3, #0
   11910:	73fb      	strb	r3, [r7, #15]
   11912:	7bfb      	ldrb	r3, [r7, #15]
   11914:	2b1f      	cmp	r3, #31
   11916:	dc28      	bgt.n	1196a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   11918:	687b      	ldr	r3, [r7, #4]
   1191a:	7f1a      	ldrb	r2, [r3, #28]
   1191c:	7bfb      	ldrb	r3, [r7, #15]
   1191e:	4413      	add	r3, r2
   11920:	b2db      	uxtb	r3, r3
   11922:	f003 031f 	and.w	r3, r3, #31
   11926:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   11928:	7bba      	ldrb	r2, [r7, #14]
   1192a:	4913      	ldr	r1, [pc, #76]	; (11978 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   1192c:	4613      	mov	r3, r2
   1192e:	009b      	lsls	r3, r3, #2
   11930:	4413      	add	r3, r2
   11932:	009b      	lsls	r3, r3, #2
   11934:	440b      	add	r3, r1
   11936:	330c      	adds	r3, #12
   11938:	681a      	ldr	r2, [r3, #0]
   1193a:	683b      	ldr	r3, [r7, #0]
   1193c:	429a      	cmp	r2, r3
   1193e:	d110      	bne.n	11962 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   11940:	6839      	ldr	r1, [r7, #0]
   11942:	6878      	ldr	r0, [r7, #4]
   11944:	4b0d      	ldr	r3, [pc, #52]	; (1197c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   11946:	4798      	blx	r3
			task=&taskArray[j];
   11948:	7bba      	ldrb	r2, [r7, #14]
   1194a:	4613      	mov	r3, r2
   1194c:	009b      	lsls	r3, r3, #2
   1194e:	4413      	add	r3, r2
   11950:	009b      	lsls	r3, r3, #2
   11952:	4a09      	ldr	r2, [pc, #36]	; (11978 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   11954:	441a      	add	r2, r3
   11956:	687b      	ldr	r3, [r7, #4]
   11958:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   1195a:	687b      	ldr	r3, [r7, #4]
   1195c:	7bba      	ldrb	r2, [r7, #14]
   1195e:	771a      	strb	r2, [r3, #28]
			return;
   11960:	e006      	b.n	11970 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   11962:	7bfb      	ldrb	r3, [r7, #15]
   11964:	3301      	adds	r3, #1
   11966:	73fb      	strb	r3, [r7, #15]
   11968:	e7d3      	b.n	11912 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   1196a:	6878      	ldr	r0, [r7, #4]
   1196c:	4b04      	ldr	r3, [pc, #16]	; (11980 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   1196e:	4798      	blx	r3
	//task=&taskArray[0];

}
   11970:	3710      	adds	r7, #16
   11972:	46bd      	mov	sp, r7
   11974:	bd80      	pop	{r7, pc}
   11976:	bf00      	nop
   11978:	20002220 	.word	0x20002220
   1197c:	000117f1 	.word	0x000117f1
   11980:	00011899 	.word	0x00011899

00011984 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   11984:	b480      	push	{r7}
   11986:	b085      	sub	sp, #20
   11988:	af00      	add	r7, sp, #0
   1198a:	6078      	str	r0, [r7, #4]
   1198c:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1198e:	2300      	movs	r3, #0
   11990:	73fb      	strb	r3, [r7, #15]
   11992:	7bfb      	ldrb	r3, [r7, #15]
   11994:	2b1f      	cmp	r3, #31
   11996:	dc19      	bgt.n	119cc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   11998:	7bfa      	ldrb	r2, [r7, #15]
   1199a:	490f      	ldr	r1, [pc, #60]	; (119d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   1199c:	4613      	mov	r3, r2
   1199e:	009b      	lsls	r3, r3, #2
   119a0:	4413      	add	r3, r2
   119a2:	009b      	lsls	r3, r3, #2
   119a4:	440b      	add	r3, r1
   119a6:	330c      	adds	r3, #12
   119a8:	681a      	ldr	r2, [r3, #0]
   119aa:	683b      	ldr	r3, [r7, #0]
   119ac:	429a      	cmp	r2, r3
   119ae:	d109      	bne.n	119c4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   119b0:	7bfa      	ldrb	r2, [r7, #15]
   119b2:	4613      	mov	r3, r2
   119b4:	009b      	lsls	r3, r3, #2
   119b6:	4413      	add	r3, r2
   119b8:	009b      	lsls	r3, r3, #2
   119ba:	4a07      	ldr	r2, [pc, #28]	; (119d8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   119bc:	441a      	add	r2, r3
   119be:	687b      	ldr	r3, [r7, #4]
   119c0:	619a      	str	r2, [r3, #24]
			return;
   119c2:	e004      	b.n	119ce <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   119c4:	7bfb      	ldrb	r3, [r7, #15]
   119c6:	3301      	adds	r3, #1
   119c8:	73fb      	strb	r3, [r7, #15]
   119ca:	e7e2      	b.n	11992 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   119cc:	bf00      	nop
}
   119ce:	3714      	adds	r7, #20
   119d0:	46bd      	mov	sp, r7
   119d2:	bc80      	pop	{r7}
   119d4:	4770      	bx	lr
   119d6:	bf00      	nop
   119d8:	20002220 	.word	0x20002220

000119dc <_Z41__static_initialization_and_destruction_0ii>:
   119dc:	b580      	push	{r7, lr}
   119de:	b082      	sub	sp, #8
   119e0:	af00      	add	r7, sp, #0
   119e2:	6078      	str	r0, [r7, #4]
   119e4:	6039      	str	r1, [r7, #0]
   119e6:	687b      	ldr	r3, [r7, #4]
   119e8:	2b01      	cmp	r3, #1
   119ea:	d14c      	bne.n	11a86 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   119ec:	683b      	ldr	r3, [r7, #0]
   119ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   119f2:	4293      	cmp	r3, r2
   119f4:	d147      	bne.n	11a86 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   119f6:	4926      	ldr	r1, [pc, #152]	; (11a90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   119f8:	4826      	ldr	r0, [pc, #152]	; (11a94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   119fa:	4b27      	ldr	r3, [pc, #156]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   119fc:	4798      	blx	r3
   119fe:	4a27      	ldr	r2, [pc, #156]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a00:	4927      	ldr	r1, [pc, #156]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a02:	4824      	ldr	r0, [pc, #144]	; (11a94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   11a04:	4b27      	ldr	r3, [pc, #156]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a06:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   11a08:	4927      	ldr	r1, [pc, #156]	; (11aa8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11a0a:	4828      	ldr	r0, [pc, #160]	; (11aac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11a0c:	4b22      	ldr	r3, [pc, #136]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a0e:	4798      	blx	r3
   11a10:	4a22      	ldr	r2, [pc, #136]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a12:	4923      	ldr	r1, [pc, #140]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a14:	4825      	ldr	r0, [pc, #148]	; (11aac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11a16:	4b23      	ldr	r3, [pc, #140]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a18:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   11a1a:	4925      	ldr	r1, [pc, #148]	; (11ab0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11a1c:	4825      	ldr	r0, [pc, #148]	; (11ab4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11a1e:	4b1e      	ldr	r3, [pc, #120]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a20:	4798      	blx	r3
   11a22:	4a1e      	ldr	r2, [pc, #120]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a24:	491e      	ldr	r1, [pc, #120]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a26:	4823      	ldr	r0, [pc, #140]	; (11ab4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11a28:	4b1e      	ldr	r3, [pc, #120]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a2a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11a2c:	4922      	ldr	r1, [pc, #136]	; (11ab8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   11a2e:	4823      	ldr	r0, [pc, #140]	; (11abc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11a30:	4b19      	ldr	r3, [pc, #100]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a32:	4798      	blx	r3
   11a34:	4a19      	ldr	r2, [pc, #100]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a36:	491a      	ldr	r1, [pc, #104]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a38:	4820      	ldr	r0, [pc, #128]	; (11abc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11a3a:	4b1a      	ldr	r3, [pc, #104]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a3c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   11a3e:	4920      	ldr	r1, [pc, #128]	; (11ac0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   11a40:	4820      	ldr	r0, [pc, #128]	; (11ac4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11a42:	4b15      	ldr	r3, [pc, #84]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a44:	4798      	blx	r3
   11a46:	4a15      	ldr	r2, [pc, #84]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a48:	4915      	ldr	r1, [pc, #84]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a4a:	481e      	ldr	r0, [pc, #120]	; (11ac4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11a4c:	4b15      	ldr	r3, [pc, #84]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a4e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11a50:	491d      	ldr	r1, [pc, #116]	; (11ac8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   11a52:	481e      	ldr	r0, [pc, #120]	; (11acc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11a54:	4b10      	ldr	r3, [pc, #64]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a56:	4798      	blx	r3
   11a58:	4a10      	ldr	r2, [pc, #64]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a5a:	4911      	ldr	r1, [pc, #68]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a5c:	481b      	ldr	r0, [pc, #108]	; (11acc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11a5e:	4b11      	ldr	r3, [pc, #68]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a60:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11a62:	491b      	ldr	r1, [pc, #108]	; (11ad0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11a64:	481b      	ldr	r0, [pc, #108]	; (11ad4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11a66:	4b0c      	ldr	r3, [pc, #48]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a68:	4798      	blx	r3
   11a6a:	4a0c      	ldr	r2, [pc, #48]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a6c:	490c      	ldr	r1, [pc, #48]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a6e:	4819      	ldr	r0, [pc, #100]	; (11ad4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11a70:	4b0c      	ldr	r3, [pc, #48]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a72:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11a74:	4918      	ldr	r1, [pc, #96]	; (11ad8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   11a76:	4819      	ldr	r0, [pc, #100]	; (11adc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11a78:	4b07      	ldr	r3, [pc, #28]	; (11a98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11a7a:	4798      	blx	r3
   11a7c:	4a07      	ldr	r2, [pc, #28]	; (11a9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11a7e:	4908      	ldr	r1, [pc, #32]	; (11aa0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11a80:	4816      	ldr	r0, [pc, #88]	; (11adc <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11a82:	4b08      	ldr	r3, [pc, #32]	; (11aa4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11a84:	4798      	blx	r3
   11a86:	bf00      	nop
   11a88:	3708      	adds	r7, #8
   11a8a:	46bd      	mov	sp, r7
   11a8c:	bd80      	pop	{r7, pc}
   11a8e:	bf00      	nop
   11a90:	20002524 	.word	0x20002524
   11a94:	2000211c 	.word	0x2000211c
   11a98:	00011749 	.word	0x00011749
   11a9c:	20000000 	.word	0x20000000
   11aa0:	00011781 	.word	0x00011781
   11aa4:	00011b95 	.word	0x00011b95
   11aa8:	200025b8 	.word	0x200025b8
   11aac:	2000213c 	.word	0x2000213c
   11ab0:	200026dc 	.word	0x200026dc
   11ab4:	2000215c 	.word	0x2000215c
   11ab8:	200025d8 	.word	0x200025d8
   11abc:	2000217c 	.word	0x2000217c
   11ac0:	2000269c 	.word	0x2000269c
   11ac4:	2000219c 	.word	0x2000219c
   11ac8:	200026bc 	.word	0x200026bc
   11acc:	200021bc 	.word	0x200021bc
   11ad0:	20002594 	.word	0x20002594
   11ad4:	200021dc 	.word	0x200021dc
   11ad8:	20002634 	.word	0x20002634
   11adc:	200021fc 	.word	0x200021fc

00011ae0 <_GLOBAL__sub_I_ptrTimerClass>:
   11ae0:	b580      	push	{r7, lr}
   11ae2:	af00      	add	r7, sp, #0
   11ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11ae8:	2001      	movs	r0, #1
   11aea:	4b01      	ldr	r3, [pc, #4]	; (11af0 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   11aec:	4798      	blx	r3
   11aee:	bd80      	pop	{r7, pc}
   11af0:	000119dd 	.word	0x000119dd

00011af4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   11af4:	b580      	push	{r7, lr}
   11af6:	b084      	sub	sp, #16
   11af8:	af00      	add	r7, sp, #0
   11afa:	60f8      	str	r0, [r7, #12]
   11afc:	60b9      	str	r1, [r7, #8]
   11afe:	4613      	mov	r3, r2
   11b00:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11b02:	68fb      	ldr	r3, [r7, #12]
   11b04:	2b00      	cmp	r3, #0
   11b06:	d004      	beq.n	11b12 <io_write+0x1e>
   11b08:	68bb      	ldr	r3, [r7, #8]
   11b0a:	2b00      	cmp	r3, #0
   11b0c:	d001      	beq.n	11b12 <io_write+0x1e>
   11b0e:	2301      	movs	r3, #1
   11b10:	e000      	b.n	11b14 <io_write+0x20>
   11b12:	2300      	movs	r3, #0
   11b14:	f003 0301 	and.w	r3, r3, #1
   11b18:	b2db      	uxtb	r3, r3
   11b1a:	2234      	movs	r2, #52	; 0x34
   11b1c:	4907      	ldr	r1, [pc, #28]	; (11b3c <io_write+0x48>)
   11b1e:	4618      	mov	r0, r3
   11b20:	4b07      	ldr	r3, [pc, #28]	; (11b40 <io_write+0x4c>)
   11b22:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11b24:	68fb      	ldr	r3, [r7, #12]
   11b26:	681b      	ldr	r3, [r3, #0]
   11b28:	88fa      	ldrh	r2, [r7, #6]
   11b2a:	68b9      	ldr	r1, [r7, #8]
   11b2c:	68f8      	ldr	r0, [r7, #12]
   11b2e:	4798      	blx	r3
   11b30:	4603      	mov	r3, r0
}
   11b32:	4618      	mov	r0, r3
   11b34:	3710      	adds	r7, #16
   11b36:	46bd      	mov	sp, r7
   11b38:	bd80      	pop	{r7, pc}
   11b3a:	bf00      	nop
   11b3c:	00012db4 	.word	0x00012db4
   11b40:	00007361 	.word	0x00007361

00011b44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   11b44:	b580      	push	{r7, lr}
   11b46:	b084      	sub	sp, #16
   11b48:	af00      	add	r7, sp, #0
   11b4a:	60f8      	str	r0, [r7, #12]
   11b4c:	60b9      	str	r1, [r7, #8]
   11b4e:	4613      	mov	r3, r2
   11b50:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11b52:	68fb      	ldr	r3, [r7, #12]
   11b54:	2b00      	cmp	r3, #0
   11b56:	d004      	beq.n	11b62 <io_read+0x1e>
   11b58:	68bb      	ldr	r3, [r7, #8]
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	d001      	beq.n	11b62 <io_read+0x1e>
   11b5e:	2301      	movs	r3, #1
   11b60:	e000      	b.n	11b64 <io_read+0x20>
   11b62:	2300      	movs	r3, #0
   11b64:	f003 0301 	and.w	r3, r3, #1
   11b68:	b2db      	uxtb	r3, r3
   11b6a:	223d      	movs	r2, #61	; 0x3d
   11b6c:	4907      	ldr	r1, [pc, #28]	; (11b8c <io_read+0x48>)
   11b6e:	4618      	mov	r0, r3
   11b70:	4b07      	ldr	r3, [pc, #28]	; (11b90 <io_read+0x4c>)
   11b72:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   11b74:	68fb      	ldr	r3, [r7, #12]
   11b76:	685b      	ldr	r3, [r3, #4]
   11b78:	88fa      	ldrh	r2, [r7, #6]
   11b7a:	68b9      	ldr	r1, [r7, #8]
   11b7c:	68f8      	ldr	r0, [r7, #12]
   11b7e:	4798      	blx	r3
   11b80:	4603      	mov	r3, r0
}
   11b82:	4618      	mov	r0, r3
   11b84:	3710      	adds	r7, #16
   11b86:	46bd      	mov	sp, r7
   11b88:	bd80      	pop	{r7, pc}
   11b8a:	bf00      	nop
   11b8c:	00012db4 	.word	0x00012db4
   11b90:	00007361 	.word	0x00007361

00011b94 <__aeabi_atexit>:
   11b94:	460b      	mov	r3, r1
   11b96:	4601      	mov	r1, r0
   11b98:	4618      	mov	r0, r3
   11b9a:	f000 b801 	b.w	11ba0 <__cxa_atexit>
   11b9e:	bf00      	nop

00011ba0 <__cxa_atexit>:
   11ba0:	4613      	mov	r3, r2
   11ba2:	460a      	mov	r2, r1
   11ba4:	4601      	mov	r1, r0
   11ba6:	2002      	movs	r0, #2
   11ba8:	f000 b91e 	b.w	11de8 <__register_exitproc>

00011bac <ffs>:
   11bac:	b140      	cbz	r0, 11bc0 <ffs+0x14>
   11bae:	2300      	movs	r3, #0
   11bb0:	fa40 f103 	asr.w	r1, r0, r3
   11bb4:	1c5a      	adds	r2, r3, #1
   11bb6:	07c9      	lsls	r1, r1, #31
   11bb8:	4613      	mov	r3, r2
   11bba:	d5f9      	bpl.n	11bb0 <ffs+0x4>
   11bbc:	4610      	mov	r0, r2
   11bbe:	4770      	bx	lr
   11bc0:	4602      	mov	r2, r0
   11bc2:	4610      	mov	r0, r2
   11bc4:	4770      	bx	lr
   11bc6:	bf00      	nop

00011bc8 <__libc_init_array>:
   11bc8:	b570      	push	{r4, r5, r6, lr}
   11bca:	4e0f      	ldr	r6, [pc, #60]	; (11c08 <__libc_init_array+0x40>)
   11bcc:	4d0f      	ldr	r5, [pc, #60]	; (11c0c <__libc_init_array+0x44>)
   11bce:	1b76      	subs	r6, r6, r5
   11bd0:	10b6      	asrs	r6, r6, #2
   11bd2:	bf18      	it	ne
   11bd4:	2400      	movne	r4, #0
   11bd6:	d005      	beq.n	11be4 <__libc_init_array+0x1c>
   11bd8:	3401      	adds	r4, #1
   11bda:	f855 3b04 	ldr.w	r3, [r5], #4
   11bde:	4798      	blx	r3
   11be0:	42a6      	cmp	r6, r4
   11be2:	d1f9      	bne.n	11bd8 <__libc_init_array+0x10>
   11be4:	4e0a      	ldr	r6, [pc, #40]	; (11c10 <__libc_init_array+0x48>)
   11be6:	4d0b      	ldr	r5, [pc, #44]	; (11c14 <__libc_init_array+0x4c>)
   11be8:	1b76      	subs	r6, r6, r5
   11bea:	f001 f8ef 	bl	12dcc <_init>
   11bee:	10b6      	asrs	r6, r6, #2
   11bf0:	bf18      	it	ne
   11bf2:	2400      	movne	r4, #0
   11bf4:	d006      	beq.n	11c04 <__libc_init_array+0x3c>
   11bf6:	3401      	adds	r4, #1
   11bf8:	f855 3b04 	ldr.w	r3, [r5], #4
   11bfc:	4798      	blx	r3
   11bfe:	42a6      	cmp	r6, r4
   11c00:	d1f9      	bne.n	11bf6 <__libc_init_array+0x2e>
   11c02:	bd70      	pop	{r4, r5, r6, pc}
   11c04:	bd70      	pop	{r4, r5, r6, pc}
   11c06:	bf00      	nop
   11c08:	00012dd8 	.word	0x00012dd8
   11c0c:	00012dd8 	.word	0x00012dd8
   11c10:	00012dfc 	.word	0x00012dfc
   11c14:	00012dd8 	.word	0x00012dd8

00011c18 <memcpy>:
   11c18:	4684      	mov	ip, r0
   11c1a:	ea41 0300 	orr.w	r3, r1, r0
   11c1e:	f013 0303 	ands.w	r3, r3, #3
   11c22:	d16d      	bne.n	11d00 <memcpy+0xe8>
   11c24:	3a40      	subs	r2, #64	; 0x40
   11c26:	d341      	bcc.n	11cac <memcpy+0x94>
   11c28:	f851 3b04 	ldr.w	r3, [r1], #4
   11c2c:	f840 3b04 	str.w	r3, [r0], #4
   11c30:	f851 3b04 	ldr.w	r3, [r1], #4
   11c34:	f840 3b04 	str.w	r3, [r0], #4
   11c38:	f851 3b04 	ldr.w	r3, [r1], #4
   11c3c:	f840 3b04 	str.w	r3, [r0], #4
   11c40:	f851 3b04 	ldr.w	r3, [r1], #4
   11c44:	f840 3b04 	str.w	r3, [r0], #4
   11c48:	f851 3b04 	ldr.w	r3, [r1], #4
   11c4c:	f840 3b04 	str.w	r3, [r0], #4
   11c50:	f851 3b04 	ldr.w	r3, [r1], #4
   11c54:	f840 3b04 	str.w	r3, [r0], #4
   11c58:	f851 3b04 	ldr.w	r3, [r1], #4
   11c5c:	f840 3b04 	str.w	r3, [r0], #4
   11c60:	f851 3b04 	ldr.w	r3, [r1], #4
   11c64:	f840 3b04 	str.w	r3, [r0], #4
   11c68:	f851 3b04 	ldr.w	r3, [r1], #4
   11c6c:	f840 3b04 	str.w	r3, [r0], #4
   11c70:	f851 3b04 	ldr.w	r3, [r1], #4
   11c74:	f840 3b04 	str.w	r3, [r0], #4
   11c78:	f851 3b04 	ldr.w	r3, [r1], #4
   11c7c:	f840 3b04 	str.w	r3, [r0], #4
   11c80:	f851 3b04 	ldr.w	r3, [r1], #4
   11c84:	f840 3b04 	str.w	r3, [r0], #4
   11c88:	f851 3b04 	ldr.w	r3, [r1], #4
   11c8c:	f840 3b04 	str.w	r3, [r0], #4
   11c90:	f851 3b04 	ldr.w	r3, [r1], #4
   11c94:	f840 3b04 	str.w	r3, [r0], #4
   11c98:	f851 3b04 	ldr.w	r3, [r1], #4
   11c9c:	f840 3b04 	str.w	r3, [r0], #4
   11ca0:	f851 3b04 	ldr.w	r3, [r1], #4
   11ca4:	f840 3b04 	str.w	r3, [r0], #4
   11ca8:	3a40      	subs	r2, #64	; 0x40
   11caa:	d2bd      	bcs.n	11c28 <memcpy+0x10>
   11cac:	3230      	adds	r2, #48	; 0x30
   11cae:	d311      	bcc.n	11cd4 <memcpy+0xbc>
   11cb0:	f851 3b04 	ldr.w	r3, [r1], #4
   11cb4:	f840 3b04 	str.w	r3, [r0], #4
   11cb8:	f851 3b04 	ldr.w	r3, [r1], #4
   11cbc:	f840 3b04 	str.w	r3, [r0], #4
   11cc0:	f851 3b04 	ldr.w	r3, [r1], #4
   11cc4:	f840 3b04 	str.w	r3, [r0], #4
   11cc8:	f851 3b04 	ldr.w	r3, [r1], #4
   11ccc:	f840 3b04 	str.w	r3, [r0], #4
   11cd0:	3a10      	subs	r2, #16
   11cd2:	d2ed      	bcs.n	11cb0 <memcpy+0x98>
   11cd4:	320c      	adds	r2, #12
   11cd6:	d305      	bcc.n	11ce4 <memcpy+0xcc>
   11cd8:	f851 3b04 	ldr.w	r3, [r1], #4
   11cdc:	f840 3b04 	str.w	r3, [r0], #4
   11ce0:	3a04      	subs	r2, #4
   11ce2:	d2f9      	bcs.n	11cd8 <memcpy+0xc0>
   11ce4:	3204      	adds	r2, #4
   11ce6:	d008      	beq.n	11cfa <memcpy+0xe2>
   11ce8:	07d2      	lsls	r2, r2, #31
   11cea:	bf1c      	itt	ne
   11cec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11cf0:	f800 3b01 	strbne.w	r3, [r0], #1
   11cf4:	d301      	bcc.n	11cfa <memcpy+0xe2>
   11cf6:	880b      	ldrh	r3, [r1, #0]
   11cf8:	8003      	strh	r3, [r0, #0]
   11cfa:	4660      	mov	r0, ip
   11cfc:	4770      	bx	lr
   11cfe:	bf00      	nop
   11d00:	2a08      	cmp	r2, #8
   11d02:	d313      	bcc.n	11d2c <memcpy+0x114>
   11d04:	078b      	lsls	r3, r1, #30
   11d06:	d08d      	beq.n	11c24 <memcpy+0xc>
   11d08:	f010 0303 	ands.w	r3, r0, #3
   11d0c:	d08a      	beq.n	11c24 <memcpy+0xc>
   11d0e:	f1c3 0304 	rsb	r3, r3, #4
   11d12:	1ad2      	subs	r2, r2, r3
   11d14:	07db      	lsls	r3, r3, #31
   11d16:	bf1c      	itt	ne
   11d18:	f811 3b01 	ldrbne.w	r3, [r1], #1
   11d1c:	f800 3b01 	strbne.w	r3, [r0], #1
   11d20:	d380      	bcc.n	11c24 <memcpy+0xc>
   11d22:	f831 3b02 	ldrh.w	r3, [r1], #2
   11d26:	f820 3b02 	strh.w	r3, [r0], #2
   11d2a:	e77b      	b.n	11c24 <memcpy+0xc>
   11d2c:	3a04      	subs	r2, #4
   11d2e:	d3d9      	bcc.n	11ce4 <memcpy+0xcc>
   11d30:	3a01      	subs	r2, #1
   11d32:	f811 3b01 	ldrb.w	r3, [r1], #1
   11d36:	f800 3b01 	strb.w	r3, [r0], #1
   11d3a:	d2f9      	bcs.n	11d30 <memcpy+0x118>
   11d3c:	780b      	ldrb	r3, [r1, #0]
   11d3e:	7003      	strb	r3, [r0, #0]
   11d40:	784b      	ldrb	r3, [r1, #1]
   11d42:	7043      	strb	r3, [r0, #1]
   11d44:	788b      	ldrb	r3, [r1, #2]
   11d46:	7083      	strb	r3, [r0, #2]
   11d48:	4660      	mov	r0, ip
   11d4a:	4770      	bx	lr

00011d4c <memset>:
   11d4c:	b470      	push	{r4, r5, r6}
   11d4e:	0786      	lsls	r6, r0, #30
   11d50:	d046      	beq.n	11de0 <memset+0x94>
   11d52:	1e54      	subs	r4, r2, #1
   11d54:	2a00      	cmp	r2, #0
   11d56:	d041      	beq.n	11ddc <memset+0x90>
   11d58:	b2ca      	uxtb	r2, r1
   11d5a:	4603      	mov	r3, r0
   11d5c:	e002      	b.n	11d64 <memset+0x18>
   11d5e:	f114 34ff 	adds.w	r4, r4, #4294967295
   11d62:	d33b      	bcc.n	11ddc <memset+0x90>
   11d64:	f803 2b01 	strb.w	r2, [r3], #1
   11d68:	079d      	lsls	r5, r3, #30
   11d6a:	d1f8      	bne.n	11d5e <memset+0x12>
   11d6c:	2c03      	cmp	r4, #3
   11d6e:	d92e      	bls.n	11dce <memset+0x82>
   11d70:	b2cd      	uxtb	r5, r1
   11d72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11d76:	2c0f      	cmp	r4, #15
   11d78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11d7c:	d919      	bls.n	11db2 <memset+0x66>
   11d7e:	f103 0210 	add.w	r2, r3, #16
   11d82:	4626      	mov	r6, r4
   11d84:	3e10      	subs	r6, #16
   11d86:	2e0f      	cmp	r6, #15
   11d88:	f842 5c10 	str.w	r5, [r2, #-16]
   11d8c:	f842 5c0c 	str.w	r5, [r2, #-12]
   11d90:	f842 5c08 	str.w	r5, [r2, #-8]
   11d94:	f842 5c04 	str.w	r5, [r2, #-4]
   11d98:	f102 0210 	add.w	r2, r2, #16
   11d9c:	d8f2      	bhi.n	11d84 <memset+0x38>
   11d9e:	f1a4 0210 	sub.w	r2, r4, #16
   11da2:	f022 020f 	bic.w	r2, r2, #15
   11da6:	f004 040f 	and.w	r4, r4, #15
   11daa:	3210      	adds	r2, #16
   11dac:	2c03      	cmp	r4, #3
   11dae:	4413      	add	r3, r2
   11db0:	d90d      	bls.n	11dce <memset+0x82>
   11db2:	461e      	mov	r6, r3
   11db4:	4622      	mov	r2, r4
   11db6:	3a04      	subs	r2, #4
   11db8:	2a03      	cmp	r2, #3
   11dba:	f846 5b04 	str.w	r5, [r6], #4
   11dbe:	d8fa      	bhi.n	11db6 <memset+0x6a>
   11dc0:	1f22      	subs	r2, r4, #4
   11dc2:	f022 0203 	bic.w	r2, r2, #3
   11dc6:	3204      	adds	r2, #4
   11dc8:	4413      	add	r3, r2
   11dca:	f004 0403 	and.w	r4, r4, #3
   11dce:	b12c      	cbz	r4, 11ddc <memset+0x90>
   11dd0:	b2c9      	uxtb	r1, r1
   11dd2:	441c      	add	r4, r3
   11dd4:	f803 1b01 	strb.w	r1, [r3], #1
   11dd8:	429c      	cmp	r4, r3
   11dda:	d1fb      	bne.n	11dd4 <memset+0x88>
   11ddc:	bc70      	pop	{r4, r5, r6}
   11dde:	4770      	bx	lr
   11de0:	4614      	mov	r4, r2
   11de2:	4603      	mov	r3, r0
   11de4:	e7c2      	b.n	11d6c <memset+0x20>
   11de6:	bf00      	nop

00011de8 <__register_exitproc>:
   11de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11dec:	4d2c      	ldr	r5, [pc, #176]	; (11ea0 <__register_exitproc+0xb8>)
   11dee:	4606      	mov	r6, r0
   11df0:	6828      	ldr	r0, [r5, #0]
   11df2:	4698      	mov	r8, r3
   11df4:	460f      	mov	r7, r1
   11df6:	4691      	mov	r9, r2
   11df8:	f000 f882 	bl	11f00 <__retarget_lock_acquire_recursive>
   11dfc:	4b29      	ldr	r3, [pc, #164]	; (11ea4 <__register_exitproc+0xbc>)
   11dfe:	681c      	ldr	r4, [r3, #0]
   11e00:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   11e04:	2b00      	cmp	r3, #0
   11e06:	d03e      	beq.n	11e86 <__register_exitproc+0x9e>
   11e08:	685a      	ldr	r2, [r3, #4]
   11e0a:	2a1f      	cmp	r2, #31
   11e0c:	dc1c      	bgt.n	11e48 <__register_exitproc+0x60>
   11e0e:	f102 0e01 	add.w	lr, r2, #1
   11e12:	b176      	cbz	r6, 11e32 <__register_exitproc+0x4a>
   11e14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   11e18:	2401      	movs	r4, #1
   11e1a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11e1e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   11e22:	4094      	lsls	r4, r2
   11e24:	4320      	orrs	r0, r4
   11e26:	2e02      	cmp	r6, #2
   11e28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   11e2c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11e30:	d023      	beq.n	11e7a <__register_exitproc+0x92>
   11e32:	3202      	adds	r2, #2
   11e34:	f8c3 e004 	str.w	lr, [r3, #4]
   11e38:	6828      	ldr	r0, [r5, #0]
   11e3a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11e3e:	f000 f861 	bl	11f04 <__retarget_lock_release_recursive>
   11e42:	2000      	movs	r0, #0
   11e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e48:	4b17      	ldr	r3, [pc, #92]	; (11ea8 <__register_exitproc+0xc0>)
   11e4a:	b30b      	cbz	r3, 11e90 <__register_exitproc+0xa8>
   11e4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11e50:	f3af 8000 	nop.w
   11e54:	4603      	mov	r3, r0
   11e56:	b1d8      	cbz	r0, 11e90 <__register_exitproc+0xa8>
   11e58:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11e5c:	6002      	str	r2, [r0, #0]
   11e5e:	2100      	movs	r1, #0
   11e60:	6041      	str	r1, [r0, #4]
   11e62:	460a      	mov	r2, r1
   11e64:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   11e68:	f04f 0e01 	mov.w	lr, #1
   11e6c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11e70:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11e74:	2e00      	cmp	r6, #0
   11e76:	d0dc      	beq.n	11e32 <__register_exitproc+0x4a>
   11e78:	e7cc      	b.n	11e14 <__register_exitproc+0x2c>
   11e7a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11e7e:	430c      	orrs	r4, r1
   11e80:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11e84:	e7d5      	b.n	11e32 <__register_exitproc+0x4a>
   11e86:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   11e8a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11e8e:	e7bb      	b.n	11e08 <__register_exitproc+0x20>
   11e90:	6828      	ldr	r0, [r5, #0]
   11e92:	f000 f837 	bl	11f04 <__retarget_lock_release_recursive>
   11e96:	f04f 30ff 	mov.w	r0, #4294967295
   11e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e9e:	bf00      	nop
   11ea0:	20000a30 	.word	0x20000a30
   11ea4:	00012dc8 	.word	0x00012dc8
   11ea8:	00000000 	.word	0x00000000

00011eac <register_fini>:
   11eac:	4b02      	ldr	r3, [pc, #8]	; (11eb8 <register_fini+0xc>)
   11eae:	b113      	cbz	r3, 11eb6 <register_fini+0xa>
   11eb0:	4802      	ldr	r0, [pc, #8]	; (11ebc <register_fini+0x10>)
   11eb2:	f000 b805 	b.w	11ec0 <atexit>
   11eb6:	4770      	bx	lr
   11eb8:	00000000 	.word	0x00000000
   11ebc:	00011ecd 	.word	0x00011ecd

00011ec0 <atexit>:
   11ec0:	2300      	movs	r3, #0
   11ec2:	4601      	mov	r1, r0
   11ec4:	461a      	mov	r2, r3
   11ec6:	4618      	mov	r0, r3
   11ec8:	f7ff bf8e 	b.w	11de8 <__register_exitproc>

00011ecc <__libc_fini_array>:
   11ecc:	b538      	push	{r3, r4, r5, lr}
   11ece:	4c0a      	ldr	r4, [pc, #40]	; (11ef8 <__libc_fini_array+0x2c>)
   11ed0:	4d0a      	ldr	r5, [pc, #40]	; (11efc <__libc_fini_array+0x30>)
   11ed2:	1b64      	subs	r4, r4, r5
   11ed4:	10a4      	asrs	r4, r4, #2
   11ed6:	d00a      	beq.n	11eee <__libc_fini_array+0x22>
   11ed8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11edc:	3b01      	subs	r3, #1
   11ede:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11ee2:	3c01      	subs	r4, #1
   11ee4:	f855 3904 	ldr.w	r3, [r5], #-4
   11ee8:	4798      	blx	r3
   11eea:	2c00      	cmp	r4, #0
   11eec:	d1f9      	bne.n	11ee2 <__libc_fini_array+0x16>
   11eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11ef2:	f000 bf83 	b.w	12dfc <_fini>
   11ef6:	bf00      	nop
   11ef8:	00012e0c 	.word	0x00012e0c
   11efc:	00012e08 	.word	0x00012e08

00011f00 <__retarget_lock_acquire_recursive>:
   11f00:	4770      	bx	lr
   11f02:	bf00      	nop

00011f04 <__retarget_lock_release_recursive>:
   11f04:	4770      	bx	lr
   11f06:	bf00      	nop

00011f08 <_ZTV20Compresor_Controller>:
	...
   11f10:	211d 0000                                   .!..

00011f14 <_ZTV28Compressor_CANOpen_Interface>:
	...
   11f1c:	211d 0000                                   .!..

00011f20 <_ZTV13CANOpen_Class>:
	...
   11f28:	211d 0000                                   .!..

00011f2c <_ZTV8CO_Class>:
	...
   11f34:	211d 0000                                   .!..

00011f38 <_ZTV15CO_Driver_Class>:
	...
   11f40:	211d 0000                                   .!..

00011f44 <_ZL13OD_record1018>:
   11f44:	01c8 2000 0005 0000 0001 0000 01cc 2000     ... ........... 
   11f54:	0085 0000 0004 0000 01d0 2000 0085 0000     ........... ....
   11f64:	0004 0000 01d4 2000 0085 0000 0004 0000     ....... ........
   11f74:	01d8 2000 0085 0000 0004 0000               ... ........

00011f80 <_ZL13OD_record1200>:
   11f80:	01e4 2000 0005 0000 0001 0000 01e8 2000     ... ........... 
   11f90:	0085 0000 0004 0000 01ec 2000 0085 0000     ........... ....
   11fa0:	0004 0000                                   ....

00011fa4 <_ZL13OD_record1400>:
   11fa4:	01f0 2000 0005 0000 0001 0000 01f4 2000     ... ........... 
   11fb4:	008d 0000 0004 0000 01f8 2000 000d 0000     ........... ....
   11fc4:	0001 0000                                   ....

00011fc8 <_ZL13OD_record1401>:
   11fc8:	01fc 2000 0005 0000 0001 0000 0200 2000     ... ........... 
   11fd8:	008d 0000 0004 0000 0204 2000 000d 0000     ........... ....
   11fe8:	0001 0000                                   ....

00011fec <_ZL13OD_record1402>:
   11fec:	0208 2000 0005 0000 0001 0000 020c 2000     ... ........... 
   11ffc:	008d 0000 0004 0000 0210 2000 000d 0000     ........... ....
   1200c:	0001 0000                                   ....

00012010 <_ZL13OD_record1403>:
   12010:	0214 2000 0005 0000 0001 0000 0218 2000     ... ........... 
   12020:	008d 0000 0004 0000 021c 2000 000d 0000     ........... ....
   12030:	0001 0000                                   ....

00012034 <_ZL13OD_record1600>:
   12034:	0220 2000 000d 0000 0001 0000 0224 2000      .. ........$.. 
   12044:	008d 0000 0004 0000 0228 2000 008d 0000     ........(.. ....
   12054:	0004 0000 022c 2000 008d 0000 0004 0000     ....,.. ........
   12064:	0230 2000 008d 0000 0004 0000 0234 2000     0.. ........4.. 
   12074:	008d 0000 0004 0000 0238 2000 008d 0000     ........8.. ....
   12084:	0004 0000 023c 2000 008d 0000 0004 0000     ....<.. ........
   12094:	0240 2000 008d 0000 0004 0000               @.. ........

000120a0 <_ZL13OD_record1601>:
   120a0:	0244 2000 000d 0000 0001 0000 0248 2000     D.. ........H.. 
   120b0:	008d 0000 0004 0000 024c 2000 008d 0000     ........L.. ....
   120c0:	0004 0000 0250 2000 008d 0000 0004 0000     ....P.. ........
   120d0:	0254 2000 008d 0000 0004 0000 0258 2000     T.. ........X.. 
   120e0:	008d 0000 0004 0000 025c 2000 008d 0000     ........\.. ....
   120f0:	0004 0000 0260 2000 008d 0000 0004 0000     ....`.. ........
   12100:	0264 2000 008d 0000 0004 0000               d.. ........

0001210c <_ZL13OD_record1602>:
   1210c:	0268 2000 000d 0000 0001 0000 026c 2000     h.. ........l.. 
   1211c:	008d 0000 0004 0000 0270 2000 008d 0000     ........p.. ....
   1212c:	0004 0000 0274 2000 008d 0000 0004 0000     ....t.. ........
   1213c:	0278 2000 008d 0000 0004 0000 027c 2000     x.. ........|.. 
   1214c:	008d 0000 0004 0000 0280 2000 008d 0000     ........... ....
   1215c:	0004 0000 0284 2000 008d 0000 0004 0000     ....... ........
   1216c:	0288 2000 008d 0000 0004 0000               ... ........

00012178 <_ZL13OD_record1603>:
   12178:	028c 2000 000d 0000 0001 0000 0290 2000     ... ........... 
   12188:	008d 0000 0004 0000 0294 2000 008d 0000     ........... ....
   12198:	0004 0000 0298 2000 008d 0000 0004 0000     ....... ........
   121a8:	029c 2000 008d 0000 0004 0000 02a0 2000     ... ........... 
   121b8:	008d 0000 0004 0000 02a4 2000 008d 0000     ........... ....
   121c8:	0004 0000 02a8 2000 008d 0000 0004 0000     ....... ........
   121d8:	02ac 2000 008d 0000 0004 0000               ... ........

000121e4 <_ZL13OD_record1800>:
   121e4:	02b0 2000 0005 0000 0001 0000 02b4 2000     ... ........... 
   121f4:	008d 0000 0004 0000 02b8 2000 000d 0000     ........... ....
   12204:	0001 0000 02bc 2000 008d 0000 0002 0000     ....... ........
   12214:	02c0 2000 000d 0000 0001 0000 02c4 2000     ... ........... 
   12224:	008d 0000 0002 0000 02c8 2000 000d 0000     ........... ....
   12234:	0001 0000                                   ....

00012238 <_ZL13OD_record1801>:
   12238:	02cc 2000 0005 0000 0001 0000 02d0 2000     ... ........... 
   12248:	008d 0000 0004 0000 02d4 2000 000d 0000     ........... ....
   12258:	0001 0000 02d8 2000 008d 0000 0002 0000     ....... ........
   12268:	02dc 2000 000d 0000 0001 0000 02e0 2000     ... ........... 
   12278:	008d 0000 0002 0000 02e4 2000 000d 0000     ........... ....
   12288:	0001 0000                                   ....

0001228c <_ZL13OD_record1802>:
   1228c:	02e8 2000 0005 0000 0001 0000 02ec 2000     ... ........... 
   1229c:	008d 0000 0004 0000 02f0 2000 000d 0000     ........... ....
   122ac:	0001 0000 02f4 2000 008d 0000 0002 0000     ....... ........
   122bc:	02f8 2000 000d 0000 0001 0000 02fc 2000     ... ........... 
   122cc:	008d 0000 0002 0000 0300 2000 000d 0000     ........... ....
   122dc:	0001 0000                                   ....

000122e0 <_ZL13OD_record1803>:
   122e0:	0304 2000 0005 0000 0001 0000 0308 2000     ... ........... 
   122f0:	008d 0000 0004 0000 030c 2000 000d 0000     ........... ....
   12300:	0001 0000 0310 2000 008d 0000 0002 0000     ....... ........
   12310:	0314 2000 000d 0000 0001 0000 0318 2000     ... ........... 
   12320:	008d 0000 0002 0000 031c 2000 000d 0000     ........... ....
   12330:	0001 0000                                   ....

00012334 <_ZL13OD_record1A00>:
   12334:	0320 2000 000d 0000 0001 0000 0324 2000      .. ........$.. 
   12344:	008d 0000 0004 0000 0328 2000 008d 0000     ........(.. ....
   12354:	0004 0000 032c 2000 008d 0000 0004 0000     ....,.. ........
   12364:	0330 2000 008d 0000 0004 0000 0334 2000     0.. ........4.. 
   12374:	008d 0000 0004 0000 0338 2000 008d 0000     ........8.. ....
   12384:	0004 0000 033c 2000 008d 0000 0004 0000     ....<.. ........
   12394:	0340 2000 008d 0000 0004 0000               @.. ........

000123a0 <_ZL13OD_record1A01>:
   123a0:	0344 2000 000d 0000 0001 0000 0348 2000     D.. ........H.. 
   123b0:	008d 0000 0004 0000 034c 2000 008d 0000     ........L.. ....
   123c0:	0004 0000 0350 2000 008d 0000 0004 0000     ....P.. ........
   123d0:	0354 2000 008d 0000 0004 0000 0358 2000     T.. ........X.. 
   123e0:	008d 0000 0004 0000 035c 2000 008d 0000     ........\.. ....
   123f0:	0004 0000 0360 2000 008d 0000 0004 0000     ....`.. ........
   12400:	0364 2000 008d 0000 0004 0000               d.. ........

0001240c <_ZL13OD_record1A02>:
   1240c:	0368 2000 000d 0000 0001 0000 036c 2000     h.. ........l.. 
   1241c:	008d 0000 0004 0000 0370 2000 008d 0000     ........p.. ....
   1242c:	0004 0000 0374 2000 008d 0000 0004 0000     ....t.. ........
   1243c:	0378 2000 008d 0000 0004 0000 037c 2000     x.. ........|.. 
   1244c:	008d 0000 0004 0000 0380 2000 008d 0000     ........... ....
   1245c:	0004 0000 0384 2000 008d 0000 0004 0000     ....... ........
   1246c:	0388 2000 008d 0000 0004 0000               ... ........

00012478 <_ZL13OD_record1A03>:
   12478:	038c 2000 000d 0000 0001 0000 0390 2000     ... ........... 
   12488:	008d 0000 0004 0000 0394 2000 008d 0000     ........... ....
   12498:	0004 0000 0398 2000 008d 0000 0004 0000     ....... ........
   124a8:	039c 2000 008d 0000 0004 0000 03a0 2000     ... ........... 
   124b8:	008d 0000 0004 0000 03a4 2000 008d 0000     ........... ....
   124c8:	0004 0000 03a8 2000 008d 0000 0004 0000     ....... ........
   124d8:	03ac 2000 008d 0000 0004 0000               ... ........

000124e4 <_ZL13OD_record2120>:
   124e4:	0098 2000 0006 0000 0001 0000 00a0 2000     ... ........... 
   124f4:	00be 0000 0008 0000 00a8 2000 00be 0000     ........... ....
   12504:	0008 0000 00b0 2000 00be 0000 0004 0000     ....... ........
   12514:	00b8 2000 00be 0000 0008 0000 0000 0000     ... ............
   12524:	000e 0000 0000 0000                         ........

0001252c <_ZL13OD_record2130>:
   1252c:	00c8 2000 0006 0000 0001 0000 00c9 2000     ... ........... 
   1253c:	0006 0000 001e 0000 00e8 2000 008e 0000     ........... ....
   1254c:	0008 0000 00f0 2000 00be 0000 0004 0000     ....... ........

0001255c <CO_ObjDict>:
   1255c:	1000 0000 0000 0000 0085 0000 0004 0000     ................
   1256c:	0188 2000 1001 0000 0000 0000 0036 0000     ... ........6...
   1257c:	0001 0000 000c 2000 1002 0000 0000 0000     ....... ........
   1258c:	00b6 0000 0004 0000 0010 2000 1003 0000     ........... ....
   1259c:	0008 0000 008e 0000 0004 0000 0014 2000     ............... 
   125ac:	1005 0000 0000 0000 008d 0000 0004 0000     ................
   125bc:	018c 2000 1006 0000 0000 0000 008d 0000     ... ............
   125cc:	0004 0000 0190 2000 1007 0000 0000 0000     ....... ........
   125dc:	008d 0000 0004 0000 0194 2000 1008 0000     ........... ....
   125ec:	0000 0000 0005 0000 000b 0000 0198 2000     ............... 
   125fc:	1009 0000 0000 0000 0005 0000 0004 0000     ................
   1260c:	01a3 2000 100a 0000 0000 0000 0005 0000     ... ............
   1261c:	0004 0000 01a7 2000 1010 0000 0001 0000     ....... ........
   1262c:	008e 0000 0004 0000 0034 2000 1011 0000     ........4.. ....
   1263c:	0001 0000 008e 0000 0004 0000 0038 2000     ............8.. 
   1264c:	1014 0000 0000 0000 0085 0000 0004 0000     ................
   1265c:	01ac 2000 1015 0000 0000 0000 008d 0000     ... ............
   1266c:	0002 0000 01b0 2000 1016 0000 0004 0000     ....... ........
   1267c:	008d 0000 0004 0000 01b4 2000 1017 0000     ........... ....
   1268c:	0000 0000 008d 0000 0002 0000 01c4 2000     ............... 
   1269c:	1018 0000 0004 0000 0000 0000 0000 0000     ................
   126ac:	1f44 0001 1019 0000 0000 0000 000d 0000     D...............
   126bc:	0001 0000 01dc 2000 1029 0000 0006 0000     ....... ).......
   126cc:	000d 0000 0001 0000 01dd 2000 1200 0000     ........... ....
   126dc:	0002 0000 0000 0000 0000 0000 1f80 0001     ................
   126ec:	1400 0000 0002 0000 0000 0000 0000 0000     ................
   126fc:	1fa4 0001 1401 0000 0002 0000 0000 0000     ................
   1270c:	0000 0000 1fc8 0001 1402 0000 0002 0000     ................
	...
   12724:	1fec 0001 1403 0000 0002 0000 0000 0000     ................
   12734:	0000 0000 2010 0001 1600 0000 0008 0000     ..... ..........
	...
   1274c:	2034 0001 1601 0000 0008 0000 0000 0000     4 ..............
   1275c:	0000 0000 20a0 0001 1602 0000 0008 0000     ..... ..........
	...
   12774:	210c 0001 1603 0000 0008 0000 0000 0000     .!..............
   12784:	0000 0000 2178 0001 1800 0000 0006 0000     ....x!..........
	...
   1279c:	21e4 0001 1801 0000 0006 0000 0000 0000     .!..............
   127ac:	0000 0000 2238 0001 1802 0000 0006 0000     ....8"..........
	...
   127c4:	228c 0001 1803 0000 0006 0000 0000 0000     ."..............
   127d4:	0000 0000 22e0 0001 1a00 0000 0008 0000     ....."..........
	...
   127ec:	2334 0001 1a01 0000 0008 0000 0000 0000     4#..............
   127fc:	0000 0000 23a0 0001 1a02 0000 0008 0000     .....#..........
	...
   12814:	240c 0001 1a03 0000 0008 0000 0000 0000     .$..............
   12824:	0000 0000 2478 0001 1f80 0000 0000 0000     ....x$..........
   12834:	008d 0000 0004 0000 03b0 2000 2100 0000     ........... .!..
   12844:	0000 0000 0036 0000 000a 0000 003c 2000     ....6.......<.. 
   12854:	2101 0000 0000 0000 000d 0000 0001 0000     .!..............
   12864:	03b4 2000 2102 0000 0000 0000 008d 0000     ... .!..........
   12874:	0002 0000 03b6 2000 2103 0000 0000 0000     ....... .!......
   12884:	008e 0000 0002 0000 0046 2000 2104 0000     ........F.. .!..
   12894:	0000 0000 0086 0000 0002 0000 0048 2000     ............H.. 
   128a4:	2106 0000 0000 0000 0087 0000 0004 0000     .!..............
   128b4:	013c 2000 2107 0000 0005 0000 00be 0000     <.. .!..........
   128c4:	0002 0000 004a 2000 2108 0000 0001 0000     ....J.. .!......
   128d4:	00fd 0000 0008 0000 0054 2000 2109 0000     ........T.. .!..
   128e4:	0001 0000 00fd 0000 0008 0000 0056 2000     ............V.. 
   128f4:	2110 0000 0010 0000 00fe 0000 0004 0000     .!..............
   12904:	0058 2000 2111 0000 0010 0000 00fd 0000     X.. .!..........
   12914:	0004 0000 03b8 2000 2112 0000 0010 0000     ....... .!......
   12924:	00ff 0000 0004 0000 0140 2000 2120 0000     ........@..  !..
   12934:	0005 0000 007d 0000 0008 0000 24e4 0001     ....}........$..
   12944:	2130 0000 0003 0000 0000 0000 0000 0000     0!..............
   12954:	252c 0001 6000 0000 0008 0000 0076 0000     ,%...`......v...
   12964:	0001 0000 00f8 2000 6200 0000 0008 0000     ....... .b......
   12974:	003e 0000 0001 0000 0100 2000 6401 0000     >.......... .d..
   12984:	000c 0000 00b6 0000 0002 0000 0108 2000     ............... 
   12994:	6411 0000 0008 0000 00be 0000 0002 0000     .d..............
   129a4:	0120 2000 2e2e 682f 6c70 702f 726f 2f74      .. ../hpl/port/
   129b4:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   129c4:	2e2e 682f 6c61 692f 636e 756c 6564 682f     ../hal/include/h
   129d4:	6c61 775f 7464 682e 0000 0000 2e2e 682f     al_wdt.h....../h
   129e4:	6c61 732f 6372 682f 6c61 635f 6c61 6e65     al/src/hal_calen
   129f4:	6164 2e72 0063 0000 2e2e 682f 6c61 732f     dar.c...../hal/s
   12a04:	6372 682f 6c61 635f 6e61 615f 7973 636e     rc/hal_can_async
   12a14:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   12a24:	6c61 635f 6372 735f 6e79 2e63 0063 0000     al_crc_sync.c...
   12a34:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
   12a44:	6332 6d5f 735f 6e79 2e63 0063 2e2e 682f     2c_m_sync.c.../h
   12a54:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
   12a64:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   12a74:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
   12a84:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
   12a94:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
   12aa4:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
   12ab4:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
   12ac4:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
   12ad4:	0063 0000 0100 0302 0504 0706 0c08 1410     c...............
   12ae4:	2018 4030                                   . 0@

00012ae8 <_map>:
   12ae8:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   12af8:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   12b08:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   12b18:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   12b28:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   12b38:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00012b48 <user_mux_confs>:
   12b48:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00012b8c <channel_confs>:
   12b8c:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00012bcc <interrupt_cfg>:
	...
   12c4c:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   12c5c:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   12c6c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   12c7c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   12c8c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   12c9c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   12cac:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00012cb8 <sercomspi_regs>:
   12cb8:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   12cc8:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   12cd8:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   12ce8:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   12cf8:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   12d08:	1400 4300 1800 4300                         ...C...C

00012d10 <_usb_ep_cfgs>:
   12d10:	1bf0 2000 0000 0000 0040 0000 1c30 2000     ... ....@...0.. 
   12d20:	1c70 2000 0040 0040 1cb0 2000 1cf0 2000     p.. @.@.... ... 
   12d30:	0040 0040 1d30 2000 1d70 2000 0040 0040     @.@.0.. p.. @.@.
   12d40:	1db0 2000 1df0 2000 0040 0040 0804 0000     ... ... @.@.....
   12d50:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   12d60:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   12d70:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   12d80:	625f 7361 2e65 0068                         _base.h.

00012d88 <n25q256a_interface>:
   12d88:	f811 0000 f8b5 0000 f9c5 0000 fb7d 0000     ............}...
   12d98:	fc0d 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   12da8:	2f65 7375 6462 2e63 0063 0000 2e2e 682f     e/usbdc.c...../h
   12db8:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.

00012dc8 <_global_impure_ptr>:
   12dc8:	0608 2000                                   ... 

00012dcc <_init>:
   12dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dce:	bf00      	nop
   12dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12dd2:	bc08      	pop	{r3}
   12dd4:	469e      	mov	lr, r3
   12dd6:	4770      	bx	lr

00012dd8 <__init_array_start>:
   12dd8:	00011ead 	.word	0x00011ead

00012ddc <__frame_dummy_init_array_entry>:
   12ddc:	00000289 0000054d 00000761 00000b85     ....M...a.......
   12dec:	00000ef5 00011301 00011735 00011ae1     ........5.......

00012dfc <_fini>:
   12dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dfe:	bf00      	nop
   12e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12e02:	bc08      	pop	{r3}
   12e04:	469e      	mov	lr, r3
   12e06:	4770      	bx	lr

00012e08 <__fini_array_start>:
   12e08:	00000265 	.word	0x00000265
