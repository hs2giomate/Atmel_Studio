
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f4bc  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f4bc  0000f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f4c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          0000116c  2000063c  0000fb00  0002063c  2**2
                  ALLOC
  6 .stack        00010000  200017a8  00010c6c  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0006229d  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000859c  00000000  00000000  00082960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a3eb  00000000  00000000  0008aefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002eb0  00000000  00000000  000a52e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002ba0  00000000  00000000  000a8197  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ab60  00000000  00000000  000aad37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000334c2  00000000  00000000  000f5897  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c11c  00000000  00000000  00128d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c560  00000000  00000000  00264e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 17 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	75 5e 00 00 79 4c 00 00 89 4c 00 00 55 03 00 00     u^..yL...L..U...
      7c:	99 4c 00 00 a9 4c 00 00 b9 4c 00 00 c9 4c 00 00     .L...L...L...L..
      8c:	d9 4c 00 00 e9 4c 00 00 f9 4c 00 00 55 03 00 00     .L...L...L..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 c1 40 00 00 f1 ad 00 00     U...U....@......
     184:	01 ae 00 00 11 ae 00 00 21 ae 00 00 55 03 00 00     ........!...U...
     194:	f1 77 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .w..U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 0d 78 00 00     U...U...U....x..
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	29 78 00 00 55 03 00 00 55 03 00 00 55 03 00 00     )x..U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 ed 84 00 00 55 03 00 00     U...U.......U...
     1f4:	09 85 00 00 55 03 00 00 25 85 00 00 41 85 00 00     ....U...%...A...
     204:	5d 85 00 00 79 85 00 00 55 03 00 00 55 03 00 00     ]...y...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f4c4 	.word	0x0000f4c4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f4c4 	.word	0x0000f4c4
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f4c4 	.word	0x0000f4c4
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0000f4c4 	.word	0x0000f4c4
     334:	20000000 	.word	0x20000000
     338:	2000063c 	.word	0x2000063c
     33c:	2000063c 	.word	0x2000063c
     340:	200017a8 	.word	0x200017a8
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000eb7d 	.word	0x0000eb7d
     350:	000004bd 	.word	0x000004bd

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	3318      	adds	r3, #24
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     380:	b480      	push	{r7}
     382:	b085      	sub	sp, #20
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	460b      	mov	r3, r1
     38a:	607a      	str	r2, [r7, #4]
     38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	7afb      	ldrb	r3, [r7, #11]
     390:	68fa      	ldr	r2, [r7, #12]
     392:	01db      	lsls	r3, r3, #7
     394:	4413      	add	r3, r2
     396:	3314      	adds	r3, #20
     398:	687a      	ldr	r2, [r7, #4]
     39a:	601a      	str	r2, [r3, #0]
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr

000003a6 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3a6:	b480      	push	{r7}
     3a8:	b085      	sub	sp, #20
     3aa:	af00      	add	r7, sp, #0
     3ac:	60f8      	str	r0, [r7, #12]
     3ae:	460b      	mov	r3, r1
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3b4:	7afb      	ldrb	r3, [r7, #11]
     3b6:	68fa      	ldr	r2, [r7, #12]
     3b8:	01db      	lsls	r3, r3, #7
     3ba:	4413      	add	r3, r2
     3bc:	331c      	adds	r3, #28
     3be:	687a      	ldr	r2, [r7, #4]
     3c0:	601a      	str	r2, [r3, #0]
}
     3c2:	bf00      	nop
     3c4:	3714      	adds	r7, #20
     3c6:	46bd      	mov	sp, r7
     3c8:	bc80      	pop	{r7}
     3ca:	4770      	bx	lr

000003cc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	4603      	mov	r3, r0
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	71fb      	strb	r3, [r7, #7]
     3d8:	4613      	mov	r3, r2
     3da:	71bb      	strb	r3, [r7, #6]
	if (level) {
     3dc:	79bb      	ldrb	r3, [r7, #6]
     3de:	2b00      	cmp	r3, #0
     3e0:	d006      	beq.n	3f0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     3e2:	79fb      	ldrb	r3, [r7, #7]
     3e4:	683a      	ldr	r2, [r7, #0]
     3e6:	4619      	mov	r1, r3
     3e8:	4806      	ldr	r0, [pc, #24]	; (404 <_gpio_set_level+0x38>)
     3ea:	4b07      	ldr	r3, [pc, #28]	; (408 <_gpio_set_level+0x3c>)
     3ec:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     3ee:	e005      	b.n	3fc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	683a      	ldr	r2, [r7, #0]
     3f4:	4619      	mov	r1, r3
     3f6:	4803      	ldr	r0, [pc, #12]	; (404 <_gpio_set_level+0x38>)
     3f8:	4b04      	ldr	r3, [pc, #16]	; (40c <_gpio_set_level+0x40>)
     3fa:	4798      	blx	r3
}
     3fc:	bf00      	nop
     3fe:	3708      	adds	r7, #8
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	41008000 	.word	0x41008000
     408:	0000035b 	.word	0x0000035b
     40c:	00000381 	.word	0x00000381

00000410 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	4603      	mov	r3, r0
     418:	6039      	str	r1, [r7, #0]
     41a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     41c:	79fb      	ldrb	r3, [r7, #7]
     41e:	683a      	ldr	r2, [r7, #0]
     420:	4619      	mov	r1, r3
     422:	4803      	ldr	r0, [pc, #12]	; (430 <_gpio_toggle_level+0x20>)
     424:	4b03      	ldr	r3, [pc, #12]	; (434 <_gpio_toggle_level+0x24>)
     426:	4798      	blx	r3
}
     428:	bf00      	nop
     42a:	3708      	adds	r7, #8
     42c:	46bd      	mov	sp, r7
     42e:	bd80      	pop	{r7, pc}
     430:	41008000 	.word	0x41008000
     434:	000003a7 	.word	0x000003a7

00000438 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	4603      	mov	r3, r0
     440:	460a      	mov	r2, r1
     442:	71fb      	strb	r3, [r7, #7]
     444:	4613      	mov	r3, r2
     446:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     448:	79fb      	ldrb	r3, [r7, #7]
     44a:	115b      	asrs	r3, r3, #5
     44c:	b2d8      	uxtb	r0, r3
     44e:	79fb      	ldrb	r3, [r7, #7]
     450:	f003 031f 	and.w	r3, r3, #31
     454:	2201      	movs	r2, #1
     456:	fa02 f303 	lsl.w	r3, r2, r3
     45a:	79ba      	ldrb	r2, [r7, #6]
     45c:	4619      	mov	r1, r3
     45e:	4b03      	ldr	r3, [pc, #12]	; (46c <gpio_set_pin_level+0x34>)
     460:	4798      	blx	r3
}
     462:	bf00      	nop
     464:	3708      	adds	r7, #8
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}
     46a:	bf00      	nop
     46c:	000003cd 	.word	0x000003cd

00000470 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	4603      	mov	r3, r0
     478:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     47a:	79fb      	ldrb	r3, [r7, #7]
     47c:	115b      	asrs	r3, r3, #5
     47e:	b2d8      	uxtb	r0, r3
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	f003 031f 	and.w	r3, r3, #31
     486:	2201      	movs	r2, #1
     488:	fa02 f303 	lsl.w	r3, r2, r3
     48c:	4619      	mov	r1, r3
     48e:	4b03      	ldr	r3, [pc, #12]	; (49c <gpio_toggle_pin_level+0x2c>)
     490:	4798      	blx	r3
}
     492:	bf00      	nop
     494:	3708      	adds	r7, #8
     496:	46bd      	mov	sp, r7
     498:	bd80      	pop	{r7, pc}
     49a:	bf00      	nop
     49c:	00000411 	.word	0x00000411

000004a0 <_ZL13FirmwareAlivePK10timer_task>:
//static Maintenance_Tool	toolApp;
//static SingleTaskMessage singleTask;
#define DELAY_HEATER_COMMUNICATION 100

static void FirmwareAlive(const struct timer_task *const timer_task)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
     4a8:	2101      	movs	r1, #1
     4aa:	2007      	movs	r0, #7
     4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <_ZL13FirmwareAlivePK10timer_task+0x18>)
     4ae:	4798      	blx	r3
}
     4b0:	bf00      	nop
     4b2:	3708      	adds	r7, #8
     4b4:	46bd      	mov	sp, r7
     4b6:	bd80      	pop	{r7, pc}
     4b8:	00000439 	.word	0x00000439

000004bc <main>:

int main(void)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
	atmel_start_init();
     4c2:	4b3d      	ldr	r3, [pc, #244]	; (5b8 <main+0xfc>)
     4c4:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     4c6:	483d      	ldr	r0, [pc, #244]	; (5bc <main+0x100>)
     4c8:	4b3d      	ldr	r3, [pc, #244]	; (5c0 <main+0x104>)
     4ca:	4798      	blx	r3
	delay_ms(100);
     4cc:	2064      	movs	r0, #100	; 0x64
     4ce:	4b3d      	ldr	r3, [pc, #244]	; (5c4 <main+0x108>)
     4d0:	4798      	blx	r3
// 	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
// 	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     4d2:	483d      	ldr	r0, [pc, #244]	; (5c8 <main+0x10c>)
     4d4:	4b3d      	ldr	r3, [pc, #244]	; (5cc <main+0x110>)
     4d6:	4798      	blx	r3
     4d8:	4603      	mov	r3, r0
     4da:	607b      	str	r3, [r7, #4]
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     4dc:	22fa      	movs	r2, #250	; 0xfa
     4de:	493c      	ldr	r1, [pc, #240]	; (5d0 <main+0x114>)
     4e0:	483c      	ldr	r0, [pc, #240]	; (5d4 <main+0x118>)
     4e2:	4b3d      	ldr	r3, [pc, #244]	; (5d8 <main+0x11c>)
     4e4:	4798      	blx	r3
	gpio_set_pin_level(LED0,true);
     4e6:	2101      	movs	r1, #1
     4e8:	2052      	movs	r0, #82	; 0x52
     4ea:	4b3c      	ldr	r3, [pc, #240]	; (5dc <main+0x120>)
     4ec:	4798      	blx	r3
	while (!heater.Init(1))
     4ee:	2101      	movs	r1, #1
     4f0:	483b      	ldr	r0, [pc, #236]	; (5e0 <main+0x124>)
     4f2:	4b3c      	ldr	r3, [pc, #240]	; (5e4 <main+0x128>)
     4f4:	4798      	blx	r3
     4f6:	4603      	mov	r3, r0
     4f8:	f083 0301 	eor.w	r3, r3, #1
     4fc:	b2db      	uxtb	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	d006      	beq.n	510 <main+0x54>
	{
		delay_ms(200);
     502:	20c8      	movs	r0, #200	; 0xc8
     504:	4b2f      	ldr	r3, [pc, #188]	; (5c4 <main+0x108>)
     506:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
     508:	2052      	movs	r0, #82	; 0x52
     50a:	4b37      	ldr	r3, [pc, #220]	; (5e8 <main+0x12c>)
     50c:	4798      	blx	r3
	while (!heater.Init(1))
     50e:	e7ee      	b.n	4ee <main+0x32>
		
	}
	gpio_set_pin_level(LED0,true);
     510:	2101      	movs	r1, #1
     512:	2052      	movs	r0, #82	; 0x52
     514:	4b31      	ldr	r3, [pc, #196]	; (5dc <main+0x120>)
     516:	4798      	blx	r3
// 			}
// 			
// 		} 
// 		else
// 		{
			enableMask=0xff;
     518:	23ff      	movs	r3, #255	; 0xff
     51a:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < 4; i++)
     51c:	2300      	movs	r3, #0
     51e:	707b      	strb	r3, [r7, #1]
     520:	787b      	ldrb	r3, [r7, #1]
     522:	2b03      	cmp	r3, #3
     524:	dcf8      	bgt.n	518 <main+0x5c>
			{
			
					delay_ms(1);
     526:	2001      	movs	r0, #1
     528:	4b26      	ldr	r3, [pc, #152]	; (5c4 <main+0x108>)
     52a:	4798      	blx	r3
                                                                  					usb<<"Enabling Heater: "<<i<<" .\t";
     52c:	492f      	ldr	r1, [pc, #188]	; (5ec <main+0x130>)
     52e:	4823      	ldr	r0, [pc, #140]	; (5bc <main+0x100>)
     530:	4b2f      	ldr	r3, [pc, #188]	; (5f0 <main+0x134>)
     532:	4798      	blx	r3
     534:	4602      	mov	r2, r0
     536:	1c7b      	adds	r3, r7, #1
     538:	4619      	mov	r1, r3
     53a:	4610      	mov	r0, r2
     53c:	4b2d      	ldr	r3, [pc, #180]	; (5f4 <main+0x138>)
     53e:	4798      	blx	r3
     540:	4603      	mov	r3, r0
     542:	492d      	ldr	r1, [pc, #180]	; (5f8 <main+0x13c>)
     544:	4618      	mov	r0, r3
     546:	4b2d      	ldr	r3, [pc, #180]	; (5fc <main+0x140>)
     548:	4798      	blx	r3
					heater.EnableIndex(i);
     54a:	787b      	ldrb	r3, [r7, #1]
     54c:	4619      	mov	r1, r3
     54e:	4824      	ldr	r0, [pc, #144]	; (5e0 <main+0x124>)
     550:	4b2b      	ldr	r3, [pc, #172]	; (600 <main+0x144>)
     552:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     554:	2064      	movs	r0, #100	; 0x64
     556:	4b1b      	ldr	r3, [pc, #108]	; (5c4 <main+0x108>)
     558:	4798      	blx	r3
					status= heater.ReadStatus();
     55a:	4821      	ldr	r0, [pc, #132]	; (5e0 <main+0x124>)
     55c:	4b29      	ldr	r3, [pc, #164]	; (604 <main+0x148>)
     55e:	4798      	blx	r3
     560:	4603      	mov	r3, r0
     562:	70bb      	strb	r3, [r7, #2]
					usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
     564:	4928      	ldr	r1, [pc, #160]	; (608 <main+0x14c>)
     566:	4815      	ldr	r0, [pc, #84]	; (5bc <main+0x100>)
     568:	4b28      	ldr	r3, [pc, #160]	; (60c <main+0x150>)
     56a:	4798      	blx	r3
     56c:	4602      	mov	r2, r0
     56e:	1c7b      	adds	r3, r7, #1
     570:	4619      	mov	r1, r3
     572:	4610      	mov	r0, r2
     574:	4b1f      	ldr	r3, [pc, #124]	; (5f4 <main+0x138>)
     576:	4798      	blx	r3
     578:	4603      	mov	r3, r0
     57a:	4925      	ldr	r1, [pc, #148]	; (610 <main+0x154>)
     57c:	4618      	mov	r0, r3
     57e:	4b25      	ldr	r3, [pc, #148]	; (614 <main+0x158>)
     580:	4798      	blx	r3
     582:	787b      	ldrb	r3, [r7, #1]
     584:	461a      	mov	r2, r3
     586:	4b16      	ldr	r3, [pc, #88]	; (5e0 <main+0x124>)
     588:	4413      	add	r3, r2
     58a:	3303      	adds	r3, #3
     58c:	4619      	mov	r1, r3
     58e:	4b22      	ldr	r3, [pc, #136]	; (618 <main+0x15c>)
     590:	4798      	blx	r3
     592:	4603      	mov	r3, r0
     594:	4921      	ldr	r1, [pc, #132]	; (61c <main+0x160>)
     596:	4618      	mov	r0, r3
     598:	4b21      	ldr	r3, [pc, #132]	; (620 <main+0x164>)
     59a:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     59c:	2064      	movs	r0, #100	; 0x64
     59e:	4b09      	ldr	r3, [pc, #36]	; (5c4 <main+0x108>)
     5a0:	4798      	blx	r3
					heater.DisableIndex(i);
     5a2:	787b      	ldrb	r3, [r7, #1]
     5a4:	4619      	mov	r1, r3
     5a6:	480e      	ldr	r0, [pc, #56]	; (5e0 <main+0x124>)
     5a8:	4b1e      	ldr	r3, [pc, #120]	; (624 <main+0x168>)
     5aa:	4798      	blx	r3
			for (uint8_t i = 0; i < 4; i++)
     5ac:	787b      	ldrb	r3, [r7, #1]
     5ae:	3301      	adds	r3, #1
     5b0:	b2db      	uxtb	r3, r3
     5b2:	707b      	strb	r3, [r7, #1]
     5b4:	e7b4      	b.n	520 <main+0x64>
     5b6:	bf00      	nop
     5b8:	00000bc1 	.word	0x00000bc1
     5bc:	2000138c 	.word	0x2000138c
     5c0:	0000dffd 	.word	0x0000dffd
     5c4:	0000238d 	.word	0x0000238d
     5c8:	200015e4 	.word	0x200015e4
     5cc:	000027fd 	.word	0x000027fd
     5d0:	000004a1 	.word	0x000004a1
     5d4:	20000698 	.word	0x20000698
     5d8:	0000daa5 	.word	0x0000daa5
     5dc:	00000439 	.word	0x00000439
     5e0:	200007c4 	.word	0x200007c4
     5e4:	00000895 	.word	0x00000895
     5e8:	00000471 	.word	0x00000471
     5ec:	0000efbc 	.word	0x0000efbc
     5f0:	00000629 	.word	0x00000629
     5f4:	00000649 	.word	0x00000649
     5f8:	0000efd0 	.word	0x0000efd0
     5fc:	00000671 	.word	0x00000671
     600:	00000a11 	.word	0x00000a11
     604:	000009a5 	.word	0x000009a5
     608:	0000efd4 	.word	0x0000efd4
     60c:	00000691 	.word	0x00000691
     610:	0000efdc 	.word	0x0000efdc
     614:	000006b1 	.word	0x000006b1
     618:	000006d1 	.word	0x000006d1
     61c:	0000efe8 	.word	0x0000efe8
     620:	000006f9 	.word	0x000006f9
     624:	00000a45 	.word	0x00000a45

00000628 <_ZlsIA18_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     628:	b580      	push	{r7, lr}
     62a:	b082      	sub	sp, #8
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     632:	6839      	ldr	r1, [r7, #0]
     634:	6878      	ldr	r0, [r7, #4]
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZlsIA18_cER5PrintS2_RKT_+0x1c>)
     638:	4798      	blx	r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bd80      	pop	{r7, pc}
     644:	0000e539 	.word	0x0000e539

00000648 <_ZlsIhER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
     650:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     652:	683b      	ldr	r3, [r7, #0]
     654:	781b      	ldrb	r3, [r3, #0]
     656:	220a      	movs	r2, #10
     658:	4619      	mov	r1, r3
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	4b03      	ldr	r3, [pc, #12]	; (66c <_ZlsIhER5PrintS1_RKT_+0x24>)
     65e:	4798      	blx	r3
     660:	687b      	ldr	r3, [r7, #4]
     662:	4618      	mov	r0, r3
     664:	3708      	adds	r7, #8
     666:	46bd      	mov	sp, r7
     668:	bd80      	pop	{r7, pc}
     66a:	bf00      	nop
     66c:	0000e57d 	.word	0x0000e57d

00000670 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
     678:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     67a:	6839      	ldr	r1, [r7, #0]
     67c:	6878      	ldr	r0, [r7, #4]
     67e:	4b03      	ldr	r3, [pc, #12]	; (68c <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     680:	4798      	blx	r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	4618      	mov	r0, r3
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	0000e539 	.word	0x0000e539

00000690 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     69a:	6839      	ldr	r1, [r7, #0]
     69c:	6878      	ldr	r0, [r7, #4]
     69e:	4b03      	ldr	r3, [pc, #12]	; (6ac <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
     6a0:	4798      	blx	r3
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	4618      	mov	r0, r3
     6a6:	3708      	adds	r7, #8
     6a8:	46bd      	mov	sp, r7
     6aa:	bd80      	pop	{r7, pc}
     6ac:	0000e539 	.word	0x0000e539

000006b0 <_ZlsIA10_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
     6b8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6ba:	6839      	ldr	r1, [r7, #0]
     6bc:	6878      	ldr	r0, [r7, #4]
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <_ZlsIA10_cER5PrintS2_RKT_+0x1c>)
     6c0:	4798      	blx	r3
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	4618      	mov	r0, r3
     6c6:	3708      	adds	r7, #8
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}
     6cc:	0000e539 	.word	0x0000e539

000006d0 <_ZlsIbER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6da:	683b      	ldr	r3, [r7, #0]
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	220a      	movs	r2, #10
     6e0:	4619      	mov	r1, r3
     6e2:	6878      	ldr	r0, [r7, #4]
     6e4:	4b03      	ldr	r3, [pc, #12]	; (6f4 <_ZlsIbER5PrintS1_RKT_+0x24>)
     6e6:	4798      	blx	r3
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4618      	mov	r0, r3
     6ec:	3708      	adds	r7, #8
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	0000e5a5 	.word	0x0000e5a5

000006f8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
     700:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     702:	6839      	ldr	r1, [r7, #0]
     704:	6878      	ldr	r0, [r7, #4]
     706:	4b03      	ldr	r3, [pc, #12]	; (714 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     708:	4798      	blx	r3
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	4618      	mov	r0, r3
     70e:	3708      	adds	r7, #8
     710:	46bd      	mov	sp, r7
     712:	bd80      	pop	{r7, pc}
     714:	0000e539 	.word	0x0000e539

00000718 <_Z41__static_initialization_and_destruction_0ii>:
	/*	}*/
		
		

	}
}
     718:	b580      	push	{r7, lr}
     71a:	b082      	sub	sp, #8
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
     720:	6039      	str	r1, [r7, #0]
     722:	687b      	ldr	r3, [r7, #4]
     724:	2b01      	cmp	r3, #1
     726:	d155      	bne.n	7d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
     728:	683b      	ldr	r3, [r7, #0]
     72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     72e:	4293      	cmp	r3, r2
     730:	d150      	bne.n	7d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     732:	492a      	ldr	r1, [pc, #168]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     734:	482a      	ldr	r0, [pc, #168]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     736:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     738:	4798      	blx	r3
     73a:	4a2b      	ldr	r2, [pc, #172]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     73c:	492b      	ldr	r1, [pc, #172]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     73e:	4828      	ldr	r0, [pc, #160]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     740:	4b2b      	ldr	r3, [pc, #172]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     742:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     744:	492b      	ldr	r1, [pc, #172]	; (7f4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     746:	482c      	ldr	r0, [pc, #176]	; (7f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     748:	4b26      	ldr	r3, [pc, #152]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     74a:	4798      	blx	r3
     74c:	4a26      	ldr	r2, [pc, #152]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     74e:	4927      	ldr	r1, [pc, #156]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     750:	4829      	ldr	r0, [pc, #164]	; (7f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     752:	4b27      	ldr	r3, [pc, #156]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     754:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     756:	4929      	ldr	r1, [pc, #164]	; (7fc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     758:	4829      	ldr	r0, [pc, #164]	; (800 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     75a:	4b22      	ldr	r3, [pc, #136]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     75c:	4798      	blx	r3
     75e:	4a22      	ldr	r2, [pc, #136]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     760:	4922      	ldr	r1, [pc, #136]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     762:	4827      	ldr	r0, [pc, #156]	; (800 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     764:	4b22      	ldr	r3, [pc, #136]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     766:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     768:	4926      	ldr	r1, [pc, #152]	; (804 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     76a:	4827      	ldr	r0, [pc, #156]	; (808 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     76c:	4b1d      	ldr	r3, [pc, #116]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     76e:	4798      	blx	r3
     770:	4a1d      	ldr	r2, [pc, #116]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     772:	491e      	ldr	r1, [pc, #120]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     774:	4824      	ldr	r0, [pc, #144]	; (808 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     776:	4b1e      	ldr	r3, [pc, #120]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     778:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     77a:	4924      	ldr	r1, [pc, #144]	; (80c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     77c:	4824      	ldr	r0, [pc, #144]	; (810 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     77e:	4b19      	ldr	r3, [pc, #100]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     780:	4798      	blx	r3
     782:	4a19      	ldr	r2, [pc, #100]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     784:	4919      	ldr	r1, [pc, #100]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     786:	4822      	ldr	r0, [pc, #136]	; (810 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     788:	4b19      	ldr	r3, [pc, #100]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     78a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     78c:	4921      	ldr	r1, [pc, #132]	; (814 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     78e:	4822      	ldr	r0, [pc, #136]	; (818 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     790:	4b14      	ldr	r3, [pc, #80]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     792:	4798      	blx	r3
     794:	4a14      	ldr	r2, [pc, #80]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     796:	4915      	ldr	r1, [pc, #84]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     798:	481f      	ldr	r0, [pc, #124]	; (818 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     79a:	4b15      	ldr	r3, [pc, #84]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     79c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     79e:	491f      	ldr	r1, [pc, #124]	; (81c <_Z41__static_initialization_and_destruction_0ii+0x104>)
     7a0:	481f      	ldr	r0, [pc, #124]	; (820 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     7a2:	4b10      	ldr	r3, [pc, #64]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     7a4:	4798      	blx	r3
     7a6:	4a10      	ldr	r2, [pc, #64]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7a8:	4910      	ldr	r1, [pc, #64]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     7aa:	481d      	ldr	r0, [pc, #116]	; (820 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     7ac:	4b10      	ldr	r3, [pc, #64]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7ae:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     7b0:	491c      	ldr	r1, [pc, #112]	; (824 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     7b2:	481d      	ldr	r0, [pc, #116]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     7b6:	4798      	blx	r3
     7b8:	4a0b      	ldr	r2, [pc, #44]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7ba:	490c      	ldr	r1, [pc, #48]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     7bc:	481a      	ldr	r0, [pc, #104]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     7be:	4b0c      	ldr	r3, [pc, #48]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7c0:	4798      	blx	r3
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     7c2:	491a      	ldr	r1, [pc, #104]	; (82c <_Z41__static_initialization_and_destruction_0ii+0x114>)
     7c4:	481a      	ldr	r0, [pc, #104]	; (830 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     7c6:	4b1b      	ldr	r3, [pc, #108]	; (834 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     7c8:	4798      	blx	r3
     7ca:	4a07      	ldr	r2, [pc, #28]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7cc:	491a      	ldr	r1, [pc, #104]	; (838 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     7ce:	4818      	ldr	r0, [pc, #96]	; (830 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     7d0:	4b07      	ldr	r3, [pc, #28]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7d2:	4798      	blx	r3
     7d4:	bf00      	nop
     7d6:	3708      	adds	r7, #8
     7d8:	46bd      	mov	sp, r7
     7da:	bd80      	pop	{r7, pc}
     7dc:	200014f0 	.word	0x200014f0
     7e0:	20000658 	.word	0x20000658
     7e4:	0000d8c9 	.word	0x0000d8c9
     7e8:	20000000 	.word	0x20000000
     7ec:	0000d901 	.word	0x0000d901
     7f0:	0000eb49 	.word	0x0000eb49
     7f4:	20001584 	.word	0x20001584
     7f8:	20000678 	.word	0x20000678
     7fc:	200016a8 	.word	0x200016a8
     800:	20000698 	.word	0x20000698
     804:	200015a4 	.word	0x200015a4
     808:	200006b8 	.word	0x200006b8
     80c:	20001668 	.word	0x20001668
     810:	200006d8 	.word	0x200006d8
     814:	20001688 	.word	0x20001688
     818:	200006f8 	.word	0x200006f8
     81c:	20001560 	.word	0x20001560
     820:	20000718 	.word	0x20000718
     824:	20001600 	.word	0x20001600
     828:	20000738 	.word	0x20000738
     82c:	20001620 	.word	0x20001620
     830:	20000758 	.word	0x20000758
     834:	0000d3c9 	.word	0x0000d3c9
     838:	0000d3e5 	.word	0x0000d3e5

0000083c <_GLOBAL__sub_I_main>:
     83c:	b580      	push	{r7, lr}
     83e:	af00      	add	r7, sp, #0
     840:	f64f 71ff 	movw	r1, #65535	; 0xffff
     844:	2001      	movs	r0, #1
     846:	4b01      	ldr	r3, [pc, #4]	; (84c <_GLOBAL__sub_I_main+0x10>)
     848:	4798      	blx	r3
     84a:	bd80      	pop	{r7, pc}
     84c:	00000719 	.word	0x00000719

00000850 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
     850:	b480      	push	{r7}
     852:	b083      	sub	sp, #12
     854:	af00      	add	r7, sp, #0
     856:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
     858:	4a07      	ldr	r2, [pc, #28]	; (878 <_ZN18SingleHeater_ClassC1Ev+0x28>)
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
     85e:	687b      	ldr	r3, [r7, #4]
     860:	4a06      	ldr	r2, [pc, #24]	; (87c <_ZN18SingleHeater_ClassC1Ev+0x2c>)
     862:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
     864:	687b      	ldr	r3, [r7, #4]
     866:	2200      	movs	r2, #0
     868:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	4618      	mov	r0, r3
     86e:	370c      	adds	r7, #12
     870:	46bd      	mov	sp, r7
     872:	bc80      	pop	{r7}
     874:	4770      	bx	lr
     876:	bf00      	nop
     878:	20000788 	.word	0x20000788
     87c:	20000770 	.word	0x20000770

00000880 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
     880:	b480      	push	{r7}
     882:	b083      	sub	sp, #12
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
     888:	687b      	ldr	r3, [r7, #4]
     88a:	4618      	mov	r0, r3
     88c:	370c      	adds	r7, #12
     88e:	46bd      	mov	sp, r7
     890:	bc80      	pop	{r7}
     892:	4770      	bx	lr

00000894 <_ZN18SingleHeater_Class4InitEh>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id){
     894:	b580      	push	{r7, lr}
     896:	b082      	sub	sp, #8
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
     89c:	460b      	mov	r3, r1
     89e:	70fb      	strb	r3, [r7, #3]
	heater_id=id;
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	78fa      	ldrb	r2, [r7, #3]
     8a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->i2c_initiated)
     8a8:	687b      	ldr	r3, [r7, #4]
     8aa:	699b      	ldr	r3, [r3, #24]
     8ac:	7a1b      	ldrb	r3, [r3, #8]
     8ae:	b2db      	uxtb	r3, r3
     8b0:	2b00      	cmp	r3, #0
     8b2:	d104      	bne.n	8be <_ZN18SingleHeater_Class4InitEh+0x2a>
	{
		
	} 
	else{
		i2c->Init();
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	699b      	ldr	r3, [r3, #24]
     8b8:	4618      	mov	r0, r3
     8ba:	4b15      	ldr	r3, [pc, #84]	; (910 <_ZN18SingleHeater_Class4InitEh+0x7c>)
     8bc:	4798      	blx	r3
	}
	
	if (i2c->isOK)
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	699b      	ldr	r3, [r3, #24]
     8c2:	7a5b      	ldrb	r3, [r3, #9]
     8c4:	b2db      	uxtb	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d014      	beq.n	8f4 <_ZN18SingleHeater_Class4InitEh+0x60>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray();
     8ca:	6878      	ldr	r0, [r7, #4]
     8cc:	4b11      	ldr	r3, [pc, #68]	; (914 <_ZN18SingleHeater_Class4InitEh+0x80>)
     8ce:	4798      	blx	r3
		expanders[0]->SetPortInput();
     8d0:	687b      	ldr	r3, [r7, #4]
     8d2:	68db      	ldr	r3, [r3, #12]
     8d4:	4618      	mov	r0, r3
     8d6:	4b10      	ldr	r3, [pc, #64]	; (918 <_ZN18SingleHeater_Class4InitEh+0x84>)
     8d8:	4798      	blx	r3
		expanders[1]->SetPortOutput();
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	691b      	ldr	r3, [r3, #16]
     8de:	4618      	mov	r0, r3
     8e0:	4b0e      	ldr	r3, [pc, #56]	; (91c <_ZN18SingleHeater_Class4InitEh+0x88>)
     8e2:	4798      	blx	r3
		isOK=SelfTest();
     8e4:	6878      	ldr	r0, [r7, #4]
     8e6:	4b0e      	ldr	r3, [pc, #56]	; (920 <_ZN18SingleHeater_Class4InitEh+0x8c>)
     8e8:	4798      	blx	r3
     8ea:	4603      	mov	r3, r0
     8ec:	461a      	mov	r2, r3
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	701a      	strb	r2, [r3, #0]
     8f2:	e000      	b.n	8f6 <_ZN18SingleHeater_Class4InitEh+0x62>
	}
	else
	{
		asm("nop");
     8f4:	bf00      	nop
	}
	isOK=i2c->isOK;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	699b      	ldr	r3, [r3, #24]
     8fa:	7a5b      	ldrb	r3, [r3, #9]
     8fc:	b2da      	uxtb	r2, r3
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	701a      	strb	r2, [r3, #0]
	return isOK;
     902:	687b      	ldr	r3, [r7, #4]
     904:	781b      	ldrb	r3, [r3, #0]
     906:	b2db      	uxtb	r3, r3
}
     908:	4618      	mov	r0, r3
     90a:	3708      	adds	r7, #8
     90c:	46bd      	mov	sp, r7
     90e:	bd80      	pop	{r7, pc}
     910:	0000d3f9 	.word	0x0000d3f9
     914:	00000925 	.word	0x00000925
     918:	0000d6b5 	.word	0x0000d6b5
     91c:	0000d6f9 	.word	0x0000d6f9
     920:	00000a81 	.word	0x00000a81

00000924 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
     924:	b580      	push	{r7, lr}
     926:	b084      	sub	sp, #16
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     92c:	2300      	movs	r3, #0
     92e:	60fb      	str	r3, [r7, #12]
     930:	68fb      	ldr	r3, [r7, #12]
     932:	2b01      	cmp	r3, #1
     934:	dc2d      	bgt.n	992 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6e>
	{
		expanders[i]=&expandersStatic[i];
     936:	68fa      	ldr	r2, [r7, #12]
     938:	4613      	mov	r3, r2
     93a:	00db      	lsls	r3, r3, #3
     93c:	1a9b      	subs	r3, r3, r2
     93e:	009b      	lsls	r3, r3, #2
     940:	4a16      	ldr	r2, [pc, #88]	; (99c <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x78>)
     942:	441a      	add	r2, r3
     944:	6879      	ldr	r1, [r7, #4]
     946:	68fb      	ldr	r3, [r7, #12]
     948:	3302      	adds	r3, #2
     94a:	009b      	lsls	r3, r3, #2
     94c:	440b      	add	r3, r1
     94e:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
     950:	687a      	ldr	r2, [r7, #4]
     952:	68fb      	ldr	r3, [r7, #12]
     954:	3302      	adds	r3, #2
     956:	009b      	lsls	r3, r3, #2
     958:	4413      	add	r3, r2
     95a:	685a      	ldr	r2, [r3, #4]
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
     960:	687b      	ldr	r3, [r7, #4]
     962:	6958      	ldr	r0, [r3, #20]
     964:	68fb      	ldr	r3, [r7, #12]
     966:	b2da      	uxtb	r2, r3
     968:	687b      	ldr	r3, [r7, #4]
     96a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
     96e:	005b      	lsls	r3, r3, #1
     970:	b2db      	uxtb	r3, r3
     972:	4313      	orrs	r3, r2
     974:	b2db      	uxtb	r3, r3
     976:	f043 0320 	orr.w	r3, r3, #32
     97a:	b2db      	uxtb	r3, r3
     97c:	b25b      	sxtb	r3, r3
     97e:	b2d9      	uxtb	r1, r3
     980:	687b      	ldr	r3, [r7, #4]
     982:	699b      	ldr	r3, [r3, #24]
     984:	461a      	mov	r2, r3
     986:	4b06      	ldr	r3, [pc, #24]	; (9a0 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x7c>)
     988:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	3301      	adds	r3, #1
     98e:	60fb      	str	r3, [r7, #12]
     990:	e7ce      	b.n	930 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
     992:	bf00      	nop
     994:	4618      	mov	r0, r3
     996:	3710      	adds	r7, #16
     998:	46bd      	mov	sp, r7
     99a:	bd80      	pop	{r7, pc}
     99c:	2000078c 	.word	0x2000078c
     9a0:	0000d54d 	.word	0x0000d54d

000009a4 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	68db      	ldr	r3, [r3, #12]
     9b0:	4618      	mov	r0, r3
     9b2:	4b16      	ldr	r3, [pc, #88]	; (a0c <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
     9b4:	4798      	blx	r3
     9b6:	4603      	mov	r3, r0
     9b8:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     9ba:	7bbb      	ldrb	r3, [r7, #14]
     9bc:	f003 0301 	and.w	r3, r3, #1
     9c0:	2b00      	cmp	r3, #0
     9c2:	bf14      	ite	ne
     9c4:	2301      	movne	r3, #1
     9c6:	2300      	moveq	r3, #0
     9c8:	b2da      	uxtb	r2, r3
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
     9ce:	2300      	movs	r3, #0
     9d0:	73fb      	strb	r3, [r7, #15]
     9d2:	7bfb      	ldrb	r3, [r7, #15]
     9d4:	2b03      	cmp	r3, #3
     9d6:	dc14      	bgt.n	a02 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     9d8:	7bfb      	ldrb	r3, [r7, #15]
     9da:	7bb9      	ldrb	r1, [r7, #14]
     9dc:	7bfa      	ldrb	r2, [r7, #15]
     9de:	3201      	adds	r2, #1
     9e0:	fa41 f202 	asr.w	r2, r1, r2
     9e4:	f002 0201 	and.w	r2, r2, #1
     9e8:	2a00      	cmp	r2, #0
     9ea:	bf14      	ite	ne
     9ec:	2201      	movne	r2, #1
     9ee:	2200      	moveq	r2, #0
     9f0:	b2d1      	uxtb	r1, r2
     9f2:	687a      	ldr	r2, [r7, #4]
     9f4:	4413      	add	r3, r2
     9f6:	460a      	mov	r2, r1
     9f8:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
     9fa:	7bfb      	ldrb	r3, [r7, #15]
     9fc:	3301      	adds	r3, #1
     9fe:	73fb      	strb	r3, [r7, #15]
     a00:	e7e7      	b.n	9d2 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
     a02:	7bbb      	ldrb	r3, [r7, #14]
}
     a04:	4618      	mov	r0, r3
     a06:	3710      	adds	r7, #16
     a08:	46bd      	mov	sp, r7
     a0a:	bd80      	pop	{r7, pc}
     a0c:	0000d631 	.word	0x0000d631

00000a10 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0
     a16:	6078      	str	r0, [r7, #4]
     a18:	460b      	mov	r3, r1
     a1a:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	691b      	ldr	r3, [r3, #16]
     a20:	78f9      	ldrb	r1, [r7, #3]
     a22:	2200      	movs	r2, #0
     a24:	4618      	mov	r0, r3
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
     a28:	4798      	blx	r3
     a2a:	4603      	mov	r3, r0
     a2c:	461a      	mov	r2, r3
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	7adb      	ldrb	r3, [r3, #11]
}
     a36:	4618      	mov	r0, r3
     a38:	3708      	adds	r7, #8
     a3a:	46bd      	mov	sp, r7
     a3c:	bd80      	pop	{r7, pc}
     a3e:	bf00      	nop
     a40:	0000d7f1 	.word	0x0000d7f1

00000a44 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
     a4c:	460b      	mov	r3, r1
     a4e:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	691b      	ldr	r3, [r3, #16]
     a54:	78f9      	ldrb	r1, [r7, #3]
     a56:	2201      	movs	r2, #1
     a58:	4618      	mov	r0, r3
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
     a5c:	4798      	blx	r3
     a5e:	4603      	mov	r3, r0
     a60:	2b00      	cmp	r3, #0
     a62:	d001      	beq.n	a68 <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
     a64:	2200      	movs	r2, #0
     a66:	e000      	b.n	a6a <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
     a68:	2201      	movs	r2, #1
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	7adb      	ldrb	r3, [r3, #11]
}
     a72:	4618      	mov	r0, r3
     a74:	3708      	adds	r7, #8
     a76:	46bd      	mov	sp, r7
     a78:	bd80      	pop	{r7, pc}
     a7a:	bf00      	nop
     a7c:	0000d7f1 	.word	0x0000d7f1

00000a80 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
     a80:	b580      	push	{r7, lr}
     a82:	b084      	sub	sp, #16
     a84:	af00      	add	r7, sp, #0
     a86:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
     a88:	2300      	movs	r3, #0
     a8a:	73bb      	strb	r3, [r7, #14]
     a8c:	7bbb      	ldrb	r3, [r7, #14]
     a8e:	2b03      	cmp	r3, #3
     a90:	dc1f      	bgt.n	ad2 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
     a92:	7bbb      	ldrb	r3, [r7, #14]
     a94:	4619      	mov	r1, r3
     a96:	6878      	ldr	r0, [r7, #4]
     a98:	4b10      	ldr	r3, [pc, #64]	; (adc <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
     a9a:	4798      	blx	r3
		delay_ms(100);
     a9c:	2064      	movs	r0, #100	; 0x64
     a9e:	4b10      	ldr	r3, [pc, #64]	; (ae0 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
     aa0:	4798      	blx	r3
		DisableIndex(i);
     aa2:	7bbb      	ldrb	r3, [r7, #14]
     aa4:	4619      	mov	r1, r3
     aa6:	6878      	ldr	r0, [r7, #4]
     aa8:	4b0e      	ldr	r3, [pc, #56]	; (ae4 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
     aaa:	4798      	blx	r3
		ReadStatus();
     aac:	6878      	ldr	r0, [r7, #4]
     aae:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
     ab0:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
     ab2:	7bbb      	ldrb	r3, [r7, #14]
     ab4:	687a      	ldr	r2, [r7, #4]
     ab6:	4413      	add	r3, r2
     ab8:	78db      	ldrb	r3, [r3, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d002      	beq.n	ac4 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
     abe:	2301      	movs	r3, #1
     ac0:	73fb      	strb	r3, [r7, #15]
     ac2:	e002      	b.n	aca <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
     ac4:	2300      	movs	r3, #0
     ac6:	73fb      	strb	r3, [r7, #15]
			break;
     ac8:	e003      	b.n	ad2 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
     aca:	7bbb      	ldrb	r3, [r7, #14]
     acc:	3301      	adds	r3, #1
     ace:	73bb      	strb	r3, [r7, #14]
     ad0:	e7dc      	b.n	a8c <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
     ad2:	7bfb      	ldrb	r3, [r7, #15]
}
     ad4:	4618      	mov	r0, r3
     ad6:	3710      	adds	r7, #16
     ad8:	46bd      	mov	sp, r7
     ada:	bd80      	pop	{r7, pc}
     adc:	00000a11 	.word	0x00000a11
     ae0:	0000238d 	.word	0x0000238d
     ae4:	00000a45 	.word	0x00000a45
     ae8:	000009a5 	.word	0x000009a5

00000aec <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     aec:	b590      	push	{r4, r7, lr}
     aee:	b083      	sub	sp, #12
     af0:	af00      	add	r7, sp, #0
     af2:	6078      	str	r0, [r7, #4]
     af4:	4c05      	ldr	r4, [pc, #20]	; (b0c <__tcf_0+0x20>)
     af6:	4b06      	ldr	r3, [pc, #24]	; (b10 <__tcf_0+0x24>)
     af8:	429c      	cmp	r4, r3
     afa:	d004      	beq.n	b06 <__tcf_0+0x1a>
     afc:	3c1c      	subs	r4, #28
     afe:	4620      	mov	r0, r4
     b00:	4b04      	ldr	r3, [pc, #16]	; (b14 <__tcf_0+0x28>)
     b02:	4798      	blx	r3
     b04:	e7f7      	b.n	af6 <__tcf_0+0xa>
     b06:	370c      	adds	r7, #12
     b08:	46bd      	mov	sp, r7
     b0a:	bd90      	pop	{r4, r7, pc}
     b0c:	200007c4 	.word	0x200007c4
     b10:	2000078c 	.word	0x2000078c
     b14:	0000d539 	.word	0x0000d539

00000b18 <_Z41__static_initialization_and_destruction_0ii>:

     b18:	b5b0      	push	{r4, r5, r7, lr}
     b1a:	b082      	sub	sp, #8
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
     b20:	6039      	str	r1, [r7, #0]
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	2b01      	cmp	r3, #1
     b26:	d125      	bne.n	b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     b28:	683b      	ldr	r3, [r7, #0]
     b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b2e:	4293      	cmp	r3, r2
     b30:	d120      	bne.n	b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     b32:	4912      	ldr	r1, [pc, #72]	; (b7c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     b34:	4812      	ldr	r0, [pc, #72]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     b36:	4b13      	ldr	r3, [pc, #76]	; (b84 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b38:	4798      	blx	r3
     b3a:	4a13      	ldr	r2, [pc, #76]	; (b88 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b3c:	4913      	ldr	r1, [pc, #76]	; (b8c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b3e:	4810      	ldr	r0, [pc, #64]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     b40:	4b13      	ldr	r3, [pc, #76]	; (b90 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b42:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     b44:	4b13      	ldr	r3, [pc, #76]	; (b94 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     b46:	2401      	movs	r4, #1
     b48:	461d      	mov	r5, r3
     b4a:	2c00      	cmp	r4, #0
     b4c:	db05      	blt.n	b5a <_Z41__static_initialization_and_destruction_0ii+0x42>
     b4e:	4628      	mov	r0, r5
     b50:	4b11      	ldr	r3, [pc, #68]	; (b98 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     b52:	4798      	blx	r3
     b54:	351c      	adds	r5, #28
     b56:	3c01      	subs	r4, #1
     b58:	e7f7      	b.n	b4a <_Z41__static_initialization_and_destruction_0ii+0x32>
     b5a:	4a0b      	ldr	r2, [pc, #44]	; (b88 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b5c:	490f      	ldr	r1, [pc, #60]	; (b9c <_Z41__static_initialization_and_destruction_0ii+0x84>)
     b5e:	2000      	movs	r0, #0
     b60:	4b0b      	ldr	r3, [pc, #44]	; (b90 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b62:	4798      	blx	r3
     b64:	480e      	ldr	r0, [pc, #56]	; (ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     b66:	4b0f      	ldr	r3, [pc, #60]	; (ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     b68:	4798      	blx	r3
     b6a:	4a07      	ldr	r2, [pc, #28]	; (b88 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b6c:	490e      	ldr	r1, [pc, #56]	; (ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     b6e:	480c      	ldr	r0, [pc, #48]	; (ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     b70:	4b07      	ldr	r3, [pc, #28]	; (b90 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b72:	4798      	blx	r3
     b74:	bf00      	nop
     b76:	3708      	adds	r7, #8
     b78:	46bd      	mov	sp, r7
     b7a:	bdb0      	pop	{r4, r5, r7, pc}
     b7c:	20001620 	.word	0x20001620
     b80:	20000770 	.word	0x20000770
     b84:	0000d3c9 	.word	0x0000d3c9
     b88:	20000000 	.word	0x20000000
     b8c:	0000d3e5 	.word	0x0000d3e5
     b90:	0000eb49 	.word	0x0000eb49
     b94:	2000078c 	.word	0x2000078c
     b98:	0000d525 	.word	0x0000d525
     b9c:	00000aed 	.word	0x00000aed
     ba0:	200007c4 	.word	0x200007c4
     ba4:	00000851 	.word	0x00000851
     ba8:	00000881 	.word	0x00000881

00000bac <_GLOBAL__sub_I_ptrSingleHeaterClass>:
     bac:	b580      	push	{r7, lr}
     bae:	af00      	add	r7, sp, #0
     bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     bb4:	2001      	movs	r0, #1
     bb6:	4b01      	ldr	r3, [pc, #4]	; (bbc <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
     bb8:	4798      	blx	r3
     bba:	bd80      	pop	{r7, pc}
     bbc:	00000b19 	.word	0x00000b19

00000bc0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     bc0:	b580      	push	{r7, lr}
     bc2:	af00      	add	r7, sp, #0
	system_init();
     bc4:	4b03      	ldr	r3, [pc, #12]	; (bd4 <atmel_start_init+0x14>)
     bc6:	4798      	blx	r3
	usb_init();
     bc8:	4b03      	ldr	r3, [pc, #12]	; (bd8 <atmel_start_init+0x18>)
     bca:	4798      	blx	r3
	spi_nor_flash_init();
     bcc:	4b03      	ldr	r3, [pc, #12]	; (bdc <atmel_start_init+0x1c>)
     bce:	4798      	blx	r3
}
     bd0:	bf00      	nop
     bd2:	bd80      	pop	{r7, pc}
     bd4:	00001fc1 	.word	0x00001fc1
     bd8:	0000b4f5 	.word	0x0000b4f5
     bdc:	0000b489 	.word	0x0000b489

00000be0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     be0:	b480      	push	{r7}
     be2:	b085      	sub	sp, #20
     be4:	af00      	add	r7, sp, #0
     be6:	60f8      	str	r0, [r7, #12]
     be8:	460b      	mov	r3, r1
     bea:	607a      	str	r2, [r7, #4]
     bec:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     bee:	7afa      	ldrb	r2, [r7, #11]
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	3220      	adds	r2, #32
     bf4:	6879      	ldr	r1, [r7, #4]
     bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     bfa:	bf00      	nop
     bfc:	3714      	adds	r7, #20
     bfe:	46bd      	mov	sp, r7
     c00:	f85d 7b04 	ldr.w	r7, [sp], #4
     c04:	4770      	bx	lr

00000c06 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     c06:	b480      	push	{r7}
     c08:	b083      	sub	sp, #12
     c0a:	af00      	add	r7, sp, #0
     c0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	691b      	ldr	r3, [r3, #16]
     c12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c1a:	bf00      	nop
     c1c:	370c      	adds	r7, #12
     c1e:	46bd      	mov	sp, r7
     c20:	f85d 7b04 	ldr.w	r7, [sp], #4
     c24:	4770      	bx	lr

00000c26 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     c26:	b480      	push	{r7}
     c28:	b083      	sub	sp, #12
     c2a:	af00      	add	r7, sp, #0
     c2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	691b      	ldr	r3, [r3, #16]
     c32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c3a:	bf00      	nop
     c3c:	370c      	adds	r7, #12
     c3e:	46bd      	mov	sp, r7
     c40:	f85d 7b04 	ldr.w	r7, [sp], #4
     c44:	4770      	bx	lr

00000c46 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     c46:	b480      	push	{r7}
     c48:	b083      	sub	sp, #12
     c4a:	af00      	add	r7, sp, #0
     c4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     c4e:	687b      	ldr	r3, [r7, #4]
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c5a:	bf00      	nop
     c5c:	370c      	adds	r7, #12
     c5e:	46bd      	mov	sp, r7
     c60:	f85d 7b04 	ldr.w	r7, [sp], #4
     c64:	4770      	bx	lr

00000c66 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     c66:	b480      	push	{r7}
     c68:	b083      	sub	sp, #12
     c6a:	af00      	add	r7, sp, #0
     c6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	691b      	ldr	r3, [r3, #16]
     c72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c7a:	bf00      	nop
     c7c:	370c      	adds	r7, #12
     c7e:	46bd      	mov	sp, r7
     c80:	f85d 7b04 	ldr.w	r7, [sp], #4
     c84:	4770      	bx	lr

00000c86 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     c86:	b480      	push	{r7}
     c88:	b083      	sub	sp, #12
     c8a:	af00      	add	r7, sp, #0
     c8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	695b      	ldr	r3, [r3, #20]
     c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c9a:	bf00      	nop
     c9c:	370c      	adds	r7, #12
     c9e:	46bd      	mov	sp, r7
     ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ca4:	4770      	bx	lr

00000ca6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     ca6:	b480      	push	{r7}
     ca8:	b083      	sub	sp, #12
     caa:	af00      	add	r7, sp, #0
     cac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	695b      	ldr	r3, [r3, #20]
     cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cba:	bf00      	nop
     cbc:	370c      	adds	r7, #12
     cbe:	46bd      	mov	sp, r7
     cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cc4:	4770      	bx	lr

00000cc6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     cc6:	b480      	push	{r7}
     cc8:	b083      	sub	sp, #12
     cca:	af00      	add	r7, sp, #0
     ccc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	695b      	ldr	r3, [r3, #20]
     cd2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cda:	bf00      	nop
     cdc:	370c      	adds	r7, #12
     cde:	46bd      	mov	sp, r7
     ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce4:	4770      	bx	lr

00000ce6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     ce6:	b480      	push	{r7}
     ce8:	b083      	sub	sp, #12
     cea:	af00      	add	r7, sp, #0
     cec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	695b      	ldr	r3, [r3, #20]
     cf2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cfa:	bf00      	nop
     cfc:	370c      	adds	r7, #12
     cfe:	46bd      	mov	sp, r7
     d00:	f85d 7b04 	ldr.w	r7, [sp], #4
     d04:	4770      	bx	lr

00000d06 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     d06:	b480      	push	{r7}
     d08:	b083      	sub	sp, #12
     d0a:	af00      	add	r7, sp, #0
     d0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	695b      	ldr	r3, [r3, #20]
     d12:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d1a:	bf00      	nop
     d1c:	370c      	adds	r7, #12
     d1e:	46bd      	mov	sp, r7
     d20:	f85d 7b04 	ldr.w	r7, [sp], #4
     d24:	4770      	bx	lr

00000d26 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     d26:	b480      	push	{r7}
     d28:	b083      	sub	sp, #12
     d2a:	af00      	add	r7, sp, #0
     d2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     d2e:	687b      	ldr	r3, [r7, #4]
     d30:	699b      	ldr	r3, [r3, #24]
     d32:	f043 0201 	orr.w	r2, r3, #1
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d3a:	bf00      	nop
     d3c:	370c      	adds	r7, #12
     d3e:	46bd      	mov	sp, r7
     d40:	f85d 7b04 	ldr.w	r7, [sp], #4
     d44:	4770      	bx	lr

00000d46 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     d46:	b480      	push	{r7}
     d48:	b083      	sub	sp, #12
     d4a:	af00      	add	r7, sp, #0
     d4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	699b      	ldr	r3, [r3, #24]
     d52:	f043 0202 	orr.w	r2, r3, #2
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d5a:	bf00      	nop
     d5c:	370c      	adds	r7, #12
     d5e:	46bd      	mov	sp, r7
     d60:	f85d 7b04 	ldr.w	r7, [sp], #4
     d64:	4770      	bx	lr

00000d66 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     d66:	b480      	push	{r7}
     d68:	b083      	sub	sp, #12
     d6a:	af00      	add	r7, sp, #0
     d6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	699b      	ldr	r3, [r3, #24]
     d72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d7a:	bf00      	nop
     d7c:	370c      	adds	r7, #12
     d7e:	46bd      	mov	sp, r7
     d80:	f85d 7b04 	ldr.w	r7, [sp], #4
     d84:	4770      	bx	lr

00000d86 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     d86:	b480      	push	{r7}
     d88:	b083      	sub	sp, #12
     d8a:	af00      	add	r7, sp, #0
     d8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	699b      	ldr	r3, [r3, #24]
     d92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d9a:	bf00      	nop
     d9c:	370c      	adds	r7, #12
     d9e:	46bd      	mov	sp, r7
     da0:	f85d 7b04 	ldr.w	r7, [sp], #4
     da4:	4770      	bx	lr

00000da6 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     da6:	b480      	push	{r7}
     da8:	b083      	sub	sp, #12
     daa:	af00      	add	r7, sp, #0
     dac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	699b      	ldr	r3, [r3, #24]
     db2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dba:	bf00      	nop
     dbc:	370c      	adds	r7, #12
     dbe:	46bd      	mov	sp, r7
     dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     dc4:	4770      	bx	lr

00000dc6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     dc6:	b480      	push	{r7}
     dc8:	b083      	sub	sp, #12
     dca:	af00      	add	r7, sp, #0
     dcc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	699b      	ldr	r3, [r3, #24]
     dd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dda:	bf00      	nop
     ddc:	370c      	adds	r7, #12
     dde:	46bd      	mov	sp, r7
     de0:	f85d 7b04 	ldr.w	r7, [sp], #4
     de4:	4770      	bx	lr

00000de6 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     de6:	b480      	push	{r7}
     de8:	b083      	sub	sp, #12
     dea:	af00      	add	r7, sp, #0
     dec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	69db      	ldr	r3, [r3, #28]
     df2:	f043 0208 	orr.w	r2, r3, #8
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dfa:	bf00      	nop
     dfc:	370c      	adds	r7, #12
     dfe:	46bd      	mov	sp, r7
     e00:	f85d 7b04 	ldr.w	r7, [sp], #4
     e04:	4770      	bx	lr

00000e06 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     e06:	b480      	push	{r7}
     e08:	b083      	sub	sp, #12
     e0a:	af00      	add	r7, sp, #0
     e0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	69db      	ldr	r3, [r3, #28]
     e12:	f043 0220 	orr.w	r2, r3, #32
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e1a:	bf00      	nop
     e1c:	370c      	adds	r7, #12
     e1e:	46bd      	mov	sp, r7
     e20:	f85d 7b04 	ldr.w	r7, [sp], #4
     e24:	4770      	bx	lr

00000e26 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     e26:	b480      	push	{r7}
     e28:	b083      	sub	sp, #12
     e2a:	af00      	add	r7, sp, #0
     e2c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	69db      	ldr	r3, [r3, #28]
     e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e3a:	bf00      	nop
     e3c:	370c      	adds	r7, #12
     e3e:	46bd      	mov	sp, r7
     e40:	f85d 7b04 	ldr.w	r7, [sp], #4
     e44:	4770      	bx	lr

00000e46 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     e46:	b480      	push	{r7}
     e48:	b083      	sub	sp, #12
     e4a:	af00      	add	r7, sp, #0
     e4c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	69db      	ldr	r3, [r3, #28]
     e52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e5a:	bf00      	nop
     e5c:	370c      	adds	r7, #12
     e5e:	46bd      	mov	sp, r7
     e60:	f85d 7b04 	ldr.w	r7, [sp], #4
     e64:	4770      	bx	lr

00000e66 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     e66:	b480      	push	{r7}
     e68:	b083      	sub	sp, #12
     e6a:	af00      	add	r7, sp, #0
     e6c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	6a1b      	ldr	r3, [r3, #32]
     e72:	f043 0201 	orr.w	r2, r3, #1
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e7a:	bf00      	nop
     e7c:	370c      	adds	r7, #12
     e7e:	46bd      	mov	sp, r7
     e80:	f85d 7b04 	ldr.w	r7, [sp], #4
     e84:	4770      	bx	lr

00000e86 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     e86:	b480      	push	{r7}
     e88:	b083      	sub	sp, #12
     e8a:	af00      	add	r7, sp, #0
     e8c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	6a1b      	ldr	r3, [r3, #32]
     e92:	f043 0202 	orr.w	r2, r3, #2
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e9a:	bf00      	nop
     e9c:	370c      	adds	r7, #12
     e9e:	46bd      	mov	sp, r7
     ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea4:	4770      	bx	lr

00000ea6 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     ea6:	b480      	push	{r7}
     ea8:	b083      	sub	sp, #12
     eaa:	af00      	add	r7, sp, #0
     eac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	6a1b      	ldr	r3, [r3, #32]
     eb2:	f043 0204 	orr.w	r2, r3, #4
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eba:	bf00      	nop
     ebc:	370c      	adds	r7, #12
     ebe:	46bd      	mov	sp, r7
     ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec4:	4770      	bx	lr

00000ec6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     ec6:	b480      	push	{r7}
     ec8:	b083      	sub	sp, #12
     eca:	af00      	add	r7, sp, #0
     ecc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	6a1b      	ldr	r3, [r3, #32]
     ed2:	f043 0208 	orr.w	r2, r3, #8
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eda:	bf00      	nop
     edc:	370c      	adds	r7, #12
     ede:	46bd      	mov	sp, r7
     ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ee4:	4770      	bx	lr

00000ee6 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     ee6:	b480      	push	{r7}
     ee8:	b083      	sub	sp, #12
     eea:	af00      	add	r7, sp, #0
     eec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	6a1b      	ldr	r3, [r3, #32]
     ef2:	f043 0220 	orr.w	r2, r3, #32
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     efa:	bf00      	nop
     efc:	370c      	adds	r7, #12
     efe:	46bd      	mov	sp, r7
     f00:	f85d 7b04 	ldr.w	r7, [sp], #4
     f04:	4770      	bx	lr

00000f06 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     f06:	b480      	push	{r7}
     f08:	b083      	sub	sp, #12
     f0a:	af00      	add	r7, sp, #0
     f0c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	6a1b      	ldr	r3, [r3, #32]
     f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f1a:	bf00      	nop
     f1c:	370c      	adds	r7, #12
     f1e:	46bd      	mov	sp, r7
     f20:	f85d 7b04 	ldr.w	r7, [sp], #4
     f24:	4770      	bx	lr

00000f26 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f26:	b480      	push	{r7}
     f28:	b085      	sub	sp, #20
     f2a:	af00      	add	r7, sp, #0
     f2c:	60f8      	str	r0, [r7, #12]
     f2e:	460b      	mov	r3, r1
     f30:	607a      	str	r2, [r7, #4]
     f32:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f34:	7afb      	ldrb	r3, [r7, #11]
     f36:	68fa      	ldr	r2, [r7, #12]
     f38:	01db      	lsls	r3, r3, #7
     f3a:	4413      	add	r3, r2
     f3c:	3308      	adds	r3, #8
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	601a      	str	r2, [r3, #0]
}
     f42:	bf00      	nop
     f44:	3714      	adds	r7, #20
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr

00000f4e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f4e:	b480      	push	{r7}
     f50:	b085      	sub	sp, #20
     f52:	af00      	add	r7, sp, #0
     f54:	60f8      	str	r0, [r7, #12]
     f56:	460b      	mov	r3, r1
     f58:	607a      	str	r2, [r7, #4]
     f5a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f5c:	7afb      	ldrb	r3, [r7, #11]
     f5e:	68fa      	ldr	r2, [r7, #12]
     f60:	01db      	lsls	r3, r3, #7
     f62:	4413      	add	r3, r2
     f64:	3304      	adds	r3, #4
     f66:	687a      	ldr	r2, [r7, #4]
     f68:	601a      	str	r2, [r3, #0]
}
     f6a:	bf00      	nop
     f6c:	3714      	adds	r7, #20
     f6e:	46bd      	mov	sp, r7
     f70:	f85d 7b04 	ldr.w	r7, [sp], #4
     f74:	4770      	bx	lr

00000f76 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f76:	b480      	push	{r7}
     f78:	b085      	sub	sp, #20
     f7a:	af00      	add	r7, sp, #0
     f7c:	60f8      	str	r0, [r7, #12]
     f7e:	460b      	mov	r3, r1
     f80:	607a      	str	r2, [r7, #4]
     f82:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f84:	7afb      	ldrb	r3, [r7, #11]
     f86:	68fa      	ldr	r2, [r7, #12]
     f88:	01db      	lsls	r3, r3, #7
     f8a:	4413      	add	r3, r2
     f8c:	3318      	adds	r3, #24
     f8e:	687a      	ldr	r2, [r7, #4]
     f90:	601a      	str	r2, [r3, #0]
}
     f92:	bf00      	nop
     f94:	3714      	adds	r7, #20
     f96:	46bd      	mov	sp, r7
     f98:	f85d 7b04 	ldr.w	r7, [sp], #4
     f9c:	4770      	bx	lr

00000f9e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f9e:	b480      	push	{r7}
     fa0:	b085      	sub	sp, #20
     fa2:	af00      	add	r7, sp, #0
     fa4:	60f8      	str	r0, [r7, #12]
     fa6:	460b      	mov	r3, r1
     fa8:	607a      	str	r2, [r7, #4]
     faa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fac:	7afb      	ldrb	r3, [r7, #11]
     fae:	68fa      	ldr	r2, [r7, #12]
     fb0:	01db      	lsls	r3, r3, #7
     fb2:	4413      	add	r3, r2
     fb4:	3314      	adds	r3, #20
     fb6:	687a      	ldr	r2, [r7, #4]
     fb8:	601a      	str	r2, [r3, #0]
}
     fba:	bf00      	nop
     fbc:	3714      	adds	r7, #20
     fbe:	46bd      	mov	sp, r7
     fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fc4:	4770      	bx	lr

00000fc6 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     fc6:	b480      	push	{r7}
     fc8:	b085      	sub	sp, #20
     fca:	af00      	add	r7, sp, #0
     fcc:	6078      	str	r0, [r7, #4]
     fce:	4608      	mov	r0, r1
     fd0:	4611      	mov	r1, r2
     fd2:	461a      	mov	r2, r3
     fd4:	4603      	mov	r3, r0
     fd6:	70fb      	strb	r3, [r7, #3]
     fd8:	460b      	mov	r3, r1
     fda:	70bb      	strb	r3, [r7, #2]
     fdc:	4613      	mov	r3, r2
     fde:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fe0:	78fa      	ldrb	r2, [r7, #3]
     fe2:	78bb      	ldrb	r3, [r7, #2]
     fe4:	6879      	ldr	r1, [r7, #4]
     fe6:	01d2      	lsls	r2, r2, #7
     fe8:	440a      	add	r2, r1
     fea:	4413      	add	r3, r2
     fec:	3330      	adds	r3, #48	; 0x30
     fee:	781b      	ldrb	r3, [r3, #0]
     ff0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ff2:	7bfb      	ldrb	r3, [r7, #15]
     ff4:	f023 030f 	bic.w	r3, r3, #15
     ff8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     ffa:	787b      	ldrb	r3, [r7, #1]
     ffc:	f003 030f 	and.w	r3, r3, #15
    1000:	b2da      	uxtb	r2, r3
    1002:	7bfb      	ldrb	r3, [r7, #15]
    1004:	4313      	orrs	r3, r2
    1006:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1008:	78fa      	ldrb	r2, [r7, #3]
    100a:	78bb      	ldrb	r3, [r7, #2]
    100c:	6879      	ldr	r1, [r7, #4]
    100e:	01d2      	lsls	r2, r2, #7
    1010:	440a      	add	r2, r1
    1012:	4413      	add	r3, r2
    1014:	3330      	adds	r3, #48	; 0x30
    1016:	7bfa      	ldrb	r2, [r7, #15]
    1018:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    101a:	bf00      	nop
    101c:	3714      	adds	r7, #20
    101e:	46bd      	mov	sp, r7
    1020:	f85d 7b04 	ldr.w	r7, [sp], #4
    1024:	4770      	bx	lr

00001026 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1026:	b480      	push	{r7}
    1028:	b085      	sub	sp, #20
    102a:	af00      	add	r7, sp, #0
    102c:	6078      	str	r0, [r7, #4]
    102e:	4608      	mov	r0, r1
    1030:	4611      	mov	r1, r2
    1032:	461a      	mov	r2, r3
    1034:	4603      	mov	r3, r0
    1036:	70fb      	strb	r3, [r7, #3]
    1038:	460b      	mov	r3, r1
    103a:	70bb      	strb	r3, [r7, #2]
    103c:	4613      	mov	r3, r2
    103e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1040:	78fa      	ldrb	r2, [r7, #3]
    1042:	78bb      	ldrb	r3, [r7, #2]
    1044:	6879      	ldr	r1, [r7, #4]
    1046:	01d2      	lsls	r2, r2, #7
    1048:	440a      	add	r2, r1
    104a:	4413      	add	r3, r2
    104c:	3330      	adds	r3, #48	; 0x30
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1052:	7bfb      	ldrb	r3, [r7, #15]
    1054:	f003 030f 	and.w	r3, r3, #15
    1058:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    105a:	787b      	ldrb	r3, [r7, #1]
    105c:	011b      	lsls	r3, r3, #4
    105e:	b2da      	uxtb	r2, r3
    1060:	7bfb      	ldrb	r3, [r7, #15]
    1062:	4313      	orrs	r3, r2
    1064:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1066:	78fa      	ldrb	r2, [r7, #3]
    1068:	78bb      	ldrb	r3, [r7, #2]
    106a:	6879      	ldr	r1, [r7, #4]
    106c:	01d2      	lsls	r2, r2, #7
    106e:	440a      	add	r2, r1
    1070:	4413      	add	r3, r2
    1072:	3330      	adds	r3, #48	; 0x30
    1074:	7bfa      	ldrb	r2, [r7, #15]
    1076:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1078:	bf00      	nop
    107a:	3714      	adds	r7, #20
    107c:	46bd      	mov	sp, r7
    107e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1082:	4770      	bx	lr

00001084 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1084:	b480      	push	{r7}
    1086:	b085      	sub	sp, #20
    1088:	af00      	add	r7, sp, #0
    108a:	6078      	str	r0, [r7, #4]
    108c:	4608      	mov	r0, r1
    108e:	4611      	mov	r1, r2
    1090:	461a      	mov	r2, r3
    1092:	4603      	mov	r3, r0
    1094:	70fb      	strb	r3, [r7, #3]
    1096:	460b      	mov	r3, r1
    1098:	70bb      	strb	r3, [r7, #2]
    109a:	4613      	mov	r3, r2
    109c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    109e:	78fa      	ldrb	r2, [r7, #3]
    10a0:	78bb      	ldrb	r3, [r7, #2]
    10a2:	6879      	ldr	r1, [r7, #4]
    10a4:	01d2      	lsls	r2, r2, #7
    10a6:	440a      	add	r2, r1
    10a8:	4413      	add	r3, r2
    10aa:	3340      	adds	r3, #64	; 0x40
    10ac:	781b      	ldrb	r3, [r3, #0]
    10ae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10b0:	7bfb      	ldrb	r3, [r7, #15]
    10b2:	f023 0301 	bic.w	r3, r3, #1
    10b6:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10b8:	787a      	ldrb	r2, [r7, #1]
    10ba:	7bfb      	ldrb	r3, [r7, #15]
    10bc:	4313      	orrs	r3, r2
    10be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c0:	78fa      	ldrb	r2, [r7, #3]
    10c2:	78bb      	ldrb	r3, [r7, #2]
    10c4:	6879      	ldr	r1, [r7, #4]
    10c6:	01d2      	lsls	r2, r2, #7
    10c8:	440a      	add	r2, r1
    10ca:	4413      	add	r3, r2
    10cc:	3340      	adds	r3, #64	; 0x40
    10ce:	7bfa      	ldrb	r2, [r7, #15]
    10d0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10d2:	bf00      	nop
    10d4:	3714      	adds	r7, #20
    10d6:	46bd      	mov	sp, r7
    10d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10dc:	4770      	bx	lr

000010de <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    10de:	b490      	push	{r4, r7}
    10e0:	b082      	sub	sp, #8
    10e2:	af00      	add	r7, sp, #0
    10e4:	6078      	str	r0, [r7, #4]
    10e6:	460b      	mov	r3, r1
    10e8:	70fb      	strb	r3, [r7, #3]
    10ea:	4613      	mov	r3, r2
    10ec:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    10ee:	78fa      	ldrb	r2, [r7, #3]
    10f0:	78bb      	ldrb	r3, [r7, #2]
    10f2:	78f8      	ldrb	r0, [r7, #3]
    10f4:	78b9      	ldrb	r1, [r7, #2]
    10f6:	687c      	ldr	r4, [r7, #4]
    10f8:	01c0      	lsls	r0, r0, #7
    10fa:	4420      	add	r0, r4
    10fc:	4401      	add	r1, r0
    10fe:	3140      	adds	r1, #64	; 0x40
    1100:	7809      	ldrb	r1, [r1, #0]
    1102:	b2c9      	uxtb	r1, r1
    1104:	f041 0104 	orr.w	r1, r1, #4
    1108:	b2c8      	uxtb	r0, r1
    110a:	6879      	ldr	r1, [r7, #4]
    110c:	01d2      	lsls	r2, r2, #7
    110e:	440a      	add	r2, r1
    1110:	4413      	add	r3, r2
    1112:	3340      	adds	r3, #64	; 0x40
    1114:	4602      	mov	r2, r0
    1116:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1118:	bf00      	nop
    111a:	3708      	adds	r7, #8
    111c:	46bd      	mov	sp, r7
    111e:	bc90      	pop	{r4, r7}
    1120:	4770      	bx	lr

00001122 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1122:	b490      	push	{r4, r7}
    1124:	b082      	sub	sp, #8
    1126:	af00      	add	r7, sp, #0
    1128:	6078      	str	r0, [r7, #4]
    112a:	460b      	mov	r3, r1
    112c:	70fb      	strb	r3, [r7, #3]
    112e:	4613      	mov	r3, r2
    1130:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1132:	78fa      	ldrb	r2, [r7, #3]
    1134:	78bb      	ldrb	r3, [r7, #2]
    1136:	78f8      	ldrb	r0, [r7, #3]
    1138:	78b9      	ldrb	r1, [r7, #2]
    113a:	687c      	ldr	r4, [r7, #4]
    113c:	01c0      	lsls	r0, r0, #7
    113e:	4420      	add	r0, r4
    1140:	4401      	add	r1, r0
    1142:	3140      	adds	r1, #64	; 0x40
    1144:	7809      	ldrb	r1, [r1, #0]
    1146:	b2c9      	uxtb	r1, r1
    1148:	f021 0104 	bic.w	r1, r1, #4
    114c:	b2c8      	uxtb	r0, r1
    114e:	6879      	ldr	r1, [r7, #4]
    1150:	01d2      	lsls	r2, r2, #7
    1152:	440a      	add	r2, r1
    1154:	4413      	add	r3, r2
    1156:	3340      	adds	r3, #64	; 0x40
    1158:	4602      	mov	r2, r0
    115a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    115c:	bf00      	nop
    115e:	3708      	adds	r7, #8
    1160:	46bd      	mov	sp, r7
    1162:	bc90      	pop	{r4, r7}
    1164:	4770      	bx	lr

00001166 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1166:	b480      	push	{r7}
    1168:	b085      	sub	sp, #20
    116a:	af00      	add	r7, sp, #0
    116c:	60f8      	str	r0, [r7, #12]
    116e:	460b      	mov	r3, r1
    1170:	607a      	str	r2, [r7, #4]
    1172:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1174:	7afb      	ldrb	r3, [r7, #11]
    1176:	68fa      	ldr	r2, [r7, #12]
    1178:	01db      	lsls	r3, r3, #7
    117a:	4413      	add	r3, r2
    117c:	3328      	adds	r3, #40	; 0x28
    117e:	687a      	ldr	r2, [r7, #4]
    1180:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1182:	bf00      	nop
    1184:	3714      	adds	r7, #20
    1186:	46bd      	mov	sp, r7
    1188:	f85d 7b04 	ldr.w	r7, [sp], #4
    118c:	4770      	bx	lr
	...

00001190 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1190:	b580      	push	{r7, lr}
    1192:	b082      	sub	sp, #8
    1194:	af00      	add	r7, sp, #0
    1196:	4603      	mov	r3, r0
    1198:	6039      	str	r1, [r7, #0]
    119a:	71fb      	strb	r3, [r7, #7]
    119c:	4613      	mov	r3, r2
    119e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    11a0:	79bb      	ldrb	r3, [r7, #6]
    11a2:	2b01      	cmp	r3, #1
    11a4:	d01c      	beq.n	11e0 <_gpio_set_direction+0x50>
    11a6:	2b02      	cmp	r3, #2
    11a8:	d037      	beq.n	121a <_gpio_set_direction+0x8a>
    11aa:	2b00      	cmp	r3, #0
    11ac:	d14e      	bne.n	124c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    11ae:	79fb      	ldrb	r3, [r7, #7]
    11b0:	683a      	ldr	r2, [r7, #0]
    11b2:	4619      	mov	r1, r3
    11b4:	482a      	ldr	r0, [pc, #168]	; (1260 <_gpio_set_direction+0xd0>)
    11b6:	4b2b      	ldr	r3, [pc, #172]	; (1264 <_gpio_set_direction+0xd4>)
    11b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    11ba:	683b      	ldr	r3, [r7, #0]
    11bc:	b29b      	uxth	r3, r3
    11be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    11c2:	79fb      	ldrb	r3, [r7, #7]
    11c4:	4619      	mov	r1, r3
    11c6:	4826      	ldr	r0, [pc, #152]	; (1260 <_gpio_set_direction+0xd0>)
    11c8:	4b27      	ldr	r3, [pc, #156]	; (1268 <_gpio_set_direction+0xd8>)
    11ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    11cc:	683b      	ldr	r3, [r7, #0]
    11ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    11d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    11d4:	79fb      	ldrb	r3, [r7, #7]
    11d6:	4619      	mov	r1, r3
    11d8:	4821      	ldr	r0, [pc, #132]	; (1260 <_gpio_set_direction+0xd0>)
    11da:	4b23      	ldr	r3, [pc, #140]	; (1268 <_gpio_set_direction+0xd8>)
    11dc:	4798      	blx	r3
		break;
    11de:	e03a      	b.n	1256 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    11e0:	79fb      	ldrb	r3, [r7, #7]
    11e2:	683a      	ldr	r2, [r7, #0]
    11e4:	4619      	mov	r1, r3
    11e6:	481e      	ldr	r0, [pc, #120]	; (1260 <_gpio_set_direction+0xd0>)
    11e8:	4b1e      	ldr	r3, [pc, #120]	; (1264 <_gpio_set_direction+0xd4>)
    11ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    11ec:	683b      	ldr	r3, [r7, #0]
    11ee:	b29b      	uxth	r3, r3
    11f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    11f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11f8:	79f9      	ldrb	r1, [r7, #7]
    11fa:	461a      	mov	r2, r3
    11fc:	4818      	ldr	r0, [pc, #96]	; (1260 <_gpio_set_direction+0xd0>)
    11fe:	4b1a      	ldr	r3, [pc, #104]	; (1268 <_gpio_set_direction+0xd8>)
    1200:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1202:	683b      	ldr	r3, [r7, #0]
    1204:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1206:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    120e:	79f9      	ldrb	r1, [r7, #7]
    1210:	461a      	mov	r2, r3
    1212:	4813      	ldr	r0, [pc, #76]	; (1260 <_gpio_set_direction+0xd0>)
    1214:	4b14      	ldr	r3, [pc, #80]	; (1268 <_gpio_set_direction+0xd8>)
    1216:	4798      	blx	r3
		break;
    1218:	e01d      	b.n	1256 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    121a:	79fb      	ldrb	r3, [r7, #7]
    121c:	683a      	ldr	r2, [r7, #0]
    121e:	4619      	mov	r1, r3
    1220:	480f      	ldr	r0, [pc, #60]	; (1260 <_gpio_set_direction+0xd0>)
    1222:	4b12      	ldr	r3, [pc, #72]	; (126c <_gpio_set_direction+0xdc>)
    1224:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1226:	683b      	ldr	r3, [r7, #0]
    1228:	b29b      	uxth	r3, r3
    122a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    122e:	79fb      	ldrb	r3, [r7, #7]
    1230:	4619      	mov	r1, r3
    1232:	480b      	ldr	r0, [pc, #44]	; (1260 <_gpio_set_direction+0xd0>)
    1234:	4b0c      	ldr	r3, [pc, #48]	; (1268 <_gpio_set_direction+0xd8>)
    1236:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1238:	683b      	ldr	r3, [r7, #0]
    123a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    123c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1240:	79fb      	ldrb	r3, [r7, #7]
    1242:	4619      	mov	r1, r3
    1244:	4806      	ldr	r0, [pc, #24]	; (1260 <_gpio_set_direction+0xd0>)
    1246:	4b08      	ldr	r3, [pc, #32]	; (1268 <_gpio_set_direction+0xd8>)
    1248:	4798      	blx	r3
		break;
    124a:	e004      	b.n	1256 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    124c:	2246      	movs	r2, #70	; 0x46
    124e:	4908      	ldr	r1, [pc, #32]	; (1270 <_gpio_set_direction+0xe0>)
    1250:	2000      	movs	r0, #0
    1252:	4b08      	ldr	r3, [pc, #32]	; (1274 <_gpio_set_direction+0xe4>)
    1254:	4798      	blx	r3
	}
}
    1256:	bf00      	nop
    1258:	3708      	adds	r7, #8
    125a:	46bd      	mov	sp, r7
    125c:	bd80      	pop	{r7, pc}
    125e:	bf00      	nop
    1260:	41008000 	.word	0x41008000
    1264:	00000f4f 	.word	0x00000f4f
    1268:	00001167 	.word	0x00001167
    126c:	00000f27 	.word	0x00000f27
    1270:	0000efec 	.word	0x0000efec
    1274:	0000397d 	.word	0x0000397d

00001278 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1278:	b580      	push	{r7, lr}
    127a:	b082      	sub	sp, #8
    127c:	af00      	add	r7, sp, #0
    127e:	4603      	mov	r3, r0
    1280:	6039      	str	r1, [r7, #0]
    1282:	71fb      	strb	r3, [r7, #7]
    1284:	4613      	mov	r3, r2
    1286:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1288:	79bb      	ldrb	r3, [r7, #6]
    128a:	2b00      	cmp	r3, #0
    128c:	d006      	beq.n	129c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    128e:	79fb      	ldrb	r3, [r7, #7]
    1290:	683a      	ldr	r2, [r7, #0]
    1292:	4619      	mov	r1, r3
    1294:	4806      	ldr	r0, [pc, #24]	; (12b0 <_gpio_set_level+0x38>)
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <_gpio_set_level+0x3c>)
    1298:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    129a:	e005      	b.n	12a8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    129c:	79fb      	ldrb	r3, [r7, #7]
    129e:	683a      	ldr	r2, [r7, #0]
    12a0:	4619      	mov	r1, r3
    12a2:	4803      	ldr	r0, [pc, #12]	; (12b0 <_gpio_set_level+0x38>)
    12a4:	4b04      	ldr	r3, [pc, #16]	; (12b8 <_gpio_set_level+0x40>)
    12a6:	4798      	blx	r3
}
    12a8:	bf00      	nop
    12aa:	3708      	adds	r7, #8
    12ac:	46bd      	mov	sp, r7
    12ae:	bd80      	pop	{r7, pc}
    12b0:	41008000 	.word	0x41008000
    12b4:	00000f77 	.word	0x00000f77
    12b8:	00000f9f 	.word	0x00000f9f

000012bc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	4603      	mov	r3, r0
    12c4:	71fb      	strb	r3, [r7, #7]
    12c6:	460b      	mov	r3, r1
    12c8:	71bb      	strb	r3, [r7, #6]
    12ca:	4613      	mov	r3, r2
    12cc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    12ce:	797b      	ldrb	r3, [r7, #5]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d00a      	beq.n	12ea <_gpio_set_pin_pull_mode+0x2e>
    12d4:	2b02      	cmp	r3, #2
    12d6:	d01f      	beq.n	1318 <_gpio_set_pin_pull_mode+0x5c>
    12d8:	2b00      	cmp	r3, #0
    12da:	d134      	bne.n	1346 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    12dc:	79ba      	ldrb	r2, [r7, #6]
    12de:	79fb      	ldrb	r3, [r7, #7]
    12e0:	4619      	mov	r1, r3
    12e2:	481e      	ldr	r0, [pc, #120]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    12e4:	4b1e      	ldr	r3, [pc, #120]	; (1360 <_gpio_set_pin_pull_mode+0xa4>)
    12e6:	4798      	blx	r3
		break;
    12e8:	e033      	b.n	1352 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    12ea:	79bb      	ldrb	r3, [r7, #6]
    12ec:	2201      	movs	r2, #1
    12ee:	409a      	lsls	r2, r3
    12f0:	79fb      	ldrb	r3, [r7, #7]
    12f2:	4619      	mov	r1, r3
    12f4:	4819      	ldr	r0, [pc, #100]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    12f6:	4b1b      	ldr	r3, [pc, #108]	; (1364 <_gpio_set_pin_pull_mode+0xa8>)
    12f8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    12fa:	79ba      	ldrb	r2, [r7, #6]
    12fc:	79fb      	ldrb	r3, [r7, #7]
    12fe:	4619      	mov	r1, r3
    1300:	4816      	ldr	r0, [pc, #88]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    1302:	4b19      	ldr	r3, [pc, #100]	; (1368 <_gpio_set_pin_pull_mode+0xac>)
    1304:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1306:	79bb      	ldrb	r3, [r7, #6]
    1308:	2201      	movs	r2, #1
    130a:	409a      	lsls	r2, r3
    130c:	79fb      	ldrb	r3, [r7, #7]
    130e:	4619      	mov	r1, r3
    1310:	4812      	ldr	r0, [pc, #72]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    1312:	4b16      	ldr	r3, [pc, #88]	; (136c <_gpio_set_pin_pull_mode+0xb0>)
    1314:	4798      	blx	r3
		break;
    1316:	e01c      	b.n	1352 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1318:	79bb      	ldrb	r3, [r7, #6]
    131a:	2201      	movs	r2, #1
    131c:	409a      	lsls	r2, r3
    131e:	79fb      	ldrb	r3, [r7, #7]
    1320:	4619      	mov	r1, r3
    1322:	480e      	ldr	r0, [pc, #56]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    1324:	4b0f      	ldr	r3, [pc, #60]	; (1364 <_gpio_set_pin_pull_mode+0xa8>)
    1326:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1328:	79ba      	ldrb	r2, [r7, #6]
    132a:	79fb      	ldrb	r3, [r7, #7]
    132c:	4619      	mov	r1, r3
    132e:	480b      	ldr	r0, [pc, #44]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    1330:	4b0d      	ldr	r3, [pc, #52]	; (1368 <_gpio_set_pin_pull_mode+0xac>)
    1332:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1334:	79bb      	ldrb	r3, [r7, #6]
    1336:	2201      	movs	r2, #1
    1338:	409a      	lsls	r2, r3
    133a:	79fb      	ldrb	r3, [r7, #7]
    133c:	4619      	mov	r1, r3
    133e:	4807      	ldr	r0, [pc, #28]	; (135c <_gpio_set_pin_pull_mode+0xa0>)
    1340:	4b0b      	ldr	r3, [pc, #44]	; (1370 <_gpio_set_pin_pull_mode+0xb4>)
    1342:	4798      	blx	r3
		break;
    1344:	e005      	b.n	1352 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1346:	2289      	movs	r2, #137	; 0x89
    1348:	490a      	ldr	r1, [pc, #40]	; (1374 <_gpio_set_pin_pull_mode+0xb8>)
    134a:	2000      	movs	r0, #0
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <_gpio_set_pin_pull_mode+0xbc>)
    134e:	4798      	blx	r3
		break;
    1350:	bf00      	nop
	}
}
    1352:	bf00      	nop
    1354:	3708      	adds	r7, #8
    1356:	46bd      	mov	sp, r7
    1358:	bd80      	pop	{r7, pc}
    135a:	bf00      	nop
    135c:	41008000 	.word	0x41008000
    1360:	00001123 	.word	0x00001123
    1364:	00000f4f 	.word	0x00000f4f
    1368:	000010df 	.word	0x000010df
    136c:	00000f77 	.word	0x00000f77
    1370:	00000f9f 	.word	0x00000f9f
    1374:	0000efec 	.word	0x0000efec
    1378:	0000397d 	.word	0x0000397d

0000137c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    137c:	b590      	push	{r4, r7, lr}
    137e:	b085      	sub	sp, #20
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
    1384:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	095b      	lsrs	r3, r3, #5
    138a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	b2db      	uxtb	r3, r3
    1390:	f003 031f 	and.w	r3, r3, #31
    1394:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1396:	683b      	ldr	r3, [r7, #0]
    1398:	f1b3 3fff 	cmp.w	r3, #4294967295
    139c:	d106      	bne.n	13ac <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    139e:	7bba      	ldrb	r2, [r7, #14]
    13a0:	7bf9      	ldrb	r1, [r7, #15]
    13a2:	2300      	movs	r3, #0
    13a4:	4812      	ldr	r0, [pc, #72]	; (13f0 <_gpio_set_pin_function+0x74>)
    13a6:	4c13      	ldr	r4, [pc, #76]	; (13f4 <_gpio_set_pin_function+0x78>)
    13a8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    13aa:	e01d      	b.n	13e8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    13ac:	7bba      	ldrb	r2, [r7, #14]
    13ae:	7bf9      	ldrb	r1, [r7, #15]
    13b0:	2301      	movs	r3, #1
    13b2:	480f      	ldr	r0, [pc, #60]	; (13f0 <_gpio_set_pin_function+0x74>)
    13b4:	4c0f      	ldr	r4, [pc, #60]	; (13f4 <_gpio_set_pin_function+0x78>)
    13b6:	47a0      	blx	r4
		if (pin & 1) {
    13b8:	7bbb      	ldrb	r3, [r7, #14]
    13ba:	f003 0301 	and.w	r3, r3, #1
    13be:	2b00      	cmp	r3, #0
    13c0:	d009      	beq.n	13d6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    13c2:	7bbb      	ldrb	r3, [r7, #14]
    13c4:	085b      	lsrs	r3, r3, #1
    13c6:	b2da      	uxtb	r2, r3
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	b2db      	uxtb	r3, r3
    13cc:	7bf9      	ldrb	r1, [r7, #15]
    13ce:	4808      	ldr	r0, [pc, #32]	; (13f0 <_gpio_set_pin_function+0x74>)
    13d0:	4c09      	ldr	r4, [pc, #36]	; (13f8 <_gpio_set_pin_function+0x7c>)
    13d2:	47a0      	blx	r4
}
    13d4:	e008      	b.n	13e8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    13d6:	7bbb      	ldrb	r3, [r7, #14]
    13d8:	085b      	lsrs	r3, r3, #1
    13da:	b2da      	uxtb	r2, r3
    13dc:	683b      	ldr	r3, [r7, #0]
    13de:	b2db      	uxtb	r3, r3
    13e0:	7bf9      	ldrb	r1, [r7, #15]
    13e2:	4803      	ldr	r0, [pc, #12]	; (13f0 <_gpio_set_pin_function+0x74>)
    13e4:	4c05      	ldr	r4, [pc, #20]	; (13fc <_gpio_set_pin_function+0x80>)
    13e6:	47a0      	blx	r4
}
    13e8:	bf00      	nop
    13ea:	3714      	adds	r7, #20
    13ec:	46bd      	mov	sp, r7
    13ee:	bd90      	pop	{r4, r7, pc}
    13f0:	41008000 	.word	0x41008000
    13f4:	00001085 	.word	0x00001085
    13f8:	00001027 	.word	0x00001027
    13fc:	00000fc7 	.word	0x00000fc7

00001400 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1400:	b580      	push	{r7, lr}
    1402:	b082      	sub	sp, #8
    1404:	af00      	add	r7, sp, #0
    1406:	4603      	mov	r3, r0
    1408:	460a      	mov	r2, r1
    140a:	71fb      	strb	r3, [r7, #7]
    140c:	4613      	mov	r3, r2
    140e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1410:	79fb      	ldrb	r3, [r7, #7]
    1412:	095b      	lsrs	r3, r3, #5
    1414:	b2d8      	uxtb	r0, r3
    1416:	79fb      	ldrb	r3, [r7, #7]
    1418:	f003 031f 	and.w	r3, r3, #31
    141c:	b2db      	uxtb	r3, r3
    141e:	79ba      	ldrb	r2, [r7, #6]
    1420:	4619      	mov	r1, r3
    1422:	4b03      	ldr	r3, [pc, #12]	; (1430 <gpio_set_pin_pull_mode+0x30>)
    1424:	4798      	blx	r3
}
    1426:	bf00      	nop
    1428:	3708      	adds	r7, #8
    142a:	46bd      	mov	sp, r7
    142c:	bd80      	pop	{r7, pc}
    142e:	bf00      	nop
    1430:	000012bd 	.word	0x000012bd

00001434 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1434:	b580      	push	{r7, lr}
    1436:	b082      	sub	sp, #8
    1438:	af00      	add	r7, sp, #0
    143a:	6078      	str	r0, [r7, #4]
    143c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    143e:	6839      	ldr	r1, [r7, #0]
    1440:	6878      	ldr	r0, [r7, #4]
    1442:	4b03      	ldr	r3, [pc, #12]	; (1450 <gpio_set_pin_function+0x1c>)
    1444:	4798      	blx	r3
}
    1446:	bf00      	nop
    1448:	3708      	adds	r7, #8
    144a:	46bd      	mov	sp, r7
    144c:	bd80      	pop	{r7, pc}
    144e:	bf00      	nop
    1450:	0000137d 	.word	0x0000137d

00001454 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1454:	b580      	push	{r7, lr}
    1456:	b082      	sub	sp, #8
    1458:	af00      	add	r7, sp, #0
    145a:	4603      	mov	r3, r0
    145c:	460a      	mov	r2, r1
    145e:	71fb      	strb	r3, [r7, #7]
    1460:	4613      	mov	r3, r2
    1462:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1464:	79fb      	ldrb	r3, [r7, #7]
    1466:	095b      	lsrs	r3, r3, #5
    1468:	b2d8      	uxtb	r0, r3
    146a:	79fb      	ldrb	r3, [r7, #7]
    146c:	f003 031f 	and.w	r3, r3, #31
    1470:	2201      	movs	r2, #1
    1472:	fa02 f303 	lsl.w	r3, r2, r3
    1476:	79ba      	ldrb	r2, [r7, #6]
    1478:	4619      	mov	r1, r3
    147a:	4b03      	ldr	r3, [pc, #12]	; (1488 <gpio_set_pin_direction+0x34>)
    147c:	4798      	blx	r3
}
    147e:	bf00      	nop
    1480:	3708      	adds	r7, #8
    1482:	46bd      	mov	sp, r7
    1484:	bd80      	pop	{r7, pc}
    1486:	bf00      	nop
    1488:	00001191 	.word	0x00001191

0000148c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    148c:	b580      	push	{r7, lr}
    148e:	b082      	sub	sp, #8
    1490:	af00      	add	r7, sp, #0
    1492:	4603      	mov	r3, r0
    1494:	460a      	mov	r2, r1
    1496:	71fb      	strb	r3, [r7, #7]
    1498:	4613      	mov	r3, r2
    149a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    149c:	79fb      	ldrb	r3, [r7, #7]
    149e:	095b      	lsrs	r3, r3, #5
    14a0:	b2d8      	uxtb	r0, r3
    14a2:	79fb      	ldrb	r3, [r7, #7]
    14a4:	f003 031f 	and.w	r3, r3, #31
    14a8:	2201      	movs	r2, #1
    14aa:	fa02 f303 	lsl.w	r3, r2, r3
    14ae:	79ba      	ldrb	r2, [r7, #6]
    14b0:	4619      	mov	r1, r3
    14b2:	4b03      	ldr	r3, [pc, #12]	; (14c0 <gpio_set_pin_level+0x34>)
    14b4:	4798      	blx	r3
}
    14b6:	bf00      	nop
    14b8:	3708      	adds	r7, #8
    14ba:	46bd      	mov	sp, r7
    14bc:	bd80      	pop	{r7, pc}
    14be:	bf00      	nop
    14c0:	00001279 	.word	0x00001279

000014c4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	af00      	add	r7, sp, #0
	_init_chip();
    14c8:	4b01      	ldr	r3, [pc, #4]	; (14d0 <init_mcu+0xc>)
    14ca:	4798      	blx	r3
}
    14cc:	bf00      	nop
    14ce:	bd80      	pop	{r7, pc}
    14d0:	00004585 	.word	0x00004585

000014d4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    14dc:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d004      	beq.n	14ee <wdt_init+0x1a>
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d001      	beq.n	14ee <wdt_init+0x1a>
    14ea:	2301      	movs	r3, #1
    14ec:	e000      	b.n	14f0 <wdt_init+0x1c>
    14ee:	2300      	movs	r3, #0
    14f0:	f003 0301 	and.w	r3, r3, #1
    14f4:	b2db      	uxtb	r3, r3
    14f6:	2248      	movs	r2, #72	; 0x48
    14f8:	4907      	ldr	r1, [pc, #28]	; (1518 <wdt_init+0x44>)
    14fa:	4618      	mov	r0, r3
    14fc:	4b07      	ldr	r3, [pc, #28]	; (151c <wdt_init+0x48>)
    14fe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	683a      	ldr	r2, [r7, #0]
    1504:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	4618      	mov	r0, r3
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <wdt_init+0x4c>)
    150c:	4798      	blx	r3
    150e:	4603      	mov	r3, r0
}
    1510:	4618      	mov	r0, r3
    1512:	3708      	adds	r7, #8
    1514:	46bd      	mov	sp, r7
    1516:	bd80      	pop	{r7, pc}
    1518:	0000f008 	.word	0x0000f008
    151c:	0000397d 	.word	0x0000397d
    1520:	0000af2d 	.word	0x0000af2d

00001524 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1524:	b580      	push	{r7, lr}
    1526:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1528:	4804      	ldr	r0, [pc, #16]	; (153c <CRC_CALC_init+0x18>)
    152a:	4b05      	ldr	r3, [pc, #20]	; (1540 <CRC_CALC_init+0x1c>)
    152c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    152e:	4905      	ldr	r1, [pc, #20]	; (1544 <CRC_CALC_init+0x20>)
    1530:	4805      	ldr	r0, [pc, #20]	; (1548 <CRC_CALC_init+0x24>)
    1532:	4b06      	ldr	r3, [pc, #24]	; (154c <CRC_CALC_init+0x28>)
    1534:	4798      	blx	r3
}
    1536:	bf00      	nop
    1538:	bd80      	pop	{r7, pc}
    153a:	bf00      	nop
    153c:	40000800 	.word	0x40000800
    1540:	00000d47 	.word	0x00000d47
    1544:	41002000 	.word	0x41002000
    1548:	200016ec 	.word	0x200016ec
    154c:	0000230d 	.word	0x0000230d

00001550 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1550:	b580      	push	{r7, lr}
    1552:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1554:	2244      	movs	r2, #68	; 0x44
    1556:	2104      	movs	r1, #4
    1558:	483f      	ldr	r0, [pc, #252]	; (1658 <EXTERNAL_IRQ_0_init+0x108>)
    155a:	4b40      	ldr	r3, [pc, #256]	; (165c <EXTERNAL_IRQ_0_init+0x10c>)
    155c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    155e:	4840      	ldr	r0, [pc, #256]	; (1660 <EXTERNAL_IRQ_0_init+0x110>)
    1560:	4b40      	ldr	r3, [pc, #256]	; (1664 <EXTERNAL_IRQ_0_init+0x114>)
    1562:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1564:	2101      	movs	r1, #1
    1566:	2040      	movs	r0, #64	; 0x40
    1568:	4b3f      	ldr	r3, [pc, #252]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    156a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    156c:	2100      	movs	r1, #0
    156e:	2040      	movs	r0, #64	; 0x40
    1570:	4b3e      	ldr	r3, [pc, #248]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    1572:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1574:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1578:	2040      	movs	r0, #64	; 0x40
    157a:	4b3d      	ldr	r3, [pc, #244]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    157c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    157e:	2101      	movs	r1, #1
    1580:	2021      	movs	r0, #33	; 0x21
    1582:	4b39      	ldr	r3, [pc, #228]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    1584:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1586:	2100      	movs	r1, #0
    1588:	2021      	movs	r0, #33	; 0x21
    158a:	4b38      	ldr	r3, [pc, #224]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    158c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    158e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1592:	2021      	movs	r0, #33	; 0x21
    1594:	4b36      	ldr	r3, [pc, #216]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    1596:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1598:	2101      	movs	r1, #1
    159a:	2003      	movs	r0, #3
    159c:	4b32      	ldr	r3, [pc, #200]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    159e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    15a0:	2102      	movs	r1, #2
    15a2:	2003      	movs	r0, #3
    15a4:	4b31      	ldr	r3, [pc, #196]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    15a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    15a8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    15ac:	2003      	movs	r0, #3
    15ae:	4b30      	ldr	r3, [pc, #192]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    15b0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    15b2:	2101      	movs	r1, #1
    15b4:	2004      	movs	r0, #4
    15b6:	4b2c      	ldr	r3, [pc, #176]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    15b8:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    15ba:	2102      	movs	r1, #2
    15bc:	2004      	movs	r0, #4
    15be:	4b2b      	ldr	r3, [pc, #172]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    15c0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    15c2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    15c6:	2004      	movs	r0, #4
    15c8:	4b29      	ldr	r3, [pc, #164]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    15ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    15cc:	2101      	movs	r1, #1
    15ce:	2005      	movs	r0, #5
    15d0:	4b25      	ldr	r3, [pc, #148]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    15d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    15d4:	2102      	movs	r1, #2
    15d6:	2005      	movs	r0, #5
    15d8:	4b24      	ldr	r3, [pc, #144]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    15da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    15dc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    15e0:	2005      	movs	r0, #5
    15e2:	4b23      	ldr	r3, [pc, #140]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    15e4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    15e6:	2101      	movs	r1, #1
    15e8:	2056      	movs	r0, #86	; 0x56
    15ea:	4b1f      	ldr	r3, [pc, #124]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    15ec:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    15ee:	2102      	movs	r1, #2
    15f0:	2056      	movs	r0, #86	; 0x56
    15f2:	4b1e      	ldr	r3, [pc, #120]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    15f4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    15f6:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    15fa:	2056      	movs	r0, #86	; 0x56
    15fc:	4b1c      	ldr	r3, [pc, #112]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    15fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1600:	2101      	movs	r1, #1
    1602:	2057      	movs	r0, #87	; 0x57
    1604:	4b18      	ldr	r3, [pc, #96]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    1606:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1608:	2102      	movs	r1, #2
    160a:	2057      	movs	r0, #87	; 0x57
    160c:	4b17      	ldr	r3, [pc, #92]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    160e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1610:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1614:	2057      	movs	r0, #87	; 0x57
    1616:	4b16      	ldr	r3, [pc, #88]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    1618:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    161a:	2101      	movs	r1, #1
    161c:	2028      	movs	r0, #40	; 0x28
    161e:	4b12      	ldr	r3, [pc, #72]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    1620:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1622:	2100      	movs	r1, #0
    1624:	2028      	movs	r0, #40	; 0x28
    1626:	4b11      	ldr	r3, [pc, #68]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    1628:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    162a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    162e:	2028      	movs	r0, #40	; 0x28
    1630:	4b0f      	ldr	r3, [pc, #60]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    1632:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1634:	2101      	movs	r1, #1
    1636:	2029      	movs	r0, #41	; 0x29
    1638:	4b0b      	ldr	r3, [pc, #44]	; (1668 <EXTERNAL_IRQ_0_init+0x118>)
    163a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    163c:	2100      	movs	r1, #0
    163e:	2029      	movs	r0, #41	; 0x29
    1640:	4b0a      	ldr	r3, [pc, #40]	; (166c <EXTERNAL_IRQ_0_init+0x11c>)
    1642:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1644:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1648:	2029      	movs	r0, #41	; 0x29
    164a:	4b09      	ldr	r3, [pc, #36]	; (1670 <EXTERNAL_IRQ_0_init+0x120>)
    164c:	4798      	blx	r3

	ext_irq_init();
    164e:	4b09      	ldr	r3, [pc, #36]	; (1674 <EXTERNAL_IRQ_0_init+0x124>)
    1650:	4798      	blx	r3
}
    1652:	bf00      	nop
    1654:	bd80      	pop	{r7, pc}
    1656:	bf00      	nop
    1658:	40001c00 	.word	0x40001c00
    165c:	00000be1 	.word	0x00000be1
    1660:	40000800 	.word	0x40000800
    1664:	00000cc7 	.word	0x00000cc7
    1668:	00001455 	.word	0x00001455
    166c:	00001401 	.word	0x00001401
    1670:	00001435 	.word	0x00001435
    1674:	000023d5 	.word	0x000023d5

00001678 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1678:	b580      	push	{r7, lr}
    167a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    167c:	2244      	movs	r2, #68	; 0x44
    167e:	210b      	movs	r1, #11
    1680:	4807      	ldr	r0, [pc, #28]	; (16a0 <EVENT_SYSTEM_0_init+0x28>)
    1682:	4b08      	ldr	r3, [pc, #32]	; (16a4 <EVENT_SYSTEM_0_init+0x2c>)
    1684:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1686:	2244      	movs	r2, #68	; 0x44
    1688:	210c      	movs	r1, #12
    168a:	4805      	ldr	r0, [pc, #20]	; (16a0 <EVENT_SYSTEM_0_init+0x28>)
    168c:	4b05      	ldr	r3, [pc, #20]	; (16a4 <EVENT_SYSTEM_0_init+0x2c>)
    168e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1690:	4805      	ldr	r0, [pc, #20]	; (16a8 <EVENT_SYSTEM_0_init+0x30>)
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <EVENT_SYSTEM_0_init+0x34>)
    1694:	4798      	blx	r3

	event_system_init();
    1696:	4b06      	ldr	r3, [pc, #24]	; (16b0 <EVENT_SYSTEM_0_init+0x38>)
    1698:	4798      	blx	r3
}
    169a:	bf00      	nop
    169c:	bd80      	pop	{r7, pc}
    169e:	bf00      	nop
    16a0:	40001c00 	.word	0x40001c00
    16a4:	00000be1 	.word	0x00000be1
    16a8:	40000800 	.word	0x40000800
    16ac:	00000d67 	.word	0x00000d67
    16b0:	000023c1 	.word	0x000023c1

000016b4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    16b8:	2101      	movs	r1, #1
    16ba:	202b      	movs	r0, #43	; 0x2b
    16bc:	4b2b      	ldr	r3, [pc, #172]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    16be:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    16c0:	2100      	movs	r1, #0
    16c2:	202b      	movs	r0, #43	; 0x2b
    16c4:	4b2a      	ldr	r3, [pc, #168]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    16c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    16c8:	492a      	ldr	r1, [pc, #168]	; (1774 <QSPI_N25Q256_PORT_init+0xc0>)
    16ca:	202b      	movs	r0, #43	; 0x2b
    16cc:	4b2a      	ldr	r3, [pc, #168]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    16ce:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    16d0:	2102      	movs	r1, #2
    16d2:	2008      	movs	r0, #8
    16d4:	4b25      	ldr	r3, [pc, #148]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    16d6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    16d8:	2100      	movs	r1, #0
    16da:	2008      	movs	r0, #8
    16dc:	4b27      	ldr	r3, [pc, #156]	; (177c <QSPI_N25Q256_PORT_init+0xc8>)
    16de:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    16e0:	2100      	movs	r1, #0
    16e2:	2008      	movs	r0, #8
    16e4:	4b22      	ldr	r3, [pc, #136]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    16e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    16e8:	4925      	ldr	r1, [pc, #148]	; (1780 <QSPI_N25Q256_PORT_init+0xcc>)
    16ea:	2008      	movs	r0, #8
    16ec:	4b22      	ldr	r3, [pc, #136]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    16ee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    16f0:	2102      	movs	r1, #2
    16f2:	2009      	movs	r0, #9
    16f4:	4b1d      	ldr	r3, [pc, #116]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    16f6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    16f8:	2100      	movs	r1, #0
    16fa:	2009      	movs	r0, #9
    16fc:	4b1f      	ldr	r3, [pc, #124]	; (177c <QSPI_N25Q256_PORT_init+0xc8>)
    16fe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1700:	2100      	movs	r1, #0
    1702:	2009      	movs	r0, #9
    1704:	4b1a      	ldr	r3, [pc, #104]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    1706:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1708:	491e      	ldr	r1, [pc, #120]	; (1784 <QSPI_N25Q256_PORT_init+0xd0>)
    170a:	2009      	movs	r0, #9
    170c:	4b1a      	ldr	r3, [pc, #104]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    170e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1710:	2102      	movs	r1, #2
    1712:	200a      	movs	r0, #10
    1714:	4b15      	ldr	r3, [pc, #84]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    1716:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1718:	2100      	movs	r1, #0
    171a:	200a      	movs	r0, #10
    171c:	4b17      	ldr	r3, [pc, #92]	; (177c <QSPI_N25Q256_PORT_init+0xc8>)
    171e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1720:	2100      	movs	r1, #0
    1722:	200a      	movs	r0, #10
    1724:	4b12      	ldr	r3, [pc, #72]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    1726:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1728:	4917      	ldr	r1, [pc, #92]	; (1788 <QSPI_N25Q256_PORT_init+0xd4>)
    172a:	200a      	movs	r0, #10
    172c:	4b12      	ldr	r3, [pc, #72]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    172e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1730:	2102      	movs	r1, #2
    1732:	200b      	movs	r0, #11
    1734:	4b0d      	ldr	r3, [pc, #52]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    1736:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1738:	2100      	movs	r1, #0
    173a:	200b      	movs	r0, #11
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <QSPI_N25Q256_PORT_init+0xc8>)
    173e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1740:	2100      	movs	r1, #0
    1742:	200b      	movs	r0, #11
    1744:	4b0a      	ldr	r3, [pc, #40]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    1746:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1748:	4910      	ldr	r1, [pc, #64]	; (178c <QSPI_N25Q256_PORT_init+0xd8>)
    174a:	200b      	movs	r0, #11
    174c:	4b0a      	ldr	r3, [pc, #40]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    174e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1750:	2101      	movs	r1, #1
    1752:	202a      	movs	r0, #42	; 0x2a
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <QSPI_N25Q256_PORT_init+0xb8>)
    1756:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1758:	2100      	movs	r1, #0
    175a:	202a      	movs	r0, #42	; 0x2a
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <QSPI_N25Q256_PORT_init+0xbc>)
    175e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1760:	490b      	ldr	r1, [pc, #44]	; (1790 <QSPI_N25Q256_PORT_init+0xdc>)
    1762:	202a      	movs	r0, #42	; 0x2a
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <QSPI_N25Q256_PORT_init+0xc4>)
    1766:	4798      	blx	r3
}
    1768:	bf00      	nop
    176a:	bd80      	pop	{r7, pc}
    176c:	00001455 	.word	0x00001455
    1770:	00001401 	.word	0x00001401
    1774:	002b0007 	.word	0x002b0007
    1778:	00001435 	.word	0x00001435
    177c:	0000148d 	.word	0x0000148d
    1780:	00080007 	.word	0x00080007
    1784:	00090007 	.word	0x00090007
    1788:	000a0007 	.word	0x000a0007
    178c:	000b0007 	.word	0x000b0007
    1790:	002a0007 	.word	0x002a0007

00001794 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1794:	b580      	push	{r7, lr}
    1796:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1798:	4805      	ldr	r0, [pc, #20]	; (17b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    179a:	4b06      	ldr	r3, [pc, #24]	; (17b4 <QSPI_N25Q256_CLOCK_init+0x20>)
    179c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    179e:	4804      	ldr	r0, [pc, #16]	; (17b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    17a0:	4b05      	ldr	r3, [pc, #20]	; (17b8 <QSPI_N25Q256_CLOCK_init+0x24>)
    17a2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    17a4:	4802      	ldr	r0, [pc, #8]	; (17b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <QSPI_N25Q256_CLOCK_init+0x28>)
    17a8:	4798      	blx	r3
}
    17aa:	bf00      	nop
    17ac:	bd80      	pop	{r7, pc}
    17ae:	bf00      	nop
    17b0:	40000800 	.word	0x40000800
    17b4:	00000c27 	.word	0x00000c27
    17b8:	00000c67 	.word	0x00000c67
    17bc:	00000e47 	.word	0x00000e47

000017c0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    17c4:	4b04      	ldr	r3, [pc, #16]	; (17d8 <QSPI_N25Q256_init+0x18>)
    17c6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    17c8:	4904      	ldr	r1, [pc, #16]	; (17dc <QSPI_N25Q256_init+0x1c>)
    17ca:	4805      	ldr	r0, [pc, #20]	; (17e0 <QSPI_N25Q256_init+0x20>)
    17cc:	4b05      	ldr	r3, [pc, #20]	; (17e4 <QSPI_N25Q256_init+0x24>)
    17ce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    17d0:	4b05      	ldr	r3, [pc, #20]	; (17e8 <QSPI_N25Q256_init+0x28>)
    17d2:	4798      	blx	r3
}
    17d4:	bf00      	nop
    17d6:	bd80      	pop	{r7, pc}
    17d8:	00001795 	.word	0x00001795
    17dc:	42003400 	.word	0x42003400
    17e0:	20001580 	.word	0x20001580
    17e4:	00002899 	.word	0x00002899
    17e8:	000016b5 	.word	0x000016b5

000017ec <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    17f0:	4802      	ldr	r0, [pc, #8]	; (17fc <DATETIME_CLOCK_CLOCK_init+0x10>)
    17f2:	4b03      	ldr	r3, [pc, #12]	; (1800 <DATETIME_CLOCK_CLOCK_init+0x14>)
    17f4:	4798      	blx	r3
}
    17f6:	bf00      	nop
    17f8:	bd80      	pop	{r7, pc}
    17fa:	bf00      	nop
    17fc:	40000800 	.word	0x40000800
    1800:	00000ca7 	.word	0x00000ca7

00001804 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1808:	4b03      	ldr	r3, [pc, #12]	; (1818 <DATETIME_CLOCK_init+0x14>)
    180a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    180c:	4903      	ldr	r1, [pc, #12]	; (181c <DATETIME_CLOCK_init+0x18>)
    180e:	4804      	ldr	r0, [pc, #16]	; (1820 <DATETIME_CLOCK_init+0x1c>)
    1810:	4b04      	ldr	r3, [pc, #16]	; (1824 <DATETIME_CLOCK_init+0x20>)
    1812:	4798      	blx	r3
}
    1814:	bf00      	nop
    1816:	bd80      	pop	{r7, pc}
    1818:	000017ed 	.word	0x000017ed
    181c:	40002400 	.word	0x40002400
    1820:	200016c8 	.word	0x200016c8
    1824:	000021b1 	.word	0x000021b1

00001828 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1828:	b580      	push	{r7, lr}
    182a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    182c:	2101      	movs	r1, #1
    182e:	2010      	movs	r0, #16
    1830:	4b07      	ldr	r3, [pc, #28]	; (1850 <I2C_HEATERS_PORT_init+0x28>)
    1832:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1834:	4907      	ldr	r1, [pc, #28]	; (1854 <I2C_HEATERS_PORT_init+0x2c>)
    1836:	2010      	movs	r0, #16
    1838:	4b07      	ldr	r3, [pc, #28]	; (1858 <I2C_HEATERS_PORT_init+0x30>)
    183a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    183c:	2101      	movs	r1, #1
    183e:	2011      	movs	r0, #17
    1840:	4b03      	ldr	r3, [pc, #12]	; (1850 <I2C_HEATERS_PORT_init+0x28>)
    1842:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1844:	4905      	ldr	r1, [pc, #20]	; (185c <I2C_HEATERS_PORT_init+0x34>)
    1846:	2011      	movs	r0, #17
    1848:	4b03      	ldr	r3, [pc, #12]	; (1858 <I2C_HEATERS_PORT_init+0x30>)
    184a:	4798      	blx	r3
}
    184c:	bf00      	nop
    184e:	bd80      	pop	{r7, pc}
    1850:	00001401 	.word	0x00001401
    1854:	00100002 	.word	0x00100002
    1858:	00001435 	.word	0x00001435
    185c:	00110002 	.word	0x00110002

00001860 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1860:	b580      	push	{r7, lr}
    1862:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1864:	2242      	movs	r2, #66	; 0x42
    1866:	2108      	movs	r1, #8
    1868:	4806      	ldr	r0, [pc, #24]	; (1884 <I2C_HEATERS_CLOCK_init+0x24>)
    186a:	4b07      	ldr	r3, [pc, #28]	; (1888 <I2C_HEATERS_CLOCK_init+0x28>)
    186c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    186e:	224a      	movs	r2, #74	; 0x4a
    1870:	2103      	movs	r1, #3
    1872:	4804      	ldr	r0, [pc, #16]	; (1884 <I2C_HEATERS_CLOCK_init+0x24>)
    1874:	4b04      	ldr	r3, [pc, #16]	; (1888 <I2C_HEATERS_CLOCK_init+0x28>)
    1876:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1878:	4804      	ldr	r0, [pc, #16]	; (188c <I2C_HEATERS_CLOCK_init+0x2c>)
    187a:	4b05      	ldr	r3, [pc, #20]	; (1890 <I2C_HEATERS_CLOCK_init+0x30>)
    187c:	4798      	blx	r3
}
    187e:	bf00      	nop
    1880:	bd80      	pop	{r7, pc}
    1882:	bf00      	nop
    1884:	40001c00 	.word	0x40001c00
    1888:	00000be1 	.word	0x00000be1
    188c:	40000800 	.word	0x40000800
    1890:	00000ce7 	.word	0x00000ce7

00001894 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <I2C_HEATERS_init+0x18>)
    189a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    189c:	4904      	ldr	r1, [pc, #16]	; (18b0 <I2C_HEATERS_init+0x1c>)
    189e:	4805      	ldr	r0, [pc, #20]	; (18b4 <I2C_HEATERS_init+0x20>)
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <I2C_HEATERS_init+0x24>)
    18a2:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <I2C_HEATERS_init+0x28>)
    18a6:	4798      	blx	r3
}
    18a8:	bf00      	nop
    18aa:	bd80      	pop	{r7, pc}
    18ac:	00001861 	.word	0x00001861
    18b0:	40003400 	.word	0x40003400
    18b4:	20001620 	.word	0x20001620
    18b8:	0000269d 	.word	0x0000269d
    18bc:	00001829 	.word	0x00001829

000018c0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    18c4:	2100      	movs	r1, #0
    18c6:	203b      	movs	r0, #59	; 0x3b
    18c8:	4b11      	ldr	r3, [pc, #68]	; (1910 <SPI_TEMP_PORT_init+0x50>)
    18ca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    18cc:	2102      	movs	r1, #2
    18ce:	203b      	movs	r0, #59	; 0x3b
    18d0:	4b10      	ldr	r3, [pc, #64]	; (1914 <SPI_TEMP_PORT_init+0x54>)
    18d2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    18d4:	4910      	ldr	r1, [pc, #64]	; (1918 <SPI_TEMP_PORT_init+0x58>)
    18d6:	203b      	movs	r0, #59	; 0x3b
    18d8:	4b10      	ldr	r3, [pc, #64]	; (191c <SPI_TEMP_PORT_init+0x5c>)
    18da:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    18dc:	2100      	movs	r1, #0
    18de:	203a      	movs	r0, #58	; 0x3a
    18e0:	4b0b      	ldr	r3, [pc, #44]	; (1910 <SPI_TEMP_PORT_init+0x50>)
    18e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    18e4:	2102      	movs	r1, #2
    18e6:	203a      	movs	r0, #58	; 0x3a
    18e8:	4b0a      	ldr	r3, [pc, #40]	; (1914 <SPI_TEMP_PORT_init+0x54>)
    18ea:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    18ec:	490c      	ldr	r1, [pc, #48]	; (1920 <SPI_TEMP_PORT_init+0x60>)
    18ee:	203a      	movs	r0, #58	; 0x3a
    18f0:	4b0a      	ldr	r3, [pc, #40]	; (191c <SPI_TEMP_PORT_init+0x5c>)
    18f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    18f4:	2101      	movs	r1, #1
    18f6:	203c      	movs	r0, #60	; 0x3c
    18f8:	4b06      	ldr	r3, [pc, #24]	; (1914 <SPI_TEMP_PORT_init+0x54>)
    18fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    18fc:	2100      	movs	r1, #0
    18fe:	203c      	movs	r0, #60	; 0x3c
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <SPI_TEMP_PORT_init+0x64>)
    1902:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1904:	4908      	ldr	r1, [pc, #32]	; (1928 <SPI_TEMP_PORT_init+0x68>)
    1906:	203c      	movs	r0, #60	; 0x3c
    1908:	4b04      	ldr	r3, [pc, #16]	; (191c <SPI_TEMP_PORT_init+0x5c>)
    190a:	4798      	blx	r3
}
    190c:	bf00      	nop
    190e:	bd80      	pop	{r7, pc}
    1910:	0000148d 	.word	0x0000148d
    1914:	00001455 	.word	0x00001455
    1918:	003b0003 	.word	0x003b0003
    191c:	00001435 	.word	0x00001435
    1920:	003a0003 	.word	0x003a0003
    1924:	00001401 	.word	0x00001401
    1928:	003c0003 	.word	0x003c0003

0000192c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    192c:	b580      	push	{r7, lr}
    192e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1930:	2245      	movs	r2, #69	; 0x45
    1932:	2122      	movs	r1, #34	; 0x22
    1934:	4806      	ldr	r0, [pc, #24]	; (1950 <SPI_TEMP_CLOCK_init+0x24>)
    1936:	4b07      	ldr	r3, [pc, #28]	; (1954 <SPI_TEMP_CLOCK_init+0x28>)
    1938:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    193a:	224a      	movs	r2, #74	; 0x4a
    193c:	2103      	movs	r1, #3
    193e:	4804      	ldr	r0, [pc, #16]	; (1950 <SPI_TEMP_CLOCK_init+0x24>)
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <SPI_TEMP_CLOCK_init+0x28>)
    1942:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1944:	4804      	ldr	r0, [pc, #16]	; (1958 <SPI_TEMP_CLOCK_init+0x2c>)
    1946:	4b05      	ldr	r3, [pc, #20]	; (195c <SPI_TEMP_CLOCK_init+0x30>)
    1948:	4798      	blx	r3
}
    194a:	bf00      	nop
    194c:	bd80      	pop	{r7, pc}
    194e:	bf00      	nop
    1950:	40001c00 	.word	0x40001c00
    1954:	00000be1 	.word	0x00000be1
    1958:	40000800 	.word	0x40000800
    195c:	00000e67 	.word	0x00000e67

00001960 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1960:	b580      	push	{r7, lr}
    1962:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <SPI_TEMP_init+0x1c>)
    1966:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1968:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    196c:	4804      	ldr	r0, [pc, #16]	; (1980 <SPI_TEMP_init+0x20>)
    196e:	4b05      	ldr	r3, [pc, #20]	; (1984 <SPI_TEMP_init+0x24>)
    1970:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1972:	4b05      	ldr	r3, [pc, #20]	; (1988 <SPI_TEMP_init+0x28>)
    1974:	4798      	blx	r3
}
    1976:	bf00      	nop
    1978:	bd80      	pop	{r7, pc}
    197a:	bf00      	nop
    197c:	0000192d 	.word	0x0000192d
    1980:	20001528 	.word	0x20001528
    1984:	000029a9 	.word	0x000029a9
    1988:	000018c1 	.word	0x000018c1

0000198c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    198c:	b580      	push	{r7, lr}
    198e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1990:	2100      	movs	r1, #0
    1992:	2017      	movs	r0, #23
    1994:	4b07      	ldr	r3, [pc, #28]	; (19b4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1998:	4907      	ldr	r1, [pc, #28]	; (19b8 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    199a:	2017      	movs	r0, #23
    199c:	4b07      	ldr	r3, [pc, #28]	; (19bc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    199e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    19a0:	2100      	movs	r1, #0
    19a2:	2016      	movs	r0, #22
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    19a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    19a8:	4905      	ldr	r1, [pc, #20]	; (19c0 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    19aa:	2016      	movs	r0, #22
    19ac:	4b03      	ldr	r3, [pc, #12]	; (19bc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    19ae:	4798      	blx	r3
}
    19b0:	bf00      	nop
    19b2:	bd80      	pop	{r7, pc}
    19b4:	00001401 	.word	0x00001401
    19b8:	00170003 	.word	0x00170003
    19bc:	00001435 	.word	0x00001435
    19c0:	00160003 	.word	0x00160003

000019c4 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19c8:	2244      	movs	r2, #68	; 0x44
    19ca:	2123      	movs	r1, #35	; 0x23
    19cc:	4806      	ldr	r0, [pc, #24]	; (19e8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    19ce:	4b07      	ldr	r3, [pc, #28]	; (19ec <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    19d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19d2:	224a      	movs	r2, #74	; 0x4a
    19d4:	2103      	movs	r1, #3
    19d6:	4804      	ldr	r0, [pc, #16]	; (19e8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    19d8:	4b04      	ldr	r3, [pc, #16]	; (19ec <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    19da:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    19dc:	4804      	ldr	r0, [pc, #16]	; (19f0 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    19de:	4b05      	ldr	r3, [pc, #20]	; (19f4 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    19e0:	4798      	blx	r3
}
    19e2:	bf00      	nop
    19e4:	bd80      	pop	{r7, pc}
    19e6:	bf00      	nop
    19e8:	40001c00 	.word	0x40001c00
    19ec:	00000be1 	.word	0x00000be1
    19f0:	40000800 	.word	0x40000800
    19f4:	00000e87 	.word	0x00000e87

000019f8 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <I2C_FLAPPER_VALVE_init+0x18>)
    19fe:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1a00:	4904      	ldr	r1, [pc, #16]	; (1a14 <I2C_FLAPPER_VALVE_init+0x1c>)
    1a02:	4805      	ldr	r0, [pc, #20]	; (1a18 <I2C_FLAPPER_VALVE_init+0x20>)
    1a04:	4b05      	ldr	r3, [pc, #20]	; (1a1c <I2C_FLAPPER_VALVE_init+0x24>)
    1a06:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1a08:	4b05      	ldr	r3, [pc, #20]	; (1a20 <I2C_FLAPPER_VALVE_init+0x28>)
    1a0a:	4798      	blx	r3
}
    1a0c:	bf00      	nop
    1a0e:	bd80      	pop	{r7, pc}
    1a10:	000019c5 	.word	0x000019c5
    1a14:	43000400 	.word	0x43000400
    1a18:	200015c4 	.word	0x200015c4
    1a1c:	0000269d 	.word	0x0000269d
    1a20:	0000198d 	.word	0x0000198d

00001a24 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1a28:	2100      	movs	r1, #0
    1a2a:	2044      	movs	r0, #68	; 0x44
    1a2c:	4b11      	ldr	r3, [pc, #68]	; (1a74 <SPI_HI3593_PORT_init+0x50>)
    1a2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1a30:	2102      	movs	r1, #2
    1a32:	2044      	movs	r0, #68	; 0x44
    1a34:	4b10      	ldr	r3, [pc, #64]	; (1a78 <SPI_HI3593_PORT_init+0x54>)
    1a36:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1a38:	4910      	ldr	r1, [pc, #64]	; (1a7c <SPI_HI3593_PORT_init+0x58>)
    1a3a:	2044      	movs	r0, #68	; 0x44
    1a3c:	4b10      	ldr	r3, [pc, #64]	; (1a80 <SPI_HI3593_PORT_init+0x5c>)
    1a3e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1a40:	2100      	movs	r1, #0
    1a42:	2045      	movs	r0, #69	; 0x45
    1a44:	4b0b      	ldr	r3, [pc, #44]	; (1a74 <SPI_HI3593_PORT_init+0x50>)
    1a46:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1a48:	2102      	movs	r1, #2
    1a4a:	2045      	movs	r0, #69	; 0x45
    1a4c:	4b0a      	ldr	r3, [pc, #40]	; (1a78 <SPI_HI3593_PORT_init+0x54>)
    1a4e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1a50:	490c      	ldr	r1, [pc, #48]	; (1a84 <SPI_HI3593_PORT_init+0x60>)
    1a52:	2045      	movs	r0, #69	; 0x45
    1a54:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <SPI_HI3593_PORT_init+0x5c>)
    1a56:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1a58:	2101      	movs	r1, #1
    1a5a:	2047      	movs	r0, #71	; 0x47
    1a5c:	4b06      	ldr	r3, [pc, #24]	; (1a78 <SPI_HI3593_PORT_init+0x54>)
    1a5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1a60:	2100      	movs	r1, #0
    1a62:	2047      	movs	r0, #71	; 0x47
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <SPI_HI3593_PORT_init+0x64>)
    1a66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1a68:	4908      	ldr	r1, [pc, #32]	; (1a8c <SPI_HI3593_PORT_init+0x68>)
    1a6a:	2047      	movs	r0, #71	; 0x47
    1a6c:	4b04      	ldr	r3, [pc, #16]	; (1a80 <SPI_HI3593_PORT_init+0x5c>)
    1a6e:	4798      	blx	r3
}
    1a70:	bf00      	nop
    1a72:	bd80      	pop	{r7, pc}
    1a74:	0000148d 	.word	0x0000148d
    1a78:	00001455 	.word	0x00001455
    1a7c:	00440002 	.word	0x00440002
    1a80:	00001435 	.word	0x00001435
    1a84:	00450002 	.word	0x00450002
    1a88:	00001401 	.word	0x00001401
    1a8c:	00470002 	.word	0x00470002

00001a90 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a94:	2242      	movs	r2, #66	; 0x42
    1a96:	2124      	movs	r1, #36	; 0x24
    1a98:	4806      	ldr	r0, [pc, #24]	; (1ab4 <SPI_HI3593_CLOCK_init+0x24>)
    1a9a:	4b07      	ldr	r3, [pc, #28]	; (1ab8 <SPI_HI3593_CLOCK_init+0x28>)
    1a9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a9e:	224a      	movs	r2, #74	; 0x4a
    1aa0:	2103      	movs	r1, #3
    1aa2:	4804      	ldr	r0, [pc, #16]	; (1ab4 <SPI_HI3593_CLOCK_init+0x24>)
    1aa4:	4b04      	ldr	r3, [pc, #16]	; (1ab8 <SPI_HI3593_CLOCK_init+0x28>)
    1aa6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1aa8:	4804      	ldr	r0, [pc, #16]	; (1abc <SPI_HI3593_CLOCK_init+0x2c>)
    1aaa:	4b05      	ldr	r3, [pc, #20]	; (1ac0 <SPI_HI3593_CLOCK_init+0x30>)
    1aac:	4798      	blx	r3
}
    1aae:	bf00      	nop
    1ab0:	bd80      	pop	{r7, pc}
    1ab2:	bf00      	nop
    1ab4:	40001c00 	.word	0x40001c00
    1ab8:	00000be1 	.word	0x00000be1
    1abc:	40000800 	.word	0x40000800
    1ac0:	00000ea7 	.word	0x00000ea7

00001ac4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1ac8:	4b04      	ldr	r3, [pc, #16]	; (1adc <SPI_HI3593_init+0x18>)
    1aca:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1acc:	4904      	ldr	r1, [pc, #16]	; (1ae0 <SPI_HI3593_init+0x1c>)
    1ace:	4805      	ldr	r0, [pc, #20]	; (1ae4 <SPI_HI3593_init+0x20>)
    1ad0:	4b05      	ldr	r3, [pc, #20]	; (1ae8 <SPI_HI3593_init+0x24>)
    1ad2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <SPI_HI3593_init+0x28>)
    1ad6:	4798      	blx	r3
}
    1ad8:	bf00      	nop
    1ada:	bd80      	pop	{r7, pc}
    1adc:	00001a91 	.word	0x00001a91
    1ae0:	43000800 	.word	0x43000800
    1ae4:	20001510 	.word	0x20001510
    1ae8:	000029a9 	.word	0x000029a9
    1aec:	00001a25 	.word	0x00001a25

00001af0 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1af4:	2100      	movs	r1, #0
    1af6:	2068      	movs	r0, #104	; 0x68
    1af8:	4b07      	ldr	r3, [pc, #28]	; (1b18 <I2C_FANS_PORT_init+0x28>)
    1afa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1afc:	4907      	ldr	r1, [pc, #28]	; (1b1c <I2C_FANS_PORT_init+0x2c>)
    1afe:	2068      	movs	r0, #104	; 0x68
    1b00:	4b07      	ldr	r3, [pc, #28]	; (1b20 <I2C_FANS_PORT_init+0x30>)
    1b02:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1b04:	2100      	movs	r1, #0
    1b06:	2069      	movs	r0, #105	; 0x69
    1b08:	4b03      	ldr	r3, [pc, #12]	; (1b18 <I2C_FANS_PORT_init+0x28>)
    1b0a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1b0c:	4905      	ldr	r1, [pc, #20]	; (1b24 <I2C_FANS_PORT_init+0x34>)
    1b0e:	2069      	movs	r0, #105	; 0x69
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <I2C_FANS_PORT_init+0x30>)
    1b12:	4798      	blx	r3
}
    1b14:	bf00      	nop
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00001401 	.word	0x00001401
    1b1c:	00680002 	.word	0x00680002
    1b20:	00001435 	.word	0x00001435
    1b24:	00690002 	.word	0x00690002

00001b28 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b2c:	2244      	movs	r2, #68	; 0x44
    1b2e:	2125      	movs	r1, #37	; 0x25
    1b30:	4806      	ldr	r0, [pc, #24]	; (1b4c <I2C_FANS_CLOCK_init+0x24>)
    1b32:	4b07      	ldr	r3, [pc, #28]	; (1b50 <I2C_FANS_CLOCK_init+0x28>)
    1b34:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b36:	224a      	movs	r2, #74	; 0x4a
    1b38:	2103      	movs	r1, #3
    1b3a:	4804      	ldr	r0, [pc, #16]	; (1b4c <I2C_FANS_CLOCK_init+0x24>)
    1b3c:	4b04      	ldr	r3, [pc, #16]	; (1b50 <I2C_FANS_CLOCK_init+0x28>)
    1b3e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1b40:	4804      	ldr	r0, [pc, #16]	; (1b54 <I2C_FANS_CLOCK_init+0x2c>)
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <I2C_FANS_CLOCK_init+0x30>)
    1b44:	4798      	blx	r3
}
    1b46:	bf00      	nop
    1b48:	bd80      	pop	{r7, pc}
    1b4a:	bf00      	nop
    1b4c:	40001c00 	.word	0x40001c00
    1b50:	00000be1 	.word	0x00000be1
    1b54:	40000800 	.word	0x40000800
    1b58:	00000ec7 	.word	0x00000ec7

00001b5c <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1b60:	4b04      	ldr	r3, [pc, #16]	; (1b74 <I2C_FANS_init+0x18>)
    1b62:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1b64:	4904      	ldr	r1, [pc, #16]	; (1b78 <I2C_FANS_init+0x1c>)
    1b66:	4805      	ldr	r0, [pc, #20]	; (1b7c <I2C_FANS_init+0x20>)
    1b68:	4b05      	ldr	r3, [pc, #20]	; (1b80 <I2C_FANS_init+0x24>)
    1b6a:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1b6c:	4b05      	ldr	r3, [pc, #20]	; (1b84 <I2C_FANS_init+0x28>)
    1b6e:	4798      	blx	r3
}
    1b70:	bf00      	nop
    1b72:	bd80      	pop	{r7, pc}
    1b74:	00001b29 	.word	0x00001b29
    1b78:	43000c00 	.word	0x43000c00
    1b7c:	20001540 	.word	0x20001540
    1b80:	0000269d 	.word	0x0000269d
    1b84:	00001af1 	.word	0x00001af1

00001b88 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1b8c:	4808      	ldr	r0, [pc, #32]	; (1bb0 <TIMER_USB_init+0x28>)
    1b8e:	4b09      	ldr	r3, [pc, #36]	; (1bb4 <TIMER_USB_init+0x2c>)
    1b90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b92:	2243      	movs	r2, #67	; 0x43
    1b94:	2109      	movs	r1, #9
    1b96:	4808      	ldr	r0, [pc, #32]	; (1bb8 <TIMER_USB_init+0x30>)
    1b98:	4b08      	ldr	r3, [pc, #32]	; (1bbc <TIMER_USB_init+0x34>)
    1b9a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1b9c:	4b08      	ldr	r3, [pc, #32]	; (1bc0 <TIMER_USB_init+0x38>)
    1b9e:	4798      	blx	r3
    1ba0:	4603      	mov	r3, r0
    1ba2:	461a      	mov	r2, r3
    1ba4:	4907      	ldr	r1, [pc, #28]	; (1bc4 <TIMER_USB_init+0x3c>)
    1ba6:	4808      	ldr	r0, [pc, #32]	; (1bc8 <TIMER_USB_init+0x40>)
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <TIMER_USB_init+0x44>)
    1baa:	4798      	blx	r3
}
    1bac:	bf00      	nop
    1bae:	bd80      	pop	{r7, pc}
    1bb0:	40000800 	.word	0x40000800
    1bb4:	00000d07 	.word	0x00000d07
    1bb8:	40001c00 	.word	0x40001c00
    1bbc:	00000be1 	.word	0x00000be1
    1bc0:	000083c5 	.word	0x000083c5
    1bc4:	40003800 	.word	0x40003800
    1bc8:	20001688 	.word	0x20001688
    1bcc:	00002b79 	.word	0x00002b79

00001bd0 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1bd4:	4808      	ldr	r0, [pc, #32]	; (1bf8 <TIMER_ARINC_init+0x28>)
    1bd6:	4b09      	ldr	r3, [pc, #36]	; (1bfc <TIMER_ARINC_init+0x2c>)
    1bd8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bda:	2244      	movs	r2, #68	; 0x44
    1bdc:	211a      	movs	r1, #26
    1bde:	4808      	ldr	r0, [pc, #32]	; (1c00 <TIMER_ARINC_init+0x30>)
    1be0:	4b08      	ldr	r3, [pc, #32]	; (1c04 <TIMER_ARINC_init+0x34>)
    1be2:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1be4:	4b08      	ldr	r3, [pc, #32]	; (1c08 <TIMER_ARINC_init+0x38>)
    1be6:	4798      	blx	r3
    1be8:	4603      	mov	r3, r0
    1bea:	461a      	mov	r2, r3
    1bec:	4907      	ldr	r1, [pc, #28]	; (1c0c <TIMER_ARINC_init+0x3c>)
    1bee:	4808      	ldr	r0, [pc, #32]	; (1c10 <TIMER_ARINC_init+0x40>)
    1bf0:	4b08      	ldr	r3, [pc, #32]	; (1c14 <TIMER_ARINC_init+0x44>)
    1bf2:	4798      	blx	r3
}
    1bf4:	bf00      	nop
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	40000800 	.word	0x40000800
    1bfc:	00000dc7 	.word	0x00000dc7
    1c00:	40001c00 	.word	0x40001c00
    1c04:	00000be1 	.word	0x00000be1
    1c08:	000083c5 	.word	0x000083c5
    1c0c:	4101a000 	.word	0x4101a000
    1c10:	20001668 	.word	0x20001668
    1c14:	00002b79 	.word	0x00002b79

00001c18 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1c1c:	4808      	ldr	r0, [pc, #32]	; (1c40 <TIMER_MAINTENANCE_init+0x28>)
    1c1e:	4b09      	ldr	r3, [pc, #36]	; (1c44 <TIMER_MAINTENANCE_init+0x2c>)
    1c20:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c22:	2246      	movs	r2, #70	; 0x46
    1c24:	211e      	movs	r1, #30
    1c26:	4808      	ldr	r0, [pc, #32]	; (1c48 <TIMER_MAINTENANCE_init+0x30>)
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <TIMER_MAINTENANCE_init+0x34>)
    1c2a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1c2c:	4b08      	ldr	r3, [pc, #32]	; (1c50 <TIMER_MAINTENANCE_init+0x38>)
    1c2e:	4798      	blx	r3
    1c30:	4603      	mov	r3, r0
    1c32:	461a      	mov	r2, r3
    1c34:	4907      	ldr	r1, [pc, #28]	; (1c54 <TIMER_MAINTENANCE_init+0x3c>)
    1c36:	4808      	ldr	r0, [pc, #32]	; (1c58 <TIMER_MAINTENANCE_init+0x40>)
    1c38:	4b08      	ldr	r3, [pc, #32]	; (1c5c <TIMER_MAINTENANCE_init+0x44>)
    1c3a:	4798      	blx	r3
}
    1c3c:	bf00      	nop
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	40000800 	.word	0x40000800
    1c44:	00000e07 	.word	0x00000e07
    1c48:	40001c00 	.word	0x40001c00
    1c4c:	00000be1 	.word	0x00000be1
    1c50:	000083c5 	.word	0x000083c5
    1c54:	42001400 	.word	0x42001400
    1c58:	20001560 	.word	0x20001560
    1c5c:	00002b79 	.word	0x00002b79

00001c60 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1c64:	4808      	ldr	r0, [pc, #32]	; (1c88 <TIMER_INTERFACE_init+0x28>)
    1c66:	4b09      	ldr	r3, [pc, #36]	; (1c8c <TIMER_INTERFACE_init+0x2c>)
    1c68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c6a:	2246      	movs	r2, #70	; 0x46
    1c6c:	211e      	movs	r1, #30
    1c6e:	4808      	ldr	r0, [pc, #32]	; (1c90 <TIMER_INTERFACE_init+0x30>)
    1c70:	4b08      	ldr	r3, [pc, #32]	; (1c94 <TIMER_INTERFACE_init+0x34>)
    1c72:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1c74:	4b08      	ldr	r3, [pc, #32]	; (1c98 <TIMER_INTERFACE_init+0x38>)
    1c76:	4798      	blx	r3
    1c78:	4603      	mov	r3, r0
    1c7a:	461a      	mov	r2, r3
    1c7c:	4907      	ldr	r1, [pc, #28]	; (1c9c <TIMER_INTERFACE_init+0x3c>)
    1c7e:	4808      	ldr	r0, [pc, #32]	; (1ca0 <TIMER_INTERFACE_init+0x40>)
    1c80:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <TIMER_INTERFACE_init+0x44>)
    1c82:	4798      	blx	r3
}
    1c84:	bf00      	nop
    1c86:	bd80      	pop	{r7, pc}
    1c88:	40000800 	.word	0x40000800
    1c8c:	00000e27 	.word	0x00000e27
    1c90:	40001c00 	.word	0x40001c00
    1c94:	00000be1 	.word	0x00000be1
    1c98:	000083c5 	.word	0x000083c5
    1c9c:	42001800 	.word	0x42001800
    1ca0:	200015a4 	.word	0x200015a4
    1ca4:	00002b79 	.word	0x00002b79

00001ca8 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1cac:	4808      	ldr	r0, [pc, #32]	; (1cd0 <TIMER_EVENT_init+0x28>)
    1cae:	4b09      	ldr	r3, [pc, #36]	; (1cd4 <TIMER_EVENT_init+0x2c>)
    1cb0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cb2:	2246      	movs	r2, #70	; 0x46
    1cb4:	2127      	movs	r1, #39	; 0x27
    1cb6:	4808      	ldr	r0, [pc, #32]	; (1cd8 <TIMER_EVENT_init+0x30>)
    1cb8:	4b08      	ldr	r3, [pc, #32]	; (1cdc <TIMER_EVENT_init+0x34>)
    1cba:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1cbc:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <TIMER_EVENT_init+0x38>)
    1cbe:	4798      	blx	r3
    1cc0:	4603      	mov	r3, r0
    1cc2:	461a      	mov	r2, r3
    1cc4:	4907      	ldr	r1, [pc, #28]	; (1ce4 <TIMER_EVENT_init+0x3c>)
    1cc6:	4808      	ldr	r0, [pc, #32]	; (1ce8 <TIMER_EVENT_init+0x40>)
    1cc8:	4b08      	ldr	r3, [pc, #32]	; (1cec <TIMER_EVENT_init+0x44>)
    1cca:	4798      	blx	r3
}
    1ccc:	bf00      	nop
    1cce:	bd80      	pop	{r7, pc}
    1cd0:	40000800 	.word	0x40000800
    1cd4:	00000ee7 	.word	0x00000ee7
    1cd8:	40001c00 	.word	0x40001c00
    1cdc:	00000be1 	.word	0x00000be1
    1ce0:	000083c5 	.word	0x000083c5
    1ce4:	43001400 	.word	0x43001400
    1ce8:	20001584 	.word	0x20001584
    1cec:	00002b79 	.word	0x00002b79

00001cf0 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1cf0:	b480      	push	{r7}
    1cf2:	af00      	add	r7, sp, #0
}
    1cf4:	bf00      	nop
    1cf6:	46bd      	mov	sp, r7
    1cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cfc:	4770      	bx	lr
	...

00001d00 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1d04:	4804      	ldr	r0, [pc, #16]	; (1d18 <LIVE_PULSE_CLOCK_init+0x18>)
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <LIVE_PULSE_CLOCK_init+0x1c>)
    1d08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d0a:	2240      	movs	r2, #64	; 0x40
    1d0c:	2127      	movs	r1, #39	; 0x27
    1d0e:	4804      	ldr	r0, [pc, #16]	; (1d20 <LIVE_PULSE_CLOCK_init+0x20>)
    1d10:	4b04      	ldr	r3, [pc, #16]	; (1d24 <LIVE_PULSE_CLOCK_init+0x24>)
    1d12:	4798      	blx	r3
}
    1d14:	bf00      	nop
    1d16:	bd80      	pop	{r7, pc}
    1d18:	40000800 	.word	0x40000800
    1d1c:	00000f07 	.word	0x00000f07
    1d20:	40001c00 	.word	0x40001c00
    1d24:	00000be1 	.word	0x00000be1

00001d28 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1d2c:	4b06      	ldr	r3, [pc, #24]	; (1d48 <LIVE_PULSE_init+0x20>)
    1d2e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1d30:	4b06      	ldr	r3, [pc, #24]	; (1d4c <LIVE_PULSE_init+0x24>)
    1d32:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1d34:	4b06      	ldr	r3, [pc, #24]	; (1d50 <LIVE_PULSE_init+0x28>)
    1d36:	4798      	blx	r3
    1d38:	4603      	mov	r3, r0
    1d3a:	461a      	mov	r2, r3
    1d3c:	4905      	ldr	r1, [pc, #20]	; (1d54 <LIVE_PULSE_init+0x2c>)
    1d3e:	4806      	ldr	r0, [pc, #24]	; (1d58 <LIVE_PULSE_init+0x30>)
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <LIVE_PULSE_init+0x34>)
    1d42:	4798      	blx	r3
}
    1d44:	bf00      	nop
    1d46:	bd80      	pop	{r7, pc}
    1d48:	00001d01 	.word	0x00001d01
    1d4c:	00001cf1 	.word	0x00001cf1
    1d50:	000083d9 	.word	0x000083d9
    1d54:	43001800 	.word	0x43001800
    1d58:	200015e4 	.word	0x200015e4
    1d5c:	00002799 	.word	0x00002799

00001d60 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1d64:	4804      	ldr	r0, [pc, #16]	; (1d78 <TIMER_HVAC_CLOCK_init+0x18>)
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <TIMER_HVAC_CLOCK_init+0x1c>)
    1d68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d6a:	2244      	movs	r2, #68	; 0x44
    1d6c:	2119      	movs	r1, #25
    1d6e:	4804      	ldr	r0, [pc, #16]	; (1d80 <TIMER_HVAC_CLOCK_init+0x20>)
    1d70:	4b04      	ldr	r3, [pc, #16]	; (1d84 <TIMER_HVAC_CLOCK_init+0x24>)
    1d72:	4798      	blx	r3
}
    1d74:	bf00      	nop
    1d76:	bd80      	pop	{r7, pc}
    1d78:	40000800 	.word	0x40000800
    1d7c:	00000d87 	.word	0x00000d87
    1d80:	40001c00 	.word	0x40001c00
    1d84:	00000be1 	.word	0x00000be1

00001d88 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <TIMER_HVAC_init+0x1c>)
    1d8e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1d90:	4b05      	ldr	r3, [pc, #20]	; (1da8 <TIMER_HVAC_init+0x20>)
    1d92:	4798      	blx	r3
    1d94:	4603      	mov	r3, r0
    1d96:	461a      	mov	r2, r3
    1d98:	4904      	ldr	r1, [pc, #16]	; (1dac <TIMER_HVAC_init+0x24>)
    1d9a:	4805      	ldr	r0, [pc, #20]	; (1db0 <TIMER_HVAC_init+0x28>)
    1d9c:	4b05      	ldr	r3, [pc, #20]	; (1db4 <TIMER_HVAC_init+0x2c>)
    1d9e:	4798      	blx	r3
}
    1da0:	bf00      	nop
    1da2:	bd80      	pop	{r7, pc}
    1da4:	00001d61 	.word	0x00001d61
    1da8:	00007769 	.word	0x00007769
    1dac:	41016000 	.word	0x41016000
    1db0:	200016a8 	.word	0x200016a8
    1db4:	00002b79 	.word	0x00002b79

00001db8 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1dbc:	4804      	ldr	r0, [pc, #16]	; (1dd0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1dbe:	4b05      	ldr	r3, [pc, #20]	; (1dd4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1dc0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dc2:	2244      	movs	r2, #68	; 0x44
    1dc4:	2119      	movs	r1, #25
    1dc6:	4804      	ldr	r0, [pc, #16]	; (1dd8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1dc8:	4b04      	ldr	r3, [pc, #16]	; (1ddc <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1dca:	4798      	blx	r3
}
    1dcc:	bf00      	nop
    1dce:	bd80      	pop	{r7, pc}
    1dd0:	40000800 	.word	0x40000800
    1dd4:	00000da7 	.word	0x00000da7
    1dd8:	40001c00 	.word	0x40001c00
    1ddc:	00000be1 	.word	0x00000be1

00001de0 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1de4:	4b05      	ldr	r3, [pc, #20]	; (1dfc <TIMER_TEMPERATURES_init+0x1c>)
    1de6:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1de8:	4b05      	ldr	r3, [pc, #20]	; (1e00 <TIMER_TEMPERATURES_init+0x20>)
    1dea:	4798      	blx	r3
    1dec:	4603      	mov	r3, r0
    1dee:	461a      	mov	r2, r3
    1df0:	4904      	ldr	r1, [pc, #16]	; (1e04 <TIMER_TEMPERATURES_init+0x24>)
    1df2:	4805      	ldr	r0, [pc, #20]	; (1e08 <TIMER_TEMPERATURES_init+0x28>)
    1df4:	4b05      	ldr	r3, [pc, #20]	; (1e0c <TIMER_TEMPERATURES_init+0x2c>)
    1df6:	4798      	blx	r3
}
    1df8:	bf00      	nop
    1dfa:	bd80      	pop	{r7, pc}
    1dfc:	00001db9 	.word	0x00001db9
    1e00:	00007769 	.word	0x00007769
    1e04:	41018000 	.word	0x41018000
    1e08:	200014f0 	.word	0x200014f0
    1e0c:	00002b79 	.word	0x00002b79

00001e10 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1e10:	b580      	push	{r7, lr}
    1e12:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1e14:	4804      	ldr	r0, [pc, #16]	; (1e28 <TIMER_CCU_CLOCK_init+0x18>)
    1e16:	4b05      	ldr	r3, [pc, #20]	; (1e2c <TIMER_CCU_CLOCK_init+0x1c>)
    1e18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e1a:	2240      	movs	r2, #64	; 0x40
    1e1c:	211d      	movs	r1, #29
    1e1e:	4804      	ldr	r0, [pc, #16]	; (1e30 <TIMER_CCU_CLOCK_init+0x20>)
    1e20:	4b04      	ldr	r3, [pc, #16]	; (1e34 <TIMER_CCU_CLOCK_init+0x24>)
    1e22:	4798      	blx	r3
}
    1e24:	bf00      	nop
    1e26:	bd80      	pop	{r7, pc}
    1e28:	40000800 	.word	0x40000800
    1e2c:	00000de7 	.word	0x00000de7
    1e30:	40001c00 	.word	0x40001c00
    1e34:	00000be1 	.word	0x00000be1

00001e38 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <TIMER_CCU_init+0x1c>)
    1e3e:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1e40:	4b05      	ldr	r3, [pc, #20]	; (1e58 <TIMER_CCU_init+0x20>)
    1e42:	4798      	blx	r3
    1e44:	4603      	mov	r3, r0
    1e46:	461a      	mov	r2, r3
    1e48:	4904      	ldr	r1, [pc, #16]	; (1e5c <TIMER_CCU_init+0x24>)
    1e4a:	4805      	ldr	r0, [pc, #20]	; (1e60 <TIMER_CCU_init+0x28>)
    1e4c:	4b05      	ldr	r3, [pc, #20]	; (1e64 <TIMER_CCU_init+0x2c>)
    1e4e:	4798      	blx	r3
}
    1e50:	bf00      	nop
    1e52:	bd80      	pop	{r7, pc}
    1e54:	00001e11 	.word	0x00001e11
    1e58:	00007769 	.word	0x00007769
    1e5c:	42000c00 	.word	0x42000c00
    1e60:	20001600 	.word	0x20001600
    1e64:	00002b79 	.word	0x00002b79

00001e68 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1e68:	b580      	push	{r7, lr}
    1e6a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1e6c:	2102      	movs	r1, #2
    1e6e:	2018      	movs	r0, #24
    1e70:	4b0f      	ldr	r3, [pc, #60]	; (1eb0 <CDCUSB_PORT_init+0x48>)
    1e72:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1e74:	2100      	movs	r1, #0
    1e76:	2018      	movs	r0, #24
    1e78:	4b0e      	ldr	r3, [pc, #56]	; (1eb4 <CDCUSB_PORT_init+0x4c>)
    1e7a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1e7c:	2100      	movs	r1, #0
    1e7e:	2018      	movs	r0, #24
    1e80:	4b0d      	ldr	r3, [pc, #52]	; (1eb8 <CDCUSB_PORT_init+0x50>)
    1e82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1e84:	490d      	ldr	r1, [pc, #52]	; (1ebc <CDCUSB_PORT_init+0x54>)
    1e86:	2018      	movs	r0, #24
    1e88:	4b0d      	ldr	r3, [pc, #52]	; (1ec0 <CDCUSB_PORT_init+0x58>)
    1e8a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1e8c:	2102      	movs	r1, #2
    1e8e:	2019      	movs	r0, #25
    1e90:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <CDCUSB_PORT_init+0x48>)
    1e92:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1e94:	2100      	movs	r1, #0
    1e96:	2019      	movs	r0, #25
    1e98:	4b06      	ldr	r3, [pc, #24]	; (1eb4 <CDCUSB_PORT_init+0x4c>)
    1e9a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1e9c:	2100      	movs	r1, #0
    1e9e:	2019      	movs	r0, #25
    1ea0:	4b05      	ldr	r3, [pc, #20]	; (1eb8 <CDCUSB_PORT_init+0x50>)
    1ea2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1ea4:	4907      	ldr	r1, [pc, #28]	; (1ec4 <CDCUSB_PORT_init+0x5c>)
    1ea6:	2019      	movs	r0, #25
    1ea8:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <CDCUSB_PORT_init+0x58>)
    1eaa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1eac:	bf00      	nop
    1eae:	bd80      	pop	{r7, pc}
    1eb0:	00001455 	.word	0x00001455
    1eb4:	0000148d 	.word	0x0000148d
    1eb8:	00001401 	.word	0x00001401
    1ebc:	00180007 	.word	0x00180007
    1ec0:	00001435 	.word	0x00001435
    1ec4:	00190007 	.word	0x00190007

00001ec8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1ecc:	2242      	movs	r2, #66	; 0x42
    1ece:	210a      	movs	r1, #10
    1ed0:	4805      	ldr	r0, [pc, #20]	; (1ee8 <CDCUSB_CLOCK_init+0x20>)
    1ed2:	4b06      	ldr	r3, [pc, #24]	; (1eec <CDCUSB_CLOCK_init+0x24>)
    1ed4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1ed6:	4806      	ldr	r0, [pc, #24]	; (1ef0 <CDCUSB_CLOCK_init+0x28>)
    1ed8:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <CDCUSB_CLOCK_init+0x2c>)
    1eda:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1edc:	4804      	ldr	r0, [pc, #16]	; (1ef0 <CDCUSB_CLOCK_init+0x28>)
    1ede:	4b06      	ldr	r3, [pc, #24]	; (1ef8 <CDCUSB_CLOCK_init+0x30>)
    1ee0:	4798      	blx	r3
}
    1ee2:	bf00      	nop
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	bf00      	nop
    1ee8:	40001c00 	.word	0x40001c00
    1eec:	00000be1 	.word	0x00000be1
    1ef0:	40000800 	.word	0x40000800
    1ef4:	00000c07 	.word	0x00000c07
    1ef8:	00000d27 	.word	0x00000d27

00001efc <CDCUSB_init>:

void CDCUSB_init(void)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1f00:	4b03      	ldr	r3, [pc, #12]	; (1f10 <CDCUSB_init+0x14>)
    1f02:	4798      	blx	r3
	usb_d_init();
    1f04:	4b03      	ldr	r3, [pc, #12]	; (1f14 <CDCUSB_init+0x18>)
    1f06:	4798      	blx	r3
	CDCUSB_PORT_init();
    1f08:	4b03      	ldr	r3, [pc, #12]	; (1f18 <CDCUSB_init+0x1c>)
    1f0a:	4798      	blx	r3
}
    1f0c:	bf00      	nop
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	00001ec9 	.word	0x00001ec9
    1f14:	000033d5 	.word	0x000033d5
    1f18:	00001e69 	.word	0x00001e69

00001f1c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1f20:	4802      	ldr	r0, [pc, #8]	; (1f2c <WATCHDOG_CLOCK_init+0x10>)
    1f22:	4b03      	ldr	r3, [pc, #12]	; (1f30 <WATCHDOG_CLOCK_init+0x14>)
    1f24:	4798      	blx	r3
}
    1f26:	bf00      	nop
    1f28:	bd80      	pop	{r7, pc}
    1f2a:	bf00      	nop
    1f2c:	40000800 	.word	0x40000800
    1f30:	00000c87 	.word	0x00000c87

00001f34 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <WATCHDOG_init+0x14>)
    1f3a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1f3c:	4903      	ldr	r1, [pc, #12]	; (1f4c <WATCHDOG_init+0x18>)
    1f3e:	4804      	ldr	r0, [pc, #16]	; (1f50 <WATCHDOG_init+0x1c>)
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <WATCHDOG_init+0x20>)
    1f42:	4798      	blx	r3
}
    1f44:	bf00      	nop
    1f46:	bd80      	pop	{r7, pc}
    1f48:	00001f1d 	.word	0x00001f1d
    1f4c:	40002000 	.word	0x40002000
    1f50:	200016e8 	.word	0x200016e8
    1f54:	000014d5 	.word	0x000014d5

00001f58 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1f5c:	4904      	ldr	r1, [pc, #16]	; (1f70 <CAN_CCU_PORT_init+0x18>)
    1f5e:	202d      	movs	r0, #45	; 0x2d
    1f60:	4b04      	ldr	r3, [pc, #16]	; (1f74 <CAN_CCU_PORT_init+0x1c>)
    1f62:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1f64:	4904      	ldr	r1, [pc, #16]	; (1f78 <CAN_CCU_PORT_init+0x20>)
    1f66:	202c      	movs	r0, #44	; 0x2c
    1f68:	4b02      	ldr	r3, [pc, #8]	; (1f74 <CAN_CCU_PORT_init+0x1c>)
    1f6a:	4798      	blx	r3
}
    1f6c:	bf00      	nop
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	002d0007 	.word	0x002d0007
    1f74:	00001435 	.word	0x00001435
    1f78:	002c0007 	.word	0x002c0007

00001f7c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1f80:	4807      	ldr	r0, [pc, #28]	; (1fa0 <CAN_CCU_init+0x24>)
    1f82:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <CAN_CCU_init+0x28>)
    1f84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f86:	2249      	movs	r2, #73	; 0x49
    1f88:	211c      	movs	r1, #28
    1f8a:	4807      	ldr	r0, [pc, #28]	; (1fa8 <CAN_CCU_init+0x2c>)
    1f8c:	4b07      	ldr	r3, [pc, #28]	; (1fac <CAN_CCU_init+0x30>)
    1f8e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1f90:	4907      	ldr	r1, [pc, #28]	; (1fb0 <CAN_CCU_init+0x34>)
    1f92:	4808      	ldr	r0, [pc, #32]	; (1fb4 <CAN_CCU_init+0x38>)
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <CAN_CCU_init+0x3c>)
    1f96:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1f98:	4b08      	ldr	r3, [pc, #32]	; (1fbc <CAN_CCU_init+0x40>)
    1f9a:	4798      	blx	r3
}
    1f9c:	bf00      	nop
    1f9e:	bd80      	pop	{r7, pc}
    1fa0:	40000800 	.word	0x40000800
    1fa4:	00000c47 	.word	0x00000c47
    1fa8:	40001c00 	.word	0x40001c00
    1fac:	00000be1 	.word	0x00000be1
    1fb0:	42000400 	.word	0x42000400
    1fb4:	20001640 	.word	0x20001640
    1fb8:	00002221 	.word	0x00002221
    1fbc:	00001f59 	.word	0x00001f59

00001fc0 <system_init>:

void system_init(void)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
	init_mcu();
    1fc4:	4b5f      	ldr	r3, [pc, #380]	; (2144 <system_init+0x184>)
    1fc6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1fc8:	2100      	movs	r1, #0
    1fca:	2007      	movs	r0, #7
    1fcc:	4b5e      	ldr	r3, [pc, #376]	; (2148 <system_init+0x188>)
    1fce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1fd0:	2102      	movs	r1, #2
    1fd2:	2007      	movs	r0, #7
    1fd4:	4b5d      	ldr	r3, [pc, #372]	; (214c <system_init+0x18c>)
    1fd6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1fd8:	f04f 31ff 	mov.w	r1, #4294967295
    1fdc:	2007      	movs	r0, #7
    1fde:	4b5c      	ldr	r3, [pc, #368]	; (2150 <system_init+0x190>)
    1fe0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1fe2:	2101      	movs	r1, #1
    1fe4:	200f      	movs	r0, #15
    1fe6:	4b58      	ldr	r3, [pc, #352]	; (2148 <system_init+0x188>)
    1fe8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1fea:	2102      	movs	r1, #2
    1fec:	200f      	movs	r0, #15
    1fee:	4b57      	ldr	r3, [pc, #348]	; (214c <system_init+0x18c>)
    1ff0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1ff2:	f04f 31ff 	mov.w	r1, #4294967295
    1ff6:	200f      	movs	r0, #15
    1ff8:	4b55      	ldr	r3, [pc, #340]	; (2150 <system_init+0x190>)
    1ffa:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1ffc:	2101      	movs	r1, #1
    1ffe:	2013      	movs	r0, #19
    2000:	4b51      	ldr	r3, [pc, #324]	; (2148 <system_init+0x188>)
    2002:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2004:	2102      	movs	r1, #2
    2006:	2013      	movs	r0, #19
    2008:	4b50      	ldr	r3, [pc, #320]	; (214c <system_init+0x18c>)
    200a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    200c:	f04f 31ff 	mov.w	r1, #4294967295
    2010:	2013      	movs	r0, #19
    2012:	4b4f      	ldr	r3, [pc, #316]	; (2150 <system_init+0x190>)
    2014:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2016:	2101      	movs	r1, #1
    2018:	201b      	movs	r0, #27
    201a:	4b4b      	ldr	r3, [pc, #300]	; (2148 <system_init+0x188>)
    201c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    201e:	2102      	movs	r1, #2
    2020:	201b      	movs	r0, #27
    2022:	4b4a      	ldr	r3, [pc, #296]	; (214c <system_init+0x18c>)
    2024:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2026:	f04f 31ff 	mov.w	r1, #4294967295
    202a:	201b      	movs	r0, #27
    202c:	4b48      	ldr	r3, [pc, #288]	; (2150 <system_init+0x190>)
    202e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2030:	2101      	movs	r1, #1
    2032:	2027      	movs	r0, #39	; 0x27
    2034:	4b44      	ldr	r3, [pc, #272]	; (2148 <system_init+0x188>)
    2036:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2038:	2102      	movs	r1, #2
    203a:	2027      	movs	r0, #39	; 0x27
    203c:	4b43      	ldr	r3, [pc, #268]	; (214c <system_init+0x18c>)
    203e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2040:	f04f 31ff 	mov.w	r1, #4294967295
    2044:	2027      	movs	r0, #39	; 0x27
    2046:	4b42      	ldr	r3, [pc, #264]	; (2150 <system_init+0x190>)
    2048:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    204a:	2101      	movs	r1, #1
    204c:	203d      	movs	r0, #61	; 0x3d
    204e:	4b3e      	ldr	r3, [pc, #248]	; (2148 <system_init+0x188>)
    2050:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2052:	2102      	movs	r1, #2
    2054:	203d      	movs	r0, #61	; 0x3d
    2056:	4b3d      	ldr	r3, [pc, #244]	; (214c <system_init+0x18c>)
    2058:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    205a:	f04f 31ff 	mov.w	r1, #4294967295
    205e:	203d      	movs	r0, #61	; 0x3d
    2060:	4b3b      	ldr	r3, [pc, #236]	; (2150 <system_init+0x190>)
    2062:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2064:	2101      	movs	r1, #1
    2066:	203f      	movs	r0, #63	; 0x3f
    2068:	4b38      	ldr	r3, [pc, #224]	; (214c <system_init+0x18c>)
    206a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    206c:	2101      	movs	r1, #1
    206e:	203f      	movs	r0, #63	; 0x3f
    2070:	4b38      	ldr	r3, [pc, #224]	; (2154 <system_init+0x194>)
    2072:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2074:	f04f 31ff 	mov.w	r1, #4294967295
    2078:	203f      	movs	r0, #63	; 0x3f
    207a:	4b35      	ldr	r3, [pc, #212]	; (2150 <system_init+0x190>)
    207c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    207e:	2100      	movs	r1, #0
    2080:	204d      	movs	r0, #77	; 0x4d
    2082:	4b31      	ldr	r3, [pc, #196]	; (2148 <system_init+0x188>)
    2084:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2086:	2102      	movs	r1, #2
    2088:	204d      	movs	r0, #77	; 0x4d
    208a:	4b30      	ldr	r3, [pc, #192]	; (214c <system_init+0x18c>)
    208c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    208e:	f04f 31ff 	mov.w	r1, #4294967295
    2092:	204d      	movs	r0, #77	; 0x4d
    2094:	4b2e      	ldr	r3, [pc, #184]	; (2150 <system_init+0x190>)
    2096:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2098:	2101      	movs	r1, #1
    209a:	204e      	movs	r0, #78	; 0x4e
    209c:	4b2a      	ldr	r3, [pc, #168]	; (2148 <system_init+0x188>)
    209e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    20a0:	2102      	movs	r1, #2
    20a2:	204e      	movs	r0, #78	; 0x4e
    20a4:	4b29      	ldr	r3, [pc, #164]	; (214c <system_init+0x18c>)
    20a6:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    20a8:	f04f 31ff 	mov.w	r1, #4294967295
    20ac:	204e      	movs	r0, #78	; 0x4e
    20ae:	4b28      	ldr	r3, [pc, #160]	; (2150 <system_init+0x190>)
    20b0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    20b2:	2100      	movs	r1, #0
    20b4:	204f      	movs	r0, #79	; 0x4f
    20b6:	4b24      	ldr	r3, [pc, #144]	; (2148 <system_init+0x188>)
    20b8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    20ba:	2102      	movs	r1, #2
    20bc:	204f      	movs	r0, #79	; 0x4f
    20be:	4b23      	ldr	r3, [pc, #140]	; (214c <system_init+0x18c>)
    20c0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    20c2:	f04f 31ff 	mov.w	r1, #4294967295
    20c6:	204f      	movs	r0, #79	; 0x4f
    20c8:	4b21      	ldr	r3, [pc, #132]	; (2150 <system_init+0x190>)
    20ca:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    20cc:	2100      	movs	r1, #0
    20ce:	2052      	movs	r0, #82	; 0x52
    20d0:	4b1d      	ldr	r3, [pc, #116]	; (2148 <system_init+0x188>)
    20d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    20d4:	2102      	movs	r1, #2
    20d6:	2052      	movs	r0, #82	; 0x52
    20d8:	4b1c      	ldr	r3, [pc, #112]	; (214c <system_init+0x18c>)
    20da:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    20dc:	f04f 31ff 	mov.w	r1, #4294967295
    20e0:	2052      	movs	r0, #82	; 0x52
    20e2:	4b1b      	ldr	r3, [pc, #108]	; (2150 <system_init+0x190>)
    20e4:	4798      	blx	r3

	CRC_CALC_init();
    20e6:	4b1c      	ldr	r3, [pc, #112]	; (2158 <system_init+0x198>)
    20e8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    20ea:	4b1c      	ldr	r3, [pc, #112]	; (215c <system_init+0x19c>)
    20ec:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    20ee:	4b1c      	ldr	r3, [pc, #112]	; (2160 <system_init+0x1a0>)
    20f0:	4798      	blx	r3

	QSPI_N25Q256_init();
    20f2:	4b1c      	ldr	r3, [pc, #112]	; (2164 <system_init+0x1a4>)
    20f4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    20f6:	4b1c      	ldr	r3, [pc, #112]	; (2168 <system_init+0x1a8>)
    20f8:	4798      	blx	r3

	I2C_HEATERS_init();
    20fa:	4b1c      	ldr	r3, [pc, #112]	; (216c <system_init+0x1ac>)
    20fc:	4798      	blx	r3

	SPI_TEMP_init();
    20fe:	4b1c      	ldr	r3, [pc, #112]	; (2170 <system_init+0x1b0>)
    2100:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2102:	4b1c      	ldr	r3, [pc, #112]	; (2174 <system_init+0x1b4>)
    2104:	4798      	blx	r3

	SPI_HI3593_init();
    2106:	4b1c      	ldr	r3, [pc, #112]	; (2178 <system_init+0x1b8>)
    2108:	4798      	blx	r3

	I2C_FANS_init();
    210a:	4b1c      	ldr	r3, [pc, #112]	; (217c <system_init+0x1bc>)
    210c:	4798      	blx	r3

	TIMER_USB_init();
    210e:	4b1c      	ldr	r3, [pc, #112]	; (2180 <system_init+0x1c0>)
    2110:	4798      	blx	r3
	TIMER_ARINC_init();
    2112:	4b1c      	ldr	r3, [pc, #112]	; (2184 <system_init+0x1c4>)
    2114:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2116:	4b1c      	ldr	r3, [pc, #112]	; (2188 <system_init+0x1c8>)
    2118:	4798      	blx	r3
	TIMER_INTERFACE_init();
    211a:	4b1c      	ldr	r3, [pc, #112]	; (218c <system_init+0x1cc>)
    211c:	4798      	blx	r3
	TIMER_EVENT_init();
    211e:	4b1c      	ldr	r3, [pc, #112]	; (2190 <system_init+0x1d0>)
    2120:	4798      	blx	r3
	LIVE_PULSE_init();
    2122:	4b1c      	ldr	r3, [pc, #112]	; (2194 <system_init+0x1d4>)
    2124:	4798      	blx	r3

	TIMER_HVAC_init();
    2126:	4b1c      	ldr	r3, [pc, #112]	; (2198 <system_init+0x1d8>)
    2128:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    212a:	4b1c      	ldr	r3, [pc, #112]	; (219c <system_init+0x1dc>)
    212c:	4798      	blx	r3

	TIMER_CCU_init();
    212e:	4b1c      	ldr	r3, [pc, #112]	; (21a0 <system_init+0x1e0>)
    2130:	4798      	blx	r3

	CDCUSB_init();
    2132:	4b1c      	ldr	r3, [pc, #112]	; (21a4 <system_init+0x1e4>)
    2134:	4798      	blx	r3

	WATCHDOG_init();
    2136:	4b1c      	ldr	r3, [pc, #112]	; (21a8 <system_init+0x1e8>)
    2138:	4798      	blx	r3
	CAN_CCU_init();
    213a:	4b1c      	ldr	r3, [pc, #112]	; (21ac <system_init+0x1ec>)
    213c:	4798      	blx	r3
}
    213e:	bf00      	nop
    2140:	bd80      	pop	{r7, pc}
    2142:	bf00      	nop
    2144:	000014c5 	.word	0x000014c5
    2148:	0000148d 	.word	0x0000148d
    214c:	00001455 	.word	0x00001455
    2150:	00001435 	.word	0x00001435
    2154:	00001401 	.word	0x00001401
    2158:	00001525 	.word	0x00001525
    215c:	00001551 	.word	0x00001551
    2160:	00001679 	.word	0x00001679
    2164:	000017c1 	.word	0x000017c1
    2168:	00001805 	.word	0x00001805
    216c:	00001895 	.word	0x00001895
    2170:	00001961 	.word	0x00001961
    2174:	000019f9 	.word	0x000019f9
    2178:	00001ac5 	.word	0x00001ac5
    217c:	00001b5d 	.word	0x00001b5d
    2180:	00001b89 	.word	0x00001b89
    2184:	00001bd1 	.word	0x00001bd1
    2188:	00001c19 	.word	0x00001c19
    218c:	00001c61 	.word	0x00001c61
    2190:	00001ca9 	.word	0x00001ca9
    2194:	00001d29 	.word	0x00001d29
    2198:	00001d89 	.word	0x00001d89
    219c:	00001de1 	.word	0x00001de1
    21a0:	00001e39 	.word	0x00001e39
    21a4:	00001efd 	.word	0x00001efd
    21a8:	00001f35 	.word	0x00001f35
    21ac:	00001f7d 	.word	0x00001f7d

000021b0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b084      	sub	sp, #16
    21b4:	af00      	add	r7, sp, #0
    21b6:	6078      	str	r0, [r7, #4]
    21b8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    21ba:	2300      	movs	r3, #0
    21bc:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    21be:	687b      	ldr	r3, [r7, #4]
    21c0:	2b00      	cmp	r3, #0
    21c2:	bf14      	ite	ne
    21c4:	2301      	movne	r3, #1
    21c6:	2300      	moveq	r3, #0
    21c8:	b2db      	uxtb	r3, r3
    21ca:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    21ce:	4911      	ldr	r1, [pc, #68]	; (2214 <calendar_init+0x64>)
    21d0:	4618      	mov	r0, r3
    21d2:	4b11      	ldr	r3, [pc, #68]	; (2218 <calendar_init+0x68>)
    21d4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	681a      	ldr	r2, [r3, #0]
    21da:	683b      	ldr	r3, [r7, #0]
    21dc:	429a      	cmp	r2, r3
    21de:	d101      	bne.n	21e4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    21e0:	2300      	movs	r3, #0
    21e2:	e013      	b.n	220c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	681b      	ldr	r3, [r3, #0]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d002      	beq.n	21f2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    21ec:	f06f 0311 	mvn.w	r3, #17
    21f0:	e00c      	b.n	220c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	683a      	ldr	r2, [r7, #0]
    21f6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	4618      	mov	r0, r3
    21fc:	4b07      	ldr	r3, [pc, #28]	; (221c <calendar_init+0x6c>)
    21fe:	4798      	blx	r3
    2200:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2202:	687b      	ldr	r3, [r7, #4]
    2204:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2208:	619a      	str	r2, [r3, #24]

	return ret;
    220a:	68fb      	ldr	r3, [r7, #12]
}
    220c:	4618      	mov	r0, r3
    220e:	3710      	adds	r7, #16
    2210:	46bd      	mov	sp, r7
    2212:	bd80      	pop	{r7, pc}
    2214:	0000f024 	.word	0x0000f024
    2218:	0000397d 	.word	0x0000397d
    221c:	00005d39 	.word	0x00005d39

00002220 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2220:	b580      	push	{r7, lr}
    2222:	b084      	sub	sp, #16
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2b00      	cmp	r3, #0
    222e:	d004      	beq.n	223a <can_async_init+0x1a>
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	d001      	beq.n	223a <can_async_init+0x1a>
    2236:	2301      	movs	r3, #1
    2238:	e000      	b.n	223c <can_async_init+0x1c>
    223a:	2300      	movs	r3, #0
    223c:	f003 0301 	and.w	r3, r3, #1
    2240:	b2db      	uxtb	r3, r3
    2242:	2241      	movs	r2, #65	; 0x41
    2244:	490e      	ldr	r1, [pc, #56]	; (2280 <can_async_init+0x60>)
    2246:	4618      	mov	r0, r3
    2248:	4b0e      	ldr	r3, [pc, #56]	; (2284 <can_async_init+0x64>)
    224a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	6839      	ldr	r1, [r7, #0]
    2250:	4618      	mov	r0, r3
    2252:	4b0d      	ldr	r3, [pc, #52]	; (2288 <can_async_init+0x68>)
    2254:	4798      	blx	r3
    2256:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2258:	68fb      	ldr	r3, [r7, #12]
    225a:	2b00      	cmp	r3, #0
    225c:	d001      	beq.n	2262 <can_async_init+0x42>
		return rc;
    225e:	68fb      	ldr	r3, [r7, #12]
    2260:	e009      	b.n	2276 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	4a09      	ldr	r2, [pc, #36]	; (228c <can_async_init+0x6c>)
    2266:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	4a09      	ldr	r2, [pc, #36]	; (2290 <can_async_init+0x70>)
    226c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	4a08      	ldr	r2, [pc, #32]	; (2294 <can_async_init+0x74>)
    2272:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2274:	2300      	movs	r3, #0
}
    2276:	4618      	mov	r0, r3
    2278:	3710      	adds	r7, #16
    227a:	46bd      	mov	sp, r7
    227c:	bd80      	pop	{r7, pc}
    227e:	bf00      	nop
    2280:	0000f040 	.word	0x0000f040
    2284:	0000397d 	.word	0x0000397d
    2288:	00003ed9 	.word	0x00003ed9
    228c:	00002299 	.word	0x00002299
    2290:	000022bd 	.word	0x000022bd
    2294:	000022e1 	.word	0x000022e1

00002298 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2298:	b580      	push	{r7, lr}
    229a:	b084      	sub	sp, #16
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	69db      	ldr	r3, [r3, #28]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d003      	beq.n	22b4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    22ac:	68fb      	ldr	r3, [r7, #12]
    22ae:	69db      	ldr	r3, [r3, #28]
    22b0:	68f8      	ldr	r0, [r7, #12]
    22b2:	4798      	blx	r3
	}
}
    22b4:	bf00      	nop
    22b6:	3710      	adds	r7, #16
    22b8:	46bd      	mov	sp, r7
    22ba:	bd80      	pop	{r7, pc}

000022bc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b084      	sub	sp, #16
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    22c8:	68fb      	ldr	r3, [r7, #12]
    22ca:	6a1b      	ldr	r3, [r3, #32]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d003      	beq.n	22d8 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	6a1b      	ldr	r3, [r3, #32]
    22d4:	68f8      	ldr	r0, [r7, #12]
    22d6:	4798      	blx	r3
	}
}
    22d8:	bf00      	nop
    22da:	3710      	adds	r7, #16
    22dc:	46bd      	mov	sp, r7
    22de:	bd80      	pop	{r7, pc}

000022e0 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	b084      	sub	sp, #16
    22e4:	af00      	add	r7, sp, #0
    22e6:	6078      	str	r0, [r7, #4]
    22e8:	460b      	mov	r3, r1
    22ea:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    22f0:	68fb      	ldr	r3, [r7, #12]
    22f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22f4:	2b00      	cmp	r3, #0
    22f6:	d005      	beq.n	2304 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    22f8:	68fb      	ldr	r3, [r7, #12]
    22fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22fc:	78fa      	ldrb	r2, [r7, #3]
    22fe:	4611      	mov	r1, r2
    2300:	68f8      	ldr	r0, [r7, #12]
    2302:	4798      	blx	r3
	}
}
    2304:	bf00      	nop
    2306:	3710      	adds	r7, #16
    2308:	46bd      	mov	sp, r7
    230a:	bd80      	pop	{r7, pc}

0000230c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
    2314:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	2b00      	cmp	r3, #0
    231a:	d004      	beq.n	2326 <crc_sync_init+0x1a>
    231c:	683b      	ldr	r3, [r7, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <crc_sync_init+0x1a>
    2322:	2301      	movs	r3, #1
    2324:	e000      	b.n	2328 <crc_sync_init+0x1c>
    2326:	2300      	movs	r3, #0
    2328:	f003 0301 	and.w	r3, r3, #1
    232c:	b2db      	uxtb	r3, r3
    232e:	222b      	movs	r2, #43	; 0x2b
    2330:	4906      	ldr	r1, [pc, #24]	; (234c <crc_sync_init+0x40>)
    2332:	4618      	mov	r0, r3
    2334:	4b06      	ldr	r3, [pc, #24]	; (2350 <crc_sync_init+0x44>)
    2336:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	6839      	ldr	r1, [r7, #0]
    233c:	4618      	mov	r0, r3
    233e:	4b05      	ldr	r3, [pc, #20]	; (2354 <crc_sync_init+0x48>)
    2340:	4798      	blx	r3
    2342:	4603      	mov	r3, r0
}
    2344:	4618      	mov	r0, r3
    2346:	3708      	adds	r7, #8
    2348:	46bd      	mov	sp, r7
    234a:	bd80      	pop	{r7, pc}
    234c:	0000f05c 	.word	0x0000f05c
    2350:	0000397d 	.word	0x0000397d
    2354:	000045d9 	.word	0x000045d9

00002358 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2358:	b590      	push	{r4, r7, lr}
    235a:	b083      	sub	sp, #12
    235c:	af00      	add	r7, sp, #0
    235e:	4603      	mov	r3, r0
    2360:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2362:	4b07      	ldr	r3, [pc, #28]	; (2380 <delay_us+0x28>)
    2364:	681c      	ldr	r4, [r3, #0]
    2366:	88fb      	ldrh	r3, [r7, #6]
    2368:	4618      	mov	r0, r3
    236a:	4b06      	ldr	r3, [pc, #24]	; (2384 <delay_us+0x2c>)
    236c:	4798      	blx	r3
    236e:	4603      	mov	r3, r0
    2370:	4619      	mov	r1, r3
    2372:	4620      	mov	r0, r4
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <delay_us+0x30>)
    2376:	4798      	blx	r3
}
    2378:	bf00      	nop
    237a:	370c      	adds	r7, #12
    237c:	46bd      	mov	sp, r7
    237e:	bd90      	pop	{r4, r7, pc}
    2380:	200007e8 	.word	0x200007e8
    2384:	0000432d 	.word	0x0000432d
    2388:	000044c1 	.word	0x000044c1

0000238c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    238c:	b590      	push	{r4, r7, lr}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	4603      	mov	r3, r0
    2394:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2396:	4b07      	ldr	r3, [pc, #28]	; (23b4 <delay_ms+0x28>)
    2398:	681c      	ldr	r4, [r3, #0]
    239a:	88fb      	ldrh	r3, [r7, #6]
    239c:	4618      	mov	r0, r3
    239e:	4b06      	ldr	r3, [pc, #24]	; (23b8 <delay_ms+0x2c>)
    23a0:	4798      	blx	r3
    23a2:	4603      	mov	r3, r0
    23a4:	4619      	mov	r1, r3
    23a6:	4620      	mov	r0, r4
    23a8:	4b04      	ldr	r3, [pc, #16]	; (23bc <delay_ms+0x30>)
    23aa:	4798      	blx	r3
}
    23ac:	bf00      	nop
    23ae:	370c      	adds	r7, #12
    23b0:	46bd      	mov	sp, r7
    23b2:	bd90      	pop	{r4, r7, pc}
    23b4:	200007e8 	.word	0x200007e8
    23b8:	00004499 	.word	0x00004499
    23bc:	000044c1 	.word	0x000044c1

000023c0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	af00      	add	r7, sp, #0
	return _event_system_init();
    23c4:	4b02      	ldr	r3, [pc, #8]	; (23d0 <event_system_init+0x10>)
    23c6:	4798      	blx	r3
    23c8:	4603      	mov	r3, r0
}
    23ca:	4618      	mov	r0, r3
    23cc:	bd80      	pop	{r7, pc}
    23ce:	bf00      	nop
    23d0:	00004d95 	.word	0x00004d95

000023d4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b082      	sub	sp, #8
    23d8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23da:	2300      	movs	r3, #0
    23dc:	80fb      	strh	r3, [r7, #6]
    23de:	e00e      	b.n	23fe <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    23e0:	88fb      	ldrh	r3, [r7, #6]
    23e2:	4a0c      	ldr	r2, [pc, #48]	; (2414 <ext_irq_init+0x40>)
    23e4:	00db      	lsls	r3, r3, #3
    23e6:	4413      	add	r3, r2
    23e8:	f04f 32ff 	mov.w	r2, #4294967295
    23ec:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    23ee:	88fb      	ldrh	r3, [r7, #6]
    23f0:	4a08      	ldr	r2, [pc, #32]	; (2414 <ext_irq_init+0x40>)
    23f2:	2100      	movs	r1, #0
    23f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23f8:	88fb      	ldrh	r3, [r7, #6]
    23fa:	3301      	adds	r3, #1
    23fc:	80fb      	strh	r3, [r7, #6]
    23fe:	88fb      	ldrh	r3, [r7, #6]
    2400:	2b08      	cmp	r3, #8
    2402:	d9ed      	bls.n	23e0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2404:	4804      	ldr	r0, [pc, #16]	; (2418 <ext_irq_init+0x44>)
    2406:	4b05      	ldr	r3, [pc, #20]	; (241c <ext_irq_init+0x48>)
    2408:	4798      	blx	r3
    240a:	4603      	mov	r3, r0
}
    240c:	4618      	mov	r0, r3
    240e:	3708      	adds	r7, #8
    2410:	46bd      	mov	sp, r7
    2412:	bd80      	pop	{r7, pc}
    2414:	200007ec 	.word	0x200007ec
    2418:	00002579 	.word	0x00002579
    241c:	00004919 	.word	0x00004919

00002420 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2420:	b580      	push	{r7, lr}
    2422:	b086      	sub	sp, #24
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    242a:	2300      	movs	r3, #0
    242c:	75fb      	strb	r3, [r7, #23]
    242e:	2300      	movs	r3, #0
    2430:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2432:	2300      	movs	r3, #0
    2434:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2436:	e012      	b.n	245e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2438:	7dfb      	ldrb	r3, [r7, #23]
    243a:	4a4d      	ldr	r2, [pc, #308]	; (2570 <ext_irq_register+0x150>)
    243c:	00db      	lsls	r3, r3, #3
    243e:	4413      	add	r3, r2
    2440:	685a      	ldr	r2, [r3, #4]
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	429a      	cmp	r2, r3
    2446:	d107      	bne.n	2458 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2448:	7dfb      	ldrb	r3, [r7, #23]
    244a:	4949      	ldr	r1, [pc, #292]	; (2570 <ext_irq_register+0x150>)
    244c:	683a      	ldr	r2, [r7, #0]
    244e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2452:	2301      	movs	r3, #1
    2454:	757b      	strb	r3, [r7, #21]
			break;
    2456:	e005      	b.n	2464 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2458:	7dfb      	ldrb	r3, [r7, #23]
    245a:	3301      	adds	r3, #1
    245c:	75fb      	strb	r3, [r7, #23]
    245e:	7dfb      	ldrb	r3, [r7, #23]
    2460:	2b08      	cmp	r3, #8
    2462:	d9e9      	bls.n	2438 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2464:	683b      	ldr	r3, [r7, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d10e      	bne.n	2488 <ext_irq_register+0x68>
		if (!found) {
    246a:	7d7b      	ldrb	r3, [r7, #21]
    246c:	f083 0301 	eor.w	r3, r3, #1
    2470:	b2db      	uxtb	r3, r3
    2472:	2b00      	cmp	r3, #0
    2474:	d002      	beq.n	247c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2476:	f06f 030c 	mvn.w	r3, #12
    247a:	e074      	b.n	2566 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    247c:	2100      	movs	r1, #0
    247e:	6878      	ldr	r0, [r7, #4]
    2480:	4b3c      	ldr	r3, [pc, #240]	; (2574 <ext_irq_register+0x154>)
    2482:	4798      	blx	r3
    2484:	4603      	mov	r3, r0
    2486:	e06e      	b.n	2566 <ext_irq_register+0x146>
	}

	if (!found) {
    2488:	7d7b      	ldrb	r3, [r7, #21]
    248a:	f083 0301 	eor.w	r3, r3, #1
    248e:	b2db      	uxtb	r3, r3
    2490:	2b00      	cmp	r3, #0
    2492:	d05a      	beq.n	254a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2494:	2300      	movs	r3, #0
    2496:	75fb      	strb	r3, [r7, #23]
    2498:	e016      	b.n	24c8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    249a:	7dfb      	ldrb	r3, [r7, #23]
    249c:	4a34      	ldr	r2, [pc, #208]	; (2570 <ext_irq_register+0x150>)
    249e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d10d      	bne.n	24c2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    24a6:	7dfb      	ldrb	r3, [r7, #23]
    24a8:	4931      	ldr	r1, [pc, #196]	; (2570 <ext_irq_register+0x150>)
    24aa:	683a      	ldr	r2, [r7, #0]
    24ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    24b0:	7dfb      	ldrb	r3, [r7, #23]
    24b2:	4a2f      	ldr	r2, [pc, #188]	; (2570 <ext_irq_register+0x150>)
    24b4:	00db      	lsls	r3, r3, #3
    24b6:	4413      	add	r3, r2
    24b8:	687a      	ldr	r2, [r7, #4]
    24ba:	605a      	str	r2, [r3, #4]
				found           = true;
    24bc:	2301      	movs	r3, #1
    24be:	757b      	strb	r3, [r7, #21]
				break;
    24c0:	e005      	b.n	24ce <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    24c2:	7dfb      	ldrb	r3, [r7, #23]
    24c4:	3301      	adds	r3, #1
    24c6:	75fb      	strb	r3, [r7, #23]
    24c8:	7dfb      	ldrb	r3, [r7, #23]
    24ca:	2b08      	cmp	r3, #8
    24cc:	d9e5      	bls.n	249a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    24ce:	e036      	b.n	253e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    24d0:	7dfb      	ldrb	r3, [r7, #23]
    24d2:	4a27      	ldr	r2, [pc, #156]	; (2570 <ext_irq_register+0x150>)
    24d4:	00db      	lsls	r3, r3, #3
    24d6:	4413      	add	r3, r2
    24d8:	685a      	ldr	r2, [r3, #4]
    24da:	7dbb      	ldrb	r3, [r7, #22]
    24dc:	4924      	ldr	r1, [pc, #144]	; (2570 <ext_irq_register+0x150>)
    24de:	00db      	lsls	r3, r3, #3
    24e0:	440b      	add	r3, r1
    24e2:	685b      	ldr	r3, [r3, #4]
    24e4:	429a      	cmp	r2, r3
    24e6:	d227      	bcs.n	2538 <ext_irq_register+0x118>
    24e8:	7dbb      	ldrb	r3, [r7, #22]
    24ea:	4a21      	ldr	r2, [pc, #132]	; (2570 <ext_irq_register+0x150>)
    24ec:	00db      	lsls	r3, r3, #3
    24ee:	4413      	add	r3, r2
    24f0:	685b      	ldr	r3, [r3, #4]
    24f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    24f6:	d01f      	beq.n	2538 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    24f8:	7dbb      	ldrb	r3, [r7, #22]
    24fa:	491d      	ldr	r1, [pc, #116]	; (2570 <ext_irq_register+0x150>)
    24fc:	f107 020c 	add.w	r2, r7, #12
    2500:	00db      	lsls	r3, r3, #3
    2502:	440b      	add	r3, r1
    2504:	e893 0003 	ldmia.w	r3, {r0, r1}
    2508:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    250c:	7dbb      	ldrb	r3, [r7, #22]
    250e:	7dfa      	ldrb	r2, [r7, #23]
    2510:	4817      	ldr	r0, [pc, #92]	; (2570 <ext_irq_register+0x150>)
    2512:	4917      	ldr	r1, [pc, #92]	; (2570 <ext_irq_register+0x150>)
    2514:	00db      	lsls	r3, r3, #3
    2516:	4403      	add	r3, r0
    2518:	00d2      	lsls	r2, r2, #3
    251a:	440a      	add	r2, r1
    251c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2520:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2524:	7dfb      	ldrb	r3, [r7, #23]
    2526:	4a12      	ldr	r2, [pc, #72]	; (2570 <ext_irq_register+0x150>)
    2528:	00db      	lsls	r3, r3, #3
    252a:	4413      	add	r3, r2
    252c:	f107 020c 	add.w	r2, r7, #12
    2530:	e892 0003 	ldmia.w	r2, {r0, r1}
    2534:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2538:	7dbb      	ldrb	r3, [r7, #22]
    253a:	3301      	adds	r3, #1
    253c:	75bb      	strb	r3, [r7, #22]
    253e:	7dbb      	ldrb	r3, [r7, #22]
    2540:	2b08      	cmp	r3, #8
    2542:	d802      	bhi.n	254a <ext_irq_register+0x12a>
    2544:	7dfb      	ldrb	r3, [r7, #23]
    2546:	2b08      	cmp	r3, #8
    2548:	d9c2      	bls.n	24d0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    254a:	7d7b      	ldrb	r3, [r7, #21]
    254c:	f083 0301 	eor.w	r3, r3, #1
    2550:	b2db      	uxtb	r3, r3
    2552:	2b00      	cmp	r3, #0
    2554:	d002      	beq.n	255c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2556:	f06f 030c 	mvn.w	r3, #12
    255a:	e004      	b.n	2566 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    255c:	2101      	movs	r1, #1
    255e:	6878      	ldr	r0, [r7, #4]
    2560:	4b04      	ldr	r3, [pc, #16]	; (2574 <ext_irq_register+0x154>)
    2562:	4798      	blx	r3
    2564:	4603      	mov	r3, r0
}
    2566:	4618      	mov	r0, r3
    2568:	3718      	adds	r7, #24
    256a:	46bd      	mov	sp, r7
    256c:	bd80      	pop	{r7, pc}
    256e:	bf00      	nop
    2570:	200007ec 	.word	0x200007ec
    2574:	00004aad 	.word	0x00004aad

00002578 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2578:	b580      	push	{r7, lr}
    257a:	b084      	sub	sp, #16
    257c:	af00      	add	r7, sp, #0
    257e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2580:	2300      	movs	r3, #0
    2582:	73fb      	strb	r3, [r7, #15]
    2584:	2309      	movs	r3, #9
    2586:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2588:	e02a      	b.n	25e0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    258a:	7bba      	ldrb	r2, [r7, #14]
    258c:	7bfb      	ldrb	r3, [r7, #15]
    258e:	4413      	add	r3, r2
    2590:	105b      	asrs	r3, r3, #1
    2592:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2594:	7b7b      	ldrb	r3, [r7, #13]
    2596:	2b08      	cmp	r3, #8
    2598:	d827      	bhi.n	25ea <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    259a:	7b7b      	ldrb	r3, [r7, #13]
    259c:	4a16      	ldr	r2, [pc, #88]	; (25f8 <process_ext_irq+0x80>)
    259e:	00db      	lsls	r3, r3, #3
    25a0:	4413      	add	r3, r2
    25a2:	685a      	ldr	r2, [r3, #4]
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	429a      	cmp	r2, r3
    25a8:	d10b      	bne.n	25c2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    25aa:	7b7b      	ldrb	r3, [r7, #13]
    25ac:	4a12      	ldr	r2, [pc, #72]	; (25f8 <process_ext_irq+0x80>)
    25ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d01b      	beq.n	25ee <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    25b6:	7b7b      	ldrb	r3, [r7, #13]
    25b8:	4a0f      	ldr	r2, [pc, #60]	; (25f8 <process_ext_irq+0x80>)
    25ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25be:	4798      	blx	r3
			}
			return;
    25c0:	e015      	b.n	25ee <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    25c2:	7b7b      	ldrb	r3, [r7, #13]
    25c4:	4a0c      	ldr	r2, [pc, #48]	; (25f8 <process_ext_irq+0x80>)
    25c6:	00db      	lsls	r3, r3, #3
    25c8:	4413      	add	r3, r2
    25ca:	685a      	ldr	r2, [r3, #4]
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	429a      	cmp	r2, r3
    25d0:	d203      	bcs.n	25da <process_ext_irq+0x62>
			lower = middle + 1;
    25d2:	7b7b      	ldrb	r3, [r7, #13]
    25d4:	3301      	adds	r3, #1
    25d6:	73fb      	strb	r3, [r7, #15]
    25d8:	e002      	b.n	25e0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    25da:	7b7b      	ldrb	r3, [r7, #13]
    25dc:	3b01      	subs	r3, #1
    25de:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    25e0:	7bba      	ldrb	r2, [r7, #14]
    25e2:	7bfb      	ldrb	r3, [r7, #15]
    25e4:	429a      	cmp	r2, r3
    25e6:	d2d0      	bcs.n	258a <process_ext_irq+0x12>
    25e8:	e002      	b.n	25f0 <process_ext_irq+0x78>
			return;
    25ea:	bf00      	nop
    25ec:	e000      	b.n	25f0 <process_ext_irq+0x78>
			return;
    25ee:	bf00      	nop
		}
	}
}
    25f0:	3710      	adds	r7, #16
    25f2:	46bd      	mov	sp, r7
    25f4:	bd80      	pop	{r7, pc}
    25f6:	bf00      	nop
    25f8:	200007ec 	.word	0x200007ec

000025fc <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b08a      	sub	sp, #40	; 0x28
    2600:	af00      	add	r7, sp, #0
    2602:	60f8      	str	r0, [r7, #12]
    2604:	60b9      	str	r1, [r7, #8]
    2606:	4613      	mov	r3, r2
    2608:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	3b14      	subs	r3, #20
    260e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2612:	8b9b      	ldrh	r3, [r3, #28]
    2614:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2616:	88fb      	ldrh	r3, [r7, #6]
    2618:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    261a:	f248 0301 	movw	r3, #32769	; 0x8001
    261e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2620:	68bb      	ldr	r3, [r7, #8]
    2622:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2626:	f107 0214 	add.w	r2, r7, #20
    262a:	4611      	mov	r1, r2
    262c:	4618      	mov	r0, r3
    262e:	4b06      	ldr	r3, [pc, #24]	; (2648 <i2c_m_sync_read+0x4c>)
    2630:	4798      	blx	r3
    2632:	6238      	str	r0, [r7, #32]

	if (ret) {
    2634:	6a3b      	ldr	r3, [r7, #32]
    2636:	2b00      	cmp	r3, #0
    2638:	d001      	beq.n	263e <i2c_m_sync_read+0x42>
		return ret;
    263a:	6a3b      	ldr	r3, [r7, #32]
    263c:	e000      	b.n	2640 <i2c_m_sync_read+0x44>
	}

	return n;
    263e:	88fb      	ldrh	r3, [r7, #6]
}
    2640:	4618      	mov	r0, r3
    2642:	3728      	adds	r7, #40	; 0x28
    2644:	46bd      	mov	sp, r7
    2646:	bd80      	pop	{r7, pc}
    2648:	000069f5 	.word	0x000069f5

0000264c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    264c:	b580      	push	{r7, lr}
    264e:	b08a      	sub	sp, #40	; 0x28
    2650:	af00      	add	r7, sp, #0
    2652:	60f8      	str	r0, [r7, #12]
    2654:	60b9      	str	r1, [r7, #8]
    2656:	4613      	mov	r3, r2
    2658:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	3b14      	subs	r3, #20
    265e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2662:	8b9b      	ldrh	r3, [r3, #28]
    2664:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2666:	88fb      	ldrh	r3, [r7, #6]
    2668:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    266a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    266e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2670:	68bb      	ldr	r3, [r7, #8]
    2672:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2676:	f107 0214 	add.w	r2, r7, #20
    267a:	4611      	mov	r1, r2
    267c:	4618      	mov	r0, r3
    267e:	4b06      	ldr	r3, [pc, #24]	; (2698 <i2c_m_sync_write+0x4c>)
    2680:	4798      	blx	r3
    2682:	6238      	str	r0, [r7, #32]

	if (ret) {
    2684:	6a3b      	ldr	r3, [r7, #32]
    2686:	2b00      	cmp	r3, #0
    2688:	d001      	beq.n	268e <i2c_m_sync_write+0x42>
		return ret;
    268a:	6a3b      	ldr	r3, [r7, #32]
    268c:	e000      	b.n	2690 <i2c_m_sync_write+0x44>
	}

	return n;
    268e:	88fb      	ldrh	r3, [r7, #6]
}
    2690:	4618      	mov	r0, r3
    2692:	3728      	adds	r7, #40	; 0x28
    2694:	46bd      	mov	sp, r7
    2696:	bd80      	pop	{r7, pc}
    2698:	000069f5 	.word	0x000069f5

0000269c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    269c:	b580      	push	{r7, lr}
    269e:	b084      	sub	sp, #16
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	2b00      	cmp	r3, #0
    26aa:	bf14      	ite	ne
    26ac:	2301      	movne	r3, #1
    26ae:	2300      	moveq	r3, #0
    26b0:	b2db      	uxtb	r3, r3
    26b2:	225e      	movs	r2, #94	; 0x5e
    26b4:	490c      	ldr	r1, [pc, #48]	; (26e8 <i2c_m_sync_init+0x4c>)
    26b6:	4618      	mov	r0, r3
    26b8:	4b0c      	ldr	r3, [pc, #48]	; (26ec <i2c_m_sync_init+0x50>)
    26ba:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	6839      	ldr	r1, [r7, #0]
    26c0:	4618      	mov	r0, r3
    26c2:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <i2c_m_sync_init+0x54>)
    26c4:	4798      	blx	r3
    26c6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d001      	beq.n	26d2 <i2c_m_sync_init+0x36>
		return init_status;
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	e006      	b.n	26e0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	4a07      	ldr	r2, [pc, #28]	; (26f4 <i2c_m_sync_init+0x58>)
    26d6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	4a07      	ldr	r2, [pc, #28]	; (26f8 <i2c_m_sync_init+0x5c>)
    26dc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    26de:	2300      	movs	r3, #0
}
    26e0:	4618      	mov	r0, r3
    26e2:	3710      	adds	r7, #16
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}
    26e8:	0000f078 	.word	0x0000f078
    26ec:	0000397d 	.word	0x0000397d
    26f0:	00006795 	.word	0x00006795
    26f4:	000025fd 	.word	0x000025fd
    26f8:	0000264d 	.word	0x0000264d

000026fc <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	4618      	mov	r0, r3
    2708:	4b03      	ldr	r3, [pc, #12]	; (2718 <i2c_m_sync_enable+0x1c>)
    270a:	4798      	blx	r3
    270c:	4603      	mov	r3, r0
}
    270e:	4618      	mov	r0, r3
    2710:	3708      	adds	r7, #8
    2712:	46bd      	mov	sp, r7
    2714:	bd80      	pop	{r7, pc}
    2716:	bf00      	nop
    2718:	000067dd 	.word	0x000067dd

0000271c <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	4618      	mov	r0, r3
    2728:	4b03      	ldr	r3, [pc, #12]	; (2738 <i2c_m_sync_disable+0x1c>)
    272a:	4798      	blx	r3
    272c:	4603      	mov	r3, r0
}
    272e:	4618      	mov	r0, r3
    2730:	3708      	adds	r7, #8
    2732:	46bd      	mov	sp, r7
    2734:	bd80      	pop	{r7, pc}
    2736:	bf00      	nop
    2738:	0000681d 	.word	0x0000681d

0000273c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    273c:	b480      	push	{r7}
    273e:	b085      	sub	sp, #20
    2740:	af00      	add	r7, sp, #0
    2742:	60f8      	str	r0, [r7, #12]
    2744:	460b      	mov	r3, r1
    2746:	607a      	str	r2, [r7, #4]
    2748:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    274a:	897b      	ldrh	r3, [r7, #10]
    274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2750:	b21a      	sxth	r2, r3
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	b21b      	sxth	r3, r3
    2756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    275a:	b21b      	sxth	r3, r3
    275c:	4313      	orrs	r3, r2
    275e:	b21b      	sxth	r3, r3
    2760:	b29a      	uxth	r2, r3
    2762:	68fb      	ldr	r3, [r7, #12]
    2764:	839a      	strh	r2, [r3, #28]
    2766:	68fb      	ldr	r3, [r7, #12]
    2768:	8b9b      	ldrh	r3, [r3, #28]
}
    276a:	4618      	mov	r0, r3
    276c:	3714      	adds	r7, #20
    276e:	46bd      	mov	sp, r7
    2770:	f85d 7b04 	ldr.w	r7, [sp], #4
    2774:	4770      	bx	lr

00002776 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2776:	b480      	push	{r7}
    2778:	b083      	sub	sp, #12
    277a:	af00      	add	r7, sp, #0
    277c:	6078      	str	r0, [r7, #4]
    277e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	f103 0214 	add.w	r2, r3, #20
    2786:	683b      	ldr	r3, [r7, #0]
    2788:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    278a:	2300      	movs	r3, #0
}
    278c:	4618      	mov	r0, r3
    278e:	370c      	adds	r7, #12
    2790:	46bd      	mov	sp, r7
    2792:	f85d 7b04 	ldr.w	r7, [sp], #4
    2796:	4770      	bx	lr

00002798 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2798:	b580      	push	{r7, lr}
    279a:	b084      	sub	sp, #16
    279c:	af00      	add	r7, sp, #0
    279e:	60f8      	str	r0, [r7, #12]
    27a0:	60b9      	str	r1, [r7, #8]
    27a2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    27a4:	68fb      	ldr	r3, [r7, #12]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d004      	beq.n	27b4 <pwm_init+0x1c>
    27aa:	68bb      	ldr	r3, [r7, #8]
    27ac:	2b00      	cmp	r3, #0
    27ae:	d001      	beq.n	27b4 <pwm_init+0x1c>
    27b0:	2301      	movs	r3, #1
    27b2:	e000      	b.n	27b6 <pwm_init+0x1e>
    27b4:	2300      	movs	r3, #0
    27b6:	f003 0301 	and.w	r3, r3, #1
    27ba:	b2db      	uxtb	r3, r3
    27bc:	2233      	movs	r2, #51	; 0x33
    27be:	490a      	ldr	r1, [pc, #40]	; (27e8 <pwm_init+0x50>)
    27c0:	4618      	mov	r0, r3
    27c2:	4b0a      	ldr	r3, [pc, #40]	; (27ec <pwm_init+0x54>)
    27c4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    27c6:	68fb      	ldr	r3, [r7, #12]
    27c8:	68b9      	ldr	r1, [r7, #8]
    27ca:	4618      	mov	r0, r3
    27cc:	4b08      	ldr	r3, [pc, #32]	; (27f0 <pwm_init+0x58>)
    27ce:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    27d0:	68fb      	ldr	r3, [r7, #12]
    27d2:	4a08      	ldr	r2, [pc, #32]	; (27f4 <pwm_init+0x5c>)
    27d4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    27d6:	68fb      	ldr	r3, [r7, #12]
    27d8:	4a07      	ldr	r2, [pc, #28]	; (27f8 <pwm_init+0x60>)
    27da:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    27dc:	2300      	movs	r3, #0
}
    27de:	4618      	mov	r0, r3
    27e0:	3710      	adds	r7, #16
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	bf00      	nop
    27e8:	0000f094 	.word	0x0000f094
    27ec:	0000397d 	.word	0x0000397d
    27f0:	00007fb5 	.word	0x00007fb5
    27f4:	00002851 	.word	0x00002851
    27f8:	00002875 	.word	0x00002875

000027fc <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    27fc:	b580      	push	{r7, lr}
    27fe:	b082      	sub	sp, #8
    2800:	af00      	add	r7, sp, #0
    2802:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	2b00      	cmp	r3, #0
    2808:	bf14      	ite	ne
    280a:	2301      	movne	r3, #1
    280c:	2300      	moveq	r3, #0
    280e:	b2db      	uxtb	r3, r3
    2810:	224a      	movs	r2, #74	; 0x4a
    2812:	490b      	ldr	r1, [pc, #44]	; (2840 <pwm_enable+0x44>)
    2814:	4618      	mov	r0, r3
    2816:	4b0b      	ldr	r3, [pc, #44]	; (2844 <pwm_enable+0x48>)
    2818:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	4618      	mov	r0, r3
    281e:	4b0a      	ldr	r3, [pc, #40]	; (2848 <pwm_enable+0x4c>)
    2820:	4798      	blx	r3
    2822:	4603      	mov	r3, r0
    2824:	2b00      	cmp	r3, #0
    2826:	d002      	beq.n	282e <pwm_enable+0x32>
		return ERR_DENIED;
    2828:	f06f 0310 	mvn.w	r3, #16
    282c:	e004      	b.n	2838 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	4618      	mov	r0, r3
    2832:	4b06      	ldr	r3, [pc, #24]	; (284c <pwm_enable+0x50>)
    2834:	4798      	blx	r3

	return ERR_NONE;
    2836:	2300      	movs	r3, #0
}
    2838:	4618      	mov	r0, r3
    283a:	3708      	adds	r7, #8
    283c:	46bd      	mov	sp, r7
    283e:	bd80      	pop	{r7, pc}
    2840:	0000f094 	.word	0x0000f094
    2844:	0000397d 	.word	0x0000397d
    2848:	000083a5 	.word	0x000083a5
    284c:	00008261 	.word	0x00008261

00002850 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2850:	b580      	push	{r7, lr}
    2852:	b084      	sub	sp, #16
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    285c:	68fb      	ldr	r3, [r7, #12]
    285e:	695b      	ldr	r3, [r3, #20]
    2860:	2b00      	cmp	r3, #0
    2862:	d003      	beq.n	286c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2864:	68fb      	ldr	r3, [r7, #12]
    2866:	695b      	ldr	r3, [r3, #20]
    2868:	68f8      	ldr	r0, [r7, #12]
    286a:	4798      	blx	r3
	}
}
    286c:	bf00      	nop
    286e:	3710      	adds	r7, #16
    2870:	46bd      	mov	sp, r7
    2872:	bd80      	pop	{r7, pc}

00002874 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2874:	b580      	push	{r7, lr}
    2876:	b084      	sub	sp, #16
    2878:	af00      	add	r7, sp, #0
    287a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2880:	68fb      	ldr	r3, [r7, #12]
    2882:	699b      	ldr	r3, [r3, #24]
    2884:	2b00      	cmp	r3, #0
    2886:	d003      	beq.n	2890 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2888:	68fb      	ldr	r3, [r7, #12]
    288a:	699b      	ldr	r3, [r3, #24]
    288c:	68f8      	ldr	r0, [r7, #12]
    288e:	4798      	blx	r3
	}
}
    2890:	bf00      	nop
    2892:	3710      	adds	r7, #16
    2894:	46bd      	mov	sp, r7
    2896:	bd80      	pop	{r7, pc}

00002898 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2898:	b580      	push	{r7, lr}
    289a:	b082      	sub	sp, #8
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d004      	beq.n	28b2 <qspi_sync_init+0x1a>
    28a8:	683b      	ldr	r3, [r7, #0]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d001      	beq.n	28b2 <qspi_sync_init+0x1a>
    28ae:	2301      	movs	r3, #1
    28b0:	e000      	b.n	28b4 <qspi_sync_init+0x1c>
    28b2:	2300      	movs	r3, #0
    28b4:	f003 0301 	and.w	r3, r3, #1
    28b8:	b2db      	uxtb	r3, r3
    28ba:	2231      	movs	r2, #49	; 0x31
    28bc:	4906      	ldr	r1, [pc, #24]	; (28d8 <qspi_sync_init+0x40>)
    28be:	4618      	mov	r0, r3
    28c0:	4b06      	ldr	r3, [pc, #24]	; (28dc <qspi_sync_init+0x44>)
    28c2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	6839      	ldr	r1, [r7, #0]
    28c8:	4618      	mov	r0, r3
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <qspi_sync_init+0x48>)
    28cc:	4798      	blx	r3
    28ce:	4603      	mov	r3, r0
}
    28d0:	4618      	mov	r0, r3
    28d2:	3708      	adds	r7, #8
    28d4:	46bd      	mov	sp, r7
    28d6:	bd80      	pop	{r7, pc}
    28d8:	0000f0ac 	.word	0x0000f0ac
    28dc:	0000397d 	.word	0x0000397d
    28e0:	00005975 	.word	0x00005975

000028e4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b082      	sub	sp, #8
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	2b00      	cmp	r3, #0
    28f0:	bf14      	ite	ne
    28f2:	2301      	movne	r3, #1
    28f4:	2300      	moveq	r3, #0
    28f6:	b2db      	uxtb	r3, r3
    28f8:	223f      	movs	r2, #63	; 0x3f
    28fa:	4906      	ldr	r1, [pc, #24]	; (2914 <qspi_sync_enable+0x30>)
    28fc:	4618      	mov	r0, r3
    28fe:	4b06      	ldr	r3, [pc, #24]	; (2918 <qspi_sync_enable+0x34>)
    2900:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	4618      	mov	r0, r3
    2906:	4b05      	ldr	r3, [pc, #20]	; (291c <qspi_sync_enable+0x38>)
    2908:	4798      	blx	r3
    290a:	4603      	mov	r3, r0
}
    290c:	4618      	mov	r0, r3
    290e:	3708      	adds	r7, #8
    2910:	46bd      	mov	sp, r7
    2912:	bd80      	pop	{r7, pc}
    2914:	0000f0ac 	.word	0x0000f0ac
    2918:	0000397d 	.word	0x0000397d
    291c:	000059e9 	.word	0x000059e9

00002920 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2920:	b580      	push	{r7, lr}
    2922:	b082      	sub	sp, #8
    2924:	af00      	add	r7, sp, #0
    2926:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	2b00      	cmp	r3, #0
    292c:	bf14      	ite	ne
    292e:	2301      	movne	r3, #1
    2930:	2300      	moveq	r3, #0
    2932:	b2db      	uxtb	r3, r3
    2934:	2246      	movs	r2, #70	; 0x46
    2936:	4906      	ldr	r1, [pc, #24]	; (2950 <qspi_sync_disable+0x30>)
    2938:	4618      	mov	r0, r3
    293a:	4b06      	ldr	r3, [pc, #24]	; (2954 <qspi_sync_disable+0x34>)
    293c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	4618      	mov	r0, r3
    2942:	4b05      	ldr	r3, [pc, #20]	; (2958 <qspi_sync_disable+0x38>)
    2944:	4798      	blx	r3
    2946:	4603      	mov	r3, r0
}
    2948:	4618      	mov	r0, r3
    294a:	3708      	adds	r7, #8
    294c:	46bd      	mov	sp, r7
    294e:	bd80      	pop	{r7, pc}
    2950:	0000f0ac 	.word	0x0000f0ac
    2954:	0000397d 	.word	0x0000397d
    2958:	00005a0d 	.word	0x00005a0d

0000295c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    295c:	b580      	push	{r7, lr}
    295e:	b082      	sub	sp, #8
    2960:	af00      	add	r7, sp, #0
    2962:	6078      	str	r0, [r7, #4]
    2964:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	2b00      	cmp	r3, #0
    296a:	d004      	beq.n	2976 <qspi_sync_serial_run_command+0x1a>
    296c:	683b      	ldr	r3, [r7, #0]
    296e:	2b00      	cmp	r3, #0
    2970:	d001      	beq.n	2976 <qspi_sync_serial_run_command+0x1a>
    2972:	2301      	movs	r3, #1
    2974:	e000      	b.n	2978 <qspi_sync_serial_run_command+0x1c>
    2976:	2300      	movs	r3, #0
    2978:	f003 0301 	and.w	r3, r3, #1
    297c:	b2db      	uxtb	r3, r3
    297e:	224d      	movs	r2, #77	; 0x4d
    2980:	4906      	ldr	r1, [pc, #24]	; (299c <qspi_sync_serial_run_command+0x40>)
    2982:	4618      	mov	r0, r3
    2984:	4b06      	ldr	r3, [pc, #24]	; (29a0 <qspi_sync_serial_run_command+0x44>)
    2986:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	6839      	ldr	r1, [r7, #0]
    298c:	4618      	mov	r0, r3
    298e:	4b05      	ldr	r3, [pc, #20]	; (29a4 <qspi_sync_serial_run_command+0x48>)
    2990:	4798      	blx	r3
    2992:	4603      	mov	r3, r0
}
    2994:	4618      	mov	r0, r3
    2996:	3708      	adds	r7, #8
    2998:	46bd      	mov	sp, r7
    299a:	bd80      	pop	{r7, pc}
    299c:	0000f0ac 	.word	0x0000f0ac
    29a0:	0000397d 	.word	0x0000397d
    29a4:	00005b59 	.word	0x00005b59

000029a8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b084      	sub	sp, #16
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
    29b0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    29b2:	2300      	movs	r3, #0
    29b4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    29b6:	687b      	ldr	r3, [r7, #4]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d004      	beq.n	29c6 <spi_m_sync_init+0x1e>
    29bc:	683b      	ldr	r3, [r7, #0]
    29be:	2b00      	cmp	r3, #0
    29c0:	d001      	beq.n	29c6 <spi_m_sync_init+0x1e>
    29c2:	2301      	movs	r3, #1
    29c4:	e000      	b.n	29c8 <spi_m_sync_init+0x20>
    29c6:	2300      	movs	r3, #0
    29c8:	f003 0301 	and.w	r3, r3, #1
    29cc:	b2db      	uxtb	r3, r3
    29ce:	2240      	movs	r2, #64	; 0x40
    29d0:	4910      	ldr	r1, [pc, #64]	; (2a14 <spi_m_sync_init+0x6c>)
    29d2:	4618      	mov	r0, r3
    29d4:	4b10      	ldr	r3, [pc, #64]	; (2a18 <spi_m_sync_init+0x70>)
    29d6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	683a      	ldr	r2, [r7, #0]
    29dc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	3304      	adds	r3, #4
    29e2:	6839      	ldr	r1, [r7, #0]
    29e4:	4618      	mov	r0, r3
    29e6:	4b0d      	ldr	r3, [pc, #52]	; (2a1c <spi_m_sync_init+0x74>)
    29e8:	4798      	blx	r3
    29ea:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	2b00      	cmp	r3, #0
    29f0:	da01      	bge.n	29f6 <spi_m_sync_init+0x4e>
		return rc;
    29f2:	68fb      	ldr	r3, [r7, #12]
    29f4:	e00a      	b.n	2a0c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    29fc:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	4a07      	ldr	r2, [pc, #28]	; (2a20 <spi_m_sync_init+0x78>)
    2a02:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	4a07      	ldr	r2, [pc, #28]	; (2a24 <spi_m_sync_init+0x7c>)
    2a08:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2a0a:	2300      	movs	r3, #0
}
    2a0c:	4618      	mov	r0, r3
    2a0e:	3710      	adds	r7, #16
    2a10:	46bd      	mov	sp, r7
    2a12:	bd80      	pop	{r7, pc}
    2a14:	0000f0c8 	.word	0x0000f0c8
    2a18:	0000397d 	.word	0x0000397d
    2a1c:	00006e89 	.word	0x00006e89
    2a20:	00002a29 	.word	0x00002a29
    2a24:	00002a81 	.word	0x00002a81

00002a28 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2a28:	b580      	push	{r7, lr}
    2a2a:	b088      	sub	sp, #32
    2a2c:	af00      	add	r7, sp, #0
    2a2e:	60f8      	str	r0, [r7, #12]
    2a30:	60b9      	str	r1, [r7, #8]
    2a32:	4613      	mov	r3, r2
    2a34:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a36:	68fb      	ldr	r3, [r7, #12]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	bf14      	ite	ne
    2a3c:	2301      	movne	r3, #1
    2a3e:	2300      	moveq	r3, #0
    2a40:	b2db      	uxtb	r3, r3
    2a42:	2287      	movs	r2, #135	; 0x87
    2a44:	490b      	ldr	r1, [pc, #44]	; (2a74 <_spi_m_sync_io_read+0x4c>)
    2a46:	4618      	mov	r0, r3
    2a48:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <_spi_m_sync_io_read+0x50>)
    2a4a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a4c:	68fb      	ldr	r3, [r7, #12]
    2a4e:	3b0c      	subs	r3, #12
    2a50:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2a52:	68bb      	ldr	r3, [r7, #8]
    2a54:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2a56:	2300      	movs	r3, #0
    2a58:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2a5a:	88fb      	ldrh	r3, [r7, #6]
    2a5c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2a5e:	f107 0310 	add.w	r3, r7, #16
    2a62:	4619      	mov	r1, r3
    2a64:	69f8      	ldr	r0, [r7, #28]
    2a66:	4b05      	ldr	r3, [pc, #20]	; (2a7c <_spi_m_sync_io_read+0x54>)
    2a68:	4798      	blx	r3
    2a6a:	4603      	mov	r3, r0
}
    2a6c:	4618      	mov	r0, r3
    2a6e:	3720      	adds	r7, #32
    2a70:	46bd      	mov	sp, r7
    2a72:	bd80      	pop	{r7, pc}
    2a74:	0000f0c8 	.word	0x0000f0c8
    2a78:	0000397d 	.word	0x0000397d
    2a7c:	00002ad9 	.word	0x00002ad9

00002a80 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b088      	sub	sp, #32
    2a84:	af00      	add	r7, sp, #0
    2a86:	60f8      	str	r0, [r7, #12]
    2a88:	60b9      	str	r1, [r7, #8]
    2a8a:	4613      	mov	r3, r2
    2a8c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	2b00      	cmp	r3, #0
    2a92:	bf14      	ite	ne
    2a94:	2301      	movne	r3, #1
    2a96:	2300      	moveq	r3, #0
    2a98:	b2db      	uxtb	r3, r3
    2a9a:	22a3      	movs	r2, #163	; 0xa3
    2a9c:	490b      	ldr	r1, [pc, #44]	; (2acc <_spi_m_sync_io_write+0x4c>)
    2a9e:	4618      	mov	r0, r3
    2aa0:	4b0b      	ldr	r3, [pc, #44]	; (2ad0 <_spi_m_sync_io_write+0x50>)
    2aa2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	3b0c      	subs	r3, #12
    2aa8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2aaa:	2300      	movs	r3, #0
    2aac:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2aae:	68bb      	ldr	r3, [r7, #8]
    2ab0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2ab2:	88fb      	ldrh	r3, [r7, #6]
    2ab4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2ab6:	f107 0310 	add.w	r3, r7, #16
    2aba:	4619      	mov	r1, r3
    2abc:	69f8      	ldr	r0, [r7, #28]
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <_spi_m_sync_io_write+0x54>)
    2ac0:	4798      	blx	r3
    2ac2:	4603      	mov	r3, r0
}
    2ac4:	4618      	mov	r0, r3
    2ac6:	3720      	adds	r7, #32
    2ac8:	46bd      	mov	sp, r7
    2aca:	bd80      	pop	{r7, pc}
    2acc:	0000f0c8 	.word	0x0000f0c8
    2ad0:	0000397d 	.word	0x0000397d
    2ad4:	00002ad9 	.word	0x00002ad9

00002ad8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b086      	sub	sp, #24
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
    2ae0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d004      	beq.n	2af2 <spi_m_sync_transfer+0x1a>
    2ae8:	683b      	ldr	r3, [r7, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d001      	beq.n	2af2 <spi_m_sync_transfer+0x1a>
    2aee:	2301      	movs	r3, #1
    2af0:	e000      	b.n	2af4 <spi_m_sync_transfer+0x1c>
    2af2:	2300      	movs	r3, #0
    2af4:	f003 0301 	and.w	r3, r3, #1
    2af8:	b2db      	uxtb	r3, r3
    2afa:	22b3      	movs	r2, #179	; 0xb3
    2afc:	490c      	ldr	r1, [pc, #48]	; (2b30 <spi_m_sync_transfer+0x58>)
    2afe:	4618      	mov	r0, r3
    2b00:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <spi_m_sync_transfer+0x5c>)
    2b02:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2b04:	683b      	ldr	r3, [r7, #0]
    2b06:	681b      	ldr	r3, [r3, #0]
    2b08:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2b0a:	683b      	ldr	r3, [r7, #0]
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2b10:	683b      	ldr	r3, [r7, #0]
    2b12:	689b      	ldr	r3, [r3, #8]
    2b14:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	3304      	adds	r3, #4
    2b1a:	f107 020c 	add.w	r2, r7, #12
    2b1e:	4611      	mov	r1, r2
    2b20:	4618      	mov	r0, r3
    2b22:	4b05      	ldr	r3, [pc, #20]	; (2b38 <spi_m_sync_transfer+0x60>)
    2b24:	4798      	blx	r3
    2b26:	4603      	mov	r3, r0
}
    2b28:	4618      	mov	r0, r3
    2b2a:	3718      	adds	r7, #24
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd80      	pop	{r7, pc}
    2b30:	0000f0c8 	.word	0x0000f0c8
    2b34:	0000397d 	.word	0x0000397d
    2b38:	000070e9 	.word	0x000070e9

00002b3c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2b3c:	b480      	push	{r7}
    2b3e:	b083      	sub	sp, #12
    2b40:	af00      	add	r7, sp, #0
    2b42:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	681b      	ldr	r3, [r3, #0]
}
    2b48:	4618      	mov	r0, r3
    2b4a:	370c      	adds	r7, #12
    2b4c:	46bd      	mov	sp, r7
    2b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b52:	4770      	bx	lr

00002b54 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2b54:	b480      	push	{r7}
    2b56:	b083      	sub	sp, #12
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d002      	beq.n	2b68 <list_get_next_element+0x14>
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	e000      	b.n	2b6a <list_get_next_element+0x16>
    2b68:	2300      	movs	r3, #0
}
    2b6a:	4618      	mov	r0, r3
    2b6c:	370c      	adds	r7, #12
    2b6e:	46bd      	mov	sp, r7
    2b70:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b74:	4770      	bx	lr
	...

00002b78 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	b084      	sub	sp, #16
    2b7c:	af00      	add	r7, sp, #0
    2b7e:	60f8      	str	r0, [r7, #12]
    2b80:	60b9      	str	r1, [r7, #8]
    2b82:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2b84:	68fb      	ldr	r3, [r7, #12]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d007      	beq.n	2b9a <timer_init+0x22>
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d004      	beq.n	2b9a <timer_init+0x22>
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d001      	beq.n	2b9a <timer_init+0x22>
    2b96:	2301      	movs	r3, #1
    2b98:	e000      	b.n	2b9c <timer_init+0x24>
    2b9a:	2300      	movs	r3, #0
    2b9c:	f003 0301 	and.w	r3, r3, #1
    2ba0:	b2db      	uxtb	r3, r3
    2ba2:	223b      	movs	r2, #59	; 0x3b
    2ba4:	490c      	ldr	r1, [pc, #48]	; (2bd8 <timer_init+0x60>)
    2ba6:	4618      	mov	r0, r3
    2ba8:	4b0c      	ldr	r3, [pc, #48]	; (2bdc <timer_init+0x64>)
    2baa:	4798      	blx	r3
	descr->func = func;
    2bac:	68fb      	ldr	r3, [r7, #12]
    2bae:	687a      	ldr	r2, [r7, #4]
    2bb0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	681b      	ldr	r3, [r3, #0]
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	68fa      	ldr	r2, [r7, #12]
    2bba:	3204      	adds	r2, #4
    2bbc:	68b9      	ldr	r1, [r7, #8]
    2bbe:	4610      	mov	r0, r2
    2bc0:	4798      	blx	r3
	descr->time                           = 0;
    2bc2:	68fb      	ldr	r3, [r7, #12]
    2bc4:	2200      	movs	r2, #0
    2bc6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	4a05      	ldr	r2, [pc, #20]	; (2be0 <timer_init+0x68>)
    2bcc:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2bce:	2300      	movs	r3, #0
}
    2bd0:	4618      	mov	r0, r3
    2bd2:	3710      	adds	r7, #16
    2bd4:	46bd      	mov	sp, r7
    2bd6:	bd80      	pop	{r7, pc}
    2bd8:	0000f0e4 	.word	0x0000f0e4
    2bdc:	0000397d 	.word	0x0000397d
    2be0:	00002f69 	.word	0x00002f69

00002be4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2be4:	b580      	push	{r7, lr}
    2be6:	b082      	sub	sp, #8
    2be8:	af00      	add	r7, sp, #0
    2bea:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d005      	beq.n	2bfe <timer_start+0x1a>
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	681b      	ldr	r3, [r3, #0]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d001      	beq.n	2bfe <timer_start+0x1a>
    2bfa:	2301      	movs	r3, #1
    2bfc:	e000      	b.n	2c00 <timer_start+0x1c>
    2bfe:	2300      	movs	r3, #0
    2c00:	f003 0301 	and.w	r3, r3, #1
    2c04:	b2db      	uxtb	r3, r3
    2c06:	2254      	movs	r2, #84	; 0x54
    2c08:	490e      	ldr	r1, [pc, #56]	; (2c44 <timer_start+0x60>)
    2c0a:	4618      	mov	r0, r3
    2c0c:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <timer_start+0x64>)
    2c0e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	699b      	ldr	r3, [r3, #24]
    2c16:	687a      	ldr	r2, [r7, #4]
    2c18:	3204      	adds	r2, #4
    2c1a:	4610      	mov	r0, r2
    2c1c:	4798      	blx	r3
    2c1e:	4603      	mov	r3, r0
    2c20:	2b00      	cmp	r3, #0
    2c22:	d002      	beq.n	2c2a <timer_start+0x46>
		return ERR_DENIED;
    2c24:	f06f 0310 	mvn.w	r3, #16
    2c28:	e007      	b.n	2c3a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	689b      	ldr	r3, [r3, #8]
    2c30:	687a      	ldr	r2, [r7, #4]
    2c32:	3204      	adds	r2, #4
    2c34:	4610      	mov	r0, r2
    2c36:	4798      	blx	r3

	return ERR_NONE;
    2c38:	2300      	movs	r3, #0
}
    2c3a:	4618      	mov	r0, r3
    2c3c:	3708      	adds	r7, #8
    2c3e:	46bd      	mov	sp, r7
    2c40:	bd80      	pop	{r7, pc}
    2c42:	bf00      	nop
    2c44:	0000f0e4 	.word	0x0000f0e4
    2c48:	0000397d 	.word	0x0000397d

00002c4c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2c4c:	b580      	push	{r7, lr}
    2c4e:	b082      	sub	sp, #8
    2c50:	af00      	add	r7, sp, #0
    2c52:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d005      	beq.n	2c66 <timer_stop+0x1a>
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d001      	beq.n	2c66 <timer_stop+0x1a>
    2c62:	2301      	movs	r3, #1
    2c64:	e000      	b.n	2c68 <timer_stop+0x1c>
    2c66:	2300      	movs	r3, #0
    2c68:	f003 0301 	and.w	r3, r3, #1
    2c6c:	b2db      	uxtb	r3, r3
    2c6e:	2262      	movs	r2, #98	; 0x62
    2c70:	490f      	ldr	r1, [pc, #60]	; (2cb0 <timer_stop+0x64>)
    2c72:	4618      	mov	r0, r3
    2c74:	4b0f      	ldr	r3, [pc, #60]	; (2cb4 <timer_stop+0x68>)
    2c76:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	681b      	ldr	r3, [r3, #0]
    2c7c:	699b      	ldr	r3, [r3, #24]
    2c7e:	687a      	ldr	r2, [r7, #4]
    2c80:	3204      	adds	r2, #4
    2c82:	4610      	mov	r0, r2
    2c84:	4798      	blx	r3
    2c86:	4603      	mov	r3, r0
    2c88:	f083 0301 	eor.w	r3, r3, #1
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d002      	beq.n	2c98 <timer_stop+0x4c>
		return ERR_DENIED;
    2c92:	f06f 0310 	mvn.w	r3, #16
    2c96:	e007      	b.n	2ca8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	68db      	ldr	r3, [r3, #12]
    2c9e:	687a      	ldr	r2, [r7, #4]
    2ca0:	3204      	adds	r2, #4
    2ca2:	4610      	mov	r0, r2
    2ca4:	4798      	blx	r3

	return ERR_NONE;
    2ca6:	2300      	movs	r3, #0
}
    2ca8:	4618      	mov	r0, r3
    2caa:	3708      	adds	r7, #8
    2cac:	46bd      	mov	sp, r7
    2cae:	bd80      	pop	{r7, pc}
    2cb0:	0000f0e4 	.word	0x0000f0e4
    2cb4:	0000397d 	.word	0x0000397d

00002cb8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b084      	sub	sp, #16
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	6078      	str	r0, [r7, #4]
    2cc0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d008      	beq.n	2cda <timer_add_task+0x22>
    2cc8:	683b      	ldr	r3, [r7, #0]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d005      	beq.n	2cda <timer_add_task+0x22>
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	681b      	ldr	r3, [r3, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d001      	beq.n	2cda <timer_add_task+0x22>
    2cd6:	2301      	movs	r3, #1
    2cd8:	e000      	b.n	2cdc <timer_add_task+0x24>
    2cda:	2300      	movs	r3, #0
    2cdc:	f003 0301 	and.w	r3, r3, #1
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	227b      	movs	r2, #123	; 0x7b
    2ce4:	492f      	ldr	r1, [pc, #188]	; (2da4 <timer_add_task+0xec>)
    2ce6:	4618      	mov	r0, r3
    2ce8:	4b2f      	ldr	r3, [pc, #188]	; (2da8 <timer_add_task+0xf0>)
    2cea:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	7f1b      	ldrb	r3, [r3, #28]
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	f043 0301 	orr.w	r3, r3, #1
    2cf6:	b2da      	uxtb	r2, r3
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	3318      	adds	r3, #24
    2d00:	6839      	ldr	r1, [r7, #0]
    2d02:	4618      	mov	r0, r3
    2d04:	4b29      	ldr	r3, [pc, #164]	; (2dac <timer_add_task+0xf4>)
    2d06:	4798      	blx	r3
    2d08:	4603      	mov	r3, r0
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d00f      	beq.n	2d2e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	7f1b      	ldrb	r3, [r3, #28]
    2d12:	b2db      	uxtb	r3, r3
    2d14:	f023 0301 	bic.w	r3, r3, #1
    2d18:	b2da      	uxtb	r2, r3
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2d1e:	2280      	movs	r2, #128	; 0x80
    2d20:	4920      	ldr	r1, [pc, #128]	; (2da4 <timer_add_task+0xec>)
    2d22:	2000      	movs	r0, #0
    2d24:	4b20      	ldr	r3, [pc, #128]	; (2da8 <timer_add_task+0xf0>)
    2d26:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2d28:	f06f 0311 	mvn.w	r3, #17
    2d2c:	e035      	b.n	2d9a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	695a      	ldr	r2, [r3, #20]
    2d32:	683b      	ldr	r3, [r7, #0]
    2d34:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	f103 0018 	add.w	r0, r3, #24
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	695b      	ldr	r3, [r3, #20]
    2d40:	461a      	mov	r2, r3
    2d42:	6839      	ldr	r1, [r7, #0]
    2d44:	4b1a      	ldr	r3, [pc, #104]	; (2db0 <timer_add_task+0xf8>)
    2d46:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	7f1b      	ldrb	r3, [r3, #28]
    2d4c:	b2db      	uxtb	r3, r3
    2d4e:	f023 0301 	bic.w	r3, r3, #1
    2d52:	b2da      	uxtb	r2, r3
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	7f1b      	ldrb	r3, [r3, #28]
    2d5c:	b2db      	uxtb	r3, r3
    2d5e:	f003 0302 	and.w	r3, r3, #2
    2d62:	2b00      	cmp	r3, #0
    2d64:	d018      	beq.n	2d98 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2d66:	f107 030c 	add.w	r3, r7, #12
    2d6a:	4618      	mov	r0, r3
    2d6c:	4b11      	ldr	r3, [pc, #68]	; (2db4 <timer_add_task+0xfc>)
    2d6e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	7f1b      	ldrb	r3, [r3, #28]
    2d74:	b2db      	uxtb	r3, r3
    2d76:	f023 0302 	bic.w	r3, r3, #2
    2d7a:	b2da      	uxtb	r2, r3
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	681b      	ldr	r3, [r3, #0]
    2d84:	69db      	ldr	r3, [r3, #28]
    2d86:	687a      	ldr	r2, [r7, #4]
    2d88:	3204      	adds	r2, #4
    2d8a:	4610      	mov	r0, r2
    2d8c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d8e:	f107 030c 	add.w	r3, r7, #12
    2d92:	4618      	mov	r0, r3
    2d94:	4b08      	ldr	r3, [pc, #32]	; (2db8 <timer_add_task+0x100>)
    2d96:	4798      	blx	r3
	}

	return ERR_NONE;
    2d98:	2300      	movs	r3, #0
}
    2d9a:	4618      	mov	r0, r3
    2d9c:	3710      	adds	r7, #16
    2d9e:	46bd      	mov	sp, r7
    2da0:	bd80      	pop	{r7, pc}
    2da2:	bf00      	nop
    2da4:	0000f0e4 	.word	0x0000f0e4
    2da8:	0000397d 	.word	0x0000397d
    2dac:	000039a5 	.word	0x000039a5
    2db0:	00002eb9 	.word	0x00002eb9
    2db4:	0000b505 	.word	0x0000b505
    2db8:	0000b52b 	.word	0x0000b52b

00002dbc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	b084      	sub	sp, #16
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	6078      	str	r0, [r7, #4]
    2dc4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d008      	beq.n	2dde <timer_remove_task+0x22>
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d005      	beq.n	2dde <timer_remove_task+0x22>
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	681b      	ldr	r3, [r3, #0]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d001      	beq.n	2dde <timer_remove_task+0x22>
    2dda:	2301      	movs	r3, #1
    2ddc:	e000      	b.n	2de0 <timer_remove_task+0x24>
    2dde:	2300      	movs	r3, #0
    2de0:	f003 0301 	and.w	r3, r3, #1
    2de4:	b2db      	uxtb	r3, r3
    2de6:	2296      	movs	r2, #150	; 0x96
    2de8:	492d      	ldr	r1, [pc, #180]	; (2ea0 <timer_remove_task+0xe4>)
    2dea:	4618      	mov	r0, r3
    2dec:	4b2d      	ldr	r3, [pc, #180]	; (2ea4 <timer_remove_task+0xe8>)
    2dee:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	7f1b      	ldrb	r3, [r3, #28]
    2df4:	b2db      	uxtb	r3, r3
    2df6:	f043 0301 	orr.w	r3, r3, #1
    2dfa:	b2da      	uxtb	r2, r3
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	3318      	adds	r3, #24
    2e04:	6839      	ldr	r1, [r7, #0]
    2e06:	4618      	mov	r0, r3
    2e08:	4b27      	ldr	r3, [pc, #156]	; (2ea8 <timer_remove_task+0xec>)
    2e0a:	4798      	blx	r3
    2e0c:	4603      	mov	r3, r0
    2e0e:	f083 0301 	eor.w	r3, r3, #1
    2e12:	b2db      	uxtb	r3, r3
    2e14:	2b00      	cmp	r3, #0
    2e16:	d00f      	beq.n	2e38 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	7f1b      	ldrb	r3, [r3, #28]
    2e1c:	b2db      	uxtb	r3, r3
    2e1e:	f023 0301 	bic.w	r3, r3, #1
    2e22:	b2da      	uxtb	r2, r3
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2e28:	229b      	movs	r2, #155	; 0x9b
    2e2a:	491d      	ldr	r1, [pc, #116]	; (2ea0 <timer_remove_task+0xe4>)
    2e2c:	2000      	movs	r0, #0
    2e2e:	4b1d      	ldr	r3, [pc, #116]	; (2ea4 <timer_remove_task+0xe8>)
    2e30:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2e32:	f06f 0309 	mvn.w	r3, #9
    2e36:	e02e      	b.n	2e96 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2e38:	687b      	ldr	r3, [r7, #4]
    2e3a:	3318      	adds	r3, #24
    2e3c:	6839      	ldr	r1, [r7, #0]
    2e3e:	4618      	mov	r0, r3
    2e40:	4b1a      	ldr	r3, [pc, #104]	; (2eac <timer_remove_task+0xf0>)
    2e42:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	7f1b      	ldrb	r3, [r3, #28]
    2e48:	b2db      	uxtb	r3, r3
    2e4a:	f023 0301 	bic.w	r3, r3, #1
    2e4e:	b2da      	uxtb	r2, r3
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2e54:	687b      	ldr	r3, [r7, #4]
    2e56:	7f1b      	ldrb	r3, [r3, #28]
    2e58:	b2db      	uxtb	r3, r3
    2e5a:	f003 0302 	and.w	r3, r3, #2
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d018      	beq.n	2e94 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2e62:	f107 030c 	add.w	r3, r7, #12
    2e66:	4618      	mov	r0, r3
    2e68:	4b11      	ldr	r3, [pc, #68]	; (2eb0 <timer_remove_task+0xf4>)
    2e6a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	7f1b      	ldrb	r3, [r3, #28]
    2e70:	b2db      	uxtb	r3, r3
    2e72:	f023 0302 	bic.w	r3, r3, #2
    2e76:	b2da      	uxtb	r2, r3
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2e7c:	687b      	ldr	r3, [r7, #4]
    2e7e:	681b      	ldr	r3, [r3, #0]
    2e80:	69db      	ldr	r3, [r3, #28]
    2e82:	687a      	ldr	r2, [r7, #4]
    2e84:	3204      	adds	r2, #4
    2e86:	4610      	mov	r0, r2
    2e88:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2e8a:	f107 030c 	add.w	r3, r7, #12
    2e8e:	4618      	mov	r0, r3
    2e90:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <timer_remove_task+0xf8>)
    2e92:	4798      	blx	r3
	}

	return ERR_NONE;
    2e94:	2300      	movs	r3, #0
}
    2e96:	4618      	mov	r0, r3
    2e98:	3710      	adds	r7, #16
    2e9a:	46bd      	mov	sp, r7
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	bf00      	nop
    2ea0:	0000f0e4 	.word	0x0000f0e4
    2ea4:	0000397d 	.word	0x0000397d
    2ea8:	000039a5 	.word	0x000039a5
    2eac:	00003b07 	.word	0x00003b07
    2eb0:	0000b505 	.word	0x0000b505
    2eb4:	0000b52b 	.word	0x0000b52b

00002eb8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b088      	sub	sp, #32
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	60f8      	str	r0, [r7, #12]
    2ec0:	60b9      	str	r1, [r7, #8]
    2ec2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2ec4:	2300      	movs	r3, #0
    2ec6:	61bb      	str	r3, [r7, #24]
    2ec8:	68f8      	ldr	r0, [r7, #12]
    2eca:	4b23      	ldr	r3, [pc, #140]	; (2f58 <timer_add_timer_task+0xa0>)
    2ecc:	4798      	blx	r3
    2ece:	6138      	str	r0, [r7, #16]

	if (!head) {
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d104      	bne.n	2ee0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2ed6:	68b9      	ldr	r1, [r7, #8]
    2ed8:	68f8      	ldr	r0, [r7, #12]
    2eda:	4b20      	ldr	r3, [pc, #128]	; (2f5c <timer_add_timer_task+0xa4>)
    2edc:	4798      	blx	r3
		return;
    2ede:	e037      	b.n	2f50 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ee0:	693b      	ldr	r3, [r7, #16]
    2ee2:	61fb      	str	r3, [r7, #28]
    2ee4:	e022      	b.n	2f2c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2ee6:	69fb      	ldr	r3, [r7, #28]
    2ee8:	685a      	ldr	r2, [r3, #4]
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	429a      	cmp	r2, r3
    2eee:	d808      	bhi.n	2f02 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2ef0:	69fb      	ldr	r3, [r7, #28]
    2ef2:	689a      	ldr	r2, [r3, #8]
    2ef4:	69fb      	ldr	r3, [r7, #28]
    2ef6:	6859      	ldr	r1, [r3, #4]
    2ef8:	687b      	ldr	r3, [r7, #4]
    2efa:	1acb      	subs	r3, r1, r3
    2efc:	4413      	add	r3, r2
    2efe:	617b      	str	r3, [r7, #20]
    2f00:	e009      	b.n	2f16 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2f02:	69fb      	ldr	r3, [r7, #28]
    2f04:	689a      	ldr	r2, [r3, #8]
    2f06:	69fb      	ldr	r3, [r7, #28]
    2f08:	685b      	ldr	r3, [r3, #4]
    2f0a:	441a      	add	r2, r3
    2f0c:	687b      	ldr	r3, [r7, #4]
    2f0e:	425b      	negs	r3, r3
    2f10:	4413      	add	r3, r2
    2f12:	3301      	adds	r3, #1
    2f14:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2f16:	68bb      	ldr	r3, [r7, #8]
    2f18:	689a      	ldr	r2, [r3, #8]
    2f1a:	697b      	ldr	r3, [r7, #20]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	d909      	bls.n	2f34 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2f20:	69fb      	ldr	r3, [r7, #28]
    2f22:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2f24:	69f8      	ldr	r0, [r7, #28]
    2f26:	4b0e      	ldr	r3, [pc, #56]	; (2f60 <timer_add_timer_task+0xa8>)
    2f28:	4798      	blx	r3
    2f2a:	61f8      	str	r0, [r7, #28]
    2f2c:	69fb      	ldr	r3, [r7, #28]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d1d9      	bne.n	2ee6 <timer_add_timer_task+0x2e>
    2f32:	e000      	b.n	2f36 <timer_add_timer_task+0x7e>
			break;
    2f34:	bf00      	nop
	}

	if (it == head) {
    2f36:	69fa      	ldr	r2, [r7, #28]
    2f38:	693b      	ldr	r3, [r7, #16]
    2f3a:	429a      	cmp	r2, r3
    2f3c:	d104      	bne.n	2f48 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2f3e:	68b9      	ldr	r1, [r7, #8]
    2f40:	68f8      	ldr	r0, [r7, #12]
    2f42:	4b06      	ldr	r3, [pc, #24]	; (2f5c <timer_add_timer_task+0xa4>)
    2f44:	4798      	blx	r3
    2f46:	e003      	b.n	2f50 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2f48:	68b9      	ldr	r1, [r7, #8]
    2f4a:	69b8      	ldr	r0, [r7, #24]
    2f4c:	4b05      	ldr	r3, [pc, #20]	; (2f64 <timer_add_timer_task+0xac>)
    2f4e:	4798      	blx	r3
	}
}
    2f50:	3720      	adds	r7, #32
    2f52:	46bd      	mov	sp, r7
    2f54:	bd80      	pop	{r7, pc}
    2f56:	bf00      	nop
    2f58:	00002b3d 	.word	0x00002b3d
    2f5c:	000039dd 	.word	0x000039dd
    2f60:	00002b55 	.word	0x00002b55
    2f64:	00003a35 	.word	0x00003a35

00002f68 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b086      	sub	sp, #24
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	3b04      	subs	r3, #4
    2f74:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2f76:	693b      	ldr	r3, [r7, #16]
    2f78:	3318      	adds	r3, #24
    2f7a:	4618      	mov	r0, r3
    2f7c:	4b27      	ldr	r3, [pc, #156]	; (301c <timer_process_counted+0xb4>)
    2f7e:	4798      	blx	r3
    2f80:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2f82:	693b      	ldr	r3, [r7, #16]
    2f84:	695b      	ldr	r3, [r3, #20]
    2f86:	1c5a      	adds	r2, r3, #1
    2f88:	693b      	ldr	r3, [r7, #16]
    2f8a:	615a      	str	r2, [r3, #20]
    2f8c:	693b      	ldr	r3, [r7, #16]
    2f8e:	695b      	ldr	r3, [r3, #20]
    2f90:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2f92:	693b      	ldr	r3, [r7, #16]
    2f94:	7f1b      	ldrb	r3, [r3, #28]
    2f96:	b2db      	uxtb	r3, r3
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d106      	bne.n	2fae <timer_process_counted+0x46>
    2fa0:	693b      	ldr	r3, [r7, #16]
    2fa2:	7f1b      	ldrb	r3, [r3, #28]
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	f003 0302 	and.w	r3, r3, #2
    2faa:	2b00      	cmp	r3, #0
    2fac:	d027      	beq.n	2ffe <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2fae:	693b      	ldr	r3, [r7, #16]
    2fb0:	7f1b      	ldrb	r3, [r3, #28]
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	f043 0302 	orr.w	r3, r3, #2
    2fb8:	b2da      	uxtb	r2, r3
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	771a      	strb	r2, [r3, #28]
		return;
    2fbe:	e029      	b.n	3014 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2fc0:	697b      	ldr	r3, [r7, #20]
    2fc2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2fc4:	693b      	ldr	r3, [r7, #16]
    2fc6:	3318      	adds	r3, #24
    2fc8:	4618      	mov	r0, r3
    2fca:	4b15      	ldr	r3, [pc, #84]	; (3020 <timer_process_counted+0xb8>)
    2fcc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2fce:	68bb      	ldr	r3, [r7, #8]
    2fd0:	7c1b      	ldrb	r3, [r3, #16]
    2fd2:	2b01      	cmp	r3, #1
    2fd4:	d109      	bne.n	2fea <timer_process_counted+0x82>
			tmp->time_label = time;
    2fd6:	68bb      	ldr	r3, [r7, #8]
    2fd8:	68fa      	ldr	r2, [r7, #12]
    2fda:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2fdc:	693b      	ldr	r3, [r7, #16]
    2fde:	3318      	adds	r3, #24
    2fe0:	68fa      	ldr	r2, [r7, #12]
    2fe2:	68b9      	ldr	r1, [r7, #8]
    2fe4:	4618      	mov	r0, r3
    2fe6:	4b0f      	ldr	r3, [pc, #60]	; (3024 <timer_process_counted+0xbc>)
    2fe8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2fea:	693b      	ldr	r3, [r7, #16]
    2fec:	3318      	adds	r3, #24
    2fee:	4618      	mov	r0, r3
    2ff0:	4b0a      	ldr	r3, [pc, #40]	; (301c <timer_process_counted+0xb4>)
    2ff2:	4798      	blx	r3
    2ff4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2ff6:	68bb      	ldr	r3, [r7, #8]
    2ff8:	68db      	ldr	r3, [r3, #12]
    2ffa:	68b8      	ldr	r0, [r7, #8]
    2ffc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2ffe:	697b      	ldr	r3, [r7, #20]
    3000:	2b00      	cmp	r3, #0
    3002:	d007      	beq.n	3014 <timer_process_counted+0xac>
    3004:	697b      	ldr	r3, [r7, #20]
    3006:	685b      	ldr	r3, [r3, #4]
    3008:	68fa      	ldr	r2, [r7, #12]
    300a:	1ad2      	subs	r2, r2, r3
    300c:	697b      	ldr	r3, [r7, #20]
    300e:	689b      	ldr	r3, [r3, #8]
    3010:	429a      	cmp	r2, r3
    3012:	d2d5      	bcs.n	2fc0 <timer_process_counted+0x58>
	}
}
    3014:	3718      	adds	r7, #24
    3016:	46bd      	mov	sp, r7
    3018:	bd80      	pop	{r7, pc}
    301a:	bf00      	nop
    301c:	00002b3d 	.word	0x00002b3d
    3020:	00003ad5 	.word	0x00003ad5
    3024:	00002eb9 	.word	0x00002eb9

00003028 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	4603      	mov	r3, r0
    3030:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3032:	2300      	movs	r3, #0
    3034:	73fb      	strb	r3, [r7, #15]
    3036:	e029      	b.n	308c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3038:	f997 300f 	ldrsb.w	r3, [r7, #15]
    303c:	4a19      	ldr	r2, [pc, #100]	; (30a4 <_usb_d_find_ep+0x7c>)
    303e:	015b      	lsls	r3, r3, #5
    3040:	4413      	add	r3, r2
    3042:	3301      	adds	r3, #1
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	79fa      	ldrb	r2, [r7, #7]
    3048:	429a      	cmp	r2, r3
    304a:	d102      	bne.n	3052 <_usb_d_find_ep+0x2a>
			return i;
    304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3050:	e022      	b.n	3098 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3052:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3056:	4a13      	ldr	r2, [pc, #76]	; (30a4 <_usb_d_find_ep+0x7c>)
    3058:	015b      	lsls	r3, r3, #5
    305a:	4413      	add	r3, r2
    305c:	781b      	ldrb	r3, [r3, #0]
    305e:	2b00      	cmp	r3, #0
    3060:	d10e      	bne.n	3080 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3062:	79fb      	ldrb	r3, [r7, #7]
    3064:	f003 030f 	and.w	r3, r3, #15
    3068:	f997 200f 	ldrsb.w	r2, [r7, #15]
    306c:	490d      	ldr	r1, [pc, #52]	; (30a4 <_usb_d_find_ep+0x7c>)
    306e:	0152      	lsls	r2, r2, #5
    3070:	440a      	add	r2, r1
    3072:	3201      	adds	r2, #1
    3074:	7812      	ldrb	r2, [r2, #0]
    3076:	4293      	cmp	r3, r2
    3078:	d102      	bne.n	3080 <_usb_d_find_ep+0x58>
			return i;
    307a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    307e:	e00b      	b.n	3098 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3080:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3084:	b2db      	uxtb	r3, r3
    3086:	3301      	adds	r3, #1
    3088:	b2db      	uxtb	r3, r3
    308a:	73fb      	strb	r3, [r7, #15]
    308c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3090:	2b03      	cmp	r3, #3
    3092:	ddd1      	ble.n	3038 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3094:	f04f 33ff 	mov.w	r3, #4294967295
}
    3098:	4618      	mov	r0, r3
    309a:	3714      	adds	r7, #20
    309c:	46bd      	mov	sp, r7
    309e:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a2:	4770      	bx	lr
    30a4:	20000834 	.word	0x20000834

000030a8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    30a8:	b580      	push	{r7, lr}
    30aa:	b088      	sub	sp, #32
    30ac:	af00      	add	r7, sp, #0
    30ae:	60ba      	str	r2, [r7, #8]
    30b0:	607b      	str	r3, [r7, #4]
    30b2:	4603      	mov	r3, r0
    30b4:	73fb      	strb	r3, [r7, #15]
    30b6:	460b      	mov	r3, r1
    30b8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    30ba:	68bb      	ldr	r3, [r7, #8]
    30bc:	617b      	str	r3, [r7, #20]
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	61bb      	str	r3, [r7, #24]
    30c2:	7bbb      	ldrb	r3, [r7, #14]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d004      	beq.n	30d2 <_usb_d_trans+0x2a>
    30c8:	7bfb      	ldrb	r3, [r7, #15]
    30ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30ce:	b2db      	uxtb	r3, r3
    30d0:	e003      	b.n	30da <_usb_d_trans+0x32>
    30d2:	7bfb      	ldrb	r3, [r7, #15]
    30d4:	f003 030f 	and.w	r3, r3, #15
    30d8:	b2db      	uxtb	r3, r3
    30da:	773b      	strb	r3, [r7, #28]
    30dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    30e0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    30e2:	f107 0314 	add.w	r3, r7, #20
    30e6:	4618      	mov	r0, r3
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <_usb_d_trans+0x50>)
    30ea:	4798      	blx	r3
    30ec:	4603      	mov	r3, r0
}
    30ee:	4618      	mov	r0, r3
    30f0:	3720      	adds	r7, #32
    30f2:	46bd      	mov	sp, r7
    30f4:	bd80      	pop	{r7, pc}
    30f6:	bf00      	nop
    30f8:	0000ab39 	.word	0x0000ab39

000030fc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    30fc:	b480      	push	{r7}
    30fe:	b085      	sub	sp, #20
    3100:	af00      	add	r7, sp, #0
    3102:	60f8      	str	r0, [r7, #12]
    3104:	60b9      	str	r1, [r7, #8]
    3106:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3108:	2300      	movs	r3, #0
}
    310a:	4618      	mov	r0, r3
    310c:	3714      	adds	r7, #20
    310e:	46bd      	mov	sp, r7
    3110:	f85d 7b04 	ldr.w	r7, [sp], #4
    3114:	4770      	bx	lr
	...

00003118 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3118:	b580      	push	{r7, lr}
    311a:	b086      	sub	sp, #24
    311c:	af00      	add	r7, sp, #0
    311e:	4603      	mov	r3, r0
    3120:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3122:	79fb      	ldrb	r3, [r7, #7]
    3124:	4618      	mov	r0, r3
    3126:	4b2a      	ldr	r3, [pc, #168]	; (31d0 <usb_d_cb_trans_setup+0xb8>)
    3128:	4798      	blx	r3
    312a:	4603      	mov	r3, r0
    312c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    312e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3132:	015b      	lsls	r3, r3, #5
    3134:	4a27      	ldr	r2, [pc, #156]	; (31d4 <usb_d_cb_trans_setup+0xbc>)
    3136:	4413      	add	r3, r2
    3138:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    313a:	693b      	ldr	r3, [r7, #16]
    313c:	330c      	adds	r3, #12
    313e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3140:	79fb      	ldrb	r3, [r7, #7]
    3142:	68f9      	ldr	r1, [r7, #12]
    3144:	4618      	mov	r0, r3
    3146:	4b24      	ldr	r3, [pc, #144]	; (31d8 <usb_d_cb_trans_setup+0xc0>)
    3148:	4798      	blx	r3
    314a:	4603      	mov	r3, r0
    314c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    314e:	7afb      	ldrb	r3, [r7, #11]
    3150:	2b08      	cmp	r3, #8
    3152:	d00d      	beq.n	3170 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3154:	79fb      	ldrb	r3, [r7, #7]
    3156:	2101      	movs	r1, #1
    3158:	4618      	mov	r0, r3
    315a:	4b20      	ldr	r3, [pc, #128]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    315c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    315e:	79fb      	ldrb	r3, [r7, #7]
    3160:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3164:	b2db      	uxtb	r3, r3
    3166:	2101      	movs	r1, #1
    3168:	4618      	mov	r0, r3
    316a:	4b1c      	ldr	r3, [pc, #112]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    316c:	4798      	blx	r3
		return;
    316e:	e02b      	b.n	31c8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3170:	79fb      	ldrb	r3, [r7, #7]
    3172:	2100      	movs	r1, #0
    3174:	4618      	mov	r0, r3
    3176:	4b19      	ldr	r3, [pc, #100]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    3178:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    317a:	79fb      	ldrb	r3, [r7, #7]
    317c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3180:	b2db      	uxtb	r3, r3
    3182:	2100      	movs	r1, #0
    3184:	4618      	mov	r0, r3
    3186:	4b15      	ldr	r3, [pc, #84]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    3188:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    318a:	693b      	ldr	r3, [r7, #16]
    318c:	2201      	movs	r2, #1
    318e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3190:	693b      	ldr	r3, [r7, #16]
    3192:	695b      	ldr	r3, [r3, #20]
    3194:	79fa      	ldrb	r2, [r7, #7]
    3196:	68f9      	ldr	r1, [r7, #12]
    3198:	4610      	mov	r0, r2
    319a:	4798      	blx	r3
    319c:	4603      	mov	r3, r0
    319e:	f083 0301 	eor.w	r3, r3, #1
    31a2:	b2db      	uxtb	r3, r3
    31a4:	2b00      	cmp	r3, #0
    31a6:	d00f      	beq.n	31c8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    31a8:	693b      	ldr	r3, [r7, #16]
    31aa:	2205      	movs	r2, #5
    31ac:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    31ae:	79fb      	ldrb	r3, [r7, #7]
    31b0:	2101      	movs	r1, #1
    31b2:	4618      	mov	r0, r3
    31b4:	4b09      	ldr	r3, [pc, #36]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    31b6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    31b8:	79fb      	ldrb	r3, [r7, #7]
    31ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31be:	b2db      	uxtb	r3, r3
    31c0:	2101      	movs	r1, #1
    31c2:	4618      	mov	r0, r3
    31c4:	4b05      	ldr	r3, [pc, #20]	; (31dc <usb_d_cb_trans_setup+0xc4>)
    31c6:	4798      	blx	r3
	}
}
    31c8:	3718      	adds	r7, #24
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	bf00      	nop
    31d0:	00003029 	.word	0x00003029
    31d4:	20000834 	.word	0x20000834
    31d8:	0000aa91 	.word	0x0000aa91
    31dc:	0000a909 	.word	0x0000a909

000031e0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b084      	sub	sp, #16
    31e4:	af00      	add	r7, sp, #0
    31e6:	4603      	mov	r3, r0
    31e8:	6039      	str	r1, [r7, #0]
    31ea:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31ec:	79fb      	ldrb	r3, [r7, #7]
    31ee:	4618      	mov	r0, r3
    31f0:	4b0d      	ldr	r3, [pc, #52]	; (3228 <usb_d_cb_trans_more+0x48>)
    31f2:	4798      	blx	r3
    31f4:	4603      	mov	r3, r0
    31f6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31fc:	015b      	lsls	r3, r3, #5
    31fe:	4a0b      	ldr	r2, [pc, #44]	; (322c <usb_d_cb_trans_more+0x4c>)
    3200:	4413      	add	r3, r2
    3202:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3204:	68bb      	ldr	r3, [r7, #8]
    3206:	789b      	ldrb	r3, [r3, #2]
    3208:	2b03      	cmp	r3, #3
    320a:	d107      	bne.n	321c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    320c:	68bb      	ldr	r3, [r7, #8]
    320e:	699b      	ldr	r3, [r3, #24]
    3210:	79fa      	ldrb	r2, [r7, #7]
    3212:	6839      	ldr	r1, [r7, #0]
    3214:	4610      	mov	r0, r2
    3216:	4798      	blx	r3
    3218:	4603      	mov	r3, r0
    321a:	e000      	b.n	321e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    321c:	2300      	movs	r3, #0
}
    321e:	4618      	mov	r0, r3
    3220:	3710      	adds	r7, #16
    3222:	46bd      	mov	sp, r7
    3224:	bd80      	pop	{r7, pc}
    3226:	bf00      	nop
    3228:	00003029 	.word	0x00003029
    322c:	20000834 	.word	0x20000834

00003230 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3230:	b590      	push	{r4, r7, lr}
    3232:	b087      	sub	sp, #28
    3234:	af02      	add	r7, sp, #8
    3236:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3238:	687b      	ldr	r3, [r7, #4]
    323a:	789b      	ldrb	r3, [r3, #2]
    323c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	7b1b      	ldrb	r3, [r3, #12]
    3242:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3246:	2b00      	cmp	r3, #0
    3248:	bf14      	ite	ne
    324a:	2301      	movne	r3, #1
    324c:	2300      	moveq	r3, #0
    324e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3250:	7bfb      	ldrb	r3, [r7, #15]
    3252:	2b03      	cmp	r3, #3
    3254:	d13a      	bne.n	32cc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3256:	687b      	ldr	r3, [r7, #4]
    3258:	69db      	ldr	r3, [r3, #28]
    325a:	687a      	ldr	r2, [r7, #4]
    325c:	7850      	ldrb	r0, [r2, #1]
    325e:	687a      	ldr	r2, [r7, #4]
    3260:	320c      	adds	r2, #12
    3262:	2101      	movs	r1, #1
    3264:	4798      	blx	r3
    3266:	4603      	mov	r3, r0
    3268:	737b      	strb	r3, [r7, #13]
		if (err) {
    326a:	7b7b      	ldrb	r3, [r7, #13]
    326c:	2b00      	cmp	r3, #0
    326e:	d015      	beq.n	329c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	2205      	movs	r2, #5
    3274:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	2202      	movs	r2, #2
    327a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    327c:	7bbb      	ldrb	r3, [r7, #14]
    327e:	2b00      	cmp	r3, #0
    3280:	d002      	beq.n	3288 <usb_d_ctrl_trans_done+0x58>
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	785b      	ldrb	r3, [r3, #1]
    3286:	e004      	b.n	3292 <usb_d_ctrl_trans_done+0x62>
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	785b      	ldrb	r3, [r3, #1]
    328c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3290:	b2db      	uxtb	r3, r3
    3292:	2101      	movs	r1, #1
    3294:	4618      	mov	r0, r3
    3296:	4b15      	ldr	r3, [pc, #84]	; (32ec <usb_d_ctrl_trans_done+0xbc>)
    3298:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    329a:	e022      	b.n	32e2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	2204      	movs	r2, #4
    32a0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	7858      	ldrb	r0, [r3, #1]
    32a6:	7bbb      	ldrb	r3, [r7, #14]
    32a8:	2b00      	cmp	r3, #0
    32aa:	bf14      	ite	ne
    32ac:	2301      	movne	r3, #1
    32ae:	2300      	moveq	r3, #0
    32b0:	b2db      	uxtb	r3, r3
    32b2:	f083 0301 	eor.w	r3, r3, #1
    32b6:	b2db      	uxtb	r3, r3
    32b8:	f003 0301 	and.w	r3, r3, #1
    32bc:	b2d9      	uxtb	r1, r3
    32be:	2301      	movs	r3, #1
    32c0:	9300      	str	r3, [sp, #0]
    32c2:	2300      	movs	r3, #0
    32c4:	2200      	movs	r2, #0
    32c6:	4c0a      	ldr	r4, [pc, #40]	; (32f0 <usb_d_ctrl_trans_done+0xc0>)
    32c8:	47a0      	blx	r4
}
    32ca:	e00a      	b.n	32e2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	69db      	ldr	r3, [r3, #28]
    32d0:	687a      	ldr	r2, [r7, #4]
    32d2:	7850      	ldrb	r0, [r2, #1]
    32d4:	687a      	ldr	r2, [r7, #4]
    32d6:	320c      	adds	r2, #12
    32d8:	2100      	movs	r1, #0
    32da:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	2202      	movs	r2, #2
    32e0:	709a      	strb	r2, [r3, #2]
}
    32e2:	bf00      	nop
    32e4:	3714      	adds	r7, #20
    32e6:	46bd      	mov	sp, r7
    32e8:	bd90      	pop	{r4, r7, pc}
    32ea:	bf00      	nop
    32ec:	0000a909 	.word	0x0000a909
    32f0:	000030a9 	.word	0x000030a9

000032f4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    32f4:	b580      	push	{r7, lr}
    32f6:	b086      	sub	sp, #24
    32f8:	af00      	add	r7, sp, #0
    32fa:	4603      	mov	r3, r0
    32fc:	60b9      	str	r1, [r7, #8]
    32fe:	607a      	str	r2, [r7, #4]
    3300:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3302:	7bfb      	ldrb	r3, [r7, #15]
    3304:	4618      	mov	r0, r3
    3306:	4b2f      	ldr	r3, [pc, #188]	; (33c4 <_usb_d_cb_trans_done+0xd0>)
    3308:	4798      	blx	r3
    330a:	4603      	mov	r3, r0
    330c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    330e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3312:	015b      	lsls	r3, r3, #5
    3314:	4a2c      	ldr	r2, [pc, #176]	; (33c8 <_usb_d_cb_trans_done+0xd4>)
    3316:	4413      	add	r3, r2
    3318:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    331a:	68bb      	ldr	r3, [r7, #8]
    331c:	2b00      	cmp	r3, #0
    331e:	d10e      	bne.n	333e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3320:	693b      	ldr	r3, [r7, #16]
    3322:	2200      	movs	r2, #0
    3324:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3326:	693b      	ldr	r3, [r7, #16]
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	2b00      	cmp	r3, #0
    332c:	d103      	bne.n	3336 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    332e:	6938      	ldr	r0, [r7, #16]
    3330:	4b26      	ldr	r3, [pc, #152]	; (33cc <_usb_d_cb_trans_done+0xd8>)
    3332:	4798      	blx	r3
			return;
    3334:	e043      	b.n	33be <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3336:	693b      	ldr	r3, [r7, #16]
    3338:	2201      	movs	r2, #1
    333a:	709a      	strb	r2, [r3, #2]
    333c:	e038      	b.n	33b0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    333e:	68bb      	ldr	r3, [r7, #8]
    3340:	2b01      	cmp	r3, #1
    3342:	d113      	bne.n	336c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3344:	693b      	ldr	r3, [r7, #16]
    3346:	2202      	movs	r2, #2
    3348:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    334a:	693b      	ldr	r3, [r7, #16]
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	2b00      	cmp	r3, #0
    3350:	d108      	bne.n	3364 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3352:	693b      	ldr	r3, [r7, #16]
    3354:	2202      	movs	r2, #2
    3356:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3358:	7bfb      	ldrb	r3, [r7, #15]
    335a:	2100      	movs	r1, #0
    335c:	4618      	mov	r0, r3
    335e:	4b1c      	ldr	r3, [pc, #112]	; (33d0 <_usb_d_cb_trans_done+0xdc>)
    3360:	4798      	blx	r3
    3362:	e025      	b.n	33b0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3364:	693b      	ldr	r3, [r7, #16]
    3366:	2205      	movs	r2, #5
    3368:	709a      	strb	r2, [r3, #2]
    336a:	e021      	b.n	33b0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    336c:	68bb      	ldr	r3, [r7, #8]
    336e:	2b02      	cmp	r3, #2
    3370:	d10e      	bne.n	3390 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3372:	693b      	ldr	r3, [r7, #16]
    3374:	2204      	movs	r2, #4
    3376:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3378:	693b      	ldr	r3, [r7, #16]
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	2b00      	cmp	r3, #0
    337e:	d103      	bne.n	3388 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3380:	693b      	ldr	r3, [r7, #16]
    3382:	2202      	movs	r2, #2
    3384:	709a      	strb	r2, [r3, #2]
			return;
    3386:	e01a      	b.n	33be <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3388:	693b      	ldr	r3, [r7, #16]
    338a:	2201      	movs	r2, #1
    338c:	709a      	strb	r2, [r3, #2]
    338e:	e00f      	b.n	33b0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3390:	68bb      	ldr	r3, [r7, #8]
    3392:	2b03      	cmp	r3, #3
    3394:	d106      	bne.n	33a4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3396:	693b      	ldr	r3, [r7, #16]
    3398:	2200      	movs	r2, #0
    339a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    339c:	693b      	ldr	r3, [r7, #16]
    339e:	2205      	movs	r2, #5
    33a0:	70da      	strb	r2, [r3, #3]
    33a2:	e005      	b.n	33b0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    33a4:	693b      	ldr	r3, [r7, #16]
    33a6:	2206      	movs	r2, #6
    33a8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    33aa:	693b      	ldr	r3, [r7, #16]
    33ac:	2206      	movs	r2, #6
    33ae:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    33b0:	693b      	ldr	r3, [r7, #16]
    33b2:	69db      	ldr	r3, [r3, #28]
    33b4:	693a      	ldr	r2, [r7, #16]
    33b6:	78d1      	ldrb	r1, [r2, #3]
    33b8:	687a      	ldr	r2, [r7, #4]
    33ba:	7bf8      	ldrb	r0, [r7, #15]
    33bc:	4798      	blx	r3
}
    33be:	3718      	adds	r7, #24
    33c0:	46bd      	mov	sp, r7
    33c2:	bd80      	pop	{r7, pc}
    33c4:	00003029 	.word	0x00003029
    33c8:	20000834 	.word	0x20000834
    33cc:	00003231 	.word	0x00003231
    33d0:	0000a909 	.word	0x0000a909

000033d4 <usb_d_init>:

int32_t usb_d_init(void)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b082      	sub	sp, #8
    33d8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    33da:	4b21      	ldr	r3, [pc, #132]	; (3460 <usb_d_init+0x8c>)
    33dc:	4798      	blx	r3
    33de:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    33e0:	683b      	ldr	r3, [r7, #0]
    33e2:	2b00      	cmp	r3, #0
    33e4:	da01      	bge.n	33ea <usb_d_init+0x16>
		return rc;
    33e6:	683b      	ldr	r3, [r7, #0]
    33e8:	e036      	b.n	3458 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    33ea:	2280      	movs	r2, #128	; 0x80
    33ec:	2100      	movs	r1, #0
    33ee:	481d      	ldr	r0, [pc, #116]	; (3464 <usb_d_init+0x90>)
    33f0:	4b1d      	ldr	r3, [pc, #116]	; (3468 <usb_d_init+0x94>)
    33f2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33f4:	2300      	movs	r3, #0
    33f6:	71fb      	strb	r3, [r7, #7]
    33f8:	e01e      	b.n	3438 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    33fa:	79fb      	ldrb	r3, [r7, #7]
    33fc:	4a19      	ldr	r2, [pc, #100]	; (3464 <usb_d_init+0x90>)
    33fe:	015b      	lsls	r3, r3, #5
    3400:	4413      	add	r3, r2
    3402:	3301      	adds	r3, #1
    3404:	22ff      	movs	r2, #255	; 0xff
    3406:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3408:	79fb      	ldrb	r3, [r7, #7]
    340a:	4a16      	ldr	r2, [pc, #88]	; (3464 <usb_d_init+0x90>)
    340c:	015b      	lsls	r3, r3, #5
    340e:	4413      	add	r3, r2
    3410:	3314      	adds	r3, #20
    3412:	4a16      	ldr	r2, [pc, #88]	; (346c <usb_d_init+0x98>)
    3414:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3416:	79fb      	ldrb	r3, [r7, #7]
    3418:	4a12      	ldr	r2, [pc, #72]	; (3464 <usb_d_init+0x90>)
    341a:	015b      	lsls	r3, r3, #5
    341c:	4413      	add	r3, r2
    341e:	3318      	adds	r3, #24
    3420:	4a12      	ldr	r2, [pc, #72]	; (346c <usb_d_init+0x98>)
    3422:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3424:	79fb      	ldrb	r3, [r7, #7]
    3426:	4a0f      	ldr	r2, [pc, #60]	; (3464 <usb_d_init+0x90>)
    3428:	015b      	lsls	r3, r3, #5
    342a:	4413      	add	r3, r2
    342c:	331c      	adds	r3, #28
    342e:	4a0f      	ldr	r2, [pc, #60]	; (346c <usb_d_init+0x98>)
    3430:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3432:	79fb      	ldrb	r3, [r7, #7]
    3434:	3301      	adds	r3, #1
    3436:	71fb      	strb	r3, [r7, #7]
    3438:	79fb      	ldrb	r3, [r7, #7]
    343a:	2b03      	cmp	r3, #3
    343c:	d9dd      	bls.n	33fa <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    343e:	490c      	ldr	r1, [pc, #48]	; (3470 <usb_d_init+0x9c>)
    3440:	2000      	movs	r0, #0
    3442:	4b0c      	ldr	r3, [pc, #48]	; (3474 <usb_d_init+0xa0>)
    3444:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3446:	490c      	ldr	r1, [pc, #48]	; (3478 <usb_d_init+0xa4>)
    3448:	2001      	movs	r0, #1
    344a:	4b0a      	ldr	r3, [pc, #40]	; (3474 <usb_d_init+0xa0>)
    344c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    344e:	490b      	ldr	r1, [pc, #44]	; (347c <usb_d_init+0xa8>)
    3450:	2002      	movs	r0, #2
    3452:	4b08      	ldr	r3, [pc, #32]	; (3474 <usb_d_init+0xa0>)
    3454:	4798      	blx	r3
	return ERR_NONE;
    3456:	2300      	movs	r3, #0
}
    3458:	4618      	mov	r0, r3
    345a:	3708      	adds	r7, #8
    345c:	46bd      	mov	sp, r7
    345e:	bd80      	pop	{r7, pc}
    3460:	0000a151 	.word	0x0000a151
    3464:	20000834 	.word	0x20000834
    3468:	0000ed01 	.word	0x0000ed01
    346c:	000030fd 	.word	0x000030fd
    3470:	00003119 	.word	0x00003119
    3474:	0000ad99 	.word	0x0000ad99
    3478:	000031e1 	.word	0x000031e1
    347c:	000032f5 	.word	0x000032f5

00003480 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3480:	b580      	push	{r7, lr}
    3482:	b082      	sub	sp, #8
    3484:	af00      	add	r7, sp, #0
    3486:	4603      	mov	r3, r0
    3488:	6039      	str	r1, [r7, #0]
    348a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    348c:	79fb      	ldrb	r3, [r7, #7]
    348e:	6839      	ldr	r1, [r7, #0]
    3490:	4618      	mov	r0, r3
    3492:	4b03      	ldr	r3, [pc, #12]	; (34a0 <usb_d_register_callback+0x20>)
    3494:	4798      	blx	r3
}
    3496:	bf00      	nop
    3498:	3708      	adds	r7, #8
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop
    34a0:	0000ad51 	.word	0x0000ad51

000034a4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    34a8:	4b02      	ldr	r3, [pc, #8]	; (34b4 <usb_d_enable+0x10>)
    34aa:	4798      	blx	r3
    34ac:	4603      	mov	r3, r0
}
    34ae:	4618      	mov	r0, r3
    34b0:	bd80      	pop	{r7, pc}
    34b2:	bf00      	nop
    34b4:	0000a241 	.word	0x0000a241

000034b8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    34bc:	4b01      	ldr	r3, [pc, #4]	; (34c4 <usb_d_attach+0xc>)
    34be:	4798      	blx	r3
}
    34c0:	bf00      	nop
    34c2:	bd80      	pop	{r7, pc}
    34c4:	0000a2c5 	.word	0x0000a2c5

000034c8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    34c8:	b580      	push	{r7, lr}
    34ca:	b082      	sub	sp, #8
    34cc:	af00      	add	r7, sp, #0
    34ce:	4603      	mov	r3, r0
    34d0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    34d2:	79fb      	ldrb	r3, [r7, #7]
    34d4:	4618      	mov	r0, r3
    34d6:	4b03      	ldr	r3, [pc, #12]	; (34e4 <usb_d_set_address+0x1c>)
    34d8:	4798      	blx	r3
}
    34da:	bf00      	nop
    34dc:	3708      	adds	r7, #8
    34de:	46bd      	mov	sp, r7
    34e0:	bd80      	pop	{r7, pc}
    34e2:	bf00      	nop
    34e4:	0000a2d9 	.word	0x0000a2d9

000034e8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    34e8:	b580      	push	{r7, lr}
    34ea:	b082      	sub	sp, #8
    34ec:	af00      	add	r7, sp, #0
    34ee:	4603      	mov	r3, r0
    34f0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    34f2:	79fb      	ldrb	r3, [r7, #7]
    34f4:	b29b      	uxth	r3, r3
    34f6:	461a      	mov	r2, r3
    34f8:	2100      	movs	r1, #0
    34fa:	2000      	movs	r0, #0
    34fc:	4b03      	ldr	r3, [pc, #12]	; (350c <usb_d_ep0_init+0x24>)
    34fe:	4798      	blx	r3
    3500:	4603      	mov	r3, r0
}
    3502:	4618      	mov	r0, r3
    3504:	3708      	adds	r7, #8
    3506:	46bd      	mov	sp, r7
    3508:	bd80      	pop	{r7, pc}
    350a:	bf00      	nop
    350c:	00003511 	.word	0x00003511

00003510 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3510:	b580      	push	{r7, lr}
    3512:	b086      	sub	sp, #24
    3514:	af00      	add	r7, sp, #0
    3516:	4603      	mov	r3, r0
    3518:	71fb      	strb	r3, [r7, #7]
    351a:	460b      	mov	r3, r1
    351c:	71bb      	strb	r3, [r7, #6]
    351e:	4613      	mov	r3, r2
    3520:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3522:	79fb      	ldrb	r3, [r7, #7]
    3524:	4618      	mov	r0, r3
    3526:	4b1e      	ldr	r3, [pc, #120]	; (35a0 <usb_d_ep_init+0x90>)
    3528:	4798      	blx	r3
    352a:	4603      	mov	r3, r0
    352c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    352e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3532:	015b      	lsls	r3, r3, #5
    3534:	4a1b      	ldr	r2, [pc, #108]	; (35a4 <usb_d_ep_init+0x94>)
    3536:	4413      	add	r3, r2
    3538:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    353a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    353e:	2b00      	cmp	r3, #0
    3540:	db02      	blt.n	3548 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3542:	f06f 0313 	mvn.w	r3, #19
    3546:	e027      	b.n	3598 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3548:	20ff      	movs	r0, #255	; 0xff
    354a:	4b15      	ldr	r3, [pc, #84]	; (35a0 <usb_d_ep_init+0x90>)
    354c:	4798      	blx	r3
    354e:	4603      	mov	r3, r0
    3550:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3552:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3556:	2b00      	cmp	r3, #0
    3558:	da02      	bge.n	3560 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    355a:	f06f 0314 	mvn.w	r3, #20
    355e:	e01b      	b.n	3598 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3560:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3564:	015b      	lsls	r3, r3, #5
    3566:	4a0f      	ldr	r2, [pc, #60]	; (35a4 <usb_d_ep_init+0x94>)
    3568:	4413      	add	r3, r2
    356a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    356c:	88ba      	ldrh	r2, [r7, #4]
    356e:	79b9      	ldrb	r1, [r7, #6]
    3570:	79fb      	ldrb	r3, [r7, #7]
    3572:	4618      	mov	r0, r3
    3574:	4b0c      	ldr	r3, [pc, #48]	; (35a8 <usb_d_ep_init+0x98>)
    3576:	4798      	blx	r3
    3578:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    357a:	68fb      	ldr	r3, [r7, #12]
    357c:	2b00      	cmp	r3, #0
    357e:	da01      	bge.n	3584 <usb_d_ep_init+0x74>
		return rc;
    3580:	68fb      	ldr	r3, [r7, #12]
    3582:	e009      	b.n	3598 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3584:	693b      	ldr	r3, [r7, #16]
    3586:	79fa      	ldrb	r2, [r7, #7]
    3588:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    358a:	79bb      	ldrb	r3, [r7, #6]
    358c:	f003 0303 	and.w	r3, r3, #3
    3590:	b2da      	uxtb	r2, r3
    3592:	693b      	ldr	r3, [r7, #16]
    3594:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3596:	2300      	movs	r3, #0
}
    3598:	4618      	mov	r0, r3
    359a:	3718      	adds	r7, #24
    359c:	46bd      	mov	sp, r7
    359e:	bd80      	pop	{r7, pc}
    35a0:	00003029 	.word	0x00003029
    35a4:	20000834 	.word	0x20000834
    35a8:	0000a379 	.word	0x0000a379

000035ac <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    35ac:	b580      	push	{r7, lr}
    35ae:	b084      	sub	sp, #16
    35b0:	af00      	add	r7, sp, #0
    35b2:	4603      	mov	r3, r0
    35b4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35b6:	79fb      	ldrb	r3, [r7, #7]
    35b8:	4618      	mov	r0, r3
    35ba:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <usb_d_ep_deinit+0x44>)
    35bc:	4798      	blx	r3
    35be:	4603      	mov	r3, r0
    35c0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35c6:	015b      	lsls	r3, r3, #5
    35c8:	4a0a      	ldr	r2, [pc, #40]	; (35f4 <usb_d_ep_deinit+0x48>)
    35ca:	4413      	add	r3, r2
    35cc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    35ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35d2:	2b00      	cmp	r3, #0
    35d4:	db07      	blt.n	35e6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    35d6:	79fb      	ldrb	r3, [r7, #7]
    35d8:	4618      	mov	r0, r3
    35da:	4b07      	ldr	r3, [pc, #28]	; (35f8 <usb_d_ep_deinit+0x4c>)
    35dc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    35de:	68bb      	ldr	r3, [r7, #8]
    35e0:	22ff      	movs	r2, #255	; 0xff
    35e2:	705a      	strb	r2, [r3, #1]
    35e4:	e000      	b.n	35e8 <usb_d_ep_deinit+0x3c>
		return;
    35e6:	bf00      	nop
}
    35e8:	3710      	adds	r7, #16
    35ea:	46bd      	mov	sp, r7
    35ec:	bd80      	pop	{r7, pc}
    35ee:	bf00      	nop
    35f0:	00003029 	.word	0x00003029
    35f4:	20000834 	.word	0x20000834
    35f8:	0000a4ad 	.word	0x0000a4ad

000035fc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    35fc:	b580      	push	{r7, lr}
    35fe:	b086      	sub	sp, #24
    3600:	af00      	add	r7, sp, #0
    3602:	4603      	mov	r3, r0
    3604:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3606:	79fb      	ldrb	r3, [r7, #7]
    3608:	4618      	mov	r0, r3
    360a:	4b15      	ldr	r3, [pc, #84]	; (3660 <usb_d_ep_enable+0x64>)
    360c:	4798      	blx	r3
    360e:	4603      	mov	r3, r0
    3610:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3612:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3616:	015b      	lsls	r3, r3, #5
    3618:	4a12      	ldr	r2, [pc, #72]	; (3664 <usb_d_ep_enable+0x68>)
    361a:	4413      	add	r3, r2
    361c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    361e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3622:	2b00      	cmp	r3, #0
    3624:	da02      	bge.n	362c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3626:	f06f 0311 	mvn.w	r3, #17
    362a:	e014      	b.n	3656 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    362c:	693b      	ldr	r3, [r7, #16]
    362e:	781b      	ldrb	r3, [r3, #0]
    3630:	2b00      	cmp	r3, #0
    3632:	d101      	bne.n	3638 <usb_d_ep_enable+0x3c>
    3634:	2202      	movs	r2, #2
    3636:	e000      	b.n	363a <usb_d_ep_enable+0x3e>
    3638:	2201      	movs	r2, #1
    363a:	693b      	ldr	r3, [r7, #16]
    363c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    363e:	79fb      	ldrb	r3, [r7, #7]
    3640:	4618      	mov	r0, r3
    3642:	4b09      	ldr	r3, [pc, #36]	; (3668 <usb_d_ep_enable+0x6c>)
    3644:	4798      	blx	r3
    3646:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3648:	68fb      	ldr	r3, [r7, #12]
    364a:	2b00      	cmp	r3, #0
    364c:	da02      	bge.n	3654 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    364e:	693b      	ldr	r3, [r7, #16]
    3650:	2200      	movs	r2, #0
    3652:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3654:	68fb      	ldr	r3, [r7, #12]
}
    3656:	4618      	mov	r0, r3
    3658:	3718      	adds	r7, #24
    365a:	46bd      	mov	sp, r7
    365c:	bd80      	pop	{r7, pc}
    365e:	bf00      	nop
    3660:	00003029 	.word	0x00003029
    3664:	20000834 	.word	0x20000834
    3668:	0000a591 	.word	0x0000a591

0000366c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    366c:	b590      	push	{r4, r7, lr}
    366e:	b08d      	sub	sp, #52	; 0x34
    3670:	af02      	add	r7, sp, #8
    3672:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	7a1b      	ldrb	r3, [r3, #8]
    3678:	4618      	mov	r0, r3
    367a:	4b51      	ldr	r3, [pc, #324]	; (37c0 <usb_d_ep_transfer+0x154>)
    367c:	4798      	blx	r3
    367e:	4603      	mov	r3, r0
    3680:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3682:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3686:	015b      	lsls	r3, r3, #5
    3688:	4a4e      	ldr	r2, [pc, #312]	; (37c4 <usb_d_ep_transfer+0x158>)
    368a:	4413      	add	r3, r2
    368c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	7a1b      	ldrb	r3, [r3, #8]
    3692:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3696:	2b00      	cmp	r3, #0
    3698:	bf14      	ite	ne
    369a:	2301      	movne	r3, #1
    369c:	2300      	moveq	r3, #0
    369e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	7a5b      	ldrb	r3, [r3, #9]
    36a6:	2b00      	cmp	r3, #0
    36a8:	bf14      	ite	ne
    36aa:	2301      	movne	r3, #1
    36ac:	2300      	moveq	r3, #0
    36ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	685b      	ldr	r3, [r3, #4]
    36b6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    36b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    36bc:	2b00      	cmp	r3, #0
    36be:	da02      	bge.n	36c6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    36c0:	f06f 0311 	mvn.w	r3, #17
    36c4:	e077      	b.n	37b6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    36c6:	f107 0308 	add.w	r3, r7, #8
    36ca:	4618      	mov	r0, r3
    36cc:	4b3e      	ldr	r3, [pc, #248]	; (37c8 <usb_d_ep_transfer+0x15c>)
    36ce:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    36d0:	69bb      	ldr	r3, [r7, #24]
    36d2:	789b      	ldrb	r3, [r3, #2]
    36d4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    36d6:	7bfb      	ldrb	r3, [r7, #15]
    36d8:	b2db      	uxtb	r3, r3
    36da:	2b01      	cmp	r3, #1
    36dc:	d10c      	bne.n	36f8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    36de:	69bb      	ldr	r3, [r7, #24]
    36e0:	2203      	movs	r2, #3
    36e2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    36e4:	f107 0308 	add.w	r3, r7, #8
    36e8:	4618      	mov	r0, r3
    36ea:	4b38      	ldr	r3, [pc, #224]	; (37cc <usb_d_ep_transfer+0x160>)
    36ec:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36ee:	69bb      	ldr	r3, [r7, #24]
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d151      	bne.n	379a <usb_d_ep_transfer+0x12e>
    36f6:	e017      	b.n	3728 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    36f8:	f107 0308 	add.w	r3, r7, #8
    36fc:	4618      	mov	r0, r3
    36fe:	4b33      	ldr	r3, [pc, #204]	; (37cc <usb_d_ep_transfer+0x160>)
    3700:	4798      	blx	r3
		switch (state) {
    3702:	7bfb      	ldrb	r3, [r7, #15]
    3704:	b2db      	uxtb	r3, r3
    3706:	2b05      	cmp	r3, #5
    3708:	d004      	beq.n	3714 <usb_d_ep_transfer+0xa8>
    370a:	2b06      	cmp	r3, #6
    370c:	d004      	beq.n	3718 <usb_d_ep_transfer+0xac>
    370e:	2b00      	cmp	r3, #0
    3710:	d005      	beq.n	371e <usb_d_ep_transfer+0xb2>
    3712:	e007      	b.n	3724 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3714:	2302      	movs	r3, #2
    3716:	e04e      	b.n	37b6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3718:	f06f 030f 	mvn.w	r3, #15
    371c:	e04b      	b.n	37b6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    371e:	f06f 0312 	mvn.w	r3, #18
    3722:	e048      	b.n	37b6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3724:	2301      	movs	r3, #1
    3726:	e046      	b.n	37b6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3728:	69bb      	ldr	r3, [r7, #24]
    372a:	7c9b      	ldrb	r3, [r3, #18]
    372c:	b29a      	uxth	r2, r3
    372e:	69bb      	ldr	r3, [r7, #24]
    3730:	7cdb      	ldrb	r3, [r3, #19]
    3732:	b29b      	uxth	r3, r3
    3734:	021b      	lsls	r3, r3, #8
    3736:	b29b      	uxth	r3, r3
    3738:	4413      	add	r3, r2
    373a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    373c:	8afb      	ldrh	r3, [r7, #22]
    373e:	2b00      	cmp	r3, #0
    3740:	d10b      	bne.n	375a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3742:	2301      	movs	r3, #1
    3744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3748:	2300      	movs	r3, #0
    374a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    374c:	2301      	movs	r3, #1
    374e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3752:	69bb      	ldr	r3, [r7, #24]
    3754:	2204      	movs	r2, #4
    3756:	709a      	strb	r2, [r3, #2]
    3758:	e01f      	b.n	379a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    375a:	69bb      	ldr	r3, [r7, #24]
    375c:	7b1b      	ldrb	r3, [r3, #12]
    375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3762:	2b00      	cmp	r3, #0
    3764:	bf14      	ite	ne
    3766:	2301      	movne	r3, #1
    3768:	2300      	moveq	r3, #0
    376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    376e:	8afa      	ldrh	r2, [r7, #22]
    3770:	6a3b      	ldr	r3, [r7, #32]
    3772:	429a      	cmp	r2, r3
    3774:	d201      	bcs.n	377a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3776:	8afb      	ldrh	r3, [r7, #22]
    3778:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    377a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    377e:	2b00      	cmp	r3, #0
    3780:	d008      	beq.n	3794 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3782:	8afa      	ldrh	r2, [r7, #22]
    3784:	6a3b      	ldr	r3, [r7, #32]
    3786:	429a      	cmp	r2, r3
    3788:	bf8c      	ite	hi
    378a:	2301      	movhi	r3, #1
    378c:	2300      	movls	r3, #0
    378e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3792:	e002      	b.n	379a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3794:	2300      	movs	r3, #0
    3796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	7a18      	ldrb	r0, [r3, #8]
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	681a      	ldr	r2, [r3, #0]
    37a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    37a6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    37aa:	9300      	str	r3, [sp, #0]
    37ac:	6a3b      	ldr	r3, [r7, #32]
    37ae:	4c08      	ldr	r4, [pc, #32]	; (37d0 <usb_d_ep_transfer+0x164>)
    37b0:	47a0      	blx	r4
    37b2:	6138      	str	r0, [r7, #16]
	return rc;
    37b4:	693b      	ldr	r3, [r7, #16]
}
    37b6:	4618      	mov	r0, r3
    37b8:	372c      	adds	r7, #44	; 0x2c
    37ba:	46bd      	mov	sp, r7
    37bc:	bd90      	pop	{r4, r7, pc}
    37be:	bf00      	nop
    37c0:	00003029 	.word	0x00003029
    37c4:	20000834 	.word	0x20000834
    37c8:	0000b505 	.word	0x0000b505
    37cc:	0000b52b 	.word	0x0000b52b
    37d0:	000030a9 	.word	0x000030a9

000037d4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    37d4:	b580      	push	{r7, lr}
    37d6:	b084      	sub	sp, #16
    37d8:	af00      	add	r7, sp, #0
    37da:	4603      	mov	r3, r0
    37dc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37de:	79fb      	ldrb	r3, [r7, #7]
    37e0:	4618      	mov	r0, r3
    37e2:	4b0e      	ldr	r3, [pc, #56]	; (381c <usb_d_ep_abort+0x48>)
    37e4:	4798      	blx	r3
    37e6:	4603      	mov	r3, r0
    37e8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37ee:	015b      	lsls	r3, r3, #5
    37f0:	4a0b      	ldr	r2, [pc, #44]	; (3820 <usb_d_ep_abort+0x4c>)
    37f2:	4413      	add	r3, r2
    37f4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    37f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37fa:	2b00      	cmp	r3, #0
    37fc:	db0a      	blt.n	3814 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    37fe:	79fb      	ldrb	r3, [r7, #7]
    3800:	4618      	mov	r0, r3
    3802:	4b08      	ldr	r3, [pc, #32]	; (3824 <usb_d_ep_abort+0x50>)
    3804:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3806:	68bb      	ldr	r3, [r7, #8]
    3808:	2201      	movs	r2, #1
    380a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    380c:	68bb      	ldr	r3, [r7, #8]
    380e:	2204      	movs	r2, #4
    3810:	70da      	strb	r2, [r3, #3]
    3812:	e000      	b.n	3816 <usb_d_ep_abort+0x42>
		return;
    3814:	bf00      	nop
}
    3816:	3710      	adds	r7, #16
    3818:	46bd      	mov	sp, r7
    381a:	bd80      	pop	{r7, pc}
    381c:	00003029 	.word	0x00003029
    3820:	20000834 	.word	0x20000834
    3824:	0000acfd 	.word	0x0000acfd

00003828 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3828:	b580      	push	{r7, lr}
    382a:	b086      	sub	sp, #24
    382c:	af00      	add	r7, sp, #0
    382e:	4603      	mov	r3, r0
    3830:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3832:	79fb      	ldrb	r3, [r7, #7]
    3834:	4618      	mov	r0, r3
    3836:	4b1a      	ldr	r3, [pc, #104]	; (38a0 <_usb_d_ep_halt_clr+0x78>)
    3838:	4798      	blx	r3
    383a:	4603      	mov	r3, r0
    383c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    383e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3842:	015b      	lsls	r3, r3, #5
    3844:	4a17      	ldr	r2, [pc, #92]	; (38a4 <_usb_d_ep_halt_clr+0x7c>)
    3846:	4413      	add	r3, r2
    3848:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    384a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    384e:	2b00      	cmp	r3, #0
    3850:	da02      	bge.n	3858 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3852:	f06f 0311 	mvn.w	r3, #17
    3856:	e01f      	b.n	3898 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3858:	79fb      	ldrb	r3, [r7, #7]
    385a:	2102      	movs	r1, #2
    385c:	4618      	mov	r0, r3
    385e:	4b12      	ldr	r3, [pc, #72]	; (38a8 <_usb_d_ep_halt_clr+0x80>)
    3860:	4798      	blx	r3
    3862:	4603      	mov	r3, r0
    3864:	2b00      	cmp	r3, #0
    3866:	d016      	beq.n	3896 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3868:	79fb      	ldrb	r3, [r7, #7]
    386a:	2100      	movs	r1, #0
    386c:	4618      	mov	r0, r3
    386e:	4b0e      	ldr	r3, [pc, #56]	; (38a8 <_usb_d_ep_halt_clr+0x80>)
    3870:	4798      	blx	r3
    3872:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3874:	68fb      	ldr	r3, [r7, #12]
    3876:	2b00      	cmp	r3, #0
    3878:	da01      	bge.n	387e <_usb_d_ep_halt_clr+0x56>
			return rc;
    387a:	68fb      	ldr	r3, [r7, #12]
    387c:	e00c      	b.n	3898 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    387e:	693b      	ldr	r3, [r7, #16]
    3880:	2201      	movs	r2, #1
    3882:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3884:	693b      	ldr	r3, [r7, #16]
    3886:	2203      	movs	r2, #3
    3888:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    388a:	693b      	ldr	r3, [r7, #16]
    388c:	69db      	ldr	r3, [r3, #28]
    388e:	79f8      	ldrb	r0, [r7, #7]
    3890:	2200      	movs	r2, #0
    3892:	2103      	movs	r1, #3
    3894:	4798      	blx	r3
	}
	return ERR_NONE;
    3896:	2300      	movs	r3, #0
}
    3898:	4618      	mov	r0, r3
    389a:	3718      	adds	r7, #24
    389c:	46bd      	mov	sp, r7
    389e:	bd80      	pop	{r7, pc}
    38a0:	00003029 	.word	0x00003029
    38a4:	20000834 	.word	0x20000834
    38a8:	0000a909 	.word	0x0000a909

000038ac <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b082      	sub	sp, #8
    38b0:	af00      	add	r7, sp, #0
    38b2:	4603      	mov	r3, r0
    38b4:	460a      	mov	r2, r1
    38b6:	71fb      	strb	r3, [r7, #7]
    38b8:	4613      	mov	r3, r2
    38ba:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    38bc:	79bb      	ldrb	r3, [r7, #6]
    38be:	2b00      	cmp	r3, #0
    38c0:	d105      	bne.n	38ce <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    38c2:	79fb      	ldrb	r3, [r7, #7]
    38c4:	4618      	mov	r0, r3
    38c6:	4b0c      	ldr	r3, [pc, #48]	; (38f8 <usb_d_ep_halt+0x4c>)
    38c8:	4798      	blx	r3
    38ca:	4603      	mov	r3, r0
    38cc:	e00f      	b.n	38ee <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    38ce:	79bb      	ldrb	r3, [r7, #6]
    38d0:	2b01      	cmp	r3, #1
    38d2:	d106      	bne.n	38e2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    38d4:	79fb      	ldrb	r3, [r7, #7]
    38d6:	2101      	movs	r1, #1
    38d8:	4618      	mov	r0, r3
    38da:	4b08      	ldr	r3, [pc, #32]	; (38fc <usb_d_ep_halt+0x50>)
    38dc:	4798      	blx	r3
    38de:	4603      	mov	r3, r0
    38e0:	e005      	b.n	38ee <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    38e2:	79fb      	ldrb	r3, [r7, #7]
    38e4:	2102      	movs	r1, #2
    38e6:	4618      	mov	r0, r3
    38e8:	4b04      	ldr	r3, [pc, #16]	; (38fc <usb_d_ep_halt+0x50>)
    38ea:	4798      	blx	r3
    38ec:	4603      	mov	r3, r0
	}
}
    38ee:	4618      	mov	r0, r3
    38f0:	3708      	adds	r7, #8
    38f2:	46bd      	mov	sp, r7
    38f4:	bd80      	pop	{r7, pc}
    38f6:	bf00      	nop
    38f8:	00003829 	.word	0x00003829
    38fc:	0000a909 	.word	0x0000a909

00003900 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3900:	b580      	push	{r7, lr}
    3902:	b086      	sub	sp, #24
    3904:	af00      	add	r7, sp, #0
    3906:	4603      	mov	r3, r0
    3908:	603a      	str	r2, [r7, #0]
    390a:	71fb      	strb	r3, [r7, #7]
    390c:	460b      	mov	r3, r1
    390e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3910:	79fb      	ldrb	r3, [r7, #7]
    3912:	4618      	mov	r0, r3
    3914:	4b16      	ldr	r3, [pc, #88]	; (3970 <usb_d_ep_register_callback+0x70>)
    3916:	4798      	blx	r3
    3918:	4603      	mov	r3, r0
    391a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    391c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3920:	015b      	lsls	r3, r3, #5
    3922:	4a14      	ldr	r2, [pc, #80]	; (3974 <usb_d_ep_register_callback+0x74>)
    3924:	4413      	add	r3, r2
    3926:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3928:	683b      	ldr	r3, [r7, #0]
    392a:	2b00      	cmp	r3, #0
    392c:	d001      	beq.n	3932 <usb_d_ep_register_callback+0x32>
    392e:	683b      	ldr	r3, [r7, #0]
    3930:	e000      	b.n	3934 <usb_d_ep_register_callback+0x34>
    3932:	4b11      	ldr	r3, [pc, #68]	; (3978 <usb_d_ep_register_callback+0x78>)
    3934:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3936:	f997 3017 	ldrsb.w	r3, [r7, #23]
    393a:	2b00      	cmp	r3, #0
    393c:	db13      	blt.n	3966 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    393e:	79bb      	ldrb	r3, [r7, #6]
    3940:	2b01      	cmp	r3, #1
    3942:	d008      	beq.n	3956 <usb_d_ep_register_callback+0x56>
    3944:	2b02      	cmp	r3, #2
    3946:	d00a      	beq.n	395e <usb_d_ep_register_callback+0x5e>
    3948:	2b00      	cmp	r3, #0
    394a:	d000      	beq.n	394e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    394c:	e00c      	b.n	3968 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    394e:	693b      	ldr	r3, [r7, #16]
    3950:	68fa      	ldr	r2, [r7, #12]
    3952:	615a      	str	r2, [r3, #20]
		break;
    3954:	e008      	b.n	3968 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3956:	693b      	ldr	r3, [r7, #16]
    3958:	68fa      	ldr	r2, [r7, #12]
    395a:	619a      	str	r2, [r3, #24]
		break;
    395c:	e004      	b.n	3968 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    395e:	693b      	ldr	r3, [r7, #16]
    3960:	68fa      	ldr	r2, [r7, #12]
    3962:	61da      	str	r2, [r3, #28]
		break;
    3964:	e000      	b.n	3968 <usb_d_ep_register_callback+0x68>
		return;
    3966:	bf00      	nop
	}
}
    3968:	3718      	adds	r7, #24
    396a:	46bd      	mov	sp, r7
    396c:	bd80      	pop	{r7, pc}
    396e:	bf00      	nop
    3970:	00003029 	.word	0x00003029
    3974:	20000834 	.word	0x20000834
    3978:	000030fd 	.word	0x000030fd

0000397c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    397c:	b480      	push	{r7}
    397e:	b085      	sub	sp, #20
    3980:	af00      	add	r7, sp, #0
    3982:	4603      	mov	r3, r0
    3984:	60b9      	str	r1, [r7, #8]
    3986:	607a      	str	r2, [r7, #4]
    3988:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    398a:	7bfb      	ldrb	r3, [r7, #15]
    398c:	f083 0301 	eor.w	r3, r3, #1
    3990:	b2db      	uxtb	r3, r3
    3992:	2b00      	cmp	r3, #0
    3994:	d000      	beq.n	3998 <assert+0x1c>
		__asm("BKPT #0");
    3996:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3998:	bf00      	nop
    399a:	3714      	adds	r7, #20
    399c:	46bd      	mov	sp, r7
    399e:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a2:	4770      	bx	lr

000039a4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    39a4:	b480      	push	{r7}
    39a6:	b085      	sub	sp, #20
    39a8:	af00      	add	r7, sp, #0
    39aa:	6078      	str	r0, [r7, #4]
    39ac:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	60fb      	str	r3, [r7, #12]
    39b4:	e008      	b.n	39c8 <is_list_element+0x24>
		if (it == element) {
    39b6:	68fa      	ldr	r2, [r7, #12]
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	429a      	cmp	r2, r3
    39bc:	d101      	bne.n	39c2 <is_list_element+0x1e>
			return true;
    39be:	2301      	movs	r3, #1
    39c0:	e006      	b.n	39d0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	681b      	ldr	r3, [r3, #0]
    39c6:	60fb      	str	r3, [r7, #12]
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	2b00      	cmp	r3, #0
    39cc:	d1f3      	bne.n	39b6 <is_list_element+0x12>
		}
	}

	return false;
    39ce:	2300      	movs	r3, #0
}
    39d0:	4618      	mov	r0, r3
    39d2:	3714      	adds	r7, #20
    39d4:	46bd      	mov	sp, r7
    39d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39da:	4770      	bx	lr

000039dc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    39dc:	b580      	push	{r7, lr}
    39de:	b082      	sub	sp, #8
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    39e6:	6839      	ldr	r1, [r7, #0]
    39e8:	6878      	ldr	r0, [r7, #4]
    39ea:	4b0f      	ldr	r3, [pc, #60]	; (3a28 <list_insert_as_head+0x4c>)
    39ec:	4798      	blx	r3
    39ee:	4603      	mov	r3, r0
    39f0:	2b00      	cmp	r3, #0
    39f2:	bf14      	ite	ne
    39f4:	2301      	movne	r3, #1
    39f6:	2300      	moveq	r3, #0
    39f8:	b2db      	uxtb	r3, r3
    39fa:	f083 0301 	eor.w	r3, r3, #1
    39fe:	b2db      	uxtb	r3, r3
    3a00:	f003 0301 	and.w	r3, r3, #1
    3a04:	b2db      	uxtb	r3, r3
    3a06:	2239      	movs	r2, #57	; 0x39
    3a08:	4908      	ldr	r1, [pc, #32]	; (3a2c <list_insert_as_head+0x50>)
    3a0a:	4618      	mov	r0, r3
    3a0c:	4b08      	ldr	r3, [pc, #32]	; (3a30 <list_insert_as_head+0x54>)
    3a0e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	681a      	ldr	r2, [r3, #0]
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	683a      	ldr	r2, [r7, #0]
    3a1c:	601a      	str	r2, [r3, #0]
}
    3a1e:	bf00      	nop
    3a20:	3708      	adds	r7, #8
    3a22:	46bd      	mov	sp, r7
    3a24:	bd80      	pop	{r7, pc}
    3a26:	bf00      	nop
    3a28:	000039a5 	.word	0x000039a5
    3a2c:	0000f0fc 	.word	0x0000f0fc
    3a30:	0000397d 	.word	0x0000397d

00003a34 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3a34:	b480      	push	{r7}
    3a36:	b083      	sub	sp, #12
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
    3a3c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	681a      	ldr	r2, [r3, #0]
    3a42:	683b      	ldr	r3, [r7, #0]
    3a44:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	683a      	ldr	r2, [r7, #0]
    3a4a:	601a      	str	r2, [r3, #0]
}
    3a4c:	bf00      	nop
    3a4e:	370c      	adds	r7, #12
    3a50:	46bd      	mov	sp, r7
    3a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a56:	4770      	bx	lr

00003a58 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b084      	sub	sp, #16
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
    3a60:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	681b      	ldr	r3, [r3, #0]
    3a66:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3a68:	6839      	ldr	r1, [r7, #0]
    3a6a:	6878      	ldr	r0, [r7, #4]
    3a6c:	4b16      	ldr	r3, [pc, #88]	; (3ac8 <list_insert_at_end+0x70>)
    3a6e:	4798      	blx	r3
    3a70:	4603      	mov	r3, r0
    3a72:	2b00      	cmp	r3, #0
    3a74:	bf14      	ite	ne
    3a76:	2301      	movne	r3, #1
    3a78:	2300      	moveq	r3, #0
    3a7a:	b2db      	uxtb	r3, r3
    3a7c:	f083 0301 	eor.w	r3, r3, #1
    3a80:	b2db      	uxtb	r3, r3
    3a82:	f003 0301 	and.w	r3, r3, #1
    3a86:	b2db      	uxtb	r3, r3
    3a88:	224f      	movs	r2, #79	; 0x4f
    3a8a:	4910      	ldr	r1, [pc, #64]	; (3acc <list_insert_at_end+0x74>)
    3a8c:	4618      	mov	r0, r3
    3a8e:	4b10      	ldr	r3, [pc, #64]	; (3ad0 <list_insert_at_end+0x78>)
    3a90:	4798      	blx	r3

	if (!list->head) {
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d109      	bne.n	3aae <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	683a      	ldr	r2, [r7, #0]
    3a9e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3aa0:	683b      	ldr	r3, [r7, #0]
    3aa2:	2200      	movs	r2, #0
    3aa4:	601a      	str	r2, [r3, #0]
		return;
    3aa6:	e00c      	b.n	3ac2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3aa8:	68fb      	ldr	r3, [r7, #12]
    3aaa:	681b      	ldr	r3, [r3, #0]
    3aac:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3aae:	68fb      	ldr	r3, [r7, #12]
    3ab0:	681b      	ldr	r3, [r3, #0]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d1f8      	bne.n	3aa8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3ab6:	68fb      	ldr	r3, [r7, #12]
    3ab8:	683a      	ldr	r2, [r7, #0]
    3aba:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3abc:	683b      	ldr	r3, [r7, #0]
    3abe:	2200      	movs	r2, #0
    3ac0:	601a      	str	r2, [r3, #0]
}
    3ac2:	3710      	adds	r7, #16
    3ac4:	46bd      	mov	sp, r7
    3ac6:	bd80      	pop	{r7, pc}
    3ac8:	000039a5 	.word	0x000039a5
    3acc:	0000f0fc 	.word	0x0000f0fc
    3ad0:	0000397d 	.word	0x0000397d

00003ad4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3ad4:	b480      	push	{r7}
    3ad6:	b085      	sub	sp, #20
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d009      	beq.n	3af8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	681a      	ldr	r2, [r3, #0]
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3af4:	68fb      	ldr	r3, [r7, #12]
    3af6:	e000      	b.n	3afa <list_remove_head+0x26>
	}

	return NULL;
    3af8:	2300      	movs	r3, #0
}
    3afa:	4618      	mov	r0, r3
    3afc:	3714      	adds	r7, #20
    3afe:	46bd      	mov	sp, r7
    3b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b04:	4770      	bx	lr

00003b06 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3b06:	b480      	push	{r7}
    3b08:	b085      	sub	sp, #20
    3b0a:	af00      	add	r7, sp, #0
    3b0c:	6078      	str	r0, [r7, #4]
    3b0e:	6039      	str	r1, [r7, #0]
	if (!element) {
    3b10:	683b      	ldr	r3, [r7, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d101      	bne.n	3b1a <list_delete_element+0x14>
		return false;
    3b16:	2300      	movs	r3, #0
    3b18:	e024      	b.n	3b64 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	681a      	ldr	r2, [r3, #0]
    3b1e:	683b      	ldr	r3, [r7, #0]
    3b20:	429a      	cmp	r2, r3
    3b22:	d106      	bne.n	3b32 <list_delete_element+0x2c>
		list->head = list->head->next;
    3b24:	687b      	ldr	r3, [r7, #4]
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	681a      	ldr	r2, [r3, #0]
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	601a      	str	r2, [r3, #0]
		return true;
    3b2e:	2301      	movs	r3, #1
    3b30:	e018      	b.n	3b64 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3b38:	e002      	b.n	3b40 <list_delete_element+0x3a>
			it = it->next;
    3b3a:	68fb      	ldr	r3, [r7, #12]
    3b3c:	681b      	ldr	r3, [r3, #0]
    3b3e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3b40:	68fb      	ldr	r3, [r7, #12]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d004      	beq.n	3b50 <list_delete_element+0x4a>
    3b46:	68fb      	ldr	r3, [r7, #12]
    3b48:	681a      	ldr	r2, [r3, #0]
    3b4a:	683b      	ldr	r3, [r7, #0]
    3b4c:	429a      	cmp	r2, r3
    3b4e:	d1f4      	bne.n	3b3a <list_delete_element+0x34>
		}
		if (it) {
    3b50:	68fb      	ldr	r3, [r7, #12]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d005      	beq.n	3b62 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3b56:	683b      	ldr	r3, [r7, #0]
    3b58:	681a      	ldr	r2, [r3, #0]
    3b5a:	68fb      	ldr	r3, [r7, #12]
    3b5c:	601a      	str	r2, [r3, #0]
			return true;
    3b5e:	2301      	movs	r3, #1
    3b60:	e000      	b.n	3b64 <list_delete_element+0x5e>
		}
	}

	return false;
    3b62:	2300      	movs	r3, #0
}
    3b64:	4618      	mov	r0, r3
    3b66:	3714      	adds	r7, #20
    3b68:	46bd      	mov	sp, r7
    3b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6e:	4770      	bx	lr

00003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3b70:	b480      	push	{r7}
    3b72:	b083      	sub	sp, #12
    3b74:	af00      	add	r7, sp, #0
    3b76:	4603      	mov	r3, r0
    3b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	db0b      	blt.n	3b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b82:	4909      	ldr	r1, [pc, #36]	; (3ba8 <__NVIC_EnableIRQ+0x38>)
    3b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b88:	095b      	lsrs	r3, r3, #5
    3b8a:	88fa      	ldrh	r2, [r7, #6]
    3b8c:	f002 021f 	and.w	r2, r2, #31
    3b90:	2001      	movs	r0, #1
    3b92:	fa00 f202 	lsl.w	r2, r0, r2
    3b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b9a:	bf00      	nop
    3b9c:	370c      	adds	r7, #12
    3b9e:	46bd      	mov	sp, r7
    3ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba4:	4770      	bx	lr
    3ba6:	bf00      	nop
    3ba8:	e000e100 	.word	0xe000e100

00003bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3bac:	b480      	push	{r7}
    3bae:	b083      	sub	sp, #12
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	4603      	mov	r3, r0
    3bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	db10      	blt.n	3be0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bbe:	490b      	ldr	r1, [pc, #44]	; (3bec <__NVIC_DisableIRQ+0x40>)
    3bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bc4:	095b      	lsrs	r3, r3, #5
    3bc6:	88fa      	ldrh	r2, [r7, #6]
    3bc8:	f002 021f 	and.w	r2, r2, #31
    3bcc:	2001      	movs	r0, #1
    3bce:	fa00 f202 	lsl.w	r2, r0, r2
    3bd2:	3320      	adds	r3, #32
    3bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bdc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3be0:	bf00      	nop
    3be2:	370c      	adds	r7, #12
    3be4:	46bd      	mov	sp, r7
    3be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bea:	4770      	bx	lr
    3bec:	e000e100 	.word	0xe000e100

00003bf0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3bf0:	b480      	push	{r7}
    3bf2:	b083      	sub	sp, #12
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	4603      	mov	r3, r0
    3bf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	db0c      	blt.n	3c1c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c02:	4909      	ldr	r1, [pc, #36]	; (3c28 <__NVIC_ClearPendingIRQ+0x38>)
    3c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3c08:	095b      	lsrs	r3, r3, #5
    3c0a:	88fa      	ldrh	r2, [r7, #6]
    3c0c:	f002 021f 	and.w	r2, r2, #31
    3c10:	2001      	movs	r0, #1
    3c12:	fa00 f202 	lsl.w	r2, r0, r2
    3c16:	3360      	adds	r3, #96	; 0x60
    3c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3c1c:	bf00      	nop
    3c1e:	370c      	adds	r7, #12
    3c20:	46bd      	mov	sp, r7
    3c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c26:	4770      	bx	lr
    3c28:	e000e100 	.word	0xe000e100

00003c2c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3c2c:	b480      	push	{r7}
    3c2e:	b083      	sub	sp, #12
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c38:	095b      	lsrs	r3, r3, #5
    3c3a:	f003 0301 	and.w	r3, r3, #1
    3c3e:	2b00      	cmp	r3, #0
    3c40:	bf14      	ite	ne
    3c42:	2301      	movne	r3, #1
    3c44:	2300      	moveq	r3, #0
    3c46:	b2db      	uxtb	r3, r3
}
    3c48:	4618      	mov	r0, r3
    3c4a:	370c      	adds	r7, #12
    3c4c:	46bd      	mov	sp, r7
    3c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c52:	4770      	bx	lr

00003c54 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3c54:	b480      	push	{r7}
    3c56:	b083      	sub	sp, #12
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	683a      	ldr	r2, [r7, #0]
    3c62:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c64:	bf00      	nop
    3c66:	370c      	adds	r7, #12
    3c68:	46bd      	mov	sp, r7
    3c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6e:	4770      	bx	lr

00003c70 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3c70:	b480      	push	{r7}
    3c72:	b083      	sub	sp, #12
    3c74:	af00      	add	r7, sp, #0
    3c76:	6078      	str	r0, [r7, #4]
    3c78:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	683a      	ldr	r2, [r7, #0]
    3c7e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c80:	bf00      	nop
    3c82:	370c      	adds	r7, #12
    3c84:	46bd      	mov	sp, r7
    3c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8a:	4770      	bx	lr

00003c8c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3c8c:	b480      	push	{r7}
    3c8e:	b083      	sub	sp, #12
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	699b      	ldr	r3, [r3, #24]
    3c98:	f043 0201 	orr.w	r2, r3, #1
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ca0:	bf00      	nop
    3ca2:	370c      	adds	r7, #12
    3ca4:	46bd      	mov	sp, r7
    3ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3caa:	4770      	bx	lr

00003cac <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3cac:	b480      	push	{r7}
    3cae:	b085      	sub	sp, #20
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	699b      	ldr	r3, [r3, #24]
    3cb8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	f003 0301 	and.w	r3, r3, #1
    3cc0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3cc2:	68fb      	ldr	r3, [r7, #12]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	bf14      	ite	ne
    3cc8:	2301      	movne	r3, #1
    3cca:	2300      	moveq	r3, #0
    3ccc:	b2db      	uxtb	r3, r3
}
    3cce:	4618      	mov	r0, r3
    3cd0:	3714      	adds	r7, #20
    3cd2:	46bd      	mov	sp, r7
    3cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cd8:	4770      	bx	lr

00003cda <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3cda:	b480      	push	{r7}
    3cdc:	b083      	sub	sp, #12
    3cde:	af00      	add	r7, sp, #0
    3ce0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	699b      	ldr	r3, [r3, #24]
    3ce6:	f023 0201 	bic.w	r2, r3, #1
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cee:	bf00      	nop
    3cf0:	370c      	adds	r7, #12
    3cf2:	46bd      	mov	sp, r7
    3cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf8:	4770      	bx	lr

00003cfa <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3cfa:	b480      	push	{r7}
    3cfc:	b083      	sub	sp, #12
    3cfe:	af00      	add	r7, sp, #0
    3d00:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	699b      	ldr	r3, [r3, #24]
    3d06:	f043 0202 	orr.w	r2, r3, #2
    3d0a:	687b      	ldr	r3, [r7, #4]
    3d0c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d0e:	bf00      	nop
    3d10:	370c      	adds	r7, #12
    3d12:	46bd      	mov	sp, r7
    3d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d18:	4770      	bx	lr

00003d1a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3d1a:	b480      	push	{r7}
    3d1c:	b083      	sub	sp, #12
    3d1e:	af00      	add	r7, sp, #0
    3d20:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	699b      	ldr	r3, [r3, #24]
    3d26:	f023 0202 	bic.w	r2, r3, #2
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d2e:	bf00      	nop
    3d30:	370c      	adds	r7, #12
    3d32:	46bd      	mov	sp, r7
    3d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d38:	4770      	bx	lr

00003d3a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3d3a:	b480      	push	{r7}
    3d3c:	b083      	sub	sp, #12
    3d3e:	af00      	add	r7, sp, #0
    3d40:	6078      	str	r0, [r7, #4]
    3d42:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3d44:	687b      	ldr	r3, [r7, #4]
    3d46:	699a      	ldr	r2, [r3, #24]
    3d48:	683b      	ldr	r3, [r7, #0]
    3d4a:	431a      	orrs	r2, r3
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d50:	bf00      	nop
    3d52:	370c      	adds	r7, #12
    3d54:	46bd      	mov	sp, r7
    3d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d5a:	4770      	bx	lr

00003d5c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3d5c:	b480      	push	{r7}
    3d5e:	b083      	sub	sp, #12
    3d60:	af00      	add	r7, sp, #0
    3d62:	6078      	str	r0, [r7, #4]
    3d64:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3d66:	687b      	ldr	r3, [r7, #4]
    3d68:	683a      	ldr	r2, [r7, #0]
    3d6a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d6c:	bf00      	nop
    3d6e:	370c      	adds	r7, #12
    3d70:	46bd      	mov	sp, r7
    3d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d76:	4770      	bx	lr

00003d78 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3d78:	b480      	push	{r7}
    3d7a:	b083      	sub	sp, #12
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
    3d80:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	683a      	ldr	r2, [r7, #0]
    3d86:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d88:	bf00      	nop
    3d8a:	370c      	adds	r7, #12
    3d8c:	46bd      	mov	sp, r7
    3d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d92:	4770      	bx	lr

00003d94 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3d94:	b480      	push	{r7}
    3d96:	b083      	sub	sp, #12
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3da0:	4618      	mov	r0, r3
    3da2:	370c      	adds	r7, #12
    3da4:	46bd      	mov	sp, r7
    3da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3daa:	4770      	bx	lr

00003dac <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3dac:	b480      	push	{r7}
    3dae:	b083      	sub	sp, #12
    3db0:	af00      	add	r7, sp, #0
    3db2:	6078      	str	r0, [r7, #4]
    3db4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	683a      	ldr	r2, [r7, #0]
    3dba:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dbc:	bf00      	nop
    3dbe:	370c      	adds	r7, #12
    3dc0:	46bd      	mov	sp, r7
    3dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc6:	4770      	bx	lr

00003dc8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3dc8:	b480      	push	{r7}
    3dca:	b083      	sub	sp, #12
    3dcc:	af00      	add	r7, sp, #0
    3dce:	6078      	str	r0, [r7, #4]
    3dd0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	683a      	ldr	r2, [r7, #0]
    3dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dda:	bf00      	nop
    3ddc:	370c      	adds	r7, #12
    3dde:	46bd      	mov	sp, r7
    3de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3de4:	4770      	bx	lr

00003de6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3de6:	b480      	push	{r7}
    3de8:	b083      	sub	sp, #12
    3dea:	af00      	add	r7, sp, #0
    3dec:	6078      	str	r0, [r7, #4]
    3dee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	683a      	ldr	r2, [r7, #0]
    3df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3df8:	bf00      	nop
    3dfa:	370c      	adds	r7, #12
    3dfc:	46bd      	mov	sp, r7
    3dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e02:	4770      	bx	lr

00003e04 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3e04:	b480      	push	{r7}
    3e06:	b083      	sub	sp, #12
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	683a      	ldr	r2, [r7, #0]
    3e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e16:	bf00      	nop
    3e18:	370c      	adds	r7, #12
    3e1a:	46bd      	mov	sp, r7
    3e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e20:	4770      	bx	lr

00003e22 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3e22:	b480      	push	{r7}
    3e24:	b083      	sub	sp, #12
    3e26:	af00      	add	r7, sp, #0
    3e28:	6078      	str	r0, [r7, #4]
    3e2a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	683a      	ldr	r2, [r7, #0]
    3e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e34:	bf00      	nop
    3e36:	370c      	adds	r7, #12
    3e38:	46bd      	mov	sp, r7
    3e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e3e:	4770      	bx	lr

00003e40 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3e40:	b480      	push	{r7}
    3e42:	b083      	sub	sp, #12
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
    3e48:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	683a      	ldr	r2, [r7, #0]
    3e4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e52:	bf00      	nop
    3e54:	370c      	adds	r7, #12
    3e56:	46bd      	mov	sp, r7
    3e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5c:	4770      	bx	lr

00003e5e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3e5e:	b480      	push	{r7}
    3e60:	b083      	sub	sp, #12
    3e62:	af00      	add	r7, sp, #0
    3e64:	6078      	str	r0, [r7, #4]
    3e66:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3e68:	687b      	ldr	r3, [r7, #4]
    3e6a:	683a      	ldr	r2, [r7, #0]
    3e6c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e70:	bf00      	nop
    3e72:	370c      	adds	r7, #12
    3e74:	46bd      	mov	sp, r7
    3e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7a:	4770      	bx	lr

00003e7c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3e7c:	b480      	push	{r7}
    3e7e:	b083      	sub	sp, #12
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
    3e84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	683a      	ldr	r2, [r7, #0]
    3e8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e8e:	bf00      	nop
    3e90:	370c      	adds	r7, #12
    3e92:	46bd      	mov	sp, r7
    3e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e98:	4770      	bx	lr

00003e9a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3e9a:	b480      	push	{r7}
    3e9c:	b083      	sub	sp, #12
    3e9e:	af00      	add	r7, sp, #0
    3ea0:	6078      	str	r0, [r7, #4]
    3ea2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	683a      	ldr	r2, [r7, #0]
    3ea8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3eac:	bf00      	nop
    3eae:	370c      	adds	r7, #12
    3eb0:	46bd      	mov	sp, r7
    3eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb6:	4770      	bx	lr

00003eb8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3eb8:	b480      	push	{r7}
    3eba:	b083      	sub	sp, #12
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	6078      	str	r0, [r7, #4]
    3ec0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	683a      	ldr	r2, [r7, #0]
    3ec6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3eca:	bf00      	nop
    3ecc:	370c      	adds	r7, #12
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr
	...

00003ed8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b082      	sub	sp, #8
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
    3ee0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	683a      	ldr	r2, [r7, #0]
    3ee6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	681b      	ldr	r3, [r3, #0]
    3eec:	4618      	mov	r0, r3
    3eee:	4b56      	ldr	r3, [pc, #344]	; (4048 <_can_async_init+0x170>)
    3ef0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3ef2:	bf00      	nop
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	4618      	mov	r0, r3
    3efa:	4b54      	ldr	r3, [pc, #336]	; (404c <_can_async_init+0x174>)
    3efc:	4798      	blx	r3
    3efe:	4603      	mov	r3, r0
    3f00:	f083 0301 	eor.w	r3, r3, #1
    3f04:	b2db      	uxtb	r3, r3
    3f06:	2b00      	cmp	r3, #0
    3f08:	d1f4      	bne.n	3ef4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	681b      	ldr	r3, [r3, #0]
    3f0e:	4618      	mov	r0, r3
    3f10:	4b4f      	ldr	r3, [pc, #316]	; (4050 <_can_async_init+0x178>)
    3f12:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3f14:	683b      	ldr	r3, [r7, #0]
    3f16:	4a4f      	ldr	r2, [pc, #316]	; (4054 <_can_async_init+0x17c>)
    3f18:	4293      	cmp	r3, r2
    3f1a:	d17c      	bne.n	4016 <_can_async_init+0x13e>
		_can1_dev    = dev;
    3f1c:	4a4e      	ldr	r2, [pc, #312]	; (4058 <_can_async_init+0x180>)
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	4a4d      	ldr	r2, [pc, #308]	; (405c <_can_async_init+0x184>)
    3f26:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3f30:	4618      	mov	r0, r3
    3f32:	4b4b      	ldr	r3, [pc, #300]	; (4060 <_can_async_init+0x188>)
    3f34:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	2102      	movs	r1, #2
    3f3c:	4618      	mov	r0, r3
    3f3e:	4b49      	ldr	r3, [pc, #292]	; (4064 <_can_async_init+0x18c>)
    3f40:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	f640 2103 	movw	r1, #2563	; 0xa03
    3f4a:	4618      	mov	r0, r3
    3f4c:	4b46      	ldr	r3, [pc, #280]	; (4068 <_can_async_init+0x190>)
    3f4e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3f58:	4618      	mov	r0, r3
    3f5a:	4b44      	ldr	r3, [pc, #272]	; (406c <_can_async_init+0x194>)
    3f5c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	681a      	ldr	r2, [r3, #0]
    3f62:	4b43      	ldr	r3, [pc, #268]	; (4070 <_can_async_init+0x198>)
    3f64:	b29b      	uxth	r3, r3
    3f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f6e:	4619      	mov	r1, r3
    3f70:	4610      	mov	r0, r2
    3f72:	4b40      	ldr	r3, [pc, #256]	; (4074 <_can_async_init+0x19c>)
    3f74:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	681b      	ldr	r3, [r3, #0]
    3f7a:	2107      	movs	r1, #7
    3f7c:	4618      	mov	r0, r3
    3f7e:	4b3e      	ldr	r3, [pc, #248]	; (4078 <_can_async_init+0x1a0>)
    3f80:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	681b      	ldr	r3, [r3, #0]
    3f86:	2107      	movs	r1, #7
    3f88:	4618      	mov	r0, r3
    3f8a:	4b3c      	ldr	r3, [pc, #240]	; (407c <_can_async_init+0x1a4>)
    3f8c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	681a      	ldr	r2, [r3, #0]
    3f92:	4b3b      	ldr	r3, [pc, #236]	; (4080 <_can_async_init+0x1a8>)
    3f94:	b29b      	uxth	r3, r3
    3f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f9a:	4619      	mov	r1, r3
    3f9c:	4610      	mov	r0, r2
    3f9e:	4b39      	ldr	r3, [pc, #228]	; (4084 <_can_async_init+0x1ac>)
    3fa0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	681a      	ldr	r2, [r3, #0]
    3fa6:	4b38      	ldr	r3, [pc, #224]	; (4088 <_can_async_init+0x1b0>)
    3fa8:	b29b      	uxth	r3, r3
    3faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3fae:	4619      	mov	r1, r3
    3fb0:	4610      	mov	r0, r2
    3fb2:	4b36      	ldr	r3, [pc, #216]	; (408c <_can_async_init+0x1b4>)
    3fb4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	681b      	ldr	r3, [r3, #0]
    3fba:	2108      	movs	r1, #8
    3fbc:	4618      	mov	r0, r3
    3fbe:	4b34      	ldr	r3, [pc, #208]	; (4090 <_can_async_init+0x1b8>)
    3fc0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	681a      	ldr	r2, [r3, #0]
    3fc6:	4b33      	ldr	r3, [pc, #204]	; (4094 <_can_async_init+0x1bc>)
    3fc8:	b29b      	uxth	r3, r3
    3fca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3fce:	4619      	mov	r1, r3
    3fd0:	4610      	mov	r0, r2
    3fd2:	4b31      	ldr	r3, [pc, #196]	; (4098 <_can_async_init+0x1c0>)
    3fd4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	681a      	ldr	r2, [r3, #0]
    3fda:	4b30      	ldr	r3, [pc, #192]	; (409c <_can_async_init+0x1c4>)
    3fdc:	b29b      	uxth	r3, r3
    3fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3fe2:	4619      	mov	r1, r3
    3fe4:	4610      	mov	r0, r2
    3fe6:	4b2e      	ldr	r3, [pc, #184]	; (40a0 <_can_async_init+0x1c8>)
    3fe8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3ff2:	4618      	mov	r0, r3
    3ff4:	4b2b      	ldr	r3, [pc, #172]	; (40a4 <_can_async_init+0x1cc>)
    3ff6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3ff8:	204f      	movs	r0, #79	; 0x4f
    3ffa:	4b2b      	ldr	r3, [pc, #172]	; (40a8 <_can_async_init+0x1d0>)
    3ffc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3ffe:	204f      	movs	r0, #79	; 0x4f
    4000:	4b2a      	ldr	r3, [pc, #168]	; (40ac <_can_async_init+0x1d4>)
    4002:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4004:	204f      	movs	r0, #79	; 0x4f
    4006:	4b2a      	ldr	r3, [pc, #168]	; (40b0 <_can_async_init+0x1d8>)
    4008:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	2101      	movs	r1, #1
    4010:	4618      	mov	r0, r3
    4012:	4b28      	ldr	r3, [pc, #160]	; (40b4 <_can_async_init+0x1dc>)
    4014:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4016:	687b      	ldr	r3, [r7, #4]
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	4618      	mov	r0, r3
    401c:	4b26      	ldr	r3, [pc, #152]	; (40b8 <_can_async_init+0x1e0>)
    401e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4020:	687b      	ldr	r3, [r7, #4]
    4022:	681b      	ldr	r3, [r3, #0]
    4024:	4618      	mov	r0, r3
    4026:	4b25      	ldr	r3, [pc, #148]	; (40bc <_can_async_init+0x1e4>)
    4028:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    402a:	bf00      	nop
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	4618      	mov	r0, r3
    4032:	4b06      	ldr	r3, [pc, #24]	; (404c <_can_async_init+0x174>)
    4034:	4798      	blx	r3
    4036:	4603      	mov	r3, r0
    4038:	2b00      	cmp	r3, #0
    403a:	d1f7      	bne.n	402c <_can_async_init+0x154>
	};

	return ERR_NONE;
    403c:	2300      	movs	r3, #0
}
    403e:	4618      	mov	r0, r3
    4040:	3708      	adds	r7, #8
    4042:	46bd      	mov	sp, r7
    4044:	bd80      	pop	{r7, pc}
    4046:	bf00      	nop
    4048:	00003c8d 	.word	0x00003c8d
    404c:	00003cad 	.word	0x00003cad
    4050:	00003cfb 	.word	0x00003cfb
    4054:	42000400 	.word	0x42000400
    4058:	20000954 	.word	0x20000954
    405c:	20000004 	.word	0x20000004
    4060:	00003d3b 	.word	0x00003d3b
    4064:	00003c55 	.word	0x00003c55
    4068:	00003d5d 	.word	0x00003d5d
    406c:	00003c71 	.word	0x00003c71
    4070:	20001738 	.word	0x20001738
    4074:	00003e41 	.word	0x00003e41
    4078:	00003e5f 	.word	0x00003e5f
    407c:	00003e9b 	.word	0x00003e9b
    4080:	200016f0 	.word	0x200016f0
    4084:	00003e7d 	.word	0x00003e7d
    4088:	200008b4 	.word	0x200008b4
    408c:	00003eb9 	.word	0x00003eb9
    4090:	00003dc9 	.word	0x00003dc9
    4094:	200008c4 	.word	0x200008c4
    4098:	00003de7 	.word	0x00003de7
    409c:	20000944 	.word	0x20000944
    40a0:	00003e05 	.word	0x00003e05
    40a4:	00003e23 	.word	0x00003e23
    40a8:	00003bad 	.word	0x00003bad
    40ac:	00003bf1 	.word	0x00003bf1
    40b0:	00003b71 	.word	0x00003b71
    40b4:	00003dad 	.word	0x00003dad
    40b8:	00003d1b 	.word	0x00003d1b
    40bc:	00003cdb 	.word	0x00003cdb

000040c0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    40c0:	b590      	push	{r4, r7, lr}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    40c6:	4b2c      	ldr	r3, [pc, #176]	; (4178 <CAN1_Handler+0xb8>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	681b      	ldr	r3, [r3, #0]
    40d0:	4618      	mov	r0, r3
    40d2:	4b2a      	ldr	r3, [pc, #168]	; (417c <CAN1_Handler+0xbc>)
    40d4:	4798      	blx	r3
    40d6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    40d8:	683b      	ldr	r3, [r7, #0]
    40da:	f003 0301 	and.w	r3, r3, #1
    40de:	2b00      	cmp	r3, #0
    40e0:	d003      	beq.n	40ea <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	689b      	ldr	r3, [r3, #8]
    40e6:	6878      	ldr	r0, [r7, #4]
    40e8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    40ea:	683b      	ldr	r3, [r7, #0]
    40ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    40f0:	2b00      	cmp	r3, #0
    40f2:	d003      	beq.n	40fc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	685b      	ldr	r3, [r3, #4]
    40f8:	6878      	ldr	r0, [r7, #4]
    40fa:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    40fc:	683b      	ldr	r3, [r7, #0]
    40fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4102:	2b00      	cmp	r3, #0
    4104:	d004      	beq.n	4110 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	68db      	ldr	r3, [r3, #12]
    410a:	2103      	movs	r1, #3
    410c:	6878      	ldr	r0, [r7, #4]
    410e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4110:	683b      	ldr	r3, [r7, #0]
    4112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4116:	2b00      	cmp	r3, #0
    4118:	d004      	beq.n	4124 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	68db      	ldr	r3, [r3, #12]
    411e:	2100      	movs	r1, #0
    4120:	6878      	ldr	r0, [r7, #4]
    4122:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4124:	683b      	ldr	r3, [r7, #0]
    4126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    412a:	2b00      	cmp	r3, #0
    412c:	d00f      	beq.n	414e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	68dc      	ldr	r4, [r3, #12]
    4132:	687b      	ldr	r3, [r7, #4]
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	4618      	mov	r0, r3
    4138:	4b11      	ldr	r3, [pc, #68]	; (4180 <CAN1_Handler+0xc0>)
    413a:	4798      	blx	r3
    413c:	4603      	mov	r3, r0
    413e:	2b00      	cmp	r3, #0
    4140:	d001      	beq.n	4146 <CAN1_Handler+0x86>
    4142:	2302      	movs	r3, #2
    4144:	e000      	b.n	4148 <CAN1_Handler+0x88>
    4146:	2301      	movs	r3, #1
    4148:	4619      	mov	r1, r3
    414a:	6878      	ldr	r0, [r7, #4]
    414c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    414e:	683b      	ldr	r3, [r7, #0]
    4150:	f003 0308 	and.w	r3, r3, #8
    4154:	2b00      	cmp	r3, #0
    4156:	d004      	beq.n	4162 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	68db      	ldr	r3, [r3, #12]
    415c:	2104      	movs	r1, #4
    415e:	6878      	ldr	r0, [r7, #4]
    4160:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	681b      	ldr	r3, [r3, #0]
    4166:	6839      	ldr	r1, [r7, #0]
    4168:	4618      	mov	r0, r3
    416a:	4b06      	ldr	r3, [pc, #24]	; (4184 <CAN1_Handler+0xc4>)
    416c:	4798      	blx	r3
}
    416e:	bf00      	nop
    4170:	370c      	adds	r7, #12
    4172:	46bd      	mov	sp, r7
    4174:	bd90      	pop	{r4, r7, pc}
    4176:	bf00      	nop
    4178:	20000954 	.word	0x20000954
    417c:	00003d95 	.word	0x00003d95
    4180:	00003c2d 	.word	0x00003c2d
    4184:	00003d79 	.word	0x00003d79

00004188 <__NVIC_SetPendingIRQ>:
{
    4188:	b480      	push	{r7}
    418a:	b083      	sub	sp, #12
    418c:	af00      	add	r7, sp, #0
    418e:	4603      	mov	r3, r0
    4190:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4196:	2b00      	cmp	r3, #0
    4198:	db0c      	blt.n	41b4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    419a:	4909      	ldr	r1, [pc, #36]	; (41c0 <__NVIC_SetPendingIRQ+0x38>)
    419c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41a0:	095b      	lsrs	r3, r3, #5
    41a2:	88fa      	ldrh	r2, [r7, #6]
    41a4:	f002 021f 	and.w	r2, r2, #31
    41a8:	2001      	movs	r0, #1
    41aa:	fa00 f202 	lsl.w	r2, r0, r2
    41ae:	3340      	adds	r3, #64	; 0x40
    41b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41b4:	bf00      	nop
    41b6:	370c      	adds	r7, #12
    41b8:	46bd      	mov	sp, r7
    41ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    41be:	4770      	bx	lr
    41c0:	e000e100 	.word	0xe000e100

000041c4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b082      	sub	sp, #8
    41c8:	af00      	add	r7, sp, #0
    41ca:	4603      	mov	r3, r0
    41cc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    41ce:	79fb      	ldrb	r3, [r7, #7]
    41d0:	b21b      	sxth	r3, r3
    41d2:	4618      	mov	r0, r3
    41d4:	4b02      	ldr	r3, [pc, #8]	; (41e0 <_irq_set+0x1c>)
    41d6:	4798      	blx	r3
}
    41d8:	bf00      	nop
    41da:	3708      	adds	r7, #8
    41dc:	46bd      	mov	sp, r7
    41de:	bd80      	pop	{r7, pc}
    41e0:	00004189 	.word	0x00004189

000041e4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    41e4:	b480      	push	{r7}
    41e6:	b083      	sub	sp, #12
    41e8:	af00      	add	r7, sp, #0
    41ea:	4603      	mov	r3, r0
    41ec:	6039      	str	r1, [r7, #0]
    41ee:	80fb      	strh	r3, [r7, #6]
    41f0:	4613      	mov	r3, r2
    41f2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    41f4:	797b      	ldrb	r3, [r7, #5]
    41f6:	3b04      	subs	r3, #4
    41f8:	2b05      	cmp	r3, #5
    41fa:	d86b      	bhi.n	42d4 <_get_cycles_for_us_internal+0xf0>
    41fc:	a201      	add	r2, pc, #4	; (adr r2, 4204 <_get_cycles_for_us_internal+0x20>)
    41fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4202:	bf00      	nop
    4204:	000042b3 	.word	0x000042b3
    4208:	00004293 	.word	0x00004293
    420c:	00004275 	.word	0x00004275
    4210:	00004257 	.word	0x00004257
    4214:	00004239 	.word	0x00004239
    4218:	0000421d 	.word	0x0000421d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    421c:	88fb      	ldrh	r3, [r7, #6]
    421e:	683a      	ldr	r2, [r7, #0]
    4220:	4935      	ldr	r1, [pc, #212]	; (42f8 <_get_cycles_for_us_internal+0x114>)
    4222:	fba1 1202 	umull	r1, r2, r1, r2
    4226:	0c92      	lsrs	r2, r2, #18
    4228:	fb02 f303 	mul.w	r3, r2, r3
    422c:	3302      	adds	r3, #2
    422e:	4a33      	ldr	r2, [pc, #204]	; (42fc <_get_cycles_for_us_internal+0x118>)
    4230:	fba2 2303 	umull	r2, r3, r2, r3
    4234:	085b      	lsrs	r3, r3, #1
    4236:	e059      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4238:	88fb      	ldrh	r3, [r7, #6]
    423a:	683a      	ldr	r2, [r7, #0]
    423c:	0952      	lsrs	r2, r2, #5
    423e:	4930      	ldr	r1, [pc, #192]	; (4300 <_get_cycles_for_us_internal+0x11c>)
    4240:	fba1 1202 	umull	r1, r2, r1, r2
    4244:	09d2      	lsrs	r2, r2, #7
    4246:	fb02 f303 	mul.w	r3, r2, r3
    424a:	331d      	adds	r3, #29
    424c:	4a2d      	ldr	r2, [pc, #180]	; (4304 <_get_cycles_for_us_internal+0x120>)
    424e:	fba2 2303 	umull	r2, r3, r2, r3
    4252:	091b      	lsrs	r3, r3, #4
    4254:	e04a      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4256:	88fb      	ldrh	r3, [r7, #6]
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	492b      	ldr	r1, [pc, #172]	; (4308 <_get_cycles_for_us_internal+0x124>)
    425c:	fba1 1202 	umull	r1, r2, r1, r2
    4260:	0b52      	lsrs	r2, r2, #13
    4262:	fb02 f303 	mul.w	r3, r2, r3
    4266:	f203 132b 	addw	r3, r3, #299	; 0x12b
    426a:	4a28      	ldr	r2, [pc, #160]	; (430c <_get_cycles_for_us_internal+0x128>)
    426c:	fba2 2303 	umull	r2, r3, r2, r3
    4270:	095b      	lsrs	r3, r3, #5
    4272:	e03b      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4274:	88fb      	ldrh	r3, [r7, #6]
    4276:	683a      	ldr	r2, [r7, #0]
    4278:	4925      	ldr	r1, [pc, #148]	; (4310 <_get_cycles_for_us_internal+0x12c>)
    427a:	fba1 1202 	umull	r1, r2, r1, r2
    427e:	0992      	lsrs	r2, r2, #6
    4280:	fb02 f303 	mul.w	r3, r2, r3
    4284:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4288:	4a22      	ldr	r2, [pc, #136]	; (4314 <_get_cycles_for_us_internal+0x130>)
    428a:	fba2 2303 	umull	r2, r3, r2, r3
    428e:	099b      	lsrs	r3, r3, #6
    4290:	e02c      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4292:	88fb      	ldrh	r3, [r7, #6]
    4294:	683a      	ldr	r2, [r7, #0]
    4296:	4920      	ldr	r1, [pc, #128]	; (4318 <_get_cycles_for_us_internal+0x134>)
    4298:	fba1 1202 	umull	r1, r2, r1, r2
    429c:	0952      	lsrs	r2, r2, #5
    429e:	fb02 f303 	mul.w	r3, r2, r3
    42a2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    42a6:	332f      	adds	r3, #47	; 0x2f
    42a8:	4a1c      	ldr	r2, [pc, #112]	; (431c <_get_cycles_for_us_internal+0x138>)
    42aa:	fba2 2303 	umull	r2, r3, r2, r3
    42ae:	0b5b      	lsrs	r3, r3, #13
    42b0:	e01c      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    42b2:	88fb      	ldrh	r3, [r7, #6]
    42b4:	683a      	ldr	r2, [r7, #0]
    42b6:	491a      	ldr	r1, [pc, #104]	; (4320 <_get_cycles_for_us_internal+0x13c>)
    42b8:	fba1 1202 	umull	r1, r2, r1, r2
    42bc:	08d2      	lsrs	r2, r2, #3
    42be:	fb02 f303 	mul.w	r3, r2, r3
    42c2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    42c6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    42ca:	4a16      	ldr	r2, [pc, #88]	; (4324 <_get_cycles_for_us_internal+0x140>)
    42cc:	fba2 2303 	umull	r2, r3, r2, r3
    42d0:	0c5b      	lsrs	r3, r3, #17
    42d2:	e00b      	b.n	42ec <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    42d4:	88fb      	ldrh	r3, [r7, #6]
    42d6:	683a      	ldr	r2, [r7, #0]
    42d8:	fb02 f303 	mul.w	r3, r2, r3
    42dc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    42e0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    42e4:	4a10      	ldr	r2, [pc, #64]	; (4328 <_get_cycles_for_us_internal+0x144>)
    42e6:	fba2 2303 	umull	r2, r3, r2, r3
    42ea:	0c9b      	lsrs	r3, r3, #18
	}
}
    42ec:	4618      	mov	r0, r3
    42ee:	370c      	adds	r7, #12
    42f0:	46bd      	mov	sp, r7
    42f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f6:	4770      	bx	lr
    42f8:	431bde83 	.word	0x431bde83
    42fc:	aaaaaaab 	.word	0xaaaaaaab
    4300:	0a7c5ac5 	.word	0x0a7c5ac5
    4304:	88888889 	.word	0x88888889
    4308:	d1b71759 	.word	0xd1b71759
    430c:	1b4e81b5 	.word	0x1b4e81b5
    4310:	10624dd3 	.word	0x10624dd3
    4314:	057619f1 	.word	0x057619f1
    4318:	51eb851f 	.word	0x51eb851f
    431c:	45e7b273 	.word	0x45e7b273
    4320:	cccccccd 	.word	0xcccccccd
    4324:	6fd91d85 	.word	0x6fd91d85
    4328:	165e9f81 	.word	0x165e9f81

0000432c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    432c:	b580      	push	{r7, lr}
    432e:	b082      	sub	sp, #8
    4330:	af00      	add	r7, sp, #0
    4332:	4603      	mov	r3, r0
    4334:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4336:	88fb      	ldrh	r3, [r7, #6]
    4338:	2209      	movs	r2, #9
    433a:	4904      	ldr	r1, [pc, #16]	; (434c <_get_cycles_for_us+0x20>)
    433c:	4618      	mov	r0, r3
    433e:	4b04      	ldr	r3, [pc, #16]	; (4350 <_get_cycles_for_us+0x24>)
    4340:	4798      	blx	r3
    4342:	4603      	mov	r3, r0
}
    4344:	4618      	mov	r0, r3
    4346:	3708      	adds	r7, #8
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	07270e00 	.word	0x07270e00
    4350:	000041e5 	.word	0x000041e5

00004354 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4354:	b480      	push	{r7}
    4356:	b083      	sub	sp, #12
    4358:	af00      	add	r7, sp, #0
    435a:	4603      	mov	r3, r0
    435c:	6039      	str	r1, [r7, #0]
    435e:	80fb      	strh	r3, [r7, #6]
    4360:	4613      	mov	r3, r2
    4362:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4364:	797b      	ldrb	r3, [r7, #5]
    4366:	3b04      	subs	r3, #4
    4368:	2b05      	cmp	r3, #5
    436a:	d870      	bhi.n	444e <_get_cycles_for_ms_internal+0xfa>
    436c:	a201      	add	r2, pc, #4	; (adr r2, 4374 <_get_cycles_for_ms_internal+0x20>)
    436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4372:	bf00      	nop
    4374:	00004431 	.word	0x00004431
    4378:	00004415 	.word	0x00004415
    437c:	000043f9 	.word	0x000043f9
    4380:	000043d5 	.word	0x000043d5
    4384:	000043b1 	.word	0x000043b1
    4388:	0000438d 	.word	0x0000438d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    438c:	88fb      	ldrh	r3, [r7, #6]
    438e:	683a      	ldr	r2, [r7, #0]
    4390:	4937      	ldr	r1, [pc, #220]	; (4470 <_get_cycles_for_ms_internal+0x11c>)
    4392:	fba1 1202 	umull	r1, r2, r1, r2
    4396:	0c92      	lsrs	r2, r2, #18
    4398:	fb02 f303 	mul.w	r3, r2, r3
    439c:	3302      	adds	r3, #2
    439e:	4a35      	ldr	r2, [pc, #212]	; (4474 <_get_cycles_for_ms_internal+0x120>)
    43a0:	fba2 2303 	umull	r2, r3, r2, r3
    43a4:	085b      	lsrs	r3, r3, #1
    43a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43aa:	fb02 f303 	mul.w	r3, r2, r3
    43ae:	e058      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    43b0:	88fb      	ldrh	r3, [r7, #6]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	0952      	lsrs	r2, r2, #5
    43b6:	4930      	ldr	r1, [pc, #192]	; (4478 <_get_cycles_for_ms_internal+0x124>)
    43b8:	fba1 1202 	umull	r1, r2, r1, r2
    43bc:	09d2      	lsrs	r2, r2, #7
    43be:	fb02 f303 	mul.w	r3, r2, r3
    43c2:	3302      	adds	r3, #2
    43c4:	4a2b      	ldr	r2, [pc, #172]	; (4474 <_get_cycles_for_ms_internal+0x120>)
    43c6:	fba2 2303 	umull	r2, r3, r2, r3
    43ca:	085b      	lsrs	r3, r3, #1
    43cc:	2264      	movs	r2, #100	; 0x64
    43ce:	fb02 f303 	mul.w	r3, r2, r3
    43d2:	e046      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    43d4:	88fb      	ldrh	r3, [r7, #6]
    43d6:	683a      	ldr	r2, [r7, #0]
    43d8:	4928      	ldr	r1, [pc, #160]	; (447c <_get_cycles_for_ms_internal+0x128>)
    43da:	fba1 1202 	umull	r1, r2, r1, r2
    43de:	0b52      	lsrs	r2, r2, #13
    43e0:	fb02 f303 	mul.w	r3, r2, r3
    43e4:	3302      	adds	r3, #2
    43e6:	4a23      	ldr	r2, [pc, #140]	; (4474 <_get_cycles_for_ms_internal+0x120>)
    43e8:	fba2 2303 	umull	r2, r3, r2, r3
    43ec:	085a      	lsrs	r2, r3, #1
    43ee:	4613      	mov	r3, r2
    43f0:	009b      	lsls	r3, r3, #2
    43f2:	4413      	add	r3, r2
    43f4:	005b      	lsls	r3, r3, #1
    43f6:	e034      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    43f8:	88fb      	ldrh	r3, [r7, #6]
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	4920      	ldr	r1, [pc, #128]	; (4480 <_get_cycles_for_ms_internal+0x12c>)
    43fe:	fba1 1202 	umull	r1, r2, r1, r2
    4402:	0992      	lsrs	r2, r2, #6
    4404:	fb02 f303 	mul.w	r3, r2, r3
    4408:	3302      	adds	r3, #2
    440a:	4a1a      	ldr	r2, [pc, #104]	; (4474 <_get_cycles_for_ms_internal+0x120>)
    440c:	fba2 2303 	umull	r2, r3, r2, r3
    4410:	085b      	lsrs	r3, r3, #1
    4412:	e026      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4414:	88fb      	ldrh	r3, [r7, #6]
    4416:	683a      	ldr	r2, [r7, #0]
    4418:	491a      	ldr	r1, [pc, #104]	; (4484 <_get_cycles_for_ms_internal+0x130>)
    441a:	fba1 1202 	umull	r1, r2, r1, r2
    441e:	0952      	lsrs	r2, r2, #5
    4420:	fb02 f303 	mul.w	r3, r2, r3
    4424:	331d      	adds	r3, #29
    4426:	4a18      	ldr	r2, [pc, #96]	; (4488 <_get_cycles_for_ms_internal+0x134>)
    4428:	fba2 2303 	umull	r2, r3, r2, r3
    442c:	091b      	lsrs	r3, r3, #4
    442e:	e018      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4430:	88fb      	ldrh	r3, [r7, #6]
    4432:	683a      	ldr	r2, [r7, #0]
    4434:	4915      	ldr	r1, [pc, #84]	; (448c <_get_cycles_for_ms_internal+0x138>)
    4436:	fba1 1202 	umull	r1, r2, r1, r2
    443a:	08d2      	lsrs	r2, r2, #3
    443c:	fb02 f303 	mul.w	r3, r2, r3
    4440:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4444:	4a12      	ldr	r2, [pc, #72]	; (4490 <_get_cycles_for_ms_internal+0x13c>)
    4446:	fba2 2303 	umull	r2, r3, r2, r3
    444a:	095b      	lsrs	r3, r3, #5
    444c:	e009      	b.n	4462 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    444e:	88fb      	ldrh	r3, [r7, #6]
    4450:	683a      	ldr	r2, [r7, #0]
    4452:	fb02 f303 	mul.w	r3, r2, r3
    4456:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    445a:	4a0e      	ldr	r2, [pc, #56]	; (4494 <_get_cycles_for_ms_internal+0x140>)
    445c:	fba2 2303 	umull	r2, r3, r2, r3
    4460:	099b      	lsrs	r3, r3, #6
	}
}
    4462:	4618      	mov	r0, r3
    4464:	370c      	adds	r7, #12
    4466:	46bd      	mov	sp, r7
    4468:	f85d 7b04 	ldr.w	r7, [sp], #4
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	431bde83 	.word	0x431bde83
    4474:	aaaaaaab 	.word	0xaaaaaaab
    4478:	0a7c5ac5 	.word	0x0a7c5ac5
    447c:	d1b71759 	.word	0xd1b71759
    4480:	10624dd3 	.word	0x10624dd3
    4484:	51eb851f 	.word	0x51eb851f
    4488:	88888889 	.word	0x88888889
    448c:	cccccccd 	.word	0xcccccccd
    4490:	1b4e81b5 	.word	0x1b4e81b5
    4494:	057619f1 	.word	0x057619f1

00004498 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4498:	b580      	push	{r7, lr}
    449a:	b082      	sub	sp, #8
    449c:	af00      	add	r7, sp, #0
    449e:	4603      	mov	r3, r0
    44a0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    44a2:	88fb      	ldrh	r3, [r7, #6]
    44a4:	2209      	movs	r2, #9
    44a6:	4904      	ldr	r1, [pc, #16]	; (44b8 <_get_cycles_for_ms+0x20>)
    44a8:	4618      	mov	r0, r3
    44aa:	4b04      	ldr	r3, [pc, #16]	; (44bc <_get_cycles_for_ms+0x24>)
    44ac:	4798      	blx	r3
    44ae:	4603      	mov	r3, r0
}
    44b0:	4618      	mov	r0, r3
    44b2:	3708      	adds	r7, #8
    44b4:	46bd      	mov	sp, r7
    44b6:	bd80      	pop	{r7, pc}
    44b8:	07270e00 	.word	0x07270e00
    44bc:	00004355 	.word	0x00004355

000044c0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    44c0:	b480      	push	{r7}
    44c2:	b083      	sub	sp, #12
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
    44c8:	6039      	str	r1, [r7, #0]
    44ca:	bf00      	nop
    44cc:	f3af 8000 	nop.w

000044d0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    44d0:	3901      	subs	r1, #1
    44d2:	d8fd      	bhi.n	44d0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    44d4:	bf00      	nop
    44d6:	370c      	adds	r7, #12
    44d8:	46bd      	mov	sp, r7
    44da:	f85d 7b04 	ldr.w	r7, [sp], #4
    44de:	4770      	bx	lr

000044e0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    44e0:	b480      	push	{r7}
    44e2:	b083      	sub	sp, #12
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
    44e8:	460b      	mov	r3, r1
    44ea:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	881b      	ldrh	r3, [r3, #0]
    44f0:	b29a      	uxth	r2, r3
    44f2:	887b      	ldrh	r3, [r7, #2]
    44f4:	021b      	lsls	r3, r3, #8
    44f6:	b29b      	uxth	r3, r3
    44f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    44fc:	b29b      	uxth	r3, r3
    44fe:	4313      	orrs	r3, r2
    4500:	b29a      	uxth	r2, r3
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4506:	bf00      	nop
    4508:	370c      	adds	r7, #12
    450a:	46bd      	mov	sp, r7
    450c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4510:	4770      	bx	lr

00004512 <hri_port_set_EVCTRL_reg>:
{
    4512:	b480      	push	{r7}
    4514:	b085      	sub	sp, #20
    4516:	af00      	add	r7, sp, #0
    4518:	60f8      	str	r0, [r7, #12]
    451a:	460b      	mov	r3, r1
    451c:	607a      	str	r2, [r7, #4]
    451e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4520:	7afb      	ldrb	r3, [r7, #11]
    4522:	7afa      	ldrb	r2, [r7, #11]
    4524:	68f9      	ldr	r1, [r7, #12]
    4526:	01d2      	lsls	r2, r2, #7
    4528:	440a      	add	r2, r1
    452a:	322c      	adds	r2, #44	; 0x2c
    452c:	6811      	ldr	r1, [r2, #0]
    452e:	687a      	ldr	r2, [r7, #4]
    4530:	430a      	orrs	r2, r1
    4532:	68f9      	ldr	r1, [r7, #12]
    4534:	01db      	lsls	r3, r3, #7
    4536:	440b      	add	r3, r1
    4538:	332c      	adds	r3, #44	; 0x2c
    453a:	601a      	str	r2, [r3, #0]
}
    453c:	bf00      	nop
    453e:	3714      	adds	r7, #20
    4540:	46bd      	mov	sp, r7
    4542:	f85d 7b04 	ldr.w	r7, [sp], #4
    4546:	4770      	bx	lr

00004548 <_port_event_init>:

static inline void _port_event_init()
{
    4548:	b580      	push	{r7, lr}
    454a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    454c:	2200      	movs	r2, #0
    454e:	2100      	movs	r1, #0
    4550:	480a      	ldr	r0, [pc, #40]	; (457c <_port_event_init+0x34>)
    4552:	4b0b      	ldr	r3, [pc, #44]	; (4580 <_port_event_init+0x38>)
    4554:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4556:	2200      	movs	r2, #0
    4558:	2101      	movs	r1, #1
    455a:	4808      	ldr	r0, [pc, #32]	; (457c <_port_event_init+0x34>)
    455c:	4b08      	ldr	r3, [pc, #32]	; (4580 <_port_event_init+0x38>)
    455e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4560:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4564:	2102      	movs	r1, #2
    4566:	4805      	ldr	r0, [pc, #20]	; (457c <_port_event_init+0x34>)
    4568:	4b05      	ldr	r3, [pc, #20]	; (4580 <_port_event_init+0x38>)
    456a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    456c:	2200      	movs	r2, #0
    456e:	2103      	movs	r1, #3
    4570:	4802      	ldr	r0, [pc, #8]	; (457c <_port_event_init+0x34>)
    4572:	4b03      	ldr	r3, [pc, #12]	; (4580 <_port_event_init+0x38>)
    4574:	4798      	blx	r3
}
    4576:	bf00      	nop
    4578:	bd80      	pop	{r7, pc}
    457a:	bf00      	nop
    457c:	41008000 	.word	0x41008000
    4580:	00004513 	.word	0x00004513

00004584 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4584:	b580      	push	{r7, lr}
    4586:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4588:	2104      	movs	r1, #4
    458a:	480b      	ldr	r0, [pc, #44]	; (45b8 <_init_chip+0x34>)
    458c:	4b0b      	ldr	r3, [pc, #44]	; (45bc <_init_chip+0x38>)
    458e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4590:	4b0b      	ldr	r3, [pc, #44]	; (45c0 <_init_chip+0x3c>)
    4592:	4798      	blx	r3
	_oscctrl_init_sources();
    4594:	4b0b      	ldr	r3, [pc, #44]	; (45c4 <_init_chip+0x40>)
    4596:	4798      	blx	r3
	_mclk_init();
    4598:	4b0b      	ldr	r3, [pc, #44]	; (45c8 <_init_chip+0x44>)
    459a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    459c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    45a0:	4b0a      	ldr	r3, [pc, #40]	; (45cc <_init_chip+0x48>)
    45a2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    45a4:	4b0a      	ldr	r3, [pc, #40]	; (45d0 <_init_chip+0x4c>)
    45a6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    45a8:	f640 30df 	movw	r0, #3039	; 0xbdf
    45ac:	4b07      	ldr	r3, [pc, #28]	; (45cc <_init_chip+0x48>)
    45ae:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    45b0:	4b08      	ldr	r3, [pc, #32]	; (45d4 <_init_chip+0x50>)
    45b2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    45b4:	bf00      	nop
    45b6:	bd80      	pop	{r7, pc}
    45b8:	41004000 	.word	0x41004000
    45bc:	000044e1 	.word	0x000044e1
    45c0:	000050ad 	.word	0x000050ad
    45c4:	00005575 	.word	0x00005575
    45c8:	00004fcd 	.word	0x00004fcd
    45cc:	00004e75 	.word	0x00004e75
    45d0:	000055b5 	.word	0x000055b5
    45d4:	00004549 	.word	0x00004549

000045d8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    45d8:	b480      	push	{r7}
    45da:	b083      	sub	sp, #12
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	683a      	ldr	r2, [r7, #0]
    45e6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    45e8:	2300      	movs	r3, #0
}
    45ea:	4618      	mov	r0, r3
    45ec:	370c      	adds	r7, #12
    45ee:	46bd      	mov	sp, r7
    45f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f4:	4770      	bx	lr
	...

000045f8 <__NVIC_EnableIRQ>:
{
    45f8:	b480      	push	{r7}
    45fa:	b083      	sub	sp, #12
    45fc:	af00      	add	r7, sp, #0
    45fe:	4603      	mov	r3, r0
    4600:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4606:	2b00      	cmp	r3, #0
    4608:	db0b      	blt.n	4622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    460a:	4909      	ldr	r1, [pc, #36]	; (4630 <__NVIC_EnableIRQ+0x38>)
    460c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4610:	095b      	lsrs	r3, r3, #5
    4612:	88fa      	ldrh	r2, [r7, #6]
    4614:	f002 021f 	and.w	r2, r2, #31
    4618:	2001      	movs	r0, #1
    461a:	fa00 f202 	lsl.w	r2, r0, r2
    461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4622:	bf00      	nop
    4624:	370c      	adds	r7, #12
    4626:	46bd      	mov	sp, r7
    4628:	f85d 7b04 	ldr.w	r7, [sp], #4
    462c:	4770      	bx	lr
    462e:	bf00      	nop
    4630:	e000e100 	.word	0xe000e100

00004634 <__NVIC_DisableIRQ>:
{
    4634:	b480      	push	{r7}
    4636:	b083      	sub	sp, #12
    4638:	af00      	add	r7, sp, #0
    463a:	4603      	mov	r3, r0
    463c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    463e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4642:	2b00      	cmp	r3, #0
    4644:	db10      	blt.n	4668 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4646:	490b      	ldr	r1, [pc, #44]	; (4674 <__NVIC_DisableIRQ+0x40>)
    4648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    464c:	095b      	lsrs	r3, r3, #5
    464e:	88fa      	ldrh	r2, [r7, #6]
    4650:	f002 021f 	and.w	r2, r2, #31
    4654:	2001      	movs	r0, #1
    4656:	fa00 f202 	lsl.w	r2, r0, r2
    465a:	3320      	adds	r3, #32
    465c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4664:	f3bf 8f6f 	isb	sy
}
    4668:	bf00      	nop
    466a:	370c      	adds	r7, #12
    466c:	46bd      	mov	sp, r7
    466e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4672:	4770      	bx	lr
    4674:	e000e100 	.word	0xe000e100

00004678 <__NVIC_ClearPendingIRQ>:
{
    4678:	b480      	push	{r7}
    467a:	b083      	sub	sp, #12
    467c:	af00      	add	r7, sp, #0
    467e:	4603      	mov	r3, r0
    4680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4686:	2b00      	cmp	r3, #0
    4688:	db0c      	blt.n	46a4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    468a:	4909      	ldr	r1, [pc, #36]	; (46b0 <__NVIC_ClearPendingIRQ+0x38>)
    468c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4690:	095b      	lsrs	r3, r3, #5
    4692:	88fa      	ldrh	r2, [r7, #6]
    4694:	f002 021f 	and.w	r2, r2, #31
    4698:	2001      	movs	r0, #1
    469a:	fa00 f202 	lsl.w	r2, r0, r2
    469e:	3360      	adds	r3, #96	; 0x60
    46a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46a4:	bf00      	nop
    46a6:	370c      	adds	r7, #12
    46a8:	46bd      	mov	sp, r7
    46aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ae:	4770      	bx	lr
    46b0:	e000e100 	.word	0xe000e100

000046b4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    46b4:	b480      	push	{r7}
    46b6:	b083      	sub	sp, #12
    46b8:	af00      	add	r7, sp, #0
    46ba:	6078      	str	r0, [r7, #4]
    46bc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    46be:	bf00      	nop
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	685a      	ldr	r2, [r3, #4]
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	4013      	ands	r3, r2
    46c8:	2b00      	cmp	r3, #0
    46ca:	d1f9      	bne.n	46c0 <hri_eic_wait_for_sync+0xc>
	};
}
    46cc:	bf00      	nop
    46ce:	370c      	adds	r7, #12
    46d0:	46bd      	mov	sp, r7
    46d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d6:	4770      	bx	lr

000046d8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    46d8:	b480      	push	{r7}
    46da:	b083      	sub	sp, #12
    46dc:	af00      	add	r7, sp, #0
    46de:	6078      	str	r0, [r7, #4]
    46e0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	685a      	ldr	r2, [r3, #4]
    46e6:	683b      	ldr	r3, [r7, #0]
    46e8:	4013      	ands	r3, r2
    46ea:	2b00      	cmp	r3, #0
    46ec:	bf14      	ite	ne
    46ee:	2301      	movne	r3, #1
    46f0:	2300      	moveq	r3, #0
    46f2:	b2db      	uxtb	r3, r3
}
    46f4:	4618      	mov	r0, r3
    46f6:	370c      	adds	r7, #12
    46f8:	46bd      	mov	sp, r7
    46fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fe:	4770      	bx	lr

00004700 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4700:	b480      	push	{r7}
    4702:	b083      	sub	sp, #12
    4704:	af00      	add	r7, sp, #0
    4706:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	695b      	ldr	r3, [r3, #20]
}
    470c:	4618      	mov	r0, r3
    470e:	370c      	adds	r7, #12
    4710:	46bd      	mov	sp, r7
    4712:	f85d 7b04 	ldr.w	r7, [sp], #4
    4716:	4770      	bx	lr

00004718 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4718:	b480      	push	{r7}
    471a:	b083      	sub	sp, #12
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
    4720:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	683a      	ldr	r2, [r7, #0]
    4726:	615a      	str	r2, [r3, #20]
}
    4728:	bf00      	nop
    472a:	370c      	adds	r7, #12
    472c:	46bd      	mov	sp, r7
    472e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4732:	4770      	bx	lr

00004734 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4734:	b480      	push	{r7}
    4736:	b083      	sub	sp, #12
    4738:	af00      	add	r7, sp, #0
    473a:	6078      	str	r0, [r7, #4]
    473c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	683a      	ldr	r2, [r7, #0]
    4742:	611a      	str	r2, [r3, #16]
}
    4744:	bf00      	nop
    4746:	370c      	adds	r7, #12
    4748:	46bd      	mov	sp, r7
    474a:	f85d 7b04 	ldr.w	r7, [sp], #4
    474e:	4770      	bx	lr

00004750 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4750:	b480      	push	{r7}
    4752:	b083      	sub	sp, #12
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	683a      	ldr	r2, [r7, #0]
    475e:	60da      	str	r2, [r3, #12]
}
    4760:	bf00      	nop
    4762:	370c      	adds	r7, #12
    4764:	46bd      	mov	sp, r7
    4766:	f85d 7b04 	ldr.w	r7, [sp], #4
    476a:	4770      	bx	lr

0000476c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	781b      	ldrb	r3, [r3, #0]
    4778:	b2db      	uxtb	r3, r3
    477a:	f043 0302 	orr.w	r3, r3, #2
    477e:	b2da      	uxtb	r2, r3
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4784:	2103      	movs	r1, #3
    4786:	6878      	ldr	r0, [r7, #4]
    4788:	4b02      	ldr	r3, [pc, #8]	; (4794 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    478a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    478c:	bf00      	nop
    478e:	3708      	adds	r7, #8
    4790:	46bd      	mov	sp, r7
    4792:	bd80      	pop	{r7, pc}
    4794:	000046b5 	.word	0x000046b5

00004798 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4798:	b580      	push	{r7, lr}
    479a:	b082      	sub	sp, #8
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	781b      	ldrb	r3, [r3, #0]
    47a4:	b2db      	uxtb	r3, r3
    47a6:	f023 0302 	bic.w	r3, r3, #2
    47aa:	b2da      	uxtb	r2, r3
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    47b0:	2103      	movs	r1, #3
    47b2:	6878      	ldr	r0, [r7, #4]
    47b4:	4b02      	ldr	r3, [pc, #8]	; (47c0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    47b6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47b8:	bf00      	nop
    47ba:	3708      	adds	r7, #8
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	000046b5 	.word	0x000046b5

000047c4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b084      	sub	sp, #16
    47c8:	af00      	add	r7, sp, #0
    47ca:	6078      	str	r0, [r7, #4]
    47cc:	460b      	mov	r3, r1
    47ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	781b      	ldrb	r3, [r3, #0]
    47d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    47d6:	7bfb      	ldrb	r3, [r7, #15]
    47d8:	f023 0310 	bic.w	r3, r3, #16
    47dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    47de:	78fb      	ldrb	r3, [r7, #3]
    47e0:	011b      	lsls	r3, r3, #4
    47e2:	b25a      	sxtb	r2, r3
    47e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47e8:	4313      	orrs	r3, r2
    47ea:	b25b      	sxtb	r3, r3
    47ec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	7bfa      	ldrb	r2, [r7, #15]
    47f2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47f4:	2103      	movs	r1, #3
    47f6:	6878      	ldr	r0, [r7, #4]
    47f8:	4b02      	ldr	r3, [pc, #8]	; (4804 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    47fa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47fc:	bf00      	nop
    47fe:	3710      	adds	r7, #16
    4800:	46bd      	mov	sp, r7
    4802:	bd80      	pop	{r7, pc}
    4804:	000046b5 	.word	0x000046b5

00004808 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4808:	b580      	push	{r7, lr}
    480a:	b084      	sub	sp, #16
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
    4810:	460b      	mov	r3, r1
    4812:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4814:	2103      	movs	r1, #3
    4816:	6878      	ldr	r0, [r7, #4]
    4818:	4b06      	ldr	r3, [pc, #24]	; (4834 <hri_eic_get_CTRLA_reg+0x2c>)
    481a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	781b      	ldrb	r3, [r3, #0]
    4820:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4822:	7bfa      	ldrb	r2, [r7, #15]
    4824:	78fb      	ldrb	r3, [r7, #3]
    4826:	4013      	ands	r3, r2
    4828:	73fb      	strb	r3, [r7, #15]
	return tmp;
    482a:	7bfb      	ldrb	r3, [r7, #15]
}
    482c:	4618      	mov	r0, r3
    482e:	3710      	adds	r7, #16
    4830:	46bd      	mov	sp, r7
    4832:	bd80      	pop	{r7, pc}
    4834:	000046b5 	.word	0x000046b5

00004838 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4838:	b580      	push	{r7, lr}
    483a:	b082      	sub	sp, #8
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
    4840:	460b      	mov	r3, r1
    4842:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	78fa      	ldrb	r2, [r7, #3]
    4848:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    484a:	2103      	movs	r1, #3
    484c:	6878      	ldr	r0, [r7, #4]
    484e:	4b03      	ldr	r3, [pc, #12]	; (485c <hri_eic_write_CTRLA_reg+0x24>)
    4850:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4852:	bf00      	nop
    4854:	3708      	adds	r7, #8
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}
    485a:	bf00      	nop
    485c:	000046b5 	.word	0x000046b5

00004860 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4860:	b480      	push	{r7}
    4862:	b083      	sub	sp, #12
    4864:	af00      	add	r7, sp, #0
    4866:	6078      	str	r0, [r7, #4]
    4868:	460b      	mov	r3, r1
    486a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	78fa      	ldrb	r2, [r7, #3]
    4870:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4872:	bf00      	nop
    4874:	370c      	adds	r7, #12
    4876:	46bd      	mov	sp, r7
    4878:	f85d 7b04 	ldr.w	r7, [sp], #4
    487c:	4770      	bx	lr

0000487e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    487e:	b480      	push	{r7}
    4880:	b083      	sub	sp, #12
    4882:	af00      	add	r7, sp, #0
    4884:	6078      	str	r0, [r7, #4]
    4886:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	683a      	ldr	r2, [r7, #0]
    488c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    488e:	bf00      	nop
    4890:	370c      	adds	r7, #12
    4892:	46bd      	mov	sp, r7
    4894:	f85d 7b04 	ldr.w	r7, [sp], #4
    4898:	4770      	bx	lr

0000489a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    489a:	b480      	push	{r7}
    489c:	b083      	sub	sp, #12
    489e:	af00      	add	r7, sp, #0
    48a0:	6078      	str	r0, [r7, #4]
    48a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	683a      	ldr	r2, [r7, #0]
    48a8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    48aa:	bf00      	nop
    48ac:	370c      	adds	r7, #12
    48ae:	46bd      	mov	sp, r7
    48b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b4:	4770      	bx	lr

000048b6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    48b6:	b480      	push	{r7}
    48b8:	b085      	sub	sp, #20
    48ba:	af00      	add	r7, sp, #0
    48bc:	60f8      	str	r0, [r7, #12]
    48be:	460b      	mov	r3, r1
    48c0:	607a      	str	r2, [r7, #4]
    48c2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    48c4:	7afb      	ldrb	r3, [r7, #11]
    48c6:	68fa      	ldr	r2, [r7, #12]
    48c8:	3306      	adds	r3, #6
    48ca:	009b      	lsls	r3, r3, #2
    48cc:	4413      	add	r3, r2
    48ce:	687a      	ldr	r2, [r7, #4]
    48d0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    48d2:	bf00      	nop
    48d4:	3714      	adds	r7, #20
    48d6:	46bd      	mov	sp, r7
    48d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48dc:	4770      	bx	lr

000048de <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    48de:	b480      	push	{r7}
    48e0:	b083      	sub	sp, #12
    48e2:	af00      	add	r7, sp, #0
    48e4:	6078      	str	r0, [r7, #4]
    48e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	683a      	ldr	r2, [r7, #0]
    48ec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    48ee:	bf00      	nop
    48f0:	370c      	adds	r7, #12
    48f2:	46bd      	mov	sp, r7
    48f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f8:	4770      	bx	lr

000048fa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    48fa:	b480      	push	{r7}
    48fc:	b083      	sub	sp, #12
    48fe:	af00      	add	r7, sp, #0
    4900:	6078      	str	r0, [r7, #4]
    4902:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	683a      	ldr	r2, [r7, #0]
    4908:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    490a:	bf00      	nop
    490c:	370c      	adds	r7, #12
    490e:	46bd      	mov	sp, r7
    4910:	f85d 7b04 	ldr.w	r7, [sp], #4
    4914:	4770      	bx	lr
	...

00004918 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4918:	b580      	push	{r7, lr}
    491a:	b082      	sub	sp, #8
    491c:	af00      	add	r7, sp, #0
    491e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4920:	2101      	movs	r1, #1
    4922:	484f      	ldr	r0, [pc, #316]	; (4a60 <_ext_irq_init+0x148>)
    4924:	4b4f      	ldr	r3, [pc, #316]	; (4a64 <_ext_irq_init+0x14c>)
    4926:	4798      	blx	r3
    4928:	4603      	mov	r3, r0
    492a:	f083 0301 	eor.w	r3, r3, #1
    492e:	b2db      	uxtb	r3, r3
    4930:	2b00      	cmp	r3, #0
    4932:	d011      	beq.n	4958 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4934:	2102      	movs	r1, #2
    4936:	484a      	ldr	r0, [pc, #296]	; (4a60 <_ext_irq_init+0x148>)
    4938:	4b4b      	ldr	r3, [pc, #300]	; (4a68 <_ext_irq_init+0x150>)
    493a:	4798      	blx	r3
    493c:	4603      	mov	r3, r0
    493e:	2b00      	cmp	r3, #0
    4940:	d006      	beq.n	4950 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4942:	4847      	ldr	r0, [pc, #284]	; (4a60 <_ext_irq_init+0x148>)
    4944:	4b49      	ldr	r3, [pc, #292]	; (4a6c <_ext_irq_init+0x154>)
    4946:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4948:	2102      	movs	r1, #2
    494a:	4845      	ldr	r0, [pc, #276]	; (4a60 <_ext_irq_init+0x148>)
    494c:	4b48      	ldr	r3, [pc, #288]	; (4a70 <_ext_irq_init+0x158>)
    494e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4950:	2101      	movs	r1, #1
    4952:	4843      	ldr	r0, [pc, #268]	; (4a60 <_ext_irq_init+0x148>)
    4954:	4b47      	ldr	r3, [pc, #284]	; (4a74 <_ext_irq_init+0x15c>)
    4956:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4958:	2101      	movs	r1, #1
    495a:	4841      	ldr	r0, [pc, #260]	; (4a60 <_ext_irq_init+0x148>)
    495c:	4b44      	ldr	r3, [pc, #272]	; (4a70 <_ext_irq_init+0x158>)
    495e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4960:	2100      	movs	r1, #0
    4962:	483f      	ldr	r0, [pc, #252]	; (4a60 <_ext_irq_init+0x148>)
    4964:	4b44      	ldr	r3, [pc, #272]	; (4a78 <_ext_irq_init+0x160>)
    4966:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4968:	2100      	movs	r1, #0
    496a:	483d      	ldr	r0, [pc, #244]	; (4a60 <_ext_irq_init+0x148>)
    496c:	4b43      	ldr	r3, [pc, #268]	; (4a7c <_ext_irq_init+0x164>)
    496e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4970:	2100      	movs	r1, #0
    4972:	483b      	ldr	r0, [pc, #236]	; (4a60 <_ext_irq_init+0x148>)
    4974:	4b42      	ldr	r3, [pc, #264]	; (4a80 <_ext_irq_init+0x168>)
    4976:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4978:	f240 31bb 	movw	r1, #955	; 0x3bb
    497c:	4838      	ldr	r0, [pc, #224]	; (4a60 <_ext_irq_init+0x148>)
    497e:	4b41      	ldr	r3, [pc, #260]	; (4a84 <_ext_irq_init+0x16c>)
    4980:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4982:	f240 313b 	movw	r1, #827	; 0x33b
    4986:	4836      	ldr	r0, [pc, #216]	; (4a60 <_ext_irq_init+0x148>)
    4988:	4b3f      	ldr	r3, [pc, #252]	; (4a88 <_ext_irq_init+0x170>)
    498a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    498c:	2100      	movs	r1, #0
    498e:	4834      	ldr	r0, [pc, #208]	; (4a60 <_ext_irq_init+0x148>)
    4990:	4b3e      	ldr	r3, [pc, #248]	; (4a8c <_ext_irq_init+0x174>)
    4992:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4994:	4a3e      	ldr	r2, [pc, #248]	; (4a90 <_ext_irq_init+0x178>)
    4996:	2100      	movs	r1, #0
    4998:	4831      	ldr	r0, [pc, #196]	; (4a60 <_ext_irq_init+0x148>)
    499a:	4b3e      	ldr	r3, [pc, #248]	; (4a94 <_ext_irq_init+0x17c>)
    499c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    499e:	2211      	movs	r2, #17
    49a0:	2101      	movs	r1, #1
    49a2:	482f      	ldr	r0, [pc, #188]	; (4a60 <_ext_irq_init+0x148>)
    49a4:	4b3b      	ldr	r3, [pc, #236]	; (4a94 <_ext_irq_init+0x17c>)
    49a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    49a8:	482d      	ldr	r0, [pc, #180]	; (4a60 <_ext_irq_init+0x148>)
    49aa:	4b3b      	ldr	r3, [pc, #236]	; (4a98 <_ext_irq_init+0x180>)
    49ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    49ae:	200c      	movs	r0, #12
    49b0:	4b3a      	ldr	r3, [pc, #232]	; (4a9c <_ext_irq_init+0x184>)
    49b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    49b4:	200c      	movs	r0, #12
    49b6:	4b3a      	ldr	r3, [pc, #232]	; (4aa0 <_ext_irq_init+0x188>)
    49b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    49ba:	200c      	movs	r0, #12
    49bc:	4b39      	ldr	r3, [pc, #228]	; (4aa4 <_ext_irq_init+0x18c>)
    49be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    49c0:	200d      	movs	r0, #13
    49c2:	4b36      	ldr	r3, [pc, #216]	; (4a9c <_ext_irq_init+0x184>)
    49c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    49c6:	200d      	movs	r0, #13
    49c8:	4b35      	ldr	r3, [pc, #212]	; (4aa0 <_ext_irq_init+0x188>)
    49ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    49cc:	200d      	movs	r0, #13
    49ce:	4b35      	ldr	r3, [pc, #212]	; (4aa4 <_ext_irq_init+0x18c>)
    49d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    49d2:	200f      	movs	r0, #15
    49d4:	4b31      	ldr	r3, [pc, #196]	; (4a9c <_ext_irq_init+0x184>)
    49d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    49d8:	200f      	movs	r0, #15
    49da:	4b31      	ldr	r3, [pc, #196]	; (4aa0 <_ext_irq_init+0x188>)
    49dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    49de:	200f      	movs	r0, #15
    49e0:	4b30      	ldr	r3, [pc, #192]	; (4aa4 <_ext_irq_init+0x18c>)
    49e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    49e4:	2010      	movs	r0, #16
    49e6:	4b2d      	ldr	r3, [pc, #180]	; (4a9c <_ext_irq_init+0x184>)
    49e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    49ea:	2010      	movs	r0, #16
    49ec:	4b2c      	ldr	r3, [pc, #176]	; (4aa0 <_ext_irq_init+0x188>)
    49ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    49f0:	2010      	movs	r0, #16
    49f2:	4b2c      	ldr	r3, [pc, #176]	; (4aa4 <_ext_irq_init+0x18c>)
    49f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    49f6:	2011      	movs	r0, #17
    49f8:	4b28      	ldr	r3, [pc, #160]	; (4a9c <_ext_irq_init+0x184>)
    49fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    49fc:	2011      	movs	r0, #17
    49fe:	4b28      	ldr	r3, [pc, #160]	; (4aa0 <_ext_irq_init+0x188>)
    4a00:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4a02:	2011      	movs	r0, #17
    4a04:	4b27      	ldr	r3, [pc, #156]	; (4aa4 <_ext_irq_init+0x18c>)
    4a06:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4a08:	2012      	movs	r0, #18
    4a0a:	4b24      	ldr	r3, [pc, #144]	; (4a9c <_ext_irq_init+0x184>)
    4a0c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4a0e:	2012      	movs	r0, #18
    4a10:	4b23      	ldr	r3, [pc, #140]	; (4aa0 <_ext_irq_init+0x188>)
    4a12:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4a14:	2012      	movs	r0, #18
    4a16:	4b23      	ldr	r3, [pc, #140]	; (4aa4 <_ext_irq_init+0x18c>)
    4a18:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4a1a:	2013      	movs	r0, #19
    4a1c:	4b1f      	ldr	r3, [pc, #124]	; (4a9c <_ext_irq_init+0x184>)
    4a1e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4a20:	2013      	movs	r0, #19
    4a22:	4b1f      	ldr	r3, [pc, #124]	; (4aa0 <_ext_irq_init+0x188>)
    4a24:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4a26:	2013      	movs	r0, #19
    4a28:	4b1e      	ldr	r3, [pc, #120]	; (4aa4 <_ext_irq_init+0x18c>)
    4a2a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4a2c:	2014      	movs	r0, #20
    4a2e:	4b1b      	ldr	r3, [pc, #108]	; (4a9c <_ext_irq_init+0x184>)
    4a30:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4a32:	2014      	movs	r0, #20
    4a34:	4b1a      	ldr	r3, [pc, #104]	; (4aa0 <_ext_irq_init+0x188>)
    4a36:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4a38:	2014      	movs	r0, #20
    4a3a:	4b1a      	ldr	r3, [pc, #104]	; (4aa4 <_ext_irq_init+0x18c>)
    4a3c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4a3e:	2015      	movs	r0, #21
    4a40:	4b16      	ldr	r3, [pc, #88]	; (4a9c <_ext_irq_init+0x184>)
    4a42:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4a44:	2015      	movs	r0, #21
    4a46:	4b16      	ldr	r3, [pc, #88]	; (4aa0 <_ext_irq_init+0x188>)
    4a48:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4a4a:	2015      	movs	r0, #21
    4a4c:	4b15      	ldr	r3, [pc, #84]	; (4aa4 <_ext_irq_init+0x18c>)
    4a4e:	4798      	blx	r3

	callback = cb;
    4a50:	4a15      	ldr	r2, [pc, #84]	; (4aa8 <_ext_irq_init+0x190>)
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4a56:	2300      	movs	r3, #0
}
    4a58:	4618      	mov	r0, r3
    4a5a:	3708      	adds	r7, #8
    4a5c:	46bd      	mov	sp, r7
    4a5e:	bd80      	pop	{r7, pc}
    4a60:	40002800 	.word	0x40002800
    4a64:	000046d9 	.word	0x000046d9
    4a68:	00004809 	.word	0x00004809
    4a6c:	00004799 	.word	0x00004799
    4a70:	000046b5 	.word	0x000046b5
    4a74:	00004839 	.word	0x00004839
    4a78:	000047c5 	.word	0x000047c5
    4a7c:	00004861 	.word	0x00004861
    4a80:	0000487f 	.word	0x0000487f
    4a84:	0000489b 	.word	0x0000489b
    4a88:	000048df 	.word	0x000048df
    4a8c:	000048fb 	.word	0x000048fb
    4a90:	90999013 	.word	0x90999013
    4a94:	000048b7 	.word	0x000048b7
    4a98:	0000476d 	.word	0x0000476d
    4a9c:	00004635 	.word	0x00004635
    4aa0:	00004679 	.word	0x00004679
    4aa4:	000045f9 	.word	0x000045f9
    4aa8:	20000958 	.word	0x20000958

00004aac <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
    4ab4:	460b      	mov	r3, r1
    4ab6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4ab8:	23ff      	movs	r3, #255	; 0xff
    4aba:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4abc:	2300      	movs	r3, #0
    4abe:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4ac0:	e010      	b.n	4ae4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4ac2:	7bbb      	ldrb	r3, [r7, #14]
    4ac4:	4a1c      	ldr	r2, [pc, #112]	; (4b38 <_ext_irq_enable+0x8c>)
    4ac6:	00db      	lsls	r3, r3, #3
    4ac8:	4413      	add	r3, r2
    4aca:	685a      	ldr	r2, [r3, #4]
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	429a      	cmp	r2, r3
    4ad0:	d105      	bne.n	4ade <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4ad2:	7bbb      	ldrb	r3, [r7, #14]
    4ad4:	4a18      	ldr	r2, [pc, #96]	; (4b38 <_ext_irq_enable+0x8c>)
    4ad6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ada:	73fb      	strb	r3, [r7, #15]
			break;
    4adc:	e005      	b.n	4aea <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4ade:	7bbb      	ldrb	r3, [r7, #14]
    4ae0:	3301      	adds	r3, #1
    4ae2:	73bb      	strb	r3, [r7, #14]
    4ae4:	7bbb      	ldrb	r3, [r7, #14]
    4ae6:	2b08      	cmp	r3, #8
    4ae8:	d9eb      	bls.n	4ac2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4aea:	7bfb      	ldrb	r3, [r7, #15]
    4aec:	2bff      	cmp	r3, #255	; 0xff
    4aee:	d102      	bne.n	4af6 <_ext_irq_enable+0x4a>
		return -1;
    4af0:	f04f 33ff 	mov.w	r3, #4294967295
    4af4:	e01c      	b.n	4b30 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4af6:	78fb      	ldrb	r3, [r7, #3]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d008      	beq.n	4b0e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4afc:	7bfb      	ldrb	r3, [r7, #15]
    4afe:	2201      	movs	r2, #1
    4b00:	fa02 f303 	lsl.w	r3, r2, r3
    4b04:	4619      	mov	r1, r3
    4b06:	480d      	ldr	r0, [pc, #52]	; (4b3c <_ext_irq_enable+0x90>)
    4b08:	4b0d      	ldr	r3, [pc, #52]	; (4b40 <_ext_irq_enable+0x94>)
    4b0a:	4798      	blx	r3
    4b0c:	e00f      	b.n	4b2e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4b0e:	7bfb      	ldrb	r3, [r7, #15]
    4b10:	2201      	movs	r2, #1
    4b12:	fa02 f303 	lsl.w	r3, r2, r3
    4b16:	4619      	mov	r1, r3
    4b18:	4808      	ldr	r0, [pc, #32]	; (4b3c <_ext_irq_enable+0x90>)
    4b1a:	4b0a      	ldr	r3, [pc, #40]	; (4b44 <_ext_irq_enable+0x98>)
    4b1c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4b1e:	7bfb      	ldrb	r3, [r7, #15]
    4b20:	2201      	movs	r2, #1
    4b22:	fa02 f303 	lsl.w	r3, r2, r3
    4b26:	4619      	mov	r1, r3
    4b28:	4804      	ldr	r0, [pc, #16]	; (4b3c <_ext_irq_enable+0x90>)
    4b2a:	4b07      	ldr	r3, [pc, #28]	; (4b48 <_ext_irq_enable+0x9c>)
    4b2c:	4798      	blx	r3
	}

	return ERR_NONE;
    4b2e:	2300      	movs	r3, #0
}
    4b30:	4618      	mov	r0, r3
    4b32:	3710      	adds	r7, #16
    4b34:	46bd      	mov	sp, r7
    4b36:	bd80      	pop	{r7, pc}
    4b38:	0000f11c 	.word	0x0000f11c
    4b3c:	40002800 	.word	0x40002800
    4b40:	00004735 	.word	0x00004735
    4b44:	00004751 	.word	0x00004751
    4b48:	00004719 	.word	0x00004719

00004b4c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b084      	sub	sp, #16
    4b50:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4b52:	4841      	ldr	r0, [pc, #260]	; (4c58 <_ext_irq_handler+0x10c>)
    4b54:	4b41      	ldr	r3, [pc, #260]	; (4c5c <_ext_irq_handler+0x110>)
    4b56:	4798      	blx	r3
    4b58:	4603      	mov	r3, r0
    4b5a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4b5c:	f04f 33ff 	mov.w	r3, #4294967295
    4b60:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4b62:	683b      	ldr	r3, [r7, #0]
    4b64:	4619      	mov	r1, r3
    4b66:	483c      	ldr	r0, [pc, #240]	; (4c58 <_ext_irq_handler+0x10c>)
    4b68:	4b3d      	ldr	r3, [pc, #244]	; (4c60 <_ext_irq_handler+0x114>)
    4b6a:	4798      	blx	r3

	ASSERT(callback);
    4b6c:	4b3d      	ldr	r3, [pc, #244]	; (4c64 <_ext_irq_handler+0x118>)
    4b6e:	681b      	ldr	r3, [r3, #0]
    4b70:	2b00      	cmp	r3, #0
    4b72:	bf14      	ite	ne
    4b74:	2301      	movne	r3, #1
    4b76:	2300      	moveq	r3, #0
    4b78:	b2db      	uxtb	r3, r3
    4b7a:	f44f 7284 	mov.w	r2, #264	; 0x108
    4b7e:	493a      	ldr	r1, [pc, #232]	; (4c68 <_ext_irq_handler+0x11c>)
    4b80:	4618      	mov	r0, r3
    4b82:	4b3a      	ldr	r3, [pc, #232]	; (4c6c <_ext_irq_handler+0x120>)
    4b84:	4798      	blx	r3

	while (flags) {
    4b86:	e060      	b.n	4c4a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4b88:	683b      	ldr	r3, [r7, #0]
    4b8a:	4618      	mov	r0, r3
    4b8c:	4b38      	ldr	r3, [pc, #224]	; (4c70 <_ext_irq_handler+0x124>)
    4b8e:	4798      	blx	r3
    4b90:	4603      	mov	r3, r0
    4b92:	b2db      	uxtb	r3, r3
    4b94:	3b01      	subs	r3, #1
    4b96:	b2db      	uxtb	r3, r3
    4b98:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4b9a:	e047      	b.n	4c2c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4b9c:	2300      	movs	r3, #0
    4b9e:	71fb      	strb	r3, [r7, #7]
    4ba0:	2309      	movs	r3, #9
    4ba2:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4ba4:	e024      	b.n	4bf0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4ba6:	79ba      	ldrb	r2, [r7, #6]
    4ba8:	79fb      	ldrb	r3, [r7, #7]
    4baa:	4413      	add	r3, r2
    4bac:	105b      	asrs	r3, r3, #1
    4bae:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4bb0:	797b      	ldrb	r3, [r7, #5]
    4bb2:	4a30      	ldr	r2, [pc, #192]	; (4c74 <_ext_irq_handler+0x128>)
    4bb4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4bb8:	461a      	mov	r2, r3
    4bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bbe:	429a      	cmp	r2, r3
    4bc0:	d106      	bne.n	4bd0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4bc2:	797b      	ldrb	r3, [r7, #5]
    4bc4:	4a2b      	ldr	r2, [pc, #172]	; (4c74 <_ext_irq_handler+0x128>)
    4bc6:	00db      	lsls	r3, r3, #3
    4bc8:	4413      	add	r3, r2
    4bca:	685b      	ldr	r3, [r3, #4]
    4bcc:	60bb      	str	r3, [r7, #8]
					break;
    4bce:	e013      	b.n	4bf8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4bd0:	797b      	ldrb	r3, [r7, #5]
    4bd2:	4a28      	ldr	r2, [pc, #160]	; (4c74 <_ext_irq_handler+0x128>)
    4bd4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4bd8:	461a      	mov	r2, r3
    4bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bde:	429a      	cmp	r2, r3
    4be0:	da03      	bge.n	4bea <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4be2:	797b      	ldrb	r3, [r7, #5]
    4be4:	3301      	adds	r3, #1
    4be6:	71fb      	strb	r3, [r7, #7]
    4be8:	e002      	b.n	4bf0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4bea:	797b      	ldrb	r3, [r7, #5]
    4bec:	3b01      	subs	r3, #1
    4bee:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4bf0:	79ba      	ldrb	r2, [r7, #6]
    4bf2:	79fb      	ldrb	r3, [r7, #7]
    4bf4:	429a      	cmp	r2, r3
    4bf6:	d2d6      	bcs.n	4ba6 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4bf8:	68bb      	ldr	r3, [r7, #8]
    4bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bfe:	d003      	beq.n	4c08 <_ext_irq_handler+0xbc>
				callback(pin);
    4c00:	4b18      	ldr	r3, [pc, #96]	; (4c64 <_ext_irq_handler+0x118>)
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	68b8      	ldr	r0, [r7, #8]
    4c06:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c0c:	2201      	movs	r2, #1
    4c0e:	fa02 f303 	lsl.w	r3, r2, r3
    4c12:	43da      	mvns	r2, r3
    4c14:	683b      	ldr	r3, [r7, #0]
    4c16:	4013      	ands	r3, r2
    4c18:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4c1a:	683b      	ldr	r3, [r7, #0]
    4c1c:	4618      	mov	r0, r3
    4c1e:	4b14      	ldr	r3, [pc, #80]	; (4c70 <_ext_irq_handler+0x124>)
    4c20:	4798      	blx	r3
    4c22:	4603      	mov	r3, r0
    4c24:	b2db      	uxtb	r3, r3
    4c26:	3b01      	subs	r3, #1
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c30:	f1b3 3fff 	cmp.w	r3, #4294967295
    4c34:	d1b2      	bne.n	4b9c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4c36:	4808      	ldr	r0, [pc, #32]	; (4c58 <_ext_irq_handler+0x10c>)
    4c38:	4b08      	ldr	r3, [pc, #32]	; (4c5c <_ext_irq_handler+0x110>)
    4c3a:	4798      	blx	r3
    4c3c:	4603      	mov	r3, r0
    4c3e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4c40:	683b      	ldr	r3, [r7, #0]
    4c42:	4619      	mov	r1, r3
    4c44:	4804      	ldr	r0, [pc, #16]	; (4c58 <_ext_irq_handler+0x10c>)
    4c46:	4b06      	ldr	r3, [pc, #24]	; (4c60 <_ext_irq_handler+0x114>)
    4c48:	4798      	blx	r3
	while (flags) {
    4c4a:	683b      	ldr	r3, [r7, #0]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d19b      	bne.n	4b88 <_ext_irq_handler+0x3c>
	}
}
    4c50:	bf00      	nop
    4c52:	3710      	adds	r7, #16
    4c54:	46bd      	mov	sp, r7
    4c56:	bd80      	pop	{r7, pc}
    4c58:	40002800 	.word	0x40002800
    4c5c:	00004701 	.word	0x00004701
    4c60:	00004719 	.word	0x00004719
    4c64:	20000958 	.word	0x20000958
    4c68:	0000f164 	.word	0x0000f164
    4c6c:	0000397d 	.word	0x0000397d
    4c70:	0000eb61 	.word	0x0000eb61
    4c74:	0000f11c 	.word	0x0000f11c

00004c78 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c7c:	4b01      	ldr	r3, [pc, #4]	; (4c84 <EIC_0_Handler+0xc>)
    4c7e:	4798      	blx	r3
} /**
    4c80:	bf00      	nop
    4c82:	bd80      	pop	{r7, pc}
    4c84:	00004b4d 	.word	0x00004b4d

00004c88 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c8c:	4b01      	ldr	r3, [pc, #4]	; (4c94 <EIC_1_Handler+0xc>)
    4c8e:	4798      	blx	r3
} /**
    4c90:	bf00      	nop
    4c92:	bd80      	pop	{r7, pc}
    4c94:	00004b4d 	.word	0x00004b4d

00004c98 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4c98:	b580      	push	{r7, lr}
    4c9a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c9c:	4b01      	ldr	r3, [pc, #4]	; (4ca4 <EIC_3_Handler+0xc>)
    4c9e:	4798      	blx	r3
} /**
    4ca0:	bf00      	nop
    4ca2:	bd80      	pop	{r7, pc}
    4ca4:	00004b4d 	.word	0x00004b4d

00004ca8 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cac:	4b01      	ldr	r3, [pc, #4]	; (4cb4 <EIC_4_Handler+0xc>)
    4cae:	4798      	blx	r3
} /**
    4cb0:	bf00      	nop
    4cb2:	bd80      	pop	{r7, pc}
    4cb4:	00004b4d 	.word	0x00004b4d

00004cb8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cbc:	4b01      	ldr	r3, [pc, #4]	; (4cc4 <EIC_5_Handler+0xc>)
    4cbe:	4798      	blx	r3
} /**
    4cc0:	bf00      	nop
    4cc2:	bd80      	pop	{r7, pc}
    4cc4:	00004b4d 	.word	0x00004b4d

00004cc8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ccc:	4b01      	ldr	r3, [pc, #4]	; (4cd4 <EIC_6_Handler+0xc>)
    4cce:	4798      	blx	r3
} /**
    4cd0:	bf00      	nop
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	00004b4d 	.word	0x00004b4d

00004cd8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4cd8:	b580      	push	{r7, lr}
    4cda:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cdc:	4b01      	ldr	r3, [pc, #4]	; (4ce4 <EIC_7_Handler+0xc>)
    4cde:	4798      	blx	r3
} /**
    4ce0:	bf00      	nop
    4ce2:	bd80      	pop	{r7, pc}
    4ce4:	00004b4d 	.word	0x00004b4d

00004ce8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cec:	4b01      	ldr	r3, [pc, #4]	; (4cf4 <EIC_8_Handler+0xc>)
    4cee:	4798      	blx	r3
} /**
    4cf0:	bf00      	nop
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	00004b4d 	.word	0x00004b4d

00004cf8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cfc:	4b01      	ldr	r3, [pc, #4]	; (4d04 <EIC_9_Handler+0xc>)
    4cfe:	4798      	blx	r3
}
    4d00:	bf00      	nop
    4d02:	bd80      	pop	{r7, pc}
    4d04:	00004b4d 	.word	0x00004b4d

00004d08 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4d08:	b480      	push	{r7}
    4d0a:	b085      	sub	sp, #20
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	60f8      	str	r0, [r7, #12]
    4d10:	460b      	mov	r3, r1
    4d12:	607a      	str	r2, [r7, #4]
    4d14:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4d16:	7afa      	ldrb	r2, [r7, #11]
    4d18:	68fb      	ldr	r3, [r7, #12]
    4d1a:	3248      	adds	r2, #72	; 0x48
    4d1c:	6879      	ldr	r1, [r7, #4]
    4d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4d22:	bf00      	nop
    4d24:	3714      	adds	r7, #20
    4d26:	46bd      	mov	sp, r7
    4d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2c:	4770      	bx	lr

00004d2e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4d2e:	b480      	push	{r7}
    4d30:	b083      	sub	sp, #12
    4d32:	af00      	add	r7, sp, #0
    4d34:	6078      	str	r0, [r7, #4]
    4d36:	460b      	mov	r3, r1
    4d38:	70fb      	strb	r3, [r7, #3]
    4d3a:	4613      	mov	r3, r2
    4d3c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4d3e:	78fb      	ldrb	r3, [r7, #3]
    4d40:	687a      	ldr	r2, [r7, #4]
    4d42:	3304      	adds	r3, #4
    4d44:	00db      	lsls	r3, r3, #3
    4d46:	4413      	add	r3, r2
    4d48:	78ba      	ldrb	r2, [r7, #2]
    4d4a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4d4c:	78fb      	ldrb	r3, [r7, #3]
    4d4e:	78ba      	ldrb	r2, [r7, #2]
    4d50:	43d2      	mvns	r2, r2
    4d52:	b2d1      	uxtb	r1, r2
    4d54:	687a      	ldr	r2, [r7, #4]
    4d56:	3304      	adds	r3, #4
    4d58:	00db      	lsls	r3, r3, #3
    4d5a:	4413      	add	r3, r2
    4d5c:	460a      	mov	r2, r1
    4d5e:	711a      	strb	r2, [r3, #4]
}
    4d60:	bf00      	nop
    4d62:	370c      	adds	r7, #12
    4d64:	46bd      	mov	sp, r7
    4d66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6a:	4770      	bx	lr

00004d6c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	60f8      	str	r0, [r7, #12]
    4d74:	460b      	mov	r3, r1
    4d76:	607a      	str	r2, [r7, #4]
    4d78:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4d7a:	7afa      	ldrb	r2, [r7, #11]
    4d7c:	68fb      	ldr	r3, [r7, #12]
    4d7e:	3204      	adds	r2, #4
    4d80:	6879      	ldr	r1, [r7, #4]
    4d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4d86:	bf00      	nop
    4d88:	3714      	adds	r7, #20
    4d8a:	46bd      	mov	sp, r7
    4d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d90:	4770      	bx	lr
	...

00004d94 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	b082      	sub	sp, #8
    4d98:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4d9a:	2300      	movs	r3, #0
    4d9c:	71fb      	strb	r3, [r7, #7]
    4d9e:	e00b      	b.n	4db8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4da0:	79fb      	ldrb	r3, [r7, #7]
    4da2:	4a18      	ldr	r2, [pc, #96]	; (4e04 <_event_system_init+0x70>)
    4da4:	5cd3      	ldrb	r3, [r2, r3]
    4da6:	461a      	mov	r2, r3
    4da8:	79fb      	ldrb	r3, [r7, #7]
    4daa:	4619      	mov	r1, r3
    4dac:	4816      	ldr	r0, [pc, #88]	; (4e08 <_event_system_init+0x74>)
    4dae:	4b17      	ldr	r3, [pc, #92]	; (4e0c <_event_system_init+0x78>)
    4db0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4db2:	79fb      	ldrb	r3, [r7, #7]
    4db4:	3301      	adds	r3, #1
    4db6:	71fb      	strb	r3, [r7, #7]
    4db8:	79fb      	ldrb	r3, [r7, #7]
    4dba:	2b42      	cmp	r3, #66	; 0x42
    4dbc:	d9f0      	bls.n	4da0 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4dbe:	2300      	movs	r3, #0
    4dc0:	71fb      	strb	r3, [r7, #7]
    4dc2:	e016      	b.n	4df2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4dc4:	79fb      	ldrb	r3, [r7, #7]
    4dc6:	4a12      	ldr	r2, [pc, #72]	; (4e10 <_event_system_init+0x7c>)
    4dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4dcc:	461a      	mov	r2, r3
    4dce:	79fb      	ldrb	r3, [r7, #7]
    4dd0:	4619      	mov	r1, r3
    4dd2:	480d      	ldr	r0, [pc, #52]	; (4e08 <_event_system_init+0x74>)
    4dd4:	4b0f      	ldr	r3, [pc, #60]	; (4e14 <_event_system_init+0x80>)
    4dd6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4dd8:	79fb      	ldrb	r3, [r7, #7]
    4dda:	4a0f      	ldr	r2, [pc, #60]	; (4e18 <_event_system_init+0x84>)
    4ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4de0:	b2da      	uxtb	r2, r3
    4de2:	79fb      	ldrb	r3, [r7, #7]
    4de4:	4619      	mov	r1, r3
    4de6:	4808      	ldr	r0, [pc, #32]	; (4e08 <_event_system_init+0x74>)
    4de8:	4b0c      	ldr	r3, [pc, #48]	; (4e1c <_event_system_init+0x88>)
    4dea:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4dec:	79fb      	ldrb	r3, [r7, #7]
    4dee:	3301      	adds	r3, #1
    4df0:	71fb      	strb	r3, [r7, #7]
    4df2:	79fb      	ldrb	r3, [r7, #7]
    4df4:	2b1f      	cmp	r3, #31
    4df6:	d9e5      	bls.n	4dc4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4df8:	2300      	movs	r3, #0
}
    4dfa:	4618      	mov	r0, r3
    4dfc:	3708      	adds	r7, #8
    4dfe:	46bd      	mov	sp, r7
    4e00:	bd80      	pop	{r7, pc}
    4e02:	bf00      	nop
    4e04:	0000f17c 	.word	0x0000f17c
    4e08:	4100e000 	.word	0x4100e000
    4e0c:	00004d09 	.word	0x00004d09
    4e10:	0000f1c0 	.word	0x0000f1c0
    4e14:	00004d6d 	.word	0x00004d6d
    4e18:	0000f200 	.word	0x0000f200
    4e1c:	00004d2f 	.word	0x00004d2f

00004e20 <hri_gclk_wait_for_sync>:
{
    4e20:	b480      	push	{r7}
    4e22:	b083      	sub	sp, #12
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    4e28:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e2a:	bf00      	nop
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	685a      	ldr	r2, [r3, #4]
    4e30:	683b      	ldr	r3, [r7, #0]
    4e32:	4013      	ands	r3, r2
    4e34:	2b00      	cmp	r3, #0
    4e36:	d1f9      	bne.n	4e2c <hri_gclk_wait_for_sync+0xc>
}
    4e38:	bf00      	nop
    4e3a:	370c      	adds	r7, #12
    4e3c:	46bd      	mov	sp, r7
    4e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e42:	4770      	bx	lr

00004e44 <hri_gclk_write_GENCTRL_reg>:
{
    4e44:	b580      	push	{r7, lr}
    4e46:	b084      	sub	sp, #16
    4e48:	af00      	add	r7, sp, #0
    4e4a:	60f8      	str	r0, [r7, #12]
    4e4c:	460b      	mov	r3, r1
    4e4e:	607a      	str	r2, [r7, #4]
    4e50:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e52:	7afa      	ldrb	r2, [r7, #11]
    4e54:	68fb      	ldr	r3, [r7, #12]
    4e56:	3208      	adds	r2, #8
    4e58:	6879      	ldr	r1, [r7, #4]
    4e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4e5e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4e62:	68f8      	ldr	r0, [r7, #12]
    4e64:	4b02      	ldr	r3, [pc, #8]	; (4e70 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4e66:	4798      	blx	r3
}
    4e68:	bf00      	nop
    4e6a:	3710      	adds	r7, #16
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	00004e21 	.word	0x00004e21

00004e74 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	b082      	sub	sp, #8
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	f003 0301 	and.w	r3, r3, #1
    4e82:	2b00      	cmp	r3, #0
    4e84:	d004      	beq.n	4e90 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4e86:	4a3b      	ldr	r2, [pc, #236]	; (4f74 <_gclk_init_generators_by_fref+0x100>)
    4e88:	2100      	movs	r1, #0
    4e8a:	483b      	ldr	r0, [pc, #236]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4e8c:	4b3b      	ldr	r3, [pc, #236]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4e8e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	f003 0302 	and.w	r3, r3, #2
    4e96:	2b00      	cmp	r3, #0
    4e98:	d004      	beq.n	4ea4 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4e9a:	4a39      	ldr	r2, [pc, #228]	; (4f80 <_gclk_init_generators_by_fref+0x10c>)
    4e9c:	2101      	movs	r1, #1
    4e9e:	4836      	ldr	r0, [pc, #216]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4ea0:	4b36      	ldr	r3, [pc, #216]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4ea2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	f003 0304 	and.w	r3, r3, #4
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d004      	beq.n	4eb8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4eae:	4a35      	ldr	r2, [pc, #212]	; (4f84 <_gclk_init_generators_by_fref+0x110>)
    4eb0:	2102      	movs	r1, #2
    4eb2:	4831      	ldr	r0, [pc, #196]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4eb4:	4b31      	ldr	r3, [pc, #196]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4eb6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	f003 0308 	and.w	r3, r3, #8
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d004      	beq.n	4ecc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4ec2:	4a31      	ldr	r2, [pc, #196]	; (4f88 <_gclk_init_generators_by_fref+0x114>)
    4ec4:	2103      	movs	r1, #3
    4ec6:	482c      	ldr	r0, [pc, #176]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4ec8:	4b2c      	ldr	r3, [pc, #176]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4eca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	f003 0310 	and.w	r3, r3, #16
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d004      	beq.n	4ee0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4ed6:	4a2d      	ldr	r2, [pc, #180]	; (4f8c <_gclk_init_generators_by_fref+0x118>)
    4ed8:	2104      	movs	r1, #4
    4eda:	4827      	ldr	r0, [pc, #156]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4edc:	4b27      	ldr	r3, [pc, #156]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4ede:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	f003 0320 	and.w	r3, r3, #32
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d004      	beq.n	4ef4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4eea:	4a29      	ldr	r2, [pc, #164]	; (4f90 <_gclk_init_generators_by_fref+0x11c>)
    4eec:	2105      	movs	r1, #5
    4eee:	4822      	ldr	r0, [pc, #136]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4ef0:	4b22      	ldr	r3, [pc, #136]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4ef2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4efa:	2b00      	cmp	r3, #0
    4efc:	d004      	beq.n	4f08 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4efe:	4a25      	ldr	r2, [pc, #148]	; (4f94 <_gclk_init_generators_by_fref+0x120>)
    4f00:	2106      	movs	r1, #6
    4f02:	481d      	ldr	r0, [pc, #116]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f04:	4b1d      	ldr	r3, [pc, #116]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f06:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d004      	beq.n	4f1c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4f12:	4a21      	ldr	r2, [pc, #132]	; (4f98 <_gclk_init_generators_by_fref+0x124>)
    4f14:	2107      	movs	r1, #7
    4f16:	4818      	ldr	r0, [pc, #96]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f18:	4b18      	ldr	r3, [pc, #96]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f1a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4f22:	2b00      	cmp	r3, #0
    4f24:	d004      	beq.n	4f30 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4f26:	4a1d      	ldr	r2, [pc, #116]	; (4f9c <_gclk_init_generators_by_fref+0x128>)
    4f28:	2108      	movs	r1, #8
    4f2a:	4813      	ldr	r0, [pc, #76]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f2c:	4b13      	ldr	r3, [pc, #76]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4f30:	687b      	ldr	r3, [r7, #4]
    4f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4f36:	2b00      	cmp	r3, #0
    4f38:	d004      	beq.n	4f44 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4f3a:	4a19      	ldr	r2, [pc, #100]	; (4fa0 <_gclk_init_generators_by_fref+0x12c>)
    4f3c:	2109      	movs	r1, #9
    4f3e:	480e      	ldr	r0, [pc, #56]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f40:	4b0e      	ldr	r3, [pc, #56]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f42:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d004      	beq.n	4f58 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4f4e:	4a15      	ldr	r2, [pc, #84]	; (4fa4 <_gclk_init_generators_by_fref+0x130>)
    4f50:	210a      	movs	r1, #10
    4f52:	4809      	ldr	r0, [pc, #36]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f54:	4b09      	ldr	r3, [pc, #36]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f56:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d004      	beq.n	4f6c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4f62:	4a11      	ldr	r2, [pc, #68]	; (4fa8 <_gclk_init_generators_by_fref+0x134>)
    4f64:	210b      	movs	r1, #11
    4f66:	4804      	ldr	r0, [pc, #16]	; (4f78 <_gclk_init_generators_by_fref+0x104>)
    4f68:	4b04      	ldr	r3, [pc, #16]	; (4f7c <_gclk_init_generators_by_fref+0x108>)
    4f6a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4f6c:	bf00      	nop
    4f6e:	3708      	adds	r7, #8
    4f70:	46bd      	mov	sp, r7
    4f72:	bd80      	pop	{r7, pc}
    4f74:	00010107 	.word	0x00010107
    4f78:	40001c00 	.word	0x40001c00
    4f7c:	00004e45 	.word	0x00004e45
    4f80:	00010907 	.word	0x00010907
    4f84:	00010906 	.word	0x00010906
    4f88:	00020908 	.word	0x00020908
    4f8c:	00010901 	.word	0x00010901
    4f90:	00062901 	.word	0x00062901
    4f94:	000c2901 	.word	0x000c2901
    4f98:	00082908 	.word	0x00082908
    4f9c:	00032901 	.word	0x00032901
    4fa0:	00011908 	.word	0x00011908
    4fa4:	00010905 	.word	0x00010905
    4fa8:	00041905 	.word	0x00041905

00004fac <hri_mclk_write_CPUDIV_reg>:
{
    4fac:	b480      	push	{r7}
    4fae:	b083      	sub	sp, #12
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	6078      	str	r0, [r7, #4]
    4fb4:	460b      	mov	r3, r1
    4fb6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4fb8:	687b      	ldr	r3, [r7, #4]
    4fba:	78fa      	ldrb	r2, [r7, #3]
    4fbc:	715a      	strb	r2, [r3, #5]
}
    4fbe:	bf00      	nop
    4fc0:	370c      	adds	r7, #12
    4fc2:	46bd      	mov	sp, r7
    4fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc8:	4770      	bx	lr
	...

00004fcc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4fcc:	b580      	push	{r7, lr}
    4fce:	b082      	sub	sp, #8
    4fd0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4fd2:	4b05      	ldr	r3, [pc, #20]	; (4fe8 <_mclk_init+0x1c>)
    4fd4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4fd6:	2101      	movs	r1, #1
    4fd8:	6878      	ldr	r0, [r7, #4]
    4fda:	4b04      	ldr	r3, [pc, #16]	; (4fec <_mclk_init+0x20>)
    4fdc:	4798      	blx	r3
}
    4fde:	bf00      	nop
    4fe0:	3708      	adds	r7, #8
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bd80      	pop	{r7, pc}
    4fe6:	bf00      	nop
    4fe8:	40000800 	.word	0x40000800
    4fec:	00004fad 	.word	0x00004fad

00004ff0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4ff0:	b480      	push	{r7}
    4ff2:	b083      	sub	sp, #12
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	6078      	str	r0, [r7, #4]
    4ff8:	460b      	mov	r3, r1
    4ffa:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	78fa      	ldrb	r2, [r7, #3]
    5000:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5002:	bf00      	nop
    5004:	370c      	adds	r7, #12
    5006:	46bd      	mov	sp, r7
    5008:	f85d 7b04 	ldr.w	r7, [sp], #4
    500c:	4770      	bx	lr

0000500e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    500e:	b480      	push	{r7}
    5010:	b083      	sub	sp, #12
    5012:	af00      	add	r7, sp, #0
    5014:	6078      	str	r0, [r7, #4]
    5016:	460b      	mov	r3, r1
    5018:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	887a      	ldrh	r2, [r7, #2]
    501e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5020:	bf00      	nop
    5022:	370c      	adds	r7, #12
    5024:	46bd      	mov	sp, r7
    5026:	f85d 7b04 	ldr.w	r7, [sp], #4
    502a:	4770      	bx	lr

0000502c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    502c:	b480      	push	{r7}
    502e:	b083      	sub	sp, #12
    5030:	af00      	add	r7, sp, #0
    5032:	6078      	str	r0, [r7, #4]
    5034:	460b      	mov	r3, r1
    5036:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	78fa      	ldrb	r2, [r7, #3]
    503c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    503e:	bf00      	nop
    5040:	370c      	adds	r7, #12
    5042:	46bd      	mov	sp, r7
    5044:	f85d 7b04 	ldr.w	r7, [sp], #4
    5048:	4770      	bx	lr

0000504a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    504a:	b480      	push	{r7}
    504c:	b083      	sub	sp, #12
    504e:	af00      	add	r7, sp, #0
    5050:	6078      	str	r0, [r7, #4]
    5052:	460b      	mov	r3, r1
    5054:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	78fa      	ldrb	r2, [r7, #3]
    505a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    505c:	bf00      	nop
    505e:	370c      	adds	r7, #12
    5060:	46bd      	mov	sp, r7
    5062:	f85d 7b04 	ldr.w	r7, [sp], #4
    5066:	4770      	bx	lr

00005068 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5068:	b480      	push	{r7}
    506a:	b085      	sub	sp, #20
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	69db      	ldr	r3, [r3, #28]
    5074:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5076:	68fb      	ldr	r3, [r7, #12]
    5078:	0a1b      	lsrs	r3, r3, #8
    507a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    507e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5080:	68fb      	ldr	r3, [r7, #12]
}
    5082:	4618      	mov	r0, r3
    5084:	3714      	adds	r7, #20
    5086:	46bd      	mov	sp, r7
    5088:	f85d 7b04 	ldr.w	r7, [sp], #4
    508c:	4770      	bx	lr

0000508e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    508e:	b480      	push	{r7}
    5090:	b083      	sub	sp, #12
    5092:	af00      	add	r7, sp, #0
    5094:	6078      	str	r0, [r7, #4]
    5096:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	683a      	ldr	r2, [r7, #0]
    509c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    509e:	bf00      	nop
    50a0:	370c      	adds	r7, #12
    50a2:	46bd      	mov	sp, r7
    50a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    50a8:	4770      	bx	lr
	...

000050ac <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    50ac:	b580      	push	{r7, lr}
    50ae:	b082      	sub	sp, #8
    50b0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    50b2:	4b13      	ldr	r3, [pc, #76]	; (5100 <_osc32kctrl_init_sources+0x54>)
    50b4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    50b6:	2300      	movs	r3, #0
    50b8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    50ba:	f242 018e 	movw	r1, #8334	; 0x208e
    50be:	6878      	ldr	r0, [r7, #4]
    50c0:	4b10      	ldr	r3, [pc, #64]	; (5104 <_osc32kctrl_init_sources+0x58>)
    50c2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    50c4:	2100      	movs	r1, #0
    50c6:	6878      	ldr	r0, [r7, #4]
    50c8:	4b0f      	ldr	r3, [pc, #60]	; (5108 <_osc32kctrl_init_sources+0x5c>)
    50ca:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    50cc:	2100      	movs	r1, #0
    50ce:	6878      	ldr	r0, [r7, #4]
    50d0:	4b0e      	ldr	r3, [pc, #56]	; (510c <_osc32kctrl_init_sources+0x60>)
    50d2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    50d4:	6878      	ldr	r0, [r7, #4]
    50d6:	4b0e      	ldr	r3, [pc, #56]	; (5110 <_osc32kctrl_init_sources+0x64>)
    50d8:	4798      	blx	r3
    50da:	4603      	mov	r3, r0
    50dc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    50de:	887b      	ldrh	r3, [r7, #2]
    50e0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    50e2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    50e6:	4619      	mov	r1, r3
    50e8:	6878      	ldr	r0, [r7, #4]
    50ea:	4b0a      	ldr	r3, [pc, #40]	; (5114 <_osc32kctrl_init_sources+0x68>)
    50ec:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    50ee:	2100      	movs	r1, #0
    50f0:	6878      	ldr	r0, [r7, #4]
    50f2:	4b09      	ldr	r3, [pc, #36]	; (5118 <_osc32kctrl_init_sources+0x6c>)
    50f4:	4798      	blx	r3
	(void)calib;
}
    50f6:	bf00      	nop
    50f8:	3708      	adds	r7, #8
    50fa:	46bd      	mov	sp, r7
    50fc:	bd80      	pop	{r7, pc}
    50fe:	bf00      	nop
    5100:	40001400 	.word	0x40001400
    5104:	0000500f 	.word	0x0000500f
    5108:	0000502d 	.word	0x0000502d
    510c:	0000504b 	.word	0x0000504b
    5110:	00005069 	.word	0x00005069
    5114:	0000508f 	.word	0x0000508f
    5118:	00004ff1 	.word	0x00004ff1

0000511c <hri_gclk_wait_for_sync>:
{
    511c:	b480      	push	{r7}
    511e:	b083      	sub	sp, #12
    5120:	af00      	add	r7, sp, #0
    5122:	6078      	str	r0, [r7, #4]
    5124:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5126:	bf00      	nop
    5128:	687b      	ldr	r3, [r7, #4]
    512a:	685a      	ldr	r2, [r3, #4]
    512c:	683b      	ldr	r3, [r7, #0]
    512e:	4013      	ands	r3, r2
    5130:	2b00      	cmp	r3, #0
    5132:	d1f9      	bne.n	5128 <hri_gclk_wait_for_sync+0xc>
}
    5134:	bf00      	nop
    5136:	370c      	adds	r7, #12
    5138:	46bd      	mov	sp, r7
    513a:	f85d 7b04 	ldr.w	r7, [sp], #4
    513e:	4770      	bx	lr

00005140 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5140:	b480      	push	{r7}
    5142:	b083      	sub	sp, #12
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	685b      	ldr	r3, [r3, #4]
    514c:	089b      	lsrs	r3, r3, #2
    514e:	f003 0301 	and.w	r3, r3, #1
    5152:	2b00      	cmp	r3, #0
    5154:	bf14      	ite	ne
    5156:	2301      	movne	r3, #1
    5158:	2300      	moveq	r3, #0
    515a:	b2db      	uxtb	r3, r3
}
    515c:	4618      	mov	r0, r3
    515e:	370c      	adds	r7, #12
    5160:	46bd      	mov	sp, r7
    5162:	f85d 7b04 	ldr.w	r7, [sp], #4
    5166:	4770      	bx	lr

00005168 <hri_gclk_read_SYNCBUSY_reg>:
{
    5168:	b480      	push	{r7}
    516a:	b083      	sub	sp, #12
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	685b      	ldr	r3, [r3, #4]
}
    5174:	4618      	mov	r0, r3
    5176:	370c      	adds	r7, #12
    5178:	46bd      	mov	sp, r7
    517a:	f85d 7b04 	ldr.w	r7, [sp], #4
    517e:	4770      	bx	lr

00005180 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5180:	b580      	push	{r7, lr}
    5182:	b086      	sub	sp, #24
    5184:	af00      	add	r7, sp, #0
    5186:	60f8      	str	r0, [r7, #12]
    5188:	460b      	mov	r3, r1
    518a:	607a      	str	r2, [r7, #4]
    518c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    518e:	7afa      	ldrb	r2, [r7, #11]
    5190:	68fb      	ldr	r3, [r7, #12]
    5192:	3208      	adds	r2, #8
    5194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5198:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    519a:	697b      	ldr	r3, [r7, #20]
    519c:	f023 030f 	bic.w	r3, r3, #15
    51a0:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	f003 030f 	and.w	r3, r3, #15
    51a8:	697a      	ldr	r2, [r7, #20]
    51aa:	4313      	orrs	r3, r2
    51ac:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    51ae:	7afa      	ldrb	r2, [r7, #11]
    51b0:	68fb      	ldr	r3, [r7, #12]
    51b2:	3208      	adds	r2, #8
    51b4:	6979      	ldr	r1, [r7, #20]
    51b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    51ba:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    51be:	68f8      	ldr	r0, [r7, #12]
    51c0:	4b02      	ldr	r3, [pc, #8]	; (51cc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    51c2:	4798      	blx	r3
}
    51c4:	bf00      	nop
    51c6:	3718      	adds	r7, #24
    51c8:	46bd      	mov	sp, r7
    51ca:	bd80      	pop	{r7, pc}
    51cc:	0000511d 	.word	0x0000511d

000051d0 <hri_gclk_write_PCHCTRL_reg>:
{
    51d0:	b480      	push	{r7}
    51d2:	b085      	sub	sp, #20
    51d4:	af00      	add	r7, sp, #0
    51d6:	60f8      	str	r0, [r7, #12]
    51d8:	460b      	mov	r3, r1
    51da:	607a      	str	r2, [r7, #4]
    51dc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    51de:	7afa      	ldrb	r2, [r7, #11]
    51e0:	68fb      	ldr	r3, [r7, #12]
    51e2:	3220      	adds	r2, #32
    51e4:	6879      	ldr	r1, [r7, #4]
    51e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51ea:	bf00      	nop
    51ec:	3714      	adds	r7, #20
    51ee:	46bd      	mov	sp, r7
    51f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f4:	4770      	bx	lr

000051f6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    51f6:	b480      	push	{r7}
    51f8:	b085      	sub	sp, #20
    51fa:	af00      	add	r7, sp, #0
    51fc:	60f8      	str	r0, [r7, #12]
    51fe:	460b      	mov	r3, r1
    5200:	607a      	str	r2, [r7, #4]
    5202:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    5204:	bf00      	nop
    5206:	7afa      	ldrb	r2, [r7, #11]
    5208:	68f9      	ldr	r1, [r7, #12]
    520a:	4613      	mov	r3, r2
    520c:	009b      	lsls	r3, r3, #2
    520e:	4413      	add	r3, r2
    5210:	009b      	lsls	r3, r3, #2
    5212:	440b      	add	r3, r1
    5214:	333c      	adds	r3, #60	; 0x3c
    5216:	681a      	ldr	r2, [r3, #0]
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	4013      	ands	r3, r2
    521c:	2b00      	cmp	r3, #0
    521e:	d1f2      	bne.n	5206 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5220:	bf00      	nop
    5222:	3714      	adds	r7, #20
    5224:	46bd      	mov	sp, r7
    5226:	f85d 7b04 	ldr.w	r7, [sp], #4
    522a:	4770      	bx	lr

0000522c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    522c:	b480      	push	{r7}
    522e:	b083      	sub	sp, #12
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	460b      	mov	r3, r1
    5236:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5238:	78fa      	ldrb	r2, [r7, #3]
    523a:	6879      	ldr	r1, [r7, #4]
    523c:	4613      	mov	r3, r2
    523e:	009b      	lsls	r3, r3, #2
    5240:	4413      	add	r3, r2
    5242:	009b      	lsls	r3, r3, #2
    5244:	440b      	add	r3, r1
    5246:	3340      	adds	r3, #64	; 0x40
    5248:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    524a:	f003 0301 	and.w	r3, r3, #1
    524e:	2b00      	cmp	r3, #0
    5250:	bf14      	ite	ne
    5252:	2301      	movne	r3, #1
    5254:	2300      	moveq	r3, #0
    5256:	b2db      	uxtb	r3, r3
}
    5258:	4618      	mov	r0, r3
    525a:	370c      	adds	r7, #12
    525c:	46bd      	mov	sp, r7
    525e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5262:	4770      	bx	lr

00005264 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5264:	b480      	push	{r7}
    5266:	b083      	sub	sp, #12
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
    526c:	460b      	mov	r3, r1
    526e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5270:	78fa      	ldrb	r2, [r7, #3]
    5272:	6879      	ldr	r1, [r7, #4]
    5274:	4613      	mov	r3, r2
    5276:	009b      	lsls	r3, r3, #2
    5278:	4413      	add	r3, r2
    527a:	009b      	lsls	r3, r3, #2
    527c:	440b      	add	r3, r1
    527e:	3340      	adds	r3, #64	; 0x40
    5280:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5282:	085b      	lsrs	r3, r3, #1
    5284:	f003 0301 	and.w	r3, r3, #1
    5288:	2b00      	cmp	r3, #0
    528a:	bf14      	ite	ne
    528c:	2301      	movne	r3, #1
    528e:	2300      	moveq	r3, #0
    5290:	b2db      	uxtb	r3, r3
}
    5292:	4618      	mov	r0, r3
    5294:	370c      	adds	r7, #12
    5296:	46bd      	mov	sp, r7
    5298:	f85d 7b04 	ldr.w	r7, [sp], #4
    529c:	4770      	bx	lr
	...

000052a0 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    52a0:	b580      	push	{r7, lr}
    52a2:	b082      	sub	sp, #8
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
    52a8:	460b      	mov	r3, r1
    52aa:	70fb      	strb	r3, [r7, #3]
    52ac:	4613      	mov	r3, r2
    52ae:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    52b0:	78fa      	ldrb	r2, [r7, #3]
    52b2:	6879      	ldr	r1, [r7, #4]
    52b4:	4613      	mov	r3, r2
    52b6:	009b      	lsls	r3, r3, #2
    52b8:	4413      	add	r3, r2
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	440b      	add	r3, r1
    52be:	3330      	adds	r3, #48	; 0x30
    52c0:	78ba      	ldrb	r2, [r7, #2]
    52c2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    52c4:	78fb      	ldrb	r3, [r7, #3]
    52c6:	2202      	movs	r2, #2
    52c8:	4619      	mov	r1, r3
    52ca:	6878      	ldr	r0, [r7, #4]
    52cc:	4b02      	ldr	r3, [pc, #8]	; (52d8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    52ce:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52d0:	bf00      	nop
    52d2:	3708      	adds	r7, #8
    52d4:	46bd      	mov	sp, r7
    52d6:	bd80      	pop	{r7, pc}
    52d8:	000051f7 	.word	0x000051f7

000052dc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    52dc:	b580      	push	{r7, lr}
    52de:	b084      	sub	sp, #16
    52e0:	af00      	add	r7, sp, #0
    52e2:	60f8      	str	r0, [r7, #12]
    52e4:	460b      	mov	r3, r1
    52e6:	607a      	str	r2, [r7, #4]
    52e8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    52ea:	7afa      	ldrb	r2, [r7, #11]
    52ec:	68f9      	ldr	r1, [r7, #12]
    52ee:	4613      	mov	r3, r2
    52f0:	009b      	lsls	r3, r3, #2
    52f2:	4413      	add	r3, r2
    52f4:	009b      	lsls	r3, r3, #2
    52f6:	440b      	add	r3, r1
    52f8:	3334      	adds	r3, #52	; 0x34
    52fa:	687a      	ldr	r2, [r7, #4]
    52fc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    52fe:	7afb      	ldrb	r3, [r7, #11]
    5300:	2206      	movs	r2, #6
    5302:	4619      	mov	r1, r3
    5304:	68f8      	ldr	r0, [r7, #12]
    5306:	4b03      	ldr	r3, [pc, #12]	; (5314 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5308:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    530a:	bf00      	nop
    530c:	3710      	adds	r7, #16
    530e:	46bd      	mov	sp, r7
    5310:	bd80      	pop	{r7, pc}
    5312:	bf00      	nop
    5314:	000051f7 	.word	0x000051f7

00005318 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5318:	b480      	push	{r7}
    531a:	b085      	sub	sp, #20
    531c:	af00      	add	r7, sp, #0
    531e:	60f8      	str	r0, [r7, #12]
    5320:	460b      	mov	r3, r1
    5322:	607a      	str	r2, [r7, #4]
    5324:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5326:	7afa      	ldrb	r2, [r7, #11]
    5328:	68f9      	ldr	r1, [r7, #12]
    532a:	4613      	mov	r3, r2
    532c:	009b      	lsls	r3, r3, #2
    532e:	4413      	add	r3, r2
    5330:	009b      	lsls	r3, r3, #2
    5332:	440b      	add	r3, r1
    5334:	3338      	adds	r3, #56	; 0x38
    5336:	687a      	ldr	r2, [r7, #4]
    5338:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    533a:	bf00      	nop
    533c:	3714      	adds	r7, #20
    533e:	46bd      	mov	sp, r7
    5340:	f85d 7b04 	ldr.w	r7, [sp], #4
    5344:	4770      	bx	lr

00005346 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5346:	b480      	push	{r7}
    5348:	b083      	sub	sp, #12
    534a:	af00      	add	r7, sp, #0
    534c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	691b      	ldr	r3, [r3, #16]
    5352:	085b      	lsrs	r3, r3, #1
    5354:	f003 0301 	and.w	r3, r3, #1
    5358:	2b00      	cmp	r3, #0
    535a:	bf14      	ite	ne
    535c:	2301      	movne	r3, #1
    535e:	2300      	moveq	r3, #0
    5360:	b2db      	uxtb	r3, r3
}
    5362:	4618      	mov	r0, r3
    5364:	370c      	adds	r7, #12
    5366:	46bd      	mov	sp, r7
    5368:	f85d 7b04 	ldr.w	r7, [sp], #4
    536c:	4770      	bx	lr

0000536e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    536e:	b480      	push	{r7}
    5370:	b083      	sub	sp, #12
    5372:	af00      	add	r7, sp, #0
    5374:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	691b      	ldr	r3, [r3, #16]
    537a:	0a1b      	lsrs	r3, r3, #8
    537c:	f003 0301 	and.w	r3, r3, #1
    5380:	2b00      	cmp	r3, #0
    5382:	bf14      	ite	ne
    5384:	2301      	movne	r3, #1
    5386:	2300      	moveq	r3, #0
    5388:	b2db      	uxtb	r3, r3
}
    538a:	4618      	mov	r0, r3
    538c:	370c      	adds	r7, #12
    538e:	46bd      	mov	sp, r7
    5390:	f85d 7b04 	ldr.w	r7, [sp], #4
    5394:	4770      	bx	lr

00005396 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5396:	b480      	push	{r7}
    5398:	b085      	sub	sp, #20
    539a:	af00      	add	r7, sp, #0
    539c:	6078      	str	r0, [r7, #4]
    539e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	691b      	ldr	r3, [r3, #16]
    53a4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    53a6:	68fa      	ldr	r2, [r7, #12]
    53a8:	683b      	ldr	r3, [r7, #0]
    53aa:	4013      	ands	r3, r2
    53ac:	60fb      	str	r3, [r7, #12]
	return tmp;
    53ae:	68fb      	ldr	r3, [r7, #12]
}
    53b0:	4618      	mov	r0, r3
    53b2:	3714      	adds	r7, #20
    53b4:	46bd      	mov	sp, r7
    53b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53ba:	4770      	bx	lr

000053bc <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    53bc:	b480      	push	{r7}
    53be:	b085      	sub	sp, #20
    53c0:	af00      	add	r7, sp, #0
    53c2:	60f8      	str	r0, [r7, #12]
    53c4:	460b      	mov	r3, r1
    53c6:	607a      	str	r2, [r7, #4]
    53c8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    53ca:	7afb      	ldrb	r3, [r7, #11]
    53cc:	68fa      	ldr	r2, [r7, #12]
    53ce:	3304      	adds	r3, #4
    53d0:	009b      	lsls	r3, r3, #2
    53d2:	4413      	add	r3, r2
    53d4:	687a      	ldr	r2, [r7, #4]
    53d6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53d8:	bf00      	nop
    53da:	3714      	adds	r7, #20
    53dc:	46bd      	mov	sp, r7
    53de:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e2:	4770      	bx	lr

000053e4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    53e4:	b480      	push	{r7}
    53e6:	b083      	sub	sp, #12
    53e8:	af00      	add	r7, sp, #0
    53ea:	6078      	str	r0, [r7, #4]
    53ec:	460b      	mov	r3, r1
    53ee:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    53f0:	687b      	ldr	r3, [r7, #4]
    53f2:	78fa      	ldrb	r2, [r7, #3]
    53f4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53f6:	bf00      	nop
    53f8:	370c      	adds	r7, #12
    53fa:	46bd      	mov	sp, r7
    53fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5400:	4770      	bx	lr

00005402 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5402:	b480      	push	{r7}
    5404:	b085      	sub	sp, #20
    5406:	af00      	add	r7, sp, #0
    5408:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    540a:	687b      	ldr	r3, [r7, #4]
    540c:	f893 3020 	ldrb.w	r3, [r3, #32]
    5410:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5412:	7bfb      	ldrb	r3, [r7, #15]
    5414:	f003 0301 	and.w	r3, r3, #1
    5418:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    541a:	7bfb      	ldrb	r3, [r7, #15]
    541c:	2b00      	cmp	r3, #0
    541e:	bf14      	ite	ne
    5420:	2301      	movne	r3, #1
    5422:	2300      	moveq	r3, #0
    5424:	b2db      	uxtb	r3, r3
}
    5426:	4618      	mov	r0, r3
    5428:	3714      	adds	r7, #20
    542a:	46bd      	mov	sp, r7
    542c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5430:	4770      	bx	lr

00005432 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5432:	b480      	push	{r7}
    5434:	b083      	sub	sp, #12
    5436:	af00      	add	r7, sp, #0
    5438:	6078      	str	r0, [r7, #4]
    543a:	460b      	mov	r3, r1
    543c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	78fa      	ldrb	r2, [r7, #3]
    5442:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5446:	bf00      	nop
    5448:	370c      	adds	r7, #12
    544a:	46bd      	mov	sp, r7
    544c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5450:	4770      	bx	lr

00005452 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5452:	b480      	push	{r7}
    5454:	b083      	sub	sp, #12
    5456:	af00      	add	r7, sp, #0
    5458:	6078      	str	r0, [r7, #4]
    545a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	683a      	ldr	r2, [r7, #0]
    5460:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5462:	bf00      	nop
    5464:	370c      	adds	r7, #12
    5466:	46bd      	mov	sp, r7
    5468:	f85d 7b04 	ldr.w	r7, [sp], #4
    546c:	4770      	bx	lr

0000546e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    546e:	b480      	push	{r7}
    5470:	b083      	sub	sp, #12
    5472:	af00      	add	r7, sp, #0
    5474:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    547a:	4618      	mov	r0, r3
    547c:	370c      	adds	r7, #12
    547e:	46bd      	mov	sp, r7
    5480:	f85d 7b04 	ldr.w	r7, [sp], #4
    5484:	4770      	bx	lr

00005486 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5486:	b480      	push	{r7}
    5488:	b083      	sub	sp, #12
    548a:	af00      	add	r7, sp, #0
    548c:	6078      	str	r0, [r7, #4]
    548e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	683a      	ldr	r2, [r7, #0]
    5494:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5496:	bf00      	nop
    5498:	370c      	adds	r7, #12
    549a:	46bd      	mov	sp, r7
    549c:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a0:	4770      	bx	lr

000054a2 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    54a2:	b480      	push	{r7}
    54a4:	b085      	sub	sp, #20
    54a6:	af00      	add	r7, sp, #0
    54a8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    54b2:	7bfb      	ldrb	r3, [r7, #15]
    54b4:	085b      	lsrs	r3, r3, #1
    54b6:	b2db      	uxtb	r3, r3
    54b8:	f003 0301 	and.w	r3, r3, #1
    54bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54be:	7bfb      	ldrb	r3, [r7, #15]
    54c0:	2b00      	cmp	r3, #0
    54c2:	bf14      	ite	ne
    54c4:	2301      	movne	r3, #1
    54c6:	2300      	moveq	r3, #0
    54c8:	b2db      	uxtb	r3, r3
}
    54ca:	4618      	mov	r0, r3
    54cc:	3714      	adds	r7, #20
    54ce:	46bd      	mov	sp, r7
    54d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54d4:	4770      	bx	lr

000054d6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    54d6:	b480      	push	{r7}
    54d8:	b085      	sub	sp, #20
    54da:	af00      	add	r7, sp, #0
    54dc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    54e6:	7bfb      	ldrb	r3, [r7, #15]
    54e8:	089b      	lsrs	r3, r3, #2
    54ea:	b2db      	uxtb	r3, r3
    54ec:	f003 0301 	and.w	r3, r3, #1
    54f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54f2:	7bfb      	ldrb	r3, [r7, #15]
    54f4:	2b00      	cmp	r3, #0
    54f6:	bf14      	ite	ne
    54f8:	2301      	movne	r3, #1
    54fa:	2300      	moveq	r3, #0
    54fc:	b2db      	uxtb	r3, r3
}
    54fe:	4618      	mov	r0, r3
    5500:	3714      	adds	r7, #20
    5502:	46bd      	mov	sp, r7
    5504:	f85d 7b04 	ldr.w	r7, [sp], #4
    5508:	4770      	bx	lr

0000550a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    550a:	b480      	push	{r7}
    550c:	b085      	sub	sp, #20
    550e:	af00      	add	r7, sp, #0
    5510:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5518:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    551a:	7bfb      	ldrb	r3, [r7, #15]
    551c:	08db      	lsrs	r3, r3, #3
    551e:	b2db      	uxtb	r3, r3
    5520:	f003 0301 	and.w	r3, r3, #1
    5524:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5526:	7bfb      	ldrb	r3, [r7, #15]
    5528:	2b00      	cmp	r3, #0
    552a:	bf14      	ite	ne
    552c:	2301      	movne	r3, #1
    552e:	2300      	moveq	r3, #0
    5530:	b2db      	uxtb	r3, r3
}
    5532:	4618      	mov	r0, r3
    5534:	3714      	adds	r7, #20
    5536:	46bd      	mov	sp, r7
    5538:	f85d 7b04 	ldr.w	r7, [sp], #4
    553c:	4770      	bx	lr

0000553e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    553e:	b480      	push	{r7}
    5540:	b085      	sub	sp, #20
    5542:	af00      	add	r7, sp, #0
    5544:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    554c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    554e:	7bfb      	ldrb	r3, [r7, #15]
    5550:	091b      	lsrs	r3, r3, #4
    5552:	b2db      	uxtb	r3, r3
    5554:	f003 0301 	and.w	r3, r3, #1
    5558:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    555a:	7bfb      	ldrb	r3, [r7, #15]
    555c:	2b00      	cmp	r3, #0
    555e:	bf14      	ite	ne
    5560:	2301      	movne	r3, #1
    5562:	2300      	moveq	r3, #0
    5564:	b2db      	uxtb	r3, r3
}
    5566:	4618      	mov	r0, r3
    5568:	3714      	adds	r7, #20
    556a:	46bd      	mov	sp, r7
    556c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5570:	4770      	bx	lr
	...

00005574 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5574:	b580      	push	{r7, lr}
    5576:	b082      	sub	sp, #8
    5578:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    557a:	4b0a      	ldr	r3, [pc, #40]	; (55a4 <_oscctrl_init_sources+0x30>)
    557c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    557e:	4a0a      	ldr	r2, [pc, #40]	; (55a8 <_oscctrl_init_sources+0x34>)
    5580:	2101      	movs	r1, #1
    5582:	6878      	ldr	r0, [r7, #4]
    5584:	4b09      	ldr	r3, [pc, #36]	; (55ac <_oscctrl_init_sources+0x38>)
    5586:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5588:	bf00      	nop
    558a:	6878      	ldr	r0, [r7, #4]
    558c:	4b08      	ldr	r3, [pc, #32]	; (55b0 <_oscctrl_init_sources+0x3c>)
    558e:	4798      	blx	r3
    5590:	4603      	mov	r3, r0
    5592:	f083 0301 	eor.w	r3, r3, #1
    5596:	b2db      	uxtb	r3, r3
    5598:	2b00      	cmp	r3, #0
    559a:	d1f6      	bne.n	558a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    559c:	bf00      	nop
    559e:	3708      	adds	r7, #8
    55a0:	46bd      	mov	sp, r7
    55a2:	bd80      	pop	{r7, pc}
    55a4:	40001000 	.word	0x40001000
    55a8:	03002646 	.word	0x03002646
    55ac:	000053bd 	.word	0x000053bd
    55b0:	00005347 	.word	0x00005347

000055b4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	b084      	sub	sp, #16
    55b8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    55ba:	4b6b      	ldr	r3, [pc, #428]	; (5768 <_oscctrl_init_referenced_generators+0x1b4>)
    55bc:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    55be:	2204      	movs	r2, #4
    55c0:	2100      	movs	r1, #0
    55c2:	486a      	ldr	r0, [pc, #424]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    55c4:	4b6a      	ldr	r3, [pc, #424]	; (5770 <_oscctrl_init_referenced_generators+0x1bc>)
    55c6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    55c8:	bf00      	nop
    55ca:	4868      	ldr	r0, [pc, #416]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    55cc:	4b69      	ldr	r3, [pc, #420]	; (5774 <_oscctrl_init_referenced_generators+0x1c0>)
    55ce:	4798      	blx	r3
    55d0:	4603      	mov	r3, r0
    55d2:	2b00      	cmp	r3, #0
    55d4:	d1f9      	bne.n	55ca <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    55d6:	2100      	movs	r1, #0
    55d8:	68f8      	ldr	r0, [r7, #12]
    55da:	4b67      	ldr	r3, [pc, #412]	; (5778 <_oscctrl_init_referenced_generators+0x1c4>)
    55dc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    55de:	4967      	ldr	r1, [pc, #412]	; (577c <_oscctrl_init_referenced_generators+0x1c8>)
    55e0:	68f8      	ldr	r0, [r7, #12]
    55e2:	4b67      	ldr	r3, [pc, #412]	; (5780 <_oscctrl_init_referenced_generators+0x1cc>)
    55e4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    55e6:	bf00      	nop
    55e8:	68f8      	ldr	r0, [r7, #12]
    55ea:	4b66      	ldr	r3, [pc, #408]	; (5784 <_oscctrl_init_referenced_generators+0x1d0>)
    55ec:	4798      	blx	r3
    55ee:	4603      	mov	r3, r0
    55f0:	2b00      	cmp	r3, #0
    55f2:	d1f9      	bne.n	55e8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    55f4:	2100      	movs	r1, #0
    55f6:	68f8      	ldr	r0, [r7, #12]
    55f8:	4b63      	ldr	r3, [pc, #396]	; (5788 <_oscctrl_init_referenced_generators+0x1d4>)
    55fa:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    55fc:	bf00      	nop
    55fe:	68f8      	ldr	r0, [r7, #12]
    5600:	4b62      	ldr	r3, [pc, #392]	; (578c <_oscctrl_init_referenced_generators+0x1d8>)
    5602:	4798      	blx	r3
    5604:	4603      	mov	r3, r0
    5606:	2b00      	cmp	r3, #0
    5608:	d1f9      	bne.n	55fe <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    560a:	2302      	movs	r3, #2
    560c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    560e:	7afb      	ldrb	r3, [r7, #11]
    5610:	4619      	mov	r1, r3
    5612:	68f8      	ldr	r0, [r7, #12]
    5614:	4b58      	ldr	r3, [pc, #352]	; (5778 <_oscctrl_init_referenced_generators+0x1c4>)
    5616:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5618:	bf00      	nop
    561a:	68f8      	ldr	r0, [r7, #12]
    561c:	4b5c      	ldr	r3, [pc, #368]	; (5790 <_oscctrl_init_referenced_generators+0x1dc>)
    561e:	4798      	blx	r3
    5620:	4603      	mov	r3, r0
    5622:	2b00      	cmp	r3, #0
    5624:	d1f9      	bne.n	561a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5626:	68f8      	ldr	r0, [r7, #12]
    5628:	4b5a      	ldr	r3, [pc, #360]	; (5794 <_oscctrl_init_referenced_generators+0x1e0>)
    562a:	4798      	blx	r3
    562c:	4603      	mov	r3, r0
    562e:	4619      	mov	r1, r3
    5630:	68f8      	ldr	r0, [r7, #12]
    5632:	4b59      	ldr	r3, [pc, #356]	; (5798 <_oscctrl_init_referenced_generators+0x1e4>)
    5634:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5636:	bf00      	nop
    5638:	68f8      	ldr	r0, [r7, #12]
    563a:	4b58      	ldr	r3, [pc, #352]	; (579c <_oscctrl_init_referenced_generators+0x1e8>)
    563c:	4798      	blx	r3
    563e:	4603      	mov	r3, r0
    5640:	2b00      	cmp	r3, #0
    5642:	d1f9      	bne.n	5638 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5644:	2319      	movs	r3, #25
    5646:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5648:	7afb      	ldrb	r3, [r7, #11]
    564a:	4619      	mov	r1, r3
    564c:	68f8      	ldr	r0, [r7, #12]
    564e:	4b4e      	ldr	r3, [pc, #312]	; (5788 <_oscctrl_init_referenced_generators+0x1d4>)
    5650:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5652:	bf00      	nop
    5654:	68f8      	ldr	r0, [r7, #12]
    5656:	4b4d      	ldr	r3, [pc, #308]	; (578c <_oscctrl_init_referenced_generators+0x1d8>)
    5658:	4798      	blx	r3
    565a:	4603      	mov	r3, r0
    565c:	2b00      	cmp	r3, #0
    565e:	d1f9      	bne.n	5654 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5660:	2245      	movs	r2, #69	; 0x45
    5662:	2101      	movs	r1, #1
    5664:	4841      	ldr	r0, [pc, #260]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    5666:	4b4e      	ldr	r3, [pc, #312]	; (57a0 <_oscctrl_init_referenced_generators+0x1ec>)
    5668:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    566a:	223b      	movs	r2, #59	; 0x3b
    566c:	2100      	movs	r1, #0
    566e:	68f8      	ldr	r0, [r7, #12]
    5670:	4b4c      	ldr	r3, [pc, #304]	; (57a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5672:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5674:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5678:	2100      	movs	r1, #0
    567a:	68f8      	ldr	r0, [r7, #12]
    567c:	4b4a      	ldr	r3, [pc, #296]	; (57a8 <_oscctrl_init_referenced_generators+0x1f4>)
    567e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5680:	2242      	movs	r2, #66	; 0x42
    5682:	2100      	movs	r1, #0
    5684:	68f8      	ldr	r0, [r7, #12]
    5686:	4b49      	ldr	r3, [pc, #292]	; (57ac <_oscctrl_init_referenced_generators+0x1f8>)
    5688:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    568a:	4a49      	ldr	r2, [pc, #292]	; (57b0 <_oscctrl_init_referenced_generators+0x1fc>)
    568c:	2101      	movs	r1, #1
    568e:	68f8      	ldr	r0, [r7, #12]
    5690:	4b44      	ldr	r3, [pc, #272]	; (57a4 <_oscctrl_init_referenced_generators+0x1f0>)
    5692:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5694:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5698:	2101      	movs	r1, #1
    569a:	68f8      	ldr	r0, [r7, #12]
    569c:	4b42      	ldr	r3, [pc, #264]	; (57a8 <_oscctrl_init_referenced_generators+0x1f4>)
    569e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    56a0:	2202      	movs	r2, #2
    56a2:	2101      	movs	r1, #1
    56a4:	68f8      	ldr	r0, [r7, #12]
    56a6:	4b41      	ldr	r3, [pc, #260]	; (57ac <_oscctrl_init_referenced_generators+0x1f8>)
    56a8:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    56aa:	68f8      	ldr	r0, [r7, #12]
    56ac:	4b41      	ldr	r3, [pc, #260]	; (57b4 <_oscctrl_init_referenced_generators+0x200>)
    56ae:	4798      	blx	r3
    56b0:	4603      	mov	r3, r0
    56b2:	2b00      	cmp	r3, #0
    56b4:	d00c      	beq.n	56d0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    56b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    56ba:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    56bc:	bf00      	nop
    56be:	6879      	ldr	r1, [r7, #4]
    56c0:	68f8      	ldr	r0, [r7, #12]
    56c2:	4b3d      	ldr	r3, [pc, #244]	; (57b8 <_oscctrl_init_referenced_generators+0x204>)
    56c4:	4798      	blx	r3
    56c6:	4602      	mov	r2, r0
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	429a      	cmp	r2, r3
    56cc:	d1f7      	bne.n	56be <_oscctrl_init_referenced_generators+0x10a>
    56ce:	e009      	b.n	56e4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    56d0:	bf00      	nop
    56d2:	68f8      	ldr	r0, [r7, #12]
    56d4:	4b39      	ldr	r3, [pc, #228]	; (57bc <_oscctrl_init_referenced_generators+0x208>)
    56d6:	4798      	blx	r3
    56d8:	4603      	mov	r3, r0
    56da:	f083 0301 	eor.w	r3, r3, #1
    56de:	b2db      	uxtb	r3, r3
    56e0:	2b00      	cmp	r3, #0
    56e2:	d1f6      	bne.n	56d2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    56e4:	bf00      	nop
    56e6:	2100      	movs	r1, #0
    56e8:	68f8      	ldr	r0, [r7, #12]
    56ea:	4b35      	ldr	r3, [pc, #212]	; (57c0 <_oscctrl_init_referenced_generators+0x20c>)
    56ec:	4798      	blx	r3
    56ee:	4603      	mov	r3, r0
    56f0:	f083 0301 	eor.w	r3, r3, #1
    56f4:	b2db      	uxtb	r3, r3
    56f6:	2b00      	cmp	r3, #0
    56f8:	d009      	beq.n	570e <_oscctrl_init_referenced_generators+0x15a>
    56fa:	2100      	movs	r1, #0
    56fc:	68f8      	ldr	r0, [r7, #12]
    56fe:	4b31      	ldr	r3, [pc, #196]	; (57c4 <_oscctrl_init_referenced_generators+0x210>)
    5700:	4798      	blx	r3
    5702:	4603      	mov	r3, r0
    5704:	f083 0301 	eor.w	r3, r3, #1
    5708:	b2db      	uxtb	r3, r3
    570a:	2b00      	cmp	r3, #0
    570c:	d1eb      	bne.n	56e6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    570e:	bf00      	nop
    5710:	2101      	movs	r1, #1
    5712:	68f8      	ldr	r0, [r7, #12]
    5714:	4b2a      	ldr	r3, [pc, #168]	; (57c0 <_oscctrl_init_referenced_generators+0x20c>)
    5716:	4798      	blx	r3
    5718:	4603      	mov	r3, r0
    571a:	f083 0301 	eor.w	r3, r3, #1
    571e:	b2db      	uxtb	r3, r3
    5720:	2b00      	cmp	r3, #0
    5722:	d009      	beq.n	5738 <_oscctrl_init_referenced_generators+0x184>
    5724:	2101      	movs	r1, #1
    5726:	68f8      	ldr	r0, [r7, #12]
    5728:	4b26      	ldr	r3, [pc, #152]	; (57c4 <_oscctrl_init_referenced_generators+0x210>)
    572a:	4798      	blx	r3
    572c:	4603      	mov	r3, r0
    572e:	f083 0301 	eor.w	r3, r3, #1
    5732:	b2db      	uxtb	r3, r3
    5734:	2b00      	cmp	r3, #0
    5736:	d1eb      	bne.n	5710 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5738:	bf00      	nop
    573a:	480c      	ldr	r0, [pc, #48]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    573c:	4b22      	ldr	r3, [pc, #136]	; (57c8 <_oscctrl_init_referenced_generators+0x214>)
    573e:	4798      	blx	r3
    5740:	4603      	mov	r3, r0
    5742:	2b00      	cmp	r3, #0
    5744:	d1f9      	bne.n	573a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5746:	2207      	movs	r2, #7
    5748:	2100      	movs	r1, #0
    574a:	4808      	ldr	r0, [pc, #32]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    574c:	4b08      	ldr	r3, [pc, #32]	; (5770 <_oscctrl_init_referenced_generators+0x1bc>)
    574e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5750:	bf00      	nop
    5752:	4806      	ldr	r0, [pc, #24]	; (576c <_oscctrl_init_referenced_generators+0x1b8>)
    5754:	4b07      	ldr	r3, [pc, #28]	; (5774 <_oscctrl_init_referenced_generators+0x1c0>)
    5756:	4798      	blx	r3
    5758:	4603      	mov	r3, r0
    575a:	2b00      	cmp	r3, #0
    575c:	d1f9      	bne.n	5752 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    575e:	bf00      	nop
    5760:	3710      	adds	r7, #16
    5762:	46bd      	mov	sp, r7
    5764:	bd80      	pop	{r7, pc}
    5766:	bf00      	nop
    5768:	40001000 	.word	0x40001000
    576c:	40001c00 	.word	0x40001c00
    5770:	00005181 	.word	0x00005181
    5774:	00005141 	.word	0x00005141
    5778:	000053e5 	.word	0x000053e5
    577c:	0401bb80 	.word	0x0401bb80
    5780:	00005487 	.word	0x00005487
    5784:	0000553f 	.word	0x0000553f
    5788:	00005433 	.word	0x00005433
    578c:	000054d7 	.word	0x000054d7
    5790:	000054a3 	.word	0x000054a3
    5794:	0000546f 	.word	0x0000546f
    5798:	00005453 	.word	0x00005453
    579c:	0000550b 	.word	0x0000550b
    57a0:	000051d1 	.word	0x000051d1
    57a4:	000052dd 	.word	0x000052dd
    57a8:	00005319 	.word	0x00005319
    57ac:	000052a1 	.word	0x000052a1
    57b0:	000407a0 	.word	0x000407a0
    57b4:	00005403 	.word	0x00005403
    57b8:	00005397 	.word	0x00005397
    57bc:	0000536f 	.word	0x0000536f
    57c0:	0000522d 	.word	0x0000522d
    57c4:	00005265 	.word	0x00005265
    57c8:	00005169 	.word	0x00005169

000057cc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    57cc:	b480      	push	{r7}
    57ce:	b083      	sub	sp, #12
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	69db      	ldr	r3, [r3, #28]
    57d8:	0a9b      	lsrs	r3, r3, #10
    57da:	f003 0301 	and.w	r3, r3, #1
    57de:	2b00      	cmp	r3, #0
    57e0:	bf14      	ite	ne
    57e2:	2301      	movne	r3, #1
    57e4:	2300      	moveq	r3, #0
    57e6:	b2db      	uxtb	r3, r3
}
    57e8:	4618      	mov	r0, r3
    57ea:	370c      	adds	r7, #12
    57ec:	46bd      	mov	sp, r7
    57ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f2:	4770      	bx	lr

000057f4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    57f4:	b480      	push	{r7}
    57f6:	b083      	sub	sp, #12
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5802:	61da      	str	r2, [r3, #28]
}
    5804:	bf00      	nop
    5806:	370c      	adds	r7, #12
    5808:	46bd      	mov	sp, r7
    580a:	f85d 7b04 	ldr.w	r7, [sp], #4
    580e:	4770      	bx	lr

00005810 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5810:	b480      	push	{r7}
    5812:	b083      	sub	sp, #12
    5814:	af00      	add	r7, sp, #0
    5816:	6078      	str	r0, [r7, #4]
    5818:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    581a:	687b      	ldr	r3, [r7, #4]
    581c:	683a      	ldr	r2, [r7, #0]
    581e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5820:	bf00      	nop
    5822:	370c      	adds	r7, #12
    5824:	46bd      	mov	sp, r7
    5826:	f85d 7b04 	ldr.w	r7, [sp], #4
    582a:	4770      	bx	lr

0000582c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    582c:	b480      	push	{r7}
    582e:	b083      	sub	sp, #12
    5830:	af00      	add	r7, sp, #0
    5832:	6078      	str	r0, [r7, #4]
    5834:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5836:	687b      	ldr	r3, [r7, #4]
    5838:	683a      	ldr	r2, [r7, #0]
    583a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    583c:	bf00      	nop
    583e:	370c      	adds	r7, #12
    5840:	46bd      	mov	sp, r7
    5842:	f85d 7b04 	ldr.w	r7, [sp], #4
    5846:	4770      	bx	lr

00005848 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5848:	b480      	push	{r7}
    584a:	b083      	sub	sp, #12
    584c:	af00      	add	r7, sp, #0
    584e:	6078      	str	r0, [r7, #4]
    5850:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5852:	687b      	ldr	r3, [r7, #4]
    5854:	683a      	ldr	r2, [r7, #0]
    5856:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5858:	bf00      	nop
    585a:	370c      	adds	r7, #12
    585c:	46bd      	mov	sp, r7
    585e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5862:	4770      	bx	lr

00005864 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5864:	b480      	push	{r7}
    5866:	b083      	sub	sp, #12
    5868:	af00      	add	r7, sp, #0
    586a:	6078      	str	r0, [r7, #4]
    586c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	683a      	ldr	r2, [r7, #0]
    5872:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5874:	bf00      	nop
    5876:	370c      	adds	r7, #12
    5878:	46bd      	mov	sp, r7
    587a:	f85d 7b04 	ldr.w	r7, [sp], #4
    587e:	4770      	bx	lr

00005880 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5880:	b480      	push	{r7}
    5882:	b085      	sub	sp, #20
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
    5888:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    588e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5896:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5898:	683b      	ldr	r3, [r7, #0]
    589a:	b2db      	uxtb	r3, r3
    589c:	68fa      	ldr	r2, [r7, #12]
    589e:	4313      	orrs	r3, r2
    58a0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    58a2:	687b      	ldr	r3, [r7, #4]
    58a4:	68fa      	ldr	r2, [r7, #12]
    58a6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58a8:	bf00      	nop
    58aa:	3714      	adds	r7, #20
    58ac:	46bd      	mov	sp, r7
    58ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b2:	4770      	bx	lr

000058b4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    58b4:	b480      	push	{r7}
    58b6:	b085      	sub	sp, #20
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
    58bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    58be:	687b      	ldr	r3, [r7, #4]
    58c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    58c2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    58c4:	68fb      	ldr	r3, [r7, #12]
    58c6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    58ca:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    58cc:	683b      	ldr	r3, [r7, #0]
    58ce:	041b      	lsls	r3, r3, #16
    58d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    58d4:	68fa      	ldr	r2, [r7, #12]
    58d6:	4313      	orrs	r3, r2
    58d8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	68fa      	ldr	r2, [r7, #12]
    58de:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58e0:	bf00      	nop
    58e2:	3714      	adds	r7, #20
    58e4:	46bd      	mov	sp, r7
    58e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ea:	4770      	bx	lr

000058ec <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    58ec:	b480      	push	{r7}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
    58f4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	683a      	ldr	r2, [r7, #0]
    58fa:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58fc:	bf00      	nop
    58fe:	370c      	adds	r7, #12
    5900:	46bd      	mov	sp, r7
    5902:	f85d 7b04 	ldr.w	r7, [sp], #4
    5906:	4770      	bx	lr

00005908 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5908:	b480      	push	{r7}
    590a:	b083      	sub	sp, #12
    590c:	af00      	add	r7, sp, #0
    590e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5914:	4618      	mov	r0, r3
    5916:	370c      	adds	r7, #12
    5918:	46bd      	mov	sp, r7
    591a:	f85d 7b04 	ldr.w	r7, [sp], #4
    591e:	4770      	bx	lr

00005920 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5920:	b480      	push	{r7}
    5922:	b085      	sub	sp, #20
    5924:	af00      	add	r7, sp, #0
    5926:	60f8      	str	r0, [r7, #12]
    5928:	60b9      	str	r1, [r7, #8]
    592a:	607a      	str	r2, [r7, #4]
	while (count--) {
    592c:	e007      	b.n	593e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    592e:	68fb      	ldr	r3, [r7, #12]
    5930:	1c5a      	adds	r2, r3, #1
    5932:	60fa      	str	r2, [r7, #12]
    5934:	68ba      	ldr	r2, [r7, #8]
    5936:	1c51      	adds	r1, r2, #1
    5938:	60b9      	str	r1, [r7, #8]
    593a:	7812      	ldrb	r2, [r2, #0]
    593c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    593e:	687b      	ldr	r3, [r7, #4]
    5940:	1e5a      	subs	r2, r3, #1
    5942:	607a      	str	r2, [r7, #4]
    5944:	2b00      	cmp	r3, #0
    5946:	d1f2      	bne.n	592e <_qspi_memcpy+0xe>
	}
}
    5948:	bf00      	nop
    594a:	3714      	adds	r7, #20
    594c:	46bd      	mov	sp, r7
    594e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5952:	4770      	bx	lr

00005954 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    595c:	4903      	ldr	r1, [pc, #12]	; (596c <_qspi_end_transfer+0x18>)
    595e:	6878      	ldr	r0, [r7, #4]
    5960:	4b03      	ldr	r3, [pc, #12]	; (5970 <_qspi_end_transfer+0x1c>)
    5962:	4798      	blx	r3
}
    5964:	bf00      	nop
    5966:	3708      	adds	r7, #8
    5968:	46bd      	mov	sp, r7
    596a:	bd80      	pop	{r7, pc}
    596c:	01000002 	.word	0x01000002
    5970:	00005811 	.word	0x00005811

00005974 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5974:	b580      	push	{r7, lr}
    5976:	b082      	sub	sp, #8
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
    597c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	2b00      	cmp	r3, #0
    5982:	d004      	beq.n	598e <_qspi_sync_init+0x1a>
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	2b00      	cmp	r3, #0
    5988:	d001      	beq.n	598e <_qspi_sync_init+0x1a>
    598a:	2301      	movs	r3, #1
    598c:	e000      	b.n	5990 <_qspi_sync_init+0x1c>
    598e:	2300      	movs	r3, #0
    5990:	f003 0301 	and.w	r3, r3, #1
    5994:	b2db      	uxtb	r3, r3
    5996:	2240      	movs	r2, #64	; 0x40
    5998:	490c      	ldr	r1, [pc, #48]	; (59cc <_qspi_sync_init+0x58>)
    599a:	4618      	mov	r0, r3
    599c:	4b0c      	ldr	r3, [pc, #48]	; (59d0 <_qspi_sync_init+0x5c>)
    599e:	4798      	blx	r3
	dev->prvt = hw;
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	683a      	ldr	r2, [r7, #0]
    59a4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	2101      	movs	r1, #1
    59ac:	4618      	mov	r0, r3
    59ae:	4b09      	ldr	r3, [pc, #36]	; (59d4 <_qspi_sync_init+0x60>)
    59b0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    59b2:	4909      	ldr	r1, [pc, #36]	; (59d8 <_qspi_sync_init+0x64>)
    59b4:	6838      	ldr	r0, [r7, #0]
    59b6:	4b09      	ldr	r3, [pc, #36]	; (59dc <_qspi_sync_init+0x68>)
    59b8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    59ba:	4909      	ldr	r1, [pc, #36]	; (59e0 <_qspi_sync_init+0x6c>)
    59bc:	6838      	ldr	r0, [r7, #0]
    59be:	4b09      	ldr	r3, [pc, #36]	; (59e4 <_qspi_sync_init+0x70>)
    59c0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    59c2:	2300      	movs	r3, #0
}
    59c4:	4618      	mov	r0, r3
    59c6:	3708      	adds	r7, #8
    59c8:	46bd      	mov	sp, r7
    59ca:	bd80      	pop	{r7, pc}
    59cc:	0000f280 	.word	0x0000f280
    59d0:	0000397d 	.word	0x0000397d
    59d4:	00005811 	.word	0x00005811
    59d8:	06000011 	.word	0x06000011
    59dc:	0000582d 	.word	0x0000582d
    59e0:	00241300 	.word	0x00241300
    59e4:	00005849 	.word	0x00005849

000059e8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b082      	sub	sp, #8
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	2102      	movs	r1, #2
    59f6:	4618      	mov	r0, r3
    59f8:	4b03      	ldr	r3, [pc, #12]	; (5a08 <_qspi_sync_enable+0x20>)
    59fa:	4798      	blx	r3
	return ERR_NONE;
    59fc:	2300      	movs	r3, #0
}
    59fe:	4618      	mov	r0, r3
    5a00:	3708      	adds	r7, #8
    5a02:	46bd      	mov	sp, r7
    5a04:	bd80      	pop	{r7, pc}
    5a06:	bf00      	nop
    5a08:	00005811 	.word	0x00005811

00005a0c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b082      	sub	sp, #8
    5a10:	af00      	add	r7, sp, #0
    5a12:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	2100      	movs	r1, #0
    5a1a:	4618      	mov	r0, r3
    5a1c:	4b03      	ldr	r3, [pc, #12]	; (5a2c <_qspi_sync_disable+0x20>)
    5a1e:	4798      	blx	r3
	return ERR_NONE;
    5a20:	2300      	movs	r3, #0
}
    5a22:	4618      	mov	r0, r3
    5a24:	3708      	adds	r7, #8
    5a26:	46bd      	mov	sp, r7
    5a28:	bd80      	pop	{r7, pc}
    5a2a:	bf00      	nop
    5a2c:	00005811 	.word	0x00005811

00005a30 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a30:	b580      	push	{r7, lr}
    5a32:	b084      	sub	sp, #16
    5a34:	af00      	add	r7, sp, #0
    5a36:	6078      	str	r0, [r7, #4]
    5a38:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	681b      	ldr	r3, [r3, #0]
    5a3e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5a40:	683b      	ldr	r3, [r7, #0]
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	f003 0320 	and.w	r3, r3, #32
    5a48:	b2db      	uxtb	r3, r3
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d005      	beq.n	5a5a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5a4e:	683b      	ldr	r3, [r7, #0]
    5a50:	689b      	ldr	r3, [r3, #8]
    5a52:	4619      	mov	r1, r3
    5a54:	68f8      	ldr	r0, [r7, #12]
    5a56:	4b13      	ldr	r3, [pc, #76]	; (5aa4 <_qspi_sync_command_set_ifr+0x74>)
    5a58:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5a5a:	683b      	ldr	r3, [r7, #0]
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	f003 0310 	and.w	r3, r3, #16
    5a62:	b2db      	uxtb	r3, r3
    5a64:	2b00      	cmp	r3, #0
    5a66:	d005      	beq.n	5a74 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5a68:	683b      	ldr	r3, [r7, #0]
    5a6a:	791b      	ldrb	r3, [r3, #4]
    5a6c:	4619      	mov	r1, r3
    5a6e:	68f8      	ldr	r0, [r7, #12]
    5a70:	4b0d      	ldr	r3, [pc, #52]	; (5aa8 <_qspi_sync_command_set_ifr+0x78>)
    5a72:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5a74:	683b      	ldr	r3, [r7, #0]
    5a76:	781b      	ldrb	r3, [r3, #0]
    5a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5a7c:	b2db      	uxtb	r3, r3
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d005      	beq.n	5a8e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5a82:	683b      	ldr	r3, [r7, #0]
    5a84:	795b      	ldrb	r3, [r3, #5]
    5a86:	4619      	mov	r1, r3
    5a88:	68f8      	ldr	r0, [r7, #12]
    5a8a:	4b08      	ldr	r3, [pc, #32]	; (5aac <_qspi_sync_command_set_ifr+0x7c>)
    5a8c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5a8e:	683b      	ldr	r3, [r7, #0]
    5a90:	681b      	ldr	r3, [r3, #0]
    5a92:	4619      	mov	r1, r3
    5a94:	68f8      	ldr	r0, [r7, #12]
    5a96:	4b06      	ldr	r3, [pc, #24]	; (5ab0 <_qspi_sync_command_set_ifr+0x80>)
    5a98:	4798      	blx	r3
}
    5a9a:	bf00      	nop
    5a9c:	3710      	adds	r7, #16
    5a9e:	46bd      	mov	sp, r7
    5aa0:	bd80      	pop	{r7, pc}
    5aa2:	bf00      	nop
    5aa4:	00005865 	.word	0x00005865
    5aa8:	00005881 	.word	0x00005881
    5aac:	000058b5 	.word	0x000058b5
    5ab0:	000058ed 	.word	0x000058ed

00005ab4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b084      	sub	sp, #16
    5ab8:	af00      	add	r7, sp, #0
    5aba:	6078      	str	r0, [r7, #4]
    5abc:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5ac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5ac8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5aca:	683b      	ldr	r3, [r7, #0]
    5acc:	781b      	ldrb	r3, [r3, #0]
    5ace:	f003 0320 	and.w	r3, r3, #32
    5ad2:	b2db      	uxtb	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d004      	beq.n	5ae2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5ad8:	683b      	ldr	r3, [r7, #0]
    5ada:	689b      	ldr	r3, [r3, #8]
    5adc:	68fa      	ldr	r2, [r7, #12]
    5ade:	4413      	add	r3, r2
    5ae0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5ae2:	68b8      	ldr	r0, [r7, #8]
    5ae4:	4b18      	ldr	r3, [pc, #96]	; (5b48 <_qspi_sync_run_transfer+0x94>)
    5ae6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5ae8:	683b      	ldr	r3, [r7, #0]
    5aea:	691b      	ldr	r3, [r3, #16]
    5aec:	2b00      	cmp	r3, #0
    5aee:	d103      	bne.n	5af8 <_qspi_sync_run_transfer+0x44>
    5af0:	683b      	ldr	r3, [r7, #0]
    5af2:	695b      	ldr	r3, [r3, #20]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d001      	beq.n	5afc <_qspi_sync_run_transfer+0x48>
    5af8:	2301      	movs	r3, #1
    5afa:	e000      	b.n	5afe <_qspi_sync_run_transfer+0x4a>
    5afc:	2300      	movs	r3, #0
    5afe:	f003 0301 	and.w	r3, r3, #1
    5b02:	b2db      	uxtb	r3, r3
    5b04:	2282      	movs	r2, #130	; 0x82
    5b06:	4911      	ldr	r1, [pc, #68]	; (5b4c <_qspi_sync_run_transfer+0x98>)
    5b08:	4618      	mov	r0, r3
    5b0a:	4b11      	ldr	r3, [pc, #68]	; (5b50 <_qspi_sync_run_transfer+0x9c>)
    5b0c:	4798      	blx	r3

	if (cmd->tx_buf) {
    5b0e:	683b      	ldr	r3, [r7, #0]
    5b10:	691b      	ldr	r3, [r3, #16]
    5b12:	2b00      	cmp	r3, #0
    5b14:	d008      	beq.n	5b28 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5b16:	683b      	ldr	r3, [r7, #0]
    5b18:	6919      	ldr	r1, [r3, #16]
    5b1a:	683b      	ldr	r3, [r7, #0]
    5b1c:	68db      	ldr	r3, [r3, #12]
    5b1e:	461a      	mov	r2, r3
    5b20:	68f8      	ldr	r0, [r7, #12]
    5b22:	4b0c      	ldr	r3, [pc, #48]	; (5b54 <_qspi_sync_run_transfer+0xa0>)
    5b24:	4798      	blx	r3
    5b26:	e007      	b.n	5b38 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5b28:	683b      	ldr	r3, [r7, #0]
    5b2a:	6958      	ldr	r0, [r3, #20]
    5b2c:	683b      	ldr	r3, [r7, #0]
    5b2e:	68db      	ldr	r3, [r3, #12]
    5b30:	461a      	mov	r2, r3
    5b32:	68f9      	ldr	r1, [r7, #12]
    5b34:	4b07      	ldr	r3, [pc, #28]	; (5b54 <_qspi_sync_run_transfer+0xa0>)
    5b36:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b3c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5b40:	bf00      	nop
    5b42:	3710      	adds	r7, #16
    5b44:	46bd      	mov	sp, r7
    5b46:	bd80      	pop	{r7, pc}
    5b48:	00005909 	.word	0x00005909
    5b4c:	0000f280 	.word	0x0000f280
    5b50:	0000397d 	.word	0x0000397d
    5b54:	00005921 	.word	0x00005921

00005b58 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5b58:	b580      	push	{r7, lr}
    5b5a:	b082      	sub	sp, #8
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	6078      	str	r0, [r7, #4]
    5b60:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5b62:	6839      	ldr	r1, [r7, #0]
    5b64:	6878      	ldr	r0, [r7, #4]
    5b66:	4b14      	ldr	r3, [pc, #80]	; (5bb8 <_qspi_sync_serial_run_command+0x60>)
    5b68:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5b6a:	683b      	ldr	r3, [r7, #0]
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5b72:	b2db      	uxtb	r3, r3
    5b74:	2b00      	cmp	r3, #0
    5b76:	d003      	beq.n	5b80 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5b78:	6839      	ldr	r1, [r7, #0]
    5b7a:	6878      	ldr	r0, [r7, #4]
    5b7c:	4b0f      	ldr	r3, [pc, #60]	; (5bbc <_qspi_sync_serial_run_command+0x64>)
    5b7e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	4618      	mov	r0, r3
    5b86:	4b0e      	ldr	r3, [pc, #56]	; (5bc0 <_qspi_sync_serial_run_command+0x68>)
    5b88:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5b8a:	bf00      	nop
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	681b      	ldr	r3, [r3, #0]
    5b90:	4618      	mov	r0, r3
    5b92:	4b0c      	ldr	r3, [pc, #48]	; (5bc4 <_qspi_sync_serial_run_command+0x6c>)
    5b94:	4798      	blx	r3
    5b96:	4603      	mov	r3, r0
    5b98:	f083 0301 	eor.w	r3, r3, #1
    5b9c:	b2db      	uxtb	r3, r3
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d1f4      	bne.n	5b8c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5ba2:	687b      	ldr	r3, [r7, #4]
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	4618      	mov	r0, r3
    5ba8:	4b07      	ldr	r3, [pc, #28]	; (5bc8 <_qspi_sync_serial_run_command+0x70>)
    5baa:	4798      	blx	r3
	return ERR_NONE;
    5bac:	2300      	movs	r3, #0
}
    5bae:	4618      	mov	r0, r3
    5bb0:	3708      	adds	r7, #8
    5bb2:	46bd      	mov	sp, r7
    5bb4:	bd80      	pop	{r7, pc}
    5bb6:	bf00      	nop
    5bb8:	00005a31 	.word	0x00005a31
    5bbc:	00005ab5 	.word	0x00005ab5
    5bc0:	00005955 	.word	0x00005955
    5bc4:	000057cd 	.word	0x000057cd
    5bc8:	000057f5 	.word	0x000057f5

00005bcc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5bcc:	b480      	push	{r7}
    5bce:	b083      	sub	sp, #12
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5bd6:	bf00      	nop
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	691a      	ldr	r2, [r3, #16]
    5bdc:	683b      	ldr	r3, [r7, #0]
    5bde:	4013      	ands	r3, r2
    5be0:	2b00      	cmp	r3, #0
    5be2:	d1f9      	bne.n	5bd8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5be4:	bf00      	nop
    5be6:	370c      	adds	r7, #12
    5be8:	46bd      	mov	sp, r7
    5bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bee:	4770      	bx	lr

00005bf0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5bf0:	b480      	push	{r7}
    5bf2:	b083      	sub	sp, #12
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bfe:	819a      	strh	r2, [r3, #12]
}
    5c00:	bf00      	nop
    5c02:	370c      	adds	r7, #12
    5c04:	46bd      	mov	sp, r7
    5c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0a:	4770      	bx	lr

00005c0c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5c0c:	b480      	push	{r7}
    5c0e:	b083      	sub	sp, #12
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5c1a:	819a      	strh	r2, [r3, #12]
}
    5c1c:	bf00      	nop
    5c1e:	370c      	adds	r7, #12
    5c20:	46bd      	mov	sp, r7
    5c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c26:	4770      	bx	lr

00005c28 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5c28:	b480      	push	{r7}
    5c2a:	b083      	sub	sp, #12
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	899b      	ldrh	r3, [r3, #12]
    5c34:	b29b      	uxth	r3, r3
}
    5c36:	4618      	mov	r0, r3
    5c38:	370c      	adds	r7, #12
    5c3a:	46bd      	mov	sp, r7
    5c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c40:	4770      	bx	lr

00005c42 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5c42:	b480      	push	{r7}
    5c44:	b083      	sub	sp, #12
    5c46:	af00      	add	r7, sp, #0
    5c48:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	895b      	ldrh	r3, [r3, #10]
    5c4e:	b29b      	uxth	r3, r3
}
    5c50:	4618      	mov	r0, r3
    5c52:	370c      	adds	r7, #12
    5c54:	46bd      	mov	sp, r7
    5c56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c5a:	4770      	bx	lr

00005c5c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b082      	sub	sp, #8
    5c60:	af00      	add	r7, sp, #0
    5c62:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5c64:	687b      	ldr	r3, [r7, #4]
    5c66:	881b      	ldrh	r3, [r3, #0]
    5c68:	b29b      	uxth	r3, r3
    5c6a:	f043 0301 	orr.w	r3, r3, #1
    5c6e:	b29a      	uxth	r2, r3
    5c70:	687b      	ldr	r3, [r7, #4]
    5c72:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5c74:	2101      	movs	r1, #1
    5c76:	6878      	ldr	r0, [r7, #4]
    5c78:	4b02      	ldr	r3, [pc, #8]	; (5c84 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5c7a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c7c:	bf00      	nop
    5c7e:	3708      	adds	r7, #8
    5c80:	46bd      	mov	sp, r7
    5c82:	bd80      	pop	{r7, pc}
    5c84:	00005bcd 	.word	0x00005bcd

00005c88 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b084      	sub	sp, #16
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5c90:	f248 0103 	movw	r1, #32771	; 0x8003
    5c94:	6878      	ldr	r0, [r7, #4]
    5c96:	4b0a      	ldr	r3, [pc, #40]	; (5cc0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5c98:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5c9a:	687b      	ldr	r3, [r7, #4]
    5c9c:	881b      	ldrh	r3, [r3, #0]
    5c9e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5ca0:	89fb      	ldrh	r3, [r7, #14]
    5ca2:	085b      	lsrs	r3, r3, #1
    5ca4:	b29b      	uxth	r3, r3
    5ca6:	f003 0301 	and.w	r3, r3, #1
    5caa:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5cac:	89fb      	ldrh	r3, [r7, #14]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	bf14      	ite	ne
    5cb2:	2301      	movne	r3, #1
    5cb4:	2300      	moveq	r3, #0
    5cb6:	b2db      	uxtb	r3, r3
}
    5cb8:	4618      	mov	r0, r3
    5cba:	3710      	adds	r7, #16
    5cbc:	46bd      	mov	sp, r7
    5cbe:	bd80      	pop	{r7, pc}
    5cc0:	00005bcd 	.word	0x00005bcd

00005cc4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b082      	sub	sp, #8
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	881b      	ldrh	r3, [r3, #0]
    5cd0:	b29b      	uxth	r3, r3
    5cd2:	f023 0302 	bic.w	r3, r3, #2
    5cd6:	b29a      	uxth	r2, r3
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5cdc:	f248 0103 	movw	r1, #32771	; 0x8003
    5ce0:	6878      	ldr	r0, [r7, #4]
    5ce2:	4b03      	ldr	r3, [pc, #12]	; (5cf0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5ce4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ce6:	bf00      	nop
    5ce8:	3708      	adds	r7, #8
    5cea:	46bd      	mov	sp, r7
    5cec:	bd80      	pop	{r7, pc}
    5cee:	bf00      	nop
    5cf0:	00005bcd 	.word	0x00005bcd

00005cf4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b082      	sub	sp, #8
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	460b      	mov	r3, r1
    5cfe:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	887a      	ldrh	r2, [r7, #2]
    5d04:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5d06:	f248 0103 	movw	r1, #32771	; 0x8003
    5d0a:	6878      	ldr	r0, [r7, #4]
    5d0c:	4b02      	ldr	r3, [pc, #8]	; (5d18 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5d0e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d10:	bf00      	nop
    5d12:	3708      	adds	r7, #8
    5d14:	46bd      	mov	sp, r7
    5d16:	bd80      	pop	{r7, pc}
    5d18:	00005bcd 	.word	0x00005bcd

00005d1c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5d1c:	b480      	push	{r7}
    5d1e:	b083      	sub	sp, #12
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
    5d24:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	683a      	ldr	r2, [r7, #0]
    5d2a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d2c:	bf00      	nop
    5d2e:	370c      	adds	r7, #12
    5d30:	46bd      	mov	sp, r7
    5d32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d36:	4770      	bx	lr

00005d38 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5d38:	b580      	push	{r7, lr}
    5d3a:	b082      	sub	sp, #8
    5d3c:	af00      	add	r7, sp, #0
    5d3e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d005      	beq.n	5d52 <_calendar_init+0x1a>
    5d46:	687b      	ldr	r3, [r7, #4]
    5d48:	681b      	ldr	r3, [r3, #0]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d001      	beq.n	5d52 <_calendar_init+0x1a>
    5d4e:	2301      	movs	r3, #1
    5d50:	e000      	b.n	5d54 <_calendar_init+0x1c>
    5d52:	2300      	movs	r3, #0
    5d54:	f003 0301 	and.w	r3, r3, #1
    5d58:	b2db      	uxtb	r3, r3
    5d5a:	222f      	movs	r2, #47	; 0x2f
    5d5c:	491b      	ldr	r1, [pc, #108]	; (5dcc <_calendar_init+0x94>)
    5d5e:	4618      	mov	r0, r3
    5d60:	4b1b      	ldr	r3, [pc, #108]	; (5dd0 <_calendar_init+0x98>)
    5d62:	4798      	blx	r3

	_rtc_dev = dev;
    5d64:	4a1b      	ldr	r2, [pc, #108]	; (5dd4 <_calendar_init+0x9c>)
    5d66:	687b      	ldr	r3, [r7, #4]
    5d68:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	4618      	mov	r0, r3
    5d70:	4b19      	ldr	r3, [pc, #100]	; (5dd8 <_calendar_init+0xa0>)
    5d72:	4798      	blx	r3
    5d74:	4603      	mov	r3, r0
    5d76:	2b00      	cmp	r3, #0
    5d78:	d00a      	beq.n	5d90 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	4618      	mov	r0, r3
    5d80:	4b16      	ldr	r3, [pc, #88]	; (5ddc <_calendar_init+0xa4>)
    5d82:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	681b      	ldr	r3, [r3, #0]
    5d88:	2102      	movs	r1, #2
    5d8a:	4618      	mov	r0, r3
    5d8c:	4b14      	ldr	r3, [pc, #80]	; (5de0 <_calendar_init+0xa8>)
    5d8e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	681b      	ldr	r3, [r3, #0]
    5d94:	4618      	mov	r0, r3
    5d96:	4b13      	ldr	r3, [pc, #76]	; (5de4 <_calendar_init+0xac>)
    5d98:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	2101      	movs	r1, #1
    5da0:	4618      	mov	r0, r3
    5da2:	4b0f      	ldr	r3, [pc, #60]	; (5de0 <_calendar_init+0xa8>)
    5da4:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5dae:	4618      	mov	r0, r3
    5db0:	4b0d      	ldr	r3, [pc, #52]	; (5de8 <_calendar_init+0xb0>)
    5db2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5db4:	687b      	ldr	r3, [r7, #4]
    5db6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5db8:	2100      	movs	r1, #0
    5dba:	4618      	mov	r0, r3
    5dbc:	4b0b      	ldr	r3, [pc, #44]	; (5dec <_calendar_init+0xb4>)
    5dbe:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5dc0:	2300      	movs	r3, #0
}
    5dc2:	4618      	mov	r0, r3
    5dc4:	3708      	adds	r7, #8
    5dc6:	46bd      	mov	sp, r7
    5dc8:	bd80      	pop	{r7, pc}
    5dca:	bf00      	nop
    5dcc:	0000f298 	.word	0x0000f298
    5dd0:	0000397d 	.word	0x0000397d
    5dd4:	2000095c 	.word	0x2000095c
    5dd8:	00005c89 	.word	0x00005c89
    5ddc:	00005cc5 	.word	0x00005cc5
    5de0:	00005bcd 	.word	0x00005bcd
    5de4:	00005c5d 	.word	0x00005c5d
    5de8:	00005cf5 	.word	0x00005cf5
    5dec:	00005d1d 	.word	0x00005d1d

00005df0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b084      	sub	sp, #16
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	4618      	mov	r0, r3
    5dfe:	4b19      	ldr	r3, [pc, #100]	; (5e64 <_rtc_interrupt_handler+0x74>)
    5e00:	4798      	blx	r3
    5e02:	4603      	mov	r3, r0
    5e04:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	681b      	ldr	r3, [r3, #0]
    5e0a:	4618      	mov	r0, r3
    5e0c:	4b16      	ldr	r3, [pc, #88]	; (5e68 <_rtc_interrupt_handler+0x78>)
    5e0e:	4798      	blx	r3
    5e10:	4603      	mov	r3, r0
    5e12:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5e14:	89fa      	ldrh	r2, [r7, #14]
    5e16:	89bb      	ldrh	r3, [r7, #12]
    5e18:	4013      	ands	r3, r2
    5e1a:	b29b      	uxth	r3, r3
    5e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e20:	2b00      	cmp	r3, #0
    5e22:	d009      	beq.n	5e38 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	685b      	ldr	r3, [r3, #4]
    5e28:	6878      	ldr	r0, [r7, #4]
    5e2a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	681b      	ldr	r3, [r3, #0]
    5e30:	4618      	mov	r0, r3
    5e32:	4b0e      	ldr	r3, [pc, #56]	; (5e6c <_rtc_interrupt_handler+0x7c>)
    5e34:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5e36:	e010      	b.n	5e5a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5e38:	89fa      	ldrh	r2, [r7, #14]
    5e3a:	89bb      	ldrh	r3, [r7, #12]
    5e3c:	4013      	ands	r3, r2
    5e3e:	b29b      	uxth	r3, r3
    5e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5e44:	2b00      	cmp	r3, #0
    5e46:	d008      	beq.n	5e5a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	689b      	ldr	r3, [r3, #8]
    5e4c:	6878      	ldr	r0, [r7, #4]
    5e4e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	681b      	ldr	r3, [r3, #0]
    5e54:	4618      	mov	r0, r3
    5e56:	4b06      	ldr	r3, [pc, #24]	; (5e70 <_rtc_interrupt_handler+0x80>)
    5e58:	4798      	blx	r3
}
    5e5a:	bf00      	nop
    5e5c:	3710      	adds	r7, #16
    5e5e:	46bd      	mov	sp, r7
    5e60:	bd80      	pop	{r7, pc}
    5e62:	bf00      	nop
    5e64:	00005c29 	.word	0x00005c29
    5e68:	00005c43 	.word	0x00005c43
    5e6c:	00005bf1 	.word	0x00005bf1
    5e70:	00005c0d 	.word	0x00005c0d

00005e74 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5e78:	4b03      	ldr	r3, [pc, #12]	; (5e88 <RTC_Handler+0x14>)
    5e7a:	681b      	ldr	r3, [r3, #0]
    5e7c:	4618      	mov	r0, r3
    5e7e:	4b03      	ldr	r3, [pc, #12]	; (5e8c <RTC_Handler+0x18>)
    5e80:	4798      	blx	r3
}
    5e82:	bf00      	nop
    5e84:	bd80      	pop	{r7, pc}
    5e86:	bf00      	nop
    5e88:	2000095c 	.word	0x2000095c
    5e8c:	00005df1 	.word	0x00005df1

00005e90 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5e90:	b480      	push	{r7}
    5e92:	b083      	sub	sp, #12
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
    5e98:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5e9a:	bf00      	nop
    5e9c:	687b      	ldr	r3, [r7, #4]
    5e9e:	69da      	ldr	r2, [r3, #28]
    5ea0:	683b      	ldr	r3, [r7, #0]
    5ea2:	4013      	ands	r3, r2
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d1f9      	bne.n	5e9c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5ea8:	bf00      	nop
    5eaa:	370c      	adds	r7, #12
    5eac:	46bd      	mov	sp, r7
    5eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eb2:	4770      	bx	lr

00005eb4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5eb4:	b480      	push	{r7}
    5eb6:	b083      	sub	sp, #12
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6078      	str	r0, [r7, #4]
    5ebc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	69da      	ldr	r2, [r3, #28]
    5ec2:	683b      	ldr	r3, [r7, #0]
    5ec4:	4013      	ands	r3, r2
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	bf14      	ite	ne
    5eca:	2301      	movne	r3, #1
    5ecc:	2300      	moveq	r3, #0
    5ece:	b2db      	uxtb	r3, r3
}
    5ed0:	4618      	mov	r0, r3
    5ed2:	370c      	adds	r7, #12
    5ed4:	46bd      	mov	sp, r7
    5ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eda:	4770      	bx	lr

00005edc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5edc:	b480      	push	{r7}
    5ede:	b083      	sub	sp, #12
    5ee0:	af00      	add	r7, sp, #0
    5ee2:	6078      	str	r0, [r7, #4]
    5ee4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5ee6:	bf00      	nop
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	69da      	ldr	r2, [r3, #28]
    5eec:	683b      	ldr	r3, [r7, #0]
    5eee:	4013      	ands	r3, r2
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d1f9      	bne.n	5ee8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5ef4:	bf00      	nop
    5ef6:	370c      	adds	r7, #12
    5ef8:	46bd      	mov	sp, r7
    5efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efe:	4770      	bx	lr

00005f00 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5f00:	b480      	push	{r7}
    5f02:	b083      	sub	sp, #12
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
    5f08:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	69da      	ldr	r2, [r3, #28]
    5f0e:	683b      	ldr	r3, [r7, #0]
    5f10:	4013      	ands	r3, r2
    5f12:	2b00      	cmp	r3, #0
    5f14:	bf14      	ite	ne
    5f16:	2301      	movne	r3, #1
    5f18:	2300      	moveq	r3, #0
    5f1a:	b2db      	uxtb	r3, r3
}
    5f1c:	4618      	mov	r0, r3
    5f1e:	370c      	adds	r7, #12
    5f20:	46bd      	mov	sp, r7
    5f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f26:	4770      	bx	lr

00005f28 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5f28:	b480      	push	{r7}
    5f2a:	b083      	sub	sp, #12
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	2201      	movs	r2, #1
    5f34:	761a      	strb	r2, [r3, #24]
}
    5f36:	bf00      	nop
    5f38:	370c      	adds	r7, #12
    5f3a:	46bd      	mov	sp, r7
    5f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f40:	4770      	bx	lr

00005f42 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5f42:	b480      	push	{r7}
    5f44:	b083      	sub	sp, #12
    5f46:	af00      	add	r7, sp, #0
    5f48:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5f4a:	687b      	ldr	r3, [r7, #4]
    5f4c:	2202      	movs	r2, #2
    5f4e:	761a      	strb	r2, [r3, #24]
}
    5f50:	bf00      	nop
    5f52:	370c      	adds	r7, #12
    5f54:	46bd      	mov	sp, r7
    5f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f5a:	4770      	bx	lr

00005f5c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5f5c:	b480      	push	{r7}
    5f5e:	b083      	sub	sp, #12
    5f60:	af00      	add	r7, sp, #0
    5f62:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	7e1b      	ldrb	r3, [r3, #24]
    5f68:	b2db      	uxtb	r3, r3
}
    5f6a:	4618      	mov	r0, r3
    5f6c:	370c      	adds	r7, #12
    5f6e:	46bd      	mov	sp, r7
    5f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f74:	4770      	bx	lr

00005f76 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5f76:	b480      	push	{r7}
    5f78:	b085      	sub	sp, #20
    5f7a:	af00      	add	r7, sp, #0
    5f7c:	6078      	str	r0, [r7, #4]
    5f7e:	460b      	mov	r3, r1
    5f80:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5f82:	687b      	ldr	r3, [r7, #4]
    5f84:	7e1b      	ldrb	r3, [r3, #24]
    5f86:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5f88:	7bfa      	ldrb	r2, [r7, #15]
    5f8a:	78fb      	ldrb	r3, [r7, #3]
    5f8c:	4013      	ands	r3, r2
    5f8e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5f90:	7bfb      	ldrb	r3, [r7, #15]
}
    5f92:	4618      	mov	r0, r3
    5f94:	3714      	adds	r7, #20
    5f96:	46bd      	mov	sp, r7
    5f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f9c:	4770      	bx	lr

00005f9e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5f9e:	b480      	push	{r7}
    5fa0:	b083      	sub	sp, #12
    5fa2:	af00      	add	r7, sp, #0
    5fa4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	7e1b      	ldrb	r3, [r3, #24]
    5faa:	b2db      	uxtb	r3, r3
}
    5fac:	4618      	mov	r0, r3
    5fae:	370c      	adds	r7, #12
    5fb0:	46bd      	mov	sp, r7
    5fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fb6:	4770      	bx	lr

00005fb8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5fb8:	b480      	push	{r7}
    5fba:	b083      	sub	sp, #12
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
    5fc0:	460b      	mov	r3, r1
    5fc2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	78fa      	ldrb	r2, [r7, #3]
    5fc8:	761a      	strb	r2, [r3, #24]
}
    5fca:	bf00      	nop
    5fcc:	370c      	adds	r7, #12
    5fce:	46bd      	mov	sp, r7
    5fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fd4:	4770      	bx	lr
	...

00005fd8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
    5fde:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	681b      	ldr	r3, [r3, #0]
    5fe4:	f043 0202 	orr.w	r2, r3, #2
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fec:	2103      	movs	r1, #3
    5fee:	6878      	ldr	r0, [r7, #4]
    5ff0:	4b02      	ldr	r3, [pc, #8]	; (5ffc <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5ff2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ff4:	bf00      	nop
    5ff6:	3708      	adds	r7, #8
    5ff8:	46bd      	mov	sp, r7
    5ffa:	bd80      	pop	{r7, pc}
    5ffc:	00005e91 	.word	0x00005e91

00006000 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6000:	b580      	push	{r7, lr}
    6002:	b082      	sub	sp, #8
    6004:	af00      	add	r7, sp, #0
    6006:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	681b      	ldr	r3, [r3, #0]
    600c:	f023 0202 	bic.w	r2, r3, #2
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6014:	2103      	movs	r1, #3
    6016:	6878      	ldr	r0, [r7, #4]
    6018:	4b02      	ldr	r3, [pc, #8]	; (6024 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    601a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    601c:	bf00      	nop
    601e:	3708      	adds	r7, #8
    6020:	46bd      	mov	sp, r7
    6022:	bd80      	pop	{r7, pc}
    6024:	00005e91 	.word	0x00005e91

00006028 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6028:	b480      	push	{r7}
    602a:	b085      	sub	sp, #20
    602c:	af00      	add	r7, sp, #0
    602e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	681b      	ldr	r3, [r3, #0]
    6034:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6036:	68fb      	ldr	r3, [r7, #12]
    6038:	0edb      	lsrs	r3, r3, #27
    603a:	f003 0301 	and.w	r3, r3, #1
    603e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6040:	68fb      	ldr	r3, [r7, #12]
    6042:	2b00      	cmp	r3, #0
    6044:	bf14      	ite	ne
    6046:	2301      	movne	r3, #1
    6048:	2300      	moveq	r3, #0
    604a:	b2db      	uxtb	r3, r3
}
    604c:	4618      	mov	r0, r3
    604e:	3714      	adds	r7, #20
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6058:	b580      	push	{r7, lr}
    605a:	b084      	sub	sp, #16
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
    6060:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6062:	2103      	movs	r1, #3
    6064:	6878      	ldr	r0, [r7, #4]
    6066:	4b07      	ldr	r3, [pc, #28]	; (6084 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6068:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6070:	68fa      	ldr	r2, [r7, #12]
    6072:	683b      	ldr	r3, [r7, #0]
    6074:	4013      	ands	r3, r2
    6076:	60fb      	str	r3, [r7, #12]
	return tmp;
    6078:	68fb      	ldr	r3, [r7, #12]
}
    607a:	4618      	mov	r0, r3
    607c:	3710      	adds	r7, #16
    607e:	46bd      	mov	sp, r7
    6080:	bd80      	pop	{r7, pc}
    6082:	bf00      	nop
    6084:	00005e91 	.word	0x00005e91

00006088 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6088:	b580      	push	{r7, lr}
    608a:	b082      	sub	sp, #8
    608c:	af00      	add	r7, sp, #0
    608e:	6078      	str	r0, [r7, #4]
    6090:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6092:	687b      	ldr	r3, [r7, #4]
    6094:	683a      	ldr	r2, [r7, #0]
    6096:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6098:	2103      	movs	r1, #3
    609a:	6878      	ldr	r0, [r7, #4]
    609c:	4b02      	ldr	r3, [pc, #8]	; (60a8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    609e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60a0:	bf00      	nop
    60a2:	3708      	adds	r7, #8
    60a4:	46bd      	mov	sp, r7
    60a6:	bd80      	pop	{r7, pc}
    60a8:	00005e91 	.word	0x00005e91

000060ac <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    60ac:	b580      	push	{r7, lr}
    60ae:	b084      	sub	sp, #16
    60b0:	af00      	add	r7, sp, #0
    60b2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60b4:	2103      	movs	r1, #3
    60b6:	6878      	ldr	r0, [r7, #4]
    60b8:	4b09      	ldr	r3, [pc, #36]	; (60e0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    60ba:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    60bc:	687b      	ldr	r3, [r7, #4]
    60be:	681b      	ldr	r3, [r3, #0]
    60c0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    60c2:	68fb      	ldr	r3, [r7, #12]
    60c4:	085b      	lsrs	r3, r3, #1
    60c6:	f003 0301 	and.w	r3, r3, #1
    60ca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    60cc:	68fb      	ldr	r3, [r7, #12]
    60ce:	2b00      	cmp	r3, #0
    60d0:	bf14      	ite	ne
    60d2:	2301      	movne	r3, #1
    60d4:	2300      	moveq	r3, #0
    60d6:	b2db      	uxtb	r3, r3
}
    60d8:	4618      	mov	r0, r3
    60da:	3710      	adds	r7, #16
    60dc:	46bd      	mov	sp, r7
    60de:	bd80      	pop	{r7, pc}
    60e0:	00005edd 	.word	0x00005edd

000060e4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    60e4:	b580      	push	{r7, lr}
    60e6:	b082      	sub	sp, #8
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    60ec:	687b      	ldr	r3, [r7, #4]
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	f023 0202 	bic.w	r2, r3, #2
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60f8:	2103      	movs	r1, #3
    60fa:	6878      	ldr	r0, [r7, #4]
    60fc:	4b02      	ldr	r3, [pc, #8]	; (6108 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    60fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6100:	bf00      	nop
    6102:	3708      	adds	r7, #8
    6104:	46bd      	mov	sp, r7
    6106:	bd80      	pop	{r7, pc}
    6108:	00005edd 	.word	0x00005edd

0000610c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    610c:	b580      	push	{r7, lr}
    610e:	b084      	sub	sp, #16
    6110:	af00      	add	r7, sp, #0
    6112:	6078      	str	r0, [r7, #4]
    6114:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6116:	2103      	movs	r1, #3
    6118:	6878      	ldr	r0, [r7, #4]
    611a:	4b07      	ldr	r3, [pc, #28]	; (6138 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    611c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6124:	68fa      	ldr	r2, [r7, #12]
    6126:	683b      	ldr	r3, [r7, #0]
    6128:	4013      	ands	r3, r2
    612a:	60fb      	str	r3, [r7, #12]
	return tmp;
    612c:	68fb      	ldr	r3, [r7, #12]
}
    612e:	4618      	mov	r0, r3
    6130:	3710      	adds	r7, #16
    6132:	46bd      	mov	sp, r7
    6134:	bd80      	pop	{r7, pc}
    6136:	bf00      	nop
    6138:	00005edd 	.word	0x00005edd

0000613c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	683a      	ldr	r2, [r7, #0]
    614a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    614c:	2103      	movs	r1, #3
    614e:	6878      	ldr	r0, [r7, #4]
    6150:	4b02      	ldr	r3, [pc, #8]	; (615c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6152:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6154:	bf00      	nop
    6156:	3708      	adds	r7, #8
    6158:	46bd      	mov	sp, r7
    615a:	bd80      	pop	{r7, pc}
    615c:	00005edd 	.word	0x00005edd

00006160 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6160:	b580      	push	{r7, lr}
    6162:	b082      	sub	sp, #8
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	685b      	ldr	r3, [r3, #4]
    616c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6174:	2104      	movs	r1, #4
    6176:	6878      	ldr	r0, [r7, #4]
    6178:	4b02      	ldr	r3, [pc, #8]	; (6184 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    617a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    617c:	bf00      	nop
    617e:	3708      	adds	r7, #8
    6180:	46bd      	mov	sp, r7
    6182:	bd80      	pop	{r7, pc}
    6184:	00005e91 	.word	0x00005e91

00006188 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6188:	b580      	push	{r7, lr}
    618a:	b082      	sub	sp, #8
    618c:	af00      	add	r7, sp, #0
    618e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	685b      	ldr	r3, [r3, #4]
    6194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6198:	687b      	ldr	r3, [r7, #4]
    619a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    619c:	2104      	movs	r1, #4
    619e:	6878      	ldr	r0, [r7, #4]
    61a0:	4b02      	ldr	r3, [pc, #8]	; (61ac <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    61a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61a4:	bf00      	nop
    61a6:	3708      	adds	r7, #8
    61a8:	46bd      	mov	sp, r7
    61aa:	bd80      	pop	{r7, pc}
    61ac:	00005e91 	.word	0x00005e91

000061b0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b082      	sub	sp, #8
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	685b      	ldr	r3, [r3, #4]
    61bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61c4:	2104      	movs	r1, #4
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	4b02      	ldr	r3, [pc, #8]	; (61d4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    61ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61cc:	bf00      	nop
    61ce:	3708      	adds	r7, #8
    61d0:	46bd      	mov	sp, r7
    61d2:	bd80      	pop	{r7, pc}
    61d4:	00005e91 	.word	0x00005e91

000061d8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	685b      	ldr	r3, [r3, #4]
    61e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61ec:	2104      	movs	r1, #4
    61ee:	6878      	ldr	r0, [r7, #4]
    61f0:	4b02      	ldr	r3, [pc, #8]	; (61fc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    61f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61f4:	bf00      	nop
    61f6:	3708      	adds	r7, #8
    61f8:	46bd      	mov	sp, r7
    61fa:	bd80      	pop	{r7, pc}
    61fc:	00005e91 	.word	0x00005e91

00006200 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6200:	b580      	push	{r7, lr}
    6202:	b082      	sub	sp, #8
    6204:	af00      	add	r7, sp, #0
    6206:	6078      	str	r0, [r7, #4]
    6208:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	685a      	ldr	r2, [r3, #4]
    620e:	683b      	ldr	r3, [r7, #0]
    6210:	041b      	lsls	r3, r3, #16
    6212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6216:	431a      	orrs	r2, r3
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    621c:	2104      	movs	r1, #4
    621e:	6878      	ldr	r0, [r7, #4]
    6220:	4b02      	ldr	r3, [pc, #8]	; (622c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6222:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6224:	bf00      	nop
    6226:	3708      	adds	r7, #8
    6228:	46bd      	mov	sp, r7
    622a:	bd80      	pop	{r7, pc}
    622c:	00005e91 	.word	0x00005e91

00006230 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6230:	b580      	push	{r7, lr}
    6232:	b082      	sub	sp, #8
    6234:	af00      	add	r7, sp, #0
    6236:	6078      	str	r0, [r7, #4]
    6238:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    623a:	687b      	ldr	r3, [r7, #4]
    623c:	683a      	ldr	r2, [r7, #0]
    623e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6240:	2104      	movs	r1, #4
    6242:	6878      	ldr	r0, [r7, #4]
    6244:	4b02      	ldr	r3, [pc, #8]	; (6250 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6246:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6248:	bf00      	nop
    624a:	3708      	adds	r7, #8
    624c:	46bd      	mov	sp, r7
    624e:	bd80      	pop	{r7, pc}
    6250:	00005e91 	.word	0x00005e91

00006254 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6254:	b580      	push	{r7, lr}
    6256:	b082      	sub	sp, #8
    6258:	af00      	add	r7, sp, #0
    625a:	6078      	str	r0, [r7, #4]
    625c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	683a      	ldr	r2, [r7, #0]
    6262:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6264:	2117      	movs	r1, #23
    6266:	6878      	ldr	r0, [r7, #4]
    6268:	4b02      	ldr	r3, [pc, #8]	; (6274 <hri_sercomspi_write_CTRLB_reg+0x20>)
    626a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    626c:	bf00      	nop
    626e:	3708      	adds	r7, #8
    6270:	46bd      	mov	sp, r7
    6272:	bd80      	pop	{r7, pc}
    6274:	00005edd 	.word	0x00005edd

00006278 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6278:	b480      	push	{r7}
    627a:	b083      	sub	sp, #12
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
    6280:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	683a      	ldr	r2, [r7, #0]
    6286:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6288:	bf00      	nop
    628a:	370c      	adds	r7, #12
    628c:	46bd      	mov	sp, r7
    628e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6292:	4770      	bx	lr

00006294 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6294:	b480      	push	{r7}
    6296:	b083      	sub	sp, #12
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	460b      	mov	r3, r1
    629e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	78fa      	ldrb	r2, [r7, #3]
    62a4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62a6:	bf00      	nop
    62a8:	370c      	adds	r7, #12
    62aa:	46bd      	mov	sp, r7
    62ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    62b0:	4770      	bx	lr
	...

000062b4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b084      	sub	sp, #16
    62b8:	af00      	add	r7, sp, #0
    62ba:	6078      	str	r0, [r7, #4]
    62bc:	460b      	mov	r3, r1
    62be:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    62c4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    62c6:	68fb      	ldr	r3, [r7, #12]
    62c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    62cc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    62ce:	78fb      	ldrb	r3, [r7, #3]
    62d0:	039b      	lsls	r3, r3, #14
    62d2:	461a      	mov	r2, r3
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	4313      	orrs	r3, r2
    62d8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	68fa      	ldr	r2, [r7, #12]
    62de:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62e0:	2104      	movs	r1, #4
    62e2:	6878      	ldr	r0, [r7, #4]
    62e4:	4b02      	ldr	r3, [pc, #8]	; (62f0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    62e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62e8:	bf00      	nop
    62ea:	3710      	adds	r7, #16
    62ec:	46bd      	mov	sp, r7
    62ee:	bd80      	pop	{r7, pc}
    62f0:	00005e91 	.word	0x00005e91

000062f4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b082      	sub	sp, #8
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
    62fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	683a      	ldr	r2, [r7, #0]
    6302:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6304:	2104      	movs	r1, #4
    6306:	6878      	ldr	r0, [r7, #4]
    6308:	4b02      	ldr	r3, [pc, #8]	; (6314 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    630a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    630c:	bf00      	nop
    630e:	3708      	adds	r7, #8
    6310:	46bd      	mov	sp, r7
    6312:	bd80      	pop	{r7, pc}
    6314:	00005e91 	.word	0x00005e91

00006318 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6318:	b580      	push	{r7, lr}
    631a:	b082      	sub	sp, #8
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6320:	2104      	movs	r1, #4
    6322:	6878      	ldr	r0, [r7, #4]
    6324:	4b03      	ldr	r3, [pc, #12]	; (6334 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6326:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    632c:	4618      	mov	r0, r3
    632e:	3708      	adds	r7, #8
    6330:	46bd      	mov	sp, r7
    6332:	bd80      	pop	{r7, pc}
    6334:	00005e91 	.word	0x00005e91

00006338 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6338:	b480      	push	{r7}
    633a:	b083      	sub	sp, #12
    633c:	af00      	add	r7, sp, #0
    633e:	6078      	str	r0, [r7, #4]
    6340:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	683a      	ldr	r2, [r7, #0]
    6346:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6348:	bf00      	nop
    634a:	370c      	adds	r7, #12
    634c:	46bd      	mov	sp, r7
    634e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6352:	4770      	bx	lr

00006354 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6354:	b580      	push	{r7, lr}
    6356:	b082      	sub	sp, #8
    6358:	af00      	add	r7, sp, #0
    635a:	6078      	str	r0, [r7, #4]
    635c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    635e:	687b      	ldr	r3, [r7, #4]
    6360:	683a      	ldr	r2, [r7, #0]
    6362:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6364:	2104      	movs	r1, #4
    6366:	6878      	ldr	r0, [r7, #4]
    6368:	4b02      	ldr	r3, [pc, #8]	; (6374 <hri_sercomi2cm_write_DATA_reg+0x20>)
    636a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    636c:	bf00      	nop
    636e:	3708      	adds	r7, #8
    6370:	46bd      	mov	sp, r7
    6372:	bd80      	pop	{r7, pc}
    6374:	00005e91 	.word	0x00005e91

00006378 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6378:	b580      	push	{r7, lr}
    637a:	b082      	sub	sp, #8
    637c:	af00      	add	r7, sp, #0
    637e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6380:	2104      	movs	r1, #4
    6382:	6878      	ldr	r0, [r7, #4]
    6384:	4b03      	ldr	r3, [pc, #12]	; (6394 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6386:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    638c:	4618      	mov	r0, r3
    638e:	3708      	adds	r7, #8
    6390:	46bd      	mov	sp, r7
    6392:	bd80      	pop	{r7, pc}
    6394:	00005e91 	.word	0x00005e91

00006398 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6398:	b480      	push	{r7}
    639a:	b083      	sub	sp, #12
    639c:	af00      	add	r7, sp, #0
    639e:	6078      	str	r0, [r7, #4]
    63a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	683a      	ldr	r2, [r7, #0]
    63a6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63a8:	bf00      	nop
    63aa:	370c      	adds	r7, #12
    63ac:	46bd      	mov	sp, r7
    63ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b2:	4770      	bx	lr

000063b4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    63b4:	b480      	push	{r7}
    63b6:	b083      	sub	sp, #12
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    63c0:	4618      	mov	r0, r3
    63c2:	370c      	adds	r7, #12
    63c4:	46bd      	mov	sp, r7
    63c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ca:	4770      	bx	lr

000063cc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    63cc:	b480      	push	{r7}
    63ce:	b083      	sub	sp, #12
    63d0:	af00      	add	r7, sp, #0
    63d2:	6078      	str	r0, [r7, #4]
    63d4:	460b      	mov	r3, r1
    63d6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    63d8:	687b      	ldr	r3, [r7, #4]
    63da:	78fa      	ldrb	r2, [r7, #3]
    63dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63e0:	bf00      	nop
    63e2:	370c      	adds	r7, #12
    63e4:	46bd      	mov	sp, r7
    63e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ea:	4770      	bx	lr

000063ec <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    63ec:	b480      	push	{r7}
    63ee:	b083      	sub	sp, #12
    63f0:	af00      	add	r7, sp, #0
    63f2:	6078      	str	r0, [r7, #4]
    63f4:	460b      	mov	r3, r1
    63f6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	887a      	ldrh	r2, [r7, #2]
    63fc:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63fe:	bf00      	nop
    6400:	370c      	adds	r7, #12
    6402:	46bd      	mov	sp, r7
    6404:	f85d 7b04 	ldr.w	r7, [sp], #4
    6408:	4770      	bx	lr
	...

0000640c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    640c:	b580      	push	{r7, lr}
    640e:	b082      	sub	sp, #8
    6410:	af00      	add	r7, sp, #0
    6412:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6414:	2104      	movs	r1, #4
    6416:	6878      	ldr	r0, [r7, #4]
    6418:	4b06      	ldr	r3, [pc, #24]	; (6434 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    641a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	8b5b      	ldrh	r3, [r3, #26]
    6420:	b29b      	uxth	r3, r3
    6422:	091b      	lsrs	r3, r3, #4
    6424:	b29b      	uxth	r3, r3
    6426:	f003 0303 	and.w	r3, r3, #3
    642a:	b29b      	uxth	r3, r3
}
    642c:	4618      	mov	r0, r3
    642e:	3708      	adds	r7, #8
    6430:	46bd      	mov	sp, r7
    6432:	bd80      	pop	{r7, pc}
    6434:	00005e91 	.word	0x00005e91

00006438 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6438:	b580      	push	{r7, lr}
    643a:	b082      	sub	sp, #8
    643c:	af00      	add	r7, sp, #0
    643e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6440:	2104      	movs	r1, #4
    6442:	6878      	ldr	r0, [r7, #4]
    6444:	4b04      	ldr	r3, [pc, #16]	; (6458 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6446:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	8b5b      	ldrh	r3, [r3, #26]
    644c:	b29b      	uxth	r3, r3
}
    644e:	4618      	mov	r0, r3
    6450:	3708      	adds	r7, #8
    6452:	46bd      	mov	sp, r7
    6454:	bd80      	pop	{r7, pc}
    6456:	bf00      	nop
    6458:	00005e91 	.word	0x00005e91

0000645c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    645c:	b580      	push	{r7, lr}
    645e:	b082      	sub	sp, #8
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
    6464:	460b      	mov	r3, r1
    6466:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	887a      	ldrh	r2, [r7, #2]
    646c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    646e:	2104      	movs	r1, #4
    6470:	6878      	ldr	r0, [r7, #4]
    6472:	4b03      	ldr	r3, [pc, #12]	; (6480 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6474:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6476:	bf00      	nop
    6478:	3708      	adds	r7, #8
    647a:	46bd      	mov	sp, r7
    647c:	bd80      	pop	{r7, pc}
    647e:	bf00      	nop
    6480:	00005e91 	.word	0x00005e91

00006484 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6484:	b4b0      	push	{r4, r5, r7}
    6486:	b08d      	sub	sp, #52	; 0x34
    6488:	af00      	add	r7, sp, #0
    648a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    648c:	4b13      	ldr	r3, [pc, #76]	; (64dc <_sercom_get_hardware_index+0x58>)
    648e:	f107 040c 	add.w	r4, r7, #12
    6492:	461d      	mov	r5, r3
    6494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6498:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    649c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    64a4:	e010      	b.n	64c8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    64a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64a8:	009b      	lsls	r3, r3, #2
    64aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    64ae:	4413      	add	r3, r2
    64b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    64b4:	461a      	mov	r2, r3
    64b6:	687b      	ldr	r3, [r7, #4]
    64b8:	429a      	cmp	r2, r3
    64ba:	d102      	bne.n	64c2 <_sercom_get_hardware_index+0x3e>
			return i;
    64bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64be:	b2db      	uxtb	r3, r3
    64c0:	e006      	b.n	64d0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    64c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64c4:	3301      	adds	r3, #1
    64c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    64c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64ca:	2b07      	cmp	r3, #7
    64cc:	d9eb      	bls.n	64a6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    64ce:	2300      	movs	r3, #0
}
    64d0:	4618      	mov	r0, r3
    64d2:	3734      	adds	r7, #52	; 0x34
    64d4:	46bd      	mov	sp, r7
    64d6:	bcb0      	pop	{r4, r5, r7}
    64d8:	4770      	bx	lr
    64da:	bf00      	nop
    64dc:	0000f2cc 	.word	0x0000f2cc

000064e0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    64e0:	b580      	push	{r7, lr}
    64e2:	b084      	sub	sp, #16
    64e4:	af00      	add	r7, sp, #0
    64e6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    64e8:	6878      	ldr	r0, [r7, #4]
    64ea:	4b13      	ldr	r3, [pc, #76]	; (6538 <_get_i2cm_index+0x58>)
    64ec:	4798      	blx	r3
    64ee:	4603      	mov	r3, r0
    64f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    64f2:	2300      	movs	r3, #0
    64f4:	73fb      	strb	r3, [r7, #15]
    64f6:	e010      	b.n	651a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    64f8:	7bfa      	ldrb	r2, [r7, #15]
    64fa:	4910      	ldr	r1, [pc, #64]	; (653c <_get_i2cm_index+0x5c>)
    64fc:	4613      	mov	r3, r2
    64fe:	005b      	lsls	r3, r3, #1
    6500:	4413      	add	r3, r2
    6502:	00db      	lsls	r3, r3, #3
    6504:	440b      	add	r3, r1
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	7bba      	ldrb	r2, [r7, #14]
    650a:	429a      	cmp	r2, r3
    650c:	d102      	bne.n	6514 <_get_i2cm_index+0x34>
			return i;
    650e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6512:	e00d      	b.n	6530 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6514:	7bfb      	ldrb	r3, [r7, #15]
    6516:	3301      	adds	r3, #1
    6518:	73fb      	strb	r3, [r7, #15]
    651a:	7bfb      	ldrb	r3, [r7, #15]
    651c:	2b02      	cmp	r3, #2
    651e:	d9eb      	bls.n	64f8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6520:	f240 32a6 	movw	r2, #934	; 0x3a6
    6524:	4906      	ldr	r1, [pc, #24]	; (6540 <_get_i2cm_index+0x60>)
    6526:	2000      	movs	r0, #0
    6528:	4b06      	ldr	r3, [pc, #24]	; (6544 <_get_i2cm_index+0x64>)
    652a:	4798      	blx	r3
	return -1;
    652c:	f04f 33ff 	mov.w	r3, #4294967295
}
    6530:	4618      	mov	r0, r3
    6532:	3710      	adds	r7, #16
    6534:	46bd      	mov	sp, r7
    6536:	bd80      	pop	{r7, pc}
    6538:	00006485 	.word	0x00006485
    653c:	20000018 	.word	0x20000018
    6540:	0000f2b0 	.word	0x0000f2b0
    6544:	0000397d 	.word	0x0000397d

00006548 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6548:	b580      	push	{r7, lr}
    654a:	b082      	sub	sp, #8
    654c:	af00      	add	r7, sp, #0
    654e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6550:	2103      	movs	r1, #3
    6552:	6878      	ldr	r0, [r7, #4]
    6554:	4b02      	ldr	r3, [pc, #8]	; (6560 <_sercom_i2c_send_stop+0x18>)
    6556:	4798      	blx	r3
}
    6558:	bf00      	nop
    655a:	3708      	adds	r7, #8
    655c:	46bd      	mov	sp, r7
    655e:	bd80      	pop	{r7, pc}
    6560:	00006201 	.word	0x00006201

00006564 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6564:	b590      	push	{r4, r7, lr}
    6566:	b087      	sub	sp, #28
    6568:	af00      	add	r7, sp, #0
    656a:	60f8      	str	r0, [r7, #12]
    656c:	60b9      	str	r1, [r7, #8]
    656e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6570:	68f8      	ldr	r0, [r7, #12]
    6572:	4b7d      	ldr	r3, [pc, #500]	; (6768 <_sercom_i2c_sync_analyse_flags+0x204>)
    6574:	4798      	blx	r3
    6576:	4603      	mov	r3, r0
    6578:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    657a:	68f8      	ldr	r0, [r7, #12]
    657c:	4b7b      	ldr	r3, [pc, #492]	; (676c <_sercom_i2c_sync_analyse_flags+0x208>)
    657e:	4798      	blx	r3
    6580:	4603      	mov	r3, r0
    6582:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6584:	68bb      	ldr	r3, [r7, #8]
    6586:	f003 0301 	and.w	r3, r3, #1
    658a:	2b00      	cmp	r3, #0
    658c:	f000 8095 	beq.w	66ba <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6590:	8a7b      	ldrh	r3, [r7, #18]
    6592:	f003 0302 	and.w	r3, r3, #2
    6596:	2b00      	cmp	r3, #0
    6598:	d01d      	beq.n	65d6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    659a:	68f8      	ldr	r0, [r7, #12]
    659c:	4b74      	ldr	r3, [pc, #464]	; (6770 <_sercom_i2c_sync_analyse_flags+0x20c>)
    659e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	885b      	ldrh	r3, [r3, #2]
    65a4:	b29b      	uxth	r3, r3
    65a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65aa:	b29a      	uxth	r2, r3
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	885b      	ldrh	r3, [r3, #2]
    65b4:	b29b      	uxth	r3, r3
    65b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65ba:	b29a      	uxth	r2, r3
    65bc:	687b      	ldr	r3, [r7, #4]
    65be:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    65c0:	8a7b      	ldrh	r3, [r7, #18]
    65c2:	f003 0301 	and.w	r3, r3, #1
    65c6:	2b00      	cmp	r3, #0
    65c8:	d002      	beq.n	65d0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    65ca:	f06f 0304 	mvn.w	r3, #4
    65ce:	e0c6      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    65d0:	f06f 0303 	mvn.w	r3, #3
    65d4:	e0c3      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    65d6:	8a7b      	ldrh	r3, [r7, #18]
    65d8:	f003 0304 	and.w	r3, r3, #4
    65dc:	2b00      	cmp	r3, #0
    65de:	d01f      	beq.n	6620 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	685b      	ldr	r3, [r3, #4]
    65e4:	2b00      	cmp	r3, #0
    65e6:	dd07      	ble.n	65f8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	885b      	ldrh	r3, [r3, #2]
    65ec:	b29b      	uxth	r3, r3
    65ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65f2:	b29a      	uxth	r2, r3
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	885b      	ldrh	r3, [r3, #2]
    65fc:	b29b      	uxth	r3, r3
    65fe:	b21b      	sxth	r3, r3
    6600:	2b00      	cmp	r3, #0
    6602:	da02      	bge.n	660a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6604:	68f8      	ldr	r0, [r7, #12]
    6606:	4b5b      	ldr	r3, [pc, #364]	; (6774 <_sercom_i2c_sync_analyse_flags+0x210>)
    6608:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	885b      	ldrh	r3, [r3, #2]
    660e:	b29b      	uxth	r3, r3
    6610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6614:	b29a      	uxth	r2, r3
    6616:	687b      	ldr	r3, [r7, #4]
    6618:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    661a:	f06f 0301 	mvn.w	r3, #1
    661e:	e09e      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	885b      	ldrh	r3, [r3, #2]
    6624:	b29b      	uxth	r3, r3
    6626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    662a:	2b00      	cmp	r3, #0
    662c:	d01c      	beq.n	6668 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	881b      	ldrh	r3, [r3, #0]
    6632:	121b      	asrs	r3, r3, #8
    6634:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6636:	f003 0406 	and.w	r4, r3, #6
    663a:	68f8      	ldr	r0, [r7, #12]
    663c:	4b4e      	ldr	r3, [pc, #312]	; (6778 <_sercom_i2c_sync_analyse_flags+0x214>)
    663e:	4798      	blx	r3
    6640:	4603      	mov	r3, r0
    6642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6646:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6648:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    664c:	4619      	mov	r1, r3
    664e:	68f8      	ldr	r0, [r7, #12]
    6650:	4b4a      	ldr	r3, [pc, #296]	; (677c <_sercom_i2c_sync_analyse_flags+0x218>)
    6652:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6654:	687b      	ldr	r3, [r7, #4]
    6656:	885b      	ldrh	r3, [r3, #2]
    6658:	b29b      	uxth	r3, r3
    665a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    665e:	b29a      	uxth	r2, r3
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6664:	2300      	movs	r3, #0
    6666:	e07a      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	685b      	ldr	r3, [r3, #4]
    666c:	2b00      	cmp	r3, #0
    666e:	d111      	bne.n	6694 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	885b      	ldrh	r3, [r3, #2]
    6674:	b29b      	uxth	r3, r3
    6676:	b21b      	sxth	r3, r3
    6678:	2b00      	cmp	r3, #0
    667a:	da02      	bge.n	6682 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    667c:	68f8      	ldr	r0, [r7, #12]
    667e:	4b3d      	ldr	r3, [pc, #244]	; (6774 <_sercom_i2c_sync_analyse_flags+0x210>)
    6680:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6682:	687b      	ldr	r3, [r7, #4]
    6684:	885b      	ldrh	r3, [r3, #2]
    6686:	b29b      	uxth	r3, r3
    6688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    668c:	b29a      	uxth	r2, r3
    668e:	687b      	ldr	r3, [r7, #4]
    6690:	805a      	strh	r2, [r3, #2]
    6692:	e010      	b.n	66b6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6694:	687b      	ldr	r3, [r7, #4]
    6696:	689b      	ldr	r3, [r3, #8]
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	4619      	mov	r1, r3
    669c:	68f8      	ldr	r0, [r7, #12]
    669e:	4b38      	ldr	r3, [pc, #224]	; (6780 <_sercom_i2c_sync_analyse_flags+0x21c>)
    66a0:	4798      	blx	r3
				msg->buffer++;
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	689b      	ldr	r3, [r3, #8]
    66a6:	1c5a      	adds	r2, r3, #1
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	609a      	str	r2, [r3, #8]
				msg->len--;
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	685b      	ldr	r3, [r3, #4]
    66b0:	1e5a      	subs	r2, r3, #1
    66b2:	687b      	ldr	r3, [r7, #4]
    66b4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    66b6:	2300      	movs	r3, #0
    66b8:	e051      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    66ba:	68bb      	ldr	r3, [r7, #8]
    66bc:	f003 0302 	and.w	r3, r3, #2
    66c0:	2b00      	cmp	r3, #0
    66c2:	d04b      	beq.n	675c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	685b      	ldr	r3, [r3, #4]
    66c8:	2b00      	cmp	r3, #0
    66ca:	d041      	beq.n	6750 <_sercom_i2c_sync_analyse_flags+0x1ec>
    66cc:	8a7b      	ldrh	r3, [r7, #18]
    66ce:	f003 0304 	and.w	r3, r3, #4
    66d2:	2b00      	cmp	r3, #0
    66d4:	d13c      	bne.n	6750 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	685b      	ldr	r3, [r3, #4]
    66da:	1e5a      	subs	r2, r3, #1
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	685b      	ldr	r3, [r3, #4]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d102      	bne.n	66ee <_sercom_i2c_sync_analyse_flags+0x18a>
    66e8:	697b      	ldr	r3, [r7, #20]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d006      	beq.n	66fc <_sercom_i2c_sync_analyse_flags+0x198>
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	685b      	ldr	r3, [r3, #4]
    66f2:	2b01      	cmp	r3, #1
    66f4:	d105      	bne.n	6702 <_sercom_i2c_sync_analyse_flags+0x19e>
    66f6:	697b      	ldr	r3, [r7, #20]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d002      	beq.n	6702 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    66fc:	68f8      	ldr	r0, [r7, #12]
    66fe:	4b21      	ldr	r3, [pc, #132]	; (6784 <_sercom_i2c_sync_analyse_flags+0x220>)
    6700:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	685b      	ldr	r3, [r3, #4]
    6706:	2b00      	cmp	r3, #0
    6708:	d113      	bne.n	6732 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	885b      	ldrh	r3, [r3, #2]
    670e:	b29b      	uxth	r3, r3
    6710:	b21b      	sxth	r3, r3
    6712:	2b00      	cmp	r3, #0
    6714:	da05      	bge.n	6722 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6716:	68f8      	ldr	r0, [r7, #12]
    6718:	4b1b      	ldr	r3, [pc, #108]	; (6788 <_sercom_i2c_sync_analyse_flags+0x224>)
    671a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    671c:	68f8      	ldr	r0, [r7, #12]
    671e:	4b15      	ldr	r3, [pc, #84]	; (6774 <_sercom_i2c_sync_analyse_flags+0x210>)
    6720:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	885b      	ldrh	r3, [r3, #2]
    6726:	b29b      	uxth	r3, r3
    6728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    672c:	b29a      	uxth	r2, r3
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	689c      	ldr	r4, [r3, #8]
    6736:	1c62      	adds	r2, r4, #1
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	609a      	str	r2, [r3, #8]
    673c:	68f8      	ldr	r0, [r7, #12]
    673e:	4b13      	ldr	r3, [pc, #76]	; (678c <_sercom_i2c_sync_analyse_flags+0x228>)
    6740:	4798      	blx	r3
    6742:	4603      	mov	r3, r0
    6744:	b2db      	uxtb	r3, r3
    6746:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6748:	68f8      	ldr	r0, [r7, #12]
    674a:	4b11      	ldr	r3, [pc, #68]	; (6790 <_sercom_i2c_sync_analyse_flags+0x22c>)
    674c:	4798      	blx	r3
    674e:	e005      	b.n	675c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6750:	68f8      	ldr	r0, [r7, #12]
    6752:	4b0f      	ldr	r3, [pc, #60]	; (6790 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6754:	4798      	blx	r3
			return I2C_NACK;
    6756:	f06f 0301 	mvn.w	r3, #1
    675a:	e000      	b.n	675e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    675c:	2300      	movs	r3, #0
}
    675e:	4618      	mov	r0, r3
    6760:	371c      	adds	r7, #28
    6762:	46bd      	mov	sp, r7
    6764:	bd90      	pop	{r4, r7, pc}
    6766:	bf00      	nop
    6768:	00006029 	.word	0x00006029
    676c:	00006439 	.word	0x00006439
    6770:	00005f29 	.word	0x00005f29
    6774:	00006549 	.word	0x00006549
    6778:	00006319 	.word	0x00006319
    677c:	000062f5 	.word	0x000062f5
    6780:	00006355 	.word	0x00006355
    6784:	000061b1 	.word	0x000061b1
    6788:	00006189 	.word	0x00006189
    678c:	00006379 	.word	0x00006379
    6790:	00005f43 	.word	0x00005f43

00006794 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6794:	b580      	push	{r7, lr}
    6796:	b082      	sub	sp, #8
    6798:	af00      	add	r7, sp, #0
    679a:	6078      	str	r0, [r7, #4]
    679c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	2b00      	cmp	r3, #0
    67a2:	bf14      	ite	ne
    67a4:	2301      	movne	r3, #1
    67a6:	2300      	moveq	r3, #0
    67a8:	b2db      	uxtb	r3, r3
    67aa:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    67ae:	4908      	ldr	r1, [pc, #32]	; (67d0 <_i2c_m_sync_init+0x3c>)
    67b0:	4618      	mov	r0, r3
    67b2:	4b08      	ldr	r3, [pc, #32]	; (67d4 <_i2c_m_sync_init+0x40>)
    67b4:	4798      	blx	r3

	i2c_dev->hw = hw;
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	683a      	ldr	r2, [r7, #0]
    67ba:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    67bc:	687b      	ldr	r3, [r7, #4]
    67be:	6839      	ldr	r1, [r7, #0]
    67c0:	4618      	mov	r0, r3
    67c2:	4b05      	ldr	r3, [pc, #20]	; (67d8 <_i2c_m_sync_init+0x44>)
    67c4:	4798      	blx	r3
    67c6:	4603      	mov	r3, r0
}
    67c8:	4618      	mov	r0, r3
    67ca:	3708      	adds	r7, #8
    67cc:	46bd      	mov	sp, r7
    67ce:	bd80      	pop	{r7, pc}
    67d0:	0000f2b0 	.word	0x0000f2b0
    67d4:	0000397d 	.word	0x0000397d
    67d8:	00006bad 	.word	0x00006bad

000067dc <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	2b00      	cmp	r3, #0
    67e8:	bf14      	ite	ne
    67ea:	2301      	movne	r3, #1
    67ec:	2300      	moveq	r3, #0
    67ee:	b2db      	uxtb	r3, r3
    67f0:	f240 5235 	movw	r2, #1333	; 0x535
    67f4:	4906      	ldr	r1, [pc, #24]	; (6810 <_i2c_m_sync_enable+0x34>)
    67f6:	4618      	mov	r0, r3
    67f8:	4b06      	ldr	r3, [pc, #24]	; (6814 <_i2c_m_sync_enable+0x38>)
    67fa:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	691b      	ldr	r3, [r3, #16]
    6800:	4618      	mov	r0, r3
    6802:	4b05      	ldr	r3, [pc, #20]	; (6818 <_i2c_m_sync_enable+0x3c>)
    6804:	4798      	blx	r3
    6806:	4603      	mov	r3, r0
}
    6808:	4618      	mov	r0, r3
    680a:	3708      	adds	r7, #8
    680c:	46bd      	mov	sp, r7
    680e:	bd80      	pop	{r7, pc}
    6810:	0000f2b0 	.word	0x0000f2b0
    6814:	0000397d 	.word	0x0000397d
    6818:	00006b21 	.word	0x00006b21

0000681c <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    681c:	b580      	push	{r7, lr}
    681e:	b084      	sub	sp, #16
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	691b      	ldr	r3, [r3, #16]
    6828:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	2b00      	cmp	r3, #0
    682e:	bf14      	ite	ne
    6830:	2301      	movne	r3, #1
    6832:	2300      	moveq	r3, #0
    6834:	b2db      	uxtb	r3, r3
    6836:	f240 5243 	movw	r2, #1347	; 0x543
    683a:	490c      	ldr	r1, [pc, #48]	; (686c <_i2c_m_sync_disable+0x50>)
    683c:	4618      	mov	r0, r3
    683e:	4b0c      	ldr	r3, [pc, #48]	; (6870 <_i2c_m_sync_disable+0x54>)
    6840:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6842:	687b      	ldr	r3, [r7, #4]
    6844:	691b      	ldr	r3, [r3, #16]
    6846:	2b00      	cmp	r3, #0
    6848:	bf14      	ite	ne
    684a:	2301      	movne	r3, #1
    684c:	2300      	moveq	r3, #0
    684e:	b2db      	uxtb	r3, r3
    6850:	f240 5244 	movw	r2, #1348	; 0x544
    6854:	4905      	ldr	r1, [pc, #20]	; (686c <_i2c_m_sync_disable+0x50>)
    6856:	4618      	mov	r0, r3
    6858:	4b05      	ldr	r3, [pc, #20]	; (6870 <_i2c_m_sync_disable+0x54>)
    685a:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    685c:	68f8      	ldr	r0, [r7, #12]
    685e:	4b05      	ldr	r3, [pc, #20]	; (6874 <_i2c_m_sync_disable+0x58>)
    6860:	4798      	blx	r3

	return ERR_NONE;
    6862:	2300      	movs	r3, #0
}
    6864:	4618      	mov	r0, r3
    6866:	3710      	adds	r7, #16
    6868:	46bd      	mov	sp, r7
    686a:	bd80      	pop	{r7, pc}
    686c:	0000f2b0 	.word	0x0000f2b0
    6870:	0000397d 	.word	0x0000397d
    6874:	00006001 	.word	0x00006001

00006878 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6878:	b580      	push	{r7, lr}
    687a:	b084      	sub	sp, #16
    687c:	af00      	add	r7, sp, #0
    687e:	6078      	str	r0, [r7, #4]
    6880:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6886:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	691b      	ldr	r3, [r3, #16]
    688c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    688e:	68b8      	ldr	r0, [r7, #8]
    6890:	4b0f      	ldr	r3, [pc, #60]	; (68d0 <_sercom_i2c_sync_wait_bus+0x58>)
    6892:	4798      	blx	r3
    6894:	4603      	mov	r3, r0
    6896:	461a      	mov	r2, r3
    6898:	683b      	ldr	r3, [r7, #0]
    689a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    689c:	68fb      	ldr	r3, [r7, #12]
    689e:	1e5a      	subs	r2, r3, #1
    68a0:	60fa      	str	r2, [r7, #12]
    68a2:	2b00      	cmp	r3, #0
    68a4:	d102      	bne.n	68ac <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    68a6:	f06f 0304 	mvn.w	r3, #4
    68aa:	e00c      	b.n	68c6 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    68ac:	683b      	ldr	r3, [r7, #0]
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	f003 0301 	and.w	r3, r3, #1
    68b4:	2b00      	cmp	r3, #0
    68b6:	d105      	bne.n	68c4 <_sercom_i2c_sync_wait_bus+0x4c>
    68b8:	683b      	ldr	r3, [r7, #0]
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	f003 0302 	and.w	r3, r3, #2
    68c0:	2b00      	cmp	r3, #0
    68c2:	d0e4      	beq.n	688e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    68c4:	2300      	movs	r3, #0
}
    68c6:	4618      	mov	r0, r3
    68c8:	3710      	adds	r7, #16
    68ca:	46bd      	mov	sp, r7
    68cc:	bd80      	pop	{r7, pc}
    68ce:	bf00      	nop
    68d0:	00005f5d 	.word	0x00005f5d

000068d4 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    68d4:	b590      	push	{r4, r7, lr}
    68d6:	b087      	sub	sp, #28
    68d8:	af00      	add	r7, sp, #0
    68da:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	691b      	ldr	r3, [r3, #16]
    68e0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    68e6:	6978      	ldr	r0, [r7, #20]
    68e8:	4b39      	ldr	r3, [pc, #228]	; (69d0 <_sercom_i2c_sync_send_address+0xfc>)
    68ea:	4798      	blx	r3
    68ec:	4603      	mov	r3, r0
    68ee:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	2b00      	cmp	r3, #0
    68f4:	bf14      	ite	ne
    68f6:	2301      	movne	r3, #1
    68f8:	2300      	moveq	r3, #0
    68fa:	b2db      	uxtb	r3, r3
    68fc:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6900:	4934      	ldr	r1, [pc, #208]	; (69d4 <_sercom_i2c_sync_send_address+0x100>)
    6902:	4618      	mov	r0, r3
    6904:	4b34      	ldr	r3, [pc, #208]	; (69d8 <_sercom_i2c_sync_send_address+0x104>)
    6906:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6908:	693b      	ldr	r3, [r7, #16]
    690a:	685b      	ldr	r3, [r3, #4]
    690c:	2b01      	cmp	r3, #1
    690e:	d106      	bne.n	691e <_sercom_i2c_sync_send_address+0x4a>
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	2b00      	cmp	r3, #0
    6914:	d003      	beq.n	691e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6916:	6978      	ldr	r0, [r7, #20]
    6918:	4b30      	ldr	r3, [pc, #192]	; (69dc <_sercom_i2c_sync_send_address+0x108>)
    691a:	4798      	blx	r3
    691c:	e002      	b.n	6924 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    691e:	6978      	ldr	r0, [r7, #20]
    6920:	4b2f      	ldr	r3, [pc, #188]	; (69e0 <_sercom_i2c_sync_send_address+0x10c>)
    6922:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6924:	693b      	ldr	r3, [r7, #16]
    6926:	881b      	ldrh	r3, [r3, #0]
    6928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    692c:	2b00      	cmp	r3, #0
    692e:	d022      	beq.n	6976 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6930:	693b      	ldr	r3, [r7, #16]
    6932:	885b      	ldrh	r3, [r3, #2]
    6934:	b29b      	uxth	r3, r3
    6936:	f003 0301 	and.w	r3, r3, #1
    693a:	2b00      	cmp	r3, #0
    693c:	d007      	beq.n	694e <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    693e:	693b      	ldr	r3, [r7, #16]
    6940:	885b      	ldrh	r3, [r3, #2]
    6942:	b29b      	uxth	r3, r3
    6944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6948:	b29a      	uxth	r2, r3
    694a:	693b      	ldr	r3, [r7, #16]
    694c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    694e:	693b      	ldr	r3, [r7, #16]
    6950:	881b      	ldrh	r3, [r3, #0]
    6952:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6954:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6958:	401c      	ands	r4, r3
    695a:	6978      	ldr	r0, [r7, #20]
    695c:	4b21      	ldr	r3, [pc, #132]	; (69e4 <_sercom_i2c_sync_send_address+0x110>)
    695e:	4798      	blx	r3
    6960:	4603      	mov	r3, r0
    6962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6966:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    696c:	4619      	mov	r1, r3
    696e:	6978      	ldr	r0, [r7, #20]
    6970:	4b1d      	ldr	r3, [pc, #116]	; (69e8 <_sercom_i2c_sync_send_address+0x114>)
    6972:	4798      	blx	r3
    6974:	e01a      	b.n	69ac <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6976:	693b      	ldr	r3, [r7, #16]
    6978:	881b      	ldrh	r3, [r3, #0]
    697a:	005b      	lsls	r3, r3, #1
    697c:	b2db      	uxtb	r3, r3
    697e:	693a      	ldr	r2, [r7, #16]
    6980:	8852      	ldrh	r2, [r2, #2]
    6982:	b292      	uxth	r2, r2
    6984:	f002 0201 	and.w	r2, r2, #1
    6988:	2a00      	cmp	r2, #0
    698a:	bf14      	ite	ne
    698c:	2201      	movne	r2, #1
    698e:	2200      	moveq	r2, #0
    6990:	b2d2      	uxtb	r2, r2
    6992:	4313      	orrs	r3, r2
    6994:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6996:	6978      	ldr	r0, [r7, #20]
    6998:	4b12      	ldr	r3, [pc, #72]	; (69e4 <_sercom_i2c_sync_send_address+0x110>)
    699a:	4798      	blx	r3
    699c:	4603      	mov	r3, r0
    699e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    69a2:	4323      	orrs	r3, r4
    69a4:	4619      	mov	r1, r3
    69a6:	6978      	ldr	r0, [r7, #20]
    69a8:	4b0f      	ldr	r3, [pc, #60]	; (69e8 <_sercom_i2c_sync_send_address+0x114>)
    69aa:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    69ac:	f107 0308 	add.w	r3, r7, #8
    69b0:	4619      	mov	r1, r3
    69b2:	6878      	ldr	r0, [r7, #4]
    69b4:	4b0d      	ldr	r3, [pc, #52]	; (69ec <_sercom_i2c_sync_send_address+0x118>)
    69b6:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    69b8:	68bb      	ldr	r3, [r7, #8]
    69ba:	693a      	ldr	r2, [r7, #16]
    69bc:	4619      	mov	r1, r3
    69be:	6978      	ldr	r0, [r7, #20]
    69c0:	4b0b      	ldr	r3, [pc, #44]	; (69f0 <_sercom_i2c_sync_send_address+0x11c>)
    69c2:	4798      	blx	r3
    69c4:	4603      	mov	r3, r0
}
    69c6:	4618      	mov	r0, r3
    69c8:	371c      	adds	r7, #28
    69ca:	46bd      	mov	sp, r7
    69cc:	bd90      	pop	{r4, r7, pc}
    69ce:	bf00      	nop
    69d0:	00006029 	.word	0x00006029
    69d4:	0000f2b0 	.word	0x0000f2b0
    69d8:	0000397d 	.word	0x0000397d
    69dc:	000061b1 	.word	0x000061b1
    69e0:	000061d9 	.word	0x000061d9
    69e4:	00006319 	.word	0x00006319
    69e8:	000062f5 	.word	0x000062f5
    69ec:	00006879 	.word	0x00006879
    69f0:	00006565 	.word	0x00006565

000069f4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b086      	sub	sp, #24
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
    69fc:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    69fe:	687b      	ldr	r3, [r7, #4]
    6a00:	691b      	ldr	r3, [r3, #16]
    6a02:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	2b00      	cmp	r3, #0
    6a08:	bf14      	ite	ne
    6a0a:	2301      	movne	r3, #1
    6a0c:	2300      	moveq	r3, #0
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6a14:	493b      	ldr	r1, [pc, #236]	; (6b04 <_i2c_m_sync_transfer+0x110>)
    6a16:	4618      	mov	r0, r3
    6a18:	4b3b      	ldr	r3, [pc, #236]	; (6b08 <_i2c_m_sync_transfer+0x114>)
    6a1a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	691b      	ldr	r3, [r3, #16]
    6a20:	2b00      	cmp	r3, #0
    6a22:	bf14      	ite	ne
    6a24:	2301      	movne	r3, #1
    6a26:	2300      	moveq	r3, #0
    6a28:	b2db      	uxtb	r3, r3
    6a2a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6a2e:	4935      	ldr	r1, [pc, #212]	; (6b04 <_i2c_m_sync_transfer+0x110>)
    6a30:	4618      	mov	r0, r3
    6a32:	4b35      	ldr	r3, [pc, #212]	; (6b08 <_i2c_m_sync_transfer+0x114>)
    6a34:	4798      	blx	r3
	ASSERT(msg);
    6a36:	683b      	ldr	r3, [r7, #0]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	bf14      	ite	ne
    6a3c:	2301      	movne	r3, #1
    6a3e:	2300      	moveq	r3, #0
    6a40:	b2db      	uxtb	r3, r3
    6a42:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6a46:	492f      	ldr	r1, [pc, #188]	; (6b04 <_i2c_m_sync_transfer+0x110>)
    6a48:	4618      	mov	r0, r3
    6a4a:	4b2f      	ldr	r3, [pc, #188]	; (6b08 <_i2c_m_sync_transfer+0x114>)
    6a4c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	885b      	ldrh	r3, [r3, #2]
    6a52:	b29b      	uxth	r3, r3
    6a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d002      	beq.n	6a62 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6a5c:	f06f 0305 	mvn.w	r3, #5
    6a60:	e04c      	b.n	6afc <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6a62:	683b      	ldr	r3, [r7, #0]
    6a64:	885b      	ldrh	r3, [r3, #2]
    6a66:	b29b      	uxth	r3, r3
    6a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a6c:	b29a      	uxth	r2, r3
    6a6e:	683b      	ldr	r3, [r7, #0]
    6a70:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6a72:	687b      	ldr	r3, [r7, #4]
    6a74:	683a      	ldr	r2, [r7, #0]
    6a76:	ca07      	ldmia	r2, {r0, r1, r2}
    6a78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6a7c:	6938      	ldr	r0, [r7, #16]
    6a7e:	4b23      	ldr	r3, [pc, #140]	; (6b0c <_i2c_m_sync_transfer+0x118>)
    6a80:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6a82:	6878      	ldr	r0, [r7, #4]
    6a84:	4b22      	ldr	r3, [pc, #136]	; (6b10 <_i2c_m_sync_transfer+0x11c>)
    6a86:	4798      	blx	r3
    6a88:	6178      	str	r0, [r7, #20]

	if (ret) {
    6a8a:	697b      	ldr	r3, [r7, #20]
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d02d      	beq.n	6aec <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a90:	687b      	ldr	r3, [r7, #4]
    6a92:	885b      	ldrh	r3, [r3, #2]
    6a94:	b29b      	uxth	r3, r3
    6a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a9a:	b29a      	uxth	r2, r3
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	805a      	strh	r2, [r3, #2]

		return ret;
    6aa0:	697b      	ldr	r3, [r7, #20]
    6aa2:	e02b      	b.n	6afc <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6aa4:	f107 030c 	add.w	r3, r7, #12
    6aa8:	4619      	mov	r1, r3
    6aaa:	6878      	ldr	r0, [r7, #4]
    6aac:	4b19      	ldr	r3, [pc, #100]	; (6b14 <_i2c_m_sync_transfer+0x120>)
    6aae:	4798      	blx	r3
    6ab0:	6178      	str	r0, [r7, #20]

		if (ret) {
    6ab2:	697b      	ldr	r3, [r7, #20]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d012      	beq.n	6ade <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6ab8:	683b      	ldr	r3, [r7, #0]
    6aba:	885b      	ldrh	r3, [r3, #2]
    6abc:	b29b      	uxth	r3, r3
    6abe:	b21b      	sxth	r3, r3
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	da02      	bge.n	6aca <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6ac4:	6938      	ldr	r0, [r7, #16]
    6ac6:	4b14      	ldr	r3, [pc, #80]	; (6b18 <_i2c_m_sync_transfer+0x124>)
    6ac8:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6aca:	687b      	ldr	r3, [r7, #4]
    6acc:	885b      	ldrh	r3, [r3, #2]
    6ace:	b29b      	uxth	r3, r3
    6ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ad4:	b29a      	uxth	r2, r3
    6ad6:	687b      	ldr	r3, [r7, #4]
    6ad8:	805a      	strh	r2, [r3, #2]

			return ret;
    6ada:	697b      	ldr	r3, [r7, #20]
    6adc:	e00e      	b.n	6afc <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6ade:	68fb      	ldr	r3, [r7, #12]
    6ae0:	687a      	ldr	r2, [r7, #4]
    6ae2:	4619      	mov	r1, r3
    6ae4:	6938      	ldr	r0, [r7, #16]
    6ae6:	4b0d      	ldr	r3, [pc, #52]	; (6b1c <_i2c_m_sync_transfer+0x128>)
    6ae8:	4798      	blx	r3
    6aea:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6aec:	687b      	ldr	r3, [r7, #4]
    6aee:	885b      	ldrh	r3, [r3, #2]
    6af0:	b29b      	uxth	r3, r3
    6af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6af6:	2b00      	cmp	r3, #0
    6af8:	d1d4      	bne.n	6aa4 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6afa:	697b      	ldr	r3, [r7, #20]
}
    6afc:	4618      	mov	r0, r3
    6afe:	3718      	adds	r7, #24
    6b00:	46bd      	mov	sp, r7
    6b02:	bd80      	pop	{r7, pc}
    6b04:	0000f2b0 	.word	0x0000f2b0
    6b08:	0000397d 	.word	0x0000397d
    6b0c:	00006161 	.word	0x00006161
    6b10:	000068d5 	.word	0x000068d5
    6b14:	00006879 	.word	0x00006879
    6b18:	00006549 	.word	0x00006549
    6b1c:	00006565 	.word	0x00006565

00006b20 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	b084      	sub	sp, #16
    6b24:	af00      	add	r7, sp, #0
    6b26:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b2c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6b2e:	2304      	movs	r3, #4
    6b30:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	2b00      	cmp	r3, #0
    6b36:	bf14      	ite	ne
    6b38:	2301      	movne	r3, #1
    6b3a:	2300      	moveq	r3, #0
    6b3c:	b2db      	uxtb	r3, r3
    6b3e:	f240 6205 	movw	r2, #1541	; 0x605
    6b42:	4915      	ldr	r1, [pc, #84]	; (6b98 <_i2c_m_enable_implementation+0x78>)
    6b44:	4618      	mov	r0, r3
    6b46:	4b15      	ldr	r3, [pc, #84]	; (6b9c <_i2c_m_enable_implementation+0x7c>)
    6b48:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6b4a:	6878      	ldr	r0, [r7, #4]
    6b4c:	4b14      	ldr	r3, [pc, #80]	; (6ba0 <_i2c_m_enable_implementation+0x80>)
    6b4e:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b50:	e016      	b.n	6b80 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	3b01      	subs	r3, #1
    6b56:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6b58:	68fb      	ldr	r3, [r7, #12]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	dc10      	bgt.n	6b80 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6b5e:	68bb      	ldr	r3, [r7, #8]
    6b60:	3b01      	subs	r3, #1
    6b62:	60bb      	str	r3, [r7, #8]
    6b64:	68bb      	ldr	r3, [r7, #8]
    6b66:	2b00      	cmp	r3, #0
    6b68:	d007      	beq.n	6b7a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b6e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6b70:	2110      	movs	r1, #16
    6b72:	6878      	ldr	r0, [r7, #4]
    6b74:	4b0b      	ldr	r3, [pc, #44]	; (6ba4 <_i2c_m_enable_implementation+0x84>)
    6b76:	4798      	blx	r3
    6b78:	e002      	b.n	6b80 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6b7a:	f06f 0305 	mvn.w	r3, #5
    6b7e:	e006      	b.n	6b8e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b80:	6878      	ldr	r0, [r7, #4]
    6b82:	4b09      	ldr	r3, [pc, #36]	; (6ba8 <_i2c_m_enable_implementation+0x88>)
    6b84:	4798      	blx	r3
    6b86:	4603      	mov	r3, r0
    6b88:	2b01      	cmp	r3, #1
    6b8a:	d1e2      	bne.n	6b52 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6b8c:	2300      	movs	r3, #0
}
    6b8e:	4618      	mov	r0, r3
    6b90:	3710      	adds	r7, #16
    6b92:	46bd      	mov	sp, r7
    6b94:	bd80      	pop	{r7, pc}
    6b96:	bf00      	nop
    6b98:	0000f2b0 	.word	0x0000f2b0
    6b9c:	0000397d 	.word	0x0000397d
    6ba0:	00005fd9 	.word	0x00005fd9
    6ba4:	0000645d 	.word	0x0000645d
    6ba8:	0000640d 	.word	0x0000640d

00006bac <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b084      	sub	sp, #16
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
    6bb4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6bb6:	6838      	ldr	r0, [r7, #0]
    6bb8:	4b42      	ldr	r3, [pc, #264]	; (6cc4 <_i2c_m_sync_init_impl+0x118>)
    6bba:	4798      	blx	r3
    6bbc:	4603      	mov	r3, r0
    6bbe:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6bc0:	2101      	movs	r1, #1
    6bc2:	6838      	ldr	r0, [r7, #0]
    6bc4:	4b40      	ldr	r3, [pc, #256]	; (6cc8 <_i2c_m_sync_init_impl+0x11c>)
    6bc6:	4798      	blx	r3
    6bc8:	4603      	mov	r3, r0
    6bca:	f083 0301 	eor.w	r3, r3, #1
    6bce:	b2db      	uxtb	r3, r3
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d020      	beq.n	6c16 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6bd4:	7bfa      	ldrb	r2, [r7, #15]
    6bd6:	493d      	ldr	r1, [pc, #244]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6bd8:	4613      	mov	r3, r2
    6bda:	005b      	lsls	r3, r3, #1
    6bdc:	4413      	add	r3, r2
    6bde:	00db      	lsls	r3, r3, #3
    6be0:	440b      	add	r3, r1
    6be2:	3304      	adds	r3, #4
    6be4:	681b      	ldr	r3, [r3, #0]
    6be6:	f003 031c 	and.w	r3, r3, #28
    6bea:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6bec:	2102      	movs	r1, #2
    6bee:	6838      	ldr	r0, [r7, #0]
    6bf0:	4b37      	ldr	r3, [pc, #220]	; (6cd0 <_i2c_m_sync_init_impl+0x124>)
    6bf2:	4798      	blx	r3
    6bf4:	4603      	mov	r3, r0
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d006      	beq.n	6c08 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6bfa:	6838      	ldr	r0, [r7, #0]
    6bfc:	4b35      	ldr	r3, [pc, #212]	; (6cd4 <_i2c_m_sync_init_impl+0x128>)
    6bfe:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6c00:	2102      	movs	r1, #2
    6c02:	6838      	ldr	r0, [r7, #0]
    6c04:	4b34      	ldr	r3, [pc, #208]	; (6cd8 <_i2c_m_sync_init_impl+0x12c>)
    6c06:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6c08:	68bb      	ldr	r3, [r7, #8]
    6c0a:	f043 0301 	orr.w	r3, r3, #1
    6c0e:	4619      	mov	r1, r3
    6c10:	6838      	ldr	r0, [r7, #0]
    6c12:	4b32      	ldr	r3, [pc, #200]	; (6cdc <_i2c_m_sync_init_impl+0x130>)
    6c14:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6c16:	2101      	movs	r1, #1
    6c18:	6838      	ldr	r0, [r7, #0]
    6c1a:	4b2f      	ldr	r3, [pc, #188]	; (6cd8 <_i2c_m_sync_init_impl+0x12c>)
    6c1c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6c1e:	7bfa      	ldrb	r2, [r7, #15]
    6c20:	492a      	ldr	r1, [pc, #168]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6c22:	4613      	mov	r3, r2
    6c24:	005b      	lsls	r3, r3, #1
    6c26:	4413      	add	r3, r2
    6c28:	00db      	lsls	r3, r3, #3
    6c2a:	440b      	add	r3, r1
    6c2c:	3304      	adds	r3, #4
    6c2e:	681b      	ldr	r3, [r3, #0]
    6c30:	4619      	mov	r1, r3
    6c32:	6838      	ldr	r0, [r7, #0]
    6c34:	4b29      	ldr	r3, [pc, #164]	; (6cdc <_i2c_m_sync_init_impl+0x130>)
    6c36:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6c38:	7bfa      	ldrb	r2, [r7, #15]
    6c3a:	4924      	ldr	r1, [pc, #144]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6c3c:	4613      	mov	r3, r2
    6c3e:	005b      	lsls	r3, r3, #1
    6c40:	4413      	add	r3, r2
    6c42:	00db      	lsls	r3, r3, #3
    6c44:	440b      	add	r3, r1
    6c46:	3308      	adds	r3, #8
    6c48:	681b      	ldr	r3, [r3, #0]
    6c4a:	4619      	mov	r1, r3
    6c4c:	6838      	ldr	r0, [r7, #0]
    6c4e:	4b24      	ldr	r3, [pc, #144]	; (6ce0 <_i2c_m_sync_init_impl+0x134>)
    6c50:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6c52:	7bfa      	ldrb	r2, [r7, #15]
    6c54:	491d      	ldr	r1, [pc, #116]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6c56:	4613      	mov	r3, r2
    6c58:	005b      	lsls	r3, r3, #1
    6c5a:	4413      	add	r3, r2
    6c5c:	00db      	lsls	r3, r3, #3
    6c5e:	440b      	add	r3, r1
    6c60:	330c      	adds	r3, #12
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	4619      	mov	r1, r3
    6c66:	6838      	ldr	r0, [r7, #0]
    6c68:	4b1e      	ldr	r3, [pc, #120]	; (6ce4 <_i2c_m_sync_init_impl+0x138>)
    6c6a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6c6c:	7bfa      	ldrb	r2, [r7, #15]
    6c6e:	4917      	ldr	r1, [pc, #92]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6c70:	4613      	mov	r3, r2
    6c72:	005b      	lsls	r3, r3, #1
    6c74:	4413      	add	r3, r2
    6c76:	00db      	lsls	r3, r3, #3
    6c78:	440b      	add	r3, r1
    6c7a:	3304      	adds	r3, #4
    6c7c:	681b      	ldr	r3, [r3, #0]
    6c7e:	0e1b      	lsrs	r3, r3, #24
    6c80:	b29b      	uxth	r3, r3
    6c82:	f003 0303 	and.w	r3, r3, #3
    6c86:	b29a      	uxth	r2, r3
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	899b      	ldrh	r3, [r3, #12]
    6c90:	2b01      	cmp	r3, #1
    6c92:	bf8c      	ite	hi
    6c94:	2301      	movhi	r3, #1
    6c96:	2300      	movls	r3, #0
    6c98:	b2db      	uxtb	r3, r3
    6c9a:	4619      	mov	r1, r3
    6c9c:	6838      	ldr	r0, [r7, #0]
    6c9e:	4b12      	ldr	r3, [pc, #72]	; (6ce8 <_i2c_m_sync_init_impl+0x13c>)
    6ca0:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6ca2:	7bfa      	ldrb	r2, [r7, #15]
    6ca4:	4909      	ldr	r1, [pc, #36]	; (6ccc <_i2c_m_sync_init_impl+0x120>)
    6ca6:	4613      	mov	r3, r2
    6ca8:	005b      	lsls	r3, r3, #1
    6caa:	4413      	add	r3, r2
    6cac:	00db      	lsls	r3, r3, #3
    6cae:	440b      	add	r3, r1
    6cb0:	3312      	adds	r3, #18
    6cb2:	881a      	ldrh	r2, [r3, #0]
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6cb8:	2300      	movs	r3, #0
}
    6cba:	4618      	mov	r0, r3
    6cbc:	3710      	adds	r7, #16
    6cbe:	46bd      	mov	sp, r7
    6cc0:	bd80      	pop	{r7, pc}
    6cc2:	bf00      	nop
    6cc4:	000064e1 	.word	0x000064e1
    6cc8:	00005eb5 	.word	0x00005eb5
    6ccc:	20000018 	.word	0x20000018
    6cd0:	00006059 	.word	0x00006059
    6cd4:	00006001 	.word	0x00006001
    6cd8:	00005e91 	.word	0x00005e91
    6cdc:	00006089 	.word	0x00006089
    6ce0:	00006231 	.word	0x00006231
    6ce4:	00006279 	.word	0x00006279
    6ce8:	000062b5 	.word	0x000062b5

00006cec <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6cec:	b580      	push	{r7, lr}
    6cee:	b082      	sub	sp, #8
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	6078      	str	r0, [r7, #4]
    6cf4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6cf6:	687b      	ldr	r3, [r7, #4]
    6cf8:	2b00      	cmp	r3, #0
    6cfa:	d004      	beq.n	6d06 <_spi_load_regs_master+0x1a>
    6cfc:	683b      	ldr	r3, [r7, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d001      	beq.n	6d06 <_spi_load_regs_master+0x1a>
    6d02:	2301      	movs	r3, #1
    6d04:	e000      	b.n	6d08 <_spi_load_regs_master+0x1c>
    6d06:	2300      	movs	r3, #0
    6d08:	f003 0301 	and.w	r3, r3, #1
    6d0c:	b2db      	uxtb	r3, r3
    6d0e:	f640 1209 	movw	r2, #2313	; 0x909
    6d12:	4915      	ldr	r1, [pc, #84]	; (6d68 <_spi_load_regs_master+0x7c>)
    6d14:	4618      	mov	r0, r3
    6d16:	4b15      	ldr	r3, [pc, #84]	; (6d6c <_spi_load_regs_master+0x80>)
    6d18:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d1a:	683b      	ldr	r3, [r7, #0]
    6d1c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d22:	f023 0301 	bic.w	r3, r3, #1
    6d26:	4619      	mov	r1, r3
    6d28:	6878      	ldr	r0, [r7, #4]
    6d2a:	4b11      	ldr	r3, [pc, #68]	; (6d70 <_spi_load_regs_master+0x84>)
    6d2c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6d2e:	683b      	ldr	r3, [r7, #0]
    6d30:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6d32:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6d36:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d3e:	4619      	mov	r1, r3
    6d40:	6878      	ldr	r0, [r7, #4]
    6d42:	4b0c      	ldr	r3, [pc, #48]	; (6d74 <_spi_load_regs_master+0x88>)
    6d44:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d46:	683b      	ldr	r3, [r7, #0]
    6d48:	7b1b      	ldrb	r3, [r3, #12]
    6d4a:	4619      	mov	r1, r3
    6d4c:	6878      	ldr	r0, [r7, #4]
    6d4e:	4b0a      	ldr	r3, [pc, #40]	; (6d78 <_spi_load_regs_master+0x8c>)
    6d50:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d52:	683b      	ldr	r3, [r7, #0]
    6d54:	7b5b      	ldrb	r3, [r3, #13]
    6d56:	4619      	mov	r1, r3
    6d58:	6878      	ldr	r0, [r7, #4]
    6d5a:	4b08      	ldr	r3, [pc, #32]	; (6d7c <_spi_load_regs_master+0x90>)
    6d5c:	4798      	blx	r3
}
    6d5e:	bf00      	nop
    6d60:	3708      	adds	r7, #8
    6d62:	46bd      	mov	sp, r7
    6d64:	bd80      	pop	{r7, pc}
    6d66:	bf00      	nop
    6d68:	0000f2b0 	.word	0x0000f2b0
    6d6c:	0000397d 	.word	0x0000397d
    6d70:	0000613d 	.word	0x0000613d
    6d74:	00006255 	.word	0x00006255
    6d78:	00006295 	.word	0x00006295
    6d7c:	000063cd 	.word	0x000063cd

00006d80 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d80:	b580      	push	{r7, lr}
    6d82:	b082      	sub	sp, #8
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
    6d88:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d004      	beq.n	6d9a <_spi_load_regs_slave+0x1a>
    6d90:	683b      	ldr	r3, [r7, #0]
    6d92:	2b00      	cmp	r3, #0
    6d94:	d001      	beq.n	6d9a <_spi_load_regs_slave+0x1a>
    6d96:	2301      	movs	r3, #1
    6d98:	e000      	b.n	6d9c <_spi_load_regs_slave+0x1c>
    6d9a:	2300      	movs	r3, #0
    6d9c:	f003 0301 	and.w	r3, r3, #1
    6da0:	b2db      	uxtb	r3, r3
    6da2:	f640 121d 	movw	r2, #2333	; 0x91d
    6da6:	491a      	ldr	r1, [pc, #104]	; (6e10 <_spi_load_regs_slave+0x90>)
    6da8:	4618      	mov	r0, r3
    6daa:	4b1a      	ldr	r3, [pc, #104]	; (6e14 <_spi_load_regs_slave+0x94>)
    6dac:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6dae:	683b      	ldr	r3, [r7, #0]
    6db0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6db2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6db6:	f023 0301 	bic.w	r3, r3, #1
    6dba:	4619      	mov	r1, r3
    6dbc:	6878      	ldr	r0, [r7, #4]
    6dbe:	4b16      	ldr	r3, [pc, #88]	; (6e18 <_spi_load_regs_slave+0x98>)
    6dc0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6dc2:	683b      	ldr	r3, [r7, #0]
    6dc4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6dc6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6dca:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6dd2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6dd6:	4619      	mov	r1, r3
    6dd8:	6878      	ldr	r0, [r7, #4]
    6dda:	4b10      	ldr	r3, [pc, #64]	; (6e1c <_spi_load_regs_slave+0x9c>)
    6ddc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6dde:	683b      	ldr	r3, [r7, #0]
    6de0:	689b      	ldr	r3, [r3, #8]
    6de2:	4619      	mov	r1, r3
    6de4:	6878      	ldr	r0, [r7, #4]
    6de6:	4b0e      	ldr	r3, [pc, #56]	; (6e20 <_spi_load_regs_slave+0xa0>)
    6de8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6dea:	683b      	ldr	r3, [r7, #0]
    6dec:	7b5b      	ldrb	r3, [r3, #13]
    6dee:	4619      	mov	r1, r3
    6df0:	6878      	ldr	r0, [r7, #4]
    6df2:	4b0c      	ldr	r3, [pc, #48]	; (6e24 <_spi_load_regs_slave+0xa4>)
    6df4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6df6:	bf00      	nop
    6df8:	f04f 31ff 	mov.w	r1, #4294967295
    6dfc:	6878      	ldr	r0, [r7, #4]
    6dfe:	4b0a      	ldr	r3, [pc, #40]	; (6e28 <_spi_load_regs_slave+0xa8>)
    6e00:	4798      	blx	r3
    6e02:	4603      	mov	r3, r0
    6e04:	2b00      	cmp	r3, #0
    6e06:	d1f7      	bne.n	6df8 <_spi_load_regs_slave+0x78>
		;
}
    6e08:	bf00      	nop
    6e0a:	3708      	adds	r7, #8
    6e0c:	46bd      	mov	sp, r7
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	0000f2b0 	.word	0x0000f2b0
    6e14:	0000397d 	.word	0x0000397d
    6e18:	0000613d 	.word	0x0000613d
    6e1c:	00006255 	.word	0x00006255
    6e20:	00006339 	.word	0x00006339
    6e24:	000063cd 	.word	0x000063cd
    6e28:	00005f01 	.word	0x00005f01

00006e2c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b084      	sub	sp, #16
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	4618      	mov	r0, r3
    6e38:	4b11      	ldr	r3, [pc, #68]	; (6e80 <_spi_get_regs+0x54>)
    6e3a:	4798      	blx	r3
    6e3c:	4603      	mov	r3, r0
    6e3e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e40:	2300      	movs	r3, #0
    6e42:	73fb      	strb	r3, [r7, #15]
    6e44:	e014      	b.n	6e70 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6e46:	7bfa      	ldrb	r2, [r7, #15]
    6e48:	490e      	ldr	r1, [pc, #56]	; (6e84 <_spi_get_regs+0x58>)
    6e4a:	4613      	mov	r3, r2
    6e4c:	011b      	lsls	r3, r3, #4
    6e4e:	4413      	add	r3, r2
    6e50:	440b      	add	r3, r1
    6e52:	3310      	adds	r3, #16
    6e54:	781b      	ldrb	r3, [r3, #0]
    6e56:	7bba      	ldrb	r2, [r7, #14]
    6e58:	429a      	cmp	r2, r3
    6e5a:	d106      	bne.n	6e6a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6e5c:	7bfa      	ldrb	r2, [r7, #15]
    6e5e:	4613      	mov	r3, r2
    6e60:	011b      	lsls	r3, r3, #4
    6e62:	4413      	add	r3, r2
    6e64:	4a07      	ldr	r2, [pc, #28]	; (6e84 <_spi_get_regs+0x58>)
    6e66:	4413      	add	r3, r2
    6e68:	e006      	b.n	6e78 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e6a:	7bfb      	ldrb	r3, [r7, #15]
    6e6c:	3301      	adds	r3, #1
    6e6e:	73fb      	strb	r3, [r7, #15]
    6e70:	7bfb      	ldrb	r3, [r7, #15]
    6e72:	2b01      	cmp	r3, #1
    6e74:	d9e7      	bls.n	6e46 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6e76:	2300      	movs	r3, #0
}
    6e78:	4618      	mov	r0, r3
    6e7a:	3710      	adds	r7, #16
    6e7c:	46bd      	mov	sp, r7
    6e7e:	bd80      	pop	{r7, pc}
    6e80:	00006485 	.word	0x00006485
    6e84:	0000f2ec 	.word	0x0000f2ec

00006e88 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6e88:	b580      	push	{r7, lr}
    6e8a:	b084      	sub	sp, #16
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	6078      	str	r0, [r7, #4]
    6e90:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	4618      	mov	r0, r3
    6e96:	4b35      	ldr	r3, [pc, #212]	; (6f6c <_spi_m_sync_init+0xe4>)
    6e98:	4798      	blx	r3
    6e9a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6e9c:	687b      	ldr	r3, [r7, #4]
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	d004      	beq.n	6eac <_spi_m_sync_init+0x24>
    6ea2:	683b      	ldr	r3, [r7, #0]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d001      	beq.n	6eac <_spi_m_sync_init+0x24>
    6ea8:	2301      	movs	r3, #1
    6eaa:	e000      	b.n	6eae <_spi_m_sync_init+0x26>
    6eac:	2300      	movs	r3, #0
    6eae:	f003 0301 	and.w	r3, r3, #1
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	f640 123f 	movw	r2, #2367	; 0x93f
    6eb8:	492d      	ldr	r1, [pc, #180]	; (6f70 <_spi_m_sync_init+0xe8>)
    6eba:	4618      	mov	r0, r3
    6ebc:	4b2d      	ldr	r3, [pc, #180]	; (6f74 <_spi_m_sync_init+0xec>)
    6ebe:	4798      	blx	r3

	if (regs == NULL) {
    6ec0:	68fb      	ldr	r3, [r7, #12]
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d102      	bne.n	6ecc <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6ec6:	f06f 030c 	mvn.w	r3, #12
    6eca:	e04a      	b.n	6f62 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6ecc:	2101      	movs	r1, #1
    6ece:	6838      	ldr	r0, [r7, #0]
    6ed0:	4b29      	ldr	r3, [pc, #164]	; (6f78 <_spi_m_sync_init+0xf0>)
    6ed2:	4798      	blx	r3
    6ed4:	4603      	mov	r3, r0
    6ed6:	f083 0301 	eor.w	r3, r3, #1
    6eda:	b2db      	uxtb	r3, r3
    6edc:	2b00      	cmp	r3, #0
    6ede:	d019      	beq.n	6f14 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6ee0:	68fb      	ldr	r3, [r7, #12]
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	f003 031c 	and.w	r3, r3, #28
    6ee8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6eea:	2102      	movs	r1, #2
    6eec:	6838      	ldr	r0, [r7, #0]
    6eee:	4b23      	ldr	r3, [pc, #140]	; (6f7c <_spi_m_sync_init+0xf4>)
    6ef0:	4798      	blx	r3
    6ef2:	4603      	mov	r3, r0
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d006      	beq.n	6f06 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6ef8:	6838      	ldr	r0, [r7, #0]
    6efa:	4b21      	ldr	r3, [pc, #132]	; (6f80 <_spi_m_sync_init+0xf8>)
    6efc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6efe:	2102      	movs	r1, #2
    6f00:	6838      	ldr	r0, [r7, #0]
    6f02:	4b20      	ldr	r3, [pc, #128]	; (6f84 <_spi_m_sync_init+0xfc>)
    6f04:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6f06:	68bb      	ldr	r3, [r7, #8]
    6f08:	f043 0301 	orr.w	r3, r3, #1
    6f0c:	4619      	mov	r1, r3
    6f0e:	6838      	ldr	r0, [r7, #0]
    6f10:	4b1d      	ldr	r3, [pc, #116]	; (6f88 <_spi_m_sync_init+0x100>)
    6f12:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6f14:	2101      	movs	r1, #1
    6f16:	6838      	ldr	r0, [r7, #0]
    6f18:	4b1a      	ldr	r3, [pc, #104]	; (6f84 <_spi_m_sync_init+0xfc>)
    6f1a:	4798      	blx	r3

	dev->prvt = hw;
    6f1c:	687b      	ldr	r3, [r7, #4]
    6f1e:	683a      	ldr	r2, [r7, #0]
    6f20:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6f22:	68fb      	ldr	r3, [r7, #12]
    6f24:	681b      	ldr	r3, [r3, #0]
    6f26:	f003 031c 	and.w	r3, r3, #28
    6f2a:	2b08      	cmp	r3, #8
    6f2c:	d104      	bne.n	6f38 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6f2e:	68f9      	ldr	r1, [r7, #12]
    6f30:	6838      	ldr	r0, [r7, #0]
    6f32:	4b16      	ldr	r3, [pc, #88]	; (6f8c <_spi_m_sync_init+0x104>)
    6f34:	4798      	blx	r3
    6f36:	e003      	b.n	6f40 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6f38:	68f9      	ldr	r1, [r7, #12]
    6f3a:	6838      	ldr	r0, [r7, #0]
    6f3c:	4b14      	ldr	r3, [pc, #80]	; (6f90 <_spi_m_sync_init+0x108>)
    6f3e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	685b      	ldr	r3, [r3, #4]
    6f44:	f003 0307 	and.w	r3, r3, #7
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d101      	bne.n	6f50 <_spi_m_sync_init+0xc8>
    6f4c:	2201      	movs	r2, #1
    6f4e:	e000      	b.n	6f52 <_spi_m_sync_init+0xca>
    6f50:	2202      	movs	r2, #2
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	89db      	ldrh	r3, [r3, #14]
    6f5a:	b29a      	uxth	r2, r3
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6f60:	2300      	movs	r3, #0
}
    6f62:	4618      	mov	r0, r3
    6f64:	3710      	adds	r7, #16
    6f66:	46bd      	mov	sp, r7
    6f68:	bd80      	pop	{r7, pc}
    6f6a:	bf00      	nop
    6f6c:	00006e2d 	.word	0x00006e2d
    6f70:	0000f2b0 	.word	0x0000f2b0
    6f74:	0000397d 	.word	0x0000397d
    6f78:	00005f01 	.word	0x00005f01
    6f7c:	0000610d 	.word	0x0000610d
    6f80:	000060e5 	.word	0x000060e5
    6f84:	00005edd 	.word	0x00005edd
    6f88:	0000613d 	.word	0x0000613d
    6f8c:	00006d81 	.word	0x00006d81
    6f90:	00006ced 	.word	0x00006ced

00006f94 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	b082      	sub	sp, #8
    6f98:	af00      	add	r7, sp, #0
    6f9a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6f9c:	bf00      	nop
    6f9e:	2103      	movs	r1, #3
    6fa0:	6878      	ldr	r0, [r7, #4]
    6fa2:	4b06      	ldr	r3, [pc, #24]	; (6fbc <_spi_wait_bus_idle+0x28>)
    6fa4:	4798      	blx	r3
    6fa6:	4603      	mov	r3, r0
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d0f8      	beq.n	6f9e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6fac:	2103      	movs	r1, #3
    6fae:	6878      	ldr	r0, [r7, #4]
    6fb0:	4b03      	ldr	r3, [pc, #12]	; (6fc0 <_spi_wait_bus_idle+0x2c>)
    6fb2:	4798      	blx	r3
}
    6fb4:	bf00      	nop
    6fb6:	3708      	adds	r7, #8
    6fb8:	46bd      	mov	sp, r7
    6fba:	bd80      	pop	{r7, pc}
    6fbc:	00005f77 	.word	0x00005f77
    6fc0:	00005fb9 	.word	0x00005fb9

00006fc4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b086      	sub	sp, #24
    6fc8:	af00      	add	r7, sp, #0
    6fca:	60f8      	str	r0, [r7, #12]
    6fcc:	60b9      	str	r1, [r7, #8]
    6fce:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6fd0:	68bb      	ldr	r3, [r7, #8]
    6fd2:	f003 0304 	and.w	r3, r3, #4
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d101      	bne.n	6fde <_spi_rx_check_and_receive+0x1a>
		return false;
    6fda:	2300      	movs	r3, #0
    6fdc:	e022      	b.n	7024 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6fde:	68f8      	ldr	r0, [r7, #12]
    6fe0:	4b12      	ldr	r3, [pc, #72]	; (702c <_spi_rx_check_and_receive+0x68>)
    6fe2:	4798      	blx	r3
    6fe4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	685b      	ldr	r3, [r3, #4]
    6fea:	2b00      	cmp	r3, #0
    6fec:	d014      	beq.n	7018 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6fee:	687b      	ldr	r3, [r7, #4]
    6ff0:	685b      	ldr	r3, [r3, #4]
    6ff2:	1c59      	adds	r1, r3, #1
    6ff4:	687a      	ldr	r2, [r7, #4]
    6ff6:	6051      	str	r1, [r2, #4]
    6ff8:	697a      	ldr	r2, [r7, #20]
    6ffa:	b2d2      	uxtb	r2, r2
    6ffc:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6ffe:	687b      	ldr	r3, [r7, #4]
    7000:	7c1b      	ldrb	r3, [r3, #16]
    7002:	2b01      	cmp	r3, #1
    7004:	d908      	bls.n	7018 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	685b      	ldr	r3, [r3, #4]
    700a:	1c59      	adds	r1, r3, #1
    700c:	687a      	ldr	r2, [r7, #4]
    700e:	6051      	str	r1, [r2, #4]
    7010:	697a      	ldr	r2, [r7, #20]
    7012:	0a12      	lsrs	r2, r2, #8
    7014:	b2d2      	uxtb	r2, r2
    7016:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	68db      	ldr	r3, [r3, #12]
    701c:	1c5a      	adds	r2, r3, #1
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	60da      	str	r2, [r3, #12]

	return true;
    7022:	2301      	movs	r3, #1
}
    7024:	4618      	mov	r0, r3
    7026:	3718      	adds	r7, #24
    7028:	46bd      	mov	sp, r7
    702a:	bd80      	pop	{r7, pc}
    702c:	000063b5 	.word	0x000063b5

00007030 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7030:	b580      	push	{r7, lr}
    7032:	b086      	sub	sp, #24
    7034:	af00      	add	r7, sp, #0
    7036:	60f8      	str	r0, [r7, #12]
    7038:	60b9      	str	r1, [r7, #8]
    703a:	607a      	str	r2, [r7, #4]
    703c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    703e:	68bb      	ldr	r3, [r7, #8]
    7040:	f003 0301 	and.w	r3, r3, #1
    7044:	2b00      	cmp	r3, #0
    7046:	d028      	beq.n	709a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7048:	687b      	ldr	r3, [r7, #4]
    704a:	681b      	ldr	r3, [r3, #0]
    704c:	2b00      	cmp	r3, #0
    704e:	d018      	beq.n	7082 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	1c59      	adds	r1, r3, #1
    7056:	687a      	ldr	r2, [r7, #4]
    7058:	6011      	str	r1, [r2, #0]
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	7c1b      	ldrb	r3, [r3, #16]
    7062:	2b01      	cmp	r3, #1
    7064:	d90f      	bls.n	7086 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	021b      	lsls	r3, r3, #8
    706e:	461a      	mov	r2, r3
    7070:	697b      	ldr	r3, [r7, #20]
    7072:	4313      	orrs	r3, r2
    7074:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	1c5a      	adds	r2, r3, #1
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	601a      	str	r2, [r3, #0]
    7080:	e001      	b.n	7086 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7082:	887b      	ldrh	r3, [r7, #2]
    7084:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	689b      	ldr	r3, [r3, #8]
    708a:	1c5a      	adds	r2, r3, #1
    708c:	687b      	ldr	r3, [r7, #4]
    708e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7090:	6979      	ldr	r1, [r7, #20]
    7092:	68f8      	ldr	r0, [r7, #12]
    7094:	4b03      	ldr	r3, [pc, #12]	; (70a4 <_spi_tx_check_and_send+0x74>)
    7096:	4798      	blx	r3
    7098:	e000      	b.n	709c <_spi_tx_check_and_send+0x6c>
		return;
    709a:	bf00      	nop
}
    709c:	3718      	adds	r7, #24
    709e:	46bd      	mov	sp, r7
    70a0:	bd80      	pop	{r7, pc}
    70a2:	bf00      	nop
    70a4:	00006399 	.word	0x00006399

000070a8 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    70a8:	b580      	push	{r7, lr}
    70aa:	b082      	sub	sp, #8
    70ac:	af00      	add	r7, sp, #0
    70ae:	6078      	str	r0, [r7, #4]
    70b0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    70b2:	687b      	ldr	r3, [r7, #4]
    70b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    70b8:	2b00      	cmp	r3, #0
    70ba:	d00b      	beq.n	70d4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    70bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70c0:	6838      	ldr	r0, [r7, #0]
    70c2:	4b07      	ldr	r3, [pc, #28]	; (70e0 <_spi_err_check+0x38>)
    70c4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    70c6:	2180      	movs	r1, #128	; 0x80
    70c8:	6838      	ldr	r0, [r7, #0]
    70ca:	4b06      	ldr	r3, [pc, #24]	; (70e4 <_spi_err_check+0x3c>)
    70cc:	4798      	blx	r3
		return ERR_OVERFLOW;
    70ce:	f06f 0312 	mvn.w	r3, #18
    70d2:	e000      	b.n	70d6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    70d4:	2300      	movs	r3, #0
}
    70d6:	4618      	mov	r0, r3
    70d8:	3708      	adds	r7, #8
    70da:	46bd      	mov	sp, r7
    70dc:	bd80      	pop	{r7, pc}
    70de:	bf00      	nop
    70e0:	000063ed 	.word	0x000063ed
    70e4:	00005fb9 	.word	0x00005fb9

000070e8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    70e8:	b590      	push	{r4, r7, lr}
    70ea:	b08b      	sub	sp, #44	; 0x2c
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
    70f0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	681b      	ldr	r3, [r3, #0]
    70f6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    70f8:	2300      	movs	r3, #0
    70fa:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    70fc:	683b      	ldr	r3, [r7, #0]
    70fe:	681b      	ldr	r3, [r3, #0]
    7100:	60bb      	str	r3, [r7, #8]
    7102:	683b      	ldr	r3, [r7, #0]
    7104:	685b      	ldr	r3, [r3, #4]
    7106:	60fb      	str	r3, [r7, #12]
    7108:	2300      	movs	r3, #0
    710a:	613b      	str	r3, [r7, #16]
    710c:	2300      	movs	r3, #0
    710e:	617b      	str	r3, [r7, #20]
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	791b      	ldrb	r3, [r3, #4]
    7114:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	2b00      	cmp	r3, #0
    711a:	d004      	beq.n	7126 <_spi_m_sync_trans+0x3e>
    711c:	6a3b      	ldr	r3, [r7, #32]
    711e:	2b00      	cmp	r3, #0
    7120:	d001      	beq.n	7126 <_spi_m_sync_trans+0x3e>
    7122:	2301      	movs	r3, #1
    7124:	e000      	b.n	7128 <_spi_m_sync_trans+0x40>
    7126:	2300      	movs	r3, #0
    7128:	f003 0301 	and.w	r3, r3, #1
    712c:	b2db      	uxtb	r3, r3
    712e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7132:	492b      	ldr	r1, [pc, #172]	; (71e0 <_spi_m_sync_trans+0xf8>)
    7134:	4618      	mov	r0, r3
    7136:	4b2b      	ldr	r3, [pc, #172]	; (71e4 <_spi_m_sync_trans+0xfc>)
    7138:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    713a:	2107      	movs	r1, #7
    713c:	6a38      	ldr	r0, [r7, #32]
    713e:	4b2a      	ldr	r3, [pc, #168]	; (71e8 <_spi_m_sync_trans+0x100>)
    7140:	4798      	blx	r3
    7142:	4603      	mov	r3, r0
    7144:	2b00      	cmp	r3, #0
    7146:	d002      	beq.n	714e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7148:	f06f 0303 	mvn.w	r3, #3
    714c:	e043      	b.n	71d6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    714e:	6a38      	ldr	r0, [r7, #32]
    7150:	4b26      	ldr	r3, [pc, #152]	; (71ec <_spi_m_sync_trans+0x104>)
    7152:	4798      	blx	r3
    7154:	4603      	mov	r3, r0
    7156:	f083 0301 	eor.w	r3, r3, #1
    715a:	b2db      	uxtb	r3, r3
    715c:	2b00      	cmp	r3, #0
    715e:	d002      	beq.n	7166 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7160:	f06f 0313 	mvn.w	r3, #19
    7164:	e037      	b.n	71d6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7166:	6a38      	ldr	r0, [r7, #32]
    7168:	4b21      	ldr	r3, [pc, #132]	; (71f0 <_spi_m_sync_trans+0x108>)
    716a:	4798      	blx	r3
    716c:	4603      	mov	r3, r0
    716e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7170:	f107 0308 	add.w	r3, r7, #8
    7174:	461a      	mov	r2, r3
    7176:	69f9      	ldr	r1, [r7, #28]
    7178:	6a38      	ldr	r0, [r7, #32]
    717a:	4b1e      	ldr	r3, [pc, #120]	; (71f4 <_spi_m_sync_trans+0x10c>)
    717c:	4798      	blx	r3
    717e:	4603      	mov	r3, r0
    7180:	f083 0301 	eor.w	r3, r3, #1
    7184:	b2db      	uxtb	r3, r3
    7186:	2b00      	cmp	r3, #0
    7188:	d00b      	beq.n	71a2 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    718a:	697a      	ldr	r2, [r7, #20]
    718c:	693b      	ldr	r3, [r7, #16]
    718e:	429a      	cmp	r2, r3
    7190:	d307      	bcc.n	71a2 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	88db      	ldrh	r3, [r3, #6]
    7196:	f107 0208 	add.w	r2, r7, #8
    719a:	69f9      	ldr	r1, [r7, #28]
    719c:	6a38      	ldr	r0, [r7, #32]
    719e:	4c16      	ldr	r4, [pc, #88]	; (71f8 <_spi_m_sync_trans+0x110>)
    71a0:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    71a2:	6a39      	ldr	r1, [r7, #32]
    71a4:	69f8      	ldr	r0, [r7, #28]
    71a6:	4b15      	ldr	r3, [pc, #84]	; (71fc <_spi_m_sync_trans+0x114>)
    71a8:	4798      	blx	r3
    71aa:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    71ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    71ae:	2b00      	cmp	r3, #0
    71b0:	db0c      	blt.n	71cc <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    71b2:	693a      	ldr	r2, [r7, #16]
    71b4:	683b      	ldr	r3, [r7, #0]
    71b6:	689b      	ldr	r3, [r3, #8]
    71b8:	429a      	cmp	r2, r3
    71ba:	d3d4      	bcc.n	7166 <_spi_m_sync_trans+0x7e>
    71bc:	697a      	ldr	r2, [r7, #20]
    71be:	683b      	ldr	r3, [r7, #0]
    71c0:	689b      	ldr	r3, [r3, #8]
    71c2:	429a      	cmp	r2, r3
    71c4:	d3cf      	bcc.n	7166 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    71c6:	693b      	ldr	r3, [r7, #16]
    71c8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    71ca:	e000      	b.n	71ce <_spi_m_sync_trans+0xe6>
			break;
    71cc:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    71ce:	6a38      	ldr	r0, [r7, #32]
    71d0:	4b0b      	ldr	r3, [pc, #44]	; (7200 <_spi_m_sync_trans+0x118>)
    71d2:	4798      	blx	r3

	return rc;
    71d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    71d6:	4618      	mov	r0, r3
    71d8:	372c      	adds	r7, #44	; 0x2c
    71da:	46bd      	mov	sp, r7
    71dc:	bd90      	pop	{r4, r7, pc}
    71de:	bf00      	nop
    71e0:	0000f2b0 	.word	0x0000f2b0
    71e4:	0000397d 	.word	0x0000397d
    71e8:	00005f01 	.word	0x00005f01
    71ec:	000060ad 	.word	0x000060ad
    71f0:	00005f9f 	.word	0x00005f9f
    71f4:	00006fc5 	.word	0x00006fc5
    71f8:	00007031 	.word	0x00007031
    71fc:	000070a9 	.word	0x000070a9
    7200:	00006f95 	.word	0x00006f95

00007204 <__NVIC_EnableIRQ>:
{
    7204:	b480      	push	{r7}
    7206:	b083      	sub	sp, #12
    7208:	af00      	add	r7, sp, #0
    720a:	4603      	mov	r3, r0
    720c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    720e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7212:	2b00      	cmp	r3, #0
    7214:	db0b      	blt.n	722e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7216:	4909      	ldr	r1, [pc, #36]	; (723c <__NVIC_EnableIRQ+0x38>)
    7218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    721c:	095b      	lsrs	r3, r3, #5
    721e:	88fa      	ldrh	r2, [r7, #6]
    7220:	f002 021f 	and.w	r2, r2, #31
    7224:	2001      	movs	r0, #1
    7226:	fa00 f202 	lsl.w	r2, r0, r2
    722a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    722e:	bf00      	nop
    7230:	370c      	adds	r7, #12
    7232:	46bd      	mov	sp, r7
    7234:	f85d 7b04 	ldr.w	r7, [sp], #4
    7238:	4770      	bx	lr
    723a:	bf00      	nop
    723c:	e000e100 	.word	0xe000e100

00007240 <__NVIC_DisableIRQ>:
{
    7240:	b480      	push	{r7}
    7242:	b083      	sub	sp, #12
    7244:	af00      	add	r7, sp, #0
    7246:	4603      	mov	r3, r0
    7248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    724a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    724e:	2b00      	cmp	r3, #0
    7250:	db10      	blt.n	7274 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7252:	490b      	ldr	r1, [pc, #44]	; (7280 <__NVIC_DisableIRQ+0x40>)
    7254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7258:	095b      	lsrs	r3, r3, #5
    725a:	88fa      	ldrh	r2, [r7, #6]
    725c:	f002 021f 	and.w	r2, r2, #31
    7260:	2001      	movs	r0, #1
    7262:	fa00 f202 	lsl.w	r2, r0, r2
    7266:	3320      	adds	r3, #32
    7268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    726c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7270:	f3bf 8f6f 	isb	sy
}
    7274:	bf00      	nop
    7276:	370c      	adds	r7, #12
    7278:	46bd      	mov	sp, r7
    727a:	f85d 7b04 	ldr.w	r7, [sp], #4
    727e:	4770      	bx	lr
    7280:	e000e100 	.word	0xe000e100

00007284 <__NVIC_ClearPendingIRQ>:
{
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
    728a:	4603      	mov	r3, r0
    728c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    728e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7292:	2b00      	cmp	r3, #0
    7294:	db0c      	blt.n	72b0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7296:	4909      	ldr	r1, [pc, #36]	; (72bc <__NVIC_ClearPendingIRQ+0x38>)
    7298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    729c:	095b      	lsrs	r3, r3, #5
    729e:	88fa      	ldrh	r2, [r7, #6]
    72a0:	f002 021f 	and.w	r2, r2, #31
    72a4:	2001      	movs	r0, #1
    72a6:	fa00 f202 	lsl.w	r2, r0, r2
    72aa:	3360      	adds	r3, #96	; 0x60
    72ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72b0:	bf00      	nop
    72b2:	370c      	adds	r7, #12
    72b4:	46bd      	mov	sp, r7
    72b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ba:	4770      	bx	lr
    72bc:	e000e100 	.word	0xe000e100

000072c0 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72c0:	b480      	push	{r7}
    72c2:	b083      	sub	sp, #12
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
    72c8:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    72ca:	bf00      	nop
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	689a      	ldr	r2, [r3, #8]
    72d0:	683b      	ldr	r3, [r7, #0]
    72d2:	4013      	ands	r3, r2
    72d4:	2b00      	cmp	r3, #0
    72d6:	d1f9      	bne.n	72cc <hri_tcc_wait_for_sync+0xc>
	};
}
    72d8:	bf00      	nop
    72da:	370c      	adds	r7, #12
    72dc:	46bd      	mov	sp, r7
    72de:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e2:	4770      	bx	lr

000072e4 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72e4:	b480      	push	{r7}
    72e6:	b083      	sub	sp, #12
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
    72ec:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    72ee:	687b      	ldr	r3, [r7, #4]
    72f0:	689a      	ldr	r2, [r3, #8]
    72f2:	683b      	ldr	r3, [r7, #0]
    72f4:	4013      	ands	r3, r2
    72f6:	2b00      	cmp	r3, #0
    72f8:	bf14      	ite	ne
    72fa:	2301      	movne	r3, #1
    72fc:	2300      	moveq	r3, #0
    72fe:	b2db      	uxtb	r3, r3
}
    7300:	4618      	mov	r0, r3
    7302:	370c      	adds	r7, #12
    7304:	46bd      	mov	sp, r7
    7306:	f85d 7b04 	ldr.w	r7, [sp], #4
    730a:	4770      	bx	lr

0000730c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    730c:	b480      	push	{r7}
    730e:	b083      	sub	sp, #12
    7310:	af00      	add	r7, sp, #0
    7312:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7314:	687b      	ldr	r3, [r7, #4]
    7316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7318:	f003 0301 	and.w	r3, r3, #1
    731c:	2b00      	cmp	r3, #0
    731e:	bf14      	ite	ne
    7320:	2301      	movne	r3, #1
    7322:	2300      	moveq	r3, #0
    7324:	b2db      	uxtb	r3, r3
}
    7326:	4618      	mov	r0, r3
    7328:	370c      	adds	r7, #12
    732a:	46bd      	mov	sp, r7
    732c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7330:	4770      	bx	lr

00007332 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7332:	b480      	push	{r7}
    7334:	b083      	sub	sp, #12
    7336:	af00      	add	r7, sp, #0
    7338:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	2201      	movs	r2, #1
    733e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7340:	bf00      	nop
    7342:	370c      	adds	r7, #12
    7344:	46bd      	mov	sp, r7
    7346:	f85d 7b04 	ldr.w	r7, [sp], #4
    734a:	4770      	bx	lr

0000734c <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    734c:	b480      	push	{r7}
    734e:	b083      	sub	sp, #12
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
    7354:	460b      	mov	r3, r1
    7356:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	78fa      	ldrb	r2, [r7, #3]
    735c:	715a      	strb	r2, [r3, #5]
}
    735e:	bf00      	nop
    7360:	370c      	adds	r7, #12
    7362:	46bd      	mov	sp, r7
    7364:	f85d 7b04 	ldr.w	r7, [sp], #4
    7368:	4770      	bx	lr

0000736a <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    736a:	b480      	push	{r7}
    736c:	b083      	sub	sp, #12
    736e:	af00      	add	r7, sp, #0
    7370:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	2201      	movs	r2, #1
    7376:	629a      	str	r2, [r3, #40]	; 0x28
}
    7378:	bf00      	nop
    737a:	370c      	adds	r7, #12
    737c:	46bd      	mov	sp, r7
    737e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7382:	4770      	bx	lr

00007384 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7384:	b580      	push	{r7, lr}
    7386:	b082      	sub	sp, #8
    7388:	af00      	add	r7, sp, #0
    738a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	f043 0201 	orr.w	r2, r3, #1
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7398:	2101      	movs	r1, #1
    739a:	6878      	ldr	r0, [r7, #4]
    739c:	4b02      	ldr	r3, [pc, #8]	; (73a8 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    739e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    73a0:	bf00      	nop
    73a2:	3708      	adds	r7, #8
    73a4:	46bd      	mov	sp, r7
    73a6:	bd80      	pop	{r7, pc}
    73a8:	000072c1 	.word	0x000072c1

000073ac <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b082      	sub	sp, #8
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	f043 0202 	orr.w	r2, r3, #2
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73c0:	2103      	movs	r1, #3
    73c2:	6878      	ldr	r0, [r7, #4]
    73c4:	4b02      	ldr	r3, [pc, #8]	; (73d0 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    73c6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    73c8:	bf00      	nop
    73ca:	3708      	adds	r7, #8
    73cc:	46bd      	mov	sp, r7
    73ce:	bd80      	pop	{r7, pc}
    73d0:	000072c1 	.word	0x000072c1

000073d4 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    73d4:	b580      	push	{r7, lr}
    73d6:	b084      	sub	sp, #16
    73d8:	af00      	add	r7, sp, #0
    73da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73dc:	2103      	movs	r1, #3
    73de:	6878      	ldr	r0, [r7, #4]
    73e0:	4b09      	ldr	r3, [pc, #36]	; (7408 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    73e2:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    73e4:	687b      	ldr	r3, [r7, #4]
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    73ea:	68fb      	ldr	r3, [r7, #12]
    73ec:	085b      	lsrs	r3, r3, #1
    73ee:	f003 0301 	and.w	r3, r3, #1
    73f2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    73f4:	68fb      	ldr	r3, [r7, #12]
    73f6:	2b00      	cmp	r3, #0
    73f8:	bf14      	ite	ne
    73fa:	2301      	movne	r3, #1
    73fc:	2300      	moveq	r3, #0
    73fe:	b2db      	uxtb	r3, r3
}
    7400:	4618      	mov	r0, r3
    7402:	3710      	adds	r7, #16
    7404:	46bd      	mov	sp, r7
    7406:	bd80      	pop	{r7, pc}
    7408:	000072c1 	.word	0x000072c1

0000740c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    740c:	b580      	push	{r7, lr}
    740e:	b082      	sub	sp, #8
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	f023 0202 	bic.w	r2, r3, #2
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7420:	2103      	movs	r1, #3
    7422:	6878      	ldr	r0, [r7, #4]
    7424:	4b02      	ldr	r3, [pc, #8]	; (7430 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7426:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7428:	bf00      	nop
    742a:	3708      	adds	r7, #8
    742c:	46bd      	mov	sp, r7
    742e:	bd80      	pop	{r7, pc}
    7430:	000072c1 	.word	0x000072c1

00007434 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
    743c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    743e:	2103      	movs	r1, #3
    7440:	6878      	ldr	r0, [r7, #4]
    7442:	4b07      	ldr	r3, [pc, #28]	; (7460 <hri_tcc_get_CTRLA_reg+0x2c>)
    7444:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7446:	687b      	ldr	r3, [r7, #4]
    7448:	681b      	ldr	r3, [r3, #0]
    744a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    744c:	68fa      	ldr	r2, [r7, #12]
    744e:	683b      	ldr	r3, [r7, #0]
    7450:	4013      	ands	r3, r2
    7452:	60fb      	str	r3, [r7, #12]
	return tmp;
    7454:	68fb      	ldr	r3, [r7, #12]
}
    7456:	4618      	mov	r0, r3
    7458:	3710      	adds	r7, #16
    745a:	46bd      	mov	sp, r7
    745c:	bd80      	pop	{r7, pc}
    745e:	bf00      	nop
    7460:	000072c1 	.word	0x000072c1

00007464 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7464:	b580      	push	{r7, lr}
    7466:	b082      	sub	sp, #8
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
    746c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	683a      	ldr	r2, [r7, #0]
    7472:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7474:	2103      	movs	r1, #3
    7476:	6878      	ldr	r0, [r7, #4]
    7478:	4b02      	ldr	r3, [pc, #8]	; (7484 <hri_tcc_write_CTRLA_reg+0x20>)
    747a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    747c:	bf00      	nop
    747e:	3708      	adds	r7, #8
    7480:	46bd      	mov	sp, r7
    7482:	bd80      	pop	{r7, pc}
    7484:	000072c1 	.word	0x000072c1

00007488 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7488:	b480      	push	{r7}
    748a:	b083      	sub	sp, #12
    748c:	af00      	add	r7, sp, #0
    748e:	6078      	str	r0, [r7, #4]
    7490:	460b      	mov	r3, r1
    7492:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7494:	687b      	ldr	r3, [r7, #4]
    7496:	78fa      	ldrb	r2, [r7, #3]
    7498:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    749a:	bf00      	nop
    749c:	370c      	adds	r7, #12
    749e:	46bd      	mov	sp, r7
    74a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    74a4:	4770      	bx	lr

000074a6 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    74a6:	b480      	push	{r7}
    74a8:	b083      	sub	sp, #12
    74aa:	af00      	add	r7, sp, #0
    74ac:	6078      	str	r0, [r7, #4]
    74ae:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    74b0:	687b      	ldr	r3, [r7, #4]
    74b2:	683a      	ldr	r2, [r7, #0]
    74b4:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    74b6:	bf00      	nop
    74b8:	370c      	adds	r7, #12
    74ba:	46bd      	mov	sp, r7
    74bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    74c0:	4770      	bx	lr
	...

000074c4 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    74c4:	b580      	push	{r7, lr}
    74c6:	b082      	sub	sp, #8
    74c8:	af00      	add	r7, sp, #0
    74ca:	6078      	str	r0, [r7, #4]
    74cc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	683a      	ldr	r2, [r7, #0]
    74d2:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74d4:	2180      	movs	r1, #128	; 0x80
    74d6:	6878      	ldr	r0, [r7, #4]
    74d8:	4b02      	ldr	r3, [pc, #8]	; (74e4 <hri_tcc_write_PER_reg+0x20>)
    74da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    74dc:	bf00      	nop
    74de:	3708      	adds	r7, #8
    74e0:	46bd      	mov	sp, r7
    74e2:	bd80      	pop	{r7, pc}
    74e4:	000072c1 	.word	0x000072c1

000074e8 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	b082      	sub	sp, #8
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74f0:	2180      	movs	r1, #128	; 0x80
    74f2:	6878      	ldr	r0, [r7, #4]
    74f4:	4b03      	ldr	r3, [pc, #12]	; (7504 <hri_tcc_read_PER_reg+0x1c>)
    74f6:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    74fc:	4618      	mov	r0, r3
    74fe:	3708      	adds	r7, #8
    7500:	46bd      	mov	sp, r7
    7502:	bd80      	pop	{r7, pc}
    7504:	000072c1 	.word	0x000072c1

00007508 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7508:	b480      	push	{r7}
    750a:	b083      	sub	sp, #12
    750c:	af00      	add	r7, sp, #0
    750e:	6078      	str	r0, [r7, #4]
    7510:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7512:	687b      	ldr	r3, [r7, #4]
    7514:	4a0c      	ldr	r2, [pc, #48]	; (7548 <_tcc_init_irq_param+0x40>)
    7516:	4293      	cmp	r3, r2
    7518:	d102      	bne.n	7520 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    751a:	4a0c      	ldr	r2, [pc, #48]	; (754c <_tcc_init_irq_param+0x44>)
    751c:	683b      	ldr	r3, [r7, #0]
    751e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	4a0b      	ldr	r2, [pc, #44]	; (7550 <_tcc_init_irq_param+0x48>)
    7524:	4293      	cmp	r3, r2
    7526:	d102      	bne.n	752e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7528:	4a0a      	ldr	r2, [pc, #40]	; (7554 <_tcc_init_irq_param+0x4c>)
    752a:	683b      	ldr	r3, [r7, #0]
    752c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    752e:	687b      	ldr	r3, [r7, #4]
    7530:	4a09      	ldr	r2, [pc, #36]	; (7558 <_tcc_init_irq_param+0x50>)
    7532:	4293      	cmp	r3, r2
    7534:	d102      	bne.n	753c <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7536:	4a09      	ldr	r2, [pc, #36]	; (755c <_tcc_init_irq_param+0x54>)
    7538:	683b      	ldr	r3, [r7, #0]
    753a:	6013      	str	r3, [r2, #0]
	}
}
    753c:	bf00      	nop
    753e:	370c      	adds	r7, #12
    7540:	46bd      	mov	sp, r7
    7542:	f85d 7b04 	ldr.w	r7, [sp], #4
    7546:	4770      	bx	lr
    7548:	41016000 	.word	0x41016000
    754c:	20000960 	.word	0x20000960
    7550:	41018000 	.word	0x41018000
    7554:	20000964 	.word	0x20000964
    7558:	42000c00 	.word	0x42000c00
    755c:	20000968 	.word	0x20000968

00007560 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7560:	b580      	push	{r7, lr}
    7562:	b084      	sub	sp, #16
    7564:	af00      	add	r7, sp, #0
    7566:	6078      	str	r0, [r7, #4]
    7568:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    756a:	6838      	ldr	r0, [r7, #0]
    756c:	4b33      	ldr	r3, [pc, #204]	; (763c <_tcc_timer_init+0xdc>)
    756e:	4798      	blx	r3
    7570:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7572:	68fb      	ldr	r3, [r7, #12]
    7574:	2b00      	cmp	r3, #0
    7576:	d102      	bne.n	757e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7578:	f06f 0309 	mvn.w	r3, #9
    757c:	e05a      	b.n	7634 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	683a      	ldr	r2, [r7, #0]
    7582:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7584:	2101      	movs	r1, #1
    7586:	6838      	ldr	r0, [r7, #0]
    7588:	4b2d      	ldr	r3, [pc, #180]	; (7640 <_tcc_timer_init+0xe0>)
    758a:	4798      	blx	r3
    758c:	4603      	mov	r3, r0
    758e:	f083 0301 	eor.w	r3, r3, #1
    7592:	b2db      	uxtb	r3, r3
    7594:	2b00      	cmp	r3, #0
    7596:	d011      	beq.n	75bc <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7598:	2102      	movs	r1, #2
    759a:	6838      	ldr	r0, [r7, #0]
    759c:	4b29      	ldr	r3, [pc, #164]	; (7644 <_tcc_timer_init+0xe4>)
    759e:	4798      	blx	r3
    75a0:	4603      	mov	r3, r0
    75a2:	2b00      	cmp	r3, #0
    75a4:	d006      	beq.n	75b4 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    75a6:	6838      	ldr	r0, [r7, #0]
    75a8:	4b27      	ldr	r3, [pc, #156]	; (7648 <_tcc_timer_init+0xe8>)
    75aa:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    75ac:	2102      	movs	r1, #2
    75ae:	6838      	ldr	r0, [r7, #0]
    75b0:	4b26      	ldr	r3, [pc, #152]	; (764c <_tcc_timer_init+0xec>)
    75b2:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    75b4:	2101      	movs	r1, #1
    75b6:	6838      	ldr	r0, [r7, #0]
    75b8:	4b25      	ldr	r3, [pc, #148]	; (7650 <_tcc_timer_init+0xf0>)
    75ba:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    75bc:	2101      	movs	r1, #1
    75be:	6838      	ldr	r0, [r7, #0]
    75c0:	4b22      	ldr	r3, [pc, #136]	; (764c <_tcc_timer_init+0xec>)
    75c2:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    75c4:	68fb      	ldr	r3, [r7, #12]
    75c6:	689b      	ldr	r3, [r3, #8]
    75c8:	4619      	mov	r1, r3
    75ca:	6838      	ldr	r0, [r7, #0]
    75cc:	4b20      	ldr	r3, [pc, #128]	; (7650 <_tcc_timer_init+0xf0>)
    75ce:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    75d0:	68fb      	ldr	r3, [r7, #12]
    75d2:	7b1b      	ldrb	r3, [r3, #12]
    75d4:	4619      	mov	r1, r3
    75d6:	6838      	ldr	r0, [r7, #0]
    75d8:	4b1e      	ldr	r3, [pc, #120]	; (7654 <_tcc_timer_init+0xf4>)
    75da:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    75dc:	68fb      	ldr	r3, [r7, #12]
    75de:	7b5b      	ldrb	r3, [r3, #13]
    75e0:	4619      	mov	r1, r3
    75e2:	6838      	ldr	r0, [r7, #0]
    75e4:	4b1c      	ldr	r3, [pc, #112]	; (7658 <_tcc_timer_init+0xf8>)
    75e6:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    75e8:	68fb      	ldr	r3, [r7, #12]
    75ea:	691b      	ldr	r3, [r3, #16]
    75ec:	4619      	mov	r1, r3
    75ee:	6838      	ldr	r0, [r7, #0]
    75f0:	4b1a      	ldr	r3, [pc, #104]	; (765c <_tcc_timer_init+0xfc>)
    75f2:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    75f4:	68fb      	ldr	r3, [r7, #12]
    75f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75f8:	4619      	mov	r1, r3
    75fa:	6838      	ldr	r0, [r7, #0]
    75fc:	4b18      	ldr	r3, [pc, #96]	; (7660 <_tcc_timer_init+0x100>)
    75fe:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7600:	6838      	ldr	r0, [r7, #0]
    7602:	4b18      	ldr	r3, [pc, #96]	; (7664 <_tcc_timer_init+0x104>)
    7604:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7606:	6879      	ldr	r1, [r7, #4]
    7608:	6838      	ldr	r0, [r7, #0]
    760a:	4b17      	ldr	r3, [pc, #92]	; (7668 <_tcc_timer_init+0x108>)
    760c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    760e:	68fb      	ldr	r3, [r7, #12]
    7610:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7614:	4618      	mov	r0, r3
    7616:	4b15      	ldr	r3, [pc, #84]	; (766c <_tcc_timer_init+0x10c>)
    7618:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    761a:	68fb      	ldr	r3, [r7, #12]
    761c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7620:	4618      	mov	r0, r3
    7622:	4b13      	ldr	r3, [pc, #76]	; (7670 <_tcc_timer_init+0x110>)
    7624:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7626:	68fb      	ldr	r3, [r7, #12]
    7628:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    762c:	4618      	mov	r0, r3
    762e:	4b11      	ldr	r3, [pc, #68]	; (7674 <_tcc_timer_init+0x114>)
    7630:	4798      	blx	r3

	return ERR_NONE;
    7632:	2300      	movs	r3, #0
}
    7634:	4618      	mov	r0, r3
    7636:	3710      	adds	r7, #16
    7638:	46bd      	mov	sp, r7
    763a:	bd80      	pop	{r7, pc}
    763c:	00007845 	.word	0x00007845
    7640:	000072e5 	.word	0x000072e5
    7644:	00007435 	.word	0x00007435
    7648:	0000740d 	.word	0x0000740d
    764c:	000072c1 	.word	0x000072c1
    7650:	00007465 	.word	0x00007465
    7654:	0000734d 	.word	0x0000734d
    7658:	00007489 	.word	0x00007489
    765c:	000074a7 	.word	0x000074a7
    7660:	000074c5 	.word	0x000074c5
    7664:	0000736b 	.word	0x0000736b
    7668:	00007509 	.word	0x00007509
    766c:	00007241 	.word	0x00007241
    7670:	00007285 	.word	0x00007285
    7674:	00007205 	.word	0x00007205

00007678 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7678:	b580      	push	{r7, lr}
    767a:	b084      	sub	sp, #16
    767c:	af00      	add	r7, sp, #0
    767e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	68db      	ldr	r3, [r3, #12]
    7684:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7686:	68f8      	ldr	r0, [r7, #12]
    7688:	4b0a      	ldr	r3, [pc, #40]	; (76b4 <_tcc_timer_deinit+0x3c>)
    768a:	4798      	blx	r3
    768c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    768e:	68bb      	ldr	r3, [r7, #8]
    7690:	2b00      	cmp	r3, #0
    7692:	d00b      	beq.n	76ac <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7694:	68bb      	ldr	r3, [r7, #8]
    7696:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    769a:	4618      	mov	r0, r3
    769c:	4b06      	ldr	r3, [pc, #24]	; (76b8 <_tcc_timer_deinit+0x40>)
    769e:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    76a0:	68f8      	ldr	r0, [r7, #12]
    76a2:	4b06      	ldr	r3, [pc, #24]	; (76bc <_tcc_timer_deinit+0x44>)
    76a4:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    76a6:	68f8      	ldr	r0, [r7, #12]
    76a8:	4b05      	ldr	r3, [pc, #20]	; (76c0 <_tcc_timer_deinit+0x48>)
    76aa:	4798      	blx	r3
	}
}
    76ac:	bf00      	nop
    76ae:	3710      	adds	r7, #16
    76b0:	46bd      	mov	sp, r7
    76b2:	bd80      	pop	{r7, pc}
    76b4:	00007845 	.word	0x00007845
    76b8:	00007241 	.word	0x00007241
    76bc:	0000740d 	.word	0x0000740d
    76c0:	00007385 	.word	0x00007385

000076c4 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    76c4:	b580      	push	{r7, lr}
    76c6:	b082      	sub	sp, #8
    76c8:	af00      	add	r7, sp, #0
    76ca:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    76cc:	687b      	ldr	r3, [r7, #4]
    76ce:	68db      	ldr	r3, [r3, #12]
    76d0:	4618      	mov	r0, r3
    76d2:	4b03      	ldr	r3, [pc, #12]	; (76e0 <_tcc_timer_start+0x1c>)
    76d4:	4798      	blx	r3
}
    76d6:	bf00      	nop
    76d8:	3708      	adds	r7, #8
    76da:	46bd      	mov	sp, r7
    76dc:	bd80      	pop	{r7, pc}
    76de:	bf00      	nop
    76e0:	000073ad 	.word	0x000073ad

000076e4 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    76e4:	b580      	push	{r7, lr}
    76e6:	b082      	sub	sp, #8
    76e8:	af00      	add	r7, sp, #0
    76ea:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    76ec:	687b      	ldr	r3, [r7, #4]
    76ee:	68db      	ldr	r3, [r3, #12]
    76f0:	4618      	mov	r0, r3
    76f2:	4b03      	ldr	r3, [pc, #12]	; (7700 <_tcc_timer_stop+0x1c>)
    76f4:	4798      	blx	r3
}
    76f6:	bf00      	nop
    76f8:	3708      	adds	r7, #8
    76fa:	46bd      	mov	sp, r7
    76fc:	bd80      	pop	{r7, pc}
    76fe:	bf00      	nop
    7700:	0000740d 	.word	0x0000740d

00007704 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7704:	b580      	push	{r7, lr}
    7706:	b082      	sub	sp, #8
    7708:	af00      	add	r7, sp, #0
    770a:	6078      	str	r0, [r7, #4]
    770c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	68db      	ldr	r3, [r3, #12]
    7712:	6839      	ldr	r1, [r7, #0]
    7714:	4618      	mov	r0, r3
    7716:	4b03      	ldr	r3, [pc, #12]	; (7724 <_tcc_timer_set_period+0x20>)
    7718:	4798      	blx	r3
}
    771a:	bf00      	nop
    771c:	3708      	adds	r7, #8
    771e:	46bd      	mov	sp, r7
    7720:	bd80      	pop	{r7, pc}
    7722:	bf00      	nop
    7724:	000074c5 	.word	0x000074c5

00007728 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7728:	b580      	push	{r7, lr}
    772a:	b082      	sub	sp, #8
    772c:	af00      	add	r7, sp, #0
    772e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7730:	687b      	ldr	r3, [r7, #4]
    7732:	68db      	ldr	r3, [r3, #12]
    7734:	4618      	mov	r0, r3
    7736:	4b03      	ldr	r3, [pc, #12]	; (7744 <_tcc_timer_get_period+0x1c>)
    7738:	4798      	blx	r3
    773a:	4603      	mov	r3, r0
}
    773c:	4618      	mov	r0, r3
    773e:	3708      	adds	r7, #8
    7740:	46bd      	mov	sp, r7
    7742:	bd80      	pop	{r7, pc}
    7744:	000074e9 	.word	0x000074e9

00007748 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7748:	b580      	push	{r7, lr}
    774a:	b082      	sub	sp, #8
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	68db      	ldr	r3, [r3, #12]
    7754:	4618      	mov	r0, r3
    7756:	4b03      	ldr	r3, [pc, #12]	; (7764 <_tcc_timer_is_started+0x1c>)
    7758:	4798      	blx	r3
    775a:	4603      	mov	r3, r0
}
    775c:	4618      	mov	r0, r3
    775e:	3708      	adds	r7, #8
    7760:	46bd      	mov	sp, r7
    7762:	bd80      	pop	{r7, pc}
    7764:	000073d5 	.word	0x000073d5

00007768 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7768:	b480      	push	{r7}
    776a:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    776c:	4b02      	ldr	r3, [pc, #8]	; (7778 <_tcc_get_timer+0x10>)
}
    776e:	4618      	mov	r0, r3
    7770:	46bd      	mov	sp, r7
    7772:	f85d 7b04 	ldr.w	r7, [sp], #4
    7776:	4770      	bx	lr
    7778:	200000f0 	.word	0x200000f0

0000777c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    777c:	b580      	push	{r7, lr}
    777e:	b084      	sub	sp, #16
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	68db      	ldr	r3, [r3, #12]
    7788:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    778a:	68f8      	ldr	r0, [r7, #12]
    778c:	4b08      	ldr	r3, [pc, #32]	; (77b0 <_tcc_timer_set_irq+0x34>)
    778e:	4798      	blx	r3
    7790:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7792:	68bb      	ldr	r3, [r7, #8]
    7794:	2b00      	cmp	r3, #0
    7796:	d006      	beq.n	77a6 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7798:	68bb      	ldr	r3, [r7, #8]
    779a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    779e:	b2db      	uxtb	r3, r3
    77a0:	4618      	mov	r0, r3
    77a2:	4b04      	ldr	r3, [pc, #16]	; (77b4 <_tcc_timer_set_irq+0x38>)
    77a4:	4798      	blx	r3
	}
}
    77a6:	bf00      	nop
    77a8:	3710      	adds	r7, #16
    77aa:	46bd      	mov	sp, r7
    77ac:	bd80      	pop	{r7, pc}
    77ae:	bf00      	nop
    77b0:	00007845 	.word	0x00007845
    77b4:	000041c5 	.word	0x000041c5

000077b8 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    77b8:	b580      	push	{r7, lr}
    77ba:	b084      	sub	sp, #16
    77bc:	af00      	add	r7, sp, #0
    77be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    77c0:	687b      	ldr	r3, [r7, #4]
    77c2:	68db      	ldr	r3, [r3, #12]
    77c4:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    77c6:	68f8      	ldr	r0, [r7, #12]
    77c8:	4b07      	ldr	r3, [pc, #28]	; (77e8 <tcc_interrupt_handler+0x30>)
    77ca:	4798      	blx	r3
    77cc:	4603      	mov	r3, r0
    77ce:	2b00      	cmp	r3, #0
    77d0:	d006      	beq.n	77e0 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    77d2:	68f8      	ldr	r0, [r7, #12]
    77d4:	4b05      	ldr	r3, [pc, #20]	; (77ec <tcc_interrupt_handler+0x34>)
    77d6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	6878      	ldr	r0, [r7, #4]
    77de:	4798      	blx	r3
	}
}
    77e0:	bf00      	nop
    77e2:	3710      	adds	r7, #16
    77e4:	46bd      	mov	sp, r7
    77e6:	bd80      	pop	{r7, pc}
    77e8:	0000730d 	.word	0x0000730d
    77ec:	00007333 	.word	0x00007333

000077f0 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    77f0:	b580      	push	{r7, lr}
    77f2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    77f4:	4b03      	ldr	r3, [pc, #12]	; (7804 <TCC0_0_Handler+0x14>)
    77f6:	681b      	ldr	r3, [r3, #0]
    77f8:	4618      	mov	r0, r3
    77fa:	4b03      	ldr	r3, [pc, #12]	; (7808 <TCC0_0_Handler+0x18>)
    77fc:	4798      	blx	r3
}
    77fe:	bf00      	nop
    7800:	bd80      	pop	{r7, pc}
    7802:	bf00      	nop
    7804:	20000960 	.word	0x20000960
    7808:	000077b9 	.word	0x000077b9

0000780c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    780c:	b580      	push	{r7, lr}
    780e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7810:	4b03      	ldr	r3, [pc, #12]	; (7820 <TCC1_0_Handler+0x14>)
    7812:	681b      	ldr	r3, [r3, #0]
    7814:	4618      	mov	r0, r3
    7816:	4b03      	ldr	r3, [pc, #12]	; (7824 <TCC1_0_Handler+0x18>)
    7818:	4798      	blx	r3
}
    781a:	bf00      	nop
    781c:	bd80      	pop	{r7, pc}
    781e:	bf00      	nop
    7820:	20000964 	.word	0x20000964
    7824:	000077b9 	.word	0x000077b9

00007828 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7828:	b580      	push	{r7, lr}
    782a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    782c:	4b03      	ldr	r3, [pc, #12]	; (783c <TCC2_0_Handler+0x14>)
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	4618      	mov	r0, r3
    7832:	4b03      	ldr	r3, [pc, #12]	; (7840 <TCC2_0_Handler+0x18>)
    7834:	4798      	blx	r3
}
    7836:	bf00      	nop
    7838:	bd80      	pop	{r7, pc}
    783a:	bf00      	nop
    783c:	20000968 	.word	0x20000968
    7840:	000077b9 	.word	0x000077b9

00007844 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7844:	b480      	push	{r7}
    7846:	b085      	sub	sp, #20
    7848:	af00      	add	r7, sp, #0
    784a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    784c:	2300      	movs	r3, #0
    784e:	73fb      	strb	r3, [r7, #15]
    7850:	e015      	b.n	787e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7852:	7bfa      	ldrb	r2, [r7, #15]
    7854:	490f      	ldr	r1, [pc, #60]	; (7894 <_get_tcc_cfg+0x50>)
    7856:	4613      	mov	r3, r2
    7858:	005b      	lsls	r3, r3, #1
    785a:	4413      	add	r3, r2
    785c:	011b      	lsls	r3, r3, #4
    785e:	440b      	add	r3, r1
    7860:	681a      	ldr	r2, [r3, #0]
    7862:	687b      	ldr	r3, [r7, #4]
    7864:	429a      	cmp	r2, r3
    7866:	d107      	bne.n	7878 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7868:	7bfa      	ldrb	r2, [r7, #15]
    786a:	4613      	mov	r3, r2
    786c:	005b      	lsls	r3, r3, #1
    786e:	4413      	add	r3, r2
    7870:	011b      	lsls	r3, r3, #4
    7872:	4a08      	ldr	r2, [pc, #32]	; (7894 <_get_tcc_cfg+0x50>)
    7874:	4413      	add	r3, r2
    7876:	e006      	b.n	7886 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7878:	7bfb      	ldrb	r3, [r7, #15]
    787a:	3301      	adds	r3, #1
    787c:	73fb      	strb	r3, [r7, #15]
    787e:	7bfb      	ldrb	r3, [r7, #15]
    7880:	2b02      	cmp	r3, #2
    7882:	d9e6      	bls.n	7852 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7884:	2300      	movs	r3, #0
}
    7886:	4618      	mov	r0, r3
    7888:	3714      	adds	r7, #20
    788a:	46bd      	mov	sp, r7
    788c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7890:	4770      	bx	lr
    7892:	bf00      	nop
    7894:	20000060 	.word	0x20000060

00007898 <__NVIC_EnableIRQ>:
{
    7898:	b480      	push	{r7}
    789a:	b083      	sub	sp, #12
    789c:	af00      	add	r7, sp, #0
    789e:	4603      	mov	r3, r0
    78a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78a6:	2b00      	cmp	r3, #0
    78a8:	db0b      	blt.n	78c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78aa:	4909      	ldr	r1, [pc, #36]	; (78d0 <__NVIC_EnableIRQ+0x38>)
    78ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78b0:	095b      	lsrs	r3, r3, #5
    78b2:	88fa      	ldrh	r2, [r7, #6]
    78b4:	f002 021f 	and.w	r2, r2, #31
    78b8:	2001      	movs	r0, #1
    78ba:	fa00 f202 	lsl.w	r2, r0, r2
    78be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78c2:	bf00      	nop
    78c4:	370c      	adds	r7, #12
    78c6:	46bd      	mov	sp, r7
    78c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78cc:	4770      	bx	lr
    78ce:	bf00      	nop
    78d0:	e000e100 	.word	0xe000e100

000078d4 <__NVIC_DisableIRQ>:
{
    78d4:	b480      	push	{r7}
    78d6:	b083      	sub	sp, #12
    78d8:	af00      	add	r7, sp, #0
    78da:	4603      	mov	r3, r0
    78dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78e2:	2b00      	cmp	r3, #0
    78e4:	db10      	blt.n	7908 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78e6:	490b      	ldr	r1, [pc, #44]	; (7914 <__NVIC_DisableIRQ+0x40>)
    78e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78ec:	095b      	lsrs	r3, r3, #5
    78ee:	88fa      	ldrh	r2, [r7, #6]
    78f0:	f002 021f 	and.w	r2, r2, #31
    78f4:	2001      	movs	r0, #1
    78f6:	fa00 f202 	lsl.w	r2, r0, r2
    78fa:	3320      	adds	r3, #32
    78fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7904:	f3bf 8f6f 	isb	sy
}
    7908:	bf00      	nop
    790a:	370c      	adds	r7, #12
    790c:	46bd      	mov	sp, r7
    790e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7912:	4770      	bx	lr
    7914:	e000e100 	.word	0xe000e100

00007918 <__NVIC_ClearPendingIRQ>:
{
    7918:	b480      	push	{r7}
    791a:	b083      	sub	sp, #12
    791c:	af00      	add	r7, sp, #0
    791e:	4603      	mov	r3, r0
    7920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7926:	2b00      	cmp	r3, #0
    7928:	db0c      	blt.n	7944 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    792a:	4909      	ldr	r1, [pc, #36]	; (7950 <__NVIC_ClearPendingIRQ+0x38>)
    792c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7930:	095b      	lsrs	r3, r3, #5
    7932:	88fa      	ldrh	r2, [r7, #6]
    7934:	f002 021f 	and.w	r2, r2, #31
    7938:	2001      	movs	r0, #1
    793a:	fa00 f202 	lsl.w	r2, r0, r2
    793e:	3360      	adds	r3, #96	; 0x60
    7940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7944:	bf00      	nop
    7946:	370c      	adds	r7, #12
    7948:	46bd      	mov	sp, r7
    794a:	f85d 7b04 	ldr.w	r7, [sp], #4
    794e:	4770      	bx	lr
    7950:	e000e100 	.word	0xe000e100

00007954 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7954:	b480      	push	{r7}
    7956:	b083      	sub	sp, #12
    7958:	af00      	add	r7, sp, #0
    795a:	6078      	str	r0, [r7, #4]
    795c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    795e:	bf00      	nop
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	691a      	ldr	r2, [r3, #16]
    7964:	683b      	ldr	r3, [r7, #0]
    7966:	4013      	ands	r3, r2
    7968:	2b00      	cmp	r3, #0
    796a:	d1f9      	bne.n	7960 <hri_tc_wait_for_sync+0xc>
	};
}
    796c:	bf00      	nop
    796e:	370c      	adds	r7, #12
    7970:	46bd      	mov	sp, r7
    7972:	f85d 7b04 	ldr.w	r7, [sp], #4
    7976:	4770      	bx	lr

00007978 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7978:	b480      	push	{r7}
    797a:	b083      	sub	sp, #12
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	691a      	ldr	r2, [r3, #16]
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	4013      	ands	r3, r2
    798a:	2b00      	cmp	r3, #0
    798c:	bf14      	ite	ne
    798e:	2301      	movne	r3, #1
    7990:	2300      	moveq	r3, #0
    7992:	b2db      	uxtb	r3, r3
}
    7994:	4618      	mov	r0, r3
    7996:	370c      	adds	r7, #12
    7998:	46bd      	mov	sp, r7
    799a:	f85d 7b04 	ldr.w	r7, [sp], #4
    799e:	4770      	bx	lr

000079a0 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    79a0:	b480      	push	{r7}
    79a2:	b083      	sub	sp, #12
    79a4:	af00      	add	r7, sp, #0
    79a6:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	7a9b      	ldrb	r3, [r3, #10]
    79ac:	b2db      	uxtb	r3, r3
    79ae:	f003 0301 	and.w	r3, r3, #1
    79b2:	2b00      	cmp	r3, #0
    79b4:	bf14      	ite	ne
    79b6:	2301      	movne	r3, #1
    79b8:	2300      	moveq	r3, #0
    79ba:	b2db      	uxtb	r3, r3
}
    79bc:	4618      	mov	r0, r3
    79be:	370c      	adds	r7, #12
    79c0:	46bd      	mov	sp, r7
    79c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c6:	4770      	bx	lr

000079c8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    79c8:	b480      	push	{r7}
    79ca:	b083      	sub	sp, #12
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	2201      	movs	r2, #1
    79d4:	729a      	strb	r2, [r3, #10]
}
    79d6:	bf00      	nop
    79d8:	370c      	adds	r7, #12
    79da:	46bd      	mov	sp, r7
    79dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e0:	4770      	bx	lr

000079e2 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    79e2:	b480      	push	{r7}
    79e4:	b083      	sub	sp, #12
    79e6:	af00      	add	r7, sp, #0
    79e8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	2202      	movs	r2, #2
    79ee:	729a      	strb	r2, [r3, #10]
}
    79f0:	bf00      	nop
    79f2:	370c      	adds	r7, #12
    79f4:	46bd      	mov	sp, r7
    79f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79fa:	4770      	bx	lr

000079fc <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    79fc:	b480      	push	{r7}
    79fe:	b083      	sub	sp, #12
    7a00:	af00      	add	r7, sp, #0
    7a02:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	2201      	movs	r2, #1
    7a08:	725a      	strb	r2, [r3, #9]
}
    7a0a:	bf00      	nop
    7a0c:	370c      	adds	r7, #12
    7a0e:	46bd      	mov	sp, r7
    7a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a14:	4770      	bx	lr

00007a16 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7a16:	b480      	push	{r7}
    7a18:	b083      	sub	sp, #12
    7a1a:	af00      	add	r7, sp, #0
    7a1c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7a1e:	687b      	ldr	r3, [r7, #4]
    7a20:	7a5b      	ldrb	r3, [r3, #9]
    7a22:	b2db      	uxtb	r3, r3
    7a24:	085b      	lsrs	r3, r3, #1
    7a26:	f003 0301 	and.w	r3, r3, #1
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	bf14      	ite	ne
    7a2e:	2301      	movne	r3, #1
    7a30:	2300      	moveq	r3, #0
    7a32:	b2db      	uxtb	r3, r3
}
    7a34:	4618      	mov	r0, r3
    7a36:	370c      	adds	r7, #12
    7a38:	46bd      	mov	sp, r7
    7a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a3e:	4770      	bx	lr

00007a40 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7a40:	b580      	push	{r7, lr}
    7a42:	b082      	sub	sp, #8
    7a44:	af00      	add	r7, sp, #0
    7a46:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	681b      	ldr	r3, [r3, #0]
    7a4c:	f043 0201 	orr.w	r2, r3, #1
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7a54:	2101      	movs	r1, #1
    7a56:	6878      	ldr	r0, [r7, #4]
    7a58:	4b02      	ldr	r3, [pc, #8]	; (7a64 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7a5a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a5c:	bf00      	nop
    7a5e:	3708      	adds	r7, #8
    7a60:	46bd      	mov	sp, r7
    7a62:	bd80      	pop	{r7, pc}
    7a64:	00007955 	.word	0x00007955

00007a68 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a68:	b580      	push	{r7, lr}
    7a6a:	b082      	sub	sp, #8
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	f043 0202 	orr.w	r2, r3, #2
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a7c:	2103      	movs	r1, #3
    7a7e:	6878      	ldr	r0, [r7, #4]
    7a80:	4b02      	ldr	r3, [pc, #8]	; (7a8c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7a82:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a84:	bf00      	nop
    7a86:	3708      	adds	r7, #8
    7a88:	46bd      	mov	sp, r7
    7a8a:	bd80      	pop	{r7, pc}
    7a8c:	00007955 	.word	0x00007955

00007a90 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7a90:	b580      	push	{r7, lr}
    7a92:	b084      	sub	sp, #16
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a98:	2103      	movs	r1, #3
    7a9a:	6878      	ldr	r0, [r7, #4]
    7a9c:	4b09      	ldr	r3, [pc, #36]	; (7ac4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7a9e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	681b      	ldr	r3, [r3, #0]
    7aa4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7aa6:	68fb      	ldr	r3, [r7, #12]
    7aa8:	085b      	lsrs	r3, r3, #1
    7aaa:	f003 0301 	and.w	r3, r3, #1
    7aae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ab0:	68fb      	ldr	r3, [r7, #12]
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	bf14      	ite	ne
    7ab6:	2301      	movne	r3, #1
    7ab8:	2300      	moveq	r3, #0
    7aba:	b2db      	uxtb	r3, r3
}
    7abc:	4618      	mov	r0, r3
    7abe:	3710      	adds	r7, #16
    7ac0:	46bd      	mov	sp, r7
    7ac2:	bd80      	pop	{r7, pc}
    7ac4:	00007955 	.word	0x00007955

00007ac8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	b082      	sub	sp, #8
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	f023 0202 	bic.w	r2, r3, #2
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7adc:	2103      	movs	r1, #3
    7ade:	6878      	ldr	r0, [r7, #4]
    7ae0:	4b02      	ldr	r3, [pc, #8]	; (7aec <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7ae2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ae4:	bf00      	nop
    7ae6:	3708      	adds	r7, #8
    7ae8:	46bd      	mov	sp, r7
    7aea:	bd80      	pop	{r7, pc}
    7aec:	00007955 	.word	0x00007955

00007af0 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7af0:	b480      	push	{r7}
    7af2:	b085      	sub	sp, #20
    7af4:	af00      	add	r7, sp, #0
    7af6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	681b      	ldr	r3, [r3, #0]
    7afc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7afe:	68fb      	ldr	r3, [r7, #12]
    7b00:	089b      	lsrs	r3, r3, #2
    7b02:	f003 0303 	and.w	r3, r3, #3
    7b06:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b08:	68fb      	ldr	r3, [r7, #12]
}
    7b0a:	4618      	mov	r0, r3
    7b0c:	3714      	adds	r7, #20
    7b0e:	46bd      	mov	sp, r7
    7b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b14:	4770      	bx	lr
	...

00007b18 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7b18:	b580      	push	{r7, lr}
    7b1a:	b084      	sub	sp, #16
    7b1c:	af00      	add	r7, sp, #0
    7b1e:	6078      	str	r0, [r7, #4]
    7b20:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b22:	2103      	movs	r1, #3
    7b24:	6878      	ldr	r0, [r7, #4]
    7b26:	4b07      	ldr	r3, [pc, #28]	; (7b44 <hri_tc_get_CTRLA_reg+0x2c>)
    7b28:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7b2a:	687b      	ldr	r3, [r7, #4]
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b30:	68fa      	ldr	r2, [r7, #12]
    7b32:	683b      	ldr	r3, [r7, #0]
    7b34:	4013      	ands	r3, r2
    7b36:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b38:	68fb      	ldr	r3, [r7, #12]
}
    7b3a:	4618      	mov	r0, r3
    7b3c:	3710      	adds	r7, #16
    7b3e:	46bd      	mov	sp, r7
    7b40:	bd80      	pop	{r7, pc}
    7b42:	bf00      	nop
    7b44:	00007955 	.word	0x00007955

00007b48 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7b48:	b580      	push	{r7, lr}
    7b4a:	b082      	sub	sp, #8
    7b4c:	af00      	add	r7, sp, #0
    7b4e:	6078      	str	r0, [r7, #4]
    7b50:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	683a      	ldr	r2, [r7, #0]
    7b56:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b58:	2103      	movs	r1, #3
    7b5a:	6878      	ldr	r0, [r7, #4]
    7b5c:	4b02      	ldr	r3, [pc, #8]	; (7b68 <hri_tc_write_CTRLA_reg+0x20>)
    7b5e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b60:	bf00      	nop
    7b62:	3708      	adds	r7, #8
    7b64:	46bd      	mov	sp, r7
    7b66:	bd80      	pop	{r7, pc}
    7b68:	00007955 	.word	0x00007955

00007b6c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7b6c:	b480      	push	{r7}
    7b6e:	b083      	sub	sp, #12
    7b70:	af00      	add	r7, sp, #0
    7b72:	6078      	str	r0, [r7, #4]
    7b74:	460b      	mov	r3, r1
    7b76:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	887a      	ldrh	r2, [r7, #2]
    7b7c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b7e:	bf00      	nop
    7b80:	370c      	adds	r7, #12
    7b82:	46bd      	mov	sp, r7
    7b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b88:	4770      	bx	lr

00007b8a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7b8a:	b480      	push	{r7}
    7b8c:	b083      	sub	sp, #12
    7b8e:	af00      	add	r7, sp, #0
    7b90:	6078      	str	r0, [r7, #4]
    7b92:	460b      	mov	r3, r1
    7b94:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	78fa      	ldrb	r2, [r7, #3]
    7b9a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b9c:	bf00      	nop
    7b9e:	370c      	adds	r7, #12
    7ba0:	46bd      	mov	sp, r7
    7ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba6:	4770      	bx	lr

00007ba8 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7ba8:	b480      	push	{r7}
    7baa:	b083      	sub	sp, #12
    7bac:	af00      	add	r7, sp, #0
    7bae:	6078      	str	r0, [r7, #4]
    7bb0:	460b      	mov	r3, r1
    7bb2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	78fa      	ldrb	r2, [r7, #3]
    7bb8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7bba:	bf00      	nop
    7bbc:	370c      	adds	r7, #12
    7bbe:	46bd      	mov	sp, r7
    7bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc4:	4770      	bx	lr
	...

00007bc8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7bc8:	b580      	push	{r7, lr}
    7bca:	b082      	sub	sp, #8
    7bcc:	af00      	add	r7, sp, #0
    7bce:	6078      	str	r0, [r7, #4]
    7bd0:	460b      	mov	r3, r1
    7bd2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	78fa      	ldrb	r2, [r7, #3]
    7bd8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7bda:	2120      	movs	r1, #32
    7bdc:	6878      	ldr	r0, [r7, #4]
    7bde:	4b03      	ldr	r3, [pc, #12]	; (7bec <hri_tccount8_write_PER_reg+0x24>)
    7be0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7be2:	bf00      	nop
    7be4:	3708      	adds	r7, #8
    7be6:	46bd      	mov	sp, r7
    7be8:	bd80      	pop	{r7, pc}
    7bea:	bf00      	nop
    7bec:	00007955 	.word	0x00007955

00007bf0 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	b082      	sub	sp, #8
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7bf8:	2120      	movs	r1, #32
    7bfa:	6878      	ldr	r0, [r7, #4]
    7bfc:	4b04      	ldr	r3, [pc, #16]	; (7c10 <hri_tccount8_read_PER_reg+0x20>)
    7bfe:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	7edb      	ldrb	r3, [r3, #27]
    7c04:	b2db      	uxtb	r3, r3
}
    7c06:	4618      	mov	r0, r3
    7c08:	3708      	adds	r7, #8
    7c0a:	46bd      	mov	sp, r7
    7c0c:	bd80      	pop	{r7, pc}
    7c0e:	bf00      	nop
    7c10:	00007955 	.word	0x00007955

00007c14 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
    7c1a:	6078      	str	r0, [r7, #4]
    7c1c:	460b      	mov	r3, r1
    7c1e:	70fb      	strb	r3, [r7, #3]
    7c20:	4613      	mov	r3, r2
    7c22:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7c24:	78fb      	ldrb	r3, [r7, #3]
    7c26:	687a      	ldr	r2, [r7, #4]
    7c28:	4413      	add	r3, r2
    7c2a:	78ba      	ldrb	r2, [r7, #2]
    7c2c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c2e:	21c0      	movs	r1, #192	; 0xc0
    7c30:	6878      	ldr	r0, [r7, #4]
    7c32:	4b03      	ldr	r3, [pc, #12]	; (7c40 <hri_tccount8_write_CC_reg+0x2c>)
    7c34:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c36:	bf00      	nop
    7c38:	3708      	adds	r7, #8
    7c3a:	46bd      	mov	sp, r7
    7c3c:	bd80      	pop	{r7, pc}
    7c3e:	bf00      	nop
    7c40:	00007955 	.word	0x00007955

00007c44 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	b082      	sub	sp, #8
    7c48:	af00      	add	r7, sp, #0
    7c4a:	6078      	str	r0, [r7, #4]
    7c4c:	460b      	mov	r3, r1
    7c4e:	70fb      	strb	r3, [r7, #3]
    7c50:	4613      	mov	r3, r2
    7c52:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7c54:	78fb      	ldrb	r3, [r7, #3]
    7c56:	687a      	ldr	r2, [r7, #4]
    7c58:	330c      	adds	r3, #12
    7c5a:	005b      	lsls	r3, r3, #1
    7c5c:	4413      	add	r3, r2
    7c5e:	883a      	ldrh	r2, [r7, #0]
    7c60:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c62:	21c0      	movs	r1, #192	; 0xc0
    7c64:	6878      	ldr	r0, [r7, #4]
    7c66:	4b03      	ldr	r3, [pc, #12]	; (7c74 <hri_tccount16_write_CC_reg+0x30>)
    7c68:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c6a:	bf00      	nop
    7c6c:	3708      	adds	r7, #8
    7c6e:	46bd      	mov	sp, r7
    7c70:	bd80      	pop	{r7, pc}
    7c72:	bf00      	nop
    7c74:	00007955 	.word	0x00007955

00007c78 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7c78:	b580      	push	{r7, lr}
    7c7a:	b082      	sub	sp, #8
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	6078      	str	r0, [r7, #4]
    7c80:	460b      	mov	r3, r1
    7c82:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c84:	21c0      	movs	r1, #192	; 0xc0
    7c86:	6878      	ldr	r0, [r7, #4]
    7c88:	4b06      	ldr	r3, [pc, #24]	; (7ca4 <hri_tccount16_read_CC_reg+0x2c>)
    7c8a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7c8c:	78fb      	ldrb	r3, [r7, #3]
    7c8e:	687a      	ldr	r2, [r7, #4]
    7c90:	330c      	adds	r3, #12
    7c92:	005b      	lsls	r3, r3, #1
    7c94:	4413      	add	r3, r2
    7c96:	889b      	ldrh	r3, [r3, #4]
    7c98:	b29b      	uxth	r3, r3
}
    7c9a:	4618      	mov	r0, r3
    7c9c:	3708      	adds	r7, #8
    7c9e:	46bd      	mov	sp, r7
    7ca0:	bd80      	pop	{r7, pc}
    7ca2:	bf00      	nop
    7ca4:	00007955 	.word	0x00007955

00007ca8 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7ca8:	b580      	push	{r7, lr}
    7caa:	b084      	sub	sp, #16
    7cac:	af00      	add	r7, sp, #0
    7cae:	60f8      	str	r0, [r7, #12]
    7cb0:	460b      	mov	r3, r1
    7cb2:	607a      	str	r2, [r7, #4]
    7cb4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7cb6:	7afb      	ldrb	r3, [r7, #11]
    7cb8:	68fa      	ldr	r2, [r7, #12]
    7cba:	3306      	adds	r3, #6
    7cbc:	009b      	lsls	r3, r3, #2
    7cbe:	4413      	add	r3, r2
    7cc0:	687a      	ldr	r2, [r7, #4]
    7cc2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cc4:	21c0      	movs	r1, #192	; 0xc0
    7cc6:	68f8      	ldr	r0, [r7, #12]
    7cc8:	4b02      	ldr	r3, [pc, #8]	; (7cd4 <hri_tccount32_write_CC_reg+0x2c>)
    7cca:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ccc:	bf00      	nop
    7cce:	3710      	adds	r7, #16
    7cd0:	46bd      	mov	sp, r7
    7cd2:	bd80      	pop	{r7, pc}
    7cd4:	00007955 	.word	0x00007955

00007cd8 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	b082      	sub	sp, #8
    7cdc:	af00      	add	r7, sp, #0
    7cde:	6078      	str	r0, [r7, #4]
    7ce0:	460b      	mov	r3, r1
    7ce2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7ce4:	21c0      	movs	r1, #192	; 0xc0
    7ce6:	6878      	ldr	r0, [r7, #4]
    7ce8:	4b05      	ldr	r3, [pc, #20]	; (7d00 <hri_tccount32_read_CC_reg+0x28>)
    7cea:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7cec:	78fb      	ldrb	r3, [r7, #3]
    7cee:	687a      	ldr	r2, [r7, #4]
    7cf0:	3306      	adds	r3, #6
    7cf2:	009b      	lsls	r3, r3, #2
    7cf4:	4413      	add	r3, r2
    7cf6:	685b      	ldr	r3, [r3, #4]
}
    7cf8:	4618      	mov	r0, r3
    7cfa:	3708      	adds	r7, #8
    7cfc:	46bd      	mov	sp, r7
    7cfe:	bd80      	pop	{r7, pc}
    7d00:	00007955 	.word	0x00007955

00007d04 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d04:	b580      	push	{r7, lr}
    7d06:	b084      	sub	sp, #16
    7d08:	af00      	add	r7, sp, #0
    7d0a:	6078      	str	r0, [r7, #4]
    7d0c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7d0e:	6838      	ldr	r0, [r7, #0]
    7d10:	4b93      	ldr	r3, [pc, #588]	; (7f60 <_tc_timer_init+0x25c>)
    7d12:	4798      	blx	r3
    7d14:	4603      	mov	r3, r0
    7d16:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	683a      	ldr	r2, [r7, #0]
    7d1c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7d1e:	22a4      	movs	r2, #164	; 0xa4
    7d20:	4990      	ldr	r1, [pc, #576]	; (7f64 <_tc_timer_init+0x260>)
    7d22:	2001      	movs	r0, #1
    7d24:	4b90      	ldr	r3, [pc, #576]	; (7f68 <_tc_timer_init+0x264>)
    7d26:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d28:	2101      	movs	r1, #1
    7d2a:	6838      	ldr	r0, [r7, #0]
    7d2c:	4b8f      	ldr	r3, [pc, #572]	; (7f6c <_tc_timer_init+0x268>)
    7d2e:	4798      	blx	r3
    7d30:	4603      	mov	r3, r0
    7d32:	f083 0301 	eor.w	r3, r3, #1
    7d36:	b2db      	uxtb	r3, r3
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d011      	beq.n	7d60 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d3c:	2102      	movs	r1, #2
    7d3e:	6838      	ldr	r0, [r7, #0]
    7d40:	4b8b      	ldr	r3, [pc, #556]	; (7f70 <_tc_timer_init+0x26c>)
    7d42:	4798      	blx	r3
    7d44:	4603      	mov	r3, r0
    7d46:	2b00      	cmp	r3, #0
    7d48:	d006      	beq.n	7d58 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d4a:	6838      	ldr	r0, [r7, #0]
    7d4c:	4b89      	ldr	r3, [pc, #548]	; (7f74 <_tc_timer_init+0x270>)
    7d4e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d50:	2102      	movs	r1, #2
    7d52:	6838      	ldr	r0, [r7, #0]
    7d54:	4b88      	ldr	r3, [pc, #544]	; (7f78 <_tc_timer_init+0x274>)
    7d56:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d58:	2101      	movs	r1, #1
    7d5a:	6838      	ldr	r0, [r7, #0]
    7d5c:	4b87      	ldr	r3, [pc, #540]	; (7f7c <_tc_timer_init+0x278>)
    7d5e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d60:	2101      	movs	r1, #1
    7d62:	6838      	ldr	r0, [r7, #0]
    7d64:	4b84      	ldr	r3, [pc, #528]	; (7f78 <_tc_timer_init+0x274>)
    7d66:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d68:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d6c:	4984      	ldr	r1, [pc, #528]	; (7f80 <_tc_timer_init+0x27c>)
    7d6e:	4613      	mov	r3, r2
    7d70:	009b      	lsls	r3, r3, #2
    7d72:	4413      	add	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	440b      	add	r3, r1
    7d78:	3304      	adds	r3, #4
    7d7a:	681b      	ldr	r3, [r3, #0]
    7d7c:	4619      	mov	r1, r3
    7d7e:	6838      	ldr	r0, [r7, #0]
    7d80:	4b7e      	ldr	r3, [pc, #504]	; (7f7c <_tc_timer_init+0x278>)
    7d82:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d84:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d88:	497d      	ldr	r1, [pc, #500]	; (7f80 <_tc_timer_init+0x27c>)
    7d8a:	4613      	mov	r3, r2
    7d8c:	009b      	lsls	r3, r3, #2
    7d8e:	4413      	add	r3, r2
    7d90:	009b      	lsls	r3, r3, #2
    7d92:	440b      	add	r3, r1
    7d94:	330a      	adds	r3, #10
    7d96:	781b      	ldrb	r3, [r3, #0]
    7d98:	4619      	mov	r1, r3
    7d9a:	6838      	ldr	r0, [r7, #0]
    7d9c:	4b79      	ldr	r3, [pc, #484]	; (7f84 <_tc_timer_init+0x280>)
    7d9e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7da0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7da4:	4976      	ldr	r1, [pc, #472]	; (7f80 <_tc_timer_init+0x27c>)
    7da6:	4613      	mov	r3, r2
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	4413      	add	r3, r2
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	440b      	add	r3, r1
    7db0:	3308      	adds	r3, #8
    7db2:	881b      	ldrh	r3, [r3, #0]
    7db4:	4619      	mov	r1, r3
    7db6:	6838      	ldr	r0, [r7, #0]
    7db8:	4b73      	ldr	r3, [pc, #460]	; (7f88 <_tc_timer_init+0x284>)
    7dba:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7dbc:	2101      	movs	r1, #1
    7dbe:	6838      	ldr	r0, [r7, #0]
    7dc0:	4b72      	ldr	r3, [pc, #456]	; (7f8c <_tc_timer_init+0x288>)
    7dc2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7dc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dc8:	496d      	ldr	r1, [pc, #436]	; (7f80 <_tc_timer_init+0x27c>)
    7dca:	4613      	mov	r3, r2
    7dcc:	009b      	lsls	r3, r3, #2
    7dce:	4413      	add	r3, r2
    7dd0:	009b      	lsls	r3, r3, #2
    7dd2:	440b      	add	r3, r1
    7dd4:	3304      	adds	r3, #4
    7dd6:	681b      	ldr	r3, [r3, #0]
    7dd8:	f003 030c 	and.w	r3, r3, #12
    7ddc:	2b08      	cmp	r3, #8
    7dde:	d11e      	bne.n	7e1e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7de0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7de4:	4966      	ldr	r1, [pc, #408]	; (7f80 <_tc_timer_init+0x27c>)
    7de6:	4613      	mov	r3, r2
    7de8:	009b      	lsls	r3, r3, #2
    7dea:	4413      	add	r3, r2
    7dec:	009b      	lsls	r3, r3, #2
    7dee:	440b      	add	r3, r1
    7df0:	330c      	adds	r3, #12
    7df2:	681b      	ldr	r3, [r3, #0]
    7df4:	461a      	mov	r2, r3
    7df6:	2100      	movs	r1, #0
    7df8:	6838      	ldr	r0, [r7, #0]
    7dfa:	4b65      	ldr	r3, [pc, #404]	; (7f90 <_tc_timer_init+0x28c>)
    7dfc:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7dfe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e02:	495f      	ldr	r1, [pc, #380]	; (7f80 <_tc_timer_init+0x27c>)
    7e04:	4613      	mov	r3, r2
    7e06:	009b      	lsls	r3, r3, #2
    7e08:	4413      	add	r3, r2
    7e0a:	009b      	lsls	r3, r3, #2
    7e0c:	440b      	add	r3, r1
    7e0e:	3310      	adds	r3, #16
    7e10:	681b      	ldr	r3, [r3, #0]
    7e12:	461a      	mov	r2, r3
    7e14:	2101      	movs	r1, #1
    7e16:	6838      	ldr	r0, [r7, #0]
    7e18:	4b5d      	ldr	r3, [pc, #372]	; (7f90 <_tc_timer_init+0x28c>)
    7e1a:	4798      	blx	r3
    7e1c:	e06a      	b.n	7ef4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e22:	4957      	ldr	r1, [pc, #348]	; (7f80 <_tc_timer_init+0x27c>)
    7e24:	4613      	mov	r3, r2
    7e26:	009b      	lsls	r3, r3, #2
    7e28:	4413      	add	r3, r2
    7e2a:	009b      	lsls	r3, r3, #2
    7e2c:	440b      	add	r3, r1
    7e2e:	3304      	adds	r3, #4
    7e30:	681b      	ldr	r3, [r3, #0]
    7e32:	f003 030c 	and.w	r3, r3, #12
    7e36:	2b00      	cmp	r3, #0
    7e38:	d120      	bne.n	7e7c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e3e:	4950      	ldr	r1, [pc, #320]	; (7f80 <_tc_timer_init+0x27c>)
    7e40:	4613      	mov	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	4413      	add	r3, r2
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	440b      	add	r3, r1
    7e4a:	330c      	adds	r3, #12
    7e4c:	681b      	ldr	r3, [r3, #0]
    7e4e:	b29b      	uxth	r3, r3
    7e50:	461a      	mov	r2, r3
    7e52:	2100      	movs	r1, #0
    7e54:	6838      	ldr	r0, [r7, #0]
    7e56:	4b4f      	ldr	r3, [pc, #316]	; (7f94 <_tc_timer_init+0x290>)
    7e58:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e5e:	4948      	ldr	r1, [pc, #288]	; (7f80 <_tc_timer_init+0x27c>)
    7e60:	4613      	mov	r3, r2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	4413      	add	r3, r2
    7e66:	009b      	lsls	r3, r3, #2
    7e68:	440b      	add	r3, r1
    7e6a:	3310      	adds	r3, #16
    7e6c:	681b      	ldr	r3, [r3, #0]
    7e6e:	b29b      	uxth	r3, r3
    7e70:	461a      	mov	r2, r3
    7e72:	2101      	movs	r1, #1
    7e74:	6838      	ldr	r0, [r7, #0]
    7e76:	4b47      	ldr	r3, [pc, #284]	; (7f94 <_tc_timer_init+0x290>)
    7e78:	4798      	blx	r3
    7e7a:	e03b      	b.n	7ef4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7e7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e80:	493f      	ldr	r1, [pc, #252]	; (7f80 <_tc_timer_init+0x27c>)
    7e82:	4613      	mov	r3, r2
    7e84:	009b      	lsls	r3, r3, #2
    7e86:	4413      	add	r3, r2
    7e88:	009b      	lsls	r3, r3, #2
    7e8a:	440b      	add	r3, r1
    7e8c:	3304      	adds	r3, #4
    7e8e:	681b      	ldr	r3, [r3, #0]
    7e90:	f003 030c 	and.w	r3, r3, #12
    7e94:	2b04      	cmp	r3, #4
    7e96:	d12d      	bne.n	7ef4 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7e98:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e9c:	4938      	ldr	r1, [pc, #224]	; (7f80 <_tc_timer_init+0x27c>)
    7e9e:	4613      	mov	r3, r2
    7ea0:	009b      	lsls	r3, r3, #2
    7ea2:	4413      	add	r3, r2
    7ea4:	009b      	lsls	r3, r3, #2
    7ea6:	440b      	add	r3, r1
    7ea8:	330c      	adds	r3, #12
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	b2db      	uxtb	r3, r3
    7eae:	461a      	mov	r2, r3
    7eb0:	2100      	movs	r1, #0
    7eb2:	6838      	ldr	r0, [r7, #0]
    7eb4:	4b38      	ldr	r3, [pc, #224]	; (7f98 <_tc_timer_init+0x294>)
    7eb6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7eb8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ebc:	4930      	ldr	r1, [pc, #192]	; (7f80 <_tc_timer_init+0x27c>)
    7ebe:	4613      	mov	r3, r2
    7ec0:	009b      	lsls	r3, r3, #2
    7ec2:	4413      	add	r3, r2
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	440b      	add	r3, r1
    7ec8:	3310      	adds	r3, #16
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	b2db      	uxtb	r3, r3
    7ece:	461a      	mov	r2, r3
    7ed0:	2101      	movs	r1, #1
    7ed2:	6838      	ldr	r0, [r7, #0]
    7ed4:	4b30      	ldr	r3, [pc, #192]	; (7f98 <_tc_timer_init+0x294>)
    7ed6:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ed8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7edc:	4928      	ldr	r1, [pc, #160]	; (7f80 <_tc_timer_init+0x27c>)
    7ede:	4613      	mov	r3, r2
    7ee0:	009b      	lsls	r3, r3, #2
    7ee2:	4413      	add	r3, r2
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	440b      	add	r3, r1
    7ee8:	330b      	adds	r3, #11
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	4619      	mov	r1, r3
    7eee:	6838      	ldr	r0, [r7, #0]
    7ef0:	4b2a      	ldr	r3, [pc, #168]	; (7f9c <_tc_timer_init+0x298>)
    7ef2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7ef4:	6838      	ldr	r0, [r7, #0]
    7ef6:	4b2a      	ldr	r3, [pc, #168]	; (7fa0 <_tc_timer_init+0x29c>)
    7ef8:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7efa:	6879      	ldr	r1, [r7, #4]
    7efc:	6838      	ldr	r0, [r7, #0]
    7efe:	4b29      	ldr	r3, [pc, #164]	; (7fa4 <_tc_timer_init+0x2a0>)
    7f00:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7f02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f06:	491e      	ldr	r1, [pc, #120]	; (7f80 <_tc_timer_init+0x27c>)
    7f08:	4613      	mov	r3, r2
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	4413      	add	r3, r2
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	440b      	add	r3, r1
    7f12:	3302      	adds	r3, #2
    7f14:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f18:	4618      	mov	r0, r3
    7f1a:	4b23      	ldr	r3, [pc, #140]	; (7fa8 <_tc_timer_init+0x2a4>)
    7f1c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7f1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f22:	4917      	ldr	r1, [pc, #92]	; (7f80 <_tc_timer_init+0x27c>)
    7f24:	4613      	mov	r3, r2
    7f26:	009b      	lsls	r3, r3, #2
    7f28:	4413      	add	r3, r2
    7f2a:	009b      	lsls	r3, r3, #2
    7f2c:	440b      	add	r3, r1
    7f2e:	3302      	adds	r3, #2
    7f30:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f34:	4618      	mov	r0, r3
    7f36:	4b1d      	ldr	r3, [pc, #116]	; (7fac <_tc_timer_init+0x2a8>)
    7f38:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7f3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f3e:	4910      	ldr	r1, [pc, #64]	; (7f80 <_tc_timer_init+0x27c>)
    7f40:	4613      	mov	r3, r2
    7f42:	009b      	lsls	r3, r3, #2
    7f44:	4413      	add	r3, r2
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	440b      	add	r3, r1
    7f4a:	3302      	adds	r3, #2
    7f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f50:	4618      	mov	r0, r3
    7f52:	4b17      	ldr	r3, [pc, #92]	; (7fb0 <_tc_timer_init+0x2ac>)
    7f54:	4798      	blx	r3

	return ERR_NONE;
    7f56:	2300      	movs	r3, #0
}
    7f58:	4618      	mov	r0, r3
    7f5a:	3710      	adds	r7, #16
    7f5c:	46bd      	mov	sp, r7
    7f5e:	bd80      	pop	{r7, pc}
    7f60:	00008595 	.word	0x00008595
    7f64:	0000f310 	.word	0x0000f310
    7f68:	0000397d 	.word	0x0000397d
    7f6c:	00007979 	.word	0x00007979
    7f70:	00007b19 	.word	0x00007b19
    7f74:	00007ac9 	.word	0x00007ac9
    7f78:	00007955 	.word	0x00007955
    7f7c:	00007b49 	.word	0x00007b49
    7f80:	20000110 	.word	0x20000110
    7f84:	00007ba9 	.word	0x00007ba9
    7f88:	00007b6d 	.word	0x00007b6d
    7f8c:	00007b8b 	.word	0x00007b8b
    7f90:	00007ca9 	.word	0x00007ca9
    7f94:	00007c45 	.word	0x00007c45
    7f98:	00007c15 	.word	0x00007c15
    7f9c:	00007bc9 	.word	0x00007bc9
    7fa0:	000079fd 	.word	0x000079fd
    7fa4:	000085fd 	.word	0x000085fd
    7fa8:	000078d5 	.word	0x000078d5
    7fac:	00007919 	.word	0x00007919
    7fb0:	00007899 	.word	0x00007899

00007fb4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b084      	sub	sp, #16
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
    7fbc:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7fbe:	6838      	ldr	r0, [r7, #0]
    7fc0:	4b73      	ldr	r3, [pc, #460]	; (8190 <_pwm_init+0x1dc>)
    7fc2:	4798      	blx	r3
    7fc4:	4603      	mov	r3, r0
    7fc6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	683a      	ldr	r2, [r7, #0]
    7fcc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7fce:	2101      	movs	r1, #1
    7fd0:	6838      	ldr	r0, [r7, #0]
    7fd2:	4b70      	ldr	r3, [pc, #448]	; (8194 <_pwm_init+0x1e0>)
    7fd4:	4798      	blx	r3
    7fd6:	4603      	mov	r3, r0
    7fd8:	f083 0301 	eor.w	r3, r3, #1
    7fdc:	b2db      	uxtb	r3, r3
    7fde:	2b00      	cmp	r3, #0
    7fe0:	d011      	beq.n	8006 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7fe2:	2102      	movs	r1, #2
    7fe4:	6838      	ldr	r0, [r7, #0]
    7fe6:	4b6c      	ldr	r3, [pc, #432]	; (8198 <_pwm_init+0x1e4>)
    7fe8:	4798      	blx	r3
    7fea:	4603      	mov	r3, r0
    7fec:	2b00      	cmp	r3, #0
    7fee:	d006      	beq.n	7ffe <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7ff0:	6838      	ldr	r0, [r7, #0]
    7ff2:	4b6a      	ldr	r3, [pc, #424]	; (819c <_pwm_init+0x1e8>)
    7ff4:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7ff6:	2102      	movs	r1, #2
    7ff8:	6838      	ldr	r0, [r7, #0]
    7ffa:	4b69      	ldr	r3, [pc, #420]	; (81a0 <_pwm_init+0x1ec>)
    7ffc:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7ffe:	2101      	movs	r1, #1
    8000:	6838      	ldr	r0, [r7, #0]
    8002:	4b68      	ldr	r3, [pc, #416]	; (81a4 <_pwm_init+0x1f0>)
    8004:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8006:	2101      	movs	r1, #1
    8008:	6838      	ldr	r0, [r7, #0]
    800a:	4b65      	ldr	r3, [pc, #404]	; (81a0 <_pwm_init+0x1ec>)
    800c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    800e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8012:	4965      	ldr	r1, [pc, #404]	; (81a8 <_pwm_init+0x1f4>)
    8014:	4613      	mov	r3, r2
    8016:	009b      	lsls	r3, r3, #2
    8018:	4413      	add	r3, r2
    801a:	009b      	lsls	r3, r3, #2
    801c:	440b      	add	r3, r1
    801e:	3304      	adds	r3, #4
    8020:	681b      	ldr	r3, [r3, #0]
    8022:	4619      	mov	r1, r3
    8024:	6838      	ldr	r0, [r7, #0]
    8026:	4b5f      	ldr	r3, [pc, #380]	; (81a4 <_pwm_init+0x1f0>)
    8028:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    802a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    802e:	495e      	ldr	r1, [pc, #376]	; (81a8 <_pwm_init+0x1f4>)
    8030:	4613      	mov	r3, r2
    8032:	009b      	lsls	r3, r3, #2
    8034:	4413      	add	r3, r2
    8036:	009b      	lsls	r3, r3, #2
    8038:	440b      	add	r3, r1
    803a:	330a      	adds	r3, #10
    803c:	781b      	ldrb	r3, [r3, #0]
    803e:	4619      	mov	r1, r3
    8040:	6838      	ldr	r0, [r7, #0]
    8042:	4b5a      	ldr	r3, [pc, #360]	; (81ac <_pwm_init+0x1f8>)
    8044:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8046:	f997 200f 	ldrsb.w	r2, [r7, #15]
    804a:	4957      	ldr	r1, [pc, #348]	; (81a8 <_pwm_init+0x1f4>)
    804c:	4613      	mov	r3, r2
    804e:	009b      	lsls	r3, r3, #2
    8050:	4413      	add	r3, r2
    8052:	009b      	lsls	r3, r3, #2
    8054:	440b      	add	r3, r1
    8056:	3308      	adds	r3, #8
    8058:	881b      	ldrh	r3, [r3, #0]
    805a:	4619      	mov	r1, r3
    805c:	6838      	ldr	r0, [r7, #0]
    805e:	4b54      	ldr	r3, [pc, #336]	; (81b0 <_pwm_init+0x1fc>)
    8060:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8062:	2103      	movs	r1, #3
    8064:	6838      	ldr	r0, [r7, #0]
    8066:	4b53      	ldr	r3, [pc, #332]	; (81b4 <_pwm_init+0x200>)
    8068:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    806a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    806e:	494e      	ldr	r1, [pc, #312]	; (81a8 <_pwm_init+0x1f4>)
    8070:	4613      	mov	r3, r2
    8072:	009b      	lsls	r3, r3, #2
    8074:	4413      	add	r3, r2
    8076:	009b      	lsls	r3, r3, #2
    8078:	440b      	add	r3, r1
    807a:	3304      	adds	r3, #4
    807c:	681b      	ldr	r3, [r3, #0]
    807e:	f003 030c 	and.w	r3, r3, #12
    8082:	2b08      	cmp	r3, #8
    8084:	d11e      	bne.n	80c4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8086:	f997 200f 	ldrsb.w	r2, [r7, #15]
    808a:	4947      	ldr	r1, [pc, #284]	; (81a8 <_pwm_init+0x1f4>)
    808c:	4613      	mov	r3, r2
    808e:	009b      	lsls	r3, r3, #2
    8090:	4413      	add	r3, r2
    8092:	009b      	lsls	r3, r3, #2
    8094:	440b      	add	r3, r1
    8096:	330c      	adds	r3, #12
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	461a      	mov	r2, r3
    809c:	2100      	movs	r1, #0
    809e:	6838      	ldr	r0, [r7, #0]
    80a0:	4b45      	ldr	r3, [pc, #276]	; (81b8 <_pwm_init+0x204>)
    80a2:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    80a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80a8:	493f      	ldr	r1, [pc, #252]	; (81a8 <_pwm_init+0x1f4>)
    80aa:	4613      	mov	r3, r2
    80ac:	009b      	lsls	r3, r3, #2
    80ae:	4413      	add	r3, r2
    80b0:	009b      	lsls	r3, r3, #2
    80b2:	440b      	add	r3, r1
    80b4:	3310      	adds	r3, #16
    80b6:	681b      	ldr	r3, [r3, #0]
    80b8:	461a      	mov	r2, r3
    80ba:	2101      	movs	r1, #1
    80bc:	6838      	ldr	r0, [r7, #0]
    80be:	4b3e      	ldr	r3, [pc, #248]	; (81b8 <_pwm_init+0x204>)
    80c0:	4798      	blx	r3
    80c2:	e031      	b.n	8128 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    80c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80c8:	4937      	ldr	r1, [pc, #220]	; (81a8 <_pwm_init+0x1f4>)
    80ca:	4613      	mov	r3, r2
    80cc:	009b      	lsls	r3, r3, #2
    80ce:	4413      	add	r3, r2
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	440b      	add	r3, r1
    80d4:	3304      	adds	r3, #4
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	f003 030c 	and.w	r3, r3, #12
    80dc:	2b00      	cmp	r3, #0
    80de:	d120      	bne.n	8122 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    80e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80e4:	4930      	ldr	r1, [pc, #192]	; (81a8 <_pwm_init+0x1f4>)
    80e6:	4613      	mov	r3, r2
    80e8:	009b      	lsls	r3, r3, #2
    80ea:	4413      	add	r3, r2
    80ec:	009b      	lsls	r3, r3, #2
    80ee:	440b      	add	r3, r1
    80f0:	330c      	adds	r3, #12
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	b29b      	uxth	r3, r3
    80f6:	461a      	mov	r2, r3
    80f8:	2100      	movs	r1, #0
    80fa:	6838      	ldr	r0, [r7, #0]
    80fc:	4b2f      	ldr	r3, [pc, #188]	; (81bc <_pwm_init+0x208>)
    80fe:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8100:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8104:	4928      	ldr	r1, [pc, #160]	; (81a8 <_pwm_init+0x1f4>)
    8106:	4613      	mov	r3, r2
    8108:	009b      	lsls	r3, r3, #2
    810a:	4413      	add	r3, r2
    810c:	009b      	lsls	r3, r3, #2
    810e:	440b      	add	r3, r1
    8110:	3310      	adds	r3, #16
    8112:	681b      	ldr	r3, [r3, #0]
    8114:	b29b      	uxth	r3, r3
    8116:	461a      	mov	r2, r3
    8118:	2101      	movs	r1, #1
    811a:	6838      	ldr	r0, [r7, #0]
    811c:	4b27      	ldr	r3, [pc, #156]	; (81bc <_pwm_init+0x208>)
    811e:	4798      	blx	r3
    8120:	e002      	b.n	8128 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8122:	f04f 33ff 	mov.w	r3, #4294967295
    8126:	e02e      	b.n	8186 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8128:	6879      	ldr	r1, [r7, #4]
    812a:	6838      	ldr	r0, [r7, #0]
    812c:	4b24      	ldr	r3, [pc, #144]	; (81c0 <_pwm_init+0x20c>)
    812e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8130:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8134:	491c      	ldr	r1, [pc, #112]	; (81a8 <_pwm_init+0x1f4>)
    8136:	4613      	mov	r3, r2
    8138:	009b      	lsls	r3, r3, #2
    813a:	4413      	add	r3, r2
    813c:	009b      	lsls	r3, r3, #2
    813e:	440b      	add	r3, r1
    8140:	3302      	adds	r3, #2
    8142:	f9b3 3000 	ldrsh.w	r3, [r3]
    8146:	4618      	mov	r0, r3
    8148:	4b1e      	ldr	r3, [pc, #120]	; (81c4 <_pwm_init+0x210>)
    814a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    814c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8150:	4915      	ldr	r1, [pc, #84]	; (81a8 <_pwm_init+0x1f4>)
    8152:	4613      	mov	r3, r2
    8154:	009b      	lsls	r3, r3, #2
    8156:	4413      	add	r3, r2
    8158:	009b      	lsls	r3, r3, #2
    815a:	440b      	add	r3, r1
    815c:	3302      	adds	r3, #2
    815e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8162:	4618      	mov	r0, r3
    8164:	4b18      	ldr	r3, [pc, #96]	; (81c8 <_pwm_init+0x214>)
    8166:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8168:	f997 200f 	ldrsb.w	r2, [r7, #15]
    816c:	490e      	ldr	r1, [pc, #56]	; (81a8 <_pwm_init+0x1f4>)
    816e:	4613      	mov	r3, r2
    8170:	009b      	lsls	r3, r3, #2
    8172:	4413      	add	r3, r2
    8174:	009b      	lsls	r3, r3, #2
    8176:	440b      	add	r3, r1
    8178:	3302      	adds	r3, #2
    817a:	f9b3 3000 	ldrsh.w	r3, [r3]
    817e:	4618      	mov	r0, r3
    8180:	4b12      	ldr	r3, [pc, #72]	; (81cc <_pwm_init+0x218>)
    8182:	4798      	blx	r3

	return 0;
    8184:	2300      	movs	r3, #0
}
    8186:	4618      	mov	r0, r3
    8188:	3710      	adds	r7, #16
    818a:	46bd      	mov	sp, r7
    818c:	bd80      	pop	{r7, pc}
    818e:	bf00      	nop
    8190:	00008595 	.word	0x00008595
    8194:	00007979 	.word	0x00007979
    8198:	00007b19 	.word	0x00007b19
    819c:	00007ac9 	.word	0x00007ac9
    81a0:	00007955 	.word	0x00007955
    81a4:	00007b49 	.word	0x00007b49
    81a8:	20000110 	.word	0x20000110
    81ac:	00007ba9 	.word	0x00007ba9
    81b0:	00007b6d 	.word	0x00007b6d
    81b4:	00007b8b 	.word	0x00007b8b
    81b8:	00007ca9 	.word	0x00007ca9
    81bc:	00007c45 	.word	0x00007c45
    81c0:	000085fd 	.word	0x000085fd
    81c4:	000078d5 	.word	0x000078d5
    81c8:	00007919 	.word	0x00007919
    81cc:	00007899 	.word	0x00007899

000081d0 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b084      	sub	sp, #16
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	68db      	ldr	r3, [r3, #12]
    81dc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    81de:	68f8      	ldr	r0, [r7, #12]
    81e0:	4b10      	ldr	r3, [pc, #64]	; (8224 <_tc_timer_deinit+0x54>)
    81e2:	4798      	blx	r3
    81e4:	4603      	mov	r3, r0
    81e6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    81e8:	22f9      	movs	r2, #249	; 0xf9
    81ea:	490f      	ldr	r1, [pc, #60]	; (8228 <_tc_timer_deinit+0x58>)
    81ec:	2001      	movs	r0, #1
    81ee:	4b0f      	ldr	r3, [pc, #60]	; (822c <_tc_timer_deinit+0x5c>)
    81f0:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    81f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    81f6:	490e      	ldr	r1, [pc, #56]	; (8230 <_tc_timer_deinit+0x60>)
    81f8:	4613      	mov	r3, r2
    81fa:	009b      	lsls	r3, r3, #2
    81fc:	4413      	add	r3, r2
    81fe:	009b      	lsls	r3, r3, #2
    8200:	440b      	add	r3, r1
    8202:	3302      	adds	r3, #2
    8204:	f9b3 3000 	ldrsh.w	r3, [r3]
    8208:	4618      	mov	r0, r3
    820a:	4b0a      	ldr	r3, [pc, #40]	; (8234 <_tc_timer_deinit+0x64>)
    820c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    820e:	68f8      	ldr	r0, [r7, #12]
    8210:	4b09      	ldr	r3, [pc, #36]	; (8238 <_tc_timer_deinit+0x68>)
    8212:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8214:	68f8      	ldr	r0, [r7, #12]
    8216:	4b09      	ldr	r3, [pc, #36]	; (823c <_tc_timer_deinit+0x6c>)
    8218:	4798      	blx	r3
}
    821a:	bf00      	nop
    821c:	3710      	adds	r7, #16
    821e:	46bd      	mov	sp, r7
    8220:	bd80      	pop	{r7, pc}
    8222:	bf00      	nop
    8224:	00008595 	.word	0x00008595
    8228:	0000f310 	.word	0x0000f310
    822c:	0000397d 	.word	0x0000397d
    8230:	20000110 	.word	0x20000110
    8234:	000078d5 	.word	0x000078d5
    8238:	00007ac9 	.word	0x00007ac9
    823c:	00007a41 	.word	0x00007a41

00008240 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8240:	b580      	push	{r7, lr}
    8242:	b082      	sub	sp, #8
    8244:	af00      	add	r7, sp, #0
    8246:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	68db      	ldr	r3, [r3, #12]
    824c:	4618      	mov	r0, r3
    824e:	4b03      	ldr	r3, [pc, #12]	; (825c <_tc_timer_start+0x1c>)
    8250:	4798      	blx	r3
}
    8252:	bf00      	nop
    8254:	3708      	adds	r7, #8
    8256:	46bd      	mov	sp, r7
    8258:	bd80      	pop	{r7, pc}
    825a:	bf00      	nop
    825c:	00007a69 	.word	0x00007a69

00008260 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8260:	b580      	push	{r7, lr}
    8262:	b082      	sub	sp, #8
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	691b      	ldr	r3, [r3, #16]
    826c:	4618      	mov	r0, r3
    826e:	4b03      	ldr	r3, [pc, #12]	; (827c <_pwm_enable+0x1c>)
    8270:	4798      	blx	r3
}
    8272:	bf00      	nop
    8274:	3708      	adds	r7, #8
    8276:	46bd      	mov	sp, r7
    8278:	bd80      	pop	{r7, pc}
    827a:	bf00      	nop
    827c:	00007a69 	.word	0x00007a69

00008280 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8280:	b580      	push	{r7, lr}
    8282:	b082      	sub	sp, #8
    8284:	af00      	add	r7, sp, #0
    8286:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8288:	687b      	ldr	r3, [r7, #4]
    828a:	68db      	ldr	r3, [r3, #12]
    828c:	4618      	mov	r0, r3
    828e:	4b03      	ldr	r3, [pc, #12]	; (829c <_tc_timer_stop+0x1c>)
    8290:	4798      	blx	r3
}
    8292:	bf00      	nop
    8294:	3708      	adds	r7, #8
    8296:	46bd      	mov	sp, r7
    8298:	bd80      	pop	{r7, pc}
    829a:	bf00      	nop
    829c:	00007ac9 	.word	0x00007ac9

000082a0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	b084      	sub	sp, #16
    82a4:	af00      	add	r7, sp, #0
    82a6:	6078      	str	r0, [r7, #4]
    82a8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    82aa:	687b      	ldr	r3, [r7, #4]
    82ac:	68db      	ldr	r3, [r3, #12]
    82ae:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82b0:	68f8      	ldr	r0, [r7, #12]
    82b2:	4b14      	ldr	r3, [pc, #80]	; (8304 <_tc_timer_set_period+0x64>)
    82b4:	4798      	blx	r3
    82b6:	4603      	mov	r3, r0
    82b8:	2b02      	cmp	r3, #2
    82ba:	d105      	bne.n	82c8 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    82bc:	683a      	ldr	r2, [r7, #0]
    82be:	2100      	movs	r1, #0
    82c0:	68f8      	ldr	r0, [r7, #12]
    82c2:	4b11      	ldr	r3, [pc, #68]	; (8308 <_tc_timer_set_period+0x68>)
    82c4:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    82c6:	e019      	b.n	82fc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82c8:	68f8      	ldr	r0, [r7, #12]
    82ca:	4b0e      	ldr	r3, [pc, #56]	; (8304 <_tc_timer_set_period+0x64>)
    82cc:	4798      	blx	r3
    82ce:	4603      	mov	r3, r0
    82d0:	2b00      	cmp	r3, #0
    82d2:	d107      	bne.n	82e4 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    82d4:	683b      	ldr	r3, [r7, #0]
    82d6:	b29b      	uxth	r3, r3
    82d8:	461a      	mov	r2, r3
    82da:	2100      	movs	r1, #0
    82dc:	68f8      	ldr	r0, [r7, #12]
    82de:	4b0b      	ldr	r3, [pc, #44]	; (830c <_tc_timer_set_period+0x6c>)
    82e0:	4798      	blx	r3
}
    82e2:	e00b      	b.n	82fc <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82e4:	68f8      	ldr	r0, [r7, #12]
    82e6:	4b07      	ldr	r3, [pc, #28]	; (8304 <_tc_timer_set_period+0x64>)
    82e8:	4798      	blx	r3
    82ea:	4603      	mov	r3, r0
    82ec:	2b01      	cmp	r3, #1
    82ee:	d105      	bne.n	82fc <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    82f0:	683b      	ldr	r3, [r7, #0]
    82f2:	b2db      	uxtb	r3, r3
    82f4:	4619      	mov	r1, r3
    82f6:	68f8      	ldr	r0, [r7, #12]
    82f8:	4b05      	ldr	r3, [pc, #20]	; (8310 <_tc_timer_set_period+0x70>)
    82fa:	4798      	blx	r3
}
    82fc:	bf00      	nop
    82fe:	3710      	adds	r7, #16
    8300:	46bd      	mov	sp, r7
    8302:	bd80      	pop	{r7, pc}
    8304:	00007af1 	.word	0x00007af1
    8308:	00007ca9 	.word	0x00007ca9
    830c:	00007c45 	.word	0x00007c45
    8310:	00007bc9 	.word	0x00007bc9

00008314 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8314:	b580      	push	{r7, lr}
    8316:	b084      	sub	sp, #16
    8318:	af00      	add	r7, sp, #0
    831a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	68db      	ldr	r3, [r3, #12]
    8320:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8322:	68f8      	ldr	r0, [r7, #12]
    8324:	4b13      	ldr	r3, [pc, #76]	; (8374 <_tc_timer_get_period+0x60>)
    8326:	4798      	blx	r3
    8328:	4603      	mov	r3, r0
    832a:	2b02      	cmp	r3, #2
    832c:	d105      	bne.n	833a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    832e:	2100      	movs	r1, #0
    8330:	68f8      	ldr	r0, [r7, #12]
    8332:	4b11      	ldr	r3, [pc, #68]	; (8378 <_tc_timer_get_period+0x64>)
    8334:	4798      	blx	r3
    8336:	4603      	mov	r3, r0
    8338:	e017      	b.n	836a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    833a:	68f8      	ldr	r0, [r7, #12]
    833c:	4b0d      	ldr	r3, [pc, #52]	; (8374 <_tc_timer_get_period+0x60>)
    833e:	4798      	blx	r3
    8340:	4603      	mov	r3, r0
    8342:	2b00      	cmp	r3, #0
    8344:	d105      	bne.n	8352 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8346:	2100      	movs	r1, #0
    8348:	68f8      	ldr	r0, [r7, #12]
    834a:	4b0c      	ldr	r3, [pc, #48]	; (837c <_tc_timer_get_period+0x68>)
    834c:	4798      	blx	r3
    834e:	4603      	mov	r3, r0
    8350:	e00b      	b.n	836a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8352:	68f8      	ldr	r0, [r7, #12]
    8354:	4b07      	ldr	r3, [pc, #28]	; (8374 <_tc_timer_get_period+0x60>)
    8356:	4798      	blx	r3
    8358:	4603      	mov	r3, r0
    835a:	2b01      	cmp	r3, #1
    835c:	d104      	bne.n	8368 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    835e:	68f8      	ldr	r0, [r7, #12]
    8360:	4b07      	ldr	r3, [pc, #28]	; (8380 <_tc_timer_get_period+0x6c>)
    8362:	4798      	blx	r3
    8364:	4603      	mov	r3, r0
    8366:	e000      	b.n	836a <_tc_timer_get_period+0x56>
	}

	return 0;
    8368:	2300      	movs	r3, #0
}
    836a:	4618      	mov	r0, r3
    836c:	3710      	adds	r7, #16
    836e:	46bd      	mov	sp, r7
    8370:	bd80      	pop	{r7, pc}
    8372:	bf00      	nop
    8374:	00007af1 	.word	0x00007af1
    8378:	00007cd9 	.word	0x00007cd9
    837c:	00007c79 	.word	0x00007c79
    8380:	00007bf1 	.word	0x00007bf1

00008384 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8384:	b580      	push	{r7, lr}
    8386:	b082      	sub	sp, #8
    8388:	af00      	add	r7, sp, #0
    838a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    838c:	687b      	ldr	r3, [r7, #4]
    838e:	68db      	ldr	r3, [r3, #12]
    8390:	4618      	mov	r0, r3
    8392:	4b03      	ldr	r3, [pc, #12]	; (83a0 <_tc_timer_is_started+0x1c>)
    8394:	4798      	blx	r3
    8396:	4603      	mov	r3, r0
}
    8398:	4618      	mov	r0, r3
    839a:	3708      	adds	r7, #8
    839c:	46bd      	mov	sp, r7
    839e:	bd80      	pop	{r7, pc}
    83a0:	00007a91 	.word	0x00007a91

000083a4 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    83a4:	b580      	push	{r7, lr}
    83a6:	b082      	sub	sp, #8
    83a8:	af00      	add	r7, sp, #0
    83aa:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	691b      	ldr	r3, [r3, #16]
    83b0:	4618      	mov	r0, r3
    83b2:	4b03      	ldr	r3, [pc, #12]	; (83c0 <_pwm_is_enabled+0x1c>)
    83b4:	4798      	blx	r3
    83b6:	4603      	mov	r3, r0
}
    83b8:	4618      	mov	r0, r3
    83ba:	3708      	adds	r7, #8
    83bc:	46bd      	mov	sp, r7
    83be:	bd80      	pop	{r7, pc}
    83c0:	00007a91 	.word	0x00007a91

000083c4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    83c4:	b480      	push	{r7}
    83c6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    83c8:	4b02      	ldr	r3, [pc, #8]	; (83d4 <_tc_get_timer+0x10>)
}
    83ca:	4618      	mov	r0, r3
    83cc:	46bd      	mov	sp, r7
    83ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d2:	4770      	bx	lr
    83d4:	20000188 	.word	0x20000188

000083d8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    83d8:	b480      	push	{r7}
    83da:	af00      	add	r7, sp, #0
	return NULL;
    83dc:	2300      	movs	r3, #0
}
    83de:	4618      	mov	r0, r3
    83e0:	46bd      	mov	sp, r7
    83e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83e6:	4770      	bx	lr

000083e8 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b084      	sub	sp, #16
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    83f0:	687b      	ldr	r3, [r7, #4]
    83f2:	68db      	ldr	r3, [r3, #12]
    83f4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    83f6:	68f8      	ldr	r0, [r7, #12]
    83f8:	4b0e      	ldr	r3, [pc, #56]	; (8434 <_tc_timer_set_irq+0x4c>)
    83fa:	4798      	blx	r3
    83fc:	4603      	mov	r3, r0
    83fe:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8400:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8404:	490c      	ldr	r1, [pc, #48]	; (8438 <_tc_timer_set_irq+0x50>)
    8406:	2001      	movs	r0, #1
    8408:	4b0c      	ldr	r3, [pc, #48]	; (843c <_tc_timer_set_irq+0x54>)
    840a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    840c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8410:	490b      	ldr	r1, [pc, #44]	; (8440 <_tc_timer_set_irq+0x58>)
    8412:	4613      	mov	r3, r2
    8414:	009b      	lsls	r3, r3, #2
    8416:	4413      	add	r3, r2
    8418:	009b      	lsls	r3, r3, #2
    841a:	440b      	add	r3, r1
    841c:	3302      	adds	r3, #2
    841e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8422:	b2db      	uxtb	r3, r3
    8424:	4618      	mov	r0, r3
    8426:	4b07      	ldr	r3, [pc, #28]	; (8444 <_tc_timer_set_irq+0x5c>)
    8428:	4798      	blx	r3
}
    842a:	bf00      	nop
    842c:	3710      	adds	r7, #16
    842e:	46bd      	mov	sp, r7
    8430:	bd80      	pop	{r7, pc}
    8432:	bf00      	nop
    8434:	00008595 	.word	0x00008595
    8438:	0000f310 	.word	0x0000f310
    843c:	0000397d 	.word	0x0000397d
    8440:	20000110 	.word	0x20000110
    8444:	000041c5 	.word	0x000041c5

00008448 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8448:	b580      	push	{r7, lr}
    844a:	b084      	sub	sp, #16
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8450:	687b      	ldr	r3, [r7, #4]
    8452:	68db      	ldr	r3, [r3, #12]
    8454:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8456:	68f8      	ldr	r0, [r7, #12]
    8458:	4b07      	ldr	r3, [pc, #28]	; (8478 <tc_interrupt_handler+0x30>)
    845a:	4798      	blx	r3
    845c:	4603      	mov	r3, r0
    845e:	2b00      	cmp	r3, #0
    8460:	d006      	beq.n	8470 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8462:	68f8      	ldr	r0, [r7, #12]
    8464:	4b05      	ldr	r3, [pc, #20]	; (847c <tc_interrupt_handler+0x34>)
    8466:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	681b      	ldr	r3, [r3, #0]
    846c:	6878      	ldr	r0, [r7, #4]
    846e:	4798      	blx	r3
	}
}
    8470:	bf00      	nop
    8472:	3710      	adds	r7, #16
    8474:	46bd      	mov	sp, r7
    8476:	bd80      	pop	{r7, pc}
    8478:	000079a1 	.word	0x000079a1
    847c:	000079c9 	.word	0x000079c9

00008480 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8480:	b580      	push	{r7, lr}
    8482:	b084      	sub	sp, #16
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	691b      	ldr	r3, [r3, #16]
    848c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    848e:	68f8      	ldr	r0, [r7, #12]
    8490:	4b12      	ldr	r3, [pc, #72]	; (84dc <tc_pwm_interrupt_handler+0x5c>)
    8492:	4798      	blx	r3
    8494:	4603      	mov	r3, r0
    8496:	2b00      	cmp	r3, #0
    8498:	d00a      	beq.n	84b0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    849a:	68f8      	ldr	r0, [r7, #12]
    849c:	4b10      	ldr	r3, [pc, #64]	; (84e0 <tc_pwm_interrupt_handler+0x60>)
    849e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    84a0:	687b      	ldr	r3, [r7, #4]
    84a2:	681b      	ldr	r3, [r3, #0]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d003      	beq.n	84b0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	681b      	ldr	r3, [r3, #0]
    84ac:	6878      	ldr	r0, [r7, #4]
    84ae:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    84b0:	68f8      	ldr	r0, [r7, #12]
    84b2:	4b0c      	ldr	r3, [pc, #48]	; (84e4 <tc_pwm_interrupt_handler+0x64>)
    84b4:	4798      	blx	r3
    84b6:	4603      	mov	r3, r0
    84b8:	2b00      	cmp	r3, #0
    84ba:	d00a      	beq.n	84d2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    84bc:	68f8      	ldr	r0, [r7, #12]
    84be:	4b0a      	ldr	r3, [pc, #40]	; (84e8 <tc_pwm_interrupt_handler+0x68>)
    84c0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    84c2:	687b      	ldr	r3, [r7, #4]
    84c4:	685b      	ldr	r3, [r3, #4]
    84c6:	2b00      	cmp	r3, #0
    84c8:	d003      	beq.n	84d2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	685b      	ldr	r3, [r3, #4]
    84ce:	6878      	ldr	r0, [r7, #4]
    84d0:	4798      	blx	r3
		}
	}
}
    84d2:	bf00      	nop
    84d4:	3710      	adds	r7, #16
    84d6:	46bd      	mov	sp, r7
    84d8:	bd80      	pop	{r7, pc}
    84da:	bf00      	nop
    84dc:	000079a1 	.word	0x000079a1
    84e0:	000079c9 	.word	0x000079c9
    84e4:	00007a17 	.word	0x00007a17
    84e8:	000079e3 	.word	0x000079e3

000084ec <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    84ec:	b580      	push	{r7, lr}
    84ee:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    84f0:	4b03      	ldr	r3, [pc, #12]	; (8500 <TC0_Handler+0x14>)
    84f2:	681b      	ldr	r3, [r3, #0]
    84f4:	4618      	mov	r0, r3
    84f6:	4b03      	ldr	r3, [pc, #12]	; (8504 <TC0_Handler+0x18>)
    84f8:	4798      	blx	r3
}
    84fa:	bf00      	nop
    84fc:	bd80      	pop	{r7, pc}
    84fe:	bf00      	nop
    8500:	2000096c 	.word	0x2000096c
    8504:	00008449 	.word	0x00008449

00008508 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8508:	b580      	push	{r7, lr}
    850a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    850c:	4b03      	ldr	r3, [pc, #12]	; (851c <TC2_Handler+0x14>)
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	4618      	mov	r0, r3
    8512:	4b03      	ldr	r3, [pc, #12]	; (8520 <TC2_Handler+0x18>)
    8514:	4798      	blx	r3
}
    8516:	bf00      	nop
    8518:	bd80      	pop	{r7, pc}
    851a:	bf00      	nop
    851c:	20000970 	.word	0x20000970
    8520:	00008449 	.word	0x00008449

00008524 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8524:	b580      	push	{r7, lr}
    8526:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8528:	4b03      	ldr	r3, [pc, #12]	; (8538 <TC4_Handler+0x14>)
    852a:	681b      	ldr	r3, [r3, #0]
    852c:	4618      	mov	r0, r3
    852e:	4b03      	ldr	r3, [pc, #12]	; (853c <TC4_Handler+0x18>)
    8530:	4798      	blx	r3
}
    8532:	bf00      	nop
    8534:	bd80      	pop	{r7, pc}
    8536:	bf00      	nop
    8538:	20000974 	.word	0x20000974
    853c:	00008449 	.word	0x00008449

00008540 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8540:	b580      	push	{r7, lr}
    8542:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8544:	4b03      	ldr	r3, [pc, #12]	; (8554 <TC5_Handler+0x14>)
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	4618      	mov	r0, r3
    854a:	4b03      	ldr	r3, [pc, #12]	; (8558 <TC5_Handler+0x18>)
    854c:	4798      	blx	r3
}
    854e:	bf00      	nop
    8550:	bd80      	pop	{r7, pc}
    8552:	bf00      	nop
    8554:	20000978 	.word	0x20000978
    8558:	00008449 	.word	0x00008449

0000855c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    855c:	b580      	push	{r7, lr}
    855e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8560:	4b03      	ldr	r3, [pc, #12]	; (8570 <TC6_Handler+0x14>)
    8562:	681b      	ldr	r3, [r3, #0]
    8564:	4618      	mov	r0, r3
    8566:	4b03      	ldr	r3, [pc, #12]	; (8574 <TC6_Handler+0x18>)
    8568:	4798      	blx	r3
}
    856a:	bf00      	nop
    856c:	bd80      	pop	{r7, pc}
    856e:	bf00      	nop
    8570:	2000097c 	.word	0x2000097c
    8574:	00008449 	.word	0x00008449

00008578 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8578:	b580      	push	{r7, lr}
    857a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    857c:	4b03      	ldr	r3, [pc, #12]	; (858c <TC7_Handler+0x14>)
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	4618      	mov	r0, r3
    8582:	4b03      	ldr	r3, [pc, #12]	; (8590 <TC7_Handler+0x18>)
    8584:	4798      	blx	r3
}
    8586:	bf00      	nop
    8588:	bd80      	pop	{r7, pc}
    858a:	bf00      	nop
    858c:	20000980 	.word	0x20000980
    8590:	00008481 	.word	0x00008481

00008594 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8594:	b580      	push	{r7, lr}
    8596:	b084      	sub	sp, #16
    8598:	af00      	add	r7, sp, #0
    859a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    859c:	6878      	ldr	r0, [r7, #4]
    859e:	4b13      	ldr	r3, [pc, #76]	; (85ec <get_tc_index+0x58>)
    85a0:	4798      	blx	r3
    85a2:	4603      	mov	r3, r0
    85a4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    85a6:	2300      	movs	r3, #0
    85a8:	73fb      	strb	r3, [r7, #15]
    85aa:	e010      	b.n	85ce <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    85ac:	7bfa      	ldrb	r2, [r7, #15]
    85ae:	4910      	ldr	r1, [pc, #64]	; (85f0 <get_tc_index+0x5c>)
    85b0:	4613      	mov	r3, r2
    85b2:	009b      	lsls	r3, r3, #2
    85b4:	4413      	add	r3, r2
    85b6:	009b      	lsls	r3, r3, #2
    85b8:	440b      	add	r3, r1
    85ba:	781b      	ldrb	r3, [r3, #0]
    85bc:	7bba      	ldrb	r2, [r7, #14]
    85be:	429a      	cmp	r2, r3
    85c0:	d102      	bne.n	85c8 <get_tc_index+0x34>
			return i;
    85c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    85c6:	e00d      	b.n	85e4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    85c8:	7bfb      	ldrb	r3, [r7, #15]
    85ca:	3301      	adds	r3, #1
    85cc:	73fb      	strb	r3, [r7, #15]
    85ce:	7bfb      	ldrb	r3, [r7, #15]
    85d0:	2b05      	cmp	r3, #5
    85d2:	d9eb      	bls.n	85ac <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    85d4:	f240 221d 	movw	r2, #541	; 0x21d
    85d8:	4906      	ldr	r1, [pc, #24]	; (85f4 <get_tc_index+0x60>)
    85da:	2000      	movs	r0, #0
    85dc:	4b06      	ldr	r3, [pc, #24]	; (85f8 <get_tc_index+0x64>)
    85de:	4798      	blx	r3
	return -1;
    85e0:	f04f 33ff 	mov.w	r3, #4294967295
}
    85e4:	4618      	mov	r0, r3
    85e6:	3710      	adds	r7, #16
    85e8:	46bd      	mov	sp, r7
    85ea:	bd80      	pop	{r7, pc}
    85ec:	00008699 	.word	0x00008699
    85f0:	20000110 	.word	0x20000110
    85f4:	0000f310 	.word	0x0000f310
    85f8:	0000397d 	.word	0x0000397d

000085fc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    85fc:	b480      	push	{r7}
    85fe:	b083      	sub	sp, #12
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
    8604:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	4a17      	ldr	r2, [pc, #92]	; (8668 <_tc_init_irq_param+0x6c>)
    860a:	4293      	cmp	r3, r2
    860c:	d102      	bne.n	8614 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    860e:	4a17      	ldr	r2, [pc, #92]	; (866c <_tc_init_irq_param+0x70>)
    8610:	683b      	ldr	r3, [r7, #0]
    8612:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	4a16      	ldr	r2, [pc, #88]	; (8670 <_tc_init_irq_param+0x74>)
    8618:	4293      	cmp	r3, r2
    861a:	d102      	bne.n	8622 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    861c:	4a15      	ldr	r2, [pc, #84]	; (8674 <_tc_init_irq_param+0x78>)
    861e:	683b      	ldr	r3, [r7, #0]
    8620:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8622:	687b      	ldr	r3, [r7, #4]
    8624:	4a14      	ldr	r2, [pc, #80]	; (8678 <_tc_init_irq_param+0x7c>)
    8626:	4293      	cmp	r3, r2
    8628:	d102      	bne.n	8630 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    862a:	4a14      	ldr	r2, [pc, #80]	; (867c <_tc_init_irq_param+0x80>)
    862c:	683b      	ldr	r3, [r7, #0]
    862e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	4a13      	ldr	r2, [pc, #76]	; (8680 <_tc_init_irq_param+0x84>)
    8634:	4293      	cmp	r3, r2
    8636:	d102      	bne.n	863e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8638:	4a12      	ldr	r2, [pc, #72]	; (8684 <_tc_init_irq_param+0x88>)
    863a:	683b      	ldr	r3, [r7, #0]
    863c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	4a11      	ldr	r2, [pc, #68]	; (8688 <_tc_init_irq_param+0x8c>)
    8642:	4293      	cmp	r3, r2
    8644:	d102      	bne.n	864c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8646:	4a11      	ldr	r2, [pc, #68]	; (868c <_tc_init_irq_param+0x90>)
    8648:	683b      	ldr	r3, [r7, #0]
    864a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	4a10      	ldr	r2, [pc, #64]	; (8690 <_tc_init_irq_param+0x94>)
    8650:	4293      	cmp	r3, r2
    8652:	d102      	bne.n	865a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8654:	4a0f      	ldr	r2, [pc, #60]	; (8694 <_tc_init_irq_param+0x98>)
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	6013      	str	r3, [r2, #0]
	}
}
    865a:	bf00      	nop
    865c:	370c      	adds	r7, #12
    865e:	46bd      	mov	sp, r7
    8660:	f85d 7b04 	ldr.w	r7, [sp], #4
    8664:	4770      	bx	lr
    8666:	bf00      	nop
    8668:	40003800 	.word	0x40003800
    866c:	2000096c 	.word	0x2000096c
    8670:	4101a000 	.word	0x4101a000
    8674:	20000970 	.word	0x20000970
    8678:	42001400 	.word	0x42001400
    867c:	20000974 	.word	0x20000974
    8680:	42001800 	.word	0x42001800
    8684:	20000978 	.word	0x20000978
    8688:	43001400 	.word	0x43001400
    868c:	2000097c 	.word	0x2000097c
    8690:	43001800 	.word	0x43001800
    8694:	20000980 	.word	0x20000980

00008698 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8698:	b4b0      	push	{r4, r5, r7}
    869a:	b08d      	sub	sp, #52	; 0x34
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    86a0:	4b13      	ldr	r3, [pc, #76]	; (86f0 <_get_hardware_offset+0x58>)
    86a2:	f107 040c 	add.w	r4, r7, #12
    86a6:	461d      	mov	r5, r3
    86a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    86aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    86ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    86b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86b4:	2300      	movs	r3, #0
    86b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    86b8:	e010      	b.n	86dc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    86ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86bc:	009b      	lsls	r3, r3, #2
    86be:	f107 0230 	add.w	r2, r7, #48	; 0x30
    86c2:	4413      	add	r3, r2
    86c4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    86c8:	461a      	mov	r2, r3
    86ca:	687b      	ldr	r3, [r7, #4]
    86cc:	429a      	cmp	r2, r3
    86ce:	d102      	bne.n	86d6 <_get_hardware_offset+0x3e>
			return i;
    86d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86d2:	b2db      	uxtb	r3, r3
    86d4:	e006      	b.n	86e4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86d8:	3301      	adds	r3, #1
    86da:	62fb      	str	r3, [r7, #44]	; 0x2c
    86dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86de:	2b07      	cmp	r3, #7
    86e0:	d9eb      	bls.n	86ba <_get_hardware_offset+0x22>
		}
	}
	return 0;
    86e2:	2300      	movs	r3, #0
}
    86e4:	4618      	mov	r0, r3
    86e6:	3734      	adds	r7, #52	; 0x34
    86e8:	46bd      	mov	sp, r7
    86ea:	bcb0      	pop	{r4, r5, r7}
    86ec:	4770      	bx	lr
    86ee:	bf00      	nop
    86f0:	0000f324 	.word	0x0000f324

000086f4 <__NVIC_EnableIRQ>:
{
    86f4:	b480      	push	{r7}
    86f6:	b083      	sub	sp, #12
    86f8:	af00      	add	r7, sp, #0
    86fa:	4603      	mov	r3, r0
    86fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    86fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8702:	2b00      	cmp	r3, #0
    8704:	db0b      	blt.n	871e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8706:	4909      	ldr	r1, [pc, #36]	; (872c <__NVIC_EnableIRQ+0x38>)
    8708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    870c:	095b      	lsrs	r3, r3, #5
    870e:	88fa      	ldrh	r2, [r7, #6]
    8710:	f002 021f 	and.w	r2, r2, #31
    8714:	2001      	movs	r0, #1
    8716:	fa00 f202 	lsl.w	r2, r0, r2
    871a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    871e:	bf00      	nop
    8720:	370c      	adds	r7, #12
    8722:	46bd      	mov	sp, r7
    8724:	f85d 7b04 	ldr.w	r7, [sp], #4
    8728:	4770      	bx	lr
    872a:	bf00      	nop
    872c:	e000e100 	.word	0xe000e100

00008730 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8730:	b480      	push	{r7}
    8732:	b087      	sub	sp, #28
    8734:	af00      	add	r7, sp, #0
    8736:	60f8      	str	r0, [r7, #12]
    8738:	460b      	mov	r3, r1
    873a:	607a      	str	r2, [r7, #4]
    873c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    873e:	7afa      	ldrb	r2, [r7, #11]
    8740:	68f9      	ldr	r1, [r7, #12]
    8742:	4613      	mov	r3, r2
    8744:	009b      	lsls	r3, r3, #2
    8746:	4413      	add	r3, r2
    8748:	009b      	lsls	r3, r3, #2
    874a:	440b      	add	r3, r1
    874c:	3340      	adds	r3, #64	; 0x40
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8752:	697a      	ldr	r2, [r7, #20]
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	4013      	ands	r3, r2
    8758:	617b      	str	r3, [r7, #20]
	return tmp;
    875a:	697b      	ldr	r3, [r7, #20]
}
    875c:	4618      	mov	r0, r3
    875e:	371c      	adds	r7, #28
    8760:	46bd      	mov	sp, r7
    8762:	f85d 7b04 	ldr.w	r7, [sp], #4
    8766:	4770      	bx	lr

00008768 <hri_oscctrl_get_STATUS_reg>:
{
    8768:	b480      	push	{r7}
    876a:	b085      	sub	sp, #20
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
    8770:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8772:	687b      	ldr	r3, [r7, #4]
    8774:	691b      	ldr	r3, [r3, #16]
    8776:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8778:	68fa      	ldr	r2, [r7, #12]
    877a:	683b      	ldr	r3, [r7, #0]
    877c:	4013      	ands	r3, r2
    877e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8780:	68fb      	ldr	r3, [r7, #12]
}
    8782:	4618      	mov	r0, r3
    8784:	3714      	adds	r7, #20
    8786:	46bd      	mov	sp, r7
    8788:	f85d 7b04 	ldr.w	r7, [sp], #4
    878c:	4770      	bx	lr

0000878e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    878e:	b480      	push	{r7}
    8790:	b085      	sub	sp, #20
    8792:	af00      	add	r7, sp, #0
    8794:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	f893 3020 	ldrb.w	r3, [r3, #32]
    879c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    879e:	7bfb      	ldrb	r3, [r7, #15]
    87a0:	f003 0301 	and.w	r3, r3, #1
    87a4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    87a6:	7bfb      	ldrb	r3, [r7, #15]
    87a8:	2b00      	cmp	r3, #0
    87aa:	bf14      	ite	ne
    87ac:	2301      	movne	r3, #1
    87ae:	2300      	moveq	r3, #0
    87b0:	b2db      	uxtb	r3, r3
}
    87b2:	4618      	mov	r0, r3
    87b4:	3714      	adds	r7, #20
    87b6:	46bd      	mov	sp, r7
    87b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87bc:	4770      	bx	lr

000087be <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87be:	b480      	push	{r7}
    87c0:	b083      	sub	sp, #12
    87c2:	af00      	add	r7, sp, #0
    87c4:	6078      	str	r0, [r7, #4]
    87c6:	460b      	mov	r3, r1
    87c8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    87ca:	bf00      	nop
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	789b      	ldrb	r3, [r3, #2]
    87d0:	b2da      	uxtb	r2, r3
    87d2:	78fb      	ldrb	r3, [r7, #3]
    87d4:	4013      	ands	r3, r2
    87d6:	b2db      	uxtb	r3, r3
    87d8:	2b00      	cmp	r3, #0
    87da:	d1f7      	bne.n	87cc <hri_usb_wait_for_sync+0xe>
	};
}
    87dc:	bf00      	nop
    87de:	370c      	adds	r7, #12
    87e0:	46bd      	mov	sp, r7
    87e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87e6:	4770      	bx	lr

000087e8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87e8:	b480      	push	{r7}
    87ea:	b083      	sub	sp, #12
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
    87f0:	460b      	mov	r3, r1
    87f2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	789b      	ldrb	r3, [r3, #2]
    87f8:	b2da      	uxtb	r2, r3
    87fa:	78fb      	ldrb	r3, [r7, #3]
    87fc:	4013      	ands	r3, r2
    87fe:	b2db      	uxtb	r3, r3
    8800:	2b00      	cmp	r3, #0
    8802:	bf14      	ite	ne
    8804:	2301      	movne	r3, #1
    8806:	2300      	moveq	r3, #0
    8808:	b2db      	uxtb	r3, r3
}
    880a:	4618      	mov	r0, r3
    880c:	370c      	adds	r7, #12
    880e:	46bd      	mov	sp, r7
    8810:	f85d 7b04 	ldr.w	r7, [sp], #4
    8814:	4770      	bx	lr

00008816 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8816:	b480      	push	{r7}
    8818:	b085      	sub	sp, #20
    881a:	af00      	add	r7, sp, #0
    881c:	6078      	str	r0, [r7, #4]
    881e:	460b      	mov	r3, r1
    8820:	70fb      	strb	r3, [r7, #3]
    8822:	4613      	mov	r3, r2
    8824:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8826:	78fb      	ldrb	r3, [r7, #3]
    8828:	687a      	ldr	r2, [r7, #4]
    882a:	3308      	adds	r3, #8
    882c:	015b      	lsls	r3, r3, #5
    882e:	4413      	add	r3, r2
    8830:	3307      	adds	r3, #7
    8832:	781b      	ldrb	r3, [r3, #0]
    8834:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8836:	7bfa      	ldrb	r2, [r7, #15]
    8838:	78bb      	ldrb	r3, [r7, #2]
    883a:	4013      	ands	r3, r2
    883c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    883e:	7bfb      	ldrb	r3, [r7, #15]
}
    8840:	4618      	mov	r0, r3
    8842:	3714      	adds	r7, #20
    8844:	46bd      	mov	sp, r7
    8846:	f85d 7b04 	ldr.w	r7, [sp], #4
    884a:	4770      	bx	lr

0000884c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    884c:	b480      	push	{r7}
    884e:	b083      	sub	sp, #12
    8850:	af00      	add	r7, sp, #0
    8852:	6078      	str	r0, [r7, #4]
    8854:	460b      	mov	r3, r1
    8856:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8858:	78fb      	ldrb	r3, [r7, #3]
    885a:	687a      	ldr	r2, [r7, #4]
    885c:	3308      	adds	r3, #8
    885e:	015b      	lsls	r3, r3, #5
    8860:	4413      	add	r3, r2
    8862:	3307      	adds	r3, #7
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	b2db      	uxtb	r3, r3
}
    8868:	4618      	mov	r0, r3
    886a:	370c      	adds	r7, #12
    886c:	46bd      	mov	sp, r7
    886e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8872:	4770      	bx	lr

00008874 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8874:	b480      	push	{r7}
    8876:	b083      	sub	sp, #12
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
    887c:	460b      	mov	r3, r1
    887e:	70fb      	strb	r3, [r7, #3]
    8880:	4613      	mov	r3, r2
    8882:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8884:	78fb      	ldrb	r3, [r7, #3]
    8886:	687a      	ldr	r2, [r7, #4]
    8888:	3308      	adds	r3, #8
    888a:	015b      	lsls	r3, r3, #5
    888c:	4413      	add	r3, r2
    888e:	3307      	adds	r3, #7
    8890:	78ba      	ldrb	r2, [r7, #2]
    8892:	701a      	strb	r2, [r3, #0]
}
    8894:	bf00      	nop
    8896:	370c      	adds	r7, #12
    8898:	46bd      	mov	sp, r7
    889a:	f85d 7b04 	ldr.w	r7, [sp], #4
    889e:	4770      	bx	lr

000088a0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    88a0:	b480      	push	{r7}
    88a2:	b083      	sub	sp, #12
    88a4:	af00      	add	r7, sp, #0
    88a6:	6078      	str	r0, [r7, #4]
    88a8:	460b      	mov	r3, r1
    88aa:	70fb      	strb	r3, [r7, #3]
    88ac:	4613      	mov	r3, r2
    88ae:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    88b0:	78fb      	ldrb	r3, [r7, #3]
    88b2:	687a      	ldr	r2, [r7, #4]
    88b4:	3308      	adds	r3, #8
    88b6:	015b      	lsls	r3, r3, #5
    88b8:	4413      	add	r3, r2
    88ba:	3305      	adds	r3, #5
    88bc:	78ba      	ldrb	r2, [r7, #2]
    88be:	701a      	strb	r2, [r3, #0]
}
    88c0:	bf00      	nop
    88c2:	370c      	adds	r7, #12
    88c4:	46bd      	mov	sp, r7
    88c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ca:	4770      	bx	lr

000088cc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    88cc:	b480      	push	{r7}
    88ce:	b083      	sub	sp, #12
    88d0:	af00      	add	r7, sp, #0
    88d2:	6078      	str	r0, [r7, #4]
    88d4:	460b      	mov	r3, r1
    88d6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    88d8:	78fb      	ldrb	r3, [r7, #3]
    88da:	687a      	ldr	r2, [r7, #4]
    88dc:	3308      	adds	r3, #8
    88de:	015b      	lsls	r3, r3, #5
    88e0:	4413      	add	r3, r2
    88e2:	3306      	adds	r3, #6
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	b2db      	uxtb	r3, r3
}
    88e8:	4618      	mov	r0, r3
    88ea:	370c      	adds	r7, #12
    88ec:	46bd      	mov	sp, r7
    88ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f2:	4770      	bx	lr

000088f4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    88f4:	b480      	push	{r7}
    88f6:	b083      	sub	sp, #12
    88f8:	af00      	add	r7, sp, #0
    88fa:	6078      	str	r0, [r7, #4]
    88fc:	460b      	mov	r3, r1
    88fe:	70fb      	strb	r3, [r7, #3]
    8900:	4613      	mov	r3, r2
    8902:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8904:	78fb      	ldrb	r3, [r7, #3]
    8906:	687a      	ldr	r2, [r7, #4]
    8908:	3308      	adds	r3, #8
    890a:	015b      	lsls	r3, r3, #5
    890c:	4413      	add	r3, r2
    890e:	3304      	adds	r3, #4
    8910:	78ba      	ldrb	r2, [r7, #2]
    8912:	701a      	strb	r2, [r3, #0]
}
    8914:	bf00      	nop
    8916:	370c      	adds	r7, #12
    8918:	46bd      	mov	sp, r7
    891a:	f85d 7b04 	ldr.w	r7, [sp], #4
    891e:	4770      	bx	lr

00008920 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8920:	b480      	push	{r7}
    8922:	b083      	sub	sp, #12
    8924:	af00      	add	r7, sp, #0
    8926:	6078      	str	r0, [r7, #4]
    8928:	460b      	mov	r3, r1
    892a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    892c:	78fb      	ldrb	r3, [r7, #3]
    892e:	687a      	ldr	r2, [r7, #4]
    8930:	015b      	lsls	r3, r3, #5
    8932:	4413      	add	r3, r2
    8934:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8938:	2210      	movs	r2, #16
    893a:	701a      	strb	r2, [r3, #0]
}
    893c:	bf00      	nop
    893e:	370c      	adds	r7, #12
    8940:	46bd      	mov	sp, r7
    8942:	f85d 7b04 	ldr.w	r7, [sp], #4
    8946:	4770      	bx	lr

00008948 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8948:	b480      	push	{r7}
    894a:	b083      	sub	sp, #12
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
    8950:	460b      	mov	r3, r1
    8952:	70fb      	strb	r3, [r7, #3]
    8954:	4613      	mov	r3, r2
    8956:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8958:	78fb      	ldrb	r3, [r7, #3]
    895a:	687a      	ldr	r2, [r7, #4]
    895c:	015b      	lsls	r3, r3, #5
    895e:	4413      	add	r3, r2
    8960:	f203 1309 	addw	r3, r3, #265	; 0x109
    8964:	78ba      	ldrb	r2, [r7, #2]
    8966:	701a      	strb	r2, [r3, #0]
}
    8968:	bf00      	nop
    896a:	370c      	adds	r7, #12
    896c:	46bd      	mov	sp, r7
    896e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8972:	4770      	bx	lr

00008974 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8974:	b480      	push	{r7}
    8976:	b083      	sub	sp, #12
    8978:	af00      	add	r7, sp, #0
    897a:	6078      	str	r0, [r7, #4]
    897c:	460b      	mov	r3, r1
    897e:	70fb      	strb	r3, [r7, #3]
    8980:	4613      	mov	r3, r2
    8982:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8984:	78fb      	ldrb	r3, [r7, #3]
    8986:	687a      	ldr	r2, [r7, #4]
    8988:	015b      	lsls	r3, r3, #5
    898a:	4413      	add	r3, r2
    898c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8990:	78ba      	ldrb	r2, [r7, #2]
    8992:	701a      	strb	r2, [r3, #0]
}
    8994:	bf00      	nop
    8996:	370c      	adds	r7, #12
    8998:	46bd      	mov	sp, r7
    899a:	f85d 7b04 	ldr.w	r7, [sp], #4
    899e:	4770      	bx	lr

000089a0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    89a0:	b480      	push	{r7}
    89a2:	b085      	sub	sp, #20
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
    89a8:	460b      	mov	r3, r1
    89aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    89ac:	78fb      	ldrb	r3, [r7, #3]
    89ae:	687a      	ldr	r2, [r7, #4]
    89b0:	3308      	adds	r3, #8
    89b2:	015b      	lsls	r3, r3, #5
    89b4:	4413      	add	r3, r2
    89b6:	781b      	ldrb	r3, [r3, #0]
    89b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    89ba:	7bfb      	ldrb	r3, [r7, #15]
    89bc:	f003 0307 	and.w	r3, r3, #7
    89c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89c2:	7bfb      	ldrb	r3, [r7, #15]
}
    89c4:	4618      	mov	r0, r3
    89c6:	3714      	adds	r7, #20
    89c8:	46bd      	mov	sp, r7
    89ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ce:	4770      	bx	lr

000089d0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    89d0:	b480      	push	{r7}
    89d2:	b085      	sub	sp, #20
    89d4:	af00      	add	r7, sp, #0
    89d6:	6078      	str	r0, [r7, #4]
    89d8:	460b      	mov	r3, r1
    89da:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    89dc:	78fb      	ldrb	r3, [r7, #3]
    89de:	687a      	ldr	r2, [r7, #4]
    89e0:	3308      	adds	r3, #8
    89e2:	015b      	lsls	r3, r3, #5
    89e4:	4413      	add	r3, r2
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    89ea:	7bfb      	ldrb	r3, [r7, #15]
    89ec:	091b      	lsrs	r3, r3, #4
    89ee:	b2db      	uxtb	r3, r3
    89f0:	f003 0307 	and.w	r3, r3, #7
    89f4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89f6:	7bfb      	ldrb	r3, [r7, #15]
}
    89f8:	4618      	mov	r0, r3
    89fa:	3714      	adds	r7, #20
    89fc:	46bd      	mov	sp, r7
    89fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a02:	4770      	bx	lr

00008a04 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8a04:	b480      	push	{r7}
    8a06:	b083      	sub	sp, #12
    8a08:	af00      	add	r7, sp, #0
    8a0a:	6078      	str	r0, [r7, #4]
    8a0c:	460b      	mov	r3, r1
    8a0e:	70fb      	strb	r3, [r7, #3]
    8a10:	4613      	mov	r3, r2
    8a12:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a14:	78fb      	ldrb	r3, [r7, #3]
    8a16:	687a      	ldr	r2, [r7, #4]
    8a18:	3308      	adds	r3, #8
    8a1a:	015b      	lsls	r3, r3, #5
    8a1c:	4413      	add	r3, r2
    8a1e:	78ba      	ldrb	r2, [r7, #2]
    8a20:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a22:	bf00      	nop
    8a24:	370c      	adds	r7, #12
    8a26:	46bd      	mov	sp, r7
    8a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2c:	4770      	bx	lr

00008a2e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8a2e:	b480      	push	{r7}
    8a30:	b083      	sub	sp, #12
    8a32:	af00      	add	r7, sp, #0
    8a34:	6078      	str	r0, [r7, #4]
    8a36:	460b      	mov	r3, r1
    8a38:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a3a:	78fb      	ldrb	r3, [r7, #3]
    8a3c:	687a      	ldr	r2, [r7, #4]
    8a3e:	3308      	adds	r3, #8
    8a40:	015b      	lsls	r3, r3, #5
    8a42:	4413      	add	r3, r2
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	b2db      	uxtb	r3, r3
}
    8a48:	4618      	mov	r0, r3
    8a4a:	370c      	adds	r7, #12
    8a4c:	46bd      	mov	sp, r7
    8a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a52:	4770      	bx	lr

00008a54 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8a54:	b480      	push	{r7}
    8a56:	b083      	sub	sp, #12
    8a58:	af00      	add	r7, sp, #0
    8a5a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8a5c:	687b      	ldr	r3, [r7, #4]
    8a5e:	8b9b      	ldrh	r3, [r3, #28]
    8a60:	b29b      	uxth	r3, r3
}
    8a62:	4618      	mov	r0, r3
    8a64:	370c      	adds	r7, #12
    8a66:	46bd      	mov	sp, r7
    8a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a6c:	4770      	bx	lr

00008a6e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8a6e:	b480      	push	{r7}
    8a70:	b083      	sub	sp, #12
    8a72:	af00      	add	r7, sp, #0
    8a74:	6078      	str	r0, [r7, #4]
    8a76:	460b      	mov	r3, r1
    8a78:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8a7a:	687b      	ldr	r3, [r7, #4]
    8a7c:	887a      	ldrh	r2, [r7, #2]
    8a7e:	839a      	strh	r2, [r3, #28]
}
    8a80:	bf00      	nop
    8a82:	370c      	adds	r7, #12
    8a84:	46bd      	mov	sp, r7
    8a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8a:	4770      	bx	lr

00008a8c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8a8c:	b480      	push	{r7}
    8a8e:	b083      	sub	sp, #12
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
    8a94:	460b      	mov	r3, r1
    8a96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a98:	687b      	ldr	r3, [r7, #4]
    8a9a:	887a      	ldrh	r2, [r7, #2]
    8a9c:	831a      	strh	r2, [r3, #24]
}
    8a9e:	bf00      	nop
    8aa0:	370c      	adds	r7, #12
    8aa2:	46bd      	mov	sp, r7
    8aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aa8:	4770      	bx	lr

00008aaa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8aaa:	b480      	push	{r7}
    8aac:	b083      	sub	sp, #12
    8aae:	af00      	add	r7, sp, #0
    8ab0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	8b1b      	ldrh	r3, [r3, #24]
    8ab6:	b29b      	uxth	r3, r3
}
    8ab8:	4618      	mov	r0, r3
    8aba:	370c      	adds	r7, #12
    8abc:	46bd      	mov	sp, r7
    8abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac2:	4770      	bx	lr

00008ac4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8ac4:	b480      	push	{r7}
    8ac6:	b083      	sub	sp, #12
    8ac8:	af00      	add	r7, sp, #0
    8aca:	6078      	str	r0, [r7, #4]
    8acc:	460b      	mov	r3, r1
    8ace:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	887a      	ldrh	r2, [r7, #2]
    8ad4:	829a      	strh	r2, [r3, #20]
}
    8ad6:	bf00      	nop
    8ad8:	370c      	adds	r7, #12
    8ada:	46bd      	mov	sp, r7
    8adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae0:	4770      	bx	lr

00008ae2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8ae2:	b480      	push	{r7}
    8ae4:	b085      	sub	sp, #20
    8ae6:	af00      	add	r7, sp, #0
    8ae8:	6078      	str	r0, [r7, #4]
    8aea:	460b      	mov	r3, r1
    8aec:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	789b      	ldrb	r3, [r3, #2]
    8af2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8af4:	7bfa      	ldrb	r2, [r7, #15]
    8af6:	78fb      	ldrb	r3, [r7, #3]
    8af8:	4013      	ands	r3, r2
    8afa:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8afc:	7bfb      	ldrb	r3, [r7, #15]
}
    8afe:	4618      	mov	r0, r3
    8b00:	3714      	adds	r7, #20
    8b02:	46bd      	mov	sp, r7
    8b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b08:	4770      	bx	lr
	...

00008b0c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b082      	sub	sp, #8
    8b10:	af00      	add	r7, sp, #0
    8b12:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	781b      	ldrb	r3, [r3, #0]
    8b18:	b2db      	uxtb	r3, r3
    8b1a:	f023 0302 	bic.w	r3, r3, #2
    8b1e:	b2da      	uxtb	r2, r3
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8b24:	2103      	movs	r1, #3
    8b26:	6878      	ldr	r0, [r7, #4]
    8b28:	4b02      	ldr	r3, [pc, #8]	; (8b34 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8b2a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b2c:	bf00      	nop
    8b2e:	3708      	adds	r7, #8
    8b30:	46bd      	mov	sp, r7
    8b32:	bd80      	pop	{r7, pc}
    8b34:	000087bf 	.word	0x000087bf

00008b38 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8b38:	b580      	push	{r7, lr}
    8b3a:	b084      	sub	sp, #16
    8b3c:	af00      	add	r7, sp, #0
    8b3e:	6078      	str	r0, [r7, #4]
    8b40:	460b      	mov	r3, r1
    8b42:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b44:	2103      	movs	r1, #3
    8b46:	6878      	ldr	r0, [r7, #4]
    8b48:	4b06      	ldr	r3, [pc, #24]	; (8b64 <hri_usb_get_CTRLA_reg+0x2c>)
    8b4a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8b4c:	687b      	ldr	r3, [r7, #4]
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b52:	7bfa      	ldrb	r2, [r7, #15]
    8b54:	78fb      	ldrb	r3, [r7, #3]
    8b56:	4013      	ands	r3, r2
    8b58:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b5a:	7bfb      	ldrb	r3, [r7, #15]
}
    8b5c:	4618      	mov	r0, r3
    8b5e:	3710      	adds	r7, #16
    8b60:	46bd      	mov	sp, r7
    8b62:	bd80      	pop	{r7, pc}
    8b64:	000087bf 	.word	0x000087bf

00008b68 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8b68:	b580      	push	{r7, lr}
    8b6a:	b082      	sub	sp, #8
    8b6c:	af00      	add	r7, sp, #0
    8b6e:	6078      	str	r0, [r7, #4]
    8b70:	460b      	mov	r3, r1
    8b72:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	78fa      	ldrb	r2, [r7, #3]
    8b78:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b7a:	2103      	movs	r1, #3
    8b7c:	6878      	ldr	r0, [r7, #4]
    8b7e:	4b03      	ldr	r3, [pc, #12]	; (8b8c <hri_usb_write_CTRLA_reg+0x24>)
    8b80:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b82:	bf00      	nop
    8b84:	3708      	adds	r7, #8
    8b86:	46bd      	mov	sp, r7
    8b88:	bd80      	pop	{r7, pc}
    8b8a:	bf00      	nop
    8b8c:	000087bf 	.word	0x000087bf

00008b90 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	b082      	sub	sp, #8
    8b94:	af00      	add	r7, sp, #0
    8b96:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b98:	2103      	movs	r1, #3
    8b9a:	6878      	ldr	r0, [r7, #4]
    8b9c:	4b04      	ldr	r3, [pc, #16]	; (8bb0 <hri_usb_read_CTRLA_reg+0x20>)
    8b9e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	781b      	ldrb	r3, [r3, #0]
    8ba4:	b2db      	uxtb	r3, r3
}
    8ba6:	4618      	mov	r0, r3
    8ba8:	3708      	adds	r7, #8
    8baa:	46bd      	mov	sp, r7
    8bac:	bd80      	pop	{r7, pc}
    8bae:	bf00      	nop
    8bb0:	000087bf 	.word	0x000087bf

00008bb4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8bb4:	b480      	push	{r7}
    8bb6:	b083      	sub	sp, #12
    8bb8:	af00      	add	r7, sp, #0
    8bba:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	891b      	ldrh	r3, [r3, #8]
    8bc0:	b29b      	uxth	r3, r3
    8bc2:	f023 0301 	bic.w	r3, r3, #1
    8bc6:	b29a      	uxth	r2, r3
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bcc:	bf00      	nop
    8bce:	370c      	adds	r7, #12
    8bd0:	46bd      	mov	sp, r7
    8bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bd6:	4770      	bx	lr

00008bd8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8bd8:	b480      	push	{r7}
    8bda:	b083      	sub	sp, #12
    8bdc:	af00      	add	r7, sp, #0
    8bde:	6078      	str	r0, [r7, #4]
    8be0:	460b      	mov	r3, r1
    8be2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	887a      	ldrh	r2, [r7, #2]
    8be8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bea:	bf00      	nop
    8bec:	370c      	adds	r7, #12
    8bee:	46bd      	mov	sp, r7
    8bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf4:	4770      	bx	lr

00008bf6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8bf6:	b480      	push	{r7}
    8bf8:	b083      	sub	sp, #12
    8bfa:	af00      	add	r7, sp, #0
    8bfc:	6078      	str	r0, [r7, #4]
    8bfe:	460b      	mov	r3, r1
    8c00:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8c02:	687b      	ldr	r3, [r7, #4]
    8c04:	78fa      	ldrb	r2, [r7, #3]
    8c06:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8c08:	bf00      	nop
    8c0a:	370c      	adds	r7, #12
    8c0c:	46bd      	mov	sp, r7
    8c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c12:	4770      	bx	lr

00008c14 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8c14:	b480      	push	{r7}
    8c16:	b083      	sub	sp, #12
    8c18:	af00      	add	r7, sp, #0
    8c1a:	6078      	str	r0, [r7, #4]
    8c1c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	683a      	ldr	r2, [r7, #0]
    8c22:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8c24:	bf00      	nop
    8c26:	370c      	adds	r7, #12
    8c28:	46bd      	mov	sp, r7
    8c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c2e:	4770      	bx	lr

00008c30 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8c30:	b480      	push	{r7}
    8c32:	b083      	sub	sp, #12
    8c34:	af00      	add	r7, sp, #0
    8c36:	6078      	str	r0, [r7, #4]
    8c38:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8c3a:	2300      	movs	r3, #0
}
    8c3c:	4618      	mov	r0, r3
    8c3e:	370c      	adds	r7, #12
    8c40:	46bd      	mov	sp, r7
    8c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c46:	4770      	bx	lr

00008c48 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8c48:	b480      	push	{r7}
    8c4a:	b085      	sub	sp, #20
    8c4c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8c4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c52:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8c54:	4b28      	ldr	r3, [pc, #160]	; (8cf8 <_usb_load_calib+0xb0>)
    8c56:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8c58:	f003 031f 	and.w	r3, r3, #31
    8c5c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8c5e:	4b26      	ldr	r3, [pc, #152]	; (8cf8 <_usb_load_calib+0xb0>)
    8c60:	681b      	ldr	r3, [r3, #0]
    8c62:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8c64:	f003 031f 	and.w	r3, r3, #31
    8c68:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8c6a:	4b23      	ldr	r3, [pc, #140]	; (8cf8 <_usb_load_calib+0xb0>)
    8c6c:	681b      	ldr	r3, [r3, #0]
    8c6e:	0a9b      	lsrs	r3, r3, #10
    8c70:	f003 0307 	and.w	r3, r3, #7
    8c74:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8c76:	68fb      	ldr	r3, [r7, #12]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d002      	beq.n	8c82 <_usb_load_calib+0x3a>
    8c7c:	68fb      	ldr	r3, [r7, #12]
    8c7e:	2b1f      	cmp	r3, #31
    8c80:	d101      	bne.n	8c86 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8c82:	2309      	movs	r3, #9
    8c84:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8c86:	68bb      	ldr	r3, [r7, #8]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d002      	beq.n	8c92 <_usb_load_calib+0x4a>
    8c8c:	68bb      	ldr	r3, [r7, #8]
    8c8e:	2b1f      	cmp	r3, #31
    8c90:	d101      	bne.n	8c96 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8c92:	2319      	movs	r3, #25
    8c94:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d002      	beq.n	8ca2 <_usb_load_calib+0x5a>
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	2b07      	cmp	r3, #7
    8ca0:	d101      	bne.n	8ca6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8ca2:	2306      	movs	r3, #6
    8ca4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8ca6:	68fb      	ldr	r3, [r7, #12]
    8ca8:	b29b      	uxth	r3, r3
    8caa:	019b      	lsls	r3, r3, #6
    8cac:	b29b      	uxth	r3, r3
    8cae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8cb2:	b29a      	uxth	r2, r3
    8cb4:	68bb      	ldr	r3, [r7, #8]
    8cb6:	b29b      	uxth	r3, r3
    8cb8:	f003 031f 	and.w	r3, r3, #31
    8cbc:	b29b      	uxth	r3, r3
    8cbe:	4313      	orrs	r3, r2
    8cc0:	b29a      	uxth	r2, r3
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	b29b      	uxth	r3, r3
    8cc6:	031b      	lsls	r3, r3, #12
    8cc8:	b29b      	uxth	r3, r3
    8cca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8cce:	b29b      	uxth	r3, r3
    8cd0:	4313      	orrs	r3, r2
    8cd2:	b29a      	uxth	r2, r3
    8cd4:	683b      	ldr	r3, [r7, #0]
    8cd6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8cd8:	683a      	ldr	r2, [r7, #0]
    8cda:	78d3      	ldrb	r3, [r2, #3]
    8cdc:	f043 0303 	orr.w	r3, r3, #3
    8ce0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8ce2:	683a      	ldr	r2, [r7, #0]
    8ce4:	78d3      	ldrb	r3, [r2, #3]
    8ce6:	f043 030c 	orr.w	r3, r3, #12
    8cea:	70d3      	strb	r3, [r2, #3]
}
    8cec:	bf00      	nop
    8cee:	3714      	adds	r7, #20
    8cf0:	46bd      	mov	sp, r7
    8cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf6:	4770      	bx	lr
    8cf8:	00800084 	.word	0x00800084

00008cfc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8d00:	bf00      	nop
    8d02:	2203      	movs	r2, #3
    8d04:	2100      	movs	r1, #0
    8d06:	4804      	ldr	r0, [pc, #16]	; (8d18 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8d08:	4b04      	ldr	r3, [pc, #16]	; (8d1c <_usb_d_dev_wait_dpll_rdy+0x20>)
    8d0a:	4798      	blx	r3
    8d0c:	4603      	mov	r3, r0
    8d0e:	2b03      	cmp	r3, #3
    8d10:	d1f7      	bne.n	8d02 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8d12:	bf00      	nop
    8d14:	bd80      	pop	{r7, pc}
    8d16:	bf00      	nop
    8d18:	40001000 	.word	0x40001000
    8d1c:	00008731 	.word	0x00008731

00008d20 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8d20:	b580      	push	{r7, lr}
    8d22:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8d24:	480e      	ldr	r0, [pc, #56]	; (8d60 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d26:	4b0f      	ldr	r3, [pc, #60]	; (8d64 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8d28:	4798      	blx	r3
    8d2a:	4603      	mov	r3, r0
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d00a      	beq.n	8d46 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8d30:	bf00      	nop
    8d32:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8d36:	480a      	ldr	r0, [pc, #40]	; (8d60 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d38:	4b0b      	ldr	r3, [pc, #44]	; (8d68 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d3a:	4798      	blx	r3
    8d3c:	4603      	mov	r3, r0
    8d3e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8d42:	d1f6      	bne.n	8d32 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8d44:	e009      	b.n	8d5a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8d46:	bf00      	nop
    8d48:	f44f 7180 	mov.w	r1, #256	; 0x100
    8d4c:	4804      	ldr	r0, [pc, #16]	; (8d60 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d4e:	4b06      	ldr	r3, [pc, #24]	; (8d68 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d50:	4798      	blx	r3
    8d52:	4603      	mov	r3, r0
    8d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d58:	d1f6      	bne.n	8d48 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8d5a:	bf00      	nop
    8d5c:	bd80      	pop	{r7, pc}
    8d5e:	bf00      	nop
    8d60:	40001000 	.word	0x40001000
    8d64:	0000878f 	.word	0x0000878f
    8d68:	00008769 	.word	0x00008769

00008d6c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	b082      	sub	sp, #8
    8d70:	af00      	add	r7, sp, #0
    8d72:	4603      	mov	r3, r0
    8d74:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8d76:	79fb      	ldrb	r3, [r7, #7]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d102      	bne.n	8d82 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8d7c:	4b05      	ldr	r3, [pc, #20]	; (8d94 <_usb_d_dev_wait_clk_rdy+0x28>)
    8d7e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8d80:	e004      	b.n	8d8c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8d82:	79fb      	ldrb	r3, [r7, #7]
    8d84:	2b01      	cmp	r3, #1
    8d86:	d101      	bne.n	8d8c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8d88:	4b03      	ldr	r3, [pc, #12]	; (8d98 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8d8a:	4798      	blx	r3
}
    8d8c:	bf00      	nop
    8d8e:	3708      	adds	r7, #8
    8d90:	46bd      	mov	sp, r7
    8d92:	bd80      	pop	{r7, pc}
    8d94:	00008d21 	.word	0x00008d21
    8d98:	00008cfd 	.word	0x00008cfd

00008d9c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8d9c:	b580      	push	{r7, lr}
    8d9e:	b082      	sub	sp, #8
    8da0:	af00      	add	r7, sp, #0
    8da2:	4603      	mov	r3, r0
    8da4:	6039      	str	r1, [r7, #0]
    8da6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8da8:	683b      	ldr	r3, [r7, #0]
    8daa:	b2da      	uxtb	r2, r3
    8dac:	79fb      	ldrb	r3, [r7, #7]
    8dae:	4619      	mov	r1, r3
    8db0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8db4:	4b02      	ldr	r3, [pc, #8]	; (8dc0 <_usbd_ep_int_ack+0x24>)
    8db6:	4798      	blx	r3
}
    8db8:	bf00      	nop
    8dba:	3708      	adds	r7, #8
    8dbc:	46bd      	mov	sp, r7
    8dbe:	bd80      	pop	{r7, pc}
    8dc0:	00008875 	.word	0x00008875

00008dc4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8dc4:	b580      	push	{r7, lr}
    8dc6:	b082      	sub	sp, #8
    8dc8:	af00      	add	r7, sp, #0
    8dca:	4603      	mov	r3, r0
    8dcc:	6039      	str	r1, [r7, #0]
    8dce:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8dd0:	683b      	ldr	r3, [r7, #0]
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	79fb      	ldrb	r3, [r7, #7]
    8dd6:	4619      	mov	r1, r3
    8dd8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ddc:	4b02      	ldr	r3, [pc, #8]	; (8de8 <_usbd_ep_int_en+0x24>)
    8dde:	4798      	blx	r3
}
    8de0:	bf00      	nop
    8de2:	3708      	adds	r7, #8
    8de4:	46bd      	mov	sp, r7
    8de6:	bd80      	pop	{r7, pc}
    8de8:	00008949 	.word	0x00008949

00008dec <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8dec:	b580      	push	{r7, lr}
    8dee:	b082      	sub	sp, #8
    8df0:	af00      	add	r7, sp, #0
    8df2:	4603      	mov	r3, r0
    8df4:	6039      	str	r1, [r7, #0]
    8df6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8df8:	683b      	ldr	r3, [r7, #0]
    8dfa:	b2da      	uxtb	r2, r3
    8dfc:	79fb      	ldrb	r3, [r7, #7]
    8dfe:	4619      	mov	r1, r3
    8e00:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e04:	4b02      	ldr	r3, [pc, #8]	; (8e10 <_usbd_ep_int_dis+0x24>)
    8e06:	4798      	blx	r3
}
    8e08:	bf00      	nop
    8e0a:	3708      	adds	r7, #8
    8e0c:	46bd      	mov	sp, r7
    8e0e:	bd80      	pop	{r7, pc}
    8e10:	00008975 	.word	0x00008975

00008e14 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8e14:	b580      	push	{r7, lr}
    8e16:	b082      	sub	sp, #8
    8e18:	af00      	add	r7, sp, #0
    8e1a:	4603      	mov	r3, r0
    8e1c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8e1e:	79fb      	ldrb	r3, [r7, #7]
    8e20:	4619      	mov	r1, r3
    8e22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e26:	4b06      	ldr	r3, [pc, #24]	; (8e40 <_usbd_ep_is_ctrl+0x2c>)
    8e28:	4798      	blx	r3
    8e2a:	4603      	mov	r3, r0
    8e2c:	2b11      	cmp	r3, #17
    8e2e:	bf0c      	ite	eq
    8e30:	2301      	moveq	r3, #1
    8e32:	2300      	movne	r3, #0
    8e34:	b2db      	uxtb	r3, r3
}
    8e36:	4618      	mov	r0, r3
    8e38:	3708      	adds	r7, #8
    8e3a:	46bd      	mov	sp, r7
    8e3c:	bd80      	pop	{r7, pc}
    8e3e:	bf00      	nop
    8e40:	00008a2f 	.word	0x00008a2f

00008e44 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8e44:	b580      	push	{r7, lr}
    8e46:	b082      	sub	sp, #8
    8e48:	af00      	add	r7, sp, #0
    8e4a:	4603      	mov	r3, r0
    8e4c:	71fb      	strb	r3, [r7, #7]
    8e4e:	460b      	mov	r3, r1
    8e50:	71bb      	strb	r3, [r7, #6]
    8e52:	4613      	mov	r3, r2
    8e54:	717b      	strb	r3, [r7, #5]
	if (st) {
    8e56:	797b      	ldrb	r3, [r7, #5]
    8e58:	2b00      	cmp	r3, #0
    8e5a:	d00b      	beq.n	8e74 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e5c:	79bb      	ldrb	r3, [r7, #6]
    8e5e:	2210      	movs	r2, #16
    8e60:	fa02 f303 	lsl.w	r3, r2, r3
    8e64:	b2da      	uxtb	r2, r3
    8e66:	79fb      	ldrb	r3, [r7, #7]
    8e68:	4619      	mov	r1, r3
    8e6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e6e:	4b09      	ldr	r3, [pc, #36]	; (8e94 <_usbd_ep_set_stall+0x50>)
    8e70:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8e72:	e00a      	b.n	8e8a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e74:	79bb      	ldrb	r3, [r7, #6]
    8e76:	2210      	movs	r2, #16
    8e78:	fa02 f303 	lsl.w	r3, r2, r3
    8e7c:	b2da      	uxtb	r2, r3
    8e7e:	79fb      	ldrb	r3, [r7, #7]
    8e80:	4619      	mov	r1, r3
    8e82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e86:	4b04      	ldr	r3, [pc, #16]	; (8e98 <_usbd_ep_set_stall+0x54>)
    8e88:	4798      	blx	r3
}
    8e8a:	bf00      	nop
    8e8c:	3708      	adds	r7, #8
    8e8e:	46bd      	mov	sp, r7
    8e90:	bd80      	pop	{r7, pc}
    8e92:	bf00      	nop
    8e94:	000088a1 	.word	0x000088a1
    8e98:	000088f5 	.word	0x000088f5

00008e9c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8e9c:	b580      	push	{r7, lr}
    8e9e:	b084      	sub	sp, #16
    8ea0:	af00      	add	r7, sp, #0
    8ea2:	4603      	mov	r3, r0
    8ea4:	460a      	mov	r2, r1
    8ea6:	71fb      	strb	r3, [r7, #7]
    8ea8:	4613      	mov	r3, r2
    8eaa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8eac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8eb0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8eb2:	79fb      	ldrb	r3, [r7, #7]
    8eb4:	4619      	mov	r1, r3
    8eb6:	68f8      	ldr	r0, [r7, #12]
    8eb8:	4b08      	ldr	r3, [pc, #32]	; (8edc <_usbd_ep_is_stalled+0x40>)
    8eba:	4798      	blx	r3
    8ebc:	4603      	mov	r3, r0
    8ebe:	4619      	mov	r1, r3
    8ec0:	79bb      	ldrb	r3, [r7, #6]
    8ec2:	2210      	movs	r2, #16
    8ec4:	fa02 f303 	lsl.w	r3, r2, r3
    8ec8:	400b      	ands	r3, r1
    8eca:	2b00      	cmp	r3, #0
    8ecc:	bf14      	ite	ne
    8ece:	2301      	movne	r3, #1
    8ed0:	2300      	moveq	r3, #0
    8ed2:	b2db      	uxtb	r3, r3
}
    8ed4:	4618      	mov	r0, r3
    8ed6:	3710      	adds	r7, #16
    8ed8:	46bd      	mov	sp, r7
    8eda:	bd80      	pop	{r7, pc}
    8edc:	000088cd 	.word	0x000088cd

00008ee0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8ee0:	b580      	push	{r7, lr}
    8ee2:	b084      	sub	sp, #16
    8ee4:	af00      	add	r7, sp, #0
    8ee6:	4603      	mov	r3, r0
    8ee8:	460a      	mov	r2, r1
    8eea:	71fb      	strb	r3, [r7, #7]
    8eec:	4613      	mov	r3, r2
    8eee:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8ef0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ef4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8ef6:	79fb      	ldrb	r3, [r7, #7]
    8ef8:	4619      	mov	r1, r3
    8efa:	68f8      	ldr	r0, [r7, #12]
    8efc:	4b08      	ldr	r3, [pc, #32]	; (8f20 <_usbd_ep_is_stall_sent+0x40>)
    8efe:	4798      	blx	r3
    8f00:	4603      	mov	r3, r0
    8f02:	4619      	mov	r1, r3
    8f04:	79bb      	ldrb	r3, [r7, #6]
    8f06:	2220      	movs	r2, #32
    8f08:	fa02 f303 	lsl.w	r3, r2, r3
    8f0c:	400b      	ands	r3, r1
    8f0e:	2b00      	cmp	r3, #0
    8f10:	bf14      	ite	ne
    8f12:	2301      	movne	r3, #1
    8f14:	2300      	moveq	r3, #0
    8f16:	b2db      	uxtb	r3, r3
}
    8f18:	4618      	mov	r0, r3
    8f1a:	3710      	adds	r7, #16
    8f1c:	46bd      	mov	sp, r7
    8f1e:	bd80      	pop	{r7, pc}
    8f20:	0000884d 	.word	0x0000884d

00008f24 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8f24:	b580      	push	{r7, lr}
    8f26:	b082      	sub	sp, #8
    8f28:	af00      	add	r7, sp, #0
    8f2a:	4603      	mov	r3, r0
    8f2c:	460a      	mov	r2, r1
    8f2e:	71fb      	strb	r3, [r7, #7]
    8f30:	4613      	mov	r3, r2
    8f32:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8f34:	79bb      	ldrb	r3, [r7, #6]
    8f36:	2220      	movs	r2, #32
    8f38:	409a      	lsls	r2, r3
    8f3a:	79fb      	ldrb	r3, [r7, #7]
    8f3c:	4611      	mov	r1, r2
    8f3e:	4618      	mov	r0, r3
    8f40:	4b02      	ldr	r3, [pc, #8]	; (8f4c <_usbd_ep_ack_stall+0x28>)
    8f42:	4798      	blx	r3
}
    8f44:	bf00      	nop
    8f46:	3708      	adds	r7, #8
    8f48:	46bd      	mov	sp, r7
    8f4a:	bd80      	pop	{r7, pc}
    8f4c:	00008d9d 	.word	0x00008d9d

00008f50 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8f50:	b580      	push	{r7, lr}
    8f52:	b082      	sub	sp, #8
    8f54:	af00      	add	r7, sp, #0
    8f56:	4603      	mov	r3, r0
    8f58:	71fb      	strb	r3, [r7, #7]
    8f5a:	460b      	mov	r3, r1
    8f5c:	71bb      	strb	r3, [r7, #6]
    8f5e:	4613      	mov	r3, r2
    8f60:	717b      	strb	r3, [r7, #5]
	if (en) {
    8f62:	797b      	ldrb	r3, [r7, #5]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d008      	beq.n	8f7a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f68:	79bb      	ldrb	r3, [r7, #6]
    8f6a:	2220      	movs	r2, #32
    8f6c:	409a      	lsls	r2, r3
    8f6e:	79fb      	ldrb	r3, [r7, #7]
    8f70:	4611      	mov	r1, r2
    8f72:	4618      	mov	r0, r3
    8f74:	4b07      	ldr	r3, [pc, #28]	; (8f94 <_usbd_ep_int_stall_en+0x44>)
    8f76:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8f78:	e007      	b.n	8f8a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f7a:	79bb      	ldrb	r3, [r7, #6]
    8f7c:	2220      	movs	r2, #32
    8f7e:	409a      	lsls	r2, r3
    8f80:	79fb      	ldrb	r3, [r7, #7]
    8f82:	4611      	mov	r1, r2
    8f84:	4618      	mov	r0, r3
    8f86:	4b04      	ldr	r3, [pc, #16]	; (8f98 <_usbd_ep_int_stall_en+0x48>)
    8f88:	4798      	blx	r3
}
    8f8a:	bf00      	nop
    8f8c:	3708      	adds	r7, #8
    8f8e:	46bd      	mov	sp, r7
    8f90:	bd80      	pop	{r7, pc}
    8f92:	bf00      	nop
    8f94:	00008dc5 	.word	0x00008dc5
    8f98:	00008ded 	.word	0x00008ded

00008f9c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8f9c:	b580      	push	{r7, lr}
    8f9e:	b082      	sub	sp, #8
    8fa0:	af00      	add	r7, sp, #0
    8fa2:	4603      	mov	r3, r0
    8fa4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8fa6:	79fb      	ldrb	r3, [r7, #7]
    8fa8:	4619      	mov	r1, r3
    8faa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fae:	4b03      	ldr	r3, [pc, #12]	; (8fbc <_usbd_ep_stop_setup+0x20>)
    8fb0:	4798      	blx	r3
}
    8fb2:	bf00      	nop
    8fb4:	3708      	adds	r7, #8
    8fb6:	46bd      	mov	sp, r7
    8fb8:	bd80      	pop	{r7, pc}
    8fba:	bf00      	nop
    8fbc:	00008921 	.word	0x00008921

00008fc0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8fc0:	b580      	push	{r7, lr}
    8fc2:	b082      	sub	sp, #8
    8fc4:	af00      	add	r7, sp, #0
    8fc6:	4603      	mov	r3, r0
    8fc8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8fca:	79fb      	ldrb	r3, [r7, #7]
    8fcc:	2210      	movs	r2, #16
    8fce:	4619      	mov	r1, r3
    8fd0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fd4:	4b05      	ldr	r3, [pc, #20]	; (8fec <_usbd_ep_is_setup+0x2c>)
    8fd6:	4798      	blx	r3
    8fd8:	4603      	mov	r3, r0
    8fda:	2b00      	cmp	r3, #0
    8fdc:	bf14      	ite	ne
    8fde:	2301      	movne	r3, #1
    8fe0:	2300      	moveq	r3, #0
    8fe2:	b2db      	uxtb	r3, r3
}
    8fe4:	4618      	mov	r0, r3
    8fe6:	3708      	adds	r7, #8
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd80      	pop	{r7, pc}
    8fec:	00008817 	.word	0x00008817

00008ff0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b082      	sub	sp, #8
    8ff4:	af00      	add	r7, sp, #0
    8ff6:	4603      	mov	r3, r0
    8ff8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8ffa:	79fb      	ldrb	r3, [r7, #7]
    8ffc:	2110      	movs	r1, #16
    8ffe:	4618      	mov	r0, r3
    9000:	4b02      	ldr	r3, [pc, #8]	; (900c <_usbd_ep_ack_setup+0x1c>)
    9002:	4798      	blx	r3
}
    9004:	bf00      	nop
    9006:	3708      	adds	r7, #8
    9008:	46bd      	mov	sp, r7
    900a:	bd80      	pop	{r7, pc}
    900c:	00008d9d 	.word	0x00008d9d

00009010 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9010:	b580      	push	{r7, lr}
    9012:	b082      	sub	sp, #8
    9014:	af00      	add	r7, sp, #0
    9016:	4603      	mov	r3, r0
    9018:	71fb      	strb	r3, [r7, #7]
    901a:	460b      	mov	r3, r1
    901c:	71bb      	strb	r3, [r7, #6]
    901e:	4613      	mov	r3, r2
    9020:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9022:	797b      	ldrb	r3, [r7, #5]
    9024:	2b00      	cmp	r3, #0
    9026:	d00b      	beq.n	9040 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9028:	79bb      	ldrb	r3, [r7, #6]
    902a:	2201      	movs	r2, #1
    902c:	fa02 f303 	lsl.w	r3, r2, r3
    9030:	b2da      	uxtb	r2, r3
    9032:	79fb      	ldrb	r3, [r7, #7]
    9034:	4619      	mov	r1, r3
    9036:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    903a:	4b09      	ldr	r3, [pc, #36]	; (9060 <_usbd_ep_set_toggle+0x50>)
    903c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    903e:	e00a      	b.n	9056 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9040:	79bb      	ldrb	r3, [r7, #6]
    9042:	2201      	movs	r2, #1
    9044:	fa02 f303 	lsl.w	r3, r2, r3
    9048:	b2da      	uxtb	r2, r3
    904a:	79fb      	ldrb	r3, [r7, #7]
    904c:	4619      	mov	r1, r3
    904e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9052:	4b04      	ldr	r3, [pc, #16]	; (9064 <_usbd_ep_set_toggle+0x54>)
    9054:	4798      	blx	r3
}
    9056:	bf00      	nop
    9058:	3708      	adds	r7, #8
    905a:	46bd      	mov	sp, r7
    905c:	bd80      	pop	{r7, pc}
    905e:	bf00      	nop
    9060:	000088a1 	.word	0x000088a1
    9064:	000088f5 	.word	0x000088f5

00009068 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9068:	b580      	push	{r7, lr}
    906a:	b082      	sub	sp, #8
    906c:	af00      	add	r7, sp, #0
    906e:	4603      	mov	r3, r0
    9070:	460a      	mov	r2, r1
    9072:	71fb      	strb	r3, [r7, #7]
    9074:	4613      	mov	r3, r2
    9076:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9078:	79bb      	ldrb	r3, [r7, #6]
    907a:	2201      	movs	r2, #1
    907c:	409a      	lsls	r2, r3
    907e:	79fb      	ldrb	r3, [r7, #7]
    9080:	4611      	mov	r1, r2
    9082:	4618      	mov	r0, r3
    9084:	4b02      	ldr	r3, [pc, #8]	; (9090 <_usbd_ep_ack_io_cpt+0x28>)
    9086:	4798      	blx	r3
}
    9088:	bf00      	nop
    908a:	3708      	adds	r7, #8
    908c:	46bd      	mov	sp, r7
    908e:	bd80      	pop	{r7, pc}
    9090:	00008d9d 	.word	0x00008d9d

00009094 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9094:	b480      	push	{r7}
    9096:	b085      	sub	sp, #20
    9098:	af00      	add	r7, sp, #0
    909a:	4603      	mov	r3, r0
    909c:	603a      	str	r2, [r7, #0]
    909e:	71fb      	strb	r3, [r7, #7]
    90a0:	460b      	mov	r3, r1
    90a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90a4:	79fa      	ldrb	r2, [r7, #7]
    90a6:	79bb      	ldrb	r3, [r7, #6]
    90a8:	0052      	lsls	r2, r2, #1
    90aa:	4413      	add	r3, r2
    90ac:	011b      	lsls	r3, r3, #4
    90ae:	4a06      	ldr	r2, [pc, #24]	; (90c8 <_usbd_ep_set_buf+0x34>)
    90b0:	4413      	add	r3, r2
    90b2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    90b4:	68fb      	ldr	r3, [r7, #12]
    90b6:	683a      	ldr	r2, [r7, #0]
    90b8:	601a      	str	r2, [r3, #0]
}
    90ba:	bf00      	nop
    90bc:	3714      	adds	r7, #20
    90be:	46bd      	mov	sp, r7
    90c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c4:	4770      	bx	lr
    90c6:	bf00      	nop
    90c8:	20000c8c 	.word	0x20000c8c

000090cc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    90cc:	b480      	push	{r7}
    90ce:	b085      	sub	sp, #20
    90d0:	af00      	add	r7, sp, #0
    90d2:	4603      	mov	r3, r0
    90d4:	71fb      	strb	r3, [r7, #7]
    90d6:	460b      	mov	r3, r1
    90d8:	71bb      	strb	r3, [r7, #6]
    90da:	4613      	mov	r3, r2
    90dc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90de:	79fa      	ldrb	r2, [r7, #7]
    90e0:	79bb      	ldrb	r3, [r7, #6]
    90e2:	0052      	lsls	r2, r2, #1
    90e4:	4413      	add	r3, r2
    90e6:	011b      	lsls	r3, r3, #4
    90e8:	4a08      	ldr	r2, [pc, #32]	; (910c <_usbd_ep_set_in_count+0x40>)
    90ea:	4413      	add	r3, r2
    90ec:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    90ee:	88bb      	ldrh	r3, [r7, #4]
    90f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    90f4:	b299      	uxth	r1, r3
    90f6:	68fa      	ldr	r2, [r7, #12]
    90f8:	6853      	ldr	r3, [r2, #4]
    90fa:	f361 339b 	bfi	r3, r1, #14, #14
    90fe:	6053      	str	r3, [r2, #4]
}
    9100:	bf00      	nop
    9102:	3714      	adds	r7, #20
    9104:	46bd      	mov	sp, r7
    9106:	f85d 7b04 	ldr.w	r7, [sp], #4
    910a:	4770      	bx	lr
    910c:	20000c8c 	.word	0x20000c8c

00009110 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9110:	b480      	push	{r7}
    9112:	b085      	sub	sp, #20
    9114:	af00      	add	r7, sp, #0
    9116:	4603      	mov	r3, r0
    9118:	71fb      	strb	r3, [r7, #7]
    911a:	460b      	mov	r3, r1
    911c:	71bb      	strb	r3, [r7, #6]
    911e:	4613      	mov	r3, r2
    9120:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9122:	79fa      	ldrb	r2, [r7, #7]
    9124:	79bb      	ldrb	r3, [r7, #6]
    9126:	0052      	lsls	r2, r2, #1
    9128:	4413      	add	r3, r2
    912a:	011b      	lsls	r3, r3, #4
    912c:	4a08      	ldr	r2, [pc, #32]	; (9150 <_usbd_ep_set_in_size+0x40>)
    912e:	4413      	add	r3, r2
    9130:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9132:	88bb      	ldrh	r3, [r7, #4]
    9134:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9138:	b299      	uxth	r1, r3
    913a:	68fa      	ldr	r2, [r7, #12]
    913c:	6853      	ldr	r3, [r2, #4]
    913e:	f361 030d 	bfi	r3, r1, #0, #14
    9142:	6053      	str	r3, [r2, #4]
}
    9144:	bf00      	nop
    9146:	3714      	adds	r7, #20
    9148:	46bd      	mov	sp, r7
    914a:	f85d 7b04 	ldr.w	r7, [sp], #4
    914e:	4770      	bx	lr
    9150:	20000c8c 	.word	0x20000c8c

00009154 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9154:	b480      	push	{r7}
    9156:	b085      	sub	sp, #20
    9158:	af00      	add	r7, sp, #0
    915a:	4603      	mov	r3, r0
    915c:	71fb      	strb	r3, [r7, #7]
    915e:	460b      	mov	r3, r1
    9160:	71bb      	strb	r3, [r7, #6]
    9162:	4613      	mov	r3, r2
    9164:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9166:	79fa      	ldrb	r2, [r7, #7]
    9168:	79bb      	ldrb	r3, [r7, #6]
    916a:	0052      	lsls	r2, r2, #1
    916c:	4413      	add	r3, r2
    916e:	011b      	lsls	r3, r3, #4
    9170:	4a08      	ldr	r2, [pc, #32]	; (9194 <_usbd_ep_set_out_count+0x40>)
    9172:	4413      	add	r3, r2
    9174:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9176:	88bb      	ldrh	r3, [r7, #4]
    9178:	f3c3 030d 	ubfx	r3, r3, #0, #14
    917c:	b299      	uxth	r1, r3
    917e:	68fa      	ldr	r2, [r7, #12]
    9180:	6853      	ldr	r3, [r2, #4]
    9182:	f361 030d 	bfi	r3, r1, #0, #14
    9186:	6053      	str	r3, [r2, #4]
}
    9188:	bf00      	nop
    918a:	3714      	adds	r7, #20
    918c:	46bd      	mov	sp, r7
    918e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9192:	4770      	bx	lr
    9194:	20000c8c 	.word	0x20000c8c

00009198 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9198:	b480      	push	{r7}
    919a:	b085      	sub	sp, #20
    919c:	af00      	add	r7, sp, #0
    919e:	4603      	mov	r3, r0
    91a0:	71fb      	strb	r3, [r7, #7]
    91a2:	460b      	mov	r3, r1
    91a4:	71bb      	strb	r3, [r7, #6]
    91a6:	4613      	mov	r3, r2
    91a8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    91aa:	79fa      	ldrb	r2, [r7, #7]
    91ac:	79bb      	ldrb	r3, [r7, #6]
    91ae:	0052      	lsls	r2, r2, #1
    91b0:	4413      	add	r3, r2
    91b2:	011b      	lsls	r3, r3, #4
    91b4:	4a08      	ldr	r2, [pc, #32]	; (91d8 <_usbd_ep_set_out_size+0x40>)
    91b6:	4413      	add	r3, r2
    91b8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    91ba:	88bb      	ldrh	r3, [r7, #4]
    91bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    91c0:	b299      	uxth	r1, r3
    91c2:	68fa      	ldr	r2, [r7, #12]
    91c4:	6853      	ldr	r3, [r2, #4]
    91c6:	f361 339b 	bfi	r3, r1, #14, #14
    91ca:	6053      	str	r3, [r2, #4]
}
    91cc:	bf00      	nop
    91ce:	3714      	adds	r7, #20
    91d0:	46bd      	mov	sp, r7
    91d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    91d6:	4770      	bx	lr
    91d8:	20000c8c 	.word	0x20000c8c

000091dc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    91dc:	b580      	push	{r7, lr}
    91de:	b084      	sub	sp, #16
    91e0:	af00      	add	r7, sp, #0
    91e2:	60ba      	str	r2, [r7, #8]
    91e4:	607b      	str	r3, [r7, #4]
    91e6:	4603      	mov	r3, r0
    91e8:	73fb      	strb	r3, [r7, #15]
    91ea:	460b      	mov	r3, r1
    91ec:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    91ee:	68bb      	ldr	r3, [r7, #8]
    91f0:	b29a      	uxth	r2, r3
    91f2:	7bb9      	ldrb	r1, [r7, #14]
    91f4:	7bfb      	ldrb	r3, [r7, #15]
    91f6:	4618      	mov	r0, r3
    91f8:	4b06      	ldr	r3, [pc, #24]	; (9214 <_usbd_ep_set_in_trans+0x38>)
    91fa:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    91fc:	687b      	ldr	r3, [r7, #4]
    91fe:	b29a      	uxth	r2, r3
    9200:	7bb9      	ldrb	r1, [r7, #14]
    9202:	7bfb      	ldrb	r3, [r7, #15]
    9204:	4618      	mov	r0, r3
    9206:	4b04      	ldr	r3, [pc, #16]	; (9218 <_usbd_ep_set_in_trans+0x3c>)
    9208:	4798      	blx	r3
}
    920a:	bf00      	nop
    920c:	3710      	adds	r7, #16
    920e:	46bd      	mov	sp, r7
    9210:	bd80      	pop	{r7, pc}
    9212:	bf00      	nop
    9214:	00009111 	.word	0x00009111
    9218:	000090cd 	.word	0x000090cd

0000921c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    921c:	b580      	push	{r7, lr}
    921e:	b084      	sub	sp, #16
    9220:	af00      	add	r7, sp, #0
    9222:	60ba      	str	r2, [r7, #8]
    9224:	607b      	str	r3, [r7, #4]
    9226:	4603      	mov	r3, r0
    9228:	73fb      	strb	r3, [r7, #15]
    922a:	460b      	mov	r3, r1
    922c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    922e:	68bb      	ldr	r3, [r7, #8]
    9230:	b29a      	uxth	r2, r3
    9232:	7bb9      	ldrb	r1, [r7, #14]
    9234:	7bfb      	ldrb	r3, [r7, #15]
    9236:	4618      	mov	r0, r3
    9238:	4b06      	ldr	r3, [pc, #24]	; (9254 <_usbd_ep_set_out_trans+0x38>)
    923a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    923c:	687b      	ldr	r3, [r7, #4]
    923e:	b29a      	uxth	r2, r3
    9240:	7bb9      	ldrb	r1, [r7, #14]
    9242:	7bfb      	ldrb	r3, [r7, #15]
    9244:	4618      	mov	r0, r3
    9246:	4b04      	ldr	r3, [pc, #16]	; (9258 <_usbd_ep_set_out_trans+0x3c>)
    9248:	4798      	blx	r3
}
    924a:	bf00      	nop
    924c:	3710      	adds	r7, #16
    924e:	46bd      	mov	sp, r7
    9250:	bd80      	pop	{r7, pc}
    9252:	bf00      	nop
    9254:	00009199 	.word	0x00009199
    9258:	00009155 	.word	0x00009155

0000925c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    925c:	b480      	push	{r7}
    925e:	b085      	sub	sp, #20
    9260:	af00      	add	r7, sp, #0
    9262:	4603      	mov	r3, r0
    9264:	460a      	mov	r2, r1
    9266:	71fb      	strb	r3, [r7, #7]
    9268:	4613      	mov	r3, r2
    926a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    926c:	79fa      	ldrb	r2, [r7, #7]
    926e:	79bb      	ldrb	r3, [r7, #6]
    9270:	0052      	lsls	r2, r2, #1
    9272:	4413      	add	r3, r2
    9274:	011b      	lsls	r3, r3, #4
    9276:	4a06      	ldr	r2, [pc, #24]	; (9290 <_usbd_ep_clear_bank_status+0x34>)
    9278:	4413      	add	r3, r2
    927a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    927c:	68fb      	ldr	r3, [r7, #12]
    927e:	2200      	movs	r2, #0
    9280:	729a      	strb	r2, [r3, #10]
}
    9282:	bf00      	nop
    9284:	3714      	adds	r7, #20
    9286:	46bd      	mov	sp, r7
    9288:	f85d 7b04 	ldr.w	r7, [sp], #4
    928c:	4770      	bx	lr
    928e:	bf00      	nop
    9290:	20000c8c 	.word	0x20000c8c

00009294 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9294:	b580      	push	{r7, lr}
    9296:	b082      	sub	sp, #8
    9298:	af00      	add	r7, sp, #0
    929a:	4603      	mov	r3, r0
    929c:	71fb      	strb	r3, [r7, #7]
    929e:	460b      	mov	r3, r1
    92a0:	71bb      	strb	r3, [r7, #6]
    92a2:	4613      	mov	r3, r2
    92a4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    92a6:	797b      	ldrb	r3, [r7, #5]
    92a8:	2b00      	cmp	r3, #0
    92aa:	d00b      	beq.n	92c4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92ac:	79bb      	ldrb	r3, [r7, #6]
    92ae:	2240      	movs	r2, #64	; 0x40
    92b0:	fa02 f303 	lsl.w	r3, r2, r3
    92b4:	b2da      	uxtb	r2, r3
    92b6:	79fb      	ldrb	r3, [r7, #7]
    92b8:	4619      	mov	r1, r3
    92ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92be:	4b09      	ldr	r3, [pc, #36]	; (92e4 <_usbd_ep_set_in_rdy+0x50>)
    92c0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    92c2:	e00a      	b.n	92da <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92c4:	79bb      	ldrb	r3, [r7, #6]
    92c6:	2240      	movs	r2, #64	; 0x40
    92c8:	fa02 f303 	lsl.w	r3, r2, r3
    92cc:	b2da      	uxtb	r2, r3
    92ce:	79fb      	ldrb	r3, [r7, #7]
    92d0:	4619      	mov	r1, r3
    92d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92d6:	4b04      	ldr	r3, [pc, #16]	; (92e8 <_usbd_ep_set_in_rdy+0x54>)
    92d8:	4798      	blx	r3
}
    92da:	bf00      	nop
    92dc:	3708      	adds	r7, #8
    92de:	46bd      	mov	sp, r7
    92e0:	bd80      	pop	{r7, pc}
    92e2:	bf00      	nop
    92e4:	000088a1 	.word	0x000088a1
    92e8:	000088f5 	.word	0x000088f5

000092ec <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    92ec:	b580      	push	{r7, lr}
    92ee:	b082      	sub	sp, #8
    92f0:	af00      	add	r7, sp, #0
    92f2:	4603      	mov	r3, r0
    92f4:	71fb      	strb	r3, [r7, #7]
    92f6:	460b      	mov	r3, r1
    92f8:	71bb      	strb	r3, [r7, #6]
    92fa:	4613      	mov	r3, r2
    92fc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    92fe:	797b      	ldrb	r3, [r7, #5]
    9300:	2b00      	cmp	r3, #0
    9302:	d00b      	beq.n	931c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9304:	79bb      	ldrb	r3, [r7, #6]
    9306:	2240      	movs	r2, #64	; 0x40
    9308:	fa02 f303 	lsl.w	r3, r2, r3
    930c:	b2da      	uxtb	r2, r3
    930e:	79fb      	ldrb	r3, [r7, #7]
    9310:	4619      	mov	r1, r3
    9312:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9316:	4b09      	ldr	r3, [pc, #36]	; (933c <_usbd_ep_set_out_rdy+0x50>)
    9318:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    931a:	e00a      	b.n	9332 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    931c:	79bb      	ldrb	r3, [r7, #6]
    931e:	2240      	movs	r2, #64	; 0x40
    9320:	fa02 f303 	lsl.w	r3, r2, r3
    9324:	b2da      	uxtb	r2, r3
    9326:	79fb      	ldrb	r3, [r7, #7]
    9328:	4619      	mov	r1, r3
    932a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    932e:	4b04      	ldr	r3, [pc, #16]	; (9340 <_usbd_ep_set_out_rdy+0x54>)
    9330:	4798      	blx	r3
}
    9332:	bf00      	nop
    9334:	3708      	adds	r7, #8
    9336:	46bd      	mov	sp, r7
    9338:	bd80      	pop	{r7, pc}
    933a:	bf00      	nop
    933c:	000088f5 	.word	0x000088f5
    9340:	000088a1 	.word	0x000088a1

00009344 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9344:	b480      	push	{r7}
    9346:	b083      	sub	sp, #12
    9348:	af00      	add	r7, sp, #0
    934a:	4603      	mov	r3, r0
    934c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    934e:	88fb      	ldrh	r3, [r7, #6]
    9350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9354:	d820      	bhi.n	9398 <_usbd_ep_pcksize_size+0x54>
    9356:	88fb      	ldrh	r3, [r7, #6]
    9358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    935c:	d81a      	bhi.n	9394 <_usbd_ep_pcksize_size+0x50>
    935e:	88fb      	ldrh	r3, [r7, #6]
    9360:	2b80      	cmp	r3, #128	; 0x80
    9362:	d815      	bhi.n	9390 <_usbd_ep_pcksize_size+0x4c>
    9364:	88fb      	ldrh	r3, [r7, #6]
    9366:	2b40      	cmp	r3, #64	; 0x40
    9368:	d810      	bhi.n	938c <_usbd_ep_pcksize_size+0x48>
    936a:	88fb      	ldrh	r3, [r7, #6]
    936c:	2b20      	cmp	r3, #32
    936e:	d80b      	bhi.n	9388 <_usbd_ep_pcksize_size+0x44>
    9370:	88fb      	ldrh	r3, [r7, #6]
    9372:	2b10      	cmp	r3, #16
    9374:	d806      	bhi.n	9384 <_usbd_ep_pcksize_size+0x40>
    9376:	88fb      	ldrh	r3, [r7, #6]
    9378:	2b08      	cmp	r3, #8
    937a:	bf8c      	ite	hi
    937c:	2301      	movhi	r3, #1
    937e:	2300      	movls	r3, #0
    9380:	b2db      	uxtb	r3, r3
    9382:	e00a      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    9384:	2302      	movs	r3, #2
    9386:	e008      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    9388:	2303      	movs	r3, #3
    938a:	e006      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    938c:	2304      	movs	r3, #4
    938e:	e004      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    9390:	2305      	movs	r3, #5
    9392:	e002      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    9394:	2306      	movs	r3, #6
    9396:	e000      	b.n	939a <_usbd_ep_pcksize_size+0x56>
    9398:	2307      	movs	r3, #7
}
    939a:	4618      	mov	r0, r3
    939c:	370c      	adds	r7, #12
    939e:	46bd      	mov	sp, r7
    93a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93a4:	4770      	bx	lr
	...

000093a8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    93a8:	b480      	push	{r7}
    93aa:	b085      	sub	sp, #20
    93ac:	af00      	add	r7, sp, #0
    93ae:	4603      	mov	r3, r0
    93b0:	460a      	mov	r2, r1
    93b2:	71fb      	strb	r3, [r7, #7]
    93b4:	4613      	mov	r3, r2
    93b6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    93b8:	79fb      	ldrb	r3, [r7, #7]
    93ba:	2b00      	cmp	r3, #0
    93bc:	d008      	beq.n	93d0 <_usb_d_dev_ept+0x28>
    93be:	79bb      	ldrb	r3, [r7, #6]
    93c0:	2b00      	cmp	r3, #0
    93c2:	d003      	beq.n	93cc <_usb_d_dev_ept+0x24>
    93c4:	79fb      	ldrb	r3, [r7, #7]
    93c6:	3304      	adds	r3, #4
    93c8:	b2db      	uxtb	r3, r3
    93ca:	e002      	b.n	93d2 <_usb_d_dev_ept+0x2a>
    93cc:	79fb      	ldrb	r3, [r7, #7]
    93ce:	e000      	b.n	93d2 <_usb_d_dev_ept+0x2a>
    93d0:	2300      	movs	r3, #0
    93d2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    93d4:	7bfa      	ldrb	r2, [r7, #15]
    93d6:	4613      	mov	r3, r2
    93d8:	009b      	lsls	r3, r3, #2
    93da:	4413      	add	r3, r2
    93dc:	009b      	lsls	r3, r3, #2
    93de:	3310      	adds	r3, #16
    93e0:	4a04      	ldr	r2, [pc, #16]	; (93f4 <_usb_d_dev_ept+0x4c>)
    93e2:	4413      	add	r3, r2
    93e4:	3304      	adds	r3, #4
}
    93e6:	4618      	mov	r0, r3
    93e8:	3714      	adds	r7, #20
    93ea:	46bd      	mov	sp, r7
    93ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f0:	4770      	bx	lr
    93f2:	bf00      	nop
    93f4:	20000bc4 	.word	0x20000bc4

000093f8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    93f8:	b580      	push	{r7, lr}
    93fa:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    93fc:	2104      	movs	r1, #4
    93fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9402:	4b03      	ldr	r3, [pc, #12]	; (9410 <_usb_d_dev_sof+0x18>)
    9404:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9406:	4b03      	ldr	r3, [pc, #12]	; (9414 <_usb_d_dev_sof+0x1c>)
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	4798      	blx	r3
}
    940c:	bf00      	nop
    940e:	bd80      	pop	{r7, pc}
    9410:	00008a6f 	.word	0x00008a6f
    9414:	20000bc4 	.word	0x20000bc4

00009418 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9418:	b580      	push	{r7, lr}
    941a:	b084      	sub	sp, #16
    941c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    941e:	2300      	movs	r3, #0
    9420:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9422:	f240 2101 	movw	r1, #513	; 0x201
    9426:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    942a:	4b1a      	ldr	r3, [pc, #104]	; (9494 <_usb_d_dev_lpmsusp+0x7c>)
    942c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    942e:	f240 2101 	movw	r1, #513	; 0x201
    9432:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9436:	4b18      	ldr	r3, [pc, #96]	; (9498 <_usb_d_dev_lpmsusp+0x80>)
    9438:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    943a:	2170      	movs	r1, #112	; 0x70
    943c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9440:	4b16      	ldr	r3, [pc, #88]	; (949c <_usb_d_dev_lpmsusp+0x84>)
    9442:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9444:	2300      	movs	r3, #0
    9446:	73fb      	strb	r3, [r7, #15]
    9448:	e018      	b.n	947c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    944a:	7bfb      	ldrb	r3, [r7, #15]
    944c:	015b      	lsls	r3, r3, #5
    944e:	4a14      	ldr	r2, [pc, #80]	; (94a0 <_usb_d_dev_lpmsusp+0x88>)
    9450:	4413      	add	r3, r2
    9452:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	891b      	ldrh	r3, [r3, #8]
    9458:	f3c3 0303 	ubfx	r3, r3, #0, #4
    945c:	b2db      	uxtb	r3, r3
    945e:	2b03      	cmp	r3, #3
    9460:	d109      	bne.n	9476 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9462:	687b      	ldr	r3, [r7, #4]
    9464:	891b      	ldrh	r3, [r3, #8]
    9466:	f3c3 130a 	ubfx	r3, r3, #4, #11
    946a:	b29b      	uxth	r3, r3
    946c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    946e:	687b      	ldr	r3, [r7, #4]
    9470:	2200      	movs	r2, #0
    9472:	811a      	strh	r2, [r3, #8]
			break;
    9474:	e005      	b.n	9482 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9476:	7bfb      	ldrb	r3, [r7, #15]
    9478:	3301      	adds	r3, #1
    947a:	73fb      	strb	r3, [r7, #15]
    947c:	7bfb      	ldrb	r3, [r7, #15]
    947e:	2b03      	cmp	r3, #3
    9480:	d9e3      	bls.n	944a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9482:	4b08      	ldr	r3, [pc, #32]	; (94a4 <_usb_d_dev_lpmsusp+0x8c>)
    9484:	685b      	ldr	r3, [r3, #4]
    9486:	68b9      	ldr	r1, [r7, #8]
    9488:	2003      	movs	r0, #3
    948a:	4798      	blx	r3
}
    948c:	bf00      	nop
    948e:	3710      	adds	r7, #16
    9490:	46bd      	mov	sp, r7
    9492:	bd80      	pop	{r7, pc}
    9494:	00008a6f 	.word	0x00008a6f
    9498:	00008ac5 	.word	0x00008ac5
    949c:	00008a8d 	.word	0x00008a8d
    94a0:	20000c8c 	.word	0x20000c8c
    94a4:	20000bc4 	.word	0x20000bc4

000094a8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    94a8:	b580      	push	{r7, lr}
    94aa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    94ac:	2180      	movs	r1, #128	; 0x80
    94ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94b2:	4b04      	ldr	r3, [pc, #16]	; (94c4 <_usb_d_dev_ramerr+0x1c>)
    94b4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    94b6:	4b04      	ldr	r3, [pc, #16]	; (94c8 <_usb_d_dev_ramerr+0x20>)
    94b8:	685b      	ldr	r3, [r3, #4]
    94ba:	2100      	movs	r1, #0
    94bc:	2005      	movs	r0, #5
    94be:	4798      	blx	r3
}
    94c0:	bf00      	nop
    94c2:	bd80      	pop	{r7, pc}
    94c4:	00008a6f 	.word	0x00008a6f
    94c8:	20000bc4 	.word	0x20000bc4

000094cc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    94cc:	b580      	push	{r7, lr}
    94ce:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94d0:	2170      	movs	r1, #112	; 0x70
    94d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94d6:	4b0b      	ldr	r3, [pc, #44]	; (9504 <_usb_d_dev_wakeup+0x38>)
    94d8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94da:	2170      	movs	r1, #112	; 0x70
    94dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94e0:	4b09      	ldr	r3, [pc, #36]	; (9508 <_usb_d_dev_wakeup+0x3c>)
    94e2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    94e4:	f240 2101 	movw	r1, #513	; 0x201
    94e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94ec:	4b07      	ldr	r3, [pc, #28]	; (950c <_usb_d_dev_wakeup+0x40>)
    94ee:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    94f0:	2000      	movs	r0, #0
    94f2:	4b07      	ldr	r3, [pc, #28]	; (9510 <_usb_d_dev_wakeup+0x44>)
    94f4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    94f6:	4b07      	ldr	r3, [pc, #28]	; (9514 <_usb_d_dev_wakeup+0x48>)
    94f8:	685b      	ldr	r3, [r3, #4]
    94fa:	2100      	movs	r1, #0
    94fc:	2002      	movs	r0, #2
    94fe:	4798      	blx	r3
}
    9500:	bf00      	nop
    9502:	bd80      	pop	{r7, pc}
    9504:	00008a6f 	.word	0x00008a6f
    9508:	00008ac5 	.word	0x00008ac5
    950c:	00008a8d 	.word	0x00008a8d
    9510:	00008d6d 	.word	0x00008d6d
    9514:	20000bc4 	.word	0x20000bc4

00009518 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9518:	b580      	push	{r7, lr}
    951a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    951c:	2200      	movs	r2, #0
    951e:	2100      	movs	r1, #0
    9520:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9524:	4b0d      	ldr	r3, [pc, #52]	; (955c <_usb_d_dev_reset+0x44>)
    9526:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9528:	2108      	movs	r1, #8
    952a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    952e:	4b0c      	ldr	r3, [pc, #48]	; (9560 <_usb_d_dev_reset+0x48>)
    9530:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9532:	2170      	movs	r1, #112	; 0x70
    9534:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9538:	4b0a      	ldr	r3, [pc, #40]	; (9564 <_usb_d_dev_reset+0x4c>)
    953a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    953c:	f240 2101 	movw	r1, #513	; 0x201
    9540:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9544:	4b08      	ldr	r3, [pc, #32]	; (9568 <_usb_d_dev_reset+0x50>)
    9546:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9548:	4b08      	ldr	r3, [pc, #32]	; (956c <_usb_d_dev_reset+0x54>)
    954a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    954c:	4b08      	ldr	r3, [pc, #32]	; (9570 <_usb_d_dev_reset+0x58>)
    954e:	685b      	ldr	r3, [r3, #4]
    9550:	2100      	movs	r1, #0
    9552:	2001      	movs	r0, #1
    9554:	4798      	blx	r3
}
    9556:	bf00      	nop
    9558:	bd80      	pop	{r7, pc}
    955a:	bf00      	nop
    955c:	00008a05 	.word	0x00008a05
    9560:	00008a6f 	.word	0x00008a6f
    9564:	00008ac5 	.word	0x00008ac5
    9568:	00008a8d 	.word	0x00008a8d
    956c:	0000a0d5 	.word	0x0000a0d5
    9570:	20000bc4 	.word	0x20000bc4

00009574 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9574:	b580      	push	{r7, lr}
    9576:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9578:	f240 2101 	movw	r1, #513	; 0x201
    957c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9580:	4b09      	ldr	r3, [pc, #36]	; (95a8 <_usb_d_dev_suspend+0x34>)
    9582:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9584:	f240 2101 	movw	r1, #513	; 0x201
    9588:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    958c:	4b07      	ldr	r3, [pc, #28]	; (95ac <_usb_d_dev_suspend+0x38>)
    958e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9590:	2170      	movs	r1, #112	; 0x70
    9592:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9596:	4b06      	ldr	r3, [pc, #24]	; (95b0 <_usb_d_dev_suspend+0x3c>)
    9598:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    959a:	4b06      	ldr	r3, [pc, #24]	; (95b4 <_usb_d_dev_suspend+0x40>)
    959c:	685b      	ldr	r3, [r3, #4]
    959e:	2100      	movs	r1, #0
    95a0:	2004      	movs	r0, #4
    95a2:	4798      	blx	r3
}
    95a4:	bf00      	nop
    95a6:	bd80      	pop	{r7, pc}
    95a8:	00008a6f 	.word	0x00008a6f
    95ac:	00008ac5 	.word	0x00008ac5
    95b0:	00008a8d 	.word	0x00008a8d
    95b4:	20000bc4 	.word	0x20000bc4

000095b8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    95b8:	b580      	push	{r7, lr}
    95ba:	b082      	sub	sp, #8
    95bc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    95be:	2301      	movs	r3, #1
    95c0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    95c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95c6:	4b22      	ldr	r3, [pc, #136]	; (9650 <_usb_d_dev_handle_nep+0x98>)
    95c8:	4798      	blx	r3
    95ca:	4603      	mov	r3, r0
    95cc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    95ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95d2:	4b20      	ldr	r3, [pc, #128]	; (9654 <_usb_d_dev_handle_nep+0x9c>)
    95d4:	4798      	blx	r3
    95d6:	4603      	mov	r3, r0
    95d8:	461a      	mov	r2, r3
    95da:	88bb      	ldrh	r3, [r7, #4]
    95dc:	4013      	ands	r3, r2
    95de:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    95e0:	88bb      	ldrh	r3, [r7, #4]
    95e2:	f003 0304 	and.w	r3, r3, #4
    95e6:	2b00      	cmp	r3, #0
    95e8:	d003      	beq.n	95f2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    95ea:	4b1b      	ldr	r3, [pc, #108]	; (9658 <_usb_d_dev_handle_nep+0xa0>)
    95ec:	4798      	blx	r3
		return true;
    95ee:	2301      	movs	r3, #1
    95f0:	e02a      	b.n	9648 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    95f2:	88bb      	ldrh	r3, [r7, #4]
    95f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    95f8:	2b00      	cmp	r3, #0
    95fa:	d002      	beq.n	9602 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    95fc:	4b17      	ldr	r3, [pc, #92]	; (965c <_usb_d_dev_handle_nep+0xa4>)
    95fe:	4798      	blx	r3
    9600:	e021      	b.n	9646 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9602:	88bb      	ldrh	r3, [r7, #4]
    9604:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9608:	2b00      	cmp	r3, #0
    960a:	d002      	beq.n	9612 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    960c:	4b14      	ldr	r3, [pc, #80]	; (9660 <_usb_d_dev_handle_nep+0xa8>)
    960e:	4798      	blx	r3
    9610:	e019      	b.n	9646 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9612:	88bb      	ldrh	r3, [r7, #4]
    9614:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9618:	2b00      	cmp	r3, #0
    961a:	d002      	beq.n	9622 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    961c:	4b11      	ldr	r3, [pc, #68]	; (9664 <_usb_d_dev_handle_nep+0xac>)
    961e:	4798      	blx	r3
    9620:	e011      	b.n	9646 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9622:	88bb      	ldrh	r3, [r7, #4]
    9624:	f003 0308 	and.w	r3, r3, #8
    9628:	2b00      	cmp	r3, #0
    962a:	d002      	beq.n	9632 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    962c:	4b0e      	ldr	r3, [pc, #56]	; (9668 <_usb_d_dev_handle_nep+0xb0>)
    962e:	4798      	blx	r3
    9630:	e009      	b.n	9646 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9632:	88bb      	ldrh	r3, [r7, #4]
    9634:	f003 0301 	and.w	r3, r3, #1
    9638:	2b00      	cmp	r3, #0
    963a:	d002      	beq.n	9642 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    963c:	4b0b      	ldr	r3, [pc, #44]	; (966c <_usb_d_dev_handle_nep+0xb4>)
    963e:	4798      	blx	r3
    9640:	e001      	b.n	9646 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9642:	2300      	movs	r3, #0
    9644:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9646:	79fb      	ldrb	r3, [r7, #7]
}
    9648:	4618      	mov	r0, r3
    964a:	3708      	adds	r7, #8
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}
    9650:	00008a55 	.word	0x00008a55
    9654:	00008aab 	.word	0x00008aab
    9658:	000093f9 	.word	0x000093f9
    965c:	00009419 	.word	0x00009419
    9660:	000094a9 	.word	0x000094a9
    9664:	000094cd 	.word	0x000094cd
    9668:	00009519 	.word	0x00009519
    966c:	00009575 	.word	0x00009575

00009670 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9670:	b590      	push	{r4, r7, lr}
    9672:	b089      	sub	sp, #36	; 0x24
    9674:	af00      	add	r7, sp, #0
    9676:	6078      	str	r0, [r7, #4]
    9678:	460b      	mov	r3, r1
    967a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    967c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9680:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	7c9b      	ldrb	r3, [r3, #18]
    9686:	f003 030f 	and.w	r3, r3, #15
    968a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    968c:	7dfb      	ldrb	r3, [r7, #23]
    968e:	015b      	lsls	r3, r3, #5
    9690:	4a73      	ldr	r2, [pc, #460]	; (9860 <_usb_d_dev_in_next+0x1f0>)
    9692:	4413      	add	r3, r2
    9694:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9696:	78fb      	ldrb	r3, [r7, #3]
    9698:	2b00      	cmp	r3, #0
    969a:	d006      	beq.n	96aa <_usb_d_dev_in_next+0x3a>
    969c:	693b      	ldr	r3, [r7, #16]
    969e:	3310      	adds	r3, #16
    96a0:	685b      	ldr	r3, [r3, #4]
    96a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    96a6:	b29b      	uxth	r3, r3
    96a8:	e000      	b.n	96ac <_usb_d_dev_in_next+0x3c>
    96aa:	2300      	movs	r3, #0
    96ac:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    96ae:	687b      	ldr	r3, [r7, #4]
    96b0:	8a1b      	ldrh	r3, [r3, #16]
    96b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    96b6:	4293      	cmp	r3, r2
    96b8:	d103      	bne.n	96c2 <_usb_d_dev_in_next+0x52>
    96ba:	687b      	ldr	r3, [r7, #4]
    96bc:	8a1b      	ldrh	r3, [r3, #16]
    96be:	b21b      	sxth	r3, r3
    96c0:	e004      	b.n	96cc <_usb_d_dev_in_next+0x5c>
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	8a1b      	ldrh	r3, [r3, #16]
    96c6:	3b01      	subs	r3, #1
    96c8:	b29b      	uxth	r3, r3
    96ca:	b21b      	sxth	r3, r3
    96cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    96d0:	4013      	ands	r3, r2
    96d2:	b21b      	sxth	r3, r3
    96d4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    96d6:	2300      	movs	r3, #0
    96d8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	7cdb      	ldrb	r3, [r3, #19]
    96de:	f003 0307 	and.w	r3, r3, #7
    96e2:	b2db      	uxtb	r3, r3
    96e4:	2b01      	cmp	r3, #1
    96e6:	bf0c      	ite	eq
    96e8:	2301      	moveq	r3, #1
    96ea:	2300      	movne	r3, #0
    96ec:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    96ee:	78fb      	ldrb	r3, [r7, #3]
    96f0:	2b00      	cmp	r3, #0
    96f2:	d004      	beq.n	96fe <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    96f4:	7dfb      	ldrb	r3, [r7, #23]
    96f6:	2101      	movs	r1, #1
    96f8:	4618      	mov	r0, r3
    96fa:	4b5a      	ldr	r3, [pc, #360]	; (9864 <_usb_d_dev_in_next+0x1f4>)
    96fc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	689a      	ldr	r2, [r3, #8]
    9702:	89fb      	ldrh	r3, [r7, #14]
    9704:	441a      	add	r2, r3
    9706:	687b      	ldr	r3, [r7, #4]
    9708:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    970a:	687b      	ldr	r3, [r7, #4]
    970c:	689a      	ldr	r2, [r3, #8]
    970e:	687b      	ldr	r3, [r7, #4]
    9710:	685b      	ldr	r3, [r3, #4]
    9712:	429a      	cmp	r2, r3
    9714:	d243      	bcs.n	979e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	685b      	ldr	r3, [r3, #4]
    971a:	b29a      	uxth	r2, r3
    971c:	687b      	ldr	r3, [r7, #4]
    971e:	689b      	ldr	r3, [r3, #8]
    9720:	b29b      	uxth	r3, r3
    9722:	1ad3      	subs	r3, r2, r3
    9724:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9726:	687b      	ldr	r3, [r7, #4]
    9728:	7cdb      	ldrb	r3, [r3, #19]
    972a:	f003 0320 	and.w	r3, r3, #32
    972e:	b2db      	uxtb	r3, r3
    9730:	2b00      	cmp	r3, #0
    9732:	d01b      	beq.n	976c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	8a1b      	ldrh	r3, [r3, #16]
    9738:	8bfa      	ldrh	r2, [r7, #30]
    973a:	429a      	cmp	r2, r3
    973c:	d902      	bls.n	9744 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    973e:	687b      	ldr	r3, [r7, #4]
    9740:	8a1b      	ldrh	r3, [r3, #16]
    9742:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9744:	687b      	ldr	r3, [r7, #4]
    9746:	68d8      	ldr	r0, [r3, #12]
    9748:	687b      	ldr	r3, [r7, #4]
    974a:	681a      	ldr	r2, [r3, #0]
    974c:	687b      	ldr	r3, [r7, #4]
    974e:	689b      	ldr	r3, [r3, #8]
    9750:	4413      	add	r3, r2
    9752:	8bfa      	ldrh	r2, [r7, #30]
    9754:	4619      	mov	r1, r3
    9756:	4b44      	ldr	r3, [pc, #272]	; (9868 <_usb_d_dev_in_next+0x1f8>)
    9758:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	68db      	ldr	r3, [r3, #12]
    975e:	461a      	mov	r2, r3
    9760:	7dfb      	ldrb	r3, [r7, #23]
    9762:	2101      	movs	r1, #1
    9764:	4618      	mov	r0, r3
    9766:	4b41      	ldr	r3, [pc, #260]	; (986c <_usb_d_dev_in_next+0x1fc>)
    9768:	4798      	blx	r3
    976a:	e011      	b.n	9790 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    976c:	8bfb      	ldrh	r3, [r7, #30]
    976e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9772:	d902      	bls.n	977a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9778:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	681a      	ldr	r2, [r3, #0]
    977e:	687b      	ldr	r3, [r7, #4]
    9780:	689b      	ldr	r3, [r3, #8]
    9782:	4413      	add	r3, r2
    9784:	461a      	mov	r2, r3
    9786:	7dfb      	ldrb	r3, [r7, #23]
    9788:	2101      	movs	r1, #1
    978a:	4618      	mov	r0, r3
    978c:	4b37      	ldr	r3, [pc, #220]	; (986c <_usb_d_dev_in_next+0x1fc>)
    978e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9790:	8bfa      	ldrh	r2, [r7, #30]
    9792:	7df8      	ldrb	r0, [r7, #23]
    9794:	2300      	movs	r3, #0
    9796:	2101      	movs	r1, #1
    9798:	4c35      	ldr	r4, [pc, #212]	; (9870 <_usb_d_dev_in_next+0x200>)
    979a:	47a0      	blx	r4
		goto _in_tx_exec;
    979c:	e041      	b.n	9822 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    979e:	687b      	ldr	r3, [r7, #4]
    97a0:	7cdb      	ldrb	r3, [r3, #19]
    97a2:	f003 0310 	and.w	r3, r3, #16
    97a6:	b2db      	uxtb	r3, r3
    97a8:	2b00      	cmp	r3, #0
    97aa:	d00b      	beq.n	97c4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    97ac:	687a      	ldr	r2, [r7, #4]
    97ae:	7cd3      	ldrb	r3, [r2, #19]
    97b0:	f36f 1304 	bfc	r3, #4, #1
    97b4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    97b6:	7df8      	ldrb	r0, [r7, #23]
    97b8:	2300      	movs	r3, #0
    97ba:	2200      	movs	r2, #0
    97bc:	2101      	movs	r1, #1
    97be:	4c2c      	ldr	r4, [pc, #176]	; (9870 <_usb_d_dev_in_next+0x200>)
    97c0:	47a0      	blx	r4
		goto _in_tx_exec;
    97c2:	e02e      	b.n	9822 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    97c4:	7afb      	ldrb	r3, [r7, #11]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d006      	beq.n	97d8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    97ca:	7dfb      	ldrb	r3, [r7, #23]
    97cc:	224b      	movs	r2, #75	; 0x4b
    97ce:	4619      	mov	r1, r3
    97d0:	69b8      	ldr	r0, [r7, #24]
    97d2:	4b28      	ldr	r3, [pc, #160]	; (9874 <_usb_d_dev_in_next+0x204>)
    97d4:	4798      	blx	r3
    97d6:	e005      	b.n	97e4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    97d8:	7dfb      	ldrb	r3, [r7, #23]
    97da:	224a      	movs	r2, #74	; 0x4a
    97dc:	4619      	mov	r1, r3
    97de:	69b8      	ldr	r0, [r7, #24]
    97e0:	4b24      	ldr	r3, [pc, #144]	; (9874 <_usb_d_dev_in_next+0x204>)
    97e2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    97e4:	687b      	ldr	r3, [r7, #4]
    97e6:	8a1b      	ldrh	r3, [r3, #16]
    97e8:	89ba      	ldrh	r2, [r7, #12]
    97ea:	429a      	cmp	r2, r3
    97ec:	d114      	bne.n	9818 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    97ee:	687a      	ldr	r2, [r7, #4]
    97f0:	7cd3      	ldrb	r3, [r2, #19]
    97f2:	f36f 1386 	bfc	r3, #6, #1
    97f6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    97f8:	4b1f      	ldr	r3, [pc, #124]	; (9878 <_usb_d_dev_in_next+0x208>)
    97fa:	68db      	ldr	r3, [r3, #12]
    97fc:	687a      	ldr	r2, [r7, #4]
    97fe:	7c90      	ldrb	r0, [r2, #18]
    9800:	687a      	ldr	r2, [r7, #4]
    9802:	6892      	ldr	r2, [r2, #8]
    9804:	4611      	mov	r1, r2
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	2b00      	cmp	r3, #0
    980c:	d124      	bne.n	9858 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    980e:	687a      	ldr	r2, [r7, #4]
    9810:	7cd3      	ldrb	r3, [r2, #19]
    9812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9816:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9818:	2100      	movs	r1, #0
    981a:	6878      	ldr	r0, [r7, #4]
    981c:	4b17      	ldr	r3, [pc, #92]	; (987c <_usb_d_dev_in_next+0x20c>)
    981e:	4798      	blx	r3
	return;
    9820:	e01b      	b.n	985a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9822:	78fb      	ldrb	r3, [r7, #3]
    9824:	f083 0301 	eor.w	r3, r3, #1
    9828:	b2db      	uxtb	r3, r3
    982a:	2b00      	cmp	r3, #0
    982c:	d00d      	beq.n	984a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    982e:	7afb      	ldrb	r3, [r7, #11]
    9830:	2b00      	cmp	r3, #0
    9832:	d002      	beq.n	983a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9834:	234e      	movs	r3, #78	; 0x4e
    9836:	777b      	strb	r3, [r7, #29]
    9838:	e001      	b.n	983e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    983a:	234a      	movs	r3, #74	; 0x4a
    983c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    983e:	7f7a      	ldrb	r2, [r7, #29]
    9840:	7dfb      	ldrb	r3, [r7, #23]
    9842:	4619      	mov	r1, r3
    9844:	69b8      	ldr	r0, [r7, #24]
    9846:	4b0e      	ldr	r3, [pc, #56]	; (9880 <_usb_d_dev_in_next+0x210>)
    9848:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    984a:	7dfb      	ldrb	r3, [r7, #23]
    984c:	2201      	movs	r2, #1
    984e:	2101      	movs	r1, #1
    9850:	4618      	mov	r0, r3
    9852:	4b0c      	ldr	r3, [pc, #48]	; (9884 <_usb_d_dev_in_next+0x214>)
    9854:	4798      	blx	r3
    9856:	e000      	b.n	985a <_usb_d_dev_in_next+0x1ea>
			return;
    9858:	bf00      	nop
}
    985a:	3724      	adds	r7, #36	; 0x24
    985c:	46bd      	mov	sp, r7
    985e:	bd90      	pop	{r4, r7, pc}
    9860:	20000c8c 	.word	0x20000c8c
    9864:	00009069 	.word	0x00009069
    9868:	0000ebcd 	.word	0x0000ebcd
    986c:	00009095 	.word	0x00009095
    9870:	000091dd 	.word	0x000091dd
    9874:	00008975 	.word	0x00008975
    9878:	20000bc4 	.word	0x20000bc4
    987c:	0000a999 	.word	0x0000a999
    9880:	00008949 	.word	0x00008949
    9884:	00009295 	.word	0x00009295

00009888 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9888:	b590      	push	{r4, r7, lr}
    988a:	b08b      	sub	sp, #44	; 0x2c
    988c:	af00      	add	r7, sp, #0
    988e:	6078      	str	r0, [r7, #4]
    9890:	460b      	mov	r3, r1
    9892:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9894:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9898:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	7c9b      	ldrb	r3, [r3, #18]
    989e:	f003 030f 	and.w	r3, r3, #15
    98a2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    98a4:	7ffb      	ldrb	r3, [r7, #31]
    98a6:	015b      	lsls	r3, r3, #5
    98a8:	4a94      	ldr	r2, [pc, #592]	; (9afc <_usb_d_dev_out_next+0x274>)
    98aa:	4413      	add	r3, r2
    98ac:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    98ae:	78fb      	ldrb	r3, [r7, #3]
    98b0:	2b00      	cmp	r3, #0
    98b2:	d005      	beq.n	98c0 <_usb_d_dev_out_next+0x38>
    98b4:	69bb      	ldr	r3, [r7, #24]
    98b6:	685b      	ldr	r3, [r3, #4]
    98b8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    98bc:	b29b      	uxth	r3, r3
    98be:	e000      	b.n	98c2 <_usb_d_dev_out_next+0x3a>
    98c0:	2300      	movs	r3, #0
    98c2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    98c4:	78fb      	ldrb	r3, [r7, #3]
    98c6:	2b00      	cmp	r3, #0
    98c8:	d005      	beq.n	98d6 <_usb_d_dev_out_next+0x4e>
    98ca:	69bb      	ldr	r3, [r7, #24]
    98cc:	685b      	ldr	r3, [r3, #4]
    98ce:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98d2:	b29b      	uxth	r3, r3
    98d4:	e000      	b.n	98d8 <_usb_d_dev_out_next+0x50>
    98d6:	2300      	movs	r3, #0
    98d8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    98da:	687b      	ldr	r3, [r7, #4]
    98dc:	8a1b      	ldrh	r3, [r3, #16]
    98de:	f240 32ff 	movw	r2, #1023	; 0x3ff
    98e2:	4293      	cmp	r3, r2
    98e4:	d004      	beq.n	98f0 <_usb_d_dev_out_next+0x68>
    98e6:	687b      	ldr	r3, [r7, #4]
    98e8:	8a1b      	ldrh	r3, [r3, #16]
    98ea:	3b01      	subs	r3, #1
    98ec:	b29b      	uxth	r3, r3
    98ee:	e001      	b.n	98f4 <_usb_d_dev_out_next+0x6c>
    98f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    98f4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    98f6:	8aba      	ldrh	r2, [r7, #20]
    98f8:	8a7b      	ldrh	r3, [r7, #18]
    98fa:	4013      	ands	r3, r2
    98fc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    98fe:	687b      	ldr	r3, [r7, #4]
    9900:	7cdb      	ldrb	r3, [r3, #19]
    9902:	f003 0307 	and.w	r3, r3, #7
    9906:	b2db      	uxtb	r3, r3
    9908:	2b01      	cmp	r3, #1
    990a:	bf0c      	ite	eq
    990c:	2301      	moveq	r3, #1
    990e:	2300      	movne	r3, #0
    9910:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9912:	78fb      	ldrb	r3, [r7, #3]
    9914:	2b00      	cmp	r3, #0
    9916:	d004      	beq.n	9922 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9918:	7ffb      	ldrb	r3, [r7, #31]
    991a:	2100      	movs	r1, #0
    991c:	4618      	mov	r0, r3
    991e:	4b78      	ldr	r3, [pc, #480]	; (9b00 <_usb_d_dev_out_next+0x278>)
    9920:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	7cdb      	ldrb	r3, [r3, #19]
    9926:	f003 0320 	and.w	r3, r3, #32
    992a:	b2db      	uxtb	r3, r3
    992c:	2b00      	cmp	r3, #0
    992e:	d01c      	beq.n	996a <_usb_d_dev_out_next+0xe2>
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	685b      	ldr	r3, [r3, #4]
    9934:	2b00      	cmp	r3, #0
    9936:	d018      	beq.n	996a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	685b      	ldr	r3, [r3, #4]
    993c:	b29a      	uxth	r2, r3
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	689b      	ldr	r3, [r3, #8]
    9942:	b29b      	uxth	r3, r3
    9944:	1ad3      	subs	r3, r2, r3
    9946:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	681a      	ldr	r2, [r3, #0]
    994c:	687b      	ldr	r3, [r7, #4]
    994e:	689b      	ldr	r3, [r3, #8]
    9950:	18d0      	adds	r0, r2, r3
    9952:	687b      	ldr	r3, [r7, #4]
    9954:	68d9      	ldr	r1, [r3, #12]
    9956:	89ba      	ldrh	r2, [r7, #12]
    9958:	8a3b      	ldrh	r3, [r7, #16]
    995a:	429a      	cmp	r2, r3
    995c:	d901      	bls.n	9962 <_usb_d_dev_out_next+0xda>
    995e:	8a3b      	ldrh	r3, [r7, #16]
    9960:	e000      	b.n	9964 <_usb_d_dev_out_next+0xdc>
    9962:	89bb      	ldrh	r3, [r7, #12]
    9964:	461a      	mov	r2, r3
    9966:	4b67      	ldr	r3, [pc, #412]	; (9b04 <_usb_d_dev_out_next+0x27c>)
    9968:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	685b      	ldr	r3, [r3, #4]
    996e:	2b00      	cmp	r3, #0
    9970:	d121      	bne.n	99b6 <_usb_d_dev_out_next+0x12e>
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	7cdb      	ldrb	r3, [r3, #19]
    9976:	f003 0310 	and.w	r3, r3, #16
    997a:	b2db      	uxtb	r3, r3
    997c:	2b00      	cmp	r3, #0
    997e:	d01a      	beq.n	99b6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9980:	687a      	ldr	r2, [r7, #4]
    9982:	7cd3      	ldrb	r3, [r2, #19]
    9984:	f36f 1304 	bfc	r3, #4, #1
    9988:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    998a:	687a      	ldr	r2, [r7, #4]
    998c:	7cd3      	ldrb	r3, [r2, #19]
    998e:	f043 0320 	orr.w	r3, r3, #32
    9992:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9994:	687b      	ldr	r3, [r7, #4]
    9996:	68db      	ldr	r3, [r3, #12]
    9998:	461a      	mov	r2, r3
    999a:	7ffb      	ldrb	r3, [r7, #31]
    999c:	2100      	movs	r1, #0
    999e:	4618      	mov	r0, r3
    99a0:	4b59      	ldr	r3, [pc, #356]	; (9b08 <_usb_d_dev_out_next+0x280>)
    99a2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    99a4:	687b      	ldr	r3, [r7, #4]
    99a6:	8a1b      	ldrh	r3, [r3, #16]
    99a8:	461a      	mov	r2, r3
    99aa:	7ff8      	ldrb	r0, [r7, #31]
    99ac:	2300      	movs	r3, #0
    99ae:	2100      	movs	r1, #0
    99b0:	4c56      	ldr	r4, [pc, #344]	; (9b0c <_usb_d_dev_out_next+0x284>)
    99b2:	47a0      	blx	r4
		goto _out_rx_exec;
    99b4:	e090      	b.n	9ad8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    99b6:	78fb      	ldrb	r3, [r7, #3]
    99b8:	2b00      	cmp	r3, #0
    99ba:	d010      	beq.n	99de <_usb_d_dev_out_next+0x156>
    99bc:	687b      	ldr	r3, [r7, #4]
    99be:	8a1b      	ldrh	r3, [r3, #16]
    99c0:	8a3a      	ldrh	r2, [r7, #16]
    99c2:	429a      	cmp	r2, r3
    99c4:	d20b      	bcs.n	99de <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    99c6:	687a      	ldr	r2, [r7, #4]
    99c8:	7cd3      	ldrb	r3, [r2, #19]
    99ca:	f36f 1304 	bfc	r3, #4, #1
    99ce:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	689a      	ldr	r2, [r3, #8]
    99d4:	8abb      	ldrh	r3, [r7, #20]
    99d6:	441a      	add	r2, r3
    99d8:	687b      	ldr	r3, [r7, #4]
    99da:	609a      	str	r2, [r3, #8]
    99dc:	e05c      	b.n	9a98 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	689a      	ldr	r2, [r3, #8]
    99e2:	8afb      	ldrh	r3, [r7, #22]
    99e4:	441a      	add	r2, r3
    99e6:	687b      	ldr	r3, [r7, #4]
    99e8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    99ea:	687b      	ldr	r3, [r7, #4]
    99ec:	689a      	ldr	r2, [r3, #8]
    99ee:	687b      	ldr	r3, [r7, #4]
    99f0:	685b      	ldr	r3, [r3, #4]
    99f2:	429a      	cmp	r2, r3
    99f4:	d250      	bcs.n	9a98 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	685b      	ldr	r3, [r3, #4]
    99fa:	b29a      	uxth	r2, r3
    99fc:	687b      	ldr	r3, [r7, #4]
    99fe:	689b      	ldr	r3, [r3, #8]
    9a00:	b29b      	uxth	r3, r3
    9a02:	1ad3      	subs	r3, r2, r3
    9a04:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	7cdb      	ldrb	r3, [r3, #19]
    9a0a:	f003 0320 	and.w	r3, r3, #32
    9a0e:	b2db      	uxtb	r3, r3
    9a10:	2b00      	cmp	r3, #0
    9a12:	d010      	beq.n	9a36 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	8a1b      	ldrh	r3, [r3, #16]
    9a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a1a:	429a      	cmp	r2, r3
    9a1c:	d902      	bls.n	9a24 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	8a1b      	ldrh	r3, [r3, #16]
    9a22:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9a24:	687b      	ldr	r3, [r7, #4]
    9a26:	68db      	ldr	r3, [r3, #12]
    9a28:	461a      	mov	r2, r3
    9a2a:	7ffb      	ldrb	r3, [r7, #31]
    9a2c:	2100      	movs	r1, #0
    9a2e:	4618      	mov	r0, r3
    9a30:	4b35      	ldr	r3, [pc, #212]	; (9b08 <_usb_d_dev_out_next+0x280>)
    9a32:	4798      	blx	r3
    9a34:	e029      	b.n	9a8a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	8a1b      	ldrh	r3, [r3, #16]
    9a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a3c:	429a      	cmp	r2, r3
    9a3e:	d90f      	bls.n	9a60 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a46:	d903      	bls.n	9a50 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a4e:	e011      	b.n	9a74 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a52:	8a7b      	ldrh	r3, [r7, #18]
    9a54:	4013      	ands	r3, r2
    9a56:	b29b      	uxth	r3, r3
    9a58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a5a:	1ad3      	subs	r3, r2, r3
    9a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a5e:	e009      	b.n	9a74 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	8a1b      	ldrh	r3, [r3, #16]
    9a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a66:	429a      	cmp	r2, r3
    9a68:	d204      	bcs.n	9a74 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9a6a:	687a      	ldr	r2, [r7, #4]
    9a6c:	7cd3      	ldrb	r3, [r2, #19]
    9a6e:	f043 0320 	orr.w	r3, r3, #32
    9a72:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	681a      	ldr	r2, [r3, #0]
    9a78:	687b      	ldr	r3, [r7, #4]
    9a7a:	689b      	ldr	r3, [r3, #8]
    9a7c:	4413      	add	r3, r2
    9a7e:	461a      	mov	r2, r3
    9a80:	7ffb      	ldrb	r3, [r7, #31]
    9a82:	2100      	movs	r1, #0
    9a84:	4618      	mov	r0, r3
    9a86:	4b20      	ldr	r3, [pc, #128]	; (9b08 <_usb_d_dev_out_next+0x280>)
    9a88:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9a8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a8c:	7ff8      	ldrb	r0, [r7, #31]
    9a8e:	2300      	movs	r3, #0
    9a90:	2100      	movs	r1, #0
    9a92:	4c1e      	ldr	r4, [pc, #120]	; (9b0c <_usb_d_dev_out_next+0x284>)
    9a94:	47a0      	blx	r4
			goto _out_rx_exec;
    9a96:	e01f      	b.n	9ad8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9a98:	7bfb      	ldrb	r3, [r7, #15]
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d006      	beq.n	9aac <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9a9e:	7ffb      	ldrb	r3, [r7, #31]
    9aa0:	222d      	movs	r2, #45	; 0x2d
    9aa2:	4619      	mov	r1, r3
    9aa4:	6a38      	ldr	r0, [r7, #32]
    9aa6:	4b1a      	ldr	r3, [pc, #104]	; (9b10 <_usb_d_dev_out_next+0x288>)
    9aa8:	4798      	blx	r3
    9aaa:	e005      	b.n	9ab8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9aac:	7ffb      	ldrb	r3, [r7, #31]
    9aae:	2225      	movs	r2, #37	; 0x25
    9ab0:	4619      	mov	r1, r3
    9ab2:	6a38      	ldr	r0, [r7, #32]
    9ab4:	4b16      	ldr	r3, [pc, #88]	; (9b10 <_usb_d_dev_out_next+0x288>)
    9ab6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9ab8:	7ffb      	ldrb	r3, [r7, #31]
    9aba:	2b00      	cmp	r3, #0
    9abc:	d107      	bne.n	9ace <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	68db      	ldr	r3, [r3, #12]
    9ac2:	461a      	mov	r2, r3
    9ac4:	7ffb      	ldrb	r3, [r7, #31]
    9ac6:	2100      	movs	r1, #0
    9ac8:	4618      	mov	r0, r3
    9aca:	4b0f      	ldr	r3, [pc, #60]	; (9b08 <_usb_d_dev_out_next+0x280>)
    9acc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9ace:	2100      	movs	r1, #0
    9ad0:	6878      	ldr	r0, [r7, #4]
    9ad2:	4b10      	ldr	r3, [pc, #64]	; (9b14 <_usb_d_dev_out_next+0x28c>)
    9ad4:	4798      	blx	r3
	return;
    9ad6:	e031      	b.n	9b3c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9ad8:	78fb      	ldrb	r3, [r7, #3]
    9ada:	f083 0301 	eor.w	r3, r3, #1
    9ade:	b2db      	uxtb	r3, r3
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	d025      	beq.n	9b30 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9ae4:	7bfb      	ldrb	r3, [r7, #15]
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d018      	beq.n	9b1c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9aea:	7ffb      	ldrb	r3, [r7, #31]
    9aec:	2101      	movs	r1, #1
    9aee:	4618      	mov	r0, r3
    9af0:	4b09      	ldr	r3, [pc, #36]	; (9b18 <_usb_d_dev_out_next+0x290>)
    9af2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9af4:	232d      	movs	r3, #45	; 0x2d
    9af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9afa:	e012      	b.n	9b22 <_usb_d_dev_out_next+0x29a>
    9afc:	20000c8c 	.word	0x20000c8c
    9b00:	00009069 	.word	0x00009069
    9b04:	0000ebcd 	.word	0x0000ebcd
    9b08:	00009095 	.word	0x00009095
    9b0c:	0000921d 	.word	0x0000921d
    9b10:	00008975 	.word	0x00008975
    9b14:	0000a999 	.word	0x0000a999
    9b18:	0000925d 	.word	0x0000925d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9b1c:	2325      	movs	r3, #37	; 0x25
    9b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9b22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9b26:	7ffb      	ldrb	r3, [r7, #31]
    9b28:	4619      	mov	r1, r3
    9b2a:	6a38      	ldr	r0, [r7, #32]
    9b2c:	4b05      	ldr	r3, [pc, #20]	; (9b44 <_usb_d_dev_out_next+0x2bc>)
    9b2e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9b30:	7ffb      	ldrb	r3, [r7, #31]
    9b32:	2201      	movs	r2, #1
    9b34:	2100      	movs	r1, #0
    9b36:	4618      	mov	r0, r3
    9b38:	4b03      	ldr	r3, [pc, #12]	; (9b48 <_usb_d_dev_out_next+0x2c0>)
    9b3a:	4798      	blx	r3
}
    9b3c:	372c      	adds	r7, #44	; 0x2c
    9b3e:	46bd      	mov	sp, r7
    9b40:	bd90      	pop	{r4, r7, pc}
    9b42:	bf00      	nop
    9b44:	00008949 	.word	0x00008949
    9b48:	000092ed 	.word	0x000092ed

00009b4c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9b4c:	b580      	push	{r7, lr}
    9b4e:	b084      	sub	sp, #16
    9b50:	af00      	add	r7, sp, #0
    9b52:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	7c9b      	ldrb	r3, [r3, #18]
    9b58:	f003 030f 	and.w	r3, r3, #15
    9b5c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	7cdb      	ldrb	r3, [r3, #19]
    9b62:	f003 0307 	and.w	r3, r3, #7
    9b66:	b2db      	uxtb	r3, r3
    9b68:	2b01      	cmp	r3, #1
    9b6a:	bf0c      	ite	eq
    9b6c:	2301      	moveq	r3, #1
    9b6e:	2300      	movne	r3, #0
    9b70:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9b72:	7bbb      	ldrb	r3, [r7, #14]
    9b74:	f083 0301 	eor.w	r3, r3, #1
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	2b00      	cmp	r3, #0
    9b7c:	d008      	beq.n	9b90 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9b7e:	7bfb      	ldrb	r3, [r7, #15]
    9b80:	4618      	mov	r0, r3
    9b82:	4b20      	ldr	r3, [pc, #128]	; (9c04 <_usb_d_dev_handle_setup+0xb8>)
    9b84:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9b86:	7bfb      	ldrb	r3, [r7, #15]
    9b88:	4618      	mov	r0, r3
    9b8a:	4b1f      	ldr	r3, [pc, #124]	; (9c08 <_usb_d_dev_handle_setup+0xbc>)
    9b8c:	4798      	blx	r3
		return;
    9b8e:	e036      	b.n	9bfe <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	7cdb      	ldrb	r3, [r3, #19]
    9b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b98:	b2db      	uxtb	r3, r3
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d010      	beq.n	9bc0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9b9e:	687a      	ldr	r2, [r7, #4]
    9ba0:	7cd3      	ldrb	r3, [r2, #19]
    9ba2:	f36f 1386 	bfc	r3, #6, #1
    9ba6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9ba8:	7bfb      	ldrb	r3, [r7, #15]
    9baa:	2200      	movs	r2, #0
    9bac:	2101      	movs	r1, #1
    9bae:	4618      	mov	r0, r3
    9bb0:	4b16      	ldr	r3, [pc, #88]	; (9c0c <_usb_d_dev_handle_setup+0xc0>)
    9bb2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9bb4:	7bfb      	ldrb	r3, [r7, #15]
    9bb6:	2200      	movs	r2, #0
    9bb8:	2100      	movs	r1, #0
    9bba:	4618      	mov	r0, r3
    9bbc:	4b14      	ldr	r3, [pc, #80]	; (9c10 <_usb_d_dev_handle_setup+0xc4>)
    9bbe:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9bc0:	687a      	ldr	r2, [r7, #4]
    9bc2:	7cd3      	ldrb	r3, [r2, #19]
    9bc4:	f36f 03c3 	bfc	r3, #3, #1
    9bc8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9bca:	7bfb      	ldrb	r3, [r7, #15]
    9bcc:	2100      	movs	r1, #0
    9bce:	4618      	mov	r0, r3
    9bd0:	4b10      	ldr	r3, [pc, #64]	; (9c14 <_usb_d_dev_handle_setup+0xc8>)
    9bd2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9bd4:	7bfb      	ldrb	r3, [r7, #15]
    9bd6:	2101      	movs	r1, #1
    9bd8:	4618      	mov	r0, r3
    9bda:	4b0e      	ldr	r3, [pc, #56]	; (9c14 <_usb_d_dev_handle_setup+0xc8>)
    9bdc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9bde:	7bfb      	ldrb	r3, [r7, #15]
    9be0:	216f      	movs	r1, #111	; 0x6f
    9be2:	4618      	mov	r0, r3
    9be4:	4b0c      	ldr	r3, [pc, #48]	; (9c18 <_usb_d_dev_handle_setup+0xcc>)
    9be6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9be8:	7bfb      	ldrb	r3, [r7, #15]
    9bea:	216f      	movs	r1, #111	; 0x6f
    9bec:	4618      	mov	r0, r3
    9bee:	4b0b      	ldr	r3, [pc, #44]	; (9c1c <_usb_d_dev_handle_setup+0xd0>)
    9bf0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9bf2:	4b0b      	ldr	r3, [pc, #44]	; (9c20 <_usb_d_dev_handle_setup+0xd4>)
    9bf4:	689b      	ldr	r3, [r3, #8]
    9bf6:	687a      	ldr	r2, [r7, #4]
    9bf8:	7c92      	ldrb	r2, [r2, #18]
    9bfa:	4610      	mov	r0, r2
    9bfc:	4798      	blx	r3
}
    9bfe:	3710      	adds	r7, #16
    9c00:	46bd      	mov	sp, r7
    9c02:	bd80      	pop	{r7, pc}
    9c04:	00008ff1 	.word	0x00008ff1
    9c08:	00008f9d 	.word	0x00008f9d
    9c0c:	00009295 	.word	0x00009295
    9c10:	000092ed 	.word	0x000092ed
    9c14:	0000925d 	.word	0x0000925d
    9c18:	00008d9d 	.word	0x00008d9d
    9c1c:	00008ded 	.word	0x00008ded
    9c20:	20000bc4 	.word	0x20000bc4

00009c24 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b084      	sub	sp, #16
    9c28:	af00      	add	r7, sp, #0
    9c2a:	6078      	str	r0, [r7, #4]
    9c2c:	460b      	mov	r3, r1
    9c2e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c30:	687b      	ldr	r3, [r7, #4]
    9c32:	7c9b      	ldrb	r3, [r3, #18]
    9c34:	f003 030f 	and.w	r3, r3, #15
    9c38:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9c3a:	78f9      	ldrb	r1, [r7, #3]
    9c3c:	7bfb      	ldrb	r3, [r7, #15]
    9c3e:	2200      	movs	r2, #0
    9c40:	4618      	mov	r0, r3
    9c42:	4b07      	ldr	r3, [pc, #28]	; (9c60 <_usb_d_dev_handle_stall+0x3c>)
    9c44:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9c46:	4b07      	ldr	r3, [pc, #28]	; (9c64 <_usb_d_dev_handle_stall+0x40>)
    9c48:	691b      	ldr	r3, [r3, #16]
    9c4a:	687a      	ldr	r2, [r7, #4]
    9c4c:	7c90      	ldrb	r0, [r2, #18]
    9c4e:	687a      	ldr	r2, [r7, #4]
    9c50:	6892      	ldr	r2, [r2, #8]
    9c52:	2101      	movs	r1, #1
    9c54:	4798      	blx	r3
}
    9c56:	bf00      	nop
    9c58:	3710      	adds	r7, #16
    9c5a:	46bd      	mov	sp, r7
    9c5c:	bd80      	pop	{r7, pc}
    9c5e:	bf00      	nop
    9c60:	00008f51 	.word	0x00008f51
    9c64:	20000bc4 	.word	0x20000bc4

00009c68 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c68:	b580      	push	{r7, lr}
    9c6a:	b088      	sub	sp, #32
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	6078      	str	r0, [r7, #4]
    9c70:	460b      	mov	r3, r1
    9c72:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9c74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c78:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	7c9b      	ldrb	r3, [r3, #18]
    9c7e:	f003 030f 	and.w	r3, r3, #15
    9c82:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9c84:	4b61      	ldr	r3, [pc, #388]	; (9e0c <_usb_d_dev_handle_trfail+0x1a4>)
    9c86:	881b      	ldrh	r3, [r3, #0]
    9c88:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9c8a:	7efb      	ldrb	r3, [r7, #27]
    9c8c:	015b      	lsls	r3, r3, #5
    9c8e:	4a60      	ldr	r2, [pc, #384]	; (9e10 <_usb_d_dev_handle_trfail+0x1a8>)
    9c90:	4413      	add	r3, r2
    9c92:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9c94:	78fb      	ldrb	r3, [r7, #3]
    9c96:	2b00      	cmp	r3, #0
    9c98:	d006      	beq.n	9ca8 <_usb_d_dev_handle_trfail+0x40>
    9c9a:	7efb      	ldrb	r3, [r7, #27]
    9c9c:	4619      	mov	r1, r3
    9c9e:	69f8      	ldr	r0, [r7, #28]
    9ca0:	4b5c      	ldr	r3, [pc, #368]	; (9e14 <_usb_d_dev_handle_trfail+0x1ac>)
    9ca2:	4798      	blx	r3
    9ca4:	4603      	mov	r3, r0
    9ca6:	e005      	b.n	9cb4 <_usb_d_dev_handle_trfail+0x4c>
    9ca8:	7efb      	ldrb	r3, [r7, #27]
    9caa:	4619      	mov	r1, r3
    9cac:	69f8      	ldr	r0, [r7, #28]
    9cae:	4b5a      	ldr	r3, [pc, #360]	; (9e18 <_usb_d_dev_handle_trfail+0x1b0>)
    9cb0:	4798      	blx	r3
    9cb2:	4603      	mov	r3, r0
    9cb4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	7cdb      	ldrb	r3, [r3, #19]
    9cba:	f003 0307 	and.w	r3, r3, #7
    9cbe:	b2db      	uxtb	r3, r3
    9cc0:	2b01      	cmp	r3, #1
    9cc2:	bf0c      	ite	eq
    9cc4:	2301      	moveq	r3, #1
    9cc6:	2300      	movne	r3, #0
    9cc8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9cca:	78fb      	ldrb	r3, [r7, #3]
    9ccc:	011b      	lsls	r3, r3, #4
    9cce:	697a      	ldr	r2, [r7, #20]
    9cd0:	4413      	add	r3, r2
    9cd2:	7a9b      	ldrb	r3, [r3, #10]
    9cd4:	b2db      	uxtb	r3, r3
    9cd6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9cd8:	7cfb      	ldrb	r3, [r7, #19]
    9cda:	2b02      	cmp	r3, #2
    9cdc:	d12f      	bne.n	9d3e <_usb_d_dev_handle_trfail+0xd6>
    9cde:	7b3b      	ldrb	r3, [r7, #12]
    9ce0:	f003 0301 	and.w	r3, r3, #1
    9ce4:	b2db      	uxtb	r3, r3
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d029      	beq.n	9d3e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9cea:	78fb      	ldrb	r3, [r7, #3]
    9cec:	011b      	lsls	r3, r3, #4
    9cee:	697a      	ldr	r2, [r7, #20]
    9cf0:	441a      	add	r2, r3
    9cf2:	7a93      	ldrb	r3, [r2, #10]
    9cf4:	f36f 0300 	bfc	r3, #0, #1
    9cf8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9cfa:	78fb      	ldrb	r3, [r7, #3]
    9cfc:	f107 0220 	add.w	r2, r7, #32
    9d00:	4413      	add	r3, r2
    9d02:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d06:	7efb      	ldrb	r3, [r7, #27]
    9d08:	4619      	mov	r1, r3
    9d0a:	69f8      	ldr	r0, [r7, #28]
    9d0c:	4b43      	ldr	r3, [pc, #268]	; (9e1c <_usb_d_dev_handle_trfail+0x1b4>)
    9d0e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d10:	78fb      	ldrb	r3, [r7, #3]
    9d12:	f107 0220 	add.w	r2, r7, #32
    9d16:	4413      	add	r3, r2
    9d18:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d1c:	7efb      	ldrb	r3, [r7, #27]
    9d1e:	4619      	mov	r1, r3
    9d20:	69f8      	ldr	r0, [r7, #28]
    9d22:	4b3f      	ldr	r3, [pc, #252]	; (9e20 <_usb_d_dev_handle_trfail+0x1b8>)
    9d24:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9d26:	78fb      	ldrb	r3, [r7, #3]
    9d28:	2b00      	cmp	r3, #0
    9d2a:	bf14      	ite	ne
    9d2c:	2301      	movne	r3, #1
    9d2e:	2300      	moveq	r3, #0
    9d30:	b2db      	uxtb	r3, r3
    9d32:	2204      	movs	r2, #4
    9d34:	4619      	mov	r1, r3
    9d36:	6878      	ldr	r0, [r7, #4]
    9d38:	4b3a      	ldr	r3, [pc, #232]	; (9e24 <_usb_d_dev_handle_trfail+0x1bc>)
    9d3a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9d3c:	e062      	b.n	9e04 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9d3e:	7b3b      	ldrb	r3, [r7, #12]
    9d40:	f003 0302 	and.w	r3, r3, #2
    9d44:	b2db      	uxtb	r3, r3
    9d46:	2b00      	cmp	r3, #0
    9d48:	d040      	beq.n	9dcc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9d4a:	78fb      	ldrb	r3, [r7, #3]
    9d4c:	011b      	lsls	r3, r3, #4
    9d4e:	697a      	ldr	r2, [r7, #20]
    9d50:	441a      	add	r2, r3
    9d52:	7a93      	ldrb	r3, [r2, #10]
    9d54:	f36f 0341 	bfc	r3, #1, #1
    9d58:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d5a:	78fb      	ldrb	r3, [r7, #3]
    9d5c:	f107 0220 	add.w	r2, r7, #32
    9d60:	4413      	add	r3, r2
    9d62:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d66:	7efb      	ldrb	r3, [r7, #27]
    9d68:	4619      	mov	r1, r3
    9d6a:	69f8      	ldr	r0, [r7, #28]
    9d6c:	4b2b      	ldr	r3, [pc, #172]	; (9e1c <_usb_d_dev_handle_trfail+0x1b4>)
    9d6e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d70:	78fb      	ldrb	r3, [r7, #3]
    9d72:	f107 0220 	add.w	r2, r7, #32
    9d76:	4413      	add	r3, r2
    9d78:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d7c:	7efb      	ldrb	r3, [r7, #27]
    9d7e:	4619      	mov	r1, r3
    9d80:	69f8      	ldr	r0, [r7, #28]
    9d82:	4b27      	ldr	r3, [pc, #156]	; (9e20 <_usb_d_dev_handle_trfail+0x1b8>)
    9d84:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9d86:	7cbb      	ldrb	r3, [r7, #18]
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d03b      	beq.n	9e04 <_usb_d_dev_handle_trfail+0x19c>
    9d8c:	687b      	ldr	r3, [r7, #4]
    9d8e:	7cdb      	ldrb	r3, [r3, #19]
    9d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d94:	b2db      	uxtb	r3, r3
    9d96:	2b00      	cmp	r3, #0
    9d98:	d034      	beq.n	9e04 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9d9a:	687b      	ldr	r3, [r7, #4]
    9d9c:	7cdb      	ldrb	r3, [r3, #19]
    9d9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9da2:	b2db      	uxtb	r3, r3
    9da4:	461a      	mov	r2, r3
    9da6:	78fb      	ldrb	r3, [r7, #3]
    9da8:	4293      	cmp	r3, r2
    9daa:	d02b      	beq.n	9e04 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9dac:	687b      	ldr	r3, [r7, #4]
    9dae:	7cdb      	ldrb	r3, [r3, #19]
    9db0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9db4:	b2db      	uxtb	r3, r3
    9db6:	2b00      	cmp	r3, #0
    9db8:	bf14      	ite	ne
    9dba:	2301      	movne	r3, #1
    9dbc:	2300      	moveq	r3, #0
    9dbe:	b2db      	uxtb	r3, r3
    9dc0:	2200      	movs	r2, #0
    9dc2:	4619      	mov	r1, r3
    9dc4:	6878      	ldr	r0, [r7, #4]
    9dc6:	4b17      	ldr	r3, [pc, #92]	; (9e24 <_usb_d_dev_handle_trfail+0x1bc>)
    9dc8:	4798      	blx	r3
}
    9dca:	e01b      	b.n	9e04 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9dcc:	78fa      	ldrb	r2, [r7, #3]
    9dce:	7efb      	ldrb	r3, [r7, #27]
    9dd0:	4611      	mov	r1, r2
    9dd2:	4618      	mov	r0, r3
    9dd4:	4b14      	ldr	r3, [pc, #80]	; (9e28 <_usb_d_dev_handle_trfail+0x1c0>)
    9dd6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9dd8:	78fb      	ldrb	r3, [r7, #3]
    9dda:	f107 0220 	add.w	r2, r7, #32
    9dde:	4413      	add	r3, r2
    9de0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9de4:	7efb      	ldrb	r3, [r7, #27]
    9de6:	4619      	mov	r1, r3
    9de8:	69f8      	ldr	r0, [r7, #28]
    9dea:	4b0c      	ldr	r3, [pc, #48]	; (9e1c <_usb_d_dev_handle_trfail+0x1b4>)
    9dec:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9dee:	78fb      	ldrb	r3, [r7, #3]
    9df0:	f107 0220 	add.w	r2, r7, #32
    9df4:	4413      	add	r3, r2
    9df6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9dfa:	7efb      	ldrb	r3, [r7, #27]
    9dfc:	4619      	mov	r1, r3
    9dfe:	69f8      	ldr	r0, [r7, #28]
    9e00:	4b07      	ldr	r3, [pc, #28]	; (9e20 <_usb_d_dev_handle_trfail+0x1b8>)
    9e02:	4798      	blx	r3
}
    9e04:	bf00      	nop
    9e06:	3720      	adds	r7, #32
    9e08:	46bd      	mov	sp, r7
    9e0a:	bd80      	pop	{r7, pc}
    9e0c:	0000f380 	.word	0x0000f380
    9e10:	20000c8c 	.word	0x20000c8c
    9e14:	000089d1 	.word	0x000089d1
    9e18:	000089a1 	.word	0x000089a1
    9e1c:	00008875 	.word	0x00008875
    9e20:	00008975 	.word	0x00008975
    9e24:	0000a9e1 	.word	0x0000a9e1
    9e28:	0000925d 	.word	0x0000925d

00009e2c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e2c:	b580      	push	{r7, lr}
    9e2e:	b082      	sub	sp, #8
    9e30:	af00      	add	r7, sp, #0
    9e32:	6078      	str	r0, [r7, #4]
    9e34:	460b      	mov	r3, r1
    9e36:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e38:	78fb      	ldrb	r3, [r7, #3]
    9e3a:	f003 0310 	and.w	r3, r3, #16
    9e3e:	2b00      	cmp	r3, #0
    9e40:	d003      	beq.n	9e4a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9e42:	6878      	ldr	r0, [r7, #4]
    9e44:	4b0c      	ldr	r3, [pc, #48]	; (9e78 <_usb_d_dev_trans_setup_isr+0x4c>)
    9e46:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9e48:	e012      	b.n	9e70 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e4a:	78fb      	ldrb	r3, [r7, #3]
    9e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e50:	2b00      	cmp	r3, #0
    9e52:	d004      	beq.n	9e5e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9e54:	2101      	movs	r1, #1
    9e56:	6878      	ldr	r0, [r7, #4]
    9e58:	4b08      	ldr	r3, [pc, #32]	; (9e7c <_usb_d_dev_trans_setup_isr+0x50>)
    9e5a:	4798      	blx	r3
}
    9e5c:	e008      	b.n	9e70 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9e5e:	78fb      	ldrb	r3, [r7, #3]
    9e60:	f003 0320 	and.w	r3, r3, #32
    9e64:	2b00      	cmp	r3, #0
    9e66:	d003      	beq.n	9e70 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9e68:	2100      	movs	r1, #0
    9e6a:	6878      	ldr	r0, [r7, #4]
    9e6c:	4b03      	ldr	r3, [pc, #12]	; (9e7c <_usb_d_dev_trans_setup_isr+0x50>)
    9e6e:	4798      	blx	r3
}
    9e70:	bf00      	nop
    9e72:	3708      	adds	r7, #8
    9e74:	46bd      	mov	sp, r7
    9e76:	bd80      	pop	{r7, pc}
    9e78:	00009b4d 	.word	0x00009b4d
    9e7c:	00009c25 	.word	0x00009c25

00009e80 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
    9e88:	460b      	mov	r3, r1
    9e8a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e8c:	78fb      	ldrb	r3, [r7, #3]
    9e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e92:	2b00      	cmp	r3, #0
    9e94:	d004      	beq.n	9ea0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9e96:	2101      	movs	r1, #1
    9e98:	6878      	ldr	r0, [r7, #4]
    9e9a:	4b1a      	ldr	r3, [pc, #104]	; (9f04 <_usb_d_dev_trans_in_isr+0x84>)
    9e9c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9e9e:	e02c      	b.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9ea0:	78fb      	ldrb	r3, [r7, #3]
    9ea2:	f003 0308 	and.w	r3, r3, #8
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d004      	beq.n	9eb4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9eaa:	2101      	movs	r1, #1
    9eac:	6878      	ldr	r0, [r7, #4]
    9eae:	4b16      	ldr	r3, [pc, #88]	; (9f08 <_usb_d_dev_trans_in_isr+0x88>)
    9eb0:	4798      	blx	r3
}
    9eb2:	e022      	b.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9eb4:	78fb      	ldrb	r3, [r7, #3]
    9eb6:	f003 0302 	and.w	r3, r3, #2
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d004      	beq.n	9ec8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9ebe:	2101      	movs	r1, #1
    9ec0:	6878      	ldr	r0, [r7, #4]
    9ec2:	4b12      	ldr	r3, [pc, #72]	; (9f0c <_usb_d_dev_trans_in_isr+0x8c>)
    9ec4:	4798      	blx	r3
}
    9ec6:	e018      	b.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	7cdb      	ldrb	r3, [r3, #19]
    9ecc:	f003 0307 	and.w	r3, r3, #7
    9ed0:	b2db      	uxtb	r3, r3
    9ed2:	2b01      	cmp	r3, #1
    9ed4:	d111      	bne.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9ed6:	78fb      	ldrb	r3, [r7, #3]
    9ed8:	f003 0304 	and.w	r3, r3, #4
    9edc:	2b00      	cmp	r3, #0
    9ede:	d004      	beq.n	9eea <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9ee0:	2100      	movs	r1, #0
    9ee2:	6878      	ldr	r0, [r7, #4]
    9ee4:	4b08      	ldr	r3, [pc, #32]	; (9f08 <_usb_d_dev_trans_in_isr+0x88>)
    9ee6:	4798      	blx	r3
}
    9ee8:	e007      	b.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9eea:	78fb      	ldrb	r3, [r7, #3]
    9eec:	f003 0310 	and.w	r3, r3, #16
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d002      	beq.n	9efa <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ef4:	6878      	ldr	r0, [r7, #4]
    9ef6:	4b06      	ldr	r3, [pc, #24]	; (9f10 <_usb_d_dev_trans_in_isr+0x90>)
    9ef8:	4798      	blx	r3
}
    9efa:	bf00      	nop
    9efc:	3708      	adds	r7, #8
    9efe:	46bd      	mov	sp, r7
    9f00:	bd80      	pop	{r7, pc}
    9f02:	bf00      	nop
    9f04:	00009c25 	.word	0x00009c25
    9f08:	00009c69 	.word	0x00009c69
    9f0c:	00009671 	.word	0x00009671
    9f10:	00009b4d 	.word	0x00009b4d

00009f14 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9f14:	b580      	push	{r7, lr}
    9f16:	b082      	sub	sp, #8
    9f18:	af00      	add	r7, sp, #0
    9f1a:	6078      	str	r0, [r7, #4]
    9f1c:	460b      	mov	r3, r1
    9f1e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9f20:	78fb      	ldrb	r3, [r7, #3]
    9f22:	f003 0320 	and.w	r3, r3, #32
    9f26:	2b00      	cmp	r3, #0
    9f28:	d004      	beq.n	9f34 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9f2a:	2100      	movs	r1, #0
    9f2c:	6878      	ldr	r0, [r7, #4]
    9f2e:	4b1a      	ldr	r3, [pc, #104]	; (9f98 <_usb_d_dev_trans_out_isr+0x84>)
    9f30:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9f32:	e02c      	b.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9f34:	78fb      	ldrb	r3, [r7, #3]
    9f36:	f003 0304 	and.w	r3, r3, #4
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d004      	beq.n	9f48 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9f3e:	2100      	movs	r1, #0
    9f40:	6878      	ldr	r0, [r7, #4]
    9f42:	4b16      	ldr	r3, [pc, #88]	; (9f9c <_usb_d_dev_trans_out_isr+0x88>)
    9f44:	4798      	blx	r3
}
    9f46:	e022      	b.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9f48:	78fb      	ldrb	r3, [r7, #3]
    9f4a:	f003 0301 	and.w	r3, r3, #1
    9f4e:	2b00      	cmp	r3, #0
    9f50:	d004      	beq.n	9f5c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9f52:	2101      	movs	r1, #1
    9f54:	6878      	ldr	r0, [r7, #4]
    9f56:	4b12      	ldr	r3, [pc, #72]	; (9fa0 <_usb_d_dev_trans_out_isr+0x8c>)
    9f58:	4798      	blx	r3
}
    9f5a:	e018      	b.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f5c:	687b      	ldr	r3, [r7, #4]
    9f5e:	7cdb      	ldrb	r3, [r3, #19]
    9f60:	f003 0307 	and.w	r3, r3, #7
    9f64:	b2db      	uxtb	r3, r3
    9f66:	2b01      	cmp	r3, #1
    9f68:	d111      	bne.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9f6a:	78fb      	ldrb	r3, [r7, #3]
    9f6c:	f003 0308 	and.w	r3, r3, #8
    9f70:	2b00      	cmp	r3, #0
    9f72:	d004      	beq.n	9f7e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9f74:	2101      	movs	r1, #1
    9f76:	6878      	ldr	r0, [r7, #4]
    9f78:	4b08      	ldr	r3, [pc, #32]	; (9f9c <_usb_d_dev_trans_out_isr+0x88>)
    9f7a:	4798      	blx	r3
}
    9f7c:	e007      	b.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9f7e:	78fb      	ldrb	r3, [r7, #3]
    9f80:	f003 0310 	and.w	r3, r3, #16
    9f84:	2b00      	cmp	r3, #0
    9f86:	d002      	beq.n	9f8e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9f88:	6878      	ldr	r0, [r7, #4]
    9f8a:	4b06      	ldr	r3, [pc, #24]	; (9fa4 <_usb_d_dev_trans_out_isr+0x90>)
    9f8c:	4798      	blx	r3
}
    9f8e:	bf00      	nop
    9f90:	3708      	adds	r7, #8
    9f92:	46bd      	mov	sp, r7
    9f94:	bd80      	pop	{r7, pc}
    9f96:	bf00      	nop
    9f98:	00009c25 	.word	0x00009c25
    9f9c:	00009c69 	.word	0x00009c69
    9fa0:	00009889 	.word	0x00009889
    9fa4:	00009b4d 	.word	0x00009b4d

00009fa8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9fa8:	b580      	push	{r7, lr}
    9faa:	b084      	sub	sp, #16
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]
    9fb0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9fb2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fb6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9fb8:	683b      	ldr	r3, [r7, #0]
    9fba:	7c9b      	ldrb	r3, [r3, #18]
    9fbc:	f003 030f 	and.w	r3, r3, #15
    9fc0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9fc2:	7afb      	ldrb	r3, [r7, #11]
    9fc4:	2201      	movs	r2, #1
    9fc6:	409a      	lsls	r2, r3
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	4013      	ands	r3, r2
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d03d      	beq.n	a04c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9fd0:	7afb      	ldrb	r3, [r7, #11]
    9fd2:	68fa      	ldr	r2, [r7, #12]
    9fd4:	3308      	adds	r3, #8
    9fd6:	015b      	lsls	r3, r3, #5
    9fd8:	4413      	add	r3, r2
    9fda:	3307      	adds	r3, #7
    9fdc:	781b      	ldrb	r3, [r3, #0]
    9fde:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9fe0:	7afb      	ldrb	r3, [r7, #11]
    9fe2:	68fa      	ldr	r2, [r7, #12]
    9fe4:	015b      	lsls	r3, r3, #5
    9fe6:	4413      	add	r3, r2
    9fe8:	f203 1309 	addw	r3, r3, #265	; 0x109
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9ff0:	7aba      	ldrb	r2, [r7, #10]
    9ff2:	7a7b      	ldrb	r3, [r7, #9]
    9ff4:	4013      	ands	r3, r2
    9ff6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9ff8:	7abb      	ldrb	r3, [r7, #10]
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d027      	beq.n	a04e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9ffe:	683b      	ldr	r3, [r7, #0]
    a000:	7cdb      	ldrb	r3, [r3, #19]
    a002:	f003 0307 	and.w	r3, r3, #7
    a006:	b2db      	uxtb	r3, r3
    a008:	2b01      	cmp	r3, #1
    a00a:	d10c      	bne.n	a026 <_usb_d_dev_handle_eps+0x7e>
    a00c:	683b      	ldr	r3, [r7, #0]
    a00e:	7cdb      	ldrb	r3, [r3, #19]
    a010:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a014:	b2db      	uxtb	r3, r3
    a016:	2b00      	cmp	r3, #0
    a018:	d105      	bne.n	a026 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a01a:	7abb      	ldrb	r3, [r7, #10]
    a01c:	4619      	mov	r1, r3
    a01e:	6838      	ldr	r0, [r7, #0]
    a020:	4b0c      	ldr	r3, [pc, #48]	; (a054 <_usb_d_dev_handle_eps+0xac>)
    a022:	4798      	blx	r3
    a024:	e013      	b.n	a04e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a026:	683b      	ldr	r3, [r7, #0]
    a028:	7cdb      	ldrb	r3, [r3, #19]
    a02a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a02e:	b2db      	uxtb	r3, r3
    a030:	2b00      	cmp	r3, #0
    a032:	d005      	beq.n	a040 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a034:	7abb      	ldrb	r3, [r7, #10]
    a036:	4619      	mov	r1, r3
    a038:	6838      	ldr	r0, [r7, #0]
    a03a:	4b07      	ldr	r3, [pc, #28]	; (a058 <_usb_d_dev_handle_eps+0xb0>)
    a03c:	4798      	blx	r3
    a03e:	e006      	b.n	a04e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a040:	7abb      	ldrb	r3, [r7, #10]
    a042:	4619      	mov	r1, r3
    a044:	6838      	ldr	r0, [r7, #0]
    a046:	4b05      	ldr	r3, [pc, #20]	; (a05c <_usb_d_dev_handle_eps+0xb4>)
    a048:	4798      	blx	r3
    a04a:	e000      	b.n	a04e <_usb_d_dev_handle_eps+0xa6>
		return;
    a04c:	bf00      	nop
		}
	}
}
    a04e:	3710      	adds	r7, #16
    a050:	46bd      	mov	sp, r7
    a052:	bd80      	pop	{r7, pc}
    a054:	00009e2d 	.word	0x00009e2d
    a058:	00009e81 	.word	0x00009e81
    a05c:	00009f15 	.word	0x00009f15

0000a060 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a060:	b580      	push	{r7, lr}
    a062:	b084      	sub	sp, #16
    a064:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a066:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a06a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a06c:	68bb      	ldr	r3, [r7, #8]
    a06e:	8c1b      	ldrh	r3, [r3, #32]
    a070:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a072:	88fb      	ldrh	r3, [r7, #6]
    a074:	2b00      	cmp	r3, #0
    a076:	d104      	bne.n	a082 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a078:	4b13      	ldr	r3, [pc, #76]	; (a0c8 <_usb_d_dev_handler+0x68>)
    a07a:	4798      	blx	r3
    a07c:	4603      	mov	r3, r0
    a07e:	2b00      	cmp	r3, #0
    a080:	d11e      	bne.n	a0c0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a082:	2300      	movs	r3, #0
    a084:	73fb      	strb	r3, [r7, #15]
    a086:	e017      	b.n	a0b8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a088:	7bfa      	ldrb	r2, [r7, #15]
    a08a:	4613      	mov	r3, r2
    a08c:	009b      	lsls	r3, r3, #2
    a08e:	4413      	add	r3, r2
    a090:	009b      	lsls	r3, r3, #2
    a092:	3310      	adds	r3, #16
    a094:	4a0d      	ldr	r2, [pc, #52]	; (a0cc <_usb_d_dev_handler+0x6c>)
    a096:	4413      	add	r3, r2
    a098:	3304      	adds	r3, #4
    a09a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a09c:	683b      	ldr	r3, [r7, #0]
    a09e:	7c9b      	ldrb	r3, [r3, #18]
    a0a0:	2bff      	cmp	r3, #255	; 0xff
    a0a2:	d005      	beq.n	a0b0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a0a4:	88fb      	ldrh	r3, [r7, #6]
    a0a6:	6839      	ldr	r1, [r7, #0]
    a0a8:	4618      	mov	r0, r3
    a0aa:	4b09      	ldr	r3, [pc, #36]	; (a0d0 <_usb_d_dev_handler+0x70>)
    a0ac:	4798      	blx	r3
    a0ae:	e000      	b.n	a0b2 <_usb_d_dev_handler+0x52>
			continue;
    a0b0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a0b2:	7bfb      	ldrb	r3, [r7, #15]
    a0b4:	3301      	adds	r3, #1
    a0b6:	73fb      	strb	r3, [r7, #15]
    a0b8:	7bfb      	ldrb	r3, [r7, #15]
    a0ba:	2b08      	cmp	r3, #8
    a0bc:	d9e4      	bls.n	a088 <_usb_d_dev_handler+0x28>
    a0be:	e000      	b.n	a0c2 <_usb_d_dev_handler+0x62>
			return;
    a0c0:	bf00      	nop
	}
}
    a0c2:	3710      	adds	r7, #16
    a0c4:	46bd      	mov	sp, r7
    a0c6:	bd80      	pop	{r7, pc}
    a0c8:	000095b9 	.word	0x000095b9
    a0cc:	20000bc4 	.word	0x20000bc4
    a0d0:	00009fa9 	.word	0x00009fa9

0000a0d4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a0d4:	b580      	push	{r7, lr}
    a0d6:	b082      	sub	sp, #8
    a0d8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a0da:	2300      	movs	r3, #0
    a0dc:	71fb      	strb	r3, [r7, #7]
    a0de:	e023      	b.n	a128 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a0e0:	79fa      	ldrb	r2, [r7, #7]
    a0e2:	4613      	mov	r3, r2
    a0e4:	009b      	lsls	r3, r3, #2
    a0e6:	4413      	add	r3, r2
    a0e8:	009b      	lsls	r3, r3, #2
    a0ea:	3310      	adds	r3, #16
    a0ec:	4a14      	ldr	r2, [pc, #80]	; (a140 <_usb_d_dev_reset_epts+0x6c>)
    a0ee:	4413      	add	r3, r2
    a0f0:	3304      	adds	r3, #4
    a0f2:	2103      	movs	r1, #3
    a0f4:	4618      	mov	r0, r3
    a0f6:	4b13      	ldr	r3, [pc, #76]	; (a144 <_usb_d_dev_reset_epts+0x70>)
    a0f8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a0fa:	79fa      	ldrb	r2, [r7, #7]
    a0fc:	4910      	ldr	r1, [pc, #64]	; (a140 <_usb_d_dev_reset_epts+0x6c>)
    a0fe:	4613      	mov	r3, r2
    a100:	009b      	lsls	r3, r3, #2
    a102:	4413      	add	r3, r2
    a104:	009b      	lsls	r3, r3, #2
    a106:	440b      	add	r3, r1
    a108:	3326      	adds	r3, #38	; 0x26
    a10a:	22ff      	movs	r2, #255	; 0xff
    a10c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a10e:	79fa      	ldrb	r2, [r7, #7]
    a110:	490b      	ldr	r1, [pc, #44]	; (a140 <_usb_d_dev_reset_epts+0x6c>)
    a112:	4613      	mov	r3, r2
    a114:	009b      	lsls	r3, r3, #2
    a116:	4413      	add	r3, r2
    a118:	009b      	lsls	r3, r3, #2
    a11a:	440b      	add	r3, r1
    a11c:	3327      	adds	r3, #39	; 0x27
    a11e:	2200      	movs	r2, #0
    a120:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a122:	79fb      	ldrb	r3, [r7, #7]
    a124:	3301      	adds	r3, #1
    a126:	71fb      	strb	r3, [r7, #7]
    a128:	79fb      	ldrb	r3, [r7, #7]
    a12a:	2b08      	cmp	r3, #8
    a12c:	d9d8      	bls.n	a0e0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a12e:	22a0      	movs	r2, #160	; 0xa0
    a130:	2100      	movs	r1, #0
    a132:	4805      	ldr	r0, [pc, #20]	; (a148 <_usb_d_dev_reset_epts+0x74>)
    a134:	4b05      	ldr	r3, [pc, #20]	; (a14c <_usb_d_dev_reset_epts+0x78>)
    a136:	4798      	blx	r3
}
    a138:	bf00      	nop
    a13a:	3708      	adds	r7, #8
    a13c:	46bd      	mov	sp, r7
    a13e:	bd80      	pop	{r7, pc}
    a140:	20000bc4 	.word	0x20000bc4
    a144:	0000a999 	.word	0x0000a999
    a148:	20000c8c 	.word	0x20000c8c
    a14c:	0000ed01 	.word	0x0000ed01

0000a150 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a150:	b580      	push	{r7, lr}
    a152:	b084      	sub	sp, #16
    a154:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a156:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a15a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a15c:	2301      	movs	r3, #1
    a15e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a160:	2304      	movs	r3, #4
    a162:	713b      	strb	r3, [r7, #4]
    a164:	2300      	movs	r3, #0
    a166:	717b      	strb	r3, [r7, #5]
    a168:	2300      	movs	r3, #0
    a16a:	71bb      	strb	r3, [r7, #6]
    a16c:	2300      	movs	r3, #0
    a16e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a170:	2101      	movs	r1, #1
    a172:	68f8      	ldr	r0, [r7, #12]
    a174:	4b26      	ldr	r3, [pc, #152]	; (a210 <_usb_d_dev_init+0xc0>)
    a176:	4798      	blx	r3
    a178:	4603      	mov	r3, r0
    a17a:	f083 0301 	eor.w	r3, r3, #1
    a17e:	b2db      	uxtb	r3, r3
    a180:	2b00      	cmp	r3, #0
    a182:	d011      	beq.n	a1a8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a184:	2102      	movs	r1, #2
    a186:	68f8      	ldr	r0, [r7, #12]
    a188:	4b22      	ldr	r3, [pc, #136]	; (a214 <_usb_d_dev_init+0xc4>)
    a18a:	4798      	blx	r3
    a18c:	4603      	mov	r3, r0
    a18e:	2b00      	cmp	r3, #0
    a190:	d006      	beq.n	a1a0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a192:	68f8      	ldr	r0, [r7, #12]
    a194:	4b20      	ldr	r3, [pc, #128]	; (a218 <_usb_d_dev_init+0xc8>)
    a196:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a198:	2102      	movs	r1, #2
    a19a:	68f8      	ldr	r0, [r7, #12]
    a19c:	4b1f      	ldr	r3, [pc, #124]	; (a21c <_usb_d_dev_init+0xcc>)
    a19e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a1a0:	2101      	movs	r1, #1
    a1a2:	68f8      	ldr	r0, [r7, #12]
    a1a4:	4b1e      	ldr	r3, [pc, #120]	; (a220 <_usb_d_dev_init+0xd0>)
    a1a6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a1a8:	2101      	movs	r1, #1
    a1aa:	68f8      	ldr	r0, [r7, #12]
    a1ac:	4b1b      	ldr	r3, [pc, #108]	; (a21c <_usb_d_dev_init+0xcc>)
    a1ae:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a1b0:	4b1c      	ldr	r3, [pc, #112]	; (a224 <_usb_d_dev_init+0xd4>)
    a1b2:	4a1d      	ldr	r2, [pc, #116]	; (a228 <_usb_d_dev_init+0xd8>)
    a1b4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a1b6:	4b1b      	ldr	r3, [pc, #108]	; (a224 <_usb_d_dev_init+0xd4>)
    a1b8:	4a1b      	ldr	r2, [pc, #108]	; (a228 <_usb_d_dev_init+0xd8>)
    a1ba:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a1bc:	4b19      	ldr	r3, [pc, #100]	; (a224 <_usb_d_dev_init+0xd4>)
    a1be:	4a1a      	ldr	r2, [pc, #104]	; (a228 <_usb_d_dev_init+0xd8>)
    a1c0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a1c2:	4b18      	ldr	r3, [pc, #96]	; (a224 <_usb_d_dev_init+0xd4>)
    a1c4:	4a18      	ldr	r2, [pc, #96]	; (a228 <_usb_d_dev_init+0xd8>)
    a1c6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a1c8:	4b16      	ldr	r3, [pc, #88]	; (a224 <_usb_d_dev_init+0xd4>)
    a1ca:	4a17      	ldr	r2, [pc, #92]	; (a228 <_usb_d_dev_init+0xd8>)
    a1cc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a1ce:	4b17      	ldr	r3, [pc, #92]	; (a22c <_usb_d_dev_init+0xdc>)
    a1d0:	4798      	blx	r3

	_usb_load_calib();
    a1d2:	4b17      	ldr	r3, [pc, #92]	; (a230 <_usb_d_dev_init+0xe0>)
    a1d4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a1d6:	2104      	movs	r1, #4
    a1d8:	68f8      	ldr	r0, [r7, #12]
    a1da:	4b11      	ldr	r3, [pc, #68]	; (a220 <_usb_d_dev_init+0xd0>)
    a1dc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a1de:	4b15      	ldr	r3, [pc, #84]	; (a234 <_usb_d_dev_init+0xe4>)
    a1e0:	4619      	mov	r1, r3
    a1e2:	68f8      	ldr	r0, [r7, #12]
    a1e4:	4b14      	ldr	r3, [pc, #80]	; (a238 <_usb_d_dev_init+0xe8>)
    a1e6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a1e8:	7afb      	ldrb	r3, [r7, #11]
    a1ea:	f107 0210 	add.w	r2, r7, #16
    a1ee:	4413      	add	r3, r2
    a1f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a1f4:	f043 0301 	orr.w	r3, r3, #1
    a1f8:	b2db      	uxtb	r3, r3
    a1fa:	b29b      	uxth	r3, r3
    a1fc:	4619      	mov	r1, r3
    a1fe:	68f8      	ldr	r0, [r7, #12]
    a200:	4b0e      	ldr	r3, [pc, #56]	; (a23c <_usb_d_dev_init+0xec>)
    a202:	4798      	blx	r3

	return ERR_NONE;
    a204:	2300      	movs	r3, #0
}
    a206:	4618      	mov	r0, r3
    a208:	3710      	adds	r7, #16
    a20a:	46bd      	mov	sp, r7
    a20c:	bd80      	pop	{r7, pc}
    a20e:	bf00      	nop
    a210:	000087e9 	.word	0x000087e9
    a214:	00008b39 	.word	0x00008b39
    a218:	00008b0d 	.word	0x00008b0d
    a21c:	000087bf 	.word	0x000087bf
    a220:	00008b69 	.word	0x00008b69
    a224:	20000bc4 	.word	0x20000bc4
    a228:	00008c31 	.word	0x00008c31
    a22c:	0000a0d5 	.word	0x0000a0d5
    a230:	00008c49 	.word	0x00008c49
    a234:	20000c8c 	.word	0x20000c8c
    a238:	00008c15 	.word	0x00008c15
    a23c:	00008bd9 	.word	0x00008bd9

0000a240 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a240:	b580      	push	{r7, lr}
    a242:	b082      	sub	sp, #8
    a244:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a246:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a24a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a24c:	2103      	movs	r1, #3
    a24e:	6878      	ldr	r0, [r7, #4]
    a250:	4b17      	ldr	r3, [pc, #92]	; (a2b0 <_usb_d_dev_enable+0x70>)
    a252:	4798      	blx	r3
    a254:	4603      	mov	r3, r0
    a256:	2b00      	cmp	r3, #0
    a258:	d002      	beq.n	a260 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a25a:	f06f 0310 	mvn.w	r3, #16
    a25e:	e023      	b.n	a2a8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a260:	6878      	ldr	r0, [r7, #4]
    a262:	4b14      	ldr	r3, [pc, #80]	; (a2b4 <_usb_d_dev_enable+0x74>)
    a264:	4798      	blx	r3
    a266:	4603      	mov	r3, r0
    a268:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a26a:	78fb      	ldrb	r3, [r7, #3]
    a26c:	f003 0302 	and.w	r3, r3, #2
    a270:	2b00      	cmp	r3, #0
    a272:	d107      	bne.n	a284 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a274:	78fb      	ldrb	r3, [r7, #3]
    a276:	f043 0302 	orr.w	r3, r3, #2
    a27a:	b2db      	uxtb	r3, r3
    a27c:	4619      	mov	r1, r3
    a27e:	6878      	ldr	r0, [r7, #4]
    a280:	4b0d      	ldr	r3, [pc, #52]	; (a2b8 <_usb_d_dev_enable+0x78>)
    a282:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a284:	2050      	movs	r0, #80	; 0x50
    a286:	4b0d      	ldr	r3, [pc, #52]	; (a2bc <_usb_d_dev_enable+0x7c>)
    a288:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a28a:	2051      	movs	r0, #81	; 0x51
    a28c:	4b0b      	ldr	r3, [pc, #44]	; (a2bc <_usb_d_dev_enable+0x7c>)
    a28e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a290:	2052      	movs	r0, #82	; 0x52
    a292:	4b0a      	ldr	r3, [pc, #40]	; (a2bc <_usb_d_dev_enable+0x7c>)
    a294:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a296:	2053      	movs	r0, #83	; 0x53
    a298:	4b08      	ldr	r3, [pc, #32]	; (a2bc <_usb_d_dev_enable+0x7c>)
    a29a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a29c:	f240 218d 	movw	r1, #653	; 0x28d
    a2a0:	6878      	ldr	r0, [r7, #4]
    a2a2:	4b07      	ldr	r3, [pc, #28]	; (a2c0 <_usb_d_dev_enable+0x80>)
    a2a4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a2a6:	2300      	movs	r3, #0
}
    a2a8:	4618      	mov	r0, r3
    a2aa:	3708      	adds	r7, #8
    a2ac:	46bd      	mov	sp, r7
    a2ae:	bd80      	pop	{r7, pc}
    a2b0:	00008ae3 	.word	0x00008ae3
    a2b4:	00008b91 	.word	0x00008b91
    a2b8:	00008b69 	.word	0x00008b69
    a2bc:	000086f5 	.word	0x000086f5
    a2c0:	00008a8d 	.word	0x00008a8d

0000a2c4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a2c4:	b580      	push	{r7, lr}
    a2c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a2c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2cc:	4b01      	ldr	r3, [pc, #4]	; (a2d4 <_usb_d_dev_attach+0x10>)
    a2ce:	4798      	blx	r3
}
    a2d0:	bf00      	nop
    a2d2:	bd80      	pop	{r7, pc}
    a2d4:	00008bb5 	.word	0x00008bb5

0000a2d8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a2d8:	b580      	push	{r7, lr}
    a2da:	b082      	sub	sp, #8
    a2dc:	af00      	add	r7, sp, #0
    a2de:	4603      	mov	r3, r0
    a2e0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a2e2:	79fb      	ldrb	r3, [r7, #7]
    a2e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a2e8:	b2db      	uxtb	r3, r3
    a2ea:	4619      	mov	r1, r3
    a2ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2f0:	4b02      	ldr	r3, [pc, #8]	; (a2fc <_usb_d_dev_set_address+0x24>)
    a2f2:	4798      	blx	r3
}
    a2f4:	bf00      	nop
    a2f6:	3708      	adds	r7, #8
    a2f8:	46bd      	mov	sp, r7
    a2fa:	bd80      	pop	{r7, pc}
    a2fc:	00008bf7 	.word	0x00008bf7

0000a300 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a300:	b590      	push	{r4, r7, lr}
    a302:	b085      	sub	sp, #20
    a304:	af00      	add	r7, sp, #0
    a306:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a308:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a30c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	7c9b      	ldrb	r3, [r3, #18]
    a312:	f003 030f 	and.w	r3, r3, #15
    a316:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a318:	687b      	ldr	r3, [r7, #4]
    a31a:	68db      	ldr	r3, [r3, #12]
    a31c:	461a      	mov	r2, r3
    a31e:	7afb      	ldrb	r3, [r7, #11]
    a320:	2100      	movs	r1, #0
    a322:	4618      	mov	r0, r3
    a324:	4b0f      	ldr	r3, [pc, #60]	; (a364 <_usb_d_dev_trans_setup+0x64>)
    a326:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a328:	687b      	ldr	r3, [r7, #4]
    a32a:	8a1b      	ldrh	r3, [r3, #16]
    a32c:	461a      	mov	r2, r3
    a32e:	7af8      	ldrb	r0, [r7, #11]
    a330:	2300      	movs	r3, #0
    a332:	2100      	movs	r1, #0
    a334:	4c0c      	ldr	r4, [pc, #48]	; (a368 <_usb_d_dev_trans_setup+0x68>)
    a336:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a338:	7afb      	ldrb	r3, [r7, #11]
    a33a:	22b0      	movs	r2, #176	; 0xb0
    a33c:	4619      	mov	r1, r3
    a33e:	68f8      	ldr	r0, [r7, #12]
    a340:	4b0a      	ldr	r3, [pc, #40]	; (a36c <_usb_d_dev_trans_setup+0x6c>)
    a342:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a344:	7afb      	ldrb	r3, [r7, #11]
    a346:	2200      	movs	r2, #0
    a348:	2100      	movs	r1, #0
    a34a:	4618      	mov	r0, r3
    a34c:	4b08      	ldr	r3, [pc, #32]	; (a370 <_usb_d_dev_trans_setup+0x70>)
    a34e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a350:	7afb      	ldrb	r3, [r7, #11]
    a352:	2210      	movs	r2, #16
    a354:	4619      	mov	r1, r3
    a356:	68f8      	ldr	r0, [r7, #12]
    a358:	4b06      	ldr	r3, [pc, #24]	; (a374 <_usb_d_dev_trans_setup+0x74>)
    a35a:	4798      	blx	r3
}
    a35c:	bf00      	nop
    a35e:	3714      	adds	r7, #20
    a360:	46bd      	mov	sp, r7
    a362:	bd90      	pop	{r4, r7, pc}
    a364:	00009095 	.word	0x00009095
    a368:	0000921d 	.word	0x0000921d
    a36c:	000088f5 	.word	0x000088f5
    a370:	000092ed 	.word	0x000092ed
    a374:	00008949 	.word	0x00008949

0000a378 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a378:	b580      	push	{r7, lr}
    a37a:	b088      	sub	sp, #32
    a37c:	af00      	add	r7, sp, #0
    a37e:	4603      	mov	r3, r0
    a380:	71fb      	strb	r3, [r7, #7]
    a382:	460b      	mov	r3, r1
    a384:	71bb      	strb	r3, [r7, #6]
    a386:	4613      	mov	r3, r2
    a388:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a38a:	79fb      	ldrb	r3, [r7, #7]
    a38c:	f003 030f 	and.w	r3, r3, #15
    a390:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a392:	79fb      	ldrb	r3, [r7, #7]
    a394:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a398:	2b00      	cmp	r3, #0
    a39a:	bf14      	ite	ne
    a39c:	2301      	movne	r3, #1
    a39e:	2300      	moveq	r3, #0
    a3a0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a3a2:	7fba      	ldrb	r2, [r7, #30]
    a3a4:	7ffb      	ldrb	r3, [r7, #31]
    a3a6:	4611      	mov	r1, r2
    a3a8:	4618      	mov	r0, r3
    a3aa:	4b3e      	ldr	r3, [pc, #248]	; (a4a4 <_usb_d_dev_ep_init+0x12c>)
    a3ac:	4798      	blx	r3
    a3ae:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a3b0:	79bb      	ldrb	r3, [r7, #6]
    a3b2:	f003 0303 	and.w	r3, r3, #3
    a3b6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a3b8:	7ffa      	ldrb	r2, [r7, #31]
    a3ba:	4613      	mov	r3, r2
    a3bc:	005b      	lsls	r3, r3, #1
    a3be:	4413      	add	r3, r2
    a3c0:	009b      	lsls	r3, r3, #2
    a3c2:	4a39      	ldr	r2, [pc, #228]	; (a4a8 <_usb_d_dev_ep_init+0x130>)
    a3c4:	4413      	add	r3, r2
    a3c6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a3c8:	7ffb      	ldrb	r3, [r7, #31]
    a3ca:	2b04      	cmp	r3, #4
    a3cc:	d902      	bls.n	a3d4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a3ce:	f06f 0311 	mvn.w	r3, #17
    a3d2:	e063      	b.n	a49c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a3d4:	69bb      	ldr	r3, [r7, #24]
    a3d6:	7c9b      	ldrb	r3, [r3, #18]
    a3d8:	2bff      	cmp	r3, #255	; 0xff
    a3da:	d002      	beq.n	a3e2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a3dc:	f06f 0313 	mvn.w	r3, #19
    a3e0:	e05c      	b.n	a49c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a3e2:	7dfb      	ldrb	r3, [r7, #23]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d11f      	bne.n	a428 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a3e8:	7fbb      	ldrb	r3, [r7, #30]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	bf14      	ite	ne
    a3ee:	2301      	movne	r3, #1
    a3f0:	2300      	moveq	r3, #0
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	f083 0301 	eor.w	r3, r3, #1
    a3f8:	b2db      	uxtb	r3, r3
    a3fa:	f003 0301 	and.w	r3, r3, #1
    a3fe:	b2da      	uxtb	r2, r3
    a400:	7ffb      	ldrb	r3, [r7, #31]
    a402:	4611      	mov	r1, r2
    a404:	4618      	mov	r0, r3
    a406:	4b27      	ldr	r3, [pc, #156]	; (a4a4 <_usb_d_dev_ep_init+0x12c>)
    a408:	4798      	blx	r3
    a40a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a40c:	68fb      	ldr	r3, [r7, #12]
    a40e:	7c9b      	ldrb	r3, [r3, #18]
    a410:	2bff      	cmp	r3, #255	; 0xff
    a412:	d002      	beq.n	a41a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a414:	f06f 0313 	mvn.w	r3, #19
    a418:	e040      	b.n	a49c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a41a:	693b      	ldr	r3, [r7, #16]
    a41c:	681b      	ldr	r3, [r3, #0]
    a41e:	2b00      	cmp	r3, #0
    a420:	d102      	bne.n	a428 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a422:	f06f 0312 	mvn.w	r3, #18
    a426:	e039      	b.n	a49c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a428:	7fbb      	ldrb	r3, [r7, #30]
    a42a:	2b00      	cmp	r3, #0
    a42c:	d007      	beq.n	a43e <_usb_d_dev_ep_init+0xc6>
    a42e:	693b      	ldr	r3, [r7, #16]
    a430:	685b      	ldr	r3, [r3, #4]
    a432:	2b00      	cmp	r3, #0
    a434:	bf14      	ite	ne
    a436:	2301      	movne	r3, #1
    a438:	2300      	moveq	r3, #0
    a43a:	b2db      	uxtb	r3, r3
    a43c:	e006      	b.n	a44c <_usb_d_dev_ep_init+0xd4>
    a43e:	693b      	ldr	r3, [r7, #16]
    a440:	681b      	ldr	r3, [r3, #0]
    a442:	2b00      	cmp	r3, #0
    a444:	bf14      	ite	ne
    a446:	2301      	movne	r3, #1
    a448:	2300      	moveq	r3, #0
    a44a:	b2db      	uxtb	r3, r3
    a44c:	2b00      	cmp	r3, #0
    a44e:	d00f      	beq.n	a470 <_usb_d_dev_ep_init+0xf8>
    a450:	7fbb      	ldrb	r3, [r7, #30]
    a452:	2b00      	cmp	r3, #0
    a454:	d003      	beq.n	a45e <_usb_d_dev_ep_init+0xe6>
    a456:	693b      	ldr	r3, [r7, #16]
    a458:	895b      	ldrh	r3, [r3, #10]
    a45a:	461a      	mov	r2, r3
    a45c:	e002      	b.n	a464 <_usb_d_dev_ep_init+0xec>
    a45e:	693b      	ldr	r3, [r7, #16]
    a460:	891b      	ldrh	r3, [r3, #8]
    a462:	461a      	mov	r2, r3
    a464:	88bb      	ldrh	r3, [r7, #4]
    a466:	429a      	cmp	r2, r3
    a468:	da02      	bge.n	a470 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a46a:	f06f 0312 	mvn.w	r3, #18
    a46e:	e015      	b.n	a49c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a470:	7fbb      	ldrb	r3, [r7, #30]
    a472:	2b00      	cmp	r3, #0
    a474:	d002      	beq.n	a47c <_usb_d_dev_ep_init+0x104>
    a476:	693b      	ldr	r3, [r7, #16]
    a478:	685b      	ldr	r3, [r3, #4]
    a47a:	e001      	b.n	a480 <_usb_d_dev_ep_init+0x108>
    a47c:	693b      	ldr	r3, [r7, #16]
    a47e:	681b      	ldr	r3, [r3, #0]
    a480:	69ba      	ldr	r2, [r7, #24]
    a482:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a484:	69bb      	ldr	r3, [r7, #24]
    a486:	88ba      	ldrh	r2, [r7, #4]
    a488:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a48a:	7dfb      	ldrb	r3, [r7, #23]
    a48c:	3301      	adds	r3, #1
    a48e:	b2da      	uxtb	r2, r3
    a490:	69bb      	ldr	r3, [r7, #24]
    a492:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a494:	69bb      	ldr	r3, [r7, #24]
    a496:	79fa      	ldrb	r2, [r7, #7]
    a498:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a49a:	2300      	movs	r3, #0
}
    a49c:	4618      	mov	r0, r3
    a49e:	3720      	adds	r7, #32
    a4a0:	46bd      	mov	sp, r7
    a4a2:	bd80      	pop	{r7, pc}
    a4a4:	000093a9 	.word	0x000093a9
    a4a8:	0000f344 	.word	0x0000f344

0000a4ac <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a4ac:	b580      	push	{r7, lr}
    a4ae:	b086      	sub	sp, #24
    a4b0:	af00      	add	r7, sp, #0
    a4b2:	4603      	mov	r3, r0
    a4b4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a4b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4ba:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a4bc:	79fb      	ldrb	r3, [r7, #7]
    a4be:	f003 030f 	and.w	r3, r3, #15
    a4c2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a4c4:	79fb      	ldrb	r3, [r7, #7]
    a4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	bf14      	ite	ne
    a4ce:	2301      	movne	r3, #1
    a4d0:	2300      	moveq	r3, #0
    a4d2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a4d4:	7cba      	ldrb	r2, [r7, #18]
    a4d6:	7cfb      	ldrb	r3, [r7, #19]
    a4d8:	4611      	mov	r1, r2
    a4da:	4618      	mov	r0, r3
    a4dc:	4b2a      	ldr	r3, [pc, #168]	; (a588 <_usb_d_dev_ep_deinit+0xdc>)
    a4de:	4798      	blx	r3
    a4e0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a4e2:	7cfb      	ldrb	r3, [r7, #19]
    a4e4:	2b04      	cmp	r3, #4
    a4e6:	d84a      	bhi.n	a57e <_usb_d_dev_ep_deinit+0xd2>
    a4e8:	68fb      	ldr	r3, [r7, #12]
    a4ea:	7c9b      	ldrb	r3, [r3, #18]
    a4ec:	2bff      	cmp	r3, #255	; 0xff
    a4ee:	d046      	beq.n	a57e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a4f0:	7cbb      	ldrb	r3, [r7, #18]
    a4f2:	2203      	movs	r2, #3
    a4f4:	4619      	mov	r1, r3
    a4f6:	68f8      	ldr	r0, [r7, #12]
    a4f8:	4b24      	ldr	r3, [pc, #144]	; (a58c <_usb_d_dev_ep_deinit+0xe0>)
    a4fa:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a4fc:	68fb      	ldr	r3, [r7, #12]
    a4fe:	7cdb      	ldrb	r3, [r3, #19]
    a500:	f003 0307 	and.w	r3, r3, #7
    a504:	b2db      	uxtb	r3, r3
    a506:	2b01      	cmp	r3, #1
    a508:	d107      	bne.n	a51a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a50a:	79fb      	ldrb	r3, [r7, #7]
    a50c:	697a      	ldr	r2, [r7, #20]
    a50e:	3308      	adds	r3, #8
    a510:	015b      	lsls	r3, r3, #5
    a512:	4413      	add	r3, r2
    a514:	2200      	movs	r2, #0
    a516:	701a      	strb	r2, [r3, #0]
    a518:	e02a      	b.n	a570 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a51e:	2b00      	cmp	r3, #0
    a520:	da15      	bge.n	a54e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a522:	79fb      	ldrb	r3, [r7, #7]
    a524:	f003 030f 	and.w	r3, r3, #15
    a528:	79fa      	ldrb	r2, [r7, #7]
    a52a:	f002 020f 	and.w	r2, r2, #15
    a52e:	6979      	ldr	r1, [r7, #20]
    a530:	3208      	adds	r2, #8
    a532:	0152      	lsls	r2, r2, #5
    a534:	440a      	add	r2, r1
    a536:	7812      	ldrb	r2, [r2, #0]
    a538:	b2d2      	uxtb	r2, r2
    a53a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a53e:	b2d1      	uxtb	r1, r2
    a540:	697a      	ldr	r2, [r7, #20]
    a542:	3308      	adds	r3, #8
    a544:	015b      	lsls	r3, r3, #5
    a546:	4413      	add	r3, r2
    a548:	460a      	mov	r2, r1
    a54a:	701a      	strb	r2, [r3, #0]
    a54c:	e010      	b.n	a570 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a54e:	79fb      	ldrb	r3, [r7, #7]
    a550:	79fa      	ldrb	r2, [r7, #7]
    a552:	6979      	ldr	r1, [r7, #20]
    a554:	3208      	adds	r2, #8
    a556:	0152      	lsls	r2, r2, #5
    a558:	440a      	add	r2, r1
    a55a:	7812      	ldrb	r2, [r2, #0]
    a55c:	b2d2      	uxtb	r2, r2
    a55e:	f022 0207 	bic.w	r2, r2, #7
    a562:	b2d1      	uxtb	r1, r2
    a564:	697a      	ldr	r2, [r7, #20]
    a566:	3308      	adds	r3, #8
    a568:	015b      	lsls	r3, r3, #5
    a56a:	4413      	add	r3, r2
    a56c:	460a      	mov	r2, r1
    a56e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a570:	68fb      	ldr	r3, [r7, #12]
    a572:	2200      	movs	r2, #0
    a574:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a576:	68fb      	ldr	r3, [r7, #12]
    a578:	22ff      	movs	r2, #255	; 0xff
    a57a:	749a      	strb	r2, [r3, #18]
    a57c:	e000      	b.n	a580 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a57e:	bf00      	nop
}
    a580:	3718      	adds	r7, #24
    a582:	46bd      	mov	sp, r7
    a584:	bd80      	pop	{r7, pc}
    a586:	bf00      	nop
    a588:	000093a9 	.word	0x000093a9
    a58c:	0000a9e1 	.word	0x0000a9e1

0000a590 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a590:	b5b0      	push	{r4, r5, r7, lr}
    a592:	b088      	sub	sp, #32
    a594:	af00      	add	r7, sp, #0
    a596:	4603      	mov	r3, r0
    a598:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a59a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a59e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a5a0:	79fb      	ldrb	r3, [r7, #7]
    a5a2:	f003 030f 	and.w	r3, r3, #15
    a5a6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a5a8:	79fb      	ldrb	r3, [r7, #7]
    a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	bf14      	ite	ne
    a5b2:	2301      	movne	r3, #1
    a5b4:	2300      	moveq	r3, #0
    a5b6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a5b8:	7eba      	ldrb	r2, [r7, #26]
    a5ba:	7efb      	ldrb	r3, [r7, #27]
    a5bc:	4611      	mov	r1, r2
    a5be:	4618      	mov	r0, r3
    a5c0:	4b70      	ldr	r3, [pc, #448]	; (a784 <_usb_d_dev_ep_enable+0x1f4>)
    a5c2:	4798      	blx	r3
    a5c4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a5c6:	7efb      	ldrb	r3, [r7, #27]
    a5c8:	4619      	mov	r1, r3
    a5ca:	69f8      	ldr	r0, [r7, #28]
    a5cc:	4b6e      	ldr	r3, [pc, #440]	; (a788 <_usb_d_dev_ep_enable+0x1f8>)
    a5ce:	4798      	blx	r3
    a5d0:	4603      	mov	r3, r0
    a5d2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a5d4:	7efb      	ldrb	r3, [r7, #27]
    a5d6:	2b04      	cmp	r3, #4
    a5d8:	d803      	bhi.n	a5e2 <_usb_d_dev_ep_enable+0x52>
    a5da:	697b      	ldr	r3, [r7, #20]
    a5dc:	7c9b      	ldrb	r3, [r3, #18]
    a5de:	2bff      	cmp	r3, #255	; 0xff
    a5e0:	d102      	bne.n	a5e8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a5e2:	f06f 0311 	mvn.w	r3, #17
    a5e6:	e0c8      	b.n	a77a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a5e8:	7efb      	ldrb	r3, [r7, #27]
    a5ea:	015b      	lsls	r3, r3, #5
    a5ec:	4a67      	ldr	r2, [pc, #412]	; (a78c <_usb_d_dev_ep_enable+0x1fc>)
    a5ee:	4413      	add	r3, r2
    a5f0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a5f2:	697b      	ldr	r3, [r7, #20]
    a5f4:	7cdb      	ldrb	r3, [r3, #19]
    a5f6:	f003 0307 	and.w	r3, r3, #7
    a5fa:	b2db      	uxtb	r3, r3
    a5fc:	2b01      	cmp	r3, #1
    a5fe:	d14b      	bne.n	a698 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a600:	7cfb      	ldrb	r3, [r7, #19]
    a602:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a606:	2b00      	cmp	r3, #0
    a608:	d002      	beq.n	a610 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a60a:	f06f 0313 	mvn.w	r3, #19
    a60e:	e0b4      	b.n	a77a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a610:	7efb      	ldrb	r3, [r7, #27]
    a612:	2211      	movs	r2, #17
    a614:	4619      	mov	r1, r3
    a616:	69f8      	ldr	r0, [r7, #28]
    a618:	4b5d      	ldr	r3, [pc, #372]	; (a790 <_usb_d_dev_ep_enable+0x200>)
    a61a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a61c:	697b      	ldr	r3, [r7, #20]
    a61e:	8a1b      	ldrh	r3, [r3, #16]
    a620:	039b      	lsls	r3, r3, #14
    a622:	4c5c      	ldr	r4, [pc, #368]	; (a794 <_usb_d_dev_ep_enable+0x204>)
    a624:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a626:	697b      	ldr	r3, [r7, #20]
    a628:	8a1b      	ldrh	r3, [r3, #16]
    a62a:	4618      	mov	r0, r3
    a62c:	4b5a      	ldr	r3, [pc, #360]	; (a798 <_usb_d_dev_ep_enable+0x208>)
    a62e:	4798      	blx	r3
    a630:	4603      	mov	r3, r0
    a632:	071b      	lsls	r3, r3, #28
    a634:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a638:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a63c:	68fb      	ldr	r3, [r7, #12]
    a63e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a640:	68fb      	ldr	r3, [r7, #12]
    a642:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a646:	697b      	ldr	r3, [r7, #20]
    a648:	8a1b      	ldrh	r3, [r3, #16]
    a64a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a64e:	697b      	ldr	r3, [r7, #20]
    a650:	8a1b      	ldrh	r3, [r3, #16]
    a652:	4618      	mov	r0, r3
    a654:	4b50      	ldr	r3, [pc, #320]	; (a798 <_usb_d_dev_ep_enable+0x208>)
    a656:	4798      	blx	r3
    a658:	4603      	mov	r3, r0
    a65a:	071b      	lsls	r3, r3, #28
    a65c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a660:	432b      	orrs	r3, r5
    a662:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a664:	7efb      	ldrb	r3, [r7, #27]
    a666:	2200      	movs	r2, #0
    a668:	2100      	movs	r1, #0
    a66a:	4618      	mov	r0, r3
    a66c:	4b4b      	ldr	r3, [pc, #300]	; (a79c <_usb_d_dev_ep_enable+0x20c>)
    a66e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a670:	7efb      	ldrb	r3, [r7, #27]
    a672:	2200      	movs	r2, #0
    a674:	2101      	movs	r1, #1
    a676:	4618      	mov	r0, r3
    a678:	4b49      	ldr	r3, [pc, #292]	; (a7a0 <_usb_d_dev_ep_enable+0x210>)
    a67a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a67c:	7efb      	ldrb	r3, [r7, #27]
    a67e:	2100      	movs	r1, #0
    a680:	4618      	mov	r0, r3
    a682:	4b48      	ldr	r3, [pc, #288]	; (a7a4 <_usb_d_dev_ep_enable+0x214>)
    a684:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a686:	7efb      	ldrb	r3, [r7, #27]
    a688:	2101      	movs	r1, #1
    a68a:	4618      	mov	r0, r3
    a68c:	4b45      	ldr	r3, [pc, #276]	; (a7a4 <_usb_d_dev_ep_enable+0x214>)
    a68e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a690:	6978      	ldr	r0, [r7, #20]
    a692:	4b45      	ldr	r3, [pc, #276]	; (a7a8 <_usb_d_dev_ep_enable+0x218>)
    a694:	4798      	blx	r3
    a696:	e06f      	b.n	a778 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a698:	7ebb      	ldrb	r3, [r7, #26]
    a69a:	2b00      	cmp	r3, #0
    a69c:	d038      	beq.n	a710 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a69e:	7cfb      	ldrb	r3, [r7, #19]
    a6a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d002      	beq.n	a6ae <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a6a8:	f06f 0313 	mvn.w	r3, #19
    a6ac:	e065      	b.n	a77a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a6ae:	697b      	ldr	r3, [r7, #20]
    a6b0:	7cdb      	ldrb	r3, [r3, #19]
    a6b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a6b6:	b2db      	uxtb	r3, r3
    a6b8:	011b      	lsls	r3, r3, #4
    a6ba:	b2db      	uxtb	r3, r3
    a6bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a6c0:	b2da      	uxtb	r2, r3
    a6c2:	7cfb      	ldrb	r3, [r7, #19]
    a6c4:	4313      	orrs	r3, r2
    a6c6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a6c8:	7cfa      	ldrb	r2, [r7, #19]
    a6ca:	7efb      	ldrb	r3, [r7, #27]
    a6cc:	4619      	mov	r1, r3
    a6ce:	69f8      	ldr	r0, [r7, #28]
    a6d0:	4b2f      	ldr	r3, [pc, #188]	; (a790 <_usb_d_dev_ep_enable+0x200>)
    a6d2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a6d4:	68fb      	ldr	r3, [r7, #12]
    a6d6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6da:	697b      	ldr	r3, [r7, #20]
    a6dc:	8a1b      	ldrh	r3, [r3, #16]
    a6de:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a6e2:	697b      	ldr	r3, [r7, #20]
    a6e4:	8a1b      	ldrh	r3, [r3, #16]
    a6e6:	4618      	mov	r0, r3
    a6e8:	4b2b      	ldr	r3, [pc, #172]	; (a798 <_usb_d_dev_ep_enable+0x208>)
    a6ea:	4798      	blx	r3
    a6ec:	4603      	mov	r3, r0
    a6ee:	071b      	lsls	r3, r3, #28
    a6f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a6f4:	432b      	orrs	r3, r5
    a6f6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6f8:	7efb      	ldrb	r3, [r7, #27]
    a6fa:	2200      	movs	r2, #0
    a6fc:	2101      	movs	r1, #1
    a6fe:	4618      	mov	r0, r3
    a700:	4b27      	ldr	r3, [pc, #156]	; (a7a0 <_usb_d_dev_ep_enable+0x210>)
    a702:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a704:	7efb      	ldrb	r3, [r7, #27]
    a706:	2101      	movs	r1, #1
    a708:	4618      	mov	r0, r3
    a70a:	4b26      	ldr	r3, [pc, #152]	; (a7a4 <_usb_d_dev_ep_enable+0x214>)
    a70c:	4798      	blx	r3
    a70e:	e033      	b.n	a778 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a710:	7cfb      	ldrb	r3, [r7, #19]
    a712:	f003 0307 	and.w	r3, r3, #7
    a716:	2b00      	cmp	r3, #0
    a718:	d002      	beq.n	a720 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a71a:	f06f 0313 	mvn.w	r3, #19
    a71e:	e02c      	b.n	a77a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a720:	697b      	ldr	r3, [r7, #20]
    a722:	7cdb      	ldrb	r3, [r3, #19]
    a724:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a728:	b2db      	uxtb	r3, r3
    a72a:	461a      	mov	r2, r3
    a72c:	7cfb      	ldrb	r3, [r7, #19]
    a72e:	4313      	orrs	r3, r2
    a730:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a732:	7cfa      	ldrb	r2, [r7, #19]
    a734:	7efb      	ldrb	r3, [r7, #27]
    a736:	4619      	mov	r1, r3
    a738:	69f8      	ldr	r0, [r7, #28]
    a73a:	4b15      	ldr	r3, [pc, #84]	; (a790 <_usb_d_dev_ep_enable+0x200>)
    a73c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a73e:	697b      	ldr	r3, [r7, #20]
    a740:	8a1b      	ldrh	r3, [r3, #16]
    a742:	039b      	lsls	r3, r3, #14
    a744:	4c13      	ldr	r4, [pc, #76]	; (a794 <_usb_d_dev_ep_enable+0x204>)
    a746:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a748:	697b      	ldr	r3, [r7, #20]
    a74a:	8a1b      	ldrh	r3, [r3, #16]
    a74c:	4618      	mov	r0, r3
    a74e:	4b12      	ldr	r3, [pc, #72]	; (a798 <_usb_d_dev_ep_enable+0x208>)
    a750:	4798      	blx	r3
    a752:	4603      	mov	r3, r0
    a754:	071b      	lsls	r3, r3, #28
    a756:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a75a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a75e:	68fb      	ldr	r3, [r7, #12]
    a760:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a762:	7efb      	ldrb	r3, [r7, #27]
    a764:	2200      	movs	r2, #0
    a766:	2100      	movs	r1, #0
    a768:	4618      	mov	r0, r3
    a76a:	4b0c      	ldr	r3, [pc, #48]	; (a79c <_usb_d_dev_ep_enable+0x20c>)
    a76c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a76e:	7efb      	ldrb	r3, [r7, #27]
    a770:	2100      	movs	r1, #0
    a772:	4618      	mov	r0, r3
    a774:	4b0b      	ldr	r3, [pc, #44]	; (a7a4 <_usb_d_dev_ep_enable+0x214>)
    a776:	4798      	blx	r3
	}

	return USB_OK;
    a778:	2300      	movs	r3, #0
}
    a77a:	4618      	mov	r0, r3
    a77c:	3720      	adds	r7, #32
    a77e:	46bd      	mov	sp, r7
    a780:	bdb0      	pop	{r4, r5, r7, pc}
    a782:	bf00      	nop
    a784:	000093a9 	.word	0x000093a9
    a788:	00008a2f 	.word	0x00008a2f
    a78c:	20000c8c 	.word	0x20000c8c
    a790:	00008a05 	.word	0x00008a05
    a794:	0fffc000 	.word	0x0fffc000
    a798:	00009345 	.word	0x00009345
    a79c:	000092ed 	.word	0x000092ed
    a7a0:	00009295 	.word	0x00009295
    a7a4:	0000925d 	.word	0x0000925d
    a7a8:	0000a301 	.word	0x0000a301

0000a7ac <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a7ac:	b580      	push	{r7, lr}
    a7ae:	b084      	sub	sp, #16
    a7b0:	af00      	add	r7, sp, #0
    a7b2:	6078      	str	r0, [r7, #4]
    a7b4:	460b      	mov	r3, r1
    a7b6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	7c9b      	ldrb	r3, [r3, #18]
    a7bc:	f003 030f 	and.w	r3, r3, #15
    a7c0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a7c2:	78fa      	ldrb	r2, [r7, #3]
    a7c4:	7bfb      	ldrb	r3, [r7, #15]
    a7c6:	4611      	mov	r1, r2
    a7c8:	4618      	mov	r0, r3
    a7ca:	4b03      	ldr	r3, [pc, #12]	; (a7d8 <_usb_d_dev_ep_stall_get+0x2c>)
    a7cc:	4798      	blx	r3
    a7ce:	4603      	mov	r3, r0
}
    a7d0:	4618      	mov	r0, r3
    a7d2:	3710      	adds	r7, #16
    a7d4:	46bd      	mov	sp, r7
    a7d6:	bd80      	pop	{r7, pc}
    a7d8:	00008e9d 	.word	0x00008e9d

0000a7dc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	b084      	sub	sp, #16
    a7e0:	af00      	add	r7, sp, #0
    a7e2:	6078      	str	r0, [r7, #4]
    a7e4:	460b      	mov	r3, r1
    a7e6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	7c9b      	ldrb	r3, [r3, #18]
    a7ec:	f003 030f 	and.w	r3, r3, #15
    a7f0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a7f2:	78f9      	ldrb	r1, [r7, #3]
    a7f4:	7bfb      	ldrb	r3, [r7, #15]
    a7f6:	2201      	movs	r2, #1
    a7f8:	4618      	mov	r0, r3
    a7fa:	4b0a      	ldr	r3, [pc, #40]	; (a824 <_usb_d_dev_ep_stall_set+0x48>)
    a7fc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a7fe:	78fb      	ldrb	r3, [r7, #3]
    a800:	2220      	movs	r2, #32
    a802:	409a      	lsls	r2, r3
    a804:	7bfb      	ldrb	r3, [r7, #15]
    a806:	4611      	mov	r1, r2
    a808:	4618      	mov	r0, r3
    a80a:	4b07      	ldr	r3, [pc, #28]	; (a828 <_usb_d_dev_ep_stall_set+0x4c>)
    a80c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a80e:	687a      	ldr	r2, [r7, #4]
    a810:	7cd3      	ldrb	r3, [r2, #19]
    a812:	f043 0308 	orr.w	r3, r3, #8
    a816:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a818:	2300      	movs	r3, #0
}
    a81a:	4618      	mov	r0, r3
    a81c:	3710      	adds	r7, #16
    a81e:	46bd      	mov	sp, r7
    a820:	bd80      	pop	{r7, pc}
    a822:	bf00      	nop
    a824:	00008e45 	.word	0x00008e45
    a828:	00008dc5 	.word	0x00008dc5

0000a82c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a82c:	b580      	push	{r7, lr}
    a82e:	b084      	sub	sp, #16
    a830:	af00      	add	r7, sp, #0
    a832:	6078      	str	r0, [r7, #4]
    a834:	460b      	mov	r3, r1
    a836:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a838:	687b      	ldr	r3, [r7, #4]
    a83a:	7c9b      	ldrb	r3, [r3, #18]
    a83c:	f003 030f 	and.w	r3, r3, #15
    a840:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a842:	78fa      	ldrb	r2, [r7, #3]
    a844:	7bfb      	ldrb	r3, [r7, #15]
    a846:	4611      	mov	r1, r2
    a848:	4618      	mov	r0, r3
    a84a:	4b28      	ldr	r3, [pc, #160]	; (a8ec <_usb_d_dev_ep_stall_clr+0xc0>)
    a84c:	4798      	blx	r3
    a84e:	4603      	mov	r3, r0
    a850:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a852:	7bbb      	ldrb	r3, [r7, #14]
    a854:	f083 0301 	eor.w	r3, r3, #1
    a858:	b2db      	uxtb	r3, r3
    a85a:	2b00      	cmp	r3, #0
    a85c:	d001      	beq.n	a862 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a85e:	2300      	movs	r3, #0
    a860:	e040      	b.n	a8e4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a862:	78f9      	ldrb	r1, [r7, #3]
    a864:	7bfb      	ldrb	r3, [r7, #15]
    a866:	2200      	movs	r2, #0
    a868:	4618      	mov	r0, r3
    a86a:	4b21      	ldr	r3, [pc, #132]	; (a8f0 <_usb_d_dev_ep_stall_clr+0xc4>)
    a86c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a86e:	78fb      	ldrb	r3, [r7, #3]
    a870:	2220      	movs	r2, #32
    a872:	409a      	lsls	r2, r3
    a874:	7bfb      	ldrb	r3, [r7, #15]
    a876:	4611      	mov	r1, r2
    a878:	4618      	mov	r0, r3
    a87a:	4b1e      	ldr	r3, [pc, #120]	; (a8f4 <_usb_d_dev_ep_stall_clr+0xc8>)
    a87c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a87e:	78fa      	ldrb	r2, [r7, #3]
    a880:	7bfb      	ldrb	r3, [r7, #15]
    a882:	4611      	mov	r1, r2
    a884:	4618      	mov	r0, r3
    a886:	4b1c      	ldr	r3, [pc, #112]	; (a8f8 <_usb_d_dev_ep_stall_clr+0xcc>)
    a888:	4798      	blx	r3
    a88a:	4603      	mov	r3, r0
    a88c:	2b00      	cmp	r3, #0
    a88e:	d00b      	beq.n	a8a8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a890:	78fa      	ldrb	r2, [r7, #3]
    a892:	7bfb      	ldrb	r3, [r7, #15]
    a894:	4611      	mov	r1, r2
    a896:	4618      	mov	r0, r3
    a898:	4b18      	ldr	r3, [pc, #96]	; (a8fc <_usb_d_dev_ep_stall_clr+0xd0>)
    a89a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a89c:	78f9      	ldrb	r1, [r7, #3]
    a89e:	7bfb      	ldrb	r3, [r7, #15]
    a8a0:	2200      	movs	r2, #0
    a8a2:	4618      	mov	r0, r3
    a8a4:	4b16      	ldr	r3, [pc, #88]	; (a900 <_usb_d_dev_ep_stall_clr+0xd4>)
    a8a6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a8a8:	687b      	ldr	r3, [r7, #4]
    a8aa:	7cdb      	ldrb	r3, [r3, #19]
    a8ac:	f003 0307 	and.w	r3, r3, #7
    a8b0:	b2db      	uxtb	r3, r3
    a8b2:	2b01      	cmp	r3, #1
    a8b4:	d110      	bne.n	a8d8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a8b6:	7bfb      	ldrb	r3, [r7, #15]
    a8b8:	4619      	mov	r1, r3
    a8ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8be:	4b11      	ldr	r3, [pc, #68]	; (a904 <_usb_d_dev_ep_stall_clr+0xd8>)
    a8c0:	4798      	blx	r3
    a8c2:	4603      	mov	r3, r0
    a8c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d10a      	bne.n	a8e2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a8cc:	687a      	ldr	r2, [r7, #4]
    a8ce:	7cd3      	ldrb	r3, [r2, #19]
    a8d0:	f36f 03c3 	bfc	r3, #3, #1
    a8d4:	74d3      	strb	r3, [r2, #19]
    a8d6:	e004      	b.n	a8e2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a8d8:	687a      	ldr	r2, [r7, #4]
    a8da:	7cd3      	ldrb	r3, [r2, #19]
    a8dc:	f36f 03c3 	bfc	r3, #3, #1
    a8e0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a8e2:	2300      	movs	r3, #0
}
    a8e4:	4618      	mov	r0, r3
    a8e6:	3710      	adds	r7, #16
    a8e8:	46bd      	mov	sp, r7
    a8ea:	bd80      	pop	{r7, pc}
    a8ec:	00008e9d 	.word	0x00008e9d
    a8f0:	00008e45 	.word	0x00008e45
    a8f4:	00008ded 	.word	0x00008ded
    a8f8:	00008ee1 	.word	0x00008ee1
    a8fc:	00008f25 	.word	0x00008f25
    a900:	00009011 	.word	0x00009011
    a904:	000088cd 	.word	0x000088cd

0000a908 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a908:	b580      	push	{r7, lr}
    a90a:	b086      	sub	sp, #24
    a90c:	af00      	add	r7, sp, #0
    a90e:	4603      	mov	r3, r0
    a910:	460a      	mov	r2, r1
    a912:	71fb      	strb	r3, [r7, #7]
    a914:	4613      	mov	r3, r2
    a916:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a918:	79fb      	ldrb	r3, [r7, #7]
    a91a:	f003 030f 	and.w	r3, r3, #15
    a91e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a920:	79fb      	ldrb	r3, [r7, #7]
    a922:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a926:	2b00      	cmp	r3, #0
    a928:	bf14      	ite	ne
    a92a:	2301      	movne	r3, #1
    a92c:	2300      	moveq	r3, #0
    a92e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a930:	7cba      	ldrb	r2, [r7, #18]
    a932:	7cfb      	ldrb	r3, [r7, #19]
    a934:	4611      	mov	r1, r2
    a936:	4618      	mov	r0, r3
    a938:	4b13      	ldr	r3, [pc, #76]	; (a988 <_usb_d_dev_ep_stall+0x80>)
    a93a:	4798      	blx	r3
    a93c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a93e:	7cfb      	ldrb	r3, [r7, #19]
    a940:	2b04      	cmp	r3, #4
    a942:	d902      	bls.n	a94a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a944:	f06f 0311 	mvn.w	r3, #17
    a948:	e01a      	b.n	a980 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a94a:	79bb      	ldrb	r3, [r7, #6]
    a94c:	2b01      	cmp	r3, #1
    a94e:	d106      	bne.n	a95e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a950:	7cbb      	ldrb	r3, [r7, #18]
    a952:	4619      	mov	r1, r3
    a954:	68f8      	ldr	r0, [r7, #12]
    a956:	4b0d      	ldr	r3, [pc, #52]	; (a98c <_usb_d_dev_ep_stall+0x84>)
    a958:	4798      	blx	r3
    a95a:	6178      	str	r0, [r7, #20]
    a95c:	e00f      	b.n	a97e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a95e:	79bb      	ldrb	r3, [r7, #6]
    a960:	2b00      	cmp	r3, #0
    a962:	d106      	bne.n	a972 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a964:	7cbb      	ldrb	r3, [r7, #18]
    a966:	4619      	mov	r1, r3
    a968:	68f8      	ldr	r0, [r7, #12]
    a96a:	4b09      	ldr	r3, [pc, #36]	; (a990 <_usb_d_dev_ep_stall+0x88>)
    a96c:	4798      	blx	r3
    a96e:	6178      	str	r0, [r7, #20]
    a970:	e005      	b.n	a97e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a972:	7cbb      	ldrb	r3, [r7, #18]
    a974:	4619      	mov	r1, r3
    a976:	68f8      	ldr	r0, [r7, #12]
    a978:	4b06      	ldr	r3, [pc, #24]	; (a994 <_usb_d_dev_ep_stall+0x8c>)
    a97a:	4798      	blx	r3
    a97c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a97e:	697b      	ldr	r3, [r7, #20]
}
    a980:	4618      	mov	r0, r3
    a982:	3718      	adds	r7, #24
    a984:	46bd      	mov	sp, r7
    a986:	bd80      	pop	{r7, pc}
    a988:	000093a9 	.word	0x000093a9
    a98c:	0000a7dd 	.word	0x0000a7dd
    a990:	0000a82d 	.word	0x0000a82d
    a994:	0000a7ad 	.word	0x0000a7ad

0000a998 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a998:	b580      	push	{r7, lr}
    a99a:	b082      	sub	sp, #8
    a99c:	af00      	add	r7, sp, #0
    a99e:	6078      	str	r0, [r7, #4]
    a9a0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	7c9b      	ldrb	r3, [r3, #18]
    a9a6:	2bff      	cmp	r3, #255	; 0xff
    a9a8:	d014      	beq.n	a9d4 <_usb_d_dev_trans_done+0x3c>
    a9aa:	687b      	ldr	r3, [r7, #4]
    a9ac:	7cdb      	ldrb	r3, [r3, #19]
    a9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9b2:	b2db      	uxtb	r3, r3
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d00d      	beq.n	a9d4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a9b8:	687a      	ldr	r2, [r7, #4]
    a9ba:	7cd3      	ldrb	r3, [r2, #19]
    a9bc:	f36f 1386 	bfc	r3, #6, #1
    a9c0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a9c2:	4b06      	ldr	r3, [pc, #24]	; (a9dc <_usb_d_dev_trans_done+0x44>)
    a9c4:	691b      	ldr	r3, [r3, #16]
    a9c6:	687a      	ldr	r2, [r7, #4]
    a9c8:	7c90      	ldrb	r0, [r2, #18]
    a9ca:	687a      	ldr	r2, [r7, #4]
    a9cc:	6892      	ldr	r2, [r2, #8]
    a9ce:	6839      	ldr	r1, [r7, #0]
    a9d0:	4798      	blx	r3
    a9d2:	e000      	b.n	a9d6 <_usb_d_dev_trans_done+0x3e>
		return;
    a9d4:	bf00      	nop
}
    a9d6:	3708      	adds	r7, #8
    a9d8:	46bd      	mov	sp, r7
    a9da:	bd80      	pop	{r7, pc}
    a9dc:	20000bc4 	.word	0x20000bc4

0000a9e0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a9e0:	b580      	push	{r7, lr}
    a9e2:	b086      	sub	sp, #24
    a9e4:	af00      	add	r7, sp, #0
    a9e6:	60f8      	str	r0, [r7, #12]
    a9e8:	460b      	mov	r3, r1
    a9ea:	607a      	str	r2, [r7, #4]
    a9ec:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a9ee:	68fb      	ldr	r3, [r7, #12]
    a9f0:	7c9b      	ldrb	r3, [r3, #18]
    a9f2:	f003 030f 	and.w	r3, r3, #15
    a9f6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a9f8:	4b1f      	ldr	r3, [pc, #124]	; (aa78 <_usb_d_dev_trans_stop+0x98>)
    a9fa:	881b      	ldrh	r3, [r3, #0]
    a9fc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a9fe:	68fb      	ldr	r3, [r7, #12]
    aa00:	7c9b      	ldrb	r3, [r3, #18]
    aa02:	2bff      	cmp	r3, #255	; 0xff
    aa04:	d033      	beq.n	aa6e <_usb_d_dev_trans_stop+0x8e>
    aa06:	68fb      	ldr	r3, [r7, #12]
    aa08:	7cdb      	ldrb	r3, [r3, #19]
    aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aa0e:	b2db      	uxtb	r3, r3
    aa10:	2b00      	cmp	r3, #0
    aa12:	d02c      	beq.n	aa6e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    aa14:	7afb      	ldrb	r3, [r7, #11]
    aa16:	2b00      	cmp	r3, #0
    aa18:	d006      	beq.n	aa28 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aa1a:	7dfb      	ldrb	r3, [r7, #23]
    aa1c:	2200      	movs	r2, #0
    aa1e:	2101      	movs	r1, #1
    aa20:	4618      	mov	r0, r3
    aa22:	4b16      	ldr	r3, [pc, #88]	; (aa7c <_usb_d_dev_trans_stop+0x9c>)
    aa24:	4798      	blx	r3
    aa26:	e005      	b.n	aa34 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa28:	7dfb      	ldrb	r3, [r7, #23]
    aa2a:	2200      	movs	r2, #0
    aa2c:	2100      	movs	r1, #0
    aa2e:	4618      	mov	r0, r3
    aa30:	4b13      	ldr	r3, [pc, #76]	; (aa80 <_usb_d_dev_trans_stop+0xa0>)
    aa32:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    aa34:	7afb      	ldrb	r3, [r7, #11]
    aa36:	f107 0218 	add.w	r2, r7, #24
    aa3a:	4413      	add	r3, r2
    aa3c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa40:	461a      	mov	r2, r3
    aa42:	7dfb      	ldrb	r3, [r7, #23]
    aa44:	4611      	mov	r1, r2
    aa46:	4618      	mov	r0, r3
    aa48:	4b0e      	ldr	r3, [pc, #56]	; (aa84 <_usb_d_dev_trans_stop+0xa4>)
    aa4a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    aa4c:	7afb      	ldrb	r3, [r7, #11]
    aa4e:	f107 0218 	add.w	r2, r7, #24
    aa52:	4413      	add	r3, r2
    aa54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa58:	461a      	mov	r2, r3
    aa5a:	7dfb      	ldrb	r3, [r7, #23]
    aa5c:	4611      	mov	r1, r2
    aa5e:	4618      	mov	r0, r3
    aa60:	4b09      	ldr	r3, [pc, #36]	; (aa88 <_usb_d_dev_trans_stop+0xa8>)
    aa62:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    aa64:	6879      	ldr	r1, [r7, #4]
    aa66:	68f8      	ldr	r0, [r7, #12]
    aa68:	4b08      	ldr	r3, [pc, #32]	; (aa8c <_usb_d_dev_trans_stop+0xac>)
    aa6a:	4798      	blx	r3
    aa6c:	e000      	b.n	aa70 <_usb_d_dev_trans_stop+0x90>
		return;
    aa6e:	bf00      	nop
}
    aa70:	3718      	adds	r7, #24
    aa72:	46bd      	mov	sp, r7
    aa74:	bd80      	pop	{r7, pc}
    aa76:	bf00      	nop
    aa78:	0000f384 	.word	0x0000f384
    aa7c:	00009295 	.word	0x00009295
    aa80:	000092ed 	.word	0x000092ed
    aa84:	00008d9d 	.word	0x00008d9d
    aa88:	00008ded 	.word	0x00008ded
    aa8c:	0000a999 	.word	0x0000a999

0000aa90 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b086      	sub	sp, #24
    aa94:	af00      	add	r7, sp, #0
    aa96:	4603      	mov	r3, r0
    aa98:	6039      	str	r1, [r7, #0]
    aa9a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    aa9c:	79fb      	ldrb	r3, [r7, #7]
    aa9e:	f003 030f 	and.w	r3, r3, #15
    aaa2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    aaa4:	7dfb      	ldrb	r3, [r7, #23]
    aaa6:	015b      	lsls	r3, r3, #5
    aaa8:	4a1e      	ldr	r2, [pc, #120]	; (ab24 <_usb_d_dev_ep_read_req+0x94>)
    aaaa:	4413      	add	r3, r2
    aaac:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    aaae:	693b      	ldr	r3, [r7, #16]
    aab0:	681b      	ldr	r3, [r3, #0]
    aab2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    aab4:	693b      	ldr	r3, [r7, #16]
    aab6:	685b      	ldr	r3, [r3, #4]
    aab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aabc:	b29b      	uxth	r3, r3
    aabe:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    aac0:	7dfb      	ldrb	r3, [r7, #23]
    aac2:	2b04      	cmp	r3, #4
    aac4:	d802      	bhi.n	aacc <_usb_d_dev_ep_read_req+0x3c>
    aac6:	683b      	ldr	r3, [r7, #0]
    aac8:	2b00      	cmp	r3, #0
    aaca:	d102      	bne.n	aad2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    aacc:	f06f 0311 	mvn.w	r3, #17
    aad0:	e023      	b.n	ab1a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    aad2:	7dfb      	ldrb	r3, [r7, #23]
    aad4:	4618      	mov	r0, r3
    aad6:	4b14      	ldr	r3, [pc, #80]	; (ab28 <_usb_d_dev_ep_read_req+0x98>)
    aad8:	4798      	blx	r3
    aada:	4603      	mov	r3, r0
    aadc:	f083 0301 	eor.w	r3, r3, #1
    aae0:	b2db      	uxtb	r3, r3
    aae2:	2b00      	cmp	r3, #0
    aae4:	d002      	beq.n	aaec <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    aae6:	f06f 0312 	mvn.w	r3, #18
    aaea:	e016      	b.n	ab1a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    aaec:	7dfb      	ldrb	r3, [r7, #23]
    aaee:	4618      	mov	r0, r3
    aaf0:	4b0e      	ldr	r3, [pc, #56]	; (ab2c <_usb_d_dev_ep_read_req+0x9c>)
    aaf2:	4798      	blx	r3
    aaf4:	4603      	mov	r3, r0
    aaf6:	f083 0301 	eor.w	r3, r3, #1
    aafa:	b2db      	uxtb	r3, r3
    aafc:	2b00      	cmp	r3, #0
    aafe:	d001      	beq.n	ab04 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    ab00:	2300      	movs	r3, #0
    ab02:	e00a      	b.n	ab1a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    ab04:	68fb      	ldr	r3, [r7, #12]
    ab06:	2208      	movs	r2, #8
    ab08:	4619      	mov	r1, r3
    ab0a:	6838      	ldr	r0, [r7, #0]
    ab0c:	4b08      	ldr	r3, [pc, #32]	; (ab30 <_usb_d_dev_ep_read_req+0xa0>)
    ab0e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    ab10:	7dfb      	ldrb	r3, [r7, #23]
    ab12:	4618      	mov	r0, r3
    ab14:	4b07      	ldr	r3, [pc, #28]	; (ab34 <_usb_d_dev_ep_read_req+0xa4>)
    ab16:	4798      	blx	r3

	return bytes;
    ab18:	897b      	ldrh	r3, [r7, #10]
}
    ab1a:	4618      	mov	r0, r3
    ab1c:	3718      	adds	r7, #24
    ab1e:	46bd      	mov	sp, r7
    ab20:	bd80      	pop	{r7, pc}
    ab22:	bf00      	nop
    ab24:	20000c8c 	.word	0x20000c8c
    ab28:	00008e15 	.word	0x00008e15
    ab2c:	00008fc1 	.word	0x00008fc1
    ab30:	0000ebcd 	.word	0x0000ebcd
    ab34:	00008ff1 	.word	0x00008ff1

0000ab38 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ab38:	b580      	push	{r7, lr}
    ab3a:	b086      	sub	sp, #24
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ab40:	687b      	ldr	r3, [r7, #4]
    ab42:	7a1b      	ldrb	r3, [r3, #8]
    ab44:	f003 030f 	and.w	r3, r3, #15
    ab48:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ab4a:	687b      	ldr	r3, [r7, #4]
    ab4c:	7a1b      	ldrb	r3, [r3, #8]
    ab4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab52:	2b00      	cmp	r3, #0
    ab54:	bf14      	ite	ne
    ab56:	2301      	movne	r3, #1
    ab58:	2300      	moveq	r3, #0
    ab5a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab5c:	7d7a      	ldrb	r2, [r7, #21]
    ab5e:	7dbb      	ldrb	r3, [r7, #22]
    ab60:	4611      	mov	r1, r2
    ab62:	4618      	mov	r0, r3
    ab64:	4b5f      	ldr	r3, [pc, #380]	; (ace4 <_usb_d_dev_ep_trans+0x1ac>)
    ab66:	4798      	blx	r3
    ab68:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ab6a:	693b      	ldr	r3, [r7, #16]
    ab6c:	8a1b      	ldrh	r3, [r3, #16]
    ab6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ab72:	4293      	cmp	r3, r2
    ab74:	d004      	beq.n	ab80 <_usb_d_dev_ep_trans+0x48>
    ab76:	693b      	ldr	r3, [r7, #16]
    ab78:	8a1b      	ldrh	r3, [r3, #16]
    ab7a:	3b01      	subs	r3, #1
    ab7c:	b29b      	uxth	r3, r3
    ab7e:	e001      	b.n	ab84 <_usb_d_dev_ep_trans+0x4c>
    ab80:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ab84:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ab86:	687b      	ldr	r3, [r7, #4]
    ab88:	685a      	ldr	r2, [r3, #4]
    ab8a:	89fb      	ldrh	r3, [r7, #14]
    ab8c:	4013      	ands	r3, r2
    ab8e:	2b00      	cmp	r3, #0
    ab90:	bf14      	ite	ne
    ab92:	2301      	movne	r3, #1
    ab94:	2300      	moveq	r3, #0
    ab96:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ab98:	2300      	movs	r3, #0
    ab9a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab9c:	7dbb      	ldrb	r3, [r7, #22]
    ab9e:	2b04      	cmp	r3, #4
    aba0:	d902      	bls.n	aba8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    aba2:	f06f 0311 	mvn.w	r3, #17
    aba6:	e098      	b.n	acda <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    aba8:	687b      	ldr	r3, [r7, #4]
    abaa:	681b      	ldr	r3, [r3, #0]
    abac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    abb0:	d31a      	bcc.n	abe8 <_usb_d_dev_ep_trans+0xb0>
    abb2:	687b      	ldr	r3, [r7, #4]
    abb4:	681b      	ldr	r3, [r3, #0]
    abb6:	461a      	mov	r2, r3
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	685b      	ldr	r3, [r3, #4]
    abbc:	4413      	add	r3, r2
    abbe:	4a4a      	ldr	r2, [pc, #296]	; (ace8 <_usb_d_dev_ep_trans+0x1b0>)
    abc0:	4293      	cmp	r3, r2
    abc2:	d811      	bhi.n	abe8 <_usb_d_dev_ep_trans+0xb0>
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	f003 0303 	and.w	r3, r3, #3
    abcc:	2b00      	cmp	r3, #0
    abce:	d10b      	bne.n	abe8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    abd0:	7d7b      	ldrb	r3, [r7, #21]
    abd2:	f083 0301 	eor.w	r3, r3, #1
    abd6:	b2db      	uxtb	r3, r3
    abd8:	2b00      	cmp	r3, #0
    abda:	d00e      	beq.n	abfa <_usb_d_dev_ep_trans+0xc2>
    abdc:	687b      	ldr	r3, [r7, #4]
    abde:	685b      	ldr	r3, [r3, #4]
    abe0:	693a      	ldr	r2, [r7, #16]
    abe2:	8a12      	ldrh	r2, [r2, #16]
    abe4:	4293      	cmp	r3, r2
    abe6:	d208      	bcs.n	abfa <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    abe8:	693b      	ldr	r3, [r7, #16]
    abea:	68db      	ldr	r3, [r3, #12]
    abec:	2b00      	cmp	r3, #0
    abee:	d102      	bne.n	abf6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    abf0:	f06f 0312 	mvn.w	r3, #18
    abf4:	e071      	b.n	acda <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    abf6:	2301      	movs	r3, #1
    abf8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    abfa:	7d7b      	ldrb	r3, [r7, #21]
    abfc:	f083 0301 	eor.w	r3, r3, #1
    ac00:	b2db      	uxtb	r3, r3
    ac02:	2b00      	cmp	r3, #0
    ac04:	d009      	beq.n	ac1a <_usb_d_dev_ep_trans+0xe2>
    ac06:	7b7b      	ldrb	r3, [r7, #13]
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d006      	beq.n	ac1a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    ac0c:	693b      	ldr	r3, [r7, #16]
    ac0e:	68db      	ldr	r3, [r3, #12]
    ac10:	2b00      	cmp	r3, #0
    ac12:	d102      	bne.n	ac1a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ac14:	f06f 0311 	mvn.w	r3, #17
    ac18:	e05f      	b.n	acda <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ac1a:	693b      	ldr	r3, [r7, #16]
    ac1c:	7cdb      	ldrb	r3, [r3, #19]
    ac1e:	f003 0308 	and.w	r3, r3, #8
    ac22:	b2db      	uxtb	r3, r3
    ac24:	2b00      	cmp	r3, #0
    ac26:	d001      	beq.n	ac2c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ac28:	2302      	movs	r3, #2
    ac2a:	e056      	b.n	acda <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ac2c:	f107 0308 	add.w	r3, r7, #8
    ac30:	4618      	mov	r0, r3
    ac32:	4b2e      	ldr	r3, [pc, #184]	; (acec <_usb_d_dev_ep_trans+0x1b4>)
    ac34:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ac36:	693b      	ldr	r3, [r7, #16]
    ac38:	7cdb      	ldrb	r3, [r3, #19]
    ac3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac3e:	b2db      	uxtb	r3, r3
    ac40:	2b00      	cmp	r3, #0
    ac42:	d006      	beq.n	ac52 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ac44:	f107 0308 	add.w	r3, r7, #8
    ac48:	4618      	mov	r0, r3
    ac4a:	4b29      	ldr	r3, [pc, #164]	; (acf0 <_usb_d_dev_ep_trans+0x1b8>)
    ac4c:	4798      	blx	r3
		return USB_BUSY;
    ac4e:	2301      	movs	r3, #1
    ac50:	e043      	b.n	acda <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ac52:	693a      	ldr	r2, [r7, #16]
    ac54:	7cd3      	ldrb	r3, [r2, #19]
    ac56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac5a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ac5c:	f107 0308 	add.w	r3, r7, #8
    ac60:	4618      	mov	r0, r3
    ac62:	4b23      	ldr	r3, [pc, #140]	; (acf0 <_usb_d_dev_ep_trans+0x1b8>)
    ac64:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ac66:	687b      	ldr	r3, [r7, #4]
    ac68:	681a      	ldr	r2, [r3, #0]
    ac6a:	693b      	ldr	r3, [r7, #16]
    ac6c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	685a      	ldr	r2, [r3, #4]
    ac72:	693b      	ldr	r3, [r7, #16]
    ac74:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    ac76:	693b      	ldr	r3, [r7, #16]
    ac78:	2200      	movs	r2, #0
    ac7a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    ac7c:	693a      	ldr	r2, [r7, #16]
    ac7e:	7cd3      	ldrb	r3, [r2, #19]
    ac80:	7d79      	ldrb	r1, [r7, #21]
    ac82:	f361 13c7 	bfi	r3, r1, #7, #1
    ac86:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ac88:	693a      	ldr	r2, [r7, #16]
    ac8a:	7cd3      	ldrb	r3, [r2, #19]
    ac8c:	7df9      	ldrb	r1, [r7, #23]
    ac8e:	f361 1345 	bfi	r3, r1, #5, #1
    ac92:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	7a5b      	ldrb	r3, [r3, #9]
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d007      	beq.n	acac <_usb_d_dev_ep_trans+0x174>
    ac9c:	7b7b      	ldrb	r3, [r7, #13]
    ac9e:	f083 0301 	eor.w	r3, r3, #1
    aca2:	b2db      	uxtb	r3, r3
    aca4:	2b00      	cmp	r3, #0
    aca6:	d001      	beq.n	acac <_usb_d_dev_ep_trans+0x174>
    aca8:	2301      	movs	r3, #1
    acaa:	e000      	b.n	acae <_usb_d_dev_ep_trans+0x176>
    acac:	2300      	movs	r3, #0
    acae:	b2db      	uxtb	r3, r3
    acb0:	f003 0301 	and.w	r3, r3, #1
    acb4:	b2d9      	uxtb	r1, r3
    acb6:	693a      	ldr	r2, [r7, #16]
    acb8:	7cd3      	ldrb	r3, [r2, #19]
    acba:	f361 1304 	bfi	r3, r1, #4, #1
    acbe:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    acc0:	7d7b      	ldrb	r3, [r7, #21]
    acc2:	2b00      	cmp	r3, #0
    acc4:	d004      	beq.n	acd0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    acc6:	2100      	movs	r1, #0
    acc8:	6938      	ldr	r0, [r7, #16]
    acca:	4b0a      	ldr	r3, [pc, #40]	; (acf4 <_usb_d_dev_ep_trans+0x1bc>)
    accc:	4798      	blx	r3
    acce:	e003      	b.n	acd8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    acd0:	2100      	movs	r1, #0
    acd2:	6938      	ldr	r0, [r7, #16]
    acd4:	4b08      	ldr	r3, [pc, #32]	; (acf8 <_usb_d_dev_ep_trans+0x1c0>)
    acd6:	4798      	blx	r3
	}

	return ERR_NONE;
    acd8:	2300      	movs	r3, #0
}
    acda:	4618      	mov	r0, r3
    acdc:	3718      	adds	r7, #24
    acde:	46bd      	mov	sp, r7
    ace0:	bd80      	pop	{r7, pc}
    ace2:	bf00      	nop
    ace4:	000093a9 	.word	0x000093a9
    ace8:	20041fff 	.word	0x20041fff
    acec:	0000b505 	.word	0x0000b505
    acf0:	0000b52b 	.word	0x0000b52b
    acf4:	00009671 	.word	0x00009671
    acf8:	00009889 	.word	0x00009889

0000acfc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    acfc:	b580      	push	{r7, lr}
    acfe:	b084      	sub	sp, #16
    ad00:	af00      	add	r7, sp, #0
    ad02:	4603      	mov	r3, r0
    ad04:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad06:	79fb      	ldrb	r3, [r7, #7]
    ad08:	f003 030f 	and.w	r3, r3, #15
    ad0c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad0e:	79fb      	ldrb	r3, [r7, #7]
    ad10:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad14:	2b00      	cmp	r3, #0
    ad16:	bf14      	ite	ne
    ad18:	2301      	movne	r3, #1
    ad1a:	2300      	moveq	r3, #0
    ad1c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad1e:	7bba      	ldrb	r2, [r7, #14]
    ad20:	7bfb      	ldrb	r3, [r7, #15]
    ad22:	4611      	mov	r1, r2
    ad24:	4618      	mov	r0, r3
    ad26:	4b08      	ldr	r3, [pc, #32]	; (ad48 <_usb_d_dev_ep_abort+0x4c>)
    ad28:	4798      	blx	r3
    ad2a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ad2c:	7bfb      	ldrb	r3, [r7, #15]
    ad2e:	2b04      	cmp	r3, #4
    ad30:	d806      	bhi.n	ad40 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ad32:	7bbb      	ldrb	r3, [r7, #14]
    ad34:	2202      	movs	r2, #2
    ad36:	4619      	mov	r1, r3
    ad38:	68b8      	ldr	r0, [r7, #8]
    ad3a:	4b04      	ldr	r3, [pc, #16]	; (ad4c <_usb_d_dev_ep_abort+0x50>)
    ad3c:	4798      	blx	r3
    ad3e:	e000      	b.n	ad42 <_usb_d_dev_ep_abort+0x46>
		return;
    ad40:	bf00      	nop
}
    ad42:	3710      	adds	r7, #16
    ad44:	46bd      	mov	sp, r7
    ad46:	bd80      	pop	{r7, pc}
    ad48:	000093a9 	.word	0x000093a9
    ad4c:	0000a9e1 	.word	0x0000a9e1

0000ad50 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ad50:	b480      	push	{r7}
    ad52:	b085      	sub	sp, #20
    ad54:	af00      	add	r7, sp, #0
    ad56:	4603      	mov	r3, r0
    ad58:	6039      	str	r1, [r7, #0]
    ad5a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad5c:	683b      	ldr	r3, [r7, #0]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d001      	beq.n	ad66 <_usb_d_dev_register_callback+0x16>
    ad62:	683b      	ldr	r3, [r7, #0]
    ad64:	e000      	b.n	ad68 <_usb_d_dev_register_callback+0x18>
    ad66:	4b0a      	ldr	r3, [pc, #40]	; (ad90 <_usb_d_dev_register_callback+0x40>)
    ad68:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ad6a:	79fb      	ldrb	r3, [r7, #7]
    ad6c:	2b01      	cmp	r3, #1
    ad6e:	d103      	bne.n	ad78 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ad70:	4a08      	ldr	r2, [pc, #32]	; (ad94 <_usb_d_dev_register_callback+0x44>)
    ad72:	68fb      	ldr	r3, [r7, #12]
    ad74:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ad76:	e005      	b.n	ad84 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ad78:	79fb      	ldrb	r3, [r7, #7]
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d102      	bne.n	ad84 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ad7e:	4a05      	ldr	r2, [pc, #20]	; (ad94 <_usb_d_dev_register_callback+0x44>)
    ad80:	68fb      	ldr	r3, [r7, #12]
    ad82:	6013      	str	r3, [r2, #0]
}
    ad84:	bf00      	nop
    ad86:	3714      	adds	r7, #20
    ad88:	46bd      	mov	sp, r7
    ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad8e:	4770      	bx	lr
    ad90:	00008c31 	.word	0x00008c31
    ad94:	20000bc4 	.word	0x20000bc4

0000ad98 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ad98:	b480      	push	{r7}
    ad9a:	b085      	sub	sp, #20
    ad9c:	af00      	add	r7, sp, #0
    ad9e:	4603      	mov	r3, r0
    ada0:	6039      	str	r1, [r7, #0]
    ada2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ada4:	683b      	ldr	r3, [r7, #0]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d001      	beq.n	adae <_usb_d_dev_register_ep_callback+0x16>
    adaa:	683b      	ldr	r3, [r7, #0]
    adac:	e000      	b.n	adb0 <_usb_d_dev_register_ep_callback+0x18>
    adae:	4b0e      	ldr	r3, [pc, #56]	; (ade8 <_usb_d_dev_register_ep_callback+0x50>)
    adb0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    adb2:	79fb      	ldrb	r3, [r7, #7]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d103      	bne.n	adc0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    adb8:	4a0c      	ldr	r2, [pc, #48]	; (adec <_usb_d_dev_register_ep_callback+0x54>)
    adba:	68fb      	ldr	r3, [r7, #12]
    adbc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    adbe:	e00c      	b.n	adda <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    adc0:	79fb      	ldrb	r3, [r7, #7]
    adc2:	2b01      	cmp	r3, #1
    adc4:	d103      	bne.n	adce <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    adc6:	4a09      	ldr	r2, [pc, #36]	; (adec <_usb_d_dev_register_ep_callback+0x54>)
    adc8:	68fb      	ldr	r3, [r7, #12]
    adca:	60d3      	str	r3, [r2, #12]
}
    adcc:	e005      	b.n	adda <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    adce:	79fb      	ldrb	r3, [r7, #7]
    add0:	2b02      	cmp	r3, #2
    add2:	d102      	bne.n	adda <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    add4:	4a05      	ldr	r2, [pc, #20]	; (adec <_usb_d_dev_register_ep_callback+0x54>)
    add6:	68fb      	ldr	r3, [r7, #12]
    add8:	6113      	str	r3, [r2, #16]
}
    adda:	bf00      	nop
    addc:	3714      	adds	r7, #20
    adde:	46bd      	mov	sp, r7
    ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ade4:	4770      	bx	lr
    ade6:	bf00      	nop
    ade8:	00008c31 	.word	0x00008c31
    adec:	20000bc4 	.word	0x20000bc4

0000adf0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    adf0:	b580      	push	{r7, lr}
    adf2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    adf4:	4b01      	ldr	r3, [pc, #4]	; (adfc <USB_0_Handler+0xc>)
    adf6:	4798      	blx	r3
}
    adf8:	bf00      	nop
    adfa:	bd80      	pop	{r7, pc}
    adfc:	0000a061 	.word	0x0000a061

0000ae00 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ae00:	b580      	push	{r7, lr}
    ae02:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae04:	4b01      	ldr	r3, [pc, #4]	; (ae0c <USB_1_Handler+0xc>)
    ae06:	4798      	blx	r3
}
    ae08:	bf00      	nop
    ae0a:	bd80      	pop	{r7, pc}
    ae0c:	0000a061 	.word	0x0000a061

0000ae10 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ae10:	b580      	push	{r7, lr}
    ae12:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae14:	4b01      	ldr	r3, [pc, #4]	; (ae1c <USB_2_Handler+0xc>)
    ae16:	4798      	blx	r3
}
    ae18:	bf00      	nop
    ae1a:	bd80      	pop	{r7, pc}
    ae1c:	0000a061 	.word	0x0000a061

0000ae20 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ae20:	b580      	push	{r7, lr}
    ae22:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae24:	4b01      	ldr	r3, [pc, #4]	; (ae2c <USB_3_Handler+0xc>)
    ae26:	4798      	blx	r3
}
    ae28:	bf00      	nop
    ae2a:	bd80      	pop	{r7, pc}
    ae2c:	0000a061 	.word	0x0000a061

0000ae30 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ae30:	b480      	push	{r7}
    ae32:	b083      	sub	sp, #12
    ae34:	af00      	add	r7, sp, #0
    ae36:	6078      	str	r0, [r7, #4]
    ae38:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ae3a:	bf00      	nop
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	689a      	ldr	r2, [r3, #8]
    ae40:	683b      	ldr	r3, [r7, #0]
    ae42:	4013      	ands	r3, r2
    ae44:	2b00      	cmp	r3, #0
    ae46:	d1f9      	bne.n	ae3c <hri_wdt_wait_for_sync+0xc>
	};
}
    ae48:	bf00      	nop
    ae4a:	370c      	adds	r7, #12
    ae4c:	46bd      	mov	sp, r7
    ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae52:	4770      	bx	lr

0000ae54 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	b084      	sub	sp, #16
    ae58:	af00      	add	r7, sp, #0
    ae5a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae5c:	210e      	movs	r1, #14
    ae5e:	6878      	ldr	r0, [r7, #4]
    ae60:	4b0a      	ldr	r3, [pc, #40]	; (ae8c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ae62:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ae6a:	7bfb      	ldrb	r3, [r7, #15]
    ae6c:	085b      	lsrs	r3, r3, #1
    ae6e:	b2db      	uxtb	r3, r3
    ae70:	f003 0301 	and.w	r3, r3, #1
    ae74:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ae76:	7bfb      	ldrb	r3, [r7, #15]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	bf14      	ite	ne
    ae7c:	2301      	movne	r3, #1
    ae7e:	2300      	moveq	r3, #0
    ae80:	b2db      	uxtb	r3, r3
}
    ae82:	4618      	mov	r0, r3
    ae84:	3710      	adds	r7, #16
    ae86:	46bd      	mov	sp, r7
    ae88:	bd80      	pop	{r7, pc}
    ae8a:	bf00      	nop
    ae8c:	0000ae31 	.word	0x0000ae31

0000ae90 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ae90:	b580      	push	{r7, lr}
    ae92:	b082      	sub	sp, #8
    ae94:	af00      	add	r7, sp, #0
    ae96:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ae98:	687b      	ldr	r3, [r7, #4]
    ae9a:	781b      	ldrb	r3, [r3, #0]
    ae9c:	b2db      	uxtb	r3, r3
    ae9e:	f023 0304 	bic.w	r3, r3, #4
    aea2:	b2da      	uxtb	r2, r3
    aea4:	687b      	ldr	r3, [r7, #4]
    aea6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aea8:	210e      	movs	r1, #14
    aeaa:	6878      	ldr	r0, [r7, #4]
    aeac:	4b02      	ldr	r3, [pc, #8]	; (aeb8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    aeae:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    aeb0:	bf00      	nop
    aeb2:	3708      	adds	r7, #8
    aeb4:	46bd      	mov	sp, r7
    aeb6:	bd80      	pop	{r7, pc}
    aeb8:	0000ae31 	.word	0x0000ae31

0000aebc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    aebc:	b580      	push	{r7, lr}
    aebe:	b084      	sub	sp, #16
    aec0:	af00      	add	r7, sp, #0
    aec2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aec4:	210e      	movs	r1, #14
    aec6:	6878      	ldr	r0, [r7, #4]
    aec8:	4b08      	ldr	r3, [pc, #32]	; (aeec <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    aeca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aecc:	687b      	ldr	r3, [r7, #4]
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    aed2:	7bfb      	ldrb	r3, [r7, #15]
    aed4:	09db      	lsrs	r3, r3, #7
    aed6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aed8:	7bfb      	ldrb	r3, [r7, #15]
    aeda:	2b00      	cmp	r3, #0
    aedc:	bf14      	ite	ne
    aede:	2301      	movne	r3, #1
    aee0:	2300      	moveq	r3, #0
    aee2:	b2db      	uxtb	r3, r3
}
    aee4:	4618      	mov	r0, r3
    aee6:	3710      	adds	r7, #16
    aee8:	46bd      	mov	sp, r7
    aeea:	bd80      	pop	{r7, pc}
    aeec:	0000ae31 	.word	0x0000ae31

0000aef0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    aef0:	b480      	push	{r7}
    aef2:	b085      	sub	sp, #20
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
    aef8:	460b      	mov	r3, r1
    aefa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	785b      	ldrb	r3, [r3, #1]
    af00:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    af02:	7bfb      	ldrb	r3, [r7, #15]
    af04:	f023 030f 	bic.w	r3, r3, #15
    af08:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    af0a:	78fb      	ldrb	r3, [r7, #3]
    af0c:	f003 030f 	and.w	r3, r3, #15
    af10:	b2da      	uxtb	r2, r3
    af12:	7bfb      	ldrb	r3, [r7, #15]
    af14:	4313      	orrs	r3, r2
    af16:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    af18:	687b      	ldr	r3, [r7, #4]
    af1a:	7bfa      	ldrb	r2, [r7, #15]
    af1c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    af1e:	bf00      	nop
    af20:	3714      	adds	r7, #20
    af22:	46bd      	mov	sp, r7
    af24:	f85d 7b04 	ldr.w	r7, [sp], #4
    af28:	4770      	bx	lr
	...

0000af2c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    af2c:	b580      	push	{r7, lr}
    af2e:	b082      	sub	sp, #8
    af30:	af00      	add	r7, sp, #0
    af32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	2b00      	cmp	r3, #0
    af38:	d005      	beq.n	af46 <_wdt_init+0x1a>
    af3a:	687b      	ldr	r3, [r7, #4]
    af3c:	681b      	ldr	r3, [r3, #0]
    af3e:	2b00      	cmp	r3, #0
    af40:	d001      	beq.n	af46 <_wdt_init+0x1a>
    af42:	2301      	movs	r3, #1
    af44:	e000      	b.n	af48 <_wdt_init+0x1c>
    af46:	2300      	movs	r3, #0
    af48:	f003 0301 	and.w	r3, r3, #1
    af4c:	b2db      	uxtb	r3, r3
    af4e:	2250      	movs	r2, #80	; 0x50
    af50:	4913      	ldr	r1, [pc, #76]	; (afa0 <_wdt_init+0x74>)
    af52:	4618      	mov	r0, r3
    af54:	4b13      	ldr	r3, [pc, #76]	; (afa4 <_wdt_init+0x78>)
    af56:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    af58:	687b      	ldr	r3, [r7, #4]
    af5a:	681b      	ldr	r3, [r3, #0]
    af5c:	4618      	mov	r0, r3
    af5e:	4b12      	ldr	r3, [pc, #72]	; (afa8 <_wdt_init+0x7c>)
    af60:	4798      	blx	r3
    af62:	4603      	mov	r3, r0
    af64:	2b00      	cmp	r3, #0
    af66:	d107      	bne.n	af78 <_wdt_init+0x4c>
    af68:	687b      	ldr	r3, [r7, #4]
    af6a:	681b      	ldr	r3, [r3, #0]
    af6c:	4618      	mov	r0, r3
    af6e:	4b0f      	ldr	r3, [pc, #60]	; (afac <_wdt_init+0x80>)
    af70:	4798      	blx	r3
    af72:	4603      	mov	r3, r0
    af74:	2b00      	cmp	r3, #0
    af76:	d002      	beq.n	af7e <_wdt_init+0x52>
		return ERR_DENIED;
    af78:	f06f 0310 	mvn.w	r3, #16
    af7c:	e00b      	b.n	af96 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    af7e:	687b      	ldr	r3, [r7, #4]
    af80:	681b      	ldr	r3, [r3, #0]
    af82:	4618      	mov	r0, r3
    af84:	4b0a      	ldr	r3, [pc, #40]	; (afb0 <_wdt_init+0x84>)
    af86:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    af88:	687b      	ldr	r3, [r7, #4]
    af8a:	681b      	ldr	r3, [r3, #0]
    af8c:	210b      	movs	r1, #11
    af8e:	4618      	mov	r0, r3
    af90:	4b08      	ldr	r3, [pc, #32]	; (afb4 <_wdt_init+0x88>)
    af92:	4798      	blx	r3
	}

	return ERR_NONE;
    af94:	2300      	movs	r3, #0
}
    af96:	4618      	mov	r0, r3
    af98:	3708      	adds	r7, #8
    af9a:	46bd      	mov	sp, r7
    af9c:	bd80      	pop	{r7, pc}
    af9e:	bf00      	nop
    afa0:	0000f388 	.word	0x0000f388
    afa4:	0000397d 	.word	0x0000397d
    afa8:	0000aebd 	.word	0x0000aebd
    afac:	0000ae55 	.word	0x0000ae55
    afb0:	0000ae91 	.word	0x0000ae91
    afb4:	0000aef1 	.word	0x0000aef1

0000afb8 <hri_port_set_DIR_reg>:
{
    afb8:	b480      	push	{r7}
    afba:	b085      	sub	sp, #20
    afbc:	af00      	add	r7, sp, #0
    afbe:	60f8      	str	r0, [r7, #12]
    afc0:	460b      	mov	r3, r1
    afc2:	607a      	str	r2, [r7, #4]
    afc4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    afc6:	7afb      	ldrb	r3, [r7, #11]
    afc8:	68fa      	ldr	r2, [r7, #12]
    afca:	01db      	lsls	r3, r3, #7
    afcc:	4413      	add	r3, r2
    afce:	3308      	adds	r3, #8
    afd0:	687a      	ldr	r2, [r7, #4]
    afd2:	601a      	str	r2, [r3, #0]
}
    afd4:	bf00      	nop
    afd6:	3714      	adds	r7, #20
    afd8:	46bd      	mov	sp, r7
    afda:	f85d 7b04 	ldr.w	r7, [sp], #4
    afde:	4770      	bx	lr

0000afe0 <hri_port_clear_DIR_reg>:
{
    afe0:	b480      	push	{r7}
    afe2:	b085      	sub	sp, #20
    afe4:	af00      	add	r7, sp, #0
    afe6:	60f8      	str	r0, [r7, #12]
    afe8:	460b      	mov	r3, r1
    afea:	607a      	str	r2, [r7, #4]
    afec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    afee:	7afb      	ldrb	r3, [r7, #11]
    aff0:	68fa      	ldr	r2, [r7, #12]
    aff2:	01db      	lsls	r3, r3, #7
    aff4:	4413      	add	r3, r2
    aff6:	3304      	adds	r3, #4
    aff8:	687a      	ldr	r2, [r7, #4]
    affa:	601a      	str	r2, [r3, #0]
}
    affc:	bf00      	nop
    affe:	3714      	adds	r7, #20
    b000:	46bd      	mov	sp, r7
    b002:	f85d 7b04 	ldr.w	r7, [sp], #4
    b006:	4770      	bx	lr

0000b008 <hri_port_set_OUT_reg>:
{
    b008:	b480      	push	{r7}
    b00a:	b085      	sub	sp, #20
    b00c:	af00      	add	r7, sp, #0
    b00e:	60f8      	str	r0, [r7, #12]
    b010:	460b      	mov	r3, r1
    b012:	607a      	str	r2, [r7, #4]
    b014:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b016:	7afb      	ldrb	r3, [r7, #11]
    b018:	68fa      	ldr	r2, [r7, #12]
    b01a:	01db      	lsls	r3, r3, #7
    b01c:	4413      	add	r3, r2
    b01e:	3318      	adds	r3, #24
    b020:	687a      	ldr	r2, [r7, #4]
    b022:	601a      	str	r2, [r3, #0]
}
    b024:	bf00      	nop
    b026:	3714      	adds	r7, #20
    b028:	46bd      	mov	sp, r7
    b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b02e:	4770      	bx	lr

0000b030 <hri_port_clear_OUT_reg>:
{
    b030:	b480      	push	{r7}
    b032:	b085      	sub	sp, #20
    b034:	af00      	add	r7, sp, #0
    b036:	60f8      	str	r0, [r7, #12]
    b038:	460b      	mov	r3, r1
    b03a:	607a      	str	r2, [r7, #4]
    b03c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b03e:	7afb      	ldrb	r3, [r7, #11]
    b040:	68fa      	ldr	r2, [r7, #12]
    b042:	01db      	lsls	r3, r3, #7
    b044:	4413      	add	r3, r2
    b046:	3314      	adds	r3, #20
    b048:	687a      	ldr	r2, [r7, #4]
    b04a:	601a      	str	r2, [r3, #0]
}
    b04c:	bf00      	nop
    b04e:	3714      	adds	r7, #20
    b050:	46bd      	mov	sp, r7
    b052:	f85d 7b04 	ldr.w	r7, [sp], #4
    b056:	4770      	bx	lr

0000b058 <hri_port_write_PMUX_PMUXE_bf>:
{
    b058:	b480      	push	{r7}
    b05a:	b085      	sub	sp, #20
    b05c:	af00      	add	r7, sp, #0
    b05e:	6078      	str	r0, [r7, #4]
    b060:	4608      	mov	r0, r1
    b062:	4611      	mov	r1, r2
    b064:	461a      	mov	r2, r3
    b066:	4603      	mov	r3, r0
    b068:	70fb      	strb	r3, [r7, #3]
    b06a:	460b      	mov	r3, r1
    b06c:	70bb      	strb	r3, [r7, #2]
    b06e:	4613      	mov	r3, r2
    b070:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b072:	78fa      	ldrb	r2, [r7, #3]
    b074:	78bb      	ldrb	r3, [r7, #2]
    b076:	6879      	ldr	r1, [r7, #4]
    b078:	01d2      	lsls	r2, r2, #7
    b07a:	440a      	add	r2, r1
    b07c:	4413      	add	r3, r2
    b07e:	3330      	adds	r3, #48	; 0x30
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b084:	7bfb      	ldrb	r3, [r7, #15]
    b086:	f023 030f 	bic.w	r3, r3, #15
    b08a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b08c:	787b      	ldrb	r3, [r7, #1]
    b08e:	f003 030f 	and.w	r3, r3, #15
    b092:	b2da      	uxtb	r2, r3
    b094:	7bfb      	ldrb	r3, [r7, #15]
    b096:	4313      	orrs	r3, r2
    b098:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b09a:	78fa      	ldrb	r2, [r7, #3]
    b09c:	78bb      	ldrb	r3, [r7, #2]
    b09e:	6879      	ldr	r1, [r7, #4]
    b0a0:	01d2      	lsls	r2, r2, #7
    b0a2:	440a      	add	r2, r1
    b0a4:	4413      	add	r3, r2
    b0a6:	3330      	adds	r3, #48	; 0x30
    b0a8:	7bfa      	ldrb	r2, [r7, #15]
    b0aa:	701a      	strb	r2, [r3, #0]
}
    b0ac:	bf00      	nop
    b0ae:	3714      	adds	r7, #20
    b0b0:	46bd      	mov	sp, r7
    b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0b6:	4770      	bx	lr

0000b0b8 <hri_port_write_PMUX_PMUXO_bf>:
{
    b0b8:	b480      	push	{r7}
    b0ba:	b085      	sub	sp, #20
    b0bc:	af00      	add	r7, sp, #0
    b0be:	6078      	str	r0, [r7, #4]
    b0c0:	4608      	mov	r0, r1
    b0c2:	4611      	mov	r1, r2
    b0c4:	461a      	mov	r2, r3
    b0c6:	4603      	mov	r3, r0
    b0c8:	70fb      	strb	r3, [r7, #3]
    b0ca:	460b      	mov	r3, r1
    b0cc:	70bb      	strb	r3, [r7, #2]
    b0ce:	4613      	mov	r3, r2
    b0d0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b0d2:	78fa      	ldrb	r2, [r7, #3]
    b0d4:	78bb      	ldrb	r3, [r7, #2]
    b0d6:	6879      	ldr	r1, [r7, #4]
    b0d8:	01d2      	lsls	r2, r2, #7
    b0da:	440a      	add	r2, r1
    b0dc:	4413      	add	r3, r2
    b0de:	3330      	adds	r3, #48	; 0x30
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b0e4:	7bfb      	ldrb	r3, [r7, #15]
    b0e6:	f003 030f 	and.w	r3, r3, #15
    b0ea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b0ec:	787b      	ldrb	r3, [r7, #1]
    b0ee:	011b      	lsls	r3, r3, #4
    b0f0:	b2da      	uxtb	r2, r3
    b0f2:	7bfb      	ldrb	r3, [r7, #15]
    b0f4:	4313      	orrs	r3, r2
    b0f6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b0f8:	78fa      	ldrb	r2, [r7, #3]
    b0fa:	78bb      	ldrb	r3, [r7, #2]
    b0fc:	6879      	ldr	r1, [r7, #4]
    b0fe:	01d2      	lsls	r2, r2, #7
    b100:	440a      	add	r2, r1
    b102:	4413      	add	r3, r2
    b104:	3330      	adds	r3, #48	; 0x30
    b106:	7bfa      	ldrb	r2, [r7, #15]
    b108:	701a      	strb	r2, [r3, #0]
}
    b10a:	bf00      	nop
    b10c:	3714      	adds	r7, #20
    b10e:	46bd      	mov	sp, r7
    b110:	f85d 7b04 	ldr.w	r7, [sp], #4
    b114:	4770      	bx	lr

0000b116 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b116:	b480      	push	{r7}
    b118:	b085      	sub	sp, #20
    b11a:	af00      	add	r7, sp, #0
    b11c:	6078      	str	r0, [r7, #4]
    b11e:	4608      	mov	r0, r1
    b120:	4611      	mov	r1, r2
    b122:	461a      	mov	r2, r3
    b124:	4603      	mov	r3, r0
    b126:	70fb      	strb	r3, [r7, #3]
    b128:	460b      	mov	r3, r1
    b12a:	70bb      	strb	r3, [r7, #2]
    b12c:	4613      	mov	r3, r2
    b12e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b130:	78fa      	ldrb	r2, [r7, #3]
    b132:	78bb      	ldrb	r3, [r7, #2]
    b134:	6879      	ldr	r1, [r7, #4]
    b136:	01d2      	lsls	r2, r2, #7
    b138:	440a      	add	r2, r1
    b13a:	4413      	add	r3, r2
    b13c:	3340      	adds	r3, #64	; 0x40
    b13e:	781b      	ldrb	r3, [r3, #0]
    b140:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b142:	7bfb      	ldrb	r3, [r7, #15]
    b144:	f023 0301 	bic.w	r3, r3, #1
    b148:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b14a:	787a      	ldrb	r2, [r7, #1]
    b14c:	7bfb      	ldrb	r3, [r7, #15]
    b14e:	4313      	orrs	r3, r2
    b150:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b152:	78fa      	ldrb	r2, [r7, #3]
    b154:	78bb      	ldrb	r3, [r7, #2]
    b156:	6879      	ldr	r1, [r7, #4]
    b158:	01d2      	lsls	r2, r2, #7
    b15a:	440a      	add	r2, r1
    b15c:	4413      	add	r3, r2
    b15e:	3340      	adds	r3, #64	; 0x40
    b160:	7bfa      	ldrb	r2, [r7, #15]
    b162:	701a      	strb	r2, [r3, #0]
}
    b164:	bf00      	nop
    b166:	3714      	adds	r7, #20
    b168:	46bd      	mov	sp, r7
    b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b16e:	4770      	bx	lr

0000b170 <hri_port_write_WRCONFIG_reg>:
{
    b170:	b480      	push	{r7}
    b172:	b085      	sub	sp, #20
    b174:	af00      	add	r7, sp, #0
    b176:	60f8      	str	r0, [r7, #12]
    b178:	460b      	mov	r3, r1
    b17a:	607a      	str	r2, [r7, #4]
    b17c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b17e:	7afb      	ldrb	r3, [r7, #11]
    b180:	68fa      	ldr	r2, [r7, #12]
    b182:	01db      	lsls	r3, r3, #7
    b184:	4413      	add	r3, r2
    b186:	3328      	adds	r3, #40	; 0x28
    b188:	687a      	ldr	r2, [r7, #4]
    b18a:	601a      	str	r2, [r3, #0]
}
    b18c:	bf00      	nop
    b18e:	3714      	adds	r7, #20
    b190:	46bd      	mov	sp, r7
    b192:	f85d 7b04 	ldr.w	r7, [sp], #4
    b196:	4770      	bx	lr

0000b198 <_gpio_set_direction>:
{
    b198:	b580      	push	{r7, lr}
    b19a:	b082      	sub	sp, #8
    b19c:	af00      	add	r7, sp, #0
    b19e:	4603      	mov	r3, r0
    b1a0:	6039      	str	r1, [r7, #0]
    b1a2:	71fb      	strb	r3, [r7, #7]
    b1a4:	4613      	mov	r3, r2
    b1a6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b1a8:	79bb      	ldrb	r3, [r7, #6]
    b1aa:	2b01      	cmp	r3, #1
    b1ac:	d01c      	beq.n	b1e8 <_gpio_set_direction+0x50>
    b1ae:	2b02      	cmp	r3, #2
    b1b0:	d037      	beq.n	b222 <_gpio_set_direction+0x8a>
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d14e      	bne.n	b254 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1b6:	79fb      	ldrb	r3, [r7, #7]
    b1b8:	683a      	ldr	r2, [r7, #0]
    b1ba:	4619      	mov	r1, r3
    b1bc:	482a      	ldr	r0, [pc, #168]	; (b268 <_gpio_set_direction+0xd0>)
    b1be:	4b2b      	ldr	r3, [pc, #172]	; (b26c <_gpio_set_direction+0xd4>)
    b1c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b1c2:	683b      	ldr	r3, [r7, #0]
    b1c4:	b29b      	uxth	r3, r3
    b1c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b1ca:	79fb      	ldrb	r3, [r7, #7]
    b1cc:	4619      	mov	r1, r3
    b1ce:	4826      	ldr	r0, [pc, #152]	; (b268 <_gpio_set_direction+0xd0>)
    b1d0:	4b27      	ldr	r3, [pc, #156]	; (b270 <_gpio_set_direction+0xd8>)
    b1d2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b1d4:	683b      	ldr	r3, [r7, #0]
    b1d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b1d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b1dc:	79fb      	ldrb	r3, [r7, #7]
    b1de:	4619      	mov	r1, r3
    b1e0:	4821      	ldr	r0, [pc, #132]	; (b268 <_gpio_set_direction+0xd0>)
    b1e2:	4b23      	ldr	r3, [pc, #140]	; (b270 <_gpio_set_direction+0xd8>)
    b1e4:	4798      	blx	r3
		break;
    b1e6:	e03a      	b.n	b25e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1e8:	79fb      	ldrb	r3, [r7, #7]
    b1ea:	683a      	ldr	r2, [r7, #0]
    b1ec:	4619      	mov	r1, r3
    b1ee:	481e      	ldr	r0, [pc, #120]	; (b268 <_gpio_set_direction+0xd0>)
    b1f0:	4b1e      	ldr	r3, [pc, #120]	; (b26c <_gpio_set_direction+0xd4>)
    b1f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b1f4:	683b      	ldr	r3, [r7, #0]
    b1f6:	b29b      	uxth	r3, r3
    b1f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b1fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b200:	79f9      	ldrb	r1, [r7, #7]
    b202:	461a      	mov	r2, r3
    b204:	4818      	ldr	r0, [pc, #96]	; (b268 <_gpio_set_direction+0xd0>)
    b206:	4b1a      	ldr	r3, [pc, #104]	; (b270 <_gpio_set_direction+0xd8>)
    b208:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b20a:	683b      	ldr	r3, [r7, #0]
    b20c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b20e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b216:	79f9      	ldrb	r1, [r7, #7]
    b218:	461a      	mov	r2, r3
    b21a:	4813      	ldr	r0, [pc, #76]	; (b268 <_gpio_set_direction+0xd0>)
    b21c:	4b14      	ldr	r3, [pc, #80]	; (b270 <_gpio_set_direction+0xd8>)
    b21e:	4798      	blx	r3
		break;
    b220:	e01d      	b.n	b25e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b222:	79fb      	ldrb	r3, [r7, #7]
    b224:	683a      	ldr	r2, [r7, #0]
    b226:	4619      	mov	r1, r3
    b228:	480f      	ldr	r0, [pc, #60]	; (b268 <_gpio_set_direction+0xd0>)
    b22a:	4b12      	ldr	r3, [pc, #72]	; (b274 <_gpio_set_direction+0xdc>)
    b22c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b22e:	683b      	ldr	r3, [r7, #0]
    b230:	b29b      	uxth	r3, r3
    b232:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b236:	79fb      	ldrb	r3, [r7, #7]
    b238:	4619      	mov	r1, r3
    b23a:	480b      	ldr	r0, [pc, #44]	; (b268 <_gpio_set_direction+0xd0>)
    b23c:	4b0c      	ldr	r3, [pc, #48]	; (b270 <_gpio_set_direction+0xd8>)
    b23e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b240:	683b      	ldr	r3, [r7, #0]
    b242:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b244:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b248:	79fb      	ldrb	r3, [r7, #7]
    b24a:	4619      	mov	r1, r3
    b24c:	4806      	ldr	r0, [pc, #24]	; (b268 <_gpio_set_direction+0xd0>)
    b24e:	4b08      	ldr	r3, [pc, #32]	; (b270 <_gpio_set_direction+0xd8>)
    b250:	4798      	blx	r3
		break;
    b252:	e004      	b.n	b25e <_gpio_set_direction+0xc6>
		ASSERT(false);
    b254:	2246      	movs	r2, #70	; 0x46
    b256:	4908      	ldr	r1, [pc, #32]	; (b278 <_gpio_set_direction+0xe0>)
    b258:	2000      	movs	r0, #0
    b25a:	4b08      	ldr	r3, [pc, #32]	; (b27c <_gpio_set_direction+0xe4>)
    b25c:	4798      	blx	r3
}
    b25e:	bf00      	nop
    b260:	3708      	adds	r7, #8
    b262:	46bd      	mov	sp, r7
    b264:	bd80      	pop	{r7, pc}
    b266:	bf00      	nop
    b268:	41008000 	.word	0x41008000
    b26c:	0000afe1 	.word	0x0000afe1
    b270:	0000b171 	.word	0x0000b171
    b274:	0000afb9 	.word	0x0000afb9
    b278:	0000f3a0 	.word	0x0000f3a0
    b27c:	0000397d 	.word	0x0000397d

0000b280 <_gpio_set_level>:
{
    b280:	b580      	push	{r7, lr}
    b282:	b082      	sub	sp, #8
    b284:	af00      	add	r7, sp, #0
    b286:	4603      	mov	r3, r0
    b288:	6039      	str	r1, [r7, #0]
    b28a:	71fb      	strb	r3, [r7, #7]
    b28c:	4613      	mov	r3, r2
    b28e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b290:	79bb      	ldrb	r3, [r7, #6]
    b292:	2b00      	cmp	r3, #0
    b294:	d006      	beq.n	b2a4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b296:	79fb      	ldrb	r3, [r7, #7]
    b298:	683a      	ldr	r2, [r7, #0]
    b29a:	4619      	mov	r1, r3
    b29c:	4806      	ldr	r0, [pc, #24]	; (b2b8 <_gpio_set_level+0x38>)
    b29e:	4b07      	ldr	r3, [pc, #28]	; (b2bc <_gpio_set_level+0x3c>)
    b2a0:	4798      	blx	r3
}
    b2a2:	e005      	b.n	b2b0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b2a4:	79fb      	ldrb	r3, [r7, #7]
    b2a6:	683a      	ldr	r2, [r7, #0]
    b2a8:	4619      	mov	r1, r3
    b2aa:	4803      	ldr	r0, [pc, #12]	; (b2b8 <_gpio_set_level+0x38>)
    b2ac:	4b04      	ldr	r3, [pc, #16]	; (b2c0 <_gpio_set_level+0x40>)
    b2ae:	4798      	blx	r3
}
    b2b0:	bf00      	nop
    b2b2:	3708      	adds	r7, #8
    b2b4:	46bd      	mov	sp, r7
    b2b6:	bd80      	pop	{r7, pc}
    b2b8:	41008000 	.word	0x41008000
    b2bc:	0000b009 	.word	0x0000b009
    b2c0:	0000b031 	.word	0x0000b031

0000b2c4 <_gpio_set_pin_function>:
{
    b2c4:	b590      	push	{r4, r7, lr}
    b2c6:	b085      	sub	sp, #20
    b2c8:	af00      	add	r7, sp, #0
    b2ca:	6078      	str	r0, [r7, #4]
    b2cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	095b      	lsrs	r3, r3, #5
    b2d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b2d4:	687b      	ldr	r3, [r7, #4]
    b2d6:	b2db      	uxtb	r3, r3
    b2d8:	f003 031f 	and.w	r3, r3, #31
    b2dc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b2de:	683b      	ldr	r3, [r7, #0]
    b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    b2e4:	d106      	bne.n	b2f4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b2e6:	7bba      	ldrb	r2, [r7, #14]
    b2e8:	7bf9      	ldrb	r1, [r7, #15]
    b2ea:	2300      	movs	r3, #0
    b2ec:	4812      	ldr	r0, [pc, #72]	; (b338 <_gpio_set_pin_function+0x74>)
    b2ee:	4c13      	ldr	r4, [pc, #76]	; (b33c <_gpio_set_pin_function+0x78>)
    b2f0:	47a0      	blx	r4
}
    b2f2:	e01d      	b.n	b330 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b2f4:	7bba      	ldrb	r2, [r7, #14]
    b2f6:	7bf9      	ldrb	r1, [r7, #15]
    b2f8:	2301      	movs	r3, #1
    b2fa:	480f      	ldr	r0, [pc, #60]	; (b338 <_gpio_set_pin_function+0x74>)
    b2fc:	4c0f      	ldr	r4, [pc, #60]	; (b33c <_gpio_set_pin_function+0x78>)
    b2fe:	47a0      	blx	r4
		if (pin & 1) {
    b300:	7bbb      	ldrb	r3, [r7, #14]
    b302:	f003 0301 	and.w	r3, r3, #1
    b306:	2b00      	cmp	r3, #0
    b308:	d009      	beq.n	b31e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b30a:	7bbb      	ldrb	r3, [r7, #14]
    b30c:	085b      	lsrs	r3, r3, #1
    b30e:	b2da      	uxtb	r2, r3
    b310:	683b      	ldr	r3, [r7, #0]
    b312:	b2db      	uxtb	r3, r3
    b314:	7bf9      	ldrb	r1, [r7, #15]
    b316:	4808      	ldr	r0, [pc, #32]	; (b338 <_gpio_set_pin_function+0x74>)
    b318:	4c09      	ldr	r4, [pc, #36]	; (b340 <_gpio_set_pin_function+0x7c>)
    b31a:	47a0      	blx	r4
}
    b31c:	e008      	b.n	b330 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b31e:	7bbb      	ldrb	r3, [r7, #14]
    b320:	085b      	lsrs	r3, r3, #1
    b322:	b2da      	uxtb	r2, r3
    b324:	683b      	ldr	r3, [r7, #0]
    b326:	b2db      	uxtb	r3, r3
    b328:	7bf9      	ldrb	r1, [r7, #15]
    b32a:	4803      	ldr	r0, [pc, #12]	; (b338 <_gpio_set_pin_function+0x74>)
    b32c:	4c05      	ldr	r4, [pc, #20]	; (b344 <_gpio_set_pin_function+0x80>)
    b32e:	47a0      	blx	r4
}
    b330:	bf00      	nop
    b332:	3714      	adds	r7, #20
    b334:	46bd      	mov	sp, r7
    b336:	bd90      	pop	{r4, r7, pc}
    b338:	41008000 	.word	0x41008000
    b33c:	0000b117 	.word	0x0000b117
    b340:	0000b0b9 	.word	0x0000b0b9
    b344:	0000b059 	.word	0x0000b059

0000b348 <gpio_set_pin_function>:
{
    b348:	b580      	push	{r7, lr}
    b34a:	b082      	sub	sp, #8
    b34c:	af00      	add	r7, sp, #0
    b34e:	6078      	str	r0, [r7, #4]
    b350:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b352:	6839      	ldr	r1, [r7, #0]
    b354:	6878      	ldr	r0, [r7, #4]
    b356:	4b03      	ldr	r3, [pc, #12]	; (b364 <gpio_set_pin_function+0x1c>)
    b358:	4798      	blx	r3
}
    b35a:	bf00      	nop
    b35c:	3708      	adds	r7, #8
    b35e:	46bd      	mov	sp, r7
    b360:	bd80      	pop	{r7, pc}
    b362:	bf00      	nop
    b364:	0000b2c5 	.word	0x0000b2c5

0000b368 <gpio_set_pin_direction>:
{
    b368:	b580      	push	{r7, lr}
    b36a:	b082      	sub	sp, #8
    b36c:	af00      	add	r7, sp, #0
    b36e:	4603      	mov	r3, r0
    b370:	460a      	mov	r2, r1
    b372:	71fb      	strb	r3, [r7, #7]
    b374:	4613      	mov	r3, r2
    b376:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b378:	79fb      	ldrb	r3, [r7, #7]
    b37a:	095b      	lsrs	r3, r3, #5
    b37c:	b2d8      	uxtb	r0, r3
    b37e:	79fb      	ldrb	r3, [r7, #7]
    b380:	f003 031f 	and.w	r3, r3, #31
    b384:	2201      	movs	r2, #1
    b386:	fa02 f303 	lsl.w	r3, r2, r3
    b38a:	79ba      	ldrb	r2, [r7, #6]
    b38c:	4619      	mov	r1, r3
    b38e:	4b03      	ldr	r3, [pc, #12]	; (b39c <gpio_set_pin_direction+0x34>)
    b390:	4798      	blx	r3
}
    b392:	bf00      	nop
    b394:	3708      	adds	r7, #8
    b396:	46bd      	mov	sp, r7
    b398:	bd80      	pop	{r7, pc}
    b39a:	bf00      	nop
    b39c:	0000b199 	.word	0x0000b199

0000b3a0 <gpio_set_pin_level>:
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b082      	sub	sp, #8
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	4603      	mov	r3, r0
    b3a8:	460a      	mov	r2, r1
    b3aa:	71fb      	strb	r3, [r7, #7]
    b3ac:	4613      	mov	r3, r2
    b3ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b3b0:	79fb      	ldrb	r3, [r7, #7]
    b3b2:	095b      	lsrs	r3, r3, #5
    b3b4:	b2d8      	uxtb	r0, r3
    b3b6:	79fb      	ldrb	r3, [r7, #7]
    b3b8:	f003 031f 	and.w	r3, r3, #31
    b3bc:	2201      	movs	r2, #1
    b3be:	fa02 f303 	lsl.w	r3, r2, r3
    b3c2:	79ba      	ldrb	r2, [r7, #6]
    b3c4:	4619      	mov	r1, r3
    b3c6:	4b03      	ldr	r3, [pc, #12]	; (b3d4 <gpio_set_pin_level+0x34>)
    b3c8:	4798      	blx	r3
}
    b3ca:	bf00      	nop
    b3cc:	3708      	adds	r7, #8
    b3ce:	46bd      	mov	sp, r7
    b3d0:	bd80      	pop	{r7, pc}
    b3d2:	bf00      	nop
    b3d4:	0000b281 	.word	0x0000b281

0000b3d8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b3d8:	b580      	push	{r7, lr}
    b3da:	b082      	sub	sp, #8
    b3dc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b3de:	2100      	movs	r1, #0
    b3e0:	2008      	movs	r0, #8
    b3e2:	4b24      	ldr	r3, [pc, #144]	; (b474 <QSPI_N25Q256_exit_xip+0x9c>)
    b3e4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b3e6:	2100      	movs	r1, #0
    b3e8:	202b      	movs	r0, #43	; 0x2b
    b3ea:	4b22      	ldr	r3, [pc, #136]	; (b474 <QSPI_N25Q256_exit_xip+0x9c>)
    b3ec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b3ee:	2100      	movs	r1, #0
    b3f0:	202a      	movs	r0, #42	; 0x2a
    b3f2:	4b20      	ldr	r3, [pc, #128]	; (b474 <QSPI_N25Q256_exit_xip+0x9c>)
    b3f4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b3f6:	2102      	movs	r1, #2
    b3f8:	2008      	movs	r0, #8
    b3fa:	4b1f      	ldr	r3, [pc, #124]	; (b478 <QSPI_N25Q256_exit_xip+0xa0>)
    b3fc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b3fe:	2102      	movs	r1, #2
    b400:	202b      	movs	r0, #43	; 0x2b
    b402:	4b1d      	ldr	r3, [pc, #116]	; (b478 <QSPI_N25Q256_exit_xip+0xa0>)
    b404:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b406:	2102      	movs	r1, #2
    b408:	202a      	movs	r0, #42	; 0x2a
    b40a:	4b1b      	ldr	r3, [pc, #108]	; (b478 <QSPI_N25Q256_exit_xip+0xa0>)
    b40c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b40e:	2101      	movs	r1, #1
    b410:	2008      	movs	r0, #8
    b412:	4b1a      	ldr	r3, [pc, #104]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b414:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b416:	2100      	movs	r1, #0
    b418:	202b      	movs	r0, #43	; 0x2b
    b41a:	4b18      	ldr	r3, [pc, #96]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b41c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b41e:	2100      	movs	r1, #0
    b420:	202a      	movs	r0, #42	; 0x2a
    b422:	4b16      	ldr	r3, [pc, #88]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b424:	4798      	blx	r3

	delay_us(1);
    b426:	2001      	movs	r0, #1
    b428:	4b15      	ldr	r3, [pc, #84]	; (b480 <QSPI_N25Q256_exit_xip+0xa8>)
    b42a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b42c:	2300      	movs	r3, #0
    b42e:	607b      	str	r3, [r7, #4]
    b430:	e010      	b.n	b454 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b432:	2101      	movs	r1, #1
    b434:	202a      	movs	r0, #42	; 0x2a
    b436:	4b11      	ldr	r3, [pc, #68]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b438:	4798      	blx	r3
		delay_us(1);
    b43a:	2001      	movs	r0, #1
    b43c:	4b10      	ldr	r3, [pc, #64]	; (b480 <QSPI_N25Q256_exit_xip+0xa8>)
    b43e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b440:	2100      	movs	r1, #0
    b442:	202a      	movs	r0, #42	; 0x2a
    b444:	4b0d      	ldr	r3, [pc, #52]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b446:	4798      	blx	r3
		delay_us(1);
    b448:	2001      	movs	r0, #1
    b44a:	4b0d      	ldr	r3, [pc, #52]	; (b480 <QSPI_N25Q256_exit_xip+0xa8>)
    b44c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	3301      	adds	r3, #1
    b452:	607b      	str	r3, [r7, #4]
    b454:	687b      	ldr	r3, [r7, #4]
    b456:	2b06      	cmp	r3, #6
    b458:	ddeb      	ble.n	b432 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b45a:	2101      	movs	r1, #1
    b45c:	202b      	movs	r0, #43	; 0x2b
    b45e:	4b07      	ldr	r3, [pc, #28]	; (b47c <QSPI_N25Q256_exit_xip+0xa4>)
    b460:	4798      	blx	r3
	delay_us(1);
    b462:	2001      	movs	r0, #1
    b464:	4b06      	ldr	r3, [pc, #24]	; (b480 <QSPI_N25Q256_exit_xip+0xa8>)
    b466:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b468:	4b06      	ldr	r3, [pc, #24]	; (b484 <QSPI_N25Q256_exit_xip+0xac>)
    b46a:	4798      	blx	r3
}
    b46c:	bf00      	nop
    b46e:	3708      	adds	r7, #8
    b470:	46bd      	mov	sp, r7
    b472:	bd80      	pop	{r7, pc}
    b474:	0000b349 	.word	0x0000b349
    b478:	0000b369 	.word	0x0000b369
    b47c:	0000b3a1 	.word	0x0000b3a1
    b480:	00002359 	.word	0x00002359
    b484:	000016b5 	.word	0x000016b5

0000b488 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b488:	b598      	push	{r3, r4, r7, lr}
    b48a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b48c:	4806      	ldr	r0, [pc, #24]	; (b4a8 <spi_nor_flash_init+0x20>)
    b48e:	4b07      	ldr	r3, [pc, #28]	; (b4ac <spi_nor_flash_init+0x24>)
    b490:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b492:	2300      	movs	r3, #0
    b494:	4a06      	ldr	r2, [pc, #24]	; (b4b0 <spi_nor_flash_init+0x28>)
    b496:	4904      	ldr	r1, [pc, #16]	; (b4a8 <spi_nor_flash_init+0x20>)
    b498:	4806      	ldr	r0, [pc, #24]	; (b4b4 <spi_nor_flash_init+0x2c>)
    b49a:	4c07      	ldr	r4, [pc, #28]	; (b4b8 <spi_nor_flash_init+0x30>)
    b49c:	47a0      	blx	r4
    b49e:	4602      	mov	r2, r0
    b4a0:	4b06      	ldr	r3, [pc, #24]	; (b4bc <spi_nor_flash_init+0x34>)
    b4a2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b4a4:	bf00      	nop
    b4a6:	bd98      	pop	{r3, r4, r7, pc}
    b4a8:	20001580 	.word	0x20001580
    b4ac:	000028e5 	.word	0x000028e5
    b4b0:	0000b3d9 	.word	0x0000b3d9
    b4b4:	20000d2c 	.word	0x20000d2c
    b4b8:	0000b8f5 	.word	0x0000b8f5
    b4bc:	20001780 	.word	0x20001780

0000b4c0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b4c0:	b580      	push	{r7, lr}
    b4c2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b4c4:	4805      	ldr	r0, [pc, #20]	; (b4dc <cdc_device_acm_init+0x1c>)
    b4c6:	4b06      	ldr	r3, [pc, #24]	; (b4e0 <cdc_device_acm_init+0x20>)
    b4c8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b4ca:	4b06      	ldr	r3, [pc, #24]	; (b4e4 <cdc_device_acm_init+0x24>)
    b4cc:	4798      	blx	r3

	usbdc_start(single_desc);
    b4ce:	4806      	ldr	r0, [pc, #24]	; (b4e8 <cdc_device_acm_init+0x28>)
    b4d0:	4b06      	ldr	r3, [pc, #24]	; (b4ec <cdc_device_acm_init+0x2c>)
    b4d2:	4798      	blx	r3
	usbdc_attach();
    b4d4:	4b06      	ldr	r3, [pc, #24]	; (b4f0 <cdc_device_acm_init+0x30>)
    b4d6:	4798      	blx	r3
}
    b4d8:	bf00      	nop
    b4da:	bd80      	pop	{r7, pc}
    b4dc:	20000d7c 	.word	0x20000d7c
    b4e0:	0000d01d 	.word	0x0000d01d
    b4e4:	0000c295 	.word	0x0000c295
    b4e8:	20000200 	.word	0x20000200
    b4ec:	0000d0b9 	.word	0x0000d0b9
    b4f0:	0000d109 	.word	0x0000d109

0000b4f4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b4f8:	4b01      	ldr	r3, [pc, #4]	; (b500 <usb_init+0xc>)
    b4fa:	4798      	blx	r3
}
    b4fc:	bf00      	nop
    b4fe:	bd80      	pop	{r7, pc}
    b500:	0000b4c1 	.word	0x0000b4c1

0000b504 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b504:	b480      	push	{r7}
    b506:	b085      	sub	sp, #20
    b508:	af00      	add	r7, sp, #0
    b50a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b50c:	f3ef 8310 	mrs	r3, PRIMASK
    b510:	60fb      	str	r3, [r7, #12]
  return(result);
    b512:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b514:	687b      	ldr	r3, [r7, #4]
    b516:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b518:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b51a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b51e:	bf00      	nop
    b520:	3714      	adds	r7, #20
    b522:	46bd      	mov	sp, r7
    b524:	f85d 7b04 	ldr.w	r7, [sp], #4
    b528:	4770      	bx	lr

0000b52a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b52a:	b480      	push	{r7}
    b52c:	b085      	sub	sp, #20
    b52e:	af00      	add	r7, sp, #0
    b530:	6078      	str	r0, [r7, #4]
    b532:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b536:	687b      	ldr	r3, [r7, #4]
    b538:	681b      	ldr	r3, [r3, #0]
    b53a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b53c:	68fb      	ldr	r3, [r7, #12]
    b53e:	f383 8810 	msr	PRIMASK, r3
}
    b542:	bf00      	nop
    b544:	3714      	adds	r7, #20
    b546:	46bd      	mov	sp, r7
    b548:	f85d 7b04 	ldr.w	r7, [sp], #4
    b54c:	4770      	bx	lr
	...

0000b550 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b550:	b580      	push	{r7, lr}
    b552:	b08c      	sub	sp, #48	; 0x30
    b554:	af00      	add	r7, sp, #0
    b556:	6078      	str	r0, [r7, #4]
    b558:	460b      	mov	r3, r1
    b55a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b55c:	687b      	ldr	r3, [r7, #4]
    b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b560:	687b      	ldr	r3, [r7, #4]
    b562:	681b      	ldr	r3, [r3, #0]
    b564:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b566:	f107 030c 	add.w	r3, r7, #12
    b56a:	2200      	movs	r2, #0
    b56c:	601a      	str	r2, [r3, #0]
    b56e:	605a      	str	r2, [r3, #4]
    b570:	609a      	str	r2, [r3, #8]
    b572:	60da      	str	r2, [r3, #12]
    b574:	611a      	str	r2, [r3, #16]
    b576:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b57a:	7b1b      	ldrb	r3, [r3, #12]
    b57c:	2b00      	cmp	r3, #0
    b57e:	d001      	beq.n	b584 <n25q256a_xip_confirm+0x34>
    b580:	2206      	movs	r2, #6
    b582:	e000      	b.n	b586 <n25q256a_xip_confirm+0x36>
    b584:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b586:	7b3b      	ldrb	r3, [r7, #12]
    b588:	f362 0302 	bfi	r3, r2, #0, #3
    b58c:	733b      	strb	r3, [r7, #12]
    b58e:	7b3b      	ldrb	r3, [r7, #12]
    b590:	f043 0310 	orr.w	r3, r3, #16
    b594:	733b      	strb	r3, [r7, #12]
    b596:	7b3b      	ldrb	r3, [r7, #12]
    b598:	f043 0320 	orr.w	r3, r3, #32
    b59c:	733b      	strb	r3, [r7, #12]
    b59e:	7b3b      	ldrb	r3, [r7, #12]
    b5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5a4:	733b      	strb	r3, [r7, #12]
    b5a6:	7b3b      	ldrb	r3, [r7, #12]
    b5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5ac:	733b      	strb	r3, [r7, #12]
    b5ae:	7b7b      	ldrb	r3, [r7, #13]
    b5b0:	f043 0303 	orr.w	r3, r3, #3
    b5b4:	737b      	strb	r3, [r7, #13]
    b5b6:	7b7b      	ldrb	r3, [r7, #13]
    b5b8:	2201      	movs	r2, #1
    b5ba:	f362 1305 	bfi	r3, r2, #4, #2
    b5be:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5c2:	7b1b      	ldrb	r3, [r3, #12]
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d001      	beq.n	b5cc <n25q256a_xip_confirm+0x7c>
    b5c8:	2208      	movs	r2, #8
    b5ca:	e000      	b.n	b5ce <n25q256a_xip_confirm+0x7e>
    b5cc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b5ce:	7bbb      	ldrb	r3, [r7, #14]
    b5d0:	f362 0304 	bfi	r3, r2, #0, #5
    b5d4:	73bb      	strb	r3, [r7, #14]
    b5d6:	230b      	movs	r3, #11
    b5d8:	743b      	strb	r3, [r7, #16]
    b5da:	78fb      	ldrb	r3, [r7, #3]
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d001      	beq.n	b5e4 <n25q256a_xip_confirm+0x94>
    b5e0:	2300      	movs	r3, #0
    b5e2:	e000      	b.n	b5e6 <n25q256a_xip_confirm+0x96>
    b5e4:	23ff      	movs	r3, #255	; 0xff
    b5e6:	747b      	strb	r3, [r7, #17]
    b5e8:	2301      	movs	r3, #1
    b5ea:	61bb      	str	r3, [r7, #24]
    b5ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b5f0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b5f2:	f107 030c 	add.w	r3, r7, #12
    b5f6:	4619      	mov	r1, r3
    b5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5fa:	4b07      	ldr	r3, [pc, #28]	; (b618 <n25q256a_xip_confirm+0xc8>)
    b5fc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b5fe:	78fb      	ldrb	r3, [r7, #3]
    b600:	2b00      	cmp	r3, #0
    b602:	d001      	beq.n	b608 <n25q256a_xip_confirm+0xb8>
    b604:	2202      	movs	r2, #2
    b606:	e000      	b.n	b60a <n25q256a_xip_confirm+0xba>
    b608:	2201      	movs	r2, #1
    b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b60c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b60e:	2300      	movs	r3, #0
}
    b610:	4618      	mov	r0, r3
    b612:	3730      	adds	r7, #48	; 0x30
    b614:	46bd      	mov	sp, r7
    b616:	bd80      	pop	{r7, pc}
    b618:	0000295d 	.word	0x0000295d

0000b61c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b61c:	b580      	push	{r7, lr}
    b61e:	b08c      	sub	sp, #48	; 0x30
    b620:	af00      	add	r7, sp, #0
    b622:	6078      	str	r0, [r7, #4]
    b624:	460b      	mov	r3, r1
    b626:	70fb      	strb	r3, [r7, #3]
    b628:	4613      	mov	r3, r2
    b62a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b62c:	2300      	movs	r3, #0
    b62e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b630:	687b      	ldr	r3, [r7, #4]
    b632:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b634:	687b      	ldr	r3, [r7, #4]
    b636:	681b      	ldr	r3, [r3, #0]
    b638:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b63a:	f107 030c 	add.w	r3, r7, #12
    b63e:	2200      	movs	r2, #0
    b640:	601a      	str	r2, [r3, #0]
    b642:	605a      	str	r2, [r3, #4]
    b644:	609a      	str	r2, [r3, #8]
    b646:	60da      	str	r2, [r3, #12]
    b648:	611a      	str	r2, [r3, #16]
    b64a:	615a      	str	r2, [r3, #20]
    b64c:	78fb      	ldrb	r3, [r7, #3]
    b64e:	f003 0307 	and.w	r3, r3, #7
    b652:	b2da      	uxtb	r2, r3
    b654:	7b3b      	ldrb	r3, [r7, #12]
    b656:	f362 0302 	bfi	r3, r2, #0, #3
    b65a:	733b      	strb	r3, [r7, #12]
    b65c:	7b3b      	ldrb	r3, [r7, #12]
    b65e:	f043 0310 	orr.w	r3, r3, #16
    b662:	733b      	strb	r3, [r7, #12]
    b664:	7b3b      	ldrb	r3, [r7, #12]
    b666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b66a:	733b      	strb	r3, [r7, #12]
    b66c:	78bb      	ldrb	r3, [r7, #2]
    b66e:	743b      	strb	r3, [r7, #16]
    b670:	2301      	movs	r3, #1
    b672:	61bb      	str	r3, [r7, #24]
    b674:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b678:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b67c:	7b5b      	ldrb	r3, [r3, #13]
    b67e:	2b00      	cmp	r3, #0
    b680:	d003      	beq.n	b68a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b682:	2100      	movs	r1, #0
    b684:	6878      	ldr	r0, [r7, #4]
    b686:	4b0a      	ldr	r3, [pc, #40]	; (b6b0 <n25q256a_read_reg+0x94>)
    b688:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b68a:	f107 030c 	add.w	r3, r7, #12
    b68e:	4619      	mov	r1, r3
    b690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b692:	4b08      	ldr	r3, [pc, #32]	; (b6b4 <n25q256a_read_reg+0x98>)
    b694:	4798      	blx	r3
	if (n25q->xip_mode) {
    b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b698:	7b5b      	ldrb	r3, [r3, #13]
    b69a:	2b00      	cmp	r3, #0
    b69c:	d003      	beq.n	b6a6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b69e:	2101      	movs	r1, #1
    b6a0:	6878      	ldr	r0, [r7, #4]
    b6a2:	4b03      	ldr	r3, [pc, #12]	; (b6b0 <n25q256a_read_reg+0x94>)
    b6a4:	4798      	blx	r3
	}
	return status;
    b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b6a8:	4618      	mov	r0, r3
    b6aa:	3730      	adds	r7, #48	; 0x30
    b6ac:	46bd      	mov	sp, r7
    b6ae:	bd80      	pop	{r7, pc}
    b6b0:	0000b551 	.word	0x0000b551
    b6b4:	0000295d 	.word	0x0000295d

0000b6b8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b6b8:	b580      	push	{r7, lr}
    b6ba:	b08c      	sub	sp, #48	; 0x30
    b6bc:	af00      	add	r7, sp, #0
    b6be:	60f8      	str	r0, [r7, #12]
    b6c0:	607b      	str	r3, [r7, #4]
    b6c2:	460b      	mov	r3, r1
    b6c4:	72fb      	strb	r3, [r7, #11]
    b6c6:	4613      	mov	r3, r2
    b6c8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6ca:	68fb      	ldr	r3, [r7, #12]
    b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6ce:	68fb      	ldr	r3, [r7, #12]
    b6d0:	681b      	ldr	r3, [r3, #0]
    b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b6d4:	f107 0310 	add.w	r3, r7, #16
    b6d8:	2200      	movs	r2, #0
    b6da:	601a      	str	r2, [r3, #0]
    b6dc:	605a      	str	r2, [r3, #4]
    b6de:	609a      	str	r2, [r3, #8]
    b6e0:	60da      	str	r2, [r3, #12]
    b6e2:	611a      	str	r2, [r3, #16]
    b6e4:	615a      	str	r2, [r3, #20]
    b6e6:	7afb      	ldrb	r3, [r7, #11]
    b6e8:	f003 0307 	and.w	r3, r3, #7
    b6ec:	b2da      	uxtb	r2, r3
    b6ee:	7c3b      	ldrb	r3, [r7, #16]
    b6f0:	f362 0302 	bfi	r3, r2, #0, #3
    b6f4:	743b      	strb	r3, [r7, #16]
    b6f6:	7c3b      	ldrb	r3, [r7, #16]
    b6f8:	f043 0310 	orr.w	r3, r3, #16
    b6fc:	743b      	strb	r3, [r7, #16]
    b6fe:	7c3b      	ldrb	r3, [r7, #16]
    b700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b704:	743b      	strb	r3, [r7, #16]
    b706:	7c7b      	ldrb	r3, [r7, #17]
    b708:	2202      	movs	r2, #2
    b70a:	f362 1305 	bfi	r3, r2, #4, #2
    b70e:	747b      	strb	r3, [r7, #17]
    b710:	7abb      	ldrb	r3, [r7, #10]
    b712:	753b      	strb	r3, [r7, #20]
    b714:	2301      	movs	r3, #1
    b716:	61fb      	str	r3, [r7, #28]
    b718:	1d3b      	adds	r3, r7, #4
    b71a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b71e:	7b5b      	ldrb	r3, [r3, #13]
    b720:	2b00      	cmp	r3, #0
    b722:	d003      	beq.n	b72c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b724:	2100      	movs	r1, #0
    b726:	68f8      	ldr	r0, [r7, #12]
    b728:	4b09      	ldr	r3, [pc, #36]	; (b750 <n25q256a_write_reg+0x98>)
    b72a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b72c:	f107 0310 	add.w	r3, r7, #16
    b730:	4619      	mov	r1, r3
    b732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b734:	4b07      	ldr	r3, [pc, #28]	; (b754 <n25q256a_write_reg+0x9c>)
    b736:	4798      	blx	r3
	if (n25q->xip_mode) {
    b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b73a:	7b5b      	ldrb	r3, [r3, #13]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d003      	beq.n	b748 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b740:	2101      	movs	r1, #1
    b742:	68f8      	ldr	r0, [r7, #12]
    b744:	4b02      	ldr	r3, [pc, #8]	; (b750 <n25q256a_write_reg+0x98>)
    b746:	4798      	blx	r3
	}
}
    b748:	bf00      	nop
    b74a:	3730      	adds	r7, #48	; 0x30
    b74c:	46bd      	mov	sp, r7
    b74e:	bd80      	pop	{r7, pc}
    b750:	0000b551 	.word	0x0000b551
    b754:	0000295d 	.word	0x0000295d

0000b758 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b758:	b580      	push	{r7, lr}
    b75a:	b090      	sub	sp, #64	; 0x40
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
    b760:	460b      	mov	r3, r1
    b762:	70fb      	strb	r3, [r7, #3]
    b764:	4613      	mov	r3, r2
    b766:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b768:	687b      	ldr	r3, [r7, #4]
    b76a:	681b      	ldr	r3, [r3, #0]
    b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b76e:	78bb      	ldrb	r3, [r7, #2]
    b770:	2b00      	cmp	r3, #0
    b772:	d001      	beq.n	b778 <n25q256a_write_enable+0x20>
    b774:	2306      	movs	r3, #6
    b776:	e000      	b.n	b77a <n25q256a_write_enable+0x22>
    b778:	2304      	movs	r3, #4
    b77a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b77e:	f107 0320 	add.w	r3, r7, #32
    b782:	2200      	movs	r2, #0
    b784:	601a      	str	r2, [r3, #0]
    b786:	605a      	str	r2, [r3, #4]
    b788:	609a      	str	r2, [r3, #8]
    b78a:	60da      	str	r2, [r3, #12]
    b78c:	611a      	str	r2, [r3, #16]
    b78e:	615a      	str	r2, [r3, #20]
    b790:	78fb      	ldrb	r3, [r7, #3]
    b792:	f003 0307 	and.w	r3, r3, #7
    b796:	b2da      	uxtb	r2, r3
    b798:	f897 3020 	ldrb.w	r3, [r7, #32]
    b79c:	f362 0302 	bfi	r3, r2, #0, #3
    b7a0:	f887 3020 	strb.w	r3, [r7, #32]
    b7a4:	f897 3020 	ldrb.w	r3, [r7, #32]
    b7a8:	f043 0310 	orr.w	r3, r3, #16
    b7ac:	f887 3020 	strb.w	r3, [r7, #32]
    b7b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b7b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b7b8:	f107 0308 	add.w	r3, r7, #8
    b7bc:	2200      	movs	r2, #0
    b7be:	601a      	str	r2, [r3, #0]
    b7c0:	605a      	str	r2, [r3, #4]
    b7c2:	609a      	str	r2, [r3, #8]
    b7c4:	60da      	str	r2, [r3, #12]
    b7c6:	611a      	str	r2, [r3, #16]
    b7c8:	615a      	str	r2, [r3, #20]
    b7ca:	78fb      	ldrb	r3, [r7, #3]
    b7cc:	f003 0307 	and.w	r3, r3, #7
    b7d0:	b2da      	uxtb	r2, r3
    b7d2:	7a3b      	ldrb	r3, [r7, #8]
    b7d4:	f362 0302 	bfi	r3, r2, #0, #3
    b7d8:	723b      	strb	r3, [r7, #8]
    b7da:	7a3b      	ldrb	r3, [r7, #8]
    b7dc:	f043 0310 	orr.w	r3, r3, #16
    b7e0:	723b      	strb	r3, [r7, #8]
    b7e2:	7a3b      	ldrb	r3, [r7, #8]
    b7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7e8:	723b      	strb	r3, [r7, #8]
    b7ea:	2305      	movs	r3, #5
    b7ec:	733b      	strb	r3, [r7, #12]
    b7ee:	2301      	movs	r3, #1
    b7f0:	617b      	str	r3, [r7, #20]
    b7f2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b7f6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b7f8:	f107 0320 	add.w	r3, r7, #32
    b7fc:	4619      	mov	r1, r3
    b7fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b800:	4b08      	ldr	r3, [pc, #32]	; (b824 <n25q256a_write_enable+0xcc>)
    b802:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b804:	f107 0308 	add.w	r3, r7, #8
    b808:	4619      	mov	r1, r3
    b80a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b80c:	4b05      	ldr	r3, [pc, #20]	; (b824 <n25q256a_write_enable+0xcc>)
    b80e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b810:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b814:	f003 0302 	and.w	r3, r3, #2
    b818:	2b00      	cmp	r3, #0
    b81a:	d0ed      	beq.n	b7f8 <n25q256a_write_enable+0xa0>
}
    b81c:	bf00      	nop
    b81e:	3740      	adds	r7, #64	; 0x40
    b820:	46bd      	mov	sp, r7
    b822:	bd80      	pop	{r7, pc}
    b824:	0000295d 	.word	0x0000295d

0000b828 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b828:	b590      	push	{r4, r7, lr}
    b82a:	b087      	sub	sp, #28
    b82c:	af00      	add	r7, sp, #0
    b82e:	6078      	str	r0, [r7, #4]
    b830:	460b      	mov	r3, r1
    b832:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b834:	687b      	ldr	r3, [r7, #4]
    b836:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b838:	68fb      	ldr	r3, [r7, #12]
    b83a:	7b1b      	ldrb	r3, [r3, #12]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d001      	beq.n	b844 <n25q256a_switch_mode+0x1c>
    b840:	2306      	movs	r3, #6
    b842:	e000      	b.n	b846 <n25q256a_switch_mode+0x1e>
    b844:	2300      	movs	r3, #0
    b846:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b848:	7afb      	ldrb	r3, [r7, #11]
    b84a:	2265      	movs	r2, #101	; 0x65
    b84c:	4619      	mov	r1, r3
    b84e:	6878      	ldr	r0, [r7, #4]
    b850:	4b25      	ldr	r3, [pc, #148]	; (b8e8 <n25q256a_switch_mode+0xc0>)
    b852:	4798      	blx	r3
    b854:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b856:	2300      	movs	r3, #0
    b858:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b85a:	68fb      	ldr	r3, [r7, #12]
    b85c:	7b1b      	ldrb	r3, [r3, #12]
    b85e:	78fa      	ldrb	r2, [r7, #3]
    b860:	429a      	cmp	r2, r3
    b862:	d03d      	beq.n	b8e0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b864:	78fb      	ldrb	r3, [r7, #3]
    b866:	2b00      	cmp	r3, #0
    b868:	d00b      	beq.n	b882 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b86a:	697b      	ldr	r3, [r7, #20]
    b86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b870:	2b00      	cmp	r3, #0
    b872:	d011      	beq.n	b898 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b874:	697b      	ldr	r3, [r7, #20]
    b876:	f003 031f 	and.w	r3, r3, #31
    b87a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b87c:	2301      	movs	r3, #1
    b87e:	74fb      	strb	r3, [r7, #19]
    b880:	e00a      	b.n	b898 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b882:	697b      	ldr	r3, [r7, #20]
    b884:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b888:	2b00      	cmp	r3, #0
    b88a:	d105      	bne.n	b898 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b88c:	697b      	ldr	r3, [r7, #20]
    b88e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b892:	617b      	str	r3, [r7, #20]
			modify = 1;
    b894:	2301      	movs	r3, #1
    b896:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b898:	7cfb      	ldrb	r3, [r7, #19]
    b89a:	2b00      	cmp	r3, #0
    b89c:	d021      	beq.n	b8e2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	78fa      	ldrb	r2, [r7, #3]
    b8a2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b8a4:	7afb      	ldrb	r3, [r7, #11]
    b8a6:	2201      	movs	r2, #1
    b8a8:	4619      	mov	r1, r3
    b8aa:	6878      	ldr	r0, [r7, #4]
    b8ac:	4b0f      	ldr	r3, [pc, #60]	; (b8ec <n25q256a_switch_mode+0xc4>)
    b8ae:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b8b0:	7af9      	ldrb	r1, [r7, #11]
    b8b2:	697b      	ldr	r3, [r7, #20]
    b8b4:	2261      	movs	r2, #97	; 0x61
    b8b6:	6878      	ldr	r0, [r7, #4]
    b8b8:	4c0d      	ldr	r4, [pc, #52]	; (b8f0 <n25q256a_switch_mode+0xc8>)
    b8ba:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b8bc:	78fb      	ldrb	r3, [r7, #3]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d001      	beq.n	b8c6 <n25q256a_switch_mode+0x9e>
    b8c2:	2306      	movs	r3, #6
    b8c4:	e000      	b.n	b8c8 <n25q256a_switch_mode+0xa0>
    b8c6:	2300      	movs	r3, #0
    b8c8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b8ca:	7afb      	ldrb	r3, [r7, #11]
    b8cc:	2265      	movs	r2, #101	; 0x65
    b8ce:	4619      	mov	r1, r3
    b8d0:	6878      	ldr	r0, [r7, #4]
    b8d2:	4b05      	ldr	r3, [pc, #20]	; (b8e8 <n25q256a_switch_mode+0xc0>)
    b8d4:	4798      	blx	r3
    b8d6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b8d8:	68fb      	ldr	r3, [r7, #12]
    b8da:	78fa      	ldrb	r2, [r7, #3]
    b8dc:	731a      	strb	r2, [r3, #12]
    b8de:	e000      	b.n	b8e2 <n25q256a_switch_mode+0xba>
		return;
    b8e0:	bf00      	nop
	}
}
    b8e2:	371c      	adds	r7, #28
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd90      	pop	{r4, r7, pc}
    b8e8:	0000b61d 	.word	0x0000b61d
    b8ec:	0000b759 	.word	0x0000b759
    b8f0:	0000b6b9 	.word	0x0000b6b9

0000b8f4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b8f4:	b580      	push	{r7, lr}
    b8f6:	b086      	sub	sp, #24
    b8f8:	af00      	add	r7, sp, #0
    b8fa:	60f8      	str	r0, [r7, #12]
    b8fc:	60b9      	str	r1, [r7, #8]
    b8fe:	607a      	str	r2, [r7, #4]
    b900:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b902:	68fb      	ldr	r3, [r7, #12]
    b904:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b906:	4a0c      	ldr	r2, [pc, #48]	; (b938 <n25q256a_construct+0x44>)
    b908:	68b9      	ldr	r1, [r7, #8]
    b90a:	68f8      	ldr	r0, [r7, #12]
    b90c:	4b0b      	ldr	r3, [pc, #44]	; (b93c <n25q256a_construct+0x48>)
    b90e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b910:	697b      	ldr	r3, [r7, #20]
    b912:	2200      	movs	r2, #0
    b914:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b916:	697b      	ldr	r3, [r7, #20]
    b918:	2200      	movs	r2, #0
    b91a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b91c:	697b      	ldr	r3, [r7, #20]
    b91e:	687a      	ldr	r2, [r7, #4]
    b920:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b922:	78fb      	ldrb	r3, [r7, #3]
    b924:	4619      	mov	r1, r3
    b926:	68f8      	ldr	r0, [r7, #12]
    b928:	4b05      	ldr	r3, [pc, #20]	; (b940 <n25q256a_construct+0x4c>)
    b92a:	4798      	blx	r3
	return me;
    b92c:	68fb      	ldr	r3, [r7, #12]
}
    b92e:	4618      	mov	r0, r3
    b930:	3718      	adds	r7, #24
    b932:	46bd      	mov	sp, r7
    b934:	bd80      	pop	{r7, pc}
    b936:	bf00      	nop
    b938:	0000f3bc 	.word	0x0000f3bc
    b93c:	0000bdd1 	.word	0x0000bdd1
    b940:	0000b829 	.word	0x0000b829

0000b944 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b944:	b580      	push	{r7, lr}
    b946:	b08c      	sub	sp, #48	; 0x30
    b948:	af00      	add	r7, sp, #0
    b94a:	60f8      	str	r0, [r7, #12]
    b94c:	60b9      	str	r1, [r7, #8]
    b94e:	607a      	str	r2, [r7, #4]
    b950:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b952:	68fb      	ldr	r3, [r7, #12]
    b954:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b956:	68fb      	ldr	r3, [r7, #12]
    b958:	681b      	ldr	r3, [r3, #0]
    b95a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b95c:	f107 0310 	add.w	r3, r7, #16
    b960:	2200      	movs	r2, #0
    b962:	601a      	str	r2, [r3, #0]
    b964:	605a      	str	r2, [r3, #4]
    b966:	609a      	str	r2, [r3, #8]
    b968:	60da      	str	r2, [r3, #12]
    b96a:	611a      	str	r2, [r3, #16]
    b96c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b970:	7b1b      	ldrb	r3, [r3, #12]
    b972:	2b00      	cmp	r3, #0
    b974:	d001      	beq.n	b97a <n25q256a_read+0x36>
    b976:	2206      	movs	r2, #6
    b978:	e000      	b.n	b97c <n25q256a_read+0x38>
    b97a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b97c:	7c3b      	ldrb	r3, [r7, #16]
    b97e:	f362 0302 	bfi	r3, r2, #0, #3
    b982:	743b      	strb	r3, [r7, #16]
    b984:	7c3b      	ldrb	r3, [r7, #16]
    b986:	f043 0310 	orr.w	r3, r3, #16
    b98a:	743b      	strb	r3, [r7, #16]
    b98c:	7c3b      	ldrb	r3, [r7, #16]
    b98e:	f043 0320 	orr.w	r3, r3, #32
    b992:	743b      	strb	r3, [r7, #16]
    b994:	7c3b      	ldrb	r3, [r7, #16]
    b996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b99a:	743b      	strb	r3, [r7, #16]
    b99c:	7c7b      	ldrb	r3, [r7, #17]
    b99e:	2201      	movs	r2, #1
    b9a0:	f362 1305 	bfi	r3, r2, #4, #2
    b9a4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9a8:	7b1b      	ldrb	r3, [r3, #12]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d001      	beq.n	b9b2 <n25q256a_read+0x6e>
    b9ae:	220a      	movs	r2, #10
    b9b0:	e000      	b.n	b9b4 <n25q256a_read+0x70>
    b9b2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b9b4:	7cbb      	ldrb	r3, [r7, #18]
    b9b6:	f362 0304 	bfi	r3, r2, #0, #5
    b9ba:	74bb      	strb	r3, [r7, #18]
    b9bc:	230b      	movs	r3, #11
    b9be:	753b      	strb	r3, [r7, #20]
    b9c0:	687b      	ldr	r3, [r7, #4]
    b9c2:	61bb      	str	r3, [r7, #24]
    b9c4:	683b      	ldr	r3, [r7, #0]
    b9c6:	61fb      	str	r3, [r7, #28]
    b9c8:	68bb      	ldr	r3, [r7, #8]
    b9ca:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b9cc:	f107 0310 	add.w	r3, r7, #16
    b9d0:	4619      	mov	r1, r3
    b9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9d4:	4b03      	ldr	r3, [pc, #12]	; (b9e4 <n25q256a_read+0xa0>)
    b9d6:	4798      	blx	r3
	return ERR_NONE;
    b9d8:	2300      	movs	r3, #0
}
    b9da:	4618      	mov	r0, r3
    b9dc:	3730      	adds	r7, #48	; 0x30
    b9de:	46bd      	mov	sp, r7
    b9e0:	bd80      	pop	{r7, pc}
    b9e2:	bf00      	nop
    b9e4:	0000295d 	.word	0x0000295d

0000b9e8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b9e8:	b580      	push	{r7, lr}
    b9ea:	b08c      	sub	sp, #48	; 0x30
    b9ec:	af00      	add	r7, sp, #0
    b9ee:	60f8      	str	r0, [r7, #12]
    b9f0:	60b9      	str	r1, [r7, #8]
    b9f2:	607a      	str	r2, [r7, #4]
    b9f4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9f6:	68fb      	ldr	r3, [r7, #12]
    b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9fa:	68fb      	ldr	r3, [r7, #12]
    b9fc:	681b      	ldr	r3, [r3, #0]
    b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ba00:	f107 0310 	add.w	r3, r7, #16
    ba04:	2200      	movs	r2, #0
    ba06:	601a      	str	r2, [r3, #0]
    ba08:	605a      	str	r2, [r3, #4]
    ba0a:	609a      	str	r2, [r3, #8]
    ba0c:	60da      	str	r2, [r3, #12]
    ba0e:	611a      	str	r2, [r3, #16]
    ba10:	615a      	str	r2, [r3, #20]
    ba12:	7c3b      	ldrb	r3, [r7, #16]
    ba14:	f043 0310 	orr.w	r3, r3, #16
    ba18:	743b      	strb	r3, [r7, #16]
    ba1a:	7c3b      	ldrb	r3, [r7, #16]
    ba1c:	f043 0320 	orr.w	r3, r3, #32
    ba20:	743b      	strb	r3, [r7, #16]
    ba22:	7c3b      	ldrb	r3, [r7, #16]
    ba24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba28:	743b      	strb	r3, [r7, #16]
    ba2a:	7c7b      	ldrb	r3, [r7, #17]
    ba2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ba30:	747b      	strb	r3, [r7, #17]
    ba32:	2302      	movs	r3, #2
    ba34:	753b      	strb	r3, [r7, #20]
    ba36:	687b      	ldr	r3, [r7, #4]
    ba38:	61bb      	str	r3, [r7, #24]
    ba3a:	683b      	ldr	r3, [r7, #0]
    ba3c:	61fb      	str	r3, [r7, #28]
    ba3e:	68bb      	ldr	r3, [r7, #8]
    ba40:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba44:	7b1b      	ldrb	r3, [r3, #12]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d001      	beq.n	ba4e <n25q256a_write+0x66>
    ba4a:	2206      	movs	r2, #6
    ba4c:	e000      	b.n	ba50 <n25q256a_write+0x68>
    ba4e:	2200      	movs	r2, #0
    ba50:	7c3b      	ldrb	r3, [r7, #16]
    ba52:	f362 0302 	bfi	r3, r2, #0, #3
    ba56:	743b      	strb	r3, [r7, #16]
	while (length) {
    ba58:	e035      	b.n	bac6 <n25q256a_write+0xde>
		cmd.address = address;
    ba5a:	687b      	ldr	r3, [r7, #4]
    ba5c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ba5e:	683b      	ldr	r3, [r7, #0]
    ba60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ba64:	d802      	bhi.n	ba6c <n25q256a_write+0x84>
			cmd.buf_len = length;
    ba66:	683b      	ldr	r3, [r7, #0]
    ba68:	61fb      	str	r3, [r7, #28]
    ba6a:	e002      	b.n	ba72 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ba6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ba70:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba72:	7c3b      	ldrb	r3, [r7, #16]
    ba74:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba78:	b2db      	uxtb	r3, r3
    ba7a:	2201      	movs	r2, #1
    ba7c:	4619      	mov	r1, r3
    ba7e:	68f8      	ldr	r0, [r7, #12]
    ba80:	4b19      	ldr	r3, [pc, #100]	; (bae8 <n25q256a_write+0x100>)
    ba82:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba84:	f107 0310 	add.w	r3, r7, #16
    ba88:	4619      	mov	r1, r3
    ba8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba8c:	4b17      	ldr	r3, [pc, #92]	; (baec <n25q256a_write+0x104>)
    ba8e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba90:	bf00      	nop
    ba92:	7c3b      	ldrb	r3, [r7, #16]
    ba94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba98:	b2db      	uxtb	r3, r3
    ba9a:	2270      	movs	r2, #112	; 0x70
    ba9c:	4619      	mov	r1, r3
    ba9e:	68f8      	ldr	r0, [r7, #12]
    baa0:	4b13      	ldr	r3, [pc, #76]	; (baf0 <n25q256a_write+0x108>)
    baa2:	4798      	blx	r3
    baa4:	4603      	mov	r3, r0
    baa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    baaa:	2b00      	cmp	r3, #0
    baac:	d0f1      	beq.n	ba92 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    baae:	6a3a      	ldr	r2, [r7, #32]
    bab0:	69fb      	ldr	r3, [r7, #28]
    bab2:	4413      	add	r3, r2
    bab4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bab6:	69fb      	ldr	r3, [r7, #28]
    bab8:	683a      	ldr	r2, [r7, #0]
    baba:	1ad3      	subs	r3, r2, r3
    babc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    babe:	69fb      	ldr	r3, [r7, #28]
    bac0:	687a      	ldr	r2, [r7, #4]
    bac2:	4413      	add	r3, r2
    bac4:	607b      	str	r3, [r7, #4]
	while (length) {
    bac6:	683b      	ldr	r3, [r7, #0]
    bac8:	2b00      	cmp	r3, #0
    baca:	d1c6      	bne.n	ba5a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bace:	7b5b      	ldrb	r3, [r3, #13]
    bad0:	2b00      	cmp	r3, #0
    bad2:	d003      	beq.n	badc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bad4:	2101      	movs	r1, #1
    bad6:	68f8      	ldr	r0, [r7, #12]
    bad8:	4b06      	ldr	r3, [pc, #24]	; (baf4 <n25q256a_write+0x10c>)
    bada:	4798      	blx	r3
	}
	return ERR_NONE;
    badc:	2300      	movs	r3, #0
}
    bade:	4618      	mov	r0, r3
    bae0:	3730      	adds	r7, #48	; 0x30
    bae2:	46bd      	mov	sp, r7
    bae4:	bd80      	pop	{r7, pc}
    bae6:	bf00      	nop
    bae8:	0000b759 	.word	0x0000b759
    baec:	0000295d 	.word	0x0000295d
    baf0:	0000b61d 	.word	0x0000b61d
    baf4:	0000b551 	.word	0x0000b551

0000baf8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    baf8:	b580      	push	{r7, lr}
    bafa:	b090      	sub	sp, #64	; 0x40
    bafc:	af00      	add	r7, sp, #0
    bafe:	60f8      	str	r0, [r7, #12]
    bb00:	60b9      	str	r1, [r7, #8]
    bb02:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bb04:	68fb      	ldr	r3, [r7, #12]
    bb06:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb08:	68fb      	ldr	r3, [r7, #12]
    bb0a:	681b      	ldr	r3, [r3, #0]
    bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bb0e:	f107 0314 	add.w	r3, r7, #20
    bb12:	2200      	movs	r2, #0
    bb14:	601a      	str	r2, [r3, #0]
    bb16:	605a      	str	r2, [r3, #4]
    bb18:	609a      	str	r2, [r3, #8]
    bb1a:	60da      	str	r2, [r3, #12]
    bb1c:	611a      	str	r2, [r3, #16]
    bb1e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb22:	7b1b      	ldrb	r3, [r3, #12]
    bb24:	2b00      	cmp	r3, #0
    bb26:	d001      	beq.n	bb2c <n25q256a_erase+0x34>
    bb28:	2206      	movs	r2, #6
    bb2a:	e000      	b.n	bb2e <n25q256a_erase+0x36>
    bb2c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bb2e:	7d3b      	ldrb	r3, [r7, #20]
    bb30:	f362 0302 	bfi	r3, r2, #0, #3
    bb34:	753b      	strb	r3, [r7, #20]
    bb36:	7d3b      	ldrb	r3, [r7, #20]
    bb38:	f043 0310 	orr.w	r3, r3, #16
    bb3c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bb3e:	687b      	ldr	r3, [r7, #4]
    bb40:	4a56      	ldr	r2, [pc, #344]	; (bc9c <n25q256a_erase+0x1a4>)
    bb42:	4293      	cmp	r3, r2
    bb44:	bf94      	ite	ls
    bb46:	2301      	movls	r3, #1
    bb48:	2300      	movhi	r3, #0
    bb4a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bb4c:	7d3b      	ldrb	r3, [r7, #20]
    bb4e:	f362 1345 	bfi	r3, r2, #5, #1
    bb52:	753b      	strb	r3, [r7, #20]
    bb54:	7d7b      	ldrb	r3, [r7, #21]
    bb56:	2202      	movs	r2, #2
    bb58:	f362 1305 	bfi	r3, r2, #4, #2
    bb5c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bb5e:	68bb      	ldr	r3, [r7, #8]
    bb60:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bb62:	687b      	ldr	r3, [r7, #4]
    bb64:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bb66:	2300      	movs	r3, #0
    bb68:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bb6a:	687b      	ldr	r3, [r7, #4]
    bb6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb70:	2b00      	cmp	r3, #0
    bb72:	d104      	bne.n	bb7e <n25q256a_erase+0x86>
    bb74:	68bb      	ldr	r3, [r7, #8]
    bb76:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d002      	beq.n	bb84 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bb7e:	f06f 030c 	mvn.w	r3, #12
    bb82:	e087      	b.n	bc94 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bb84:	687b      	ldr	r3, [r7, #4]
    bb86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bb8a:	d368      	bcc.n	bc5e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bb8c:	23c7      	movs	r3, #199	; 0xc7
    bb8e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb90:	7d3b      	ldrb	r3, [r7, #20]
    bb92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb96:	b2db      	uxtb	r3, r3
    bb98:	2201      	movs	r2, #1
    bb9a:	4619      	mov	r1, r3
    bb9c:	68f8      	ldr	r0, [r7, #12]
    bb9e:	4b40      	ldr	r3, [pc, #256]	; (bca0 <n25q256a_erase+0x1a8>)
    bba0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bba2:	f107 0314 	add.w	r3, r7, #20
    bba6:	4619      	mov	r1, r3
    bba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbaa:	4b3e      	ldr	r3, [pc, #248]	; (bca4 <n25q256a_erase+0x1ac>)
    bbac:	4798      	blx	r3
    bbae:	e059      	b.n	bc64 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbb2:	b29b      	uxth	r3, r3
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	d11f      	bne.n	bbf8 <n25q256a_erase+0x100>
    bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bbbe:	d31b      	bcc.n	bbf8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbc2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bbc4:	23d8      	movs	r3, #216	; 0xd8
    bbc6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bbc8:	7d3b      	ldrb	r3, [r7, #20]
    bbca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbce:	b2db      	uxtb	r3, r3
    bbd0:	2201      	movs	r2, #1
    bbd2:	4619      	mov	r1, r3
    bbd4:	68f8      	ldr	r0, [r7, #12]
    bbd6:	4b32      	ldr	r3, [pc, #200]	; (bca0 <n25q256a_erase+0x1a8>)
    bbd8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bbda:	f107 0314 	add.w	r3, r7, #20
    bbde:	4619      	mov	r1, r3
    bbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbe2:	4b30      	ldr	r3, [pc, #192]	; (bca4 <n25q256a_erase+0x1ac>)
    bbe4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbe8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bbec:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbf0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bbf4:	63bb      	str	r3, [r7, #56]	; 0x38
    bbf6:	e023      	b.n	bc40 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bbfe:	d31b      	bcc.n	bc38 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc02:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bc04:	2320      	movs	r3, #32
    bc06:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bc08:	7d3b      	ldrb	r3, [r7, #20]
    bc0a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc0e:	b2db      	uxtb	r3, r3
    bc10:	2201      	movs	r2, #1
    bc12:	4619      	mov	r1, r3
    bc14:	68f8      	ldr	r0, [r7, #12]
    bc16:	4b22      	ldr	r3, [pc, #136]	; (bca0 <n25q256a_erase+0x1a8>)
    bc18:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bc1a:	f107 0314 	add.w	r3, r7, #20
    bc1e:	4619      	mov	r1, r3
    bc20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bc22:	4b20      	ldr	r3, [pc, #128]	; (bca4 <n25q256a_erase+0x1ac>)
    bc24:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc30:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bc34:	63bb      	str	r3, [r7, #56]	; 0x38
    bc36:	e003      	b.n	bc40 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bc38:	f06f 030c 	mvn.w	r3, #12
    bc3c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bc3e:	e011      	b.n	bc64 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc40:	bf00      	nop
    bc42:	7d3b      	ldrb	r3, [r7, #20]
    bc44:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc48:	b2db      	uxtb	r3, r3
    bc4a:	2270      	movs	r2, #112	; 0x70
    bc4c:	4619      	mov	r1, r3
    bc4e:	68f8      	ldr	r0, [r7, #12]
    bc50:	4b15      	ldr	r3, [pc, #84]	; (bca8 <n25q256a_erase+0x1b0>)
    bc52:	4798      	blx	r3
    bc54:	4603      	mov	r3, r0
    bc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	d0f1      	beq.n	bc42 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc60:	2b00      	cmp	r3, #0
    bc62:	d1a5      	bne.n	bbb0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc64:	bf00      	nop
    bc66:	7d3b      	ldrb	r3, [r7, #20]
    bc68:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc6c:	b2db      	uxtb	r3, r3
    bc6e:	2270      	movs	r2, #112	; 0x70
    bc70:	4619      	mov	r1, r3
    bc72:	68f8      	ldr	r0, [r7, #12]
    bc74:	4b0c      	ldr	r3, [pc, #48]	; (bca8 <n25q256a_erase+0x1b0>)
    bc76:	4798      	blx	r3
    bc78:	4603      	mov	r3, r0
    bc7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d0f1      	beq.n	bc66 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc84:	7b5b      	ldrb	r3, [r3, #13]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d003      	beq.n	bc92 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bc8a:	2101      	movs	r1, #1
    bc8c:	68f8      	ldr	r0, [r7, #12]
    bc8e:	4b07      	ldr	r3, [pc, #28]	; (bcac <n25q256a_erase+0x1b4>)
    bc90:	4798      	blx	r3
	}
	return rc;
    bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bc94:	4618      	mov	r0, r3
    bc96:	3740      	adds	r7, #64	; 0x40
    bc98:	46bd      	mov	sp, r7
    bc9a:	bd80      	pop	{r7, pc}
    bc9c:	001fffff 	.word	0x001fffff
    bca0:	0000b759 	.word	0x0000b759
    bca4:	0000295d 	.word	0x0000295d
    bca8:	0000b61d 	.word	0x0000b61d
    bcac:	0000b551 	.word	0x0000b551

0000bcb0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bcb0:	b590      	push	{r4, r7, lr}
    bcb2:	b085      	sub	sp, #20
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bcb8:	687b      	ldr	r3, [r7, #4]
    bcba:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bcbc:	68fb      	ldr	r3, [r7, #12]
    bcbe:	7b1b      	ldrb	r3, [r3, #12]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d001      	beq.n	bcc8 <n25q256a_enable_xip+0x18>
    bcc4:	2306      	movs	r3, #6
    bcc6:	e000      	b.n	bcca <n25q256a_enable_xip+0x1a>
    bcc8:	2300      	movs	r3, #0
    bcca:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bccc:	68fb      	ldr	r3, [r7, #12]
    bcce:	7b5b      	ldrb	r3, [r3, #13]
    bcd0:	2b00      	cmp	r3, #0
    bcd2:	d129      	bne.n	bd28 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bcd4:	7afb      	ldrb	r3, [r7, #11]
    bcd6:	2285      	movs	r2, #133	; 0x85
    bcd8:	4619      	mov	r1, r3
    bcda:	6878      	ldr	r0, [r7, #4]
    bcdc:	4b15      	ldr	r3, [pc, #84]	; (bd34 <n25q256a_enable_xip+0x84>)
    bcde:	4798      	blx	r3
    bce0:	4603      	mov	r3, r0
    bce2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bce4:	7abb      	ldrb	r3, [r7, #10]
    bce6:	f003 0308 	and.w	r3, r3, #8
    bcea:	2b00      	cmp	r3, #0
    bcec:	d015      	beq.n	bd1a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bcee:	7abb      	ldrb	r3, [r7, #10]
    bcf0:	f023 0308 	bic.w	r3, r3, #8
    bcf4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bcf6:	7abb      	ldrb	r3, [r7, #10]
    bcf8:	7af9      	ldrb	r1, [r7, #11]
    bcfa:	2281      	movs	r2, #129	; 0x81
    bcfc:	6878      	ldr	r0, [r7, #4]
    bcfe:	4c0e      	ldr	r4, [pc, #56]	; (bd38 <n25q256a_enable_xip+0x88>)
    bd00:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bd02:	bf00      	nop
    bd04:	7afb      	ldrb	r3, [r7, #11]
    bd06:	2270      	movs	r2, #112	; 0x70
    bd08:	4619      	mov	r1, r3
    bd0a:	6878      	ldr	r0, [r7, #4]
    bd0c:	4b09      	ldr	r3, [pc, #36]	; (bd34 <n25q256a_enable_xip+0x84>)
    bd0e:	4798      	blx	r3
    bd10:	4603      	mov	r3, r0
    bd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd16:	2b00      	cmp	r3, #0
    bd18:	d0f4      	beq.n	bd04 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	2201      	movs	r2, #1
    bd1e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bd20:	2101      	movs	r1, #1
    bd22:	6878      	ldr	r0, [r7, #4]
    bd24:	4b05      	ldr	r3, [pc, #20]	; (bd3c <n25q256a_enable_xip+0x8c>)
    bd26:	4798      	blx	r3
	}
	return ERR_NONE;
    bd28:	2300      	movs	r3, #0
}
    bd2a:	4618      	mov	r0, r3
    bd2c:	3714      	adds	r7, #20
    bd2e:	46bd      	mov	sp, r7
    bd30:	bd90      	pop	{r4, r7, pc}
    bd32:	bf00      	nop
    bd34:	0000b61d 	.word	0x0000b61d
    bd38:	0000b6b9 	.word	0x0000b6b9
    bd3c:	0000b551 	.word	0x0000b551

0000bd40 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bd40:	b580      	push	{r7, lr}
    bd42:	b086      	sub	sp, #24
    bd44:	af00      	add	r7, sp, #0
    bd46:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd48:	687b      	ldr	r3, [r7, #4]
    bd4a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd4c:	687b      	ldr	r3, [r7, #4]
    bd4e:	681b      	ldr	r3, [r3, #0]
    bd50:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd52:	697b      	ldr	r3, [r7, #20]
    bd54:	7b1b      	ldrb	r3, [r3, #12]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d001      	beq.n	bd5e <n25q256a_disable_xip+0x1e>
    bd5a:	2306      	movs	r3, #6
    bd5c:	e000      	b.n	bd60 <n25q256a_disable_xip+0x20>
    bd5e:	2300      	movs	r3, #0
    bd60:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bd62:	2100      	movs	r1, #0
    bd64:	6878      	ldr	r0, [r7, #4]
    bd66:	4b15      	ldr	r3, [pc, #84]	; (bdbc <n25q256a_disable_xip+0x7c>)
    bd68:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bd6a:	7bfb      	ldrb	r3, [r7, #15]
    bd6c:	2285      	movs	r2, #133	; 0x85
    bd6e:	4619      	mov	r1, r3
    bd70:	6878      	ldr	r0, [r7, #4]
    bd72:	4b13      	ldr	r3, [pc, #76]	; (bdc0 <n25q256a_disable_xip+0x80>)
    bd74:	4798      	blx	r3
    bd76:	4603      	mov	r3, r0
    bd78:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bd7a:	7bbb      	ldrb	r3, [r7, #14]
    bd7c:	f003 0308 	and.w	r3, r3, #8
    bd80:	2b00      	cmp	r3, #0
    bd82:	d113      	bne.n	bdac <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bd84:	697b      	ldr	r3, [r7, #20]
    bd86:	689b      	ldr	r3, [r3, #8]
    bd88:	2b00      	cmp	r3, #0
    bd8a:	d00f      	beq.n	bdac <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bd8c:	693b      	ldr	r3, [r7, #16]
    bd8e:	681b      	ldr	r3, [r3, #0]
    bd90:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bd92:	6938      	ldr	r0, [r7, #16]
    bd94:	4b0b      	ldr	r3, [pc, #44]	; (bdc4 <n25q256a_disable_xip+0x84>)
    bd96:	4798      	blx	r3
			n25q->pin_exit_xip();
    bd98:	697b      	ldr	r3, [r7, #20]
    bd9a:	689b      	ldr	r3, [r3, #8]
    bd9c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bd9e:	68b9      	ldr	r1, [r7, #8]
    bda0:	6938      	ldr	r0, [r7, #16]
    bda2:	4b09      	ldr	r3, [pc, #36]	; (bdc8 <n25q256a_disable_xip+0x88>)
    bda4:	4798      	blx	r3
			qspi_sync_enable(descr);
    bda6:	6938      	ldr	r0, [r7, #16]
    bda8:	4b08      	ldr	r3, [pc, #32]	; (bdcc <n25q256a_disable_xip+0x8c>)
    bdaa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bdac:	697b      	ldr	r3, [r7, #20]
    bdae:	2200      	movs	r2, #0
    bdb0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bdb2:	2300      	movs	r3, #0
}
    bdb4:	4618      	mov	r0, r3
    bdb6:	3718      	adds	r7, #24
    bdb8:	46bd      	mov	sp, r7
    bdba:	bd80      	pop	{r7, pc}
    bdbc:	0000b551 	.word	0x0000b551
    bdc0:	0000b61d 	.word	0x0000b61d
    bdc4:	00002921 	.word	0x00002921
    bdc8:	00002899 	.word	0x00002899
    bdcc:	000028e5 	.word	0x000028e5

0000bdd0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bdd0:	b480      	push	{r7}
    bdd2:	b085      	sub	sp, #20
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	60f8      	str	r0, [r7, #12]
    bdd8:	60b9      	str	r1, [r7, #8]
    bdda:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bddc:	68fb      	ldr	r3, [r7, #12]
    bdde:	68ba      	ldr	r2, [r7, #8]
    bde0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bde2:	68fb      	ldr	r3, [r7, #12]
    bde4:	687a      	ldr	r2, [r7, #4]
    bde6:	605a      	str	r2, [r3, #4]

	return me;
    bde8:	68fb      	ldr	r3, [r7, #12]
}
    bdea:	4618      	mov	r0, r3
    bdec:	3714      	adds	r7, #20
    bdee:	46bd      	mov	sp, r7
    bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdf4:	4770      	bx	lr

0000bdf6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bdf6:	b480      	push	{r7}
    bdf8:	b083      	sub	sp, #12
    bdfa:	af00      	add	r7, sp, #0
    bdfc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bdfe:	687b      	ldr	r3, [r7, #4]
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	b29a      	uxth	r2, r3
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	3301      	adds	r3, #1
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	b29b      	uxth	r3, r3
    be0c:	021b      	lsls	r3, r3, #8
    be0e:	b29b      	uxth	r3, r3
    be10:	4413      	add	r3, r2
    be12:	b29b      	uxth	r3, r3
}
    be14:	4618      	mov	r0, r3
    be16:	370c      	adds	r7, #12
    be18:	46bd      	mov	sp, r7
    be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be1e:	4770      	bx	lr

0000be20 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    be20:	b480      	push	{r7}
    be22:	b083      	sub	sp, #12
    be24:	af00      	add	r7, sp, #0
    be26:	6078      	str	r0, [r7, #4]
	return desc[0];
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	781b      	ldrb	r3, [r3, #0]
}
    be2c:	4618      	mov	r0, r3
    be2e:	370c      	adds	r7, #12
    be30:	46bd      	mov	sp, r7
    be32:	f85d 7b04 	ldr.w	r7, [sp], #4
    be36:	4770      	bx	lr

0000be38 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    be38:	b580      	push	{r7, lr}
    be3a:	b082      	sub	sp, #8
    be3c:	af00      	add	r7, sp, #0
    be3e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    be40:	6878      	ldr	r0, [r7, #4]
    be42:	4b05      	ldr	r3, [pc, #20]	; (be58 <usb_desc_next+0x20>)
    be44:	4798      	blx	r3
    be46:	4603      	mov	r3, r0
    be48:	461a      	mov	r2, r3
    be4a:	687b      	ldr	r3, [r7, #4]
    be4c:	4413      	add	r3, r2
}
    be4e:	4618      	mov	r0, r3
    be50:	3708      	adds	r7, #8
    be52:	46bd      	mov	sp, r7
    be54:	bd80      	pop	{r7, pc}
    be56:	bf00      	nop
    be58:	0000be21 	.word	0x0000be21

0000be5c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be5c:	b580      	push	{r7, lr}
    be5e:	b08c      	sub	sp, #48	; 0x30
    be60:	af00      	add	r7, sp, #0
    be62:	6078      	str	r0, [r7, #4]
    be64:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    be66:	687b      	ldr	r3, [r7, #4]
    be68:	689b      	ldr	r3, [r3, #8]
    be6a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    be6c:	683b      	ldr	r3, [r7, #0]
    be6e:	681b      	ldr	r3, [r3, #0]
    be70:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    be72:	2300      	movs	r3, #0
    be74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be78:	e08f      	b.n	bf9a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be7c:	2b00      	cmp	r3, #0
    be7e:	d102      	bne.n	be86 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    be80:	f06f 0309 	mvn.w	r3, #9
    be84:	e092      	b.n	bfac <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be88:	789b      	ldrb	r3, [r3, #2]
    be8a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be8e:	795b      	ldrb	r3, [r3, #5]
    be90:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    be92:	7c7b      	ldrb	r3, [r7, #17]
    be94:	2b02      	cmp	r3, #2
    be96:	d002      	beq.n	be9e <cdcdf_acm_enable+0x42>
    be98:	7c7b      	ldrb	r3, [r7, #17]
    be9a:	2b0a      	cmp	r3, #10
    be9c:	d121      	bne.n	bee2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bea2:	6a3a      	ldr	r2, [r7, #32]
    bea4:	5cd2      	ldrb	r2, [r2, r3]
    bea6:	7bbb      	ldrb	r3, [r7, #14]
    bea8:	429a      	cmp	r2, r3
    beaa:	d102      	bne.n	beb2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    beac:	f06f 0311 	mvn.w	r3, #17
    beb0:	e07c      	b.n	bfac <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    beb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beb6:	6a3a      	ldr	r2, [r7, #32]
    beb8:	5cd3      	ldrb	r3, [r2, r3]
    beba:	2bff      	cmp	r3, #255	; 0xff
    bebc:	d002      	beq.n	bec4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bebe:	f06f 031b 	mvn.w	r3, #27
    bec2:	e073      	b.n	bfac <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bec8:	7bb9      	ldrb	r1, [r7, #14]
    beca:	6a3a      	ldr	r2, [r7, #32]
    becc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bece:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bed0:	683b      	ldr	r3, [r7, #0]
    bed2:	685b      	ldr	r3, [r3, #4]
    bed4:	2205      	movs	r2, #5
    bed6:	4619      	mov	r1, r3
    bed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    beda:	4b36      	ldr	r3, [pc, #216]	; (bfb4 <cdcdf_acm_enable+0x158>)
    bedc:	4798      	blx	r3
    bede:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bee0:	e047      	b.n	bf72 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bee2:	f06f 0309 	mvn.w	r3, #9
    bee6:	e061      	b.n	bfac <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    beea:	789b      	ldrb	r3, [r3, #2]
    beec:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bef0:	78db      	ldrb	r3, [r3, #3]
    bef2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bef6:	3304      	adds	r3, #4
    bef8:	4618      	mov	r0, r3
    befa:	4b2f      	ldr	r3, [pc, #188]	; (bfb8 <cdcdf_acm_enable+0x15c>)
    befc:	4798      	blx	r3
    befe:	4603      	mov	r3, r0
    bf00:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bf02:	7ebb      	ldrb	r3, [r7, #26]
    bf04:	7ef9      	ldrb	r1, [r7, #27]
    bf06:	8bba      	ldrh	r2, [r7, #28]
    bf08:	4618      	mov	r0, r3
    bf0a:	4b2c      	ldr	r3, [pc, #176]	; (bfbc <cdcdf_acm_enable+0x160>)
    bf0c:	4798      	blx	r3
    bf0e:	4603      	mov	r3, r0
    bf10:	2b00      	cmp	r3, #0
    bf12:	d002      	beq.n	bf1a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bf14:	f06f 0313 	mvn.w	r3, #19
    bf18:	e048      	b.n	bfac <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bf1a:	7ebb      	ldrb	r3, [r7, #26]
    bf1c:	b25b      	sxtb	r3, r3
    bf1e:	2b00      	cmp	r3, #0
    bf20:	da0f      	bge.n	bf42 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bf22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf26:	7eb9      	ldrb	r1, [r7, #26]
    bf28:	6a3a      	ldr	r2, [r7, #32]
    bf2a:	4413      	add	r3, r2
    bf2c:	460a      	mov	r2, r1
    bf2e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf34:	6a3a      	ldr	r2, [r7, #32]
    bf36:	4413      	add	r3, r2
    bf38:	789b      	ldrb	r3, [r3, #2]
    bf3a:	4618      	mov	r0, r3
    bf3c:	4b20      	ldr	r3, [pc, #128]	; (bfc0 <cdcdf_acm_enable+0x164>)
    bf3e:	4798      	blx	r3
    bf40:	e007      	b.n	bf52 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bf42:	7eba      	ldrb	r2, [r7, #26]
    bf44:	6a3b      	ldr	r3, [r7, #32]
    bf46:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bf48:	6a3b      	ldr	r3, [r7, #32]
    bf4a:	791b      	ldrb	r3, [r3, #4]
    bf4c:	4618      	mov	r0, r3
    bf4e:	4b1c      	ldr	r3, [pc, #112]	; (bfc0 <cdcdf_acm_enable+0x164>)
    bf50:	4798      	blx	r3
			}
			desc->sod = ep;
    bf52:	683b      	ldr	r3, [r7, #0]
    bf54:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bf56:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bf58:	683b      	ldr	r3, [r7, #0]
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	4618      	mov	r0, r3
    bf5e:	4b19      	ldr	r3, [pc, #100]	; (bfc4 <cdcdf_acm_enable+0x168>)
    bf60:	4798      	blx	r3
    bf62:	4602      	mov	r2, r0
    bf64:	683b      	ldr	r3, [r7, #0]
    bf66:	685b      	ldr	r3, [r3, #4]
    bf68:	4619      	mov	r1, r3
    bf6a:	4610      	mov	r0, r2
    bf6c:	4b16      	ldr	r3, [pc, #88]	; (bfc8 <cdcdf_acm_enable+0x16c>)
    bf6e:	4798      	blx	r3
    bf70:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf74:	2b00      	cmp	r3, #0
    bf76:	d1b7      	bne.n	bee8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf78:	683b      	ldr	r3, [r7, #0]
    bf7a:	681b      	ldr	r3, [r3, #0]
    bf7c:	4618      	mov	r0, r3
    bf7e:	4b11      	ldr	r3, [pc, #68]	; (bfc4 <cdcdf_acm_enable+0x168>)
    bf80:	4798      	blx	r3
    bf82:	683b      	ldr	r3, [r7, #0]
    bf84:	685b      	ldr	r3, [r3, #4]
    bf86:	2204      	movs	r2, #4
    bf88:	4619      	mov	r1, r3
    bf8a:	4b0a      	ldr	r3, [pc, #40]	; (bfb4 <cdcdf_acm_enable+0x158>)
    bf8c:	4798      	blx	r3
    bf8e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bf90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf94:	3301      	adds	r3, #1
    bf96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bf9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf9e:	2b01      	cmp	r3, #1
    bfa0:	f67f af6b 	bls.w	be7a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bfa4:	4b09      	ldr	r3, [pc, #36]	; (bfcc <cdcdf_acm_enable+0x170>)
    bfa6:	2201      	movs	r2, #1
    bfa8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bfaa:	2300      	movs	r3, #0
}
    bfac:	4618      	mov	r0, r3
    bfae:	3730      	adds	r7, #48	; 0x30
    bfb0:	46bd      	mov	sp, r7
    bfb2:	bd80      	pop	{r7, pc}
    bfb4:	0000d21d 	.word	0x0000d21d
    bfb8:	0000bdf7 	.word	0x0000bdf7
    bfbc:	00003511 	.word	0x00003511
    bfc0:	000035fd 	.word	0x000035fd
    bfc4:	0000be39 	.word	0x0000be39
    bfc8:	0000d279 	.word	0x0000d279
    bfcc:	20000dc8 	.word	0x20000dc8

0000bfd0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bfd0:	b580      	push	{r7, lr}
    bfd2:	b088      	sub	sp, #32
    bfd4:	af00      	add	r7, sp, #0
    bfd6:	6078      	str	r0, [r7, #4]
    bfd8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bfda:	687b      	ldr	r3, [r7, #4]
    bfdc:	689b      	ldr	r3, [r3, #8]
    bfde:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bfe0:	683b      	ldr	r3, [r7, #0]
    bfe2:	2b00      	cmp	r3, #0
    bfe4:	d00c      	beq.n	c000 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bfe6:	683b      	ldr	r3, [r7, #0]
    bfe8:	681b      	ldr	r3, [r3, #0]
    bfea:	795b      	ldrb	r3, [r3, #5]
    bfec:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bfee:	7c7b      	ldrb	r3, [r7, #17]
    bff0:	2b02      	cmp	r3, #2
    bff2:	d005      	beq.n	c000 <cdcdf_acm_disable+0x30>
    bff4:	7c7b      	ldrb	r3, [r7, #17]
    bff6:	2b0a      	cmp	r3, #10
    bff8:	d002      	beq.n	c000 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bffa:	f06f 0309 	mvn.w	r3, #9
    bffe:	e035      	b.n	c06c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c000:	2300      	movs	r3, #0
    c002:	77fb      	strb	r3, [r7, #31]
    c004:	e01f      	b.n	c046 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c006:	7ffb      	ldrb	r3, [r7, #31]
    c008:	69ba      	ldr	r2, [r7, #24]
    c00a:	5cd3      	ldrb	r3, [r2, r3]
    c00c:	2bff      	cmp	r3, #255	; 0xff
    c00e:	d016      	beq.n	c03e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c010:	7ffb      	ldrb	r3, [r7, #31]
    c012:	69ba      	ldr	r2, [r7, #24]
    c014:	21ff      	movs	r1, #255	; 0xff
    c016:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c018:	7ffb      	ldrb	r3, [r7, #31]
    c01a:	69ba      	ldr	r2, [r7, #24]
    c01c:	4413      	add	r3, r2
    c01e:	789b      	ldrb	r3, [r3, #2]
    c020:	2bff      	cmp	r3, #255	; 0xff
    c022:	d00d      	beq.n	c040 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c024:	7ffb      	ldrb	r3, [r7, #31]
    c026:	69ba      	ldr	r2, [r7, #24]
    c028:	4413      	add	r3, r2
    c02a:	789b      	ldrb	r3, [r3, #2]
    c02c:	4618      	mov	r0, r3
    c02e:	4b11      	ldr	r3, [pc, #68]	; (c074 <cdcdf_acm_disable+0xa4>)
    c030:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c032:	7ffb      	ldrb	r3, [r7, #31]
    c034:	69ba      	ldr	r2, [r7, #24]
    c036:	4413      	add	r3, r2
    c038:	22ff      	movs	r2, #255	; 0xff
    c03a:	709a      	strb	r2, [r3, #2]
    c03c:	e000      	b.n	c040 <cdcdf_acm_disable+0x70>
			continue;
    c03e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c040:	7ffb      	ldrb	r3, [r7, #31]
    c042:	3301      	adds	r3, #1
    c044:	77fb      	strb	r3, [r7, #31]
    c046:	7ffb      	ldrb	r3, [r7, #31]
    c048:	2b01      	cmp	r3, #1
    c04a:	d9dc      	bls.n	c006 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c04c:	69bb      	ldr	r3, [r7, #24]
    c04e:	791b      	ldrb	r3, [r3, #4]
    c050:	2bff      	cmp	r3, #255	; 0xff
    c052:	d007      	beq.n	c064 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c054:	69bb      	ldr	r3, [r7, #24]
    c056:	791b      	ldrb	r3, [r3, #4]
    c058:	4618      	mov	r0, r3
    c05a:	4b06      	ldr	r3, [pc, #24]	; (c074 <cdcdf_acm_disable+0xa4>)
    c05c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c05e:	69bb      	ldr	r3, [r7, #24]
    c060:	22ff      	movs	r2, #255	; 0xff
    c062:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c064:	4b04      	ldr	r3, [pc, #16]	; (c078 <cdcdf_acm_disable+0xa8>)
    c066:	2200      	movs	r2, #0
    c068:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c06a:	2300      	movs	r3, #0
}
    c06c:	4618      	mov	r0, r3
    c06e:	3720      	adds	r7, #32
    c070:	46bd      	mov	sp, r7
    c072:	bd80      	pop	{r7, pc}
    c074:	000035ad 	.word	0x000035ad
    c078:	20000dc8 	.word	0x20000dc8

0000c07c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c07c:	b580      	push	{r7, lr}
    c07e:	b084      	sub	sp, #16
    c080:	af00      	add	r7, sp, #0
    c082:	60f8      	str	r0, [r7, #12]
    c084:	460b      	mov	r3, r1
    c086:	607a      	str	r2, [r7, #4]
    c088:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c08a:	7afb      	ldrb	r3, [r7, #11]
    c08c:	2b01      	cmp	r3, #1
    c08e:	d009      	beq.n	c0a4 <cdcdf_acm_ctrl+0x28>
    c090:	2b02      	cmp	r3, #2
    c092:	d00d      	beq.n	c0b0 <cdcdf_acm_ctrl+0x34>
    c094:	2b00      	cmp	r3, #0
    c096:	d10e      	bne.n	c0b6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c098:	6879      	ldr	r1, [r7, #4]
    c09a:	68f8      	ldr	r0, [r7, #12]
    c09c:	4b09      	ldr	r3, [pc, #36]	; (c0c4 <cdcdf_acm_ctrl+0x48>)
    c09e:	4798      	blx	r3
    c0a0:	4603      	mov	r3, r0
    c0a2:	e00a      	b.n	c0ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c0a4:	6879      	ldr	r1, [r7, #4]
    c0a6:	68f8      	ldr	r0, [r7, #12]
    c0a8:	4b07      	ldr	r3, [pc, #28]	; (c0c8 <cdcdf_acm_ctrl+0x4c>)
    c0aa:	4798      	blx	r3
    c0ac:	4603      	mov	r3, r0
    c0ae:	e004      	b.n	c0ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c0b0:	f06f 031a 	mvn.w	r3, #26
    c0b4:	e001      	b.n	c0ba <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c0b6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c0ba:	4618      	mov	r0, r3
    c0bc:	3710      	adds	r7, #16
    c0be:	46bd      	mov	sp, r7
    c0c0:	bd80      	pop	{r7, pc}
    c0c2:	bf00      	nop
    c0c4:	0000be5d 	.word	0x0000be5d
    c0c8:	0000bfd1 	.word	0x0000bfd1

0000c0cc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c0cc:	b590      	push	{r4, r7, lr}
    c0ce:	b087      	sub	sp, #28
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	4603      	mov	r3, r0
    c0d4:	6039      	str	r1, [r7, #0]
    c0d6:	71fb      	strb	r3, [r7, #7]
    c0d8:	4613      	mov	r3, r2
    c0da:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c0dc:	683b      	ldr	r3, [r7, #0]
    c0de:	799a      	ldrb	r2, [r3, #6]
    c0e0:	79db      	ldrb	r3, [r3, #7]
    c0e2:	021b      	lsls	r3, r3, #8
    c0e4:	4313      	orrs	r3, r2
    c0e6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c0e8:	4b2b      	ldr	r3, [pc, #172]	; (c198 <cdcdf_acm_set_req+0xcc>)
    c0ea:	4798      	blx	r3
    c0ec:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c0ee:	683b      	ldr	r3, [r7, #0]
    c0f0:	785b      	ldrb	r3, [r3, #1]
    c0f2:	2b20      	cmp	r3, #32
    c0f4:	d002      	beq.n	c0fc <cdcdf_acm_set_req+0x30>
    c0f6:	2b22      	cmp	r3, #34	; 0x22
    c0f8:	d034      	beq.n	c164 <cdcdf_acm_set_req+0x98>
    c0fa:	e046      	b.n	c18a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c0fc:	8afb      	ldrh	r3, [r7, #22]
    c0fe:	2b07      	cmp	r3, #7
    c100:	d002      	beq.n	c108 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c102:	f04f 33ff 	mov.w	r3, #4294967295
    c106:	e042      	b.n	c18e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c108:	79bb      	ldrb	r3, [r7, #6]
    c10a:	2b00      	cmp	r3, #0
    c10c:	d107      	bne.n	c11e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c10e:	8afa      	ldrh	r2, [r7, #22]
    c110:	79f8      	ldrb	r0, [r7, #7]
    c112:	2300      	movs	r3, #0
    c114:	6939      	ldr	r1, [r7, #16]
    c116:	4c21      	ldr	r4, [pc, #132]	; (c19c <cdcdf_acm_set_req+0xd0>)
    c118:	47a0      	blx	r4
    c11a:	4603      	mov	r3, r0
    c11c:	e037      	b.n	c18e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c11e:	693a      	ldr	r2, [r7, #16]
    c120:	f107 0308 	add.w	r3, r7, #8
    c124:	6810      	ldr	r0, [r2, #0]
    c126:	6018      	str	r0, [r3, #0]
    c128:	8891      	ldrh	r1, [r2, #4]
    c12a:	7992      	ldrb	r2, [r2, #6]
    c12c:	8099      	strh	r1, [r3, #4]
    c12e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c130:	4b1b      	ldr	r3, [pc, #108]	; (c1a0 <cdcdf_acm_set_req+0xd4>)
    c132:	681b      	ldr	r3, [r3, #0]
    c134:	2b00      	cmp	r3, #0
    c136:	d008      	beq.n	c14a <cdcdf_acm_set_req+0x7e>
    c138:	4b19      	ldr	r3, [pc, #100]	; (c1a0 <cdcdf_acm_set_req+0xd4>)
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	f107 0208 	add.w	r2, r7, #8
    c140:	4610      	mov	r0, r2
    c142:	4798      	blx	r3
    c144:	4603      	mov	r3, r0
    c146:	2b00      	cmp	r3, #0
    c148:	d00a      	beq.n	c160 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c14a:	4b16      	ldr	r3, [pc, #88]	; (c1a4 <cdcdf_acm_set_req+0xd8>)
    c14c:	f107 0208 	add.w	r2, r7, #8
    c150:	e892 0003 	ldmia.w	r2, {r0, r1}
    c154:	6018      	str	r0, [r3, #0]
    c156:	3304      	adds	r3, #4
    c158:	8019      	strh	r1, [r3, #0]
    c15a:	3302      	adds	r3, #2
    c15c:	0c0a      	lsrs	r2, r1, #16
    c15e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c160:	2300      	movs	r3, #0
    c162:	e014      	b.n	c18e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c164:	2300      	movs	r3, #0
    c166:	2200      	movs	r2, #0
    c168:	2100      	movs	r1, #0
    c16a:	2000      	movs	r0, #0
    c16c:	4c0b      	ldr	r4, [pc, #44]	; (c19c <cdcdf_acm_set_req+0xd0>)
    c16e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c170:	4b0d      	ldr	r3, [pc, #52]	; (c1a8 <cdcdf_acm_set_req+0xdc>)
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	2b00      	cmp	r3, #0
    c176:	d006      	beq.n	c186 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c178:	4b0b      	ldr	r3, [pc, #44]	; (c1a8 <cdcdf_acm_set_req+0xdc>)
    c17a:	681b      	ldr	r3, [r3, #0]
    c17c:	683a      	ldr	r2, [r7, #0]
    c17e:	8852      	ldrh	r2, [r2, #2]
    c180:	b292      	uxth	r2, r2
    c182:	4610      	mov	r0, r2
    c184:	4798      	blx	r3
		}
		return ERR_NONE;
    c186:	2300      	movs	r3, #0
    c188:	e001      	b.n	c18e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c18a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c18e:	4618      	mov	r0, r3
    c190:	371c      	adds	r7, #28
    c192:	46bd      	mov	sp, r7
    c194:	bd90      	pop	{r4, r7, pc}
    c196:	bf00      	nop
    c198:	0000d119 	.word	0x0000d119
    c19c:	0000cf8d 	.word	0x0000cf8d
    c1a0:	20000ddc 	.word	0x20000ddc
    c1a4:	20000dd0 	.word	0x20000dd0
    c1a8:	20000dd8 	.word	0x20000dd8

0000c1ac <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c1ac:	b590      	push	{r4, r7, lr}
    c1ae:	b085      	sub	sp, #20
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	4603      	mov	r3, r0
    c1b4:	6039      	str	r1, [r7, #0]
    c1b6:	71fb      	strb	r3, [r7, #7]
    c1b8:	4613      	mov	r3, r2
    c1ba:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c1bc:	683b      	ldr	r3, [r7, #0]
    c1be:	799a      	ldrb	r2, [r3, #6]
    c1c0:	79db      	ldrb	r3, [r3, #7]
    c1c2:	021b      	lsls	r3, r3, #8
    c1c4:	4313      	orrs	r3, r2
    c1c6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c1c8:	79bb      	ldrb	r3, [r7, #6]
    c1ca:	2b01      	cmp	r3, #1
    c1cc:	d101      	bne.n	c1d2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c1ce:	2300      	movs	r3, #0
    c1d0:	e013      	b.n	c1fa <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c1d2:	683b      	ldr	r3, [r7, #0]
    c1d4:	785b      	ldrb	r3, [r3, #1]
    c1d6:	2b21      	cmp	r3, #33	; 0x21
    c1d8:	d10d      	bne.n	c1f6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c1da:	89fb      	ldrh	r3, [r7, #14]
    c1dc:	2b07      	cmp	r3, #7
    c1de:	d002      	beq.n	c1e6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c1e0:	f04f 33ff 	mov.w	r3, #4294967295
    c1e4:	e009      	b.n	c1fa <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c1e6:	89fa      	ldrh	r2, [r7, #14]
    c1e8:	79f8      	ldrb	r0, [r7, #7]
    c1ea:	2300      	movs	r3, #0
    c1ec:	4905      	ldr	r1, [pc, #20]	; (c204 <cdcdf_acm_get_req+0x58>)
    c1ee:	4c06      	ldr	r4, [pc, #24]	; (c208 <cdcdf_acm_get_req+0x5c>)
    c1f0:	47a0      	blx	r4
    c1f2:	4603      	mov	r3, r0
    c1f4:	e001      	b.n	c1fa <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c1f6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c1fa:	4618      	mov	r0, r3
    c1fc:	3714      	adds	r7, #20
    c1fe:	46bd      	mov	sp, r7
    c200:	bd90      	pop	{r4, r7, pc}
    c202:	bf00      	nop
    c204:	20000dd0 	.word	0x20000dd0
    c208:	0000cf8d 	.word	0x0000cf8d

0000c20c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c20c:	b580      	push	{r7, lr}
    c20e:	b082      	sub	sp, #8
    c210:	af00      	add	r7, sp, #0
    c212:	4603      	mov	r3, r0
    c214:	6039      	str	r1, [r7, #0]
    c216:	71fb      	strb	r3, [r7, #7]
    c218:	4613      	mov	r3, r2
    c21a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c21c:	683b      	ldr	r3, [r7, #0]
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	095b      	lsrs	r3, r3, #5
    c222:	b2db      	uxtb	r3, r3
    c224:	f003 0303 	and.w	r3, r3, #3
    c228:	2b01      	cmp	r3, #1
    c22a:	d002      	beq.n	c232 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c22c:	f06f 0309 	mvn.w	r3, #9
    c230:	e026      	b.n	c280 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c232:	683b      	ldr	r3, [r7, #0]
    c234:	889b      	ldrh	r3, [r3, #4]
    c236:	b29a      	uxth	r2, r3
    c238:	4b13      	ldr	r3, [pc, #76]	; (c288 <cdcdf_acm_req+0x7c>)
    c23a:	781b      	ldrb	r3, [r3, #0]
    c23c:	b29b      	uxth	r3, r3
    c23e:	429a      	cmp	r2, r3
    c240:	d007      	beq.n	c252 <cdcdf_acm_req+0x46>
    c242:	683b      	ldr	r3, [r7, #0]
    c244:	889b      	ldrh	r3, [r3, #4]
    c246:	b29a      	uxth	r2, r3
    c248:	4b0f      	ldr	r3, [pc, #60]	; (c288 <cdcdf_acm_req+0x7c>)
    c24a:	785b      	ldrb	r3, [r3, #1]
    c24c:	b29b      	uxth	r3, r3
    c24e:	429a      	cmp	r2, r3
    c250:	d114      	bne.n	c27c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c252:	683b      	ldr	r3, [r7, #0]
    c254:	781b      	ldrb	r3, [r3, #0]
    c256:	b25b      	sxtb	r3, r3
    c258:	2b00      	cmp	r3, #0
    c25a:	da07      	bge.n	c26c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c25c:	79ba      	ldrb	r2, [r7, #6]
    c25e:	79fb      	ldrb	r3, [r7, #7]
    c260:	6839      	ldr	r1, [r7, #0]
    c262:	4618      	mov	r0, r3
    c264:	4b09      	ldr	r3, [pc, #36]	; (c28c <cdcdf_acm_req+0x80>)
    c266:	4798      	blx	r3
    c268:	4603      	mov	r3, r0
    c26a:	e009      	b.n	c280 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c26c:	79ba      	ldrb	r2, [r7, #6]
    c26e:	79fb      	ldrb	r3, [r7, #7]
    c270:	6839      	ldr	r1, [r7, #0]
    c272:	4618      	mov	r0, r3
    c274:	4b06      	ldr	r3, [pc, #24]	; (c290 <cdcdf_acm_req+0x84>)
    c276:	4798      	blx	r3
    c278:	4603      	mov	r3, r0
    c27a:	e001      	b.n	c280 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c27c:	f06f 0309 	mvn.w	r3, #9
	}
}
    c280:	4618      	mov	r0, r3
    c282:	3708      	adds	r7, #8
    c284:	46bd      	mov	sp, r7
    c286:	bd80      	pop	{r7, pc}
    c288:	20000dc8 	.word	0x20000dc8
    c28c:	0000c1ad 	.word	0x0000c1ad
    c290:	0000c0cd 	.word	0x0000c0cd

0000c294 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c294:	b580      	push	{r7, lr}
    c296:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c298:	4b0b      	ldr	r3, [pc, #44]	; (c2c8 <cdcdf_acm_init+0x34>)
    c29a:	4798      	blx	r3
    c29c:	4603      	mov	r3, r0
    c29e:	2b01      	cmp	r3, #1
    c2a0:	d902      	bls.n	c2a8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c2a2:	f06f 0310 	mvn.w	r3, #16
    c2a6:	e00d      	b.n	c2c4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c2a8:	4b08      	ldr	r3, [pc, #32]	; (c2cc <cdcdf_acm_init+0x38>)
    c2aa:	4a09      	ldr	r2, [pc, #36]	; (c2d0 <cdcdf_acm_init+0x3c>)
    c2ac:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c2ae:	4b07      	ldr	r3, [pc, #28]	; (c2cc <cdcdf_acm_init+0x38>)
    c2b0:	4a08      	ldr	r2, [pc, #32]	; (c2d4 <cdcdf_acm_init+0x40>)
    c2b2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c2b4:	4805      	ldr	r0, [pc, #20]	; (c2cc <cdcdf_acm_init+0x38>)
    c2b6:	4b08      	ldr	r3, [pc, #32]	; (c2d8 <cdcdf_acm_init+0x44>)
    c2b8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c2ba:	4908      	ldr	r1, [pc, #32]	; (c2dc <cdcdf_acm_init+0x48>)
    c2bc:	2001      	movs	r0, #1
    c2be:	4b08      	ldr	r3, [pc, #32]	; (c2e0 <cdcdf_acm_init+0x4c>)
    c2c0:	4798      	blx	r3
	return ERR_NONE;
    c2c2:	2300      	movs	r3, #0
}
    c2c4:	4618      	mov	r0, r3
    c2c6:	bd80      	pop	{r7, pc}
    c2c8:	0000d131 	.word	0x0000d131
    c2cc:	20000dbc 	.word	0x20000dbc
    c2d0:	0000c07d 	.word	0x0000c07d
    c2d4:	20000dc8 	.word	0x20000dc8
    c2d8:	0000d099 	.word	0x0000d099
    c2dc:	20000208 	.word	0x20000208
    c2e0:	0000cfc9 	.word	0x0000cfc9

0000c2e4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c2e4:	b590      	push	{r4, r7, lr}
    c2e6:	b083      	sub	sp, #12
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	6078      	str	r0, [r7, #4]
    c2ec:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c2ee:	4b0b      	ldr	r3, [pc, #44]	; (c31c <cdcdf_acm_read+0x38>)
    c2f0:	4798      	blx	r3
    c2f2:	4603      	mov	r3, r0
    c2f4:	f083 0301 	eor.w	r3, r3, #1
    c2f8:	b2db      	uxtb	r3, r3
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	d002      	beq.n	c304 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c2fe:	f06f 0310 	mvn.w	r3, #16
    c302:	e007      	b.n	c314 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c304:	4b06      	ldr	r3, [pc, #24]	; (c320 <cdcdf_acm_read+0x3c>)
    c306:	7918      	ldrb	r0, [r3, #4]
    c308:	2300      	movs	r3, #0
    c30a:	683a      	ldr	r2, [r7, #0]
    c30c:	6879      	ldr	r1, [r7, #4]
    c30e:	4c05      	ldr	r4, [pc, #20]	; (c324 <cdcdf_acm_read+0x40>)
    c310:	47a0      	blx	r4
    c312:	4603      	mov	r3, r0
}
    c314:	4618      	mov	r0, r3
    c316:	370c      	adds	r7, #12
    c318:	46bd      	mov	sp, r7
    c31a:	bd90      	pop	{r4, r7, pc}
    c31c:	0000c409 	.word	0x0000c409
    c320:	20000dc8 	.word	0x20000dc8
    c324:	0000cf8d 	.word	0x0000cf8d

0000c328 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c328:	b590      	push	{r4, r7, lr}
    c32a:	b083      	sub	sp, #12
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
    c330:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c332:	4b0b      	ldr	r3, [pc, #44]	; (c360 <cdcdf_acm_write+0x38>)
    c334:	4798      	blx	r3
    c336:	4603      	mov	r3, r0
    c338:	f083 0301 	eor.w	r3, r3, #1
    c33c:	b2db      	uxtb	r3, r3
    c33e:	2b00      	cmp	r3, #0
    c340:	d002      	beq.n	c348 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c342:	f06f 0310 	mvn.w	r3, #16
    c346:	e007      	b.n	c358 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c348:	4b06      	ldr	r3, [pc, #24]	; (c364 <cdcdf_acm_write+0x3c>)
    c34a:	78d8      	ldrb	r0, [r3, #3]
    c34c:	2301      	movs	r3, #1
    c34e:	683a      	ldr	r2, [r7, #0]
    c350:	6879      	ldr	r1, [r7, #4]
    c352:	4c05      	ldr	r4, [pc, #20]	; (c368 <cdcdf_acm_write+0x40>)
    c354:	47a0      	blx	r4
    c356:	4603      	mov	r3, r0
}
    c358:	4618      	mov	r0, r3
    c35a:	370c      	adds	r7, #12
    c35c:	46bd      	mov	sp, r7
    c35e:	bd90      	pop	{r4, r7, pc}
    c360:	0000c409 	.word	0x0000c409
    c364:	20000dc8 	.word	0x20000dc8
    c368:	0000cf8d 	.word	0x0000cf8d

0000c36c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c36c:	b580      	push	{r7, lr}
    c36e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c370:	4b05      	ldr	r3, [pc, #20]	; (c388 <cdcdf_acm_stop_xfer+0x1c>)
    c372:	78db      	ldrb	r3, [r3, #3]
    c374:	4618      	mov	r0, r3
    c376:	4b05      	ldr	r3, [pc, #20]	; (c38c <cdcdf_acm_stop_xfer+0x20>)
    c378:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c37a:	4b03      	ldr	r3, [pc, #12]	; (c388 <cdcdf_acm_stop_xfer+0x1c>)
    c37c:	791b      	ldrb	r3, [r3, #4]
    c37e:	4618      	mov	r0, r3
    c380:	4b02      	ldr	r3, [pc, #8]	; (c38c <cdcdf_acm_stop_xfer+0x20>)
    c382:	4798      	blx	r3
}
    c384:	bf00      	nop
    c386:	bd80      	pop	{r7, pc}
    c388:	20000dc8 	.word	0x20000dc8
    c38c:	000037d5 	.word	0x000037d5

0000c390 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c390:	b580      	push	{r7, lr}
    c392:	b082      	sub	sp, #8
    c394:	af00      	add	r7, sp, #0
    c396:	4603      	mov	r3, r0
    c398:	6039      	str	r1, [r7, #0]
    c39a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c39c:	79fb      	ldrb	r3, [r7, #7]
    c39e:	2b03      	cmp	r3, #3
    c3a0:	d822      	bhi.n	c3e8 <cdcdf_acm_register_callback+0x58>
    c3a2:	a201      	add	r2, pc, #4	; (adr r2, c3a8 <cdcdf_acm_register_callback+0x18>)
    c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c3a8:	0000c3b9 	.word	0x0000c3b9
    c3ac:	0000c3c9 	.word	0x0000c3c9
    c3b0:	0000c3d9 	.word	0x0000c3d9
    c3b4:	0000c3e1 	.word	0x0000c3e1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c3b8:	4b0f      	ldr	r3, [pc, #60]	; (c3f8 <cdcdf_acm_register_callback+0x68>)
    c3ba:	791b      	ldrb	r3, [r3, #4]
    c3bc:	683a      	ldr	r2, [r7, #0]
    c3be:	2102      	movs	r1, #2
    c3c0:	4618      	mov	r0, r3
    c3c2:	4b0e      	ldr	r3, [pc, #56]	; (c3fc <cdcdf_acm_register_callback+0x6c>)
    c3c4:	4798      	blx	r3
		break;
    c3c6:	e012      	b.n	c3ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c3c8:	4b0b      	ldr	r3, [pc, #44]	; (c3f8 <cdcdf_acm_register_callback+0x68>)
    c3ca:	78db      	ldrb	r3, [r3, #3]
    c3cc:	683a      	ldr	r2, [r7, #0]
    c3ce:	2102      	movs	r1, #2
    c3d0:	4618      	mov	r0, r3
    c3d2:	4b0a      	ldr	r3, [pc, #40]	; (c3fc <cdcdf_acm_register_callback+0x6c>)
    c3d4:	4798      	blx	r3
		break;
    c3d6:	e00a      	b.n	c3ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c3d8:	4a09      	ldr	r2, [pc, #36]	; (c400 <cdcdf_acm_register_callback+0x70>)
    c3da:	683b      	ldr	r3, [r7, #0]
    c3dc:	6013      	str	r3, [r2, #0]
		break;
    c3de:	e006      	b.n	c3ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c3e0:	4a08      	ldr	r2, [pc, #32]	; (c404 <cdcdf_acm_register_callback+0x74>)
    c3e2:	683b      	ldr	r3, [r7, #0]
    c3e4:	6013      	str	r3, [r2, #0]
		break;
    c3e6:	e002      	b.n	c3ee <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c3e8:	f06f 030c 	mvn.w	r3, #12
    c3ec:	e000      	b.n	c3f0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c3ee:	2300      	movs	r3, #0
}
    c3f0:	4618      	mov	r0, r3
    c3f2:	3708      	adds	r7, #8
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	20000dc8 	.word	0x20000dc8
    c3fc:	00003901 	.word	0x00003901
    c400:	20000ddc 	.word	0x20000ddc
    c404:	20000dd8 	.word	0x20000dd8

0000c408 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c408:	b480      	push	{r7}
    c40a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c40c:	4b03      	ldr	r3, [pc, #12]	; (c41c <cdcdf_acm_is_enabled+0x14>)
    c40e:	795b      	ldrb	r3, [r3, #5]
}
    c410:	4618      	mov	r0, r3
    c412:	46bd      	mov	sp, r7
    c414:	f85d 7b04 	ldr.w	r7, [sp], #4
    c418:	4770      	bx	lr
    c41a:	bf00      	nop
    c41c:	20000dc8 	.word	0x20000dc8

0000c420 <usb_get_u16>:
{
    c420:	b480      	push	{r7}
    c422:	b083      	sub	sp, #12
    c424:	af00      	add	r7, sp, #0
    c426:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c428:	687b      	ldr	r3, [r7, #4]
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	b29a      	uxth	r2, r3
    c42e:	687b      	ldr	r3, [r7, #4]
    c430:	3301      	adds	r3, #1
    c432:	781b      	ldrb	r3, [r3, #0]
    c434:	b29b      	uxth	r3, r3
    c436:	021b      	lsls	r3, r3, #8
    c438:	b29b      	uxth	r3, r3
    c43a:	4413      	add	r3, r2
    c43c:	b29b      	uxth	r3, r3
}
    c43e:	4618      	mov	r0, r3
    c440:	370c      	adds	r7, #12
    c442:	46bd      	mov	sp, r7
    c444:	f85d 7b04 	ldr.w	r7, [sp], #4
    c448:	4770      	bx	lr

0000c44a <usb_desc_len>:
{
    c44a:	b480      	push	{r7}
    c44c:	b083      	sub	sp, #12
    c44e:	af00      	add	r7, sp, #0
    c450:	6078      	str	r0, [r7, #4]
	return desc[0];
    c452:	687b      	ldr	r3, [r7, #4]
    c454:	781b      	ldrb	r3, [r3, #0]
}
    c456:	4618      	mov	r0, r3
    c458:	370c      	adds	r7, #12
    c45a:	46bd      	mov	sp, r7
    c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c460:	4770      	bx	lr
	...

0000c464 <usb_desc_next>:
{
    c464:	b580      	push	{r7, lr}
    c466:	b082      	sub	sp, #8
    c468:	af00      	add	r7, sp, #0
    c46a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c46c:	6878      	ldr	r0, [r7, #4]
    c46e:	4b05      	ldr	r3, [pc, #20]	; (c484 <usb_desc_next+0x20>)
    c470:	4798      	blx	r3
    c472:	4603      	mov	r3, r0
    c474:	461a      	mov	r2, r3
    c476:	687b      	ldr	r3, [r7, #4]
    c478:	4413      	add	r3, r2
}
    c47a:	4618      	mov	r0, r3
    c47c:	3708      	adds	r7, #8
    c47e:	46bd      	mov	sp, r7
    c480:	bd80      	pop	{r7, pc}
    c482:	bf00      	nop
    c484:	0000c44b 	.word	0x0000c44b

0000c488 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c488:	b580      	push	{r7, lr}
    c48a:	b082      	sub	sp, #8
    c48c:	af00      	add	r7, sp, #0
    c48e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c490:	687b      	ldr	r3, [r7, #4]
    c492:	3302      	adds	r3, #2
    c494:	4618      	mov	r0, r3
    c496:	4b03      	ldr	r3, [pc, #12]	; (c4a4 <usb_cfg_desc_total_len+0x1c>)
    c498:	4798      	blx	r3
    c49a:	4603      	mov	r3, r0
}
    c49c:	4618      	mov	r0, r3
    c49e:	3708      	adds	r7, #8
    c4a0:	46bd      	mov	sp, r7
    c4a2:	bd80      	pop	{r7, pc}
    c4a4:	0000c421 	.word	0x0000c421

0000c4a8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c4a8:	b590      	push	{r4, r7, lr}
    c4aa:	b085      	sub	sp, #20
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	4603      	mov	r3, r0
    c4b0:	6039      	str	r1, [r7, #0]
    c4b2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c4b4:	2300      	movs	r3, #0
    c4b6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c4b8:	683b      	ldr	r3, [r7, #0]
    c4ba:	799a      	ldrb	r2, [r3, #6]
    c4bc:	79db      	ldrb	r3, [r3, #7]
    c4be:	021b      	lsls	r3, r3, #8
    c4c0:	4313      	orrs	r3, r2
    c4c2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c4c4:	897b      	ldrh	r3, [r7, #10]
    c4c6:	2b12      	cmp	r3, #18
    c4c8:	d901      	bls.n	c4ce <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c4ca:	2312      	movs	r3, #18
    c4cc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c4ce:	68fb      	ldr	r3, [r7, #12]
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	d10a      	bne.n	c4ea <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c4d4:	4b0f      	ldr	r3, [pc, #60]	; (c514 <usbdc_get_dev_desc+0x6c>)
    c4d6:	681b      	ldr	r3, [r3, #0]
    c4d8:	6818      	ldr	r0, [r3, #0]
    c4da:	4b0e      	ldr	r3, [pc, #56]	; (c514 <usbdc_get_dev_desc+0x6c>)
    c4dc:	681b      	ldr	r3, [r3, #0]
    c4de:	685b      	ldr	r3, [r3, #4]
    c4e0:	2201      	movs	r2, #1
    c4e2:	4619      	mov	r1, r3
    c4e4:	4b0c      	ldr	r3, [pc, #48]	; (c518 <usbdc_get_dev_desc+0x70>)
    c4e6:	4798      	blx	r3
    c4e8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c4ea:	68fb      	ldr	r3, [r7, #12]
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	d101      	bne.n	c4f4 <usbdc_get_dev_desc+0x4c>
		return false;
    c4f0:	2300      	movs	r3, #0
    c4f2:	e00b      	b.n	c50c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c4f4:	897a      	ldrh	r2, [r7, #10]
    c4f6:	79f8      	ldrb	r0, [r7, #7]
    c4f8:	2300      	movs	r3, #0
    c4fa:	68f9      	ldr	r1, [r7, #12]
    c4fc:	4c07      	ldr	r4, [pc, #28]	; (c51c <usbdc_get_dev_desc+0x74>)
    c4fe:	47a0      	blx	r4
    c500:	4603      	mov	r3, r0
    c502:	2b00      	cmp	r3, #0
    c504:	d001      	beq.n	c50a <usbdc_get_dev_desc+0x62>
		return false;
    c506:	2300      	movs	r3, #0
    c508:	e000      	b.n	c50c <usbdc_get_dev_desc+0x64>
	}
	return true;
    c50a:	2301      	movs	r3, #1
}
    c50c:	4618      	mov	r0, r3
    c50e:	3714      	adds	r7, #20
    c510:	46bd      	mov	sp, r7
    c512:	bd90      	pop	{r4, r7, pc}
    c514:	20000de0 	.word	0x20000de0
    c518:	0000d21d 	.word	0x0000d21d
    c51c:	0000cf8d 	.word	0x0000cf8d

0000c520 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c520:	b590      	push	{r4, r7, lr}
    c522:	b087      	sub	sp, #28
    c524:	af00      	add	r7, sp, #0
    c526:	4603      	mov	r3, r0
    c528:	6039      	str	r1, [r7, #0]
    c52a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c52c:	2300      	movs	r3, #0
    c52e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c530:	683b      	ldr	r3, [r7, #0]
    c532:	799a      	ldrb	r2, [r3, #6]
    c534:	79db      	ldrb	r3, [r3, #7]
    c536:	021b      	lsls	r3, r3, #8
    c538:	4313      	orrs	r3, r2
    c53a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c53c:	683b      	ldr	r3, [r7, #0]
    c53e:	885b      	ldrh	r3, [r3, #2]
    c540:	b29b      	uxth	r3, r3
    c542:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c544:	8a7a      	ldrh	r2, [r7, #18]
    c546:	4b1e      	ldr	r3, [pc, #120]	; (c5c0 <usbdc_get_cfg_desc+0xa0>)
    c548:	7f1b      	ldrb	r3, [r3, #28]
    c54a:	3b01      	subs	r3, #1
    c54c:	4013      	ands	r3, r2
    c54e:	2b00      	cmp	r3, #0
    c550:	bf0c      	ite	eq
    c552:	2301      	moveq	r3, #1
    c554:	2300      	movne	r3, #0
    c556:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c558:	697b      	ldr	r3, [r7, #20]
    c55a:	2b00      	cmp	r3, #0
    c55c:	d10c      	bne.n	c578 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c55e:	4b18      	ldr	r3, [pc, #96]	; (c5c0 <usbdc_get_cfg_desc+0xa0>)
    c560:	681b      	ldr	r3, [r3, #0]
    c562:	6818      	ldr	r0, [r3, #0]
    c564:	4b16      	ldr	r3, [pc, #88]	; (c5c0 <usbdc_get_cfg_desc+0xa0>)
    c566:	681b      	ldr	r3, [r3, #0]
    c568:	6859      	ldr	r1, [r3, #4]
    c56a:	7c3b      	ldrb	r3, [r7, #16]
    c56c:	3301      	adds	r3, #1
    c56e:	b2db      	uxtb	r3, r3
    c570:	461a      	mov	r2, r3
    c572:	4b14      	ldr	r3, [pc, #80]	; (c5c4 <usbdc_get_cfg_desc+0xa4>)
    c574:	4798      	blx	r3
    c576:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c578:	697b      	ldr	r3, [r7, #20]
    c57a:	2b00      	cmp	r3, #0
    c57c:	d101      	bne.n	c582 <usbdc_get_cfg_desc+0x62>
		return false;
    c57e:	2300      	movs	r3, #0
    c580:	e019      	b.n	c5b6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c582:	6978      	ldr	r0, [r7, #20]
    c584:	4b10      	ldr	r3, [pc, #64]	; (c5c8 <usbdc_get_cfg_desc+0xa8>)
    c586:	4798      	blx	r3
    c588:	4603      	mov	r3, r0
    c58a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c58c:	8a7a      	ldrh	r2, [r7, #18]
    c58e:	89fb      	ldrh	r3, [r7, #14]
    c590:	429a      	cmp	r2, r3
    c592:	d802      	bhi.n	c59a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c594:	2300      	movs	r3, #0
    c596:	747b      	strb	r3, [r7, #17]
    c598:	e001      	b.n	c59e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c59a:	89fb      	ldrh	r3, [r7, #14]
    c59c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c59e:	8a7a      	ldrh	r2, [r7, #18]
    c5a0:	7c7b      	ldrb	r3, [r7, #17]
    c5a2:	79f8      	ldrb	r0, [r7, #7]
    c5a4:	6979      	ldr	r1, [r7, #20]
    c5a6:	4c09      	ldr	r4, [pc, #36]	; (c5cc <usbdc_get_cfg_desc+0xac>)
    c5a8:	47a0      	blx	r4
    c5aa:	4603      	mov	r3, r0
    c5ac:	2b00      	cmp	r3, #0
    c5ae:	d001      	beq.n	c5b4 <usbdc_get_cfg_desc+0x94>
		return false;
    c5b0:	2300      	movs	r3, #0
    c5b2:	e000      	b.n	c5b6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c5b4:	2301      	movs	r3, #1
}
    c5b6:	4618      	mov	r0, r3
    c5b8:	371c      	adds	r7, #28
    c5ba:	46bd      	mov	sp, r7
    c5bc:	bd90      	pop	{r4, r7, pc}
    c5be:	bf00      	nop
    c5c0:	20000de0 	.word	0x20000de0
    c5c4:	0000d2dd 	.word	0x0000d2dd
    c5c8:	0000c489 	.word	0x0000c489
    c5cc:	0000cf8d 	.word	0x0000cf8d

0000c5d0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c5d0:	b590      	push	{r4, r7, lr}
    c5d2:	b085      	sub	sp, #20
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	4603      	mov	r3, r0
    c5d8:	6039      	str	r1, [r7, #0]
    c5da:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c5dc:	683b      	ldr	r3, [r7, #0]
    c5de:	799a      	ldrb	r2, [r3, #6]
    c5e0:	79db      	ldrb	r3, [r3, #7]
    c5e2:	021b      	lsls	r3, r3, #8
    c5e4:	4313      	orrs	r3, r2
    c5e6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c5e8:	683b      	ldr	r3, [r7, #0]
    c5ea:	885b      	ldrh	r3, [r3, #2]
    c5ec:	b29b      	uxth	r3, r3
    c5ee:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c5f0:	89fa      	ldrh	r2, [r7, #14]
    c5f2:	4b1a      	ldr	r3, [pc, #104]	; (c65c <usbdc_get_str_desc+0x8c>)
    c5f4:	7f1b      	ldrb	r3, [r3, #28]
    c5f6:	3b01      	subs	r3, #1
    c5f8:	4013      	ands	r3, r2
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	bf0c      	ite	eq
    c5fe:	2301      	moveq	r3, #1
    c600:	2300      	movne	r3, #0
    c602:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c604:	4b15      	ldr	r3, [pc, #84]	; (c65c <usbdc_get_str_desc+0x8c>)
    c606:	681b      	ldr	r3, [r3, #0]
    c608:	6818      	ldr	r0, [r3, #0]
    c60a:	4b14      	ldr	r3, [pc, #80]	; (c65c <usbdc_get_str_desc+0x8c>)
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	685b      	ldr	r3, [r3, #4]
    c610:	7b3a      	ldrb	r2, [r7, #12]
    c612:	4619      	mov	r1, r3
    c614:	4b12      	ldr	r3, [pc, #72]	; (c660 <usbdc_get_str_desc+0x90>)
    c616:	4798      	blx	r3
    c618:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c61a:	68bb      	ldr	r3, [r7, #8]
    c61c:	2b00      	cmp	r3, #0
    c61e:	d101      	bne.n	c624 <usbdc_get_str_desc+0x54>
		return false;
    c620:	2300      	movs	r3, #0
    c622:	e017      	b.n	c654 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c624:	68bb      	ldr	r3, [r7, #8]
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	b29b      	uxth	r3, r3
    c62a:	89fa      	ldrh	r2, [r7, #14]
    c62c:	429a      	cmp	r2, r3
    c62e:	d802      	bhi.n	c636 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c630:	2300      	movs	r3, #0
    c632:	737b      	strb	r3, [r7, #13]
    c634:	e002      	b.n	c63c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c636:	68bb      	ldr	r3, [r7, #8]
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c63c:	89fa      	ldrh	r2, [r7, #14]
    c63e:	7b7b      	ldrb	r3, [r7, #13]
    c640:	79f8      	ldrb	r0, [r7, #7]
    c642:	68b9      	ldr	r1, [r7, #8]
    c644:	4c07      	ldr	r4, [pc, #28]	; (c664 <usbdc_get_str_desc+0x94>)
    c646:	47a0      	blx	r4
    c648:	4603      	mov	r3, r0
    c64a:	2b00      	cmp	r3, #0
    c64c:	d001      	beq.n	c652 <usbdc_get_str_desc+0x82>
		return false;
    c64e:	2300      	movs	r3, #0
    c650:	e000      	b.n	c654 <usbdc_get_str_desc+0x84>
	}
	return true;
    c652:	2301      	movs	r3, #1
}
    c654:	4618      	mov	r0, r3
    c656:	3714      	adds	r7, #20
    c658:	46bd      	mov	sp, r7
    c65a:	bd90      	pop	{r4, r7, pc}
    c65c:	20000de0 	.word	0x20000de0
    c660:	0000d355 	.word	0x0000d355
    c664:	0000cf8d 	.word	0x0000cf8d

0000c668 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c668:	b580      	push	{r7, lr}
    c66a:	b084      	sub	sp, #16
    c66c:	af00      	add	r7, sp, #0
    c66e:	4603      	mov	r3, r0
    c670:	6039      	str	r1, [r7, #0]
    c672:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c674:	683b      	ldr	r3, [r7, #0]
    c676:	885b      	ldrh	r3, [r3, #2]
    c678:	b29b      	uxth	r3, r3
    c67a:	0a1b      	lsrs	r3, r3, #8
    c67c:	b29b      	uxth	r3, r3
    c67e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c680:	7bfb      	ldrb	r3, [r7, #15]
    c682:	2b02      	cmp	r3, #2
    c684:	d00d      	beq.n	c6a2 <usbdc_get_desc_req+0x3a>
    c686:	2b03      	cmp	r3, #3
    c688:	d012      	beq.n	c6b0 <usbdc_get_desc_req+0x48>
    c68a:	2b01      	cmp	r3, #1
    c68c:	d002      	beq.n	c694 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c68e:	bf00      	nop
	}
	return false;
    c690:	2300      	movs	r3, #0
    c692:	e013      	b.n	c6bc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c694:	79fb      	ldrb	r3, [r7, #7]
    c696:	6839      	ldr	r1, [r7, #0]
    c698:	4618      	mov	r0, r3
    c69a:	4b0a      	ldr	r3, [pc, #40]	; (c6c4 <usbdc_get_desc_req+0x5c>)
    c69c:	4798      	blx	r3
    c69e:	4603      	mov	r3, r0
    c6a0:	e00c      	b.n	c6bc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c6a2:	79fb      	ldrb	r3, [r7, #7]
    c6a4:	6839      	ldr	r1, [r7, #0]
    c6a6:	4618      	mov	r0, r3
    c6a8:	4b07      	ldr	r3, [pc, #28]	; (c6c8 <usbdc_get_desc_req+0x60>)
    c6aa:	4798      	blx	r3
    c6ac:	4603      	mov	r3, r0
    c6ae:	e005      	b.n	c6bc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c6b0:	79fb      	ldrb	r3, [r7, #7]
    c6b2:	6839      	ldr	r1, [r7, #0]
    c6b4:	4618      	mov	r0, r3
    c6b6:	4b05      	ldr	r3, [pc, #20]	; (c6cc <usbdc_get_desc_req+0x64>)
    c6b8:	4798      	blx	r3
    c6ba:	4603      	mov	r3, r0
}
    c6bc:	4618      	mov	r0, r3
    c6be:	3710      	adds	r7, #16
    c6c0:	46bd      	mov	sp, r7
    c6c2:	bd80      	pop	{r7, pc}
    c6c4:	0000c4a9 	.word	0x0000c4a9
    c6c8:	0000c521 	.word	0x0000c521
    c6cc:	0000c5d1 	.word	0x0000c5d1

0000c6d0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c6d0:	b590      	push	{r4, r7, lr}
    c6d2:	b085      	sub	sp, #20
    c6d4:	af00      	add	r7, sp, #0
    c6d6:	4603      	mov	r3, r0
    c6d8:	6039      	str	r1, [r7, #0]
    c6da:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c6dc:	683b      	ldr	r3, [r7, #0]
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	f003 031f 	and.w	r3, r3, #31
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	db1b      	blt.n	c720 <usbdc_get_status_req+0x50>
    c6e8:	2b01      	cmp	r3, #1
    c6ea:	dd02      	ble.n	c6f2 <usbdc_get_status_req+0x22>
    c6ec:	2b02      	cmp	r3, #2
    c6ee:	d003      	beq.n	c6f8 <usbdc_get_status_req+0x28>
    c6f0:	e016      	b.n	c720 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c6f2:	2300      	movs	r3, #0
    c6f4:	60fb      	str	r3, [r7, #12]
		break;
    c6f6:	e015      	b.n	c724 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c6f8:	683b      	ldr	r3, [r7, #0]
    c6fa:	889b      	ldrh	r3, [r3, #4]
    c6fc:	b29b      	uxth	r3, r3
    c6fe:	b2db      	uxtb	r3, r3
    c700:	2102      	movs	r1, #2
    c702:	4618      	mov	r0, r3
    c704:	4b0f      	ldr	r3, [pc, #60]	; (c744 <usbdc_get_status_req+0x74>)
    c706:	4798      	blx	r3
    c708:	4603      	mov	r3, r0
    c70a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c70c:	68fb      	ldr	r3, [r7, #12]
    c70e:	2b00      	cmp	r3, #0
    c710:	da01      	bge.n	c716 <usbdc_get_status_req+0x46>
			return false;
    c712:	2300      	movs	r3, #0
    c714:	e012      	b.n	c73c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c716:	68fb      	ldr	r3, [r7, #12]
    c718:	f003 0301 	and.w	r3, r3, #1
    c71c:	60fb      	str	r3, [r7, #12]
		break;
    c71e:	e001      	b.n	c724 <usbdc_get_status_req+0x54>
	default:
		return false;
    c720:	2300      	movs	r3, #0
    c722:	e00b      	b.n	c73c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c724:	4b08      	ldr	r3, [pc, #32]	; (c748 <usbdc_get_status_req+0x78>)
    c726:	695b      	ldr	r3, [r3, #20]
    c728:	89ba      	ldrh	r2, [r7, #12]
    c72a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c72c:	4b06      	ldr	r3, [pc, #24]	; (c748 <usbdc_get_status_req+0x78>)
    c72e:	6959      	ldr	r1, [r3, #20]
    c730:	79f8      	ldrb	r0, [r7, #7]
    c732:	2300      	movs	r3, #0
    c734:	2202      	movs	r2, #2
    c736:	4c05      	ldr	r4, [pc, #20]	; (c74c <usbdc_get_status_req+0x7c>)
    c738:	47a0      	blx	r4
	return true;
    c73a:	2301      	movs	r3, #1
}
    c73c:	4618      	mov	r0, r3
    c73e:	3714      	adds	r7, #20
    c740:	46bd      	mov	sp, r7
    c742:	bd90      	pop	{r4, r7, pc}
    c744:	000038ad 	.word	0x000038ad
    c748:	20000de0 	.word	0x20000de0
    c74c:	0000cf8d 	.word	0x0000cf8d

0000c750 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c750:	b590      	push	{r4, r7, lr}
    c752:	b085      	sub	sp, #20
    c754:	af00      	add	r7, sp, #0
    c756:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c758:	4b1f      	ldr	r3, [pc, #124]	; (c7d8 <usbdc_get_interface+0x88>)
    c75a:	691b      	ldr	r3, [r3, #16]
    c75c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c75e:	4b1e      	ldr	r3, [pc, #120]	; (c7d8 <usbdc_get_interface+0x88>)
    c760:	7f5b      	ldrb	r3, [r3, #29]
    c762:	461a      	mov	r2, r3
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	889b      	ldrh	r3, [r3, #4]
    c768:	b29b      	uxth	r3, r3
    c76a:	fa42 f303 	asr.w	r3, r2, r3
    c76e:	f003 0301 	and.w	r3, r3, #1
    c772:	2b00      	cmp	r3, #0
    c774:	d128      	bne.n	c7c8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c776:	4b18      	ldr	r3, [pc, #96]	; (c7d8 <usbdc_get_interface+0x88>)
    c778:	695b      	ldr	r3, [r3, #20]
    c77a:	2200      	movs	r2, #0
    c77c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c77e:	4b16      	ldr	r3, [pc, #88]	; (c7d8 <usbdc_get_interface+0x88>)
    c780:	6959      	ldr	r1, [r3, #20]
    c782:	2300      	movs	r3, #0
    c784:	2201      	movs	r2, #1
    c786:	2000      	movs	r0, #0
    c788:	4c14      	ldr	r4, [pc, #80]	; (c7dc <usbdc_get_interface+0x8c>)
    c78a:	47a0      	blx	r4
		return true;
    c78c:	2301      	movs	r3, #1
    c78e:	e01f      	b.n	c7d0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c790:	68fb      	ldr	r3, [r7, #12]
    c792:	685b      	ldr	r3, [r3, #4]
    c794:	687a      	ldr	r2, [r7, #4]
    c796:	2102      	movs	r1, #2
    c798:	68f8      	ldr	r0, [r7, #12]
    c79a:	4798      	blx	r3
    c79c:	60b8      	str	r0, [r7, #8]
    c79e:	68bb      	ldr	r3, [r7, #8]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	da03      	bge.n	c7ac <usbdc_get_interface+0x5c>
			func = func->next;
    c7a4:	68fb      	ldr	r3, [r7, #12]
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	60fb      	str	r3, [r7, #12]
    c7aa:	e00d      	b.n	c7c8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c7ac:	4b0a      	ldr	r3, [pc, #40]	; (c7d8 <usbdc_get_interface+0x88>)
    c7ae:	695b      	ldr	r3, [r3, #20]
    c7b0:	68ba      	ldr	r2, [r7, #8]
    c7b2:	b2d2      	uxtb	r2, r2
    c7b4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c7b6:	4b08      	ldr	r3, [pc, #32]	; (c7d8 <usbdc_get_interface+0x88>)
    c7b8:	6959      	ldr	r1, [r3, #20]
    c7ba:	2300      	movs	r3, #0
    c7bc:	2201      	movs	r2, #1
    c7be:	2000      	movs	r0, #0
    c7c0:	4c06      	ldr	r4, [pc, #24]	; (c7dc <usbdc_get_interface+0x8c>)
    c7c2:	47a0      	blx	r4
			return true;
    c7c4:	2301      	movs	r3, #1
    c7c6:	e003      	b.n	c7d0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c7c8:	68fb      	ldr	r3, [r7, #12]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d1e0      	bne.n	c790 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c7ce:	2300      	movs	r3, #0
}
    c7d0:	4618      	mov	r0, r3
    c7d2:	3714      	adds	r7, #20
    c7d4:	46bd      	mov	sp, r7
    c7d6:	bd90      	pop	{r4, r7, pc}
    c7d8:	20000de0 	.word	0x20000de0
    c7dc:	0000cf8d 	.word	0x0000cf8d

0000c7e0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c7e0:	b590      	push	{r4, r7, lr}
    c7e2:	b083      	sub	sp, #12
    c7e4:	af00      	add	r7, sp, #0
    c7e6:	4603      	mov	r3, r0
    c7e8:	6039      	str	r1, [r7, #0]
    c7ea:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c7ec:	683b      	ldr	r3, [r7, #0]
    c7ee:	785b      	ldrb	r3, [r3, #1]
    c7f0:	2b0a      	cmp	r3, #10
    c7f2:	d83a      	bhi.n	c86a <usbdc_get_req+0x8a>
    c7f4:	a201      	add	r2, pc, #4	; (adr r2, c7fc <usbdc_get_req+0x1c>)
    c7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c7fa:	bf00      	nop
    c7fc:	0000c853 	.word	0x0000c853
    c800:	0000c86b 	.word	0x0000c86b
    c804:	0000c86b 	.word	0x0000c86b
    c808:	0000c86b 	.word	0x0000c86b
    c80c:	0000c86b 	.word	0x0000c86b
    c810:	0000c86b 	.word	0x0000c86b
    c814:	0000c829 	.word	0x0000c829
    c818:	0000c86b 	.word	0x0000c86b
    c81c:	0000c837 	.word	0x0000c837
    c820:	0000c86b 	.word	0x0000c86b
    c824:	0000c861 	.word	0x0000c861
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c828:	79fb      	ldrb	r3, [r7, #7]
    c82a:	6839      	ldr	r1, [r7, #0]
    c82c:	4618      	mov	r0, r3
    c82e:	4b11      	ldr	r3, [pc, #68]	; (c874 <usbdc_get_req+0x94>)
    c830:	4798      	blx	r3
    c832:	4603      	mov	r3, r0
    c834:	e01a      	b.n	c86c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c836:	4b10      	ldr	r3, [pc, #64]	; (c878 <usbdc_get_req+0x98>)
    c838:	695b      	ldr	r3, [r3, #20]
    c83a:	4a0f      	ldr	r2, [pc, #60]	; (c878 <usbdc_get_req+0x98>)
    c83c:	7ed2      	ldrb	r2, [r2, #27]
    c83e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c840:	4b0d      	ldr	r3, [pc, #52]	; (c878 <usbdc_get_req+0x98>)
    c842:	6959      	ldr	r1, [r3, #20]
    c844:	79f8      	ldrb	r0, [r7, #7]
    c846:	2300      	movs	r3, #0
    c848:	2201      	movs	r2, #1
    c84a:	4c0c      	ldr	r4, [pc, #48]	; (c87c <usbdc_get_req+0x9c>)
    c84c:	47a0      	blx	r4
		return true;
    c84e:	2301      	movs	r3, #1
    c850:	e00c      	b.n	c86c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c852:	79fb      	ldrb	r3, [r7, #7]
    c854:	6839      	ldr	r1, [r7, #0]
    c856:	4618      	mov	r0, r3
    c858:	4b09      	ldr	r3, [pc, #36]	; (c880 <usbdc_get_req+0xa0>)
    c85a:	4798      	blx	r3
    c85c:	4603      	mov	r3, r0
    c85e:	e005      	b.n	c86c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c860:	6838      	ldr	r0, [r7, #0]
    c862:	4b08      	ldr	r3, [pc, #32]	; (c884 <usbdc_get_req+0xa4>)
    c864:	4798      	blx	r3
    c866:	4603      	mov	r3, r0
    c868:	e000      	b.n	c86c <usbdc_get_req+0x8c>
	default:
		return false;
    c86a:	2300      	movs	r3, #0
	}
}
    c86c:	4618      	mov	r0, r3
    c86e:	370c      	adds	r7, #12
    c870:	46bd      	mov	sp, r7
    c872:	bd90      	pop	{r4, r7, pc}
    c874:	0000c669 	.word	0x0000c669
    c878:	20000de0 	.word	0x20000de0
    c87c:	0000cf8d 	.word	0x0000cf8d
    c880:	0000c6d1 	.word	0x0000c6d1
    c884:	0000c751 	.word	0x0000c751

0000c888 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c888:	b590      	push	{r4, r7, lr}
    c88a:	b083      	sub	sp, #12
    c88c:	af00      	add	r7, sp, #0
    c88e:	4603      	mov	r3, r0
    c890:	6039      	str	r1, [r7, #0]
    c892:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c894:	683b      	ldr	r3, [r7, #0]
    c896:	781b      	ldrb	r3, [r3, #0]
    c898:	f003 031f 	and.w	r3, r3, #31
    c89c:	2b02      	cmp	r3, #2
    c89e:	d116      	bne.n	c8ce <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c8a0:	683b      	ldr	r3, [r7, #0]
    c8a2:	88db      	ldrh	r3, [r3, #6]
    c8a4:	b29b      	uxth	r3, r3
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d001      	beq.n	c8ae <usbdc_clear_ftr_req+0x26>
			return false;
    c8aa:	2300      	movs	r3, #0
    c8ac:	e010      	b.n	c8d0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c8ae:	683b      	ldr	r3, [r7, #0]
    c8b0:	889b      	ldrh	r3, [r3, #4]
    c8b2:	b29b      	uxth	r3, r3
    c8b4:	b2db      	uxtb	r3, r3
    c8b6:	2100      	movs	r1, #0
    c8b8:	4618      	mov	r0, r3
    c8ba:	4b07      	ldr	r3, [pc, #28]	; (c8d8 <usbdc_clear_ftr_req+0x50>)
    c8bc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c8be:	79f8      	ldrb	r0, [r7, #7]
    c8c0:	2301      	movs	r3, #1
    c8c2:	2200      	movs	r2, #0
    c8c4:	2100      	movs	r1, #0
    c8c6:	4c05      	ldr	r4, [pc, #20]	; (c8dc <usbdc_clear_ftr_req+0x54>)
    c8c8:	47a0      	blx	r4
		return true;
    c8ca:	2301      	movs	r3, #1
    c8cc:	e000      	b.n	c8d0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c8ce:	2300      	movs	r3, #0
	}
}
    c8d0:	4618      	mov	r0, r3
    c8d2:	370c      	adds	r7, #12
    c8d4:	46bd      	mov	sp, r7
    c8d6:	bd90      	pop	{r4, r7, pc}
    c8d8:	000038ad 	.word	0x000038ad
    c8dc:	0000cf8d 	.word	0x0000cf8d

0000c8e0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c8e0:	b590      	push	{r4, r7, lr}
    c8e2:	b083      	sub	sp, #12
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	4603      	mov	r3, r0
    c8e8:	6039      	str	r1, [r7, #0]
    c8ea:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c8ec:	683b      	ldr	r3, [r7, #0]
    c8ee:	781b      	ldrb	r3, [r3, #0]
    c8f0:	f003 031f 	and.w	r3, r3, #31
    c8f4:	2b02      	cmp	r3, #2
    c8f6:	d116      	bne.n	c926 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c8f8:	683b      	ldr	r3, [r7, #0]
    c8fa:	88db      	ldrh	r3, [r3, #6]
    c8fc:	b29b      	uxth	r3, r3
    c8fe:	2b00      	cmp	r3, #0
    c900:	d001      	beq.n	c906 <usbdc_set_ftr_req+0x26>
			return false;
    c902:	2300      	movs	r3, #0
    c904:	e010      	b.n	c928 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c906:	683b      	ldr	r3, [r7, #0]
    c908:	889b      	ldrh	r3, [r3, #4]
    c90a:	b29b      	uxth	r3, r3
    c90c:	b2db      	uxtb	r3, r3
    c90e:	2101      	movs	r1, #1
    c910:	4618      	mov	r0, r3
    c912:	4b07      	ldr	r3, [pc, #28]	; (c930 <usbdc_set_ftr_req+0x50>)
    c914:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c916:	79f8      	ldrb	r0, [r7, #7]
    c918:	2301      	movs	r3, #1
    c91a:	2200      	movs	r2, #0
    c91c:	2100      	movs	r1, #0
    c91e:	4c05      	ldr	r4, [pc, #20]	; (c934 <usbdc_set_ftr_req+0x54>)
    c920:	47a0      	blx	r4
		return true;
    c922:	2301      	movs	r3, #1
    c924:	e000      	b.n	c928 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c926:	2300      	movs	r3, #0
	}
}
    c928:	4618      	mov	r0, r3
    c92a:	370c      	adds	r7, #12
    c92c:	46bd      	mov	sp, r7
    c92e:	bd90      	pop	{r4, r7, pc}
    c930:	000038ad 	.word	0x000038ad
    c934:	0000cf8d 	.word	0x0000cf8d

0000c938 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c938:	b580      	push	{r7, lr}
    c93a:	b082      	sub	sp, #8
    c93c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c93e:	4b0a      	ldr	r3, [pc, #40]	; (c968 <usbdc_unconfig+0x30>)
    c940:	691b      	ldr	r3, [r3, #16]
    c942:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c944:	e008      	b.n	c958 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c946:	687b      	ldr	r3, [r7, #4]
    c948:	685b      	ldr	r3, [r3, #4]
    c94a:	2200      	movs	r2, #0
    c94c:	2101      	movs	r1, #1
    c94e:	6878      	ldr	r0, [r7, #4]
    c950:	4798      	blx	r3
		func = func->next;
    c952:	687b      	ldr	r3, [r7, #4]
    c954:	681b      	ldr	r3, [r3, #0]
    c956:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	2b00      	cmp	r3, #0
    c95c:	d1f3      	bne.n	c946 <usbdc_unconfig+0xe>
	}
}
    c95e:	bf00      	nop
    c960:	3708      	adds	r7, #8
    c962:	46bd      	mov	sp, r7
    c964:	bd80      	pop	{r7, pc}
    c966:	bf00      	nop
    c968:	20000de0 	.word	0x20000de0

0000c96c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c96c:	b580      	push	{r7, lr}
    c96e:	b088      	sub	sp, #32
    c970:	af00      	add	r7, sp, #0
    c972:	4603      	mov	r3, r0
    c974:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c976:	2300      	movs	r3, #0
    c978:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c97a:	23ff      	movs	r3, #255	; 0xff
    c97c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c97e:	79fb      	ldrb	r3, [r7, #7]
    c980:	2b00      	cmp	r3, #0
    c982:	d103      	bne.n	c98c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c984:	4b2e      	ldr	r3, [pc, #184]	; (ca40 <usbdc_set_config+0xd4>)
    c986:	4798      	blx	r3
		return true;
    c988:	2301      	movs	r3, #1
    c98a:	e055      	b.n	ca38 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c98c:	69bb      	ldr	r3, [r7, #24]
    c98e:	2b00      	cmp	r3, #0
    c990:	d10a      	bne.n	c9a8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c992:	4b2c      	ldr	r3, [pc, #176]	; (ca44 <usbdc_set_config+0xd8>)
    c994:	681b      	ldr	r3, [r3, #0]
    c996:	6818      	ldr	r0, [r3, #0]
    c998:	4b2a      	ldr	r3, [pc, #168]	; (ca44 <usbdc_set_config+0xd8>)
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	685b      	ldr	r3, [r3, #4]
    c99e:	79fa      	ldrb	r2, [r7, #7]
    c9a0:	4619      	mov	r1, r3
    c9a2:	4b29      	ldr	r3, [pc, #164]	; (ca48 <usbdc_set_config+0xdc>)
    c9a4:	4798      	blx	r3
    c9a6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c9a8:	69bb      	ldr	r3, [r7, #24]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d101      	bne.n	c9b2 <usbdc_set_config+0x46>
		return false;
    c9ae:	2300      	movs	r3, #0
    c9b0:	e042      	b.n	ca38 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c9b2:	69b8      	ldr	r0, [r7, #24]
    c9b4:	4b25      	ldr	r3, [pc, #148]	; (ca4c <usbdc_set_config+0xe0>)
    c9b6:	4798      	blx	r3
    c9b8:	4603      	mov	r3, r0
    c9ba:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c9bc:	8abb      	ldrh	r3, [r7, #20]
    c9be:	69ba      	ldr	r2, [r7, #24]
    c9c0:	4413      	add	r3, r2
    c9c2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c9c4:	693b      	ldr	r3, [r7, #16]
    c9c6:	2204      	movs	r2, #4
    c9c8:	4619      	mov	r1, r3
    c9ca:	69b8      	ldr	r0, [r7, #24]
    c9cc:	4b20      	ldr	r3, [pc, #128]	; (ca50 <usbdc_set_config+0xe4>)
    c9ce:	4798      	blx	r3
    c9d0:	4603      	mov	r3, r0
    c9d2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c9d4:	e02c      	b.n	ca30 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	3302      	adds	r3, #2
    c9da:	781b      	ldrb	r3, [r3, #0]
    c9dc:	7dfa      	ldrb	r2, [r7, #23]
    c9de:	429a      	cmp	r2, r3
    c9e0:	d018      	beq.n	ca14 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c9e2:	68fb      	ldr	r3, [r7, #12]
    c9e4:	789b      	ldrb	r3, [r3, #2]
    c9e6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c9e8:	4b16      	ldr	r3, [pc, #88]	; (ca44 <usbdc_set_config+0xd8>)
    c9ea:	691b      	ldr	r3, [r3, #16]
    c9ec:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c9ee:	e00c      	b.n	ca0a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c9f0:	69fb      	ldr	r3, [r7, #28]
    c9f2:	685b      	ldr	r3, [r3, #4]
    c9f4:	f107 020c 	add.w	r2, r7, #12
    c9f8:	2100      	movs	r1, #0
    c9fa:	69f8      	ldr	r0, [r7, #28]
    c9fc:	4798      	blx	r3
    c9fe:	4603      	mov	r3, r0
    ca00:	2b00      	cmp	r3, #0
    ca02:	d006      	beq.n	ca12 <usbdc_set_config+0xa6>
					func = func->next;
    ca04:	69fb      	ldr	r3, [r7, #28]
    ca06:	681b      	ldr	r3, [r3, #0]
    ca08:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ca0a:	69fb      	ldr	r3, [r7, #28]
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d1ef      	bne.n	c9f0 <usbdc_set_config+0x84>
    ca10:	e000      	b.n	ca14 <usbdc_set_config+0xa8>
				} else {
					break;
    ca12:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    ca14:	68fb      	ldr	r3, [r7, #12]
    ca16:	4618      	mov	r0, r3
    ca18:	4b0e      	ldr	r3, [pc, #56]	; (ca54 <usbdc_set_config+0xe8>)
    ca1a:	4798      	blx	r3
    ca1c:	4603      	mov	r3, r0
    ca1e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ca20:	68fb      	ldr	r3, [r7, #12]
    ca22:	6939      	ldr	r1, [r7, #16]
    ca24:	2204      	movs	r2, #4
    ca26:	4618      	mov	r0, r3
    ca28:	4b09      	ldr	r3, [pc, #36]	; (ca50 <usbdc_set_config+0xe4>)
    ca2a:	4798      	blx	r3
    ca2c:	4603      	mov	r3, r0
    ca2e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ca30:	68fb      	ldr	r3, [r7, #12]
    ca32:	2b00      	cmp	r3, #0
    ca34:	d1cf      	bne.n	c9d6 <usbdc_set_config+0x6a>
	}
	return true;
    ca36:	2301      	movs	r3, #1
}
    ca38:	4618      	mov	r0, r3
    ca3a:	3720      	adds	r7, #32
    ca3c:	46bd      	mov	sp, r7
    ca3e:	bd80      	pop	{r7, pc}
    ca40:	0000c939 	.word	0x0000c939
    ca44:	20000de0 	.word	0x20000de0
    ca48:	0000d2dd 	.word	0x0000d2dd
    ca4c:	0000c489 	.word	0x0000c489
    ca50:	0000d21d 	.word	0x0000d21d
    ca54:	0000c465 	.word	0x0000c465

0000ca58 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ca58:	b580      	push	{r7, lr}
    ca5a:	b082      	sub	sp, #8
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	4603      	mov	r3, r0
    ca60:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ca62:	79fb      	ldrb	r3, [r7, #7]
    ca64:	4618      	mov	r0, r3
    ca66:	4b03      	ldr	r3, [pc, #12]	; (ca74 <usbdc_set_address+0x1c>)
    ca68:	4798      	blx	r3
}
    ca6a:	bf00      	nop
    ca6c:	3708      	adds	r7, #8
    ca6e:	46bd      	mov	sp, r7
    ca70:	bd80      	pop	{r7, pc}
    ca72:	bf00      	nop
    ca74:	000034c9 	.word	0x000034c9

0000ca78 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ca78:	b590      	push	{r4, r7, lr}
    ca7a:	b087      	sub	sp, #28
    ca7c:	af00      	add	r7, sp, #0
    ca7e:	4603      	mov	r3, r0
    ca80:	460a      	mov	r2, r1
    ca82:	80fb      	strh	r3, [r7, #6]
    ca84:	4613      	mov	r3, r2
    ca86:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ca88:	2300      	movs	r3, #0
    ca8a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ca8c:	693b      	ldr	r3, [r7, #16]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d10b      	bne.n	caaa <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ca92:	4b43      	ldr	r3, [pc, #268]	; (cba0 <usbdc_set_interface+0x128>)
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	6818      	ldr	r0, [r3, #0]
    ca98:	4b41      	ldr	r3, [pc, #260]	; (cba0 <usbdc_set_interface+0x128>)
    ca9a:	681b      	ldr	r3, [r3, #0]
    ca9c:	6859      	ldr	r1, [r3, #4]
    ca9e:	4b40      	ldr	r3, [pc, #256]	; (cba0 <usbdc_set_interface+0x128>)
    caa0:	7edb      	ldrb	r3, [r3, #27]
    caa2:	461a      	mov	r2, r3
    caa4:	4b3f      	ldr	r3, [pc, #252]	; (cba4 <usbdc_set_interface+0x12c>)
    caa6:	4798      	blx	r3
    caa8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    caaa:	693b      	ldr	r3, [r7, #16]
    caac:	2b00      	cmp	r3, #0
    caae:	d101      	bne.n	cab4 <usbdc_set_interface+0x3c>
		return false;
    cab0:	2300      	movs	r3, #0
    cab2:	e071      	b.n	cb98 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cab4:	693b      	ldr	r3, [r7, #16]
    cab6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cab8:	6938      	ldr	r0, [r7, #16]
    caba:	4b3b      	ldr	r3, [pc, #236]	; (cba8 <usbdc_set_interface+0x130>)
    cabc:	4798      	blx	r3
    cabe:	4603      	mov	r3, r0
    cac0:	461a      	mov	r2, r3
    cac2:	693b      	ldr	r3, [r7, #16]
    cac4:	4413      	add	r3, r2
    cac6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cac8:	68bb      	ldr	r3, [r7, #8]
    caca:	68f9      	ldr	r1, [r7, #12]
    cacc:	2204      	movs	r2, #4
    cace:	4618      	mov	r0, r3
    cad0:	4b36      	ldr	r3, [pc, #216]	; (cbac <usbdc_set_interface+0x134>)
    cad2:	4798      	blx	r3
    cad4:	6138      	str	r0, [r7, #16]
    cad6:	693b      	ldr	r3, [r7, #16]
    cad8:	2b00      	cmp	r3, #0
    cada:	d113      	bne.n	cb04 <usbdc_set_interface+0x8c>
		return false;
    cadc:	2300      	movs	r3, #0
    cade:	e05b      	b.n	cb98 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cae0:	68bb      	ldr	r3, [r7, #8]
    cae2:	4618      	mov	r0, r3
    cae4:	4b32      	ldr	r3, [pc, #200]	; (cbb0 <usbdc_set_interface+0x138>)
    cae6:	4798      	blx	r3
    cae8:	4603      	mov	r3, r0
    caea:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    caec:	68bb      	ldr	r3, [r7, #8]
    caee:	68f9      	ldr	r1, [r7, #12]
    caf0:	2204      	movs	r2, #4
    caf2:	4618      	mov	r0, r3
    caf4:	4b2d      	ldr	r3, [pc, #180]	; (cbac <usbdc_set_interface+0x134>)
    caf6:	4798      	blx	r3
    caf8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cafa:	693b      	ldr	r3, [r7, #16]
    cafc:	2b00      	cmp	r3, #0
    cafe:	d101      	bne.n	cb04 <usbdc_set_interface+0x8c>
			return false;
    cb00:	2300      	movs	r3, #0
    cb02:	e049      	b.n	cb98 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cb04:	693b      	ldr	r3, [r7, #16]
    cb06:	3302      	adds	r3, #2
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	b29b      	uxth	r3, r3
    cb0c:	88ba      	ldrh	r2, [r7, #4]
    cb0e:	429a      	cmp	r2, r3
    cb10:	d1e6      	bne.n	cae0 <usbdc_set_interface+0x68>
    cb12:	693b      	ldr	r3, [r7, #16]
    cb14:	3303      	adds	r3, #3
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	b29b      	uxth	r3, r3
    cb1a:	88fa      	ldrh	r2, [r7, #6]
    cb1c:	429a      	cmp	r2, r3
    cb1e:	d1df      	bne.n	cae0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cb20:	693b      	ldr	r3, [r7, #16]
    cb22:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cb24:	4b1e      	ldr	r3, [pc, #120]	; (cba0 <usbdc_set_interface+0x128>)
    cb26:	691b      	ldr	r3, [r3, #16]
    cb28:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cb2a:	e031      	b.n	cb90 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cb2c:	697b      	ldr	r3, [r7, #20]
    cb2e:	685b      	ldr	r3, [r3, #4]
    cb30:	f107 0208 	add.w	r2, r7, #8
    cb34:	2101      	movs	r1, #1
    cb36:	6978      	ldr	r0, [r7, #20]
    cb38:	4798      	blx	r3
    cb3a:	4603      	mov	r3, r0
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d003      	beq.n	cb48 <usbdc_set_interface+0xd0>
			func = func->next;
    cb40:	697b      	ldr	r3, [r7, #20]
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	617b      	str	r3, [r7, #20]
    cb46:	e023      	b.n	cb90 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cb48:	697b      	ldr	r3, [r7, #20]
    cb4a:	685b      	ldr	r3, [r3, #4]
    cb4c:	f107 0208 	add.w	r2, r7, #8
    cb50:	2100      	movs	r1, #0
    cb52:	6978      	ldr	r0, [r7, #20]
    cb54:	4798      	blx	r3
    cb56:	4603      	mov	r3, r0
    cb58:	2b00      	cmp	r3, #0
    cb5a:	d117      	bne.n	cb8c <usbdc_set_interface+0x114>
			if (alt_set) {
    cb5c:	88fb      	ldrh	r3, [r7, #6]
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d00c      	beq.n	cb7c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cb62:	4b0f      	ldr	r3, [pc, #60]	; (cba0 <usbdc_set_interface+0x128>)
    cb64:	7f5b      	ldrb	r3, [r3, #29]
    cb66:	b25a      	sxtb	r2, r3
    cb68:	88bb      	ldrh	r3, [r7, #4]
    cb6a:	2101      	movs	r1, #1
    cb6c:	fa01 f303 	lsl.w	r3, r1, r3
    cb70:	b25b      	sxtb	r3, r3
    cb72:	4313      	orrs	r3, r2
    cb74:	b25b      	sxtb	r3, r3
    cb76:	b2da      	uxtb	r2, r3
    cb78:	4b09      	ldr	r3, [pc, #36]	; (cba0 <usbdc_set_interface+0x128>)
    cb7a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cb7c:	2300      	movs	r3, #0
    cb7e:	2200      	movs	r2, #0
    cb80:	2100      	movs	r1, #0
    cb82:	2000      	movs	r0, #0
    cb84:	4c0b      	ldr	r4, [pc, #44]	; (cbb4 <usbdc_set_interface+0x13c>)
    cb86:	47a0      	blx	r4
			return true;
    cb88:	2301      	movs	r3, #1
    cb8a:	e005      	b.n	cb98 <usbdc_set_interface+0x120>
		} else {
			return false;
    cb8c:	2300      	movs	r3, #0
    cb8e:	e003      	b.n	cb98 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cb90:	697b      	ldr	r3, [r7, #20]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d1ca      	bne.n	cb2c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cb96:	2300      	movs	r3, #0
}
    cb98:	4618      	mov	r0, r3
    cb9a:	371c      	adds	r7, #28
    cb9c:	46bd      	mov	sp, r7
    cb9e:	bd90      	pop	{r4, r7, pc}
    cba0:	20000de0 	.word	0x20000de0
    cba4:	0000d2dd 	.word	0x0000d2dd
    cba8:	0000c489 	.word	0x0000c489
    cbac:	0000d21d 	.word	0x0000d21d
    cbb0:	0000c465 	.word	0x0000c465
    cbb4:	0000cf8d 	.word	0x0000cf8d

0000cbb8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cbb8:	b590      	push	{r4, r7, lr}
    cbba:	b083      	sub	sp, #12
    cbbc:	af00      	add	r7, sp, #0
    cbbe:	4603      	mov	r3, r0
    cbc0:	6039      	str	r1, [r7, #0]
    cbc2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cbc4:	683b      	ldr	r3, [r7, #0]
    cbc6:	785b      	ldrb	r3, [r3, #1]
    cbc8:	3b01      	subs	r3, #1
    cbca:	2b0a      	cmp	r3, #10
    cbcc:	d85b      	bhi.n	cc86 <usbdc_set_req+0xce>
    cbce:	a201      	add	r2, pc, #4	; (adr r2, cbd4 <usbdc_set_req+0x1c>)
    cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbd4:	0000cc53 	.word	0x0000cc53
    cbd8:	0000cc87 	.word	0x0000cc87
    cbdc:	0000cc61 	.word	0x0000cc61
    cbe0:	0000cc87 	.word	0x0000cc87
    cbe4:	0000cc01 	.word	0x0000cc01
    cbe8:	0000cc87 	.word	0x0000cc87
    cbec:	0000cc87 	.word	0x0000cc87
    cbf0:	0000cc87 	.word	0x0000cc87
    cbf4:	0000cc1b 	.word	0x0000cc1b
    cbf8:	0000cc87 	.word	0x0000cc87
    cbfc:	0000cc6f 	.word	0x0000cc6f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc00:	79f8      	ldrb	r0, [r7, #7]
    cc02:	2301      	movs	r3, #1
    cc04:	2200      	movs	r2, #0
    cc06:	2100      	movs	r1, #0
    cc08:	4c21      	ldr	r4, [pc, #132]	; (cc90 <usbdc_set_req+0xd8>)
    cc0a:	47a0      	blx	r4
    cc0c:	4603      	mov	r3, r0
    cc0e:	2b00      	cmp	r3, #0
    cc10:	bf0c      	ite	eq
    cc12:	2301      	moveq	r3, #1
    cc14:	2300      	movne	r3, #0
    cc16:	b2db      	uxtb	r3, r3
    cc18:	e036      	b.n	cc88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cc1a:	683b      	ldr	r3, [r7, #0]
    cc1c:	885b      	ldrh	r3, [r3, #2]
    cc1e:	b29b      	uxth	r3, r3
    cc20:	b2db      	uxtb	r3, r3
    cc22:	4618      	mov	r0, r3
    cc24:	4b1b      	ldr	r3, [pc, #108]	; (cc94 <usbdc_set_req+0xdc>)
    cc26:	4798      	blx	r3
    cc28:	4603      	mov	r3, r0
    cc2a:	f083 0301 	eor.w	r3, r3, #1
    cc2e:	b2db      	uxtb	r3, r3
    cc30:	2b00      	cmp	r3, #0
    cc32:	d001      	beq.n	cc38 <usbdc_set_req+0x80>
			return false;
    cc34:	2300      	movs	r3, #0
    cc36:	e027      	b.n	cc88 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc38:	79f8      	ldrb	r0, [r7, #7]
    cc3a:	2301      	movs	r3, #1
    cc3c:	2200      	movs	r2, #0
    cc3e:	2100      	movs	r1, #0
    cc40:	4c13      	ldr	r4, [pc, #76]	; (cc90 <usbdc_set_req+0xd8>)
    cc42:	47a0      	blx	r4
    cc44:	4603      	mov	r3, r0
    cc46:	2b00      	cmp	r3, #0
    cc48:	bf0c      	ite	eq
    cc4a:	2301      	moveq	r3, #1
    cc4c:	2300      	movne	r3, #0
    cc4e:	b2db      	uxtb	r3, r3
    cc50:	e01a      	b.n	cc88 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cc52:	79fb      	ldrb	r3, [r7, #7]
    cc54:	6839      	ldr	r1, [r7, #0]
    cc56:	4618      	mov	r0, r3
    cc58:	4b0f      	ldr	r3, [pc, #60]	; (cc98 <usbdc_set_req+0xe0>)
    cc5a:	4798      	blx	r3
    cc5c:	4603      	mov	r3, r0
    cc5e:	e013      	b.n	cc88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cc60:	79fb      	ldrb	r3, [r7, #7]
    cc62:	6839      	ldr	r1, [r7, #0]
    cc64:	4618      	mov	r0, r3
    cc66:	4b0d      	ldr	r3, [pc, #52]	; (cc9c <usbdc_set_req+0xe4>)
    cc68:	4798      	blx	r3
    cc6a:	4603      	mov	r3, r0
    cc6c:	e00c      	b.n	cc88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cc6e:	683b      	ldr	r3, [r7, #0]
    cc70:	885b      	ldrh	r3, [r3, #2]
    cc72:	b29a      	uxth	r2, r3
    cc74:	683b      	ldr	r3, [r7, #0]
    cc76:	889b      	ldrh	r3, [r3, #4]
    cc78:	b29b      	uxth	r3, r3
    cc7a:	4619      	mov	r1, r3
    cc7c:	4610      	mov	r0, r2
    cc7e:	4b08      	ldr	r3, [pc, #32]	; (cca0 <usbdc_set_req+0xe8>)
    cc80:	4798      	blx	r3
    cc82:	4603      	mov	r3, r0
    cc84:	e000      	b.n	cc88 <usbdc_set_req+0xd0>
	default:
		return false;
    cc86:	2300      	movs	r3, #0
	}
}
    cc88:	4618      	mov	r0, r3
    cc8a:	370c      	adds	r7, #12
    cc8c:	46bd      	mov	sp, r7
    cc8e:	bd90      	pop	{r4, r7, pc}
    cc90:	0000cf8d 	.word	0x0000cf8d
    cc94:	0000c96d 	.word	0x0000c96d
    cc98:	0000c889 	.word	0x0000c889
    cc9c:	0000c8e1 	.word	0x0000c8e1
    cca0:	0000ca79 	.word	0x0000ca79

0000cca4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cca4:	b580      	push	{r7, lr}
    cca6:	b082      	sub	sp, #8
    cca8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    ccaa:	4b0a      	ldr	r3, [pc, #40]	; (ccd4 <usbdc_sof_notify+0x30>)
    ccac:	685b      	ldr	r3, [r3, #4]
    ccae:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    ccb0:	e009      	b.n	ccc6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    ccb2:	687b      	ldr	r3, [r7, #4]
    ccb4:	685b      	ldr	r3, [r3, #4]
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d002      	beq.n	ccc0 <usbdc_sof_notify+0x1c>
			sof->cb();
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	685b      	ldr	r3, [r3, #4]
    ccbe:	4798      	blx	r3
		}
		sof = sof->next;
    ccc0:	687b      	ldr	r3, [r7, #4]
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d1f2      	bne.n	ccb2 <usbdc_sof_notify+0xe>
	}
}
    cccc:	bf00      	nop
    ccce:	3708      	adds	r7, #8
    ccd0:	46bd      	mov	sp, r7
    ccd2:	bd80      	pop	{r7, pc}
    ccd4:	20000de0 	.word	0x20000de0

0000ccd8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ccd8:	b580      	push	{r7, lr}
    ccda:	b084      	sub	sp, #16
    ccdc:	af00      	add	r7, sp, #0
    ccde:	4603      	mov	r3, r0
    cce0:	6039      	str	r1, [r7, #0]
    cce2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cce4:	4b0b      	ldr	r3, [pc, #44]	; (cd14 <usbdc_change_notify+0x3c>)
    cce6:	68db      	ldr	r3, [r3, #12]
    cce8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ccea:	e00c      	b.n	cd06 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ccec:	68fb      	ldr	r3, [r7, #12]
    ccee:	685b      	ldr	r3, [r3, #4]
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	d005      	beq.n	cd00 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ccf4:	68fb      	ldr	r3, [r7, #12]
    ccf6:	685b      	ldr	r3, [r3, #4]
    ccf8:	79fa      	ldrb	r2, [r7, #7]
    ccfa:	6839      	ldr	r1, [r7, #0]
    ccfc:	4610      	mov	r0, r2
    ccfe:	4798      	blx	r3
		}
		cg = cg->next;
    cd00:	68fb      	ldr	r3, [r7, #12]
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cd06:	68fb      	ldr	r3, [r7, #12]
    cd08:	2b00      	cmp	r3, #0
    cd0a:	d1ef      	bne.n	ccec <usbdc_change_notify+0x14>
	}
}
    cd0c:	bf00      	nop
    cd0e:	3710      	adds	r7, #16
    cd10:	46bd      	mov	sp, r7
    cd12:	bd80      	pop	{r7, pc}
    cd14:	20000de0 	.word	0x20000de0

0000cd18 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	b084      	sub	sp, #16
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	4603      	mov	r3, r0
    cd20:	6039      	str	r1, [r7, #0]
    cd22:	71fb      	strb	r3, [r7, #7]
    cd24:	4613      	mov	r3, r2
    cd26:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cd28:	4b12      	ldr	r3, [pc, #72]	; (cd74 <usbdc_request_handler+0x5c>)
    cd2a:	689b      	ldr	r3, [r3, #8]
    cd2c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cd2e:	e019      	b.n	cd64 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cd30:	68fb      	ldr	r3, [r7, #12]
    cd32:	685b      	ldr	r3, [r3, #4]
    cd34:	2b00      	cmp	r3, #0
    cd36:	d012      	beq.n	cd5e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cd38:	68fb      	ldr	r3, [r7, #12]
    cd3a:	685b      	ldr	r3, [r3, #4]
    cd3c:	79ba      	ldrb	r2, [r7, #6]
    cd3e:	79f8      	ldrb	r0, [r7, #7]
    cd40:	6839      	ldr	r1, [r7, #0]
    cd42:	4798      	blx	r3
    cd44:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cd46:	68bb      	ldr	r3, [r7, #8]
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d101      	bne.n	cd50 <usbdc_request_handler+0x38>
				return true;
    cd4c:	2301      	movs	r3, #1
    cd4e:	e00d      	b.n	cd6c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cd50:	68bb      	ldr	r3, [r7, #8]
    cd52:	f113 0f0a 	cmn.w	r3, #10
    cd56:	d002      	beq.n	cd5e <usbdc_request_handler+0x46>
				return -1;
    cd58:	f04f 33ff 	mov.w	r3, #4294967295
    cd5c:	e006      	b.n	cd6c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	681b      	ldr	r3, [r3, #0]
    cd62:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cd64:	68fb      	ldr	r3, [r7, #12]
    cd66:	2b00      	cmp	r3, #0
    cd68:	d1e2      	bne.n	cd30 <usbdc_request_handler+0x18>
	}
	return false;
    cd6a:	2300      	movs	r3, #0
}
    cd6c:	4618      	mov	r0, r3
    cd6e:	3710      	adds	r7, #16
    cd70:	46bd      	mov	sp, r7
    cd72:	bd80      	pop	{r7, pc}
    cd74:	20000de0 	.word	0x20000de0

0000cd78 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cd78:	b580      	push	{r7, lr}
    cd7a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cd7c:	4b01      	ldr	r3, [pc, #4]	; (cd84 <usbd_sof_cb+0xc>)
    cd7e:	4798      	blx	r3
}
    cd80:	bf00      	nop
    cd82:	bd80      	pop	{r7, pc}
    cd84:	0000cca5 	.word	0x0000cca5

0000cd88 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cd88:	b580      	push	{r7, lr}
    cd8a:	b082      	sub	sp, #8
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	4603      	mov	r3, r0
    cd90:	6039      	str	r1, [r7, #0]
    cd92:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cd94:	79fb      	ldrb	r3, [r7, #7]
    cd96:	2200      	movs	r2, #0
    cd98:	6839      	ldr	r1, [r7, #0]
    cd9a:	4618      	mov	r0, r3
    cd9c:	4b14      	ldr	r3, [pc, #80]	; (cdf0 <usbdc_cb_ctl_req+0x68>)
    cd9e:	4798      	blx	r3
    cda0:	4603      	mov	r3, r0
    cda2:	f1b3 3fff 	cmp.w	r3, #4294967295
    cda6:	d00b      	beq.n	cdc0 <usbdc_cb_ctl_req+0x38>
    cda8:	2b01      	cmp	r3, #1
    cdaa:	d007      	beq.n	cdbc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cdac:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cdae:	683b      	ldr	r3, [r7, #0]
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d007      	beq.n	cdca <usbdc_cb_ctl_req+0x42>
    cdba:	e003      	b.n	cdc4 <usbdc_cb_ctl_req+0x3c>
		return true;
    cdbc:	2301      	movs	r3, #1
    cdbe:	e013      	b.n	cde8 <usbdc_cb_ctl_req+0x60>
		return false;
    cdc0:	2300      	movs	r3, #0
    cdc2:	e011      	b.n	cde8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cdc4:	2b80      	cmp	r3, #128	; 0x80
    cdc6:	d007      	beq.n	cdd8 <usbdc_cb_ctl_req+0x50>
    cdc8:	e00d      	b.n	cde6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cdca:	79fb      	ldrb	r3, [r7, #7]
    cdcc:	6839      	ldr	r1, [r7, #0]
    cdce:	4618      	mov	r0, r3
    cdd0:	4b08      	ldr	r3, [pc, #32]	; (cdf4 <usbdc_cb_ctl_req+0x6c>)
    cdd2:	4798      	blx	r3
    cdd4:	4603      	mov	r3, r0
    cdd6:	e007      	b.n	cde8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cdd8:	79fb      	ldrb	r3, [r7, #7]
    cdda:	6839      	ldr	r1, [r7, #0]
    cddc:	4618      	mov	r0, r3
    cdde:	4b06      	ldr	r3, [pc, #24]	; (cdf8 <usbdc_cb_ctl_req+0x70>)
    cde0:	4798      	blx	r3
    cde2:	4603      	mov	r3, r0
    cde4:	e000      	b.n	cde8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cde6:	2300      	movs	r3, #0
	}
}
    cde8:	4618      	mov	r0, r3
    cdea:	3708      	adds	r7, #8
    cdec:	46bd      	mov	sp, r7
    cdee:	bd80      	pop	{r7, pc}
    cdf0:	0000cd19 	.word	0x0000cd19
    cdf4:	0000cbb9 	.word	0x0000cbb9
    cdf8:	0000c7e1 	.word	0x0000c7e1

0000cdfc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b082      	sub	sp, #8
    ce00:	af00      	add	r7, sp, #0
    ce02:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d135      	bne.n	ce78 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ce0c:	687b      	ldr	r3, [r7, #4]
    ce0e:	785b      	ldrb	r3, [r3, #1]
    ce10:	2b05      	cmp	r3, #5
    ce12:	d019      	beq.n	ce48 <usbdc_ctrl_status_end+0x4c>
    ce14:	2b09      	cmp	r3, #9
    ce16:	d000      	beq.n	ce1a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ce18:	e02f      	b.n	ce7a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ce1a:	687b      	ldr	r3, [r7, #4]
    ce1c:	885b      	ldrh	r3, [r3, #2]
    ce1e:	b29b      	uxth	r3, r3
    ce20:	b2da      	uxtb	r2, r3
    ce22:	4b17      	ldr	r3, [pc, #92]	; (ce80 <usbdc_ctrl_status_end+0x84>)
    ce24:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ce26:	687b      	ldr	r3, [r7, #4]
    ce28:	885b      	ldrh	r3, [r3, #2]
    ce2a:	b29b      	uxth	r3, r3
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d001      	beq.n	ce34 <usbdc_ctrl_status_end+0x38>
    ce30:	2204      	movs	r2, #4
    ce32:	e000      	b.n	ce36 <usbdc_ctrl_status_end+0x3a>
    ce34:	2203      	movs	r2, #3
    ce36:	4b12      	ldr	r3, [pc, #72]	; (ce80 <usbdc_ctrl_status_end+0x84>)
    ce38:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce3a:	4b11      	ldr	r3, [pc, #68]	; (ce80 <usbdc_ctrl_status_end+0x84>)
    ce3c:	7e9b      	ldrb	r3, [r3, #26]
    ce3e:	4619      	mov	r1, r3
    ce40:	2001      	movs	r0, #1
    ce42:	4b10      	ldr	r3, [pc, #64]	; (ce84 <usbdc_ctrl_status_end+0x88>)
    ce44:	4798      	blx	r3
		break;
    ce46:	e018      	b.n	ce7a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ce48:	687b      	ldr	r3, [r7, #4]
    ce4a:	885b      	ldrh	r3, [r3, #2]
    ce4c:	b29b      	uxth	r3, r3
    ce4e:	b2db      	uxtb	r3, r3
    ce50:	4618      	mov	r0, r3
    ce52:	4b0d      	ldr	r3, [pc, #52]	; (ce88 <usbdc_ctrl_status_end+0x8c>)
    ce54:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ce56:	687b      	ldr	r3, [r7, #4]
    ce58:	885b      	ldrh	r3, [r3, #2]
    ce5a:	b29b      	uxth	r3, r3
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d001      	beq.n	ce64 <usbdc_ctrl_status_end+0x68>
    ce60:	2203      	movs	r2, #3
    ce62:	e000      	b.n	ce66 <usbdc_ctrl_status_end+0x6a>
    ce64:	2202      	movs	r2, #2
    ce66:	4b06      	ldr	r3, [pc, #24]	; (ce80 <usbdc_ctrl_status_end+0x84>)
    ce68:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce6a:	4b05      	ldr	r3, [pc, #20]	; (ce80 <usbdc_ctrl_status_end+0x84>)
    ce6c:	7e9b      	ldrb	r3, [r3, #26]
    ce6e:	4619      	mov	r1, r3
    ce70:	2001      	movs	r0, #1
    ce72:	4b04      	ldr	r3, [pc, #16]	; (ce84 <usbdc_ctrl_status_end+0x88>)
    ce74:	4798      	blx	r3
		break;
    ce76:	e000      	b.n	ce7a <usbdc_ctrl_status_end+0x7e>
		return;
    ce78:	bf00      	nop
	}
}
    ce7a:	3708      	adds	r7, #8
    ce7c:	46bd      	mov	sp, r7
    ce7e:	bd80      	pop	{r7, pc}
    ce80:	20000de0 	.word	0x20000de0
    ce84:	0000ccd9 	.word	0x0000ccd9
    ce88:	0000ca59 	.word	0x0000ca59

0000ce8c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ce8c:	b580      	push	{r7, lr}
    ce8e:	b082      	sub	sp, #8
    ce90:	af00      	add	r7, sp, #0
    ce92:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ce94:	2201      	movs	r2, #1
    ce96:	6879      	ldr	r1, [r7, #4]
    ce98:	2000      	movs	r0, #0
    ce9a:	4b03      	ldr	r3, [pc, #12]	; (cea8 <usbdc_ctrl_data_end+0x1c>)
    ce9c:	4798      	blx	r3
	return false;
    ce9e:	2300      	movs	r3, #0
}
    cea0:	4618      	mov	r0, r3
    cea2:	3708      	adds	r7, #8
    cea4:	46bd      	mov	sp, r7
    cea6:	bd80      	pop	{r7, pc}
    cea8:	0000cd19 	.word	0x0000cd19

0000ceac <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ceac:	b580      	push	{r7, lr}
    ceae:	b082      	sub	sp, #8
    ceb0:	af00      	add	r7, sp, #0
    ceb2:	4603      	mov	r3, r0
    ceb4:	603a      	str	r2, [r7, #0]
    ceb6:	71fb      	strb	r3, [r7, #7]
    ceb8:	460b      	mov	r3, r1
    ceba:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cebc:	79bb      	ldrb	r3, [r7, #6]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d002      	beq.n	cec8 <usbdc_cb_ctl_done+0x1c>
    cec2:	2b01      	cmp	r3, #1
    cec4:	d004      	beq.n	ced0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cec6:	e008      	b.n	ceda <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cec8:	6838      	ldr	r0, [r7, #0]
    ceca:	4b06      	ldr	r3, [pc, #24]	; (cee4 <usbdc_cb_ctl_done+0x38>)
    cecc:	4798      	blx	r3
		break;
    cece:	e004      	b.n	ceda <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ced0:	6838      	ldr	r0, [r7, #0]
    ced2:	4b05      	ldr	r3, [pc, #20]	; (cee8 <usbdc_cb_ctl_done+0x3c>)
    ced4:	4798      	blx	r3
    ced6:	4603      	mov	r3, r0
    ced8:	e000      	b.n	cedc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ceda:	2300      	movs	r3, #0
}
    cedc:	4618      	mov	r0, r3
    cede:	3708      	adds	r7, #8
    cee0:	46bd      	mov	sp, r7
    cee2:	bd80      	pop	{r7, pc}
    cee4:	0000cdfd 	.word	0x0000cdfd
    cee8:	0000ce8d 	.word	0x0000ce8d

0000ceec <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ceec:	b580      	push	{r7, lr}
    ceee:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cef0:	4b10      	ldr	r3, [pc, #64]	; (cf34 <usbdc_reset+0x48>)
    cef2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cef4:	4b10      	ldr	r3, [pc, #64]	; (cf38 <usbdc_reset+0x4c>)
    cef6:	2202      	movs	r2, #2
    cef8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cefa:	4b0f      	ldr	r3, [pc, #60]	; (cf38 <usbdc_reset+0x4c>)
    cefc:	2200      	movs	r2, #0
    cefe:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cf00:	4b0d      	ldr	r3, [pc, #52]	; (cf38 <usbdc_reset+0x4c>)
    cf02:	2200      	movs	r2, #0
    cf04:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cf06:	2000      	movs	r0, #0
    cf08:	4b0c      	ldr	r3, [pc, #48]	; (cf3c <usbdc_reset+0x50>)
    cf0a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cf0c:	4b0a      	ldr	r3, [pc, #40]	; (cf38 <usbdc_reset+0x4c>)
    cf0e:	7f1b      	ldrb	r3, [r3, #28]
    cf10:	4618      	mov	r0, r3
    cf12:	4b0b      	ldr	r3, [pc, #44]	; (cf40 <usbdc_reset+0x54>)
    cf14:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cf16:	4a0b      	ldr	r2, [pc, #44]	; (cf44 <usbdc_reset+0x58>)
    cf18:	2100      	movs	r1, #0
    cf1a:	2000      	movs	r0, #0
    cf1c:	4b0a      	ldr	r3, [pc, #40]	; (cf48 <usbdc_reset+0x5c>)
    cf1e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cf20:	4a0a      	ldr	r2, [pc, #40]	; (cf4c <usbdc_reset+0x60>)
    cf22:	2102      	movs	r1, #2
    cf24:	2000      	movs	r0, #0
    cf26:	4b08      	ldr	r3, [pc, #32]	; (cf48 <usbdc_reset+0x5c>)
    cf28:	4798      	blx	r3
	usb_d_ep_enable(0);
    cf2a:	2000      	movs	r0, #0
    cf2c:	4b08      	ldr	r3, [pc, #32]	; (cf50 <usbdc_reset+0x64>)
    cf2e:	4798      	blx	r3
}
    cf30:	bf00      	nop
    cf32:	bd80      	pop	{r7, pc}
    cf34:	0000c939 	.word	0x0000c939
    cf38:	20000de0 	.word	0x20000de0
    cf3c:	000035ad 	.word	0x000035ad
    cf40:	000034e9 	.word	0x000034e9
    cf44:	0000cd89 	.word	0x0000cd89
    cf48:	00003901 	.word	0x00003901
    cf4c:	0000cead 	.word	0x0000cead
    cf50:	000035fd 	.word	0x000035fd

0000cf54 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b082      	sub	sp, #8
    cf58:	af00      	add	r7, sp, #0
    cf5a:	4603      	mov	r3, r0
    cf5c:	6039      	str	r1, [r7, #0]
    cf5e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cf60:	79fb      	ldrb	r3, [r7, #7]
    cf62:	2b00      	cmp	r3, #0
    cf64:	d002      	beq.n	cf6c <usbd_event_cb+0x18>
    cf66:	2b01      	cmp	r3, #1
    cf68:	d005      	beq.n	cf76 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cf6a:	e007      	b.n	cf7c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cf6c:	6839      	ldr	r1, [r7, #0]
    cf6e:	2000      	movs	r0, #0
    cf70:	4b04      	ldr	r3, [pc, #16]	; (cf84 <usbd_event_cb+0x30>)
    cf72:	4798      	blx	r3
		break;
    cf74:	e002      	b.n	cf7c <usbd_event_cb+0x28>
		usbdc_reset();
    cf76:	4b04      	ldr	r3, [pc, #16]	; (cf88 <usbd_event_cb+0x34>)
    cf78:	4798      	blx	r3
		break;
    cf7a:	bf00      	nop
	}
}
    cf7c:	bf00      	nop
    cf7e:	3708      	adds	r7, #8
    cf80:	46bd      	mov	sp, r7
    cf82:	bd80      	pop	{r7, pc}
    cf84:	0000ccd9 	.word	0x0000ccd9
    cf88:	0000ceed 	.word	0x0000ceed

0000cf8c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	b088      	sub	sp, #32
    cf90:	af00      	add	r7, sp, #0
    cf92:	60b9      	str	r1, [r7, #8]
    cf94:	607a      	str	r2, [r7, #4]
    cf96:	461a      	mov	r2, r3
    cf98:	4603      	mov	r3, r0
    cf9a:	73fb      	strb	r3, [r7, #15]
    cf9c:	4613      	mov	r3, r2
    cf9e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cfa0:	68bb      	ldr	r3, [r7, #8]
    cfa2:	617b      	str	r3, [r7, #20]
    cfa4:	687b      	ldr	r3, [r7, #4]
    cfa6:	61bb      	str	r3, [r7, #24]
    cfa8:	7bfb      	ldrb	r3, [r7, #15]
    cfaa:	773b      	strb	r3, [r7, #28]
    cfac:	7bbb      	ldrb	r3, [r7, #14]
    cfae:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cfb0:	f107 0314 	add.w	r3, r7, #20
    cfb4:	4618      	mov	r0, r3
    cfb6:	4b03      	ldr	r3, [pc, #12]	; (cfc4 <usbdc_xfer+0x38>)
    cfb8:	4798      	blx	r3
    cfba:	4603      	mov	r3, r0
}
    cfbc:	4618      	mov	r0, r3
    cfbe:	3720      	adds	r7, #32
    cfc0:	46bd      	mov	sp, r7
    cfc2:	bd80      	pop	{r7, pc}
    cfc4:	0000366d 	.word	0x0000366d

0000cfc8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cfc8:	b580      	push	{r7, lr}
    cfca:	b082      	sub	sp, #8
    cfcc:	af00      	add	r7, sp, #0
    cfce:	4603      	mov	r3, r0
    cfd0:	6039      	str	r1, [r7, #0]
    cfd2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cfd4:	79fb      	ldrb	r3, [r7, #7]
    cfd6:	2b01      	cmp	r3, #1
    cfd8:	d009      	beq.n	cfee <usbdc_register_handler+0x26>
    cfda:	2b02      	cmp	r3, #2
    cfdc:	d00c      	beq.n	cff8 <usbdc_register_handler+0x30>
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d000      	beq.n	cfe4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cfe2:	e00e      	b.n	d002 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cfe4:	6839      	ldr	r1, [r7, #0]
    cfe6:	4809      	ldr	r0, [pc, #36]	; (d00c <usbdc_register_handler+0x44>)
    cfe8:	4b09      	ldr	r3, [pc, #36]	; (d010 <usbdc_register_handler+0x48>)
    cfea:	4798      	blx	r3
		break;
    cfec:	e009      	b.n	d002 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cfee:	6839      	ldr	r1, [r7, #0]
    cff0:	4808      	ldr	r0, [pc, #32]	; (d014 <usbdc_register_handler+0x4c>)
    cff2:	4b07      	ldr	r3, [pc, #28]	; (d010 <usbdc_register_handler+0x48>)
    cff4:	4798      	blx	r3
		break;
    cff6:	e004      	b.n	d002 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cff8:	6839      	ldr	r1, [r7, #0]
    cffa:	4807      	ldr	r0, [pc, #28]	; (d018 <usbdc_register_handler+0x50>)
    cffc:	4b04      	ldr	r3, [pc, #16]	; (d010 <usbdc_register_handler+0x48>)
    cffe:	4798      	blx	r3
		break;
    d000:	bf00      	nop
	}
}
    d002:	bf00      	nop
    d004:	3708      	adds	r7, #8
    d006:	46bd      	mov	sp, r7
    d008:	bd80      	pop	{r7, pc}
    d00a:	bf00      	nop
    d00c:	20000de4 	.word	0x20000de4
    d010:	00003a59 	.word	0x00003a59
    d014:	20000de8 	.word	0x20000de8
    d018:	20000dec 	.word	0x20000dec

0000d01c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d01c:	b580      	push	{r7, lr}
    d01e:	b084      	sub	sp, #16
    d020:	af00      	add	r7, sp, #0
    d022:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d024:	687b      	ldr	r3, [r7, #4]
    d026:	2b00      	cmp	r3, #0
    d028:	bf14      	ite	ne
    d02a:	2301      	movne	r3, #1
    d02c:	2300      	moveq	r3, #0
    d02e:	b2db      	uxtb	r3, r3
    d030:	f240 3255 	movw	r2, #853	; 0x355
    d034:	4910      	ldr	r1, [pc, #64]	; (d078 <usbdc_init+0x5c>)
    d036:	4618      	mov	r0, r3
    d038:	4b10      	ldr	r3, [pc, #64]	; (d07c <usbdc_init+0x60>)
    d03a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d03c:	4b10      	ldr	r3, [pc, #64]	; (d080 <usbdc_init+0x64>)
    d03e:	4798      	blx	r3
    d040:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d042:	68fb      	ldr	r3, [r7, #12]
    d044:	2b00      	cmp	r3, #0
    d046:	da01      	bge.n	d04c <usbdc_init+0x30>
		return rc;
    d048:	68fb      	ldr	r3, [r7, #12]
    d04a:	e010      	b.n	d06e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d04c:	2220      	movs	r2, #32
    d04e:	2100      	movs	r1, #0
    d050:	480c      	ldr	r0, [pc, #48]	; (d084 <usbdc_init+0x68>)
    d052:	4b0d      	ldr	r3, [pc, #52]	; (d088 <usbdc_init+0x6c>)
    d054:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d056:	4a0b      	ldr	r2, [pc, #44]	; (d084 <usbdc_init+0x68>)
    d058:	687b      	ldr	r3, [r7, #4]
    d05a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d05c:	490b      	ldr	r1, [pc, #44]	; (d08c <usbdc_init+0x70>)
    d05e:	2000      	movs	r0, #0
    d060:	4b0b      	ldr	r3, [pc, #44]	; (d090 <usbdc_init+0x74>)
    d062:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d064:	490b      	ldr	r1, [pc, #44]	; (d094 <usbdc_init+0x78>)
    d066:	2001      	movs	r0, #1
    d068:	4b09      	ldr	r3, [pc, #36]	; (d090 <usbdc_init+0x74>)
    d06a:	4798      	blx	r3

	return 0;
    d06c:	2300      	movs	r3, #0
}
    d06e:	4618      	mov	r0, r3
    d070:	3710      	adds	r7, #16
    d072:	46bd      	mov	sp, r7
    d074:	bd80      	pop	{r7, pc}
    d076:	bf00      	nop
    d078:	0000f3d0 	.word	0x0000f3d0
    d07c:	0000397d 	.word	0x0000397d
    d080:	000033d5 	.word	0x000033d5
    d084:	20000de0 	.word	0x20000de0
    d088:	0000ed01 	.word	0x0000ed01
    d08c:	0000cd79 	.word	0x0000cd79
    d090:	00003481 	.word	0x00003481
    d094:	0000cf55 	.word	0x0000cf55

0000d098 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d098:	b580      	push	{r7, lr}
    d09a:	b082      	sub	sp, #8
    d09c:	af00      	add	r7, sp, #0
    d09e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d0a0:	6879      	ldr	r1, [r7, #4]
    d0a2:	4803      	ldr	r0, [pc, #12]	; (d0b0 <usbdc_register_function+0x18>)
    d0a4:	4b03      	ldr	r3, [pc, #12]	; (d0b4 <usbdc_register_function+0x1c>)
    d0a6:	4798      	blx	r3
}
    d0a8:	bf00      	nop
    d0aa:	3708      	adds	r7, #8
    d0ac:	46bd      	mov	sp, r7
    d0ae:	bd80      	pop	{r7, pc}
    d0b0:	20000df0 	.word	0x20000df0
    d0b4:	00003a59 	.word	0x00003a59

0000d0b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d0b8:	b580      	push	{r7, lr}
    d0ba:	b082      	sub	sp, #8
    d0bc:	af00      	add	r7, sp, #0
    d0be:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d0c0:	4b0f      	ldr	r3, [pc, #60]	; (d100 <usbdc_start+0x48>)
    d0c2:	7e9b      	ldrb	r3, [r3, #26]
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	d002      	beq.n	d0ce <usbdc_start+0x16>
		return ERR_BUSY;
    d0c8:	f06f 0303 	mvn.w	r3, #3
    d0cc:	e013      	b.n	d0f6 <usbdc_start+0x3e>
	}

	if (desces) {
    d0ce:	687b      	ldr	r3, [r7, #4]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d00e      	beq.n	d0f2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d0d4:	4a0a      	ldr	r2, [pc, #40]	; (d100 <usbdc_start+0x48>)
    d0d6:	687b      	ldr	r3, [r7, #4]
    d0d8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	681b      	ldr	r3, [r3, #0]
    d0de:	79da      	ldrb	r2, [r3, #7]
    d0e0:	4b07      	ldr	r3, [pc, #28]	; (d100 <usbdc_start+0x48>)
    d0e2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d0e4:	4b06      	ldr	r3, [pc, #24]	; (d100 <usbdc_start+0x48>)
    d0e6:	2201      	movs	r2, #1
    d0e8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d0ea:	4b06      	ldr	r3, [pc, #24]	; (d104 <usbdc_start+0x4c>)
    d0ec:	4798      	blx	r3
	return ERR_NONE;
    d0ee:	2300      	movs	r3, #0
    d0f0:	e001      	b.n	d0f6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d0f2:	f06f 0308 	mvn.w	r3, #8
}
    d0f6:	4618      	mov	r0, r3
    d0f8:	3708      	adds	r7, #8
    d0fa:	46bd      	mov	sp, r7
    d0fc:	bd80      	pop	{r7, pc}
    d0fe:	bf00      	nop
    d100:	20000de0 	.word	0x20000de0
    d104:	000034a5 	.word	0x000034a5

0000d108 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d108:	b580      	push	{r7, lr}
    d10a:	af00      	add	r7, sp, #0
	usb_d_attach();
    d10c:	4b01      	ldr	r3, [pc, #4]	; (d114 <usbdc_attach+0xc>)
    d10e:	4798      	blx	r3
}
    d110:	bf00      	nop
    d112:	bd80      	pop	{r7, pc}
    d114:	000034b9 	.word	0x000034b9

0000d118 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d118:	b480      	push	{r7}
    d11a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d11c:	4b03      	ldr	r3, [pc, #12]	; (d12c <usbdc_get_ctrl_buffer+0x14>)
    d11e:	695b      	ldr	r3, [r3, #20]
}
    d120:	4618      	mov	r0, r3
    d122:	46bd      	mov	sp, r7
    d124:	f85d 7b04 	ldr.w	r7, [sp], #4
    d128:	4770      	bx	lr
    d12a:	bf00      	nop
    d12c:	20000de0 	.word	0x20000de0

0000d130 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d130:	b480      	push	{r7}
    d132:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d134:	4b07      	ldr	r3, [pc, #28]	; (d154 <usbdc_get_state+0x24>)
    d136:	7e9b      	ldrb	r3, [r3, #26]
    d138:	f003 0310 	and.w	r3, r3, #16
    d13c:	2b00      	cmp	r3, #0
    d13e:	d001      	beq.n	d144 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d140:	2310      	movs	r3, #16
    d142:	e001      	b.n	d148 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d144:	4b03      	ldr	r3, [pc, #12]	; (d154 <usbdc_get_state+0x24>)
    d146:	7e9b      	ldrb	r3, [r3, #26]
}
    d148:	4618      	mov	r0, r3
    d14a:	46bd      	mov	sp, r7
    d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d150:	4770      	bx	lr
    d152:	bf00      	nop
    d154:	20000de0 	.word	0x20000de0

0000d158 <usb_get_u16>:
{
    d158:	b480      	push	{r7}
    d15a:	b083      	sub	sp, #12
    d15c:	af00      	add	r7, sp, #0
    d15e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d160:	687b      	ldr	r3, [r7, #4]
    d162:	781b      	ldrb	r3, [r3, #0]
    d164:	b29a      	uxth	r2, r3
    d166:	687b      	ldr	r3, [r7, #4]
    d168:	3301      	adds	r3, #1
    d16a:	781b      	ldrb	r3, [r3, #0]
    d16c:	b29b      	uxth	r3, r3
    d16e:	021b      	lsls	r3, r3, #8
    d170:	b29b      	uxth	r3, r3
    d172:	4413      	add	r3, r2
    d174:	b29b      	uxth	r3, r3
}
    d176:	4618      	mov	r0, r3
    d178:	370c      	adds	r7, #12
    d17a:	46bd      	mov	sp, r7
    d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d180:	4770      	bx	lr

0000d182 <usb_desc_len>:
{
    d182:	b480      	push	{r7}
    d184:	b083      	sub	sp, #12
    d186:	af00      	add	r7, sp, #0
    d188:	6078      	str	r0, [r7, #4]
	return desc[0];
    d18a:	687b      	ldr	r3, [r7, #4]
    d18c:	781b      	ldrb	r3, [r3, #0]
}
    d18e:	4618      	mov	r0, r3
    d190:	370c      	adds	r7, #12
    d192:	46bd      	mov	sp, r7
    d194:	f85d 7b04 	ldr.w	r7, [sp], #4
    d198:	4770      	bx	lr

0000d19a <usb_desc_type>:
{
    d19a:	b480      	push	{r7}
    d19c:	b083      	sub	sp, #12
    d19e:	af00      	add	r7, sp, #0
    d1a0:	6078      	str	r0, [r7, #4]
	return desc[1];
    d1a2:	687b      	ldr	r3, [r7, #4]
    d1a4:	3301      	adds	r3, #1
    d1a6:	781b      	ldrb	r3, [r3, #0]
}
    d1a8:	4618      	mov	r0, r3
    d1aa:	370c      	adds	r7, #12
    d1ac:	46bd      	mov	sp, r7
    d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1b2:	4770      	bx	lr

0000d1b4 <usb_desc_next>:
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b082      	sub	sp, #8
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d1bc:	6878      	ldr	r0, [r7, #4]
    d1be:	4b05      	ldr	r3, [pc, #20]	; (d1d4 <usb_desc_next+0x20>)
    d1c0:	4798      	blx	r3
    d1c2:	4603      	mov	r3, r0
    d1c4:	461a      	mov	r2, r3
    d1c6:	687b      	ldr	r3, [r7, #4]
    d1c8:	4413      	add	r3, r2
}
    d1ca:	4618      	mov	r0, r3
    d1cc:	3708      	adds	r7, #8
    d1ce:	46bd      	mov	sp, r7
    d1d0:	bd80      	pop	{r7, pc}
    d1d2:	bf00      	nop
    d1d4:	0000d183 	.word	0x0000d183

0000d1d8 <usb_cfg_desc_total_len>:
{
    d1d8:	b580      	push	{r7, lr}
    d1da:	b082      	sub	sp, #8
    d1dc:	af00      	add	r7, sp, #0
    d1de:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	3302      	adds	r3, #2
    d1e4:	4618      	mov	r0, r3
    d1e6:	4b03      	ldr	r3, [pc, #12]	; (d1f4 <usb_cfg_desc_total_len+0x1c>)
    d1e8:	4798      	blx	r3
    d1ea:	4603      	mov	r3, r0
}
    d1ec:	4618      	mov	r0, r3
    d1ee:	3708      	adds	r7, #8
    d1f0:	46bd      	mov	sp, r7
    d1f2:	bd80      	pop	{r7, pc}
    d1f4:	0000d159 	.word	0x0000d159

0000d1f8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d1f8:	b580      	push	{r7, lr}
    d1fa:	b082      	sub	sp, #8
    d1fc:	af00      	add	r7, sp, #0
    d1fe:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d200:	6878      	ldr	r0, [r7, #4]
    d202:	4b05      	ldr	r3, [pc, #20]	; (d218 <usb_cfg_desc_next+0x20>)
    d204:	4798      	blx	r3
    d206:	4603      	mov	r3, r0
    d208:	461a      	mov	r2, r3
    d20a:	687b      	ldr	r3, [r7, #4]
    d20c:	4413      	add	r3, r2
}
    d20e:	4618      	mov	r0, r3
    d210:	3708      	adds	r7, #8
    d212:	46bd      	mov	sp, r7
    d214:	bd80      	pop	{r7, pc}
    d216:	bf00      	nop
    d218:	0000d1d9 	.word	0x0000d1d9

0000d21c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d21c:	b580      	push	{r7, lr}
    d21e:	b084      	sub	sp, #16
    d220:	af00      	add	r7, sp, #0
    d222:	60f8      	str	r0, [r7, #12]
    d224:	60b9      	str	r1, [r7, #8]
    d226:	4613      	mov	r3, r2
    d228:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d22a:	e015      	b.n	d258 <usb_find_desc+0x3c>
		_desc_len_check();
    d22c:	68f8      	ldr	r0, [r7, #12]
    d22e:	4b0f      	ldr	r3, [pc, #60]	; (d26c <usb_find_desc+0x50>)
    d230:	4798      	blx	r3
    d232:	4603      	mov	r3, r0
    d234:	2b01      	cmp	r3, #1
    d236:	d801      	bhi.n	d23c <usb_find_desc+0x20>
    d238:	2300      	movs	r3, #0
    d23a:	e012      	b.n	d262 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d23c:	68f8      	ldr	r0, [r7, #12]
    d23e:	4b0c      	ldr	r3, [pc, #48]	; (d270 <usb_find_desc+0x54>)
    d240:	4798      	blx	r3
    d242:	4603      	mov	r3, r0
    d244:	461a      	mov	r2, r3
    d246:	79fb      	ldrb	r3, [r7, #7]
    d248:	4293      	cmp	r3, r2
    d24a:	d101      	bne.n	d250 <usb_find_desc+0x34>
			return desc;
    d24c:	68fb      	ldr	r3, [r7, #12]
    d24e:	e008      	b.n	d262 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d250:	68f8      	ldr	r0, [r7, #12]
    d252:	4b08      	ldr	r3, [pc, #32]	; (d274 <usb_find_desc+0x58>)
    d254:	4798      	blx	r3
    d256:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d258:	68fa      	ldr	r2, [r7, #12]
    d25a:	68bb      	ldr	r3, [r7, #8]
    d25c:	429a      	cmp	r2, r3
    d25e:	d3e5      	bcc.n	d22c <usb_find_desc+0x10>
	}
	return NULL;
    d260:	2300      	movs	r3, #0
}
    d262:	4618      	mov	r0, r3
    d264:	3710      	adds	r7, #16
    d266:	46bd      	mov	sp, r7
    d268:	bd80      	pop	{r7, pc}
    d26a:	bf00      	nop
    d26c:	0000d183 	.word	0x0000d183
    d270:	0000d19b 	.word	0x0000d19b
    d274:	0000d1b5 	.word	0x0000d1b5

0000d278 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d278:	b580      	push	{r7, lr}
    d27a:	b082      	sub	sp, #8
    d27c:	af00      	add	r7, sp, #0
    d27e:	6078      	str	r0, [r7, #4]
    d280:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d282:	e019      	b.n	d2b8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d284:	6878      	ldr	r0, [r7, #4]
    d286:	4b12      	ldr	r3, [pc, #72]	; (d2d0 <usb_find_ep_desc+0x58>)
    d288:	4798      	blx	r3
    d28a:	4603      	mov	r3, r0
    d28c:	2b01      	cmp	r3, #1
    d28e:	d801      	bhi.n	d294 <usb_find_ep_desc+0x1c>
    d290:	2300      	movs	r3, #0
    d292:	e018      	b.n	d2c6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d294:	6878      	ldr	r0, [r7, #4]
    d296:	4b0f      	ldr	r3, [pc, #60]	; (d2d4 <usb_find_ep_desc+0x5c>)
    d298:	4798      	blx	r3
    d29a:	4603      	mov	r3, r0
    d29c:	2b04      	cmp	r3, #4
    d29e:	d010      	beq.n	d2c2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d2a0:	6878      	ldr	r0, [r7, #4]
    d2a2:	4b0c      	ldr	r3, [pc, #48]	; (d2d4 <usb_find_ep_desc+0x5c>)
    d2a4:	4798      	blx	r3
    d2a6:	4603      	mov	r3, r0
    d2a8:	2b05      	cmp	r3, #5
    d2aa:	d101      	bne.n	d2b0 <usb_find_ep_desc+0x38>
			return desc;
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	e00a      	b.n	d2c6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d2b0:	6878      	ldr	r0, [r7, #4]
    d2b2:	4b09      	ldr	r3, [pc, #36]	; (d2d8 <usb_find_ep_desc+0x60>)
    d2b4:	4798      	blx	r3
    d2b6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d2b8:	687a      	ldr	r2, [r7, #4]
    d2ba:	683b      	ldr	r3, [r7, #0]
    d2bc:	429a      	cmp	r2, r3
    d2be:	d3e1      	bcc.n	d284 <usb_find_ep_desc+0xc>
    d2c0:	e000      	b.n	d2c4 <usb_find_ep_desc+0x4c>
			break;
    d2c2:	bf00      	nop
	}
	return NULL;
    d2c4:	2300      	movs	r3, #0
}
    d2c6:	4618      	mov	r0, r3
    d2c8:	3708      	adds	r7, #8
    d2ca:	46bd      	mov	sp, r7
    d2cc:	bd80      	pop	{r7, pc}
    d2ce:	bf00      	nop
    d2d0:	0000d183 	.word	0x0000d183
    d2d4:	0000d19b 	.word	0x0000d19b
    d2d8:	0000d1b5 	.word	0x0000d1b5

0000d2dc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d2dc:	b580      	push	{r7, lr}
    d2de:	b084      	sub	sp, #16
    d2e0:	af00      	add	r7, sp, #0
    d2e2:	60f8      	str	r0, [r7, #12]
    d2e4:	60b9      	str	r1, [r7, #8]
    d2e6:	4613      	mov	r3, r2
    d2e8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d2ea:	2202      	movs	r2, #2
    d2ec:	68b9      	ldr	r1, [r7, #8]
    d2ee:	68f8      	ldr	r0, [r7, #12]
    d2f0:	4b15      	ldr	r3, [pc, #84]	; (d348 <usb_find_cfg_desc+0x6c>)
    d2f2:	4798      	blx	r3
    d2f4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d2f6:	68fb      	ldr	r3, [r7, #12]
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	d11a      	bne.n	d332 <usb_find_cfg_desc+0x56>
		return NULL;
    d2fc:	2300      	movs	r3, #0
    d2fe:	e01f      	b.n	d340 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d300:	68f8      	ldr	r0, [r7, #12]
    d302:	4b12      	ldr	r3, [pc, #72]	; (d34c <usb_find_cfg_desc+0x70>)
    d304:	4798      	blx	r3
    d306:	4603      	mov	r3, r0
    d308:	2b01      	cmp	r3, #1
    d30a:	d801      	bhi.n	d310 <usb_find_cfg_desc+0x34>
    d30c:	2300      	movs	r3, #0
    d30e:	e017      	b.n	d340 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d310:	68fb      	ldr	r3, [r7, #12]
    d312:	3301      	adds	r3, #1
    d314:	781b      	ldrb	r3, [r3, #0]
    d316:	2b02      	cmp	r3, #2
    d318:	d110      	bne.n	d33c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d31a:	68fb      	ldr	r3, [r7, #12]
    d31c:	3305      	adds	r3, #5
    d31e:	781b      	ldrb	r3, [r3, #0]
    d320:	79fa      	ldrb	r2, [r7, #7]
    d322:	429a      	cmp	r2, r3
    d324:	d101      	bne.n	d32a <usb_find_cfg_desc+0x4e>
			return desc;
    d326:	68fb      	ldr	r3, [r7, #12]
    d328:	e00a      	b.n	d340 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d32a:	68f8      	ldr	r0, [r7, #12]
    d32c:	4b08      	ldr	r3, [pc, #32]	; (d350 <usb_find_cfg_desc+0x74>)
    d32e:	4798      	blx	r3
    d330:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d332:	68fa      	ldr	r2, [r7, #12]
    d334:	68bb      	ldr	r3, [r7, #8]
    d336:	429a      	cmp	r2, r3
    d338:	d3e2      	bcc.n	d300 <usb_find_cfg_desc+0x24>
    d33a:	e000      	b.n	d33e <usb_find_cfg_desc+0x62>
			break;
    d33c:	bf00      	nop
	}
	return NULL;
    d33e:	2300      	movs	r3, #0
}
    d340:	4618      	mov	r0, r3
    d342:	3710      	adds	r7, #16
    d344:	46bd      	mov	sp, r7
    d346:	bd80      	pop	{r7, pc}
    d348:	0000d21d 	.word	0x0000d21d
    d34c:	0000d183 	.word	0x0000d183
    d350:	0000d1f9 	.word	0x0000d1f9

0000d354 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d354:	b580      	push	{r7, lr}
    d356:	b086      	sub	sp, #24
    d358:	af00      	add	r7, sp, #0
    d35a:	60f8      	str	r0, [r7, #12]
    d35c:	60b9      	str	r1, [r7, #8]
    d35e:	4613      	mov	r3, r2
    d360:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d362:	2300      	movs	r3, #0
    d364:	75fb      	strb	r3, [r7, #23]
    d366:	e020      	b.n	d3aa <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d368:	2203      	movs	r2, #3
    d36a:	68b9      	ldr	r1, [r7, #8]
    d36c:	68f8      	ldr	r0, [r7, #12]
    d36e:	4b13      	ldr	r3, [pc, #76]	; (d3bc <usb_find_str_desc+0x68>)
    d370:	4798      	blx	r3
    d372:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d374:	68fb      	ldr	r3, [r7, #12]
    d376:	2b00      	cmp	r3, #0
    d378:	d015      	beq.n	d3a6 <usb_find_str_desc+0x52>
			_desc_len_check();
    d37a:	68f8      	ldr	r0, [r7, #12]
    d37c:	4b10      	ldr	r3, [pc, #64]	; (d3c0 <usb_find_str_desc+0x6c>)
    d37e:	4798      	blx	r3
    d380:	4603      	mov	r3, r0
    d382:	2b01      	cmp	r3, #1
    d384:	d801      	bhi.n	d38a <usb_find_str_desc+0x36>
    d386:	2300      	movs	r3, #0
    d388:	e014      	b.n	d3b4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d38a:	7dfa      	ldrb	r2, [r7, #23]
    d38c:	79fb      	ldrb	r3, [r7, #7]
    d38e:	429a      	cmp	r2, r3
    d390:	d101      	bne.n	d396 <usb_find_str_desc+0x42>
				return desc;
    d392:	68fb      	ldr	r3, [r7, #12]
    d394:	e00e      	b.n	d3b4 <usb_find_str_desc+0x60>
			}
			i++;
    d396:	7dfb      	ldrb	r3, [r7, #23]
    d398:	3301      	adds	r3, #1
    d39a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d39c:	68f8      	ldr	r0, [r7, #12]
    d39e:	4b09      	ldr	r3, [pc, #36]	; (d3c4 <usb_find_str_desc+0x70>)
    d3a0:	4798      	blx	r3
    d3a2:	60f8      	str	r0, [r7, #12]
    d3a4:	e001      	b.n	d3aa <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d3a6:	2300      	movs	r3, #0
    d3a8:	e004      	b.n	d3b4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d3aa:	68fa      	ldr	r2, [r7, #12]
    d3ac:	68bb      	ldr	r3, [r7, #8]
    d3ae:	429a      	cmp	r2, r3
    d3b0:	d3da      	bcc.n	d368 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d3b2:	2300      	movs	r3, #0
}
    d3b4:	4618      	mov	r0, r3
    d3b6:	3718      	adds	r7, #24
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}
    d3bc:	0000d21d 	.word	0x0000d21d
    d3c0:	0000d183 	.word	0x0000d183
    d3c4:	0000d1b5 	.word	0x0000d1b5

0000d3c8 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d3c8:	b480      	push	{r7}
    d3ca:	b083      	sub	sp, #12
    d3cc:	af00      	add	r7, sp, #0
    d3ce:	6078      	str	r0, [r7, #4]
    d3d0:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d3d2:	687b      	ldr	r3, [r7, #4]
    d3d4:	683a      	ldr	r2, [r7, #0]
    d3d6:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	4618      	mov	r0, r3
    d3dc:	370c      	adds	r7, #12
    d3de:	46bd      	mov	sp, r7
    d3e0:	bc80      	pop	{r7}
    d3e2:	4770      	bx	lr

0000d3e4 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d3e4:	b480      	push	{r7}
    d3e6:	b083      	sub	sp, #12
    d3e8:	af00      	add	r7, sp, #0
    d3ea:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	4618      	mov	r0, r3
    d3f0:	370c      	adds	r7, #12
    d3f2:	46bd      	mov	sp, r7
    d3f4:	bc80      	pop	{r7}
    d3f6:	4770      	bx	lr

0000d3f8 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d3f8:	b580      	push	{r7, lr}
    d3fa:	b082      	sub	sp, #8
    d3fc:	af00      	add	r7, sp, #0
    d3fe:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	4a23      	ldr	r2, [pc, #140]	; (d490 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d404:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	4a21      	ldr	r2, [pc, #132]	; (d490 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d40a:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	691a      	ldr	r2, [r3, #16]
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	330c      	adds	r3, #12
    d414:	4619      	mov	r1, r3
    d416:	4610      	mov	r0, r2
    d418:	4b1e      	ldr	r3, [pc, #120]	; (d494 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d41a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d41c:	687b      	ldr	r3, [r7, #4]
    d41e:	691b      	ldr	r3, [r3, #16]
    d420:	4618      	mov	r0, r3
    d422:	4b1d      	ldr	r3, [pc, #116]	; (d498 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d424:	4798      	blx	r3
    d426:	4603      	mov	r3, r0
    d428:	b2da      	uxtb	r2, r3
    d42a:	687b      	ldr	r3, [r7, #4]
    d42c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	7d1b      	ldrb	r3, [r3, #20]
    d432:	2b00      	cmp	r3, #0
    d434:	bf0c      	ite	eq
    d436:	2301      	moveq	r3, #1
    d438:	2300      	movne	r3, #0
    d43a:	b2da      	uxtb	r2, r3
    d43c:	687b      	ldr	r3, [r7, #4]
    d43e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d440:	687b      	ldr	r3, [r7, #4]
    d442:	7a5b      	ldrb	r3, [r3, #9]
    d444:	b2db      	uxtb	r3, r3
    d446:	2b00      	cmp	r3, #0
    d448:	d116      	bne.n	d478 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	691b      	ldr	r3, [r3, #16]
    d44e:	4618      	mov	r0, r3
    d450:	4b12      	ldr	r3, [pc, #72]	; (d49c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d452:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	691b      	ldr	r3, [r3, #16]
    d458:	4618      	mov	r0, r3
    d45a:	4b0f      	ldr	r3, [pc, #60]	; (d498 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d45c:	4798      	blx	r3
    d45e:	4603      	mov	r3, r0
    d460:	b2da      	uxtb	r2, r3
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d466:	687b      	ldr	r3, [r7, #4]
    d468:	7d1b      	ldrb	r3, [r3, #20]
    d46a:	2b00      	cmp	r3, #0
    d46c:	bf0c      	ite	eq
    d46e:	2301      	moveq	r3, #1
    d470:	2300      	movne	r3, #0
    d472:	b2da      	uxtb	r2, r3
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    d478:	687b      	ldr	r3, [r7, #4]
    d47a:	7a5b      	ldrb	r3, [r3, #9]
    d47c:	b2da      	uxtb	r2, r3
    d47e:	687b      	ldr	r3, [r7, #4]
    d480:	721a      	strb	r2, [r3, #8]
	return isOK;
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	7a5b      	ldrb	r3, [r3, #9]
    d486:	b2db      	uxtb	r3, r3
	
}
    d488:	4618      	mov	r0, r3
    d48a:	3708      	adds	r7, #8
    d48c:	46bd      	mov	sp, r7
    d48e:	bd80      	pop	{r7, pc}
    d490:	20000e00 	.word	0x20000e00
    d494:	00002777 	.word	0x00002777
    d498:	000026fd 	.word	0x000026fd
    d49c:	0000271d 	.word	0x0000271d

0000d4a0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d4a0:	b580      	push	{r7, lr}
    d4a2:	b082      	sub	sp, #8
    d4a4:	af00      	add	r7, sp, #0
    d4a6:	6078      	str	r0, [r7, #4]
    d4a8:	460b      	mov	r3, r1
    d4aa:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	691b      	ldr	r3, [r3, #16]
    d4b0:	78fa      	ldrb	r2, [r7, #3]
    d4b2:	b211      	sxth	r1, r2
    d4b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d4b8:	4618      	mov	r0, r3
    d4ba:	4b03      	ldr	r3, [pc, #12]	; (d4c8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d4bc:	4798      	blx	r3
    d4be:	4603      	mov	r3, r0
}
    d4c0:	4618      	mov	r0, r3
    d4c2:	3708      	adds	r7, #8
    d4c4:	46bd      	mov	sp, r7
    d4c6:	bd80      	pop	{r7, pc}
    d4c8:	0000273d 	.word	0x0000273d

0000d4cc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d4cc:	b580      	push	{r7, lr}
    d4ce:	b086      	sub	sp, #24
    d4d0:	af00      	add	r7, sp, #0
    d4d2:	60f8      	str	r0, [r7, #12]
    d4d4:	60b9      	str	r1, [r7, #8]
    d4d6:	4613      	mov	r3, r2
    d4d8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d4da:	68fb      	ldr	r3, [r7, #12]
    d4dc:	68db      	ldr	r3, [r3, #12]
    d4de:	88fa      	ldrh	r2, [r7, #6]
    d4e0:	68b9      	ldr	r1, [r7, #8]
    d4e2:	4618      	mov	r0, r3
    d4e4:	4b03      	ldr	r3, [pc, #12]	; (d4f4 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d4e6:	4798      	blx	r3
    d4e8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d4ea:	697b      	ldr	r3, [r7, #20]
}
    d4ec:	4618      	mov	r0, r3
    d4ee:	3718      	adds	r7, #24
    d4f0:	46bd      	mov	sp, r7
    d4f2:	bd80      	pop	{r7, pc}
    d4f4:	0000eaa9 	.word	0x0000eaa9

0000d4f8 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b086      	sub	sp, #24
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	60f8      	str	r0, [r7, #12]
    d500:	60b9      	str	r1, [r7, #8]
    d502:	4613      	mov	r3, r2
    d504:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d506:	68fb      	ldr	r3, [r7, #12]
    d508:	68db      	ldr	r3, [r3, #12]
    d50a:	88fa      	ldrh	r2, [r7, #6]
    d50c:	68b9      	ldr	r1, [r7, #8]
    d50e:	4618      	mov	r0, r3
    d510:	4b03      	ldr	r3, [pc, #12]	; (d520 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d512:	4798      	blx	r3
    d514:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d516:	697b      	ldr	r3, [r7, #20]
}
    d518:	4618      	mov	r0, r3
    d51a:	3718      	adds	r7, #24
    d51c:	46bd      	mov	sp, r7
    d51e:	bd80      	pop	{r7, pc}
    d520:	0000eaf9 	.word	0x0000eaf9

0000d524 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d524:	b480      	push	{r7}
    d526:	b083      	sub	sp, #12
    d528:	af00      	add	r7, sp, #0
    d52a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	4618      	mov	r0, r3
    d530:	370c      	adds	r7, #12
    d532:	46bd      	mov	sp, r7
    d534:	bc80      	pop	{r7}
    d536:	4770      	bx	lr

0000d538 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d538:	b480      	push	{r7}
    d53a:	b083      	sub	sp, #12
    d53c:	af00      	add	r7, sp, #0
    d53e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	4618      	mov	r0, r3
    d544:	370c      	adds	r7, #12
    d546:	46bd      	mov	sp, r7
    d548:	bc80      	pop	{r7}
    d54a:	4770      	bx	lr

0000d54c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d54c:	b480      	push	{r7}
    d54e:	b085      	sub	sp, #20
    d550:	af00      	add	r7, sp, #0
    d552:	60f8      	str	r0, [r7, #12]
    d554:	460b      	mov	r3, r1
    d556:	607a      	str	r2, [r7, #4]
    d558:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	681a      	ldr	r2, [r3, #0]
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    d562:	687b      	ldr	r3, [r7, #4]
    d564:	685a      	ldr	r2, [r3, #4]
    d566:	68fb      	ldr	r3, [r7, #12]
    d568:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    d56a:	68fb      	ldr	r3, [r7, #12]
    d56c:	7afa      	ldrb	r2, [r7, #11]
    d56e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    d570:	68fb      	ldr	r3, [r7, #12]
    d572:	687a      	ldr	r2, [r7, #4]
    d574:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    d576:	68fb      	ldr	r3, [r7, #12]
    d578:	68db      	ldr	r3, [r3, #12]
    d57a:	7a5b      	ldrb	r3, [r3, #9]
    d57c:	b2da      	uxtb	r2, r3
    d57e:	68fb      	ldr	r3, [r7, #12]
    d580:	719a      	strb	r2, [r3, #6]
	return isOK;
    d582:	68fb      	ldr	r3, [r7, #12]
    d584:	799b      	ldrb	r3, [r3, #6]
    d586:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d588:	4618      	mov	r0, r3
    d58a:	3714      	adds	r7, #20
    d58c:	46bd      	mov	sp, r7
    d58e:	bc80      	pop	{r7}
    d590:	4770      	bx	lr

0000d592 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d592:	b480      	push	{r7}
    d594:	b083      	sub	sp, #12
    d596:	af00      	add	r7, sp, #0
    d598:	6078      	str	r0, [r7, #4]
    d59a:	460b      	mov	r3, r1
    d59c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d59e:	78fb      	ldrb	r3, [r7, #3]
    d5a0:	f003 0307 	and.w	r3, r3, #7
    d5a4:	b2db      	uxtb	r3, r3
}
    d5a6:	4618      	mov	r0, r3
    d5a8:	370c      	adds	r7, #12
    d5aa:	46bd      	mov	sp, r7
    d5ac:	bc80      	pop	{r7}
    d5ae:	4770      	bx	lr

0000d5b0 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d5b0:	b480      	push	{r7}
    d5b2:	b083      	sub	sp, #12
    d5b4:	af00      	add	r7, sp, #0
    d5b6:	6078      	str	r0, [r7, #4]
    d5b8:	4608      	mov	r0, r1
    d5ba:	4611      	mov	r1, r2
    d5bc:	461a      	mov	r2, r3
    d5be:	4603      	mov	r3, r0
    d5c0:	70fb      	strb	r3, [r7, #3]
    d5c2:	460b      	mov	r3, r1
    d5c4:	70bb      	strb	r3, [r7, #2]
    d5c6:	4613      	mov	r3, r2
    d5c8:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d5ca:	78fb      	ldrb	r3, [r7, #3]
    d5cc:	2b07      	cmp	r3, #7
    d5ce:	dc01      	bgt.n	d5d4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d5d0:	78bb      	ldrb	r3, [r7, #2]
    d5d2:	e000      	b.n	d5d6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d5d4:	787b      	ldrb	r3, [r7, #1]
}
    d5d6:	4618      	mov	r0, r3
    d5d8:	370c      	adds	r7, #12
    d5da:	46bd      	mov	sp, r7
    d5dc:	bc80      	pop	{r7}
    d5de:	4770      	bx	lr

0000d5e0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d5e0:	b580      	push	{r7, lr}
    d5e2:	b082      	sub	sp, #8
    d5e4:	af00      	add	r7, sp, #0
    d5e6:	6078      	str	r0, [r7, #4]
    d5e8:	460b      	mov	r3, r1
    d5ea:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d5ec:	687b      	ldr	r3, [r7, #4]
    d5ee:	68da      	ldr	r2, [r3, #12]
    d5f0:	687b      	ldr	r3, [r7, #4]
    d5f2:	7a1b      	ldrb	r3, [r3, #8]
    d5f4:	4619      	mov	r1, r3
    d5f6:	4610      	mov	r0, r2
    d5f8:	4b0a      	ldr	r3, [pc, #40]	; (d624 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d5fa:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d5fc:	687b      	ldr	r3, [r7, #4]
    d5fe:	68db      	ldr	r3, [r3, #12]
    d600:	1cf9      	adds	r1, r7, #3
    d602:	2201      	movs	r2, #1
    d604:	4618      	mov	r0, r3
    d606:	4b08      	ldr	r3, [pc, #32]	; (d628 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d608:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d60a:	687b      	ldr	r3, [r7, #4]
    d60c:	68db      	ldr	r3, [r3, #12]
    d60e:	6879      	ldr	r1, [r7, #4]
    d610:	2201      	movs	r2, #1
    d612:	4618      	mov	r0, r3
    d614:	4b05      	ldr	r3, [pc, #20]	; (d62c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d616:	4798      	blx	r3

	return registerValue;
    d618:	687b      	ldr	r3, [r7, #4]
    d61a:	781b      	ldrb	r3, [r3, #0]
}
    d61c:	4618      	mov	r0, r3
    d61e:	3708      	adds	r7, #8
    d620:	46bd      	mov	sp, r7
    d622:	bd80      	pop	{r7, pc}
    d624:	0000d4a1 	.word	0x0000d4a1
    d628:	0000d4cd 	.word	0x0000d4cd
    d62c:	0000d4f9 	.word	0x0000d4f9

0000d630 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d630:	b580      	push	{r7, lr}
    d632:	b084      	sub	sp, #16
    d634:	af00      	add	r7, sp, #0
    d636:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d638:	687b      	ldr	r3, [r7, #4]
    d63a:	68da      	ldr	r2, [r3, #12]
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	7a1b      	ldrb	r3, [r3, #8]
    d640:	4619      	mov	r1, r3
    d642:	4610      	mov	r0, r2
    d644:	4b06      	ldr	r3, [pc, #24]	; (d660 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d646:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d648:	2109      	movs	r1, #9
    d64a:	6878      	ldr	r0, [r7, #4]
    d64c:	4b05      	ldr	r3, [pc, #20]	; (d664 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d64e:	4798      	blx	r3
    d650:	4603      	mov	r3, r0
    d652:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d654:	7bfb      	ldrb	r3, [r7, #15]
}
    d656:	4618      	mov	r0, r3
    d658:	3710      	adds	r7, #16
    d65a:	46bd      	mov	sp, r7
    d65c:	bd80      	pop	{r7, pc}
    d65e:	bf00      	nop
    d660:	0000d4a1 	.word	0x0000d4a1
    d664:	0000d5e1 	.word	0x0000d5e1

0000d668 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d668:	b580      	push	{r7, lr}
    d66a:	b084      	sub	sp, #16
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
    d670:	460b      	mov	r3, r1
    d672:	70fb      	strb	r3, [r7, #3]
    d674:	4613      	mov	r3, r2
    d676:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	68da      	ldr	r2, [r3, #12]
    d67c:	687b      	ldr	r3, [r7, #4]
    d67e:	7a1b      	ldrb	r3, [r3, #8]
    d680:	4619      	mov	r1, r3
    d682:	4610      	mov	r0, r2
    d684:	4b09      	ldr	r3, [pc, #36]	; (d6ac <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d686:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d688:	78fb      	ldrb	r3, [r7, #3]
    d68a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d68c:	78bb      	ldrb	r3, [r7, #2]
    d68e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	68db      	ldr	r3, [r3, #12]
    d694:	f107 010c 	add.w	r1, r7, #12
    d698:	2202      	movs	r2, #2
    d69a:	4618      	mov	r0, r3
    d69c:	4b04      	ldr	r3, [pc, #16]	; (d6b0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d69e:	4798      	blx	r3
    d6a0:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d6a2:	4618      	mov	r0, r3
    d6a4:	3710      	adds	r7, #16
    d6a6:	46bd      	mov	sp, r7
    d6a8:	bd80      	pop	{r7, pc}
    d6aa:	bf00      	nop
    d6ac:	0000d4a1 	.word	0x0000d4a1
    d6b0:	0000d4cd 	.word	0x0000d4cd

0000d6b4 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d6b4:	b580      	push	{r7, lr}
    d6b6:	b084      	sub	sp, #16
    d6b8:	af00      	add	r7, sp, #0
    d6ba:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d6bc:	2300      	movs	r3, #0
    d6be:	73fb      	strb	r3, [r7, #15]
    d6c0:	7bfb      	ldrb	r3, [r7, #15]
    d6c2:	2b07      	cmp	r3, #7
    d6c4:	dc0f      	bgt.n	d6e6 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d6c6:	7bfb      	ldrb	r3, [r7, #15]
    d6c8:	2201      	movs	r2, #1
    d6ca:	4619      	mov	r1, r3
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	4b08      	ldr	r3, [pc, #32]	; (d6f0 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d6d0:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d6d2:	7bfb      	ldrb	r3, [r7, #15]
    d6d4:	2201      	movs	r2, #1
    d6d6:	4619      	mov	r1, r3
    d6d8:	6878      	ldr	r0, [r7, #4]
    d6da:	4b06      	ldr	r3, [pc, #24]	; (d6f4 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d6dc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d6de:	7bfb      	ldrb	r3, [r7, #15]
    d6e0:	3301      	adds	r3, #1
    d6e2:	73fb      	strb	r3, [r7, #15]
    d6e4:	e7ec      	b.n	d6c0 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d6e6:	bf00      	nop
    d6e8:	3710      	adds	r7, #16
    d6ea:	46bd      	mov	sp, r7
    d6ec:	bd80      	pop	{r7, pc}
    d6ee:	bf00      	nop
    d6f0:	0000d7b9 	.word	0x0000d7b9
    d6f4:	0000d89d 	.word	0x0000d89d

0000d6f8 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d6f8:	b580      	push	{r7, lr}
    d6fa:	b084      	sub	sp, #16
    d6fc:	af00      	add	r7, sp, #0
    d6fe:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d700:	2300      	movs	r3, #0
    d702:	73fb      	strb	r3, [r7, #15]
    d704:	7bfb      	ldrb	r3, [r7, #15]
    d706:	2b07      	cmp	r3, #7
    d708:	dc09      	bgt.n	d71e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d70a:	7bfb      	ldrb	r3, [r7, #15]
    d70c:	2200      	movs	r2, #0
    d70e:	4619      	mov	r1, r3
    d710:	6878      	ldr	r0, [r7, #4]
    d712:	4b05      	ldr	r3, [pc, #20]	; (d728 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d714:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d716:	7bfb      	ldrb	r3, [r7, #15]
    d718:	3301      	adds	r3, #1
    d71a:	73fb      	strb	r3, [r7, #15]
    d71c:	e7f2      	b.n	d704 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d71e:	bf00      	nop
    d720:	3710      	adds	r7, #16
    d722:	46bd      	mov	sp, r7
    d724:	bd80      	pop	{r7, pc}
    d726:	bf00      	nop
    d728:	0000d7b9 	.word	0x0000d7b9

0000d72c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d72c:	b580      	push	{r7, lr}
    d72e:	b084      	sub	sp, #16
    d730:	af00      	add	r7, sp, #0
    d732:	6078      	str	r0, [r7, #4]
    d734:	4608      	mov	r0, r1
    d736:	4611      	mov	r1, r2
    d738:	461a      	mov	r2, r3
    d73a:	4603      	mov	r3, r0
    d73c:	70fb      	strb	r3, [r7, #3]
    d73e:	460b      	mov	r3, r1
    d740:	70bb      	strb	r3, [r7, #2]
    d742:	4613      	mov	r3, r2
    d744:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d746:	787b      	ldrb	r3, [r7, #1]
    d748:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d74a:	78fb      	ldrb	r3, [r7, #3]
    d74c:	4619      	mov	r1, r3
    d74e:	6878      	ldr	r0, [r7, #4]
    d750:	4b16      	ldr	r3, [pc, #88]	; (d7ac <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d752:	4798      	blx	r3
    d754:	4603      	mov	r3, r0
    d756:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d758:	7bfb      	ldrb	r3, [r7, #15]
    d75a:	4619      	mov	r1, r3
    d75c:	6878      	ldr	r0, [r7, #4]
    d75e:	4b14      	ldr	r3, [pc, #80]	; (d7b0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d760:	4798      	blx	r3
    d762:	4603      	mov	r3, r0
    d764:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d766:	78bb      	ldrb	r3, [r7, #2]
    d768:	2b00      	cmp	r3, #0
    d76a:	d009      	beq.n	d780 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d76c:	7bba      	ldrb	r2, [r7, #14]
    d76e:	7b7b      	ldrb	r3, [r7, #13]
    d770:	4619      	mov	r1, r3
    d772:	2301      	movs	r3, #1
    d774:	408b      	lsls	r3, r1
    d776:	b2db      	uxtb	r3, r3
    d778:	4313      	orrs	r3, r2
    d77a:	b2db      	uxtb	r3, r3
    d77c:	73bb      	strb	r3, [r7, #14]
    d77e:	e00a      	b.n	d796 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d780:	7bba      	ldrb	r2, [r7, #14]
    d782:	7b7b      	ldrb	r3, [r7, #13]
    d784:	4619      	mov	r1, r3
    d786:	2301      	movs	r3, #1
    d788:	408b      	lsls	r3, r1
    d78a:	b2db      	uxtb	r3, r3
    d78c:	43db      	mvns	r3, r3
    d78e:	b2db      	uxtb	r3, r3
    d790:	4013      	ands	r3, r2
    d792:	b2db      	uxtb	r3, r3
    d794:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d796:	7bba      	ldrb	r2, [r7, #14]
    d798:	7bfb      	ldrb	r3, [r7, #15]
    d79a:	4619      	mov	r1, r3
    d79c:	6878      	ldr	r0, [r7, #4]
    d79e:	4b05      	ldr	r3, [pc, #20]	; (d7b4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d7a0:	4798      	blx	r3
}
    d7a2:	bf00      	nop
    d7a4:	3710      	adds	r7, #16
    d7a6:	46bd      	mov	sp, r7
    d7a8:	bd80      	pop	{r7, pc}
    d7aa:	bf00      	nop
    d7ac:	0000d593 	.word	0x0000d593
    d7b0:	0000d5e1 	.word	0x0000d5e1
    d7b4:	0000d669 	.word	0x0000d669

0000d7b8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d7b8:	b590      	push	{r4, r7, lr}
    d7ba:	b085      	sub	sp, #20
    d7bc:	af02      	add	r7, sp, #8
    d7be:	6078      	str	r0, [r7, #4]
    d7c0:	460b      	mov	r3, r1
    d7c2:	70fb      	strb	r3, [r7, #3]
    d7c4:	4613      	mov	r3, r2
    d7c6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d7c8:	78bb      	ldrb	r3, [r7, #2]
    d7ca:	2b01      	cmp	r3, #1
    d7cc:	bf0c      	ite	eq
    d7ce:	2301      	moveq	r3, #1
    d7d0:	2300      	movne	r3, #0
    d7d2:	b2db      	uxtb	r3, r3
    d7d4:	461a      	mov	r2, r3
    d7d6:	78f9      	ldrb	r1, [r7, #3]
    d7d8:	2300      	movs	r3, #0
    d7da:	9300      	str	r3, [sp, #0]
    d7dc:	2300      	movs	r3, #0
    d7de:	6878      	ldr	r0, [r7, #4]
    d7e0:	4c02      	ldr	r4, [pc, #8]	; (d7ec <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d7e2:	47a0      	blx	r4
}
    d7e4:	bf00      	nop
    d7e6:	370c      	adds	r7, #12
    d7e8:	46bd      	mov	sp, r7
    d7ea:	bd90      	pop	{r4, r7, pc}
    d7ec:	0000d72d 	.word	0x0000d72d

0000d7f0 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d7f0:	b590      	push	{r4, r7, lr}
    d7f2:	b085      	sub	sp, #20
    d7f4:	af00      	add	r7, sp, #0
    d7f6:	6078      	str	r0, [r7, #4]
    d7f8:	460b      	mov	r3, r1
    d7fa:	70fb      	strb	r3, [r7, #3]
    d7fc:	4613      	mov	r3, r2
    d7fe:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d800:	78fb      	ldrb	r3, [r7, #3]
    d802:	4619      	mov	r1, r3
    d804:	6878      	ldr	r0, [r7, #4]
    d806:	4b21      	ldr	r3, [pc, #132]	; (d88c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d808:	4798      	blx	r3
    d80a:	4603      	mov	r3, r0
    d80c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d80e:	78f9      	ldrb	r1, [r7, #3]
    d810:	230a      	movs	r3, #10
    d812:	220a      	movs	r2, #10
    d814:	6878      	ldr	r0, [r7, #4]
    d816:	4c1e      	ldr	r4, [pc, #120]	; (d890 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d818:	47a0      	blx	r4
    d81a:	4603      	mov	r3, r0
    d81c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d81e:	7bfb      	ldrb	r3, [r7, #15]
    d820:	4619      	mov	r1, r3
    d822:	6878      	ldr	r0, [r7, #4]
    d824:	4b1b      	ldr	r3, [pc, #108]	; (d894 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d826:	4798      	blx	r3
    d828:	4603      	mov	r3, r0
    d82a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d82c:	78bb      	ldrb	r3, [r7, #2]
    d82e:	2b00      	cmp	r3, #0
    d830:	d009      	beq.n	d846 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d832:	7bba      	ldrb	r2, [r7, #14]
    d834:	7b7b      	ldrb	r3, [r7, #13]
    d836:	4619      	mov	r1, r3
    d838:	2301      	movs	r3, #1
    d83a:	408b      	lsls	r3, r1
    d83c:	b2db      	uxtb	r3, r3
    d83e:	4313      	orrs	r3, r2
    d840:	b2db      	uxtb	r3, r3
    d842:	73bb      	strb	r3, [r7, #14]
    d844:	e00a      	b.n	d85c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d846:	7bba      	ldrb	r2, [r7, #14]
    d848:	7b7b      	ldrb	r3, [r7, #13]
    d84a:	4619      	mov	r1, r3
    d84c:	2301      	movs	r3, #1
    d84e:	408b      	lsls	r3, r1
    d850:	b2db      	uxtb	r3, r3
    d852:	43db      	mvns	r3, r3
    d854:	b2db      	uxtb	r3, r3
    d856:	4013      	ands	r3, r2
    d858:	b2db      	uxtb	r3, r3
    d85a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d85c:	78f9      	ldrb	r1, [r7, #3]
    d85e:	2309      	movs	r3, #9
    d860:	2209      	movs	r2, #9
    d862:	6878      	ldr	r0, [r7, #4]
    d864:	4c0a      	ldr	r4, [pc, #40]	; (d890 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d866:	47a0      	blx	r4
    d868:	4603      	mov	r3, r0
    d86a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d86c:	7bba      	ldrb	r2, [r7, #14]
    d86e:	7bfb      	ldrb	r3, [r7, #15]
    d870:	4619      	mov	r1, r3
    d872:	6878      	ldr	r0, [r7, #4]
    d874:	4b08      	ldr	r3, [pc, #32]	; (d898 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d876:	4798      	blx	r3
    d878:	4603      	mov	r3, r0
    d87a:	2b00      	cmp	r3, #0
    d87c:	bf0c      	ite	eq
    d87e:	2301      	moveq	r3, #1
    d880:	2300      	movne	r3, #0
    d882:	b2db      	uxtb	r3, r3
}
    d884:	4618      	mov	r0, r3
    d886:	3714      	adds	r7, #20
    d888:	46bd      	mov	sp, r7
    d88a:	bd90      	pop	{r4, r7, pc}
    d88c:	0000d593 	.word	0x0000d593
    d890:	0000d5b1 	.word	0x0000d5b1
    d894:	0000d5e1 	.word	0x0000d5e1
    d898:	0000d669 	.word	0x0000d669

0000d89c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d89c:	b590      	push	{r4, r7, lr}
    d89e:	b085      	sub	sp, #20
    d8a0:	af02      	add	r7, sp, #8
    d8a2:	6078      	str	r0, [r7, #4]
    d8a4:	460b      	mov	r3, r1
    d8a6:	70fb      	strb	r3, [r7, #3]
    d8a8:	4613      	mov	r3, r2
    d8aa:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d8ac:	78ba      	ldrb	r2, [r7, #2]
    d8ae:	78f9      	ldrb	r1, [r7, #3]
    d8b0:	2306      	movs	r3, #6
    d8b2:	9300      	str	r3, [sp, #0]
    d8b4:	2306      	movs	r3, #6
    d8b6:	6878      	ldr	r0, [r7, #4]
    d8b8:	4c02      	ldr	r4, [pc, #8]	; (d8c4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d8ba:	47a0      	blx	r4
}
    d8bc:	bf00      	nop
    d8be:	370c      	adds	r7, #12
    d8c0:	46bd      	mov	sp, r7
    d8c2:	bd90      	pop	{r4, r7, pc}
    d8c4:	0000d72d 	.word	0x0000d72d

0000d8c8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d8c8:	b480      	push	{r7}
    d8ca:	b083      	sub	sp, #12
    d8cc:	af00      	add	r7, sp, #0
    d8ce:	6078      	str	r0, [r7, #4]
    d8d0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	683a      	ldr	r2, [r7, #0]
    d8d6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d8d8:	687b      	ldr	r3, [r7, #4]
    d8da:	68db      	ldr	r3, [r3, #12]
    d8dc:	2200      	movs	r2, #0
    d8de:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d8e0:	4a06      	ldr	r2, [pc, #24]	; (d8fc <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d8e6:	687b      	ldr	r3, [r7, #4]
    d8e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d8ec:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d8ee:	687b      	ldr	r3, [r7, #4]
    d8f0:	4618      	mov	r0, r3
    d8f2:	370c      	adds	r7, #12
    d8f4:	46bd      	mov	sp, r7
    d8f6:	bc80      	pop	{r7}
    d8f8:	4770      	bx	lr
    d8fa:	bf00      	nop
    d8fc:	20000f80 	.word	0x20000f80

0000d900 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d900:	b480      	push	{r7}
    d902:	b083      	sub	sp, #12
    d904:	af00      	add	r7, sp, #0
    d906:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d908:	687b      	ldr	r3, [r7, #4]
    d90a:	2200      	movs	r2, #0
    d90c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d90e:	687b      	ldr	r3, [r7, #4]
    d910:	4618      	mov	r0, r3
    d912:	370c      	adds	r7, #12
    d914:	46bd      	mov	sp, r7
    d916:	bc80      	pop	{r7}
    d918:	4770      	bx	lr
	...

0000d91c <_ZL9InitArrayv>:


static void InitArray(){
    d91c:	b480      	push	{r7}
    d91e:	b083      	sub	sp, #12
    d920:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d922:	2301      	movs	r3, #1
    d924:	607b      	str	r3, [r7, #4]
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	2b1f      	cmp	r3, #31
    d92a:	dc34      	bgt.n	d996 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d92c:	491e      	ldr	r1, [pc, #120]	; (d9a8 <_ZL9InitArrayv+0x8c>)
    d92e:	687a      	ldr	r2, [r7, #4]
    d930:	4613      	mov	r3, r2
    d932:	009b      	lsls	r3, r3, #2
    d934:	4413      	add	r3, r2
    d936:	009b      	lsls	r3, r3, #2
    d938:	440b      	add	r3, r1
    d93a:	2200      	movs	r2, #0
    d93c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d93e:	491a      	ldr	r1, [pc, #104]	; (d9a8 <_ZL9InitArrayv+0x8c>)
    d940:	687a      	ldr	r2, [r7, #4]
    d942:	4613      	mov	r3, r2
    d944:	009b      	lsls	r3, r3, #2
    d946:	4413      	add	r3, r2
    d948:	009b      	lsls	r3, r3, #2
    d94a:	440b      	add	r3, r1
    d94c:	330c      	adds	r3, #12
    d94e:	2200      	movs	r2, #0
    d950:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d952:	687b      	ldr	r3, [r7, #4]
    d954:	1e5a      	subs	r2, r3, #1
    d956:	6879      	ldr	r1, [r7, #4]
    d958:	460b      	mov	r3, r1
    d95a:	009b      	lsls	r3, r3, #2
    d95c:	440b      	add	r3, r1
    d95e:	009b      	lsls	r3, r3, #2
    d960:	4911      	ldr	r1, [pc, #68]	; (d9a8 <_ZL9InitArrayv+0x8c>)
    d962:	4419      	add	r1, r3
    d964:	4810      	ldr	r0, [pc, #64]	; (d9a8 <_ZL9InitArrayv+0x8c>)
    d966:	4613      	mov	r3, r2
    d968:	009b      	lsls	r3, r3, #2
    d96a:	4413      	add	r3, r2
    d96c:	009b      	lsls	r3, r3, #2
    d96e:	4403      	add	r3, r0
    d970:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    d972:	4a0e      	ldr	r2, [pc, #56]	; (d9ac <_ZL9InitArrayv+0x90>)
    d974:	687b      	ldr	r3, [r7, #4]
    d976:	2100      	movs	r1, #0
    d978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    d97c:	687b      	ldr	r3, [r7, #4]
    d97e:	3b01      	subs	r3, #1
    d980:	687a      	ldr	r2, [r7, #4]
    d982:	0092      	lsls	r2, r2, #2
    d984:	4909      	ldr	r1, [pc, #36]	; (d9ac <_ZL9InitArrayv+0x90>)
    d986:	440a      	add	r2, r1
    d988:	4908      	ldr	r1, [pc, #32]	; (d9ac <_ZL9InitArrayv+0x90>)
    d98a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    d98e:	687b      	ldr	r3, [r7, #4]
    d990:	3301      	adds	r3, #1
    d992:	607b      	str	r3, [r7, #4]
    d994:	e7c7      	b.n	d926 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    d996:	4b06      	ldr	r3, [pc, #24]	; (d9b0 <_ZL9InitArrayv+0x94>)
    d998:	2201      	movs	r2, #1
    d99a:	701a      	strb	r2, [r3, #0]
		
}
    d99c:	bf00      	nop
    d99e:	370c      	adds	r7, #12
    d9a0:	46bd      	mov	sp, r7
    d9a2:	bc80      	pop	{r7}
    d9a4:	4770      	bx	lr
    d9a6:	bf00      	nop
    d9a8:	20000f84 	.word	0x20000f84
    d9ac:	20001204 	.word	0x20001204
    d9b0:	20001284 	.word	0x20001284

0000d9b4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d9b4:	b580      	push	{r7, lr}
    d9b6:	b082      	sub	sp, #8
    d9b8:	af00      	add	r7, sp, #0
    d9ba:	6078      	str	r0, [r7, #4]
	ticks=0;
    d9bc:	687b      	ldr	r3, [r7, #4]
    d9be:	2200      	movs	r2, #0
    d9c0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d9c2:	4b0d      	ldr	r3, [pc, #52]	; (d9f8 <_ZN11Timer_Class4InitEv+0x44>)
    d9c4:	781b      	ldrb	r3, [r3, #0]
    d9c6:	f083 0301 	eor.w	r3, r3, #1
    d9ca:	b2db      	uxtb	r3, r3
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	d001      	beq.n	d9d4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d9d0:	4b0a      	ldr	r3, [pc, #40]	; (d9fc <_ZN11Timer_Class4InitEv+0x48>)
    d9d2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    d9d4:	6878      	ldr	r0, [r7, #4]
    d9d6:	4b0a      	ldr	r3, [pc, #40]	; (da00 <_ZN11Timer_Class4InitEv+0x4c>)
    d9d8:	4798      	blx	r3
    d9da:	4603      	mov	r3, r0
    d9dc:	2b00      	cmp	r3, #0
    d9de:	bf0c      	ite	eq
    d9e0:	2301      	moveq	r3, #1
    d9e2:	2300      	movne	r3, #0
    d9e4:	b2da      	uxtb	r2, r3
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	709a      	strb	r2, [r3, #2]
	return isOK;
    d9ea:	687b      	ldr	r3, [r7, #4]
    d9ec:	789b      	ldrb	r3, [r3, #2]
    d9ee:	b2db      	uxtb	r3, r3
}
    d9f0:	4618      	mov	r0, r3
    d9f2:	3708      	adds	r7, #8
    d9f4:	46bd      	mov	sp, r7
    d9f6:	bd80      	pop	{r7, pc}
    d9f8:	20001284 	.word	0x20001284
    d9fc:	0000d91d 	.word	0x0000d91d
    da00:	0000da05 	.word	0x0000da05

0000da04 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    da04:	b580      	push	{r7, lr}
    da06:	b084      	sub	sp, #16
    da08:	af00      	add	r7, sp, #0
    da0a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    da0c:	687b      	ldr	r3, [r7, #4]
    da0e:	68db      	ldr	r3, [r3, #12]
    da10:	4618      	mov	r0, r3
    da12:	4b04      	ldr	r3, [pc, #16]	; (da24 <_ZN11Timer_Class5StartEv+0x20>)
    da14:	4798      	blx	r3
    da16:	60f8      	str	r0, [r7, #12]
	return status;
    da18:	68fb      	ldr	r3, [r7, #12]
	
}
    da1a:	4618      	mov	r0, r3
    da1c:	3710      	adds	r7, #16
    da1e:	46bd      	mov	sp, r7
    da20:	bd80      	pop	{r7, pc}
    da22:	bf00      	nop
    da24:	00002be5 	.word	0x00002be5

0000da28 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    da28:	b580      	push	{r7, lr}
    da2a:	b084      	sub	sp, #16
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	68db      	ldr	r3, [r3, #12]
    da34:	4618      	mov	r0, r3
    da36:	4b05      	ldr	r3, [pc, #20]	; (da4c <_ZN11Timer_Class4StopEv+0x24>)
    da38:	4798      	blx	r3
    da3a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    da3c:	687b      	ldr	r3, [r7, #4]
    da3e:	2200      	movs	r2, #0
    da40:	705a      	strb	r2, [r3, #1]
	return status;
    da42:	68fb      	ldr	r3, [r7, #12]
}
    da44:	4618      	mov	r0, r3
    da46:	3710      	adds	r7, #16
    da48:	46bd      	mov	sp, r7
    da4a:	bd80      	pop	{r7, pc}
    da4c:	00002c4d 	.word	0x00002c4d

0000da50 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    da50:	b580      	push	{r7, lr}
    da52:	b086      	sub	sp, #24
    da54:	af00      	add	r7, sp, #0
    da56:	60f8      	str	r0, [r7, #12]
    da58:	60b9      	str	r1, [r7, #8]
    da5a:	607a      	str	r2, [r7, #4]
    da5c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    da5e:	68b9      	ldr	r1, [r7, #8]
    da60:	68f8      	ldr	r0, [r7, #12]
    da62:	4b0e      	ldr	r3, [pc, #56]	; (da9c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    da64:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    da66:	68fb      	ldr	r3, [r7, #12]
    da68:	699b      	ldr	r3, [r3, #24]
    da6a:	687a      	ldr	r2, [r7, #4]
    da6c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    da6e:	68fb      	ldr	r3, [r7, #12]
    da70:	699b      	ldr	r3, [r3, #24]
    da72:	68ba      	ldr	r2, [r7, #8]
    da74:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    da76:	68fb      	ldr	r3, [r7, #12]
    da78:	699b      	ldr	r3, [r3, #24]
    da7a:	78fa      	ldrb	r2, [r7, #3]
    da7c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    da7e:	68fb      	ldr	r3, [r7, #12]
    da80:	68da      	ldr	r2, [r3, #12]
    da82:	68fb      	ldr	r3, [r7, #12]
    da84:	699b      	ldr	r3, [r3, #24]
    da86:	4619      	mov	r1, r3
    da88:	4610      	mov	r0, r2
    da8a:	4b05      	ldr	r3, [pc, #20]	; (daa0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    da8c:	4798      	blx	r3
    da8e:	6178      	str	r0, [r7, #20]
	
	return status;
    da90:	697b      	ldr	r3, [r7, #20]
}
    da92:	4618      	mov	r0, r3
    da94:	3718      	adds	r7, #24
    da96:	46bd      	mov	sp, r7
    da98:	bd80      	pop	{r7, pc}
    da9a:	bf00      	nop
    da9c:	0000dc2d 	.word	0x0000dc2d
    daa0:	00002cb9 	.word	0x00002cb9

0000daa4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    daa4:	b580      	push	{r7, lr}
    daa6:	b086      	sub	sp, #24
    daa8:	af00      	add	r7, sp, #0
    daaa:	60f8      	str	r0, [r7, #12]
    daac:	60b9      	str	r1, [r7, #8]
    daae:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    dab0:	687a      	ldr	r2, [r7, #4]
    dab2:	68b9      	ldr	r1, [r7, #8]
    dab4:	68f8      	ldr	r0, [r7, #12]
    dab6:	4b0c      	ldr	r3, [pc, #48]	; (dae8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    dab8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    daba:	68fb      	ldr	r3, [r7, #12]
    dabc:	68db      	ldr	r3, [r3, #12]
    dabe:	681b      	ldr	r3, [r3, #0]
    dac0:	699b      	ldr	r3, [r3, #24]
    dac2:	68fa      	ldr	r2, [r7, #12]
    dac4:	68d2      	ldr	r2, [r2, #12]
    dac6:	3204      	adds	r2, #4
    dac8:	4610      	mov	r0, r2
    daca:	4798      	blx	r3
    dacc:	4603      	mov	r3, r0
    dace:	2b00      	cmp	r3, #0
    dad0:	d105      	bne.n	dade <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    dad2:	68fb      	ldr	r3, [r7, #12]
    dad4:	68db      	ldr	r3, [r3, #12]
    dad6:	4618      	mov	r0, r3
    dad8:	4b04      	ldr	r3, [pc, #16]	; (daec <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    dada:	4798      	blx	r3
    dadc:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    dade:	697b      	ldr	r3, [r7, #20]
}
    dae0:	4618      	mov	r0, r3
    dae2:	3718      	adds	r7, #24
    dae4:	46bd      	mov	sp, r7
    dae6:	bd80      	pop	{r7, pc}
    dae8:	0000daf1 	.word	0x0000daf1
    daec:	00002be5 	.word	0x00002be5

0000daf0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    daf0:	b590      	push	{r4, r7, lr}
    daf2:	b087      	sub	sp, #28
    daf4:	af00      	add	r7, sp, #0
    daf6:	60f8      	str	r0, [r7, #12]
    daf8:	60b9      	str	r1, [r7, #8]
    dafa:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    dafc:	2301      	movs	r3, #1
    dafe:	687a      	ldr	r2, [r7, #4]
    db00:	68b9      	ldr	r1, [r7, #8]
    db02:	68f8      	ldr	r0, [r7, #12]
    db04:	4c03      	ldr	r4, [pc, #12]	; (db14 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    db06:	47a0      	blx	r4
    db08:	6178      	str	r0, [r7, #20]
		return status;
    db0a:	697b      	ldr	r3, [r7, #20]
}
    db0c:	4618      	mov	r0, r3
    db0e:	371c      	adds	r7, #28
    db10:	46bd      	mov	sp, r7
    db12:	bd90      	pop	{r4, r7, pc}
    db14:	0000da51 	.word	0x0000da51

0000db18 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    db18:	b580      	push	{r7, lr}
    db1a:	b082      	sub	sp, #8
    db1c:	af00      	add	r7, sp, #0
    db1e:	6078      	str	r0, [r7, #4]
    db20:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    db22:	6839      	ldr	r1, [r7, #0]
    db24:	6878      	ldr	r0, [r7, #4]
    db26:	4b0f      	ldr	r3, [pc, #60]	; (db64 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    db28:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	68db      	ldr	r3, [r3, #12]
    db2e:	f103 0218 	add.w	r2, r3, #24
    db32:	687b      	ldr	r3, [r7, #4]
    db34:	699b      	ldr	r3, [r3, #24]
    db36:	4619      	mov	r1, r3
    db38:	4610      	mov	r0, r2
    db3a:	4b0b      	ldr	r3, [pc, #44]	; (db68 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
    db40:	2b00      	cmp	r3, #0
    db42:	d007      	beq.n	db54 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	68da      	ldr	r2, [r3, #12]
    db48:	687b      	ldr	r3, [r7, #4]
    db4a:	699b      	ldr	r3, [r3, #24]
    db4c:	4619      	mov	r1, r3
    db4e:	4610      	mov	r0, r2
    db50:	4b06      	ldr	r3, [pc, #24]	; (db6c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    db52:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    db54:	687b      	ldr	r3, [r7, #4]
    db56:	699b      	ldr	r3, [r3, #24]
    db58:	2200      	movs	r2, #0
    db5a:	60da      	str	r2, [r3, #12]
}
    db5c:	bf00      	nop
    db5e:	3708      	adds	r7, #8
    db60:	46bd      	mov	sp, r7
    db62:	bd80      	pop	{r7, pc}
    db64:	0000dcad 	.word	0x0000dcad
    db68:	000039a5 	.word	0x000039a5
    db6c:	00002dbd 	.word	0x00002dbd

0000db70 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    db70:	b590      	push	{r4, r7, lr}
    db72:	b087      	sub	sp, #28
    db74:	af00      	add	r7, sp, #0
    db76:	60f8      	str	r0, [r7, #12]
    db78:	60b9      	str	r1, [r7, #8]
    db7a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    db7c:	2300      	movs	r3, #0
    db7e:	687a      	ldr	r2, [r7, #4]
    db80:	68b9      	ldr	r1, [r7, #8]
    db82:	68f8      	ldr	r0, [r7, #12]
    db84:	4c0c      	ldr	r4, [pc, #48]	; (dbb8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    db86:	47a0      	blx	r4
    db88:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    db8a:	68fb      	ldr	r3, [r7, #12]
    db8c:	68db      	ldr	r3, [r3, #12]
    db8e:	681b      	ldr	r3, [r3, #0]
    db90:	699b      	ldr	r3, [r3, #24]
    db92:	68fa      	ldr	r2, [r7, #12]
    db94:	68d2      	ldr	r2, [r2, #12]
    db96:	3204      	adds	r2, #4
    db98:	4610      	mov	r0, r2
    db9a:	4798      	blx	r3
    db9c:	4603      	mov	r3, r0
    db9e:	2b00      	cmp	r3, #0
    dba0:	d105      	bne.n	dbae <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	68db      	ldr	r3, [r3, #12]
    dba6:	4618      	mov	r0, r3
    dba8:	4b04      	ldr	r3, [pc, #16]	; (dbbc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    dbaa:	4798      	blx	r3
    dbac:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dbae:	697b      	ldr	r3, [r7, #20]
}
    dbb0:	4618      	mov	r0, r3
    dbb2:	371c      	adds	r7, #28
    dbb4:	46bd      	mov	sp, r7
    dbb6:	bd90      	pop	{r4, r7, pc}
    dbb8:	0000da51 	.word	0x0000da51
    dbbc:	00002be5 	.word	0x00002be5

0000dbc0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dbc0:	b480      	push	{r7}
    dbc2:	b085      	sub	sp, #20
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dbc8:	2300      	movs	r3, #0
    dbca:	73fb      	strb	r3, [r7, #15]
    dbcc:	7bfb      	ldrb	r3, [r7, #15]
    dbce:	2b1f      	cmp	r3, #31
    dbd0:	dc23      	bgt.n	dc1a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dbd2:	687b      	ldr	r3, [r7, #4]
    dbd4:	7f1a      	ldrb	r2, [r3, #28]
    dbd6:	7bfb      	ldrb	r3, [r7, #15]
    dbd8:	4413      	add	r3, r2
    dbda:	b2db      	uxtb	r3, r3
    dbdc:	f003 031f 	and.w	r3, r3, #31
    dbe0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    dbe2:	7bba      	ldrb	r2, [r7, #14]
    dbe4:	4910      	ldr	r1, [pc, #64]	; (dc28 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dbe6:	4613      	mov	r3, r2
    dbe8:	009b      	lsls	r3, r3, #2
    dbea:	4413      	add	r3, r2
    dbec:	009b      	lsls	r3, r3, #2
    dbee:	440b      	add	r3, r1
    dbf0:	330c      	adds	r3, #12
    dbf2:	681b      	ldr	r3, [r3, #0]
    dbf4:	2b00      	cmp	r3, #0
    dbf6:	d10c      	bne.n	dc12 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    dbf8:	7bba      	ldrb	r2, [r7, #14]
    dbfa:	4613      	mov	r3, r2
    dbfc:	009b      	lsls	r3, r3, #2
    dbfe:	4413      	add	r3, r2
    dc00:	009b      	lsls	r3, r3, #2
    dc02:	4a09      	ldr	r2, [pc, #36]	; (dc28 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dc04:	441a      	add	r2, r3
    dc06:	687b      	ldr	r3, [r7, #4]
    dc08:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dc0a:	687b      	ldr	r3, [r7, #4]
    dc0c:	7bba      	ldrb	r2, [r7, #14]
    dc0e:	771a      	strb	r2, [r3, #28]
			return;
    dc10:	e006      	b.n	dc20 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc12:	7bfb      	ldrb	r3, [r7, #15]
    dc14:	3301      	adds	r3, #1
    dc16:	73fb      	strb	r3, [r7, #15]
    dc18:	e7d8      	b.n	dbcc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	4a02      	ldr	r2, [pc, #8]	; (dc28 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dc1e:	619a      	str	r2, [r3, #24]

}
    dc20:	3714      	adds	r7, #20
    dc22:	46bd      	mov	sp, r7
    dc24:	bc80      	pop	{r7}
    dc26:	4770      	bx	lr
    dc28:	20000f84 	.word	0x20000f84

0000dc2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b084      	sub	sp, #16
    dc30:	af00      	add	r7, sp, #0
    dc32:	6078      	str	r0, [r7, #4]
    dc34:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc36:	2300      	movs	r3, #0
    dc38:	73fb      	strb	r3, [r7, #15]
    dc3a:	7bfb      	ldrb	r3, [r7, #15]
    dc3c:	2b1f      	cmp	r3, #31
    dc3e:	dc28      	bgt.n	dc92 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	7f1a      	ldrb	r2, [r3, #28]
    dc44:	7bfb      	ldrb	r3, [r7, #15]
    dc46:	4413      	add	r3, r2
    dc48:	b2db      	uxtb	r3, r3
    dc4a:	f003 031f 	and.w	r3, r3, #31
    dc4e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    dc50:	7bba      	ldrb	r2, [r7, #14]
    dc52:	4913      	ldr	r1, [pc, #76]	; (dca0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dc54:	4613      	mov	r3, r2
    dc56:	009b      	lsls	r3, r3, #2
    dc58:	4413      	add	r3, r2
    dc5a:	009b      	lsls	r3, r3, #2
    dc5c:	440b      	add	r3, r1
    dc5e:	330c      	adds	r3, #12
    dc60:	681a      	ldr	r2, [r3, #0]
    dc62:	683b      	ldr	r3, [r7, #0]
    dc64:	429a      	cmp	r2, r3
    dc66:	d110      	bne.n	dc8a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    dc68:	6839      	ldr	r1, [r7, #0]
    dc6a:	6878      	ldr	r0, [r7, #4]
    dc6c:	4b0d      	ldr	r3, [pc, #52]	; (dca4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    dc6e:	4798      	blx	r3
			task=&taskArray[j];
    dc70:	7bba      	ldrb	r2, [r7, #14]
    dc72:	4613      	mov	r3, r2
    dc74:	009b      	lsls	r3, r3, #2
    dc76:	4413      	add	r3, r2
    dc78:	009b      	lsls	r3, r3, #2
    dc7a:	4a09      	ldr	r2, [pc, #36]	; (dca0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dc7c:	441a      	add	r2, r3
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dc82:	687b      	ldr	r3, [r7, #4]
    dc84:	7bba      	ldrb	r2, [r7, #14]
    dc86:	771a      	strb	r2, [r3, #28]
			return;
    dc88:	e006      	b.n	dc98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc8a:	7bfb      	ldrb	r3, [r7, #15]
    dc8c:	3301      	adds	r3, #1
    dc8e:	73fb      	strb	r3, [r7, #15]
    dc90:	e7d3      	b.n	dc3a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    dc92:	6878      	ldr	r0, [r7, #4]
    dc94:	4b04      	ldr	r3, [pc, #16]	; (dca8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    dc96:	4798      	blx	r3
	//task=&taskArray[0];

}
    dc98:	3710      	adds	r7, #16
    dc9a:	46bd      	mov	sp, r7
    dc9c:	bd80      	pop	{r7, pc}
    dc9e:	bf00      	nop
    dca0:	20000f84 	.word	0x20000f84
    dca4:	0000db19 	.word	0x0000db19
    dca8:	0000dbc1 	.word	0x0000dbc1

0000dcac <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    dcac:	b480      	push	{r7}
    dcae:	b085      	sub	sp, #20
    dcb0:	af00      	add	r7, sp, #0
    dcb2:	6078      	str	r0, [r7, #4]
    dcb4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dcb6:	2300      	movs	r3, #0
    dcb8:	73fb      	strb	r3, [r7, #15]
    dcba:	7bfb      	ldrb	r3, [r7, #15]
    dcbc:	2b1f      	cmp	r3, #31
    dcbe:	dc19      	bgt.n	dcf4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    dcc0:	7bfa      	ldrb	r2, [r7, #15]
    dcc2:	490f      	ldr	r1, [pc, #60]	; (dd00 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dcc4:	4613      	mov	r3, r2
    dcc6:	009b      	lsls	r3, r3, #2
    dcc8:	4413      	add	r3, r2
    dcca:	009b      	lsls	r3, r3, #2
    dccc:	440b      	add	r3, r1
    dcce:	330c      	adds	r3, #12
    dcd0:	681a      	ldr	r2, [r3, #0]
    dcd2:	683b      	ldr	r3, [r7, #0]
    dcd4:	429a      	cmp	r2, r3
    dcd6:	d109      	bne.n	dcec <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    dcd8:	7bfa      	ldrb	r2, [r7, #15]
    dcda:	4613      	mov	r3, r2
    dcdc:	009b      	lsls	r3, r3, #2
    dcde:	4413      	add	r3, r2
    dce0:	009b      	lsls	r3, r3, #2
    dce2:	4a07      	ldr	r2, [pc, #28]	; (dd00 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dce4:	441a      	add	r2, r3
    dce6:	687b      	ldr	r3, [r7, #4]
    dce8:	619a      	str	r2, [r3, #24]
			return;
    dcea:	e004      	b.n	dcf6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dcec:	7bfb      	ldrb	r3, [r7, #15]
    dcee:	3301      	adds	r3, #1
    dcf0:	73fb      	strb	r3, [r7, #15]
    dcf2:	e7e2      	b.n	dcba <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    dcf4:	bf00      	nop
}
    dcf6:	3714      	adds	r7, #20
    dcf8:	46bd      	mov	sp, r7
    dcfa:	bc80      	pop	{r7}
    dcfc:	4770      	bx	lr
    dcfe:	bf00      	nop
    dd00:	20000f84 	.word	0x20000f84

0000dd04 <_Z41__static_initialization_and_destruction_0ii>:
    dd04:	b580      	push	{r7, lr}
    dd06:	b082      	sub	sp, #8
    dd08:	af00      	add	r7, sp, #0
    dd0a:	6078      	str	r0, [r7, #4]
    dd0c:	6039      	str	r1, [r7, #0]
    dd0e:	687b      	ldr	r3, [r7, #4]
    dd10:	2b01      	cmp	r3, #1
    dd12:	d14c      	bne.n	ddae <_Z41__static_initialization_and_destruction_0ii+0xaa>
    dd14:	683b      	ldr	r3, [r7, #0]
    dd16:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd1a:	4293      	cmp	r3, r2
    dd1c:	d147      	bne.n	ddae <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dd1e:	4926      	ldr	r1, [pc, #152]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    dd20:	4826      	ldr	r0, [pc, #152]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dd22:	4b27      	ldr	r3, [pc, #156]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd24:	4798      	blx	r3
    dd26:	4a27      	ldr	r2, [pc, #156]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd28:	4927      	ldr	r1, [pc, #156]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd2a:	4824      	ldr	r0, [pc, #144]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dd2c:	4b27      	ldr	r3, [pc, #156]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd2e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dd30:	4927      	ldr	r1, [pc, #156]	; (ddd0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd32:	4828      	ldr	r0, [pc, #160]	; (ddd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd34:	4b22      	ldr	r3, [pc, #136]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd36:	4798      	blx	r3
    dd38:	4a22      	ldr	r2, [pc, #136]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd3a:	4923      	ldr	r1, [pc, #140]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd3c:	4825      	ldr	r0, [pc, #148]	; (ddd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd3e:	4b23      	ldr	r3, [pc, #140]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd40:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dd42:	4925      	ldr	r1, [pc, #148]	; (ddd8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd44:	4825      	ldr	r0, [pc, #148]	; (dddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd46:	4b1e      	ldr	r3, [pc, #120]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd48:	4798      	blx	r3
    dd4a:	4a1e      	ldr	r2, [pc, #120]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd4c:	491e      	ldr	r1, [pc, #120]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd4e:	4823      	ldr	r0, [pc, #140]	; (dddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd50:	4b1e      	ldr	r3, [pc, #120]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd52:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dd54:	4922      	ldr	r1, [pc, #136]	; (dde0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dd56:	4823      	ldr	r0, [pc, #140]	; (dde4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd58:	4b19      	ldr	r3, [pc, #100]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd5a:	4798      	blx	r3
    dd5c:	4a19      	ldr	r2, [pc, #100]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd5e:	491a      	ldr	r1, [pc, #104]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd60:	4820      	ldr	r0, [pc, #128]	; (dde4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd62:	4b1a      	ldr	r3, [pc, #104]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd64:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    dd66:	4920      	ldr	r1, [pc, #128]	; (dde8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dd68:	4820      	ldr	r0, [pc, #128]	; (ddec <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd6a:	4b15      	ldr	r3, [pc, #84]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd6c:	4798      	blx	r3
    dd6e:	4a15      	ldr	r2, [pc, #84]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd70:	4915      	ldr	r1, [pc, #84]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd72:	481e      	ldr	r0, [pc, #120]	; (ddec <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd74:	4b15      	ldr	r3, [pc, #84]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd76:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    dd78:	491d      	ldr	r1, [pc, #116]	; (ddf0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    dd7a:	481e      	ldr	r0, [pc, #120]	; (ddf4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd7c:	4b10      	ldr	r3, [pc, #64]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd7e:	4798      	blx	r3
    dd80:	4a10      	ldr	r2, [pc, #64]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd82:	4911      	ldr	r1, [pc, #68]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd84:	481b      	ldr	r0, [pc, #108]	; (ddf4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd86:	4b11      	ldr	r3, [pc, #68]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd88:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dd8a:	491b      	ldr	r1, [pc, #108]	; (ddf8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dd8c:	481b      	ldr	r0, [pc, #108]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd8e:	4b0c      	ldr	r3, [pc, #48]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd90:	4798      	blx	r3
    dd92:	4a0c      	ldr	r2, [pc, #48]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd94:	490c      	ldr	r1, [pc, #48]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd96:	4819      	ldr	r0, [pc, #100]	; (ddfc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd98:	4b0c      	ldr	r3, [pc, #48]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd9a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dd9c:	4918      	ldr	r1, [pc, #96]	; (de00 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dd9e:	4819      	ldr	r0, [pc, #100]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dda0:	4b07      	ldr	r3, [pc, #28]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dda2:	4798      	blx	r3
    dda4:	4a07      	ldr	r2, [pc, #28]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dda6:	4908      	ldr	r1, [pc, #32]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dda8:	4816      	ldr	r0, [pc, #88]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ddaa:	4b08      	ldr	r3, [pc, #32]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ddac:	4798      	blx	r3
    ddae:	bf00      	nop
    ddb0:	3708      	adds	r7, #8
    ddb2:	46bd      	mov	sp, r7
    ddb4:	bd80      	pop	{r7, pc}
    ddb6:	bf00      	nop
    ddb8:	200014f0 	.word	0x200014f0
    ddbc:	20000e80 	.word	0x20000e80
    ddc0:	0000d8c9 	.word	0x0000d8c9
    ddc4:	20000000 	.word	0x20000000
    ddc8:	0000d901 	.word	0x0000d901
    ddcc:	0000eb49 	.word	0x0000eb49
    ddd0:	20001584 	.word	0x20001584
    ddd4:	20000ea0 	.word	0x20000ea0
    ddd8:	200016a8 	.word	0x200016a8
    dddc:	20000ec0 	.word	0x20000ec0
    dde0:	200015a4 	.word	0x200015a4
    dde4:	20000ee0 	.word	0x20000ee0
    dde8:	20001668 	.word	0x20001668
    ddec:	20000f00 	.word	0x20000f00
    ddf0:	20001688 	.word	0x20001688
    ddf4:	20000f20 	.word	0x20000f20
    ddf8:	20001560 	.word	0x20001560
    ddfc:	20000f40 	.word	0x20000f40
    de00:	20001600 	.word	0x20001600
    de04:	20000f60 	.word	0x20000f60

0000de08 <_GLOBAL__sub_I_ptrTimerClass>:
    de08:	b580      	push	{r7, lr}
    de0a:	af00      	add	r7, sp, #0
    de0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de10:	2001      	movs	r0, #1
    de12:	4b01      	ldr	r3, [pc, #4]	; (de18 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    de14:	4798      	blx	r3
    de16:	bd80      	pop	{r7, pc}
    de18:	0000dd05 	.word	0x0000dd05

0000de1c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    de1c:	b480      	push	{r7}
    de1e:	b083      	sub	sp, #12
    de20:	af00      	add	r7, sp, #0
    de22:	6078      	str	r0, [r7, #4]
    de24:	4a05      	ldr	r2, [pc, #20]	; (de3c <_ZN5PrintC1Ev+0x20>)
    de26:	687b      	ldr	r3, [r7, #4]
    de28:	601a      	str	r2, [r3, #0]
    de2a:	687b      	ldr	r3, [r7, #4]
    de2c:	2200      	movs	r2, #0
    de2e:	605a      	str	r2, [r3, #4]
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	4618      	mov	r0, r3
    de34:	370c      	adds	r7, #12
    de36:	46bd      	mov	sp, r7
    de38:	bc80      	pop	{r7}
    de3a:	4770      	bx	lr
    de3c:	0000f45c 	.word	0x0000f45c

0000de40 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    de40:	b480      	push	{r7}
    de42:	b083      	sub	sp, #12
    de44:	af00      	add	r7, sp, #0
    de46:	6078      	str	r0, [r7, #4]
    de48:	2300      	movs	r3, #0
    de4a:	4618      	mov	r0, r3
    de4c:	370c      	adds	r7, #12
    de4e:	46bd      	mov	sp, r7
    de50:	bc80      	pop	{r7}
    de52:	4770      	bx	lr

0000de54 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    de54:	b480      	push	{r7}
    de56:	b083      	sub	sp, #12
    de58:	af00      	add	r7, sp, #0
    de5a:	6078      	str	r0, [r7, #4]
    de5c:	bf00      	nop
    de5e:	370c      	adds	r7, #12
    de60:	46bd      	mov	sp, r7
    de62:	bc80      	pop	{r7}
    de64:	4770      	bx	lr
	...

0000de68 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    de68:	b580      	push	{r7, lr}
    de6a:	b082      	sub	sp, #8
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]
    de70:	687b      	ldr	r3, [r7, #4]
    de72:	4618      	mov	r0, r3
    de74:	4b06      	ldr	r3, [pc, #24]	; (de90 <_ZN6StreamC1Ev+0x28>)
    de76:	4798      	blx	r3
    de78:	4a06      	ldr	r2, [pc, #24]	; (de94 <_ZN6StreamC1Ev+0x2c>)
    de7a:	687b      	ldr	r3, [r7, #4]
    de7c:	601a      	str	r2, [r3, #0]
    de7e:	687b      	ldr	r3, [r7, #4]
    de80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    de84:	609a      	str	r2, [r3, #8]
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	4618      	mov	r0, r3
    de8a:	3708      	adds	r7, #8
    de8c:	46bd      	mov	sp, r7
    de8e:	bd80      	pop	{r7, pc}
    de90:	0000de1d 	.word	0x0000de1d
    de94:	0000f420 	.word	0x0000f420

0000de98 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    de98:	b480      	push	{r7}
    de9a:	b083      	sub	sp, #12
    de9c:	af00      	add	r7, sp, #0
    de9e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    dea0:	4b06      	ldr	r3, [pc, #24]	; (debc <_ZL10USBTimeoutPK10timer_task+0x24>)
    dea2:	681b      	ldr	r3, [r3, #0]
    dea4:	2201      	movs	r2, #1
    dea6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    dea8:	4b04      	ldr	r3, [pc, #16]	; (debc <_ZL10USBTimeoutPK10timer_task+0x24>)
    deaa:	681b      	ldr	r3, [r3, #0]
    deac:	2200      	movs	r2, #0
    deae:	741a      	strb	r2, [r3, #16]
	
}
    deb0:	bf00      	nop
    deb2:	370c      	adds	r7, #12
    deb4:	46bd      	mov	sp, r7
    deb6:	bc80      	pop	{r7}
    deb8:	4770      	bx	lr
    deba:	bf00      	nop
    debc:	20001388 	.word	0x20001388

0000dec0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dec0:	b480      	push	{r7}
    dec2:	b083      	sub	sp, #12
    dec4:	af00      	add	r7, sp, #0
    dec6:	4603      	mov	r3, r0
    dec8:	603a      	str	r2, [r7, #0]
    deca:	71fb      	strb	r3, [r7, #7]
    decc:	460b      	mov	r3, r1
    dece:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ded0:	4b08      	ldr	r3, [pc, #32]	; (def4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ded2:	681b      	ldr	r3, [r3, #0]
    ded4:	2201      	movs	r2, #1
    ded6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ded8:	4b06      	ldr	r3, [pc, #24]	; (def4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    deda:	681b      	ldr	r3, [r3, #0]
    dedc:	2201      	movs	r2, #1
    dede:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dee0:	4b04      	ldr	r3, [pc, #16]	; (def4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dee2:	681b      	ldr	r3, [r3, #0]
    dee4:	2201      	movs	r2, #1
    dee6:	741a      	strb	r2, [r3, #16]


	return false;
    dee8:	2300      	movs	r3, #0
}
    deea:	4618      	mov	r0, r3
    deec:	370c      	adds	r7, #12
    deee:	46bd      	mov	sp, r7
    def0:	bc80      	pop	{r7}
    def2:	4770      	bx	lr
    def4:	20001388 	.word	0x20001388

0000def8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    def8:	b480      	push	{r7}
    defa:	b083      	sub	sp, #12
    defc:	af00      	add	r7, sp, #0
    defe:	4603      	mov	r3, r0
    df00:	603a      	str	r2, [r7, #0]
    df02:	71fb      	strb	r3, [r7, #7]
    df04:	460b      	mov	r3, r1
    df06:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    df08:	4b08      	ldr	r3, [pc, #32]	; (df2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    df0a:	681b      	ldr	r3, [r3, #0]
    df0c:	2201      	movs	r2, #1
    df0e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    df10:	4b06      	ldr	r3, [pc, #24]	; (df2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    df12:	681b      	ldr	r3, [r3, #0]
    df14:	2201      	movs	r2, #1
    df16:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    df18:	4b04      	ldr	r3, [pc, #16]	; (df2c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    df1a:	681b      	ldr	r3, [r3, #0]
    df1c:	2201      	movs	r2, #1
    df1e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    df20:	2300      	movs	r3, #0
}
    df22:	4618      	mov	r0, r3
    df24:	370c      	adds	r7, #12
    df26:	46bd      	mov	sp, r7
    df28:	bc80      	pop	{r7}
    df2a:	4770      	bx	lr
    df2c:	20001388 	.word	0x20001388

0000df30 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    df30:	b580      	push	{r7, lr}
    df32:	b082      	sub	sp, #8
    df34:	af00      	add	r7, sp, #0
    df36:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    df38:	793b      	ldrb	r3, [r7, #4]
    df3a:	f003 0301 	and.w	r3, r3, #1
    df3e:	b2db      	uxtb	r3, r3
    df40:	2b00      	cmp	r3, #0
    df42:	d013      	beq.n	df6c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    df44:	490c      	ldr	r1, [pc, #48]	; (df78 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    df46:	2000      	movs	r0, #0
    df48:	4b0c      	ldr	r3, [pc, #48]	; (df7c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    df4a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    df4c:	490c      	ldr	r1, [pc, #48]	; (df80 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    df4e:	2001      	movs	r0, #1
    df50:	4b0a      	ldr	r3, [pc, #40]	; (df7c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    df52:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    df54:	4b0b      	ldr	r3, [pc, #44]	; (df84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df56:	681b      	ldr	r3, [r3, #0]
    df58:	2201      	movs	r2, #1
    df5a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    df5c:	4b09      	ldr	r3, [pc, #36]	; (df84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df5e:	681b      	ldr	r3, [r3, #0]
    df60:	2201      	movs	r2, #1
    df62:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    df64:	4b07      	ldr	r3, [pc, #28]	; (df84 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df66:	681b      	ldr	r3, [r3, #0]
    df68:	2201      	movs	r2, #1
    df6a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    df6c:	2300      	movs	r3, #0
}
    df6e:	4618      	mov	r0, r3
    df70:	3708      	adds	r7, #8
    df72:	46bd      	mov	sp, r7
    df74:	bd80      	pop	{r7, pc}
    df76:	bf00      	nop
    df78:	0000dec1 	.word	0x0000dec1
    df7c:	0000c391 	.word	0x0000c391
    df80:	0000def9 	.word	0x0000def9
    df84:	20001388 	.word	0x20001388

0000df88 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    df88:	b580      	push	{r7, lr}
    df8a:	b082      	sub	sp, #8
    df8c:	af00      	add	r7, sp, #0
    df8e:	6078      	str	r0, [r7, #4]
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	4618      	mov	r0, r3
    df94:	4b0a      	ldr	r3, [pc, #40]	; (dfc0 <_ZN9CDC_ClassC1Ev+0x38>)
    df96:	4798      	blx	r3
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	3310      	adds	r3, #16
    df9c:	4618      	mov	r0, r3
    df9e:	4b09      	ldr	r3, [pc, #36]	; (dfc4 <_ZN9CDC_ClassC1Ev+0x3c>)
    dfa0:	4798      	blx	r3
    dfa2:	4a09      	ldr	r2, [pc, #36]	; (dfc8 <_ZN9CDC_ClassC1Ev+0x40>)
    dfa4:	687b      	ldr	r3, [r7, #4]
    dfa6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	f04f 32ff 	mov.w	r2, #4294967295
    dfae:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dfb0:	4a06      	ldr	r2, [pc, #24]	; (dfcc <_ZN9CDC_ClassC1Ev+0x44>)
    dfb2:	687b      	ldr	r3, [r7, #4]
    dfb4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    dfb6:	687b      	ldr	r3, [r7, #4]
    dfb8:	4618      	mov	r0, r3
    dfba:	3708      	adds	r7, #8
    dfbc:	46bd      	mov	sp, r7
    dfbe:	bd80      	pop	{r7, pc}
    dfc0:	0000de69 	.word	0x0000de69
    dfc4:	0000e891 	.word	0x0000e891
    dfc8:	0000f3f0 	.word	0x0000f3f0
    dfcc:	20001388 	.word	0x20001388

0000dfd0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dfd0:	b580      	push	{r7, lr}
    dfd2:	b082      	sub	sp, #8
    dfd4:	af00      	add	r7, sp, #0
    dfd6:	6078      	str	r0, [r7, #4]
    dfd8:	4a06      	ldr	r2, [pc, #24]	; (dff4 <_ZN9CDC_ClassD1Ev+0x24>)
    dfda:	687b      	ldr	r3, [r7, #4]
    dfdc:	601a      	str	r2, [r3, #0]
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	3310      	adds	r3, #16
    dfe2:	4618      	mov	r0, r3
    dfe4:	4b04      	ldr	r3, [pc, #16]	; (dff8 <_ZN9CDC_ClassD1Ev+0x28>)
    dfe6:	4798      	blx	r3
{
} //~CDC_Class
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	4618      	mov	r0, r3
    dfec:	3708      	adds	r7, #8
    dfee:	46bd      	mov	sp, r7
    dff0:	bd80      	pop	{r7, pc}
    dff2:	bf00      	nop
    dff4:	0000f3f0 	.word	0x0000f3f0
    dff8:	0000e8b1 	.word	0x0000e8b1

0000dffc <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dffc:	b580      	push	{r7, lr}
    dffe:	b082      	sub	sp, #8
    e000:	af00      	add	r7, sp, #0
    e002:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e004:	687b      	ldr	r3, [r7, #4]
    e006:	3310      	adds	r3, #16
    e008:	4618      	mov	r0, r3
    e00a:	4b09      	ldr	r3, [pc, #36]	; (e030 <_ZN9CDC_Class4InitEv+0x34>)
    e00c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e00e:	4909      	ldr	r1, [pc, #36]	; (e034 <_ZN9CDC_Class4InitEv+0x38>)
    e010:	2003      	movs	r0, #3
    e012:	4b09      	ldr	r3, [pc, #36]	; (e038 <_ZN9CDC_Class4InitEv+0x3c>)
    e014:	4798      	blx	r3
	delay_ms(100);
    e016:	2064      	movs	r0, #100	; 0x64
    e018:	4b08      	ldr	r3, [pc, #32]	; (e03c <_ZN9CDC_Class4InitEv+0x40>)
    e01a:	4798      	blx	r3
		
	if (connected)
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e020:	2064      	movs	r0, #100	; 0x64
    e022:	4b06      	ldr	r3, [pc, #24]	; (e03c <_ZN9CDC_Class4InitEv+0x40>)
    e024:	4798      	blx	r3

	

}
    e026:	bf00      	nop
    e028:	3708      	adds	r7, #8
    e02a:	46bd      	mov	sp, r7
    e02c:	bd80      	pop	{r7, pc}
    e02e:	bf00      	nop
    e030:	0000e8c5 	.word	0x0000e8c5
    e034:	0000df31 	.word	0x0000df31
    e038:	0000c391 	.word	0x0000c391
    e03c:	0000238d 	.word	0x0000238d

0000e040 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e040:	b580      	push	{r7, lr}
    e042:	b082      	sub	sp, #8
    e044:	af00      	add	r7, sp, #0
    e046:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e048:	4b03      	ldr	r3, [pc, #12]	; (e058 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e04a:	4798      	blx	r3
    e04c:	4603      	mov	r3, r0
	
}
    e04e:	4618      	mov	r0, r3
    e050:	3708      	adds	r7, #8
    e052:	46bd      	mov	sp, r7
    e054:	bd80      	pop	{r7, pc}
    e056:	bf00      	nop
    e058:	0000c409 	.word	0x0000c409

0000e05c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e05c:	b580      	push	{r7, lr}
    e05e:	b084      	sub	sp, #16
    e060:	af00      	add	r7, sp, #0
    e062:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e064:	687b      	ldr	r3, [r7, #4]
    e066:	699b      	ldr	r3, [r3, #24]
    e068:	f1b3 3fff 	cmp.w	r3, #4294967295
    e06c:	bf14      	ite	ne
    e06e:	2301      	movne	r3, #1
    e070:	2300      	moveq	r3, #0
    e072:	b2db      	uxtb	r3, r3
    e074:	2b00      	cmp	r3, #0
    e076:	d002      	beq.n	e07e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e078:	687b      	ldr	r3, [r7, #4]
    e07a:	699b      	ldr	r3, [r3, #24]
    e07c:	e011      	b.n	e0a2 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	681b      	ldr	r3, [r3, #0]
    e082:	331c      	adds	r3, #28
    e084:	681b      	ldr	r3, [r3, #0]
    e086:	f107 010f 	add.w	r1, r7, #15
    e08a:	2201      	movs	r2, #1
    e08c:	6878      	ldr	r0, [r7, #4]
    e08e:	4798      	blx	r3
    e090:	4602      	mov	r2, r0
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e096:	7bfb      	ldrb	r3, [r7, #15]
    e098:	461a      	mov	r2, r3
    e09a:	687b      	ldr	r3, [r7, #4]
    e09c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e09e:	687b      	ldr	r3, [r7, #4]
    e0a0:	699b      	ldr	r3, [r3, #24]
}
    e0a2:	4618      	mov	r0, r3
    e0a4:	3710      	adds	r7, #16
    e0a6:	46bd      	mov	sp, r7
    e0a8:	bd80      	pop	{r7, pc}
	...

0000e0ac <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e0ac:	b580      	push	{r7, lr}
    e0ae:	b086      	sub	sp, #24
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	60f8      	str	r0, [r7, #12]
    e0b4:	60b9      	str	r1, [r7, #8]
    e0b6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e0b8:	68fb      	ldr	r3, [r7, #12]
    e0ba:	7c1b      	ldrb	r3, [r3, #16]
    e0bc:	b2db      	uxtb	r3, r3
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d02e      	beq.n	e120 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e0c2:	687a      	ldr	r2, [r7, #4]
    e0c4:	4613      	mov	r3, r2
    e0c6:	009b      	lsls	r3, r3, #2
    e0c8:	4413      	add	r3, r2
    e0ca:	005b      	lsls	r3, r3, #1
    e0cc:	461a      	mov	r2, r3
    e0ce:	4918      	ldr	r1, [pc, #96]	; (e130 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e0d0:	4818      	ldr	r0, [pc, #96]	; (e134 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e0d2:	4b19      	ldr	r3, [pc, #100]	; (e138 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e0d4:	4798      	blx	r3
		rxReady=false;
    e0d6:	68fb      	ldr	r3, [r7, #12]
    e0d8:	2200      	movs	r2, #0
    e0da:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e0dc:	687b      	ldr	r3, [r7, #4]
    e0de:	4619      	mov	r1, r3
    e0e0:	68b8      	ldr	r0, [r7, #8]
    e0e2:	4b16      	ldr	r3, [pc, #88]	; (e13c <_ZN9CDC_Class8readDataEPvl+0x90>)
    e0e4:	4798      	blx	r3
    e0e6:	4603      	mov	r3, r0
    e0e8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	7d5b      	ldrb	r3, [r3, #21]
    e0ee:	b2db      	uxtb	r3, r3
    e0f0:	f083 0301 	eor.w	r3, r3, #1
    e0f4:	b2db      	uxtb	r3, r3
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d006      	beq.n	e108 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e0fa:	68fb      	ldr	r3, [r7, #12]
    e0fc:	7c1b      	ldrb	r3, [r3, #16]
    e0fe:	b2db      	uxtb	r3, r3
    e100:	2b00      	cmp	r3, #0
    e102:	d001      	beq.n	e108 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e104:	2301      	movs	r3, #1
    e106:	e000      	b.n	e10a <_ZN9CDC_Class8readDataEPvl+0x5e>
    e108:	2300      	movs	r3, #0
    e10a:	2b00      	cmp	r3, #0
    e10c:	d000      	beq.n	e110 <_ZN9CDC_Class8readDataEPvl+0x64>
    e10e:	e7ec      	b.n	e0ea <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e110:	4808      	ldr	r0, [pc, #32]	; (e134 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e112:	4b0b      	ldr	r3, [pc, #44]	; (e140 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e114:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e116:	4906      	ldr	r1, [pc, #24]	; (e130 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e118:	4806      	ldr	r0, [pc, #24]	; (e134 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e11a:	4b0a      	ldr	r3, [pc, #40]	; (e144 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e11c:	4798      	blx	r3
    e11e:	e001      	b.n	e124 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e120:	2300      	movs	r3, #0
    e122:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e124:	7dfb      	ldrb	r3, [r7, #23]
}
    e126:	4618      	mov	r0, r3
    e128:	3718      	adds	r7, #24
    e12a:	46bd      	mov	sp, r7
    e12c:	bd80      	pop	{r7, pc}
    e12e:	bf00      	nop
    e130:	0000de99 	.word	0x0000de99
    e134:	20001328 	.word	0x20001328
    e138:	0000db71 	.word	0x0000db71
    e13c:	0000c2e5 	.word	0x0000c2e5
    e140:	0000da29 	.word	0x0000da29
    e144:	0000db19 	.word	0x0000db19

0000e148 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e148:	b580      	push	{r7, lr}
    e14a:	b084      	sub	sp, #16
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	2200      	movs	r2, #0
    e154:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e156:	f107 030f 	add.w	r3, r7, #15
    e15a:	2101      	movs	r1, #1
    e15c:	4618      	mov	r0, r3
    e15e:	4b08      	ldr	r3, [pc, #32]	; (e180 <_ZN9CDC_Class4readEv+0x38>)
    e160:	4798      	blx	r3
	while(!rxReady);
    e162:	687b      	ldr	r3, [r7, #4]
    e164:	7d5b      	ldrb	r3, [r3, #21]
    e166:	b2db      	uxtb	r3, r3
    e168:	f083 0301 	eor.w	r3, r3, #1
    e16c:	b2db      	uxtb	r3, r3
    e16e:	2b00      	cmp	r3, #0
    e170:	d000      	beq.n	e174 <_ZN9CDC_Class4readEv+0x2c>
    e172:	e7f6      	b.n	e162 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e174:	7bfb      	ldrb	r3, [r7, #15]
}
    e176:	4618      	mov	r0, r3
    e178:	3710      	adds	r7, #16
    e17a:	46bd      	mov	sp, r7
    e17c:	bd80      	pop	{r7, pc}
    e17e:	bf00      	nop
    e180:	0000c2e5 	.word	0x0000c2e5

0000e184 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e184:	b580      	push	{r7, lr}
    e186:	b082      	sub	sp, #8
    e188:	af00      	add	r7, sp, #0
    e18a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e18c:	687b      	ldr	r3, [r7, #4]
    e18e:	331c      	adds	r3, #28
    e190:	2140      	movs	r1, #64	; 0x40
    e192:	4618      	mov	r0, r3
    e194:	4b02      	ldr	r3, [pc, #8]	; (e1a0 <_ZN9CDC_Class5flushEv+0x1c>)
    e196:	4798      	blx	r3
}
    e198:	bf00      	nop
    e19a:	3708      	adds	r7, #8
    e19c:	46bd      	mov	sp, r7
    e19e:	bd80      	pop	{r7, pc}
    e1a0:	0000c329 	.word	0x0000c329

0000e1a4 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b082      	sub	sp, #8
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e1ac:	4b02      	ldr	r3, [pc, #8]	; (e1b8 <_ZN9CDC_Class5clearEv+0x14>)
    e1ae:	4798      	blx	r3
}
    e1b0:	bf00      	nop
    e1b2:	3708      	adds	r7, #8
    e1b4:	46bd      	mov	sp, r7
    e1b6:	bd80      	pop	{r7, pc}
    e1b8:	0000c36d 	.word	0x0000c36d

0000e1bc <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e1bc:	b580      	push	{r7, lr}
    e1be:	b082      	sub	sp, #8
    e1c0:	af00      	add	r7, sp, #0
    e1c2:	6078      	str	r0, [r7, #4]
    e1c4:	460b      	mov	r3, r1
    e1c6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e1c8:	687b      	ldr	r3, [r7, #4]
    e1ca:	7c1b      	ldrb	r3, [r3, #16]
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d012      	beq.n	e1f8 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	7d1b      	ldrb	r3, [r3, #20]
    e1d6:	b2db      	uxtb	r3, r3
    e1d8:	f083 0301 	eor.w	r3, r3, #1
    e1dc:	b2db      	uxtb	r3, r3
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d000      	beq.n	e1e4 <_ZN9CDC_Class5writeEh+0x28>
    e1e2:	e7f6      	b.n	e1d2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	681b      	ldr	r3, [r3, #0]
    e1e8:	3324      	adds	r3, #36	; 0x24
    e1ea:	681b      	ldr	r3, [r3, #0]
    e1ec:	1cf9      	adds	r1, r7, #3
    e1ee:	2201      	movs	r2, #1
    e1f0:	6878      	ldr	r0, [r7, #4]
    e1f2:	4798      	blx	r3
    e1f4:	4603      	mov	r3, r0
    e1f6:	e000      	b.n	e1fa <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e1f8:	2300      	movs	r3, #0
	}
		
}
    e1fa:	4618      	mov	r0, r3
    e1fc:	3708      	adds	r7, #8
    e1fe:	46bd      	mov	sp, r7
    e200:	bd80      	pop	{r7, pc}
	...

0000e204 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e204:	b580      	push	{r7, lr}
    e206:	b086      	sub	sp, #24
    e208:	af00      	add	r7, sp, #0
    e20a:	60f8      	str	r0, [r7, #12]
    e20c:	60b9      	str	r1, [r7, #8]
    e20e:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e210:	68fb      	ldr	r3, [r7, #12]
    e212:	7c1b      	ldrb	r3, [r3, #16]
    e214:	b2db      	uxtb	r3, r3
    e216:	2b00      	cmp	r3, #0
    e218:	d02f      	beq.n	e27a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e21a:	687a      	ldr	r2, [r7, #4]
    e21c:	4613      	mov	r3, r2
    e21e:	009b      	lsls	r3, r3, #2
    e220:	4413      	add	r3, r2
    e222:	005b      	lsls	r3, r3, #1
    e224:	461a      	mov	r2, r3
    e226:	4917      	ldr	r1, [pc, #92]	; (e284 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e228:	4817      	ldr	r0, [pc, #92]	; (e288 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e22a:	4b18      	ldr	r3, [pc, #96]	; (e28c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e22c:	4798      	blx	r3
		txReady=false;
    e22e:	68fb      	ldr	r3, [r7, #12]
    e230:	2200      	movs	r2, #0
    e232:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e234:	687b      	ldr	r3, [r7, #4]
    e236:	4619      	mov	r1, r3
    e238:	68b8      	ldr	r0, [r7, #8]
    e23a:	4b15      	ldr	r3, [pc, #84]	; (e290 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e23c:	4798      	blx	r3
    e23e:	4603      	mov	r3, r0
    e240:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	7d1b      	ldrb	r3, [r3, #20]
    e246:	b2db      	uxtb	r3, r3
    e248:	f083 0301 	eor.w	r3, r3, #1
    e24c:	b2db      	uxtb	r3, r3
    e24e:	2b00      	cmp	r3, #0
    e250:	d006      	beq.n	e260 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e252:	68fb      	ldr	r3, [r7, #12]
    e254:	7c1b      	ldrb	r3, [r3, #16]
    e256:	b2db      	uxtb	r3, r3
    e258:	2b00      	cmp	r3, #0
    e25a:	d001      	beq.n	e260 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e25c:	2301      	movs	r3, #1
    e25e:	e000      	b.n	e262 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e260:	2300      	movs	r3, #0
    e262:	2b00      	cmp	r3, #0
    e264:	d000      	beq.n	e268 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e266:	e7ec      	b.n	e242 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e268:	4807      	ldr	r0, [pc, #28]	; (e288 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e26a:	4b0a      	ldr	r3, [pc, #40]	; (e294 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e26c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e26e:	4905      	ldr	r1, [pc, #20]	; (e284 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e270:	4805      	ldr	r0, [pc, #20]	; (e288 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e272:	4b09      	ldr	r3, [pc, #36]	; (e298 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e274:	4798      	blx	r3
		return r;
    e276:	697b      	ldr	r3, [r7, #20]
    e278:	e000      	b.n	e27c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e27a:	2300      	movs	r3, #0
	}
	

}
    e27c:	4618      	mov	r0, r3
    e27e:	3718      	adds	r7, #24
    e280:	46bd      	mov	sp, r7
    e282:	bd80      	pop	{r7, pc}
    e284:	0000de99 	.word	0x0000de99
    e288:	20001328 	.word	0x20001328
    e28c:	0000db71 	.word	0x0000db71
    e290:	0000c329 	.word	0x0000c329
    e294:	0000da29 	.word	0x0000da29
    e298:	0000db19 	.word	0x0000db19

0000e29c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e29c:	b580      	push	{r7, lr}
    e29e:	b086      	sub	sp, #24
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	60f8      	str	r0, [r7, #12]
    e2a4:	60b9      	str	r1, [r7, #8]
    e2a6:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e2a8:	68fb      	ldr	r3, [r7, #12]
    e2aa:	2200      	movs	r2, #0
    e2ac:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e2ae:	68fb      	ldr	r3, [r7, #12]
    e2b0:	7c1b      	ldrb	r3, [r3, #16]
    e2b2:	b2db      	uxtb	r3, r3
    e2b4:	2b00      	cmp	r3, #0
    e2b6:	d02a      	beq.n	e30e <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e2b8:	687a      	ldr	r2, [r7, #4]
    e2ba:	4613      	mov	r3, r2
    e2bc:	009b      	lsls	r3, r3, #2
    e2be:	4413      	add	r3, r2
    e2c0:	005b      	lsls	r3, r3, #1
    e2c2:	461a      	mov	r2, r3
    e2c4:	4915      	ldr	r1, [pc, #84]	; (e31c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e2c6:	4816      	ldr	r0, [pc, #88]	; (e320 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e2c8:	4b16      	ldr	r3, [pc, #88]	; (e324 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e2ca:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e2cc:	6879      	ldr	r1, [r7, #4]
    e2ce:	68b8      	ldr	r0, [r7, #8]
    e2d0:	4b15      	ldr	r3, [pc, #84]	; (e328 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e2d2:	4798      	blx	r3
    e2d4:	4603      	mov	r3, r0
    e2d6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e2d8:	68fb      	ldr	r3, [r7, #12]
    e2da:	7d1b      	ldrb	r3, [r3, #20]
    e2dc:	b2db      	uxtb	r3, r3
    e2de:	f083 0301 	eor.w	r3, r3, #1
    e2e2:	b2db      	uxtb	r3, r3
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d006      	beq.n	e2f6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e2e8:	68fb      	ldr	r3, [r7, #12]
    e2ea:	7c1b      	ldrb	r3, [r3, #16]
    e2ec:	b2db      	uxtb	r3, r3
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d001      	beq.n	e2f6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e2f2:	2301      	movs	r3, #1
    e2f4:	e000      	b.n	e2f8 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e2f6:	2300      	movs	r3, #0
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d000      	beq.n	e2fe <_ZN9CDC_Class5writeEPKhj+0x62>
    e2fc:	e7ec      	b.n	e2d8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e2fe:	4808      	ldr	r0, [pc, #32]	; (e320 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e300:	4b0a      	ldr	r3, [pc, #40]	; (e32c <_ZN9CDC_Class5writeEPKhj+0x90>)
    e302:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e304:	4905      	ldr	r1, [pc, #20]	; (e31c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e306:	4806      	ldr	r0, [pc, #24]	; (e320 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e308:	4b09      	ldr	r3, [pc, #36]	; (e330 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e30a:	4798      	blx	r3
    e30c:	e001      	b.n	e312 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e30e:	2300      	movs	r3, #0
    e310:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e312:	697b      	ldr	r3, [r7, #20]
}
    e314:	4618      	mov	r0, r3
    e316:	3718      	adds	r7, #24
    e318:	46bd      	mov	sp, r7
    e31a:	bd80      	pop	{r7, pc}
    e31c:	0000de99 	.word	0x0000de99
    e320:	20001328 	.word	0x20001328
    e324:	0000db71 	.word	0x0000db71
    e328:	0000c329 	.word	0x0000c329
    e32c:	0000da29 	.word	0x0000da29
    e330:	0000db19 	.word	0x0000db19

0000e334 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e334:	b480      	push	{r7}
    e336:	b083      	sub	sp, #12
    e338:	af00      	add	r7, sp, #0
    e33a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	7d5b      	ldrb	r3, [r3, #21]
    e340:	b2db      	uxtb	r3, r3
    e342:	2b00      	cmp	r3, #0
    e344:	d006      	beq.n	e354 <_ZN9CDC_Class9availableEv+0x20>
    e346:	687b      	ldr	r3, [r7, #4]
    e348:	7d1b      	ldrb	r3, [r3, #20]
    e34a:	b2db      	uxtb	r3, r3
    e34c:	2b00      	cmp	r3, #0
    e34e:	d001      	beq.n	e354 <_ZN9CDC_Class9availableEv+0x20>
    e350:	2301      	movs	r3, #1
    e352:	e000      	b.n	e356 <_ZN9CDC_Class9availableEv+0x22>
    e354:	2300      	movs	r3, #0
    e356:	2b00      	cmp	r3, #0
    e358:	d001      	beq.n	e35e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e35a:	2301      	movs	r3, #1
    e35c:	e000      	b.n	e360 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e35e:	2300      	movs	r3, #0
	}
	
}
    e360:	4618      	mov	r0, r3
    e362:	370c      	adds	r7, #12
    e364:	46bd      	mov	sp, r7
    e366:	bc80      	pop	{r7}
    e368:	4770      	bx	lr
	...

0000e36c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e36c:	b580      	push	{r7, lr}
    e36e:	b082      	sub	sp, #8
    e370:	af00      	add	r7, sp, #0
    e372:	6078      	str	r0, [r7, #4]
    e374:	6039      	str	r1, [r7, #0]
    e376:	687b      	ldr	r3, [r7, #4]
    e378:	2b01      	cmp	r3, #1
    e37a:	d154      	bne.n	e426 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e37c:	683b      	ldr	r3, [r7, #0]
    e37e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e382:	4293      	cmp	r3, r2
    e384:	d14f      	bne.n	e426 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e386:	492a      	ldr	r1, [pc, #168]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e388:	482a      	ldr	r0, [pc, #168]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e38a:	4b2b      	ldr	r3, [pc, #172]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e38c:	4798      	blx	r3
    e38e:	4a2b      	ldr	r2, [pc, #172]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e390:	492b      	ldr	r1, [pc, #172]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e392:	4828      	ldr	r0, [pc, #160]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e394:	4b2b      	ldr	r3, [pc, #172]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e396:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e398:	492b      	ldr	r1, [pc, #172]	; (e448 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e39a:	482c      	ldr	r0, [pc, #176]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e39c:	4b26      	ldr	r3, [pc, #152]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e39e:	4798      	blx	r3
    e3a0:	4a26      	ldr	r2, [pc, #152]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3a2:	4927      	ldr	r1, [pc, #156]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3a4:	4829      	ldr	r0, [pc, #164]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e3a6:	4b27      	ldr	r3, [pc, #156]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3a8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e3aa:	4929      	ldr	r1, [pc, #164]	; (e450 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e3ac:	4829      	ldr	r0, [pc, #164]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e3ae:	4b22      	ldr	r3, [pc, #136]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3b0:	4798      	blx	r3
    e3b2:	4a22      	ldr	r2, [pc, #136]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3b4:	4922      	ldr	r1, [pc, #136]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3b6:	4827      	ldr	r0, [pc, #156]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e3b8:	4b22      	ldr	r3, [pc, #136]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3ba:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e3bc:	4926      	ldr	r1, [pc, #152]	; (e458 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e3be:	4827      	ldr	r0, [pc, #156]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3c0:	4b1d      	ldr	r3, [pc, #116]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3c2:	4798      	blx	r3
    e3c4:	4a1d      	ldr	r2, [pc, #116]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3c6:	491e      	ldr	r1, [pc, #120]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3c8:	4824      	ldr	r0, [pc, #144]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3ca:	4b1e      	ldr	r3, [pc, #120]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3cc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e3ce:	4924      	ldr	r1, [pc, #144]	; (e460 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e3d0:	4824      	ldr	r0, [pc, #144]	; (e464 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3d2:	4b19      	ldr	r3, [pc, #100]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3d4:	4798      	blx	r3
    e3d6:	4a19      	ldr	r2, [pc, #100]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3d8:	4919      	ldr	r1, [pc, #100]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3da:	4822      	ldr	r0, [pc, #136]	; (e464 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3dc:	4b19      	ldr	r3, [pc, #100]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3de:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e3e0:	4921      	ldr	r1, [pc, #132]	; (e468 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e3e2:	4822      	ldr	r0, [pc, #136]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3e4:	4b14      	ldr	r3, [pc, #80]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3e6:	4798      	blx	r3
    e3e8:	4a14      	ldr	r2, [pc, #80]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3ea:	4915      	ldr	r1, [pc, #84]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3ec:	481f      	ldr	r0, [pc, #124]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3ee:	4b15      	ldr	r3, [pc, #84]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3f0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e3f2:	491f      	ldr	r1, [pc, #124]	; (e470 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e3f4:	481f      	ldr	r0, [pc, #124]	; (e474 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e3f6:	4b10      	ldr	r3, [pc, #64]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3f8:	4798      	blx	r3
    e3fa:	4a10      	ldr	r2, [pc, #64]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3fc:	4910      	ldr	r1, [pc, #64]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3fe:	481d      	ldr	r0, [pc, #116]	; (e474 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e400:	4b10      	ldr	r3, [pc, #64]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e402:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e404:	491c      	ldr	r1, [pc, #112]	; (e478 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e406:	481d      	ldr	r0, [pc, #116]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e408:	4b0b      	ldr	r3, [pc, #44]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e40a:	4798      	blx	r3
    e40c:	4a0b      	ldr	r2, [pc, #44]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e40e:	490c      	ldr	r1, [pc, #48]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e410:	481a      	ldr	r0, [pc, #104]	; (e47c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e412:	4b0c      	ldr	r3, [pc, #48]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e414:	4798      	blx	r3
    e416:	481a      	ldr	r0, [pc, #104]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e418:	4b1a      	ldr	r3, [pc, #104]	; (e484 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e41a:	4798      	blx	r3
    e41c:	4a07      	ldr	r2, [pc, #28]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e41e:	491a      	ldr	r1, [pc, #104]	; (e488 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e420:	4817      	ldr	r0, [pc, #92]	; (e480 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e422:	4b08      	ldr	r3, [pc, #32]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e424:	4798      	blx	r3
    e426:	bf00      	nop
    e428:	3708      	adds	r7, #8
    e42a:	46bd      	mov	sp, r7
    e42c:	bd80      	pop	{r7, pc}
    e42e:	bf00      	nop
    e430:	200014f0 	.word	0x200014f0
    e434:	20001288 	.word	0x20001288
    e438:	0000d8c9 	.word	0x0000d8c9
    e43c:	20000000 	.word	0x20000000
    e440:	0000d901 	.word	0x0000d901
    e444:	0000eb49 	.word	0x0000eb49
    e448:	20001584 	.word	0x20001584
    e44c:	200012a8 	.word	0x200012a8
    e450:	200016a8 	.word	0x200016a8
    e454:	200012c8 	.word	0x200012c8
    e458:	200015a4 	.word	0x200015a4
    e45c:	200012e8 	.word	0x200012e8
    e460:	20001668 	.word	0x20001668
    e464:	20001308 	.word	0x20001308
    e468:	20001688 	.word	0x20001688
    e46c:	20001328 	.word	0x20001328
    e470:	20001560 	.word	0x20001560
    e474:	20001348 	.word	0x20001348
    e478:	20001600 	.word	0x20001600
    e47c:	20001368 	.word	0x20001368
    e480:	2000138c 	.word	0x2000138c
    e484:	0000df89 	.word	0x0000df89
    e488:	0000dfd1 	.word	0x0000dfd1

0000e48c <_GLOBAL__sub_I_ptrCDCClass>:
    e48c:	b580      	push	{r7, lr}
    e48e:	af00      	add	r7, sp, #0
    e490:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e494:	2001      	movs	r0, #1
    e496:	4b01      	ldr	r3, [pc, #4]	; (e49c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e498:	4798      	blx	r3
    e49a:	bd80      	pop	{r7, pc}
    e49c:	0000e36d 	.word	0x0000e36d

0000e4a0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e4a0:	b590      	push	{r4, r7, lr}
    e4a2:	b083      	sub	sp, #12
    e4a4:	af00      	add	r7, sp, #0
    e4a6:	6078      	str	r0, [r7, #4]
    e4a8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e4aa:	683b      	ldr	r3, [r7, #0]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d101      	bne.n	e4b4 <_ZN5Print5writeEPKc+0x14>
    e4b0:	2300      	movs	r3, #0
    e4b2:	e00c      	b.n	e4ce <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e4b4:	687b      	ldr	r3, [r7, #4]
    e4b6:	681b      	ldr	r3, [r3, #0]
    e4b8:	3304      	adds	r3, #4
    e4ba:	681c      	ldr	r4, [r3, #0]
    e4bc:	6838      	ldr	r0, [r7, #0]
    e4be:	4b06      	ldr	r3, [pc, #24]	; (e4d8 <_ZN5Print5writeEPKc+0x38>)
    e4c0:	4798      	blx	r3
    e4c2:	4603      	mov	r3, r0
    e4c4:	461a      	mov	r2, r3
    e4c6:	6839      	ldr	r1, [r7, #0]
    e4c8:	6878      	ldr	r0, [r7, #4]
    e4ca:	47a0      	blx	r4
    e4cc:	4603      	mov	r3, r0
    }
    e4ce:	4618      	mov	r0, r3
    e4d0:	370c      	adds	r7, #12
    e4d2:	46bd      	mov	sp, r7
    e4d4:	bd90      	pop	{r4, r7, pc}
    e4d6:	bf00      	nop
    e4d8:	0000edc1 	.word	0x0000edc1

0000e4dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e4dc:	b580      	push	{r7, lr}
    e4de:	b086      	sub	sp, #24
    e4e0:	af00      	add	r7, sp, #0
    e4e2:	60f8      	str	r0, [r7, #12]
    e4e4:	60b9      	str	r1, [r7, #8]
    e4e6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e4e8:	2300      	movs	r3, #0
    e4ea:	617b      	str	r3, [r7, #20]
  while (size--) {
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	1e5a      	subs	r2, r3, #1
    e4f0:	607a      	str	r2, [r7, #4]
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	bf14      	ite	ne
    e4f6:	2301      	movne	r3, #1
    e4f8:	2300      	moveq	r3, #0
    e4fa:	b2db      	uxtb	r3, r3
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	d016      	beq.n	e52e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e500:	68fb      	ldr	r3, [r7, #12]
    e502:	681b      	ldr	r3, [r3, #0]
    e504:	681a      	ldr	r2, [r3, #0]
    e506:	68bb      	ldr	r3, [r7, #8]
    e508:	1c59      	adds	r1, r3, #1
    e50a:	60b9      	str	r1, [r7, #8]
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	4619      	mov	r1, r3
    e510:	68f8      	ldr	r0, [r7, #12]
    e512:	4790      	blx	r2
    e514:	4603      	mov	r3, r0
    e516:	2b00      	cmp	r3, #0
    e518:	bf14      	ite	ne
    e51a:	2301      	movne	r3, #1
    e51c:	2300      	moveq	r3, #0
    e51e:	b2db      	uxtb	r3, r3
    e520:	2b00      	cmp	r3, #0
    e522:	d003      	beq.n	e52c <_ZN5Print5writeEPKhj+0x50>
    e524:	697b      	ldr	r3, [r7, #20]
    e526:	3301      	adds	r3, #1
    e528:	617b      	str	r3, [r7, #20]
  while (size--) {
    e52a:	e7df      	b.n	e4ec <_ZN5Print5writeEPKhj+0x10>
    else break;
    e52c:	bf00      	nop
  }
  return n;
    e52e:	697b      	ldr	r3, [r7, #20]
}
    e530:	4618      	mov	r0, r3
    e532:	3718      	adds	r7, #24
    e534:	46bd      	mov	sp, r7
    e536:	bd80      	pop	{r7, pc}

0000e538 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e538:	b580      	push	{r7, lr}
    e53a:	b082      	sub	sp, #8
    e53c:	af00      	add	r7, sp, #0
    e53e:	6078      	str	r0, [r7, #4]
    e540:	6039      	str	r1, [r7, #0]
  return write(str);
    e542:	6839      	ldr	r1, [r7, #0]
    e544:	6878      	ldr	r0, [r7, #4]
    e546:	4b03      	ldr	r3, [pc, #12]	; (e554 <_ZN5Print5printEPKc+0x1c>)
    e548:	4798      	blx	r3
    e54a:	4603      	mov	r3, r0
}
    e54c:	4618      	mov	r0, r3
    e54e:	3708      	adds	r7, #8
    e550:	46bd      	mov	sp, r7
    e552:	bd80      	pop	{r7, pc}
    e554:	0000e4a1 	.word	0x0000e4a1

0000e558 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    e558:	b580      	push	{r7, lr}
    e55a:	b082      	sub	sp, #8
    e55c:	af00      	add	r7, sp, #0
    e55e:	6078      	str	r0, [r7, #4]
    e560:	460b      	mov	r3, r1
    e562:	70fb      	strb	r3, [r7, #3]
  return write(c);
    e564:	687b      	ldr	r3, [r7, #4]
    e566:	681b      	ldr	r3, [r3, #0]
    e568:	681b      	ldr	r3, [r3, #0]
    e56a:	78fa      	ldrb	r2, [r7, #3]
    e56c:	4611      	mov	r1, r2
    e56e:	6878      	ldr	r0, [r7, #4]
    e570:	4798      	blx	r3
    e572:	4603      	mov	r3, r0
}
    e574:	4618      	mov	r0, r3
    e576:	3708      	adds	r7, #8
    e578:	46bd      	mov	sp, r7
    e57a:	bd80      	pop	{r7, pc}

0000e57c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    e57c:	b580      	push	{r7, lr}
    e57e:	b084      	sub	sp, #16
    e580:	af00      	add	r7, sp, #0
    e582:	60f8      	str	r0, [r7, #12]
    e584:	460b      	mov	r3, r1
    e586:	607a      	str	r2, [r7, #4]
    e588:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    e58a:	7afb      	ldrb	r3, [r7, #11]
    e58c:	687a      	ldr	r2, [r7, #4]
    e58e:	4619      	mov	r1, r3
    e590:	68f8      	ldr	r0, [r7, #12]
    e592:	4b03      	ldr	r3, [pc, #12]	; (e5a0 <_ZN5Print5printEhi+0x24>)
    e594:	4798      	blx	r3
    e596:	4603      	mov	r3, r0
}
    e598:	4618      	mov	r0, r3
    e59a:	3710      	adds	r7, #16
    e59c:	46bd      	mov	sp, r7
    e59e:	bd80      	pop	{r7, pc}
    e5a0:	0000e651 	.word	0x0000e651

0000e5a4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    e5a4:	b580      	push	{r7, lr}
    e5a6:	b084      	sub	sp, #16
    e5a8:	af00      	add	r7, sp, #0
    e5aa:	60f8      	str	r0, [r7, #12]
    e5ac:	60b9      	str	r1, [r7, #8]
    e5ae:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    e5b0:	687a      	ldr	r2, [r7, #4]
    e5b2:	68b9      	ldr	r1, [r7, #8]
    e5b4:	68f8      	ldr	r0, [r7, #12]
    e5b6:	4b03      	ldr	r3, [pc, #12]	; (e5c4 <_ZN5Print5printEii+0x20>)
    e5b8:	4798      	blx	r3
    e5ba:	4603      	mov	r3, r0
}
    e5bc:	4618      	mov	r0, r3
    e5be:	3710      	adds	r7, #16
    e5c0:	46bd      	mov	sp, r7
    e5c2:	bd80      	pop	{r7, pc}
    e5c4:	0000e5c9 	.word	0x0000e5c9

0000e5c8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    e5c8:	b580      	push	{r7, lr}
    e5ca:	b086      	sub	sp, #24
    e5cc:	af00      	add	r7, sp, #0
    e5ce:	60f8      	str	r0, [r7, #12]
    e5d0:	60b9      	str	r1, [r7, #8]
    e5d2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d109      	bne.n	e5ee <_ZN5Print5printEli+0x26>
    return write(n);
    e5da:	68fb      	ldr	r3, [r7, #12]
    e5dc:	681b      	ldr	r3, [r3, #0]
    e5de:	681b      	ldr	r3, [r3, #0]
    e5e0:	68ba      	ldr	r2, [r7, #8]
    e5e2:	b2d2      	uxtb	r2, r2
    e5e4:	4611      	mov	r1, r2
    e5e6:	68f8      	ldr	r0, [r7, #12]
    e5e8:	4798      	blx	r3
    e5ea:	4603      	mov	r3, r0
    e5ec:	e028      	b.n	e640 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2b0a      	cmp	r3, #10
    e5f2:	d11d      	bne.n	e630 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    e5f4:	68bb      	ldr	r3, [r7, #8]
    e5f6:	2b00      	cmp	r3, #0
    e5f8:	da12      	bge.n	e620 <_ZN5Print5printEli+0x58>
      int t = print('-');
    e5fa:	212d      	movs	r1, #45	; 0x2d
    e5fc:	68f8      	ldr	r0, [r7, #12]
    e5fe:	4b12      	ldr	r3, [pc, #72]	; (e648 <_ZN5Print5printEli+0x80>)
    e600:	4798      	blx	r3
    e602:	4603      	mov	r3, r0
    e604:	617b      	str	r3, [r7, #20]
      n = -n;
    e606:	68bb      	ldr	r3, [r7, #8]
    e608:	425b      	negs	r3, r3
    e60a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    e60c:	68bb      	ldr	r3, [r7, #8]
    e60e:	220a      	movs	r2, #10
    e610:	4619      	mov	r1, r3
    e612:	68f8      	ldr	r0, [r7, #12]
    e614:	4b0d      	ldr	r3, [pc, #52]	; (e64c <_ZN5Print5printEli+0x84>)
    e616:	4798      	blx	r3
    e618:	4602      	mov	r2, r0
    e61a:	697b      	ldr	r3, [r7, #20]
    e61c:	4413      	add	r3, r2
    e61e:	e00f      	b.n	e640 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    e620:	68bb      	ldr	r3, [r7, #8]
    e622:	220a      	movs	r2, #10
    e624:	4619      	mov	r1, r3
    e626:	68f8      	ldr	r0, [r7, #12]
    e628:	4b08      	ldr	r3, [pc, #32]	; (e64c <_ZN5Print5printEli+0x84>)
    e62a:	4798      	blx	r3
    e62c:	4603      	mov	r3, r0
    e62e:	e007      	b.n	e640 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    e630:	68bb      	ldr	r3, [r7, #8]
    e632:	687a      	ldr	r2, [r7, #4]
    e634:	b2d2      	uxtb	r2, r2
    e636:	4619      	mov	r1, r3
    e638:	68f8      	ldr	r0, [r7, #12]
    e63a:	4b04      	ldr	r3, [pc, #16]	; (e64c <_ZN5Print5printEli+0x84>)
    e63c:	4798      	blx	r3
    e63e:	4603      	mov	r3, r0
  }
}
    e640:	4618      	mov	r0, r3
    e642:	3718      	adds	r7, #24
    e644:	46bd      	mov	sp, r7
    e646:	bd80      	pop	{r7, pc}
    e648:	0000e559 	.word	0x0000e559
    e64c:	0000e695 	.word	0x0000e695

0000e650 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    e650:	b580      	push	{r7, lr}
    e652:	b084      	sub	sp, #16
    e654:	af00      	add	r7, sp, #0
    e656:	60f8      	str	r0, [r7, #12]
    e658:	60b9      	str	r1, [r7, #8]
    e65a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	2b00      	cmp	r3, #0
    e660:	d109      	bne.n	e676 <_ZN5Print5printEmi+0x26>
    e662:	68fb      	ldr	r3, [r7, #12]
    e664:	681b      	ldr	r3, [r3, #0]
    e666:	681b      	ldr	r3, [r3, #0]
    e668:	68ba      	ldr	r2, [r7, #8]
    e66a:	b2d2      	uxtb	r2, r2
    e66c:	4611      	mov	r1, r2
    e66e:	68f8      	ldr	r0, [r7, #12]
    e670:	4798      	blx	r3
    e672:	4603      	mov	r3, r0
    e674:	e007      	b.n	e686 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	b2db      	uxtb	r3, r3
    e67a:	461a      	mov	r2, r3
    e67c:	68b9      	ldr	r1, [r7, #8]
    e67e:	68f8      	ldr	r0, [r7, #12]
    e680:	4b03      	ldr	r3, [pc, #12]	; (e690 <_ZN5Print5printEmi+0x40>)
    e682:	4798      	blx	r3
    e684:	4603      	mov	r3, r0
}
    e686:	4618      	mov	r0, r3
    e688:	3710      	adds	r7, #16
    e68a:	46bd      	mov	sp, r7
    e68c:	bd80      	pop	{r7, pc}
    e68e:	bf00      	nop
    e690:	0000e695 	.word	0x0000e695

0000e694 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e694:	b580      	push	{r7, lr}
    e696:	b08e      	sub	sp, #56	; 0x38
    e698:	af00      	add	r7, sp, #0
    e69a:	60f8      	str	r0, [r7, #12]
    e69c:	60b9      	str	r1, [r7, #8]
    e69e:	4613      	mov	r3, r2
    e6a0:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e6a2:	f107 0310 	add.w	r3, r7, #16
    e6a6:	3320      	adds	r3, #32
    e6a8:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6ac:	2200      	movs	r2, #0
    e6ae:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e6b0:	79fb      	ldrb	r3, [r7, #7]
    e6b2:	2b01      	cmp	r3, #1
    e6b4:	dc01      	bgt.n	e6ba <_ZN5Print11printNumberEmh+0x26>
    e6b6:	230a      	movs	r3, #10
    e6b8:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e6ba:	79fa      	ldrb	r2, [r7, #7]
    e6bc:	68bb      	ldr	r3, [r7, #8]
    e6be:	fbb3 f1f2 	udiv	r1, r3, r2
    e6c2:	fb02 f201 	mul.w	r2, r2, r1
    e6c6:	1a9b      	subs	r3, r3, r2
    e6c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e6cc:	79fb      	ldrb	r3, [r7, #7]
    e6ce:	68ba      	ldr	r2, [r7, #8]
    e6d0:	fbb2 f3f3 	udiv	r3, r2, r3
    e6d4:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6d8:	3b01      	subs	r3, #1
    e6da:	637b      	str	r3, [r7, #52]	; 0x34
    e6dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6e0:	2b09      	cmp	r3, #9
    e6e2:	dc04      	bgt.n	e6ee <_ZN5Print11printNumberEmh+0x5a>
    e6e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6e8:	3330      	adds	r3, #48	; 0x30
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	e003      	b.n	e6f6 <_ZN5Print11printNumberEmh+0x62>
    e6ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6f2:	3337      	adds	r3, #55	; 0x37
    e6f4:	b2db      	uxtb	r3, r3
    e6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e6f8:	7013      	strb	r3, [r2, #0]
  } while(n);
    e6fa:	68bb      	ldr	r3, [r7, #8]
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d000      	beq.n	e702 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e700:	e7db      	b.n	e6ba <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e702:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e704:	68f8      	ldr	r0, [r7, #12]
    e706:	4b03      	ldr	r3, [pc, #12]	; (e714 <_ZN5Print11printNumberEmh+0x80>)
    e708:	4798      	blx	r3
    e70a:	4603      	mov	r3, r0
}
    e70c:	4618      	mov	r0, r3
    e70e:	3738      	adds	r7, #56	; 0x38
    e710:	46bd      	mov	sp, r7
    e712:	bd80      	pop	{r7, pc}
    e714:	0000e4a1 	.word	0x0000e4a1

0000e718 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e718:	b480      	push	{r7}
    e71a:	b083      	sub	sp, #12
    e71c:	af00      	add	r7, sp, #0
    e71e:	6078      	str	r0, [r7, #4]
    e720:	460b      	mov	r3, r1
    e722:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e724:	78fb      	ldrb	r3, [r7, #3]
    e726:	687a      	ldr	r2, [r7, #4]
    e728:	01db      	lsls	r3, r3, #7
    e72a:	4413      	add	r3, r2
    e72c:	681b      	ldr	r3, [r3, #0]
}
    e72e:	4618      	mov	r0, r3
    e730:	370c      	adds	r7, #12
    e732:	46bd      	mov	sp, r7
    e734:	bc80      	pop	{r7}
    e736:	4770      	bx	lr

0000e738 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e738:	b480      	push	{r7}
    e73a:	b083      	sub	sp, #12
    e73c:	af00      	add	r7, sp, #0
    e73e:	6078      	str	r0, [r7, #4]
    e740:	460b      	mov	r3, r1
    e742:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e744:	78fb      	ldrb	r3, [r7, #3]
    e746:	687a      	ldr	r2, [r7, #4]
    e748:	01db      	lsls	r3, r3, #7
    e74a:	4413      	add	r3, r2
    e74c:	3310      	adds	r3, #16
    e74e:	681b      	ldr	r3, [r3, #0]
}
    e750:	4618      	mov	r0, r3
    e752:	370c      	adds	r7, #12
    e754:	46bd      	mov	sp, r7
    e756:	bc80      	pop	{r7}
    e758:	4770      	bx	lr

0000e75a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e75a:	b480      	push	{r7}
    e75c:	b083      	sub	sp, #12
    e75e:	af00      	add	r7, sp, #0
    e760:	6078      	str	r0, [r7, #4]
    e762:	460b      	mov	r3, r1
    e764:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e766:	78fb      	ldrb	r3, [r7, #3]
    e768:	687a      	ldr	r2, [r7, #4]
    e76a:	01db      	lsls	r3, r3, #7
    e76c:	4413      	add	r3, r2
    e76e:	3320      	adds	r3, #32
    e770:	681b      	ldr	r3, [r3, #0]
}
    e772:	4618      	mov	r0, r3
    e774:	370c      	adds	r7, #12
    e776:	46bd      	mov	sp, r7
    e778:	bc80      	pop	{r7}
    e77a:	4770      	bx	lr

0000e77c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e77c:	b580      	push	{r7, lr}
    e77e:	b086      	sub	sp, #24
    e780:	af00      	add	r7, sp, #0
    e782:	4603      	mov	r3, r0
    e784:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e786:	f107 030c 	add.w	r3, r7, #12
    e78a:	4618      	mov	r0, r3
    e78c:	4b13      	ldr	r3, [pc, #76]	; (e7dc <_gpio_get_level+0x60>)
    e78e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e790:	79fb      	ldrb	r3, [r7, #7]
    e792:	4619      	mov	r1, r3
    e794:	4812      	ldr	r0, [pc, #72]	; (e7e0 <_gpio_get_level+0x64>)
    e796:	4b13      	ldr	r3, [pc, #76]	; (e7e4 <_gpio_get_level+0x68>)
    e798:	4798      	blx	r3
    e79a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e79c:	79fb      	ldrb	r3, [r7, #7]
    e79e:	4619      	mov	r1, r3
    e7a0:	480f      	ldr	r0, [pc, #60]	; (e7e0 <_gpio_get_level+0x64>)
    e7a2:	4b11      	ldr	r3, [pc, #68]	; (e7e8 <_gpio_get_level+0x6c>)
    e7a4:	4798      	blx	r3
    e7a6:	4602      	mov	r2, r0
    e7a8:	697b      	ldr	r3, [r7, #20]
    e7aa:	43db      	mvns	r3, r3
    e7ac:	4013      	ands	r3, r2
    e7ae:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e7b0:	79fb      	ldrb	r3, [r7, #7]
    e7b2:	4619      	mov	r1, r3
    e7b4:	480a      	ldr	r0, [pc, #40]	; (e7e0 <_gpio_get_level+0x64>)
    e7b6:	4b0d      	ldr	r3, [pc, #52]	; (e7ec <_gpio_get_level+0x70>)
    e7b8:	4798      	blx	r3
    e7ba:	4602      	mov	r2, r0
    e7bc:	697b      	ldr	r3, [r7, #20]
    e7be:	4013      	ands	r3, r2
    e7c0:	693a      	ldr	r2, [r7, #16]
    e7c2:	4313      	orrs	r3, r2
    e7c4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e7c6:	f107 030c 	add.w	r3, r7, #12
    e7ca:	4618      	mov	r0, r3
    e7cc:	4b08      	ldr	r3, [pc, #32]	; (e7f0 <_gpio_get_level+0x74>)
    e7ce:	4798      	blx	r3

	return tmp;
    e7d0:	693b      	ldr	r3, [r7, #16]
}
    e7d2:	4618      	mov	r0, r3
    e7d4:	3718      	adds	r7, #24
    e7d6:	46bd      	mov	sp, r7
    e7d8:	bd80      	pop	{r7, pc}
    e7da:	bf00      	nop
    e7dc:	0000b505 	.word	0x0000b505
    e7e0:	41008000 	.word	0x41008000
    e7e4:	0000e719 	.word	0x0000e719
    e7e8:	0000e75b 	.word	0x0000e75b
    e7ec:	0000e739 	.word	0x0000e739
    e7f0:	0000b52b 	.word	0x0000b52b

0000e7f4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e7f4:	b580      	push	{r7, lr}
    e7f6:	b082      	sub	sp, #8
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	4603      	mov	r3, r0
    e7fc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e7fe:	79fb      	ldrb	r3, [r7, #7]
    e800:	115b      	asrs	r3, r3, #5
    e802:	b2db      	uxtb	r3, r3
    e804:	4618      	mov	r0, r3
    e806:	4b09      	ldr	r3, [pc, #36]	; (e82c <gpio_get_pin_level+0x38>)
    e808:	4798      	blx	r3
    e80a:	4601      	mov	r1, r0
    e80c:	79fb      	ldrb	r3, [r7, #7]
    e80e:	f003 031f 	and.w	r3, r3, #31
    e812:	2201      	movs	r2, #1
    e814:	fa02 f303 	lsl.w	r3, r2, r3
    e818:	400b      	ands	r3, r1
    e81a:	2b00      	cmp	r3, #0
    e81c:	bf14      	ite	ne
    e81e:	2301      	movne	r3, #1
    e820:	2300      	moveq	r3, #0
    e822:	b2db      	uxtb	r3, r3
}
    e824:	4618      	mov	r0, r3
    e826:	3708      	adds	r7, #8
    e828:	46bd      	mov	sp, r7
    e82a:	bd80      	pop	{r7, pc}
    e82c:	0000e77d 	.word	0x0000e77d

0000e830 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e830:	b480      	push	{r7}
    e832:	b083      	sub	sp, #12
    e834:	af00      	add	r7, sp, #0
    e836:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e838:	4b06      	ldr	r3, [pc, #24]	; (e854 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e83a:	681b      	ldr	r3, [r3, #0]
    e83c:	2201      	movs	r2, #1
    e83e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e840:	4b04      	ldr	r3, [pc, #16]	; (e854 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e842:	681b      	ldr	r3, [r3, #0]
    e844:	2200      	movs	r2, #0
    e846:	705a      	strb	r2, [r3, #1]
}
    e848:	bf00      	nop
    e84a:	370c      	adds	r7, #12
    e84c:	46bd      	mov	sp, r7
    e84e:	bc80      	pop	{r7}
    e850:	4770      	bx	lr
    e852:	bf00      	nop
    e854:	200014ec 	.word	0x200014ec

0000e858 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e858:	b580      	push	{r7, lr}
    e85a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e85c:	2040      	movs	r0, #64	; 0x40
    e85e:	4b0a      	ldr	r3, [pc, #40]	; (e888 <_ZL10USBPluggedv+0x30>)
    e860:	4798      	blx	r3
    e862:	4603      	mov	r3, r0
    e864:	2b00      	cmp	r3, #0
    e866:	d004      	beq.n	e872 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e868:	4b08      	ldr	r3, [pc, #32]	; (e88c <_ZL10USBPluggedv+0x34>)
    e86a:	681b      	ldr	r3, [r3, #0]
    e86c:	2201      	movs	r2, #1
    e86e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e870:	e007      	b.n	e882 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e872:	4b06      	ldr	r3, [pc, #24]	; (e88c <_ZL10USBPluggedv+0x34>)
    e874:	681b      	ldr	r3, [r3, #0]
    e876:	2200      	movs	r2, #0
    e878:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e87a:	4b04      	ldr	r3, [pc, #16]	; (e88c <_ZL10USBPluggedv+0x34>)
    e87c:	681b      	ldr	r3, [r3, #0]
    e87e:	2200      	movs	r2, #0
    e880:	701a      	strb	r2, [r3, #0]
}
    e882:	bf00      	nop
    e884:	bd80      	pop	{r7, pc}
    e886:	bf00      	nop
    e888:	0000e7f5 	.word	0x0000e7f5
    e88c:	200014ec 	.word	0x200014ec

0000e890 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e890:	b480      	push	{r7}
    e892:	b083      	sub	sp, #12
    e894:	af00      	add	r7, sp, #0
    e896:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e898:	4a04      	ldr	r2, [pc, #16]	; (e8ac <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e89a:	687b      	ldr	r3, [r7, #4]
    e89c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e89e:	687b      	ldr	r3, [r7, #4]
    e8a0:	4618      	mov	r0, r3
    e8a2:	370c      	adds	r7, #12
    e8a4:	46bd      	mov	sp, r7
    e8a6:	bc80      	pop	{r7}
    e8a8:	4770      	bx	lr
    e8aa:	bf00      	nop
    e8ac:	200014ec 	.word	0x200014ec

0000e8b0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e8b0:	b480      	push	{r7}
    e8b2:	b083      	sub	sp, #12
    e8b4:	af00      	add	r7, sp, #0
    e8b6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e8b8:	687b      	ldr	r3, [r7, #4]
    e8ba:	4618      	mov	r0, r3
    e8bc:	370c      	adds	r7, #12
    e8be:	46bd      	mov	sp, r7
    e8c0:	bc80      	pop	{r7}
    e8c2:	4770      	bx	lr

0000e8c4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b082      	sub	sp, #8
    e8c8:	af00      	add	r7, sp, #0
    e8ca:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e8cc:	491e      	ldr	r1, [pc, #120]	; (e948 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e8ce:	2040      	movs	r0, #64	; 0x40
    e8d0:	4b1e      	ldr	r3, [pc, #120]	; (e94c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e8d2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e8d4:	481e      	ldr	r0, [pc, #120]	; (e950 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e8d6:	4b1f      	ldr	r3, [pc, #124]	; (e954 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e8d8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e8da:	2040      	movs	r0, #64	; 0x40
    e8dc:	4b1e      	ldr	r3, [pc, #120]	; (e958 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e8de:	4798      	blx	r3
    e8e0:	4603      	mov	r3, r0
    e8e2:	461a      	mov	r2, r3
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	78db      	ldrb	r3, [r3, #3]
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d021      	beq.n	e934 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e8f0:	687b      	ldr	r3, [r7, #4]
    e8f2:	2200      	movs	r2, #0
    e8f4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e8f6:	687b      	ldr	r3, [r7, #4]
    e8f8:	2201      	movs	r2, #1
    e8fa:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e8fc:	f44f 7216 	mov.w	r2, #600	; 0x258
    e900:	4916      	ldr	r1, [pc, #88]	; (e95c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e902:	4813      	ldr	r0, [pc, #76]	; (e950 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e904:	4b16      	ldr	r3, [pc, #88]	; (e960 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e906:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e908:	4816      	ldr	r0, [pc, #88]	; (e964 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e90a:	4b17      	ldr	r3, [pc, #92]	; (e968 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e90c:	4798      	blx	r3
    e90e:	4603      	mov	r3, r0
    e910:	f083 0301 	eor.w	r3, r3, #1
    e914:	b2db      	uxtb	r3, r3
    e916:	2b00      	cmp	r3, #0
    e918:	d008      	beq.n	e92c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e91a:	687b      	ldr	r3, [r7, #4]
    e91c:	789b      	ldrb	r3, [r3, #2]
    e91e:	b2db      	uxtb	r3, r3
    e920:	2b00      	cmp	r3, #0
    e922:	d0f1      	beq.n	e908 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	2200      	movs	r2, #0
    e928:	701a      	strb	r2, [r3, #0]
					return;
    e92a:	e009      	b.n	e940 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e92c:	4808      	ldr	r0, [pc, #32]	; (e950 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e92e:	4b0f      	ldr	r3, [pc, #60]	; (e96c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e930:	4798      	blx	r3
    e932:	e005      	b.n	e940 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e934:	687b      	ldr	r3, [r7, #4]
    e936:	2200      	movs	r2, #0
    e938:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	2200      	movs	r2, #0
    e93e:	705a      	strb	r2, [r3, #1]
		}
		
}
    e940:	3708      	adds	r7, #8
    e942:	46bd      	mov	sp, r7
    e944:	bd80      	pop	{r7, pc}
    e946:	bf00      	nop
    e948:	0000e859 	.word	0x0000e859
    e94c:	00002421 	.word	0x00002421
    e950:	2000148c 	.word	0x2000148c
    e954:	0000d9b5 	.word	0x0000d9b5
    e958:	0000e7f5 	.word	0x0000e7f5
    e95c:	0000e831 	.word	0x0000e831
    e960:	0000db71 	.word	0x0000db71
    e964:	2000138c 	.word	0x2000138c
    e968:	0000e041 	.word	0x0000e041
    e96c:	0000da29 	.word	0x0000da29

0000e970 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e970:	b580      	push	{r7, lr}
    e972:	b082      	sub	sp, #8
    e974:	af00      	add	r7, sp, #0
    e976:	6078      	str	r0, [r7, #4]
    e978:	6039      	str	r1, [r7, #0]
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	2b01      	cmp	r3, #1
    e97e:	d14c      	bne.n	ea1a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e980:	683b      	ldr	r3, [r7, #0]
    e982:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e986:	4293      	cmp	r3, r2
    e988:	d147      	bne.n	ea1a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e98a:	4926      	ldr	r1, [pc, #152]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e98c:	4826      	ldr	r0, [pc, #152]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e98e:	4b27      	ldr	r3, [pc, #156]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e990:	4798      	blx	r3
    e992:	4a27      	ldr	r2, [pc, #156]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e994:	4927      	ldr	r1, [pc, #156]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e996:	4824      	ldr	r0, [pc, #144]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e998:	4b27      	ldr	r3, [pc, #156]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e99a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e99c:	4927      	ldr	r1, [pc, #156]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e99e:	4828      	ldr	r0, [pc, #160]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9a0:	4b22      	ldr	r3, [pc, #136]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9a2:	4798      	blx	r3
    e9a4:	4a22      	ldr	r2, [pc, #136]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9a6:	4923      	ldr	r1, [pc, #140]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9a8:	4825      	ldr	r0, [pc, #148]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e9aa:	4b23      	ldr	r3, [pc, #140]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9ac:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e9ae:	4925      	ldr	r1, [pc, #148]	; (ea44 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9b0:	4825      	ldr	r0, [pc, #148]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9b2:	4b1e      	ldr	r3, [pc, #120]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9b4:	4798      	blx	r3
    e9b6:	4a1e      	ldr	r2, [pc, #120]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9b8:	491e      	ldr	r1, [pc, #120]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9ba:	4823      	ldr	r0, [pc, #140]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9bc:	4b1e      	ldr	r3, [pc, #120]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9be:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e9c0:	4922      	ldr	r1, [pc, #136]	; (ea4c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e9c2:	4823      	ldr	r0, [pc, #140]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e9c4:	4b19      	ldr	r3, [pc, #100]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9c6:	4798      	blx	r3
    e9c8:	4a19      	ldr	r2, [pc, #100]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9ca:	491a      	ldr	r1, [pc, #104]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9cc:	4820      	ldr	r0, [pc, #128]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e9ce:	4b1a      	ldr	r3, [pc, #104]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9d0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e9d2:	4920      	ldr	r1, [pc, #128]	; (ea54 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e9d4:	4820      	ldr	r0, [pc, #128]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9d6:	4b15      	ldr	r3, [pc, #84]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9d8:	4798      	blx	r3
    e9da:	4a15      	ldr	r2, [pc, #84]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9dc:	4915      	ldr	r1, [pc, #84]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9de:	481e      	ldr	r0, [pc, #120]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9e0:	4b15      	ldr	r3, [pc, #84]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9e2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e9e4:	491d      	ldr	r1, [pc, #116]	; (ea5c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e9e6:	481e      	ldr	r0, [pc, #120]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9e8:	4b10      	ldr	r3, [pc, #64]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9ea:	4798      	blx	r3
    e9ec:	4a10      	ldr	r2, [pc, #64]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9ee:	4911      	ldr	r1, [pc, #68]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9f0:	481b      	ldr	r0, [pc, #108]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9f2:	4b11      	ldr	r3, [pc, #68]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9f4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e9f6:	491b      	ldr	r1, [pc, #108]	; (ea64 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e9f8:	481b      	ldr	r0, [pc, #108]	; (ea68 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e9fa:	4b0c      	ldr	r3, [pc, #48]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9fc:	4798      	blx	r3
    e9fe:	4a0c      	ldr	r2, [pc, #48]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea00:	490c      	ldr	r1, [pc, #48]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea02:	4819      	ldr	r0, [pc, #100]	; (ea68 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ea04:	4b0c      	ldr	r3, [pc, #48]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea06:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ea08:	4918      	ldr	r1, [pc, #96]	; (ea6c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ea0a:	4819      	ldr	r0, [pc, #100]	; (ea70 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ea0c:	4b07      	ldr	r3, [pc, #28]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ea0e:	4798      	blx	r3
    ea10:	4a07      	ldr	r2, [pc, #28]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea12:	4908      	ldr	r1, [pc, #32]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea14:	4816      	ldr	r0, [pc, #88]	; (ea70 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ea16:	4b08      	ldr	r3, [pc, #32]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea18:	4798      	blx	r3
    ea1a:	bf00      	nop
    ea1c:	3708      	adds	r7, #8
    ea1e:	46bd      	mov	sp, r7
    ea20:	bd80      	pop	{r7, pc}
    ea22:	bf00      	nop
    ea24:	200014f0 	.word	0x200014f0
    ea28:	200013ec 	.word	0x200013ec
    ea2c:	0000d8c9 	.word	0x0000d8c9
    ea30:	20000000 	.word	0x20000000
    ea34:	0000d901 	.word	0x0000d901
    ea38:	0000eb49 	.word	0x0000eb49
    ea3c:	20001584 	.word	0x20001584
    ea40:	2000140c 	.word	0x2000140c
    ea44:	200016a8 	.word	0x200016a8
    ea48:	2000142c 	.word	0x2000142c
    ea4c:	200015a4 	.word	0x200015a4
    ea50:	2000144c 	.word	0x2000144c
    ea54:	20001668 	.word	0x20001668
    ea58:	2000146c 	.word	0x2000146c
    ea5c:	20001688 	.word	0x20001688
    ea60:	2000148c 	.word	0x2000148c
    ea64:	20001560 	.word	0x20001560
    ea68:	200014ac 	.word	0x200014ac
    ea6c:	20001600 	.word	0x20001600
    ea70:	200014cc 	.word	0x200014cc

0000ea74 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ea74:	b580      	push	{r7, lr}
    ea76:	af00      	add	r7, sp, #0
    ea78:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea7c:	2001      	movs	r0, #1
    ea7e:	4b01      	ldr	r3, [pc, #4]	; (ea84 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ea80:	4798      	blx	r3
    ea82:	bd80      	pop	{r7, pc}
    ea84:	0000e971 	.word	0x0000e971

0000ea88 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ea88:	b480      	push	{r7}
    ea8a:	b083      	sub	sp, #12
    ea8c:	af00      	add	r7, sp, #0
    ea8e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ea90:	2300      	movs	r3, #0
	}
    ea92:	4618      	mov	r0, r3
    ea94:	370c      	adds	r7, #12
    ea96:	46bd      	mov	sp, r7
    ea98:	bc80      	pop	{r7}
    ea9a:	4770      	bx	lr

0000ea9c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ea9c:	b480      	push	{r7}
    ea9e:	af00      	add	r7, sp, #0
		}
    eaa0:	bf00      	nop
    eaa2:	46bd      	mov	sp, r7
    eaa4:	bc80      	pop	{r7}
    eaa6:	4770      	bx	lr

0000eaa8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    eaa8:	b580      	push	{r7, lr}
    eaaa:	b084      	sub	sp, #16
    eaac:	af00      	add	r7, sp, #0
    eaae:	60f8      	str	r0, [r7, #12]
    eab0:	60b9      	str	r1, [r7, #8]
    eab2:	4613      	mov	r3, r2
    eab4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    eab6:	68fb      	ldr	r3, [r7, #12]
    eab8:	2b00      	cmp	r3, #0
    eaba:	d004      	beq.n	eac6 <io_write+0x1e>
    eabc:	68bb      	ldr	r3, [r7, #8]
    eabe:	2b00      	cmp	r3, #0
    eac0:	d001      	beq.n	eac6 <io_write+0x1e>
    eac2:	2301      	movs	r3, #1
    eac4:	e000      	b.n	eac8 <io_write+0x20>
    eac6:	2300      	movs	r3, #0
    eac8:	f003 0301 	and.w	r3, r3, #1
    eacc:	b2db      	uxtb	r3, r3
    eace:	2234      	movs	r2, #52	; 0x34
    ead0:	4907      	ldr	r1, [pc, #28]	; (eaf0 <io_write+0x48>)
    ead2:	4618      	mov	r0, r3
    ead4:	4b07      	ldr	r3, [pc, #28]	; (eaf4 <io_write+0x4c>)
    ead6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    ead8:	68fb      	ldr	r3, [r7, #12]
    eada:	681b      	ldr	r3, [r3, #0]
    eadc:	88fa      	ldrh	r2, [r7, #6]
    eade:	68b9      	ldr	r1, [r7, #8]
    eae0:	68f8      	ldr	r0, [r7, #12]
    eae2:	4798      	blx	r3
    eae4:	4603      	mov	r3, r0
}
    eae6:	4618      	mov	r0, r3
    eae8:	3710      	adds	r7, #16
    eaea:	46bd      	mov	sp, r7
    eaec:	bd80      	pop	{r7, pc}
    eaee:	bf00      	nop
    eaf0:	0000f46c 	.word	0x0000f46c
    eaf4:	0000397d 	.word	0x0000397d

0000eaf8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    eaf8:	b580      	push	{r7, lr}
    eafa:	b084      	sub	sp, #16
    eafc:	af00      	add	r7, sp, #0
    eafe:	60f8      	str	r0, [r7, #12]
    eb00:	60b9      	str	r1, [r7, #8]
    eb02:	4613      	mov	r3, r2
    eb04:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    eb06:	68fb      	ldr	r3, [r7, #12]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d004      	beq.n	eb16 <io_read+0x1e>
    eb0c:	68bb      	ldr	r3, [r7, #8]
    eb0e:	2b00      	cmp	r3, #0
    eb10:	d001      	beq.n	eb16 <io_read+0x1e>
    eb12:	2301      	movs	r3, #1
    eb14:	e000      	b.n	eb18 <io_read+0x20>
    eb16:	2300      	movs	r3, #0
    eb18:	f003 0301 	and.w	r3, r3, #1
    eb1c:	b2db      	uxtb	r3, r3
    eb1e:	223d      	movs	r2, #61	; 0x3d
    eb20:	4907      	ldr	r1, [pc, #28]	; (eb40 <io_read+0x48>)
    eb22:	4618      	mov	r0, r3
    eb24:	4b07      	ldr	r3, [pc, #28]	; (eb44 <io_read+0x4c>)
    eb26:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    eb28:	68fb      	ldr	r3, [r7, #12]
    eb2a:	685b      	ldr	r3, [r3, #4]
    eb2c:	88fa      	ldrh	r2, [r7, #6]
    eb2e:	68b9      	ldr	r1, [r7, #8]
    eb30:	68f8      	ldr	r0, [r7, #12]
    eb32:	4798      	blx	r3
    eb34:	4603      	mov	r3, r0
}
    eb36:	4618      	mov	r0, r3
    eb38:	3710      	adds	r7, #16
    eb3a:	46bd      	mov	sp, r7
    eb3c:	bd80      	pop	{r7, pc}
    eb3e:	bf00      	nop
    eb40:	0000f46c 	.word	0x0000f46c
    eb44:	0000397d 	.word	0x0000397d

0000eb48 <__aeabi_atexit>:
    eb48:	460b      	mov	r3, r1
    eb4a:	4601      	mov	r1, r0
    eb4c:	4618      	mov	r0, r3
    eb4e:	f000 b801 	b.w	eb54 <__cxa_atexit>
    eb52:	bf00      	nop

0000eb54 <__cxa_atexit>:
    eb54:	4613      	mov	r3, r2
    eb56:	460a      	mov	r2, r1
    eb58:	4601      	mov	r1, r0
    eb5a:	2002      	movs	r0, #2
    eb5c:	f000 b99e 	b.w	ee9c <__register_exitproc>

0000eb60 <ffs>:
    eb60:	b140      	cbz	r0, eb74 <ffs+0x14>
    eb62:	2300      	movs	r3, #0
    eb64:	fa40 f103 	asr.w	r1, r0, r3
    eb68:	1c5a      	adds	r2, r3, #1
    eb6a:	07c9      	lsls	r1, r1, #31
    eb6c:	4613      	mov	r3, r2
    eb6e:	d5f9      	bpl.n	eb64 <ffs+0x4>
    eb70:	4610      	mov	r0, r2
    eb72:	4770      	bx	lr
    eb74:	4602      	mov	r2, r0
    eb76:	4610      	mov	r0, r2
    eb78:	4770      	bx	lr
    eb7a:	bf00      	nop

0000eb7c <__libc_init_array>:
    eb7c:	b570      	push	{r4, r5, r6, lr}
    eb7e:	4e0f      	ldr	r6, [pc, #60]	; (ebbc <__libc_init_array+0x40>)
    eb80:	4d0f      	ldr	r5, [pc, #60]	; (ebc0 <__libc_init_array+0x44>)
    eb82:	1b76      	subs	r6, r6, r5
    eb84:	10b6      	asrs	r6, r6, #2
    eb86:	bf18      	it	ne
    eb88:	2400      	movne	r4, #0
    eb8a:	d005      	beq.n	eb98 <__libc_init_array+0x1c>
    eb8c:	3401      	adds	r4, #1
    eb8e:	f855 3b04 	ldr.w	r3, [r5], #4
    eb92:	4798      	blx	r3
    eb94:	42a6      	cmp	r6, r4
    eb96:	d1f9      	bne.n	eb8c <__libc_init_array+0x10>
    eb98:	4e0a      	ldr	r6, [pc, #40]	; (ebc4 <__libc_init_array+0x48>)
    eb9a:	4d0b      	ldr	r5, [pc, #44]	; (ebc8 <__libc_init_array+0x4c>)
    eb9c:	1b76      	subs	r6, r6, r5
    eb9e:	f000 fc71 	bl	f484 <_init>
    eba2:	10b6      	asrs	r6, r6, #2
    eba4:	bf18      	it	ne
    eba6:	2400      	movne	r4, #0
    eba8:	d006      	beq.n	ebb8 <__libc_init_array+0x3c>
    ebaa:	3401      	adds	r4, #1
    ebac:	f855 3b04 	ldr.w	r3, [r5], #4
    ebb0:	4798      	blx	r3
    ebb2:	42a6      	cmp	r6, r4
    ebb4:	d1f9      	bne.n	ebaa <__libc_init_array+0x2e>
    ebb6:	bd70      	pop	{r4, r5, r6, pc}
    ebb8:	bd70      	pop	{r4, r5, r6, pc}
    ebba:	bf00      	nop
    ebbc:	0000f490 	.word	0x0000f490
    ebc0:	0000f490 	.word	0x0000f490
    ebc4:	0000f4ac 	.word	0x0000f4ac
    ebc8:	0000f490 	.word	0x0000f490

0000ebcc <memcpy>:
    ebcc:	4684      	mov	ip, r0
    ebce:	ea41 0300 	orr.w	r3, r1, r0
    ebd2:	f013 0303 	ands.w	r3, r3, #3
    ebd6:	d16d      	bne.n	ecb4 <memcpy+0xe8>
    ebd8:	3a40      	subs	r2, #64	; 0x40
    ebda:	d341      	bcc.n	ec60 <memcpy+0x94>
    ebdc:	f851 3b04 	ldr.w	r3, [r1], #4
    ebe0:	f840 3b04 	str.w	r3, [r0], #4
    ebe4:	f851 3b04 	ldr.w	r3, [r1], #4
    ebe8:	f840 3b04 	str.w	r3, [r0], #4
    ebec:	f851 3b04 	ldr.w	r3, [r1], #4
    ebf0:	f840 3b04 	str.w	r3, [r0], #4
    ebf4:	f851 3b04 	ldr.w	r3, [r1], #4
    ebf8:	f840 3b04 	str.w	r3, [r0], #4
    ebfc:	f851 3b04 	ldr.w	r3, [r1], #4
    ec00:	f840 3b04 	str.w	r3, [r0], #4
    ec04:	f851 3b04 	ldr.w	r3, [r1], #4
    ec08:	f840 3b04 	str.w	r3, [r0], #4
    ec0c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec10:	f840 3b04 	str.w	r3, [r0], #4
    ec14:	f851 3b04 	ldr.w	r3, [r1], #4
    ec18:	f840 3b04 	str.w	r3, [r0], #4
    ec1c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec20:	f840 3b04 	str.w	r3, [r0], #4
    ec24:	f851 3b04 	ldr.w	r3, [r1], #4
    ec28:	f840 3b04 	str.w	r3, [r0], #4
    ec2c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec30:	f840 3b04 	str.w	r3, [r0], #4
    ec34:	f851 3b04 	ldr.w	r3, [r1], #4
    ec38:	f840 3b04 	str.w	r3, [r0], #4
    ec3c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec40:	f840 3b04 	str.w	r3, [r0], #4
    ec44:	f851 3b04 	ldr.w	r3, [r1], #4
    ec48:	f840 3b04 	str.w	r3, [r0], #4
    ec4c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec50:	f840 3b04 	str.w	r3, [r0], #4
    ec54:	f851 3b04 	ldr.w	r3, [r1], #4
    ec58:	f840 3b04 	str.w	r3, [r0], #4
    ec5c:	3a40      	subs	r2, #64	; 0x40
    ec5e:	d2bd      	bcs.n	ebdc <memcpy+0x10>
    ec60:	3230      	adds	r2, #48	; 0x30
    ec62:	d311      	bcc.n	ec88 <memcpy+0xbc>
    ec64:	f851 3b04 	ldr.w	r3, [r1], #4
    ec68:	f840 3b04 	str.w	r3, [r0], #4
    ec6c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec70:	f840 3b04 	str.w	r3, [r0], #4
    ec74:	f851 3b04 	ldr.w	r3, [r1], #4
    ec78:	f840 3b04 	str.w	r3, [r0], #4
    ec7c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec80:	f840 3b04 	str.w	r3, [r0], #4
    ec84:	3a10      	subs	r2, #16
    ec86:	d2ed      	bcs.n	ec64 <memcpy+0x98>
    ec88:	320c      	adds	r2, #12
    ec8a:	d305      	bcc.n	ec98 <memcpy+0xcc>
    ec8c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec90:	f840 3b04 	str.w	r3, [r0], #4
    ec94:	3a04      	subs	r2, #4
    ec96:	d2f9      	bcs.n	ec8c <memcpy+0xc0>
    ec98:	3204      	adds	r2, #4
    ec9a:	d008      	beq.n	ecae <memcpy+0xe2>
    ec9c:	07d2      	lsls	r2, r2, #31
    ec9e:	bf1c      	itt	ne
    eca0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    eca4:	f800 3b01 	strbne.w	r3, [r0], #1
    eca8:	d301      	bcc.n	ecae <memcpy+0xe2>
    ecaa:	880b      	ldrh	r3, [r1, #0]
    ecac:	8003      	strh	r3, [r0, #0]
    ecae:	4660      	mov	r0, ip
    ecb0:	4770      	bx	lr
    ecb2:	bf00      	nop
    ecb4:	2a08      	cmp	r2, #8
    ecb6:	d313      	bcc.n	ece0 <memcpy+0x114>
    ecb8:	078b      	lsls	r3, r1, #30
    ecba:	d08d      	beq.n	ebd8 <memcpy+0xc>
    ecbc:	f010 0303 	ands.w	r3, r0, #3
    ecc0:	d08a      	beq.n	ebd8 <memcpy+0xc>
    ecc2:	f1c3 0304 	rsb	r3, r3, #4
    ecc6:	1ad2      	subs	r2, r2, r3
    ecc8:	07db      	lsls	r3, r3, #31
    ecca:	bf1c      	itt	ne
    eccc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ecd0:	f800 3b01 	strbne.w	r3, [r0], #1
    ecd4:	d380      	bcc.n	ebd8 <memcpy+0xc>
    ecd6:	f831 3b02 	ldrh.w	r3, [r1], #2
    ecda:	f820 3b02 	strh.w	r3, [r0], #2
    ecde:	e77b      	b.n	ebd8 <memcpy+0xc>
    ece0:	3a04      	subs	r2, #4
    ece2:	d3d9      	bcc.n	ec98 <memcpy+0xcc>
    ece4:	3a01      	subs	r2, #1
    ece6:	f811 3b01 	ldrb.w	r3, [r1], #1
    ecea:	f800 3b01 	strb.w	r3, [r0], #1
    ecee:	d2f9      	bcs.n	ece4 <memcpy+0x118>
    ecf0:	780b      	ldrb	r3, [r1, #0]
    ecf2:	7003      	strb	r3, [r0, #0]
    ecf4:	784b      	ldrb	r3, [r1, #1]
    ecf6:	7043      	strb	r3, [r0, #1]
    ecf8:	788b      	ldrb	r3, [r1, #2]
    ecfa:	7083      	strb	r3, [r0, #2]
    ecfc:	4660      	mov	r0, ip
    ecfe:	4770      	bx	lr

0000ed00 <memset>:
    ed00:	b470      	push	{r4, r5, r6}
    ed02:	0786      	lsls	r6, r0, #30
    ed04:	d046      	beq.n	ed94 <memset+0x94>
    ed06:	1e54      	subs	r4, r2, #1
    ed08:	2a00      	cmp	r2, #0
    ed0a:	d041      	beq.n	ed90 <memset+0x90>
    ed0c:	b2ca      	uxtb	r2, r1
    ed0e:	4603      	mov	r3, r0
    ed10:	e002      	b.n	ed18 <memset+0x18>
    ed12:	f114 34ff 	adds.w	r4, r4, #4294967295
    ed16:	d33b      	bcc.n	ed90 <memset+0x90>
    ed18:	f803 2b01 	strb.w	r2, [r3], #1
    ed1c:	079d      	lsls	r5, r3, #30
    ed1e:	d1f8      	bne.n	ed12 <memset+0x12>
    ed20:	2c03      	cmp	r4, #3
    ed22:	d92e      	bls.n	ed82 <memset+0x82>
    ed24:	b2cd      	uxtb	r5, r1
    ed26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ed2a:	2c0f      	cmp	r4, #15
    ed2c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ed30:	d919      	bls.n	ed66 <memset+0x66>
    ed32:	f103 0210 	add.w	r2, r3, #16
    ed36:	4626      	mov	r6, r4
    ed38:	3e10      	subs	r6, #16
    ed3a:	2e0f      	cmp	r6, #15
    ed3c:	f842 5c10 	str.w	r5, [r2, #-16]
    ed40:	f842 5c0c 	str.w	r5, [r2, #-12]
    ed44:	f842 5c08 	str.w	r5, [r2, #-8]
    ed48:	f842 5c04 	str.w	r5, [r2, #-4]
    ed4c:	f102 0210 	add.w	r2, r2, #16
    ed50:	d8f2      	bhi.n	ed38 <memset+0x38>
    ed52:	f1a4 0210 	sub.w	r2, r4, #16
    ed56:	f022 020f 	bic.w	r2, r2, #15
    ed5a:	f004 040f 	and.w	r4, r4, #15
    ed5e:	3210      	adds	r2, #16
    ed60:	2c03      	cmp	r4, #3
    ed62:	4413      	add	r3, r2
    ed64:	d90d      	bls.n	ed82 <memset+0x82>
    ed66:	461e      	mov	r6, r3
    ed68:	4622      	mov	r2, r4
    ed6a:	3a04      	subs	r2, #4
    ed6c:	2a03      	cmp	r2, #3
    ed6e:	f846 5b04 	str.w	r5, [r6], #4
    ed72:	d8fa      	bhi.n	ed6a <memset+0x6a>
    ed74:	1f22      	subs	r2, r4, #4
    ed76:	f022 0203 	bic.w	r2, r2, #3
    ed7a:	3204      	adds	r2, #4
    ed7c:	4413      	add	r3, r2
    ed7e:	f004 0403 	and.w	r4, r4, #3
    ed82:	b12c      	cbz	r4, ed90 <memset+0x90>
    ed84:	b2c9      	uxtb	r1, r1
    ed86:	441c      	add	r4, r3
    ed88:	f803 1b01 	strb.w	r1, [r3], #1
    ed8c:	429c      	cmp	r4, r3
    ed8e:	d1fb      	bne.n	ed88 <memset+0x88>
    ed90:	bc70      	pop	{r4, r5, r6}
    ed92:	4770      	bx	lr
    ed94:	4614      	mov	r4, r2
    ed96:	4603      	mov	r3, r0
    ed98:	e7c2      	b.n	ed20 <memset+0x20>
    ed9a:	bf00      	nop
	...

0000edc0 <strlen>:
    edc0:	f890 f000 	pld	[r0]
    edc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    edc8:	f020 0107 	bic.w	r1, r0, #7
    edcc:	f06f 0c00 	mvn.w	ip, #0
    edd0:	f010 0407 	ands.w	r4, r0, #7
    edd4:	f891 f020 	pld	[r1, #32]
    edd8:	f040 8049 	bne.w	ee6e <strlen+0xae>
    eddc:	f04f 0400 	mov.w	r4, #0
    ede0:	f06f 0007 	mvn.w	r0, #7
    ede4:	e9d1 2300 	ldrd	r2, r3, [r1]
    ede8:	f891 f040 	pld	[r1, #64]	; 0x40
    edec:	f100 0008 	add.w	r0, r0, #8
    edf0:	fa82 f24c 	uadd8	r2, r2, ip
    edf4:	faa4 f28c 	sel	r2, r4, ip
    edf8:	fa83 f34c 	uadd8	r3, r3, ip
    edfc:	faa2 f38c 	sel	r3, r2, ip
    ee00:	bb4b      	cbnz	r3, ee56 <strlen+0x96>
    ee02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ee06:	fa82 f24c 	uadd8	r2, r2, ip
    ee0a:	f100 0008 	add.w	r0, r0, #8
    ee0e:	faa4 f28c 	sel	r2, r4, ip
    ee12:	fa83 f34c 	uadd8	r3, r3, ip
    ee16:	faa2 f38c 	sel	r3, r2, ip
    ee1a:	b9e3      	cbnz	r3, ee56 <strlen+0x96>
    ee1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ee20:	fa82 f24c 	uadd8	r2, r2, ip
    ee24:	f100 0008 	add.w	r0, r0, #8
    ee28:	faa4 f28c 	sel	r2, r4, ip
    ee2c:	fa83 f34c 	uadd8	r3, r3, ip
    ee30:	faa2 f38c 	sel	r3, r2, ip
    ee34:	b97b      	cbnz	r3, ee56 <strlen+0x96>
    ee36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ee3a:	f101 0120 	add.w	r1, r1, #32
    ee3e:	fa82 f24c 	uadd8	r2, r2, ip
    ee42:	f100 0008 	add.w	r0, r0, #8
    ee46:	faa4 f28c 	sel	r2, r4, ip
    ee4a:	fa83 f34c 	uadd8	r3, r3, ip
    ee4e:	faa2 f38c 	sel	r3, r2, ip
    ee52:	2b00      	cmp	r3, #0
    ee54:	d0c6      	beq.n	ede4 <strlen+0x24>
    ee56:	2a00      	cmp	r2, #0
    ee58:	bf04      	itt	eq
    ee5a:	3004      	addeq	r0, #4
    ee5c:	461a      	moveq	r2, r3
    ee5e:	ba12      	rev	r2, r2
    ee60:	fab2 f282 	clz	r2, r2
    ee64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    ee68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ee6c:	4770      	bx	lr
    ee6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    ee72:	f004 0503 	and.w	r5, r4, #3
    ee76:	f1c4 0000 	rsb	r0, r4, #0
    ee7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ee7e:	f014 0f04 	tst.w	r4, #4
    ee82:	f891 f040 	pld	[r1, #64]	; 0x40
    ee86:	fa0c f505 	lsl.w	r5, ip, r5
    ee8a:	ea62 0205 	orn	r2, r2, r5
    ee8e:	bf1c      	itt	ne
    ee90:	ea63 0305 	ornne	r3, r3, r5
    ee94:	4662      	movne	r2, ip
    ee96:	f04f 0400 	mov.w	r4, #0
    ee9a:	e7a9      	b.n	edf0 <strlen+0x30>

0000ee9c <__register_exitproc>:
    ee9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eea0:	4d2c      	ldr	r5, [pc, #176]	; (ef54 <__register_exitproc+0xb8>)
    eea2:	4606      	mov	r6, r0
    eea4:	6828      	ldr	r0, [r5, #0]
    eea6:	4698      	mov	r8, r3
    eea8:	460f      	mov	r7, r1
    eeaa:	4691      	mov	r9, r2
    eeac:	f000 f882 	bl	efb4 <__retarget_lock_acquire_recursive>
    eeb0:	4b29      	ldr	r3, [pc, #164]	; (ef58 <__register_exitproc+0xbc>)
    eeb2:	681c      	ldr	r4, [r3, #0]
    eeb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d03e      	beq.n	ef3a <__register_exitproc+0x9e>
    eebc:	685a      	ldr	r2, [r3, #4]
    eebe:	2a1f      	cmp	r2, #31
    eec0:	dc1c      	bgt.n	eefc <__register_exitproc+0x60>
    eec2:	f102 0e01 	add.w	lr, r2, #1
    eec6:	b176      	cbz	r6, eee6 <__register_exitproc+0x4a>
    eec8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eecc:	2401      	movs	r4, #1
    eece:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eed2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eed6:	4094      	lsls	r4, r2
    eed8:	4320      	orrs	r0, r4
    eeda:	2e02      	cmp	r6, #2
    eedc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eee0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eee4:	d023      	beq.n	ef2e <__register_exitproc+0x92>
    eee6:	3202      	adds	r2, #2
    eee8:	f8c3 e004 	str.w	lr, [r3, #4]
    eeec:	6828      	ldr	r0, [r5, #0]
    eeee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    eef2:	f000 f861 	bl	efb8 <__retarget_lock_release_recursive>
    eef6:	2000      	movs	r0, #0
    eef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eefc:	4b17      	ldr	r3, [pc, #92]	; (ef5c <__register_exitproc+0xc0>)
    eefe:	b30b      	cbz	r3, ef44 <__register_exitproc+0xa8>
    ef00:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ef04:	f7ff fdc0 	bl	ea88 <malloc>
    ef08:	4603      	mov	r3, r0
    ef0a:	b1d8      	cbz	r0, ef44 <__register_exitproc+0xa8>
    ef0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ef10:	6002      	str	r2, [r0, #0]
    ef12:	2100      	movs	r1, #0
    ef14:	6041      	str	r1, [r0, #4]
    ef16:	460a      	mov	r2, r1
    ef18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ef1c:	f04f 0e01 	mov.w	lr, #1
    ef20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ef24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ef28:	2e00      	cmp	r6, #0
    ef2a:	d0dc      	beq.n	eee6 <__register_exitproc+0x4a>
    ef2c:	e7cc      	b.n	eec8 <__register_exitproc+0x2c>
    ef2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ef32:	430c      	orrs	r4, r1
    ef34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ef38:	e7d5      	b.n	eee6 <__register_exitproc+0x4a>
    ef3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ef3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ef42:	e7bb      	b.n	eebc <__register_exitproc+0x20>
    ef44:	6828      	ldr	r0, [r5, #0]
    ef46:	f000 f837 	bl	efb8 <__retarget_lock_release_recursive>
    ef4a:	f04f 30ff 	mov.w	r0, #4294967295
    ef4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef52:	bf00      	nop
    ef54:	20000638 	.word	0x20000638
    ef58:	0000f480 	.word	0x0000f480
    ef5c:	0000ea89 	.word	0x0000ea89

0000ef60 <register_fini>:
    ef60:	4b02      	ldr	r3, [pc, #8]	; (ef6c <register_fini+0xc>)
    ef62:	b113      	cbz	r3, ef6a <register_fini+0xa>
    ef64:	4802      	ldr	r0, [pc, #8]	; (ef70 <register_fini+0x10>)
    ef66:	f000 b805 	b.w	ef74 <atexit>
    ef6a:	4770      	bx	lr
    ef6c:	00000000 	.word	0x00000000
    ef70:	0000ef81 	.word	0x0000ef81

0000ef74 <atexit>:
    ef74:	2300      	movs	r3, #0
    ef76:	4601      	mov	r1, r0
    ef78:	461a      	mov	r2, r3
    ef7a:	4618      	mov	r0, r3
    ef7c:	f7ff bf8e 	b.w	ee9c <__register_exitproc>

0000ef80 <__libc_fini_array>:
    ef80:	b538      	push	{r3, r4, r5, lr}
    ef82:	4c0a      	ldr	r4, [pc, #40]	; (efac <__libc_fini_array+0x2c>)
    ef84:	4d0a      	ldr	r5, [pc, #40]	; (efb0 <__libc_fini_array+0x30>)
    ef86:	1b64      	subs	r4, r4, r5
    ef88:	10a4      	asrs	r4, r4, #2
    ef8a:	d00a      	beq.n	efa2 <__libc_fini_array+0x22>
    ef8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ef90:	3b01      	subs	r3, #1
    ef92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ef96:	3c01      	subs	r4, #1
    ef98:	f855 3904 	ldr.w	r3, [r5], #-4
    ef9c:	4798      	blx	r3
    ef9e:	2c00      	cmp	r4, #0
    efa0:	d1f9      	bne.n	ef96 <__libc_fini_array+0x16>
    efa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    efa6:	f000 ba81 	b.w	f4ac <_fini>
    efaa:	bf00      	nop
    efac:	0000f4bc 	.word	0x0000f4bc
    efb0:	0000f4b8 	.word	0x0000f4b8

0000efb4 <__retarget_lock_acquire_recursive>:
    efb4:	4770      	bx	lr
    efb6:	bf00      	nop

0000efb8 <__retarget_lock_release_recursive>:
    efb8:	4770      	bx	lr
    efba:	bf00      	nop
    efbc:	62616e45 	.word	0x62616e45
    efc0:	676e696c 	.word	0x676e696c
    efc4:	61654820 	.word	0x61654820
    efc8:	3a726574 	.word	0x3a726574
    efcc:	00000020 	.word	0x00000020
    efd0:	00092e20 	.word	0x00092e20
    efd4:	74616548 	.word	0x74616548
    efd8:	00207265 	.word	0x00207265
    efdc:	61745320 	.word	0x61745320
    efe0:	20737574 	.word	0x20737574
    efe4:	0000003a 	.word	0x0000003a
    efe8:	00000a0d 	.word	0x00000a0d
    efec:	682f2e2e 	.word	0x682f2e2e
    eff0:	702f6c70 	.word	0x702f6c70
    eff4:	2f74726f 	.word	0x2f74726f
    eff8:	5f6c7068 	.word	0x5f6c7068
    effc:	6f697067 	.word	0x6f697067
    f000:	7361625f 	.word	0x7361625f
    f004:	00682e65 	.word	0x00682e65
    f008:	682f2e2e 	.word	0x682f2e2e
    f00c:	692f6c61 	.word	0x692f6c61
    f010:	756c636e 	.word	0x756c636e
    f014:	682f6564 	.word	0x682f6564
    f018:	775f6c61 	.word	0x775f6c61
    f01c:	682e7464 	.word	0x682e7464
    f020:	00000000 	.word	0x00000000
    f024:	682f2e2e 	.word	0x682f2e2e
    f028:	732f6c61 	.word	0x732f6c61
    f02c:	682f6372 	.word	0x682f6372
    f030:	635f6c61 	.word	0x635f6c61
    f034:	6e656c61 	.word	0x6e656c61
    f038:	2e726164 	.word	0x2e726164
    f03c:	00000063 	.word	0x00000063
    f040:	682f2e2e 	.word	0x682f2e2e
    f044:	732f6c61 	.word	0x732f6c61
    f048:	682f6372 	.word	0x682f6372
    f04c:	635f6c61 	.word	0x635f6c61
    f050:	615f6e61 	.word	0x615f6e61
    f054:	636e7973 	.word	0x636e7973
    f058:	0000632e 	.word	0x0000632e
    f05c:	682f2e2e 	.word	0x682f2e2e
    f060:	732f6c61 	.word	0x732f6c61
    f064:	682f6372 	.word	0x682f6372
    f068:	635f6c61 	.word	0x635f6c61
    f06c:	735f6372 	.word	0x735f6372
    f070:	2e636e79 	.word	0x2e636e79
    f074:	00000063 	.word	0x00000063
    f078:	682f2e2e 	.word	0x682f2e2e
    f07c:	732f6c61 	.word	0x732f6c61
    f080:	682f6372 	.word	0x682f6372
    f084:	695f6c61 	.word	0x695f6c61
    f088:	6d5f6332 	.word	0x6d5f6332
    f08c:	6e79735f 	.word	0x6e79735f
    f090:	00632e63 	.word	0x00632e63
    f094:	682f2e2e 	.word	0x682f2e2e
    f098:	732f6c61 	.word	0x732f6c61
    f09c:	682f6372 	.word	0x682f6372
    f0a0:	705f6c61 	.word	0x705f6c61
    f0a4:	632e6d77 	.word	0x632e6d77
    f0a8:	00000000 	.word	0x00000000
    f0ac:	682f2e2e 	.word	0x682f2e2e
    f0b0:	732f6c61 	.word	0x732f6c61
    f0b4:	682f6372 	.word	0x682f6372
    f0b8:	715f6c61 	.word	0x715f6c61
    f0bc:	5f697073 	.word	0x5f697073
    f0c0:	636e7973 	.word	0x636e7973
    f0c4:	0000632e 	.word	0x0000632e
    f0c8:	682f2e2e 	.word	0x682f2e2e
    f0cc:	732f6c61 	.word	0x732f6c61
    f0d0:	682f6372 	.word	0x682f6372
    f0d4:	735f6c61 	.word	0x735f6c61
    f0d8:	6d5f6970 	.word	0x6d5f6970
    f0dc:	6e79735f 	.word	0x6e79735f
    f0e0:	00632e63 	.word	0x00632e63
    f0e4:	682f2e2e 	.word	0x682f2e2e
    f0e8:	732f6c61 	.word	0x732f6c61
    f0ec:	682f6372 	.word	0x682f6372
    f0f0:	745f6c61 	.word	0x745f6c61
    f0f4:	72656d69 	.word	0x72656d69
    f0f8:	0000632e 	.word	0x0000632e
    f0fc:	682f2e2e 	.word	0x682f2e2e
    f100:	752f6c61 	.word	0x752f6c61
    f104:	736c6974 	.word	0x736c6974
    f108:	6372732f 	.word	0x6372732f
    f10c:	6974752f 	.word	0x6974752f
    f110:	6c5f736c 	.word	0x6c5f736c
    f114:	2e747369 	.word	0x2e747369
    f118:	00000063 	.word	0x00000063

0000f11c <_map>:
    f11c:	00000000 00000040 00000001 00000021     ....@.......!...
    f12c:	00000003 00000003 00000004 00000004     ................
    f13c:	00000005 00000005 00000006 00000056     ............V...
    f14c:	00000007 00000057 00000008 00000028     ....W.......(...
    f15c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    f16c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000f17c <user_mux_confs>:
    f17c:	00020100 00000000 00000000 00000000     ................
	...

0000f1c0 <channel_confs>:
    f1c0:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000f200 <interrupt_cfg>:
	...
    f280:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f290:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f2a0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f2b0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f2c0:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f2d0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f2e0:	43000400 43000800 43000c00              ...C...C...C

0000f2ec <sercomspi_regs>:
    f2ec:	0020000c 00020000 00000000 01ff0001     .. .............
    f2fc:	30000c04 02000000 00000000 ff001700     ...0............
    f30c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f31c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f32c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f33c:	43001400 43001800                       ...C...C

0000f344 <_usb_ep_cfgs>:
    f344:	20000984 00000000 00000040 200009c4     ... ....@...... 
    f354:	20000a04 00400040 20000a44 20000a84     ... @.@.D.. ... 
    f364:	00400040 20000ac4 20000b04 00400040     @.@.... ... @.@.
    f374:	20000b44 20000b84 00400040 00000804     D.. ... @.@.....
    f384:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f394:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f3a4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f3b4:	7361625f 00682e65                       _base.h.

0000f3bc <n25q256a_interface>:
    f3bc:	0000b945 0000b9e9 0000baf9 0000bcb1     E...............
    f3cc:	0000bd41 752f2e2e 642f6273 63697665     A...../usb/devic
    f3dc:	73752f65 2e636462 00000063              e/usbdc.c...

0000f3e8 <_ZTV9CDC_Class>:
	...
    f3f0:	0000e1bd 0000e29d 0000de41 0000e185     ........A.......
    f400:	0000e335 0000e149 0000e05d 0000e0ad     5...I...].......
    f410:	0000e1a5 0000e205                       ........

0000f418 <_ZTV6Stream>:
	...
    f420:	0000ea9d 0000e4dd 0000de41 0000de55     ........A...U...
    f430:	0000ea9d 0000ea9d 0000ea9d 2e257830     ............0x%.
    f440:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f450:	0066766f                                ovf.

0000f454 <_ZTV5Print>:
	...
    f45c:	0000ea9d 0000e4dd 0000de41 0000de55     ........A...U...
    f46c:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f47c:	00632e6f                                o.c.

0000f480 <_global_impure_ptr>:
    f480:	20000210                                ... 

0000f484 <_init>:
    f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f486:	bf00      	nop
    f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f48a:	bc08      	pop	{r3}
    f48c:	469e      	mov	lr, r3
    f48e:	4770      	bx	lr

0000f490 <__init_array_start>:
    f490:	0000ef61 	.word	0x0000ef61

0000f494 <__frame_dummy_init_array_entry>:
    f494:	00000289 0000083d 00000bad 0000de09     ....=...........
    f4a4:	0000e48d 0000ea75                       ....u...

0000f4ac <_fini>:
    f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4ae:	bf00      	nop
    f4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f4b2:	bc08      	pop	{r3}
    f4b4:	469e      	mov	lr, r3
    f4b6:	4770      	bx	lr

0000f4b8 <__fini_array_start>:
    f4b8:	00000265 	.word	0x00000265
