
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f038  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f038  0000f038  0001f038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0000f040  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002060c  2**0
                  CONTENTS
  5 .bss          00000c84  2000060c  0000f64c  0002060c  2**2
                  ALLOC
  6 .stack        00010000  20001290  000102d0  0002060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00063333  00000000  00000000  00020693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000087a3  00000000  00000000  000839c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a8eb  00000000  00000000  0008c169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f30  00000000  00000000  000a6a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c10  00000000  00000000  000a9984  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004b329  00000000  00000000  000ac594  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000344ce  00000000  00000000  000f78bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013bbe5  00000000  00000000  0012bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c790  00000000  00000000  00267970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 12 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	0d 5c 00 00 29 4a 00 00 39 4a 00 00 55 03 00 00     .\..)J..9J..U...
      7c:	49 4a 00 00 59 4a 00 00 69 4a 00 00 79 4a 00 00     IJ..YJ..iJ..yJ..
      8c:	89 4a 00 00 99 4a 00 00 a9 4a 00 00 55 03 00 00     .J...J...J..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 6d 3e 00 00 fd aa 00 00     U...U...m>......
     184:	0d ab 00 00 1d ab 00 00 2d ab 00 00 55 03 00 00     ........-...U...
     194:	19 75 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .u..U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 35 75 00 00     U...U...U...5u..
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 f9 81 00 00 55 03 00 00     U...U.......U...
     1f4:	15 82 00 00 55 03 00 00 31 82 00 00 4d 82 00 00     ....U...1...M...
     204:	69 82 00 00 85 82 00 00 55 03 00 00 55 03 00 00     i.......U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0000f040 	.word	0x0000f040

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f040 	.word	0x0000f040
     2c4:	20000610 	.word	0x20000610
     2c8:	0000f040 	.word	0x0000f040
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0000f040 	.word	0x0000f040
     334:	20000000 	.word	0x20000000
     338:	2000060c 	.word	0x2000060c
     33c:	2000060c 	.word	0x2000060c
     340:	20001290 	.word	0x20001290
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000e6e5 	.word	0x0000e6e5
     350:	000004bd 	.word	0x000004bd

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	3318      	adds	r3, #24
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     380:	b480      	push	{r7}
     382:	b085      	sub	sp, #20
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	460b      	mov	r3, r1
     38a:	607a      	str	r2, [r7, #4]
     38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	7afb      	ldrb	r3, [r7, #11]
     390:	68fa      	ldr	r2, [r7, #12]
     392:	01db      	lsls	r3, r3, #7
     394:	4413      	add	r3, r2
     396:	3314      	adds	r3, #20
     398:	687a      	ldr	r2, [r7, #4]
     39a:	601a      	str	r2, [r3, #0]
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr

000003a6 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3a6:	b480      	push	{r7}
     3a8:	b085      	sub	sp, #20
     3aa:	af00      	add	r7, sp, #0
     3ac:	60f8      	str	r0, [r7, #12]
     3ae:	460b      	mov	r3, r1
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3b4:	7afb      	ldrb	r3, [r7, #11]
     3b6:	68fa      	ldr	r2, [r7, #12]
     3b8:	01db      	lsls	r3, r3, #7
     3ba:	4413      	add	r3, r2
     3bc:	331c      	adds	r3, #28
     3be:	687a      	ldr	r2, [r7, #4]
     3c0:	601a      	str	r2, [r3, #0]
}
     3c2:	bf00      	nop
     3c4:	3714      	adds	r7, #20
     3c6:	46bd      	mov	sp, r7
     3c8:	bc80      	pop	{r7}
     3ca:	4770      	bx	lr

000003cc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	4603      	mov	r3, r0
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	71fb      	strb	r3, [r7, #7]
     3d8:	4613      	mov	r3, r2
     3da:	71bb      	strb	r3, [r7, #6]
	if (level) {
     3dc:	79bb      	ldrb	r3, [r7, #6]
     3de:	2b00      	cmp	r3, #0
     3e0:	d006      	beq.n	3f0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     3e2:	79fb      	ldrb	r3, [r7, #7]
     3e4:	683a      	ldr	r2, [r7, #0]
     3e6:	4619      	mov	r1, r3
     3e8:	4806      	ldr	r0, [pc, #24]	; (404 <_gpio_set_level+0x38>)
     3ea:	4b07      	ldr	r3, [pc, #28]	; (408 <_gpio_set_level+0x3c>)
     3ec:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     3ee:	e005      	b.n	3fc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	683a      	ldr	r2, [r7, #0]
     3f4:	4619      	mov	r1, r3
     3f6:	4803      	ldr	r0, [pc, #12]	; (404 <_gpio_set_level+0x38>)
     3f8:	4b04      	ldr	r3, [pc, #16]	; (40c <_gpio_set_level+0x40>)
     3fa:	4798      	blx	r3
}
     3fc:	bf00      	nop
     3fe:	3708      	adds	r7, #8
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	41008000 	.word	0x41008000
     408:	0000035b 	.word	0x0000035b
     40c:	00000381 	.word	0x00000381

00000410 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	4603      	mov	r3, r0
     418:	6039      	str	r1, [r7, #0]
     41a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     41c:	79fb      	ldrb	r3, [r7, #7]
     41e:	683a      	ldr	r2, [r7, #0]
     420:	4619      	mov	r1, r3
     422:	4803      	ldr	r0, [pc, #12]	; (430 <_gpio_toggle_level+0x20>)
     424:	4b03      	ldr	r3, [pc, #12]	; (434 <_gpio_toggle_level+0x24>)
     426:	4798      	blx	r3
}
     428:	bf00      	nop
     42a:	3708      	adds	r7, #8
     42c:	46bd      	mov	sp, r7
     42e:	bd80      	pop	{r7, pc}
     430:	41008000 	.word	0x41008000
     434:	000003a7 	.word	0x000003a7

00000438 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	4603      	mov	r3, r0
     440:	460a      	mov	r2, r1
     442:	71fb      	strb	r3, [r7, #7]
     444:	4613      	mov	r3, r2
     446:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     448:	79fb      	ldrb	r3, [r7, #7]
     44a:	115b      	asrs	r3, r3, #5
     44c:	b2d8      	uxtb	r0, r3
     44e:	79fb      	ldrb	r3, [r7, #7]
     450:	f003 031f 	and.w	r3, r3, #31
     454:	2201      	movs	r2, #1
     456:	fa02 f303 	lsl.w	r3, r2, r3
     45a:	79ba      	ldrb	r2, [r7, #6]
     45c:	4619      	mov	r1, r3
     45e:	4b03      	ldr	r3, [pc, #12]	; (46c <gpio_set_pin_level+0x34>)
     460:	4798      	blx	r3
}
     462:	bf00      	nop
     464:	3708      	adds	r7, #8
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}
     46a:	bf00      	nop
     46c:	000003cd 	.word	0x000003cd

00000470 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	4603      	mov	r3, r0
     478:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     47a:	79fb      	ldrb	r3, [r7, #7]
     47c:	115b      	asrs	r3, r3, #5
     47e:	b2d8      	uxtb	r0, r3
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	f003 031f 	and.w	r3, r3, #31
     486:	2201      	movs	r2, #1
     488:	fa02 f303 	lsl.w	r3, r2, r3
     48c:	4619      	mov	r1, r3
     48e:	4b03      	ldr	r3, [pc, #12]	; (49c <gpio_toggle_pin_level+0x2c>)
     490:	4798      	blx	r3
}
     492:	bf00      	nop
     494:	3708      	adds	r7, #8
     496:	46bd      	mov	sp, r7
     498:	bd80      	pop	{r7, pc}
     49a:	bf00      	nop
     49c:	00000411 	.word	0x00000411

000004a0 <_ZL13FirmwareAlivePK10timer_task>:
//static Maintenance_Tool	toolApp;
//static SingleTaskMessage singleTask;
#define DELAY_HEATER_COMMUNICATION 1000

static void FirmwareAlive(const struct timer_task *const timer_task)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
     4a8:	2101      	movs	r1, #1
     4aa:	2007      	movs	r0, #7
     4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <_ZL13FirmwareAlivePK10timer_task+0x18>)
     4ae:	4798      	blx	r3
}
     4b0:	bf00      	nop
     4b2:	3708      	adds	r7, #8
     4b4:	46bd      	mov	sp, r7
     4b6:	bd80      	pop	{r7, pc}
     4b8:	00000439 	.word	0x00000439

000004bc <main>:

int main(void)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
	atmel_start_init();
     4c2:	4b3d      	ldr	r3, [pc, #244]	; (5b8 <main+0xfc>)
     4c4:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     4c6:	483d      	ldr	r0, [pc, #244]	; (5bc <main+0x100>)
     4c8:	4b3d      	ldr	r3, [pc, #244]	; (5c0 <main+0x104>)
     4ca:	4798      	blx	r3
	delay_ms(100);
     4cc:	2064      	movs	r0, #100	; 0x64
     4ce:	4b3d      	ldr	r3, [pc, #244]	; (5c4 <main+0x108>)
     4d0:	4798      	blx	r3
// 	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
// 	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     4d2:	483d      	ldr	r0, [pc, #244]	; (5c8 <main+0x10c>)
     4d4:	4b3d      	ldr	r3, [pc, #244]	; (5cc <main+0x110>)
     4d6:	4798      	blx	r3
     4d8:	4603      	mov	r3, r0
     4da:	607b      	str	r3, [r7, #4]
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     4dc:	22fa      	movs	r2, #250	; 0xfa
     4de:	493c      	ldr	r1, [pc, #240]	; (5d0 <main+0x114>)
     4e0:	483c      	ldr	r0, [pc, #240]	; (5d4 <main+0x118>)
     4e2:	4b3d      	ldr	r3, [pc, #244]	; (5d8 <main+0x11c>)
     4e4:	4798      	blx	r3
	gpio_set_pin_level(LED0,true);
     4e6:	2101      	movs	r1, #1
     4e8:	2052      	movs	r0, #82	; 0x52
     4ea:	4b3c      	ldr	r3, [pc, #240]	; (5dc <main+0x120>)
     4ec:	4798      	blx	r3
	while (!heater.Init())
     4ee:	483c      	ldr	r0, [pc, #240]	; (5e0 <main+0x124>)
     4f0:	4b3c      	ldr	r3, [pc, #240]	; (5e4 <main+0x128>)
     4f2:	4798      	blx	r3
     4f4:	4603      	mov	r3, r0
     4f6:	f083 0301 	eor.w	r3, r3, #1
     4fa:	b2db      	uxtb	r3, r3
     4fc:	2b00      	cmp	r3, #0
     4fe:	d006      	beq.n	50e <main+0x52>
	{
		delay_ms(200);
     500:	20c8      	movs	r0, #200	; 0xc8
     502:	4b30      	ldr	r3, [pc, #192]	; (5c4 <main+0x108>)
     504:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
     506:	2052      	movs	r0, #82	; 0x52
     508:	4b37      	ldr	r3, [pc, #220]	; (5e8 <main+0x12c>)
     50a:	4798      	blx	r3
	while (!heater.Init())
     50c:	e7ef      	b.n	4ee <main+0x32>
		
	}
	gpio_set_pin_level(LED0,true);
     50e:	2101      	movs	r1, #1
     510:	2052      	movs	r0, #82	; 0x52
     512:	4b32      	ldr	r3, [pc, #200]	; (5dc <main+0x120>)
     514:	4798      	blx	r3
// 			}
// 			
// 		} 
// 		else
// 		{
			enableMask=0xff;
     516:	23ff      	movs	r3, #255	; 0xff
     518:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < 4; i++)
     51a:	2300      	movs	r3, #0
     51c:	707b      	strb	r3, [r7, #1]
     51e:	787b      	ldrb	r3, [r7, #1]
     520:	2b03      	cmp	r3, #3
     522:	dcf8      	bgt.n	516 <main+0x5a>
			{
			
					delay_ms(1);
     524:	2001      	movs	r0, #1
     526:	4b27      	ldr	r3, [pc, #156]	; (5c4 <main+0x108>)
     528:	4798      	blx	r3
					usb<<"Enabling Heater: "<<i<<" .\t";
     52a:	4930      	ldr	r1, [pc, #192]	; (5ec <main+0x130>)
     52c:	4823      	ldr	r0, [pc, #140]	; (5bc <main+0x100>)
     52e:	4b30      	ldr	r3, [pc, #192]	; (5f0 <main+0x134>)
     530:	4798      	blx	r3
     532:	4602      	mov	r2, r0
     534:	1c7b      	adds	r3, r7, #1
     536:	4619      	mov	r1, r3
     538:	4610      	mov	r0, r2
     53a:	4b2e      	ldr	r3, [pc, #184]	; (5f4 <main+0x138>)
     53c:	4798      	blx	r3
     53e:	4603      	mov	r3, r0
     540:	492d      	ldr	r1, [pc, #180]	; (5f8 <main+0x13c>)
     542:	4618      	mov	r0, r3
     544:	4b2d      	ldr	r3, [pc, #180]	; (5fc <main+0x140>)
     546:	4798      	blx	r3
					heater.Enable(i);
     548:	787b      	ldrb	r3, [r7, #1]
     54a:	4619      	mov	r1, r3
     54c:	4824      	ldr	r0, [pc, #144]	; (5e0 <main+0x124>)
     54e:	4b2c      	ldr	r3, [pc, #176]	; (600 <main+0x144>)
     550:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     556:	4b1b      	ldr	r3, [pc, #108]	; (5c4 <main+0x108>)
     558:	4798      	blx	r3
					status= heater.ReadStatus();
     55a:	4821      	ldr	r0, [pc, #132]	; (5e0 <main+0x124>)
     55c:	4b29      	ldr	r3, [pc, #164]	; (604 <main+0x148>)
     55e:	4798      	blx	r3
     560:	4603      	mov	r3, r0
     562:	70bb      	strb	r3, [r7, #2]
					usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
     564:	4928      	ldr	r1, [pc, #160]	; (608 <main+0x14c>)
     566:	4815      	ldr	r0, [pc, #84]	; (5bc <main+0x100>)
     568:	4b28      	ldr	r3, [pc, #160]	; (60c <main+0x150>)
     56a:	4798      	blx	r3
     56c:	4602      	mov	r2, r0
     56e:	1c7b      	adds	r3, r7, #1
     570:	4619      	mov	r1, r3
     572:	4610      	mov	r0, r2
     574:	4b1f      	ldr	r3, [pc, #124]	; (5f4 <main+0x138>)
     576:	4798      	blx	r3
     578:	4603      	mov	r3, r0
     57a:	4925      	ldr	r1, [pc, #148]	; (610 <main+0x154>)
     57c:	4618      	mov	r0, r3
     57e:	4b25      	ldr	r3, [pc, #148]	; (614 <main+0x158>)
     580:	4798      	blx	r3
     582:	787b      	ldrb	r3, [r7, #1]
     584:	461a      	mov	r2, r3
     586:	4b16      	ldr	r3, [pc, #88]	; (5e0 <main+0x124>)
     588:	4413      	add	r3, r2
     58a:	3303      	adds	r3, #3
     58c:	4619      	mov	r1, r3
     58e:	4b22      	ldr	r3, [pc, #136]	; (618 <main+0x15c>)
     590:	4798      	blx	r3
     592:	4603      	mov	r3, r0
     594:	4921      	ldr	r1, [pc, #132]	; (61c <main+0x160>)
     596:	4618      	mov	r0, r3
     598:	4b21      	ldr	r3, [pc, #132]	; (620 <main+0x164>)
     59a:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     59c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <main+0x108>)
     5a2:	4798      	blx	r3
					heater.Disable(i);
     5a4:	787b      	ldrb	r3, [r7, #1]
     5a6:	4619      	mov	r1, r3
     5a8:	480d      	ldr	r0, [pc, #52]	; (5e0 <main+0x124>)
     5aa:	4b1e      	ldr	r3, [pc, #120]	; (624 <main+0x168>)
     5ac:	4798      	blx	r3
			for (uint8_t i = 0; i < 4; i++)
     5ae:	787b      	ldrb	r3, [r7, #1]
     5b0:	3301      	adds	r3, #1
     5b2:	b2db      	uxtb	r3, r3
     5b4:	707b      	strb	r3, [r7, #1]
     5b6:	e7b2      	b.n	51e <main+0x62>
     5b8:	00000a09 	.word	0x00000a09
     5bc:	20000f00 	.word	0x20000f00
     5c0:	0000da05 	.word	0x0000da05
     5c4:	00002155 	.word	0x00002155
     5c8:	200010ec 	.word	0x200010ec
     5cc:	000025a5 	.word	0x000025a5
     5d0:	000004a1 	.word	0x000004a1
     5d4:	20000ea8 	.word	0x20000ea8
     5d8:	0000d689 	.word	0x0000d689
     5dc:	00000439 	.word	0x00000439
     5e0:	20000678 	.word	0x20000678
     5e4:	0000075d 	.word	0x0000075d
     5e8:	00000471 	.word	0x00000471
     5ec:	0000eb3c 	.word	0x0000eb3c
     5f0:	00000629 	.word	0x00000629
     5f4:	00000649 	.word	0x00000649
     5f8:	0000eb50 	.word	0x0000eb50
     5fc:	00000671 	.word	0x00000671
     600:	000008b1 	.word	0x000008b1
     604:	00000845 	.word	0x00000845
     608:	0000eb54 	.word	0x0000eb54
     60c:	00000691 	.word	0x00000691
     610:	0000eb5c 	.word	0x0000eb5c
     614:	000006b1 	.word	0x000006b1
     618:	000006d1 	.word	0x000006d1
     61c:	0000eb68 	.word	0x0000eb68
     620:	000006f9 	.word	0x000006f9
     624:	000008e5 	.word	0x000008e5

00000628 <_ZlsIA18_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     628:	b580      	push	{r7, lr}
     62a:	b082      	sub	sp, #8
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     632:	6839      	ldr	r1, [r7, #0]
     634:	6878      	ldr	r0, [r7, #4]
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZlsIA18_cER5PrintS2_RKT_+0x1c>)
     638:	4798      	blx	r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bd80      	pop	{r7, pc}
     644:	0000de69 	.word	0x0000de69

00000648 <_ZlsIhER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
     650:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     652:	683b      	ldr	r3, [r7, #0]
     654:	781b      	ldrb	r3, [r3, #0]
     656:	220a      	movs	r2, #10
     658:	4619      	mov	r1, r3
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	4b03      	ldr	r3, [pc, #12]	; (66c <_ZlsIhER5PrintS1_RKT_+0x24>)
     65e:	4798      	blx	r3
     660:	687b      	ldr	r3, [r7, #4]
     662:	4618      	mov	r0, r3
     664:	3708      	adds	r7, #8
     666:	46bd      	mov	sp, r7
     668:	bd80      	pop	{r7, pc}
     66a:	bf00      	nop
     66c:	0000dead 	.word	0x0000dead

00000670 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
     678:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     67a:	6839      	ldr	r1, [r7, #0]
     67c:	6878      	ldr	r0, [r7, #4]
     67e:	4b03      	ldr	r3, [pc, #12]	; (68c <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     680:	4798      	blx	r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	4618      	mov	r0, r3
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	0000de69 	.word	0x0000de69

00000690 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     69a:	6839      	ldr	r1, [r7, #0]
     69c:	6878      	ldr	r0, [r7, #4]
     69e:	4b03      	ldr	r3, [pc, #12]	; (6ac <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
     6a0:	4798      	blx	r3
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	4618      	mov	r0, r3
     6a6:	3708      	adds	r7, #8
     6a8:	46bd      	mov	sp, r7
     6aa:	bd80      	pop	{r7, pc}
     6ac:	0000de69 	.word	0x0000de69

000006b0 <_ZlsIA10_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
     6b8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6ba:	6839      	ldr	r1, [r7, #0]
     6bc:	6878      	ldr	r0, [r7, #4]
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <_ZlsIA10_cER5PrintS2_RKT_+0x1c>)
     6c0:	4798      	blx	r3
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	4618      	mov	r0, r3
     6c6:	3708      	adds	r7, #8
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}
     6cc:	0000de69 	.word	0x0000de69

000006d0 <_ZlsIbER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6da:	683b      	ldr	r3, [r7, #0]
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	220a      	movs	r2, #10
     6e0:	4619      	mov	r1, r3
     6e2:	6878      	ldr	r0, [r7, #4]
     6e4:	4b03      	ldr	r3, [pc, #12]	; (6f4 <_ZlsIbER5PrintS1_RKT_+0x24>)
     6e6:	4798      	blx	r3
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4618      	mov	r0, r3
     6ec:	3708      	adds	r7, #8
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	0000ded5 	.word	0x0000ded5

000006f8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
     700:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     702:	6839      	ldr	r1, [r7, #0]
     704:	6878      	ldr	r0, [r7, #4]
     706:	4b03      	ldr	r3, [pc, #12]	; (714 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     708:	4798      	blx	r3
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	4618      	mov	r0, r3
     70e:	3708      	adds	r7, #8
     710:	46bd      	mov	sp, r7
     712:	bd80      	pop	{r7, pc}
     714:	0000de69 	.word	0x0000de69

00000718 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
     718:	b480      	push	{r7}
     71a:	b083      	sub	sp, #12
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
     720:	4a07      	ldr	r2, [pc, #28]	; (740 <_ZN18SingleHeater_ClassC1Ev+0x28>)
     722:	687b      	ldr	r3, [r7, #4]
     724:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
     726:	687b      	ldr	r3, [r7, #4]
     728:	4a06      	ldr	r2, [pc, #24]	; (744 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
     72a:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	2200      	movs	r2, #0
     730:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
     732:	687b      	ldr	r3, [r7, #4]
     734:	4618      	mov	r0, r3
     736:	370c      	adds	r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	20000628 	.word	0x20000628
     744:	2000062c 	.word	0x2000062c

00000748 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
     748:	b480      	push	{r7}
     74a:	b083      	sub	sp, #12
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
     750:	687b      	ldr	r3, [r7, #4]
     752:	4618      	mov	r0, r3
     754:	370c      	adds	r7, #12
     756:	46bd      	mov	sp, r7
     758:	bc80      	pop	{r7}
     75a:	4770      	bx	lr

0000075c <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
     75c:	b580      	push	{r7, lr}
     75e:	b082      	sub	sp, #8
     760:	af00      	add	r7, sp, #0
     762:	6078      	str	r0, [r7, #4]
		i2c->Init();
     764:	687b      	ldr	r3, [r7, #4]
     766:	699b      	ldr	r3, [r3, #24]
     768:	4618      	mov	r0, r3
     76a:	4b15      	ldr	r3, [pc, #84]	; (7c0 <_ZN18SingleHeater_Class4InitEv+0x64>)
     76c:	4798      	blx	r3
		if (i2c->isOK)
     76e:	687b      	ldr	r3, [r7, #4]
     770:	699b      	ldr	r3, [r3, #24]
     772:	7a5b      	ldrb	r3, [r3, #9]
     774:	b2db      	uxtb	r3, r3
     776:	2b00      	cmp	r3, #0
     778:	d014      	beq.n	7a4 <_ZN18SingleHeater_Class4InitEv+0x48>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
     77a:	6878      	ldr	r0, [r7, #4]
     77c:	4b11      	ldr	r3, [pc, #68]	; (7c4 <_ZN18SingleHeater_Class4InitEv+0x68>)
     77e:	4798      	blx	r3
			expanders[0]->SetPortInput();
     780:	687b      	ldr	r3, [r7, #4]
     782:	68db      	ldr	r3, [r3, #12]
     784:	4618      	mov	r0, r3
     786:	4b10      	ldr	r3, [pc, #64]	; (7c8 <_ZN18SingleHeater_Class4InitEv+0x6c>)
     788:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	691b      	ldr	r3, [r3, #16]
     78e:	4618      	mov	r0, r3
     790:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_ZN18SingleHeater_Class4InitEv+0x70>)
     792:	4798      	blx	r3
			isOK=SelfTest();
     794:	6878      	ldr	r0, [r7, #4]
     796:	4b0e      	ldr	r3, [pc, #56]	; (7d0 <_ZN18SingleHeater_Class4InitEv+0x74>)
     798:	4798      	blx	r3
     79a:	4603      	mov	r3, r0
     79c:	461a      	mov	r2, r3
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	701a      	strb	r2, [r3, #0]
     7a2:	e000      	b.n	7a6 <_ZN18SingleHeater_Class4InitEv+0x4a>
		}
		else
		{
			asm("nop");
     7a4:	bf00      	nop
		}
		isOK=i2c->isOK;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	699b      	ldr	r3, [r3, #24]
     7aa:	7a5b      	ldrb	r3, [r3, #9]
     7ac:	b2da      	uxtb	r2, r3
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	701a      	strb	r2, [r3, #0]
		return isOK;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	781b      	ldrb	r3, [r3, #0]
     7b6:	b2db      	uxtb	r3, r3
}
     7b8:	4618      	mov	r0, r3
     7ba:	3708      	adds	r7, #8
     7bc:	46bd      	mov	sp, r7
     7be:	bd80      	pop	{r7, pc}
     7c0:	0000d105 	.word	0x0000d105
     7c4:	000007d5 	.word	0x000007d5
     7c8:	0000d3d9 	.word	0x0000d3d9
     7cc:	0000d41d 	.word	0x0000d41d
     7d0:	00000921 	.word	0x00000921

000007d4 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
     7d4:	b580      	push	{r7, lr}
     7d6:	b084      	sub	sp, #16
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     7dc:	2300      	movs	r3, #0
     7de:	60fb      	str	r3, [r7, #12]
     7e0:	68fb      	ldr	r3, [r7, #12]
     7e2:	2b01      	cmp	r3, #1
     7e4:	dc25      	bgt.n	832 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
     7e6:	68fa      	ldr	r2, [r7, #12]
     7e8:	4613      	mov	r3, r2
     7ea:	00db      	lsls	r3, r3, #3
     7ec:	1a9b      	subs	r3, r3, r2
     7ee:	009b      	lsls	r3, r3, #2
     7f0:	4a12      	ldr	r2, [pc, #72]	; (83c <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
     7f2:	441a      	add	r2, r3
     7f4:	6879      	ldr	r1, [r7, #4]
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	3302      	adds	r3, #2
     7fa:	009b      	lsls	r3, r3, #2
     7fc:	440b      	add	r3, r1
     7fe:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
     800:	687a      	ldr	r2, [r7, #4]
     802:	68fb      	ldr	r3, [r7, #12]
     804:	3302      	adds	r3, #2
     806:	009b      	lsls	r3, r3, #2
     808:	4413      	add	r3, r2
     80a:	685a      	ldr	r2, [r3, #4]
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     810:	687b      	ldr	r3, [r7, #4]
     812:	6958      	ldr	r0, [r3, #20]
     814:	68fb      	ldr	r3, [r7, #12]
     816:	b25b      	sxtb	r3, r3
     818:	f043 0320 	orr.w	r3, r3, #32
     81c:	b25b      	sxtb	r3, r3
     81e:	b2d9      	uxtb	r1, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	699b      	ldr	r3, [r3, #24]
     824:	461a      	mov	r2, r3
     826:	4b06      	ldr	r3, [pc, #24]	; (840 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
     828:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     82a:	68fb      	ldr	r3, [r7, #12]
     82c:	3301      	adds	r3, #1
     82e:	60fb      	str	r3, [r7, #12]
     830:	e7d6      	b.n	7e0 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
     832:	bf00      	nop
     834:	4618      	mov	r0, r3
     836:	3710      	adds	r7, #16
     838:	46bd      	mov	sp, r7
     83a:	bd80      	pop	{r7, pc}
     83c:	20000640 	.word	0x20000640
     840:	0000d271 	.word	0x0000d271

00000844 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	68db      	ldr	r3, [r3, #12]
     850:	4618      	mov	r0, r3
     852:	4b16      	ldr	r3, [pc, #88]	; (8ac <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
     854:	4798      	blx	r3
     856:	4603      	mov	r3, r0
     858:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     85a:	7bbb      	ldrb	r3, [r7, #14]
     85c:	f003 0301 	and.w	r3, r3, #1
     860:	2b00      	cmp	r3, #0
     862:	bf14      	ite	ne
     864:	2301      	movne	r3, #1
     866:	2300      	moveq	r3, #0
     868:	b2da      	uxtb	r2, r3
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
     86e:	2300      	movs	r3, #0
     870:	73fb      	strb	r3, [r7, #15]
     872:	7bfb      	ldrb	r3, [r7, #15]
     874:	2b03      	cmp	r3, #3
     876:	dc14      	bgt.n	8a2 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     878:	7bfb      	ldrb	r3, [r7, #15]
     87a:	7bb9      	ldrb	r1, [r7, #14]
     87c:	7bfa      	ldrb	r2, [r7, #15]
     87e:	3201      	adds	r2, #1
     880:	fa41 f202 	asr.w	r2, r1, r2
     884:	f002 0201 	and.w	r2, r2, #1
     888:	2a00      	cmp	r2, #0
     88a:	bf14      	ite	ne
     88c:	2201      	movne	r2, #1
     88e:	2200      	moveq	r2, #0
     890:	b2d1      	uxtb	r1, r2
     892:	687a      	ldr	r2, [r7, #4]
     894:	4413      	add	r3, r2
     896:	460a      	mov	r2, r1
     898:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
     89a:	7bfb      	ldrb	r3, [r7, #15]
     89c:	3301      	adds	r3, #1
     89e:	73fb      	strb	r3, [r7, #15]
     8a0:	e7e7      	b.n	872 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
     8a2:	7bbb      	ldrb	r3, [r7, #14]
}
     8a4:	4618      	mov	r0, r3
     8a6:	3710      	adds	r7, #16
     8a8:	46bd      	mov	sp, r7
     8aa:	bd80      	pop	{r7, pc}
     8ac:	0000d355 	.word	0x0000d355

000008b0 <_ZN18SingleHeater_Class6EnableEh>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
     8b8:	460b      	mov	r3, r1
     8ba:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	691b      	ldr	r3, [r3, #16]
     8c0:	78f9      	ldrb	r1, [r7, #3]
     8c2:	2200      	movs	r2, #0
     8c4:	4618      	mov	r0, r3
     8c6:	4b06      	ldr	r3, [pc, #24]	; (8e0 <_ZN18SingleHeater_Class6EnableEh+0x30>)
     8c8:	4798      	blx	r3
     8ca:	4603      	mov	r3, r0
     8cc:	461a      	mov	r2, r3
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	7adb      	ldrb	r3, [r3, #11]
}
     8d6:	4618      	mov	r0, r3
     8d8:	3708      	adds	r7, #8
     8da:	46bd      	mov	sp, r7
     8dc:	bd80      	pop	{r7, pc}
     8de:	bf00      	nop
     8e0:	0000d515 	.word	0x0000d515

000008e4 <_ZN18SingleHeater_Class7DisableEh>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
	return uint8_t(enabled);
}

uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	460b      	mov	r3, r1
     8ee:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	691b      	ldr	r3, [r3, #16]
     8f4:	78f9      	ldrb	r1, [r7, #3]
     8f6:	2201      	movs	r2, #1
     8f8:	4618      	mov	r0, r3
     8fa:	4b08      	ldr	r3, [pc, #32]	; (91c <_ZN18SingleHeater_Class7DisableEh+0x38>)
     8fc:	4798      	blx	r3
     8fe:	4603      	mov	r3, r0
     900:	2b00      	cmp	r3, #0
     902:	d001      	beq.n	908 <_ZN18SingleHeater_Class7DisableEh+0x24>
     904:	2200      	movs	r2, #0
     906:	e000      	b.n	90a <_ZN18SingleHeater_Class7DisableEh+0x26>
     908:	2201      	movs	r2, #1
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     90e:	687b      	ldr	r3, [r7, #4]
     910:	7adb      	ldrb	r3, [r3, #11]
}
     912:	4618      	mov	r0, r3
     914:	3708      	adds	r7, #8
     916:	46bd      	mov	sp, r7
     918:	bd80      	pop	{r7, pc}
     91a:	bf00      	nop
     91c:	0000d515 	.word	0x0000d515

00000920 <_ZN18SingleHeater_Class8SelfTestEv>:



bool SingleHeater_Class::SelfTest(void){
     920:	b480      	push	{r7}
     922:	b083      	sub	sp, #12
     924:	af00      	add	r7, sp, #0
     926:	6078      	str	r0, [r7, #4]
	return true;
     928:	2301      	movs	r3, #1
}
     92a:	4618      	mov	r0, r3
     92c:	370c      	adds	r7, #12
     92e:	46bd      	mov	sp, r7
     930:	bc80      	pop	{r7}
     932:	4770      	bx	lr

00000934 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     934:	b590      	push	{r4, r7, lr}
     936:	b083      	sub	sp, #12
     938:	af00      	add	r7, sp, #0
     93a:	6078      	str	r0, [r7, #4]
     93c:	4c05      	ldr	r4, [pc, #20]	; (954 <__tcf_0+0x20>)
     93e:	4b06      	ldr	r3, [pc, #24]	; (958 <__tcf_0+0x24>)
     940:	429c      	cmp	r4, r3
     942:	d004      	beq.n	94e <__tcf_0+0x1a>
     944:	3c1c      	subs	r4, #28
     946:	4620      	mov	r0, r4
     948:	4b04      	ldr	r3, [pc, #16]	; (95c <__tcf_0+0x28>)
     94a:	4798      	blx	r3
     94c:	e7f7      	b.n	93e <__tcf_0+0xa>
     94e:	370c      	adds	r7, #12
     950:	46bd      	mov	sp, r7
     952:	bd90      	pop	{r4, r7, pc}
     954:	20000678 	.word	0x20000678
     958:	20000640 	.word	0x20000640
     95c:	0000d25d 	.word	0x0000d25d

00000960 <_Z41__static_initialization_and_destruction_0ii>:

     960:	b5b0      	push	{r4, r5, r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
     968:	6039      	str	r1, [r7, #0]
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	2b01      	cmp	r3, #1
     96e:	d125      	bne.n	9bc <_Z41__static_initialization_and_destruction_0ii+0x5c>
     970:	683b      	ldr	r3, [r7, #0]
     972:	f64f 72ff 	movw	r2, #65535	; 0xffff
     976:	4293      	cmp	r3, r2
     978:	d120      	bne.n	9bc <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     97a:	4912      	ldr	r1, [pc, #72]	; (9c4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     97c:	4812      	ldr	r0, [pc, #72]	; (9c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     97e:	4b13      	ldr	r3, [pc, #76]	; (9cc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     980:	4798      	blx	r3
     982:	4a13      	ldr	r2, [pc, #76]	; (9d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     984:	4913      	ldr	r1, [pc, #76]	; (9d4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     986:	4810      	ldr	r0, [pc, #64]	; (9c8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     988:	4b13      	ldr	r3, [pc, #76]	; (9d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     98a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     98c:	4b13      	ldr	r3, [pc, #76]	; (9dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     98e:	2401      	movs	r4, #1
     990:	461d      	mov	r5, r3
     992:	2c00      	cmp	r4, #0
     994:	db05      	blt.n	9a2 <_Z41__static_initialization_and_destruction_0ii+0x42>
     996:	4628      	mov	r0, r5
     998:	4b11      	ldr	r3, [pc, #68]	; (9e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     99a:	4798      	blx	r3
     99c:	351c      	adds	r5, #28
     99e:	3c01      	subs	r4, #1
     9a0:	e7f7      	b.n	992 <_Z41__static_initialization_and_destruction_0ii+0x32>
     9a2:	4a0b      	ldr	r2, [pc, #44]	; (9d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     9a4:	490f      	ldr	r1, [pc, #60]	; (9e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     9a6:	2000      	movs	r0, #0
     9a8:	4b0b      	ldr	r3, [pc, #44]	; (9d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     9aa:	4798      	blx	r3
     9ac:	480e      	ldr	r0, [pc, #56]	; (9e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     9ae:	4b0f      	ldr	r3, [pc, #60]	; (9ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     9b0:	4798      	blx	r3
     9b2:	4a07      	ldr	r2, [pc, #28]	; (9d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     9b4:	490e      	ldr	r1, [pc, #56]	; (9f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     9b6:	480c      	ldr	r0, [pc, #48]	; (9e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     9b8:	4b07      	ldr	r3, [pc, #28]	; (9d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     9ba:	4798      	blx	r3
     9bc:	bf00      	nop
     9be:	3708      	adds	r7, #8
     9c0:	46bd      	mov	sp, r7
     9c2:	bdb0      	pop	{r4, r5, r7, pc}
     9c4:	20001108 	.word	0x20001108
     9c8:	2000062c 	.word	0x2000062c
     9cc:	0000d0d5 	.word	0x0000d0d5
     9d0:	20000000 	.word	0x20000000
     9d4:	0000d0f1 	.word	0x0000d0f1
     9d8:	0000e6b1 	.word	0x0000e6b1
     9dc:	20000640 	.word	0x20000640
     9e0:	0000d249 	.word	0x0000d249
     9e4:	00000935 	.word	0x00000935
     9e8:	20000678 	.word	0x20000678
     9ec:	00000719 	.word	0x00000719
     9f0:	00000749 	.word	0x00000749

000009f4 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
     9f4:	b580      	push	{r7, lr}
     9f6:	af00      	add	r7, sp, #0
     9f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9fc:	2001      	movs	r0, #1
     9fe:	4b01      	ldr	r3, [pc, #4]	; (a04 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
     a00:	4798      	blx	r3
     a02:	bd80      	pop	{r7, pc}
     a04:	00000961 	.word	0x00000961

00000a08 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     a08:	b580      	push	{r7, lr}
     a0a:	af00      	add	r7, sp, #0
	system_init();
     a0c:	4b03      	ldr	r3, [pc, #12]	; (a1c <atmel_start_init+0x14>)
     a0e:	4798      	blx	r3
	usb_init();
     a10:	4b03      	ldr	r3, [pc, #12]	; (a20 <atmel_start_init+0x18>)
     a12:	4798      	blx	r3
	spi_nor_flash_init();
     a14:	4b03      	ldr	r3, [pc, #12]	; (a24 <atmel_start_init+0x1c>)
     a16:	4798      	blx	r3
}
     a18:	bf00      	nop
     a1a:	bd80      	pop	{r7, pc}
     a1c:	00001d91 	.word	0x00001d91
     a20:	0000b201 	.word	0x0000b201
     a24:	0000b195 	.word	0x0000b195

00000a28 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     a28:	b480      	push	{r7}
     a2a:	b085      	sub	sp, #20
     a2c:	af00      	add	r7, sp, #0
     a2e:	60f8      	str	r0, [r7, #12]
     a30:	460b      	mov	r3, r1
     a32:	607a      	str	r2, [r7, #4]
     a34:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     a36:	7afa      	ldrb	r2, [r7, #11]
     a38:	68fb      	ldr	r3, [r7, #12]
     a3a:	3220      	adds	r2, #32
     a3c:	6879      	ldr	r1, [r7, #4]
     a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     a42:	bf00      	nop
     a44:	3714      	adds	r7, #20
     a46:	46bd      	mov	sp, r7
     a48:	f85d 7b04 	ldr.w	r7, [sp], #4
     a4c:	4770      	bx	lr

00000a4e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     a4e:	b480      	push	{r7}
     a50:	b083      	sub	sp, #12
     a52:	af00      	add	r7, sp, #0
     a54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	691b      	ldr	r3, [r3, #16]
     a5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a62:	bf00      	nop
     a64:	370c      	adds	r7, #12
     a66:	46bd      	mov	sp, r7
     a68:	f85d 7b04 	ldr.w	r7, [sp], #4
     a6c:	4770      	bx	lr

00000a6e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     a6e:	b480      	push	{r7}
     a70:	b083      	sub	sp, #12
     a72:	af00      	add	r7, sp, #0
     a74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     a76:	687b      	ldr	r3, [r7, #4]
     a78:	691b      	ldr	r3, [r3, #16]
     a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a82:	bf00      	nop
     a84:	370c      	adds	r7, #12
     a86:	46bd      	mov	sp, r7
     a88:	f85d 7b04 	ldr.w	r7, [sp], #4
     a8c:	4770      	bx	lr

00000a8e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     a8e:	b480      	push	{r7}
     a90:	b083      	sub	sp, #12
     a92:	af00      	add	r7, sp, #0
     a94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	691b      	ldr	r3, [r3, #16]
     a9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aa2:	bf00      	nop
     aa4:	370c      	adds	r7, #12
     aa6:	46bd      	mov	sp, r7
     aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
     aac:	4770      	bx	lr

00000aae <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     aae:	b480      	push	{r7}
     ab0:	b083      	sub	sp, #12
     ab2:	af00      	add	r7, sp, #0
     ab4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	691b      	ldr	r3, [r3, #16]
     aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ac2:	bf00      	nop
     ac4:	370c      	adds	r7, #12
     ac6:	46bd      	mov	sp, r7
     ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
     acc:	4770      	bx	lr

00000ace <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     ace:	b480      	push	{r7}
     ad0:	b083      	sub	sp, #12
     ad2:	af00      	add	r7, sp, #0
     ad4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	695b      	ldr	r3, [r3, #20]
     ada:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ae2:	bf00      	nop
     ae4:	370c      	adds	r7, #12
     ae6:	46bd      	mov	sp, r7
     ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
     aec:	4770      	bx	lr

00000aee <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     aee:	b480      	push	{r7}
     af0:	b083      	sub	sp, #12
     af2:	af00      	add	r7, sp, #0
     af4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	695b      	ldr	r3, [r3, #20]
     afa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b02:	bf00      	nop
     b04:	370c      	adds	r7, #12
     b06:	46bd      	mov	sp, r7
     b08:	f85d 7b04 	ldr.w	r7, [sp], #4
     b0c:	4770      	bx	lr

00000b0e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     b0e:	b480      	push	{r7}
     b10:	b083      	sub	sp, #12
     b12:	af00      	add	r7, sp, #0
     b14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	695b      	ldr	r3, [r3, #20]
     b1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b22:	bf00      	nop
     b24:	370c      	adds	r7, #12
     b26:	46bd      	mov	sp, r7
     b28:	f85d 7b04 	ldr.w	r7, [sp], #4
     b2c:	4770      	bx	lr

00000b2e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     b2e:	b480      	push	{r7}
     b30:	b083      	sub	sp, #12
     b32:	af00      	add	r7, sp, #0
     b34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	695b      	ldr	r3, [r3, #20]
     b3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b42:	bf00      	nop
     b44:	370c      	adds	r7, #12
     b46:	46bd      	mov	sp, r7
     b48:	f85d 7b04 	ldr.w	r7, [sp], #4
     b4c:	4770      	bx	lr

00000b4e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     b4e:	b480      	push	{r7}
     b50:	b083      	sub	sp, #12
     b52:	af00      	add	r7, sp, #0
     b54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	695b      	ldr	r3, [r3, #20]
     b5a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     b5e:	687b      	ldr	r3, [r7, #4]
     b60:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b62:	bf00      	nop
     b64:	370c      	adds	r7, #12
     b66:	46bd      	mov	sp, r7
     b68:	f85d 7b04 	ldr.w	r7, [sp], #4
     b6c:	4770      	bx	lr

00000b6e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b6e:	b480      	push	{r7}
     b70:	b083      	sub	sp, #12
     b72:	af00      	add	r7, sp, #0
     b74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	699b      	ldr	r3, [r3, #24]
     b7a:	f043 0201 	orr.w	r2, r3, #1
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b82:	bf00      	nop
     b84:	370c      	adds	r7, #12
     b86:	46bd      	mov	sp, r7
     b88:	f85d 7b04 	ldr.w	r7, [sp], #4
     b8c:	4770      	bx	lr

00000b8e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b8e:	b480      	push	{r7}
     b90:	b083      	sub	sp, #12
     b92:	af00      	add	r7, sp, #0
     b94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	699b      	ldr	r3, [r3, #24]
     b9a:	f043 0202 	orr.w	r2, r3, #2
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ba2:	bf00      	nop
     ba4:	370c      	adds	r7, #12
     ba6:	46bd      	mov	sp, r7
     ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bac:	4770      	bx	lr

00000bae <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     bae:	b480      	push	{r7}
     bb0:	b083      	sub	sp, #12
     bb2:	af00      	add	r7, sp, #0
     bb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	699b      	ldr	r3, [r3, #24]
     bba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bc2:	bf00      	nop
     bc4:	370c      	adds	r7, #12
     bc6:	46bd      	mov	sp, r7
     bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bcc:	4770      	bx	lr

00000bce <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     bce:	b480      	push	{r7}
     bd0:	b083      	sub	sp, #12
     bd2:	af00      	add	r7, sp, #0
     bd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	699b      	ldr	r3, [r3, #24]
     bda:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     be2:	bf00      	nop
     be4:	370c      	adds	r7, #12
     be6:	46bd      	mov	sp, r7
     be8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bec:	4770      	bx	lr

00000bee <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     bee:	b480      	push	{r7}
     bf0:	b083      	sub	sp, #12
     bf2:	af00      	add	r7, sp, #0
     bf4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	699b      	ldr	r3, [r3, #24]
     bfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c02:	bf00      	nop
     c04:	370c      	adds	r7, #12
     c06:	46bd      	mov	sp, r7
     c08:	f85d 7b04 	ldr.w	r7, [sp], #4
     c0c:	4770      	bx	lr

00000c0e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     c0e:	b480      	push	{r7}
     c10:	b083      	sub	sp, #12
     c12:	af00      	add	r7, sp, #0
     c14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	699b      	ldr	r3, [r3, #24]
     c1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c22:	bf00      	nop
     c24:	370c      	adds	r7, #12
     c26:	46bd      	mov	sp, r7
     c28:	f85d 7b04 	ldr.w	r7, [sp], #4
     c2c:	4770      	bx	lr

00000c2e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     c2e:	b480      	push	{r7}
     c30:	b083      	sub	sp, #12
     c32:	af00      	add	r7, sp, #0
     c34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     c36:	687b      	ldr	r3, [r7, #4]
     c38:	69db      	ldr	r3, [r3, #28]
     c3a:	f043 0220 	orr.w	r2, r3, #32
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c42:	bf00      	nop
     c44:	370c      	adds	r7, #12
     c46:	46bd      	mov	sp, r7
     c48:	f85d 7b04 	ldr.w	r7, [sp], #4
     c4c:	4770      	bx	lr

00000c4e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     c4e:	b480      	push	{r7}
     c50:	b083      	sub	sp, #12
     c52:	af00      	add	r7, sp, #0
     c54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	69db      	ldr	r3, [r3, #28]
     c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c62:	bf00      	nop
     c64:	370c      	adds	r7, #12
     c66:	46bd      	mov	sp, r7
     c68:	f85d 7b04 	ldr.w	r7, [sp], #4
     c6c:	4770      	bx	lr

00000c6e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     c6e:	b480      	push	{r7}
     c70:	b083      	sub	sp, #12
     c72:	af00      	add	r7, sp, #0
     c74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	69db      	ldr	r3, [r3, #28]
     c7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c82:	bf00      	nop
     c84:	370c      	adds	r7, #12
     c86:	46bd      	mov	sp, r7
     c88:	f85d 7b04 	ldr.w	r7, [sp], #4
     c8c:	4770      	bx	lr

00000c8e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     c8e:	b480      	push	{r7}
     c90:	b083      	sub	sp, #12
     c92:	af00      	add	r7, sp, #0
     c94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	6a1b      	ldr	r3, [r3, #32]
     c9a:	f043 0201 	orr.w	r2, r3, #1
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ca2:	bf00      	nop
     ca4:	370c      	adds	r7, #12
     ca6:	46bd      	mov	sp, r7
     ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cac:	4770      	bx	lr

00000cae <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     cae:	b480      	push	{r7}
     cb0:	b083      	sub	sp, #12
     cb2:	af00      	add	r7, sp, #0
     cb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	6a1b      	ldr	r3, [r3, #32]
     cba:	f043 0202 	orr.w	r2, r3, #2
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cc2:	bf00      	nop
     cc4:	370c      	adds	r7, #12
     cc6:	46bd      	mov	sp, r7
     cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ccc:	4770      	bx	lr

00000cce <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     cce:	b480      	push	{r7}
     cd0:	b083      	sub	sp, #12
     cd2:	af00      	add	r7, sp, #0
     cd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	6a1b      	ldr	r3, [r3, #32]
     cda:	f043 0204 	orr.w	r2, r3, #4
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cec:	4770      	bx	lr

00000cee <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     cee:	b480      	push	{r7}
     cf0:	b083      	sub	sp, #12
     cf2:	af00      	add	r7, sp, #0
     cf4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	6a1b      	ldr	r3, [r3, #32]
     cfa:	f043 0208 	orr.w	r2, r3, #8
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d02:	bf00      	nop
     d04:	370c      	adds	r7, #12
     d06:	46bd      	mov	sp, r7
     d08:	f85d 7b04 	ldr.w	r7, [sp], #4
     d0c:	4770      	bx	lr

00000d0e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     d0e:	b480      	push	{r7}
     d10:	b083      	sub	sp, #12
     d12:	af00      	add	r7, sp, #0
     d14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	6a1b      	ldr	r3, [r3, #32]
     d1a:	f043 0220 	orr.w	r2, r3, #32
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d22:	bf00      	nop
     d24:	370c      	adds	r7, #12
     d26:	46bd      	mov	sp, r7
     d28:	f85d 7b04 	ldr.w	r7, [sp], #4
     d2c:	4770      	bx	lr

00000d2e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     d2e:	b480      	push	{r7}
     d30:	b083      	sub	sp, #12
     d32:	af00      	add	r7, sp, #0
     d34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	6a1b      	ldr	r3, [r3, #32]
     d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d42:	bf00      	nop
     d44:	370c      	adds	r7, #12
     d46:	46bd      	mov	sp, r7
     d48:	f85d 7b04 	ldr.w	r7, [sp], #4
     d4c:	4770      	bx	lr

00000d4e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d4e:	b480      	push	{r7}
     d50:	b085      	sub	sp, #20
     d52:	af00      	add	r7, sp, #0
     d54:	60f8      	str	r0, [r7, #12]
     d56:	460b      	mov	r3, r1
     d58:	607a      	str	r2, [r7, #4]
     d5a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d5c:	7afb      	ldrb	r3, [r7, #11]
     d5e:	68fa      	ldr	r2, [r7, #12]
     d60:	01db      	lsls	r3, r3, #7
     d62:	4413      	add	r3, r2
     d64:	3308      	adds	r3, #8
     d66:	687a      	ldr	r2, [r7, #4]
     d68:	601a      	str	r2, [r3, #0]
}
     d6a:	bf00      	nop
     d6c:	3714      	adds	r7, #20
     d6e:	46bd      	mov	sp, r7
     d70:	f85d 7b04 	ldr.w	r7, [sp], #4
     d74:	4770      	bx	lr

00000d76 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     d76:	b480      	push	{r7}
     d78:	b085      	sub	sp, #20
     d7a:	af00      	add	r7, sp, #0
     d7c:	60f8      	str	r0, [r7, #12]
     d7e:	460b      	mov	r3, r1
     d80:	607a      	str	r2, [r7, #4]
     d82:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d84:	7afb      	ldrb	r3, [r7, #11]
     d86:	68fa      	ldr	r2, [r7, #12]
     d88:	01db      	lsls	r3, r3, #7
     d8a:	4413      	add	r3, r2
     d8c:	3304      	adds	r3, #4
     d8e:	687a      	ldr	r2, [r7, #4]
     d90:	601a      	str	r2, [r3, #0]
}
     d92:	bf00      	nop
     d94:	3714      	adds	r7, #20
     d96:	46bd      	mov	sp, r7
     d98:	f85d 7b04 	ldr.w	r7, [sp], #4
     d9c:	4770      	bx	lr

00000d9e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     d9e:	b480      	push	{r7}
     da0:	b085      	sub	sp, #20
     da2:	af00      	add	r7, sp, #0
     da4:	60f8      	str	r0, [r7, #12]
     da6:	460b      	mov	r3, r1
     da8:	607a      	str	r2, [r7, #4]
     daa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dac:	7afb      	ldrb	r3, [r7, #11]
     dae:	68fa      	ldr	r2, [r7, #12]
     db0:	01db      	lsls	r3, r3, #7
     db2:	4413      	add	r3, r2
     db4:	3318      	adds	r3, #24
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	601a      	str	r2, [r3, #0]
}
     dba:	bf00      	nop
     dbc:	3714      	adds	r7, #20
     dbe:	46bd      	mov	sp, r7
     dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     dc4:	4770      	bx	lr

00000dc6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     dc6:	b480      	push	{r7}
     dc8:	b085      	sub	sp, #20
     dca:	af00      	add	r7, sp, #0
     dcc:	60f8      	str	r0, [r7, #12]
     dce:	460b      	mov	r3, r1
     dd0:	607a      	str	r2, [r7, #4]
     dd2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd4:	7afb      	ldrb	r3, [r7, #11]
     dd6:	68fa      	ldr	r2, [r7, #12]
     dd8:	01db      	lsls	r3, r3, #7
     dda:	4413      	add	r3, r2
     ddc:	3314      	adds	r3, #20
     dde:	687a      	ldr	r2, [r7, #4]
     de0:	601a      	str	r2, [r3, #0]
}
     de2:	bf00      	nop
     de4:	3714      	adds	r7, #20
     de6:	46bd      	mov	sp, r7
     de8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dec:	4770      	bx	lr

00000dee <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     dee:	b480      	push	{r7}
     df0:	b085      	sub	sp, #20
     df2:	af00      	add	r7, sp, #0
     df4:	6078      	str	r0, [r7, #4]
     df6:	4608      	mov	r0, r1
     df8:	4611      	mov	r1, r2
     dfa:	461a      	mov	r2, r3
     dfc:	4603      	mov	r3, r0
     dfe:	70fb      	strb	r3, [r7, #3]
     e00:	460b      	mov	r3, r1
     e02:	70bb      	strb	r3, [r7, #2]
     e04:	4613      	mov	r3, r2
     e06:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e08:	78fa      	ldrb	r2, [r7, #3]
     e0a:	78bb      	ldrb	r3, [r7, #2]
     e0c:	6879      	ldr	r1, [r7, #4]
     e0e:	01d2      	lsls	r2, r2, #7
     e10:	440a      	add	r2, r1
     e12:	4413      	add	r3, r2
     e14:	3330      	adds	r3, #48	; 0x30
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e1a:	7bfb      	ldrb	r3, [r7, #15]
     e1c:	f023 030f 	bic.w	r3, r3, #15
     e20:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     e22:	787b      	ldrb	r3, [r7, #1]
     e24:	f003 030f 	and.w	r3, r3, #15
     e28:	b2da      	uxtb	r2, r3
     e2a:	7bfb      	ldrb	r3, [r7, #15]
     e2c:	4313      	orrs	r3, r2
     e2e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e30:	78fa      	ldrb	r2, [r7, #3]
     e32:	78bb      	ldrb	r3, [r7, #2]
     e34:	6879      	ldr	r1, [r7, #4]
     e36:	01d2      	lsls	r2, r2, #7
     e38:	440a      	add	r2, r1
     e3a:	4413      	add	r3, r2
     e3c:	3330      	adds	r3, #48	; 0x30
     e3e:	7bfa      	ldrb	r2, [r7, #15]
     e40:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e42:	bf00      	nop
     e44:	3714      	adds	r7, #20
     e46:	46bd      	mov	sp, r7
     e48:	f85d 7b04 	ldr.w	r7, [sp], #4
     e4c:	4770      	bx	lr

00000e4e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     e4e:	b480      	push	{r7}
     e50:	b085      	sub	sp, #20
     e52:	af00      	add	r7, sp, #0
     e54:	6078      	str	r0, [r7, #4]
     e56:	4608      	mov	r0, r1
     e58:	4611      	mov	r1, r2
     e5a:	461a      	mov	r2, r3
     e5c:	4603      	mov	r3, r0
     e5e:	70fb      	strb	r3, [r7, #3]
     e60:	460b      	mov	r3, r1
     e62:	70bb      	strb	r3, [r7, #2]
     e64:	4613      	mov	r3, r2
     e66:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e68:	78fa      	ldrb	r2, [r7, #3]
     e6a:	78bb      	ldrb	r3, [r7, #2]
     e6c:	6879      	ldr	r1, [r7, #4]
     e6e:	01d2      	lsls	r2, r2, #7
     e70:	440a      	add	r2, r1
     e72:	4413      	add	r3, r2
     e74:	3330      	adds	r3, #48	; 0x30
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e7a:	7bfb      	ldrb	r3, [r7, #15]
     e7c:	f003 030f 	and.w	r3, r3, #15
     e80:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     e82:	787b      	ldrb	r3, [r7, #1]
     e84:	011b      	lsls	r3, r3, #4
     e86:	b2da      	uxtb	r2, r3
     e88:	7bfb      	ldrb	r3, [r7, #15]
     e8a:	4313      	orrs	r3, r2
     e8c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e8e:	78fa      	ldrb	r2, [r7, #3]
     e90:	78bb      	ldrb	r3, [r7, #2]
     e92:	6879      	ldr	r1, [r7, #4]
     e94:	01d2      	lsls	r2, r2, #7
     e96:	440a      	add	r2, r1
     e98:	4413      	add	r3, r2
     e9a:	3330      	adds	r3, #48	; 0x30
     e9c:	7bfa      	ldrb	r2, [r7, #15]
     e9e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ea0:	bf00      	nop
     ea2:	3714      	adds	r7, #20
     ea4:	46bd      	mov	sp, r7
     ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
     eaa:	4770      	bx	lr

00000eac <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     eac:	b480      	push	{r7}
     eae:	b085      	sub	sp, #20
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
     eb4:	4608      	mov	r0, r1
     eb6:	4611      	mov	r1, r2
     eb8:	461a      	mov	r2, r3
     eba:	4603      	mov	r3, r0
     ebc:	70fb      	strb	r3, [r7, #3]
     ebe:	460b      	mov	r3, r1
     ec0:	70bb      	strb	r3, [r7, #2]
     ec2:	4613      	mov	r3, r2
     ec4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ec6:	78fa      	ldrb	r2, [r7, #3]
     ec8:	78bb      	ldrb	r3, [r7, #2]
     eca:	6879      	ldr	r1, [r7, #4]
     ecc:	01d2      	lsls	r2, r2, #7
     ece:	440a      	add	r2, r1
     ed0:	4413      	add	r3, r2
     ed2:	3340      	adds	r3, #64	; 0x40
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed8:	7bfb      	ldrb	r3, [r7, #15]
     eda:	f023 0301 	bic.w	r3, r3, #1
     ede:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ee0:	787a      	ldrb	r2, [r7, #1]
     ee2:	7bfb      	ldrb	r3, [r7, #15]
     ee4:	4313      	orrs	r3, r2
     ee6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee8:	78fa      	ldrb	r2, [r7, #3]
     eea:	78bb      	ldrb	r3, [r7, #2]
     eec:	6879      	ldr	r1, [r7, #4]
     eee:	01d2      	lsls	r2, r2, #7
     ef0:	440a      	add	r2, r1
     ef2:	4413      	add	r3, r2
     ef4:	3340      	adds	r3, #64	; 0x40
     ef6:	7bfa      	ldrb	r2, [r7, #15]
     ef8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     efa:	bf00      	nop
     efc:	3714      	adds	r7, #20
     efe:	46bd      	mov	sp, r7
     f00:	f85d 7b04 	ldr.w	r7, [sp], #4
     f04:	4770      	bx	lr

00000f06 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     f06:	b490      	push	{r4, r7}
     f08:	b082      	sub	sp, #8
     f0a:	af00      	add	r7, sp, #0
     f0c:	6078      	str	r0, [r7, #4]
     f0e:	460b      	mov	r3, r1
     f10:	70fb      	strb	r3, [r7, #3]
     f12:	4613      	mov	r3, r2
     f14:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f16:	78fa      	ldrb	r2, [r7, #3]
     f18:	78bb      	ldrb	r3, [r7, #2]
     f1a:	78f8      	ldrb	r0, [r7, #3]
     f1c:	78b9      	ldrb	r1, [r7, #2]
     f1e:	687c      	ldr	r4, [r7, #4]
     f20:	01c0      	lsls	r0, r0, #7
     f22:	4420      	add	r0, r4
     f24:	4401      	add	r1, r0
     f26:	3140      	adds	r1, #64	; 0x40
     f28:	7809      	ldrb	r1, [r1, #0]
     f2a:	b2c9      	uxtb	r1, r1
     f2c:	f041 0104 	orr.w	r1, r1, #4
     f30:	b2c8      	uxtb	r0, r1
     f32:	6879      	ldr	r1, [r7, #4]
     f34:	01d2      	lsls	r2, r2, #7
     f36:	440a      	add	r2, r1
     f38:	4413      	add	r3, r2
     f3a:	3340      	adds	r3, #64	; 0x40
     f3c:	4602      	mov	r2, r0
     f3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f40:	bf00      	nop
     f42:	3708      	adds	r7, #8
     f44:	46bd      	mov	sp, r7
     f46:	bc90      	pop	{r4, r7}
     f48:	4770      	bx	lr

00000f4a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     f4a:	b490      	push	{r4, r7}
     f4c:	b082      	sub	sp, #8
     f4e:	af00      	add	r7, sp, #0
     f50:	6078      	str	r0, [r7, #4]
     f52:	460b      	mov	r3, r1
     f54:	70fb      	strb	r3, [r7, #3]
     f56:	4613      	mov	r3, r2
     f58:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f5a:	78fa      	ldrb	r2, [r7, #3]
     f5c:	78bb      	ldrb	r3, [r7, #2]
     f5e:	78f8      	ldrb	r0, [r7, #3]
     f60:	78b9      	ldrb	r1, [r7, #2]
     f62:	687c      	ldr	r4, [r7, #4]
     f64:	01c0      	lsls	r0, r0, #7
     f66:	4420      	add	r0, r4
     f68:	4401      	add	r1, r0
     f6a:	3140      	adds	r1, #64	; 0x40
     f6c:	7809      	ldrb	r1, [r1, #0]
     f6e:	b2c9      	uxtb	r1, r1
     f70:	f021 0104 	bic.w	r1, r1, #4
     f74:	b2c8      	uxtb	r0, r1
     f76:	6879      	ldr	r1, [r7, #4]
     f78:	01d2      	lsls	r2, r2, #7
     f7a:	440a      	add	r2, r1
     f7c:	4413      	add	r3, r2
     f7e:	3340      	adds	r3, #64	; 0x40
     f80:	4602      	mov	r2, r0
     f82:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     f84:	bf00      	nop
     f86:	3708      	adds	r7, #8
     f88:	46bd      	mov	sp, r7
     f8a:	bc90      	pop	{r4, r7}
     f8c:	4770      	bx	lr

00000f8e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     f8e:	b480      	push	{r7}
     f90:	b085      	sub	sp, #20
     f92:	af00      	add	r7, sp, #0
     f94:	60f8      	str	r0, [r7, #12]
     f96:	460b      	mov	r3, r1
     f98:	607a      	str	r2, [r7, #4]
     f9a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9c:	7afb      	ldrb	r3, [r7, #11]
     f9e:	68fa      	ldr	r2, [r7, #12]
     fa0:	01db      	lsls	r3, r3, #7
     fa2:	4413      	add	r3, r2
     fa4:	3328      	adds	r3, #40	; 0x28
     fa6:	687a      	ldr	r2, [r7, #4]
     fa8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     faa:	bf00      	nop
     fac:	3714      	adds	r7, #20
     fae:	46bd      	mov	sp, r7
     fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb4:	4770      	bx	lr
	...

00000fb8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	4603      	mov	r3, r0
     fc0:	6039      	str	r1, [r7, #0]
     fc2:	71fb      	strb	r3, [r7, #7]
     fc4:	4613      	mov	r3, r2
     fc6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     fc8:	79bb      	ldrb	r3, [r7, #6]
     fca:	2b01      	cmp	r3, #1
     fcc:	d01c      	beq.n	1008 <_gpio_set_direction+0x50>
     fce:	2b02      	cmp	r3, #2
     fd0:	d037      	beq.n	1042 <_gpio_set_direction+0x8a>
     fd2:	2b00      	cmp	r3, #0
     fd4:	d14e      	bne.n	1074 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     fd6:	79fb      	ldrb	r3, [r7, #7]
     fd8:	683a      	ldr	r2, [r7, #0]
     fda:	4619      	mov	r1, r3
     fdc:	482a      	ldr	r0, [pc, #168]	; (1088 <_gpio_set_direction+0xd0>)
     fde:	4b2b      	ldr	r3, [pc, #172]	; (108c <_gpio_set_direction+0xd4>)
     fe0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	b29b      	uxth	r3, r3
     fe6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     fea:	79fb      	ldrb	r3, [r7, #7]
     fec:	4619      	mov	r1, r3
     fee:	4826      	ldr	r0, [pc, #152]	; (1088 <_gpio_set_direction+0xd0>)
     ff0:	4b27      	ldr	r3, [pc, #156]	; (1090 <_gpio_set_direction+0xd8>)
     ff2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     ff4:	683b      	ldr	r3, [r7, #0]
     ff6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ff8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ffc:	79fb      	ldrb	r3, [r7, #7]
     ffe:	4619      	mov	r1, r3
    1000:	4821      	ldr	r0, [pc, #132]	; (1088 <_gpio_set_direction+0xd0>)
    1002:	4b23      	ldr	r3, [pc, #140]	; (1090 <_gpio_set_direction+0xd8>)
    1004:	4798      	blx	r3
		break;
    1006:	e03a      	b.n	107e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1008:	79fb      	ldrb	r3, [r7, #7]
    100a:	683a      	ldr	r2, [r7, #0]
    100c:	4619      	mov	r1, r3
    100e:	481e      	ldr	r0, [pc, #120]	; (1088 <_gpio_set_direction+0xd0>)
    1010:	4b1e      	ldr	r3, [pc, #120]	; (108c <_gpio_set_direction+0xd4>)
    1012:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1014:	683b      	ldr	r3, [r7, #0]
    1016:	b29b      	uxth	r3, r3
    1018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1020:	79f9      	ldrb	r1, [r7, #7]
    1022:	461a      	mov	r2, r3
    1024:	4818      	ldr	r0, [pc, #96]	; (1088 <_gpio_set_direction+0xd0>)
    1026:	4b1a      	ldr	r3, [pc, #104]	; (1090 <_gpio_set_direction+0xd8>)
    1028:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    102a:	683b      	ldr	r3, [r7, #0]
    102c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    102e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1036:	79f9      	ldrb	r1, [r7, #7]
    1038:	461a      	mov	r2, r3
    103a:	4813      	ldr	r0, [pc, #76]	; (1088 <_gpio_set_direction+0xd0>)
    103c:	4b14      	ldr	r3, [pc, #80]	; (1090 <_gpio_set_direction+0xd8>)
    103e:	4798      	blx	r3
		break;
    1040:	e01d      	b.n	107e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1042:	79fb      	ldrb	r3, [r7, #7]
    1044:	683a      	ldr	r2, [r7, #0]
    1046:	4619      	mov	r1, r3
    1048:	480f      	ldr	r0, [pc, #60]	; (1088 <_gpio_set_direction+0xd0>)
    104a:	4b12      	ldr	r3, [pc, #72]	; (1094 <_gpio_set_direction+0xdc>)
    104c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    104e:	683b      	ldr	r3, [r7, #0]
    1050:	b29b      	uxth	r3, r3
    1052:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1056:	79fb      	ldrb	r3, [r7, #7]
    1058:	4619      	mov	r1, r3
    105a:	480b      	ldr	r0, [pc, #44]	; (1088 <_gpio_set_direction+0xd0>)
    105c:	4b0c      	ldr	r3, [pc, #48]	; (1090 <_gpio_set_direction+0xd8>)
    105e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1060:	683b      	ldr	r3, [r7, #0]
    1062:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1064:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1068:	79fb      	ldrb	r3, [r7, #7]
    106a:	4619      	mov	r1, r3
    106c:	4806      	ldr	r0, [pc, #24]	; (1088 <_gpio_set_direction+0xd0>)
    106e:	4b08      	ldr	r3, [pc, #32]	; (1090 <_gpio_set_direction+0xd8>)
    1070:	4798      	blx	r3
		break;
    1072:	e004      	b.n	107e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1074:	2246      	movs	r2, #70	; 0x46
    1076:	4908      	ldr	r1, [pc, #32]	; (1098 <_gpio_set_direction+0xe0>)
    1078:	2000      	movs	r0, #0
    107a:	4b08      	ldr	r3, [pc, #32]	; (109c <_gpio_set_direction+0xe4>)
    107c:	4798      	blx	r3
	}
}
    107e:	bf00      	nop
    1080:	3708      	adds	r7, #8
    1082:	46bd      	mov	sp, r7
    1084:	bd80      	pop	{r7, pc}
    1086:	bf00      	nop
    1088:	41008000 	.word	0x41008000
    108c:	00000d77 	.word	0x00000d77
    1090:	00000f8f 	.word	0x00000f8f
    1094:	00000d4f 	.word	0x00000d4f
    1098:	0000eb6c 	.word	0x0000eb6c
    109c:	00003725 	.word	0x00003725

000010a0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    10a0:	b580      	push	{r7, lr}
    10a2:	b082      	sub	sp, #8
    10a4:	af00      	add	r7, sp, #0
    10a6:	4603      	mov	r3, r0
    10a8:	6039      	str	r1, [r7, #0]
    10aa:	71fb      	strb	r3, [r7, #7]
    10ac:	4613      	mov	r3, r2
    10ae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    10b0:	79bb      	ldrb	r3, [r7, #6]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d006      	beq.n	10c4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    10b6:	79fb      	ldrb	r3, [r7, #7]
    10b8:	683a      	ldr	r2, [r7, #0]
    10ba:	4619      	mov	r1, r3
    10bc:	4806      	ldr	r0, [pc, #24]	; (10d8 <_gpio_set_level+0x38>)
    10be:	4b07      	ldr	r3, [pc, #28]	; (10dc <_gpio_set_level+0x3c>)
    10c0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    10c2:	e005      	b.n	10d0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    10c4:	79fb      	ldrb	r3, [r7, #7]
    10c6:	683a      	ldr	r2, [r7, #0]
    10c8:	4619      	mov	r1, r3
    10ca:	4803      	ldr	r0, [pc, #12]	; (10d8 <_gpio_set_level+0x38>)
    10cc:	4b04      	ldr	r3, [pc, #16]	; (10e0 <_gpio_set_level+0x40>)
    10ce:	4798      	blx	r3
}
    10d0:	bf00      	nop
    10d2:	3708      	adds	r7, #8
    10d4:	46bd      	mov	sp, r7
    10d6:	bd80      	pop	{r7, pc}
    10d8:	41008000 	.word	0x41008000
    10dc:	00000d9f 	.word	0x00000d9f
    10e0:	00000dc7 	.word	0x00000dc7

000010e4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    10ea:	4603      	mov	r3, r0
    10ec:	71fb      	strb	r3, [r7, #7]
    10ee:	460b      	mov	r3, r1
    10f0:	71bb      	strb	r3, [r7, #6]
    10f2:	4613      	mov	r3, r2
    10f4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    10f6:	797b      	ldrb	r3, [r7, #5]
    10f8:	2b01      	cmp	r3, #1
    10fa:	d00a      	beq.n	1112 <_gpio_set_pin_pull_mode+0x2e>
    10fc:	2b02      	cmp	r3, #2
    10fe:	d01f      	beq.n	1140 <_gpio_set_pin_pull_mode+0x5c>
    1100:	2b00      	cmp	r3, #0
    1102:	d134      	bne.n	116e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1104:	79ba      	ldrb	r2, [r7, #6]
    1106:	79fb      	ldrb	r3, [r7, #7]
    1108:	4619      	mov	r1, r3
    110a:	481e      	ldr	r0, [pc, #120]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    110c:	4b1e      	ldr	r3, [pc, #120]	; (1188 <_gpio_set_pin_pull_mode+0xa4>)
    110e:	4798      	blx	r3
		break;
    1110:	e033      	b.n	117a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1112:	79bb      	ldrb	r3, [r7, #6]
    1114:	2201      	movs	r2, #1
    1116:	409a      	lsls	r2, r3
    1118:	79fb      	ldrb	r3, [r7, #7]
    111a:	4619      	mov	r1, r3
    111c:	4819      	ldr	r0, [pc, #100]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    111e:	4b1b      	ldr	r3, [pc, #108]	; (118c <_gpio_set_pin_pull_mode+0xa8>)
    1120:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1122:	79ba      	ldrb	r2, [r7, #6]
    1124:	79fb      	ldrb	r3, [r7, #7]
    1126:	4619      	mov	r1, r3
    1128:	4816      	ldr	r0, [pc, #88]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    112a:	4b19      	ldr	r3, [pc, #100]	; (1190 <_gpio_set_pin_pull_mode+0xac>)
    112c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    112e:	79bb      	ldrb	r3, [r7, #6]
    1130:	2201      	movs	r2, #1
    1132:	409a      	lsls	r2, r3
    1134:	79fb      	ldrb	r3, [r7, #7]
    1136:	4619      	mov	r1, r3
    1138:	4812      	ldr	r0, [pc, #72]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    113a:	4b16      	ldr	r3, [pc, #88]	; (1194 <_gpio_set_pin_pull_mode+0xb0>)
    113c:	4798      	blx	r3
		break;
    113e:	e01c      	b.n	117a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1140:	79bb      	ldrb	r3, [r7, #6]
    1142:	2201      	movs	r2, #1
    1144:	409a      	lsls	r2, r3
    1146:	79fb      	ldrb	r3, [r7, #7]
    1148:	4619      	mov	r1, r3
    114a:	480e      	ldr	r0, [pc, #56]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    114c:	4b0f      	ldr	r3, [pc, #60]	; (118c <_gpio_set_pin_pull_mode+0xa8>)
    114e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1150:	79ba      	ldrb	r2, [r7, #6]
    1152:	79fb      	ldrb	r3, [r7, #7]
    1154:	4619      	mov	r1, r3
    1156:	480b      	ldr	r0, [pc, #44]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    1158:	4b0d      	ldr	r3, [pc, #52]	; (1190 <_gpio_set_pin_pull_mode+0xac>)
    115a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    115c:	79bb      	ldrb	r3, [r7, #6]
    115e:	2201      	movs	r2, #1
    1160:	409a      	lsls	r2, r3
    1162:	79fb      	ldrb	r3, [r7, #7]
    1164:	4619      	mov	r1, r3
    1166:	4807      	ldr	r0, [pc, #28]	; (1184 <_gpio_set_pin_pull_mode+0xa0>)
    1168:	4b0b      	ldr	r3, [pc, #44]	; (1198 <_gpio_set_pin_pull_mode+0xb4>)
    116a:	4798      	blx	r3
		break;
    116c:	e005      	b.n	117a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    116e:	2289      	movs	r2, #137	; 0x89
    1170:	490a      	ldr	r1, [pc, #40]	; (119c <_gpio_set_pin_pull_mode+0xb8>)
    1172:	2000      	movs	r0, #0
    1174:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <_gpio_set_pin_pull_mode+0xbc>)
    1176:	4798      	blx	r3
		break;
    1178:	bf00      	nop
	}
}
    117a:	bf00      	nop
    117c:	3708      	adds	r7, #8
    117e:	46bd      	mov	sp, r7
    1180:	bd80      	pop	{r7, pc}
    1182:	bf00      	nop
    1184:	41008000 	.word	0x41008000
    1188:	00000f4b 	.word	0x00000f4b
    118c:	00000d77 	.word	0x00000d77
    1190:	00000f07 	.word	0x00000f07
    1194:	00000d9f 	.word	0x00000d9f
    1198:	00000dc7 	.word	0x00000dc7
    119c:	0000eb6c 	.word	0x0000eb6c
    11a0:	00003725 	.word	0x00003725

000011a4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    11a4:	b590      	push	{r4, r7, lr}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	095b      	lsrs	r3, r3, #5
    11b2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	b2db      	uxtb	r3, r3
    11b8:	f003 031f 	and.w	r3, r3, #31
    11bc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    11be:	683b      	ldr	r3, [r7, #0]
    11c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    11c4:	d106      	bne.n	11d4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    11c6:	7bba      	ldrb	r2, [r7, #14]
    11c8:	7bf9      	ldrb	r1, [r7, #15]
    11ca:	2300      	movs	r3, #0
    11cc:	4812      	ldr	r0, [pc, #72]	; (1218 <_gpio_set_pin_function+0x74>)
    11ce:	4c13      	ldr	r4, [pc, #76]	; (121c <_gpio_set_pin_function+0x78>)
    11d0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    11d2:	e01d      	b.n	1210 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    11d4:	7bba      	ldrb	r2, [r7, #14]
    11d6:	7bf9      	ldrb	r1, [r7, #15]
    11d8:	2301      	movs	r3, #1
    11da:	480f      	ldr	r0, [pc, #60]	; (1218 <_gpio_set_pin_function+0x74>)
    11dc:	4c0f      	ldr	r4, [pc, #60]	; (121c <_gpio_set_pin_function+0x78>)
    11de:	47a0      	blx	r4
		if (pin & 1) {
    11e0:	7bbb      	ldrb	r3, [r7, #14]
    11e2:	f003 0301 	and.w	r3, r3, #1
    11e6:	2b00      	cmp	r3, #0
    11e8:	d009      	beq.n	11fe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    11ea:	7bbb      	ldrb	r3, [r7, #14]
    11ec:	085b      	lsrs	r3, r3, #1
    11ee:	b2da      	uxtb	r2, r3
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	b2db      	uxtb	r3, r3
    11f4:	7bf9      	ldrb	r1, [r7, #15]
    11f6:	4808      	ldr	r0, [pc, #32]	; (1218 <_gpio_set_pin_function+0x74>)
    11f8:	4c09      	ldr	r4, [pc, #36]	; (1220 <_gpio_set_pin_function+0x7c>)
    11fa:	47a0      	blx	r4
}
    11fc:	e008      	b.n	1210 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    11fe:	7bbb      	ldrb	r3, [r7, #14]
    1200:	085b      	lsrs	r3, r3, #1
    1202:	b2da      	uxtb	r2, r3
    1204:	683b      	ldr	r3, [r7, #0]
    1206:	b2db      	uxtb	r3, r3
    1208:	7bf9      	ldrb	r1, [r7, #15]
    120a:	4803      	ldr	r0, [pc, #12]	; (1218 <_gpio_set_pin_function+0x74>)
    120c:	4c05      	ldr	r4, [pc, #20]	; (1224 <_gpio_set_pin_function+0x80>)
    120e:	47a0      	blx	r4
}
    1210:	bf00      	nop
    1212:	3714      	adds	r7, #20
    1214:	46bd      	mov	sp, r7
    1216:	bd90      	pop	{r4, r7, pc}
    1218:	41008000 	.word	0x41008000
    121c:	00000ead 	.word	0x00000ead
    1220:	00000e4f 	.word	0x00000e4f
    1224:	00000def 	.word	0x00000def

00001228 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1228:	b580      	push	{r7, lr}
    122a:	b082      	sub	sp, #8
    122c:	af00      	add	r7, sp, #0
    122e:	4603      	mov	r3, r0
    1230:	460a      	mov	r2, r1
    1232:	71fb      	strb	r3, [r7, #7]
    1234:	4613      	mov	r3, r2
    1236:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1238:	79fb      	ldrb	r3, [r7, #7]
    123a:	095b      	lsrs	r3, r3, #5
    123c:	b2d8      	uxtb	r0, r3
    123e:	79fb      	ldrb	r3, [r7, #7]
    1240:	f003 031f 	and.w	r3, r3, #31
    1244:	b2db      	uxtb	r3, r3
    1246:	79ba      	ldrb	r2, [r7, #6]
    1248:	4619      	mov	r1, r3
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <gpio_set_pin_pull_mode+0x30>)
    124c:	4798      	blx	r3
}
    124e:	bf00      	nop
    1250:	3708      	adds	r7, #8
    1252:	46bd      	mov	sp, r7
    1254:	bd80      	pop	{r7, pc}
    1256:	bf00      	nop
    1258:	000010e5 	.word	0x000010e5

0000125c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    125c:	b580      	push	{r7, lr}
    125e:	b082      	sub	sp, #8
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
    1264:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1266:	6839      	ldr	r1, [r7, #0]
    1268:	6878      	ldr	r0, [r7, #4]
    126a:	4b03      	ldr	r3, [pc, #12]	; (1278 <gpio_set_pin_function+0x1c>)
    126c:	4798      	blx	r3
}
    126e:	bf00      	nop
    1270:	3708      	adds	r7, #8
    1272:	46bd      	mov	sp, r7
    1274:	bd80      	pop	{r7, pc}
    1276:	bf00      	nop
    1278:	000011a5 	.word	0x000011a5

0000127c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    127c:	b580      	push	{r7, lr}
    127e:	b082      	sub	sp, #8
    1280:	af00      	add	r7, sp, #0
    1282:	4603      	mov	r3, r0
    1284:	460a      	mov	r2, r1
    1286:	71fb      	strb	r3, [r7, #7]
    1288:	4613      	mov	r3, r2
    128a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    128c:	79fb      	ldrb	r3, [r7, #7]
    128e:	095b      	lsrs	r3, r3, #5
    1290:	b2d8      	uxtb	r0, r3
    1292:	79fb      	ldrb	r3, [r7, #7]
    1294:	f003 031f 	and.w	r3, r3, #31
    1298:	2201      	movs	r2, #1
    129a:	fa02 f303 	lsl.w	r3, r2, r3
    129e:	79ba      	ldrb	r2, [r7, #6]
    12a0:	4619      	mov	r1, r3
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <gpio_set_pin_direction+0x34>)
    12a4:	4798      	blx	r3
}
    12a6:	bf00      	nop
    12a8:	3708      	adds	r7, #8
    12aa:	46bd      	mov	sp, r7
    12ac:	bd80      	pop	{r7, pc}
    12ae:	bf00      	nop
    12b0:	00000fb9 	.word	0x00000fb9

000012b4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    12b4:	b580      	push	{r7, lr}
    12b6:	b082      	sub	sp, #8
    12b8:	af00      	add	r7, sp, #0
    12ba:	4603      	mov	r3, r0
    12bc:	460a      	mov	r2, r1
    12be:	71fb      	strb	r3, [r7, #7]
    12c0:	4613      	mov	r3, r2
    12c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    12c4:	79fb      	ldrb	r3, [r7, #7]
    12c6:	095b      	lsrs	r3, r3, #5
    12c8:	b2d8      	uxtb	r0, r3
    12ca:	79fb      	ldrb	r3, [r7, #7]
    12cc:	f003 031f 	and.w	r3, r3, #31
    12d0:	2201      	movs	r2, #1
    12d2:	fa02 f303 	lsl.w	r3, r2, r3
    12d6:	79ba      	ldrb	r2, [r7, #6]
    12d8:	4619      	mov	r1, r3
    12da:	4b03      	ldr	r3, [pc, #12]	; (12e8 <gpio_set_pin_level+0x34>)
    12dc:	4798      	blx	r3
}
    12de:	bf00      	nop
    12e0:	3708      	adds	r7, #8
    12e2:	46bd      	mov	sp, r7
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop
    12e8:	000010a1 	.word	0x000010a1

000012ec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    12ec:	b580      	push	{r7, lr}
    12ee:	af00      	add	r7, sp, #0
	_init_chip();
    12f0:	4b01      	ldr	r3, [pc, #4]	; (12f8 <init_mcu+0xc>)
    12f2:	4798      	blx	r3
}
    12f4:	bf00      	nop
    12f6:	bd80      	pop	{r7, pc}
    12f8:	00004335 	.word	0x00004335

000012fc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	b082      	sub	sp, #8
    1300:	af00      	add	r7, sp, #0
    1302:	6078      	str	r0, [r7, #4]
    1304:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	2b00      	cmp	r3, #0
    130a:	d004      	beq.n	1316 <wdt_init+0x1a>
    130c:	683b      	ldr	r3, [r7, #0]
    130e:	2b00      	cmp	r3, #0
    1310:	d001      	beq.n	1316 <wdt_init+0x1a>
    1312:	2301      	movs	r3, #1
    1314:	e000      	b.n	1318 <wdt_init+0x1c>
    1316:	2300      	movs	r3, #0
    1318:	f003 0301 	and.w	r3, r3, #1
    131c:	b2db      	uxtb	r3, r3
    131e:	2248      	movs	r2, #72	; 0x48
    1320:	4907      	ldr	r1, [pc, #28]	; (1340 <wdt_init+0x44>)
    1322:	4618      	mov	r0, r3
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <wdt_init+0x48>)
    1326:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	683a      	ldr	r2, [r7, #0]
    132c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	4618      	mov	r0, r3
    1332:	4b05      	ldr	r3, [pc, #20]	; (1348 <wdt_init+0x4c>)
    1334:	4798      	blx	r3
    1336:	4603      	mov	r3, r0
}
    1338:	4618      	mov	r0, r3
    133a:	3708      	adds	r7, #8
    133c:	46bd      	mov	sp, r7
    133e:	bd80      	pop	{r7, pc}
    1340:	0000eb88 	.word	0x0000eb88
    1344:	00003725 	.word	0x00003725
    1348:	0000ac39 	.word	0x0000ac39

0000134c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1350:	4804      	ldr	r0, [pc, #16]	; (1364 <CRC_CALC_init+0x18>)
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <CRC_CALC_init+0x1c>)
    1354:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1356:	4905      	ldr	r1, [pc, #20]	; (136c <CRC_CALC_init+0x20>)
    1358:	4805      	ldr	r0, [pc, #20]	; (1370 <CRC_CALC_init+0x24>)
    135a:	4b06      	ldr	r3, [pc, #24]	; (1374 <CRC_CALC_init+0x28>)
    135c:	4798      	blx	r3
}
    135e:	bf00      	nop
    1360:	bd80      	pop	{r7, pc}
    1362:	bf00      	nop
    1364:	40000800 	.word	0x40000800
    1368:	00000b8f 	.word	0x00000b8f
    136c:	41002000 	.word	0x41002000
    1370:	200011d4 	.word	0x200011d4
    1374:	000020d5 	.word	0x000020d5

00001378 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1378:	b580      	push	{r7, lr}
    137a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    137c:	2244      	movs	r2, #68	; 0x44
    137e:	2104      	movs	r1, #4
    1380:	483f      	ldr	r0, [pc, #252]	; (1480 <EXTERNAL_IRQ_0_init+0x108>)
    1382:	4b40      	ldr	r3, [pc, #256]	; (1484 <EXTERNAL_IRQ_0_init+0x10c>)
    1384:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1386:	4840      	ldr	r0, [pc, #256]	; (1488 <EXTERNAL_IRQ_0_init+0x110>)
    1388:	4b40      	ldr	r3, [pc, #256]	; (148c <EXTERNAL_IRQ_0_init+0x114>)
    138a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    138c:	2101      	movs	r1, #1
    138e:	2040      	movs	r0, #64	; 0x40
    1390:	4b3f      	ldr	r3, [pc, #252]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    1392:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1394:	2100      	movs	r1, #0
    1396:	2040      	movs	r0, #64	; 0x40
    1398:	4b3e      	ldr	r3, [pc, #248]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    139a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    139c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    13a0:	2040      	movs	r0, #64	; 0x40
    13a2:	4b3d      	ldr	r3, [pc, #244]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    13a4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    13a6:	2101      	movs	r1, #1
    13a8:	2021      	movs	r0, #33	; 0x21
    13aa:	4b39      	ldr	r3, [pc, #228]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    13ac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    13ae:	2100      	movs	r1, #0
    13b0:	2021      	movs	r0, #33	; 0x21
    13b2:	4b38      	ldr	r3, [pc, #224]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    13b4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    13b6:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    13ba:	2021      	movs	r0, #33	; 0x21
    13bc:	4b36      	ldr	r3, [pc, #216]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    13be:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    13c0:	2101      	movs	r1, #1
    13c2:	2003      	movs	r0, #3
    13c4:	4b32      	ldr	r3, [pc, #200]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    13c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    13c8:	2102      	movs	r1, #2
    13ca:	2003      	movs	r0, #3
    13cc:	4b31      	ldr	r3, [pc, #196]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    13ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    13d0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    13d4:	2003      	movs	r0, #3
    13d6:	4b30      	ldr	r3, [pc, #192]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    13d8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    13da:	2101      	movs	r1, #1
    13dc:	2004      	movs	r0, #4
    13de:	4b2c      	ldr	r3, [pc, #176]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    13e0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    13e2:	2102      	movs	r1, #2
    13e4:	2004      	movs	r0, #4
    13e6:	4b2b      	ldr	r3, [pc, #172]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    13e8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    13ea:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    13ee:	2004      	movs	r0, #4
    13f0:	4b29      	ldr	r3, [pc, #164]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    13f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    13f4:	2101      	movs	r1, #1
    13f6:	2005      	movs	r0, #5
    13f8:	4b25      	ldr	r3, [pc, #148]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    13fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    13fc:	2102      	movs	r1, #2
    13fe:	2005      	movs	r0, #5
    1400:	4b24      	ldr	r3, [pc, #144]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    1402:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1404:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1408:	2005      	movs	r0, #5
    140a:	4b23      	ldr	r3, [pc, #140]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    140c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    140e:	2101      	movs	r1, #1
    1410:	2056      	movs	r0, #86	; 0x56
    1412:	4b1f      	ldr	r3, [pc, #124]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    1414:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1416:	2102      	movs	r1, #2
    1418:	2056      	movs	r0, #86	; 0x56
    141a:	4b1e      	ldr	r3, [pc, #120]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    141c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    141e:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1422:	2056      	movs	r0, #86	; 0x56
    1424:	4b1c      	ldr	r3, [pc, #112]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    1426:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1428:	2101      	movs	r1, #1
    142a:	2057      	movs	r0, #87	; 0x57
    142c:	4b18      	ldr	r3, [pc, #96]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    142e:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1430:	2102      	movs	r1, #2
    1432:	2057      	movs	r0, #87	; 0x57
    1434:	4b17      	ldr	r3, [pc, #92]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    1436:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1438:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    143c:	2057      	movs	r0, #87	; 0x57
    143e:	4b16      	ldr	r3, [pc, #88]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    1440:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1442:	2101      	movs	r1, #1
    1444:	2028      	movs	r0, #40	; 0x28
    1446:	4b12      	ldr	r3, [pc, #72]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    1448:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    144a:	2100      	movs	r1, #0
    144c:	2028      	movs	r0, #40	; 0x28
    144e:	4b11      	ldr	r3, [pc, #68]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    1450:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1452:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1456:	2028      	movs	r0, #40	; 0x28
    1458:	4b0f      	ldr	r3, [pc, #60]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    145a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    145c:	2101      	movs	r1, #1
    145e:	2029      	movs	r0, #41	; 0x29
    1460:	4b0b      	ldr	r3, [pc, #44]	; (1490 <EXTERNAL_IRQ_0_init+0x118>)
    1462:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1464:	2100      	movs	r1, #0
    1466:	2029      	movs	r0, #41	; 0x29
    1468:	4b0a      	ldr	r3, [pc, #40]	; (1494 <EXTERNAL_IRQ_0_init+0x11c>)
    146a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    146c:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1470:	2029      	movs	r0, #41	; 0x29
    1472:	4b09      	ldr	r3, [pc, #36]	; (1498 <EXTERNAL_IRQ_0_init+0x120>)
    1474:	4798      	blx	r3

	ext_irq_init();
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <EXTERNAL_IRQ_0_init+0x124>)
    1478:	4798      	blx	r3
}
    147a:	bf00      	nop
    147c:	bd80      	pop	{r7, pc}
    147e:	bf00      	nop
    1480:	40001c00 	.word	0x40001c00
    1484:	00000a29 	.word	0x00000a29
    1488:	40000800 	.word	0x40000800
    148c:	00000b0f 	.word	0x00000b0f
    1490:	0000127d 	.word	0x0000127d
    1494:	00001229 	.word	0x00001229
    1498:	0000125d 	.word	0x0000125d
    149c:	0000219d 	.word	0x0000219d

000014a0 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14a4:	2244      	movs	r2, #68	; 0x44
    14a6:	210b      	movs	r1, #11
    14a8:	4807      	ldr	r0, [pc, #28]	; (14c8 <EVENT_SYSTEM_0_init+0x28>)
    14aa:	4b08      	ldr	r3, [pc, #32]	; (14cc <EVENT_SYSTEM_0_init+0x2c>)
    14ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14ae:	2244      	movs	r2, #68	; 0x44
    14b0:	210c      	movs	r1, #12
    14b2:	4805      	ldr	r0, [pc, #20]	; (14c8 <EVENT_SYSTEM_0_init+0x28>)
    14b4:	4b05      	ldr	r3, [pc, #20]	; (14cc <EVENT_SYSTEM_0_init+0x2c>)
    14b6:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    14b8:	4805      	ldr	r0, [pc, #20]	; (14d0 <EVENT_SYSTEM_0_init+0x30>)
    14ba:	4b06      	ldr	r3, [pc, #24]	; (14d4 <EVENT_SYSTEM_0_init+0x34>)
    14bc:	4798      	blx	r3

	event_system_init();
    14be:	4b06      	ldr	r3, [pc, #24]	; (14d8 <EVENT_SYSTEM_0_init+0x38>)
    14c0:	4798      	blx	r3
}
    14c2:	bf00      	nop
    14c4:	bd80      	pop	{r7, pc}
    14c6:	bf00      	nop
    14c8:	40001c00 	.word	0x40001c00
    14cc:	00000a29 	.word	0x00000a29
    14d0:	40000800 	.word	0x40000800
    14d4:	00000baf 	.word	0x00000baf
    14d8:	00002189 	.word	0x00002189

000014dc <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    14dc:	b580      	push	{r7, lr}
    14de:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    14e0:	2101      	movs	r1, #1
    14e2:	202b      	movs	r0, #43	; 0x2b
    14e4:	4b2b      	ldr	r3, [pc, #172]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    14e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    14e8:	2100      	movs	r1, #0
    14ea:	202b      	movs	r0, #43	; 0x2b
    14ec:	4b2a      	ldr	r3, [pc, #168]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    14ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    14f0:	492a      	ldr	r1, [pc, #168]	; (159c <QSPI_N25Q256_PORT_init+0xc0>)
    14f2:	202b      	movs	r0, #43	; 0x2b
    14f4:	4b2a      	ldr	r3, [pc, #168]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    14f6:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    14f8:	2102      	movs	r1, #2
    14fa:	2008      	movs	r0, #8
    14fc:	4b25      	ldr	r3, [pc, #148]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    14fe:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1500:	2100      	movs	r1, #0
    1502:	2008      	movs	r0, #8
    1504:	4b27      	ldr	r3, [pc, #156]	; (15a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1506:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1508:	2100      	movs	r1, #0
    150a:	2008      	movs	r0, #8
    150c:	4b22      	ldr	r3, [pc, #136]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    150e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1510:	4925      	ldr	r1, [pc, #148]	; (15a8 <QSPI_N25Q256_PORT_init+0xcc>)
    1512:	2008      	movs	r0, #8
    1514:	4b22      	ldr	r3, [pc, #136]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1516:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1518:	2102      	movs	r1, #2
    151a:	2009      	movs	r0, #9
    151c:	4b1d      	ldr	r3, [pc, #116]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    151e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1520:	2100      	movs	r1, #0
    1522:	2009      	movs	r0, #9
    1524:	4b1f      	ldr	r3, [pc, #124]	; (15a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1526:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1528:	2100      	movs	r1, #0
    152a:	2009      	movs	r0, #9
    152c:	4b1a      	ldr	r3, [pc, #104]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    152e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1530:	491e      	ldr	r1, [pc, #120]	; (15ac <QSPI_N25Q256_PORT_init+0xd0>)
    1532:	2009      	movs	r0, #9
    1534:	4b1a      	ldr	r3, [pc, #104]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1536:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1538:	2102      	movs	r1, #2
    153a:	200a      	movs	r0, #10
    153c:	4b15      	ldr	r3, [pc, #84]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    153e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1540:	2100      	movs	r1, #0
    1542:	200a      	movs	r0, #10
    1544:	4b17      	ldr	r3, [pc, #92]	; (15a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1546:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1548:	2100      	movs	r1, #0
    154a:	200a      	movs	r0, #10
    154c:	4b12      	ldr	r3, [pc, #72]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    154e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1550:	4917      	ldr	r1, [pc, #92]	; (15b0 <QSPI_N25Q256_PORT_init+0xd4>)
    1552:	200a      	movs	r0, #10
    1554:	4b12      	ldr	r3, [pc, #72]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1556:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1558:	2102      	movs	r1, #2
    155a:	200b      	movs	r0, #11
    155c:	4b0d      	ldr	r3, [pc, #52]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    155e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1560:	2100      	movs	r1, #0
    1562:	200b      	movs	r0, #11
    1564:	4b0f      	ldr	r3, [pc, #60]	; (15a4 <QSPI_N25Q256_PORT_init+0xc8>)
    1566:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1568:	2100      	movs	r1, #0
    156a:	200b      	movs	r0, #11
    156c:	4b0a      	ldr	r3, [pc, #40]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    156e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1570:	4910      	ldr	r1, [pc, #64]	; (15b4 <QSPI_N25Q256_PORT_init+0xd8>)
    1572:	200b      	movs	r0, #11
    1574:	4b0a      	ldr	r3, [pc, #40]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    1576:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1578:	2101      	movs	r1, #1
    157a:	202a      	movs	r0, #42	; 0x2a
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <QSPI_N25Q256_PORT_init+0xb8>)
    157e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1580:	2100      	movs	r1, #0
    1582:	202a      	movs	r0, #42	; 0x2a
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <QSPI_N25Q256_PORT_init+0xbc>)
    1586:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1588:	490b      	ldr	r1, [pc, #44]	; (15b8 <QSPI_N25Q256_PORT_init+0xdc>)
    158a:	202a      	movs	r0, #42	; 0x2a
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <QSPI_N25Q256_PORT_init+0xc4>)
    158e:	4798      	blx	r3
}
    1590:	bf00      	nop
    1592:	bd80      	pop	{r7, pc}
    1594:	0000127d 	.word	0x0000127d
    1598:	00001229 	.word	0x00001229
    159c:	002b0007 	.word	0x002b0007
    15a0:	0000125d 	.word	0x0000125d
    15a4:	000012b5 	.word	0x000012b5
    15a8:	00080007 	.word	0x00080007
    15ac:	00090007 	.word	0x00090007
    15b0:	000a0007 	.word	0x000a0007
    15b4:	000b0007 	.word	0x000b0007
    15b8:	002a0007 	.word	0x002a0007

000015bc <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    15bc:	b580      	push	{r7, lr}
    15be:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    15c0:	4805      	ldr	r0, [pc, #20]	; (15d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    15c2:	4b06      	ldr	r3, [pc, #24]	; (15dc <QSPI_N25Q256_CLOCK_init+0x20>)
    15c4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    15c6:	4804      	ldr	r0, [pc, #16]	; (15d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <QSPI_N25Q256_CLOCK_init+0x24>)
    15ca:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    15cc:	4802      	ldr	r0, [pc, #8]	; (15d8 <QSPI_N25Q256_CLOCK_init+0x1c>)
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <QSPI_N25Q256_CLOCK_init+0x28>)
    15d0:	4798      	blx	r3
}
    15d2:	bf00      	nop
    15d4:	bd80      	pop	{r7, pc}
    15d6:	bf00      	nop
    15d8:	40000800 	.word	0x40000800
    15dc:	00000a6f 	.word	0x00000a6f
    15e0:	00000aaf 	.word	0x00000aaf
    15e4:	00000c6f 	.word	0x00000c6f

000015e8 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    15ec:	4b04      	ldr	r3, [pc, #16]	; (1600 <QSPI_N25Q256_init+0x18>)
    15ee:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    15f0:	4904      	ldr	r1, [pc, #16]	; (1604 <QSPI_N25Q256_init+0x1c>)
    15f2:	4805      	ldr	r0, [pc, #20]	; (1608 <QSPI_N25Q256_init+0x20>)
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <QSPI_N25Q256_init+0x24>)
    15f6:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    15f8:	4b05      	ldr	r3, [pc, #20]	; (1610 <QSPI_N25Q256_init+0x28>)
    15fa:	4798      	blx	r3
}
    15fc:	bf00      	nop
    15fe:	bd80      	pop	{r7, pc}
    1600:	000015bd 	.word	0x000015bd
    1604:	42003400 	.word	0x42003400
    1608:	20001088 	.word	0x20001088
    160c:	00002641 	.word	0x00002641
    1610:	000014dd 	.word	0x000014dd

00001614 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1618:	4802      	ldr	r0, [pc, #8]	; (1624 <DATETIME_CLOCK_CLOCK_init+0x10>)
    161a:	4b03      	ldr	r3, [pc, #12]	; (1628 <DATETIME_CLOCK_CLOCK_init+0x14>)
    161c:	4798      	blx	r3
}
    161e:	bf00      	nop
    1620:	bd80      	pop	{r7, pc}
    1622:	bf00      	nop
    1624:	40000800 	.word	0x40000800
    1628:	00000aef 	.word	0x00000aef

0000162c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    162c:	b580      	push	{r7, lr}
    162e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1630:	4b03      	ldr	r3, [pc, #12]	; (1640 <DATETIME_CLOCK_init+0x14>)
    1632:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1634:	4903      	ldr	r1, [pc, #12]	; (1644 <DATETIME_CLOCK_init+0x18>)
    1636:	4804      	ldr	r0, [pc, #16]	; (1648 <DATETIME_CLOCK_init+0x1c>)
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <DATETIME_CLOCK_init+0x20>)
    163a:	4798      	blx	r3
}
    163c:	bf00      	nop
    163e:	bd80      	pop	{r7, pc}
    1640:	00001615 	.word	0x00001615
    1644:	40002400 	.word	0x40002400
    1648:	200011b0 	.word	0x200011b0
    164c:	00001f79 	.word	0x00001f79

00001650 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1650:	b580      	push	{r7, lr}
    1652:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1654:	2100      	movs	r1, #0
    1656:	2010      	movs	r0, #16
    1658:	4b07      	ldr	r3, [pc, #28]	; (1678 <I2C_HEATERS_PORT_init+0x28>)
    165a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    165c:	4907      	ldr	r1, [pc, #28]	; (167c <I2C_HEATERS_PORT_init+0x2c>)
    165e:	2010      	movs	r0, #16
    1660:	4b07      	ldr	r3, [pc, #28]	; (1680 <I2C_HEATERS_PORT_init+0x30>)
    1662:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1664:	2100      	movs	r1, #0
    1666:	2011      	movs	r0, #17
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <I2C_HEATERS_PORT_init+0x28>)
    166a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    166c:	4905      	ldr	r1, [pc, #20]	; (1684 <I2C_HEATERS_PORT_init+0x34>)
    166e:	2011      	movs	r0, #17
    1670:	4b03      	ldr	r3, [pc, #12]	; (1680 <I2C_HEATERS_PORT_init+0x30>)
    1672:	4798      	blx	r3
}
    1674:	bf00      	nop
    1676:	bd80      	pop	{r7, pc}
    1678:	00001229 	.word	0x00001229
    167c:	00100002 	.word	0x00100002
    1680:	0000125d 	.word	0x0000125d
    1684:	00110002 	.word	0x00110002

00001688 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1688:	b580      	push	{r7, lr}
    168a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    168c:	2242      	movs	r2, #66	; 0x42
    168e:	2108      	movs	r1, #8
    1690:	4806      	ldr	r0, [pc, #24]	; (16ac <I2C_HEATERS_CLOCK_init+0x24>)
    1692:	4b07      	ldr	r3, [pc, #28]	; (16b0 <I2C_HEATERS_CLOCK_init+0x28>)
    1694:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1696:	224a      	movs	r2, #74	; 0x4a
    1698:	2103      	movs	r1, #3
    169a:	4804      	ldr	r0, [pc, #16]	; (16ac <I2C_HEATERS_CLOCK_init+0x24>)
    169c:	4b04      	ldr	r3, [pc, #16]	; (16b0 <I2C_HEATERS_CLOCK_init+0x28>)
    169e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    16a0:	4804      	ldr	r0, [pc, #16]	; (16b4 <I2C_HEATERS_CLOCK_init+0x2c>)
    16a2:	4b05      	ldr	r3, [pc, #20]	; (16b8 <I2C_HEATERS_CLOCK_init+0x30>)
    16a4:	4798      	blx	r3
}
    16a6:	bf00      	nop
    16a8:	bd80      	pop	{r7, pc}
    16aa:	bf00      	nop
    16ac:	40001c00 	.word	0x40001c00
    16b0:	00000a29 	.word	0x00000a29
    16b4:	40000800 	.word	0x40000800
    16b8:	00000b2f 	.word	0x00000b2f

000016bc <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    16bc:	b580      	push	{r7, lr}
    16be:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <I2C_HEATERS_init+0x18>)
    16c2:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    16c4:	4904      	ldr	r1, [pc, #16]	; (16d8 <I2C_HEATERS_init+0x1c>)
    16c6:	4805      	ldr	r0, [pc, #20]	; (16dc <I2C_HEATERS_init+0x20>)
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <I2C_HEATERS_init+0x24>)
    16ca:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    16cc:	4b05      	ldr	r3, [pc, #20]	; (16e4 <I2C_HEATERS_init+0x28>)
    16ce:	4798      	blx	r3
}
    16d0:	bf00      	nop
    16d2:	bd80      	pop	{r7, pc}
    16d4:	00001689 	.word	0x00001689
    16d8:	40003400 	.word	0x40003400
    16dc:	20001108 	.word	0x20001108
    16e0:	00002465 	.word	0x00002465
    16e4:	00001651 	.word	0x00001651

000016e8 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    16e8:	b580      	push	{r7, lr}
    16ea:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    16ec:	2100      	movs	r1, #0
    16ee:	203b      	movs	r0, #59	; 0x3b
    16f0:	4b11      	ldr	r3, [pc, #68]	; (1738 <SPI_TEMP_PORT_init+0x50>)
    16f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    16f4:	2102      	movs	r1, #2
    16f6:	203b      	movs	r0, #59	; 0x3b
    16f8:	4b10      	ldr	r3, [pc, #64]	; (173c <SPI_TEMP_PORT_init+0x54>)
    16fa:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    16fc:	4910      	ldr	r1, [pc, #64]	; (1740 <SPI_TEMP_PORT_init+0x58>)
    16fe:	203b      	movs	r0, #59	; 0x3b
    1700:	4b10      	ldr	r3, [pc, #64]	; (1744 <SPI_TEMP_PORT_init+0x5c>)
    1702:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1704:	2100      	movs	r1, #0
    1706:	203a      	movs	r0, #58	; 0x3a
    1708:	4b0b      	ldr	r3, [pc, #44]	; (1738 <SPI_TEMP_PORT_init+0x50>)
    170a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    170c:	2102      	movs	r1, #2
    170e:	203a      	movs	r0, #58	; 0x3a
    1710:	4b0a      	ldr	r3, [pc, #40]	; (173c <SPI_TEMP_PORT_init+0x54>)
    1712:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1714:	490c      	ldr	r1, [pc, #48]	; (1748 <SPI_TEMP_PORT_init+0x60>)
    1716:	203a      	movs	r0, #58	; 0x3a
    1718:	4b0a      	ldr	r3, [pc, #40]	; (1744 <SPI_TEMP_PORT_init+0x5c>)
    171a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    171c:	2101      	movs	r1, #1
    171e:	203c      	movs	r0, #60	; 0x3c
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <SPI_TEMP_PORT_init+0x54>)
    1722:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1724:	2100      	movs	r1, #0
    1726:	203c      	movs	r0, #60	; 0x3c
    1728:	4b08      	ldr	r3, [pc, #32]	; (174c <SPI_TEMP_PORT_init+0x64>)
    172a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    172c:	4908      	ldr	r1, [pc, #32]	; (1750 <SPI_TEMP_PORT_init+0x68>)
    172e:	203c      	movs	r0, #60	; 0x3c
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <SPI_TEMP_PORT_init+0x5c>)
    1732:	4798      	blx	r3
}
    1734:	bf00      	nop
    1736:	bd80      	pop	{r7, pc}
    1738:	000012b5 	.word	0x000012b5
    173c:	0000127d 	.word	0x0000127d
    1740:	003b0003 	.word	0x003b0003
    1744:	0000125d 	.word	0x0000125d
    1748:	003a0003 	.word	0x003a0003
    174c:	00001229 	.word	0x00001229
    1750:	003c0003 	.word	0x003c0003

00001754 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1758:	2245      	movs	r2, #69	; 0x45
    175a:	2122      	movs	r1, #34	; 0x22
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <SPI_TEMP_CLOCK_init+0x24>)
    175e:	4b07      	ldr	r3, [pc, #28]	; (177c <SPI_TEMP_CLOCK_init+0x28>)
    1760:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1762:	224a      	movs	r2, #74	; 0x4a
    1764:	2103      	movs	r1, #3
    1766:	4804      	ldr	r0, [pc, #16]	; (1778 <SPI_TEMP_CLOCK_init+0x24>)
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <SPI_TEMP_CLOCK_init+0x28>)
    176a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    176c:	4804      	ldr	r0, [pc, #16]	; (1780 <SPI_TEMP_CLOCK_init+0x2c>)
    176e:	4b05      	ldr	r3, [pc, #20]	; (1784 <SPI_TEMP_CLOCK_init+0x30>)
    1770:	4798      	blx	r3
}
    1772:	bf00      	nop
    1774:	bd80      	pop	{r7, pc}
    1776:	bf00      	nop
    1778:	40001c00 	.word	0x40001c00
    177c:	00000a29 	.word	0x00000a29
    1780:	40000800 	.word	0x40000800
    1784:	00000c8f 	.word	0x00000c8f

00001788 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1788:	b580      	push	{r7, lr}
    178a:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    178c:	4b05      	ldr	r3, [pc, #20]	; (17a4 <SPI_TEMP_init+0x1c>)
    178e:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1790:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1794:	4804      	ldr	r0, [pc, #16]	; (17a8 <SPI_TEMP_init+0x20>)
    1796:	4b05      	ldr	r3, [pc, #20]	; (17ac <SPI_TEMP_init+0x24>)
    1798:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <SPI_TEMP_init+0x28>)
    179c:	4798      	blx	r3
}
    179e:	bf00      	nop
    17a0:	bd80      	pop	{r7, pc}
    17a2:	bf00      	nop
    17a4:	00001755 	.word	0x00001755
    17a8:	20001030 	.word	0x20001030
    17ac:	00002751 	.word	0x00002751
    17b0:	000016e9 	.word	0x000016e9

000017b4 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    17b8:	2100      	movs	r1, #0
    17ba:	2017      	movs	r0, #23
    17bc:	4b07      	ldr	r3, [pc, #28]	; (17dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    17be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    17c0:	4907      	ldr	r1, [pc, #28]	; (17e0 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    17c2:	2017      	movs	r0, #23
    17c4:	4b07      	ldr	r3, [pc, #28]	; (17e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    17c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    17c8:	2100      	movs	r1, #0
    17ca:	2016      	movs	r0, #22
    17cc:	4b03      	ldr	r3, [pc, #12]	; (17dc <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    17ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    17d0:	4905      	ldr	r1, [pc, #20]	; (17e8 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    17d2:	2016      	movs	r0, #22
    17d4:	4b03      	ldr	r3, [pc, #12]	; (17e4 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    17d6:	4798      	blx	r3
}
    17d8:	bf00      	nop
    17da:	bd80      	pop	{r7, pc}
    17dc:	00001229 	.word	0x00001229
    17e0:	00170003 	.word	0x00170003
    17e4:	0000125d 	.word	0x0000125d
    17e8:	00160003 	.word	0x00160003

000017ec <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17f0:	2244      	movs	r2, #68	; 0x44
    17f2:	2123      	movs	r1, #35	; 0x23
    17f4:	4806      	ldr	r0, [pc, #24]	; (1810 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    17f6:	4b07      	ldr	r3, [pc, #28]	; (1814 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    17f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17fa:	224a      	movs	r2, #74	; 0x4a
    17fc:	2103      	movs	r1, #3
    17fe:	4804      	ldr	r0, [pc, #16]	; (1810 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1802:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1804:	4804      	ldr	r0, [pc, #16]	; (1818 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1808:	4798      	blx	r3
}
    180a:	bf00      	nop
    180c:	bd80      	pop	{r7, pc}
    180e:	bf00      	nop
    1810:	40001c00 	.word	0x40001c00
    1814:	00000a29 	.word	0x00000a29
    1818:	40000800 	.word	0x40000800
    181c:	00000caf 	.word	0x00000caf

00001820 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1820:	b580      	push	{r7, lr}
    1822:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <I2C_FLAPPER_VALVE_init+0x18>)
    1826:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1828:	4904      	ldr	r1, [pc, #16]	; (183c <I2C_FLAPPER_VALVE_init+0x1c>)
    182a:	4805      	ldr	r0, [pc, #20]	; (1840 <I2C_FLAPPER_VALVE_init+0x20>)
    182c:	4b05      	ldr	r3, [pc, #20]	; (1844 <I2C_FLAPPER_VALVE_init+0x24>)
    182e:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1830:	4b05      	ldr	r3, [pc, #20]	; (1848 <I2C_FLAPPER_VALVE_init+0x28>)
    1832:	4798      	blx	r3
}
    1834:	bf00      	nop
    1836:	bd80      	pop	{r7, pc}
    1838:	000017ed 	.word	0x000017ed
    183c:	43000400 	.word	0x43000400
    1840:	200010cc 	.word	0x200010cc
    1844:	00002465 	.word	0x00002465
    1848:	000017b5 	.word	0x000017b5

0000184c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1850:	2100      	movs	r1, #0
    1852:	2044      	movs	r0, #68	; 0x44
    1854:	4b11      	ldr	r3, [pc, #68]	; (189c <SPI_HI3593_PORT_init+0x50>)
    1856:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1858:	2102      	movs	r1, #2
    185a:	2044      	movs	r0, #68	; 0x44
    185c:	4b10      	ldr	r3, [pc, #64]	; (18a0 <SPI_HI3593_PORT_init+0x54>)
    185e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1860:	4910      	ldr	r1, [pc, #64]	; (18a4 <SPI_HI3593_PORT_init+0x58>)
    1862:	2044      	movs	r0, #68	; 0x44
    1864:	4b10      	ldr	r3, [pc, #64]	; (18a8 <SPI_HI3593_PORT_init+0x5c>)
    1866:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1868:	2100      	movs	r1, #0
    186a:	2045      	movs	r0, #69	; 0x45
    186c:	4b0b      	ldr	r3, [pc, #44]	; (189c <SPI_HI3593_PORT_init+0x50>)
    186e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1870:	2102      	movs	r1, #2
    1872:	2045      	movs	r0, #69	; 0x45
    1874:	4b0a      	ldr	r3, [pc, #40]	; (18a0 <SPI_HI3593_PORT_init+0x54>)
    1876:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1878:	490c      	ldr	r1, [pc, #48]	; (18ac <SPI_HI3593_PORT_init+0x60>)
    187a:	2045      	movs	r0, #69	; 0x45
    187c:	4b0a      	ldr	r3, [pc, #40]	; (18a8 <SPI_HI3593_PORT_init+0x5c>)
    187e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1880:	2101      	movs	r1, #1
    1882:	2047      	movs	r0, #71	; 0x47
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <SPI_HI3593_PORT_init+0x54>)
    1886:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1888:	2100      	movs	r1, #0
    188a:	2047      	movs	r0, #71	; 0x47
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <SPI_HI3593_PORT_init+0x64>)
    188e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1890:	4908      	ldr	r1, [pc, #32]	; (18b4 <SPI_HI3593_PORT_init+0x68>)
    1892:	2047      	movs	r0, #71	; 0x47
    1894:	4b04      	ldr	r3, [pc, #16]	; (18a8 <SPI_HI3593_PORT_init+0x5c>)
    1896:	4798      	blx	r3
}
    1898:	bf00      	nop
    189a:	bd80      	pop	{r7, pc}
    189c:	000012b5 	.word	0x000012b5
    18a0:	0000127d 	.word	0x0000127d
    18a4:	00440002 	.word	0x00440002
    18a8:	0000125d 	.word	0x0000125d
    18ac:	00450002 	.word	0x00450002
    18b0:	00001229 	.word	0x00001229
    18b4:	00470002 	.word	0x00470002

000018b8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18bc:	2242      	movs	r2, #66	; 0x42
    18be:	2124      	movs	r1, #36	; 0x24
    18c0:	4806      	ldr	r0, [pc, #24]	; (18dc <SPI_HI3593_CLOCK_init+0x24>)
    18c2:	4b07      	ldr	r3, [pc, #28]	; (18e0 <SPI_HI3593_CLOCK_init+0x28>)
    18c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18c6:	224a      	movs	r2, #74	; 0x4a
    18c8:	2103      	movs	r1, #3
    18ca:	4804      	ldr	r0, [pc, #16]	; (18dc <SPI_HI3593_CLOCK_init+0x24>)
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <SPI_HI3593_CLOCK_init+0x28>)
    18ce:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    18d0:	4804      	ldr	r0, [pc, #16]	; (18e4 <SPI_HI3593_CLOCK_init+0x2c>)
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <SPI_HI3593_CLOCK_init+0x30>)
    18d4:	4798      	blx	r3
}
    18d6:	bf00      	nop
    18d8:	bd80      	pop	{r7, pc}
    18da:	bf00      	nop
    18dc:	40001c00 	.word	0x40001c00
    18e0:	00000a29 	.word	0x00000a29
    18e4:	40000800 	.word	0x40000800
    18e8:	00000ccf 	.word	0x00000ccf

000018ec <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <SPI_HI3593_init+0x18>)
    18f2:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    18f4:	4904      	ldr	r1, [pc, #16]	; (1908 <SPI_HI3593_init+0x1c>)
    18f6:	4805      	ldr	r0, [pc, #20]	; (190c <SPI_HI3593_init+0x20>)
    18f8:	4b05      	ldr	r3, [pc, #20]	; (1910 <SPI_HI3593_init+0x24>)
    18fa:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    18fc:	4b05      	ldr	r3, [pc, #20]	; (1914 <SPI_HI3593_init+0x28>)
    18fe:	4798      	blx	r3
}
    1900:	bf00      	nop
    1902:	bd80      	pop	{r7, pc}
    1904:	000018b9 	.word	0x000018b9
    1908:	43000800 	.word	0x43000800
    190c:	20001018 	.word	0x20001018
    1910:	00002751 	.word	0x00002751
    1914:	0000184d 	.word	0x0000184d

00001918 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1918:	b580      	push	{r7, lr}
    191a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    191c:	2100      	movs	r1, #0
    191e:	2068      	movs	r0, #104	; 0x68
    1920:	4b07      	ldr	r3, [pc, #28]	; (1940 <I2C_FANS_PORT_init+0x28>)
    1922:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1924:	4907      	ldr	r1, [pc, #28]	; (1944 <I2C_FANS_PORT_init+0x2c>)
    1926:	2068      	movs	r0, #104	; 0x68
    1928:	4b07      	ldr	r3, [pc, #28]	; (1948 <I2C_FANS_PORT_init+0x30>)
    192a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    192c:	2100      	movs	r1, #0
    192e:	2069      	movs	r0, #105	; 0x69
    1930:	4b03      	ldr	r3, [pc, #12]	; (1940 <I2C_FANS_PORT_init+0x28>)
    1932:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1934:	4905      	ldr	r1, [pc, #20]	; (194c <I2C_FANS_PORT_init+0x34>)
    1936:	2069      	movs	r0, #105	; 0x69
    1938:	4b03      	ldr	r3, [pc, #12]	; (1948 <I2C_FANS_PORT_init+0x30>)
    193a:	4798      	blx	r3
}
    193c:	bf00      	nop
    193e:	bd80      	pop	{r7, pc}
    1940:	00001229 	.word	0x00001229
    1944:	00680002 	.word	0x00680002
    1948:	0000125d 	.word	0x0000125d
    194c:	00690002 	.word	0x00690002

00001950 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1950:	b580      	push	{r7, lr}
    1952:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1954:	2244      	movs	r2, #68	; 0x44
    1956:	2125      	movs	r1, #37	; 0x25
    1958:	4806      	ldr	r0, [pc, #24]	; (1974 <I2C_FANS_CLOCK_init+0x24>)
    195a:	4b07      	ldr	r3, [pc, #28]	; (1978 <I2C_FANS_CLOCK_init+0x28>)
    195c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    195e:	224a      	movs	r2, #74	; 0x4a
    1960:	2103      	movs	r1, #3
    1962:	4804      	ldr	r0, [pc, #16]	; (1974 <I2C_FANS_CLOCK_init+0x24>)
    1964:	4b04      	ldr	r3, [pc, #16]	; (1978 <I2C_FANS_CLOCK_init+0x28>)
    1966:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1968:	4804      	ldr	r0, [pc, #16]	; (197c <I2C_FANS_CLOCK_init+0x2c>)
    196a:	4b05      	ldr	r3, [pc, #20]	; (1980 <I2C_FANS_CLOCK_init+0x30>)
    196c:	4798      	blx	r3
}
    196e:	bf00      	nop
    1970:	bd80      	pop	{r7, pc}
    1972:	bf00      	nop
    1974:	40001c00 	.word	0x40001c00
    1978:	00000a29 	.word	0x00000a29
    197c:	40000800 	.word	0x40000800
    1980:	00000cef 	.word	0x00000cef

00001984 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1984:	b580      	push	{r7, lr}
    1986:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1988:	4b04      	ldr	r3, [pc, #16]	; (199c <I2C_FANS_init+0x18>)
    198a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    198c:	4904      	ldr	r1, [pc, #16]	; (19a0 <I2C_FANS_init+0x1c>)
    198e:	4805      	ldr	r0, [pc, #20]	; (19a4 <I2C_FANS_init+0x20>)
    1990:	4b05      	ldr	r3, [pc, #20]	; (19a8 <I2C_FANS_init+0x24>)
    1992:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <I2C_FANS_init+0x28>)
    1996:	4798      	blx	r3
}
    1998:	bf00      	nop
    199a:	bd80      	pop	{r7, pc}
    199c:	00001951 	.word	0x00001951
    19a0:	43000c00 	.word	0x43000c00
    19a4:	20001048 	.word	0x20001048
    19a8:	00002465 	.word	0x00002465
    19ac:	00001919 	.word	0x00001919

000019b0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    19b4:	4808      	ldr	r0, [pc, #32]	; (19d8 <TIMER_USB_init+0x28>)
    19b6:	4b09      	ldr	r3, [pc, #36]	; (19dc <TIMER_USB_init+0x2c>)
    19b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19ba:	2243      	movs	r2, #67	; 0x43
    19bc:	2109      	movs	r1, #9
    19be:	4808      	ldr	r0, [pc, #32]	; (19e0 <TIMER_USB_init+0x30>)
    19c0:	4b08      	ldr	r3, [pc, #32]	; (19e4 <TIMER_USB_init+0x34>)
    19c2:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    19c4:	4b08      	ldr	r3, [pc, #32]	; (19e8 <TIMER_USB_init+0x38>)
    19c6:	4798      	blx	r3
    19c8:	4603      	mov	r3, r0
    19ca:	461a      	mov	r2, r3
    19cc:	4907      	ldr	r1, [pc, #28]	; (19ec <TIMER_USB_init+0x3c>)
    19ce:	4808      	ldr	r0, [pc, #32]	; (19f0 <TIMER_USB_init+0x40>)
    19d0:	4b08      	ldr	r3, [pc, #32]	; (19f4 <TIMER_USB_init+0x44>)
    19d2:	4798      	blx	r3
}
    19d4:	bf00      	nop
    19d6:	bd80      	pop	{r7, pc}
    19d8:	40000800 	.word	0x40000800
    19dc:	00000b4f 	.word	0x00000b4f
    19e0:	40001c00 	.word	0x40001c00
    19e4:	00000a29 	.word	0x00000a29
    19e8:	000080d1 	.word	0x000080d1
    19ec:	40003800 	.word	0x40003800
    19f0:	20001170 	.word	0x20001170
    19f4:	00002921 	.word	0x00002921

000019f8 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    19fc:	4808      	ldr	r0, [pc, #32]	; (1a20 <TIMER_ARINC_init+0x28>)
    19fe:	4b09      	ldr	r3, [pc, #36]	; (1a24 <TIMER_ARINC_init+0x2c>)
    1a00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a02:	2244      	movs	r2, #68	; 0x44
    1a04:	211a      	movs	r1, #26
    1a06:	4808      	ldr	r0, [pc, #32]	; (1a28 <TIMER_ARINC_init+0x30>)
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <TIMER_ARINC_init+0x34>)
    1a0a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1a0c:	4b08      	ldr	r3, [pc, #32]	; (1a30 <TIMER_ARINC_init+0x38>)
    1a0e:	4798      	blx	r3
    1a10:	4603      	mov	r3, r0
    1a12:	461a      	mov	r2, r3
    1a14:	4907      	ldr	r1, [pc, #28]	; (1a34 <TIMER_ARINC_init+0x3c>)
    1a16:	4808      	ldr	r0, [pc, #32]	; (1a38 <TIMER_ARINC_init+0x40>)
    1a18:	4b08      	ldr	r3, [pc, #32]	; (1a3c <TIMER_ARINC_init+0x44>)
    1a1a:	4798      	blx	r3
}
    1a1c:	bf00      	nop
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	40000800 	.word	0x40000800
    1a24:	00000c0f 	.word	0x00000c0f
    1a28:	40001c00 	.word	0x40001c00
    1a2c:	00000a29 	.word	0x00000a29
    1a30:	000080d1 	.word	0x000080d1
    1a34:	4101a000 	.word	0x4101a000
    1a38:	20001150 	.word	0x20001150
    1a3c:	00002921 	.word	0x00002921

00001a40 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1a44:	4808      	ldr	r0, [pc, #32]	; (1a68 <TIMER_MAINTENANCE_init+0x28>)
    1a46:	4b09      	ldr	r3, [pc, #36]	; (1a6c <TIMER_MAINTENANCE_init+0x2c>)
    1a48:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a4a:	2246      	movs	r2, #70	; 0x46
    1a4c:	211e      	movs	r1, #30
    1a4e:	4808      	ldr	r0, [pc, #32]	; (1a70 <TIMER_MAINTENANCE_init+0x30>)
    1a50:	4b08      	ldr	r3, [pc, #32]	; (1a74 <TIMER_MAINTENANCE_init+0x34>)
    1a52:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1a54:	4b08      	ldr	r3, [pc, #32]	; (1a78 <TIMER_MAINTENANCE_init+0x38>)
    1a56:	4798      	blx	r3
    1a58:	4603      	mov	r3, r0
    1a5a:	461a      	mov	r2, r3
    1a5c:	4907      	ldr	r1, [pc, #28]	; (1a7c <TIMER_MAINTENANCE_init+0x3c>)
    1a5e:	4808      	ldr	r0, [pc, #32]	; (1a80 <TIMER_MAINTENANCE_init+0x40>)
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <TIMER_MAINTENANCE_init+0x44>)
    1a62:	4798      	blx	r3
}
    1a64:	bf00      	nop
    1a66:	bd80      	pop	{r7, pc}
    1a68:	40000800 	.word	0x40000800
    1a6c:	00000c2f 	.word	0x00000c2f
    1a70:	40001c00 	.word	0x40001c00
    1a74:	00000a29 	.word	0x00000a29
    1a78:	000080d1 	.word	0x000080d1
    1a7c:	42001400 	.word	0x42001400
    1a80:	20001068 	.word	0x20001068
    1a84:	00002921 	.word	0x00002921

00001a88 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1a8c:	4808      	ldr	r0, [pc, #32]	; (1ab0 <TIMER_INTERFACE_init+0x28>)
    1a8e:	4b09      	ldr	r3, [pc, #36]	; (1ab4 <TIMER_INTERFACE_init+0x2c>)
    1a90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a92:	2246      	movs	r2, #70	; 0x46
    1a94:	211e      	movs	r1, #30
    1a96:	4808      	ldr	r0, [pc, #32]	; (1ab8 <TIMER_INTERFACE_init+0x30>)
    1a98:	4b08      	ldr	r3, [pc, #32]	; (1abc <TIMER_INTERFACE_init+0x34>)
    1a9a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1a9c:	4b08      	ldr	r3, [pc, #32]	; (1ac0 <TIMER_INTERFACE_init+0x38>)
    1a9e:	4798      	blx	r3
    1aa0:	4603      	mov	r3, r0
    1aa2:	461a      	mov	r2, r3
    1aa4:	4907      	ldr	r1, [pc, #28]	; (1ac4 <TIMER_INTERFACE_init+0x3c>)
    1aa6:	4808      	ldr	r0, [pc, #32]	; (1ac8 <TIMER_INTERFACE_init+0x40>)
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <TIMER_INTERFACE_init+0x44>)
    1aaa:	4798      	blx	r3
}
    1aac:	bf00      	nop
    1aae:	bd80      	pop	{r7, pc}
    1ab0:	40000800 	.word	0x40000800
    1ab4:	00000c4f 	.word	0x00000c4f
    1ab8:	40001c00 	.word	0x40001c00
    1abc:	00000a29 	.word	0x00000a29
    1ac0:	000080d1 	.word	0x000080d1
    1ac4:	42001800 	.word	0x42001800
    1ac8:	200010ac 	.word	0x200010ac
    1acc:	00002921 	.word	0x00002921

00001ad0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1ad4:	4808      	ldr	r0, [pc, #32]	; (1af8 <TIMER_EVENT_init+0x28>)
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <TIMER_EVENT_init+0x2c>)
    1ad8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ada:	2246      	movs	r2, #70	; 0x46
    1adc:	2127      	movs	r1, #39	; 0x27
    1ade:	4808      	ldr	r0, [pc, #32]	; (1b00 <TIMER_EVENT_init+0x30>)
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <TIMER_EVENT_init+0x34>)
    1ae2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1ae4:	4b08      	ldr	r3, [pc, #32]	; (1b08 <TIMER_EVENT_init+0x38>)
    1ae6:	4798      	blx	r3
    1ae8:	4603      	mov	r3, r0
    1aea:	461a      	mov	r2, r3
    1aec:	4907      	ldr	r1, [pc, #28]	; (1b0c <TIMER_EVENT_init+0x3c>)
    1aee:	4808      	ldr	r0, [pc, #32]	; (1b10 <TIMER_EVENT_init+0x40>)
    1af0:	4b08      	ldr	r3, [pc, #32]	; (1b14 <TIMER_EVENT_init+0x44>)
    1af2:	4798      	blx	r3
}
    1af4:	bf00      	nop
    1af6:	bd80      	pop	{r7, pc}
    1af8:	40000800 	.word	0x40000800
    1afc:	00000d0f 	.word	0x00000d0f
    1b00:	40001c00 	.word	0x40001c00
    1b04:	00000a29 	.word	0x00000a29
    1b08:	000080d1 	.word	0x000080d1
    1b0c:	43001400 	.word	0x43001400
    1b10:	2000108c 	.word	0x2000108c
    1b14:	00002921 	.word	0x00002921

00001b18 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1b18:	b480      	push	{r7}
    1b1a:	af00      	add	r7, sp, #0
}
    1b1c:	bf00      	nop
    1b1e:	46bd      	mov	sp, r7
    1b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b24:	4770      	bx	lr
	...

00001b28 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1b2c:	4804      	ldr	r0, [pc, #16]	; (1b40 <LIVE_PULSE_CLOCK_init+0x18>)
    1b2e:	4b05      	ldr	r3, [pc, #20]	; (1b44 <LIVE_PULSE_CLOCK_init+0x1c>)
    1b30:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b32:	2240      	movs	r2, #64	; 0x40
    1b34:	2127      	movs	r1, #39	; 0x27
    1b36:	4804      	ldr	r0, [pc, #16]	; (1b48 <LIVE_PULSE_CLOCK_init+0x20>)
    1b38:	4b04      	ldr	r3, [pc, #16]	; (1b4c <LIVE_PULSE_CLOCK_init+0x24>)
    1b3a:	4798      	blx	r3
}
    1b3c:	bf00      	nop
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	40000800 	.word	0x40000800
    1b44:	00000d2f 	.word	0x00000d2f
    1b48:	40001c00 	.word	0x40001c00
    1b4c:	00000a29 	.word	0x00000a29

00001b50 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1b54:	4b06      	ldr	r3, [pc, #24]	; (1b70 <LIVE_PULSE_init+0x20>)
    1b56:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1b58:	4b06      	ldr	r3, [pc, #24]	; (1b74 <LIVE_PULSE_init+0x24>)
    1b5a:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1b5c:	4b06      	ldr	r3, [pc, #24]	; (1b78 <LIVE_PULSE_init+0x28>)
    1b5e:	4798      	blx	r3
    1b60:	4603      	mov	r3, r0
    1b62:	461a      	mov	r2, r3
    1b64:	4905      	ldr	r1, [pc, #20]	; (1b7c <LIVE_PULSE_init+0x2c>)
    1b66:	4806      	ldr	r0, [pc, #24]	; (1b80 <LIVE_PULSE_init+0x30>)
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <LIVE_PULSE_init+0x34>)
    1b6a:	4798      	blx	r3
}
    1b6c:	bf00      	nop
    1b6e:	bd80      	pop	{r7, pc}
    1b70:	00001b29 	.word	0x00001b29
    1b74:	00001b19 	.word	0x00001b19
    1b78:	000080e5 	.word	0x000080e5
    1b7c:	43001800 	.word	0x43001800
    1b80:	200010ec 	.word	0x200010ec
    1b84:	00002541 	.word	0x00002541

00001b88 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1b8c:	4804      	ldr	r0, [pc, #16]	; (1ba0 <TIMER_HVAC_CLOCK_init+0x18>)
    1b8e:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <TIMER_HVAC_CLOCK_init+0x1c>)
    1b90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b92:	2244      	movs	r2, #68	; 0x44
    1b94:	2119      	movs	r1, #25
    1b96:	4804      	ldr	r0, [pc, #16]	; (1ba8 <TIMER_HVAC_CLOCK_init+0x20>)
    1b98:	4b04      	ldr	r3, [pc, #16]	; (1bac <TIMER_HVAC_CLOCK_init+0x24>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bf00      	nop
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	40000800 	.word	0x40000800
    1ba4:	00000bcf 	.word	0x00000bcf
    1ba8:	40001c00 	.word	0x40001c00
    1bac:	00000a29 	.word	0x00000a29

00001bb0 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1bb4:	4b05      	ldr	r3, [pc, #20]	; (1bcc <TIMER_HVAC_init+0x1c>)
    1bb6:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1bb8:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <TIMER_HVAC_init+0x20>)
    1bba:	4798      	blx	r3
    1bbc:	4603      	mov	r3, r0
    1bbe:	461a      	mov	r2, r3
    1bc0:	4904      	ldr	r1, [pc, #16]	; (1bd4 <TIMER_HVAC_init+0x24>)
    1bc2:	4805      	ldr	r0, [pc, #20]	; (1bd8 <TIMER_HVAC_init+0x28>)
    1bc4:	4b05      	ldr	r3, [pc, #20]	; (1bdc <TIMER_HVAC_init+0x2c>)
    1bc6:	4798      	blx	r3
}
    1bc8:	bf00      	nop
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	00001b89 	.word	0x00001b89
    1bd0:	00007491 	.word	0x00007491
    1bd4:	41016000 	.word	0x41016000
    1bd8:	20001190 	.word	0x20001190
    1bdc:	00002921 	.word	0x00002921

00001be0 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1be4:	4804      	ldr	r0, [pc, #16]	; (1bf8 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1be6:	4b05      	ldr	r3, [pc, #20]	; (1bfc <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1be8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bea:	2244      	movs	r2, #68	; 0x44
    1bec:	2119      	movs	r1, #25
    1bee:	4804      	ldr	r0, [pc, #16]	; (1c00 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1bf0:	4b04      	ldr	r3, [pc, #16]	; (1c04 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1bf2:	4798      	blx	r3
}
    1bf4:	bf00      	nop
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	40000800 	.word	0x40000800
    1bfc:	00000bef 	.word	0x00000bef
    1c00:	40001c00 	.word	0x40001c00
    1c04:	00000a29 	.word	0x00000a29

00001c08 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1c0c:	4b05      	ldr	r3, [pc, #20]	; (1c24 <TIMER_TEMPERATURES_init+0x1c>)
    1c0e:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1c10:	4b05      	ldr	r3, [pc, #20]	; (1c28 <TIMER_TEMPERATURES_init+0x20>)
    1c12:	4798      	blx	r3
    1c14:	4603      	mov	r3, r0
    1c16:	461a      	mov	r2, r3
    1c18:	4904      	ldr	r1, [pc, #16]	; (1c2c <TIMER_TEMPERATURES_init+0x24>)
    1c1a:	4805      	ldr	r0, [pc, #20]	; (1c30 <TIMER_TEMPERATURES_init+0x28>)
    1c1c:	4b05      	ldr	r3, [pc, #20]	; (1c34 <TIMER_TEMPERATURES_init+0x2c>)
    1c1e:	4798      	blx	r3
}
    1c20:	bf00      	nop
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00001be1 	.word	0x00001be1
    1c28:	00007491 	.word	0x00007491
    1c2c:	41018000 	.word	0x41018000
    1c30:	20000ff8 	.word	0x20000ff8
    1c34:	00002921 	.word	0x00002921

00001c38 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1c3c:	2102      	movs	r1, #2
    1c3e:	2018      	movs	r0, #24
    1c40:	4b0f      	ldr	r3, [pc, #60]	; (1c80 <CDCUSB_PORT_init+0x48>)
    1c42:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1c44:	2100      	movs	r1, #0
    1c46:	2018      	movs	r0, #24
    1c48:	4b0e      	ldr	r3, [pc, #56]	; (1c84 <CDCUSB_PORT_init+0x4c>)
    1c4a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1c4c:	2100      	movs	r1, #0
    1c4e:	2018      	movs	r0, #24
    1c50:	4b0d      	ldr	r3, [pc, #52]	; (1c88 <CDCUSB_PORT_init+0x50>)
    1c52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1c54:	490d      	ldr	r1, [pc, #52]	; (1c8c <CDCUSB_PORT_init+0x54>)
    1c56:	2018      	movs	r0, #24
    1c58:	4b0d      	ldr	r3, [pc, #52]	; (1c90 <CDCUSB_PORT_init+0x58>)
    1c5a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1c5c:	2102      	movs	r1, #2
    1c5e:	2019      	movs	r0, #25
    1c60:	4b07      	ldr	r3, [pc, #28]	; (1c80 <CDCUSB_PORT_init+0x48>)
    1c62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1c64:	2100      	movs	r1, #0
    1c66:	2019      	movs	r0, #25
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <CDCUSB_PORT_init+0x4c>)
    1c6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1c6c:	2100      	movs	r1, #0
    1c6e:	2019      	movs	r0, #25
    1c70:	4b05      	ldr	r3, [pc, #20]	; (1c88 <CDCUSB_PORT_init+0x50>)
    1c72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1c74:	4907      	ldr	r1, [pc, #28]	; (1c94 <CDCUSB_PORT_init+0x5c>)
    1c76:	2019      	movs	r0, #25
    1c78:	4b05      	ldr	r3, [pc, #20]	; (1c90 <CDCUSB_PORT_init+0x58>)
    1c7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1c7c:	bf00      	nop
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	0000127d 	.word	0x0000127d
    1c84:	000012b5 	.word	0x000012b5
    1c88:	00001229 	.word	0x00001229
    1c8c:	00180007 	.word	0x00180007
    1c90:	0000125d 	.word	0x0000125d
    1c94:	00190007 	.word	0x00190007

00001c98 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1c9c:	2242      	movs	r2, #66	; 0x42
    1c9e:	210a      	movs	r1, #10
    1ca0:	4805      	ldr	r0, [pc, #20]	; (1cb8 <CDCUSB_CLOCK_init+0x20>)
    1ca2:	4b06      	ldr	r3, [pc, #24]	; (1cbc <CDCUSB_CLOCK_init+0x24>)
    1ca4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1ca6:	4806      	ldr	r0, [pc, #24]	; (1cc0 <CDCUSB_CLOCK_init+0x28>)
    1ca8:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <CDCUSB_CLOCK_init+0x2c>)
    1caa:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1cac:	4804      	ldr	r0, [pc, #16]	; (1cc0 <CDCUSB_CLOCK_init+0x28>)
    1cae:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <CDCUSB_CLOCK_init+0x30>)
    1cb0:	4798      	blx	r3
}
    1cb2:	bf00      	nop
    1cb4:	bd80      	pop	{r7, pc}
    1cb6:	bf00      	nop
    1cb8:	40001c00 	.word	0x40001c00
    1cbc:	00000a29 	.word	0x00000a29
    1cc0:	40000800 	.word	0x40000800
    1cc4:	00000a4f 	.word	0x00000a4f
    1cc8:	00000b6f 	.word	0x00000b6f

00001ccc <CDCUSB_init>:

void CDCUSB_init(void)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1cd0:	4b03      	ldr	r3, [pc, #12]	; (1ce0 <CDCUSB_init+0x14>)
    1cd2:	4798      	blx	r3
	usb_d_init();
    1cd4:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <CDCUSB_init+0x18>)
    1cd6:	4798      	blx	r3
	CDCUSB_PORT_init();
    1cd8:	4b03      	ldr	r3, [pc, #12]	; (1ce8 <CDCUSB_init+0x1c>)
    1cda:	4798      	blx	r3
}
    1cdc:	bf00      	nop
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	00001c99 	.word	0x00001c99
    1ce4:	0000317d 	.word	0x0000317d
    1ce8:	00001c39 	.word	0x00001c39

00001cec <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1cf0:	4802      	ldr	r0, [pc, #8]	; (1cfc <WATCHDOG_CLOCK_init+0x10>)
    1cf2:	4b03      	ldr	r3, [pc, #12]	; (1d00 <WATCHDOG_CLOCK_init+0x14>)
    1cf4:	4798      	blx	r3
}
    1cf6:	bf00      	nop
    1cf8:	bd80      	pop	{r7, pc}
    1cfa:	bf00      	nop
    1cfc:	40000800 	.word	0x40000800
    1d00:	00000acf 	.word	0x00000acf

00001d04 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1d08:	4b03      	ldr	r3, [pc, #12]	; (1d18 <WATCHDOG_init+0x14>)
    1d0a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1d0c:	4903      	ldr	r1, [pc, #12]	; (1d1c <WATCHDOG_init+0x18>)
    1d0e:	4804      	ldr	r0, [pc, #16]	; (1d20 <WATCHDOG_init+0x1c>)
    1d10:	4b04      	ldr	r3, [pc, #16]	; (1d24 <WATCHDOG_init+0x20>)
    1d12:	4798      	blx	r3
}
    1d14:	bf00      	nop
    1d16:	bd80      	pop	{r7, pc}
    1d18:	00001ced 	.word	0x00001ced
    1d1c:	40002000 	.word	0x40002000
    1d20:	200011d0 	.word	0x200011d0
    1d24:	000012fd 	.word	0x000012fd

00001d28 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1d2c:	4904      	ldr	r1, [pc, #16]	; (1d40 <CAN_CCU_PORT_init+0x18>)
    1d2e:	202d      	movs	r0, #45	; 0x2d
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <CAN_CCU_PORT_init+0x1c>)
    1d32:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <CAN_CCU_PORT_init+0x20>)
    1d36:	202c      	movs	r0, #44	; 0x2c
    1d38:	4b02      	ldr	r3, [pc, #8]	; (1d44 <CAN_CCU_PORT_init+0x1c>)
    1d3a:	4798      	blx	r3
}
    1d3c:	bf00      	nop
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	002d0007 	.word	0x002d0007
    1d44:	0000125d 	.word	0x0000125d
    1d48:	002c0007 	.word	0x002c0007

00001d4c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1d50:	4807      	ldr	r0, [pc, #28]	; (1d70 <CAN_CCU_init+0x24>)
    1d52:	4b08      	ldr	r3, [pc, #32]	; (1d74 <CAN_CCU_init+0x28>)
    1d54:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d56:	2243      	movs	r2, #67	; 0x43
    1d58:	211c      	movs	r1, #28
    1d5a:	4807      	ldr	r0, [pc, #28]	; (1d78 <CAN_CCU_init+0x2c>)
    1d5c:	4b07      	ldr	r3, [pc, #28]	; (1d7c <CAN_CCU_init+0x30>)
    1d5e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1d60:	4907      	ldr	r1, [pc, #28]	; (1d80 <CAN_CCU_init+0x34>)
    1d62:	4808      	ldr	r0, [pc, #32]	; (1d84 <CAN_CCU_init+0x38>)
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <CAN_CCU_init+0x3c>)
    1d66:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1d68:	4b08      	ldr	r3, [pc, #32]	; (1d8c <CAN_CCU_init+0x40>)
    1d6a:	4798      	blx	r3
}
    1d6c:	bf00      	nop
    1d6e:	bd80      	pop	{r7, pc}
    1d70:	40000800 	.word	0x40000800
    1d74:	00000a8f 	.word	0x00000a8f
    1d78:	40001c00 	.word	0x40001c00
    1d7c:	00000a29 	.word	0x00000a29
    1d80:	42000400 	.word	0x42000400
    1d84:	20001128 	.word	0x20001128
    1d88:	00001fe9 	.word	0x00001fe9
    1d8c:	00001d29 	.word	0x00001d29

00001d90 <system_init>:

void system_init(void)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	af00      	add	r7, sp, #0
	init_mcu();
    1d94:	4b5e      	ldr	r3, [pc, #376]	; (1f10 <system_init+0x180>)
    1d96:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1d98:	2100      	movs	r1, #0
    1d9a:	2007      	movs	r0, #7
    1d9c:	4b5d      	ldr	r3, [pc, #372]	; (1f14 <system_init+0x184>)
    1d9e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1da0:	2102      	movs	r1, #2
    1da2:	2007      	movs	r0, #7
    1da4:	4b5c      	ldr	r3, [pc, #368]	; (1f18 <system_init+0x188>)
    1da6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1da8:	f04f 31ff 	mov.w	r1, #4294967295
    1dac:	2007      	movs	r0, #7
    1dae:	4b5b      	ldr	r3, [pc, #364]	; (1f1c <system_init+0x18c>)
    1db0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1db2:	2101      	movs	r1, #1
    1db4:	200f      	movs	r0, #15
    1db6:	4b57      	ldr	r3, [pc, #348]	; (1f14 <system_init+0x184>)
    1db8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1dba:	2102      	movs	r1, #2
    1dbc:	200f      	movs	r0, #15
    1dbe:	4b56      	ldr	r3, [pc, #344]	; (1f18 <system_init+0x188>)
    1dc0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1dc2:	f04f 31ff 	mov.w	r1, #4294967295
    1dc6:	200f      	movs	r0, #15
    1dc8:	4b54      	ldr	r3, [pc, #336]	; (1f1c <system_init+0x18c>)
    1dca:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1dcc:	2101      	movs	r1, #1
    1dce:	2013      	movs	r0, #19
    1dd0:	4b50      	ldr	r3, [pc, #320]	; (1f14 <system_init+0x184>)
    1dd2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1dd4:	2102      	movs	r1, #2
    1dd6:	2013      	movs	r0, #19
    1dd8:	4b4f      	ldr	r3, [pc, #316]	; (1f18 <system_init+0x188>)
    1dda:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1ddc:	f04f 31ff 	mov.w	r1, #4294967295
    1de0:	2013      	movs	r0, #19
    1de2:	4b4e      	ldr	r3, [pc, #312]	; (1f1c <system_init+0x18c>)
    1de4:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1de6:	2101      	movs	r1, #1
    1de8:	201b      	movs	r0, #27
    1dea:	4b4a      	ldr	r3, [pc, #296]	; (1f14 <system_init+0x184>)
    1dec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1dee:	2102      	movs	r1, #2
    1df0:	201b      	movs	r0, #27
    1df2:	4b49      	ldr	r3, [pc, #292]	; (1f18 <system_init+0x188>)
    1df4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1df6:	f04f 31ff 	mov.w	r1, #4294967295
    1dfa:	201b      	movs	r0, #27
    1dfc:	4b47      	ldr	r3, [pc, #284]	; (1f1c <system_init+0x18c>)
    1dfe:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1e00:	2101      	movs	r1, #1
    1e02:	2027      	movs	r0, #39	; 0x27
    1e04:	4b43      	ldr	r3, [pc, #268]	; (1f14 <system_init+0x184>)
    1e06:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1e08:	2102      	movs	r1, #2
    1e0a:	2027      	movs	r0, #39	; 0x27
    1e0c:	4b42      	ldr	r3, [pc, #264]	; (1f18 <system_init+0x188>)
    1e0e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1e10:	f04f 31ff 	mov.w	r1, #4294967295
    1e14:	2027      	movs	r0, #39	; 0x27
    1e16:	4b41      	ldr	r3, [pc, #260]	; (1f1c <system_init+0x18c>)
    1e18:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1e1a:	2101      	movs	r1, #1
    1e1c:	203d      	movs	r0, #61	; 0x3d
    1e1e:	4b3d      	ldr	r3, [pc, #244]	; (1f14 <system_init+0x184>)
    1e20:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1e22:	2102      	movs	r1, #2
    1e24:	203d      	movs	r0, #61	; 0x3d
    1e26:	4b3c      	ldr	r3, [pc, #240]	; (1f18 <system_init+0x188>)
    1e28:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1e2a:	f04f 31ff 	mov.w	r1, #4294967295
    1e2e:	203d      	movs	r0, #61	; 0x3d
    1e30:	4b3a      	ldr	r3, [pc, #232]	; (1f1c <system_init+0x18c>)
    1e32:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1e34:	2101      	movs	r1, #1
    1e36:	203f      	movs	r0, #63	; 0x3f
    1e38:	4b37      	ldr	r3, [pc, #220]	; (1f18 <system_init+0x188>)
    1e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1e3c:	2101      	movs	r1, #1
    1e3e:	203f      	movs	r0, #63	; 0x3f
    1e40:	4b37      	ldr	r3, [pc, #220]	; (1f20 <system_init+0x190>)
    1e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1e44:	f04f 31ff 	mov.w	r1, #4294967295
    1e48:	203f      	movs	r0, #63	; 0x3f
    1e4a:	4b34      	ldr	r3, [pc, #208]	; (1f1c <system_init+0x18c>)
    1e4c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1e4e:	2100      	movs	r1, #0
    1e50:	204d      	movs	r0, #77	; 0x4d
    1e52:	4b30      	ldr	r3, [pc, #192]	; (1f14 <system_init+0x184>)
    1e54:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1e56:	2102      	movs	r1, #2
    1e58:	204d      	movs	r0, #77	; 0x4d
    1e5a:	4b2f      	ldr	r3, [pc, #188]	; (1f18 <system_init+0x188>)
    1e5c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1e5e:	f04f 31ff 	mov.w	r1, #4294967295
    1e62:	204d      	movs	r0, #77	; 0x4d
    1e64:	4b2d      	ldr	r3, [pc, #180]	; (1f1c <system_init+0x18c>)
    1e66:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1e68:	2101      	movs	r1, #1
    1e6a:	204e      	movs	r0, #78	; 0x4e
    1e6c:	4b29      	ldr	r3, [pc, #164]	; (1f14 <system_init+0x184>)
    1e6e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1e70:	2102      	movs	r1, #2
    1e72:	204e      	movs	r0, #78	; 0x4e
    1e74:	4b28      	ldr	r3, [pc, #160]	; (1f18 <system_init+0x188>)
    1e76:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1e78:	f04f 31ff 	mov.w	r1, #4294967295
    1e7c:	204e      	movs	r0, #78	; 0x4e
    1e7e:	4b27      	ldr	r3, [pc, #156]	; (1f1c <system_init+0x18c>)
    1e80:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1e82:	2100      	movs	r1, #0
    1e84:	204f      	movs	r0, #79	; 0x4f
    1e86:	4b23      	ldr	r3, [pc, #140]	; (1f14 <system_init+0x184>)
    1e88:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1e8a:	2102      	movs	r1, #2
    1e8c:	204f      	movs	r0, #79	; 0x4f
    1e8e:	4b22      	ldr	r3, [pc, #136]	; (1f18 <system_init+0x188>)
    1e90:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1e92:	f04f 31ff 	mov.w	r1, #4294967295
    1e96:	204f      	movs	r0, #79	; 0x4f
    1e98:	4b20      	ldr	r3, [pc, #128]	; (1f1c <system_init+0x18c>)
    1e9a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1e9c:	2100      	movs	r1, #0
    1e9e:	2052      	movs	r0, #82	; 0x52
    1ea0:	4b1c      	ldr	r3, [pc, #112]	; (1f14 <system_init+0x184>)
    1ea2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1ea4:	2102      	movs	r1, #2
    1ea6:	2052      	movs	r0, #82	; 0x52
    1ea8:	4b1b      	ldr	r3, [pc, #108]	; (1f18 <system_init+0x188>)
    1eaa:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1eac:	f04f 31ff 	mov.w	r1, #4294967295
    1eb0:	2052      	movs	r0, #82	; 0x52
    1eb2:	4b1a      	ldr	r3, [pc, #104]	; (1f1c <system_init+0x18c>)
    1eb4:	4798      	blx	r3

	CRC_CALC_init();
    1eb6:	4b1b      	ldr	r3, [pc, #108]	; (1f24 <system_init+0x194>)
    1eb8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1eba:	4b1b      	ldr	r3, [pc, #108]	; (1f28 <system_init+0x198>)
    1ebc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1ebe:	4b1b      	ldr	r3, [pc, #108]	; (1f2c <system_init+0x19c>)
    1ec0:	4798      	blx	r3

	QSPI_N25Q256_init();
    1ec2:	4b1b      	ldr	r3, [pc, #108]	; (1f30 <system_init+0x1a0>)
    1ec4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1ec6:	4b1b      	ldr	r3, [pc, #108]	; (1f34 <system_init+0x1a4>)
    1ec8:	4798      	blx	r3

	I2C_HEATERS_init();
    1eca:	4b1b      	ldr	r3, [pc, #108]	; (1f38 <system_init+0x1a8>)
    1ecc:	4798      	blx	r3

	SPI_TEMP_init();
    1ece:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <system_init+0x1ac>)
    1ed0:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1ed2:	4b1b      	ldr	r3, [pc, #108]	; (1f40 <system_init+0x1b0>)
    1ed4:	4798      	blx	r3

	SPI_HI3593_init();
    1ed6:	4b1b      	ldr	r3, [pc, #108]	; (1f44 <system_init+0x1b4>)
    1ed8:	4798      	blx	r3

	I2C_FANS_init();
    1eda:	4b1b      	ldr	r3, [pc, #108]	; (1f48 <system_init+0x1b8>)
    1edc:	4798      	blx	r3

	TIMER_USB_init();
    1ede:	4b1b      	ldr	r3, [pc, #108]	; (1f4c <system_init+0x1bc>)
    1ee0:	4798      	blx	r3
	TIMER_ARINC_init();
    1ee2:	4b1b      	ldr	r3, [pc, #108]	; (1f50 <system_init+0x1c0>)
    1ee4:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1ee6:	4b1b      	ldr	r3, [pc, #108]	; (1f54 <system_init+0x1c4>)
    1ee8:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1eea:	4b1b      	ldr	r3, [pc, #108]	; (1f58 <system_init+0x1c8>)
    1eec:	4798      	blx	r3
	TIMER_EVENT_init();
    1eee:	4b1b      	ldr	r3, [pc, #108]	; (1f5c <system_init+0x1cc>)
    1ef0:	4798      	blx	r3
	LIVE_PULSE_init();
    1ef2:	4b1b      	ldr	r3, [pc, #108]	; (1f60 <system_init+0x1d0>)
    1ef4:	4798      	blx	r3

	TIMER_HVAC_init();
    1ef6:	4b1b      	ldr	r3, [pc, #108]	; (1f64 <system_init+0x1d4>)
    1ef8:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1efa:	4b1b      	ldr	r3, [pc, #108]	; (1f68 <system_init+0x1d8>)
    1efc:	4798      	blx	r3

	CDCUSB_init();
    1efe:	4b1b      	ldr	r3, [pc, #108]	; (1f6c <system_init+0x1dc>)
    1f00:	4798      	blx	r3

	WATCHDOG_init();
    1f02:	4b1b      	ldr	r3, [pc, #108]	; (1f70 <system_init+0x1e0>)
    1f04:	4798      	blx	r3
	CAN_CCU_init();
    1f06:	4b1b      	ldr	r3, [pc, #108]	; (1f74 <system_init+0x1e4>)
    1f08:	4798      	blx	r3
}
    1f0a:	bf00      	nop
    1f0c:	bd80      	pop	{r7, pc}
    1f0e:	bf00      	nop
    1f10:	000012ed 	.word	0x000012ed
    1f14:	000012b5 	.word	0x000012b5
    1f18:	0000127d 	.word	0x0000127d
    1f1c:	0000125d 	.word	0x0000125d
    1f20:	00001229 	.word	0x00001229
    1f24:	0000134d 	.word	0x0000134d
    1f28:	00001379 	.word	0x00001379
    1f2c:	000014a1 	.word	0x000014a1
    1f30:	000015e9 	.word	0x000015e9
    1f34:	0000162d 	.word	0x0000162d
    1f38:	000016bd 	.word	0x000016bd
    1f3c:	00001789 	.word	0x00001789
    1f40:	00001821 	.word	0x00001821
    1f44:	000018ed 	.word	0x000018ed
    1f48:	00001985 	.word	0x00001985
    1f4c:	000019b1 	.word	0x000019b1
    1f50:	000019f9 	.word	0x000019f9
    1f54:	00001a41 	.word	0x00001a41
    1f58:	00001a89 	.word	0x00001a89
    1f5c:	00001ad1 	.word	0x00001ad1
    1f60:	00001b51 	.word	0x00001b51
    1f64:	00001bb1 	.word	0x00001bb1
    1f68:	00001c09 	.word	0x00001c09
    1f6c:	00001ccd 	.word	0x00001ccd
    1f70:	00001d05 	.word	0x00001d05
    1f74:	00001d4d 	.word	0x00001d4d

00001f78 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b084      	sub	sp, #16
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1f82:	2300      	movs	r3, #0
    1f84:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	bf14      	ite	ne
    1f8c:	2301      	movne	r3, #1
    1f8e:	2300      	moveq	r3, #0
    1f90:	b2db      	uxtb	r3, r3
    1f92:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1f96:	4911      	ldr	r1, [pc, #68]	; (1fdc <calendar_init+0x64>)
    1f98:	4618      	mov	r0, r3
    1f9a:	4b11      	ldr	r3, [pc, #68]	; (1fe0 <calendar_init+0x68>)
    1f9c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	681a      	ldr	r2, [r3, #0]
    1fa2:	683b      	ldr	r3, [r7, #0]
    1fa4:	429a      	cmp	r2, r3
    1fa6:	d101      	bne.n	1fac <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1fa8:	2300      	movs	r3, #0
    1faa:	e013      	b.n	1fd4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d002      	beq.n	1fba <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1fb4:	f06f 0311 	mvn.w	r3, #17
    1fb8:	e00c      	b.n	1fd4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	683a      	ldr	r2, [r7, #0]
    1fbe:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	4618      	mov	r0, r3
    1fc4:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <calendar_init+0x6c>)
    1fc6:	4798      	blx	r3
    1fc8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1fd0:	619a      	str	r2, [r3, #24]

	return ret;
    1fd2:	68fb      	ldr	r3, [r7, #12]
}
    1fd4:	4618      	mov	r0, r3
    1fd6:	3710      	adds	r7, #16
    1fd8:	46bd      	mov	sp, r7
    1fda:	bd80      	pop	{r7, pc}
    1fdc:	0000eba4 	.word	0x0000eba4
    1fe0:	00003725 	.word	0x00003725
    1fe4:	00005ad1 	.word	0x00005ad1

00001fe8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b084      	sub	sp, #16
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
    1ff0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d004      	beq.n	2002 <can_async_init+0x1a>
    1ff8:	683b      	ldr	r3, [r7, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d001      	beq.n	2002 <can_async_init+0x1a>
    1ffe:	2301      	movs	r3, #1
    2000:	e000      	b.n	2004 <can_async_init+0x1c>
    2002:	2300      	movs	r3, #0
    2004:	f003 0301 	and.w	r3, r3, #1
    2008:	b2db      	uxtb	r3, r3
    200a:	2241      	movs	r2, #65	; 0x41
    200c:	490e      	ldr	r1, [pc, #56]	; (2048 <can_async_init+0x60>)
    200e:	4618      	mov	r0, r3
    2010:	4b0e      	ldr	r3, [pc, #56]	; (204c <can_async_init+0x64>)
    2012:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	6839      	ldr	r1, [r7, #0]
    2018:	4618      	mov	r0, r3
    201a:	4b0d      	ldr	r3, [pc, #52]	; (2050 <can_async_init+0x68>)
    201c:	4798      	blx	r3
    201e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	2b00      	cmp	r3, #0
    2024:	d001      	beq.n	202a <can_async_init+0x42>
		return rc;
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	e009      	b.n	203e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    202a:	687b      	ldr	r3, [r7, #4]
    202c:	4a09      	ldr	r2, [pc, #36]	; (2054 <can_async_init+0x6c>)
    202e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2030:	687b      	ldr	r3, [r7, #4]
    2032:	4a09      	ldr	r2, [pc, #36]	; (2058 <can_async_init+0x70>)
    2034:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2036:	687b      	ldr	r3, [r7, #4]
    2038:	4a08      	ldr	r2, [pc, #32]	; (205c <can_async_init+0x74>)
    203a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    203c:	2300      	movs	r3, #0
}
    203e:	4618      	mov	r0, r3
    2040:	3710      	adds	r7, #16
    2042:	46bd      	mov	sp, r7
    2044:	bd80      	pop	{r7, pc}
    2046:	bf00      	nop
    2048:	0000ebc0 	.word	0x0000ebc0
    204c:	00003725 	.word	0x00003725
    2050:	00003c81 	.word	0x00003c81
    2054:	00002061 	.word	0x00002061
    2058:	00002085 	.word	0x00002085
    205c:	000020a9 	.word	0x000020a9

00002060 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2060:	b580      	push	{r7, lr}
    2062:	b084      	sub	sp, #16
    2064:	af00      	add	r7, sp, #0
    2066:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	69db      	ldr	r3, [r3, #28]
    2070:	2b00      	cmp	r3, #0
    2072:	d003      	beq.n	207c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2074:	68fb      	ldr	r3, [r7, #12]
    2076:	69db      	ldr	r3, [r3, #28]
    2078:	68f8      	ldr	r0, [r7, #12]
    207a:	4798      	blx	r3
	}
}
    207c:	bf00      	nop
    207e:	3710      	adds	r7, #16
    2080:	46bd      	mov	sp, r7
    2082:	bd80      	pop	{r7, pc}

00002084 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2084:	b580      	push	{r7, lr}
    2086:	b084      	sub	sp, #16
    2088:	af00      	add	r7, sp, #0
    208a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    208c:	687b      	ldr	r3, [r7, #4]
    208e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2090:	68fb      	ldr	r3, [r7, #12]
    2092:	6a1b      	ldr	r3, [r3, #32]
    2094:	2b00      	cmp	r3, #0
    2096:	d003      	beq.n	20a0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2098:	68fb      	ldr	r3, [r7, #12]
    209a:	6a1b      	ldr	r3, [r3, #32]
    209c:	68f8      	ldr	r0, [r7, #12]
    209e:	4798      	blx	r3
	}
}
    20a0:	bf00      	nop
    20a2:	3710      	adds	r7, #16
    20a4:	46bd      	mov	sp, r7
    20a6:	bd80      	pop	{r7, pc}

000020a8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    20a8:	b580      	push	{r7, lr}
    20aa:	b084      	sub	sp, #16
    20ac:	af00      	add	r7, sp, #0
    20ae:	6078      	str	r0, [r7, #4]
    20b0:	460b      	mov	r3, r1
    20b2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    20b8:	68fb      	ldr	r3, [r7, #12]
    20ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20bc:	2b00      	cmp	r3, #0
    20be:	d005      	beq.n	20cc <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20c4:	78fa      	ldrb	r2, [r7, #3]
    20c6:	4611      	mov	r1, r2
    20c8:	68f8      	ldr	r0, [r7, #12]
    20ca:	4798      	blx	r3
	}
}
    20cc:	bf00      	nop
    20ce:	3710      	adds	r7, #16
    20d0:	46bd      	mov	sp, r7
    20d2:	bd80      	pop	{r7, pc}

000020d4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b082      	sub	sp, #8
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d004      	beq.n	20ee <crc_sync_init+0x1a>
    20e4:	683b      	ldr	r3, [r7, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d001      	beq.n	20ee <crc_sync_init+0x1a>
    20ea:	2301      	movs	r3, #1
    20ec:	e000      	b.n	20f0 <crc_sync_init+0x1c>
    20ee:	2300      	movs	r3, #0
    20f0:	f003 0301 	and.w	r3, r3, #1
    20f4:	b2db      	uxtb	r3, r3
    20f6:	222b      	movs	r2, #43	; 0x2b
    20f8:	4906      	ldr	r1, [pc, #24]	; (2114 <crc_sync_init+0x40>)
    20fa:	4618      	mov	r0, r3
    20fc:	4b06      	ldr	r3, [pc, #24]	; (2118 <crc_sync_init+0x44>)
    20fe:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	6839      	ldr	r1, [r7, #0]
    2104:	4618      	mov	r0, r3
    2106:	4b05      	ldr	r3, [pc, #20]	; (211c <crc_sync_init+0x48>)
    2108:	4798      	blx	r3
    210a:	4603      	mov	r3, r0
}
    210c:	4618      	mov	r0, r3
    210e:	3708      	adds	r7, #8
    2110:	46bd      	mov	sp, r7
    2112:	bd80      	pop	{r7, pc}
    2114:	0000ebdc 	.word	0x0000ebdc
    2118:	00003725 	.word	0x00003725
    211c:	00004389 	.word	0x00004389

00002120 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2120:	b590      	push	{r4, r7, lr}
    2122:	b083      	sub	sp, #12
    2124:	af00      	add	r7, sp, #0
    2126:	4603      	mov	r3, r0
    2128:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    212a:	4b07      	ldr	r3, [pc, #28]	; (2148 <delay_us+0x28>)
    212c:	681c      	ldr	r4, [r3, #0]
    212e:	88fb      	ldrh	r3, [r7, #6]
    2130:	4618      	mov	r0, r3
    2132:	4b06      	ldr	r3, [pc, #24]	; (214c <delay_us+0x2c>)
    2134:	4798      	blx	r3
    2136:	4603      	mov	r3, r0
    2138:	4619      	mov	r1, r3
    213a:	4620      	mov	r0, r4
    213c:	4b04      	ldr	r3, [pc, #16]	; (2150 <delay_us+0x30>)
    213e:	4798      	blx	r3
}
    2140:	bf00      	nop
    2142:	370c      	adds	r7, #12
    2144:	46bd      	mov	sp, r7
    2146:	bd90      	pop	{r4, r7, pc}
    2148:	20000694 	.word	0x20000694
    214c:	000040d9 	.word	0x000040d9
    2150:	00004271 	.word	0x00004271

00002154 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2154:	b590      	push	{r4, r7, lr}
    2156:	b083      	sub	sp, #12
    2158:	af00      	add	r7, sp, #0
    215a:	4603      	mov	r3, r0
    215c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    215e:	4b07      	ldr	r3, [pc, #28]	; (217c <delay_ms+0x28>)
    2160:	681c      	ldr	r4, [r3, #0]
    2162:	88fb      	ldrh	r3, [r7, #6]
    2164:	4618      	mov	r0, r3
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <delay_ms+0x2c>)
    2168:	4798      	blx	r3
    216a:	4603      	mov	r3, r0
    216c:	4619      	mov	r1, r3
    216e:	4620      	mov	r0, r4
    2170:	4b04      	ldr	r3, [pc, #16]	; (2184 <delay_ms+0x30>)
    2172:	4798      	blx	r3
}
    2174:	bf00      	nop
    2176:	370c      	adds	r7, #12
    2178:	46bd      	mov	sp, r7
    217a:	bd90      	pop	{r4, r7, pc}
    217c:	20000694 	.word	0x20000694
    2180:	00004245 	.word	0x00004245
    2184:	00004271 	.word	0x00004271

00002188 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2188:	b580      	push	{r7, lr}
    218a:	af00      	add	r7, sp, #0
	return _event_system_init();
    218c:	4b02      	ldr	r3, [pc, #8]	; (2198 <event_system_init+0x10>)
    218e:	4798      	blx	r3
    2190:	4603      	mov	r3, r0
}
    2192:	4618      	mov	r0, r3
    2194:	bd80      	pop	{r7, pc}
    2196:	bf00      	nop
    2198:	00004b45 	.word	0x00004b45

0000219c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	b082      	sub	sp, #8
    21a0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    21a2:	2300      	movs	r3, #0
    21a4:	80fb      	strh	r3, [r7, #6]
    21a6:	e00e      	b.n	21c6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    21a8:	88fb      	ldrh	r3, [r7, #6]
    21aa:	4a0c      	ldr	r2, [pc, #48]	; (21dc <ext_irq_init+0x40>)
    21ac:	00db      	lsls	r3, r3, #3
    21ae:	4413      	add	r3, r2
    21b0:	f04f 32ff 	mov.w	r2, #4294967295
    21b4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    21b6:	88fb      	ldrh	r3, [r7, #6]
    21b8:	4a08      	ldr	r2, [pc, #32]	; (21dc <ext_irq_init+0x40>)
    21ba:	2100      	movs	r1, #0
    21bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    21c0:	88fb      	ldrh	r3, [r7, #6]
    21c2:	3301      	adds	r3, #1
    21c4:	80fb      	strh	r3, [r7, #6]
    21c6:	88fb      	ldrh	r3, [r7, #6]
    21c8:	2b08      	cmp	r3, #8
    21ca:	d9ed      	bls.n	21a8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    21cc:	4804      	ldr	r0, [pc, #16]	; (21e0 <ext_irq_init+0x44>)
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <ext_irq_init+0x48>)
    21d0:	4798      	blx	r3
    21d2:	4603      	mov	r3, r0
}
    21d4:	4618      	mov	r0, r3
    21d6:	3708      	adds	r7, #8
    21d8:	46bd      	mov	sp, r7
    21da:	bd80      	pop	{r7, pc}
    21dc:	20000698 	.word	0x20000698
    21e0:	00002341 	.word	0x00002341
    21e4:	000046c9 	.word	0x000046c9

000021e8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b086      	sub	sp, #24
    21ec:	af00      	add	r7, sp, #0
    21ee:	6078      	str	r0, [r7, #4]
    21f0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    21f2:	2300      	movs	r3, #0
    21f4:	75fb      	strb	r3, [r7, #23]
    21f6:	2300      	movs	r3, #0
    21f8:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    21fa:	2300      	movs	r3, #0
    21fc:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    21fe:	e012      	b.n	2226 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2200:	7dfb      	ldrb	r3, [r7, #23]
    2202:	4a4d      	ldr	r2, [pc, #308]	; (2338 <ext_irq_register+0x150>)
    2204:	00db      	lsls	r3, r3, #3
    2206:	4413      	add	r3, r2
    2208:	685a      	ldr	r2, [r3, #4]
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	429a      	cmp	r2, r3
    220e:	d107      	bne.n	2220 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2210:	7dfb      	ldrb	r3, [r7, #23]
    2212:	4949      	ldr	r1, [pc, #292]	; (2338 <ext_irq_register+0x150>)
    2214:	683a      	ldr	r2, [r7, #0]
    2216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    221a:	2301      	movs	r3, #1
    221c:	757b      	strb	r3, [r7, #21]
			break;
    221e:	e005      	b.n	222c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2220:	7dfb      	ldrb	r3, [r7, #23]
    2222:	3301      	adds	r3, #1
    2224:	75fb      	strb	r3, [r7, #23]
    2226:	7dfb      	ldrb	r3, [r7, #23]
    2228:	2b08      	cmp	r3, #8
    222a:	d9e9      	bls.n	2200 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    222c:	683b      	ldr	r3, [r7, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d10e      	bne.n	2250 <ext_irq_register+0x68>
		if (!found) {
    2232:	7d7b      	ldrb	r3, [r7, #21]
    2234:	f083 0301 	eor.w	r3, r3, #1
    2238:	b2db      	uxtb	r3, r3
    223a:	2b00      	cmp	r3, #0
    223c:	d002      	beq.n	2244 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    223e:	f06f 030c 	mvn.w	r3, #12
    2242:	e074      	b.n	232e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2244:	2100      	movs	r1, #0
    2246:	6878      	ldr	r0, [r7, #4]
    2248:	4b3c      	ldr	r3, [pc, #240]	; (233c <ext_irq_register+0x154>)
    224a:	4798      	blx	r3
    224c:	4603      	mov	r3, r0
    224e:	e06e      	b.n	232e <ext_irq_register+0x146>
	}

	if (!found) {
    2250:	7d7b      	ldrb	r3, [r7, #21]
    2252:	f083 0301 	eor.w	r3, r3, #1
    2256:	b2db      	uxtb	r3, r3
    2258:	2b00      	cmp	r3, #0
    225a:	d05a      	beq.n	2312 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    225c:	2300      	movs	r3, #0
    225e:	75fb      	strb	r3, [r7, #23]
    2260:	e016      	b.n	2290 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2262:	7dfb      	ldrb	r3, [r7, #23]
    2264:	4a34      	ldr	r2, [pc, #208]	; (2338 <ext_irq_register+0x150>)
    2266:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    226a:	2b00      	cmp	r3, #0
    226c:	d10d      	bne.n	228a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    226e:	7dfb      	ldrb	r3, [r7, #23]
    2270:	4931      	ldr	r1, [pc, #196]	; (2338 <ext_irq_register+0x150>)
    2272:	683a      	ldr	r2, [r7, #0]
    2274:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2278:	7dfb      	ldrb	r3, [r7, #23]
    227a:	4a2f      	ldr	r2, [pc, #188]	; (2338 <ext_irq_register+0x150>)
    227c:	00db      	lsls	r3, r3, #3
    227e:	4413      	add	r3, r2
    2280:	687a      	ldr	r2, [r7, #4]
    2282:	605a      	str	r2, [r3, #4]
				found           = true;
    2284:	2301      	movs	r3, #1
    2286:	757b      	strb	r3, [r7, #21]
				break;
    2288:	e005      	b.n	2296 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    228a:	7dfb      	ldrb	r3, [r7, #23]
    228c:	3301      	adds	r3, #1
    228e:	75fb      	strb	r3, [r7, #23]
    2290:	7dfb      	ldrb	r3, [r7, #23]
    2292:	2b08      	cmp	r3, #8
    2294:	d9e5      	bls.n	2262 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2296:	e036      	b.n	2306 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2298:	7dfb      	ldrb	r3, [r7, #23]
    229a:	4a27      	ldr	r2, [pc, #156]	; (2338 <ext_irq_register+0x150>)
    229c:	00db      	lsls	r3, r3, #3
    229e:	4413      	add	r3, r2
    22a0:	685a      	ldr	r2, [r3, #4]
    22a2:	7dbb      	ldrb	r3, [r7, #22]
    22a4:	4924      	ldr	r1, [pc, #144]	; (2338 <ext_irq_register+0x150>)
    22a6:	00db      	lsls	r3, r3, #3
    22a8:	440b      	add	r3, r1
    22aa:	685b      	ldr	r3, [r3, #4]
    22ac:	429a      	cmp	r2, r3
    22ae:	d227      	bcs.n	2300 <ext_irq_register+0x118>
    22b0:	7dbb      	ldrb	r3, [r7, #22]
    22b2:	4a21      	ldr	r2, [pc, #132]	; (2338 <ext_irq_register+0x150>)
    22b4:	00db      	lsls	r3, r3, #3
    22b6:	4413      	add	r3, r2
    22b8:	685b      	ldr	r3, [r3, #4]
    22ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    22be:	d01f      	beq.n	2300 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    22c0:	7dbb      	ldrb	r3, [r7, #22]
    22c2:	491d      	ldr	r1, [pc, #116]	; (2338 <ext_irq_register+0x150>)
    22c4:	f107 020c 	add.w	r2, r7, #12
    22c8:	00db      	lsls	r3, r3, #3
    22ca:	440b      	add	r3, r1
    22cc:	e893 0003 	ldmia.w	r3, {r0, r1}
    22d0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    22d4:	7dbb      	ldrb	r3, [r7, #22]
    22d6:	7dfa      	ldrb	r2, [r7, #23]
    22d8:	4817      	ldr	r0, [pc, #92]	; (2338 <ext_irq_register+0x150>)
    22da:	4917      	ldr	r1, [pc, #92]	; (2338 <ext_irq_register+0x150>)
    22dc:	00db      	lsls	r3, r3, #3
    22de:	4403      	add	r3, r0
    22e0:	00d2      	lsls	r2, r2, #3
    22e2:	440a      	add	r2, r1
    22e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    22e8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    22ec:	7dfb      	ldrb	r3, [r7, #23]
    22ee:	4a12      	ldr	r2, [pc, #72]	; (2338 <ext_irq_register+0x150>)
    22f0:	00db      	lsls	r3, r3, #3
    22f2:	4413      	add	r3, r2
    22f4:	f107 020c 	add.w	r2, r7, #12
    22f8:	e892 0003 	ldmia.w	r2, {r0, r1}
    22fc:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2300:	7dbb      	ldrb	r3, [r7, #22]
    2302:	3301      	adds	r3, #1
    2304:	75bb      	strb	r3, [r7, #22]
    2306:	7dbb      	ldrb	r3, [r7, #22]
    2308:	2b08      	cmp	r3, #8
    230a:	d802      	bhi.n	2312 <ext_irq_register+0x12a>
    230c:	7dfb      	ldrb	r3, [r7, #23]
    230e:	2b08      	cmp	r3, #8
    2310:	d9c2      	bls.n	2298 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2312:	7d7b      	ldrb	r3, [r7, #21]
    2314:	f083 0301 	eor.w	r3, r3, #1
    2318:	b2db      	uxtb	r3, r3
    231a:	2b00      	cmp	r3, #0
    231c:	d002      	beq.n	2324 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    231e:	f06f 030c 	mvn.w	r3, #12
    2322:	e004      	b.n	232e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2324:	2101      	movs	r1, #1
    2326:	6878      	ldr	r0, [r7, #4]
    2328:	4b04      	ldr	r3, [pc, #16]	; (233c <ext_irq_register+0x154>)
    232a:	4798      	blx	r3
    232c:	4603      	mov	r3, r0
}
    232e:	4618      	mov	r0, r3
    2330:	3718      	adds	r7, #24
    2332:	46bd      	mov	sp, r7
    2334:	bd80      	pop	{r7, pc}
    2336:	bf00      	nop
    2338:	20000698 	.word	0x20000698
    233c:	0000485d 	.word	0x0000485d

00002340 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2340:	b580      	push	{r7, lr}
    2342:	b084      	sub	sp, #16
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2348:	2300      	movs	r3, #0
    234a:	73fb      	strb	r3, [r7, #15]
    234c:	2309      	movs	r3, #9
    234e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2350:	e02a      	b.n	23a8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2352:	7bba      	ldrb	r2, [r7, #14]
    2354:	7bfb      	ldrb	r3, [r7, #15]
    2356:	4413      	add	r3, r2
    2358:	105b      	asrs	r3, r3, #1
    235a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    235c:	7b7b      	ldrb	r3, [r7, #13]
    235e:	2b08      	cmp	r3, #8
    2360:	d827      	bhi.n	23b2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2362:	7b7b      	ldrb	r3, [r7, #13]
    2364:	4a16      	ldr	r2, [pc, #88]	; (23c0 <process_ext_irq+0x80>)
    2366:	00db      	lsls	r3, r3, #3
    2368:	4413      	add	r3, r2
    236a:	685a      	ldr	r2, [r3, #4]
    236c:	687b      	ldr	r3, [r7, #4]
    236e:	429a      	cmp	r2, r3
    2370:	d10b      	bne.n	238a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2372:	7b7b      	ldrb	r3, [r7, #13]
    2374:	4a12      	ldr	r2, [pc, #72]	; (23c0 <process_ext_irq+0x80>)
    2376:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    237a:	2b00      	cmp	r3, #0
    237c:	d01b      	beq.n	23b6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    237e:	7b7b      	ldrb	r3, [r7, #13]
    2380:	4a0f      	ldr	r2, [pc, #60]	; (23c0 <process_ext_irq+0x80>)
    2382:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2386:	4798      	blx	r3
			}
			return;
    2388:	e015      	b.n	23b6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    238a:	7b7b      	ldrb	r3, [r7, #13]
    238c:	4a0c      	ldr	r2, [pc, #48]	; (23c0 <process_ext_irq+0x80>)
    238e:	00db      	lsls	r3, r3, #3
    2390:	4413      	add	r3, r2
    2392:	685a      	ldr	r2, [r3, #4]
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	429a      	cmp	r2, r3
    2398:	d203      	bcs.n	23a2 <process_ext_irq+0x62>
			lower = middle + 1;
    239a:	7b7b      	ldrb	r3, [r7, #13]
    239c:	3301      	adds	r3, #1
    239e:	73fb      	strb	r3, [r7, #15]
    23a0:	e002      	b.n	23a8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    23a2:	7b7b      	ldrb	r3, [r7, #13]
    23a4:	3b01      	subs	r3, #1
    23a6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    23a8:	7bba      	ldrb	r2, [r7, #14]
    23aa:	7bfb      	ldrb	r3, [r7, #15]
    23ac:	429a      	cmp	r2, r3
    23ae:	d2d0      	bcs.n	2352 <process_ext_irq+0x12>
    23b0:	e002      	b.n	23b8 <process_ext_irq+0x78>
			return;
    23b2:	bf00      	nop
    23b4:	e000      	b.n	23b8 <process_ext_irq+0x78>
			return;
    23b6:	bf00      	nop
		}
	}
}
    23b8:	3710      	adds	r7, #16
    23ba:	46bd      	mov	sp, r7
    23bc:	bd80      	pop	{r7, pc}
    23be:	bf00      	nop
    23c0:	20000698 	.word	0x20000698

000023c4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b08a      	sub	sp, #40	; 0x28
    23c8:	af00      	add	r7, sp, #0
    23ca:	60f8      	str	r0, [r7, #12]
    23cc:	60b9      	str	r1, [r7, #8]
    23ce:	4613      	mov	r3, r2
    23d0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    23d2:	68fb      	ldr	r3, [r7, #12]
    23d4:	3b14      	subs	r3, #20
    23d6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    23d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23da:	8b9b      	ldrh	r3, [r3, #28]
    23dc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    23de:	88fb      	ldrh	r3, [r7, #6]
    23e0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    23e2:	f248 0301 	movw	r3, #32769	; 0x8001
    23e6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    23e8:	68bb      	ldr	r3, [r7, #8]
    23ea:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    23ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23ee:	f107 0214 	add.w	r2, r7, #20
    23f2:	4611      	mov	r1, r2
    23f4:	4618      	mov	r0, r3
    23f6:	4b06      	ldr	r3, [pc, #24]	; (2410 <i2c_m_sync_read+0x4c>)
    23f8:	4798      	blx	r3
    23fa:	6238      	str	r0, [r7, #32]

	if (ret) {
    23fc:	6a3b      	ldr	r3, [r7, #32]
    23fe:	2b00      	cmp	r3, #0
    2400:	d001      	beq.n	2406 <i2c_m_sync_read+0x42>
		return ret;
    2402:	6a3b      	ldr	r3, [r7, #32]
    2404:	e000      	b.n	2408 <i2c_m_sync_read+0x44>
	}

	return n;
    2406:	88fb      	ldrh	r3, [r7, #6]
}
    2408:	4618      	mov	r0, r3
    240a:	3728      	adds	r7, #40	; 0x28
    240c:	46bd      	mov	sp, r7
    240e:	bd80      	pop	{r7, pc}
    2410:	00006731 	.word	0x00006731

00002414 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2414:	b580      	push	{r7, lr}
    2416:	b08a      	sub	sp, #40	; 0x28
    2418:	af00      	add	r7, sp, #0
    241a:	60f8      	str	r0, [r7, #12]
    241c:	60b9      	str	r1, [r7, #8]
    241e:	4613      	mov	r3, r2
    2420:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2422:	68fb      	ldr	r3, [r7, #12]
    2424:	3b14      	subs	r3, #20
    2426:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    242a:	8b9b      	ldrh	r3, [r3, #28]
    242c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    242e:	88fb      	ldrh	r3, [r7, #6]
    2430:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2436:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2438:	68bb      	ldr	r3, [r7, #8]
    243a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    243e:	f107 0214 	add.w	r2, r7, #20
    2442:	4611      	mov	r1, r2
    2444:	4618      	mov	r0, r3
    2446:	4b06      	ldr	r3, [pc, #24]	; (2460 <i2c_m_sync_write+0x4c>)
    2448:	4798      	blx	r3
    244a:	6238      	str	r0, [r7, #32]

	if (ret) {
    244c:	6a3b      	ldr	r3, [r7, #32]
    244e:	2b00      	cmp	r3, #0
    2450:	d001      	beq.n	2456 <i2c_m_sync_write+0x42>
		return ret;
    2452:	6a3b      	ldr	r3, [r7, #32]
    2454:	e000      	b.n	2458 <i2c_m_sync_write+0x44>
	}

	return n;
    2456:	88fb      	ldrh	r3, [r7, #6]
}
    2458:	4618      	mov	r0, r3
    245a:	3728      	adds	r7, #40	; 0x28
    245c:	46bd      	mov	sp, r7
    245e:	bd80      	pop	{r7, pc}
    2460:	00006731 	.word	0x00006731

00002464 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2464:	b580      	push	{r7, lr}
    2466:	b084      	sub	sp, #16
    2468:	af00      	add	r7, sp, #0
    246a:	6078      	str	r0, [r7, #4]
    246c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	2b00      	cmp	r3, #0
    2472:	bf14      	ite	ne
    2474:	2301      	movne	r3, #1
    2476:	2300      	moveq	r3, #0
    2478:	b2db      	uxtb	r3, r3
    247a:	225e      	movs	r2, #94	; 0x5e
    247c:	490c      	ldr	r1, [pc, #48]	; (24b0 <i2c_m_sync_init+0x4c>)
    247e:	4618      	mov	r0, r3
    2480:	4b0c      	ldr	r3, [pc, #48]	; (24b4 <i2c_m_sync_init+0x50>)
    2482:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2484:	687b      	ldr	r3, [r7, #4]
    2486:	6839      	ldr	r1, [r7, #0]
    2488:	4618      	mov	r0, r3
    248a:	4b0b      	ldr	r3, [pc, #44]	; (24b8 <i2c_m_sync_init+0x54>)
    248c:	4798      	blx	r3
    248e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	2b00      	cmp	r3, #0
    2494:	d001      	beq.n	249a <i2c_m_sync_init+0x36>
		return init_status;
    2496:	68fb      	ldr	r3, [r7, #12]
    2498:	e006      	b.n	24a8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    249a:	687b      	ldr	r3, [r7, #4]
    249c:	4a07      	ldr	r2, [pc, #28]	; (24bc <i2c_m_sync_init+0x58>)
    249e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	4a07      	ldr	r2, [pc, #28]	; (24c0 <i2c_m_sync_init+0x5c>)
    24a4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    24a6:	2300      	movs	r3, #0
}
    24a8:	4618      	mov	r0, r3
    24aa:	3710      	adds	r7, #16
    24ac:	46bd      	mov	sp, r7
    24ae:	bd80      	pop	{r7, pc}
    24b0:	0000ebf8 	.word	0x0000ebf8
    24b4:	00003725 	.word	0x00003725
    24b8:	0000652d 	.word	0x0000652d
    24bc:	000023c5 	.word	0x000023c5
    24c0:	00002415 	.word	0x00002415

000024c4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b082      	sub	sp, #8
    24c8:	af00      	add	r7, sp, #0
    24ca:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    24cc:	687b      	ldr	r3, [r7, #4]
    24ce:	4618      	mov	r0, r3
    24d0:	4b03      	ldr	r3, [pc, #12]	; (24e0 <i2c_m_sync_enable+0x1c>)
    24d2:	4798      	blx	r3
    24d4:	4603      	mov	r3, r0
}
    24d6:	4618      	mov	r0, r3
    24d8:	3708      	adds	r7, #8
    24da:	46bd      	mov	sp, r7
    24dc:	bd80      	pop	{r7, pc}
    24de:	bf00      	nop
    24e0:	00006575 	.word	0x00006575

000024e4 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    24e4:	b480      	push	{r7}
    24e6:	b085      	sub	sp, #20
    24e8:	af00      	add	r7, sp, #0
    24ea:	60f8      	str	r0, [r7, #12]
    24ec:	460b      	mov	r3, r1
    24ee:	607a      	str	r2, [r7, #4]
    24f0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    24f2:	897b      	ldrh	r3, [r7, #10]
    24f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    24f8:	b21a      	sxth	r2, r3
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	b21b      	sxth	r3, r3
    24fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2502:	b21b      	sxth	r3, r3
    2504:	4313      	orrs	r3, r2
    2506:	b21b      	sxth	r3, r3
    2508:	b29a      	uxth	r2, r3
    250a:	68fb      	ldr	r3, [r7, #12]
    250c:	839a      	strh	r2, [r3, #28]
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	8b9b      	ldrh	r3, [r3, #28]
}
    2512:	4618      	mov	r0, r3
    2514:	3714      	adds	r7, #20
    2516:	46bd      	mov	sp, r7
    2518:	f85d 7b04 	ldr.w	r7, [sp], #4
    251c:	4770      	bx	lr

0000251e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    251e:	b480      	push	{r7}
    2520:	b083      	sub	sp, #12
    2522:	af00      	add	r7, sp, #0
    2524:	6078      	str	r0, [r7, #4]
    2526:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	f103 0214 	add.w	r2, r3, #20
    252e:	683b      	ldr	r3, [r7, #0]
    2530:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2532:	2300      	movs	r3, #0
}
    2534:	4618      	mov	r0, r3
    2536:	370c      	adds	r7, #12
    2538:	46bd      	mov	sp, r7
    253a:	f85d 7b04 	ldr.w	r7, [sp], #4
    253e:	4770      	bx	lr

00002540 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2540:	b580      	push	{r7, lr}
    2542:	b084      	sub	sp, #16
    2544:	af00      	add	r7, sp, #0
    2546:	60f8      	str	r0, [r7, #12]
    2548:	60b9      	str	r1, [r7, #8]
    254a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	2b00      	cmp	r3, #0
    2550:	d004      	beq.n	255c <pwm_init+0x1c>
    2552:	68bb      	ldr	r3, [r7, #8]
    2554:	2b00      	cmp	r3, #0
    2556:	d001      	beq.n	255c <pwm_init+0x1c>
    2558:	2301      	movs	r3, #1
    255a:	e000      	b.n	255e <pwm_init+0x1e>
    255c:	2300      	movs	r3, #0
    255e:	f003 0301 	and.w	r3, r3, #1
    2562:	b2db      	uxtb	r3, r3
    2564:	2233      	movs	r2, #51	; 0x33
    2566:	490a      	ldr	r1, [pc, #40]	; (2590 <pwm_init+0x50>)
    2568:	4618      	mov	r0, r3
    256a:	4b0a      	ldr	r3, [pc, #40]	; (2594 <pwm_init+0x54>)
    256c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	68b9      	ldr	r1, [r7, #8]
    2572:	4618      	mov	r0, r3
    2574:	4b08      	ldr	r3, [pc, #32]	; (2598 <pwm_init+0x58>)
    2576:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2578:	68fb      	ldr	r3, [r7, #12]
    257a:	4a08      	ldr	r2, [pc, #32]	; (259c <pwm_init+0x5c>)
    257c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	4a07      	ldr	r2, [pc, #28]	; (25a0 <pwm_init+0x60>)
    2582:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2584:	2300      	movs	r3, #0
}
    2586:	4618      	mov	r0, r3
    2588:	3710      	adds	r7, #16
    258a:	46bd      	mov	sp, r7
    258c:	bd80      	pop	{r7, pc}
    258e:	bf00      	nop
    2590:	0000ec14 	.word	0x0000ec14
    2594:	00003725 	.word	0x00003725
    2598:	00007cc1 	.word	0x00007cc1
    259c:	000025f9 	.word	0x000025f9
    25a0:	0000261d 	.word	0x0000261d

000025a4 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    25a4:	b580      	push	{r7, lr}
    25a6:	b082      	sub	sp, #8
    25a8:	af00      	add	r7, sp, #0
    25aa:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    25ac:	687b      	ldr	r3, [r7, #4]
    25ae:	2b00      	cmp	r3, #0
    25b0:	bf14      	ite	ne
    25b2:	2301      	movne	r3, #1
    25b4:	2300      	moveq	r3, #0
    25b6:	b2db      	uxtb	r3, r3
    25b8:	224a      	movs	r2, #74	; 0x4a
    25ba:	490b      	ldr	r1, [pc, #44]	; (25e8 <pwm_enable+0x44>)
    25bc:	4618      	mov	r0, r3
    25be:	4b0b      	ldr	r3, [pc, #44]	; (25ec <pwm_enable+0x48>)
    25c0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	4618      	mov	r0, r3
    25c6:	4b0a      	ldr	r3, [pc, #40]	; (25f0 <pwm_enable+0x4c>)
    25c8:	4798      	blx	r3
    25ca:	4603      	mov	r3, r0
    25cc:	2b00      	cmp	r3, #0
    25ce:	d002      	beq.n	25d6 <pwm_enable+0x32>
		return ERR_DENIED;
    25d0:	f06f 0310 	mvn.w	r3, #16
    25d4:	e004      	b.n	25e0 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	4618      	mov	r0, r3
    25da:	4b06      	ldr	r3, [pc, #24]	; (25f4 <pwm_enable+0x50>)
    25dc:	4798      	blx	r3

	return ERR_NONE;
    25de:	2300      	movs	r3, #0
}
    25e0:	4618      	mov	r0, r3
    25e2:	3708      	adds	r7, #8
    25e4:	46bd      	mov	sp, r7
    25e6:	bd80      	pop	{r7, pc}
    25e8:	0000ec14 	.word	0x0000ec14
    25ec:	00003725 	.word	0x00003725
    25f0:	000080b1 	.word	0x000080b1
    25f4:	00007f6d 	.word	0x00007f6d

000025f8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b084      	sub	sp, #16
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2604:	68fb      	ldr	r3, [r7, #12]
    2606:	695b      	ldr	r3, [r3, #20]
    2608:	2b00      	cmp	r3, #0
    260a:	d003      	beq.n	2614 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    260c:	68fb      	ldr	r3, [r7, #12]
    260e:	695b      	ldr	r3, [r3, #20]
    2610:	68f8      	ldr	r0, [r7, #12]
    2612:	4798      	blx	r3
	}
}
    2614:	bf00      	nop
    2616:	3710      	adds	r7, #16
    2618:	46bd      	mov	sp, r7
    261a:	bd80      	pop	{r7, pc}

0000261c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    261c:	b580      	push	{r7, lr}
    261e:	b084      	sub	sp, #16
    2620:	af00      	add	r7, sp, #0
    2622:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2628:	68fb      	ldr	r3, [r7, #12]
    262a:	699b      	ldr	r3, [r3, #24]
    262c:	2b00      	cmp	r3, #0
    262e:	d003      	beq.n	2638 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	699b      	ldr	r3, [r3, #24]
    2634:	68f8      	ldr	r0, [r7, #12]
    2636:	4798      	blx	r3
	}
}
    2638:	bf00      	nop
    263a:	3710      	adds	r7, #16
    263c:	46bd      	mov	sp, r7
    263e:	bd80      	pop	{r7, pc}

00002640 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2640:	b580      	push	{r7, lr}
    2642:	b082      	sub	sp, #8
    2644:	af00      	add	r7, sp, #0
    2646:	6078      	str	r0, [r7, #4]
    2648:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	2b00      	cmp	r3, #0
    264e:	d004      	beq.n	265a <qspi_sync_init+0x1a>
    2650:	683b      	ldr	r3, [r7, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d001      	beq.n	265a <qspi_sync_init+0x1a>
    2656:	2301      	movs	r3, #1
    2658:	e000      	b.n	265c <qspi_sync_init+0x1c>
    265a:	2300      	movs	r3, #0
    265c:	f003 0301 	and.w	r3, r3, #1
    2660:	b2db      	uxtb	r3, r3
    2662:	2231      	movs	r2, #49	; 0x31
    2664:	4906      	ldr	r1, [pc, #24]	; (2680 <qspi_sync_init+0x40>)
    2666:	4618      	mov	r0, r3
    2668:	4b06      	ldr	r3, [pc, #24]	; (2684 <qspi_sync_init+0x44>)
    266a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	6839      	ldr	r1, [r7, #0]
    2670:	4618      	mov	r0, r3
    2672:	4b05      	ldr	r3, [pc, #20]	; (2688 <qspi_sync_init+0x48>)
    2674:	4798      	blx	r3
    2676:	4603      	mov	r3, r0
}
    2678:	4618      	mov	r0, r3
    267a:	3708      	adds	r7, #8
    267c:	46bd      	mov	sp, r7
    267e:	bd80      	pop	{r7, pc}
    2680:	0000ec2c 	.word	0x0000ec2c
    2684:	00003725 	.word	0x00003725
    2688:	0000570d 	.word	0x0000570d

0000268c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	2b00      	cmp	r3, #0
    2698:	bf14      	ite	ne
    269a:	2301      	movne	r3, #1
    269c:	2300      	moveq	r3, #0
    269e:	b2db      	uxtb	r3, r3
    26a0:	223f      	movs	r2, #63	; 0x3f
    26a2:	4906      	ldr	r1, [pc, #24]	; (26bc <qspi_sync_enable+0x30>)
    26a4:	4618      	mov	r0, r3
    26a6:	4b06      	ldr	r3, [pc, #24]	; (26c0 <qspi_sync_enable+0x34>)
    26a8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	4618      	mov	r0, r3
    26ae:	4b05      	ldr	r3, [pc, #20]	; (26c4 <qspi_sync_enable+0x38>)
    26b0:	4798      	blx	r3
    26b2:	4603      	mov	r3, r0
}
    26b4:	4618      	mov	r0, r3
    26b6:	3708      	adds	r7, #8
    26b8:	46bd      	mov	sp, r7
    26ba:	bd80      	pop	{r7, pc}
    26bc:	0000ec2c 	.word	0x0000ec2c
    26c0:	00003725 	.word	0x00003725
    26c4:	00005781 	.word	0x00005781

000026c8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b082      	sub	sp, #8
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	2b00      	cmp	r3, #0
    26d4:	bf14      	ite	ne
    26d6:	2301      	movne	r3, #1
    26d8:	2300      	moveq	r3, #0
    26da:	b2db      	uxtb	r3, r3
    26dc:	2246      	movs	r2, #70	; 0x46
    26de:	4906      	ldr	r1, [pc, #24]	; (26f8 <qspi_sync_disable+0x30>)
    26e0:	4618      	mov	r0, r3
    26e2:	4b06      	ldr	r3, [pc, #24]	; (26fc <qspi_sync_disable+0x34>)
    26e4:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	4618      	mov	r0, r3
    26ea:	4b05      	ldr	r3, [pc, #20]	; (2700 <qspi_sync_disable+0x38>)
    26ec:	4798      	blx	r3
    26ee:	4603      	mov	r3, r0
}
    26f0:	4618      	mov	r0, r3
    26f2:	3708      	adds	r7, #8
    26f4:	46bd      	mov	sp, r7
    26f6:	bd80      	pop	{r7, pc}
    26f8:	0000ec2c 	.word	0x0000ec2c
    26fc:	00003725 	.word	0x00003725
    2700:	000057a5 	.word	0x000057a5

00002704 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2704:	b580      	push	{r7, lr}
    2706:	b082      	sub	sp, #8
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
    270c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2b00      	cmp	r3, #0
    2712:	d004      	beq.n	271e <qspi_sync_serial_run_command+0x1a>
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	2b00      	cmp	r3, #0
    2718:	d001      	beq.n	271e <qspi_sync_serial_run_command+0x1a>
    271a:	2301      	movs	r3, #1
    271c:	e000      	b.n	2720 <qspi_sync_serial_run_command+0x1c>
    271e:	2300      	movs	r3, #0
    2720:	f003 0301 	and.w	r3, r3, #1
    2724:	b2db      	uxtb	r3, r3
    2726:	224d      	movs	r2, #77	; 0x4d
    2728:	4906      	ldr	r1, [pc, #24]	; (2744 <qspi_sync_serial_run_command+0x40>)
    272a:	4618      	mov	r0, r3
    272c:	4b06      	ldr	r3, [pc, #24]	; (2748 <qspi_sync_serial_run_command+0x44>)
    272e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	6839      	ldr	r1, [r7, #0]
    2734:	4618      	mov	r0, r3
    2736:	4b05      	ldr	r3, [pc, #20]	; (274c <qspi_sync_serial_run_command+0x48>)
    2738:	4798      	blx	r3
    273a:	4603      	mov	r3, r0
}
    273c:	4618      	mov	r0, r3
    273e:	3708      	adds	r7, #8
    2740:	46bd      	mov	sp, r7
    2742:	bd80      	pop	{r7, pc}
    2744:	0000ec2c 	.word	0x0000ec2c
    2748:	00003725 	.word	0x00003725
    274c:	000058f1 	.word	0x000058f1

00002750 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2750:	b580      	push	{r7, lr}
    2752:	b084      	sub	sp, #16
    2754:	af00      	add	r7, sp, #0
    2756:	6078      	str	r0, [r7, #4]
    2758:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    275a:	2300      	movs	r3, #0
    275c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	2b00      	cmp	r3, #0
    2762:	d004      	beq.n	276e <spi_m_sync_init+0x1e>
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	2b00      	cmp	r3, #0
    2768:	d001      	beq.n	276e <spi_m_sync_init+0x1e>
    276a:	2301      	movs	r3, #1
    276c:	e000      	b.n	2770 <spi_m_sync_init+0x20>
    276e:	2300      	movs	r3, #0
    2770:	f003 0301 	and.w	r3, r3, #1
    2774:	b2db      	uxtb	r3, r3
    2776:	2240      	movs	r2, #64	; 0x40
    2778:	4910      	ldr	r1, [pc, #64]	; (27bc <spi_m_sync_init+0x6c>)
    277a:	4618      	mov	r0, r3
    277c:	4b10      	ldr	r3, [pc, #64]	; (27c0 <spi_m_sync_init+0x70>)
    277e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	683a      	ldr	r2, [r7, #0]
    2784:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	3304      	adds	r3, #4
    278a:	6839      	ldr	r1, [r7, #0]
    278c:	4618      	mov	r0, r3
    278e:	4b0d      	ldr	r3, [pc, #52]	; (27c4 <spi_m_sync_init+0x74>)
    2790:	4798      	blx	r3
    2792:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2794:	68fb      	ldr	r3, [r7, #12]
    2796:	2b00      	cmp	r3, #0
    2798:	da01      	bge.n	279e <spi_m_sync_init+0x4e>
		return rc;
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	e00a      	b.n	27b4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    27a4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	4a07      	ldr	r2, [pc, #28]	; (27c8 <spi_m_sync_init+0x78>)
    27aa:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	4a07      	ldr	r2, [pc, #28]	; (27cc <spi_m_sync_init+0x7c>)
    27b0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    27b2:	2300      	movs	r3, #0
}
    27b4:	4618      	mov	r0, r3
    27b6:	3710      	adds	r7, #16
    27b8:	46bd      	mov	sp, r7
    27ba:	bd80      	pop	{r7, pc}
    27bc:	0000ec48 	.word	0x0000ec48
    27c0:	00003725 	.word	0x00003725
    27c4:	00006bc5 	.word	0x00006bc5
    27c8:	000027d1 	.word	0x000027d1
    27cc:	00002829 	.word	0x00002829

000027d0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b088      	sub	sp, #32
    27d4:	af00      	add	r7, sp, #0
    27d6:	60f8      	str	r0, [r7, #12]
    27d8:	60b9      	str	r1, [r7, #8]
    27da:	4613      	mov	r3, r2
    27dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	2b00      	cmp	r3, #0
    27e2:	bf14      	ite	ne
    27e4:	2301      	movne	r3, #1
    27e6:	2300      	moveq	r3, #0
    27e8:	b2db      	uxtb	r3, r3
    27ea:	2287      	movs	r2, #135	; 0x87
    27ec:	490b      	ldr	r1, [pc, #44]	; (281c <_spi_m_sync_io_read+0x4c>)
    27ee:	4618      	mov	r0, r3
    27f0:	4b0b      	ldr	r3, [pc, #44]	; (2820 <_spi_m_sync_io_read+0x50>)
    27f2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    27f4:	68fb      	ldr	r3, [r7, #12]
    27f6:	3b0c      	subs	r3, #12
    27f8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    27fa:	68bb      	ldr	r3, [r7, #8]
    27fc:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    27fe:	2300      	movs	r3, #0
    2800:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2802:	88fb      	ldrh	r3, [r7, #6]
    2804:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2806:	f107 0310 	add.w	r3, r7, #16
    280a:	4619      	mov	r1, r3
    280c:	69f8      	ldr	r0, [r7, #28]
    280e:	4b05      	ldr	r3, [pc, #20]	; (2824 <_spi_m_sync_io_read+0x54>)
    2810:	4798      	blx	r3
    2812:	4603      	mov	r3, r0
}
    2814:	4618      	mov	r0, r3
    2816:	3720      	adds	r7, #32
    2818:	46bd      	mov	sp, r7
    281a:	bd80      	pop	{r7, pc}
    281c:	0000ec48 	.word	0x0000ec48
    2820:	00003725 	.word	0x00003725
    2824:	00002881 	.word	0x00002881

00002828 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2828:	b580      	push	{r7, lr}
    282a:	b088      	sub	sp, #32
    282c:	af00      	add	r7, sp, #0
    282e:	60f8      	str	r0, [r7, #12]
    2830:	60b9      	str	r1, [r7, #8]
    2832:	4613      	mov	r3, r2
    2834:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2836:	68fb      	ldr	r3, [r7, #12]
    2838:	2b00      	cmp	r3, #0
    283a:	bf14      	ite	ne
    283c:	2301      	movne	r3, #1
    283e:	2300      	moveq	r3, #0
    2840:	b2db      	uxtb	r3, r3
    2842:	22a3      	movs	r2, #163	; 0xa3
    2844:	490b      	ldr	r1, [pc, #44]	; (2874 <_spi_m_sync_io_write+0x4c>)
    2846:	4618      	mov	r0, r3
    2848:	4b0b      	ldr	r3, [pc, #44]	; (2878 <_spi_m_sync_io_write+0x50>)
    284a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    284c:	68fb      	ldr	r3, [r7, #12]
    284e:	3b0c      	subs	r3, #12
    2850:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2852:	2300      	movs	r3, #0
    2854:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2856:	68bb      	ldr	r3, [r7, #8]
    2858:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    285a:	88fb      	ldrh	r3, [r7, #6]
    285c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    285e:	f107 0310 	add.w	r3, r7, #16
    2862:	4619      	mov	r1, r3
    2864:	69f8      	ldr	r0, [r7, #28]
    2866:	4b05      	ldr	r3, [pc, #20]	; (287c <_spi_m_sync_io_write+0x54>)
    2868:	4798      	blx	r3
    286a:	4603      	mov	r3, r0
}
    286c:	4618      	mov	r0, r3
    286e:	3720      	adds	r7, #32
    2870:	46bd      	mov	sp, r7
    2872:	bd80      	pop	{r7, pc}
    2874:	0000ec48 	.word	0x0000ec48
    2878:	00003725 	.word	0x00003725
    287c:	00002881 	.word	0x00002881

00002880 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2880:	b580      	push	{r7, lr}
    2882:	b086      	sub	sp, #24
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
    2888:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    288a:	687b      	ldr	r3, [r7, #4]
    288c:	2b00      	cmp	r3, #0
    288e:	d004      	beq.n	289a <spi_m_sync_transfer+0x1a>
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d001      	beq.n	289a <spi_m_sync_transfer+0x1a>
    2896:	2301      	movs	r3, #1
    2898:	e000      	b.n	289c <spi_m_sync_transfer+0x1c>
    289a:	2300      	movs	r3, #0
    289c:	f003 0301 	and.w	r3, r3, #1
    28a0:	b2db      	uxtb	r3, r3
    28a2:	22b3      	movs	r2, #179	; 0xb3
    28a4:	490c      	ldr	r1, [pc, #48]	; (28d8 <spi_m_sync_transfer+0x58>)
    28a6:	4618      	mov	r0, r3
    28a8:	4b0c      	ldr	r3, [pc, #48]	; (28dc <spi_m_sync_transfer+0x5c>)
    28aa:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    28ac:	683b      	ldr	r3, [r7, #0]
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    28b2:	683b      	ldr	r3, [r7, #0]
    28b4:	685b      	ldr	r3, [r3, #4]
    28b6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    28b8:	683b      	ldr	r3, [r7, #0]
    28ba:	689b      	ldr	r3, [r3, #8]
    28bc:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	3304      	adds	r3, #4
    28c2:	f107 020c 	add.w	r2, r7, #12
    28c6:	4611      	mov	r1, r2
    28c8:	4618      	mov	r0, r3
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <spi_m_sync_transfer+0x60>)
    28cc:	4798      	blx	r3
    28ce:	4603      	mov	r3, r0
}
    28d0:	4618      	mov	r0, r3
    28d2:	3718      	adds	r7, #24
    28d4:	46bd      	mov	sp, r7
    28d6:	bd80      	pop	{r7, pc}
    28d8:	0000ec48 	.word	0x0000ec48
    28dc:	00003725 	.word	0x00003725
    28e0:	00006e25 	.word	0x00006e25

000028e4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    28e4:	b480      	push	{r7}
    28e6:	b083      	sub	sp, #12
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	681b      	ldr	r3, [r3, #0]
}
    28f0:	4618      	mov	r0, r3
    28f2:	370c      	adds	r7, #12
    28f4:	46bd      	mov	sp, r7
    28f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28fa:	4770      	bx	lr

000028fc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    28fc:	b480      	push	{r7}
    28fe:	b083      	sub	sp, #12
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	2b00      	cmp	r3, #0
    2908:	d002      	beq.n	2910 <list_get_next_element+0x14>
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	e000      	b.n	2912 <list_get_next_element+0x16>
    2910:	2300      	movs	r3, #0
}
    2912:	4618      	mov	r0, r3
    2914:	370c      	adds	r7, #12
    2916:	46bd      	mov	sp, r7
    2918:	f85d 7b04 	ldr.w	r7, [sp], #4
    291c:	4770      	bx	lr
	...

00002920 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2920:	b580      	push	{r7, lr}
    2922:	b084      	sub	sp, #16
    2924:	af00      	add	r7, sp, #0
    2926:	60f8      	str	r0, [r7, #12]
    2928:	60b9      	str	r1, [r7, #8]
    292a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    292c:	68fb      	ldr	r3, [r7, #12]
    292e:	2b00      	cmp	r3, #0
    2930:	d007      	beq.n	2942 <timer_init+0x22>
    2932:	68bb      	ldr	r3, [r7, #8]
    2934:	2b00      	cmp	r3, #0
    2936:	d004      	beq.n	2942 <timer_init+0x22>
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	2b00      	cmp	r3, #0
    293c:	d001      	beq.n	2942 <timer_init+0x22>
    293e:	2301      	movs	r3, #1
    2940:	e000      	b.n	2944 <timer_init+0x24>
    2942:	2300      	movs	r3, #0
    2944:	f003 0301 	and.w	r3, r3, #1
    2948:	b2db      	uxtb	r3, r3
    294a:	223b      	movs	r2, #59	; 0x3b
    294c:	490c      	ldr	r1, [pc, #48]	; (2980 <timer_init+0x60>)
    294e:	4618      	mov	r0, r3
    2950:	4b0c      	ldr	r3, [pc, #48]	; (2984 <timer_init+0x64>)
    2952:	4798      	blx	r3
	descr->func = func;
    2954:	68fb      	ldr	r3, [r7, #12]
    2956:	687a      	ldr	r2, [r7, #4]
    2958:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	681b      	ldr	r3, [r3, #0]
    2960:	68fa      	ldr	r2, [r7, #12]
    2962:	3204      	adds	r2, #4
    2964:	68b9      	ldr	r1, [r7, #8]
    2966:	4610      	mov	r0, r2
    2968:	4798      	blx	r3
	descr->time                           = 0;
    296a:	68fb      	ldr	r3, [r7, #12]
    296c:	2200      	movs	r2, #0
    296e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	4a05      	ldr	r2, [pc, #20]	; (2988 <timer_init+0x68>)
    2974:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2976:	2300      	movs	r3, #0
}
    2978:	4618      	mov	r0, r3
    297a:	3710      	adds	r7, #16
    297c:	46bd      	mov	sp, r7
    297e:	bd80      	pop	{r7, pc}
    2980:	0000ec64 	.word	0x0000ec64
    2984:	00003725 	.word	0x00003725
    2988:	00002d11 	.word	0x00002d11

0000298c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    298c:	b580      	push	{r7, lr}
    298e:	b082      	sub	sp, #8
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	2b00      	cmp	r3, #0
    2998:	d005      	beq.n	29a6 <timer_start+0x1a>
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	2b00      	cmp	r3, #0
    29a0:	d001      	beq.n	29a6 <timer_start+0x1a>
    29a2:	2301      	movs	r3, #1
    29a4:	e000      	b.n	29a8 <timer_start+0x1c>
    29a6:	2300      	movs	r3, #0
    29a8:	f003 0301 	and.w	r3, r3, #1
    29ac:	b2db      	uxtb	r3, r3
    29ae:	2254      	movs	r2, #84	; 0x54
    29b0:	490e      	ldr	r1, [pc, #56]	; (29ec <timer_start+0x60>)
    29b2:	4618      	mov	r0, r3
    29b4:	4b0e      	ldr	r3, [pc, #56]	; (29f0 <timer_start+0x64>)
    29b6:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	699b      	ldr	r3, [r3, #24]
    29be:	687a      	ldr	r2, [r7, #4]
    29c0:	3204      	adds	r2, #4
    29c2:	4610      	mov	r0, r2
    29c4:	4798      	blx	r3
    29c6:	4603      	mov	r3, r0
    29c8:	2b00      	cmp	r3, #0
    29ca:	d002      	beq.n	29d2 <timer_start+0x46>
		return ERR_DENIED;
    29cc:	f06f 0310 	mvn.w	r3, #16
    29d0:	e007      	b.n	29e2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	689b      	ldr	r3, [r3, #8]
    29d8:	687a      	ldr	r2, [r7, #4]
    29da:	3204      	adds	r2, #4
    29dc:	4610      	mov	r0, r2
    29de:	4798      	blx	r3

	return ERR_NONE;
    29e0:	2300      	movs	r3, #0
}
    29e2:	4618      	mov	r0, r3
    29e4:	3708      	adds	r7, #8
    29e6:	46bd      	mov	sp, r7
    29e8:	bd80      	pop	{r7, pc}
    29ea:	bf00      	nop
    29ec:	0000ec64 	.word	0x0000ec64
    29f0:	00003725 	.word	0x00003725

000029f4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d005      	beq.n	2a0e <timer_stop+0x1a>
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d001      	beq.n	2a0e <timer_stop+0x1a>
    2a0a:	2301      	movs	r3, #1
    2a0c:	e000      	b.n	2a10 <timer_stop+0x1c>
    2a0e:	2300      	movs	r3, #0
    2a10:	f003 0301 	and.w	r3, r3, #1
    2a14:	b2db      	uxtb	r3, r3
    2a16:	2262      	movs	r2, #98	; 0x62
    2a18:	490f      	ldr	r1, [pc, #60]	; (2a58 <timer_stop+0x64>)
    2a1a:	4618      	mov	r0, r3
    2a1c:	4b0f      	ldr	r3, [pc, #60]	; (2a5c <timer_stop+0x68>)
    2a1e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	681b      	ldr	r3, [r3, #0]
    2a24:	699b      	ldr	r3, [r3, #24]
    2a26:	687a      	ldr	r2, [r7, #4]
    2a28:	3204      	adds	r2, #4
    2a2a:	4610      	mov	r0, r2
    2a2c:	4798      	blx	r3
    2a2e:	4603      	mov	r3, r0
    2a30:	f083 0301 	eor.w	r3, r3, #1
    2a34:	b2db      	uxtb	r3, r3
    2a36:	2b00      	cmp	r3, #0
    2a38:	d002      	beq.n	2a40 <timer_stop+0x4c>
		return ERR_DENIED;
    2a3a:	f06f 0310 	mvn.w	r3, #16
    2a3e:	e007      	b.n	2a50 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	68db      	ldr	r3, [r3, #12]
    2a46:	687a      	ldr	r2, [r7, #4]
    2a48:	3204      	adds	r2, #4
    2a4a:	4610      	mov	r0, r2
    2a4c:	4798      	blx	r3

	return ERR_NONE;
    2a4e:	2300      	movs	r3, #0
}
    2a50:	4618      	mov	r0, r3
    2a52:	3708      	adds	r7, #8
    2a54:	46bd      	mov	sp, r7
    2a56:	bd80      	pop	{r7, pc}
    2a58:	0000ec64 	.word	0x0000ec64
    2a5c:	00003725 	.word	0x00003725

00002a60 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b084      	sub	sp, #16
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
    2a68:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d008      	beq.n	2a82 <timer_add_task+0x22>
    2a70:	683b      	ldr	r3, [r7, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d005      	beq.n	2a82 <timer_add_task+0x22>
    2a76:	687b      	ldr	r3, [r7, #4]
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d001      	beq.n	2a82 <timer_add_task+0x22>
    2a7e:	2301      	movs	r3, #1
    2a80:	e000      	b.n	2a84 <timer_add_task+0x24>
    2a82:	2300      	movs	r3, #0
    2a84:	f003 0301 	and.w	r3, r3, #1
    2a88:	b2db      	uxtb	r3, r3
    2a8a:	227b      	movs	r2, #123	; 0x7b
    2a8c:	492f      	ldr	r1, [pc, #188]	; (2b4c <timer_add_task+0xec>)
    2a8e:	4618      	mov	r0, r3
    2a90:	4b2f      	ldr	r3, [pc, #188]	; (2b50 <timer_add_task+0xf0>)
    2a92:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	7f1b      	ldrb	r3, [r3, #28]
    2a98:	b2db      	uxtb	r3, r3
    2a9a:	f043 0301 	orr.w	r3, r3, #1
    2a9e:	b2da      	uxtb	r2, r3
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	3318      	adds	r3, #24
    2aa8:	6839      	ldr	r1, [r7, #0]
    2aaa:	4618      	mov	r0, r3
    2aac:	4b29      	ldr	r3, [pc, #164]	; (2b54 <timer_add_task+0xf4>)
    2aae:	4798      	blx	r3
    2ab0:	4603      	mov	r3, r0
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d00f      	beq.n	2ad6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	7f1b      	ldrb	r3, [r3, #28]
    2aba:	b2db      	uxtb	r3, r3
    2abc:	f023 0301 	bic.w	r3, r3, #1
    2ac0:	b2da      	uxtb	r2, r3
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2ac6:	2280      	movs	r2, #128	; 0x80
    2ac8:	4920      	ldr	r1, [pc, #128]	; (2b4c <timer_add_task+0xec>)
    2aca:	2000      	movs	r0, #0
    2acc:	4b20      	ldr	r3, [pc, #128]	; (2b50 <timer_add_task+0xf0>)
    2ace:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2ad0:	f06f 0311 	mvn.w	r3, #17
    2ad4:	e035      	b.n	2b42 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	695a      	ldr	r2, [r3, #20]
    2ada:	683b      	ldr	r3, [r7, #0]
    2adc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	f103 0018 	add.w	r0, r3, #24
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	695b      	ldr	r3, [r3, #20]
    2ae8:	461a      	mov	r2, r3
    2aea:	6839      	ldr	r1, [r7, #0]
    2aec:	4b1a      	ldr	r3, [pc, #104]	; (2b58 <timer_add_task+0xf8>)
    2aee:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	7f1b      	ldrb	r3, [r3, #28]
    2af4:	b2db      	uxtb	r3, r3
    2af6:	f023 0301 	bic.w	r3, r3, #1
    2afa:	b2da      	uxtb	r2, r3
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	7f1b      	ldrb	r3, [r3, #28]
    2b04:	b2db      	uxtb	r3, r3
    2b06:	f003 0302 	and.w	r3, r3, #2
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d018      	beq.n	2b40 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2b0e:	f107 030c 	add.w	r3, r7, #12
    2b12:	4618      	mov	r0, r3
    2b14:	4b11      	ldr	r3, [pc, #68]	; (2b5c <timer_add_task+0xfc>)
    2b16:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	7f1b      	ldrb	r3, [r3, #28]
    2b1c:	b2db      	uxtb	r3, r3
    2b1e:	f023 0302 	bic.w	r3, r3, #2
    2b22:	b2da      	uxtb	r2, r3
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	681b      	ldr	r3, [r3, #0]
    2b2c:	69db      	ldr	r3, [r3, #28]
    2b2e:	687a      	ldr	r2, [r7, #4]
    2b30:	3204      	adds	r2, #4
    2b32:	4610      	mov	r0, r2
    2b34:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2b36:	f107 030c 	add.w	r3, r7, #12
    2b3a:	4618      	mov	r0, r3
    2b3c:	4b08      	ldr	r3, [pc, #32]	; (2b60 <timer_add_task+0x100>)
    2b3e:	4798      	blx	r3
	}

	return ERR_NONE;
    2b40:	2300      	movs	r3, #0
}
    2b42:	4618      	mov	r0, r3
    2b44:	3710      	adds	r7, #16
    2b46:	46bd      	mov	sp, r7
    2b48:	bd80      	pop	{r7, pc}
    2b4a:	bf00      	nop
    2b4c:	0000ec64 	.word	0x0000ec64
    2b50:	00003725 	.word	0x00003725
    2b54:	0000374d 	.word	0x0000374d
    2b58:	00002c61 	.word	0x00002c61
    2b5c:	0000b211 	.word	0x0000b211
    2b60:	0000b237 	.word	0x0000b237

00002b64 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2b64:	b580      	push	{r7, lr}
    2b66:	b084      	sub	sp, #16
    2b68:	af00      	add	r7, sp, #0
    2b6a:	6078      	str	r0, [r7, #4]
    2b6c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d008      	beq.n	2b86 <timer_remove_task+0x22>
    2b74:	683b      	ldr	r3, [r7, #0]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d005      	beq.n	2b86 <timer_remove_task+0x22>
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d001      	beq.n	2b86 <timer_remove_task+0x22>
    2b82:	2301      	movs	r3, #1
    2b84:	e000      	b.n	2b88 <timer_remove_task+0x24>
    2b86:	2300      	movs	r3, #0
    2b88:	f003 0301 	and.w	r3, r3, #1
    2b8c:	b2db      	uxtb	r3, r3
    2b8e:	2296      	movs	r2, #150	; 0x96
    2b90:	492d      	ldr	r1, [pc, #180]	; (2c48 <timer_remove_task+0xe4>)
    2b92:	4618      	mov	r0, r3
    2b94:	4b2d      	ldr	r3, [pc, #180]	; (2c4c <timer_remove_task+0xe8>)
    2b96:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	7f1b      	ldrb	r3, [r3, #28]
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	f043 0301 	orr.w	r3, r3, #1
    2ba2:	b2da      	uxtb	r2, r3
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	3318      	adds	r3, #24
    2bac:	6839      	ldr	r1, [r7, #0]
    2bae:	4618      	mov	r0, r3
    2bb0:	4b27      	ldr	r3, [pc, #156]	; (2c50 <timer_remove_task+0xec>)
    2bb2:	4798      	blx	r3
    2bb4:	4603      	mov	r3, r0
    2bb6:	f083 0301 	eor.w	r3, r3, #1
    2bba:	b2db      	uxtb	r3, r3
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d00f      	beq.n	2be0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bc0:	687b      	ldr	r3, [r7, #4]
    2bc2:	7f1b      	ldrb	r3, [r3, #28]
    2bc4:	b2db      	uxtb	r3, r3
    2bc6:	f023 0301 	bic.w	r3, r3, #1
    2bca:	b2da      	uxtb	r2, r3
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2bd0:	229b      	movs	r2, #155	; 0x9b
    2bd2:	491d      	ldr	r1, [pc, #116]	; (2c48 <timer_remove_task+0xe4>)
    2bd4:	2000      	movs	r0, #0
    2bd6:	4b1d      	ldr	r3, [pc, #116]	; (2c4c <timer_remove_task+0xe8>)
    2bd8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2bda:	f06f 0309 	mvn.w	r3, #9
    2bde:	e02e      	b.n	2c3e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2be0:	687b      	ldr	r3, [r7, #4]
    2be2:	3318      	adds	r3, #24
    2be4:	6839      	ldr	r1, [r7, #0]
    2be6:	4618      	mov	r0, r3
    2be8:	4b1a      	ldr	r3, [pc, #104]	; (2c54 <timer_remove_task+0xf0>)
    2bea:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	7f1b      	ldrb	r3, [r3, #28]
    2bf0:	b2db      	uxtb	r3, r3
    2bf2:	f023 0301 	bic.w	r3, r3, #1
    2bf6:	b2da      	uxtb	r2, r3
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	7f1b      	ldrb	r3, [r3, #28]
    2c00:	b2db      	uxtb	r3, r3
    2c02:	f003 0302 	and.w	r3, r3, #2
    2c06:	2b00      	cmp	r3, #0
    2c08:	d018      	beq.n	2c3c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2c0a:	f107 030c 	add.w	r3, r7, #12
    2c0e:	4618      	mov	r0, r3
    2c10:	4b11      	ldr	r3, [pc, #68]	; (2c58 <timer_remove_task+0xf4>)
    2c12:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	7f1b      	ldrb	r3, [r3, #28]
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	f023 0302 	bic.w	r3, r3, #2
    2c1e:	b2da      	uxtb	r2, r3
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	681b      	ldr	r3, [r3, #0]
    2c28:	69db      	ldr	r3, [r3, #28]
    2c2a:	687a      	ldr	r2, [r7, #4]
    2c2c:	3204      	adds	r2, #4
    2c2e:	4610      	mov	r0, r2
    2c30:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2c32:	f107 030c 	add.w	r3, r7, #12
    2c36:	4618      	mov	r0, r3
    2c38:	4b08      	ldr	r3, [pc, #32]	; (2c5c <timer_remove_task+0xf8>)
    2c3a:	4798      	blx	r3
	}

	return ERR_NONE;
    2c3c:	2300      	movs	r3, #0
}
    2c3e:	4618      	mov	r0, r3
    2c40:	3710      	adds	r7, #16
    2c42:	46bd      	mov	sp, r7
    2c44:	bd80      	pop	{r7, pc}
    2c46:	bf00      	nop
    2c48:	0000ec64 	.word	0x0000ec64
    2c4c:	00003725 	.word	0x00003725
    2c50:	0000374d 	.word	0x0000374d
    2c54:	000038af 	.word	0x000038af
    2c58:	0000b211 	.word	0x0000b211
    2c5c:	0000b237 	.word	0x0000b237

00002c60 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2c60:	b580      	push	{r7, lr}
    2c62:	b088      	sub	sp, #32
    2c64:	af00      	add	r7, sp, #0
    2c66:	60f8      	str	r0, [r7, #12]
    2c68:	60b9      	str	r1, [r7, #8]
    2c6a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2c6c:	2300      	movs	r3, #0
    2c6e:	61bb      	str	r3, [r7, #24]
    2c70:	68f8      	ldr	r0, [r7, #12]
    2c72:	4b23      	ldr	r3, [pc, #140]	; (2d00 <timer_add_timer_task+0xa0>)
    2c74:	4798      	blx	r3
    2c76:	6138      	str	r0, [r7, #16]

	if (!head) {
    2c78:	693b      	ldr	r3, [r7, #16]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d104      	bne.n	2c88 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2c7e:	68b9      	ldr	r1, [r7, #8]
    2c80:	68f8      	ldr	r0, [r7, #12]
    2c82:	4b20      	ldr	r3, [pc, #128]	; (2d04 <timer_add_timer_task+0xa4>)
    2c84:	4798      	blx	r3
		return;
    2c86:	e037      	b.n	2cf8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2c88:	693b      	ldr	r3, [r7, #16]
    2c8a:	61fb      	str	r3, [r7, #28]
    2c8c:	e022      	b.n	2cd4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	685a      	ldr	r2, [r3, #4]
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	429a      	cmp	r2, r3
    2c96:	d808      	bhi.n	2caa <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2c98:	69fb      	ldr	r3, [r7, #28]
    2c9a:	689a      	ldr	r2, [r3, #8]
    2c9c:	69fb      	ldr	r3, [r7, #28]
    2c9e:	6859      	ldr	r1, [r3, #4]
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	1acb      	subs	r3, r1, r3
    2ca4:	4413      	add	r3, r2
    2ca6:	617b      	str	r3, [r7, #20]
    2ca8:	e009      	b.n	2cbe <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2caa:	69fb      	ldr	r3, [r7, #28]
    2cac:	689a      	ldr	r2, [r3, #8]
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	685b      	ldr	r3, [r3, #4]
    2cb2:	441a      	add	r2, r3
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	425b      	negs	r3, r3
    2cb8:	4413      	add	r3, r2
    2cba:	3301      	adds	r3, #1
    2cbc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2cbe:	68bb      	ldr	r3, [r7, #8]
    2cc0:	689a      	ldr	r2, [r3, #8]
    2cc2:	697b      	ldr	r3, [r7, #20]
    2cc4:	429a      	cmp	r2, r3
    2cc6:	d909      	bls.n	2cdc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2cc8:	69fb      	ldr	r3, [r7, #28]
    2cca:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ccc:	69f8      	ldr	r0, [r7, #28]
    2cce:	4b0e      	ldr	r3, [pc, #56]	; (2d08 <timer_add_timer_task+0xa8>)
    2cd0:	4798      	blx	r3
    2cd2:	61f8      	str	r0, [r7, #28]
    2cd4:	69fb      	ldr	r3, [r7, #28]
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d1d9      	bne.n	2c8e <timer_add_timer_task+0x2e>
    2cda:	e000      	b.n	2cde <timer_add_timer_task+0x7e>
			break;
    2cdc:	bf00      	nop
	}

	if (it == head) {
    2cde:	69fa      	ldr	r2, [r7, #28]
    2ce0:	693b      	ldr	r3, [r7, #16]
    2ce2:	429a      	cmp	r2, r3
    2ce4:	d104      	bne.n	2cf0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ce6:	68b9      	ldr	r1, [r7, #8]
    2ce8:	68f8      	ldr	r0, [r7, #12]
    2cea:	4b06      	ldr	r3, [pc, #24]	; (2d04 <timer_add_timer_task+0xa4>)
    2cec:	4798      	blx	r3
    2cee:	e003      	b.n	2cf8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2cf0:	68b9      	ldr	r1, [r7, #8]
    2cf2:	69b8      	ldr	r0, [r7, #24]
    2cf4:	4b05      	ldr	r3, [pc, #20]	; (2d0c <timer_add_timer_task+0xac>)
    2cf6:	4798      	blx	r3
	}
}
    2cf8:	3720      	adds	r7, #32
    2cfa:	46bd      	mov	sp, r7
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	bf00      	nop
    2d00:	000028e5 	.word	0x000028e5
    2d04:	00003785 	.word	0x00003785
    2d08:	000028fd 	.word	0x000028fd
    2d0c:	000037dd 	.word	0x000037dd

00002d10 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	b086      	sub	sp, #24
    2d14:	af00      	add	r7, sp, #0
    2d16:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2d18:	687b      	ldr	r3, [r7, #4]
    2d1a:	3b04      	subs	r3, #4
    2d1c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2d1e:	693b      	ldr	r3, [r7, #16]
    2d20:	3318      	adds	r3, #24
    2d22:	4618      	mov	r0, r3
    2d24:	4b27      	ldr	r3, [pc, #156]	; (2dc4 <timer_process_counted+0xb4>)
    2d26:	4798      	blx	r3
    2d28:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2d2a:	693b      	ldr	r3, [r7, #16]
    2d2c:	695b      	ldr	r3, [r3, #20]
    2d2e:	1c5a      	adds	r2, r3, #1
    2d30:	693b      	ldr	r3, [r7, #16]
    2d32:	615a      	str	r2, [r3, #20]
    2d34:	693b      	ldr	r3, [r7, #16]
    2d36:	695b      	ldr	r3, [r3, #20]
    2d38:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2d3a:	693b      	ldr	r3, [r7, #16]
    2d3c:	7f1b      	ldrb	r3, [r3, #28]
    2d3e:	b2db      	uxtb	r3, r3
    2d40:	f003 0301 	and.w	r3, r3, #1
    2d44:	2b00      	cmp	r3, #0
    2d46:	d106      	bne.n	2d56 <timer_process_counted+0x46>
    2d48:	693b      	ldr	r3, [r7, #16]
    2d4a:	7f1b      	ldrb	r3, [r3, #28]
    2d4c:	b2db      	uxtb	r3, r3
    2d4e:	f003 0302 	and.w	r3, r3, #2
    2d52:	2b00      	cmp	r3, #0
    2d54:	d027      	beq.n	2da6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d56:	693b      	ldr	r3, [r7, #16]
    2d58:	7f1b      	ldrb	r3, [r3, #28]
    2d5a:	b2db      	uxtb	r3, r3
    2d5c:	f043 0302 	orr.w	r3, r3, #2
    2d60:	b2da      	uxtb	r2, r3
    2d62:	693b      	ldr	r3, [r7, #16]
    2d64:	771a      	strb	r2, [r3, #28]
		return;
    2d66:	e029      	b.n	2dbc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2d68:	697b      	ldr	r3, [r7, #20]
    2d6a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2d6c:	693b      	ldr	r3, [r7, #16]
    2d6e:	3318      	adds	r3, #24
    2d70:	4618      	mov	r0, r3
    2d72:	4b15      	ldr	r3, [pc, #84]	; (2dc8 <timer_process_counted+0xb8>)
    2d74:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2d76:	68bb      	ldr	r3, [r7, #8]
    2d78:	7c1b      	ldrb	r3, [r3, #16]
    2d7a:	2b01      	cmp	r3, #1
    2d7c:	d109      	bne.n	2d92 <timer_process_counted+0x82>
			tmp->time_label = time;
    2d7e:	68bb      	ldr	r3, [r7, #8]
    2d80:	68fa      	ldr	r2, [r7, #12]
    2d82:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2d84:	693b      	ldr	r3, [r7, #16]
    2d86:	3318      	adds	r3, #24
    2d88:	68fa      	ldr	r2, [r7, #12]
    2d8a:	68b9      	ldr	r1, [r7, #8]
    2d8c:	4618      	mov	r0, r3
    2d8e:	4b0f      	ldr	r3, [pc, #60]	; (2dcc <timer_process_counted+0xbc>)
    2d90:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2d92:	693b      	ldr	r3, [r7, #16]
    2d94:	3318      	adds	r3, #24
    2d96:	4618      	mov	r0, r3
    2d98:	4b0a      	ldr	r3, [pc, #40]	; (2dc4 <timer_process_counted+0xb4>)
    2d9a:	4798      	blx	r3
    2d9c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2d9e:	68bb      	ldr	r3, [r7, #8]
    2da0:	68db      	ldr	r3, [r3, #12]
    2da2:	68b8      	ldr	r0, [r7, #8]
    2da4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2da6:	697b      	ldr	r3, [r7, #20]
    2da8:	2b00      	cmp	r3, #0
    2daa:	d007      	beq.n	2dbc <timer_process_counted+0xac>
    2dac:	697b      	ldr	r3, [r7, #20]
    2dae:	685b      	ldr	r3, [r3, #4]
    2db0:	68fa      	ldr	r2, [r7, #12]
    2db2:	1ad2      	subs	r2, r2, r3
    2db4:	697b      	ldr	r3, [r7, #20]
    2db6:	689b      	ldr	r3, [r3, #8]
    2db8:	429a      	cmp	r2, r3
    2dba:	d2d5      	bcs.n	2d68 <timer_process_counted+0x58>
	}
}
    2dbc:	3718      	adds	r7, #24
    2dbe:	46bd      	mov	sp, r7
    2dc0:	bd80      	pop	{r7, pc}
    2dc2:	bf00      	nop
    2dc4:	000028e5 	.word	0x000028e5
    2dc8:	0000387d 	.word	0x0000387d
    2dcc:	00002c61 	.word	0x00002c61

00002dd0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2dd0:	b480      	push	{r7}
    2dd2:	b085      	sub	sp, #20
    2dd4:	af00      	add	r7, sp, #0
    2dd6:	4603      	mov	r3, r0
    2dd8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2dda:	2300      	movs	r3, #0
    2ddc:	73fb      	strb	r3, [r7, #15]
    2dde:	e029      	b.n	2e34 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2de4:	4a19      	ldr	r2, [pc, #100]	; (2e4c <_usb_d_find_ep+0x7c>)
    2de6:	015b      	lsls	r3, r3, #5
    2de8:	4413      	add	r3, r2
    2dea:	3301      	adds	r3, #1
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	79fa      	ldrb	r2, [r7, #7]
    2df0:	429a      	cmp	r2, r3
    2df2:	d102      	bne.n	2dfa <_usb_d_find_ep+0x2a>
			return i;
    2df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2df8:	e022      	b.n	2e40 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2dfe:	4a13      	ldr	r2, [pc, #76]	; (2e4c <_usb_d_find_ep+0x7c>)
    2e00:	015b      	lsls	r3, r3, #5
    2e02:	4413      	add	r3, r2
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d10e      	bne.n	2e28 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2e0a:	79fb      	ldrb	r3, [r7, #7]
    2e0c:	f003 030f 	and.w	r3, r3, #15
    2e10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2e14:	490d      	ldr	r1, [pc, #52]	; (2e4c <_usb_d_find_ep+0x7c>)
    2e16:	0152      	lsls	r2, r2, #5
    2e18:	440a      	add	r2, r1
    2e1a:	3201      	adds	r2, #1
    2e1c:	7812      	ldrb	r2, [r2, #0]
    2e1e:	4293      	cmp	r3, r2
    2e20:	d102      	bne.n	2e28 <_usb_d_find_ep+0x58>
			return i;
    2e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e26:	e00b      	b.n	2e40 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e2c:	b2db      	uxtb	r3, r3
    2e2e:	3301      	adds	r3, #1
    2e30:	b2db      	uxtb	r3, r3
    2e32:	73fb      	strb	r3, [r7, #15]
    2e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2e38:	2b03      	cmp	r3, #3
    2e3a:	ddd1      	ble.n	2de0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
    2e40:	4618      	mov	r0, r3
    2e42:	3714      	adds	r7, #20
    2e44:	46bd      	mov	sp, r7
    2e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e4a:	4770      	bx	lr
    2e4c:	200006e0 	.word	0x200006e0

00002e50 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b088      	sub	sp, #32
    2e54:	af00      	add	r7, sp, #0
    2e56:	60ba      	str	r2, [r7, #8]
    2e58:	607b      	str	r3, [r7, #4]
    2e5a:	4603      	mov	r3, r0
    2e5c:	73fb      	strb	r3, [r7, #15]
    2e5e:	460b      	mov	r3, r1
    2e60:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2e62:	68bb      	ldr	r3, [r7, #8]
    2e64:	617b      	str	r3, [r7, #20]
    2e66:	687b      	ldr	r3, [r7, #4]
    2e68:	61bb      	str	r3, [r7, #24]
    2e6a:	7bbb      	ldrb	r3, [r7, #14]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d004      	beq.n	2e7a <_usb_d_trans+0x2a>
    2e70:	7bfb      	ldrb	r3, [r7, #15]
    2e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e76:	b2db      	uxtb	r3, r3
    2e78:	e003      	b.n	2e82 <_usb_d_trans+0x32>
    2e7a:	7bfb      	ldrb	r3, [r7, #15]
    2e7c:	f003 030f 	and.w	r3, r3, #15
    2e80:	b2db      	uxtb	r3, r3
    2e82:	773b      	strb	r3, [r7, #28]
    2e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2e88:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2e8a:	f107 0314 	add.w	r3, r7, #20
    2e8e:	4618      	mov	r0, r3
    2e90:	4b03      	ldr	r3, [pc, #12]	; (2ea0 <_usb_d_trans+0x50>)
    2e92:	4798      	blx	r3
    2e94:	4603      	mov	r3, r0
}
    2e96:	4618      	mov	r0, r3
    2e98:	3720      	adds	r7, #32
    2e9a:	46bd      	mov	sp, r7
    2e9c:	bd80      	pop	{r7, pc}
    2e9e:	bf00      	nop
    2ea0:	0000a845 	.word	0x0000a845

00002ea4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2ea4:	b480      	push	{r7}
    2ea6:	b085      	sub	sp, #20
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	60f8      	str	r0, [r7, #12]
    2eac:	60b9      	str	r1, [r7, #8]
    2eae:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2eb0:	2300      	movs	r3, #0
}
    2eb2:	4618      	mov	r0, r3
    2eb4:	3714      	adds	r7, #20
    2eb6:	46bd      	mov	sp, r7
    2eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ebc:	4770      	bx	lr
	...

00002ec0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b086      	sub	sp, #24
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	4603      	mov	r3, r0
    2ec8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2eca:	79fb      	ldrb	r3, [r7, #7]
    2ecc:	4618      	mov	r0, r3
    2ece:	4b2a      	ldr	r3, [pc, #168]	; (2f78 <usb_d_cb_trans_setup+0xb8>)
    2ed0:	4798      	blx	r3
    2ed2:	4603      	mov	r3, r0
    2ed4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2eda:	015b      	lsls	r3, r3, #5
    2edc:	4a27      	ldr	r2, [pc, #156]	; (2f7c <usb_d_cb_trans_setup+0xbc>)
    2ede:	4413      	add	r3, r2
    2ee0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2ee2:	693b      	ldr	r3, [r7, #16]
    2ee4:	330c      	adds	r3, #12
    2ee6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2ee8:	79fb      	ldrb	r3, [r7, #7]
    2eea:	68f9      	ldr	r1, [r7, #12]
    2eec:	4618      	mov	r0, r3
    2eee:	4b24      	ldr	r3, [pc, #144]	; (2f80 <usb_d_cb_trans_setup+0xc0>)
    2ef0:	4798      	blx	r3
    2ef2:	4603      	mov	r3, r0
    2ef4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2ef6:	7afb      	ldrb	r3, [r7, #11]
    2ef8:	2b08      	cmp	r3, #8
    2efa:	d00d      	beq.n	2f18 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2efc:	79fb      	ldrb	r3, [r7, #7]
    2efe:	2101      	movs	r1, #1
    2f00:	4618      	mov	r0, r3
    2f02:	4b20      	ldr	r3, [pc, #128]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f04:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2f06:	79fb      	ldrb	r3, [r7, #7]
    2f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f0c:	b2db      	uxtb	r3, r3
    2f0e:	2101      	movs	r1, #1
    2f10:	4618      	mov	r0, r3
    2f12:	4b1c      	ldr	r3, [pc, #112]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f14:	4798      	blx	r3
		return;
    2f16:	e02b      	b.n	2f70 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2f18:	79fb      	ldrb	r3, [r7, #7]
    2f1a:	2100      	movs	r1, #0
    2f1c:	4618      	mov	r0, r3
    2f1e:	4b19      	ldr	r3, [pc, #100]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f20:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2f22:	79fb      	ldrb	r3, [r7, #7]
    2f24:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	2100      	movs	r1, #0
    2f2c:	4618      	mov	r0, r3
    2f2e:	4b15      	ldr	r3, [pc, #84]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f30:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2f32:	693b      	ldr	r3, [r7, #16]
    2f34:	2201      	movs	r2, #1
    2f36:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2f38:	693b      	ldr	r3, [r7, #16]
    2f3a:	695b      	ldr	r3, [r3, #20]
    2f3c:	79fa      	ldrb	r2, [r7, #7]
    2f3e:	68f9      	ldr	r1, [r7, #12]
    2f40:	4610      	mov	r0, r2
    2f42:	4798      	blx	r3
    2f44:	4603      	mov	r3, r0
    2f46:	f083 0301 	eor.w	r3, r3, #1
    2f4a:	b2db      	uxtb	r3, r3
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d00f      	beq.n	2f70 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2f50:	693b      	ldr	r3, [r7, #16]
    2f52:	2205      	movs	r2, #5
    2f54:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2f56:	79fb      	ldrb	r3, [r7, #7]
    2f58:	2101      	movs	r1, #1
    2f5a:	4618      	mov	r0, r3
    2f5c:	4b09      	ldr	r3, [pc, #36]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f5e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2f60:	79fb      	ldrb	r3, [r7, #7]
    2f62:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2f66:	b2db      	uxtb	r3, r3
    2f68:	2101      	movs	r1, #1
    2f6a:	4618      	mov	r0, r3
    2f6c:	4b05      	ldr	r3, [pc, #20]	; (2f84 <usb_d_cb_trans_setup+0xc4>)
    2f6e:	4798      	blx	r3
	}
}
    2f70:	3718      	adds	r7, #24
    2f72:	46bd      	mov	sp, r7
    2f74:	bd80      	pop	{r7, pc}
    2f76:	bf00      	nop
    2f78:	00002dd1 	.word	0x00002dd1
    2f7c:	200006e0 	.word	0x200006e0
    2f80:	0000a79d 	.word	0x0000a79d
    2f84:	0000a615 	.word	0x0000a615

00002f88 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b084      	sub	sp, #16
    2f8c:	af00      	add	r7, sp, #0
    2f8e:	4603      	mov	r3, r0
    2f90:	6039      	str	r1, [r7, #0]
    2f92:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f94:	79fb      	ldrb	r3, [r7, #7]
    2f96:	4618      	mov	r0, r3
    2f98:	4b0d      	ldr	r3, [pc, #52]	; (2fd0 <usb_d_cb_trans_more+0x48>)
    2f9a:	4798      	blx	r3
    2f9c:	4603      	mov	r3, r0
    2f9e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2fa4:	015b      	lsls	r3, r3, #5
    2fa6:	4a0b      	ldr	r2, [pc, #44]	; (2fd4 <usb_d_cb_trans_more+0x4c>)
    2fa8:	4413      	add	r3, r2
    2faa:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2fac:	68bb      	ldr	r3, [r7, #8]
    2fae:	789b      	ldrb	r3, [r3, #2]
    2fb0:	2b03      	cmp	r3, #3
    2fb2:	d107      	bne.n	2fc4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2fb4:	68bb      	ldr	r3, [r7, #8]
    2fb6:	699b      	ldr	r3, [r3, #24]
    2fb8:	79fa      	ldrb	r2, [r7, #7]
    2fba:	6839      	ldr	r1, [r7, #0]
    2fbc:	4610      	mov	r0, r2
    2fbe:	4798      	blx	r3
    2fc0:	4603      	mov	r3, r0
    2fc2:	e000      	b.n	2fc6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2fc4:	2300      	movs	r3, #0
}
    2fc6:	4618      	mov	r0, r3
    2fc8:	3710      	adds	r7, #16
    2fca:	46bd      	mov	sp, r7
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	bf00      	nop
    2fd0:	00002dd1 	.word	0x00002dd1
    2fd4:	200006e0 	.word	0x200006e0

00002fd8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2fd8:	b590      	push	{r4, r7, lr}
    2fda:	b087      	sub	sp, #28
    2fdc:	af02      	add	r7, sp, #8
    2fde:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	789b      	ldrb	r3, [r3, #2]
    2fe4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	7b1b      	ldrb	r3, [r3, #12]
    2fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2fee:	2b00      	cmp	r3, #0
    2ff0:	bf14      	ite	ne
    2ff2:	2301      	movne	r3, #1
    2ff4:	2300      	moveq	r3, #0
    2ff6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2ff8:	7bfb      	ldrb	r3, [r7, #15]
    2ffa:	2b03      	cmp	r3, #3
    2ffc:	d13a      	bne.n	3074 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	69db      	ldr	r3, [r3, #28]
    3002:	687a      	ldr	r2, [r7, #4]
    3004:	7850      	ldrb	r0, [r2, #1]
    3006:	687a      	ldr	r2, [r7, #4]
    3008:	320c      	adds	r2, #12
    300a:	2101      	movs	r1, #1
    300c:	4798      	blx	r3
    300e:	4603      	mov	r3, r0
    3010:	737b      	strb	r3, [r7, #13]
		if (err) {
    3012:	7b7b      	ldrb	r3, [r7, #13]
    3014:	2b00      	cmp	r3, #0
    3016:	d015      	beq.n	3044 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	2205      	movs	r2, #5
    301c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	2202      	movs	r2, #2
    3022:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3024:	7bbb      	ldrb	r3, [r7, #14]
    3026:	2b00      	cmp	r3, #0
    3028:	d002      	beq.n	3030 <usb_d_ctrl_trans_done+0x58>
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	785b      	ldrb	r3, [r3, #1]
    302e:	e004      	b.n	303a <usb_d_ctrl_trans_done+0x62>
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	785b      	ldrb	r3, [r3, #1]
    3034:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3038:	b2db      	uxtb	r3, r3
    303a:	2101      	movs	r1, #1
    303c:	4618      	mov	r0, r3
    303e:	4b15      	ldr	r3, [pc, #84]	; (3094 <usb_d_ctrl_trans_done+0xbc>)
    3040:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3042:	e022      	b.n	308a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	2204      	movs	r2, #4
    3048:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	7858      	ldrb	r0, [r3, #1]
    304e:	7bbb      	ldrb	r3, [r7, #14]
    3050:	2b00      	cmp	r3, #0
    3052:	bf14      	ite	ne
    3054:	2301      	movne	r3, #1
    3056:	2300      	moveq	r3, #0
    3058:	b2db      	uxtb	r3, r3
    305a:	f083 0301 	eor.w	r3, r3, #1
    305e:	b2db      	uxtb	r3, r3
    3060:	f003 0301 	and.w	r3, r3, #1
    3064:	b2d9      	uxtb	r1, r3
    3066:	2301      	movs	r3, #1
    3068:	9300      	str	r3, [sp, #0]
    306a:	2300      	movs	r3, #0
    306c:	2200      	movs	r2, #0
    306e:	4c0a      	ldr	r4, [pc, #40]	; (3098 <usb_d_ctrl_trans_done+0xc0>)
    3070:	47a0      	blx	r4
}
    3072:	e00a      	b.n	308a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	69db      	ldr	r3, [r3, #28]
    3078:	687a      	ldr	r2, [r7, #4]
    307a:	7850      	ldrb	r0, [r2, #1]
    307c:	687a      	ldr	r2, [r7, #4]
    307e:	320c      	adds	r2, #12
    3080:	2100      	movs	r1, #0
    3082:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	2202      	movs	r2, #2
    3088:	709a      	strb	r2, [r3, #2]
}
    308a:	bf00      	nop
    308c:	3714      	adds	r7, #20
    308e:	46bd      	mov	sp, r7
    3090:	bd90      	pop	{r4, r7, pc}
    3092:	bf00      	nop
    3094:	0000a615 	.word	0x0000a615
    3098:	00002e51 	.word	0x00002e51

0000309c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    309c:	b580      	push	{r7, lr}
    309e:	b086      	sub	sp, #24
    30a0:	af00      	add	r7, sp, #0
    30a2:	4603      	mov	r3, r0
    30a4:	60b9      	str	r1, [r7, #8]
    30a6:	607a      	str	r2, [r7, #4]
    30a8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30aa:	7bfb      	ldrb	r3, [r7, #15]
    30ac:	4618      	mov	r0, r3
    30ae:	4b2f      	ldr	r3, [pc, #188]	; (316c <_usb_d_cb_trans_done+0xd0>)
    30b0:	4798      	blx	r3
    30b2:	4603      	mov	r3, r0
    30b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30ba:	015b      	lsls	r3, r3, #5
    30bc:	4a2c      	ldr	r2, [pc, #176]	; (3170 <_usb_d_cb_trans_done+0xd4>)
    30be:	4413      	add	r3, r2
    30c0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    30c2:	68bb      	ldr	r3, [r7, #8]
    30c4:	2b00      	cmp	r3, #0
    30c6:	d10e      	bne.n	30e6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    30c8:	693b      	ldr	r3, [r7, #16]
    30ca:	2200      	movs	r2, #0
    30cc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    30ce:	693b      	ldr	r3, [r7, #16]
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	2b00      	cmp	r3, #0
    30d4:	d103      	bne.n	30de <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    30d6:	6938      	ldr	r0, [r7, #16]
    30d8:	4b26      	ldr	r3, [pc, #152]	; (3174 <_usb_d_cb_trans_done+0xd8>)
    30da:	4798      	blx	r3
			return;
    30dc:	e043      	b.n	3166 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    30de:	693b      	ldr	r3, [r7, #16]
    30e0:	2201      	movs	r2, #1
    30e2:	709a      	strb	r2, [r3, #2]
    30e4:	e038      	b.n	3158 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    30e6:	68bb      	ldr	r3, [r7, #8]
    30e8:	2b01      	cmp	r3, #1
    30ea:	d113      	bne.n	3114 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    30ec:	693b      	ldr	r3, [r7, #16]
    30ee:	2202      	movs	r2, #2
    30f0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    30f2:	693b      	ldr	r3, [r7, #16]
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d108      	bne.n	310c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    30fa:	693b      	ldr	r3, [r7, #16]
    30fc:	2202      	movs	r2, #2
    30fe:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3100:	7bfb      	ldrb	r3, [r7, #15]
    3102:	2100      	movs	r1, #0
    3104:	4618      	mov	r0, r3
    3106:	4b1c      	ldr	r3, [pc, #112]	; (3178 <_usb_d_cb_trans_done+0xdc>)
    3108:	4798      	blx	r3
    310a:	e025      	b.n	3158 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    310c:	693b      	ldr	r3, [r7, #16]
    310e:	2205      	movs	r2, #5
    3110:	709a      	strb	r2, [r3, #2]
    3112:	e021      	b.n	3158 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3114:	68bb      	ldr	r3, [r7, #8]
    3116:	2b02      	cmp	r3, #2
    3118:	d10e      	bne.n	3138 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    311a:	693b      	ldr	r3, [r7, #16]
    311c:	2204      	movs	r2, #4
    311e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3120:	693b      	ldr	r3, [r7, #16]
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	2b00      	cmp	r3, #0
    3126:	d103      	bne.n	3130 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3128:	693b      	ldr	r3, [r7, #16]
    312a:	2202      	movs	r2, #2
    312c:	709a      	strb	r2, [r3, #2]
			return;
    312e:	e01a      	b.n	3166 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3130:	693b      	ldr	r3, [r7, #16]
    3132:	2201      	movs	r2, #1
    3134:	709a      	strb	r2, [r3, #2]
    3136:	e00f      	b.n	3158 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3138:	68bb      	ldr	r3, [r7, #8]
    313a:	2b03      	cmp	r3, #3
    313c:	d106      	bne.n	314c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	2200      	movs	r2, #0
    3142:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3144:	693b      	ldr	r3, [r7, #16]
    3146:	2205      	movs	r2, #5
    3148:	70da      	strb	r2, [r3, #3]
    314a:	e005      	b.n	3158 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    314c:	693b      	ldr	r3, [r7, #16]
    314e:	2206      	movs	r2, #6
    3150:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3152:	693b      	ldr	r3, [r7, #16]
    3154:	2206      	movs	r2, #6
    3156:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3158:	693b      	ldr	r3, [r7, #16]
    315a:	69db      	ldr	r3, [r3, #28]
    315c:	693a      	ldr	r2, [r7, #16]
    315e:	78d1      	ldrb	r1, [r2, #3]
    3160:	687a      	ldr	r2, [r7, #4]
    3162:	7bf8      	ldrb	r0, [r7, #15]
    3164:	4798      	blx	r3
}
    3166:	3718      	adds	r7, #24
    3168:	46bd      	mov	sp, r7
    316a:	bd80      	pop	{r7, pc}
    316c:	00002dd1 	.word	0x00002dd1
    3170:	200006e0 	.word	0x200006e0
    3174:	00002fd9 	.word	0x00002fd9
    3178:	0000a615 	.word	0x0000a615

0000317c <usb_d_init>:

int32_t usb_d_init(void)
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3182:	4b21      	ldr	r3, [pc, #132]	; (3208 <usb_d_init+0x8c>)
    3184:	4798      	blx	r3
    3186:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3188:	683b      	ldr	r3, [r7, #0]
    318a:	2b00      	cmp	r3, #0
    318c:	da01      	bge.n	3192 <usb_d_init+0x16>
		return rc;
    318e:	683b      	ldr	r3, [r7, #0]
    3190:	e036      	b.n	3200 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3192:	2280      	movs	r2, #128	; 0x80
    3194:	2100      	movs	r1, #0
    3196:	481d      	ldr	r0, [pc, #116]	; (320c <usb_d_init+0x90>)
    3198:	4b1d      	ldr	r3, [pc, #116]	; (3210 <usb_d_init+0x94>)
    319a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    319c:	2300      	movs	r3, #0
    319e:	71fb      	strb	r3, [r7, #7]
    31a0:	e01e      	b.n	31e0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    31a2:	79fb      	ldrb	r3, [r7, #7]
    31a4:	4a19      	ldr	r2, [pc, #100]	; (320c <usb_d_init+0x90>)
    31a6:	015b      	lsls	r3, r3, #5
    31a8:	4413      	add	r3, r2
    31aa:	3301      	adds	r3, #1
    31ac:	22ff      	movs	r2, #255	; 0xff
    31ae:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    31b0:	79fb      	ldrb	r3, [r7, #7]
    31b2:	4a16      	ldr	r2, [pc, #88]	; (320c <usb_d_init+0x90>)
    31b4:	015b      	lsls	r3, r3, #5
    31b6:	4413      	add	r3, r2
    31b8:	3314      	adds	r3, #20
    31ba:	4a16      	ldr	r2, [pc, #88]	; (3214 <usb_d_init+0x98>)
    31bc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    31be:	79fb      	ldrb	r3, [r7, #7]
    31c0:	4a12      	ldr	r2, [pc, #72]	; (320c <usb_d_init+0x90>)
    31c2:	015b      	lsls	r3, r3, #5
    31c4:	4413      	add	r3, r2
    31c6:	3318      	adds	r3, #24
    31c8:	4a12      	ldr	r2, [pc, #72]	; (3214 <usb_d_init+0x98>)
    31ca:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    31cc:	79fb      	ldrb	r3, [r7, #7]
    31ce:	4a0f      	ldr	r2, [pc, #60]	; (320c <usb_d_init+0x90>)
    31d0:	015b      	lsls	r3, r3, #5
    31d2:	4413      	add	r3, r2
    31d4:	331c      	adds	r3, #28
    31d6:	4a0f      	ldr	r2, [pc, #60]	; (3214 <usb_d_init+0x98>)
    31d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    31da:	79fb      	ldrb	r3, [r7, #7]
    31dc:	3301      	adds	r3, #1
    31de:	71fb      	strb	r3, [r7, #7]
    31e0:	79fb      	ldrb	r3, [r7, #7]
    31e2:	2b03      	cmp	r3, #3
    31e4:	d9dd      	bls.n	31a2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    31e6:	490c      	ldr	r1, [pc, #48]	; (3218 <usb_d_init+0x9c>)
    31e8:	2000      	movs	r0, #0
    31ea:	4b0c      	ldr	r3, [pc, #48]	; (321c <usb_d_init+0xa0>)
    31ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    31ee:	490c      	ldr	r1, [pc, #48]	; (3220 <usb_d_init+0xa4>)
    31f0:	2001      	movs	r0, #1
    31f2:	4b0a      	ldr	r3, [pc, #40]	; (321c <usb_d_init+0xa0>)
    31f4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    31f6:	490b      	ldr	r1, [pc, #44]	; (3224 <usb_d_init+0xa8>)
    31f8:	2002      	movs	r0, #2
    31fa:	4b08      	ldr	r3, [pc, #32]	; (321c <usb_d_init+0xa0>)
    31fc:	4798      	blx	r3
	return ERR_NONE;
    31fe:	2300      	movs	r3, #0
}
    3200:	4618      	mov	r0, r3
    3202:	3708      	adds	r7, #8
    3204:	46bd      	mov	sp, r7
    3206:	bd80      	pop	{r7, pc}
    3208:	00009e5d 	.word	0x00009e5d
    320c:	200006e0 	.word	0x200006e0
    3210:	0000e869 	.word	0x0000e869
    3214:	00002ea5 	.word	0x00002ea5
    3218:	00002ec1 	.word	0x00002ec1
    321c:	0000aaa5 	.word	0x0000aaa5
    3220:	00002f89 	.word	0x00002f89
    3224:	0000309d 	.word	0x0000309d

00003228 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3228:	b580      	push	{r7, lr}
    322a:	b082      	sub	sp, #8
    322c:	af00      	add	r7, sp, #0
    322e:	4603      	mov	r3, r0
    3230:	6039      	str	r1, [r7, #0]
    3232:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3234:	79fb      	ldrb	r3, [r7, #7]
    3236:	6839      	ldr	r1, [r7, #0]
    3238:	4618      	mov	r0, r3
    323a:	4b03      	ldr	r3, [pc, #12]	; (3248 <usb_d_register_callback+0x20>)
    323c:	4798      	blx	r3
}
    323e:	bf00      	nop
    3240:	3708      	adds	r7, #8
    3242:	46bd      	mov	sp, r7
    3244:	bd80      	pop	{r7, pc}
    3246:	bf00      	nop
    3248:	0000aa5d 	.word	0x0000aa5d

0000324c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    324c:	b580      	push	{r7, lr}
    324e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <usb_d_enable+0x10>)
    3252:	4798      	blx	r3
    3254:	4603      	mov	r3, r0
}
    3256:	4618      	mov	r0, r3
    3258:	bd80      	pop	{r7, pc}
    325a:	bf00      	nop
    325c:	00009f4d 	.word	0x00009f4d

00003260 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3260:	b580      	push	{r7, lr}
    3262:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3264:	4b01      	ldr	r3, [pc, #4]	; (326c <usb_d_attach+0xc>)
    3266:	4798      	blx	r3
}
    3268:	bf00      	nop
    326a:	bd80      	pop	{r7, pc}
    326c:	00009fd1 	.word	0x00009fd1

00003270 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3270:	b580      	push	{r7, lr}
    3272:	b082      	sub	sp, #8
    3274:	af00      	add	r7, sp, #0
    3276:	4603      	mov	r3, r0
    3278:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    327a:	79fb      	ldrb	r3, [r7, #7]
    327c:	4618      	mov	r0, r3
    327e:	4b03      	ldr	r3, [pc, #12]	; (328c <usb_d_set_address+0x1c>)
    3280:	4798      	blx	r3
}
    3282:	bf00      	nop
    3284:	3708      	adds	r7, #8
    3286:	46bd      	mov	sp, r7
    3288:	bd80      	pop	{r7, pc}
    328a:	bf00      	nop
    328c:	00009fe5 	.word	0x00009fe5

00003290 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3290:	b580      	push	{r7, lr}
    3292:	b082      	sub	sp, #8
    3294:	af00      	add	r7, sp, #0
    3296:	4603      	mov	r3, r0
    3298:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    329a:	79fb      	ldrb	r3, [r7, #7]
    329c:	b29b      	uxth	r3, r3
    329e:	461a      	mov	r2, r3
    32a0:	2100      	movs	r1, #0
    32a2:	2000      	movs	r0, #0
    32a4:	4b03      	ldr	r3, [pc, #12]	; (32b4 <usb_d_ep0_init+0x24>)
    32a6:	4798      	blx	r3
    32a8:	4603      	mov	r3, r0
}
    32aa:	4618      	mov	r0, r3
    32ac:	3708      	adds	r7, #8
    32ae:	46bd      	mov	sp, r7
    32b0:	bd80      	pop	{r7, pc}
    32b2:	bf00      	nop
    32b4:	000032b9 	.word	0x000032b9

000032b8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b086      	sub	sp, #24
    32bc:	af00      	add	r7, sp, #0
    32be:	4603      	mov	r3, r0
    32c0:	71fb      	strb	r3, [r7, #7]
    32c2:	460b      	mov	r3, r1
    32c4:	71bb      	strb	r3, [r7, #6]
    32c6:	4613      	mov	r3, r2
    32c8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    32ca:	79fb      	ldrb	r3, [r7, #7]
    32cc:	4618      	mov	r0, r3
    32ce:	4b1e      	ldr	r3, [pc, #120]	; (3348 <usb_d_ep_init+0x90>)
    32d0:	4798      	blx	r3
    32d2:	4603      	mov	r3, r0
    32d4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32da:	015b      	lsls	r3, r3, #5
    32dc:	4a1b      	ldr	r2, [pc, #108]	; (334c <usb_d_ep_init+0x94>)
    32de:	4413      	add	r3, r2
    32e0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    32e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32e6:	2b00      	cmp	r3, #0
    32e8:	db02      	blt.n	32f0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    32ea:	f06f 0313 	mvn.w	r3, #19
    32ee:	e027      	b.n	3340 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    32f0:	20ff      	movs	r0, #255	; 0xff
    32f2:	4b15      	ldr	r3, [pc, #84]	; (3348 <usb_d_ep_init+0x90>)
    32f4:	4798      	blx	r3
    32f6:	4603      	mov	r3, r0
    32f8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    32fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    32fe:	2b00      	cmp	r3, #0
    3300:	da02      	bge.n	3308 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3302:	f06f 0314 	mvn.w	r3, #20
    3306:	e01b      	b.n	3340 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3308:	f997 3017 	ldrsb.w	r3, [r7, #23]
    330c:	015b      	lsls	r3, r3, #5
    330e:	4a0f      	ldr	r2, [pc, #60]	; (334c <usb_d_ep_init+0x94>)
    3310:	4413      	add	r3, r2
    3312:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3314:	88ba      	ldrh	r2, [r7, #4]
    3316:	79b9      	ldrb	r1, [r7, #6]
    3318:	79fb      	ldrb	r3, [r7, #7]
    331a:	4618      	mov	r0, r3
    331c:	4b0c      	ldr	r3, [pc, #48]	; (3350 <usb_d_ep_init+0x98>)
    331e:	4798      	blx	r3
    3320:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3322:	68fb      	ldr	r3, [r7, #12]
    3324:	2b00      	cmp	r3, #0
    3326:	da01      	bge.n	332c <usb_d_ep_init+0x74>
		return rc;
    3328:	68fb      	ldr	r3, [r7, #12]
    332a:	e009      	b.n	3340 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    332c:	693b      	ldr	r3, [r7, #16]
    332e:	79fa      	ldrb	r2, [r7, #7]
    3330:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3332:	79bb      	ldrb	r3, [r7, #6]
    3334:	f003 0303 	and.w	r3, r3, #3
    3338:	b2da      	uxtb	r2, r3
    333a:	693b      	ldr	r3, [r7, #16]
    333c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    333e:	2300      	movs	r3, #0
}
    3340:	4618      	mov	r0, r3
    3342:	3718      	adds	r7, #24
    3344:	46bd      	mov	sp, r7
    3346:	bd80      	pop	{r7, pc}
    3348:	00002dd1 	.word	0x00002dd1
    334c:	200006e0 	.word	0x200006e0
    3350:	0000a085 	.word	0x0000a085

00003354 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	4603      	mov	r3, r0
    335c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    335e:	79fb      	ldrb	r3, [r7, #7]
    3360:	4618      	mov	r0, r3
    3362:	4b0d      	ldr	r3, [pc, #52]	; (3398 <usb_d_ep_deinit+0x44>)
    3364:	4798      	blx	r3
    3366:	4603      	mov	r3, r0
    3368:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    336e:	015b      	lsls	r3, r3, #5
    3370:	4a0a      	ldr	r2, [pc, #40]	; (339c <usb_d_ep_deinit+0x48>)
    3372:	4413      	add	r3, r2
    3374:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3376:	f997 300f 	ldrsb.w	r3, [r7, #15]
    337a:	2b00      	cmp	r3, #0
    337c:	db07      	blt.n	338e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    337e:	79fb      	ldrb	r3, [r7, #7]
    3380:	4618      	mov	r0, r3
    3382:	4b07      	ldr	r3, [pc, #28]	; (33a0 <usb_d_ep_deinit+0x4c>)
    3384:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	22ff      	movs	r2, #255	; 0xff
    338a:	705a      	strb	r2, [r3, #1]
    338c:	e000      	b.n	3390 <usb_d_ep_deinit+0x3c>
		return;
    338e:	bf00      	nop
}
    3390:	3710      	adds	r7, #16
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	bf00      	nop
    3398:	00002dd1 	.word	0x00002dd1
    339c:	200006e0 	.word	0x200006e0
    33a0:	0000a1b9 	.word	0x0000a1b9

000033a4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b086      	sub	sp, #24
    33a8:	af00      	add	r7, sp, #0
    33aa:	4603      	mov	r3, r0
    33ac:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    33ae:	79fb      	ldrb	r3, [r7, #7]
    33b0:	4618      	mov	r0, r3
    33b2:	4b15      	ldr	r3, [pc, #84]	; (3408 <usb_d_ep_enable+0x64>)
    33b4:	4798      	blx	r3
    33b6:	4603      	mov	r3, r0
    33b8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33be:	015b      	lsls	r3, r3, #5
    33c0:	4a12      	ldr	r2, [pc, #72]	; (340c <usb_d_ep_enable+0x68>)
    33c2:	4413      	add	r3, r2
    33c4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    33c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33ca:	2b00      	cmp	r3, #0
    33cc:	da02      	bge.n	33d4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    33ce:	f06f 0311 	mvn.w	r3, #17
    33d2:	e014      	b.n	33fe <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    33d4:	693b      	ldr	r3, [r7, #16]
    33d6:	781b      	ldrb	r3, [r3, #0]
    33d8:	2b00      	cmp	r3, #0
    33da:	d101      	bne.n	33e0 <usb_d_ep_enable+0x3c>
    33dc:	2202      	movs	r2, #2
    33de:	e000      	b.n	33e2 <usb_d_ep_enable+0x3e>
    33e0:	2201      	movs	r2, #1
    33e2:	693b      	ldr	r3, [r7, #16]
    33e4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    33e6:	79fb      	ldrb	r3, [r7, #7]
    33e8:	4618      	mov	r0, r3
    33ea:	4b09      	ldr	r3, [pc, #36]	; (3410 <usb_d_ep_enable+0x6c>)
    33ec:	4798      	blx	r3
    33ee:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    33f0:	68fb      	ldr	r3, [r7, #12]
    33f2:	2b00      	cmp	r3, #0
    33f4:	da02      	bge.n	33fc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    33f6:	693b      	ldr	r3, [r7, #16]
    33f8:	2200      	movs	r2, #0
    33fa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    33fc:	68fb      	ldr	r3, [r7, #12]
}
    33fe:	4618      	mov	r0, r3
    3400:	3718      	adds	r7, #24
    3402:	46bd      	mov	sp, r7
    3404:	bd80      	pop	{r7, pc}
    3406:	bf00      	nop
    3408:	00002dd1 	.word	0x00002dd1
    340c:	200006e0 	.word	0x200006e0
    3410:	0000a29d 	.word	0x0000a29d

00003414 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3414:	b590      	push	{r4, r7, lr}
    3416:	b08d      	sub	sp, #52	; 0x34
    3418:	af02      	add	r7, sp, #8
    341a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	7a1b      	ldrb	r3, [r3, #8]
    3420:	4618      	mov	r0, r3
    3422:	4b51      	ldr	r3, [pc, #324]	; (3568 <usb_d_ep_transfer+0x154>)
    3424:	4798      	blx	r3
    3426:	4603      	mov	r3, r0
    3428:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    342a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    342e:	015b      	lsls	r3, r3, #5
    3430:	4a4e      	ldr	r2, [pc, #312]	; (356c <usb_d_ep_transfer+0x158>)
    3432:	4413      	add	r3, r2
    3434:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	7a1b      	ldrb	r3, [r3, #8]
    343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    343e:	2b00      	cmp	r3, #0
    3440:	bf14      	ite	ne
    3442:	2301      	movne	r3, #1
    3444:	2300      	moveq	r3, #0
    3446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	7a5b      	ldrb	r3, [r3, #9]
    344e:	2b00      	cmp	r3, #0
    3450:	bf14      	ite	ne
    3452:	2301      	movne	r3, #1
    3454:	2300      	moveq	r3, #0
    3456:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	685b      	ldr	r3, [r3, #4]
    345e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3460:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3464:	2b00      	cmp	r3, #0
    3466:	da02      	bge.n	346e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3468:	f06f 0311 	mvn.w	r3, #17
    346c:	e077      	b.n	355e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    346e:	f107 0308 	add.w	r3, r7, #8
    3472:	4618      	mov	r0, r3
    3474:	4b3e      	ldr	r3, [pc, #248]	; (3570 <usb_d_ep_transfer+0x15c>)
    3476:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3478:	69bb      	ldr	r3, [r7, #24]
    347a:	789b      	ldrb	r3, [r3, #2]
    347c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    347e:	7bfb      	ldrb	r3, [r7, #15]
    3480:	b2db      	uxtb	r3, r3
    3482:	2b01      	cmp	r3, #1
    3484:	d10c      	bne.n	34a0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3486:	69bb      	ldr	r3, [r7, #24]
    3488:	2203      	movs	r2, #3
    348a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    348c:	f107 0308 	add.w	r3, r7, #8
    3490:	4618      	mov	r0, r3
    3492:	4b38      	ldr	r3, [pc, #224]	; (3574 <usb_d_ep_transfer+0x160>)
    3494:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3496:	69bb      	ldr	r3, [r7, #24]
    3498:	781b      	ldrb	r3, [r3, #0]
    349a:	2b00      	cmp	r3, #0
    349c:	d151      	bne.n	3542 <usb_d_ep_transfer+0x12e>
    349e:	e017      	b.n	34d0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    34a0:	f107 0308 	add.w	r3, r7, #8
    34a4:	4618      	mov	r0, r3
    34a6:	4b33      	ldr	r3, [pc, #204]	; (3574 <usb_d_ep_transfer+0x160>)
    34a8:	4798      	blx	r3
		switch (state) {
    34aa:	7bfb      	ldrb	r3, [r7, #15]
    34ac:	b2db      	uxtb	r3, r3
    34ae:	2b05      	cmp	r3, #5
    34b0:	d004      	beq.n	34bc <usb_d_ep_transfer+0xa8>
    34b2:	2b06      	cmp	r3, #6
    34b4:	d004      	beq.n	34c0 <usb_d_ep_transfer+0xac>
    34b6:	2b00      	cmp	r3, #0
    34b8:	d005      	beq.n	34c6 <usb_d_ep_transfer+0xb2>
    34ba:	e007      	b.n	34cc <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    34bc:	2302      	movs	r3, #2
    34be:	e04e      	b.n	355e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    34c0:	f06f 030f 	mvn.w	r3, #15
    34c4:	e04b      	b.n	355e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    34c6:	f06f 0312 	mvn.w	r3, #18
    34ca:	e048      	b.n	355e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    34cc:	2301      	movs	r3, #1
    34ce:	e046      	b.n	355e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    34d0:	69bb      	ldr	r3, [r7, #24]
    34d2:	7c9b      	ldrb	r3, [r3, #18]
    34d4:	b29a      	uxth	r2, r3
    34d6:	69bb      	ldr	r3, [r7, #24]
    34d8:	7cdb      	ldrb	r3, [r3, #19]
    34da:	b29b      	uxth	r3, r3
    34dc:	021b      	lsls	r3, r3, #8
    34de:	b29b      	uxth	r3, r3
    34e0:	4413      	add	r3, r2
    34e2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    34e4:	8afb      	ldrh	r3, [r7, #22]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d10b      	bne.n	3502 <usb_d_ep_transfer+0xee>
			dir                 = true;
    34ea:	2301      	movs	r3, #1
    34ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    34f0:	2300      	movs	r3, #0
    34f2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    34f4:	2301      	movs	r3, #1
    34f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    34fa:	69bb      	ldr	r3, [r7, #24]
    34fc:	2204      	movs	r2, #4
    34fe:	709a      	strb	r2, [r3, #2]
    3500:	e01f      	b.n	3542 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3502:	69bb      	ldr	r3, [r7, #24]
    3504:	7b1b      	ldrb	r3, [r3, #12]
    3506:	f003 0380 	and.w	r3, r3, #128	; 0x80
    350a:	2b00      	cmp	r3, #0
    350c:	bf14      	ite	ne
    350e:	2301      	movne	r3, #1
    3510:	2300      	moveq	r3, #0
    3512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3516:	8afa      	ldrh	r2, [r7, #22]
    3518:	6a3b      	ldr	r3, [r7, #32]
    351a:	429a      	cmp	r2, r3
    351c:	d201      	bcs.n	3522 <usb_d_ep_transfer+0x10e>
				len = req_len;
    351e:	8afb      	ldrh	r3, [r7, #22]
    3520:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3526:	2b00      	cmp	r3, #0
    3528:	d008      	beq.n	353c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    352a:	8afa      	ldrh	r2, [r7, #22]
    352c:	6a3b      	ldr	r3, [r7, #32]
    352e:	429a      	cmp	r2, r3
    3530:	bf8c      	ite	hi
    3532:	2301      	movhi	r3, #1
    3534:	2300      	movls	r3, #0
    3536:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    353a:	e002      	b.n	3542 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    353c:	2300      	movs	r3, #0
    353e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	7a18      	ldrb	r0, [r3, #8]
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	681a      	ldr	r2, [r3, #0]
    354a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    354e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3552:	9300      	str	r3, [sp, #0]
    3554:	6a3b      	ldr	r3, [r7, #32]
    3556:	4c08      	ldr	r4, [pc, #32]	; (3578 <usb_d_ep_transfer+0x164>)
    3558:	47a0      	blx	r4
    355a:	6138      	str	r0, [r7, #16]
	return rc;
    355c:	693b      	ldr	r3, [r7, #16]
}
    355e:	4618      	mov	r0, r3
    3560:	372c      	adds	r7, #44	; 0x2c
    3562:	46bd      	mov	sp, r7
    3564:	bd90      	pop	{r4, r7, pc}
    3566:	bf00      	nop
    3568:	00002dd1 	.word	0x00002dd1
    356c:	200006e0 	.word	0x200006e0
    3570:	0000b211 	.word	0x0000b211
    3574:	0000b237 	.word	0x0000b237
    3578:	00002e51 	.word	0x00002e51

0000357c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    357c:	b580      	push	{r7, lr}
    357e:	b084      	sub	sp, #16
    3580:	af00      	add	r7, sp, #0
    3582:	4603      	mov	r3, r0
    3584:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3586:	79fb      	ldrb	r3, [r7, #7]
    3588:	4618      	mov	r0, r3
    358a:	4b0e      	ldr	r3, [pc, #56]	; (35c4 <usb_d_ep_abort+0x48>)
    358c:	4798      	blx	r3
    358e:	4603      	mov	r3, r0
    3590:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3592:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3596:	015b      	lsls	r3, r3, #5
    3598:	4a0b      	ldr	r2, [pc, #44]	; (35c8 <usb_d_ep_abort+0x4c>)
    359a:	4413      	add	r3, r2
    359c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35a2:	2b00      	cmp	r3, #0
    35a4:	db0a      	blt.n	35bc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    35a6:	79fb      	ldrb	r3, [r7, #7]
    35a8:	4618      	mov	r0, r3
    35aa:	4b08      	ldr	r3, [pc, #32]	; (35cc <usb_d_ep_abort+0x50>)
    35ac:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    35ae:	68bb      	ldr	r3, [r7, #8]
    35b0:	2201      	movs	r2, #1
    35b2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    35b4:	68bb      	ldr	r3, [r7, #8]
    35b6:	2204      	movs	r2, #4
    35b8:	70da      	strb	r2, [r3, #3]
    35ba:	e000      	b.n	35be <usb_d_ep_abort+0x42>
		return;
    35bc:	bf00      	nop
}
    35be:	3710      	adds	r7, #16
    35c0:	46bd      	mov	sp, r7
    35c2:	bd80      	pop	{r7, pc}
    35c4:	00002dd1 	.word	0x00002dd1
    35c8:	200006e0 	.word	0x200006e0
    35cc:	0000aa09 	.word	0x0000aa09

000035d0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    35d0:	b580      	push	{r7, lr}
    35d2:	b086      	sub	sp, #24
    35d4:	af00      	add	r7, sp, #0
    35d6:	4603      	mov	r3, r0
    35d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35da:	79fb      	ldrb	r3, [r7, #7]
    35dc:	4618      	mov	r0, r3
    35de:	4b1a      	ldr	r3, [pc, #104]	; (3648 <_usb_d_ep_halt_clr+0x78>)
    35e0:	4798      	blx	r3
    35e2:	4603      	mov	r3, r0
    35e4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35ea:	015b      	lsls	r3, r3, #5
    35ec:	4a17      	ldr	r2, [pc, #92]	; (364c <_usb_d_ep_halt_clr+0x7c>)
    35ee:	4413      	add	r3, r2
    35f0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    35f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35f6:	2b00      	cmp	r3, #0
    35f8:	da02      	bge.n	3600 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    35fa:	f06f 0311 	mvn.w	r3, #17
    35fe:	e01f      	b.n	3640 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3600:	79fb      	ldrb	r3, [r7, #7]
    3602:	2102      	movs	r1, #2
    3604:	4618      	mov	r0, r3
    3606:	4b12      	ldr	r3, [pc, #72]	; (3650 <_usb_d_ep_halt_clr+0x80>)
    3608:	4798      	blx	r3
    360a:	4603      	mov	r3, r0
    360c:	2b00      	cmp	r3, #0
    360e:	d016      	beq.n	363e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3610:	79fb      	ldrb	r3, [r7, #7]
    3612:	2100      	movs	r1, #0
    3614:	4618      	mov	r0, r3
    3616:	4b0e      	ldr	r3, [pc, #56]	; (3650 <_usb_d_ep_halt_clr+0x80>)
    3618:	4798      	blx	r3
    361a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    361c:	68fb      	ldr	r3, [r7, #12]
    361e:	2b00      	cmp	r3, #0
    3620:	da01      	bge.n	3626 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3622:	68fb      	ldr	r3, [r7, #12]
    3624:	e00c      	b.n	3640 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3626:	693b      	ldr	r3, [r7, #16]
    3628:	2201      	movs	r2, #1
    362a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    362c:	693b      	ldr	r3, [r7, #16]
    362e:	2203      	movs	r2, #3
    3630:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3632:	693b      	ldr	r3, [r7, #16]
    3634:	69db      	ldr	r3, [r3, #28]
    3636:	79f8      	ldrb	r0, [r7, #7]
    3638:	2200      	movs	r2, #0
    363a:	2103      	movs	r1, #3
    363c:	4798      	blx	r3
	}
	return ERR_NONE;
    363e:	2300      	movs	r3, #0
}
    3640:	4618      	mov	r0, r3
    3642:	3718      	adds	r7, #24
    3644:	46bd      	mov	sp, r7
    3646:	bd80      	pop	{r7, pc}
    3648:	00002dd1 	.word	0x00002dd1
    364c:	200006e0 	.word	0x200006e0
    3650:	0000a615 	.word	0x0000a615

00003654 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3654:	b580      	push	{r7, lr}
    3656:	b082      	sub	sp, #8
    3658:	af00      	add	r7, sp, #0
    365a:	4603      	mov	r3, r0
    365c:	460a      	mov	r2, r1
    365e:	71fb      	strb	r3, [r7, #7]
    3660:	4613      	mov	r3, r2
    3662:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3664:	79bb      	ldrb	r3, [r7, #6]
    3666:	2b00      	cmp	r3, #0
    3668:	d105      	bne.n	3676 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    366a:	79fb      	ldrb	r3, [r7, #7]
    366c:	4618      	mov	r0, r3
    366e:	4b0c      	ldr	r3, [pc, #48]	; (36a0 <usb_d_ep_halt+0x4c>)
    3670:	4798      	blx	r3
    3672:	4603      	mov	r3, r0
    3674:	e00f      	b.n	3696 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3676:	79bb      	ldrb	r3, [r7, #6]
    3678:	2b01      	cmp	r3, #1
    367a:	d106      	bne.n	368a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    367c:	79fb      	ldrb	r3, [r7, #7]
    367e:	2101      	movs	r1, #1
    3680:	4618      	mov	r0, r3
    3682:	4b08      	ldr	r3, [pc, #32]	; (36a4 <usb_d_ep_halt+0x50>)
    3684:	4798      	blx	r3
    3686:	4603      	mov	r3, r0
    3688:	e005      	b.n	3696 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    368a:	79fb      	ldrb	r3, [r7, #7]
    368c:	2102      	movs	r1, #2
    368e:	4618      	mov	r0, r3
    3690:	4b04      	ldr	r3, [pc, #16]	; (36a4 <usb_d_ep_halt+0x50>)
    3692:	4798      	blx	r3
    3694:	4603      	mov	r3, r0
	}
}
    3696:	4618      	mov	r0, r3
    3698:	3708      	adds	r7, #8
    369a:	46bd      	mov	sp, r7
    369c:	bd80      	pop	{r7, pc}
    369e:	bf00      	nop
    36a0:	000035d1 	.word	0x000035d1
    36a4:	0000a615 	.word	0x0000a615

000036a8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    36a8:	b580      	push	{r7, lr}
    36aa:	b086      	sub	sp, #24
    36ac:	af00      	add	r7, sp, #0
    36ae:	4603      	mov	r3, r0
    36b0:	603a      	str	r2, [r7, #0]
    36b2:	71fb      	strb	r3, [r7, #7]
    36b4:	460b      	mov	r3, r1
    36b6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    36b8:	79fb      	ldrb	r3, [r7, #7]
    36ba:	4618      	mov	r0, r3
    36bc:	4b16      	ldr	r3, [pc, #88]	; (3718 <usb_d_ep_register_callback+0x70>)
    36be:	4798      	blx	r3
    36c0:	4603      	mov	r3, r0
    36c2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    36c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36c8:	015b      	lsls	r3, r3, #5
    36ca:	4a14      	ldr	r2, [pc, #80]	; (371c <usb_d_ep_register_callback+0x74>)
    36cc:	4413      	add	r3, r2
    36ce:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d001      	beq.n	36da <usb_d_ep_register_callback+0x32>
    36d6:	683b      	ldr	r3, [r7, #0]
    36d8:	e000      	b.n	36dc <usb_d_ep_register_callback+0x34>
    36da:	4b11      	ldr	r3, [pc, #68]	; (3720 <usb_d_ep_register_callback+0x78>)
    36dc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    36de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    36e2:	2b00      	cmp	r3, #0
    36e4:	db13      	blt.n	370e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    36e6:	79bb      	ldrb	r3, [r7, #6]
    36e8:	2b01      	cmp	r3, #1
    36ea:	d008      	beq.n	36fe <usb_d_ep_register_callback+0x56>
    36ec:	2b02      	cmp	r3, #2
    36ee:	d00a      	beq.n	3706 <usb_d_ep_register_callback+0x5e>
    36f0:	2b00      	cmp	r3, #0
    36f2:	d000      	beq.n	36f6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    36f4:	e00c      	b.n	3710 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    36f6:	693b      	ldr	r3, [r7, #16]
    36f8:	68fa      	ldr	r2, [r7, #12]
    36fa:	615a      	str	r2, [r3, #20]
		break;
    36fc:	e008      	b.n	3710 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    36fe:	693b      	ldr	r3, [r7, #16]
    3700:	68fa      	ldr	r2, [r7, #12]
    3702:	619a      	str	r2, [r3, #24]
		break;
    3704:	e004      	b.n	3710 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3706:	693b      	ldr	r3, [r7, #16]
    3708:	68fa      	ldr	r2, [r7, #12]
    370a:	61da      	str	r2, [r3, #28]
		break;
    370c:	e000      	b.n	3710 <usb_d_ep_register_callback+0x68>
		return;
    370e:	bf00      	nop
	}
}
    3710:	3718      	adds	r7, #24
    3712:	46bd      	mov	sp, r7
    3714:	bd80      	pop	{r7, pc}
    3716:	bf00      	nop
    3718:	00002dd1 	.word	0x00002dd1
    371c:	200006e0 	.word	0x200006e0
    3720:	00002ea5 	.word	0x00002ea5

00003724 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3724:	b480      	push	{r7}
    3726:	b085      	sub	sp, #20
    3728:	af00      	add	r7, sp, #0
    372a:	4603      	mov	r3, r0
    372c:	60b9      	str	r1, [r7, #8]
    372e:	607a      	str	r2, [r7, #4]
    3730:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3732:	7bfb      	ldrb	r3, [r7, #15]
    3734:	f083 0301 	eor.w	r3, r3, #1
    3738:	b2db      	uxtb	r3, r3
    373a:	2b00      	cmp	r3, #0
    373c:	d000      	beq.n	3740 <assert+0x1c>
		__asm("BKPT #0");
    373e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3740:	bf00      	nop
    3742:	3714      	adds	r7, #20
    3744:	46bd      	mov	sp, r7
    3746:	f85d 7b04 	ldr.w	r7, [sp], #4
    374a:	4770      	bx	lr

0000374c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    374c:	b480      	push	{r7}
    374e:	b085      	sub	sp, #20
    3750:	af00      	add	r7, sp, #0
    3752:	6078      	str	r0, [r7, #4]
    3754:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	681b      	ldr	r3, [r3, #0]
    375a:	60fb      	str	r3, [r7, #12]
    375c:	e008      	b.n	3770 <is_list_element+0x24>
		if (it == element) {
    375e:	68fa      	ldr	r2, [r7, #12]
    3760:	683b      	ldr	r3, [r7, #0]
    3762:	429a      	cmp	r2, r3
    3764:	d101      	bne.n	376a <is_list_element+0x1e>
			return true;
    3766:	2301      	movs	r3, #1
    3768:	e006      	b.n	3778 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    376a:	68fb      	ldr	r3, [r7, #12]
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	60fb      	str	r3, [r7, #12]
    3770:	68fb      	ldr	r3, [r7, #12]
    3772:	2b00      	cmp	r3, #0
    3774:	d1f3      	bne.n	375e <is_list_element+0x12>
		}
	}

	return false;
    3776:	2300      	movs	r3, #0
}
    3778:	4618      	mov	r0, r3
    377a:	3714      	adds	r7, #20
    377c:	46bd      	mov	sp, r7
    377e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3782:	4770      	bx	lr

00003784 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3784:	b580      	push	{r7, lr}
    3786:	b082      	sub	sp, #8
    3788:	af00      	add	r7, sp, #0
    378a:	6078      	str	r0, [r7, #4]
    378c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    378e:	6839      	ldr	r1, [r7, #0]
    3790:	6878      	ldr	r0, [r7, #4]
    3792:	4b0f      	ldr	r3, [pc, #60]	; (37d0 <list_insert_as_head+0x4c>)
    3794:	4798      	blx	r3
    3796:	4603      	mov	r3, r0
    3798:	2b00      	cmp	r3, #0
    379a:	bf14      	ite	ne
    379c:	2301      	movne	r3, #1
    379e:	2300      	moveq	r3, #0
    37a0:	b2db      	uxtb	r3, r3
    37a2:	f083 0301 	eor.w	r3, r3, #1
    37a6:	b2db      	uxtb	r3, r3
    37a8:	f003 0301 	and.w	r3, r3, #1
    37ac:	b2db      	uxtb	r3, r3
    37ae:	2239      	movs	r2, #57	; 0x39
    37b0:	4908      	ldr	r1, [pc, #32]	; (37d4 <list_insert_as_head+0x50>)
    37b2:	4618      	mov	r0, r3
    37b4:	4b08      	ldr	r3, [pc, #32]	; (37d8 <list_insert_as_head+0x54>)
    37b6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	681a      	ldr	r2, [r3, #0]
    37bc:	683b      	ldr	r3, [r7, #0]
    37be:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	683a      	ldr	r2, [r7, #0]
    37c4:	601a      	str	r2, [r3, #0]
}
    37c6:	bf00      	nop
    37c8:	3708      	adds	r7, #8
    37ca:	46bd      	mov	sp, r7
    37cc:	bd80      	pop	{r7, pc}
    37ce:	bf00      	nop
    37d0:	0000374d 	.word	0x0000374d
    37d4:	0000ec7c 	.word	0x0000ec7c
    37d8:	00003725 	.word	0x00003725

000037dc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    37dc:	b480      	push	{r7}
    37de:	b083      	sub	sp, #12
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	681a      	ldr	r2, [r3, #0]
    37ea:	683b      	ldr	r3, [r7, #0]
    37ec:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	683a      	ldr	r2, [r7, #0]
    37f2:	601a      	str	r2, [r3, #0]
}
    37f4:	bf00      	nop
    37f6:	370c      	adds	r7, #12
    37f8:	46bd      	mov	sp, r7
    37fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    37fe:	4770      	bx	lr

00003800 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3800:	b580      	push	{r7, lr}
    3802:	b084      	sub	sp, #16
    3804:	af00      	add	r7, sp, #0
    3806:	6078      	str	r0, [r7, #4]
    3808:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3810:	6839      	ldr	r1, [r7, #0]
    3812:	6878      	ldr	r0, [r7, #4]
    3814:	4b16      	ldr	r3, [pc, #88]	; (3870 <list_insert_at_end+0x70>)
    3816:	4798      	blx	r3
    3818:	4603      	mov	r3, r0
    381a:	2b00      	cmp	r3, #0
    381c:	bf14      	ite	ne
    381e:	2301      	movne	r3, #1
    3820:	2300      	moveq	r3, #0
    3822:	b2db      	uxtb	r3, r3
    3824:	f083 0301 	eor.w	r3, r3, #1
    3828:	b2db      	uxtb	r3, r3
    382a:	f003 0301 	and.w	r3, r3, #1
    382e:	b2db      	uxtb	r3, r3
    3830:	224f      	movs	r2, #79	; 0x4f
    3832:	4910      	ldr	r1, [pc, #64]	; (3874 <list_insert_at_end+0x74>)
    3834:	4618      	mov	r0, r3
    3836:	4b10      	ldr	r3, [pc, #64]	; (3878 <list_insert_at_end+0x78>)
    3838:	4798      	blx	r3

	if (!list->head) {
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	2b00      	cmp	r3, #0
    3840:	d109      	bne.n	3856 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	683a      	ldr	r2, [r7, #0]
    3846:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3848:	683b      	ldr	r3, [r7, #0]
    384a:	2200      	movs	r2, #0
    384c:	601a      	str	r2, [r3, #0]
		return;
    384e:	e00c      	b.n	386a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	2b00      	cmp	r3, #0
    385c:	d1f8      	bne.n	3850 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	683a      	ldr	r2, [r7, #0]
    3862:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3864:	683b      	ldr	r3, [r7, #0]
    3866:	2200      	movs	r2, #0
    3868:	601a      	str	r2, [r3, #0]
}
    386a:	3710      	adds	r7, #16
    386c:	46bd      	mov	sp, r7
    386e:	bd80      	pop	{r7, pc}
    3870:	0000374d 	.word	0x0000374d
    3874:	0000ec7c 	.word	0x0000ec7c
    3878:	00003725 	.word	0x00003725

0000387c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    387c:	b480      	push	{r7}
    387e:	b085      	sub	sp, #20
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2b00      	cmp	r3, #0
    388a:	d009      	beq.n	38a0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	681b      	ldr	r3, [r3, #0]
    3890:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	681a      	ldr	r2, [r3, #0]
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    389c:	68fb      	ldr	r3, [r7, #12]
    389e:	e000      	b.n	38a2 <list_remove_head+0x26>
	}

	return NULL;
    38a0:	2300      	movs	r3, #0
}
    38a2:	4618      	mov	r0, r3
    38a4:	3714      	adds	r7, #20
    38a6:	46bd      	mov	sp, r7
    38a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ac:	4770      	bx	lr

000038ae <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    38ae:	b480      	push	{r7}
    38b0:	b085      	sub	sp, #20
    38b2:	af00      	add	r7, sp, #0
    38b4:	6078      	str	r0, [r7, #4]
    38b6:	6039      	str	r1, [r7, #0]
	if (!element) {
    38b8:	683b      	ldr	r3, [r7, #0]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d101      	bne.n	38c2 <list_delete_element+0x14>
		return false;
    38be:	2300      	movs	r3, #0
    38c0:	e024      	b.n	390c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    38c2:	687b      	ldr	r3, [r7, #4]
    38c4:	681a      	ldr	r2, [r3, #0]
    38c6:	683b      	ldr	r3, [r7, #0]
    38c8:	429a      	cmp	r2, r3
    38ca:	d106      	bne.n	38da <list_delete_element+0x2c>
		list->head = list->head->next;
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	681b      	ldr	r3, [r3, #0]
    38d0:	681a      	ldr	r2, [r3, #0]
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	601a      	str	r2, [r3, #0]
		return true;
    38d6:	2301      	movs	r3, #1
    38d8:	e018      	b.n	390c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	681b      	ldr	r3, [r3, #0]
    38de:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    38e0:	e002      	b.n	38e8 <list_delete_element+0x3a>
			it = it->next;
    38e2:	68fb      	ldr	r3, [r7, #12]
    38e4:	681b      	ldr	r3, [r3, #0]
    38e6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    38e8:	68fb      	ldr	r3, [r7, #12]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d004      	beq.n	38f8 <list_delete_element+0x4a>
    38ee:	68fb      	ldr	r3, [r7, #12]
    38f0:	681a      	ldr	r2, [r3, #0]
    38f2:	683b      	ldr	r3, [r7, #0]
    38f4:	429a      	cmp	r2, r3
    38f6:	d1f4      	bne.n	38e2 <list_delete_element+0x34>
		}
		if (it) {
    38f8:	68fb      	ldr	r3, [r7, #12]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d005      	beq.n	390a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    38fe:	683b      	ldr	r3, [r7, #0]
    3900:	681a      	ldr	r2, [r3, #0]
    3902:	68fb      	ldr	r3, [r7, #12]
    3904:	601a      	str	r2, [r3, #0]
			return true;
    3906:	2301      	movs	r3, #1
    3908:	e000      	b.n	390c <list_delete_element+0x5e>
		}
	}

	return false;
    390a:	2300      	movs	r3, #0
}
    390c:	4618      	mov	r0, r3
    390e:	3714      	adds	r7, #20
    3910:	46bd      	mov	sp, r7
    3912:	f85d 7b04 	ldr.w	r7, [sp], #4
    3916:	4770      	bx	lr

00003918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3918:	b480      	push	{r7}
    391a:	b083      	sub	sp, #12
    391c:	af00      	add	r7, sp, #0
    391e:	4603      	mov	r3, r0
    3920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3926:	2b00      	cmp	r3, #0
    3928:	db0b      	blt.n	3942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    392a:	4909      	ldr	r1, [pc, #36]	; (3950 <__NVIC_EnableIRQ+0x38>)
    392c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3930:	095b      	lsrs	r3, r3, #5
    3932:	88fa      	ldrh	r2, [r7, #6]
    3934:	f002 021f 	and.w	r2, r2, #31
    3938:	2001      	movs	r0, #1
    393a:	fa00 f202 	lsl.w	r2, r0, r2
    393e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3942:	bf00      	nop
    3944:	370c      	adds	r7, #12
    3946:	46bd      	mov	sp, r7
    3948:	f85d 7b04 	ldr.w	r7, [sp], #4
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	e000e100 	.word	0xe000e100

00003954 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3954:	b480      	push	{r7}
    3956:	b083      	sub	sp, #12
    3958:	af00      	add	r7, sp, #0
    395a:	4603      	mov	r3, r0
    395c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    395e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3962:	2b00      	cmp	r3, #0
    3964:	db10      	blt.n	3988 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3966:	490b      	ldr	r1, [pc, #44]	; (3994 <__NVIC_DisableIRQ+0x40>)
    3968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    396c:	095b      	lsrs	r3, r3, #5
    396e:	88fa      	ldrh	r2, [r7, #6]
    3970:	f002 021f 	and.w	r2, r2, #31
    3974:	2001      	movs	r0, #1
    3976:	fa00 f202 	lsl.w	r2, r0, r2
    397a:	3320      	adds	r3, #32
    397c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3984:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3988:	bf00      	nop
    398a:	370c      	adds	r7, #12
    398c:	46bd      	mov	sp, r7
    398e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3992:	4770      	bx	lr
    3994:	e000e100 	.word	0xe000e100

00003998 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3998:	b480      	push	{r7}
    399a:	b083      	sub	sp, #12
    399c:	af00      	add	r7, sp, #0
    399e:	4603      	mov	r3, r0
    39a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    39a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    39a6:	2b00      	cmp	r3, #0
    39a8:	db0c      	blt.n	39c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39aa:	4909      	ldr	r1, [pc, #36]	; (39d0 <__NVIC_ClearPendingIRQ+0x38>)
    39ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    39b0:	095b      	lsrs	r3, r3, #5
    39b2:	88fa      	ldrh	r2, [r7, #6]
    39b4:	f002 021f 	and.w	r2, r2, #31
    39b8:	2001      	movs	r0, #1
    39ba:	fa00 f202 	lsl.w	r2, r0, r2
    39be:	3360      	adds	r3, #96	; 0x60
    39c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    39c4:	bf00      	nop
    39c6:	370c      	adds	r7, #12
    39c8:	46bd      	mov	sp, r7
    39ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ce:	4770      	bx	lr
    39d0:	e000e100 	.word	0xe000e100

000039d4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    39d4:	b480      	push	{r7}
    39d6:	b083      	sub	sp, #12
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    39e0:	095b      	lsrs	r3, r3, #5
    39e2:	f003 0301 	and.w	r3, r3, #1
    39e6:	2b00      	cmp	r3, #0
    39e8:	bf14      	ite	ne
    39ea:	2301      	movne	r3, #1
    39ec:	2300      	moveq	r3, #0
    39ee:	b2db      	uxtb	r3, r3
}
    39f0:	4618      	mov	r0, r3
    39f2:	370c      	adds	r7, #12
    39f4:	46bd      	mov	sp, r7
    39f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39fa:	4770      	bx	lr

000039fc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    39fc:	b480      	push	{r7}
    39fe:	b083      	sub	sp, #12
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
    3a04:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	683a      	ldr	r2, [r7, #0]
    3a0a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a0c:	bf00      	nop
    3a0e:	370c      	adds	r7, #12
    3a10:	46bd      	mov	sp, r7
    3a12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a16:	4770      	bx	lr

00003a18 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3a18:	b480      	push	{r7}
    3a1a:	b083      	sub	sp, #12
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	6078      	str	r0, [r7, #4]
    3a20:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	683a      	ldr	r2, [r7, #0]
    3a26:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a28:	bf00      	nop
    3a2a:	370c      	adds	r7, #12
    3a2c:	46bd      	mov	sp, r7
    3a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a32:	4770      	bx	lr

00003a34 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3a34:	b480      	push	{r7}
    3a36:	b083      	sub	sp, #12
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	699b      	ldr	r3, [r3, #24]
    3a40:	f043 0201 	orr.w	r2, r3, #1
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a48:	bf00      	nop
    3a4a:	370c      	adds	r7, #12
    3a4c:	46bd      	mov	sp, r7
    3a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a52:	4770      	bx	lr

00003a54 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3a54:	b480      	push	{r7}
    3a56:	b085      	sub	sp, #20
    3a58:	af00      	add	r7, sp, #0
    3a5a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	699b      	ldr	r3, [r3, #24]
    3a60:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3a62:	68fb      	ldr	r3, [r7, #12]
    3a64:	f003 0301 	and.w	r3, r3, #1
    3a68:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	bf14      	ite	ne
    3a70:	2301      	movne	r3, #1
    3a72:	2300      	moveq	r3, #0
    3a74:	b2db      	uxtb	r3, r3
}
    3a76:	4618      	mov	r0, r3
    3a78:	3714      	adds	r7, #20
    3a7a:	46bd      	mov	sp, r7
    3a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a80:	4770      	bx	lr

00003a82 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3a82:	b480      	push	{r7}
    3a84:	b083      	sub	sp, #12
    3a86:	af00      	add	r7, sp, #0
    3a88:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	699b      	ldr	r3, [r3, #24]
    3a8e:	f023 0201 	bic.w	r2, r3, #1
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a96:	bf00      	nop
    3a98:	370c      	adds	r7, #12
    3a9a:	46bd      	mov	sp, r7
    3a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa0:	4770      	bx	lr

00003aa2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3aa2:	b480      	push	{r7}
    3aa4:	b083      	sub	sp, #12
    3aa6:	af00      	add	r7, sp, #0
    3aa8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	699b      	ldr	r3, [r3, #24]
    3aae:	f043 0202 	orr.w	r2, r3, #2
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ab6:	bf00      	nop
    3ab8:	370c      	adds	r7, #12
    3aba:	46bd      	mov	sp, r7
    3abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac0:	4770      	bx	lr

00003ac2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3ac2:	b480      	push	{r7}
    3ac4:	b083      	sub	sp, #12
    3ac6:	af00      	add	r7, sp, #0
    3ac8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	699b      	ldr	r3, [r3, #24]
    3ace:	f023 0202 	bic.w	r2, r3, #2
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ad6:	bf00      	nop
    3ad8:	370c      	adds	r7, #12
    3ada:	46bd      	mov	sp, r7
    3adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae0:	4770      	bx	lr

00003ae2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3ae2:	b480      	push	{r7}
    3ae4:	b083      	sub	sp, #12
    3ae6:	af00      	add	r7, sp, #0
    3ae8:	6078      	str	r0, [r7, #4]
    3aea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3aec:	687b      	ldr	r3, [r7, #4]
    3aee:	699a      	ldr	r2, [r3, #24]
    3af0:	683b      	ldr	r3, [r7, #0]
    3af2:	431a      	orrs	r2, r3
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3af8:	bf00      	nop
    3afa:	370c      	adds	r7, #12
    3afc:	46bd      	mov	sp, r7
    3afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b02:	4770      	bx	lr

00003b04 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3b04:	b480      	push	{r7}
    3b06:	b083      	sub	sp, #12
    3b08:	af00      	add	r7, sp, #0
    3b0a:	6078      	str	r0, [r7, #4]
    3b0c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	683a      	ldr	r2, [r7, #0]
    3b12:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b14:	bf00      	nop
    3b16:	370c      	adds	r7, #12
    3b18:	46bd      	mov	sp, r7
    3b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b1e:	4770      	bx	lr

00003b20 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3b20:	b480      	push	{r7}
    3b22:	b083      	sub	sp, #12
    3b24:	af00      	add	r7, sp, #0
    3b26:	6078      	str	r0, [r7, #4]
    3b28:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	683a      	ldr	r2, [r7, #0]
    3b2e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b30:	bf00      	nop
    3b32:	370c      	adds	r7, #12
    3b34:	46bd      	mov	sp, r7
    3b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b3a:	4770      	bx	lr

00003b3c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3b3c:	b480      	push	{r7}
    3b3e:	b083      	sub	sp, #12
    3b40:	af00      	add	r7, sp, #0
    3b42:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3b44:	687b      	ldr	r3, [r7, #4]
    3b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3b48:	4618      	mov	r0, r3
    3b4a:	370c      	adds	r7, #12
    3b4c:	46bd      	mov	sp, r7
    3b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b52:	4770      	bx	lr

00003b54 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3b54:	b480      	push	{r7}
    3b56:	b083      	sub	sp, #12
    3b58:	af00      	add	r7, sp, #0
    3b5a:	6078      	str	r0, [r7, #4]
    3b5c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	683a      	ldr	r2, [r7, #0]
    3b62:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b64:	bf00      	nop
    3b66:	370c      	adds	r7, #12
    3b68:	46bd      	mov	sp, r7
    3b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b6e:	4770      	bx	lr

00003b70 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3b70:	b480      	push	{r7}
    3b72:	b083      	sub	sp, #12
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
    3b78:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	683a      	ldr	r2, [r7, #0]
    3b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3b82:	bf00      	nop
    3b84:	370c      	adds	r7, #12
    3b86:	46bd      	mov	sp, r7
    3b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b8c:	4770      	bx	lr

00003b8e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3b8e:	b480      	push	{r7}
    3b90:	b083      	sub	sp, #12
    3b92:	af00      	add	r7, sp, #0
    3b94:	6078      	str	r0, [r7, #4]
    3b96:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3b98:	687b      	ldr	r3, [r7, #4]
    3b9a:	683a      	ldr	r2, [r7, #0]
    3b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ba0:	bf00      	nop
    3ba2:	370c      	adds	r7, #12
    3ba4:	46bd      	mov	sp, r7
    3ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3baa:	4770      	bx	lr

00003bac <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3bac:	b480      	push	{r7}
    3bae:	b083      	sub	sp, #12
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
    3bb4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3bb6:	687b      	ldr	r3, [r7, #4]
    3bb8:	683a      	ldr	r2, [r7, #0]
    3bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bbe:	bf00      	nop
    3bc0:	370c      	adds	r7, #12
    3bc2:	46bd      	mov	sp, r7
    3bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc8:	4770      	bx	lr

00003bca <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3bca:	b480      	push	{r7}
    3bcc:	b083      	sub	sp, #12
    3bce:	af00      	add	r7, sp, #0
    3bd0:	6078      	str	r0, [r7, #4]
    3bd2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3bd4:	687b      	ldr	r3, [r7, #4]
    3bd6:	683a      	ldr	r2, [r7, #0]
    3bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bdc:	bf00      	nop
    3bde:	370c      	adds	r7, #12
    3be0:	46bd      	mov	sp, r7
    3be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be6:	4770      	bx	lr

00003be8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3be8:	b480      	push	{r7}
    3bea:	b083      	sub	sp, #12
    3bec:	af00      	add	r7, sp, #0
    3bee:	6078      	str	r0, [r7, #4]
    3bf0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	683a      	ldr	r2, [r7, #0]
    3bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3bfa:	bf00      	nop
    3bfc:	370c      	adds	r7, #12
    3bfe:	46bd      	mov	sp, r7
    3c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c04:	4770      	bx	lr

00003c06 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3c06:	b480      	push	{r7}
    3c08:	b083      	sub	sp, #12
    3c0a:	af00      	add	r7, sp, #0
    3c0c:	6078      	str	r0, [r7, #4]
    3c0e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	683a      	ldr	r2, [r7, #0]
    3c14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c18:	bf00      	nop
    3c1a:	370c      	adds	r7, #12
    3c1c:	46bd      	mov	sp, r7
    3c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c22:	4770      	bx	lr

00003c24 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3c24:	b480      	push	{r7}
    3c26:	b083      	sub	sp, #12
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
    3c2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	683a      	ldr	r2, [r7, #0]
    3c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c36:	bf00      	nop
    3c38:	370c      	adds	r7, #12
    3c3a:	46bd      	mov	sp, r7
    3c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c40:	4770      	bx	lr

00003c42 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3c42:	b480      	push	{r7}
    3c44:	b083      	sub	sp, #12
    3c46:	af00      	add	r7, sp, #0
    3c48:	6078      	str	r0, [r7, #4]
    3c4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3c4c:	687b      	ldr	r3, [r7, #4]
    3c4e:	683a      	ldr	r2, [r7, #0]
    3c50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c54:	bf00      	nop
    3c56:	370c      	adds	r7, #12
    3c58:	46bd      	mov	sp, r7
    3c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5e:	4770      	bx	lr

00003c60 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3c60:	b480      	push	{r7}
    3c62:	b083      	sub	sp, #12
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
    3c68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	683a      	ldr	r2, [r7, #0]
    3c6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c72:	bf00      	nop
    3c74:	370c      	adds	r7, #12
    3c76:	46bd      	mov	sp, r7
    3c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7c:	4770      	bx	lr
	...

00003c80 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b082      	sub	sp, #8
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
    3c88:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	683a      	ldr	r2, [r7, #0]
    3c8e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3c90:	687b      	ldr	r3, [r7, #4]
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	4618      	mov	r0, r3
    3c96:	4b55      	ldr	r3, [pc, #340]	; (3dec <_can_async_init+0x16c>)
    3c98:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3c9a:	bf00      	nop
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	4618      	mov	r0, r3
    3ca2:	4b53      	ldr	r3, [pc, #332]	; (3df0 <_can_async_init+0x170>)
    3ca4:	4798      	blx	r3
    3ca6:	4603      	mov	r3, r0
    3ca8:	f083 0301 	eor.w	r3, r3, #1
    3cac:	b2db      	uxtb	r3, r3
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d1f4      	bne.n	3c9c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	681b      	ldr	r3, [r3, #0]
    3cb6:	4618      	mov	r0, r3
    3cb8:	4b4e      	ldr	r3, [pc, #312]	; (3df4 <_can_async_init+0x174>)
    3cba:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3cbc:	683b      	ldr	r3, [r7, #0]
    3cbe:	4a4e      	ldr	r2, [pc, #312]	; (3df8 <_can_async_init+0x178>)
    3cc0:	4293      	cmp	r3, r2
    3cc2:	d17a      	bne.n	3dba <_can_async_init+0x13a>
		_can1_dev    = dev;
    3cc4:	4a4d      	ldr	r2, [pc, #308]	; (3dfc <_can_async_init+0x17c>)
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	4a4c      	ldr	r2, [pc, #304]	; (3e00 <_can_async_init+0x180>)
    3cce:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	f44f 7140 	mov.w	r1, #768	; 0x300
    3cd8:	4618      	mov	r0, r3
    3cda:	4b4a      	ldr	r3, [pc, #296]	; (3e04 <_can_async_init+0x184>)
    3cdc:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	2102      	movs	r1, #2
    3ce4:	4618      	mov	r0, r3
    3ce6:	4b48      	ldr	r3, [pc, #288]	; (3e08 <_can_async_init+0x188>)
    3ce8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	4947      	ldr	r1, [pc, #284]	; (3e0c <_can_async_init+0x18c>)
    3cf0:	4618      	mov	r0, r3
    3cf2:	4b47      	ldr	r3, [pc, #284]	; (3e10 <_can_async_init+0x190>)
    3cf4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	4946      	ldr	r1, [pc, #280]	; (3e14 <_can_async_init+0x194>)
    3cfc:	4618      	mov	r0, r3
    3cfe:	4b46      	ldr	r3, [pc, #280]	; (3e18 <_can_async_init+0x198>)
    3d00:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	681a      	ldr	r2, [r3, #0]
    3d06:	4b45      	ldr	r3, [pc, #276]	; (3e1c <_can_async_init+0x19c>)
    3d08:	b29b      	uxth	r3, r3
    3d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3d12:	4619      	mov	r1, r3
    3d14:	4610      	mov	r0, r2
    3d16:	4b42      	ldr	r3, [pc, #264]	; (3e20 <_can_async_init+0x1a0>)
    3d18:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	2107      	movs	r1, #7
    3d20:	4618      	mov	r0, r3
    3d22:	4b40      	ldr	r3, [pc, #256]	; (3e24 <_can_async_init+0x1a4>)
    3d24:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	681b      	ldr	r3, [r3, #0]
    3d2a:	2107      	movs	r1, #7
    3d2c:	4618      	mov	r0, r3
    3d2e:	4b3e      	ldr	r3, [pc, #248]	; (3e28 <_can_async_init+0x1a8>)
    3d30:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3d32:	687b      	ldr	r3, [r7, #4]
    3d34:	681a      	ldr	r2, [r3, #0]
    3d36:	4b3d      	ldr	r3, [pc, #244]	; (3e2c <_can_async_init+0x1ac>)
    3d38:	b29b      	uxth	r3, r3
    3d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3d3e:	4619      	mov	r1, r3
    3d40:	4610      	mov	r0, r2
    3d42:	4b3b      	ldr	r3, [pc, #236]	; (3e30 <_can_async_init+0x1b0>)
    3d44:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	681a      	ldr	r2, [r3, #0]
    3d4a:	4b3a      	ldr	r3, [pc, #232]	; (3e34 <_can_async_init+0x1b4>)
    3d4c:	b29b      	uxth	r3, r3
    3d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d52:	4619      	mov	r1, r3
    3d54:	4610      	mov	r0, r2
    3d56:	4b38      	ldr	r3, [pc, #224]	; (3e38 <_can_async_init+0x1b8>)
    3d58:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	681b      	ldr	r3, [r3, #0]
    3d5e:	2108      	movs	r1, #8
    3d60:	4618      	mov	r0, r3
    3d62:	4b36      	ldr	r3, [pc, #216]	; (3e3c <_can_async_init+0x1bc>)
    3d64:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3d66:	687b      	ldr	r3, [r7, #4]
    3d68:	681a      	ldr	r2, [r3, #0]
    3d6a:	4b35      	ldr	r3, [pc, #212]	; (3e40 <_can_async_init+0x1c0>)
    3d6c:	b29b      	uxth	r3, r3
    3d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3d72:	4619      	mov	r1, r3
    3d74:	4610      	mov	r0, r2
    3d76:	4b33      	ldr	r3, [pc, #204]	; (3e44 <_can_async_init+0x1c4>)
    3d78:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	681a      	ldr	r2, [r3, #0]
    3d7e:	4b32      	ldr	r3, [pc, #200]	; (3e48 <_can_async_init+0x1c8>)
    3d80:	b29b      	uxth	r3, r3
    3d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3d86:	4619      	mov	r1, r3
    3d88:	4610      	mov	r0, r2
    3d8a:	4b30      	ldr	r3, [pc, #192]	; (3e4c <_can_async_init+0x1cc>)
    3d8c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3d96:	4618      	mov	r0, r3
    3d98:	4b2d      	ldr	r3, [pc, #180]	; (3e50 <_can_async_init+0x1d0>)
    3d9a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3d9c:	204f      	movs	r0, #79	; 0x4f
    3d9e:	4b2d      	ldr	r3, [pc, #180]	; (3e54 <_can_async_init+0x1d4>)
    3da0:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3da2:	204f      	movs	r0, #79	; 0x4f
    3da4:	4b2c      	ldr	r3, [pc, #176]	; (3e58 <_can_async_init+0x1d8>)
    3da6:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3da8:	204f      	movs	r0, #79	; 0x4f
    3daa:	4b2c      	ldr	r3, [pc, #176]	; (3e5c <_can_async_init+0x1dc>)
    3dac:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	2101      	movs	r1, #1
    3db4:	4618      	mov	r0, r3
    3db6:	4b2a      	ldr	r3, [pc, #168]	; (3e60 <_can_async_init+0x1e0>)
    3db8:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3dba:	687b      	ldr	r3, [r7, #4]
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	4618      	mov	r0, r3
    3dc0:	4b28      	ldr	r3, [pc, #160]	; (3e64 <_can_async_init+0x1e4>)
    3dc2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	681b      	ldr	r3, [r3, #0]
    3dc8:	4618      	mov	r0, r3
    3dca:	4b27      	ldr	r3, [pc, #156]	; (3e68 <_can_async_init+0x1e8>)
    3dcc:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3dce:	bf00      	nop
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	4618      	mov	r0, r3
    3dd6:	4b06      	ldr	r3, [pc, #24]	; (3df0 <_can_async_init+0x170>)
    3dd8:	4798      	blx	r3
    3dda:	4603      	mov	r3, r0
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d1f7      	bne.n	3dd0 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3de0:	2300      	movs	r3, #0
}
    3de2:	4618      	mov	r0, r3
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop
    3dec:	00003a35 	.word	0x00003a35
    3df0:	00003a55 	.word	0x00003a55
    3df4:	00003aa3 	.word	0x00003aa3
    3df8:	42000400 	.word	0x42000400
    3dfc:	20000800 	.word	0x20000800
    3e00:	20000004 	.word	0x20000004
    3e04:	00003ae3 	.word	0x00003ae3
    3e08:	000039fd 	.word	0x000039fd
    3e0c:	00010c01 	.word	0x00010c01
    3e10:	00003b05 	.word	0x00003b05
    3e14:	00010c10 	.word	0x00010c10
    3e18:	00003a19 	.word	0x00003a19
    3e1c:	20001220 	.word	0x20001220
    3e20:	00003be9 	.word	0x00003be9
    3e24:	00003c07 	.word	0x00003c07
    3e28:	00003c43 	.word	0x00003c43
    3e2c:	200011d8 	.word	0x200011d8
    3e30:	00003c25 	.word	0x00003c25
    3e34:	20000760 	.word	0x20000760
    3e38:	00003c61 	.word	0x00003c61
    3e3c:	00003b71 	.word	0x00003b71
    3e40:	20000770 	.word	0x20000770
    3e44:	00003b8f 	.word	0x00003b8f
    3e48:	200007f0 	.word	0x200007f0
    3e4c:	00003bad 	.word	0x00003bad
    3e50:	00003bcb 	.word	0x00003bcb
    3e54:	00003955 	.word	0x00003955
    3e58:	00003999 	.word	0x00003999
    3e5c:	00003919 	.word	0x00003919
    3e60:	00003b55 	.word	0x00003b55
    3e64:	00003ac3 	.word	0x00003ac3
    3e68:	00003a83 	.word	0x00003a83

00003e6c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3e6c:	b590      	push	{r4, r7, lr}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3e72:	4b2c      	ldr	r3, [pc, #176]	; (3f24 <CAN1_Handler+0xb8>)
    3e74:	681b      	ldr	r3, [r3, #0]
    3e76:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	4618      	mov	r0, r3
    3e7e:	4b2a      	ldr	r3, [pc, #168]	; (3f28 <CAN1_Handler+0xbc>)
    3e80:	4798      	blx	r3
    3e82:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3e84:	683b      	ldr	r3, [r7, #0]
    3e86:	f003 0301 	and.w	r3, r3, #1
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d003      	beq.n	3e96 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	689b      	ldr	r3, [r3, #8]
    3e92:	6878      	ldr	r0, [r7, #4]
    3e94:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3e96:	683b      	ldr	r3, [r7, #0]
    3e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d003      	beq.n	3ea8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	685b      	ldr	r3, [r3, #4]
    3ea4:	6878      	ldr	r0, [r7, #4]
    3ea6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3ea8:	683b      	ldr	r3, [r7, #0]
    3eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d004      	beq.n	3ebc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	68db      	ldr	r3, [r3, #12]
    3eb6:	2103      	movs	r1, #3
    3eb8:	6878      	ldr	r0, [r7, #4]
    3eba:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3ebc:	683b      	ldr	r3, [r7, #0]
    3ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d004      	beq.n	3ed0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3ec6:	687b      	ldr	r3, [r7, #4]
    3ec8:	68db      	ldr	r3, [r3, #12]
    3eca:	2100      	movs	r1, #0
    3ecc:	6878      	ldr	r0, [r7, #4]
    3ece:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3ed0:	683b      	ldr	r3, [r7, #0]
    3ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d00f      	beq.n	3efa <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	68dc      	ldr	r4, [r3, #12]
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	681b      	ldr	r3, [r3, #0]
    3ee2:	4618      	mov	r0, r3
    3ee4:	4b11      	ldr	r3, [pc, #68]	; (3f2c <CAN1_Handler+0xc0>)
    3ee6:	4798      	blx	r3
    3ee8:	4603      	mov	r3, r0
    3eea:	2b00      	cmp	r3, #0
    3eec:	d001      	beq.n	3ef2 <CAN1_Handler+0x86>
    3eee:	2302      	movs	r3, #2
    3ef0:	e000      	b.n	3ef4 <CAN1_Handler+0x88>
    3ef2:	2301      	movs	r3, #1
    3ef4:	4619      	mov	r1, r3
    3ef6:	6878      	ldr	r0, [r7, #4]
    3ef8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3efa:	683b      	ldr	r3, [r7, #0]
    3efc:	f003 0308 	and.w	r3, r3, #8
    3f00:	2b00      	cmp	r3, #0
    3f02:	d004      	beq.n	3f0e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	68db      	ldr	r3, [r3, #12]
    3f08:	2104      	movs	r1, #4
    3f0a:	6878      	ldr	r0, [r7, #4]
    3f0c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	6839      	ldr	r1, [r7, #0]
    3f14:	4618      	mov	r0, r3
    3f16:	4b06      	ldr	r3, [pc, #24]	; (3f30 <CAN1_Handler+0xc4>)
    3f18:	4798      	blx	r3
}
    3f1a:	bf00      	nop
    3f1c:	370c      	adds	r7, #12
    3f1e:	46bd      	mov	sp, r7
    3f20:	bd90      	pop	{r4, r7, pc}
    3f22:	bf00      	nop
    3f24:	20000800 	.word	0x20000800
    3f28:	00003b3d 	.word	0x00003b3d
    3f2c:	000039d5 	.word	0x000039d5
    3f30:	00003b21 	.word	0x00003b21

00003f34 <__NVIC_SetPendingIRQ>:
{
    3f34:	b480      	push	{r7}
    3f36:	b083      	sub	sp, #12
    3f38:	af00      	add	r7, sp, #0
    3f3a:	4603      	mov	r3, r0
    3f3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f42:	2b00      	cmp	r3, #0
    3f44:	db0c      	blt.n	3f60 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f46:	4909      	ldr	r1, [pc, #36]	; (3f6c <__NVIC_SetPendingIRQ+0x38>)
    3f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3f4c:	095b      	lsrs	r3, r3, #5
    3f4e:	88fa      	ldrh	r2, [r7, #6]
    3f50:	f002 021f 	and.w	r2, r2, #31
    3f54:	2001      	movs	r0, #1
    3f56:	fa00 f202 	lsl.w	r2, r0, r2
    3f5a:	3340      	adds	r3, #64	; 0x40
    3f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3f60:	bf00      	nop
    3f62:	370c      	adds	r7, #12
    3f64:	46bd      	mov	sp, r7
    3f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f6a:	4770      	bx	lr
    3f6c:	e000e100 	.word	0xe000e100

00003f70 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b082      	sub	sp, #8
    3f74:	af00      	add	r7, sp, #0
    3f76:	4603      	mov	r3, r0
    3f78:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3f7a:	79fb      	ldrb	r3, [r7, #7]
    3f7c:	b21b      	sxth	r3, r3
    3f7e:	4618      	mov	r0, r3
    3f80:	4b02      	ldr	r3, [pc, #8]	; (3f8c <_irq_set+0x1c>)
    3f82:	4798      	blx	r3
}
    3f84:	bf00      	nop
    3f86:	3708      	adds	r7, #8
    3f88:	46bd      	mov	sp, r7
    3f8a:	bd80      	pop	{r7, pc}
    3f8c:	00003f35 	.word	0x00003f35

00003f90 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3f90:	b480      	push	{r7}
    3f92:	b083      	sub	sp, #12
    3f94:	af00      	add	r7, sp, #0
    3f96:	4603      	mov	r3, r0
    3f98:	6039      	str	r1, [r7, #0]
    3f9a:	80fb      	strh	r3, [r7, #6]
    3f9c:	4613      	mov	r3, r2
    3f9e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3fa0:	797b      	ldrb	r3, [r7, #5]
    3fa2:	3b04      	subs	r3, #4
    3fa4:	2b05      	cmp	r3, #5
    3fa6:	d86b      	bhi.n	4080 <_get_cycles_for_us_internal+0xf0>
    3fa8:	a201      	add	r2, pc, #4	; (adr r2, 3fb0 <_get_cycles_for_us_internal+0x20>)
    3faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3fae:	bf00      	nop
    3fb0:	0000405f 	.word	0x0000405f
    3fb4:	0000403f 	.word	0x0000403f
    3fb8:	00004021 	.word	0x00004021
    3fbc:	00004003 	.word	0x00004003
    3fc0:	00003fe5 	.word	0x00003fe5
    3fc4:	00003fc9 	.word	0x00003fc9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3fc8:	88fb      	ldrh	r3, [r7, #6]
    3fca:	683a      	ldr	r2, [r7, #0]
    3fcc:	4935      	ldr	r1, [pc, #212]	; (40a4 <_get_cycles_for_us_internal+0x114>)
    3fce:	fba1 1202 	umull	r1, r2, r1, r2
    3fd2:	0c92      	lsrs	r2, r2, #18
    3fd4:	fb02 f303 	mul.w	r3, r2, r3
    3fd8:	3302      	adds	r3, #2
    3fda:	4a33      	ldr	r2, [pc, #204]	; (40a8 <_get_cycles_for_us_internal+0x118>)
    3fdc:	fba2 2303 	umull	r2, r3, r2, r3
    3fe0:	085b      	lsrs	r3, r3, #1
    3fe2:	e059      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3fe4:	88fb      	ldrh	r3, [r7, #6]
    3fe6:	683a      	ldr	r2, [r7, #0]
    3fe8:	0952      	lsrs	r2, r2, #5
    3fea:	4930      	ldr	r1, [pc, #192]	; (40ac <_get_cycles_for_us_internal+0x11c>)
    3fec:	fba1 1202 	umull	r1, r2, r1, r2
    3ff0:	09d2      	lsrs	r2, r2, #7
    3ff2:	fb02 f303 	mul.w	r3, r2, r3
    3ff6:	331d      	adds	r3, #29
    3ff8:	4a2d      	ldr	r2, [pc, #180]	; (40b0 <_get_cycles_for_us_internal+0x120>)
    3ffa:	fba2 2303 	umull	r2, r3, r2, r3
    3ffe:	091b      	lsrs	r3, r3, #4
    4000:	e04a      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4002:	88fb      	ldrh	r3, [r7, #6]
    4004:	683a      	ldr	r2, [r7, #0]
    4006:	492b      	ldr	r1, [pc, #172]	; (40b4 <_get_cycles_for_us_internal+0x124>)
    4008:	fba1 1202 	umull	r1, r2, r1, r2
    400c:	0b52      	lsrs	r2, r2, #13
    400e:	fb02 f303 	mul.w	r3, r2, r3
    4012:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4016:	4a28      	ldr	r2, [pc, #160]	; (40b8 <_get_cycles_for_us_internal+0x128>)
    4018:	fba2 2303 	umull	r2, r3, r2, r3
    401c:	095b      	lsrs	r3, r3, #5
    401e:	e03b      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4020:	88fb      	ldrh	r3, [r7, #6]
    4022:	683a      	ldr	r2, [r7, #0]
    4024:	4925      	ldr	r1, [pc, #148]	; (40bc <_get_cycles_for_us_internal+0x12c>)
    4026:	fba1 1202 	umull	r1, r2, r1, r2
    402a:	0992      	lsrs	r2, r2, #6
    402c:	fb02 f303 	mul.w	r3, r2, r3
    4030:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4034:	4a22      	ldr	r2, [pc, #136]	; (40c0 <_get_cycles_for_us_internal+0x130>)
    4036:	fba2 2303 	umull	r2, r3, r2, r3
    403a:	099b      	lsrs	r3, r3, #6
    403c:	e02c      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    403e:	88fb      	ldrh	r3, [r7, #6]
    4040:	683a      	ldr	r2, [r7, #0]
    4042:	4920      	ldr	r1, [pc, #128]	; (40c4 <_get_cycles_for_us_internal+0x134>)
    4044:	fba1 1202 	umull	r1, r2, r1, r2
    4048:	0952      	lsrs	r2, r2, #5
    404a:	fb02 f303 	mul.w	r3, r2, r3
    404e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4052:	332f      	adds	r3, #47	; 0x2f
    4054:	4a1c      	ldr	r2, [pc, #112]	; (40c8 <_get_cycles_for_us_internal+0x138>)
    4056:	fba2 2303 	umull	r2, r3, r2, r3
    405a:	0b5b      	lsrs	r3, r3, #13
    405c:	e01c      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    405e:	88fb      	ldrh	r3, [r7, #6]
    4060:	683a      	ldr	r2, [r7, #0]
    4062:	491a      	ldr	r1, [pc, #104]	; (40cc <_get_cycles_for_us_internal+0x13c>)
    4064:	fba1 1202 	umull	r1, r2, r1, r2
    4068:	08d2      	lsrs	r2, r2, #3
    406a:	fb02 f303 	mul.w	r3, r2, r3
    406e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4072:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4076:	4a16      	ldr	r2, [pc, #88]	; (40d0 <_get_cycles_for_us_internal+0x140>)
    4078:	fba2 2303 	umull	r2, r3, r2, r3
    407c:	0c5b      	lsrs	r3, r3, #17
    407e:	e00b      	b.n	4098 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4080:	88fb      	ldrh	r3, [r7, #6]
    4082:	683a      	ldr	r2, [r7, #0]
    4084:	fb02 f303 	mul.w	r3, r2, r3
    4088:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    408c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4090:	4a10      	ldr	r2, [pc, #64]	; (40d4 <_get_cycles_for_us_internal+0x144>)
    4092:	fba2 2303 	umull	r2, r3, r2, r3
    4096:	0c9b      	lsrs	r3, r3, #18
	}
}
    4098:	4618      	mov	r0, r3
    409a:	370c      	adds	r7, #12
    409c:	46bd      	mov	sp, r7
    409e:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a2:	4770      	bx	lr
    40a4:	431bde83 	.word	0x431bde83
    40a8:	aaaaaaab 	.word	0xaaaaaaab
    40ac:	0a7c5ac5 	.word	0x0a7c5ac5
    40b0:	88888889 	.word	0x88888889
    40b4:	d1b71759 	.word	0xd1b71759
    40b8:	1b4e81b5 	.word	0x1b4e81b5
    40bc:	10624dd3 	.word	0x10624dd3
    40c0:	057619f1 	.word	0x057619f1
    40c4:	51eb851f 	.word	0x51eb851f
    40c8:	45e7b273 	.word	0x45e7b273
    40cc:	cccccccd 	.word	0xcccccccd
    40d0:	6fd91d85 	.word	0x6fd91d85
    40d4:	165e9f81 	.word	0x165e9f81

000040d8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    40d8:	b580      	push	{r7, lr}
    40da:	b082      	sub	sp, #8
    40dc:	af00      	add	r7, sp, #0
    40de:	4603      	mov	r3, r0
    40e0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    40e2:	88fb      	ldrh	r3, [r7, #6]
    40e4:	2209      	movs	r2, #9
    40e6:	4904      	ldr	r1, [pc, #16]	; (40f8 <_get_cycles_for_us+0x20>)
    40e8:	4618      	mov	r0, r3
    40ea:	4b04      	ldr	r3, [pc, #16]	; (40fc <_get_cycles_for_us+0x24>)
    40ec:	4798      	blx	r3
    40ee:	4603      	mov	r3, r0
}
    40f0:	4618      	mov	r0, r3
    40f2:	3708      	adds	r7, #8
    40f4:	46bd      	mov	sp, r7
    40f6:	bd80      	pop	{r7, pc}
    40f8:	07270e00 	.word	0x07270e00
    40fc:	00003f91 	.word	0x00003f91

00004100 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
    4106:	4603      	mov	r3, r0
    4108:	6039      	str	r1, [r7, #0]
    410a:	80fb      	strh	r3, [r7, #6]
    410c:	4613      	mov	r3, r2
    410e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4110:	797b      	ldrb	r3, [r7, #5]
    4112:	3b04      	subs	r3, #4
    4114:	2b05      	cmp	r3, #5
    4116:	d870      	bhi.n	41fa <_get_cycles_for_ms_internal+0xfa>
    4118:	a201      	add	r2, pc, #4	; (adr r2, 4120 <_get_cycles_for_ms_internal+0x20>)
    411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    411e:	bf00      	nop
    4120:	000041dd 	.word	0x000041dd
    4124:	000041c1 	.word	0x000041c1
    4128:	000041a5 	.word	0x000041a5
    412c:	00004181 	.word	0x00004181
    4130:	0000415d 	.word	0x0000415d
    4134:	00004139 	.word	0x00004139
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4138:	88fb      	ldrh	r3, [r7, #6]
    413a:	683a      	ldr	r2, [r7, #0]
    413c:	4937      	ldr	r1, [pc, #220]	; (421c <_get_cycles_for_ms_internal+0x11c>)
    413e:	fba1 1202 	umull	r1, r2, r1, r2
    4142:	0c92      	lsrs	r2, r2, #18
    4144:	fb02 f303 	mul.w	r3, r2, r3
    4148:	3302      	adds	r3, #2
    414a:	4a35      	ldr	r2, [pc, #212]	; (4220 <_get_cycles_for_ms_internal+0x120>)
    414c:	fba2 2303 	umull	r2, r3, r2, r3
    4150:	085b      	lsrs	r3, r3, #1
    4152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4156:	fb02 f303 	mul.w	r3, r2, r3
    415a:	e058      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    415c:	88fb      	ldrh	r3, [r7, #6]
    415e:	683a      	ldr	r2, [r7, #0]
    4160:	0952      	lsrs	r2, r2, #5
    4162:	4930      	ldr	r1, [pc, #192]	; (4224 <_get_cycles_for_ms_internal+0x124>)
    4164:	fba1 1202 	umull	r1, r2, r1, r2
    4168:	09d2      	lsrs	r2, r2, #7
    416a:	fb02 f303 	mul.w	r3, r2, r3
    416e:	3302      	adds	r3, #2
    4170:	4a2b      	ldr	r2, [pc, #172]	; (4220 <_get_cycles_for_ms_internal+0x120>)
    4172:	fba2 2303 	umull	r2, r3, r2, r3
    4176:	085b      	lsrs	r3, r3, #1
    4178:	2264      	movs	r2, #100	; 0x64
    417a:	fb02 f303 	mul.w	r3, r2, r3
    417e:	e046      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4180:	88fb      	ldrh	r3, [r7, #6]
    4182:	683a      	ldr	r2, [r7, #0]
    4184:	4928      	ldr	r1, [pc, #160]	; (4228 <_get_cycles_for_ms_internal+0x128>)
    4186:	fba1 1202 	umull	r1, r2, r1, r2
    418a:	0b52      	lsrs	r2, r2, #13
    418c:	fb02 f303 	mul.w	r3, r2, r3
    4190:	3302      	adds	r3, #2
    4192:	4a23      	ldr	r2, [pc, #140]	; (4220 <_get_cycles_for_ms_internal+0x120>)
    4194:	fba2 2303 	umull	r2, r3, r2, r3
    4198:	085a      	lsrs	r2, r3, #1
    419a:	4613      	mov	r3, r2
    419c:	009b      	lsls	r3, r3, #2
    419e:	4413      	add	r3, r2
    41a0:	005b      	lsls	r3, r3, #1
    41a2:	e034      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    41a4:	88fb      	ldrh	r3, [r7, #6]
    41a6:	683a      	ldr	r2, [r7, #0]
    41a8:	4920      	ldr	r1, [pc, #128]	; (422c <_get_cycles_for_ms_internal+0x12c>)
    41aa:	fba1 1202 	umull	r1, r2, r1, r2
    41ae:	0992      	lsrs	r2, r2, #6
    41b0:	fb02 f303 	mul.w	r3, r2, r3
    41b4:	3302      	adds	r3, #2
    41b6:	4a1a      	ldr	r2, [pc, #104]	; (4220 <_get_cycles_for_ms_internal+0x120>)
    41b8:	fba2 2303 	umull	r2, r3, r2, r3
    41bc:	085b      	lsrs	r3, r3, #1
    41be:	e026      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    41c0:	88fb      	ldrh	r3, [r7, #6]
    41c2:	683a      	ldr	r2, [r7, #0]
    41c4:	491a      	ldr	r1, [pc, #104]	; (4230 <_get_cycles_for_ms_internal+0x130>)
    41c6:	fba1 1202 	umull	r1, r2, r1, r2
    41ca:	0952      	lsrs	r2, r2, #5
    41cc:	fb02 f303 	mul.w	r3, r2, r3
    41d0:	331d      	adds	r3, #29
    41d2:	4a18      	ldr	r2, [pc, #96]	; (4234 <_get_cycles_for_ms_internal+0x134>)
    41d4:	fba2 2303 	umull	r2, r3, r2, r3
    41d8:	091b      	lsrs	r3, r3, #4
    41da:	e018      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    41dc:	88fb      	ldrh	r3, [r7, #6]
    41de:	683a      	ldr	r2, [r7, #0]
    41e0:	4915      	ldr	r1, [pc, #84]	; (4238 <_get_cycles_for_ms_internal+0x138>)
    41e2:	fba1 1202 	umull	r1, r2, r1, r2
    41e6:	08d2      	lsrs	r2, r2, #3
    41e8:	fb02 f303 	mul.w	r3, r2, r3
    41ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
    41f0:	4a12      	ldr	r2, [pc, #72]	; (423c <_get_cycles_for_ms_internal+0x13c>)
    41f2:	fba2 2303 	umull	r2, r3, r2, r3
    41f6:	095b      	lsrs	r3, r3, #5
    41f8:	e009      	b.n	420e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    41fa:	88fb      	ldrh	r3, [r7, #6]
    41fc:	683a      	ldr	r2, [r7, #0]
    41fe:	fb02 f303 	mul.w	r3, r2, r3
    4202:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4206:	4a0e      	ldr	r2, [pc, #56]	; (4240 <_get_cycles_for_ms_internal+0x140>)
    4208:	fba2 2303 	umull	r2, r3, r2, r3
    420c:	099b      	lsrs	r3, r3, #6
	}
}
    420e:	4618      	mov	r0, r3
    4210:	370c      	adds	r7, #12
    4212:	46bd      	mov	sp, r7
    4214:	f85d 7b04 	ldr.w	r7, [sp], #4
    4218:	4770      	bx	lr
    421a:	bf00      	nop
    421c:	431bde83 	.word	0x431bde83
    4220:	aaaaaaab 	.word	0xaaaaaaab
    4224:	0a7c5ac5 	.word	0x0a7c5ac5
    4228:	d1b71759 	.word	0xd1b71759
    422c:	10624dd3 	.word	0x10624dd3
    4230:	51eb851f 	.word	0x51eb851f
    4234:	88888889 	.word	0x88888889
    4238:	cccccccd 	.word	0xcccccccd
    423c:	1b4e81b5 	.word	0x1b4e81b5
    4240:	057619f1 	.word	0x057619f1

00004244 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4244:	b580      	push	{r7, lr}
    4246:	b082      	sub	sp, #8
    4248:	af00      	add	r7, sp, #0
    424a:	4603      	mov	r3, r0
    424c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    424e:	88fb      	ldrh	r3, [r7, #6]
    4250:	2209      	movs	r2, #9
    4252:	4904      	ldr	r1, [pc, #16]	; (4264 <_get_cycles_for_ms+0x20>)
    4254:	4618      	mov	r0, r3
    4256:	4b04      	ldr	r3, [pc, #16]	; (4268 <_get_cycles_for_ms+0x24>)
    4258:	4798      	blx	r3
    425a:	4603      	mov	r3, r0
}
    425c:	4618      	mov	r0, r3
    425e:	3708      	adds	r7, #8
    4260:	46bd      	mov	sp, r7
    4262:	bd80      	pop	{r7, pc}
    4264:	07270e00 	.word	0x07270e00
    4268:	00004101 	.word	0x00004101
    426c:	00000000 	.word	0x00000000

00004270 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4270:	b480      	push	{r7}
    4272:	b083      	sub	sp, #12
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	6039      	str	r1, [r7, #0]
    427a:	bf00      	nop
    427c:	f3af 8000 	nop.w

00004280 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4280:	3901      	subs	r1, #1
    4282:	d8fd      	bhi.n	4280 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4284:	bf00      	nop
    4286:	370c      	adds	r7, #12
    4288:	46bd      	mov	sp, r7
    428a:	f85d 7b04 	ldr.w	r7, [sp], #4
    428e:	4770      	bx	lr

00004290 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4290:	b480      	push	{r7}
    4292:	b083      	sub	sp, #12
    4294:	af00      	add	r7, sp, #0
    4296:	6078      	str	r0, [r7, #4]
    4298:	460b      	mov	r3, r1
    429a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	881b      	ldrh	r3, [r3, #0]
    42a0:	b29a      	uxth	r2, r3
    42a2:	887b      	ldrh	r3, [r7, #2]
    42a4:	021b      	lsls	r3, r3, #8
    42a6:	b29b      	uxth	r3, r3
    42a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    42ac:	b29b      	uxth	r3, r3
    42ae:	4313      	orrs	r3, r2
    42b0:	b29a      	uxth	r2, r3
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    42b6:	bf00      	nop
    42b8:	370c      	adds	r7, #12
    42ba:	46bd      	mov	sp, r7
    42bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42c0:	4770      	bx	lr

000042c2 <hri_port_set_EVCTRL_reg>:
{
    42c2:	b480      	push	{r7}
    42c4:	b085      	sub	sp, #20
    42c6:	af00      	add	r7, sp, #0
    42c8:	60f8      	str	r0, [r7, #12]
    42ca:	460b      	mov	r3, r1
    42cc:	607a      	str	r2, [r7, #4]
    42ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    42d0:	7afb      	ldrb	r3, [r7, #11]
    42d2:	7afa      	ldrb	r2, [r7, #11]
    42d4:	68f9      	ldr	r1, [r7, #12]
    42d6:	01d2      	lsls	r2, r2, #7
    42d8:	440a      	add	r2, r1
    42da:	322c      	adds	r2, #44	; 0x2c
    42dc:	6811      	ldr	r1, [r2, #0]
    42de:	687a      	ldr	r2, [r7, #4]
    42e0:	430a      	orrs	r2, r1
    42e2:	68f9      	ldr	r1, [r7, #12]
    42e4:	01db      	lsls	r3, r3, #7
    42e6:	440b      	add	r3, r1
    42e8:	332c      	adds	r3, #44	; 0x2c
    42ea:	601a      	str	r2, [r3, #0]
}
    42ec:	bf00      	nop
    42ee:	3714      	adds	r7, #20
    42f0:	46bd      	mov	sp, r7
    42f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f6:	4770      	bx	lr

000042f8 <_port_event_init>:

static inline void _port_event_init()
{
    42f8:	b580      	push	{r7, lr}
    42fa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    42fc:	2200      	movs	r2, #0
    42fe:	2100      	movs	r1, #0
    4300:	480a      	ldr	r0, [pc, #40]	; (432c <_port_event_init+0x34>)
    4302:	4b0b      	ldr	r3, [pc, #44]	; (4330 <_port_event_init+0x38>)
    4304:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4306:	2200      	movs	r2, #0
    4308:	2101      	movs	r1, #1
    430a:	4808      	ldr	r0, [pc, #32]	; (432c <_port_event_init+0x34>)
    430c:	4b08      	ldr	r3, [pc, #32]	; (4330 <_port_event_init+0x38>)
    430e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4310:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4314:	2102      	movs	r1, #2
    4316:	4805      	ldr	r0, [pc, #20]	; (432c <_port_event_init+0x34>)
    4318:	4b05      	ldr	r3, [pc, #20]	; (4330 <_port_event_init+0x38>)
    431a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    431c:	2200      	movs	r2, #0
    431e:	2103      	movs	r1, #3
    4320:	4802      	ldr	r0, [pc, #8]	; (432c <_port_event_init+0x34>)
    4322:	4b03      	ldr	r3, [pc, #12]	; (4330 <_port_event_init+0x38>)
    4324:	4798      	blx	r3
}
    4326:	bf00      	nop
    4328:	bd80      	pop	{r7, pc}
    432a:	bf00      	nop
    432c:	41008000 	.word	0x41008000
    4330:	000042c3 	.word	0x000042c3

00004334 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4334:	b580      	push	{r7, lr}
    4336:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4338:	2104      	movs	r1, #4
    433a:	480b      	ldr	r0, [pc, #44]	; (4368 <_init_chip+0x34>)
    433c:	4b0b      	ldr	r3, [pc, #44]	; (436c <_init_chip+0x38>)
    433e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4340:	4b0b      	ldr	r3, [pc, #44]	; (4370 <_init_chip+0x3c>)
    4342:	4798      	blx	r3
	_oscctrl_init_sources();
    4344:	4b0b      	ldr	r3, [pc, #44]	; (4374 <_init_chip+0x40>)
    4346:	4798      	blx	r3
	_mclk_init();
    4348:	4b0b      	ldr	r3, [pc, #44]	; (4378 <_init_chip+0x44>)
    434a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    434c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4350:	4b0a      	ldr	r3, [pc, #40]	; (437c <_init_chip+0x48>)
    4352:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4354:	4b0a      	ldr	r3, [pc, #40]	; (4380 <_init_chip+0x4c>)
    4356:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4358:	f640 30df 	movw	r0, #3039	; 0xbdf
    435c:	4b07      	ldr	r3, [pc, #28]	; (437c <_init_chip+0x48>)
    435e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4360:	4b08      	ldr	r3, [pc, #32]	; (4384 <_init_chip+0x50>)
    4362:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4364:	bf00      	nop
    4366:	bd80      	pop	{r7, pc}
    4368:	41004000 	.word	0x41004000
    436c:	00004291 	.word	0x00004291
    4370:	00004e45 	.word	0x00004e45
    4374:	0000530d 	.word	0x0000530d
    4378:	00004d65 	.word	0x00004d65
    437c:	00004c25 	.word	0x00004c25
    4380:	0000534d 	.word	0x0000534d
    4384:	000042f9 	.word	0x000042f9

00004388 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4388:	b480      	push	{r7}
    438a:	b083      	sub	sp, #12
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
    4390:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	683a      	ldr	r2, [r7, #0]
    4396:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4398:	2300      	movs	r3, #0
}
    439a:	4618      	mov	r0, r3
    439c:	370c      	adds	r7, #12
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr
	...

000043a8 <__NVIC_EnableIRQ>:
{
    43a8:	b480      	push	{r7}
    43aa:	b083      	sub	sp, #12
    43ac:	af00      	add	r7, sp, #0
    43ae:	4603      	mov	r3, r0
    43b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43b6:	2b00      	cmp	r3, #0
    43b8:	db0b      	blt.n	43d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43ba:	4909      	ldr	r1, [pc, #36]	; (43e0 <__NVIC_EnableIRQ+0x38>)
    43bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43c0:	095b      	lsrs	r3, r3, #5
    43c2:	88fa      	ldrh	r2, [r7, #6]
    43c4:	f002 021f 	and.w	r2, r2, #31
    43c8:	2001      	movs	r0, #1
    43ca:	fa00 f202 	lsl.w	r2, r0, r2
    43ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    43d2:	bf00      	nop
    43d4:	370c      	adds	r7, #12
    43d6:	46bd      	mov	sp, r7
    43d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    43dc:	4770      	bx	lr
    43de:	bf00      	nop
    43e0:	e000e100 	.word	0xe000e100

000043e4 <__NVIC_DisableIRQ>:
{
    43e4:	b480      	push	{r7}
    43e6:	b083      	sub	sp, #12
    43e8:	af00      	add	r7, sp, #0
    43ea:	4603      	mov	r3, r0
    43ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43f2:	2b00      	cmp	r3, #0
    43f4:	db10      	blt.n	4418 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43f6:	490b      	ldr	r1, [pc, #44]	; (4424 <__NVIC_DisableIRQ+0x40>)
    43f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43fc:	095b      	lsrs	r3, r3, #5
    43fe:	88fa      	ldrh	r2, [r7, #6]
    4400:	f002 021f 	and.w	r2, r2, #31
    4404:	2001      	movs	r0, #1
    4406:	fa00 f202 	lsl.w	r2, r0, r2
    440a:	3320      	adds	r3, #32
    440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4410:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4414:	f3bf 8f6f 	isb	sy
}
    4418:	bf00      	nop
    441a:	370c      	adds	r7, #12
    441c:	46bd      	mov	sp, r7
    441e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4422:	4770      	bx	lr
    4424:	e000e100 	.word	0xe000e100

00004428 <__NVIC_ClearPendingIRQ>:
{
    4428:	b480      	push	{r7}
    442a:	b083      	sub	sp, #12
    442c:	af00      	add	r7, sp, #0
    442e:	4603      	mov	r3, r0
    4430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4436:	2b00      	cmp	r3, #0
    4438:	db0c      	blt.n	4454 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    443a:	4909      	ldr	r1, [pc, #36]	; (4460 <__NVIC_ClearPendingIRQ+0x38>)
    443c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4440:	095b      	lsrs	r3, r3, #5
    4442:	88fa      	ldrh	r2, [r7, #6]
    4444:	f002 021f 	and.w	r2, r2, #31
    4448:	2001      	movs	r0, #1
    444a:	fa00 f202 	lsl.w	r2, r0, r2
    444e:	3360      	adds	r3, #96	; 0x60
    4450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4454:	bf00      	nop
    4456:	370c      	adds	r7, #12
    4458:	46bd      	mov	sp, r7
    445a:	f85d 7b04 	ldr.w	r7, [sp], #4
    445e:	4770      	bx	lr
    4460:	e000e100 	.word	0xe000e100

00004464 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4464:	b480      	push	{r7}
    4466:	b083      	sub	sp, #12
    4468:	af00      	add	r7, sp, #0
    446a:	6078      	str	r0, [r7, #4]
    446c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    446e:	bf00      	nop
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	685a      	ldr	r2, [r3, #4]
    4474:	683b      	ldr	r3, [r7, #0]
    4476:	4013      	ands	r3, r2
    4478:	2b00      	cmp	r3, #0
    447a:	d1f9      	bne.n	4470 <hri_eic_wait_for_sync+0xc>
	};
}
    447c:	bf00      	nop
    447e:	370c      	adds	r7, #12
    4480:	46bd      	mov	sp, r7
    4482:	f85d 7b04 	ldr.w	r7, [sp], #4
    4486:	4770      	bx	lr

00004488 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4488:	b480      	push	{r7}
    448a:	b083      	sub	sp, #12
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
    4490:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4492:	687b      	ldr	r3, [r7, #4]
    4494:	685a      	ldr	r2, [r3, #4]
    4496:	683b      	ldr	r3, [r7, #0]
    4498:	4013      	ands	r3, r2
    449a:	2b00      	cmp	r3, #0
    449c:	bf14      	ite	ne
    449e:	2301      	movne	r3, #1
    44a0:	2300      	moveq	r3, #0
    44a2:	b2db      	uxtb	r3, r3
}
    44a4:	4618      	mov	r0, r3
    44a6:	370c      	adds	r7, #12
    44a8:	46bd      	mov	sp, r7
    44aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ae:	4770      	bx	lr

000044b0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    44b0:	b480      	push	{r7}
    44b2:	b083      	sub	sp, #12
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    44b8:	687b      	ldr	r3, [r7, #4]
    44ba:	695b      	ldr	r3, [r3, #20]
}
    44bc:	4618      	mov	r0, r3
    44be:	370c      	adds	r7, #12
    44c0:	46bd      	mov	sp, r7
    44c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c6:	4770      	bx	lr

000044c8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    44c8:	b480      	push	{r7}
    44ca:	b083      	sub	sp, #12
    44cc:	af00      	add	r7, sp, #0
    44ce:	6078      	str	r0, [r7, #4]
    44d0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	683a      	ldr	r2, [r7, #0]
    44d6:	615a      	str	r2, [r3, #20]
}
    44d8:	bf00      	nop
    44da:	370c      	adds	r7, #12
    44dc:	46bd      	mov	sp, r7
    44de:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e2:	4770      	bx	lr

000044e4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    44e4:	b480      	push	{r7}
    44e6:	b083      	sub	sp, #12
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
    44ec:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	683a      	ldr	r2, [r7, #0]
    44f2:	611a      	str	r2, [r3, #16]
}
    44f4:	bf00      	nop
    44f6:	370c      	adds	r7, #12
    44f8:	46bd      	mov	sp, r7
    44fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44fe:	4770      	bx	lr

00004500 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4500:	b480      	push	{r7}
    4502:	b083      	sub	sp, #12
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
    4508:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	683a      	ldr	r2, [r7, #0]
    450e:	60da      	str	r2, [r3, #12]
}
    4510:	bf00      	nop
    4512:	370c      	adds	r7, #12
    4514:	46bd      	mov	sp, r7
    4516:	f85d 7b04 	ldr.w	r7, [sp], #4
    451a:	4770      	bx	lr

0000451c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    451c:	b580      	push	{r7, lr}
    451e:	b082      	sub	sp, #8
    4520:	af00      	add	r7, sp, #0
    4522:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	781b      	ldrb	r3, [r3, #0]
    4528:	b2db      	uxtb	r3, r3
    452a:	f043 0302 	orr.w	r3, r3, #2
    452e:	b2da      	uxtb	r2, r3
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4534:	2103      	movs	r1, #3
    4536:	6878      	ldr	r0, [r7, #4]
    4538:	4b02      	ldr	r3, [pc, #8]	; (4544 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    453a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    453c:	bf00      	nop
    453e:	3708      	adds	r7, #8
    4540:	46bd      	mov	sp, r7
    4542:	bd80      	pop	{r7, pc}
    4544:	00004465 	.word	0x00004465

00004548 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4548:	b580      	push	{r7, lr}
    454a:	b082      	sub	sp, #8
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	b2db      	uxtb	r3, r3
    4556:	f023 0302 	bic.w	r3, r3, #2
    455a:	b2da      	uxtb	r2, r3
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4560:	2103      	movs	r1, #3
    4562:	6878      	ldr	r0, [r7, #4]
    4564:	4b02      	ldr	r3, [pc, #8]	; (4570 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4566:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4568:	bf00      	nop
    456a:	3708      	adds	r7, #8
    456c:	46bd      	mov	sp, r7
    456e:	bd80      	pop	{r7, pc}
    4570:	00004465 	.word	0x00004465

00004574 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4574:	b580      	push	{r7, lr}
    4576:	b084      	sub	sp, #16
    4578:	af00      	add	r7, sp, #0
    457a:	6078      	str	r0, [r7, #4]
    457c:	460b      	mov	r3, r1
    457e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4586:	7bfb      	ldrb	r3, [r7, #15]
    4588:	f023 0310 	bic.w	r3, r3, #16
    458c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    458e:	78fb      	ldrb	r3, [r7, #3]
    4590:	011b      	lsls	r3, r3, #4
    4592:	b25a      	sxtb	r2, r3
    4594:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4598:	4313      	orrs	r3, r2
    459a:	b25b      	sxtb	r3, r3
    459c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	7bfa      	ldrb	r2, [r7, #15]
    45a2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    45a4:	2103      	movs	r1, #3
    45a6:	6878      	ldr	r0, [r7, #4]
    45a8:	4b02      	ldr	r3, [pc, #8]	; (45b4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    45aa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    45ac:	bf00      	nop
    45ae:	3710      	adds	r7, #16
    45b0:	46bd      	mov	sp, r7
    45b2:	bd80      	pop	{r7, pc}
    45b4:	00004465 	.word	0x00004465

000045b8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b084      	sub	sp, #16
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	460b      	mov	r3, r1
    45c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    45c4:	2103      	movs	r1, #3
    45c6:	6878      	ldr	r0, [r7, #4]
    45c8:	4b06      	ldr	r3, [pc, #24]	; (45e4 <hri_eic_get_CTRLA_reg+0x2c>)
    45ca:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	781b      	ldrb	r3, [r3, #0]
    45d0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    45d2:	7bfa      	ldrb	r2, [r7, #15]
    45d4:	78fb      	ldrb	r3, [r7, #3]
    45d6:	4013      	ands	r3, r2
    45d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    45da:	7bfb      	ldrb	r3, [r7, #15]
}
    45dc:	4618      	mov	r0, r3
    45de:	3710      	adds	r7, #16
    45e0:	46bd      	mov	sp, r7
    45e2:	bd80      	pop	{r7, pc}
    45e4:	00004465 	.word	0x00004465

000045e8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    45e8:	b580      	push	{r7, lr}
    45ea:	b082      	sub	sp, #8
    45ec:	af00      	add	r7, sp, #0
    45ee:	6078      	str	r0, [r7, #4]
    45f0:	460b      	mov	r3, r1
    45f2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	78fa      	ldrb	r2, [r7, #3]
    45f8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    45fa:	2103      	movs	r1, #3
    45fc:	6878      	ldr	r0, [r7, #4]
    45fe:	4b03      	ldr	r3, [pc, #12]	; (460c <hri_eic_write_CTRLA_reg+0x24>)
    4600:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4602:	bf00      	nop
    4604:	3708      	adds	r7, #8
    4606:	46bd      	mov	sp, r7
    4608:	bd80      	pop	{r7, pc}
    460a:	bf00      	nop
    460c:	00004465 	.word	0x00004465

00004610 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4610:	b480      	push	{r7}
    4612:	b083      	sub	sp, #12
    4614:	af00      	add	r7, sp, #0
    4616:	6078      	str	r0, [r7, #4]
    4618:	460b      	mov	r3, r1
    461a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	78fa      	ldrb	r2, [r7, #3]
    4620:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4622:	bf00      	nop
    4624:	370c      	adds	r7, #12
    4626:	46bd      	mov	sp, r7
    4628:	f85d 7b04 	ldr.w	r7, [sp], #4
    462c:	4770      	bx	lr

0000462e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    462e:	b480      	push	{r7}
    4630:	b083      	sub	sp, #12
    4632:	af00      	add	r7, sp, #0
    4634:	6078      	str	r0, [r7, #4]
    4636:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	683a      	ldr	r2, [r7, #0]
    463c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    463e:	bf00      	nop
    4640:	370c      	adds	r7, #12
    4642:	46bd      	mov	sp, r7
    4644:	f85d 7b04 	ldr.w	r7, [sp], #4
    4648:	4770      	bx	lr

0000464a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    464a:	b480      	push	{r7}
    464c:	b083      	sub	sp, #12
    464e:	af00      	add	r7, sp, #0
    4650:	6078      	str	r0, [r7, #4]
    4652:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	683a      	ldr	r2, [r7, #0]
    4658:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    465a:	bf00      	nop
    465c:	370c      	adds	r7, #12
    465e:	46bd      	mov	sp, r7
    4660:	f85d 7b04 	ldr.w	r7, [sp], #4
    4664:	4770      	bx	lr

00004666 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4666:	b480      	push	{r7}
    4668:	b085      	sub	sp, #20
    466a:	af00      	add	r7, sp, #0
    466c:	60f8      	str	r0, [r7, #12]
    466e:	460b      	mov	r3, r1
    4670:	607a      	str	r2, [r7, #4]
    4672:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4674:	7afb      	ldrb	r3, [r7, #11]
    4676:	68fa      	ldr	r2, [r7, #12]
    4678:	3306      	adds	r3, #6
    467a:	009b      	lsls	r3, r3, #2
    467c:	4413      	add	r3, r2
    467e:	687a      	ldr	r2, [r7, #4]
    4680:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4682:	bf00      	nop
    4684:	3714      	adds	r7, #20
    4686:	46bd      	mov	sp, r7
    4688:	f85d 7b04 	ldr.w	r7, [sp], #4
    468c:	4770      	bx	lr

0000468e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    468e:	b480      	push	{r7}
    4690:	b083      	sub	sp, #12
    4692:	af00      	add	r7, sp, #0
    4694:	6078      	str	r0, [r7, #4]
    4696:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	683a      	ldr	r2, [r7, #0]
    469c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    469e:	bf00      	nop
    46a0:	370c      	adds	r7, #12
    46a2:	46bd      	mov	sp, r7
    46a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46a8:	4770      	bx	lr

000046aa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    46aa:	b480      	push	{r7}
    46ac:	b083      	sub	sp, #12
    46ae:	af00      	add	r7, sp, #0
    46b0:	6078      	str	r0, [r7, #4]
    46b2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	683a      	ldr	r2, [r7, #0]
    46b8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    46ba:	bf00      	nop
    46bc:	370c      	adds	r7, #12
    46be:	46bd      	mov	sp, r7
    46c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c4:	4770      	bx	lr
	...

000046c8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    46c8:	b580      	push	{r7, lr}
    46ca:	b082      	sub	sp, #8
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    46d0:	2101      	movs	r1, #1
    46d2:	484f      	ldr	r0, [pc, #316]	; (4810 <_ext_irq_init+0x148>)
    46d4:	4b4f      	ldr	r3, [pc, #316]	; (4814 <_ext_irq_init+0x14c>)
    46d6:	4798      	blx	r3
    46d8:	4603      	mov	r3, r0
    46da:	f083 0301 	eor.w	r3, r3, #1
    46de:	b2db      	uxtb	r3, r3
    46e0:	2b00      	cmp	r3, #0
    46e2:	d011      	beq.n	4708 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    46e4:	2102      	movs	r1, #2
    46e6:	484a      	ldr	r0, [pc, #296]	; (4810 <_ext_irq_init+0x148>)
    46e8:	4b4b      	ldr	r3, [pc, #300]	; (4818 <_ext_irq_init+0x150>)
    46ea:	4798      	blx	r3
    46ec:	4603      	mov	r3, r0
    46ee:	2b00      	cmp	r3, #0
    46f0:	d006      	beq.n	4700 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    46f2:	4847      	ldr	r0, [pc, #284]	; (4810 <_ext_irq_init+0x148>)
    46f4:	4b49      	ldr	r3, [pc, #292]	; (481c <_ext_irq_init+0x154>)
    46f6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    46f8:	2102      	movs	r1, #2
    46fa:	4845      	ldr	r0, [pc, #276]	; (4810 <_ext_irq_init+0x148>)
    46fc:	4b48      	ldr	r3, [pc, #288]	; (4820 <_ext_irq_init+0x158>)
    46fe:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4700:	2101      	movs	r1, #1
    4702:	4843      	ldr	r0, [pc, #268]	; (4810 <_ext_irq_init+0x148>)
    4704:	4b47      	ldr	r3, [pc, #284]	; (4824 <_ext_irq_init+0x15c>)
    4706:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4708:	2101      	movs	r1, #1
    470a:	4841      	ldr	r0, [pc, #260]	; (4810 <_ext_irq_init+0x148>)
    470c:	4b44      	ldr	r3, [pc, #272]	; (4820 <_ext_irq_init+0x158>)
    470e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4710:	2100      	movs	r1, #0
    4712:	483f      	ldr	r0, [pc, #252]	; (4810 <_ext_irq_init+0x148>)
    4714:	4b44      	ldr	r3, [pc, #272]	; (4828 <_ext_irq_init+0x160>)
    4716:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4718:	2100      	movs	r1, #0
    471a:	483d      	ldr	r0, [pc, #244]	; (4810 <_ext_irq_init+0x148>)
    471c:	4b43      	ldr	r3, [pc, #268]	; (482c <_ext_irq_init+0x164>)
    471e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4720:	2100      	movs	r1, #0
    4722:	483b      	ldr	r0, [pc, #236]	; (4810 <_ext_irq_init+0x148>)
    4724:	4b42      	ldr	r3, [pc, #264]	; (4830 <_ext_irq_init+0x168>)
    4726:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4728:	f240 31bb 	movw	r1, #955	; 0x3bb
    472c:	4838      	ldr	r0, [pc, #224]	; (4810 <_ext_irq_init+0x148>)
    472e:	4b41      	ldr	r3, [pc, #260]	; (4834 <_ext_irq_init+0x16c>)
    4730:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4732:	f240 313b 	movw	r1, #827	; 0x33b
    4736:	4836      	ldr	r0, [pc, #216]	; (4810 <_ext_irq_init+0x148>)
    4738:	4b3f      	ldr	r3, [pc, #252]	; (4838 <_ext_irq_init+0x170>)
    473a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    473c:	2100      	movs	r1, #0
    473e:	4834      	ldr	r0, [pc, #208]	; (4810 <_ext_irq_init+0x148>)
    4740:	4b3e      	ldr	r3, [pc, #248]	; (483c <_ext_irq_init+0x174>)
    4742:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4744:	4a3e      	ldr	r2, [pc, #248]	; (4840 <_ext_irq_init+0x178>)
    4746:	2100      	movs	r1, #0
    4748:	4831      	ldr	r0, [pc, #196]	; (4810 <_ext_irq_init+0x148>)
    474a:	4b3e      	ldr	r3, [pc, #248]	; (4844 <_ext_irq_init+0x17c>)
    474c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    474e:	2211      	movs	r2, #17
    4750:	2101      	movs	r1, #1
    4752:	482f      	ldr	r0, [pc, #188]	; (4810 <_ext_irq_init+0x148>)
    4754:	4b3b      	ldr	r3, [pc, #236]	; (4844 <_ext_irq_init+0x17c>)
    4756:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4758:	482d      	ldr	r0, [pc, #180]	; (4810 <_ext_irq_init+0x148>)
    475a:	4b3b      	ldr	r3, [pc, #236]	; (4848 <_ext_irq_init+0x180>)
    475c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    475e:	200c      	movs	r0, #12
    4760:	4b3a      	ldr	r3, [pc, #232]	; (484c <_ext_irq_init+0x184>)
    4762:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4764:	200c      	movs	r0, #12
    4766:	4b3a      	ldr	r3, [pc, #232]	; (4850 <_ext_irq_init+0x188>)
    4768:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    476a:	200c      	movs	r0, #12
    476c:	4b39      	ldr	r3, [pc, #228]	; (4854 <_ext_irq_init+0x18c>)
    476e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4770:	200d      	movs	r0, #13
    4772:	4b36      	ldr	r3, [pc, #216]	; (484c <_ext_irq_init+0x184>)
    4774:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4776:	200d      	movs	r0, #13
    4778:	4b35      	ldr	r3, [pc, #212]	; (4850 <_ext_irq_init+0x188>)
    477a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    477c:	200d      	movs	r0, #13
    477e:	4b35      	ldr	r3, [pc, #212]	; (4854 <_ext_irq_init+0x18c>)
    4780:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4782:	200f      	movs	r0, #15
    4784:	4b31      	ldr	r3, [pc, #196]	; (484c <_ext_irq_init+0x184>)
    4786:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4788:	200f      	movs	r0, #15
    478a:	4b31      	ldr	r3, [pc, #196]	; (4850 <_ext_irq_init+0x188>)
    478c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    478e:	200f      	movs	r0, #15
    4790:	4b30      	ldr	r3, [pc, #192]	; (4854 <_ext_irq_init+0x18c>)
    4792:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4794:	2010      	movs	r0, #16
    4796:	4b2d      	ldr	r3, [pc, #180]	; (484c <_ext_irq_init+0x184>)
    4798:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    479a:	2010      	movs	r0, #16
    479c:	4b2c      	ldr	r3, [pc, #176]	; (4850 <_ext_irq_init+0x188>)
    479e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    47a0:	2010      	movs	r0, #16
    47a2:	4b2c      	ldr	r3, [pc, #176]	; (4854 <_ext_irq_init+0x18c>)
    47a4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    47a6:	2011      	movs	r0, #17
    47a8:	4b28      	ldr	r3, [pc, #160]	; (484c <_ext_irq_init+0x184>)
    47aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    47ac:	2011      	movs	r0, #17
    47ae:	4b28      	ldr	r3, [pc, #160]	; (4850 <_ext_irq_init+0x188>)
    47b0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    47b2:	2011      	movs	r0, #17
    47b4:	4b27      	ldr	r3, [pc, #156]	; (4854 <_ext_irq_init+0x18c>)
    47b6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    47b8:	2012      	movs	r0, #18
    47ba:	4b24      	ldr	r3, [pc, #144]	; (484c <_ext_irq_init+0x184>)
    47bc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    47be:	2012      	movs	r0, #18
    47c0:	4b23      	ldr	r3, [pc, #140]	; (4850 <_ext_irq_init+0x188>)
    47c2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    47c4:	2012      	movs	r0, #18
    47c6:	4b23      	ldr	r3, [pc, #140]	; (4854 <_ext_irq_init+0x18c>)
    47c8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    47ca:	2013      	movs	r0, #19
    47cc:	4b1f      	ldr	r3, [pc, #124]	; (484c <_ext_irq_init+0x184>)
    47ce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    47d0:	2013      	movs	r0, #19
    47d2:	4b1f      	ldr	r3, [pc, #124]	; (4850 <_ext_irq_init+0x188>)
    47d4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    47d6:	2013      	movs	r0, #19
    47d8:	4b1e      	ldr	r3, [pc, #120]	; (4854 <_ext_irq_init+0x18c>)
    47da:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    47dc:	2014      	movs	r0, #20
    47de:	4b1b      	ldr	r3, [pc, #108]	; (484c <_ext_irq_init+0x184>)
    47e0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    47e2:	2014      	movs	r0, #20
    47e4:	4b1a      	ldr	r3, [pc, #104]	; (4850 <_ext_irq_init+0x188>)
    47e6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    47e8:	2014      	movs	r0, #20
    47ea:	4b1a      	ldr	r3, [pc, #104]	; (4854 <_ext_irq_init+0x18c>)
    47ec:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    47ee:	2015      	movs	r0, #21
    47f0:	4b16      	ldr	r3, [pc, #88]	; (484c <_ext_irq_init+0x184>)
    47f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    47f4:	2015      	movs	r0, #21
    47f6:	4b16      	ldr	r3, [pc, #88]	; (4850 <_ext_irq_init+0x188>)
    47f8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    47fa:	2015      	movs	r0, #21
    47fc:	4b15      	ldr	r3, [pc, #84]	; (4854 <_ext_irq_init+0x18c>)
    47fe:	4798      	blx	r3

	callback = cb;
    4800:	4a15      	ldr	r2, [pc, #84]	; (4858 <_ext_irq_init+0x190>)
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4806:	2300      	movs	r3, #0
}
    4808:	4618      	mov	r0, r3
    480a:	3708      	adds	r7, #8
    480c:	46bd      	mov	sp, r7
    480e:	bd80      	pop	{r7, pc}
    4810:	40002800 	.word	0x40002800
    4814:	00004489 	.word	0x00004489
    4818:	000045b9 	.word	0x000045b9
    481c:	00004549 	.word	0x00004549
    4820:	00004465 	.word	0x00004465
    4824:	000045e9 	.word	0x000045e9
    4828:	00004575 	.word	0x00004575
    482c:	00004611 	.word	0x00004611
    4830:	0000462f 	.word	0x0000462f
    4834:	0000464b 	.word	0x0000464b
    4838:	0000468f 	.word	0x0000468f
    483c:	000046ab 	.word	0x000046ab
    4840:	90999013 	.word	0x90999013
    4844:	00004667 	.word	0x00004667
    4848:	0000451d 	.word	0x0000451d
    484c:	000043e5 	.word	0x000043e5
    4850:	00004429 	.word	0x00004429
    4854:	000043a9 	.word	0x000043a9
    4858:	20000804 	.word	0x20000804

0000485c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    485c:	b580      	push	{r7, lr}
    485e:	b084      	sub	sp, #16
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
    4864:	460b      	mov	r3, r1
    4866:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4868:	23ff      	movs	r3, #255	; 0xff
    486a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    486c:	2300      	movs	r3, #0
    486e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4870:	e010      	b.n	4894 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4872:	7bbb      	ldrb	r3, [r7, #14]
    4874:	4a1c      	ldr	r2, [pc, #112]	; (48e8 <_ext_irq_enable+0x8c>)
    4876:	00db      	lsls	r3, r3, #3
    4878:	4413      	add	r3, r2
    487a:	685a      	ldr	r2, [r3, #4]
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	429a      	cmp	r2, r3
    4880:	d105      	bne.n	488e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4882:	7bbb      	ldrb	r3, [r7, #14]
    4884:	4a18      	ldr	r2, [pc, #96]	; (48e8 <_ext_irq_enable+0x8c>)
    4886:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    488a:	73fb      	strb	r3, [r7, #15]
			break;
    488c:	e005      	b.n	489a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    488e:	7bbb      	ldrb	r3, [r7, #14]
    4890:	3301      	adds	r3, #1
    4892:	73bb      	strb	r3, [r7, #14]
    4894:	7bbb      	ldrb	r3, [r7, #14]
    4896:	2b08      	cmp	r3, #8
    4898:	d9eb      	bls.n	4872 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    489a:	7bfb      	ldrb	r3, [r7, #15]
    489c:	2bff      	cmp	r3, #255	; 0xff
    489e:	d102      	bne.n	48a6 <_ext_irq_enable+0x4a>
		return -1;
    48a0:	f04f 33ff 	mov.w	r3, #4294967295
    48a4:	e01c      	b.n	48e0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    48a6:	78fb      	ldrb	r3, [r7, #3]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d008      	beq.n	48be <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    48ac:	7bfb      	ldrb	r3, [r7, #15]
    48ae:	2201      	movs	r2, #1
    48b0:	fa02 f303 	lsl.w	r3, r2, r3
    48b4:	4619      	mov	r1, r3
    48b6:	480d      	ldr	r0, [pc, #52]	; (48ec <_ext_irq_enable+0x90>)
    48b8:	4b0d      	ldr	r3, [pc, #52]	; (48f0 <_ext_irq_enable+0x94>)
    48ba:	4798      	blx	r3
    48bc:	e00f      	b.n	48de <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    48be:	7bfb      	ldrb	r3, [r7, #15]
    48c0:	2201      	movs	r2, #1
    48c2:	fa02 f303 	lsl.w	r3, r2, r3
    48c6:	4619      	mov	r1, r3
    48c8:	4808      	ldr	r0, [pc, #32]	; (48ec <_ext_irq_enable+0x90>)
    48ca:	4b0a      	ldr	r3, [pc, #40]	; (48f4 <_ext_irq_enable+0x98>)
    48cc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    48ce:	7bfb      	ldrb	r3, [r7, #15]
    48d0:	2201      	movs	r2, #1
    48d2:	fa02 f303 	lsl.w	r3, r2, r3
    48d6:	4619      	mov	r1, r3
    48d8:	4804      	ldr	r0, [pc, #16]	; (48ec <_ext_irq_enable+0x90>)
    48da:	4b07      	ldr	r3, [pc, #28]	; (48f8 <_ext_irq_enable+0x9c>)
    48dc:	4798      	blx	r3
	}

	return ERR_NONE;
    48de:	2300      	movs	r3, #0
}
    48e0:	4618      	mov	r0, r3
    48e2:	3710      	adds	r7, #16
    48e4:	46bd      	mov	sp, r7
    48e6:	bd80      	pop	{r7, pc}
    48e8:	0000ec9c 	.word	0x0000ec9c
    48ec:	40002800 	.word	0x40002800
    48f0:	000044e5 	.word	0x000044e5
    48f4:	00004501 	.word	0x00004501
    48f8:	000044c9 	.word	0x000044c9

000048fc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    48fc:	b580      	push	{r7, lr}
    48fe:	b084      	sub	sp, #16
    4900:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4902:	4841      	ldr	r0, [pc, #260]	; (4a08 <_ext_irq_handler+0x10c>)
    4904:	4b41      	ldr	r3, [pc, #260]	; (4a0c <_ext_irq_handler+0x110>)
    4906:	4798      	blx	r3
    4908:	4603      	mov	r3, r0
    490a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    490c:	f04f 33ff 	mov.w	r3, #4294967295
    4910:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4912:	683b      	ldr	r3, [r7, #0]
    4914:	4619      	mov	r1, r3
    4916:	483c      	ldr	r0, [pc, #240]	; (4a08 <_ext_irq_handler+0x10c>)
    4918:	4b3d      	ldr	r3, [pc, #244]	; (4a10 <_ext_irq_handler+0x114>)
    491a:	4798      	blx	r3

	ASSERT(callback);
    491c:	4b3d      	ldr	r3, [pc, #244]	; (4a14 <_ext_irq_handler+0x118>)
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	2b00      	cmp	r3, #0
    4922:	bf14      	ite	ne
    4924:	2301      	movne	r3, #1
    4926:	2300      	moveq	r3, #0
    4928:	b2db      	uxtb	r3, r3
    492a:	f44f 7284 	mov.w	r2, #264	; 0x108
    492e:	493a      	ldr	r1, [pc, #232]	; (4a18 <_ext_irq_handler+0x11c>)
    4930:	4618      	mov	r0, r3
    4932:	4b3a      	ldr	r3, [pc, #232]	; (4a1c <_ext_irq_handler+0x120>)
    4934:	4798      	blx	r3

	while (flags) {
    4936:	e060      	b.n	49fa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4938:	683b      	ldr	r3, [r7, #0]
    493a:	4618      	mov	r0, r3
    493c:	4b38      	ldr	r3, [pc, #224]	; (4a20 <_ext_irq_handler+0x124>)
    493e:	4798      	blx	r3
    4940:	4603      	mov	r3, r0
    4942:	b2db      	uxtb	r3, r3
    4944:	3b01      	subs	r3, #1
    4946:	b2db      	uxtb	r3, r3
    4948:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    494a:	e047      	b.n	49dc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    494c:	2300      	movs	r3, #0
    494e:	71fb      	strb	r3, [r7, #7]
    4950:	2309      	movs	r3, #9
    4952:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4954:	e024      	b.n	49a0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4956:	79ba      	ldrb	r2, [r7, #6]
    4958:	79fb      	ldrb	r3, [r7, #7]
    495a:	4413      	add	r3, r2
    495c:	105b      	asrs	r3, r3, #1
    495e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4960:	797b      	ldrb	r3, [r7, #5]
    4962:	4a30      	ldr	r2, [pc, #192]	; (4a24 <_ext_irq_handler+0x128>)
    4964:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4968:	461a      	mov	r2, r3
    496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    496e:	429a      	cmp	r2, r3
    4970:	d106      	bne.n	4980 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4972:	797b      	ldrb	r3, [r7, #5]
    4974:	4a2b      	ldr	r2, [pc, #172]	; (4a24 <_ext_irq_handler+0x128>)
    4976:	00db      	lsls	r3, r3, #3
    4978:	4413      	add	r3, r2
    497a:	685b      	ldr	r3, [r3, #4]
    497c:	60bb      	str	r3, [r7, #8]
					break;
    497e:	e013      	b.n	49a8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4980:	797b      	ldrb	r3, [r7, #5]
    4982:	4a28      	ldr	r2, [pc, #160]	; (4a24 <_ext_irq_handler+0x128>)
    4984:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4988:	461a      	mov	r2, r3
    498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    498e:	429a      	cmp	r2, r3
    4990:	da03      	bge.n	499a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4992:	797b      	ldrb	r3, [r7, #5]
    4994:	3301      	adds	r3, #1
    4996:	71fb      	strb	r3, [r7, #7]
    4998:	e002      	b.n	49a0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    499a:	797b      	ldrb	r3, [r7, #5]
    499c:	3b01      	subs	r3, #1
    499e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    49a0:	79ba      	ldrb	r2, [r7, #6]
    49a2:	79fb      	ldrb	r3, [r7, #7]
    49a4:	429a      	cmp	r2, r3
    49a6:	d2d6      	bcs.n	4956 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    49a8:	68bb      	ldr	r3, [r7, #8]
    49aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    49ae:	d003      	beq.n	49b8 <_ext_irq_handler+0xbc>
				callback(pin);
    49b0:	4b18      	ldr	r3, [pc, #96]	; (4a14 <_ext_irq_handler+0x118>)
    49b2:	681b      	ldr	r3, [r3, #0]
    49b4:	68b8      	ldr	r0, [r7, #8]
    49b6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    49b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    49bc:	2201      	movs	r2, #1
    49be:	fa02 f303 	lsl.w	r3, r2, r3
    49c2:	43da      	mvns	r2, r3
    49c4:	683b      	ldr	r3, [r7, #0]
    49c6:	4013      	ands	r3, r2
    49c8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    49ca:	683b      	ldr	r3, [r7, #0]
    49cc:	4618      	mov	r0, r3
    49ce:	4b14      	ldr	r3, [pc, #80]	; (4a20 <_ext_irq_handler+0x124>)
    49d0:	4798      	blx	r3
    49d2:	4603      	mov	r3, r0
    49d4:	b2db      	uxtb	r3, r3
    49d6:	3b01      	subs	r3, #1
    49d8:	b2db      	uxtb	r3, r3
    49da:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    49dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    49e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    49e4:	d1b2      	bne.n	494c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    49e6:	4808      	ldr	r0, [pc, #32]	; (4a08 <_ext_irq_handler+0x10c>)
    49e8:	4b08      	ldr	r3, [pc, #32]	; (4a0c <_ext_irq_handler+0x110>)
    49ea:	4798      	blx	r3
    49ec:	4603      	mov	r3, r0
    49ee:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    49f0:	683b      	ldr	r3, [r7, #0]
    49f2:	4619      	mov	r1, r3
    49f4:	4804      	ldr	r0, [pc, #16]	; (4a08 <_ext_irq_handler+0x10c>)
    49f6:	4b06      	ldr	r3, [pc, #24]	; (4a10 <_ext_irq_handler+0x114>)
    49f8:	4798      	blx	r3
	while (flags) {
    49fa:	683b      	ldr	r3, [r7, #0]
    49fc:	2b00      	cmp	r3, #0
    49fe:	d19b      	bne.n	4938 <_ext_irq_handler+0x3c>
	}
}
    4a00:	bf00      	nop
    4a02:	3710      	adds	r7, #16
    4a04:	46bd      	mov	sp, r7
    4a06:	bd80      	pop	{r7, pc}
    4a08:	40002800 	.word	0x40002800
    4a0c:	000044b1 	.word	0x000044b1
    4a10:	000044c9 	.word	0x000044c9
    4a14:	20000804 	.word	0x20000804
    4a18:	0000ece4 	.word	0x0000ece4
    4a1c:	00003725 	.word	0x00003725
    4a20:	0000e6c9 	.word	0x0000e6c9
    4a24:	0000ec9c 	.word	0x0000ec9c

00004a28 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a2c:	4b01      	ldr	r3, [pc, #4]	; (4a34 <EIC_0_Handler+0xc>)
    4a2e:	4798      	blx	r3
} /**
    4a30:	bf00      	nop
    4a32:	bd80      	pop	{r7, pc}
    4a34:	000048fd 	.word	0x000048fd

00004a38 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a3c:	4b01      	ldr	r3, [pc, #4]	; (4a44 <EIC_1_Handler+0xc>)
    4a3e:	4798      	blx	r3
} /**
    4a40:	bf00      	nop
    4a42:	bd80      	pop	{r7, pc}
    4a44:	000048fd 	.word	0x000048fd

00004a48 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a4c:	4b01      	ldr	r3, [pc, #4]	; (4a54 <EIC_3_Handler+0xc>)
    4a4e:	4798      	blx	r3
} /**
    4a50:	bf00      	nop
    4a52:	bd80      	pop	{r7, pc}
    4a54:	000048fd 	.word	0x000048fd

00004a58 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4a58:	b580      	push	{r7, lr}
    4a5a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a5c:	4b01      	ldr	r3, [pc, #4]	; (4a64 <EIC_4_Handler+0xc>)
    4a5e:	4798      	blx	r3
} /**
    4a60:	bf00      	nop
    4a62:	bd80      	pop	{r7, pc}
    4a64:	000048fd 	.word	0x000048fd

00004a68 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4a68:	b580      	push	{r7, lr}
    4a6a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a6c:	4b01      	ldr	r3, [pc, #4]	; (4a74 <EIC_5_Handler+0xc>)
    4a6e:	4798      	blx	r3
} /**
    4a70:	bf00      	nop
    4a72:	bd80      	pop	{r7, pc}
    4a74:	000048fd 	.word	0x000048fd

00004a78 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4a78:	b580      	push	{r7, lr}
    4a7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a7c:	4b01      	ldr	r3, [pc, #4]	; (4a84 <EIC_6_Handler+0xc>)
    4a7e:	4798      	blx	r3
} /**
    4a80:	bf00      	nop
    4a82:	bd80      	pop	{r7, pc}
    4a84:	000048fd 	.word	0x000048fd

00004a88 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a8c:	4b01      	ldr	r3, [pc, #4]	; (4a94 <EIC_7_Handler+0xc>)
    4a8e:	4798      	blx	r3
} /**
    4a90:	bf00      	nop
    4a92:	bd80      	pop	{r7, pc}
    4a94:	000048fd 	.word	0x000048fd

00004a98 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4a9c:	4b01      	ldr	r3, [pc, #4]	; (4aa4 <EIC_8_Handler+0xc>)
    4a9e:	4798      	blx	r3
} /**
    4aa0:	bf00      	nop
    4aa2:	bd80      	pop	{r7, pc}
    4aa4:	000048fd 	.word	0x000048fd

00004aa8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4aa8:	b580      	push	{r7, lr}
    4aaa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4aac:	4b01      	ldr	r3, [pc, #4]	; (4ab4 <EIC_9_Handler+0xc>)
    4aae:	4798      	blx	r3
}
    4ab0:	bf00      	nop
    4ab2:	bd80      	pop	{r7, pc}
    4ab4:	000048fd 	.word	0x000048fd

00004ab8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	607a      	str	r2, [r7, #4]
    4ac4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4ac6:	7afa      	ldrb	r2, [r7, #11]
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	3248      	adds	r2, #72	; 0x48
    4acc:	6879      	ldr	r1, [r7, #4]
    4ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4ad2:	bf00      	nop
    4ad4:	3714      	adds	r7, #20
    4ad6:	46bd      	mov	sp, r7
    4ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4adc:	4770      	bx	lr

00004ade <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4ade:	b480      	push	{r7}
    4ae0:	b083      	sub	sp, #12
    4ae2:	af00      	add	r7, sp, #0
    4ae4:	6078      	str	r0, [r7, #4]
    4ae6:	460b      	mov	r3, r1
    4ae8:	70fb      	strb	r3, [r7, #3]
    4aea:	4613      	mov	r3, r2
    4aec:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4aee:	78fb      	ldrb	r3, [r7, #3]
    4af0:	687a      	ldr	r2, [r7, #4]
    4af2:	3304      	adds	r3, #4
    4af4:	00db      	lsls	r3, r3, #3
    4af6:	4413      	add	r3, r2
    4af8:	78ba      	ldrb	r2, [r7, #2]
    4afa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4afc:	78fb      	ldrb	r3, [r7, #3]
    4afe:	78ba      	ldrb	r2, [r7, #2]
    4b00:	43d2      	mvns	r2, r2
    4b02:	b2d1      	uxtb	r1, r2
    4b04:	687a      	ldr	r2, [r7, #4]
    4b06:	3304      	adds	r3, #4
    4b08:	00db      	lsls	r3, r3, #3
    4b0a:	4413      	add	r3, r2
    4b0c:	460a      	mov	r2, r1
    4b0e:	711a      	strb	r2, [r3, #4]
}
    4b10:	bf00      	nop
    4b12:	370c      	adds	r7, #12
    4b14:	46bd      	mov	sp, r7
    4b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b1a:	4770      	bx	lr

00004b1c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4b1c:	b480      	push	{r7}
    4b1e:	b085      	sub	sp, #20
    4b20:	af00      	add	r7, sp, #0
    4b22:	60f8      	str	r0, [r7, #12]
    4b24:	460b      	mov	r3, r1
    4b26:	607a      	str	r2, [r7, #4]
    4b28:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4b2a:	7afa      	ldrb	r2, [r7, #11]
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	3204      	adds	r2, #4
    4b30:	6879      	ldr	r1, [r7, #4]
    4b32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4b36:	bf00      	nop
    4b38:	3714      	adds	r7, #20
    4b3a:	46bd      	mov	sp, r7
    4b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b40:	4770      	bx	lr
	...

00004b44 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4b44:	b580      	push	{r7, lr}
    4b46:	b082      	sub	sp, #8
    4b48:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4b4a:	2300      	movs	r3, #0
    4b4c:	71fb      	strb	r3, [r7, #7]
    4b4e:	e00b      	b.n	4b68 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4b50:	79fb      	ldrb	r3, [r7, #7]
    4b52:	4a18      	ldr	r2, [pc, #96]	; (4bb4 <_event_system_init+0x70>)
    4b54:	5cd3      	ldrb	r3, [r2, r3]
    4b56:	461a      	mov	r2, r3
    4b58:	79fb      	ldrb	r3, [r7, #7]
    4b5a:	4619      	mov	r1, r3
    4b5c:	4816      	ldr	r0, [pc, #88]	; (4bb8 <_event_system_init+0x74>)
    4b5e:	4b17      	ldr	r3, [pc, #92]	; (4bbc <_event_system_init+0x78>)
    4b60:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4b62:	79fb      	ldrb	r3, [r7, #7]
    4b64:	3301      	adds	r3, #1
    4b66:	71fb      	strb	r3, [r7, #7]
    4b68:	79fb      	ldrb	r3, [r7, #7]
    4b6a:	2b42      	cmp	r3, #66	; 0x42
    4b6c:	d9f0      	bls.n	4b50 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4b6e:	2300      	movs	r3, #0
    4b70:	71fb      	strb	r3, [r7, #7]
    4b72:	e016      	b.n	4ba2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4b74:	79fb      	ldrb	r3, [r7, #7]
    4b76:	4a12      	ldr	r2, [pc, #72]	; (4bc0 <_event_system_init+0x7c>)
    4b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4b7c:	461a      	mov	r2, r3
    4b7e:	79fb      	ldrb	r3, [r7, #7]
    4b80:	4619      	mov	r1, r3
    4b82:	480d      	ldr	r0, [pc, #52]	; (4bb8 <_event_system_init+0x74>)
    4b84:	4b0f      	ldr	r3, [pc, #60]	; (4bc4 <_event_system_init+0x80>)
    4b86:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4b88:	79fb      	ldrb	r3, [r7, #7]
    4b8a:	4a0f      	ldr	r2, [pc, #60]	; (4bc8 <_event_system_init+0x84>)
    4b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b90:	b2da      	uxtb	r2, r3
    4b92:	79fb      	ldrb	r3, [r7, #7]
    4b94:	4619      	mov	r1, r3
    4b96:	4808      	ldr	r0, [pc, #32]	; (4bb8 <_event_system_init+0x74>)
    4b98:	4b0c      	ldr	r3, [pc, #48]	; (4bcc <_event_system_init+0x88>)
    4b9a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4b9c:	79fb      	ldrb	r3, [r7, #7]
    4b9e:	3301      	adds	r3, #1
    4ba0:	71fb      	strb	r3, [r7, #7]
    4ba2:	79fb      	ldrb	r3, [r7, #7]
    4ba4:	2b1f      	cmp	r3, #31
    4ba6:	d9e5      	bls.n	4b74 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4ba8:	2300      	movs	r3, #0
}
    4baa:	4618      	mov	r0, r3
    4bac:	3708      	adds	r7, #8
    4bae:	46bd      	mov	sp, r7
    4bb0:	bd80      	pop	{r7, pc}
    4bb2:	bf00      	nop
    4bb4:	0000ecfc 	.word	0x0000ecfc
    4bb8:	4100e000 	.word	0x4100e000
    4bbc:	00004ab9 	.word	0x00004ab9
    4bc0:	0000ed40 	.word	0x0000ed40
    4bc4:	00004b1d 	.word	0x00004b1d
    4bc8:	0000ed80 	.word	0x0000ed80
    4bcc:	00004adf 	.word	0x00004adf

00004bd0 <hri_gclk_wait_for_sync>:
{
    4bd0:	b480      	push	{r7}
    4bd2:	b083      	sub	sp, #12
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	6078      	str	r0, [r7, #4]
    4bd8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4bda:	bf00      	nop
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	685a      	ldr	r2, [r3, #4]
    4be0:	683b      	ldr	r3, [r7, #0]
    4be2:	4013      	ands	r3, r2
    4be4:	2b00      	cmp	r3, #0
    4be6:	d1f9      	bne.n	4bdc <hri_gclk_wait_for_sync+0xc>
}
    4be8:	bf00      	nop
    4bea:	370c      	adds	r7, #12
    4bec:	46bd      	mov	sp, r7
    4bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf2:	4770      	bx	lr

00004bf4 <hri_gclk_write_GENCTRL_reg>:
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b084      	sub	sp, #16
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	60f8      	str	r0, [r7, #12]
    4bfc:	460b      	mov	r3, r1
    4bfe:	607a      	str	r2, [r7, #4]
    4c00:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4c02:	7afa      	ldrb	r2, [r7, #11]
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	3208      	adds	r2, #8
    4c08:	6879      	ldr	r1, [r7, #4]
    4c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4c0e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4c12:	68f8      	ldr	r0, [r7, #12]
    4c14:	4b02      	ldr	r3, [pc, #8]	; (4c20 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4c16:	4798      	blx	r3
}
    4c18:	bf00      	nop
    4c1a:	3710      	adds	r7, #16
    4c1c:	46bd      	mov	sp, r7
    4c1e:	bd80      	pop	{r7, pc}
    4c20:	00004bd1 	.word	0x00004bd1

00004c24 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4c24:	b580      	push	{r7, lr}
    4c26:	b082      	sub	sp, #8
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	f003 0301 	and.w	r3, r3, #1
    4c32:	2b00      	cmp	r3, #0
    4c34:	d004      	beq.n	4c40 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4c36:	4a36      	ldr	r2, [pc, #216]	; (4d10 <_gclk_init_generators_by_fref+0xec>)
    4c38:	2100      	movs	r1, #0
    4c3a:	4836      	ldr	r0, [pc, #216]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4c3c:	4b36      	ldr	r3, [pc, #216]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4c3e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	f003 0302 	and.w	r3, r3, #2
    4c46:	2b00      	cmp	r3, #0
    4c48:	d004      	beq.n	4c54 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4c4a:	4a34      	ldr	r2, [pc, #208]	; (4d1c <_gclk_init_generators_by_fref+0xf8>)
    4c4c:	2101      	movs	r1, #1
    4c4e:	4831      	ldr	r0, [pc, #196]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4c50:	4b31      	ldr	r3, [pc, #196]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4c52:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	f003 0304 	and.w	r3, r3, #4
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d004      	beq.n	4c68 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4c5e:	4a30      	ldr	r2, [pc, #192]	; (4d20 <_gclk_init_generators_by_fref+0xfc>)
    4c60:	2102      	movs	r1, #2
    4c62:	482c      	ldr	r0, [pc, #176]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4c64:	4b2c      	ldr	r3, [pc, #176]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4c66:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	f003 0308 	and.w	r3, r3, #8
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d004      	beq.n	4c7c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4c72:	4a2c      	ldr	r2, [pc, #176]	; (4d24 <_gclk_init_generators_by_fref+0x100>)
    4c74:	2103      	movs	r1, #3
    4c76:	4827      	ldr	r0, [pc, #156]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4c78:	4b27      	ldr	r3, [pc, #156]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4c7a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	f003 0310 	and.w	r3, r3, #16
    4c82:	2b00      	cmp	r3, #0
    4c84:	d004      	beq.n	4c90 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4c86:	4a28      	ldr	r2, [pc, #160]	; (4d28 <_gclk_init_generators_by_fref+0x104>)
    4c88:	2104      	movs	r1, #4
    4c8a:	4822      	ldr	r0, [pc, #136]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4c8c:	4b22      	ldr	r3, [pc, #136]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4c8e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	f003 0320 	and.w	r3, r3, #32
    4c96:	2b00      	cmp	r3, #0
    4c98:	d004      	beq.n	4ca4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4c9a:	4a24      	ldr	r2, [pc, #144]	; (4d2c <_gclk_init_generators_by_fref+0x108>)
    4c9c:	2105      	movs	r1, #5
    4c9e:	481d      	ldr	r0, [pc, #116]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4ca0:	4b1d      	ldr	r3, [pc, #116]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4ca2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4ca4:	687b      	ldr	r3, [r7, #4]
    4ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4caa:	2b00      	cmp	r3, #0
    4cac:	d004      	beq.n	4cb8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4cae:	4a20      	ldr	r2, [pc, #128]	; (4d30 <_gclk_init_generators_by_fref+0x10c>)
    4cb0:	2106      	movs	r1, #6
    4cb2:	4818      	ldr	r0, [pc, #96]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4cb4:	4b18      	ldr	r3, [pc, #96]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4cb6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d004      	beq.n	4ccc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4cc2:	4a1c      	ldr	r2, [pc, #112]	; (4d34 <_gclk_init_generators_by_fref+0x110>)
    4cc4:	2107      	movs	r1, #7
    4cc6:	4813      	ldr	r0, [pc, #76]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4cc8:	4b13      	ldr	r3, [pc, #76]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4cca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4ccc:	687b      	ldr	r3, [r7, #4]
    4cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d004      	beq.n	4ce0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4cd6:	4a18      	ldr	r2, [pc, #96]	; (4d38 <_gclk_init_generators_by_fref+0x114>)
    4cd8:	2108      	movs	r1, #8
    4cda:	480e      	ldr	r0, [pc, #56]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4cdc:	4b0e      	ldr	r3, [pc, #56]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4cde:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d004      	beq.n	4cf4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4cea:	4a14      	ldr	r2, [pc, #80]	; (4d3c <_gclk_init_generators_by_fref+0x118>)
    4cec:	210a      	movs	r1, #10
    4cee:	4809      	ldr	r0, [pc, #36]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4cf0:	4b09      	ldr	r3, [pc, #36]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4cf2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d004      	beq.n	4d08 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4cfe:	4a10      	ldr	r2, [pc, #64]	; (4d40 <_gclk_init_generators_by_fref+0x11c>)
    4d00:	210b      	movs	r1, #11
    4d02:	4804      	ldr	r0, [pc, #16]	; (4d14 <_gclk_init_generators_by_fref+0xf0>)
    4d04:	4b04      	ldr	r3, [pc, #16]	; (4d18 <_gclk_init_generators_by_fref+0xf4>)
    4d06:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4d08:	bf00      	nop
    4d0a:	3708      	adds	r7, #8
    4d0c:	46bd      	mov	sp, r7
    4d0e:	bd80      	pop	{r7, pc}
    4d10:	00010107 	.word	0x00010107
    4d14:	40001c00 	.word	0x40001c00
    4d18:	00004bf5 	.word	0x00004bf5
    4d1c:	00010907 	.word	0x00010907
    4d20:	00010906 	.word	0x00010906
    4d24:	00020908 	.word	0x00020908
    4d28:	00010901 	.word	0x00010901
    4d2c:	00062901 	.word	0x00062901
    4d30:	000c2901 	.word	0x000c2901
    4d34:	00082908 	.word	0x00082908
    4d38:	00032901 	.word	0x00032901
    4d3c:	00010905 	.word	0x00010905
    4d40:	00041905 	.word	0x00041905

00004d44 <hri_mclk_write_CPUDIV_reg>:
{
    4d44:	b480      	push	{r7}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
    4d4c:	460b      	mov	r3, r1
    4d4e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	78fa      	ldrb	r2, [r7, #3]
    4d54:	715a      	strb	r2, [r3, #5]
}
    4d56:	bf00      	nop
    4d58:	370c      	adds	r7, #12
    4d5a:	46bd      	mov	sp, r7
    4d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d60:	4770      	bx	lr
	...

00004d64 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4d64:	b580      	push	{r7, lr}
    4d66:	b082      	sub	sp, #8
    4d68:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4d6a:	4b05      	ldr	r3, [pc, #20]	; (4d80 <_mclk_init+0x1c>)
    4d6c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4d6e:	2101      	movs	r1, #1
    4d70:	6878      	ldr	r0, [r7, #4]
    4d72:	4b04      	ldr	r3, [pc, #16]	; (4d84 <_mclk_init+0x20>)
    4d74:	4798      	blx	r3
}
    4d76:	bf00      	nop
    4d78:	3708      	adds	r7, #8
    4d7a:	46bd      	mov	sp, r7
    4d7c:	bd80      	pop	{r7, pc}
    4d7e:	bf00      	nop
    4d80:	40000800 	.word	0x40000800
    4d84:	00004d45 	.word	0x00004d45

00004d88 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4d88:	b480      	push	{r7}
    4d8a:	b083      	sub	sp, #12
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
    4d90:	460b      	mov	r3, r1
    4d92:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	78fa      	ldrb	r2, [r7, #3]
    4d98:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4d9a:	bf00      	nop
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da4:	4770      	bx	lr

00004da6 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4da6:	b480      	push	{r7}
    4da8:	b083      	sub	sp, #12
    4daa:	af00      	add	r7, sp, #0
    4dac:	6078      	str	r0, [r7, #4]
    4dae:	460b      	mov	r3, r1
    4db0:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	887a      	ldrh	r2, [r7, #2]
    4db6:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4db8:	bf00      	nop
    4dba:	370c      	adds	r7, #12
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4dc4:	b480      	push	{r7}
    4dc6:	b083      	sub	sp, #12
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
    4dcc:	460b      	mov	r3, r1
    4dce:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	78fa      	ldrb	r2, [r7, #3]
    4dd4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4dd6:	bf00      	nop
    4dd8:	370c      	adds	r7, #12
    4dda:	46bd      	mov	sp, r7
    4ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de0:	4770      	bx	lr

00004de2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4de2:	b480      	push	{r7}
    4de4:	b083      	sub	sp, #12
    4de6:	af00      	add	r7, sp, #0
    4de8:	6078      	str	r0, [r7, #4]
    4dea:	460b      	mov	r3, r1
    4dec:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	78fa      	ldrb	r2, [r7, #3]
    4df2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4df4:	bf00      	nop
    4df6:	370c      	adds	r7, #12
    4df8:	46bd      	mov	sp, r7
    4dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfe:	4770      	bx	lr

00004e00 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4e00:	b480      	push	{r7}
    4e02:	b085      	sub	sp, #20
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	69db      	ldr	r3, [r3, #28]
    4e0c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4e0e:	68fb      	ldr	r3, [r7, #12]
    4e10:	0a1b      	lsrs	r3, r3, #8
    4e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e16:	60fb      	str	r3, [r7, #12]
	return tmp;
    4e18:	68fb      	ldr	r3, [r7, #12]
}
    4e1a:	4618      	mov	r0, r3
    4e1c:	3714      	adds	r7, #20
    4e1e:	46bd      	mov	sp, r7
    4e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e24:	4770      	bx	lr

00004e26 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4e26:	b480      	push	{r7}
    4e28:	b083      	sub	sp, #12
    4e2a:	af00      	add	r7, sp, #0
    4e2c:	6078      	str	r0, [r7, #4]
    4e2e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	683a      	ldr	r2, [r7, #0]
    4e34:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4e36:	bf00      	nop
    4e38:	370c      	adds	r7, #12
    4e3a:	46bd      	mov	sp, r7
    4e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e40:	4770      	bx	lr
	...

00004e44 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4e44:	b580      	push	{r7, lr}
    4e46:	b082      	sub	sp, #8
    4e48:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4e4a:	4b13      	ldr	r3, [pc, #76]	; (4e98 <_osc32kctrl_init_sources+0x54>)
    4e4c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4e4e:	2300      	movs	r3, #0
    4e50:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4e52:	f242 018e 	movw	r1, #8334	; 0x208e
    4e56:	6878      	ldr	r0, [r7, #4]
    4e58:	4b10      	ldr	r3, [pc, #64]	; (4e9c <_osc32kctrl_init_sources+0x58>)
    4e5a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4e5c:	2100      	movs	r1, #0
    4e5e:	6878      	ldr	r0, [r7, #4]
    4e60:	4b0f      	ldr	r3, [pc, #60]	; (4ea0 <_osc32kctrl_init_sources+0x5c>)
    4e62:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4e64:	2100      	movs	r1, #0
    4e66:	6878      	ldr	r0, [r7, #4]
    4e68:	4b0e      	ldr	r3, [pc, #56]	; (4ea4 <_osc32kctrl_init_sources+0x60>)
    4e6a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4e6c:	6878      	ldr	r0, [r7, #4]
    4e6e:	4b0e      	ldr	r3, [pc, #56]	; (4ea8 <_osc32kctrl_init_sources+0x64>)
    4e70:	4798      	blx	r3
    4e72:	4603      	mov	r3, r0
    4e74:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4e76:	887b      	ldrh	r3, [r7, #2]
    4e78:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4e7a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4e7e:	4619      	mov	r1, r3
    4e80:	6878      	ldr	r0, [r7, #4]
    4e82:	4b0a      	ldr	r3, [pc, #40]	; (4eac <_osc32kctrl_init_sources+0x68>)
    4e84:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4e86:	2100      	movs	r1, #0
    4e88:	6878      	ldr	r0, [r7, #4]
    4e8a:	4b09      	ldr	r3, [pc, #36]	; (4eb0 <_osc32kctrl_init_sources+0x6c>)
    4e8c:	4798      	blx	r3
	(void)calib;
}
    4e8e:	bf00      	nop
    4e90:	3708      	adds	r7, #8
    4e92:	46bd      	mov	sp, r7
    4e94:	bd80      	pop	{r7, pc}
    4e96:	bf00      	nop
    4e98:	40001400 	.word	0x40001400
    4e9c:	00004da7 	.word	0x00004da7
    4ea0:	00004dc5 	.word	0x00004dc5
    4ea4:	00004de3 	.word	0x00004de3
    4ea8:	00004e01 	.word	0x00004e01
    4eac:	00004e27 	.word	0x00004e27
    4eb0:	00004d89 	.word	0x00004d89

00004eb4 <hri_gclk_wait_for_sync>:
{
    4eb4:	b480      	push	{r7}
    4eb6:	b083      	sub	sp, #12
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
    4ebc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4ebe:	bf00      	nop
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	685a      	ldr	r2, [r3, #4]
    4ec4:	683b      	ldr	r3, [r7, #0]
    4ec6:	4013      	ands	r3, r2
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d1f9      	bne.n	4ec0 <hri_gclk_wait_for_sync+0xc>
}
    4ecc:	bf00      	nop
    4ece:	370c      	adds	r7, #12
    4ed0:	46bd      	mov	sp, r7
    4ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed6:	4770      	bx	lr

00004ed8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4ed8:	b480      	push	{r7}
    4eda:	b083      	sub	sp, #12
    4edc:	af00      	add	r7, sp, #0
    4ede:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	685b      	ldr	r3, [r3, #4]
    4ee4:	089b      	lsrs	r3, r3, #2
    4ee6:	f003 0301 	and.w	r3, r3, #1
    4eea:	2b00      	cmp	r3, #0
    4eec:	bf14      	ite	ne
    4eee:	2301      	movne	r3, #1
    4ef0:	2300      	moveq	r3, #0
    4ef2:	b2db      	uxtb	r3, r3
}
    4ef4:	4618      	mov	r0, r3
    4ef6:	370c      	adds	r7, #12
    4ef8:	46bd      	mov	sp, r7
    4efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4efe:	4770      	bx	lr

00004f00 <hri_gclk_read_SYNCBUSY_reg>:
{
    4f00:	b480      	push	{r7}
    4f02:	b083      	sub	sp, #12
    4f04:	af00      	add	r7, sp, #0
    4f06:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	685b      	ldr	r3, [r3, #4]
}
    4f0c:	4618      	mov	r0, r3
    4f0e:	370c      	adds	r7, #12
    4f10:	46bd      	mov	sp, r7
    4f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f16:	4770      	bx	lr

00004f18 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4f18:	b580      	push	{r7, lr}
    4f1a:	b086      	sub	sp, #24
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	60f8      	str	r0, [r7, #12]
    4f20:	460b      	mov	r3, r1
    4f22:	607a      	str	r2, [r7, #4]
    4f24:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4f26:	7afa      	ldrb	r2, [r7, #11]
    4f28:	68fb      	ldr	r3, [r7, #12]
    4f2a:	3208      	adds	r2, #8
    4f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f30:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4f32:	697b      	ldr	r3, [r7, #20]
    4f34:	f023 030f 	bic.w	r3, r3, #15
    4f38:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4f3a:	687b      	ldr	r3, [r7, #4]
    4f3c:	f003 030f 	and.w	r3, r3, #15
    4f40:	697a      	ldr	r2, [r7, #20]
    4f42:	4313      	orrs	r3, r2
    4f44:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4f46:	7afa      	ldrb	r2, [r7, #11]
    4f48:	68fb      	ldr	r3, [r7, #12]
    4f4a:	3208      	adds	r2, #8
    4f4c:	6979      	ldr	r1, [r7, #20]
    4f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4f52:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4f56:	68f8      	ldr	r0, [r7, #12]
    4f58:	4b02      	ldr	r3, [pc, #8]	; (4f64 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4f5a:	4798      	blx	r3
}
    4f5c:	bf00      	nop
    4f5e:	3718      	adds	r7, #24
    4f60:	46bd      	mov	sp, r7
    4f62:	bd80      	pop	{r7, pc}
    4f64:	00004eb5 	.word	0x00004eb5

00004f68 <hri_gclk_write_PCHCTRL_reg>:
{
    4f68:	b480      	push	{r7}
    4f6a:	b085      	sub	sp, #20
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	60f8      	str	r0, [r7, #12]
    4f70:	460b      	mov	r3, r1
    4f72:	607a      	str	r2, [r7, #4]
    4f74:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4f76:	7afa      	ldrb	r2, [r7, #11]
    4f78:	68fb      	ldr	r3, [r7, #12]
    4f7a:	3220      	adds	r2, #32
    4f7c:	6879      	ldr	r1, [r7, #4]
    4f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4f82:	bf00      	nop
    4f84:	3714      	adds	r7, #20
    4f86:	46bd      	mov	sp, r7
    4f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f8c:	4770      	bx	lr

00004f8e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4f8e:	b480      	push	{r7}
    4f90:	b085      	sub	sp, #20
    4f92:	af00      	add	r7, sp, #0
    4f94:	60f8      	str	r0, [r7, #12]
    4f96:	460b      	mov	r3, r1
    4f98:	607a      	str	r2, [r7, #4]
    4f9a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4f9c:	bf00      	nop
    4f9e:	7afa      	ldrb	r2, [r7, #11]
    4fa0:	68f9      	ldr	r1, [r7, #12]
    4fa2:	4613      	mov	r3, r2
    4fa4:	009b      	lsls	r3, r3, #2
    4fa6:	4413      	add	r3, r2
    4fa8:	009b      	lsls	r3, r3, #2
    4faa:	440b      	add	r3, r1
    4fac:	333c      	adds	r3, #60	; 0x3c
    4fae:	681a      	ldr	r2, [r3, #0]
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	4013      	ands	r3, r2
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d1f2      	bne.n	4f9e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4fb8:	bf00      	nop
    4fba:	3714      	adds	r7, #20
    4fbc:	46bd      	mov	sp, r7
    4fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fc2:	4770      	bx	lr

00004fc4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4fc4:	b480      	push	{r7}
    4fc6:	b083      	sub	sp, #12
    4fc8:	af00      	add	r7, sp, #0
    4fca:	6078      	str	r0, [r7, #4]
    4fcc:	460b      	mov	r3, r1
    4fce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4fd0:	78fa      	ldrb	r2, [r7, #3]
    4fd2:	6879      	ldr	r1, [r7, #4]
    4fd4:	4613      	mov	r3, r2
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	4413      	add	r3, r2
    4fda:	009b      	lsls	r3, r3, #2
    4fdc:	440b      	add	r3, r1
    4fde:	3340      	adds	r3, #64	; 0x40
    4fe0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4fe2:	f003 0301 	and.w	r3, r3, #1
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	bf14      	ite	ne
    4fea:	2301      	movne	r3, #1
    4fec:	2300      	moveq	r3, #0
    4fee:	b2db      	uxtb	r3, r3
}
    4ff0:	4618      	mov	r0, r3
    4ff2:	370c      	adds	r7, #12
    4ff4:	46bd      	mov	sp, r7
    4ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffa:	4770      	bx	lr

00004ffc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4ffc:	b480      	push	{r7}
    4ffe:	b083      	sub	sp, #12
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
    5004:	460b      	mov	r3, r1
    5006:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5008:	78fa      	ldrb	r2, [r7, #3]
    500a:	6879      	ldr	r1, [r7, #4]
    500c:	4613      	mov	r3, r2
    500e:	009b      	lsls	r3, r3, #2
    5010:	4413      	add	r3, r2
    5012:	009b      	lsls	r3, r3, #2
    5014:	440b      	add	r3, r1
    5016:	3340      	adds	r3, #64	; 0x40
    5018:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    501a:	085b      	lsrs	r3, r3, #1
    501c:	f003 0301 	and.w	r3, r3, #1
    5020:	2b00      	cmp	r3, #0
    5022:	bf14      	ite	ne
    5024:	2301      	movne	r3, #1
    5026:	2300      	moveq	r3, #0
    5028:	b2db      	uxtb	r3, r3
}
    502a:	4618      	mov	r0, r3
    502c:	370c      	adds	r7, #12
    502e:	46bd      	mov	sp, r7
    5030:	f85d 7b04 	ldr.w	r7, [sp], #4
    5034:	4770      	bx	lr
	...

00005038 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5038:	b580      	push	{r7, lr}
    503a:	b082      	sub	sp, #8
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
    5040:	460b      	mov	r3, r1
    5042:	70fb      	strb	r3, [r7, #3]
    5044:	4613      	mov	r3, r2
    5046:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5048:	78fa      	ldrb	r2, [r7, #3]
    504a:	6879      	ldr	r1, [r7, #4]
    504c:	4613      	mov	r3, r2
    504e:	009b      	lsls	r3, r3, #2
    5050:	4413      	add	r3, r2
    5052:	009b      	lsls	r3, r3, #2
    5054:	440b      	add	r3, r1
    5056:	3330      	adds	r3, #48	; 0x30
    5058:	78ba      	ldrb	r2, [r7, #2]
    505a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    505c:	78fb      	ldrb	r3, [r7, #3]
    505e:	2202      	movs	r2, #2
    5060:	4619      	mov	r1, r3
    5062:	6878      	ldr	r0, [r7, #4]
    5064:	4b02      	ldr	r3, [pc, #8]	; (5070 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5066:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5068:	bf00      	nop
    506a:	3708      	adds	r7, #8
    506c:	46bd      	mov	sp, r7
    506e:	bd80      	pop	{r7, pc}
    5070:	00004f8f 	.word	0x00004f8f

00005074 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5074:	b580      	push	{r7, lr}
    5076:	b084      	sub	sp, #16
    5078:	af00      	add	r7, sp, #0
    507a:	60f8      	str	r0, [r7, #12]
    507c:	460b      	mov	r3, r1
    507e:	607a      	str	r2, [r7, #4]
    5080:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5082:	7afa      	ldrb	r2, [r7, #11]
    5084:	68f9      	ldr	r1, [r7, #12]
    5086:	4613      	mov	r3, r2
    5088:	009b      	lsls	r3, r3, #2
    508a:	4413      	add	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	440b      	add	r3, r1
    5090:	3334      	adds	r3, #52	; 0x34
    5092:	687a      	ldr	r2, [r7, #4]
    5094:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5096:	7afb      	ldrb	r3, [r7, #11]
    5098:	2206      	movs	r2, #6
    509a:	4619      	mov	r1, r3
    509c:	68f8      	ldr	r0, [r7, #12]
    509e:	4b03      	ldr	r3, [pc, #12]	; (50ac <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    50a0:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50a2:	bf00      	nop
    50a4:	3710      	adds	r7, #16
    50a6:	46bd      	mov	sp, r7
    50a8:	bd80      	pop	{r7, pc}
    50aa:	bf00      	nop
    50ac:	00004f8f 	.word	0x00004f8f

000050b0 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    50b0:	b480      	push	{r7}
    50b2:	b085      	sub	sp, #20
    50b4:	af00      	add	r7, sp, #0
    50b6:	60f8      	str	r0, [r7, #12]
    50b8:	460b      	mov	r3, r1
    50ba:	607a      	str	r2, [r7, #4]
    50bc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    50be:	7afa      	ldrb	r2, [r7, #11]
    50c0:	68f9      	ldr	r1, [r7, #12]
    50c2:	4613      	mov	r3, r2
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	4413      	add	r3, r2
    50c8:	009b      	lsls	r3, r3, #2
    50ca:	440b      	add	r3, r1
    50cc:	3338      	adds	r3, #56	; 0x38
    50ce:	687a      	ldr	r2, [r7, #4]
    50d0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    50d2:	bf00      	nop
    50d4:	3714      	adds	r7, #20
    50d6:	46bd      	mov	sp, r7
    50d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    50dc:	4770      	bx	lr

000050de <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    50de:	b480      	push	{r7}
    50e0:	b083      	sub	sp, #12
    50e2:	af00      	add	r7, sp, #0
    50e4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	691b      	ldr	r3, [r3, #16]
    50ea:	085b      	lsrs	r3, r3, #1
    50ec:	f003 0301 	and.w	r3, r3, #1
    50f0:	2b00      	cmp	r3, #0
    50f2:	bf14      	ite	ne
    50f4:	2301      	movne	r3, #1
    50f6:	2300      	moveq	r3, #0
    50f8:	b2db      	uxtb	r3, r3
}
    50fa:	4618      	mov	r0, r3
    50fc:	370c      	adds	r7, #12
    50fe:	46bd      	mov	sp, r7
    5100:	f85d 7b04 	ldr.w	r7, [sp], #4
    5104:	4770      	bx	lr

00005106 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5106:	b480      	push	{r7}
    5108:	b083      	sub	sp, #12
    510a:	af00      	add	r7, sp, #0
    510c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    510e:	687b      	ldr	r3, [r7, #4]
    5110:	691b      	ldr	r3, [r3, #16]
    5112:	0a1b      	lsrs	r3, r3, #8
    5114:	f003 0301 	and.w	r3, r3, #1
    5118:	2b00      	cmp	r3, #0
    511a:	bf14      	ite	ne
    511c:	2301      	movne	r3, #1
    511e:	2300      	moveq	r3, #0
    5120:	b2db      	uxtb	r3, r3
}
    5122:	4618      	mov	r0, r3
    5124:	370c      	adds	r7, #12
    5126:	46bd      	mov	sp, r7
    5128:	f85d 7b04 	ldr.w	r7, [sp], #4
    512c:	4770      	bx	lr

0000512e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    512e:	b480      	push	{r7}
    5130:	b085      	sub	sp, #20
    5132:	af00      	add	r7, sp, #0
    5134:	6078      	str	r0, [r7, #4]
    5136:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	691b      	ldr	r3, [r3, #16]
    513c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    513e:	68fa      	ldr	r2, [r7, #12]
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	4013      	ands	r3, r2
    5144:	60fb      	str	r3, [r7, #12]
	return tmp;
    5146:	68fb      	ldr	r3, [r7, #12]
}
    5148:	4618      	mov	r0, r3
    514a:	3714      	adds	r7, #20
    514c:	46bd      	mov	sp, r7
    514e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5152:	4770      	bx	lr

00005154 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5154:	b480      	push	{r7}
    5156:	b085      	sub	sp, #20
    5158:	af00      	add	r7, sp, #0
    515a:	60f8      	str	r0, [r7, #12]
    515c:	460b      	mov	r3, r1
    515e:	607a      	str	r2, [r7, #4]
    5160:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5162:	7afb      	ldrb	r3, [r7, #11]
    5164:	68fa      	ldr	r2, [r7, #12]
    5166:	3304      	adds	r3, #4
    5168:	009b      	lsls	r3, r3, #2
    516a:	4413      	add	r3, r2
    516c:	687a      	ldr	r2, [r7, #4]
    516e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5170:	bf00      	nop
    5172:	3714      	adds	r7, #20
    5174:	46bd      	mov	sp, r7
    5176:	f85d 7b04 	ldr.w	r7, [sp], #4
    517a:	4770      	bx	lr

0000517c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    517c:	b480      	push	{r7}
    517e:	b083      	sub	sp, #12
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
    5184:	460b      	mov	r3, r1
    5186:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	78fa      	ldrb	r2, [r7, #3]
    518c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    518e:	bf00      	nop
    5190:	370c      	adds	r7, #12
    5192:	46bd      	mov	sp, r7
    5194:	f85d 7b04 	ldr.w	r7, [sp], #4
    5198:	4770      	bx	lr

0000519a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    519a:	b480      	push	{r7}
    519c:	b085      	sub	sp, #20
    519e:	af00      	add	r7, sp, #0
    51a0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	f893 3020 	ldrb.w	r3, [r3, #32]
    51a8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    51aa:	7bfb      	ldrb	r3, [r7, #15]
    51ac:	f003 0301 	and.w	r3, r3, #1
    51b0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    51b2:	7bfb      	ldrb	r3, [r7, #15]
    51b4:	2b00      	cmp	r3, #0
    51b6:	bf14      	ite	ne
    51b8:	2301      	movne	r3, #1
    51ba:	2300      	moveq	r3, #0
    51bc:	b2db      	uxtb	r3, r3
}
    51be:	4618      	mov	r0, r3
    51c0:	3714      	adds	r7, #20
    51c2:	46bd      	mov	sp, r7
    51c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c8:	4770      	bx	lr

000051ca <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    51ca:	b480      	push	{r7}
    51cc:	b083      	sub	sp, #12
    51ce:	af00      	add	r7, sp, #0
    51d0:	6078      	str	r0, [r7, #4]
    51d2:	460b      	mov	r3, r1
    51d4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	78fa      	ldrb	r2, [r7, #3]
    51da:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51de:	bf00      	nop
    51e0:	370c      	adds	r7, #12
    51e2:	46bd      	mov	sp, r7
    51e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e8:	4770      	bx	lr

000051ea <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    51ea:	b480      	push	{r7}
    51ec:	b083      	sub	sp, #12
    51ee:	af00      	add	r7, sp, #0
    51f0:	6078      	str	r0, [r7, #4]
    51f2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	683a      	ldr	r2, [r7, #0]
    51f8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    51fa:	bf00      	nop
    51fc:	370c      	adds	r7, #12
    51fe:	46bd      	mov	sp, r7
    5200:	f85d 7b04 	ldr.w	r7, [sp], #4
    5204:	4770      	bx	lr

00005206 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5206:	b480      	push	{r7}
    5208:	b083      	sub	sp, #12
    520a:	af00      	add	r7, sp, #0
    520c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5212:	4618      	mov	r0, r3
    5214:	370c      	adds	r7, #12
    5216:	46bd      	mov	sp, r7
    5218:	f85d 7b04 	ldr.w	r7, [sp], #4
    521c:	4770      	bx	lr

0000521e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    521e:	b480      	push	{r7}
    5220:	b083      	sub	sp, #12
    5222:	af00      	add	r7, sp, #0
    5224:	6078      	str	r0, [r7, #4]
    5226:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	683a      	ldr	r2, [r7, #0]
    522c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    522e:	bf00      	nop
    5230:	370c      	adds	r7, #12
    5232:	46bd      	mov	sp, r7
    5234:	f85d 7b04 	ldr.w	r7, [sp], #4
    5238:	4770      	bx	lr

0000523a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    523a:	b480      	push	{r7}
    523c:	b085      	sub	sp, #20
    523e:	af00      	add	r7, sp, #0
    5240:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5248:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    524a:	7bfb      	ldrb	r3, [r7, #15]
    524c:	085b      	lsrs	r3, r3, #1
    524e:	b2db      	uxtb	r3, r3
    5250:	f003 0301 	and.w	r3, r3, #1
    5254:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5256:	7bfb      	ldrb	r3, [r7, #15]
    5258:	2b00      	cmp	r3, #0
    525a:	bf14      	ite	ne
    525c:	2301      	movne	r3, #1
    525e:	2300      	moveq	r3, #0
    5260:	b2db      	uxtb	r3, r3
}
    5262:	4618      	mov	r0, r3
    5264:	3714      	adds	r7, #20
    5266:	46bd      	mov	sp, r7
    5268:	f85d 7b04 	ldr.w	r7, [sp], #4
    526c:	4770      	bx	lr

0000526e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    526e:	b480      	push	{r7}
    5270:	b085      	sub	sp, #20
    5272:	af00      	add	r7, sp, #0
    5274:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5276:	687b      	ldr	r3, [r7, #4]
    5278:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    527c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    527e:	7bfb      	ldrb	r3, [r7, #15]
    5280:	089b      	lsrs	r3, r3, #2
    5282:	b2db      	uxtb	r3, r3
    5284:	f003 0301 	and.w	r3, r3, #1
    5288:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    528a:	7bfb      	ldrb	r3, [r7, #15]
    528c:	2b00      	cmp	r3, #0
    528e:	bf14      	ite	ne
    5290:	2301      	movne	r3, #1
    5292:	2300      	moveq	r3, #0
    5294:	b2db      	uxtb	r3, r3
}
    5296:	4618      	mov	r0, r3
    5298:	3714      	adds	r7, #20
    529a:	46bd      	mov	sp, r7
    529c:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a0:	4770      	bx	lr

000052a2 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    52a2:	b480      	push	{r7}
    52a4:	b085      	sub	sp, #20
    52a6:	af00      	add	r7, sp, #0
    52a8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52aa:	687b      	ldr	r3, [r7, #4]
    52ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    52b2:	7bfb      	ldrb	r3, [r7, #15]
    52b4:	08db      	lsrs	r3, r3, #3
    52b6:	b2db      	uxtb	r3, r3
    52b8:	f003 0301 	and.w	r3, r3, #1
    52bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52be:	7bfb      	ldrb	r3, [r7, #15]
    52c0:	2b00      	cmp	r3, #0
    52c2:	bf14      	ite	ne
    52c4:	2301      	movne	r3, #1
    52c6:	2300      	moveq	r3, #0
    52c8:	b2db      	uxtb	r3, r3
}
    52ca:	4618      	mov	r0, r3
    52cc:	3714      	adds	r7, #20
    52ce:	46bd      	mov	sp, r7
    52d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    52d4:	4770      	bx	lr

000052d6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    52d6:	b480      	push	{r7}
    52d8:	b085      	sub	sp, #20
    52da:	af00      	add	r7, sp, #0
    52dc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    52e4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    52e6:	7bfb      	ldrb	r3, [r7, #15]
    52e8:	091b      	lsrs	r3, r3, #4
    52ea:	b2db      	uxtb	r3, r3
    52ec:	f003 0301 	and.w	r3, r3, #1
    52f0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    52f2:	7bfb      	ldrb	r3, [r7, #15]
    52f4:	2b00      	cmp	r3, #0
    52f6:	bf14      	ite	ne
    52f8:	2301      	movne	r3, #1
    52fa:	2300      	moveq	r3, #0
    52fc:	b2db      	uxtb	r3, r3
}
    52fe:	4618      	mov	r0, r3
    5300:	3714      	adds	r7, #20
    5302:	46bd      	mov	sp, r7
    5304:	f85d 7b04 	ldr.w	r7, [sp], #4
    5308:	4770      	bx	lr
	...

0000530c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    530c:	b580      	push	{r7, lr}
    530e:	b082      	sub	sp, #8
    5310:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5312:	4b0a      	ldr	r3, [pc, #40]	; (533c <_oscctrl_init_sources+0x30>)
    5314:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5316:	4a0a      	ldr	r2, [pc, #40]	; (5340 <_oscctrl_init_sources+0x34>)
    5318:	2101      	movs	r1, #1
    531a:	6878      	ldr	r0, [r7, #4]
    531c:	4b09      	ldr	r3, [pc, #36]	; (5344 <_oscctrl_init_sources+0x38>)
    531e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5320:	bf00      	nop
    5322:	6878      	ldr	r0, [r7, #4]
    5324:	4b08      	ldr	r3, [pc, #32]	; (5348 <_oscctrl_init_sources+0x3c>)
    5326:	4798      	blx	r3
    5328:	4603      	mov	r3, r0
    532a:	f083 0301 	eor.w	r3, r3, #1
    532e:	b2db      	uxtb	r3, r3
    5330:	2b00      	cmp	r3, #0
    5332:	d1f6      	bne.n	5322 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5334:	bf00      	nop
    5336:	3708      	adds	r7, #8
    5338:	46bd      	mov	sp, r7
    533a:	bd80      	pop	{r7, pc}
    533c:	40001000 	.word	0x40001000
    5340:	03002646 	.word	0x03002646
    5344:	00005155 	.word	0x00005155
    5348:	000050df 	.word	0x000050df

0000534c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    534c:	b580      	push	{r7, lr}
    534e:	b084      	sub	sp, #16
    5350:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5352:	4b6b      	ldr	r3, [pc, #428]	; (5500 <_oscctrl_init_referenced_generators+0x1b4>)
    5354:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5356:	2204      	movs	r2, #4
    5358:	2100      	movs	r1, #0
    535a:	486a      	ldr	r0, [pc, #424]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    535c:	4b6a      	ldr	r3, [pc, #424]	; (5508 <_oscctrl_init_referenced_generators+0x1bc>)
    535e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5360:	bf00      	nop
    5362:	4868      	ldr	r0, [pc, #416]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    5364:	4b69      	ldr	r3, [pc, #420]	; (550c <_oscctrl_init_referenced_generators+0x1c0>)
    5366:	4798      	blx	r3
    5368:	4603      	mov	r3, r0
    536a:	2b00      	cmp	r3, #0
    536c:	d1f9      	bne.n	5362 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    536e:	2100      	movs	r1, #0
    5370:	68f8      	ldr	r0, [r7, #12]
    5372:	4b67      	ldr	r3, [pc, #412]	; (5510 <_oscctrl_init_referenced_generators+0x1c4>)
    5374:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5376:	4967      	ldr	r1, [pc, #412]	; (5514 <_oscctrl_init_referenced_generators+0x1c8>)
    5378:	68f8      	ldr	r0, [r7, #12]
    537a:	4b67      	ldr	r3, [pc, #412]	; (5518 <_oscctrl_init_referenced_generators+0x1cc>)
    537c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    537e:	bf00      	nop
    5380:	68f8      	ldr	r0, [r7, #12]
    5382:	4b66      	ldr	r3, [pc, #408]	; (551c <_oscctrl_init_referenced_generators+0x1d0>)
    5384:	4798      	blx	r3
    5386:	4603      	mov	r3, r0
    5388:	2b00      	cmp	r3, #0
    538a:	d1f9      	bne.n	5380 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    538c:	2100      	movs	r1, #0
    538e:	68f8      	ldr	r0, [r7, #12]
    5390:	4b63      	ldr	r3, [pc, #396]	; (5520 <_oscctrl_init_referenced_generators+0x1d4>)
    5392:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5394:	bf00      	nop
    5396:	68f8      	ldr	r0, [r7, #12]
    5398:	4b62      	ldr	r3, [pc, #392]	; (5524 <_oscctrl_init_referenced_generators+0x1d8>)
    539a:	4798      	blx	r3
    539c:	4603      	mov	r3, r0
    539e:	2b00      	cmp	r3, #0
    53a0:	d1f9      	bne.n	5396 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    53a2:	2302      	movs	r3, #2
    53a4:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    53a6:	7afb      	ldrb	r3, [r7, #11]
    53a8:	4619      	mov	r1, r3
    53aa:	68f8      	ldr	r0, [r7, #12]
    53ac:	4b58      	ldr	r3, [pc, #352]	; (5510 <_oscctrl_init_referenced_generators+0x1c4>)
    53ae:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    53b0:	bf00      	nop
    53b2:	68f8      	ldr	r0, [r7, #12]
    53b4:	4b5c      	ldr	r3, [pc, #368]	; (5528 <_oscctrl_init_referenced_generators+0x1dc>)
    53b6:	4798      	blx	r3
    53b8:	4603      	mov	r3, r0
    53ba:	2b00      	cmp	r3, #0
    53bc:	d1f9      	bne.n	53b2 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    53be:	68f8      	ldr	r0, [r7, #12]
    53c0:	4b5a      	ldr	r3, [pc, #360]	; (552c <_oscctrl_init_referenced_generators+0x1e0>)
    53c2:	4798      	blx	r3
    53c4:	4603      	mov	r3, r0
    53c6:	4619      	mov	r1, r3
    53c8:	68f8      	ldr	r0, [r7, #12]
    53ca:	4b59      	ldr	r3, [pc, #356]	; (5530 <_oscctrl_init_referenced_generators+0x1e4>)
    53cc:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    53ce:	bf00      	nop
    53d0:	68f8      	ldr	r0, [r7, #12]
    53d2:	4b58      	ldr	r3, [pc, #352]	; (5534 <_oscctrl_init_referenced_generators+0x1e8>)
    53d4:	4798      	blx	r3
    53d6:	4603      	mov	r3, r0
    53d8:	2b00      	cmp	r3, #0
    53da:	d1f9      	bne.n	53d0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    53dc:	2319      	movs	r3, #25
    53de:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    53e0:	7afb      	ldrb	r3, [r7, #11]
    53e2:	4619      	mov	r1, r3
    53e4:	68f8      	ldr	r0, [r7, #12]
    53e6:	4b4e      	ldr	r3, [pc, #312]	; (5520 <_oscctrl_init_referenced_generators+0x1d4>)
    53e8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    53ea:	bf00      	nop
    53ec:	68f8      	ldr	r0, [r7, #12]
    53ee:	4b4d      	ldr	r3, [pc, #308]	; (5524 <_oscctrl_init_referenced_generators+0x1d8>)
    53f0:	4798      	blx	r3
    53f2:	4603      	mov	r3, r0
    53f4:	2b00      	cmp	r3, #0
    53f6:	d1f9      	bne.n	53ec <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    53f8:	2245      	movs	r2, #69	; 0x45
    53fa:	2101      	movs	r1, #1
    53fc:	4841      	ldr	r0, [pc, #260]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    53fe:	4b4e      	ldr	r3, [pc, #312]	; (5538 <_oscctrl_init_referenced_generators+0x1ec>)
    5400:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5402:	223b      	movs	r2, #59	; 0x3b
    5404:	2100      	movs	r1, #0
    5406:	68f8      	ldr	r0, [r7, #12]
    5408:	4b4c      	ldr	r3, [pc, #304]	; (553c <_oscctrl_init_referenced_generators+0x1f0>)
    540a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    540c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5410:	2100      	movs	r1, #0
    5412:	68f8      	ldr	r0, [r7, #12]
    5414:	4b4a      	ldr	r3, [pc, #296]	; (5540 <_oscctrl_init_referenced_generators+0x1f4>)
    5416:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5418:	2242      	movs	r2, #66	; 0x42
    541a:	2100      	movs	r1, #0
    541c:	68f8      	ldr	r0, [r7, #12]
    541e:	4b49      	ldr	r3, [pc, #292]	; (5544 <_oscctrl_init_referenced_generators+0x1f8>)
    5420:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5422:	4a49      	ldr	r2, [pc, #292]	; (5548 <_oscctrl_init_referenced_generators+0x1fc>)
    5424:	2101      	movs	r1, #1
    5426:	68f8      	ldr	r0, [r7, #12]
    5428:	4b44      	ldr	r3, [pc, #272]	; (553c <_oscctrl_init_referenced_generators+0x1f0>)
    542a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    542c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5430:	2101      	movs	r1, #1
    5432:	68f8      	ldr	r0, [r7, #12]
    5434:	4b42      	ldr	r3, [pc, #264]	; (5540 <_oscctrl_init_referenced_generators+0x1f4>)
    5436:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5438:	2202      	movs	r2, #2
    543a:	2101      	movs	r1, #1
    543c:	68f8      	ldr	r0, [r7, #12]
    543e:	4b41      	ldr	r3, [pc, #260]	; (5544 <_oscctrl_init_referenced_generators+0x1f8>)
    5440:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5442:	68f8      	ldr	r0, [r7, #12]
    5444:	4b41      	ldr	r3, [pc, #260]	; (554c <_oscctrl_init_referenced_generators+0x200>)
    5446:	4798      	blx	r3
    5448:	4603      	mov	r3, r0
    544a:	2b00      	cmp	r3, #0
    544c:	d00c      	beq.n	5468 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    544e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5452:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5454:	bf00      	nop
    5456:	6879      	ldr	r1, [r7, #4]
    5458:	68f8      	ldr	r0, [r7, #12]
    545a:	4b3d      	ldr	r3, [pc, #244]	; (5550 <_oscctrl_init_referenced_generators+0x204>)
    545c:	4798      	blx	r3
    545e:	4602      	mov	r2, r0
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	429a      	cmp	r2, r3
    5464:	d1f7      	bne.n	5456 <_oscctrl_init_referenced_generators+0x10a>
    5466:	e009      	b.n	547c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5468:	bf00      	nop
    546a:	68f8      	ldr	r0, [r7, #12]
    546c:	4b39      	ldr	r3, [pc, #228]	; (5554 <_oscctrl_init_referenced_generators+0x208>)
    546e:	4798      	blx	r3
    5470:	4603      	mov	r3, r0
    5472:	f083 0301 	eor.w	r3, r3, #1
    5476:	b2db      	uxtb	r3, r3
    5478:	2b00      	cmp	r3, #0
    547a:	d1f6      	bne.n	546a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    547c:	bf00      	nop
    547e:	2100      	movs	r1, #0
    5480:	68f8      	ldr	r0, [r7, #12]
    5482:	4b35      	ldr	r3, [pc, #212]	; (5558 <_oscctrl_init_referenced_generators+0x20c>)
    5484:	4798      	blx	r3
    5486:	4603      	mov	r3, r0
    5488:	f083 0301 	eor.w	r3, r3, #1
    548c:	b2db      	uxtb	r3, r3
    548e:	2b00      	cmp	r3, #0
    5490:	d009      	beq.n	54a6 <_oscctrl_init_referenced_generators+0x15a>
    5492:	2100      	movs	r1, #0
    5494:	68f8      	ldr	r0, [r7, #12]
    5496:	4b31      	ldr	r3, [pc, #196]	; (555c <_oscctrl_init_referenced_generators+0x210>)
    5498:	4798      	blx	r3
    549a:	4603      	mov	r3, r0
    549c:	f083 0301 	eor.w	r3, r3, #1
    54a0:	b2db      	uxtb	r3, r3
    54a2:	2b00      	cmp	r3, #0
    54a4:	d1eb      	bne.n	547e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    54a6:	bf00      	nop
    54a8:	2101      	movs	r1, #1
    54aa:	68f8      	ldr	r0, [r7, #12]
    54ac:	4b2a      	ldr	r3, [pc, #168]	; (5558 <_oscctrl_init_referenced_generators+0x20c>)
    54ae:	4798      	blx	r3
    54b0:	4603      	mov	r3, r0
    54b2:	f083 0301 	eor.w	r3, r3, #1
    54b6:	b2db      	uxtb	r3, r3
    54b8:	2b00      	cmp	r3, #0
    54ba:	d009      	beq.n	54d0 <_oscctrl_init_referenced_generators+0x184>
    54bc:	2101      	movs	r1, #1
    54be:	68f8      	ldr	r0, [r7, #12]
    54c0:	4b26      	ldr	r3, [pc, #152]	; (555c <_oscctrl_init_referenced_generators+0x210>)
    54c2:	4798      	blx	r3
    54c4:	4603      	mov	r3, r0
    54c6:	f083 0301 	eor.w	r3, r3, #1
    54ca:	b2db      	uxtb	r3, r3
    54cc:	2b00      	cmp	r3, #0
    54ce:	d1eb      	bne.n	54a8 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    54d0:	bf00      	nop
    54d2:	480c      	ldr	r0, [pc, #48]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    54d4:	4b22      	ldr	r3, [pc, #136]	; (5560 <_oscctrl_init_referenced_generators+0x214>)
    54d6:	4798      	blx	r3
    54d8:	4603      	mov	r3, r0
    54da:	2b00      	cmp	r3, #0
    54dc:	d1f9      	bne.n	54d2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    54de:	2207      	movs	r2, #7
    54e0:	2100      	movs	r1, #0
    54e2:	4808      	ldr	r0, [pc, #32]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    54e4:	4b08      	ldr	r3, [pc, #32]	; (5508 <_oscctrl_init_referenced_generators+0x1bc>)
    54e6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    54e8:	bf00      	nop
    54ea:	4806      	ldr	r0, [pc, #24]	; (5504 <_oscctrl_init_referenced_generators+0x1b8>)
    54ec:	4b07      	ldr	r3, [pc, #28]	; (550c <_oscctrl_init_referenced_generators+0x1c0>)
    54ee:	4798      	blx	r3
    54f0:	4603      	mov	r3, r0
    54f2:	2b00      	cmp	r3, #0
    54f4:	d1f9      	bne.n	54ea <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    54f6:	bf00      	nop
    54f8:	3710      	adds	r7, #16
    54fa:	46bd      	mov	sp, r7
    54fc:	bd80      	pop	{r7, pc}
    54fe:	bf00      	nop
    5500:	40001000 	.word	0x40001000
    5504:	40001c00 	.word	0x40001c00
    5508:	00004f19 	.word	0x00004f19
    550c:	00004ed9 	.word	0x00004ed9
    5510:	0000517d 	.word	0x0000517d
    5514:	0401bb80 	.word	0x0401bb80
    5518:	0000521f 	.word	0x0000521f
    551c:	000052d7 	.word	0x000052d7
    5520:	000051cb 	.word	0x000051cb
    5524:	0000526f 	.word	0x0000526f
    5528:	0000523b 	.word	0x0000523b
    552c:	00005207 	.word	0x00005207
    5530:	000051eb 	.word	0x000051eb
    5534:	000052a3 	.word	0x000052a3
    5538:	00004f69 	.word	0x00004f69
    553c:	00005075 	.word	0x00005075
    5540:	000050b1 	.word	0x000050b1
    5544:	00005039 	.word	0x00005039
    5548:	000407a0 	.word	0x000407a0
    554c:	0000519b 	.word	0x0000519b
    5550:	0000512f 	.word	0x0000512f
    5554:	00005107 	.word	0x00005107
    5558:	00004fc5 	.word	0x00004fc5
    555c:	00004ffd 	.word	0x00004ffd
    5560:	00004f01 	.word	0x00004f01

00005564 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5564:	b480      	push	{r7}
    5566:	b083      	sub	sp, #12
    5568:	af00      	add	r7, sp, #0
    556a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	69db      	ldr	r3, [r3, #28]
    5570:	0a9b      	lsrs	r3, r3, #10
    5572:	f003 0301 	and.w	r3, r3, #1
    5576:	2b00      	cmp	r3, #0
    5578:	bf14      	ite	ne
    557a:	2301      	movne	r3, #1
    557c:	2300      	moveq	r3, #0
    557e:	b2db      	uxtb	r3, r3
}
    5580:	4618      	mov	r0, r3
    5582:	370c      	adds	r7, #12
    5584:	46bd      	mov	sp, r7
    5586:	f85d 7b04 	ldr.w	r7, [sp], #4
    558a:	4770      	bx	lr

0000558c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    558c:	b480      	push	{r7}
    558e:	b083      	sub	sp, #12
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	f44f 6280 	mov.w	r2, #1024	; 0x400
    559a:	61da      	str	r2, [r3, #28]
}
    559c:	bf00      	nop
    559e:	370c      	adds	r7, #12
    55a0:	46bd      	mov	sp, r7
    55a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a6:	4770      	bx	lr

000055a8 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    55a8:	b480      	push	{r7}
    55aa:	b083      	sub	sp, #12
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
    55b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    55b2:	687b      	ldr	r3, [r7, #4]
    55b4:	683a      	ldr	r2, [r7, #0]
    55b6:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55b8:	bf00      	nop
    55ba:	370c      	adds	r7, #12
    55bc:	46bd      	mov	sp, r7
    55be:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c2:	4770      	bx	lr

000055c4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    55c4:	b480      	push	{r7}
    55c6:	b083      	sub	sp, #12
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
    55cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    55ce:	687b      	ldr	r3, [r7, #4]
    55d0:	683a      	ldr	r2, [r7, #0]
    55d2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55d4:	bf00      	nop
    55d6:	370c      	adds	r7, #12
    55d8:	46bd      	mov	sp, r7
    55da:	f85d 7b04 	ldr.w	r7, [sp], #4
    55de:	4770      	bx	lr

000055e0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
    55e8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	683a      	ldr	r2, [r7, #0]
    55ee:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    55f0:	bf00      	nop
    55f2:	370c      	adds	r7, #12
    55f4:	46bd      	mov	sp, r7
    55f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55fa:	4770      	bx	lr

000055fc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    55fc:	b480      	push	{r7}
    55fe:	b083      	sub	sp, #12
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	683a      	ldr	r2, [r7, #0]
    560a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    560c:	bf00      	nop
    560e:	370c      	adds	r7, #12
    5610:	46bd      	mov	sp, r7
    5612:	f85d 7b04 	ldr.w	r7, [sp], #4
    5616:	4770      	bx	lr

00005618 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5618:	b480      	push	{r7}
    561a:	b085      	sub	sp, #20
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
    5620:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5626:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    562e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5630:	683b      	ldr	r3, [r7, #0]
    5632:	b2db      	uxtb	r3, r3
    5634:	68fa      	ldr	r2, [r7, #12]
    5636:	4313      	orrs	r3, r2
    5638:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	68fa      	ldr	r2, [r7, #12]
    563e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5640:	bf00      	nop
    5642:	3714      	adds	r7, #20
    5644:	46bd      	mov	sp, r7
    5646:	f85d 7b04 	ldr.w	r7, [sp], #4
    564a:	4770      	bx	lr

0000564c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    564c:	b480      	push	{r7}
    564e:	b085      	sub	sp, #20
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
    5654:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5656:	687b      	ldr	r3, [r7, #4]
    5658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    565a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5662:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5664:	683b      	ldr	r3, [r7, #0]
    5666:	041b      	lsls	r3, r3, #16
    5668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    566c:	68fa      	ldr	r2, [r7, #12]
    566e:	4313      	orrs	r3, r2
    5670:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	68fa      	ldr	r2, [r7, #12]
    5676:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5678:	bf00      	nop
    567a:	3714      	adds	r7, #20
    567c:	46bd      	mov	sp, r7
    567e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5682:	4770      	bx	lr

00005684 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5684:	b480      	push	{r7}
    5686:	b083      	sub	sp, #12
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
    568c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	683a      	ldr	r2, [r7, #0]
    5692:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5694:	bf00      	nop
    5696:	370c      	adds	r7, #12
    5698:	46bd      	mov	sp, r7
    569a:	f85d 7b04 	ldr.w	r7, [sp], #4
    569e:	4770      	bx	lr

000056a0 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    56a0:	b480      	push	{r7}
    56a2:	b083      	sub	sp, #12
    56a4:	af00      	add	r7, sp, #0
    56a6:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    56ac:	4618      	mov	r0, r3
    56ae:	370c      	adds	r7, #12
    56b0:	46bd      	mov	sp, r7
    56b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56b6:	4770      	bx	lr

000056b8 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    56b8:	b480      	push	{r7}
    56ba:	b085      	sub	sp, #20
    56bc:	af00      	add	r7, sp, #0
    56be:	60f8      	str	r0, [r7, #12]
    56c0:	60b9      	str	r1, [r7, #8]
    56c2:	607a      	str	r2, [r7, #4]
	while (count--) {
    56c4:	e007      	b.n	56d6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	1c5a      	adds	r2, r3, #1
    56ca:	60fa      	str	r2, [r7, #12]
    56cc:	68ba      	ldr	r2, [r7, #8]
    56ce:	1c51      	adds	r1, r2, #1
    56d0:	60b9      	str	r1, [r7, #8]
    56d2:	7812      	ldrb	r2, [r2, #0]
    56d4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	1e5a      	subs	r2, r3, #1
    56da:	607a      	str	r2, [r7, #4]
    56dc:	2b00      	cmp	r3, #0
    56de:	d1f2      	bne.n	56c6 <_qspi_memcpy+0xe>
	}
}
    56e0:	bf00      	nop
    56e2:	3714      	adds	r7, #20
    56e4:	46bd      	mov	sp, r7
    56e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ea:	4770      	bx	lr

000056ec <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    56ec:	b580      	push	{r7, lr}
    56ee:	b082      	sub	sp, #8
    56f0:	af00      	add	r7, sp, #0
    56f2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    56f4:	4903      	ldr	r1, [pc, #12]	; (5704 <_qspi_end_transfer+0x18>)
    56f6:	6878      	ldr	r0, [r7, #4]
    56f8:	4b03      	ldr	r3, [pc, #12]	; (5708 <_qspi_end_transfer+0x1c>)
    56fa:	4798      	blx	r3
}
    56fc:	bf00      	nop
    56fe:	3708      	adds	r7, #8
    5700:	46bd      	mov	sp, r7
    5702:	bd80      	pop	{r7, pc}
    5704:	01000002 	.word	0x01000002
    5708:	000055a9 	.word	0x000055a9

0000570c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
    5714:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5716:	687b      	ldr	r3, [r7, #4]
    5718:	2b00      	cmp	r3, #0
    571a:	d004      	beq.n	5726 <_qspi_sync_init+0x1a>
    571c:	683b      	ldr	r3, [r7, #0]
    571e:	2b00      	cmp	r3, #0
    5720:	d001      	beq.n	5726 <_qspi_sync_init+0x1a>
    5722:	2301      	movs	r3, #1
    5724:	e000      	b.n	5728 <_qspi_sync_init+0x1c>
    5726:	2300      	movs	r3, #0
    5728:	f003 0301 	and.w	r3, r3, #1
    572c:	b2db      	uxtb	r3, r3
    572e:	2240      	movs	r2, #64	; 0x40
    5730:	490c      	ldr	r1, [pc, #48]	; (5764 <_qspi_sync_init+0x58>)
    5732:	4618      	mov	r0, r3
    5734:	4b0c      	ldr	r3, [pc, #48]	; (5768 <_qspi_sync_init+0x5c>)
    5736:	4798      	blx	r3
	dev->prvt = hw;
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	683a      	ldr	r2, [r7, #0]
    573c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    573e:	687b      	ldr	r3, [r7, #4]
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	2101      	movs	r1, #1
    5744:	4618      	mov	r0, r3
    5746:	4b09      	ldr	r3, [pc, #36]	; (576c <_qspi_sync_init+0x60>)
    5748:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    574a:	4909      	ldr	r1, [pc, #36]	; (5770 <_qspi_sync_init+0x64>)
    574c:	6838      	ldr	r0, [r7, #0]
    574e:	4b09      	ldr	r3, [pc, #36]	; (5774 <_qspi_sync_init+0x68>)
    5750:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5752:	4909      	ldr	r1, [pc, #36]	; (5778 <_qspi_sync_init+0x6c>)
    5754:	6838      	ldr	r0, [r7, #0]
    5756:	4b09      	ldr	r3, [pc, #36]	; (577c <_qspi_sync_init+0x70>)
    5758:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    575a:	2300      	movs	r3, #0
}
    575c:	4618      	mov	r0, r3
    575e:	3708      	adds	r7, #8
    5760:	46bd      	mov	sp, r7
    5762:	bd80      	pop	{r7, pc}
    5764:	0000ee00 	.word	0x0000ee00
    5768:	00003725 	.word	0x00003725
    576c:	000055a9 	.word	0x000055a9
    5770:	06000011 	.word	0x06000011
    5774:	000055c5 	.word	0x000055c5
    5778:	00241300 	.word	0x00241300
    577c:	000055e1 	.word	0x000055e1

00005780 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5780:	b580      	push	{r7, lr}
    5782:	b082      	sub	sp, #8
    5784:	af00      	add	r7, sp, #0
    5786:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	2102      	movs	r1, #2
    578e:	4618      	mov	r0, r3
    5790:	4b03      	ldr	r3, [pc, #12]	; (57a0 <_qspi_sync_enable+0x20>)
    5792:	4798      	blx	r3
	return ERR_NONE;
    5794:	2300      	movs	r3, #0
}
    5796:	4618      	mov	r0, r3
    5798:	3708      	adds	r7, #8
    579a:	46bd      	mov	sp, r7
    579c:	bd80      	pop	{r7, pc}
    579e:	bf00      	nop
    57a0:	000055a9 	.word	0x000055a9

000057a4 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	b082      	sub	sp, #8
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    57ac:	687b      	ldr	r3, [r7, #4]
    57ae:	681b      	ldr	r3, [r3, #0]
    57b0:	2100      	movs	r1, #0
    57b2:	4618      	mov	r0, r3
    57b4:	4b03      	ldr	r3, [pc, #12]	; (57c4 <_qspi_sync_disable+0x20>)
    57b6:	4798      	blx	r3
	return ERR_NONE;
    57b8:	2300      	movs	r3, #0
}
    57ba:	4618      	mov	r0, r3
    57bc:	3708      	adds	r7, #8
    57be:	46bd      	mov	sp, r7
    57c0:	bd80      	pop	{r7, pc}
    57c2:	bf00      	nop
    57c4:	000055a9 	.word	0x000055a9

000057c8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    57c8:	b580      	push	{r7, lr}
    57ca:	b084      	sub	sp, #16
    57cc:	af00      	add	r7, sp, #0
    57ce:	6078      	str	r0, [r7, #4]
    57d0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    57d8:	683b      	ldr	r3, [r7, #0]
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	f003 0320 	and.w	r3, r3, #32
    57e0:	b2db      	uxtb	r3, r3
    57e2:	2b00      	cmp	r3, #0
    57e4:	d005      	beq.n	57f2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	689b      	ldr	r3, [r3, #8]
    57ea:	4619      	mov	r1, r3
    57ec:	68f8      	ldr	r0, [r7, #12]
    57ee:	4b13      	ldr	r3, [pc, #76]	; (583c <_qspi_sync_command_set_ifr+0x74>)
    57f0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    57f2:	683b      	ldr	r3, [r7, #0]
    57f4:	781b      	ldrb	r3, [r3, #0]
    57f6:	f003 0310 	and.w	r3, r3, #16
    57fa:	b2db      	uxtb	r3, r3
    57fc:	2b00      	cmp	r3, #0
    57fe:	d005      	beq.n	580c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5800:	683b      	ldr	r3, [r7, #0]
    5802:	791b      	ldrb	r3, [r3, #4]
    5804:	4619      	mov	r1, r3
    5806:	68f8      	ldr	r0, [r7, #12]
    5808:	4b0d      	ldr	r3, [pc, #52]	; (5840 <_qspi_sync_command_set_ifr+0x78>)
    580a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    580c:	683b      	ldr	r3, [r7, #0]
    580e:	781b      	ldrb	r3, [r3, #0]
    5810:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5814:	b2db      	uxtb	r3, r3
    5816:	2b00      	cmp	r3, #0
    5818:	d005      	beq.n	5826 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    581a:	683b      	ldr	r3, [r7, #0]
    581c:	795b      	ldrb	r3, [r3, #5]
    581e:	4619      	mov	r1, r3
    5820:	68f8      	ldr	r0, [r7, #12]
    5822:	4b08      	ldr	r3, [pc, #32]	; (5844 <_qspi_sync_command_set_ifr+0x7c>)
    5824:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5826:	683b      	ldr	r3, [r7, #0]
    5828:	681b      	ldr	r3, [r3, #0]
    582a:	4619      	mov	r1, r3
    582c:	68f8      	ldr	r0, [r7, #12]
    582e:	4b06      	ldr	r3, [pc, #24]	; (5848 <_qspi_sync_command_set_ifr+0x80>)
    5830:	4798      	blx	r3
}
    5832:	bf00      	nop
    5834:	3710      	adds	r7, #16
    5836:	46bd      	mov	sp, r7
    5838:	bd80      	pop	{r7, pc}
    583a:	bf00      	nop
    583c:	000055fd 	.word	0x000055fd
    5840:	00005619 	.word	0x00005619
    5844:	0000564d 	.word	0x0000564d
    5848:	00005685 	.word	0x00005685

0000584c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    584c:	b580      	push	{r7, lr}
    584e:	b084      	sub	sp, #16
    5850:	af00      	add	r7, sp, #0
    5852:	6078      	str	r0, [r7, #4]
    5854:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5856:	687b      	ldr	r3, [r7, #4]
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    585c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5860:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5862:	683b      	ldr	r3, [r7, #0]
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	f003 0320 	and.w	r3, r3, #32
    586a:	b2db      	uxtb	r3, r3
    586c:	2b00      	cmp	r3, #0
    586e:	d004      	beq.n	587a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5870:	683b      	ldr	r3, [r7, #0]
    5872:	689b      	ldr	r3, [r3, #8]
    5874:	68fa      	ldr	r2, [r7, #12]
    5876:	4413      	add	r3, r2
    5878:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    587a:	68b8      	ldr	r0, [r7, #8]
    587c:	4b18      	ldr	r3, [pc, #96]	; (58e0 <_qspi_sync_run_transfer+0x94>)
    587e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5880:	683b      	ldr	r3, [r7, #0]
    5882:	691b      	ldr	r3, [r3, #16]
    5884:	2b00      	cmp	r3, #0
    5886:	d103      	bne.n	5890 <_qspi_sync_run_transfer+0x44>
    5888:	683b      	ldr	r3, [r7, #0]
    588a:	695b      	ldr	r3, [r3, #20]
    588c:	2b00      	cmp	r3, #0
    588e:	d001      	beq.n	5894 <_qspi_sync_run_transfer+0x48>
    5890:	2301      	movs	r3, #1
    5892:	e000      	b.n	5896 <_qspi_sync_run_transfer+0x4a>
    5894:	2300      	movs	r3, #0
    5896:	f003 0301 	and.w	r3, r3, #1
    589a:	b2db      	uxtb	r3, r3
    589c:	2282      	movs	r2, #130	; 0x82
    589e:	4911      	ldr	r1, [pc, #68]	; (58e4 <_qspi_sync_run_transfer+0x98>)
    58a0:	4618      	mov	r0, r3
    58a2:	4b11      	ldr	r3, [pc, #68]	; (58e8 <_qspi_sync_run_transfer+0x9c>)
    58a4:	4798      	blx	r3

	if (cmd->tx_buf) {
    58a6:	683b      	ldr	r3, [r7, #0]
    58a8:	691b      	ldr	r3, [r3, #16]
    58aa:	2b00      	cmp	r3, #0
    58ac:	d008      	beq.n	58c0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    58ae:	683b      	ldr	r3, [r7, #0]
    58b0:	6919      	ldr	r1, [r3, #16]
    58b2:	683b      	ldr	r3, [r7, #0]
    58b4:	68db      	ldr	r3, [r3, #12]
    58b6:	461a      	mov	r2, r3
    58b8:	68f8      	ldr	r0, [r7, #12]
    58ba:	4b0c      	ldr	r3, [pc, #48]	; (58ec <_qspi_sync_run_transfer+0xa0>)
    58bc:	4798      	blx	r3
    58be:	e007      	b.n	58d0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    58c0:	683b      	ldr	r3, [r7, #0]
    58c2:	6958      	ldr	r0, [r3, #20]
    58c4:	683b      	ldr	r3, [r7, #0]
    58c6:	68db      	ldr	r3, [r3, #12]
    58c8:	461a      	mov	r2, r3
    58ca:	68f9      	ldr	r1, [r7, #12]
    58cc:	4b07      	ldr	r3, [pc, #28]	; (58ec <_qspi_sync_run_transfer+0xa0>)
    58ce:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    58d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    58d4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    58d8:	bf00      	nop
    58da:	3710      	adds	r7, #16
    58dc:	46bd      	mov	sp, r7
    58de:	bd80      	pop	{r7, pc}
    58e0:	000056a1 	.word	0x000056a1
    58e4:	0000ee00 	.word	0x0000ee00
    58e8:	00003725 	.word	0x00003725
    58ec:	000056b9 	.word	0x000056b9

000058f0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    58f0:	b580      	push	{r7, lr}
    58f2:	b082      	sub	sp, #8
    58f4:	af00      	add	r7, sp, #0
    58f6:	6078      	str	r0, [r7, #4]
    58f8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    58fa:	6839      	ldr	r1, [r7, #0]
    58fc:	6878      	ldr	r0, [r7, #4]
    58fe:	4b14      	ldr	r3, [pc, #80]	; (5950 <_qspi_sync_serial_run_command+0x60>)
    5900:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5902:	683b      	ldr	r3, [r7, #0]
    5904:	781b      	ldrb	r3, [r3, #0]
    5906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    590a:	b2db      	uxtb	r3, r3
    590c:	2b00      	cmp	r3, #0
    590e:	d003      	beq.n	5918 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5910:	6839      	ldr	r1, [r7, #0]
    5912:	6878      	ldr	r0, [r7, #4]
    5914:	4b0f      	ldr	r3, [pc, #60]	; (5954 <_qspi_sync_serial_run_command+0x64>)
    5916:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5918:	687b      	ldr	r3, [r7, #4]
    591a:	681b      	ldr	r3, [r3, #0]
    591c:	4618      	mov	r0, r3
    591e:	4b0e      	ldr	r3, [pc, #56]	; (5958 <_qspi_sync_serial_run_command+0x68>)
    5920:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5922:	bf00      	nop
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	4618      	mov	r0, r3
    592a:	4b0c      	ldr	r3, [pc, #48]	; (595c <_qspi_sync_serial_run_command+0x6c>)
    592c:	4798      	blx	r3
    592e:	4603      	mov	r3, r0
    5930:	f083 0301 	eor.w	r3, r3, #1
    5934:	b2db      	uxtb	r3, r3
    5936:	2b00      	cmp	r3, #0
    5938:	d1f4      	bne.n	5924 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    593a:	687b      	ldr	r3, [r7, #4]
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	4618      	mov	r0, r3
    5940:	4b07      	ldr	r3, [pc, #28]	; (5960 <_qspi_sync_serial_run_command+0x70>)
    5942:	4798      	blx	r3
	return ERR_NONE;
    5944:	2300      	movs	r3, #0
}
    5946:	4618      	mov	r0, r3
    5948:	3708      	adds	r7, #8
    594a:	46bd      	mov	sp, r7
    594c:	bd80      	pop	{r7, pc}
    594e:	bf00      	nop
    5950:	000057c9 	.word	0x000057c9
    5954:	0000584d 	.word	0x0000584d
    5958:	000056ed 	.word	0x000056ed
    595c:	00005565 	.word	0x00005565
    5960:	0000558d 	.word	0x0000558d

00005964 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5964:	b480      	push	{r7}
    5966:	b083      	sub	sp, #12
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
    596c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    596e:	bf00      	nop
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	691a      	ldr	r2, [r3, #16]
    5974:	683b      	ldr	r3, [r7, #0]
    5976:	4013      	ands	r3, r2
    5978:	2b00      	cmp	r3, #0
    597a:	d1f9      	bne.n	5970 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    597c:	bf00      	nop
    597e:	370c      	adds	r7, #12
    5980:	46bd      	mov	sp, r7
    5982:	f85d 7b04 	ldr.w	r7, [sp], #4
    5986:	4770      	bx	lr

00005988 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5988:	b480      	push	{r7}
    598a:	b083      	sub	sp, #12
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	f44f 7280 	mov.w	r2, #256	; 0x100
    5996:	819a      	strh	r2, [r3, #12]
}
    5998:	bf00      	nop
    599a:	370c      	adds	r7, #12
    599c:	46bd      	mov	sp, r7
    599e:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a2:	4770      	bx	lr

000059a4 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    59a4:	b480      	push	{r7}
    59a6:	b083      	sub	sp, #12
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    59b2:	819a      	strh	r2, [r3, #12]
}
    59b4:	bf00      	nop
    59b6:	370c      	adds	r7, #12
    59b8:	46bd      	mov	sp, r7
    59ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    59be:	4770      	bx	lr

000059c0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    59c0:	b480      	push	{r7}
    59c2:	b083      	sub	sp, #12
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	899b      	ldrh	r3, [r3, #12]
    59cc:	b29b      	uxth	r3, r3
}
    59ce:	4618      	mov	r0, r3
    59d0:	370c      	adds	r7, #12
    59d2:	46bd      	mov	sp, r7
    59d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d8:	4770      	bx	lr

000059da <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    59da:	b480      	push	{r7}
    59dc:	b083      	sub	sp, #12
    59de:	af00      	add	r7, sp, #0
    59e0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	895b      	ldrh	r3, [r3, #10]
    59e6:	b29b      	uxth	r3, r3
}
    59e8:	4618      	mov	r0, r3
    59ea:	370c      	adds	r7, #12
    59ec:	46bd      	mov	sp, r7
    59ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f2:	4770      	bx	lr

000059f4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    59f4:	b580      	push	{r7, lr}
    59f6:	b082      	sub	sp, #8
    59f8:	af00      	add	r7, sp, #0
    59fa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	881b      	ldrh	r3, [r3, #0]
    5a00:	b29b      	uxth	r3, r3
    5a02:	f043 0301 	orr.w	r3, r3, #1
    5a06:	b29a      	uxth	r2, r3
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5a0c:	2101      	movs	r1, #1
    5a0e:	6878      	ldr	r0, [r7, #4]
    5a10:	4b02      	ldr	r3, [pc, #8]	; (5a1c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5a12:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a14:	bf00      	nop
    5a16:	3708      	adds	r7, #8
    5a18:	46bd      	mov	sp, r7
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	00005965 	.word	0x00005965

00005a20 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5a20:	b580      	push	{r7, lr}
    5a22:	b084      	sub	sp, #16
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a28:	f248 0103 	movw	r1, #32771	; 0x8003
    5a2c:	6878      	ldr	r0, [r7, #4]
    5a2e:	4b0a      	ldr	r3, [pc, #40]	; (5a58 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5a30:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	881b      	ldrh	r3, [r3, #0]
    5a36:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5a38:	89fb      	ldrh	r3, [r7, #14]
    5a3a:	085b      	lsrs	r3, r3, #1
    5a3c:	b29b      	uxth	r3, r3
    5a3e:	f003 0301 	and.w	r3, r3, #1
    5a42:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5a44:	89fb      	ldrh	r3, [r7, #14]
    5a46:	2b00      	cmp	r3, #0
    5a48:	bf14      	ite	ne
    5a4a:	2301      	movne	r3, #1
    5a4c:	2300      	moveq	r3, #0
    5a4e:	b2db      	uxtb	r3, r3
}
    5a50:	4618      	mov	r0, r3
    5a52:	3710      	adds	r7, #16
    5a54:	46bd      	mov	sp, r7
    5a56:	bd80      	pop	{r7, pc}
    5a58:	00005965 	.word	0x00005965

00005a5c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a5c:	b580      	push	{r7, lr}
    5a5e:	b082      	sub	sp, #8
    5a60:	af00      	add	r7, sp, #0
    5a62:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	881b      	ldrh	r3, [r3, #0]
    5a68:	b29b      	uxth	r3, r3
    5a6a:	f023 0302 	bic.w	r3, r3, #2
    5a6e:	b29a      	uxth	r2, r3
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a74:	f248 0103 	movw	r1, #32771	; 0x8003
    5a78:	6878      	ldr	r0, [r7, #4]
    5a7a:	4b03      	ldr	r3, [pc, #12]	; (5a88 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5a7c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5a7e:	bf00      	nop
    5a80:	3708      	adds	r7, #8
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	00005965 	.word	0x00005965

00005a8c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    5a94:	460b      	mov	r3, r1
    5a96:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	887a      	ldrh	r2, [r7, #2]
    5a9c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5a9e:	f248 0103 	movw	r1, #32771	; 0x8003
    5aa2:	6878      	ldr	r0, [r7, #4]
    5aa4:	4b02      	ldr	r3, [pc, #8]	; (5ab0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5aa6:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5aa8:	bf00      	nop
    5aaa:	3708      	adds	r7, #8
    5aac:	46bd      	mov	sp, r7
    5aae:	bd80      	pop	{r7, pc}
    5ab0:	00005965 	.word	0x00005965

00005ab4 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5ab4:	b480      	push	{r7}
    5ab6:	b083      	sub	sp, #12
    5ab8:	af00      	add	r7, sp, #0
    5aba:	6078      	str	r0, [r7, #4]
    5abc:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	683a      	ldr	r2, [r7, #0]
    5ac2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ac4:	bf00      	nop
    5ac6:	370c      	adds	r7, #12
    5ac8:	46bd      	mov	sp, r7
    5aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ace:	4770      	bx	lr

00005ad0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5ad0:	b580      	push	{r7, lr}
    5ad2:	b082      	sub	sp, #8
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	2b00      	cmp	r3, #0
    5adc:	d005      	beq.n	5aea <_calendar_init+0x1a>
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	d001      	beq.n	5aea <_calendar_init+0x1a>
    5ae6:	2301      	movs	r3, #1
    5ae8:	e000      	b.n	5aec <_calendar_init+0x1c>
    5aea:	2300      	movs	r3, #0
    5aec:	f003 0301 	and.w	r3, r3, #1
    5af0:	b2db      	uxtb	r3, r3
    5af2:	222f      	movs	r2, #47	; 0x2f
    5af4:	491b      	ldr	r1, [pc, #108]	; (5b64 <_calendar_init+0x94>)
    5af6:	4618      	mov	r0, r3
    5af8:	4b1b      	ldr	r3, [pc, #108]	; (5b68 <_calendar_init+0x98>)
    5afa:	4798      	blx	r3

	_rtc_dev = dev;
    5afc:	4a1b      	ldr	r2, [pc, #108]	; (5b6c <_calendar_init+0x9c>)
    5afe:	687b      	ldr	r3, [r7, #4]
    5b00:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5b02:	687b      	ldr	r3, [r7, #4]
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	4618      	mov	r0, r3
    5b08:	4b19      	ldr	r3, [pc, #100]	; (5b70 <_calendar_init+0xa0>)
    5b0a:	4798      	blx	r3
    5b0c:	4603      	mov	r3, r0
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d00a      	beq.n	5b28 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	4618      	mov	r0, r3
    5b18:	4b16      	ldr	r3, [pc, #88]	; (5b74 <_calendar_init+0xa4>)
    5b1a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5b1c:	687b      	ldr	r3, [r7, #4]
    5b1e:	681b      	ldr	r3, [r3, #0]
    5b20:	2102      	movs	r1, #2
    5b22:	4618      	mov	r0, r3
    5b24:	4b14      	ldr	r3, [pc, #80]	; (5b78 <_calendar_init+0xa8>)
    5b26:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	681b      	ldr	r3, [r3, #0]
    5b2c:	4618      	mov	r0, r3
    5b2e:	4b13      	ldr	r3, [pc, #76]	; (5b7c <_calendar_init+0xac>)
    5b30:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	681b      	ldr	r3, [r3, #0]
    5b36:	2101      	movs	r1, #1
    5b38:	4618      	mov	r0, r3
    5b3a:	4b0f      	ldr	r3, [pc, #60]	; (5b78 <_calendar_init+0xa8>)
    5b3c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5b3e:	687b      	ldr	r3, [r7, #4]
    5b40:	681b      	ldr	r3, [r3, #0]
    5b42:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5b46:	4618      	mov	r0, r3
    5b48:	4b0d      	ldr	r3, [pc, #52]	; (5b80 <_calendar_init+0xb0>)
    5b4a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5b50:	2100      	movs	r1, #0
    5b52:	4618      	mov	r0, r3
    5b54:	4b0b      	ldr	r3, [pc, #44]	; (5b84 <_calendar_init+0xb4>)
    5b56:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5b58:	2300      	movs	r3, #0
}
    5b5a:	4618      	mov	r0, r3
    5b5c:	3708      	adds	r7, #8
    5b5e:	46bd      	mov	sp, r7
    5b60:	bd80      	pop	{r7, pc}
    5b62:	bf00      	nop
    5b64:	0000ee18 	.word	0x0000ee18
    5b68:	00003725 	.word	0x00003725
    5b6c:	20000808 	.word	0x20000808
    5b70:	00005a21 	.word	0x00005a21
    5b74:	00005a5d 	.word	0x00005a5d
    5b78:	00005965 	.word	0x00005965
    5b7c:	000059f5 	.word	0x000059f5
    5b80:	00005a8d 	.word	0x00005a8d
    5b84:	00005ab5 	.word	0x00005ab5

00005b88 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b084      	sub	sp, #16
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	681b      	ldr	r3, [r3, #0]
    5b94:	4618      	mov	r0, r3
    5b96:	4b19      	ldr	r3, [pc, #100]	; (5bfc <_rtc_interrupt_handler+0x74>)
    5b98:	4798      	blx	r3
    5b9a:	4603      	mov	r3, r0
    5b9c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	681b      	ldr	r3, [r3, #0]
    5ba2:	4618      	mov	r0, r3
    5ba4:	4b16      	ldr	r3, [pc, #88]	; (5c00 <_rtc_interrupt_handler+0x78>)
    5ba6:	4798      	blx	r3
    5ba8:	4603      	mov	r3, r0
    5baa:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5bac:	89fa      	ldrh	r2, [r7, #14]
    5bae:	89bb      	ldrh	r3, [r7, #12]
    5bb0:	4013      	ands	r3, r2
    5bb2:	b29b      	uxth	r3, r3
    5bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5bb8:	2b00      	cmp	r3, #0
    5bba:	d009      	beq.n	5bd0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	685b      	ldr	r3, [r3, #4]
    5bc0:	6878      	ldr	r0, [r7, #4]
    5bc2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5bc4:	687b      	ldr	r3, [r7, #4]
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	4618      	mov	r0, r3
    5bca:	4b0e      	ldr	r3, [pc, #56]	; (5c04 <_rtc_interrupt_handler+0x7c>)
    5bcc:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5bce:	e010      	b.n	5bf2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5bd0:	89fa      	ldrh	r2, [r7, #14]
    5bd2:	89bb      	ldrh	r3, [r7, #12]
    5bd4:	4013      	ands	r3, r2
    5bd6:	b29b      	uxth	r3, r3
    5bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d008      	beq.n	5bf2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	689b      	ldr	r3, [r3, #8]
    5be4:	6878      	ldr	r0, [r7, #4]
    5be6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	681b      	ldr	r3, [r3, #0]
    5bec:	4618      	mov	r0, r3
    5bee:	4b06      	ldr	r3, [pc, #24]	; (5c08 <_rtc_interrupt_handler+0x80>)
    5bf0:	4798      	blx	r3
}
    5bf2:	bf00      	nop
    5bf4:	3710      	adds	r7, #16
    5bf6:	46bd      	mov	sp, r7
    5bf8:	bd80      	pop	{r7, pc}
    5bfa:	bf00      	nop
    5bfc:	000059c1 	.word	0x000059c1
    5c00:	000059db 	.word	0x000059db
    5c04:	00005989 	.word	0x00005989
    5c08:	000059a5 	.word	0x000059a5

00005c0c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5c10:	4b03      	ldr	r3, [pc, #12]	; (5c20 <RTC_Handler+0x14>)
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	4618      	mov	r0, r3
    5c16:	4b03      	ldr	r3, [pc, #12]	; (5c24 <RTC_Handler+0x18>)
    5c18:	4798      	blx	r3
}
    5c1a:	bf00      	nop
    5c1c:	bd80      	pop	{r7, pc}
    5c1e:	bf00      	nop
    5c20:	20000808 	.word	0x20000808
    5c24:	00005b89 	.word	0x00005b89

00005c28 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5c28:	b480      	push	{r7}
    5c2a:	b083      	sub	sp, #12
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
    5c30:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5c32:	bf00      	nop
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	69da      	ldr	r2, [r3, #28]
    5c38:	683b      	ldr	r3, [r7, #0]
    5c3a:	4013      	ands	r3, r2
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d1f9      	bne.n	5c34 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5c40:	bf00      	nop
    5c42:	370c      	adds	r7, #12
    5c44:	46bd      	mov	sp, r7
    5c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4a:	4770      	bx	lr

00005c4c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5c4c:	b480      	push	{r7}
    5c4e:	b083      	sub	sp, #12
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
    5c54:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5c56:	687b      	ldr	r3, [r7, #4]
    5c58:	69da      	ldr	r2, [r3, #28]
    5c5a:	683b      	ldr	r3, [r7, #0]
    5c5c:	4013      	ands	r3, r2
    5c5e:	2b00      	cmp	r3, #0
    5c60:	bf14      	ite	ne
    5c62:	2301      	movne	r3, #1
    5c64:	2300      	moveq	r3, #0
    5c66:	b2db      	uxtb	r3, r3
}
    5c68:	4618      	mov	r0, r3
    5c6a:	370c      	adds	r7, #12
    5c6c:	46bd      	mov	sp, r7
    5c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c72:	4770      	bx	lr

00005c74 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5c74:	b480      	push	{r7}
    5c76:	b083      	sub	sp, #12
    5c78:	af00      	add	r7, sp, #0
    5c7a:	6078      	str	r0, [r7, #4]
    5c7c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5c7e:	bf00      	nop
    5c80:	687b      	ldr	r3, [r7, #4]
    5c82:	69da      	ldr	r2, [r3, #28]
    5c84:	683b      	ldr	r3, [r7, #0]
    5c86:	4013      	ands	r3, r2
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d1f9      	bne.n	5c80 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5c8c:	bf00      	nop
    5c8e:	370c      	adds	r7, #12
    5c90:	46bd      	mov	sp, r7
    5c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c96:	4770      	bx	lr

00005c98 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5c98:	b480      	push	{r7}
    5c9a:	b083      	sub	sp, #12
    5c9c:	af00      	add	r7, sp, #0
    5c9e:	6078      	str	r0, [r7, #4]
    5ca0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	69da      	ldr	r2, [r3, #28]
    5ca6:	683b      	ldr	r3, [r7, #0]
    5ca8:	4013      	ands	r3, r2
    5caa:	2b00      	cmp	r3, #0
    5cac:	bf14      	ite	ne
    5cae:	2301      	movne	r3, #1
    5cb0:	2300      	moveq	r3, #0
    5cb2:	b2db      	uxtb	r3, r3
}
    5cb4:	4618      	mov	r0, r3
    5cb6:	370c      	adds	r7, #12
    5cb8:	46bd      	mov	sp, r7
    5cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cbe:	4770      	bx	lr

00005cc0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5cc0:	b480      	push	{r7}
    5cc2:	b083      	sub	sp, #12
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	2201      	movs	r2, #1
    5ccc:	761a      	strb	r2, [r3, #24]
}
    5cce:	bf00      	nop
    5cd0:	370c      	adds	r7, #12
    5cd2:	46bd      	mov	sp, r7
    5cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cd8:	4770      	bx	lr

00005cda <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5cda:	b480      	push	{r7}
    5cdc:	b083      	sub	sp, #12
    5cde:	af00      	add	r7, sp, #0
    5ce0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	2202      	movs	r2, #2
    5ce6:	761a      	strb	r2, [r3, #24]
}
    5ce8:	bf00      	nop
    5cea:	370c      	adds	r7, #12
    5cec:	46bd      	mov	sp, r7
    5cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf2:	4770      	bx	lr

00005cf4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5cf4:	b480      	push	{r7}
    5cf6:	b083      	sub	sp, #12
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	7e1b      	ldrb	r3, [r3, #24]
    5d00:	b2db      	uxtb	r3, r3
}
    5d02:	4618      	mov	r0, r3
    5d04:	370c      	adds	r7, #12
    5d06:	46bd      	mov	sp, r7
    5d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d0c:	4770      	bx	lr

00005d0e <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5d0e:	b480      	push	{r7}
    5d10:	b085      	sub	sp, #20
    5d12:	af00      	add	r7, sp, #0
    5d14:	6078      	str	r0, [r7, #4]
    5d16:	460b      	mov	r3, r1
    5d18:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	7e1b      	ldrb	r3, [r3, #24]
    5d1e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5d20:	7bfa      	ldrb	r2, [r7, #15]
    5d22:	78fb      	ldrb	r3, [r7, #3]
    5d24:	4013      	ands	r3, r2
    5d26:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5d28:	7bfb      	ldrb	r3, [r7, #15]
}
    5d2a:	4618      	mov	r0, r3
    5d2c:	3714      	adds	r7, #20
    5d2e:	46bd      	mov	sp, r7
    5d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d34:	4770      	bx	lr

00005d36 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5d36:	b480      	push	{r7}
    5d38:	b083      	sub	sp, #12
    5d3a:	af00      	add	r7, sp, #0
    5d3c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5d3e:	687b      	ldr	r3, [r7, #4]
    5d40:	7e1b      	ldrb	r3, [r3, #24]
    5d42:	b2db      	uxtb	r3, r3
}
    5d44:	4618      	mov	r0, r3
    5d46:	370c      	adds	r7, #12
    5d48:	46bd      	mov	sp, r7
    5d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4e:	4770      	bx	lr

00005d50 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5d50:	b480      	push	{r7}
    5d52:	b083      	sub	sp, #12
    5d54:	af00      	add	r7, sp, #0
    5d56:	6078      	str	r0, [r7, #4]
    5d58:	460b      	mov	r3, r1
    5d5a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5d5c:	687b      	ldr	r3, [r7, #4]
    5d5e:	78fa      	ldrb	r2, [r7, #3]
    5d60:	761a      	strb	r2, [r3, #24]
}
    5d62:	bf00      	nop
    5d64:	370c      	adds	r7, #12
    5d66:	46bd      	mov	sp, r7
    5d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d6c:	4770      	bx	lr
	...

00005d70 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5d70:	b580      	push	{r7, lr}
    5d72:	b082      	sub	sp, #8
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	681b      	ldr	r3, [r3, #0]
    5d7c:	f043 0202 	orr.w	r2, r3, #2
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5d84:	2103      	movs	r1, #3
    5d86:	6878      	ldr	r0, [r7, #4]
    5d88:	4b02      	ldr	r3, [pc, #8]	; (5d94 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5d8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d8c:	bf00      	nop
    5d8e:	3708      	adds	r7, #8
    5d90:	46bd      	mov	sp, r7
    5d92:	bd80      	pop	{r7, pc}
    5d94:	00005c29 	.word	0x00005c29

00005d98 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	f023 0202 	bic.w	r2, r3, #2
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5dac:	2103      	movs	r1, #3
    5dae:	6878      	ldr	r0, [r7, #4]
    5db0:	4b02      	ldr	r3, [pc, #8]	; (5dbc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5db2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5db4:	bf00      	nop
    5db6:	3708      	adds	r7, #8
    5db8:	46bd      	mov	sp, r7
    5dba:	bd80      	pop	{r7, pc}
    5dbc:	00005c29 	.word	0x00005c29

00005dc0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5dc0:	b480      	push	{r7}
    5dc2:	b085      	sub	sp, #20
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	681b      	ldr	r3, [r3, #0]
    5dcc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	0edb      	lsrs	r3, r3, #27
    5dd2:	f003 0301 	and.w	r3, r3, #1
    5dd6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5dd8:	68fb      	ldr	r3, [r7, #12]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	bf14      	ite	ne
    5dde:	2301      	movne	r3, #1
    5de0:	2300      	moveq	r3, #0
    5de2:	b2db      	uxtb	r3, r3
}
    5de4:	4618      	mov	r0, r3
    5de6:	3714      	adds	r7, #20
    5de8:	46bd      	mov	sp, r7
    5dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dee:	4770      	bx	lr

00005df0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b084      	sub	sp, #16
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
    5df8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5dfa:	2103      	movs	r1, #3
    5dfc:	6878      	ldr	r0, [r7, #4]
    5dfe:	4b07      	ldr	r3, [pc, #28]	; (5e1c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5e00:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5e08:	68fa      	ldr	r2, [r7, #12]
    5e0a:	683b      	ldr	r3, [r7, #0]
    5e0c:	4013      	ands	r3, r2
    5e0e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5e10:	68fb      	ldr	r3, [r7, #12]
}
    5e12:	4618      	mov	r0, r3
    5e14:	3710      	adds	r7, #16
    5e16:	46bd      	mov	sp, r7
    5e18:	bd80      	pop	{r7, pc}
    5e1a:	bf00      	nop
    5e1c:	00005c29 	.word	0x00005c29

00005e20 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5e20:	b580      	push	{r7, lr}
    5e22:	b082      	sub	sp, #8
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
    5e28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	683a      	ldr	r2, [r7, #0]
    5e2e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5e30:	2103      	movs	r1, #3
    5e32:	6878      	ldr	r0, [r7, #4]
    5e34:	4b02      	ldr	r3, [pc, #8]	; (5e40 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5e36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e38:	bf00      	nop
    5e3a:	3708      	adds	r7, #8
    5e3c:	46bd      	mov	sp, r7
    5e3e:	bd80      	pop	{r7, pc}
    5e40:	00005c29 	.word	0x00005c29

00005e44 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b084      	sub	sp, #16
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e4c:	2103      	movs	r1, #3
    5e4e:	6878      	ldr	r0, [r7, #4]
    5e50:	4b09      	ldr	r3, [pc, #36]	; (5e78 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5e52:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	085b      	lsrs	r3, r3, #1
    5e5e:	f003 0301 	and.w	r3, r3, #1
    5e62:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5e64:	68fb      	ldr	r3, [r7, #12]
    5e66:	2b00      	cmp	r3, #0
    5e68:	bf14      	ite	ne
    5e6a:	2301      	movne	r3, #1
    5e6c:	2300      	moveq	r3, #0
    5e6e:	b2db      	uxtb	r3, r3
}
    5e70:	4618      	mov	r0, r3
    5e72:	3710      	adds	r7, #16
    5e74:	46bd      	mov	sp, r7
    5e76:	bd80      	pop	{r7, pc}
    5e78:	00005c75 	.word	0x00005c75

00005e7c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b082      	sub	sp, #8
    5e80:	af00      	add	r7, sp, #0
    5e82:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	681b      	ldr	r3, [r3, #0]
    5e88:	f023 0202 	bic.w	r2, r3, #2
    5e8c:	687b      	ldr	r3, [r7, #4]
    5e8e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5e90:	2103      	movs	r1, #3
    5e92:	6878      	ldr	r0, [r7, #4]
    5e94:	4b02      	ldr	r3, [pc, #8]	; (5ea0 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5e96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e98:	bf00      	nop
    5e9a:	3708      	adds	r7, #8
    5e9c:	46bd      	mov	sp, r7
    5e9e:	bd80      	pop	{r7, pc}
    5ea0:	00005c75 	.word	0x00005c75

00005ea4 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5ea4:	b580      	push	{r7, lr}
    5ea6:	b084      	sub	sp, #16
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	6078      	str	r0, [r7, #4]
    5eac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5eae:	2103      	movs	r1, #3
    5eb0:	6878      	ldr	r0, [r7, #4]
    5eb2:	4b07      	ldr	r3, [pc, #28]	; (5ed0 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5eb4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	681b      	ldr	r3, [r3, #0]
    5eba:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ebc:	68fa      	ldr	r2, [r7, #12]
    5ebe:	683b      	ldr	r3, [r7, #0]
    5ec0:	4013      	ands	r3, r2
    5ec2:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ec4:	68fb      	ldr	r3, [r7, #12]
}
    5ec6:	4618      	mov	r0, r3
    5ec8:	3710      	adds	r7, #16
    5eca:	46bd      	mov	sp, r7
    5ecc:	bd80      	pop	{r7, pc}
    5ece:	bf00      	nop
    5ed0:	00005c75 	.word	0x00005c75

00005ed4 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
    5edc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5ede:	687b      	ldr	r3, [r7, #4]
    5ee0:	683a      	ldr	r2, [r7, #0]
    5ee2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ee4:	2103      	movs	r1, #3
    5ee6:	6878      	ldr	r0, [r7, #4]
    5ee8:	4b02      	ldr	r3, [pc, #8]	; (5ef4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5eea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5eec:	bf00      	nop
    5eee:	3708      	adds	r7, #8
    5ef0:	46bd      	mov	sp, r7
    5ef2:	bd80      	pop	{r7, pc}
    5ef4:	00005c75 	.word	0x00005c75

00005ef8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	b082      	sub	sp, #8
    5efc:	af00      	add	r7, sp, #0
    5efe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5f00:	687b      	ldr	r3, [r7, #4]
    5f02:	685b      	ldr	r3, [r3, #4]
    5f04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f0c:	2104      	movs	r1, #4
    5f0e:	6878      	ldr	r0, [r7, #4]
    5f10:	4b02      	ldr	r3, [pc, #8]	; (5f1c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5f12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f14:	bf00      	nop
    5f16:	3708      	adds	r7, #8
    5f18:	46bd      	mov	sp, r7
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	00005c29 	.word	0x00005c29

00005f20 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5f20:	b580      	push	{r7, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	af00      	add	r7, sp, #0
    5f26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	685b      	ldr	r3, [r3, #4]
    5f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f34:	2104      	movs	r1, #4
    5f36:	6878      	ldr	r0, [r7, #4]
    5f38:	4b02      	ldr	r3, [pc, #8]	; (5f44 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5f3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f3c:	bf00      	nop
    5f3e:	3708      	adds	r7, #8
    5f40:	46bd      	mov	sp, r7
    5f42:	bd80      	pop	{r7, pc}
    5f44:	00005c29 	.word	0x00005c29

00005f48 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	685b      	ldr	r3, [r3, #4]
    5f54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f5c:	2104      	movs	r1, #4
    5f5e:	6878      	ldr	r0, [r7, #4]
    5f60:	4b02      	ldr	r3, [pc, #8]	; (5f6c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5f62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f64:	bf00      	nop
    5f66:	3708      	adds	r7, #8
    5f68:	46bd      	mov	sp, r7
    5f6a:	bd80      	pop	{r7, pc}
    5f6c:	00005c29 	.word	0x00005c29

00005f70 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5f70:	b580      	push	{r7, lr}
    5f72:	b082      	sub	sp, #8
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	685b      	ldr	r3, [r3, #4]
    5f7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f84:	2104      	movs	r1, #4
    5f86:	6878      	ldr	r0, [r7, #4]
    5f88:	4b02      	ldr	r3, [pc, #8]	; (5f94 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5f8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f8c:	bf00      	nop
    5f8e:	3708      	adds	r7, #8
    5f90:	46bd      	mov	sp, r7
    5f92:	bd80      	pop	{r7, pc}
    5f94:	00005c29 	.word	0x00005c29

00005f98 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5f98:	b580      	push	{r7, lr}
    5f9a:	b082      	sub	sp, #8
    5f9c:	af00      	add	r7, sp, #0
    5f9e:	6078      	str	r0, [r7, #4]
    5fa0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	685a      	ldr	r2, [r3, #4]
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	041b      	lsls	r3, r3, #16
    5faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5fae:	431a      	orrs	r2, r3
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fb4:	2104      	movs	r1, #4
    5fb6:	6878      	ldr	r0, [r7, #4]
    5fb8:	4b02      	ldr	r3, [pc, #8]	; (5fc4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5fba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fbc:	bf00      	nop
    5fbe:	3708      	adds	r7, #8
    5fc0:	46bd      	mov	sp, r7
    5fc2:	bd80      	pop	{r7, pc}
    5fc4:	00005c29 	.word	0x00005c29

00005fc8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
    5fd0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	683a      	ldr	r2, [r7, #0]
    5fd6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fd8:	2104      	movs	r1, #4
    5fda:	6878      	ldr	r0, [r7, #4]
    5fdc:	4b02      	ldr	r3, [pc, #8]	; (5fe8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5fde:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe0:	bf00      	nop
    5fe2:	3708      	adds	r7, #8
    5fe4:	46bd      	mov	sp, r7
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	00005c29 	.word	0x00005c29

00005fec <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5fec:	b580      	push	{r7, lr}
    5fee:	b082      	sub	sp, #8
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
    5ff4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	683a      	ldr	r2, [r7, #0]
    5ffa:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5ffc:	2117      	movs	r1, #23
    5ffe:	6878      	ldr	r0, [r7, #4]
    6000:	4b02      	ldr	r3, [pc, #8]	; (600c <hri_sercomspi_write_CTRLB_reg+0x20>)
    6002:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6004:	bf00      	nop
    6006:	3708      	adds	r7, #8
    6008:	46bd      	mov	sp, r7
    600a:	bd80      	pop	{r7, pc}
    600c:	00005c75 	.word	0x00005c75

00006010 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6010:	b480      	push	{r7}
    6012:	b083      	sub	sp, #12
    6014:	af00      	add	r7, sp, #0
    6016:	6078      	str	r0, [r7, #4]
    6018:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	683a      	ldr	r2, [r7, #0]
    601e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6020:	bf00      	nop
    6022:	370c      	adds	r7, #12
    6024:	46bd      	mov	sp, r7
    6026:	f85d 7b04 	ldr.w	r7, [sp], #4
    602a:	4770      	bx	lr

0000602c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    602c:	b480      	push	{r7}
    602e:	b083      	sub	sp, #12
    6030:	af00      	add	r7, sp, #0
    6032:	6078      	str	r0, [r7, #4]
    6034:	460b      	mov	r3, r1
    6036:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	78fa      	ldrb	r2, [r7, #3]
    603c:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    603e:	bf00      	nop
    6040:	370c      	adds	r7, #12
    6042:	46bd      	mov	sp, r7
    6044:	f85d 7b04 	ldr.w	r7, [sp], #4
    6048:	4770      	bx	lr
	...

0000604c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    604c:	b580      	push	{r7, lr}
    604e:	b084      	sub	sp, #16
    6050:	af00      	add	r7, sp, #0
    6052:	6078      	str	r0, [r7, #4]
    6054:	460b      	mov	r3, r1
    6056:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    605c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    605e:	68fb      	ldr	r3, [r7, #12]
    6060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    6064:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    6066:	78fb      	ldrb	r3, [r7, #3]
    6068:	039b      	lsls	r3, r3, #14
    606a:	461a      	mov	r2, r3
    606c:	68fb      	ldr	r3, [r7, #12]
    606e:	4313      	orrs	r3, r2
    6070:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	68fa      	ldr	r2, [r7, #12]
    6076:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6078:	2104      	movs	r1, #4
    607a:	6878      	ldr	r0, [r7, #4]
    607c:	4b02      	ldr	r3, [pc, #8]	; (6088 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    607e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6080:	bf00      	nop
    6082:	3710      	adds	r7, #16
    6084:	46bd      	mov	sp, r7
    6086:	bd80      	pop	{r7, pc}
    6088:	00005c29 	.word	0x00005c29

0000608c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    608c:	b580      	push	{r7, lr}
    608e:	b082      	sub	sp, #8
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
    6094:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	683a      	ldr	r2, [r7, #0]
    609a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    609c:	2104      	movs	r1, #4
    609e:	6878      	ldr	r0, [r7, #4]
    60a0:	4b02      	ldr	r3, [pc, #8]	; (60ac <hri_sercomi2cm_write_ADDR_reg+0x20>)
    60a2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60a4:	bf00      	nop
    60a6:	3708      	adds	r7, #8
    60a8:	46bd      	mov	sp, r7
    60aa:	bd80      	pop	{r7, pc}
    60ac:	00005c29 	.word	0x00005c29

000060b0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b082      	sub	sp, #8
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60b8:	2104      	movs	r1, #4
    60ba:	6878      	ldr	r0, [r7, #4]
    60bc:	4b03      	ldr	r3, [pc, #12]	; (60cc <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    60be:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    60c4:	4618      	mov	r0, r3
    60c6:	3708      	adds	r7, #8
    60c8:	46bd      	mov	sp, r7
    60ca:	bd80      	pop	{r7, pc}
    60cc:	00005c29 	.word	0x00005c29

000060d0 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    60d0:	b480      	push	{r7}
    60d2:	b083      	sub	sp, #12
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
    60d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	683a      	ldr	r2, [r7, #0]
    60de:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60e0:	bf00      	nop
    60e2:	370c      	adds	r7, #12
    60e4:	46bd      	mov	sp, r7
    60e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ea:	4770      	bx	lr

000060ec <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
    60f4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	683a      	ldr	r2, [r7, #0]
    60fa:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60fc:	2104      	movs	r1, #4
    60fe:	6878      	ldr	r0, [r7, #4]
    6100:	4b02      	ldr	r3, [pc, #8]	; (610c <hri_sercomi2cm_write_DATA_reg+0x20>)
    6102:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6104:	bf00      	nop
    6106:	3708      	adds	r7, #8
    6108:	46bd      	mov	sp, r7
    610a:	bd80      	pop	{r7, pc}
    610c:	00005c29 	.word	0x00005c29

00006110 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6110:	b580      	push	{r7, lr}
    6112:	b082      	sub	sp, #8
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6118:	2104      	movs	r1, #4
    611a:	6878      	ldr	r0, [r7, #4]
    611c:	4b03      	ldr	r3, [pc, #12]	; (612c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    611e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6120:	687b      	ldr	r3, [r7, #4]
    6122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6124:	4618      	mov	r0, r3
    6126:	3708      	adds	r7, #8
    6128:	46bd      	mov	sp, r7
    612a:	bd80      	pop	{r7, pc}
    612c:	00005c29 	.word	0x00005c29

00006130 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6130:	b480      	push	{r7}
    6132:	b083      	sub	sp, #12
    6134:	af00      	add	r7, sp, #0
    6136:	6078      	str	r0, [r7, #4]
    6138:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    613a:	687b      	ldr	r3, [r7, #4]
    613c:	683a      	ldr	r2, [r7, #0]
    613e:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6140:	bf00      	nop
    6142:	370c      	adds	r7, #12
    6144:	46bd      	mov	sp, r7
    6146:	f85d 7b04 	ldr.w	r7, [sp], #4
    614a:	4770      	bx	lr

0000614c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    614c:	b480      	push	{r7}
    614e:	b083      	sub	sp, #12
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6158:	4618      	mov	r0, r3
    615a:	370c      	adds	r7, #12
    615c:	46bd      	mov	sp, r7
    615e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6162:	4770      	bx	lr

00006164 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6164:	b480      	push	{r7}
    6166:	b083      	sub	sp, #12
    6168:	af00      	add	r7, sp, #0
    616a:	6078      	str	r0, [r7, #4]
    616c:	460b      	mov	r3, r1
    616e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	78fa      	ldrb	r2, [r7, #3]
    6174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6178:	bf00      	nop
    617a:	370c      	adds	r7, #12
    617c:	46bd      	mov	sp, r7
    617e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6182:	4770      	bx	lr

00006184 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6184:	b480      	push	{r7}
    6186:	b083      	sub	sp, #12
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	460b      	mov	r3, r1
    618e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	887a      	ldrh	r2, [r7, #2]
    6194:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6196:	bf00      	nop
    6198:	370c      	adds	r7, #12
    619a:	46bd      	mov	sp, r7
    619c:	f85d 7b04 	ldr.w	r7, [sp], #4
    61a0:	4770      	bx	lr
	...

000061a4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    61a4:	b580      	push	{r7, lr}
    61a6:	b082      	sub	sp, #8
    61a8:	af00      	add	r7, sp, #0
    61aa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61ac:	2104      	movs	r1, #4
    61ae:	6878      	ldr	r0, [r7, #4]
    61b0:	4b06      	ldr	r3, [pc, #24]	; (61cc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    61b2:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	8b5b      	ldrh	r3, [r3, #26]
    61b8:	b29b      	uxth	r3, r3
    61ba:	091b      	lsrs	r3, r3, #4
    61bc:	b29b      	uxth	r3, r3
    61be:	f003 0303 	and.w	r3, r3, #3
    61c2:	b29b      	uxth	r3, r3
}
    61c4:	4618      	mov	r0, r3
    61c6:	3708      	adds	r7, #8
    61c8:	46bd      	mov	sp, r7
    61ca:	bd80      	pop	{r7, pc}
    61cc:	00005c29 	.word	0x00005c29

000061d0 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b082      	sub	sp, #8
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61d8:	2104      	movs	r1, #4
    61da:	6878      	ldr	r0, [r7, #4]
    61dc:	4b04      	ldr	r3, [pc, #16]	; (61f0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    61de:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	8b5b      	ldrh	r3, [r3, #26]
    61e4:	b29b      	uxth	r3, r3
}
    61e6:	4618      	mov	r0, r3
    61e8:	3708      	adds	r7, #8
    61ea:	46bd      	mov	sp, r7
    61ec:	bd80      	pop	{r7, pc}
    61ee:	bf00      	nop
    61f0:	00005c29 	.word	0x00005c29

000061f4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    61f4:	b580      	push	{r7, lr}
    61f6:	b082      	sub	sp, #8
    61f8:	af00      	add	r7, sp, #0
    61fa:	6078      	str	r0, [r7, #4]
    61fc:	460b      	mov	r3, r1
    61fe:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	887a      	ldrh	r2, [r7, #2]
    6204:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6206:	2104      	movs	r1, #4
    6208:	6878      	ldr	r0, [r7, #4]
    620a:	4b03      	ldr	r3, [pc, #12]	; (6218 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    620c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    620e:	bf00      	nop
    6210:	3708      	adds	r7, #8
    6212:	46bd      	mov	sp, r7
    6214:	bd80      	pop	{r7, pc}
    6216:	bf00      	nop
    6218:	00005c29 	.word	0x00005c29

0000621c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    621c:	b4b0      	push	{r4, r5, r7}
    621e:	b08d      	sub	sp, #52	; 0x34
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6224:	4b13      	ldr	r3, [pc, #76]	; (6274 <_sercom_get_hardware_index+0x58>)
    6226:	f107 040c 	add.w	r4, r7, #12
    622a:	461d      	mov	r5, r3
    622c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    622e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6230:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6238:	2300      	movs	r3, #0
    623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    623c:	e010      	b.n	6260 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6240:	009b      	lsls	r3, r3, #2
    6242:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6246:	4413      	add	r3, r2
    6248:	f853 3c24 	ldr.w	r3, [r3, #-36]
    624c:	461a      	mov	r2, r3
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	429a      	cmp	r2, r3
    6252:	d102      	bne.n	625a <_sercom_get_hardware_index+0x3e>
			return i;
    6254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6256:	b2db      	uxtb	r3, r3
    6258:	e006      	b.n	6268 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    625c:	3301      	adds	r3, #1
    625e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6262:	2b07      	cmp	r3, #7
    6264:	d9eb      	bls.n	623e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6266:	2300      	movs	r3, #0
}
    6268:	4618      	mov	r0, r3
    626a:	3734      	adds	r7, #52	; 0x34
    626c:	46bd      	mov	sp, r7
    626e:	bcb0      	pop	{r4, r5, r7}
    6270:	4770      	bx	lr
    6272:	bf00      	nop
    6274:	0000ee4c 	.word	0x0000ee4c

00006278 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6278:	b580      	push	{r7, lr}
    627a:	b084      	sub	sp, #16
    627c:	af00      	add	r7, sp, #0
    627e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6280:	6878      	ldr	r0, [r7, #4]
    6282:	4b13      	ldr	r3, [pc, #76]	; (62d0 <_get_i2cm_index+0x58>)
    6284:	4798      	blx	r3
    6286:	4603      	mov	r3, r0
    6288:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    628a:	2300      	movs	r3, #0
    628c:	73fb      	strb	r3, [r7, #15]
    628e:	e010      	b.n	62b2 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6290:	7bfa      	ldrb	r2, [r7, #15]
    6292:	4910      	ldr	r1, [pc, #64]	; (62d4 <_get_i2cm_index+0x5c>)
    6294:	4613      	mov	r3, r2
    6296:	005b      	lsls	r3, r3, #1
    6298:	4413      	add	r3, r2
    629a:	00db      	lsls	r3, r3, #3
    629c:	440b      	add	r3, r1
    629e:	781b      	ldrb	r3, [r3, #0]
    62a0:	7bba      	ldrb	r2, [r7, #14]
    62a2:	429a      	cmp	r2, r3
    62a4:	d102      	bne.n	62ac <_get_i2cm_index+0x34>
			return i;
    62a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62aa:	e00d      	b.n	62c8 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    62ac:	7bfb      	ldrb	r3, [r7, #15]
    62ae:	3301      	adds	r3, #1
    62b0:	73fb      	strb	r3, [r7, #15]
    62b2:	7bfb      	ldrb	r3, [r7, #15]
    62b4:	2b02      	cmp	r3, #2
    62b6:	d9eb      	bls.n	6290 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    62b8:	f240 32a6 	movw	r2, #934	; 0x3a6
    62bc:	4906      	ldr	r1, [pc, #24]	; (62d8 <_get_i2cm_index+0x60>)
    62be:	2000      	movs	r0, #0
    62c0:	4b06      	ldr	r3, [pc, #24]	; (62dc <_get_i2cm_index+0x64>)
    62c2:	4798      	blx	r3
	return -1;
    62c4:	f04f 33ff 	mov.w	r3, #4294967295
}
    62c8:	4618      	mov	r0, r3
    62ca:	3710      	adds	r7, #16
    62cc:	46bd      	mov	sp, r7
    62ce:	bd80      	pop	{r7, pc}
    62d0:	0000621d 	.word	0x0000621d
    62d4:	20000018 	.word	0x20000018
    62d8:	0000ee30 	.word	0x0000ee30
    62dc:	00003725 	.word	0x00003725

000062e0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    62e8:	2103      	movs	r1, #3
    62ea:	6878      	ldr	r0, [r7, #4]
    62ec:	4b02      	ldr	r3, [pc, #8]	; (62f8 <_sercom_i2c_send_stop+0x18>)
    62ee:	4798      	blx	r3
}
    62f0:	bf00      	nop
    62f2:	3708      	adds	r7, #8
    62f4:	46bd      	mov	sp, r7
    62f6:	bd80      	pop	{r7, pc}
    62f8:	00005f99 	.word	0x00005f99

000062fc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    62fc:	b590      	push	{r4, r7, lr}
    62fe:	b087      	sub	sp, #28
    6300:	af00      	add	r7, sp, #0
    6302:	60f8      	str	r0, [r7, #12]
    6304:	60b9      	str	r1, [r7, #8]
    6306:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6308:	68f8      	ldr	r0, [r7, #12]
    630a:	4b7d      	ldr	r3, [pc, #500]	; (6500 <_sercom_i2c_sync_analyse_flags+0x204>)
    630c:	4798      	blx	r3
    630e:	4603      	mov	r3, r0
    6310:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6312:	68f8      	ldr	r0, [r7, #12]
    6314:	4b7b      	ldr	r3, [pc, #492]	; (6504 <_sercom_i2c_sync_analyse_flags+0x208>)
    6316:	4798      	blx	r3
    6318:	4603      	mov	r3, r0
    631a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    631c:	68bb      	ldr	r3, [r7, #8]
    631e:	f003 0301 	and.w	r3, r3, #1
    6322:	2b00      	cmp	r3, #0
    6324:	f000 8095 	beq.w	6452 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6328:	8a7b      	ldrh	r3, [r7, #18]
    632a:	f003 0302 	and.w	r3, r3, #2
    632e:	2b00      	cmp	r3, #0
    6330:	d01d      	beq.n	636e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6332:	68f8      	ldr	r0, [r7, #12]
    6334:	4b74      	ldr	r3, [pc, #464]	; (6508 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6336:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	885b      	ldrh	r3, [r3, #2]
    633c:	b29b      	uxth	r3, r3
    633e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6342:	b29a      	uxth	r2, r3
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6348:	687b      	ldr	r3, [r7, #4]
    634a:	885b      	ldrh	r3, [r3, #2]
    634c:	b29b      	uxth	r3, r3
    634e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6352:	b29a      	uxth	r2, r3
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6358:	8a7b      	ldrh	r3, [r7, #18]
    635a:	f003 0301 	and.w	r3, r3, #1
    635e:	2b00      	cmp	r3, #0
    6360:	d002      	beq.n	6368 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6362:	f06f 0304 	mvn.w	r3, #4
    6366:	e0c6      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6368:	f06f 0303 	mvn.w	r3, #3
    636c:	e0c3      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    636e:	8a7b      	ldrh	r3, [r7, #18]
    6370:	f003 0304 	and.w	r3, r3, #4
    6374:	2b00      	cmp	r3, #0
    6376:	d01f      	beq.n	63b8 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	685b      	ldr	r3, [r3, #4]
    637c:	2b00      	cmp	r3, #0
    637e:	dd07      	ble.n	6390 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	885b      	ldrh	r3, [r3, #2]
    6384:	b29b      	uxth	r3, r3
    6386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    638a:	b29a      	uxth	r2, r3
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	885b      	ldrh	r3, [r3, #2]
    6394:	b29b      	uxth	r3, r3
    6396:	b21b      	sxth	r3, r3
    6398:	2b00      	cmp	r3, #0
    639a:	da02      	bge.n	63a2 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    639c:	68f8      	ldr	r0, [r7, #12]
    639e:	4b5b      	ldr	r3, [pc, #364]	; (650c <_sercom_i2c_sync_analyse_flags+0x210>)
    63a0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	885b      	ldrh	r3, [r3, #2]
    63a6:	b29b      	uxth	r3, r3
    63a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    63ac:	b29a      	uxth	r2, r3
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    63b2:	f06f 0301 	mvn.w	r3, #1
    63b6:	e09e      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	885b      	ldrh	r3, [r3, #2]
    63bc:	b29b      	uxth	r3, r3
    63be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    63c2:	2b00      	cmp	r3, #0
    63c4:	d01c      	beq.n	6400 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    63c6:	687b      	ldr	r3, [r7, #4]
    63c8:	881b      	ldrh	r3, [r3, #0]
    63ca:	121b      	asrs	r3, r3, #8
    63cc:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    63ce:	f003 0406 	and.w	r4, r3, #6
    63d2:	68f8      	ldr	r0, [r7, #12]
    63d4:	4b4e      	ldr	r3, [pc, #312]	; (6510 <_sercom_i2c_sync_analyse_flags+0x214>)
    63d6:	4798      	blx	r3
    63d8:	4603      	mov	r3, r0
    63da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    63de:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    63e0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    63e4:	4619      	mov	r1, r3
    63e6:	68f8      	ldr	r0, [r7, #12]
    63e8:	4b4a      	ldr	r3, [pc, #296]	; (6514 <_sercom_i2c_sync_analyse_flags+0x218>)
    63ea:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	885b      	ldrh	r3, [r3, #2]
    63f0:	b29b      	uxth	r3, r3
    63f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    63f6:	b29a      	uxth	r2, r3
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    63fc:	2300      	movs	r3, #0
    63fe:	e07a      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	685b      	ldr	r3, [r3, #4]
    6404:	2b00      	cmp	r3, #0
    6406:	d111      	bne.n	642c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	885b      	ldrh	r3, [r3, #2]
    640c:	b29b      	uxth	r3, r3
    640e:	b21b      	sxth	r3, r3
    6410:	2b00      	cmp	r3, #0
    6412:	da02      	bge.n	641a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6414:	68f8      	ldr	r0, [r7, #12]
    6416:	4b3d      	ldr	r3, [pc, #244]	; (650c <_sercom_i2c_sync_analyse_flags+0x210>)
    6418:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	885b      	ldrh	r3, [r3, #2]
    641e:	b29b      	uxth	r3, r3
    6420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6424:	b29a      	uxth	r2, r3
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	805a      	strh	r2, [r3, #2]
    642a:	e010      	b.n	644e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	689b      	ldr	r3, [r3, #8]
    6430:	781b      	ldrb	r3, [r3, #0]
    6432:	4619      	mov	r1, r3
    6434:	68f8      	ldr	r0, [r7, #12]
    6436:	4b38      	ldr	r3, [pc, #224]	; (6518 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6438:	4798      	blx	r3
				msg->buffer++;
    643a:	687b      	ldr	r3, [r7, #4]
    643c:	689b      	ldr	r3, [r3, #8]
    643e:	1c5a      	adds	r2, r3, #1
    6440:	687b      	ldr	r3, [r7, #4]
    6442:	609a      	str	r2, [r3, #8]
				msg->len--;
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	685b      	ldr	r3, [r3, #4]
    6448:	1e5a      	subs	r2, r3, #1
    644a:	687b      	ldr	r3, [r7, #4]
    644c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    644e:	2300      	movs	r3, #0
    6450:	e051      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6452:	68bb      	ldr	r3, [r7, #8]
    6454:	f003 0302 	and.w	r3, r3, #2
    6458:	2b00      	cmp	r3, #0
    645a:	d04b      	beq.n	64f4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    645c:	687b      	ldr	r3, [r7, #4]
    645e:	685b      	ldr	r3, [r3, #4]
    6460:	2b00      	cmp	r3, #0
    6462:	d041      	beq.n	64e8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6464:	8a7b      	ldrh	r3, [r7, #18]
    6466:	f003 0304 	and.w	r3, r3, #4
    646a:	2b00      	cmp	r3, #0
    646c:	d13c      	bne.n	64e8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	685b      	ldr	r3, [r3, #4]
    6472:	1e5a      	subs	r2, r3, #1
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	685b      	ldr	r3, [r3, #4]
    647c:	2b00      	cmp	r3, #0
    647e:	d102      	bne.n	6486 <_sercom_i2c_sync_analyse_flags+0x18a>
    6480:	697b      	ldr	r3, [r7, #20]
    6482:	2b00      	cmp	r3, #0
    6484:	d006      	beq.n	6494 <_sercom_i2c_sync_analyse_flags+0x198>
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	685b      	ldr	r3, [r3, #4]
    648a:	2b01      	cmp	r3, #1
    648c:	d105      	bne.n	649a <_sercom_i2c_sync_analyse_flags+0x19e>
    648e:	697b      	ldr	r3, [r7, #20]
    6490:	2b00      	cmp	r3, #0
    6492:	d002      	beq.n	649a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6494:	68f8      	ldr	r0, [r7, #12]
    6496:	4b21      	ldr	r3, [pc, #132]	; (651c <_sercom_i2c_sync_analyse_flags+0x220>)
    6498:	4798      	blx	r3
			}

			if (msg->len == 0) {
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	685b      	ldr	r3, [r3, #4]
    649e:	2b00      	cmp	r3, #0
    64a0:	d113      	bne.n	64ca <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	885b      	ldrh	r3, [r3, #2]
    64a6:	b29b      	uxth	r3, r3
    64a8:	b21b      	sxth	r3, r3
    64aa:	2b00      	cmp	r3, #0
    64ac:	da05      	bge.n	64ba <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    64ae:	68f8      	ldr	r0, [r7, #12]
    64b0:	4b1b      	ldr	r3, [pc, #108]	; (6520 <_sercom_i2c_sync_analyse_flags+0x224>)
    64b2:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    64b4:	68f8      	ldr	r0, [r7, #12]
    64b6:	4b15      	ldr	r3, [pc, #84]	; (650c <_sercom_i2c_sync_analyse_flags+0x210>)
    64b8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	885b      	ldrh	r3, [r3, #2]
    64be:	b29b      	uxth	r3, r3
    64c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64c4:	b29a      	uxth	r2, r3
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	689c      	ldr	r4, [r3, #8]
    64ce:	1c62      	adds	r2, r4, #1
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	609a      	str	r2, [r3, #8]
    64d4:	68f8      	ldr	r0, [r7, #12]
    64d6:	4b13      	ldr	r3, [pc, #76]	; (6524 <_sercom_i2c_sync_analyse_flags+0x228>)
    64d8:	4798      	blx	r3
    64da:	4603      	mov	r3, r0
    64dc:	b2db      	uxtb	r3, r3
    64de:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64e0:	68f8      	ldr	r0, [r7, #12]
    64e2:	4b11      	ldr	r3, [pc, #68]	; (6528 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64e4:	4798      	blx	r3
    64e6:	e005      	b.n	64f4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    64e8:	68f8      	ldr	r0, [r7, #12]
    64ea:	4b0f      	ldr	r3, [pc, #60]	; (6528 <_sercom_i2c_sync_analyse_flags+0x22c>)
    64ec:	4798      	blx	r3
			return I2C_NACK;
    64ee:	f06f 0301 	mvn.w	r3, #1
    64f2:	e000      	b.n	64f6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    64f4:	2300      	movs	r3, #0
}
    64f6:	4618      	mov	r0, r3
    64f8:	371c      	adds	r7, #28
    64fa:	46bd      	mov	sp, r7
    64fc:	bd90      	pop	{r4, r7, pc}
    64fe:	bf00      	nop
    6500:	00005dc1 	.word	0x00005dc1
    6504:	000061d1 	.word	0x000061d1
    6508:	00005cc1 	.word	0x00005cc1
    650c:	000062e1 	.word	0x000062e1
    6510:	000060b1 	.word	0x000060b1
    6514:	0000608d 	.word	0x0000608d
    6518:	000060ed 	.word	0x000060ed
    651c:	00005f49 	.word	0x00005f49
    6520:	00005f21 	.word	0x00005f21
    6524:	00006111 	.word	0x00006111
    6528:	00005cdb 	.word	0x00005cdb

0000652c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    652c:	b580      	push	{r7, lr}
    652e:	b082      	sub	sp, #8
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
    6534:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	2b00      	cmp	r3, #0
    653a:	bf14      	ite	ne
    653c:	2301      	movne	r3, #1
    653e:	2300      	moveq	r3, #0
    6540:	b2db      	uxtb	r3, r3
    6542:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6546:	4908      	ldr	r1, [pc, #32]	; (6568 <_i2c_m_sync_init+0x3c>)
    6548:	4618      	mov	r0, r3
    654a:	4b08      	ldr	r3, [pc, #32]	; (656c <_i2c_m_sync_init+0x40>)
    654c:	4798      	blx	r3

	i2c_dev->hw = hw;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	683a      	ldr	r2, [r7, #0]
    6552:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6554:	687b      	ldr	r3, [r7, #4]
    6556:	6839      	ldr	r1, [r7, #0]
    6558:	4618      	mov	r0, r3
    655a:	4b05      	ldr	r3, [pc, #20]	; (6570 <_i2c_m_sync_init+0x44>)
    655c:	4798      	blx	r3
    655e:	4603      	mov	r3, r0
}
    6560:	4618      	mov	r0, r3
    6562:	3708      	adds	r7, #8
    6564:	46bd      	mov	sp, r7
    6566:	bd80      	pop	{r7, pc}
    6568:	0000ee30 	.word	0x0000ee30
    656c:	00003725 	.word	0x00003725
    6570:	000068e9 	.word	0x000068e9

00006574 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6574:	b580      	push	{r7, lr}
    6576:	b082      	sub	sp, #8
    6578:	af00      	add	r7, sp, #0
    657a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	bf14      	ite	ne
    6582:	2301      	movne	r3, #1
    6584:	2300      	moveq	r3, #0
    6586:	b2db      	uxtb	r3, r3
    6588:	f240 5235 	movw	r2, #1333	; 0x535
    658c:	4906      	ldr	r1, [pc, #24]	; (65a8 <_i2c_m_sync_enable+0x34>)
    658e:	4618      	mov	r0, r3
    6590:	4b06      	ldr	r3, [pc, #24]	; (65ac <_i2c_m_sync_enable+0x38>)
    6592:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	691b      	ldr	r3, [r3, #16]
    6598:	4618      	mov	r0, r3
    659a:	4b05      	ldr	r3, [pc, #20]	; (65b0 <_i2c_m_sync_enable+0x3c>)
    659c:	4798      	blx	r3
    659e:	4603      	mov	r3, r0
}
    65a0:	4618      	mov	r0, r3
    65a2:	3708      	adds	r7, #8
    65a4:	46bd      	mov	sp, r7
    65a6:	bd80      	pop	{r7, pc}
    65a8:	0000ee30 	.word	0x0000ee30
    65ac:	00003725 	.word	0x00003725
    65b0:	0000685d 	.word	0x0000685d

000065b4 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    65b4:	b580      	push	{r7, lr}
    65b6:	b084      	sub	sp, #16
    65b8:	af00      	add	r7, sp, #0
    65ba:	6078      	str	r0, [r7, #4]
    65bc:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    65be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    65c2:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	691b      	ldr	r3, [r3, #16]
    65c8:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    65ca:	68b8      	ldr	r0, [r7, #8]
    65cc:	4b0f      	ldr	r3, [pc, #60]	; (660c <_sercom_i2c_sync_wait_bus+0x58>)
    65ce:	4798      	blx	r3
    65d0:	4603      	mov	r3, r0
    65d2:	461a      	mov	r2, r3
    65d4:	683b      	ldr	r3, [r7, #0]
    65d6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    65d8:	68fb      	ldr	r3, [r7, #12]
    65da:	1e5a      	subs	r2, r3, #1
    65dc:	60fa      	str	r2, [r7, #12]
    65de:	2b00      	cmp	r3, #0
    65e0:	d102      	bne.n	65e8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    65e2:	f06f 0304 	mvn.w	r3, #4
    65e6:	e00c      	b.n	6602 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    65e8:	683b      	ldr	r3, [r7, #0]
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	f003 0301 	and.w	r3, r3, #1
    65f0:	2b00      	cmp	r3, #0
    65f2:	d105      	bne.n	6600 <_sercom_i2c_sync_wait_bus+0x4c>
    65f4:	683b      	ldr	r3, [r7, #0]
    65f6:	681b      	ldr	r3, [r3, #0]
    65f8:	f003 0302 	and.w	r3, r3, #2
    65fc:	2b00      	cmp	r3, #0
    65fe:	d0e4      	beq.n	65ca <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6600:	2300      	movs	r3, #0
}
    6602:	4618      	mov	r0, r3
    6604:	3710      	adds	r7, #16
    6606:	46bd      	mov	sp, r7
    6608:	bd80      	pop	{r7, pc}
    660a:	bf00      	nop
    660c:	00005cf5 	.word	0x00005cf5

00006610 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6610:	b590      	push	{r4, r7, lr}
    6612:	b087      	sub	sp, #28
    6614:	af00      	add	r7, sp, #0
    6616:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	691b      	ldr	r3, [r3, #16]
    661c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6622:	6978      	ldr	r0, [r7, #20]
    6624:	4b39      	ldr	r3, [pc, #228]	; (670c <_sercom_i2c_sync_send_address+0xfc>)
    6626:	4798      	blx	r3
    6628:	4603      	mov	r3, r0
    662a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	2b00      	cmp	r3, #0
    6630:	bf14      	ite	ne
    6632:	2301      	movne	r3, #1
    6634:	2300      	moveq	r3, #0
    6636:	b2db      	uxtb	r3, r3
    6638:	f240 52a5 	movw	r2, #1445	; 0x5a5
    663c:	4934      	ldr	r1, [pc, #208]	; (6710 <_sercom_i2c_sync_send_address+0x100>)
    663e:	4618      	mov	r0, r3
    6640:	4b34      	ldr	r3, [pc, #208]	; (6714 <_sercom_i2c_sync_send_address+0x104>)
    6642:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6644:	693b      	ldr	r3, [r7, #16]
    6646:	685b      	ldr	r3, [r3, #4]
    6648:	2b01      	cmp	r3, #1
    664a:	d106      	bne.n	665a <_sercom_i2c_sync_send_address+0x4a>
    664c:	68fb      	ldr	r3, [r7, #12]
    664e:	2b00      	cmp	r3, #0
    6650:	d003      	beq.n	665a <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6652:	6978      	ldr	r0, [r7, #20]
    6654:	4b30      	ldr	r3, [pc, #192]	; (6718 <_sercom_i2c_sync_send_address+0x108>)
    6656:	4798      	blx	r3
    6658:	e002      	b.n	6660 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    665a:	6978      	ldr	r0, [r7, #20]
    665c:	4b2f      	ldr	r3, [pc, #188]	; (671c <_sercom_i2c_sync_send_address+0x10c>)
    665e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6660:	693b      	ldr	r3, [r7, #16]
    6662:	881b      	ldrh	r3, [r3, #0]
    6664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6668:	2b00      	cmp	r3, #0
    666a:	d022      	beq.n	66b2 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    666c:	693b      	ldr	r3, [r7, #16]
    666e:	885b      	ldrh	r3, [r3, #2]
    6670:	b29b      	uxth	r3, r3
    6672:	f003 0301 	and.w	r3, r3, #1
    6676:	2b00      	cmp	r3, #0
    6678:	d007      	beq.n	668a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    667a:	693b      	ldr	r3, [r7, #16]
    667c:	885b      	ldrh	r3, [r3, #2]
    667e:	b29b      	uxth	r3, r3
    6680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6684:	b29a      	uxth	r2, r3
    6686:	693b      	ldr	r3, [r7, #16]
    6688:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    668a:	693b      	ldr	r3, [r7, #16]
    668c:	881b      	ldrh	r3, [r3, #0]
    668e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6690:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6694:	401c      	ands	r4, r3
    6696:	6978      	ldr	r0, [r7, #20]
    6698:	4b21      	ldr	r3, [pc, #132]	; (6720 <_sercom_i2c_sync_send_address+0x110>)
    669a:	4798      	blx	r3
    669c:	4603      	mov	r3, r0
    669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    66a2:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    66a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    66a8:	4619      	mov	r1, r3
    66aa:	6978      	ldr	r0, [r7, #20]
    66ac:	4b1d      	ldr	r3, [pc, #116]	; (6724 <_sercom_i2c_sync_send_address+0x114>)
    66ae:	4798      	blx	r3
    66b0:	e01a      	b.n	66e8 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    66b2:	693b      	ldr	r3, [r7, #16]
    66b4:	881b      	ldrh	r3, [r3, #0]
    66b6:	005b      	lsls	r3, r3, #1
    66b8:	b2db      	uxtb	r3, r3
    66ba:	693a      	ldr	r2, [r7, #16]
    66bc:	8852      	ldrh	r2, [r2, #2]
    66be:	b292      	uxth	r2, r2
    66c0:	f002 0201 	and.w	r2, r2, #1
    66c4:	2a00      	cmp	r2, #0
    66c6:	bf14      	ite	ne
    66c8:	2201      	movne	r2, #1
    66ca:	2200      	moveq	r2, #0
    66cc:	b2d2      	uxtb	r2, r2
    66ce:	4313      	orrs	r3, r2
    66d0:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    66d2:	6978      	ldr	r0, [r7, #20]
    66d4:	4b12      	ldr	r3, [pc, #72]	; (6720 <_sercom_i2c_sync_send_address+0x110>)
    66d6:	4798      	blx	r3
    66d8:	4603      	mov	r3, r0
    66da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    66de:	4323      	orrs	r3, r4
    66e0:	4619      	mov	r1, r3
    66e2:	6978      	ldr	r0, [r7, #20]
    66e4:	4b0f      	ldr	r3, [pc, #60]	; (6724 <_sercom_i2c_sync_send_address+0x114>)
    66e6:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    66e8:	f107 0308 	add.w	r3, r7, #8
    66ec:	4619      	mov	r1, r3
    66ee:	6878      	ldr	r0, [r7, #4]
    66f0:	4b0d      	ldr	r3, [pc, #52]	; (6728 <_sercom_i2c_sync_send_address+0x118>)
    66f2:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    66f4:	68bb      	ldr	r3, [r7, #8]
    66f6:	693a      	ldr	r2, [r7, #16]
    66f8:	4619      	mov	r1, r3
    66fa:	6978      	ldr	r0, [r7, #20]
    66fc:	4b0b      	ldr	r3, [pc, #44]	; (672c <_sercom_i2c_sync_send_address+0x11c>)
    66fe:	4798      	blx	r3
    6700:	4603      	mov	r3, r0
}
    6702:	4618      	mov	r0, r3
    6704:	371c      	adds	r7, #28
    6706:	46bd      	mov	sp, r7
    6708:	bd90      	pop	{r4, r7, pc}
    670a:	bf00      	nop
    670c:	00005dc1 	.word	0x00005dc1
    6710:	0000ee30 	.word	0x0000ee30
    6714:	00003725 	.word	0x00003725
    6718:	00005f49 	.word	0x00005f49
    671c:	00005f71 	.word	0x00005f71
    6720:	000060b1 	.word	0x000060b1
    6724:	0000608d 	.word	0x0000608d
    6728:	000065b5 	.word	0x000065b5
    672c:	000062fd 	.word	0x000062fd

00006730 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6730:	b580      	push	{r7, lr}
    6732:	b086      	sub	sp, #24
    6734:	af00      	add	r7, sp, #0
    6736:	6078      	str	r0, [r7, #4]
    6738:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    673a:	687b      	ldr	r3, [r7, #4]
    673c:	691b      	ldr	r3, [r3, #16]
    673e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	2b00      	cmp	r3, #0
    6744:	bf14      	ite	ne
    6746:	2301      	movne	r3, #1
    6748:	2300      	moveq	r3, #0
    674a:	b2db      	uxtb	r3, r3
    674c:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6750:	493b      	ldr	r1, [pc, #236]	; (6840 <_i2c_m_sync_transfer+0x110>)
    6752:	4618      	mov	r0, r3
    6754:	4b3b      	ldr	r3, [pc, #236]	; (6844 <_i2c_m_sync_transfer+0x114>)
    6756:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	691b      	ldr	r3, [r3, #16]
    675c:	2b00      	cmp	r3, #0
    675e:	bf14      	ite	ne
    6760:	2301      	movne	r3, #1
    6762:	2300      	moveq	r3, #0
    6764:	b2db      	uxtb	r3, r3
    6766:	f240 52d1 	movw	r2, #1489	; 0x5d1
    676a:	4935      	ldr	r1, [pc, #212]	; (6840 <_i2c_m_sync_transfer+0x110>)
    676c:	4618      	mov	r0, r3
    676e:	4b35      	ldr	r3, [pc, #212]	; (6844 <_i2c_m_sync_transfer+0x114>)
    6770:	4798      	blx	r3
	ASSERT(msg);
    6772:	683b      	ldr	r3, [r7, #0]
    6774:	2b00      	cmp	r3, #0
    6776:	bf14      	ite	ne
    6778:	2301      	movne	r3, #1
    677a:	2300      	moveq	r3, #0
    677c:	b2db      	uxtb	r3, r3
    677e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6782:	492f      	ldr	r1, [pc, #188]	; (6840 <_i2c_m_sync_transfer+0x110>)
    6784:	4618      	mov	r0, r3
    6786:	4b2f      	ldr	r3, [pc, #188]	; (6844 <_i2c_m_sync_transfer+0x114>)
    6788:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	885b      	ldrh	r3, [r3, #2]
    678e:	b29b      	uxth	r3, r3
    6790:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6794:	2b00      	cmp	r3, #0
    6796:	d002      	beq.n	679e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6798:	f06f 0305 	mvn.w	r3, #5
    679c:	e04c      	b.n	6838 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    679e:	683b      	ldr	r3, [r7, #0]
    67a0:	885b      	ldrh	r3, [r3, #2]
    67a2:	b29b      	uxth	r3, r3
    67a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    67a8:	b29a      	uxth	r2, r3
    67aa:	683b      	ldr	r3, [r7, #0]
    67ac:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	683a      	ldr	r2, [r7, #0]
    67b2:	ca07      	ldmia	r2, {r0, r1, r2}
    67b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    67b8:	6938      	ldr	r0, [r7, #16]
    67ba:	4b23      	ldr	r3, [pc, #140]	; (6848 <_i2c_m_sync_transfer+0x118>)
    67bc:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    67be:	6878      	ldr	r0, [r7, #4]
    67c0:	4b22      	ldr	r3, [pc, #136]	; (684c <_i2c_m_sync_transfer+0x11c>)
    67c2:	4798      	blx	r3
    67c4:	6178      	str	r0, [r7, #20]

	if (ret) {
    67c6:	697b      	ldr	r3, [r7, #20]
    67c8:	2b00      	cmp	r3, #0
    67ca:	d02d      	beq.n	6828 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	885b      	ldrh	r3, [r3, #2]
    67d0:	b29b      	uxth	r3, r3
    67d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    67d6:	b29a      	uxth	r2, r3
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	805a      	strh	r2, [r3, #2]

		return ret;
    67dc:	697b      	ldr	r3, [r7, #20]
    67de:	e02b      	b.n	6838 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    67e0:	f107 030c 	add.w	r3, r7, #12
    67e4:	4619      	mov	r1, r3
    67e6:	6878      	ldr	r0, [r7, #4]
    67e8:	4b19      	ldr	r3, [pc, #100]	; (6850 <_i2c_m_sync_transfer+0x120>)
    67ea:	4798      	blx	r3
    67ec:	6178      	str	r0, [r7, #20]

		if (ret) {
    67ee:	697b      	ldr	r3, [r7, #20]
    67f0:	2b00      	cmp	r3, #0
    67f2:	d012      	beq.n	681a <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    67f4:	683b      	ldr	r3, [r7, #0]
    67f6:	885b      	ldrh	r3, [r3, #2]
    67f8:	b29b      	uxth	r3, r3
    67fa:	b21b      	sxth	r3, r3
    67fc:	2b00      	cmp	r3, #0
    67fe:	da02      	bge.n	6806 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6800:	6938      	ldr	r0, [r7, #16]
    6802:	4b14      	ldr	r3, [pc, #80]	; (6854 <_i2c_m_sync_transfer+0x124>)
    6804:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6806:	687b      	ldr	r3, [r7, #4]
    6808:	885b      	ldrh	r3, [r3, #2]
    680a:	b29b      	uxth	r3, r3
    680c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6810:	b29a      	uxth	r2, r3
    6812:	687b      	ldr	r3, [r7, #4]
    6814:	805a      	strh	r2, [r3, #2]

			return ret;
    6816:	697b      	ldr	r3, [r7, #20]
    6818:	e00e      	b.n	6838 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    681a:	68fb      	ldr	r3, [r7, #12]
    681c:	687a      	ldr	r2, [r7, #4]
    681e:	4619      	mov	r1, r3
    6820:	6938      	ldr	r0, [r7, #16]
    6822:	4b0d      	ldr	r3, [pc, #52]	; (6858 <_i2c_m_sync_transfer+0x128>)
    6824:	4798      	blx	r3
    6826:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	885b      	ldrh	r3, [r3, #2]
    682c:	b29b      	uxth	r3, r3
    682e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6832:	2b00      	cmp	r3, #0
    6834:	d1d4      	bne.n	67e0 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6836:	697b      	ldr	r3, [r7, #20]
}
    6838:	4618      	mov	r0, r3
    683a:	3718      	adds	r7, #24
    683c:	46bd      	mov	sp, r7
    683e:	bd80      	pop	{r7, pc}
    6840:	0000ee30 	.word	0x0000ee30
    6844:	00003725 	.word	0x00003725
    6848:	00005ef9 	.word	0x00005ef9
    684c:	00006611 	.word	0x00006611
    6850:	000065b5 	.word	0x000065b5
    6854:	000062e1 	.word	0x000062e1
    6858:	000062fd 	.word	0x000062fd

0000685c <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    685c:	b580      	push	{r7, lr}
    685e:	b084      	sub	sp, #16
    6860:	af00      	add	r7, sp, #0
    6862:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6864:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6868:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    686a:	2304      	movs	r3, #4
    686c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	2b00      	cmp	r3, #0
    6872:	bf14      	ite	ne
    6874:	2301      	movne	r3, #1
    6876:	2300      	moveq	r3, #0
    6878:	b2db      	uxtb	r3, r3
    687a:	f240 6205 	movw	r2, #1541	; 0x605
    687e:	4915      	ldr	r1, [pc, #84]	; (68d4 <_i2c_m_enable_implementation+0x78>)
    6880:	4618      	mov	r0, r3
    6882:	4b15      	ldr	r3, [pc, #84]	; (68d8 <_i2c_m_enable_implementation+0x7c>)
    6884:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6886:	6878      	ldr	r0, [r7, #4]
    6888:	4b14      	ldr	r3, [pc, #80]	; (68dc <_i2c_m_enable_implementation+0x80>)
    688a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    688c:	e016      	b.n	68bc <_i2c_m_enable_implementation+0x60>
		timeout--;
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	3b01      	subs	r3, #1
    6892:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6894:	68fb      	ldr	r3, [r7, #12]
    6896:	2b00      	cmp	r3, #0
    6898:	dc10      	bgt.n	68bc <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    689a:	68bb      	ldr	r3, [r7, #8]
    689c:	3b01      	subs	r3, #1
    689e:	60bb      	str	r3, [r7, #8]
    68a0:	68bb      	ldr	r3, [r7, #8]
    68a2:	2b00      	cmp	r3, #0
    68a4:	d007      	beq.n	68b6 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    68a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    68aa:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    68ac:	2110      	movs	r1, #16
    68ae:	6878      	ldr	r0, [r7, #4]
    68b0:	4b0b      	ldr	r3, [pc, #44]	; (68e0 <_i2c_m_enable_implementation+0x84>)
    68b2:	4798      	blx	r3
    68b4:	e002      	b.n	68bc <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    68b6:	f06f 0305 	mvn.w	r3, #5
    68ba:	e006      	b.n	68ca <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    68bc:	6878      	ldr	r0, [r7, #4]
    68be:	4b09      	ldr	r3, [pc, #36]	; (68e4 <_i2c_m_enable_implementation+0x88>)
    68c0:	4798      	blx	r3
    68c2:	4603      	mov	r3, r0
    68c4:	2b01      	cmp	r3, #1
    68c6:	d1e2      	bne.n	688e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    68c8:	2300      	movs	r3, #0
}
    68ca:	4618      	mov	r0, r3
    68cc:	3710      	adds	r7, #16
    68ce:	46bd      	mov	sp, r7
    68d0:	bd80      	pop	{r7, pc}
    68d2:	bf00      	nop
    68d4:	0000ee30 	.word	0x0000ee30
    68d8:	00003725 	.word	0x00003725
    68dc:	00005d71 	.word	0x00005d71
    68e0:	000061f5 	.word	0x000061f5
    68e4:	000061a5 	.word	0x000061a5

000068e8 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    68e8:	b580      	push	{r7, lr}
    68ea:	b084      	sub	sp, #16
    68ec:	af00      	add	r7, sp, #0
    68ee:	6078      	str	r0, [r7, #4]
    68f0:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    68f2:	6838      	ldr	r0, [r7, #0]
    68f4:	4b42      	ldr	r3, [pc, #264]	; (6a00 <_i2c_m_sync_init_impl+0x118>)
    68f6:	4798      	blx	r3
    68f8:	4603      	mov	r3, r0
    68fa:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    68fc:	2101      	movs	r1, #1
    68fe:	6838      	ldr	r0, [r7, #0]
    6900:	4b40      	ldr	r3, [pc, #256]	; (6a04 <_i2c_m_sync_init_impl+0x11c>)
    6902:	4798      	blx	r3
    6904:	4603      	mov	r3, r0
    6906:	f083 0301 	eor.w	r3, r3, #1
    690a:	b2db      	uxtb	r3, r3
    690c:	2b00      	cmp	r3, #0
    690e:	d020      	beq.n	6952 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6910:	7bfa      	ldrb	r2, [r7, #15]
    6912:	493d      	ldr	r1, [pc, #244]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    6914:	4613      	mov	r3, r2
    6916:	005b      	lsls	r3, r3, #1
    6918:	4413      	add	r3, r2
    691a:	00db      	lsls	r3, r3, #3
    691c:	440b      	add	r3, r1
    691e:	3304      	adds	r3, #4
    6920:	681b      	ldr	r3, [r3, #0]
    6922:	f003 031c 	and.w	r3, r3, #28
    6926:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6928:	2102      	movs	r1, #2
    692a:	6838      	ldr	r0, [r7, #0]
    692c:	4b37      	ldr	r3, [pc, #220]	; (6a0c <_i2c_m_sync_init_impl+0x124>)
    692e:	4798      	blx	r3
    6930:	4603      	mov	r3, r0
    6932:	2b00      	cmp	r3, #0
    6934:	d006      	beq.n	6944 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6936:	6838      	ldr	r0, [r7, #0]
    6938:	4b35      	ldr	r3, [pc, #212]	; (6a10 <_i2c_m_sync_init_impl+0x128>)
    693a:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    693c:	2102      	movs	r1, #2
    693e:	6838      	ldr	r0, [r7, #0]
    6940:	4b34      	ldr	r3, [pc, #208]	; (6a14 <_i2c_m_sync_init_impl+0x12c>)
    6942:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6944:	68bb      	ldr	r3, [r7, #8]
    6946:	f043 0301 	orr.w	r3, r3, #1
    694a:	4619      	mov	r1, r3
    694c:	6838      	ldr	r0, [r7, #0]
    694e:	4b32      	ldr	r3, [pc, #200]	; (6a18 <_i2c_m_sync_init_impl+0x130>)
    6950:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6952:	2101      	movs	r1, #1
    6954:	6838      	ldr	r0, [r7, #0]
    6956:	4b2f      	ldr	r3, [pc, #188]	; (6a14 <_i2c_m_sync_init_impl+0x12c>)
    6958:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    695a:	7bfa      	ldrb	r2, [r7, #15]
    695c:	492a      	ldr	r1, [pc, #168]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    695e:	4613      	mov	r3, r2
    6960:	005b      	lsls	r3, r3, #1
    6962:	4413      	add	r3, r2
    6964:	00db      	lsls	r3, r3, #3
    6966:	440b      	add	r3, r1
    6968:	3304      	adds	r3, #4
    696a:	681b      	ldr	r3, [r3, #0]
    696c:	4619      	mov	r1, r3
    696e:	6838      	ldr	r0, [r7, #0]
    6970:	4b29      	ldr	r3, [pc, #164]	; (6a18 <_i2c_m_sync_init_impl+0x130>)
    6972:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6974:	7bfa      	ldrb	r2, [r7, #15]
    6976:	4924      	ldr	r1, [pc, #144]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    6978:	4613      	mov	r3, r2
    697a:	005b      	lsls	r3, r3, #1
    697c:	4413      	add	r3, r2
    697e:	00db      	lsls	r3, r3, #3
    6980:	440b      	add	r3, r1
    6982:	3308      	adds	r3, #8
    6984:	681b      	ldr	r3, [r3, #0]
    6986:	4619      	mov	r1, r3
    6988:	6838      	ldr	r0, [r7, #0]
    698a:	4b24      	ldr	r3, [pc, #144]	; (6a1c <_i2c_m_sync_init_impl+0x134>)
    698c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    698e:	7bfa      	ldrb	r2, [r7, #15]
    6990:	491d      	ldr	r1, [pc, #116]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    6992:	4613      	mov	r3, r2
    6994:	005b      	lsls	r3, r3, #1
    6996:	4413      	add	r3, r2
    6998:	00db      	lsls	r3, r3, #3
    699a:	440b      	add	r3, r1
    699c:	330c      	adds	r3, #12
    699e:	681b      	ldr	r3, [r3, #0]
    69a0:	4619      	mov	r1, r3
    69a2:	6838      	ldr	r0, [r7, #0]
    69a4:	4b1e      	ldr	r3, [pc, #120]	; (6a20 <_i2c_m_sync_init_impl+0x138>)
    69a6:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    69a8:	7bfa      	ldrb	r2, [r7, #15]
    69aa:	4917      	ldr	r1, [pc, #92]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    69ac:	4613      	mov	r3, r2
    69ae:	005b      	lsls	r3, r3, #1
    69b0:	4413      	add	r3, r2
    69b2:	00db      	lsls	r3, r3, #3
    69b4:	440b      	add	r3, r1
    69b6:	3304      	adds	r3, #4
    69b8:	681b      	ldr	r3, [r3, #0]
    69ba:	0e1b      	lsrs	r3, r3, #24
    69bc:	b29b      	uxth	r3, r3
    69be:	f003 0303 	and.w	r3, r3, #3
    69c2:	b29a      	uxth	r2, r3
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	899b      	ldrh	r3, [r3, #12]
    69cc:	2b01      	cmp	r3, #1
    69ce:	bf8c      	ite	hi
    69d0:	2301      	movhi	r3, #1
    69d2:	2300      	movls	r3, #0
    69d4:	b2db      	uxtb	r3, r3
    69d6:	4619      	mov	r1, r3
    69d8:	6838      	ldr	r0, [r7, #0]
    69da:	4b12      	ldr	r3, [pc, #72]	; (6a24 <_i2c_m_sync_init_impl+0x13c>)
    69dc:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    69de:	7bfa      	ldrb	r2, [r7, #15]
    69e0:	4909      	ldr	r1, [pc, #36]	; (6a08 <_i2c_m_sync_init_impl+0x120>)
    69e2:	4613      	mov	r3, r2
    69e4:	005b      	lsls	r3, r3, #1
    69e6:	4413      	add	r3, r2
    69e8:	00db      	lsls	r3, r3, #3
    69ea:	440b      	add	r3, r1
    69ec:	3312      	adds	r3, #18
    69ee:	881a      	ldrh	r2, [r3, #0]
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    69f4:	2300      	movs	r3, #0
}
    69f6:	4618      	mov	r0, r3
    69f8:	3710      	adds	r7, #16
    69fa:	46bd      	mov	sp, r7
    69fc:	bd80      	pop	{r7, pc}
    69fe:	bf00      	nop
    6a00:	00006279 	.word	0x00006279
    6a04:	00005c4d 	.word	0x00005c4d
    6a08:	20000018 	.word	0x20000018
    6a0c:	00005df1 	.word	0x00005df1
    6a10:	00005d99 	.word	0x00005d99
    6a14:	00005c29 	.word	0x00005c29
    6a18:	00005e21 	.word	0x00005e21
    6a1c:	00005fc9 	.word	0x00005fc9
    6a20:	00006011 	.word	0x00006011
    6a24:	0000604d 	.word	0x0000604d

00006a28 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6a28:	b580      	push	{r7, lr}
    6a2a:	b082      	sub	sp, #8
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	6078      	str	r0, [r7, #4]
    6a30:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6a32:	687b      	ldr	r3, [r7, #4]
    6a34:	2b00      	cmp	r3, #0
    6a36:	d004      	beq.n	6a42 <_spi_load_regs_master+0x1a>
    6a38:	683b      	ldr	r3, [r7, #0]
    6a3a:	2b00      	cmp	r3, #0
    6a3c:	d001      	beq.n	6a42 <_spi_load_regs_master+0x1a>
    6a3e:	2301      	movs	r3, #1
    6a40:	e000      	b.n	6a44 <_spi_load_regs_master+0x1c>
    6a42:	2300      	movs	r3, #0
    6a44:	f003 0301 	and.w	r3, r3, #1
    6a48:	b2db      	uxtb	r3, r3
    6a4a:	f640 1209 	movw	r2, #2313	; 0x909
    6a4e:	4915      	ldr	r1, [pc, #84]	; (6aa4 <_spi_load_regs_master+0x7c>)
    6a50:	4618      	mov	r0, r3
    6a52:	4b15      	ldr	r3, [pc, #84]	; (6aa8 <_spi_load_regs_master+0x80>)
    6a54:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6a56:	683b      	ldr	r3, [r7, #0]
    6a58:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6a5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6a5e:	f023 0301 	bic.w	r3, r3, #1
    6a62:	4619      	mov	r1, r3
    6a64:	6878      	ldr	r0, [r7, #4]
    6a66:	4b11      	ldr	r3, [pc, #68]	; (6aac <_spi_load_regs_master+0x84>)
    6a68:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6a6a:	683b      	ldr	r3, [r7, #0]
    6a6c:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6a6e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6a72:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6a7a:	4619      	mov	r1, r3
    6a7c:	6878      	ldr	r0, [r7, #4]
    6a7e:	4b0c      	ldr	r3, [pc, #48]	; (6ab0 <_spi_load_regs_master+0x88>)
    6a80:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6a82:	683b      	ldr	r3, [r7, #0]
    6a84:	7b1b      	ldrb	r3, [r3, #12]
    6a86:	4619      	mov	r1, r3
    6a88:	6878      	ldr	r0, [r7, #4]
    6a8a:	4b0a      	ldr	r3, [pc, #40]	; (6ab4 <_spi_load_regs_master+0x8c>)
    6a8c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6a8e:	683b      	ldr	r3, [r7, #0]
    6a90:	7b5b      	ldrb	r3, [r3, #13]
    6a92:	4619      	mov	r1, r3
    6a94:	6878      	ldr	r0, [r7, #4]
    6a96:	4b08      	ldr	r3, [pc, #32]	; (6ab8 <_spi_load_regs_master+0x90>)
    6a98:	4798      	blx	r3
}
    6a9a:	bf00      	nop
    6a9c:	3708      	adds	r7, #8
    6a9e:	46bd      	mov	sp, r7
    6aa0:	bd80      	pop	{r7, pc}
    6aa2:	bf00      	nop
    6aa4:	0000ee30 	.word	0x0000ee30
    6aa8:	00003725 	.word	0x00003725
    6aac:	00005ed5 	.word	0x00005ed5
    6ab0:	00005fed 	.word	0x00005fed
    6ab4:	0000602d 	.word	0x0000602d
    6ab8:	00006165 	.word	0x00006165

00006abc <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6abc:	b580      	push	{r7, lr}
    6abe:	b082      	sub	sp, #8
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
    6ac4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d004      	beq.n	6ad6 <_spi_load_regs_slave+0x1a>
    6acc:	683b      	ldr	r3, [r7, #0]
    6ace:	2b00      	cmp	r3, #0
    6ad0:	d001      	beq.n	6ad6 <_spi_load_regs_slave+0x1a>
    6ad2:	2301      	movs	r3, #1
    6ad4:	e000      	b.n	6ad8 <_spi_load_regs_slave+0x1c>
    6ad6:	2300      	movs	r3, #0
    6ad8:	f003 0301 	and.w	r3, r3, #1
    6adc:	b2db      	uxtb	r3, r3
    6ade:	f640 121d 	movw	r2, #2333	; 0x91d
    6ae2:	491a      	ldr	r1, [pc, #104]	; (6b4c <_spi_load_regs_slave+0x90>)
    6ae4:	4618      	mov	r0, r3
    6ae6:	4b1a      	ldr	r3, [pc, #104]	; (6b50 <_spi_load_regs_slave+0x94>)
    6ae8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6aea:	683b      	ldr	r3, [r7, #0]
    6aec:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6aee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6af2:	f023 0301 	bic.w	r3, r3, #1
    6af6:	4619      	mov	r1, r3
    6af8:	6878      	ldr	r0, [r7, #4]
    6afa:	4b16      	ldr	r3, [pc, #88]	; (6b54 <_spi_load_regs_slave+0x98>)
    6afc:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6afe:	683b      	ldr	r3, [r7, #0]
    6b00:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6b02:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6b06:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6b0e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6b12:	4619      	mov	r1, r3
    6b14:	6878      	ldr	r0, [r7, #4]
    6b16:	4b10      	ldr	r3, [pc, #64]	; (6b58 <_spi_load_regs_slave+0x9c>)
    6b18:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6b1a:	683b      	ldr	r3, [r7, #0]
    6b1c:	689b      	ldr	r3, [r3, #8]
    6b1e:	4619      	mov	r1, r3
    6b20:	6878      	ldr	r0, [r7, #4]
    6b22:	4b0e      	ldr	r3, [pc, #56]	; (6b5c <_spi_load_regs_slave+0xa0>)
    6b24:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6b26:	683b      	ldr	r3, [r7, #0]
    6b28:	7b5b      	ldrb	r3, [r3, #13]
    6b2a:	4619      	mov	r1, r3
    6b2c:	6878      	ldr	r0, [r7, #4]
    6b2e:	4b0c      	ldr	r3, [pc, #48]	; (6b60 <_spi_load_regs_slave+0xa4>)
    6b30:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6b32:	bf00      	nop
    6b34:	f04f 31ff 	mov.w	r1, #4294967295
    6b38:	6878      	ldr	r0, [r7, #4]
    6b3a:	4b0a      	ldr	r3, [pc, #40]	; (6b64 <_spi_load_regs_slave+0xa8>)
    6b3c:	4798      	blx	r3
    6b3e:	4603      	mov	r3, r0
    6b40:	2b00      	cmp	r3, #0
    6b42:	d1f7      	bne.n	6b34 <_spi_load_regs_slave+0x78>
		;
}
    6b44:	bf00      	nop
    6b46:	3708      	adds	r7, #8
    6b48:	46bd      	mov	sp, r7
    6b4a:	bd80      	pop	{r7, pc}
    6b4c:	0000ee30 	.word	0x0000ee30
    6b50:	00003725 	.word	0x00003725
    6b54:	00005ed5 	.word	0x00005ed5
    6b58:	00005fed 	.word	0x00005fed
    6b5c:	000060d1 	.word	0x000060d1
    6b60:	00006165 	.word	0x00006165
    6b64:	00005c99 	.word	0x00005c99

00006b68 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6b68:	b580      	push	{r7, lr}
    6b6a:	b084      	sub	sp, #16
    6b6c:	af00      	add	r7, sp, #0
    6b6e:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	4618      	mov	r0, r3
    6b74:	4b11      	ldr	r3, [pc, #68]	; (6bbc <_spi_get_regs+0x54>)
    6b76:	4798      	blx	r3
    6b78:	4603      	mov	r3, r0
    6b7a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6b7c:	2300      	movs	r3, #0
    6b7e:	73fb      	strb	r3, [r7, #15]
    6b80:	e014      	b.n	6bac <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6b82:	7bfa      	ldrb	r2, [r7, #15]
    6b84:	490e      	ldr	r1, [pc, #56]	; (6bc0 <_spi_get_regs+0x58>)
    6b86:	4613      	mov	r3, r2
    6b88:	011b      	lsls	r3, r3, #4
    6b8a:	4413      	add	r3, r2
    6b8c:	440b      	add	r3, r1
    6b8e:	3310      	adds	r3, #16
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	7bba      	ldrb	r2, [r7, #14]
    6b94:	429a      	cmp	r2, r3
    6b96:	d106      	bne.n	6ba6 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6b98:	7bfa      	ldrb	r2, [r7, #15]
    6b9a:	4613      	mov	r3, r2
    6b9c:	011b      	lsls	r3, r3, #4
    6b9e:	4413      	add	r3, r2
    6ba0:	4a07      	ldr	r2, [pc, #28]	; (6bc0 <_spi_get_regs+0x58>)
    6ba2:	4413      	add	r3, r2
    6ba4:	e006      	b.n	6bb4 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6ba6:	7bfb      	ldrb	r3, [r7, #15]
    6ba8:	3301      	adds	r3, #1
    6baa:	73fb      	strb	r3, [r7, #15]
    6bac:	7bfb      	ldrb	r3, [r7, #15]
    6bae:	2b01      	cmp	r3, #1
    6bb0:	d9e7      	bls.n	6b82 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6bb2:	2300      	movs	r3, #0
}
    6bb4:	4618      	mov	r0, r3
    6bb6:	3710      	adds	r7, #16
    6bb8:	46bd      	mov	sp, r7
    6bba:	bd80      	pop	{r7, pc}
    6bbc:	0000621d 	.word	0x0000621d
    6bc0:	0000ee6c 	.word	0x0000ee6c

00006bc4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6bc4:	b580      	push	{r7, lr}
    6bc6:	b084      	sub	sp, #16
    6bc8:	af00      	add	r7, sp, #0
    6bca:	6078      	str	r0, [r7, #4]
    6bcc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6bce:	683b      	ldr	r3, [r7, #0]
    6bd0:	4618      	mov	r0, r3
    6bd2:	4b35      	ldr	r3, [pc, #212]	; (6ca8 <_spi_m_sync_init+0xe4>)
    6bd4:	4798      	blx	r3
    6bd6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d004      	beq.n	6be8 <_spi_m_sync_init+0x24>
    6bde:	683b      	ldr	r3, [r7, #0]
    6be0:	2b00      	cmp	r3, #0
    6be2:	d001      	beq.n	6be8 <_spi_m_sync_init+0x24>
    6be4:	2301      	movs	r3, #1
    6be6:	e000      	b.n	6bea <_spi_m_sync_init+0x26>
    6be8:	2300      	movs	r3, #0
    6bea:	f003 0301 	and.w	r3, r3, #1
    6bee:	b2db      	uxtb	r3, r3
    6bf0:	f640 123f 	movw	r2, #2367	; 0x93f
    6bf4:	492d      	ldr	r1, [pc, #180]	; (6cac <_spi_m_sync_init+0xe8>)
    6bf6:	4618      	mov	r0, r3
    6bf8:	4b2d      	ldr	r3, [pc, #180]	; (6cb0 <_spi_m_sync_init+0xec>)
    6bfa:	4798      	blx	r3

	if (regs == NULL) {
    6bfc:	68fb      	ldr	r3, [r7, #12]
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d102      	bne.n	6c08 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6c02:	f06f 030c 	mvn.w	r3, #12
    6c06:	e04a      	b.n	6c9e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6c08:	2101      	movs	r1, #1
    6c0a:	6838      	ldr	r0, [r7, #0]
    6c0c:	4b29      	ldr	r3, [pc, #164]	; (6cb4 <_spi_m_sync_init+0xf0>)
    6c0e:	4798      	blx	r3
    6c10:	4603      	mov	r3, r0
    6c12:	f083 0301 	eor.w	r3, r3, #1
    6c16:	b2db      	uxtb	r3, r3
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d019      	beq.n	6c50 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6c1c:	68fb      	ldr	r3, [r7, #12]
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	f003 031c 	and.w	r3, r3, #28
    6c24:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6c26:	2102      	movs	r1, #2
    6c28:	6838      	ldr	r0, [r7, #0]
    6c2a:	4b23      	ldr	r3, [pc, #140]	; (6cb8 <_spi_m_sync_init+0xf4>)
    6c2c:	4798      	blx	r3
    6c2e:	4603      	mov	r3, r0
    6c30:	2b00      	cmp	r3, #0
    6c32:	d006      	beq.n	6c42 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6c34:	6838      	ldr	r0, [r7, #0]
    6c36:	4b21      	ldr	r3, [pc, #132]	; (6cbc <_spi_m_sync_init+0xf8>)
    6c38:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6c3a:	2102      	movs	r1, #2
    6c3c:	6838      	ldr	r0, [r7, #0]
    6c3e:	4b20      	ldr	r3, [pc, #128]	; (6cc0 <_spi_m_sync_init+0xfc>)
    6c40:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6c42:	68bb      	ldr	r3, [r7, #8]
    6c44:	f043 0301 	orr.w	r3, r3, #1
    6c48:	4619      	mov	r1, r3
    6c4a:	6838      	ldr	r0, [r7, #0]
    6c4c:	4b1d      	ldr	r3, [pc, #116]	; (6cc4 <_spi_m_sync_init+0x100>)
    6c4e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6c50:	2101      	movs	r1, #1
    6c52:	6838      	ldr	r0, [r7, #0]
    6c54:	4b1a      	ldr	r3, [pc, #104]	; (6cc0 <_spi_m_sync_init+0xfc>)
    6c56:	4798      	blx	r3

	dev->prvt = hw;
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	683a      	ldr	r2, [r7, #0]
    6c5c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6c5e:	68fb      	ldr	r3, [r7, #12]
    6c60:	681b      	ldr	r3, [r3, #0]
    6c62:	f003 031c 	and.w	r3, r3, #28
    6c66:	2b08      	cmp	r3, #8
    6c68:	d104      	bne.n	6c74 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6c6a:	68f9      	ldr	r1, [r7, #12]
    6c6c:	6838      	ldr	r0, [r7, #0]
    6c6e:	4b16      	ldr	r3, [pc, #88]	; (6cc8 <_spi_m_sync_init+0x104>)
    6c70:	4798      	blx	r3
    6c72:	e003      	b.n	6c7c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6c74:	68f9      	ldr	r1, [r7, #12]
    6c76:	6838      	ldr	r0, [r7, #0]
    6c78:	4b14      	ldr	r3, [pc, #80]	; (6ccc <_spi_m_sync_init+0x108>)
    6c7a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6c7c:	68fb      	ldr	r3, [r7, #12]
    6c7e:	685b      	ldr	r3, [r3, #4]
    6c80:	f003 0307 	and.w	r3, r3, #7
    6c84:	2b00      	cmp	r3, #0
    6c86:	d101      	bne.n	6c8c <_spi_m_sync_init+0xc8>
    6c88:	2201      	movs	r2, #1
    6c8a:	e000      	b.n	6c8e <_spi_m_sync_init+0xca>
    6c8c:	2202      	movs	r2, #2
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6c92:	68fb      	ldr	r3, [r7, #12]
    6c94:	89db      	ldrh	r3, [r3, #14]
    6c96:	b29a      	uxth	r2, r3
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6c9c:	2300      	movs	r3, #0
}
    6c9e:	4618      	mov	r0, r3
    6ca0:	3710      	adds	r7, #16
    6ca2:	46bd      	mov	sp, r7
    6ca4:	bd80      	pop	{r7, pc}
    6ca6:	bf00      	nop
    6ca8:	00006b69 	.word	0x00006b69
    6cac:	0000ee30 	.word	0x0000ee30
    6cb0:	00003725 	.word	0x00003725
    6cb4:	00005c99 	.word	0x00005c99
    6cb8:	00005ea5 	.word	0x00005ea5
    6cbc:	00005e7d 	.word	0x00005e7d
    6cc0:	00005c75 	.word	0x00005c75
    6cc4:	00005ed5 	.word	0x00005ed5
    6cc8:	00006abd 	.word	0x00006abd
    6ccc:	00006a29 	.word	0x00006a29

00006cd0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6cd0:	b580      	push	{r7, lr}
    6cd2:	b082      	sub	sp, #8
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6cd8:	bf00      	nop
    6cda:	2103      	movs	r1, #3
    6cdc:	6878      	ldr	r0, [r7, #4]
    6cde:	4b06      	ldr	r3, [pc, #24]	; (6cf8 <_spi_wait_bus_idle+0x28>)
    6ce0:	4798      	blx	r3
    6ce2:	4603      	mov	r3, r0
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d0f8      	beq.n	6cda <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6ce8:	2103      	movs	r1, #3
    6cea:	6878      	ldr	r0, [r7, #4]
    6cec:	4b03      	ldr	r3, [pc, #12]	; (6cfc <_spi_wait_bus_idle+0x2c>)
    6cee:	4798      	blx	r3
}
    6cf0:	bf00      	nop
    6cf2:	3708      	adds	r7, #8
    6cf4:	46bd      	mov	sp, r7
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	00005d0f 	.word	0x00005d0f
    6cfc:	00005d51 	.word	0x00005d51

00006d00 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b086      	sub	sp, #24
    6d04:	af00      	add	r7, sp, #0
    6d06:	60f8      	str	r0, [r7, #12]
    6d08:	60b9      	str	r1, [r7, #8]
    6d0a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6d0c:	68bb      	ldr	r3, [r7, #8]
    6d0e:	f003 0304 	and.w	r3, r3, #4
    6d12:	2b00      	cmp	r3, #0
    6d14:	d101      	bne.n	6d1a <_spi_rx_check_and_receive+0x1a>
		return false;
    6d16:	2300      	movs	r3, #0
    6d18:	e022      	b.n	6d60 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6d1a:	68f8      	ldr	r0, [r7, #12]
    6d1c:	4b12      	ldr	r3, [pc, #72]	; (6d68 <_spi_rx_check_and_receive+0x68>)
    6d1e:	4798      	blx	r3
    6d20:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	685b      	ldr	r3, [r3, #4]
    6d26:	2b00      	cmp	r3, #0
    6d28:	d014      	beq.n	6d54 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6d2a:	687b      	ldr	r3, [r7, #4]
    6d2c:	685b      	ldr	r3, [r3, #4]
    6d2e:	1c59      	adds	r1, r3, #1
    6d30:	687a      	ldr	r2, [r7, #4]
    6d32:	6051      	str	r1, [r2, #4]
    6d34:	697a      	ldr	r2, [r7, #20]
    6d36:	b2d2      	uxtb	r2, r2
    6d38:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	7c1b      	ldrb	r3, [r3, #16]
    6d3e:	2b01      	cmp	r3, #1
    6d40:	d908      	bls.n	6d54 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	685b      	ldr	r3, [r3, #4]
    6d46:	1c59      	adds	r1, r3, #1
    6d48:	687a      	ldr	r2, [r7, #4]
    6d4a:	6051      	str	r1, [r2, #4]
    6d4c:	697a      	ldr	r2, [r7, #20]
    6d4e:	0a12      	lsrs	r2, r2, #8
    6d50:	b2d2      	uxtb	r2, r2
    6d52:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	68db      	ldr	r3, [r3, #12]
    6d58:	1c5a      	adds	r2, r3, #1
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	60da      	str	r2, [r3, #12]

	return true;
    6d5e:	2301      	movs	r3, #1
}
    6d60:	4618      	mov	r0, r3
    6d62:	3718      	adds	r7, #24
    6d64:	46bd      	mov	sp, r7
    6d66:	bd80      	pop	{r7, pc}
    6d68:	0000614d 	.word	0x0000614d

00006d6c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6d6c:	b580      	push	{r7, lr}
    6d6e:	b086      	sub	sp, #24
    6d70:	af00      	add	r7, sp, #0
    6d72:	60f8      	str	r0, [r7, #12]
    6d74:	60b9      	str	r1, [r7, #8]
    6d76:	607a      	str	r2, [r7, #4]
    6d78:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6d7a:	68bb      	ldr	r3, [r7, #8]
    6d7c:	f003 0301 	and.w	r3, r3, #1
    6d80:	2b00      	cmp	r3, #0
    6d82:	d028      	beq.n	6dd6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	681b      	ldr	r3, [r3, #0]
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d018      	beq.n	6dbe <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	681b      	ldr	r3, [r3, #0]
    6d90:	1c59      	adds	r1, r3, #1
    6d92:	687a      	ldr	r2, [r7, #4]
    6d94:	6011      	str	r1, [r2, #0]
    6d96:	781b      	ldrb	r3, [r3, #0]
    6d98:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	7c1b      	ldrb	r3, [r3, #16]
    6d9e:	2b01      	cmp	r3, #1
    6da0:	d90f      	bls.n	6dc2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	681b      	ldr	r3, [r3, #0]
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	021b      	lsls	r3, r3, #8
    6daa:	461a      	mov	r2, r3
    6dac:	697b      	ldr	r3, [r7, #20]
    6dae:	4313      	orrs	r3, r2
    6db0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	681b      	ldr	r3, [r3, #0]
    6db6:	1c5a      	adds	r2, r3, #1
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	601a      	str	r2, [r3, #0]
    6dbc:	e001      	b.n	6dc2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6dbe:	887b      	ldrh	r3, [r7, #2]
    6dc0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	689b      	ldr	r3, [r3, #8]
    6dc6:	1c5a      	adds	r2, r3, #1
    6dc8:	687b      	ldr	r3, [r7, #4]
    6dca:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6dcc:	6979      	ldr	r1, [r7, #20]
    6dce:	68f8      	ldr	r0, [r7, #12]
    6dd0:	4b03      	ldr	r3, [pc, #12]	; (6de0 <_spi_tx_check_and_send+0x74>)
    6dd2:	4798      	blx	r3
    6dd4:	e000      	b.n	6dd8 <_spi_tx_check_and_send+0x6c>
		return;
    6dd6:	bf00      	nop
}
    6dd8:	3718      	adds	r7, #24
    6dda:	46bd      	mov	sp, r7
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	bf00      	nop
    6de0:	00006131 	.word	0x00006131

00006de4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6de4:	b580      	push	{r7, lr}
    6de6:	b082      	sub	sp, #8
    6de8:	af00      	add	r7, sp, #0
    6dea:	6078      	str	r0, [r7, #4]
    6dec:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6df4:	2b00      	cmp	r3, #0
    6df6:	d00b      	beq.n	6e10 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6dfc:	6838      	ldr	r0, [r7, #0]
    6dfe:	4b07      	ldr	r3, [pc, #28]	; (6e1c <_spi_err_check+0x38>)
    6e00:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6e02:	2180      	movs	r1, #128	; 0x80
    6e04:	6838      	ldr	r0, [r7, #0]
    6e06:	4b06      	ldr	r3, [pc, #24]	; (6e20 <_spi_err_check+0x3c>)
    6e08:	4798      	blx	r3
		return ERR_OVERFLOW;
    6e0a:	f06f 0312 	mvn.w	r3, #18
    6e0e:	e000      	b.n	6e12 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6e10:	2300      	movs	r3, #0
}
    6e12:	4618      	mov	r0, r3
    6e14:	3708      	adds	r7, #8
    6e16:	46bd      	mov	sp, r7
    6e18:	bd80      	pop	{r7, pc}
    6e1a:	bf00      	nop
    6e1c:	00006185 	.word	0x00006185
    6e20:	00005d51 	.word	0x00005d51

00006e24 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6e24:	b590      	push	{r4, r7, lr}
    6e26:	b08b      	sub	sp, #44	; 0x2c
    6e28:	af00      	add	r7, sp, #0
    6e2a:	6078      	str	r0, [r7, #4]
    6e2c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	681b      	ldr	r3, [r3, #0]
    6e32:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6e34:	2300      	movs	r3, #0
    6e36:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6e38:	683b      	ldr	r3, [r7, #0]
    6e3a:	681b      	ldr	r3, [r3, #0]
    6e3c:	60bb      	str	r3, [r7, #8]
    6e3e:	683b      	ldr	r3, [r7, #0]
    6e40:	685b      	ldr	r3, [r3, #4]
    6e42:	60fb      	str	r3, [r7, #12]
    6e44:	2300      	movs	r3, #0
    6e46:	613b      	str	r3, [r7, #16]
    6e48:	2300      	movs	r3, #0
    6e4a:	617b      	str	r3, [r7, #20]
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	791b      	ldrb	r3, [r3, #4]
    6e50:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	2b00      	cmp	r3, #0
    6e56:	d004      	beq.n	6e62 <_spi_m_sync_trans+0x3e>
    6e58:	6a3b      	ldr	r3, [r7, #32]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d001      	beq.n	6e62 <_spi_m_sync_trans+0x3e>
    6e5e:	2301      	movs	r3, #1
    6e60:	e000      	b.n	6e64 <_spi_m_sync_trans+0x40>
    6e62:	2300      	movs	r3, #0
    6e64:	f003 0301 	and.w	r3, r3, #1
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    6e6e:	492b      	ldr	r1, [pc, #172]	; (6f1c <_spi_m_sync_trans+0xf8>)
    6e70:	4618      	mov	r0, r3
    6e72:	4b2b      	ldr	r3, [pc, #172]	; (6f20 <_spi_m_sync_trans+0xfc>)
    6e74:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6e76:	2107      	movs	r1, #7
    6e78:	6a38      	ldr	r0, [r7, #32]
    6e7a:	4b2a      	ldr	r3, [pc, #168]	; (6f24 <_spi_m_sync_trans+0x100>)
    6e7c:	4798      	blx	r3
    6e7e:	4603      	mov	r3, r0
    6e80:	2b00      	cmp	r3, #0
    6e82:	d002      	beq.n	6e8a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6e84:	f06f 0303 	mvn.w	r3, #3
    6e88:	e043      	b.n	6f12 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6e8a:	6a38      	ldr	r0, [r7, #32]
    6e8c:	4b26      	ldr	r3, [pc, #152]	; (6f28 <_spi_m_sync_trans+0x104>)
    6e8e:	4798      	blx	r3
    6e90:	4603      	mov	r3, r0
    6e92:	f083 0301 	eor.w	r3, r3, #1
    6e96:	b2db      	uxtb	r3, r3
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d002      	beq.n	6ea2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6e9c:	f06f 0313 	mvn.w	r3, #19
    6ea0:	e037      	b.n	6f12 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6ea2:	6a38      	ldr	r0, [r7, #32]
    6ea4:	4b21      	ldr	r3, [pc, #132]	; (6f2c <_spi_m_sync_trans+0x108>)
    6ea6:	4798      	blx	r3
    6ea8:	4603      	mov	r3, r0
    6eaa:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6eac:	f107 0308 	add.w	r3, r7, #8
    6eb0:	461a      	mov	r2, r3
    6eb2:	69f9      	ldr	r1, [r7, #28]
    6eb4:	6a38      	ldr	r0, [r7, #32]
    6eb6:	4b1e      	ldr	r3, [pc, #120]	; (6f30 <_spi_m_sync_trans+0x10c>)
    6eb8:	4798      	blx	r3
    6eba:	4603      	mov	r3, r0
    6ebc:	f083 0301 	eor.w	r3, r3, #1
    6ec0:	b2db      	uxtb	r3, r3
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d00b      	beq.n	6ede <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6ec6:	697a      	ldr	r2, [r7, #20]
    6ec8:	693b      	ldr	r3, [r7, #16]
    6eca:	429a      	cmp	r2, r3
    6ecc:	d307      	bcc.n	6ede <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	88db      	ldrh	r3, [r3, #6]
    6ed2:	f107 0208 	add.w	r2, r7, #8
    6ed6:	69f9      	ldr	r1, [r7, #28]
    6ed8:	6a38      	ldr	r0, [r7, #32]
    6eda:	4c16      	ldr	r4, [pc, #88]	; (6f34 <_spi_m_sync_trans+0x110>)
    6edc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6ede:	6a39      	ldr	r1, [r7, #32]
    6ee0:	69f8      	ldr	r0, [r7, #28]
    6ee2:	4b15      	ldr	r3, [pc, #84]	; (6f38 <_spi_m_sync_trans+0x114>)
    6ee4:	4798      	blx	r3
    6ee6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6eea:	2b00      	cmp	r3, #0
    6eec:	db0c      	blt.n	6f08 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6eee:	693a      	ldr	r2, [r7, #16]
    6ef0:	683b      	ldr	r3, [r7, #0]
    6ef2:	689b      	ldr	r3, [r3, #8]
    6ef4:	429a      	cmp	r2, r3
    6ef6:	d3d4      	bcc.n	6ea2 <_spi_m_sync_trans+0x7e>
    6ef8:	697a      	ldr	r2, [r7, #20]
    6efa:	683b      	ldr	r3, [r7, #0]
    6efc:	689b      	ldr	r3, [r3, #8]
    6efe:	429a      	cmp	r2, r3
    6f00:	d3cf      	bcc.n	6ea2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6f02:	693b      	ldr	r3, [r7, #16]
    6f04:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6f06:	e000      	b.n	6f0a <_spi_m_sync_trans+0xe6>
			break;
    6f08:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6f0a:	6a38      	ldr	r0, [r7, #32]
    6f0c:	4b0b      	ldr	r3, [pc, #44]	; (6f3c <_spi_m_sync_trans+0x118>)
    6f0e:	4798      	blx	r3

	return rc;
    6f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6f12:	4618      	mov	r0, r3
    6f14:	372c      	adds	r7, #44	; 0x2c
    6f16:	46bd      	mov	sp, r7
    6f18:	bd90      	pop	{r4, r7, pc}
    6f1a:	bf00      	nop
    6f1c:	0000ee30 	.word	0x0000ee30
    6f20:	00003725 	.word	0x00003725
    6f24:	00005c99 	.word	0x00005c99
    6f28:	00005e45 	.word	0x00005e45
    6f2c:	00005d37 	.word	0x00005d37
    6f30:	00006d01 	.word	0x00006d01
    6f34:	00006d6d 	.word	0x00006d6d
    6f38:	00006de5 	.word	0x00006de5
    6f3c:	00006cd1 	.word	0x00006cd1

00006f40 <__NVIC_EnableIRQ>:
{
    6f40:	b480      	push	{r7}
    6f42:	b083      	sub	sp, #12
    6f44:	af00      	add	r7, sp, #0
    6f46:	4603      	mov	r3, r0
    6f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	db0b      	blt.n	6f6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f52:	4909      	ldr	r1, [pc, #36]	; (6f78 <__NVIC_EnableIRQ+0x38>)
    6f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f58:	095b      	lsrs	r3, r3, #5
    6f5a:	88fa      	ldrh	r2, [r7, #6]
    6f5c:	f002 021f 	and.w	r2, r2, #31
    6f60:	2001      	movs	r0, #1
    6f62:	fa00 f202 	lsl.w	r2, r0, r2
    6f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f6a:	bf00      	nop
    6f6c:	370c      	adds	r7, #12
    6f6e:	46bd      	mov	sp, r7
    6f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f74:	4770      	bx	lr
    6f76:	bf00      	nop
    6f78:	e000e100 	.word	0xe000e100

00006f7c <__NVIC_DisableIRQ>:
{
    6f7c:	b480      	push	{r7}
    6f7e:	b083      	sub	sp, #12
    6f80:	af00      	add	r7, sp, #0
    6f82:	4603      	mov	r3, r0
    6f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	db10      	blt.n	6fb0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f8e:	490b      	ldr	r1, [pc, #44]	; (6fbc <__NVIC_DisableIRQ+0x40>)
    6f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6f94:	095b      	lsrs	r3, r3, #5
    6f96:	88fa      	ldrh	r2, [r7, #6]
    6f98:	f002 021f 	and.w	r2, r2, #31
    6f9c:	2001      	movs	r0, #1
    6f9e:	fa00 f202 	lsl.w	r2, r0, r2
    6fa2:	3320      	adds	r3, #32
    6fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fac:	f3bf 8f6f 	isb	sy
}
    6fb0:	bf00      	nop
    6fb2:	370c      	adds	r7, #12
    6fb4:	46bd      	mov	sp, r7
    6fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fba:	4770      	bx	lr
    6fbc:	e000e100 	.word	0xe000e100

00006fc0 <__NVIC_ClearPendingIRQ>:
{
    6fc0:	b480      	push	{r7}
    6fc2:	b083      	sub	sp, #12
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	4603      	mov	r3, r0
    6fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	db0c      	blt.n	6fec <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6fd2:	4909      	ldr	r1, [pc, #36]	; (6ff8 <__NVIC_ClearPendingIRQ+0x38>)
    6fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6fd8:	095b      	lsrs	r3, r3, #5
    6fda:	88fa      	ldrh	r2, [r7, #6]
    6fdc:	f002 021f 	and.w	r2, r2, #31
    6fe0:	2001      	movs	r0, #1
    6fe2:	fa00 f202 	lsl.w	r2, r0, r2
    6fe6:	3360      	adds	r3, #96	; 0x60
    6fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fec:	bf00      	nop
    6fee:	370c      	adds	r7, #12
    6ff0:	46bd      	mov	sp, r7
    6ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ff6:	4770      	bx	lr
    6ff8:	e000e100 	.word	0xe000e100

00006ffc <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6ffc:	b480      	push	{r7}
    6ffe:	b083      	sub	sp, #12
    7000:	af00      	add	r7, sp, #0
    7002:	6078      	str	r0, [r7, #4]
    7004:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7006:	bf00      	nop
    7008:	687b      	ldr	r3, [r7, #4]
    700a:	689a      	ldr	r2, [r3, #8]
    700c:	683b      	ldr	r3, [r7, #0]
    700e:	4013      	ands	r3, r2
    7010:	2b00      	cmp	r3, #0
    7012:	d1f9      	bne.n	7008 <hri_tcc_wait_for_sync+0xc>
	};
}
    7014:	bf00      	nop
    7016:	370c      	adds	r7, #12
    7018:	46bd      	mov	sp, r7
    701a:	f85d 7b04 	ldr.w	r7, [sp], #4
    701e:	4770      	bx	lr

00007020 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7020:	b480      	push	{r7}
    7022:	b083      	sub	sp, #12
    7024:	af00      	add	r7, sp, #0
    7026:	6078      	str	r0, [r7, #4]
    7028:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	689a      	ldr	r2, [r3, #8]
    702e:	683b      	ldr	r3, [r7, #0]
    7030:	4013      	ands	r3, r2
    7032:	2b00      	cmp	r3, #0
    7034:	bf14      	ite	ne
    7036:	2301      	movne	r3, #1
    7038:	2300      	moveq	r3, #0
    703a:	b2db      	uxtb	r3, r3
}
    703c:	4618      	mov	r0, r3
    703e:	370c      	adds	r7, #12
    7040:	46bd      	mov	sp, r7
    7042:	f85d 7b04 	ldr.w	r7, [sp], #4
    7046:	4770      	bx	lr

00007048 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7048:	b480      	push	{r7}
    704a:	b083      	sub	sp, #12
    704c:	af00      	add	r7, sp, #0
    704e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7054:	f003 0301 	and.w	r3, r3, #1
    7058:	2b00      	cmp	r3, #0
    705a:	bf14      	ite	ne
    705c:	2301      	movne	r3, #1
    705e:	2300      	moveq	r3, #0
    7060:	b2db      	uxtb	r3, r3
}
    7062:	4618      	mov	r0, r3
    7064:	370c      	adds	r7, #12
    7066:	46bd      	mov	sp, r7
    7068:	f85d 7b04 	ldr.w	r7, [sp], #4
    706c:	4770      	bx	lr

0000706e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    706e:	b480      	push	{r7}
    7070:	b083      	sub	sp, #12
    7072:	af00      	add	r7, sp, #0
    7074:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	2201      	movs	r2, #1
    707a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    707c:	bf00      	nop
    707e:	370c      	adds	r7, #12
    7080:	46bd      	mov	sp, r7
    7082:	f85d 7b04 	ldr.w	r7, [sp], #4
    7086:	4770      	bx	lr

00007088 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7088:	b480      	push	{r7}
    708a:	b083      	sub	sp, #12
    708c:	af00      	add	r7, sp, #0
    708e:	6078      	str	r0, [r7, #4]
    7090:	460b      	mov	r3, r1
    7092:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	78fa      	ldrb	r2, [r7, #3]
    7098:	715a      	strb	r2, [r3, #5]
}
    709a:	bf00      	nop
    709c:	370c      	adds	r7, #12
    709e:	46bd      	mov	sp, r7
    70a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    70a4:	4770      	bx	lr

000070a6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    70a6:	b480      	push	{r7}
    70a8:	b083      	sub	sp, #12
    70aa:	af00      	add	r7, sp, #0
    70ac:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	2201      	movs	r2, #1
    70b2:	629a      	str	r2, [r3, #40]	; 0x28
}
    70b4:	bf00      	nop
    70b6:	370c      	adds	r7, #12
    70b8:	46bd      	mov	sp, r7
    70ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    70be:	4770      	bx	lr

000070c0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b082      	sub	sp, #8
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	681b      	ldr	r3, [r3, #0]
    70cc:	f043 0201 	orr.w	r2, r3, #1
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    70d4:	2101      	movs	r1, #1
    70d6:	6878      	ldr	r0, [r7, #4]
    70d8:	4b02      	ldr	r3, [pc, #8]	; (70e4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    70da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    70dc:	bf00      	nop
    70de:	3708      	adds	r7, #8
    70e0:	46bd      	mov	sp, r7
    70e2:	bd80      	pop	{r7, pc}
    70e4:	00006ffd 	.word	0x00006ffd

000070e8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	681b      	ldr	r3, [r3, #0]
    70f4:	f043 0202 	orr.w	r2, r3, #2
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    70fc:	2103      	movs	r1, #3
    70fe:	6878      	ldr	r0, [r7, #4]
    7100:	4b02      	ldr	r3, [pc, #8]	; (710c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7102:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7104:	bf00      	nop
    7106:	3708      	adds	r7, #8
    7108:	46bd      	mov	sp, r7
    710a:	bd80      	pop	{r7, pc}
    710c:	00006ffd 	.word	0x00006ffd

00007110 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7110:	b580      	push	{r7, lr}
    7112:	b084      	sub	sp, #16
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7118:	2103      	movs	r1, #3
    711a:	6878      	ldr	r0, [r7, #4]
    711c:	4b09      	ldr	r3, [pc, #36]	; (7144 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    711e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7120:	687b      	ldr	r3, [r7, #4]
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	085b      	lsrs	r3, r3, #1
    712a:	f003 0301 	and.w	r3, r3, #1
    712e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7130:	68fb      	ldr	r3, [r7, #12]
    7132:	2b00      	cmp	r3, #0
    7134:	bf14      	ite	ne
    7136:	2301      	movne	r3, #1
    7138:	2300      	moveq	r3, #0
    713a:	b2db      	uxtb	r3, r3
}
    713c:	4618      	mov	r0, r3
    713e:	3710      	adds	r7, #16
    7140:	46bd      	mov	sp, r7
    7142:	bd80      	pop	{r7, pc}
    7144:	00006ffd 	.word	0x00006ffd

00007148 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7148:	b580      	push	{r7, lr}
    714a:	b082      	sub	sp, #8
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	f023 0202 	bic.w	r2, r3, #2
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    715c:	2103      	movs	r1, #3
    715e:	6878      	ldr	r0, [r7, #4]
    7160:	4b02      	ldr	r3, [pc, #8]	; (716c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7162:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7164:	bf00      	nop
    7166:	3708      	adds	r7, #8
    7168:	46bd      	mov	sp, r7
    716a:	bd80      	pop	{r7, pc}
    716c:	00006ffd 	.word	0x00006ffd

00007170 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7170:	b580      	push	{r7, lr}
    7172:	b084      	sub	sp, #16
    7174:	af00      	add	r7, sp, #0
    7176:	6078      	str	r0, [r7, #4]
    7178:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    717a:	2103      	movs	r1, #3
    717c:	6878      	ldr	r0, [r7, #4]
    717e:	4b07      	ldr	r3, [pc, #28]	; (719c <hri_tcc_get_CTRLA_reg+0x2c>)
    7180:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7188:	68fa      	ldr	r2, [r7, #12]
    718a:	683b      	ldr	r3, [r7, #0]
    718c:	4013      	ands	r3, r2
    718e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7190:	68fb      	ldr	r3, [r7, #12]
}
    7192:	4618      	mov	r0, r3
    7194:	3710      	adds	r7, #16
    7196:	46bd      	mov	sp, r7
    7198:	bd80      	pop	{r7, pc}
    719a:	bf00      	nop
    719c:	00006ffd 	.word	0x00006ffd

000071a0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
    71a8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	683a      	ldr	r2, [r7, #0]
    71ae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    71b0:	2103      	movs	r1, #3
    71b2:	6878      	ldr	r0, [r7, #4]
    71b4:	4b02      	ldr	r3, [pc, #8]	; (71c0 <hri_tcc_write_CTRLA_reg+0x20>)
    71b6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    71b8:	bf00      	nop
    71ba:	3708      	adds	r7, #8
    71bc:	46bd      	mov	sp, r7
    71be:	bd80      	pop	{r7, pc}
    71c0:	00006ffd 	.word	0x00006ffd

000071c4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    71c4:	b480      	push	{r7}
    71c6:	b083      	sub	sp, #12
    71c8:	af00      	add	r7, sp, #0
    71ca:	6078      	str	r0, [r7, #4]
    71cc:	460b      	mov	r3, r1
    71ce:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	78fa      	ldrb	r2, [r7, #3]
    71d4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    71d6:	bf00      	nop
    71d8:	370c      	adds	r7, #12
    71da:	46bd      	mov	sp, r7
    71dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e0:	4770      	bx	lr

000071e2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    71e2:	b480      	push	{r7}
    71e4:	b083      	sub	sp, #12
    71e6:	af00      	add	r7, sp, #0
    71e8:	6078      	str	r0, [r7, #4]
    71ea:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	683a      	ldr	r2, [r7, #0]
    71f0:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    71f2:	bf00      	nop
    71f4:	370c      	adds	r7, #12
    71f6:	46bd      	mov	sp, r7
    71f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fc:	4770      	bx	lr
	...

00007200 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7200:	b580      	push	{r7, lr}
    7202:	b082      	sub	sp, #8
    7204:	af00      	add	r7, sp, #0
    7206:	6078      	str	r0, [r7, #4]
    7208:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	683a      	ldr	r2, [r7, #0]
    720e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7210:	2180      	movs	r1, #128	; 0x80
    7212:	6878      	ldr	r0, [r7, #4]
    7214:	4b02      	ldr	r3, [pc, #8]	; (7220 <hri_tcc_write_PER_reg+0x20>)
    7216:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7218:	bf00      	nop
    721a:	3708      	adds	r7, #8
    721c:	46bd      	mov	sp, r7
    721e:	bd80      	pop	{r7, pc}
    7220:	00006ffd 	.word	0x00006ffd

00007224 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7224:	b580      	push	{r7, lr}
    7226:	b082      	sub	sp, #8
    7228:	af00      	add	r7, sp, #0
    722a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    722c:	2180      	movs	r1, #128	; 0x80
    722e:	6878      	ldr	r0, [r7, #4]
    7230:	4b03      	ldr	r3, [pc, #12]	; (7240 <hri_tcc_read_PER_reg+0x1c>)
    7232:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7238:	4618      	mov	r0, r3
    723a:	3708      	adds	r7, #8
    723c:	46bd      	mov	sp, r7
    723e:	bd80      	pop	{r7, pc}
    7240:	00006ffd 	.word	0x00006ffd

00007244 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
    724c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	4a09      	ldr	r2, [pc, #36]	; (7278 <_tcc_init_irq_param+0x34>)
    7252:	4293      	cmp	r3, r2
    7254:	d102      	bne.n	725c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7256:	4a09      	ldr	r2, [pc, #36]	; (727c <_tcc_init_irq_param+0x38>)
    7258:	683b      	ldr	r3, [r7, #0]
    725a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	4a08      	ldr	r2, [pc, #32]	; (7280 <_tcc_init_irq_param+0x3c>)
    7260:	4293      	cmp	r3, r2
    7262:	d102      	bne.n	726a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7264:	4a07      	ldr	r2, [pc, #28]	; (7284 <_tcc_init_irq_param+0x40>)
    7266:	683b      	ldr	r3, [r7, #0]
    7268:	6013      	str	r3, [r2, #0]
	}
}
    726a:	bf00      	nop
    726c:	370c      	adds	r7, #12
    726e:	46bd      	mov	sp, r7
    7270:	f85d 7b04 	ldr.w	r7, [sp], #4
    7274:	4770      	bx	lr
    7276:	bf00      	nop
    7278:	41016000 	.word	0x41016000
    727c:	2000080c 	.word	0x2000080c
    7280:	41018000 	.word	0x41018000
    7284:	20000810 	.word	0x20000810

00007288 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7288:	b580      	push	{r7, lr}
    728a:	b084      	sub	sp, #16
    728c:	af00      	add	r7, sp, #0
    728e:	6078      	str	r0, [r7, #4]
    7290:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7292:	6838      	ldr	r0, [r7, #0]
    7294:	4b33      	ldr	r3, [pc, #204]	; (7364 <_tcc_timer_init+0xdc>)
    7296:	4798      	blx	r3
    7298:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    729a:	68fb      	ldr	r3, [r7, #12]
    729c:	2b00      	cmp	r3, #0
    729e:	d102      	bne.n	72a6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    72a0:	f06f 0309 	mvn.w	r3, #9
    72a4:	e05a      	b.n	735c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    72a6:	687b      	ldr	r3, [r7, #4]
    72a8:	683a      	ldr	r2, [r7, #0]
    72aa:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    72ac:	2101      	movs	r1, #1
    72ae:	6838      	ldr	r0, [r7, #0]
    72b0:	4b2d      	ldr	r3, [pc, #180]	; (7368 <_tcc_timer_init+0xe0>)
    72b2:	4798      	blx	r3
    72b4:	4603      	mov	r3, r0
    72b6:	f083 0301 	eor.w	r3, r3, #1
    72ba:	b2db      	uxtb	r3, r3
    72bc:	2b00      	cmp	r3, #0
    72be:	d011      	beq.n	72e4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    72c0:	2102      	movs	r1, #2
    72c2:	6838      	ldr	r0, [r7, #0]
    72c4:	4b29      	ldr	r3, [pc, #164]	; (736c <_tcc_timer_init+0xe4>)
    72c6:	4798      	blx	r3
    72c8:	4603      	mov	r3, r0
    72ca:	2b00      	cmp	r3, #0
    72cc:	d006      	beq.n	72dc <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    72ce:	6838      	ldr	r0, [r7, #0]
    72d0:	4b27      	ldr	r3, [pc, #156]	; (7370 <_tcc_timer_init+0xe8>)
    72d2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    72d4:	2102      	movs	r1, #2
    72d6:	6838      	ldr	r0, [r7, #0]
    72d8:	4b26      	ldr	r3, [pc, #152]	; (7374 <_tcc_timer_init+0xec>)
    72da:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    72dc:	2101      	movs	r1, #1
    72de:	6838      	ldr	r0, [r7, #0]
    72e0:	4b25      	ldr	r3, [pc, #148]	; (7378 <_tcc_timer_init+0xf0>)
    72e2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    72e4:	2101      	movs	r1, #1
    72e6:	6838      	ldr	r0, [r7, #0]
    72e8:	4b22      	ldr	r3, [pc, #136]	; (7374 <_tcc_timer_init+0xec>)
    72ea:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    72ec:	68fb      	ldr	r3, [r7, #12]
    72ee:	689b      	ldr	r3, [r3, #8]
    72f0:	4619      	mov	r1, r3
    72f2:	6838      	ldr	r0, [r7, #0]
    72f4:	4b20      	ldr	r3, [pc, #128]	; (7378 <_tcc_timer_init+0xf0>)
    72f6:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    72f8:	68fb      	ldr	r3, [r7, #12]
    72fa:	7b1b      	ldrb	r3, [r3, #12]
    72fc:	4619      	mov	r1, r3
    72fe:	6838      	ldr	r0, [r7, #0]
    7300:	4b1e      	ldr	r3, [pc, #120]	; (737c <_tcc_timer_init+0xf4>)
    7302:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7304:	68fb      	ldr	r3, [r7, #12]
    7306:	7b5b      	ldrb	r3, [r3, #13]
    7308:	4619      	mov	r1, r3
    730a:	6838      	ldr	r0, [r7, #0]
    730c:	4b1c      	ldr	r3, [pc, #112]	; (7380 <_tcc_timer_init+0xf8>)
    730e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7310:	68fb      	ldr	r3, [r7, #12]
    7312:	691b      	ldr	r3, [r3, #16]
    7314:	4619      	mov	r1, r3
    7316:	6838      	ldr	r0, [r7, #0]
    7318:	4b1a      	ldr	r3, [pc, #104]	; (7384 <_tcc_timer_init+0xfc>)
    731a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    731c:	68fb      	ldr	r3, [r7, #12]
    731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7320:	4619      	mov	r1, r3
    7322:	6838      	ldr	r0, [r7, #0]
    7324:	4b18      	ldr	r3, [pc, #96]	; (7388 <_tcc_timer_init+0x100>)
    7326:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7328:	6838      	ldr	r0, [r7, #0]
    732a:	4b18      	ldr	r3, [pc, #96]	; (738c <_tcc_timer_init+0x104>)
    732c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    732e:	6879      	ldr	r1, [r7, #4]
    7330:	6838      	ldr	r0, [r7, #0]
    7332:	4b17      	ldr	r3, [pc, #92]	; (7390 <_tcc_timer_init+0x108>)
    7334:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7336:	68fb      	ldr	r3, [r7, #12]
    7338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    733c:	4618      	mov	r0, r3
    733e:	4b15      	ldr	r3, [pc, #84]	; (7394 <_tcc_timer_init+0x10c>)
    7340:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7342:	68fb      	ldr	r3, [r7, #12]
    7344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7348:	4618      	mov	r0, r3
    734a:	4b13      	ldr	r3, [pc, #76]	; (7398 <_tcc_timer_init+0x110>)
    734c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    734e:	68fb      	ldr	r3, [r7, #12]
    7350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7354:	4618      	mov	r0, r3
    7356:	4b11      	ldr	r3, [pc, #68]	; (739c <_tcc_timer_init+0x114>)
    7358:	4798      	blx	r3

	return ERR_NONE;
    735a:	2300      	movs	r3, #0
}
    735c:	4618      	mov	r0, r3
    735e:	3710      	adds	r7, #16
    7360:	46bd      	mov	sp, r7
    7362:	bd80      	pop	{r7, pc}
    7364:	00007551 	.word	0x00007551
    7368:	00007021 	.word	0x00007021
    736c:	00007171 	.word	0x00007171
    7370:	00007149 	.word	0x00007149
    7374:	00006ffd 	.word	0x00006ffd
    7378:	000071a1 	.word	0x000071a1
    737c:	00007089 	.word	0x00007089
    7380:	000071c5 	.word	0x000071c5
    7384:	000071e3 	.word	0x000071e3
    7388:	00007201 	.word	0x00007201
    738c:	000070a7 	.word	0x000070a7
    7390:	00007245 	.word	0x00007245
    7394:	00006f7d 	.word	0x00006f7d
    7398:	00006fc1 	.word	0x00006fc1
    739c:	00006f41 	.word	0x00006f41

000073a0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    73a0:	b580      	push	{r7, lr}
    73a2:	b084      	sub	sp, #16
    73a4:	af00      	add	r7, sp, #0
    73a6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	68db      	ldr	r3, [r3, #12]
    73ac:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    73ae:	68f8      	ldr	r0, [r7, #12]
    73b0:	4b0a      	ldr	r3, [pc, #40]	; (73dc <_tcc_timer_deinit+0x3c>)
    73b2:	4798      	blx	r3
    73b4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    73b6:	68bb      	ldr	r3, [r7, #8]
    73b8:	2b00      	cmp	r3, #0
    73ba:	d00b      	beq.n	73d4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    73bc:	68bb      	ldr	r3, [r7, #8]
    73be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    73c2:	4618      	mov	r0, r3
    73c4:	4b06      	ldr	r3, [pc, #24]	; (73e0 <_tcc_timer_deinit+0x40>)
    73c6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    73c8:	68f8      	ldr	r0, [r7, #12]
    73ca:	4b06      	ldr	r3, [pc, #24]	; (73e4 <_tcc_timer_deinit+0x44>)
    73cc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    73ce:	68f8      	ldr	r0, [r7, #12]
    73d0:	4b05      	ldr	r3, [pc, #20]	; (73e8 <_tcc_timer_deinit+0x48>)
    73d2:	4798      	blx	r3
	}
}
    73d4:	bf00      	nop
    73d6:	3710      	adds	r7, #16
    73d8:	46bd      	mov	sp, r7
    73da:	bd80      	pop	{r7, pc}
    73dc:	00007551 	.word	0x00007551
    73e0:	00006f7d 	.word	0x00006f7d
    73e4:	00007149 	.word	0x00007149
    73e8:	000070c1 	.word	0x000070c1

000073ec <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b082      	sub	sp, #8
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	68db      	ldr	r3, [r3, #12]
    73f8:	4618      	mov	r0, r3
    73fa:	4b03      	ldr	r3, [pc, #12]	; (7408 <_tcc_timer_start+0x1c>)
    73fc:	4798      	blx	r3
}
    73fe:	bf00      	nop
    7400:	3708      	adds	r7, #8
    7402:	46bd      	mov	sp, r7
    7404:	bd80      	pop	{r7, pc}
    7406:	bf00      	nop
    7408:	000070e9 	.word	0x000070e9

0000740c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    740c:	b580      	push	{r7, lr}
    740e:	b082      	sub	sp, #8
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	68db      	ldr	r3, [r3, #12]
    7418:	4618      	mov	r0, r3
    741a:	4b03      	ldr	r3, [pc, #12]	; (7428 <_tcc_timer_stop+0x1c>)
    741c:	4798      	blx	r3
}
    741e:	bf00      	nop
    7420:	3708      	adds	r7, #8
    7422:	46bd      	mov	sp, r7
    7424:	bd80      	pop	{r7, pc}
    7426:	bf00      	nop
    7428:	00007149 	.word	0x00007149

0000742c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    742c:	b580      	push	{r7, lr}
    742e:	b082      	sub	sp, #8
    7430:	af00      	add	r7, sp, #0
    7432:	6078      	str	r0, [r7, #4]
    7434:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7436:	687b      	ldr	r3, [r7, #4]
    7438:	68db      	ldr	r3, [r3, #12]
    743a:	6839      	ldr	r1, [r7, #0]
    743c:	4618      	mov	r0, r3
    743e:	4b03      	ldr	r3, [pc, #12]	; (744c <_tcc_timer_set_period+0x20>)
    7440:	4798      	blx	r3
}
    7442:	bf00      	nop
    7444:	3708      	adds	r7, #8
    7446:	46bd      	mov	sp, r7
    7448:	bd80      	pop	{r7, pc}
    744a:	bf00      	nop
    744c:	00007201 	.word	0x00007201

00007450 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7450:	b580      	push	{r7, lr}
    7452:	b082      	sub	sp, #8
    7454:	af00      	add	r7, sp, #0
    7456:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	68db      	ldr	r3, [r3, #12]
    745c:	4618      	mov	r0, r3
    745e:	4b03      	ldr	r3, [pc, #12]	; (746c <_tcc_timer_get_period+0x1c>)
    7460:	4798      	blx	r3
    7462:	4603      	mov	r3, r0
}
    7464:	4618      	mov	r0, r3
    7466:	3708      	adds	r7, #8
    7468:	46bd      	mov	sp, r7
    746a:	bd80      	pop	{r7, pc}
    746c:	00007225 	.word	0x00007225

00007470 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7470:	b580      	push	{r7, lr}
    7472:	b082      	sub	sp, #8
    7474:	af00      	add	r7, sp, #0
    7476:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7478:	687b      	ldr	r3, [r7, #4]
    747a:	68db      	ldr	r3, [r3, #12]
    747c:	4618      	mov	r0, r3
    747e:	4b03      	ldr	r3, [pc, #12]	; (748c <_tcc_timer_is_started+0x1c>)
    7480:	4798      	blx	r3
    7482:	4603      	mov	r3, r0
}
    7484:	4618      	mov	r0, r3
    7486:	3708      	adds	r7, #8
    7488:	46bd      	mov	sp, r7
    748a:	bd80      	pop	{r7, pc}
    748c:	00007111 	.word	0x00007111

00007490 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7490:	b480      	push	{r7}
    7492:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7494:	4b02      	ldr	r3, [pc, #8]	; (74a0 <_tcc_get_timer+0x10>)
}
    7496:	4618      	mov	r0, r3
    7498:	46bd      	mov	sp, r7
    749a:	f85d 7b04 	ldr.w	r7, [sp], #4
    749e:	4770      	bx	lr
    74a0:	200000c0 	.word	0x200000c0

000074a4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    74a4:	b580      	push	{r7, lr}
    74a6:	b084      	sub	sp, #16
    74a8:	af00      	add	r7, sp, #0
    74aa:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    74ac:	687b      	ldr	r3, [r7, #4]
    74ae:	68db      	ldr	r3, [r3, #12]
    74b0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    74b2:	68f8      	ldr	r0, [r7, #12]
    74b4:	4b08      	ldr	r3, [pc, #32]	; (74d8 <_tcc_timer_set_irq+0x34>)
    74b6:	4798      	blx	r3
    74b8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    74ba:	68bb      	ldr	r3, [r7, #8]
    74bc:	2b00      	cmp	r3, #0
    74be:	d006      	beq.n	74ce <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    74c0:	68bb      	ldr	r3, [r7, #8]
    74c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    74c6:	b2db      	uxtb	r3, r3
    74c8:	4618      	mov	r0, r3
    74ca:	4b04      	ldr	r3, [pc, #16]	; (74dc <_tcc_timer_set_irq+0x38>)
    74cc:	4798      	blx	r3
	}
}
    74ce:	bf00      	nop
    74d0:	3710      	adds	r7, #16
    74d2:	46bd      	mov	sp, r7
    74d4:	bd80      	pop	{r7, pc}
    74d6:	bf00      	nop
    74d8:	00007551 	.word	0x00007551
    74dc:	00003f71 	.word	0x00003f71

000074e0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b084      	sub	sp, #16
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	68db      	ldr	r3, [r3, #12]
    74ec:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    74ee:	68f8      	ldr	r0, [r7, #12]
    74f0:	4b07      	ldr	r3, [pc, #28]	; (7510 <tcc_interrupt_handler+0x30>)
    74f2:	4798      	blx	r3
    74f4:	4603      	mov	r3, r0
    74f6:	2b00      	cmp	r3, #0
    74f8:	d006      	beq.n	7508 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    74fa:	68f8      	ldr	r0, [r7, #12]
    74fc:	4b05      	ldr	r3, [pc, #20]	; (7514 <tcc_interrupt_handler+0x34>)
    74fe:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	681b      	ldr	r3, [r3, #0]
    7504:	6878      	ldr	r0, [r7, #4]
    7506:	4798      	blx	r3
	}
}
    7508:	bf00      	nop
    750a:	3710      	adds	r7, #16
    750c:	46bd      	mov	sp, r7
    750e:	bd80      	pop	{r7, pc}
    7510:	00007049 	.word	0x00007049
    7514:	0000706f 	.word	0x0000706f

00007518 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7518:	b580      	push	{r7, lr}
    751a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    751c:	4b03      	ldr	r3, [pc, #12]	; (752c <TCC0_0_Handler+0x14>)
    751e:	681b      	ldr	r3, [r3, #0]
    7520:	4618      	mov	r0, r3
    7522:	4b03      	ldr	r3, [pc, #12]	; (7530 <TCC0_0_Handler+0x18>)
    7524:	4798      	blx	r3
}
    7526:	bf00      	nop
    7528:	bd80      	pop	{r7, pc}
    752a:	bf00      	nop
    752c:	2000080c 	.word	0x2000080c
    7530:	000074e1 	.word	0x000074e1

00007534 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7534:	b580      	push	{r7, lr}
    7536:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7538:	4b03      	ldr	r3, [pc, #12]	; (7548 <TCC1_0_Handler+0x14>)
    753a:	681b      	ldr	r3, [r3, #0]
    753c:	4618      	mov	r0, r3
    753e:	4b03      	ldr	r3, [pc, #12]	; (754c <TCC1_0_Handler+0x18>)
    7540:	4798      	blx	r3
}
    7542:	bf00      	nop
    7544:	bd80      	pop	{r7, pc}
    7546:	bf00      	nop
    7548:	20000810 	.word	0x20000810
    754c:	000074e1 	.word	0x000074e1

00007550 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7550:	b480      	push	{r7}
    7552:	b085      	sub	sp, #20
    7554:	af00      	add	r7, sp, #0
    7556:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7558:	2300      	movs	r3, #0
    755a:	73fb      	strb	r3, [r7, #15]
    755c:	e015      	b.n	758a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    755e:	7bfa      	ldrb	r2, [r7, #15]
    7560:	490f      	ldr	r1, [pc, #60]	; (75a0 <_get_tcc_cfg+0x50>)
    7562:	4613      	mov	r3, r2
    7564:	005b      	lsls	r3, r3, #1
    7566:	4413      	add	r3, r2
    7568:	011b      	lsls	r3, r3, #4
    756a:	440b      	add	r3, r1
    756c:	681a      	ldr	r2, [r3, #0]
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	429a      	cmp	r2, r3
    7572:	d107      	bne.n	7584 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7574:	7bfa      	ldrb	r2, [r7, #15]
    7576:	4613      	mov	r3, r2
    7578:	005b      	lsls	r3, r3, #1
    757a:	4413      	add	r3, r2
    757c:	011b      	lsls	r3, r3, #4
    757e:	4a08      	ldr	r2, [pc, #32]	; (75a0 <_get_tcc_cfg+0x50>)
    7580:	4413      	add	r3, r2
    7582:	e006      	b.n	7592 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7584:	7bfb      	ldrb	r3, [r7, #15]
    7586:	3301      	adds	r3, #1
    7588:	73fb      	strb	r3, [r7, #15]
    758a:	7bfb      	ldrb	r3, [r7, #15]
    758c:	2b01      	cmp	r3, #1
    758e:	d9e6      	bls.n	755e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7590:	2300      	movs	r3, #0
}
    7592:	4618      	mov	r0, r3
    7594:	3714      	adds	r7, #20
    7596:	46bd      	mov	sp, r7
    7598:	f85d 7b04 	ldr.w	r7, [sp], #4
    759c:	4770      	bx	lr
    759e:	bf00      	nop
    75a0:	20000060 	.word	0x20000060

000075a4 <__NVIC_EnableIRQ>:
{
    75a4:	b480      	push	{r7}
    75a6:	b083      	sub	sp, #12
    75a8:	af00      	add	r7, sp, #0
    75aa:	4603      	mov	r3, r0
    75ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    75ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75b2:	2b00      	cmp	r3, #0
    75b4:	db0b      	blt.n	75ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75b6:	4909      	ldr	r1, [pc, #36]	; (75dc <__NVIC_EnableIRQ+0x38>)
    75b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75bc:	095b      	lsrs	r3, r3, #5
    75be:	88fa      	ldrh	r2, [r7, #6]
    75c0:	f002 021f 	and.w	r2, r2, #31
    75c4:	2001      	movs	r0, #1
    75c6:	fa00 f202 	lsl.w	r2, r0, r2
    75ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    75ce:	bf00      	nop
    75d0:	370c      	adds	r7, #12
    75d2:	46bd      	mov	sp, r7
    75d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    75d8:	4770      	bx	lr
    75da:	bf00      	nop
    75dc:	e000e100 	.word	0xe000e100

000075e0 <__NVIC_DisableIRQ>:
{
    75e0:	b480      	push	{r7}
    75e2:	b083      	sub	sp, #12
    75e4:	af00      	add	r7, sp, #0
    75e6:	4603      	mov	r3, r0
    75e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    75ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75ee:	2b00      	cmp	r3, #0
    75f0:	db10      	blt.n	7614 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75f2:	490b      	ldr	r1, [pc, #44]	; (7620 <__NVIC_DisableIRQ+0x40>)
    75f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    75f8:	095b      	lsrs	r3, r3, #5
    75fa:	88fa      	ldrh	r2, [r7, #6]
    75fc:	f002 021f 	and.w	r2, r2, #31
    7600:	2001      	movs	r0, #1
    7602:	fa00 f202 	lsl.w	r2, r0, r2
    7606:	3320      	adds	r3, #32
    7608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    760c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7610:	f3bf 8f6f 	isb	sy
}
    7614:	bf00      	nop
    7616:	370c      	adds	r7, #12
    7618:	46bd      	mov	sp, r7
    761a:	f85d 7b04 	ldr.w	r7, [sp], #4
    761e:	4770      	bx	lr
    7620:	e000e100 	.word	0xe000e100

00007624 <__NVIC_ClearPendingIRQ>:
{
    7624:	b480      	push	{r7}
    7626:	b083      	sub	sp, #12
    7628:	af00      	add	r7, sp, #0
    762a:	4603      	mov	r3, r0
    762c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    762e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7632:	2b00      	cmp	r3, #0
    7634:	db0c      	blt.n	7650 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7636:	4909      	ldr	r1, [pc, #36]	; (765c <__NVIC_ClearPendingIRQ+0x38>)
    7638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    763c:	095b      	lsrs	r3, r3, #5
    763e:	88fa      	ldrh	r2, [r7, #6]
    7640:	f002 021f 	and.w	r2, r2, #31
    7644:	2001      	movs	r0, #1
    7646:	fa00 f202 	lsl.w	r2, r0, r2
    764a:	3360      	adds	r3, #96	; 0x60
    764c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7650:	bf00      	nop
    7652:	370c      	adds	r7, #12
    7654:	46bd      	mov	sp, r7
    7656:	f85d 7b04 	ldr.w	r7, [sp], #4
    765a:	4770      	bx	lr
    765c:	e000e100 	.word	0xe000e100

00007660 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7660:	b480      	push	{r7}
    7662:	b083      	sub	sp, #12
    7664:	af00      	add	r7, sp, #0
    7666:	6078      	str	r0, [r7, #4]
    7668:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    766a:	bf00      	nop
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	691a      	ldr	r2, [r3, #16]
    7670:	683b      	ldr	r3, [r7, #0]
    7672:	4013      	ands	r3, r2
    7674:	2b00      	cmp	r3, #0
    7676:	d1f9      	bne.n	766c <hri_tc_wait_for_sync+0xc>
	};
}
    7678:	bf00      	nop
    767a:	370c      	adds	r7, #12
    767c:	46bd      	mov	sp, r7
    767e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7682:	4770      	bx	lr

00007684 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7684:	b480      	push	{r7}
    7686:	b083      	sub	sp, #12
    7688:	af00      	add	r7, sp, #0
    768a:	6078      	str	r0, [r7, #4]
    768c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	691a      	ldr	r2, [r3, #16]
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	4013      	ands	r3, r2
    7696:	2b00      	cmp	r3, #0
    7698:	bf14      	ite	ne
    769a:	2301      	movne	r3, #1
    769c:	2300      	moveq	r3, #0
    769e:	b2db      	uxtb	r3, r3
}
    76a0:	4618      	mov	r0, r3
    76a2:	370c      	adds	r7, #12
    76a4:	46bd      	mov	sp, r7
    76a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    76aa:	4770      	bx	lr

000076ac <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    76ac:	b480      	push	{r7}
    76ae:	b083      	sub	sp, #12
    76b0:	af00      	add	r7, sp, #0
    76b2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	7a9b      	ldrb	r3, [r3, #10]
    76b8:	b2db      	uxtb	r3, r3
    76ba:	f003 0301 	and.w	r3, r3, #1
    76be:	2b00      	cmp	r3, #0
    76c0:	bf14      	ite	ne
    76c2:	2301      	movne	r3, #1
    76c4:	2300      	moveq	r3, #0
    76c6:	b2db      	uxtb	r3, r3
}
    76c8:	4618      	mov	r0, r3
    76ca:	370c      	adds	r7, #12
    76cc:	46bd      	mov	sp, r7
    76ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    76d2:	4770      	bx	lr

000076d4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    76d4:	b480      	push	{r7}
    76d6:	b083      	sub	sp, #12
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	2201      	movs	r2, #1
    76e0:	729a      	strb	r2, [r3, #10]
}
    76e2:	bf00      	nop
    76e4:	370c      	adds	r7, #12
    76e6:	46bd      	mov	sp, r7
    76e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    76ec:	4770      	bx	lr

000076ee <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    76ee:	b480      	push	{r7}
    76f0:	b083      	sub	sp, #12
    76f2:	af00      	add	r7, sp, #0
    76f4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    76f6:	687b      	ldr	r3, [r7, #4]
    76f8:	2202      	movs	r2, #2
    76fa:	729a      	strb	r2, [r3, #10]
}
    76fc:	bf00      	nop
    76fe:	370c      	adds	r7, #12
    7700:	46bd      	mov	sp, r7
    7702:	f85d 7b04 	ldr.w	r7, [sp], #4
    7706:	4770      	bx	lr

00007708 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7708:	b480      	push	{r7}
    770a:	b083      	sub	sp, #12
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	2201      	movs	r2, #1
    7714:	725a      	strb	r2, [r3, #9]
}
    7716:	bf00      	nop
    7718:	370c      	adds	r7, #12
    771a:	46bd      	mov	sp, r7
    771c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7720:	4770      	bx	lr

00007722 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7722:	b480      	push	{r7}
    7724:	b083      	sub	sp, #12
    7726:	af00      	add	r7, sp, #0
    7728:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	7a5b      	ldrb	r3, [r3, #9]
    772e:	b2db      	uxtb	r3, r3
    7730:	085b      	lsrs	r3, r3, #1
    7732:	f003 0301 	and.w	r3, r3, #1
    7736:	2b00      	cmp	r3, #0
    7738:	bf14      	ite	ne
    773a:	2301      	movne	r3, #1
    773c:	2300      	moveq	r3, #0
    773e:	b2db      	uxtb	r3, r3
}
    7740:	4618      	mov	r0, r3
    7742:	370c      	adds	r7, #12
    7744:	46bd      	mov	sp, r7
    7746:	f85d 7b04 	ldr.w	r7, [sp], #4
    774a:	4770      	bx	lr

0000774c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    774c:	b580      	push	{r7, lr}
    774e:	b082      	sub	sp, #8
    7750:	af00      	add	r7, sp, #0
    7752:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	681b      	ldr	r3, [r3, #0]
    7758:	f043 0201 	orr.w	r2, r3, #1
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7760:	2101      	movs	r1, #1
    7762:	6878      	ldr	r0, [r7, #4]
    7764:	4b02      	ldr	r3, [pc, #8]	; (7770 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7766:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7768:	bf00      	nop
    776a:	3708      	adds	r7, #8
    776c:	46bd      	mov	sp, r7
    776e:	bd80      	pop	{r7, pc}
    7770:	00007661 	.word	0x00007661

00007774 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7774:	b580      	push	{r7, lr}
    7776:	b082      	sub	sp, #8
    7778:	af00      	add	r7, sp, #0
    777a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	681b      	ldr	r3, [r3, #0]
    7780:	f043 0202 	orr.w	r2, r3, #2
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7788:	2103      	movs	r1, #3
    778a:	6878      	ldr	r0, [r7, #4]
    778c:	4b02      	ldr	r3, [pc, #8]	; (7798 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    778e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7790:	bf00      	nop
    7792:	3708      	adds	r7, #8
    7794:	46bd      	mov	sp, r7
    7796:	bd80      	pop	{r7, pc}
    7798:	00007661 	.word	0x00007661

0000779c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    779c:	b580      	push	{r7, lr}
    779e:	b084      	sub	sp, #16
    77a0:	af00      	add	r7, sp, #0
    77a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    77a4:	2103      	movs	r1, #3
    77a6:	6878      	ldr	r0, [r7, #4]
    77a8:	4b09      	ldr	r3, [pc, #36]	; (77d0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    77aa:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    77ac:	687b      	ldr	r3, [r7, #4]
    77ae:	681b      	ldr	r3, [r3, #0]
    77b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    77b2:	68fb      	ldr	r3, [r7, #12]
    77b4:	085b      	lsrs	r3, r3, #1
    77b6:	f003 0301 	and.w	r3, r3, #1
    77ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    77bc:	68fb      	ldr	r3, [r7, #12]
    77be:	2b00      	cmp	r3, #0
    77c0:	bf14      	ite	ne
    77c2:	2301      	movne	r3, #1
    77c4:	2300      	moveq	r3, #0
    77c6:	b2db      	uxtb	r3, r3
}
    77c8:	4618      	mov	r0, r3
    77ca:	3710      	adds	r7, #16
    77cc:	46bd      	mov	sp, r7
    77ce:	bd80      	pop	{r7, pc}
    77d0:	00007661 	.word	0x00007661

000077d4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	b082      	sub	sp, #8
    77d8:	af00      	add	r7, sp, #0
    77da:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	f023 0202 	bic.w	r2, r3, #2
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    77e8:	2103      	movs	r1, #3
    77ea:	6878      	ldr	r0, [r7, #4]
    77ec:	4b02      	ldr	r3, [pc, #8]	; (77f8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    77ee:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    77f0:	bf00      	nop
    77f2:	3708      	adds	r7, #8
    77f4:	46bd      	mov	sp, r7
    77f6:	bd80      	pop	{r7, pc}
    77f8:	00007661 	.word	0x00007661

000077fc <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    77fc:	b480      	push	{r7}
    77fe:	b085      	sub	sp, #20
    7800:	af00      	add	r7, sp, #0
    7802:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    780a:	68fb      	ldr	r3, [r7, #12]
    780c:	089b      	lsrs	r3, r3, #2
    780e:	f003 0303 	and.w	r3, r3, #3
    7812:	60fb      	str	r3, [r7, #12]
	return tmp;
    7814:	68fb      	ldr	r3, [r7, #12]
}
    7816:	4618      	mov	r0, r3
    7818:	3714      	adds	r7, #20
    781a:	46bd      	mov	sp, r7
    781c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7820:	4770      	bx	lr
	...

00007824 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7824:	b580      	push	{r7, lr}
    7826:	b084      	sub	sp, #16
    7828:	af00      	add	r7, sp, #0
    782a:	6078      	str	r0, [r7, #4]
    782c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    782e:	2103      	movs	r1, #3
    7830:	6878      	ldr	r0, [r7, #4]
    7832:	4b07      	ldr	r3, [pc, #28]	; (7850 <hri_tc_get_CTRLA_reg+0x2c>)
    7834:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    783c:	68fa      	ldr	r2, [r7, #12]
    783e:	683b      	ldr	r3, [r7, #0]
    7840:	4013      	ands	r3, r2
    7842:	60fb      	str	r3, [r7, #12]
	return tmp;
    7844:	68fb      	ldr	r3, [r7, #12]
}
    7846:	4618      	mov	r0, r3
    7848:	3710      	adds	r7, #16
    784a:	46bd      	mov	sp, r7
    784c:	bd80      	pop	{r7, pc}
    784e:	bf00      	nop
    7850:	00007661 	.word	0x00007661

00007854 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7854:	b580      	push	{r7, lr}
    7856:	b082      	sub	sp, #8
    7858:	af00      	add	r7, sp, #0
    785a:	6078      	str	r0, [r7, #4]
    785c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    785e:	687b      	ldr	r3, [r7, #4]
    7860:	683a      	ldr	r2, [r7, #0]
    7862:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7864:	2103      	movs	r1, #3
    7866:	6878      	ldr	r0, [r7, #4]
    7868:	4b02      	ldr	r3, [pc, #8]	; (7874 <hri_tc_write_CTRLA_reg+0x20>)
    786a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    786c:	bf00      	nop
    786e:	3708      	adds	r7, #8
    7870:	46bd      	mov	sp, r7
    7872:	bd80      	pop	{r7, pc}
    7874:	00007661 	.word	0x00007661

00007878 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7878:	b480      	push	{r7}
    787a:	b083      	sub	sp, #12
    787c:	af00      	add	r7, sp, #0
    787e:	6078      	str	r0, [r7, #4]
    7880:	460b      	mov	r3, r1
    7882:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	887a      	ldrh	r2, [r7, #2]
    7888:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    788a:	bf00      	nop
    788c:	370c      	adds	r7, #12
    788e:	46bd      	mov	sp, r7
    7890:	f85d 7b04 	ldr.w	r7, [sp], #4
    7894:	4770      	bx	lr

00007896 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7896:	b480      	push	{r7}
    7898:	b083      	sub	sp, #12
    789a:	af00      	add	r7, sp, #0
    789c:	6078      	str	r0, [r7, #4]
    789e:	460b      	mov	r3, r1
    78a0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	78fa      	ldrb	r2, [r7, #3]
    78a6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    78a8:	bf00      	nop
    78aa:	370c      	adds	r7, #12
    78ac:	46bd      	mov	sp, r7
    78ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b2:	4770      	bx	lr

000078b4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    78b4:	b480      	push	{r7}
    78b6:	b083      	sub	sp, #12
    78b8:	af00      	add	r7, sp, #0
    78ba:	6078      	str	r0, [r7, #4]
    78bc:	460b      	mov	r3, r1
    78be:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    78c0:	687b      	ldr	r3, [r7, #4]
    78c2:	78fa      	ldrb	r2, [r7, #3]
    78c4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    78c6:	bf00      	nop
    78c8:	370c      	adds	r7, #12
    78ca:	46bd      	mov	sp, r7
    78cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d0:	4770      	bx	lr
	...

000078d4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    78d4:	b580      	push	{r7, lr}
    78d6:	b082      	sub	sp, #8
    78d8:	af00      	add	r7, sp, #0
    78da:	6078      	str	r0, [r7, #4]
    78dc:	460b      	mov	r3, r1
    78de:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	78fa      	ldrb	r2, [r7, #3]
    78e4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    78e6:	2120      	movs	r1, #32
    78e8:	6878      	ldr	r0, [r7, #4]
    78ea:	4b03      	ldr	r3, [pc, #12]	; (78f8 <hri_tccount8_write_PER_reg+0x24>)
    78ec:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    78ee:	bf00      	nop
    78f0:	3708      	adds	r7, #8
    78f2:	46bd      	mov	sp, r7
    78f4:	bd80      	pop	{r7, pc}
    78f6:	bf00      	nop
    78f8:	00007661 	.word	0x00007661

000078fc <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    78fc:	b580      	push	{r7, lr}
    78fe:	b082      	sub	sp, #8
    7900:	af00      	add	r7, sp, #0
    7902:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7904:	2120      	movs	r1, #32
    7906:	6878      	ldr	r0, [r7, #4]
    7908:	4b04      	ldr	r3, [pc, #16]	; (791c <hri_tccount8_read_PER_reg+0x20>)
    790a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	7edb      	ldrb	r3, [r3, #27]
    7910:	b2db      	uxtb	r3, r3
}
    7912:	4618      	mov	r0, r3
    7914:	3708      	adds	r7, #8
    7916:	46bd      	mov	sp, r7
    7918:	bd80      	pop	{r7, pc}
    791a:	bf00      	nop
    791c:	00007661 	.word	0x00007661

00007920 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7920:	b580      	push	{r7, lr}
    7922:	b082      	sub	sp, #8
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
    7928:	460b      	mov	r3, r1
    792a:	70fb      	strb	r3, [r7, #3]
    792c:	4613      	mov	r3, r2
    792e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7930:	78fb      	ldrb	r3, [r7, #3]
    7932:	687a      	ldr	r2, [r7, #4]
    7934:	4413      	add	r3, r2
    7936:	78ba      	ldrb	r2, [r7, #2]
    7938:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    793a:	21c0      	movs	r1, #192	; 0xc0
    793c:	6878      	ldr	r0, [r7, #4]
    793e:	4b03      	ldr	r3, [pc, #12]	; (794c <hri_tccount8_write_CC_reg+0x2c>)
    7940:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7942:	bf00      	nop
    7944:	3708      	adds	r7, #8
    7946:	46bd      	mov	sp, r7
    7948:	bd80      	pop	{r7, pc}
    794a:	bf00      	nop
    794c:	00007661 	.word	0x00007661

00007950 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7950:	b580      	push	{r7, lr}
    7952:	b082      	sub	sp, #8
    7954:	af00      	add	r7, sp, #0
    7956:	6078      	str	r0, [r7, #4]
    7958:	460b      	mov	r3, r1
    795a:	70fb      	strb	r3, [r7, #3]
    795c:	4613      	mov	r3, r2
    795e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7960:	78fb      	ldrb	r3, [r7, #3]
    7962:	687a      	ldr	r2, [r7, #4]
    7964:	330c      	adds	r3, #12
    7966:	005b      	lsls	r3, r3, #1
    7968:	4413      	add	r3, r2
    796a:	883a      	ldrh	r2, [r7, #0]
    796c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    796e:	21c0      	movs	r1, #192	; 0xc0
    7970:	6878      	ldr	r0, [r7, #4]
    7972:	4b03      	ldr	r3, [pc, #12]	; (7980 <hri_tccount16_write_CC_reg+0x30>)
    7974:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7976:	bf00      	nop
    7978:	3708      	adds	r7, #8
    797a:	46bd      	mov	sp, r7
    797c:	bd80      	pop	{r7, pc}
    797e:	bf00      	nop
    7980:	00007661 	.word	0x00007661

00007984 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7984:	b580      	push	{r7, lr}
    7986:	b082      	sub	sp, #8
    7988:	af00      	add	r7, sp, #0
    798a:	6078      	str	r0, [r7, #4]
    798c:	460b      	mov	r3, r1
    798e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7990:	21c0      	movs	r1, #192	; 0xc0
    7992:	6878      	ldr	r0, [r7, #4]
    7994:	4b06      	ldr	r3, [pc, #24]	; (79b0 <hri_tccount16_read_CC_reg+0x2c>)
    7996:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7998:	78fb      	ldrb	r3, [r7, #3]
    799a:	687a      	ldr	r2, [r7, #4]
    799c:	330c      	adds	r3, #12
    799e:	005b      	lsls	r3, r3, #1
    79a0:	4413      	add	r3, r2
    79a2:	889b      	ldrh	r3, [r3, #4]
    79a4:	b29b      	uxth	r3, r3
}
    79a6:	4618      	mov	r0, r3
    79a8:	3708      	adds	r7, #8
    79aa:	46bd      	mov	sp, r7
    79ac:	bd80      	pop	{r7, pc}
    79ae:	bf00      	nop
    79b0:	00007661 	.word	0x00007661

000079b4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    79b4:	b580      	push	{r7, lr}
    79b6:	b084      	sub	sp, #16
    79b8:	af00      	add	r7, sp, #0
    79ba:	60f8      	str	r0, [r7, #12]
    79bc:	460b      	mov	r3, r1
    79be:	607a      	str	r2, [r7, #4]
    79c0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    79c2:	7afb      	ldrb	r3, [r7, #11]
    79c4:	68fa      	ldr	r2, [r7, #12]
    79c6:	3306      	adds	r3, #6
    79c8:	009b      	lsls	r3, r3, #2
    79ca:	4413      	add	r3, r2
    79cc:	687a      	ldr	r2, [r7, #4]
    79ce:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    79d0:	21c0      	movs	r1, #192	; 0xc0
    79d2:	68f8      	ldr	r0, [r7, #12]
    79d4:	4b02      	ldr	r3, [pc, #8]	; (79e0 <hri_tccount32_write_CC_reg+0x2c>)
    79d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    79d8:	bf00      	nop
    79da:	3710      	adds	r7, #16
    79dc:	46bd      	mov	sp, r7
    79de:	bd80      	pop	{r7, pc}
    79e0:	00007661 	.word	0x00007661

000079e4 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    79e4:	b580      	push	{r7, lr}
    79e6:	b082      	sub	sp, #8
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
    79ec:	460b      	mov	r3, r1
    79ee:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    79f0:	21c0      	movs	r1, #192	; 0xc0
    79f2:	6878      	ldr	r0, [r7, #4]
    79f4:	4b05      	ldr	r3, [pc, #20]	; (7a0c <hri_tccount32_read_CC_reg+0x28>)
    79f6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    79f8:	78fb      	ldrb	r3, [r7, #3]
    79fa:	687a      	ldr	r2, [r7, #4]
    79fc:	3306      	adds	r3, #6
    79fe:	009b      	lsls	r3, r3, #2
    7a00:	4413      	add	r3, r2
    7a02:	685b      	ldr	r3, [r3, #4]
}
    7a04:	4618      	mov	r0, r3
    7a06:	3708      	adds	r7, #8
    7a08:	46bd      	mov	sp, r7
    7a0a:	bd80      	pop	{r7, pc}
    7a0c:	00007661 	.word	0x00007661

00007a10 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7a10:	b580      	push	{r7, lr}
    7a12:	b084      	sub	sp, #16
    7a14:	af00      	add	r7, sp, #0
    7a16:	6078      	str	r0, [r7, #4]
    7a18:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7a1a:	6838      	ldr	r0, [r7, #0]
    7a1c:	4b93      	ldr	r3, [pc, #588]	; (7c6c <_tc_timer_init+0x25c>)
    7a1e:	4798      	blx	r3
    7a20:	4603      	mov	r3, r0
    7a22:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7a24:	687b      	ldr	r3, [r7, #4]
    7a26:	683a      	ldr	r2, [r7, #0]
    7a28:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7a2a:	22a4      	movs	r2, #164	; 0xa4
    7a2c:	4990      	ldr	r1, [pc, #576]	; (7c70 <_tc_timer_init+0x260>)
    7a2e:	2001      	movs	r0, #1
    7a30:	4b90      	ldr	r3, [pc, #576]	; (7c74 <_tc_timer_init+0x264>)
    7a32:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7a34:	2101      	movs	r1, #1
    7a36:	6838      	ldr	r0, [r7, #0]
    7a38:	4b8f      	ldr	r3, [pc, #572]	; (7c78 <_tc_timer_init+0x268>)
    7a3a:	4798      	blx	r3
    7a3c:	4603      	mov	r3, r0
    7a3e:	f083 0301 	eor.w	r3, r3, #1
    7a42:	b2db      	uxtb	r3, r3
    7a44:	2b00      	cmp	r3, #0
    7a46:	d011      	beq.n	7a6c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7a48:	2102      	movs	r1, #2
    7a4a:	6838      	ldr	r0, [r7, #0]
    7a4c:	4b8b      	ldr	r3, [pc, #556]	; (7c7c <_tc_timer_init+0x26c>)
    7a4e:	4798      	blx	r3
    7a50:	4603      	mov	r3, r0
    7a52:	2b00      	cmp	r3, #0
    7a54:	d006      	beq.n	7a64 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7a56:	6838      	ldr	r0, [r7, #0]
    7a58:	4b89      	ldr	r3, [pc, #548]	; (7c80 <_tc_timer_init+0x270>)
    7a5a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7a5c:	2102      	movs	r1, #2
    7a5e:	6838      	ldr	r0, [r7, #0]
    7a60:	4b88      	ldr	r3, [pc, #544]	; (7c84 <_tc_timer_init+0x274>)
    7a62:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7a64:	2101      	movs	r1, #1
    7a66:	6838      	ldr	r0, [r7, #0]
    7a68:	4b87      	ldr	r3, [pc, #540]	; (7c88 <_tc_timer_init+0x278>)
    7a6a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7a6c:	2101      	movs	r1, #1
    7a6e:	6838      	ldr	r0, [r7, #0]
    7a70:	4b84      	ldr	r3, [pc, #528]	; (7c84 <_tc_timer_init+0x274>)
    7a72:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7a74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a78:	4984      	ldr	r1, [pc, #528]	; (7c8c <_tc_timer_init+0x27c>)
    7a7a:	4613      	mov	r3, r2
    7a7c:	009b      	lsls	r3, r3, #2
    7a7e:	4413      	add	r3, r2
    7a80:	009b      	lsls	r3, r3, #2
    7a82:	440b      	add	r3, r1
    7a84:	3304      	adds	r3, #4
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	4619      	mov	r1, r3
    7a8a:	6838      	ldr	r0, [r7, #0]
    7a8c:	4b7e      	ldr	r3, [pc, #504]	; (7c88 <_tc_timer_init+0x278>)
    7a8e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7a90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7a94:	497d      	ldr	r1, [pc, #500]	; (7c8c <_tc_timer_init+0x27c>)
    7a96:	4613      	mov	r3, r2
    7a98:	009b      	lsls	r3, r3, #2
    7a9a:	4413      	add	r3, r2
    7a9c:	009b      	lsls	r3, r3, #2
    7a9e:	440b      	add	r3, r1
    7aa0:	330a      	adds	r3, #10
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	4619      	mov	r1, r3
    7aa6:	6838      	ldr	r0, [r7, #0]
    7aa8:	4b79      	ldr	r3, [pc, #484]	; (7c90 <_tc_timer_init+0x280>)
    7aaa:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7aac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ab0:	4976      	ldr	r1, [pc, #472]	; (7c8c <_tc_timer_init+0x27c>)
    7ab2:	4613      	mov	r3, r2
    7ab4:	009b      	lsls	r3, r3, #2
    7ab6:	4413      	add	r3, r2
    7ab8:	009b      	lsls	r3, r3, #2
    7aba:	440b      	add	r3, r1
    7abc:	3308      	adds	r3, #8
    7abe:	881b      	ldrh	r3, [r3, #0]
    7ac0:	4619      	mov	r1, r3
    7ac2:	6838      	ldr	r0, [r7, #0]
    7ac4:	4b73      	ldr	r3, [pc, #460]	; (7c94 <_tc_timer_init+0x284>)
    7ac6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7ac8:	2101      	movs	r1, #1
    7aca:	6838      	ldr	r0, [r7, #0]
    7acc:	4b72      	ldr	r3, [pc, #456]	; (7c98 <_tc_timer_init+0x288>)
    7ace:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7ad0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ad4:	496d      	ldr	r1, [pc, #436]	; (7c8c <_tc_timer_init+0x27c>)
    7ad6:	4613      	mov	r3, r2
    7ad8:	009b      	lsls	r3, r3, #2
    7ada:	4413      	add	r3, r2
    7adc:	009b      	lsls	r3, r3, #2
    7ade:	440b      	add	r3, r1
    7ae0:	3304      	adds	r3, #4
    7ae2:	681b      	ldr	r3, [r3, #0]
    7ae4:	f003 030c 	and.w	r3, r3, #12
    7ae8:	2b08      	cmp	r3, #8
    7aea:	d11e      	bne.n	7b2a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7aec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7af0:	4966      	ldr	r1, [pc, #408]	; (7c8c <_tc_timer_init+0x27c>)
    7af2:	4613      	mov	r3, r2
    7af4:	009b      	lsls	r3, r3, #2
    7af6:	4413      	add	r3, r2
    7af8:	009b      	lsls	r3, r3, #2
    7afa:	440b      	add	r3, r1
    7afc:	330c      	adds	r3, #12
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	461a      	mov	r2, r3
    7b02:	2100      	movs	r1, #0
    7b04:	6838      	ldr	r0, [r7, #0]
    7b06:	4b65      	ldr	r3, [pc, #404]	; (7c9c <_tc_timer_init+0x28c>)
    7b08:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7b0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b0e:	495f      	ldr	r1, [pc, #380]	; (7c8c <_tc_timer_init+0x27c>)
    7b10:	4613      	mov	r3, r2
    7b12:	009b      	lsls	r3, r3, #2
    7b14:	4413      	add	r3, r2
    7b16:	009b      	lsls	r3, r3, #2
    7b18:	440b      	add	r3, r1
    7b1a:	3310      	adds	r3, #16
    7b1c:	681b      	ldr	r3, [r3, #0]
    7b1e:	461a      	mov	r2, r3
    7b20:	2101      	movs	r1, #1
    7b22:	6838      	ldr	r0, [r7, #0]
    7b24:	4b5d      	ldr	r3, [pc, #372]	; (7c9c <_tc_timer_init+0x28c>)
    7b26:	4798      	blx	r3
    7b28:	e06a      	b.n	7c00 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7b2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b2e:	4957      	ldr	r1, [pc, #348]	; (7c8c <_tc_timer_init+0x27c>)
    7b30:	4613      	mov	r3, r2
    7b32:	009b      	lsls	r3, r3, #2
    7b34:	4413      	add	r3, r2
    7b36:	009b      	lsls	r3, r3, #2
    7b38:	440b      	add	r3, r1
    7b3a:	3304      	adds	r3, #4
    7b3c:	681b      	ldr	r3, [r3, #0]
    7b3e:	f003 030c 	and.w	r3, r3, #12
    7b42:	2b00      	cmp	r3, #0
    7b44:	d120      	bne.n	7b88 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7b46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b4a:	4950      	ldr	r1, [pc, #320]	; (7c8c <_tc_timer_init+0x27c>)
    7b4c:	4613      	mov	r3, r2
    7b4e:	009b      	lsls	r3, r3, #2
    7b50:	4413      	add	r3, r2
    7b52:	009b      	lsls	r3, r3, #2
    7b54:	440b      	add	r3, r1
    7b56:	330c      	adds	r3, #12
    7b58:	681b      	ldr	r3, [r3, #0]
    7b5a:	b29b      	uxth	r3, r3
    7b5c:	461a      	mov	r2, r3
    7b5e:	2100      	movs	r1, #0
    7b60:	6838      	ldr	r0, [r7, #0]
    7b62:	4b4f      	ldr	r3, [pc, #316]	; (7ca0 <_tc_timer_init+0x290>)
    7b64:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7b66:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b6a:	4948      	ldr	r1, [pc, #288]	; (7c8c <_tc_timer_init+0x27c>)
    7b6c:	4613      	mov	r3, r2
    7b6e:	009b      	lsls	r3, r3, #2
    7b70:	4413      	add	r3, r2
    7b72:	009b      	lsls	r3, r3, #2
    7b74:	440b      	add	r3, r1
    7b76:	3310      	adds	r3, #16
    7b78:	681b      	ldr	r3, [r3, #0]
    7b7a:	b29b      	uxth	r3, r3
    7b7c:	461a      	mov	r2, r3
    7b7e:	2101      	movs	r1, #1
    7b80:	6838      	ldr	r0, [r7, #0]
    7b82:	4b47      	ldr	r3, [pc, #284]	; (7ca0 <_tc_timer_init+0x290>)
    7b84:	4798      	blx	r3
    7b86:	e03b      	b.n	7c00 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7b88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7b8c:	493f      	ldr	r1, [pc, #252]	; (7c8c <_tc_timer_init+0x27c>)
    7b8e:	4613      	mov	r3, r2
    7b90:	009b      	lsls	r3, r3, #2
    7b92:	4413      	add	r3, r2
    7b94:	009b      	lsls	r3, r3, #2
    7b96:	440b      	add	r3, r1
    7b98:	3304      	adds	r3, #4
    7b9a:	681b      	ldr	r3, [r3, #0]
    7b9c:	f003 030c 	and.w	r3, r3, #12
    7ba0:	2b04      	cmp	r3, #4
    7ba2:	d12d      	bne.n	7c00 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7ba4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ba8:	4938      	ldr	r1, [pc, #224]	; (7c8c <_tc_timer_init+0x27c>)
    7baa:	4613      	mov	r3, r2
    7bac:	009b      	lsls	r3, r3, #2
    7bae:	4413      	add	r3, r2
    7bb0:	009b      	lsls	r3, r3, #2
    7bb2:	440b      	add	r3, r1
    7bb4:	330c      	adds	r3, #12
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	461a      	mov	r2, r3
    7bbc:	2100      	movs	r1, #0
    7bbe:	6838      	ldr	r0, [r7, #0]
    7bc0:	4b38      	ldr	r3, [pc, #224]	; (7ca4 <_tc_timer_init+0x294>)
    7bc2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7bc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7bc8:	4930      	ldr	r1, [pc, #192]	; (7c8c <_tc_timer_init+0x27c>)
    7bca:	4613      	mov	r3, r2
    7bcc:	009b      	lsls	r3, r3, #2
    7bce:	4413      	add	r3, r2
    7bd0:	009b      	lsls	r3, r3, #2
    7bd2:	440b      	add	r3, r1
    7bd4:	3310      	adds	r3, #16
    7bd6:	681b      	ldr	r3, [r3, #0]
    7bd8:	b2db      	uxtb	r3, r3
    7bda:	461a      	mov	r2, r3
    7bdc:	2101      	movs	r1, #1
    7bde:	6838      	ldr	r0, [r7, #0]
    7be0:	4b30      	ldr	r3, [pc, #192]	; (7ca4 <_tc_timer_init+0x294>)
    7be2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7be4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7be8:	4928      	ldr	r1, [pc, #160]	; (7c8c <_tc_timer_init+0x27c>)
    7bea:	4613      	mov	r3, r2
    7bec:	009b      	lsls	r3, r3, #2
    7bee:	4413      	add	r3, r2
    7bf0:	009b      	lsls	r3, r3, #2
    7bf2:	440b      	add	r3, r1
    7bf4:	330b      	adds	r3, #11
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	4619      	mov	r1, r3
    7bfa:	6838      	ldr	r0, [r7, #0]
    7bfc:	4b2a      	ldr	r3, [pc, #168]	; (7ca8 <_tc_timer_init+0x298>)
    7bfe:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7c00:	6838      	ldr	r0, [r7, #0]
    7c02:	4b2a      	ldr	r3, [pc, #168]	; (7cac <_tc_timer_init+0x29c>)
    7c04:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7c06:	6879      	ldr	r1, [r7, #4]
    7c08:	6838      	ldr	r0, [r7, #0]
    7c0a:	4b29      	ldr	r3, [pc, #164]	; (7cb0 <_tc_timer_init+0x2a0>)
    7c0c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7c0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c12:	491e      	ldr	r1, [pc, #120]	; (7c8c <_tc_timer_init+0x27c>)
    7c14:	4613      	mov	r3, r2
    7c16:	009b      	lsls	r3, r3, #2
    7c18:	4413      	add	r3, r2
    7c1a:	009b      	lsls	r3, r3, #2
    7c1c:	440b      	add	r3, r1
    7c1e:	3302      	adds	r3, #2
    7c20:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c24:	4618      	mov	r0, r3
    7c26:	4b23      	ldr	r3, [pc, #140]	; (7cb4 <_tc_timer_init+0x2a4>)
    7c28:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7c2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c2e:	4917      	ldr	r1, [pc, #92]	; (7c8c <_tc_timer_init+0x27c>)
    7c30:	4613      	mov	r3, r2
    7c32:	009b      	lsls	r3, r3, #2
    7c34:	4413      	add	r3, r2
    7c36:	009b      	lsls	r3, r3, #2
    7c38:	440b      	add	r3, r1
    7c3a:	3302      	adds	r3, #2
    7c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c40:	4618      	mov	r0, r3
    7c42:	4b1d      	ldr	r3, [pc, #116]	; (7cb8 <_tc_timer_init+0x2a8>)
    7c44:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7c46:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7c4a:	4910      	ldr	r1, [pc, #64]	; (7c8c <_tc_timer_init+0x27c>)
    7c4c:	4613      	mov	r3, r2
    7c4e:	009b      	lsls	r3, r3, #2
    7c50:	4413      	add	r3, r2
    7c52:	009b      	lsls	r3, r3, #2
    7c54:	440b      	add	r3, r1
    7c56:	3302      	adds	r3, #2
    7c58:	f9b3 3000 	ldrsh.w	r3, [r3]
    7c5c:	4618      	mov	r0, r3
    7c5e:	4b17      	ldr	r3, [pc, #92]	; (7cbc <_tc_timer_init+0x2ac>)
    7c60:	4798      	blx	r3

	return ERR_NONE;
    7c62:	2300      	movs	r3, #0
}
    7c64:	4618      	mov	r0, r3
    7c66:	3710      	adds	r7, #16
    7c68:	46bd      	mov	sp, r7
    7c6a:	bd80      	pop	{r7, pc}
    7c6c:	000082a1 	.word	0x000082a1
    7c70:	0000ee90 	.word	0x0000ee90
    7c74:	00003725 	.word	0x00003725
    7c78:	00007685 	.word	0x00007685
    7c7c:	00007825 	.word	0x00007825
    7c80:	000077d5 	.word	0x000077d5
    7c84:	00007661 	.word	0x00007661
    7c88:	00007855 	.word	0x00007855
    7c8c:	200000e0 	.word	0x200000e0
    7c90:	000078b5 	.word	0x000078b5
    7c94:	00007879 	.word	0x00007879
    7c98:	00007897 	.word	0x00007897
    7c9c:	000079b5 	.word	0x000079b5
    7ca0:	00007951 	.word	0x00007951
    7ca4:	00007921 	.word	0x00007921
    7ca8:	000078d5 	.word	0x000078d5
    7cac:	00007709 	.word	0x00007709
    7cb0:	00008309 	.word	0x00008309
    7cb4:	000075e1 	.word	0x000075e1
    7cb8:	00007625 	.word	0x00007625
    7cbc:	000075a5 	.word	0x000075a5

00007cc0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7cc0:	b580      	push	{r7, lr}
    7cc2:	b084      	sub	sp, #16
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	6078      	str	r0, [r7, #4]
    7cc8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7cca:	6838      	ldr	r0, [r7, #0]
    7ccc:	4b73      	ldr	r3, [pc, #460]	; (7e9c <_pwm_init+0x1dc>)
    7cce:	4798      	blx	r3
    7cd0:	4603      	mov	r3, r0
    7cd2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	683a      	ldr	r2, [r7, #0]
    7cd8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7cda:	2101      	movs	r1, #1
    7cdc:	6838      	ldr	r0, [r7, #0]
    7cde:	4b70      	ldr	r3, [pc, #448]	; (7ea0 <_pwm_init+0x1e0>)
    7ce0:	4798      	blx	r3
    7ce2:	4603      	mov	r3, r0
    7ce4:	f083 0301 	eor.w	r3, r3, #1
    7ce8:	b2db      	uxtb	r3, r3
    7cea:	2b00      	cmp	r3, #0
    7cec:	d011      	beq.n	7d12 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7cee:	2102      	movs	r1, #2
    7cf0:	6838      	ldr	r0, [r7, #0]
    7cf2:	4b6c      	ldr	r3, [pc, #432]	; (7ea4 <_pwm_init+0x1e4>)
    7cf4:	4798      	blx	r3
    7cf6:	4603      	mov	r3, r0
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d006      	beq.n	7d0a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7cfc:	6838      	ldr	r0, [r7, #0]
    7cfe:	4b6a      	ldr	r3, [pc, #424]	; (7ea8 <_pwm_init+0x1e8>)
    7d00:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d02:	2102      	movs	r1, #2
    7d04:	6838      	ldr	r0, [r7, #0]
    7d06:	4b69      	ldr	r3, [pc, #420]	; (7eac <_pwm_init+0x1ec>)
    7d08:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d0a:	2101      	movs	r1, #1
    7d0c:	6838      	ldr	r0, [r7, #0]
    7d0e:	4b68      	ldr	r3, [pc, #416]	; (7eb0 <_pwm_init+0x1f0>)
    7d10:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d12:	2101      	movs	r1, #1
    7d14:	6838      	ldr	r0, [r7, #0]
    7d16:	4b65      	ldr	r3, [pc, #404]	; (7eac <_pwm_init+0x1ec>)
    7d18:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d1a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d1e:	4965      	ldr	r1, [pc, #404]	; (7eb4 <_pwm_init+0x1f4>)
    7d20:	4613      	mov	r3, r2
    7d22:	009b      	lsls	r3, r3, #2
    7d24:	4413      	add	r3, r2
    7d26:	009b      	lsls	r3, r3, #2
    7d28:	440b      	add	r3, r1
    7d2a:	3304      	adds	r3, #4
    7d2c:	681b      	ldr	r3, [r3, #0]
    7d2e:	4619      	mov	r1, r3
    7d30:	6838      	ldr	r0, [r7, #0]
    7d32:	4b5f      	ldr	r3, [pc, #380]	; (7eb0 <_pwm_init+0x1f0>)
    7d34:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d3a:	495e      	ldr	r1, [pc, #376]	; (7eb4 <_pwm_init+0x1f4>)
    7d3c:	4613      	mov	r3, r2
    7d3e:	009b      	lsls	r3, r3, #2
    7d40:	4413      	add	r3, r2
    7d42:	009b      	lsls	r3, r3, #2
    7d44:	440b      	add	r3, r1
    7d46:	330a      	adds	r3, #10
    7d48:	781b      	ldrb	r3, [r3, #0]
    7d4a:	4619      	mov	r1, r3
    7d4c:	6838      	ldr	r0, [r7, #0]
    7d4e:	4b5a      	ldr	r3, [pc, #360]	; (7eb8 <_pwm_init+0x1f8>)
    7d50:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7d52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d56:	4957      	ldr	r1, [pc, #348]	; (7eb4 <_pwm_init+0x1f4>)
    7d58:	4613      	mov	r3, r2
    7d5a:	009b      	lsls	r3, r3, #2
    7d5c:	4413      	add	r3, r2
    7d5e:	009b      	lsls	r3, r3, #2
    7d60:	440b      	add	r3, r1
    7d62:	3308      	adds	r3, #8
    7d64:	881b      	ldrh	r3, [r3, #0]
    7d66:	4619      	mov	r1, r3
    7d68:	6838      	ldr	r0, [r7, #0]
    7d6a:	4b54      	ldr	r3, [pc, #336]	; (7ebc <_pwm_init+0x1fc>)
    7d6c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    7d6e:	2103      	movs	r1, #3
    7d70:	6838      	ldr	r0, [r7, #0]
    7d72:	4b53      	ldr	r3, [pc, #332]	; (7ec0 <_pwm_init+0x200>)
    7d74:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7d76:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d7a:	494e      	ldr	r1, [pc, #312]	; (7eb4 <_pwm_init+0x1f4>)
    7d7c:	4613      	mov	r3, r2
    7d7e:	009b      	lsls	r3, r3, #2
    7d80:	4413      	add	r3, r2
    7d82:	009b      	lsls	r3, r3, #2
    7d84:	440b      	add	r3, r1
    7d86:	3304      	adds	r3, #4
    7d88:	681b      	ldr	r3, [r3, #0]
    7d8a:	f003 030c 	and.w	r3, r3, #12
    7d8e:	2b08      	cmp	r3, #8
    7d90:	d11e      	bne.n	7dd0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7d92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d96:	4947      	ldr	r1, [pc, #284]	; (7eb4 <_pwm_init+0x1f4>)
    7d98:	4613      	mov	r3, r2
    7d9a:	009b      	lsls	r3, r3, #2
    7d9c:	4413      	add	r3, r2
    7d9e:	009b      	lsls	r3, r3, #2
    7da0:	440b      	add	r3, r1
    7da2:	330c      	adds	r3, #12
    7da4:	681b      	ldr	r3, [r3, #0]
    7da6:	461a      	mov	r2, r3
    7da8:	2100      	movs	r1, #0
    7daa:	6838      	ldr	r0, [r7, #0]
    7dac:	4b45      	ldr	r3, [pc, #276]	; (7ec4 <_pwm_init+0x204>)
    7dae:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7db0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db4:	493f      	ldr	r1, [pc, #252]	; (7eb4 <_pwm_init+0x1f4>)
    7db6:	4613      	mov	r3, r2
    7db8:	009b      	lsls	r3, r3, #2
    7dba:	4413      	add	r3, r2
    7dbc:	009b      	lsls	r3, r3, #2
    7dbe:	440b      	add	r3, r1
    7dc0:	3310      	adds	r3, #16
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	461a      	mov	r2, r3
    7dc6:	2101      	movs	r1, #1
    7dc8:	6838      	ldr	r0, [r7, #0]
    7dca:	4b3e      	ldr	r3, [pc, #248]	; (7ec4 <_pwm_init+0x204>)
    7dcc:	4798      	blx	r3
    7dce:	e031      	b.n	7e34 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7dd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd4:	4937      	ldr	r1, [pc, #220]	; (7eb4 <_pwm_init+0x1f4>)
    7dd6:	4613      	mov	r3, r2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4413      	add	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	440b      	add	r3, r1
    7de0:	3304      	adds	r3, #4
    7de2:	681b      	ldr	r3, [r3, #0]
    7de4:	f003 030c 	and.w	r3, r3, #12
    7de8:	2b00      	cmp	r3, #0
    7dea:	d120      	bne.n	7e2e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7dec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7df0:	4930      	ldr	r1, [pc, #192]	; (7eb4 <_pwm_init+0x1f4>)
    7df2:	4613      	mov	r3, r2
    7df4:	009b      	lsls	r3, r3, #2
    7df6:	4413      	add	r3, r2
    7df8:	009b      	lsls	r3, r3, #2
    7dfa:	440b      	add	r3, r1
    7dfc:	330c      	adds	r3, #12
    7dfe:	681b      	ldr	r3, [r3, #0]
    7e00:	b29b      	uxth	r3, r3
    7e02:	461a      	mov	r2, r3
    7e04:	2100      	movs	r1, #0
    7e06:	6838      	ldr	r0, [r7, #0]
    7e08:	4b2f      	ldr	r3, [pc, #188]	; (7ec8 <_pwm_init+0x208>)
    7e0a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e10:	4928      	ldr	r1, [pc, #160]	; (7eb4 <_pwm_init+0x1f4>)
    7e12:	4613      	mov	r3, r2
    7e14:	009b      	lsls	r3, r3, #2
    7e16:	4413      	add	r3, r2
    7e18:	009b      	lsls	r3, r3, #2
    7e1a:	440b      	add	r3, r1
    7e1c:	3310      	adds	r3, #16
    7e1e:	681b      	ldr	r3, [r3, #0]
    7e20:	b29b      	uxth	r3, r3
    7e22:	461a      	mov	r2, r3
    7e24:	2101      	movs	r1, #1
    7e26:	6838      	ldr	r0, [r7, #0]
    7e28:	4b27      	ldr	r3, [pc, #156]	; (7ec8 <_pwm_init+0x208>)
    7e2a:	4798      	blx	r3
    7e2c:	e002      	b.n	7e34 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7e2e:	f04f 33ff 	mov.w	r3, #4294967295
    7e32:	e02e      	b.n	7e92 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7e34:	6879      	ldr	r1, [r7, #4]
    7e36:	6838      	ldr	r0, [r7, #0]
    7e38:	4b24      	ldr	r3, [pc, #144]	; (7ecc <_pwm_init+0x20c>)
    7e3a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7e3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e40:	491c      	ldr	r1, [pc, #112]	; (7eb4 <_pwm_init+0x1f4>)
    7e42:	4613      	mov	r3, r2
    7e44:	009b      	lsls	r3, r3, #2
    7e46:	4413      	add	r3, r2
    7e48:	009b      	lsls	r3, r3, #2
    7e4a:	440b      	add	r3, r1
    7e4c:	3302      	adds	r3, #2
    7e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e52:	4618      	mov	r0, r3
    7e54:	4b1e      	ldr	r3, [pc, #120]	; (7ed0 <_pwm_init+0x210>)
    7e56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7e58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e5c:	4915      	ldr	r1, [pc, #84]	; (7eb4 <_pwm_init+0x1f4>)
    7e5e:	4613      	mov	r3, r2
    7e60:	009b      	lsls	r3, r3, #2
    7e62:	4413      	add	r3, r2
    7e64:	009b      	lsls	r3, r3, #2
    7e66:	440b      	add	r3, r1
    7e68:	3302      	adds	r3, #2
    7e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e6e:	4618      	mov	r0, r3
    7e70:	4b18      	ldr	r3, [pc, #96]	; (7ed4 <_pwm_init+0x214>)
    7e72:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7e74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e78:	490e      	ldr	r1, [pc, #56]	; (7eb4 <_pwm_init+0x1f4>)
    7e7a:	4613      	mov	r3, r2
    7e7c:	009b      	lsls	r3, r3, #2
    7e7e:	4413      	add	r3, r2
    7e80:	009b      	lsls	r3, r3, #2
    7e82:	440b      	add	r3, r1
    7e84:	3302      	adds	r3, #2
    7e86:	f9b3 3000 	ldrsh.w	r3, [r3]
    7e8a:	4618      	mov	r0, r3
    7e8c:	4b12      	ldr	r3, [pc, #72]	; (7ed8 <_pwm_init+0x218>)
    7e8e:	4798      	blx	r3

	return 0;
    7e90:	2300      	movs	r3, #0
}
    7e92:	4618      	mov	r0, r3
    7e94:	3710      	adds	r7, #16
    7e96:	46bd      	mov	sp, r7
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	bf00      	nop
    7e9c:	000082a1 	.word	0x000082a1
    7ea0:	00007685 	.word	0x00007685
    7ea4:	00007825 	.word	0x00007825
    7ea8:	000077d5 	.word	0x000077d5
    7eac:	00007661 	.word	0x00007661
    7eb0:	00007855 	.word	0x00007855
    7eb4:	200000e0 	.word	0x200000e0
    7eb8:	000078b5 	.word	0x000078b5
    7ebc:	00007879 	.word	0x00007879
    7ec0:	00007897 	.word	0x00007897
    7ec4:	000079b5 	.word	0x000079b5
    7ec8:	00007951 	.word	0x00007951
    7ecc:	00008309 	.word	0x00008309
    7ed0:	000075e1 	.word	0x000075e1
    7ed4:	00007625 	.word	0x00007625
    7ed8:	000075a5 	.word	0x000075a5

00007edc <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	b084      	sub	sp, #16
    7ee0:	af00      	add	r7, sp, #0
    7ee2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	68db      	ldr	r3, [r3, #12]
    7ee8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7eea:	68f8      	ldr	r0, [r7, #12]
    7eec:	4b10      	ldr	r3, [pc, #64]	; (7f30 <_tc_timer_deinit+0x54>)
    7eee:	4798      	blx	r3
    7ef0:	4603      	mov	r3, r0
    7ef2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7ef4:	22f9      	movs	r2, #249	; 0xf9
    7ef6:	490f      	ldr	r1, [pc, #60]	; (7f34 <_tc_timer_deinit+0x58>)
    7ef8:	2001      	movs	r0, #1
    7efa:	4b0f      	ldr	r3, [pc, #60]	; (7f38 <_tc_timer_deinit+0x5c>)
    7efc:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    7efe:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7f02:	490e      	ldr	r1, [pc, #56]	; (7f3c <_tc_timer_deinit+0x60>)
    7f04:	4613      	mov	r3, r2
    7f06:	009b      	lsls	r3, r3, #2
    7f08:	4413      	add	r3, r2
    7f0a:	009b      	lsls	r3, r3, #2
    7f0c:	440b      	add	r3, r1
    7f0e:	3302      	adds	r3, #2
    7f10:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f14:	4618      	mov	r0, r3
    7f16:	4b0a      	ldr	r3, [pc, #40]	; (7f40 <_tc_timer_deinit+0x64>)
    7f18:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7f1a:	68f8      	ldr	r0, [r7, #12]
    7f1c:	4b09      	ldr	r3, [pc, #36]	; (7f44 <_tc_timer_deinit+0x68>)
    7f1e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    7f20:	68f8      	ldr	r0, [r7, #12]
    7f22:	4b09      	ldr	r3, [pc, #36]	; (7f48 <_tc_timer_deinit+0x6c>)
    7f24:	4798      	blx	r3
}
    7f26:	bf00      	nop
    7f28:	3710      	adds	r7, #16
    7f2a:	46bd      	mov	sp, r7
    7f2c:	bd80      	pop	{r7, pc}
    7f2e:	bf00      	nop
    7f30:	000082a1 	.word	0x000082a1
    7f34:	0000ee90 	.word	0x0000ee90
    7f38:	00003725 	.word	0x00003725
    7f3c:	200000e0 	.word	0x200000e0
    7f40:	000075e1 	.word	0x000075e1
    7f44:	000077d5 	.word	0x000077d5
    7f48:	0000774d 	.word	0x0000774d

00007f4c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    7f4c:	b580      	push	{r7, lr}
    7f4e:	b082      	sub	sp, #8
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	68db      	ldr	r3, [r3, #12]
    7f58:	4618      	mov	r0, r3
    7f5a:	4b03      	ldr	r3, [pc, #12]	; (7f68 <_tc_timer_start+0x1c>)
    7f5c:	4798      	blx	r3
}
    7f5e:	bf00      	nop
    7f60:	3708      	adds	r7, #8
    7f62:	46bd      	mov	sp, r7
    7f64:	bd80      	pop	{r7, pc}
    7f66:	bf00      	nop
    7f68:	00007775 	.word	0x00007775

00007f6c <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    7f6c:	b580      	push	{r7, lr}
    7f6e:	b082      	sub	sp, #8
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	691b      	ldr	r3, [r3, #16]
    7f78:	4618      	mov	r0, r3
    7f7a:	4b03      	ldr	r3, [pc, #12]	; (7f88 <_pwm_enable+0x1c>)
    7f7c:	4798      	blx	r3
}
    7f7e:	bf00      	nop
    7f80:	3708      	adds	r7, #8
    7f82:	46bd      	mov	sp, r7
    7f84:	bd80      	pop	{r7, pc}
    7f86:	bf00      	nop
    7f88:	00007775 	.word	0x00007775

00007f8c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b082      	sub	sp, #8
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	68db      	ldr	r3, [r3, #12]
    7f98:	4618      	mov	r0, r3
    7f9a:	4b03      	ldr	r3, [pc, #12]	; (7fa8 <_tc_timer_stop+0x1c>)
    7f9c:	4798      	blx	r3
}
    7f9e:	bf00      	nop
    7fa0:	3708      	adds	r7, #8
    7fa2:	46bd      	mov	sp, r7
    7fa4:	bd80      	pop	{r7, pc}
    7fa6:	bf00      	nop
    7fa8:	000077d5 	.word	0x000077d5

00007fac <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
    7fb4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	68db      	ldr	r3, [r3, #12]
    7fba:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7fbc:	68f8      	ldr	r0, [r7, #12]
    7fbe:	4b14      	ldr	r3, [pc, #80]	; (8010 <_tc_timer_set_period+0x64>)
    7fc0:	4798      	blx	r3
    7fc2:	4603      	mov	r3, r0
    7fc4:	2b02      	cmp	r3, #2
    7fc6:	d105      	bne.n	7fd4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7fc8:	683a      	ldr	r2, [r7, #0]
    7fca:	2100      	movs	r1, #0
    7fcc:	68f8      	ldr	r0, [r7, #12]
    7fce:	4b11      	ldr	r3, [pc, #68]	; (8014 <_tc_timer_set_period+0x68>)
    7fd0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7fd2:	e019      	b.n	8008 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7fd4:	68f8      	ldr	r0, [r7, #12]
    7fd6:	4b0e      	ldr	r3, [pc, #56]	; (8010 <_tc_timer_set_period+0x64>)
    7fd8:	4798      	blx	r3
    7fda:	4603      	mov	r3, r0
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d107      	bne.n	7ff0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7fe0:	683b      	ldr	r3, [r7, #0]
    7fe2:	b29b      	uxth	r3, r3
    7fe4:	461a      	mov	r2, r3
    7fe6:	2100      	movs	r1, #0
    7fe8:	68f8      	ldr	r0, [r7, #12]
    7fea:	4b0b      	ldr	r3, [pc, #44]	; (8018 <_tc_timer_set_period+0x6c>)
    7fec:	4798      	blx	r3
}
    7fee:	e00b      	b.n	8008 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ff0:	68f8      	ldr	r0, [r7, #12]
    7ff2:	4b07      	ldr	r3, [pc, #28]	; (8010 <_tc_timer_set_period+0x64>)
    7ff4:	4798      	blx	r3
    7ff6:	4603      	mov	r3, r0
    7ff8:	2b01      	cmp	r3, #1
    7ffa:	d105      	bne.n	8008 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7ffc:	683b      	ldr	r3, [r7, #0]
    7ffe:	b2db      	uxtb	r3, r3
    8000:	4619      	mov	r1, r3
    8002:	68f8      	ldr	r0, [r7, #12]
    8004:	4b05      	ldr	r3, [pc, #20]	; (801c <_tc_timer_set_period+0x70>)
    8006:	4798      	blx	r3
}
    8008:	bf00      	nop
    800a:	3710      	adds	r7, #16
    800c:	46bd      	mov	sp, r7
    800e:	bd80      	pop	{r7, pc}
    8010:	000077fd 	.word	0x000077fd
    8014:	000079b5 	.word	0x000079b5
    8018:	00007951 	.word	0x00007951
    801c:	000078d5 	.word	0x000078d5

00008020 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8020:	b580      	push	{r7, lr}
    8022:	b084      	sub	sp, #16
    8024:	af00      	add	r7, sp, #0
    8026:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8028:	687b      	ldr	r3, [r7, #4]
    802a:	68db      	ldr	r3, [r3, #12]
    802c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    802e:	68f8      	ldr	r0, [r7, #12]
    8030:	4b13      	ldr	r3, [pc, #76]	; (8080 <_tc_timer_get_period+0x60>)
    8032:	4798      	blx	r3
    8034:	4603      	mov	r3, r0
    8036:	2b02      	cmp	r3, #2
    8038:	d105      	bne.n	8046 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    803a:	2100      	movs	r1, #0
    803c:	68f8      	ldr	r0, [r7, #12]
    803e:	4b11      	ldr	r3, [pc, #68]	; (8084 <_tc_timer_get_period+0x64>)
    8040:	4798      	blx	r3
    8042:	4603      	mov	r3, r0
    8044:	e017      	b.n	8076 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8046:	68f8      	ldr	r0, [r7, #12]
    8048:	4b0d      	ldr	r3, [pc, #52]	; (8080 <_tc_timer_get_period+0x60>)
    804a:	4798      	blx	r3
    804c:	4603      	mov	r3, r0
    804e:	2b00      	cmp	r3, #0
    8050:	d105      	bne.n	805e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8052:	2100      	movs	r1, #0
    8054:	68f8      	ldr	r0, [r7, #12]
    8056:	4b0c      	ldr	r3, [pc, #48]	; (8088 <_tc_timer_get_period+0x68>)
    8058:	4798      	blx	r3
    805a:	4603      	mov	r3, r0
    805c:	e00b      	b.n	8076 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    805e:	68f8      	ldr	r0, [r7, #12]
    8060:	4b07      	ldr	r3, [pc, #28]	; (8080 <_tc_timer_get_period+0x60>)
    8062:	4798      	blx	r3
    8064:	4603      	mov	r3, r0
    8066:	2b01      	cmp	r3, #1
    8068:	d104      	bne.n	8074 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    806a:	68f8      	ldr	r0, [r7, #12]
    806c:	4b07      	ldr	r3, [pc, #28]	; (808c <_tc_timer_get_period+0x6c>)
    806e:	4798      	blx	r3
    8070:	4603      	mov	r3, r0
    8072:	e000      	b.n	8076 <_tc_timer_get_period+0x56>
	}

	return 0;
    8074:	2300      	movs	r3, #0
}
    8076:	4618      	mov	r0, r3
    8078:	3710      	adds	r7, #16
    807a:	46bd      	mov	sp, r7
    807c:	bd80      	pop	{r7, pc}
    807e:	bf00      	nop
    8080:	000077fd 	.word	0x000077fd
    8084:	000079e5 	.word	0x000079e5
    8088:	00007985 	.word	0x00007985
    808c:	000078fd 	.word	0x000078fd

00008090 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8090:	b580      	push	{r7, lr}
    8092:	b082      	sub	sp, #8
    8094:	af00      	add	r7, sp, #0
    8096:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	68db      	ldr	r3, [r3, #12]
    809c:	4618      	mov	r0, r3
    809e:	4b03      	ldr	r3, [pc, #12]	; (80ac <_tc_timer_is_started+0x1c>)
    80a0:	4798      	blx	r3
    80a2:	4603      	mov	r3, r0
}
    80a4:	4618      	mov	r0, r3
    80a6:	3708      	adds	r7, #8
    80a8:	46bd      	mov	sp, r7
    80aa:	bd80      	pop	{r7, pc}
    80ac:	0000779d 	.word	0x0000779d

000080b0 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b082      	sub	sp, #8
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	691b      	ldr	r3, [r3, #16]
    80bc:	4618      	mov	r0, r3
    80be:	4b03      	ldr	r3, [pc, #12]	; (80cc <_pwm_is_enabled+0x1c>)
    80c0:	4798      	blx	r3
    80c2:	4603      	mov	r3, r0
}
    80c4:	4618      	mov	r0, r3
    80c6:	3708      	adds	r7, #8
    80c8:	46bd      	mov	sp, r7
    80ca:	bd80      	pop	{r7, pc}
    80cc:	0000779d 	.word	0x0000779d

000080d0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    80d0:	b480      	push	{r7}
    80d2:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    80d4:	4b02      	ldr	r3, [pc, #8]	; (80e0 <_tc_get_timer+0x10>)
}
    80d6:	4618      	mov	r0, r3
    80d8:	46bd      	mov	sp, r7
    80da:	f85d 7b04 	ldr.w	r7, [sp], #4
    80de:	4770      	bx	lr
    80e0:	20000158 	.word	0x20000158

000080e4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    80e4:	b480      	push	{r7}
    80e6:	af00      	add	r7, sp, #0
	return NULL;
    80e8:	2300      	movs	r3, #0
}
    80ea:	4618      	mov	r0, r3
    80ec:	46bd      	mov	sp, r7
    80ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f2:	4770      	bx	lr

000080f4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    80f4:	b580      	push	{r7, lr}
    80f6:	b084      	sub	sp, #16
    80f8:	af00      	add	r7, sp, #0
    80fa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	68db      	ldr	r3, [r3, #12]
    8100:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8102:	68f8      	ldr	r0, [r7, #12]
    8104:	4b0e      	ldr	r3, [pc, #56]	; (8140 <_tc_timer_set_irq+0x4c>)
    8106:	4798      	blx	r3
    8108:	4603      	mov	r3, r0
    810a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    810c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8110:	490c      	ldr	r1, [pc, #48]	; (8144 <_tc_timer_set_irq+0x50>)
    8112:	2001      	movs	r0, #1
    8114:	4b0c      	ldr	r3, [pc, #48]	; (8148 <_tc_timer_set_irq+0x54>)
    8116:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8118:	f997 200b 	ldrsb.w	r2, [r7, #11]
    811c:	490b      	ldr	r1, [pc, #44]	; (814c <_tc_timer_set_irq+0x58>)
    811e:	4613      	mov	r3, r2
    8120:	009b      	lsls	r3, r3, #2
    8122:	4413      	add	r3, r2
    8124:	009b      	lsls	r3, r3, #2
    8126:	440b      	add	r3, r1
    8128:	3302      	adds	r3, #2
    812a:	f9b3 3000 	ldrsh.w	r3, [r3]
    812e:	b2db      	uxtb	r3, r3
    8130:	4618      	mov	r0, r3
    8132:	4b07      	ldr	r3, [pc, #28]	; (8150 <_tc_timer_set_irq+0x5c>)
    8134:	4798      	blx	r3
}
    8136:	bf00      	nop
    8138:	3710      	adds	r7, #16
    813a:	46bd      	mov	sp, r7
    813c:	bd80      	pop	{r7, pc}
    813e:	bf00      	nop
    8140:	000082a1 	.word	0x000082a1
    8144:	0000ee90 	.word	0x0000ee90
    8148:	00003725 	.word	0x00003725
    814c:	200000e0 	.word	0x200000e0
    8150:	00003f71 	.word	0x00003f71

00008154 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8154:	b580      	push	{r7, lr}
    8156:	b084      	sub	sp, #16
    8158:	af00      	add	r7, sp, #0
    815a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	68db      	ldr	r3, [r3, #12]
    8160:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8162:	68f8      	ldr	r0, [r7, #12]
    8164:	4b07      	ldr	r3, [pc, #28]	; (8184 <tc_interrupt_handler+0x30>)
    8166:	4798      	blx	r3
    8168:	4603      	mov	r3, r0
    816a:	2b00      	cmp	r3, #0
    816c:	d006      	beq.n	817c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    816e:	68f8      	ldr	r0, [r7, #12]
    8170:	4b05      	ldr	r3, [pc, #20]	; (8188 <tc_interrupt_handler+0x34>)
    8172:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8174:	687b      	ldr	r3, [r7, #4]
    8176:	681b      	ldr	r3, [r3, #0]
    8178:	6878      	ldr	r0, [r7, #4]
    817a:	4798      	blx	r3
	}
}
    817c:	bf00      	nop
    817e:	3710      	adds	r7, #16
    8180:	46bd      	mov	sp, r7
    8182:	bd80      	pop	{r7, pc}
    8184:	000076ad 	.word	0x000076ad
    8188:	000076d5 	.word	0x000076d5

0000818c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    818c:	b580      	push	{r7, lr}
    818e:	b084      	sub	sp, #16
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	691b      	ldr	r3, [r3, #16]
    8198:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    819a:	68f8      	ldr	r0, [r7, #12]
    819c:	4b12      	ldr	r3, [pc, #72]	; (81e8 <tc_pwm_interrupt_handler+0x5c>)
    819e:	4798      	blx	r3
    81a0:	4603      	mov	r3, r0
    81a2:	2b00      	cmp	r3, #0
    81a4:	d00a      	beq.n	81bc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	4b10      	ldr	r3, [pc, #64]	; (81ec <tc_pwm_interrupt_handler+0x60>)
    81aa:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	681b      	ldr	r3, [r3, #0]
    81b0:	2b00      	cmp	r3, #0
    81b2:	d003      	beq.n	81bc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	681b      	ldr	r3, [r3, #0]
    81b8:	6878      	ldr	r0, [r7, #4]
    81ba:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    81bc:	68f8      	ldr	r0, [r7, #12]
    81be:	4b0c      	ldr	r3, [pc, #48]	; (81f0 <tc_pwm_interrupt_handler+0x64>)
    81c0:	4798      	blx	r3
    81c2:	4603      	mov	r3, r0
    81c4:	2b00      	cmp	r3, #0
    81c6:	d00a      	beq.n	81de <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    81c8:	68f8      	ldr	r0, [r7, #12]
    81ca:	4b0a      	ldr	r3, [pc, #40]	; (81f4 <tc_pwm_interrupt_handler+0x68>)
    81cc:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	685b      	ldr	r3, [r3, #4]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d003      	beq.n	81de <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    81d6:	687b      	ldr	r3, [r7, #4]
    81d8:	685b      	ldr	r3, [r3, #4]
    81da:	6878      	ldr	r0, [r7, #4]
    81dc:	4798      	blx	r3
		}
	}
}
    81de:	bf00      	nop
    81e0:	3710      	adds	r7, #16
    81e2:	46bd      	mov	sp, r7
    81e4:	bd80      	pop	{r7, pc}
    81e6:	bf00      	nop
    81e8:	000076ad 	.word	0x000076ad
    81ec:	000076d5 	.word	0x000076d5
    81f0:	00007723 	.word	0x00007723
    81f4:	000076ef 	.word	0x000076ef

000081f8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    81f8:	b580      	push	{r7, lr}
    81fa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    81fc:	4b03      	ldr	r3, [pc, #12]	; (820c <TC0_Handler+0x14>)
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	4618      	mov	r0, r3
    8202:	4b03      	ldr	r3, [pc, #12]	; (8210 <TC0_Handler+0x18>)
    8204:	4798      	blx	r3
}
    8206:	bf00      	nop
    8208:	bd80      	pop	{r7, pc}
    820a:	bf00      	nop
    820c:	20000814 	.word	0x20000814
    8210:	00008155 	.word	0x00008155

00008214 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8214:	b580      	push	{r7, lr}
    8216:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8218:	4b03      	ldr	r3, [pc, #12]	; (8228 <TC2_Handler+0x14>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	4618      	mov	r0, r3
    821e:	4b03      	ldr	r3, [pc, #12]	; (822c <TC2_Handler+0x18>)
    8220:	4798      	blx	r3
}
    8222:	bf00      	nop
    8224:	bd80      	pop	{r7, pc}
    8226:	bf00      	nop
    8228:	20000818 	.word	0x20000818
    822c:	00008155 	.word	0x00008155

00008230 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8230:	b580      	push	{r7, lr}
    8232:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8234:	4b03      	ldr	r3, [pc, #12]	; (8244 <TC4_Handler+0x14>)
    8236:	681b      	ldr	r3, [r3, #0]
    8238:	4618      	mov	r0, r3
    823a:	4b03      	ldr	r3, [pc, #12]	; (8248 <TC4_Handler+0x18>)
    823c:	4798      	blx	r3
}
    823e:	bf00      	nop
    8240:	bd80      	pop	{r7, pc}
    8242:	bf00      	nop
    8244:	2000081c 	.word	0x2000081c
    8248:	00008155 	.word	0x00008155

0000824c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    824c:	b580      	push	{r7, lr}
    824e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8250:	4b03      	ldr	r3, [pc, #12]	; (8260 <TC5_Handler+0x14>)
    8252:	681b      	ldr	r3, [r3, #0]
    8254:	4618      	mov	r0, r3
    8256:	4b03      	ldr	r3, [pc, #12]	; (8264 <TC5_Handler+0x18>)
    8258:	4798      	blx	r3
}
    825a:	bf00      	nop
    825c:	bd80      	pop	{r7, pc}
    825e:	bf00      	nop
    8260:	20000820 	.word	0x20000820
    8264:	00008155 	.word	0x00008155

00008268 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8268:	b580      	push	{r7, lr}
    826a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    826c:	4b03      	ldr	r3, [pc, #12]	; (827c <TC6_Handler+0x14>)
    826e:	681b      	ldr	r3, [r3, #0]
    8270:	4618      	mov	r0, r3
    8272:	4b03      	ldr	r3, [pc, #12]	; (8280 <TC6_Handler+0x18>)
    8274:	4798      	blx	r3
}
    8276:	bf00      	nop
    8278:	bd80      	pop	{r7, pc}
    827a:	bf00      	nop
    827c:	20000824 	.word	0x20000824
    8280:	00008155 	.word	0x00008155

00008284 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8284:	b580      	push	{r7, lr}
    8286:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8288:	4b03      	ldr	r3, [pc, #12]	; (8298 <TC7_Handler+0x14>)
    828a:	681b      	ldr	r3, [r3, #0]
    828c:	4618      	mov	r0, r3
    828e:	4b03      	ldr	r3, [pc, #12]	; (829c <TC7_Handler+0x18>)
    8290:	4798      	blx	r3
}
    8292:	bf00      	nop
    8294:	bd80      	pop	{r7, pc}
    8296:	bf00      	nop
    8298:	20000828 	.word	0x20000828
    829c:	0000818d 	.word	0x0000818d

000082a0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	b084      	sub	sp, #16
    82a4:	af00      	add	r7, sp, #0
    82a6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    82a8:	6878      	ldr	r0, [r7, #4]
    82aa:	4b13      	ldr	r3, [pc, #76]	; (82f8 <get_tc_index+0x58>)
    82ac:	4798      	blx	r3
    82ae:	4603      	mov	r3, r0
    82b0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82b2:	2300      	movs	r3, #0
    82b4:	73fb      	strb	r3, [r7, #15]
    82b6:	e010      	b.n	82da <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    82b8:	7bfa      	ldrb	r2, [r7, #15]
    82ba:	4910      	ldr	r1, [pc, #64]	; (82fc <get_tc_index+0x5c>)
    82bc:	4613      	mov	r3, r2
    82be:	009b      	lsls	r3, r3, #2
    82c0:	4413      	add	r3, r2
    82c2:	009b      	lsls	r3, r3, #2
    82c4:	440b      	add	r3, r1
    82c6:	781b      	ldrb	r3, [r3, #0]
    82c8:	7bba      	ldrb	r2, [r7, #14]
    82ca:	429a      	cmp	r2, r3
    82cc:	d102      	bne.n	82d4 <get_tc_index+0x34>
			return i;
    82ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    82d2:	e00d      	b.n	82f0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    82d4:	7bfb      	ldrb	r3, [r7, #15]
    82d6:	3301      	adds	r3, #1
    82d8:	73fb      	strb	r3, [r7, #15]
    82da:	7bfb      	ldrb	r3, [r7, #15]
    82dc:	2b05      	cmp	r3, #5
    82de:	d9eb      	bls.n	82b8 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    82e0:	f240 221d 	movw	r2, #541	; 0x21d
    82e4:	4906      	ldr	r1, [pc, #24]	; (8300 <get_tc_index+0x60>)
    82e6:	2000      	movs	r0, #0
    82e8:	4b06      	ldr	r3, [pc, #24]	; (8304 <get_tc_index+0x64>)
    82ea:	4798      	blx	r3
	return -1;
    82ec:	f04f 33ff 	mov.w	r3, #4294967295
}
    82f0:	4618      	mov	r0, r3
    82f2:	3710      	adds	r7, #16
    82f4:	46bd      	mov	sp, r7
    82f6:	bd80      	pop	{r7, pc}
    82f8:	000083a5 	.word	0x000083a5
    82fc:	200000e0 	.word	0x200000e0
    8300:	0000ee90 	.word	0x0000ee90
    8304:	00003725 	.word	0x00003725

00008308 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8308:	b480      	push	{r7}
    830a:	b083      	sub	sp, #12
    830c:	af00      	add	r7, sp, #0
    830e:	6078      	str	r0, [r7, #4]
    8310:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8312:	687b      	ldr	r3, [r7, #4]
    8314:	4a17      	ldr	r2, [pc, #92]	; (8374 <_tc_init_irq_param+0x6c>)
    8316:	4293      	cmp	r3, r2
    8318:	d102      	bne.n	8320 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    831a:	4a17      	ldr	r2, [pc, #92]	; (8378 <_tc_init_irq_param+0x70>)
    831c:	683b      	ldr	r3, [r7, #0]
    831e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	4a16      	ldr	r2, [pc, #88]	; (837c <_tc_init_irq_param+0x74>)
    8324:	4293      	cmp	r3, r2
    8326:	d102      	bne.n	832e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8328:	4a15      	ldr	r2, [pc, #84]	; (8380 <_tc_init_irq_param+0x78>)
    832a:	683b      	ldr	r3, [r7, #0]
    832c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	4a14      	ldr	r2, [pc, #80]	; (8384 <_tc_init_irq_param+0x7c>)
    8332:	4293      	cmp	r3, r2
    8334:	d102      	bne.n	833c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8336:	4a14      	ldr	r2, [pc, #80]	; (8388 <_tc_init_irq_param+0x80>)
    8338:	683b      	ldr	r3, [r7, #0]
    833a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	4a13      	ldr	r2, [pc, #76]	; (838c <_tc_init_irq_param+0x84>)
    8340:	4293      	cmp	r3, r2
    8342:	d102      	bne.n	834a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8344:	4a12      	ldr	r2, [pc, #72]	; (8390 <_tc_init_irq_param+0x88>)
    8346:	683b      	ldr	r3, [r7, #0]
    8348:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	4a11      	ldr	r2, [pc, #68]	; (8394 <_tc_init_irq_param+0x8c>)
    834e:	4293      	cmp	r3, r2
    8350:	d102      	bne.n	8358 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8352:	4a11      	ldr	r2, [pc, #68]	; (8398 <_tc_init_irq_param+0x90>)
    8354:	683b      	ldr	r3, [r7, #0]
    8356:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	4a10      	ldr	r2, [pc, #64]	; (839c <_tc_init_irq_param+0x94>)
    835c:	4293      	cmp	r3, r2
    835e:	d102      	bne.n	8366 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8360:	4a0f      	ldr	r2, [pc, #60]	; (83a0 <_tc_init_irq_param+0x98>)
    8362:	683b      	ldr	r3, [r7, #0]
    8364:	6013      	str	r3, [r2, #0]
	}
}
    8366:	bf00      	nop
    8368:	370c      	adds	r7, #12
    836a:	46bd      	mov	sp, r7
    836c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8370:	4770      	bx	lr
    8372:	bf00      	nop
    8374:	40003800 	.word	0x40003800
    8378:	20000814 	.word	0x20000814
    837c:	4101a000 	.word	0x4101a000
    8380:	20000818 	.word	0x20000818
    8384:	42001400 	.word	0x42001400
    8388:	2000081c 	.word	0x2000081c
    838c:	42001800 	.word	0x42001800
    8390:	20000820 	.word	0x20000820
    8394:	43001400 	.word	0x43001400
    8398:	20000824 	.word	0x20000824
    839c:	43001800 	.word	0x43001800
    83a0:	20000828 	.word	0x20000828

000083a4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    83a4:	b4b0      	push	{r4, r5, r7}
    83a6:	b08d      	sub	sp, #52	; 0x34
    83a8:	af00      	add	r7, sp, #0
    83aa:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    83ac:	4b13      	ldr	r3, [pc, #76]	; (83fc <_get_hardware_offset+0x58>)
    83ae:	f107 040c 	add.w	r4, r7, #12
    83b2:	461d      	mov	r5, r3
    83b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    83b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    83b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    83bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    83c0:	2300      	movs	r3, #0
    83c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    83c4:	e010      	b.n	83e8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    83c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83c8:	009b      	lsls	r3, r3, #2
    83ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
    83ce:	4413      	add	r3, r2
    83d0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    83d4:	461a      	mov	r2, r3
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	429a      	cmp	r2, r3
    83da:	d102      	bne.n	83e2 <_get_hardware_offset+0x3e>
			return i;
    83dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83de:	b2db      	uxtb	r3, r3
    83e0:	e006      	b.n	83f0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    83e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83e4:	3301      	adds	r3, #1
    83e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    83e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83ea:	2b07      	cmp	r3, #7
    83ec:	d9eb      	bls.n	83c6 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    83ee:	2300      	movs	r3, #0
}
    83f0:	4618      	mov	r0, r3
    83f2:	3734      	adds	r7, #52	; 0x34
    83f4:	46bd      	mov	sp, r7
    83f6:	bcb0      	pop	{r4, r5, r7}
    83f8:	4770      	bx	lr
    83fa:	bf00      	nop
    83fc:	0000eea4 	.word	0x0000eea4

00008400 <__NVIC_EnableIRQ>:
{
    8400:	b480      	push	{r7}
    8402:	b083      	sub	sp, #12
    8404:	af00      	add	r7, sp, #0
    8406:	4603      	mov	r3, r0
    8408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    840a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    840e:	2b00      	cmp	r3, #0
    8410:	db0b      	blt.n	842a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8412:	4909      	ldr	r1, [pc, #36]	; (8438 <__NVIC_EnableIRQ+0x38>)
    8414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8418:	095b      	lsrs	r3, r3, #5
    841a:	88fa      	ldrh	r2, [r7, #6]
    841c:	f002 021f 	and.w	r2, r2, #31
    8420:	2001      	movs	r0, #1
    8422:	fa00 f202 	lsl.w	r2, r0, r2
    8426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    842a:	bf00      	nop
    842c:	370c      	adds	r7, #12
    842e:	46bd      	mov	sp, r7
    8430:	f85d 7b04 	ldr.w	r7, [sp], #4
    8434:	4770      	bx	lr
    8436:	bf00      	nop
    8438:	e000e100 	.word	0xe000e100

0000843c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    843c:	b480      	push	{r7}
    843e:	b087      	sub	sp, #28
    8440:	af00      	add	r7, sp, #0
    8442:	60f8      	str	r0, [r7, #12]
    8444:	460b      	mov	r3, r1
    8446:	607a      	str	r2, [r7, #4]
    8448:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    844a:	7afa      	ldrb	r2, [r7, #11]
    844c:	68f9      	ldr	r1, [r7, #12]
    844e:	4613      	mov	r3, r2
    8450:	009b      	lsls	r3, r3, #2
    8452:	4413      	add	r3, r2
    8454:	009b      	lsls	r3, r3, #2
    8456:	440b      	add	r3, r1
    8458:	3340      	adds	r3, #64	; 0x40
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    845e:	697a      	ldr	r2, [r7, #20]
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	4013      	ands	r3, r2
    8464:	617b      	str	r3, [r7, #20]
	return tmp;
    8466:	697b      	ldr	r3, [r7, #20]
}
    8468:	4618      	mov	r0, r3
    846a:	371c      	adds	r7, #28
    846c:	46bd      	mov	sp, r7
    846e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8472:	4770      	bx	lr

00008474 <hri_oscctrl_get_STATUS_reg>:
{
    8474:	b480      	push	{r7}
    8476:	b085      	sub	sp, #20
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
    847c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    847e:	687b      	ldr	r3, [r7, #4]
    8480:	691b      	ldr	r3, [r3, #16]
    8482:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8484:	68fa      	ldr	r2, [r7, #12]
    8486:	683b      	ldr	r3, [r7, #0]
    8488:	4013      	ands	r3, r2
    848a:	60fb      	str	r3, [r7, #12]
	return tmp;
    848c:	68fb      	ldr	r3, [r7, #12]
}
    848e:	4618      	mov	r0, r3
    8490:	3714      	adds	r7, #20
    8492:	46bd      	mov	sp, r7
    8494:	f85d 7b04 	ldr.w	r7, [sp], #4
    8498:	4770      	bx	lr

0000849a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    849a:	b480      	push	{r7}
    849c:	b085      	sub	sp, #20
    849e:	af00      	add	r7, sp, #0
    84a0:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    84a2:	687b      	ldr	r3, [r7, #4]
    84a4:	f893 3020 	ldrb.w	r3, [r3, #32]
    84a8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    84aa:	7bfb      	ldrb	r3, [r7, #15]
    84ac:	f003 0301 	and.w	r3, r3, #1
    84b0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    84b2:	7bfb      	ldrb	r3, [r7, #15]
    84b4:	2b00      	cmp	r3, #0
    84b6:	bf14      	ite	ne
    84b8:	2301      	movne	r3, #1
    84ba:	2300      	moveq	r3, #0
    84bc:	b2db      	uxtb	r3, r3
}
    84be:	4618      	mov	r0, r3
    84c0:	3714      	adds	r7, #20
    84c2:	46bd      	mov	sp, r7
    84c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c8:	4770      	bx	lr

000084ca <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    84ca:	b480      	push	{r7}
    84cc:	b083      	sub	sp, #12
    84ce:	af00      	add	r7, sp, #0
    84d0:	6078      	str	r0, [r7, #4]
    84d2:	460b      	mov	r3, r1
    84d4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    84d6:	bf00      	nop
    84d8:	687b      	ldr	r3, [r7, #4]
    84da:	789b      	ldrb	r3, [r3, #2]
    84dc:	b2da      	uxtb	r2, r3
    84de:	78fb      	ldrb	r3, [r7, #3]
    84e0:	4013      	ands	r3, r2
    84e2:	b2db      	uxtb	r3, r3
    84e4:	2b00      	cmp	r3, #0
    84e6:	d1f7      	bne.n	84d8 <hri_usb_wait_for_sync+0xe>
	};
}
    84e8:	bf00      	nop
    84ea:	370c      	adds	r7, #12
    84ec:	46bd      	mov	sp, r7
    84ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f2:	4770      	bx	lr

000084f4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    84f4:	b480      	push	{r7}
    84f6:	b083      	sub	sp, #12
    84f8:	af00      	add	r7, sp, #0
    84fa:	6078      	str	r0, [r7, #4]
    84fc:	460b      	mov	r3, r1
    84fe:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	789b      	ldrb	r3, [r3, #2]
    8504:	b2da      	uxtb	r2, r3
    8506:	78fb      	ldrb	r3, [r7, #3]
    8508:	4013      	ands	r3, r2
    850a:	b2db      	uxtb	r3, r3
    850c:	2b00      	cmp	r3, #0
    850e:	bf14      	ite	ne
    8510:	2301      	movne	r3, #1
    8512:	2300      	moveq	r3, #0
    8514:	b2db      	uxtb	r3, r3
}
    8516:	4618      	mov	r0, r3
    8518:	370c      	adds	r7, #12
    851a:	46bd      	mov	sp, r7
    851c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8520:	4770      	bx	lr

00008522 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8522:	b480      	push	{r7}
    8524:	b085      	sub	sp, #20
    8526:	af00      	add	r7, sp, #0
    8528:	6078      	str	r0, [r7, #4]
    852a:	460b      	mov	r3, r1
    852c:	70fb      	strb	r3, [r7, #3]
    852e:	4613      	mov	r3, r2
    8530:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8532:	78fb      	ldrb	r3, [r7, #3]
    8534:	687a      	ldr	r2, [r7, #4]
    8536:	3308      	adds	r3, #8
    8538:	015b      	lsls	r3, r3, #5
    853a:	4413      	add	r3, r2
    853c:	3307      	adds	r3, #7
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8542:	7bfa      	ldrb	r2, [r7, #15]
    8544:	78bb      	ldrb	r3, [r7, #2]
    8546:	4013      	ands	r3, r2
    8548:	73fb      	strb	r3, [r7, #15]
	return tmp;
    854a:	7bfb      	ldrb	r3, [r7, #15]
}
    854c:	4618      	mov	r0, r3
    854e:	3714      	adds	r7, #20
    8550:	46bd      	mov	sp, r7
    8552:	f85d 7b04 	ldr.w	r7, [sp], #4
    8556:	4770      	bx	lr

00008558 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8558:	b480      	push	{r7}
    855a:	b083      	sub	sp, #12
    855c:	af00      	add	r7, sp, #0
    855e:	6078      	str	r0, [r7, #4]
    8560:	460b      	mov	r3, r1
    8562:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8564:	78fb      	ldrb	r3, [r7, #3]
    8566:	687a      	ldr	r2, [r7, #4]
    8568:	3308      	adds	r3, #8
    856a:	015b      	lsls	r3, r3, #5
    856c:	4413      	add	r3, r2
    856e:	3307      	adds	r3, #7
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	b2db      	uxtb	r3, r3
}
    8574:	4618      	mov	r0, r3
    8576:	370c      	adds	r7, #12
    8578:	46bd      	mov	sp, r7
    857a:	f85d 7b04 	ldr.w	r7, [sp], #4
    857e:	4770      	bx	lr

00008580 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8580:	b480      	push	{r7}
    8582:	b083      	sub	sp, #12
    8584:	af00      	add	r7, sp, #0
    8586:	6078      	str	r0, [r7, #4]
    8588:	460b      	mov	r3, r1
    858a:	70fb      	strb	r3, [r7, #3]
    858c:	4613      	mov	r3, r2
    858e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8590:	78fb      	ldrb	r3, [r7, #3]
    8592:	687a      	ldr	r2, [r7, #4]
    8594:	3308      	adds	r3, #8
    8596:	015b      	lsls	r3, r3, #5
    8598:	4413      	add	r3, r2
    859a:	3307      	adds	r3, #7
    859c:	78ba      	ldrb	r2, [r7, #2]
    859e:	701a      	strb	r2, [r3, #0]
}
    85a0:	bf00      	nop
    85a2:	370c      	adds	r7, #12
    85a4:	46bd      	mov	sp, r7
    85a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85aa:	4770      	bx	lr

000085ac <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    85ac:	b480      	push	{r7}
    85ae:	b083      	sub	sp, #12
    85b0:	af00      	add	r7, sp, #0
    85b2:	6078      	str	r0, [r7, #4]
    85b4:	460b      	mov	r3, r1
    85b6:	70fb      	strb	r3, [r7, #3]
    85b8:	4613      	mov	r3, r2
    85ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    85bc:	78fb      	ldrb	r3, [r7, #3]
    85be:	687a      	ldr	r2, [r7, #4]
    85c0:	3308      	adds	r3, #8
    85c2:	015b      	lsls	r3, r3, #5
    85c4:	4413      	add	r3, r2
    85c6:	3305      	adds	r3, #5
    85c8:	78ba      	ldrb	r2, [r7, #2]
    85ca:	701a      	strb	r2, [r3, #0]
}
    85cc:	bf00      	nop
    85ce:	370c      	adds	r7, #12
    85d0:	46bd      	mov	sp, r7
    85d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85d6:	4770      	bx	lr

000085d8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    85d8:	b480      	push	{r7}
    85da:	b083      	sub	sp, #12
    85dc:	af00      	add	r7, sp, #0
    85de:	6078      	str	r0, [r7, #4]
    85e0:	460b      	mov	r3, r1
    85e2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    85e4:	78fb      	ldrb	r3, [r7, #3]
    85e6:	687a      	ldr	r2, [r7, #4]
    85e8:	3308      	adds	r3, #8
    85ea:	015b      	lsls	r3, r3, #5
    85ec:	4413      	add	r3, r2
    85ee:	3306      	adds	r3, #6
    85f0:	781b      	ldrb	r3, [r3, #0]
    85f2:	b2db      	uxtb	r3, r3
}
    85f4:	4618      	mov	r0, r3
    85f6:	370c      	adds	r7, #12
    85f8:	46bd      	mov	sp, r7
    85fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    85fe:	4770      	bx	lr

00008600 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8600:	b480      	push	{r7}
    8602:	b083      	sub	sp, #12
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
    8608:	460b      	mov	r3, r1
    860a:	70fb      	strb	r3, [r7, #3]
    860c:	4613      	mov	r3, r2
    860e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8610:	78fb      	ldrb	r3, [r7, #3]
    8612:	687a      	ldr	r2, [r7, #4]
    8614:	3308      	adds	r3, #8
    8616:	015b      	lsls	r3, r3, #5
    8618:	4413      	add	r3, r2
    861a:	3304      	adds	r3, #4
    861c:	78ba      	ldrb	r2, [r7, #2]
    861e:	701a      	strb	r2, [r3, #0]
}
    8620:	bf00      	nop
    8622:	370c      	adds	r7, #12
    8624:	46bd      	mov	sp, r7
    8626:	f85d 7b04 	ldr.w	r7, [sp], #4
    862a:	4770      	bx	lr

0000862c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    862c:	b480      	push	{r7}
    862e:	b083      	sub	sp, #12
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	460b      	mov	r3, r1
    8636:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8638:	78fb      	ldrb	r3, [r7, #3]
    863a:	687a      	ldr	r2, [r7, #4]
    863c:	015b      	lsls	r3, r3, #5
    863e:	4413      	add	r3, r2
    8640:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8644:	2210      	movs	r2, #16
    8646:	701a      	strb	r2, [r3, #0]
}
    8648:	bf00      	nop
    864a:	370c      	adds	r7, #12
    864c:	46bd      	mov	sp, r7
    864e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8652:	4770      	bx	lr

00008654 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8654:	b480      	push	{r7}
    8656:	b083      	sub	sp, #12
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
    865c:	460b      	mov	r3, r1
    865e:	70fb      	strb	r3, [r7, #3]
    8660:	4613      	mov	r3, r2
    8662:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8664:	78fb      	ldrb	r3, [r7, #3]
    8666:	687a      	ldr	r2, [r7, #4]
    8668:	015b      	lsls	r3, r3, #5
    866a:	4413      	add	r3, r2
    866c:	f203 1309 	addw	r3, r3, #265	; 0x109
    8670:	78ba      	ldrb	r2, [r7, #2]
    8672:	701a      	strb	r2, [r3, #0]
}
    8674:	bf00      	nop
    8676:	370c      	adds	r7, #12
    8678:	46bd      	mov	sp, r7
    867a:	f85d 7b04 	ldr.w	r7, [sp], #4
    867e:	4770      	bx	lr

00008680 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8680:	b480      	push	{r7}
    8682:	b083      	sub	sp, #12
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
    8688:	460b      	mov	r3, r1
    868a:	70fb      	strb	r3, [r7, #3]
    868c:	4613      	mov	r3, r2
    868e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8690:	78fb      	ldrb	r3, [r7, #3]
    8692:	687a      	ldr	r2, [r7, #4]
    8694:	015b      	lsls	r3, r3, #5
    8696:	4413      	add	r3, r2
    8698:	f503 7384 	add.w	r3, r3, #264	; 0x108
    869c:	78ba      	ldrb	r2, [r7, #2]
    869e:	701a      	strb	r2, [r3, #0]
}
    86a0:	bf00      	nop
    86a2:	370c      	adds	r7, #12
    86a4:	46bd      	mov	sp, r7
    86a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86aa:	4770      	bx	lr

000086ac <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    86ac:	b480      	push	{r7}
    86ae:	b085      	sub	sp, #20
    86b0:	af00      	add	r7, sp, #0
    86b2:	6078      	str	r0, [r7, #4]
    86b4:	460b      	mov	r3, r1
    86b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86b8:	78fb      	ldrb	r3, [r7, #3]
    86ba:	687a      	ldr	r2, [r7, #4]
    86bc:	3308      	adds	r3, #8
    86be:	015b      	lsls	r3, r3, #5
    86c0:	4413      	add	r3, r2
    86c2:	781b      	ldrb	r3, [r3, #0]
    86c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    86c6:	7bfb      	ldrb	r3, [r7, #15]
    86c8:	f003 0307 	and.w	r3, r3, #7
    86cc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    86ce:	7bfb      	ldrb	r3, [r7, #15]
}
    86d0:	4618      	mov	r0, r3
    86d2:	3714      	adds	r7, #20
    86d4:	46bd      	mov	sp, r7
    86d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86da:	4770      	bx	lr

000086dc <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    86dc:	b480      	push	{r7}
    86de:	b085      	sub	sp, #20
    86e0:	af00      	add	r7, sp, #0
    86e2:	6078      	str	r0, [r7, #4]
    86e4:	460b      	mov	r3, r1
    86e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    86e8:	78fb      	ldrb	r3, [r7, #3]
    86ea:	687a      	ldr	r2, [r7, #4]
    86ec:	3308      	adds	r3, #8
    86ee:	015b      	lsls	r3, r3, #5
    86f0:	4413      	add	r3, r2
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    86f6:	7bfb      	ldrb	r3, [r7, #15]
    86f8:	091b      	lsrs	r3, r3, #4
    86fa:	b2db      	uxtb	r3, r3
    86fc:	f003 0307 	and.w	r3, r3, #7
    8700:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8702:	7bfb      	ldrb	r3, [r7, #15]
}
    8704:	4618      	mov	r0, r3
    8706:	3714      	adds	r7, #20
    8708:	46bd      	mov	sp, r7
    870a:	f85d 7b04 	ldr.w	r7, [sp], #4
    870e:	4770      	bx	lr

00008710 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8710:	b480      	push	{r7}
    8712:	b083      	sub	sp, #12
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
    8718:	460b      	mov	r3, r1
    871a:	70fb      	strb	r3, [r7, #3]
    871c:	4613      	mov	r3, r2
    871e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8720:	78fb      	ldrb	r3, [r7, #3]
    8722:	687a      	ldr	r2, [r7, #4]
    8724:	3308      	adds	r3, #8
    8726:	015b      	lsls	r3, r3, #5
    8728:	4413      	add	r3, r2
    872a:	78ba      	ldrb	r2, [r7, #2]
    872c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    872e:	bf00      	nop
    8730:	370c      	adds	r7, #12
    8732:	46bd      	mov	sp, r7
    8734:	f85d 7b04 	ldr.w	r7, [sp], #4
    8738:	4770      	bx	lr

0000873a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    873a:	b480      	push	{r7}
    873c:	b083      	sub	sp, #12
    873e:	af00      	add	r7, sp, #0
    8740:	6078      	str	r0, [r7, #4]
    8742:	460b      	mov	r3, r1
    8744:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8746:	78fb      	ldrb	r3, [r7, #3]
    8748:	687a      	ldr	r2, [r7, #4]
    874a:	3308      	adds	r3, #8
    874c:	015b      	lsls	r3, r3, #5
    874e:	4413      	add	r3, r2
    8750:	781b      	ldrb	r3, [r3, #0]
    8752:	b2db      	uxtb	r3, r3
}
    8754:	4618      	mov	r0, r3
    8756:	370c      	adds	r7, #12
    8758:	46bd      	mov	sp, r7
    875a:	f85d 7b04 	ldr.w	r7, [sp], #4
    875e:	4770      	bx	lr

00008760 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8760:	b480      	push	{r7}
    8762:	b083      	sub	sp, #12
    8764:	af00      	add	r7, sp, #0
    8766:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8768:	687b      	ldr	r3, [r7, #4]
    876a:	8b9b      	ldrh	r3, [r3, #28]
    876c:	b29b      	uxth	r3, r3
}
    876e:	4618      	mov	r0, r3
    8770:	370c      	adds	r7, #12
    8772:	46bd      	mov	sp, r7
    8774:	f85d 7b04 	ldr.w	r7, [sp], #4
    8778:	4770      	bx	lr

0000877a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    877a:	b480      	push	{r7}
    877c:	b083      	sub	sp, #12
    877e:	af00      	add	r7, sp, #0
    8780:	6078      	str	r0, [r7, #4]
    8782:	460b      	mov	r3, r1
    8784:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8786:	687b      	ldr	r3, [r7, #4]
    8788:	887a      	ldrh	r2, [r7, #2]
    878a:	839a      	strh	r2, [r3, #28]
}
    878c:	bf00      	nop
    878e:	370c      	adds	r7, #12
    8790:	46bd      	mov	sp, r7
    8792:	f85d 7b04 	ldr.w	r7, [sp], #4
    8796:	4770      	bx	lr

00008798 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8798:	b480      	push	{r7}
    879a:	b083      	sub	sp, #12
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
    87a0:	460b      	mov	r3, r1
    87a2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    87a4:	687b      	ldr	r3, [r7, #4]
    87a6:	887a      	ldrh	r2, [r7, #2]
    87a8:	831a      	strh	r2, [r3, #24]
}
    87aa:	bf00      	nop
    87ac:	370c      	adds	r7, #12
    87ae:	46bd      	mov	sp, r7
    87b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    87b4:	4770      	bx	lr

000087b6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    87b6:	b480      	push	{r7}
    87b8:	b083      	sub	sp, #12
    87ba:	af00      	add	r7, sp, #0
    87bc:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	8b1b      	ldrh	r3, [r3, #24]
    87c2:	b29b      	uxth	r3, r3
}
    87c4:	4618      	mov	r0, r3
    87c6:	370c      	adds	r7, #12
    87c8:	46bd      	mov	sp, r7
    87ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    87ce:	4770      	bx	lr

000087d0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    87d0:	b480      	push	{r7}
    87d2:	b083      	sub	sp, #12
    87d4:	af00      	add	r7, sp, #0
    87d6:	6078      	str	r0, [r7, #4]
    87d8:	460b      	mov	r3, r1
    87da:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	887a      	ldrh	r2, [r7, #2]
    87e0:	829a      	strh	r2, [r3, #20]
}
    87e2:	bf00      	nop
    87e4:	370c      	adds	r7, #12
    87e6:	46bd      	mov	sp, r7
    87e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87ec:	4770      	bx	lr

000087ee <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    87ee:	b480      	push	{r7}
    87f0:	b085      	sub	sp, #20
    87f2:	af00      	add	r7, sp, #0
    87f4:	6078      	str	r0, [r7, #4]
    87f6:	460b      	mov	r3, r1
    87f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	789b      	ldrb	r3, [r3, #2]
    87fe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8800:	7bfa      	ldrb	r2, [r7, #15]
    8802:	78fb      	ldrb	r3, [r7, #3]
    8804:	4013      	ands	r3, r2
    8806:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8808:	7bfb      	ldrb	r3, [r7, #15]
}
    880a:	4618      	mov	r0, r3
    880c:	3714      	adds	r7, #20
    880e:	46bd      	mov	sp, r7
    8810:	f85d 7b04 	ldr.w	r7, [sp], #4
    8814:	4770      	bx	lr
	...

00008818 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8818:	b580      	push	{r7, lr}
    881a:	b082      	sub	sp, #8
    881c:	af00      	add	r7, sp, #0
    881e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	b2db      	uxtb	r3, r3
    8826:	f023 0302 	bic.w	r3, r3, #2
    882a:	b2da      	uxtb	r2, r3
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8830:	2103      	movs	r1, #3
    8832:	6878      	ldr	r0, [r7, #4]
    8834:	4b02      	ldr	r3, [pc, #8]	; (8840 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8836:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8838:	bf00      	nop
    883a:	3708      	adds	r7, #8
    883c:	46bd      	mov	sp, r7
    883e:	bd80      	pop	{r7, pc}
    8840:	000084cb 	.word	0x000084cb

00008844 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	460b      	mov	r3, r1
    884e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8850:	2103      	movs	r1, #3
    8852:	6878      	ldr	r0, [r7, #4]
    8854:	4b06      	ldr	r3, [pc, #24]	; (8870 <hri_usb_get_CTRLA_reg+0x2c>)
    8856:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	781b      	ldrb	r3, [r3, #0]
    885c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    885e:	7bfa      	ldrb	r2, [r7, #15]
    8860:	78fb      	ldrb	r3, [r7, #3]
    8862:	4013      	ands	r3, r2
    8864:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8866:	7bfb      	ldrb	r3, [r7, #15]
}
    8868:	4618      	mov	r0, r3
    886a:	3710      	adds	r7, #16
    886c:	46bd      	mov	sp, r7
    886e:	bd80      	pop	{r7, pc}
    8870:	000084cb 	.word	0x000084cb

00008874 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8874:	b580      	push	{r7, lr}
    8876:	b082      	sub	sp, #8
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
    887c:	460b      	mov	r3, r1
    887e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	78fa      	ldrb	r2, [r7, #3]
    8884:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8886:	2103      	movs	r1, #3
    8888:	6878      	ldr	r0, [r7, #4]
    888a:	4b03      	ldr	r3, [pc, #12]	; (8898 <hri_usb_write_CTRLA_reg+0x24>)
    888c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    888e:	bf00      	nop
    8890:	3708      	adds	r7, #8
    8892:	46bd      	mov	sp, r7
    8894:	bd80      	pop	{r7, pc}
    8896:	bf00      	nop
    8898:	000084cb 	.word	0x000084cb

0000889c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    889c:	b580      	push	{r7, lr}
    889e:	b082      	sub	sp, #8
    88a0:	af00      	add	r7, sp, #0
    88a2:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    88a4:	2103      	movs	r1, #3
    88a6:	6878      	ldr	r0, [r7, #4]
    88a8:	4b04      	ldr	r3, [pc, #16]	; (88bc <hri_usb_read_CTRLA_reg+0x20>)
    88aa:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	b2db      	uxtb	r3, r3
}
    88b2:	4618      	mov	r0, r3
    88b4:	3708      	adds	r7, #8
    88b6:	46bd      	mov	sp, r7
    88b8:	bd80      	pop	{r7, pc}
    88ba:	bf00      	nop
    88bc:	000084cb 	.word	0x000084cb

000088c0 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    88c0:	b480      	push	{r7}
    88c2:	b083      	sub	sp, #12
    88c4:	af00      	add	r7, sp, #0
    88c6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	891b      	ldrh	r3, [r3, #8]
    88cc:	b29b      	uxth	r3, r3
    88ce:	f023 0301 	bic.w	r3, r3, #1
    88d2:	b29a      	uxth	r2, r3
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    88d8:	bf00      	nop
    88da:	370c      	adds	r7, #12
    88dc:	46bd      	mov	sp, r7
    88de:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e2:	4770      	bx	lr

000088e4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    88e4:	b480      	push	{r7}
    88e6:	b083      	sub	sp, #12
    88e8:	af00      	add	r7, sp, #0
    88ea:	6078      	str	r0, [r7, #4]
    88ec:	460b      	mov	r3, r1
    88ee:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	887a      	ldrh	r2, [r7, #2]
    88f4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    88f6:	bf00      	nop
    88f8:	370c      	adds	r7, #12
    88fa:	46bd      	mov	sp, r7
    88fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8900:	4770      	bx	lr

00008902 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8902:	b480      	push	{r7}
    8904:	b083      	sub	sp, #12
    8906:	af00      	add	r7, sp, #0
    8908:	6078      	str	r0, [r7, #4]
    890a:	460b      	mov	r3, r1
    890c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	78fa      	ldrb	r2, [r7, #3]
    8912:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8914:	bf00      	nop
    8916:	370c      	adds	r7, #12
    8918:	46bd      	mov	sp, r7
    891a:	f85d 7b04 	ldr.w	r7, [sp], #4
    891e:	4770      	bx	lr

00008920 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8920:	b480      	push	{r7}
    8922:	b083      	sub	sp, #12
    8924:	af00      	add	r7, sp, #0
    8926:	6078      	str	r0, [r7, #4]
    8928:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	683a      	ldr	r2, [r7, #0]
    892e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8930:	bf00      	nop
    8932:	370c      	adds	r7, #12
    8934:	46bd      	mov	sp, r7
    8936:	f85d 7b04 	ldr.w	r7, [sp], #4
    893a:	4770      	bx	lr

0000893c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    893c:	b480      	push	{r7}
    893e:	b083      	sub	sp, #12
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8946:	2300      	movs	r3, #0
}
    8948:	4618      	mov	r0, r3
    894a:	370c      	adds	r7, #12
    894c:	46bd      	mov	sp, r7
    894e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8952:	4770      	bx	lr

00008954 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8954:	b480      	push	{r7}
    8956:	b085      	sub	sp, #20
    8958:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    895a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    895e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8960:	4b28      	ldr	r3, [pc, #160]	; (8a04 <_usb_load_calib+0xb0>)
    8962:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8964:	f003 031f 	and.w	r3, r3, #31
    8968:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    896a:	4b26      	ldr	r3, [pc, #152]	; (8a04 <_usb_load_calib+0xb0>)
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8970:	f003 031f 	and.w	r3, r3, #31
    8974:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8976:	4b23      	ldr	r3, [pc, #140]	; (8a04 <_usb_load_calib+0xb0>)
    8978:	681b      	ldr	r3, [r3, #0]
    897a:	0a9b      	lsrs	r3, r3, #10
    897c:	f003 0307 	and.w	r3, r3, #7
    8980:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8982:	68fb      	ldr	r3, [r7, #12]
    8984:	2b00      	cmp	r3, #0
    8986:	d002      	beq.n	898e <_usb_load_calib+0x3a>
    8988:	68fb      	ldr	r3, [r7, #12]
    898a:	2b1f      	cmp	r3, #31
    898c:	d101      	bne.n	8992 <_usb_load_calib+0x3e>
		pad_transn = 9;
    898e:	2309      	movs	r3, #9
    8990:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8992:	68bb      	ldr	r3, [r7, #8]
    8994:	2b00      	cmp	r3, #0
    8996:	d002      	beq.n	899e <_usb_load_calib+0x4a>
    8998:	68bb      	ldr	r3, [r7, #8]
    899a:	2b1f      	cmp	r3, #31
    899c:	d101      	bne.n	89a2 <_usb_load_calib+0x4e>
		pad_transp = 25;
    899e:	2319      	movs	r3, #25
    89a0:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d002      	beq.n	89ae <_usb_load_calib+0x5a>
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	2b07      	cmp	r3, #7
    89ac:	d101      	bne.n	89b2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    89ae:	2306      	movs	r3, #6
    89b0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    89b2:	68fb      	ldr	r3, [r7, #12]
    89b4:	b29b      	uxth	r3, r3
    89b6:	019b      	lsls	r3, r3, #6
    89b8:	b29b      	uxth	r3, r3
    89ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    89be:	b29a      	uxth	r2, r3
    89c0:	68bb      	ldr	r3, [r7, #8]
    89c2:	b29b      	uxth	r3, r3
    89c4:	f003 031f 	and.w	r3, r3, #31
    89c8:	b29b      	uxth	r3, r3
    89ca:	4313      	orrs	r3, r2
    89cc:	b29a      	uxth	r2, r3
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	b29b      	uxth	r3, r3
    89d2:	031b      	lsls	r3, r3, #12
    89d4:	b29b      	uxth	r3, r3
    89d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    89da:	b29b      	uxth	r3, r3
    89dc:	4313      	orrs	r3, r2
    89de:	b29a      	uxth	r2, r3
    89e0:	683b      	ldr	r3, [r7, #0]
    89e2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    89e4:	683a      	ldr	r2, [r7, #0]
    89e6:	78d3      	ldrb	r3, [r2, #3]
    89e8:	f043 0303 	orr.w	r3, r3, #3
    89ec:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    89ee:	683a      	ldr	r2, [r7, #0]
    89f0:	78d3      	ldrb	r3, [r2, #3]
    89f2:	f043 030c 	orr.w	r3, r3, #12
    89f6:	70d3      	strb	r3, [r2, #3]
}
    89f8:	bf00      	nop
    89fa:	3714      	adds	r7, #20
    89fc:	46bd      	mov	sp, r7
    89fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a02:	4770      	bx	lr
    8a04:	00800084 	.word	0x00800084

00008a08 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8a08:	b580      	push	{r7, lr}
    8a0a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8a0c:	bf00      	nop
    8a0e:	2203      	movs	r2, #3
    8a10:	2100      	movs	r1, #0
    8a12:	4804      	ldr	r0, [pc, #16]	; (8a24 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8a14:	4b04      	ldr	r3, [pc, #16]	; (8a28 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8a16:	4798      	blx	r3
    8a18:	4603      	mov	r3, r0
    8a1a:	2b03      	cmp	r3, #3
    8a1c:	d1f7      	bne.n	8a0e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8a1e:	bf00      	nop
    8a20:	bd80      	pop	{r7, pc}
    8a22:	bf00      	nop
    8a24:	40001000 	.word	0x40001000
    8a28:	0000843d 	.word	0x0000843d

00008a2c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8a30:	480e      	ldr	r0, [pc, #56]	; (8a6c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a32:	4b0f      	ldr	r3, [pc, #60]	; (8a70 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8a34:	4798      	blx	r3
    8a36:	4603      	mov	r3, r0
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d00a      	beq.n	8a52 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8a3c:	bf00      	nop
    8a3e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8a42:	480a      	ldr	r0, [pc, #40]	; (8a6c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a44:	4b0b      	ldr	r3, [pc, #44]	; (8a74 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a46:	4798      	blx	r3
    8a48:	4603      	mov	r3, r0
    8a4a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8a4e:	d1f6      	bne.n	8a3e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8a50:	e009      	b.n	8a66 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8a52:	bf00      	nop
    8a54:	f44f 7180 	mov.w	r1, #256	; 0x100
    8a58:	4804      	ldr	r0, [pc, #16]	; (8a6c <_usb_d_dev_wait_dfll_rdy+0x40>)
    8a5a:	4b06      	ldr	r3, [pc, #24]	; (8a74 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8a5c:	4798      	blx	r3
    8a5e:	4603      	mov	r3, r0
    8a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8a64:	d1f6      	bne.n	8a54 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8a66:	bf00      	nop
    8a68:	bd80      	pop	{r7, pc}
    8a6a:	bf00      	nop
    8a6c:	40001000 	.word	0x40001000
    8a70:	0000849b 	.word	0x0000849b
    8a74:	00008475 	.word	0x00008475

00008a78 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b082      	sub	sp, #8
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	4603      	mov	r3, r0
    8a80:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8a82:	79fb      	ldrb	r3, [r7, #7]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d102      	bne.n	8a8e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8a88:	4b05      	ldr	r3, [pc, #20]	; (8aa0 <_usb_d_dev_wait_clk_rdy+0x28>)
    8a8a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8a8c:	e004      	b.n	8a98 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8a8e:	79fb      	ldrb	r3, [r7, #7]
    8a90:	2b01      	cmp	r3, #1
    8a92:	d101      	bne.n	8a98 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8a94:	4b03      	ldr	r3, [pc, #12]	; (8aa4 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8a96:	4798      	blx	r3
}
    8a98:	bf00      	nop
    8a9a:	3708      	adds	r7, #8
    8a9c:	46bd      	mov	sp, r7
    8a9e:	bd80      	pop	{r7, pc}
    8aa0:	00008a2d 	.word	0x00008a2d
    8aa4:	00008a09 	.word	0x00008a09

00008aa8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8aa8:	b580      	push	{r7, lr}
    8aaa:	b082      	sub	sp, #8
    8aac:	af00      	add	r7, sp, #0
    8aae:	4603      	mov	r3, r0
    8ab0:	6039      	str	r1, [r7, #0]
    8ab2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8ab4:	683b      	ldr	r3, [r7, #0]
    8ab6:	b2da      	uxtb	r2, r3
    8ab8:	79fb      	ldrb	r3, [r7, #7]
    8aba:	4619      	mov	r1, r3
    8abc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ac0:	4b02      	ldr	r3, [pc, #8]	; (8acc <_usbd_ep_int_ack+0x24>)
    8ac2:	4798      	blx	r3
}
    8ac4:	bf00      	nop
    8ac6:	3708      	adds	r7, #8
    8ac8:	46bd      	mov	sp, r7
    8aca:	bd80      	pop	{r7, pc}
    8acc:	00008581 	.word	0x00008581

00008ad0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	4603      	mov	r3, r0
    8ad8:	6039      	str	r1, [r7, #0]
    8ada:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8adc:	683b      	ldr	r3, [r7, #0]
    8ade:	b2da      	uxtb	r2, r3
    8ae0:	79fb      	ldrb	r3, [r7, #7]
    8ae2:	4619      	mov	r1, r3
    8ae4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ae8:	4b02      	ldr	r3, [pc, #8]	; (8af4 <_usbd_ep_int_en+0x24>)
    8aea:	4798      	blx	r3
}
    8aec:	bf00      	nop
    8aee:	3708      	adds	r7, #8
    8af0:	46bd      	mov	sp, r7
    8af2:	bd80      	pop	{r7, pc}
    8af4:	00008655 	.word	0x00008655

00008af8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8af8:	b580      	push	{r7, lr}
    8afa:	b082      	sub	sp, #8
    8afc:	af00      	add	r7, sp, #0
    8afe:	4603      	mov	r3, r0
    8b00:	6039      	str	r1, [r7, #0]
    8b02:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8b04:	683b      	ldr	r3, [r7, #0]
    8b06:	b2da      	uxtb	r2, r3
    8b08:	79fb      	ldrb	r3, [r7, #7]
    8b0a:	4619      	mov	r1, r3
    8b0c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b10:	4b02      	ldr	r3, [pc, #8]	; (8b1c <_usbd_ep_int_dis+0x24>)
    8b12:	4798      	blx	r3
}
    8b14:	bf00      	nop
    8b16:	3708      	adds	r7, #8
    8b18:	46bd      	mov	sp, r7
    8b1a:	bd80      	pop	{r7, pc}
    8b1c:	00008681 	.word	0x00008681

00008b20 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b082      	sub	sp, #8
    8b24:	af00      	add	r7, sp, #0
    8b26:	4603      	mov	r3, r0
    8b28:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8b2a:	79fb      	ldrb	r3, [r7, #7]
    8b2c:	4619      	mov	r1, r3
    8b2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b32:	4b06      	ldr	r3, [pc, #24]	; (8b4c <_usbd_ep_is_ctrl+0x2c>)
    8b34:	4798      	blx	r3
    8b36:	4603      	mov	r3, r0
    8b38:	2b11      	cmp	r3, #17
    8b3a:	bf0c      	ite	eq
    8b3c:	2301      	moveq	r3, #1
    8b3e:	2300      	movne	r3, #0
    8b40:	b2db      	uxtb	r3, r3
}
    8b42:	4618      	mov	r0, r3
    8b44:	3708      	adds	r7, #8
    8b46:	46bd      	mov	sp, r7
    8b48:	bd80      	pop	{r7, pc}
    8b4a:	bf00      	nop
    8b4c:	0000873b 	.word	0x0000873b

00008b50 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b082      	sub	sp, #8
    8b54:	af00      	add	r7, sp, #0
    8b56:	4603      	mov	r3, r0
    8b58:	71fb      	strb	r3, [r7, #7]
    8b5a:	460b      	mov	r3, r1
    8b5c:	71bb      	strb	r3, [r7, #6]
    8b5e:	4613      	mov	r3, r2
    8b60:	717b      	strb	r3, [r7, #5]
	if (st) {
    8b62:	797b      	ldrb	r3, [r7, #5]
    8b64:	2b00      	cmp	r3, #0
    8b66:	d00b      	beq.n	8b80 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b68:	79bb      	ldrb	r3, [r7, #6]
    8b6a:	2210      	movs	r2, #16
    8b6c:	fa02 f303 	lsl.w	r3, r2, r3
    8b70:	b2da      	uxtb	r2, r3
    8b72:	79fb      	ldrb	r3, [r7, #7]
    8b74:	4619      	mov	r1, r3
    8b76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b7a:	4b09      	ldr	r3, [pc, #36]	; (8ba0 <_usbd_ep_set_stall+0x50>)
    8b7c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8b7e:	e00a      	b.n	8b96 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8b80:	79bb      	ldrb	r3, [r7, #6]
    8b82:	2210      	movs	r2, #16
    8b84:	fa02 f303 	lsl.w	r3, r2, r3
    8b88:	b2da      	uxtb	r2, r3
    8b8a:	79fb      	ldrb	r3, [r7, #7]
    8b8c:	4619      	mov	r1, r3
    8b8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b92:	4b04      	ldr	r3, [pc, #16]	; (8ba4 <_usbd_ep_set_stall+0x54>)
    8b94:	4798      	blx	r3
}
    8b96:	bf00      	nop
    8b98:	3708      	adds	r7, #8
    8b9a:	46bd      	mov	sp, r7
    8b9c:	bd80      	pop	{r7, pc}
    8b9e:	bf00      	nop
    8ba0:	000085ad 	.word	0x000085ad
    8ba4:	00008601 	.word	0x00008601

00008ba8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b084      	sub	sp, #16
    8bac:	af00      	add	r7, sp, #0
    8bae:	4603      	mov	r3, r0
    8bb0:	460a      	mov	r2, r1
    8bb2:	71fb      	strb	r3, [r7, #7]
    8bb4:	4613      	mov	r3, r2
    8bb6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8bb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8bbc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8bbe:	79fb      	ldrb	r3, [r7, #7]
    8bc0:	4619      	mov	r1, r3
    8bc2:	68f8      	ldr	r0, [r7, #12]
    8bc4:	4b08      	ldr	r3, [pc, #32]	; (8be8 <_usbd_ep_is_stalled+0x40>)
    8bc6:	4798      	blx	r3
    8bc8:	4603      	mov	r3, r0
    8bca:	4619      	mov	r1, r3
    8bcc:	79bb      	ldrb	r3, [r7, #6]
    8bce:	2210      	movs	r2, #16
    8bd0:	fa02 f303 	lsl.w	r3, r2, r3
    8bd4:	400b      	ands	r3, r1
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	bf14      	ite	ne
    8bda:	2301      	movne	r3, #1
    8bdc:	2300      	moveq	r3, #0
    8bde:	b2db      	uxtb	r3, r3
}
    8be0:	4618      	mov	r0, r3
    8be2:	3710      	adds	r7, #16
    8be4:	46bd      	mov	sp, r7
    8be6:	bd80      	pop	{r7, pc}
    8be8:	000085d9 	.word	0x000085d9

00008bec <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8bec:	b580      	push	{r7, lr}
    8bee:	b084      	sub	sp, #16
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	4603      	mov	r3, r0
    8bf4:	460a      	mov	r2, r1
    8bf6:	71fb      	strb	r3, [r7, #7]
    8bf8:	4613      	mov	r3, r2
    8bfa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8bfc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c00:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8c02:	79fb      	ldrb	r3, [r7, #7]
    8c04:	4619      	mov	r1, r3
    8c06:	68f8      	ldr	r0, [r7, #12]
    8c08:	4b08      	ldr	r3, [pc, #32]	; (8c2c <_usbd_ep_is_stall_sent+0x40>)
    8c0a:	4798      	blx	r3
    8c0c:	4603      	mov	r3, r0
    8c0e:	4619      	mov	r1, r3
    8c10:	79bb      	ldrb	r3, [r7, #6]
    8c12:	2220      	movs	r2, #32
    8c14:	fa02 f303 	lsl.w	r3, r2, r3
    8c18:	400b      	ands	r3, r1
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	bf14      	ite	ne
    8c1e:	2301      	movne	r3, #1
    8c20:	2300      	moveq	r3, #0
    8c22:	b2db      	uxtb	r3, r3
}
    8c24:	4618      	mov	r0, r3
    8c26:	3710      	adds	r7, #16
    8c28:	46bd      	mov	sp, r7
    8c2a:	bd80      	pop	{r7, pc}
    8c2c:	00008559 	.word	0x00008559

00008c30 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8c30:	b580      	push	{r7, lr}
    8c32:	b082      	sub	sp, #8
    8c34:	af00      	add	r7, sp, #0
    8c36:	4603      	mov	r3, r0
    8c38:	460a      	mov	r2, r1
    8c3a:	71fb      	strb	r3, [r7, #7]
    8c3c:	4613      	mov	r3, r2
    8c3e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8c40:	79bb      	ldrb	r3, [r7, #6]
    8c42:	2220      	movs	r2, #32
    8c44:	409a      	lsls	r2, r3
    8c46:	79fb      	ldrb	r3, [r7, #7]
    8c48:	4611      	mov	r1, r2
    8c4a:	4618      	mov	r0, r3
    8c4c:	4b02      	ldr	r3, [pc, #8]	; (8c58 <_usbd_ep_ack_stall+0x28>)
    8c4e:	4798      	blx	r3
}
    8c50:	bf00      	nop
    8c52:	3708      	adds	r7, #8
    8c54:	46bd      	mov	sp, r7
    8c56:	bd80      	pop	{r7, pc}
    8c58:	00008aa9 	.word	0x00008aa9

00008c5c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8c5c:	b580      	push	{r7, lr}
    8c5e:	b082      	sub	sp, #8
    8c60:	af00      	add	r7, sp, #0
    8c62:	4603      	mov	r3, r0
    8c64:	71fb      	strb	r3, [r7, #7]
    8c66:	460b      	mov	r3, r1
    8c68:	71bb      	strb	r3, [r7, #6]
    8c6a:	4613      	mov	r3, r2
    8c6c:	717b      	strb	r3, [r7, #5]
	if (en) {
    8c6e:	797b      	ldrb	r3, [r7, #5]
    8c70:	2b00      	cmp	r3, #0
    8c72:	d008      	beq.n	8c86 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c74:	79bb      	ldrb	r3, [r7, #6]
    8c76:	2220      	movs	r2, #32
    8c78:	409a      	lsls	r2, r3
    8c7a:	79fb      	ldrb	r3, [r7, #7]
    8c7c:	4611      	mov	r1, r2
    8c7e:	4618      	mov	r0, r3
    8c80:	4b07      	ldr	r3, [pc, #28]	; (8ca0 <_usbd_ep_int_stall_en+0x44>)
    8c82:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8c84:	e007      	b.n	8c96 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8c86:	79bb      	ldrb	r3, [r7, #6]
    8c88:	2220      	movs	r2, #32
    8c8a:	409a      	lsls	r2, r3
    8c8c:	79fb      	ldrb	r3, [r7, #7]
    8c8e:	4611      	mov	r1, r2
    8c90:	4618      	mov	r0, r3
    8c92:	4b04      	ldr	r3, [pc, #16]	; (8ca4 <_usbd_ep_int_stall_en+0x48>)
    8c94:	4798      	blx	r3
}
    8c96:	bf00      	nop
    8c98:	3708      	adds	r7, #8
    8c9a:	46bd      	mov	sp, r7
    8c9c:	bd80      	pop	{r7, pc}
    8c9e:	bf00      	nop
    8ca0:	00008ad1 	.word	0x00008ad1
    8ca4:	00008af9 	.word	0x00008af9

00008ca8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8ca8:	b580      	push	{r7, lr}
    8caa:	b082      	sub	sp, #8
    8cac:	af00      	add	r7, sp, #0
    8cae:	4603      	mov	r3, r0
    8cb0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8cb2:	79fb      	ldrb	r3, [r7, #7]
    8cb4:	4619      	mov	r1, r3
    8cb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cba:	4b03      	ldr	r3, [pc, #12]	; (8cc8 <_usbd_ep_stop_setup+0x20>)
    8cbc:	4798      	blx	r3
}
    8cbe:	bf00      	nop
    8cc0:	3708      	adds	r7, #8
    8cc2:	46bd      	mov	sp, r7
    8cc4:	bd80      	pop	{r7, pc}
    8cc6:	bf00      	nop
    8cc8:	0000862d 	.word	0x0000862d

00008ccc <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b082      	sub	sp, #8
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	4603      	mov	r3, r0
    8cd4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8cd6:	79fb      	ldrb	r3, [r7, #7]
    8cd8:	2210      	movs	r2, #16
    8cda:	4619      	mov	r1, r3
    8cdc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ce0:	4b05      	ldr	r3, [pc, #20]	; (8cf8 <_usbd_ep_is_setup+0x2c>)
    8ce2:	4798      	blx	r3
    8ce4:	4603      	mov	r3, r0
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	bf14      	ite	ne
    8cea:	2301      	movne	r3, #1
    8cec:	2300      	moveq	r3, #0
    8cee:	b2db      	uxtb	r3, r3
}
    8cf0:	4618      	mov	r0, r3
    8cf2:	3708      	adds	r7, #8
    8cf4:	46bd      	mov	sp, r7
    8cf6:	bd80      	pop	{r7, pc}
    8cf8:	00008523 	.word	0x00008523

00008cfc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b082      	sub	sp, #8
    8d00:	af00      	add	r7, sp, #0
    8d02:	4603      	mov	r3, r0
    8d04:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8d06:	79fb      	ldrb	r3, [r7, #7]
    8d08:	2110      	movs	r1, #16
    8d0a:	4618      	mov	r0, r3
    8d0c:	4b02      	ldr	r3, [pc, #8]	; (8d18 <_usbd_ep_ack_setup+0x1c>)
    8d0e:	4798      	blx	r3
}
    8d10:	bf00      	nop
    8d12:	3708      	adds	r7, #8
    8d14:	46bd      	mov	sp, r7
    8d16:	bd80      	pop	{r7, pc}
    8d18:	00008aa9 	.word	0x00008aa9

00008d1c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b082      	sub	sp, #8
    8d20:	af00      	add	r7, sp, #0
    8d22:	4603      	mov	r3, r0
    8d24:	71fb      	strb	r3, [r7, #7]
    8d26:	460b      	mov	r3, r1
    8d28:	71bb      	strb	r3, [r7, #6]
    8d2a:	4613      	mov	r3, r2
    8d2c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    8d2e:	797b      	ldrb	r3, [r7, #5]
    8d30:	2b00      	cmp	r3, #0
    8d32:	d00b      	beq.n	8d4c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8d34:	79bb      	ldrb	r3, [r7, #6]
    8d36:	2201      	movs	r2, #1
    8d38:	fa02 f303 	lsl.w	r3, r2, r3
    8d3c:	b2da      	uxtb	r2, r3
    8d3e:	79fb      	ldrb	r3, [r7, #7]
    8d40:	4619      	mov	r1, r3
    8d42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d46:	4b09      	ldr	r3, [pc, #36]	; (8d6c <_usbd_ep_set_toggle+0x50>)
    8d48:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8d4a:	e00a      	b.n	8d62 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8d4c:	79bb      	ldrb	r3, [r7, #6]
    8d4e:	2201      	movs	r2, #1
    8d50:	fa02 f303 	lsl.w	r3, r2, r3
    8d54:	b2da      	uxtb	r2, r3
    8d56:	79fb      	ldrb	r3, [r7, #7]
    8d58:	4619      	mov	r1, r3
    8d5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d5e:	4b04      	ldr	r3, [pc, #16]	; (8d70 <_usbd_ep_set_toggle+0x54>)
    8d60:	4798      	blx	r3
}
    8d62:	bf00      	nop
    8d64:	3708      	adds	r7, #8
    8d66:	46bd      	mov	sp, r7
    8d68:	bd80      	pop	{r7, pc}
    8d6a:	bf00      	nop
    8d6c:	000085ad 	.word	0x000085ad
    8d70:	00008601 	.word	0x00008601

00008d74 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8d74:	b580      	push	{r7, lr}
    8d76:	b082      	sub	sp, #8
    8d78:	af00      	add	r7, sp, #0
    8d7a:	4603      	mov	r3, r0
    8d7c:	460a      	mov	r2, r1
    8d7e:	71fb      	strb	r3, [r7, #7]
    8d80:	4613      	mov	r3, r2
    8d82:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8d84:	79bb      	ldrb	r3, [r7, #6]
    8d86:	2201      	movs	r2, #1
    8d88:	409a      	lsls	r2, r3
    8d8a:	79fb      	ldrb	r3, [r7, #7]
    8d8c:	4611      	mov	r1, r2
    8d8e:	4618      	mov	r0, r3
    8d90:	4b02      	ldr	r3, [pc, #8]	; (8d9c <_usbd_ep_ack_io_cpt+0x28>)
    8d92:	4798      	blx	r3
}
    8d94:	bf00      	nop
    8d96:	3708      	adds	r7, #8
    8d98:	46bd      	mov	sp, r7
    8d9a:	bd80      	pop	{r7, pc}
    8d9c:	00008aa9 	.word	0x00008aa9

00008da0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8da0:	b480      	push	{r7}
    8da2:	b085      	sub	sp, #20
    8da4:	af00      	add	r7, sp, #0
    8da6:	4603      	mov	r3, r0
    8da8:	603a      	str	r2, [r7, #0]
    8daa:	71fb      	strb	r3, [r7, #7]
    8dac:	460b      	mov	r3, r1
    8dae:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8db0:	79fa      	ldrb	r2, [r7, #7]
    8db2:	79bb      	ldrb	r3, [r7, #6]
    8db4:	0052      	lsls	r2, r2, #1
    8db6:	4413      	add	r3, r2
    8db8:	011b      	lsls	r3, r3, #4
    8dba:	4a06      	ldr	r2, [pc, #24]	; (8dd4 <_usbd_ep_set_buf+0x34>)
    8dbc:	4413      	add	r3, r2
    8dbe:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8dc0:	68fb      	ldr	r3, [r7, #12]
    8dc2:	683a      	ldr	r2, [r7, #0]
    8dc4:	601a      	str	r2, [r3, #0]
}
    8dc6:	bf00      	nop
    8dc8:	3714      	adds	r7, #20
    8dca:	46bd      	mov	sp, r7
    8dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dd0:	4770      	bx	lr
    8dd2:	bf00      	nop
    8dd4:	20000b34 	.word	0x20000b34

00008dd8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8dd8:	b480      	push	{r7}
    8dda:	b085      	sub	sp, #20
    8ddc:	af00      	add	r7, sp, #0
    8dde:	4603      	mov	r3, r0
    8de0:	71fb      	strb	r3, [r7, #7]
    8de2:	460b      	mov	r3, r1
    8de4:	71bb      	strb	r3, [r7, #6]
    8de6:	4613      	mov	r3, r2
    8de8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8dea:	79fa      	ldrb	r2, [r7, #7]
    8dec:	79bb      	ldrb	r3, [r7, #6]
    8dee:	0052      	lsls	r2, r2, #1
    8df0:	4413      	add	r3, r2
    8df2:	011b      	lsls	r3, r3, #4
    8df4:	4a08      	ldr	r2, [pc, #32]	; (8e18 <_usbd_ep_set_in_count+0x40>)
    8df6:	4413      	add	r3, r2
    8df8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    8dfa:	88bb      	ldrh	r3, [r7, #4]
    8dfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e00:	b299      	uxth	r1, r3
    8e02:	68fa      	ldr	r2, [r7, #12]
    8e04:	6853      	ldr	r3, [r2, #4]
    8e06:	f361 339b 	bfi	r3, r1, #14, #14
    8e0a:	6053      	str	r3, [r2, #4]
}
    8e0c:	bf00      	nop
    8e0e:	3714      	adds	r7, #20
    8e10:	46bd      	mov	sp, r7
    8e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e16:	4770      	bx	lr
    8e18:	20000b34 	.word	0x20000b34

00008e1c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8e1c:	b480      	push	{r7}
    8e1e:	b085      	sub	sp, #20
    8e20:	af00      	add	r7, sp, #0
    8e22:	4603      	mov	r3, r0
    8e24:	71fb      	strb	r3, [r7, #7]
    8e26:	460b      	mov	r3, r1
    8e28:	71bb      	strb	r3, [r7, #6]
    8e2a:	4613      	mov	r3, r2
    8e2c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e2e:	79fa      	ldrb	r2, [r7, #7]
    8e30:	79bb      	ldrb	r3, [r7, #6]
    8e32:	0052      	lsls	r2, r2, #1
    8e34:	4413      	add	r3, r2
    8e36:	011b      	lsls	r3, r3, #4
    8e38:	4a08      	ldr	r2, [pc, #32]	; (8e5c <_usbd_ep_set_in_size+0x40>)
    8e3a:	4413      	add	r3, r2
    8e3c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    8e3e:	88bb      	ldrh	r3, [r7, #4]
    8e40:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e44:	b299      	uxth	r1, r3
    8e46:	68fa      	ldr	r2, [r7, #12]
    8e48:	6853      	ldr	r3, [r2, #4]
    8e4a:	f361 030d 	bfi	r3, r1, #0, #14
    8e4e:	6053      	str	r3, [r2, #4]
}
    8e50:	bf00      	nop
    8e52:	3714      	adds	r7, #20
    8e54:	46bd      	mov	sp, r7
    8e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e5a:	4770      	bx	lr
    8e5c:	20000b34 	.word	0x20000b34

00008e60 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8e60:	b480      	push	{r7}
    8e62:	b085      	sub	sp, #20
    8e64:	af00      	add	r7, sp, #0
    8e66:	4603      	mov	r3, r0
    8e68:	71fb      	strb	r3, [r7, #7]
    8e6a:	460b      	mov	r3, r1
    8e6c:	71bb      	strb	r3, [r7, #6]
    8e6e:	4613      	mov	r3, r2
    8e70:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8e72:	79fa      	ldrb	r2, [r7, #7]
    8e74:	79bb      	ldrb	r3, [r7, #6]
    8e76:	0052      	lsls	r2, r2, #1
    8e78:	4413      	add	r3, r2
    8e7a:	011b      	lsls	r3, r3, #4
    8e7c:	4a08      	ldr	r2, [pc, #32]	; (8ea0 <_usbd_ep_set_out_count+0x40>)
    8e7e:	4413      	add	r3, r2
    8e80:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8e82:	88bb      	ldrh	r3, [r7, #4]
    8e84:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e88:	b299      	uxth	r1, r3
    8e8a:	68fa      	ldr	r2, [r7, #12]
    8e8c:	6853      	ldr	r3, [r2, #4]
    8e8e:	f361 030d 	bfi	r3, r1, #0, #14
    8e92:	6053      	str	r3, [r2, #4]
}
    8e94:	bf00      	nop
    8e96:	3714      	adds	r7, #20
    8e98:	46bd      	mov	sp, r7
    8e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9e:	4770      	bx	lr
    8ea0:	20000b34 	.word	0x20000b34

00008ea4 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8ea4:	b480      	push	{r7}
    8ea6:	b085      	sub	sp, #20
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	4603      	mov	r3, r0
    8eac:	71fb      	strb	r3, [r7, #7]
    8eae:	460b      	mov	r3, r1
    8eb0:	71bb      	strb	r3, [r7, #6]
    8eb2:	4613      	mov	r3, r2
    8eb4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8eb6:	79fa      	ldrb	r2, [r7, #7]
    8eb8:	79bb      	ldrb	r3, [r7, #6]
    8eba:	0052      	lsls	r2, r2, #1
    8ebc:	4413      	add	r3, r2
    8ebe:	011b      	lsls	r3, r3, #4
    8ec0:	4a08      	ldr	r2, [pc, #32]	; (8ee4 <_usbd_ep_set_out_size+0x40>)
    8ec2:	4413      	add	r3, r2
    8ec4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8ec6:	88bb      	ldrh	r3, [r7, #4]
    8ec8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8ecc:	b299      	uxth	r1, r3
    8ece:	68fa      	ldr	r2, [r7, #12]
    8ed0:	6853      	ldr	r3, [r2, #4]
    8ed2:	f361 339b 	bfi	r3, r1, #14, #14
    8ed6:	6053      	str	r3, [r2, #4]
}
    8ed8:	bf00      	nop
    8eda:	3714      	adds	r7, #20
    8edc:	46bd      	mov	sp, r7
    8ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ee2:	4770      	bx	lr
    8ee4:	20000b34 	.word	0x20000b34

00008ee8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8ee8:	b580      	push	{r7, lr}
    8eea:	b084      	sub	sp, #16
    8eec:	af00      	add	r7, sp, #0
    8eee:	60ba      	str	r2, [r7, #8]
    8ef0:	607b      	str	r3, [r7, #4]
    8ef2:	4603      	mov	r3, r0
    8ef4:	73fb      	strb	r3, [r7, #15]
    8ef6:	460b      	mov	r3, r1
    8ef8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    8efa:	68bb      	ldr	r3, [r7, #8]
    8efc:	b29a      	uxth	r2, r3
    8efe:	7bb9      	ldrb	r1, [r7, #14]
    8f00:	7bfb      	ldrb	r3, [r7, #15]
    8f02:	4618      	mov	r0, r3
    8f04:	4b06      	ldr	r3, [pc, #24]	; (8f20 <_usbd_ep_set_in_trans+0x38>)
    8f06:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	b29a      	uxth	r2, r3
    8f0c:	7bb9      	ldrb	r1, [r7, #14]
    8f0e:	7bfb      	ldrb	r3, [r7, #15]
    8f10:	4618      	mov	r0, r3
    8f12:	4b04      	ldr	r3, [pc, #16]	; (8f24 <_usbd_ep_set_in_trans+0x3c>)
    8f14:	4798      	blx	r3
}
    8f16:	bf00      	nop
    8f18:	3710      	adds	r7, #16
    8f1a:	46bd      	mov	sp, r7
    8f1c:	bd80      	pop	{r7, pc}
    8f1e:	bf00      	nop
    8f20:	00008e1d 	.word	0x00008e1d
    8f24:	00008dd9 	.word	0x00008dd9

00008f28 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8f28:	b580      	push	{r7, lr}
    8f2a:	b084      	sub	sp, #16
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	60ba      	str	r2, [r7, #8]
    8f30:	607b      	str	r3, [r7, #4]
    8f32:	4603      	mov	r3, r0
    8f34:	73fb      	strb	r3, [r7, #15]
    8f36:	460b      	mov	r3, r1
    8f38:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8f3a:	68bb      	ldr	r3, [r7, #8]
    8f3c:	b29a      	uxth	r2, r3
    8f3e:	7bb9      	ldrb	r1, [r7, #14]
    8f40:	7bfb      	ldrb	r3, [r7, #15]
    8f42:	4618      	mov	r0, r3
    8f44:	4b06      	ldr	r3, [pc, #24]	; (8f60 <_usbd_ep_set_out_trans+0x38>)
    8f46:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	b29a      	uxth	r2, r3
    8f4c:	7bb9      	ldrb	r1, [r7, #14]
    8f4e:	7bfb      	ldrb	r3, [r7, #15]
    8f50:	4618      	mov	r0, r3
    8f52:	4b04      	ldr	r3, [pc, #16]	; (8f64 <_usbd_ep_set_out_trans+0x3c>)
    8f54:	4798      	blx	r3
}
    8f56:	bf00      	nop
    8f58:	3710      	adds	r7, #16
    8f5a:	46bd      	mov	sp, r7
    8f5c:	bd80      	pop	{r7, pc}
    8f5e:	bf00      	nop
    8f60:	00008ea5 	.word	0x00008ea5
    8f64:	00008e61 	.word	0x00008e61

00008f68 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8f68:	b480      	push	{r7}
    8f6a:	b085      	sub	sp, #20
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	4603      	mov	r3, r0
    8f70:	460a      	mov	r2, r1
    8f72:	71fb      	strb	r3, [r7, #7]
    8f74:	4613      	mov	r3, r2
    8f76:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8f78:	79fa      	ldrb	r2, [r7, #7]
    8f7a:	79bb      	ldrb	r3, [r7, #6]
    8f7c:	0052      	lsls	r2, r2, #1
    8f7e:	4413      	add	r3, r2
    8f80:	011b      	lsls	r3, r3, #4
    8f82:	4a06      	ldr	r2, [pc, #24]	; (8f9c <_usbd_ep_clear_bank_status+0x34>)
    8f84:	4413      	add	r3, r2
    8f86:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	2200      	movs	r2, #0
    8f8c:	729a      	strb	r2, [r3, #10]
}
    8f8e:	bf00      	nop
    8f90:	3714      	adds	r7, #20
    8f92:	46bd      	mov	sp, r7
    8f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f98:	4770      	bx	lr
    8f9a:	bf00      	nop
    8f9c:	20000b34 	.word	0x20000b34

00008fa0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8fa0:	b580      	push	{r7, lr}
    8fa2:	b082      	sub	sp, #8
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	4603      	mov	r3, r0
    8fa8:	71fb      	strb	r3, [r7, #7]
    8faa:	460b      	mov	r3, r1
    8fac:	71bb      	strb	r3, [r7, #6]
    8fae:	4613      	mov	r3, r2
    8fb0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8fb2:	797b      	ldrb	r3, [r7, #5]
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d00b      	beq.n	8fd0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fb8:	79bb      	ldrb	r3, [r7, #6]
    8fba:	2240      	movs	r2, #64	; 0x40
    8fbc:	fa02 f303 	lsl.w	r3, r2, r3
    8fc0:	b2da      	uxtb	r2, r3
    8fc2:	79fb      	ldrb	r3, [r7, #7]
    8fc4:	4619      	mov	r1, r3
    8fc6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fca:	4b09      	ldr	r3, [pc, #36]	; (8ff0 <_usbd_ep_set_in_rdy+0x50>)
    8fcc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8fce:	e00a      	b.n	8fe6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8fd0:	79bb      	ldrb	r3, [r7, #6]
    8fd2:	2240      	movs	r2, #64	; 0x40
    8fd4:	fa02 f303 	lsl.w	r3, r2, r3
    8fd8:	b2da      	uxtb	r2, r3
    8fda:	79fb      	ldrb	r3, [r7, #7]
    8fdc:	4619      	mov	r1, r3
    8fde:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fe2:	4b04      	ldr	r3, [pc, #16]	; (8ff4 <_usbd_ep_set_in_rdy+0x54>)
    8fe4:	4798      	blx	r3
}
    8fe6:	bf00      	nop
    8fe8:	3708      	adds	r7, #8
    8fea:	46bd      	mov	sp, r7
    8fec:	bd80      	pop	{r7, pc}
    8fee:	bf00      	nop
    8ff0:	000085ad 	.word	0x000085ad
    8ff4:	00008601 	.word	0x00008601

00008ff8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8ff8:	b580      	push	{r7, lr}
    8ffa:	b082      	sub	sp, #8
    8ffc:	af00      	add	r7, sp, #0
    8ffe:	4603      	mov	r3, r0
    9000:	71fb      	strb	r3, [r7, #7]
    9002:	460b      	mov	r3, r1
    9004:	71bb      	strb	r3, [r7, #6]
    9006:	4613      	mov	r3, r2
    9008:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    900a:	797b      	ldrb	r3, [r7, #5]
    900c:	2b00      	cmp	r3, #0
    900e:	d00b      	beq.n	9028 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9010:	79bb      	ldrb	r3, [r7, #6]
    9012:	2240      	movs	r2, #64	; 0x40
    9014:	fa02 f303 	lsl.w	r3, r2, r3
    9018:	b2da      	uxtb	r2, r3
    901a:	79fb      	ldrb	r3, [r7, #7]
    901c:	4619      	mov	r1, r3
    901e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9022:	4b09      	ldr	r3, [pc, #36]	; (9048 <_usbd_ep_set_out_rdy+0x50>)
    9024:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9026:	e00a      	b.n	903e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9028:	79bb      	ldrb	r3, [r7, #6]
    902a:	2240      	movs	r2, #64	; 0x40
    902c:	fa02 f303 	lsl.w	r3, r2, r3
    9030:	b2da      	uxtb	r2, r3
    9032:	79fb      	ldrb	r3, [r7, #7]
    9034:	4619      	mov	r1, r3
    9036:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    903a:	4b04      	ldr	r3, [pc, #16]	; (904c <_usbd_ep_set_out_rdy+0x54>)
    903c:	4798      	blx	r3
}
    903e:	bf00      	nop
    9040:	3708      	adds	r7, #8
    9042:	46bd      	mov	sp, r7
    9044:	bd80      	pop	{r7, pc}
    9046:	bf00      	nop
    9048:	00008601 	.word	0x00008601
    904c:	000085ad 	.word	0x000085ad

00009050 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9050:	b480      	push	{r7}
    9052:	b083      	sub	sp, #12
    9054:	af00      	add	r7, sp, #0
    9056:	4603      	mov	r3, r0
    9058:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    905a:	88fb      	ldrh	r3, [r7, #6]
    905c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9060:	d820      	bhi.n	90a4 <_usbd_ep_pcksize_size+0x54>
    9062:	88fb      	ldrh	r3, [r7, #6]
    9064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9068:	d81a      	bhi.n	90a0 <_usbd_ep_pcksize_size+0x50>
    906a:	88fb      	ldrh	r3, [r7, #6]
    906c:	2b80      	cmp	r3, #128	; 0x80
    906e:	d815      	bhi.n	909c <_usbd_ep_pcksize_size+0x4c>
    9070:	88fb      	ldrh	r3, [r7, #6]
    9072:	2b40      	cmp	r3, #64	; 0x40
    9074:	d810      	bhi.n	9098 <_usbd_ep_pcksize_size+0x48>
    9076:	88fb      	ldrh	r3, [r7, #6]
    9078:	2b20      	cmp	r3, #32
    907a:	d80b      	bhi.n	9094 <_usbd_ep_pcksize_size+0x44>
    907c:	88fb      	ldrh	r3, [r7, #6]
    907e:	2b10      	cmp	r3, #16
    9080:	d806      	bhi.n	9090 <_usbd_ep_pcksize_size+0x40>
    9082:	88fb      	ldrh	r3, [r7, #6]
    9084:	2b08      	cmp	r3, #8
    9086:	bf8c      	ite	hi
    9088:	2301      	movhi	r3, #1
    908a:	2300      	movls	r3, #0
    908c:	b2db      	uxtb	r3, r3
    908e:	e00a      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    9090:	2302      	movs	r3, #2
    9092:	e008      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    9094:	2303      	movs	r3, #3
    9096:	e006      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    9098:	2304      	movs	r3, #4
    909a:	e004      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    909c:	2305      	movs	r3, #5
    909e:	e002      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    90a0:	2306      	movs	r3, #6
    90a2:	e000      	b.n	90a6 <_usbd_ep_pcksize_size+0x56>
    90a4:	2307      	movs	r3, #7
}
    90a6:	4618      	mov	r0, r3
    90a8:	370c      	adds	r7, #12
    90aa:	46bd      	mov	sp, r7
    90ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b0:	4770      	bx	lr
	...

000090b4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    90b4:	b480      	push	{r7}
    90b6:	b085      	sub	sp, #20
    90b8:	af00      	add	r7, sp, #0
    90ba:	4603      	mov	r3, r0
    90bc:	460a      	mov	r2, r1
    90be:	71fb      	strb	r3, [r7, #7]
    90c0:	4613      	mov	r3, r2
    90c2:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    90c4:	79fb      	ldrb	r3, [r7, #7]
    90c6:	2b00      	cmp	r3, #0
    90c8:	d008      	beq.n	90dc <_usb_d_dev_ept+0x28>
    90ca:	79bb      	ldrb	r3, [r7, #6]
    90cc:	2b00      	cmp	r3, #0
    90ce:	d003      	beq.n	90d8 <_usb_d_dev_ept+0x24>
    90d0:	79fb      	ldrb	r3, [r7, #7]
    90d2:	3304      	adds	r3, #4
    90d4:	b2db      	uxtb	r3, r3
    90d6:	e002      	b.n	90de <_usb_d_dev_ept+0x2a>
    90d8:	79fb      	ldrb	r3, [r7, #7]
    90da:	e000      	b.n	90de <_usb_d_dev_ept+0x2a>
    90dc:	2300      	movs	r3, #0
    90de:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    90e0:	7bfa      	ldrb	r2, [r7, #15]
    90e2:	4613      	mov	r3, r2
    90e4:	009b      	lsls	r3, r3, #2
    90e6:	4413      	add	r3, r2
    90e8:	009b      	lsls	r3, r3, #2
    90ea:	3310      	adds	r3, #16
    90ec:	4a04      	ldr	r2, [pc, #16]	; (9100 <_usb_d_dev_ept+0x4c>)
    90ee:	4413      	add	r3, r2
    90f0:	3304      	adds	r3, #4
}
    90f2:	4618      	mov	r0, r3
    90f4:	3714      	adds	r7, #20
    90f6:	46bd      	mov	sp, r7
    90f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fc:	4770      	bx	lr
    90fe:	bf00      	nop
    9100:	20000a6c 	.word	0x20000a6c

00009104 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9104:	b580      	push	{r7, lr}
    9106:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9108:	2104      	movs	r1, #4
    910a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    910e:	4b03      	ldr	r3, [pc, #12]	; (911c <_usb_d_dev_sof+0x18>)
    9110:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9112:	4b03      	ldr	r3, [pc, #12]	; (9120 <_usb_d_dev_sof+0x1c>)
    9114:	681b      	ldr	r3, [r3, #0]
    9116:	4798      	blx	r3
}
    9118:	bf00      	nop
    911a:	bd80      	pop	{r7, pc}
    911c:	0000877b 	.word	0x0000877b
    9120:	20000a6c 	.word	0x20000a6c

00009124 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9124:	b580      	push	{r7, lr}
    9126:	b084      	sub	sp, #16
    9128:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    912a:	2300      	movs	r3, #0
    912c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    912e:	f240 2101 	movw	r1, #513	; 0x201
    9132:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9136:	4b1a      	ldr	r3, [pc, #104]	; (91a0 <_usb_d_dev_lpmsusp+0x7c>)
    9138:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    913a:	f240 2101 	movw	r1, #513	; 0x201
    913e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9142:	4b18      	ldr	r3, [pc, #96]	; (91a4 <_usb_d_dev_lpmsusp+0x80>)
    9144:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9146:	2170      	movs	r1, #112	; 0x70
    9148:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    914c:	4b16      	ldr	r3, [pc, #88]	; (91a8 <_usb_d_dev_lpmsusp+0x84>)
    914e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9150:	2300      	movs	r3, #0
    9152:	73fb      	strb	r3, [r7, #15]
    9154:	e018      	b.n	9188 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9156:	7bfb      	ldrb	r3, [r7, #15]
    9158:	015b      	lsls	r3, r3, #5
    915a:	4a14      	ldr	r2, [pc, #80]	; (91ac <_usb_d_dev_lpmsusp+0x88>)
    915c:	4413      	add	r3, r2
    915e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	891b      	ldrh	r3, [r3, #8]
    9164:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9168:	b2db      	uxtb	r3, r3
    916a:	2b03      	cmp	r3, #3
    916c:	d109      	bne.n	9182 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	891b      	ldrh	r3, [r3, #8]
    9172:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9176:	b29b      	uxth	r3, r3
    9178:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    917a:	687b      	ldr	r3, [r7, #4]
    917c:	2200      	movs	r2, #0
    917e:	811a      	strh	r2, [r3, #8]
			break;
    9180:	e005      	b.n	918e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9182:	7bfb      	ldrb	r3, [r7, #15]
    9184:	3301      	adds	r3, #1
    9186:	73fb      	strb	r3, [r7, #15]
    9188:	7bfb      	ldrb	r3, [r7, #15]
    918a:	2b03      	cmp	r3, #3
    918c:	d9e3      	bls.n	9156 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    918e:	4b08      	ldr	r3, [pc, #32]	; (91b0 <_usb_d_dev_lpmsusp+0x8c>)
    9190:	685b      	ldr	r3, [r3, #4]
    9192:	68b9      	ldr	r1, [r7, #8]
    9194:	2003      	movs	r0, #3
    9196:	4798      	blx	r3
}
    9198:	bf00      	nop
    919a:	3710      	adds	r7, #16
    919c:	46bd      	mov	sp, r7
    919e:	bd80      	pop	{r7, pc}
    91a0:	0000877b 	.word	0x0000877b
    91a4:	000087d1 	.word	0x000087d1
    91a8:	00008799 	.word	0x00008799
    91ac:	20000b34 	.word	0x20000b34
    91b0:	20000a6c 	.word	0x20000a6c

000091b4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    91b4:	b580      	push	{r7, lr}
    91b6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    91b8:	2180      	movs	r1, #128	; 0x80
    91ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91be:	4b04      	ldr	r3, [pc, #16]	; (91d0 <_usb_d_dev_ramerr+0x1c>)
    91c0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    91c2:	4b04      	ldr	r3, [pc, #16]	; (91d4 <_usb_d_dev_ramerr+0x20>)
    91c4:	685b      	ldr	r3, [r3, #4]
    91c6:	2100      	movs	r1, #0
    91c8:	2005      	movs	r0, #5
    91ca:	4798      	blx	r3
}
    91cc:	bf00      	nop
    91ce:	bd80      	pop	{r7, pc}
    91d0:	0000877b 	.word	0x0000877b
    91d4:	20000a6c 	.word	0x20000a6c

000091d8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    91d8:	b580      	push	{r7, lr}
    91da:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91dc:	2170      	movs	r1, #112	; 0x70
    91de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91e2:	4b0b      	ldr	r3, [pc, #44]	; (9210 <_usb_d_dev_wakeup+0x38>)
    91e4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    91e6:	2170      	movs	r1, #112	; 0x70
    91e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91ec:	4b09      	ldr	r3, [pc, #36]	; (9214 <_usb_d_dev_wakeup+0x3c>)
    91ee:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    91f0:	f240 2101 	movw	r1, #513	; 0x201
    91f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    91f8:	4b07      	ldr	r3, [pc, #28]	; (9218 <_usb_d_dev_wakeup+0x40>)
    91fa:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    91fc:	2000      	movs	r0, #0
    91fe:	4b07      	ldr	r3, [pc, #28]	; (921c <_usb_d_dev_wakeup+0x44>)
    9200:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9202:	4b07      	ldr	r3, [pc, #28]	; (9220 <_usb_d_dev_wakeup+0x48>)
    9204:	685b      	ldr	r3, [r3, #4]
    9206:	2100      	movs	r1, #0
    9208:	2002      	movs	r0, #2
    920a:	4798      	blx	r3
}
    920c:	bf00      	nop
    920e:	bd80      	pop	{r7, pc}
    9210:	0000877b 	.word	0x0000877b
    9214:	000087d1 	.word	0x000087d1
    9218:	00008799 	.word	0x00008799
    921c:	00008a79 	.word	0x00008a79
    9220:	20000a6c 	.word	0x20000a6c

00009224 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9224:	b580      	push	{r7, lr}
    9226:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9228:	2200      	movs	r2, #0
    922a:	2100      	movs	r1, #0
    922c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9230:	4b0d      	ldr	r3, [pc, #52]	; (9268 <_usb_d_dev_reset+0x44>)
    9232:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9234:	2108      	movs	r1, #8
    9236:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    923a:	4b0c      	ldr	r3, [pc, #48]	; (926c <_usb_d_dev_reset+0x48>)
    923c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    923e:	2170      	movs	r1, #112	; 0x70
    9240:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9244:	4b0a      	ldr	r3, [pc, #40]	; (9270 <_usb_d_dev_reset+0x4c>)
    9246:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9248:	f240 2101 	movw	r1, #513	; 0x201
    924c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9250:	4b08      	ldr	r3, [pc, #32]	; (9274 <_usb_d_dev_reset+0x50>)
    9252:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9254:	4b08      	ldr	r3, [pc, #32]	; (9278 <_usb_d_dev_reset+0x54>)
    9256:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9258:	4b08      	ldr	r3, [pc, #32]	; (927c <_usb_d_dev_reset+0x58>)
    925a:	685b      	ldr	r3, [r3, #4]
    925c:	2100      	movs	r1, #0
    925e:	2001      	movs	r0, #1
    9260:	4798      	blx	r3
}
    9262:	bf00      	nop
    9264:	bd80      	pop	{r7, pc}
    9266:	bf00      	nop
    9268:	00008711 	.word	0x00008711
    926c:	0000877b 	.word	0x0000877b
    9270:	000087d1 	.word	0x000087d1
    9274:	00008799 	.word	0x00008799
    9278:	00009de1 	.word	0x00009de1
    927c:	20000a6c 	.word	0x20000a6c

00009280 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9280:	b580      	push	{r7, lr}
    9282:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9284:	f240 2101 	movw	r1, #513	; 0x201
    9288:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    928c:	4b09      	ldr	r3, [pc, #36]	; (92b4 <_usb_d_dev_suspend+0x34>)
    928e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9290:	f240 2101 	movw	r1, #513	; 0x201
    9294:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9298:	4b07      	ldr	r3, [pc, #28]	; (92b8 <_usb_d_dev_suspend+0x38>)
    929a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    929c:	2170      	movs	r1, #112	; 0x70
    929e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92a2:	4b06      	ldr	r3, [pc, #24]	; (92bc <_usb_d_dev_suspend+0x3c>)
    92a4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    92a6:	4b06      	ldr	r3, [pc, #24]	; (92c0 <_usb_d_dev_suspend+0x40>)
    92a8:	685b      	ldr	r3, [r3, #4]
    92aa:	2100      	movs	r1, #0
    92ac:	2004      	movs	r0, #4
    92ae:	4798      	blx	r3
}
    92b0:	bf00      	nop
    92b2:	bd80      	pop	{r7, pc}
    92b4:	0000877b 	.word	0x0000877b
    92b8:	000087d1 	.word	0x000087d1
    92bc:	00008799 	.word	0x00008799
    92c0:	20000a6c 	.word	0x20000a6c

000092c4 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    92c4:	b580      	push	{r7, lr}
    92c6:	b082      	sub	sp, #8
    92c8:	af00      	add	r7, sp, #0
	bool     rc    = true;
    92ca:	2301      	movs	r3, #1
    92cc:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    92ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92d2:	4b22      	ldr	r3, [pc, #136]	; (935c <_usb_d_dev_handle_nep+0x98>)
    92d4:	4798      	blx	r3
    92d6:	4603      	mov	r3, r0
    92d8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    92da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92de:	4b20      	ldr	r3, [pc, #128]	; (9360 <_usb_d_dev_handle_nep+0x9c>)
    92e0:	4798      	blx	r3
    92e2:	4603      	mov	r3, r0
    92e4:	461a      	mov	r2, r3
    92e6:	88bb      	ldrh	r3, [r7, #4]
    92e8:	4013      	ands	r3, r2
    92ea:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    92ec:	88bb      	ldrh	r3, [r7, #4]
    92ee:	f003 0304 	and.w	r3, r3, #4
    92f2:	2b00      	cmp	r3, #0
    92f4:	d003      	beq.n	92fe <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    92f6:	4b1b      	ldr	r3, [pc, #108]	; (9364 <_usb_d_dev_handle_nep+0xa0>)
    92f8:	4798      	blx	r3
		return true;
    92fa:	2301      	movs	r3, #1
    92fc:	e02a      	b.n	9354 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    92fe:	88bb      	ldrh	r3, [r7, #4]
    9300:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9304:	2b00      	cmp	r3, #0
    9306:	d002      	beq.n	930e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9308:	4b17      	ldr	r3, [pc, #92]	; (9368 <_usb_d_dev_handle_nep+0xa4>)
    930a:	4798      	blx	r3
    930c:	e021      	b.n	9352 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    930e:	88bb      	ldrh	r3, [r7, #4]
    9310:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9314:	2b00      	cmp	r3, #0
    9316:	d002      	beq.n	931e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9318:	4b14      	ldr	r3, [pc, #80]	; (936c <_usb_d_dev_handle_nep+0xa8>)
    931a:	4798      	blx	r3
    931c:	e019      	b.n	9352 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    931e:	88bb      	ldrh	r3, [r7, #4]
    9320:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9324:	2b00      	cmp	r3, #0
    9326:	d002      	beq.n	932e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9328:	4b11      	ldr	r3, [pc, #68]	; (9370 <_usb_d_dev_handle_nep+0xac>)
    932a:	4798      	blx	r3
    932c:	e011      	b.n	9352 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    932e:	88bb      	ldrh	r3, [r7, #4]
    9330:	f003 0308 	and.w	r3, r3, #8
    9334:	2b00      	cmp	r3, #0
    9336:	d002      	beq.n	933e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9338:	4b0e      	ldr	r3, [pc, #56]	; (9374 <_usb_d_dev_handle_nep+0xb0>)
    933a:	4798      	blx	r3
    933c:	e009      	b.n	9352 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    933e:	88bb      	ldrh	r3, [r7, #4]
    9340:	f003 0301 	and.w	r3, r3, #1
    9344:	2b00      	cmp	r3, #0
    9346:	d002      	beq.n	934e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9348:	4b0b      	ldr	r3, [pc, #44]	; (9378 <_usb_d_dev_handle_nep+0xb4>)
    934a:	4798      	blx	r3
    934c:	e001      	b.n	9352 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    934e:	2300      	movs	r3, #0
    9350:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9352:	79fb      	ldrb	r3, [r7, #7]
}
    9354:	4618      	mov	r0, r3
    9356:	3708      	adds	r7, #8
    9358:	46bd      	mov	sp, r7
    935a:	bd80      	pop	{r7, pc}
    935c:	00008761 	.word	0x00008761
    9360:	000087b7 	.word	0x000087b7
    9364:	00009105 	.word	0x00009105
    9368:	00009125 	.word	0x00009125
    936c:	000091b5 	.word	0x000091b5
    9370:	000091d9 	.word	0x000091d9
    9374:	00009225 	.word	0x00009225
    9378:	00009281 	.word	0x00009281

0000937c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    937c:	b590      	push	{r4, r7, lr}
    937e:	b089      	sub	sp, #36	; 0x24
    9380:	af00      	add	r7, sp, #0
    9382:	6078      	str	r0, [r7, #4]
    9384:	460b      	mov	r3, r1
    9386:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9388:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    938c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	7c9b      	ldrb	r3, [r3, #18]
    9392:	f003 030f 	and.w	r3, r3, #15
    9396:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9398:	7dfb      	ldrb	r3, [r7, #23]
    939a:	015b      	lsls	r3, r3, #5
    939c:	4a73      	ldr	r2, [pc, #460]	; (956c <_usb_d_dev_in_next+0x1f0>)
    939e:	4413      	add	r3, r2
    93a0:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    93a2:	78fb      	ldrb	r3, [r7, #3]
    93a4:	2b00      	cmp	r3, #0
    93a6:	d006      	beq.n	93b6 <_usb_d_dev_in_next+0x3a>
    93a8:	693b      	ldr	r3, [r7, #16]
    93aa:	3310      	adds	r3, #16
    93ac:	685b      	ldr	r3, [r3, #4]
    93ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93b2:	b29b      	uxth	r3, r3
    93b4:	e000      	b.n	93b8 <_usb_d_dev_in_next+0x3c>
    93b6:	2300      	movs	r3, #0
    93b8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	8a1b      	ldrh	r3, [r3, #16]
    93be:	f240 32ff 	movw	r2, #1023	; 0x3ff
    93c2:	4293      	cmp	r3, r2
    93c4:	d103      	bne.n	93ce <_usb_d_dev_in_next+0x52>
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	8a1b      	ldrh	r3, [r3, #16]
    93ca:	b21b      	sxth	r3, r3
    93cc:	e004      	b.n	93d8 <_usb_d_dev_in_next+0x5c>
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	8a1b      	ldrh	r3, [r3, #16]
    93d2:	3b01      	subs	r3, #1
    93d4:	b29b      	uxth	r3, r3
    93d6:	b21b      	sxth	r3, r3
    93d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    93dc:	4013      	ands	r3, r2
    93de:	b21b      	sxth	r3, r3
    93e0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    93e2:	2300      	movs	r3, #0
    93e4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	7cdb      	ldrb	r3, [r3, #19]
    93ea:	f003 0307 	and.w	r3, r3, #7
    93ee:	b2db      	uxtb	r3, r3
    93f0:	2b01      	cmp	r3, #1
    93f2:	bf0c      	ite	eq
    93f4:	2301      	moveq	r3, #1
    93f6:	2300      	movne	r3, #0
    93f8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    93fa:	78fb      	ldrb	r3, [r7, #3]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d004      	beq.n	940a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9400:	7dfb      	ldrb	r3, [r7, #23]
    9402:	2101      	movs	r1, #1
    9404:	4618      	mov	r0, r3
    9406:	4b5a      	ldr	r3, [pc, #360]	; (9570 <_usb_d_dev_in_next+0x1f4>)
    9408:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	689a      	ldr	r2, [r3, #8]
    940e:	89fb      	ldrh	r3, [r7, #14]
    9410:	441a      	add	r2, r3
    9412:	687b      	ldr	r3, [r7, #4]
    9414:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9416:	687b      	ldr	r3, [r7, #4]
    9418:	689a      	ldr	r2, [r3, #8]
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	685b      	ldr	r3, [r3, #4]
    941e:	429a      	cmp	r2, r3
    9420:	d243      	bcs.n	94aa <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	685b      	ldr	r3, [r3, #4]
    9426:	b29a      	uxth	r2, r3
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	689b      	ldr	r3, [r3, #8]
    942c:	b29b      	uxth	r3, r3
    942e:	1ad3      	subs	r3, r2, r3
    9430:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	7cdb      	ldrb	r3, [r3, #19]
    9436:	f003 0320 	and.w	r3, r3, #32
    943a:	b2db      	uxtb	r3, r3
    943c:	2b00      	cmp	r3, #0
    943e:	d01b      	beq.n	9478 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	8a1b      	ldrh	r3, [r3, #16]
    9444:	8bfa      	ldrh	r2, [r7, #30]
    9446:	429a      	cmp	r2, r3
    9448:	d902      	bls.n	9450 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	8a1b      	ldrh	r3, [r3, #16]
    944e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	68d8      	ldr	r0, [r3, #12]
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	681a      	ldr	r2, [r3, #0]
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	689b      	ldr	r3, [r3, #8]
    945c:	4413      	add	r3, r2
    945e:	8bfa      	ldrh	r2, [r7, #30]
    9460:	4619      	mov	r1, r3
    9462:	4b44      	ldr	r3, [pc, #272]	; (9574 <_usb_d_dev_in_next+0x1f8>)
    9464:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	68db      	ldr	r3, [r3, #12]
    946a:	461a      	mov	r2, r3
    946c:	7dfb      	ldrb	r3, [r7, #23]
    946e:	2101      	movs	r1, #1
    9470:	4618      	mov	r0, r3
    9472:	4b41      	ldr	r3, [pc, #260]	; (9578 <_usb_d_dev_in_next+0x1fc>)
    9474:	4798      	blx	r3
    9476:	e011      	b.n	949c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9478:	8bfb      	ldrh	r3, [r7, #30]
    947a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    947e:	d902      	bls.n	9486 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9484:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	681a      	ldr	r2, [r3, #0]
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	689b      	ldr	r3, [r3, #8]
    948e:	4413      	add	r3, r2
    9490:	461a      	mov	r2, r3
    9492:	7dfb      	ldrb	r3, [r7, #23]
    9494:	2101      	movs	r1, #1
    9496:	4618      	mov	r0, r3
    9498:	4b37      	ldr	r3, [pc, #220]	; (9578 <_usb_d_dev_in_next+0x1fc>)
    949a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    949c:	8bfa      	ldrh	r2, [r7, #30]
    949e:	7df8      	ldrb	r0, [r7, #23]
    94a0:	2300      	movs	r3, #0
    94a2:	2101      	movs	r1, #1
    94a4:	4c35      	ldr	r4, [pc, #212]	; (957c <_usb_d_dev_in_next+0x200>)
    94a6:	47a0      	blx	r4
		goto _in_tx_exec;
    94a8:	e041      	b.n	952e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	7cdb      	ldrb	r3, [r3, #19]
    94ae:	f003 0310 	and.w	r3, r3, #16
    94b2:	b2db      	uxtb	r3, r3
    94b4:	2b00      	cmp	r3, #0
    94b6:	d00b      	beq.n	94d0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    94b8:	687a      	ldr	r2, [r7, #4]
    94ba:	7cd3      	ldrb	r3, [r2, #19]
    94bc:	f36f 1304 	bfc	r3, #4, #1
    94c0:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    94c2:	7df8      	ldrb	r0, [r7, #23]
    94c4:	2300      	movs	r3, #0
    94c6:	2200      	movs	r2, #0
    94c8:	2101      	movs	r1, #1
    94ca:	4c2c      	ldr	r4, [pc, #176]	; (957c <_usb_d_dev_in_next+0x200>)
    94cc:	47a0      	blx	r4
		goto _in_tx_exec;
    94ce:	e02e      	b.n	952e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    94d0:	7afb      	ldrb	r3, [r7, #11]
    94d2:	2b00      	cmp	r3, #0
    94d4:	d006      	beq.n	94e4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    94d6:	7dfb      	ldrb	r3, [r7, #23]
    94d8:	224b      	movs	r2, #75	; 0x4b
    94da:	4619      	mov	r1, r3
    94dc:	69b8      	ldr	r0, [r7, #24]
    94de:	4b28      	ldr	r3, [pc, #160]	; (9580 <_usb_d_dev_in_next+0x204>)
    94e0:	4798      	blx	r3
    94e2:	e005      	b.n	94f0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    94e4:	7dfb      	ldrb	r3, [r7, #23]
    94e6:	224a      	movs	r2, #74	; 0x4a
    94e8:	4619      	mov	r1, r3
    94ea:	69b8      	ldr	r0, [r7, #24]
    94ec:	4b24      	ldr	r3, [pc, #144]	; (9580 <_usb_d_dev_in_next+0x204>)
    94ee:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    94f0:	687b      	ldr	r3, [r7, #4]
    94f2:	8a1b      	ldrh	r3, [r3, #16]
    94f4:	89ba      	ldrh	r2, [r7, #12]
    94f6:	429a      	cmp	r2, r3
    94f8:	d114      	bne.n	9524 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    94fa:	687a      	ldr	r2, [r7, #4]
    94fc:	7cd3      	ldrb	r3, [r2, #19]
    94fe:	f36f 1386 	bfc	r3, #6, #1
    9502:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9504:	4b1f      	ldr	r3, [pc, #124]	; (9584 <_usb_d_dev_in_next+0x208>)
    9506:	68db      	ldr	r3, [r3, #12]
    9508:	687a      	ldr	r2, [r7, #4]
    950a:	7c90      	ldrb	r0, [r2, #18]
    950c:	687a      	ldr	r2, [r7, #4]
    950e:	6892      	ldr	r2, [r2, #8]
    9510:	4611      	mov	r1, r2
    9512:	4798      	blx	r3
    9514:	4603      	mov	r3, r0
    9516:	2b00      	cmp	r3, #0
    9518:	d124      	bne.n	9564 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    951a:	687a      	ldr	r2, [r7, #4]
    951c:	7cd3      	ldrb	r3, [r2, #19]
    951e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9522:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9524:	2100      	movs	r1, #0
    9526:	6878      	ldr	r0, [r7, #4]
    9528:	4b17      	ldr	r3, [pc, #92]	; (9588 <_usb_d_dev_in_next+0x20c>)
    952a:	4798      	blx	r3
	return;
    952c:	e01b      	b.n	9566 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    952e:	78fb      	ldrb	r3, [r7, #3]
    9530:	f083 0301 	eor.w	r3, r3, #1
    9534:	b2db      	uxtb	r3, r3
    9536:	2b00      	cmp	r3, #0
    9538:	d00d      	beq.n	9556 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    953a:	7afb      	ldrb	r3, [r7, #11]
    953c:	2b00      	cmp	r3, #0
    953e:	d002      	beq.n	9546 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9540:	234e      	movs	r3, #78	; 0x4e
    9542:	777b      	strb	r3, [r7, #29]
    9544:	e001      	b.n	954a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9546:	234a      	movs	r3, #74	; 0x4a
    9548:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    954a:	7f7a      	ldrb	r2, [r7, #29]
    954c:	7dfb      	ldrb	r3, [r7, #23]
    954e:	4619      	mov	r1, r3
    9550:	69b8      	ldr	r0, [r7, #24]
    9552:	4b0e      	ldr	r3, [pc, #56]	; (958c <_usb_d_dev_in_next+0x210>)
    9554:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9556:	7dfb      	ldrb	r3, [r7, #23]
    9558:	2201      	movs	r2, #1
    955a:	2101      	movs	r1, #1
    955c:	4618      	mov	r0, r3
    955e:	4b0c      	ldr	r3, [pc, #48]	; (9590 <_usb_d_dev_in_next+0x214>)
    9560:	4798      	blx	r3
    9562:	e000      	b.n	9566 <_usb_d_dev_in_next+0x1ea>
			return;
    9564:	bf00      	nop
}
    9566:	3724      	adds	r7, #36	; 0x24
    9568:	46bd      	mov	sp, r7
    956a:	bd90      	pop	{r4, r7, pc}
    956c:	20000b34 	.word	0x20000b34
    9570:	00008d75 	.word	0x00008d75
    9574:	0000e735 	.word	0x0000e735
    9578:	00008da1 	.word	0x00008da1
    957c:	00008ee9 	.word	0x00008ee9
    9580:	00008681 	.word	0x00008681
    9584:	20000a6c 	.word	0x20000a6c
    9588:	0000a6a5 	.word	0x0000a6a5
    958c:	00008655 	.word	0x00008655
    9590:	00008fa1 	.word	0x00008fa1

00009594 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9594:	b590      	push	{r4, r7, lr}
    9596:	b08b      	sub	sp, #44	; 0x2c
    9598:	af00      	add	r7, sp, #0
    959a:	6078      	str	r0, [r7, #4]
    959c:	460b      	mov	r3, r1
    959e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    95a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95a4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	7c9b      	ldrb	r3, [r3, #18]
    95aa:	f003 030f 	and.w	r3, r3, #15
    95ae:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    95b0:	7ffb      	ldrb	r3, [r7, #31]
    95b2:	015b      	lsls	r3, r3, #5
    95b4:	4a94      	ldr	r2, [pc, #592]	; (9808 <_usb_d_dev_out_next+0x274>)
    95b6:	4413      	add	r3, r2
    95b8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    95ba:	78fb      	ldrb	r3, [r7, #3]
    95bc:	2b00      	cmp	r3, #0
    95be:	d005      	beq.n	95cc <_usb_d_dev_out_next+0x38>
    95c0:	69bb      	ldr	r3, [r7, #24]
    95c2:	685b      	ldr	r3, [r3, #4]
    95c4:	f3c3 338d 	ubfx	r3, r3, #14, #14
    95c8:	b29b      	uxth	r3, r3
    95ca:	e000      	b.n	95ce <_usb_d_dev_out_next+0x3a>
    95cc:	2300      	movs	r3, #0
    95ce:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    95d0:	78fb      	ldrb	r3, [r7, #3]
    95d2:	2b00      	cmp	r3, #0
    95d4:	d005      	beq.n	95e2 <_usb_d_dev_out_next+0x4e>
    95d6:	69bb      	ldr	r3, [r7, #24]
    95d8:	685b      	ldr	r3, [r3, #4]
    95da:	f3c3 030d 	ubfx	r3, r3, #0, #14
    95de:	b29b      	uxth	r3, r3
    95e0:	e000      	b.n	95e4 <_usb_d_dev_out_next+0x50>
    95e2:	2300      	movs	r3, #0
    95e4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	8a1b      	ldrh	r3, [r3, #16]
    95ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    95ee:	4293      	cmp	r3, r2
    95f0:	d004      	beq.n	95fc <_usb_d_dev_out_next+0x68>
    95f2:	687b      	ldr	r3, [r7, #4]
    95f4:	8a1b      	ldrh	r3, [r3, #16]
    95f6:	3b01      	subs	r3, #1
    95f8:	b29b      	uxth	r3, r3
    95fa:	e001      	b.n	9600 <_usb_d_dev_out_next+0x6c>
    95fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9600:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9602:	8aba      	ldrh	r2, [r7, #20]
    9604:	8a7b      	ldrh	r3, [r7, #18]
    9606:	4013      	ands	r3, r2
    9608:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	7cdb      	ldrb	r3, [r3, #19]
    960e:	f003 0307 	and.w	r3, r3, #7
    9612:	b2db      	uxtb	r3, r3
    9614:	2b01      	cmp	r3, #1
    9616:	bf0c      	ite	eq
    9618:	2301      	moveq	r3, #1
    961a:	2300      	movne	r3, #0
    961c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    961e:	78fb      	ldrb	r3, [r7, #3]
    9620:	2b00      	cmp	r3, #0
    9622:	d004      	beq.n	962e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9624:	7ffb      	ldrb	r3, [r7, #31]
    9626:	2100      	movs	r1, #0
    9628:	4618      	mov	r0, r3
    962a:	4b78      	ldr	r3, [pc, #480]	; (980c <_usb_d_dev_out_next+0x278>)
    962c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    962e:	687b      	ldr	r3, [r7, #4]
    9630:	7cdb      	ldrb	r3, [r3, #19]
    9632:	f003 0320 	and.w	r3, r3, #32
    9636:	b2db      	uxtb	r3, r3
    9638:	2b00      	cmp	r3, #0
    963a:	d01c      	beq.n	9676 <_usb_d_dev_out_next+0xe2>
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	685b      	ldr	r3, [r3, #4]
    9640:	2b00      	cmp	r3, #0
    9642:	d018      	beq.n	9676 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9644:	687b      	ldr	r3, [r7, #4]
    9646:	685b      	ldr	r3, [r3, #4]
    9648:	b29a      	uxth	r2, r3
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	689b      	ldr	r3, [r3, #8]
    964e:	b29b      	uxth	r3, r3
    9650:	1ad3      	subs	r3, r2, r3
    9652:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	681a      	ldr	r2, [r3, #0]
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	689b      	ldr	r3, [r3, #8]
    965c:	18d0      	adds	r0, r2, r3
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	68d9      	ldr	r1, [r3, #12]
    9662:	89ba      	ldrh	r2, [r7, #12]
    9664:	8a3b      	ldrh	r3, [r7, #16]
    9666:	429a      	cmp	r2, r3
    9668:	d901      	bls.n	966e <_usb_d_dev_out_next+0xda>
    966a:	8a3b      	ldrh	r3, [r7, #16]
    966c:	e000      	b.n	9670 <_usb_d_dev_out_next+0xdc>
    966e:	89bb      	ldrh	r3, [r7, #12]
    9670:	461a      	mov	r2, r3
    9672:	4b67      	ldr	r3, [pc, #412]	; (9810 <_usb_d_dev_out_next+0x27c>)
    9674:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9676:	687b      	ldr	r3, [r7, #4]
    9678:	685b      	ldr	r3, [r3, #4]
    967a:	2b00      	cmp	r3, #0
    967c:	d121      	bne.n	96c2 <_usb_d_dev_out_next+0x12e>
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	7cdb      	ldrb	r3, [r3, #19]
    9682:	f003 0310 	and.w	r3, r3, #16
    9686:	b2db      	uxtb	r3, r3
    9688:	2b00      	cmp	r3, #0
    968a:	d01a      	beq.n	96c2 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    968c:	687a      	ldr	r2, [r7, #4]
    968e:	7cd3      	ldrb	r3, [r2, #19]
    9690:	f36f 1304 	bfc	r3, #4, #1
    9694:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9696:	687a      	ldr	r2, [r7, #4]
    9698:	7cd3      	ldrb	r3, [r2, #19]
    969a:	f043 0320 	orr.w	r3, r3, #32
    969e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	68db      	ldr	r3, [r3, #12]
    96a4:	461a      	mov	r2, r3
    96a6:	7ffb      	ldrb	r3, [r7, #31]
    96a8:	2100      	movs	r1, #0
    96aa:	4618      	mov	r0, r3
    96ac:	4b59      	ldr	r3, [pc, #356]	; (9814 <_usb_d_dev_out_next+0x280>)
    96ae:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    96b0:	687b      	ldr	r3, [r7, #4]
    96b2:	8a1b      	ldrh	r3, [r3, #16]
    96b4:	461a      	mov	r2, r3
    96b6:	7ff8      	ldrb	r0, [r7, #31]
    96b8:	2300      	movs	r3, #0
    96ba:	2100      	movs	r1, #0
    96bc:	4c56      	ldr	r4, [pc, #344]	; (9818 <_usb_d_dev_out_next+0x284>)
    96be:	47a0      	blx	r4
		goto _out_rx_exec;
    96c0:	e090      	b.n	97e4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    96c2:	78fb      	ldrb	r3, [r7, #3]
    96c4:	2b00      	cmp	r3, #0
    96c6:	d010      	beq.n	96ea <_usb_d_dev_out_next+0x156>
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	8a1b      	ldrh	r3, [r3, #16]
    96cc:	8a3a      	ldrh	r2, [r7, #16]
    96ce:	429a      	cmp	r2, r3
    96d0:	d20b      	bcs.n	96ea <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    96d2:	687a      	ldr	r2, [r7, #4]
    96d4:	7cd3      	ldrb	r3, [r2, #19]
    96d6:	f36f 1304 	bfc	r3, #4, #1
    96da:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	689a      	ldr	r2, [r3, #8]
    96e0:	8abb      	ldrh	r3, [r7, #20]
    96e2:	441a      	add	r2, r3
    96e4:	687b      	ldr	r3, [r7, #4]
    96e6:	609a      	str	r2, [r3, #8]
    96e8:	e05c      	b.n	97a4 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	689a      	ldr	r2, [r3, #8]
    96ee:	8afb      	ldrh	r3, [r7, #22]
    96f0:	441a      	add	r2, r3
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    96f6:	687b      	ldr	r3, [r7, #4]
    96f8:	689a      	ldr	r2, [r3, #8]
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	685b      	ldr	r3, [r3, #4]
    96fe:	429a      	cmp	r2, r3
    9700:	d250      	bcs.n	97a4 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	685b      	ldr	r3, [r3, #4]
    9706:	b29a      	uxth	r2, r3
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	689b      	ldr	r3, [r3, #8]
    970c:	b29b      	uxth	r3, r3
    970e:	1ad3      	subs	r3, r2, r3
    9710:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9712:	687b      	ldr	r3, [r7, #4]
    9714:	7cdb      	ldrb	r3, [r3, #19]
    9716:	f003 0320 	and.w	r3, r3, #32
    971a:	b2db      	uxtb	r3, r3
    971c:	2b00      	cmp	r3, #0
    971e:	d010      	beq.n	9742 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	8a1b      	ldrh	r3, [r3, #16]
    9724:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9726:	429a      	cmp	r2, r3
    9728:	d902      	bls.n	9730 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	8a1b      	ldrh	r3, [r3, #16]
    972e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	68db      	ldr	r3, [r3, #12]
    9734:	461a      	mov	r2, r3
    9736:	7ffb      	ldrb	r3, [r7, #31]
    9738:	2100      	movs	r1, #0
    973a:	4618      	mov	r0, r3
    973c:	4b35      	ldr	r3, [pc, #212]	; (9814 <_usb_d_dev_out_next+0x280>)
    973e:	4798      	blx	r3
    9740:	e029      	b.n	9796 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	8a1b      	ldrh	r3, [r3, #16]
    9746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9748:	429a      	cmp	r2, r3
    974a:	d90f      	bls.n	976c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    974c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    974e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9752:	d903      	bls.n	975c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9758:	84fb      	strh	r3, [r7, #38]	; 0x26
    975a:	e011      	b.n	9780 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    975c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    975e:	8a7b      	ldrh	r3, [r7, #18]
    9760:	4013      	ands	r3, r2
    9762:	b29b      	uxth	r3, r3
    9764:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9766:	1ad3      	subs	r3, r2, r3
    9768:	84fb      	strh	r3, [r7, #38]	; 0x26
    976a:	e009      	b.n	9780 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	8a1b      	ldrh	r3, [r3, #16]
    9770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9772:	429a      	cmp	r2, r3
    9774:	d204      	bcs.n	9780 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9776:	687a      	ldr	r2, [r7, #4]
    9778:	7cd3      	ldrb	r3, [r2, #19]
    977a:	f043 0320 	orr.w	r3, r3, #32
    977e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	681a      	ldr	r2, [r3, #0]
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	689b      	ldr	r3, [r3, #8]
    9788:	4413      	add	r3, r2
    978a:	461a      	mov	r2, r3
    978c:	7ffb      	ldrb	r3, [r7, #31]
    978e:	2100      	movs	r1, #0
    9790:	4618      	mov	r0, r3
    9792:	4b20      	ldr	r3, [pc, #128]	; (9814 <_usb_d_dev_out_next+0x280>)
    9794:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9798:	7ff8      	ldrb	r0, [r7, #31]
    979a:	2300      	movs	r3, #0
    979c:	2100      	movs	r1, #0
    979e:	4c1e      	ldr	r4, [pc, #120]	; (9818 <_usb_d_dev_out_next+0x284>)
    97a0:	47a0      	blx	r4
			goto _out_rx_exec;
    97a2:	e01f      	b.n	97e4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    97a4:	7bfb      	ldrb	r3, [r7, #15]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d006      	beq.n	97b8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    97aa:	7ffb      	ldrb	r3, [r7, #31]
    97ac:	222d      	movs	r2, #45	; 0x2d
    97ae:	4619      	mov	r1, r3
    97b0:	6a38      	ldr	r0, [r7, #32]
    97b2:	4b1a      	ldr	r3, [pc, #104]	; (981c <_usb_d_dev_out_next+0x288>)
    97b4:	4798      	blx	r3
    97b6:	e005      	b.n	97c4 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    97b8:	7ffb      	ldrb	r3, [r7, #31]
    97ba:	2225      	movs	r2, #37	; 0x25
    97bc:	4619      	mov	r1, r3
    97be:	6a38      	ldr	r0, [r7, #32]
    97c0:	4b16      	ldr	r3, [pc, #88]	; (981c <_usb_d_dev_out_next+0x288>)
    97c2:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    97c4:	7ffb      	ldrb	r3, [r7, #31]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d107      	bne.n	97da <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    97ca:	687b      	ldr	r3, [r7, #4]
    97cc:	68db      	ldr	r3, [r3, #12]
    97ce:	461a      	mov	r2, r3
    97d0:	7ffb      	ldrb	r3, [r7, #31]
    97d2:	2100      	movs	r1, #0
    97d4:	4618      	mov	r0, r3
    97d6:	4b0f      	ldr	r3, [pc, #60]	; (9814 <_usb_d_dev_out_next+0x280>)
    97d8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    97da:	2100      	movs	r1, #0
    97dc:	6878      	ldr	r0, [r7, #4]
    97de:	4b10      	ldr	r3, [pc, #64]	; (9820 <_usb_d_dev_out_next+0x28c>)
    97e0:	4798      	blx	r3
	return;
    97e2:	e031      	b.n	9848 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    97e4:	78fb      	ldrb	r3, [r7, #3]
    97e6:	f083 0301 	eor.w	r3, r3, #1
    97ea:	b2db      	uxtb	r3, r3
    97ec:	2b00      	cmp	r3, #0
    97ee:	d025      	beq.n	983c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    97f0:	7bfb      	ldrb	r3, [r7, #15]
    97f2:	2b00      	cmp	r3, #0
    97f4:	d018      	beq.n	9828 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    97f6:	7ffb      	ldrb	r3, [r7, #31]
    97f8:	2101      	movs	r1, #1
    97fa:	4618      	mov	r0, r3
    97fc:	4b09      	ldr	r3, [pc, #36]	; (9824 <_usb_d_dev_out_next+0x290>)
    97fe:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9800:	232d      	movs	r3, #45	; 0x2d
    9802:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9806:	e012      	b.n	982e <_usb_d_dev_out_next+0x29a>
    9808:	20000b34 	.word	0x20000b34
    980c:	00008d75 	.word	0x00008d75
    9810:	0000e735 	.word	0x0000e735
    9814:	00008da1 	.word	0x00008da1
    9818:	00008f29 	.word	0x00008f29
    981c:	00008681 	.word	0x00008681
    9820:	0000a6a5 	.word	0x0000a6a5
    9824:	00008f69 	.word	0x00008f69
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9828:	2325      	movs	r3, #37	; 0x25
    982a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    982e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9832:	7ffb      	ldrb	r3, [r7, #31]
    9834:	4619      	mov	r1, r3
    9836:	6a38      	ldr	r0, [r7, #32]
    9838:	4b05      	ldr	r3, [pc, #20]	; (9850 <_usb_d_dev_out_next+0x2bc>)
    983a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    983c:	7ffb      	ldrb	r3, [r7, #31]
    983e:	2201      	movs	r2, #1
    9840:	2100      	movs	r1, #0
    9842:	4618      	mov	r0, r3
    9844:	4b03      	ldr	r3, [pc, #12]	; (9854 <_usb_d_dev_out_next+0x2c0>)
    9846:	4798      	blx	r3
}
    9848:	372c      	adds	r7, #44	; 0x2c
    984a:	46bd      	mov	sp, r7
    984c:	bd90      	pop	{r4, r7, pc}
    984e:	bf00      	nop
    9850:	00008655 	.word	0x00008655
    9854:	00008ff9 	.word	0x00008ff9

00009858 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9858:	b580      	push	{r7, lr}
    985a:	b084      	sub	sp, #16
    985c:	af00      	add	r7, sp, #0
    985e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	7c9b      	ldrb	r3, [r3, #18]
    9864:	f003 030f 	and.w	r3, r3, #15
    9868:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	7cdb      	ldrb	r3, [r3, #19]
    986e:	f003 0307 	and.w	r3, r3, #7
    9872:	b2db      	uxtb	r3, r3
    9874:	2b01      	cmp	r3, #1
    9876:	bf0c      	ite	eq
    9878:	2301      	moveq	r3, #1
    987a:	2300      	movne	r3, #0
    987c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    987e:	7bbb      	ldrb	r3, [r7, #14]
    9880:	f083 0301 	eor.w	r3, r3, #1
    9884:	b2db      	uxtb	r3, r3
    9886:	2b00      	cmp	r3, #0
    9888:	d008      	beq.n	989c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    988a:	7bfb      	ldrb	r3, [r7, #15]
    988c:	4618      	mov	r0, r3
    988e:	4b20      	ldr	r3, [pc, #128]	; (9910 <_usb_d_dev_handle_setup+0xb8>)
    9890:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9892:	7bfb      	ldrb	r3, [r7, #15]
    9894:	4618      	mov	r0, r3
    9896:	4b1f      	ldr	r3, [pc, #124]	; (9914 <_usb_d_dev_handle_setup+0xbc>)
    9898:	4798      	blx	r3
		return;
    989a:	e036      	b.n	990a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    989c:	687b      	ldr	r3, [r7, #4]
    989e:	7cdb      	ldrb	r3, [r3, #19]
    98a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98a4:	b2db      	uxtb	r3, r3
    98a6:	2b00      	cmp	r3, #0
    98a8:	d010      	beq.n	98cc <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    98aa:	687a      	ldr	r2, [r7, #4]
    98ac:	7cd3      	ldrb	r3, [r2, #19]
    98ae:	f36f 1386 	bfc	r3, #6, #1
    98b2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    98b4:	7bfb      	ldrb	r3, [r7, #15]
    98b6:	2200      	movs	r2, #0
    98b8:	2101      	movs	r1, #1
    98ba:	4618      	mov	r0, r3
    98bc:	4b16      	ldr	r3, [pc, #88]	; (9918 <_usb_d_dev_handle_setup+0xc0>)
    98be:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    98c0:	7bfb      	ldrb	r3, [r7, #15]
    98c2:	2200      	movs	r2, #0
    98c4:	2100      	movs	r1, #0
    98c6:	4618      	mov	r0, r3
    98c8:	4b14      	ldr	r3, [pc, #80]	; (991c <_usb_d_dev_handle_setup+0xc4>)
    98ca:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    98cc:	687a      	ldr	r2, [r7, #4]
    98ce:	7cd3      	ldrb	r3, [r2, #19]
    98d0:	f36f 03c3 	bfc	r3, #3, #1
    98d4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    98d6:	7bfb      	ldrb	r3, [r7, #15]
    98d8:	2100      	movs	r1, #0
    98da:	4618      	mov	r0, r3
    98dc:	4b10      	ldr	r3, [pc, #64]	; (9920 <_usb_d_dev_handle_setup+0xc8>)
    98de:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    98e0:	7bfb      	ldrb	r3, [r7, #15]
    98e2:	2101      	movs	r1, #1
    98e4:	4618      	mov	r0, r3
    98e6:	4b0e      	ldr	r3, [pc, #56]	; (9920 <_usb_d_dev_handle_setup+0xc8>)
    98e8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    98ea:	7bfb      	ldrb	r3, [r7, #15]
    98ec:	216f      	movs	r1, #111	; 0x6f
    98ee:	4618      	mov	r0, r3
    98f0:	4b0c      	ldr	r3, [pc, #48]	; (9924 <_usb_d_dev_handle_setup+0xcc>)
    98f2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    98f4:	7bfb      	ldrb	r3, [r7, #15]
    98f6:	216f      	movs	r1, #111	; 0x6f
    98f8:	4618      	mov	r0, r3
    98fa:	4b0b      	ldr	r3, [pc, #44]	; (9928 <_usb_d_dev_handle_setup+0xd0>)
    98fc:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    98fe:	4b0b      	ldr	r3, [pc, #44]	; (992c <_usb_d_dev_handle_setup+0xd4>)
    9900:	689b      	ldr	r3, [r3, #8]
    9902:	687a      	ldr	r2, [r7, #4]
    9904:	7c92      	ldrb	r2, [r2, #18]
    9906:	4610      	mov	r0, r2
    9908:	4798      	blx	r3
}
    990a:	3710      	adds	r7, #16
    990c:	46bd      	mov	sp, r7
    990e:	bd80      	pop	{r7, pc}
    9910:	00008cfd 	.word	0x00008cfd
    9914:	00008ca9 	.word	0x00008ca9
    9918:	00008fa1 	.word	0x00008fa1
    991c:	00008ff9 	.word	0x00008ff9
    9920:	00008f69 	.word	0x00008f69
    9924:	00008aa9 	.word	0x00008aa9
    9928:	00008af9 	.word	0x00008af9
    992c:	20000a6c 	.word	0x20000a6c

00009930 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9930:	b580      	push	{r7, lr}
    9932:	b084      	sub	sp, #16
    9934:	af00      	add	r7, sp, #0
    9936:	6078      	str	r0, [r7, #4]
    9938:	460b      	mov	r3, r1
    993a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	7c9b      	ldrb	r3, [r3, #18]
    9940:	f003 030f 	and.w	r3, r3, #15
    9944:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9946:	78f9      	ldrb	r1, [r7, #3]
    9948:	7bfb      	ldrb	r3, [r7, #15]
    994a:	2200      	movs	r2, #0
    994c:	4618      	mov	r0, r3
    994e:	4b07      	ldr	r3, [pc, #28]	; (996c <_usb_d_dev_handle_stall+0x3c>)
    9950:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9952:	4b07      	ldr	r3, [pc, #28]	; (9970 <_usb_d_dev_handle_stall+0x40>)
    9954:	691b      	ldr	r3, [r3, #16]
    9956:	687a      	ldr	r2, [r7, #4]
    9958:	7c90      	ldrb	r0, [r2, #18]
    995a:	687a      	ldr	r2, [r7, #4]
    995c:	6892      	ldr	r2, [r2, #8]
    995e:	2101      	movs	r1, #1
    9960:	4798      	blx	r3
}
    9962:	bf00      	nop
    9964:	3710      	adds	r7, #16
    9966:	46bd      	mov	sp, r7
    9968:	bd80      	pop	{r7, pc}
    996a:	bf00      	nop
    996c:	00008c5d 	.word	0x00008c5d
    9970:	20000a6c 	.word	0x20000a6c

00009974 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9974:	b580      	push	{r7, lr}
    9976:	b088      	sub	sp, #32
    9978:	af00      	add	r7, sp, #0
    997a:	6078      	str	r0, [r7, #4]
    997c:	460b      	mov	r3, r1
    997e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9980:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9984:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	7c9b      	ldrb	r3, [r3, #18]
    998a:	f003 030f 	and.w	r3, r3, #15
    998e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9990:	4b61      	ldr	r3, [pc, #388]	; (9b18 <_usb_d_dev_handle_trfail+0x1a4>)
    9992:	881b      	ldrh	r3, [r3, #0]
    9994:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9996:	7efb      	ldrb	r3, [r7, #27]
    9998:	015b      	lsls	r3, r3, #5
    999a:	4a60      	ldr	r2, [pc, #384]	; (9b1c <_usb_d_dev_handle_trfail+0x1a8>)
    999c:	4413      	add	r3, r2
    999e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    99a0:	78fb      	ldrb	r3, [r7, #3]
    99a2:	2b00      	cmp	r3, #0
    99a4:	d006      	beq.n	99b4 <_usb_d_dev_handle_trfail+0x40>
    99a6:	7efb      	ldrb	r3, [r7, #27]
    99a8:	4619      	mov	r1, r3
    99aa:	69f8      	ldr	r0, [r7, #28]
    99ac:	4b5c      	ldr	r3, [pc, #368]	; (9b20 <_usb_d_dev_handle_trfail+0x1ac>)
    99ae:	4798      	blx	r3
    99b0:	4603      	mov	r3, r0
    99b2:	e005      	b.n	99c0 <_usb_d_dev_handle_trfail+0x4c>
    99b4:	7efb      	ldrb	r3, [r7, #27]
    99b6:	4619      	mov	r1, r3
    99b8:	69f8      	ldr	r0, [r7, #28]
    99ba:	4b5a      	ldr	r3, [pc, #360]	; (9b24 <_usb_d_dev_handle_trfail+0x1b0>)
    99bc:	4798      	blx	r3
    99be:	4603      	mov	r3, r0
    99c0:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	7cdb      	ldrb	r3, [r3, #19]
    99c6:	f003 0307 	and.w	r3, r3, #7
    99ca:	b2db      	uxtb	r3, r3
    99cc:	2b01      	cmp	r3, #1
    99ce:	bf0c      	ite	eq
    99d0:	2301      	moveq	r3, #1
    99d2:	2300      	movne	r3, #0
    99d4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    99d6:	78fb      	ldrb	r3, [r7, #3]
    99d8:	011b      	lsls	r3, r3, #4
    99da:	697a      	ldr	r2, [r7, #20]
    99dc:	4413      	add	r3, r2
    99de:	7a9b      	ldrb	r3, [r3, #10]
    99e0:	b2db      	uxtb	r3, r3
    99e2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    99e4:	7cfb      	ldrb	r3, [r7, #19]
    99e6:	2b02      	cmp	r3, #2
    99e8:	d12f      	bne.n	9a4a <_usb_d_dev_handle_trfail+0xd6>
    99ea:	7b3b      	ldrb	r3, [r7, #12]
    99ec:	f003 0301 	and.w	r3, r3, #1
    99f0:	b2db      	uxtb	r3, r3
    99f2:	2b00      	cmp	r3, #0
    99f4:	d029      	beq.n	9a4a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    99f6:	78fb      	ldrb	r3, [r7, #3]
    99f8:	011b      	lsls	r3, r3, #4
    99fa:	697a      	ldr	r2, [r7, #20]
    99fc:	441a      	add	r2, r3
    99fe:	7a93      	ldrb	r3, [r2, #10]
    9a00:	f36f 0300 	bfc	r3, #0, #1
    9a04:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a06:	78fb      	ldrb	r3, [r7, #3]
    9a08:	f107 0220 	add.w	r2, r7, #32
    9a0c:	4413      	add	r3, r2
    9a0e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a12:	7efb      	ldrb	r3, [r7, #27]
    9a14:	4619      	mov	r1, r3
    9a16:	69f8      	ldr	r0, [r7, #28]
    9a18:	4b43      	ldr	r3, [pc, #268]	; (9b28 <_usb_d_dev_handle_trfail+0x1b4>)
    9a1a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a1c:	78fb      	ldrb	r3, [r7, #3]
    9a1e:	f107 0220 	add.w	r2, r7, #32
    9a22:	4413      	add	r3, r2
    9a24:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a28:	7efb      	ldrb	r3, [r7, #27]
    9a2a:	4619      	mov	r1, r3
    9a2c:	69f8      	ldr	r0, [r7, #28]
    9a2e:	4b3f      	ldr	r3, [pc, #252]	; (9b2c <_usb_d_dev_handle_trfail+0x1b8>)
    9a30:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9a32:	78fb      	ldrb	r3, [r7, #3]
    9a34:	2b00      	cmp	r3, #0
    9a36:	bf14      	ite	ne
    9a38:	2301      	movne	r3, #1
    9a3a:	2300      	moveq	r3, #0
    9a3c:	b2db      	uxtb	r3, r3
    9a3e:	2204      	movs	r2, #4
    9a40:	4619      	mov	r1, r3
    9a42:	6878      	ldr	r0, [r7, #4]
    9a44:	4b3a      	ldr	r3, [pc, #232]	; (9b30 <_usb_d_dev_handle_trfail+0x1bc>)
    9a46:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9a48:	e062      	b.n	9b10 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9a4a:	7b3b      	ldrb	r3, [r7, #12]
    9a4c:	f003 0302 	and.w	r3, r3, #2
    9a50:	b2db      	uxtb	r3, r3
    9a52:	2b00      	cmp	r3, #0
    9a54:	d040      	beq.n	9ad8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9a56:	78fb      	ldrb	r3, [r7, #3]
    9a58:	011b      	lsls	r3, r3, #4
    9a5a:	697a      	ldr	r2, [r7, #20]
    9a5c:	441a      	add	r2, r3
    9a5e:	7a93      	ldrb	r3, [r2, #10]
    9a60:	f36f 0341 	bfc	r3, #1, #1
    9a64:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9a66:	78fb      	ldrb	r3, [r7, #3]
    9a68:	f107 0220 	add.w	r2, r7, #32
    9a6c:	4413      	add	r3, r2
    9a6e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a72:	7efb      	ldrb	r3, [r7, #27]
    9a74:	4619      	mov	r1, r3
    9a76:	69f8      	ldr	r0, [r7, #28]
    9a78:	4b2b      	ldr	r3, [pc, #172]	; (9b28 <_usb_d_dev_handle_trfail+0x1b4>)
    9a7a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9a7c:	78fb      	ldrb	r3, [r7, #3]
    9a7e:	f107 0220 	add.w	r2, r7, #32
    9a82:	4413      	add	r3, r2
    9a84:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9a88:	7efb      	ldrb	r3, [r7, #27]
    9a8a:	4619      	mov	r1, r3
    9a8c:	69f8      	ldr	r0, [r7, #28]
    9a8e:	4b27      	ldr	r3, [pc, #156]	; (9b2c <_usb_d_dev_handle_trfail+0x1b8>)
    9a90:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9a92:	7cbb      	ldrb	r3, [r7, #18]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d03b      	beq.n	9b10 <_usb_d_dev_handle_trfail+0x19c>
    9a98:	687b      	ldr	r3, [r7, #4]
    9a9a:	7cdb      	ldrb	r3, [r3, #19]
    9a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9aa0:	b2db      	uxtb	r3, r3
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d034      	beq.n	9b10 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	7cdb      	ldrb	r3, [r3, #19]
    9aaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9aae:	b2db      	uxtb	r3, r3
    9ab0:	461a      	mov	r2, r3
    9ab2:	78fb      	ldrb	r3, [r7, #3]
    9ab4:	4293      	cmp	r3, r2
    9ab6:	d02b      	beq.n	9b10 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9ab8:	687b      	ldr	r3, [r7, #4]
    9aba:	7cdb      	ldrb	r3, [r3, #19]
    9abc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9ac0:	b2db      	uxtb	r3, r3
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	bf14      	ite	ne
    9ac6:	2301      	movne	r3, #1
    9ac8:	2300      	moveq	r3, #0
    9aca:	b2db      	uxtb	r3, r3
    9acc:	2200      	movs	r2, #0
    9ace:	4619      	mov	r1, r3
    9ad0:	6878      	ldr	r0, [r7, #4]
    9ad2:	4b17      	ldr	r3, [pc, #92]	; (9b30 <_usb_d_dev_handle_trfail+0x1bc>)
    9ad4:	4798      	blx	r3
}
    9ad6:	e01b      	b.n	9b10 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9ad8:	78fa      	ldrb	r2, [r7, #3]
    9ada:	7efb      	ldrb	r3, [r7, #27]
    9adc:	4611      	mov	r1, r2
    9ade:	4618      	mov	r0, r3
    9ae0:	4b14      	ldr	r3, [pc, #80]	; (9b34 <_usb_d_dev_handle_trfail+0x1c0>)
    9ae2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ae4:	78fb      	ldrb	r3, [r7, #3]
    9ae6:	f107 0220 	add.w	r2, r7, #32
    9aea:	4413      	add	r3, r2
    9aec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9af0:	7efb      	ldrb	r3, [r7, #27]
    9af2:	4619      	mov	r1, r3
    9af4:	69f8      	ldr	r0, [r7, #28]
    9af6:	4b0c      	ldr	r3, [pc, #48]	; (9b28 <_usb_d_dev_handle_trfail+0x1b4>)
    9af8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9afa:	78fb      	ldrb	r3, [r7, #3]
    9afc:	f107 0220 	add.w	r2, r7, #32
    9b00:	4413      	add	r3, r2
    9b02:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9b06:	7efb      	ldrb	r3, [r7, #27]
    9b08:	4619      	mov	r1, r3
    9b0a:	69f8      	ldr	r0, [r7, #28]
    9b0c:	4b07      	ldr	r3, [pc, #28]	; (9b2c <_usb_d_dev_handle_trfail+0x1b8>)
    9b0e:	4798      	blx	r3
}
    9b10:	bf00      	nop
    9b12:	3720      	adds	r7, #32
    9b14:	46bd      	mov	sp, r7
    9b16:	bd80      	pop	{r7, pc}
    9b18:	0000ef00 	.word	0x0000ef00
    9b1c:	20000b34 	.word	0x20000b34
    9b20:	000086dd 	.word	0x000086dd
    9b24:	000086ad 	.word	0x000086ad
    9b28:	00008581 	.word	0x00008581
    9b2c:	00008681 	.word	0x00008681
    9b30:	0000a6ed 	.word	0x0000a6ed
    9b34:	00008f69 	.word	0x00008f69

00009b38 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b38:	b580      	push	{r7, lr}
    9b3a:	b082      	sub	sp, #8
    9b3c:	af00      	add	r7, sp, #0
    9b3e:	6078      	str	r0, [r7, #4]
    9b40:	460b      	mov	r3, r1
    9b42:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9b44:	78fb      	ldrb	r3, [r7, #3]
    9b46:	f003 0310 	and.w	r3, r3, #16
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d003      	beq.n	9b56 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9b4e:	6878      	ldr	r0, [r7, #4]
    9b50:	4b0c      	ldr	r3, [pc, #48]	; (9b84 <_usb_d_dev_trans_setup_isr+0x4c>)
    9b52:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9b54:	e012      	b.n	9b7c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b56:	78fb      	ldrb	r3, [r7, #3]
    9b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d004      	beq.n	9b6a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9b60:	2101      	movs	r1, #1
    9b62:	6878      	ldr	r0, [r7, #4]
    9b64:	4b08      	ldr	r3, [pc, #32]	; (9b88 <_usb_d_dev_trans_setup_isr+0x50>)
    9b66:	4798      	blx	r3
}
    9b68:	e008      	b.n	9b7c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9b6a:	78fb      	ldrb	r3, [r7, #3]
    9b6c:	f003 0320 	and.w	r3, r3, #32
    9b70:	2b00      	cmp	r3, #0
    9b72:	d003      	beq.n	9b7c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9b74:	2100      	movs	r1, #0
    9b76:	6878      	ldr	r0, [r7, #4]
    9b78:	4b03      	ldr	r3, [pc, #12]	; (9b88 <_usb_d_dev_trans_setup_isr+0x50>)
    9b7a:	4798      	blx	r3
}
    9b7c:	bf00      	nop
    9b7e:	3708      	adds	r7, #8
    9b80:	46bd      	mov	sp, r7
    9b82:	bd80      	pop	{r7, pc}
    9b84:	00009859 	.word	0x00009859
    9b88:	00009931 	.word	0x00009931

00009b8c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9b8c:	b580      	push	{r7, lr}
    9b8e:	b082      	sub	sp, #8
    9b90:	af00      	add	r7, sp, #0
    9b92:	6078      	str	r0, [r7, #4]
    9b94:	460b      	mov	r3, r1
    9b96:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9b98:	78fb      	ldrb	r3, [r7, #3]
    9b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	d004      	beq.n	9bac <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9ba2:	2101      	movs	r1, #1
    9ba4:	6878      	ldr	r0, [r7, #4]
    9ba6:	4b1a      	ldr	r3, [pc, #104]	; (9c10 <_usb_d_dev_trans_in_isr+0x84>)
    9ba8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9baa:	e02c      	b.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9bac:	78fb      	ldrb	r3, [r7, #3]
    9bae:	f003 0308 	and.w	r3, r3, #8
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d004      	beq.n	9bc0 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9bb6:	2101      	movs	r1, #1
    9bb8:	6878      	ldr	r0, [r7, #4]
    9bba:	4b16      	ldr	r3, [pc, #88]	; (9c14 <_usb_d_dev_trans_in_isr+0x88>)
    9bbc:	4798      	blx	r3
}
    9bbe:	e022      	b.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9bc0:	78fb      	ldrb	r3, [r7, #3]
    9bc2:	f003 0302 	and.w	r3, r3, #2
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d004      	beq.n	9bd4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9bca:	2101      	movs	r1, #1
    9bcc:	6878      	ldr	r0, [r7, #4]
    9bce:	4b12      	ldr	r3, [pc, #72]	; (9c18 <_usb_d_dev_trans_in_isr+0x8c>)
    9bd0:	4798      	blx	r3
}
    9bd2:	e018      	b.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9bd4:	687b      	ldr	r3, [r7, #4]
    9bd6:	7cdb      	ldrb	r3, [r3, #19]
    9bd8:	f003 0307 	and.w	r3, r3, #7
    9bdc:	b2db      	uxtb	r3, r3
    9bde:	2b01      	cmp	r3, #1
    9be0:	d111      	bne.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9be2:	78fb      	ldrb	r3, [r7, #3]
    9be4:	f003 0304 	and.w	r3, r3, #4
    9be8:	2b00      	cmp	r3, #0
    9bea:	d004      	beq.n	9bf6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9bec:	2100      	movs	r1, #0
    9bee:	6878      	ldr	r0, [r7, #4]
    9bf0:	4b08      	ldr	r3, [pc, #32]	; (9c14 <_usb_d_dev_trans_in_isr+0x88>)
    9bf2:	4798      	blx	r3
}
    9bf4:	e007      	b.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9bf6:	78fb      	ldrb	r3, [r7, #3]
    9bf8:	f003 0310 	and.w	r3, r3, #16
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d002      	beq.n	9c06 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9c00:	6878      	ldr	r0, [r7, #4]
    9c02:	4b06      	ldr	r3, [pc, #24]	; (9c1c <_usb_d_dev_trans_in_isr+0x90>)
    9c04:	4798      	blx	r3
}
    9c06:	bf00      	nop
    9c08:	3708      	adds	r7, #8
    9c0a:	46bd      	mov	sp, r7
    9c0c:	bd80      	pop	{r7, pc}
    9c0e:	bf00      	nop
    9c10:	00009931 	.word	0x00009931
    9c14:	00009975 	.word	0x00009975
    9c18:	0000937d 	.word	0x0000937d
    9c1c:	00009859 	.word	0x00009859

00009c20 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9c20:	b580      	push	{r7, lr}
    9c22:	b082      	sub	sp, #8
    9c24:	af00      	add	r7, sp, #0
    9c26:	6078      	str	r0, [r7, #4]
    9c28:	460b      	mov	r3, r1
    9c2a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9c2c:	78fb      	ldrb	r3, [r7, #3]
    9c2e:	f003 0320 	and.w	r3, r3, #32
    9c32:	2b00      	cmp	r3, #0
    9c34:	d004      	beq.n	9c40 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9c36:	2100      	movs	r1, #0
    9c38:	6878      	ldr	r0, [r7, #4]
    9c3a:	4b1a      	ldr	r3, [pc, #104]	; (9ca4 <_usb_d_dev_trans_out_isr+0x84>)
    9c3c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9c3e:	e02c      	b.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9c40:	78fb      	ldrb	r3, [r7, #3]
    9c42:	f003 0304 	and.w	r3, r3, #4
    9c46:	2b00      	cmp	r3, #0
    9c48:	d004      	beq.n	9c54 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9c4a:	2100      	movs	r1, #0
    9c4c:	6878      	ldr	r0, [r7, #4]
    9c4e:	4b16      	ldr	r3, [pc, #88]	; (9ca8 <_usb_d_dev_trans_out_isr+0x88>)
    9c50:	4798      	blx	r3
}
    9c52:	e022      	b.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9c54:	78fb      	ldrb	r3, [r7, #3]
    9c56:	f003 0301 	and.w	r3, r3, #1
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d004      	beq.n	9c68 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9c5e:	2101      	movs	r1, #1
    9c60:	6878      	ldr	r0, [r7, #4]
    9c62:	4b12      	ldr	r3, [pc, #72]	; (9cac <_usb_d_dev_trans_out_isr+0x8c>)
    9c64:	4798      	blx	r3
}
    9c66:	e018      	b.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9c68:	687b      	ldr	r3, [r7, #4]
    9c6a:	7cdb      	ldrb	r3, [r3, #19]
    9c6c:	f003 0307 	and.w	r3, r3, #7
    9c70:	b2db      	uxtb	r3, r3
    9c72:	2b01      	cmp	r3, #1
    9c74:	d111      	bne.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9c76:	78fb      	ldrb	r3, [r7, #3]
    9c78:	f003 0308 	and.w	r3, r3, #8
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	d004      	beq.n	9c8a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9c80:	2101      	movs	r1, #1
    9c82:	6878      	ldr	r0, [r7, #4]
    9c84:	4b08      	ldr	r3, [pc, #32]	; (9ca8 <_usb_d_dev_trans_out_isr+0x88>)
    9c86:	4798      	blx	r3
}
    9c88:	e007      	b.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c8a:	78fb      	ldrb	r3, [r7, #3]
    9c8c:	f003 0310 	and.w	r3, r3, #16
    9c90:	2b00      	cmp	r3, #0
    9c92:	d002      	beq.n	9c9a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9c94:	6878      	ldr	r0, [r7, #4]
    9c96:	4b06      	ldr	r3, [pc, #24]	; (9cb0 <_usb_d_dev_trans_out_isr+0x90>)
    9c98:	4798      	blx	r3
}
    9c9a:	bf00      	nop
    9c9c:	3708      	adds	r7, #8
    9c9e:	46bd      	mov	sp, r7
    9ca0:	bd80      	pop	{r7, pc}
    9ca2:	bf00      	nop
    9ca4:	00009931 	.word	0x00009931
    9ca8:	00009975 	.word	0x00009975
    9cac:	00009595 	.word	0x00009595
    9cb0:	00009859 	.word	0x00009859

00009cb4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	b084      	sub	sp, #16
    9cb8:	af00      	add	r7, sp, #0
    9cba:	6078      	str	r0, [r7, #4]
    9cbc:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9cbe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9cc2:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cc4:	683b      	ldr	r3, [r7, #0]
    9cc6:	7c9b      	ldrb	r3, [r3, #18]
    9cc8:	f003 030f 	and.w	r3, r3, #15
    9ccc:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9cce:	7afb      	ldrb	r3, [r7, #11]
    9cd0:	2201      	movs	r2, #1
    9cd2:	409a      	lsls	r2, r3
    9cd4:	687b      	ldr	r3, [r7, #4]
    9cd6:	4013      	ands	r3, r2
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d03d      	beq.n	9d58 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9cdc:	7afb      	ldrb	r3, [r7, #11]
    9cde:	68fa      	ldr	r2, [r7, #12]
    9ce0:	3308      	adds	r3, #8
    9ce2:	015b      	lsls	r3, r3, #5
    9ce4:	4413      	add	r3, r2
    9ce6:	3307      	adds	r3, #7
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9cec:	7afb      	ldrb	r3, [r7, #11]
    9cee:	68fa      	ldr	r2, [r7, #12]
    9cf0:	015b      	lsls	r3, r3, #5
    9cf2:	4413      	add	r3, r2
    9cf4:	f203 1309 	addw	r3, r3, #265	; 0x109
    9cf8:	781b      	ldrb	r3, [r3, #0]
    9cfa:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9cfc:	7aba      	ldrb	r2, [r7, #10]
    9cfe:	7a7b      	ldrb	r3, [r7, #9]
    9d00:	4013      	ands	r3, r2
    9d02:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9d04:	7abb      	ldrb	r3, [r7, #10]
    9d06:	2b00      	cmp	r3, #0
    9d08:	d027      	beq.n	9d5a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9d0a:	683b      	ldr	r3, [r7, #0]
    9d0c:	7cdb      	ldrb	r3, [r3, #19]
    9d0e:	f003 0307 	and.w	r3, r3, #7
    9d12:	b2db      	uxtb	r3, r3
    9d14:	2b01      	cmp	r3, #1
    9d16:	d10c      	bne.n	9d32 <_usb_d_dev_handle_eps+0x7e>
    9d18:	683b      	ldr	r3, [r7, #0]
    9d1a:	7cdb      	ldrb	r3, [r3, #19]
    9d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2b00      	cmp	r3, #0
    9d24:	d105      	bne.n	9d32 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9d26:	7abb      	ldrb	r3, [r7, #10]
    9d28:	4619      	mov	r1, r3
    9d2a:	6838      	ldr	r0, [r7, #0]
    9d2c:	4b0c      	ldr	r3, [pc, #48]	; (9d60 <_usb_d_dev_handle_eps+0xac>)
    9d2e:	4798      	blx	r3
    9d30:	e013      	b.n	9d5a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9d32:	683b      	ldr	r3, [r7, #0]
    9d34:	7cdb      	ldrb	r3, [r3, #19]
    9d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9d3a:	b2db      	uxtb	r3, r3
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d005      	beq.n	9d4c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9d40:	7abb      	ldrb	r3, [r7, #10]
    9d42:	4619      	mov	r1, r3
    9d44:	6838      	ldr	r0, [r7, #0]
    9d46:	4b07      	ldr	r3, [pc, #28]	; (9d64 <_usb_d_dev_handle_eps+0xb0>)
    9d48:	4798      	blx	r3
    9d4a:	e006      	b.n	9d5a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9d4c:	7abb      	ldrb	r3, [r7, #10]
    9d4e:	4619      	mov	r1, r3
    9d50:	6838      	ldr	r0, [r7, #0]
    9d52:	4b05      	ldr	r3, [pc, #20]	; (9d68 <_usb_d_dev_handle_eps+0xb4>)
    9d54:	4798      	blx	r3
    9d56:	e000      	b.n	9d5a <_usb_d_dev_handle_eps+0xa6>
		return;
    9d58:	bf00      	nop
		}
	}
}
    9d5a:	3710      	adds	r7, #16
    9d5c:	46bd      	mov	sp, r7
    9d5e:	bd80      	pop	{r7, pc}
    9d60:	00009b39 	.word	0x00009b39
    9d64:	00009b8d 	.word	0x00009b8d
    9d68:	00009c21 	.word	0x00009c21

00009d6c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9d6c:	b580      	push	{r7, lr}
    9d6e:	b084      	sub	sp, #16
    9d70:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9d72:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d76:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9d78:	68bb      	ldr	r3, [r7, #8]
    9d7a:	8c1b      	ldrh	r3, [r3, #32]
    9d7c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9d7e:	88fb      	ldrh	r3, [r7, #6]
    9d80:	2b00      	cmp	r3, #0
    9d82:	d104      	bne.n	9d8e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9d84:	4b13      	ldr	r3, [pc, #76]	; (9dd4 <_usb_d_dev_handler+0x68>)
    9d86:	4798      	blx	r3
    9d88:	4603      	mov	r3, r0
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d11e      	bne.n	9dcc <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9d8e:	2300      	movs	r3, #0
    9d90:	73fb      	strb	r3, [r7, #15]
    9d92:	e017      	b.n	9dc4 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9d94:	7bfa      	ldrb	r2, [r7, #15]
    9d96:	4613      	mov	r3, r2
    9d98:	009b      	lsls	r3, r3, #2
    9d9a:	4413      	add	r3, r2
    9d9c:	009b      	lsls	r3, r3, #2
    9d9e:	3310      	adds	r3, #16
    9da0:	4a0d      	ldr	r2, [pc, #52]	; (9dd8 <_usb_d_dev_handler+0x6c>)
    9da2:	4413      	add	r3, r2
    9da4:	3304      	adds	r3, #4
    9da6:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9da8:	683b      	ldr	r3, [r7, #0]
    9daa:	7c9b      	ldrb	r3, [r3, #18]
    9dac:	2bff      	cmp	r3, #255	; 0xff
    9dae:	d005      	beq.n	9dbc <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9db0:	88fb      	ldrh	r3, [r7, #6]
    9db2:	6839      	ldr	r1, [r7, #0]
    9db4:	4618      	mov	r0, r3
    9db6:	4b09      	ldr	r3, [pc, #36]	; (9ddc <_usb_d_dev_handler+0x70>)
    9db8:	4798      	blx	r3
    9dba:	e000      	b.n	9dbe <_usb_d_dev_handler+0x52>
			continue;
    9dbc:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9dbe:	7bfb      	ldrb	r3, [r7, #15]
    9dc0:	3301      	adds	r3, #1
    9dc2:	73fb      	strb	r3, [r7, #15]
    9dc4:	7bfb      	ldrb	r3, [r7, #15]
    9dc6:	2b08      	cmp	r3, #8
    9dc8:	d9e4      	bls.n	9d94 <_usb_d_dev_handler+0x28>
    9dca:	e000      	b.n	9dce <_usb_d_dev_handler+0x62>
			return;
    9dcc:	bf00      	nop
	}
}
    9dce:	3710      	adds	r7, #16
    9dd0:	46bd      	mov	sp, r7
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	000092c5 	.word	0x000092c5
    9dd8:	20000a6c 	.word	0x20000a6c
    9ddc:	00009cb5 	.word	0x00009cb5

00009de0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9de0:	b580      	push	{r7, lr}
    9de2:	b082      	sub	sp, #8
    9de4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9de6:	2300      	movs	r3, #0
    9de8:	71fb      	strb	r3, [r7, #7]
    9dea:	e023      	b.n	9e34 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    9dec:	79fa      	ldrb	r2, [r7, #7]
    9dee:	4613      	mov	r3, r2
    9df0:	009b      	lsls	r3, r3, #2
    9df2:	4413      	add	r3, r2
    9df4:	009b      	lsls	r3, r3, #2
    9df6:	3310      	adds	r3, #16
    9df8:	4a14      	ldr	r2, [pc, #80]	; (9e4c <_usb_d_dev_reset_epts+0x6c>)
    9dfa:	4413      	add	r3, r2
    9dfc:	3304      	adds	r3, #4
    9dfe:	2103      	movs	r1, #3
    9e00:	4618      	mov	r0, r3
    9e02:	4b13      	ldr	r3, [pc, #76]	; (9e50 <_usb_d_dev_reset_epts+0x70>)
    9e04:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9e06:	79fa      	ldrb	r2, [r7, #7]
    9e08:	4910      	ldr	r1, [pc, #64]	; (9e4c <_usb_d_dev_reset_epts+0x6c>)
    9e0a:	4613      	mov	r3, r2
    9e0c:	009b      	lsls	r3, r3, #2
    9e0e:	4413      	add	r3, r2
    9e10:	009b      	lsls	r3, r3, #2
    9e12:	440b      	add	r3, r1
    9e14:	3326      	adds	r3, #38	; 0x26
    9e16:	22ff      	movs	r2, #255	; 0xff
    9e18:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    9e1a:	79fa      	ldrb	r2, [r7, #7]
    9e1c:	490b      	ldr	r1, [pc, #44]	; (9e4c <_usb_d_dev_reset_epts+0x6c>)
    9e1e:	4613      	mov	r3, r2
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	4413      	add	r3, r2
    9e24:	009b      	lsls	r3, r3, #2
    9e26:	440b      	add	r3, r1
    9e28:	3327      	adds	r3, #39	; 0x27
    9e2a:	2200      	movs	r2, #0
    9e2c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    9e2e:	79fb      	ldrb	r3, [r7, #7]
    9e30:	3301      	adds	r3, #1
    9e32:	71fb      	strb	r3, [r7, #7]
    9e34:	79fb      	ldrb	r3, [r7, #7]
    9e36:	2b08      	cmp	r3, #8
    9e38:	d9d8      	bls.n	9dec <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9e3a:	22a0      	movs	r2, #160	; 0xa0
    9e3c:	2100      	movs	r1, #0
    9e3e:	4805      	ldr	r0, [pc, #20]	; (9e54 <_usb_d_dev_reset_epts+0x74>)
    9e40:	4b05      	ldr	r3, [pc, #20]	; (9e58 <_usb_d_dev_reset_epts+0x78>)
    9e42:	4798      	blx	r3
}
    9e44:	bf00      	nop
    9e46:	3708      	adds	r7, #8
    9e48:	46bd      	mov	sp, r7
    9e4a:	bd80      	pop	{r7, pc}
    9e4c:	20000a6c 	.word	0x20000a6c
    9e50:	0000a6a5 	.word	0x0000a6a5
    9e54:	20000b34 	.word	0x20000b34
    9e58:	0000e869 	.word	0x0000e869

00009e5c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9e5c:	b580      	push	{r7, lr}
    9e5e:	b084      	sub	sp, #16
    9e60:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9e62:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e66:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9e68:	2301      	movs	r3, #1
    9e6a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9e6c:	2304      	movs	r3, #4
    9e6e:	713b      	strb	r3, [r7, #4]
    9e70:	2300      	movs	r3, #0
    9e72:	717b      	strb	r3, [r7, #5]
    9e74:	2300      	movs	r3, #0
    9e76:	71bb      	strb	r3, [r7, #6]
    9e78:	2300      	movs	r3, #0
    9e7a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9e7c:	2101      	movs	r1, #1
    9e7e:	68f8      	ldr	r0, [r7, #12]
    9e80:	4b26      	ldr	r3, [pc, #152]	; (9f1c <_usb_d_dev_init+0xc0>)
    9e82:	4798      	blx	r3
    9e84:	4603      	mov	r3, r0
    9e86:	f083 0301 	eor.w	r3, r3, #1
    9e8a:	b2db      	uxtb	r3, r3
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d011      	beq.n	9eb4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9e90:	2102      	movs	r1, #2
    9e92:	68f8      	ldr	r0, [r7, #12]
    9e94:	4b22      	ldr	r3, [pc, #136]	; (9f20 <_usb_d_dev_init+0xc4>)
    9e96:	4798      	blx	r3
    9e98:	4603      	mov	r3, r0
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d006      	beq.n	9eac <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9e9e:	68f8      	ldr	r0, [r7, #12]
    9ea0:	4b20      	ldr	r3, [pc, #128]	; (9f24 <_usb_d_dev_init+0xc8>)
    9ea2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9ea4:	2102      	movs	r1, #2
    9ea6:	68f8      	ldr	r0, [r7, #12]
    9ea8:	4b1f      	ldr	r3, [pc, #124]	; (9f28 <_usb_d_dev_init+0xcc>)
    9eaa:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9eac:	2101      	movs	r1, #1
    9eae:	68f8      	ldr	r0, [r7, #12]
    9eb0:	4b1e      	ldr	r3, [pc, #120]	; (9f2c <_usb_d_dev_init+0xd0>)
    9eb2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9eb4:	2101      	movs	r1, #1
    9eb6:	68f8      	ldr	r0, [r7, #12]
    9eb8:	4b1b      	ldr	r3, [pc, #108]	; (9f28 <_usb_d_dev_init+0xcc>)
    9eba:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9ebc:	4b1c      	ldr	r3, [pc, #112]	; (9f30 <_usb_d_dev_init+0xd4>)
    9ebe:	4a1d      	ldr	r2, [pc, #116]	; (9f34 <_usb_d_dev_init+0xd8>)
    9ec0:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9ec2:	4b1b      	ldr	r3, [pc, #108]	; (9f30 <_usb_d_dev_init+0xd4>)
    9ec4:	4a1b      	ldr	r2, [pc, #108]	; (9f34 <_usb_d_dev_init+0xd8>)
    9ec6:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9ec8:	4b19      	ldr	r3, [pc, #100]	; (9f30 <_usb_d_dev_init+0xd4>)
    9eca:	4a1a      	ldr	r2, [pc, #104]	; (9f34 <_usb_d_dev_init+0xd8>)
    9ecc:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9ece:	4b18      	ldr	r3, [pc, #96]	; (9f30 <_usb_d_dev_init+0xd4>)
    9ed0:	4a18      	ldr	r2, [pc, #96]	; (9f34 <_usb_d_dev_init+0xd8>)
    9ed2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9ed4:	4b16      	ldr	r3, [pc, #88]	; (9f30 <_usb_d_dev_init+0xd4>)
    9ed6:	4a17      	ldr	r2, [pc, #92]	; (9f34 <_usb_d_dev_init+0xd8>)
    9ed8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    9eda:	4b17      	ldr	r3, [pc, #92]	; (9f38 <_usb_d_dev_init+0xdc>)
    9edc:	4798      	blx	r3

	_usb_load_calib();
    9ede:	4b17      	ldr	r3, [pc, #92]	; (9f3c <_usb_d_dev_init+0xe0>)
    9ee0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9ee2:	2104      	movs	r1, #4
    9ee4:	68f8      	ldr	r0, [r7, #12]
    9ee6:	4b11      	ldr	r3, [pc, #68]	; (9f2c <_usb_d_dev_init+0xd0>)
    9ee8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    9eea:	4b15      	ldr	r3, [pc, #84]	; (9f40 <_usb_d_dev_init+0xe4>)
    9eec:	4619      	mov	r1, r3
    9eee:	68f8      	ldr	r0, [r7, #12]
    9ef0:	4b14      	ldr	r3, [pc, #80]	; (9f44 <_usb_d_dev_init+0xe8>)
    9ef2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9ef4:	7afb      	ldrb	r3, [r7, #11]
    9ef6:	f107 0210 	add.w	r2, r7, #16
    9efa:	4413      	add	r3, r2
    9efc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9f00:	f043 0301 	orr.w	r3, r3, #1
    9f04:	b2db      	uxtb	r3, r3
    9f06:	b29b      	uxth	r3, r3
    9f08:	4619      	mov	r1, r3
    9f0a:	68f8      	ldr	r0, [r7, #12]
    9f0c:	4b0e      	ldr	r3, [pc, #56]	; (9f48 <_usb_d_dev_init+0xec>)
    9f0e:	4798      	blx	r3

	return ERR_NONE;
    9f10:	2300      	movs	r3, #0
}
    9f12:	4618      	mov	r0, r3
    9f14:	3710      	adds	r7, #16
    9f16:	46bd      	mov	sp, r7
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	bf00      	nop
    9f1c:	000084f5 	.word	0x000084f5
    9f20:	00008845 	.word	0x00008845
    9f24:	00008819 	.word	0x00008819
    9f28:	000084cb 	.word	0x000084cb
    9f2c:	00008875 	.word	0x00008875
    9f30:	20000a6c 	.word	0x20000a6c
    9f34:	0000893d 	.word	0x0000893d
    9f38:	00009de1 	.word	0x00009de1
    9f3c:	00008955 	.word	0x00008955
    9f40:	20000b34 	.word	0x20000b34
    9f44:	00008921 	.word	0x00008921
    9f48:	000088e5 	.word	0x000088e5

00009f4c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9f4c:	b580      	push	{r7, lr}
    9f4e:	b082      	sub	sp, #8
    9f50:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9f52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f56:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9f58:	2103      	movs	r1, #3
    9f5a:	6878      	ldr	r0, [r7, #4]
    9f5c:	4b17      	ldr	r3, [pc, #92]	; (9fbc <_usb_d_dev_enable+0x70>)
    9f5e:	4798      	blx	r3
    9f60:	4603      	mov	r3, r0
    9f62:	2b00      	cmp	r3, #0
    9f64:	d002      	beq.n	9f6c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9f66:	f06f 0310 	mvn.w	r3, #16
    9f6a:	e023      	b.n	9fb4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9f6c:	6878      	ldr	r0, [r7, #4]
    9f6e:	4b14      	ldr	r3, [pc, #80]	; (9fc0 <_usb_d_dev_enable+0x74>)
    9f70:	4798      	blx	r3
    9f72:	4603      	mov	r3, r0
    9f74:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9f76:	78fb      	ldrb	r3, [r7, #3]
    9f78:	f003 0302 	and.w	r3, r3, #2
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d107      	bne.n	9f90 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9f80:	78fb      	ldrb	r3, [r7, #3]
    9f82:	f043 0302 	orr.w	r3, r3, #2
    9f86:	b2db      	uxtb	r3, r3
    9f88:	4619      	mov	r1, r3
    9f8a:	6878      	ldr	r0, [r7, #4]
    9f8c:	4b0d      	ldr	r3, [pc, #52]	; (9fc4 <_usb_d_dev_enable+0x78>)
    9f8e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9f90:	2050      	movs	r0, #80	; 0x50
    9f92:	4b0d      	ldr	r3, [pc, #52]	; (9fc8 <_usb_d_dev_enable+0x7c>)
    9f94:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9f96:	2051      	movs	r0, #81	; 0x51
    9f98:	4b0b      	ldr	r3, [pc, #44]	; (9fc8 <_usb_d_dev_enable+0x7c>)
    9f9a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9f9c:	2052      	movs	r0, #82	; 0x52
    9f9e:	4b0a      	ldr	r3, [pc, #40]	; (9fc8 <_usb_d_dev_enable+0x7c>)
    9fa0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9fa2:	2053      	movs	r0, #83	; 0x53
    9fa4:	4b08      	ldr	r3, [pc, #32]	; (9fc8 <_usb_d_dev_enable+0x7c>)
    9fa6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9fa8:	f240 218d 	movw	r1, #653	; 0x28d
    9fac:	6878      	ldr	r0, [r7, #4]
    9fae:	4b07      	ldr	r3, [pc, #28]	; (9fcc <_usb_d_dev_enable+0x80>)
    9fb0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9fb2:	2300      	movs	r3, #0
}
    9fb4:	4618      	mov	r0, r3
    9fb6:	3708      	adds	r7, #8
    9fb8:	46bd      	mov	sp, r7
    9fba:	bd80      	pop	{r7, pc}
    9fbc:	000087ef 	.word	0x000087ef
    9fc0:	0000889d 	.word	0x0000889d
    9fc4:	00008875 	.word	0x00008875
    9fc8:	00008401 	.word	0x00008401
    9fcc:	00008799 	.word	0x00008799

00009fd0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9fd0:	b580      	push	{r7, lr}
    9fd2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9fd4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9fd8:	4b01      	ldr	r3, [pc, #4]	; (9fe0 <_usb_d_dev_attach+0x10>)
    9fda:	4798      	blx	r3
}
    9fdc:	bf00      	nop
    9fde:	bd80      	pop	{r7, pc}
    9fe0:	000088c1 	.word	0x000088c1

00009fe4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9fe4:	b580      	push	{r7, lr}
    9fe6:	b082      	sub	sp, #8
    9fe8:	af00      	add	r7, sp, #0
    9fea:	4603      	mov	r3, r0
    9fec:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9fee:	79fb      	ldrb	r3, [r7, #7]
    9ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9ff4:	b2db      	uxtb	r3, r3
    9ff6:	4619      	mov	r1, r3
    9ff8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ffc:	4b02      	ldr	r3, [pc, #8]	; (a008 <_usb_d_dev_set_address+0x24>)
    9ffe:	4798      	blx	r3
}
    a000:	bf00      	nop
    a002:	3708      	adds	r7, #8
    a004:	46bd      	mov	sp, r7
    a006:	bd80      	pop	{r7, pc}
    a008:	00008903 	.word	0x00008903

0000a00c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a00c:	b590      	push	{r4, r7, lr}
    a00e:	b085      	sub	sp, #20
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a014:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a018:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a01a:	687b      	ldr	r3, [r7, #4]
    a01c:	7c9b      	ldrb	r3, [r3, #18]
    a01e:	f003 030f 	and.w	r3, r3, #15
    a022:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	68db      	ldr	r3, [r3, #12]
    a028:	461a      	mov	r2, r3
    a02a:	7afb      	ldrb	r3, [r7, #11]
    a02c:	2100      	movs	r1, #0
    a02e:	4618      	mov	r0, r3
    a030:	4b0f      	ldr	r3, [pc, #60]	; (a070 <_usb_d_dev_trans_setup+0x64>)
    a032:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	8a1b      	ldrh	r3, [r3, #16]
    a038:	461a      	mov	r2, r3
    a03a:	7af8      	ldrb	r0, [r7, #11]
    a03c:	2300      	movs	r3, #0
    a03e:	2100      	movs	r1, #0
    a040:	4c0c      	ldr	r4, [pc, #48]	; (a074 <_usb_d_dev_trans_setup+0x68>)
    a042:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a044:	7afb      	ldrb	r3, [r7, #11]
    a046:	22b0      	movs	r2, #176	; 0xb0
    a048:	4619      	mov	r1, r3
    a04a:	68f8      	ldr	r0, [r7, #12]
    a04c:	4b0a      	ldr	r3, [pc, #40]	; (a078 <_usb_d_dev_trans_setup+0x6c>)
    a04e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a050:	7afb      	ldrb	r3, [r7, #11]
    a052:	2200      	movs	r2, #0
    a054:	2100      	movs	r1, #0
    a056:	4618      	mov	r0, r3
    a058:	4b08      	ldr	r3, [pc, #32]	; (a07c <_usb_d_dev_trans_setup+0x70>)
    a05a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a05c:	7afb      	ldrb	r3, [r7, #11]
    a05e:	2210      	movs	r2, #16
    a060:	4619      	mov	r1, r3
    a062:	68f8      	ldr	r0, [r7, #12]
    a064:	4b06      	ldr	r3, [pc, #24]	; (a080 <_usb_d_dev_trans_setup+0x74>)
    a066:	4798      	blx	r3
}
    a068:	bf00      	nop
    a06a:	3714      	adds	r7, #20
    a06c:	46bd      	mov	sp, r7
    a06e:	bd90      	pop	{r4, r7, pc}
    a070:	00008da1 	.word	0x00008da1
    a074:	00008f29 	.word	0x00008f29
    a078:	00008601 	.word	0x00008601
    a07c:	00008ff9 	.word	0x00008ff9
    a080:	00008655 	.word	0x00008655

0000a084 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a084:	b580      	push	{r7, lr}
    a086:	b088      	sub	sp, #32
    a088:	af00      	add	r7, sp, #0
    a08a:	4603      	mov	r3, r0
    a08c:	71fb      	strb	r3, [r7, #7]
    a08e:	460b      	mov	r3, r1
    a090:	71bb      	strb	r3, [r7, #6]
    a092:	4613      	mov	r3, r2
    a094:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a096:	79fb      	ldrb	r3, [r7, #7]
    a098:	f003 030f 	and.w	r3, r3, #15
    a09c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a09e:	79fb      	ldrb	r3, [r7, #7]
    a0a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	bf14      	ite	ne
    a0a8:	2301      	movne	r3, #1
    a0aa:	2300      	moveq	r3, #0
    a0ac:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a0ae:	7fba      	ldrb	r2, [r7, #30]
    a0b0:	7ffb      	ldrb	r3, [r7, #31]
    a0b2:	4611      	mov	r1, r2
    a0b4:	4618      	mov	r0, r3
    a0b6:	4b3e      	ldr	r3, [pc, #248]	; (a1b0 <_usb_d_dev_ep_init+0x12c>)
    a0b8:	4798      	blx	r3
    a0ba:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a0bc:	79bb      	ldrb	r3, [r7, #6]
    a0be:	f003 0303 	and.w	r3, r3, #3
    a0c2:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a0c4:	7ffa      	ldrb	r2, [r7, #31]
    a0c6:	4613      	mov	r3, r2
    a0c8:	005b      	lsls	r3, r3, #1
    a0ca:	4413      	add	r3, r2
    a0cc:	009b      	lsls	r3, r3, #2
    a0ce:	4a39      	ldr	r2, [pc, #228]	; (a1b4 <_usb_d_dev_ep_init+0x130>)
    a0d0:	4413      	add	r3, r2
    a0d2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a0d4:	7ffb      	ldrb	r3, [r7, #31]
    a0d6:	2b04      	cmp	r3, #4
    a0d8:	d902      	bls.n	a0e0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a0da:	f06f 0311 	mvn.w	r3, #17
    a0de:	e063      	b.n	a1a8 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a0e0:	69bb      	ldr	r3, [r7, #24]
    a0e2:	7c9b      	ldrb	r3, [r3, #18]
    a0e4:	2bff      	cmp	r3, #255	; 0xff
    a0e6:	d002      	beq.n	a0ee <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a0e8:	f06f 0313 	mvn.w	r3, #19
    a0ec:	e05c      	b.n	a1a8 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a0ee:	7dfb      	ldrb	r3, [r7, #23]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d11f      	bne.n	a134 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a0f4:	7fbb      	ldrb	r3, [r7, #30]
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	bf14      	ite	ne
    a0fa:	2301      	movne	r3, #1
    a0fc:	2300      	moveq	r3, #0
    a0fe:	b2db      	uxtb	r3, r3
    a100:	f083 0301 	eor.w	r3, r3, #1
    a104:	b2db      	uxtb	r3, r3
    a106:	f003 0301 	and.w	r3, r3, #1
    a10a:	b2da      	uxtb	r2, r3
    a10c:	7ffb      	ldrb	r3, [r7, #31]
    a10e:	4611      	mov	r1, r2
    a110:	4618      	mov	r0, r3
    a112:	4b27      	ldr	r3, [pc, #156]	; (a1b0 <_usb_d_dev_ep_init+0x12c>)
    a114:	4798      	blx	r3
    a116:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a118:	68fb      	ldr	r3, [r7, #12]
    a11a:	7c9b      	ldrb	r3, [r3, #18]
    a11c:	2bff      	cmp	r3, #255	; 0xff
    a11e:	d002      	beq.n	a126 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a120:	f06f 0313 	mvn.w	r3, #19
    a124:	e040      	b.n	a1a8 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a126:	693b      	ldr	r3, [r7, #16]
    a128:	681b      	ldr	r3, [r3, #0]
    a12a:	2b00      	cmp	r3, #0
    a12c:	d102      	bne.n	a134 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a12e:	f06f 0312 	mvn.w	r3, #18
    a132:	e039      	b.n	a1a8 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a134:	7fbb      	ldrb	r3, [r7, #30]
    a136:	2b00      	cmp	r3, #0
    a138:	d007      	beq.n	a14a <_usb_d_dev_ep_init+0xc6>
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	685b      	ldr	r3, [r3, #4]
    a13e:	2b00      	cmp	r3, #0
    a140:	bf14      	ite	ne
    a142:	2301      	movne	r3, #1
    a144:	2300      	moveq	r3, #0
    a146:	b2db      	uxtb	r3, r3
    a148:	e006      	b.n	a158 <_usb_d_dev_ep_init+0xd4>
    a14a:	693b      	ldr	r3, [r7, #16]
    a14c:	681b      	ldr	r3, [r3, #0]
    a14e:	2b00      	cmp	r3, #0
    a150:	bf14      	ite	ne
    a152:	2301      	movne	r3, #1
    a154:	2300      	moveq	r3, #0
    a156:	b2db      	uxtb	r3, r3
    a158:	2b00      	cmp	r3, #0
    a15a:	d00f      	beq.n	a17c <_usb_d_dev_ep_init+0xf8>
    a15c:	7fbb      	ldrb	r3, [r7, #30]
    a15e:	2b00      	cmp	r3, #0
    a160:	d003      	beq.n	a16a <_usb_d_dev_ep_init+0xe6>
    a162:	693b      	ldr	r3, [r7, #16]
    a164:	895b      	ldrh	r3, [r3, #10]
    a166:	461a      	mov	r2, r3
    a168:	e002      	b.n	a170 <_usb_d_dev_ep_init+0xec>
    a16a:	693b      	ldr	r3, [r7, #16]
    a16c:	891b      	ldrh	r3, [r3, #8]
    a16e:	461a      	mov	r2, r3
    a170:	88bb      	ldrh	r3, [r7, #4]
    a172:	429a      	cmp	r2, r3
    a174:	da02      	bge.n	a17c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a176:	f06f 0312 	mvn.w	r3, #18
    a17a:	e015      	b.n	a1a8 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a17c:	7fbb      	ldrb	r3, [r7, #30]
    a17e:	2b00      	cmp	r3, #0
    a180:	d002      	beq.n	a188 <_usb_d_dev_ep_init+0x104>
    a182:	693b      	ldr	r3, [r7, #16]
    a184:	685b      	ldr	r3, [r3, #4]
    a186:	e001      	b.n	a18c <_usb_d_dev_ep_init+0x108>
    a188:	693b      	ldr	r3, [r7, #16]
    a18a:	681b      	ldr	r3, [r3, #0]
    a18c:	69ba      	ldr	r2, [r7, #24]
    a18e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a190:	69bb      	ldr	r3, [r7, #24]
    a192:	88ba      	ldrh	r2, [r7, #4]
    a194:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a196:	7dfb      	ldrb	r3, [r7, #23]
    a198:	3301      	adds	r3, #1
    a19a:	b2da      	uxtb	r2, r3
    a19c:	69bb      	ldr	r3, [r7, #24]
    a19e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a1a0:	69bb      	ldr	r3, [r7, #24]
    a1a2:	79fa      	ldrb	r2, [r7, #7]
    a1a4:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a1a6:	2300      	movs	r3, #0
}
    a1a8:	4618      	mov	r0, r3
    a1aa:	3720      	adds	r7, #32
    a1ac:	46bd      	mov	sp, r7
    a1ae:	bd80      	pop	{r7, pc}
    a1b0:	000090b5 	.word	0x000090b5
    a1b4:	0000eec4 	.word	0x0000eec4

0000a1b8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	b086      	sub	sp, #24
    a1bc:	af00      	add	r7, sp, #0
    a1be:	4603      	mov	r3, r0
    a1c0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a1c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a1c6:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a1c8:	79fb      	ldrb	r3, [r7, #7]
    a1ca:	f003 030f 	and.w	r3, r3, #15
    a1ce:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a1d0:	79fb      	ldrb	r3, [r7, #7]
    a1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	bf14      	ite	ne
    a1da:	2301      	movne	r3, #1
    a1dc:	2300      	moveq	r3, #0
    a1de:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a1e0:	7cba      	ldrb	r2, [r7, #18]
    a1e2:	7cfb      	ldrb	r3, [r7, #19]
    a1e4:	4611      	mov	r1, r2
    a1e6:	4618      	mov	r0, r3
    a1e8:	4b2a      	ldr	r3, [pc, #168]	; (a294 <_usb_d_dev_ep_deinit+0xdc>)
    a1ea:	4798      	blx	r3
    a1ec:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a1ee:	7cfb      	ldrb	r3, [r7, #19]
    a1f0:	2b04      	cmp	r3, #4
    a1f2:	d84a      	bhi.n	a28a <_usb_d_dev_ep_deinit+0xd2>
    a1f4:	68fb      	ldr	r3, [r7, #12]
    a1f6:	7c9b      	ldrb	r3, [r3, #18]
    a1f8:	2bff      	cmp	r3, #255	; 0xff
    a1fa:	d046      	beq.n	a28a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a1fc:	7cbb      	ldrb	r3, [r7, #18]
    a1fe:	2203      	movs	r2, #3
    a200:	4619      	mov	r1, r3
    a202:	68f8      	ldr	r0, [r7, #12]
    a204:	4b24      	ldr	r3, [pc, #144]	; (a298 <_usb_d_dev_ep_deinit+0xe0>)
    a206:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a208:	68fb      	ldr	r3, [r7, #12]
    a20a:	7cdb      	ldrb	r3, [r3, #19]
    a20c:	f003 0307 	and.w	r3, r3, #7
    a210:	b2db      	uxtb	r3, r3
    a212:	2b01      	cmp	r3, #1
    a214:	d107      	bne.n	a226 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a216:	79fb      	ldrb	r3, [r7, #7]
    a218:	697a      	ldr	r2, [r7, #20]
    a21a:	3308      	adds	r3, #8
    a21c:	015b      	lsls	r3, r3, #5
    a21e:	4413      	add	r3, r2
    a220:	2200      	movs	r2, #0
    a222:	701a      	strb	r2, [r3, #0]
    a224:	e02a      	b.n	a27c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a226:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a22a:	2b00      	cmp	r3, #0
    a22c:	da15      	bge.n	a25a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a22e:	79fb      	ldrb	r3, [r7, #7]
    a230:	f003 030f 	and.w	r3, r3, #15
    a234:	79fa      	ldrb	r2, [r7, #7]
    a236:	f002 020f 	and.w	r2, r2, #15
    a23a:	6979      	ldr	r1, [r7, #20]
    a23c:	3208      	adds	r2, #8
    a23e:	0152      	lsls	r2, r2, #5
    a240:	440a      	add	r2, r1
    a242:	7812      	ldrb	r2, [r2, #0]
    a244:	b2d2      	uxtb	r2, r2
    a246:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a24a:	b2d1      	uxtb	r1, r2
    a24c:	697a      	ldr	r2, [r7, #20]
    a24e:	3308      	adds	r3, #8
    a250:	015b      	lsls	r3, r3, #5
    a252:	4413      	add	r3, r2
    a254:	460a      	mov	r2, r1
    a256:	701a      	strb	r2, [r3, #0]
    a258:	e010      	b.n	a27c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a25a:	79fb      	ldrb	r3, [r7, #7]
    a25c:	79fa      	ldrb	r2, [r7, #7]
    a25e:	6979      	ldr	r1, [r7, #20]
    a260:	3208      	adds	r2, #8
    a262:	0152      	lsls	r2, r2, #5
    a264:	440a      	add	r2, r1
    a266:	7812      	ldrb	r2, [r2, #0]
    a268:	b2d2      	uxtb	r2, r2
    a26a:	f022 0207 	bic.w	r2, r2, #7
    a26e:	b2d1      	uxtb	r1, r2
    a270:	697a      	ldr	r2, [r7, #20]
    a272:	3308      	adds	r3, #8
    a274:	015b      	lsls	r3, r3, #5
    a276:	4413      	add	r3, r2
    a278:	460a      	mov	r2, r1
    a27a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	2200      	movs	r2, #0
    a280:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a282:	68fb      	ldr	r3, [r7, #12]
    a284:	22ff      	movs	r2, #255	; 0xff
    a286:	749a      	strb	r2, [r3, #18]
    a288:	e000      	b.n	a28c <_usb_d_dev_ep_deinit+0xd4>
		return;
    a28a:	bf00      	nop
}
    a28c:	3718      	adds	r7, #24
    a28e:	46bd      	mov	sp, r7
    a290:	bd80      	pop	{r7, pc}
    a292:	bf00      	nop
    a294:	000090b5 	.word	0x000090b5
    a298:	0000a6ed 	.word	0x0000a6ed

0000a29c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a29c:	b5b0      	push	{r4, r5, r7, lr}
    a29e:	b088      	sub	sp, #32
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	4603      	mov	r3, r0
    a2a4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a2a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2aa:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a2ac:	79fb      	ldrb	r3, [r7, #7]
    a2ae:	f003 030f 	and.w	r3, r3, #15
    a2b2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a2b4:	79fb      	ldrb	r3, [r7, #7]
    a2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	bf14      	ite	ne
    a2be:	2301      	movne	r3, #1
    a2c0:	2300      	moveq	r3, #0
    a2c2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a2c4:	7eba      	ldrb	r2, [r7, #26]
    a2c6:	7efb      	ldrb	r3, [r7, #27]
    a2c8:	4611      	mov	r1, r2
    a2ca:	4618      	mov	r0, r3
    a2cc:	4b70      	ldr	r3, [pc, #448]	; (a490 <_usb_d_dev_ep_enable+0x1f4>)
    a2ce:	4798      	blx	r3
    a2d0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a2d2:	7efb      	ldrb	r3, [r7, #27]
    a2d4:	4619      	mov	r1, r3
    a2d6:	69f8      	ldr	r0, [r7, #28]
    a2d8:	4b6e      	ldr	r3, [pc, #440]	; (a494 <_usb_d_dev_ep_enable+0x1f8>)
    a2da:	4798      	blx	r3
    a2dc:	4603      	mov	r3, r0
    a2de:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a2e0:	7efb      	ldrb	r3, [r7, #27]
    a2e2:	2b04      	cmp	r3, #4
    a2e4:	d803      	bhi.n	a2ee <_usb_d_dev_ep_enable+0x52>
    a2e6:	697b      	ldr	r3, [r7, #20]
    a2e8:	7c9b      	ldrb	r3, [r3, #18]
    a2ea:	2bff      	cmp	r3, #255	; 0xff
    a2ec:	d102      	bne.n	a2f4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a2ee:	f06f 0311 	mvn.w	r3, #17
    a2f2:	e0c8      	b.n	a486 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a2f4:	7efb      	ldrb	r3, [r7, #27]
    a2f6:	015b      	lsls	r3, r3, #5
    a2f8:	4a67      	ldr	r2, [pc, #412]	; (a498 <_usb_d_dev_ep_enable+0x1fc>)
    a2fa:	4413      	add	r3, r2
    a2fc:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a2fe:	697b      	ldr	r3, [r7, #20]
    a300:	7cdb      	ldrb	r3, [r3, #19]
    a302:	f003 0307 	and.w	r3, r3, #7
    a306:	b2db      	uxtb	r3, r3
    a308:	2b01      	cmp	r3, #1
    a30a:	d14b      	bne.n	a3a4 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a30c:	7cfb      	ldrb	r3, [r7, #19]
    a30e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a312:	2b00      	cmp	r3, #0
    a314:	d002      	beq.n	a31c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a316:	f06f 0313 	mvn.w	r3, #19
    a31a:	e0b4      	b.n	a486 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a31c:	7efb      	ldrb	r3, [r7, #27]
    a31e:	2211      	movs	r2, #17
    a320:	4619      	mov	r1, r3
    a322:	69f8      	ldr	r0, [r7, #28]
    a324:	4b5d      	ldr	r3, [pc, #372]	; (a49c <_usb_d_dev_ep_enable+0x200>)
    a326:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a328:	697b      	ldr	r3, [r7, #20]
    a32a:	8a1b      	ldrh	r3, [r3, #16]
    a32c:	039b      	lsls	r3, r3, #14
    a32e:	4c5c      	ldr	r4, [pc, #368]	; (a4a0 <_usb_d_dev_ep_enable+0x204>)
    a330:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a332:	697b      	ldr	r3, [r7, #20]
    a334:	8a1b      	ldrh	r3, [r3, #16]
    a336:	4618      	mov	r0, r3
    a338:	4b5a      	ldr	r3, [pc, #360]	; (a4a4 <_usb_d_dev_ep_enable+0x208>)
    a33a:	4798      	blx	r3
    a33c:	4603      	mov	r3, r0
    a33e:	071b      	lsls	r3, r3, #28
    a340:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a344:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a348:	68fb      	ldr	r3, [r7, #12]
    a34a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a34c:	68fb      	ldr	r3, [r7, #12]
    a34e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a352:	697b      	ldr	r3, [r7, #20]
    a354:	8a1b      	ldrh	r3, [r3, #16]
    a356:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a35a:	697b      	ldr	r3, [r7, #20]
    a35c:	8a1b      	ldrh	r3, [r3, #16]
    a35e:	4618      	mov	r0, r3
    a360:	4b50      	ldr	r3, [pc, #320]	; (a4a4 <_usb_d_dev_ep_enable+0x208>)
    a362:	4798      	blx	r3
    a364:	4603      	mov	r3, r0
    a366:	071b      	lsls	r3, r3, #28
    a368:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a36c:	432b      	orrs	r3, r5
    a36e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a370:	7efb      	ldrb	r3, [r7, #27]
    a372:	2200      	movs	r2, #0
    a374:	2100      	movs	r1, #0
    a376:	4618      	mov	r0, r3
    a378:	4b4b      	ldr	r3, [pc, #300]	; (a4a8 <_usb_d_dev_ep_enable+0x20c>)
    a37a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a37c:	7efb      	ldrb	r3, [r7, #27]
    a37e:	2200      	movs	r2, #0
    a380:	2101      	movs	r1, #1
    a382:	4618      	mov	r0, r3
    a384:	4b49      	ldr	r3, [pc, #292]	; (a4ac <_usb_d_dev_ep_enable+0x210>)
    a386:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a388:	7efb      	ldrb	r3, [r7, #27]
    a38a:	2100      	movs	r1, #0
    a38c:	4618      	mov	r0, r3
    a38e:	4b48      	ldr	r3, [pc, #288]	; (a4b0 <_usb_d_dev_ep_enable+0x214>)
    a390:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a392:	7efb      	ldrb	r3, [r7, #27]
    a394:	2101      	movs	r1, #1
    a396:	4618      	mov	r0, r3
    a398:	4b45      	ldr	r3, [pc, #276]	; (a4b0 <_usb_d_dev_ep_enable+0x214>)
    a39a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a39c:	6978      	ldr	r0, [r7, #20]
    a39e:	4b45      	ldr	r3, [pc, #276]	; (a4b4 <_usb_d_dev_ep_enable+0x218>)
    a3a0:	4798      	blx	r3
    a3a2:	e06f      	b.n	a484 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a3a4:	7ebb      	ldrb	r3, [r7, #26]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d038      	beq.n	a41c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a3aa:	7cfb      	ldrb	r3, [r7, #19]
    a3ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d002      	beq.n	a3ba <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a3b4:	f06f 0313 	mvn.w	r3, #19
    a3b8:	e065      	b.n	a486 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a3ba:	697b      	ldr	r3, [r7, #20]
    a3bc:	7cdb      	ldrb	r3, [r3, #19]
    a3be:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a3c2:	b2db      	uxtb	r3, r3
    a3c4:	011b      	lsls	r3, r3, #4
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	7cfb      	ldrb	r3, [r7, #19]
    a3d0:	4313      	orrs	r3, r2
    a3d2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a3d4:	7cfa      	ldrb	r2, [r7, #19]
    a3d6:	7efb      	ldrb	r3, [r7, #27]
    a3d8:	4619      	mov	r1, r3
    a3da:	69f8      	ldr	r0, [r7, #28]
    a3dc:	4b2f      	ldr	r3, [pc, #188]	; (a49c <_usb_d_dev_ep_enable+0x200>)
    a3de:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a3e0:	68fb      	ldr	r3, [r7, #12]
    a3e2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a3e6:	697b      	ldr	r3, [r7, #20]
    a3e8:	8a1b      	ldrh	r3, [r3, #16]
    a3ea:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a3ee:	697b      	ldr	r3, [r7, #20]
    a3f0:	8a1b      	ldrh	r3, [r3, #16]
    a3f2:	4618      	mov	r0, r3
    a3f4:	4b2b      	ldr	r3, [pc, #172]	; (a4a4 <_usb_d_dev_ep_enable+0x208>)
    a3f6:	4798      	blx	r3
    a3f8:	4603      	mov	r3, r0
    a3fa:	071b      	lsls	r3, r3, #28
    a3fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a400:	432b      	orrs	r3, r5
    a402:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a404:	7efb      	ldrb	r3, [r7, #27]
    a406:	2200      	movs	r2, #0
    a408:	2101      	movs	r1, #1
    a40a:	4618      	mov	r0, r3
    a40c:	4b27      	ldr	r3, [pc, #156]	; (a4ac <_usb_d_dev_ep_enable+0x210>)
    a40e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a410:	7efb      	ldrb	r3, [r7, #27]
    a412:	2101      	movs	r1, #1
    a414:	4618      	mov	r0, r3
    a416:	4b26      	ldr	r3, [pc, #152]	; (a4b0 <_usb_d_dev_ep_enable+0x214>)
    a418:	4798      	blx	r3
    a41a:	e033      	b.n	a484 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a41c:	7cfb      	ldrb	r3, [r7, #19]
    a41e:	f003 0307 	and.w	r3, r3, #7
    a422:	2b00      	cmp	r3, #0
    a424:	d002      	beq.n	a42c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a426:	f06f 0313 	mvn.w	r3, #19
    a42a:	e02c      	b.n	a486 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a42c:	697b      	ldr	r3, [r7, #20]
    a42e:	7cdb      	ldrb	r3, [r3, #19]
    a430:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a434:	b2db      	uxtb	r3, r3
    a436:	461a      	mov	r2, r3
    a438:	7cfb      	ldrb	r3, [r7, #19]
    a43a:	4313      	orrs	r3, r2
    a43c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a43e:	7cfa      	ldrb	r2, [r7, #19]
    a440:	7efb      	ldrb	r3, [r7, #27]
    a442:	4619      	mov	r1, r3
    a444:	69f8      	ldr	r0, [r7, #28]
    a446:	4b15      	ldr	r3, [pc, #84]	; (a49c <_usb_d_dev_ep_enable+0x200>)
    a448:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a44a:	697b      	ldr	r3, [r7, #20]
    a44c:	8a1b      	ldrh	r3, [r3, #16]
    a44e:	039b      	lsls	r3, r3, #14
    a450:	4c13      	ldr	r4, [pc, #76]	; (a4a0 <_usb_d_dev_ep_enable+0x204>)
    a452:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a454:	697b      	ldr	r3, [r7, #20]
    a456:	8a1b      	ldrh	r3, [r3, #16]
    a458:	4618      	mov	r0, r3
    a45a:	4b12      	ldr	r3, [pc, #72]	; (a4a4 <_usb_d_dev_ep_enable+0x208>)
    a45c:	4798      	blx	r3
    a45e:	4603      	mov	r3, r0
    a460:	071b      	lsls	r3, r3, #28
    a462:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a466:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a46a:	68fb      	ldr	r3, [r7, #12]
    a46c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a46e:	7efb      	ldrb	r3, [r7, #27]
    a470:	2200      	movs	r2, #0
    a472:	2100      	movs	r1, #0
    a474:	4618      	mov	r0, r3
    a476:	4b0c      	ldr	r3, [pc, #48]	; (a4a8 <_usb_d_dev_ep_enable+0x20c>)
    a478:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a47a:	7efb      	ldrb	r3, [r7, #27]
    a47c:	2100      	movs	r1, #0
    a47e:	4618      	mov	r0, r3
    a480:	4b0b      	ldr	r3, [pc, #44]	; (a4b0 <_usb_d_dev_ep_enable+0x214>)
    a482:	4798      	blx	r3
	}

	return USB_OK;
    a484:	2300      	movs	r3, #0
}
    a486:	4618      	mov	r0, r3
    a488:	3720      	adds	r7, #32
    a48a:	46bd      	mov	sp, r7
    a48c:	bdb0      	pop	{r4, r5, r7, pc}
    a48e:	bf00      	nop
    a490:	000090b5 	.word	0x000090b5
    a494:	0000873b 	.word	0x0000873b
    a498:	20000b34 	.word	0x20000b34
    a49c:	00008711 	.word	0x00008711
    a4a0:	0fffc000 	.word	0x0fffc000
    a4a4:	00009051 	.word	0x00009051
    a4a8:	00008ff9 	.word	0x00008ff9
    a4ac:	00008fa1 	.word	0x00008fa1
    a4b0:	00008f69 	.word	0x00008f69
    a4b4:	0000a00d 	.word	0x0000a00d

0000a4b8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b084      	sub	sp, #16
    a4bc:	af00      	add	r7, sp, #0
    a4be:	6078      	str	r0, [r7, #4]
    a4c0:	460b      	mov	r3, r1
    a4c2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4c4:	687b      	ldr	r3, [r7, #4]
    a4c6:	7c9b      	ldrb	r3, [r3, #18]
    a4c8:	f003 030f 	and.w	r3, r3, #15
    a4cc:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a4ce:	78fa      	ldrb	r2, [r7, #3]
    a4d0:	7bfb      	ldrb	r3, [r7, #15]
    a4d2:	4611      	mov	r1, r2
    a4d4:	4618      	mov	r0, r3
    a4d6:	4b03      	ldr	r3, [pc, #12]	; (a4e4 <_usb_d_dev_ep_stall_get+0x2c>)
    a4d8:	4798      	blx	r3
    a4da:	4603      	mov	r3, r0
}
    a4dc:	4618      	mov	r0, r3
    a4de:	3710      	adds	r7, #16
    a4e0:	46bd      	mov	sp, r7
    a4e2:	bd80      	pop	{r7, pc}
    a4e4:	00008ba9 	.word	0x00008ba9

0000a4e8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a4e8:	b580      	push	{r7, lr}
    a4ea:	b084      	sub	sp, #16
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	6078      	str	r0, [r7, #4]
    a4f0:	460b      	mov	r3, r1
    a4f2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	7c9b      	ldrb	r3, [r3, #18]
    a4f8:	f003 030f 	and.w	r3, r3, #15
    a4fc:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a4fe:	78f9      	ldrb	r1, [r7, #3]
    a500:	7bfb      	ldrb	r3, [r7, #15]
    a502:	2201      	movs	r2, #1
    a504:	4618      	mov	r0, r3
    a506:	4b0a      	ldr	r3, [pc, #40]	; (a530 <_usb_d_dev_ep_stall_set+0x48>)
    a508:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a50a:	78fb      	ldrb	r3, [r7, #3]
    a50c:	2220      	movs	r2, #32
    a50e:	409a      	lsls	r2, r3
    a510:	7bfb      	ldrb	r3, [r7, #15]
    a512:	4611      	mov	r1, r2
    a514:	4618      	mov	r0, r3
    a516:	4b07      	ldr	r3, [pc, #28]	; (a534 <_usb_d_dev_ep_stall_set+0x4c>)
    a518:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a51a:	687a      	ldr	r2, [r7, #4]
    a51c:	7cd3      	ldrb	r3, [r2, #19]
    a51e:	f043 0308 	orr.w	r3, r3, #8
    a522:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a524:	2300      	movs	r3, #0
}
    a526:	4618      	mov	r0, r3
    a528:	3710      	adds	r7, #16
    a52a:	46bd      	mov	sp, r7
    a52c:	bd80      	pop	{r7, pc}
    a52e:	bf00      	nop
    a530:	00008b51 	.word	0x00008b51
    a534:	00008ad1 	.word	0x00008ad1

0000a538 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a538:	b580      	push	{r7, lr}
    a53a:	b084      	sub	sp, #16
    a53c:	af00      	add	r7, sp, #0
    a53e:	6078      	str	r0, [r7, #4]
    a540:	460b      	mov	r3, r1
    a542:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a544:	687b      	ldr	r3, [r7, #4]
    a546:	7c9b      	ldrb	r3, [r3, #18]
    a548:	f003 030f 	and.w	r3, r3, #15
    a54c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a54e:	78fa      	ldrb	r2, [r7, #3]
    a550:	7bfb      	ldrb	r3, [r7, #15]
    a552:	4611      	mov	r1, r2
    a554:	4618      	mov	r0, r3
    a556:	4b28      	ldr	r3, [pc, #160]	; (a5f8 <_usb_d_dev_ep_stall_clr+0xc0>)
    a558:	4798      	blx	r3
    a55a:	4603      	mov	r3, r0
    a55c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a55e:	7bbb      	ldrb	r3, [r7, #14]
    a560:	f083 0301 	eor.w	r3, r3, #1
    a564:	b2db      	uxtb	r3, r3
    a566:	2b00      	cmp	r3, #0
    a568:	d001      	beq.n	a56e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a56a:	2300      	movs	r3, #0
    a56c:	e040      	b.n	a5f0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a56e:	78f9      	ldrb	r1, [r7, #3]
    a570:	7bfb      	ldrb	r3, [r7, #15]
    a572:	2200      	movs	r2, #0
    a574:	4618      	mov	r0, r3
    a576:	4b21      	ldr	r3, [pc, #132]	; (a5fc <_usb_d_dev_ep_stall_clr+0xc4>)
    a578:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a57a:	78fb      	ldrb	r3, [r7, #3]
    a57c:	2220      	movs	r2, #32
    a57e:	409a      	lsls	r2, r3
    a580:	7bfb      	ldrb	r3, [r7, #15]
    a582:	4611      	mov	r1, r2
    a584:	4618      	mov	r0, r3
    a586:	4b1e      	ldr	r3, [pc, #120]	; (a600 <_usb_d_dev_ep_stall_clr+0xc8>)
    a588:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a58a:	78fa      	ldrb	r2, [r7, #3]
    a58c:	7bfb      	ldrb	r3, [r7, #15]
    a58e:	4611      	mov	r1, r2
    a590:	4618      	mov	r0, r3
    a592:	4b1c      	ldr	r3, [pc, #112]	; (a604 <_usb_d_dev_ep_stall_clr+0xcc>)
    a594:	4798      	blx	r3
    a596:	4603      	mov	r3, r0
    a598:	2b00      	cmp	r3, #0
    a59a:	d00b      	beq.n	a5b4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a59c:	78fa      	ldrb	r2, [r7, #3]
    a59e:	7bfb      	ldrb	r3, [r7, #15]
    a5a0:	4611      	mov	r1, r2
    a5a2:	4618      	mov	r0, r3
    a5a4:	4b18      	ldr	r3, [pc, #96]	; (a608 <_usb_d_dev_ep_stall_clr+0xd0>)
    a5a6:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a5a8:	78f9      	ldrb	r1, [r7, #3]
    a5aa:	7bfb      	ldrb	r3, [r7, #15]
    a5ac:	2200      	movs	r2, #0
    a5ae:	4618      	mov	r0, r3
    a5b0:	4b16      	ldr	r3, [pc, #88]	; (a60c <_usb_d_dev_ep_stall_clr+0xd4>)
    a5b2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a5b4:	687b      	ldr	r3, [r7, #4]
    a5b6:	7cdb      	ldrb	r3, [r3, #19]
    a5b8:	f003 0307 	and.w	r3, r3, #7
    a5bc:	b2db      	uxtb	r3, r3
    a5be:	2b01      	cmp	r3, #1
    a5c0:	d110      	bne.n	a5e4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a5c2:	7bfb      	ldrb	r3, [r7, #15]
    a5c4:	4619      	mov	r1, r3
    a5c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5ca:	4b11      	ldr	r3, [pc, #68]	; (a610 <_usb_d_dev_ep_stall_clr+0xd8>)
    a5cc:	4798      	blx	r3
    a5ce:	4603      	mov	r3, r0
    a5d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d10a      	bne.n	a5ee <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a5d8:	687a      	ldr	r2, [r7, #4]
    a5da:	7cd3      	ldrb	r3, [r2, #19]
    a5dc:	f36f 03c3 	bfc	r3, #3, #1
    a5e0:	74d3      	strb	r3, [r2, #19]
    a5e2:	e004      	b.n	a5ee <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a5e4:	687a      	ldr	r2, [r7, #4]
    a5e6:	7cd3      	ldrb	r3, [r2, #19]
    a5e8:	f36f 03c3 	bfc	r3, #3, #1
    a5ec:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a5ee:	2300      	movs	r3, #0
}
    a5f0:	4618      	mov	r0, r3
    a5f2:	3710      	adds	r7, #16
    a5f4:	46bd      	mov	sp, r7
    a5f6:	bd80      	pop	{r7, pc}
    a5f8:	00008ba9 	.word	0x00008ba9
    a5fc:	00008b51 	.word	0x00008b51
    a600:	00008af9 	.word	0x00008af9
    a604:	00008bed 	.word	0x00008bed
    a608:	00008c31 	.word	0x00008c31
    a60c:	00008d1d 	.word	0x00008d1d
    a610:	000085d9 	.word	0x000085d9

0000a614 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a614:	b580      	push	{r7, lr}
    a616:	b086      	sub	sp, #24
    a618:	af00      	add	r7, sp, #0
    a61a:	4603      	mov	r3, r0
    a61c:	460a      	mov	r2, r1
    a61e:	71fb      	strb	r3, [r7, #7]
    a620:	4613      	mov	r3, r2
    a622:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a624:	79fb      	ldrb	r3, [r7, #7]
    a626:	f003 030f 	and.w	r3, r3, #15
    a62a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a62c:	79fb      	ldrb	r3, [r7, #7]
    a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a632:	2b00      	cmp	r3, #0
    a634:	bf14      	ite	ne
    a636:	2301      	movne	r3, #1
    a638:	2300      	moveq	r3, #0
    a63a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a63c:	7cba      	ldrb	r2, [r7, #18]
    a63e:	7cfb      	ldrb	r3, [r7, #19]
    a640:	4611      	mov	r1, r2
    a642:	4618      	mov	r0, r3
    a644:	4b13      	ldr	r3, [pc, #76]	; (a694 <_usb_d_dev_ep_stall+0x80>)
    a646:	4798      	blx	r3
    a648:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a64a:	7cfb      	ldrb	r3, [r7, #19]
    a64c:	2b04      	cmp	r3, #4
    a64e:	d902      	bls.n	a656 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a650:	f06f 0311 	mvn.w	r3, #17
    a654:	e01a      	b.n	a68c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a656:	79bb      	ldrb	r3, [r7, #6]
    a658:	2b01      	cmp	r3, #1
    a65a:	d106      	bne.n	a66a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a65c:	7cbb      	ldrb	r3, [r7, #18]
    a65e:	4619      	mov	r1, r3
    a660:	68f8      	ldr	r0, [r7, #12]
    a662:	4b0d      	ldr	r3, [pc, #52]	; (a698 <_usb_d_dev_ep_stall+0x84>)
    a664:	4798      	blx	r3
    a666:	6178      	str	r0, [r7, #20]
    a668:	e00f      	b.n	a68a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a66a:	79bb      	ldrb	r3, [r7, #6]
    a66c:	2b00      	cmp	r3, #0
    a66e:	d106      	bne.n	a67e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a670:	7cbb      	ldrb	r3, [r7, #18]
    a672:	4619      	mov	r1, r3
    a674:	68f8      	ldr	r0, [r7, #12]
    a676:	4b09      	ldr	r3, [pc, #36]	; (a69c <_usb_d_dev_ep_stall+0x88>)
    a678:	4798      	blx	r3
    a67a:	6178      	str	r0, [r7, #20]
    a67c:	e005      	b.n	a68a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a67e:	7cbb      	ldrb	r3, [r7, #18]
    a680:	4619      	mov	r1, r3
    a682:	68f8      	ldr	r0, [r7, #12]
    a684:	4b06      	ldr	r3, [pc, #24]	; (a6a0 <_usb_d_dev_ep_stall+0x8c>)
    a686:	4798      	blx	r3
    a688:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a68a:	697b      	ldr	r3, [r7, #20]
}
    a68c:	4618      	mov	r0, r3
    a68e:	3718      	adds	r7, #24
    a690:	46bd      	mov	sp, r7
    a692:	bd80      	pop	{r7, pc}
    a694:	000090b5 	.word	0x000090b5
    a698:	0000a4e9 	.word	0x0000a4e9
    a69c:	0000a539 	.word	0x0000a539
    a6a0:	0000a4b9 	.word	0x0000a4b9

0000a6a4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a6a4:	b580      	push	{r7, lr}
    a6a6:	b082      	sub	sp, #8
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	6078      	str	r0, [r7, #4]
    a6ac:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a6ae:	687b      	ldr	r3, [r7, #4]
    a6b0:	7c9b      	ldrb	r3, [r3, #18]
    a6b2:	2bff      	cmp	r3, #255	; 0xff
    a6b4:	d014      	beq.n	a6e0 <_usb_d_dev_trans_done+0x3c>
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	7cdb      	ldrb	r3, [r3, #19]
    a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6be:	b2db      	uxtb	r3, r3
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d00d      	beq.n	a6e0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a6c4:	687a      	ldr	r2, [r7, #4]
    a6c6:	7cd3      	ldrb	r3, [r2, #19]
    a6c8:	f36f 1386 	bfc	r3, #6, #1
    a6cc:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a6ce:	4b06      	ldr	r3, [pc, #24]	; (a6e8 <_usb_d_dev_trans_done+0x44>)
    a6d0:	691b      	ldr	r3, [r3, #16]
    a6d2:	687a      	ldr	r2, [r7, #4]
    a6d4:	7c90      	ldrb	r0, [r2, #18]
    a6d6:	687a      	ldr	r2, [r7, #4]
    a6d8:	6892      	ldr	r2, [r2, #8]
    a6da:	6839      	ldr	r1, [r7, #0]
    a6dc:	4798      	blx	r3
    a6de:	e000      	b.n	a6e2 <_usb_d_dev_trans_done+0x3e>
		return;
    a6e0:	bf00      	nop
}
    a6e2:	3708      	adds	r7, #8
    a6e4:	46bd      	mov	sp, r7
    a6e6:	bd80      	pop	{r7, pc}
    a6e8:	20000a6c 	.word	0x20000a6c

0000a6ec <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a6ec:	b580      	push	{r7, lr}
    a6ee:	b086      	sub	sp, #24
    a6f0:	af00      	add	r7, sp, #0
    a6f2:	60f8      	str	r0, [r7, #12]
    a6f4:	460b      	mov	r3, r1
    a6f6:	607a      	str	r2, [r7, #4]
    a6f8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a6fa:	68fb      	ldr	r3, [r7, #12]
    a6fc:	7c9b      	ldrb	r3, [r3, #18]
    a6fe:	f003 030f 	and.w	r3, r3, #15
    a702:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a704:	4b1f      	ldr	r3, [pc, #124]	; (a784 <_usb_d_dev_trans_stop+0x98>)
    a706:	881b      	ldrh	r3, [r3, #0]
    a708:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a70a:	68fb      	ldr	r3, [r7, #12]
    a70c:	7c9b      	ldrb	r3, [r3, #18]
    a70e:	2bff      	cmp	r3, #255	; 0xff
    a710:	d033      	beq.n	a77a <_usb_d_dev_trans_stop+0x8e>
    a712:	68fb      	ldr	r3, [r7, #12]
    a714:	7cdb      	ldrb	r3, [r3, #19]
    a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a71a:	b2db      	uxtb	r3, r3
    a71c:	2b00      	cmp	r3, #0
    a71e:	d02c      	beq.n	a77a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a720:	7afb      	ldrb	r3, [r7, #11]
    a722:	2b00      	cmp	r3, #0
    a724:	d006      	beq.n	a734 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a726:	7dfb      	ldrb	r3, [r7, #23]
    a728:	2200      	movs	r2, #0
    a72a:	2101      	movs	r1, #1
    a72c:	4618      	mov	r0, r3
    a72e:	4b16      	ldr	r3, [pc, #88]	; (a788 <_usb_d_dev_trans_stop+0x9c>)
    a730:	4798      	blx	r3
    a732:	e005      	b.n	a740 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a734:	7dfb      	ldrb	r3, [r7, #23]
    a736:	2200      	movs	r2, #0
    a738:	2100      	movs	r1, #0
    a73a:	4618      	mov	r0, r3
    a73c:	4b13      	ldr	r3, [pc, #76]	; (a78c <_usb_d_dev_trans_stop+0xa0>)
    a73e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a740:	7afb      	ldrb	r3, [r7, #11]
    a742:	f107 0218 	add.w	r2, r7, #24
    a746:	4413      	add	r3, r2
    a748:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a74c:	461a      	mov	r2, r3
    a74e:	7dfb      	ldrb	r3, [r7, #23]
    a750:	4611      	mov	r1, r2
    a752:	4618      	mov	r0, r3
    a754:	4b0e      	ldr	r3, [pc, #56]	; (a790 <_usb_d_dev_trans_stop+0xa4>)
    a756:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a758:	7afb      	ldrb	r3, [r7, #11]
    a75a:	f107 0218 	add.w	r2, r7, #24
    a75e:	4413      	add	r3, r2
    a760:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a764:	461a      	mov	r2, r3
    a766:	7dfb      	ldrb	r3, [r7, #23]
    a768:	4611      	mov	r1, r2
    a76a:	4618      	mov	r0, r3
    a76c:	4b09      	ldr	r3, [pc, #36]	; (a794 <_usb_d_dev_trans_stop+0xa8>)
    a76e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a770:	6879      	ldr	r1, [r7, #4]
    a772:	68f8      	ldr	r0, [r7, #12]
    a774:	4b08      	ldr	r3, [pc, #32]	; (a798 <_usb_d_dev_trans_stop+0xac>)
    a776:	4798      	blx	r3
    a778:	e000      	b.n	a77c <_usb_d_dev_trans_stop+0x90>
		return;
    a77a:	bf00      	nop
}
    a77c:	3718      	adds	r7, #24
    a77e:	46bd      	mov	sp, r7
    a780:	bd80      	pop	{r7, pc}
    a782:	bf00      	nop
    a784:	0000ef04 	.word	0x0000ef04
    a788:	00008fa1 	.word	0x00008fa1
    a78c:	00008ff9 	.word	0x00008ff9
    a790:	00008aa9 	.word	0x00008aa9
    a794:	00008af9 	.word	0x00008af9
    a798:	0000a6a5 	.word	0x0000a6a5

0000a79c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a79c:	b580      	push	{r7, lr}
    a79e:	b086      	sub	sp, #24
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	4603      	mov	r3, r0
    a7a4:	6039      	str	r1, [r7, #0]
    a7a6:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a7a8:	79fb      	ldrb	r3, [r7, #7]
    a7aa:	f003 030f 	and.w	r3, r3, #15
    a7ae:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a7b0:	7dfb      	ldrb	r3, [r7, #23]
    a7b2:	015b      	lsls	r3, r3, #5
    a7b4:	4a1e      	ldr	r2, [pc, #120]	; (a830 <_usb_d_dev_ep_read_req+0x94>)
    a7b6:	4413      	add	r3, r2
    a7b8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a7ba:	693b      	ldr	r3, [r7, #16]
    a7bc:	681b      	ldr	r3, [r3, #0]
    a7be:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a7c0:	693b      	ldr	r3, [r7, #16]
    a7c2:	685b      	ldr	r3, [r3, #4]
    a7c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a7c8:	b29b      	uxth	r3, r3
    a7ca:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a7cc:	7dfb      	ldrb	r3, [r7, #23]
    a7ce:	2b04      	cmp	r3, #4
    a7d0:	d802      	bhi.n	a7d8 <_usb_d_dev_ep_read_req+0x3c>
    a7d2:	683b      	ldr	r3, [r7, #0]
    a7d4:	2b00      	cmp	r3, #0
    a7d6:	d102      	bne.n	a7de <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a7d8:	f06f 0311 	mvn.w	r3, #17
    a7dc:	e023      	b.n	a826 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a7de:	7dfb      	ldrb	r3, [r7, #23]
    a7e0:	4618      	mov	r0, r3
    a7e2:	4b14      	ldr	r3, [pc, #80]	; (a834 <_usb_d_dev_ep_read_req+0x98>)
    a7e4:	4798      	blx	r3
    a7e6:	4603      	mov	r3, r0
    a7e8:	f083 0301 	eor.w	r3, r3, #1
    a7ec:	b2db      	uxtb	r3, r3
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d002      	beq.n	a7f8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a7f2:	f06f 0312 	mvn.w	r3, #18
    a7f6:	e016      	b.n	a826 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a7f8:	7dfb      	ldrb	r3, [r7, #23]
    a7fa:	4618      	mov	r0, r3
    a7fc:	4b0e      	ldr	r3, [pc, #56]	; (a838 <_usb_d_dev_ep_read_req+0x9c>)
    a7fe:	4798      	blx	r3
    a800:	4603      	mov	r3, r0
    a802:	f083 0301 	eor.w	r3, r3, #1
    a806:	b2db      	uxtb	r3, r3
    a808:	2b00      	cmp	r3, #0
    a80a:	d001      	beq.n	a810 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a80c:	2300      	movs	r3, #0
    a80e:	e00a      	b.n	a826 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a810:	68fb      	ldr	r3, [r7, #12]
    a812:	2208      	movs	r2, #8
    a814:	4619      	mov	r1, r3
    a816:	6838      	ldr	r0, [r7, #0]
    a818:	4b08      	ldr	r3, [pc, #32]	; (a83c <_usb_d_dev_ep_read_req+0xa0>)
    a81a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a81c:	7dfb      	ldrb	r3, [r7, #23]
    a81e:	4618      	mov	r0, r3
    a820:	4b07      	ldr	r3, [pc, #28]	; (a840 <_usb_d_dev_ep_read_req+0xa4>)
    a822:	4798      	blx	r3

	return bytes;
    a824:	897b      	ldrh	r3, [r7, #10]
}
    a826:	4618      	mov	r0, r3
    a828:	3718      	adds	r7, #24
    a82a:	46bd      	mov	sp, r7
    a82c:	bd80      	pop	{r7, pc}
    a82e:	bf00      	nop
    a830:	20000b34 	.word	0x20000b34
    a834:	00008b21 	.word	0x00008b21
    a838:	00008ccd 	.word	0x00008ccd
    a83c:	0000e735 	.word	0x0000e735
    a840:	00008cfd 	.word	0x00008cfd

0000a844 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a844:	b580      	push	{r7, lr}
    a846:	b086      	sub	sp, #24
    a848:	af00      	add	r7, sp, #0
    a84a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	7a1b      	ldrb	r3, [r3, #8]
    a850:	f003 030f 	and.w	r3, r3, #15
    a854:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a856:	687b      	ldr	r3, [r7, #4]
    a858:	7a1b      	ldrb	r3, [r3, #8]
    a85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a85e:	2b00      	cmp	r3, #0
    a860:	bf14      	ite	ne
    a862:	2301      	movne	r3, #1
    a864:	2300      	moveq	r3, #0
    a866:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a868:	7d7a      	ldrb	r2, [r7, #21]
    a86a:	7dbb      	ldrb	r3, [r7, #22]
    a86c:	4611      	mov	r1, r2
    a86e:	4618      	mov	r0, r3
    a870:	4b5f      	ldr	r3, [pc, #380]	; (a9f0 <_usb_d_dev_ep_trans+0x1ac>)
    a872:	4798      	blx	r3
    a874:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a876:	693b      	ldr	r3, [r7, #16]
    a878:	8a1b      	ldrh	r3, [r3, #16]
    a87a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a87e:	4293      	cmp	r3, r2
    a880:	d004      	beq.n	a88c <_usb_d_dev_ep_trans+0x48>
    a882:	693b      	ldr	r3, [r7, #16]
    a884:	8a1b      	ldrh	r3, [r3, #16]
    a886:	3b01      	subs	r3, #1
    a888:	b29b      	uxth	r3, r3
    a88a:	e001      	b.n	a890 <_usb_d_dev_ep_trans+0x4c>
    a88c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a890:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a892:	687b      	ldr	r3, [r7, #4]
    a894:	685a      	ldr	r2, [r3, #4]
    a896:	89fb      	ldrh	r3, [r7, #14]
    a898:	4013      	ands	r3, r2
    a89a:	2b00      	cmp	r3, #0
    a89c:	bf14      	ite	ne
    a89e:	2301      	movne	r3, #1
    a8a0:	2300      	moveq	r3, #0
    a8a2:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a8a4:	2300      	movs	r3, #0
    a8a6:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a8a8:	7dbb      	ldrb	r3, [r7, #22]
    a8aa:	2b04      	cmp	r3, #4
    a8ac:	d902      	bls.n	a8b4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a8ae:	f06f 0311 	mvn.w	r3, #17
    a8b2:	e098      	b.n	a9e6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	681b      	ldr	r3, [r3, #0]
    a8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a8bc:	d31a      	bcc.n	a8f4 <_usb_d_dev_ep_trans+0xb0>
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	681b      	ldr	r3, [r3, #0]
    a8c2:	461a      	mov	r2, r3
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	685b      	ldr	r3, [r3, #4]
    a8c8:	4413      	add	r3, r2
    a8ca:	4a4a      	ldr	r2, [pc, #296]	; (a9f4 <_usb_d_dev_ep_trans+0x1b0>)
    a8cc:	4293      	cmp	r3, r2
    a8ce:	d811      	bhi.n	a8f4 <_usb_d_dev_ep_trans+0xb0>
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	681b      	ldr	r3, [r3, #0]
    a8d4:	f003 0303 	and.w	r3, r3, #3
    a8d8:	2b00      	cmp	r3, #0
    a8da:	d10b      	bne.n	a8f4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a8dc:	7d7b      	ldrb	r3, [r7, #21]
    a8de:	f083 0301 	eor.w	r3, r3, #1
    a8e2:	b2db      	uxtb	r3, r3
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d00e      	beq.n	a906 <_usb_d_dev_ep_trans+0xc2>
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	685b      	ldr	r3, [r3, #4]
    a8ec:	693a      	ldr	r2, [r7, #16]
    a8ee:	8a12      	ldrh	r2, [r2, #16]
    a8f0:	4293      	cmp	r3, r2
    a8f2:	d208      	bcs.n	a906 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a8f4:	693b      	ldr	r3, [r7, #16]
    a8f6:	68db      	ldr	r3, [r3, #12]
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d102      	bne.n	a902 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a8fc:	f06f 0312 	mvn.w	r3, #18
    a900:	e071      	b.n	a9e6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a902:	2301      	movs	r3, #1
    a904:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a906:	7d7b      	ldrb	r3, [r7, #21]
    a908:	f083 0301 	eor.w	r3, r3, #1
    a90c:	b2db      	uxtb	r3, r3
    a90e:	2b00      	cmp	r3, #0
    a910:	d009      	beq.n	a926 <_usb_d_dev_ep_trans+0xe2>
    a912:	7b7b      	ldrb	r3, [r7, #13]
    a914:	2b00      	cmp	r3, #0
    a916:	d006      	beq.n	a926 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a918:	693b      	ldr	r3, [r7, #16]
    a91a:	68db      	ldr	r3, [r3, #12]
    a91c:	2b00      	cmp	r3, #0
    a91e:	d102      	bne.n	a926 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a920:	f06f 0311 	mvn.w	r3, #17
    a924:	e05f      	b.n	a9e6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a926:	693b      	ldr	r3, [r7, #16]
    a928:	7cdb      	ldrb	r3, [r3, #19]
    a92a:	f003 0308 	and.w	r3, r3, #8
    a92e:	b2db      	uxtb	r3, r3
    a930:	2b00      	cmp	r3, #0
    a932:	d001      	beq.n	a938 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a934:	2302      	movs	r3, #2
    a936:	e056      	b.n	a9e6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a938:	f107 0308 	add.w	r3, r7, #8
    a93c:	4618      	mov	r0, r3
    a93e:	4b2e      	ldr	r3, [pc, #184]	; (a9f8 <_usb_d_dev_ep_trans+0x1b4>)
    a940:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a942:	693b      	ldr	r3, [r7, #16]
    a944:	7cdb      	ldrb	r3, [r3, #19]
    a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a94a:	b2db      	uxtb	r3, r3
    a94c:	2b00      	cmp	r3, #0
    a94e:	d006      	beq.n	a95e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a950:	f107 0308 	add.w	r3, r7, #8
    a954:	4618      	mov	r0, r3
    a956:	4b29      	ldr	r3, [pc, #164]	; (a9fc <_usb_d_dev_ep_trans+0x1b8>)
    a958:	4798      	blx	r3
		return USB_BUSY;
    a95a:	2301      	movs	r3, #1
    a95c:	e043      	b.n	a9e6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a95e:	693a      	ldr	r2, [r7, #16]
    a960:	7cd3      	ldrb	r3, [r2, #19]
    a962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a966:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a968:	f107 0308 	add.w	r3, r7, #8
    a96c:	4618      	mov	r0, r3
    a96e:	4b23      	ldr	r3, [pc, #140]	; (a9fc <_usb_d_dev_ep_trans+0x1b8>)
    a970:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a972:	687b      	ldr	r3, [r7, #4]
    a974:	681a      	ldr	r2, [r3, #0]
    a976:	693b      	ldr	r3, [r7, #16]
    a978:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a97a:	687b      	ldr	r3, [r7, #4]
    a97c:	685a      	ldr	r2, [r3, #4]
    a97e:	693b      	ldr	r3, [r7, #16]
    a980:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a982:	693b      	ldr	r3, [r7, #16]
    a984:	2200      	movs	r2, #0
    a986:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a988:	693a      	ldr	r2, [r7, #16]
    a98a:	7cd3      	ldrb	r3, [r2, #19]
    a98c:	7d79      	ldrb	r1, [r7, #21]
    a98e:	f361 13c7 	bfi	r3, r1, #7, #1
    a992:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a994:	693a      	ldr	r2, [r7, #16]
    a996:	7cd3      	ldrb	r3, [r2, #19]
    a998:	7df9      	ldrb	r1, [r7, #23]
    a99a:	f361 1345 	bfi	r3, r1, #5, #1
    a99e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	7a5b      	ldrb	r3, [r3, #9]
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d007      	beq.n	a9b8 <_usb_d_dev_ep_trans+0x174>
    a9a8:	7b7b      	ldrb	r3, [r7, #13]
    a9aa:	f083 0301 	eor.w	r3, r3, #1
    a9ae:	b2db      	uxtb	r3, r3
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d001      	beq.n	a9b8 <_usb_d_dev_ep_trans+0x174>
    a9b4:	2301      	movs	r3, #1
    a9b6:	e000      	b.n	a9ba <_usb_d_dev_ep_trans+0x176>
    a9b8:	2300      	movs	r3, #0
    a9ba:	b2db      	uxtb	r3, r3
    a9bc:	f003 0301 	and.w	r3, r3, #1
    a9c0:	b2d9      	uxtb	r1, r3
    a9c2:	693a      	ldr	r2, [r7, #16]
    a9c4:	7cd3      	ldrb	r3, [r2, #19]
    a9c6:	f361 1304 	bfi	r3, r1, #4, #1
    a9ca:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a9cc:	7d7b      	ldrb	r3, [r7, #21]
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	d004      	beq.n	a9dc <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a9d2:	2100      	movs	r1, #0
    a9d4:	6938      	ldr	r0, [r7, #16]
    a9d6:	4b0a      	ldr	r3, [pc, #40]	; (aa00 <_usb_d_dev_ep_trans+0x1bc>)
    a9d8:	4798      	blx	r3
    a9da:	e003      	b.n	a9e4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a9dc:	2100      	movs	r1, #0
    a9de:	6938      	ldr	r0, [r7, #16]
    a9e0:	4b08      	ldr	r3, [pc, #32]	; (aa04 <_usb_d_dev_ep_trans+0x1c0>)
    a9e2:	4798      	blx	r3
	}

	return ERR_NONE;
    a9e4:	2300      	movs	r3, #0
}
    a9e6:	4618      	mov	r0, r3
    a9e8:	3718      	adds	r7, #24
    a9ea:	46bd      	mov	sp, r7
    a9ec:	bd80      	pop	{r7, pc}
    a9ee:	bf00      	nop
    a9f0:	000090b5 	.word	0x000090b5
    a9f4:	20041fff 	.word	0x20041fff
    a9f8:	0000b211 	.word	0x0000b211
    a9fc:	0000b237 	.word	0x0000b237
    aa00:	0000937d 	.word	0x0000937d
    aa04:	00009595 	.word	0x00009595

0000aa08 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    aa08:	b580      	push	{r7, lr}
    aa0a:	b084      	sub	sp, #16
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	4603      	mov	r3, r0
    aa10:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    aa12:	79fb      	ldrb	r3, [r7, #7]
    aa14:	f003 030f 	and.w	r3, r3, #15
    aa18:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    aa1a:	79fb      	ldrb	r3, [r7, #7]
    aa1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa20:	2b00      	cmp	r3, #0
    aa22:	bf14      	ite	ne
    aa24:	2301      	movne	r3, #1
    aa26:	2300      	moveq	r3, #0
    aa28:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    aa2a:	7bba      	ldrb	r2, [r7, #14]
    aa2c:	7bfb      	ldrb	r3, [r7, #15]
    aa2e:	4611      	mov	r1, r2
    aa30:	4618      	mov	r0, r3
    aa32:	4b08      	ldr	r3, [pc, #32]	; (aa54 <_usb_d_dev_ep_abort+0x4c>)
    aa34:	4798      	blx	r3
    aa36:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    aa38:	7bfb      	ldrb	r3, [r7, #15]
    aa3a:	2b04      	cmp	r3, #4
    aa3c:	d806      	bhi.n	aa4c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    aa3e:	7bbb      	ldrb	r3, [r7, #14]
    aa40:	2202      	movs	r2, #2
    aa42:	4619      	mov	r1, r3
    aa44:	68b8      	ldr	r0, [r7, #8]
    aa46:	4b04      	ldr	r3, [pc, #16]	; (aa58 <_usb_d_dev_ep_abort+0x50>)
    aa48:	4798      	blx	r3
    aa4a:	e000      	b.n	aa4e <_usb_d_dev_ep_abort+0x46>
		return;
    aa4c:	bf00      	nop
}
    aa4e:	3710      	adds	r7, #16
    aa50:	46bd      	mov	sp, r7
    aa52:	bd80      	pop	{r7, pc}
    aa54:	000090b5 	.word	0x000090b5
    aa58:	0000a6ed 	.word	0x0000a6ed

0000aa5c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    aa5c:	b480      	push	{r7}
    aa5e:	b085      	sub	sp, #20
    aa60:	af00      	add	r7, sp, #0
    aa62:	4603      	mov	r3, r0
    aa64:	6039      	str	r1, [r7, #0]
    aa66:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aa68:	683b      	ldr	r3, [r7, #0]
    aa6a:	2b00      	cmp	r3, #0
    aa6c:	d001      	beq.n	aa72 <_usb_d_dev_register_callback+0x16>
    aa6e:	683b      	ldr	r3, [r7, #0]
    aa70:	e000      	b.n	aa74 <_usb_d_dev_register_callback+0x18>
    aa72:	4b0a      	ldr	r3, [pc, #40]	; (aa9c <_usb_d_dev_register_callback+0x40>)
    aa74:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    aa76:	79fb      	ldrb	r3, [r7, #7]
    aa78:	2b01      	cmp	r3, #1
    aa7a:	d103      	bne.n	aa84 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    aa7c:	4a08      	ldr	r2, [pc, #32]	; (aaa0 <_usb_d_dev_register_callback+0x44>)
    aa7e:	68fb      	ldr	r3, [r7, #12]
    aa80:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    aa82:	e005      	b.n	aa90 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    aa84:	79fb      	ldrb	r3, [r7, #7]
    aa86:	2b00      	cmp	r3, #0
    aa88:	d102      	bne.n	aa90 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    aa8a:	4a05      	ldr	r2, [pc, #20]	; (aaa0 <_usb_d_dev_register_callback+0x44>)
    aa8c:	68fb      	ldr	r3, [r7, #12]
    aa8e:	6013      	str	r3, [r2, #0]
}
    aa90:	bf00      	nop
    aa92:	3714      	adds	r7, #20
    aa94:	46bd      	mov	sp, r7
    aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa9a:	4770      	bx	lr
    aa9c:	0000893d 	.word	0x0000893d
    aaa0:	20000a6c 	.word	0x20000a6c

0000aaa4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    aaa4:	b480      	push	{r7}
    aaa6:	b085      	sub	sp, #20
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	4603      	mov	r3, r0
    aaac:	6039      	str	r1, [r7, #0]
    aaae:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    aab0:	683b      	ldr	r3, [r7, #0]
    aab2:	2b00      	cmp	r3, #0
    aab4:	d001      	beq.n	aaba <_usb_d_dev_register_ep_callback+0x16>
    aab6:	683b      	ldr	r3, [r7, #0]
    aab8:	e000      	b.n	aabc <_usb_d_dev_register_ep_callback+0x18>
    aaba:	4b0e      	ldr	r3, [pc, #56]	; (aaf4 <_usb_d_dev_register_ep_callback+0x50>)
    aabc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    aabe:	79fb      	ldrb	r3, [r7, #7]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d103      	bne.n	aacc <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    aac4:	4a0c      	ldr	r2, [pc, #48]	; (aaf8 <_usb_d_dev_register_ep_callback+0x54>)
    aac6:	68fb      	ldr	r3, [r7, #12]
    aac8:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    aaca:	e00c      	b.n	aae6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    aacc:	79fb      	ldrb	r3, [r7, #7]
    aace:	2b01      	cmp	r3, #1
    aad0:	d103      	bne.n	aada <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    aad2:	4a09      	ldr	r2, [pc, #36]	; (aaf8 <_usb_d_dev_register_ep_callback+0x54>)
    aad4:	68fb      	ldr	r3, [r7, #12]
    aad6:	60d3      	str	r3, [r2, #12]
}
    aad8:	e005      	b.n	aae6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    aada:	79fb      	ldrb	r3, [r7, #7]
    aadc:	2b02      	cmp	r3, #2
    aade:	d102      	bne.n	aae6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    aae0:	4a05      	ldr	r2, [pc, #20]	; (aaf8 <_usb_d_dev_register_ep_callback+0x54>)
    aae2:	68fb      	ldr	r3, [r7, #12]
    aae4:	6113      	str	r3, [r2, #16]
}
    aae6:	bf00      	nop
    aae8:	3714      	adds	r7, #20
    aaea:	46bd      	mov	sp, r7
    aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaf0:	4770      	bx	lr
    aaf2:	bf00      	nop
    aaf4:	0000893d 	.word	0x0000893d
    aaf8:	20000a6c 	.word	0x20000a6c

0000aafc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    aafc:	b580      	push	{r7, lr}
    aafe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab00:	4b01      	ldr	r3, [pc, #4]	; (ab08 <USB_0_Handler+0xc>)
    ab02:	4798      	blx	r3
}
    ab04:	bf00      	nop
    ab06:	bd80      	pop	{r7, pc}
    ab08:	00009d6d 	.word	0x00009d6d

0000ab0c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ab0c:	b580      	push	{r7, lr}
    ab0e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab10:	4b01      	ldr	r3, [pc, #4]	; (ab18 <USB_1_Handler+0xc>)
    ab12:	4798      	blx	r3
}
    ab14:	bf00      	nop
    ab16:	bd80      	pop	{r7, pc}
    ab18:	00009d6d 	.word	0x00009d6d

0000ab1c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ab1c:	b580      	push	{r7, lr}
    ab1e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab20:	4b01      	ldr	r3, [pc, #4]	; (ab28 <USB_2_Handler+0xc>)
    ab22:	4798      	blx	r3
}
    ab24:	bf00      	nop
    ab26:	bd80      	pop	{r7, pc}
    ab28:	00009d6d 	.word	0x00009d6d

0000ab2c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ab30:	4b01      	ldr	r3, [pc, #4]	; (ab38 <USB_3_Handler+0xc>)
    ab32:	4798      	blx	r3
}
    ab34:	bf00      	nop
    ab36:	bd80      	pop	{r7, pc}
    ab38:	00009d6d 	.word	0x00009d6d

0000ab3c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ab3c:	b480      	push	{r7}
    ab3e:	b083      	sub	sp, #12
    ab40:	af00      	add	r7, sp, #0
    ab42:	6078      	str	r0, [r7, #4]
    ab44:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ab46:	bf00      	nop
    ab48:	687b      	ldr	r3, [r7, #4]
    ab4a:	689a      	ldr	r2, [r3, #8]
    ab4c:	683b      	ldr	r3, [r7, #0]
    ab4e:	4013      	ands	r3, r2
    ab50:	2b00      	cmp	r3, #0
    ab52:	d1f9      	bne.n	ab48 <hri_wdt_wait_for_sync+0xc>
	};
}
    ab54:	bf00      	nop
    ab56:	370c      	adds	r7, #12
    ab58:	46bd      	mov	sp, r7
    ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab5e:	4770      	bx	lr

0000ab60 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ab60:	b580      	push	{r7, lr}
    ab62:	b084      	sub	sp, #16
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ab68:	210e      	movs	r1, #14
    ab6a:	6878      	ldr	r0, [r7, #4]
    ab6c:	4b0a      	ldr	r3, [pc, #40]	; (ab98 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ab6e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	781b      	ldrb	r3, [r3, #0]
    ab74:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ab76:	7bfb      	ldrb	r3, [r7, #15]
    ab78:	085b      	lsrs	r3, r3, #1
    ab7a:	b2db      	uxtb	r3, r3
    ab7c:	f003 0301 	and.w	r3, r3, #1
    ab80:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ab82:	7bfb      	ldrb	r3, [r7, #15]
    ab84:	2b00      	cmp	r3, #0
    ab86:	bf14      	ite	ne
    ab88:	2301      	movne	r3, #1
    ab8a:	2300      	moveq	r3, #0
    ab8c:	b2db      	uxtb	r3, r3
}
    ab8e:	4618      	mov	r0, r3
    ab90:	3710      	adds	r7, #16
    ab92:	46bd      	mov	sp, r7
    ab94:	bd80      	pop	{r7, pc}
    ab96:	bf00      	nop
    ab98:	0000ab3d 	.word	0x0000ab3d

0000ab9c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ab9c:	b580      	push	{r7, lr}
    ab9e:	b082      	sub	sp, #8
    aba0:	af00      	add	r7, sp, #0
    aba2:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	b2db      	uxtb	r3, r3
    abaa:	f023 0304 	bic.w	r3, r3, #4
    abae:	b2da      	uxtb	r2, r3
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    abb4:	210e      	movs	r1, #14
    abb6:	6878      	ldr	r0, [r7, #4]
    abb8:	4b02      	ldr	r3, [pc, #8]	; (abc4 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    abba:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    abbc:	bf00      	nop
    abbe:	3708      	adds	r7, #8
    abc0:	46bd      	mov	sp, r7
    abc2:	bd80      	pop	{r7, pc}
    abc4:	0000ab3d 	.word	0x0000ab3d

0000abc8 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b084      	sub	sp, #16
    abcc:	af00      	add	r7, sp, #0
    abce:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    abd0:	210e      	movs	r1, #14
    abd2:	6878      	ldr	r0, [r7, #4]
    abd4:	4b08      	ldr	r3, [pc, #32]	; (abf8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    abd6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    abd8:	687b      	ldr	r3, [r7, #4]
    abda:	781b      	ldrb	r3, [r3, #0]
    abdc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    abde:	7bfb      	ldrb	r3, [r7, #15]
    abe0:	09db      	lsrs	r3, r3, #7
    abe2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    abe4:	7bfb      	ldrb	r3, [r7, #15]
    abe6:	2b00      	cmp	r3, #0
    abe8:	bf14      	ite	ne
    abea:	2301      	movne	r3, #1
    abec:	2300      	moveq	r3, #0
    abee:	b2db      	uxtb	r3, r3
}
    abf0:	4618      	mov	r0, r3
    abf2:	3710      	adds	r7, #16
    abf4:	46bd      	mov	sp, r7
    abf6:	bd80      	pop	{r7, pc}
    abf8:	0000ab3d 	.word	0x0000ab3d

0000abfc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    abfc:	b480      	push	{r7}
    abfe:	b085      	sub	sp, #20
    ac00:	af00      	add	r7, sp, #0
    ac02:	6078      	str	r0, [r7, #4]
    ac04:	460b      	mov	r3, r1
    ac06:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    ac08:	687b      	ldr	r3, [r7, #4]
    ac0a:	785b      	ldrb	r3, [r3, #1]
    ac0c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    ac0e:	7bfb      	ldrb	r3, [r7, #15]
    ac10:	f023 030f 	bic.w	r3, r3, #15
    ac14:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    ac16:	78fb      	ldrb	r3, [r7, #3]
    ac18:	f003 030f 	and.w	r3, r3, #15
    ac1c:	b2da      	uxtb	r2, r3
    ac1e:	7bfb      	ldrb	r3, [r7, #15]
    ac20:	4313      	orrs	r3, r2
    ac22:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    ac24:	687b      	ldr	r3, [r7, #4]
    ac26:	7bfa      	ldrb	r2, [r7, #15]
    ac28:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    ac2a:	bf00      	nop
    ac2c:	3714      	adds	r7, #20
    ac2e:	46bd      	mov	sp, r7
    ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac34:	4770      	bx	lr
	...

0000ac38 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ac38:	b580      	push	{r7, lr}
    ac3a:	b082      	sub	sp, #8
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d005      	beq.n	ac52 <_wdt_init+0x1a>
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	681b      	ldr	r3, [r3, #0]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d001      	beq.n	ac52 <_wdt_init+0x1a>
    ac4e:	2301      	movs	r3, #1
    ac50:	e000      	b.n	ac54 <_wdt_init+0x1c>
    ac52:	2300      	movs	r3, #0
    ac54:	f003 0301 	and.w	r3, r3, #1
    ac58:	b2db      	uxtb	r3, r3
    ac5a:	2250      	movs	r2, #80	; 0x50
    ac5c:	4913      	ldr	r1, [pc, #76]	; (acac <_wdt_init+0x74>)
    ac5e:	4618      	mov	r0, r3
    ac60:	4b13      	ldr	r3, [pc, #76]	; (acb0 <_wdt_init+0x78>)
    ac62:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ac64:	687b      	ldr	r3, [r7, #4]
    ac66:	681b      	ldr	r3, [r3, #0]
    ac68:	4618      	mov	r0, r3
    ac6a:	4b12      	ldr	r3, [pc, #72]	; (acb4 <_wdt_init+0x7c>)
    ac6c:	4798      	blx	r3
    ac6e:	4603      	mov	r3, r0
    ac70:	2b00      	cmp	r3, #0
    ac72:	d107      	bne.n	ac84 <_wdt_init+0x4c>
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	681b      	ldr	r3, [r3, #0]
    ac78:	4618      	mov	r0, r3
    ac7a:	4b0f      	ldr	r3, [pc, #60]	; (acb8 <_wdt_init+0x80>)
    ac7c:	4798      	blx	r3
    ac7e:	4603      	mov	r3, r0
    ac80:	2b00      	cmp	r3, #0
    ac82:	d002      	beq.n	ac8a <_wdt_init+0x52>
		return ERR_DENIED;
    ac84:	f06f 0310 	mvn.w	r3, #16
    ac88:	e00b      	b.n	aca2 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    ac8a:	687b      	ldr	r3, [r7, #4]
    ac8c:	681b      	ldr	r3, [r3, #0]
    ac8e:	4618      	mov	r0, r3
    ac90:	4b0a      	ldr	r3, [pc, #40]	; (acbc <_wdt_init+0x84>)
    ac92:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	681b      	ldr	r3, [r3, #0]
    ac98:	210b      	movs	r1, #11
    ac9a:	4618      	mov	r0, r3
    ac9c:	4b08      	ldr	r3, [pc, #32]	; (acc0 <_wdt_init+0x88>)
    ac9e:	4798      	blx	r3
	}

	return ERR_NONE;
    aca0:	2300      	movs	r3, #0
}
    aca2:	4618      	mov	r0, r3
    aca4:	3708      	adds	r7, #8
    aca6:	46bd      	mov	sp, r7
    aca8:	bd80      	pop	{r7, pc}
    acaa:	bf00      	nop
    acac:	0000ef08 	.word	0x0000ef08
    acb0:	00003725 	.word	0x00003725
    acb4:	0000abc9 	.word	0x0000abc9
    acb8:	0000ab61 	.word	0x0000ab61
    acbc:	0000ab9d 	.word	0x0000ab9d
    acc0:	0000abfd 	.word	0x0000abfd

0000acc4 <hri_port_set_DIR_reg>:
{
    acc4:	b480      	push	{r7}
    acc6:	b085      	sub	sp, #20
    acc8:	af00      	add	r7, sp, #0
    acca:	60f8      	str	r0, [r7, #12]
    accc:	460b      	mov	r3, r1
    acce:	607a      	str	r2, [r7, #4]
    acd0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    acd2:	7afb      	ldrb	r3, [r7, #11]
    acd4:	68fa      	ldr	r2, [r7, #12]
    acd6:	01db      	lsls	r3, r3, #7
    acd8:	4413      	add	r3, r2
    acda:	3308      	adds	r3, #8
    acdc:	687a      	ldr	r2, [r7, #4]
    acde:	601a      	str	r2, [r3, #0]
}
    ace0:	bf00      	nop
    ace2:	3714      	adds	r7, #20
    ace4:	46bd      	mov	sp, r7
    ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
    acea:	4770      	bx	lr

0000acec <hri_port_clear_DIR_reg>:
{
    acec:	b480      	push	{r7}
    acee:	b085      	sub	sp, #20
    acf0:	af00      	add	r7, sp, #0
    acf2:	60f8      	str	r0, [r7, #12]
    acf4:	460b      	mov	r3, r1
    acf6:	607a      	str	r2, [r7, #4]
    acf8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    acfa:	7afb      	ldrb	r3, [r7, #11]
    acfc:	68fa      	ldr	r2, [r7, #12]
    acfe:	01db      	lsls	r3, r3, #7
    ad00:	4413      	add	r3, r2
    ad02:	3304      	adds	r3, #4
    ad04:	687a      	ldr	r2, [r7, #4]
    ad06:	601a      	str	r2, [r3, #0]
}
    ad08:	bf00      	nop
    ad0a:	3714      	adds	r7, #20
    ad0c:	46bd      	mov	sp, r7
    ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad12:	4770      	bx	lr

0000ad14 <hri_port_set_OUT_reg>:
{
    ad14:	b480      	push	{r7}
    ad16:	b085      	sub	sp, #20
    ad18:	af00      	add	r7, sp, #0
    ad1a:	60f8      	str	r0, [r7, #12]
    ad1c:	460b      	mov	r3, r1
    ad1e:	607a      	str	r2, [r7, #4]
    ad20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ad22:	7afb      	ldrb	r3, [r7, #11]
    ad24:	68fa      	ldr	r2, [r7, #12]
    ad26:	01db      	lsls	r3, r3, #7
    ad28:	4413      	add	r3, r2
    ad2a:	3318      	adds	r3, #24
    ad2c:	687a      	ldr	r2, [r7, #4]
    ad2e:	601a      	str	r2, [r3, #0]
}
    ad30:	bf00      	nop
    ad32:	3714      	adds	r7, #20
    ad34:	46bd      	mov	sp, r7
    ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad3a:	4770      	bx	lr

0000ad3c <hri_port_clear_OUT_reg>:
{
    ad3c:	b480      	push	{r7}
    ad3e:	b085      	sub	sp, #20
    ad40:	af00      	add	r7, sp, #0
    ad42:	60f8      	str	r0, [r7, #12]
    ad44:	460b      	mov	r3, r1
    ad46:	607a      	str	r2, [r7, #4]
    ad48:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ad4a:	7afb      	ldrb	r3, [r7, #11]
    ad4c:	68fa      	ldr	r2, [r7, #12]
    ad4e:	01db      	lsls	r3, r3, #7
    ad50:	4413      	add	r3, r2
    ad52:	3314      	adds	r3, #20
    ad54:	687a      	ldr	r2, [r7, #4]
    ad56:	601a      	str	r2, [r3, #0]
}
    ad58:	bf00      	nop
    ad5a:	3714      	adds	r7, #20
    ad5c:	46bd      	mov	sp, r7
    ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad62:	4770      	bx	lr

0000ad64 <hri_port_write_PMUX_PMUXE_bf>:
{
    ad64:	b480      	push	{r7}
    ad66:	b085      	sub	sp, #20
    ad68:	af00      	add	r7, sp, #0
    ad6a:	6078      	str	r0, [r7, #4]
    ad6c:	4608      	mov	r0, r1
    ad6e:	4611      	mov	r1, r2
    ad70:	461a      	mov	r2, r3
    ad72:	4603      	mov	r3, r0
    ad74:	70fb      	strb	r3, [r7, #3]
    ad76:	460b      	mov	r3, r1
    ad78:	70bb      	strb	r3, [r7, #2]
    ad7a:	4613      	mov	r3, r2
    ad7c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ad7e:	78fa      	ldrb	r2, [r7, #3]
    ad80:	78bb      	ldrb	r3, [r7, #2]
    ad82:	6879      	ldr	r1, [r7, #4]
    ad84:	01d2      	lsls	r2, r2, #7
    ad86:	440a      	add	r2, r1
    ad88:	4413      	add	r3, r2
    ad8a:	3330      	adds	r3, #48	; 0x30
    ad8c:	781b      	ldrb	r3, [r3, #0]
    ad8e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ad90:	7bfb      	ldrb	r3, [r7, #15]
    ad92:	f023 030f 	bic.w	r3, r3, #15
    ad96:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ad98:	787b      	ldrb	r3, [r7, #1]
    ad9a:	f003 030f 	and.w	r3, r3, #15
    ad9e:	b2da      	uxtb	r2, r3
    ada0:	7bfb      	ldrb	r3, [r7, #15]
    ada2:	4313      	orrs	r3, r2
    ada4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ada6:	78fa      	ldrb	r2, [r7, #3]
    ada8:	78bb      	ldrb	r3, [r7, #2]
    adaa:	6879      	ldr	r1, [r7, #4]
    adac:	01d2      	lsls	r2, r2, #7
    adae:	440a      	add	r2, r1
    adb0:	4413      	add	r3, r2
    adb2:	3330      	adds	r3, #48	; 0x30
    adb4:	7bfa      	ldrb	r2, [r7, #15]
    adb6:	701a      	strb	r2, [r3, #0]
}
    adb8:	bf00      	nop
    adba:	3714      	adds	r7, #20
    adbc:	46bd      	mov	sp, r7
    adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    adc2:	4770      	bx	lr

0000adc4 <hri_port_write_PMUX_PMUXO_bf>:
{
    adc4:	b480      	push	{r7}
    adc6:	b085      	sub	sp, #20
    adc8:	af00      	add	r7, sp, #0
    adca:	6078      	str	r0, [r7, #4]
    adcc:	4608      	mov	r0, r1
    adce:	4611      	mov	r1, r2
    add0:	461a      	mov	r2, r3
    add2:	4603      	mov	r3, r0
    add4:	70fb      	strb	r3, [r7, #3]
    add6:	460b      	mov	r3, r1
    add8:	70bb      	strb	r3, [r7, #2]
    adda:	4613      	mov	r3, r2
    addc:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    adde:	78fa      	ldrb	r2, [r7, #3]
    ade0:	78bb      	ldrb	r3, [r7, #2]
    ade2:	6879      	ldr	r1, [r7, #4]
    ade4:	01d2      	lsls	r2, r2, #7
    ade6:	440a      	add	r2, r1
    ade8:	4413      	add	r3, r2
    adea:	3330      	adds	r3, #48	; 0x30
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    adf0:	7bfb      	ldrb	r3, [r7, #15]
    adf2:	f003 030f 	and.w	r3, r3, #15
    adf6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    adf8:	787b      	ldrb	r3, [r7, #1]
    adfa:	011b      	lsls	r3, r3, #4
    adfc:	b2da      	uxtb	r2, r3
    adfe:	7bfb      	ldrb	r3, [r7, #15]
    ae00:	4313      	orrs	r3, r2
    ae02:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ae04:	78fa      	ldrb	r2, [r7, #3]
    ae06:	78bb      	ldrb	r3, [r7, #2]
    ae08:	6879      	ldr	r1, [r7, #4]
    ae0a:	01d2      	lsls	r2, r2, #7
    ae0c:	440a      	add	r2, r1
    ae0e:	4413      	add	r3, r2
    ae10:	3330      	adds	r3, #48	; 0x30
    ae12:	7bfa      	ldrb	r2, [r7, #15]
    ae14:	701a      	strb	r2, [r3, #0]
}
    ae16:	bf00      	nop
    ae18:	3714      	adds	r7, #20
    ae1a:	46bd      	mov	sp, r7
    ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae20:	4770      	bx	lr

0000ae22 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ae22:	b480      	push	{r7}
    ae24:	b085      	sub	sp, #20
    ae26:	af00      	add	r7, sp, #0
    ae28:	6078      	str	r0, [r7, #4]
    ae2a:	4608      	mov	r0, r1
    ae2c:	4611      	mov	r1, r2
    ae2e:	461a      	mov	r2, r3
    ae30:	4603      	mov	r3, r0
    ae32:	70fb      	strb	r3, [r7, #3]
    ae34:	460b      	mov	r3, r1
    ae36:	70bb      	strb	r3, [r7, #2]
    ae38:	4613      	mov	r3, r2
    ae3a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ae3c:	78fa      	ldrb	r2, [r7, #3]
    ae3e:	78bb      	ldrb	r3, [r7, #2]
    ae40:	6879      	ldr	r1, [r7, #4]
    ae42:	01d2      	lsls	r2, r2, #7
    ae44:	440a      	add	r2, r1
    ae46:	4413      	add	r3, r2
    ae48:	3340      	adds	r3, #64	; 0x40
    ae4a:	781b      	ldrb	r3, [r3, #0]
    ae4c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    ae4e:	7bfb      	ldrb	r3, [r7, #15]
    ae50:	f023 0301 	bic.w	r3, r3, #1
    ae54:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ae56:	787a      	ldrb	r2, [r7, #1]
    ae58:	7bfb      	ldrb	r3, [r7, #15]
    ae5a:	4313      	orrs	r3, r2
    ae5c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ae5e:	78fa      	ldrb	r2, [r7, #3]
    ae60:	78bb      	ldrb	r3, [r7, #2]
    ae62:	6879      	ldr	r1, [r7, #4]
    ae64:	01d2      	lsls	r2, r2, #7
    ae66:	440a      	add	r2, r1
    ae68:	4413      	add	r3, r2
    ae6a:	3340      	adds	r3, #64	; 0x40
    ae6c:	7bfa      	ldrb	r2, [r7, #15]
    ae6e:	701a      	strb	r2, [r3, #0]
}
    ae70:	bf00      	nop
    ae72:	3714      	adds	r7, #20
    ae74:	46bd      	mov	sp, r7
    ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae7a:	4770      	bx	lr

0000ae7c <hri_port_write_WRCONFIG_reg>:
{
    ae7c:	b480      	push	{r7}
    ae7e:	b085      	sub	sp, #20
    ae80:	af00      	add	r7, sp, #0
    ae82:	60f8      	str	r0, [r7, #12]
    ae84:	460b      	mov	r3, r1
    ae86:	607a      	str	r2, [r7, #4]
    ae88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ae8a:	7afb      	ldrb	r3, [r7, #11]
    ae8c:	68fa      	ldr	r2, [r7, #12]
    ae8e:	01db      	lsls	r3, r3, #7
    ae90:	4413      	add	r3, r2
    ae92:	3328      	adds	r3, #40	; 0x28
    ae94:	687a      	ldr	r2, [r7, #4]
    ae96:	601a      	str	r2, [r3, #0]
}
    ae98:	bf00      	nop
    ae9a:	3714      	adds	r7, #20
    ae9c:	46bd      	mov	sp, r7
    ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aea2:	4770      	bx	lr

0000aea4 <_gpio_set_direction>:
{
    aea4:	b580      	push	{r7, lr}
    aea6:	b082      	sub	sp, #8
    aea8:	af00      	add	r7, sp, #0
    aeaa:	4603      	mov	r3, r0
    aeac:	6039      	str	r1, [r7, #0]
    aeae:	71fb      	strb	r3, [r7, #7]
    aeb0:	4613      	mov	r3, r2
    aeb2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    aeb4:	79bb      	ldrb	r3, [r7, #6]
    aeb6:	2b01      	cmp	r3, #1
    aeb8:	d01c      	beq.n	aef4 <_gpio_set_direction+0x50>
    aeba:	2b02      	cmp	r3, #2
    aebc:	d037      	beq.n	af2e <_gpio_set_direction+0x8a>
    aebe:	2b00      	cmp	r3, #0
    aec0:	d14e      	bne.n	af60 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    aec2:	79fb      	ldrb	r3, [r7, #7]
    aec4:	683a      	ldr	r2, [r7, #0]
    aec6:	4619      	mov	r1, r3
    aec8:	482a      	ldr	r0, [pc, #168]	; (af74 <_gpio_set_direction+0xd0>)
    aeca:	4b2b      	ldr	r3, [pc, #172]	; (af78 <_gpio_set_direction+0xd4>)
    aecc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    aece:	683b      	ldr	r3, [r7, #0]
    aed0:	b29b      	uxth	r3, r3
    aed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    aed6:	79fb      	ldrb	r3, [r7, #7]
    aed8:	4619      	mov	r1, r3
    aeda:	4826      	ldr	r0, [pc, #152]	; (af74 <_gpio_set_direction+0xd0>)
    aedc:	4b27      	ldr	r3, [pc, #156]	; (af7c <_gpio_set_direction+0xd8>)
    aede:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    aee0:	683b      	ldr	r3, [r7, #0]
    aee2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    aee4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    aee8:	79fb      	ldrb	r3, [r7, #7]
    aeea:	4619      	mov	r1, r3
    aeec:	4821      	ldr	r0, [pc, #132]	; (af74 <_gpio_set_direction+0xd0>)
    aeee:	4b23      	ldr	r3, [pc, #140]	; (af7c <_gpio_set_direction+0xd8>)
    aef0:	4798      	blx	r3
		break;
    aef2:	e03a      	b.n	af6a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    aef4:	79fb      	ldrb	r3, [r7, #7]
    aef6:	683a      	ldr	r2, [r7, #0]
    aef8:	4619      	mov	r1, r3
    aefa:	481e      	ldr	r0, [pc, #120]	; (af74 <_gpio_set_direction+0xd0>)
    aefc:	4b1e      	ldr	r3, [pc, #120]	; (af78 <_gpio_set_direction+0xd4>)
    aefe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    af00:	683b      	ldr	r3, [r7, #0]
    af02:	b29b      	uxth	r3, r3
    af04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    af08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    af0c:	79f9      	ldrb	r1, [r7, #7]
    af0e:	461a      	mov	r2, r3
    af10:	4818      	ldr	r0, [pc, #96]	; (af74 <_gpio_set_direction+0xd0>)
    af12:	4b1a      	ldr	r3, [pc, #104]	; (af7c <_gpio_set_direction+0xd8>)
    af14:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    af16:	683b      	ldr	r3, [r7, #0]
    af18:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    af1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    af1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    af22:	79f9      	ldrb	r1, [r7, #7]
    af24:	461a      	mov	r2, r3
    af26:	4813      	ldr	r0, [pc, #76]	; (af74 <_gpio_set_direction+0xd0>)
    af28:	4b14      	ldr	r3, [pc, #80]	; (af7c <_gpio_set_direction+0xd8>)
    af2a:	4798      	blx	r3
		break;
    af2c:	e01d      	b.n	af6a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    af2e:	79fb      	ldrb	r3, [r7, #7]
    af30:	683a      	ldr	r2, [r7, #0]
    af32:	4619      	mov	r1, r3
    af34:	480f      	ldr	r0, [pc, #60]	; (af74 <_gpio_set_direction+0xd0>)
    af36:	4b12      	ldr	r3, [pc, #72]	; (af80 <_gpio_set_direction+0xdc>)
    af38:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    af3a:	683b      	ldr	r3, [r7, #0]
    af3c:	b29b      	uxth	r3, r3
    af3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    af42:	79fb      	ldrb	r3, [r7, #7]
    af44:	4619      	mov	r1, r3
    af46:	480b      	ldr	r0, [pc, #44]	; (af74 <_gpio_set_direction+0xd0>)
    af48:	4b0c      	ldr	r3, [pc, #48]	; (af7c <_gpio_set_direction+0xd8>)
    af4a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    af4c:	683b      	ldr	r3, [r7, #0]
    af4e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    af50:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    af54:	79fb      	ldrb	r3, [r7, #7]
    af56:	4619      	mov	r1, r3
    af58:	4806      	ldr	r0, [pc, #24]	; (af74 <_gpio_set_direction+0xd0>)
    af5a:	4b08      	ldr	r3, [pc, #32]	; (af7c <_gpio_set_direction+0xd8>)
    af5c:	4798      	blx	r3
		break;
    af5e:	e004      	b.n	af6a <_gpio_set_direction+0xc6>
		ASSERT(false);
    af60:	2246      	movs	r2, #70	; 0x46
    af62:	4908      	ldr	r1, [pc, #32]	; (af84 <_gpio_set_direction+0xe0>)
    af64:	2000      	movs	r0, #0
    af66:	4b08      	ldr	r3, [pc, #32]	; (af88 <_gpio_set_direction+0xe4>)
    af68:	4798      	blx	r3
}
    af6a:	bf00      	nop
    af6c:	3708      	adds	r7, #8
    af6e:	46bd      	mov	sp, r7
    af70:	bd80      	pop	{r7, pc}
    af72:	bf00      	nop
    af74:	41008000 	.word	0x41008000
    af78:	0000aced 	.word	0x0000aced
    af7c:	0000ae7d 	.word	0x0000ae7d
    af80:	0000acc5 	.word	0x0000acc5
    af84:	0000ef20 	.word	0x0000ef20
    af88:	00003725 	.word	0x00003725

0000af8c <_gpio_set_level>:
{
    af8c:	b580      	push	{r7, lr}
    af8e:	b082      	sub	sp, #8
    af90:	af00      	add	r7, sp, #0
    af92:	4603      	mov	r3, r0
    af94:	6039      	str	r1, [r7, #0]
    af96:	71fb      	strb	r3, [r7, #7]
    af98:	4613      	mov	r3, r2
    af9a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    af9c:	79bb      	ldrb	r3, [r7, #6]
    af9e:	2b00      	cmp	r3, #0
    afa0:	d006      	beq.n	afb0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    afa2:	79fb      	ldrb	r3, [r7, #7]
    afa4:	683a      	ldr	r2, [r7, #0]
    afa6:	4619      	mov	r1, r3
    afa8:	4806      	ldr	r0, [pc, #24]	; (afc4 <_gpio_set_level+0x38>)
    afaa:	4b07      	ldr	r3, [pc, #28]	; (afc8 <_gpio_set_level+0x3c>)
    afac:	4798      	blx	r3
}
    afae:	e005      	b.n	afbc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    afb0:	79fb      	ldrb	r3, [r7, #7]
    afb2:	683a      	ldr	r2, [r7, #0]
    afb4:	4619      	mov	r1, r3
    afb6:	4803      	ldr	r0, [pc, #12]	; (afc4 <_gpio_set_level+0x38>)
    afb8:	4b04      	ldr	r3, [pc, #16]	; (afcc <_gpio_set_level+0x40>)
    afba:	4798      	blx	r3
}
    afbc:	bf00      	nop
    afbe:	3708      	adds	r7, #8
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}
    afc4:	41008000 	.word	0x41008000
    afc8:	0000ad15 	.word	0x0000ad15
    afcc:	0000ad3d 	.word	0x0000ad3d

0000afd0 <_gpio_set_pin_function>:
{
    afd0:	b590      	push	{r4, r7, lr}
    afd2:	b085      	sub	sp, #20
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
    afd8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    afda:	687b      	ldr	r3, [r7, #4]
    afdc:	095b      	lsrs	r3, r3, #5
    afde:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	b2db      	uxtb	r3, r3
    afe4:	f003 031f 	and.w	r3, r3, #31
    afe8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    afea:	683b      	ldr	r3, [r7, #0]
    afec:	f1b3 3fff 	cmp.w	r3, #4294967295
    aff0:	d106      	bne.n	b000 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    aff2:	7bba      	ldrb	r2, [r7, #14]
    aff4:	7bf9      	ldrb	r1, [r7, #15]
    aff6:	2300      	movs	r3, #0
    aff8:	4812      	ldr	r0, [pc, #72]	; (b044 <_gpio_set_pin_function+0x74>)
    affa:	4c13      	ldr	r4, [pc, #76]	; (b048 <_gpio_set_pin_function+0x78>)
    affc:	47a0      	blx	r4
}
    affe:	e01d      	b.n	b03c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b000:	7bba      	ldrb	r2, [r7, #14]
    b002:	7bf9      	ldrb	r1, [r7, #15]
    b004:	2301      	movs	r3, #1
    b006:	480f      	ldr	r0, [pc, #60]	; (b044 <_gpio_set_pin_function+0x74>)
    b008:	4c0f      	ldr	r4, [pc, #60]	; (b048 <_gpio_set_pin_function+0x78>)
    b00a:	47a0      	blx	r4
		if (pin & 1) {
    b00c:	7bbb      	ldrb	r3, [r7, #14]
    b00e:	f003 0301 	and.w	r3, r3, #1
    b012:	2b00      	cmp	r3, #0
    b014:	d009      	beq.n	b02a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b016:	7bbb      	ldrb	r3, [r7, #14]
    b018:	085b      	lsrs	r3, r3, #1
    b01a:	b2da      	uxtb	r2, r3
    b01c:	683b      	ldr	r3, [r7, #0]
    b01e:	b2db      	uxtb	r3, r3
    b020:	7bf9      	ldrb	r1, [r7, #15]
    b022:	4808      	ldr	r0, [pc, #32]	; (b044 <_gpio_set_pin_function+0x74>)
    b024:	4c09      	ldr	r4, [pc, #36]	; (b04c <_gpio_set_pin_function+0x7c>)
    b026:	47a0      	blx	r4
}
    b028:	e008      	b.n	b03c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b02a:	7bbb      	ldrb	r3, [r7, #14]
    b02c:	085b      	lsrs	r3, r3, #1
    b02e:	b2da      	uxtb	r2, r3
    b030:	683b      	ldr	r3, [r7, #0]
    b032:	b2db      	uxtb	r3, r3
    b034:	7bf9      	ldrb	r1, [r7, #15]
    b036:	4803      	ldr	r0, [pc, #12]	; (b044 <_gpio_set_pin_function+0x74>)
    b038:	4c05      	ldr	r4, [pc, #20]	; (b050 <_gpio_set_pin_function+0x80>)
    b03a:	47a0      	blx	r4
}
    b03c:	bf00      	nop
    b03e:	3714      	adds	r7, #20
    b040:	46bd      	mov	sp, r7
    b042:	bd90      	pop	{r4, r7, pc}
    b044:	41008000 	.word	0x41008000
    b048:	0000ae23 	.word	0x0000ae23
    b04c:	0000adc5 	.word	0x0000adc5
    b050:	0000ad65 	.word	0x0000ad65

0000b054 <gpio_set_pin_function>:
{
    b054:	b580      	push	{r7, lr}
    b056:	b082      	sub	sp, #8
    b058:	af00      	add	r7, sp, #0
    b05a:	6078      	str	r0, [r7, #4]
    b05c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b05e:	6839      	ldr	r1, [r7, #0]
    b060:	6878      	ldr	r0, [r7, #4]
    b062:	4b03      	ldr	r3, [pc, #12]	; (b070 <gpio_set_pin_function+0x1c>)
    b064:	4798      	blx	r3
}
    b066:	bf00      	nop
    b068:	3708      	adds	r7, #8
    b06a:	46bd      	mov	sp, r7
    b06c:	bd80      	pop	{r7, pc}
    b06e:	bf00      	nop
    b070:	0000afd1 	.word	0x0000afd1

0000b074 <gpio_set_pin_direction>:
{
    b074:	b580      	push	{r7, lr}
    b076:	b082      	sub	sp, #8
    b078:	af00      	add	r7, sp, #0
    b07a:	4603      	mov	r3, r0
    b07c:	460a      	mov	r2, r1
    b07e:	71fb      	strb	r3, [r7, #7]
    b080:	4613      	mov	r3, r2
    b082:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b084:	79fb      	ldrb	r3, [r7, #7]
    b086:	095b      	lsrs	r3, r3, #5
    b088:	b2d8      	uxtb	r0, r3
    b08a:	79fb      	ldrb	r3, [r7, #7]
    b08c:	f003 031f 	and.w	r3, r3, #31
    b090:	2201      	movs	r2, #1
    b092:	fa02 f303 	lsl.w	r3, r2, r3
    b096:	79ba      	ldrb	r2, [r7, #6]
    b098:	4619      	mov	r1, r3
    b09a:	4b03      	ldr	r3, [pc, #12]	; (b0a8 <gpio_set_pin_direction+0x34>)
    b09c:	4798      	blx	r3
}
    b09e:	bf00      	nop
    b0a0:	3708      	adds	r7, #8
    b0a2:	46bd      	mov	sp, r7
    b0a4:	bd80      	pop	{r7, pc}
    b0a6:	bf00      	nop
    b0a8:	0000aea5 	.word	0x0000aea5

0000b0ac <gpio_set_pin_level>:
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b082      	sub	sp, #8
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	4603      	mov	r3, r0
    b0b4:	460a      	mov	r2, r1
    b0b6:	71fb      	strb	r3, [r7, #7]
    b0b8:	4613      	mov	r3, r2
    b0ba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b0bc:	79fb      	ldrb	r3, [r7, #7]
    b0be:	095b      	lsrs	r3, r3, #5
    b0c0:	b2d8      	uxtb	r0, r3
    b0c2:	79fb      	ldrb	r3, [r7, #7]
    b0c4:	f003 031f 	and.w	r3, r3, #31
    b0c8:	2201      	movs	r2, #1
    b0ca:	fa02 f303 	lsl.w	r3, r2, r3
    b0ce:	79ba      	ldrb	r2, [r7, #6]
    b0d0:	4619      	mov	r1, r3
    b0d2:	4b03      	ldr	r3, [pc, #12]	; (b0e0 <gpio_set_pin_level+0x34>)
    b0d4:	4798      	blx	r3
}
    b0d6:	bf00      	nop
    b0d8:	3708      	adds	r7, #8
    b0da:	46bd      	mov	sp, r7
    b0dc:	bd80      	pop	{r7, pc}
    b0de:	bf00      	nop
    b0e0:	0000af8d 	.word	0x0000af8d

0000b0e4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b0e4:	b580      	push	{r7, lr}
    b0e6:	b082      	sub	sp, #8
    b0e8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b0ea:	2100      	movs	r1, #0
    b0ec:	2008      	movs	r0, #8
    b0ee:	4b24      	ldr	r3, [pc, #144]	; (b180 <QSPI_N25Q256_exit_xip+0x9c>)
    b0f0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b0f2:	2100      	movs	r1, #0
    b0f4:	202b      	movs	r0, #43	; 0x2b
    b0f6:	4b22      	ldr	r3, [pc, #136]	; (b180 <QSPI_N25Q256_exit_xip+0x9c>)
    b0f8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b0fa:	2100      	movs	r1, #0
    b0fc:	202a      	movs	r0, #42	; 0x2a
    b0fe:	4b20      	ldr	r3, [pc, #128]	; (b180 <QSPI_N25Q256_exit_xip+0x9c>)
    b100:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b102:	2102      	movs	r1, #2
    b104:	2008      	movs	r0, #8
    b106:	4b1f      	ldr	r3, [pc, #124]	; (b184 <QSPI_N25Q256_exit_xip+0xa0>)
    b108:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b10a:	2102      	movs	r1, #2
    b10c:	202b      	movs	r0, #43	; 0x2b
    b10e:	4b1d      	ldr	r3, [pc, #116]	; (b184 <QSPI_N25Q256_exit_xip+0xa0>)
    b110:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b112:	2102      	movs	r1, #2
    b114:	202a      	movs	r0, #42	; 0x2a
    b116:	4b1b      	ldr	r3, [pc, #108]	; (b184 <QSPI_N25Q256_exit_xip+0xa0>)
    b118:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b11a:	2101      	movs	r1, #1
    b11c:	2008      	movs	r0, #8
    b11e:	4b1a      	ldr	r3, [pc, #104]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b120:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b122:	2100      	movs	r1, #0
    b124:	202b      	movs	r0, #43	; 0x2b
    b126:	4b18      	ldr	r3, [pc, #96]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b128:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b12a:	2100      	movs	r1, #0
    b12c:	202a      	movs	r0, #42	; 0x2a
    b12e:	4b16      	ldr	r3, [pc, #88]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b130:	4798      	blx	r3

	delay_us(1);
    b132:	2001      	movs	r0, #1
    b134:	4b15      	ldr	r3, [pc, #84]	; (b18c <QSPI_N25Q256_exit_xip+0xa8>)
    b136:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b138:	2300      	movs	r3, #0
    b13a:	607b      	str	r3, [r7, #4]
    b13c:	e010      	b.n	b160 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b13e:	2101      	movs	r1, #1
    b140:	202a      	movs	r0, #42	; 0x2a
    b142:	4b11      	ldr	r3, [pc, #68]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b144:	4798      	blx	r3
		delay_us(1);
    b146:	2001      	movs	r0, #1
    b148:	4b10      	ldr	r3, [pc, #64]	; (b18c <QSPI_N25Q256_exit_xip+0xa8>)
    b14a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b14c:	2100      	movs	r1, #0
    b14e:	202a      	movs	r0, #42	; 0x2a
    b150:	4b0d      	ldr	r3, [pc, #52]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b152:	4798      	blx	r3
		delay_us(1);
    b154:	2001      	movs	r0, #1
    b156:	4b0d      	ldr	r3, [pc, #52]	; (b18c <QSPI_N25Q256_exit_xip+0xa8>)
    b158:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	3301      	adds	r3, #1
    b15e:	607b      	str	r3, [r7, #4]
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	2b06      	cmp	r3, #6
    b164:	ddeb      	ble.n	b13e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b166:	2101      	movs	r1, #1
    b168:	202b      	movs	r0, #43	; 0x2b
    b16a:	4b07      	ldr	r3, [pc, #28]	; (b188 <QSPI_N25Q256_exit_xip+0xa4>)
    b16c:	4798      	blx	r3
	delay_us(1);
    b16e:	2001      	movs	r0, #1
    b170:	4b06      	ldr	r3, [pc, #24]	; (b18c <QSPI_N25Q256_exit_xip+0xa8>)
    b172:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b174:	4b06      	ldr	r3, [pc, #24]	; (b190 <QSPI_N25Q256_exit_xip+0xac>)
    b176:	4798      	blx	r3
}
    b178:	bf00      	nop
    b17a:	3708      	adds	r7, #8
    b17c:	46bd      	mov	sp, r7
    b17e:	bd80      	pop	{r7, pc}
    b180:	0000b055 	.word	0x0000b055
    b184:	0000b075 	.word	0x0000b075
    b188:	0000b0ad 	.word	0x0000b0ad
    b18c:	00002121 	.word	0x00002121
    b190:	000014dd 	.word	0x000014dd

0000b194 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b194:	b598      	push	{r3, r4, r7, lr}
    b196:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b198:	4806      	ldr	r0, [pc, #24]	; (b1b4 <spi_nor_flash_init+0x20>)
    b19a:	4b07      	ldr	r3, [pc, #28]	; (b1b8 <spi_nor_flash_init+0x24>)
    b19c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b19e:	2300      	movs	r3, #0
    b1a0:	4a06      	ldr	r2, [pc, #24]	; (b1bc <spi_nor_flash_init+0x28>)
    b1a2:	4904      	ldr	r1, [pc, #16]	; (b1b4 <spi_nor_flash_init+0x20>)
    b1a4:	4806      	ldr	r0, [pc, #24]	; (b1c0 <spi_nor_flash_init+0x2c>)
    b1a6:	4c07      	ldr	r4, [pc, #28]	; (b1c4 <spi_nor_flash_init+0x30>)
    b1a8:	47a0      	blx	r4
    b1aa:	4602      	mov	r2, r0
    b1ac:	4b06      	ldr	r3, [pc, #24]	; (b1c8 <spi_nor_flash_init+0x34>)
    b1ae:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b1b0:	bf00      	nop
    b1b2:	bd98      	pop	{r3, r4, r7, pc}
    b1b4:	20001088 	.word	0x20001088
    b1b8:	0000268d 	.word	0x0000268d
    b1bc:	0000b0e5 	.word	0x0000b0e5
    b1c0:	20000bd4 	.word	0x20000bd4
    b1c4:	0000b601 	.word	0x0000b601
    b1c8:	20001268 	.word	0x20001268

0000b1cc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b1cc:	b580      	push	{r7, lr}
    b1ce:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b1d0:	4805      	ldr	r0, [pc, #20]	; (b1e8 <cdc_device_acm_init+0x1c>)
    b1d2:	4b06      	ldr	r3, [pc, #24]	; (b1ec <cdc_device_acm_init+0x20>)
    b1d4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b1d6:	4b06      	ldr	r3, [pc, #24]	; (b1f0 <cdc_device_acm_init+0x24>)
    b1d8:	4798      	blx	r3

	usbdc_start(single_desc);
    b1da:	4806      	ldr	r0, [pc, #24]	; (b1f4 <cdc_device_acm_init+0x28>)
    b1dc:	4b06      	ldr	r3, [pc, #24]	; (b1f8 <cdc_device_acm_init+0x2c>)
    b1de:	4798      	blx	r3
	usbdc_attach();
    b1e0:	4b06      	ldr	r3, [pc, #24]	; (b1fc <cdc_device_acm_init+0x30>)
    b1e2:	4798      	blx	r3
}
    b1e4:	bf00      	nop
    b1e6:	bd80      	pop	{r7, pc}
    b1e8:	20000c24 	.word	0x20000c24
    b1ec:	0000cd29 	.word	0x0000cd29
    b1f0:	0000bfa1 	.word	0x0000bfa1
    b1f4:	200001d0 	.word	0x200001d0
    b1f8:	0000cdc5 	.word	0x0000cdc5
    b1fc:	0000ce15 	.word	0x0000ce15

0000b200 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b200:	b580      	push	{r7, lr}
    b202:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b204:	4b01      	ldr	r3, [pc, #4]	; (b20c <usb_init+0xc>)
    b206:	4798      	blx	r3
}
    b208:	bf00      	nop
    b20a:	bd80      	pop	{r7, pc}
    b20c:	0000b1cd 	.word	0x0000b1cd

0000b210 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b210:	b480      	push	{r7}
    b212:	b085      	sub	sp, #20
    b214:	af00      	add	r7, sp, #0
    b216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b218:	f3ef 8310 	mrs	r3, PRIMASK
    b21c:	60fb      	str	r3, [r7, #12]
  return(result);
    b21e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b220:	687b      	ldr	r3, [r7, #4]
    b222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b224:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b226:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b22a:	bf00      	nop
    b22c:	3714      	adds	r7, #20
    b22e:	46bd      	mov	sp, r7
    b230:	f85d 7b04 	ldr.w	r7, [sp], #4
    b234:	4770      	bx	lr

0000b236 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b236:	b480      	push	{r7}
    b238:	b085      	sub	sp, #20
    b23a:	af00      	add	r7, sp, #0
    b23c:	6078      	str	r0, [r7, #4]
    b23e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b242:	687b      	ldr	r3, [r7, #4]
    b244:	681b      	ldr	r3, [r3, #0]
    b246:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b248:	68fb      	ldr	r3, [r7, #12]
    b24a:	f383 8810 	msr	PRIMASK, r3
}
    b24e:	bf00      	nop
    b250:	3714      	adds	r7, #20
    b252:	46bd      	mov	sp, r7
    b254:	f85d 7b04 	ldr.w	r7, [sp], #4
    b258:	4770      	bx	lr
	...

0000b25c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b25c:	b580      	push	{r7, lr}
    b25e:	b08c      	sub	sp, #48	; 0x30
    b260:	af00      	add	r7, sp, #0
    b262:	6078      	str	r0, [r7, #4]
    b264:	460b      	mov	r3, r1
    b266:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b268:	687b      	ldr	r3, [r7, #4]
    b26a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b272:	f107 030c 	add.w	r3, r7, #12
    b276:	2200      	movs	r2, #0
    b278:	601a      	str	r2, [r3, #0]
    b27a:	605a      	str	r2, [r3, #4]
    b27c:	609a      	str	r2, [r3, #8]
    b27e:	60da      	str	r2, [r3, #12]
    b280:	611a      	str	r2, [r3, #16]
    b282:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b286:	7b1b      	ldrb	r3, [r3, #12]
    b288:	2b00      	cmp	r3, #0
    b28a:	d001      	beq.n	b290 <n25q256a_xip_confirm+0x34>
    b28c:	2206      	movs	r2, #6
    b28e:	e000      	b.n	b292 <n25q256a_xip_confirm+0x36>
    b290:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b292:	7b3b      	ldrb	r3, [r7, #12]
    b294:	f362 0302 	bfi	r3, r2, #0, #3
    b298:	733b      	strb	r3, [r7, #12]
    b29a:	7b3b      	ldrb	r3, [r7, #12]
    b29c:	f043 0310 	orr.w	r3, r3, #16
    b2a0:	733b      	strb	r3, [r7, #12]
    b2a2:	7b3b      	ldrb	r3, [r7, #12]
    b2a4:	f043 0320 	orr.w	r3, r3, #32
    b2a8:	733b      	strb	r3, [r7, #12]
    b2aa:	7b3b      	ldrb	r3, [r7, #12]
    b2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b2b0:	733b      	strb	r3, [r7, #12]
    b2b2:	7b3b      	ldrb	r3, [r7, #12]
    b2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b2b8:	733b      	strb	r3, [r7, #12]
    b2ba:	7b7b      	ldrb	r3, [r7, #13]
    b2bc:	f043 0303 	orr.w	r3, r3, #3
    b2c0:	737b      	strb	r3, [r7, #13]
    b2c2:	7b7b      	ldrb	r3, [r7, #13]
    b2c4:	2201      	movs	r2, #1
    b2c6:	f362 1305 	bfi	r3, r2, #4, #2
    b2ca:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2ce:	7b1b      	ldrb	r3, [r3, #12]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d001      	beq.n	b2d8 <n25q256a_xip_confirm+0x7c>
    b2d4:	2208      	movs	r2, #8
    b2d6:	e000      	b.n	b2da <n25q256a_xip_confirm+0x7e>
    b2d8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b2da:	7bbb      	ldrb	r3, [r7, #14]
    b2dc:	f362 0304 	bfi	r3, r2, #0, #5
    b2e0:	73bb      	strb	r3, [r7, #14]
    b2e2:	230b      	movs	r3, #11
    b2e4:	743b      	strb	r3, [r7, #16]
    b2e6:	78fb      	ldrb	r3, [r7, #3]
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d001      	beq.n	b2f0 <n25q256a_xip_confirm+0x94>
    b2ec:	2300      	movs	r3, #0
    b2ee:	e000      	b.n	b2f2 <n25q256a_xip_confirm+0x96>
    b2f0:	23ff      	movs	r3, #255	; 0xff
    b2f2:	747b      	strb	r3, [r7, #17]
    b2f4:	2301      	movs	r3, #1
    b2f6:	61bb      	str	r3, [r7, #24]
    b2f8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b2fc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b2fe:	f107 030c 	add.w	r3, r7, #12
    b302:	4619      	mov	r1, r3
    b304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b306:	4b07      	ldr	r3, [pc, #28]	; (b324 <n25q256a_xip_confirm+0xc8>)
    b308:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b30a:	78fb      	ldrb	r3, [r7, #3]
    b30c:	2b00      	cmp	r3, #0
    b30e:	d001      	beq.n	b314 <n25q256a_xip_confirm+0xb8>
    b310:	2202      	movs	r2, #2
    b312:	e000      	b.n	b316 <n25q256a_xip_confirm+0xba>
    b314:	2201      	movs	r2, #1
    b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b318:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b31a:	2300      	movs	r3, #0
}
    b31c:	4618      	mov	r0, r3
    b31e:	3730      	adds	r7, #48	; 0x30
    b320:	46bd      	mov	sp, r7
    b322:	bd80      	pop	{r7, pc}
    b324:	00002705 	.word	0x00002705

0000b328 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b328:	b580      	push	{r7, lr}
    b32a:	b08c      	sub	sp, #48	; 0x30
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	460b      	mov	r3, r1
    b332:	70fb      	strb	r3, [r7, #3]
    b334:	4613      	mov	r3, r2
    b336:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b338:	2300      	movs	r3, #0
    b33a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b33c:	687b      	ldr	r3, [r7, #4]
    b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	681b      	ldr	r3, [r3, #0]
    b344:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b346:	f107 030c 	add.w	r3, r7, #12
    b34a:	2200      	movs	r2, #0
    b34c:	601a      	str	r2, [r3, #0]
    b34e:	605a      	str	r2, [r3, #4]
    b350:	609a      	str	r2, [r3, #8]
    b352:	60da      	str	r2, [r3, #12]
    b354:	611a      	str	r2, [r3, #16]
    b356:	615a      	str	r2, [r3, #20]
    b358:	78fb      	ldrb	r3, [r7, #3]
    b35a:	f003 0307 	and.w	r3, r3, #7
    b35e:	b2da      	uxtb	r2, r3
    b360:	7b3b      	ldrb	r3, [r7, #12]
    b362:	f362 0302 	bfi	r3, r2, #0, #3
    b366:	733b      	strb	r3, [r7, #12]
    b368:	7b3b      	ldrb	r3, [r7, #12]
    b36a:	f043 0310 	orr.w	r3, r3, #16
    b36e:	733b      	strb	r3, [r7, #12]
    b370:	7b3b      	ldrb	r3, [r7, #12]
    b372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b376:	733b      	strb	r3, [r7, #12]
    b378:	78bb      	ldrb	r3, [r7, #2]
    b37a:	743b      	strb	r3, [r7, #16]
    b37c:	2301      	movs	r3, #1
    b37e:	61bb      	str	r3, [r7, #24]
    b380:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b384:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b388:	7b5b      	ldrb	r3, [r3, #13]
    b38a:	2b00      	cmp	r3, #0
    b38c:	d003      	beq.n	b396 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b38e:	2100      	movs	r1, #0
    b390:	6878      	ldr	r0, [r7, #4]
    b392:	4b0a      	ldr	r3, [pc, #40]	; (b3bc <n25q256a_read_reg+0x94>)
    b394:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b396:	f107 030c 	add.w	r3, r7, #12
    b39a:	4619      	mov	r1, r3
    b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b39e:	4b08      	ldr	r3, [pc, #32]	; (b3c0 <n25q256a_read_reg+0x98>)
    b3a0:	4798      	blx	r3
	if (n25q->xip_mode) {
    b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b3a4:	7b5b      	ldrb	r3, [r3, #13]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d003      	beq.n	b3b2 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b3aa:	2101      	movs	r1, #1
    b3ac:	6878      	ldr	r0, [r7, #4]
    b3ae:	4b03      	ldr	r3, [pc, #12]	; (b3bc <n25q256a_read_reg+0x94>)
    b3b0:	4798      	blx	r3
	}
	return status;
    b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b3b4:	4618      	mov	r0, r3
    b3b6:	3730      	adds	r7, #48	; 0x30
    b3b8:	46bd      	mov	sp, r7
    b3ba:	bd80      	pop	{r7, pc}
    b3bc:	0000b25d 	.word	0x0000b25d
    b3c0:	00002705 	.word	0x00002705

0000b3c4 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b08c      	sub	sp, #48	; 0x30
    b3c8:	af00      	add	r7, sp, #0
    b3ca:	60f8      	str	r0, [r7, #12]
    b3cc:	607b      	str	r3, [r7, #4]
    b3ce:	460b      	mov	r3, r1
    b3d0:	72fb      	strb	r3, [r7, #11]
    b3d2:	4613      	mov	r3, r2
    b3d4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b3d6:	68fb      	ldr	r3, [r7, #12]
    b3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b3da:	68fb      	ldr	r3, [r7, #12]
    b3dc:	681b      	ldr	r3, [r3, #0]
    b3de:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b3e0:	f107 0310 	add.w	r3, r7, #16
    b3e4:	2200      	movs	r2, #0
    b3e6:	601a      	str	r2, [r3, #0]
    b3e8:	605a      	str	r2, [r3, #4]
    b3ea:	609a      	str	r2, [r3, #8]
    b3ec:	60da      	str	r2, [r3, #12]
    b3ee:	611a      	str	r2, [r3, #16]
    b3f0:	615a      	str	r2, [r3, #20]
    b3f2:	7afb      	ldrb	r3, [r7, #11]
    b3f4:	f003 0307 	and.w	r3, r3, #7
    b3f8:	b2da      	uxtb	r2, r3
    b3fa:	7c3b      	ldrb	r3, [r7, #16]
    b3fc:	f362 0302 	bfi	r3, r2, #0, #3
    b400:	743b      	strb	r3, [r7, #16]
    b402:	7c3b      	ldrb	r3, [r7, #16]
    b404:	f043 0310 	orr.w	r3, r3, #16
    b408:	743b      	strb	r3, [r7, #16]
    b40a:	7c3b      	ldrb	r3, [r7, #16]
    b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b410:	743b      	strb	r3, [r7, #16]
    b412:	7c7b      	ldrb	r3, [r7, #17]
    b414:	2202      	movs	r2, #2
    b416:	f362 1305 	bfi	r3, r2, #4, #2
    b41a:	747b      	strb	r3, [r7, #17]
    b41c:	7abb      	ldrb	r3, [r7, #10]
    b41e:	753b      	strb	r3, [r7, #20]
    b420:	2301      	movs	r3, #1
    b422:	61fb      	str	r3, [r7, #28]
    b424:	1d3b      	adds	r3, r7, #4
    b426:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b42a:	7b5b      	ldrb	r3, [r3, #13]
    b42c:	2b00      	cmp	r3, #0
    b42e:	d003      	beq.n	b438 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b430:	2100      	movs	r1, #0
    b432:	68f8      	ldr	r0, [r7, #12]
    b434:	4b09      	ldr	r3, [pc, #36]	; (b45c <n25q256a_write_reg+0x98>)
    b436:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b438:	f107 0310 	add.w	r3, r7, #16
    b43c:	4619      	mov	r1, r3
    b43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b440:	4b07      	ldr	r3, [pc, #28]	; (b460 <n25q256a_write_reg+0x9c>)
    b442:	4798      	blx	r3
	if (n25q->xip_mode) {
    b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b446:	7b5b      	ldrb	r3, [r3, #13]
    b448:	2b00      	cmp	r3, #0
    b44a:	d003      	beq.n	b454 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b44c:	2101      	movs	r1, #1
    b44e:	68f8      	ldr	r0, [r7, #12]
    b450:	4b02      	ldr	r3, [pc, #8]	; (b45c <n25q256a_write_reg+0x98>)
    b452:	4798      	blx	r3
	}
}
    b454:	bf00      	nop
    b456:	3730      	adds	r7, #48	; 0x30
    b458:	46bd      	mov	sp, r7
    b45a:	bd80      	pop	{r7, pc}
    b45c:	0000b25d 	.word	0x0000b25d
    b460:	00002705 	.word	0x00002705

0000b464 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b464:	b580      	push	{r7, lr}
    b466:	b090      	sub	sp, #64	; 0x40
    b468:	af00      	add	r7, sp, #0
    b46a:	6078      	str	r0, [r7, #4]
    b46c:	460b      	mov	r3, r1
    b46e:	70fb      	strb	r3, [r7, #3]
    b470:	4613      	mov	r3, r2
    b472:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b474:	687b      	ldr	r3, [r7, #4]
    b476:	681b      	ldr	r3, [r3, #0]
    b478:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b47a:	78bb      	ldrb	r3, [r7, #2]
    b47c:	2b00      	cmp	r3, #0
    b47e:	d001      	beq.n	b484 <n25q256a_write_enable+0x20>
    b480:	2306      	movs	r3, #6
    b482:	e000      	b.n	b486 <n25q256a_write_enable+0x22>
    b484:	2304      	movs	r3, #4
    b486:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b48a:	f107 0320 	add.w	r3, r7, #32
    b48e:	2200      	movs	r2, #0
    b490:	601a      	str	r2, [r3, #0]
    b492:	605a      	str	r2, [r3, #4]
    b494:	609a      	str	r2, [r3, #8]
    b496:	60da      	str	r2, [r3, #12]
    b498:	611a      	str	r2, [r3, #16]
    b49a:	615a      	str	r2, [r3, #20]
    b49c:	78fb      	ldrb	r3, [r7, #3]
    b49e:	f003 0307 	and.w	r3, r3, #7
    b4a2:	b2da      	uxtb	r2, r3
    b4a4:	f897 3020 	ldrb.w	r3, [r7, #32]
    b4a8:	f362 0302 	bfi	r3, r2, #0, #3
    b4ac:	f887 3020 	strb.w	r3, [r7, #32]
    b4b0:	f897 3020 	ldrb.w	r3, [r7, #32]
    b4b4:	f043 0310 	orr.w	r3, r3, #16
    b4b8:	f887 3020 	strb.w	r3, [r7, #32]
    b4bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b4c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b4c4:	f107 0308 	add.w	r3, r7, #8
    b4c8:	2200      	movs	r2, #0
    b4ca:	601a      	str	r2, [r3, #0]
    b4cc:	605a      	str	r2, [r3, #4]
    b4ce:	609a      	str	r2, [r3, #8]
    b4d0:	60da      	str	r2, [r3, #12]
    b4d2:	611a      	str	r2, [r3, #16]
    b4d4:	615a      	str	r2, [r3, #20]
    b4d6:	78fb      	ldrb	r3, [r7, #3]
    b4d8:	f003 0307 	and.w	r3, r3, #7
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	7a3b      	ldrb	r3, [r7, #8]
    b4e0:	f362 0302 	bfi	r3, r2, #0, #3
    b4e4:	723b      	strb	r3, [r7, #8]
    b4e6:	7a3b      	ldrb	r3, [r7, #8]
    b4e8:	f043 0310 	orr.w	r3, r3, #16
    b4ec:	723b      	strb	r3, [r7, #8]
    b4ee:	7a3b      	ldrb	r3, [r7, #8]
    b4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4f4:	723b      	strb	r3, [r7, #8]
    b4f6:	2305      	movs	r3, #5
    b4f8:	733b      	strb	r3, [r7, #12]
    b4fa:	2301      	movs	r3, #1
    b4fc:	617b      	str	r3, [r7, #20]
    b4fe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b502:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b504:	f107 0320 	add.w	r3, r7, #32
    b508:	4619      	mov	r1, r3
    b50a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b50c:	4b08      	ldr	r3, [pc, #32]	; (b530 <n25q256a_write_enable+0xcc>)
    b50e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b510:	f107 0308 	add.w	r3, r7, #8
    b514:	4619      	mov	r1, r3
    b516:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b518:	4b05      	ldr	r3, [pc, #20]	; (b530 <n25q256a_write_enable+0xcc>)
    b51a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b51c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b520:	f003 0302 	and.w	r3, r3, #2
    b524:	2b00      	cmp	r3, #0
    b526:	d0ed      	beq.n	b504 <n25q256a_write_enable+0xa0>
}
    b528:	bf00      	nop
    b52a:	3740      	adds	r7, #64	; 0x40
    b52c:	46bd      	mov	sp, r7
    b52e:	bd80      	pop	{r7, pc}
    b530:	00002705 	.word	0x00002705

0000b534 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b534:	b590      	push	{r4, r7, lr}
    b536:	b087      	sub	sp, #28
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
    b53c:	460b      	mov	r3, r1
    b53e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b544:	68fb      	ldr	r3, [r7, #12]
    b546:	7b1b      	ldrb	r3, [r3, #12]
    b548:	2b00      	cmp	r3, #0
    b54a:	d001      	beq.n	b550 <n25q256a_switch_mode+0x1c>
    b54c:	2306      	movs	r3, #6
    b54e:	e000      	b.n	b552 <n25q256a_switch_mode+0x1e>
    b550:	2300      	movs	r3, #0
    b552:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b554:	7afb      	ldrb	r3, [r7, #11]
    b556:	2265      	movs	r2, #101	; 0x65
    b558:	4619      	mov	r1, r3
    b55a:	6878      	ldr	r0, [r7, #4]
    b55c:	4b25      	ldr	r3, [pc, #148]	; (b5f4 <n25q256a_switch_mode+0xc0>)
    b55e:	4798      	blx	r3
    b560:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b562:	2300      	movs	r3, #0
    b564:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b566:	68fb      	ldr	r3, [r7, #12]
    b568:	7b1b      	ldrb	r3, [r3, #12]
    b56a:	78fa      	ldrb	r2, [r7, #3]
    b56c:	429a      	cmp	r2, r3
    b56e:	d03d      	beq.n	b5ec <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b570:	78fb      	ldrb	r3, [r7, #3]
    b572:	2b00      	cmp	r3, #0
    b574:	d00b      	beq.n	b58e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b576:	697b      	ldr	r3, [r7, #20]
    b578:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b57c:	2b00      	cmp	r3, #0
    b57e:	d011      	beq.n	b5a4 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b580:	697b      	ldr	r3, [r7, #20]
    b582:	f003 031f 	and.w	r3, r3, #31
    b586:	617b      	str	r3, [r7, #20]
			modify = 1;
    b588:	2301      	movs	r3, #1
    b58a:	74fb      	strb	r3, [r7, #19]
    b58c:	e00a      	b.n	b5a4 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b58e:	697b      	ldr	r3, [r7, #20]
    b590:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b594:	2b00      	cmp	r3, #0
    b596:	d105      	bne.n	b5a4 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b598:	697b      	ldr	r3, [r7, #20]
    b59a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b59e:	617b      	str	r3, [r7, #20]
			modify = 1;
    b5a0:	2301      	movs	r3, #1
    b5a2:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b5a4:	7cfb      	ldrb	r3, [r7, #19]
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	d021      	beq.n	b5ee <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b5aa:	68fb      	ldr	r3, [r7, #12]
    b5ac:	78fa      	ldrb	r2, [r7, #3]
    b5ae:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b5b0:	7afb      	ldrb	r3, [r7, #11]
    b5b2:	2201      	movs	r2, #1
    b5b4:	4619      	mov	r1, r3
    b5b6:	6878      	ldr	r0, [r7, #4]
    b5b8:	4b0f      	ldr	r3, [pc, #60]	; (b5f8 <n25q256a_switch_mode+0xc4>)
    b5ba:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b5bc:	7af9      	ldrb	r1, [r7, #11]
    b5be:	697b      	ldr	r3, [r7, #20]
    b5c0:	2261      	movs	r2, #97	; 0x61
    b5c2:	6878      	ldr	r0, [r7, #4]
    b5c4:	4c0d      	ldr	r4, [pc, #52]	; (b5fc <n25q256a_switch_mode+0xc8>)
    b5c6:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b5c8:	78fb      	ldrb	r3, [r7, #3]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d001      	beq.n	b5d2 <n25q256a_switch_mode+0x9e>
    b5ce:	2306      	movs	r3, #6
    b5d0:	e000      	b.n	b5d4 <n25q256a_switch_mode+0xa0>
    b5d2:	2300      	movs	r3, #0
    b5d4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b5d6:	7afb      	ldrb	r3, [r7, #11]
    b5d8:	2265      	movs	r2, #101	; 0x65
    b5da:	4619      	mov	r1, r3
    b5dc:	6878      	ldr	r0, [r7, #4]
    b5de:	4b05      	ldr	r3, [pc, #20]	; (b5f4 <n25q256a_switch_mode+0xc0>)
    b5e0:	4798      	blx	r3
    b5e2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b5e4:	68fb      	ldr	r3, [r7, #12]
    b5e6:	78fa      	ldrb	r2, [r7, #3]
    b5e8:	731a      	strb	r2, [r3, #12]
    b5ea:	e000      	b.n	b5ee <n25q256a_switch_mode+0xba>
		return;
    b5ec:	bf00      	nop
	}
}
    b5ee:	371c      	adds	r7, #28
    b5f0:	46bd      	mov	sp, r7
    b5f2:	bd90      	pop	{r4, r7, pc}
    b5f4:	0000b329 	.word	0x0000b329
    b5f8:	0000b465 	.word	0x0000b465
    b5fc:	0000b3c5 	.word	0x0000b3c5

0000b600 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b600:	b580      	push	{r7, lr}
    b602:	b086      	sub	sp, #24
    b604:	af00      	add	r7, sp, #0
    b606:	60f8      	str	r0, [r7, #12]
    b608:	60b9      	str	r1, [r7, #8]
    b60a:	607a      	str	r2, [r7, #4]
    b60c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b60e:	68fb      	ldr	r3, [r7, #12]
    b610:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b612:	4a0c      	ldr	r2, [pc, #48]	; (b644 <n25q256a_construct+0x44>)
    b614:	68b9      	ldr	r1, [r7, #8]
    b616:	68f8      	ldr	r0, [r7, #12]
    b618:	4b0b      	ldr	r3, [pc, #44]	; (b648 <n25q256a_construct+0x48>)
    b61a:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b61c:	697b      	ldr	r3, [r7, #20]
    b61e:	2200      	movs	r2, #0
    b620:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b622:	697b      	ldr	r3, [r7, #20]
    b624:	2200      	movs	r2, #0
    b626:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b628:	697b      	ldr	r3, [r7, #20]
    b62a:	687a      	ldr	r2, [r7, #4]
    b62c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b62e:	78fb      	ldrb	r3, [r7, #3]
    b630:	4619      	mov	r1, r3
    b632:	68f8      	ldr	r0, [r7, #12]
    b634:	4b05      	ldr	r3, [pc, #20]	; (b64c <n25q256a_construct+0x4c>)
    b636:	4798      	blx	r3
	return me;
    b638:	68fb      	ldr	r3, [r7, #12]
}
    b63a:	4618      	mov	r0, r3
    b63c:	3718      	adds	r7, #24
    b63e:	46bd      	mov	sp, r7
    b640:	bd80      	pop	{r7, pc}
    b642:	bf00      	nop
    b644:	0000ef3c 	.word	0x0000ef3c
    b648:	0000badd 	.word	0x0000badd
    b64c:	0000b535 	.word	0x0000b535

0000b650 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b650:	b580      	push	{r7, lr}
    b652:	b08c      	sub	sp, #48	; 0x30
    b654:	af00      	add	r7, sp, #0
    b656:	60f8      	str	r0, [r7, #12]
    b658:	60b9      	str	r1, [r7, #8]
    b65a:	607a      	str	r2, [r7, #4]
    b65c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b65e:	68fb      	ldr	r3, [r7, #12]
    b660:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b662:	68fb      	ldr	r3, [r7, #12]
    b664:	681b      	ldr	r3, [r3, #0]
    b666:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b668:	f107 0310 	add.w	r3, r7, #16
    b66c:	2200      	movs	r2, #0
    b66e:	601a      	str	r2, [r3, #0]
    b670:	605a      	str	r2, [r3, #4]
    b672:	609a      	str	r2, [r3, #8]
    b674:	60da      	str	r2, [r3, #12]
    b676:	611a      	str	r2, [r3, #16]
    b678:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b67c:	7b1b      	ldrb	r3, [r3, #12]
    b67e:	2b00      	cmp	r3, #0
    b680:	d001      	beq.n	b686 <n25q256a_read+0x36>
    b682:	2206      	movs	r2, #6
    b684:	e000      	b.n	b688 <n25q256a_read+0x38>
    b686:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b688:	7c3b      	ldrb	r3, [r7, #16]
    b68a:	f362 0302 	bfi	r3, r2, #0, #3
    b68e:	743b      	strb	r3, [r7, #16]
    b690:	7c3b      	ldrb	r3, [r7, #16]
    b692:	f043 0310 	orr.w	r3, r3, #16
    b696:	743b      	strb	r3, [r7, #16]
    b698:	7c3b      	ldrb	r3, [r7, #16]
    b69a:	f043 0320 	orr.w	r3, r3, #32
    b69e:	743b      	strb	r3, [r7, #16]
    b6a0:	7c3b      	ldrb	r3, [r7, #16]
    b6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6a6:	743b      	strb	r3, [r7, #16]
    b6a8:	7c7b      	ldrb	r3, [r7, #17]
    b6aa:	2201      	movs	r2, #1
    b6ac:	f362 1305 	bfi	r3, r2, #4, #2
    b6b0:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6b4:	7b1b      	ldrb	r3, [r3, #12]
    b6b6:	2b00      	cmp	r3, #0
    b6b8:	d001      	beq.n	b6be <n25q256a_read+0x6e>
    b6ba:	220a      	movs	r2, #10
    b6bc:	e000      	b.n	b6c0 <n25q256a_read+0x70>
    b6be:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b6c0:	7cbb      	ldrb	r3, [r7, #18]
    b6c2:	f362 0304 	bfi	r3, r2, #0, #5
    b6c6:	74bb      	strb	r3, [r7, #18]
    b6c8:	230b      	movs	r3, #11
    b6ca:	753b      	strb	r3, [r7, #20]
    b6cc:	687b      	ldr	r3, [r7, #4]
    b6ce:	61bb      	str	r3, [r7, #24]
    b6d0:	683b      	ldr	r3, [r7, #0]
    b6d2:	61fb      	str	r3, [r7, #28]
    b6d4:	68bb      	ldr	r3, [r7, #8]
    b6d6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b6d8:	f107 0310 	add.w	r3, r7, #16
    b6dc:	4619      	mov	r1, r3
    b6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b6e0:	4b03      	ldr	r3, [pc, #12]	; (b6f0 <n25q256a_read+0xa0>)
    b6e2:	4798      	blx	r3
	return ERR_NONE;
    b6e4:	2300      	movs	r3, #0
}
    b6e6:	4618      	mov	r0, r3
    b6e8:	3730      	adds	r7, #48	; 0x30
    b6ea:	46bd      	mov	sp, r7
    b6ec:	bd80      	pop	{r7, pc}
    b6ee:	bf00      	nop
    b6f0:	00002705 	.word	0x00002705

0000b6f4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b08c      	sub	sp, #48	; 0x30
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	60f8      	str	r0, [r7, #12]
    b6fc:	60b9      	str	r1, [r7, #8]
    b6fe:	607a      	str	r2, [r7, #4]
    b700:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b702:	68fb      	ldr	r3, [r7, #12]
    b704:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b706:	68fb      	ldr	r3, [r7, #12]
    b708:	681b      	ldr	r3, [r3, #0]
    b70a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b70c:	f107 0310 	add.w	r3, r7, #16
    b710:	2200      	movs	r2, #0
    b712:	601a      	str	r2, [r3, #0]
    b714:	605a      	str	r2, [r3, #4]
    b716:	609a      	str	r2, [r3, #8]
    b718:	60da      	str	r2, [r3, #12]
    b71a:	611a      	str	r2, [r3, #16]
    b71c:	615a      	str	r2, [r3, #20]
    b71e:	7c3b      	ldrb	r3, [r7, #16]
    b720:	f043 0310 	orr.w	r3, r3, #16
    b724:	743b      	strb	r3, [r7, #16]
    b726:	7c3b      	ldrb	r3, [r7, #16]
    b728:	f043 0320 	orr.w	r3, r3, #32
    b72c:	743b      	strb	r3, [r7, #16]
    b72e:	7c3b      	ldrb	r3, [r7, #16]
    b730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b734:	743b      	strb	r3, [r7, #16]
    b736:	7c7b      	ldrb	r3, [r7, #17]
    b738:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b73c:	747b      	strb	r3, [r7, #17]
    b73e:	2302      	movs	r3, #2
    b740:	753b      	strb	r3, [r7, #20]
    b742:	687b      	ldr	r3, [r7, #4]
    b744:	61bb      	str	r3, [r7, #24]
    b746:	683b      	ldr	r3, [r7, #0]
    b748:	61fb      	str	r3, [r7, #28]
    b74a:	68bb      	ldr	r3, [r7, #8]
    b74c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b750:	7b1b      	ldrb	r3, [r3, #12]
    b752:	2b00      	cmp	r3, #0
    b754:	d001      	beq.n	b75a <n25q256a_write+0x66>
    b756:	2206      	movs	r2, #6
    b758:	e000      	b.n	b75c <n25q256a_write+0x68>
    b75a:	2200      	movs	r2, #0
    b75c:	7c3b      	ldrb	r3, [r7, #16]
    b75e:	f362 0302 	bfi	r3, r2, #0, #3
    b762:	743b      	strb	r3, [r7, #16]
	while (length) {
    b764:	e035      	b.n	b7d2 <n25q256a_write+0xde>
		cmd.address = address;
    b766:	687b      	ldr	r3, [r7, #4]
    b768:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b76a:	683b      	ldr	r3, [r7, #0]
    b76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b770:	d802      	bhi.n	b778 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b772:	683b      	ldr	r3, [r7, #0]
    b774:	61fb      	str	r3, [r7, #28]
    b776:	e002      	b.n	b77e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b778:	f44f 7380 	mov.w	r3, #256	; 0x100
    b77c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b77e:	7c3b      	ldrb	r3, [r7, #16]
    b780:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b784:	b2db      	uxtb	r3, r3
    b786:	2201      	movs	r2, #1
    b788:	4619      	mov	r1, r3
    b78a:	68f8      	ldr	r0, [r7, #12]
    b78c:	4b19      	ldr	r3, [pc, #100]	; (b7f4 <n25q256a_write+0x100>)
    b78e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b790:	f107 0310 	add.w	r3, r7, #16
    b794:	4619      	mov	r1, r3
    b796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b798:	4b17      	ldr	r3, [pc, #92]	; (b7f8 <n25q256a_write+0x104>)
    b79a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b79c:	bf00      	nop
    b79e:	7c3b      	ldrb	r3, [r7, #16]
    b7a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	2270      	movs	r2, #112	; 0x70
    b7a8:	4619      	mov	r1, r3
    b7aa:	68f8      	ldr	r0, [r7, #12]
    b7ac:	4b13      	ldr	r3, [pc, #76]	; (b7fc <n25q256a_write+0x108>)
    b7ae:	4798      	blx	r3
    b7b0:	4603      	mov	r3, r0
    b7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d0f1      	beq.n	b79e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b7ba:	6a3a      	ldr	r2, [r7, #32]
    b7bc:	69fb      	ldr	r3, [r7, #28]
    b7be:	4413      	add	r3, r2
    b7c0:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b7c2:	69fb      	ldr	r3, [r7, #28]
    b7c4:	683a      	ldr	r2, [r7, #0]
    b7c6:	1ad3      	subs	r3, r2, r3
    b7c8:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b7ca:	69fb      	ldr	r3, [r7, #28]
    b7cc:	687a      	ldr	r2, [r7, #4]
    b7ce:	4413      	add	r3, r2
    b7d0:	607b      	str	r3, [r7, #4]
	while (length) {
    b7d2:	683b      	ldr	r3, [r7, #0]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d1c6      	bne.n	b766 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7da:	7b5b      	ldrb	r3, [r3, #13]
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d003      	beq.n	b7e8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b7e0:	2101      	movs	r1, #1
    b7e2:	68f8      	ldr	r0, [r7, #12]
    b7e4:	4b06      	ldr	r3, [pc, #24]	; (b800 <n25q256a_write+0x10c>)
    b7e6:	4798      	blx	r3
	}
	return ERR_NONE;
    b7e8:	2300      	movs	r3, #0
}
    b7ea:	4618      	mov	r0, r3
    b7ec:	3730      	adds	r7, #48	; 0x30
    b7ee:	46bd      	mov	sp, r7
    b7f0:	bd80      	pop	{r7, pc}
    b7f2:	bf00      	nop
    b7f4:	0000b465 	.word	0x0000b465
    b7f8:	00002705 	.word	0x00002705
    b7fc:	0000b329 	.word	0x0000b329
    b800:	0000b25d 	.word	0x0000b25d

0000b804 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b804:	b580      	push	{r7, lr}
    b806:	b090      	sub	sp, #64	; 0x40
    b808:	af00      	add	r7, sp, #0
    b80a:	60f8      	str	r0, [r7, #12]
    b80c:	60b9      	str	r1, [r7, #8]
    b80e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b814:	68fb      	ldr	r3, [r7, #12]
    b816:	681b      	ldr	r3, [r3, #0]
    b818:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b81a:	f107 0314 	add.w	r3, r7, #20
    b81e:	2200      	movs	r2, #0
    b820:	601a      	str	r2, [r3, #0]
    b822:	605a      	str	r2, [r3, #4]
    b824:	609a      	str	r2, [r3, #8]
    b826:	60da      	str	r2, [r3, #12]
    b828:	611a      	str	r2, [r3, #16]
    b82a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b82e:	7b1b      	ldrb	r3, [r3, #12]
    b830:	2b00      	cmp	r3, #0
    b832:	d001      	beq.n	b838 <n25q256a_erase+0x34>
    b834:	2206      	movs	r2, #6
    b836:	e000      	b.n	b83a <n25q256a_erase+0x36>
    b838:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b83a:	7d3b      	ldrb	r3, [r7, #20]
    b83c:	f362 0302 	bfi	r3, r2, #0, #3
    b840:	753b      	strb	r3, [r7, #20]
    b842:	7d3b      	ldrb	r3, [r7, #20]
    b844:	f043 0310 	orr.w	r3, r3, #16
    b848:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b84a:	687b      	ldr	r3, [r7, #4]
    b84c:	4a56      	ldr	r2, [pc, #344]	; (b9a8 <n25q256a_erase+0x1a4>)
    b84e:	4293      	cmp	r3, r2
    b850:	bf94      	ite	ls
    b852:	2301      	movls	r3, #1
    b854:	2300      	movhi	r3, #0
    b856:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b858:	7d3b      	ldrb	r3, [r7, #20]
    b85a:	f362 1345 	bfi	r3, r2, #5, #1
    b85e:	753b      	strb	r3, [r7, #20]
    b860:	7d7b      	ldrb	r3, [r7, #21]
    b862:	2202      	movs	r2, #2
    b864:	f362 1305 	bfi	r3, r2, #4, #2
    b868:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b86a:	68bb      	ldr	r3, [r7, #8]
    b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b86e:	687b      	ldr	r3, [r7, #4]
    b870:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b872:	2300      	movs	r3, #0
    b874:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b87c:	2b00      	cmp	r3, #0
    b87e:	d104      	bne.n	b88a <n25q256a_erase+0x86>
    b880:	68bb      	ldr	r3, [r7, #8]
    b882:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b886:	2b00      	cmp	r3, #0
    b888:	d002      	beq.n	b890 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b88a:	f06f 030c 	mvn.w	r3, #12
    b88e:	e087      	b.n	b9a0 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b896:	d368      	bcc.n	b96a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b898:	23c7      	movs	r3, #199	; 0xc7
    b89a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b89c:	7d3b      	ldrb	r3, [r7, #20]
    b89e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8a2:	b2db      	uxtb	r3, r3
    b8a4:	2201      	movs	r2, #1
    b8a6:	4619      	mov	r1, r3
    b8a8:	68f8      	ldr	r0, [r7, #12]
    b8aa:	4b40      	ldr	r3, [pc, #256]	; (b9ac <n25q256a_erase+0x1a8>)
    b8ac:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b8ae:	f107 0314 	add.w	r3, r7, #20
    b8b2:	4619      	mov	r1, r3
    b8b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8b6:	4b3e      	ldr	r3, [pc, #248]	; (b9b0 <n25q256a_erase+0x1ac>)
    b8b8:	4798      	blx	r3
    b8ba:	e059      	b.n	b970 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8be:	b29b      	uxth	r3, r3
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d11f      	bne.n	b904 <n25q256a_erase+0x100>
    b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b8ca:	d31b      	bcc.n	b904 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8ce:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b8d0:	23d8      	movs	r3, #216	; 0xd8
    b8d2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b8d4:	7d3b      	ldrb	r3, [r7, #20]
    b8d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8da:	b2db      	uxtb	r3, r3
    b8dc:	2201      	movs	r2, #1
    b8de:	4619      	mov	r1, r3
    b8e0:	68f8      	ldr	r0, [r7, #12]
    b8e2:	4b32      	ldr	r3, [pc, #200]	; (b9ac <n25q256a_erase+0x1a8>)
    b8e4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b8e6:	f107 0314 	add.w	r3, r7, #20
    b8ea:	4619      	mov	r1, r3
    b8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b8ee:	4b30      	ldr	r3, [pc, #192]	; (b9b0 <n25q256a_erase+0x1ac>)
    b8f0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b8fc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b900:	63bb      	str	r3, [r7, #56]	; 0x38
    b902:	e023      	b.n	b94c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b90a:	d31b      	bcc.n	b944 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b90e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b910:	2320      	movs	r3, #32
    b912:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b914:	7d3b      	ldrb	r3, [r7, #20]
    b916:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b91a:	b2db      	uxtb	r3, r3
    b91c:	2201      	movs	r2, #1
    b91e:	4619      	mov	r1, r3
    b920:	68f8      	ldr	r0, [r7, #12]
    b922:	4b22      	ldr	r3, [pc, #136]	; (b9ac <n25q256a_erase+0x1a8>)
    b924:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b926:	f107 0314 	add.w	r3, r7, #20
    b92a:	4619      	mov	r1, r3
    b92c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b92e:	4b20      	ldr	r3, [pc, #128]	; (b9b0 <n25q256a_erase+0x1ac>)
    b930:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b938:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b93c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b940:	63bb      	str	r3, [r7, #56]	; 0x38
    b942:	e003      	b.n	b94c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b944:	f06f 030c 	mvn.w	r3, #12
    b948:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b94a:	e011      	b.n	b970 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b94c:	bf00      	nop
    b94e:	7d3b      	ldrb	r3, [r7, #20]
    b950:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b954:	b2db      	uxtb	r3, r3
    b956:	2270      	movs	r2, #112	; 0x70
    b958:	4619      	mov	r1, r3
    b95a:	68f8      	ldr	r0, [r7, #12]
    b95c:	4b15      	ldr	r3, [pc, #84]	; (b9b4 <n25q256a_erase+0x1b0>)
    b95e:	4798      	blx	r3
    b960:	4603      	mov	r3, r0
    b962:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b966:	2b00      	cmp	r3, #0
    b968:	d0f1      	beq.n	b94e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b96c:	2b00      	cmp	r3, #0
    b96e:	d1a5      	bne.n	b8bc <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b970:	bf00      	nop
    b972:	7d3b      	ldrb	r3, [r7, #20]
    b974:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b978:	b2db      	uxtb	r3, r3
    b97a:	2270      	movs	r2, #112	; 0x70
    b97c:	4619      	mov	r1, r3
    b97e:	68f8      	ldr	r0, [r7, #12]
    b980:	4b0c      	ldr	r3, [pc, #48]	; (b9b4 <n25q256a_erase+0x1b0>)
    b982:	4798      	blx	r3
    b984:	4603      	mov	r3, r0
    b986:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b98a:	2b00      	cmp	r3, #0
    b98c:	d0f1      	beq.n	b972 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b990:	7b5b      	ldrb	r3, [r3, #13]
    b992:	2b00      	cmp	r3, #0
    b994:	d003      	beq.n	b99e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b996:	2101      	movs	r1, #1
    b998:	68f8      	ldr	r0, [r7, #12]
    b99a:	4b07      	ldr	r3, [pc, #28]	; (b9b8 <n25q256a_erase+0x1b4>)
    b99c:	4798      	blx	r3
	}
	return rc;
    b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b9a0:	4618      	mov	r0, r3
    b9a2:	3740      	adds	r7, #64	; 0x40
    b9a4:	46bd      	mov	sp, r7
    b9a6:	bd80      	pop	{r7, pc}
    b9a8:	001fffff 	.word	0x001fffff
    b9ac:	0000b465 	.word	0x0000b465
    b9b0:	00002705 	.word	0x00002705
    b9b4:	0000b329 	.word	0x0000b329
    b9b8:	0000b25d 	.word	0x0000b25d

0000b9bc <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b9bc:	b590      	push	{r4, r7, lr}
    b9be:	b085      	sub	sp, #20
    b9c0:	af00      	add	r7, sp, #0
    b9c2:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b9c4:	687b      	ldr	r3, [r7, #4]
    b9c6:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b9c8:	68fb      	ldr	r3, [r7, #12]
    b9ca:	7b1b      	ldrb	r3, [r3, #12]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d001      	beq.n	b9d4 <n25q256a_enable_xip+0x18>
    b9d0:	2306      	movs	r3, #6
    b9d2:	e000      	b.n	b9d6 <n25q256a_enable_xip+0x1a>
    b9d4:	2300      	movs	r3, #0
    b9d6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b9d8:	68fb      	ldr	r3, [r7, #12]
    b9da:	7b5b      	ldrb	r3, [r3, #13]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d129      	bne.n	ba34 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b9e0:	7afb      	ldrb	r3, [r7, #11]
    b9e2:	2285      	movs	r2, #133	; 0x85
    b9e4:	4619      	mov	r1, r3
    b9e6:	6878      	ldr	r0, [r7, #4]
    b9e8:	4b15      	ldr	r3, [pc, #84]	; (ba40 <n25q256a_enable_xip+0x84>)
    b9ea:	4798      	blx	r3
    b9ec:	4603      	mov	r3, r0
    b9ee:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b9f0:	7abb      	ldrb	r3, [r7, #10]
    b9f2:	f003 0308 	and.w	r3, r3, #8
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d015      	beq.n	ba26 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b9fa:	7abb      	ldrb	r3, [r7, #10]
    b9fc:	f023 0308 	bic.w	r3, r3, #8
    ba00:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    ba02:	7abb      	ldrb	r3, [r7, #10]
    ba04:	7af9      	ldrb	r1, [r7, #11]
    ba06:	2281      	movs	r2, #129	; 0x81
    ba08:	6878      	ldr	r0, [r7, #4]
    ba0a:	4c0e      	ldr	r4, [pc, #56]	; (ba44 <n25q256a_enable_xip+0x88>)
    ba0c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba0e:	bf00      	nop
    ba10:	7afb      	ldrb	r3, [r7, #11]
    ba12:	2270      	movs	r2, #112	; 0x70
    ba14:	4619      	mov	r1, r3
    ba16:	6878      	ldr	r0, [r7, #4]
    ba18:	4b09      	ldr	r3, [pc, #36]	; (ba40 <n25q256a_enable_xip+0x84>)
    ba1a:	4798      	blx	r3
    ba1c:	4603      	mov	r3, r0
    ba1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba22:	2b00      	cmp	r3, #0
    ba24:	d0f4      	beq.n	ba10 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    ba26:	68fb      	ldr	r3, [r7, #12]
    ba28:	2201      	movs	r2, #1
    ba2a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    ba2c:	2101      	movs	r1, #1
    ba2e:	6878      	ldr	r0, [r7, #4]
    ba30:	4b05      	ldr	r3, [pc, #20]	; (ba48 <n25q256a_enable_xip+0x8c>)
    ba32:	4798      	blx	r3
	}
	return ERR_NONE;
    ba34:	2300      	movs	r3, #0
}
    ba36:	4618      	mov	r0, r3
    ba38:	3714      	adds	r7, #20
    ba3a:	46bd      	mov	sp, r7
    ba3c:	bd90      	pop	{r4, r7, pc}
    ba3e:	bf00      	nop
    ba40:	0000b329 	.word	0x0000b329
    ba44:	0000b3c5 	.word	0x0000b3c5
    ba48:	0000b25d 	.word	0x0000b25d

0000ba4c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    ba4c:	b580      	push	{r7, lr}
    ba4e:	b086      	sub	sp, #24
    ba50:	af00      	add	r7, sp, #0
    ba52:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba54:	687b      	ldr	r3, [r7, #4]
    ba56:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba58:	687b      	ldr	r3, [r7, #4]
    ba5a:	681b      	ldr	r3, [r3, #0]
    ba5c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba5e:	697b      	ldr	r3, [r7, #20]
    ba60:	7b1b      	ldrb	r3, [r3, #12]
    ba62:	2b00      	cmp	r3, #0
    ba64:	d001      	beq.n	ba6a <n25q256a_disable_xip+0x1e>
    ba66:	2306      	movs	r3, #6
    ba68:	e000      	b.n	ba6c <n25q256a_disable_xip+0x20>
    ba6a:	2300      	movs	r3, #0
    ba6c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    ba6e:	2100      	movs	r1, #0
    ba70:	6878      	ldr	r0, [r7, #4]
    ba72:	4b15      	ldr	r3, [pc, #84]	; (bac8 <n25q256a_disable_xip+0x7c>)
    ba74:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    ba76:	7bfb      	ldrb	r3, [r7, #15]
    ba78:	2285      	movs	r2, #133	; 0x85
    ba7a:	4619      	mov	r1, r3
    ba7c:	6878      	ldr	r0, [r7, #4]
    ba7e:	4b13      	ldr	r3, [pc, #76]	; (bacc <n25q256a_disable_xip+0x80>)
    ba80:	4798      	blx	r3
    ba82:	4603      	mov	r3, r0
    ba84:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    ba86:	7bbb      	ldrb	r3, [r7, #14]
    ba88:	f003 0308 	and.w	r3, r3, #8
    ba8c:	2b00      	cmp	r3, #0
    ba8e:	d113      	bne.n	bab8 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    ba90:	697b      	ldr	r3, [r7, #20]
    ba92:	689b      	ldr	r3, [r3, #8]
    ba94:	2b00      	cmp	r3, #0
    ba96:	d00f      	beq.n	bab8 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    ba98:	693b      	ldr	r3, [r7, #16]
    ba9a:	681b      	ldr	r3, [r3, #0]
    ba9c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    ba9e:	6938      	ldr	r0, [r7, #16]
    baa0:	4b0b      	ldr	r3, [pc, #44]	; (bad0 <n25q256a_disable_xip+0x84>)
    baa2:	4798      	blx	r3
			n25q->pin_exit_xip();
    baa4:	697b      	ldr	r3, [r7, #20]
    baa6:	689b      	ldr	r3, [r3, #8]
    baa8:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    baaa:	68b9      	ldr	r1, [r7, #8]
    baac:	6938      	ldr	r0, [r7, #16]
    baae:	4b09      	ldr	r3, [pc, #36]	; (bad4 <n25q256a_disable_xip+0x88>)
    bab0:	4798      	blx	r3
			qspi_sync_enable(descr);
    bab2:	6938      	ldr	r0, [r7, #16]
    bab4:	4b08      	ldr	r3, [pc, #32]	; (bad8 <n25q256a_disable_xip+0x8c>)
    bab6:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bab8:	697b      	ldr	r3, [r7, #20]
    baba:	2200      	movs	r2, #0
    babc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    babe:	2300      	movs	r3, #0
}
    bac0:	4618      	mov	r0, r3
    bac2:	3718      	adds	r7, #24
    bac4:	46bd      	mov	sp, r7
    bac6:	bd80      	pop	{r7, pc}
    bac8:	0000b25d 	.word	0x0000b25d
    bacc:	0000b329 	.word	0x0000b329
    bad0:	000026c9 	.word	0x000026c9
    bad4:	00002641 	.word	0x00002641
    bad8:	0000268d 	.word	0x0000268d

0000badc <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    badc:	b480      	push	{r7}
    bade:	b085      	sub	sp, #20
    bae0:	af00      	add	r7, sp, #0
    bae2:	60f8      	str	r0, [r7, #12]
    bae4:	60b9      	str	r1, [r7, #8]
    bae6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bae8:	68fb      	ldr	r3, [r7, #12]
    baea:	68ba      	ldr	r2, [r7, #8]
    baec:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    baee:	68fb      	ldr	r3, [r7, #12]
    baf0:	687a      	ldr	r2, [r7, #4]
    baf2:	605a      	str	r2, [r3, #4]

	return me;
    baf4:	68fb      	ldr	r3, [r7, #12]
}
    baf6:	4618      	mov	r0, r3
    baf8:	3714      	adds	r7, #20
    bafa:	46bd      	mov	sp, r7
    bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb00:	4770      	bx	lr

0000bb02 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bb02:	b480      	push	{r7}
    bb04:	b083      	sub	sp, #12
    bb06:	af00      	add	r7, sp, #0
    bb08:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bb0a:	687b      	ldr	r3, [r7, #4]
    bb0c:	781b      	ldrb	r3, [r3, #0]
    bb0e:	b29a      	uxth	r2, r3
    bb10:	687b      	ldr	r3, [r7, #4]
    bb12:	3301      	adds	r3, #1
    bb14:	781b      	ldrb	r3, [r3, #0]
    bb16:	b29b      	uxth	r3, r3
    bb18:	021b      	lsls	r3, r3, #8
    bb1a:	b29b      	uxth	r3, r3
    bb1c:	4413      	add	r3, r2
    bb1e:	b29b      	uxth	r3, r3
}
    bb20:	4618      	mov	r0, r3
    bb22:	370c      	adds	r7, #12
    bb24:	46bd      	mov	sp, r7
    bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb2a:	4770      	bx	lr

0000bb2c <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    bb2c:	b480      	push	{r7}
    bb2e:	b083      	sub	sp, #12
    bb30:	af00      	add	r7, sp, #0
    bb32:	6078      	str	r0, [r7, #4]
	return desc[0];
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	781b      	ldrb	r3, [r3, #0]
}
    bb38:	4618      	mov	r0, r3
    bb3a:	370c      	adds	r7, #12
    bb3c:	46bd      	mov	sp, r7
    bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb42:	4770      	bx	lr

0000bb44 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    bb44:	b580      	push	{r7, lr}
    bb46:	b082      	sub	sp, #8
    bb48:	af00      	add	r7, sp, #0
    bb4a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    bb4c:	6878      	ldr	r0, [r7, #4]
    bb4e:	4b05      	ldr	r3, [pc, #20]	; (bb64 <usb_desc_next+0x20>)
    bb50:	4798      	blx	r3
    bb52:	4603      	mov	r3, r0
    bb54:	461a      	mov	r2, r3
    bb56:	687b      	ldr	r3, [r7, #4]
    bb58:	4413      	add	r3, r2
}
    bb5a:	4618      	mov	r0, r3
    bb5c:	3708      	adds	r7, #8
    bb5e:	46bd      	mov	sp, r7
    bb60:	bd80      	pop	{r7, pc}
    bb62:	bf00      	nop
    bb64:	0000bb2d 	.word	0x0000bb2d

0000bb68 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bb68:	b580      	push	{r7, lr}
    bb6a:	b08c      	sub	sp, #48	; 0x30
    bb6c:	af00      	add	r7, sp, #0
    bb6e:	6078      	str	r0, [r7, #4]
    bb70:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bb72:	687b      	ldr	r3, [r7, #4]
    bb74:	689b      	ldr	r3, [r3, #8]
    bb76:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bb78:	683b      	ldr	r3, [r7, #0]
    bb7a:	681b      	ldr	r3, [r3, #0]
    bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bb7e:	2300      	movs	r3, #0
    bb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bb84:	e08f      	b.n	bca6 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d102      	bne.n	bb92 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    bb8c:	f06f 0309 	mvn.w	r3, #9
    bb90:	e092      	b.n	bcb8 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb94:	789b      	ldrb	r3, [r3, #2]
    bb96:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb9a:	795b      	ldrb	r3, [r3, #5]
    bb9c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    bb9e:	7c7b      	ldrb	r3, [r7, #17]
    bba0:	2b02      	cmp	r3, #2
    bba2:	d002      	beq.n	bbaa <cdcdf_acm_enable+0x42>
    bba4:	7c7b      	ldrb	r3, [r7, #17]
    bba6:	2b0a      	cmp	r3, #10
    bba8:	d121      	bne.n	bbee <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbae:	6a3a      	ldr	r2, [r7, #32]
    bbb0:	5cd2      	ldrb	r2, [r2, r3]
    bbb2:	7bbb      	ldrb	r3, [r7, #14]
    bbb4:	429a      	cmp	r2, r3
    bbb6:	d102      	bne.n	bbbe <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bbb8:	f06f 0311 	mvn.w	r3, #17
    bbbc:	e07c      	b.n	bcb8 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbc2:	6a3a      	ldr	r2, [r7, #32]
    bbc4:	5cd3      	ldrb	r3, [r2, r3]
    bbc6:	2bff      	cmp	r3, #255	; 0xff
    bbc8:	d002      	beq.n	bbd0 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bbca:	f06f 031b 	mvn.w	r3, #27
    bbce:	e073      	b.n	bcb8 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bbd4:	7bb9      	ldrb	r1, [r7, #14]
    bbd6:	6a3a      	ldr	r2, [r7, #32]
    bbd8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bbda:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bbdc:	683b      	ldr	r3, [r7, #0]
    bbde:	685b      	ldr	r3, [r3, #4]
    bbe0:	2205      	movs	r2, #5
    bbe2:	4619      	mov	r1, r3
    bbe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbe6:	4b36      	ldr	r3, [pc, #216]	; (bcc0 <cdcdf_acm_enable+0x158>)
    bbe8:	4798      	blx	r3
    bbea:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bbec:	e047      	b.n	bc7e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bbee:	f06f 0309 	mvn.w	r3, #9
    bbf2:	e061      	b.n	bcb8 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbf6:	789b      	ldrb	r3, [r3, #2]
    bbf8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bbfc:	78db      	ldrb	r3, [r3, #3]
    bbfe:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc02:	3304      	adds	r3, #4
    bc04:	4618      	mov	r0, r3
    bc06:	4b2f      	ldr	r3, [pc, #188]	; (bcc4 <cdcdf_acm_enable+0x15c>)
    bc08:	4798      	blx	r3
    bc0a:	4603      	mov	r3, r0
    bc0c:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bc0e:	7ebb      	ldrb	r3, [r7, #26]
    bc10:	7ef9      	ldrb	r1, [r7, #27]
    bc12:	8bba      	ldrh	r2, [r7, #28]
    bc14:	4618      	mov	r0, r3
    bc16:	4b2c      	ldr	r3, [pc, #176]	; (bcc8 <cdcdf_acm_enable+0x160>)
    bc18:	4798      	blx	r3
    bc1a:	4603      	mov	r3, r0
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d002      	beq.n	bc26 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bc20:	f06f 0313 	mvn.w	r3, #19
    bc24:	e048      	b.n	bcb8 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bc26:	7ebb      	ldrb	r3, [r7, #26]
    bc28:	b25b      	sxtb	r3, r3
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	da0f      	bge.n	bc4e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc32:	7eb9      	ldrb	r1, [r7, #26]
    bc34:	6a3a      	ldr	r2, [r7, #32]
    bc36:	4413      	add	r3, r2
    bc38:	460a      	mov	r2, r1
    bc3a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bc40:	6a3a      	ldr	r2, [r7, #32]
    bc42:	4413      	add	r3, r2
    bc44:	789b      	ldrb	r3, [r3, #2]
    bc46:	4618      	mov	r0, r3
    bc48:	4b20      	ldr	r3, [pc, #128]	; (bccc <cdcdf_acm_enable+0x164>)
    bc4a:	4798      	blx	r3
    bc4c:	e007      	b.n	bc5e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bc4e:	7eba      	ldrb	r2, [r7, #26]
    bc50:	6a3b      	ldr	r3, [r7, #32]
    bc52:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bc54:	6a3b      	ldr	r3, [r7, #32]
    bc56:	791b      	ldrb	r3, [r3, #4]
    bc58:	4618      	mov	r0, r3
    bc5a:	4b1c      	ldr	r3, [pc, #112]	; (bccc <cdcdf_acm_enable+0x164>)
    bc5c:	4798      	blx	r3
			}
			desc->sod = ep;
    bc5e:	683b      	ldr	r3, [r7, #0]
    bc60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc62:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bc64:	683b      	ldr	r3, [r7, #0]
    bc66:	681b      	ldr	r3, [r3, #0]
    bc68:	4618      	mov	r0, r3
    bc6a:	4b19      	ldr	r3, [pc, #100]	; (bcd0 <cdcdf_acm_enable+0x168>)
    bc6c:	4798      	blx	r3
    bc6e:	4602      	mov	r2, r0
    bc70:	683b      	ldr	r3, [r7, #0]
    bc72:	685b      	ldr	r3, [r3, #4]
    bc74:	4619      	mov	r1, r3
    bc76:	4610      	mov	r0, r2
    bc78:	4b16      	ldr	r3, [pc, #88]	; (bcd4 <cdcdf_acm_enable+0x16c>)
    bc7a:	4798      	blx	r3
    bc7c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc80:	2b00      	cmp	r3, #0
    bc82:	d1b7      	bne.n	bbf4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bc84:	683b      	ldr	r3, [r7, #0]
    bc86:	681b      	ldr	r3, [r3, #0]
    bc88:	4618      	mov	r0, r3
    bc8a:	4b11      	ldr	r3, [pc, #68]	; (bcd0 <cdcdf_acm_enable+0x168>)
    bc8c:	4798      	blx	r3
    bc8e:	683b      	ldr	r3, [r7, #0]
    bc90:	685b      	ldr	r3, [r3, #4]
    bc92:	2204      	movs	r2, #4
    bc94:	4619      	mov	r1, r3
    bc96:	4b0a      	ldr	r3, [pc, #40]	; (bcc0 <cdcdf_acm_enable+0x158>)
    bc98:	4798      	blx	r3
    bc9a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bca0:	3301      	adds	r3, #1
    bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bcaa:	2b01      	cmp	r3, #1
    bcac:	f67f af6b 	bls.w	bb86 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bcb0:	4b09      	ldr	r3, [pc, #36]	; (bcd8 <cdcdf_acm_enable+0x170>)
    bcb2:	2201      	movs	r2, #1
    bcb4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bcb6:	2300      	movs	r3, #0
}
    bcb8:	4618      	mov	r0, r3
    bcba:	3730      	adds	r7, #48	; 0x30
    bcbc:	46bd      	mov	sp, r7
    bcbe:	bd80      	pop	{r7, pc}
    bcc0:	0000cf29 	.word	0x0000cf29
    bcc4:	0000bb03 	.word	0x0000bb03
    bcc8:	000032b9 	.word	0x000032b9
    bccc:	000033a5 	.word	0x000033a5
    bcd0:	0000bb45 	.word	0x0000bb45
    bcd4:	0000cf85 	.word	0x0000cf85
    bcd8:	20000c70 	.word	0x20000c70

0000bcdc <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bcdc:	b580      	push	{r7, lr}
    bcde:	b088      	sub	sp, #32
    bce0:	af00      	add	r7, sp, #0
    bce2:	6078      	str	r0, [r7, #4]
    bce4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bce6:	687b      	ldr	r3, [r7, #4]
    bce8:	689b      	ldr	r3, [r3, #8]
    bcea:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bcec:	683b      	ldr	r3, [r7, #0]
    bcee:	2b00      	cmp	r3, #0
    bcf0:	d00c      	beq.n	bd0c <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bcf2:	683b      	ldr	r3, [r7, #0]
    bcf4:	681b      	ldr	r3, [r3, #0]
    bcf6:	795b      	ldrb	r3, [r3, #5]
    bcf8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bcfa:	7c7b      	ldrb	r3, [r7, #17]
    bcfc:	2b02      	cmp	r3, #2
    bcfe:	d005      	beq.n	bd0c <cdcdf_acm_disable+0x30>
    bd00:	7c7b      	ldrb	r3, [r7, #17]
    bd02:	2b0a      	cmp	r3, #10
    bd04:	d002      	beq.n	bd0c <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bd06:	f06f 0309 	mvn.w	r3, #9
    bd0a:	e035      	b.n	bd78 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bd0c:	2300      	movs	r3, #0
    bd0e:	77fb      	strb	r3, [r7, #31]
    bd10:	e01f      	b.n	bd52 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bd12:	7ffb      	ldrb	r3, [r7, #31]
    bd14:	69ba      	ldr	r2, [r7, #24]
    bd16:	5cd3      	ldrb	r3, [r2, r3]
    bd18:	2bff      	cmp	r3, #255	; 0xff
    bd1a:	d016      	beq.n	bd4a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    bd1c:	7ffb      	ldrb	r3, [r7, #31]
    bd1e:	69ba      	ldr	r2, [r7, #24]
    bd20:	21ff      	movs	r1, #255	; 0xff
    bd22:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    bd24:	7ffb      	ldrb	r3, [r7, #31]
    bd26:	69ba      	ldr	r2, [r7, #24]
    bd28:	4413      	add	r3, r2
    bd2a:	789b      	ldrb	r3, [r3, #2]
    bd2c:	2bff      	cmp	r3, #255	; 0xff
    bd2e:	d00d      	beq.n	bd4c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bd30:	7ffb      	ldrb	r3, [r7, #31]
    bd32:	69ba      	ldr	r2, [r7, #24]
    bd34:	4413      	add	r3, r2
    bd36:	789b      	ldrb	r3, [r3, #2]
    bd38:	4618      	mov	r0, r3
    bd3a:	4b11      	ldr	r3, [pc, #68]	; (bd80 <cdcdf_acm_disable+0xa4>)
    bd3c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bd3e:	7ffb      	ldrb	r3, [r7, #31]
    bd40:	69ba      	ldr	r2, [r7, #24]
    bd42:	4413      	add	r3, r2
    bd44:	22ff      	movs	r2, #255	; 0xff
    bd46:	709a      	strb	r2, [r3, #2]
    bd48:	e000      	b.n	bd4c <cdcdf_acm_disable+0x70>
			continue;
    bd4a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    bd4c:	7ffb      	ldrb	r3, [r7, #31]
    bd4e:	3301      	adds	r3, #1
    bd50:	77fb      	strb	r3, [r7, #31]
    bd52:	7ffb      	ldrb	r3, [r7, #31]
    bd54:	2b01      	cmp	r3, #1
    bd56:	d9dc      	bls.n	bd12 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    bd58:	69bb      	ldr	r3, [r7, #24]
    bd5a:	791b      	ldrb	r3, [r3, #4]
    bd5c:	2bff      	cmp	r3, #255	; 0xff
    bd5e:	d007      	beq.n	bd70 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    bd60:	69bb      	ldr	r3, [r7, #24]
    bd62:	791b      	ldrb	r3, [r3, #4]
    bd64:	4618      	mov	r0, r3
    bd66:	4b06      	ldr	r3, [pc, #24]	; (bd80 <cdcdf_acm_disable+0xa4>)
    bd68:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bd6a:	69bb      	ldr	r3, [r7, #24]
    bd6c:	22ff      	movs	r2, #255	; 0xff
    bd6e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    bd70:	4b04      	ldr	r3, [pc, #16]	; (bd84 <cdcdf_acm_disable+0xa8>)
    bd72:	2200      	movs	r2, #0
    bd74:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bd76:	2300      	movs	r3, #0
}
    bd78:	4618      	mov	r0, r3
    bd7a:	3720      	adds	r7, #32
    bd7c:	46bd      	mov	sp, r7
    bd7e:	bd80      	pop	{r7, pc}
    bd80:	00003355 	.word	0x00003355
    bd84:	20000c70 	.word	0x20000c70

0000bd88 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    bd88:	b580      	push	{r7, lr}
    bd8a:	b084      	sub	sp, #16
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	60f8      	str	r0, [r7, #12]
    bd90:	460b      	mov	r3, r1
    bd92:	607a      	str	r2, [r7, #4]
    bd94:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    bd96:	7afb      	ldrb	r3, [r7, #11]
    bd98:	2b01      	cmp	r3, #1
    bd9a:	d009      	beq.n	bdb0 <cdcdf_acm_ctrl+0x28>
    bd9c:	2b02      	cmp	r3, #2
    bd9e:	d00d      	beq.n	bdbc <cdcdf_acm_ctrl+0x34>
    bda0:	2b00      	cmp	r3, #0
    bda2:	d10e      	bne.n	bdc2 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    bda4:	6879      	ldr	r1, [r7, #4]
    bda6:	68f8      	ldr	r0, [r7, #12]
    bda8:	4b09      	ldr	r3, [pc, #36]	; (bdd0 <cdcdf_acm_ctrl+0x48>)
    bdaa:	4798      	blx	r3
    bdac:	4603      	mov	r3, r0
    bdae:	e00a      	b.n	bdc6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    bdb0:	6879      	ldr	r1, [r7, #4]
    bdb2:	68f8      	ldr	r0, [r7, #12]
    bdb4:	4b07      	ldr	r3, [pc, #28]	; (bdd4 <cdcdf_acm_ctrl+0x4c>)
    bdb6:	4798      	blx	r3
    bdb8:	4603      	mov	r3, r0
    bdba:	e004      	b.n	bdc6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    bdbc:	f06f 031a 	mvn.w	r3, #26
    bdc0:	e001      	b.n	bdc6 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    bdc2:	f06f 030c 	mvn.w	r3, #12
	}
}
    bdc6:	4618      	mov	r0, r3
    bdc8:	3710      	adds	r7, #16
    bdca:	46bd      	mov	sp, r7
    bdcc:	bd80      	pop	{r7, pc}
    bdce:	bf00      	nop
    bdd0:	0000bb69 	.word	0x0000bb69
    bdd4:	0000bcdd 	.word	0x0000bcdd

0000bdd8 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bdd8:	b590      	push	{r4, r7, lr}
    bdda:	b087      	sub	sp, #28
    bddc:	af00      	add	r7, sp, #0
    bdde:	4603      	mov	r3, r0
    bde0:	6039      	str	r1, [r7, #0]
    bde2:	71fb      	strb	r3, [r7, #7]
    bde4:	4613      	mov	r3, r2
    bde6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    bde8:	683b      	ldr	r3, [r7, #0]
    bdea:	799a      	ldrb	r2, [r3, #6]
    bdec:	79db      	ldrb	r3, [r3, #7]
    bdee:	021b      	lsls	r3, r3, #8
    bdf0:	4313      	orrs	r3, r2
    bdf2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    bdf4:	4b2b      	ldr	r3, [pc, #172]	; (bea4 <cdcdf_acm_set_req+0xcc>)
    bdf6:	4798      	blx	r3
    bdf8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    bdfa:	683b      	ldr	r3, [r7, #0]
    bdfc:	785b      	ldrb	r3, [r3, #1]
    bdfe:	2b20      	cmp	r3, #32
    be00:	d002      	beq.n	be08 <cdcdf_acm_set_req+0x30>
    be02:	2b22      	cmp	r3, #34	; 0x22
    be04:	d034      	beq.n	be70 <cdcdf_acm_set_req+0x98>
    be06:	e046      	b.n	be96 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    be08:	8afb      	ldrh	r3, [r7, #22]
    be0a:	2b07      	cmp	r3, #7
    be0c:	d002      	beq.n	be14 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    be0e:	f04f 33ff 	mov.w	r3, #4294967295
    be12:	e042      	b.n	be9a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    be14:	79bb      	ldrb	r3, [r7, #6]
    be16:	2b00      	cmp	r3, #0
    be18:	d107      	bne.n	be2a <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    be1a:	8afa      	ldrh	r2, [r7, #22]
    be1c:	79f8      	ldrb	r0, [r7, #7]
    be1e:	2300      	movs	r3, #0
    be20:	6939      	ldr	r1, [r7, #16]
    be22:	4c21      	ldr	r4, [pc, #132]	; (bea8 <cdcdf_acm_set_req+0xd0>)
    be24:	47a0      	blx	r4
    be26:	4603      	mov	r3, r0
    be28:	e037      	b.n	be9a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    be2a:	693a      	ldr	r2, [r7, #16]
    be2c:	f107 0308 	add.w	r3, r7, #8
    be30:	6810      	ldr	r0, [r2, #0]
    be32:	6018      	str	r0, [r3, #0]
    be34:	8891      	ldrh	r1, [r2, #4]
    be36:	7992      	ldrb	r2, [r2, #6]
    be38:	8099      	strh	r1, [r3, #4]
    be3a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    be3c:	4b1b      	ldr	r3, [pc, #108]	; (beac <cdcdf_acm_set_req+0xd4>)
    be3e:	681b      	ldr	r3, [r3, #0]
    be40:	2b00      	cmp	r3, #0
    be42:	d008      	beq.n	be56 <cdcdf_acm_set_req+0x7e>
    be44:	4b19      	ldr	r3, [pc, #100]	; (beac <cdcdf_acm_set_req+0xd4>)
    be46:	681b      	ldr	r3, [r3, #0]
    be48:	f107 0208 	add.w	r2, r7, #8
    be4c:	4610      	mov	r0, r2
    be4e:	4798      	blx	r3
    be50:	4603      	mov	r3, r0
    be52:	2b00      	cmp	r3, #0
    be54:	d00a      	beq.n	be6c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    be56:	4b16      	ldr	r3, [pc, #88]	; (beb0 <cdcdf_acm_set_req+0xd8>)
    be58:	f107 0208 	add.w	r2, r7, #8
    be5c:	e892 0003 	ldmia.w	r2, {r0, r1}
    be60:	6018      	str	r0, [r3, #0]
    be62:	3304      	adds	r3, #4
    be64:	8019      	strh	r1, [r3, #0]
    be66:	3302      	adds	r3, #2
    be68:	0c0a      	lsrs	r2, r1, #16
    be6a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    be6c:	2300      	movs	r3, #0
    be6e:	e014      	b.n	be9a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    be70:	2300      	movs	r3, #0
    be72:	2200      	movs	r2, #0
    be74:	2100      	movs	r1, #0
    be76:	2000      	movs	r0, #0
    be78:	4c0b      	ldr	r4, [pc, #44]	; (bea8 <cdcdf_acm_set_req+0xd0>)
    be7a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    be7c:	4b0d      	ldr	r3, [pc, #52]	; (beb4 <cdcdf_acm_set_req+0xdc>)
    be7e:	681b      	ldr	r3, [r3, #0]
    be80:	2b00      	cmp	r3, #0
    be82:	d006      	beq.n	be92 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    be84:	4b0b      	ldr	r3, [pc, #44]	; (beb4 <cdcdf_acm_set_req+0xdc>)
    be86:	681b      	ldr	r3, [r3, #0]
    be88:	683a      	ldr	r2, [r7, #0]
    be8a:	8852      	ldrh	r2, [r2, #2]
    be8c:	b292      	uxth	r2, r2
    be8e:	4610      	mov	r0, r2
    be90:	4798      	blx	r3
		}
		return ERR_NONE;
    be92:	2300      	movs	r3, #0
    be94:	e001      	b.n	be9a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    be96:	f06f 030c 	mvn.w	r3, #12
	}
}
    be9a:	4618      	mov	r0, r3
    be9c:	371c      	adds	r7, #28
    be9e:	46bd      	mov	sp, r7
    bea0:	bd90      	pop	{r4, r7, pc}
    bea2:	bf00      	nop
    bea4:	0000ce25 	.word	0x0000ce25
    bea8:	0000cc99 	.word	0x0000cc99
    beac:	20000c84 	.word	0x20000c84
    beb0:	20000c78 	.word	0x20000c78
    beb4:	20000c80 	.word	0x20000c80

0000beb8 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    beb8:	b590      	push	{r4, r7, lr}
    beba:	b085      	sub	sp, #20
    bebc:	af00      	add	r7, sp, #0
    bebe:	4603      	mov	r3, r0
    bec0:	6039      	str	r1, [r7, #0]
    bec2:	71fb      	strb	r3, [r7, #7]
    bec4:	4613      	mov	r3, r2
    bec6:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    bec8:	683b      	ldr	r3, [r7, #0]
    beca:	799a      	ldrb	r2, [r3, #6]
    becc:	79db      	ldrb	r3, [r3, #7]
    bece:	021b      	lsls	r3, r3, #8
    bed0:	4313      	orrs	r3, r2
    bed2:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    bed4:	79bb      	ldrb	r3, [r7, #6]
    bed6:	2b01      	cmp	r3, #1
    bed8:	d101      	bne.n	bede <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    beda:	2300      	movs	r3, #0
    bedc:	e013      	b.n	bf06 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    bede:	683b      	ldr	r3, [r7, #0]
    bee0:	785b      	ldrb	r3, [r3, #1]
    bee2:	2b21      	cmp	r3, #33	; 0x21
    bee4:	d10d      	bne.n	bf02 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    bee6:	89fb      	ldrh	r3, [r7, #14]
    bee8:	2b07      	cmp	r3, #7
    beea:	d002      	beq.n	bef2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    beec:	f04f 33ff 	mov.w	r3, #4294967295
    bef0:	e009      	b.n	bf06 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    bef2:	89fa      	ldrh	r2, [r7, #14]
    bef4:	79f8      	ldrb	r0, [r7, #7]
    bef6:	2300      	movs	r3, #0
    bef8:	4905      	ldr	r1, [pc, #20]	; (bf10 <cdcdf_acm_get_req+0x58>)
    befa:	4c06      	ldr	r4, [pc, #24]	; (bf14 <cdcdf_acm_get_req+0x5c>)
    befc:	47a0      	blx	r4
    befe:	4603      	mov	r3, r0
    bf00:	e001      	b.n	bf06 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    bf02:	f06f 030c 	mvn.w	r3, #12
	}
}
    bf06:	4618      	mov	r0, r3
    bf08:	3714      	adds	r7, #20
    bf0a:	46bd      	mov	sp, r7
    bf0c:	bd90      	pop	{r4, r7, pc}
    bf0e:	bf00      	nop
    bf10:	20000c78 	.word	0x20000c78
    bf14:	0000cc99 	.word	0x0000cc99

0000bf18 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    bf18:	b580      	push	{r7, lr}
    bf1a:	b082      	sub	sp, #8
    bf1c:	af00      	add	r7, sp, #0
    bf1e:	4603      	mov	r3, r0
    bf20:	6039      	str	r1, [r7, #0]
    bf22:	71fb      	strb	r3, [r7, #7]
    bf24:	4613      	mov	r3, r2
    bf26:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    bf28:	683b      	ldr	r3, [r7, #0]
    bf2a:	781b      	ldrb	r3, [r3, #0]
    bf2c:	095b      	lsrs	r3, r3, #5
    bf2e:	b2db      	uxtb	r3, r3
    bf30:	f003 0303 	and.w	r3, r3, #3
    bf34:	2b01      	cmp	r3, #1
    bf36:	d002      	beq.n	bf3e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    bf38:	f06f 0309 	mvn.w	r3, #9
    bf3c:	e026      	b.n	bf8c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    bf3e:	683b      	ldr	r3, [r7, #0]
    bf40:	889b      	ldrh	r3, [r3, #4]
    bf42:	b29a      	uxth	r2, r3
    bf44:	4b13      	ldr	r3, [pc, #76]	; (bf94 <cdcdf_acm_req+0x7c>)
    bf46:	781b      	ldrb	r3, [r3, #0]
    bf48:	b29b      	uxth	r3, r3
    bf4a:	429a      	cmp	r2, r3
    bf4c:	d007      	beq.n	bf5e <cdcdf_acm_req+0x46>
    bf4e:	683b      	ldr	r3, [r7, #0]
    bf50:	889b      	ldrh	r3, [r3, #4]
    bf52:	b29a      	uxth	r2, r3
    bf54:	4b0f      	ldr	r3, [pc, #60]	; (bf94 <cdcdf_acm_req+0x7c>)
    bf56:	785b      	ldrb	r3, [r3, #1]
    bf58:	b29b      	uxth	r3, r3
    bf5a:	429a      	cmp	r2, r3
    bf5c:	d114      	bne.n	bf88 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    bf5e:	683b      	ldr	r3, [r7, #0]
    bf60:	781b      	ldrb	r3, [r3, #0]
    bf62:	b25b      	sxtb	r3, r3
    bf64:	2b00      	cmp	r3, #0
    bf66:	da07      	bge.n	bf78 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    bf68:	79ba      	ldrb	r2, [r7, #6]
    bf6a:	79fb      	ldrb	r3, [r7, #7]
    bf6c:	6839      	ldr	r1, [r7, #0]
    bf6e:	4618      	mov	r0, r3
    bf70:	4b09      	ldr	r3, [pc, #36]	; (bf98 <cdcdf_acm_req+0x80>)
    bf72:	4798      	blx	r3
    bf74:	4603      	mov	r3, r0
    bf76:	e009      	b.n	bf8c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    bf78:	79ba      	ldrb	r2, [r7, #6]
    bf7a:	79fb      	ldrb	r3, [r7, #7]
    bf7c:	6839      	ldr	r1, [r7, #0]
    bf7e:	4618      	mov	r0, r3
    bf80:	4b06      	ldr	r3, [pc, #24]	; (bf9c <cdcdf_acm_req+0x84>)
    bf82:	4798      	blx	r3
    bf84:	4603      	mov	r3, r0
    bf86:	e001      	b.n	bf8c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    bf88:	f06f 0309 	mvn.w	r3, #9
	}
}
    bf8c:	4618      	mov	r0, r3
    bf8e:	3708      	adds	r7, #8
    bf90:	46bd      	mov	sp, r7
    bf92:	bd80      	pop	{r7, pc}
    bf94:	20000c70 	.word	0x20000c70
    bf98:	0000beb9 	.word	0x0000beb9
    bf9c:	0000bdd9 	.word	0x0000bdd9

0000bfa0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bfa0:	b580      	push	{r7, lr}
    bfa2:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    bfa4:	4b0b      	ldr	r3, [pc, #44]	; (bfd4 <cdcdf_acm_init+0x34>)
    bfa6:	4798      	blx	r3
    bfa8:	4603      	mov	r3, r0
    bfaa:	2b01      	cmp	r3, #1
    bfac:	d902      	bls.n	bfb4 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    bfae:	f06f 0310 	mvn.w	r3, #16
    bfb2:	e00d      	b.n	bfd0 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bfb4:	4b08      	ldr	r3, [pc, #32]	; (bfd8 <cdcdf_acm_init+0x38>)
    bfb6:	4a09      	ldr	r2, [pc, #36]	; (bfdc <cdcdf_acm_init+0x3c>)
    bfb8:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bfba:	4b07      	ldr	r3, [pc, #28]	; (bfd8 <cdcdf_acm_init+0x38>)
    bfbc:	4a08      	ldr	r2, [pc, #32]	; (bfe0 <cdcdf_acm_init+0x40>)
    bfbe:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    bfc0:	4805      	ldr	r0, [pc, #20]	; (bfd8 <cdcdf_acm_init+0x38>)
    bfc2:	4b08      	ldr	r3, [pc, #32]	; (bfe4 <cdcdf_acm_init+0x44>)
    bfc4:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bfc6:	4908      	ldr	r1, [pc, #32]	; (bfe8 <cdcdf_acm_init+0x48>)
    bfc8:	2001      	movs	r0, #1
    bfca:	4b08      	ldr	r3, [pc, #32]	; (bfec <cdcdf_acm_init+0x4c>)
    bfcc:	4798      	blx	r3
	return ERR_NONE;
    bfce:	2300      	movs	r3, #0
}
    bfd0:	4618      	mov	r0, r3
    bfd2:	bd80      	pop	{r7, pc}
    bfd4:	0000ce3d 	.word	0x0000ce3d
    bfd8:	20000c64 	.word	0x20000c64
    bfdc:	0000bd89 	.word	0x0000bd89
    bfe0:	20000c70 	.word	0x20000c70
    bfe4:	0000cda5 	.word	0x0000cda5
    bfe8:	200001d8 	.word	0x200001d8
    bfec:	0000ccd5 	.word	0x0000ccd5

0000bff0 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bff0:	b590      	push	{r4, r7, lr}
    bff2:	b083      	sub	sp, #12
    bff4:	af00      	add	r7, sp, #0
    bff6:	6078      	str	r0, [r7, #4]
    bff8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    bffa:	4b0b      	ldr	r3, [pc, #44]	; (c028 <cdcdf_acm_read+0x38>)
    bffc:	4798      	blx	r3
    bffe:	4603      	mov	r3, r0
    c000:	f083 0301 	eor.w	r3, r3, #1
    c004:	b2db      	uxtb	r3, r3
    c006:	2b00      	cmp	r3, #0
    c008:	d002      	beq.n	c010 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c00a:	f06f 0310 	mvn.w	r3, #16
    c00e:	e007      	b.n	c020 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c010:	4b06      	ldr	r3, [pc, #24]	; (c02c <cdcdf_acm_read+0x3c>)
    c012:	7918      	ldrb	r0, [r3, #4]
    c014:	2300      	movs	r3, #0
    c016:	683a      	ldr	r2, [r7, #0]
    c018:	6879      	ldr	r1, [r7, #4]
    c01a:	4c05      	ldr	r4, [pc, #20]	; (c030 <cdcdf_acm_read+0x40>)
    c01c:	47a0      	blx	r4
    c01e:	4603      	mov	r3, r0
}
    c020:	4618      	mov	r0, r3
    c022:	370c      	adds	r7, #12
    c024:	46bd      	mov	sp, r7
    c026:	bd90      	pop	{r4, r7, pc}
    c028:	0000c115 	.word	0x0000c115
    c02c:	20000c70 	.word	0x20000c70
    c030:	0000cc99 	.word	0x0000cc99

0000c034 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c034:	b590      	push	{r4, r7, lr}
    c036:	b083      	sub	sp, #12
    c038:	af00      	add	r7, sp, #0
    c03a:	6078      	str	r0, [r7, #4]
    c03c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c03e:	4b0b      	ldr	r3, [pc, #44]	; (c06c <cdcdf_acm_write+0x38>)
    c040:	4798      	blx	r3
    c042:	4603      	mov	r3, r0
    c044:	f083 0301 	eor.w	r3, r3, #1
    c048:	b2db      	uxtb	r3, r3
    c04a:	2b00      	cmp	r3, #0
    c04c:	d002      	beq.n	c054 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c04e:	f06f 0310 	mvn.w	r3, #16
    c052:	e007      	b.n	c064 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c054:	4b06      	ldr	r3, [pc, #24]	; (c070 <cdcdf_acm_write+0x3c>)
    c056:	78d8      	ldrb	r0, [r3, #3]
    c058:	2301      	movs	r3, #1
    c05a:	683a      	ldr	r2, [r7, #0]
    c05c:	6879      	ldr	r1, [r7, #4]
    c05e:	4c05      	ldr	r4, [pc, #20]	; (c074 <cdcdf_acm_write+0x40>)
    c060:	47a0      	blx	r4
    c062:	4603      	mov	r3, r0
}
    c064:	4618      	mov	r0, r3
    c066:	370c      	adds	r7, #12
    c068:	46bd      	mov	sp, r7
    c06a:	bd90      	pop	{r4, r7, pc}
    c06c:	0000c115 	.word	0x0000c115
    c070:	20000c70 	.word	0x20000c70
    c074:	0000cc99 	.word	0x0000cc99

0000c078 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c078:	b580      	push	{r7, lr}
    c07a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c07c:	4b05      	ldr	r3, [pc, #20]	; (c094 <cdcdf_acm_stop_xfer+0x1c>)
    c07e:	78db      	ldrb	r3, [r3, #3]
    c080:	4618      	mov	r0, r3
    c082:	4b05      	ldr	r3, [pc, #20]	; (c098 <cdcdf_acm_stop_xfer+0x20>)
    c084:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c086:	4b03      	ldr	r3, [pc, #12]	; (c094 <cdcdf_acm_stop_xfer+0x1c>)
    c088:	791b      	ldrb	r3, [r3, #4]
    c08a:	4618      	mov	r0, r3
    c08c:	4b02      	ldr	r3, [pc, #8]	; (c098 <cdcdf_acm_stop_xfer+0x20>)
    c08e:	4798      	blx	r3
}
    c090:	bf00      	nop
    c092:	bd80      	pop	{r7, pc}
    c094:	20000c70 	.word	0x20000c70
    c098:	0000357d 	.word	0x0000357d

0000c09c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c09c:	b580      	push	{r7, lr}
    c09e:	b082      	sub	sp, #8
    c0a0:	af00      	add	r7, sp, #0
    c0a2:	4603      	mov	r3, r0
    c0a4:	6039      	str	r1, [r7, #0]
    c0a6:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c0a8:	79fb      	ldrb	r3, [r7, #7]
    c0aa:	2b03      	cmp	r3, #3
    c0ac:	d822      	bhi.n	c0f4 <cdcdf_acm_register_callback+0x58>
    c0ae:	a201      	add	r2, pc, #4	; (adr r2, c0b4 <cdcdf_acm_register_callback+0x18>)
    c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c0b4:	0000c0c5 	.word	0x0000c0c5
    c0b8:	0000c0d5 	.word	0x0000c0d5
    c0bc:	0000c0e5 	.word	0x0000c0e5
    c0c0:	0000c0ed 	.word	0x0000c0ed
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c0c4:	4b0f      	ldr	r3, [pc, #60]	; (c104 <cdcdf_acm_register_callback+0x68>)
    c0c6:	791b      	ldrb	r3, [r3, #4]
    c0c8:	683a      	ldr	r2, [r7, #0]
    c0ca:	2102      	movs	r1, #2
    c0cc:	4618      	mov	r0, r3
    c0ce:	4b0e      	ldr	r3, [pc, #56]	; (c108 <cdcdf_acm_register_callback+0x6c>)
    c0d0:	4798      	blx	r3
		break;
    c0d2:	e012      	b.n	c0fa <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c0d4:	4b0b      	ldr	r3, [pc, #44]	; (c104 <cdcdf_acm_register_callback+0x68>)
    c0d6:	78db      	ldrb	r3, [r3, #3]
    c0d8:	683a      	ldr	r2, [r7, #0]
    c0da:	2102      	movs	r1, #2
    c0dc:	4618      	mov	r0, r3
    c0de:	4b0a      	ldr	r3, [pc, #40]	; (c108 <cdcdf_acm_register_callback+0x6c>)
    c0e0:	4798      	blx	r3
		break;
    c0e2:	e00a      	b.n	c0fa <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c0e4:	4a09      	ldr	r2, [pc, #36]	; (c10c <cdcdf_acm_register_callback+0x70>)
    c0e6:	683b      	ldr	r3, [r7, #0]
    c0e8:	6013      	str	r3, [r2, #0]
		break;
    c0ea:	e006      	b.n	c0fa <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c0ec:	4a08      	ldr	r2, [pc, #32]	; (c110 <cdcdf_acm_register_callback+0x74>)
    c0ee:	683b      	ldr	r3, [r7, #0]
    c0f0:	6013      	str	r3, [r2, #0]
		break;
    c0f2:	e002      	b.n	c0fa <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c0f4:	f06f 030c 	mvn.w	r3, #12
    c0f8:	e000      	b.n	c0fc <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c0fa:	2300      	movs	r3, #0
}
    c0fc:	4618      	mov	r0, r3
    c0fe:	3708      	adds	r7, #8
    c100:	46bd      	mov	sp, r7
    c102:	bd80      	pop	{r7, pc}
    c104:	20000c70 	.word	0x20000c70
    c108:	000036a9 	.word	0x000036a9
    c10c:	20000c84 	.word	0x20000c84
    c110:	20000c80 	.word	0x20000c80

0000c114 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c114:	b480      	push	{r7}
    c116:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c118:	4b03      	ldr	r3, [pc, #12]	; (c128 <cdcdf_acm_is_enabled+0x14>)
    c11a:	795b      	ldrb	r3, [r3, #5]
}
    c11c:	4618      	mov	r0, r3
    c11e:	46bd      	mov	sp, r7
    c120:	f85d 7b04 	ldr.w	r7, [sp], #4
    c124:	4770      	bx	lr
    c126:	bf00      	nop
    c128:	20000c70 	.word	0x20000c70

0000c12c <usb_get_u16>:
{
    c12c:	b480      	push	{r7}
    c12e:	b083      	sub	sp, #12
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c134:	687b      	ldr	r3, [r7, #4]
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	b29a      	uxth	r2, r3
    c13a:	687b      	ldr	r3, [r7, #4]
    c13c:	3301      	adds	r3, #1
    c13e:	781b      	ldrb	r3, [r3, #0]
    c140:	b29b      	uxth	r3, r3
    c142:	021b      	lsls	r3, r3, #8
    c144:	b29b      	uxth	r3, r3
    c146:	4413      	add	r3, r2
    c148:	b29b      	uxth	r3, r3
}
    c14a:	4618      	mov	r0, r3
    c14c:	370c      	adds	r7, #12
    c14e:	46bd      	mov	sp, r7
    c150:	f85d 7b04 	ldr.w	r7, [sp], #4
    c154:	4770      	bx	lr

0000c156 <usb_desc_len>:
{
    c156:	b480      	push	{r7}
    c158:	b083      	sub	sp, #12
    c15a:	af00      	add	r7, sp, #0
    c15c:	6078      	str	r0, [r7, #4]
	return desc[0];
    c15e:	687b      	ldr	r3, [r7, #4]
    c160:	781b      	ldrb	r3, [r3, #0]
}
    c162:	4618      	mov	r0, r3
    c164:	370c      	adds	r7, #12
    c166:	46bd      	mov	sp, r7
    c168:	f85d 7b04 	ldr.w	r7, [sp], #4
    c16c:	4770      	bx	lr
	...

0000c170 <usb_desc_next>:
{
    c170:	b580      	push	{r7, lr}
    c172:	b082      	sub	sp, #8
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c178:	6878      	ldr	r0, [r7, #4]
    c17a:	4b05      	ldr	r3, [pc, #20]	; (c190 <usb_desc_next+0x20>)
    c17c:	4798      	blx	r3
    c17e:	4603      	mov	r3, r0
    c180:	461a      	mov	r2, r3
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	4413      	add	r3, r2
}
    c186:	4618      	mov	r0, r3
    c188:	3708      	adds	r7, #8
    c18a:	46bd      	mov	sp, r7
    c18c:	bd80      	pop	{r7, pc}
    c18e:	bf00      	nop
    c190:	0000c157 	.word	0x0000c157

0000c194 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c194:	b580      	push	{r7, lr}
    c196:	b082      	sub	sp, #8
    c198:	af00      	add	r7, sp, #0
    c19a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	3302      	adds	r3, #2
    c1a0:	4618      	mov	r0, r3
    c1a2:	4b03      	ldr	r3, [pc, #12]	; (c1b0 <usb_cfg_desc_total_len+0x1c>)
    c1a4:	4798      	blx	r3
    c1a6:	4603      	mov	r3, r0
}
    c1a8:	4618      	mov	r0, r3
    c1aa:	3708      	adds	r7, #8
    c1ac:	46bd      	mov	sp, r7
    c1ae:	bd80      	pop	{r7, pc}
    c1b0:	0000c12d 	.word	0x0000c12d

0000c1b4 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c1b4:	b590      	push	{r4, r7, lr}
    c1b6:	b085      	sub	sp, #20
    c1b8:	af00      	add	r7, sp, #0
    c1ba:	4603      	mov	r3, r0
    c1bc:	6039      	str	r1, [r7, #0]
    c1be:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c1c0:	2300      	movs	r3, #0
    c1c2:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c1c4:	683b      	ldr	r3, [r7, #0]
    c1c6:	799a      	ldrb	r2, [r3, #6]
    c1c8:	79db      	ldrb	r3, [r3, #7]
    c1ca:	021b      	lsls	r3, r3, #8
    c1cc:	4313      	orrs	r3, r2
    c1ce:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c1d0:	897b      	ldrh	r3, [r7, #10]
    c1d2:	2b12      	cmp	r3, #18
    c1d4:	d901      	bls.n	c1da <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c1d6:	2312      	movs	r3, #18
    c1d8:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c1da:	68fb      	ldr	r3, [r7, #12]
    c1dc:	2b00      	cmp	r3, #0
    c1de:	d10a      	bne.n	c1f6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c1e0:	4b0f      	ldr	r3, [pc, #60]	; (c220 <usbdc_get_dev_desc+0x6c>)
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	6818      	ldr	r0, [r3, #0]
    c1e6:	4b0e      	ldr	r3, [pc, #56]	; (c220 <usbdc_get_dev_desc+0x6c>)
    c1e8:	681b      	ldr	r3, [r3, #0]
    c1ea:	685b      	ldr	r3, [r3, #4]
    c1ec:	2201      	movs	r2, #1
    c1ee:	4619      	mov	r1, r3
    c1f0:	4b0c      	ldr	r3, [pc, #48]	; (c224 <usbdc_get_dev_desc+0x70>)
    c1f2:	4798      	blx	r3
    c1f4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c1f6:	68fb      	ldr	r3, [r7, #12]
    c1f8:	2b00      	cmp	r3, #0
    c1fa:	d101      	bne.n	c200 <usbdc_get_dev_desc+0x4c>
		return false;
    c1fc:	2300      	movs	r3, #0
    c1fe:	e00b      	b.n	c218 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c200:	897a      	ldrh	r2, [r7, #10]
    c202:	79f8      	ldrb	r0, [r7, #7]
    c204:	2300      	movs	r3, #0
    c206:	68f9      	ldr	r1, [r7, #12]
    c208:	4c07      	ldr	r4, [pc, #28]	; (c228 <usbdc_get_dev_desc+0x74>)
    c20a:	47a0      	blx	r4
    c20c:	4603      	mov	r3, r0
    c20e:	2b00      	cmp	r3, #0
    c210:	d001      	beq.n	c216 <usbdc_get_dev_desc+0x62>
		return false;
    c212:	2300      	movs	r3, #0
    c214:	e000      	b.n	c218 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c216:	2301      	movs	r3, #1
}
    c218:	4618      	mov	r0, r3
    c21a:	3714      	adds	r7, #20
    c21c:	46bd      	mov	sp, r7
    c21e:	bd90      	pop	{r4, r7, pc}
    c220:	20000c88 	.word	0x20000c88
    c224:	0000cf29 	.word	0x0000cf29
    c228:	0000cc99 	.word	0x0000cc99

0000c22c <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c22c:	b590      	push	{r4, r7, lr}
    c22e:	b087      	sub	sp, #28
    c230:	af00      	add	r7, sp, #0
    c232:	4603      	mov	r3, r0
    c234:	6039      	str	r1, [r7, #0]
    c236:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c238:	2300      	movs	r3, #0
    c23a:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c23c:	683b      	ldr	r3, [r7, #0]
    c23e:	799a      	ldrb	r2, [r3, #6]
    c240:	79db      	ldrb	r3, [r3, #7]
    c242:	021b      	lsls	r3, r3, #8
    c244:	4313      	orrs	r3, r2
    c246:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c248:	683b      	ldr	r3, [r7, #0]
    c24a:	885b      	ldrh	r3, [r3, #2]
    c24c:	b29b      	uxth	r3, r3
    c24e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c250:	8a7a      	ldrh	r2, [r7, #18]
    c252:	4b1e      	ldr	r3, [pc, #120]	; (c2cc <usbdc_get_cfg_desc+0xa0>)
    c254:	7f1b      	ldrb	r3, [r3, #28]
    c256:	3b01      	subs	r3, #1
    c258:	4013      	ands	r3, r2
    c25a:	2b00      	cmp	r3, #0
    c25c:	bf0c      	ite	eq
    c25e:	2301      	moveq	r3, #1
    c260:	2300      	movne	r3, #0
    c262:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c264:	697b      	ldr	r3, [r7, #20]
    c266:	2b00      	cmp	r3, #0
    c268:	d10c      	bne.n	c284 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c26a:	4b18      	ldr	r3, [pc, #96]	; (c2cc <usbdc_get_cfg_desc+0xa0>)
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	6818      	ldr	r0, [r3, #0]
    c270:	4b16      	ldr	r3, [pc, #88]	; (c2cc <usbdc_get_cfg_desc+0xa0>)
    c272:	681b      	ldr	r3, [r3, #0]
    c274:	6859      	ldr	r1, [r3, #4]
    c276:	7c3b      	ldrb	r3, [r7, #16]
    c278:	3301      	adds	r3, #1
    c27a:	b2db      	uxtb	r3, r3
    c27c:	461a      	mov	r2, r3
    c27e:	4b14      	ldr	r3, [pc, #80]	; (c2d0 <usbdc_get_cfg_desc+0xa4>)
    c280:	4798      	blx	r3
    c282:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c284:	697b      	ldr	r3, [r7, #20]
    c286:	2b00      	cmp	r3, #0
    c288:	d101      	bne.n	c28e <usbdc_get_cfg_desc+0x62>
		return false;
    c28a:	2300      	movs	r3, #0
    c28c:	e019      	b.n	c2c2 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c28e:	6978      	ldr	r0, [r7, #20]
    c290:	4b10      	ldr	r3, [pc, #64]	; (c2d4 <usbdc_get_cfg_desc+0xa8>)
    c292:	4798      	blx	r3
    c294:	4603      	mov	r3, r0
    c296:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c298:	8a7a      	ldrh	r2, [r7, #18]
    c29a:	89fb      	ldrh	r3, [r7, #14]
    c29c:	429a      	cmp	r2, r3
    c29e:	d802      	bhi.n	c2a6 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c2a0:	2300      	movs	r3, #0
    c2a2:	747b      	strb	r3, [r7, #17]
    c2a4:	e001      	b.n	c2aa <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c2a6:	89fb      	ldrh	r3, [r7, #14]
    c2a8:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c2aa:	8a7a      	ldrh	r2, [r7, #18]
    c2ac:	7c7b      	ldrb	r3, [r7, #17]
    c2ae:	79f8      	ldrb	r0, [r7, #7]
    c2b0:	6979      	ldr	r1, [r7, #20]
    c2b2:	4c09      	ldr	r4, [pc, #36]	; (c2d8 <usbdc_get_cfg_desc+0xac>)
    c2b4:	47a0      	blx	r4
    c2b6:	4603      	mov	r3, r0
    c2b8:	2b00      	cmp	r3, #0
    c2ba:	d001      	beq.n	c2c0 <usbdc_get_cfg_desc+0x94>
		return false;
    c2bc:	2300      	movs	r3, #0
    c2be:	e000      	b.n	c2c2 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c2c0:	2301      	movs	r3, #1
}
    c2c2:	4618      	mov	r0, r3
    c2c4:	371c      	adds	r7, #28
    c2c6:	46bd      	mov	sp, r7
    c2c8:	bd90      	pop	{r4, r7, pc}
    c2ca:	bf00      	nop
    c2cc:	20000c88 	.word	0x20000c88
    c2d0:	0000cfe9 	.word	0x0000cfe9
    c2d4:	0000c195 	.word	0x0000c195
    c2d8:	0000cc99 	.word	0x0000cc99

0000c2dc <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c2dc:	b590      	push	{r4, r7, lr}
    c2de:	b085      	sub	sp, #20
    c2e0:	af00      	add	r7, sp, #0
    c2e2:	4603      	mov	r3, r0
    c2e4:	6039      	str	r1, [r7, #0]
    c2e6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c2e8:	683b      	ldr	r3, [r7, #0]
    c2ea:	799a      	ldrb	r2, [r3, #6]
    c2ec:	79db      	ldrb	r3, [r3, #7]
    c2ee:	021b      	lsls	r3, r3, #8
    c2f0:	4313      	orrs	r3, r2
    c2f2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c2f4:	683b      	ldr	r3, [r7, #0]
    c2f6:	885b      	ldrh	r3, [r3, #2]
    c2f8:	b29b      	uxth	r3, r3
    c2fa:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c2fc:	89fa      	ldrh	r2, [r7, #14]
    c2fe:	4b1a      	ldr	r3, [pc, #104]	; (c368 <usbdc_get_str_desc+0x8c>)
    c300:	7f1b      	ldrb	r3, [r3, #28]
    c302:	3b01      	subs	r3, #1
    c304:	4013      	ands	r3, r2
    c306:	2b00      	cmp	r3, #0
    c308:	bf0c      	ite	eq
    c30a:	2301      	moveq	r3, #1
    c30c:	2300      	movne	r3, #0
    c30e:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c310:	4b15      	ldr	r3, [pc, #84]	; (c368 <usbdc_get_str_desc+0x8c>)
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	6818      	ldr	r0, [r3, #0]
    c316:	4b14      	ldr	r3, [pc, #80]	; (c368 <usbdc_get_str_desc+0x8c>)
    c318:	681b      	ldr	r3, [r3, #0]
    c31a:	685b      	ldr	r3, [r3, #4]
    c31c:	7b3a      	ldrb	r2, [r7, #12]
    c31e:	4619      	mov	r1, r3
    c320:	4b12      	ldr	r3, [pc, #72]	; (c36c <usbdc_get_str_desc+0x90>)
    c322:	4798      	blx	r3
    c324:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c326:	68bb      	ldr	r3, [r7, #8]
    c328:	2b00      	cmp	r3, #0
    c32a:	d101      	bne.n	c330 <usbdc_get_str_desc+0x54>
		return false;
    c32c:	2300      	movs	r3, #0
    c32e:	e017      	b.n	c360 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c330:	68bb      	ldr	r3, [r7, #8]
    c332:	781b      	ldrb	r3, [r3, #0]
    c334:	b29b      	uxth	r3, r3
    c336:	89fa      	ldrh	r2, [r7, #14]
    c338:	429a      	cmp	r2, r3
    c33a:	d802      	bhi.n	c342 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c33c:	2300      	movs	r3, #0
    c33e:	737b      	strb	r3, [r7, #13]
    c340:	e002      	b.n	c348 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c342:	68bb      	ldr	r3, [r7, #8]
    c344:	781b      	ldrb	r3, [r3, #0]
    c346:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c348:	89fa      	ldrh	r2, [r7, #14]
    c34a:	7b7b      	ldrb	r3, [r7, #13]
    c34c:	79f8      	ldrb	r0, [r7, #7]
    c34e:	68b9      	ldr	r1, [r7, #8]
    c350:	4c07      	ldr	r4, [pc, #28]	; (c370 <usbdc_get_str_desc+0x94>)
    c352:	47a0      	blx	r4
    c354:	4603      	mov	r3, r0
    c356:	2b00      	cmp	r3, #0
    c358:	d001      	beq.n	c35e <usbdc_get_str_desc+0x82>
		return false;
    c35a:	2300      	movs	r3, #0
    c35c:	e000      	b.n	c360 <usbdc_get_str_desc+0x84>
	}
	return true;
    c35e:	2301      	movs	r3, #1
}
    c360:	4618      	mov	r0, r3
    c362:	3714      	adds	r7, #20
    c364:	46bd      	mov	sp, r7
    c366:	bd90      	pop	{r4, r7, pc}
    c368:	20000c88 	.word	0x20000c88
    c36c:	0000d061 	.word	0x0000d061
    c370:	0000cc99 	.word	0x0000cc99

0000c374 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c374:	b580      	push	{r7, lr}
    c376:	b084      	sub	sp, #16
    c378:	af00      	add	r7, sp, #0
    c37a:	4603      	mov	r3, r0
    c37c:	6039      	str	r1, [r7, #0]
    c37e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c380:	683b      	ldr	r3, [r7, #0]
    c382:	885b      	ldrh	r3, [r3, #2]
    c384:	b29b      	uxth	r3, r3
    c386:	0a1b      	lsrs	r3, r3, #8
    c388:	b29b      	uxth	r3, r3
    c38a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c38c:	7bfb      	ldrb	r3, [r7, #15]
    c38e:	2b02      	cmp	r3, #2
    c390:	d00d      	beq.n	c3ae <usbdc_get_desc_req+0x3a>
    c392:	2b03      	cmp	r3, #3
    c394:	d012      	beq.n	c3bc <usbdc_get_desc_req+0x48>
    c396:	2b01      	cmp	r3, #1
    c398:	d002      	beq.n	c3a0 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c39a:	bf00      	nop
	}
	return false;
    c39c:	2300      	movs	r3, #0
    c39e:	e013      	b.n	c3c8 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c3a0:	79fb      	ldrb	r3, [r7, #7]
    c3a2:	6839      	ldr	r1, [r7, #0]
    c3a4:	4618      	mov	r0, r3
    c3a6:	4b0a      	ldr	r3, [pc, #40]	; (c3d0 <usbdc_get_desc_req+0x5c>)
    c3a8:	4798      	blx	r3
    c3aa:	4603      	mov	r3, r0
    c3ac:	e00c      	b.n	c3c8 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c3ae:	79fb      	ldrb	r3, [r7, #7]
    c3b0:	6839      	ldr	r1, [r7, #0]
    c3b2:	4618      	mov	r0, r3
    c3b4:	4b07      	ldr	r3, [pc, #28]	; (c3d4 <usbdc_get_desc_req+0x60>)
    c3b6:	4798      	blx	r3
    c3b8:	4603      	mov	r3, r0
    c3ba:	e005      	b.n	c3c8 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c3bc:	79fb      	ldrb	r3, [r7, #7]
    c3be:	6839      	ldr	r1, [r7, #0]
    c3c0:	4618      	mov	r0, r3
    c3c2:	4b05      	ldr	r3, [pc, #20]	; (c3d8 <usbdc_get_desc_req+0x64>)
    c3c4:	4798      	blx	r3
    c3c6:	4603      	mov	r3, r0
}
    c3c8:	4618      	mov	r0, r3
    c3ca:	3710      	adds	r7, #16
    c3cc:	46bd      	mov	sp, r7
    c3ce:	bd80      	pop	{r7, pc}
    c3d0:	0000c1b5 	.word	0x0000c1b5
    c3d4:	0000c22d 	.word	0x0000c22d
    c3d8:	0000c2dd 	.word	0x0000c2dd

0000c3dc <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c3dc:	b590      	push	{r4, r7, lr}
    c3de:	b085      	sub	sp, #20
    c3e0:	af00      	add	r7, sp, #0
    c3e2:	4603      	mov	r3, r0
    c3e4:	6039      	str	r1, [r7, #0]
    c3e6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c3e8:	683b      	ldr	r3, [r7, #0]
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	f003 031f 	and.w	r3, r3, #31
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	db1b      	blt.n	c42c <usbdc_get_status_req+0x50>
    c3f4:	2b01      	cmp	r3, #1
    c3f6:	dd02      	ble.n	c3fe <usbdc_get_status_req+0x22>
    c3f8:	2b02      	cmp	r3, #2
    c3fa:	d003      	beq.n	c404 <usbdc_get_status_req+0x28>
    c3fc:	e016      	b.n	c42c <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c3fe:	2300      	movs	r3, #0
    c400:	60fb      	str	r3, [r7, #12]
		break;
    c402:	e015      	b.n	c430 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c404:	683b      	ldr	r3, [r7, #0]
    c406:	889b      	ldrh	r3, [r3, #4]
    c408:	b29b      	uxth	r3, r3
    c40a:	b2db      	uxtb	r3, r3
    c40c:	2102      	movs	r1, #2
    c40e:	4618      	mov	r0, r3
    c410:	4b0f      	ldr	r3, [pc, #60]	; (c450 <usbdc_get_status_req+0x74>)
    c412:	4798      	blx	r3
    c414:	4603      	mov	r3, r0
    c416:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c418:	68fb      	ldr	r3, [r7, #12]
    c41a:	2b00      	cmp	r3, #0
    c41c:	da01      	bge.n	c422 <usbdc_get_status_req+0x46>
			return false;
    c41e:	2300      	movs	r3, #0
    c420:	e012      	b.n	c448 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c422:	68fb      	ldr	r3, [r7, #12]
    c424:	f003 0301 	and.w	r3, r3, #1
    c428:	60fb      	str	r3, [r7, #12]
		break;
    c42a:	e001      	b.n	c430 <usbdc_get_status_req+0x54>
	default:
		return false;
    c42c:	2300      	movs	r3, #0
    c42e:	e00b      	b.n	c448 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c430:	4b08      	ldr	r3, [pc, #32]	; (c454 <usbdc_get_status_req+0x78>)
    c432:	695b      	ldr	r3, [r3, #20]
    c434:	89ba      	ldrh	r2, [r7, #12]
    c436:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c438:	4b06      	ldr	r3, [pc, #24]	; (c454 <usbdc_get_status_req+0x78>)
    c43a:	6959      	ldr	r1, [r3, #20]
    c43c:	79f8      	ldrb	r0, [r7, #7]
    c43e:	2300      	movs	r3, #0
    c440:	2202      	movs	r2, #2
    c442:	4c05      	ldr	r4, [pc, #20]	; (c458 <usbdc_get_status_req+0x7c>)
    c444:	47a0      	blx	r4
	return true;
    c446:	2301      	movs	r3, #1
}
    c448:	4618      	mov	r0, r3
    c44a:	3714      	adds	r7, #20
    c44c:	46bd      	mov	sp, r7
    c44e:	bd90      	pop	{r4, r7, pc}
    c450:	00003655 	.word	0x00003655
    c454:	20000c88 	.word	0x20000c88
    c458:	0000cc99 	.word	0x0000cc99

0000c45c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c45c:	b590      	push	{r4, r7, lr}
    c45e:	b085      	sub	sp, #20
    c460:	af00      	add	r7, sp, #0
    c462:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c464:	4b1f      	ldr	r3, [pc, #124]	; (c4e4 <usbdc_get_interface+0x88>)
    c466:	691b      	ldr	r3, [r3, #16]
    c468:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c46a:	4b1e      	ldr	r3, [pc, #120]	; (c4e4 <usbdc_get_interface+0x88>)
    c46c:	7f5b      	ldrb	r3, [r3, #29]
    c46e:	461a      	mov	r2, r3
    c470:	687b      	ldr	r3, [r7, #4]
    c472:	889b      	ldrh	r3, [r3, #4]
    c474:	b29b      	uxth	r3, r3
    c476:	fa42 f303 	asr.w	r3, r2, r3
    c47a:	f003 0301 	and.w	r3, r3, #1
    c47e:	2b00      	cmp	r3, #0
    c480:	d128      	bne.n	c4d4 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c482:	4b18      	ldr	r3, [pc, #96]	; (c4e4 <usbdc_get_interface+0x88>)
    c484:	695b      	ldr	r3, [r3, #20]
    c486:	2200      	movs	r2, #0
    c488:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c48a:	4b16      	ldr	r3, [pc, #88]	; (c4e4 <usbdc_get_interface+0x88>)
    c48c:	6959      	ldr	r1, [r3, #20]
    c48e:	2300      	movs	r3, #0
    c490:	2201      	movs	r2, #1
    c492:	2000      	movs	r0, #0
    c494:	4c14      	ldr	r4, [pc, #80]	; (c4e8 <usbdc_get_interface+0x8c>)
    c496:	47a0      	blx	r4
		return true;
    c498:	2301      	movs	r3, #1
    c49a:	e01f      	b.n	c4dc <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c49c:	68fb      	ldr	r3, [r7, #12]
    c49e:	685b      	ldr	r3, [r3, #4]
    c4a0:	687a      	ldr	r2, [r7, #4]
    c4a2:	2102      	movs	r1, #2
    c4a4:	68f8      	ldr	r0, [r7, #12]
    c4a6:	4798      	blx	r3
    c4a8:	60b8      	str	r0, [r7, #8]
    c4aa:	68bb      	ldr	r3, [r7, #8]
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	da03      	bge.n	c4b8 <usbdc_get_interface+0x5c>
			func = func->next;
    c4b0:	68fb      	ldr	r3, [r7, #12]
    c4b2:	681b      	ldr	r3, [r3, #0]
    c4b4:	60fb      	str	r3, [r7, #12]
    c4b6:	e00d      	b.n	c4d4 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c4b8:	4b0a      	ldr	r3, [pc, #40]	; (c4e4 <usbdc_get_interface+0x88>)
    c4ba:	695b      	ldr	r3, [r3, #20]
    c4bc:	68ba      	ldr	r2, [r7, #8]
    c4be:	b2d2      	uxtb	r2, r2
    c4c0:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c4c2:	4b08      	ldr	r3, [pc, #32]	; (c4e4 <usbdc_get_interface+0x88>)
    c4c4:	6959      	ldr	r1, [r3, #20]
    c4c6:	2300      	movs	r3, #0
    c4c8:	2201      	movs	r2, #1
    c4ca:	2000      	movs	r0, #0
    c4cc:	4c06      	ldr	r4, [pc, #24]	; (c4e8 <usbdc_get_interface+0x8c>)
    c4ce:	47a0      	blx	r4
			return true;
    c4d0:	2301      	movs	r3, #1
    c4d2:	e003      	b.n	c4dc <usbdc_get_interface+0x80>
	while (NULL != func) {
    c4d4:	68fb      	ldr	r3, [r7, #12]
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d1e0      	bne.n	c49c <usbdc_get_interface+0x40>
		}
	}
	return false;
    c4da:	2300      	movs	r3, #0
}
    c4dc:	4618      	mov	r0, r3
    c4de:	3714      	adds	r7, #20
    c4e0:	46bd      	mov	sp, r7
    c4e2:	bd90      	pop	{r4, r7, pc}
    c4e4:	20000c88 	.word	0x20000c88
    c4e8:	0000cc99 	.word	0x0000cc99

0000c4ec <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c4ec:	b590      	push	{r4, r7, lr}
    c4ee:	b083      	sub	sp, #12
    c4f0:	af00      	add	r7, sp, #0
    c4f2:	4603      	mov	r3, r0
    c4f4:	6039      	str	r1, [r7, #0]
    c4f6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c4f8:	683b      	ldr	r3, [r7, #0]
    c4fa:	785b      	ldrb	r3, [r3, #1]
    c4fc:	2b0a      	cmp	r3, #10
    c4fe:	d83a      	bhi.n	c576 <usbdc_get_req+0x8a>
    c500:	a201      	add	r2, pc, #4	; (adr r2, c508 <usbdc_get_req+0x1c>)
    c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c506:	bf00      	nop
    c508:	0000c55f 	.word	0x0000c55f
    c50c:	0000c577 	.word	0x0000c577
    c510:	0000c577 	.word	0x0000c577
    c514:	0000c577 	.word	0x0000c577
    c518:	0000c577 	.word	0x0000c577
    c51c:	0000c577 	.word	0x0000c577
    c520:	0000c535 	.word	0x0000c535
    c524:	0000c577 	.word	0x0000c577
    c528:	0000c543 	.word	0x0000c543
    c52c:	0000c577 	.word	0x0000c577
    c530:	0000c56d 	.word	0x0000c56d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c534:	79fb      	ldrb	r3, [r7, #7]
    c536:	6839      	ldr	r1, [r7, #0]
    c538:	4618      	mov	r0, r3
    c53a:	4b11      	ldr	r3, [pc, #68]	; (c580 <usbdc_get_req+0x94>)
    c53c:	4798      	blx	r3
    c53e:	4603      	mov	r3, r0
    c540:	e01a      	b.n	c578 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c542:	4b10      	ldr	r3, [pc, #64]	; (c584 <usbdc_get_req+0x98>)
    c544:	695b      	ldr	r3, [r3, #20]
    c546:	4a0f      	ldr	r2, [pc, #60]	; (c584 <usbdc_get_req+0x98>)
    c548:	7ed2      	ldrb	r2, [r2, #27]
    c54a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c54c:	4b0d      	ldr	r3, [pc, #52]	; (c584 <usbdc_get_req+0x98>)
    c54e:	6959      	ldr	r1, [r3, #20]
    c550:	79f8      	ldrb	r0, [r7, #7]
    c552:	2300      	movs	r3, #0
    c554:	2201      	movs	r2, #1
    c556:	4c0c      	ldr	r4, [pc, #48]	; (c588 <usbdc_get_req+0x9c>)
    c558:	47a0      	blx	r4
		return true;
    c55a:	2301      	movs	r3, #1
    c55c:	e00c      	b.n	c578 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c55e:	79fb      	ldrb	r3, [r7, #7]
    c560:	6839      	ldr	r1, [r7, #0]
    c562:	4618      	mov	r0, r3
    c564:	4b09      	ldr	r3, [pc, #36]	; (c58c <usbdc_get_req+0xa0>)
    c566:	4798      	blx	r3
    c568:	4603      	mov	r3, r0
    c56a:	e005      	b.n	c578 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c56c:	6838      	ldr	r0, [r7, #0]
    c56e:	4b08      	ldr	r3, [pc, #32]	; (c590 <usbdc_get_req+0xa4>)
    c570:	4798      	blx	r3
    c572:	4603      	mov	r3, r0
    c574:	e000      	b.n	c578 <usbdc_get_req+0x8c>
	default:
		return false;
    c576:	2300      	movs	r3, #0
	}
}
    c578:	4618      	mov	r0, r3
    c57a:	370c      	adds	r7, #12
    c57c:	46bd      	mov	sp, r7
    c57e:	bd90      	pop	{r4, r7, pc}
    c580:	0000c375 	.word	0x0000c375
    c584:	20000c88 	.word	0x20000c88
    c588:	0000cc99 	.word	0x0000cc99
    c58c:	0000c3dd 	.word	0x0000c3dd
    c590:	0000c45d 	.word	0x0000c45d

0000c594 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c594:	b590      	push	{r4, r7, lr}
    c596:	b083      	sub	sp, #12
    c598:	af00      	add	r7, sp, #0
    c59a:	4603      	mov	r3, r0
    c59c:	6039      	str	r1, [r7, #0]
    c59e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5a0:	683b      	ldr	r3, [r7, #0]
    c5a2:	781b      	ldrb	r3, [r3, #0]
    c5a4:	f003 031f 	and.w	r3, r3, #31
    c5a8:	2b02      	cmp	r3, #2
    c5aa:	d116      	bne.n	c5da <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c5ac:	683b      	ldr	r3, [r7, #0]
    c5ae:	88db      	ldrh	r3, [r3, #6]
    c5b0:	b29b      	uxth	r3, r3
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d001      	beq.n	c5ba <usbdc_clear_ftr_req+0x26>
			return false;
    c5b6:	2300      	movs	r3, #0
    c5b8:	e010      	b.n	c5dc <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c5ba:	683b      	ldr	r3, [r7, #0]
    c5bc:	889b      	ldrh	r3, [r3, #4]
    c5be:	b29b      	uxth	r3, r3
    c5c0:	b2db      	uxtb	r3, r3
    c5c2:	2100      	movs	r1, #0
    c5c4:	4618      	mov	r0, r3
    c5c6:	4b07      	ldr	r3, [pc, #28]	; (c5e4 <usbdc_clear_ftr_req+0x50>)
    c5c8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c5ca:	79f8      	ldrb	r0, [r7, #7]
    c5cc:	2301      	movs	r3, #1
    c5ce:	2200      	movs	r2, #0
    c5d0:	2100      	movs	r1, #0
    c5d2:	4c05      	ldr	r4, [pc, #20]	; (c5e8 <usbdc_clear_ftr_req+0x54>)
    c5d4:	47a0      	blx	r4
		return true;
    c5d6:	2301      	movs	r3, #1
    c5d8:	e000      	b.n	c5dc <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c5da:	2300      	movs	r3, #0
	}
}
    c5dc:	4618      	mov	r0, r3
    c5de:	370c      	adds	r7, #12
    c5e0:	46bd      	mov	sp, r7
    c5e2:	bd90      	pop	{r4, r7, pc}
    c5e4:	00003655 	.word	0x00003655
    c5e8:	0000cc99 	.word	0x0000cc99

0000c5ec <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c5ec:	b590      	push	{r4, r7, lr}
    c5ee:	b083      	sub	sp, #12
    c5f0:	af00      	add	r7, sp, #0
    c5f2:	4603      	mov	r3, r0
    c5f4:	6039      	str	r1, [r7, #0]
    c5f6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c5f8:	683b      	ldr	r3, [r7, #0]
    c5fa:	781b      	ldrb	r3, [r3, #0]
    c5fc:	f003 031f 	and.w	r3, r3, #31
    c600:	2b02      	cmp	r3, #2
    c602:	d116      	bne.n	c632 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c604:	683b      	ldr	r3, [r7, #0]
    c606:	88db      	ldrh	r3, [r3, #6]
    c608:	b29b      	uxth	r3, r3
    c60a:	2b00      	cmp	r3, #0
    c60c:	d001      	beq.n	c612 <usbdc_set_ftr_req+0x26>
			return false;
    c60e:	2300      	movs	r3, #0
    c610:	e010      	b.n	c634 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c612:	683b      	ldr	r3, [r7, #0]
    c614:	889b      	ldrh	r3, [r3, #4]
    c616:	b29b      	uxth	r3, r3
    c618:	b2db      	uxtb	r3, r3
    c61a:	2101      	movs	r1, #1
    c61c:	4618      	mov	r0, r3
    c61e:	4b07      	ldr	r3, [pc, #28]	; (c63c <usbdc_set_ftr_req+0x50>)
    c620:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c622:	79f8      	ldrb	r0, [r7, #7]
    c624:	2301      	movs	r3, #1
    c626:	2200      	movs	r2, #0
    c628:	2100      	movs	r1, #0
    c62a:	4c05      	ldr	r4, [pc, #20]	; (c640 <usbdc_set_ftr_req+0x54>)
    c62c:	47a0      	blx	r4
		return true;
    c62e:	2301      	movs	r3, #1
    c630:	e000      	b.n	c634 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c632:	2300      	movs	r3, #0
	}
}
    c634:	4618      	mov	r0, r3
    c636:	370c      	adds	r7, #12
    c638:	46bd      	mov	sp, r7
    c63a:	bd90      	pop	{r4, r7, pc}
    c63c:	00003655 	.word	0x00003655
    c640:	0000cc99 	.word	0x0000cc99

0000c644 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c644:	b580      	push	{r7, lr}
    c646:	b082      	sub	sp, #8
    c648:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c64a:	4b0a      	ldr	r3, [pc, #40]	; (c674 <usbdc_unconfig+0x30>)
    c64c:	691b      	ldr	r3, [r3, #16]
    c64e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c650:	e008      	b.n	c664 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	685b      	ldr	r3, [r3, #4]
    c656:	2200      	movs	r2, #0
    c658:	2101      	movs	r1, #1
    c65a:	6878      	ldr	r0, [r7, #4]
    c65c:	4798      	blx	r3
		func = func->next;
    c65e:	687b      	ldr	r3, [r7, #4]
    c660:	681b      	ldr	r3, [r3, #0]
    c662:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c664:	687b      	ldr	r3, [r7, #4]
    c666:	2b00      	cmp	r3, #0
    c668:	d1f3      	bne.n	c652 <usbdc_unconfig+0xe>
	}
}
    c66a:	bf00      	nop
    c66c:	3708      	adds	r7, #8
    c66e:	46bd      	mov	sp, r7
    c670:	bd80      	pop	{r7, pc}
    c672:	bf00      	nop
    c674:	20000c88 	.word	0x20000c88

0000c678 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c678:	b580      	push	{r7, lr}
    c67a:	b088      	sub	sp, #32
    c67c:	af00      	add	r7, sp, #0
    c67e:	4603      	mov	r3, r0
    c680:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c682:	2300      	movs	r3, #0
    c684:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c686:	23ff      	movs	r3, #255	; 0xff
    c688:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c68a:	79fb      	ldrb	r3, [r7, #7]
    c68c:	2b00      	cmp	r3, #0
    c68e:	d103      	bne.n	c698 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c690:	4b2e      	ldr	r3, [pc, #184]	; (c74c <usbdc_set_config+0xd4>)
    c692:	4798      	blx	r3
		return true;
    c694:	2301      	movs	r3, #1
    c696:	e055      	b.n	c744 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c698:	69bb      	ldr	r3, [r7, #24]
    c69a:	2b00      	cmp	r3, #0
    c69c:	d10a      	bne.n	c6b4 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c69e:	4b2c      	ldr	r3, [pc, #176]	; (c750 <usbdc_set_config+0xd8>)
    c6a0:	681b      	ldr	r3, [r3, #0]
    c6a2:	6818      	ldr	r0, [r3, #0]
    c6a4:	4b2a      	ldr	r3, [pc, #168]	; (c750 <usbdc_set_config+0xd8>)
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	685b      	ldr	r3, [r3, #4]
    c6aa:	79fa      	ldrb	r2, [r7, #7]
    c6ac:	4619      	mov	r1, r3
    c6ae:	4b29      	ldr	r3, [pc, #164]	; (c754 <usbdc_set_config+0xdc>)
    c6b0:	4798      	blx	r3
    c6b2:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c6b4:	69bb      	ldr	r3, [r7, #24]
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d101      	bne.n	c6be <usbdc_set_config+0x46>
		return false;
    c6ba:	2300      	movs	r3, #0
    c6bc:	e042      	b.n	c744 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c6be:	69b8      	ldr	r0, [r7, #24]
    c6c0:	4b25      	ldr	r3, [pc, #148]	; (c758 <usbdc_set_config+0xe0>)
    c6c2:	4798      	blx	r3
    c6c4:	4603      	mov	r3, r0
    c6c6:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c6c8:	8abb      	ldrh	r3, [r7, #20]
    c6ca:	69ba      	ldr	r2, [r7, #24]
    c6cc:	4413      	add	r3, r2
    c6ce:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c6d0:	693b      	ldr	r3, [r7, #16]
    c6d2:	2204      	movs	r2, #4
    c6d4:	4619      	mov	r1, r3
    c6d6:	69b8      	ldr	r0, [r7, #24]
    c6d8:	4b20      	ldr	r3, [pc, #128]	; (c75c <usbdc_set_config+0xe4>)
    c6da:	4798      	blx	r3
    c6dc:	4603      	mov	r3, r0
    c6de:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c6e0:	e02c      	b.n	c73c <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c6e2:	68fb      	ldr	r3, [r7, #12]
    c6e4:	3302      	adds	r3, #2
    c6e6:	781b      	ldrb	r3, [r3, #0]
    c6e8:	7dfa      	ldrb	r2, [r7, #23]
    c6ea:	429a      	cmp	r2, r3
    c6ec:	d018      	beq.n	c720 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c6ee:	68fb      	ldr	r3, [r7, #12]
    c6f0:	789b      	ldrb	r3, [r3, #2]
    c6f2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c6f4:	4b16      	ldr	r3, [pc, #88]	; (c750 <usbdc_set_config+0xd8>)
    c6f6:	691b      	ldr	r3, [r3, #16]
    c6f8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c6fa:	e00c      	b.n	c716 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c6fc:	69fb      	ldr	r3, [r7, #28]
    c6fe:	685b      	ldr	r3, [r3, #4]
    c700:	f107 020c 	add.w	r2, r7, #12
    c704:	2100      	movs	r1, #0
    c706:	69f8      	ldr	r0, [r7, #28]
    c708:	4798      	blx	r3
    c70a:	4603      	mov	r3, r0
    c70c:	2b00      	cmp	r3, #0
    c70e:	d006      	beq.n	c71e <usbdc_set_config+0xa6>
					func = func->next;
    c710:	69fb      	ldr	r3, [r7, #28]
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c716:	69fb      	ldr	r3, [r7, #28]
    c718:	2b00      	cmp	r3, #0
    c71a:	d1ef      	bne.n	c6fc <usbdc_set_config+0x84>
    c71c:	e000      	b.n	c720 <usbdc_set_config+0xa8>
				} else {
					break;
    c71e:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c720:	68fb      	ldr	r3, [r7, #12]
    c722:	4618      	mov	r0, r3
    c724:	4b0e      	ldr	r3, [pc, #56]	; (c760 <usbdc_set_config+0xe8>)
    c726:	4798      	blx	r3
    c728:	4603      	mov	r3, r0
    c72a:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c72c:	68fb      	ldr	r3, [r7, #12]
    c72e:	6939      	ldr	r1, [r7, #16]
    c730:	2204      	movs	r2, #4
    c732:	4618      	mov	r0, r3
    c734:	4b09      	ldr	r3, [pc, #36]	; (c75c <usbdc_set_config+0xe4>)
    c736:	4798      	blx	r3
    c738:	4603      	mov	r3, r0
    c73a:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c73c:	68fb      	ldr	r3, [r7, #12]
    c73e:	2b00      	cmp	r3, #0
    c740:	d1cf      	bne.n	c6e2 <usbdc_set_config+0x6a>
	}
	return true;
    c742:	2301      	movs	r3, #1
}
    c744:	4618      	mov	r0, r3
    c746:	3720      	adds	r7, #32
    c748:	46bd      	mov	sp, r7
    c74a:	bd80      	pop	{r7, pc}
    c74c:	0000c645 	.word	0x0000c645
    c750:	20000c88 	.word	0x20000c88
    c754:	0000cfe9 	.word	0x0000cfe9
    c758:	0000c195 	.word	0x0000c195
    c75c:	0000cf29 	.word	0x0000cf29
    c760:	0000c171 	.word	0x0000c171

0000c764 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c764:	b580      	push	{r7, lr}
    c766:	b082      	sub	sp, #8
    c768:	af00      	add	r7, sp, #0
    c76a:	4603      	mov	r3, r0
    c76c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c76e:	79fb      	ldrb	r3, [r7, #7]
    c770:	4618      	mov	r0, r3
    c772:	4b03      	ldr	r3, [pc, #12]	; (c780 <usbdc_set_address+0x1c>)
    c774:	4798      	blx	r3
}
    c776:	bf00      	nop
    c778:	3708      	adds	r7, #8
    c77a:	46bd      	mov	sp, r7
    c77c:	bd80      	pop	{r7, pc}
    c77e:	bf00      	nop
    c780:	00003271 	.word	0x00003271

0000c784 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c784:	b590      	push	{r4, r7, lr}
    c786:	b087      	sub	sp, #28
    c788:	af00      	add	r7, sp, #0
    c78a:	4603      	mov	r3, r0
    c78c:	460a      	mov	r2, r1
    c78e:	80fb      	strh	r3, [r7, #6]
    c790:	4613      	mov	r3, r2
    c792:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c794:	2300      	movs	r3, #0
    c796:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c798:	693b      	ldr	r3, [r7, #16]
    c79a:	2b00      	cmp	r3, #0
    c79c:	d10b      	bne.n	c7b6 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c79e:	4b43      	ldr	r3, [pc, #268]	; (c8ac <usbdc_set_interface+0x128>)
    c7a0:	681b      	ldr	r3, [r3, #0]
    c7a2:	6818      	ldr	r0, [r3, #0]
    c7a4:	4b41      	ldr	r3, [pc, #260]	; (c8ac <usbdc_set_interface+0x128>)
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	6859      	ldr	r1, [r3, #4]
    c7aa:	4b40      	ldr	r3, [pc, #256]	; (c8ac <usbdc_set_interface+0x128>)
    c7ac:	7edb      	ldrb	r3, [r3, #27]
    c7ae:	461a      	mov	r2, r3
    c7b0:	4b3f      	ldr	r3, [pc, #252]	; (c8b0 <usbdc_set_interface+0x12c>)
    c7b2:	4798      	blx	r3
    c7b4:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c7b6:	693b      	ldr	r3, [r7, #16]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d101      	bne.n	c7c0 <usbdc_set_interface+0x3c>
		return false;
    c7bc:	2300      	movs	r3, #0
    c7be:	e071      	b.n	c8a4 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c7c0:	693b      	ldr	r3, [r7, #16]
    c7c2:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c7c4:	6938      	ldr	r0, [r7, #16]
    c7c6:	4b3b      	ldr	r3, [pc, #236]	; (c8b4 <usbdc_set_interface+0x130>)
    c7c8:	4798      	blx	r3
    c7ca:	4603      	mov	r3, r0
    c7cc:	461a      	mov	r2, r3
    c7ce:	693b      	ldr	r3, [r7, #16]
    c7d0:	4413      	add	r3, r2
    c7d2:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c7d4:	68bb      	ldr	r3, [r7, #8]
    c7d6:	68f9      	ldr	r1, [r7, #12]
    c7d8:	2204      	movs	r2, #4
    c7da:	4618      	mov	r0, r3
    c7dc:	4b36      	ldr	r3, [pc, #216]	; (c8b8 <usbdc_set_interface+0x134>)
    c7de:	4798      	blx	r3
    c7e0:	6138      	str	r0, [r7, #16]
    c7e2:	693b      	ldr	r3, [r7, #16]
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d113      	bne.n	c810 <usbdc_set_interface+0x8c>
		return false;
    c7e8:	2300      	movs	r3, #0
    c7ea:	e05b      	b.n	c8a4 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c7ec:	68bb      	ldr	r3, [r7, #8]
    c7ee:	4618      	mov	r0, r3
    c7f0:	4b32      	ldr	r3, [pc, #200]	; (c8bc <usbdc_set_interface+0x138>)
    c7f2:	4798      	blx	r3
    c7f4:	4603      	mov	r3, r0
    c7f6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c7f8:	68bb      	ldr	r3, [r7, #8]
    c7fa:	68f9      	ldr	r1, [r7, #12]
    c7fc:	2204      	movs	r2, #4
    c7fe:	4618      	mov	r0, r3
    c800:	4b2d      	ldr	r3, [pc, #180]	; (c8b8 <usbdc_set_interface+0x134>)
    c802:	4798      	blx	r3
    c804:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c806:	693b      	ldr	r3, [r7, #16]
    c808:	2b00      	cmp	r3, #0
    c80a:	d101      	bne.n	c810 <usbdc_set_interface+0x8c>
			return false;
    c80c:	2300      	movs	r3, #0
    c80e:	e049      	b.n	c8a4 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c810:	693b      	ldr	r3, [r7, #16]
    c812:	3302      	adds	r3, #2
    c814:	781b      	ldrb	r3, [r3, #0]
    c816:	b29b      	uxth	r3, r3
    c818:	88ba      	ldrh	r2, [r7, #4]
    c81a:	429a      	cmp	r2, r3
    c81c:	d1e6      	bne.n	c7ec <usbdc_set_interface+0x68>
    c81e:	693b      	ldr	r3, [r7, #16]
    c820:	3303      	adds	r3, #3
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	b29b      	uxth	r3, r3
    c826:	88fa      	ldrh	r2, [r7, #6]
    c828:	429a      	cmp	r2, r3
    c82a:	d1df      	bne.n	c7ec <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c82c:	693b      	ldr	r3, [r7, #16]
    c82e:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c830:	4b1e      	ldr	r3, [pc, #120]	; (c8ac <usbdc_set_interface+0x128>)
    c832:	691b      	ldr	r3, [r3, #16]
    c834:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c836:	e031      	b.n	c89c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c838:	697b      	ldr	r3, [r7, #20]
    c83a:	685b      	ldr	r3, [r3, #4]
    c83c:	f107 0208 	add.w	r2, r7, #8
    c840:	2101      	movs	r1, #1
    c842:	6978      	ldr	r0, [r7, #20]
    c844:	4798      	blx	r3
    c846:	4603      	mov	r3, r0
    c848:	2b00      	cmp	r3, #0
    c84a:	d003      	beq.n	c854 <usbdc_set_interface+0xd0>
			func = func->next;
    c84c:	697b      	ldr	r3, [r7, #20]
    c84e:	681b      	ldr	r3, [r3, #0]
    c850:	617b      	str	r3, [r7, #20]
    c852:	e023      	b.n	c89c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c854:	697b      	ldr	r3, [r7, #20]
    c856:	685b      	ldr	r3, [r3, #4]
    c858:	f107 0208 	add.w	r2, r7, #8
    c85c:	2100      	movs	r1, #0
    c85e:	6978      	ldr	r0, [r7, #20]
    c860:	4798      	blx	r3
    c862:	4603      	mov	r3, r0
    c864:	2b00      	cmp	r3, #0
    c866:	d117      	bne.n	c898 <usbdc_set_interface+0x114>
			if (alt_set) {
    c868:	88fb      	ldrh	r3, [r7, #6]
    c86a:	2b00      	cmp	r3, #0
    c86c:	d00c      	beq.n	c888 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c86e:	4b0f      	ldr	r3, [pc, #60]	; (c8ac <usbdc_set_interface+0x128>)
    c870:	7f5b      	ldrb	r3, [r3, #29]
    c872:	b25a      	sxtb	r2, r3
    c874:	88bb      	ldrh	r3, [r7, #4]
    c876:	2101      	movs	r1, #1
    c878:	fa01 f303 	lsl.w	r3, r1, r3
    c87c:	b25b      	sxtb	r3, r3
    c87e:	4313      	orrs	r3, r2
    c880:	b25b      	sxtb	r3, r3
    c882:	b2da      	uxtb	r2, r3
    c884:	4b09      	ldr	r3, [pc, #36]	; (c8ac <usbdc_set_interface+0x128>)
    c886:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c888:	2300      	movs	r3, #0
    c88a:	2200      	movs	r2, #0
    c88c:	2100      	movs	r1, #0
    c88e:	2000      	movs	r0, #0
    c890:	4c0b      	ldr	r4, [pc, #44]	; (c8c0 <usbdc_set_interface+0x13c>)
    c892:	47a0      	blx	r4
			return true;
    c894:	2301      	movs	r3, #1
    c896:	e005      	b.n	c8a4 <usbdc_set_interface+0x120>
		} else {
			return false;
    c898:	2300      	movs	r3, #0
    c89a:	e003      	b.n	c8a4 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c89c:	697b      	ldr	r3, [r7, #20]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d1ca      	bne.n	c838 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c8a2:	2300      	movs	r3, #0
}
    c8a4:	4618      	mov	r0, r3
    c8a6:	371c      	adds	r7, #28
    c8a8:	46bd      	mov	sp, r7
    c8aa:	bd90      	pop	{r4, r7, pc}
    c8ac:	20000c88 	.word	0x20000c88
    c8b0:	0000cfe9 	.word	0x0000cfe9
    c8b4:	0000c195 	.word	0x0000c195
    c8b8:	0000cf29 	.word	0x0000cf29
    c8bc:	0000c171 	.word	0x0000c171
    c8c0:	0000cc99 	.word	0x0000cc99

0000c8c4 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c8c4:	b590      	push	{r4, r7, lr}
    c8c6:	b083      	sub	sp, #12
    c8c8:	af00      	add	r7, sp, #0
    c8ca:	4603      	mov	r3, r0
    c8cc:	6039      	str	r1, [r7, #0]
    c8ce:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c8d0:	683b      	ldr	r3, [r7, #0]
    c8d2:	785b      	ldrb	r3, [r3, #1]
    c8d4:	3b01      	subs	r3, #1
    c8d6:	2b0a      	cmp	r3, #10
    c8d8:	d85b      	bhi.n	c992 <usbdc_set_req+0xce>
    c8da:	a201      	add	r2, pc, #4	; (adr r2, c8e0 <usbdc_set_req+0x1c>)
    c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c8e0:	0000c95f 	.word	0x0000c95f
    c8e4:	0000c993 	.word	0x0000c993
    c8e8:	0000c96d 	.word	0x0000c96d
    c8ec:	0000c993 	.word	0x0000c993
    c8f0:	0000c90d 	.word	0x0000c90d
    c8f4:	0000c993 	.word	0x0000c993
    c8f8:	0000c993 	.word	0x0000c993
    c8fc:	0000c993 	.word	0x0000c993
    c900:	0000c927 	.word	0x0000c927
    c904:	0000c993 	.word	0x0000c993
    c908:	0000c97b 	.word	0x0000c97b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c90c:	79f8      	ldrb	r0, [r7, #7]
    c90e:	2301      	movs	r3, #1
    c910:	2200      	movs	r2, #0
    c912:	2100      	movs	r1, #0
    c914:	4c21      	ldr	r4, [pc, #132]	; (c99c <usbdc_set_req+0xd8>)
    c916:	47a0      	blx	r4
    c918:	4603      	mov	r3, r0
    c91a:	2b00      	cmp	r3, #0
    c91c:	bf0c      	ite	eq
    c91e:	2301      	moveq	r3, #1
    c920:	2300      	movne	r3, #0
    c922:	b2db      	uxtb	r3, r3
    c924:	e036      	b.n	c994 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c926:	683b      	ldr	r3, [r7, #0]
    c928:	885b      	ldrh	r3, [r3, #2]
    c92a:	b29b      	uxth	r3, r3
    c92c:	b2db      	uxtb	r3, r3
    c92e:	4618      	mov	r0, r3
    c930:	4b1b      	ldr	r3, [pc, #108]	; (c9a0 <usbdc_set_req+0xdc>)
    c932:	4798      	blx	r3
    c934:	4603      	mov	r3, r0
    c936:	f083 0301 	eor.w	r3, r3, #1
    c93a:	b2db      	uxtb	r3, r3
    c93c:	2b00      	cmp	r3, #0
    c93e:	d001      	beq.n	c944 <usbdc_set_req+0x80>
			return false;
    c940:	2300      	movs	r3, #0
    c942:	e027      	b.n	c994 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c944:	79f8      	ldrb	r0, [r7, #7]
    c946:	2301      	movs	r3, #1
    c948:	2200      	movs	r2, #0
    c94a:	2100      	movs	r1, #0
    c94c:	4c13      	ldr	r4, [pc, #76]	; (c99c <usbdc_set_req+0xd8>)
    c94e:	47a0      	blx	r4
    c950:	4603      	mov	r3, r0
    c952:	2b00      	cmp	r3, #0
    c954:	bf0c      	ite	eq
    c956:	2301      	moveq	r3, #1
    c958:	2300      	movne	r3, #0
    c95a:	b2db      	uxtb	r3, r3
    c95c:	e01a      	b.n	c994 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c95e:	79fb      	ldrb	r3, [r7, #7]
    c960:	6839      	ldr	r1, [r7, #0]
    c962:	4618      	mov	r0, r3
    c964:	4b0f      	ldr	r3, [pc, #60]	; (c9a4 <usbdc_set_req+0xe0>)
    c966:	4798      	blx	r3
    c968:	4603      	mov	r3, r0
    c96a:	e013      	b.n	c994 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c96c:	79fb      	ldrb	r3, [r7, #7]
    c96e:	6839      	ldr	r1, [r7, #0]
    c970:	4618      	mov	r0, r3
    c972:	4b0d      	ldr	r3, [pc, #52]	; (c9a8 <usbdc_set_req+0xe4>)
    c974:	4798      	blx	r3
    c976:	4603      	mov	r3, r0
    c978:	e00c      	b.n	c994 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c97a:	683b      	ldr	r3, [r7, #0]
    c97c:	885b      	ldrh	r3, [r3, #2]
    c97e:	b29a      	uxth	r2, r3
    c980:	683b      	ldr	r3, [r7, #0]
    c982:	889b      	ldrh	r3, [r3, #4]
    c984:	b29b      	uxth	r3, r3
    c986:	4619      	mov	r1, r3
    c988:	4610      	mov	r0, r2
    c98a:	4b08      	ldr	r3, [pc, #32]	; (c9ac <usbdc_set_req+0xe8>)
    c98c:	4798      	blx	r3
    c98e:	4603      	mov	r3, r0
    c990:	e000      	b.n	c994 <usbdc_set_req+0xd0>
	default:
		return false;
    c992:	2300      	movs	r3, #0
	}
}
    c994:	4618      	mov	r0, r3
    c996:	370c      	adds	r7, #12
    c998:	46bd      	mov	sp, r7
    c99a:	bd90      	pop	{r4, r7, pc}
    c99c:	0000cc99 	.word	0x0000cc99
    c9a0:	0000c679 	.word	0x0000c679
    c9a4:	0000c595 	.word	0x0000c595
    c9a8:	0000c5ed 	.word	0x0000c5ed
    c9ac:	0000c785 	.word	0x0000c785

0000c9b0 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c9b0:	b580      	push	{r7, lr}
    c9b2:	b082      	sub	sp, #8
    c9b4:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c9b6:	4b0a      	ldr	r3, [pc, #40]	; (c9e0 <usbdc_sof_notify+0x30>)
    c9b8:	685b      	ldr	r3, [r3, #4]
    c9ba:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c9bc:	e009      	b.n	c9d2 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c9be:	687b      	ldr	r3, [r7, #4]
    c9c0:	685b      	ldr	r3, [r3, #4]
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d002      	beq.n	c9cc <usbdc_sof_notify+0x1c>
			sof->cb();
    c9c6:	687b      	ldr	r3, [r7, #4]
    c9c8:	685b      	ldr	r3, [r3, #4]
    c9ca:	4798      	blx	r3
		}
		sof = sof->next;
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	681b      	ldr	r3, [r3, #0]
    c9d0:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d1f2      	bne.n	c9be <usbdc_sof_notify+0xe>
	}
}
    c9d8:	bf00      	nop
    c9da:	3708      	adds	r7, #8
    c9dc:	46bd      	mov	sp, r7
    c9de:	bd80      	pop	{r7, pc}
    c9e0:	20000c88 	.word	0x20000c88

0000c9e4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c9e4:	b580      	push	{r7, lr}
    c9e6:	b084      	sub	sp, #16
    c9e8:	af00      	add	r7, sp, #0
    c9ea:	4603      	mov	r3, r0
    c9ec:	6039      	str	r1, [r7, #0]
    c9ee:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c9f0:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <usbdc_change_notify+0x3c>)
    c9f2:	68db      	ldr	r3, [r3, #12]
    c9f4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c9f6:	e00c      	b.n	ca12 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c9f8:	68fb      	ldr	r3, [r7, #12]
    c9fa:	685b      	ldr	r3, [r3, #4]
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d005      	beq.n	ca0c <usbdc_change_notify+0x28>
			cg->cb(change, value);
    ca00:	68fb      	ldr	r3, [r7, #12]
    ca02:	685b      	ldr	r3, [r3, #4]
    ca04:	79fa      	ldrb	r2, [r7, #7]
    ca06:	6839      	ldr	r1, [r7, #0]
    ca08:	4610      	mov	r0, r2
    ca0a:	4798      	blx	r3
		}
		cg = cg->next;
    ca0c:	68fb      	ldr	r3, [r7, #12]
    ca0e:	681b      	ldr	r3, [r3, #0]
    ca10:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    ca12:	68fb      	ldr	r3, [r7, #12]
    ca14:	2b00      	cmp	r3, #0
    ca16:	d1ef      	bne.n	c9f8 <usbdc_change_notify+0x14>
	}
}
    ca18:	bf00      	nop
    ca1a:	3710      	adds	r7, #16
    ca1c:	46bd      	mov	sp, r7
    ca1e:	bd80      	pop	{r7, pc}
    ca20:	20000c88 	.word	0x20000c88

0000ca24 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca24:	b580      	push	{r7, lr}
    ca26:	b084      	sub	sp, #16
    ca28:	af00      	add	r7, sp, #0
    ca2a:	4603      	mov	r3, r0
    ca2c:	6039      	str	r1, [r7, #0]
    ca2e:	71fb      	strb	r3, [r7, #7]
    ca30:	4613      	mov	r3, r2
    ca32:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ca34:	4b12      	ldr	r3, [pc, #72]	; (ca80 <usbdc_request_handler+0x5c>)
    ca36:	689b      	ldr	r3, [r3, #8]
    ca38:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    ca3a:	e019      	b.n	ca70 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    ca3c:	68fb      	ldr	r3, [r7, #12]
    ca3e:	685b      	ldr	r3, [r3, #4]
    ca40:	2b00      	cmp	r3, #0
    ca42:	d012      	beq.n	ca6a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    ca44:	68fb      	ldr	r3, [r7, #12]
    ca46:	685b      	ldr	r3, [r3, #4]
    ca48:	79ba      	ldrb	r2, [r7, #6]
    ca4a:	79f8      	ldrb	r0, [r7, #7]
    ca4c:	6839      	ldr	r1, [r7, #0]
    ca4e:	4798      	blx	r3
    ca50:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    ca52:	68bb      	ldr	r3, [r7, #8]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d101      	bne.n	ca5c <usbdc_request_handler+0x38>
				return true;
    ca58:	2301      	movs	r3, #1
    ca5a:	e00d      	b.n	ca78 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    ca5c:	68bb      	ldr	r3, [r7, #8]
    ca5e:	f113 0f0a 	cmn.w	r3, #10
    ca62:	d002      	beq.n	ca6a <usbdc_request_handler+0x46>
				return -1;
    ca64:	f04f 33ff 	mov.w	r3, #4294967295
    ca68:	e006      	b.n	ca78 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    ca6a:	68fb      	ldr	r3, [r7, #12]
    ca6c:	681b      	ldr	r3, [r3, #0]
    ca6e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    ca70:	68fb      	ldr	r3, [r7, #12]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d1e2      	bne.n	ca3c <usbdc_request_handler+0x18>
	}
	return false;
    ca76:	2300      	movs	r3, #0
}
    ca78:	4618      	mov	r0, r3
    ca7a:	3710      	adds	r7, #16
    ca7c:	46bd      	mov	sp, r7
    ca7e:	bd80      	pop	{r7, pc}
    ca80:	20000c88 	.word	0x20000c88

0000ca84 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    ca84:	b580      	push	{r7, lr}
    ca86:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    ca88:	4b01      	ldr	r3, [pc, #4]	; (ca90 <usbd_sof_cb+0xc>)
    ca8a:	4798      	blx	r3
}
    ca8c:	bf00      	nop
    ca8e:	bd80      	pop	{r7, pc}
    ca90:	0000c9b1 	.word	0x0000c9b1

0000ca94 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    ca94:	b580      	push	{r7, lr}
    ca96:	b082      	sub	sp, #8
    ca98:	af00      	add	r7, sp, #0
    ca9a:	4603      	mov	r3, r0
    ca9c:	6039      	str	r1, [r7, #0]
    ca9e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    caa0:	79fb      	ldrb	r3, [r7, #7]
    caa2:	2200      	movs	r2, #0
    caa4:	6839      	ldr	r1, [r7, #0]
    caa6:	4618      	mov	r0, r3
    caa8:	4b14      	ldr	r3, [pc, #80]	; (cafc <usbdc_cb_ctl_req+0x68>)
    caaa:	4798      	blx	r3
    caac:	4603      	mov	r3, r0
    caae:	f1b3 3fff 	cmp.w	r3, #4294967295
    cab2:	d00b      	beq.n	cacc <usbdc_cb_ctl_req+0x38>
    cab4:	2b01      	cmp	r3, #1
    cab6:	d007      	beq.n	cac8 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cab8:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    caba:	683b      	ldr	r3, [r7, #0]
    cabc:	781b      	ldrb	r3, [r3, #0]
    cabe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cac2:	2b00      	cmp	r3, #0
    cac4:	d007      	beq.n	cad6 <usbdc_cb_ctl_req+0x42>
    cac6:	e003      	b.n	cad0 <usbdc_cb_ctl_req+0x3c>
		return true;
    cac8:	2301      	movs	r3, #1
    caca:	e013      	b.n	caf4 <usbdc_cb_ctl_req+0x60>
		return false;
    cacc:	2300      	movs	r3, #0
    cace:	e011      	b.n	caf4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cad0:	2b80      	cmp	r3, #128	; 0x80
    cad2:	d007      	beq.n	cae4 <usbdc_cb_ctl_req+0x50>
    cad4:	e00d      	b.n	caf2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cad6:	79fb      	ldrb	r3, [r7, #7]
    cad8:	6839      	ldr	r1, [r7, #0]
    cada:	4618      	mov	r0, r3
    cadc:	4b08      	ldr	r3, [pc, #32]	; (cb00 <usbdc_cb_ctl_req+0x6c>)
    cade:	4798      	blx	r3
    cae0:	4603      	mov	r3, r0
    cae2:	e007      	b.n	caf4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cae4:	79fb      	ldrb	r3, [r7, #7]
    cae6:	6839      	ldr	r1, [r7, #0]
    cae8:	4618      	mov	r0, r3
    caea:	4b06      	ldr	r3, [pc, #24]	; (cb04 <usbdc_cb_ctl_req+0x70>)
    caec:	4798      	blx	r3
    caee:	4603      	mov	r3, r0
    caf0:	e000      	b.n	caf4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    caf2:	2300      	movs	r3, #0
	}
}
    caf4:	4618      	mov	r0, r3
    caf6:	3708      	adds	r7, #8
    caf8:	46bd      	mov	sp, r7
    cafa:	bd80      	pop	{r7, pc}
    cafc:	0000ca25 	.word	0x0000ca25
    cb00:	0000c8c5 	.word	0x0000c8c5
    cb04:	0000c4ed 	.word	0x0000c4ed

0000cb08 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cb08:	b580      	push	{r7, lr}
    cb0a:	b082      	sub	sp, #8
    cb0c:	af00      	add	r7, sp, #0
    cb0e:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cb10:	687b      	ldr	r3, [r7, #4]
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d135      	bne.n	cb84 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cb18:	687b      	ldr	r3, [r7, #4]
    cb1a:	785b      	ldrb	r3, [r3, #1]
    cb1c:	2b05      	cmp	r3, #5
    cb1e:	d019      	beq.n	cb54 <usbdc_ctrl_status_end+0x4c>
    cb20:	2b09      	cmp	r3, #9
    cb22:	d000      	beq.n	cb26 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    cb24:	e02f      	b.n	cb86 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    cb26:	687b      	ldr	r3, [r7, #4]
    cb28:	885b      	ldrh	r3, [r3, #2]
    cb2a:	b29b      	uxth	r3, r3
    cb2c:	b2da      	uxtb	r2, r3
    cb2e:	4b17      	ldr	r3, [pc, #92]	; (cb8c <usbdc_ctrl_status_end+0x84>)
    cb30:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	885b      	ldrh	r3, [r3, #2]
    cb36:	b29b      	uxth	r3, r3
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d001      	beq.n	cb40 <usbdc_ctrl_status_end+0x38>
    cb3c:	2204      	movs	r2, #4
    cb3e:	e000      	b.n	cb42 <usbdc_ctrl_status_end+0x3a>
    cb40:	2203      	movs	r2, #3
    cb42:	4b12      	ldr	r3, [pc, #72]	; (cb8c <usbdc_ctrl_status_end+0x84>)
    cb44:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb46:	4b11      	ldr	r3, [pc, #68]	; (cb8c <usbdc_ctrl_status_end+0x84>)
    cb48:	7e9b      	ldrb	r3, [r3, #26]
    cb4a:	4619      	mov	r1, r3
    cb4c:	2001      	movs	r0, #1
    cb4e:	4b10      	ldr	r3, [pc, #64]	; (cb90 <usbdc_ctrl_status_end+0x88>)
    cb50:	4798      	blx	r3
		break;
    cb52:	e018      	b.n	cb86 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	885b      	ldrh	r3, [r3, #2]
    cb58:	b29b      	uxth	r3, r3
    cb5a:	b2db      	uxtb	r3, r3
    cb5c:	4618      	mov	r0, r3
    cb5e:	4b0d      	ldr	r3, [pc, #52]	; (cb94 <usbdc_ctrl_status_end+0x8c>)
    cb60:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	885b      	ldrh	r3, [r3, #2]
    cb66:	b29b      	uxth	r3, r3
    cb68:	2b00      	cmp	r3, #0
    cb6a:	d001      	beq.n	cb70 <usbdc_ctrl_status_end+0x68>
    cb6c:	2203      	movs	r2, #3
    cb6e:	e000      	b.n	cb72 <usbdc_ctrl_status_end+0x6a>
    cb70:	2202      	movs	r2, #2
    cb72:	4b06      	ldr	r3, [pc, #24]	; (cb8c <usbdc_ctrl_status_end+0x84>)
    cb74:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cb76:	4b05      	ldr	r3, [pc, #20]	; (cb8c <usbdc_ctrl_status_end+0x84>)
    cb78:	7e9b      	ldrb	r3, [r3, #26]
    cb7a:	4619      	mov	r1, r3
    cb7c:	2001      	movs	r0, #1
    cb7e:	4b04      	ldr	r3, [pc, #16]	; (cb90 <usbdc_ctrl_status_end+0x88>)
    cb80:	4798      	blx	r3
		break;
    cb82:	e000      	b.n	cb86 <usbdc_ctrl_status_end+0x7e>
		return;
    cb84:	bf00      	nop
	}
}
    cb86:	3708      	adds	r7, #8
    cb88:	46bd      	mov	sp, r7
    cb8a:	bd80      	pop	{r7, pc}
    cb8c:	20000c88 	.word	0x20000c88
    cb90:	0000c9e5 	.word	0x0000c9e5
    cb94:	0000c765 	.word	0x0000c765

0000cb98 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cb98:	b580      	push	{r7, lr}
    cb9a:	b082      	sub	sp, #8
    cb9c:	af00      	add	r7, sp, #0
    cb9e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cba0:	2201      	movs	r2, #1
    cba2:	6879      	ldr	r1, [r7, #4]
    cba4:	2000      	movs	r0, #0
    cba6:	4b03      	ldr	r3, [pc, #12]	; (cbb4 <usbdc_ctrl_data_end+0x1c>)
    cba8:	4798      	blx	r3
	return false;
    cbaa:	2300      	movs	r3, #0
}
    cbac:	4618      	mov	r0, r3
    cbae:	3708      	adds	r7, #8
    cbb0:	46bd      	mov	sp, r7
    cbb2:	bd80      	pop	{r7, pc}
    cbb4:	0000ca25 	.word	0x0000ca25

0000cbb8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cbb8:	b580      	push	{r7, lr}
    cbba:	b082      	sub	sp, #8
    cbbc:	af00      	add	r7, sp, #0
    cbbe:	4603      	mov	r3, r0
    cbc0:	603a      	str	r2, [r7, #0]
    cbc2:	71fb      	strb	r3, [r7, #7]
    cbc4:	460b      	mov	r3, r1
    cbc6:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cbc8:	79bb      	ldrb	r3, [r7, #6]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d002      	beq.n	cbd4 <usbdc_cb_ctl_done+0x1c>
    cbce:	2b01      	cmp	r3, #1
    cbd0:	d004      	beq.n	cbdc <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cbd2:	e008      	b.n	cbe6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cbd4:	6838      	ldr	r0, [r7, #0]
    cbd6:	4b06      	ldr	r3, [pc, #24]	; (cbf0 <usbdc_cb_ctl_done+0x38>)
    cbd8:	4798      	blx	r3
		break;
    cbda:	e004      	b.n	cbe6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cbdc:	6838      	ldr	r0, [r7, #0]
    cbde:	4b05      	ldr	r3, [pc, #20]	; (cbf4 <usbdc_cb_ctl_done+0x3c>)
    cbe0:	4798      	blx	r3
    cbe2:	4603      	mov	r3, r0
    cbe4:	e000      	b.n	cbe8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cbe6:	2300      	movs	r3, #0
}
    cbe8:	4618      	mov	r0, r3
    cbea:	3708      	adds	r7, #8
    cbec:	46bd      	mov	sp, r7
    cbee:	bd80      	pop	{r7, pc}
    cbf0:	0000cb09 	.word	0x0000cb09
    cbf4:	0000cb99 	.word	0x0000cb99

0000cbf8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cbf8:	b580      	push	{r7, lr}
    cbfa:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cbfc:	4b10      	ldr	r3, [pc, #64]	; (cc40 <usbdc_reset+0x48>)
    cbfe:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cc00:	4b10      	ldr	r3, [pc, #64]	; (cc44 <usbdc_reset+0x4c>)
    cc02:	2202      	movs	r2, #2
    cc04:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cc06:	4b0f      	ldr	r3, [pc, #60]	; (cc44 <usbdc_reset+0x4c>)
    cc08:	2200      	movs	r2, #0
    cc0a:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cc0c:	4b0d      	ldr	r3, [pc, #52]	; (cc44 <usbdc_reset+0x4c>)
    cc0e:	2200      	movs	r2, #0
    cc10:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cc12:	2000      	movs	r0, #0
    cc14:	4b0c      	ldr	r3, [pc, #48]	; (cc48 <usbdc_reset+0x50>)
    cc16:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cc18:	4b0a      	ldr	r3, [pc, #40]	; (cc44 <usbdc_reset+0x4c>)
    cc1a:	7f1b      	ldrb	r3, [r3, #28]
    cc1c:	4618      	mov	r0, r3
    cc1e:	4b0b      	ldr	r3, [pc, #44]	; (cc4c <usbdc_reset+0x54>)
    cc20:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cc22:	4a0b      	ldr	r2, [pc, #44]	; (cc50 <usbdc_reset+0x58>)
    cc24:	2100      	movs	r1, #0
    cc26:	2000      	movs	r0, #0
    cc28:	4b0a      	ldr	r3, [pc, #40]	; (cc54 <usbdc_reset+0x5c>)
    cc2a:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cc2c:	4a0a      	ldr	r2, [pc, #40]	; (cc58 <usbdc_reset+0x60>)
    cc2e:	2102      	movs	r1, #2
    cc30:	2000      	movs	r0, #0
    cc32:	4b08      	ldr	r3, [pc, #32]	; (cc54 <usbdc_reset+0x5c>)
    cc34:	4798      	blx	r3
	usb_d_ep_enable(0);
    cc36:	2000      	movs	r0, #0
    cc38:	4b08      	ldr	r3, [pc, #32]	; (cc5c <usbdc_reset+0x64>)
    cc3a:	4798      	blx	r3
}
    cc3c:	bf00      	nop
    cc3e:	bd80      	pop	{r7, pc}
    cc40:	0000c645 	.word	0x0000c645
    cc44:	20000c88 	.word	0x20000c88
    cc48:	00003355 	.word	0x00003355
    cc4c:	00003291 	.word	0x00003291
    cc50:	0000ca95 	.word	0x0000ca95
    cc54:	000036a9 	.word	0x000036a9
    cc58:	0000cbb9 	.word	0x0000cbb9
    cc5c:	000033a5 	.word	0x000033a5

0000cc60 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cc60:	b580      	push	{r7, lr}
    cc62:	b082      	sub	sp, #8
    cc64:	af00      	add	r7, sp, #0
    cc66:	4603      	mov	r3, r0
    cc68:	6039      	str	r1, [r7, #0]
    cc6a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cc6c:	79fb      	ldrb	r3, [r7, #7]
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d002      	beq.n	cc78 <usbd_event_cb+0x18>
    cc72:	2b01      	cmp	r3, #1
    cc74:	d005      	beq.n	cc82 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cc76:	e007      	b.n	cc88 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cc78:	6839      	ldr	r1, [r7, #0]
    cc7a:	2000      	movs	r0, #0
    cc7c:	4b04      	ldr	r3, [pc, #16]	; (cc90 <usbd_event_cb+0x30>)
    cc7e:	4798      	blx	r3
		break;
    cc80:	e002      	b.n	cc88 <usbd_event_cb+0x28>
		usbdc_reset();
    cc82:	4b04      	ldr	r3, [pc, #16]	; (cc94 <usbd_event_cb+0x34>)
    cc84:	4798      	blx	r3
		break;
    cc86:	bf00      	nop
	}
}
    cc88:	bf00      	nop
    cc8a:	3708      	adds	r7, #8
    cc8c:	46bd      	mov	sp, r7
    cc8e:	bd80      	pop	{r7, pc}
    cc90:	0000c9e5 	.word	0x0000c9e5
    cc94:	0000cbf9 	.word	0x0000cbf9

0000cc98 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cc98:	b580      	push	{r7, lr}
    cc9a:	b088      	sub	sp, #32
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	60b9      	str	r1, [r7, #8]
    cca0:	607a      	str	r2, [r7, #4]
    cca2:	461a      	mov	r2, r3
    cca4:	4603      	mov	r3, r0
    cca6:	73fb      	strb	r3, [r7, #15]
    cca8:	4613      	mov	r3, r2
    ccaa:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ccac:	68bb      	ldr	r3, [r7, #8]
    ccae:	617b      	str	r3, [r7, #20]
    ccb0:	687b      	ldr	r3, [r7, #4]
    ccb2:	61bb      	str	r3, [r7, #24]
    ccb4:	7bfb      	ldrb	r3, [r7, #15]
    ccb6:	773b      	strb	r3, [r7, #28]
    ccb8:	7bbb      	ldrb	r3, [r7, #14]
    ccba:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ccbc:	f107 0314 	add.w	r3, r7, #20
    ccc0:	4618      	mov	r0, r3
    ccc2:	4b03      	ldr	r3, [pc, #12]	; (ccd0 <usbdc_xfer+0x38>)
    ccc4:	4798      	blx	r3
    ccc6:	4603      	mov	r3, r0
}
    ccc8:	4618      	mov	r0, r3
    ccca:	3720      	adds	r7, #32
    cccc:	46bd      	mov	sp, r7
    ccce:	bd80      	pop	{r7, pc}
    ccd0:	00003415 	.word	0x00003415

0000ccd4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ccd4:	b580      	push	{r7, lr}
    ccd6:	b082      	sub	sp, #8
    ccd8:	af00      	add	r7, sp, #0
    ccda:	4603      	mov	r3, r0
    ccdc:	6039      	str	r1, [r7, #0]
    ccde:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cce0:	79fb      	ldrb	r3, [r7, #7]
    cce2:	2b01      	cmp	r3, #1
    cce4:	d009      	beq.n	ccfa <usbdc_register_handler+0x26>
    cce6:	2b02      	cmp	r3, #2
    cce8:	d00c      	beq.n	cd04 <usbdc_register_handler+0x30>
    ccea:	2b00      	cmp	r3, #0
    ccec:	d000      	beq.n	ccf0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ccee:	e00e      	b.n	cd0e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ccf0:	6839      	ldr	r1, [r7, #0]
    ccf2:	4809      	ldr	r0, [pc, #36]	; (cd18 <usbdc_register_handler+0x44>)
    ccf4:	4b09      	ldr	r3, [pc, #36]	; (cd1c <usbdc_register_handler+0x48>)
    ccf6:	4798      	blx	r3
		break;
    ccf8:	e009      	b.n	cd0e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ccfa:	6839      	ldr	r1, [r7, #0]
    ccfc:	4808      	ldr	r0, [pc, #32]	; (cd20 <usbdc_register_handler+0x4c>)
    ccfe:	4b07      	ldr	r3, [pc, #28]	; (cd1c <usbdc_register_handler+0x48>)
    cd00:	4798      	blx	r3
		break;
    cd02:	e004      	b.n	cd0e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cd04:	6839      	ldr	r1, [r7, #0]
    cd06:	4807      	ldr	r0, [pc, #28]	; (cd24 <usbdc_register_handler+0x50>)
    cd08:	4b04      	ldr	r3, [pc, #16]	; (cd1c <usbdc_register_handler+0x48>)
    cd0a:	4798      	blx	r3
		break;
    cd0c:	bf00      	nop
	}
}
    cd0e:	bf00      	nop
    cd10:	3708      	adds	r7, #8
    cd12:	46bd      	mov	sp, r7
    cd14:	bd80      	pop	{r7, pc}
    cd16:	bf00      	nop
    cd18:	20000c8c 	.word	0x20000c8c
    cd1c:	00003801 	.word	0x00003801
    cd20:	20000c90 	.word	0x20000c90
    cd24:	20000c94 	.word	0x20000c94

0000cd28 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cd28:	b580      	push	{r7, lr}
    cd2a:	b084      	sub	sp, #16
    cd2c:	af00      	add	r7, sp, #0
    cd2e:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    cd30:	687b      	ldr	r3, [r7, #4]
    cd32:	2b00      	cmp	r3, #0
    cd34:	bf14      	ite	ne
    cd36:	2301      	movne	r3, #1
    cd38:	2300      	moveq	r3, #0
    cd3a:	b2db      	uxtb	r3, r3
    cd3c:	f240 3255 	movw	r2, #853	; 0x355
    cd40:	4910      	ldr	r1, [pc, #64]	; (cd84 <usbdc_init+0x5c>)
    cd42:	4618      	mov	r0, r3
    cd44:	4b10      	ldr	r3, [pc, #64]	; (cd88 <usbdc_init+0x60>)
    cd46:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cd48:	4b10      	ldr	r3, [pc, #64]	; (cd8c <usbdc_init+0x64>)
    cd4a:	4798      	blx	r3
    cd4c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    cd4e:	68fb      	ldr	r3, [r7, #12]
    cd50:	2b00      	cmp	r3, #0
    cd52:	da01      	bge.n	cd58 <usbdc_init+0x30>
		return rc;
    cd54:	68fb      	ldr	r3, [r7, #12]
    cd56:	e010      	b.n	cd7a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cd58:	2220      	movs	r2, #32
    cd5a:	2100      	movs	r1, #0
    cd5c:	480c      	ldr	r0, [pc, #48]	; (cd90 <usbdc_init+0x68>)
    cd5e:	4b0d      	ldr	r3, [pc, #52]	; (cd94 <usbdc_init+0x6c>)
    cd60:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cd62:	4a0b      	ldr	r2, [pc, #44]	; (cd90 <usbdc_init+0x68>)
    cd64:	687b      	ldr	r3, [r7, #4]
    cd66:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cd68:	490b      	ldr	r1, [pc, #44]	; (cd98 <usbdc_init+0x70>)
    cd6a:	2000      	movs	r0, #0
    cd6c:	4b0b      	ldr	r3, [pc, #44]	; (cd9c <usbdc_init+0x74>)
    cd6e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cd70:	490b      	ldr	r1, [pc, #44]	; (cda0 <usbdc_init+0x78>)
    cd72:	2001      	movs	r0, #1
    cd74:	4b09      	ldr	r3, [pc, #36]	; (cd9c <usbdc_init+0x74>)
    cd76:	4798      	blx	r3

	return 0;
    cd78:	2300      	movs	r3, #0
}
    cd7a:	4618      	mov	r0, r3
    cd7c:	3710      	adds	r7, #16
    cd7e:	46bd      	mov	sp, r7
    cd80:	bd80      	pop	{r7, pc}
    cd82:	bf00      	nop
    cd84:	0000ef50 	.word	0x0000ef50
    cd88:	00003725 	.word	0x00003725
    cd8c:	0000317d 	.word	0x0000317d
    cd90:	20000c88 	.word	0x20000c88
    cd94:	0000e869 	.word	0x0000e869
    cd98:	0000ca85 	.word	0x0000ca85
    cd9c:	00003229 	.word	0x00003229
    cda0:	0000cc61 	.word	0x0000cc61

0000cda4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cda4:	b580      	push	{r7, lr}
    cda6:	b082      	sub	sp, #8
    cda8:	af00      	add	r7, sp, #0
    cdaa:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    cdac:	6879      	ldr	r1, [r7, #4]
    cdae:	4803      	ldr	r0, [pc, #12]	; (cdbc <usbdc_register_function+0x18>)
    cdb0:	4b03      	ldr	r3, [pc, #12]	; (cdc0 <usbdc_register_function+0x1c>)
    cdb2:	4798      	blx	r3
}
    cdb4:	bf00      	nop
    cdb6:	3708      	adds	r7, #8
    cdb8:	46bd      	mov	sp, r7
    cdba:	bd80      	pop	{r7, pc}
    cdbc:	20000c98 	.word	0x20000c98
    cdc0:	00003801 	.word	0x00003801

0000cdc4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cdc4:	b580      	push	{r7, lr}
    cdc6:	b082      	sub	sp, #8
    cdc8:	af00      	add	r7, sp, #0
    cdca:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    cdcc:	4b0f      	ldr	r3, [pc, #60]	; (ce0c <usbdc_start+0x48>)
    cdce:	7e9b      	ldrb	r3, [r3, #26]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d002      	beq.n	cdda <usbdc_start+0x16>
		return ERR_BUSY;
    cdd4:	f06f 0303 	mvn.w	r3, #3
    cdd8:	e013      	b.n	ce02 <usbdc_start+0x3e>
	}

	if (desces) {
    cdda:	687b      	ldr	r3, [r7, #4]
    cddc:	2b00      	cmp	r3, #0
    cdde:	d00e      	beq.n	cdfe <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    cde0:	4a0a      	ldr	r2, [pc, #40]	; (ce0c <usbdc_start+0x48>)
    cde2:	687b      	ldr	r3, [r7, #4]
    cde4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	681b      	ldr	r3, [r3, #0]
    cdea:	79da      	ldrb	r2, [r3, #7]
    cdec:	4b07      	ldr	r3, [pc, #28]	; (ce0c <usbdc_start+0x48>)
    cdee:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cdf0:	4b06      	ldr	r3, [pc, #24]	; (ce0c <usbdc_start+0x48>)
    cdf2:	2201      	movs	r2, #1
    cdf4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cdf6:	4b06      	ldr	r3, [pc, #24]	; (ce10 <usbdc_start+0x4c>)
    cdf8:	4798      	blx	r3
	return ERR_NONE;
    cdfa:	2300      	movs	r3, #0
    cdfc:	e001      	b.n	ce02 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    cdfe:	f06f 0308 	mvn.w	r3, #8
}
    ce02:	4618      	mov	r0, r3
    ce04:	3708      	adds	r7, #8
    ce06:	46bd      	mov	sp, r7
    ce08:	bd80      	pop	{r7, pc}
    ce0a:	bf00      	nop
    ce0c:	20000c88 	.word	0x20000c88
    ce10:	0000324d 	.word	0x0000324d

0000ce14 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ce14:	b580      	push	{r7, lr}
    ce16:	af00      	add	r7, sp, #0
	usb_d_attach();
    ce18:	4b01      	ldr	r3, [pc, #4]	; (ce20 <usbdc_attach+0xc>)
    ce1a:	4798      	blx	r3
}
    ce1c:	bf00      	nop
    ce1e:	bd80      	pop	{r7, pc}
    ce20:	00003261 	.word	0x00003261

0000ce24 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ce24:	b480      	push	{r7}
    ce26:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ce28:	4b03      	ldr	r3, [pc, #12]	; (ce38 <usbdc_get_ctrl_buffer+0x14>)
    ce2a:	695b      	ldr	r3, [r3, #20]
}
    ce2c:	4618      	mov	r0, r3
    ce2e:	46bd      	mov	sp, r7
    ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce34:	4770      	bx	lr
    ce36:	bf00      	nop
    ce38:	20000c88 	.word	0x20000c88

0000ce3c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ce3c:	b480      	push	{r7}
    ce3e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ce40:	4b07      	ldr	r3, [pc, #28]	; (ce60 <usbdc_get_state+0x24>)
    ce42:	7e9b      	ldrb	r3, [r3, #26]
    ce44:	f003 0310 	and.w	r3, r3, #16
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d001      	beq.n	ce50 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ce4c:	2310      	movs	r3, #16
    ce4e:	e001      	b.n	ce54 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ce50:	4b03      	ldr	r3, [pc, #12]	; (ce60 <usbdc_get_state+0x24>)
    ce52:	7e9b      	ldrb	r3, [r3, #26]
}
    ce54:	4618      	mov	r0, r3
    ce56:	46bd      	mov	sp, r7
    ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce5c:	4770      	bx	lr
    ce5e:	bf00      	nop
    ce60:	20000c88 	.word	0x20000c88

0000ce64 <usb_get_u16>:
{
    ce64:	b480      	push	{r7}
    ce66:	b083      	sub	sp, #12
    ce68:	af00      	add	r7, sp, #0
    ce6a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	781b      	ldrb	r3, [r3, #0]
    ce70:	b29a      	uxth	r2, r3
    ce72:	687b      	ldr	r3, [r7, #4]
    ce74:	3301      	adds	r3, #1
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	b29b      	uxth	r3, r3
    ce7a:	021b      	lsls	r3, r3, #8
    ce7c:	b29b      	uxth	r3, r3
    ce7e:	4413      	add	r3, r2
    ce80:	b29b      	uxth	r3, r3
}
    ce82:	4618      	mov	r0, r3
    ce84:	370c      	adds	r7, #12
    ce86:	46bd      	mov	sp, r7
    ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce8c:	4770      	bx	lr

0000ce8e <usb_desc_len>:
{
    ce8e:	b480      	push	{r7}
    ce90:	b083      	sub	sp, #12
    ce92:	af00      	add	r7, sp, #0
    ce94:	6078      	str	r0, [r7, #4]
	return desc[0];
    ce96:	687b      	ldr	r3, [r7, #4]
    ce98:	781b      	ldrb	r3, [r3, #0]
}
    ce9a:	4618      	mov	r0, r3
    ce9c:	370c      	adds	r7, #12
    ce9e:	46bd      	mov	sp, r7
    cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cea4:	4770      	bx	lr

0000cea6 <usb_desc_type>:
{
    cea6:	b480      	push	{r7}
    cea8:	b083      	sub	sp, #12
    ceaa:	af00      	add	r7, sp, #0
    ceac:	6078      	str	r0, [r7, #4]
	return desc[1];
    ceae:	687b      	ldr	r3, [r7, #4]
    ceb0:	3301      	adds	r3, #1
    ceb2:	781b      	ldrb	r3, [r3, #0]
}
    ceb4:	4618      	mov	r0, r3
    ceb6:	370c      	adds	r7, #12
    ceb8:	46bd      	mov	sp, r7
    ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
    cebe:	4770      	bx	lr

0000cec0 <usb_desc_next>:
{
    cec0:	b580      	push	{r7, lr}
    cec2:	b082      	sub	sp, #8
    cec4:	af00      	add	r7, sp, #0
    cec6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cec8:	6878      	ldr	r0, [r7, #4]
    ceca:	4b05      	ldr	r3, [pc, #20]	; (cee0 <usb_desc_next+0x20>)
    cecc:	4798      	blx	r3
    cece:	4603      	mov	r3, r0
    ced0:	461a      	mov	r2, r3
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	4413      	add	r3, r2
}
    ced6:	4618      	mov	r0, r3
    ced8:	3708      	adds	r7, #8
    ceda:	46bd      	mov	sp, r7
    cedc:	bd80      	pop	{r7, pc}
    cede:	bf00      	nop
    cee0:	0000ce8f 	.word	0x0000ce8f

0000cee4 <usb_cfg_desc_total_len>:
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b082      	sub	sp, #8
    cee8:	af00      	add	r7, sp, #0
    ceea:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	3302      	adds	r3, #2
    cef0:	4618      	mov	r0, r3
    cef2:	4b03      	ldr	r3, [pc, #12]	; (cf00 <usb_cfg_desc_total_len+0x1c>)
    cef4:	4798      	blx	r3
    cef6:	4603      	mov	r3, r0
}
    cef8:	4618      	mov	r0, r3
    cefa:	3708      	adds	r7, #8
    cefc:	46bd      	mov	sp, r7
    cefe:	bd80      	pop	{r7, pc}
    cf00:	0000ce65 	.word	0x0000ce65

0000cf04 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    cf04:	b580      	push	{r7, lr}
    cf06:	b082      	sub	sp, #8
    cf08:	af00      	add	r7, sp, #0
    cf0a:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cf0c:	6878      	ldr	r0, [r7, #4]
    cf0e:	4b05      	ldr	r3, [pc, #20]	; (cf24 <usb_cfg_desc_next+0x20>)
    cf10:	4798      	blx	r3
    cf12:	4603      	mov	r3, r0
    cf14:	461a      	mov	r2, r3
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	4413      	add	r3, r2
}
    cf1a:	4618      	mov	r0, r3
    cf1c:	3708      	adds	r7, #8
    cf1e:	46bd      	mov	sp, r7
    cf20:	bd80      	pop	{r7, pc}
    cf22:	bf00      	nop
    cf24:	0000cee5 	.word	0x0000cee5

0000cf28 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cf28:	b580      	push	{r7, lr}
    cf2a:	b084      	sub	sp, #16
    cf2c:	af00      	add	r7, sp, #0
    cf2e:	60f8      	str	r0, [r7, #12]
    cf30:	60b9      	str	r1, [r7, #8]
    cf32:	4613      	mov	r3, r2
    cf34:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cf36:	e015      	b.n	cf64 <usb_find_desc+0x3c>
		_desc_len_check();
    cf38:	68f8      	ldr	r0, [r7, #12]
    cf3a:	4b0f      	ldr	r3, [pc, #60]	; (cf78 <usb_find_desc+0x50>)
    cf3c:	4798      	blx	r3
    cf3e:	4603      	mov	r3, r0
    cf40:	2b01      	cmp	r3, #1
    cf42:	d801      	bhi.n	cf48 <usb_find_desc+0x20>
    cf44:	2300      	movs	r3, #0
    cf46:	e012      	b.n	cf6e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    cf48:	68f8      	ldr	r0, [r7, #12]
    cf4a:	4b0c      	ldr	r3, [pc, #48]	; (cf7c <usb_find_desc+0x54>)
    cf4c:	4798      	blx	r3
    cf4e:	4603      	mov	r3, r0
    cf50:	461a      	mov	r2, r3
    cf52:	79fb      	ldrb	r3, [r7, #7]
    cf54:	4293      	cmp	r3, r2
    cf56:	d101      	bne.n	cf5c <usb_find_desc+0x34>
			return desc;
    cf58:	68fb      	ldr	r3, [r7, #12]
    cf5a:	e008      	b.n	cf6e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    cf5c:	68f8      	ldr	r0, [r7, #12]
    cf5e:	4b08      	ldr	r3, [pc, #32]	; (cf80 <usb_find_desc+0x58>)
    cf60:	4798      	blx	r3
    cf62:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    cf64:	68fa      	ldr	r2, [r7, #12]
    cf66:	68bb      	ldr	r3, [r7, #8]
    cf68:	429a      	cmp	r2, r3
    cf6a:	d3e5      	bcc.n	cf38 <usb_find_desc+0x10>
	}
	return NULL;
    cf6c:	2300      	movs	r3, #0
}
    cf6e:	4618      	mov	r0, r3
    cf70:	3710      	adds	r7, #16
    cf72:	46bd      	mov	sp, r7
    cf74:	bd80      	pop	{r7, pc}
    cf76:	bf00      	nop
    cf78:	0000ce8f 	.word	0x0000ce8f
    cf7c:	0000cea7 	.word	0x0000cea7
    cf80:	0000cec1 	.word	0x0000cec1

0000cf84 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    cf84:	b580      	push	{r7, lr}
    cf86:	b082      	sub	sp, #8
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
    cf8c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cf8e:	e019      	b.n	cfc4 <usb_find_ep_desc+0x40>
		_desc_len_check();
    cf90:	6878      	ldr	r0, [r7, #4]
    cf92:	4b12      	ldr	r3, [pc, #72]	; (cfdc <usb_find_ep_desc+0x58>)
    cf94:	4798      	blx	r3
    cf96:	4603      	mov	r3, r0
    cf98:	2b01      	cmp	r3, #1
    cf9a:	d801      	bhi.n	cfa0 <usb_find_ep_desc+0x1c>
    cf9c:	2300      	movs	r3, #0
    cf9e:	e018      	b.n	cfd2 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cfa0:	6878      	ldr	r0, [r7, #4]
    cfa2:	4b0f      	ldr	r3, [pc, #60]	; (cfe0 <usb_find_ep_desc+0x5c>)
    cfa4:	4798      	blx	r3
    cfa6:	4603      	mov	r3, r0
    cfa8:	2b04      	cmp	r3, #4
    cfaa:	d010      	beq.n	cfce <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cfac:	6878      	ldr	r0, [r7, #4]
    cfae:	4b0c      	ldr	r3, [pc, #48]	; (cfe0 <usb_find_ep_desc+0x5c>)
    cfb0:	4798      	blx	r3
    cfb2:	4603      	mov	r3, r0
    cfb4:	2b05      	cmp	r3, #5
    cfb6:	d101      	bne.n	cfbc <usb_find_ep_desc+0x38>
			return desc;
    cfb8:	687b      	ldr	r3, [r7, #4]
    cfba:	e00a      	b.n	cfd2 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    cfbc:	6878      	ldr	r0, [r7, #4]
    cfbe:	4b09      	ldr	r3, [pc, #36]	; (cfe4 <usb_find_ep_desc+0x60>)
    cfc0:	4798      	blx	r3
    cfc2:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    cfc4:	687a      	ldr	r2, [r7, #4]
    cfc6:	683b      	ldr	r3, [r7, #0]
    cfc8:	429a      	cmp	r2, r3
    cfca:	d3e1      	bcc.n	cf90 <usb_find_ep_desc+0xc>
    cfcc:	e000      	b.n	cfd0 <usb_find_ep_desc+0x4c>
			break;
    cfce:	bf00      	nop
	}
	return NULL;
    cfd0:	2300      	movs	r3, #0
}
    cfd2:	4618      	mov	r0, r3
    cfd4:	3708      	adds	r7, #8
    cfd6:	46bd      	mov	sp, r7
    cfd8:	bd80      	pop	{r7, pc}
    cfda:	bf00      	nop
    cfdc:	0000ce8f 	.word	0x0000ce8f
    cfe0:	0000cea7 	.word	0x0000cea7
    cfe4:	0000cec1 	.word	0x0000cec1

0000cfe8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cfe8:	b580      	push	{r7, lr}
    cfea:	b084      	sub	sp, #16
    cfec:	af00      	add	r7, sp, #0
    cfee:	60f8      	str	r0, [r7, #12]
    cff0:	60b9      	str	r1, [r7, #8]
    cff2:	4613      	mov	r3, r2
    cff4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cff6:	2202      	movs	r2, #2
    cff8:	68b9      	ldr	r1, [r7, #8]
    cffa:	68f8      	ldr	r0, [r7, #12]
    cffc:	4b15      	ldr	r3, [pc, #84]	; (d054 <usb_find_cfg_desc+0x6c>)
    cffe:	4798      	blx	r3
    d000:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	2b00      	cmp	r3, #0
    d006:	d11a      	bne.n	d03e <usb_find_cfg_desc+0x56>
		return NULL;
    d008:	2300      	movs	r3, #0
    d00a:	e01f      	b.n	d04c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d00c:	68f8      	ldr	r0, [r7, #12]
    d00e:	4b12      	ldr	r3, [pc, #72]	; (d058 <usb_find_cfg_desc+0x70>)
    d010:	4798      	blx	r3
    d012:	4603      	mov	r3, r0
    d014:	2b01      	cmp	r3, #1
    d016:	d801      	bhi.n	d01c <usb_find_cfg_desc+0x34>
    d018:	2300      	movs	r3, #0
    d01a:	e017      	b.n	d04c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d01c:	68fb      	ldr	r3, [r7, #12]
    d01e:	3301      	adds	r3, #1
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	2b02      	cmp	r3, #2
    d024:	d110      	bne.n	d048 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d026:	68fb      	ldr	r3, [r7, #12]
    d028:	3305      	adds	r3, #5
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	79fa      	ldrb	r2, [r7, #7]
    d02e:	429a      	cmp	r2, r3
    d030:	d101      	bne.n	d036 <usb_find_cfg_desc+0x4e>
			return desc;
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	e00a      	b.n	d04c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d036:	68f8      	ldr	r0, [r7, #12]
    d038:	4b08      	ldr	r3, [pc, #32]	; (d05c <usb_find_cfg_desc+0x74>)
    d03a:	4798      	blx	r3
    d03c:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d03e:	68fa      	ldr	r2, [r7, #12]
    d040:	68bb      	ldr	r3, [r7, #8]
    d042:	429a      	cmp	r2, r3
    d044:	d3e2      	bcc.n	d00c <usb_find_cfg_desc+0x24>
    d046:	e000      	b.n	d04a <usb_find_cfg_desc+0x62>
			break;
    d048:	bf00      	nop
	}
	return NULL;
    d04a:	2300      	movs	r3, #0
}
    d04c:	4618      	mov	r0, r3
    d04e:	3710      	adds	r7, #16
    d050:	46bd      	mov	sp, r7
    d052:	bd80      	pop	{r7, pc}
    d054:	0000cf29 	.word	0x0000cf29
    d058:	0000ce8f 	.word	0x0000ce8f
    d05c:	0000cf05 	.word	0x0000cf05

0000d060 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d060:	b580      	push	{r7, lr}
    d062:	b086      	sub	sp, #24
    d064:	af00      	add	r7, sp, #0
    d066:	60f8      	str	r0, [r7, #12]
    d068:	60b9      	str	r1, [r7, #8]
    d06a:	4613      	mov	r3, r2
    d06c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d06e:	2300      	movs	r3, #0
    d070:	75fb      	strb	r3, [r7, #23]
    d072:	e020      	b.n	d0b6 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d074:	2203      	movs	r2, #3
    d076:	68b9      	ldr	r1, [r7, #8]
    d078:	68f8      	ldr	r0, [r7, #12]
    d07a:	4b13      	ldr	r3, [pc, #76]	; (d0c8 <usb_find_str_desc+0x68>)
    d07c:	4798      	blx	r3
    d07e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d080:	68fb      	ldr	r3, [r7, #12]
    d082:	2b00      	cmp	r3, #0
    d084:	d015      	beq.n	d0b2 <usb_find_str_desc+0x52>
			_desc_len_check();
    d086:	68f8      	ldr	r0, [r7, #12]
    d088:	4b10      	ldr	r3, [pc, #64]	; (d0cc <usb_find_str_desc+0x6c>)
    d08a:	4798      	blx	r3
    d08c:	4603      	mov	r3, r0
    d08e:	2b01      	cmp	r3, #1
    d090:	d801      	bhi.n	d096 <usb_find_str_desc+0x36>
    d092:	2300      	movs	r3, #0
    d094:	e014      	b.n	d0c0 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d096:	7dfa      	ldrb	r2, [r7, #23]
    d098:	79fb      	ldrb	r3, [r7, #7]
    d09a:	429a      	cmp	r2, r3
    d09c:	d101      	bne.n	d0a2 <usb_find_str_desc+0x42>
				return desc;
    d09e:	68fb      	ldr	r3, [r7, #12]
    d0a0:	e00e      	b.n	d0c0 <usb_find_str_desc+0x60>
			}
			i++;
    d0a2:	7dfb      	ldrb	r3, [r7, #23]
    d0a4:	3301      	adds	r3, #1
    d0a6:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d0a8:	68f8      	ldr	r0, [r7, #12]
    d0aa:	4b09      	ldr	r3, [pc, #36]	; (d0d0 <usb_find_str_desc+0x70>)
    d0ac:	4798      	blx	r3
    d0ae:	60f8      	str	r0, [r7, #12]
    d0b0:	e001      	b.n	d0b6 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d0b2:	2300      	movs	r3, #0
    d0b4:	e004      	b.n	d0c0 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d0b6:	68fa      	ldr	r2, [r7, #12]
    d0b8:	68bb      	ldr	r3, [r7, #8]
    d0ba:	429a      	cmp	r2, r3
    d0bc:	d3da      	bcc.n	d074 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d0be:	2300      	movs	r3, #0
}
    d0c0:	4618      	mov	r0, r3
    d0c2:	3718      	adds	r7, #24
    d0c4:	46bd      	mov	sp, r7
    d0c6:	bd80      	pop	{r7, pc}
    d0c8:	0000cf29 	.word	0x0000cf29
    d0cc:	0000ce8f 	.word	0x0000ce8f
    d0d0:	0000cec1 	.word	0x0000cec1

0000d0d4 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d0d4:	b480      	push	{r7}
    d0d6:	b083      	sub	sp, #12
    d0d8:	af00      	add	r7, sp, #0
    d0da:	6078      	str	r0, [r7, #4]
    d0dc:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d0de:	687b      	ldr	r3, [r7, #4]
    d0e0:	683a      	ldr	r2, [r7, #0]
    d0e2:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d0e4:	687b      	ldr	r3, [r7, #4]
    d0e6:	4618      	mov	r0, r3
    d0e8:	370c      	adds	r7, #12
    d0ea:	46bd      	mov	sp, r7
    d0ec:	bc80      	pop	{r7}
    d0ee:	4770      	bx	lr

0000d0f0 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d0f0:	b480      	push	{r7}
    d0f2:	b083      	sub	sp, #12
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d0f8:	687b      	ldr	r3, [r7, #4]
    d0fa:	4618      	mov	r0, r3
    d0fc:	370c      	adds	r7, #12
    d0fe:	46bd      	mov	sp, r7
    d100:	bc80      	pop	{r7}
    d102:	4770      	bx	lr

0000d104 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d104:	b580      	push	{r7, lr}
    d106:	b084      	sub	sp, #16
    d108:	af00      	add	r7, sp, #0
    d10a:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	4a14      	ldr	r2, [pc, #80]	; (d160 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d110:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d112:	687b      	ldr	r3, [r7, #4]
    d114:	4a12      	ldr	r2, [pc, #72]	; (d160 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d116:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d118:	687b      	ldr	r3, [r7, #4]
    d11a:	691a      	ldr	r2, [r3, #16]
    d11c:	687b      	ldr	r3, [r7, #4]
    d11e:	330c      	adds	r3, #12
    d120:	4619      	mov	r1, r3
    d122:	4610      	mov	r0, r2
    d124:	4b0f      	ldr	r3, [pc, #60]	; (d164 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    d126:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	691b      	ldr	r3, [r3, #16]
    d12c:	4618      	mov	r0, r3
    d12e:	4b0e      	ldr	r3, [pc, #56]	; (d168 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    d130:	4798      	blx	r3
    d132:	4603      	mov	r3, r0
    d134:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    d136:	7bfb      	ldrb	r3, [r7, #15]
    d138:	2b00      	cmp	r3, #0
    d13a:	bf0c      	ite	eq
    d13c:	2301      	moveq	r3, #1
    d13e:	2300      	movne	r3, #0
    d140:	b2da      	uxtb	r2, r3
    d142:	687b      	ldr	r3, [r7, #4]
    d144:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    d146:	687b      	ldr	r3, [r7, #4]
    d148:	7a5b      	ldrb	r3, [r3, #9]
    d14a:	b2da      	uxtb	r2, r3
    d14c:	687b      	ldr	r3, [r7, #4]
    d14e:	721a      	strb	r2, [r3, #8]
	return isOK;
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	7a5b      	ldrb	r3, [r3, #9]
    d154:	b2db      	uxtb	r3, r3
	
}
    d156:	4618      	mov	r0, r3
    d158:	3710      	adds	r7, #16
    d15a:	46bd      	mov	sp, r7
    d15c:	bd80      	pop	{r7, pc}
    d15e:	bf00      	nop
    d160:	20000ca8 	.word	0x20000ca8
    d164:	0000251f 	.word	0x0000251f
    d168:	000024c5 	.word	0x000024c5

0000d16c <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
    d172:	6078      	str	r0, [r7, #4]
    d174:	460b      	mov	r3, r1
    d176:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d178:	687b      	ldr	r3, [r7, #4]
    d17a:	691b      	ldr	r3, [r3, #16]
    d17c:	78fa      	ldrb	r2, [r7, #3]
    d17e:	b211      	sxth	r1, r2
    d180:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d184:	4618      	mov	r0, r3
    d186:	4b03      	ldr	r3, [pc, #12]	; (d194 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d188:	4798      	blx	r3
    d18a:	4603      	mov	r3, r0
}
    d18c:	4618      	mov	r0, r3
    d18e:	3708      	adds	r7, #8
    d190:	46bd      	mov	sp, r7
    d192:	bd80      	pop	{r7, pc}
    d194:	000024e5 	.word	0x000024e5

0000d198 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d198:	b580      	push	{r7, lr}
    d19a:	b086      	sub	sp, #24
    d19c:	af00      	add	r7, sp, #0
    d19e:	60f8      	str	r0, [r7, #12]
    d1a0:	60b9      	str	r1, [r7, #8]
    d1a2:	4613      	mov	r3, r2
    d1a4:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
    d1a6:	68f8      	ldr	r0, [r7, #12]
    d1a8:	4b08      	ldr	r3, [pc, #32]	; (d1cc <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
    d1aa:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
    d1ac:	68fb      	ldr	r3, [r7, #12]
    d1ae:	68db      	ldr	r3, [r3, #12]
    d1b0:	88fa      	ldrh	r2, [r7, #6]
    d1b2:	68b9      	ldr	r1, [r7, #8]
    d1b4:	4618      	mov	r0, r3
    d1b6:	4b06      	ldr	r3, [pc, #24]	; (d1d0 <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
    d1b8:	4798      	blx	r3
    d1ba:	6178      	str	r0, [r7, #20]
	Irq_Enable();
    d1bc:	68f8      	ldr	r0, [r7, #12]
    d1be:	4b05      	ldr	r3, [pc, #20]	; (d1d4 <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
    d1c0:	4798      	blx	r3
	return w;
    d1c2:	697b      	ldr	r3, [r7, #20]
}
    d1c4:	4618      	mov	r0, r3
    d1c6:	3718      	adds	r7, #24
    d1c8:	46bd      	mov	sp, r7
    d1ca:	bd80      	pop	{r7, pc}
    d1cc:	0000d231 	.word	0x0000d231
    d1d0:	0000e611 	.word	0x0000e611
    d1d4:	0000d219 	.word	0x0000d219

0000d1d8 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d1d8:	b580      	push	{r7, lr}
    d1da:	b086      	sub	sp, #24
    d1dc:	af00      	add	r7, sp, #0
    d1de:	60f8      	str	r0, [r7, #12]
    d1e0:	60b9      	str	r1, [r7, #8]
    d1e2:	4613      	mov	r3, r2
    d1e4:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
    d1e6:	68f8      	ldr	r0, [r7, #12]
    d1e8:	4b08      	ldr	r3, [pc, #32]	; (d20c <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
    d1ea:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
    d1ec:	68fb      	ldr	r3, [r7, #12]
    d1ee:	68db      	ldr	r3, [r3, #12]
    d1f0:	88fa      	ldrh	r2, [r7, #6]
    d1f2:	68b9      	ldr	r1, [r7, #8]
    d1f4:	4618      	mov	r0, r3
    d1f6:	4b06      	ldr	r3, [pc, #24]	; (d210 <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
    d1f8:	4798      	blx	r3
    d1fa:	6178      	str	r0, [r7, #20]
	Irq_Enable();
    d1fc:	68f8      	ldr	r0, [r7, #12]
    d1fe:	4b05      	ldr	r3, [pc, #20]	; (d214 <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
    d200:	4798      	blx	r3
	return r;
    d202:	697b      	ldr	r3, [r7, #20]
}
    d204:	4618      	mov	r0, r3
    d206:	3718      	adds	r7, #24
    d208:	46bd      	mov	sp, r7
    d20a:	bd80      	pop	{r7, pc}
    d20c:	0000d231 	.word	0x0000d231
    d210:	0000e661 	.word	0x0000e661
    d214:	0000d219 	.word	0x0000d219

0000d218 <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
    d218:	b480      	push	{r7}
    d21a:	b083      	sub	sp, #12
    d21c:	af00      	add	r7, sp, #0
    d21e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    d220:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d224:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
    d226:	bf00      	nop
    d228:	370c      	adds	r7, #12
    d22a:	46bd      	mov	sp, r7
    d22c:	bc80      	pop	{r7}
    d22e:	4770      	bx	lr

0000d230 <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
    d230:	b480      	push	{r7}
    d232:	b083      	sub	sp, #12
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    d238:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    d23c:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
    d23e:	bf00      	nop
    d240:	370c      	adds	r7, #12
    d242:	46bd      	mov	sp, r7
    d244:	bc80      	pop	{r7}
    d246:	4770      	bx	lr

0000d248 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d248:	b480      	push	{r7}
    d24a:	b083      	sub	sp, #12
    d24c:	af00      	add	r7, sp, #0
    d24e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	4618      	mov	r0, r3
    d254:	370c      	adds	r7, #12
    d256:	46bd      	mov	sp, r7
    d258:	bc80      	pop	{r7}
    d25a:	4770      	bx	lr

0000d25c <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d25c:	b480      	push	{r7}
    d25e:	b083      	sub	sp, #12
    d260:	af00      	add	r7, sp, #0
    d262:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d264:	687b      	ldr	r3, [r7, #4]
    d266:	4618      	mov	r0, r3
    d268:	370c      	adds	r7, #12
    d26a:	46bd      	mov	sp, r7
    d26c:	bc80      	pop	{r7}
    d26e:	4770      	bx	lr

0000d270 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d270:	b480      	push	{r7}
    d272:	b085      	sub	sp, #20
    d274:	af00      	add	r7, sp, #0
    d276:	60f8      	str	r0, [r7, #12]
    d278:	460b      	mov	r3, r1
    d27a:	607a      	str	r2, [r7, #4]
    d27c:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d27e:	687b      	ldr	r3, [r7, #4]
    d280:	681a      	ldr	r2, [r3, #0]
    d282:	68fb      	ldr	r3, [r7, #12]
    d284:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	685a      	ldr	r2, [r3, #4]
    d28a:	68fb      	ldr	r3, [r7, #12]
    d28c:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    d28e:	68fb      	ldr	r3, [r7, #12]
    d290:	7afa      	ldrb	r2, [r7, #11]
    d292:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    d294:	68fb      	ldr	r3, [r7, #12]
    d296:	687a      	ldr	r2, [r7, #4]
    d298:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    d29a:	68fb      	ldr	r3, [r7, #12]
    d29c:	68db      	ldr	r3, [r3, #12]
    d29e:	7a5b      	ldrb	r3, [r3, #9]
    d2a0:	b2da      	uxtb	r2, r3
    d2a2:	68fb      	ldr	r3, [r7, #12]
    d2a4:	719a      	strb	r2, [r3, #6]
	return isOK;
    d2a6:	68fb      	ldr	r3, [r7, #12]
    d2a8:	799b      	ldrb	r3, [r3, #6]
    d2aa:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d2ac:	4618      	mov	r0, r3
    d2ae:	3714      	adds	r7, #20
    d2b0:	46bd      	mov	sp, r7
    d2b2:	bc80      	pop	{r7}
    d2b4:	4770      	bx	lr

0000d2b6 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d2b6:	b480      	push	{r7}
    d2b8:	b083      	sub	sp, #12
    d2ba:	af00      	add	r7, sp, #0
    d2bc:	6078      	str	r0, [r7, #4]
    d2be:	460b      	mov	r3, r1
    d2c0:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d2c2:	78fb      	ldrb	r3, [r7, #3]
    d2c4:	f003 0307 	and.w	r3, r3, #7
    d2c8:	b2db      	uxtb	r3, r3
}
    d2ca:	4618      	mov	r0, r3
    d2cc:	370c      	adds	r7, #12
    d2ce:	46bd      	mov	sp, r7
    d2d0:	bc80      	pop	{r7}
    d2d2:	4770      	bx	lr

0000d2d4 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d2d4:	b480      	push	{r7}
    d2d6:	b083      	sub	sp, #12
    d2d8:	af00      	add	r7, sp, #0
    d2da:	6078      	str	r0, [r7, #4]
    d2dc:	4608      	mov	r0, r1
    d2de:	4611      	mov	r1, r2
    d2e0:	461a      	mov	r2, r3
    d2e2:	4603      	mov	r3, r0
    d2e4:	70fb      	strb	r3, [r7, #3]
    d2e6:	460b      	mov	r3, r1
    d2e8:	70bb      	strb	r3, [r7, #2]
    d2ea:	4613      	mov	r3, r2
    d2ec:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d2ee:	78fb      	ldrb	r3, [r7, #3]
    d2f0:	2b07      	cmp	r3, #7
    d2f2:	dc01      	bgt.n	d2f8 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d2f4:	78bb      	ldrb	r3, [r7, #2]
    d2f6:	e000      	b.n	d2fa <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d2f8:	787b      	ldrb	r3, [r7, #1]
}
    d2fa:	4618      	mov	r0, r3
    d2fc:	370c      	adds	r7, #12
    d2fe:	46bd      	mov	sp, r7
    d300:	bc80      	pop	{r7}
    d302:	4770      	bx	lr

0000d304 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d304:	b580      	push	{r7, lr}
    d306:	b082      	sub	sp, #8
    d308:	af00      	add	r7, sp, #0
    d30a:	6078      	str	r0, [r7, #4]
    d30c:	460b      	mov	r3, r1
    d30e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	68da      	ldr	r2, [r3, #12]
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	7a1b      	ldrb	r3, [r3, #8]
    d318:	4619      	mov	r1, r3
    d31a:	4610      	mov	r0, r2
    d31c:	4b0a      	ldr	r3, [pc, #40]	; (d348 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d31e:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d320:	687b      	ldr	r3, [r7, #4]
    d322:	68db      	ldr	r3, [r3, #12]
    d324:	1cf9      	adds	r1, r7, #3
    d326:	2201      	movs	r2, #1
    d328:	4618      	mov	r0, r3
    d32a:	4b08      	ldr	r3, [pc, #32]	; (d34c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d32c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	68db      	ldr	r3, [r3, #12]
    d332:	6879      	ldr	r1, [r7, #4]
    d334:	2201      	movs	r2, #1
    d336:	4618      	mov	r0, r3
    d338:	4b05      	ldr	r3, [pc, #20]	; (d350 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d33a:	4798      	blx	r3

	return registerValue;
    d33c:	687b      	ldr	r3, [r7, #4]
    d33e:	781b      	ldrb	r3, [r3, #0]
}
    d340:	4618      	mov	r0, r3
    d342:	3708      	adds	r7, #8
    d344:	46bd      	mov	sp, r7
    d346:	bd80      	pop	{r7, pc}
    d348:	0000d16d 	.word	0x0000d16d
    d34c:	0000d199 	.word	0x0000d199
    d350:	0000d1d9 	.word	0x0000d1d9

0000d354 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d354:	b580      	push	{r7, lr}
    d356:	b084      	sub	sp, #16
    d358:	af00      	add	r7, sp, #0
    d35a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	68da      	ldr	r2, [r3, #12]
    d360:	687b      	ldr	r3, [r7, #4]
    d362:	7a1b      	ldrb	r3, [r3, #8]
    d364:	4619      	mov	r1, r3
    d366:	4610      	mov	r0, r2
    d368:	4b06      	ldr	r3, [pc, #24]	; (d384 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d36a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d36c:	2109      	movs	r1, #9
    d36e:	6878      	ldr	r0, [r7, #4]
    d370:	4b05      	ldr	r3, [pc, #20]	; (d388 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d372:	4798      	blx	r3
    d374:	4603      	mov	r3, r0
    d376:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d378:	7bfb      	ldrb	r3, [r7, #15]
}
    d37a:	4618      	mov	r0, r3
    d37c:	3710      	adds	r7, #16
    d37e:	46bd      	mov	sp, r7
    d380:	bd80      	pop	{r7, pc}
    d382:	bf00      	nop
    d384:	0000d16d 	.word	0x0000d16d
    d388:	0000d305 	.word	0x0000d305

0000d38c <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d38c:	b580      	push	{r7, lr}
    d38e:	b084      	sub	sp, #16
    d390:	af00      	add	r7, sp, #0
    d392:	6078      	str	r0, [r7, #4]
    d394:	460b      	mov	r3, r1
    d396:	70fb      	strb	r3, [r7, #3]
    d398:	4613      	mov	r3, r2
    d39a:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d39c:	687b      	ldr	r3, [r7, #4]
    d39e:	68da      	ldr	r2, [r3, #12]
    d3a0:	687b      	ldr	r3, [r7, #4]
    d3a2:	7a1b      	ldrb	r3, [r3, #8]
    d3a4:	4619      	mov	r1, r3
    d3a6:	4610      	mov	r0, r2
    d3a8:	4b09      	ldr	r3, [pc, #36]	; (d3d0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d3aa:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d3ac:	78fb      	ldrb	r3, [r7, #3]
    d3ae:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d3b0:	78bb      	ldrb	r3, [r7, #2]
    d3b2:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	68db      	ldr	r3, [r3, #12]
    d3b8:	f107 010c 	add.w	r1, r7, #12
    d3bc:	2202      	movs	r2, #2
    d3be:	4618      	mov	r0, r3
    d3c0:	4b04      	ldr	r3, [pc, #16]	; (d3d4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d3c2:	4798      	blx	r3
    d3c4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d3c6:	4618      	mov	r0, r3
    d3c8:	3710      	adds	r7, #16
    d3ca:	46bd      	mov	sp, r7
    d3cc:	bd80      	pop	{r7, pc}
    d3ce:	bf00      	nop
    d3d0:	0000d16d 	.word	0x0000d16d
    d3d4:	0000d199 	.word	0x0000d199

0000d3d8 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d3d8:	b580      	push	{r7, lr}
    d3da:	b084      	sub	sp, #16
    d3dc:	af00      	add	r7, sp, #0
    d3de:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d3e0:	2300      	movs	r3, #0
    d3e2:	73fb      	strb	r3, [r7, #15]
    d3e4:	7bfb      	ldrb	r3, [r7, #15]
    d3e6:	2b07      	cmp	r3, #7
    d3e8:	dc0f      	bgt.n	d40a <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d3ea:	7bfb      	ldrb	r3, [r7, #15]
    d3ec:	2201      	movs	r2, #1
    d3ee:	4619      	mov	r1, r3
    d3f0:	6878      	ldr	r0, [r7, #4]
    d3f2:	4b08      	ldr	r3, [pc, #32]	; (d414 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d3f4:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d3f6:	7bfb      	ldrb	r3, [r7, #15]
    d3f8:	2201      	movs	r2, #1
    d3fa:	4619      	mov	r1, r3
    d3fc:	6878      	ldr	r0, [r7, #4]
    d3fe:	4b06      	ldr	r3, [pc, #24]	; (d418 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d400:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d402:	7bfb      	ldrb	r3, [r7, #15]
    d404:	3301      	adds	r3, #1
    d406:	73fb      	strb	r3, [r7, #15]
    d408:	e7ec      	b.n	d3e4 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d40a:	bf00      	nop
    d40c:	3710      	adds	r7, #16
    d40e:	46bd      	mov	sp, r7
    d410:	bd80      	pop	{r7, pc}
    d412:	bf00      	nop
    d414:	0000d4dd 	.word	0x0000d4dd
    d418:	0000d5c1 	.word	0x0000d5c1

0000d41c <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d41c:	b580      	push	{r7, lr}
    d41e:	b084      	sub	sp, #16
    d420:	af00      	add	r7, sp, #0
    d422:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d424:	2300      	movs	r3, #0
    d426:	73fb      	strb	r3, [r7, #15]
    d428:	7bfb      	ldrb	r3, [r7, #15]
    d42a:	2b07      	cmp	r3, #7
    d42c:	dc09      	bgt.n	d442 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d42e:	7bfb      	ldrb	r3, [r7, #15]
    d430:	2200      	movs	r2, #0
    d432:	4619      	mov	r1, r3
    d434:	6878      	ldr	r0, [r7, #4]
    d436:	4b05      	ldr	r3, [pc, #20]	; (d44c <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d438:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d43a:	7bfb      	ldrb	r3, [r7, #15]
    d43c:	3301      	adds	r3, #1
    d43e:	73fb      	strb	r3, [r7, #15]
    d440:	e7f2      	b.n	d428 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d442:	bf00      	nop
    d444:	3710      	adds	r7, #16
    d446:	46bd      	mov	sp, r7
    d448:	bd80      	pop	{r7, pc}
    d44a:	bf00      	nop
    d44c:	0000d4dd 	.word	0x0000d4dd

0000d450 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d450:	b580      	push	{r7, lr}
    d452:	b084      	sub	sp, #16
    d454:	af00      	add	r7, sp, #0
    d456:	6078      	str	r0, [r7, #4]
    d458:	4608      	mov	r0, r1
    d45a:	4611      	mov	r1, r2
    d45c:	461a      	mov	r2, r3
    d45e:	4603      	mov	r3, r0
    d460:	70fb      	strb	r3, [r7, #3]
    d462:	460b      	mov	r3, r1
    d464:	70bb      	strb	r3, [r7, #2]
    d466:	4613      	mov	r3, r2
    d468:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d46a:	787b      	ldrb	r3, [r7, #1]
    d46c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d46e:	78fb      	ldrb	r3, [r7, #3]
    d470:	4619      	mov	r1, r3
    d472:	6878      	ldr	r0, [r7, #4]
    d474:	4b16      	ldr	r3, [pc, #88]	; (d4d0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d476:	4798      	blx	r3
    d478:	4603      	mov	r3, r0
    d47a:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d47c:	7bfb      	ldrb	r3, [r7, #15]
    d47e:	4619      	mov	r1, r3
    d480:	6878      	ldr	r0, [r7, #4]
    d482:	4b14      	ldr	r3, [pc, #80]	; (d4d4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d484:	4798      	blx	r3
    d486:	4603      	mov	r3, r0
    d488:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d48a:	78bb      	ldrb	r3, [r7, #2]
    d48c:	2b00      	cmp	r3, #0
    d48e:	d009      	beq.n	d4a4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d490:	7bba      	ldrb	r2, [r7, #14]
    d492:	7b7b      	ldrb	r3, [r7, #13]
    d494:	4619      	mov	r1, r3
    d496:	2301      	movs	r3, #1
    d498:	408b      	lsls	r3, r1
    d49a:	b2db      	uxtb	r3, r3
    d49c:	4313      	orrs	r3, r2
    d49e:	b2db      	uxtb	r3, r3
    d4a0:	73bb      	strb	r3, [r7, #14]
    d4a2:	e00a      	b.n	d4ba <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d4a4:	7bba      	ldrb	r2, [r7, #14]
    d4a6:	7b7b      	ldrb	r3, [r7, #13]
    d4a8:	4619      	mov	r1, r3
    d4aa:	2301      	movs	r3, #1
    d4ac:	408b      	lsls	r3, r1
    d4ae:	b2db      	uxtb	r3, r3
    d4b0:	43db      	mvns	r3, r3
    d4b2:	b2db      	uxtb	r3, r3
    d4b4:	4013      	ands	r3, r2
    d4b6:	b2db      	uxtb	r3, r3
    d4b8:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d4ba:	7bba      	ldrb	r2, [r7, #14]
    d4bc:	7bfb      	ldrb	r3, [r7, #15]
    d4be:	4619      	mov	r1, r3
    d4c0:	6878      	ldr	r0, [r7, #4]
    d4c2:	4b05      	ldr	r3, [pc, #20]	; (d4d8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d4c4:	4798      	blx	r3
}
    d4c6:	bf00      	nop
    d4c8:	3710      	adds	r7, #16
    d4ca:	46bd      	mov	sp, r7
    d4cc:	bd80      	pop	{r7, pc}
    d4ce:	bf00      	nop
    d4d0:	0000d2b7 	.word	0x0000d2b7
    d4d4:	0000d305 	.word	0x0000d305
    d4d8:	0000d38d 	.word	0x0000d38d

0000d4dc <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d4dc:	b590      	push	{r4, r7, lr}
    d4de:	b085      	sub	sp, #20
    d4e0:	af02      	add	r7, sp, #8
    d4e2:	6078      	str	r0, [r7, #4]
    d4e4:	460b      	mov	r3, r1
    d4e6:	70fb      	strb	r3, [r7, #3]
    d4e8:	4613      	mov	r3, r2
    d4ea:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d4ec:	78bb      	ldrb	r3, [r7, #2]
    d4ee:	2b01      	cmp	r3, #1
    d4f0:	bf0c      	ite	eq
    d4f2:	2301      	moveq	r3, #1
    d4f4:	2300      	movne	r3, #0
    d4f6:	b2db      	uxtb	r3, r3
    d4f8:	461a      	mov	r2, r3
    d4fa:	78f9      	ldrb	r1, [r7, #3]
    d4fc:	2300      	movs	r3, #0
    d4fe:	9300      	str	r3, [sp, #0]
    d500:	2300      	movs	r3, #0
    d502:	6878      	ldr	r0, [r7, #4]
    d504:	4c02      	ldr	r4, [pc, #8]	; (d510 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d506:	47a0      	blx	r4
}
    d508:	bf00      	nop
    d50a:	370c      	adds	r7, #12
    d50c:	46bd      	mov	sp, r7
    d50e:	bd90      	pop	{r4, r7, pc}
    d510:	0000d451 	.word	0x0000d451

0000d514 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d514:	b590      	push	{r4, r7, lr}
    d516:	b085      	sub	sp, #20
    d518:	af00      	add	r7, sp, #0
    d51a:	6078      	str	r0, [r7, #4]
    d51c:	460b      	mov	r3, r1
    d51e:	70fb      	strb	r3, [r7, #3]
    d520:	4613      	mov	r3, r2
    d522:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d524:	78fb      	ldrb	r3, [r7, #3]
    d526:	4619      	mov	r1, r3
    d528:	6878      	ldr	r0, [r7, #4]
    d52a:	4b21      	ldr	r3, [pc, #132]	; (d5b0 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d52c:	4798      	blx	r3
    d52e:	4603      	mov	r3, r0
    d530:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d532:	78f9      	ldrb	r1, [r7, #3]
    d534:	230a      	movs	r3, #10
    d536:	220a      	movs	r2, #10
    d538:	6878      	ldr	r0, [r7, #4]
    d53a:	4c1e      	ldr	r4, [pc, #120]	; (d5b4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d53c:	47a0      	blx	r4
    d53e:	4603      	mov	r3, r0
    d540:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d542:	7bfb      	ldrb	r3, [r7, #15]
    d544:	4619      	mov	r1, r3
    d546:	6878      	ldr	r0, [r7, #4]
    d548:	4b1b      	ldr	r3, [pc, #108]	; (d5b8 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d54a:	4798      	blx	r3
    d54c:	4603      	mov	r3, r0
    d54e:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d550:	78bb      	ldrb	r3, [r7, #2]
    d552:	2b00      	cmp	r3, #0
    d554:	d009      	beq.n	d56a <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d556:	7bba      	ldrb	r2, [r7, #14]
    d558:	7b7b      	ldrb	r3, [r7, #13]
    d55a:	4619      	mov	r1, r3
    d55c:	2301      	movs	r3, #1
    d55e:	408b      	lsls	r3, r1
    d560:	b2db      	uxtb	r3, r3
    d562:	4313      	orrs	r3, r2
    d564:	b2db      	uxtb	r3, r3
    d566:	73bb      	strb	r3, [r7, #14]
    d568:	e00a      	b.n	d580 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d56a:	7bba      	ldrb	r2, [r7, #14]
    d56c:	7b7b      	ldrb	r3, [r7, #13]
    d56e:	4619      	mov	r1, r3
    d570:	2301      	movs	r3, #1
    d572:	408b      	lsls	r3, r1
    d574:	b2db      	uxtb	r3, r3
    d576:	43db      	mvns	r3, r3
    d578:	b2db      	uxtb	r3, r3
    d57a:	4013      	ands	r3, r2
    d57c:	b2db      	uxtb	r3, r3
    d57e:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d580:	78f9      	ldrb	r1, [r7, #3]
    d582:	2309      	movs	r3, #9
    d584:	2209      	movs	r2, #9
    d586:	6878      	ldr	r0, [r7, #4]
    d588:	4c0a      	ldr	r4, [pc, #40]	; (d5b4 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d58a:	47a0      	blx	r4
    d58c:	4603      	mov	r3, r0
    d58e:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d590:	7bba      	ldrb	r2, [r7, #14]
    d592:	7bfb      	ldrb	r3, [r7, #15]
    d594:	4619      	mov	r1, r3
    d596:	6878      	ldr	r0, [r7, #4]
    d598:	4b08      	ldr	r3, [pc, #32]	; (d5bc <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d59a:	4798      	blx	r3
    d59c:	4603      	mov	r3, r0
    d59e:	2b00      	cmp	r3, #0
    d5a0:	bf0c      	ite	eq
    d5a2:	2301      	moveq	r3, #1
    d5a4:	2300      	movne	r3, #0
    d5a6:	b2db      	uxtb	r3, r3
}
    d5a8:	4618      	mov	r0, r3
    d5aa:	3714      	adds	r7, #20
    d5ac:	46bd      	mov	sp, r7
    d5ae:	bd90      	pop	{r4, r7, pc}
    d5b0:	0000d2b7 	.word	0x0000d2b7
    d5b4:	0000d2d5 	.word	0x0000d2d5
    d5b8:	0000d305 	.word	0x0000d305
    d5bc:	0000d38d 	.word	0x0000d38d

0000d5c0 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d5c0:	b590      	push	{r4, r7, lr}
    d5c2:	b085      	sub	sp, #20
    d5c4:	af02      	add	r7, sp, #8
    d5c6:	6078      	str	r0, [r7, #4]
    d5c8:	460b      	mov	r3, r1
    d5ca:	70fb      	strb	r3, [r7, #3]
    d5cc:	4613      	mov	r3, r2
    d5ce:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d5d0:	78ba      	ldrb	r2, [r7, #2]
    d5d2:	78f9      	ldrb	r1, [r7, #3]
    d5d4:	2306      	movs	r3, #6
    d5d6:	9300      	str	r3, [sp, #0]
    d5d8:	2306      	movs	r3, #6
    d5da:	6878      	ldr	r0, [r7, #4]
    d5dc:	4c02      	ldr	r4, [pc, #8]	; (d5e8 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d5de:	47a0      	blx	r4
}
    d5e0:	bf00      	nop
    d5e2:	370c      	adds	r7, #12
    d5e4:	46bd      	mov	sp, r7
    d5e6:	bd90      	pop	{r4, r7, pc}
    d5e8:	0000d451 	.word	0x0000d451

0000d5ec <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d5ec:	b480      	push	{r7}
    d5ee:	b083      	sub	sp, #12
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	6078      	str	r0, [r7, #4]
    d5f4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d5f6:	687b      	ldr	r3, [r7, #4]
    d5f8:	683a      	ldr	r2, [r7, #0]
    d5fa:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d5fc:	4a06      	ldr	r2, [pc, #24]	; (d618 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d5fe:	687b      	ldr	r3, [r7, #4]
    d600:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d602:	687b      	ldr	r3, [r7, #4]
    d604:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d608:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d60a:	687b      	ldr	r3, [r7, #4]
    d60c:	4618      	mov	r0, r3
    d60e:	370c      	adds	r7, #12
    d610:	46bd      	mov	sp, r7
    d612:	bc80      	pop	{r7}
    d614:	4770      	bx	lr
    d616:	bf00      	nop
    d618:	20000d28 	.word	0x20000d28

0000d61c <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d61c:	b480      	push	{r7}
    d61e:	b083      	sub	sp, #12
    d620:	af00      	add	r7, sp, #0
    d622:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d624:	687b      	ldr	r3, [r7, #4]
    d626:	2200      	movs	r2, #0
    d628:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d62a:	687b      	ldr	r3, [r7, #4]
    d62c:	4618      	mov	r0, r3
    d62e:	370c      	adds	r7, #12
    d630:	46bd      	mov	sp, r7
    d632:	bc80      	pop	{r7}
    d634:	4770      	bx	lr
	...

0000d638 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d638:	b580      	push	{r7, lr}
    d63a:	b086      	sub	sp, #24
    d63c:	af00      	add	r7, sp, #0
    d63e:	60f8      	str	r0, [r7, #12]
    d640:	60b9      	str	r1, [r7, #8]
    d642:	607a      	str	r2, [r7, #4]
    d644:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d646:	68f8      	ldr	r0, [r7, #12]
    d648:	4b0d      	ldr	r3, [pc, #52]	; (d680 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d64a:	4798      	blx	r3
	task->interval = interval;
    d64c:	68fb      	ldr	r3, [r7, #12]
    d64e:	699b      	ldr	r3, [r3, #24]
    d650:	687a      	ldr	r2, [r7, #4]
    d652:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d654:	68fb      	ldr	r3, [r7, #12]
    d656:	699b      	ldr	r3, [r3, #24]
    d658:	68ba      	ldr	r2, [r7, #8]
    d65a:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d65c:	68fb      	ldr	r3, [r7, #12]
    d65e:	699b      	ldr	r3, [r3, #24]
    d660:	78fa      	ldrb	r2, [r7, #3]
    d662:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d664:	68fb      	ldr	r3, [r7, #12]
    d666:	68da      	ldr	r2, [r3, #12]
    d668:	68fb      	ldr	r3, [r7, #12]
    d66a:	699b      	ldr	r3, [r3, #24]
    d66c:	4619      	mov	r1, r3
    d66e:	4610      	mov	r0, r2
    d670:	4b04      	ldr	r3, [pc, #16]	; (d684 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d672:	4798      	blx	r3
    d674:	6178      	str	r0, [r7, #20]
	
	return status;
    d676:	697b      	ldr	r3, [r7, #20]
}
    d678:	4618      	mov	r0, r3
    d67a:	3718      	adds	r7, #24
    d67c:	46bd      	mov	sp, r7
    d67e:	bd80      	pop	{r7, pc}
    d680:	0000d6fd 	.word	0x0000d6fd
    d684:	00002a61 	.word	0x00002a61

0000d688 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    d688:	b580      	push	{r7, lr}
    d68a:	b086      	sub	sp, #24
    d68c:	af00      	add	r7, sp, #0
    d68e:	60f8      	str	r0, [r7, #12]
    d690:	60b9      	str	r1, [r7, #8]
    d692:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    d694:	687a      	ldr	r2, [r7, #4]
    d696:	68b9      	ldr	r1, [r7, #8]
    d698:	68f8      	ldr	r0, [r7, #12]
    d69a:	4b0c      	ldr	r3, [pc, #48]	; (d6cc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    d69c:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d69e:	68fb      	ldr	r3, [r7, #12]
    d6a0:	68db      	ldr	r3, [r3, #12]
    d6a2:	681b      	ldr	r3, [r3, #0]
    d6a4:	699b      	ldr	r3, [r3, #24]
    d6a6:	68fa      	ldr	r2, [r7, #12]
    d6a8:	68d2      	ldr	r2, [r2, #12]
    d6aa:	3204      	adds	r2, #4
    d6ac:	4610      	mov	r0, r2
    d6ae:	4798      	blx	r3
    d6b0:	4603      	mov	r3, r0
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d105      	bne.n	d6c2 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    d6b6:	68fb      	ldr	r3, [r7, #12]
    d6b8:	68db      	ldr	r3, [r3, #12]
    d6ba:	4618      	mov	r0, r3
    d6bc:	4b04      	ldr	r3, [pc, #16]	; (d6d0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    d6be:	4798      	blx	r3
    d6c0:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    d6c2:	697b      	ldr	r3, [r7, #20]
}
    d6c4:	4618      	mov	r0, r3
    d6c6:	3718      	adds	r7, #24
    d6c8:	46bd      	mov	sp, r7
    d6ca:	bd80      	pop	{r7, pc}
    d6cc:	0000d6d5 	.word	0x0000d6d5
    d6d0:	0000298d 	.word	0x0000298d

0000d6d4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    d6d4:	b590      	push	{r4, r7, lr}
    d6d6:	b087      	sub	sp, #28
    d6d8:	af00      	add	r7, sp, #0
    d6da:	60f8      	str	r0, [r7, #12]
    d6dc:	60b9      	str	r1, [r7, #8]
    d6de:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    d6e0:	2301      	movs	r3, #1
    d6e2:	687a      	ldr	r2, [r7, #4]
    d6e4:	68b9      	ldr	r1, [r7, #8]
    d6e6:	68f8      	ldr	r0, [r7, #12]
    d6e8:	4c03      	ldr	r4, [pc, #12]	; (d6f8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    d6ea:	47a0      	blx	r4
    d6ec:	6178      	str	r0, [r7, #20]
		return status;
    d6ee:	697b      	ldr	r3, [r7, #20]
}
    d6f0:	4618      	mov	r0, r3
    d6f2:	371c      	adds	r7, #28
    d6f4:	46bd      	mov	sp, r7
    d6f6:	bd90      	pop	{r4, r7, pc}
    d6f8:	0000d639 	.word	0x0000d639

0000d6fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    d6fc:	b480      	push	{r7}
    d6fe:	b085      	sub	sp, #20
    d700:	af00      	add	r7, sp, #0
    d702:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d704:	2300      	movs	r3, #0
    d706:	73fb      	strb	r3, [r7, #15]
    d708:	7bfb      	ldrb	r3, [r7, #15]
    d70a:	2b0f      	cmp	r3, #15
    d70c:	dc1c      	bgt.n	d748 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    d70e:	7bfb      	ldrb	r3, [r7, #15]
    d710:	f003 030f 	and.w	r3, r3, #15
    d714:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d716:	7bba      	ldrb	r2, [r7, #14]
    d718:	490f      	ldr	r1, [pc, #60]	; (d758 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d71a:	4613      	mov	r3, r2
    d71c:	009b      	lsls	r3, r3, #2
    d71e:	4413      	add	r3, r2
    d720:	009b      	lsls	r3, r3, #2
    d722:	440b      	add	r3, r1
    d724:	330c      	adds	r3, #12
    d726:	681b      	ldr	r3, [r3, #0]
    d728:	2b00      	cmp	r3, #0
    d72a:	d109      	bne.n	d740 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    d72c:	7bba      	ldrb	r2, [r7, #14]
    d72e:	4613      	mov	r3, r2
    d730:	009b      	lsls	r3, r3, #2
    d732:	4413      	add	r3, r2
    d734:	009b      	lsls	r3, r3, #2
    d736:	4a08      	ldr	r2, [pc, #32]	; (d758 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d738:	441a      	add	r2, r3
    d73a:	687b      	ldr	r3, [r7, #4]
    d73c:	619a      	str	r2, [r3, #24]
			return;
    d73e:	e006      	b.n	d74e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d740:	7bfb      	ldrb	r3, [r7, #15]
    d742:	3301      	adds	r3, #1
    d744:	73fb      	strb	r3, [r7, #15]
    d746:	e7df      	b.n	d708 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    d748:	687b      	ldr	r3, [r7, #4]
    d74a:	4a03      	ldr	r2, [pc, #12]	; (d758 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d74c:	619a      	str	r2, [r3, #24]

}
    d74e:	3714      	adds	r7, #20
    d750:	46bd      	mov	sp, r7
    d752:	bc80      	pop	{r7}
    d754:	4770      	bx	lr
    d756:	bf00      	nop
    d758:	20000d2c 	.word	0x20000d2c

0000d75c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    d75c:	b580      	push	{r7, lr}
    d75e:	b082      	sub	sp, #8
    d760:	af00      	add	r7, sp, #0
    d762:	6078      	str	r0, [r7, #4]
    d764:	6039      	str	r1, [r7, #0]
    d766:	687b      	ldr	r3, [r7, #4]
    d768:	2b01      	cmp	r3, #1
    d76a:	d131      	bne.n	d7d0 <_Z41__static_initialization_and_destruction_0ii+0x74>
    d76c:	683b      	ldr	r3, [r7, #0]
    d76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d772:	4293      	cmp	r3, r2
    d774:	d12c      	bne.n	d7d0 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    d776:	4918      	ldr	r1, [pc, #96]	; (d7d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    d778:	4818      	ldr	r0, [pc, #96]	; (d7dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d77a:	4b19      	ldr	r3, [pc, #100]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d77c:	4798      	blx	r3
    d77e:	4a19      	ldr	r2, [pc, #100]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d780:	4919      	ldr	r1, [pc, #100]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d782:	4816      	ldr	r0, [pc, #88]	; (d7dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
    d784:	4b19      	ldr	r3, [pc, #100]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d786:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    d788:	4919      	ldr	r1, [pc, #100]	; (d7f0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    d78a:	481a      	ldr	r0, [pc, #104]	; (d7f4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d78c:	4b14      	ldr	r3, [pc, #80]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d78e:	4798      	blx	r3
    d790:	4a14      	ldr	r2, [pc, #80]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d792:	4915      	ldr	r1, [pc, #84]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d794:	4817      	ldr	r0, [pc, #92]	; (d7f4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    d796:	4b15      	ldr	r3, [pc, #84]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d798:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    d79a:	4917      	ldr	r1, [pc, #92]	; (d7f8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    d79c:	4817      	ldr	r0, [pc, #92]	; (d7fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d79e:	4b10      	ldr	r3, [pc, #64]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d7a0:	4798      	blx	r3
    d7a2:	4a10      	ldr	r2, [pc, #64]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d7a4:	4910      	ldr	r1, [pc, #64]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d7a6:	4815      	ldr	r0, [pc, #84]	; (d7fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    d7a8:	4b10      	ldr	r3, [pc, #64]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d7aa:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    d7ac:	4914      	ldr	r1, [pc, #80]	; (d800 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    d7ae:	4815      	ldr	r0, [pc, #84]	; (d804 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d7b0:	4b0b      	ldr	r3, [pc, #44]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d7b2:	4798      	blx	r3
    d7b4:	4a0b      	ldr	r2, [pc, #44]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d7b6:	490c      	ldr	r1, [pc, #48]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d7b8:	4812      	ldr	r0, [pc, #72]	; (d804 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    d7ba:	4b0c      	ldr	r3, [pc, #48]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d7bc:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    d7be:	4912      	ldr	r1, [pc, #72]	; (d808 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    d7c0:	4812      	ldr	r0, [pc, #72]	; (d80c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d7c2:	4b07      	ldr	r3, [pc, #28]	; (d7e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    d7c4:	4798      	blx	r3
    d7c6:	4a07      	ldr	r2, [pc, #28]	; (d7e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    d7c8:	4907      	ldr	r1, [pc, #28]	; (d7e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    d7ca:	4810      	ldr	r0, [pc, #64]	; (d80c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    d7cc:	4b07      	ldr	r3, [pc, #28]	; (d7ec <_Z41__static_initialization_and_destruction_0ii+0x90>)
    d7ce:	4798      	blx	r3
    d7d0:	bf00      	nop
    d7d2:	3708      	adds	r7, #8
    d7d4:	46bd      	mov	sp, r7
    d7d6:	bd80      	pop	{r7, pc}
    d7d8:	20000ff8 	.word	0x20000ff8
    d7dc:	20000e70 	.word	0x20000e70
    d7e0:	0000d5ed 	.word	0x0000d5ed
    d7e4:	20000000 	.word	0x20000000
    d7e8:	0000d61d 	.word	0x0000d61d
    d7ec:	0000e6b1 	.word	0x0000e6b1
    d7f0:	2000108c 	.word	0x2000108c
    d7f4:	20000e8c 	.word	0x20000e8c
    d7f8:	20001190 	.word	0x20001190
    d7fc:	20000ea8 	.word	0x20000ea8
    d800:	200010ac 	.word	0x200010ac
    d804:	20000ec4 	.word	0x20000ec4
    d808:	20001150 	.word	0x20001150
    d80c:	20000ee0 	.word	0x20000ee0

0000d810 <_GLOBAL__sub_I_ptrTimerClass>:
    d810:	b580      	push	{r7, lr}
    d812:	af00      	add	r7, sp, #0
    d814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d818:	2001      	movs	r0, #1
    d81a:	4b01      	ldr	r3, [pc, #4]	; (d820 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    d81c:	4798      	blx	r3
    d81e:	bd80      	pop	{r7, pc}
    d820:	0000d75d 	.word	0x0000d75d

0000d824 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    d824:	b480      	push	{r7}
    d826:	b083      	sub	sp, #12
    d828:	af00      	add	r7, sp, #0
    d82a:	6078      	str	r0, [r7, #4]
    d82c:	4a05      	ldr	r2, [pc, #20]	; (d844 <_ZN5PrintC1Ev+0x20>)
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	601a      	str	r2, [r3, #0]
    d832:	687b      	ldr	r3, [r7, #4]
    d834:	2200      	movs	r2, #0
    d836:	605a      	str	r2, [r3, #4]
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	4618      	mov	r0, r3
    d83c:	370c      	adds	r7, #12
    d83e:	46bd      	mov	sp, r7
    d840:	bc80      	pop	{r7}
    d842:	4770      	bx	lr
    d844:	0000efdc 	.word	0x0000efdc

0000d848 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    d848:	b480      	push	{r7}
    d84a:	b083      	sub	sp, #12
    d84c:	af00      	add	r7, sp, #0
    d84e:	6078      	str	r0, [r7, #4]
    d850:	2300      	movs	r3, #0
    d852:	4618      	mov	r0, r3
    d854:	370c      	adds	r7, #12
    d856:	46bd      	mov	sp, r7
    d858:	bc80      	pop	{r7}
    d85a:	4770      	bx	lr

0000d85c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    d85c:	b480      	push	{r7}
    d85e:	b083      	sub	sp, #12
    d860:	af00      	add	r7, sp, #0
    d862:	6078      	str	r0, [r7, #4]
    d864:	bf00      	nop
    d866:	370c      	adds	r7, #12
    d868:	46bd      	mov	sp, r7
    d86a:	bc80      	pop	{r7}
    d86c:	4770      	bx	lr
	...

0000d870 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    d870:	b580      	push	{r7, lr}
    d872:	b082      	sub	sp, #8
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	4618      	mov	r0, r3
    d87c:	4b06      	ldr	r3, [pc, #24]	; (d898 <_ZN6StreamC1Ev+0x28>)
    d87e:	4798      	blx	r3
    d880:	4a06      	ldr	r2, [pc, #24]	; (d89c <_ZN6StreamC1Ev+0x2c>)
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	601a      	str	r2, [r3, #0]
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d88c:	609a      	str	r2, [r3, #8]
    d88e:	687b      	ldr	r3, [r7, #4]
    d890:	4618      	mov	r0, r3
    d892:	3708      	adds	r7, #8
    d894:	46bd      	mov	sp, r7
    d896:	bd80      	pop	{r7, pc}
    d898:	0000d825 	.word	0x0000d825
    d89c:	0000efa0 	.word	0x0000efa0

0000d8a0 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    d8a0:	b480      	push	{r7}
    d8a2:	b083      	sub	sp, #12
    d8a4:	af00      	add	r7, sp, #0
    d8a6:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    d8a8:	4b06      	ldr	r3, [pc, #24]	; (d8c4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d8aa:	681b      	ldr	r3, [r3, #0]
    d8ac:	2201      	movs	r2, #1
    d8ae:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    d8b0:	4b04      	ldr	r3, [pc, #16]	; (d8c4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    d8b2:	681b      	ldr	r3, [r3, #0]
    d8b4:	2200      	movs	r2, #0
    d8b6:	741a      	strb	r2, [r3, #16]
	
}
    d8b8:	bf00      	nop
    d8ba:	370c      	adds	r7, #12
    d8bc:	46bd      	mov	sp, r7
    d8be:	bc80      	pop	{r7}
    d8c0:	4770      	bx	lr
    d8c2:	bf00      	nop
    d8c4:	20000efc 	.word	0x20000efc

0000d8c8 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d8c8:	b480      	push	{r7}
    d8ca:	b083      	sub	sp, #12
    d8cc:	af00      	add	r7, sp, #0
    d8ce:	4603      	mov	r3, r0
    d8d0:	603a      	str	r2, [r7, #0]
    d8d2:	71fb      	strb	r3, [r7, #7]
    d8d4:	460b      	mov	r3, r1
    d8d6:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    d8d8:	4b08      	ldr	r3, [pc, #32]	; (d8fc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8da:	681b      	ldr	r3, [r3, #0]
    d8dc:	2201      	movs	r2, #1
    d8de:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    d8e0:	4b06      	ldr	r3, [pc, #24]	; (d8fc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8e2:	681b      	ldr	r3, [r3, #0]
    d8e4:	2201      	movs	r2, #1
    d8e6:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d8e8:	4b04      	ldr	r3, [pc, #16]	; (d8fc <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    d8ea:	681b      	ldr	r3, [r3, #0]
    d8ec:	2201      	movs	r2, #1
    d8ee:	741a      	strb	r2, [r3, #16]


	return false;
    d8f0:	2300      	movs	r3, #0
}
    d8f2:	4618      	mov	r0, r3
    d8f4:	370c      	adds	r7, #12
    d8f6:	46bd      	mov	sp, r7
    d8f8:	bc80      	pop	{r7}
    d8fa:	4770      	bx	lr
    d8fc:	20000efc 	.word	0x20000efc

0000d900 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    d900:	b480      	push	{r7}
    d902:	b083      	sub	sp, #12
    d904:	af00      	add	r7, sp, #0
    d906:	4603      	mov	r3, r0
    d908:	603a      	str	r2, [r7, #0]
    d90a:	71fb      	strb	r3, [r7, #7]
    d90c:	460b      	mov	r3, r1
    d90e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    d910:	4b08      	ldr	r3, [pc, #32]	; (d934 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d912:	681b      	ldr	r3, [r3, #0]
    d914:	2201      	movs	r2, #1
    d916:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    d918:	4b06      	ldr	r3, [pc, #24]	; (d934 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d91a:	681b      	ldr	r3, [r3, #0]
    d91c:	2201      	movs	r2, #1
    d91e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    d920:	4b04      	ldr	r3, [pc, #16]	; (d934 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    d922:	681b      	ldr	r3, [r3, #0]
    d924:	2201      	movs	r2, #1
    d926:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    d928:	2300      	movs	r3, #0
}
    d92a:	4618      	mov	r0, r3
    d92c:	370c      	adds	r7, #12
    d92e:	46bd      	mov	sp, r7
    d930:	bc80      	pop	{r7}
    d932:	4770      	bx	lr
    d934:	20000efc 	.word	0x20000efc

0000d938 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    d938:	b580      	push	{r7, lr}
    d93a:	b082      	sub	sp, #8
    d93c:	af00      	add	r7, sp, #0
    d93e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    d940:	793b      	ldrb	r3, [r7, #4]
    d942:	f003 0301 	and.w	r3, r3, #1
    d946:	b2db      	uxtb	r3, r3
    d948:	2b00      	cmp	r3, #0
    d94a:	d013      	beq.n	d974 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    d94c:	490c      	ldr	r1, [pc, #48]	; (d980 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    d94e:	2000      	movs	r0, #0
    d950:	4b0c      	ldr	r3, [pc, #48]	; (d984 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d952:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    d954:	490c      	ldr	r1, [pc, #48]	; (d988 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    d956:	2001      	movs	r0, #1
    d958:	4b0a      	ldr	r3, [pc, #40]	; (d984 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    d95a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    d95c:	4b0b      	ldr	r3, [pc, #44]	; (d98c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d95e:	681b      	ldr	r3, [r3, #0]
    d960:	2201      	movs	r2, #1
    d962:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    d964:	4b09      	ldr	r3, [pc, #36]	; (d98c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d966:	681b      	ldr	r3, [r3, #0]
    d968:	2201      	movs	r2, #1
    d96a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    d96c:	4b07      	ldr	r3, [pc, #28]	; (d98c <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    d96e:	681b      	ldr	r3, [r3, #0]
    d970:	2201      	movs	r2, #1
    d972:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    d974:	2300      	movs	r3, #0
}
    d976:	4618      	mov	r0, r3
    d978:	3708      	adds	r7, #8
    d97a:	46bd      	mov	sp, r7
    d97c:	bd80      	pop	{r7, pc}
    d97e:	bf00      	nop
    d980:	0000d8c9 	.word	0x0000d8c9
    d984:	0000c09d 	.word	0x0000c09d
    d988:	0000d901 	.word	0x0000d901
    d98c:	20000efc 	.word	0x20000efc

0000d990 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    d990:	b580      	push	{r7, lr}
    d992:	b082      	sub	sp, #8
    d994:	af00      	add	r7, sp, #0
    d996:	6078      	str	r0, [r7, #4]
    d998:	687b      	ldr	r3, [r7, #4]
    d99a:	4618      	mov	r0, r3
    d99c:	4b0a      	ldr	r3, [pc, #40]	; (d9c8 <_ZN9CDC_ClassC1Ev+0x38>)
    d99e:	4798      	blx	r3
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	3310      	adds	r3, #16
    d9a4:	4618      	mov	r0, r3
    d9a6:	4b09      	ldr	r3, [pc, #36]	; (d9cc <_ZN9CDC_ClassC1Ev+0x3c>)
    d9a8:	4798      	blx	r3
    d9aa:	4a09      	ldr	r2, [pc, #36]	; (d9d0 <_ZN9CDC_ClassC1Ev+0x40>)
    d9ac:	687b      	ldr	r3, [r7, #4]
    d9ae:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    d9b0:	687b      	ldr	r3, [r7, #4]
    d9b2:	f04f 32ff 	mov.w	r2, #4294967295
    d9b6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    d9b8:	4a06      	ldr	r2, [pc, #24]	; (d9d4 <_ZN9CDC_ClassC1Ev+0x44>)
    d9ba:	687b      	ldr	r3, [r7, #4]
    d9bc:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    d9be:	687b      	ldr	r3, [r7, #4]
    d9c0:	4618      	mov	r0, r3
    d9c2:	3708      	adds	r7, #8
    d9c4:	46bd      	mov	sp, r7
    d9c6:	bd80      	pop	{r7, pc}
    d9c8:	0000d871 	.word	0x0000d871
    d9cc:	0000e1c1 	.word	0x0000e1c1
    d9d0:	0000ef70 	.word	0x0000ef70
    d9d4:	20000efc 	.word	0x20000efc

0000d9d8 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    d9d8:	b580      	push	{r7, lr}
    d9da:	b082      	sub	sp, #8
    d9dc:	af00      	add	r7, sp, #0
    d9de:	6078      	str	r0, [r7, #4]
    d9e0:	4a06      	ldr	r2, [pc, #24]	; (d9fc <_ZN9CDC_ClassD1Ev+0x24>)
    d9e2:	687b      	ldr	r3, [r7, #4]
    d9e4:	601a      	str	r2, [r3, #0]
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	3310      	adds	r3, #16
    d9ea:	4618      	mov	r0, r3
    d9ec:	4b04      	ldr	r3, [pc, #16]	; (da00 <_ZN9CDC_ClassD1Ev+0x28>)
    d9ee:	4798      	blx	r3
{
} //~CDC_Class
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	4618      	mov	r0, r3
    d9f4:	3708      	adds	r7, #8
    d9f6:	46bd      	mov	sp, r7
    d9f8:	bd80      	pop	{r7, pc}
    d9fa:	bf00      	nop
    d9fc:	0000ef70 	.word	0x0000ef70
    da00:	0000e1e1 	.word	0x0000e1e1

0000da04 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    da04:	b580      	push	{r7, lr}
    da06:	b082      	sub	sp, #8
    da08:	af00      	add	r7, sp, #0
    da0a:	6078      	str	r0, [r7, #4]
	
	OnInit();
    da0c:	687b      	ldr	r3, [r7, #4]
    da0e:	3310      	adds	r3, #16
    da10:	4618      	mov	r0, r3
    da12:	4b09      	ldr	r3, [pc, #36]	; (da38 <_ZN9CDC_Class4InitEv+0x34>)
    da14:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    da16:	4909      	ldr	r1, [pc, #36]	; (da3c <_ZN9CDC_Class4InitEv+0x38>)
    da18:	2003      	movs	r0, #3
    da1a:	4b09      	ldr	r3, [pc, #36]	; (da40 <_ZN9CDC_Class4InitEv+0x3c>)
    da1c:	4798      	blx	r3
	delay_ms(100);
    da1e:	2064      	movs	r0, #100	; 0x64
    da20:	4b08      	ldr	r3, [pc, #32]	; (da44 <_ZN9CDC_Class4InitEv+0x40>)
    da22:	4798      	blx	r3
		
	if (connected)
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    da28:	2064      	movs	r0, #100	; 0x64
    da2a:	4b06      	ldr	r3, [pc, #24]	; (da44 <_ZN9CDC_Class4InitEv+0x40>)
    da2c:	4798      	blx	r3

	

}
    da2e:	bf00      	nop
    da30:	3708      	adds	r7, #8
    da32:	46bd      	mov	sp, r7
    da34:	bd80      	pop	{r7, pc}
    da36:	bf00      	nop
    da38:	0000e1f5 	.word	0x0000e1f5
    da3c:	0000d939 	.word	0x0000d939
    da40:	0000c09d 	.word	0x0000c09d
    da44:	00002155 	.word	0x00002155

0000da48 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    da48:	b580      	push	{r7, lr}
    da4a:	b082      	sub	sp, #8
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    da50:	4b03      	ldr	r3, [pc, #12]	; (da60 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    da52:	4798      	blx	r3
    da54:	4603      	mov	r3, r0
	
}
    da56:	4618      	mov	r0, r3
    da58:	3708      	adds	r7, #8
    da5a:	46bd      	mov	sp, r7
    da5c:	bd80      	pop	{r7, pc}
    da5e:	bf00      	nop
    da60:	0000c115 	.word	0x0000c115

0000da64 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    da64:	b580      	push	{r7, lr}
    da66:	b084      	sub	sp, #16
    da68:	af00      	add	r7, sp, #0
    da6a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    da6c:	687b      	ldr	r3, [r7, #4]
    da6e:	699b      	ldr	r3, [r3, #24]
    da70:	f1b3 3fff 	cmp.w	r3, #4294967295
    da74:	bf14      	ite	ne
    da76:	2301      	movne	r3, #1
    da78:	2300      	moveq	r3, #0
    da7a:	b2db      	uxtb	r3, r3
    da7c:	2b00      	cmp	r3, #0
    da7e:	d002      	beq.n	da86 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    da80:	687b      	ldr	r3, [r7, #4]
    da82:	699b      	ldr	r3, [r3, #24]
    da84:	e011      	b.n	daaa <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	331c      	adds	r3, #28
    da8c:	681b      	ldr	r3, [r3, #0]
    da8e:	f107 010f 	add.w	r1, r7, #15
    da92:	2201      	movs	r2, #1
    da94:	6878      	ldr	r0, [r7, #4]
    da96:	4798      	blx	r3
    da98:	4602      	mov	r2, r0
    da9a:	687b      	ldr	r3, [r7, #4]
    da9c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    da9e:	7bfb      	ldrb	r3, [r7, #15]
    daa0:	461a      	mov	r2, r3
    daa2:	687b      	ldr	r3, [r7, #4]
    daa4:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    daa6:	687b      	ldr	r3, [r7, #4]
    daa8:	699b      	ldr	r3, [r3, #24]
}
    daaa:	4618      	mov	r0, r3
    daac:	3710      	adds	r7, #16
    daae:	46bd      	mov	sp, r7
    dab0:	bd80      	pop	{r7, pc}
	...

0000dab4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dab4:	b580      	push	{r7, lr}
    dab6:	b086      	sub	sp, #24
    dab8:	af00      	add	r7, sp, #0
    daba:	60f8      	str	r0, [r7, #12]
    dabc:	60b9      	str	r1, [r7, #8]
    dabe:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    dac0:	68fb      	ldr	r3, [r7, #12]
    dac2:	7c1b      	ldrb	r3, [r3, #16]
    dac4:	b2db      	uxtb	r3, r3
    dac6:	2b00      	cmp	r3, #0
    dac8:	d02e      	beq.n	db28 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    daca:	687a      	ldr	r2, [r7, #4]
    dacc:	4613      	mov	r3, r2
    dace:	009b      	lsls	r3, r3, #2
    dad0:	4413      	add	r3, r2
    dad2:	005b      	lsls	r3, r3, #1
    dad4:	461a      	mov	r2, r3
    dad6:	4918      	ldr	r1, [pc, #96]	; (db38 <_ZN9CDC_Class8readDataEPvl+0x84>)
    dad8:	4818      	ldr	r0, [pc, #96]	; (db3c <_ZN9CDC_Class8readDataEPvl+0x88>)
    dada:	4b19      	ldr	r3, [pc, #100]	; (db40 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    dadc:	4798      	blx	r3
		rxReady=false;
    dade:	68fb      	ldr	r3, [r7, #12]
    dae0:	2200      	movs	r2, #0
    dae2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    dae4:	687b      	ldr	r3, [r7, #4]
    dae6:	4619      	mov	r1, r3
    dae8:	68b8      	ldr	r0, [r7, #8]
    daea:	4b16      	ldr	r3, [pc, #88]	; (db44 <_ZN9CDC_Class8readDataEPvl+0x90>)
    daec:	4798      	blx	r3
    daee:	4603      	mov	r3, r0
    daf0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    daf2:	68fb      	ldr	r3, [r7, #12]
    daf4:	7d5b      	ldrb	r3, [r3, #21]
    daf6:	b2db      	uxtb	r3, r3
    daf8:	f083 0301 	eor.w	r3, r3, #1
    dafc:	b2db      	uxtb	r3, r3
    dafe:	2b00      	cmp	r3, #0
    db00:	d006      	beq.n	db10 <_ZN9CDC_Class8readDataEPvl+0x5c>
    db02:	68fb      	ldr	r3, [r7, #12]
    db04:	7c1b      	ldrb	r3, [r3, #16]
    db06:	b2db      	uxtb	r3, r3
    db08:	2b00      	cmp	r3, #0
    db0a:	d001      	beq.n	db10 <_ZN9CDC_Class8readDataEPvl+0x5c>
    db0c:	2301      	movs	r3, #1
    db0e:	e000      	b.n	db12 <_ZN9CDC_Class8readDataEPvl+0x5e>
    db10:	2300      	movs	r3, #0
    db12:	2b00      	cmp	r3, #0
    db14:	d000      	beq.n	db18 <_ZN9CDC_Class8readDataEPvl+0x64>
    db16:	e7ec      	b.n	daf2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    db18:	4808      	ldr	r0, [pc, #32]	; (db3c <_ZN9CDC_Class8readDataEPvl+0x88>)
    db1a:	4b0b      	ldr	r3, [pc, #44]	; (db48 <_ZN9CDC_Class8readDataEPvl+0x94>)
    db1c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    db1e:	4906      	ldr	r1, [pc, #24]	; (db38 <_ZN9CDC_Class8readDataEPvl+0x84>)
    db20:	4806      	ldr	r0, [pc, #24]	; (db3c <_ZN9CDC_Class8readDataEPvl+0x88>)
    db22:	4b0a      	ldr	r3, [pc, #40]	; (db4c <_ZN9CDC_Class8readDataEPvl+0x98>)
    db24:	4798      	blx	r3
    db26:	e001      	b.n	db2c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    db28:	2300      	movs	r3, #0
    db2a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    db2c:	7dfb      	ldrb	r3, [r7, #23]
}
    db2e:	4618      	mov	r0, r3
    db30:	3718      	adds	r7, #24
    db32:	46bd      	mov	sp, r7
    db34:	bd80      	pop	{r7, pc}
    db36:	bf00      	nop
    db38:	0000d8a1 	.word	0x0000d8a1
    db3c:	20000fb8 	.word	0x20000fb8
    db40:	0000e439 	.word	0x0000e439
    db44:	0000bff1 	.word	0x0000bff1
    db48:	0000e381 	.word	0x0000e381
    db4c:	0000e471 	.word	0x0000e471

0000db50 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    db50:	b580      	push	{r7, lr}
    db52:	b084      	sub	sp, #16
    db54:	af00      	add	r7, sp, #0
    db56:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	2200      	movs	r2, #0
    db5c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    db5e:	f107 030f 	add.w	r3, r7, #15
    db62:	2101      	movs	r1, #1
    db64:	4618      	mov	r0, r3
    db66:	4b08      	ldr	r3, [pc, #32]	; (db88 <_ZN9CDC_Class4readEv+0x38>)
    db68:	4798      	blx	r3
	while(!rxReady);
    db6a:	687b      	ldr	r3, [r7, #4]
    db6c:	7d5b      	ldrb	r3, [r3, #21]
    db6e:	b2db      	uxtb	r3, r3
    db70:	f083 0301 	eor.w	r3, r3, #1
    db74:	b2db      	uxtb	r3, r3
    db76:	2b00      	cmp	r3, #0
    db78:	d000      	beq.n	db7c <_ZN9CDC_Class4readEv+0x2c>
    db7a:	e7f6      	b.n	db6a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    db7c:	7bfb      	ldrb	r3, [r7, #15]
}
    db7e:	4618      	mov	r0, r3
    db80:	3710      	adds	r7, #16
    db82:	46bd      	mov	sp, r7
    db84:	bd80      	pop	{r7, pc}
    db86:	bf00      	nop
    db88:	0000bff1 	.word	0x0000bff1

0000db8c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    db8c:	b580      	push	{r7, lr}
    db8e:	b082      	sub	sp, #8
    db90:	af00      	add	r7, sp, #0
    db92:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    db94:	687b      	ldr	r3, [r7, #4]
    db96:	331c      	adds	r3, #28
    db98:	2140      	movs	r1, #64	; 0x40
    db9a:	4618      	mov	r0, r3
    db9c:	4b02      	ldr	r3, [pc, #8]	; (dba8 <_ZN9CDC_Class5flushEv+0x1c>)
    db9e:	4798      	blx	r3
}
    dba0:	bf00      	nop
    dba2:	3708      	adds	r7, #8
    dba4:	46bd      	mov	sp, r7
    dba6:	bd80      	pop	{r7, pc}
    dba8:	0000c035 	.word	0x0000c035

0000dbac <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    dbac:	b580      	push	{r7, lr}
    dbae:	b082      	sub	sp, #8
    dbb0:	af00      	add	r7, sp, #0
    dbb2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    dbb4:	4b02      	ldr	r3, [pc, #8]	; (dbc0 <_ZN9CDC_Class5clearEv+0x14>)
    dbb6:	4798      	blx	r3
}
    dbb8:	bf00      	nop
    dbba:	3708      	adds	r7, #8
    dbbc:	46bd      	mov	sp, r7
    dbbe:	bd80      	pop	{r7, pc}
    dbc0:	0000c079 	.word	0x0000c079

0000dbc4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    dbc4:	b580      	push	{r7, lr}
    dbc6:	b082      	sub	sp, #8
    dbc8:	af00      	add	r7, sp, #0
    dbca:	6078      	str	r0, [r7, #4]
    dbcc:	460b      	mov	r3, r1
    dbce:	70fb      	strb	r3, [r7, #3]
	if (connected){
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	7c1b      	ldrb	r3, [r3, #16]
    dbd4:	b2db      	uxtb	r3, r3
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d012      	beq.n	dc00 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	7d1b      	ldrb	r3, [r3, #20]
    dbde:	b2db      	uxtb	r3, r3
    dbe0:	f083 0301 	eor.w	r3, r3, #1
    dbe4:	b2db      	uxtb	r3, r3
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d000      	beq.n	dbec <_ZN9CDC_Class5writeEh+0x28>
    dbea:	e7f6      	b.n	dbda <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    dbec:	687b      	ldr	r3, [r7, #4]
    dbee:	681b      	ldr	r3, [r3, #0]
    dbf0:	3324      	adds	r3, #36	; 0x24
    dbf2:	681b      	ldr	r3, [r3, #0]
    dbf4:	1cf9      	adds	r1, r7, #3
    dbf6:	2201      	movs	r2, #1
    dbf8:	6878      	ldr	r0, [r7, #4]
    dbfa:	4798      	blx	r3
    dbfc:	4603      	mov	r3, r0
    dbfe:	e000      	b.n	dc02 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    dc00:	2300      	movs	r3, #0
	}
		
}
    dc02:	4618      	mov	r0, r3
    dc04:	3708      	adds	r7, #8
    dc06:	46bd      	mov	sp, r7
    dc08:	bd80      	pop	{r7, pc}
	...

0000dc0c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b086      	sub	sp, #24
    dc10:	af00      	add	r7, sp, #0
    dc12:	60f8      	str	r0, [r7, #12]
    dc14:	60b9      	str	r1, [r7, #8]
    dc16:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    dc18:	68fb      	ldr	r3, [r7, #12]
    dc1a:	7c1b      	ldrb	r3, [r3, #16]
    dc1c:	b2db      	uxtb	r3, r3
    dc1e:	2b00      	cmp	r3, #0
    dc20:	d02f      	beq.n	dc82 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dc22:	687a      	ldr	r2, [r7, #4]
    dc24:	4613      	mov	r3, r2
    dc26:	009b      	lsls	r3, r3, #2
    dc28:	4413      	add	r3, r2
    dc2a:	005b      	lsls	r3, r3, #1
    dc2c:	461a      	mov	r2, r3
    dc2e:	4917      	ldr	r1, [pc, #92]	; (dc8c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dc30:	4817      	ldr	r0, [pc, #92]	; (dc90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc32:	4b18      	ldr	r3, [pc, #96]	; (dc94 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    dc34:	4798      	blx	r3
		txReady=false;
    dc36:	68fb      	ldr	r3, [r7, #12]
    dc38:	2200      	movs	r2, #0
    dc3a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	4619      	mov	r1, r3
    dc40:	68b8      	ldr	r0, [r7, #8]
    dc42:	4b15      	ldr	r3, [pc, #84]	; (dc98 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    dc44:	4798      	blx	r3
    dc46:	4603      	mov	r3, r0
    dc48:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    dc4a:	68fb      	ldr	r3, [r7, #12]
    dc4c:	7d1b      	ldrb	r3, [r3, #20]
    dc4e:	b2db      	uxtb	r3, r3
    dc50:	f083 0301 	eor.w	r3, r3, #1
    dc54:	b2db      	uxtb	r3, r3
    dc56:	2b00      	cmp	r3, #0
    dc58:	d006      	beq.n	dc68 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dc5a:	68fb      	ldr	r3, [r7, #12]
    dc5c:	7c1b      	ldrb	r3, [r3, #16]
    dc5e:	b2db      	uxtb	r3, r3
    dc60:	2b00      	cmp	r3, #0
    dc62:	d001      	beq.n	dc68 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    dc64:	2301      	movs	r3, #1
    dc66:	e000      	b.n	dc6a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    dc68:	2300      	movs	r3, #0
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	d000      	beq.n	dc70 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    dc6e:	e7ec      	b.n	dc4a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    dc70:	4807      	ldr	r0, [pc, #28]	; (dc90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc72:	4b0a      	ldr	r3, [pc, #40]	; (dc9c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    dc74:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dc76:	4905      	ldr	r1, [pc, #20]	; (dc8c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    dc78:	4805      	ldr	r0, [pc, #20]	; (dc90 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    dc7a:	4b09      	ldr	r3, [pc, #36]	; (dca0 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    dc7c:	4798      	blx	r3
		return r;
    dc7e:	697b      	ldr	r3, [r7, #20]
    dc80:	e000      	b.n	dc84 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    dc82:	2300      	movs	r3, #0
	}
	

}
    dc84:	4618      	mov	r0, r3
    dc86:	3718      	adds	r7, #24
    dc88:	46bd      	mov	sp, r7
    dc8a:	bd80      	pop	{r7, pc}
    dc8c:	0000d8a1 	.word	0x0000d8a1
    dc90:	20000fb8 	.word	0x20000fb8
    dc94:	0000e439 	.word	0x0000e439
    dc98:	0000c035 	.word	0x0000c035
    dc9c:	0000e381 	.word	0x0000e381
    dca0:	0000e471 	.word	0x0000e471

0000dca4 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    dca4:	b580      	push	{r7, lr}
    dca6:	b086      	sub	sp, #24
    dca8:	af00      	add	r7, sp, #0
    dcaa:	60f8      	str	r0, [r7, #12]
    dcac:	60b9      	str	r1, [r7, #8]
    dcae:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    dcb0:	68fb      	ldr	r3, [r7, #12]
    dcb2:	2200      	movs	r2, #0
    dcb4:	751a      	strb	r2, [r3, #20]

 	if (connected){
    dcb6:	68fb      	ldr	r3, [r7, #12]
    dcb8:	7c1b      	ldrb	r3, [r3, #16]
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d02a      	beq.n	dd16 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dcc0:	687a      	ldr	r2, [r7, #4]
    dcc2:	4613      	mov	r3, r2
    dcc4:	009b      	lsls	r3, r3, #2
    dcc6:	4413      	add	r3, r2
    dcc8:	005b      	lsls	r3, r3, #1
    dcca:	461a      	mov	r2, r3
    dccc:	4915      	ldr	r1, [pc, #84]	; (dd24 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dcce:	4816      	ldr	r0, [pc, #88]	; (dd28 <_ZN9CDC_Class5writeEPKhj+0x84>)
    dcd0:	4b16      	ldr	r3, [pc, #88]	; (dd2c <_ZN9CDC_Class5writeEPKhj+0x88>)
    dcd2:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dcd4:	6879      	ldr	r1, [r7, #4]
    dcd6:	68b8      	ldr	r0, [r7, #8]
    dcd8:	4b15      	ldr	r3, [pc, #84]	; (dd30 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    dcda:	4798      	blx	r3
    dcdc:	4603      	mov	r3, r0
    dcde:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    dce0:	68fb      	ldr	r3, [r7, #12]
    dce2:	7d1b      	ldrb	r3, [r3, #20]
    dce4:	b2db      	uxtb	r3, r3
    dce6:	f083 0301 	eor.w	r3, r3, #1
    dcea:	b2db      	uxtb	r3, r3
    dcec:	2b00      	cmp	r3, #0
    dcee:	d006      	beq.n	dcfe <_ZN9CDC_Class5writeEPKhj+0x5a>
    dcf0:	68fb      	ldr	r3, [r7, #12]
    dcf2:	7c1b      	ldrb	r3, [r3, #16]
    dcf4:	b2db      	uxtb	r3, r3
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d001      	beq.n	dcfe <_ZN9CDC_Class5writeEPKhj+0x5a>
    dcfa:	2301      	movs	r3, #1
    dcfc:	e000      	b.n	dd00 <_ZN9CDC_Class5writeEPKhj+0x5c>
    dcfe:	2300      	movs	r3, #0
    dd00:	2b00      	cmp	r3, #0
    dd02:	d000      	beq.n	dd06 <_ZN9CDC_Class5writeEPKhj+0x62>
    dd04:	e7ec      	b.n	dce0 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    dd06:	4808      	ldr	r0, [pc, #32]	; (dd28 <_ZN9CDC_Class5writeEPKhj+0x84>)
    dd08:	4b0a      	ldr	r3, [pc, #40]	; (dd34 <_ZN9CDC_Class5writeEPKhj+0x90>)
    dd0a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dd0c:	4905      	ldr	r1, [pc, #20]	; (dd24 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dd0e:	4806      	ldr	r0, [pc, #24]	; (dd28 <_ZN9CDC_Class5writeEPKhj+0x84>)
    dd10:	4b09      	ldr	r3, [pc, #36]	; (dd38 <_ZN9CDC_Class5writeEPKhj+0x94>)
    dd12:	4798      	blx	r3
    dd14:	e001      	b.n	dd1a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    dd16:	2300      	movs	r3, #0
    dd18:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dd1a:	697b      	ldr	r3, [r7, #20]
}
    dd1c:	4618      	mov	r0, r3
    dd1e:	3718      	adds	r7, #24
    dd20:	46bd      	mov	sp, r7
    dd22:	bd80      	pop	{r7, pc}
    dd24:	0000d8a1 	.word	0x0000d8a1
    dd28:	20000fb8 	.word	0x20000fb8
    dd2c:	0000e439 	.word	0x0000e439
    dd30:	0000c035 	.word	0x0000c035
    dd34:	0000e381 	.word	0x0000e381
    dd38:	0000e471 	.word	0x0000e471

0000dd3c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    dd3c:	b480      	push	{r7}
    dd3e:	b083      	sub	sp, #12
    dd40:	af00      	add	r7, sp, #0
    dd42:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    dd44:	687b      	ldr	r3, [r7, #4]
    dd46:	7d5b      	ldrb	r3, [r3, #21]
    dd48:	b2db      	uxtb	r3, r3
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d006      	beq.n	dd5c <_ZN9CDC_Class9availableEv+0x20>
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	7d1b      	ldrb	r3, [r3, #20]
    dd52:	b2db      	uxtb	r3, r3
    dd54:	2b00      	cmp	r3, #0
    dd56:	d001      	beq.n	dd5c <_ZN9CDC_Class9availableEv+0x20>
    dd58:	2301      	movs	r3, #1
    dd5a:	e000      	b.n	dd5e <_ZN9CDC_Class9availableEv+0x22>
    dd5c:	2300      	movs	r3, #0
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d001      	beq.n	dd66 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    dd62:	2301      	movs	r3, #1
    dd64:	e000      	b.n	dd68 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    dd66:	2300      	movs	r3, #0
	}
	
}
    dd68:	4618      	mov	r0, r3
    dd6a:	370c      	adds	r7, #12
    dd6c:	46bd      	mov	sp, r7
    dd6e:	bc80      	pop	{r7}
    dd70:	4770      	bx	lr
	...

0000dd74 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    dd74:	b580      	push	{r7, lr}
    dd76:	b082      	sub	sp, #8
    dd78:	af00      	add	r7, sp, #0
    dd7a:	6078      	str	r0, [r7, #4]
    dd7c:	6039      	str	r1, [r7, #0]
    dd7e:	687b      	ldr	r3, [r7, #4]
    dd80:	2b01      	cmp	r3, #1
    dd82:	d10c      	bne.n	dd9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dd84:	683b      	ldr	r3, [r7, #0]
    dd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd8a:	4293      	cmp	r3, r2
    dd8c:	d107      	bne.n	dd9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dd8e:	4806      	ldr	r0, [pc, #24]	; (dda8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dd90:	4b06      	ldr	r3, [pc, #24]	; (ddac <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dd92:	4798      	blx	r3
    dd94:	4a06      	ldr	r2, [pc, #24]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dd96:	4907      	ldr	r1, [pc, #28]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dd98:	4803      	ldr	r0, [pc, #12]	; (dda8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dd9a:	4b07      	ldr	r3, [pc, #28]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dd9c:	4798      	blx	r3
    dd9e:	bf00      	nop
    dda0:	3708      	adds	r7, #8
    dda2:	46bd      	mov	sp, r7
    dda4:	bd80      	pop	{r7, pc}
    dda6:	bf00      	nop
    dda8:	20000f00 	.word	0x20000f00
    ddac:	0000d991 	.word	0x0000d991
    ddb0:	20000000 	.word	0x20000000
    ddb4:	0000d9d9 	.word	0x0000d9d9
    ddb8:	0000e6b1 	.word	0x0000e6b1

0000ddbc <_GLOBAL__sub_I_ptrCDCClass>:
    ddbc:	b580      	push	{r7, lr}
    ddbe:	af00      	add	r7, sp, #0
    ddc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddc4:	2001      	movs	r0, #1
    ddc6:	4b01      	ldr	r3, [pc, #4]	; (ddcc <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    ddc8:	4798      	blx	r3
    ddca:	bd80      	pop	{r7, pc}
    ddcc:	0000dd75 	.word	0x0000dd75

0000ddd0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    ddd0:	b590      	push	{r4, r7, lr}
    ddd2:	b083      	sub	sp, #12
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	6078      	str	r0, [r7, #4]
    ddd8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    ddda:	683b      	ldr	r3, [r7, #0]
    dddc:	2b00      	cmp	r3, #0
    ddde:	d101      	bne.n	dde4 <_ZN5Print5writeEPKc+0x14>
    dde0:	2300      	movs	r3, #0
    dde2:	e00c      	b.n	ddfe <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	681b      	ldr	r3, [r3, #0]
    dde8:	3304      	adds	r3, #4
    ddea:	681c      	ldr	r4, [r3, #0]
    ddec:	6838      	ldr	r0, [r7, #0]
    ddee:	4b06      	ldr	r3, [pc, #24]	; (de08 <_ZN5Print5writeEPKc+0x38>)
    ddf0:	4798      	blx	r3
    ddf2:	4603      	mov	r3, r0
    ddf4:	461a      	mov	r2, r3
    ddf6:	6839      	ldr	r1, [r7, #0]
    ddf8:	6878      	ldr	r0, [r7, #4]
    ddfa:	47a0      	blx	r4
    ddfc:	4603      	mov	r3, r0
    }
    ddfe:	4618      	mov	r0, r3
    de00:	370c      	adds	r7, #12
    de02:	46bd      	mov	sp, r7
    de04:	bd90      	pop	{r4, r7, pc}
    de06:	bf00      	nop
    de08:	0000e941 	.word	0x0000e941

0000de0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    de0c:	b580      	push	{r7, lr}
    de0e:	b086      	sub	sp, #24
    de10:	af00      	add	r7, sp, #0
    de12:	60f8      	str	r0, [r7, #12]
    de14:	60b9      	str	r1, [r7, #8]
    de16:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    de18:	2300      	movs	r3, #0
    de1a:	617b      	str	r3, [r7, #20]
  while (size--) {
    de1c:	687b      	ldr	r3, [r7, #4]
    de1e:	1e5a      	subs	r2, r3, #1
    de20:	607a      	str	r2, [r7, #4]
    de22:	2b00      	cmp	r3, #0
    de24:	bf14      	ite	ne
    de26:	2301      	movne	r3, #1
    de28:	2300      	moveq	r3, #0
    de2a:	b2db      	uxtb	r3, r3
    de2c:	2b00      	cmp	r3, #0
    de2e:	d016      	beq.n	de5e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    de30:	68fb      	ldr	r3, [r7, #12]
    de32:	681b      	ldr	r3, [r3, #0]
    de34:	681a      	ldr	r2, [r3, #0]
    de36:	68bb      	ldr	r3, [r7, #8]
    de38:	1c59      	adds	r1, r3, #1
    de3a:	60b9      	str	r1, [r7, #8]
    de3c:	781b      	ldrb	r3, [r3, #0]
    de3e:	4619      	mov	r1, r3
    de40:	68f8      	ldr	r0, [r7, #12]
    de42:	4790      	blx	r2
    de44:	4603      	mov	r3, r0
    de46:	2b00      	cmp	r3, #0
    de48:	bf14      	ite	ne
    de4a:	2301      	movne	r3, #1
    de4c:	2300      	moveq	r3, #0
    de4e:	b2db      	uxtb	r3, r3
    de50:	2b00      	cmp	r3, #0
    de52:	d003      	beq.n	de5c <_ZN5Print5writeEPKhj+0x50>
    de54:	697b      	ldr	r3, [r7, #20]
    de56:	3301      	adds	r3, #1
    de58:	617b      	str	r3, [r7, #20]
  while (size--) {
    de5a:	e7df      	b.n	de1c <_ZN5Print5writeEPKhj+0x10>
    else break;
    de5c:	bf00      	nop
  }
  return n;
    de5e:	697b      	ldr	r3, [r7, #20]
}
    de60:	4618      	mov	r0, r3
    de62:	3718      	adds	r7, #24
    de64:	46bd      	mov	sp, r7
    de66:	bd80      	pop	{r7, pc}

0000de68 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    de68:	b580      	push	{r7, lr}
    de6a:	b082      	sub	sp, #8
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]
    de70:	6039      	str	r1, [r7, #0]
  return write(str);
    de72:	6839      	ldr	r1, [r7, #0]
    de74:	6878      	ldr	r0, [r7, #4]
    de76:	4b03      	ldr	r3, [pc, #12]	; (de84 <_ZN5Print5printEPKc+0x1c>)
    de78:	4798      	blx	r3
    de7a:	4603      	mov	r3, r0
}
    de7c:	4618      	mov	r0, r3
    de7e:	3708      	adds	r7, #8
    de80:	46bd      	mov	sp, r7
    de82:	bd80      	pop	{r7, pc}
    de84:	0000ddd1 	.word	0x0000ddd1

0000de88 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    de88:	b580      	push	{r7, lr}
    de8a:	b082      	sub	sp, #8
    de8c:	af00      	add	r7, sp, #0
    de8e:	6078      	str	r0, [r7, #4]
    de90:	460b      	mov	r3, r1
    de92:	70fb      	strb	r3, [r7, #3]
  return write(c);
    de94:	687b      	ldr	r3, [r7, #4]
    de96:	681b      	ldr	r3, [r3, #0]
    de98:	681b      	ldr	r3, [r3, #0]
    de9a:	78fa      	ldrb	r2, [r7, #3]
    de9c:	4611      	mov	r1, r2
    de9e:	6878      	ldr	r0, [r7, #4]
    dea0:	4798      	blx	r3
    dea2:	4603      	mov	r3, r0
}
    dea4:	4618      	mov	r0, r3
    dea6:	3708      	adds	r7, #8
    dea8:	46bd      	mov	sp, r7
    deaa:	bd80      	pop	{r7, pc}

0000deac <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    deac:	b580      	push	{r7, lr}
    deae:	b084      	sub	sp, #16
    deb0:	af00      	add	r7, sp, #0
    deb2:	60f8      	str	r0, [r7, #12]
    deb4:	460b      	mov	r3, r1
    deb6:	607a      	str	r2, [r7, #4]
    deb8:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    deba:	7afb      	ldrb	r3, [r7, #11]
    debc:	687a      	ldr	r2, [r7, #4]
    debe:	4619      	mov	r1, r3
    dec0:	68f8      	ldr	r0, [r7, #12]
    dec2:	4b03      	ldr	r3, [pc, #12]	; (ded0 <_ZN5Print5printEhi+0x24>)
    dec4:	4798      	blx	r3
    dec6:	4603      	mov	r3, r0
}
    dec8:	4618      	mov	r0, r3
    deca:	3710      	adds	r7, #16
    decc:	46bd      	mov	sp, r7
    dece:	bd80      	pop	{r7, pc}
    ded0:	0000df81 	.word	0x0000df81

0000ded4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    ded4:	b580      	push	{r7, lr}
    ded6:	b084      	sub	sp, #16
    ded8:	af00      	add	r7, sp, #0
    deda:	60f8      	str	r0, [r7, #12]
    dedc:	60b9      	str	r1, [r7, #8]
    dede:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    dee0:	687a      	ldr	r2, [r7, #4]
    dee2:	68b9      	ldr	r1, [r7, #8]
    dee4:	68f8      	ldr	r0, [r7, #12]
    dee6:	4b03      	ldr	r3, [pc, #12]	; (def4 <_ZN5Print5printEii+0x20>)
    dee8:	4798      	blx	r3
    deea:	4603      	mov	r3, r0
}
    deec:	4618      	mov	r0, r3
    deee:	3710      	adds	r7, #16
    def0:	46bd      	mov	sp, r7
    def2:	bd80      	pop	{r7, pc}
    def4:	0000def9 	.word	0x0000def9

0000def8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    def8:	b580      	push	{r7, lr}
    defa:	b086      	sub	sp, #24
    defc:	af00      	add	r7, sp, #0
    defe:	60f8      	str	r0, [r7, #12]
    df00:	60b9      	str	r1, [r7, #8]
    df02:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	2b00      	cmp	r3, #0
    df08:	d109      	bne.n	df1e <_ZN5Print5printEli+0x26>
    return write(n);
    df0a:	68fb      	ldr	r3, [r7, #12]
    df0c:	681b      	ldr	r3, [r3, #0]
    df0e:	681b      	ldr	r3, [r3, #0]
    df10:	68ba      	ldr	r2, [r7, #8]
    df12:	b2d2      	uxtb	r2, r2
    df14:	4611      	mov	r1, r2
    df16:	68f8      	ldr	r0, [r7, #12]
    df18:	4798      	blx	r3
    df1a:	4603      	mov	r3, r0
    df1c:	e028      	b.n	df70 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	2b0a      	cmp	r3, #10
    df22:	d11d      	bne.n	df60 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    df24:	68bb      	ldr	r3, [r7, #8]
    df26:	2b00      	cmp	r3, #0
    df28:	da12      	bge.n	df50 <_ZN5Print5printEli+0x58>
      int t = print('-');
    df2a:	212d      	movs	r1, #45	; 0x2d
    df2c:	68f8      	ldr	r0, [r7, #12]
    df2e:	4b12      	ldr	r3, [pc, #72]	; (df78 <_ZN5Print5printEli+0x80>)
    df30:	4798      	blx	r3
    df32:	4603      	mov	r3, r0
    df34:	617b      	str	r3, [r7, #20]
      n = -n;
    df36:	68bb      	ldr	r3, [r7, #8]
    df38:	425b      	negs	r3, r3
    df3a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    df3c:	68bb      	ldr	r3, [r7, #8]
    df3e:	220a      	movs	r2, #10
    df40:	4619      	mov	r1, r3
    df42:	68f8      	ldr	r0, [r7, #12]
    df44:	4b0d      	ldr	r3, [pc, #52]	; (df7c <_ZN5Print5printEli+0x84>)
    df46:	4798      	blx	r3
    df48:	4602      	mov	r2, r0
    df4a:	697b      	ldr	r3, [r7, #20]
    df4c:	4413      	add	r3, r2
    df4e:	e00f      	b.n	df70 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    df50:	68bb      	ldr	r3, [r7, #8]
    df52:	220a      	movs	r2, #10
    df54:	4619      	mov	r1, r3
    df56:	68f8      	ldr	r0, [r7, #12]
    df58:	4b08      	ldr	r3, [pc, #32]	; (df7c <_ZN5Print5printEli+0x84>)
    df5a:	4798      	blx	r3
    df5c:	4603      	mov	r3, r0
    df5e:	e007      	b.n	df70 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    df60:	68bb      	ldr	r3, [r7, #8]
    df62:	687a      	ldr	r2, [r7, #4]
    df64:	b2d2      	uxtb	r2, r2
    df66:	4619      	mov	r1, r3
    df68:	68f8      	ldr	r0, [r7, #12]
    df6a:	4b04      	ldr	r3, [pc, #16]	; (df7c <_ZN5Print5printEli+0x84>)
    df6c:	4798      	blx	r3
    df6e:	4603      	mov	r3, r0
  }
}
    df70:	4618      	mov	r0, r3
    df72:	3718      	adds	r7, #24
    df74:	46bd      	mov	sp, r7
    df76:	bd80      	pop	{r7, pc}
    df78:	0000de89 	.word	0x0000de89
    df7c:	0000dfc5 	.word	0x0000dfc5

0000df80 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    df80:	b580      	push	{r7, lr}
    df82:	b084      	sub	sp, #16
    df84:	af00      	add	r7, sp, #0
    df86:	60f8      	str	r0, [r7, #12]
    df88:	60b9      	str	r1, [r7, #8]
    df8a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    df8c:	687b      	ldr	r3, [r7, #4]
    df8e:	2b00      	cmp	r3, #0
    df90:	d109      	bne.n	dfa6 <_ZN5Print5printEmi+0x26>
    df92:	68fb      	ldr	r3, [r7, #12]
    df94:	681b      	ldr	r3, [r3, #0]
    df96:	681b      	ldr	r3, [r3, #0]
    df98:	68ba      	ldr	r2, [r7, #8]
    df9a:	b2d2      	uxtb	r2, r2
    df9c:	4611      	mov	r1, r2
    df9e:	68f8      	ldr	r0, [r7, #12]
    dfa0:	4798      	blx	r3
    dfa2:	4603      	mov	r3, r0
    dfa4:	e007      	b.n	dfb6 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	b2db      	uxtb	r3, r3
    dfaa:	461a      	mov	r2, r3
    dfac:	68b9      	ldr	r1, [r7, #8]
    dfae:	68f8      	ldr	r0, [r7, #12]
    dfb0:	4b03      	ldr	r3, [pc, #12]	; (dfc0 <_ZN5Print5printEmi+0x40>)
    dfb2:	4798      	blx	r3
    dfb4:	4603      	mov	r3, r0
}
    dfb6:	4618      	mov	r0, r3
    dfb8:	3710      	adds	r7, #16
    dfba:	46bd      	mov	sp, r7
    dfbc:	bd80      	pop	{r7, pc}
    dfbe:	bf00      	nop
    dfc0:	0000dfc5 	.word	0x0000dfc5

0000dfc4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    dfc4:	b580      	push	{r7, lr}
    dfc6:	b08e      	sub	sp, #56	; 0x38
    dfc8:	af00      	add	r7, sp, #0
    dfca:	60f8      	str	r0, [r7, #12]
    dfcc:	60b9      	str	r1, [r7, #8]
    dfce:	4613      	mov	r3, r2
    dfd0:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    dfd2:	f107 0310 	add.w	r3, r7, #16
    dfd6:	3320      	adds	r3, #32
    dfd8:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    dfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dfdc:	2200      	movs	r2, #0
    dfde:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    dfe0:	79fb      	ldrb	r3, [r7, #7]
    dfe2:	2b01      	cmp	r3, #1
    dfe4:	dc01      	bgt.n	dfea <_ZN5Print11printNumberEmh+0x26>
    dfe6:	230a      	movs	r3, #10
    dfe8:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    dfea:	79fa      	ldrb	r2, [r7, #7]
    dfec:	68bb      	ldr	r3, [r7, #8]
    dfee:	fbb3 f1f2 	udiv	r1, r3, r2
    dff2:	fb02 f201 	mul.w	r2, r2, r1
    dff6:	1a9b      	subs	r3, r3, r2
    dff8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    dffc:	79fb      	ldrb	r3, [r7, #7]
    dffe:	68ba      	ldr	r2, [r7, #8]
    e000:	fbb2 f3f3 	udiv	r3, r2, r3
    e004:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e008:	3b01      	subs	r3, #1
    e00a:	637b      	str	r3, [r7, #52]	; 0x34
    e00c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e010:	2b09      	cmp	r3, #9
    e012:	dc04      	bgt.n	e01e <_ZN5Print11printNumberEmh+0x5a>
    e014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e018:	3330      	adds	r3, #48	; 0x30
    e01a:	b2db      	uxtb	r3, r3
    e01c:	e003      	b.n	e026 <_ZN5Print11printNumberEmh+0x62>
    e01e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e022:	3337      	adds	r3, #55	; 0x37
    e024:	b2db      	uxtb	r3, r3
    e026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e028:	7013      	strb	r3, [r2, #0]
  } while(n);
    e02a:	68bb      	ldr	r3, [r7, #8]
    e02c:	2b00      	cmp	r3, #0
    e02e:	d000      	beq.n	e032 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e030:	e7db      	b.n	dfea <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e032:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e034:	68f8      	ldr	r0, [r7, #12]
    e036:	4b03      	ldr	r3, [pc, #12]	; (e044 <_ZN5Print11printNumberEmh+0x80>)
    e038:	4798      	blx	r3
    e03a:	4603      	mov	r3, r0
}
    e03c:	4618      	mov	r0, r3
    e03e:	3738      	adds	r7, #56	; 0x38
    e040:	46bd      	mov	sp, r7
    e042:	bd80      	pop	{r7, pc}
    e044:	0000ddd1 	.word	0x0000ddd1

0000e048 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e048:	b480      	push	{r7}
    e04a:	b083      	sub	sp, #12
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
    e050:	460b      	mov	r3, r1
    e052:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e054:	78fb      	ldrb	r3, [r7, #3]
    e056:	687a      	ldr	r2, [r7, #4]
    e058:	01db      	lsls	r3, r3, #7
    e05a:	4413      	add	r3, r2
    e05c:	681b      	ldr	r3, [r3, #0]
}
    e05e:	4618      	mov	r0, r3
    e060:	370c      	adds	r7, #12
    e062:	46bd      	mov	sp, r7
    e064:	bc80      	pop	{r7}
    e066:	4770      	bx	lr

0000e068 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e068:	b480      	push	{r7}
    e06a:	b083      	sub	sp, #12
    e06c:	af00      	add	r7, sp, #0
    e06e:	6078      	str	r0, [r7, #4]
    e070:	460b      	mov	r3, r1
    e072:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e074:	78fb      	ldrb	r3, [r7, #3]
    e076:	687a      	ldr	r2, [r7, #4]
    e078:	01db      	lsls	r3, r3, #7
    e07a:	4413      	add	r3, r2
    e07c:	3310      	adds	r3, #16
    e07e:	681b      	ldr	r3, [r3, #0]
}
    e080:	4618      	mov	r0, r3
    e082:	370c      	adds	r7, #12
    e084:	46bd      	mov	sp, r7
    e086:	bc80      	pop	{r7}
    e088:	4770      	bx	lr

0000e08a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e08a:	b480      	push	{r7}
    e08c:	b083      	sub	sp, #12
    e08e:	af00      	add	r7, sp, #0
    e090:	6078      	str	r0, [r7, #4]
    e092:	460b      	mov	r3, r1
    e094:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e096:	78fb      	ldrb	r3, [r7, #3]
    e098:	687a      	ldr	r2, [r7, #4]
    e09a:	01db      	lsls	r3, r3, #7
    e09c:	4413      	add	r3, r2
    e09e:	3320      	adds	r3, #32
    e0a0:	681b      	ldr	r3, [r3, #0]
}
    e0a2:	4618      	mov	r0, r3
    e0a4:	370c      	adds	r7, #12
    e0a6:	46bd      	mov	sp, r7
    e0a8:	bc80      	pop	{r7}
    e0aa:	4770      	bx	lr

0000e0ac <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e0ac:	b580      	push	{r7, lr}
    e0ae:	b086      	sub	sp, #24
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	4603      	mov	r3, r0
    e0b4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e0b6:	f107 030c 	add.w	r3, r7, #12
    e0ba:	4618      	mov	r0, r3
    e0bc:	4b13      	ldr	r3, [pc, #76]	; (e10c <_gpio_get_level+0x60>)
    e0be:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e0c0:	79fb      	ldrb	r3, [r7, #7]
    e0c2:	4619      	mov	r1, r3
    e0c4:	4812      	ldr	r0, [pc, #72]	; (e110 <_gpio_get_level+0x64>)
    e0c6:	4b13      	ldr	r3, [pc, #76]	; (e114 <_gpio_get_level+0x68>)
    e0c8:	4798      	blx	r3
    e0ca:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e0cc:	79fb      	ldrb	r3, [r7, #7]
    e0ce:	4619      	mov	r1, r3
    e0d0:	480f      	ldr	r0, [pc, #60]	; (e110 <_gpio_get_level+0x64>)
    e0d2:	4b11      	ldr	r3, [pc, #68]	; (e118 <_gpio_get_level+0x6c>)
    e0d4:	4798      	blx	r3
    e0d6:	4602      	mov	r2, r0
    e0d8:	697b      	ldr	r3, [r7, #20]
    e0da:	43db      	mvns	r3, r3
    e0dc:	4013      	ands	r3, r2
    e0de:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e0e0:	79fb      	ldrb	r3, [r7, #7]
    e0e2:	4619      	mov	r1, r3
    e0e4:	480a      	ldr	r0, [pc, #40]	; (e110 <_gpio_get_level+0x64>)
    e0e6:	4b0d      	ldr	r3, [pc, #52]	; (e11c <_gpio_get_level+0x70>)
    e0e8:	4798      	blx	r3
    e0ea:	4602      	mov	r2, r0
    e0ec:	697b      	ldr	r3, [r7, #20]
    e0ee:	4013      	ands	r3, r2
    e0f0:	693a      	ldr	r2, [r7, #16]
    e0f2:	4313      	orrs	r3, r2
    e0f4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e0f6:	f107 030c 	add.w	r3, r7, #12
    e0fa:	4618      	mov	r0, r3
    e0fc:	4b08      	ldr	r3, [pc, #32]	; (e120 <_gpio_get_level+0x74>)
    e0fe:	4798      	blx	r3

	return tmp;
    e100:	693b      	ldr	r3, [r7, #16]
}
    e102:	4618      	mov	r0, r3
    e104:	3718      	adds	r7, #24
    e106:	46bd      	mov	sp, r7
    e108:	bd80      	pop	{r7, pc}
    e10a:	bf00      	nop
    e10c:	0000b211 	.word	0x0000b211
    e110:	41008000 	.word	0x41008000
    e114:	0000e049 	.word	0x0000e049
    e118:	0000e08b 	.word	0x0000e08b
    e11c:	0000e069 	.word	0x0000e069
    e120:	0000b237 	.word	0x0000b237

0000e124 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e124:	b580      	push	{r7, lr}
    e126:	b082      	sub	sp, #8
    e128:	af00      	add	r7, sp, #0
    e12a:	4603      	mov	r3, r0
    e12c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e12e:	79fb      	ldrb	r3, [r7, #7]
    e130:	115b      	asrs	r3, r3, #5
    e132:	b2db      	uxtb	r3, r3
    e134:	4618      	mov	r0, r3
    e136:	4b09      	ldr	r3, [pc, #36]	; (e15c <gpio_get_pin_level+0x38>)
    e138:	4798      	blx	r3
    e13a:	4601      	mov	r1, r0
    e13c:	79fb      	ldrb	r3, [r7, #7]
    e13e:	f003 031f 	and.w	r3, r3, #31
    e142:	2201      	movs	r2, #1
    e144:	fa02 f303 	lsl.w	r3, r2, r3
    e148:	400b      	ands	r3, r1
    e14a:	2b00      	cmp	r3, #0
    e14c:	bf14      	ite	ne
    e14e:	2301      	movne	r3, #1
    e150:	2300      	moveq	r3, #0
    e152:	b2db      	uxtb	r3, r3
}
    e154:	4618      	mov	r0, r3
    e156:	3708      	adds	r7, #8
    e158:	46bd      	mov	sp, r7
    e15a:	bd80      	pop	{r7, pc}
    e15c:	0000e0ad 	.word	0x0000e0ad

0000e160 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e160:	b480      	push	{r7}
    e162:	b083      	sub	sp, #12
    e164:	af00      	add	r7, sp, #0
    e166:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e168:	4b06      	ldr	r3, [pc, #24]	; (e184 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e16a:	681b      	ldr	r3, [r3, #0]
    e16c:	2201      	movs	r2, #1
    e16e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e170:	4b04      	ldr	r3, [pc, #16]	; (e184 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e172:	681b      	ldr	r3, [r3, #0]
    e174:	2200      	movs	r2, #0
    e176:	705a      	strb	r2, [r3, #1]
}
    e178:	bf00      	nop
    e17a:	370c      	adds	r7, #12
    e17c:	46bd      	mov	sp, r7
    e17e:	bc80      	pop	{r7}
    e180:	4770      	bx	lr
    e182:	bf00      	nop
    e184:	20000f60 	.word	0x20000f60

0000e188 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e188:	b580      	push	{r7, lr}
    e18a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e18c:	2040      	movs	r0, #64	; 0x40
    e18e:	4b0a      	ldr	r3, [pc, #40]	; (e1b8 <_ZL10USBPluggedv+0x30>)
    e190:	4798      	blx	r3
    e192:	4603      	mov	r3, r0
    e194:	2b00      	cmp	r3, #0
    e196:	d004      	beq.n	e1a2 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e198:	4b08      	ldr	r3, [pc, #32]	; (e1bc <_ZL10USBPluggedv+0x34>)
    e19a:	681b      	ldr	r3, [r3, #0]
    e19c:	2201      	movs	r2, #1
    e19e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e1a0:	e007      	b.n	e1b2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e1a2:	4b06      	ldr	r3, [pc, #24]	; (e1bc <_ZL10USBPluggedv+0x34>)
    e1a4:	681b      	ldr	r3, [r3, #0]
    e1a6:	2200      	movs	r2, #0
    e1a8:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e1aa:	4b04      	ldr	r3, [pc, #16]	; (e1bc <_ZL10USBPluggedv+0x34>)
    e1ac:	681b      	ldr	r3, [r3, #0]
    e1ae:	2200      	movs	r2, #0
    e1b0:	701a      	strb	r2, [r3, #0]
}
    e1b2:	bf00      	nop
    e1b4:	bd80      	pop	{r7, pc}
    e1b6:	bf00      	nop
    e1b8:	0000e125 	.word	0x0000e125
    e1bc:	20000f60 	.word	0x20000f60

0000e1c0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e1c0:	b480      	push	{r7}
    e1c2:	b083      	sub	sp, #12
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e1c8:	4a04      	ldr	r2, [pc, #16]	; (e1dc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e1ca:	687b      	ldr	r3, [r7, #4]
    e1cc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	4618      	mov	r0, r3
    e1d2:	370c      	adds	r7, #12
    e1d4:	46bd      	mov	sp, r7
    e1d6:	bc80      	pop	{r7}
    e1d8:	4770      	bx	lr
    e1da:	bf00      	nop
    e1dc:	20000f60 	.word	0x20000f60

0000e1e0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e1e0:	b480      	push	{r7}
    e1e2:	b083      	sub	sp, #12
    e1e4:	af00      	add	r7, sp, #0
    e1e6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e1e8:	687b      	ldr	r3, [r7, #4]
    e1ea:	4618      	mov	r0, r3
    e1ec:	370c      	adds	r7, #12
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bc80      	pop	{r7}
    e1f2:	4770      	bx	lr

0000e1f4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b082      	sub	sp, #8
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e1fc:	491f      	ldr	r1, [pc, #124]	; (e27c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e1fe:	2040      	movs	r0, #64	; 0x40
    e200:	4b1f      	ldr	r3, [pc, #124]	; (e280 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e202:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e204:	481f      	ldr	r0, [pc, #124]	; (e284 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e206:	4b20      	ldr	r3, [pc, #128]	; (e288 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e208:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e20a:	2040      	movs	r0, #64	; 0x40
    e20c:	4b1f      	ldr	r3, [pc, #124]	; (e28c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e20e:	4798      	blx	r3
    e210:	4603      	mov	r3, r0
    e212:	461a      	mov	r2, r3
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e218:	687b      	ldr	r3, [r7, #4]
    e21a:	78db      	ldrb	r3, [r3, #3]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d024      	beq.n	e26a <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e220:	687b      	ldr	r3, [r7, #4]
    e222:	2200      	movs	r2, #0
    e224:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e226:	687b      	ldr	r3, [r7, #4]
    e228:	2201      	movs	r2, #1
    e22a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e22c:	f44f 7216 	mov.w	r2, #600	; 0x258
    e230:	4917      	ldr	r1, [pc, #92]	; (e290 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e232:	4814      	ldr	r0, [pc, #80]	; (e284 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e234:	4b17      	ldr	r3, [pc, #92]	; (e294 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e236:	4798      	blx	r3
			usbTerminalTimer.Start();
    e238:	4812      	ldr	r0, [pc, #72]	; (e284 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e23a:	4b17      	ldr	r3, [pc, #92]	; (e298 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e23c:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e23e:	4817      	ldr	r0, [pc, #92]	; (e29c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e240:	4b17      	ldr	r3, [pc, #92]	; (e2a0 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e242:	4798      	blx	r3
    e244:	4603      	mov	r3, r0
    e246:	f083 0301 	eor.w	r3, r3, #1
    e24a:	b2db      	uxtb	r3, r3
    e24c:	2b00      	cmp	r3, #0
    e24e:	d008      	beq.n	e262 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e250:	687b      	ldr	r3, [r7, #4]
    e252:	789b      	ldrb	r3, [r3, #2]
    e254:	b2db      	uxtb	r3, r3
    e256:	2b00      	cmp	r3, #0
    e258:	d0f1      	beq.n	e23e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	2200      	movs	r2, #0
    e25e:	701a      	strb	r2, [r3, #0]
					return;
    e260:	e009      	b.n	e276 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e262:	4808      	ldr	r0, [pc, #32]	; (e284 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e264:	4b0f      	ldr	r3, [pc, #60]	; (e2a4 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e266:	4798      	blx	r3
    e268:	e005      	b.n	e276 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	2200      	movs	r2, #0
    e26e:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	2200      	movs	r2, #0
    e274:	705a      	strb	r2, [r3, #1]
		}
		
}
    e276:	3708      	adds	r7, #8
    e278:	46bd      	mov	sp, r7
    e27a:	bd80      	pop	{r7, pc}
    e27c:	0000e189 	.word	0x0000e189
    e280:	000021e9 	.word	0x000021e9
    e284:	20000fb8 	.word	0x20000fb8
    e288:	0000e325 	.word	0x0000e325
    e28c:	0000e125 	.word	0x0000e125
    e290:	0000e161 	.word	0x0000e161
    e294:	0000e411 	.word	0x0000e411
    e298:	0000e35d 	.word	0x0000e35d
    e29c:	20000f00 	.word	0x20000f00
    e2a0:	0000da49 	.word	0x0000da49
    e2a4:	0000e381 	.word	0x0000e381

0000e2a8 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e2a8:	b580      	push	{r7, lr}
    e2aa:	b082      	sub	sp, #8
    e2ac:	af00      	add	r7, sp, #0
    e2ae:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e2b0:	4b04      	ldr	r3, [pc, #16]	; (e2c4 <_ZL7task_cbPK10timer_task+0x1c>)
    e2b2:	681b      	ldr	r3, [r3, #0]
    e2b4:	4618      	mov	r0, r3
    e2b6:	4b04      	ldr	r3, [pc, #16]	; (e2c8 <_ZL7task_cbPK10timer_task+0x20>)
    e2b8:	4798      	blx	r3
}
    e2ba:	bf00      	nop
    e2bc:	3708      	adds	r7, #8
    e2be:	46bd      	mov	sp, r7
    e2c0:	bd80      	pop	{r7, pc}
    e2c2:	bf00      	nop
    e2c4:	20000f64 	.word	0x20000f64
    e2c8:	0000e3a9 	.word	0x0000e3a9

0000e2cc <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e2cc:	b480      	push	{r7}
    e2ce:	b083      	sub	sp, #12
    e2d0:	af00      	add	r7, sp, #0
    e2d2:	6078      	str	r0, [r7, #4]
    e2d4:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e2d6:	687b      	ldr	r3, [r7, #4]
    e2d8:	683a      	ldr	r2, [r7, #0]
    e2da:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e2dc:	4a08      	ldr	r2, [pc, #32]	; (e300 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e2de:	687b      	ldr	r3, [r7, #4]
    e2e0:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e2e2:	687b      	ldr	r3, [r7, #4]
    e2e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e2e8:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e2ea:	687b      	ldr	r3, [r7, #4]
    e2ec:	689b      	ldr	r3, [r3, #8]
    e2ee:	4a05      	ldr	r2, [pc, #20]	; (e304 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e2f0:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	4618      	mov	r0, r3
    e2f6:	370c      	adds	r7, #12
    e2f8:	46bd      	mov	sp, r7
    e2fa:	bc80      	pop	{r7}
    e2fc:	4770      	bx	lr
    e2fe:	bf00      	nop
    e300:	20000f64 	.word	0x20000f64
    e304:	0000e2a9 	.word	0x0000e2a9

0000e308 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e308:	b480      	push	{r7}
    e30a:	b083      	sub	sp, #12
    e30c:	af00      	add	r7, sp, #0
    e30e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	2200      	movs	r2, #0
    e314:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	4618      	mov	r0, r3
    e31a:	370c      	adds	r7, #12
    e31c:	46bd      	mov	sp, r7
    e31e:	bc80      	pop	{r7}
    e320:	4770      	bx	lr
	...

0000e324 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e324:	b580      	push	{r7, lr}
    e326:	b082      	sub	sp, #8
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e32c:	687b      	ldr	r3, [r7, #4]
    e32e:	2200      	movs	r2, #0
    e330:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e332:	6878      	ldr	r0, [r7, #4]
    e334:	4b08      	ldr	r3, [pc, #32]	; (e358 <_ZN17TimerSerial_Class4InitEv+0x34>)
    e336:	4798      	blx	r3
    e338:	4603      	mov	r3, r0
    e33a:	2b00      	cmp	r3, #0
    e33c:	bf0c      	ite	eq
    e33e:	2301      	moveq	r3, #1
    e340:	2300      	movne	r3, #0
    e342:	b2da      	uxtb	r2, r3
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	709a      	strb	r2, [r3, #2]
	return isOK;
    e348:	687b      	ldr	r3, [r7, #4]
    e34a:	789b      	ldrb	r3, [r3, #2]
    e34c:	b2db      	uxtb	r3, r3
}
    e34e:	4618      	mov	r0, r3
    e350:	3708      	adds	r7, #8
    e352:	46bd      	mov	sp, r7
    e354:	bd80      	pop	{r7, pc}
    e356:	bf00      	nop
    e358:	0000e35d 	.word	0x0000e35d

0000e35c <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e35c:	b580      	push	{r7, lr}
    e35e:	b084      	sub	sp, #16
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e364:	687b      	ldr	r3, [r7, #4]
    e366:	691b      	ldr	r3, [r3, #16]
    e368:	4618      	mov	r0, r3
    e36a:	4b04      	ldr	r3, [pc, #16]	; (e37c <_ZN17TimerSerial_Class5StartEv+0x20>)
    e36c:	4798      	blx	r3
    e36e:	60f8      	str	r0, [r7, #12]
	return status;
    e370:	68fb      	ldr	r3, [r7, #12]
	
}
    e372:	4618      	mov	r0, r3
    e374:	3710      	adds	r7, #16
    e376:	46bd      	mov	sp, r7
    e378:	bd80      	pop	{r7, pc}
    e37a:	bf00      	nop
    e37c:	0000298d 	.word	0x0000298d

0000e380 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e380:	b580      	push	{r7, lr}
    e382:	b084      	sub	sp, #16
    e384:	af00      	add	r7, sp, #0
    e386:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	691b      	ldr	r3, [r3, #16]
    e38c:	4618      	mov	r0, r3
    e38e:	4b05      	ldr	r3, [pc, #20]	; (e3a4 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e390:	4798      	blx	r3
    e392:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e394:	687b      	ldr	r3, [r7, #4]
    e396:	2200      	movs	r2, #0
    e398:	705a      	strb	r2, [r3, #1]
	return status;
    e39a:	68fb      	ldr	r3, [r7, #12]
}
    e39c:	4618      	mov	r0, r3
    e39e:	3710      	adds	r7, #16
    e3a0:	46bd      	mov	sp, r7
    e3a2:	bd80      	pop	{r7, pc}
    e3a4:	000029f5 	.word	0x000029f5

0000e3a8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e3a8:	b480      	push	{r7}
    e3aa:	b083      	sub	sp, #12
    e3ac:	af00      	add	r7, sp, #0
    e3ae:	6078      	str	r0, [r7, #4]
	timeout=1;
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	2201      	movs	r2, #1
    e3b4:	705a      	strb	r2, [r3, #1]
}
    e3b6:	bf00      	nop
    e3b8:	370c      	adds	r7, #12
    e3ba:	46bd      	mov	sp, r7
    e3bc:	bc80      	pop	{r7}
    e3be:	4770      	bx	lr

0000e3c0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b086      	sub	sp, #24
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	60f8      	str	r0, [r7, #12]
    e3c8:	60b9      	str	r1, [r7, #8]
    e3ca:	607a      	str	r2, [r7, #4]
    e3cc:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e3ce:	68f8      	ldr	r0, [r7, #12]
    e3d0:	4b0d      	ldr	r3, [pc, #52]	; (e408 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e3d2:	4798      	blx	r3
	task->interval = interval;
    e3d4:	68fb      	ldr	r3, [r7, #12]
    e3d6:	689b      	ldr	r3, [r3, #8]
    e3d8:	687a      	ldr	r2, [r7, #4]
    e3da:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e3dc:	68fb      	ldr	r3, [r7, #12]
    e3de:	689b      	ldr	r3, [r3, #8]
    e3e0:	68ba      	ldr	r2, [r7, #8]
    e3e2:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e3e4:	68fb      	ldr	r3, [r7, #12]
    e3e6:	689b      	ldr	r3, [r3, #8]
    e3e8:	78fa      	ldrb	r2, [r7, #3]
    e3ea:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e3ec:	68fb      	ldr	r3, [r7, #12]
    e3ee:	691a      	ldr	r2, [r3, #16]
    e3f0:	68fb      	ldr	r3, [r7, #12]
    e3f2:	689b      	ldr	r3, [r3, #8]
    e3f4:	4619      	mov	r1, r3
    e3f6:	4610      	mov	r0, r2
    e3f8:	4b04      	ldr	r3, [pc, #16]	; (e40c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e3fa:	4798      	blx	r3
    e3fc:	6178      	str	r0, [r7, #20]
	
	return status;
    e3fe:	697b      	ldr	r3, [r7, #20]
}
    e400:	4618      	mov	r0, r3
    e402:	3718      	adds	r7, #24
    e404:	46bd      	mov	sp, r7
    e406:	bd80      	pop	{r7, pc}
    e408:	0000e4c9 	.word	0x0000e4c9
    e40c:	00002a61 	.word	0x00002a61

0000e410 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e410:	b590      	push	{r4, r7, lr}
    e412:	b087      	sub	sp, #28
    e414:	af00      	add	r7, sp, #0
    e416:	60f8      	str	r0, [r7, #12]
    e418:	60b9      	str	r1, [r7, #8]
    e41a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e41c:	2300      	movs	r3, #0
    e41e:	687a      	ldr	r2, [r7, #4]
    e420:	68b9      	ldr	r1, [r7, #8]
    e422:	68f8      	ldr	r0, [r7, #12]
    e424:	4c03      	ldr	r4, [pc, #12]	; (e434 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e426:	47a0      	blx	r4
    e428:	6178      	str	r0, [r7, #20]
	return status;
    e42a:	697b      	ldr	r3, [r7, #20]
}
    e42c:	4618      	mov	r0, r3
    e42e:	371c      	adds	r7, #28
    e430:	46bd      	mov	sp, r7
    e432:	bd90      	pop	{r4, r7, pc}
    e434:	0000e3c1 	.word	0x0000e3c1

0000e438 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e438:	b590      	push	{r4, r7, lr}
    e43a:	b087      	sub	sp, #28
    e43c:	af00      	add	r7, sp, #0
    e43e:	60f8      	str	r0, [r7, #12]
    e440:	60b9      	str	r1, [r7, #8]
    e442:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e444:	2300      	movs	r3, #0
    e446:	687a      	ldr	r2, [r7, #4]
    e448:	68b9      	ldr	r1, [r7, #8]
    e44a:	68f8      	ldr	r0, [r7, #12]
    e44c:	4c06      	ldr	r4, [pc, #24]	; (e468 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e44e:	47a0      	blx	r4
    e450:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e452:	68fb      	ldr	r3, [r7, #12]
    e454:	691b      	ldr	r3, [r3, #16]
    e456:	4618      	mov	r0, r3
    e458:	4b04      	ldr	r3, [pc, #16]	; (e46c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e45a:	4798      	blx	r3
    e45c:	6178      	str	r0, [r7, #20]
	return status;
    e45e:	697b      	ldr	r3, [r7, #20]
}
    e460:	4618      	mov	r0, r3
    e462:	371c      	adds	r7, #28
    e464:	46bd      	mov	sp, r7
    e466:	bd90      	pop	{r4, r7, pc}
    e468:	0000e3c1 	.word	0x0000e3c1
    e46c:	0000298d 	.word	0x0000298d

0000e470 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e470:	b580      	push	{r7, lr}
    e472:	b082      	sub	sp, #8
    e474:	af00      	add	r7, sp, #0
    e476:	6078      	str	r0, [r7, #4]
    e478:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e47a:	6839      	ldr	r1, [r7, #0]
    e47c:	6878      	ldr	r0, [r7, #4]
    e47e:	4b0f      	ldr	r3, [pc, #60]	; (e4bc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e480:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e482:	687b      	ldr	r3, [r7, #4]
    e484:	691b      	ldr	r3, [r3, #16]
    e486:	f103 0218 	add.w	r2, r3, #24
    e48a:	687b      	ldr	r3, [r7, #4]
    e48c:	689b      	ldr	r3, [r3, #8]
    e48e:	4619      	mov	r1, r3
    e490:	4610      	mov	r0, r2
    e492:	4b0b      	ldr	r3, [pc, #44]	; (e4c0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e494:	4798      	blx	r3
    e496:	4603      	mov	r3, r0
    e498:	2b00      	cmp	r3, #0
    e49a:	d007      	beq.n	e4ac <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	691a      	ldr	r2, [r3, #16]
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	689b      	ldr	r3, [r3, #8]
    e4a4:	4619      	mov	r1, r3
    e4a6:	4610      	mov	r0, r2
    e4a8:	4b06      	ldr	r3, [pc, #24]	; (e4c4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e4aa:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e4ac:	687b      	ldr	r3, [r7, #4]
    e4ae:	689b      	ldr	r3, [r3, #8]
    e4b0:	2200      	movs	r2, #0
    e4b2:	60da      	str	r2, [r3, #12]
}
    e4b4:	bf00      	nop
    e4b6:	3708      	adds	r7, #8
    e4b8:	46bd      	mov	sp, r7
    e4ba:	bd80      	pop	{r7, pc}
    e4bc:	0000e521 	.word	0x0000e521
    e4c0:	0000374d 	.word	0x0000374d
    e4c4:	00002b65 	.word	0x00002b65

0000e4c8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e4c8:	b480      	push	{r7}
    e4ca:	b085      	sub	sp, #20
    e4cc:	af00      	add	r7, sp, #0
    e4ce:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e4d0:	2300      	movs	r3, #0
    e4d2:	73fb      	strb	r3, [r7, #15]
    e4d4:	7bfb      	ldrb	r3, [r7, #15]
    e4d6:	2b03      	cmp	r3, #3
    e4d8:	dc18      	bgt.n	e50c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e4da:	7bfa      	ldrb	r2, [r7, #15]
    e4dc:	490f      	ldr	r1, [pc, #60]	; (e51c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e4de:	4613      	mov	r3, r2
    e4e0:	009b      	lsls	r3, r3, #2
    e4e2:	4413      	add	r3, r2
    e4e4:	009b      	lsls	r3, r3, #2
    e4e6:	440b      	add	r3, r1
    e4e8:	330c      	adds	r3, #12
    e4ea:	681b      	ldr	r3, [r3, #0]
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d109      	bne.n	e504 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e4f0:	7bfa      	ldrb	r2, [r7, #15]
    e4f2:	4613      	mov	r3, r2
    e4f4:	009b      	lsls	r3, r3, #2
    e4f6:	4413      	add	r3, r2
    e4f8:	009b      	lsls	r3, r3, #2
    e4fa:	4a08      	ldr	r2, [pc, #32]	; (e51c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e4fc:	441a      	add	r2, r3
    e4fe:	687b      	ldr	r3, [r7, #4]
    e500:	609a      	str	r2, [r3, #8]
			return;
    e502:	e006      	b.n	e512 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e504:	7bfb      	ldrb	r3, [r7, #15]
    e506:	3301      	adds	r3, #1
    e508:	73fb      	strb	r3, [r7, #15]
    e50a:	e7e3      	b.n	e4d4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e50c:	687b      	ldr	r3, [r7, #4]
    e50e:	4a03      	ldr	r2, [pc, #12]	; (e51c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e510:	609a      	str	r2, [r3, #8]

}
    e512:	3714      	adds	r7, #20
    e514:	46bd      	mov	sp, r7
    e516:	bc80      	pop	{r7}
    e518:	4770      	bx	lr
    e51a:	bf00      	nop
    e51c:	20000f68 	.word	0x20000f68

0000e520 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e520:	b480      	push	{r7}
    e522:	b085      	sub	sp, #20
    e524:	af00      	add	r7, sp, #0
    e526:	6078      	str	r0, [r7, #4]
    e528:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e52a:	2300      	movs	r3, #0
    e52c:	73fb      	strb	r3, [r7, #15]
    e52e:	7bfb      	ldrb	r3, [r7, #15]
    e530:	2b03      	cmp	r3, #3
    e532:	dc19      	bgt.n	e568 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e534:	7bfa      	ldrb	r2, [r7, #15]
    e536:	490e      	ldr	r1, [pc, #56]	; (e570 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e538:	4613      	mov	r3, r2
    e53a:	009b      	lsls	r3, r3, #2
    e53c:	4413      	add	r3, r2
    e53e:	009b      	lsls	r3, r3, #2
    e540:	440b      	add	r3, r1
    e542:	330c      	adds	r3, #12
    e544:	681a      	ldr	r2, [r3, #0]
    e546:	683b      	ldr	r3, [r7, #0]
    e548:	429a      	cmp	r2, r3
    e54a:	d109      	bne.n	e560 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e54c:	7bfa      	ldrb	r2, [r7, #15]
    e54e:	4613      	mov	r3, r2
    e550:	009b      	lsls	r3, r3, #2
    e552:	4413      	add	r3, r2
    e554:	009b      	lsls	r3, r3, #2
    e556:	4a06      	ldr	r2, [pc, #24]	; (e570 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e558:	441a      	add	r2, r3
    e55a:	687b      	ldr	r3, [r7, #4]
    e55c:	609a      	str	r2, [r3, #8]
			return;
    e55e:	e003      	b.n	e568 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e560:	7bfb      	ldrb	r3, [r7, #15]
    e562:	3301      	adds	r3, #1
    e564:	73fb      	strb	r3, [r7, #15]
    e566:	e7e2      	b.n	e52e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e568:	3714      	adds	r7, #20
    e56a:	46bd      	mov	sp, r7
    e56c:	bc80      	pop	{r7}
    e56e:	4770      	bx	lr
    e570:	20000f68 	.word	0x20000f68

0000e574 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e574:	b580      	push	{r7, lr}
    e576:	b082      	sub	sp, #8
    e578:	af00      	add	r7, sp, #0
    e57a:	6078      	str	r0, [r7, #4]
    e57c:	6039      	str	r1, [r7, #0]
    e57e:	687b      	ldr	r3, [r7, #4]
    e580:	2b01      	cmp	r3, #1
    e582:	d116      	bne.n	e5b2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e584:	683b      	ldr	r3, [r7, #0]
    e586:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e58a:	4293      	cmp	r3, r2
    e58c:	d111      	bne.n	e5b2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e58e:	490b      	ldr	r1, [pc, #44]	; (e5bc <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e590:	480b      	ldr	r0, [pc, #44]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e592:	4b0c      	ldr	r3, [pc, #48]	; (e5c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e594:	4798      	blx	r3
    e596:	4a0c      	ldr	r2, [pc, #48]	; (e5c8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e598:	490c      	ldr	r1, [pc, #48]	; (e5cc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e59a:	4809      	ldr	r0, [pc, #36]	; (e5c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e59c:	4b0c      	ldr	r3, [pc, #48]	; (e5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e59e:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e5a0:	490c      	ldr	r1, [pc, #48]	; (e5d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e5a2:	480d      	ldr	r0, [pc, #52]	; (e5d8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5a4:	4b07      	ldr	r3, [pc, #28]	; (e5c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e5a6:	4798      	blx	r3
    e5a8:	4a07      	ldr	r2, [pc, #28]	; (e5c8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e5aa:	4908      	ldr	r1, [pc, #32]	; (e5cc <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e5ac:	480a      	ldr	r0, [pc, #40]	; (e5d8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5ae:	4b08      	ldr	r3, [pc, #32]	; (e5d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e5b0:	4798      	blx	r3
    e5b2:	bf00      	nop
    e5b4:	3708      	adds	r7, #8
    e5b6:	46bd      	mov	sp, r7
    e5b8:	bd80      	pop	{r7, pc}
    e5ba:	bf00      	nop
    e5bc:	20001170 	.word	0x20001170
    e5c0:	20000fb8 	.word	0x20000fb8
    e5c4:	0000e2cd 	.word	0x0000e2cd
    e5c8:	20000000 	.word	0x20000000
    e5cc:	0000e309 	.word	0x0000e309
    e5d0:	0000e6b1 	.word	0x0000e6b1
    e5d4:	20001068 	.word	0x20001068
    e5d8:	20000fd8 	.word	0x20000fd8

0000e5dc <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e5dc:	b580      	push	{r7, lr}
    e5de:	af00      	add	r7, sp, #0
    e5e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5e4:	2001      	movs	r0, #1
    e5e6:	4b01      	ldr	r3, [pc, #4]	; (e5ec <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e5e8:	4798      	blx	r3
    e5ea:	bd80      	pop	{r7, pc}
    e5ec:	0000e575 	.word	0x0000e575

0000e5f0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e5f0:	b480      	push	{r7}
    e5f2:	b083      	sub	sp, #12
    e5f4:	af00      	add	r7, sp, #0
    e5f6:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e5f8:	2300      	movs	r3, #0
	}
    e5fa:	4618      	mov	r0, r3
    e5fc:	370c      	adds	r7, #12
    e5fe:	46bd      	mov	sp, r7
    e600:	bc80      	pop	{r7}
    e602:	4770      	bx	lr

0000e604 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e604:	b480      	push	{r7}
    e606:	af00      	add	r7, sp, #0
		}
    e608:	bf00      	nop
    e60a:	46bd      	mov	sp, r7
    e60c:	bc80      	pop	{r7}
    e60e:	4770      	bx	lr

0000e610 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e610:	b580      	push	{r7, lr}
    e612:	b084      	sub	sp, #16
    e614:	af00      	add	r7, sp, #0
    e616:	60f8      	str	r0, [r7, #12]
    e618:	60b9      	str	r1, [r7, #8]
    e61a:	4613      	mov	r3, r2
    e61c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e61e:	68fb      	ldr	r3, [r7, #12]
    e620:	2b00      	cmp	r3, #0
    e622:	d004      	beq.n	e62e <io_write+0x1e>
    e624:	68bb      	ldr	r3, [r7, #8]
    e626:	2b00      	cmp	r3, #0
    e628:	d001      	beq.n	e62e <io_write+0x1e>
    e62a:	2301      	movs	r3, #1
    e62c:	e000      	b.n	e630 <io_write+0x20>
    e62e:	2300      	movs	r3, #0
    e630:	f003 0301 	and.w	r3, r3, #1
    e634:	b2db      	uxtb	r3, r3
    e636:	2234      	movs	r2, #52	; 0x34
    e638:	4907      	ldr	r1, [pc, #28]	; (e658 <io_write+0x48>)
    e63a:	4618      	mov	r0, r3
    e63c:	4b07      	ldr	r3, [pc, #28]	; (e65c <io_write+0x4c>)
    e63e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e640:	68fb      	ldr	r3, [r7, #12]
    e642:	681b      	ldr	r3, [r3, #0]
    e644:	88fa      	ldrh	r2, [r7, #6]
    e646:	68b9      	ldr	r1, [r7, #8]
    e648:	68f8      	ldr	r0, [r7, #12]
    e64a:	4798      	blx	r3
    e64c:	4603      	mov	r3, r0
}
    e64e:	4618      	mov	r0, r3
    e650:	3710      	adds	r7, #16
    e652:	46bd      	mov	sp, r7
    e654:	bd80      	pop	{r7, pc}
    e656:	bf00      	nop
    e658:	0000efec 	.word	0x0000efec
    e65c:	00003725 	.word	0x00003725

0000e660 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e660:	b580      	push	{r7, lr}
    e662:	b084      	sub	sp, #16
    e664:	af00      	add	r7, sp, #0
    e666:	60f8      	str	r0, [r7, #12]
    e668:	60b9      	str	r1, [r7, #8]
    e66a:	4613      	mov	r3, r2
    e66c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e66e:	68fb      	ldr	r3, [r7, #12]
    e670:	2b00      	cmp	r3, #0
    e672:	d004      	beq.n	e67e <io_read+0x1e>
    e674:	68bb      	ldr	r3, [r7, #8]
    e676:	2b00      	cmp	r3, #0
    e678:	d001      	beq.n	e67e <io_read+0x1e>
    e67a:	2301      	movs	r3, #1
    e67c:	e000      	b.n	e680 <io_read+0x20>
    e67e:	2300      	movs	r3, #0
    e680:	f003 0301 	and.w	r3, r3, #1
    e684:	b2db      	uxtb	r3, r3
    e686:	223d      	movs	r2, #61	; 0x3d
    e688:	4907      	ldr	r1, [pc, #28]	; (e6a8 <io_read+0x48>)
    e68a:	4618      	mov	r0, r3
    e68c:	4b07      	ldr	r3, [pc, #28]	; (e6ac <io_read+0x4c>)
    e68e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e690:	68fb      	ldr	r3, [r7, #12]
    e692:	685b      	ldr	r3, [r3, #4]
    e694:	88fa      	ldrh	r2, [r7, #6]
    e696:	68b9      	ldr	r1, [r7, #8]
    e698:	68f8      	ldr	r0, [r7, #12]
    e69a:	4798      	blx	r3
    e69c:	4603      	mov	r3, r0
}
    e69e:	4618      	mov	r0, r3
    e6a0:	3710      	adds	r7, #16
    e6a2:	46bd      	mov	sp, r7
    e6a4:	bd80      	pop	{r7, pc}
    e6a6:	bf00      	nop
    e6a8:	0000efec 	.word	0x0000efec
    e6ac:	00003725 	.word	0x00003725

0000e6b0 <__aeabi_atexit>:
    e6b0:	460b      	mov	r3, r1
    e6b2:	4601      	mov	r1, r0
    e6b4:	4618      	mov	r0, r3
    e6b6:	f000 b801 	b.w	e6bc <__cxa_atexit>
    e6ba:	bf00      	nop

0000e6bc <__cxa_atexit>:
    e6bc:	4613      	mov	r3, r2
    e6be:	460a      	mov	r2, r1
    e6c0:	4601      	mov	r1, r0
    e6c2:	2002      	movs	r0, #2
    e6c4:	f000 b9aa 	b.w	ea1c <__register_exitproc>

0000e6c8 <ffs>:
    e6c8:	b140      	cbz	r0, e6dc <ffs+0x14>
    e6ca:	2300      	movs	r3, #0
    e6cc:	fa40 f103 	asr.w	r1, r0, r3
    e6d0:	1c5a      	adds	r2, r3, #1
    e6d2:	07c9      	lsls	r1, r1, #31
    e6d4:	4613      	mov	r3, r2
    e6d6:	d5f9      	bpl.n	e6cc <ffs+0x4>
    e6d8:	4610      	mov	r0, r2
    e6da:	4770      	bx	lr
    e6dc:	4602      	mov	r2, r0
    e6de:	4610      	mov	r0, r2
    e6e0:	4770      	bx	lr
    e6e2:	bf00      	nop

0000e6e4 <__libc_init_array>:
    e6e4:	b570      	push	{r4, r5, r6, lr}
    e6e6:	4e0f      	ldr	r6, [pc, #60]	; (e724 <__libc_init_array+0x40>)
    e6e8:	4d0f      	ldr	r5, [pc, #60]	; (e728 <__libc_init_array+0x44>)
    e6ea:	1b76      	subs	r6, r6, r5
    e6ec:	10b6      	asrs	r6, r6, #2
    e6ee:	bf18      	it	ne
    e6f0:	2400      	movne	r4, #0
    e6f2:	d005      	beq.n	e700 <__libc_init_array+0x1c>
    e6f4:	3401      	adds	r4, #1
    e6f6:	f855 3b04 	ldr.w	r3, [r5], #4
    e6fa:	4798      	blx	r3
    e6fc:	42a6      	cmp	r6, r4
    e6fe:	d1f9      	bne.n	e6f4 <__libc_init_array+0x10>
    e700:	4e0a      	ldr	r6, [pc, #40]	; (e72c <__libc_init_array+0x48>)
    e702:	4d0b      	ldr	r5, [pc, #44]	; (e730 <__libc_init_array+0x4c>)
    e704:	1b76      	subs	r6, r6, r5
    e706:	f000 fc7d 	bl	f004 <_init>
    e70a:	10b6      	asrs	r6, r6, #2
    e70c:	bf18      	it	ne
    e70e:	2400      	movne	r4, #0
    e710:	d006      	beq.n	e720 <__libc_init_array+0x3c>
    e712:	3401      	adds	r4, #1
    e714:	f855 3b04 	ldr.w	r3, [r5], #4
    e718:	4798      	blx	r3
    e71a:	42a6      	cmp	r6, r4
    e71c:	d1f9      	bne.n	e712 <__libc_init_array+0x2e>
    e71e:	bd70      	pop	{r4, r5, r6, pc}
    e720:	bd70      	pop	{r4, r5, r6, pc}
    e722:	bf00      	nop
    e724:	0000f010 	.word	0x0000f010
    e728:	0000f010 	.word	0x0000f010
    e72c:	0000f028 	.word	0x0000f028
    e730:	0000f010 	.word	0x0000f010

0000e734 <memcpy>:
    e734:	4684      	mov	ip, r0
    e736:	ea41 0300 	orr.w	r3, r1, r0
    e73a:	f013 0303 	ands.w	r3, r3, #3
    e73e:	d16d      	bne.n	e81c <memcpy+0xe8>
    e740:	3a40      	subs	r2, #64	; 0x40
    e742:	d341      	bcc.n	e7c8 <memcpy+0x94>
    e744:	f851 3b04 	ldr.w	r3, [r1], #4
    e748:	f840 3b04 	str.w	r3, [r0], #4
    e74c:	f851 3b04 	ldr.w	r3, [r1], #4
    e750:	f840 3b04 	str.w	r3, [r0], #4
    e754:	f851 3b04 	ldr.w	r3, [r1], #4
    e758:	f840 3b04 	str.w	r3, [r0], #4
    e75c:	f851 3b04 	ldr.w	r3, [r1], #4
    e760:	f840 3b04 	str.w	r3, [r0], #4
    e764:	f851 3b04 	ldr.w	r3, [r1], #4
    e768:	f840 3b04 	str.w	r3, [r0], #4
    e76c:	f851 3b04 	ldr.w	r3, [r1], #4
    e770:	f840 3b04 	str.w	r3, [r0], #4
    e774:	f851 3b04 	ldr.w	r3, [r1], #4
    e778:	f840 3b04 	str.w	r3, [r0], #4
    e77c:	f851 3b04 	ldr.w	r3, [r1], #4
    e780:	f840 3b04 	str.w	r3, [r0], #4
    e784:	f851 3b04 	ldr.w	r3, [r1], #4
    e788:	f840 3b04 	str.w	r3, [r0], #4
    e78c:	f851 3b04 	ldr.w	r3, [r1], #4
    e790:	f840 3b04 	str.w	r3, [r0], #4
    e794:	f851 3b04 	ldr.w	r3, [r1], #4
    e798:	f840 3b04 	str.w	r3, [r0], #4
    e79c:	f851 3b04 	ldr.w	r3, [r1], #4
    e7a0:	f840 3b04 	str.w	r3, [r0], #4
    e7a4:	f851 3b04 	ldr.w	r3, [r1], #4
    e7a8:	f840 3b04 	str.w	r3, [r0], #4
    e7ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e7b0:	f840 3b04 	str.w	r3, [r0], #4
    e7b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e7b8:	f840 3b04 	str.w	r3, [r0], #4
    e7bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e7c0:	f840 3b04 	str.w	r3, [r0], #4
    e7c4:	3a40      	subs	r2, #64	; 0x40
    e7c6:	d2bd      	bcs.n	e744 <memcpy+0x10>
    e7c8:	3230      	adds	r2, #48	; 0x30
    e7ca:	d311      	bcc.n	e7f0 <memcpy+0xbc>
    e7cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e7d0:	f840 3b04 	str.w	r3, [r0], #4
    e7d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e7d8:	f840 3b04 	str.w	r3, [r0], #4
    e7dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e7e0:	f840 3b04 	str.w	r3, [r0], #4
    e7e4:	f851 3b04 	ldr.w	r3, [r1], #4
    e7e8:	f840 3b04 	str.w	r3, [r0], #4
    e7ec:	3a10      	subs	r2, #16
    e7ee:	d2ed      	bcs.n	e7cc <memcpy+0x98>
    e7f0:	320c      	adds	r2, #12
    e7f2:	d305      	bcc.n	e800 <memcpy+0xcc>
    e7f4:	f851 3b04 	ldr.w	r3, [r1], #4
    e7f8:	f840 3b04 	str.w	r3, [r0], #4
    e7fc:	3a04      	subs	r2, #4
    e7fe:	d2f9      	bcs.n	e7f4 <memcpy+0xc0>
    e800:	3204      	adds	r2, #4
    e802:	d008      	beq.n	e816 <memcpy+0xe2>
    e804:	07d2      	lsls	r2, r2, #31
    e806:	bf1c      	itt	ne
    e808:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e80c:	f800 3b01 	strbne.w	r3, [r0], #1
    e810:	d301      	bcc.n	e816 <memcpy+0xe2>
    e812:	880b      	ldrh	r3, [r1, #0]
    e814:	8003      	strh	r3, [r0, #0]
    e816:	4660      	mov	r0, ip
    e818:	4770      	bx	lr
    e81a:	bf00      	nop
    e81c:	2a08      	cmp	r2, #8
    e81e:	d313      	bcc.n	e848 <memcpy+0x114>
    e820:	078b      	lsls	r3, r1, #30
    e822:	d08d      	beq.n	e740 <memcpy+0xc>
    e824:	f010 0303 	ands.w	r3, r0, #3
    e828:	d08a      	beq.n	e740 <memcpy+0xc>
    e82a:	f1c3 0304 	rsb	r3, r3, #4
    e82e:	1ad2      	subs	r2, r2, r3
    e830:	07db      	lsls	r3, r3, #31
    e832:	bf1c      	itt	ne
    e834:	f811 3b01 	ldrbne.w	r3, [r1], #1
    e838:	f800 3b01 	strbne.w	r3, [r0], #1
    e83c:	d380      	bcc.n	e740 <memcpy+0xc>
    e83e:	f831 3b02 	ldrh.w	r3, [r1], #2
    e842:	f820 3b02 	strh.w	r3, [r0], #2
    e846:	e77b      	b.n	e740 <memcpy+0xc>
    e848:	3a04      	subs	r2, #4
    e84a:	d3d9      	bcc.n	e800 <memcpy+0xcc>
    e84c:	3a01      	subs	r2, #1
    e84e:	f811 3b01 	ldrb.w	r3, [r1], #1
    e852:	f800 3b01 	strb.w	r3, [r0], #1
    e856:	d2f9      	bcs.n	e84c <memcpy+0x118>
    e858:	780b      	ldrb	r3, [r1, #0]
    e85a:	7003      	strb	r3, [r0, #0]
    e85c:	784b      	ldrb	r3, [r1, #1]
    e85e:	7043      	strb	r3, [r0, #1]
    e860:	788b      	ldrb	r3, [r1, #2]
    e862:	7083      	strb	r3, [r0, #2]
    e864:	4660      	mov	r0, ip
    e866:	4770      	bx	lr

0000e868 <memset>:
    e868:	b470      	push	{r4, r5, r6}
    e86a:	0786      	lsls	r6, r0, #30
    e86c:	d046      	beq.n	e8fc <memset+0x94>
    e86e:	1e54      	subs	r4, r2, #1
    e870:	2a00      	cmp	r2, #0
    e872:	d041      	beq.n	e8f8 <memset+0x90>
    e874:	b2ca      	uxtb	r2, r1
    e876:	4603      	mov	r3, r0
    e878:	e002      	b.n	e880 <memset+0x18>
    e87a:	f114 34ff 	adds.w	r4, r4, #4294967295
    e87e:	d33b      	bcc.n	e8f8 <memset+0x90>
    e880:	f803 2b01 	strb.w	r2, [r3], #1
    e884:	079d      	lsls	r5, r3, #30
    e886:	d1f8      	bne.n	e87a <memset+0x12>
    e888:	2c03      	cmp	r4, #3
    e88a:	d92e      	bls.n	e8ea <memset+0x82>
    e88c:	b2cd      	uxtb	r5, r1
    e88e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e892:	2c0f      	cmp	r4, #15
    e894:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e898:	d919      	bls.n	e8ce <memset+0x66>
    e89a:	f103 0210 	add.w	r2, r3, #16
    e89e:	4626      	mov	r6, r4
    e8a0:	3e10      	subs	r6, #16
    e8a2:	2e0f      	cmp	r6, #15
    e8a4:	f842 5c10 	str.w	r5, [r2, #-16]
    e8a8:	f842 5c0c 	str.w	r5, [r2, #-12]
    e8ac:	f842 5c08 	str.w	r5, [r2, #-8]
    e8b0:	f842 5c04 	str.w	r5, [r2, #-4]
    e8b4:	f102 0210 	add.w	r2, r2, #16
    e8b8:	d8f2      	bhi.n	e8a0 <memset+0x38>
    e8ba:	f1a4 0210 	sub.w	r2, r4, #16
    e8be:	f022 020f 	bic.w	r2, r2, #15
    e8c2:	f004 040f 	and.w	r4, r4, #15
    e8c6:	3210      	adds	r2, #16
    e8c8:	2c03      	cmp	r4, #3
    e8ca:	4413      	add	r3, r2
    e8cc:	d90d      	bls.n	e8ea <memset+0x82>
    e8ce:	461e      	mov	r6, r3
    e8d0:	4622      	mov	r2, r4
    e8d2:	3a04      	subs	r2, #4
    e8d4:	2a03      	cmp	r2, #3
    e8d6:	f846 5b04 	str.w	r5, [r6], #4
    e8da:	d8fa      	bhi.n	e8d2 <memset+0x6a>
    e8dc:	1f22      	subs	r2, r4, #4
    e8de:	f022 0203 	bic.w	r2, r2, #3
    e8e2:	3204      	adds	r2, #4
    e8e4:	4413      	add	r3, r2
    e8e6:	f004 0403 	and.w	r4, r4, #3
    e8ea:	b12c      	cbz	r4, e8f8 <memset+0x90>
    e8ec:	b2c9      	uxtb	r1, r1
    e8ee:	441c      	add	r4, r3
    e8f0:	f803 1b01 	strb.w	r1, [r3], #1
    e8f4:	429c      	cmp	r4, r3
    e8f6:	d1fb      	bne.n	e8f0 <memset+0x88>
    e8f8:	bc70      	pop	{r4, r5, r6}
    e8fa:	4770      	bx	lr
    e8fc:	4614      	mov	r4, r2
    e8fe:	4603      	mov	r3, r0
    e900:	e7c2      	b.n	e888 <memset+0x20>
    e902:	bf00      	nop
	...

0000e940 <strlen>:
    e940:	f890 f000 	pld	[r0]
    e944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e948:	f020 0107 	bic.w	r1, r0, #7
    e94c:	f06f 0c00 	mvn.w	ip, #0
    e950:	f010 0407 	ands.w	r4, r0, #7
    e954:	f891 f020 	pld	[r1, #32]
    e958:	f040 8049 	bne.w	e9ee <strlen+0xae>
    e95c:	f04f 0400 	mov.w	r4, #0
    e960:	f06f 0007 	mvn.w	r0, #7
    e964:	e9d1 2300 	ldrd	r2, r3, [r1]
    e968:	f891 f040 	pld	[r1, #64]	; 0x40
    e96c:	f100 0008 	add.w	r0, r0, #8
    e970:	fa82 f24c 	uadd8	r2, r2, ip
    e974:	faa4 f28c 	sel	r2, r4, ip
    e978:	fa83 f34c 	uadd8	r3, r3, ip
    e97c:	faa2 f38c 	sel	r3, r2, ip
    e980:	bb4b      	cbnz	r3, e9d6 <strlen+0x96>
    e982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e986:	fa82 f24c 	uadd8	r2, r2, ip
    e98a:	f100 0008 	add.w	r0, r0, #8
    e98e:	faa4 f28c 	sel	r2, r4, ip
    e992:	fa83 f34c 	uadd8	r3, r3, ip
    e996:	faa2 f38c 	sel	r3, r2, ip
    e99a:	b9e3      	cbnz	r3, e9d6 <strlen+0x96>
    e99c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e9a0:	fa82 f24c 	uadd8	r2, r2, ip
    e9a4:	f100 0008 	add.w	r0, r0, #8
    e9a8:	faa4 f28c 	sel	r2, r4, ip
    e9ac:	fa83 f34c 	uadd8	r3, r3, ip
    e9b0:	faa2 f38c 	sel	r3, r2, ip
    e9b4:	b97b      	cbnz	r3, e9d6 <strlen+0x96>
    e9b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e9ba:	f101 0120 	add.w	r1, r1, #32
    e9be:	fa82 f24c 	uadd8	r2, r2, ip
    e9c2:	f100 0008 	add.w	r0, r0, #8
    e9c6:	faa4 f28c 	sel	r2, r4, ip
    e9ca:	fa83 f34c 	uadd8	r3, r3, ip
    e9ce:	faa2 f38c 	sel	r3, r2, ip
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d0c6      	beq.n	e964 <strlen+0x24>
    e9d6:	2a00      	cmp	r2, #0
    e9d8:	bf04      	itt	eq
    e9da:	3004      	addeq	r0, #4
    e9dc:	461a      	moveq	r2, r3
    e9de:	ba12      	rev	r2, r2
    e9e0:	fab2 f282 	clz	r2, r2
    e9e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e9e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e9ec:	4770      	bx	lr
    e9ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    e9f2:	f004 0503 	and.w	r5, r4, #3
    e9f6:	f1c4 0000 	rsb	r0, r4, #0
    e9fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e9fe:	f014 0f04 	tst.w	r4, #4
    ea02:	f891 f040 	pld	[r1, #64]	; 0x40
    ea06:	fa0c f505 	lsl.w	r5, ip, r5
    ea0a:	ea62 0205 	orn	r2, r2, r5
    ea0e:	bf1c      	itt	ne
    ea10:	ea63 0305 	ornne	r3, r3, r5
    ea14:	4662      	movne	r2, ip
    ea16:	f04f 0400 	mov.w	r4, #0
    ea1a:	e7a9      	b.n	e970 <strlen+0x30>

0000ea1c <__register_exitproc>:
    ea1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea20:	4d2c      	ldr	r5, [pc, #176]	; (ead4 <__register_exitproc+0xb8>)
    ea22:	4606      	mov	r6, r0
    ea24:	6828      	ldr	r0, [r5, #0]
    ea26:	4698      	mov	r8, r3
    ea28:	460f      	mov	r7, r1
    ea2a:	4691      	mov	r9, r2
    ea2c:	f000 f882 	bl	eb34 <__retarget_lock_acquire_recursive>
    ea30:	4b29      	ldr	r3, [pc, #164]	; (ead8 <__register_exitproc+0xbc>)
    ea32:	681c      	ldr	r4, [r3, #0]
    ea34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ea38:	2b00      	cmp	r3, #0
    ea3a:	d03e      	beq.n	eaba <__register_exitproc+0x9e>
    ea3c:	685a      	ldr	r2, [r3, #4]
    ea3e:	2a1f      	cmp	r2, #31
    ea40:	dc1c      	bgt.n	ea7c <__register_exitproc+0x60>
    ea42:	f102 0e01 	add.w	lr, r2, #1
    ea46:	b176      	cbz	r6, ea66 <__register_exitproc+0x4a>
    ea48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ea4c:	2401      	movs	r4, #1
    ea4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ea52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ea56:	4094      	lsls	r4, r2
    ea58:	4320      	orrs	r0, r4
    ea5a:	2e02      	cmp	r6, #2
    ea5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ea60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ea64:	d023      	beq.n	eaae <__register_exitproc+0x92>
    ea66:	3202      	adds	r2, #2
    ea68:	f8c3 e004 	str.w	lr, [r3, #4]
    ea6c:	6828      	ldr	r0, [r5, #0]
    ea6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ea72:	f000 f861 	bl	eb38 <__retarget_lock_release_recursive>
    ea76:	2000      	movs	r0, #0
    ea78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea7c:	4b17      	ldr	r3, [pc, #92]	; (eadc <__register_exitproc+0xc0>)
    ea7e:	b30b      	cbz	r3, eac4 <__register_exitproc+0xa8>
    ea80:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ea84:	f7ff fdb4 	bl	e5f0 <malloc>
    ea88:	4603      	mov	r3, r0
    ea8a:	b1d8      	cbz	r0, eac4 <__register_exitproc+0xa8>
    ea8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ea90:	6002      	str	r2, [r0, #0]
    ea92:	2100      	movs	r1, #0
    ea94:	6041      	str	r1, [r0, #4]
    ea96:	460a      	mov	r2, r1
    ea98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ea9c:	f04f 0e01 	mov.w	lr, #1
    eaa0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    eaa4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    eaa8:	2e00      	cmp	r6, #0
    eaaa:	d0dc      	beq.n	ea66 <__register_exitproc+0x4a>
    eaac:	e7cc      	b.n	ea48 <__register_exitproc+0x2c>
    eaae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    eab2:	430c      	orrs	r4, r1
    eab4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    eab8:	e7d5      	b.n	ea66 <__register_exitproc+0x4a>
    eaba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    eabe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    eac2:	e7bb      	b.n	ea3c <__register_exitproc+0x20>
    eac4:	6828      	ldr	r0, [r5, #0]
    eac6:	f000 f837 	bl	eb38 <__retarget_lock_release_recursive>
    eaca:	f04f 30ff 	mov.w	r0, #4294967295
    eace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ead2:	bf00      	nop
    ead4:	20000608 	.word	0x20000608
    ead8:	0000f000 	.word	0x0000f000
    eadc:	0000e5f1 	.word	0x0000e5f1

0000eae0 <register_fini>:
    eae0:	4b02      	ldr	r3, [pc, #8]	; (eaec <register_fini+0xc>)
    eae2:	b113      	cbz	r3, eaea <register_fini+0xa>
    eae4:	4802      	ldr	r0, [pc, #8]	; (eaf0 <register_fini+0x10>)
    eae6:	f000 b805 	b.w	eaf4 <atexit>
    eaea:	4770      	bx	lr
    eaec:	00000000 	.word	0x00000000
    eaf0:	0000eb01 	.word	0x0000eb01

0000eaf4 <atexit>:
    eaf4:	2300      	movs	r3, #0
    eaf6:	4601      	mov	r1, r0
    eaf8:	461a      	mov	r2, r3
    eafa:	4618      	mov	r0, r3
    eafc:	f7ff bf8e 	b.w	ea1c <__register_exitproc>

0000eb00 <__libc_fini_array>:
    eb00:	b538      	push	{r3, r4, r5, lr}
    eb02:	4c0a      	ldr	r4, [pc, #40]	; (eb2c <__libc_fini_array+0x2c>)
    eb04:	4d0a      	ldr	r5, [pc, #40]	; (eb30 <__libc_fini_array+0x30>)
    eb06:	1b64      	subs	r4, r4, r5
    eb08:	10a4      	asrs	r4, r4, #2
    eb0a:	d00a      	beq.n	eb22 <__libc_fini_array+0x22>
    eb0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    eb10:	3b01      	subs	r3, #1
    eb12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    eb16:	3c01      	subs	r4, #1
    eb18:	f855 3904 	ldr.w	r3, [r5], #-4
    eb1c:	4798      	blx	r3
    eb1e:	2c00      	cmp	r4, #0
    eb20:	d1f9      	bne.n	eb16 <__libc_fini_array+0x16>
    eb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    eb26:	f000 ba7f 	b.w	f028 <_fini>
    eb2a:	bf00      	nop
    eb2c:	0000f038 	.word	0x0000f038
    eb30:	0000f034 	.word	0x0000f034

0000eb34 <__retarget_lock_acquire_recursive>:
    eb34:	4770      	bx	lr
    eb36:	bf00      	nop

0000eb38 <__retarget_lock_release_recursive>:
    eb38:	4770      	bx	lr
    eb3a:	bf00      	nop
    eb3c:	62616e45 	.word	0x62616e45
    eb40:	676e696c 	.word	0x676e696c
    eb44:	61654820 	.word	0x61654820
    eb48:	3a726574 	.word	0x3a726574
    eb4c:	00000020 	.word	0x00000020
    eb50:	00092e20 	.word	0x00092e20
    eb54:	74616548 	.word	0x74616548
    eb58:	00207265 	.word	0x00207265
    eb5c:	61745320 	.word	0x61745320
    eb60:	20737574 	.word	0x20737574
    eb64:	0000003a 	.word	0x0000003a
    eb68:	00000a0d 	.word	0x00000a0d
    eb6c:	682f2e2e 	.word	0x682f2e2e
    eb70:	702f6c70 	.word	0x702f6c70
    eb74:	2f74726f 	.word	0x2f74726f
    eb78:	5f6c7068 	.word	0x5f6c7068
    eb7c:	6f697067 	.word	0x6f697067
    eb80:	7361625f 	.word	0x7361625f
    eb84:	00682e65 	.word	0x00682e65
    eb88:	682f2e2e 	.word	0x682f2e2e
    eb8c:	692f6c61 	.word	0x692f6c61
    eb90:	756c636e 	.word	0x756c636e
    eb94:	682f6564 	.word	0x682f6564
    eb98:	775f6c61 	.word	0x775f6c61
    eb9c:	682e7464 	.word	0x682e7464
    eba0:	00000000 	.word	0x00000000
    eba4:	682f2e2e 	.word	0x682f2e2e
    eba8:	732f6c61 	.word	0x732f6c61
    ebac:	682f6372 	.word	0x682f6372
    ebb0:	635f6c61 	.word	0x635f6c61
    ebb4:	6e656c61 	.word	0x6e656c61
    ebb8:	2e726164 	.word	0x2e726164
    ebbc:	00000063 	.word	0x00000063
    ebc0:	682f2e2e 	.word	0x682f2e2e
    ebc4:	732f6c61 	.word	0x732f6c61
    ebc8:	682f6372 	.word	0x682f6372
    ebcc:	635f6c61 	.word	0x635f6c61
    ebd0:	615f6e61 	.word	0x615f6e61
    ebd4:	636e7973 	.word	0x636e7973
    ebd8:	0000632e 	.word	0x0000632e
    ebdc:	682f2e2e 	.word	0x682f2e2e
    ebe0:	732f6c61 	.word	0x732f6c61
    ebe4:	682f6372 	.word	0x682f6372
    ebe8:	635f6c61 	.word	0x635f6c61
    ebec:	735f6372 	.word	0x735f6372
    ebf0:	2e636e79 	.word	0x2e636e79
    ebf4:	00000063 	.word	0x00000063
    ebf8:	682f2e2e 	.word	0x682f2e2e
    ebfc:	732f6c61 	.word	0x732f6c61
    ec00:	682f6372 	.word	0x682f6372
    ec04:	695f6c61 	.word	0x695f6c61
    ec08:	6d5f6332 	.word	0x6d5f6332
    ec0c:	6e79735f 	.word	0x6e79735f
    ec10:	00632e63 	.word	0x00632e63
    ec14:	682f2e2e 	.word	0x682f2e2e
    ec18:	732f6c61 	.word	0x732f6c61
    ec1c:	682f6372 	.word	0x682f6372
    ec20:	705f6c61 	.word	0x705f6c61
    ec24:	632e6d77 	.word	0x632e6d77
    ec28:	00000000 	.word	0x00000000
    ec2c:	682f2e2e 	.word	0x682f2e2e
    ec30:	732f6c61 	.word	0x732f6c61
    ec34:	682f6372 	.word	0x682f6372
    ec38:	715f6c61 	.word	0x715f6c61
    ec3c:	5f697073 	.word	0x5f697073
    ec40:	636e7973 	.word	0x636e7973
    ec44:	0000632e 	.word	0x0000632e
    ec48:	682f2e2e 	.word	0x682f2e2e
    ec4c:	732f6c61 	.word	0x732f6c61
    ec50:	682f6372 	.word	0x682f6372
    ec54:	735f6c61 	.word	0x735f6c61
    ec58:	6d5f6970 	.word	0x6d5f6970
    ec5c:	6e79735f 	.word	0x6e79735f
    ec60:	00632e63 	.word	0x00632e63
    ec64:	682f2e2e 	.word	0x682f2e2e
    ec68:	732f6c61 	.word	0x732f6c61
    ec6c:	682f6372 	.word	0x682f6372
    ec70:	745f6c61 	.word	0x745f6c61
    ec74:	72656d69 	.word	0x72656d69
    ec78:	0000632e 	.word	0x0000632e
    ec7c:	682f2e2e 	.word	0x682f2e2e
    ec80:	752f6c61 	.word	0x752f6c61
    ec84:	736c6974 	.word	0x736c6974
    ec88:	6372732f 	.word	0x6372732f
    ec8c:	6974752f 	.word	0x6974752f
    ec90:	6c5f736c 	.word	0x6c5f736c
    ec94:	2e747369 	.word	0x2e747369
    ec98:	00000063 	.word	0x00000063

0000ec9c <_map>:
    ec9c:	00000000 00000040 00000001 00000021     ....@.......!...
    ecac:	00000003 00000003 00000004 00000004     ................
    ecbc:	00000005 00000005 00000006 00000056     ............V...
    eccc:	00000007 00000057 00000008 00000028     ....W.......(...
    ecdc:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    ecec:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000ecfc <user_mux_confs>:
    ecfc:	00020100 00000000 00000000 00000000     ................
	...

0000ed40 <channel_confs>:
    ed40:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000ed80 <interrupt_cfg>:
	...
    ee00:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    ee10:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    ee20:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    ee30:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    ee40:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    ee50:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    ee60:	43000400 43000800 43000c00              ...C...C...C

0000ee6c <sercomspi_regs>:
    ee6c:	0020000c 00020000 00000000 01ff0001     .. .............
    ee7c:	30000c04 02000000 00000000 ff00ef00     ...0............
    ee8c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    ee9c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    eeac:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    eebc:	43001400 43001800                       ...C...C

0000eec4 <_usb_ep_cfgs>:
    eec4:	2000082c 00000000 00000040 2000086c     ,.. ....@...l.. 
    eed4:	200008ac 00400040 200008ec 2000092c     ... @.@.... ,.. 
    eee4:	00400040 2000096c 200009ac 00400040     @.@.l.. ... @.@.
    eef4:	200009ec 20000a2c 00400040 00000804     ... ,.. @.@.....
    ef04:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    ef14:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    ef24:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    ef34:	7361625f 00682e65                       _base.h.

0000ef3c <n25q256a_interface>:
    ef3c:	0000b651 0000b6f5 0000b805 0000b9bd     Q...............
    ef4c:	0000ba4d 752f2e2e 642f6273 63697665     M...../usb/devic
    ef5c:	73752f65 2e636462 00000063              e/usbdc.c...

0000ef68 <_ZTV9CDC_Class>:
	...
    ef70:	0000dbc5 0000dca5 0000d849 0000db8d     ........I.......
    ef80:	0000dd3d 0000db51 0000da65 0000dab5     =...Q...e.......
    ef90:	0000dbad 0000dc0d                       ........

0000ef98 <_ZTV6Stream>:
	...
    efa0:	0000e605 0000de0d 0000d849 0000d85d     ........I...]...
    efb0:	0000e605 0000e605 0000e605 2e257830     ............0x%.
    efc0:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    efd0:	0066766f                                ovf.

0000efd4 <_ZTV5Print>:
	...
    efdc:	0000e605 0000de0d 0000d849 0000d85d     ........I...]...
    efec:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    effc:	00632e6f                                o.c.

0000f000 <_global_impure_ptr>:
    f000:	200001e0                                ... 

0000f004 <_init>:
    f004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f006:	bf00      	nop
    f008:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f00a:	bc08      	pop	{r3}
    f00c:	469e      	mov	lr, r3
    f00e:	4770      	bx	lr

0000f010 <__init_array_start>:
    f010:	0000eae1 	.word	0x0000eae1

0000f014 <__frame_dummy_init_array_entry>:
    f014:	00000289 000009f5 0000d811 0000ddbd     ................
    f024:	0000e5dd                                ....

0000f028 <_fini>:
    f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f02a:	bf00      	nop
    f02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f02e:	bc08      	pop	{r3}
    f030:	469e      	mov	lr, r3
    f032:	4770      	bx	lr

0000f034 <__fini_array_start>:
    f034:	00000265 	.word	0x00000265
