
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f364  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f364  0000f364  0001f364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  0000f36c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002060c  2**0
                  CONTENTS
  5 .bss          00000cc8  2000060c  0000f978  0002060c  2**2
                  ALLOC
  6 .stack        00010004  200012d4  00010640  0002060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00066aad  00000000  00000000  00020693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008b56  00000000  00000000  00087140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ac63  00000000  00000000  0008fc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002f90  00000000  00000000  000aa8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002c90  00000000  00000000  000ad889  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004bbcb  00000000  00000000  000b0519  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003545a  00000000  00000000  000fc0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c4e0  00000000  00000000  0013153e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c804  00000000  00000000  0026da20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 12 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d5 59 00 00 01 48 00 00 d1 02 00 00 d1 02 00 00     .Y...H..........
      7c:	11 48 00 00 21 48 00 00 31 48 00 00 41 48 00 00     .H..!H..1H..AH..
      8c:	51 48 00 00 61 48 00 00 71 48 00 00 d1 02 00 00     QH..aH..qH......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 81 6e 00 00 9d 6e 00 00 b9 6e 00 00     .....n...n...n..
     174:	d5 6e 00 00 d1 02 00 00 59 3c 00 00 29 ae 00 00     .n......Y<..)...
     184:	39 ae 00 00 49 ae 00 00 59 ae 00 00 d1 02 00 00     9...I...Y.......
     194:	45 78 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     Ex..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 61 78 00 00     ............ax..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 25 85 00 00 d1 02 00 00     ........%.......
     1f4:	41 85 00 00 d1 02 00 00 5d 85 00 00 79 85 00 00     A.......]...y...
     204:	95 85 00 00 b1 85 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	0000f36c 	.word	0x0000f36c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f36c 	.word	0x0000f36c
     2c4:	20000610 	.word	0x20000610
     2c8:	0000f36c 	.word	0x0000f36c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000f36c 	.word	0x0000f36c
     33c:	2000060c 	.word	0x2000060c
     340:	200012d4 	.word	0x200012d4
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000e9b9 	.word	0x0000e9b9
     354:	00000365 	.word	0x00000365

00000358 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     35c:	619a      	str	r2, [r3, #24]
     35e:	4770      	bx	lr
     360:	41008000 	.word	0x41008000

00000364 <main>:
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
}

int main(void)
{
     364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     368:	b083      	sub	sp, #12
	atmel_start_init();
     36a:	4b3b      	ldr	r3, [pc, #236]	; (458 <main+0xf4>)
     36c:	4798      	blx	r3
	uint8_t status;

	usb.Init();
     36e:	4c3b      	ldr	r4, [pc, #236]	; (45c <main+0xf8>)
     370:	4620      	mov	r0, r4
     372:	4b3b      	ldr	r3, [pc, #236]	; (460 <main+0xfc>)
     374:	4798      	blx	r3
	delay_ms(100);
     376:	2064      	movs	r0, #100	; 0x64
     378:	4b3a      	ldr	r3, [pc, #232]	; (464 <main+0x100>)
     37a:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     37c:	4e3a      	ldr	r6, [pc, #232]	; (468 <main+0x104>)
     37e:	4631      	mov	r1, r6
     380:	4620      	mov	r0, r4
     382:	4d3a      	ldr	r5, [pc, #232]	; (46c <main+0x108>)
     384:	47a8      	blx	r5
     386:	4631      	mov	r1, r6
     388:	4620      	mov	r0, r4
     38a:	47a8      	blx	r5
     38c:	4938      	ldr	r1, [pc, #224]	; (470 <main+0x10c>)
     38e:	4620      	mov	r0, r4
     390:	47a8      	blx	r5
     392:	4631      	mov	r1, r6
     394:	4620      	mov	r0, r4
     396:	47a8      	blx	r5
     398:	4936      	ldr	r1, [pc, #216]	; (474 <main+0x110>)
     39a:	4620      	mov	r0, r4
     39c:	47a8      	blx	r5
     39e:	4936      	ldr	r1, [pc, #216]	; (478 <main+0x114>)
     3a0:	4620      	mov	r0, r4
     3a2:	47a8      	blx	r5
     3a4:	4935      	ldr	r1, [pc, #212]	; (47c <main+0x118>)
     3a6:	4620      	mov	r0, r4
     3a8:	47a8      	blx	r5
     3aa:	4935      	ldr	r1, [pc, #212]	; (480 <main+0x11c>)
     3ac:	4620      	mov	r0, r4
     3ae:	47a8      	blx	r5
     3b0:	4631      	mov	r1, r6
     3b2:	4620      	mov	r0, r4
     3b4:	47a8      	blx	r5
     3b6:	4631      	mov	r1, r6
     3b8:	4620      	mov	r0, r4
     3ba:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     3bc:	4831      	ldr	r0, [pc, #196]	; (484 <main+0x120>)
     3be:	4b32      	ldr	r3, [pc, #200]	; (488 <main+0x124>)
     3c0:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     3c2:	22fa      	movs	r2, #250	; 0xfa
     3c4:	4931      	ldr	r1, [pc, #196]	; (48c <main+0x128>)
     3c6:	4832      	ldr	r0, [pc, #200]	; (490 <main+0x12c>)
     3c8:	4b32      	ldr	r3, [pc, #200]	; (494 <main+0x130>)
     3ca:	4798      	blx	r3
	heater.Init();
     3cc:	4832      	ldr	r0, [pc, #200]	; (498 <main+0x134>)
     3ce:	4b33      	ldr	r3, [pc, #204]	; (49c <main+0x138>)
     3d0:	4798      	blx	r3
     3d2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 498 <main+0x134>
	while (1)
	{
		for (uint8_t i = 0; i < 4; i++)
		{
			delay_ms(DELAY_HEATER_COMMUNICATION);
     3d6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 464 <main+0x100>
     3da:	f10a 0502 	add.w	r5, sl, #2
{
     3de:	2400      	movs	r4, #0
			delay_ms(DELAY_HEATER_COMMUNICATION);
     3e0:	f04f 0964 	mov.w	r9, #100	; 0x64
     3e4:	260a      	movs	r6, #10
     3e6:	b2e3      	uxtb	r3, r4
     3e8:	461f      	mov	r7, r3
     3ea:	4648      	mov	r0, r9
     3ec:	47c0      	blx	r8
     3ee:	492c      	ldr	r1, [pc, #176]	; (4a0 <main+0x13c>)
     3f0:	481a      	ldr	r0, [pc, #104]	; (45c <main+0xf8>)
     3f2:	f8df b078 	ldr.w	fp, [pc, #120]	; 46c <main+0x108>
     3f6:	47d8      	blx	fp
     3f8:	4632      	mov	r2, r6
     3fa:	9701      	str	r7, [sp, #4]
     3fc:	4639      	mov	r1, r7
     3fe:	4817      	ldr	r0, [pc, #92]	; (45c <main+0xf8>)
     400:	4f28      	ldr	r7, [pc, #160]	; (4a4 <main+0x140>)
     402:	47b8      	blx	r7
     404:	4928      	ldr	r1, [pc, #160]	; (4a8 <main+0x144>)
     406:	4815      	ldr	r0, [pc, #84]	; (45c <main+0xf8>)
     408:	47d8      	blx	fp
			usb<<"Enabling Heater: "<<i<<" .\t";
			heater.Enable(i);
     40a:	9901      	ldr	r1, [sp, #4]
     40c:	4650      	mov	r0, sl
     40e:	4b27      	ldr	r3, [pc, #156]	; (4ac <main+0x148>)
     410:	4798      	blx	r3
			delay_ms(DELAY_HEATER_COMMUNICATION);
     412:	4648      	mov	r0, r9
     414:	47c0      	blx	r8
			status= heater.ReadStatus();
     416:	4650      	mov	r0, sl
     418:	4b25      	ldr	r3, [pc, #148]	; (4b0 <main+0x14c>)
     41a:	4798      	blx	r3
     41c:	4925      	ldr	r1, [pc, #148]	; (4b4 <main+0x150>)
     41e:	480f      	ldr	r0, [pc, #60]	; (45c <main+0xf8>)
     420:	47d8      	blx	fp
     422:	4632      	mov	r2, r6
     424:	9901      	ldr	r1, [sp, #4]
     426:	480d      	ldr	r0, [pc, #52]	; (45c <main+0xf8>)
     428:	47b8      	blx	r7
     42a:	4923      	ldr	r1, [pc, #140]	; (4b8 <main+0x154>)
     42c:	480b      	ldr	r0, [pc, #44]	; (45c <main+0xf8>)
     42e:	47d8      	blx	fp
     430:	4632      	mov	r2, r6
     432:	f815 1b01 	ldrb.w	r1, [r5], #1
     436:	4809      	ldr	r0, [pc, #36]	; (45c <main+0xf8>)
     438:	4b20      	ldr	r3, [pc, #128]	; (4bc <main+0x158>)
     43a:	4798      	blx	r3
     43c:	490a      	ldr	r1, [pc, #40]	; (468 <main+0x104>)
     43e:	4807      	ldr	r0, [pc, #28]	; (45c <main+0xf8>)
     440:	47d8      	blx	fp
			usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
			delay_ms(DELAY_HEATER_COMMUNICATION);
     442:	4648      	mov	r0, r9
     444:	47c0      	blx	r8
			heater.Disable(i);
     446:	9901      	ldr	r1, [sp, #4]
     448:	4650      	mov	r0, sl
     44a:	4b1d      	ldr	r3, [pc, #116]	; (4c0 <main+0x15c>)
     44c:	4798      	blx	r3
     44e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < 4; i++)
     450:	2c04      	cmp	r4, #4
     452:	d0c2      	beq.n	3da <main+0x76>
     454:	e7c7      	b.n	3e6 <main+0x82>
     456:	bf00      	nop
     458:	00000639 	.word	0x00000639
     45c:	20000f24 	.word	0x20000f24
     460:	0000dcd9 	.word	0x0000dcd9
     464:	00001d71 	.word	0x00001d71
     468:	0000edfc 	.word	0x0000edfc
     46c:	0000e13d 	.word	0x0000e13d
     470:	0000ee00 	.word	0x0000ee00
     474:	0000ee24 	.word	0x0000ee24
     478:	0000ee30 	.word	0x0000ee30
     47c:	0000ee3c 	.word	0x0000ee3c
     480:	0000ee44 	.word	0x0000ee44
     484:	200010d0 	.word	0x200010d0
     488:	00002391 	.word	0x00002391
     48c:	00000359 	.word	0x00000359
     490:	20000ecc 	.word	0x20000ecc
     494:	0000d95d 	.word	0x0000d95d
     498:	20000628 	.word	0x20000628
     49c:	0000054d 	.word	0x0000054d
     4a0:	0000ee50 	.word	0x0000ee50
     4a4:	0000e181 	.word	0x0000e181
     4a8:	0000ee64 	.word	0x0000ee64
     4ac:	000005b5 	.word	0x000005b5
     4b0:	0000058d 	.word	0x0000058d
     4b4:	0000ee68 	.word	0x0000ee68
     4b8:	0000ee70 	.word	0x0000ee70
     4bc:	0000e1a9 	.word	0x0000e1a9
     4c0:	000005c9 	.word	0x000005c9

000004c4 <_GLOBAL__sub_I_main>:
		}
		

	}
}
     4c4:	b510      	push	{r4, lr}
static SingleHeater_Class heater;
     4c6:	4c05      	ldr	r4, [pc, #20]	; (4dc <_GLOBAL__sub_I_main+0x18>)
     4c8:	4620      	mov	r0, r4
     4ca:	4b05      	ldr	r3, [pc, #20]	; (4e0 <_GLOBAL__sub_I_main+0x1c>)
     4cc:	4798      	blx	r3
     4ce:	4a05      	ldr	r2, [pc, #20]	; (4e4 <_GLOBAL__sub_I_main+0x20>)
     4d0:	4905      	ldr	r1, [pc, #20]	; (4e8 <_GLOBAL__sub_I_main+0x24>)
     4d2:	4620      	mov	r0, r4
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <_GLOBAL__sub_I_main+0x28>)
     4d6:	4798      	blx	r3
     4d8:	bd10      	pop	{r4, pc}
     4da:	bf00      	nop
     4dc:	20000628 	.word	0x20000628
     4e0:	0000050d 	.word	0x0000050d
     4e4:	20000000 	.word	0x20000000
     4e8:	0000051d 	.word	0x0000051d
     4ec:	0000e985 	.word	0x0000e985

000004f0 <__tcf_0>:


#include "SingleHeater_Class.h"
SingleHeater_Class*	ptrSingleHeaterClass;
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     4f0:	b538      	push	{r3, r4, r5, lr}
     4f2:	4d04      	ldr	r5, [pc, #16]	; (504 <__tcf_0+0x14>)
     4f4:	f105 001c 	add.w	r0, r5, #28
     4f8:	4c03      	ldr	r4, [pc, #12]	; (508 <__tcf_0+0x18>)
     4fa:	47a0      	blx	r4
     4fc:	4628      	mov	r0, r5
     4fe:	47a0      	blx	r4
     500:	bd38      	pop	{r3, r4, r5, pc}
     502:	bf00      	nop
     504:	20000644 	.word	0x20000644
     508:	0000d531 	.word	0x0000d531

0000050c <_ZN18SingleHeater_ClassC1Ev>:


// default constructor
SingleHeater_Class::SingleHeater_Class()
{
	ptrSingleHeaterClass=this;
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <_ZN18SingleHeater_ClassC1Ev+0xc>)
     50e:	6398      	str	r0, [r3, #56]	; 0x38
	i2c=&i2cSharedStatic;
     510:	333c      	adds	r3, #60	; 0x3c
     512:	6183      	str	r3, [r0, #24]
} //SingleHeater_Class
     514:	4770      	bx	lr
     516:	bf00      	nop
     518:	20000644 	.word	0x20000644

0000051c <_ZN18SingleHeater_ClassD1Ev>:


// default destructor
SingleHeater_Class::~SingleHeater_Class()
{
} //~SingleHeater_Class
     51c:	4770      	bx	lr
	...

00000520 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
			asm("nop");
		}
		return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
     520:	b570      	push	{r4, r5, r6, lr}
     522:	4605      	mov	r5, r0
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
	{
		expanders[i]=&expandersStatic[i];
     524:	4c07      	ldr	r4, [pc, #28]	; (544 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x24>)
     526:	60c4      	str	r4, [r0, #12]
		currentExpander=(expanders[i]);
     528:	6144      	str	r4, [r0, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     52a:	6982      	ldr	r2, [r0, #24]
     52c:	2120      	movs	r1, #32
     52e:	4620      	mov	r0, r4
     530:	4e05      	ldr	r6, [pc, #20]	; (548 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x28>)
     532:	47b0      	blx	r6
		expanders[i]=&expandersStatic[i];
     534:	f104 001c 	add.w	r0, r4, #28
     538:	6128      	str	r0, [r5, #16]
		currentExpander=(expanders[i]);
     53a:	6168      	str	r0, [r5, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     53c:	69aa      	ldr	r2, [r5, #24]
     53e:	2121      	movs	r1, #33	; 0x21
     540:	47b0      	blx	r6
	}
	
}
     542:	bd70      	pop	{r4, r5, r6, pc}
     544:	20000644 	.word	0x20000644
     548:	0000d545 	.word	0x0000d545

0000054c <_ZN18SingleHeater_Class4InitEv>:
bool SingleHeater_Class::Init(void){
     54c:	b510      	push	{r4, lr}
     54e:	4604      	mov	r4, r0
		i2c->Init();
     550:	6980      	ldr	r0, [r0, #24]
     552:	4b0a      	ldr	r3, [pc, #40]	; (57c <_ZN18SingleHeater_Class4InitEv+0x30>)
     554:	4798      	blx	r3
		if (i2c->isOK)
     556:	69a3      	ldr	r3, [r4, #24]
     558:	7a5b      	ldrb	r3, [r3, #9]
     55a:	b913      	cbnz	r3, 562 <_ZN18SingleHeater_Class4InitEv+0x16>
			asm("nop");
     55c:	bf00      	nop
		return isOK;
     55e:	7820      	ldrb	r0, [r4, #0]
}
     560:	bd10      	pop	{r4, pc}
			InitExpanderArray();
     562:	4620      	mov	r0, r4
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <_ZN18SingleHeater_Class4InitEv+0x34>)
     566:	4798      	blx	r3
			expanders[0]->SetPortInput();
     568:	68e0      	ldr	r0, [r4, #12]
     56a:	4b06      	ldr	r3, [pc, #24]	; (584 <_ZN18SingleHeater_Class4InitEv+0x38>)
     56c:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     56e:	6920      	ldr	r0, [r4, #16]
     570:	4b05      	ldr	r3, [pc, #20]	; (588 <_ZN18SingleHeater_Class4InitEv+0x3c>)
     572:	4798      	blx	r3
			isOK=SelfTest();
     574:	2301      	movs	r3, #1
     576:	7023      	strb	r3, [r4, #0]
     578:	e7f1      	b.n	55e <_ZN18SingleHeater_Class4InitEv+0x12>
     57a:	bf00      	nop
     57c:	0000d431 	.word	0x0000d431
     580:	00000521 	.word	0x00000521
     584:	0000d6ad 	.word	0x0000d6ad
     588:	0000d6f1 	.word	0x0000d6f1

0000058c <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     58c:	b510      	push	{r4, lr}
     58e:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     590:	68c0      	ldr	r0, [r0, #12]
     592:	4b07      	ldr	r3, [pc, #28]	; (5b0 <_ZN18SingleHeater_Class10ReadStatusEv+0x24>)
     594:	4798      	blx	r3
     596:	1ca1      	adds	r1, r4, #2
     598:	2301      	movs	r3, #1
	
	for (uint8_t i = 0; i < 4; i++)
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     59a:	fa40 f203 	asr.w	r2, r0, r3
     59e:	f002 0201 	and.w	r2, r2, #1
     5a2:	f801 2b01 	strb.w	r2, [r1], #1
     5a6:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 4; i++)
     5a8:	2b05      	cmp	r3, #5
     5aa:	d1f6      	bne.n	59a <_ZN18SingleHeater_Class10ReadStatusEv+0xe>
	}
	return r;
}
     5ac:	bd10      	pop	{r4, pc}
     5ae:	bf00      	nop
     5b0:	0000d62d 	.word	0x0000d62d

000005b4 <_ZN18SingleHeater_Class6EnableEh>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
     5b4:	b510      	push	{r4, lr}
     5b6:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,true);
     5b8:	2201      	movs	r2, #1
     5ba:	6900      	ldr	r0, [r0, #16]
     5bc:	4b01      	ldr	r3, [pc, #4]	; (5c4 <_ZN18SingleHeater_Class6EnableEh+0x10>)
     5be:	4798      	blx	r3
     5c0:	72a0      	strb	r0, [r4, #10]
	return uint8_t(enabled);
}
     5c2:	bd10      	pop	{r4, pc}
     5c4:	0000d7e9 	.word	0x0000d7e9

000005c8 <_ZN18SingleHeater_Class7DisableEh>:
uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
     5c8:	b510      	push	{r4, lr}
     5ca:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,false)?false:true;
     5cc:	2200      	movs	r2, #0
     5ce:	6900      	ldr	r0, [r0, #16]
     5d0:	4b03      	ldr	r3, [pc, #12]	; (5e0 <_ZN18SingleHeater_Class7DisableEh+0x18>)
     5d2:	4798      	blx	r3
     5d4:	f080 0001 	eor.w	r0, r0, #1
     5d8:	b2c0      	uxtb	r0, r0
     5da:	72a0      	strb	r0, [r4, #10]
	return uint8_t(enabled);
}
     5dc:	bd10      	pop	{r4, pc}
     5de:	bf00      	nop
     5e0:	0000d7e9 	.word	0x0000d7e9

000005e4 <_GLOBAL__sub_I_ptrSingleHeaterClass>:



bool SingleHeater_Class::SelfTest(void){
	return true;
}
     5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     5e6:	4c0c      	ldr	r4, [pc, #48]	; (618 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x34>)
     5e8:	f104 053c 	add.w	r5, r4, #60	; 0x3c
     5ec:	490b      	ldr	r1, [pc, #44]	; (61c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x38>)
     5ee:	4628      	mov	r0, r5
     5f0:	4b0b      	ldr	r3, [pc, #44]	; (620 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x3c>)
     5f2:	4798      	blx	r3
     5f4:	4e0b      	ldr	r6, [pc, #44]	; (624 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x40>)
     5f6:	4632      	mov	r2, r6
     5f8:	490b      	ldr	r1, [pc, #44]	; (628 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x44>)
     5fa:	4628      	mov	r0, r5
     5fc:	4d0b      	ldr	r5, [pc, #44]	; (62c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x48>)
     5fe:	47a8      	blx	r5
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     600:	4620      	mov	r0, r4
     602:	4f0b      	ldr	r7, [pc, #44]	; (630 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x4c>)
     604:	47b8      	blx	r7
     606:	f104 001c 	add.w	r0, r4, #28
     60a:	47b8      	blx	r7
     60c:	4632      	mov	r2, r6
     60e:	4909      	ldr	r1, [pc, #36]	; (634 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x50>)
     610:	2000      	movs	r0, #0
     612:	47a8      	blx	r5
     614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     616:	bf00      	nop
     618:	20000644 	.word	0x20000644
     61c:	20001154 	.word	0x20001154
     620:	0000d401 	.word	0x0000d401
     624:	20000000 	.word	0x20000000
     628:	0000d41d 	.word	0x0000d41d
     62c:	0000e985 	.word	0x0000e985
     630:	0000d51d 	.word	0x0000d51d
     634:	000004f1 	.word	0x000004f1

00000638 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     638:	b580      	push	{r7, lr}
     63a:	af00      	add	r7, sp, #0
	system_init();
     63c:	4b03      	ldr	r3, [pc, #12]	; (64c <atmel_start_init+0x14>)
     63e:	4798      	blx	r3
	usb_init();
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <atmel_start_init+0x18>)
     642:	4798      	blx	r3
	spi_nor_flash_init();
     644:	4b03      	ldr	r3, [pc, #12]	; (654 <atmel_start_init+0x1c>)
     646:	4798      	blx	r3
}
     648:	bf00      	nop
     64a:	bd80      	pop	{r7, pc}
     64c:	000019ad 	.word	0x000019ad
     650:	0000b52d 	.word	0x0000b52d
     654:	0000b4c1 	.word	0x0000b4c1

00000658 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     658:	b480      	push	{r7}
     65a:	b085      	sub	sp, #20
     65c:	af00      	add	r7, sp, #0
     65e:	60f8      	str	r0, [r7, #12]
     660:	460b      	mov	r3, r1
     662:	607a      	str	r2, [r7, #4]
     664:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     666:	7afa      	ldrb	r2, [r7, #11]
     668:	68fb      	ldr	r3, [r7, #12]
     66a:	3220      	adds	r2, #32
     66c:	6879      	ldr	r1, [r7, #4]
     66e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     672:	bf00      	nop
     674:	3714      	adds	r7, #20
     676:	46bd      	mov	sp, r7
     678:	f85d 7b04 	ldr.w	r7, [sp], #4
     67c:	4770      	bx	lr

0000067e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     67e:	b480      	push	{r7}
     680:	b083      	sub	sp, #12
     682:	af00      	add	r7, sp, #0
     684:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     686:	687b      	ldr	r3, [r7, #4]
     688:	691b      	ldr	r3, [r3, #16]
     68a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     68e:	687b      	ldr	r3, [r7, #4]
     690:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     692:	bf00      	nop
     694:	370c      	adds	r7, #12
     696:	46bd      	mov	sp, r7
     698:	f85d 7b04 	ldr.w	r7, [sp], #4
     69c:	4770      	bx	lr

0000069e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     69e:	b480      	push	{r7}
     6a0:	b083      	sub	sp, #12
     6a2:	af00      	add	r7, sp, #0
     6a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	691b      	ldr	r3, [r3, #16]
     6aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6b2:	bf00      	nop
     6b4:	370c      	adds	r7, #12
     6b6:	46bd      	mov	sp, r7
     6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6bc:	4770      	bx	lr

000006be <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     6be:	b480      	push	{r7}
     6c0:	b083      	sub	sp, #12
     6c2:	af00      	add	r7, sp, #0
     6c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	691b      	ldr	r3, [r3, #16]
     6ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6d2:	bf00      	nop
     6d4:	370c      	adds	r7, #12
     6d6:	46bd      	mov	sp, r7
     6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6dc:	4770      	bx	lr

000006de <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     6de:	b480      	push	{r7}
     6e0:	b083      	sub	sp, #12
     6e2:	af00      	add	r7, sp, #0
     6e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	691b      	ldr	r3, [r3, #16]
     6ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6f2:	bf00      	nop
     6f4:	370c      	adds	r7, #12
     6f6:	46bd      	mov	sp, r7
     6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6fc:	4770      	bx	lr

000006fe <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     6fe:	b480      	push	{r7}
     700:	b083      	sub	sp, #12
     702:	af00      	add	r7, sp, #0
     704:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     706:	687b      	ldr	r3, [r7, #4]
     708:	695b      	ldr	r3, [r3, #20]
     70a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     70e:	687b      	ldr	r3, [r7, #4]
     710:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     712:	bf00      	nop
     714:	370c      	adds	r7, #12
     716:	46bd      	mov	sp, r7
     718:	f85d 7b04 	ldr.w	r7, [sp], #4
     71c:	4770      	bx	lr

0000071e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     71e:	b480      	push	{r7}
     720:	b083      	sub	sp, #12
     722:	af00      	add	r7, sp, #0
     724:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     726:	687b      	ldr	r3, [r7, #4]
     728:	695b      	ldr	r3, [r3, #20]
     72a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     72e:	687b      	ldr	r3, [r7, #4]
     730:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     732:	bf00      	nop
     734:	370c      	adds	r7, #12
     736:	46bd      	mov	sp, r7
     738:	f85d 7b04 	ldr.w	r7, [sp], #4
     73c:	4770      	bx	lr

0000073e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     73e:	b480      	push	{r7}
     740:	b083      	sub	sp, #12
     742:	af00      	add	r7, sp, #0
     744:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     746:	687b      	ldr	r3, [r7, #4]
     748:	695b      	ldr	r3, [r3, #20]
     74a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     74e:	687b      	ldr	r3, [r7, #4]
     750:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     752:	bf00      	nop
     754:	370c      	adds	r7, #12
     756:	46bd      	mov	sp, r7
     758:	f85d 7b04 	ldr.w	r7, [sp], #4
     75c:	4770      	bx	lr

0000075e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     75e:	b480      	push	{r7}
     760:	b083      	sub	sp, #12
     762:	af00      	add	r7, sp, #0
     764:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     766:	687b      	ldr	r3, [r7, #4]
     768:	695b      	ldr	r3, [r3, #20]
     76a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     76e:	687b      	ldr	r3, [r7, #4]
     770:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     772:	bf00      	nop
     774:	370c      	adds	r7, #12
     776:	46bd      	mov	sp, r7
     778:	f85d 7b04 	ldr.w	r7, [sp], #4
     77c:	4770      	bx	lr

0000077e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     77e:	b480      	push	{r7}
     780:	b083      	sub	sp, #12
     782:	af00      	add	r7, sp, #0
     784:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     786:	687b      	ldr	r3, [r7, #4]
     788:	695b      	ldr	r3, [r3, #20]
     78a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     78e:	687b      	ldr	r3, [r7, #4]
     790:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     792:	bf00      	nop
     794:	370c      	adds	r7, #12
     796:	46bd      	mov	sp, r7
     798:	f85d 7b04 	ldr.w	r7, [sp], #4
     79c:	4770      	bx	lr

0000079e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     79e:	b480      	push	{r7}
     7a0:	b083      	sub	sp, #12
     7a2:	af00      	add	r7, sp, #0
     7a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	699b      	ldr	r3, [r3, #24]
     7aa:	f043 0201 	orr.w	r2, r3, #1
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7b2:	bf00      	nop
     7b4:	370c      	adds	r7, #12
     7b6:	46bd      	mov	sp, r7
     7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7bc:	4770      	bx	lr

000007be <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     7be:	b480      	push	{r7}
     7c0:	b083      	sub	sp, #12
     7c2:	af00      	add	r7, sp, #0
     7c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     7c6:	687b      	ldr	r3, [r7, #4]
     7c8:	699b      	ldr	r3, [r3, #24]
     7ca:	f043 0202 	orr.w	r2, r3, #2
     7ce:	687b      	ldr	r3, [r7, #4]
     7d0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7d2:	bf00      	nop
     7d4:	370c      	adds	r7, #12
     7d6:	46bd      	mov	sp, r7
     7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7dc:	4770      	bx	lr

000007de <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     7de:	b480      	push	{r7}
     7e0:	b083      	sub	sp, #12
     7e2:	af00      	add	r7, sp, #0
     7e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	699b      	ldr	r3, [r3, #24]
     7ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     7f2:	bf00      	nop
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fc:	4770      	bx	lr

000007fe <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     7fe:	b480      	push	{r7}
     800:	b083      	sub	sp, #12
     802:	af00      	add	r7, sp, #0
     804:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     806:	687b      	ldr	r3, [r7, #4]
     808:	699b      	ldr	r3, [r3, #24]
     80a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     80e:	687b      	ldr	r3, [r7, #4]
     810:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	f85d 7b04 	ldr.w	r7, [sp], #4
     81c:	4770      	bx	lr

0000081e <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     81e:	b480      	push	{r7}
     820:	b083      	sub	sp, #12
     822:	af00      	add	r7, sp, #0
     824:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     826:	687b      	ldr	r3, [r7, #4]
     828:	699b      	ldr	r3, [r3, #24]
     82a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     82e:	687b      	ldr	r3, [r7, #4]
     830:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     832:	bf00      	nop
     834:	370c      	adds	r7, #12
     836:	46bd      	mov	sp, r7
     838:	f85d 7b04 	ldr.w	r7, [sp], #4
     83c:	4770      	bx	lr

0000083e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     83e:	b480      	push	{r7}
     840:	b083      	sub	sp, #12
     842:	af00      	add	r7, sp, #0
     844:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     846:	687b      	ldr	r3, [r7, #4]
     848:	699b      	ldr	r3, [r3, #24]
     84a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     84e:	687b      	ldr	r3, [r7, #4]
     850:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     852:	bf00      	nop
     854:	370c      	adds	r7, #12
     856:	46bd      	mov	sp, r7
     858:	f85d 7b04 	ldr.w	r7, [sp], #4
     85c:	4770      	bx	lr

0000085e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     85e:	b480      	push	{r7}
     860:	b083      	sub	sp, #12
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     866:	687b      	ldr	r3, [r7, #4]
     868:	69db      	ldr	r3, [r3, #28]
     86a:	f043 0220 	orr.w	r2, r3, #32
     86e:	687b      	ldr	r3, [r7, #4]
     870:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     872:	bf00      	nop
     874:	370c      	adds	r7, #12
     876:	46bd      	mov	sp, r7
     878:	f85d 7b04 	ldr.w	r7, [sp], #4
     87c:	4770      	bx	lr

0000087e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     87e:	b480      	push	{r7}
     880:	b083      	sub	sp, #12
     882:	af00      	add	r7, sp, #0
     884:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     886:	687b      	ldr	r3, [r7, #4]
     888:	69db      	ldr	r3, [r3, #28]
     88a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     88e:	687b      	ldr	r3, [r7, #4]
     890:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     892:	bf00      	nop
     894:	370c      	adds	r7, #12
     896:	46bd      	mov	sp, r7
     898:	f85d 7b04 	ldr.w	r7, [sp], #4
     89c:	4770      	bx	lr

0000089e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     89e:	b480      	push	{r7}
     8a0:	b083      	sub	sp, #12
     8a2:	af00      	add	r7, sp, #0
     8a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	69db      	ldr	r3, [r3, #28]
     8aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8b2:	bf00      	nop
     8b4:	370c      	adds	r7, #12
     8b6:	46bd      	mov	sp, r7
     8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8bc:	4770      	bx	lr

000008be <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     8be:	b480      	push	{r7}
     8c0:	b083      	sub	sp, #12
     8c2:	af00      	add	r7, sp, #0
     8c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	6a1b      	ldr	r3, [r3, #32]
     8ca:	f043 0201 	orr.w	r2, r3, #1
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8d2:	bf00      	nop
     8d4:	370c      	adds	r7, #12
     8d6:	46bd      	mov	sp, r7
     8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8dc:	4770      	bx	lr

000008de <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     8de:	b480      	push	{r7}
     8e0:	b083      	sub	sp, #12
     8e2:	af00      	add	r7, sp, #0
     8e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	6a1b      	ldr	r3, [r3, #32]
     8ea:	f043 0202 	orr.w	r2, r3, #2
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8f2:	bf00      	nop
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fc:	4770      	bx	lr

000008fe <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     8fe:	b480      	push	{r7}
     900:	b083      	sub	sp, #12
     902:	af00      	add	r7, sp, #0
     904:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6a1b      	ldr	r3, [r3, #32]
     90a:	f043 0204 	orr.w	r2, r3, #4
     90e:	687b      	ldr	r3, [r7, #4]
     910:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     912:	bf00      	nop
     914:	370c      	adds	r7, #12
     916:	46bd      	mov	sp, r7
     918:	f85d 7b04 	ldr.w	r7, [sp], #4
     91c:	4770      	bx	lr

0000091e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     91e:	b480      	push	{r7}
     920:	b083      	sub	sp, #12
     922:	af00      	add	r7, sp, #0
     924:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     926:	687b      	ldr	r3, [r7, #4]
     928:	6a1b      	ldr	r3, [r3, #32]
     92a:	f043 0208 	orr.w	r2, r3, #8
     92e:	687b      	ldr	r3, [r7, #4]
     930:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     932:	bf00      	nop
     934:	370c      	adds	r7, #12
     936:	46bd      	mov	sp, r7
     938:	f85d 7b04 	ldr.w	r7, [sp], #4
     93c:	4770      	bx	lr

0000093e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     93e:	b480      	push	{r7}
     940:	b083      	sub	sp, #12
     942:	af00      	add	r7, sp, #0
     944:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     946:	687b      	ldr	r3, [r7, #4]
     948:	6a1b      	ldr	r3, [r3, #32]
     94a:	f043 0220 	orr.w	r2, r3, #32
     94e:	687b      	ldr	r3, [r7, #4]
     950:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     952:	bf00      	nop
     954:	370c      	adds	r7, #12
     956:	46bd      	mov	sp, r7
     958:	f85d 7b04 	ldr.w	r7, [sp], #4
     95c:	4770      	bx	lr

0000095e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     95e:	b480      	push	{r7}
     960:	b083      	sub	sp, #12
     962:	af00      	add	r7, sp, #0
     964:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     966:	687b      	ldr	r3, [r7, #4]
     968:	6a1b      	ldr	r3, [r3, #32]
     96a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     96e:	687b      	ldr	r3, [r7, #4]
     970:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     972:	bf00      	nop
     974:	370c      	adds	r7, #12
     976:	46bd      	mov	sp, r7
     978:	f85d 7b04 	ldr.w	r7, [sp], #4
     97c:	4770      	bx	lr

0000097e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     97e:	b480      	push	{r7}
     980:	b085      	sub	sp, #20
     982:	af00      	add	r7, sp, #0
     984:	60f8      	str	r0, [r7, #12]
     986:	460b      	mov	r3, r1
     988:	607a      	str	r2, [r7, #4]
     98a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     98c:	7afb      	ldrb	r3, [r7, #11]
     98e:	68fa      	ldr	r2, [r7, #12]
     990:	01db      	lsls	r3, r3, #7
     992:	4413      	add	r3, r2
     994:	3308      	adds	r3, #8
     996:	687a      	ldr	r2, [r7, #4]
     998:	601a      	str	r2, [r3, #0]
}
     99a:	bf00      	nop
     99c:	3714      	adds	r7, #20
     99e:	46bd      	mov	sp, r7
     9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9a4:	4770      	bx	lr

000009a6 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     9a6:	b480      	push	{r7}
     9a8:	b085      	sub	sp, #20
     9aa:	af00      	add	r7, sp, #0
     9ac:	60f8      	str	r0, [r7, #12]
     9ae:	460b      	mov	r3, r1
     9b0:	607a      	str	r2, [r7, #4]
     9b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9b4:	7afb      	ldrb	r3, [r7, #11]
     9b6:	68fa      	ldr	r2, [r7, #12]
     9b8:	01db      	lsls	r3, r3, #7
     9ba:	4413      	add	r3, r2
     9bc:	3304      	adds	r3, #4
     9be:	687a      	ldr	r2, [r7, #4]
     9c0:	601a      	str	r2, [r3, #0]
}
     9c2:	bf00      	nop
     9c4:	3714      	adds	r7, #20
     9c6:	46bd      	mov	sp, r7
     9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9cc:	4770      	bx	lr

000009ce <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     9ce:	b480      	push	{r7}
     9d0:	b085      	sub	sp, #20
     9d2:	af00      	add	r7, sp, #0
     9d4:	60f8      	str	r0, [r7, #12]
     9d6:	460b      	mov	r3, r1
     9d8:	607a      	str	r2, [r7, #4]
     9da:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9dc:	7afb      	ldrb	r3, [r7, #11]
     9de:	68fa      	ldr	r2, [r7, #12]
     9e0:	01db      	lsls	r3, r3, #7
     9e2:	4413      	add	r3, r2
     9e4:	3318      	adds	r3, #24
     9e6:	687a      	ldr	r2, [r7, #4]
     9e8:	601a      	str	r2, [r3, #0]
}
     9ea:	bf00      	nop
     9ec:	3714      	adds	r7, #20
     9ee:	46bd      	mov	sp, r7
     9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f4:	4770      	bx	lr

000009f6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     9f6:	b480      	push	{r7}
     9f8:	b085      	sub	sp, #20
     9fa:	af00      	add	r7, sp, #0
     9fc:	60f8      	str	r0, [r7, #12]
     9fe:	460b      	mov	r3, r1
     a00:	607a      	str	r2, [r7, #4]
     a02:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a04:	7afb      	ldrb	r3, [r7, #11]
     a06:	68fa      	ldr	r2, [r7, #12]
     a08:	01db      	lsls	r3, r3, #7
     a0a:	4413      	add	r3, r2
     a0c:	3314      	adds	r3, #20
     a0e:	687a      	ldr	r2, [r7, #4]
     a10:	601a      	str	r2, [r3, #0]
}
     a12:	bf00      	nop
     a14:	3714      	adds	r7, #20
     a16:	46bd      	mov	sp, r7
     a18:	f85d 7b04 	ldr.w	r7, [sp], #4
     a1c:	4770      	bx	lr

00000a1e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a1e:	b480      	push	{r7}
     a20:	b085      	sub	sp, #20
     a22:	af00      	add	r7, sp, #0
     a24:	6078      	str	r0, [r7, #4]
     a26:	4608      	mov	r0, r1
     a28:	4611      	mov	r1, r2
     a2a:	461a      	mov	r2, r3
     a2c:	4603      	mov	r3, r0
     a2e:	70fb      	strb	r3, [r7, #3]
     a30:	460b      	mov	r3, r1
     a32:	70bb      	strb	r3, [r7, #2]
     a34:	4613      	mov	r3, r2
     a36:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a38:	78fa      	ldrb	r2, [r7, #3]
     a3a:	78bb      	ldrb	r3, [r7, #2]
     a3c:	6879      	ldr	r1, [r7, #4]
     a3e:	01d2      	lsls	r2, r2, #7
     a40:	440a      	add	r2, r1
     a42:	4413      	add	r3, r2
     a44:	3330      	adds	r3, #48	; 0x30
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a4a:	7bfb      	ldrb	r3, [r7, #15]
     a4c:	f023 030f 	bic.w	r3, r3, #15
     a50:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     a52:	787b      	ldrb	r3, [r7, #1]
     a54:	f003 030f 	and.w	r3, r3, #15
     a58:	b2da      	uxtb	r2, r3
     a5a:	7bfb      	ldrb	r3, [r7, #15]
     a5c:	4313      	orrs	r3, r2
     a5e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a60:	78fa      	ldrb	r2, [r7, #3]
     a62:	78bb      	ldrb	r3, [r7, #2]
     a64:	6879      	ldr	r1, [r7, #4]
     a66:	01d2      	lsls	r2, r2, #7
     a68:	440a      	add	r2, r1
     a6a:	4413      	add	r3, r2
     a6c:	3330      	adds	r3, #48	; 0x30
     a6e:	7bfa      	ldrb	r2, [r7, #15]
     a70:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     a72:	bf00      	nop
     a74:	3714      	adds	r7, #20
     a76:	46bd      	mov	sp, r7
     a78:	f85d 7b04 	ldr.w	r7, [sp], #4
     a7c:	4770      	bx	lr

00000a7e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     a7e:	b480      	push	{r7}
     a80:	b085      	sub	sp, #20
     a82:	af00      	add	r7, sp, #0
     a84:	6078      	str	r0, [r7, #4]
     a86:	4608      	mov	r0, r1
     a88:	4611      	mov	r1, r2
     a8a:	461a      	mov	r2, r3
     a8c:	4603      	mov	r3, r0
     a8e:	70fb      	strb	r3, [r7, #3]
     a90:	460b      	mov	r3, r1
     a92:	70bb      	strb	r3, [r7, #2]
     a94:	4613      	mov	r3, r2
     a96:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a98:	78fa      	ldrb	r2, [r7, #3]
     a9a:	78bb      	ldrb	r3, [r7, #2]
     a9c:	6879      	ldr	r1, [r7, #4]
     a9e:	01d2      	lsls	r2, r2, #7
     aa0:	440a      	add	r2, r1
     aa2:	4413      	add	r3, r2
     aa4:	3330      	adds	r3, #48	; 0x30
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     aaa:	7bfb      	ldrb	r3, [r7, #15]
     aac:	f003 030f 	and.w	r3, r3, #15
     ab0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     ab2:	787b      	ldrb	r3, [r7, #1]
     ab4:	011b      	lsls	r3, r3, #4
     ab6:	b2da      	uxtb	r2, r3
     ab8:	7bfb      	ldrb	r3, [r7, #15]
     aba:	4313      	orrs	r3, r2
     abc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     abe:	78fa      	ldrb	r2, [r7, #3]
     ac0:	78bb      	ldrb	r3, [r7, #2]
     ac2:	6879      	ldr	r1, [r7, #4]
     ac4:	01d2      	lsls	r2, r2, #7
     ac6:	440a      	add	r2, r1
     ac8:	4413      	add	r3, r2
     aca:	3330      	adds	r3, #48	; 0x30
     acc:	7bfa      	ldrb	r2, [r7, #15]
     ace:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     ad0:	bf00      	nop
     ad2:	3714      	adds	r7, #20
     ad4:	46bd      	mov	sp, r7
     ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
     ada:	4770      	bx	lr

00000adc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     adc:	b480      	push	{r7}
     ade:	b085      	sub	sp, #20
     ae0:	af00      	add	r7, sp, #0
     ae2:	6078      	str	r0, [r7, #4]
     ae4:	4608      	mov	r0, r1
     ae6:	4611      	mov	r1, r2
     ae8:	461a      	mov	r2, r3
     aea:	4603      	mov	r3, r0
     aec:	70fb      	strb	r3, [r7, #3]
     aee:	460b      	mov	r3, r1
     af0:	70bb      	strb	r3, [r7, #2]
     af2:	4613      	mov	r3, r2
     af4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af6:	78fa      	ldrb	r2, [r7, #3]
     af8:	78bb      	ldrb	r3, [r7, #2]
     afa:	6879      	ldr	r1, [r7, #4]
     afc:	01d2      	lsls	r2, r2, #7
     afe:	440a      	add	r2, r1
     b00:	4413      	add	r3, r2
     b02:	3340      	adds	r3, #64	; 0x40
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     b08:	7bfb      	ldrb	r3, [r7, #15]
     b0a:	f023 0301 	bic.w	r3, r3, #1
     b0e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b10:	787a      	ldrb	r2, [r7, #1]
     b12:	7bfb      	ldrb	r3, [r7, #15]
     b14:	4313      	orrs	r3, r2
     b16:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b18:	78fa      	ldrb	r2, [r7, #3]
     b1a:	78bb      	ldrb	r3, [r7, #2]
     b1c:	6879      	ldr	r1, [r7, #4]
     b1e:	01d2      	lsls	r2, r2, #7
     b20:	440a      	add	r2, r1
     b22:	4413      	add	r3, r2
     b24:	3340      	adds	r3, #64	; 0x40
     b26:	7bfa      	ldrb	r2, [r7, #15]
     b28:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b2a:	bf00      	nop
     b2c:	3714      	adds	r7, #20
     b2e:	46bd      	mov	sp, r7
     b30:	f85d 7b04 	ldr.w	r7, [sp], #4
     b34:	4770      	bx	lr

00000b36 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b36:	b490      	push	{r4, r7}
     b38:	b082      	sub	sp, #8
     b3a:	af00      	add	r7, sp, #0
     b3c:	6078      	str	r0, [r7, #4]
     b3e:	460b      	mov	r3, r1
     b40:	70fb      	strb	r3, [r7, #3]
     b42:	4613      	mov	r3, r2
     b44:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     b46:	78fa      	ldrb	r2, [r7, #3]
     b48:	78bb      	ldrb	r3, [r7, #2]
     b4a:	78f8      	ldrb	r0, [r7, #3]
     b4c:	78b9      	ldrb	r1, [r7, #2]
     b4e:	687c      	ldr	r4, [r7, #4]
     b50:	01c0      	lsls	r0, r0, #7
     b52:	4420      	add	r0, r4
     b54:	4401      	add	r1, r0
     b56:	3140      	adds	r1, #64	; 0x40
     b58:	7809      	ldrb	r1, [r1, #0]
     b5a:	b2c9      	uxtb	r1, r1
     b5c:	f041 0104 	orr.w	r1, r1, #4
     b60:	b2c8      	uxtb	r0, r1
     b62:	6879      	ldr	r1, [r7, #4]
     b64:	01d2      	lsls	r2, r2, #7
     b66:	440a      	add	r2, r1
     b68:	4413      	add	r3, r2
     b6a:	3340      	adds	r3, #64	; 0x40
     b6c:	4602      	mov	r2, r0
     b6e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     b70:	bf00      	nop
     b72:	3708      	adds	r7, #8
     b74:	46bd      	mov	sp, r7
     b76:	bc90      	pop	{r4, r7}
     b78:	4770      	bx	lr

00000b7a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     b7a:	b490      	push	{r4, r7}
     b7c:	b082      	sub	sp, #8
     b7e:	af00      	add	r7, sp, #0
     b80:	6078      	str	r0, [r7, #4]
     b82:	460b      	mov	r3, r1
     b84:	70fb      	strb	r3, [r7, #3]
     b86:	4613      	mov	r3, r2
     b88:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b8a:	78fa      	ldrb	r2, [r7, #3]
     b8c:	78bb      	ldrb	r3, [r7, #2]
     b8e:	78f8      	ldrb	r0, [r7, #3]
     b90:	78b9      	ldrb	r1, [r7, #2]
     b92:	687c      	ldr	r4, [r7, #4]
     b94:	01c0      	lsls	r0, r0, #7
     b96:	4420      	add	r0, r4
     b98:	4401      	add	r1, r0
     b9a:	3140      	adds	r1, #64	; 0x40
     b9c:	7809      	ldrb	r1, [r1, #0]
     b9e:	b2c9      	uxtb	r1, r1
     ba0:	f021 0104 	bic.w	r1, r1, #4
     ba4:	b2c8      	uxtb	r0, r1
     ba6:	6879      	ldr	r1, [r7, #4]
     ba8:	01d2      	lsls	r2, r2, #7
     baa:	440a      	add	r2, r1
     bac:	4413      	add	r3, r2
     bae:	3340      	adds	r3, #64	; 0x40
     bb0:	4602      	mov	r2, r0
     bb2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bb4:	bf00      	nop
     bb6:	3708      	adds	r7, #8
     bb8:	46bd      	mov	sp, r7
     bba:	bc90      	pop	{r4, r7}
     bbc:	4770      	bx	lr

00000bbe <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     bbe:	b480      	push	{r7}
     bc0:	b085      	sub	sp, #20
     bc2:	af00      	add	r7, sp, #0
     bc4:	60f8      	str	r0, [r7, #12]
     bc6:	460b      	mov	r3, r1
     bc8:	607a      	str	r2, [r7, #4]
     bca:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bcc:	7afb      	ldrb	r3, [r7, #11]
     bce:	68fa      	ldr	r2, [r7, #12]
     bd0:	01db      	lsls	r3, r3, #7
     bd2:	4413      	add	r3, r2
     bd4:	3328      	adds	r3, #40	; 0x28
     bd6:	687a      	ldr	r2, [r7, #4]
     bd8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     bda:	bf00      	nop
     bdc:	3714      	adds	r7, #20
     bde:	46bd      	mov	sp, r7
     be0:	f85d 7b04 	ldr.w	r7, [sp], #4
     be4:	4770      	bx	lr
	...

00000be8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     be8:	b580      	push	{r7, lr}
     bea:	b082      	sub	sp, #8
     bec:	af00      	add	r7, sp, #0
     bee:	4603      	mov	r3, r0
     bf0:	6039      	str	r1, [r7, #0]
     bf2:	71fb      	strb	r3, [r7, #7]
     bf4:	4613      	mov	r3, r2
     bf6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     bf8:	79bb      	ldrb	r3, [r7, #6]
     bfa:	2b01      	cmp	r3, #1
     bfc:	d01c      	beq.n	c38 <_gpio_set_direction+0x50>
     bfe:	2b02      	cmp	r3, #2
     c00:	d037      	beq.n	c72 <_gpio_set_direction+0x8a>
     c02:	2b00      	cmp	r3, #0
     c04:	d14e      	bne.n	ca4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c06:	79fb      	ldrb	r3, [r7, #7]
     c08:	683a      	ldr	r2, [r7, #0]
     c0a:	4619      	mov	r1, r3
     c0c:	482a      	ldr	r0, [pc, #168]	; (cb8 <_gpio_set_direction+0xd0>)
     c0e:	4b2b      	ldr	r3, [pc, #172]	; (cbc <_gpio_set_direction+0xd4>)
     c10:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	b29b      	uxth	r3, r3
     c16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c1a:	79fb      	ldrb	r3, [r7, #7]
     c1c:	4619      	mov	r1, r3
     c1e:	4826      	ldr	r0, [pc, #152]	; (cb8 <_gpio_set_direction+0xd0>)
     c20:	4b27      	ldr	r3, [pc, #156]	; (cc0 <_gpio_set_direction+0xd8>)
     c22:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c24:	683b      	ldr	r3, [r7, #0]
     c26:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c28:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c2c:	79fb      	ldrb	r3, [r7, #7]
     c2e:	4619      	mov	r1, r3
     c30:	4821      	ldr	r0, [pc, #132]	; (cb8 <_gpio_set_direction+0xd0>)
     c32:	4b23      	ldr	r3, [pc, #140]	; (cc0 <_gpio_set_direction+0xd8>)
     c34:	4798      	blx	r3
		break;
     c36:	e03a      	b.n	cae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     c38:	79fb      	ldrb	r3, [r7, #7]
     c3a:	683a      	ldr	r2, [r7, #0]
     c3c:	4619      	mov	r1, r3
     c3e:	481e      	ldr	r0, [pc, #120]	; (cb8 <_gpio_set_direction+0xd0>)
     c40:	4b1e      	ldr	r3, [pc, #120]	; (cbc <_gpio_set_direction+0xd4>)
     c42:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     c44:	683b      	ldr	r3, [r7, #0]
     c46:	b29b      	uxth	r3, r3
     c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c50:	79f9      	ldrb	r1, [r7, #7]
     c52:	461a      	mov	r2, r3
     c54:	4818      	ldr	r0, [pc, #96]	; (cb8 <_gpio_set_direction+0xd0>)
     c56:	4b1a      	ldr	r3, [pc, #104]	; (cc0 <_gpio_set_direction+0xd8>)
     c58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     c5a:	683b      	ldr	r3, [r7, #0]
     c5c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     c5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c66:	79f9      	ldrb	r1, [r7, #7]
     c68:	461a      	mov	r2, r3
     c6a:	4813      	ldr	r0, [pc, #76]	; (cb8 <_gpio_set_direction+0xd0>)
     c6c:	4b14      	ldr	r3, [pc, #80]	; (cc0 <_gpio_set_direction+0xd8>)
     c6e:	4798      	blx	r3
		break;
     c70:	e01d      	b.n	cae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     c72:	79fb      	ldrb	r3, [r7, #7]
     c74:	683a      	ldr	r2, [r7, #0]
     c76:	4619      	mov	r1, r3
     c78:	480f      	ldr	r0, [pc, #60]	; (cb8 <_gpio_set_direction+0xd0>)
     c7a:	4b12      	ldr	r3, [pc, #72]	; (cc4 <_gpio_set_direction+0xdc>)
     c7c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     c7e:	683b      	ldr	r3, [r7, #0]
     c80:	b29b      	uxth	r3, r3
     c82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     c86:	79fb      	ldrb	r3, [r7, #7]
     c88:	4619      	mov	r1, r3
     c8a:	480b      	ldr	r0, [pc, #44]	; (cb8 <_gpio_set_direction+0xd0>)
     c8c:	4b0c      	ldr	r3, [pc, #48]	; (cc0 <_gpio_set_direction+0xd8>)
     c8e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     c90:	683b      	ldr	r3, [r7, #0]
     c92:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     c94:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     c98:	79fb      	ldrb	r3, [r7, #7]
     c9a:	4619      	mov	r1, r3
     c9c:	4806      	ldr	r0, [pc, #24]	; (cb8 <_gpio_set_direction+0xd0>)
     c9e:	4b08      	ldr	r3, [pc, #32]	; (cc0 <_gpio_set_direction+0xd8>)
     ca0:	4798      	blx	r3
		break;
     ca2:	e004      	b.n	cae <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     ca4:	2246      	movs	r2, #70	; 0x46
     ca6:	4908      	ldr	r1, [pc, #32]	; (cc8 <_gpio_set_direction+0xe0>)
     ca8:	2000      	movs	r0, #0
     caa:	4b08      	ldr	r3, [pc, #32]	; (ccc <_gpio_set_direction+0xe4>)
     cac:	4798      	blx	r3
	}
}
     cae:	bf00      	nop
     cb0:	3708      	adds	r7, #8
     cb2:	46bd      	mov	sp, r7
     cb4:	bd80      	pop	{r7, pc}
     cb6:	bf00      	nop
     cb8:	41008000 	.word	0x41008000
     cbc:	000009a7 	.word	0x000009a7
     cc0:	00000bbf 	.word	0x00000bbf
     cc4:	0000097f 	.word	0x0000097f
     cc8:	0000ee7c 	.word	0x0000ee7c
     ccc:	00003511 	.word	0x00003511

00000cd0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	4603      	mov	r3, r0
     cd8:	6039      	str	r1, [r7, #0]
     cda:	71fb      	strb	r3, [r7, #7]
     cdc:	4613      	mov	r3, r2
     cde:	71bb      	strb	r3, [r7, #6]
	if (level) {
     ce0:	79bb      	ldrb	r3, [r7, #6]
     ce2:	2b00      	cmp	r3, #0
     ce4:	d006      	beq.n	cf4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     ce6:	79fb      	ldrb	r3, [r7, #7]
     ce8:	683a      	ldr	r2, [r7, #0]
     cea:	4619      	mov	r1, r3
     cec:	4806      	ldr	r0, [pc, #24]	; (d08 <_gpio_set_level+0x38>)
     cee:	4b07      	ldr	r3, [pc, #28]	; (d0c <_gpio_set_level+0x3c>)
     cf0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     cf2:	e005      	b.n	d00 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     cf4:	79fb      	ldrb	r3, [r7, #7]
     cf6:	683a      	ldr	r2, [r7, #0]
     cf8:	4619      	mov	r1, r3
     cfa:	4803      	ldr	r0, [pc, #12]	; (d08 <_gpio_set_level+0x38>)
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <_gpio_set_level+0x40>)
     cfe:	4798      	blx	r3
}
     d00:	bf00      	nop
     d02:	3708      	adds	r7, #8
     d04:	46bd      	mov	sp, r7
     d06:	bd80      	pop	{r7, pc}
     d08:	41008000 	.word	0x41008000
     d0c:	000009cf 	.word	0x000009cf
     d10:	000009f7 	.word	0x000009f7

00000d14 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     d14:	b580      	push	{r7, lr}
     d16:	b082      	sub	sp, #8
     d18:	af00      	add	r7, sp, #0
     d1a:	4603      	mov	r3, r0
     d1c:	71fb      	strb	r3, [r7, #7]
     d1e:	460b      	mov	r3, r1
     d20:	71bb      	strb	r3, [r7, #6]
     d22:	4613      	mov	r3, r2
     d24:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     d26:	797b      	ldrb	r3, [r7, #5]
     d28:	2b01      	cmp	r3, #1
     d2a:	d00a      	beq.n	d42 <_gpio_set_pin_pull_mode+0x2e>
     d2c:	2b02      	cmp	r3, #2
     d2e:	d01f      	beq.n	d70 <_gpio_set_pin_pull_mode+0x5c>
     d30:	2b00      	cmp	r3, #0
     d32:	d134      	bne.n	d9e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     d34:	79ba      	ldrb	r2, [r7, #6]
     d36:	79fb      	ldrb	r3, [r7, #7]
     d38:	4619      	mov	r1, r3
     d3a:	481e      	ldr	r0, [pc, #120]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d3c:	4b1e      	ldr	r3, [pc, #120]	; (db8 <_gpio_set_pin_pull_mode+0xa4>)
     d3e:	4798      	blx	r3
		break;
     d40:	e033      	b.n	daa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     d42:	79bb      	ldrb	r3, [r7, #6]
     d44:	2201      	movs	r2, #1
     d46:	409a      	lsls	r2, r3
     d48:	79fb      	ldrb	r3, [r7, #7]
     d4a:	4619      	mov	r1, r3
     d4c:	4819      	ldr	r0, [pc, #100]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d4e:	4b1b      	ldr	r3, [pc, #108]	; (dbc <_gpio_set_pin_pull_mode+0xa8>)
     d50:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d52:	79ba      	ldrb	r2, [r7, #6]
     d54:	79fb      	ldrb	r3, [r7, #7]
     d56:	4619      	mov	r1, r3
     d58:	4816      	ldr	r0, [pc, #88]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d5a:	4b19      	ldr	r3, [pc, #100]	; (dc0 <_gpio_set_pin_pull_mode+0xac>)
     d5c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     d5e:	79bb      	ldrb	r3, [r7, #6]
     d60:	2201      	movs	r2, #1
     d62:	409a      	lsls	r2, r3
     d64:	79fb      	ldrb	r3, [r7, #7]
     d66:	4619      	mov	r1, r3
     d68:	4812      	ldr	r0, [pc, #72]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d6a:	4b16      	ldr	r3, [pc, #88]	; (dc4 <_gpio_set_pin_pull_mode+0xb0>)
     d6c:	4798      	blx	r3
		break;
     d6e:	e01c      	b.n	daa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     d70:	79bb      	ldrb	r3, [r7, #6]
     d72:	2201      	movs	r2, #1
     d74:	409a      	lsls	r2, r3
     d76:	79fb      	ldrb	r3, [r7, #7]
     d78:	4619      	mov	r1, r3
     d7a:	480e      	ldr	r0, [pc, #56]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d7c:	4b0f      	ldr	r3, [pc, #60]	; (dbc <_gpio_set_pin_pull_mode+0xa8>)
     d7e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     d80:	79ba      	ldrb	r2, [r7, #6]
     d82:	79fb      	ldrb	r3, [r7, #7]
     d84:	4619      	mov	r1, r3
     d86:	480b      	ldr	r0, [pc, #44]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d88:	4b0d      	ldr	r3, [pc, #52]	; (dc0 <_gpio_set_pin_pull_mode+0xac>)
     d8a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     d8c:	79bb      	ldrb	r3, [r7, #6]
     d8e:	2201      	movs	r2, #1
     d90:	409a      	lsls	r2, r3
     d92:	79fb      	ldrb	r3, [r7, #7]
     d94:	4619      	mov	r1, r3
     d96:	4807      	ldr	r0, [pc, #28]	; (db4 <_gpio_set_pin_pull_mode+0xa0>)
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <_gpio_set_pin_pull_mode+0xb4>)
     d9a:	4798      	blx	r3
		break;
     d9c:	e005      	b.n	daa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     d9e:	2289      	movs	r2, #137	; 0x89
     da0:	490a      	ldr	r1, [pc, #40]	; (dcc <_gpio_set_pin_pull_mode+0xb8>)
     da2:	2000      	movs	r0, #0
     da4:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <_gpio_set_pin_pull_mode+0xbc>)
     da6:	4798      	blx	r3
		break;
     da8:	bf00      	nop
	}
}
     daa:	bf00      	nop
     dac:	3708      	adds	r7, #8
     dae:	46bd      	mov	sp, r7
     db0:	bd80      	pop	{r7, pc}
     db2:	bf00      	nop
     db4:	41008000 	.word	0x41008000
     db8:	00000b7b 	.word	0x00000b7b
     dbc:	000009a7 	.word	0x000009a7
     dc0:	00000b37 	.word	0x00000b37
     dc4:	000009cf 	.word	0x000009cf
     dc8:	000009f7 	.word	0x000009f7
     dcc:	0000ee7c 	.word	0x0000ee7c
     dd0:	00003511 	.word	0x00003511

00000dd4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     dd4:	b590      	push	{r4, r7, lr}
     dd6:	b085      	sub	sp, #20
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
     ddc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	095b      	lsrs	r3, r3, #5
     de2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	b2db      	uxtb	r3, r3
     de8:	f003 031f 	and.w	r3, r3, #31
     dec:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     dee:	683b      	ldr	r3, [r7, #0]
     df0:	f1b3 3fff 	cmp.w	r3, #4294967295
     df4:	d106      	bne.n	e04 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     df6:	7bba      	ldrb	r2, [r7, #14]
     df8:	7bf9      	ldrb	r1, [r7, #15]
     dfa:	2300      	movs	r3, #0
     dfc:	4812      	ldr	r0, [pc, #72]	; (e48 <_gpio_set_pin_function+0x74>)
     dfe:	4c13      	ldr	r4, [pc, #76]	; (e4c <_gpio_set_pin_function+0x78>)
     e00:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     e02:	e01d      	b.n	e40 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     e04:	7bba      	ldrb	r2, [r7, #14]
     e06:	7bf9      	ldrb	r1, [r7, #15]
     e08:	2301      	movs	r3, #1
     e0a:	480f      	ldr	r0, [pc, #60]	; (e48 <_gpio_set_pin_function+0x74>)
     e0c:	4c0f      	ldr	r4, [pc, #60]	; (e4c <_gpio_set_pin_function+0x78>)
     e0e:	47a0      	blx	r4
		if (pin & 1) {
     e10:	7bbb      	ldrb	r3, [r7, #14]
     e12:	f003 0301 	and.w	r3, r3, #1
     e16:	2b00      	cmp	r3, #0
     e18:	d009      	beq.n	e2e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     e1a:	7bbb      	ldrb	r3, [r7, #14]
     e1c:	085b      	lsrs	r3, r3, #1
     e1e:	b2da      	uxtb	r2, r3
     e20:	683b      	ldr	r3, [r7, #0]
     e22:	b2db      	uxtb	r3, r3
     e24:	7bf9      	ldrb	r1, [r7, #15]
     e26:	4808      	ldr	r0, [pc, #32]	; (e48 <_gpio_set_pin_function+0x74>)
     e28:	4c09      	ldr	r4, [pc, #36]	; (e50 <_gpio_set_pin_function+0x7c>)
     e2a:	47a0      	blx	r4
}
     e2c:	e008      	b.n	e40 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     e2e:	7bbb      	ldrb	r3, [r7, #14]
     e30:	085b      	lsrs	r3, r3, #1
     e32:	b2da      	uxtb	r2, r3
     e34:	683b      	ldr	r3, [r7, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	7bf9      	ldrb	r1, [r7, #15]
     e3a:	4803      	ldr	r0, [pc, #12]	; (e48 <_gpio_set_pin_function+0x74>)
     e3c:	4c05      	ldr	r4, [pc, #20]	; (e54 <_gpio_set_pin_function+0x80>)
     e3e:	47a0      	blx	r4
}
     e40:	bf00      	nop
     e42:	3714      	adds	r7, #20
     e44:	46bd      	mov	sp, r7
     e46:	bd90      	pop	{r4, r7, pc}
     e48:	41008000 	.word	0x41008000
     e4c:	00000add 	.word	0x00000add
     e50:	00000a7f 	.word	0x00000a7f
     e54:	00000a1f 	.word	0x00000a1f

00000e58 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     e58:	b580      	push	{r7, lr}
     e5a:	b082      	sub	sp, #8
     e5c:	af00      	add	r7, sp, #0
     e5e:	4603      	mov	r3, r0
     e60:	460a      	mov	r2, r1
     e62:	71fb      	strb	r3, [r7, #7]
     e64:	4613      	mov	r3, r2
     e66:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     e68:	79fb      	ldrb	r3, [r7, #7]
     e6a:	095b      	lsrs	r3, r3, #5
     e6c:	b2d8      	uxtb	r0, r3
     e6e:	79fb      	ldrb	r3, [r7, #7]
     e70:	f003 031f 	and.w	r3, r3, #31
     e74:	b2db      	uxtb	r3, r3
     e76:	79ba      	ldrb	r2, [r7, #6]
     e78:	4619      	mov	r1, r3
     e7a:	4b03      	ldr	r3, [pc, #12]	; (e88 <gpio_set_pin_pull_mode+0x30>)
     e7c:	4798      	blx	r3
}
     e7e:	bf00      	nop
     e80:	3708      	adds	r7, #8
     e82:	46bd      	mov	sp, r7
     e84:	bd80      	pop	{r7, pc}
     e86:	bf00      	nop
     e88:	00000d15 	.word	0x00000d15

00000e8c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     e8c:	b580      	push	{r7, lr}
     e8e:	b082      	sub	sp, #8
     e90:	af00      	add	r7, sp, #0
     e92:	6078      	str	r0, [r7, #4]
     e94:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     e96:	6839      	ldr	r1, [r7, #0]
     e98:	6878      	ldr	r0, [r7, #4]
     e9a:	4b03      	ldr	r3, [pc, #12]	; (ea8 <gpio_set_pin_function+0x1c>)
     e9c:	4798      	blx	r3
}
     e9e:	bf00      	nop
     ea0:	3708      	adds	r7, #8
     ea2:	46bd      	mov	sp, r7
     ea4:	bd80      	pop	{r7, pc}
     ea6:	bf00      	nop
     ea8:	00000dd5 	.word	0x00000dd5

00000eac <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     eac:	b580      	push	{r7, lr}
     eae:	b082      	sub	sp, #8
     eb0:	af00      	add	r7, sp, #0
     eb2:	4603      	mov	r3, r0
     eb4:	460a      	mov	r2, r1
     eb6:	71fb      	strb	r3, [r7, #7]
     eb8:	4613      	mov	r3, r2
     eba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     ebc:	79fb      	ldrb	r3, [r7, #7]
     ebe:	095b      	lsrs	r3, r3, #5
     ec0:	b2d8      	uxtb	r0, r3
     ec2:	79fb      	ldrb	r3, [r7, #7]
     ec4:	f003 031f 	and.w	r3, r3, #31
     ec8:	2201      	movs	r2, #1
     eca:	fa02 f303 	lsl.w	r3, r2, r3
     ece:	79ba      	ldrb	r2, [r7, #6]
     ed0:	4619      	mov	r1, r3
     ed2:	4b03      	ldr	r3, [pc, #12]	; (ee0 <gpio_set_pin_direction+0x34>)
     ed4:	4798      	blx	r3
}
     ed6:	bf00      	nop
     ed8:	3708      	adds	r7, #8
     eda:	46bd      	mov	sp, r7
     edc:	bd80      	pop	{r7, pc}
     ede:	bf00      	nop
     ee0:	00000be9 	.word	0x00000be9

00000ee4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     ee4:	b580      	push	{r7, lr}
     ee6:	b082      	sub	sp, #8
     ee8:	af00      	add	r7, sp, #0
     eea:	4603      	mov	r3, r0
     eec:	460a      	mov	r2, r1
     eee:	71fb      	strb	r3, [r7, #7]
     ef0:	4613      	mov	r3, r2
     ef2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     ef4:	79fb      	ldrb	r3, [r7, #7]
     ef6:	095b      	lsrs	r3, r3, #5
     ef8:	b2d8      	uxtb	r0, r3
     efa:	79fb      	ldrb	r3, [r7, #7]
     efc:	f003 031f 	and.w	r3, r3, #31
     f00:	2201      	movs	r2, #1
     f02:	fa02 f303 	lsl.w	r3, r2, r3
     f06:	79ba      	ldrb	r2, [r7, #6]
     f08:	4619      	mov	r1, r3
     f0a:	4b03      	ldr	r3, [pc, #12]	; (f18 <gpio_set_pin_level+0x34>)
     f0c:	4798      	blx	r3
}
     f0e:	bf00      	nop
     f10:	3708      	adds	r7, #8
     f12:	46bd      	mov	sp, r7
     f14:	bd80      	pop	{r7, pc}
     f16:	bf00      	nop
     f18:	00000cd1 	.word	0x00000cd1

00000f1c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	af00      	add	r7, sp, #0
	_init_chip();
     f20:	4b01      	ldr	r3, [pc, #4]	; (f28 <init_mcu+0xc>)
     f22:	4798      	blx	r3
}
     f24:	bf00      	nop
     f26:	bd80      	pop	{r7, pc}
     f28:	0000411d 	.word	0x0000411d

00000f2c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     f2c:	b580      	push	{r7, lr}
     f2e:	b082      	sub	sp, #8
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
     f34:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	2b00      	cmp	r3, #0
     f3a:	d004      	beq.n	f46 <wdt_init+0x1a>
     f3c:	683b      	ldr	r3, [r7, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	d001      	beq.n	f46 <wdt_init+0x1a>
     f42:	2301      	movs	r3, #1
     f44:	e000      	b.n	f48 <wdt_init+0x1c>
     f46:	2300      	movs	r3, #0
     f48:	f003 0301 	and.w	r3, r3, #1
     f4c:	b2db      	uxtb	r3, r3
     f4e:	2248      	movs	r2, #72	; 0x48
     f50:	4907      	ldr	r1, [pc, #28]	; (f70 <wdt_init+0x44>)
     f52:	4618      	mov	r0, r3
     f54:	4b07      	ldr	r3, [pc, #28]	; (f74 <wdt_init+0x48>)
     f56:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	683a      	ldr	r2, [r7, #0]
     f5c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	4618      	mov	r0, r3
     f62:	4b05      	ldr	r3, [pc, #20]	; (f78 <wdt_init+0x4c>)
     f64:	4798      	blx	r3
     f66:	4603      	mov	r3, r0
}
     f68:	4618      	mov	r0, r3
     f6a:	3708      	adds	r7, #8
     f6c:	46bd      	mov	sp, r7
     f6e:	bd80      	pop	{r7, pc}
     f70:	0000ee98 	.word	0x0000ee98
     f74:	00003511 	.word	0x00003511
     f78:	0000af65 	.word	0x0000af65

00000f7c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     f80:	4804      	ldr	r0, [pc, #16]	; (f94 <CRC_CALC_init+0x18>)
     f82:	4b05      	ldr	r3, [pc, #20]	; (f98 <CRC_CALC_init+0x1c>)
     f84:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     f86:	4905      	ldr	r1, [pc, #20]	; (f9c <CRC_CALC_init+0x20>)
     f88:	4805      	ldr	r0, [pc, #20]	; (fa0 <CRC_CALC_init+0x24>)
     f8a:	4b06      	ldr	r3, [pc, #24]	; (fa4 <CRC_CALC_init+0x28>)
     f8c:	4798      	blx	r3
}
     f8e:	bf00      	nop
     f90:	bd80      	pop	{r7, pc}
     f92:	bf00      	nop
     f94:	40000800 	.word	0x40000800
     f98:	000007bf 	.word	0x000007bf
     f9c:	41002000 	.word	0x41002000
     fa0:	20001218 	.word	0x20001218
     fa4:	00001cf1 	.word	0x00001cf1

00000fa8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     fa8:	b580      	push	{r7, lr}
     faa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     fac:	2244      	movs	r2, #68	; 0x44
     fae:	2104      	movs	r1, #4
     fb0:	4838      	ldr	r0, [pc, #224]	; (1094 <EXTERNAL_IRQ_0_init+0xec>)
     fb2:	4b39      	ldr	r3, [pc, #228]	; (1098 <EXTERNAL_IRQ_0_init+0xf0>)
     fb4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     fb6:	4839      	ldr	r0, [pc, #228]	; (109c <EXTERNAL_IRQ_0_init+0xf4>)
     fb8:	4b39      	ldr	r3, [pc, #228]	; (10a0 <EXTERNAL_IRQ_0_init+0xf8>)
     fba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     fbc:	2101      	movs	r1, #1
     fbe:	2040      	movs	r0, #64	; 0x40
     fc0:	4b38      	ldr	r3, [pc, #224]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
     fc2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     fc4:	2100      	movs	r1, #0
     fc6:	2040      	movs	r0, #64	; 0x40
     fc8:	4b37      	ldr	r3, [pc, #220]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
     fca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     fcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     fd0:	2040      	movs	r0, #64	; 0x40
     fd2:	4b36      	ldr	r3, [pc, #216]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
     fd4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     fd6:	2101      	movs	r1, #1
     fd8:	2003      	movs	r0, #3
     fda:	4b32      	ldr	r3, [pc, #200]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
     fdc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     fde:	2102      	movs	r1, #2
     fe0:	2003      	movs	r0, #3
     fe2:	4b31      	ldr	r3, [pc, #196]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
     fe4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     fe6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     fea:	2003      	movs	r0, #3
     fec:	4b2f      	ldr	r3, [pc, #188]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
     fee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     ff0:	2101      	movs	r1, #1
     ff2:	2004      	movs	r0, #4
     ff4:	4b2b      	ldr	r3, [pc, #172]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
     ff6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     ff8:	2102      	movs	r1, #2
     ffa:	2004      	movs	r0, #4
     ffc:	4b2a      	ldr	r3, [pc, #168]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
     ffe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1000:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1004:	2004      	movs	r0, #4
    1006:	4b29      	ldr	r3, [pc, #164]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    1008:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    100a:	2101      	movs	r1, #1
    100c:	2005      	movs	r0, #5
    100e:	4b25      	ldr	r3, [pc, #148]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
    1010:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1012:	2102      	movs	r1, #2
    1014:	2005      	movs	r0, #5
    1016:	4b24      	ldr	r3, [pc, #144]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
    1018:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    101a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    101e:	2005      	movs	r0, #5
    1020:	4b22      	ldr	r3, [pc, #136]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    1022:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1024:	2101      	movs	r1, #1
    1026:	2056      	movs	r0, #86	; 0x56
    1028:	4b1e      	ldr	r3, [pc, #120]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
    102a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    102c:	2102      	movs	r1, #2
    102e:	2056      	movs	r0, #86	; 0x56
    1030:	4b1d      	ldr	r3, [pc, #116]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
    1032:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1034:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1038:	2056      	movs	r0, #86	; 0x56
    103a:	4b1c      	ldr	r3, [pc, #112]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    103c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    103e:	2101      	movs	r1, #1
    1040:	2057      	movs	r0, #87	; 0x57
    1042:	4b18      	ldr	r3, [pc, #96]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
    1044:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1046:	2102      	movs	r1, #2
    1048:	2057      	movs	r0, #87	; 0x57
    104a:	4b17      	ldr	r3, [pc, #92]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
    104c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    104e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1052:	2057      	movs	r0, #87	; 0x57
    1054:	4b15      	ldr	r3, [pc, #84]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    1056:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1058:	2101      	movs	r1, #1
    105a:	2028      	movs	r0, #40	; 0x28
    105c:	4b11      	ldr	r3, [pc, #68]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
    105e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1060:	2100      	movs	r1, #0
    1062:	2028      	movs	r0, #40	; 0x28
    1064:	4b10      	ldr	r3, [pc, #64]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
    1066:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1068:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    106c:	2028      	movs	r0, #40	; 0x28
    106e:	4b0f      	ldr	r3, [pc, #60]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    1070:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1072:	2101      	movs	r1, #1
    1074:	2029      	movs	r0, #41	; 0x29
    1076:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <EXTERNAL_IRQ_0_init+0xfc>)
    1078:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    107a:	2100      	movs	r1, #0
    107c:	2029      	movs	r0, #41	; 0x29
    107e:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <EXTERNAL_IRQ_0_init+0x100>)
    1080:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1082:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1086:	2029      	movs	r0, #41	; 0x29
    1088:	4b08      	ldr	r3, [pc, #32]	; (10ac <EXTERNAL_IRQ_0_init+0x104>)
    108a:	4798      	blx	r3

	ext_irq_init();
    108c:	4b08      	ldr	r3, [pc, #32]	; (10b0 <EXTERNAL_IRQ_0_init+0x108>)
    108e:	4798      	blx	r3
}
    1090:	bf00      	nop
    1092:	bd80      	pop	{r7, pc}
    1094:	40001c00 	.word	0x40001c00
    1098:	00000659 	.word	0x00000659
    109c:	40000800 	.word	0x40000800
    10a0:	0000073f 	.word	0x0000073f
    10a4:	00000ead 	.word	0x00000ead
    10a8:	00000e59 	.word	0x00000e59
    10ac:	00000e8d 	.word	0x00000e8d
    10b0:	00001db9 	.word	0x00001db9

000010b4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10b8:	2244      	movs	r2, #68	; 0x44
    10ba:	210b      	movs	r1, #11
    10bc:	4807      	ldr	r0, [pc, #28]	; (10dc <EVENT_SYSTEM_0_init+0x28>)
    10be:	4b08      	ldr	r3, [pc, #32]	; (10e0 <EVENT_SYSTEM_0_init+0x2c>)
    10c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10c2:	2244      	movs	r2, #68	; 0x44
    10c4:	210c      	movs	r1, #12
    10c6:	4805      	ldr	r0, [pc, #20]	; (10dc <EVENT_SYSTEM_0_init+0x28>)
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <EVENT_SYSTEM_0_init+0x2c>)
    10ca:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    10cc:	4805      	ldr	r0, [pc, #20]	; (10e4 <EVENT_SYSTEM_0_init+0x30>)
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <EVENT_SYSTEM_0_init+0x34>)
    10d0:	4798      	blx	r3

	event_system_init();
    10d2:	4b06      	ldr	r3, [pc, #24]	; (10ec <EVENT_SYSTEM_0_init+0x38>)
    10d4:	4798      	blx	r3
}
    10d6:	bf00      	nop
    10d8:	bd80      	pop	{r7, pc}
    10da:	bf00      	nop
    10dc:	40001c00 	.word	0x40001c00
    10e0:	00000659 	.word	0x00000659
    10e4:	40000800 	.word	0x40000800
    10e8:	000007df 	.word	0x000007df
    10ec:	00001da5 	.word	0x00001da5

000010f0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    10f0:	b580      	push	{r7, lr}
    10f2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    10f4:	2101      	movs	r1, #1
    10f6:	202b      	movs	r0, #43	; 0x2b
    10f8:	4b2b      	ldr	r3, [pc, #172]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    10fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    10fc:	2100      	movs	r1, #0
    10fe:	202b      	movs	r0, #43	; 0x2b
    1100:	4b2a      	ldr	r3, [pc, #168]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    1102:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1104:	492a      	ldr	r1, [pc, #168]	; (11b0 <QSPI_N25Q256_PORT_init+0xc0>)
    1106:	202b      	movs	r0, #43	; 0x2b
    1108:	4b2a      	ldr	r3, [pc, #168]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    110a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    110c:	2102      	movs	r1, #2
    110e:	2008      	movs	r0, #8
    1110:	4b25      	ldr	r3, [pc, #148]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    1112:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1114:	2100      	movs	r1, #0
    1116:	2008      	movs	r0, #8
    1118:	4b27      	ldr	r3, [pc, #156]	; (11b8 <QSPI_N25Q256_PORT_init+0xc8>)
    111a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    111c:	2100      	movs	r1, #0
    111e:	2008      	movs	r0, #8
    1120:	4b22      	ldr	r3, [pc, #136]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    1122:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1124:	4925      	ldr	r1, [pc, #148]	; (11bc <QSPI_N25Q256_PORT_init+0xcc>)
    1126:	2008      	movs	r0, #8
    1128:	4b22      	ldr	r3, [pc, #136]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    112a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    112c:	2102      	movs	r1, #2
    112e:	2009      	movs	r0, #9
    1130:	4b1d      	ldr	r3, [pc, #116]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    1132:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1134:	2100      	movs	r1, #0
    1136:	2009      	movs	r0, #9
    1138:	4b1f      	ldr	r3, [pc, #124]	; (11b8 <QSPI_N25Q256_PORT_init+0xc8>)
    113a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    113c:	2100      	movs	r1, #0
    113e:	2009      	movs	r0, #9
    1140:	4b1a      	ldr	r3, [pc, #104]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    1142:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1144:	491e      	ldr	r1, [pc, #120]	; (11c0 <QSPI_N25Q256_PORT_init+0xd0>)
    1146:	2009      	movs	r0, #9
    1148:	4b1a      	ldr	r3, [pc, #104]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    114a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    114c:	2102      	movs	r1, #2
    114e:	200a      	movs	r0, #10
    1150:	4b15      	ldr	r3, [pc, #84]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    1152:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1154:	2100      	movs	r1, #0
    1156:	200a      	movs	r0, #10
    1158:	4b17      	ldr	r3, [pc, #92]	; (11b8 <QSPI_N25Q256_PORT_init+0xc8>)
    115a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    115c:	2100      	movs	r1, #0
    115e:	200a      	movs	r0, #10
    1160:	4b12      	ldr	r3, [pc, #72]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    1162:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1164:	4917      	ldr	r1, [pc, #92]	; (11c4 <QSPI_N25Q256_PORT_init+0xd4>)
    1166:	200a      	movs	r0, #10
    1168:	4b12      	ldr	r3, [pc, #72]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    116a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    116c:	2102      	movs	r1, #2
    116e:	200b      	movs	r0, #11
    1170:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    1172:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1174:	2100      	movs	r1, #0
    1176:	200b      	movs	r0, #11
    1178:	4b0f      	ldr	r3, [pc, #60]	; (11b8 <QSPI_N25Q256_PORT_init+0xc8>)
    117a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    117c:	2100      	movs	r1, #0
    117e:	200b      	movs	r0, #11
    1180:	4b0a      	ldr	r3, [pc, #40]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    1182:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1184:	4910      	ldr	r1, [pc, #64]	; (11c8 <QSPI_N25Q256_PORT_init+0xd8>)
    1186:	200b      	movs	r0, #11
    1188:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    118a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    118c:	2101      	movs	r1, #1
    118e:	202a      	movs	r0, #42	; 0x2a
    1190:	4b05      	ldr	r3, [pc, #20]	; (11a8 <QSPI_N25Q256_PORT_init+0xb8>)
    1192:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1194:	2100      	movs	r1, #0
    1196:	202a      	movs	r0, #42	; 0x2a
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <QSPI_N25Q256_PORT_init+0xbc>)
    119a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    119c:	490b      	ldr	r1, [pc, #44]	; (11cc <QSPI_N25Q256_PORT_init+0xdc>)
    119e:	202a      	movs	r0, #42	; 0x2a
    11a0:	4b04      	ldr	r3, [pc, #16]	; (11b4 <QSPI_N25Q256_PORT_init+0xc4>)
    11a2:	4798      	blx	r3
}
    11a4:	bf00      	nop
    11a6:	bd80      	pop	{r7, pc}
    11a8:	00000ead 	.word	0x00000ead
    11ac:	00000e59 	.word	0x00000e59
    11b0:	002b0007 	.word	0x002b0007
    11b4:	00000e8d 	.word	0x00000e8d
    11b8:	00000ee5 	.word	0x00000ee5
    11bc:	00080007 	.word	0x00080007
    11c0:	00090007 	.word	0x00090007
    11c4:	000a0007 	.word	0x000a0007
    11c8:	000b0007 	.word	0x000b0007
    11cc:	002a0007 	.word	0x002a0007

000011d0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    11d0:	b580      	push	{r7, lr}
    11d2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    11d4:	4805      	ldr	r0, [pc, #20]	; (11ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    11d6:	4b06      	ldr	r3, [pc, #24]	; (11f0 <QSPI_N25Q256_CLOCK_init+0x20>)
    11d8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    11da:	4804      	ldr	r0, [pc, #16]	; (11ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    11dc:	4b05      	ldr	r3, [pc, #20]	; (11f4 <QSPI_N25Q256_CLOCK_init+0x24>)
    11de:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    11e0:	4802      	ldr	r0, [pc, #8]	; (11ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    11e2:	4b05      	ldr	r3, [pc, #20]	; (11f8 <QSPI_N25Q256_CLOCK_init+0x28>)
    11e4:	4798      	blx	r3
}
    11e6:	bf00      	nop
    11e8:	bd80      	pop	{r7, pc}
    11ea:	bf00      	nop
    11ec:	40000800 	.word	0x40000800
    11f0:	0000069f 	.word	0x0000069f
    11f4:	000006df 	.word	0x000006df
    11f8:	0000089f 	.word	0x0000089f

000011fc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    11fc:	b580      	push	{r7, lr}
    11fe:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <QSPI_N25Q256_init+0x18>)
    1202:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1204:	4904      	ldr	r1, [pc, #16]	; (1218 <QSPI_N25Q256_init+0x1c>)
    1206:	4805      	ldr	r0, [pc, #20]	; (121c <QSPI_N25Q256_init+0x20>)
    1208:	4b05      	ldr	r3, [pc, #20]	; (1220 <QSPI_N25Q256_init+0x24>)
    120a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <QSPI_N25Q256_init+0x28>)
    120e:	4798      	blx	r3
}
    1210:	bf00      	nop
    1212:	bd80      	pop	{r7, pc}
    1214:	000011d1 	.word	0x000011d1
    1218:	42003400 	.word	0x42003400
    121c:	2000108c 	.word	0x2000108c
    1220:	0000242d 	.word	0x0000242d
    1224:	000010f1 	.word	0x000010f1

00001228 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    122c:	4802      	ldr	r0, [pc, #8]	; (1238 <DATETIME_CLOCK_CLOCK_init+0x10>)
    122e:	4b03      	ldr	r3, [pc, #12]	; (123c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1230:	4798      	blx	r3
}
    1232:	bf00      	nop
    1234:	bd80      	pop	{r7, pc}
    1236:	bf00      	nop
    1238:	40000800 	.word	0x40000800
    123c:	0000071f 	.word	0x0000071f

00001240 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1240:	b580      	push	{r7, lr}
    1242:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1244:	4b03      	ldr	r3, [pc, #12]	; (1254 <DATETIME_CLOCK_init+0x14>)
    1246:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1248:	4903      	ldr	r1, [pc, #12]	; (1258 <DATETIME_CLOCK_init+0x18>)
    124a:	4804      	ldr	r0, [pc, #16]	; (125c <DATETIME_CLOCK_init+0x1c>)
    124c:	4b04      	ldr	r3, [pc, #16]	; (1260 <DATETIME_CLOCK_init+0x20>)
    124e:	4798      	blx	r3
}
    1250:	bf00      	nop
    1252:	bd80      	pop	{r7, pc}
    1254:	00001229 	.word	0x00001229
    1258:	40002400 	.word	0x40002400
    125c:	200011f4 	.word	0x200011f4
    1260:	00001b95 	.word	0x00001b95

00001264 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1268:	2100      	movs	r1, #0
    126a:	2010      	movs	r0, #16
    126c:	4b07      	ldr	r3, [pc, #28]	; (128c <I2C_SHARED_PORT_init+0x28>)
    126e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1270:	4907      	ldr	r1, [pc, #28]	; (1290 <I2C_SHARED_PORT_init+0x2c>)
    1272:	2010      	movs	r0, #16
    1274:	4b07      	ldr	r3, [pc, #28]	; (1294 <I2C_SHARED_PORT_init+0x30>)
    1276:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1278:	2100      	movs	r1, #0
    127a:	2011      	movs	r0, #17
    127c:	4b03      	ldr	r3, [pc, #12]	; (128c <I2C_SHARED_PORT_init+0x28>)
    127e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1280:	4905      	ldr	r1, [pc, #20]	; (1298 <I2C_SHARED_PORT_init+0x34>)
    1282:	2011      	movs	r0, #17
    1284:	4b03      	ldr	r3, [pc, #12]	; (1294 <I2C_SHARED_PORT_init+0x30>)
    1286:	4798      	blx	r3
}
    1288:	bf00      	nop
    128a:	bd80      	pop	{r7, pc}
    128c:	00000e59 	.word	0x00000e59
    1290:	00100002 	.word	0x00100002
    1294:	00000e8d 	.word	0x00000e8d
    1298:	00110002 	.word	0x00110002

0000129c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    129c:	b580      	push	{r7, lr}
    129e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12a0:	2245      	movs	r2, #69	; 0x45
    12a2:	2108      	movs	r1, #8
    12a4:	4806      	ldr	r0, [pc, #24]	; (12c0 <I2C_SHARED_CLOCK_init+0x24>)
    12a6:	4b07      	ldr	r3, [pc, #28]	; (12c4 <I2C_SHARED_CLOCK_init+0x28>)
    12a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12aa:	224a      	movs	r2, #74	; 0x4a
    12ac:	2103      	movs	r1, #3
    12ae:	4804      	ldr	r0, [pc, #16]	; (12c0 <I2C_SHARED_CLOCK_init+0x24>)
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <I2C_SHARED_CLOCK_init+0x28>)
    12b2:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    12b4:	4804      	ldr	r0, [pc, #16]	; (12c8 <I2C_SHARED_CLOCK_init+0x2c>)
    12b6:	4b05      	ldr	r3, [pc, #20]	; (12cc <I2C_SHARED_CLOCK_init+0x30>)
    12b8:	4798      	blx	r3
}
    12ba:	bf00      	nop
    12bc:	bd80      	pop	{r7, pc}
    12be:	bf00      	nop
    12c0:	40001c00 	.word	0x40001c00
    12c4:	00000659 	.word	0x00000659
    12c8:	40000800 	.word	0x40000800
    12cc:	0000075f 	.word	0x0000075f

000012d0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    12d0:	b580      	push	{r7, lr}
    12d2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    12d4:	4b04      	ldr	r3, [pc, #16]	; (12e8 <I2C_SHARED_init+0x18>)
    12d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    12d8:	4904      	ldr	r1, [pc, #16]	; (12ec <I2C_SHARED_init+0x1c>)
    12da:	4805      	ldr	r0, [pc, #20]	; (12f0 <I2C_SHARED_init+0x20>)
    12dc:	4b05      	ldr	r3, [pc, #20]	; (12f4 <I2C_SHARED_init+0x24>)
    12de:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <I2C_SHARED_init+0x28>)
    12e2:	4798      	blx	r3
}
    12e4:	bf00      	nop
    12e6:	bd80      	pop	{r7, pc}
    12e8:	0000129d 	.word	0x0000129d
    12ec:	40003400 	.word	0x40003400
    12f0:	20001174 	.word	0x20001174
    12f4:	00002251 	.word	0x00002251
    12f8:	00001265 	.word	0x00001265

000012fc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1300:	2100      	movs	r1, #0
    1302:	203b      	movs	r0, #59	; 0x3b
    1304:	4b11      	ldr	r3, [pc, #68]	; (134c <SPI_TEMP_PORT_init+0x50>)
    1306:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1308:	2102      	movs	r1, #2
    130a:	203b      	movs	r0, #59	; 0x3b
    130c:	4b10      	ldr	r3, [pc, #64]	; (1350 <SPI_TEMP_PORT_init+0x54>)
    130e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1310:	4910      	ldr	r1, [pc, #64]	; (1354 <SPI_TEMP_PORT_init+0x58>)
    1312:	203b      	movs	r0, #59	; 0x3b
    1314:	4b10      	ldr	r3, [pc, #64]	; (1358 <SPI_TEMP_PORT_init+0x5c>)
    1316:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1318:	2100      	movs	r1, #0
    131a:	203a      	movs	r0, #58	; 0x3a
    131c:	4b0b      	ldr	r3, [pc, #44]	; (134c <SPI_TEMP_PORT_init+0x50>)
    131e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1320:	2102      	movs	r1, #2
    1322:	203a      	movs	r0, #58	; 0x3a
    1324:	4b0a      	ldr	r3, [pc, #40]	; (1350 <SPI_TEMP_PORT_init+0x54>)
    1326:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1328:	490c      	ldr	r1, [pc, #48]	; (135c <SPI_TEMP_PORT_init+0x60>)
    132a:	203a      	movs	r0, #58	; 0x3a
    132c:	4b0a      	ldr	r3, [pc, #40]	; (1358 <SPI_TEMP_PORT_init+0x5c>)
    132e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1330:	2101      	movs	r1, #1
    1332:	203c      	movs	r0, #60	; 0x3c
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <SPI_TEMP_PORT_init+0x54>)
    1336:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1338:	2100      	movs	r1, #0
    133a:	203c      	movs	r0, #60	; 0x3c
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <SPI_TEMP_PORT_init+0x64>)
    133e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1340:	4908      	ldr	r1, [pc, #32]	; (1364 <SPI_TEMP_PORT_init+0x68>)
    1342:	203c      	movs	r0, #60	; 0x3c
    1344:	4b04      	ldr	r3, [pc, #16]	; (1358 <SPI_TEMP_PORT_init+0x5c>)
    1346:	4798      	blx	r3
}
    1348:	bf00      	nop
    134a:	bd80      	pop	{r7, pc}
    134c:	00000ee5 	.word	0x00000ee5
    1350:	00000ead 	.word	0x00000ead
    1354:	003b0003 	.word	0x003b0003
    1358:	00000e8d 	.word	0x00000e8d
    135c:	003a0003 	.word	0x003a0003
    1360:	00000e59 	.word	0x00000e59
    1364:	003c0003 	.word	0x003c0003

00001368 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1368:	b580      	push	{r7, lr}
    136a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    136c:	2245      	movs	r2, #69	; 0x45
    136e:	2122      	movs	r1, #34	; 0x22
    1370:	4806      	ldr	r0, [pc, #24]	; (138c <SPI_TEMP_CLOCK_init+0x24>)
    1372:	4b07      	ldr	r3, [pc, #28]	; (1390 <SPI_TEMP_CLOCK_init+0x28>)
    1374:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1376:	224a      	movs	r2, #74	; 0x4a
    1378:	2103      	movs	r1, #3
    137a:	4804      	ldr	r0, [pc, #16]	; (138c <SPI_TEMP_CLOCK_init+0x24>)
    137c:	4b04      	ldr	r3, [pc, #16]	; (1390 <SPI_TEMP_CLOCK_init+0x28>)
    137e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1380:	4804      	ldr	r0, [pc, #16]	; (1394 <SPI_TEMP_CLOCK_init+0x2c>)
    1382:	4b05      	ldr	r3, [pc, #20]	; (1398 <SPI_TEMP_CLOCK_init+0x30>)
    1384:	4798      	blx	r3
}
    1386:	bf00      	nop
    1388:	bd80      	pop	{r7, pc}
    138a:	bf00      	nop
    138c:	40001c00 	.word	0x40001c00
    1390:	00000659 	.word	0x00000659
    1394:	40000800 	.word	0x40000800
    1398:	000008bf 	.word	0x000008bf

0000139c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    139c:	b580      	push	{r7, lr}
    139e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    13a0:	4b05      	ldr	r3, [pc, #20]	; (13b8 <SPI_TEMP_init+0x1c>)
    13a2:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    13a4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    13a8:	4804      	ldr	r0, [pc, #16]	; (13bc <SPI_TEMP_init+0x20>)
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <SPI_TEMP_init+0x24>)
    13ac:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    13ae:	4b05      	ldr	r3, [pc, #20]	; (13c4 <SPI_TEMP_init+0x28>)
    13b0:	4798      	blx	r3
}
    13b2:	bf00      	nop
    13b4:	bd80      	pop	{r7, pc}
    13b6:	bf00      	nop
    13b8:	00001369 	.word	0x00001369
    13bc:	20001054 	.word	0x20001054
    13c0:	0000253d 	.word	0x0000253d
    13c4:	000012fd 	.word	0x000012fd

000013c8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    13c8:	b580      	push	{r7, lr}
    13ca:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    13cc:	2100      	movs	r1, #0
    13ce:	2017      	movs	r0, #23
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <I2C_EXPANDER_PORT_init+0x28>)
    13d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    13d4:	4907      	ldr	r1, [pc, #28]	; (13f4 <I2C_EXPANDER_PORT_init+0x2c>)
    13d6:	2017      	movs	r0, #23
    13d8:	4b07      	ldr	r3, [pc, #28]	; (13f8 <I2C_EXPANDER_PORT_init+0x30>)
    13da:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    13dc:	2100      	movs	r1, #0
    13de:	2016      	movs	r0, #22
    13e0:	4b03      	ldr	r3, [pc, #12]	; (13f0 <I2C_EXPANDER_PORT_init+0x28>)
    13e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    13e4:	4905      	ldr	r1, [pc, #20]	; (13fc <I2C_EXPANDER_PORT_init+0x34>)
    13e6:	2016      	movs	r0, #22
    13e8:	4b03      	ldr	r3, [pc, #12]	; (13f8 <I2C_EXPANDER_PORT_init+0x30>)
    13ea:	4798      	blx	r3
}
    13ec:	bf00      	nop
    13ee:	bd80      	pop	{r7, pc}
    13f0:	00000e59 	.word	0x00000e59
    13f4:	00170003 	.word	0x00170003
    13f8:	00000e8d 	.word	0x00000e8d
    13fc:	00160003 	.word	0x00160003

00001400 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1400:	b580      	push	{r7, lr}
    1402:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1404:	2244      	movs	r2, #68	; 0x44
    1406:	2123      	movs	r1, #35	; 0x23
    1408:	4806      	ldr	r0, [pc, #24]	; (1424 <I2C_EXPANDER_CLOCK_init+0x24>)
    140a:	4b07      	ldr	r3, [pc, #28]	; (1428 <I2C_EXPANDER_CLOCK_init+0x28>)
    140c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    140e:	224a      	movs	r2, #74	; 0x4a
    1410:	2103      	movs	r1, #3
    1412:	4804      	ldr	r0, [pc, #16]	; (1424 <I2C_EXPANDER_CLOCK_init+0x24>)
    1414:	4b04      	ldr	r3, [pc, #16]	; (1428 <I2C_EXPANDER_CLOCK_init+0x28>)
    1416:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1418:	4804      	ldr	r0, [pc, #16]	; (142c <I2C_EXPANDER_CLOCK_init+0x2c>)
    141a:	4b05      	ldr	r3, [pc, #20]	; (1430 <I2C_EXPANDER_CLOCK_init+0x30>)
    141c:	4798      	blx	r3
}
    141e:	bf00      	nop
    1420:	bd80      	pop	{r7, pc}
    1422:	bf00      	nop
    1424:	40001c00 	.word	0x40001c00
    1428:	00000659 	.word	0x00000659
    142c:	40000800 	.word	0x40000800
    1430:	000008df 	.word	0x000008df

00001434 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1438:	4b04      	ldr	r3, [pc, #16]	; (144c <I2C_EXPANDER_init+0x18>)
    143a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    143c:	4904      	ldr	r1, [pc, #16]	; (1450 <I2C_EXPANDER_init+0x1c>)
    143e:	4805      	ldr	r0, [pc, #20]	; (1454 <I2C_EXPANDER_init+0x20>)
    1440:	4b05      	ldr	r3, [pc, #20]	; (1458 <I2C_EXPANDER_init+0x24>)
    1442:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1444:	4b05      	ldr	r3, [pc, #20]	; (145c <I2C_EXPANDER_init+0x28>)
    1446:	4798      	blx	r3
}
    1448:	bf00      	nop
    144a:	bd80      	pop	{r7, pc}
    144c:	00001401 	.word	0x00001401
    1450:	43000400 	.word	0x43000400
    1454:	20001154 	.word	0x20001154
    1458:	00002251 	.word	0x00002251
    145c:	000013c9 	.word	0x000013c9

00001460 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1460:	b580      	push	{r7, lr}
    1462:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1464:	2100      	movs	r1, #0
    1466:	2044      	movs	r0, #68	; 0x44
    1468:	4b11      	ldr	r3, [pc, #68]	; (14b0 <SPI_HI3593_PORT_init+0x50>)
    146a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    146c:	2102      	movs	r1, #2
    146e:	2044      	movs	r0, #68	; 0x44
    1470:	4b10      	ldr	r3, [pc, #64]	; (14b4 <SPI_HI3593_PORT_init+0x54>)
    1472:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1474:	4910      	ldr	r1, [pc, #64]	; (14b8 <SPI_HI3593_PORT_init+0x58>)
    1476:	2044      	movs	r0, #68	; 0x44
    1478:	4b10      	ldr	r3, [pc, #64]	; (14bc <SPI_HI3593_PORT_init+0x5c>)
    147a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    147c:	2100      	movs	r1, #0
    147e:	2045      	movs	r0, #69	; 0x45
    1480:	4b0b      	ldr	r3, [pc, #44]	; (14b0 <SPI_HI3593_PORT_init+0x50>)
    1482:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1484:	2102      	movs	r1, #2
    1486:	2045      	movs	r0, #69	; 0x45
    1488:	4b0a      	ldr	r3, [pc, #40]	; (14b4 <SPI_HI3593_PORT_init+0x54>)
    148a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    148c:	490c      	ldr	r1, [pc, #48]	; (14c0 <SPI_HI3593_PORT_init+0x60>)
    148e:	2045      	movs	r0, #69	; 0x45
    1490:	4b0a      	ldr	r3, [pc, #40]	; (14bc <SPI_HI3593_PORT_init+0x5c>)
    1492:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1494:	2101      	movs	r1, #1
    1496:	2047      	movs	r0, #71	; 0x47
    1498:	4b06      	ldr	r3, [pc, #24]	; (14b4 <SPI_HI3593_PORT_init+0x54>)
    149a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    149c:	2100      	movs	r1, #0
    149e:	2047      	movs	r0, #71	; 0x47
    14a0:	4b08      	ldr	r3, [pc, #32]	; (14c4 <SPI_HI3593_PORT_init+0x64>)
    14a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    14a4:	4908      	ldr	r1, [pc, #32]	; (14c8 <SPI_HI3593_PORT_init+0x68>)
    14a6:	2047      	movs	r0, #71	; 0x47
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <SPI_HI3593_PORT_init+0x5c>)
    14aa:	4798      	blx	r3
}
    14ac:	bf00      	nop
    14ae:	bd80      	pop	{r7, pc}
    14b0:	00000ee5 	.word	0x00000ee5
    14b4:	00000ead 	.word	0x00000ead
    14b8:	00440002 	.word	0x00440002
    14bc:	00000e8d 	.word	0x00000e8d
    14c0:	00450002 	.word	0x00450002
    14c4:	00000e59 	.word	0x00000e59
    14c8:	00470002 	.word	0x00470002

000014cc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    14cc:	b580      	push	{r7, lr}
    14ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14d0:	2242      	movs	r2, #66	; 0x42
    14d2:	2124      	movs	r1, #36	; 0x24
    14d4:	4806      	ldr	r0, [pc, #24]	; (14f0 <SPI_HI3593_CLOCK_init+0x24>)
    14d6:	4b07      	ldr	r3, [pc, #28]	; (14f4 <SPI_HI3593_CLOCK_init+0x28>)
    14d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14da:	224a      	movs	r2, #74	; 0x4a
    14dc:	2103      	movs	r1, #3
    14de:	4804      	ldr	r0, [pc, #16]	; (14f0 <SPI_HI3593_CLOCK_init+0x24>)
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <SPI_HI3593_CLOCK_init+0x28>)
    14e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    14e4:	4804      	ldr	r0, [pc, #16]	; (14f8 <SPI_HI3593_CLOCK_init+0x2c>)
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <SPI_HI3593_CLOCK_init+0x30>)
    14e8:	4798      	blx	r3
}
    14ea:	bf00      	nop
    14ec:	bd80      	pop	{r7, pc}
    14ee:	bf00      	nop
    14f0:	40001c00 	.word	0x40001c00
    14f4:	00000659 	.word	0x00000659
    14f8:	40000800 	.word	0x40000800
    14fc:	000008ff 	.word	0x000008ff

00001500 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1500:	b580      	push	{r7, lr}
    1502:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <SPI_HI3593_init+0x18>)
    1506:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1508:	4904      	ldr	r1, [pc, #16]	; (151c <SPI_HI3593_init+0x1c>)
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <SPI_HI3593_init+0x20>)
    150c:	4b05      	ldr	r3, [pc, #20]	; (1524 <SPI_HI3593_init+0x24>)
    150e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <SPI_HI3593_init+0x28>)
    1512:	4798      	blx	r3
}
    1514:	bf00      	nop
    1516:	bd80      	pop	{r7, pc}
    1518:	000014cd 	.word	0x000014cd
    151c:	43000800 	.word	0x43000800
    1520:	2000103c 	.word	0x2000103c
    1524:	0000253d 	.word	0x0000253d
    1528:	00001461 	.word	0x00001461

0000152c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    152c:	b580      	push	{r7, lr}
    152e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1530:	2100      	movs	r1, #0
    1532:	2068      	movs	r0, #104	; 0x68
    1534:	4b07      	ldr	r3, [pc, #28]	; (1554 <I2C_EEPROM_PORT_init+0x28>)
    1536:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1538:	4907      	ldr	r1, [pc, #28]	; (1558 <I2C_EEPROM_PORT_init+0x2c>)
    153a:	2068      	movs	r0, #104	; 0x68
    153c:	4b07      	ldr	r3, [pc, #28]	; (155c <I2C_EEPROM_PORT_init+0x30>)
    153e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1540:	2100      	movs	r1, #0
    1542:	2069      	movs	r0, #105	; 0x69
    1544:	4b03      	ldr	r3, [pc, #12]	; (1554 <I2C_EEPROM_PORT_init+0x28>)
    1546:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1548:	4905      	ldr	r1, [pc, #20]	; (1560 <I2C_EEPROM_PORT_init+0x34>)
    154a:	2069      	movs	r0, #105	; 0x69
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <I2C_EEPROM_PORT_init+0x30>)
    154e:	4798      	blx	r3
}
    1550:	bf00      	nop
    1552:	bd80      	pop	{r7, pc}
    1554:	00000e59 	.word	0x00000e59
    1558:	00680002 	.word	0x00680002
    155c:	00000e8d 	.word	0x00000e8d
    1560:	00690002 	.word	0x00690002

00001564 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1564:	b580      	push	{r7, lr}
    1566:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1568:	2248      	movs	r2, #72	; 0x48
    156a:	2125      	movs	r1, #37	; 0x25
    156c:	4806      	ldr	r0, [pc, #24]	; (1588 <I2C_EEPROM_CLOCK_init+0x24>)
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <I2C_EEPROM_CLOCK_init+0x28>)
    1570:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1572:	224a      	movs	r2, #74	; 0x4a
    1574:	2103      	movs	r1, #3
    1576:	4804      	ldr	r0, [pc, #16]	; (1588 <I2C_EEPROM_CLOCK_init+0x24>)
    1578:	4b04      	ldr	r3, [pc, #16]	; (158c <I2C_EEPROM_CLOCK_init+0x28>)
    157a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    157c:	4804      	ldr	r0, [pc, #16]	; (1590 <I2C_EEPROM_CLOCK_init+0x2c>)
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <I2C_EEPROM_CLOCK_init+0x30>)
    1580:	4798      	blx	r3
}
    1582:	bf00      	nop
    1584:	bd80      	pop	{r7, pc}
    1586:	bf00      	nop
    1588:	40001c00 	.word	0x40001c00
    158c:	00000659 	.word	0x00000659
    1590:	40000800 	.word	0x40000800
    1594:	0000091f 	.word	0x0000091f

00001598 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1598:	b580      	push	{r7, lr}
    159a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    159c:	4b04      	ldr	r3, [pc, #16]	; (15b0 <I2C_EEPROM_init+0x18>)
    159e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    15a0:	4904      	ldr	r1, [pc, #16]	; (15b4 <I2C_EEPROM_init+0x1c>)
    15a2:	4805      	ldr	r0, [pc, #20]	; (15b8 <I2C_EEPROM_init+0x20>)
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <I2C_EEPROM_init+0x24>)
    15a6:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    15a8:	4b05      	ldr	r3, [pc, #20]	; (15c0 <I2C_EEPROM_init+0x28>)
    15aa:	4798      	blx	r3
}
    15ac:	bf00      	nop
    15ae:	bd80      	pop	{r7, pc}
    15b0:	00001565 	.word	0x00001565
    15b4:	43000c00 	.word	0x43000c00
    15b8:	200011b4 	.word	0x200011b4
    15bc:	0000211d 	.word	0x0000211d
    15c0:	0000152d 	.word	0x0000152d

000015c4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    15c4:	b580      	push	{r7, lr}
    15c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    15c8:	4808      	ldr	r0, [pc, #32]	; (15ec <TIMER_USB_init+0x28>)
    15ca:	4b09      	ldr	r3, [pc, #36]	; (15f0 <TIMER_USB_init+0x2c>)
    15cc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15ce:	2243      	movs	r2, #67	; 0x43
    15d0:	2109      	movs	r1, #9
    15d2:	4808      	ldr	r0, [pc, #32]	; (15f4 <TIMER_USB_init+0x30>)
    15d4:	4b08      	ldr	r3, [pc, #32]	; (15f8 <TIMER_USB_init+0x34>)
    15d6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    15d8:	4b08      	ldr	r3, [pc, #32]	; (15fc <TIMER_USB_init+0x38>)
    15da:	4798      	blx	r3
    15dc:	4603      	mov	r3, r0
    15de:	461a      	mov	r2, r3
    15e0:	4907      	ldr	r1, [pc, #28]	; (1600 <TIMER_USB_init+0x3c>)
    15e2:	4808      	ldr	r0, [pc, #32]	; (1604 <TIMER_USB_init+0x40>)
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <TIMER_USB_init+0x44>)
    15e6:	4798      	blx	r3
}
    15e8:	bf00      	nop
    15ea:	bd80      	pop	{r7, pc}
    15ec:	40000800 	.word	0x40000800
    15f0:	0000077f 	.word	0x0000077f
    15f4:	40001c00 	.word	0x40001c00
    15f8:	00000659 	.word	0x00000659
    15fc:	000083fd 	.word	0x000083fd
    1600:	40003800 	.word	0x40003800
    1604:	20001134 	.word	0x20001134
    1608:	0000270d 	.word	0x0000270d

0000160c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    160c:	b580      	push	{r7, lr}
    160e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1610:	4808      	ldr	r0, [pc, #32]	; (1634 <TIMER_ARINC_init+0x28>)
    1612:	4b09      	ldr	r3, [pc, #36]	; (1638 <TIMER_ARINC_init+0x2c>)
    1614:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1616:	2244      	movs	r2, #68	; 0x44
    1618:	211a      	movs	r1, #26
    161a:	4808      	ldr	r0, [pc, #32]	; (163c <TIMER_ARINC_init+0x30>)
    161c:	4b08      	ldr	r3, [pc, #32]	; (1640 <TIMER_ARINC_init+0x34>)
    161e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1620:	4b08      	ldr	r3, [pc, #32]	; (1644 <TIMER_ARINC_init+0x38>)
    1622:	4798      	blx	r3
    1624:	4603      	mov	r3, r0
    1626:	461a      	mov	r2, r3
    1628:	4907      	ldr	r1, [pc, #28]	; (1648 <TIMER_ARINC_init+0x3c>)
    162a:	4808      	ldr	r0, [pc, #32]	; (164c <TIMER_ARINC_init+0x40>)
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <TIMER_ARINC_init+0x44>)
    162e:	4798      	blx	r3
}
    1630:	bf00      	nop
    1632:	bd80      	pop	{r7, pc}
    1634:	40000800 	.word	0x40000800
    1638:	0000083f 	.word	0x0000083f
    163c:	40001c00 	.word	0x40001c00
    1640:	00000659 	.word	0x00000659
    1644:	000083fd 	.word	0x000083fd
    1648:	4101a000 	.word	0x4101a000
    164c:	20001114 	.word	0x20001114
    1650:	0000270d 	.word	0x0000270d

00001654 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1654:	b580      	push	{r7, lr}
    1656:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1658:	4808      	ldr	r0, [pc, #32]	; (167c <TIMER_MAINTENANCE_init+0x28>)
    165a:	4b09      	ldr	r3, [pc, #36]	; (1680 <TIMER_MAINTENANCE_init+0x2c>)
    165c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    165e:	2246      	movs	r2, #70	; 0x46
    1660:	211e      	movs	r1, #30
    1662:	4808      	ldr	r0, [pc, #32]	; (1684 <TIMER_MAINTENANCE_init+0x30>)
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <TIMER_MAINTENANCE_init+0x34>)
    1666:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1668:	4b08      	ldr	r3, [pc, #32]	; (168c <TIMER_MAINTENANCE_init+0x38>)
    166a:	4798      	blx	r3
    166c:	4603      	mov	r3, r0
    166e:	461a      	mov	r2, r3
    1670:	4907      	ldr	r1, [pc, #28]	; (1690 <TIMER_MAINTENANCE_init+0x3c>)
    1672:	4808      	ldr	r0, [pc, #32]	; (1694 <TIMER_MAINTENANCE_init+0x40>)
    1674:	4b08      	ldr	r3, [pc, #32]	; (1698 <TIMER_MAINTENANCE_init+0x44>)
    1676:	4798      	blx	r3
}
    1678:	bf00      	nop
    167a:	bd80      	pop	{r7, pc}
    167c:	40000800 	.word	0x40000800
    1680:	0000085f 	.word	0x0000085f
    1684:	40001c00 	.word	0x40001c00
    1688:	00000659 	.word	0x00000659
    168c:	000083fd 	.word	0x000083fd
    1690:	42001400 	.word	0x42001400
    1694:	2000106c 	.word	0x2000106c
    1698:	0000270d 	.word	0x0000270d

0000169c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    169c:	b580      	push	{r7, lr}
    169e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    16a0:	4808      	ldr	r0, [pc, #32]	; (16c4 <TIMER_INTERFACE_init+0x28>)
    16a2:	4b09      	ldr	r3, [pc, #36]	; (16c8 <TIMER_INTERFACE_init+0x2c>)
    16a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16a6:	2246      	movs	r2, #70	; 0x46
    16a8:	211e      	movs	r1, #30
    16aa:	4808      	ldr	r0, [pc, #32]	; (16cc <TIMER_INTERFACE_init+0x30>)
    16ac:	4b08      	ldr	r3, [pc, #32]	; (16d0 <TIMER_INTERFACE_init+0x34>)
    16ae:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    16b0:	4b08      	ldr	r3, [pc, #32]	; (16d4 <TIMER_INTERFACE_init+0x38>)
    16b2:	4798      	blx	r3
    16b4:	4603      	mov	r3, r0
    16b6:	461a      	mov	r2, r3
    16b8:	4907      	ldr	r1, [pc, #28]	; (16d8 <TIMER_INTERFACE_init+0x3c>)
    16ba:	4808      	ldr	r0, [pc, #32]	; (16dc <TIMER_INTERFACE_init+0x40>)
    16bc:	4b08      	ldr	r3, [pc, #32]	; (16e0 <TIMER_INTERFACE_init+0x44>)
    16be:	4798      	blx	r3
}
    16c0:	bf00      	nop
    16c2:	bd80      	pop	{r7, pc}
    16c4:	40000800 	.word	0x40000800
    16c8:	0000087f 	.word	0x0000087f
    16cc:	40001c00 	.word	0x40001c00
    16d0:	00000659 	.word	0x00000659
    16d4:	000083fd 	.word	0x000083fd
    16d8:	42001800 	.word	0x42001800
    16dc:	200010b0 	.word	0x200010b0
    16e0:	0000270d 	.word	0x0000270d

000016e4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    16e4:	b580      	push	{r7, lr}
    16e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    16e8:	4808      	ldr	r0, [pc, #32]	; (170c <TIMER_EVENT_init+0x28>)
    16ea:	4b09      	ldr	r3, [pc, #36]	; (1710 <TIMER_EVENT_init+0x2c>)
    16ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ee:	2246      	movs	r2, #70	; 0x46
    16f0:	2127      	movs	r1, #39	; 0x27
    16f2:	4808      	ldr	r0, [pc, #32]	; (1714 <TIMER_EVENT_init+0x30>)
    16f4:	4b08      	ldr	r3, [pc, #32]	; (1718 <TIMER_EVENT_init+0x34>)
    16f6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    16f8:	4b08      	ldr	r3, [pc, #32]	; (171c <TIMER_EVENT_init+0x38>)
    16fa:	4798      	blx	r3
    16fc:	4603      	mov	r3, r0
    16fe:	461a      	mov	r2, r3
    1700:	4907      	ldr	r1, [pc, #28]	; (1720 <TIMER_EVENT_init+0x3c>)
    1702:	4808      	ldr	r0, [pc, #32]	; (1724 <TIMER_EVENT_init+0x40>)
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <TIMER_EVENT_init+0x44>)
    1706:	4798      	blx	r3
}
    1708:	bf00      	nop
    170a:	bd80      	pop	{r7, pc}
    170c:	40000800 	.word	0x40000800
    1710:	0000093f 	.word	0x0000093f
    1714:	40001c00 	.word	0x40001c00
    1718:	00000659 	.word	0x00000659
    171c:	000083fd 	.word	0x000083fd
    1720:	43001400 	.word	0x43001400
    1724:	20001090 	.word	0x20001090
    1728:	0000270d 	.word	0x0000270d

0000172c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1730:	4902      	ldr	r1, [pc, #8]	; (173c <LIVE_PULSE_PORT_init+0x10>)
    1732:	2021      	movs	r0, #33	; 0x21
    1734:	4b02      	ldr	r3, [pc, #8]	; (1740 <LIVE_PULSE_PORT_init+0x14>)
    1736:	4798      	blx	r3
}
    1738:	bf00      	nop
    173a:	bd80      	pop	{r7, pc}
    173c:	00210004 	.word	0x00210004
    1740:	00000e8d 	.word	0x00000e8d

00001744 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1748:	4804      	ldr	r0, [pc, #16]	; (175c <LIVE_PULSE_CLOCK_init+0x18>)
    174a:	4b05      	ldr	r3, [pc, #20]	; (1760 <LIVE_PULSE_CLOCK_init+0x1c>)
    174c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    174e:	2240      	movs	r2, #64	; 0x40
    1750:	2127      	movs	r1, #39	; 0x27
    1752:	4804      	ldr	r0, [pc, #16]	; (1764 <LIVE_PULSE_CLOCK_init+0x20>)
    1754:	4b04      	ldr	r3, [pc, #16]	; (1768 <LIVE_PULSE_CLOCK_init+0x24>)
    1756:	4798      	blx	r3
}
    1758:	bf00      	nop
    175a:	bd80      	pop	{r7, pc}
    175c:	40000800 	.word	0x40000800
    1760:	0000095f 	.word	0x0000095f
    1764:	40001c00 	.word	0x40001c00
    1768:	00000659 	.word	0x00000659

0000176c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    176c:	b580      	push	{r7, lr}
    176e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1770:	4b06      	ldr	r3, [pc, #24]	; (178c <LIVE_PULSE_init+0x20>)
    1772:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1774:	4b06      	ldr	r3, [pc, #24]	; (1790 <LIVE_PULSE_init+0x24>)
    1776:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1778:	4b06      	ldr	r3, [pc, #24]	; (1794 <LIVE_PULSE_init+0x28>)
    177a:	4798      	blx	r3
    177c:	4603      	mov	r3, r0
    177e:	461a      	mov	r2, r3
    1780:	4905      	ldr	r1, [pc, #20]	; (1798 <LIVE_PULSE_init+0x2c>)
    1782:	4806      	ldr	r0, [pc, #24]	; (179c <LIVE_PULSE_init+0x30>)
    1784:	4b06      	ldr	r3, [pc, #24]	; (17a0 <LIVE_PULSE_init+0x34>)
    1786:	4798      	blx	r3
}
    1788:	bf00      	nop
    178a:	bd80      	pop	{r7, pc}
    178c:	00001745 	.word	0x00001745
    1790:	0000172d 	.word	0x0000172d
    1794:	00008411 	.word	0x00008411
    1798:	43001800 	.word	0x43001800
    179c:	200010d0 	.word	0x200010d0
    17a0:	0000232d 	.word	0x0000232d

000017a4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    17a8:	4804      	ldr	r0, [pc, #16]	; (17bc <TIMER_HVAC_CLOCK_init+0x18>)
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <TIMER_HVAC_CLOCK_init+0x1c>)
    17ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ae:	2244      	movs	r2, #68	; 0x44
    17b0:	2119      	movs	r1, #25
    17b2:	4804      	ldr	r0, [pc, #16]	; (17c4 <TIMER_HVAC_CLOCK_init+0x20>)
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <TIMER_HVAC_CLOCK_init+0x24>)
    17b6:	4798      	blx	r3
}
    17b8:	bf00      	nop
    17ba:	bd80      	pop	{r7, pc}
    17bc:	40000800 	.word	0x40000800
    17c0:	000007ff 	.word	0x000007ff
    17c4:	40001c00 	.word	0x40001c00
    17c8:	00000659 	.word	0x00000659

000017cc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    17d0:	4b05      	ldr	r3, [pc, #20]	; (17e8 <TIMER_HVAC_init+0x1c>)
    17d2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    17d4:	4b05      	ldr	r3, [pc, #20]	; (17ec <TIMER_HVAC_init+0x20>)
    17d6:	4798      	blx	r3
    17d8:	4603      	mov	r3, r0
    17da:	461a      	mov	r2, r3
    17dc:	4904      	ldr	r1, [pc, #16]	; (17f0 <TIMER_HVAC_init+0x24>)
    17de:	4805      	ldr	r0, [pc, #20]	; (17f4 <TIMER_HVAC_init+0x28>)
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <TIMER_HVAC_init+0x2c>)
    17e2:	4798      	blx	r3
}
    17e4:	bf00      	nop
    17e6:	bd80      	pop	{r7, pc}
    17e8:	000017a5 	.word	0x000017a5
    17ec:	000077bd 	.word	0x000077bd
    17f0:	41016000 	.word	0x41016000
    17f4:	20001194 	.word	0x20001194
    17f8:	0000270d 	.word	0x0000270d

000017fc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1800:	4804      	ldr	r0, [pc, #16]	; (1814 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1802:	4b05      	ldr	r3, [pc, #20]	; (1818 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1804:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1806:	2244      	movs	r2, #68	; 0x44
    1808:	2119      	movs	r1, #25
    180a:	4804      	ldr	r0, [pc, #16]	; (181c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    180c:	4b04      	ldr	r3, [pc, #16]	; (1820 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    180e:	4798      	blx	r3
}
    1810:	bf00      	nop
    1812:	bd80      	pop	{r7, pc}
    1814:	40000800 	.word	0x40000800
    1818:	0000081f 	.word	0x0000081f
    181c:	40001c00 	.word	0x40001c00
    1820:	00000659 	.word	0x00000659

00001824 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1824:	b580      	push	{r7, lr}
    1826:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1828:	4b05      	ldr	r3, [pc, #20]	; (1840 <TIMER_TEMPERATURES_init+0x1c>)
    182a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    182c:	4b05      	ldr	r3, [pc, #20]	; (1844 <TIMER_TEMPERATURES_init+0x20>)
    182e:	4798      	blx	r3
    1830:	4603      	mov	r3, r0
    1832:	461a      	mov	r2, r3
    1834:	4904      	ldr	r1, [pc, #16]	; (1848 <TIMER_TEMPERATURES_init+0x24>)
    1836:	4805      	ldr	r0, [pc, #20]	; (184c <TIMER_TEMPERATURES_init+0x28>)
    1838:	4b05      	ldr	r3, [pc, #20]	; (1850 <TIMER_TEMPERATURES_init+0x2c>)
    183a:	4798      	blx	r3
}
    183c:	bf00      	nop
    183e:	bd80      	pop	{r7, pc}
    1840:	000017fd 	.word	0x000017fd
    1844:	000077bd 	.word	0x000077bd
    1848:	41018000 	.word	0x41018000
    184c:	2000101c 	.word	0x2000101c
    1850:	0000270d 	.word	0x0000270d

00001854 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1858:	2102      	movs	r1, #2
    185a:	2018      	movs	r0, #24
    185c:	4b0f      	ldr	r3, [pc, #60]	; (189c <CDCUSB_PORT_init+0x48>)
    185e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1860:	2100      	movs	r1, #0
    1862:	2018      	movs	r0, #24
    1864:	4b0e      	ldr	r3, [pc, #56]	; (18a0 <CDCUSB_PORT_init+0x4c>)
    1866:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1868:	2100      	movs	r1, #0
    186a:	2018      	movs	r0, #24
    186c:	4b0d      	ldr	r3, [pc, #52]	; (18a4 <CDCUSB_PORT_init+0x50>)
    186e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1870:	490d      	ldr	r1, [pc, #52]	; (18a8 <CDCUSB_PORT_init+0x54>)
    1872:	2018      	movs	r0, #24
    1874:	4b0d      	ldr	r3, [pc, #52]	; (18ac <CDCUSB_PORT_init+0x58>)
    1876:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1878:	2102      	movs	r1, #2
    187a:	2019      	movs	r0, #25
    187c:	4b07      	ldr	r3, [pc, #28]	; (189c <CDCUSB_PORT_init+0x48>)
    187e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1880:	2100      	movs	r1, #0
    1882:	2019      	movs	r0, #25
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <CDCUSB_PORT_init+0x4c>)
    1886:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1888:	2100      	movs	r1, #0
    188a:	2019      	movs	r0, #25
    188c:	4b05      	ldr	r3, [pc, #20]	; (18a4 <CDCUSB_PORT_init+0x50>)
    188e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1890:	4907      	ldr	r1, [pc, #28]	; (18b0 <CDCUSB_PORT_init+0x5c>)
    1892:	2019      	movs	r0, #25
    1894:	4b05      	ldr	r3, [pc, #20]	; (18ac <CDCUSB_PORT_init+0x58>)
    1896:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1898:	bf00      	nop
    189a:	bd80      	pop	{r7, pc}
    189c:	00000ead 	.word	0x00000ead
    18a0:	00000ee5 	.word	0x00000ee5
    18a4:	00000e59 	.word	0x00000e59
    18a8:	00180007 	.word	0x00180007
    18ac:	00000e8d 	.word	0x00000e8d
    18b0:	00190007 	.word	0x00190007

000018b4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    18b4:	b580      	push	{r7, lr}
    18b6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    18b8:	2242      	movs	r2, #66	; 0x42
    18ba:	210a      	movs	r1, #10
    18bc:	4805      	ldr	r0, [pc, #20]	; (18d4 <CDCUSB_CLOCK_init+0x20>)
    18be:	4b06      	ldr	r3, [pc, #24]	; (18d8 <CDCUSB_CLOCK_init+0x24>)
    18c0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    18c2:	4806      	ldr	r0, [pc, #24]	; (18dc <CDCUSB_CLOCK_init+0x28>)
    18c4:	4b06      	ldr	r3, [pc, #24]	; (18e0 <CDCUSB_CLOCK_init+0x2c>)
    18c6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    18c8:	4804      	ldr	r0, [pc, #16]	; (18dc <CDCUSB_CLOCK_init+0x28>)
    18ca:	4b06      	ldr	r3, [pc, #24]	; (18e4 <CDCUSB_CLOCK_init+0x30>)
    18cc:	4798      	blx	r3
}
    18ce:	bf00      	nop
    18d0:	bd80      	pop	{r7, pc}
    18d2:	bf00      	nop
    18d4:	40001c00 	.word	0x40001c00
    18d8:	00000659 	.word	0x00000659
    18dc:	40000800 	.word	0x40000800
    18e0:	0000067f 	.word	0x0000067f
    18e4:	0000079f 	.word	0x0000079f

000018e8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    18ec:	4b03      	ldr	r3, [pc, #12]	; (18fc <CDCUSB_init+0x14>)
    18ee:	4798      	blx	r3
	usb_d_init();
    18f0:	4b03      	ldr	r3, [pc, #12]	; (1900 <CDCUSB_init+0x18>)
    18f2:	4798      	blx	r3
	CDCUSB_PORT_init();
    18f4:	4b03      	ldr	r3, [pc, #12]	; (1904 <CDCUSB_init+0x1c>)
    18f6:	4798      	blx	r3
}
    18f8:	bf00      	nop
    18fa:	bd80      	pop	{r7, pc}
    18fc:	000018b5 	.word	0x000018b5
    1900:	00002f69 	.word	0x00002f69
    1904:	00001855 	.word	0x00001855

00001908 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1908:	b580      	push	{r7, lr}
    190a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    190c:	4802      	ldr	r0, [pc, #8]	; (1918 <WATCHDOG_CLOCK_init+0x10>)
    190e:	4b03      	ldr	r3, [pc, #12]	; (191c <WATCHDOG_CLOCK_init+0x14>)
    1910:	4798      	blx	r3
}
    1912:	bf00      	nop
    1914:	bd80      	pop	{r7, pc}
    1916:	bf00      	nop
    1918:	40000800 	.word	0x40000800
    191c:	000006ff 	.word	0x000006ff

00001920 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1920:	b580      	push	{r7, lr}
    1922:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1924:	4b03      	ldr	r3, [pc, #12]	; (1934 <WATCHDOG_init+0x14>)
    1926:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1928:	4903      	ldr	r1, [pc, #12]	; (1938 <WATCHDOG_init+0x18>)
    192a:	4804      	ldr	r0, [pc, #16]	; (193c <WATCHDOG_init+0x1c>)
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <WATCHDOG_init+0x20>)
    192e:	4798      	blx	r3
}
    1930:	bf00      	nop
    1932:	bd80      	pop	{r7, pc}
    1934:	00001909 	.word	0x00001909
    1938:	40002000 	.word	0x40002000
    193c:	20001214 	.word	0x20001214
    1940:	00000f2d 	.word	0x00000f2d

00001944 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1944:	b580      	push	{r7, lr}
    1946:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1948:	4904      	ldr	r1, [pc, #16]	; (195c <CAN_CCU_PORT_init+0x18>)
    194a:	202d      	movs	r0, #45	; 0x2d
    194c:	4b04      	ldr	r3, [pc, #16]	; (1960 <CAN_CCU_PORT_init+0x1c>)
    194e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1950:	4904      	ldr	r1, [pc, #16]	; (1964 <CAN_CCU_PORT_init+0x20>)
    1952:	202c      	movs	r0, #44	; 0x2c
    1954:	4b02      	ldr	r3, [pc, #8]	; (1960 <CAN_CCU_PORT_init+0x1c>)
    1956:	4798      	blx	r3
}
    1958:	bf00      	nop
    195a:	bd80      	pop	{r7, pc}
    195c:	002d0007 	.word	0x002d0007
    1960:	00000e8d 	.word	0x00000e8d
    1964:	002c0007 	.word	0x002c0007

00001968 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1968:	b580      	push	{r7, lr}
    196a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    196c:	4807      	ldr	r0, [pc, #28]	; (198c <CAN_CCU_init+0x24>)
    196e:	4b08      	ldr	r3, [pc, #32]	; (1990 <CAN_CCU_init+0x28>)
    1970:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1972:	2243      	movs	r2, #67	; 0x43
    1974:	211c      	movs	r1, #28
    1976:	4807      	ldr	r0, [pc, #28]	; (1994 <CAN_CCU_init+0x2c>)
    1978:	4b07      	ldr	r3, [pc, #28]	; (1998 <CAN_CCU_init+0x30>)
    197a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <CAN_CCU_init+0x34>)
    197e:	4808      	ldr	r0, [pc, #32]	; (19a0 <CAN_CCU_init+0x38>)
    1980:	4b08      	ldr	r3, [pc, #32]	; (19a4 <CAN_CCU_init+0x3c>)
    1982:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1984:	4b08      	ldr	r3, [pc, #32]	; (19a8 <CAN_CCU_init+0x40>)
    1986:	4798      	blx	r3
}
    1988:	bf00      	nop
    198a:	bd80      	pop	{r7, pc}
    198c:	40000800 	.word	0x40000800
    1990:	000006bf 	.word	0x000006bf
    1994:	40001c00 	.word	0x40001c00
    1998:	00000659 	.word	0x00000659
    199c:	42000400 	.word	0x42000400
    19a0:	200010ec 	.word	0x200010ec
    19a4:	00001c05 	.word	0x00001c05
    19a8:	00001945 	.word	0x00001945

000019ac <system_init>:

void system_init(void)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	af00      	add	r7, sp, #0
	init_mcu();
    19b0:	4b5e      	ldr	r3, [pc, #376]	; (1b2c <system_init+0x180>)
    19b2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    19b4:	2100      	movs	r1, #0
    19b6:	2007      	movs	r0, #7
    19b8:	4b5d      	ldr	r3, [pc, #372]	; (1b30 <system_init+0x184>)
    19ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    19bc:	2102      	movs	r1, #2
    19be:	2007      	movs	r0, #7
    19c0:	4b5c      	ldr	r3, [pc, #368]	; (1b34 <system_init+0x188>)
    19c2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    19c4:	f04f 31ff 	mov.w	r1, #4294967295
    19c8:	2007      	movs	r0, #7
    19ca:	4b5b      	ldr	r3, [pc, #364]	; (1b38 <system_init+0x18c>)
    19cc:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    19ce:	2101      	movs	r1, #1
    19d0:	200f      	movs	r0, #15
    19d2:	4b57      	ldr	r3, [pc, #348]	; (1b30 <system_init+0x184>)
    19d4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    19d6:	2102      	movs	r1, #2
    19d8:	200f      	movs	r0, #15
    19da:	4b56      	ldr	r3, [pc, #344]	; (1b34 <system_init+0x188>)
    19dc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    19de:	f04f 31ff 	mov.w	r1, #4294967295
    19e2:	200f      	movs	r0, #15
    19e4:	4b54      	ldr	r3, [pc, #336]	; (1b38 <system_init+0x18c>)
    19e6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    19e8:	2101      	movs	r1, #1
    19ea:	2013      	movs	r0, #19
    19ec:	4b50      	ldr	r3, [pc, #320]	; (1b30 <system_init+0x184>)
    19ee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    19f0:	2102      	movs	r1, #2
    19f2:	2013      	movs	r0, #19
    19f4:	4b4f      	ldr	r3, [pc, #316]	; (1b34 <system_init+0x188>)
    19f6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    19f8:	f04f 31ff 	mov.w	r1, #4294967295
    19fc:	2013      	movs	r0, #19
    19fe:	4b4e      	ldr	r3, [pc, #312]	; (1b38 <system_init+0x18c>)
    1a00:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1a02:	2101      	movs	r1, #1
    1a04:	201b      	movs	r0, #27
    1a06:	4b4a      	ldr	r3, [pc, #296]	; (1b30 <system_init+0x184>)
    1a08:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1a0a:	2102      	movs	r1, #2
    1a0c:	201b      	movs	r0, #27
    1a0e:	4b49      	ldr	r3, [pc, #292]	; (1b34 <system_init+0x188>)
    1a10:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1a12:	f04f 31ff 	mov.w	r1, #4294967295
    1a16:	201b      	movs	r0, #27
    1a18:	4b47      	ldr	r3, [pc, #284]	; (1b38 <system_init+0x18c>)
    1a1a:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1a1c:	2101      	movs	r1, #1
    1a1e:	2027      	movs	r0, #39	; 0x27
    1a20:	4b44      	ldr	r3, [pc, #272]	; (1b34 <system_init+0x188>)
    1a22:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1a24:	2102      	movs	r1, #2
    1a26:	2027      	movs	r0, #39	; 0x27
    1a28:	4b44      	ldr	r3, [pc, #272]	; (1b3c <system_init+0x190>)
    1a2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1a2c:	f04f 31ff 	mov.w	r1, #4294967295
    1a30:	2027      	movs	r0, #39	; 0x27
    1a32:	4b41      	ldr	r3, [pc, #260]	; (1b38 <system_init+0x18c>)
    1a34:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    1a36:	2101      	movs	r1, #1
    1a38:	203d      	movs	r0, #61	; 0x3d
    1a3a:	4b3d      	ldr	r3, [pc, #244]	; (1b30 <system_init+0x184>)
    1a3c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1a3e:	2102      	movs	r1, #2
    1a40:	203d      	movs	r0, #61	; 0x3d
    1a42:	4b3c      	ldr	r3, [pc, #240]	; (1b34 <system_init+0x188>)
    1a44:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    1a46:	f04f 31ff 	mov.w	r1, #4294967295
    1a4a:	203d      	movs	r0, #61	; 0x3d
    1a4c:	4b3a      	ldr	r3, [pc, #232]	; (1b38 <system_init+0x18c>)
    1a4e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1a50:	2101      	movs	r1, #1
    1a52:	203f      	movs	r0, #63	; 0x3f
    1a54:	4b37      	ldr	r3, [pc, #220]	; (1b34 <system_init+0x188>)
    1a56:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1a58:	2101      	movs	r1, #1
    1a5a:	203f      	movs	r0, #63	; 0x3f
    1a5c:	4b37      	ldr	r3, [pc, #220]	; (1b3c <system_init+0x190>)
    1a5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1a60:	f04f 31ff 	mov.w	r1, #4294967295
    1a64:	203f      	movs	r0, #63	; 0x3f
    1a66:	4b34      	ldr	r3, [pc, #208]	; (1b38 <system_init+0x18c>)
    1a68:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1a6a:	2100      	movs	r1, #0
    1a6c:	204d      	movs	r0, #77	; 0x4d
    1a6e:	4b30      	ldr	r3, [pc, #192]	; (1b30 <system_init+0x184>)
    1a70:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1a72:	2102      	movs	r1, #2
    1a74:	204d      	movs	r0, #77	; 0x4d
    1a76:	4b2f      	ldr	r3, [pc, #188]	; (1b34 <system_init+0x188>)
    1a78:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1a7a:	f04f 31ff 	mov.w	r1, #4294967295
    1a7e:	204d      	movs	r0, #77	; 0x4d
    1a80:	4b2d      	ldr	r3, [pc, #180]	; (1b38 <system_init+0x18c>)
    1a82:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1a84:	2101      	movs	r1, #1
    1a86:	204e      	movs	r0, #78	; 0x4e
    1a88:	4b29      	ldr	r3, [pc, #164]	; (1b30 <system_init+0x184>)
    1a8a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1a8c:	2102      	movs	r1, #2
    1a8e:	204e      	movs	r0, #78	; 0x4e
    1a90:	4b28      	ldr	r3, [pc, #160]	; (1b34 <system_init+0x188>)
    1a92:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1a94:	f04f 31ff 	mov.w	r1, #4294967295
    1a98:	204e      	movs	r0, #78	; 0x4e
    1a9a:	4b27      	ldr	r3, [pc, #156]	; (1b38 <system_init+0x18c>)
    1a9c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1a9e:	2100      	movs	r1, #0
    1aa0:	204f      	movs	r0, #79	; 0x4f
    1aa2:	4b23      	ldr	r3, [pc, #140]	; (1b30 <system_init+0x184>)
    1aa4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1aa6:	2102      	movs	r1, #2
    1aa8:	204f      	movs	r0, #79	; 0x4f
    1aaa:	4b22      	ldr	r3, [pc, #136]	; (1b34 <system_init+0x188>)
    1aac:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1aae:	f04f 31ff 	mov.w	r1, #4294967295
    1ab2:	204f      	movs	r0, #79	; 0x4f
    1ab4:	4b20      	ldr	r3, [pc, #128]	; (1b38 <system_init+0x18c>)
    1ab6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1ab8:	2100      	movs	r1, #0
    1aba:	2052      	movs	r0, #82	; 0x52
    1abc:	4b1c      	ldr	r3, [pc, #112]	; (1b30 <system_init+0x184>)
    1abe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1ac0:	2102      	movs	r1, #2
    1ac2:	2052      	movs	r0, #82	; 0x52
    1ac4:	4b1b      	ldr	r3, [pc, #108]	; (1b34 <system_init+0x188>)
    1ac6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1ac8:	f04f 31ff 	mov.w	r1, #4294967295
    1acc:	2052      	movs	r0, #82	; 0x52
    1ace:	4b1a      	ldr	r3, [pc, #104]	; (1b38 <system_init+0x18c>)
    1ad0:	4798      	blx	r3

	CRC_CALC_init();
    1ad2:	4b1b      	ldr	r3, [pc, #108]	; (1b40 <system_init+0x194>)
    1ad4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1ad6:	4b1b      	ldr	r3, [pc, #108]	; (1b44 <system_init+0x198>)
    1ad8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1ada:	4b1b      	ldr	r3, [pc, #108]	; (1b48 <system_init+0x19c>)
    1adc:	4798      	blx	r3

	QSPI_N25Q256_init();
    1ade:	4b1b      	ldr	r3, [pc, #108]	; (1b4c <system_init+0x1a0>)
    1ae0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1ae2:	4b1b      	ldr	r3, [pc, #108]	; (1b50 <system_init+0x1a4>)
    1ae4:	4798      	blx	r3

	I2C_SHARED_init();
    1ae6:	4b1b      	ldr	r3, [pc, #108]	; (1b54 <system_init+0x1a8>)
    1ae8:	4798      	blx	r3

	SPI_TEMP_init();
    1aea:	4b1b      	ldr	r3, [pc, #108]	; (1b58 <system_init+0x1ac>)
    1aec:	4798      	blx	r3

	I2C_EXPANDER_init();
    1aee:	4b1b      	ldr	r3, [pc, #108]	; (1b5c <system_init+0x1b0>)
    1af0:	4798      	blx	r3

	SPI_HI3593_init();
    1af2:	4b1b      	ldr	r3, [pc, #108]	; (1b60 <system_init+0x1b4>)
    1af4:	4798      	blx	r3

	I2C_EEPROM_init();
    1af6:	4b1b      	ldr	r3, [pc, #108]	; (1b64 <system_init+0x1b8>)
    1af8:	4798      	blx	r3

	TIMER_USB_init();
    1afa:	4b1b      	ldr	r3, [pc, #108]	; (1b68 <system_init+0x1bc>)
    1afc:	4798      	blx	r3
	TIMER_ARINC_init();
    1afe:	4b1b      	ldr	r3, [pc, #108]	; (1b6c <system_init+0x1c0>)
    1b00:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1b02:	4b1b      	ldr	r3, [pc, #108]	; (1b70 <system_init+0x1c4>)
    1b04:	4798      	blx	r3
	TIMER_INTERFACE_init();
    1b06:	4b1b      	ldr	r3, [pc, #108]	; (1b74 <system_init+0x1c8>)
    1b08:	4798      	blx	r3
	TIMER_EVENT_init();
    1b0a:	4b1b      	ldr	r3, [pc, #108]	; (1b78 <system_init+0x1cc>)
    1b0c:	4798      	blx	r3
	LIVE_PULSE_init();
    1b0e:	4b1b      	ldr	r3, [pc, #108]	; (1b7c <system_init+0x1d0>)
    1b10:	4798      	blx	r3

	TIMER_HVAC_init();
    1b12:	4b1b      	ldr	r3, [pc, #108]	; (1b80 <system_init+0x1d4>)
    1b14:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    1b16:	4b1b      	ldr	r3, [pc, #108]	; (1b84 <system_init+0x1d8>)
    1b18:	4798      	blx	r3

	CDCUSB_init();
    1b1a:	4b1b      	ldr	r3, [pc, #108]	; (1b88 <system_init+0x1dc>)
    1b1c:	4798      	blx	r3

	WATCHDOG_init();
    1b1e:	4b1b      	ldr	r3, [pc, #108]	; (1b8c <system_init+0x1e0>)
    1b20:	4798      	blx	r3
	CAN_CCU_init();
    1b22:	4b1b      	ldr	r3, [pc, #108]	; (1b90 <system_init+0x1e4>)
    1b24:	4798      	blx	r3
}
    1b26:	bf00      	nop
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	bf00      	nop
    1b2c:	00000f1d 	.word	0x00000f1d
    1b30:	00000ee5 	.word	0x00000ee5
    1b34:	00000ead 	.word	0x00000ead
    1b38:	00000e8d 	.word	0x00000e8d
    1b3c:	00000e59 	.word	0x00000e59
    1b40:	00000f7d 	.word	0x00000f7d
    1b44:	00000fa9 	.word	0x00000fa9
    1b48:	000010b5 	.word	0x000010b5
    1b4c:	000011fd 	.word	0x000011fd
    1b50:	00001241 	.word	0x00001241
    1b54:	000012d1 	.word	0x000012d1
    1b58:	0000139d 	.word	0x0000139d
    1b5c:	00001435 	.word	0x00001435
    1b60:	00001501 	.word	0x00001501
    1b64:	00001599 	.word	0x00001599
    1b68:	000015c5 	.word	0x000015c5
    1b6c:	0000160d 	.word	0x0000160d
    1b70:	00001655 	.word	0x00001655
    1b74:	0000169d 	.word	0x0000169d
    1b78:	000016e5 	.word	0x000016e5
    1b7c:	0000176d 	.word	0x0000176d
    1b80:	000017cd 	.word	0x000017cd
    1b84:	00001825 	.word	0x00001825
    1b88:	000018e9 	.word	0x000018e9
    1b8c:	00001921 	.word	0x00001921
    1b90:	00001969 	.word	0x00001969

00001b94 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
    1b9c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1b9e:	2300      	movs	r3, #0
    1ba0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	bf14      	ite	ne
    1ba8:	2301      	movne	r3, #1
    1baa:	2300      	moveq	r3, #0
    1bac:	b2db      	uxtb	r3, r3
    1bae:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1bb2:	4911      	ldr	r1, [pc, #68]	; (1bf8 <calendar_init+0x64>)
    1bb4:	4618      	mov	r0, r3
    1bb6:	4b11      	ldr	r3, [pc, #68]	; (1bfc <calendar_init+0x68>)
    1bb8:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	681a      	ldr	r2, [r3, #0]
    1bbe:	683b      	ldr	r3, [r7, #0]
    1bc0:	429a      	cmp	r2, r3
    1bc2:	d101      	bne.n	1bc8 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1bc4:	2300      	movs	r3, #0
    1bc6:	e013      	b.n	1bf0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d002      	beq.n	1bd6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1bd0:	f06f 0311 	mvn.w	r3, #17
    1bd4:	e00c      	b.n	1bf0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1bd6:	687b      	ldr	r3, [r7, #4]
    1bd8:	683a      	ldr	r2, [r7, #0]
    1bda:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	4618      	mov	r0, r3
    1be0:	4b07      	ldr	r3, [pc, #28]	; (1c00 <calendar_init+0x6c>)
    1be2:	4798      	blx	r3
    1be4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1bec:	619a      	str	r2, [r3, #24]

	return ret;
    1bee:	68fb      	ldr	r3, [r7, #12]
}
    1bf0:	4618      	mov	r0, r3
    1bf2:	3710      	adds	r7, #16
    1bf4:	46bd      	mov	sp, r7
    1bf6:	bd80      	pop	{r7, pc}
    1bf8:	0000eeb4 	.word	0x0000eeb4
    1bfc:	00003511 	.word	0x00003511
    1c00:	00005899 	.word	0x00005899

00001c04 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	b084      	sub	sp, #16
    1c08:	af00      	add	r7, sp, #0
    1c0a:	6078      	str	r0, [r7, #4]
    1c0c:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d004      	beq.n	1c1e <can_async_init+0x1a>
    1c14:	683b      	ldr	r3, [r7, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d001      	beq.n	1c1e <can_async_init+0x1a>
    1c1a:	2301      	movs	r3, #1
    1c1c:	e000      	b.n	1c20 <can_async_init+0x1c>
    1c1e:	2300      	movs	r3, #0
    1c20:	f003 0301 	and.w	r3, r3, #1
    1c24:	b2db      	uxtb	r3, r3
    1c26:	2241      	movs	r2, #65	; 0x41
    1c28:	490e      	ldr	r1, [pc, #56]	; (1c64 <can_async_init+0x60>)
    1c2a:	4618      	mov	r0, r3
    1c2c:	4b0e      	ldr	r3, [pc, #56]	; (1c68 <can_async_init+0x64>)
    1c2e:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	6839      	ldr	r1, [r7, #0]
    1c34:	4618      	mov	r0, r3
    1c36:	4b0d      	ldr	r3, [pc, #52]	; (1c6c <can_async_init+0x68>)
    1c38:	4798      	blx	r3
    1c3a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1c3c:	68fb      	ldr	r3, [r7, #12]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d001      	beq.n	1c46 <can_async_init+0x42>
		return rc;
    1c42:	68fb      	ldr	r3, [r7, #12]
    1c44:	e009      	b.n	1c5a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	4a09      	ldr	r2, [pc, #36]	; (1c70 <can_async_init+0x6c>)
    1c4a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	4a09      	ldr	r2, [pc, #36]	; (1c74 <can_async_init+0x70>)
    1c50:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	4a08      	ldr	r2, [pc, #32]	; (1c78 <can_async_init+0x74>)
    1c56:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1c58:	2300      	movs	r3, #0
}
    1c5a:	4618      	mov	r0, r3
    1c5c:	3710      	adds	r7, #16
    1c5e:	46bd      	mov	sp, r7
    1c60:	bd80      	pop	{r7, pc}
    1c62:	bf00      	nop
    1c64:	0000eed0 	.word	0x0000eed0
    1c68:	00003511 	.word	0x00003511
    1c6c:	00003a6d 	.word	0x00003a6d
    1c70:	00001c7d 	.word	0x00001c7d
    1c74:	00001ca1 	.word	0x00001ca1
    1c78:	00001cc5 	.word	0x00001cc5

00001c7c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1c7c:	b580      	push	{r7, lr}
    1c7e:	b084      	sub	sp, #16
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1c88:	68fb      	ldr	r3, [r7, #12]
    1c8a:	69db      	ldr	r3, [r3, #28]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d003      	beq.n	1c98 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1c90:	68fb      	ldr	r3, [r7, #12]
    1c92:	69db      	ldr	r3, [r3, #28]
    1c94:	68f8      	ldr	r0, [r7, #12]
    1c96:	4798      	blx	r3
	}
}
    1c98:	bf00      	nop
    1c9a:	3710      	adds	r7, #16
    1c9c:	46bd      	mov	sp, r7
    1c9e:	bd80      	pop	{r7, pc}

00001ca0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b084      	sub	sp, #16
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	6a1b      	ldr	r3, [r3, #32]
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d003      	beq.n	1cbc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1cb4:	68fb      	ldr	r3, [r7, #12]
    1cb6:	6a1b      	ldr	r3, [r3, #32]
    1cb8:	68f8      	ldr	r0, [r7, #12]
    1cba:	4798      	blx	r3
	}
}
    1cbc:	bf00      	nop
    1cbe:	3710      	adds	r7, #16
    1cc0:	46bd      	mov	sp, r7
    1cc2:	bd80      	pop	{r7, pc}

00001cc4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b084      	sub	sp, #16
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	460b      	mov	r3, r1
    1cce:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d005      	beq.n	1ce8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ce0:	78fa      	ldrb	r2, [r7, #3]
    1ce2:	4611      	mov	r1, r2
    1ce4:	68f8      	ldr	r0, [r7, #12]
    1ce6:	4798      	blx	r3
	}
}
    1ce8:	bf00      	nop
    1cea:	3710      	adds	r7, #16
    1cec:	46bd      	mov	sp, r7
    1cee:	bd80      	pop	{r7, pc}

00001cf0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
    1cf8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d004      	beq.n	1d0a <crc_sync_init+0x1a>
    1d00:	683b      	ldr	r3, [r7, #0]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d001      	beq.n	1d0a <crc_sync_init+0x1a>
    1d06:	2301      	movs	r3, #1
    1d08:	e000      	b.n	1d0c <crc_sync_init+0x1c>
    1d0a:	2300      	movs	r3, #0
    1d0c:	f003 0301 	and.w	r3, r3, #1
    1d10:	b2db      	uxtb	r3, r3
    1d12:	222b      	movs	r2, #43	; 0x2b
    1d14:	4906      	ldr	r1, [pc, #24]	; (1d30 <crc_sync_init+0x40>)
    1d16:	4618      	mov	r0, r3
    1d18:	4b06      	ldr	r3, [pc, #24]	; (1d34 <crc_sync_init+0x44>)
    1d1a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	6839      	ldr	r1, [r7, #0]
    1d20:	4618      	mov	r0, r3
    1d22:	4b05      	ldr	r3, [pc, #20]	; (1d38 <crc_sync_init+0x48>)
    1d24:	4798      	blx	r3
    1d26:	4603      	mov	r3, r0
}
    1d28:	4618      	mov	r0, r3
    1d2a:	3708      	adds	r7, #8
    1d2c:	46bd      	mov	sp, r7
    1d2e:	bd80      	pop	{r7, pc}
    1d30:	0000eeec 	.word	0x0000eeec
    1d34:	00003511 	.word	0x00003511
    1d38:	00004171 	.word	0x00004171

00001d3c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1d3c:	b590      	push	{r4, r7, lr}
    1d3e:	b083      	sub	sp, #12
    1d40:	af00      	add	r7, sp, #0
    1d42:	4603      	mov	r3, r0
    1d44:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1d46:	4b07      	ldr	r3, [pc, #28]	; (1d64 <delay_us+0x28>)
    1d48:	681c      	ldr	r4, [r3, #0]
    1d4a:	88fb      	ldrh	r3, [r7, #6]
    1d4c:	4618      	mov	r0, r3
    1d4e:	4b06      	ldr	r3, [pc, #24]	; (1d68 <delay_us+0x2c>)
    1d50:	4798      	blx	r3
    1d52:	4603      	mov	r3, r0
    1d54:	4619      	mov	r1, r3
    1d56:	4620      	mov	r0, r4
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <delay_us+0x30>)
    1d5a:	4798      	blx	r3
}
    1d5c:	bf00      	nop
    1d5e:	370c      	adds	r7, #12
    1d60:	46bd      	mov	sp, r7
    1d62:	bd90      	pop	{r4, r7, pc}
    1d64:	20000694 	.word	0x20000694
    1d68:	00003ec5 	.word	0x00003ec5
    1d6c:	00004059 	.word	0x00004059

00001d70 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1d70:	b590      	push	{r4, r7, lr}
    1d72:	b083      	sub	sp, #12
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1d7a:	4b07      	ldr	r3, [pc, #28]	; (1d98 <delay_ms+0x28>)
    1d7c:	681c      	ldr	r4, [r3, #0]
    1d7e:	88fb      	ldrh	r3, [r7, #6]
    1d80:	4618      	mov	r0, r3
    1d82:	4b06      	ldr	r3, [pc, #24]	; (1d9c <delay_ms+0x2c>)
    1d84:	4798      	blx	r3
    1d86:	4603      	mov	r3, r0
    1d88:	4619      	mov	r1, r3
    1d8a:	4620      	mov	r0, r4
    1d8c:	4b04      	ldr	r3, [pc, #16]	; (1da0 <delay_ms+0x30>)
    1d8e:	4798      	blx	r3
}
    1d90:	bf00      	nop
    1d92:	370c      	adds	r7, #12
    1d94:	46bd      	mov	sp, r7
    1d96:	bd90      	pop	{r4, r7, pc}
    1d98:	20000694 	.word	0x20000694
    1d9c:	00004031 	.word	0x00004031
    1da0:	00004059 	.word	0x00004059

00001da4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1da4:	b580      	push	{r7, lr}
    1da6:	af00      	add	r7, sp, #0
	return _event_system_init();
    1da8:	4b02      	ldr	r3, [pc, #8]	; (1db4 <event_system_init+0x10>)
    1daa:	4798      	blx	r3
    1dac:	4603      	mov	r3, r0
}
    1dae:	4618      	mov	r0, r3
    1db0:	bd80      	pop	{r7, pc}
    1db2:	bf00      	nop
    1db4:	0000490d 	.word	0x0000490d

00001db8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1db8:	b580      	push	{r7, lr}
    1dba:	b082      	sub	sp, #8
    1dbc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1dbe:	2300      	movs	r3, #0
    1dc0:	80fb      	strh	r3, [r7, #6]
    1dc2:	e00e      	b.n	1de2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1dc4:	88fb      	ldrh	r3, [r7, #6]
    1dc6:	4a0c      	ldr	r2, [pc, #48]	; (1df8 <ext_irq_init+0x40>)
    1dc8:	00db      	lsls	r3, r3, #3
    1dca:	4413      	add	r3, r2
    1dcc:	f04f 32ff 	mov.w	r2, #4294967295
    1dd0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1dd2:	88fb      	ldrh	r3, [r7, #6]
    1dd4:	4a08      	ldr	r2, [pc, #32]	; (1df8 <ext_irq_init+0x40>)
    1dd6:	2100      	movs	r1, #0
    1dd8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1ddc:	88fb      	ldrh	r3, [r7, #6]
    1dde:	3301      	adds	r3, #1
    1de0:	80fb      	strh	r3, [r7, #6]
    1de2:	88fb      	ldrh	r3, [r7, #6]
    1de4:	2b07      	cmp	r3, #7
    1de6:	d9ed      	bls.n	1dc4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1de8:	4804      	ldr	r0, [pc, #16]	; (1dfc <ext_irq_init+0x44>)
    1dea:	4b05      	ldr	r3, [pc, #20]	; (1e00 <ext_irq_init+0x48>)
    1dec:	4798      	blx	r3
    1dee:	4603      	mov	r3, r0
}
    1df0:	4618      	mov	r0, r3
    1df2:	3708      	adds	r7, #8
    1df4:	46bd      	mov	sp, r7
    1df6:	bd80      	pop	{r7, pc}
    1df8:	20000698 	.word	0x20000698
    1dfc:	00001f5d 	.word	0x00001f5d
    1e00:	000044b1 	.word	0x000044b1

00001e04 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b086      	sub	sp, #24
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    1e0e:	2300      	movs	r3, #0
    1e10:	75fb      	strb	r3, [r7, #23]
    1e12:	2300      	movs	r3, #0
    1e14:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    1e16:	2300      	movs	r3, #0
    1e18:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    1e1a:	e012      	b.n	1e42 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    1e1c:	7dfb      	ldrb	r3, [r7, #23]
    1e1e:	4a4d      	ldr	r2, [pc, #308]	; (1f54 <ext_irq_register+0x150>)
    1e20:	00db      	lsls	r3, r3, #3
    1e22:	4413      	add	r3, r2
    1e24:	685a      	ldr	r2, [r3, #4]
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	429a      	cmp	r2, r3
    1e2a:	d107      	bne.n	1e3c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    1e2c:	7dfb      	ldrb	r3, [r7, #23]
    1e2e:	4949      	ldr	r1, [pc, #292]	; (1f54 <ext_irq_register+0x150>)
    1e30:	683a      	ldr	r2, [r7, #0]
    1e32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    1e36:	2301      	movs	r3, #1
    1e38:	757b      	strb	r3, [r7, #21]
			break;
    1e3a:	e005      	b.n	1e48 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1e3c:	7dfb      	ldrb	r3, [r7, #23]
    1e3e:	3301      	adds	r3, #1
    1e40:	75fb      	strb	r3, [r7, #23]
    1e42:	7dfb      	ldrb	r3, [r7, #23]
    1e44:	2b07      	cmp	r3, #7
    1e46:	d9e9      	bls.n	1e1c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    1e48:	683b      	ldr	r3, [r7, #0]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d10e      	bne.n	1e6c <ext_irq_register+0x68>
		if (!found) {
    1e4e:	7d7b      	ldrb	r3, [r7, #21]
    1e50:	f083 0301 	eor.w	r3, r3, #1
    1e54:	b2db      	uxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	d002      	beq.n	1e60 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    1e5a:	f06f 030c 	mvn.w	r3, #12
    1e5e:	e074      	b.n	1f4a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1e60:	2100      	movs	r1, #0
    1e62:	6878      	ldr	r0, [r7, #4]
    1e64:	4b3c      	ldr	r3, [pc, #240]	; (1f58 <ext_irq_register+0x154>)
    1e66:	4798      	blx	r3
    1e68:	4603      	mov	r3, r0
    1e6a:	e06e      	b.n	1f4a <ext_irq_register+0x146>
	}

	if (!found) {
    1e6c:	7d7b      	ldrb	r3, [r7, #21]
    1e6e:	f083 0301 	eor.w	r3, r3, #1
    1e72:	b2db      	uxtb	r3, r3
    1e74:	2b00      	cmp	r3, #0
    1e76:	d05a      	beq.n	1f2e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e78:	2300      	movs	r3, #0
    1e7a:	75fb      	strb	r3, [r7, #23]
    1e7c:	e016      	b.n	1eac <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1e7e:	7dfb      	ldrb	r3, [r7, #23]
    1e80:	4a34      	ldr	r2, [pc, #208]	; (1f54 <ext_irq_register+0x150>)
    1e82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d10d      	bne.n	1ea6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    1e8a:	7dfb      	ldrb	r3, [r7, #23]
    1e8c:	4931      	ldr	r1, [pc, #196]	; (1f54 <ext_irq_register+0x150>)
    1e8e:	683a      	ldr	r2, [r7, #0]
    1e90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1e94:	7dfb      	ldrb	r3, [r7, #23]
    1e96:	4a2f      	ldr	r2, [pc, #188]	; (1f54 <ext_irq_register+0x150>)
    1e98:	00db      	lsls	r3, r3, #3
    1e9a:	4413      	add	r3, r2
    1e9c:	687a      	ldr	r2, [r7, #4]
    1e9e:	605a      	str	r2, [r3, #4]
				found           = true;
    1ea0:	2301      	movs	r3, #1
    1ea2:	757b      	strb	r3, [r7, #21]
				break;
    1ea4:	e005      	b.n	1eb2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1ea6:	7dfb      	ldrb	r3, [r7, #23]
    1ea8:	3301      	adds	r3, #1
    1eaa:	75fb      	strb	r3, [r7, #23]
    1eac:	7dfb      	ldrb	r3, [r7, #23]
    1eae:	2b07      	cmp	r3, #7
    1eb0:	d9e5      	bls.n	1e7e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1eb2:	e036      	b.n	1f22 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1eb4:	7dfb      	ldrb	r3, [r7, #23]
    1eb6:	4a27      	ldr	r2, [pc, #156]	; (1f54 <ext_irq_register+0x150>)
    1eb8:	00db      	lsls	r3, r3, #3
    1eba:	4413      	add	r3, r2
    1ebc:	685a      	ldr	r2, [r3, #4]
    1ebe:	7dbb      	ldrb	r3, [r7, #22]
    1ec0:	4924      	ldr	r1, [pc, #144]	; (1f54 <ext_irq_register+0x150>)
    1ec2:	00db      	lsls	r3, r3, #3
    1ec4:	440b      	add	r3, r1
    1ec6:	685b      	ldr	r3, [r3, #4]
    1ec8:	429a      	cmp	r2, r3
    1eca:	d227      	bcs.n	1f1c <ext_irq_register+0x118>
    1ecc:	7dbb      	ldrb	r3, [r7, #22]
    1ece:	4a21      	ldr	r2, [pc, #132]	; (1f54 <ext_irq_register+0x150>)
    1ed0:	00db      	lsls	r3, r3, #3
    1ed2:	4413      	add	r3, r2
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
    1eda:	d01f      	beq.n	1f1c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1edc:	7dbb      	ldrb	r3, [r7, #22]
    1ede:	491d      	ldr	r1, [pc, #116]	; (1f54 <ext_irq_register+0x150>)
    1ee0:	f107 020c 	add.w	r2, r7, #12
    1ee4:	00db      	lsls	r3, r3, #3
    1ee6:	440b      	add	r3, r1
    1ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
    1eec:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1ef0:	7dbb      	ldrb	r3, [r7, #22]
    1ef2:	7dfa      	ldrb	r2, [r7, #23]
    1ef4:	4817      	ldr	r0, [pc, #92]	; (1f54 <ext_irq_register+0x150>)
    1ef6:	4917      	ldr	r1, [pc, #92]	; (1f54 <ext_irq_register+0x150>)
    1ef8:	00db      	lsls	r3, r3, #3
    1efa:	4403      	add	r3, r0
    1efc:	00d2      	lsls	r2, r2, #3
    1efe:	440a      	add	r2, r1
    1f00:	e892 0003 	ldmia.w	r2, {r0, r1}
    1f04:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    1f08:	7dfb      	ldrb	r3, [r7, #23]
    1f0a:	4a12      	ldr	r2, [pc, #72]	; (1f54 <ext_irq_register+0x150>)
    1f0c:	00db      	lsls	r3, r3, #3
    1f0e:	4413      	add	r3, r2
    1f10:	f107 020c 	add.w	r2, r7, #12
    1f14:	e892 0003 	ldmia.w	r2, {r0, r1}
    1f18:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1f1c:	7dbb      	ldrb	r3, [r7, #22]
    1f1e:	3301      	adds	r3, #1
    1f20:	75bb      	strb	r3, [r7, #22]
    1f22:	7dbb      	ldrb	r3, [r7, #22]
    1f24:	2b07      	cmp	r3, #7
    1f26:	d802      	bhi.n	1f2e <ext_irq_register+0x12a>
    1f28:	7dfb      	ldrb	r3, [r7, #23]
    1f2a:	2b07      	cmp	r3, #7
    1f2c:	d9c2      	bls.n	1eb4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    1f2e:	7d7b      	ldrb	r3, [r7, #21]
    1f30:	f083 0301 	eor.w	r3, r3, #1
    1f34:	b2db      	uxtb	r3, r3
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    1f3a:	f06f 030c 	mvn.w	r3, #12
    1f3e:	e004      	b.n	1f4a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    1f40:	2101      	movs	r1, #1
    1f42:	6878      	ldr	r0, [r7, #4]
    1f44:	4b04      	ldr	r3, [pc, #16]	; (1f58 <ext_irq_register+0x154>)
    1f46:	4798      	blx	r3
    1f48:	4603      	mov	r3, r0
}
    1f4a:	4618      	mov	r0, r3
    1f4c:	3718      	adds	r7, #24
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd80      	pop	{r7, pc}
    1f52:	bf00      	nop
    1f54:	20000698 	.word	0x20000698
    1f58:	00004635 	.word	0x00004635

00001f5c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b084      	sub	sp, #16
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1f64:	2300      	movs	r3, #0
    1f66:	73fb      	strb	r3, [r7, #15]
    1f68:	2308      	movs	r3, #8
    1f6a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1f6c:	e02a      	b.n	1fc4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1f6e:	7bba      	ldrb	r2, [r7, #14]
    1f70:	7bfb      	ldrb	r3, [r7, #15]
    1f72:	4413      	add	r3, r2
    1f74:	105b      	asrs	r3, r3, #1
    1f76:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1f78:	7b7b      	ldrb	r3, [r7, #13]
    1f7a:	2b07      	cmp	r3, #7
    1f7c:	d827      	bhi.n	1fce <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1f7e:	7b7b      	ldrb	r3, [r7, #13]
    1f80:	4a16      	ldr	r2, [pc, #88]	; (1fdc <process_ext_irq+0x80>)
    1f82:	00db      	lsls	r3, r3, #3
    1f84:	4413      	add	r3, r2
    1f86:	685a      	ldr	r2, [r3, #4]
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	429a      	cmp	r2, r3
    1f8c:	d10b      	bne.n	1fa6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1f8e:	7b7b      	ldrb	r3, [r7, #13]
    1f90:	4a12      	ldr	r2, [pc, #72]	; (1fdc <process_ext_irq+0x80>)
    1f92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d01b      	beq.n	1fd2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1f9a:	7b7b      	ldrb	r3, [r7, #13]
    1f9c:	4a0f      	ldr	r2, [pc, #60]	; (1fdc <process_ext_irq+0x80>)
    1f9e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1fa2:	4798      	blx	r3
			}
			return;
    1fa4:	e015      	b.n	1fd2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1fa6:	7b7b      	ldrb	r3, [r7, #13]
    1fa8:	4a0c      	ldr	r2, [pc, #48]	; (1fdc <process_ext_irq+0x80>)
    1faa:	00db      	lsls	r3, r3, #3
    1fac:	4413      	add	r3, r2
    1fae:	685a      	ldr	r2, [r3, #4]
    1fb0:	687b      	ldr	r3, [r7, #4]
    1fb2:	429a      	cmp	r2, r3
    1fb4:	d203      	bcs.n	1fbe <process_ext_irq+0x62>
			lower = middle + 1;
    1fb6:	7b7b      	ldrb	r3, [r7, #13]
    1fb8:	3301      	adds	r3, #1
    1fba:	73fb      	strb	r3, [r7, #15]
    1fbc:	e002      	b.n	1fc4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1fbe:	7b7b      	ldrb	r3, [r7, #13]
    1fc0:	3b01      	subs	r3, #1
    1fc2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1fc4:	7bba      	ldrb	r2, [r7, #14]
    1fc6:	7bfb      	ldrb	r3, [r7, #15]
    1fc8:	429a      	cmp	r2, r3
    1fca:	d2d0      	bcs.n	1f6e <process_ext_irq+0x12>
    1fcc:	e002      	b.n	1fd4 <process_ext_irq+0x78>
			return;
    1fce:	bf00      	nop
    1fd0:	e000      	b.n	1fd4 <process_ext_irq+0x78>
			return;
    1fd2:	bf00      	nop
		}
	}
}
    1fd4:	3710      	adds	r7, #16
    1fd6:	46bd      	mov	sp, r7
    1fd8:	bd80      	pop	{r7, pc}
    1fda:	bf00      	nop
    1fdc:	20000698 	.word	0x20000698

00001fe0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b084      	sub	sp, #16
    1fe4:	af00      	add	r7, sp, #0
    1fe6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1fe8:	687b      	ldr	r3, [r7, #4]
    1fea:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	885b      	ldrh	r3, [r3, #2]
    1ff0:	b29b      	uxth	r3, r3
    1ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d107      	bne.n	200a <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1ffa:	68fb      	ldr	r3, [r7, #12]
    1ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1ffe:	2b00      	cmp	r3, #0
    2000:	d003      	beq.n	200a <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2006:	68f8      	ldr	r0, [r7, #12]
    2008:	4798      	blx	r3
		}
	}
}
    200a:	bf00      	nop
    200c:	3710      	adds	r7, #16
    200e:	46bd      	mov	sp, r7
    2010:	bd80      	pop	{r7, pc}

00002012 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2012:	b580      	push	{r7, lr}
    2014:	b084      	sub	sp, #16
    2016:	af00      	add	r7, sp, #0
    2018:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	885b      	ldrh	r3, [r3, #2]
    2022:	b29b      	uxth	r3, r3
    2024:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2028:	2b00      	cmp	r3, #0
    202a:	d107      	bne.n	203c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2030:	2b00      	cmp	r3, #0
    2032:	d003      	beq.n	203c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2038:	68f8      	ldr	r0, [r7, #12]
    203a:	4798      	blx	r3
		}
	}
}
    203c:	bf00      	nop
    203e:	3710      	adds	r7, #16
    2040:	46bd      	mov	sp, r7
    2042:	bd80      	pop	{r7, pc}

00002044 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2044:	b580      	push	{r7, lr}
    2046:	b084      	sub	sp, #16
    2048:	af00      	add	r7, sp, #0
    204a:	6078      	str	r0, [r7, #4]
    204c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	885b      	ldrh	r3, [r3, #2]
    2056:	b29b      	uxth	r3, r3
    2058:	f403 7380 	and.w	r3, r3, #256	; 0x100
    205c:	2b00      	cmp	r3, #0
    205e:	d108      	bne.n	2072 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2064:	2b00      	cmp	r3, #0
    2066:	d004      	beq.n	2072 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2068:	68fb      	ldr	r3, [r7, #12]
    206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    206c:	6839      	ldr	r1, [r7, #0]
    206e:	68f8      	ldr	r0, [r7, #12]
    2070:	4798      	blx	r3
		}
	}
}
    2072:	bf00      	nop
    2074:	3710      	adds	r7, #16
    2076:	46bd      	mov	sp, r7
    2078:	bd80      	pop	{r7, pc}
	...

0000207c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    207c:	b580      	push	{r7, lr}
    207e:	b08a      	sub	sp, #40	; 0x28
    2080:	af00      	add	r7, sp, #0
    2082:	60f8      	str	r0, [r7, #12]
    2084:	60b9      	str	r1, [r7, #8]
    2086:	4613      	mov	r3, r2
    2088:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    208a:	68fb      	ldr	r3, [r7, #12]
    208c:	3b28      	subs	r3, #40	; 0x28
    208e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2092:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2094:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2096:	88fb      	ldrh	r3, [r7, #6]
    2098:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    209a:	f248 0301 	movw	r3, #32769	; 0x8001
    209e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    20a0:	68bb      	ldr	r3, [r7, #8]
    20a2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    20a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20a6:	f107 0214 	add.w	r2, r7, #20
    20aa:	4611      	mov	r1, r2
    20ac:	4618      	mov	r0, r3
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <i2c_m_async_read+0x4c>)
    20b0:	4798      	blx	r3
    20b2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    20b4:	6a3b      	ldr	r3, [r7, #32]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d001      	beq.n	20be <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    20ba:	6a3b      	ldr	r3, [r7, #32]
    20bc:	e000      	b.n	20c0 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    20be:	88fb      	ldrh	r3, [r7, #6]
}
    20c0:	4618      	mov	r0, r3
    20c2:	3728      	adds	r7, #40	; 0x28
    20c4:	46bd      	mov	sp, r7
    20c6:	bd80      	pop	{r7, pc}
    20c8:	000066d1 	.word	0x000066d1

000020cc <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b08a      	sub	sp, #40	; 0x28
    20d0:	af00      	add	r7, sp, #0
    20d2:	60f8      	str	r0, [r7, #12]
    20d4:	60b9      	str	r1, [r7, #8]
    20d6:	4613      	mov	r3, r2
    20d8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    20da:	68fb      	ldr	r3, [r7, #12]
    20dc:	3b28      	subs	r3, #40	; 0x28
    20de:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    20e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    20e4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    20e6:	88fb      	ldrh	r3, [r7, #6]
    20e8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    20ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    20ee:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    20f0:	68bb      	ldr	r3, [r7, #8]
    20f2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    20f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    20f6:	f107 0214 	add.w	r2, r7, #20
    20fa:	4611      	mov	r1, r2
    20fc:	4618      	mov	r0, r3
    20fe:	4b06      	ldr	r3, [pc, #24]	; (2118 <i2c_m_async_write+0x4c>)
    2100:	4798      	blx	r3
    2102:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2104:	6a3b      	ldr	r3, [r7, #32]
    2106:	2b00      	cmp	r3, #0
    2108:	d001      	beq.n	210e <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    210a:	6a3b      	ldr	r3, [r7, #32]
    210c:	e000      	b.n	2110 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    210e:	88fb      	ldrh	r3, [r7, #6]
}
    2110:	4618      	mov	r0, r3
    2112:	3728      	adds	r7, #40	; 0x28
    2114:	46bd      	mov	sp, r7
    2116:	bd80      	pop	{r7, pc}
    2118:	000066d1 	.word	0x000066d1

0000211c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    211c:	b580      	push	{r7, lr}
    211e:	b084      	sub	sp, #16
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
    2124:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	2b00      	cmp	r3, #0
    212a:	bf14      	ite	ne
    212c:	2301      	movne	r3, #1
    212e:	2300      	moveq	r3, #0
    2130:	b2db      	uxtb	r3, r3
    2132:	2289      	movs	r2, #137	; 0x89
    2134:	4915      	ldr	r1, [pc, #84]	; (218c <i2c_m_async_init+0x70>)
    2136:	4618      	mov	r0, r3
    2138:	4b15      	ldr	r3, [pc, #84]	; (2190 <i2c_m_async_init+0x74>)
    213a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	6839      	ldr	r1, [r7, #0]
    2140:	4618      	mov	r0, r3
    2142:	4b14      	ldr	r3, [pc, #80]	; (2194 <i2c_m_async_init+0x78>)
    2144:	4798      	blx	r3
    2146:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2148:	68fb      	ldr	r3, [r7, #12]
    214a:	2b00      	cmp	r3, #0
    214c:	d001      	beq.n	2152 <i2c_m_async_init+0x36>
		return init_status;
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	e018      	b.n	2184 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	4a10      	ldr	r2, [pc, #64]	; (2198 <i2c_m_async_init+0x7c>)
    2156:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	4a10      	ldr	r2, [pc, #64]	; (219c <i2c_m_async_init+0x80>)
    215c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	4a0f      	ldr	r2, [pc, #60]	; (21a0 <i2c_m_async_init+0x84>)
    2162:	2101      	movs	r1, #1
    2164:	4618      	mov	r0, r3
    2166:	4b0f      	ldr	r3, [pc, #60]	; (21a4 <i2c_m_async_init+0x88>)
    2168:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	4a0e      	ldr	r2, [pc, #56]	; (21a8 <i2c_m_async_init+0x8c>)
    216e:	2102      	movs	r1, #2
    2170:	4618      	mov	r0, r3
    2172:	4b0c      	ldr	r3, [pc, #48]	; (21a4 <i2c_m_async_init+0x88>)
    2174:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4a0c      	ldr	r2, [pc, #48]	; (21ac <i2c_m_async_init+0x90>)
    217a:	2100      	movs	r1, #0
    217c:	4618      	mov	r0, r3
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <i2c_m_async_init+0x88>)
    2180:	4798      	blx	r3

	return ERR_NONE;
    2182:	2300      	movs	r3, #0
}
    2184:	4618      	mov	r0, r3
    2186:	3710      	adds	r7, #16
    2188:	46bd      	mov	sp, r7
    218a:	bd80      	pop	{r7, pc}
    218c:	0000ef08 	.word	0x0000ef08
    2190:	00003511 	.word	0x00003511
    2194:	00006521 	.word	0x00006521
    2198:	0000207d 	.word	0x0000207d
    219c:	000020cd 	.word	0x000020cd
    21a0:	00001fe1 	.word	0x00001fe1
    21a4:	000067a5 	.word	0x000067a5
    21a8:	00002013 	.word	0x00002013
    21ac:	00002045 	.word	0x00002045

000021b0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b08a      	sub	sp, #40	; 0x28
    21b4:	af00      	add	r7, sp, #0
    21b6:	60f8      	str	r0, [r7, #12]
    21b8:	60b9      	str	r1, [r7, #8]
    21ba:	4613      	mov	r3, r2
    21bc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	3b14      	subs	r3, #20
    21c2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    21c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21c6:	8b9b      	ldrh	r3, [r3, #28]
    21c8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    21ca:	88fb      	ldrh	r3, [r7, #6]
    21cc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    21ce:	f248 0301 	movw	r3, #32769	; 0x8001
    21d2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    21d4:	68bb      	ldr	r3, [r7, #8]
    21d6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    21d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    21da:	f107 0214 	add.w	r2, r7, #20
    21de:	4611      	mov	r1, r2
    21e0:	4618      	mov	r0, r3
    21e2:	4b06      	ldr	r3, [pc, #24]	; (21fc <i2c_m_sync_read+0x4c>)
    21e4:	4798      	blx	r3
    21e6:	6238      	str	r0, [r7, #32]

	if (ret) {
    21e8:	6a3b      	ldr	r3, [r7, #32]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d001      	beq.n	21f2 <i2c_m_sync_read+0x42>
		return ret;
    21ee:	6a3b      	ldr	r3, [r7, #32]
    21f0:	e000      	b.n	21f4 <i2c_m_sync_read+0x44>
	}

	return n;
    21f2:	88fb      	ldrh	r3, [r7, #6]
}
    21f4:	4618      	mov	r0, r3
    21f6:	3728      	adds	r7, #40	; 0x28
    21f8:	46bd      	mov	sp, r7
    21fa:	bd80      	pop	{r7, pc}
    21fc:	000069ed 	.word	0x000069ed

00002200 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2200:	b580      	push	{r7, lr}
    2202:	b08a      	sub	sp, #40	; 0x28
    2204:	af00      	add	r7, sp, #0
    2206:	60f8      	str	r0, [r7, #12]
    2208:	60b9      	str	r1, [r7, #8]
    220a:	4613      	mov	r3, r2
    220c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	3b14      	subs	r3, #20
    2212:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2216:	8b9b      	ldrh	r3, [r3, #28]
    2218:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    221a:	88fb      	ldrh	r3, [r7, #6]
    221c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    221e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2222:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2224:	68bb      	ldr	r3, [r7, #8]
    2226:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    222a:	f107 0214 	add.w	r2, r7, #20
    222e:	4611      	mov	r1, r2
    2230:	4618      	mov	r0, r3
    2232:	4b06      	ldr	r3, [pc, #24]	; (224c <i2c_m_sync_write+0x4c>)
    2234:	4798      	blx	r3
    2236:	6238      	str	r0, [r7, #32]

	if (ret) {
    2238:	6a3b      	ldr	r3, [r7, #32]
    223a:	2b00      	cmp	r3, #0
    223c:	d001      	beq.n	2242 <i2c_m_sync_write+0x42>
		return ret;
    223e:	6a3b      	ldr	r3, [r7, #32]
    2240:	e000      	b.n	2244 <i2c_m_sync_write+0x44>
	}

	return n;
    2242:	88fb      	ldrh	r3, [r7, #6]
}
    2244:	4618      	mov	r0, r3
    2246:	3728      	adds	r7, #40	; 0x28
    2248:	46bd      	mov	sp, r7
    224a:	bd80      	pop	{r7, pc}
    224c:	000069ed 	.word	0x000069ed

00002250 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2250:	b580      	push	{r7, lr}
    2252:	b084      	sub	sp, #16
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
    2258:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	2b00      	cmp	r3, #0
    225e:	bf14      	ite	ne
    2260:	2301      	movne	r3, #1
    2262:	2300      	moveq	r3, #0
    2264:	b2db      	uxtb	r3, r3
    2266:	225e      	movs	r2, #94	; 0x5e
    2268:	490c      	ldr	r1, [pc, #48]	; (229c <i2c_m_sync_init+0x4c>)
    226a:	4618      	mov	r0, r3
    226c:	4b0c      	ldr	r3, [pc, #48]	; (22a0 <i2c_m_sync_init+0x50>)
    226e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	6839      	ldr	r1, [r7, #0]
    2274:	4618      	mov	r0, r3
    2276:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <i2c_m_sync_init+0x54>)
    2278:	4798      	blx	r3
    227a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	2b00      	cmp	r3, #0
    2280:	d001      	beq.n	2286 <i2c_m_sync_init+0x36>
		return init_status;
    2282:	68fb      	ldr	r3, [r7, #12]
    2284:	e006      	b.n	2294 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2286:	687b      	ldr	r3, [r7, #4]
    2288:	4a07      	ldr	r2, [pc, #28]	; (22a8 <i2c_m_sync_init+0x58>)
    228a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    228c:	687b      	ldr	r3, [r7, #4]
    228e:	4a07      	ldr	r2, [pc, #28]	; (22ac <i2c_m_sync_init+0x5c>)
    2290:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2292:	2300      	movs	r3, #0
}
    2294:	4618      	mov	r0, r3
    2296:	3710      	adds	r7, #16
    2298:	46bd      	mov	sp, r7
    229a:	bd80      	pop	{r7, pc}
    229c:	0000ef28 	.word	0x0000ef28
    22a0:	00003511 	.word	0x00003511
    22a4:	000067e9 	.word	0x000067e9
    22a8:	000021b1 	.word	0x000021b1
    22ac:	00002201 	.word	0x00002201

000022b0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    22b0:	b580      	push	{r7, lr}
    22b2:	b082      	sub	sp, #8
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	4618      	mov	r0, r3
    22bc:	4b03      	ldr	r3, [pc, #12]	; (22cc <i2c_m_sync_enable+0x1c>)
    22be:	4798      	blx	r3
    22c0:	4603      	mov	r3, r0
}
    22c2:	4618      	mov	r0, r3
    22c4:	3708      	adds	r7, #8
    22c6:	46bd      	mov	sp, r7
    22c8:	bd80      	pop	{r7, pc}
    22ca:	bf00      	nop
    22cc:	00006831 	.word	0x00006831

000022d0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    22d0:	b480      	push	{r7}
    22d2:	b085      	sub	sp, #20
    22d4:	af00      	add	r7, sp, #0
    22d6:	60f8      	str	r0, [r7, #12]
    22d8:	460b      	mov	r3, r1
    22da:	607a      	str	r2, [r7, #4]
    22dc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    22de:	897b      	ldrh	r3, [r7, #10]
    22e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    22e4:	b21a      	sxth	r2, r3
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	b21b      	sxth	r3, r3
    22ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    22ee:	b21b      	sxth	r3, r3
    22f0:	4313      	orrs	r3, r2
    22f2:	b21b      	sxth	r3, r3
    22f4:	b29a      	uxth	r2, r3
    22f6:	68fb      	ldr	r3, [r7, #12]
    22f8:	839a      	strh	r2, [r3, #28]
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	8b9b      	ldrh	r3, [r3, #28]
}
    22fe:	4618      	mov	r0, r3
    2300:	3714      	adds	r7, #20
    2302:	46bd      	mov	sp, r7
    2304:	f85d 7b04 	ldr.w	r7, [sp], #4
    2308:	4770      	bx	lr

0000230a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    230a:	b480      	push	{r7}
    230c:	b083      	sub	sp, #12
    230e:	af00      	add	r7, sp, #0
    2310:	6078      	str	r0, [r7, #4]
    2312:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	f103 0214 	add.w	r2, r3, #20
    231a:	683b      	ldr	r3, [r7, #0]
    231c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    231e:	2300      	movs	r3, #0
}
    2320:	4618      	mov	r0, r3
    2322:	370c      	adds	r7, #12
    2324:	46bd      	mov	sp, r7
    2326:	f85d 7b04 	ldr.w	r7, [sp], #4
    232a:	4770      	bx	lr

0000232c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    232c:	b580      	push	{r7, lr}
    232e:	b084      	sub	sp, #16
    2330:	af00      	add	r7, sp, #0
    2332:	60f8      	str	r0, [r7, #12]
    2334:	60b9      	str	r1, [r7, #8]
    2336:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2338:	68fb      	ldr	r3, [r7, #12]
    233a:	2b00      	cmp	r3, #0
    233c:	d004      	beq.n	2348 <pwm_init+0x1c>
    233e:	68bb      	ldr	r3, [r7, #8]
    2340:	2b00      	cmp	r3, #0
    2342:	d001      	beq.n	2348 <pwm_init+0x1c>
    2344:	2301      	movs	r3, #1
    2346:	e000      	b.n	234a <pwm_init+0x1e>
    2348:	2300      	movs	r3, #0
    234a:	f003 0301 	and.w	r3, r3, #1
    234e:	b2db      	uxtb	r3, r3
    2350:	2233      	movs	r2, #51	; 0x33
    2352:	490a      	ldr	r1, [pc, #40]	; (237c <pwm_init+0x50>)
    2354:	4618      	mov	r0, r3
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <pwm_init+0x54>)
    2358:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    235a:	68fb      	ldr	r3, [r7, #12]
    235c:	68b9      	ldr	r1, [r7, #8]
    235e:	4618      	mov	r0, r3
    2360:	4b08      	ldr	r3, [pc, #32]	; (2384 <pwm_init+0x58>)
    2362:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2364:	68fb      	ldr	r3, [r7, #12]
    2366:	4a08      	ldr	r2, [pc, #32]	; (2388 <pwm_init+0x5c>)
    2368:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	4a07      	ldr	r2, [pc, #28]	; (238c <pwm_init+0x60>)
    236e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2370:	2300      	movs	r3, #0
}
    2372:	4618      	mov	r0, r3
    2374:	3710      	adds	r7, #16
    2376:	46bd      	mov	sp, r7
    2378:	bd80      	pop	{r7, pc}
    237a:	bf00      	nop
    237c:	0000ef44 	.word	0x0000ef44
    2380:	00003511 	.word	0x00003511
    2384:	00007fed 	.word	0x00007fed
    2388:	000023e5 	.word	0x000023e5
    238c:	00002409 	.word	0x00002409

00002390 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	2b00      	cmp	r3, #0
    239c:	bf14      	ite	ne
    239e:	2301      	movne	r3, #1
    23a0:	2300      	moveq	r3, #0
    23a2:	b2db      	uxtb	r3, r3
    23a4:	224a      	movs	r2, #74	; 0x4a
    23a6:	490b      	ldr	r1, [pc, #44]	; (23d4 <pwm_enable+0x44>)
    23a8:	4618      	mov	r0, r3
    23aa:	4b0b      	ldr	r3, [pc, #44]	; (23d8 <pwm_enable+0x48>)
    23ac:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	4618      	mov	r0, r3
    23b2:	4b0a      	ldr	r3, [pc, #40]	; (23dc <pwm_enable+0x4c>)
    23b4:	4798      	blx	r3
    23b6:	4603      	mov	r3, r0
    23b8:	2b00      	cmp	r3, #0
    23ba:	d002      	beq.n	23c2 <pwm_enable+0x32>
		return ERR_DENIED;
    23bc:	f06f 0310 	mvn.w	r3, #16
    23c0:	e004      	b.n	23cc <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	4618      	mov	r0, r3
    23c6:	4b06      	ldr	r3, [pc, #24]	; (23e0 <pwm_enable+0x50>)
    23c8:	4798      	blx	r3

	return ERR_NONE;
    23ca:	2300      	movs	r3, #0
}
    23cc:	4618      	mov	r0, r3
    23ce:	3708      	adds	r7, #8
    23d0:	46bd      	mov	sp, r7
    23d2:	bd80      	pop	{r7, pc}
    23d4:	0000ef44 	.word	0x0000ef44
    23d8:	00003511 	.word	0x00003511
    23dc:	000083dd 	.word	0x000083dd
    23e0:	00008299 	.word	0x00008299

000023e4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b084      	sub	sp, #16
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    23f0:	68fb      	ldr	r3, [r7, #12]
    23f2:	695b      	ldr	r3, [r3, #20]
    23f4:	2b00      	cmp	r3, #0
    23f6:	d003      	beq.n	2400 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	695b      	ldr	r3, [r3, #20]
    23fc:	68f8      	ldr	r0, [r7, #12]
    23fe:	4798      	blx	r3
	}
}
    2400:	bf00      	nop
    2402:	3710      	adds	r7, #16
    2404:	46bd      	mov	sp, r7
    2406:	bd80      	pop	{r7, pc}

00002408 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2408:	b580      	push	{r7, lr}
    240a:	b084      	sub	sp, #16
    240c:	af00      	add	r7, sp, #0
    240e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2414:	68fb      	ldr	r3, [r7, #12]
    2416:	699b      	ldr	r3, [r3, #24]
    2418:	2b00      	cmp	r3, #0
    241a:	d003      	beq.n	2424 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	699b      	ldr	r3, [r3, #24]
    2420:	68f8      	ldr	r0, [r7, #12]
    2422:	4798      	blx	r3
	}
}
    2424:	bf00      	nop
    2426:	3710      	adds	r7, #16
    2428:	46bd      	mov	sp, r7
    242a:	bd80      	pop	{r7, pc}

0000242c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    242c:	b580      	push	{r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
    2434:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	2b00      	cmp	r3, #0
    243a:	d004      	beq.n	2446 <qspi_sync_init+0x1a>
    243c:	683b      	ldr	r3, [r7, #0]
    243e:	2b00      	cmp	r3, #0
    2440:	d001      	beq.n	2446 <qspi_sync_init+0x1a>
    2442:	2301      	movs	r3, #1
    2444:	e000      	b.n	2448 <qspi_sync_init+0x1c>
    2446:	2300      	movs	r3, #0
    2448:	f003 0301 	and.w	r3, r3, #1
    244c:	b2db      	uxtb	r3, r3
    244e:	2231      	movs	r2, #49	; 0x31
    2450:	4906      	ldr	r1, [pc, #24]	; (246c <qspi_sync_init+0x40>)
    2452:	4618      	mov	r0, r3
    2454:	4b06      	ldr	r3, [pc, #24]	; (2470 <qspi_sync_init+0x44>)
    2456:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	6839      	ldr	r1, [r7, #0]
    245c:	4618      	mov	r0, r3
    245e:	4b05      	ldr	r3, [pc, #20]	; (2474 <qspi_sync_init+0x48>)
    2460:	4798      	blx	r3
    2462:	4603      	mov	r3, r0
}
    2464:	4618      	mov	r0, r3
    2466:	3708      	adds	r7, #8
    2468:	46bd      	mov	sp, r7
    246a:	bd80      	pop	{r7, pc}
    246c:	0000ef5c 	.word	0x0000ef5c
    2470:	00003511 	.word	0x00003511
    2474:	000054d5 	.word	0x000054d5

00002478 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2478:	b580      	push	{r7, lr}
    247a:	b082      	sub	sp, #8
    247c:	af00      	add	r7, sp, #0
    247e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	2b00      	cmp	r3, #0
    2484:	bf14      	ite	ne
    2486:	2301      	movne	r3, #1
    2488:	2300      	moveq	r3, #0
    248a:	b2db      	uxtb	r3, r3
    248c:	223f      	movs	r2, #63	; 0x3f
    248e:	4906      	ldr	r1, [pc, #24]	; (24a8 <qspi_sync_enable+0x30>)
    2490:	4618      	mov	r0, r3
    2492:	4b06      	ldr	r3, [pc, #24]	; (24ac <qspi_sync_enable+0x34>)
    2494:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	4618      	mov	r0, r3
    249a:	4b05      	ldr	r3, [pc, #20]	; (24b0 <qspi_sync_enable+0x38>)
    249c:	4798      	blx	r3
    249e:	4603      	mov	r3, r0
}
    24a0:	4618      	mov	r0, r3
    24a2:	3708      	adds	r7, #8
    24a4:	46bd      	mov	sp, r7
    24a6:	bd80      	pop	{r7, pc}
    24a8:	0000ef5c 	.word	0x0000ef5c
    24ac:	00003511 	.word	0x00003511
    24b0:	00005549 	.word	0x00005549

000024b4 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    24b4:	b580      	push	{r7, lr}
    24b6:	b082      	sub	sp, #8
    24b8:	af00      	add	r7, sp, #0
    24ba:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	2b00      	cmp	r3, #0
    24c0:	bf14      	ite	ne
    24c2:	2301      	movne	r3, #1
    24c4:	2300      	moveq	r3, #0
    24c6:	b2db      	uxtb	r3, r3
    24c8:	2246      	movs	r2, #70	; 0x46
    24ca:	4906      	ldr	r1, [pc, #24]	; (24e4 <qspi_sync_disable+0x30>)
    24cc:	4618      	mov	r0, r3
    24ce:	4b06      	ldr	r3, [pc, #24]	; (24e8 <qspi_sync_disable+0x34>)
    24d0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	4618      	mov	r0, r3
    24d6:	4b05      	ldr	r3, [pc, #20]	; (24ec <qspi_sync_disable+0x38>)
    24d8:	4798      	blx	r3
    24da:	4603      	mov	r3, r0
}
    24dc:	4618      	mov	r0, r3
    24de:	3708      	adds	r7, #8
    24e0:	46bd      	mov	sp, r7
    24e2:	bd80      	pop	{r7, pc}
    24e4:	0000ef5c 	.word	0x0000ef5c
    24e8:	00003511 	.word	0x00003511
    24ec:	0000556d 	.word	0x0000556d

000024f0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	b082      	sub	sp, #8
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
    24f8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d004      	beq.n	250a <qspi_sync_serial_run_command+0x1a>
    2500:	683b      	ldr	r3, [r7, #0]
    2502:	2b00      	cmp	r3, #0
    2504:	d001      	beq.n	250a <qspi_sync_serial_run_command+0x1a>
    2506:	2301      	movs	r3, #1
    2508:	e000      	b.n	250c <qspi_sync_serial_run_command+0x1c>
    250a:	2300      	movs	r3, #0
    250c:	f003 0301 	and.w	r3, r3, #1
    2510:	b2db      	uxtb	r3, r3
    2512:	224d      	movs	r2, #77	; 0x4d
    2514:	4906      	ldr	r1, [pc, #24]	; (2530 <qspi_sync_serial_run_command+0x40>)
    2516:	4618      	mov	r0, r3
    2518:	4b06      	ldr	r3, [pc, #24]	; (2534 <qspi_sync_serial_run_command+0x44>)
    251a:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	6839      	ldr	r1, [r7, #0]
    2520:	4618      	mov	r0, r3
    2522:	4b05      	ldr	r3, [pc, #20]	; (2538 <qspi_sync_serial_run_command+0x48>)
    2524:	4798      	blx	r3
    2526:	4603      	mov	r3, r0
}
    2528:	4618      	mov	r0, r3
    252a:	3708      	adds	r7, #8
    252c:	46bd      	mov	sp, r7
    252e:	bd80      	pop	{r7, pc}
    2530:	0000ef5c 	.word	0x0000ef5c
    2534:	00003511 	.word	0x00003511
    2538:	000056b9 	.word	0x000056b9

0000253c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    253c:	b580      	push	{r7, lr}
    253e:	b084      	sub	sp, #16
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
    2544:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2546:	2300      	movs	r3, #0
    2548:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	2b00      	cmp	r3, #0
    254e:	d004      	beq.n	255a <spi_m_sync_init+0x1e>
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d001      	beq.n	255a <spi_m_sync_init+0x1e>
    2556:	2301      	movs	r3, #1
    2558:	e000      	b.n	255c <spi_m_sync_init+0x20>
    255a:	2300      	movs	r3, #0
    255c:	f003 0301 	and.w	r3, r3, #1
    2560:	b2db      	uxtb	r3, r3
    2562:	2240      	movs	r2, #64	; 0x40
    2564:	4910      	ldr	r1, [pc, #64]	; (25a8 <spi_m_sync_init+0x6c>)
    2566:	4618      	mov	r0, r3
    2568:	4b10      	ldr	r3, [pc, #64]	; (25ac <spi_m_sync_init+0x70>)
    256a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	683a      	ldr	r2, [r7, #0]
    2570:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	3304      	adds	r3, #4
    2576:	6839      	ldr	r1, [r7, #0]
    2578:	4618      	mov	r0, r3
    257a:	4b0d      	ldr	r3, [pc, #52]	; (25b0 <spi_m_sync_init+0x74>)
    257c:	4798      	blx	r3
    257e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2580:	68fb      	ldr	r3, [r7, #12]
    2582:	2b00      	cmp	r3, #0
    2584:	da01      	bge.n	258a <spi_m_sync_init+0x4e>
		return rc;
    2586:	68fb      	ldr	r3, [r7, #12]
    2588:	e00a      	b.n	25a0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2590:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	4a07      	ldr	r2, [pc, #28]	; (25b4 <spi_m_sync_init+0x78>)
    2596:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	4a07      	ldr	r2, [pc, #28]	; (25b8 <spi_m_sync_init+0x7c>)
    259c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    259e:	2300      	movs	r3, #0
}
    25a0:	4618      	mov	r0, r3
    25a2:	3710      	adds	r7, #16
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}
    25a8:	0000ef78 	.word	0x0000ef78
    25ac:	00003511 	.word	0x00003511
    25b0:	00006ef1 	.word	0x00006ef1
    25b4:	000025bd 	.word	0x000025bd
    25b8:	00002615 	.word	0x00002615

000025bc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b088      	sub	sp, #32
    25c0:	af00      	add	r7, sp, #0
    25c2:	60f8      	str	r0, [r7, #12]
    25c4:	60b9      	str	r1, [r7, #8]
    25c6:	4613      	mov	r3, r2
    25c8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    25ca:	68fb      	ldr	r3, [r7, #12]
    25cc:	2b00      	cmp	r3, #0
    25ce:	bf14      	ite	ne
    25d0:	2301      	movne	r3, #1
    25d2:	2300      	moveq	r3, #0
    25d4:	b2db      	uxtb	r3, r3
    25d6:	2287      	movs	r2, #135	; 0x87
    25d8:	490b      	ldr	r1, [pc, #44]	; (2608 <_spi_m_sync_io_read+0x4c>)
    25da:	4618      	mov	r0, r3
    25dc:	4b0b      	ldr	r3, [pc, #44]	; (260c <_spi_m_sync_io_read+0x50>)
    25de:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    25e0:	68fb      	ldr	r3, [r7, #12]
    25e2:	3b0c      	subs	r3, #12
    25e4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    25e6:	68bb      	ldr	r3, [r7, #8]
    25e8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    25ea:	2300      	movs	r3, #0
    25ec:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    25ee:	88fb      	ldrh	r3, [r7, #6]
    25f0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    25f2:	f107 0310 	add.w	r3, r7, #16
    25f6:	4619      	mov	r1, r3
    25f8:	69f8      	ldr	r0, [r7, #28]
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <_spi_m_sync_io_read+0x54>)
    25fc:	4798      	blx	r3
    25fe:	4603      	mov	r3, r0
}
    2600:	4618      	mov	r0, r3
    2602:	3720      	adds	r7, #32
    2604:	46bd      	mov	sp, r7
    2606:	bd80      	pop	{r7, pc}
    2608:	0000ef78 	.word	0x0000ef78
    260c:	00003511 	.word	0x00003511
    2610:	0000266d 	.word	0x0000266d

00002614 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2614:	b580      	push	{r7, lr}
    2616:	b088      	sub	sp, #32
    2618:	af00      	add	r7, sp, #0
    261a:	60f8      	str	r0, [r7, #12]
    261c:	60b9      	str	r1, [r7, #8]
    261e:	4613      	mov	r3, r2
    2620:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b00      	cmp	r3, #0
    2626:	bf14      	ite	ne
    2628:	2301      	movne	r3, #1
    262a:	2300      	moveq	r3, #0
    262c:	b2db      	uxtb	r3, r3
    262e:	22a3      	movs	r2, #163	; 0xa3
    2630:	490b      	ldr	r1, [pc, #44]	; (2660 <_spi_m_sync_io_write+0x4c>)
    2632:	4618      	mov	r0, r3
    2634:	4b0b      	ldr	r3, [pc, #44]	; (2664 <_spi_m_sync_io_write+0x50>)
    2636:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2638:	68fb      	ldr	r3, [r7, #12]
    263a:	3b0c      	subs	r3, #12
    263c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    263e:	2300      	movs	r3, #0
    2640:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2642:	68bb      	ldr	r3, [r7, #8]
    2644:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2646:	88fb      	ldrh	r3, [r7, #6]
    2648:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    264a:	f107 0310 	add.w	r3, r7, #16
    264e:	4619      	mov	r1, r3
    2650:	69f8      	ldr	r0, [r7, #28]
    2652:	4b05      	ldr	r3, [pc, #20]	; (2668 <_spi_m_sync_io_write+0x54>)
    2654:	4798      	blx	r3
    2656:	4603      	mov	r3, r0
}
    2658:	4618      	mov	r0, r3
    265a:	3720      	adds	r7, #32
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}
    2660:	0000ef78 	.word	0x0000ef78
    2664:	00003511 	.word	0x00003511
    2668:	0000266d 	.word	0x0000266d

0000266c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    266c:	b580      	push	{r7, lr}
    266e:	b086      	sub	sp, #24
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
    2674:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	2b00      	cmp	r3, #0
    267a:	d004      	beq.n	2686 <spi_m_sync_transfer+0x1a>
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	2b00      	cmp	r3, #0
    2680:	d001      	beq.n	2686 <spi_m_sync_transfer+0x1a>
    2682:	2301      	movs	r3, #1
    2684:	e000      	b.n	2688 <spi_m_sync_transfer+0x1c>
    2686:	2300      	movs	r3, #0
    2688:	f003 0301 	and.w	r3, r3, #1
    268c:	b2db      	uxtb	r3, r3
    268e:	22b3      	movs	r2, #179	; 0xb3
    2690:	490c      	ldr	r1, [pc, #48]	; (26c4 <spi_m_sync_transfer+0x58>)
    2692:	4618      	mov	r0, r3
    2694:	4b0c      	ldr	r3, [pc, #48]	; (26c8 <spi_m_sync_transfer+0x5c>)
    2696:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2698:	683b      	ldr	r3, [r7, #0]
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685b      	ldr	r3, [r3, #4]
    26a2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	689b      	ldr	r3, [r3, #8]
    26a8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	3304      	adds	r3, #4
    26ae:	f107 020c 	add.w	r2, r7, #12
    26b2:	4611      	mov	r1, r2
    26b4:	4618      	mov	r0, r3
    26b6:	4b05      	ldr	r3, [pc, #20]	; (26cc <spi_m_sync_transfer+0x60>)
    26b8:	4798      	blx	r3
    26ba:	4603      	mov	r3, r0
}
    26bc:	4618      	mov	r0, r3
    26be:	3718      	adds	r7, #24
    26c0:	46bd      	mov	sp, r7
    26c2:	bd80      	pop	{r7, pc}
    26c4:	0000ef78 	.word	0x0000ef78
    26c8:	00003511 	.word	0x00003511
    26cc:	00007151 	.word	0x00007151

000026d0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    26d0:	b480      	push	{r7}
    26d2:	b083      	sub	sp, #12
    26d4:	af00      	add	r7, sp, #0
    26d6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	681b      	ldr	r3, [r3, #0]
}
    26dc:	4618      	mov	r0, r3
    26de:	370c      	adds	r7, #12
    26e0:	46bd      	mov	sp, r7
    26e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e6:	4770      	bx	lr

000026e8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    26e8:	b480      	push	{r7}
    26ea:	b083      	sub	sp, #12
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	2b00      	cmp	r3, #0
    26f4:	d002      	beq.n	26fc <list_get_next_element+0x14>
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	e000      	b.n	26fe <list_get_next_element+0x16>
    26fc:	2300      	movs	r3, #0
}
    26fe:	4618      	mov	r0, r3
    2700:	370c      	adds	r7, #12
    2702:	46bd      	mov	sp, r7
    2704:	f85d 7b04 	ldr.w	r7, [sp], #4
    2708:	4770      	bx	lr
	...

0000270c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    270c:	b580      	push	{r7, lr}
    270e:	b084      	sub	sp, #16
    2710:	af00      	add	r7, sp, #0
    2712:	60f8      	str	r0, [r7, #12]
    2714:	60b9      	str	r1, [r7, #8]
    2716:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2718:	68fb      	ldr	r3, [r7, #12]
    271a:	2b00      	cmp	r3, #0
    271c:	d007      	beq.n	272e <timer_init+0x22>
    271e:	68bb      	ldr	r3, [r7, #8]
    2720:	2b00      	cmp	r3, #0
    2722:	d004      	beq.n	272e <timer_init+0x22>
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	2b00      	cmp	r3, #0
    2728:	d001      	beq.n	272e <timer_init+0x22>
    272a:	2301      	movs	r3, #1
    272c:	e000      	b.n	2730 <timer_init+0x24>
    272e:	2300      	movs	r3, #0
    2730:	f003 0301 	and.w	r3, r3, #1
    2734:	b2db      	uxtb	r3, r3
    2736:	223b      	movs	r2, #59	; 0x3b
    2738:	490c      	ldr	r1, [pc, #48]	; (276c <timer_init+0x60>)
    273a:	4618      	mov	r0, r3
    273c:	4b0c      	ldr	r3, [pc, #48]	; (2770 <timer_init+0x64>)
    273e:	4798      	blx	r3
	descr->func = func;
    2740:	68fb      	ldr	r3, [r7, #12]
    2742:	687a      	ldr	r2, [r7, #4]
    2744:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2746:	68fb      	ldr	r3, [r7, #12]
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	68fa      	ldr	r2, [r7, #12]
    274e:	3204      	adds	r2, #4
    2750:	68b9      	ldr	r1, [r7, #8]
    2752:	4610      	mov	r0, r2
    2754:	4798      	blx	r3
	descr->time                           = 0;
    2756:	68fb      	ldr	r3, [r7, #12]
    2758:	2200      	movs	r2, #0
    275a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    275c:	68fb      	ldr	r3, [r7, #12]
    275e:	4a05      	ldr	r2, [pc, #20]	; (2774 <timer_init+0x68>)
    2760:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2762:	2300      	movs	r3, #0
}
    2764:	4618      	mov	r0, r3
    2766:	3710      	adds	r7, #16
    2768:	46bd      	mov	sp, r7
    276a:	bd80      	pop	{r7, pc}
    276c:	0000ef94 	.word	0x0000ef94
    2770:	00003511 	.word	0x00003511
    2774:	00002afd 	.word	0x00002afd

00002778 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2778:	b580      	push	{r7, lr}
    277a:	b082      	sub	sp, #8
    277c:	af00      	add	r7, sp, #0
    277e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	2b00      	cmp	r3, #0
    2784:	d005      	beq.n	2792 <timer_start+0x1a>
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	d001      	beq.n	2792 <timer_start+0x1a>
    278e:	2301      	movs	r3, #1
    2790:	e000      	b.n	2794 <timer_start+0x1c>
    2792:	2300      	movs	r3, #0
    2794:	f003 0301 	and.w	r3, r3, #1
    2798:	b2db      	uxtb	r3, r3
    279a:	2254      	movs	r2, #84	; 0x54
    279c:	490e      	ldr	r1, [pc, #56]	; (27d8 <timer_start+0x60>)
    279e:	4618      	mov	r0, r3
    27a0:	4b0e      	ldr	r3, [pc, #56]	; (27dc <timer_start+0x64>)
    27a2:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	681b      	ldr	r3, [r3, #0]
    27a8:	699b      	ldr	r3, [r3, #24]
    27aa:	687a      	ldr	r2, [r7, #4]
    27ac:	3204      	adds	r2, #4
    27ae:	4610      	mov	r0, r2
    27b0:	4798      	blx	r3
    27b2:	4603      	mov	r3, r0
    27b4:	2b00      	cmp	r3, #0
    27b6:	d002      	beq.n	27be <timer_start+0x46>
		return ERR_DENIED;
    27b8:	f06f 0310 	mvn.w	r3, #16
    27bc:	e007      	b.n	27ce <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	681b      	ldr	r3, [r3, #0]
    27c2:	689b      	ldr	r3, [r3, #8]
    27c4:	687a      	ldr	r2, [r7, #4]
    27c6:	3204      	adds	r2, #4
    27c8:	4610      	mov	r0, r2
    27ca:	4798      	blx	r3

	return ERR_NONE;
    27cc:	2300      	movs	r3, #0
}
    27ce:	4618      	mov	r0, r3
    27d0:	3708      	adds	r7, #8
    27d2:	46bd      	mov	sp, r7
    27d4:	bd80      	pop	{r7, pc}
    27d6:	bf00      	nop
    27d8:	0000ef94 	.word	0x0000ef94
    27dc:	00003511 	.word	0x00003511

000027e0 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b082      	sub	sp, #8
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d005      	beq.n	27fa <timer_stop+0x1a>
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	681b      	ldr	r3, [r3, #0]
    27f2:	2b00      	cmp	r3, #0
    27f4:	d001      	beq.n	27fa <timer_stop+0x1a>
    27f6:	2301      	movs	r3, #1
    27f8:	e000      	b.n	27fc <timer_stop+0x1c>
    27fa:	2300      	movs	r3, #0
    27fc:	f003 0301 	and.w	r3, r3, #1
    2800:	b2db      	uxtb	r3, r3
    2802:	2262      	movs	r2, #98	; 0x62
    2804:	490f      	ldr	r1, [pc, #60]	; (2844 <timer_stop+0x64>)
    2806:	4618      	mov	r0, r3
    2808:	4b0f      	ldr	r3, [pc, #60]	; (2848 <timer_stop+0x68>)
    280a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	699b      	ldr	r3, [r3, #24]
    2812:	687a      	ldr	r2, [r7, #4]
    2814:	3204      	adds	r2, #4
    2816:	4610      	mov	r0, r2
    2818:	4798      	blx	r3
    281a:	4603      	mov	r3, r0
    281c:	f083 0301 	eor.w	r3, r3, #1
    2820:	b2db      	uxtb	r3, r3
    2822:	2b00      	cmp	r3, #0
    2824:	d002      	beq.n	282c <timer_stop+0x4c>
		return ERR_DENIED;
    2826:	f06f 0310 	mvn.w	r3, #16
    282a:	e007      	b.n	283c <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    282c:	687b      	ldr	r3, [r7, #4]
    282e:	681b      	ldr	r3, [r3, #0]
    2830:	68db      	ldr	r3, [r3, #12]
    2832:	687a      	ldr	r2, [r7, #4]
    2834:	3204      	adds	r2, #4
    2836:	4610      	mov	r0, r2
    2838:	4798      	blx	r3

	return ERR_NONE;
    283a:	2300      	movs	r3, #0
}
    283c:	4618      	mov	r0, r3
    283e:	3708      	adds	r7, #8
    2840:	46bd      	mov	sp, r7
    2842:	bd80      	pop	{r7, pc}
    2844:	0000ef94 	.word	0x0000ef94
    2848:	00003511 	.word	0x00003511

0000284c <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    284c:	b580      	push	{r7, lr}
    284e:	b084      	sub	sp, #16
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
    2854:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	2b00      	cmp	r3, #0
    285a:	d008      	beq.n	286e <timer_add_task+0x22>
    285c:	683b      	ldr	r3, [r7, #0]
    285e:	2b00      	cmp	r3, #0
    2860:	d005      	beq.n	286e <timer_add_task+0x22>
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	681b      	ldr	r3, [r3, #0]
    2866:	2b00      	cmp	r3, #0
    2868:	d001      	beq.n	286e <timer_add_task+0x22>
    286a:	2301      	movs	r3, #1
    286c:	e000      	b.n	2870 <timer_add_task+0x24>
    286e:	2300      	movs	r3, #0
    2870:	f003 0301 	and.w	r3, r3, #1
    2874:	b2db      	uxtb	r3, r3
    2876:	227b      	movs	r2, #123	; 0x7b
    2878:	492f      	ldr	r1, [pc, #188]	; (2938 <timer_add_task+0xec>)
    287a:	4618      	mov	r0, r3
    287c:	4b2f      	ldr	r3, [pc, #188]	; (293c <timer_add_task+0xf0>)
    287e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	7f1b      	ldrb	r3, [r3, #28]
    2884:	b2db      	uxtb	r3, r3
    2886:	f043 0301 	orr.w	r3, r3, #1
    288a:	b2da      	uxtb	r2, r3
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	3318      	adds	r3, #24
    2894:	6839      	ldr	r1, [r7, #0]
    2896:	4618      	mov	r0, r3
    2898:	4b29      	ldr	r3, [pc, #164]	; (2940 <timer_add_task+0xf4>)
    289a:	4798      	blx	r3
    289c:	4603      	mov	r3, r0
    289e:	2b00      	cmp	r3, #0
    28a0:	d00f      	beq.n	28c2 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	7f1b      	ldrb	r3, [r3, #28]
    28a6:	b2db      	uxtb	r3, r3
    28a8:	f023 0301 	bic.w	r3, r3, #1
    28ac:	b2da      	uxtb	r2, r3
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    28b2:	2280      	movs	r2, #128	; 0x80
    28b4:	4920      	ldr	r1, [pc, #128]	; (2938 <timer_add_task+0xec>)
    28b6:	2000      	movs	r0, #0
    28b8:	4b20      	ldr	r3, [pc, #128]	; (293c <timer_add_task+0xf0>)
    28ba:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    28bc:	f06f 0311 	mvn.w	r3, #17
    28c0:	e035      	b.n	292e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	695a      	ldr	r2, [r3, #20]
    28c6:	683b      	ldr	r3, [r7, #0]
    28c8:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	f103 0018 	add.w	r0, r3, #24
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	695b      	ldr	r3, [r3, #20]
    28d4:	461a      	mov	r2, r3
    28d6:	6839      	ldr	r1, [r7, #0]
    28d8:	4b1a      	ldr	r3, [pc, #104]	; (2944 <timer_add_task+0xf8>)
    28da:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	7f1b      	ldrb	r3, [r3, #28]
    28e0:	b2db      	uxtb	r3, r3
    28e2:	f023 0301 	bic.w	r3, r3, #1
    28e6:	b2da      	uxtb	r2, r3
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	7f1b      	ldrb	r3, [r3, #28]
    28f0:	b2db      	uxtb	r3, r3
    28f2:	f003 0302 	and.w	r3, r3, #2
    28f6:	2b00      	cmp	r3, #0
    28f8:	d018      	beq.n	292c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    28fa:	f107 030c 	add.w	r3, r7, #12
    28fe:	4618      	mov	r0, r3
    2900:	4b11      	ldr	r3, [pc, #68]	; (2948 <timer_add_task+0xfc>)
    2902:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	7f1b      	ldrb	r3, [r3, #28]
    2908:	b2db      	uxtb	r3, r3
    290a:	f023 0302 	bic.w	r3, r3, #2
    290e:	b2da      	uxtb	r2, r3
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	69db      	ldr	r3, [r3, #28]
    291a:	687a      	ldr	r2, [r7, #4]
    291c:	3204      	adds	r2, #4
    291e:	4610      	mov	r0, r2
    2920:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2922:	f107 030c 	add.w	r3, r7, #12
    2926:	4618      	mov	r0, r3
    2928:	4b08      	ldr	r3, [pc, #32]	; (294c <timer_add_task+0x100>)
    292a:	4798      	blx	r3
	}

	return ERR_NONE;
    292c:	2300      	movs	r3, #0
}
    292e:	4618      	mov	r0, r3
    2930:	3710      	adds	r7, #16
    2932:	46bd      	mov	sp, r7
    2934:	bd80      	pop	{r7, pc}
    2936:	bf00      	nop
    2938:	0000ef94 	.word	0x0000ef94
    293c:	00003511 	.word	0x00003511
    2940:	00003539 	.word	0x00003539
    2944:	00002a4d 	.word	0x00002a4d
    2948:	0000b53d 	.word	0x0000b53d
    294c:	0000b563 	.word	0x0000b563

00002950 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
    2958:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    295a:	687b      	ldr	r3, [r7, #4]
    295c:	2b00      	cmp	r3, #0
    295e:	d008      	beq.n	2972 <timer_remove_task+0x22>
    2960:	683b      	ldr	r3, [r7, #0]
    2962:	2b00      	cmp	r3, #0
    2964:	d005      	beq.n	2972 <timer_remove_task+0x22>
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	2b00      	cmp	r3, #0
    296c:	d001      	beq.n	2972 <timer_remove_task+0x22>
    296e:	2301      	movs	r3, #1
    2970:	e000      	b.n	2974 <timer_remove_task+0x24>
    2972:	2300      	movs	r3, #0
    2974:	f003 0301 	and.w	r3, r3, #1
    2978:	b2db      	uxtb	r3, r3
    297a:	2296      	movs	r2, #150	; 0x96
    297c:	492d      	ldr	r1, [pc, #180]	; (2a34 <timer_remove_task+0xe4>)
    297e:	4618      	mov	r0, r3
    2980:	4b2d      	ldr	r3, [pc, #180]	; (2a38 <timer_remove_task+0xe8>)
    2982:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	7f1b      	ldrb	r3, [r3, #28]
    2988:	b2db      	uxtb	r3, r3
    298a:	f043 0301 	orr.w	r3, r3, #1
    298e:	b2da      	uxtb	r2, r3
    2990:	687b      	ldr	r3, [r7, #4]
    2992:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	3318      	adds	r3, #24
    2998:	6839      	ldr	r1, [r7, #0]
    299a:	4618      	mov	r0, r3
    299c:	4b27      	ldr	r3, [pc, #156]	; (2a3c <timer_remove_task+0xec>)
    299e:	4798      	blx	r3
    29a0:	4603      	mov	r3, r0
    29a2:	f083 0301 	eor.w	r3, r3, #1
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2b00      	cmp	r3, #0
    29aa:	d00f      	beq.n	29cc <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	7f1b      	ldrb	r3, [r3, #28]
    29b0:	b2db      	uxtb	r3, r3
    29b2:	f023 0301 	bic.w	r3, r3, #1
    29b6:	b2da      	uxtb	r2, r3
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    29bc:	229b      	movs	r2, #155	; 0x9b
    29be:	491d      	ldr	r1, [pc, #116]	; (2a34 <timer_remove_task+0xe4>)
    29c0:	2000      	movs	r0, #0
    29c2:	4b1d      	ldr	r3, [pc, #116]	; (2a38 <timer_remove_task+0xe8>)
    29c4:	4798      	blx	r3
		return ERR_NOT_FOUND;
    29c6:	f06f 0309 	mvn.w	r3, #9
    29ca:	e02e      	b.n	2a2a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
    29d0:	6839      	ldr	r1, [r7, #0]
    29d2:	4618      	mov	r0, r3
    29d4:	4b1a      	ldr	r3, [pc, #104]	; (2a40 <timer_remove_task+0xf0>)
    29d6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	7f1b      	ldrb	r3, [r3, #28]
    29dc:	b2db      	uxtb	r3, r3
    29de:	f023 0301 	bic.w	r3, r3, #1
    29e2:	b2da      	uxtb	r2, r3
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	7f1b      	ldrb	r3, [r3, #28]
    29ec:	b2db      	uxtb	r3, r3
    29ee:	f003 0302 	and.w	r3, r3, #2
    29f2:	2b00      	cmp	r3, #0
    29f4:	d018      	beq.n	2a28 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    29f6:	f107 030c 	add.w	r3, r7, #12
    29fa:	4618      	mov	r0, r3
    29fc:	4b11      	ldr	r3, [pc, #68]	; (2a44 <timer_remove_task+0xf4>)
    29fe:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	7f1b      	ldrb	r3, [r3, #28]
    2a04:	b2db      	uxtb	r3, r3
    2a06:	f023 0302 	bic.w	r3, r3, #2
    2a0a:	b2da      	uxtb	r2, r3
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	69db      	ldr	r3, [r3, #28]
    2a16:	687a      	ldr	r2, [r7, #4]
    2a18:	3204      	adds	r2, #4
    2a1a:	4610      	mov	r0, r2
    2a1c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2a1e:	f107 030c 	add.w	r3, r7, #12
    2a22:	4618      	mov	r0, r3
    2a24:	4b08      	ldr	r3, [pc, #32]	; (2a48 <timer_remove_task+0xf8>)
    2a26:	4798      	blx	r3
	}

	return ERR_NONE;
    2a28:	2300      	movs	r3, #0
}
    2a2a:	4618      	mov	r0, r3
    2a2c:	3710      	adds	r7, #16
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd80      	pop	{r7, pc}
    2a32:	bf00      	nop
    2a34:	0000ef94 	.word	0x0000ef94
    2a38:	00003511 	.word	0x00003511
    2a3c:	00003539 	.word	0x00003539
    2a40:	0000369b 	.word	0x0000369b
    2a44:	0000b53d 	.word	0x0000b53d
    2a48:	0000b563 	.word	0x0000b563

00002a4c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b088      	sub	sp, #32
    2a50:	af00      	add	r7, sp, #0
    2a52:	60f8      	str	r0, [r7, #12]
    2a54:	60b9      	str	r1, [r7, #8]
    2a56:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2a58:	2300      	movs	r3, #0
    2a5a:	61bb      	str	r3, [r7, #24]
    2a5c:	68f8      	ldr	r0, [r7, #12]
    2a5e:	4b23      	ldr	r3, [pc, #140]	; (2aec <timer_add_timer_task+0xa0>)
    2a60:	4798      	blx	r3
    2a62:	6138      	str	r0, [r7, #16]

	if (!head) {
    2a64:	693b      	ldr	r3, [r7, #16]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d104      	bne.n	2a74 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2a6a:	68b9      	ldr	r1, [r7, #8]
    2a6c:	68f8      	ldr	r0, [r7, #12]
    2a6e:	4b20      	ldr	r3, [pc, #128]	; (2af0 <timer_add_timer_task+0xa4>)
    2a70:	4798      	blx	r3
		return;
    2a72:	e037      	b.n	2ae4 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a74:	693b      	ldr	r3, [r7, #16]
    2a76:	61fb      	str	r3, [r7, #28]
    2a78:	e022      	b.n	2ac0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2a7a:	69fb      	ldr	r3, [r7, #28]
    2a7c:	685a      	ldr	r2, [r3, #4]
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	429a      	cmp	r2, r3
    2a82:	d808      	bhi.n	2a96 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2a84:	69fb      	ldr	r3, [r7, #28]
    2a86:	689a      	ldr	r2, [r3, #8]
    2a88:	69fb      	ldr	r3, [r7, #28]
    2a8a:	6859      	ldr	r1, [r3, #4]
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	1acb      	subs	r3, r1, r3
    2a90:	4413      	add	r3, r2
    2a92:	617b      	str	r3, [r7, #20]
    2a94:	e009      	b.n	2aaa <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2a96:	69fb      	ldr	r3, [r7, #28]
    2a98:	689a      	ldr	r2, [r3, #8]
    2a9a:	69fb      	ldr	r3, [r7, #28]
    2a9c:	685b      	ldr	r3, [r3, #4]
    2a9e:	441a      	add	r2, r3
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	425b      	negs	r3, r3
    2aa4:	4413      	add	r3, r2
    2aa6:	3301      	adds	r3, #1
    2aa8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2aaa:	68bb      	ldr	r3, [r7, #8]
    2aac:	689a      	ldr	r2, [r3, #8]
    2aae:	697b      	ldr	r3, [r7, #20]
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d909      	bls.n	2ac8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2ab4:	69fb      	ldr	r3, [r7, #28]
    2ab6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ab8:	69f8      	ldr	r0, [r7, #28]
    2aba:	4b0e      	ldr	r3, [pc, #56]	; (2af4 <timer_add_timer_task+0xa8>)
    2abc:	4798      	blx	r3
    2abe:	61f8      	str	r0, [r7, #28]
    2ac0:	69fb      	ldr	r3, [r7, #28]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d1d9      	bne.n	2a7a <timer_add_timer_task+0x2e>
    2ac6:	e000      	b.n	2aca <timer_add_timer_task+0x7e>
			break;
    2ac8:	bf00      	nop
	}

	if (it == head) {
    2aca:	69fa      	ldr	r2, [r7, #28]
    2acc:	693b      	ldr	r3, [r7, #16]
    2ace:	429a      	cmp	r2, r3
    2ad0:	d104      	bne.n	2adc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2ad2:	68b9      	ldr	r1, [r7, #8]
    2ad4:	68f8      	ldr	r0, [r7, #12]
    2ad6:	4b06      	ldr	r3, [pc, #24]	; (2af0 <timer_add_timer_task+0xa4>)
    2ad8:	4798      	blx	r3
    2ada:	e003      	b.n	2ae4 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2adc:	68b9      	ldr	r1, [r7, #8]
    2ade:	69b8      	ldr	r0, [r7, #24]
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <timer_add_timer_task+0xac>)
    2ae2:	4798      	blx	r3
	}
}
    2ae4:	3720      	adds	r7, #32
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop
    2aec:	000026d1 	.word	0x000026d1
    2af0:	00003571 	.word	0x00003571
    2af4:	000026e9 	.word	0x000026e9
    2af8:	000035c9 	.word	0x000035c9

00002afc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b086      	sub	sp, #24
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	3b04      	subs	r3, #4
    2b08:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2b0a:	693b      	ldr	r3, [r7, #16]
    2b0c:	3318      	adds	r3, #24
    2b0e:	4618      	mov	r0, r3
    2b10:	4b27      	ldr	r3, [pc, #156]	; (2bb0 <timer_process_counted+0xb4>)
    2b12:	4798      	blx	r3
    2b14:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2b16:	693b      	ldr	r3, [r7, #16]
    2b18:	695b      	ldr	r3, [r3, #20]
    2b1a:	1c5a      	adds	r2, r3, #1
    2b1c:	693b      	ldr	r3, [r7, #16]
    2b1e:	615a      	str	r2, [r3, #20]
    2b20:	693b      	ldr	r3, [r7, #16]
    2b22:	695b      	ldr	r3, [r3, #20]
    2b24:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2b26:	693b      	ldr	r3, [r7, #16]
    2b28:	7f1b      	ldrb	r3, [r3, #28]
    2b2a:	b2db      	uxtb	r3, r3
    2b2c:	f003 0301 	and.w	r3, r3, #1
    2b30:	2b00      	cmp	r3, #0
    2b32:	d106      	bne.n	2b42 <timer_process_counted+0x46>
    2b34:	693b      	ldr	r3, [r7, #16]
    2b36:	7f1b      	ldrb	r3, [r3, #28]
    2b38:	b2db      	uxtb	r3, r3
    2b3a:	f003 0302 	and.w	r3, r3, #2
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d027      	beq.n	2b92 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b42:	693b      	ldr	r3, [r7, #16]
    2b44:	7f1b      	ldrb	r3, [r3, #28]
    2b46:	b2db      	uxtb	r3, r3
    2b48:	f043 0302 	orr.w	r3, r3, #2
    2b4c:	b2da      	uxtb	r2, r3
    2b4e:	693b      	ldr	r3, [r7, #16]
    2b50:	771a      	strb	r2, [r3, #28]
		return;
    2b52:	e029      	b.n	2ba8 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2b54:	697b      	ldr	r3, [r7, #20]
    2b56:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2b58:	693b      	ldr	r3, [r7, #16]
    2b5a:	3318      	adds	r3, #24
    2b5c:	4618      	mov	r0, r3
    2b5e:	4b15      	ldr	r3, [pc, #84]	; (2bb4 <timer_process_counted+0xb8>)
    2b60:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	7c1b      	ldrb	r3, [r3, #16]
    2b66:	2b01      	cmp	r3, #1
    2b68:	d109      	bne.n	2b7e <timer_process_counted+0x82>
			tmp->time_label = time;
    2b6a:	68bb      	ldr	r3, [r7, #8]
    2b6c:	68fa      	ldr	r2, [r7, #12]
    2b6e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2b70:	693b      	ldr	r3, [r7, #16]
    2b72:	3318      	adds	r3, #24
    2b74:	68fa      	ldr	r2, [r7, #12]
    2b76:	68b9      	ldr	r1, [r7, #8]
    2b78:	4618      	mov	r0, r3
    2b7a:	4b0f      	ldr	r3, [pc, #60]	; (2bb8 <timer_process_counted+0xbc>)
    2b7c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2b7e:	693b      	ldr	r3, [r7, #16]
    2b80:	3318      	adds	r3, #24
    2b82:	4618      	mov	r0, r3
    2b84:	4b0a      	ldr	r3, [pc, #40]	; (2bb0 <timer_process_counted+0xb4>)
    2b86:	4798      	blx	r3
    2b88:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	68db      	ldr	r3, [r3, #12]
    2b8e:	68b8      	ldr	r0, [r7, #8]
    2b90:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2b92:	697b      	ldr	r3, [r7, #20]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d007      	beq.n	2ba8 <timer_process_counted+0xac>
    2b98:	697b      	ldr	r3, [r7, #20]
    2b9a:	685b      	ldr	r3, [r3, #4]
    2b9c:	68fa      	ldr	r2, [r7, #12]
    2b9e:	1ad2      	subs	r2, r2, r3
    2ba0:	697b      	ldr	r3, [r7, #20]
    2ba2:	689b      	ldr	r3, [r3, #8]
    2ba4:	429a      	cmp	r2, r3
    2ba6:	d2d5      	bcs.n	2b54 <timer_process_counted+0x58>
	}
}
    2ba8:	3718      	adds	r7, #24
    2baa:	46bd      	mov	sp, r7
    2bac:	bd80      	pop	{r7, pc}
    2bae:	bf00      	nop
    2bb0:	000026d1 	.word	0x000026d1
    2bb4:	00003669 	.word	0x00003669
    2bb8:	00002a4d 	.word	0x00002a4d

00002bbc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2bbc:	b480      	push	{r7}
    2bbe:	b085      	sub	sp, #20
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	4603      	mov	r3, r0
    2bc4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2bc6:	2300      	movs	r3, #0
    2bc8:	73fb      	strb	r3, [r7, #15]
    2bca:	e029      	b.n	2c20 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bd0:	4a19      	ldr	r2, [pc, #100]	; (2c38 <_usb_d_find_ep+0x7c>)
    2bd2:	015b      	lsls	r3, r3, #5
    2bd4:	4413      	add	r3, r2
    2bd6:	3301      	adds	r3, #1
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	79fa      	ldrb	r2, [r7, #7]
    2bdc:	429a      	cmp	r2, r3
    2bde:	d102      	bne.n	2be6 <_usb_d_find_ep+0x2a>
			return i;
    2be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2be4:	e022      	b.n	2c2c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bea:	4a13      	ldr	r2, [pc, #76]	; (2c38 <_usb_d_find_ep+0x7c>)
    2bec:	015b      	lsls	r3, r3, #5
    2bee:	4413      	add	r3, r2
    2bf0:	781b      	ldrb	r3, [r3, #0]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d10e      	bne.n	2c14 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2bf6:	79fb      	ldrb	r3, [r7, #7]
    2bf8:	f003 030f 	and.w	r3, r3, #15
    2bfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2c00:	490d      	ldr	r1, [pc, #52]	; (2c38 <_usb_d_find_ep+0x7c>)
    2c02:	0152      	lsls	r2, r2, #5
    2c04:	440a      	add	r2, r1
    2c06:	3201      	adds	r2, #1
    2c08:	7812      	ldrb	r2, [r2, #0]
    2c0a:	4293      	cmp	r3, r2
    2c0c:	d102      	bne.n	2c14 <_usb_d_find_ep+0x58>
			return i;
    2c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c12:	e00b      	b.n	2c2c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	3301      	adds	r3, #1
    2c1c:	b2db      	uxtb	r3, r3
    2c1e:	73fb      	strb	r3, [r7, #15]
    2c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2c24:	2b03      	cmp	r3, #3
    2c26:	ddd1      	ble.n	2bcc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2c28:	f04f 33ff 	mov.w	r3, #4294967295
}
    2c2c:	4618      	mov	r0, r3
    2c2e:	3714      	adds	r7, #20
    2c30:	46bd      	mov	sp, r7
    2c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c36:	4770      	bx	lr
    2c38:	200006d8 	.word	0x200006d8

00002c3c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b088      	sub	sp, #32
    2c40:	af00      	add	r7, sp, #0
    2c42:	60ba      	str	r2, [r7, #8]
    2c44:	607b      	str	r3, [r7, #4]
    2c46:	4603      	mov	r3, r0
    2c48:	73fb      	strb	r3, [r7, #15]
    2c4a:	460b      	mov	r3, r1
    2c4c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2c4e:	68bb      	ldr	r3, [r7, #8]
    2c50:	617b      	str	r3, [r7, #20]
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	61bb      	str	r3, [r7, #24]
    2c56:	7bbb      	ldrb	r3, [r7, #14]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d004      	beq.n	2c66 <_usb_d_trans+0x2a>
    2c5c:	7bfb      	ldrb	r3, [r7, #15]
    2c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c62:	b2db      	uxtb	r3, r3
    2c64:	e003      	b.n	2c6e <_usb_d_trans+0x32>
    2c66:	7bfb      	ldrb	r3, [r7, #15]
    2c68:	f003 030f 	and.w	r3, r3, #15
    2c6c:	b2db      	uxtb	r3, r3
    2c6e:	773b      	strb	r3, [r7, #28]
    2c70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2c74:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2c76:	f107 0314 	add.w	r3, r7, #20
    2c7a:	4618      	mov	r0, r3
    2c7c:	4b03      	ldr	r3, [pc, #12]	; (2c8c <_usb_d_trans+0x50>)
    2c7e:	4798      	blx	r3
    2c80:	4603      	mov	r3, r0
}
    2c82:	4618      	mov	r0, r3
    2c84:	3720      	adds	r7, #32
    2c86:	46bd      	mov	sp, r7
    2c88:	bd80      	pop	{r7, pc}
    2c8a:	bf00      	nop
    2c8c:	0000ab71 	.word	0x0000ab71

00002c90 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2c90:	b480      	push	{r7}
    2c92:	b085      	sub	sp, #20
    2c94:	af00      	add	r7, sp, #0
    2c96:	60f8      	str	r0, [r7, #12]
    2c98:	60b9      	str	r1, [r7, #8]
    2c9a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	4618      	mov	r0, r3
    2ca0:	3714      	adds	r7, #20
    2ca2:	46bd      	mov	sp, r7
    2ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca8:	4770      	bx	lr
	...

00002cac <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b086      	sub	sp, #24
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	4603      	mov	r3, r0
    2cb4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2cb6:	79fb      	ldrb	r3, [r7, #7]
    2cb8:	4618      	mov	r0, r3
    2cba:	4b2a      	ldr	r3, [pc, #168]	; (2d64 <usb_d_cb_trans_setup+0xb8>)
    2cbc:	4798      	blx	r3
    2cbe:	4603      	mov	r3, r0
    2cc0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2cc6:	015b      	lsls	r3, r3, #5
    2cc8:	4a27      	ldr	r2, [pc, #156]	; (2d68 <usb_d_cb_trans_setup+0xbc>)
    2cca:	4413      	add	r3, r2
    2ccc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2cce:	693b      	ldr	r3, [r7, #16]
    2cd0:	330c      	adds	r3, #12
    2cd2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2cd4:	79fb      	ldrb	r3, [r7, #7]
    2cd6:	68f9      	ldr	r1, [r7, #12]
    2cd8:	4618      	mov	r0, r3
    2cda:	4b24      	ldr	r3, [pc, #144]	; (2d6c <usb_d_cb_trans_setup+0xc0>)
    2cdc:	4798      	blx	r3
    2cde:	4603      	mov	r3, r0
    2ce0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2ce2:	7afb      	ldrb	r3, [r7, #11]
    2ce4:	2b08      	cmp	r3, #8
    2ce6:	d00d      	beq.n	2d04 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ce8:	79fb      	ldrb	r3, [r7, #7]
    2cea:	2101      	movs	r1, #1
    2cec:	4618      	mov	r0, r3
    2cee:	4b20      	ldr	r3, [pc, #128]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2cf0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2cf2:	79fb      	ldrb	r3, [r7, #7]
    2cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cf8:	b2db      	uxtb	r3, r3
    2cfa:	2101      	movs	r1, #1
    2cfc:	4618      	mov	r0, r3
    2cfe:	4b1c      	ldr	r3, [pc, #112]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2d00:	4798      	blx	r3
		return;
    2d02:	e02b      	b.n	2d5c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2d04:	79fb      	ldrb	r3, [r7, #7]
    2d06:	2100      	movs	r1, #0
    2d08:	4618      	mov	r0, r3
    2d0a:	4b19      	ldr	r3, [pc, #100]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2d0c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2d0e:	79fb      	ldrb	r3, [r7, #7]
    2d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d14:	b2db      	uxtb	r3, r3
    2d16:	2100      	movs	r1, #0
    2d18:	4618      	mov	r0, r3
    2d1a:	4b15      	ldr	r3, [pc, #84]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2d1c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d1e:	693b      	ldr	r3, [r7, #16]
    2d20:	2201      	movs	r2, #1
    2d22:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2d24:	693b      	ldr	r3, [r7, #16]
    2d26:	695b      	ldr	r3, [r3, #20]
    2d28:	79fa      	ldrb	r2, [r7, #7]
    2d2a:	68f9      	ldr	r1, [r7, #12]
    2d2c:	4610      	mov	r0, r2
    2d2e:	4798      	blx	r3
    2d30:	4603      	mov	r3, r0
    2d32:	f083 0301 	eor.w	r3, r3, #1
    2d36:	b2db      	uxtb	r3, r3
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d00f      	beq.n	2d5c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d3c:	693b      	ldr	r3, [r7, #16]
    2d3e:	2205      	movs	r2, #5
    2d40:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d42:	79fb      	ldrb	r3, [r7, #7]
    2d44:	2101      	movs	r1, #1
    2d46:	4618      	mov	r0, r3
    2d48:	4b09      	ldr	r3, [pc, #36]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2d4a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2d4c:	79fb      	ldrb	r3, [r7, #7]
    2d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d52:	b2db      	uxtb	r3, r3
    2d54:	2101      	movs	r1, #1
    2d56:	4618      	mov	r0, r3
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <usb_d_cb_trans_setup+0xc4>)
    2d5a:	4798      	blx	r3
	}
}
    2d5c:	3718      	adds	r7, #24
    2d5e:	46bd      	mov	sp, r7
    2d60:	bd80      	pop	{r7, pc}
    2d62:	bf00      	nop
    2d64:	00002bbd 	.word	0x00002bbd
    2d68:	200006d8 	.word	0x200006d8
    2d6c:	0000aac9 	.word	0x0000aac9
    2d70:	0000a941 	.word	0x0000a941

00002d74 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b084      	sub	sp, #16
    2d78:	af00      	add	r7, sp, #0
    2d7a:	4603      	mov	r3, r0
    2d7c:	6039      	str	r1, [r7, #0]
    2d7e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d80:	79fb      	ldrb	r3, [r7, #7]
    2d82:	4618      	mov	r0, r3
    2d84:	4b0d      	ldr	r3, [pc, #52]	; (2dbc <usb_d_cb_trans_more+0x48>)
    2d86:	4798      	blx	r3
    2d88:	4603      	mov	r3, r0
    2d8a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d90:	015b      	lsls	r3, r3, #5
    2d92:	4a0b      	ldr	r2, [pc, #44]	; (2dc0 <usb_d_cb_trans_more+0x4c>)
    2d94:	4413      	add	r3, r2
    2d96:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2d98:	68bb      	ldr	r3, [r7, #8]
    2d9a:	789b      	ldrb	r3, [r3, #2]
    2d9c:	2b03      	cmp	r3, #3
    2d9e:	d107      	bne.n	2db0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2da0:	68bb      	ldr	r3, [r7, #8]
    2da2:	699b      	ldr	r3, [r3, #24]
    2da4:	79fa      	ldrb	r2, [r7, #7]
    2da6:	6839      	ldr	r1, [r7, #0]
    2da8:	4610      	mov	r0, r2
    2daa:	4798      	blx	r3
    2dac:	4603      	mov	r3, r0
    2dae:	e000      	b.n	2db2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2db0:	2300      	movs	r3, #0
}
    2db2:	4618      	mov	r0, r3
    2db4:	3710      	adds	r7, #16
    2db6:	46bd      	mov	sp, r7
    2db8:	bd80      	pop	{r7, pc}
    2dba:	bf00      	nop
    2dbc:	00002bbd 	.word	0x00002bbd
    2dc0:	200006d8 	.word	0x200006d8

00002dc4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2dc4:	b590      	push	{r4, r7, lr}
    2dc6:	b087      	sub	sp, #28
    2dc8:	af02      	add	r7, sp, #8
    2dca:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	789b      	ldrb	r3, [r3, #2]
    2dd0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	7b1b      	ldrb	r3, [r3, #12]
    2dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2dda:	2b00      	cmp	r3, #0
    2ddc:	bf14      	ite	ne
    2dde:	2301      	movne	r3, #1
    2de0:	2300      	moveq	r3, #0
    2de2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2de4:	7bfb      	ldrb	r3, [r7, #15]
    2de6:	2b03      	cmp	r3, #3
    2de8:	d13a      	bne.n	2e60 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	69db      	ldr	r3, [r3, #28]
    2dee:	687a      	ldr	r2, [r7, #4]
    2df0:	7850      	ldrb	r0, [r2, #1]
    2df2:	687a      	ldr	r2, [r7, #4]
    2df4:	320c      	adds	r2, #12
    2df6:	2101      	movs	r1, #1
    2df8:	4798      	blx	r3
    2dfa:	4603      	mov	r3, r0
    2dfc:	737b      	strb	r3, [r7, #13]
		if (err) {
    2dfe:	7b7b      	ldrb	r3, [r7, #13]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d015      	beq.n	2e30 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	2205      	movs	r2, #5
    2e08:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	2202      	movs	r2, #2
    2e0e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2e10:	7bbb      	ldrb	r3, [r7, #14]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d002      	beq.n	2e1c <usb_d_ctrl_trans_done+0x58>
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	785b      	ldrb	r3, [r3, #1]
    2e1a:	e004      	b.n	2e26 <usb_d_ctrl_trans_done+0x62>
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	785b      	ldrb	r3, [r3, #1]
    2e20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2e24:	b2db      	uxtb	r3, r3
    2e26:	2101      	movs	r1, #1
    2e28:	4618      	mov	r0, r3
    2e2a:	4b15      	ldr	r3, [pc, #84]	; (2e80 <usb_d_ctrl_trans_done+0xbc>)
    2e2c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2e2e:	e022      	b.n	2e76 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2e30:	687b      	ldr	r3, [r7, #4]
    2e32:	2204      	movs	r2, #4
    2e34:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	7858      	ldrb	r0, [r3, #1]
    2e3a:	7bbb      	ldrb	r3, [r7, #14]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	bf14      	ite	ne
    2e40:	2301      	movne	r3, #1
    2e42:	2300      	moveq	r3, #0
    2e44:	b2db      	uxtb	r3, r3
    2e46:	f083 0301 	eor.w	r3, r3, #1
    2e4a:	b2db      	uxtb	r3, r3
    2e4c:	f003 0301 	and.w	r3, r3, #1
    2e50:	b2d9      	uxtb	r1, r3
    2e52:	2301      	movs	r3, #1
    2e54:	9300      	str	r3, [sp, #0]
    2e56:	2300      	movs	r3, #0
    2e58:	2200      	movs	r2, #0
    2e5a:	4c0a      	ldr	r4, [pc, #40]	; (2e84 <usb_d_ctrl_trans_done+0xc0>)
    2e5c:	47a0      	blx	r4
}
    2e5e:	e00a      	b.n	2e76 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	69db      	ldr	r3, [r3, #28]
    2e64:	687a      	ldr	r2, [r7, #4]
    2e66:	7850      	ldrb	r0, [r2, #1]
    2e68:	687a      	ldr	r2, [r7, #4]
    2e6a:	320c      	adds	r2, #12
    2e6c:	2100      	movs	r1, #0
    2e6e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	2202      	movs	r2, #2
    2e74:	709a      	strb	r2, [r3, #2]
}
    2e76:	bf00      	nop
    2e78:	3714      	adds	r7, #20
    2e7a:	46bd      	mov	sp, r7
    2e7c:	bd90      	pop	{r4, r7, pc}
    2e7e:	bf00      	nop
    2e80:	0000a941 	.word	0x0000a941
    2e84:	00002c3d 	.word	0x00002c3d

00002e88 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b086      	sub	sp, #24
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	4603      	mov	r3, r0
    2e90:	60b9      	str	r1, [r7, #8]
    2e92:	607a      	str	r2, [r7, #4]
    2e94:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e96:	7bfb      	ldrb	r3, [r7, #15]
    2e98:	4618      	mov	r0, r3
    2e9a:	4b2f      	ldr	r3, [pc, #188]	; (2f58 <_usb_d_cb_trans_done+0xd0>)
    2e9c:	4798      	blx	r3
    2e9e:	4603      	mov	r3, r0
    2ea0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ea6:	015b      	lsls	r3, r3, #5
    2ea8:	4a2c      	ldr	r2, [pc, #176]	; (2f5c <_usb_d_cb_trans_done+0xd4>)
    2eaa:	4413      	add	r3, r2
    2eac:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2eae:	68bb      	ldr	r3, [r7, #8]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d10e      	bne.n	2ed2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2eb4:	693b      	ldr	r3, [r7, #16]
    2eb6:	2200      	movs	r2, #0
    2eb8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2eba:	693b      	ldr	r3, [r7, #16]
    2ebc:	781b      	ldrb	r3, [r3, #0]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d103      	bne.n	2eca <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2ec2:	6938      	ldr	r0, [r7, #16]
    2ec4:	4b26      	ldr	r3, [pc, #152]	; (2f60 <_usb_d_cb_trans_done+0xd8>)
    2ec6:	4798      	blx	r3
			return;
    2ec8:	e043      	b.n	2f52 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	2201      	movs	r2, #1
    2ece:	709a      	strb	r2, [r3, #2]
    2ed0:	e038      	b.n	2f44 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2ed2:	68bb      	ldr	r3, [r7, #8]
    2ed4:	2b01      	cmp	r3, #1
    2ed6:	d113      	bne.n	2f00 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2ed8:	693b      	ldr	r3, [r7, #16]
    2eda:	2202      	movs	r2, #2
    2edc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ede:	693b      	ldr	r3, [r7, #16]
    2ee0:	781b      	ldrb	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d108      	bne.n	2ef8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ee6:	693b      	ldr	r3, [r7, #16]
    2ee8:	2202      	movs	r2, #2
    2eea:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2eec:	7bfb      	ldrb	r3, [r7, #15]
    2eee:	2100      	movs	r1, #0
    2ef0:	4618      	mov	r0, r3
    2ef2:	4b1c      	ldr	r3, [pc, #112]	; (2f64 <_usb_d_cb_trans_done+0xdc>)
    2ef4:	4798      	blx	r3
    2ef6:	e025      	b.n	2f44 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ef8:	693b      	ldr	r3, [r7, #16]
    2efa:	2205      	movs	r2, #5
    2efc:	709a      	strb	r2, [r3, #2]
    2efe:	e021      	b.n	2f44 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2f00:	68bb      	ldr	r3, [r7, #8]
    2f02:	2b02      	cmp	r3, #2
    2f04:	d10e      	bne.n	2f24 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2f06:	693b      	ldr	r3, [r7, #16]
    2f08:	2204      	movs	r2, #4
    2f0a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2f0c:	693b      	ldr	r3, [r7, #16]
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d103      	bne.n	2f1c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2f14:	693b      	ldr	r3, [r7, #16]
    2f16:	2202      	movs	r2, #2
    2f18:	709a      	strb	r2, [r3, #2]
			return;
    2f1a:	e01a      	b.n	2f52 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2f1c:	693b      	ldr	r3, [r7, #16]
    2f1e:	2201      	movs	r2, #1
    2f20:	709a      	strb	r2, [r3, #2]
    2f22:	e00f      	b.n	2f44 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2f24:	68bb      	ldr	r3, [r7, #8]
    2f26:	2b03      	cmp	r3, #3
    2f28:	d106      	bne.n	2f38 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2f2a:	693b      	ldr	r3, [r7, #16]
    2f2c:	2200      	movs	r2, #0
    2f2e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2f30:	693b      	ldr	r3, [r7, #16]
    2f32:	2205      	movs	r2, #5
    2f34:	70da      	strb	r2, [r3, #3]
    2f36:	e005      	b.n	2f44 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2f38:	693b      	ldr	r3, [r7, #16]
    2f3a:	2206      	movs	r2, #6
    2f3c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2f3e:	693b      	ldr	r3, [r7, #16]
    2f40:	2206      	movs	r2, #6
    2f42:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2f44:	693b      	ldr	r3, [r7, #16]
    2f46:	69db      	ldr	r3, [r3, #28]
    2f48:	693a      	ldr	r2, [r7, #16]
    2f4a:	78d1      	ldrb	r1, [r2, #3]
    2f4c:	687a      	ldr	r2, [r7, #4]
    2f4e:	7bf8      	ldrb	r0, [r7, #15]
    2f50:	4798      	blx	r3
}
    2f52:	3718      	adds	r7, #24
    2f54:	46bd      	mov	sp, r7
    2f56:	bd80      	pop	{r7, pc}
    2f58:	00002bbd 	.word	0x00002bbd
    2f5c:	200006d8 	.word	0x200006d8
    2f60:	00002dc5 	.word	0x00002dc5
    2f64:	0000a941 	.word	0x0000a941

00002f68 <usb_d_init>:

int32_t usb_d_init(void)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2f6e:	4b21      	ldr	r3, [pc, #132]	; (2ff4 <usb_d_init+0x8c>)
    2f70:	4798      	blx	r3
    2f72:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2f74:	683b      	ldr	r3, [r7, #0]
    2f76:	2b00      	cmp	r3, #0
    2f78:	da01      	bge.n	2f7e <usb_d_init+0x16>
		return rc;
    2f7a:	683b      	ldr	r3, [r7, #0]
    2f7c:	e036      	b.n	2fec <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2f7e:	2280      	movs	r2, #128	; 0x80
    2f80:	2100      	movs	r1, #0
    2f82:	481d      	ldr	r0, [pc, #116]	; (2ff8 <usb_d_init+0x90>)
    2f84:	4b1d      	ldr	r3, [pc, #116]	; (2ffc <usb_d_init+0x94>)
    2f86:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f88:	2300      	movs	r3, #0
    2f8a:	71fb      	strb	r3, [r7, #7]
    2f8c:	e01e      	b.n	2fcc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2f8e:	79fb      	ldrb	r3, [r7, #7]
    2f90:	4a19      	ldr	r2, [pc, #100]	; (2ff8 <usb_d_init+0x90>)
    2f92:	015b      	lsls	r3, r3, #5
    2f94:	4413      	add	r3, r2
    2f96:	3301      	adds	r3, #1
    2f98:	22ff      	movs	r2, #255	; 0xff
    2f9a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2f9c:	79fb      	ldrb	r3, [r7, #7]
    2f9e:	4a16      	ldr	r2, [pc, #88]	; (2ff8 <usb_d_init+0x90>)
    2fa0:	015b      	lsls	r3, r3, #5
    2fa2:	4413      	add	r3, r2
    2fa4:	3314      	adds	r3, #20
    2fa6:	4a16      	ldr	r2, [pc, #88]	; (3000 <usb_d_init+0x98>)
    2fa8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2faa:	79fb      	ldrb	r3, [r7, #7]
    2fac:	4a12      	ldr	r2, [pc, #72]	; (2ff8 <usb_d_init+0x90>)
    2fae:	015b      	lsls	r3, r3, #5
    2fb0:	4413      	add	r3, r2
    2fb2:	3318      	adds	r3, #24
    2fb4:	4a12      	ldr	r2, [pc, #72]	; (3000 <usb_d_init+0x98>)
    2fb6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2fb8:	79fb      	ldrb	r3, [r7, #7]
    2fba:	4a0f      	ldr	r2, [pc, #60]	; (2ff8 <usb_d_init+0x90>)
    2fbc:	015b      	lsls	r3, r3, #5
    2fbe:	4413      	add	r3, r2
    2fc0:	331c      	adds	r3, #28
    2fc2:	4a0f      	ldr	r2, [pc, #60]	; (3000 <usb_d_init+0x98>)
    2fc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2fc6:	79fb      	ldrb	r3, [r7, #7]
    2fc8:	3301      	adds	r3, #1
    2fca:	71fb      	strb	r3, [r7, #7]
    2fcc:	79fb      	ldrb	r3, [r7, #7]
    2fce:	2b03      	cmp	r3, #3
    2fd0:	d9dd      	bls.n	2f8e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2fd2:	490c      	ldr	r1, [pc, #48]	; (3004 <usb_d_init+0x9c>)
    2fd4:	2000      	movs	r0, #0
    2fd6:	4b0c      	ldr	r3, [pc, #48]	; (3008 <usb_d_init+0xa0>)
    2fd8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2fda:	490c      	ldr	r1, [pc, #48]	; (300c <usb_d_init+0xa4>)
    2fdc:	2001      	movs	r0, #1
    2fde:	4b0a      	ldr	r3, [pc, #40]	; (3008 <usb_d_init+0xa0>)
    2fe0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2fe2:	490b      	ldr	r1, [pc, #44]	; (3010 <usb_d_init+0xa8>)
    2fe4:	2002      	movs	r0, #2
    2fe6:	4b08      	ldr	r3, [pc, #32]	; (3008 <usb_d_init+0xa0>)
    2fe8:	4798      	blx	r3
	return ERR_NONE;
    2fea:	2300      	movs	r3, #0
}
    2fec:	4618      	mov	r0, r3
    2fee:	3708      	adds	r7, #8
    2ff0:	46bd      	mov	sp, r7
    2ff2:	bd80      	pop	{r7, pc}
    2ff4:	0000a189 	.word	0x0000a189
    2ff8:	200006d8 	.word	0x200006d8
    2ffc:	0000eb3d 	.word	0x0000eb3d
    3000:	00002c91 	.word	0x00002c91
    3004:	00002cad 	.word	0x00002cad
    3008:	0000add1 	.word	0x0000add1
    300c:	00002d75 	.word	0x00002d75
    3010:	00002e89 	.word	0x00002e89

00003014 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3014:	b580      	push	{r7, lr}
    3016:	b082      	sub	sp, #8
    3018:	af00      	add	r7, sp, #0
    301a:	4603      	mov	r3, r0
    301c:	6039      	str	r1, [r7, #0]
    301e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3020:	79fb      	ldrb	r3, [r7, #7]
    3022:	6839      	ldr	r1, [r7, #0]
    3024:	4618      	mov	r0, r3
    3026:	4b03      	ldr	r3, [pc, #12]	; (3034 <usb_d_register_callback+0x20>)
    3028:	4798      	blx	r3
}
    302a:	bf00      	nop
    302c:	3708      	adds	r7, #8
    302e:	46bd      	mov	sp, r7
    3030:	bd80      	pop	{r7, pc}
    3032:	bf00      	nop
    3034:	0000ad89 	.word	0x0000ad89

00003038 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3038:	b580      	push	{r7, lr}
    303a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    303c:	4b02      	ldr	r3, [pc, #8]	; (3048 <usb_d_enable+0x10>)
    303e:	4798      	blx	r3
    3040:	4603      	mov	r3, r0
}
    3042:	4618      	mov	r0, r3
    3044:	bd80      	pop	{r7, pc}
    3046:	bf00      	nop
    3048:	0000a279 	.word	0x0000a279

0000304c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    304c:	b580      	push	{r7, lr}
    304e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3050:	4b01      	ldr	r3, [pc, #4]	; (3058 <usb_d_attach+0xc>)
    3052:	4798      	blx	r3
}
    3054:	bf00      	nop
    3056:	bd80      	pop	{r7, pc}
    3058:	0000a2fd 	.word	0x0000a2fd

0000305c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    305c:	b580      	push	{r7, lr}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
    3062:	4603      	mov	r3, r0
    3064:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3066:	79fb      	ldrb	r3, [r7, #7]
    3068:	4618      	mov	r0, r3
    306a:	4b03      	ldr	r3, [pc, #12]	; (3078 <usb_d_set_address+0x1c>)
    306c:	4798      	blx	r3
}
    306e:	bf00      	nop
    3070:	3708      	adds	r7, #8
    3072:	46bd      	mov	sp, r7
    3074:	bd80      	pop	{r7, pc}
    3076:	bf00      	nop
    3078:	0000a311 	.word	0x0000a311

0000307c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    307c:	b580      	push	{r7, lr}
    307e:	b082      	sub	sp, #8
    3080:	af00      	add	r7, sp, #0
    3082:	4603      	mov	r3, r0
    3084:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3086:	79fb      	ldrb	r3, [r7, #7]
    3088:	b29b      	uxth	r3, r3
    308a:	461a      	mov	r2, r3
    308c:	2100      	movs	r1, #0
    308e:	2000      	movs	r0, #0
    3090:	4b03      	ldr	r3, [pc, #12]	; (30a0 <usb_d_ep0_init+0x24>)
    3092:	4798      	blx	r3
    3094:	4603      	mov	r3, r0
}
    3096:	4618      	mov	r0, r3
    3098:	3708      	adds	r7, #8
    309a:	46bd      	mov	sp, r7
    309c:	bd80      	pop	{r7, pc}
    309e:	bf00      	nop
    30a0:	000030a5 	.word	0x000030a5

000030a4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    30a4:	b580      	push	{r7, lr}
    30a6:	b086      	sub	sp, #24
    30a8:	af00      	add	r7, sp, #0
    30aa:	4603      	mov	r3, r0
    30ac:	71fb      	strb	r3, [r7, #7]
    30ae:	460b      	mov	r3, r1
    30b0:	71bb      	strb	r3, [r7, #6]
    30b2:	4613      	mov	r3, r2
    30b4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    30b6:	79fb      	ldrb	r3, [r7, #7]
    30b8:	4618      	mov	r0, r3
    30ba:	4b1e      	ldr	r3, [pc, #120]	; (3134 <usb_d_ep_init+0x90>)
    30bc:	4798      	blx	r3
    30be:	4603      	mov	r3, r0
    30c0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    30c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30c6:	015b      	lsls	r3, r3, #5
    30c8:	4a1b      	ldr	r2, [pc, #108]	; (3138 <usb_d_ep_init+0x94>)
    30ca:	4413      	add	r3, r2
    30cc:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    30ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30d2:	2b00      	cmp	r3, #0
    30d4:	db02      	blt.n	30dc <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    30d6:	f06f 0313 	mvn.w	r3, #19
    30da:	e027      	b.n	312c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    30dc:	20ff      	movs	r0, #255	; 0xff
    30de:	4b15      	ldr	r3, [pc, #84]	; (3134 <usb_d_ep_init+0x90>)
    30e0:	4798      	blx	r3
    30e2:	4603      	mov	r3, r0
    30e4:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    30e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30ea:	2b00      	cmp	r3, #0
    30ec:	da02      	bge.n	30f4 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    30ee:	f06f 0314 	mvn.w	r3, #20
    30f2:	e01b      	b.n	312c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    30f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30f8:	015b      	lsls	r3, r3, #5
    30fa:	4a0f      	ldr	r2, [pc, #60]	; (3138 <usb_d_ep_init+0x94>)
    30fc:	4413      	add	r3, r2
    30fe:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3100:	88ba      	ldrh	r2, [r7, #4]
    3102:	79b9      	ldrb	r1, [r7, #6]
    3104:	79fb      	ldrb	r3, [r7, #7]
    3106:	4618      	mov	r0, r3
    3108:	4b0c      	ldr	r3, [pc, #48]	; (313c <usb_d_ep_init+0x98>)
    310a:	4798      	blx	r3
    310c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    310e:	68fb      	ldr	r3, [r7, #12]
    3110:	2b00      	cmp	r3, #0
    3112:	da01      	bge.n	3118 <usb_d_ep_init+0x74>
		return rc;
    3114:	68fb      	ldr	r3, [r7, #12]
    3116:	e009      	b.n	312c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3118:	693b      	ldr	r3, [r7, #16]
    311a:	79fa      	ldrb	r2, [r7, #7]
    311c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    311e:	79bb      	ldrb	r3, [r7, #6]
    3120:	f003 0303 	and.w	r3, r3, #3
    3124:	b2da      	uxtb	r2, r3
    3126:	693b      	ldr	r3, [r7, #16]
    3128:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    312a:	2300      	movs	r3, #0
}
    312c:	4618      	mov	r0, r3
    312e:	3718      	adds	r7, #24
    3130:	46bd      	mov	sp, r7
    3132:	bd80      	pop	{r7, pc}
    3134:	00002bbd 	.word	0x00002bbd
    3138:	200006d8 	.word	0x200006d8
    313c:	0000a3b1 	.word	0x0000a3b1

00003140 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3140:	b580      	push	{r7, lr}
    3142:	b084      	sub	sp, #16
    3144:	af00      	add	r7, sp, #0
    3146:	4603      	mov	r3, r0
    3148:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    314a:	79fb      	ldrb	r3, [r7, #7]
    314c:	4618      	mov	r0, r3
    314e:	4b0d      	ldr	r3, [pc, #52]	; (3184 <usb_d_ep_deinit+0x44>)
    3150:	4798      	blx	r3
    3152:	4603      	mov	r3, r0
    3154:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3156:	f997 300f 	ldrsb.w	r3, [r7, #15]
    315a:	015b      	lsls	r3, r3, #5
    315c:	4a0a      	ldr	r2, [pc, #40]	; (3188 <usb_d_ep_deinit+0x48>)
    315e:	4413      	add	r3, r2
    3160:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3162:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3166:	2b00      	cmp	r3, #0
    3168:	db07      	blt.n	317a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    316a:	79fb      	ldrb	r3, [r7, #7]
    316c:	4618      	mov	r0, r3
    316e:	4b07      	ldr	r3, [pc, #28]	; (318c <usb_d_ep_deinit+0x4c>)
    3170:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3172:	68bb      	ldr	r3, [r7, #8]
    3174:	22ff      	movs	r2, #255	; 0xff
    3176:	705a      	strb	r2, [r3, #1]
    3178:	e000      	b.n	317c <usb_d_ep_deinit+0x3c>
		return;
    317a:	bf00      	nop
}
    317c:	3710      	adds	r7, #16
    317e:	46bd      	mov	sp, r7
    3180:	bd80      	pop	{r7, pc}
    3182:	bf00      	nop
    3184:	00002bbd 	.word	0x00002bbd
    3188:	200006d8 	.word	0x200006d8
    318c:	0000a4e5 	.word	0x0000a4e5

00003190 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3190:	b580      	push	{r7, lr}
    3192:	b086      	sub	sp, #24
    3194:	af00      	add	r7, sp, #0
    3196:	4603      	mov	r3, r0
    3198:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    319a:	79fb      	ldrb	r3, [r7, #7]
    319c:	4618      	mov	r0, r3
    319e:	4b15      	ldr	r3, [pc, #84]	; (31f4 <usb_d_ep_enable+0x64>)
    31a0:	4798      	blx	r3
    31a2:	4603      	mov	r3, r0
    31a4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    31aa:	015b      	lsls	r3, r3, #5
    31ac:	4a12      	ldr	r2, [pc, #72]	; (31f8 <usb_d_ep_enable+0x68>)
    31ae:	4413      	add	r3, r2
    31b0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    31b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    31b6:	2b00      	cmp	r3, #0
    31b8:	da02      	bge.n	31c0 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    31ba:	f06f 0311 	mvn.w	r3, #17
    31be:	e014      	b.n	31ea <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    31c0:	693b      	ldr	r3, [r7, #16]
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d101      	bne.n	31cc <usb_d_ep_enable+0x3c>
    31c8:	2202      	movs	r2, #2
    31ca:	e000      	b.n	31ce <usb_d_ep_enable+0x3e>
    31cc:	2201      	movs	r2, #1
    31ce:	693b      	ldr	r3, [r7, #16]
    31d0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    31d2:	79fb      	ldrb	r3, [r7, #7]
    31d4:	4618      	mov	r0, r3
    31d6:	4b09      	ldr	r3, [pc, #36]	; (31fc <usb_d_ep_enable+0x6c>)
    31d8:	4798      	blx	r3
    31da:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	2b00      	cmp	r3, #0
    31e0:	da02      	bge.n	31e8 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    31e2:	693b      	ldr	r3, [r7, #16]
    31e4:	2200      	movs	r2, #0
    31e6:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    31e8:	68fb      	ldr	r3, [r7, #12]
}
    31ea:	4618      	mov	r0, r3
    31ec:	3718      	adds	r7, #24
    31ee:	46bd      	mov	sp, r7
    31f0:	bd80      	pop	{r7, pc}
    31f2:	bf00      	nop
    31f4:	00002bbd 	.word	0x00002bbd
    31f8:	200006d8 	.word	0x200006d8
    31fc:	0000a5c9 	.word	0x0000a5c9

00003200 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3200:	b590      	push	{r4, r7, lr}
    3202:	b08d      	sub	sp, #52	; 0x34
    3204:	af02      	add	r7, sp, #8
    3206:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	7a1b      	ldrb	r3, [r3, #8]
    320c:	4618      	mov	r0, r3
    320e:	4b51      	ldr	r3, [pc, #324]	; (3354 <usb_d_ep_transfer+0x154>)
    3210:	4798      	blx	r3
    3212:	4603      	mov	r3, r0
    3214:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3216:	f997 301f 	ldrsb.w	r3, [r7, #31]
    321a:	015b      	lsls	r3, r3, #5
    321c:	4a4e      	ldr	r2, [pc, #312]	; (3358 <usb_d_ep_transfer+0x158>)
    321e:	4413      	add	r3, r2
    3220:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	7a1b      	ldrb	r3, [r3, #8]
    3226:	f003 0380 	and.w	r3, r3, #128	; 0x80
    322a:	2b00      	cmp	r3, #0
    322c:	bf14      	ite	ne
    322e:	2301      	movne	r3, #1
    3230:	2300      	moveq	r3, #0
    3232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3236:	687b      	ldr	r3, [r7, #4]
    3238:	7a5b      	ldrb	r3, [r3, #9]
    323a:	2b00      	cmp	r3, #0
    323c:	bf14      	ite	ne
    323e:	2301      	movne	r3, #1
    3240:	2300      	moveq	r3, #0
    3242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	685b      	ldr	r3, [r3, #4]
    324a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    324c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3250:	2b00      	cmp	r3, #0
    3252:	da02      	bge.n	325a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3254:	f06f 0311 	mvn.w	r3, #17
    3258:	e077      	b.n	334a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    325a:	f107 0308 	add.w	r3, r7, #8
    325e:	4618      	mov	r0, r3
    3260:	4b3e      	ldr	r3, [pc, #248]	; (335c <usb_d_ep_transfer+0x15c>)
    3262:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3264:	69bb      	ldr	r3, [r7, #24]
    3266:	789b      	ldrb	r3, [r3, #2]
    3268:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    326a:	7bfb      	ldrb	r3, [r7, #15]
    326c:	b2db      	uxtb	r3, r3
    326e:	2b01      	cmp	r3, #1
    3270:	d10c      	bne.n	328c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3272:	69bb      	ldr	r3, [r7, #24]
    3274:	2203      	movs	r2, #3
    3276:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3278:	f107 0308 	add.w	r3, r7, #8
    327c:	4618      	mov	r0, r3
    327e:	4b38      	ldr	r3, [pc, #224]	; (3360 <usb_d_ep_transfer+0x160>)
    3280:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3282:	69bb      	ldr	r3, [r7, #24]
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2b00      	cmp	r3, #0
    3288:	d151      	bne.n	332e <usb_d_ep_transfer+0x12e>
    328a:	e017      	b.n	32bc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    328c:	f107 0308 	add.w	r3, r7, #8
    3290:	4618      	mov	r0, r3
    3292:	4b33      	ldr	r3, [pc, #204]	; (3360 <usb_d_ep_transfer+0x160>)
    3294:	4798      	blx	r3
		switch (state) {
    3296:	7bfb      	ldrb	r3, [r7, #15]
    3298:	b2db      	uxtb	r3, r3
    329a:	2b05      	cmp	r3, #5
    329c:	d004      	beq.n	32a8 <usb_d_ep_transfer+0xa8>
    329e:	2b06      	cmp	r3, #6
    32a0:	d004      	beq.n	32ac <usb_d_ep_transfer+0xac>
    32a2:	2b00      	cmp	r3, #0
    32a4:	d005      	beq.n	32b2 <usb_d_ep_transfer+0xb2>
    32a6:	e007      	b.n	32b8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    32a8:	2302      	movs	r3, #2
    32aa:	e04e      	b.n	334a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    32ac:	f06f 030f 	mvn.w	r3, #15
    32b0:	e04b      	b.n	334a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    32b2:	f06f 0312 	mvn.w	r3, #18
    32b6:	e048      	b.n	334a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    32b8:	2301      	movs	r3, #1
    32ba:	e046      	b.n	334a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    32bc:	69bb      	ldr	r3, [r7, #24]
    32be:	7c9b      	ldrb	r3, [r3, #18]
    32c0:	b29a      	uxth	r2, r3
    32c2:	69bb      	ldr	r3, [r7, #24]
    32c4:	7cdb      	ldrb	r3, [r3, #19]
    32c6:	b29b      	uxth	r3, r3
    32c8:	021b      	lsls	r3, r3, #8
    32ca:	b29b      	uxth	r3, r3
    32cc:	4413      	add	r3, r2
    32ce:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    32d0:	8afb      	ldrh	r3, [r7, #22]
    32d2:	2b00      	cmp	r3, #0
    32d4:	d10b      	bne.n	32ee <usb_d_ep_transfer+0xee>
			dir                 = true;
    32d6:	2301      	movs	r3, #1
    32d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    32dc:	2300      	movs	r3, #0
    32de:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    32e0:	2301      	movs	r3, #1
    32e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    32e6:	69bb      	ldr	r3, [r7, #24]
    32e8:	2204      	movs	r2, #4
    32ea:	709a      	strb	r2, [r3, #2]
    32ec:	e01f      	b.n	332e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    32ee:	69bb      	ldr	r3, [r7, #24]
    32f0:	7b1b      	ldrb	r3, [r3, #12]
    32f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    32f6:	2b00      	cmp	r3, #0
    32f8:	bf14      	ite	ne
    32fa:	2301      	movne	r3, #1
    32fc:	2300      	moveq	r3, #0
    32fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3302:	8afa      	ldrh	r2, [r7, #22]
    3304:	6a3b      	ldr	r3, [r7, #32]
    3306:	429a      	cmp	r2, r3
    3308:	d201      	bcs.n	330e <usb_d_ep_transfer+0x10e>
				len = req_len;
    330a:	8afb      	ldrh	r3, [r7, #22]
    330c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    330e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3312:	2b00      	cmp	r3, #0
    3314:	d008      	beq.n	3328 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3316:	8afa      	ldrh	r2, [r7, #22]
    3318:	6a3b      	ldr	r3, [r7, #32]
    331a:	429a      	cmp	r2, r3
    331c:	bf8c      	ite	hi
    331e:	2301      	movhi	r3, #1
    3320:	2300      	movls	r3, #0
    3322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3326:	e002      	b.n	332e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3328:	2300      	movs	r3, #0
    332a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	7a18      	ldrb	r0, [r3, #8]
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	681a      	ldr	r2, [r3, #0]
    3336:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    333a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    333e:	9300      	str	r3, [sp, #0]
    3340:	6a3b      	ldr	r3, [r7, #32]
    3342:	4c08      	ldr	r4, [pc, #32]	; (3364 <usb_d_ep_transfer+0x164>)
    3344:	47a0      	blx	r4
    3346:	6138      	str	r0, [r7, #16]
	return rc;
    3348:	693b      	ldr	r3, [r7, #16]
}
    334a:	4618      	mov	r0, r3
    334c:	372c      	adds	r7, #44	; 0x2c
    334e:	46bd      	mov	sp, r7
    3350:	bd90      	pop	{r4, r7, pc}
    3352:	bf00      	nop
    3354:	00002bbd 	.word	0x00002bbd
    3358:	200006d8 	.word	0x200006d8
    335c:	0000b53d 	.word	0x0000b53d
    3360:	0000b563 	.word	0x0000b563
    3364:	00002c3d 	.word	0x00002c3d

00003368 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3368:	b580      	push	{r7, lr}
    336a:	b084      	sub	sp, #16
    336c:	af00      	add	r7, sp, #0
    336e:	4603      	mov	r3, r0
    3370:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3372:	79fb      	ldrb	r3, [r7, #7]
    3374:	4618      	mov	r0, r3
    3376:	4b0e      	ldr	r3, [pc, #56]	; (33b0 <usb_d_ep_abort+0x48>)
    3378:	4798      	blx	r3
    337a:	4603      	mov	r3, r0
    337c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3382:	015b      	lsls	r3, r3, #5
    3384:	4a0b      	ldr	r2, [pc, #44]	; (33b4 <usb_d_ep_abort+0x4c>)
    3386:	4413      	add	r3, r2
    3388:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    338e:	2b00      	cmp	r3, #0
    3390:	db0a      	blt.n	33a8 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3392:	79fb      	ldrb	r3, [r7, #7]
    3394:	4618      	mov	r0, r3
    3396:	4b08      	ldr	r3, [pc, #32]	; (33b8 <usb_d_ep_abort+0x50>)
    3398:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    339a:	68bb      	ldr	r3, [r7, #8]
    339c:	2201      	movs	r2, #1
    339e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    33a0:	68bb      	ldr	r3, [r7, #8]
    33a2:	2204      	movs	r2, #4
    33a4:	70da      	strb	r2, [r3, #3]
    33a6:	e000      	b.n	33aa <usb_d_ep_abort+0x42>
		return;
    33a8:	bf00      	nop
}
    33aa:	3710      	adds	r7, #16
    33ac:	46bd      	mov	sp, r7
    33ae:	bd80      	pop	{r7, pc}
    33b0:	00002bbd 	.word	0x00002bbd
    33b4:	200006d8 	.word	0x200006d8
    33b8:	0000ad35 	.word	0x0000ad35

000033bc <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    33bc:	b580      	push	{r7, lr}
    33be:	b086      	sub	sp, #24
    33c0:	af00      	add	r7, sp, #0
    33c2:	4603      	mov	r3, r0
    33c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    33c6:	79fb      	ldrb	r3, [r7, #7]
    33c8:	4618      	mov	r0, r3
    33ca:	4b1a      	ldr	r3, [pc, #104]	; (3434 <_usb_d_ep_halt_clr+0x78>)
    33cc:	4798      	blx	r3
    33ce:	4603      	mov	r3, r0
    33d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    33d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33d6:	015b      	lsls	r3, r3, #5
    33d8:	4a17      	ldr	r2, [pc, #92]	; (3438 <_usb_d_ep_halt_clr+0x7c>)
    33da:	4413      	add	r3, r2
    33dc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    33de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    33e2:	2b00      	cmp	r3, #0
    33e4:	da02      	bge.n	33ec <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    33e6:	f06f 0311 	mvn.w	r3, #17
    33ea:	e01f      	b.n	342c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    33ec:	79fb      	ldrb	r3, [r7, #7]
    33ee:	2102      	movs	r1, #2
    33f0:	4618      	mov	r0, r3
    33f2:	4b12      	ldr	r3, [pc, #72]	; (343c <_usb_d_ep_halt_clr+0x80>)
    33f4:	4798      	blx	r3
    33f6:	4603      	mov	r3, r0
    33f8:	2b00      	cmp	r3, #0
    33fa:	d016      	beq.n	342a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    33fc:	79fb      	ldrb	r3, [r7, #7]
    33fe:	2100      	movs	r1, #0
    3400:	4618      	mov	r0, r3
    3402:	4b0e      	ldr	r3, [pc, #56]	; (343c <_usb_d_ep_halt_clr+0x80>)
    3404:	4798      	blx	r3
    3406:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	2b00      	cmp	r3, #0
    340c:	da01      	bge.n	3412 <_usb_d_ep_halt_clr+0x56>
			return rc;
    340e:	68fb      	ldr	r3, [r7, #12]
    3410:	e00c      	b.n	342c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3412:	693b      	ldr	r3, [r7, #16]
    3414:	2201      	movs	r2, #1
    3416:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3418:	693b      	ldr	r3, [r7, #16]
    341a:	2203      	movs	r2, #3
    341c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    341e:	693b      	ldr	r3, [r7, #16]
    3420:	69db      	ldr	r3, [r3, #28]
    3422:	79f8      	ldrb	r0, [r7, #7]
    3424:	2200      	movs	r2, #0
    3426:	2103      	movs	r1, #3
    3428:	4798      	blx	r3
	}
	return ERR_NONE;
    342a:	2300      	movs	r3, #0
}
    342c:	4618      	mov	r0, r3
    342e:	3718      	adds	r7, #24
    3430:	46bd      	mov	sp, r7
    3432:	bd80      	pop	{r7, pc}
    3434:	00002bbd 	.word	0x00002bbd
    3438:	200006d8 	.word	0x200006d8
    343c:	0000a941 	.word	0x0000a941

00003440 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3440:	b580      	push	{r7, lr}
    3442:	b082      	sub	sp, #8
    3444:	af00      	add	r7, sp, #0
    3446:	4603      	mov	r3, r0
    3448:	460a      	mov	r2, r1
    344a:	71fb      	strb	r3, [r7, #7]
    344c:	4613      	mov	r3, r2
    344e:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3450:	79bb      	ldrb	r3, [r7, #6]
    3452:	2b00      	cmp	r3, #0
    3454:	d105      	bne.n	3462 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3456:	79fb      	ldrb	r3, [r7, #7]
    3458:	4618      	mov	r0, r3
    345a:	4b0c      	ldr	r3, [pc, #48]	; (348c <usb_d_ep_halt+0x4c>)
    345c:	4798      	blx	r3
    345e:	4603      	mov	r3, r0
    3460:	e00f      	b.n	3482 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3462:	79bb      	ldrb	r3, [r7, #6]
    3464:	2b01      	cmp	r3, #1
    3466:	d106      	bne.n	3476 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3468:	79fb      	ldrb	r3, [r7, #7]
    346a:	2101      	movs	r1, #1
    346c:	4618      	mov	r0, r3
    346e:	4b08      	ldr	r3, [pc, #32]	; (3490 <usb_d_ep_halt+0x50>)
    3470:	4798      	blx	r3
    3472:	4603      	mov	r3, r0
    3474:	e005      	b.n	3482 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3476:	79fb      	ldrb	r3, [r7, #7]
    3478:	2102      	movs	r1, #2
    347a:	4618      	mov	r0, r3
    347c:	4b04      	ldr	r3, [pc, #16]	; (3490 <usb_d_ep_halt+0x50>)
    347e:	4798      	blx	r3
    3480:	4603      	mov	r3, r0
	}
}
    3482:	4618      	mov	r0, r3
    3484:	3708      	adds	r7, #8
    3486:	46bd      	mov	sp, r7
    3488:	bd80      	pop	{r7, pc}
    348a:	bf00      	nop
    348c:	000033bd 	.word	0x000033bd
    3490:	0000a941 	.word	0x0000a941

00003494 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3494:	b580      	push	{r7, lr}
    3496:	b086      	sub	sp, #24
    3498:	af00      	add	r7, sp, #0
    349a:	4603      	mov	r3, r0
    349c:	603a      	str	r2, [r7, #0]
    349e:	71fb      	strb	r3, [r7, #7]
    34a0:	460b      	mov	r3, r1
    34a2:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    34a4:	79fb      	ldrb	r3, [r7, #7]
    34a6:	4618      	mov	r0, r3
    34a8:	4b16      	ldr	r3, [pc, #88]	; (3504 <usb_d_ep_register_callback+0x70>)
    34aa:	4798      	blx	r3
    34ac:	4603      	mov	r3, r0
    34ae:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    34b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34b4:	015b      	lsls	r3, r3, #5
    34b6:	4a14      	ldr	r2, [pc, #80]	; (3508 <usb_d_ep_register_callback+0x74>)
    34b8:	4413      	add	r3, r2
    34ba:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	2b00      	cmp	r3, #0
    34c0:	d001      	beq.n	34c6 <usb_d_ep_register_callback+0x32>
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	e000      	b.n	34c8 <usb_d_ep_register_callback+0x34>
    34c6:	4b11      	ldr	r3, [pc, #68]	; (350c <usb_d_ep_register_callback+0x78>)
    34c8:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    34ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
    34ce:	2b00      	cmp	r3, #0
    34d0:	db13      	blt.n	34fa <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    34d2:	79bb      	ldrb	r3, [r7, #6]
    34d4:	2b01      	cmp	r3, #1
    34d6:	d008      	beq.n	34ea <usb_d_ep_register_callback+0x56>
    34d8:	2b02      	cmp	r3, #2
    34da:	d00a      	beq.n	34f2 <usb_d_ep_register_callback+0x5e>
    34dc:	2b00      	cmp	r3, #0
    34de:	d000      	beq.n	34e2 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    34e0:	e00c      	b.n	34fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    34e2:	693b      	ldr	r3, [r7, #16]
    34e4:	68fa      	ldr	r2, [r7, #12]
    34e6:	615a      	str	r2, [r3, #20]
		break;
    34e8:	e008      	b.n	34fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    34ea:	693b      	ldr	r3, [r7, #16]
    34ec:	68fa      	ldr	r2, [r7, #12]
    34ee:	619a      	str	r2, [r3, #24]
		break;
    34f0:	e004      	b.n	34fc <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    34f2:	693b      	ldr	r3, [r7, #16]
    34f4:	68fa      	ldr	r2, [r7, #12]
    34f6:	61da      	str	r2, [r3, #28]
		break;
    34f8:	e000      	b.n	34fc <usb_d_ep_register_callback+0x68>
		return;
    34fa:	bf00      	nop
	}
}
    34fc:	3718      	adds	r7, #24
    34fe:	46bd      	mov	sp, r7
    3500:	bd80      	pop	{r7, pc}
    3502:	bf00      	nop
    3504:	00002bbd 	.word	0x00002bbd
    3508:	200006d8 	.word	0x200006d8
    350c:	00002c91 	.word	0x00002c91

00003510 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3510:	b480      	push	{r7}
    3512:	b085      	sub	sp, #20
    3514:	af00      	add	r7, sp, #0
    3516:	4603      	mov	r3, r0
    3518:	60b9      	str	r1, [r7, #8]
    351a:	607a      	str	r2, [r7, #4]
    351c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    351e:	7bfb      	ldrb	r3, [r7, #15]
    3520:	f083 0301 	eor.w	r3, r3, #1
    3524:	b2db      	uxtb	r3, r3
    3526:	2b00      	cmp	r3, #0
    3528:	d000      	beq.n	352c <assert+0x1c>
		__asm("BKPT #0");
    352a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    352c:	bf00      	nop
    352e:	3714      	adds	r7, #20
    3530:	46bd      	mov	sp, r7
    3532:	f85d 7b04 	ldr.w	r7, [sp], #4
    3536:	4770      	bx	lr

00003538 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	60fb      	str	r3, [r7, #12]
    3548:	e008      	b.n	355c <is_list_element+0x24>
		if (it == element) {
    354a:	68fa      	ldr	r2, [r7, #12]
    354c:	683b      	ldr	r3, [r7, #0]
    354e:	429a      	cmp	r2, r3
    3550:	d101      	bne.n	3556 <is_list_element+0x1e>
			return true;
    3552:	2301      	movs	r3, #1
    3554:	e006      	b.n	3564 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	60fb      	str	r3, [r7, #12]
    355c:	68fb      	ldr	r3, [r7, #12]
    355e:	2b00      	cmp	r3, #0
    3560:	d1f3      	bne.n	354a <is_list_element+0x12>
		}
	}

	return false;
    3562:	2300      	movs	r3, #0
}
    3564:	4618      	mov	r0, r3
    3566:	3714      	adds	r7, #20
    3568:	46bd      	mov	sp, r7
    356a:	f85d 7b04 	ldr.w	r7, [sp], #4
    356e:	4770      	bx	lr

00003570 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    3576:	6078      	str	r0, [r7, #4]
    3578:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    357a:	6839      	ldr	r1, [r7, #0]
    357c:	6878      	ldr	r0, [r7, #4]
    357e:	4b0f      	ldr	r3, [pc, #60]	; (35bc <list_insert_as_head+0x4c>)
    3580:	4798      	blx	r3
    3582:	4603      	mov	r3, r0
    3584:	2b00      	cmp	r3, #0
    3586:	bf14      	ite	ne
    3588:	2301      	movne	r3, #1
    358a:	2300      	moveq	r3, #0
    358c:	b2db      	uxtb	r3, r3
    358e:	f083 0301 	eor.w	r3, r3, #1
    3592:	b2db      	uxtb	r3, r3
    3594:	f003 0301 	and.w	r3, r3, #1
    3598:	b2db      	uxtb	r3, r3
    359a:	2239      	movs	r2, #57	; 0x39
    359c:	4908      	ldr	r1, [pc, #32]	; (35c0 <list_insert_as_head+0x50>)
    359e:	4618      	mov	r0, r3
    35a0:	4b08      	ldr	r3, [pc, #32]	; (35c4 <list_insert_as_head+0x54>)
    35a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	681a      	ldr	r2, [r3, #0]
    35a8:	683b      	ldr	r3, [r7, #0]
    35aa:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	683a      	ldr	r2, [r7, #0]
    35b0:	601a      	str	r2, [r3, #0]
}
    35b2:	bf00      	nop
    35b4:	3708      	adds	r7, #8
    35b6:	46bd      	mov	sp, r7
    35b8:	bd80      	pop	{r7, pc}
    35ba:	bf00      	nop
    35bc:	00003539 	.word	0x00003539
    35c0:	0000efac 	.word	0x0000efac
    35c4:	00003511 	.word	0x00003511

000035c8 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    35c8:	b480      	push	{r7}
    35ca:	b083      	sub	sp, #12
    35cc:	af00      	add	r7, sp, #0
    35ce:	6078      	str	r0, [r7, #4]
    35d0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    35d2:	687b      	ldr	r3, [r7, #4]
    35d4:	681a      	ldr	r2, [r3, #0]
    35d6:	683b      	ldr	r3, [r7, #0]
    35d8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	683a      	ldr	r2, [r7, #0]
    35de:	601a      	str	r2, [r3, #0]
}
    35e0:	bf00      	nop
    35e2:	370c      	adds	r7, #12
    35e4:	46bd      	mov	sp, r7
    35e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35ea:	4770      	bx	lr

000035ec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    35ec:	b580      	push	{r7, lr}
    35ee:	b084      	sub	sp, #16
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
    35f4:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    35fc:	6839      	ldr	r1, [r7, #0]
    35fe:	6878      	ldr	r0, [r7, #4]
    3600:	4b16      	ldr	r3, [pc, #88]	; (365c <list_insert_at_end+0x70>)
    3602:	4798      	blx	r3
    3604:	4603      	mov	r3, r0
    3606:	2b00      	cmp	r3, #0
    3608:	bf14      	ite	ne
    360a:	2301      	movne	r3, #1
    360c:	2300      	moveq	r3, #0
    360e:	b2db      	uxtb	r3, r3
    3610:	f083 0301 	eor.w	r3, r3, #1
    3614:	b2db      	uxtb	r3, r3
    3616:	f003 0301 	and.w	r3, r3, #1
    361a:	b2db      	uxtb	r3, r3
    361c:	224f      	movs	r2, #79	; 0x4f
    361e:	4910      	ldr	r1, [pc, #64]	; (3660 <list_insert_at_end+0x74>)
    3620:	4618      	mov	r0, r3
    3622:	4b10      	ldr	r3, [pc, #64]	; (3664 <list_insert_at_end+0x78>)
    3624:	4798      	blx	r3

	if (!list->head) {
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	2b00      	cmp	r3, #0
    362c:	d109      	bne.n	3642 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	683a      	ldr	r2, [r7, #0]
    3632:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	2200      	movs	r2, #0
    3638:	601a      	str	r2, [r3, #0]
		return;
    363a:	e00c      	b.n	3656 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    363c:	68fb      	ldr	r3, [r7, #12]
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3642:	68fb      	ldr	r3, [r7, #12]
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	2b00      	cmp	r3, #0
    3648:	d1f8      	bne.n	363c <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    364a:	68fb      	ldr	r3, [r7, #12]
    364c:	683a      	ldr	r2, [r7, #0]
    364e:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3650:	683b      	ldr	r3, [r7, #0]
    3652:	2200      	movs	r2, #0
    3654:	601a      	str	r2, [r3, #0]
}
    3656:	3710      	adds	r7, #16
    3658:	46bd      	mov	sp, r7
    365a:	bd80      	pop	{r7, pc}
    365c:	00003539 	.word	0x00003539
    3660:	0000efac 	.word	0x0000efac
    3664:	00003511 	.word	0x00003511

00003668 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3668:	b480      	push	{r7}
    366a:	b085      	sub	sp, #20
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3670:	687b      	ldr	r3, [r7, #4]
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	2b00      	cmp	r3, #0
    3676:	d009      	beq.n	368c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	681a      	ldr	r2, [r3, #0]
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3688:	68fb      	ldr	r3, [r7, #12]
    368a:	e000      	b.n	368e <list_remove_head+0x26>
	}

	return NULL;
    368c:	2300      	movs	r3, #0
}
    368e:	4618      	mov	r0, r3
    3690:	3714      	adds	r7, #20
    3692:	46bd      	mov	sp, r7
    3694:	f85d 7b04 	ldr.w	r7, [sp], #4
    3698:	4770      	bx	lr

0000369a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    369a:	b480      	push	{r7}
    369c:	b085      	sub	sp, #20
    369e:	af00      	add	r7, sp, #0
    36a0:	6078      	str	r0, [r7, #4]
    36a2:	6039      	str	r1, [r7, #0]
	if (!element) {
    36a4:	683b      	ldr	r3, [r7, #0]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d101      	bne.n	36ae <list_delete_element+0x14>
		return false;
    36aa:	2300      	movs	r3, #0
    36ac:	e024      	b.n	36f8 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	681a      	ldr	r2, [r3, #0]
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	429a      	cmp	r2, r3
    36b6:	d106      	bne.n	36c6 <list_delete_element+0x2c>
		list->head = list->head->next;
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	681b      	ldr	r3, [r3, #0]
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	687b      	ldr	r3, [r7, #4]
    36c0:	601a      	str	r2, [r3, #0]
		return true;
    36c2:	2301      	movs	r3, #1
    36c4:	e018      	b.n	36f8 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    36cc:	e002      	b.n	36d4 <list_delete_element+0x3a>
			it = it->next;
    36ce:	68fb      	ldr	r3, [r7, #12]
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    36d4:	68fb      	ldr	r3, [r7, #12]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d004      	beq.n	36e4 <list_delete_element+0x4a>
    36da:	68fb      	ldr	r3, [r7, #12]
    36dc:	681a      	ldr	r2, [r3, #0]
    36de:	683b      	ldr	r3, [r7, #0]
    36e0:	429a      	cmp	r2, r3
    36e2:	d1f4      	bne.n	36ce <list_delete_element+0x34>
		}
		if (it) {
    36e4:	68fb      	ldr	r3, [r7, #12]
    36e6:	2b00      	cmp	r3, #0
    36e8:	d005      	beq.n	36f6 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    36ea:	683b      	ldr	r3, [r7, #0]
    36ec:	681a      	ldr	r2, [r3, #0]
    36ee:	68fb      	ldr	r3, [r7, #12]
    36f0:	601a      	str	r2, [r3, #0]
			return true;
    36f2:	2301      	movs	r3, #1
    36f4:	e000      	b.n	36f8 <list_delete_element+0x5e>
		}
	}

	return false;
    36f6:	2300      	movs	r3, #0
}
    36f8:	4618      	mov	r0, r3
    36fa:	3714      	adds	r7, #20
    36fc:	46bd      	mov	sp, r7
    36fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3702:	4770      	bx	lr

00003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3704:	b480      	push	{r7}
    3706:	b083      	sub	sp, #12
    3708:	af00      	add	r7, sp, #0
    370a:	4603      	mov	r3, r0
    370c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    370e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3712:	2b00      	cmp	r3, #0
    3714:	db0b      	blt.n	372e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3716:	4909      	ldr	r1, [pc, #36]	; (373c <__NVIC_EnableIRQ+0x38>)
    3718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    371c:	095b      	lsrs	r3, r3, #5
    371e:	88fa      	ldrh	r2, [r7, #6]
    3720:	f002 021f 	and.w	r2, r2, #31
    3724:	2001      	movs	r0, #1
    3726:	fa00 f202 	lsl.w	r2, r0, r2
    372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    372e:	bf00      	nop
    3730:	370c      	adds	r7, #12
    3732:	46bd      	mov	sp, r7
    3734:	f85d 7b04 	ldr.w	r7, [sp], #4
    3738:	4770      	bx	lr
    373a:	bf00      	nop
    373c:	e000e100 	.word	0xe000e100

00003740 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3740:	b480      	push	{r7}
    3742:	b083      	sub	sp, #12
    3744:	af00      	add	r7, sp, #0
    3746:	4603      	mov	r3, r0
    3748:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    374a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    374e:	2b00      	cmp	r3, #0
    3750:	db10      	blt.n	3774 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3752:	490b      	ldr	r1, [pc, #44]	; (3780 <__NVIC_DisableIRQ+0x40>)
    3754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3758:	095b      	lsrs	r3, r3, #5
    375a:	88fa      	ldrh	r2, [r7, #6]
    375c:	f002 021f 	and.w	r2, r2, #31
    3760:	2001      	movs	r0, #1
    3762:	fa00 f202 	lsl.w	r2, r0, r2
    3766:	3320      	adds	r3, #32
    3768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    376c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3770:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3774:	bf00      	nop
    3776:	370c      	adds	r7, #12
    3778:	46bd      	mov	sp, r7
    377a:	f85d 7b04 	ldr.w	r7, [sp], #4
    377e:	4770      	bx	lr
    3780:	e000e100 	.word	0xe000e100

00003784 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3784:	b480      	push	{r7}
    3786:	b083      	sub	sp, #12
    3788:	af00      	add	r7, sp, #0
    378a:	4603      	mov	r3, r0
    378c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    378e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3792:	2b00      	cmp	r3, #0
    3794:	db0c      	blt.n	37b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3796:	4909      	ldr	r1, [pc, #36]	; (37bc <__NVIC_ClearPendingIRQ+0x38>)
    3798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    379c:	095b      	lsrs	r3, r3, #5
    379e:	88fa      	ldrh	r2, [r7, #6]
    37a0:	f002 021f 	and.w	r2, r2, #31
    37a4:	2001      	movs	r0, #1
    37a6:	fa00 f202 	lsl.w	r2, r0, r2
    37aa:	3360      	adds	r3, #96	; 0x60
    37ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    37b0:	bf00      	nop
    37b2:	370c      	adds	r7, #12
    37b4:	46bd      	mov	sp, r7
    37b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37ba:	4770      	bx	lr
    37bc:	e000e100 	.word	0xe000e100

000037c0 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    37c0:	b480      	push	{r7}
    37c2:	b083      	sub	sp, #12
    37c4:	af00      	add	r7, sp, #0
    37c6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37cc:	095b      	lsrs	r3, r3, #5
    37ce:	f003 0301 	and.w	r3, r3, #1
    37d2:	2b00      	cmp	r3, #0
    37d4:	bf14      	ite	ne
    37d6:	2301      	movne	r3, #1
    37d8:	2300      	moveq	r3, #0
    37da:	b2db      	uxtb	r3, r3
}
    37dc:	4618      	mov	r0, r3
    37de:	370c      	adds	r7, #12
    37e0:	46bd      	mov	sp, r7
    37e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e6:	4770      	bx	lr

000037e8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    37e8:	b480      	push	{r7}
    37ea:	b083      	sub	sp, #12
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
    37f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	683a      	ldr	r2, [r7, #0]
    37f6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37f8:	bf00      	nop
    37fa:	370c      	adds	r7, #12
    37fc:	46bd      	mov	sp, r7
    37fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3802:	4770      	bx	lr

00003804 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3804:	b480      	push	{r7}
    3806:	b083      	sub	sp, #12
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
    380c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	683a      	ldr	r2, [r7, #0]
    3812:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3814:	bf00      	nop
    3816:	370c      	adds	r7, #12
    3818:	46bd      	mov	sp, r7
    381a:	f85d 7b04 	ldr.w	r7, [sp], #4
    381e:	4770      	bx	lr

00003820 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3820:	b480      	push	{r7}
    3822:	b083      	sub	sp, #12
    3824:	af00      	add	r7, sp, #0
    3826:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	699b      	ldr	r3, [r3, #24]
    382c:	f043 0201 	orr.w	r2, r3, #1
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3834:	bf00      	nop
    3836:	370c      	adds	r7, #12
    3838:	46bd      	mov	sp, r7
    383a:	f85d 7b04 	ldr.w	r7, [sp], #4
    383e:	4770      	bx	lr

00003840 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3840:	b480      	push	{r7}
    3842:	b085      	sub	sp, #20
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	699b      	ldr	r3, [r3, #24]
    384c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    384e:	68fb      	ldr	r3, [r7, #12]
    3850:	f003 0301 	and.w	r3, r3, #1
    3854:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	2b00      	cmp	r3, #0
    385a:	bf14      	ite	ne
    385c:	2301      	movne	r3, #1
    385e:	2300      	moveq	r3, #0
    3860:	b2db      	uxtb	r3, r3
}
    3862:	4618      	mov	r0, r3
    3864:	3714      	adds	r7, #20
    3866:	46bd      	mov	sp, r7
    3868:	f85d 7b04 	ldr.w	r7, [sp], #4
    386c:	4770      	bx	lr

0000386e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    386e:	b480      	push	{r7}
    3870:	b083      	sub	sp, #12
    3872:	af00      	add	r7, sp, #0
    3874:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	699b      	ldr	r3, [r3, #24]
    387a:	f023 0201 	bic.w	r2, r3, #1
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3882:	bf00      	nop
    3884:	370c      	adds	r7, #12
    3886:	46bd      	mov	sp, r7
    3888:	f85d 7b04 	ldr.w	r7, [sp], #4
    388c:	4770      	bx	lr

0000388e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    388e:	b480      	push	{r7}
    3890:	b083      	sub	sp, #12
    3892:	af00      	add	r7, sp, #0
    3894:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	699b      	ldr	r3, [r3, #24]
    389a:	f043 0202 	orr.w	r2, r3, #2
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    38a2:	bf00      	nop
    38a4:	370c      	adds	r7, #12
    38a6:	46bd      	mov	sp, r7
    38a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ac:	4770      	bx	lr

000038ae <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    38ae:	b480      	push	{r7}
    38b0:	b083      	sub	sp, #12
    38b2:	af00      	add	r7, sp, #0
    38b4:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	699b      	ldr	r3, [r3, #24]
    38ba:	f023 0202 	bic.w	r2, r3, #2
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    38c2:	bf00      	nop
    38c4:	370c      	adds	r7, #12
    38c6:	46bd      	mov	sp, r7
    38c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38cc:	4770      	bx	lr

000038ce <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    38ce:	b480      	push	{r7}
    38d0:	b083      	sub	sp, #12
    38d2:	af00      	add	r7, sp, #0
    38d4:	6078      	str	r0, [r7, #4]
    38d6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	699a      	ldr	r2, [r3, #24]
    38dc:	683b      	ldr	r3, [r7, #0]
    38de:	431a      	orrs	r2, r3
    38e0:	687b      	ldr	r3, [r7, #4]
    38e2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    38e4:	bf00      	nop
    38e6:	370c      	adds	r7, #12
    38e8:	46bd      	mov	sp, r7
    38ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ee:	4770      	bx	lr

000038f0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    38f0:	b480      	push	{r7}
    38f2:	b083      	sub	sp, #12
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	683a      	ldr	r2, [r7, #0]
    38fe:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3900:	bf00      	nop
    3902:	370c      	adds	r7, #12
    3904:	46bd      	mov	sp, r7
    3906:	f85d 7b04 	ldr.w	r7, [sp], #4
    390a:	4770      	bx	lr

0000390c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    390c:	b480      	push	{r7}
    390e:	b083      	sub	sp, #12
    3910:	af00      	add	r7, sp, #0
    3912:	6078      	str	r0, [r7, #4]
    3914:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	683a      	ldr	r2, [r7, #0]
    391a:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    391c:	bf00      	nop
    391e:	370c      	adds	r7, #12
    3920:	46bd      	mov	sp, r7
    3922:	f85d 7b04 	ldr.w	r7, [sp], #4
    3926:	4770      	bx	lr

00003928 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3928:	b480      	push	{r7}
    392a:	b083      	sub	sp, #12
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3934:	4618      	mov	r0, r3
    3936:	370c      	adds	r7, #12
    3938:	46bd      	mov	sp, r7
    393a:	f85d 7b04 	ldr.w	r7, [sp], #4
    393e:	4770      	bx	lr

00003940 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3940:	b480      	push	{r7}
    3942:	b083      	sub	sp, #12
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	683a      	ldr	r2, [r7, #0]
    394e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3950:	bf00      	nop
    3952:	370c      	adds	r7, #12
    3954:	46bd      	mov	sp, r7
    3956:	f85d 7b04 	ldr.w	r7, [sp], #4
    395a:	4770      	bx	lr

0000395c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    395c:	b480      	push	{r7}
    395e:	b083      	sub	sp, #12
    3960:	af00      	add	r7, sp, #0
    3962:	6078      	str	r0, [r7, #4]
    3964:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	683a      	ldr	r2, [r7, #0]
    396a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    396e:	bf00      	nop
    3970:	370c      	adds	r7, #12
    3972:	46bd      	mov	sp, r7
    3974:	f85d 7b04 	ldr.w	r7, [sp], #4
    3978:	4770      	bx	lr

0000397a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    397a:	b480      	push	{r7}
    397c:	b083      	sub	sp, #12
    397e:	af00      	add	r7, sp, #0
    3980:	6078      	str	r0, [r7, #4]
    3982:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	683a      	ldr	r2, [r7, #0]
    3988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    398c:	bf00      	nop
    398e:	370c      	adds	r7, #12
    3990:	46bd      	mov	sp, r7
    3992:	f85d 7b04 	ldr.w	r7, [sp], #4
    3996:	4770      	bx	lr

00003998 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3998:	b480      	push	{r7}
    399a:	b083      	sub	sp, #12
    399c:	af00      	add	r7, sp, #0
    399e:	6078      	str	r0, [r7, #4]
    39a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	683a      	ldr	r2, [r7, #0]
    39a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    39aa:	bf00      	nop
    39ac:	370c      	adds	r7, #12
    39ae:	46bd      	mov	sp, r7
    39b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39b4:	4770      	bx	lr

000039b6 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    39b6:	b480      	push	{r7}
    39b8:	b083      	sub	sp, #12
    39ba:	af00      	add	r7, sp, #0
    39bc:	6078      	str	r0, [r7, #4]
    39be:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    39c0:	687b      	ldr	r3, [r7, #4]
    39c2:	683a      	ldr	r2, [r7, #0]
    39c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    39c8:	bf00      	nop
    39ca:	370c      	adds	r7, #12
    39cc:	46bd      	mov	sp, r7
    39ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    39d2:	4770      	bx	lr

000039d4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    39d4:	b480      	push	{r7}
    39d6:	b083      	sub	sp, #12
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	683a      	ldr	r2, [r7, #0]
    39e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    39e6:	bf00      	nop
    39e8:	370c      	adds	r7, #12
    39ea:	46bd      	mov	sp, r7
    39ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f0:	4770      	bx	lr

000039f2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    39f2:	b480      	push	{r7}
    39f4:	b083      	sub	sp, #12
    39f6:	af00      	add	r7, sp, #0
    39f8:	6078      	str	r0, [r7, #4]
    39fa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	683a      	ldr	r2, [r7, #0]
    3a00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a04:	bf00      	nop
    3a06:	370c      	adds	r7, #12
    3a08:	46bd      	mov	sp, r7
    3a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a0e:	4770      	bx	lr

00003a10 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3a10:	b480      	push	{r7}
    3a12:	b083      	sub	sp, #12
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	683a      	ldr	r2, [r7, #0]
    3a1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a22:	bf00      	nop
    3a24:	370c      	adds	r7, #12
    3a26:	46bd      	mov	sp, r7
    3a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a2c:	4770      	bx	lr

00003a2e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3a2e:	b480      	push	{r7}
    3a30:	b083      	sub	sp, #12
    3a32:	af00      	add	r7, sp, #0
    3a34:	6078      	str	r0, [r7, #4]
    3a36:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	683a      	ldr	r2, [r7, #0]
    3a3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a40:	bf00      	nop
    3a42:	370c      	adds	r7, #12
    3a44:	46bd      	mov	sp, r7
    3a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a4a:	4770      	bx	lr

00003a4c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b083      	sub	sp, #12
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	683a      	ldr	r2, [r7, #0]
    3a5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3a5e:	bf00      	nop
    3a60:	370c      	adds	r7, #12
    3a62:	46bd      	mov	sp, r7
    3a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a68:	4770      	bx	lr
	...

00003a6c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
    3a74:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	683a      	ldr	r2, [r7, #0]
    3a7a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	4618      	mov	r0, r3
    3a82:	4b55      	ldr	r3, [pc, #340]	; (3bd8 <_can_async_init+0x16c>)
    3a84:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3a86:	bf00      	nop
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	681b      	ldr	r3, [r3, #0]
    3a8c:	4618      	mov	r0, r3
    3a8e:	4b53      	ldr	r3, [pc, #332]	; (3bdc <_can_async_init+0x170>)
    3a90:	4798      	blx	r3
    3a92:	4603      	mov	r3, r0
    3a94:	f083 0301 	eor.w	r3, r3, #1
    3a98:	b2db      	uxtb	r3, r3
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d1f4      	bne.n	3a88 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	4618      	mov	r0, r3
    3aa4:	4b4e      	ldr	r3, [pc, #312]	; (3be0 <_can_async_init+0x174>)
    3aa6:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3aa8:	683b      	ldr	r3, [r7, #0]
    3aaa:	4a4e      	ldr	r2, [pc, #312]	; (3be4 <_can_async_init+0x178>)
    3aac:	4293      	cmp	r3, r2
    3aae:	d17a      	bne.n	3ba6 <_can_async_init+0x13a>
		_can1_dev    = dev;
    3ab0:	4a4d      	ldr	r2, [pc, #308]	; (3be8 <_can_async_init+0x17c>)
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	4a4c      	ldr	r2, [pc, #304]	; (3bec <_can_async_init+0x180>)
    3aba:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	f44f 7140 	mov.w	r1, #768	; 0x300
    3ac4:	4618      	mov	r0, r3
    3ac6:	4b4a      	ldr	r3, [pc, #296]	; (3bf0 <_can_async_init+0x184>)
    3ac8:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	2102      	movs	r1, #2
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b48      	ldr	r3, [pc, #288]	; (3bf4 <_can_async_init+0x188>)
    3ad4:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	4947      	ldr	r1, [pc, #284]	; (3bf8 <_can_async_init+0x18c>)
    3adc:	4618      	mov	r0, r3
    3ade:	4b47      	ldr	r3, [pc, #284]	; (3bfc <_can_async_init+0x190>)
    3ae0:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	4946      	ldr	r1, [pc, #280]	; (3c00 <_can_async_init+0x194>)
    3ae8:	4618      	mov	r0, r3
    3aea:	4b46      	ldr	r3, [pc, #280]	; (3c04 <_can_async_init+0x198>)
    3aec:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	681a      	ldr	r2, [r3, #0]
    3af2:	4b45      	ldr	r3, [pc, #276]	; (3c08 <_can_async_init+0x19c>)
    3af4:	b29b      	uxth	r3, r3
    3af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3afe:	4619      	mov	r1, r3
    3b00:	4610      	mov	r0, r2
    3b02:	4b42      	ldr	r3, [pc, #264]	; (3c0c <_can_async_init+0x1a0>)
    3b04:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3b06:	687b      	ldr	r3, [r7, #4]
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	2107      	movs	r1, #7
    3b0c:	4618      	mov	r0, r3
    3b0e:	4b40      	ldr	r3, [pc, #256]	; (3c10 <_can_async_init+0x1a4>)
    3b10:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	2107      	movs	r1, #7
    3b18:	4618      	mov	r0, r3
    3b1a:	4b3e      	ldr	r3, [pc, #248]	; (3c14 <_can_async_init+0x1a8>)
    3b1c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	681a      	ldr	r2, [r3, #0]
    3b22:	4b3d      	ldr	r3, [pc, #244]	; (3c18 <_can_async_init+0x1ac>)
    3b24:	b29b      	uxth	r3, r3
    3b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3b2a:	4619      	mov	r1, r3
    3b2c:	4610      	mov	r0, r2
    3b2e:	4b3b      	ldr	r3, [pc, #236]	; (3c1c <_can_async_init+0x1b0>)
    3b30:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	681a      	ldr	r2, [r3, #0]
    3b36:	4b3a      	ldr	r3, [pc, #232]	; (3c20 <_can_async_init+0x1b4>)
    3b38:	b29b      	uxth	r3, r3
    3b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3b3e:	4619      	mov	r1, r3
    3b40:	4610      	mov	r0, r2
    3b42:	4b38      	ldr	r3, [pc, #224]	; (3c24 <_can_async_init+0x1b8>)
    3b44:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	2108      	movs	r1, #8
    3b4c:	4618      	mov	r0, r3
    3b4e:	4b36      	ldr	r3, [pc, #216]	; (3c28 <_can_async_init+0x1bc>)
    3b50:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	681a      	ldr	r2, [r3, #0]
    3b56:	4b35      	ldr	r3, [pc, #212]	; (3c2c <_can_async_init+0x1c0>)
    3b58:	b29b      	uxth	r3, r3
    3b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3b5e:	4619      	mov	r1, r3
    3b60:	4610      	mov	r0, r2
    3b62:	4b33      	ldr	r3, [pc, #204]	; (3c30 <_can_async_init+0x1c4>)
    3b64:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3b66:	687b      	ldr	r3, [r7, #4]
    3b68:	681a      	ldr	r2, [r3, #0]
    3b6a:	4b32      	ldr	r3, [pc, #200]	; (3c34 <_can_async_init+0x1c8>)
    3b6c:	b29b      	uxth	r3, r3
    3b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3b72:	4619      	mov	r1, r3
    3b74:	4610      	mov	r0, r2
    3b76:	4b30      	ldr	r3, [pc, #192]	; (3c38 <_can_async_init+0x1cc>)
    3b78:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3b82:	4618      	mov	r0, r3
    3b84:	4b2d      	ldr	r3, [pc, #180]	; (3c3c <_can_async_init+0x1d0>)
    3b86:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3b88:	204f      	movs	r0, #79	; 0x4f
    3b8a:	4b2d      	ldr	r3, [pc, #180]	; (3c40 <_can_async_init+0x1d4>)
    3b8c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3b8e:	204f      	movs	r0, #79	; 0x4f
    3b90:	4b2c      	ldr	r3, [pc, #176]	; (3c44 <_can_async_init+0x1d8>)
    3b92:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3b94:	204f      	movs	r0, #79	; 0x4f
    3b96:	4b2c      	ldr	r3, [pc, #176]	; (3c48 <_can_async_init+0x1dc>)
    3b98:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	2101      	movs	r1, #1
    3ba0:	4618      	mov	r0, r3
    3ba2:	4b2a      	ldr	r3, [pc, #168]	; (3c4c <_can_async_init+0x1e0>)
    3ba4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	681b      	ldr	r3, [r3, #0]
    3baa:	4618      	mov	r0, r3
    3bac:	4b28      	ldr	r3, [pc, #160]	; (3c50 <_can_async_init+0x1e4>)
    3bae:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3bb0:	687b      	ldr	r3, [r7, #4]
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	4618      	mov	r0, r3
    3bb6:	4b27      	ldr	r3, [pc, #156]	; (3c54 <_can_async_init+0x1e8>)
    3bb8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3bba:	bf00      	nop
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	4618      	mov	r0, r3
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <_can_async_init+0x170>)
    3bc4:	4798      	blx	r3
    3bc6:	4603      	mov	r3, r0
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d1f7      	bne.n	3bbc <_can_async_init+0x150>
	};

	return ERR_NONE;
    3bcc:	2300      	movs	r3, #0
}
    3bce:	4618      	mov	r0, r3
    3bd0:	3708      	adds	r7, #8
    3bd2:	46bd      	mov	sp, r7
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	bf00      	nop
    3bd8:	00003821 	.word	0x00003821
    3bdc:	00003841 	.word	0x00003841
    3be0:	0000388f 	.word	0x0000388f
    3be4:	42000400 	.word	0x42000400
    3be8:	200007f8 	.word	0x200007f8
    3bec:	20000004 	.word	0x20000004
    3bf0:	000038cf 	.word	0x000038cf
    3bf4:	000037e9 	.word	0x000037e9
    3bf8:	00010c01 	.word	0x00010c01
    3bfc:	000038f1 	.word	0x000038f1
    3c00:	00010c10 	.word	0x00010c10
    3c04:	00003805 	.word	0x00003805
    3c08:	20001264 	.word	0x20001264
    3c0c:	000039d5 	.word	0x000039d5
    3c10:	000039f3 	.word	0x000039f3
    3c14:	00003a2f 	.word	0x00003a2f
    3c18:	2000121c 	.word	0x2000121c
    3c1c:	00003a11 	.word	0x00003a11
    3c20:	20000758 	.word	0x20000758
    3c24:	00003a4d 	.word	0x00003a4d
    3c28:	0000395d 	.word	0x0000395d
    3c2c:	20000768 	.word	0x20000768
    3c30:	0000397b 	.word	0x0000397b
    3c34:	200007e8 	.word	0x200007e8
    3c38:	00003999 	.word	0x00003999
    3c3c:	000039b7 	.word	0x000039b7
    3c40:	00003741 	.word	0x00003741
    3c44:	00003785 	.word	0x00003785
    3c48:	00003705 	.word	0x00003705
    3c4c:	00003941 	.word	0x00003941
    3c50:	000038af 	.word	0x000038af
    3c54:	0000386f 	.word	0x0000386f

00003c58 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3c58:	b590      	push	{r4, r7, lr}
    3c5a:	b083      	sub	sp, #12
    3c5c:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3c5e:	4b2c      	ldr	r3, [pc, #176]	; (3d10 <CAN1_Handler+0xb8>)
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3c64:	687b      	ldr	r3, [r7, #4]
    3c66:	681b      	ldr	r3, [r3, #0]
    3c68:	4618      	mov	r0, r3
    3c6a:	4b2a      	ldr	r3, [pc, #168]	; (3d14 <CAN1_Handler+0xbc>)
    3c6c:	4798      	blx	r3
    3c6e:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3c70:	683b      	ldr	r3, [r7, #0]
    3c72:	f003 0301 	and.w	r3, r3, #1
    3c76:	2b00      	cmp	r3, #0
    3c78:	d003      	beq.n	3c82 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	689b      	ldr	r3, [r3, #8]
    3c7e:	6878      	ldr	r0, [r7, #4]
    3c80:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3c82:	683b      	ldr	r3, [r7, #0]
    3c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d003      	beq.n	3c94 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	685b      	ldr	r3, [r3, #4]
    3c90:	6878      	ldr	r0, [r7, #4]
    3c92:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3c94:	683b      	ldr	r3, [r7, #0]
    3c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d004      	beq.n	3ca8 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	68db      	ldr	r3, [r3, #12]
    3ca2:	2103      	movs	r1, #3
    3ca4:	6878      	ldr	r0, [r7, #4]
    3ca6:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3ca8:	683b      	ldr	r3, [r7, #0]
    3caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d004      	beq.n	3cbc <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	68db      	ldr	r3, [r3, #12]
    3cb6:	2100      	movs	r1, #0
    3cb8:	6878      	ldr	r0, [r7, #4]
    3cba:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3cbc:	683b      	ldr	r3, [r7, #0]
    3cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d00f      	beq.n	3ce6 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	68dc      	ldr	r4, [r3, #12]
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	4618      	mov	r0, r3
    3cd0:	4b11      	ldr	r3, [pc, #68]	; (3d18 <CAN1_Handler+0xc0>)
    3cd2:	4798      	blx	r3
    3cd4:	4603      	mov	r3, r0
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d001      	beq.n	3cde <CAN1_Handler+0x86>
    3cda:	2302      	movs	r3, #2
    3cdc:	e000      	b.n	3ce0 <CAN1_Handler+0x88>
    3cde:	2301      	movs	r3, #1
    3ce0:	4619      	mov	r1, r3
    3ce2:	6878      	ldr	r0, [r7, #4]
    3ce4:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3ce6:	683b      	ldr	r3, [r7, #0]
    3ce8:	f003 0308 	and.w	r3, r3, #8
    3cec:	2b00      	cmp	r3, #0
    3cee:	d004      	beq.n	3cfa <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	68db      	ldr	r3, [r3, #12]
    3cf4:	2104      	movs	r1, #4
    3cf6:	6878      	ldr	r0, [r7, #4]
    3cf8:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	6839      	ldr	r1, [r7, #0]
    3d00:	4618      	mov	r0, r3
    3d02:	4b06      	ldr	r3, [pc, #24]	; (3d1c <CAN1_Handler+0xc4>)
    3d04:	4798      	blx	r3
}
    3d06:	bf00      	nop
    3d08:	370c      	adds	r7, #12
    3d0a:	46bd      	mov	sp, r7
    3d0c:	bd90      	pop	{r4, r7, pc}
    3d0e:	bf00      	nop
    3d10:	200007f8 	.word	0x200007f8
    3d14:	00003929 	.word	0x00003929
    3d18:	000037c1 	.word	0x000037c1
    3d1c:	0000390d 	.word	0x0000390d

00003d20 <__NVIC_SetPendingIRQ>:
{
    3d20:	b480      	push	{r7}
    3d22:	b083      	sub	sp, #12
    3d24:	af00      	add	r7, sp, #0
    3d26:	4603      	mov	r3, r0
    3d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	db0c      	blt.n	3d4c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d32:	4909      	ldr	r1, [pc, #36]	; (3d58 <__NVIC_SetPendingIRQ+0x38>)
    3d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3d38:	095b      	lsrs	r3, r3, #5
    3d3a:	88fa      	ldrh	r2, [r7, #6]
    3d3c:	f002 021f 	and.w	r2, r2, #31
    3d40:	2001      	movs	r0, #1
    3d42:	fa00 f202 	lsl.w	r2, r0, r2
    3d46:	3340      	adds	r3, #64	; 0x40
    3d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d4c:	bf00      	nop
    3d4e:	370c      	adds	r7, #12
    3d50:	46bd      	mov	sp, r7
    3d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d56:	4770      	bx	lr
    3d58:	e000e100 	.word	0xe000e100

00003d5c <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b082      	sub	sp, #8
    3d60:	af00      	add	r7, sp, #0
    3d62:	4603      	mov	r3, r0
    3d64:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3d66:	79fb      	ldrb	r3, [r7, #7]
    3d68:	b21b      	sxth	r3, r3
    3d6a:	4618      	mov	r0, r3
    3d6c:	4b02      	ldr	r3, [pc, #8]	; (3d78 <_irq_set+0x1c>)
    3d6e:	4798      	blx	r3
}
    3d70:	bf00      	nop
    3d72:	3708      	adds	r7, #8
    3d74:	46bd      	mov	sp, r7
    3d76:	bd80      	pop	{r7, pc}
    3d78:	00003d21 	.word	0x00003d21

00003d7c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3d7c:	b480      	push	{r7}
    3d7e:	b083      	sub	sp, #12
    3d80:	af00      	add	r7, sp, #0
    3d82:	4603      	mov	r3, r0
    3d84:	6039      	str	r1, [r7, #0]
    3d86:	80fb      	strh	r3, [r7, #6]
    3d88:	4613      	mov	r3, r2
    3d8a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d8c:	797b      	ldrb	r3, [r7, #5]
    3d8e:	3b04      	subs	r3, #4
    3d90:	2b05      	cmp	r3, #5
    3d92:	d86b      	bhi.n	3e6c <_get_cycles_for_us_internal+0xf0>
    3d94:	a201      	add	r2, pc, #4	; (adr r2, 3d9c <_get_cycles_for_us_internal+0x20>)
    3d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d9a:	bf00      	nop
    3d9c:	00003e4b 	.word	0x00003e4b
    3da0:	00003e2b 	.word	0x00003e2b
    3da4:	00003e0d 	.word	0x00003e0d
    3da8:	00003def 	.word	0x00003def
    3dac:	00003dd1 	.word	0x00003dd1
    3db0:	00003db5 	.word	0x00003db5
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3db4:	88fb      	ldrh	r3, [r7, #6]
    3db6:	683a      	ldr	r2, [r7, #0]
    3db8:	4935      	ldr	r1, [pc, #212]	; (3e90 <_get_cycles_for_us_internal+0x114>)
    3dba:	fba1 1202 	umull	r1, r2, r1, r2
    3dbe:	0c92      	lsrs	r2, r2, #18
    3dc0:	fb02 f303 	mul.w	r3, r2, r3
    3dc4:	3302      	adds	r3, #2
    3dc6:	4a33      	ldr	r2, [pc, #204]	; (3e94 <_get_cycles_for_us_internal+0x118>)
    3dc8:	fba2 2303 	umull	r2, r3, r2, r3
    3dcc:	085b      	lsrs	r3, r3, #1
    3dce:	e059      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3dd0:	88fb      	ldrh	r3, [r7, #6]
    3dd2:	683a      	ldr	r2, [r7, #0]
    3dd4:	0952      	lsrs	r2, r2, #5
    3dd6:	4930      	ldr	r1, [pc, #192]	; (3e98 <_get_cycles_for_us_internal+0x11c>)
    3dd8:	fba1 1202 	umull	r1, r2, r1, r2
    3ddc:	09d2      	lsrs	r2, r2, #7
    3dde:	fb02 f303 	mul.w	r3, r2, r3
    3de2:	331d      	adds	r3, #29
    3de4:	4a2d      	ldr	r2, [pc, #180]	; (3e9c <_get_cycles_for_us_internal+0x120>)
    3de6:	fba2 2303 	umull	r2, r3, r2, r3
    3dea:	091b      	lsrs	r3, r3, #4
    3dec:	e04a      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3dee:	88fb      	ldrh	r3, [r7, #6]
    3df0:	683a      	ldr	r2, [r7, #0]
    3df2:	492b      	ldr	r1, [pc, #172]	; (3ea0 <_get_cycles_for_us_internal+0x124>)
    3df4:	fba1 1202 	umull	r1, r2, r1, r2
    3df8:	0b52      	lsrs	r2, r2, #13
    3dfa:	fb02 f303 	mul.w	r3, r2, r3
    3dfe:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3e02:	4a28      	ldr	r2, [pc, #160]	; (3ea4 <_get_cycles_for_us_internal+0x128>)
    3e04:	fba2 2303 	umull	r2, r3, r2, r3
    3e08:	095b      	lsrs	r3, r3, #5
    3e0a:	e03b      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3e0c:	88fb      	ldrh	r3, [r7, #6]
    3e0e:	683a      	ldr	r2, [r7, #0]
    3e10:	4925      	ldr	r1, [pc, #148]	; (3ea8 <_get_cycles_for_us_internal+0x12c>)
    3e12:	fba1 1202 	umull	r1, r2, r1, r2
    3e16:	0992      	lsrs	r2, r2, #6
    3e18:	fb02 f303 	mul.w	r3, r2, r3
    3e1c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e20:	4a22      	ldr	r2, [pc, #136]	; (3eac <_get_cycles_for_us_internal+0x130>)
    3e22:	fba2 2303 	umull	r2, r3, r2, r3
    3e26:	099b      	lsrs	r3, r3, #6
    3e28:	e02c      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3e2a:	88fb      	ldrh	r3, [r7, #6]
    3e2c:	683a      	ldr	r2, [r7, #0]
    3e2e:	4920      	ldr	r1, [pc, #128]	; (3eb0 <_get_cycles_for_us_internal+0x134>)
    3e30:	fba1 1202 	umull	r1, r2, r1, r2
    3e34:	0952      	lsrs	r2, r2, #5
    3e36:	fb02 f303 	mul.w	r3, r2, r3
    3e3a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3e3e:	332f      	adds	r3, #47	; 0x2f
    3e40:	4a1c      	ldr	r2, [pc, #112]	; (3eb4 <_get_cycles_for_us_internal+0x138>)
    3e42:	fba2 2303 	umull	r2, r3, r2, r3
    3e46:	0b5b      	lsrs	r3, r3, #13
    3e48:	e01c      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3e4a:	88fb      	ldrh	r3, [r7, #6]
    3e4c:	683a      	ldr	r2, [r7, #0]
    3e4e:	491a      	ldr	r1, [pc, #104]	; (3eb8 <_get_cycles_for_us_internal+0x13c>)
    3e50:	fba1 1202 	umull	r1, r2, r1, r2
    3e54:	08d2      	lsrs	r2, r2, #3
    3e56:	fb02 f303 	mul.w	r3, r2, r3
    3e5a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3e5e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3e62:	4a16      	ldr	r2, [pc, #88]	; (3ebc <_get_cycles_for_us_internal+0x140>)
    3e64:	fba2 2303 	umull	r2, r3, r2, r3
    3e68:	0c5b      	lsrs	r3, r3, #17
    3e6a:	e00b      	b.n	3e84 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3e6c:	88fb      	ldrh	r3, [r7, #6]
    3e6e:	683a      	ldr	r2, [r7, #0]
    3e70:	fb02 f303 	mul.w	r3, r2, r3
    3e74:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3e78:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3e7c:	4a10      	ldr	r2, [pc, #64]	; (3ec0 <_get_cycles_for_us_internal+0x144>)
    3e7e:	fba2 2303 	umull	r2, r3, r2, r3
    3e82:	0c9b      	lsrs	r3, r3, #18
	}
}
    3e84:	4618      	mov	r0, r3
    3e86:	370c      	adds	r7, #12
    3e88:	46bd      	mov	sp, r7
    3e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e8e:	4770      	bx	lr
    3e90:	431bde83 	.word	0x431bde83
    3e94:	aaaaaaab 	.word	0xaaaaaaab
    3e98:	0a7c5ac5 	.word	0x0a7c5ac5
    3e9c:	88888889 	.word	0x88888889
    3ea0:	d1b71759 	.word	0xd1b71759
    3ea4:	1b4e81b5 	.word	0x1b4e81b5
    3ea8:	10624dd3 	.word	0x10624dd3
    3eac:	057619f1 	.word	0x057619f1
    3eb0:	51eb851f 	.word	0x51eb851f
    3eb4:	45e7b273 	.word	0x45e7b273
    3eb8:	cccccccd 	.word	0xcccccccd
    3ebc:	6fd91d85 	.word	0x6fd91d85
    3ec0:	165e9f81 	.word	0x165e9f81

00003ec4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3ec4:	b580      	push	{r7, lr}
    3ec6:	b082      	sub	sp, #8
    3ec8:	af00      	add	r7, sp, #0
    3eca:	4603      	mov	r3, r0
    3ecc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ece:	88fb      	ldrh	r3, [r7, #6]
    3ed0:	2209      	movs	r2, #9
    3ed2:	4904      	ldr	r1, [pc, #16]	; (3ee4 <_get_cycles_for_us+0x20>)
    3ed4:	4618      	mov	r0, r3
    3ed6:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <_get_cycles_for_us+0x24>)
    3ed8:	4798      	blx	r3
    3eda:	4603      	mov	r3, r0
}
    3edc:	4618      	mov	r0, r3
    3ede:	3708      	adds	r7, #8
    3ee0:	46bd      	mov	sp, r7
    3ee2:	bd80      	pop	{r7, pc}
    3ee4:	07270e00 	.word	0x07270e00
    3ee8:	00003d7d 	.word	0x00003d7d

00003eec <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3eec:	b480      	push	{r7}
    3eee:	b083      	sub	sp, #12
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	4603      	mov	r3, r0
    3ef4:	6039      	str	r1, [r7, #0]
    3ef6:	80fb      	strh	r3, [r7, #6]
    3ef8:	4613      	mov	r3, r2
    3efa:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3efc:	797b      	ldrb	r3, [r7, #5]
    3efe:	3b04      	subs	r3, #4
    3f00:	2b05      	cmp	r3, #5
    3f02:	d870      	bhi.n	3fe6 <_get_cycles_for_ms_internal+0xfa>
    3f04:	a201      	add	r2, pc, #4	; (adr r2, 3f0c <_get_cycles_for_ms_internal+0x20>)
    3f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f0a:	bf00      	nop
    3f0c:	00003fc9 	.word	0x00003fc9
    3f10:	00003fad 	.word	0x00003fad
    3f14:	00003f91 	.word	0x00003f91
    3f18:	00003f6d 	.word	0x00003f6d
    3f1c:	00003f49 	.word	0x00003f49
    3f20:	00003f25 	.word	0x00003f25
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3f24:	88fb      	ldrh	r3, [r7, #6]
    3f26:	683a      	ldr	r2, [r7, #0]
    3f28:	4937      	ldr	r1, [pc, #220]	; (4008 <_get_cycles_for_ms_internal+0x11c>)
    3f2a:	fba1 1202 	umull	r1, r2, r1, r2
    3f2e:	0c92      	lsrs	r2, r2, #18
    3f30:	fb02 f303 	mul.w	r3, r2, r3
    3f34:	3302      	adds	r3, #2
    3f36:	4a35      	ldr	r2, [pc, #212]	; (400c <_get_cycles_for_ms_internal+0x120>)
    3f38:	fba2 2303 	umull	r2, r3, r2, r3
    3f3c:	085b      	lsrs	r3, r3, #1
    3f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3f42:	fb02 f303 	mul.w	r3, r2, r3
    3f46:	e058      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3f48:	88fb      	ldrh	r3, [r7, #6]
    3f4a:	683a      	ldr	r2, [r7, #0]
    3f4c:	0952      	lsrs	r2, r2, #5
    3f4e:	4930      	ldr	r1, [pc, #192]	; (4010 <_get_cycles_for_ms_internal+0x124>)
    3f50:	fba1 1202 	umull	r1, r2, r1, r2
    3f54:	09d2      	lsrs	r2, r2, #7
    3f56:	fb02 f303 	mul.w	r3, r2, r3
    3f5a:	3302      	adds	r3, #2
    3f5c:	4a2b      	ldr	r2, [pc, #172]	; (400c <_get_cycles_for_ms_internal+0x120>)
    3f5e:	fba2 2303 	umull	r2, r3, r2, r3
    3f62:	085b      	lsrs	r3, r3, #1
    3f64:	2264      	movs	r2, #100	; 0x64
    3f66:	fb02 f303 	mul.w	r3, r2, r3
    3f6a:	e046      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3f6c:	88fb      	ldrh	r3, [r7, #6]
    3f6e:	683a      	ldr	r2, [r7, #0]
    3f70:	4928      	ldr	r1, [pc, #160]	; (4014 <_get_cycles_for_ms_internal+0x128>)
    3f72:	fba1 1202 	umull	r1, r2, r1, r2
    3f76:	0b52      	lsrs	r2, r2, #13
    3f78:	fb02 f303 	mul.w	r3, r2, r3
    3f7c:	3302      	adds	r3, #2
    3f7e:	4a23      	ldr	r2, [pc, #140]	; (400c <_get_cycles_for_ms_internal+0x120>)
    3f80:	fba2 2303 	umull	r2, r3, r2, r3
    3f84:	085a      	lsrs	r2, r3, #1
    3f86:	4613      	mov	r3, r2
    3f88:	009b      	lsls	r3, r3, #2
    3f8a:	4413      	add	r3, r2
    3f8c:	005b      	lsls	r3, r3, #1
    3f8e:	e034      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3f90:	88fb      	ldrh	r3, [r7, #6]
    3f92:	683a      	ldr	r2, [r7, #0]
    3f94:	4920      	ldr	r1, [pc, #128]	; (4018 <_get_cycles_for_ms_internal+0x12c>)
    3f96:	fba1 1202 	umull	r1, r2, r1, r2
    3f9a:	0992      	lsrs	r2, r2, #6
    3f9c:	fb02 f303 	mul.w	r3, r2, r3
    3fa0:	3302      	adds	r3, #2
    3fa2:	4a1a      	ldr	r2, [pc, #104]	; (400c <_get_cycles_for_ms_internal+0x120>)
    3fa4:	fba2 2303 	umull	r2, r3, r2, r3
    3fa8:	085b      	lsrs	r3, r3, #1
    3faa:	e026      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3fac:	88fb      	ldrh	r3, [r7, #6]
    3fae:	683a      	ldr	r2, [r7, #0]
    3fb0:	491a      	ldr	r1, [pc, #104]	; (401c <_get_cycles_for_ms_internal+0x130>)
    3fb2:	fba1 1202 	umull	r1, r2, r1, r2
    3fb6:	0952      	lsrs	r2, r2, #5
    3fb8:	fb02 f303 	mul.w	r3, r2, r3
    3fbc:	331d      	adds	r3, #29
    3fbe:	4a18      	ldr	r2, [pc, #96]	; (4020 <_get_cycles_for_ms_internal+0x134>)
    3fc0:	fba2 2303 	umull	r2, r3, r2, r3
    3fc4:	091b      	lsrs	r3, r3, #4
    3fc6:	e018      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3fc8:	88fb      	ldrh	r3, [r7, #6]
    3fca:	683a      	ldr	r2, [r7, #0]
    3fcc:	4915      	ldr	r1, [pc, #84]	; (4024 <_get_cycles_for_ms_internal+0x138>)
    3fce:	fba1 1202 	umull	r1, r2, r1, r2
    3fd2:	08d2      	lsrs	r2, r2, #3
    3fd4:	fb02 f303 	mul.w	r3, r2, r3
    3fd8:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3fdc:	4a12      	ldr	r2, [pc, #72]	; (4028 <_get_cycles_for_ms_internal+0x13c>)
    3fde:	fba2 2303 	umull	r2, r3, r2, r3
    3fe2:	095b      	lsrs	r3, r3, #5
    3fe4:	e009      	b.n	3ffa <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3fe6:	88fb      	ldrh	r3, [r7, #6]
    3fe8:	683a      	ldr	r2, [r7, #0]
    3fea:	fb02 f303 	mul.w	r3, r2, r3
    3fee:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3ff2:	4a0e      	ldr	r2, [pc, #56]	; (402c <_get_cycles_for_ms_internal+0x140>)
    3ff4:	fba2 2303 	umull	r2, r3, r2, r3
    3ff8:	099b      	lsrs	r3, r3, #6
	}
}
    3ffa:	4618      	mov	r0, r3
    3ffc:	370c      	adds	r7, #12
    3ffe:	46bd      	mov	sp, r7
    4000:	f85d 7b04 	ldr.w	r7, [sp], #4
    4004:	4770      	bx	lr
    4006:	bf00      	nop
    4008:	431bde83 	.word	0x431bde83
    400c:	aaaaaaab 	.word	0xaaaaaaab
    4010:	0a7c5ac5 	.word	0x0a7c5ac5
    4014:	d1b71759 	.word	0xd1b71759
    4018:	10624dd3 	.word	0x10624dd3
    401c:	51eb851f 	.word	0x51eb851f
    4020:	88888889 	.word	0x88888889
    4024:	cccccccd 	.word	0xcccccccd
    4028:	1b4e81b5 	.word	0x1b4e81b5
    402c:	057619f1 	.word	0x057619f1

00004030 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4030:	b580      	push	{r7, lr}
    4032:	b082      	sub	sp, #8
    4034:	af00      	add	r7, sp, #0
    4036:	4603      	mov	r3, r0
    4038:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    403a:	88fb      	ldrh	r3, [r7, #6]
    403c:	2209      	movs	r2, #9
    403e:	4904      	ldr	r1, [pc, #16]	; (4050 <_get_cycles_for_ms+0x20>)
    4040:	4618      	mov	r0, r3
    4042:	4b04      	ldr	r3, [pc, #16]	; (4054 <_get_cycles_for_ms+0x24>)
    4044:	4798      	blx	r3
    4046:	4603      	mov	r3, r0
}
    4048:	4618      	mov	r0, r3
    404a:	3708      	adds	r7, #8
    404c:	46bd      	mov	sp, r7
    404e:	bd80      	pop	{r7, pc}
    4050:	07270e00 	.word	0x07270e00
    4054:	00003eed 	.word	0x00003eed

00004058 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4058:	b480      	push	{r7}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
    405e:	6078      	str	r0, [r7, #4]
    4060:	6039      	str	r1, [r7, #0]
    4062:	bf00      	nop
    4064:	f3af 8000 	nop.w

00004068 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4068:	3901      	subs	r1, #1
    406a:	d8fd      	bhi.n	4068 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    406c:	bf00      	nop
    406e:	370c      	adds	r7, #12
    4070:	46bd      	mov	sp, r7
    4072:	f85d 7b04 	ldr.w	r7, [sp], #4
    4076:	4770      	bx	lr

00004078 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
    4080:	460b      	mov	r3, r1
    4082:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	881b      	ldrh	r3, [r3, #0]
    4088:	b29a      	uxth	r2, r3
    408a:	887b      	ldrh	r3, [r7, #2]
    408c:	021b      	lsls	r3, r3, #8
    408e:	b29b      	uxth	r3, r3
    4090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4094:	b29b      	uxth	r3, r3
    4096:	4313      	orrs	r3, r2
    4098:	b29a      	uxth	r2, r3
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    409e:	bf00      	nop
    40a0:	370c      	adds	r7, #12
    40a2:	46bd      	mov	sp, r7
    40a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a8:	4770      	bx	lr

000040aa <hri_port_set_EVCTRL_reg>:
{
    40aa:	b480      	push	{r7}
    40ac:	b085      	sub	sp, #20
    40ae:	af00      	add	r7, sp, #0
    40b0:	60f8      	str	r0, [r7, #12]
    40b2:	460b      	mov	r3, r1
    40b4:	607a      	str	r2, [r7, #4]
    40b6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    40b8:	7afb      	ldrb	r3, [r7, #11]
    40ba:	7afa      	ldrb	r2, [r7, #11]
    40bc:	68f9      	ldr	r1, [r7, #12]
    40be:	01d2      	lsls	r2, r2, #7
    40c0:	440a      	add	r2, r1
    40c2:	322c      	adds	r2, #44	; 0x2c
    40c4:	6811      	ldr	r1, [r2, #0]
    40c6:	687a      	ldr	r2, [r7, #4]
    40c8:	430a      	orrs	r2, r1
    40ca:	68f9      	ldr	r1, [r7, #12]
    40cc:	01db      	lsls	r3, r3, #7
    40ce:	440b      	add	r3, r1
    40d0:	332c      	adds	r3, #44	; 0x2c
    40d2:	601a      	str	r2, [r3, #0]
}
    40d4:	bf00      	nop
    40d6:	3714      	adds	r7, #20
    40d8:	46bd      	mov	sp, r7
    40da:	f85d 7b04 	ldr.w	r7, [sp], #4
    40de:	4770      	bx	lr

000040e0 <_port_event_init>:

static inline void _port_event_init()
{
    40e0:	b580      	push	{r7, lr}
    40e2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    40e4:	2200      	movs	r2, #0
    40e6:	2100      	movs	r1, #0
    40e8:	480a      	ldr	r0, [pc, #40]	; (4114 <_port_event_init+0x34>)
    40ea:	4b0b      	ldr	r3, [pc, #44]	; (4118 <_port_event_init+0x38>)
    40ec:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    40ee:	2200      	movs	r2, #0
    40f0:	2101      	movs	r1, #1
    40f2:	4808      	ldr	r0, [pc, #32]	; (4114 <_port_event_init+0x34>)
    40f4:	4b08      	ldr	r3, [pc, #32]	; (4118 <_port_event_init+0x38>)
    40f6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    40f8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    40fc:	2102      	movs	r1, #2
    40fe:	4805      	ldr	r0, [pc, #20]	; (4114 <_port_event_init+0x34>)
    4100:	4b05      	ldr	r3, [pc, #20]	; (4118 <_port_event_init+0x38>)
    4102:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4104:	2200      	movs	r2, #0
    4106:	2103      	movs	r1, #3
    4108:	4802      	ldr	r0, [pc, #8]	; (4114 <_port_event_init+0x34>)
    410a:	4b03      	ldr	r3, [pc, #12]	; (4118 <_port_event_init+0x38>)
    410c:	4798      	blx	r3
}
    410e:	bf00      	nop
    4110:	bd80      	pop	{r7, pc}
    4112:	bf00      	nop
    4114:	41008000 	.word	0x41008000
    4118:	000040ab 	.word	0x000040ab

0000411c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    411c:	b580      	push	{r7, lr}
    411e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4120:	2104      	movs	r1, #4
    4122:	480b      	ldr	r0, [pc, #44]	; (4150 <_init_chip+0x34>)
    4124:	4b0b      	ldr	r3, [pc, #44]	; (4154 <_init_chip+0x38>)
    4126:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4128:	4b0b      	ldr	r3, [pc, #44]	; (4158 <_init_chip+0x3c>)
    412a:	4798      	blx	r3
	_oscctrl_init_sources();
    412c:	4b0b      	ldr	r3, [pc, #44]	; (415c <_init_chip+0x40>)
    412e:	4798      	blx	r3
	_mclk_init();
    4130:	4b0b      	ldr	r3, [pc, #44]	; (4160 <_init_chip+0x44>)
    4132:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4134:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4138:	4b0a      	ldr	r3, [pc, #40]	; (4164 <_init_chip+0x48>)
    413a:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    413c:	4b0a      	ldr	r3, [pc, #40]	; (4168 <_init_chip+0x4c>)
    413e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4140:	f640 30df 	movw	r0, #3039	; 0xbdf
    4144:	4b07      	ldr	r3, [pc, #28]	; (4164 <_init_chip+0x48>)
    4146:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4148:	4b08      	ldr	r3, [pc, #32]	; (416c <_init_chip+0x50>)
    414a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    414c:	bf00      	nop
    414e:	bd80      	pop	{r7, pc}
    4150:	41004000 	.word	0x41004000
    4154:	00004079 	.word	0x00004079
    4158:	00004c0d 	.word	0x00004c0d
    415c:	000050d5 	.word	0x000050d5
    4160:	00004b2d 	.word	0x00004b2d
    4164:	000049ed 	.word	0x000049ed
    4168:	00005115 	.word	0x00005115
    416c:	000040e1 	.word	0x000040e1

00004170 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4170:	b480      	push	{r7}
    4172:	b083      	sub	sp, #12
    4174:	af00      	add	r7, sp, #0
    4176:	6078      	str	r0, [r7, #4]
    4178:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	683a      	ldr	r2, [r7, #0]
    417e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4180:	2300      	movs	r3, #0
}
    4182:	4618      	mov	r0, r3
    4184:	370c      	adds	r7, #12
    4186:	46bd      	mov	sp, r7
    4188:	f85d 7b04 	ldr.w	r7, [sp], #4
    418c:	4770      	bx	lr
	...

00004190 <__NVIC_EnableIRQ>:
{
    4190:	b480      	push	{r7}
    4192:	b083      	sub	sp, #12
    4194:	af00      	add	r7, sp, #0
    4196:	4603      	mov	r3, r0
    4198:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    419a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    419e:	2b00      	cmp	r3, #0
    41a0:	db0b      	blt.n	41ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41a2:	4909      	ldr	r1, [pc, #36]	; (41c8 <__NVIC_EnableIRQ+0x38>)
    41a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41a8:	095b      	lsrs	r3, r3, #5
    41aa:	88fa      	ldrh	r2, [r7, #6]
    41ac:	f002 021f 	and.w	r2, r2, #31
    41b0:	2001      	movs	r0, #1
    41b2:	fa00 f202 	lsl.w	r2, r0, r2
    41b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41ba:	bf00      	nop
    41bc:	370c      	adds	r7, #12
    41be:	46bd      	mov	sp, r7
    41c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c4:	4770      	bx	lr
    41c6:	bf00      	nop
    41c8:	e000e100 	.word	0xe000e100

000041cc <__NVIC_DisableIRQ>:
{
    41cc:	b480      	push	{r7}
    41ce:	b083      	sub	sp, #12
    41d0:	af00      	add	r7, sp, #0
    41d2:	4603      	mov	r3, r0
    41d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41da:	2b00      	cmp	r3, #0
    41dc:	db10      	blt.n	4200 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41de:	490b      	ldr	r1, [pc, #44]	; (420c <__NVIC_DisableIRQ+0x40>)
    41e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41e4:	095b      	lsrs	r3, r3, #5
    41e6:	88fa      	ldrh	r2, [r7, #6]
    41e8:	f002 021f 	and.w	r2, r2, #31
    41ec:	2001      	movs	r0, #1
    41ee:	fa00 f202 	lsl.w	r2, r0, r2
    41f2:	3320      	adds	r3, #32
    41f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    41f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41fc:	f3bf 8f6f 	isb	sy
}
    4200:	bf00      	nop
    4202:	370c      	adds	r7, #12
    4204:	46bd      	mov	sp, r7
    4206:	f85d 7b04 	ldr.w	r7, [sp], #4
    420a:	4770      	bx	lr
    420c:	e000e100 	.word	0xe000e100

00004210 <__NVIC_ClearPendingIRQ>:
{
    4210:	b480      	push	{r7}
    4212:	b083      	sub	sp, #12
    4214:	af00      	add	r7, sp, #0
    4216:	4603      	mov	r3, r0
    4218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    421a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    421e:	2b00      	cmp	r3, #0
    4220:	db0c      	blt.n	423c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4222:	4909      	ldr	r1, [pc, #36]	; (4248 <__NVIC_ClearPendingIRQ+0x38>)
    4224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4228:	095b      	lsrs	r3, r3, #5
    422a:	88fa      	ldrh	r2, [r7, #6]
    422c:	f002 021f 	and.w	r2, r2, #31
    4230:	2001      	movs	r0, #1
    4232:	fa00 f202 	lsl.w	r2, r0, r2
    4236:	3360      	adds	r3, #96	; 0x60
    4238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    423c:	bf00      	nop
    423e:	370c      	adds	r7, #12
    4240:	46bd      	mov	sp, r7
    4242:	f85d 7b04 	ldr.w	r7, [sp], #4
    4246:	4770      	bx	lr
    4248:	e000e100 	.word	0xe000e100

0000424c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    424c:	b480      	push	{r7}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
    4254:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4256:	bf00      	nop
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	685a      	ldr	r2, [r3, #4]
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	4013      	ands	r3, r2
    4260:	2b00      	cmp	r3, #0
    4262:	d1f9      	bne.n	4258 <hri_eic_wait_for_sync+0xc>
	};
}
    4264:	bf00      	nop
    4266:	370c      	adds	r7, #12
    4268:	46bd      	mov	sp, r7
    426a:	f85d 7b04 	ldr.w	r7, [sp], #4
    426e:	4770      	bx	lr

00004270 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4270:	b480      	push	{r7}
    4272:	b083      	sub	sp, #12
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	685a      	ldr	r2, [r3, #4]
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	4013      	ands	r3, r2
    4282:	2b00      	cmp	r3, #0
    4284:	bf14      	ite	ne
    4286:	2301      	movne	r3, #1
    4288:	2300      	moveq	r3, #0
    428a:	b2db      	uxtb	r3, r3
}
    428c:	4618      	mov	r0, r3
    428e:	370c      	adds	r7, #12
    4290:	46bd      	mov	sp, r7
    4292:	f85d 7b04 	ldr.w	r7, [sp], #4
    4296:	4770      	bx	lr

00004298 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4298:	b480      	push	{r7}
    429a:	b083      	sub	sp, #12
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	695b      	ldr	r3, [r3, #20]
}
    42a4:	4618      	mov	r0, r3
    42a6:	370c      	adds	r7, #12
    42a8:	46bd      	mov	sp, r7
    42aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ae:	4770      	bx	lr

000042b0 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    42b0:	b480      	push	{r7}
    42b2:	b083      	sub	sp, #12
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
    42b8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    42ba:	687b      	ldr	r3, [r7, #4]
    42bc:	683a      	ldr	r2, [r7, #0]
    42be:	615a      	str	r2, [r3, #20]
}
    42c0:	bf00      	nop
    42c2:	370c      	adds	r7, #12
    42c4:	46bd      	mov	sp, r7
    42c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ca:	4770      	bx	lr

000042cc <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    42cc:	b480      	push	{r7}
    42ce:	b083      	sub	sp, #12
    42d0:	af00      	add	r7, sp, #0
    42d2:	6078      	str	r0, [r7, #4]
    42d4:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    42d6:	687b      	ldr	r3, [r7, #4]
    42d8:	683a      	ldr	r2, [r7, #0]
    42da:	611a      	str	r2, [r3, #16]
}
    42dc:	bf00      	nop
    42de:	370c      	adds	r7, #12
    42e0:	46bd      	mov	sp, r7
    42e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e6:	4770      	bx	lr

000042e8 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    42e8:	b480      	push	{r7}
    42ea:	b083      	sub	sp, #12
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
    42f0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    42f2:	687b      	ldr	r3, [r7, #4]
    42f4:	683a      	ldr	r2, [r7, #0]
    42f6:	60da      	str	r2, [r3, #12]
}
    42f8:	bf00      	nop
    42fa:	370c      	adds	r7, #12
    42fc:	46bd      	mov	sp, r7
    42fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4302:	4770      	bx	lr

00004304 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4304:	b580      	push	{r7, lr}
    4306:	b082      	sub	sp, #8
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	b2db      	uxtb	r3, r3
    4312:	f043 0302 	orr.w	r3, r3, #2
    4316:	b2da      	uxtb	r2, r3
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    431c:	2103      	movs	r1, #3
    431e:	6878      	ldr	r0, [r7, #4]
    4320:	4b02      	ldr	r3, [pc, #8]	; (432c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4322:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4324:	bf00      	nop
    4326:	3708      	adds	r7, #8
    4328:	46bd      	mov	sp, r7
    432a:	bd80      	pop	{r7, pc}
    432c:	0000424d 	.word	0x0000424d

00004330 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4330:	b580      	push	{r7, lr}
    4332:	b082      	sub	sp, #8
    4334:	af00      	add	r7, sp, #0
    4336:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4338:	687b      	ldr	r3, [r7, #4]
    433a:	781b      	ldrb	r3, [r3, #0]
    433c:	b2db      	uxtb	r3, r3
    433e:	f023 0302 	bic.w	r3, r3, #2
    4342:	b2da      	uxtb	r2, r3
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4348:	2103      	movs	r1, #3
    434a:	6878      	ldr	r0, [r7, #4]
    434c:	4b02      	ldr	r3, [pc, #8]	; (4358 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    434e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4350:	bf00      	nop
    4352:	3708      	adds	r7, #8
    4354:	46bd      	mov	sp, r7
    4356:	bd80      	pop	{r7, pc}
    4358:	0000424d 	.word	0x0000424d

0000435c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    435c:	b580      	push	{r7, lr}
    435e:	b084      	sub	sp, #16
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
    4364:	460b      	mov	r3, r1
    4366:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    436e:	7bfb      	ldrb	r3, [r7, #15]
    4370:	f023 0310 	bic.w	r3, r3, #16
    4374:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4376:	78fb      	ldrb	r3, [r7, #3]
    4378:	011b      	lsls	r3, r3, #4
    437a:	b25a      	sxtb	r2, r3
    437c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4380:	4313      	orrs	r3, r2
    4382:	b25b      	sxtb	r3, r3
    4384:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4386:	687b      	ldr	r3, [r7, #4]
    4388:	7bfa      	ldrb	r2, [r7, #15]
    438a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    438c:	2103      	movs	r1, #3
    438e:	6878      	ldr	r0, [r7, #4]
    4390:	4b02      	ldr	r3, [pc, #8]	; (439c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4392:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4394:	bf00      	nop
    4396:	3710      	adds	r7, #16
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}
    439c:	0000424d 	.word	0x0000424d

000043a0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    43a0:	b580      	push	{r7, lr}
    43a2:	b084      	sub	sp, #16
    43a4:	af00      	add	r7, sp, #0
    43a6:	6078      	str	r0, [r7, #4]
    43a8:	460b      	mov	r3, r1
    43aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    43ac:	2103      	movs	r1, #3
    43ae:	6878      	ldr	r0, [r7, #4]
    43b0:	4b06      	ldr	r3, [pc, #24]	; (43cc <hri_eic_get_CTRLA_reg+0x2c>)
    43b2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	781b      	ldrb	r3, [r3, #0]
    43b8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    43ba:	7bfa      	ldrb	r2, [r7, #15]
    43bc:	78fb      	ldrb	r3, [r7, #3]
    43be:	4013      	ands	r3, r2
    43c0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    43c2:	7bfb      	ldrb	r3, [r7, #15]
}
    43c4:	4618      	mov	r0, r3
    43c6:	3710      	adds	r7, #16
    43c8:	46bd      	mov	sp, r7
    43ca:	bd80      	pop	{r7, pc}
    43cc:	0000424d 	.word	0x0000424d

000043d0 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	6078      	str	r0, [r7, #4]
    43d8:	460b      	mov	r3, r1
    43da:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	78fa      	ldrb	r2, [r7, #3]
    43e0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    43e2:	2103      	movs	r1, #3
    43e4:	6878      	ldr	r0, [r7, #4]
    43e6:	4b03      	ldr	r3, [pc, #12]	; (43f4 <hri_eic_write_CTRLA_reg+0x24>)
    43e8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    43ea:	bf00      	nop
    43ec:	3708      	adds	r7, #8
    43ee:	46bd      	mov	sp, r7
    43f0:	bd80      	pop	{r7, pc}
    43f2:	bf00      	nop
    43f4:	0000424d 	.word	0x0000424d

000043f8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    43f8:	b480      	push	{r7}
    43fa:	b083      	sub	sp, #12
    43fc:	af00      	add	r7, sp, #0
    43fe:	6078      	str	r0, [r7, #4]
    4400:	460b      	mov	r3, r1
    4402:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4404:	687b      	ldr	r3, [r7, #4]
    4406:	78fa      	ldrb	r2, [r7, #3]
    4408:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    440a:	bf00      	nop
    440c:	370c      	adds	r7, #12
    440e:	46bd      	mov	sp, r7
    4410:	f85d 7b04 	ldr.w	r7, [sp], #4
    4414:	4770      	bx	lr

00004416 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4416:	b480      	push	{r7}
    4418:	b083      	sub	sp, #12
    441a:	af00      	add	r7, sp, #0
    441c:	6078      	str	r0, [r7, #4]
    441e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	683a      	ldr	r2, [r7, #0]
    4424:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4426:	bf00      	nop
    4428:	370c      	adds	r7, #12
    442a:	46bd      	mov	sp, r7
    442c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4430:	4770      	bx	lr

00004432 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4432:	b480      	push	{r7}
    4434:	b083      	sub	sp, #12
    4436:	af00      	add	r7, sp, #0
    4438:	6078      	str	r0, [r7, #4]
    443a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	683a      	ldr	r2, [r7, #0]
    4440:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4442:	bf00      	nop
    4444:	370c      	adds	r7, #12
    4446:	46bd      	mov	sp, r7
    4448:	f85d 7b04 	ldr.w	r7, [sp], #4
    444c:	4770      	bx	lr

0000444e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    444e:	b480      	push	{r7}
    4450:	b085      	sub	sp, #20
    4452:	af00      	add	r7, sp, #0
    4454:	60f8      	str	r0, [r7, #12]
    4456:	460b      	mov	r3, r1
    4458:	607a      	str	r2, [r7, #4]
    445a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    445c:	7afb      	ldrb	r3, [r7, #11]
    445e:	68fa      	ldr	r2, [r7, #12]
    4460:	3306      	adds	r3, #6
    4462:	009b      	lsls	r3, r3, #2
    4464:	4413      	add	r3, r2
    4466:	687a      	ldr	r2, [r7, #4]
    4468:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    446a:	bf00      	nop
    446c:	3714      	adds	r7, #20
    446e:	46bd      	mov	sp, r7
    4470:	f85d 7b04 	ldr.w	r7, [sp], #4
    4474:	4770      	bx	lr

00004476 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4476:	b480      	push	{r7}
    4478:	b083      	sub	sp, #12
    447a:	af00      	add	r7, sp, #0
    447c:	6078      	str	r0, [r7, #4]
    447e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	683a      	ldr	r2, [r7, #0]
    4484:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4486:	bf00      	nop
    4488:	370c      	adds	r7, #12
    448a:	46bd      	mov	sp, r7
    448c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4490:	4770      	bx	lr

00004492 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4492:	b480      	push	{r7}
    4494:	b083      	sub	sp, #12
    4496:	af00      	add	r7, sp, #0
    4498:	6078      	str	r0, [r7, #4]
    449a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	683a      	ldr	r2, [r7, #0]
    44a0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    44a2:	bf00      	nop
    44a4:	370c      	adds	r7, #12
    44a6:	46bd      	mov	sp, r7
    44a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ac:	4770      	bx	lr
	...

000044b0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    44b0:	b580      	push	{r7, lr}
    44b2:	b082      	sub	sp, #8
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    44b8:	2101      	movs	r1, #1
    44ba:	484b      	ldr	r0, [pc, #300]	; (45e8 <_ext_irq_init+0x138>)
    44bc:	4b4b      	ldr	r3, [pc, #300]	; (45ec <_ext_irq_init+0x13c>)
    44be:	4798      	blx	r3
    44c0:	4603      	mov	r3, r0
    44c2:	f083 0301 	eor.w	r3, r3, #1
    44c6:	b2db      	uxtb	r3, r3
    44c8:	2b00      	cmp	r3, #0
    44ca:	d011      	beq.n	44f0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    44cc:	2102      	movs	r1, #2
    44ce:	4846      	ldr	r0, [pc, #280]	; (45e8 <_ext_irq_init+0x138>)
    44d0:	4b47      	ldr	r3, [pc, #284]	; (45f0 <_ext_irq_init+0x140>)
    44d2:	4798      	blx	r3
    44d4:	4603      	mov	r3, r0
    44d6:	2b00      	cmp	r3, #0
    44d8:	d006      	beq.n	44e8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    44da:	4843      	ldr	r0, [pc, #268]	; (45e8 <_ext_irq_init+0x138>)
    44dc:	4b45      	ldr	r3, [pc, #276]	; (45f4 <_ext_irq_init+0x144>)
    44de:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    44e0:	2102      	movs	r1, #2
    44e2:	4841      	ldr	r0, [pc, #260]	; (45e8 <_ext_irq_init+0x138>)
    44e4:	4b44      	ldr	r3, [pc, #272]	; (45f8 <_ext_irq_init+0x148>)
    44e6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    44e8:	2101      	movs	r1, #1
    44ea:	483f      	ldr	r0, [pc, #252]	; (45e8 <_ext_irq_init+0x138>)
    44ec:	4b43      	ldr	r3, [pc, #268]	; (45fc <_ext_irq_init+0x14c>)
    44ee:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    44f0:	2101      	movs	r1, #1
    44f2:	483d      	ldr	r0, [pc, #244]	; (45e8 <_ext_irq_init+0x138>)
    44f4:	4b40      	ldr	r3, [pc, #256]	; (45f8 <_ext_irq_init+0x148>)
    44f6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    44f8:	2100      	movs	r1, #0
    44fa:	483b      	ldr	r0, [pc, #236]	; (45e8 <_ext_irq_init+0x138>)
    44fc:	4b40      	ldr	r3, [pc, #256]	; (4600 <_ext_irq_init+0x150>)
    44fe:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4500:	2100      	movs	r1, #0
    4502:	4839      	ldr	r0, [pc, #228]	; (45e8 <_ext_irq_init+0x138>)
    4504:	4b3f      	ldr	r3, [pc, #252]	; (4604 <_ext_irq_init+0x154>)
    4506:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4508:	2100      	movs	r1, #0
    450a:	4837      	ldr	r0, [pc, #220]	; (45e8 <_ext_irq_init+0x138>)
    450c:	4b3e      	ldr	r3, [pc, #248]	; (4608 <_ext_irq_init+0x158>)
    450e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4510:	f240 31b9 	movw	r1, #953	; 0x3b9
    4514:	4834      	ldr	r0, [pc, #208]	; (45e8 <_ext_irq_init+0x138>)
    4516:	4b3d      	ldr	r3, [pc, #244]	; (460c <_ext_irq_init+0x15c>)
    4518:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    451a:	f240 3139 	movw	r1, #825	; 0x339
    451e:	4832      	ldr	r0, [pc, #200]	; (45e8 <_ext_irq_init+0x138>)
    4520:	4b3b      	ldr	r3, [pc, #236]	; (4610 <_ext_irq_init+0x160>)
    4522:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4524:	2100      	movs	r1, #0
    4526:	4830      	ldr	r0, [pc, #192]	; (45e8 <_ext_irq_init+0x138>)
    4528:	4b3a      	ldr	r3, [pc, #232]	; (4614 <_ext_irq_init+0x164>)
    452a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    452c:	4a3a      	ldr	r2, [pc, #232]	; (4618 <_ext_irq_init+0x168>)
    452e:	2100      	movs	r1, #0
    4530:	482d      	ldr	r0, [pc, #180]	; (45e8 <_ext_irq_init+0x138>)
    4532:	4b3a      	ldr	r3, [pc, #232]	; (461c <_ext_irq_init+0x16c>)
    4534:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4536:	2211      	movs	r2, #17
    4538:	2101      	movs	r1, #1
    453a:	482b      	ldr	r0, [pc, #172]	; (45e8 <_ext_irq_init+0x138>)
    453c:	4b37      	ldr	r3, [pc, #220]	; (461c <_ext_irq_init+0x16c>)
    453e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4540:	4829      	ldr	r0, [pc, #164]	; (45e8 <_ext_irq_init+0x138>)
    4542:	4b37      	ldr	r3, [pc, #220]	; (4620 <_ext_irq_init+0x170>)
    4544:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4546:	200c      	movs	r0, #12
    4548:	4b36      	ldr	r3, [pc, #216]	; (4624 <_ext_irq_init+0x174>)
    454a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    454c:	200c      	movs	r0, #12
    454e:	4b36      	ldr	r3, [pc, #216]	; (4628 <_ext_irq_init+0x178>)
    4550:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4552:	200c      	movs	r0, #12
    4554:	4b35      	ldr	r3, [pc, #212]	; (462c <_ext_irq_init+0x17c>)
    4556:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4558:	200f      	movs	r0, #15
    455a:	4b32      	ldr	r3, [pc, #200]	; (4624 <_ext_irq_init+0x174>)
    455c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    455e:	200f      	movs	r0, #15
    4560:	4b31      	ldr	r3, [pc, #196]	; (4628 <_ext_irq_init+0x178>)
    4562:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4564:	200f      	movs	r0, #15
    4566:	4b31      	ldr	r3, [pc, #196]	; (462c <_ext_irq_init+0x17c>)
    4568:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    456a:	2010      	movs	r0, #16
    456c:	4b2d      	ldr	r3, [pc, #180]	; (4624 <_ext_irq_init+0x174>)
    456e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4570:	2010      	movs	r0, #16
    4572:	4b2d      	ldr	r3, [pc, #180]	; (4628 <_ext_irq_init+0x178>)
    4574:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4576:	2010      	movs	r0, #16
    4578:	4b2c      	ldr	r3, [pc, #176]	; (462c <_ext_irq_init+0x17c>)
    457a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    457c:	2011      	movs	r0, #17
    457e:	4b29      	ldr	r3, [pc, #164]	; (4624 <_ext_irq_init+0x174>)
    4580:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4582:	2011      	movs	r0, #17
    4584:	4b28      	ldr	r3, [pc, #160]	; (4628 <_ext_irq_init+0x178>)
    4586:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4588:	2011      	movs	r0, #17
    458a:	4b28      	ldr	r3, [pc, #160]	; (462c <_ext_irq_init+0x17c>)
    458c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    458e:	2012      	movs	r0, #18
    4590:	4b24      	ldr	r3, [pc, #144]	; (4624 <_ext_irq_init+0x174>)
    4592:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4594:	2012      	movs	r0, #18
    4596:	4b24      	ldr	r3, [pc, #144]	; (4628 <_ext_irq_init+0x178>)
    4598:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    459a:	2012      	movs	r0, #18
    459c:	4b23      	ldr	r3, [pc, #140]	; (462c <_ext_irq_init+0x17c>)
    459e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    45a0:	2013      	movs	r0, #19
    45a2:	4b20      	ldr	r3, [pc, #128]	; (4624 <_ext_irq_init+0x174>)
    45a4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    45a6:	2013      	movs	r0, #19
    45a8:	4b1f      	ldr	r3, [pc, #124]	; (4628 <_ext_irq_init+0x178>)
    45aa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    45ac:	2013      	movs	r0, #19
    45ae:	4b1f      	ldr	r3, [pc, #124]	; (462c <_ext_irq_init+0x17c>)
    45b0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    45b2:	2014      	movs	r0, #20
    45b4:	4b1b      	ldr	r3, [pc, #108]	; (4624 <_ext_irq_init+0x174>)
    45b6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    45b8:	2014      	movs	r0, #20
    45ba:	4b1b      	ldr	r3, [pc, #108]	; (4628 <_ext_irq_init+0x178>)
    45bc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    45be:	2014      	movs	r0, #20
    45c0:	4b1a      	ldr	r3, [pc, #104]	; (462c <_ext_irq_init+0x17c>)
    45c2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    45c4:	2015      	movs	r0, #21
    45c6:	4b17      	ldr	r3, [pc, #92]	; (4624 <_ext_irq_init+0x174>)
    45c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    45ca:	2015      	movs	r0, #21
    45cc:	4b16      	ldr	r3, [pc, #88]	; (4628 <_ext_irq_init+0x178>)
    45ce:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    45d0:	2015      	movs	r0, #21
    45d2:	4b16      	ldr	r3, [pc, #88]	; (462c <_ext_irq_init+0x17c>)
    45d4:	4798      	blx	r3

	callback = cb;
    45d6:	4a16      	ldr	r2, [pc, #88]	; (4630 <_ext_irq_init+0x180>)
    45d8:	687b      	ldr	r3, [r7, #4]
    45da:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    45dc:	2300      	movs	r3, #0
}
    45de:	4618      	mov	r0, r3
    45e0:	3708      	adds	r7, #8
    45e2:	46bd      	mov	sp, r7
    45e4:	bd80      	pop	{r7, pc}
    45e6:	bf00      	nop
    45e8:	40002800 	.word	0x40002800
    45ec:	00004271 	.word	0x00004271
    45f0:	000043a1 	.word	0x000043a1
    45f4:	00004331 	.word	0x00004331
    45f8:	0000424d 	.word	0x0000424d
    45fc:	000043d1 	.word	0x000043d1
    4600:	0000435d 	.word	0x0000435d
    4604:	000043f9 	.word	0x000043f9
    4608:	00004417 	.word	0x00004417
    460c:	00004433 	.word	0x00004433
    4610:	00004477 	.word	0x00004477
    4614:	00004493 	.word	0x00004493
    4618:	90999003 	.word	0x90999003
    461c:	0000444f 	.word	0x0000444f
    4620:	00004305 	.word	0x00004305
    4624:	000041cd 	.word	0x000041cd
    4628:	00004211 	.word	0x00004211
    462c:	00004191 	.word	0x00004191
    4630:	200007fc 	.word	0x200007fc

00004634 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4634:	b580      	push	{r7, lr}
    4636:	b084      	sub	sp, #16
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
    463c:	460b      	mov	r3, r1
    463e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4640:	23ff      	movs	r3, #255	; 0xff
    4642:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4644:	2300      	movs	r3, #0
    4646:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4648:	e010      	b.n	466c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    464a:	7bbb      	ldrb	r3, [r7, #14]
    464c:	4a1c      	ldr	r2, [pc, #112]	; (46c0 <_ext_irq_enable+0x8c>)
    464e:	00db      	lsls	r3, r3, #3
    4650:	4413      	add	r3, r2
    4652:	685a      	ldr	r2, [r3, #4]
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	429a      	cmp	r2, r3
    4658:	d105      	bne.n	4666 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    465a:	7bbb      	ldrb	r3, [r7, #14]
    465c:	4a18      	ldr	r2, [pc, #96]	; (46c0 <_ext_irq_enable+0x8c>)
    465e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4662:	73fb      	strb	r3, [r7, #15]
			break;
    4664:	e005      	b.n	4672 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4666:	7bbb      	ldrb	r3, [r7, #14]
    4668:	3301      	adds	r3, #1
    466a:	73bb      	strb	r3, [r7, #14]
    466c:	7bbb      	ldrb	r3, [r7, #14]
    466e:	2b07      	cmp	r3, #7
    4670:	d9eb      	bls.n	464a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4672:	7bfb      	ldrb	r3, [r7, #15]
    4674:	2bff      	cmp	r3, #255	; 0xff
    4676:	d102      	bne.n	467e <_ext_irq_enable+0x4a>
		return -1;
    4678:	f04f 33ff 	mov.w	r3, #4294967295
    467c:	e01c      	b.n	46b8 <_ext_irq_enable+0x84>
	}

	if (enable) {
    467e:	78fb      	ldrb	r3, [r7, #3]
    4680:	2b00      	cmp	r3, #0
    4682:	d008      	beq.n	4696 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4684:	7bfb      	ldrb	r3, [r7, #15]
    4686:	2201      	movs	r2, #1
    4688:	fa02 f303 	lsl.w	r3, r2, r3
    468c:	4619      	mov	r1, r3
    468e:	480d      	ldr	r0, [pc, #52]	; (46c4 <_ext_irq_enable+0x90>)
    4690:	4b0d      	ldr	r3, [pc, #52]	; (46c8 <_ext_irq_enable+0x94>)
    4692:	4798      	blx	r3
    4694:	e00f      	b.n	46b6 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4696:	7bfb      	ldrb	r3, [r7, #15]
    4698:	2201      	movs	r2, #1
    469a:	fa02 f303 	lsl.w	r3, r2, r3
    469e:	4619      	mov	r1, r3
    46a0:	4808      	ldr	r0, [pc, #32]	; (46c4 <_ext_irq_enable+0x90>)
    46a2:	4b0a      	ldr	r3, [pc, #40]	; (46cc <_ext_irq_enable+0x98>)
    46a4:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    46a6:	7bfb      	ldrb	r3, [r7, #15]
    46a8:	2201      	movs	r2, #1
    46aa:	fa02 f303 	lsl.w	r3, r2, r3
    46ae:	4619      	mov	r1, r3
    46b0:	4804      	ldr	r0, [pc, #16]	; (46c4 <_ext_irq_enable+0x90>)
    46b2:	4b07      	ldr	r3, [pc, #28]	; (46d0 <_ext_irq_enable+0x9c>)
    46b4:	4798      	blx	r3
	}

	return ERR_NONE;
    46b6:	2300      	movs	r3, #0
}
    46b8:	4618      	mov	r0, r3
    46ba:	3710      	adds	r7, #16
    46bc:	46bd      	mov	sp, r7
    46be:	bd80      	pop	{r7, pc}
    46c0:	0000efcc 	.word	0x0000efcc
    46c4:	40002800 	.word	0x40002800
    46c8:	000042cd 	.word	0x000042cd
    46cc:	000042e9 	.word	0x000042e9
    46d0:	000042b1 	.word	0x000042b1

000046d4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    46d4:	b580      	push	{r7, lr}
    46d6:	b084      	sub	sp, #16
    46d8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    46da:	4841      	ldr	r0, [pc, #260]	; (47e0 <_ext_irq_handler+0x10c>)
    46dc:	4b41      	ldr	r3, [pc, #260]	; (47e4 <_ext_irq_handler+0x110>)
    46de:	4798      	blx	r3
    46e0:	4603      	mov	r3, r0
    46e2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    46e4:	f04f 33ff 	mov.w	r3, #4294967295
    46e8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	4619      	mov	r1, r3
    46ee:	483c      	ldr	r0, [pc, #240]	; (47e0 <_ext_irq_handler+0x10c>)
    46f0:	4b3d      	ldr	r3, [pc, #244]	; (47e8 <_ext_irq_handler+0x114>)
    46f2:	4798      	blx	r3

	ASSERT(callback);
    46f4:	4b3d      	ldr	r3, [pc, #244]	; (47ec <_ext_irq_handler+0x118>)
    46f6:	681b      	ldr	r3, [r3, #0]
    46f8:	2b00      	cmp	r3, #0
    46fa:	bf14      	ite	ne
    46fc:	2301      	movne	r3, #1
    46fe:	2300      	moveq	r3, #0
    4700:	b2db      	uxtb	r3, r3
    4702:	f44f 7282 	mov.w	r2, #260	; 0x104
    4706:	493a      	ldr	r1, [pc, #232]	; (47f0 <_ext_irq_handler+0x11c>)
    4708:	4618      	mov	r0, r3
    470a:	4b3a      	ldr	r3, [pc, #232]	; (47f4 <_ext_irq_handler+0x120>)
    470c:	4798      	blx	r3

	while (flags) {
    470e:	e060      	b.n	47d2 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4710:	683b      	ldr	r3, [r7, #0]
    4712:	4618      	mov	r0, r3
    4714:	4b38      	ldr	r3, [pc, #224]	; (47f8 <_ext_irq_handler+0x124>)
    4716:	4798      	blx	r3
    4718:	4603      	mov	r3, r0
    471a:	b2db      	uxtb	r3, r3
    471c:	3b01      	subs	r3, #1
    471e:	b2db      	uxtb	r3, r3
    4720:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4722:	e047      	b.n	47b4 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4724:	2300      	movs	r3, #0
    4726:	71fb      	strb	r3, [r7, #7]
    4728:	2308      	movs	r3, #8
    472a:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    472c:	e024      	b.n	4778 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    472e:	79ba      	ldrb	r2, [r7, #6]
    4730:	79fb      	ldrb	r3, [r7, #7]
    4732:	4413      	add	r3, r2
    4734:	105b      	asrs	r3, r3, #1
    4736:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4738:	797b      	ldrb	r3, [r7, #5]
    473a:	4a30      	ldr	r2, [pc, #192]	; (47fc <_ext_irq_handler+0x128>)
    473c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4740:	461a      	mov	r2, r3
    4742:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4746:	429a      	cmp	r2, r3
    4748:	d106      	bne.n	4758 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    474a:	797b      	ldrb	r3, [r7, #5]
    474c:	4a2b      	ldr	r2, [pc, #172]	; (47fc <_ext_irq_handler+0x128>)
    474e:	00db      	lsls	r3, r3, #3
    4750:	4413      	add	r3, r2
    4752:	685b      	ldr	r3, [r3, #4]
    4754:	60bb      	str	r3, [r7, #8]
					break;
    4756:	e013      	b.n	4780 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4758:	797b      	ldrb	r3, [r7, #5]
    475a:	4a28      	ldr	r2, [pc, #160]	; (47fc <_ext_irq_handler+0x128>)
    475c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4760:	461a      	mov	r2, r3
    4762:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4766:	429a      	cmp	r2, r3
    4768:	da03      	bge.n	4772 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    476a:	797b      	ldrb	r3, [r7, #5]
    476c:	3301      	adds	r3, #1
    476e:	71fb      	strb	r3, [r7, #7]
    4770:	e002      	b.n	4778 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4772:	797b      	ldrb	r3, [r7, #5]
    4774:	3b01      	subs	r3, #1
    4776:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4778:	79ba      	ldrb	r2, [r7, #6]
    477a:	79fb      	ldrb	r3, [r7, #7]
    477c:	429a      	cmp	r2, r3
    477e:	d2d6      	bcs.n	472e <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4780:	68bb      	ldr	r3, [r7, #8]
    4782:	f1b3 3fff 	cmp.w	r3, #4294967295
    4786:	d003      	beq.n	4790 <_ext_irq_handler+0xbc>
				callback(pin);
    4788:	4b18      	ldr	r3, [pc, #96]	; (47ec <_ext_irq_handler+0x118>)
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	68b8      	ldr	r0, [r7, #8]
    478e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4790:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4794:	2201      	movs	r2, #1
    4796:	fa02 f303 	lsl.w	r3, r2, r3
    479a:	43da      	mvns	r2, r3
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	4013      	ands	r3, r2
    47a0:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    47a2:	683b      	ldr	r3, [r7, #0]
    47a4:	4618      	mov	r0, r3
    47a6:	4b14      	ldr	r3, [pc, #80]	; (47f8 <_ext_irq_handler+0x124>)
    47a8:	4798      	blx	r3
    47aa:	4603      	mov	r3, r0
    47ac:	b2db      	uxtb	r3, r3
    47ae:	3b01      	subs	r3, #1
    47b0:	b2db      	uxtb	r3, r3
    47b2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    47b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    47bc:	d1b2      	bne.n	4724 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    47be:	4808      	ldr	r0, [pc, #32]	; (47e0 <_ext_irq_handler+0x10c>)
    47c0:	4b08      	ldr	r3, [pc, #32]	; (47e4 <_ext_irq_handler+0x110>)
    47c2:	4798      	blx	r3
    47c4:	4603      	mov	r3, r0
    47c6:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    47c8:	683b      	ldr	r3, [r7, #0]
    47ca:	4619      	mov	r1, r3
    47cc:	4804      	ldr	r0, [pc, #16]	; (47e0 <_ext_irq_handler+0x10c>)
    47ce:	4b06      	ldr	r3, [pc, #24]	; (47e8 <_ext_irq_handler+0x114>)
    47d0:	4798      	blx	r3
	while (flags) {
    47d2:	683b      	ldr	r3, [r7, #0]
    47d4:	2b00      	cmp	r3, #0
    47d6:	d19b      	bne.n	4710 <_ext_irq_handler+0x3c>
	}
}
    47d8:	bf00      	nop
    47da:	3710      	adds	r7, #16
    47dc:	46bd      	mov	sp, r7
    47de:	bd80      	pop	{r7, pc}
    47e0:	40002800 	.word	0x40002800
    47e4:	00004299 	.word	0x00004299
    47e8:	000042b1 	.word	0x000042b1
    47ec:	200007fc 	.word	0x200007fc
    47f0:	0000f00c 	.word	0x0000f00c
    47f4:	00003511 	.word	0x00003511
    47f8:	0000e99d 	.word	0x0000e99d
    47fc:	0000efcc 	.word	0x0000efcc

00004800 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4800:	b580      	push	{r7, lr}
    4802:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4804:	4b01      	ldr	r3, [pc, #4]	; (480c <EIC_0_Handler+0xc>)
    4806:	4798      	blx	r3
} /**
    4808:	bf00      	nop
    480a:	bd80      	pop	{r7, pc}
    480c:	000046d5 	.word	0x000046d5

00004810 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4810:	b580      	push	{r7, lr}
    4812:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4814:	4b01      	ldr	r3, [pc, #4]	; (481c <EIC_3_Handler+0xc>)
    4816:	4798      	blx	r3
} /**
    4818:	bf00      	nop
    481a:	bd80      	pop	{r7, pc}
    481c:	000046d5 	.word	0x000046d5

00004820 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4820:	b580      	push	{r7, lr}
    4822:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4824:	4b01      	ldr	r3, [pc, #4]	; (482c <EIC_4_Handler+0xc>)
    4826:	4798      	blx	r3
} /**
    4828:	bf00      	nop
    482a:	bd80      	pop	{r7, pc}
    482c:	000046d5 	.word	0x000046d5

00004830 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4830:	b580      	push	{r7, lr}
    4832:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4834:	4b01      	ldr	r3, [pc, #4]	; (483c <EIC_5_Handler+0xc>)
    4836:	4798      	blx	r3
} /**
    4838:	bf00      	nop
    483a:	bd80      	pop	{r7, pc}
    483c:	000046d5 	.word	0x000046d5

00004840 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4840:	b580      	push	{r7, lr}
    4842:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4844:	4b01      	ldr	r3, [pc, #4]	; (484c <EIC_6_Handler+0xc>)
    4846:	4798      	blx	r3
} /**
    4848:	bf00      	nop
    484a:	bd80      	pop	{r7, pc}
    484c:	000046d5 	.word	0x000046d5

00004850 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4850:	b580      	push	{r7, lr}
    4852:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4854:	4b01      	ldr	r3, [pc, #4]	; (485c <EIC_7_Handler+0xc>)
    4856:	4798      	blx	r3
} /**
    4858:	bf00      	nop
    485a:	bd80      	pop	{r7, pc}
    485c:	000046d5 	.word	0x000046d5

00004860 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4860:	b580      	push	{r7, lr}
    4862:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4864:	4b01      	ldr	r3, [pc, #4]	; (486c <EIC_8_Handler+0xc>)
    4866:	4798      	blx	r3
} /**
    4868:	bf00      	nop
    486a:	bd80      	pop	{r7, pc}
    486c:	000046d5 	.word	0x000046d5

00004870 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4870:	b580      	push	{r7, lr}
    4872:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4874:	4b01      	ldr	r3, [pc, #4]	; (487c <EIC_9_Handler+0xc>)
    4876:	4798      	blx	r3
}
    4878:	bf00      	nop
    487a:	bd80      	pop	{r7, pc}
    487c:	000046d5 	.word	0x000046d5

00004880 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4880:	b480      	push	{r7}
    4882:	b085      	sub	sp, #20
    4884:	af00      	add	r7, sp, #0
    4886:	60f8      	str	r0, [r7, #12]
    4888:	460b      	mov	r3, r1
    488a:	607a      	str	r2, [r7, #4]
    488c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    488e:	7afa      	ldrb	r2, [r7, #11]
    4890:	68fb      	ldr	r3, [r7, #12]
    4892:	3248      	adds	r2, #72	; 0x48
    4894:	6879      	ldr	r1, [r7, #4]
    4896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    489a:	bf00      	nop
    489c:	3714      	adds	r7, #20
    489e:	46bd      	mov	sp, r7
    48a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a4:	4770      	bx	lr

000048a6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    48a6:	b480      	push	{r7}
    48a8:	b083      	sub	sp, #12
    48aa:	af00      	add	r7, sp, #0
    48ac:	6078      	str	r0, [r7, #4]
    48ae:	460b      	mov	r3, r1
    48b0:	70fb      	strb	r3, [r7, #3]
    48b2:	4613      	mov	r3, r2
    48b4:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    48b6:	78fb      	ldrb	r3, [r7, #3]
    48b8:	687a      	ldr	r2, [r7, #4]
    48ba:	3304      	adds	r3, #4
    48bc:	00db      	lsls	r3, r3, #3
    48be:	4413      	add	r3, r2
    48c0:	78ba      	ldrb	r2, [r7, #2]
    48c2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    48c4:	78fb      	ldrb	r3, [r7, #3]
    48c6:	78ba      	ldrb	r2, [r7, #2]
    48c8:	43d2      	mvns	r2, r2
    48ca:	b2d1      	uxtb	r1, r2
    48cc:	687a      	ldr	r2, [r7, #4]
    48ce:	3304      	adds	r3, #4
    48d0:	00db      	lsls	r3, r3, #3
    48d2:	4413      	add	r3, r2
    48d4:	460a      	mov	r2, r1
    48d6:	711a      	strb	r2, [r3, #4]
}
    48d8:	bf00      	nop
    48da:	370c      	adds	r7, #12
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr

000048e4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    48e4:	b480      	push	{r7}
    48e6:	b085      	sub	sp, #20
    48e8:	af00      	add	r7, sp, #0
    48ea:	60f8      	str	r0, [r7, #12]
    48ec:	460b      	mov	r3, r1
    48ee:	607a      	str	r2, [r7, #4]
    48f0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    48f2:	7afa      	ldrb	r2, [r7, #11]
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	3204      	adds	r2, #4
    48f8:	6879      	ldr	r1, [r7, #4]
    48fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    48fe:	bf00      	nop
    4900:	3714      	adds	r7, #20
    4902:	46bd      	mov	sp, r7
    4904:	f85d 7b04 	ldr.w	r7, [sp], #4
    4908:	4770      	bx	lr
	...

0000490c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    490c:	b580      	push	{r7, lr}
    490e:	b082      	sub	sp, #8
    4910:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4912:	2300      	movs	r3, #0
    4914:	71fb      	strb	r3, [r7, #7]
    4916:	e00b      	b.n	4930 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4918:	79fb      	ldrb	r3, [r7, #7]
    491a:	4a18      	ldr	r2, [pc, #96]	; (497c <_event_system_init+0x70>)
    491c:	5cd3      	ldrb	r3, [r2, r3]
    491e:	461a      	mov	r2, r3
    4920:	79fb      	ldrb	r3, [r7, #7]
    4922:	4619      	mov	r1, r3
    4924:	4816      	ldr	r0, [pc, #88]	; (4980 <_event_system_init+0x74>)
    4926:	4b17      	ldr	r3, [pc, #92]	; (4984 <_event_system_init+0x78>)
    4928:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    492a:	79fb      	ldrb	r3, [r7, #7]
    492c:	3301      	adds	r3, #1
    492e:	71fb      	strb	r3, [r7, #7]
    4930:	79fb      	ldrb	r3, [r7, #7]
    4932:	2b42      	cmp	r3, #66	; 0x42
    4934:	d9f0      	bls.n	4918 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4936:	2300      	movs	r3, #0
    4938:	71fb      	strb	r3, [r7, #7]
    493a:	e016      	b.n	496a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    493c:	79fb      	ldrb	r3, [r7, #7]
    493e:	4a12      	ldr	r2, [pc, #72]	; (4988 <_event_system_init+0x7c>)
    4940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4944:	461a      	mov	r2, r3
    4946:	79fb      	ldrb	r3, [r7, #7]
    4948:	4619      	mov	r1, r3
    494a:	480d      	ldr	r0, [pc, #52]	; (4980 <_event_system_init+0x74>)
    494c:	4b0f      	ldr	r3, [pc, #60]	; (498c <_event_system_init+0x80>)
    494e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4950:	79fb      	ldrb	r3, [r7, #7]
    4952:	4a0f      	ldr	r2, [pc, #60]	; (4990 <_event_system_init+0x84>)
    4954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4958:	b2da      	uxtb	r2, r3
    495a:	79fb      	ldrb	r3, [r7, #7]
    495c:	4619      	mov	r1, r3
    495e:	4808      	ldr	r0, [pc, #32]	; (4980 <_event_system_init+0x74>)
    4960:	4b0c      	ldr	r3, [pc, #48]	; (4994 <_event_system_init+0x88>)
    4962:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4964:	79fb      	ldrb	r3, [r7, #7]
    4966:	3301      	adds	r3, #1
    4968:	71fb      	strb	r3, [r7, #7]
    496a:	79fb      	ldrb	r3, [r7, #7]
    496c:	2b1f      	cmp	r3, #31
    496e:	d9e5      	bls.n	493c <_event_system_init+0x30>
	}

	return ERR_NONE;
    4970:	2300      	movs	r3, #0
}
    4972:	4618      	mov	r0, r3
    4974:	3708      	adds	r7, #8
    4976:	46bd      	mov	sp, r7
    4978:	bd80      	pop	{r7, pc}
    497a:	bf00      	nop
    497c:	0000f024 	.word	0x0000f024
    4980:	4100e000 	.word	0x4100e000
    4984:	00004881 	.word	0x00004881
    4988:	0000f068 	.word	0x0000f068
    498c:	000048e5 	.word	0x000048e5
    4990:	0000f0a8 	.word	0x0000f0a8
    4994:	000048a7 	.word	0x000048a7

00004998 <hri_gclk_wait_for_sync>:
{
    4998:	b480      	push	{r7}
    499a:	b083      	sub	sp, #12
    499c:	af00      	add	r7, sp, #0
    499e:	6078      	str	r0, [r7, #4]
    49a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    49a2:	bf00      	nop
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	685a      	ldr	r2, [r3, #4]
    49a8:	683b      	ldr	r3, [r7, #0]
    49aa:	4013      	ands	r3, r2
    49ac:	2b00      	cmp	r3, #0
    49ae:	d1f9      	bne.n	49a4 <hri_gclk_wait_for_sync+0xc>
}
    49b0:	bf00      	nop
    49b2:	370c      	adds	r7, #12
    49b4:	46bd      	mov	sp, r7
    49b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ba:	4770      	bx	lr

000049bc <hri_gclk_write_GENCTRL_reg>:
{
    49bc:	b580      	push	{r7, lr}
    49be:	b084      	sub	sp, #16
    49c0:	af00      	add	r7, sp, #0
    49c2:	60f8      	str	r0, [r7, #12]
    49c4:	460b      	mov	r3, r1
    49c6:	607a      	str	r2, [r7, #4]
    49c8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    49ca:	7afa      	ldrb	r2, [r7, #11]
    49cc:	68fb      	ldr	r3, [r7, #12]
    49ce:	3208      	adds	r2, #8
    49d0:	6879      	ldr	r1, [r7, #4]
    49d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    49d6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    49da:	68f8      	ldr	r0, [r7, #12]
    49dc:	4b02      	ldr	r3, [pc, #8]	; (49e8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    49de:	4798      	blx	r3
}
    49e0:	bf00      	nop
    49e2:	3710      	adds	r7, #16
    49e4:	46bd      	mov	sp, r7
    49e6:	bd80      	pop	{r7, pc}
    49e8:	00004999 	.word	0x00004999

000049ec <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b082      	sub	sp, #8
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	f003 0301 	and.w	r3, r3, #1
    49fa:	2b00      	cmp	r3, #0
    49fc:	d004      	beq.n	4a08 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    49fe:	4a36      	ldr	r2, [pc, #216]	; (4ad8 <_gclk_init_generators_by_fref+0xec>)
    4a00:	2100      	movs	r1, #0
    4a02:	4836      	ldr	r0, [pc, #216]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a04:	4b36      	ldr	r3, [pc, #216]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a06:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	f003 0302 	and.w	r3, r3, #2
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d004      	beq.n	4a1c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4a12:	4a34      	ldr	r2, [pc, #208]	; (4ae4 <_gclk_init_generators_by_fref+0xf8>)
    4a14:	2101      	movs	r1, #1
    4a16:	4831      	ldr	r0, [pc, #196]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a18:	4b31      	ldr	r3, [pc, #196]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a1a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	f003 0304 	and.w	r3, r3, #4
    4a22:	2b00      	cmp	r3, #0
    4a24:	d004      	beq.n	4a30 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4a26:	4a30      	ldr	r2, [pc, #192]	; (4ae8 <_gclk_init_generators_by_fref+0xfc>)
    4a28:	2102      	movs	r1, #2
    4a2a:	482c      	ldr	r0, [pc, #176]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a2c:	4b2c      	ldr	r3, [pc, #176]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a2e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	f003 0308 	and.w	r3, r3, #8
    4a36:	2b00      	cmp	r3, #0
    4a38:	d004      	beq.n	4a44 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4a3a:	4a2c      	ldr	r2, [pc, #176]	; (4aec <_gclk_init_generators_by_fref+0x100>)
    4a3c:	2103      	movs	r1, #3
    4a3e:	4827      	ldr	r0, [pc, #156]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a40:	4b27      	ldr	r3, [pc, #156]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a42:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	f003 0310 	and.w	r3, r3, #16
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d004      	beq.n	4a58 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4a4e:	4a28      	ldr	r2, [pc, #160]	; (4af0 <_gclk_init_generators_by_fref+0x104>)
    4a50:	2104      	movs	r1, #4
    4a52:	4822      	ldr	r0, [pc, #136]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a54:	4b22      	ldr	r3, [pc, #136]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a56:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	f003 0320 	and.w	r3, r3, #32
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d004      	beq.n	4a6c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4a62:	4a24      	ldr	r2, [pc, #144]	; (4af4 <_gclk_init_generators_by_fref+0x108>)
    4a64:	2105      	movs	r1, #5
    4a66:	481d      	ldr	r0, [pc, #116]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a68:	4b1d      	ldr	r3, [pc, #116]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a6a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4a72:	2b00      	cmp	r3, #0
    4a74:	d004      	beq.n	4a80 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4a76:	4a20      	ldr	r2, [pc, #128]	; (4af8 <_gclk_init_generators_by_fref+0x10c>)
    4a78:	2106      	movs	r1, #6
    4a7a:	4818      	ldr	r0, [pc, #96]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a7c:	4b18      	ldr	r3, [pc, #96]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a7e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4a86:	2b00      	cmp	r3, #0
    4a88:	d004      	beq.n	4a94 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4a8a:	4a1c      	ldr	r2, [pc, #112]	; (4afc <_gclk_init_generators_by_fref+0x110>)
    4a8c:	2107      	movs	r1, #7
    4a8e:	4813      	ldr	r0, [pc, #76]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4a90:	4b13      	ldr	r3, [pc, #76]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4a92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d004      	beq.n	4aa8 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4a9e:	4a18      	ldr	r2, [pc, #96]	; (4b00 <_gclk_init_generators_by_fref+0x114>)
    4aa0:	2108      	movs	r1, #8
    4aa2:	480e      	ldr	r0, [pc, #56]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4aa4:	4b0e      	ldr	r3, [pc, #56]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4aa6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d004      	beq.n	4abc <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4ab2:	4a14      	ldr	r2, [pc, #80]	; (4b04 <_gclk_init_generators_by_fref+0x118>)
    4ab4:	210a      	movs	r1, #10
    4ab6:	4809      	ldr	r0, [pc, #36]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4ab8:	4b09      	ldr	r3, [pc, #36]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4aba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d004      	beq.n	4ad0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4ac6:	4a10      	ldr	r2, [pc, #64]	; (4b08 <_gclk_init_generators_by_fref+0x11c>)
    4ac8:	210b      	movs	r1, #11
    4aca:	4804      	ldr	r0, [pc, #16]	; (4adc <_gclk_init_generators_by_fref+0xf0>)
    4acc:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <_gclk_init_generators_by_fref+0xf4>)
    4ace:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4ad0:	bf00      	nop
    4ad2:	3708      	adds	r7, #8
    4ad4:	46bd      	mov	sp, r7
    4ad6:	bd80      	pop	{r7, pc}
    4ad8:	00010107 	.word	0x00010107
    4adc:	40001c00 	.word	0x40001c00
    4ae0:	000049bd 	.word	0x000049bd
    4ae4:	00010907 	.word	0x00010907
    4ae8:	00010906 	.word	0x00010906
    4aec:	00020908 	.word	0x00020908
    4af0:	00010901 	.word	0x00010901
    4af4:	00062901 	.word	0x00062901
    4af8:	000c2901 	.word	0x000c2901
    4afc:	00082908 	.word	0x00082908
    4b00:	00032901 	.word	0x00032901
    4b04:	00010905 	.word	0x00010905
    4b08:	00041905 	.word	0x00041905

00004b0c <hri_mclk_write_CPUDIV_reg>:
{
    4b0c:	b480      	push	{r7}
    4b0e:	b083      	sub	sp, #12
    4b10:	af00      	add	r7, sp, #0
    4b12:	6078      	str	r0, [r7, #4]
    4b14:	460b      	mov	r3, r1
    4b16:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	78fa      	ldrb	r2, [r7, #3]
    4b1c:	715a      	strb	r2, [r3, #5]
}
    4b1e:	bf00      	nop
    4b20:	370c      	adds	r7, #12
    4b22:	46bd      	mov	sp, r7
    4b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b28:	4770      	bx	lr
	...

00004b2c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4b2c:	b580      	push	{r7, lr}
    4b2e:	b082      	sub	sp, #8
    4b30:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4b32:	4b05      	ldr	r3, [pc, #20]	; (4b48 <_mclk_init+0x1c>)
    4b34:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4b36:	2101      	movs	r1, #1
    4b38:	6878      	ldr	r0, [r7, #4]
    4b3a:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_mclk_init+0x20>)
    4b3c:	4798      	blx	r3
}
    4b3e:	bf00      	nop
    4b40:	3708      	adds	r7, #8
    4b42:	46bd      	mov	sp, r7
    4b44:	bd80      	pop	{r7, pc}
    4b46:	bf00      	nop
    4b48:	40000800 	.word	0x40000800
    4b4c:	00004b0d 	.word	0x00004b0d

00004b50 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4b50:	b480      	push	{r7}
    4b52:	b083      	sub	sp, #12
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
    4b58:	460b      	mov	r3, r1
    4b5a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	78fa      	ldrb	r2, [r7, #3]
    4b60:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b62:	bf00      	nop
    4b64:	370c      	adds	r7, #12
    4b66:	46bd      	mov	sp, r7
    4b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b6c:	4770      	bx	lr

00004b6e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4b6e:	b480      	push	{r7}
    4b70:	b083      	sub	sp, #12
    4b72:	af00      	add	r7, sp, #0
    4b74:	6078      	str	r0, [r7, #4]
    4b76:	460b      	mov	r3, r1
    4b78:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	887a      	ldrh	r2, [r7, #2]
    4b7e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b80:	bf00      	nop
    4b82:	370c      	adds	r7, #12
    4b84:	46bd      	mov	sp, r7
    4b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8a:	4770      	bx	lr

00004b8c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4b8c:	b480      	push	{r7}
    4b8e:	b083      	sub	sp, #12
    4b90:	af00      	add	r7, sp, #0
    4b92:	6078      	str	r0, [r7, #4]
    4b94:	460b      	mov	r3, r1
    4b96:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	78fa      	ldrb	r2, [r7, #3]
    4b9c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4b9e:	bf00      	nop
    4ba0:	370c      	adds	r7, #12
    4ba2:	46bd      	mov	sp, r7
    4ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba8:	4770      	bx	lr

00004baa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4baa:	b480      	push	{r7}
    4bac:	b083      	sub	sp, #12
    4bae:	af00      	add	r7, sp, #0
    4bb0:	6078      	str	r0, [r7, #4]
    4bb2:	460b      	mov	r3, r1
    4bb4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	78fa      	ldrb	r2, [r7, #3]
    4bba:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4bbc:	bf00      	nop
    4bbe:	370c      	adds	r7, #12
    4bc0:	46bd      	mov	sp, r7
    4bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc6:	4770      	bx	lr

00004bc8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4bc8:	b480      	push	{r7}
    4bca:	b085      	sub	sp, #20
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	69db      	ldr	r3, [r3, #28]
    4bd4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	0a1b      	lsrs	r3, r3, #8
    4bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4bde:	60fb      	str	r3, [r7, #12]
	return tmp;
    4be0:	68fb      	ldr	r3, [r7, #12]
}
    4be2:	4618      	mov	r0, r3
    4be4:	3714      	adds	r7, #20
    4be6:	46bd      	mov	sp, r7
    4be8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bec:	4770      	bx	lr

00004bee <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4bee:	b480      	push	{r7}
    4bf0:	b083      	sub	sp, #12
    4bf2:	af00      	add	r7, sp, #0
    4bf4:	6078      	str	r0, [r7, #4]
    4bf6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	683a      	ldr	r2, [r7, #0]
    4bfc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4bfe:	bf00      	nop
    4c00:	370c      	adds	r7, #12
    4c02:	46bd      	mov	sp, r7
    4c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c08:	4770      	bx	lr
	...

00004c0c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4c0c:	b580      	push	{r7, lr}
    4c0e:	b082      	sub	sp, #8
    4c10:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4c12:	4b13      	ldr	r3, [pc, #76]	; (4c60 <_osc32kctrl_init_sources+0x54>)
    4c14:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4c16:	2300      	movs	r3, #0
    4c18:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4c1a:	f242 018e 	movw	r1, #8334	; 0x208e
    4c1e:	6878      	ldr	r0, [r7, #4]
    4c20:	4b10      	ldr	r3, [pc, #64]	; (4c64 <_osc32kctrl_init_sources+0x58>)
    4c22:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4c24:	2100      	movs	r1, #0
    4c26:	6878      	ldr	r0, [r7, #4]
    4c28:	4b0f      	ldr	r3, [pc, #60]	; (4c68 <_osc32kctrl_init_sources+0x5c>)
    4c2a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4c2c:	2100      	movs	r1, #0
    4c2e:	6878      	ldr	r0, [r7, #4]
    4c30:	4b0e      	ldr	r3, [pc, #56]	; (4c6c <_osc32kctrl_init_sources+0x60>)
    4c32:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4c34:	6878      	ldr	r0, [r7, #4]
    4c36:	4b0e      	ldr	r3, [pc, #56]	; (4c70 <_osc32kctrl_init_sources+0x64>)
    4c38:	4798      	blx	r3
    4c3a:	4603      	mov	r3, r0
    4c3c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4c3e:	887b      	ldrh	r3, [r7, #2]
    4c40:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4c42:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4c46:	4619      	mov	r1, r3
    4c48:	6878      	ldr	r0, [r7, #4]
    4c4a:	4b0a      	ldr	r3, [pc, #40]	; (4c74 <_osc32kctrl_init_sources+0x68>)
    4c4c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4c4e:	2100      	movs	r1, #0
    4c50:	6878      	ldr	r0, [r7, #4]
    4c52:	4b09      	ldr	r3, [pc, #36]	; (4c78 <_osc32kctrl_init_sources+0x6c>)
    4c54:	4798      	blx	r3
	(void)calib;
}
    4c56:	bf00      	nop
    4c58:	3708      	adds	r7, #8
    4c5a:	46bd      	mov	sp, r7
    4c5c:	bd80      	pop	{r7, pc}
    4c5e:	bf00      	nop
    4c60:	40001400 	.word	0x40001400
    4c64:	00004b6f 	.word	0x00004b6f
    4c68:	00004b8d 	.word	0x00004b8d
    4c6c:	00004bab 	.word	0x00004bab
    4c70:	00004bc9 	.word	0x00004bc9
    4c74:	00004bef 	.word	0x00004bef
    4c78:	00004b51 	.word	0x00004b51

00004c7c <hri_gclk_wait_for_sync>:
{
    4c7c:	b480      	push	{r7}
    4c7e:	b083      	sub	sp, #12
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
    4c84:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4c86:	bf00      	nop
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	685a      	ldr	r2, [r3, #4]
    4c8c:	683b      	ldr	r3, [r7, #0]
    4c8e:	4013      	ands	r3, r2
    4c90:	2b00      	cmp	r3, #0
    4c92:	d1f9      	bne.n	4c88 <hri_gclk_wait_for_sync+0xc>
}
    4c94:	bf00      	nop
    4c96:	370c      	adds	r7, #12
    4c98:	46bd      	mov	sp, r7
    4c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9e:	4770      	bx	lr

00004ca0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4ca0:	b480      	push	{r7}
    4ca2:	b083      	sub	sp, #12
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4ca8:	687b      	ldr	r3, [r7, #4]
    4caa:	685b      	ldr	r3, [r3, #4]
    4cac:	089b      	lsrs	r3, r3, #2
    4cae:	f003 0301 	and.w	r3, r3, #1
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	bf14      	ite	ne
    4cb6:	2301      	movne	r3, #1
    4cb8:	2300      	moveq	r3, #0
    4cba:	b2db      	uxtb	r3, r3
}
    4cbc:	4618      	mov	r0, r3
    4cbe:	370c      	adds	r7, #12
    4cc0:	46bd      	mov	sp, r7
    4cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc6:	4770      	bx	lr

00004cc8 <hri_gclk_read_SYNCBUSY_reg>:
{
    4cc8:	b480      	push	{r7}
    4cca:	b083      	sub	sp, #12
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	685b      	ldr	r3, [r3, #4]
}
    4cd4:	4618      	mov	r0, r3
    4cd6:	370c      	adds	r7, #12
    4cd8:	46bd      	mov	sp, r7
    4cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cde:	4770      	bx	lr

00004ce0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b086      	sub	sp, #24
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	60f8      	str	r0, [r7, #12]
    4ce8:	460b      	mov	r3, r1
    4cea:	607a      	str	r2, [r7, #4]
    4cec:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4cee:	7afa      	ldrb	r2, [r7, #11]
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	3208      	adds	r2, #8
    4cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4cf8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4cfa:	697b      	ldr	r3, [r7, #20]
    4cfc:	f023 030f 	bic.w	r3, r3, #15
    4d00:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	f003 030f 	and.w	r3, r3, #15
    4d08:	697a      	ldr	r2, [r7, #20]
    4d0a:	4313      	orrs	r3, r2
    4d0c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4d0e:	7afa      	ldrb	r2, [r7, #11]
    4d10:	68fb      	ldr	r3, [r7, #12]
    4d12:	3208      	adds	r2, #8
    4d14:	6979      	ldr	r1, [r7, #20]
    4d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4d1a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4d1e:	68f8      	ldr	r0, [r7, #12]
    4d20:	4b02      	ldr	r3, [pc, #8]	; (4d2c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4d22:	4798      	blx	r3
}
    4d24:	bf00      	nop
    4d26:	3718      	adds	r7, #24
    4d28:	46bd      	mov	sp, r7
    4d2a:	bd80      	pop	{r7, pc}
    4d2c:	00004c7d 	.word	0x00004c7d

00004d30 <hri_gclk_write_PCHCTRL_reg>:
{
    4d30:	b480      	push	{r7}
    4d32:	b085      	sub	sp, #20
    4d34:	af00      	add	r7, sp, #0
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	460b      	mov	r3, r1
    4d3a:	607a      	str	r2, [r7, #4]
    4d3c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4d3e:	7afa      	ldrb	r2, [r7, #11]
    4d40:	68fb      	ldr	r3, [r7, #12]
    4d42:	3220      	adds	r2, #32
    4d44:	6879      	ldr	r1, [r7, #4]
    4d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4d4a:	bf00      	nop
    4d4c:	3714      	adds	r7, #20
    4d4e:	46bd      	mov	sp, r7
    4d50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d54:	4770      	bx	lr

00004d56 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4d56:	b480      	push	{r7}
    4d58:	b085      	sub	sp, #20
    4d5a:	af00      	add	r7, sp, #0
    4d5c:	60f8      	str	r0, [r7, #12]
    4d5e:	460b      	mov	r3, r1
    4d60:	607a      	str	r2, [r7, #4]
    4d62:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4d64:	bf00      	nop
    4d66:	7afa      	ldrb	r2, [r7, #11]
    4d68:	68f9      	ldr	r1, [r7, #12]
    4d6a:	4613      	mov	r3, r2
    4d6c:	009b      	lsls	r3, r3, #2
    4d6e:	4413      	add	r3, r2
    4d70:	009b      	lsls	r3, r3, #2
    4d72:	440b      	add	r3, r1
    4d74:	333c      	adds	r3, #60	; 0x3c
    4d76:	681a      	ldr	r2, [r3, #0]
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	4013      	ands	r3, r2
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d1f2      	bne.n	4d66 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4d80:	bf00      	nop
    4d82:	3714      	adds	r7, #20
    4d84:	46bd      	mov	sp, r7
    4d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8a:	4770      	bx	lr

00004d8c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4d8c:	b480      	push	{r7}
    4d8e:	b083      	sub	sp, #12
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
    4d94:	460b      	mov	r3, r1
    4d96:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4d98:	78fa      	ldrb	r2, [r7, #3]
    4d9a:	6879      	ldr	r1, [r7, #4]
    4d9c:	4613      	mov	r3, r2
    4d9e:	009b      	lsls	r3, r3, #2
    4da0:	4413      	add	r3, r2
    4da2:	009b      	lsls	r3, r3, #2
    4da4:	440b      	add	r3, r1
    4da6:	3340      	adds	r3, #64	; 0x40
    4da8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4daa:	f003 0301 	and.w	r3, r3, #1
    4dae:	2b00      	cmp	r3, #0
    4db0:	bf14      	ite	ne
    4db2:	2301      	movne	r3, #1
    4db4:	2300      	moveq	r3, #0
    4db6:	b2db      	uxtb	r3, r3
}
    4db8:	4618      	mov	r0, r3
    4dba:	370c      	adds	r7, #12
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4dc4:	b480      	push	{r7}
    4dc6:	b083      	sub	sp, #12
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
    4dcc:	460b      	mov	r3, r1
    4dce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4dd0:	78fa      	ldrb	r2, [r7, #3]
    4dd2:	6879      	ldr	r1, [r7, #4]
    4dd4:	4613      	mov	r3, r2
    4dd6:	009b      	lsls	r3, r3, #2
    4dd8:	4413      	add	r3, r2
    4dda:	009b      	lsls	r3, r3, #2
    4ddc:	440b      	add	r3, r1
    4dde:	3340      	adds	r3, #64	; 0x40
    4de0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4de2:	085b      	lsrs	r3, r3, #1
    4de4:	f003 0301 	and.w	r3, r3, #1
    4de8:	2b00      	cmp	r3, #0
    4dea:	bf14      	ite	ne
    4dec:	2301      	movne	r3, #1
    4dee:	2300      	moveq	r3, #0
    4df0:	b2db      	uxtb	r3, r3
}
    4df2:	4618      	mov	r0, r3
    4df4:	370c      	adds	r7, #12
    4df6:	46bd      	mov	sp, r7
    4df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfc:	4770      	bx	lr
	...

00004e00 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	b082      	sub	sp, #8
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
    4e08:	460b      	mov	r3, r1
    4e0a:	70fb      	strb	r3, [r7, #3]
    4e0c:	4613      	mov	r3, r2
    4e0e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4e10:	78fa      	ldrb	r2, [r7, #3]
    4e12:	6879      	ldr	r1, [r7, #4]
    4e14:	4613      	mov	r3, r2
    4e16:	009b      	lsls	r3, r3, #2
    4e18:	4413      	add	r3, r2
    4e1a:	009b      	lsls	r3, r3, #2
    4e1c:	440b      	add	r3, r1
    4e1e:	3330      	adds	r3, #48	; 0x30
    4e20:	78ba      	ldrb	r2, [r7, #2]
    4e22:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4e24:	78fb      	ldrb	r3, [r7, #3]
    4e26:	2202      	movs	r2, #2
    4e28:	4619      	mov	r1, r3
    4e2a:	6878      	ldr	r0, [r7, #4]
    4e2c:	4b02      	ldr	r3, [pc, #8]	; (4e38 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4e2e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e30:	bf00      	nop
    4e32:	3708      	adds	r7, #8
    4e34:	46bd      	mov	sp, r7
    4e36:	bd80      	pop	{r7, pc}
    4e38:	00004d57 	.word	0x00004d57

00004e3c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	b084      	sub	sp, #16
    4e40:	af00      	add	r7, sp, #0
    4e42:	60f8      	str	r0, [r7, #12]
    4e44:	460b      	mov	r3, r1
    4e46:	607a      	str	r2, [r7, #4]
    4e48:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4e4a:	7afa      	ldrb	r2, [r7, #11]
    4e4c:	68f9      	ldr	r1, [r7, #12]
    4e4e:	4613      	mov	r3, r2
    4e50:	009b      	lsls	r3, r3, #2
    4e52:	4413      	add	r3, r2
    4e54:	009b      	lsls	r3, r3, #2
    4e56:	440b      	add	r3, r1
    4e58:	3334      	adds	r3, #52	; 0x34
    4e5a:	687a      	ldr	r2, [r7, #4]
    4e5c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4e5e:	7afb      	ldrb	r3, [r7, #11]
    4e60:	2206      	movs	r2, #6
    4e62:	4619      	mov	r1, r3
    4e64:	68f8      	ldr	r0, [r7, #12]
    4e66:	4b03      	ldr	r3, [pc, #12]	; (4e74 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4e68:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e6a:	bf00      	nop
    4e6c:	3710      	adds	r7, #16
    4e6e:	46bd      	mov	sp, r7
    4e70:	bd80      	pop	{r7, pc}
    4e72:	bf00      	nop
    4e74:	00004d57 	.word	0x00004d57

00004e78 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4e78:	b480      	push	{r7}
    4e7a:	b085      	sub	sp, #20
    4e7c:	af00      	add	r7, sp, #0
    4e7e:	60f8      	str	r0, [r7, #12]
    4e80:	460b      	mov	r3, r1
    4e82:	607a      	str	r2, [r7, #4]
    4e84:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4e86:	7afa      	ldrb	r2, [r7, #11]
    4e88:	68f9      	ldr	r1, [r7, #12]
    4e8a:	4613      	mov	r3, r2
    4e8c:	009b      	lsls	r3, r3, #2
    4e8e:	4413      	add	r3, r2
    4e90:	009b      	lsls	r3, r3, #2
    4e92:	440b      	add	r3, r1
    4e94:	3338      	adds	r3, #56	; 0x38
    4e96:	687a      	ldr	r2, [r7, #4]
    4e98:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4e9a:	bf00      	nop
    4e9c:	3714      	adds	r7, #20
    4e9e:	46bd      	mov	sp, r7
    4ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea4:	4770      	bx	lr

00004ea6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4ea6:	b480      	push	{r7}
    4ea8:	b083      	sub	sp, #12
    4eaa:	af00      	add	r7, sp, #0
    4eac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	691b      	ldr	r3, [r3, #16]
    4eb2:	085b      	lsrs	r3, r3, #1
    4eb4:	f003 0301 	and.w	r3, r3, #1
    4eb8:	2b00      	cmp	r3, #0
    4eba:	bf14      	ite	ne
    4ebc:	2301      	movne	r3, #1
    4ebe:	2300      	moveq	r3, #0
    4ec0:	b2db      	uxtb	r3, r3
}
    4ec2:	4618      	mov	r0, r3
    4ec4:	370c      	adds	r7, #12
    4ec6:	46bd      	mov	sp, r7
    4ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ecc:	4770      	bx	lr

00004ece <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4ece:	b480      	push	{r7}
    4ed0:	b083      	sub	sp, #12
    4ed2:	af00      	add	r7, sp, #0
    4ed4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	691b      	ldr	r3, [r3, #16]
    4eda:	0a1b      	lsrs	r3, r3, #8
    4edc:	f003 0301 	and.w	r3, r3, #1
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	bf14      	ite	ne
    4ee4:	2301      	movne	r3, #1
    4ee6:	2300      	moveq	r3, #0
    4ee8:	b2db      	uxtb	r3, r3
}
    4eea:	4618      	mov	r0, r3
    4eec:	370c      	adds	r7, #12
    4eee:	46bd      	mov	sp, r7
    4ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef4:	4770      	bx	lr

00004ef6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4ef6:	b480      	push	{r7}
    4ef8:	b085      	sub	sp, #20
    4efa:	af00      	add	r7, sp, #0
    4efc:	6078      	str	r0, [r7, #4]
    4efe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	691b      	ldr	r3, [r3, #16]
    4f04:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4f06:	68fa      	ldr	r2, [r7, #12]
    4f08:	683b      	ldr	r3, [r7, #0]
    4f0a:	4013      	ands	r3, r2
    4f0c:	60fb      	str	r3, [r7, #12]
	return tmp;
    4f0e:	68fb      	ldr	r3, [r7, #12]
}
    4f10:	4618      	mov	r0, r3
    4f12:	3714      	adds	r7, #20
    4f14:	46bd      	mov	sp, r7
    4f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1a:	4770      	bx	lr

00004f1c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4f1c:	b480      	push	{r7}
    4f1e:	b085      	sub	sp, #20
    4f20:	af00      	add	r7, sp, #0
    4f22:	60f8      	str	r0, [r7, #12]
    4f24:	460b      	mov	r3, r1
    4f26:	607a      	str	r2, [r7, #4]
    4f28:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4f2a:	7afb      	ldrb	r3, [r7, #11]
    4f2c:	68fa      	ldr	r2, [r7, #12]
    4f2e:	3304      	adds	r3, #4
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	4413      	add	r3, r2
    4f34:	687a      	ldr	r2, [r7, #4]
    4f36:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f38:	bf00      	nop
    4f3a:	3714      	adds	r7, #20
    4f3c:	46bd      	mov	sp, r7
    4f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f42:	4770      	bx	lr

00004f44 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4f44:	b480      	push	{r7}
    4f46:	b083      	sub	sp, #12
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
    4f4c:	460b      	mov	r3, r1
    4f4e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	78fa      	ldrb	r2, [r7, #3]
    4f54:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4f56:	bf00      	nop
    4f58:	370c      	adds	r7, #12
    4f5a:	46bd      	mov	sp, r7
    4f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f60:	4770      	bx	lr

00004f62 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4f62:	b480      	push	{r7}
    4f64:	b085      	sub	sp, #20
    4f66:	af00      	add	r7, sp, #0
    4f68:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4f6a:	687b      	ldr	r3, [r7, #4]
    4f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
    4f70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4f72:	7bfb      	ldrb	r3, [r7, #15]
    4f74:	f003 0301 	and.w	r3, r3, #1
    4f78:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4f7a:	7bfb      	ldrb	r3, [r7, #15]
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	bf14      	ite	ne
    4f80:	2301      	movne	r3, #1
    4f82:	2300      	moveq	r3, #0
    4f84:	b2db      	uxtb	r3, r3
}
    4f86:	4618      	mov	r0, r3
    4f88:	3714      	adds	r7, #20
    4f8a:	46bd      	mov	sp, r7
    4f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f90:	4770      	bx	lr

00004f92 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4f92:	b480      	push	{r7}
    4f94:	b083      	sub	sp, #12
    4f96:	af00      	add	r7, sp, #0
    4f98:	6078      	str	r0, [r7, #4]
    4f9a:	460b      	mov	r3, r1
    4f9c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	78fa      	ldrb	r2, [r7, #3]
    4fa2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fa6:	bf00      	nop
    4fa8:	370c      	adds	r7, #12
    4faa:	46bd      	mov	sp, r7
    4fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb0:	4770      	bx	lr

00004fb2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4fb2:	b480      	push	{r7}
    4fb4:	b083      	sub	sp, #12
    4fb6:	af00      	add	r7, sp, #0
    4fb8:	6078      	str	r0, [r7, #4]
    4fba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	683a      	ldr	r2, [r7, #0]
    4fc0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4fc2:	bf00      	nop
    4fc4:	370c      	adds	r7, #12
    4fc6:	46bd      	mov	sp, r7
    4fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fcc:	4770      	bx	lr

00004fce <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4fce:	b480      	push	{r7}
    4fd0:	b083      	sub	sp, #12
    4fd2:	af00      	add	r7, sp, #0
    4fd4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4fd6:	687b      	ldr	r3, [r7, #4]
    4fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4fda:	4618      	mov	r0, r3
    4fdc:	370c      	adds	r7, #12
    4fde:	46bd      	mov	sp, r7
    4fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fe4:	4770      	bx	lr

00004fe6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4fe6:	b480      	push	{r7}
    4fe8:	b083      	sub	sp, #12
    4fea:	af00      	add	r7, sp, #0
    4fec:	6078      	str	r0, [r7, #4]
    4fee:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	683a      	ldr	r2, [r7, #0]
    4ff4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4ff6:	bf00      	nop
    4ff8:	370c      	adds	r7, #12
    4ffa:	46bd      	mov	sp, r7
    4ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5000:	4770      	bx	lr

00005002 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5002:	b480      	push	{r7}
    5004:	b085      	sub	sp, #20
    5006:	af00      	add	r7, sp, #0
    5008:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5010:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5012:	7bfb      	ldrb	r3, [r7, #15]
    5014:	085b      	lsrs	r3, r3, #1
    5016:	b2db      	uxtb	r3, r3
    5018:	f003 0301 	and.w	r3, r3, #1
    501c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    501e:	7bfb      	ldrb	r3, [r7, #15]
    5020:	2b00      	cmp	r3, #0
    5022:	bf14      	ite	ne
    5024:	2301      	movne	r3, #1
    5026:	2300      	moveq	r3, #0
    5028:	b2db      	uxtb	r3, r3
}
    502a:	4618      	mov	r0, r3
    502c:	3714      	adds	r7, #20
    502e:	46bd      	mov	sp, r7
    5030:	f85d 7b04 	ldr.w	r7, [sp], #4
    5034:	4770      	bx	lr

00005036 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5036:	b480      	push	{r7}
    5038:	b085      	sub	sp, #20
    503a:	af00      	add	r7, sp, #0
    503c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5044:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5046:	7bfb      	ldrb	r3, [r7, #15]
    5048:	089b      	lsrs	r3, r3, #2
    504a:	b2db      	uxtb	r3, r3
    504c:	f003 0301 	and.w	r3, r3, #1
    5050:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5052:	7bfb      	ldrb	r3, [r7, #15]
    5054:	2b00      	cmp	r3, #0
    5056:	bf14      	ite	ne
    5058:	2301      	movne	r3, #1
    505a:	2300      	moveq	r3, #0
    505c:	b2db      	uxtb	r3, r3
}
    505e:	4618      	mov	r0, r3
    5060:	3714      	adds	r7, #20
    5062:	46bd      	mov	sp, r7
    5064:	f85d 7b04 	ldr.w	r7, [sp], #4
    5068:	4770      	bx	lr

0000506a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    506a:	b480      	push	{r7}
    506c:	b085      	sub	sp, #20
    506e:	af00      	add	r7, sp, #0
    5070:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5078:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    507a:	7bfb      	ldrb	r3, [r7, #15]
    507c:	08db      	lsrs	r3, r3, #3
    507e:	b2db      	uxtb	r3, r3
    5080:	f003 0301 	and.w	r3, r3, #1
    5084:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5086:	7bfb      	ldrb	r3, [r7, #15]
    5088:	2b00      	cmp	r3, #0
    508a:	bf14      	ite	ne
    508c:	2301      	movne	r3, #1
    508e:	2300      	moveq	r3, #0
    5090:	b2db      	uxtb	r3, r3
}
    5092:	4618      	mov	r0, r3
    5094:	3714      	adds	r7, #20
    5096:	46bd      	mov	sp, r7
    5098:	f85d 7b04 	ldr.w	r7, [sp], #4
    509c:	4770      	bx	lr

0000509e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    509e:	b480      	push	{r7}
    50a0:	b085      	sub	sp, #20
    50a2:	af00      	add	r7, sp, #0
    50a4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    50a6:	687b      	ldr	r3, [r7, #4]
    50a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    50ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    50ae:	7bfb      	ldrb	r3, [r7, #15]
    50b0:	091b      	lsrs	r3, r3, #4
    50b2:	b2db      	uxtb	r3, r3
    50b4:	f003 0301 	and.w	r3, r3, #1
    50b8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    50ba:	7bfb      	ldrb	r3, [r7, #15]
    50bc:	2b00      	cmp	r3, #0
    50be:	bf14      	ite	ne
    50c0:	2301      	movne	r3, #1
    50c2:	2300      	moveq	r3, #0
    50c4:	b2db      	uxtb	r3, r3
}
    50c6:	4618      	mov	r0, r3
    50c8:	3714      	adds	r7, #20
    50ca:	46bd      	mov	sp, r7
    50cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d0:	4770      	bx	lr
	...

000050d4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    50d4:	b580      	push	{r7, lr}
    50d6:	b082      	sub	sp, #8
    50d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    50da:	4b0a      	ldr	r3, [pc, #40]	; (5104 <_oscctrl_init_sources+0x30>)
    50dc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    50de:	4a0a      	ldr	r2, [pc, #40]	; (5108 <_oscctrl_init_sources+0x34>)
    50e0:	2101      	movs	r1, #1
    50e2:	6878      	ldr	r0, [r7, #4]
    50e4:	4b09      	ldr	r3, [pc, #36]	; (510c <_oscctrl_init_sources+0x38>)
    50e6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    50e8:	bf00      	nop
    50ea:	6878      	ldr	r0, [r7, #4]
    50ec:	4b08      	ldr	r3, [pc, #32]	; (5110 <_oscctrl_init_sources+0x3c>)
    50ee:	4798      	blx	r3
    50f0:	4603      	mov	r3, r0
    50f2:	f083 0301 	eor.w	r3, r3, #1
    50f6:	b2db      	uxtb	r3, r3
    50f8:	2b00      	cmp	r3, #0
    50fa:	d1f6      	bne.n	50ea <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    50fc:	bf00      	nop
    50fe:	3708      	adds	r7, #8
    5100:	46bd      	mov	sp, r7
    5102:	bd80      	pop	{r7, pc}
    5104:	40001000 	.word	0x40001000
    5108:	03002646 	.word	0x03002646
    510c:	00004f1d 	.word	0x00004f1d
    5110:	00004ea7 	.word	0x00004ea7

00005114 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5114:	b580      	push	{r7, lr}
    5116:	b084      	sub	sp, #16
    5118:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    511a:	4b6b      	ldr	r3, [pc, #428]	; (52c8 <_oscctrl_init_referenced_generators+0x1b4>)
    511c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    511e:	2204      	movs	r2, #4
    5120:	2100      	movs	r1, #0
    5122:	486a      	ldr	r0, [pc, #424]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    5124:	4b6a      	ldr	r3, [pc, #424]	; (52d0 <_oscctrl_init_referenced_generators+0x1bc>)
    5126:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5128:	bf00      	nop
    512a:	4868      	ldr	r0, [pc, #416]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    512c:	4b69      	ldr	r3, [pc, #420]	; (52d4 <_oscctrl_init_referenced_generators+0x1c0>)
    512e:	4798      	blx	r3
    5130:	4603      	mov	r3, r0
    5132:	2b00      	cmp	r3, #0
    5134:	d1f9      	bne.n	512a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5136:	2100      	movs	r1, #0
    5138:	68f8      	ldr	r0, [r7, #12]
    513a:	4b67      	ldr	r3, [pc, #412]	; (52d8 <_oscctrl_init_referenced_generators+0x1c4>)
    513c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    513e:	4967      	ldr	r1, [pc, #412]	; (52dc <_oscctrl_init_referenced_generators+0x1c8>)
    5140:	68f8      	ldr	r0, [r7, #12]
    5142:	4b67      	ldr	r3, [pc, #412]	; (52e0 <_oscctrl_init_referenced_generators+0x1cc>)
    5144:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5146:	bf00      	nop
    5148:	68f8      	ldr	r0, [r7, #12]
    514a:	4b66      	ldr	r3, [pc, #408]	; (52e4 <_oscctrl_init_referenced_generators+0x1d0>)
    514c:	4798      	blx	r3
    514e:	4603      	mov	r3, r0
    5150:	2b00      	cmp	r3, #0
    5152:	d1f9      	bne.n	5148 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5154:	2100      	movs	r1, #0
    5156:	68f8      	ldr	r0, [r7, #12]
    5158:	4b63      	ldr	r3, [pc, #396]	; (52e8 <_oscctrl_init_referenced_generators+0x1d4>)
    515a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    515c:	bf00      	nop
    515e:	68f8      	ldr	r0, [r7, #12]
    5160:	4b62      	ldr	r3, [pc, #392]	; (52ec <_oscctrl_init_referenced_generators+0x1d8>)
    5162:	4798      	blx	r3
    5164:	4603      	mov	r3, r0
    5166:	2b00      	cmp	r3, #0
    5168:	d1f9      	bne.n	515e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    516a:	2302      	movs	r3, #2
    516c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    516e:	7afb      	ldrb	r3, [r7, #11]
    5170:	4619      	mov	r1, r3
    5172:	68f8      	ldr	r0, [r7, #12]
    5174:	4b58      	ldr	r3, [pc, #352]	; (52d8 <_oscctrl_init_referenced_generators+0x1c4>)
    5176:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5178:	bf00      	nop
    517a:	68f8      	ldr	r0, [r7, #12]
    517c:	4b5c      	ldr	r3, [pc, #368]	; (52f0 <_oscctrl_init_referenced_generators+0x1dc>)
    517e:	4798      	blx	r3
    5180:	4603      	mov	r3, r0
    5182:	2b00      	cmp	r3, #0
    5184:	d1f9      	bne.n	517a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5186:	68f8      	ldr	r0, [r7, #12]
    5188:	4b5a      	ldr	r3, [pc, #360]	; (52f4 <_oscctrl_init_referenced_generators+0x1e0>)
    518a:	4798      	blx	r3
    518c:	4603      	mov	r3, r0
    518e:	4619      	mov	r1, r3
    5190:	68f8      	ldr	r0, [r7, #12]
    5192:	4b59      	ldr	r3, [pc, #356]	; (52f8 <_oscctrl_init_referenced_generators+0x1e4>)
    5194:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5196:	bf00      	nop
    5198:	68f8      	ldr	r0, [r7, #12]
    519a:	4b58      	ldr	r3, [pc, #352]	; (52fc <_oscctrl_init_referenced_generators+0x1e8>)
    519c:	4798      	blx	r3
    519e:	4603      	mov	r3, r0
    51a0:	2b00      	cmp	r3, #0
    51a2:	d1f9      	bne.n	5198 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    51a4:	2319      	movs	r3, #25
    51a6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    51a8:	7afb      	ldrb	r3, [r7, #11]
    51aa:	4619      	mov	r1, r3
    51ac:	68f8      	ldr	r0, [r7, #12]
    51ae:	4b4e      	ldr	r3, [pc, #312]	; (52e8 <_oscctrl_init_referenced_generators+0x1d4>)
    51b0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    51b2:	bf00      	nop
    51b4:	68f8      	ldr	r0, [r7, #12]
    51b6:	4b4d      	ldr	r3, [pc, #308]	; (52ec <_oscctrl_init_referenced_generators+0x1d8>)
    51b8:	4798      	blx	r3
    51ba:	4603      	mov	r3, r0
    51bc:	2b00      	cmp	r3, #0
    51be:	d1f9      	bne.n	51b4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    51c0:	2245      	movs	r2, #69	; 0x45
    51c2:	2101      	movs	r1, #1
    51c4:	4841      	ldr	r0, [pc, #260]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    51c6:	4b4e      	ldr	r3, [pc, #312]	; (5300 <_oscctrl_init_referenced_generators+0x1ec>)
    51c8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    51ca:	223b      	movs	r2, #59	; 0x3b
    51cc:	2100      	movs	r1, #0
    51ce:	68f8      	ldr	r0, [r7, #12]
    51d0:	4b4c      	ldr	r3, [pc, #304]	; (5304 <_oscctrl_init_referenced_generators+0x1f0>)
    51d2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    51d4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    51d8:	2100      	movs	r1, #0
    51da:	68f8      	ldr	r0, [r7, #12]
    51dc:	4b4a      	ldr	r3, [pc, #296]	; (5308 <_oscctrl_init_referenced_generators+0x1f4>)
    51de:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    51e0:	2242      	movs	r2, #66	; 0x42
    51e2:	2100      	movs	r1, #0
    51e4:	68f8      	ldr	r0, [r7, #12]
    51e6:	4b49      	ldr	r3, [pc, #292]	; (530c <_oscctrl_init_referenced_generators+0x1f8>)
    51e8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    51ea:	4a49      	ldr	r2, [pc, #292]	; (5310 <_oscctrl_init_referenced_generators+0x1fc>)
    51ec:	2101      	movs	r1, #1
    51ee:	68f8      	ldr	r0, [r7, #12]
    51f0:	4b44      	ldr	r3, [pc, #272]	; (5304 <_oscctrl_init_referenced_generators+0x1f0>)
    51f2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    51f4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    51f8:	2101      	movs	r1, #1
    51fa:	68f8      	ldr	r0, [r7, #12]
    51fc:	4b42      	ldr	r3, [pc, #264]	; (5308 <_oscctrl_init_referenced_generators+0x1f4>)
    51fe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5200:	2202      	movs	r2, #2
    5202:	2101      	movs	r1, #1
    5204:	68f8      	ldr	r0, [r7, #12]
    5206:	4b41      	ldr	r3, [pc, #260]	; (530c <_oscctrl_init_referenced_generators+0x1f8>)
    5208:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    520a:	68f8      	ldr	r0, [r7, #12]
    520c:	4b41      	ldr	r3, [pc, #260]	; (5314 <_oscctrl_init_referenced_generators+0x200>)
    520e:	4798      	blx	r3
    5210:	4603      	mov	r3, r0
    5212:	2b00      	cmp	r3, #0
    5214:	d00c      	beq.n	5230 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5216:	f44f 6310 	mov.w	r3, #2304	; 0x900
    521a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    521c:	bf00      	nop
    521e:	6879      	ldr	r1, [r7, #4]
    5220:	68f8      	ldr	r0, [r7, #12]
    5222:	4b3d      	ldr	r3, [pc, #244]	; (5318 <_oscctrl_init_referenced_generators+0x204>)
    5224:	4798      	blx	r3
    5226:	4602      	mov	r2, r0
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	429a      	cmp	r2, r3
    522c:	d1f7      	bne.n	521e <_oscctrl_init_referenced_generators+0x10a>
    522e:	e009      	b.n	5244 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5230:	bf00      	nop
    5232:	68f8      	ldr	r0, [r7, #12]
    5234:	4b39      	ldr	r3, [pc, #228]	; (531c <_oscctrl_init_referenced_generators+0x208>)
    5236:	4798      	blx	r3
    5238:	4603      	mov	r3, r0
    523a:	f083 0301 	eor.w	r3, r3, #1
    523e:	b2db      	uxtb	r3, r3
    5240:	2b00      	cmp	r3, #0
    5242:	d1f6      	bne.n	5232 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5244:	bf00      	nop
    5246:	2100      	movs	r1, #0
    5248:	68f8      	ldr	r0, [r7, #12]
    524a:	4b35      	ldr	r3, [pc, #212]	; (5320 <_oscctrl_init_referenced_generators+0x20c>)
    524c:	4798      	blx	r3
    524e:	4603      	mov	r3, r0
    5250:	f083 0301 	eor.w	r3, r3, #1
    5254:	b2db      	uxtb	r3, r3
    5256:	2b00      	cmp	r3, #0
    5258:	d009      	beq.n	526e <_oscctrl_init_referenced_generators+0x15a>
    525a:	2100      	movs	r1, #0
    525c:	68f8      	ldr	r0, [r7, #12]
    525e:	4b31      	ldr	r3, [pc, #196]	; (5324 <_oscctrl_init_referenced_generators+0x210>)
    5260:	4798      	blx	r3
    5262:	4603      	mov	r3, r0
    5264:	f083 0301 	eor.w	r3, r3, #1
    5268:	b2db      	uxtb	r3, r3
    526a:	2b00      	cmp	r3, #0
    526c:	d1eb      	bne.n	5246 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    526e:	bf00      	nop
    5270:	2101      	movs	r1, #1
    5272:	68f8      	ldr	r0, [r7, #12]
    5274:	4b2a      	ldr	r3, [pc, #168]	; (5320 <_oscctrl_init_referenced_generators+0x20c>)
    5276:	4798      	blx	r3
    5278:	4603      	mov	r3, r0
    527a:	f083 0301 	eor.w	r3, r3, #1
    527e:	b2db      	uxtb	r3, r3
    5280:	2b00      	cmp	r3, #0
    5282:	d009      	beq.n	5298 <_oscctrl_init_referenced_generators+0x184>
    5284:	2101      	movs	r1, #1
    5286:	68f8      	ldr	r0, [r7, #12]
    5288:	4b26      	ldr	r3, [pc, #152]	; (5324 <_oscctrl_init_referenced_generators+0x210>)
    528a:	4798      	blx	r3
    528c:	4603      	mov	r3, r0
    528e:	f083 0301 	eor.w	r3, r3, #1
    5292:	b2db      	uxtb	r3, r3
    5294:	2b00      	cmp	r3, #0
    5296:	d1eb      	bne.n	5270 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5298:	bf00      	nop
    529a:	480c      	ldr	r0, [pc, #48]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    529c:	4b22      	ldr	r3, [pc, #136]	; (5328 <_oscctrl_init_referenced_generators+0x214>)
    529e:	4798      	blx	r3
    52a0:	4603      	mov	r3, r0
    52a2:	2b00      	cmp	r3, #0
    52a4:	d1f9      	bne.n	529a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    52a6:	2207      	movs	r2, #7
    52a8:	2100      	movs	r1, #0
    52aa:	4808      	ldr	r0, [pc, #32]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    52ac:	4b08      	ldr	r3, [pc, #32]	; (52d0 <_oscctrl_init_referenced_generators+0x1bc>)
    52ae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    52b0:	bf00      	nop
    52b2:	4806      	ldr	r0, [pc, #24]	; (52cc <_oscctrl_init_referenced_generators+0x1b8>)
    52b4:	4b07      	ldr	r3, [pc, #28]	; (52d4 <_oscctrl_init_referenced_generators+0x1c0>)
    52b6:	4798      	blx	r3
    52b8:	4603      	mov	r3, r0
    52ba:	2b00      	cmp	r3, #0
    52bc:	d1f9      	bne.n	52b2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    52be:	bf00      	nop
    52c0:	3710      	adds	r7, #16
    52c2:	46bd      	mov	sp, r7
    52c4:	bd80      	pop	{r7, pc}
    52c6:	bf00      	nop
    52c8:	40001000 	.word	0x40001000
    52cc:	40001c00 	.word	0x40001c00
    52d0:	00004ce1 	.word	0x00004ce1
    52d4:	00004ca1 	.word	0x00004ca1
    52d8:	00004f45 	.word	0x00004f45
    52dc:	0401bb80 	.word	0x0401bb80
    52e0:	00004fe7 	.word	0x00004fe7
    52e4:	0000509f 	.word	0x0000509f
    52e8:	00004f93 	.word	0x00004f93
    52ec:	00005037 	.word	0x00005037
    52f0:	00005003 	.word	0x00005003
    52f4:	00004fcf 	.word	0x00004fcf
    52f8:	00004fb3 	.word	0x00004fb3
    52fc:	0000506b 	.word	0x0000506b
    5300:	00004d31 	.word	0x00004d31
    5304:	00004e3d 	.word	0x00004e3d
    5308:	00004e79 	.word	0x00004e79
    530c:	00004e01 	.word	0x00004e01
    5310:	000407a0 	.word	0x000407a0
    5314:	00004f63 	.word	0x00004f63
    5318:	00004ef7 	.word	0x00004ef7
    531c:	00004ecf 	.word	0x00004ecf
    5320:	00004d8d 	.word	0x00004d8d
    5324:	00004dc5 	.word	0x00004dc5
    5328:	00004cc9 	.word	0x00004cc9

0000532c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    532c:	b480      	push	{r7}
    532e:	b083      	sub	sp, #12
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	69db      	ldr	r3, [r3, #28]
    5338:	0a9b      	lsrs	r3, r3, #10
    533a:	f003 0301 	and.w	r3, r3, #1
    533e:	2b00      	cmp	r3, #0
    5340:	bf14      	ite	ne
    5342:	2301      	movne	r3, #1
    5344:	2300      	moveq	r3, #0
    5346:	b2db      	uxtb	r3, r3
}
    5348:	4618      	mov	r0, r3
    534a:	370c      	adds	r7, #12
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5354:	b480      	push	{r7}
    5356:	b083      	sub	sp, #12
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5362:	61da      	str	r2, [r3, #28]
}
    5364:	bf00      	nop
    5366:	370c      	adds	r7, #12
    5368:	46bd      	mov	sp, r7
    536a:	f85d 7b04 	ldr.w	r7, [sp], #4
    536e:	4770      	bx	lr

00005370 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5370:	b480      	push	{r7}
    5372:	b083      	sub	sp, #12
    5374:	af00      	add	r7, sp, #0
    5376:	6078      	str	r0, [r7, #4]
    5378:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	683a      	ldr	r2, [r7, #0]
    537e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5380:	bf00      	nop
    5382:	370c      	adds	r7, #12
    5384:	46bd      	mov	sp, r7
    5386:	f85d 7b04 	ldr.w	r7, [sp], #4
    538a:	4770      	bx	lr

0000538c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    538c:	b480      	push	{r7}
    538e:	b083      	sub	sp, #12
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
    5394:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	683a      	ldr	r2, [r7, #0]
    539a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    539c:	bf00      	nop
    539e:	370c      	adds	r7, #12
    53a0:	46bd      	mov	sp, r7
    53a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a6:	4770      	bx	lr

000053a8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    53a8:	b480      	push	{r7}
    53aa:	b083      	sub	sp, #12
    53ac:	af00      	add	r7, sp, #0
    53ae:	6078      	str	r0, [r7, #4]
    53b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    53b2:	687b      	ldr	r3, [r7, #4]
    53b4:	683a      	ldr	r2, [r7, #0]
    53b6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53b8:	bf00      	nop
    53ba:	370c      	adds	r7, #12
    53bc:	46bd      	mov	sp, r7
    53be:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c2:	4770      	bx	lr

000053c4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    53c4:	b480      	push	{r7}
    53c6:	b083      	sub	sp, #12
    53c8:	af00      	add	r7, sp, #0
    53ca:	6078      	str	r0, [r7, #4]
    53cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	683a      	ldr	r2, [r7, #0]
    53d2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    53d4:	bf00      	nop
    53d6:	370c      	adds	r7, #12
    53d8:	46bd      	mov	sp, r7
    53da:	f85d 7b04 	ldr.w	r7, [sp], #4
    53de:	4770      	bx	lr

000053e0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    53e0:	b480      	push	{r7}
    53e2:	b085      	sub	sp, #20
    53e4:	af00      	add	r7, sp, #0
    53e6:	6078      	str	r0, [r7, #4]
    53e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    53ea:	687b      	ldr	r3, [r7, #4]
    53ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    53ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    53f0:	68fb      	ldr	r3, [r7, #12]
    53f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    53f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    53f8:	683b      	ldr	r3, [r7, #0]
    53fa:	b2db      	uxtb	r3, r3
    53fc:	68fa      	ldr	r2, [r7, #12]
    53fe:	4313      	orrs	r3, r2
    5400:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	68fa      	ldr	r2, [r7, #12]
    5406:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5408:	bf00      	nop
    540a:	3714      	adds	r7, #20
    540c:	46bd      	mov	sp, r7
    540e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5412:	4770      	bx	lr

00005414 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5414:	b480      	push	{r7}
    5416:	b085      	sub	sp, #20
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5422:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5424:	68fb      	ldr	r3, [r7, #12]
    5426:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    542a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	041b      	lsls	r3, r3, #16
    5430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5434:	68fa      	ldr	r2, [r7, #12]
    5436:	4313      	orrs	r3, r2
    5438:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	68fa      	ldr	r2, [r7, #12]
    543e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5440:	bf00      	nop
    5442:	3714      	adds	r7, #20
    5444:	46bd      	mov	sp, r7
    5446:	f85d 7b04 	ldr.w	r7, [sp], #4
    544a:	4770      	bx	lr

0000544c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    544c:	b480      	push	{r7}
    544e:	b083      	sub	sp, #12
    5450:	af00      	add	r7, sp, #0
    5452:	6078      	str	r0, [r7, #4]
    5454:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	683a      	ldr	r2, [r7, #0]
    545a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    545c:	bf00      	nop
    545e:	370c      	adds	r7, #12
    5460:	46bd      	mov	sp, r7
    5462:	f85d 7b04 	ldr.w	r7, [sp], #4
    5466:	4770      	bx	lr

00005468 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5468:	b480      	push	{r7}
    546a:	b083      	sub	sp, #12
    546c:	af00      	add	r7, sp, #0
    546e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5474:	4618      	mov	r0, r3
    5476:	370c      	adds	r7, #12
    5478:	46bd      	mov	sp, r7
    547a:	f85d 7b04 	ldr.w	r7, [sp], #4
    547e:	4770      	bx	lr

00005480 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5480:	b480      	push	{r7}
    5482:	b085      	sub	sp, #20
    5484:	af00      	add	r7, sp, #0
    5486:	60f8      	str	r0, [r7, #12]
    5488:	60b9      	str	r1, [r7, #8]
    548a:	607a      	str	r2, [r7, #4]
	while (count--) {
    548c:	e007      	b.n	549e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    548e:	68fb      	ldr	r3, [r7, #12]
    5490:	1c5a      	adds	r2, r3, #1
    5492:	60fa      	str	r2, [r7, #12]
    5494:	68ba      	ldr	r2, [r7, #8]
    5496:	1c51      	adds	r1, r2, #1
    5498:	60b9      	str	r1, [r7, #8]
    549a:	7812      	ldrb	r2, [r2, #0]
    549c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	1e5a      	subs	r2, r3, #1
    54a2:	607a      	str	r2, [r7, #4]
    54a4:	2b00      	cmp	r3, #0
    54a6:	d1f2      	bne.n	548e <_qspi_memcpy+0xe>
	}
}
    54a8:	bf00      	nop
    54aa:	3714      	adds	r7, #20
    54ac:	46bd      	mov	sp, r7
    54ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b2:	4770      	bx	lr

000054b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    54b4:	b580      	push	{r7, lr}
    54b6:	b082      	sub	sp, #8
    54b8:	af00      	add	r7, sp, #0
    54ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    54bc:	4903      	ldr	r1, [pc, #12]	; (54cc <_qspi_end_transfer+0x18>)
    54be:	6878      	ldr	r0, [r7, #4]
    54c0:	4b03      	ldr	r3, [pc, #12]	; (54d0 <_qspi_end_transfer+0x1c>)
    54c2:	4798      	blx	r3
}
    54c4:	bf00      	nop
    54c6:	3708      	adds	r7, #8
    54c8:	46bd      	mov	sp, r7
    54ca:	bd80      	pop	{r7, pc}
    54cc:	01000002 	.word	0x01000002
    54d0:	00005371 	.word	0x00005371

000054d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    54d4:	b580      	push	{r7, lr}
    54d6:	b082      	sub	sp, #8
    54d8:	af00      	add	r7, sp, #0
    54da:	6078      	str	r0, [r7, #4]
    54dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d004      	beq.n	54ee <_qspi_sync_init+0x1a>
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d001      	beq.n	54ee <_qspi_sync_init+0x1a>
    54ea:	2301      	movs	r3, #1
    54ec:	e000      	b.n	54f0 <_qspi_sync_init+0x1c>
    54ee:	2300      	movs	r3, #0
    54f0:	f003 0301 	and.w	r3, r3, #1
    54f4:	b2db      	uxtb	r3, r3
    54f6:	2240      	movs	r2, #64	; 0x40
    54f8:	490c      	ldr	r1, [pc, #48]	; (552c <_qspi_sync_init+0x58>)
    54fa:	4618      	mov	r0, r3
    54fc:	4b0c      	ldr	r3, [pc, #48]	; (5530 <_qspi_sync_init+0x5c>)
    54fe:	4798      	blx	r3
	dev->prvt = hw;
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	683a      	ldr	r2, [r7, #0]
    5504:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5506:	687b      	ldr	r3, [r7, #4]
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	2101      	movs	r1, #1
    550c:	4618      	mov	r0, r3
    550e:	4b09      	ldr	r3, [pc, #36]	; (5534 <_qspi_sync_init+0x60>)
    5510:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5512:	4909      	ldr	r1, [pc, #36]	; (5538 <_qspi_sync_init+0x64>)
    5514:	6838      	ldr	r0, [r7, #0]
    5516:	4b09      	ldr	r3, [pc, #36]	; (553c <_qspi_sync_init+0x68>)
    5518:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    551a:	4909      	ldr	r1, [pc, #36]	; (5540 <_qspi_sync_init+0x6c>)
    551c:	6838      	ldr	r0, [r7, #0]
    551e:	4b09      	ldr	r3, [pc, #36]	; (5544 <_qspi_sync_init+0x70>)
    5520:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5522:	2300      	movs	r3, #0
}
    5524:	4618      	mov	r0, r3
    5526:	3708      	adds	r7, #8
    5528:	46bd      	mov	sp, r7
    552a:	bd80      	pop	{r7, pc}
    552c:	0000f128 	.word	0x0000f128
    5530:	00003511 	.word	0x00003511
    5534:	00005371 	.word	0x00005371
    5538:	06000011 	.word	0x06000011
    553c:	0000538d 	.word	0x0000538d
    5540:	00241300 	.word	0x00241300
    5544:	000053a9 	.word	0x000053a9

00005548 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5548:	b580      	push	{r7, lr}
    554a:	b082      	sub	sp, #8
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	2102      	movs	r1, #2
    5556:	4618      	mov	r0, r3
    5558:	4b03      	ldr	r3, [pc, #12]	; (5568 <_qspi_sync_enable+0x20>)
    555a:	4798      	blx	r3
	return ERR_NONE;
    555c:	2300      	movs	r3, #0
}
    555e:	4618      	mov	r0, r3
    5560:	3708      	adds	r7, #8
    5562:	46bd      	mov	sp, r7
    5564:	bd80      	pop	{r7, pc}
    5566:	bf00      	nop
    5568:	00005371 	.word	0x00005371

0000556c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    556c:	b580      	push	{r7, lr}
    556e:	b082      	sub	sp, #8
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	2100      	movs	r1, #0
    557a:	4618      	mov	r0, r3
    557c:	4b03      	ldr	r3, [pc, #12]	; (558c <_qspi_sync_disable+0x20>)
    557e:	4798      	blx	r3
	return ERR_NONE;
    5580:	2300      	movs	r3, #0
}
    5582:	4618      	mov	r0, r3
    5584:	3708      	adds	r7, #8
    5586:	46bd      	mov	sp, r7
    5588:	bd80      	pop	{r7, pc}
    558a:	bf00      	nop
    558c:	00005371 	.word	0x00005371

00005590 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5590:	b580      	push	{r7, lr}
    5592:	b084      	sub	sp, #16
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    55a0:	683b      	ldr	r3, [r7, #0]
    55a2:	781b      	ldrb	r3, [r3, #0]
    55a4:	f003 0320 	and.w	r3, r3, #32
    55a8:	b2db      	uxtb	r3, r3
    55aa:	2b00      	cmp	r3, #0
    55ac:	d005      	beq.n	55ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    55ae:	683b      	ldr	r3, [r7, #0]
    55b0:	689b      	ldr	r3, [r3, #8]
    55b2:	4619      	mov	r1, r3
    55b4:	68f8      	ldr	r0, [r7, #12]
    55b6:	4b13      	ldr	r3, [pc, #76]	; (5604 <_qspi_sync_command_set_ifr+0x74>)
    55b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	f003 0310 	and.w	r3, r3, #16
    55c2:	b2db      	uxtb	r3, r3
    55c4:	2b00      	cmp	r3, #0
    55c6:	d005      	beq.n	55d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    55c8:	683b      	ldr	r3, [r7, #0]
    55ca:	791b      	ldrb	r3, [r3, #4]
    55cc:	4619      	mov	r1, r3
    55ce:	68f8      	ldr	r0, [r7, #12]
    55d0:	4b0d      	ldr	r3, [pc, #52]	; (5608 <_qspi_sync_command_set_ifr+0x78>)
    55d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    55d4:	683b      	ldr	r3, [r7, #0]
    55d6:	781b      	ldrb	r3, [r3, #0]
    55d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55dc:	b2db      	uxtb	r3, r3
    55de:	2b00      	cmp	r3, #0
    55e0:	d005      	beq.n	55ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    55e2:	683b      	ldr	r3, [r7, #0]
    55e4:	795b      	ldrb	r3, [r3, #5]
    55e6:	4619      	mov	r1, r3
    55e8:	68f8      	ldr	r0, [r7, #12]
    55ea:	4b08      	ldr	r3, [pc, #32]	; (560c <_qspi_sync_command_set_ifr+0x7c>)
    55ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    55ee:	683b      	ldr	r3, [r7, #0]
    55f0:	681b      	ldr	r3, [r3, #0]
    55f2:	4619      	mov	r1, r3
    55f4:	68f8      	ldr	r0, [r7, #12]
    55f6:	4b06      	ldr	r3, [pc, #24]	; (5610 <_qspi_sync_command_set_ifr+0x80>)
    55f8:	4798      	blx	r3
}
    55fa:	bf00      	nop
    55fc:	3710      	adds	r7, #16
    55fe:	46bd      	mov	sp, r7
    5600:	bd80      	pop	{r7, pc}
    5602:	bf00      	nop
    5604:	000053c5 	.word	0x000053c5
    5608:	000053e1 	.word	0x000053e1
    560c:	00005415 	.word	0x00005415
    5610:	0000544d 	.word	0x0000544d

00005614 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5614:	b580      	push	{r7, lr}
    5616:	b084      	sub	sp, #16
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
    561c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5628:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    562a:	683b      	ldr	r3, [r7, #0]
    562c:	781b      	ldrb	r3, [r3, #0]
    562e:	f003 0320 	and.w	r3, r3, #32
    5632:	b2db      	uxtb	r3, r3
    5634:	2b00      	cmp	r3, #0
    5636:	d004      	beq.n	5642 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5638:	683b      	ldr	r3, [r7, #0]
    563a:	689b      	ldr	r3, [r3, #8]
    563c:	68fa      	ldr	r2, [r7, #12]
    563e:	4413      	add	r3, r2
    5640:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5642:	68b8      	ldr	r0, [r7, #8]
    5644:	4b18      	ldr	r3, [pc, #96]	; (56a8 <_qspi_sync_run_transfer+0x94>)
    5646:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5648:	683b      	ldr	r3, [r7, #0]
    564a:	691b      	ldr	r3, [r3, #16]
    564c:	2b00      	cmp	r3, #0
    564e:	d103      	bne.n	5658 <_qspi_sync_run_transfer+0x44>
    5650:	683b      	ldr	r3, [r7, #0]
    5652:	695b      	ldr	r3, [r3, #20]
    5654:	2b00      	cmp	r3, #0
    5656:	d001      	beq.n	565c <_qspi_sync_run_transfer+0x48>
    5658:	2301      	movs	r3, #1
    565a:	e000      	b.n	565e <_qspi_sync_run_transfer+0x4a>
    565c:	2300      	movs	r3, #0
    565e:	f003 0301 	and.w	r3, r3, #1
    5662:	b2db      	uxtb	r3, r3
    5664:	2282      	movs	r2, #130	; 0x82
    5666:	4911      	ldr	r1, [pc, #68]	; (56ac <_qspi_sync_run_transfer+0x98>)
    5668:	4618      	mov	r0, r3
    566a:	4b11      	ldr	r3, [pc, #68]	; (56b0 <_qspi_sync_run_transfer+0x9c>)
    566c:	4798      	blx	r3

	if (cmd->tx_buf) {
    566e:	683b      	ldr	r3, [r7, #0]
    5670:	691b      	ldr	r3, [r3, #16]
    5672:	2b00      	cmp	r3, #0
    5674:	d008      	beq.n	5688 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5676:	683b      	ldr	r3, [r7, #0]
    5678:	6919      	ldr	r1, [r3, #16]
    567a:	683b      	ldr	r3, [r7, #0]
    567c:	68db      	ldr	r3, [r3, #12]
    567e:	461a      	mov	r2, r3
    5680:	68f8      	ldr	r0, [r7, #12]
    5682:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <_qspi_sync_run_transfer+0xa0>)
    5684:	4798      	blx	r3
    5686:	e007      	b.n	5698 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5688:	683b      	ldr	r3, [r7, #0]
    568a:	6958      	ldr	r0, [r3, #20]
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	68db      	ldr	r3, [r3, #12]
    5690:	461a      	mov	r2, r3
    5692:	68f9      	ldr	r1, [r7, #12]
    5694:	4b07      	ldr	r3, [pc, #28]	; (56b4 <_qspi_sync_run_transfer+0xa0>)
    5696:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    569c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    56a0:	bf00      	nop
    56a2:	3710      	adds	r7, #16
    56a4:	46bd      	mov	sp, r7
    56a6:	bd80      	pop	{r7, pc}
    56a8:	00005469 	.word	0x00005469
    56ac:	0000f128 	.word	0x0000f128
    56b0:	00003511 	.word	0x00003511
    56b4:	00005481 	.word	0x00005481

000056b8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    56b8:	b580      	push	{r7, lr}
    56ba:	b082      	sub	sp, #8
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
    56c0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    56c2:	6839      	ldr	r1, [r7, #0]
    56c4:	6878      	ldr	r0, [r7, #4]
    56c6:	4b14      	ldr	r3, [pc, #80]	; (5718 <_qspi_sync_serial_run_command+0x60>)
    56c8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    56ca:	683b      	ldr	r3, [r7, #0]
    56cc:	781b      	ldrb	r3, [r3, #0]
    56ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    56d2:	b2db      	uxtb	r3, r3
    56d4:	2b00      	cmp	r3, #0
    56d6:	d003      	beq.n	56e0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    56d8:	6839      	ldr	r1, [r7, #0]
    56da:	6878      	ldr	r0, [r7, #4]
    56dc:	4b0f      	ldr	r3, [pc, #60]	; (571c <_qspi_sync_serial_run_command+0x64>)
    56de:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	4618      	mov	r0, r3
    56e6:	4b0e      	ldr	r3, [pc, #56]	; (5720 <_qspi_sync_serial_run_command+0x68>)
    56e8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    56ea:	bf00      	nop
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	4618      	mov	r0, r3
    56f2:	4b0c      	ldr	r3, [pc, #48]	; (5724 <_qspi_sync_serial_run_command+0x6c>)
    56f4:	4798      	blx	r3
    56f6:	4603      	mov	r3, r0
    56f8:	f083 0301 	eor.w	r3, r3, #1
    56fc:	b2db      	uxtb	r3, r3
    56fe:	2b00      	cmp	r3, #0
    5700:	d1f4      	bne.n	56ec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	681b      	ldr	r3, [r3, #0]
    5706:	4618      	mov	r0, r3
    5708:	4b07      	ldr	r3, [pc, #28]	; (5728 <_qspi_sync_serial_run_command+0x70>)
    570a:	4798      	blx	r3
	return ERR_NONE;
    570c:	2300      	movs	r3, #0
}
    570e:	4618      	mov	r0, r3
    5710:	3708      	adds	r7, #8
    5712:	46bd      	mov	sp, r7
    5714:	bd80      	pop	{r7, pc}
    5716:	bf00      	nop
    5718:	00005591 	.word	0x00005591
    571c:	00005615 	.word	0x00005615
    5720:	000054b5 	.word	0x000054b5
    5724:	0000532d 	.word	0x0000532d
    5728:	00005355 	.word	0x00005355

0000572c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    572c:	b480      	push	{r7}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
    5734:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5736:	bf00      	nop
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	691a      	ldr	r2, [r3, #16]
    573c:	683b      	ldr	r3, [r7, #0]
    573e:	4013      	ands	r3, r2
    5740:	2b00      	cmp	r3, #0
    5742:	d1f9      	bne.n	5738 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5744:	bf00      	nop
    5746:	370c      	adds	r7, #12
    5748:	46bd      	mov	sp, r7
    574a:	f85d 7b04 	ldr.w	r7, [sp], #4
    574e:	4770      	bx	lr

00005750 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5750:	b480      	push	{r7}
    5752:	b083      	sub	sp, #12
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	f44f 7280 	mov.w	r2, #256	; 0x100
    575e:	819a      	strh	r2, [r3, #12]
}
    5760:	bf00      	nop
    5762:	370c      	adds	r7, #12
    5764:	46bd      	mov	sp, r7
    5766:	f85d 7b04 	ldr.w	r7, [sp], #4
    576a:	4770      	bx	lr

0000576c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    576c:	b480      	push	{r7}
    576e:	b083      	sub	sp, #12
    5770:	af00      	add	r7, sp, #0
    5772:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    577a:	819a      	strh	r2, [r3, #12]
}
    577c:	bf00      	nop
    577e:	370c      	adds	r7, #12
    5780:	46bd      	mov	sp, r7
    5782:	f85d 7b04 	ldr.w	r7, [sp], #4
    5786:	4770      	bx	lr

00005788 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5788:	b480      	push	{r7}
    578a:	b083      	sub	sp, #12
    578c:	af00      	add	r7, sp, #0
    578e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5790:	687b      	ldr	r3, [r7, #4]
    5792:	899b      	ldrh	r3, [r3, #12]
    5794:	b29b      	uxth	r3, r3
}
    5796:	4618      	mov	r0, r3
    5798:	370c      	adds	r7, #12
    579a:	46bd      	mov	sp, r7
    579c:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a0:	4770      	bx	lr

000057a2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    57a2:	b480      	push	{r7}
    57a4:	b083      	sub	sp, #12
    57a6:	af00      	add	r7, sp, #0
    57a8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	895b      	ldrh	r3, [r3, #10]
    57ae:	b29b      	uxth	r3, r3
}
    57b0:	4618      	mov	r0, r3
    57b2:	370c      	adds	r7, #12
    57b4:	46bd      	mov	sp, r7
    57b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ba:	4770      	bx	lr

000057bc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    57bc:	b580      	push	{r7, lr}
    57be:	b082      	sub	sp, #8
    57c0:	af00      	add	r7, sp, #0
    57c2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	881b      	ldrh	r3, [r3, #0]
    57c8:	b29b      	uxth	r3, r3
    57ca:	f043 0301 	orr.w	r3, r3, #1
    57ce:	b29a      	uxth	r2, r3
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    57d4:	2101      	movs	r1, #1
    57d6:	6878      	ldr	r0, [r7, #4]
    57d8:	4b02      	ldr	r3, [pc, #8]	; (57e4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    57da:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    57dc:	bf00      	nop
    57de:	3708      	adds	r7, #8
    57e0:	46bd      	mov	sp, r7
    57e2:	bd80      	pop	{r7, pc}
    57e4:	0000572d 	.word	0x0000572d

000057e8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b084      	sub	sp, #16
    57ec:	af00      	add	r7, sp, #0
    57ee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    57f0:	f248 0103 	movw	r1, #32771	; 0x8003
    57f4:	6878      	ldr	r0, [r7, #4]
    57f6:	4b0a      	ldr	r3, [pc, #40]	; (5820 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    57f8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	881b      	ldrh	r3, [r3, #0]
    57fe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5800:	89fb      	ldrh	r3, [r7, #14]
    5802:	085b      	lsrs	r3, r3, #1
    5804:	b29b      	uxth	r3, r3
    5806:	f003 0301 	and.w	r3, r3, #1
    580a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    580c:	89fb      	ldrh	r3, [r7, #14]
    580e:	2b00      	cmp	r3, #0
    5810:	bf14      	ite	ne
    5812:	2301      	movne	r3, #1
    5814:	2300      	moveq	r3, #0
    5816:	b2db      	uxtb	r3, r3
}
    5818:	4618      	mov	r0, r3
    581a:	3710      	adds	r7, #16
    581c:	46bd      	mov	sp, r7
    581e:	bd80      	pop	{r7, pc}
    5820:	0000572d 	.word	0x0000572d

00005824 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5824:	b580      	push	{r7, lr}
    5826:	b082      	sub	sp, #8
    5828:	af00      	add	r7, sp, #0
    582a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    582c:	687b      	ldr	r3, [r7, #4]
    582e:	881b      	ldrh	r3, [r3, #0]
    5830:	b29b      	uxth	r3, r3
    5832:	f023 0302 	bic.w	r3, r3, #2
    5836:	b29a      	uxth	r2, r3
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    583c:	f248 0103 	movw	r1, #32771	; 0x8003
    5840:	6878      	ldr	r0, [r7, #4]
    5842:	4b03      	ldr	r3, [pc, #12]	; (5850 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5844:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5846:	bf00      	nop
    5848:	3708      	adds	r7, #8
    584a:	46bd      	mov	sp, r7
    584c:	bd80      	pop	{r7, pc}
    584e:	bf00      	nop
    5850:	0000572d 	.word	0x0000572d

00005854 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5854:	b580      	push	{r7, lr}
    5856:	b082      	sub	sp, #8
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	460b      	mov	r3, r1
    585e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	887a      	ldrh	r2, [r7, #2]
    5864:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5866:	f248 0103 	movw	r1, #32771	; 0x8003
    586a:	6878      	ldr	r0, [r7, #4]
    586c:	4b02      	ldr	r3, [pc, #8]	; (5878 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    586e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5870:	bf00      	nop
    5872:	3708      	adds	r7, #8
    5874:	46bd      	mov	sp, r7
    5876:	bd80      	pop	{r7, pc}
    5878:	0000572d 	.word	0x0000572d

0000587c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    587c:	b480      	push	{r7}
    587e:	b083      	sub	sp, #12
    5880:	af00      	add	r7, sp, #0
    5882:	6078      	str	r0, [r7, #4]
    5884:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	683a      	ldr	r2, [r7, #0]
    588a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    588c:	bf00      	nop
    588e:	370c      	adds	r7, #12
    5890:	46bd      	mov	sp, r7
    5892:	f85d 7b04 	ldr.w	r7, [sp], #4
    5896:	4770      	bx	lr

00005898 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5898:	b580      	push	{r7, lr}
    589a:	b082      	sub	sp, #8
    589c:	af00      	add	r7, sp, #0
    589e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d005      	beq.n	58b2 <_calendar_init+0x1a>
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	2b00      	cmp	r3, #0
    58ac:	d001      	beq.n	58b2 <_calendar_init+0x1a>
    58ae:	2301      	movs	r3, #1
    58b0:	e000      	b.n	58b4 <_calendar_init+0x1c>
    58b2:	2300      	movs	r3, #0
    58b4:	f003 0301 	and.w	r3, r3, #1
    58b8:	b2db      	uxtb	r3, r3
    58ba:	222f      	movs	r2, #47	; 0x2f
    58bc:	491b      	ldr	r1, [pc, #108]	; (592c <_calendar_init+0x94>)
    58be:	4618      	mov	r0, r3
    58c0:	4b1b      	ldr	r3, [pc, #108]	; (5930 <_calendar_init+0x98>)
    58c2:	4798      	blx	r3

	_rtc_dev = dev;
    58c4:	4a1b      	ldr	r2, [pc, #108]	; (5934 <_calendar_init+0x9c>)
    58c6:	687b      	ldr	r3, [r7, #4]
    58c8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    58ca:	687b      	ldr	r3, [r7, #4]
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	4618      	mov	r0, r3
    58d0:	4b19      	ldr	r3, [pc, #100]	; (5938 <_calendar_init+0xa0>)
    58d2:	4798      	blx	r3
    58d4:	4603      	mov	r3, r0
    58d6:	2b00      	cmp	r3, #0
    58d8:	d00a      	beq.n	58f0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    58da:	687b      	ldr	r3, [r7, #4]
    58dc:	681b      	ldr	r3, [r3, #0]
    58de:	4618      	mov	r0, r3
    58e0:	4b16      	ldr	r3, [pc, #88]	; (593c <_calendar_init+0xa4>)
    58e2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    58e4:	687b      	ldr	r3, [r7, #4]
    58e6:	681b      	ldr	r3, [r3, #0]
    58e8:	2102      	movs	r1, #2
    58ea:	4618      	mov	r0, r3
    58ec:	4b14      	ldr	r3, [pc, #80]	; (5940 <_calendar_init+0xa8>)
    58ee:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	4618      	mov	r0, r3
    58f6:	4b13      	ldr	r3, [pc, #76]	; (5944 <_calendar_init+0xac>)
    58f8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    58fa:	687b      	ldr	r3, [r7, #4]
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	2101      	movs	r1, #1
    5900:	4618      	mov	r0, r3
    5902:	4b0f      	ldr	r3, [pc, #60]	; (5940 <_calendar_init+0xa8>)
    5904:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    590e:	4618      	mov	r0, r3
    5910:	4b0d      	ldr	r3, [pc, #52]	; (5948 <_calendar_init+0xb0>)
    5912:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5918:	2100      	movs	r1, #0
    591a:	4618      	mov	r0, r3
    591c:	4b0b      	ldr	r3, [pc, #44]	; (594c <_calendar_init+0xb4>)
    591e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5920:	2300      	movs	r3, #0
}
    5922:	4618      	mov	r0, r3
    5924:	3708      	adds	r7, #8
    5926:	46bd      	mov	sp, r7
    5928:	bd80      	pop	{r7, pc}
    592a:	bf00      	nop
    592c:	0000f140 	.word	0x0000f140
    5930:	00003511 	.word	0x00003511
    5934:	20000800 	.word	0x20000800
    5938:	000057e9 	.word	0x000057e9
    593c:	00005825 	.word	0x00005825
    5940:	0000572d 	.word	0x0000572d
    5944:	000057bd 	.word	0x000057bd
    5948:	00005855 	.word	0x00005855
    594c:	0000587d 	.word	0x0000587d

00005950 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5950:	b580      	push	{r7, lr}
    5952:	b084      	sub	sp, #16
    5954:	af00      	add	r7, sp, #0
    5956:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	681b      	ldr	r3, [r3, #0]
    595c:	4618      	mov	r0, r3
    595e:	4b19      	ldr	r3, [pc, #100]	; (59c4 <_rtc_interrupt_handler+0x74>)
    5960:	4798      	blx	r3
    5962:	4603      	mov	r3, r0
    5964:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5966:	687b      	ldr	r3, [r7, #4]
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	4618      	mov	r0, r3
    596c:	4b16      	ldr	r3, [pc, #88]	; (59c8 <_rtc_interrupt_handler+0x78>)
    596e:	4798      	blx	r3
    5970:	4603      	mov	r3, r0
    5972:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5974:	89fa      	ldrh	r2, [r7, #14]
    5976:	89bb      	ldrh	r3, [r7, #12]
    5978:	4013      	ands	r3, r2
    597a:	b29b      	uxth	r3, r3
    597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5980:	2b00      	cmp	r3, #0
    5982:	d009      	beq.n	5998 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5984:	687b      	ldr	r3, [r7, #4]
    5986:	685b      	ldr	r3, [r3, #4]
    5988:	6878      	ldr	r0, [r7, #4]
    598a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	4618      	mov	r0, r3
    5992:	4b0e      	ldr	r3, [pc, #56]	; (59cc <_rtc_interrupt_handler+0x7c>)
    5994:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5996:	e010      	b.n	59ba <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5998:	89fa      	ldrh	r2, [r7, #14]
    599a:	89bb      	ldrh	r3, [r7, #12]
    599c:	4013      	ands	r3, r2
    599e:	b29b      	uxth	r3, r3
    59a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    59a4:	2b00      	cmp	r3, #0
    59a6:	d008      	beq.n	59ba <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	689b      	ldr	r3, [r3, #8]
    59ac:	6878      	ldr	r0, [r7, #4]
    59ae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	4618      	mov	r0, r3
    59b6:	4b06      	ldr	r3, [pc, #24]	; (59d0 <_rtc_interrupt_handler+0x80>)
    59b8:	4798      	blx	r3
}
    59ba:	bf00      	nop
    59bc:	3710      	adds	r7, #16
    59be:	46bd      	mov	sp, r7
    59c0:	bd80      	pop	{r7, pc}
    59c2:	bf00      	nop
    59c4:	00005789 	.word	0x00005789
    59c8:	000057a3 	.word	0x000057a3
    59cc:	00005751 	.word	0x00005751
    59d0:	0000576d 	.word	0x0000576d

000059d4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    59d4:	b580      	push	{r7, lr}
    59d6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    59d8:	4b03      	ldr	r3, [pc, #12]	; (59e8 <RTC_Handler+0x14>)
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	4618      	mov	r0, r3
    59de:	4b03      	ldr	r3, [pc, #12]	; (59ec <RTC_Handler+0x18>)
    59e0:	4798      	blx	r3
}
    59e2:	bf00      	nop
    59e4:	bd80      	pop	{r7, pc}
    59e6:	bf00      	nop
    59e8:	20000800 	.word	0x20000800
    59ec:	00005951 	.word	0x00005951

000059f0 <__NVIC_EnableIRQ>:
{
    59f0:	b480      	push	{r7}
    59f2:	b083      	sub	sp, #12
    59f4:	af00      	add	r7, sp, #0
    59f6:	4603      	mov	r3, r0
    59f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    59fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    59fe:	2b00      	cmp	r3, #0
    5a00:	db0b      	blt.n	5a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a02:	4909      	ldr	r1, [pc, #36]	; (5a28 <__NVIC_EnableIRQ+0x38>)
    5a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a08:	095b      	lsrs	r3, r3, #5
    5a0a:	88fa      	ldrh	r2, [r7, #6]
    5a0c:	f002 021f 	and.w	r2, r2, #31
    5a10:	2001      	movs	r0, #1
    5a12:	fa00 f202 	lsl.w	r2, r0, r2
    5a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a1a:	bf00      	nop
    5a1c:	370c      	adds	r7, #12
    5a1e:	46bd      	mov	sp, r7
    5a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a24:	4770      	bx	lr
    5a26:	bf00      	nop
    5a28:	e000e100 	.word	0xe000e100

00005a2c <__NVIC_DisableIRQ>:
{
    5a2c:	b480      	push	{r7}
    5a2e:	b083      	sub	sp, #12
    5a30:	af00      	add	r7, sp, #0
    5a32:	4603      	mov	r3, r0
    5a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	db10      	blt.n	5a60 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a3e:	490b      	ldr	r1, [pc, #44]	; (5a6c <__NVIC_DisableIRQ+0x40>)
    5a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a44:	095b      	lsrs	r3, r3, #5
    5a46:	88fa      	ldrh	r2, [r7, #6]
    5a48:	f002 021f 	and.w	r2, r2, #31
    5a4c:	2001      	movs	r0, #1
    5a4e:	fa00 f202 	lsl.w	r2, r0, r2
    5a52:	3320      	adds	r3, #32
    5a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a5c:	f3bf 8f6f 	isb	sy
}
    5a60:	bf00      	nop
    5a62:	370c      	adds	r7, #12
    5a64:	46bd      	mov	sp, r7
    5a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6a:	4770      	bx	lr
    5a6c:	e000e100 	.word	0xe000e100

00005a70 <__NVIC_ClearPendingIRQ>:
{
    5a70:	b480      	push	{r7}
    5a72:	b083      	sub	sp, #12
    5a74:	af00      	add	r7, sp, #0
    5a76:	4603      	mov	r3, r0
    5a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	db0c      	blt.n	5a9c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a82:	4909      	ldr	r1, [pc, #36]	; (5aa8 <__NVIC_ClearPendingIRQ+0x38>)
    5a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5a88:	095b      	lsrs	r3, r3, #5
    5a8a:	88fa      	ldrh	r2, [r7, #6]
    5a8c:	f002 021f 	and.w	r2, r2, #31
    5a90:	2001      	movs	r0, #1
    5a92:	fa00 f202 	lsl.w	r2, r0, r2
    5a96:	3360      	adds	r3, #96	; 0x60
    5a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5a9c:	bf00      	nop
    5a9e:	370c      	adds	r7, #12
    5aa0:	46bd      	mov	sp, r7
    5aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa6:	4770      	bx	lr
    5aa8:	e000e100 	.word	0xe000e100

00005aac <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5aac:	b480      	push	{r7}
    5aae:	b083      	sub	sp, #12
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
    5ab4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5ab6:	bf00      	nop
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	69da      	ldr	r2, [r3, #28]
    5abc:	683b      	ldr	r3, [r7, #0]
    5abe:	4013      	ands	r3, r2
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d1f9      	bne.n	5ab8 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5ac4:	bf00      	nop
    5ac6:	370c      	adds	r7, #12
    5ac8:	46bd      	mov	sp, r7
    5aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ace:	4770      	bx	lr

00005ad0 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5ad0:	b480      	push	{r7}
    5ad2:	b083      	sub	sp, #12
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	69da      	ldr	r2, [r3, #28]
    5ade:	683b      	ldr	r3, [r7, #0]
    5ae0:	4013      	ands	r3, r2
    5ae2:	2b00      	cmp	r3, #0
    5ae4:	bf14      	ite	ne
    5ae6:	2301      	movne	r3, #1
    5ae8:	2300      	moveq	r3, #0
    5aea:	b2db      	uxtb	r3, r3
}
    5aec:	4618      	mov	r0, r3
    5aee:	370c      	adds	r7, #12
    5af0:	46bd      	mov	sp, r7
    5af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af6:	4770      	bx	lr

00005af8 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5af8:	b480      	push	{r7}
    5afa:	b083      	sub	sp, #12
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
    5b00:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5b02:	bf00      	nop
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	69da      	ldr	r2, [r3, #28]
    5b08:	683b      	ldr	r3, [r7, #0]
    5b0a:	4013      	ands	r3, r2
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d1f9      	bne.n	5b04 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5b10:	bf00      	nop
    5b12:	370c      	adds	r7, #12
    5b14:	46bd      	mov	sp, r7
    5b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b1a:	4770      	bx	lr

00005b1c <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5b1c:	b480      	push	{r7}
    5b1e:	b083      	sub	sp, #12
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
    5b24:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	69da      	ldr	r2, [r3, #28]
    5b2a:	683b      	ldr	r3, [r7, #0]
    5b2c:	4013      	ands	r3, r2
    5b2e:	2b00      	cmp	r3, #0
    5b30:	bf14      	ite	ne
    5b32:	2301      	movne	r3, #1
    5b34:	2300      	moveq	r3, #0
    5b36:	b2db      	uxtb	r3, r3
}
    5b38:	4618      	mov	r0, r3
    5b3a:	370c      	adds	r7, #12
    5b3c:	46bd      	mov	sp, r7
    5b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b42:	4770      	bx	lr

00005b44 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5b44:	b480      	push	{r7}
    5b46:	b083      	sub	sp, #12
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	2201      	movs	r2, #1
    5b50:	761a      	strb	r2, [r3, #24]
}
    5b52:	bf00      	nop
    5b54:	370c      	adds	r7, #12
    5b56:	46bd      	mov	sp, r7
    5b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b5c:	4770      	bx	lr

00005b5e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5b5e:	b480      	push	{r7}
    5b60:	b083      	sub	sp, #12
    5b62:	af00      	add	r7, sp, #0
    5b64:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	2202      	movs	r2, #2
    5b6a:	761a      	strb	r2, [r3, #24]
}
    5b6c:	bf00      	nop
    5b6e:	370c      	adds	r7, #12
    5b70:	46bd      	mov	sp, r7
    5b72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b76:	4770      	bx	lr

00005b78 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5b78:	b480      	push	{r7}
    5b7a:	b083      	sub	sp, #12
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	7e1b      	ldrb	r3, [r3, #24]
    5b84:	b2db      	uxtb	r3, r3
}
    5b86:	4618      	mov	r0, r3
    5b88:	370c      	adds	r7, #12
    5b8a:	46bd      	mov	sp, r7
    5b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b90:	4770      	bx	lr

00005b92 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5b92:	b480      	push	{r7}
    5b94:	b083      	sub	sp, #12
    5b96:	af00      	add	r7, sp, #0
    5b98:	6078      	str	r0, [r7, #4]
    5b9a:	460b      	mov	r3, r1
    5b9c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	78fa      	ldrb	r2, [r7, #3]
    5ba2:	761a      	strb	r2, [r3, #24]
}
    5ba4:	bf00      	nop
    5ba6:	370c      	adds	r7, #12
    5ba8:	46bd      	mov	sp, r7
    5baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bae:	4770      	bx	lr

00005bb0 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5bb0:	b480      	push	{r7}
    5bb2:	b085      	sub	sp, #20
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	6078      	str	r0, [r7, #4]
    5bb8:	460b      	mov	r3, r1
    5bba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	7e1b      	ldrb	r3, [r3, #24]
    5bc0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5bc2:	7bfa      	ldrb	r2, [r7, #15]
    5bc4:	78fb      	ldrb	r3, [r7, #3]
    5bc6:	4013      	ands	r3, r2
    5bc8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5bca:	7bfb      	ldrb	r3, [r7, #15]
}
    5bcc:	4618      	mov	r0, r3
    5bce:	3714      	adds	r7, #20
    5bd0:	46bd      	mov	sp, r7
    5bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bd6:	4770      	bx	lr

00005bd8 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5bd8:	b480      	push	{r7}
    5bda:	b083      	sub	sp, #12
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	7e1b      	ldrb	r3, [r3, #24]
    5be4:	b2db      	uxtb	r3, r3
}
    5be6:	4618      	mov	r0, r3
    5be8:	370c      	adds	r7, #12
    5bea:	46bd      	mov	sp, r7
    5bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bf0:	4770      	bx	lr

00005bf2 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5bf2:	b480      	push	{r7}
    5bf4:	b083      	sub	sp, #12
    5bf6:	af00      	add	r7, sp, #0
    5bf8:	6078      	str	r0, [r7, #4]
    5bfa:	460b      	mov	r3, r1
    5bfc:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	78fa      	ldrb	r2, [r7, #3]
    5c02:	761a      	strb	r2, [r3, #24]
}
    5c04:	bf00      	nop
    5c06:	370c      	adds	r7, #12
    5c08:	46bd      	mov	sp, r7
    5c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c0e:	4770      	bx	lr

00005c10 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5c10:	b580      	push	{r7, lr}
    5c12:	b082      	sub	sp, #8
    5c14:	af00      	add	r7, sp, #0
    5c16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	681b      	ldr	r3, [r3, #0]
    5c1c:	f043 0202 	orr.w	r2, r3, #2
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c24:	2103      	movs	r1, #3
    5c26:	6878      	ldr	r0, [r7, #4]
    5c28:	4b02      	ldr	r3, [pc, #8]	; (5c34 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5c2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c2c:	bf00      	nop
    5c2e:	3708      	adds	r7, #8
    5c30:	46bd      	mov	sp, r7
    5c32:	bd80      	pop	{r7, pc}
    5c34:	00005aad 	.word	0x00005aad

00005c38 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5c38:	b580      	push	{r7, lr}
    5c3a:	b082      	sub	sp, #8
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	681b      	ldr	r3, [r3, #0]
    5c44:	f023 0202 	bic.w	r2, r3, #2
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c4c:	2103      	movs	r1, #3
    5c4e:	6878      	ldr	r0, [r7, #4]
    5c50:	4b02      	ldr	r3, [pc, #8]	; (5c5c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5c52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c54:	bf00      	nop
    5c56:	3708      	adds	r7, #8
    5c58:	46bd      	mov	sp, r7
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	00005aad 	.word	0x00005aad

00005c60 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5c60:	b480      	push	{r7}
    5c62:	b085      	sub	sp, #20
    5c64:	af00      	add	r7, sp, #0
    5c66:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	681b      	ldr	r3, [r3, #0]
    5c6c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5c6e:	68fb      	ldr	r3, [r7, #12]
    5c70:	0edb      	lsrs	r3, r3, #27
    5c72:	f003 0301 	and.w	r3, r3, #1
    5c76:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5c78:	68fb      	ldr	r3, [r7, #12]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	bf14      	ite	ne
    5c7e:	2301      	movne	r3, #1
    5c80:	2300      	moveq	r3, #0
    5c82:	b2db      	uxtb	r3, r3
}
    5c84:	4618      	mov	r0, r3
    5c86:	3714      	adds	r7, #20
    5c88:	46bd      	mov	sp, r7
    5c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c8e:	4770      	bx	lr

00005c90 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5c90:	b580      	push	{r7, lr}
    5c92:	b084      	sub	sp, #16
    5c94:	af00      	add	r7, sp, #0
    5c96:	6078      	str	r0, [r7, #4]
    5c98:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5c9a:	2103      	movs	r1, #3
    5c9c:	6878      	ldr	r0, [r7, #4]
    5c9e:	4b07      	ldr	r3, [pc, #28]	; (5cbc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5ca0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	681b      	ldr	r3, [r3, #0]
    5ca6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ca8:	68fa      	ldr	r2, [r7, #12]
    5caa:	683b      	ldr	r3, [r7, #0]
    5cac:	4013      	ands	r3, r2
    5cae:	60fb      	str	r3, [r7, #12]
	return tmp;
    5cb0:	68fb      	ldr	r3, [r7, #12]
}
    5cb2:	4618      	mov	r0, r3
    5cb4:	3710      	adds	r7, #16
    5cb6:	46bd      	mov	sp, r7
    5cb8:	bd80      	pop	{r7, pc}
    5cba:	bf00      	nop
    5cbc:	00005aad 	.word	0x00005aad

00005cc0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b082      	sub	sp, #8
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
    5cc8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	683a      	ldr	r2, [r7, #0]
    5cce:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5cd0:	2103      	movs	r1, #3
    5cd2:	6878      	ldr	r0, [r7, #4]
    5cd4:	4b02      	ldr	r3, [pc, #8]	; (5ce0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5cd6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cd8:	bf00      	nop
    5cda:	3708      	adds	r7, #8
    5cdc:	46bd      	mov	sp, r7
    5cde:	bd80      	pop	{r7, pc}
    5ce0:	00005aad 	.word	0x00005aad

00005ce4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5ce4:	b580      	push	{r7, lr}
    5ce6:	b084      	sub	sp, #16
    5ce8:	af00      	add	r7, sp, #0
    5cea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5cec:	2103      	movs	r1, #3
    5cee:	6878      	ldr	r0, [r7, #4]
    5cf0:	4b09      	ldr	r3, [pc, #36]	; (5d18 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5cf2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5cfa:	68fb      	ldr	r3, [r7, #12]
    5cfc:	085b      	lsrs	r3, r3, #1
    5cfe:	f003 0301 	and.w	r3, r3, #1
    5d02:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5d04:	68fb      	ldr	r3, [r7, #12]
    5d06:	2b00      	cmp	r3, #0
    5d08:	bf14      	ite	ne
    5d0a:	2301      	movne	r3, #1
    5d0c:	2300      	moveq	r3, #0
    5d0e:	b2db      	uxtb	r3, r3
}
    5d10:	4618      	mov	r0, r3
    5d12:	3710      	adds	r7, #16
    5d14:	46bd      	mov	sp, r7
    5d16:	bd80      	pop	{r7, pc}
    5d18:	00005af9 	.word	0x00005af9

00005d1c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b082      	sub	sp, #8
    5d20:	af00      	add	r7, sp, #0
    5d22:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5d24:	687b      	ldr	r3, [r7, #4]
    5d26:	681b      	ldr	r3, [r3, #0]
    5d28:	f023 0202 	bic.w	r2, r3, #2
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d30:	2103      	movs	r1, #3
    5d32:	6878      	ldr	r0, [r7, #4]
    5d34:	4b02      	ldr	r3, [pc, #8]	; (5d40 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5d36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d38:	bf00      	nop
    5d3a:	3708      	adds	r7, #8
    5d3c:	46bd      	mov	sp, r7
    5d3e:	bd80      	pop	{r7, pc}
    5d40:	00005af9 	.word	0x00005af9

00005d44 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b084      	sub	sp, #16
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
    5d4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d4e:	2103      	movs	r1, #3
    5d50:	6878      	ldr	r0, [r7, #4]
    5d52:	4b07      	ldr	r3, [pc, #28]	; (5d70 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5d54:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5d5c:	68fa      	ldr	r2, [r7, #12]
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	4013      	ands	r3, r2
    5d62:	60fb      	str	r3, [r7, #12]
	return tmp;
    5d64:	68fb      	ldr	r3, [r7, #12]
}
    5d66:	4618      	mov	r0, r3
    5d68:	3710      	adds	r7, #16
    5d6a:	46bd      	mov	sp, r7
    5d6c:	bd80      	pop	{r7, pc}
    5d6e:	bf00      	nop
    5d70:	00005af9 	.word	0x00005af9

00005d74 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b082      	sub	sp, #8
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
    5d7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5d7e:	687b      	ldr	r3, [r7, #4]
    5d80:	683a      	ldr	r2, [r7, #0]
    5d82:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5d84:	2103      	movs	r1, #3
    5d86:	6878      	ldr	r0, [r7, #4]
    5d88:	4b02      	ldr	r3, [pc, #8]	; (5d94 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5d8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d8c:	bf00      	nop
    5d8e:	3708      	adds	r7, #8
    5d90:	46bd      	mov	sp, r7
    5d92:	bd80      	pop	{r7, pc}
    5d94:	00005af9 	.word	0x00005af9

00005d98 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	685b      	ldr	r3, [r3, #4]
    5da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dac:	2104      	movs	r1, #4
    5dae:	6878      	ldr	r0, [r7, #4]
    5db0:	4b02      	ldr	r3, [pc, #8]	; (5dbc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5db2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5db4:	bf00      	nop
    5db6:	3708      	adds	r7, #8
    5db8:	46bd      	mov	sp, r7
    5dba:	bd80      	pop	{r7, pc}
    5dbc:	00005aad 	.word	0x00005aad

00005dc0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b082      	sub	sp, #8
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	685b      	ldr	r3, [r3, #4]
    5dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dd4:	2104      	movs	r1, #4
    5dd6:	6878      	ldr	r0, [r7, #4]
    5dd8:	4b02      	ldr	r3, [pc, #8]	; (5de4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5dda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ddc:	bf00      	nop
    5dde:	3708      	adds	r7, #8
    5de0:	46bd      	mov	sp, r7
    5de2:	bd80      	pop	{r7, pc}
    5de4:	00005aad 	.word	0x00005aad

00005de8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	685b      	ldr	r3, [r3, #4]
    5df4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dfc:	2104      	movs	r1, #4
    5dfe:	6878      	ldr	r0, [r7, #4]
    5e00:	4b02      	ldr	r3, [pc, #8]	; (5e0c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5e02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e04:	bf00      	nop
    5e06:	3708      	adds	r7, #8
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	00005aad 	.word	0x00005aad

00005e10 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b082      	sub	sp, #8
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	685b      	ldr	r3, [r3, #4]
    5e1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e24:	2104      	movs	r1, #4
    5e26:	6878      	ldr	r0, [r7, #4]
    5e28:	4b02      	ldr	r3, [pc, #8]	; (5e34 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5e2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e2c:	bf00      	nop
    5e2e:	3708      	adds	r7, #8
    5e30:	46bd      	mov	sp, r7
    5e32:	bd80      	pop	{r7, pc}
    5e34:	00005aad 	.word	0x00005aad

00005e38 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b082      	sub	sp, #8
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
    5e40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	685a      	ldr	r2, [r3, #4]
    5e46:	683b      	ldr	r3, [r7, #0]
    5e48:	041b      	lsls	r3, r3, #16
    5e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5e4e:	431a      	orrs	r2, r3
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e54:	2104      	movs	r1, #4
    5e56:	6878      	ldr	r0, [r7, #4]
    5e58:	4b02      	ldr	r3, [pc, #8]	; (5e64 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5e5a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e5c:	bf00      	nop
    5e5e:	3708      	adds	r7, #8
    5e60:	46bd      	mov	sp, r7
    5e62:	bd80      	pop	{r7, pc}
    5e64:	00005aad 	.word	0x00005aad

00005e68 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5e68:	b580      	push	{r7, lr}
    5e6a:	b082      	sub	sp, #8
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	6078      	str	r0, [r7, #4]
    5e70:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	683a      	ldr	r2, [r7, #0]
    5e76:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e78:	2104      	movs	r1, #4
    5e7a:	6878      	ldr	r0, [r7, #4]
    5e7c:	4b02      	ldr	r3, [pc, #8]	; (5e88 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5e7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e80:	bf00      	nop
    5e82:	3708      	adds	r7, #8
    5e84:	46bd      	mov	sp, r7
    5e86:	bd80      	pop	{r7, pc}
    5e88:	00005aad 	.word	0x00005aad

00005e8c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5e8c:	b580      	push	{r7, lr}
    5e8e:	b082      	sub	sp, #8
    5e90:	af00      	add	r7, sp, #0
    5e92:	6078      	str	r0, [r7, #4]
    5e94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	683a      	ldr	r2, [r7, #0]
    5e9a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5e9c:	2117      	movs	r1, #23
    5e9e:	6878      	ldr	r0, [r7, #4]
    5ea0:	4b02      	ldr	r3, [pc, #8]	; (5eac <hri_sercomspi_write_CTRLB_reg+0x20>)
    5ea2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ea4:	bf00      	nop
    5ea6:	3708      	adds	r7, #8
    5ea8:	46bd      	mov	sp, r7
    5eaa:	bd80      	pop	{r7, pc}
    5eac:	00005af9 	.word	0x00005af9

00005eb0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5eb0:	b480      	push	{r7}
    5eb2:	b083      	sub	sp, #12
    5eb4:	af00      	add	r7, sp, #0
    5eb6:	6078      	str	r0, [r7, #4]
    5eb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	683a      	ldr	r2, [r7, #0]
    5ebe:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ec0:	bf00      	nop
    5ec2:	370c      	adds	r7, #12
    5ec4:	46bd      	mov	sp, r7
    5ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eca:	4770      	bx	lr

00005ecc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5ecc:	b480      	push	{r7}
    5ece:	b083      	sub	sp, #12
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
    5ed4:	460b      	mov	r3, r1
    5ed6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	78fa      	ldrb	r2, [r7, #3]
    5edc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ede:	bf00      	nop
    5ee0:	370c      	adds	r7, #12
    5ee2:	46bd      	mov	sp, r7
    5ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ee8:	4770      	bx	lr
	...

00005eec <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5eec:	b580      	push	{r7, lr}
    5eee:	b084      	sub	sp, #16
    5ef0:	af00      	add	r7, sp, #0
    5ef2:	6078      	str	r0, [r7, #4]
    5ef4:	460b      	mov	r3, r1
    5ef6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5efc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5efe:	68fb      	ldr	r3, [r7, #12]
    5f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5f04:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5f06:	78fb      	ldrb	r3, [r7, #3]
    5f08:	039b      	lsls	r3, r3, #14
    5f0a:	461a      	mov	r2, r3
    5f0c:	68fb      	ldr	r3, [r7, #12]
    5f0e:	4313      	orrs	r3, r2
    5f10:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	68fa      	ldr	r2, [r7, #12]
    5f16:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f18:	2104      	movs	r1, #4
    5f1a:	6878      	ldr	r0, [r7, #4]
    5f1c:	4b02      	ldr	r3, [pc, #8]	; (5f28 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5f1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f20:	bf00      	nop
    5f22:	3710      	adds	r7, #16
    5f24:	46bd      	mov	sp, r7
    5f26:	bd80      	pop	{r7, pc}
    5f28:	00005aad 	.word	0x00005aad

00005f2c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b082      	sub	sp, #8
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
    5f34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	683a      	ldr	r2, [r7, #0]
    5f3a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f3c:	2104      	movs	r1, #4
    5f3e:	6878      	ldr	r0, [r7, #4]
    5f40:	4b02      	ldr	r3, [pc, #8]	; (5f4c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5f42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f44:	bf00      	nop
    5f46:	3708      	adds	r7, #8
    5f48:	46bd      	mov	sp, r7
    5f4a:	bd80      	pop	{r7, pc}
    5f4c:	00005aad 	.word	0x00005aad

00005f50 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b082      	sub	sp, #8
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f58:	2104      	movs	r1, #4
    5f5a:	6878      	ldr	r0, [r7, #4]
    5f5c:	4b03      	ldr	r3, [pc, #12]	; (5f6c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5f5e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5f60:	687b      	ldr	r3, [r7, #4]
    5f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5f64:	4618      	mov	r0, r3
    5f66:	3708      	adds	r7, #8
    5f68:	46bd      	mov	sp, r7
    5f6a:	bd80      	pop	{r7, pc}
    5f6c:	00005aad 	.word	0x00005aad

00005f70 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5f70:	b480      	push	{r7}
    5f72:	b083      	sub	sp, #12
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
    5f78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	683a      	ldr	r2, [r7, #0]
    5f7e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5f80:	bf00      	nop
    5f82:	370c      	adds	r7, #12
    5f84:	46bd      	mov	sp, r7
    5f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8a:	4770      	bx	lr

00005f8c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b082      	sub	sp, #8
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	683a      	ldr	r2, [r7, #0]
    5f9a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5f9c:	2104      	movs	r1, #4
    5f9e:	6878      	ldr	r0, [r7, #4]
    5fa0:	4b02      	ldr	r3, [pc, #8]	; (5fac <hri_sercomi2cm_write_DATA_reg+0x20>)
    5fa2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fa4:	bf00      	nop
    5fa6:	3708      	adds	r7, #8
    5fa8:	46bd      	mov	sp, r7
    5faa:	bd80      	pop	{r7, pc}
    5fac:	00005aad 	.word	0x00005aad

00005fb0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5fb0:	b580      	push	{r7, lr}
    5fb2:	b082      	sub	sp, #8
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5fb8:	2104      	movs	r1, #4
    5fba:	6878      	ldr	r0, [r7, #4]
    5fbc:	4b03      	ldr	r3, [pc, #12]	; (5fcc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5fbe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5fc4:	4618      	mov	r0, r3
    5fc6:	3708      	adds	r7, #8
    5fc8:	46bd      	mov	sp, r7
    5fca:	bd80      	pop	{r7, pc}
    5fcc:	00005aad 	.word	0x00005aad

00005fd0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5fd0:	b480      	push	{r7}
    5fd2:	b083      	sub	sp, #12
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	6078      	str	r0, [r7, #4]
    5fd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	683a      	ldr	r2, [r7, #0]
    5fde:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe0:	bf00      	nop
    5fe2:	370c      	adds	r7, #12
    5fe4:	46bd      	mov	sp, r7
    5fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fea:	4770      	bx	lr

00005fec <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5fec:	b480      	push	{r7}
    5fee:	b083      	sub	sp, #12
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5ff8:	4618      	mov	r0, r3
    5ffa:	370c      	adds	r7, #12
    5ffc:	46bd      	mov	sp, r7
    5ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6002:	4770      	bx	lr

00006004 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6004:	b480      	push	{r7}
    6006:	b083      	sub	sp, #12
    6008:	af00      	add	r7, sp, #0
    600a:	6078      	str	r0, [r7, #4]
    600c:	460b      	mov	r3, r1
    600e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	78fa      	ldrb	r2, [r7, #3]
    6014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6018:	bf00      	nop
    601a:	370c      	adds	r7, #12
    601c:	46bd      	mov	sp, r7
    601e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6022:	4770      	bx	lr

00006024 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6024:	b480      	push	{r7}
    6026:	b083      	sub	sp, #12
    6028:	af00      	add	r7, sp, #0
    602a:	6078      	str	r0, [r7, #4]
    602c:	460b      	mov	r3, r1
    602e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	887a      	ldrh	r2, [r7, #2]
    6034:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6036:	bf00      	nop
    6038:	370c      	adds	r7, #12
    603a:	46bd      	mov	sp, r7
    603c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6040:	4770      	bx	lr
	...

00006044 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6044:	b580      	push	{r7, lr}
    6046:	b082      	sub	sp, #8
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    604c:	2104      	movs	r1, #4
    604e:	6878      	ldr	r0, [r7, #4]
    6050:	4b06      	ldr	r3, [pc, #24]	; (606c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6052:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	8b5b      	ldrh	r3, [r3, #26]
    6058:	b29b      	uxth	r3, r3
    605a:	091b      	lsrs	r3, r3, #4
    605c:	b29b      	uxth	r3, r3
    605e:	f003 0303 	and.w	r3, r3, #3
    6062:	b29b      	uxth	r3, r3
}
    6064:	4618      	mov	r0, r3
    6066:	3708      	adds	r7, #8
    6068:	46bd      	mov	sp, r7
    606a:	bd80      	pop	{r7, pc}
    606c:	00005aad 	.word	0x00005aad

00006070 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6070:	b580      	push	{r7, lr}
    6072:	b082      	sub	sp, #8
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6078:	2104      	movs	r1, #4
    607a:	6878      	ldr	r0, [r7, #4]
    607c:	4b04      	ldr	r3, [pc, #16]	; (6090 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    607e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6080:	687b      	ldr	r3, [r7, #4]
    6082:	8b5b      	ldrh	r3, [r3, #26]
    6084:	b29b      	uxth	r3, r3
}
    6086:	4618      	mov	r0, r3
    6088:	3708      	adds	r7, #8
    608a:	46bd      	mov	sp, r7
    608c:	bd80      	pop	{r7, pc}
    608e:	bf00      	nop
    6090:	00005aad 	.word	0x00005aad

00006094 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6094:	b580      	push	{r7, lr}
    6096:	b082      	sub	sp, #8
    6098:	af00      	add	r7, sp, #0
    609a:	6078      	str	r0, [r7, #4]
    609c:	460b      	mov	r3, r1
    609e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	887a      	ldrh	r2, [r7, #2]
    60a4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    60a6:	2104      	movs	r1, #4
    60a8:	6878      	ldr	r0, [r7, #4]
    60aa:	4b03      	ldr	r3, [pc, #12]	; (60b8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    60ac:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60ae:	bf00      	nop
    60b0:	3708      	adds	r7, #8
    60b2:	46bd      	mov	sp, r7
    60b4:	bd80      	pop	{r7, pc}
    60b6:	bf00      	nop
    60b8:	00005aad 	.word	0x00005aad

000060bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    60bc:	b4b0      	push	{r4, r5, r7}
    60be:	b08d      	sub	sp, #52	; 0x34
    60c0:	af00      	add	r7, sp, #0
    60c2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    60c4:	4b13      	ldr	r3, [pc, #76]	; (6114 <_sercom_get_hardware_index+0x58>)
    60c6:	f107 040c 	add.w	r4, r7, #12
    60ca:	461d      	mov	r5, r3
    60cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    60ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    60d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    60d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    60d8:	2300      	movs	r3, #0
    60da:	62fb      	str	r3, [r7, #44]	; 0x2c
    60dc:	e010      	b.n	6100 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    60de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60e0:	009b      	lsls	r3, r3, #2
    60e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    60e6:	4413      	add	r3, r2
    60e8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    60ec:	461a      	mov	r2, r3
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	429a      	cmp	r2, r3
    60f2:	d102      	bne.n	60fa <_sercom_get_hardware_index+0x3e>
			return i;
    60f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60f6:	b2db      	uxtb	r3, r3
    60f8:	e006      	b.n	6108 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    60fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    60fc:	3301      	adds	r3, #1
    60fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    6100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6102:	2b07      	cmp	r3, #7
    6104:	d9eb      	bls.n	60de <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6106:	2300      	movs	r3, #0
}
    6108:	4618      	mov	r0, r3
    610a:	3734      	adds	r7, #52	; 0x34
    610c:	46bd      	mov	sp, r7
    610e:	bcb0      	pop	{r4, r5, r7}
    6110:	4770      	bx	lr
    6112:	bf00      	nop
    6114:	0000f174 	.word	0x0000f174

00006118 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6118:	b480      	push	{r7}
    611a:	b083      	sub	sp, #12
    611c:	af00      	add	r7, sp, #0
    611e:	6078      	str	r0, [r7, #4]
    6120:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	4a05      	ldr	r2, [pc, #20]	; (613c <_sercom_init_irq_param+0x24>)
    6126:	4293      	cmp	r3, r2
    6128:	d102      	bne.n	6130 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    612a:	4a05      	ldr	r2, [pc, #20]	; (6140 <_sercom_init_irq_param+0x28>)
    612c:	683b      	ldr	r3, [r7, #0]
    612e:	6013      	str	r3, [r2, #0]
	}
}
    6130:	bf00      	nop
    6132:	370c      	adds	r7, #12
    6134:	46bd      	mov	sp, r7
    6136:	f85d 7b04 	ldr.w	r7, [sp], #4
    613a:	4770      	bx	lr
    613c:	43000c00 	.word	0x43000c00
    6140:	2000081c 	.word	0x2000081c

00006144 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6144:	b580      	push	{r7, lr}
    6146:	b084      	sub	sp, #16
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    614c:	6878      	ldr	r0, [r7, #4]
    614e:	4b13      	ldr	r3, [pc, #76]	; (619c <_get_i2cm_index+0x58>)
    6150:	4798      	blx	r3
    6152:	4603      	mov	r3, r0
    6154:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6156:	2300      	movs	r3, #0
    6158:	73fb      	strb	r3, [r7, #15]
    615a:	e010      	b.n	617e <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    615c:	7bfa      	ldrb	r2, [r7, #15]
    615e:	4910      	ldr	r1, [pc, #64]	; (61a0 <_get_i2cm_index+0x5c>)
    6160:	4613      	mov	r3, r2
    6162:	005b      	lsls	r3, r3, #1
    6164:	4413      	add	r3, r2
    6166:	00db      	lsls	r3, r3, #3
    6168:	440b      	add	r3, r1
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	7bba      	ldrb	r2, [r7, #14]
    616e:	429a      	cmp	r2, r3
    6170:	d102      	bne.n	6178 <_get_i2cm_index+0x34>
			return i;
    6172:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6176:	e00d      	b.n	6194 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6178:	7bfb      	ldrb	r3, [r7, #15]
    617a:	3301      	adds	r3, #1
    617c:	73fb      	strb	r3, [r7, #15]
    617e:	7bfb      	ldrb	r3, [r7, #15]
    6180:	2b02      	cmp	r3, #2
    6182:	d9eb      	bls.n	615c <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6184:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6188:	4906      	ldr	r1, [pc, #24]	; (61a4 <_get_i2cm_index+0x60>)
    618a:	2000      	movs	r0, #0
    618c:	4b06      	ldr	r3, [pc, #24]	; (61a8 <_get_i2cm_index+0x64>)
    618e:	4798      	blx	r3
	return -1;
    6190:	f04f 33ff 	mov.w	r3, #4294967295
}
    6194:	4618      	mov	r0, r3
    6196:	3710      	adds	r7, #16
    6198:	46bd      	mov	sp, r7
    619a:	bd80      	pop	{r7, pc}
    619c:	000060bd 	.word	0x000060bd
    61a0:	20000018 	.word	0x20000018
    61a4:	0000f158 	.word	0x0000f158
    61a8:	00003511 	.word	0x00003511

000061ac <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b082      	sub	sp, #8
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    61b4:	2103      	movs	r1, #3
    61b6:	6878      	ldr	r0, [r7, #4]
    61b8:	4b02      	ldr	r3, [pc, #8]	; (61c4 <_sercom_i2c_send_stop+0x18>)
    61ba:	4798      	blx	r3
}
    61bc:	bf00      	nop
    61be:	3708      	adds	r7, #8
    61c0:	46bd      	mov	sp, r7
    61c2:	bd80      	pop	{r7, pc}
    61c4:	00005e39 	.word	0x00005e39

000061c8 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    61c8:	b590      	push	{r4, r7, lr}
    61ca:	b087      	sub	sp, #28
    61cc:	af00      	add	r7, sp, #0
    61ce:	60f8      	str	r0, [r7, #12]
    61d0:	60b9      	str	r1, [r7, #8]
    61d2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    61d4:	68f8      	ldr	r0, [r7, #12]
    61d6:	4b7d      	ldr	r3, [pc, #500]	; (63cc <_sercom_i2c_sync_analyse_flags+0x204>)
    61d8:	4798      	blx	r3
    61da:	4603      	mov	r3, r0
    61dc:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    61de:	68f8      	ldr	r0, [r7, #12]
    61e0:	4b7b      	ldr	r3, [pc, #492]	; (63d0 <_sercom_i2c_sync_analyse_flags+0x208>)
    61e2:	4798      	blx	r3
    61e4:	4603      	mov	r3, r0
    61e6:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    61e8:	68bb      	ldr	r3, [r7, #8]
    61ea:	f003 0301 	and.w	r3, r3, #1
    61ee:	2b00      	cmp	r3, #0
    61f0:	f000 8095 	beq.w	631e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    61f4:	8a7b      	ldrh	r3, [r7, #18]
    61f6:	f003 0302 	and.w	r3, r3, #2
    61fa:	2b00      	cmp	r3, #0
    61fc:	d01d      	beq.n	623a <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    61fe:	68f8      	ldr	r0, [r7, #12]
    6200:	4b74      	ldr	r3, [pc, #464]	; (63d4 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6202:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	885b      	ldrh	r3, [r3, #2]
    6208:	b29b      	uxth	r3, r3
    620a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    620e:	b29a      	uxth	r2, r3
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	885b      	ldrh	r3, [r3, #2]
    6218:	b29b      	uxth	r3, r3
    621a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    621e:	b29a      	uxth	r2, r3
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6224:	8a7b      	ldrh	r3, [r7, #18]
    6226:	f003 0301 	and.w	r3, r3, #1
    622a:	2b00      	cmp	r3, #0
    622c:	d002      	beq.n	6234 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    622e:	f06f 0304 	mvn.w	r3, #4
    6232:	e0c6      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6234:	f06f 0303 	mvn.w	r3, #3
    6238:	e0c3      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    623a:	8a7b      	ldrh	r3, [r7, #18]
    623c:	f003 0304 	and.w	r3, r3, #4
    6240:	2b00      	cmp	r3, #0
    6242:	d01f      	beq.n	6284 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	685b      	ldr	r3, [r3, #4]
    6248:	2b00      	cmp	r3, #0
    624a:	dd07      	ble.n	625c <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	885b      	ldrh	r3, [r3, #2]
    6250:	b29b      	uxth	r3, r3
    6252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6256:	b29a      	uxth	r2, r3
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	885b      	ldrh	r3, [r3, #2]
    6260:	b29b      	uxth	r3, r3
    6262:	b21b      	sxth	r3, r3
    6264:	2b00      	cmp	r3, #0
    6266:	da02      	bge.n	626e <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6268:	68f8      	ldr	r0, [r7, #12]
    626a:	4b5b      	ldr	r3, [pc, #364]	; (63d8 <_sercom_i2c_sync_analyse_flags+0x210>)
    626c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	885b      	ldrh	r3, [r3, #2]
    6272:	b29b      	uxth	r3, r3
    6274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6278:	b29a      	uxth	r2, r3
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    627e:	f06f 0301 	mvn.w	r3, #1
    6282:	e09e      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	885b      	ldrh	r3, [r3, #2]
    6288:	b29b      	uxth	r3, r3
    628a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    628e:	2b00      	cmp	r3, #0
    6290:	d01c      	beq.n	62cc <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	881b      	ldrh	r3, [r3, #0]
    6296:	121b      	asrs	r3, r3, #8
    6298:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    629a:	f003 0406 	and.w	r4, r3, #6
    629e:	68f8      	ldr	r0, [r7, #12]
    62a0:	4b4e      	ldr	r3, [pc, #312]	; (63dc <_sercom_i2c_sync_analyse_flags+0x214>)
    62a2:	4798      	blx	r3
    62a4:	4603      	mov	r3, r0
    62a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    62aa:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    62ac:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    62b0:	4619      	mov	r1, r3
    62b2:	68f8      	ldr	r0, [r7, #12]
    62b4:	4b4a      	ldr	r3, [pc, #296]	; (63e0 <_sercom_i2c_sync_analyse_flags+0x218>)
    62b6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	885b      	ldrh	r3, [r3, #2]
    62bc:	b29b      	uxth	r3, r3
    62be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    62c2:	b29a      	uxth	r2, r3
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    62c8:	2300      	movs	r3, #0
    62ca:	e07a      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	685b      	ldr	r3, [r3, #4]
    62d0:	2b00      	cmp	r3, #0
    62d2:	d111      	bne.n	62f8 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	885b      	ldrh	r3, [r3, #2]
    62d8:	b29b      	uxth	r3, r3
    62da:	b21b      	sxth	r3, r3
    62dc:	2b00      	cmp	r3, #0
    62de:	da02      	bge.n	62e6 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    62e0:	68f8      	ldr	r0, [r7, #12]
    62e2:	4b3d      	ldr	r3, [pc, #244]	; (63d8 <_sercom_i2c_sync_analyse_flags+0x210>)
    62e4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	885b      	ldrh	r3, [r3, #2]
    62ea:	b29b      	uxth	r3, r3
    62ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62f0:	b29a      	uxth	r2, r3
    62f2:	687b      	ldr	r3, [r7, #4]
    62f4:	805a      	strh	r2, [r3, #2]
    62f6:	e010      	b.n	631a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	689b      	ldr	r3, [r3, #8]
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	4619      	mov	r1, r3
    6300:	68f8      	ldr	r0, [r7, #12]
    6302:	4b38      	ldr	r3, [pc, #224]	; (63e4 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6304:	4798      	blx	r3
				msg->buffer++;
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	689b      	ldr	r3, [r3, #8]
    630a:	1c5a      	adds	r2, r3, #1
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	609a      	str	r2, [r3, #8]
				msg->len--;
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	685b      	ldr	r3, [r3, #4]
    6314:	1e5a      	subs	r2, r3, #1
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    631a:	2300      	movs	r3, #0
    631c:	e051      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    631e:	68bb      	ldr	r3, [r7, #8]
    6320:	f003 0302 	and.w	r3, r3, #2
    6324:	2b00      	cmp	r3, #0
    6326:	d04b      	beq.n	63c0 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	685b      	ldr	r3, [r3, #4]
    632c:	2b00      	cmp	r3, #0
    632e:	d041      	beq.n	63b4 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6330:	8a7b      	ldrh	r3, [r7, #18]
    6332:	f003 0304 	and.w	r3, r3, #4
    6336:	2b00      	cmp	r3, #0
    6338:	d13c      	bne.n	63b4 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    633a:	687b      	ldr	r3, [r7, #4]
    633c:	685b      	ldr	r3, [r3, #4]
    633e:	1e5a      	subs	r2, r3, #1
    6340:	687b      	ldr	r3, [r7, #4]
    6342:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	685b      	ldr	r3, [r3, #4]
    6348:	2b00      	cmp	r3, #0
    634a:	d102      	bne.n	6352 <_sercom_i2c_sync_analyse_flags+0x18a>
    634c:	697b      	ldr	r3, [r7, #20]
    634e:	2b00      	cmp	r3, #0
    6350:	d006      	beq.n	6360 <_sercom_i2c_sync_analyse_flags+0x198>
    6352:	687b      	ldr	r3, [r7, #4]
    6354:	685b      	ldr	r3, [r3, #4]
    6356:	2b01      	cmp	r3, #1
    6358:	d105      	bne.n	6366 <_sercom_i2c_sync_analyse_flags+0x19e>
    635a:	697b      	ldr	r3, [r7, #20]
    635c:	2b00      	cmp	r3, #0
    635e:	d002      	beq.n	6366 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6360:	68f8      	ldr	r0, [r7, #12]
    6362:	4b21      	ldr	r3, [pc, #132]	; (63e8 <_sercom_i2c_sync_analyse_flags+0x220>)
    6364:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	685b      	ldr	r3, [r3, #4]
    636a:	2b00      	cmp	r3, #0
    636c:	d113      	bne.n	6396 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	885b      	ldrh	r3, [r3, #2]
    6372:	b29b      	uxth	r3, r3
    6374:	b21b      	sxth	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	da05      	bge.n	6386 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    637a:	68f8      	ldr	r0, [r7, #12]
    637c:	4b1b      	ldr	r3, [pc, #108]	; (63ec <_sercom_i2c_sync_analyse_flags+0x224>)
    637e:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6380:	68f8      	ldr	r0, [r7, #12]
    6382:	4b15      	ldr	r3, [pc, #84]	; (63d8 <_sercom_i2c_sync_analyse_flags+0x210>)
    6384:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	885b      	ldrh	r3, [r3, #2]
    638a:	b29b      	uxth	r3, r3
    638c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6390:	b29a      	uxth	r2, r3
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	689c      	ldr	r4, [r3, #8]
    639a:	1c62      	adds	r2, r4, #1
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	609a      	str	r2, [r3, #8]
    63a0:	68f8      	ldr	r0, [r7, #12]
    63a2:	4b13      	ldr	r3, [pc, #76]	; (63f0 <_sercom_i2c_sync_analyse_flags+0x228>)
    63a4:	4798      	blx	r3
    63a6:	4603      	mov	r3, r0
    63a8:	b2db      	uxtb	r3, r3
    63aa:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    63ac:	68f8      	ldr	r0, [r7, #12]
    63ae:	4b11      	ldr	r3, [pc, #68]	; (63f4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    63b0:	4798      	blx	r3
    63b2:	e005      	b.n	63c0 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    63b4:	68f8      	ldr	r0, [r7, #12]
    63b6:	4b0f      	ldr	r3, [pc, #60]	; (63f4 <_sercom_i2c_sync_analyse_flags+0x22c>)
    63b8:	4798      	blx	r3
			return I2C_NACK;
    63ba:	f06f 0301 	mvn.w	r3, #1
    63be:	e000      	b.n	63c2 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    63c0:	2300      	movs	r3, #0
}
    63c2:	4618      	mov	r0, r3
    63c4:	371c      	adds	r7, #28
    63c6:	46bd      	mov	sp, r7
    63c8:	bd90      	pop	{r4, r7, pc}
    63ca:	bf00      	nop
    63cc:	00005c61 	.word	0x00005c61
    63d0:	00006071 	.word	0x00006071
    63d4:	00005b45 	.word	0x00005b45
    63d8:	000061ad 	.word	0x000061ad
    63dc:	00005f51 	.word	0x00005f51
    63e0:	00005f2d 	.word	0x00005f2d
    63e4:	00005f8d 	.word	0x00005f8d
    63e8:	00005de9 	.word	0x00005de9
    63ec:	00005dc1 	.word	0x00005dc1
    63f0:	00005fb1 	.word	0x00005fb1
    63f4:	00005b5f 	.word	0x00005b5f

000063f8 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b086      	sub	sp, #24
    63fc:	af00      	add	r7, sp, #0
    63fe:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	691b      	ldr	r3, [r3, #16]
    6404:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6406:	6938      	ldr	r0, [r7, #16]
    6408:	4b37      	ldr	r3, [pc, #220]	; (64e8 <_sercom_i2c_m_irq_handler+0xf0>)
    640a:	4798      	blx	r3
    640c:	4603      	mov	r3, r0
    640e:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6410:	2300      	movs	r3, #0
    6412:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	2b00      	cmp	r3, #0
    6418:	bf14      	ite	ne
    641a:	2301      	movne	r3, #1
    641c:	2300      	moveq	r3, #0
    641e:	b2db      	uxtb	r3, r3
    6420:	f240 421e 	movw	r2, #1054	; 0x41e
    6424:	4931      	ldr	r1, [pc, #196]	; (64ec <_sercom_i2c_m_irq_handler+0xf4>)
    6426:	4618      	mov	r0, r3
    6428:	4b31      	ldr	r3, [pc, #196]	; (64f0 <_sercom_i2c_m_irq_handler+0xf8>)
    642a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    642c:	687b      	ldr	r3, [r7, #4]
    642e:	691b      	ldr	r3, [r3, #16]
    6430:	2b00      	cmp	r3, #0
    6432:	bf14      	ite	ne
    6434:	2301      	movne	r3, #1
    6436:	2300      	moveq	r3, #0
    6438:	b2db      	uxtb	r3, r3
    643a:	f240 421f 	movw	r2, #1055	; 0x41f
    643e:	492b      	ldr	r1, [pc, #172]	; (64ec <_sercom_i2c_m_irq_handler+0xf4>)
    6440:	4618      	mov	r0, r3
    6442:	4b2b      	ldr	r3, [pc, #172]	; (64f0 <_sercom_i2c_m_irq_handler+0xf8>)
    6444:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6446:	bf00      	nop
    6448:	68fb      	ldr	r3, [r7, #12]
    644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    644e:	2b00      	cmp	r3, #0
    6450:	d126      	bne.n	64a0 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	461a      	mov	r2, r3
    6456:	68f9      	ldr	r1, [r7, #12]
    6458:	6938      	ldr	r0, [r7, #16]
    645a:	4b26      	ldr	r3, [pc, #152]	; (64f4 <_sercom_i2c_m_irq_handler+0xfc>)
    645c:	4798      	blx	r3
    645e:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6460:	697b      	ldr	r3, [r7, #20]
    6462:	2b00      	cmp	r3, #0
    6464:	d11b      	bne.n	649e <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6466:	68fb      	ldr	r3, [r7, #12]
    6468:	f003 0301 	and.w	r3, r3, #1
    646c:	2b00      	cmp	r3, #0
    646e:	d008      	beq.n	6482 <_sercom_i2c_m_irq_handler+0x8a>
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	699b      	ldr	r3, [r3, #24]
    6474:	2b00      	cmp	r3, #0
    6476:	d004      	beq.n	6482 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6478:	687b      	ldr	r3, [r7, #4]
    647a:	699b      	ldr	r3, [r3, #24]
    647c:	6878      	ldr	r0, [r7, #4]
    647e:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6480:	e02e      	b.n	64e0 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	f003 0302 	and.w	r3, r3, #2
    6488:	2b00      	cmp	r3, #0
    648a:	d029      	beq.n	64e0 <_sercom_i2c_m_irq_handler+0xe8>
    648c:	687b      	ldr	r3, [r7, #4]
    648e:	69db      	ldr	r3, [r3, #28]
    6490:	2b00      	cmp	r3, #0
    6492:	d025      	beq.n	64e0 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	69db      	ldr	r3, [r3, #28]
    6498:	6878      	ldr	r0, [r7, #4]
    649a:	4798      	blx	r3
		return;
    649c:	e020      	b.n	64e0 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    649e:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	885b      	ldrh	r3, [r3, #2]
    64a4:	b29b      	uxth	r3, r3
    64a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    64aa:	b29a      	uxth	r2, r3
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	695b      	ldr	r3, [r3, #20]
    64b4:	2b00      	cmp	r3, #0
    64b6:	d014      	beq.n	64e2 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    64b8:	697b      	ldr	r3, [r7, #20]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d005      	beq.n	64ca <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	695b      	ldr	r3, [r3, #20]
    64c2:	6979      	ldr	r1, [r7, #20]
    64c4:	6878      	ldr	r0, [r7, #4]
    64c6:	4798      	blx	r3
    64c8:	e005      	b.n	64d6 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	695b      	ldr	r3, [r3, #20]
    64ce:	f06f 0104 	mvn.w	r1, #4
    64d2:	6878      	ldr	r0, [r7, #4]
    64d4:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    64d6:	2180      	movs	r1, #128	; 0x80
    64d8:	6938      	ldr	r0, [r7, #16]
    64da:	4b07      	ldr	r3, [pc, #28]	; (64f8 <_sercom_i2c_m_irq_handler+0x100>)
    64dc:	4798      	blx	r3
    64de:	e000      	b.n	64e2 <_sercom_i2c_m_irq_handler+0xea>
		return;
    64e0:	bf00      	nop
	}
}
    64e2:	3718      	adds	r7, #24
    64e4:	46bd      	mov	sp, r7
    64e6:	bd80      	pop	{r7, pc}
    64e8:	00005b79 	.word	0x00005b79
    64ec:	0000f158 	.word	0x0000f158
    64f0:	00003511 	.word	0x00003511
    64f4:	000061c9 	.word	0x000061c9
    64f8:	00005b93 	.word	0x00005b93

000064fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b082      	sub	sp, #8
    6500:	af00      	add	r7, sp, #0
    6502:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6504:	6878      	ldr	r0, [r7, #4]
    6506:	4b05      	ldr	r3, [pc, #20]	; (651c <_sercom_get_irq_num+0x20>)
    6508:	4798      	blx	r3
    650a:	4603      	mov	r3, r0
    650c:	009b      	lsls	r3, r3, #2
    650e:	b2db      	uxtb	r3, r3
    6510:	332e      	adds	r3, #46	; 0x2e
    6512:	b2db      	uxtb	r3, r3
}
    6514:	4618      	mov	r0, r3
    6516:	3708      	adds	r7, #8
    6518:	46bd      	mov	sp, r7
    651a:	bd80      	pop	{r7, pc}
    651c:	000060bd 	.word	0x000060bd

00006520 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6520:	b580      	push	{r7, lr}
    6522:	b086      	sub	sp, #24
    6524:	af00      	add	r7, sp, #0
    6526:	6078      	str	r0, [r7, #4]
    6528:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	2b00      	cmp	r3, #0
    652e:	bf14      	ite	ne
    6530:	2301      	movne	r3, #1
    6532:	2300      	moveq	r3, #0
    6534:	b2db      	uxtb	r3, r3
    6536:	f240 4292 	movw	r2, #1170	; 0x492
    653a:	491d      	ldr	r1, [pc, #116]	; (65b0 <_i2c_m_async_init+0x90>)
    653c:	4618      	mov	r0, r3
    653e:	4b1d      	ldr	r3, [pc, #116]	; (65b4 <_i2c_m_async_init+0x94>)
    6540:	4798      	blx	r3

	i2c_dev->hw = hw;
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	683a      	ldr	r2, [r7, #0]
    6546:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6548:	687b      	ldr	r3, [r7, #4]
    654a:	6839      	ldr	r1, [r7, #0]
    654c:	4618      	mov	r0, r3
    654e:	4b1a      	ldr	r3, [pc, #104]	; (65b8 <_i2c_m_async_init+0x98>)
    6550:	4798      	blx	r3
    6552:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6554:	68fb      	ldr	r3, [r7, #12]
    6556:	2b00      	cmp	r3, #0
    6558:	d001      	beq.n	655e <_i2c_m_async_init+0x3e>
		return init_status;
    655a:	68fb      	ldr	r3, [r7, #12]
    655c:	e024      	b.n	65a8 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    655e:	6879      	ldr	r1, [r7, #4]
    6560:	6838      	ldr	r0, [r7, #0]
    6562:	4b16      	ldr	r3, [pc, #88]	; (65bc <_i2c_m_async_init+0x9c>)
    6564:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6566:	6838      	ldr	r0, [r7, #0]
    6568:	4b15      	ldr	r3, [pc, #84]	; (65c0 <_i2c_m_async_init+0xa0>)
    656a:	4798      	blx	r3
    656c:	4603      	mov	r3, r0
    656e:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6570:	2300      	movs	r3, #0
    6572:	613b      	str	r3, [r7, #16]
    6574:	e014      	b.n	65a0 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6576:	7dfb      	ldrb	r3, [r7, #23]
    6578:	b21b      	sxth	r3, r3
    657a:	4618      	mov	r0, r3
    657c:	4b11      	ldr	r3, [pc, #68]	; (65c4 <_i2c_m_async_init+0xa4>)
    657e:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6580:	7dfb      	ldrb	r3, [r7, #23]
    6582:	b21b      	sxth	r3, r3
    6584:	4618      	mov	r0, r3
    6586:	4b10      	ldr	r3, [pc, #64]	; (65c8 <_i2c_m_async_init+0xa8>)
    6588:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    658a:	7dfb      	ldrb	r3, [r7, #23]
    658c:	b21b      	sxth	r3, r3
    658e:	4618      	mov	r0, r3
    6590:	4b0e      	ldr	r3, [pc, #56]	; (65cc <_i2c_m_async_init+0xac>)
    6592:	4798      	blx	r3
		irq++;
    6594:	7dfb      	ldrb	r3, [r7, #23]
    6596:	3301      	adds	r3, #1
    6598:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    659a:	693b      	ldr	r3, [r7, #16]
    659c:	3301      	adds	r3, #1
    659e:	613b      	str	r3, [r7, #16]
    65a0:	693b      	ldr	r3, [r7, #16]
    65a2:	2b03      	cmp	r3, #3
    65a4:	d9e7      	bls.n	6576 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    65a6:	2300      	movs	r3, #0
}
    65a8:	4618      	mov	r0, r3
    65aa:	3718      	adds	r7, #24
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	0000f158 	.word	0x0000f158
    65b4:	00003511 	.word	0x00003511
    65b8:	00006ba5 	.word	0x00006ba5
    65bc:	00006119 	.word	0x00006119
    65c0:	000064fd 	.word	0x000064fd
    65c4:	00005a2d 	.word	0x00005a2d
    65c8:	00005a71 	.word	0x00005a71
    65cc:	000059f1 	.word	0x000059f1

000065d0 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    65d0:	b590      	push	{r4, r7, lr}
    65d2:	b087      	sub	sp, #28
    65d4:	af00      	add	r7, sp, #0
    65d6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	691b      	ldr	r3, [r3, #16]
    65dc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    65e2:	6978      	ldr	r0, [r7, #20]
    65e4:	4b33      	ldr	r3, [pc, #204]	; (66b4 <_sercom_i2c_send_address+0xe4>)
    65e6:	4798      	blx	r3
    65e8:	4603      	mov	r3, r0
    65ea:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	2b00      	cmp	r3, #0
    65f0:	bf14      	ite	ne
    65f2:	2301      	movne	r3, #1
    65f4:	2300      	moveq	r3, #0
    65f6:	b2db      	uxtb	r3, r3
    65f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    65fc:	492e      	ldr	r1, [pc, #184]	; (66b8 <_sercom_i2c_send_address+0xe8>)
    65fe:	4618      	mov	r0, r3
    6600:	4b2e      	ldr	r3, [pc, #184]	; (66bc <_sercom_i2c_send_address+0xec>)
    6602:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6604:	693b      	ldr	r3, [r7, #16]
    6606:	685b      	ldr	r3, [r3, #4]
    6608:	2b01      	cmp	r3, #1
    660a:	d106      	bne.n	661a <_sercom_i2c_send_address+0x4a>
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	2b00      	cmp	r3, #0
    6610:	d003      	beq.n	661a <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6612:	6978      	ldr	r0, [r7, #20]
    6614:	4b2a      	ldr	r3, [pc, #168]	; (66c0 <_sercom_i2c_send_address+0xf0>)
    6616:	4798      	blx	r3
    6618:	e002      	b.n	6620 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    661a:	6978      	ldr	r0, [r7, #20]
    661c:	4b29      	ldr	r3, [pc, #164]	; (66c4 <_sercom_i2c_send_address+0xf4>)
    661e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6620:	693b      	ldr	r3, [r7, #16]
    6622:	881b      	ldrh	r3, [r3, #0]
    6624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6628:	2b00      	cmp	r3, #0
    662a:	d022      	beq.n	6672 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    662c:	693b      	ldr	r3, [r7, #16]
    662e:	885b      	ldrh	r3, [r3, #2]
    6630:	b29b      	uxth	r3, r3
    6632:	f003 0301 	and.w	r3, r3, #1
    6636:	2b00      	cmp	r3, #0
    6638:	d007      	beq.n	664a <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    663a:	693b      	ldr	r3, [r7, #16]
    663c:	885b      	ldrh	r3, [r3, #2]
    663e:	b29b      	uxth	r3, r3
    6640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6644:	b29a      	uxth	r2, r3
    6646:	693b      	ldr	r3, [r7, #16]
    6648:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    664a:	693b      	ldr	r3, [r7, #16]
    664c:	881b      	ldrh	r3, [r3, #0]
    664e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6650:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6654:	401c      	ands	r4, r3
    6656:	6978      	ldr	r0, [r7, #20]
    6658:	4b1b      	ldr	r3, [pc, #108]	; (66c8 <_sercom_i2c_send_address+0xf8>)
    665a:	4798      	blx	r3
    665c:	4603      	mov	r3, r0
    665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6662:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6668:	4619      	mov	r1, r3
    666a:	6978      	ldr	r0, [r7, #20]
    666c:	4b17      	ldr	r3, [pc, #92]	; (66cc <_sercom_i2c_send_address+0xfc>)
    666e:	4798      	blx	r3
    6670:	e01a      	b.n	66a8 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6672:	693b      	ldr	r3, [r7, #16]
    6674:	881b      	ldrh	r3, [r3, #0]
    6676:	005b      	lsls	r3, r3, #1
    6678:	b2db      	uxtb	r3, r3
    667a:	693a      	ldr	r2, [r7, #16]
    667c:	8852      	ldrh	r2, [r2, #2]
    667e:	b292      	uxth	r2, r2
    6680:	f002 0201 	and.w	r2, r2, #1
    6684:	2a00      	cmp	r2, #0
    6686:	bf14      	ite	ne
    6688:	2201      	movne	r2, #1
    668a:	2200      	moveq	r2, #0
    668c:	b2d2      	uxtb	r2, r2
    668e:	4313      	orrs	r3, r2
    6690:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6692:	6978      	ldr	r0, [r7, #20]
    6694:	4b0c      	ldr	r3, [pc, #48]	; (66c8 <_sercom_i2c_send_address+0xf8>)
    6696:	4798      	blx	r3
    6698:	4603      	mov	r3, r0
    669a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    669e:	4323      	orrs	r3, r4
    66a0:	4619      	mov	r1, r3
    66a2:	6978      	ldr	r0, [r7, #20]
    66a4:	4b09      	ldr	r3, [pc, #36]	; (66cc <_sercom_i2c_send_address+0xfc>)
    66a6:	4798      	blx	r3
	}

	return ERR_NONE;
    66a8:	2300      	movs	r3, #0
}
    66aa:	4618      	mov	r0, r3
    66ac:	371c      	adds	r7, #28
    66ae:	46bd      	mov	sp, r7
    66b0:	bd90      	pop	{r4, r7, pc}
    66b2:	bf00      	nop
    66b4:	00005c61 	.word	0x00005c61
    66b8:	0000f158 	.word	0x0000f158
    66bc:	00003511 	.word	0x00003511
    66c0:	00005de9 	.word	0x00005de9
    66c4:	00005e11 	.word	0x00005e11
    66c8:	00005f51 	.word	0x00005f51
    66cc:	00005f2d 	.word	0x00005f2d

000066d0 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b084      	sub	sp, #16
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	2b00      	cmp	r3, #0
    66de:	bf14      	ite	ne
    66e0:	2301      	movne	r3, #1
    66e2:	2300      	moveq	r3, #0
    66e4:	b2db      	uxtb	r3, r3
    66e6:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    66ea:	492a      	ldr	r1, [pc, #168]	; (6794 <_i2c_m_async_transfer+0xc4>)
    66ec:	4618      	mov	r0, r3
    66ee:	4b2a      	ldr	r3, [pc, #168]	; (6798 <_i2c_m_async_transfer+0xc8>)
    66f0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	691b      	ldr	r3, [r3, #16]
    66f6:	2b00      	cmp	r3, #0
    66f8:	bf14      	ite	ne
    66fa:	2301      	movne	r3, #1
    66fc:	2300      	moveq	r3, #0
    66fe:	b2db      	uxtb	r3, r3
    6700:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6704:	4923      	ldr	r1, [pc, #140]	; (6794 <_i2c_m_async_transfer+0xc4>)
    6706:	4618      	mov	r0, r3
    6708:	4b23      	ldr	r3, [pc, #140]	; (6798 <_i2c_m_async_transfer+0xc8>)
    670a:	4798      	blx	r3
	ASSERT(msg);
    670c:	683b      	ldr	r3, [r7, #0]
    670e:	2b00      	cmp	r3, #0
    6710:	bf14      	ite	ne
    6712:	2301      	movne	r3, #1
    6714:	2300      	moveq	r3, #0
    6716:	b2db      	uxtb	r3, r3
    6718:	f240 42ea 	movw	r2, #1258	; 0x4ea
    671c:	491d      	ldr	r1, [pc, #116]	; (6794 <_i2c_m_async_transfer+0xc4>)
    671e:	4618      	mov	r0, r3
    6720:	4b1d      	ldr	r3, [pc, #116]	; (6798 <_i2c_m_async_transfer+0xc8>)
    6722:	4798      	blx	r3

	if (msg->len == 0) {
    6724:	683b      	ldr	r3, [r7, #0]
    6726:	685b      	ldr	r3, [r3, #4]
    6728:	2b00      	cmp	r3, #0
    672a:	d101      	bne.n	6730 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    672c:	2300      	movs	r3, #0
    672e:	e02d      	b.n	678c <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	885b      	ldrh	r3, [r3, #2]
    6734:	b29b      	uxth	r3, r3
    6736:	f403 7380 	and.w	r3, r3, #256	; 0x100
    673a:	2b00      	cmp	r3, #0
    673c:	d002      	beq.n	6744 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    673e:	f06f 0303 	mvn.w	r3, #3
    6742:	e023      	b.n	678c <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6744:	683b      	ldr	r3, [r7, #0]
    6746:	885b      	ldrh	r3, [r3, #2]
    6748:	b29b      	uxth	r3, r3
    674a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    674e:	b29a      	uxth	r2, r3
    6750:	683b      	ldr	r3, [r7, #0]
    6752:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	683a      	ldr	r2, [r7, #0]
    6758:	ca07      	ldmia	r2, {r0, r1, r2}
    675a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    675e:	687b      	ldr	r3, [r7, #4]
    6760:	691b      	ldr	r3, [r3, #16]
    6762:	4618      	mov	r0, r3
    6764:	4b0d      	ldr	r3, [pc, #52]	; (679c <_i2c_m_async_transfer+0xcc>)
    6766:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6768:	6878      	ldr	r0, [r7, #4]
    676a:	4b0d      	ldr	r3, [pc, #52]	; (67a0 <_i2c_m_async_transfer+0xd0>)
    676c:	4798      	blx	r3
    676e:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6770:	68fb      	ldr	r3, [r7, #12]
    6772:	2b00      	cmp	r3, #0
    6774:	d009      	beq.n	678a <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	885b      	ldrh	r3, [r3, #2]
    677a:	b29b      	uxth	r3, r3
    677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6780:	b29a      	uxth	r2, r3
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	805a      	strh	r2, [r3, #2]

		return ret;
    6786:	68fb      	ldr	r3, [r7, #12]
    6788:	e000      	b.n	678c <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    678a:	2300      	movs	r3, #0
}
    678c:	4618      	mov	r0, r3
    678e:	3710      	adds	r7, #16
    6790:	46bd      	mov	sp, r7
    6792:	bd80      	pop	{r7, pc}
    6794:	0000f158 	.word	0x0000f158
    6798:	00003511 	.word	0x00003511
    679c:	00005d99 	.word	0x00005d99
    67a0:	000065d1 	.word	0x000065d1

000067a4 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    67a4:	b480      	push	{r7}
    67a6:	b085      	sub	sp, #20
    67a8:	af00      	add	r7, sp, #0
    67aa:	60f8      	str	r0, [r7, #12]
    67ac:	460b      	mov	r3, r1
    67ae:	607a      	str	r2, [r7, #4]
    67b0:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    67b2:	7afb      	ldrb	r3, [r7, #11]
    67b4:	2b01      	cmp	r3, #1
    67b6:	d008      	beq.n	67ca <_i2c_m_async_register_callback+0x26>
    67b8:	2b02      	cmp	r3, #2
    67ba:	d00a      	beq.n	67d2 <_i2c_m_async_register_callback+0x2e>
    67bc:	2b00      	cmp	r3, #0
    67be:	d000      	beq.n	67c2 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    67c0:	e00b      	b.n	67da <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    67c2:	68fb      	ldr	r3, [r7, #12]
    67c4:	687a      	ldr	r2, [r7, #4]
    67c6:	615a      	str	r2, [r3, #20]
		break;
    67c8:	e007      	b.n	67da <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    67ca:	68fb      	ldr	r3, [r7, #12]
    67cc:	687a      	ldr	r2, [r7, #4]
    67ce:	619a      	str	r2, [r3, #24]
		break;
    67d0:	e003      	b.n	67da <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    67d2:	68fb      	ldr	r3, [r7, #12]
    67d4:	687a      	ldr	r2, [r7, #4]
    67d6:	61da      	str	r2, [r3, #28]
		break;
    67d8:	bf00      	nop
	}

	return ERR_NONE;
    67da:	2300      	movs	r3, #0
}
    67dc:	4618      	mov	r0, r3
    67de:	3714      	adds	r7, #20
    67e0:	46bd      	mov	sp, r7
    67e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    67e6:	4770      	bx	lr

000067e8 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	b082      	sub	sp, #8
    67ec:	af00      	add	r7, sp, #0
    67ee:	6078      	str	r0, [r7, #4]
    67f0:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    67f2:	687b      	ldr	r3, [r7, #4]
    67f4:	2b00      	cmp	r3, #0
    67f6:	bf14      	ite	ne
    67f8:	2301      	movne	r3, #1
    67fa:	2300      	moveq	r3, #0
    67fc:	b2db      	uxtb	r3, r3
    67fe:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6802:	4908      	ldr	r1, [pc, #32]	; (6824 <_i2c_m_sync_init+0x3c>)
    6804:	4618      	mov	r0, r3
    6806:	4b08      	ldr	r3, [pc, #32]	; (6828 <_i2c_m_sync_init+0x40>)
    6808:	4798      	blx	r3

	i2c_dev->hw = hw;
    680a:	687b      	ldr	r3, [r7, #4]
    680c:	683a      	ldr	r2, [r7, #0]
    680e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	6839      	ldr	r1, [r7, #0]
    6814:	4618      	mov	r0, r3
    6816:	4b05      	ldr	r3, [pc, #20]	; (682c <_i2c_m_sync_init+0x44>)
    6818:	4798      	blx	r3
    681a:	4603      	mov	r3, r0
}
    681c:	4618      	mov	r0, r3
    681e:	3708      	adds	r7, #8
    6820:	46bd      	mov	sp, r7
    6822:	bd80      	pop	{r7, pc}
    6824:	0000f158 	.word	0x0000f158
    6828:	00003511 	.word	0x00003511
    682c:	00006ba5 	.word	0x00006ba5

00006830 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6830:	b580      	push	{r7, lr}
    6832:	b082      	sub	sp, #8
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	2b00      	cmp	r3, #0
    683c:	bf14      	ite	ne
    683e:	2301      	movne	r3, #1
    6840:	2300      	moveq	r3, #0
    6842:	b2db      	uxtb	r3, r3
    6844:	f240 5265 	movw	r2, #1381	; 0x565
    6848:	4906      	ldr	r1, [pc, #24]	; (6864 <_i2c_m_sync_enable+0x34>)
    684a:	4618      	mov	r0, r3
    684c:	4b06      	ldr	r3, [pc, #24]	; (6868 <_i2c_m_sync_enable+0x38>)
    684e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	691b      	ldr	r3, [r3, #16]
    6854:	4618      	mov	r0, r3
    6856:	4b05      	ldr	r3, [pc, #20]	; (686c <_i2c_m_sync_enable+0x3c>)
    6858:	4798      	blx	r3
    685a:	4603      	mov	r3, r0
}
    685c:	4618      	mov	r0, r3
    685e:	3708      	adds	r7, #8
    6860:	46bd      	mov	sp, r7
    6862:	bd80      	pop	{r7, pc}
    6864:	0000f158 	.word	0x0000f158
    6868:	00003511 	.word	0x00003511
    686c:	00006b19 	.word	0x00006b19

00006870 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6870:	b580      	push	{r7, lr}
    6872:	b084      	sub	sp, #16
    6874:	af00      	add	r7, sp, #0
    6876:	6078      	str	r0, [r7, #4]
    6878:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    687a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    687e:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	691b      	ldr	r3, [r3, #16]
    6884:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6886:	68b8      	ldr	r0, [r7, #8]
    6888:	4b0f      	ldr	r3, [pc, #60]	; (68c8 <_sercom_i2c_sync_wait_bus+0x58>)
    688a:	4798      	blx	r3
    688c:	4603      	mov	r3, r0
    688e:	461a      	mov	r2, r3
    6890:	683b      	ldr	r3, [r7, #0]
    6892:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6894:	68fb      	ldr	r3, [r7, #12]
    6896:	1e5a      	subs	r2, r3, #1
    6898:	60fa      	str	r2, [r7, #12]
    689a:	2b00      	cmp	r3, #0
    689c:	d102      	bne.n	68a4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    689e:	f06f 0304 	mvn.w	r3, #4
    68a2:	e00c      	b.n	68be <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    68a4:	683b      	ldr	r3, [r7, #0]
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	f003 0301 	and.w	r3, r3, #1
    68ac:	2b00      	cmp	r3, #0
    68ae:	d105      	bne.n	68bc <_sercom_i2c_sync_wait_bus+0x4c>
    68b0:	683b      	ldr	r3, [r7, #0]
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	f003 0302 	and.w	r3, r3, #2
    68b8:	2b00      	cmp	r3, #0
    68ba:	d0e4      	beq.n	6886 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    68bc:	2300      	movs	r3, #0
}
    68be:	4618      	mov	r0, r3
    68c0:	3710      	adds	r7, #16
    68c2:	46bd      	mov	sp, r7
    68c4:	bd80      	pop	{r7, pc}
    68c6:	bf00      	nop
    68c8:	00005b79 	.word	0x00005b79

000068cc <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    68cc:	b590      	push	{r4, r7, lr}
    68ce:	b087      	sub	sp, #28
    68d0:	af00      	add	r7, sp, #0
    68d2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	691b      	ldr	r3, [r3, #16]
    68d8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    68da:	687b      	ldr	r3, [r7, #4]
    68dc:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    68de:	6978      	ldr	r0, [r7, #20]
    68e0:	4b39      	ldr	r3, [pc, #228]	; (69c8 <_sercom_i2c_sync_send_address+0xfc>)
    68e2:	4798      	blx	r3
    68e4:	4603      	mov	r3, r0
    68e6:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	2b00      	cmp	r3, #0
    68ec:	bf14      	ite	ne
    68ee:	2301      	movne	r3, #1
    68f0:	2300      	moveq	r3, #0
    68f2:	b2db      	uxtb	r3, r3
    68f4:	f240 52d5 	movw	r2, #1493	; 0x5d5
    68f8:	4934      	ldr	r1, [pc, #208]	; (69cc <_sercom_i2c_sync_send_address+0x100>)
    68fa:	4618      	mov	r0, r3
    68fc:	4b34      	ldr	r3, [pc, #208]	; (69d0 <_sercom_i2c_sync_send_address+0x104>)
    68fe:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6900:	693b      	ldr	r3, [r7, #16]
    6902:	685b      	ldr	r3, [r3, #4]
    6904:	2b01      	cmp	r3, #1
    6906:	d106      	bne.n	6916 <_sercom_i2c_sync_send_address+0x4a>
    6908:	68fb      	ldr	r3, [r7, #12]
    690a:	2b00      	cmp	r3, #0
    690c:	d003      	beq.n	6916 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    690e:	6978      	ldr	r0, [r7, #20]
    6910:	4b30      	ldr	r3, [pc, #192]	; (69d4 <_sercom_i2c_sync_send_address+0x108>)
    6912:	4798      	blx	r3
    6914:	e002      	b.n	691c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6916:	6978      	ldr	r0, [r7, #20]
    6918:	4b2f      	ldr	r3, [pc, #188]	; (69d8 <_sercom_i2c_sync_send_address+0x10c>)
    691a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    691c:	693b      	ldr	r3, [r7, #16]
    691e:	881b      	ldrh	r3, [r3, #0]
    6920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6924:	2b00      	cmp	r3, #0
    6926:	d022      	beq.n	696e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6928:	693b      	ldr	r3, [r7, #16]
    692a:	885b      	ldrh	r3, [r3, #2]
    692c:	b29b      	uxth	r3, r3
    692e:	f003 0301 	and.w	r3, r3, #1
    6932:	2b00      	cmp	r3, #0
    6934:	d007      	beq.n	6946 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6936:	693b      	ldr	r3, [r7, #16]
    6938:	885b      	ldrh	r3, [r3, #2]
    693a:	b29b      	uxth	r3, r3
    693c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6940:	b29a      	uxth	r2, r3
    6942:	693b      	ldr	r3, [r7, #16]
    6944:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6946:	693b      	ldr	r3, [r7, #16]
    6948:	881b      	ldrh	r3, [r3, #0]
    694a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    694c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6950:	401c      	ands	r4, r3
    6952:	6978      	ldr	r0, [r7, #20]
    6954:	4b21      	ldr	r3, [pc, #132]	; (69dc <_sercom_i2c_sync_send_address+0x110>)
    6956:	4798      	blx	r3
    6958:	4603      	mov	r3, r0
    695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    695e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6964:	4619      	mov	r1, r3
    6966:	6978      	ldr	r0, [r7, #20]
    6968:	4b1d      	ldr	r3, [pc, #116]	; (69e0 <_sercom_i2c_sync_send_address+0x114>)
    696a:	4798      	blx	r3
    696c:	e01a      	b.n	69a4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    696e:	693b      	ldr	r3, [r7, #16]
    6970:	881b      	ldrh	r3, [r3, #0]
    6972:	005b      	lsls	r3, r3, #1
    6974:	b2db      	uxtb	r3, r3
    6976:	693a      	ldr	r2, [r7, #16]
    6978:	8852      	ldrh	r2, [r2, #2]
    697a:	b292      	uxth	r2, r2
    697c:	f002 0201 	and.w	r2, r2, #1
    6980:	2a00      	cmp	r2, #0
    6982:	bf14      	ite	ne
    6984:	2201      	movne	r2, #1
    6986:	2200      	moveq	r2, #0
    6988:	b2d2      	uxtb	r2, r2
    698a:	4313      	orrs	r3, r2
    698c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    698e:	6978      	ldr	r0, [r7, #20]
    6990:	4b12      	ldr	r3, [pc, #72]	; (69dc <_sercom_i2c_sync_send_address+0x110>)
    6992:	4798      	blx	r3
    6994:	4603      	mov	r3, r0
    6996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    699a:	4323      	orrs	r3, r4
    699c:	4619      	mov	r1, r3
    699e:	6978      	ldr	r0, [r7, #20]
    69a0:	4b0f      	ldr	r3, [pc, #60]	; (69e0 <_sercom_i2c_sync_send_address+0x114>)
    69a2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    69a4:	f107 0308 	add.w	r3, r7, #8
    69a8:	4619      	mov	r1, r3
    69aa:	6878      	ldr	r0, [r7, #4]
    69ac:	4b0d      	ldr	r3, [pc, #52]	; (69e4 <_sercom_i2c_sync_send_address+0x118>)
    69ae:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    69b0:	68bb      	ldr	r3, [r7, #8]
    69b2:	693a      	ldr	r2, [r7, #16]
    69b4:	4619      	mov	r1, r3
    69b6:	6978      	ldr	r0, [r7, #20]
    69b8:	4b0b      	ldr	r3, [pc, #44]	; (69e8 <_sercom_i2c_sync_send_address+0x11c>)
    69ba:	4798      	blx	r3
    69bc:	4603      	mov	r3, r0
}
    69be:	4618      	mov	r0, r3
    69c0:	371c      	adds	r7, #28
    69c2:	46bd      	mov	sp, r7
    69c4:	bd90      	pop	{r4, r7, pc}
    69c6:	bf00      	nop
    69c8:	00005c61 	.word	0x00005c61
    69cc:	0000f158 	.word	0x0000f158
    69d0:	00003511 	.word	0x00003511
    69d4:	00005de9 	.word	0x00005de9
    69d8:	00005e11 	.word	0x00005e11
    69dc:	00005f51 	.word	0x00005f51
    69e0:	00005f2d 	.word	0x00005f2d
    69e4:	00006871 	.word	0x00006871
    69e8:	000061c9 	.word	0x000061c9

000069ec <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	b086      	sub	sp, #24
    69f0:	af00      	add	r7, sp, #0
    69f2:	6078      	str	r0, [r7, #4]
    69f4:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    69f6:	687b      	ldr	r3, [r7, #4]
    69f8:	691b      	ldr	r3, [r3, #16]
    69fa:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	2b00      	cmp	r3, #0
    6a00:	bf14      	ite	ne
    6a02:	2301      	movne	r3, #1
    6a04:	2300      	moveq	r3, #0
    6a06:	b2db      	uxtb	r3, r3
    6a08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    6a0c:	493b      	ldr	r1, [pc, #236]	; (6afc <_i2c_m_sync_transfer+0x110>)
    6a0e:	4618      	mov	r0, r3
    6a10:	4b3b      	ldr	r3, [pc, #236]	; (6b00 <_i2c_m_sync_transfer+0x114>)
    6a12:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	691b      	ldr	r3, [r3, #16]
    6a18:	2b00      	cmp	r3, #0
    6a1a:	bf14      	ite	ne
    6a1c:	2301      	movne	r3, #1
    6a1e:	2300      	moveq	r3, #0
    6a20:	b2db      	uxtb	r3, r3
    6a22:	f240 6201 	movw	r2, #1537	; 0x601
    6a26:	4935      	ldr	r1, [pc, #212]	; (6afc <_i2c_m_sync_transfer+0x110>)
    6a28:	4618      	mov	r0, r3
    6a2a:	4b35      	ldr	r3, [pc, #212]	; (6b00 <_i2c_m_sync_transfer+0x114>)
    6a2c:	4798      	blx	r3
	ASSERT(msg);
    6a2e:	683b      	ldr	r3, [r7, #0]
    6a30:	2b00      	cmp	r3, #0
    6a32:	bf14      	ite	ne
    6a34:	2301      	movne	r3, #1
    6a36:	2300      	moveq	r3, #0
    6a38:	b2db      	uxtb	r3, r3
    6a3a:	f240 6202 	movw	r2, #1538	; 0x602
    6a3e:	492f      	ldr	r1, [pc, #188]	; (6afc <_i2c_m_sync_transfer+0x110>)
    6a40:	4618      	mov	r0, r3
    6a42:	4b2f      	ldr	r3, [pc, #188]	; (6b00 <_i2c_m_sync_transfer+0x114>)
    6a44:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	885b      	ldrh	r3, [r3, #2]
    6a4a:	b29b      	uxth	r3, r3
    6a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a50:	2b00      	cmp	r3, #0
    6a52:	d002      	beq.n	6a5a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6a54:	f06f 0305 	mvn.w	r3, #5
    6a58:	e04c      	b.n	6af4 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6a5a:	683b      	ldr	r3, [r7, #0]
    6a5c:	885b      	ldrh	r3, [r3, #2]
    6a5e:	b29b      	uxth	r3, r3
    6a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a64:	b29a      	uxth	r2, r3
    6a66:	683b      	ldr	r3, [r7, #0]
    6a68:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6a6a:	687b      	ldr	r3, [r7, #4]
    6a6c:	683a      	ldr	r2, [r7, #0]
    6a6e:	ca07      	ldmia	r2, {r0, r1, r2}
    6a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6a74:	6938      	ldr	r0, [r7, #16]
    6a76:	4b23      	ldr	r3, [pc, #140]	; (6b04 <_i2c_m_sync_transfer+0x118>)
    6a78:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6a7a:	6878      	ldr	r0, [r7, #4]
    6a7c:	4b22      	ldr	r3, [pc, #136]	; (6b08 <_i2c_m_sync_transfer+0x11c>)
    6a7e:	4798      	blx	r3
    6a80:	6178      	str	r0, [r7, #20]

	if (ret) {
    6a82:	697b      	ldr	r3, [r7, #20]
    6a84:	2b00      	cmp	r3, #0
    6a86:	d02d      	beq.n	6ae4 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	885b      	ldrh	r3, [r3, #2]
    6a8c:	b29b      	uxth	r3, r3
    6a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a92:	b29a      	uxth	r2, r3
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	805a      	strh	r2, [r3, #2]

		return ret;
    6a98:	697b      	ldr	r3, [r7, #20]
    6a9a:	e02b      	b.n	6af4 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6a9c:	f107 030c 	add.w	r3, r7, #12
    6aa0:	4619      	mov	r1, r3
    6aa2:	6878      	ldr	r0, [r7, #4]
    6aa4:	4b19      	ldr	r3, [pc, #100]	; (6b0c <_i2c_m_sync_transfer+0x120>)
    6aa6:	4798      	blx	r3
    6aa8:	6178      	str	r0, [r7, #20]

		if (ret) {
    6aaa:	697b      	ldr	r3, [r7, #20]
    6aac:	2b00      	cmp	r3, #0
    6aae:	d012      	beq.n	6ad6 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6ab0:	683b      	ldr	r3, [r7, #0]
    6ab2:	885b      	ldrh	r3, [r3, #2]
    6ab4:	b29b      	uxth	r3, r3
    6ab6:	b21b      	sxth	r3, r3
    6ab8:	2b00      	cmp	r3, #0
    6aba:	da02      	bge.n	6ac2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6abc:	6938      	ldr	r0, [r7, #16]
    6abe:	4b14      	ldr	r3, [pc, #80]	; (6b10 <_i2c_m_sync_transfer+0x124>)
    6ac0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6ac2:	687b      	ldr	r3, [r7, #4]
    6ac4:	885b      	ldrh	r3, [r3, #2]
    6ac6:	b29b      	uxth	r3, r3
    6ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6acc:	b29a      	uxth	r2, r3
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	805a      	strh	r2, [r3, #2]

			return ret;
    6ad2:	697b      	ldr	r3, [r7, #20]
    6ad4:	e00e      	b.n	6af4 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6ad6:	68fb      	ldr	r3, [r7, #12]
    6ad8:	687a      	ldr	r2, [r7, #4]
    6ada:	4619      	mov	r1, r3
    6adc:	6938      	ldr	r0, [r7, #16]
    6ade:	4b0d      	ldr	r3, [pc, #52]	; (6b14 <_i2c_m_sync_transfer+0x128>)
    6ae0:	4798      	blx	r3
    6ae2:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	885b      	ldrh	r3, [r3, #2]
    6ae8:	b29b      	uxth	r3, r3
    6aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6aee:	2b00      	cmp	r3, #0
    6af0:	d1d4      	bne.n	6a9c <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6af2:	697b      	ldr	r3, [r7, #20]
}
    6af4:	4618      	mov	r0, r3
    6af6:	3718      	adds	r7, #24
    6af8:	46bd      	mov	sp, r7
    6afa:	bd80      	pop	{r7, pc}
    6afc:	0000f158 	.word	0x0000f158
    6b00:	00003511 	.word	0x00003511
    6b04:	00005d99 	.word	0x00005d99
    6b08:	000068cd 	.word	0x000068cd
    6b0c:	00006871 	.word	0x00006871
    6b10:	000061ad 	.word	0x000061ad
    6b14:	000061c9 	.word	0x000061c9

00006b18 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	b084      	sub	sp, #16
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b24:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6b26:	2304      	movs	r3, #4
    6b28:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	bf14      	ite	ne
    6b30:	2301      	movne	r3, #1
    6b32:	2300      	moveq	r3, #0
    6b34:	b2db      	uxtb	r3, r3
    6b36:	f240 6235 	movw	r2, #1589	; 0x635
    6b3a:	4915      	ldr	r1, [pc, #84]	; (6b90 <_i2c_m_enable_implementation+0x78>)
    6b3c:	4618      	mov	r0, r3
    6b3e:	4b15      	ldr	r3, [pc, #84]	; (6b94 <_i2c_m_enable_implementation+0x7c>)
    6b40:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6b42:	6878      	ldr	r0, [r7, #4]
    6b44:	4b14      	ldr	r3, [pc, #80]	; (6b98 <_i2c_m_enable_implementation+0x80>)
    6b46:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b48:	e016      	b.n	6b78 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6b4a:	68fb      	ldr	r3, [r7, #12]
    6b4c:	3b01      	subs	r3, #1
    6b4e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6b50:	68fb      	ldr	r3, [r7, #12]
    6b52:	2b00      	cmp	r3, #0
    6b54:	dc10      	bgt.n	6b78 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6b56:	68bb      	ldr	r3, [r7, #8]
    6b58:	3b01      	subs	r3, #1
    6b5a:	60bb      	str	r3, [r7, #8]
    6b5c:	68bb      	ldr	r3, [r7, #8]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d007      	beq.n	6b72 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b66:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6b68:	2110      	movs	r1, #16
    6b6a:	6878      	ldr	r0, [r7, #4]
    6b6c:	4b0b      	ldr	r3, [pc, #44]	; (6b9c <_i2c_m_enable_implementation+0x84>)
    6b6e:	4798      	blx	r3
    6b70:	e002      	b.n	6b78 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6b72:	f06f 0305 	mvn.w	r3, #5
    6b76:	e006      	b.n	6b86 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b78:	6878      	ldr	r0, [r7, #4]
    6b7a:	4b09      	ldr	r3, [pc, #36]	; (6ba0 <_i2c_m_enable_implementation+0x88>)
    6b7c:	4798      	blx	r3
    6b7e:	4603      	mov	r3, r0
    6b80:	2b01      	cmp	r3, #1
    6b82:	d1e2      	bne.n	6b4a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6b84:	2300      	movs	r3, #0
}
    6b86:	4618      	mov	r0, r3
    6b88:	3710      	adds	r7, #16
    6b8a:	46bd      	mov	sp, r7
    6b8c:	bd80      	pop	{r7, pc}
    6b8e:	bf00      	nop
    6b90:	0000f158 	.word	0x0000f158
    6b94:	00003511 	.word	0x00003511
    6b98:	00005c11 	.word	0x00005c11
    6b9c:	00006095 	.word	0x00006095
    6ba0:	00006045 	.word	0x00006045

00006ba4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b084      	sub	sp, #16
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
    6bac:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6bae:	6838      	ldr	r0, [r7, #0]
    6bb0:	4b42      	ldr	r3, [pc, #264]	; (6cbc <_i2c_m_sync_init_impl+0x118>)
    6bb2:	4798      	blx	r3
    6bb4:	4603      	mov	r3, r0
    6bb6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6bb8:	2101      	movs	r1, #1
    6bba:	6838      	ldr	r0, [r7, #0]
    6bbc:	4b40      	ldr	r3, [pc, #256]	; (6cc0 <_i2c_m_sync_init_impl+0x11c>)
    6bbe:	4798      	blx	r3
    6bc0:	4603      	mov	r3, r0
    6bc2:	f083 0301 	eor.w	r3, r3, #1
    6bc6:	b2db      	uxtb	r3, r3
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d020      	beq.n	6c0e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6bcc:	7bfa      	ldrb	r2, [r7, #15]
    6bce:	493d      	ldr	r1, [pc, #244]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6bd0:	4613      	mov	r3, r2
    6bd2:	005b      	lsls	r3, r3, #1
    6bd4:	4413      	add	r3, r2
    6bd6:	00db      	lsls	r3, r3, #3
    6bd8:	440b      	add	r3, r1
    6bda:	3304      	adds	r3, #4
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	f003 031c 	and.w	r3, r3, #28
    6be2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6be4:	2102      	movs	r1, #2
    6be6:	6838      	ldr	r0, [r7, #0]
    6be8:	4b37      	ldr	r3, [pc, #220]	; (6cc8 <_i2c_m_sync_init_impl+0x124>)
    6bea:	4798      	blx	r3
    6bec:	4603      	mov	r3, r0
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d006      	beq.n	6c00 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6bf2:	6838      	ldr	r0, [r7, #0]
    6bf4:	4b35      	ldr	r3, [pc, #212]	; (6ccc <_i2c_m_sync_init_impl+0x128>)
    6bf6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6bf8:	2102      	movs	r1, #2
    6bfa:	6838      	ldr	r0, [r7, #0]
    6bfc:	4b34      	ldr	r3, [pc, #208]	; (6cd0 <_i2c_m_sync_init_impl+0x12c>)
    6bfe:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6c00:	68bb      	ldr	r3, [r7, #8]
    6c02:	f043 0301 	orr.w	r3, r3, #1
    6c06:	4619      	mov	r1, r3
    6c08:	6838      	ldr	r0, [r7, #0]
    6c0a:	4b32      	ldr	r3, [pc, #200]	; (6cd4 <_i2c_m_sync_init_impl+0x130>)
    6c0c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6c0e:	2101      	movs	r1, #1
    6c10:	6838      	ldr	r0, [r7, #0]
    6c12:	4b2f      	ldr	r3, [pc, #188]	; (6cd0 <_i2c_m_sync_init_impl+0x12c>)
    6c14:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6c16:	7bfa      	ldrb	r2, [r7, #15]
    6c18:	492a      	ldr	r1, [pc, #168]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6c1a:	4613      	mov	r3, r2
    6c1c:	005b      	lsls	r3, r3, #1
    6c1e:	4413      	add	r3, r2
    6c20:	00db      	lsls	r3, r3, #3
    6c22:	440b      	add	r3, r1
    6c24:	3304      	adds	r3, #4
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	4619      	mov	r1, r3
    6c2a:	6838      	ldr	r0, [r7, #0]
    6c2c:	4b29      	ldr	r3, [pc, #164]	; (6cd4 <_i2c_m_sync_init_impl+0x130>)
    6c2e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6c30:	7bfa      	ldrb	r2, [r7, #15]
    6c32:	4924      	ldr	r1, [pc, #144]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6c34:	4613      	mov	r3, r2
    6c36:	005b      	lsls	r3, r3, #1
    6c38:	4413      	add	r3, r2
    6c3a:	00db      	lsls	r3, r3, #3
    6c3c:	440b      	add	r3, r1
    6c3e:	3308      	adds	r3, #8
    6c40:	681b      	ldr	r3, [r3, #0]
    6c42:	4619      	mov	r1, r3
    6c44:	6838      	ldr	r0, [r7, #0]
    6c46:	4b24      	ldr	r3, [pc, #144]	; (6cd8 <_i2c_m_sync_init_impl+0x134>)
    6c48:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6c4a:	7bfa      	ldrb	r2, [r7, #15]
    6c4c:	491d      	ldr	r1, [pc, #116]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6c4e:	4613      	mov	r3, r2
    6c50:	005b      	lsls	r3, r3, #1
    6c52:	4413      	add	r3, r2
    6c54:	00db      	lsls	r3, r3, #3
    6c56:	440b      	add	r3, r1
    6c58:	330c      	adds	r3, #12
    6c5a:	681b      	ldr	r3, [r3, #0]
    6c5c:	4619      	mov	r1, r3
    6c5e:	6838      	ldr	r0, [r7, #0]
    6c60:	4b1e      	ldr	r3, [pc, #120]	; (6cdc <_i2c_m_sync_init_impl+0x138>)
    6c62:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6c64:	7bfa      	ldrb	r2, [r7, #15]
    6c66:	4917      	ldr	r1, [pc, #92]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6c68:	4613      	mov	r3, r2
    6c6a:	005b      	lsls	r3, r3, #1
    6c6c:	4413      	add	r3, r2
    6c6e:	00db      	lsls	r3, r3, #3
    6c70:	440b      	add	r3, r1
    6c72:	3304      	adds	r3, #4
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	0e1b      	lsrs	r3, r3, #24
    6c78:	b29b      	uxth	r3, r3
    6c7a:	f003 0303 	and.w	r3, r3, #3
    6c7e:	b29a      	uxth	r2, r3
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	899b      	ldrh	r3, [r3, #12]
    6c88:	2b01      	cmp	r3, #1
    6c8a:	bf8c      	ite	hi
    6c8c:	2301      	movhi	r3, #1
    6c8e:	2300      	movls	r3, #0
    6c90:	b2db      	uxtb	r3, r3
    6c92:	4619      	mov	r1, r3
    6c94:	6838      	ldr	r0, [r7, #0]
    6c96:	4b12      	ldr	r3, [pc, #72]	; (6ce0 <_i2c_m_sync_init_impl+0x13c>)
    6c98:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6c9a:	7bfa      	ldrb	r2, [r7, #15]
    6c9c:	4909      	ldr	r1, [pc, #36]	; (6cc4 <_i2c_m_sync_init_impl+0x120>)
    6c9e:	4613      	mov	r3, r2
    6ca0:	005b      	lsls	r3, r3, #1
    6ca2:	4413      	add	r3, r2
    6ca4:	00db      	lsls	r3, r3, #3
    6ca6:	440b      	add	r3, r1
    6ca8:	3312      	adds	r3, #18
    6caa:	881a      	ldrh	r2, [r3, #0]
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6cb0:	2300      	movs	r3, #0
}
    6cb2:	4618      	mov	r0, r3
    6cb4:	3710      	adds	r7, #16
    6cb6:	46bd      	mov	sp, r7
    6cb8:	bd80      	pop	{r7, pc}
    6cba:	bf00      	nop
    6cbc:	00006145 	.word	0x00006145
    6cc0:	00005ad1 	.word	0x00005ad1
    6cc4:	20000018 	.word	0x20000018
    6cc8:	00005c91 	.word	0x00005c91
    6ccc:	00005c39 	.word	0x00005c39
    6cd0:	00005aad 	.word	0x00005aad
    6cd4:	00005cc1 	.word	0x00005cc1
    6cd8:	00005e69 	.word	0x00005e69
    6cdc:	00005eb1 	.word	0x00005eb1
    6ce0:	00005eed 	.word	0x00005eed

00006ce4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6ce4:	b580      	push	{r7, lr}
    6ce6:	b082      	sub	sp, #8
    6ce8:	af00      	add	r7, sp, #0
    6cea:	6078      	str	r0, [r7, #4]
    6cec:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d004      	beq.n	6cfe <_spi_load_regs_master+0x1a>
    6cf4:	683b      	ldr	r3, [r7, #0]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d001      	beq.n	6cfe <_spi_load_regs_master+0x1a>
    6cfa:	2301      	movs	r3, #1
    6cfc:	e000      	b.n	6d00 <_spi_load_regs_master+0x1c>
    6cfe:	2300      	movs	r3, #0
    6d00:	f003 0301 	and.w	r3, r3, #1
    6d04:	b2db      	uxtb	r3, r3
    6d06:	f640 1239 	movw	r2, #2361	; 0x939
    6d0a:	4915      	ldr	r1, [pc, #84]	; (6d60 <_spi_load_regs_master+0x7c>)
    6d0c:	4618      	mov	r0, r3
    6d0e:	4b15      	ldr	r3, [pc, #84]	; (6d64 <_spi_load_regs_master+0x80>)
    6d10:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d12:	683b      	ldr	r3, [r7, #0]
    6d14:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d1a:	f023 0301 	bic.w	r3, r3, #1
    6d1e:	4619      	mov	r1, r3
    6d20:	6878      	ldr	r0, [r7, #4]
    6d22:	4b11      	ldr	r3, [pc, #68]	; (6d68 <_spi_load_regs_master+0x84>)
    6d24:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6d26:	683b      	ldr	r3, [r7, #0]
    6d28:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6d2a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6d2e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d36:	4619      	mov	r1, r3
    6d38:	6878      	ldr	r0, [r7, #4]
    6d3a:	4b0c      	ldr	r3, [pc, #48]	; (6d6c <_spi_load_regs_master+0x88>)
    6d3c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d3e:	683b      	ldr	r3, [r7, #0]
    6d40:	7b1b      	ldrb	r3, [r3, #12]
    6d42:	4619      	mov	r1, r3
    6d44:	6878      	ldr	r0, [r7, #4]
    6d46:	4b0a      	ldr	r3, [pc, #40]	; (6d70 <_spi_load_regs_master+0x8c>)
    6d48:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d4a:	683b      	ldr	r3, [r7, #0]
    6d4c:	7b5b      	ldrb	r3, [r3, #13]
    6d4e:	4619      	mov	r1, r3
    6d50:	6878      	ldr	r0, [r7, #4]
    6d52:	4b08      	ldr	r3, [pc, #32]	; (6d74 <_spi_load_regs_master+0x90>)
    6d54:	4798      	blx	r3
}
    6d56:	bf00      	nop
    6d58:	3708      	adds	r7, #8
    6d5a:	46bd      	mov	sp, r7
    6d5c:	bd80      	pop	{r7, pc}
    6d5e:	bf00      	nop
    6d60:	0000f158 	.word	0x0000f158
    6d64:	00003511 	.word	0x00003511
    6d68:	00005d75 	.word	0x00005d75
    6d6c:	00005e8d 	.word	0x00005e8d
    6d70:	00005ecd 	.word	0x00005ecd
    6d74:	00006005 	.word	0x00006005

00006d78 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b082      	sub	sp, #8
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
    6d80:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d004      	beq.n	6d92 <_spi_load_regs_slave+0x1a>
    6d88:	683b      	ldr	r3, [r7, #0]
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d001      	beq.n	6d92 <_spi_load_regs_slave+0x1a>
    6d8e:	2301      	movs	r3, #1
    6d90:	e000      	b.n	6d94 <_spi_load_regs_slave+0x1c>
    6d92:	2300      	movs	r3, #0
    6d94:	f003 0301 	and.w	r3, r3, #1
    6d98:	b2db      	uxtb	r3, r3
    6d9a:	f640 124d 	movw	r2, #2381	; 0x94d
    6d9e:	491a      	ldr	r1, [pc, #104]	; (6e08 <_spi_load_regs_slave+0x90>)
    6da0:	4618      	mov	r0, r3
    6da2:	4b1a      	ldr	r3, [pc, #104]	; (6e0c <_spi_load_regs_slave+0x94>)
    6da4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6da6:	683b      	ldr	r3, [r7, #0]
    6da8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6daa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6dae:	f023 0301 	bic.w	r3, r3, #1
    6db2:	4619      	mov	r1, r3
    6db4:	6878      	ldr	r0, [r7, #4]
    6db6:	4b16      	ldr	r3, [pc, #88]	; (6e10 <_spi_load_regs_slave+0x98>)
    6db8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6dba:	683b      	ldr	r3, [r7, #0]
    6dbc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6dbe:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6dc2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6dca:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6dce:	4619      	mov	r1, r3
    6dd0:	6878      	ldr	r0, [r7, #4]
    6dd2:	4b10      	ldr	r3, [pc, #64]	; (6e14 <_spi_load_regs_slave+0x9c>)
    6dd4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6dd6:	683b      	ldr	r3, [r7, #0]
    6dd8:	689b      	ldr	r3, [r3, #8]
    6dda:	4619      	mov	r1, r3
    6ddc:	6878      	ldr	r0, [r7, #4]
    6dde:	4b0e      	ldr	r3, [pc, #56]	; (6e18 <_spi_load_regs_slave+0xa0>)
    6de0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6de2:	683b      	ldr	r3, [r7, #0]
    6de4:	7b5b      	ldrb	r3, [r3, #13]
    6de6:	4619      	mov	r1, r3
    6de8:	6878      	ldr	r0, [r7, #4]
    6dea:	4b0c      	ldr	r3, [pc, #48]	; (6e1c <_spi_load_regs_slave+0xa4>)
    6dec:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6dee:	bf00      	nop
    6df0:	f04f 31ff 	mov.w	r1, #4294967295
    6df4:	6878      	ldr	r0, [r7, #4]
    6df6:	4b0a      	ldr	r3, [pc, #40]	; (6e20 <_spi_load_regs_slave+0xa8>)
    6df8:	4798      	blx	r3
    6dfa:	4603      	mov	r3, r0
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d1f7      	bne.n	6df0 <_spi_load_regs_slave+0x78>
		;
}
    6e00:	bf00      	nop
    6e02:	3708      	adds	r7, #8
    6e04:	46bd      	mov	sp, r7
    6e06:	bd80      	pop	{r7, pc}
    6e08:	0000f158 	.word	0x0000f158
    6e0c:	00003511 	.word	0x00003511
    6e10:	00005d75 	.word	0x00005d75
    6e14:	00005e8d 	.word	0x00005e8d
    6e18:	00005f71 	.word	0x00005f71
    6e1c:	00006005 	.word	0x00006005
    6e20:	00005b1d 	.word	0x00005b1d

00006e24 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6e24:	b580      	push	{r7, lr}
    6e26:	b084      	sub	sp, #16
    6e28:	af00      	add	r7, sp, #0
    6e2a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	4618      	mov	r0, r3
    6e30:	4b11      	ldr	r3, [pc, #68]	; (6e78 <_spi_get_regs+0x54>)
    6e32:	4798      	blx	r3
    6e34:	4603      	mov	r3, r0
    6e36:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e38:	2300      	movs	r3, #0
    6e3a:	73fb      	strb	r3, [r7, #15]
    6e3c:	e014      	b.n	6e68 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6e3e:	7bfa      	ldrb	r2, [r7, #15]
    6e40:	490e      	ldr	r1, [pc, #56]	; (6e7c <_spi_get_regs+0x58>)
    6e42:	4613      	mov	r3, r2
    6e44:	011b      	lsls	r3, r3, #4
    6e46:	4413      	add	r3, r2
    6e48:	440b      	add	r3, r1
    6e4a:	3310      	adds	r3, #16
    6e4c:	781b      	ldrb	r3, [r3, #0]
    6e4e:	7bba      	ldrb	r2, [r7, #14]
    6e50:	429a      	cmp	r2, r3
    6e52:	d106      	bne.n	6e62 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6e54:	7bfa      	ldrb	r2, [r7, #15]
    6e56:	4613      	mov	r3, r2
    6e58:	011b      	lsls	r3, r3, #4
    6e5a:	4413      	add	r3, r2
    6e5c:	4a07      	ldr	r2, [pc, #28]	; (6e7c <_spi_get_regs+0x58>)
    6e5e:	4413      	add	r3, r2
    6e60:	e006      	b.n	6e70 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e62:	7bfb      	ldrb	r3, [r7, #15]
    6e64:	3301      	adds	r3, #1
    6e66:	73fb      	strb	r3, [r7, #15]
    6e68:	7bfb      	ldrb	r3, [r7, #15]
    6e6a:	2b01      	cmp	r3, #1
    6e6c:	d9e7      	bls.n	6e3e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6e6e:	2300      	movs	r3, #0
}
    6e70:	4618      	mov	r0, r3
    6e72:	3710      	adds	r7, #16
    6e74:	46bd      	mov	sp, r7
    6e76:	bd80      	pop	{r7, pc}
    6e78:	000060bd 	.word	0x000060bd
    6e7c:	0000f194 	.word	0x0000f194

00006e80 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6e84:	4b03      	ldr	r3, [pc, #12]	; (6e94 <SERCOM7_0_Handler+0x14>)
    6e86:	681b      	ldr	r3, [r3, #0]
    6e88:	4618      	mov	r0, r3
    6e8a:	4b03      	ldr	r3, [pc, #12]	; (6e98 <SERCOM7_0_Handler+0x18>)
    6e8c:	4798      	blx	r3
}
    6e8e:	bf00      	nop
    6e90:	bd80      	pop	{r7, pc}
    6e92:	bf00      	nop
    6e94:	2000081c 	.word	0x2000081c
    6e98:	000063f9 	.word	0x000063f9

00006e9c <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6e9c:	b580      	push	{r7, lr}
    6e9e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ea0:	4b03      	ldr	r3, [pc, #12]	; (6eb0 <SERCOM7_1_Handler+0x14>)
    6ea2:	681b      	ldr	r3, [r3, #0]
    6ea4:	4618      	mov	r0, r3
    6ea6:	4b03      	ldr	r3, [pc, #12]	; (6eb4 <SERCOM7_1_Handler+0x18>)
    6ea8:	4798      	blx	r3
}
    6eaa:	bf00      	nop
    6eac:	bd80      	pop	{r7, pc}
    6eae:	bf00      	nop
    6eb0:	2000081c 	.word	0x2000081c
    6eb4:	000063f9 	.word	0x000063f9

00006eb8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6eb8:	b580      	push	{r7, lr}
    6eba:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ebc:	4b03      	ldr	r3, [pc, #12]	; (6ecc <SERCOM7_2_Handler+0x14>)
    6ebe:	681b      	ldr	r3, [r3, #0]
    6ec0:	4618      	mov	r0, r3
    6ec2:	4b03      	ldr	r3, [pc, #12]	; (6ed0 <SERCOM7_2_Handler+0x18>)
    6ec4:	4798      	blx	r3
}
    6ec6:	bf00      	nop
    6ec8:	bd80      	pop	{r7, pc}
    6eca:	bf00      	nop
    6ecc:	2000081c 	.word	0x2000081c
    6ed0:	000063f9 	.word	0x000063f9

00006ed4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ed8:	4b03      	ldr	r3, [pc, #12]	; (6ee8 <SERCOM7_3_Handler+0x14>)
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	4618      	mov	r0, r3
    6ede:	4b03      	ldr	r3, [pc, #12]	; (6eec <SERCOM7_3_Handler+0x18>)
    6ee0:	4798      	blx	r3
}
    6ee2:	bf00      	nop
    6ee4:	bd80      	pop	{r7, pc}
    6ee6:	bf00      	nop
    6ee8:	2000081c 	.word	0x2000081c
    6eec:	000063f9 	.word	0x000063f9

00006ef0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	b084      	sub	sp, #16
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	6078      	str	r0, [r7, #4]
    6ef8:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6efa:	683b      	ldr	r3, [r7, #0]
    6efc:	4618      	mov	r0, r3
    6efe:	4b35      	ldr	r3, [pc, #212]	; (6fd4 <_spi_m_sync_init+0xe4>)
    6f00:	4798      	blx	r3
    6f02:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d004      	beq.n	6f14 <_spi_m_sync_init+0x24>
    6f0a:	683b      	ldr	r3, [r7, #0]
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d001      	beq.n	6f14 <_spi_m_sync_init+0x24>
    6f10:	2301      	movs	r3, #1
    6f12:	e000      	b.n	6f16 <_spi_m_sync_init+0x26>
    6f14:	2300      	movs	r3, #0
    6f16:	f003 0301 	and.w	r3, r3, #1
    6f1a:	b2db      	uxtb	r3, r3
    6f1c:	f640 128c 	movw	r2, #2444	; 0x98c
    6f20:	492d      	ldr	r1, [pc, #180]	; (6fd8 <_spi_m_sync_init+0xe8>)
    6f22:	4618      	mov	r0, r3
    6f24:	4b2d      	ldr	r3, [pc, #180]	; (6fdc <_spi_m_sync_init+0xec>)
    6f26:	4798      	blx	r3

	if (regs == NULL) {
    6f28:	68fb      	ldr	r3, [r7, #12]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d102      	bne.n	6f34 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6f2e:	f06f 030c 	mvn.w	r3, #12
    6f32:	e04a      	b.n	6fca <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6f34:	2101      	movs	r1, #1
    6f36:	6838      	ldr	r0, [r7, #0]
    6f38:	4b29      	ldr	r3, [pc, #164]	; (6fe0 <_spi_m_sync_init+0xf0>)
    6f3a:	4798      	blx	r3
    6f3c:	4603      	mov	r3, r0
    6f3e:	f083 0301 	eor.w	r3, r3, #1
    6f42:	b2db      	uxtb	r3, r3
    6f44:	2b00      	cmp	r3, #0
    6f46:	d019      	beq.n	6f7c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6f48:	68fb      	ldr	r3, [r7, #12]
    6f4a:	681b      	ldr	r3, [r3, #0]
    6f4c:	f003 031c 	and.w	r3, r3, #28
    6f50:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6f52:	2102      	movs	r1, #2
    6f54:	6838      	ldr	r0, [r7, #0]
    6f56:	4b23      	ldr	r3, [pc, #140]	; (6fe4 <_spi_m_sync_init+0xf4>)
    6f58:	4798      	blx	r3
    6f5a:	4603      	mov	r3, r0
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d006      	beq.n	6f6e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6f60:	6838      	ldr	r0, [r7, #0]
    6f62:	4b21      	ldr	r3, [pc, #132]	; (6fe8 <_spi_m_sync_init+0xf8>)
    6f64:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6f66:	2102      	movs	r1, #2
    6f68:	6838      	ldr	r0, [r7, #0]
    6f6a:	4b20      	ldr	r3, [pc, #128]	; (6fec <_spi_m_sync_init+0xfc>)
    6f6c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6f6e:	68bb      	ldr	r3, [r7, #8]
    6f70:	f043 0301 	orr.w	r3, r3, #1
    6f74:	4619      	mov	r1, r3
    6f76:	6838      	ldr	r0, [r7, #0]
    6f78:	4b1d      	ldr	r3, [pc, #116]	; (6ff0 <_spi_m_sync_init+0x100>)
    6f7a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6f7c:	2101      	movs	r1, #1
    6f7e:	6838      	ldr	r0, [r7, #0]
    6f80:	4b1a      	ldr	r3, [pc, #104]	; (6fec <_spi_m_sync_init+0xfc>)
    6f82:	4798      	blx	r3

	dev->prvt = hw;
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	683a      	ldr	r2, [r7, #0]
    6f88:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6f8a:	68fb      	ldr	r3, [r7, #12]
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	f003 031c 	and.w	r3, r3, #28
    6f92:	2b08      	cmp	r3, #8
    6f94:	d104      	bne.n	6fa0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6f96:	68f9      	ldr	r1, [r7, #12]
    6f98:	6838      	ldr	r0, [r7, #0]
    6f9a:	4b16      	ldr	r3, [pc, #88]	; (6ff4 <_spi_m_sync_init+0x104>)
    6f9c:	4798      	blx	r3
    6f9e:	e003      	b.n	6fa8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6fa0:	68f9      	ldr	r1, [r7, #12]
    6fa2:	6838      	ldr	r0, [r7, #0]
    6fa4:	4b14      	ldr	r3, [pc, #80]	; (6ff8 <_spi_m_sync_init+0x108>)
    6fa6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6fa8:	68fb      	ldr	r3, [r7, #12]
    6faa:	685b      	ldr	r3, [r3, #4]
    6fac:	f003 0307 	and.w	r3, r3, #7
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d101      	bne.n	6fb8 <_spi_m_sync_init+0xc8>
    6fb4:	2201      	movs	r2, #1
    6fb6:	e000      	b.n	6fba <_spi_m_sync_init+0xca>
    6fb8:	2202      	movs	r2, #2
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	89db      	ldrh	r3, [r3, #14]
    6fc2:	b29a      	uxth	r2, r3
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6fc8:	2300      	movs	r3, #0
}
    6fca:	4618      	mov	r0, r3
    6fcc:	3710      	adds	r7, #16
    6fce:	46bd      	mov	sp, r7
    6fd0:	bd80      	pop	{r7, pc}
    6fd2:	bf00      	nop
    6fd4:	00006e25 	.word	0x00006e25
    6fd8:	0000f158 	.word	0x0000f158
    6fdc:	00003511 	.word	0x00003511
    6fe0:	00005b1d 	.word	0x00005b1d
    6fe4:	00005d45 	.word	0x00005d45
    6fe8:	00005d1d 	.word	0x00005d1d
    6fec:	00005af9 	.word	0x00005af9
    6ff0:	00005d75 	.word	0x00005d75
    6ff4:	00006d79 	.word	0x00006d79
    6ff8:	00006ce5 	.word	0x00006ce5

00006ffc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6ffc:	b580      	push	{r7, lr}
    6ffe:	b082      	sub	sp, #8
    7000:	af00      	add	r7, sp, #0
    7002:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7004:	bf00      	nop
    7006:	2103      	movs	r1, #3
    7008:	6878      	ldr	r0, [r7, #4]
    700a:	4b06      	ldr	r3, [pc, #24]	; (7024 <_spi_wait_bus_idle+0x28>)
    700c:	4798      	blx	r3
    700e:	4603      	mov	r3, r0
    7010:	2b00      	cmp	r3, #0
    7012:	d0f8      	beq.n	7006 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7014:	2103      	movs	r1, #3
    7016:	6878      	ldr	r0, [r7, #4]
    7018:	4b03      	ldr	r3, [pc, #12]	; (7028 <_spi_wait_bus_idle+0x2c>)
    701a:	4798      	blx	r3
}
    701c:	bf00      	nop
    701e:	3708      	adds	r7, #8
    7020:	46bd      	mov	sp, r7
    7022:	bd80      	pop	{r7, pc}
    7024:	00005bb1 	.word	0x00005bb1
    7028:	00005bf3 	.word	0x00005bf3

0000702c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    702c:	b580      	push	{r7, lr}
    702e:	b086      	sub	sp, #24
    7030:	af00      	add	r7, sp, #0
    7032:	60f8      	str	r0, [r7, #12]
    7034:	60b9      	str	r1, [r7, #8]
    7036:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7038:	68bb      	ldr	r3, [r7, #8]
    703a:	f003 0304 	and.w	r3, r3, #4
    703e:	2b00      	cmp	r3, #0
    7040:	d101      	bne.n	7046 <_spi_rx_check_and_receive+0x1a>
		return false;
    7042:	2300      	movs	r3, #0
    7044:	e022      	b.n	708c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7046:	68f8      	ldr	r0, [r7, #12]
    7048:	4b12      	ldr	r3, [pc, #72]	; (7094 <_spi_rx_check_and_receive+0x68>)
    704a:	4798      	blx	r3
    704c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	685b      	ldr	r3, [r3, #4]
    7052:	2b00      	cmp	r3, #0
    7054:	d014      	beq.n	7080 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	685b      	ldr	r3, [r3, #4]
    705a:	1c59      	adds	r1, r3, #1
    705c:	687a      	ldr	r2, [r7, #4]
    705e:	6051      	str	r1, [r2, #4]
    7060:	697a      	ldr	r2, [r7, #20]
    7062:	b2d2      	uxtb	r2, r2
    7064:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	7c1b      	ldrb	r3, [r3, #16]
    706a:	2b01      	cmp	r3, #1
    706c:	d908      	bls.n	7080 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	685b      	ldr	r3, [r3, #4]
    7072:	1c59      	adds	r1, r3, #1
    7074:	687a      	ldr	r2, [r7, #4]
    7076:	6051      	str	r1, [r2, #4]
    7078:	697a      	ldr	r2, [r7, #20]
    707a:	0a12      	lsrs	r2, r2, #8
    707c:	b2d2      	uxtb	r2, r2
    707e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	68db      	ldr	r3, [r3, #12]
    7084:	1c5a      	adds	r2, r3, #1
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	60da      	str	r2, [r3, #12]

	return true;
    708a:	2301      	movs	r3, #1
}
    708c:	4618      	mov	r0, r3
    708e:	3718      	adds	r7, #24
    7090:	46bd      	mov	sp, r7
    7092:	bd80      	pop	{r7, pc}
    7094:	00005fed 	.word	0x00005fed

00007098 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7098:	b580      	push	{r7, lr}
    709a:	b086      	sub	sp, #24
    709c:	af00      	add	r7, sp, #0
    709e:	60f8      	str	r0, [r7, #12]
    70a0:	60b9      	str	r1, [r7, #8]
    70a2:	607a      	str	r2, [r7, #4]
    70a4:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    70a6:	68bb      	ldr	r3, [r7, #8]
    70a8:	f003 0301 	and.w	r3, r3, #1
    70ac:	2b00      	cmp	r3, #0
    70ae:	d028      	beq.n	7102 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	681b      	ldr	r3, [r3, #0]
    70b4:	2b00      	cmp	r3, #0
    70b6:	d018      	beq.n	70ea <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    70b8:	687b      	ldr	r3, [r7, #4]
    70ba:	681b      	ldr	r3, [r3, #0]
    70bc:	1c59      	adds	r1, r3, #1
    70be:	687a      	ldr	r2, [r7, #4]
    70c0:	6011      	str	r1, [r2, #0]
    70c2:	781b      	ldrb	r3, [r3, #0]
    70c4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	7c1b      	ldrb	r3, [r3, #16]
    70ca:	2b01      	cmp	r3, #1
    70cc:	d90f      	bls.n	70ee <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    70ce:	687b      	ldr	r3, [r7, #4]
    70d0:	681b      	ldr	r3, [r3, #0]
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	021b      	lsls	r3, r3, #8
    70d6:	461a      	mov	r2, r3
    70d8:	697b      	ldr	r3, [r7, #20]
    70da:	4313      	orrs	r3, r2
    70dc:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	1c5a      	adds	r2, r3, #1
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	601a      	str	r2, [r3, #0]
    70e8:	e001      	b.n	70ee <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    70ea:	887b      	ldrh	r3, [r7, #2]
    70ec:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    70ee:	687b      	ldr	r3, [r7, #4]
    70f0:	689b      	ldr	r3, [r3, #8]
    70f2:	1c5a      	adds	r2, r3, #1
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    70f8:	6979      	ldr	r1, [r7, #20]
    70fa:	68f8      	ldr	r0, [r7, #12]
    70fc:	4b03      	ldr	r3, [pc, #12]	; (710c <_spi_tx_check_and_send+0x74>)
    70fe:	4798      	blx	r3
    7100:	e000      	b.n	7104 <_spi_tx_check_and_send+0x6c>
		return;
    7102:	bf00      	nop
}
    7104:	3718      	adds	r7, #24
    7106:	46bd      	mov	sp, r7
    7108:	bd80      	pop	{r7, pc}
    710a:	bf00      	nop
    710c:	00005fd1 	.word	0x00005fd1

00007110 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7110:	b580      	push	{r7, lr}
    7112:	b082      	sub	sp, #8
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
    7118:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    711a:	687b      	ldr	r3, [r7, #4]
    711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7120:	2b00      	cmp	r3, #0
    7122:	d00b      	beq.n	713c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7124:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7128:	6838      	ldr	r0, [r7, #0]
    712a:	4b07      	ldr	r3, [pc, #28]	; (7148 <_spi_err_check+0x38>)
    712c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    712e:	2180      	movs	r1, #128	; 0x80
    7130:	6838      	ldr	r0, [r7, #0]
    7132:	4b06      	ldr	r3, [pc, #24]	; (714c <_spi_err_check+0x3c>)
    7134:	4798      	blx	r3
		return ERR_OVERFLOW;
    7136:	f06f 0312 	mvn.w	r3, #18
    713a:	e000      	b.n	713e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    713c:	2300      	movs	r3, #0
}
    713e:	4618      	mov	r0, r3
    7140:	3708      	adds	r7, #8
    7142:	46bd      	mov	sp, r7
    7144:	bd80      	pop	{r7, pc}
    7146:	bf00      	nop
    7148:	00006025 	.word	0x00006025
    714c:	00005bf3 	.word	0x00005bf3

00007150 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7150:	b590      	push	{r4, r7, lr}
    7152:	b08b      	sub	sp, #44	; 0x2c
    7154:	af00      	add	r7, sp, #0
    7156:	6078      	str	r0, [r7, #4]
    7158:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	681b      	ldr	r3, [r3, #0]
    715e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7160:	2300      	movs	r3, #0
    7162:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7164:	683b      	ldr	r3, [r7, #0]
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	60bb      	str	r3, [r7, #8]
    716a:	683b      	ldr	r3, [r7, #0]
    716c:	685b      	ldr	r3, [r3, #4]
    716e:	60fb      	str	r3, [r7, #12]
    7170:	2300      	movs	r3, #0
    7172:	613b      	str	r3, [r7, #16]
    7174:	2300      	movs	r3, #0
    7176:	617b      	str	r3, [r7, #20]
    7178:	687b      	ldr	r3, [r7, #4]
    717a:	791b      	ldrb	r3, [r3, #4]
    717c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	2b00      	cmp	r3, #0
    7182:	d004      	beq.n	718e <_spi_m_sync_trans+0x3e>
    7184:	6a3b      	ldr	r3, [r7, #32]
    7186:	2b00      	cmp	r3, #0
    7188:	d001      	beq.n	718e <_spi_m_sync_trans+0x3e>
    718a:	2301      	movs	r3, #1
    718c:	e000      	b.n	7190 <_spi_m_sync_trans+0x40>
    718e:	2300      	movs	r3, #0
    7190:	f003 0301 	and.w	r3, r3, #1
    7194:	b2db      	uxtb	r3, r3
    7196:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    719a:	492b      	ldr	r1, [pc, #172]	; (7248 <_spi_m_sync_trans+0xf8>)
    719c:	4618      	mov	r0, r3
    719e:	4b2b      	ldr	r3, [pc, #172]	; (724c <_spi_m_sync_trans+0xfc>)
    71a0:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    71a2:	2107      	movs	r1, #7
    71a4:	6a38      	ldr	r0, [r7, #32]
    71a6:	4b2a      	ldr	r3, [pc, #168]	; (7250 <_spi_m_sync_trans+0x100>)
    71a8:	4798      	blx	r3
    71aa:	4603      	mov	r3, r0
    71ac:	2b00      	cmp	r3, #0
    71ae:	d002      	beq.n	71b6 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    71b0:	f06f 0303 	mvn.w	r3, #3
    71b4:	e043      	b.n	723e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    71b6:	6a38      	ldr	r0, [r7, #32]
    71b8:	4b26      	ldr	r3, [pc, #152]	; (7254 <_spi_m_sync_trans+0x104>)
    71ba:	4798      	blx	r3
    71bc:	4603      	mov	r3, r0
    71be:	f083 0301 	eor.w	r3, r3, #1
    71c2:	b2db      	uxtb	r3, r3
    71c4:	2b00      	cmp	r3, #0
    71c6:	d002      	beq.n	71ce <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    71c8:	f06f 0313 	mvn.w	r3, #19
    71cc:	e037      	b.n	723e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    71ce:	6a38      	ldr	r0, [r7, #32]
    71d0:	4b21      	ldr	r3, [pc, #132]	; (7258 <_spi_m_sync_trans+0x108>)
    71d2:	4798      	blx	r3
    71d4:	4603      	mov	r3, r0
    71d6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    71d8:	f107 0308 	add.w	r3, r7, #8
    71dc:	461a      	mov	r2, r3
    71de:	69f9      	ldr	r1, [r7, #28]
    71e0:	6a38      	ldr	r0, [r7, #32]
    71e2:	4b1e      	ldr	r3, [pc, #120]	; (725c <_spi_m_sync_trans+0x10c>)
    71e4:	4798      	blx	r3
    71e6:	4603      	mov	r3, r0
    71e8:	f083 0301 	eor.w	r3, r3, #1
    71ec:	b2db      	uxtb	r3, r3
    71ee:	2b00      	cmp	r3, #0
    71f0:	d00b      	beq.n	720a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    71f2:	697a      	ldr	r2, [r7, #20]
    71f4:	693b      	ldr	r3, [r7, #16]
    71f6:	429a      	cmp	r2, r3
    71f8:	d307      	bcc.n	720a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	88db      	ldrh	r3, [r3, #6]
    71fe:	f107 0208 	add.w	r2, r7, #8
    7202:	69f9      	ldr	r1, [r7, #28]
    7204:	6a38      	ldr	r0, [r7, #32]
    7206:	4c16      	ldr	r4, [pc, #88]	; (7260 <_spi_m_sync_trans+0x110>)
    7208:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    720a:	6a39      	ldr	r1, [r7, #32]
    720c:	69f8      	ldr	r0, [r7, #28]
    720e:	4b15      	ldr	r3, [pc, #84]	; (7264 <_spi_m_sync_trans+0x114>)
    7210:	4798      	blx	r3
    7212:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7216:	2b00      	cmp	r3, #0
    7218:	db0c      	blt.n	7234 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    721a:	693a      	ldr	r2, [r7, #16]
    721c:	683b      	ldr	r3, [r7, #0]
    721e:	689b      	ldr	r3, [r3, #8]
    7220:	429a      	cmp	r2, r3
    7222:	d3d4      	bcc.n	71ce <_spi_m_sync_trans+0x7e>
    7224:	697a      	ldr	r2, [r7, #20]
    7226:	683b      	ldr	r3, [r7, #0]
    7228:	689b      	ldr	r3, [r3, #8]
    722a:	429a      	cmp	r2, r3
    722c:	d3cf      	bcc.n	71ce <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    722e:	693b      	ldr	r3, [r7, #16]
    7230:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7232:	e000      	b.n	7236 <_spi_m_sync_trans+0xe6>
			break;
    7234:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7236:	6a38      	ldr	r0, [r7, #32]
    7238:	4b0b      	ldr	r3, [pc, #44]	; (7268 <_spi_m_sync_trans+0x118>)
    723a:	4798      	blx	r3

	return rc;
    723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    723e:	4618      	mov	r0, r3
    7240:	372c      	adds	r7, #44	; 0x2c
    7242:	46bd      	mov	sp, r7
    7244:	bd90      	pop	{r4, r7, pc}
    7246:	bf00      	nop
    7248:	0000f158 	.word	0x0000f158
    724c:	00003511 	.word	0x00003511
    7250:	00005b1d 	.word	0x00005b1d
    7254:	00005ce5 	.word	0x00005ce5
    7258:	00005bd9 	.word	0x00005bd9
    725c:	0000702d 	.word	0x0000702d
    7260:	00007099 	.word	0x00007099
    7264:	00007111 	.word	0x00007111
    7268:	00006ffd 	.word	0x00006ffd

0000726c <__NVIC_EnableIRQ>:
{
    726c:	b480      	push	{r7}
    726e:	b083      	sub	sp, #12
    7270:	af00      	add	r7, sp, #0
    7272:	4603      	mov	r3, r0
    7274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    727a:	2b00      	cmp	r3, #0
    727c:	db0b      	blt.n	7296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    727e:	4909      	ldr	r1, [pc, #36]	; (72a4 <__NVIC_EnableIRQ+0x38>)
    7280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7284:	095b      	lsrs	r3, r3, #5
    7286:	88fa      	ldrh	r2, [r7, #6]
    7288:	f002 021f 	and.w	r2, r2, #31
    728c:	2001      	movs	r0, #1
    728e:	fa00 f202 	lsl.w	r2, r0, r2
    7292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7296:	bf00      	nop
    7298:	370c      	adds	r7, #12
    729a:	46bd      	mov	sp, r7
    729c:	f85d 7b04 	ldr.w	r7, [sp], #4
    72a0:	4770      	bx	lr
    72a2:	bf00      	nop
    72a4:	e000e100 	.word	0xe000e100

000072a8 <__NVIC_DisableIRQ>:
{
    72a8:	b480      	push	{r7}
    72aa:	b083      	sub	sp, #12
    72ac:	af00      	add	r7, sp, #0
    72ae:	4603      	mov	r3, r0
    72b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72b6:	2b00      	cmp	r3, #0
    72b8:	db10      	blt.n	72dc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72ba:	490b      	ldr	r1, [pc, #44]	; (72e8 <__NVIC_DisableIRQ+0x40>)
    72bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72c0:	095b      	lsrs	r3, r3, #5
    72c2:	88fa      	ldrh	r2, [r7, #6]
    72c4:	f002 021f 	and.w	r2, r2, #31
    72c8:	2001      	movs	r0, #1
    72ca:	fa00 f202 	lsl.w	r2, r0, r2
    72ce:	3320      	adds	r3, #32
    72d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    72d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    72d8:	f3bf 8f6f 	isb	sy
}
    72dc:	bf00      	nop
    72de:	370c      	adds	r7, #12
    72e0:	46bd      	mov	sp, r7
    72e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e6:	4770      	bx	lr
    72e8:	e000e100 	.word	0xe000e100

000072ec <__NVIC_ClearPendingIRQ>:
{
    72ec:	b480      	push	{r7}
    72ee:	b083      	sub	sp, #12
    72f0:	af00      	add	r7, sp, #0
    72f2:	4603      	mov	r3, r0
    72f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    72f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    72fa:	2b00      	cmp	r3, #0
    72fc:	db0c      	blt.n	7318 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    72fe:	4909      	ldr	r1, [pc, #36]	; (7324 <__NVIC_ClearPendingIRQ+0x38>)
    7300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7304:	095b      	lsrs	r3, r3, #5
    7306:	88fa      	ldrh	r2, [r7, #6]
    7308:	f002 021f 	and.w	r2, r2, #31
    730c:	2001      	movs	r0, #1
    730e:	fa00 f202 	lsl.w	r2, r0, r2
    7312:	3360      	adds	r3, #96	; 0x60
    7314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7318:	bf00      	nop
    731a:	370c      	adds	r7, #12
    731c:	46bd      	mov	sp, r7
    731e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7322:	4770      	bx	lr
    7324:	e000e100 	.word	0xe000e100

00007328 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7328:	b480      	push	{r7}
    732a:	b083      	sub	sp, #12
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
    7330:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7332:	bf00      	nop
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	689a      	ldr	r2, [r3, #8]
    7338:	683b      	ldr	r3, [r7, #0]
    733a:	4013      	ands	r3, r2
    733c:	2b00      	cmp	r3, #0
    733e:	d1f9      	bne.n	7334 <hri_tcc_wait_for_sync+0xc>
	};
}
    7340:	bf00      	nop
    7342:	370c      	adds	r7, #12
    7344:	46bd      	mov	sp, r7
    7346:	f85d 7b04 	ldr.w	r7, [sp], #4
    734a:	4770      	bx	lr

0000734c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    734c:	b480      	push	{r7}
    734e:	b083      	sub	sp, #12
    7350:	af00      	add	r7, sp, #0
    7352:	6078      	str	r0, [r7, #4]
    7354:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7356:	687b      	ldr	r3, [r7, #4]
    7358:	689a      	ldr	r2, [r3, #8]
    735a:	683b      	ldr	r3, [r7, #0]
    735c:	4013      	ands	r3, r2
    735e:	2b00      	cmp	r3, #0
    7360:	bf14      	ite	ne
    7362:	2301      	movne	r3, #1
    7364:	2300      	moveq	r3, #0
    7366:	b2db      	uxtb	r3, r3
}
    7368:	4618      	mov	r0, r3
    736a:	370c      	adds	r7, #12
    736c:	46bd      	mov	sp, r7
    736e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7372:	4770      	bx	lr

00007374 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    737c:	687b      	ldr	r3, [r7, #4]
    737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7380:	f003 0301 	and.w	r3, r3, #1
    7384:	2b00      	cmp	r3, #0
    7386:	bf14      	ite	ne
    7388:	2301      	movne	r3, #1
    738a:	2300      	moveq	r3, #0
    738c:	b2db      	uxtb	r3, r3
}
    738e:	4618      	mov	r0, r3
    7390:	370c      	adds	r7, #12
    7392:	46bd      	mov	sp, r7
    7394:	f85d 7b04 	ldr.w	r7, [sp], #4
    7398:	4770      	bx	lr

0000739a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    739a:	b480      	push	{r7}
    739c:	b083      	sub	sp, #12
    739e:	af00      	add	r7, sp, #0
    73a0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    73a2:	687b      	ldr	r3, [r7, #4]
    73a4:	2201      	movs	r2, #1
    73a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
    73a8:	bf00      	nop
    73aa:	370c      	adds	r7, #12
    73ac:	46bd      	mov	sp, r7
    73ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b2:	4770      	bx	lr

000073b4 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    73b4:	b480      	push	{r7}
    73b6:	b083      	sub	sp, #12
    73b8:	af00      	add	r7, sp, #0
    73ba:	6078      	str	r0, [r7, #4]
    73bc:	460b      	mov	r3, r1
    73be:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    73c0:	687b      	ldr	r3, [r7, #4]
    73c2:	78fa      	ldrb	r2, [r7, #3]
    73c4:	715a      	strb	r2, [r3, #5]
}
    73c6:	bf00      	nop
    73c8:	370c      	adds	r7, #12
    73ca:	46bd      	mov	sp, r7
    73cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    73d0:	4770      	bx	lr

000073d2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    73d2:	b480      	push	{r7}
    73d4:	b083      	sub	sp, #12
    73d6:	af00      	add	r7, sp, #0
    73d8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    73da:	687b      	ldr	r3, [r7, #4]
    73dc:	2201      	movs	r2, #1
    73de:	629a      	str	r2, [r3, #40]	; 0x28
}
    73e0:	bf00      	nop
    73e2:	370c      	adds	r7, #12
    73e4:	46bd      	mov	sp, r7
    73e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    73ea:	4770      	bx	lr

000073ec <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b082      	sub	sp, #8
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	681b      	ldr	r3, [r3, #0]
    73f8:	f043 0201 	orr.w	r2, r3, #1
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7400:	2101      	movs	r1, #1
    7402:	6878      	ldr	r0, [r7, #4]
    7404:	4b02      	ldr	r3, [pc, #8]	; (7410 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7406:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7408:	bf00      	nop
    740a:	3708      	adds	r7, #8
    740c:	46bd      	mov	sp, r7
    740e:	bd80      	pop	{r7, pc}
    7410:	00007329 	.word	0x00007329

00007414 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	681b      	ldr	r3, [r3, #0]
    7420:	f043 0202 	orr.w	r2, r3, #2
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7428:	2103      	movs	r1, #3
    742a:	6878      	ldr	r0, [r7, #4]
    742c:	4b02      	ldr	r3, [pc, #8]	; (7438 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    742e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7430:	bf00      	nop
    7432:	3708      	adds	r7, #8
    7434:	46bd      	mov	sp, r7
    7436:	bd80      	pop	{r7, pc}
    7438:	00007329 	.word	0x00007329

0000743c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    743c:	b580      	push	{r7, lr}
    743e:	b084      	sub	sp, #16
    7440:	af00      	add	r7, sp, #0
    7442:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7444:	2103      	movs	r1, #3
    7446:	6878      	ldr	r0, [r7, #4]
    7448:	4b09      	ldr	r3, [pc, #36]	; (7470 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    744a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    744c:	687b      	ldr	r3, [r7, #4]
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7452:	68fb      	ldr	r3, [r7, #12]
    7454:	085b      	lsrs	r3, r3, #1
    7456:	f003 0301 	and.w	r3, r3, #1
    745a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    745c:	68fb      	ldr	r3, [r7, #12]
    745e:	2b00      	cmp	r3, #0
    7460:	bf14      	ite	ne
    7462:	2301      	movne	r3, #1
    7464:	2300      	moveq	r3, #0
    7466:	b2db      	uxtb	r3, r3
}
    7468:	4618      	mov	r0, r3
    746a:	3710      	adds	r7, #16
    746c:	46bd      	mov	sp, r7
    746e:	bd80      	pop	{r7, pc}
    7470:	00007329 	.word	0x00007329

00007474 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7474:	b580      	push	{r7, lr}
    7476:	b082      	sub	sp, #8
    7478:	af00      	add	r7, sp, #0
    747a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    747c:	687b      	ldr	r3, [r7, #4]
    747e:	681b      	ldr	r3, [r3, #0]
    7480:	f023 0202 	bic.w	r2, r3, #2
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7488:	2103      	movs	r1, #3
    748a:	6878      	ldr	r0, [r7, #4]
    748c:	4b02      	ldr	r3, [pc, #8]	; (7498 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    748e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7490:	bf00      	nop
    7492:	3708      	adds	r7, #8
    7494:	46bd      	mov	sp, r7
    7496:	bd80      	pop	{r7, pc}
    7498:	00007329 	.word	0x00007329

0000749c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    749c:	b580      	push	{r7, lr}
    749e:	b084      	sub	sp, #16
    74a0:	af00      	add	r7, sp, #0
    74a2:	6078      	str	r0, [r7, #4]
    74a4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    74a6:	2103      	movs	r1, #3
    74a8:	6878      	ldr	r0, [r7, #4]
    74aa:	4b07      	ldr	r3, [pc, #28]	; (74c8 <hri_tcc_get_CTRLA_reg+0x2c>)
    74ac:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	681b      	ldr	r3, [r3, #0]
    74b2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    74b4:	68fa      	ldr	r2, [r7, #12]
    74b6:	683b      	ldr	r3, [r7, #0]
    74b8:	4013      	ands	r3, r2
    74ba:	60fb      	str	r3, [r7, #12]
	return tmp;
    74bc:	68fb      	ldr	r3, [r7, #12]
}
    74be:	4618      	mov	r0, r3
    74c0:	3710      	adds	r7, #16
    74c2:	46bd      	mov	sp, r7
    74c4:	bd80      	pop	{r7, pc}
    74c6:	bf00      	nop
    74c8:	00007329 	.word	0x00007329

000074cc <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    74cc:	b580      	push	{r7, lr}
    74ce:	b082      	sub	sp, #8
    74d0:	af00      	add	r7, sp, #0
    74d2:	6078      	str	r0, [r7, #4]
    74d4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    74d6:	687b      	ldr	r3, [r7, #4]
    74d8:	683a      	ldr	r2, [r7, #0]
    74da:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    74dc:	2103      	movs	r1, #3
    74de:	6878      	ldr	r0, [r7, #4]
    74e0:	4b02      	ldr	r3, [pc, #8]	; (74ec <hri_tcc_write_CTRLA_reg+0x20>)
    74e2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    74e4:	bf00      	nop
    74e6:	3708      	adds	r7, #8
    74e8:	46bd      	mov	sp, r7
    74ea:	bd80      	pop	{r7, pc}
    74ec:	00007329 	.word	0x00007329

000074f0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    74f0:	b480      	push	{r7}
    74f2:	b083      	sub	sp, #12
    74f4:	af00      	add	r7, sp, #0
    74f6:	6078      	str	r0, [r7, #4]
    74f8:	460b      	mov	r3, r1
    74fa:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	78fa      	ldrb	r2, [r7, #3]
    7500:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7502:	bf00      	nop
    7504:	370c      	adds	r7, #12
    7506:	46bd      	mov	sp, r7
    7508:	f85d 7b04 	ldr.w	r7, [sp], #4
    750c:	4770      	bx	lr

0000750e <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    750e:	b480      	push	{r7}
    7510:	b083      	sub	sp, #12
    7512:	af00      	add	r7, sp, #0
    7514:	6078      	str	r0, [r7, #4]
    7516:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	683a      	ldr	r2, [r7, #0]
    751c:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    751e:	bf00      	nop
    7520:	370c      	adds	r7, #12
    7522:	46bd      	mov	sp, r7
    7524:	f85d 7b04 	ldr.w	r7, [sp], #4
    7528:	4770      	bx	lr
	...

0000752c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    752c:	b580      	push	{r7, lr}
    752e:	b082      	sub	sp, #8
    7530:	af00      	add	r7, sp, #0
    7532:	6078      	str	r0, [r7, #4]
    7534:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7536:	687b      	ldr	r3, [r7, #4]
    7538:	683a      	ldr	r2, [r7, #0]
    753a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    753c:	2180      	movs	r1, #128	; 0x80
    753e:	6878      	ldr	r0, [r7, #4]
    7540:	4b02      	ldr	r3, [pc, #8]	; (754c <hri_tcc_write_PER_reg+0x20>)
    7542:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7544:	bf00      	nop
    7546:	3708      	adds	r7, #8
    7548:	46bd      	mov	sp, r7
    754a:	bd80      	pop	{r7, pc}
    754c:	00007329 	.word	0x00007329

00007550 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7550:	b580      	push	{r7, lr}
    7552:	b082      	sub	sp, #8
    7554:	af00      	add	r7, sp, #0
    7556:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7558:	2180      	movs	r1, #128	; 0x80
    755a:	6878      	ldr	r0, [r7, #4]
    755c:	4b03      	ldr	r3, [pc, #12]	; (756c <hri_tcc_read_PER_reg+0x1c>)
    755e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7564:	4618      	mov	r0, r3
    7566:	3708      	adds	r7, #8
    7568:	46bd      	mov	sp, r7
    756a:	bd80      	pop	{r7, pc}
    756c:	00007329 	.word	0x00007329

00007570 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7570:	b480      	push	{r7}
    7572:	b083      	sub	sp, #12
    7574:	af00      	add	r7, sp, #0
    7576:	6078      	str	r0, [r7, #4]
    7578:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	4a09      	ldr	r2, [pc, #36]	; (75a4 <_tcc_init_irq_param+0x34>)
    757e:	4293      	cmp	r3, r2
    7580:	d102      	bne.n	7588 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7582:	4a09      	ldr	r2, [pc, #36]	; (75a8 <_tcc_init_irq_param+0x38>)
    7584:	683b      	ldr	r3, [r7, #0]
    7586:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7588:	687b      	ldr	r3, [r7, #4]
    758a:	4a08      	ldr	r2, [pc, #32]	; (75ac <_tcc_init_irq_param+0x3c>)
    758c:	4293      	cmp	r3, r2
    758e:	d102      	bne.n	7596 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7590:	4a07      	ldr	r2, [pc, #28]	; (75b0 <_tcc_init_irq_param+0x40>)
    7592:	683b      	ldr	r3, [r7, #0]
    7594:	6013      	str	r3, [r2, #0]
	}
}
    7596:	bf00      	nop
    7598:	370c      	adds	r7, #12
    759a:	46bd      	mov	sp, r7
    759c:	f85d 7b04 	ldr.w	r7, [sp], #4
    75a0:	4770      	bx	lr
    75a2:	bf00      	nop
    75a4:	41016000 	.word	0x41016000
    75a8:	20000830 	.word	0x20000830
    75ac:	41018000 	.word	0x41018000
    75b0:	20000834 	.word	0x20000834

000075b4 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b084      	sub	sp, #16
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
    75bc:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    75be:	6838      	ldr	r0, [r7, #0]
    75c0:	4b33      	ldr	r3, [pc, #204]	; (7690 <_tcc_timer_init+0xdc>)
    75c2:	4798      	blx	r3
    75c4:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    75c6:	68fb      	ldr	r3, [r7, #12]
    75c8:	2b00      	cmp	r3, #0
    75ca:	d102      	bne.n	75d2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    75cc:	f06f 0309 	mvn.w	r3, #9
    75d0:	e05a      	b.n	7688 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	683a      	ldr	r2, [r7, #0]
    75d6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    75d8:	2101      	movs	r1, #1
    75da:	6838      	ldr	r0, [r7, #0]
    75dc:	4b2d      	ldr	r3, [pc, #180]	; (7694 <_tcc_timer_init+0xe0>)
    75de:	4798      	blx	r3
    75e0:	4603      	mov	r3, r0
    75e2:	f083 0301 	eor.w	r3, r3, #1
    75e6:	b2db      	uxtb	r3, r3
    75e8:	2b00      	cmp	r3, #0
    75ea:	d011      	beq.n	7610 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    75ec:	2102      	movs	r1, #2
    75ee:	6838      	ldr	r0, [r7, #0]
    75f0:	4b29      	ldr	r3, [pc, #164]	; (7698 <_tcc_timer_init+0xe4>)
    75f2:	4798      	blx	r3
    75f4:	4603      	mov	r3, r0
    75f6:	2b00      	cmp	r3, #0
    75f8:	d006      	beq.n	7608 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    75fa:	6838      	ldr	r0, [r7, #0]
    75fc:	4b27      	ldr	r3, [pc, #156]	; (769c <_tcc_timer_init+0xe8>)
    75fe:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7600:	2102      	movs	r1, #2
    7602:	6838      	ldr	r0, [r7, #0]
    7604:	4b26      	ldr	r3, [pc, #152]	; (76a0 <_tcc_timer_init+0xec>)
    7606:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7608:	2101      	movs	r1, #1
    760a:	6838      	ldr	r0, [r7, #0]
    760c:	4b25      	ldr	r3, [pc, #148]	; (76a4 <_tcc_timer_init+0xf0>)
    760e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7610:	2101      	movs	r1, #1
    7612:	6838      	ldr	r0, [r7, #0]
    7614:	4b22      	ldr	r3, [pc, #136]	; (76a0 <_tcc_timer_init+0xec>)
    7616:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7618:	68fb      	ldr	r3, [r7, #12]
    761a:	689b      	ldr	r3, [r3, #8]
    761c:	4619      	mov	r1, r3
    761e:	6838      	ldr	r0, [r7, #0]
    7620:	4b20      	ldr	r3, [pc, #128]	; (76a4 <_tcc_timer_init+0xf0>)
    7622:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7624:	68fb      	ldr	r3, [r7, #12]
    7626:	7b1b      	ldrb	r3, [r3, #12]
    7628:	4619      	mov	r1, r3
    762a:	6838      	ldr	r0, [r7, #0]
    762c:	4b1e      	ldr	r3, [pc, #120]	; (76a8 <_tcc_timer_init+0xf4>)
    762e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7630:	68fb      	ldr	r3, [r7, #12]
    7632:	7b5b      	ldrb	r3, [r3, #13]
    7634:	4619      	mov	r1, r3
    7636:	6838      	ldr	r0, [r7, #0]
    7638:	4b1c      	ldr	r3, [pc, #112]	; (76ac <_tcc_timer_init+0xf8>)
    763a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    763c:	68fb      	ldr	r3, [r7, #12]
    763e:	691b      	ldr	r3, [r3, #16]
    7640:	4619      	mov	r1, r3
    7642:	6838      	ldr	r0, [r7, #0]
    7644:	4b1a      	ldr	r3, [pc, #104]	; (76b0 <_tcc_timer_init+0xfc>)
    7646:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7648:	68fb      	ldr	r3, [r7, #12]
    764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    764c:	4619      	mov	r1, r3
    764e:	6838      	ldr	r0, [r7, #0]
    7650:	4b18      	ldr	r3, [pc, #96]	; (76b4 <_tcc_timer_init+0x100>)
    7652:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7654:	6838      	ldr	r0, [r7, #0]
    7656:	4b18      	ldr	r3, [pc, #96]	; (76b8 <_tcc_timer_init+0x104>)
    7658:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    765a:	6879      	ldr	r1, [r7, #4]
    765c:	6838      	ldr	r0, [r7, #0]
    765e:	4b17      	ldr	r3, [pc, #92]	; (76bc <_tcc_timer_init+0x108>)
    7660:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7662:	68fb      	ldr	r3, [r7, #12]
    7664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7668:	4618      	mov	r0, r3
    766a:	4b15      	ldr	r3, [pc, #84]	; (76c0 <_tcc_timer_init+0x10c>)
    766c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    766e:	68fb      	ldr	r3, [r7, #12]
    7670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7674:	4618      	mov	r0, r3
    7676:	4b13      	ldr	r3, [pc, #76]	; (76c4 <_tcc_timer_init+0x110>)
    7678:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    767a:	68fb      	ldr	r3, [r7, #12]
    767c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7680:	4618      	mov	r0, r3
    7682:	4b11      	ldr	r3, [pc, #68]	; (76c8 <_tcc_timer_init+0x114>)
    7684:	4798      	blx	r3

	return ERR_NONE;
    7686:	2300      	movs	r3, #0
}
    7688:	4618      	mov	r0, r3
    768a:	3710      	adds	r7, #16
    768c:	46bd      	mov	sp, r7
    768e:	bd80      	pop	{r7, pc}
    7690:	0000787d 	.word	0x0000787d
    7694:	0000734d 	.word	0x0000734d
    7698:	0000749d 	.word	0x0000749d
    769c:	00007475 	.word	0x00007475
    76a0:	00007329 	.word	0x00007329
    76a4:	000074cd 	.word	0x000074cd
    76a8:	000073b5 	.word	0x000073b5
    76ac:	000074f1 	.word	0x000074f1
    76b0:	0000750f 	.word	0x0000750f
    76b4:	0000752d 	.word	0x0000752d
    76b8:	000073d3 	.word	0x000073d3
    76bc:	00007571 	.word	0x00007571
    76c0:	000072a9 	.word	0x000072a9
    76c4:	000072ed 	.word	0x000072ed
    76c8:	0000726d 	.word	0x0000726d

000076cc <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b084      	sub	sp, #16
    76d0:	af00      	add	r7, sp, #0
    76d2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	68db      	ldr	r3, [r3, #12]
    76d8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    76da:	68f8      	ldr	r0, [r7, #12]
    76dc:	4b0a      	ldr	r3, [pc, #40]	; (7708 <_tcc_timer_deinit+0x3c>)
    76de:	4798      	blx	r3
    76e0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    76e2:	68bb      	ldr	r3, [r7, #8]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d00b      	beq.n	7700 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    76e8:	68bb      	ldr	r3, [r7, #8]
    76ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    76ee:	4618      	mov	r0, r3
    76f0:	4b06      	ldr	r3, [pc, #24]	; (770c <_tcc_timer_deinit+0x40>)
    76f2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    76f4:	68f8      	ldr	r0, [r7, #12]
    76f6:	4b06      	ldr	r3, [pc, #24]	; (7710 <_tcc_timer_deinit+0x44>)
    76f8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    76fa:	68f8      	ldr	r0, [r7, #12]
    76fc:	4b05      	ldr	r3, [pc, #20]	; (7714 <_tcc_timer_deinit+0x48>)
    76fe:	4798      	blx	r3
	}
}
    7700:	bf00      	nop
    7702:	3710      	adds	r7, #16
    7704:	46bd      	mov	sp, r7
    7706:	bd80      	pop	{r7, pc}
    7708:	0000787d 	.word	0x0000787d
    770c:	000072a9 	.word	0x000072a9
    7710:	00007475 	.word	0x00007475
    7714:	000073ed 	.word	0x000073ed

00007718 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7718:	b580      	push	{r7, lr}
    771a:	b082      	sub	sp, #8
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	68db      	ldr	r3, [r3, #12]
    7724:	4618      	mov	r0, r3
    7726:	4b03      	ldr	r3, [pc, #12]	; (7734 <_tcc_timer_start+0x1c>)
    7728:	4798      	blx	r3
}
    772a:	bf00      	nop
    772c:	3708      	adds	r7, #8
    772e:	46bd      	mov	sp, r7
    7730:	bd80      	pop	{r7, pc}
    7732:	bf00      	nop
    7734:	00007415 	.word	0x00007415

00007738 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7738:	b580      	push	{r7, lr}
    773a:	b082      	sub	sp, #8
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	68db      	ldr	r3, [r3, #12]
    7744:	4618      	mov	r0, r3
    7746:	4b03      	ldr	r3, [pc, #12]	; (7754 <_tcc_timer_stop+0x1c>)
    7748:	4798      	blx	r3
}
    774a:	bf00      	nop
    774c:	3708      	adds	r7, #8
    774e:	46bd      	mov	sp, r7
    7750:	bd80      	pop	{r7, pc}
    7752:	bf00      	nop
    7754:	00007475 	.word	0x00007475

00007758 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7758:	b580      	push	{r7, lr}
    775a:	b082      	sub	sp, #8
    775c:	af00      	add	r7, sp, #0
    775e:	6078      	str	r0, [r7, #4]
    7760:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7762:	687b      	ldr	r3, [r7, #4]
    7764:	68db      	ldr	r3, [r3, #12]
    7766:	6839      	ldr	r1, [r7, #0]
    7768:	4618      	mov	r0, r3
    776a:	4b03      	ldr	r3, [pc, #12]	; (7778 <_tcc_timer_set_period+0x20>)
    776c:	4798      	blx	r3
}
    776e:	bf00      	nop
    7770:	3708      	adds	r7, #8
    7772:	46bd      	mov	sp, r7
    7774:	bd80      	pop	{r7, pc}
    7776:	bf00      	nop
    7778:	0000752d 	.word	0x0000752d

0000777c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    777c:	b580      	push	{r7, lr}
    777e:	b082      	sub	sp, #8
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	68db      	ldr	r3, [r3, #12]
    7788:	4618      	mov	r0, r3
    778a:	4b03      	ldr	r3, [pc, #12]	; (7798 <_tcc_timer_get_period+0x1c>)
    778c:	4798      	blx	r3
    778e:	4603      	mov	r3, r0
}
    7790:	4618      	mov	r0, r3
    7792:	3708      	adds	r7, #8
    7794:	46bd      	mov	sp, r7
    7796:	bd80      	pop	{r7, pc}
    7798:	00007551 	.word	0x00007551

0000779c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    779c:	b580      	push	{r7, lr}
    779e:	b082      	sub	sp, #8
    77a0:	af00      	add	r7, sp, #0
    77a2:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	68db      	ldr	r3, [r3, #12]
    77a8:	4618      	mov	r0, r3
    77aa:	4b03      	ldr	r3, [pc, #12]	; (77b8 <_tcc_timer_is_started+0x1c>)
    77ac:	4798      	blx	r3
    77ae:	4603      	mov	r3, r0
}
    77b0:	4618      	mov	r0, r3
    77b2:	3708      	adds	r7, #8
    77b4:	46bd      	mov	sp, r7
    77b6:	bd80      	pop	{r7, pc}
    77b8:	0000743d 	.word	0x0000743d

000077bc <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    77bc:	b480      	push	{r7}
    77be:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    77c0:	4b02      	ldr	r3, [pc, #8]	; (77cc <_tcc_get_timer+0x10>)
}
    77c2:	4618      	mov	r0, r3
    77c4:	46bd      	mov	sp, r7
    77c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ca:	4770      	bx	lr
    77cc:	200000c0 	.word	0x200000c0

000077d0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    77d0:	b580      	push	{r7, lr}
    77d2:	b084      	sub	sp, #16
    77d4:	af00      	add	r7, sp, #0
    77d6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	68db      	ldr	r3, [r3, #12]
    77dc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    77de:	68f8      	ldr	r0, [r7, #12]
    77e0:	4b08      	ldr	r3, [pc, #32]	; (7804 <_tcc_timer_set_irq+0x34>)
    77e2:	4798      	blx	r3
    77e4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    77e6:	68bb      	ldr	r3, [r7, #8]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d006      	beq.n	77fa <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    77ec:	68bb      	ldr	r3, [r7, #8]
    77ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    77f2:	b2db      	uxtb	r3, r3
    77f4:	4618      	mov	r0, r3
    77f6:	4b04      	ldr	r3, [pc, #16]	; (7808 <_tcc_timer_set_irq+0x38>)
    77f8:	4798      	blx	r3
	}
}
    77fa:	bf00      	nop
    77fc:	3710      	adds	r7, #16
    77fe:	46bd      	mov	sp, r7
    7800:	bd80      	pop	{r7, pc}
    7802:	bf00      	nop
    7804:	0000787d 	.word	0x0000787d
    7808:	00003d5d 	.word	0x00003d5d

0000780c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    780c:	b580      	push	{r7, lr}
    780e:	b084      	sub	sp, #16
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	68db      	ldr	r3, [r3, #12]
    7818:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    781a:	68f8      	ldr	r0, [r7, #12]
    781c:	4b07      	ldr	r3, [pc, #28]	; (783c <tcc_interrupt_handler+0x30>)
    781e:	4798      	blx	r3
    7820:	4603      	mov	r3, r0
    7822:	2b00      	cmp	r3, #0
    7824:	d006      	beq.n	7834 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7826:	68f8      	ldr	r0, [r7, #12]
    7828:	4b05      	ldr	r3, [pc, #20]	; (7840 <tcc_interrupt_handler+0x34>)
    782a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    782c:	687b      	ldr	r3, [r7, #4]
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	6878      	ldr	r0, [r7, #4]
    7832:	4798      	blx	r3
	}
}
    7834:	bf00      	nop
    7836:	3710      	adds	r7, #16
    7838:	46bd      	mov	sp, r7
    783a:	bd80      	pop	{r7, pc}
    783c:	00007375 	.word	0x00007375
    7840:	0000739b 	.word	0x0000739b

00007844 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7844:	b580      	push	{r7, lr}
    7846:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7848:	4b03      	ldr	r3, [pc, #12]	; (7858 <TCC0_0_Handler+0x14>)
    784a:	681b      	ldr	r3, [r3, #0]
    784c:	4618      	mov	r0, r3
    784e:	4b03      	ldr	r3, [pc, #12]	; (785c <TCC0_0_Handler+0x18>)
    7850:	4798      	blx	r3
}
    7852:	bf00      	nop
    7854:	bd80      	pop	{r7, pc}
    7856:	bf00      	nop
    7858:	20000830 	.word	0x20000830
    785c:	0000780d 	.word	0x0000780d

00007860 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7860:	b580      	push	{r7, lr}
    7862:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7864:	4b03      	ldr	r3, [pc, #12]	; (7874 <TCC1_0_Handler+0x14>)
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	4618      	mov	r0, r3
    786a:	4b03      	ldr	r3, [pc, #12]	; (7878 <TCC1_0_Handler+0x18>)
    786c:	4798      	blx	r3
}
    786e:	bf00      	nop
    7870:	bd80      	pop	{r7, pc}
    7872:	bf00      	nop
    7874:	20000834 	.word	0x20000834
    7878:	0000780d 	.word	0x0000780d

0000787c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    787c:	b480      	push	{r7}
    787e:	b085      	sub	sp, #20
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7884:	2300      	movs	r3, #0
    7886:	73fb      	strb	r3, [r7, #15]
    7888:	e015      	b.n	78b6 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    788a:	7bfa      	ldrb	r2, [r7, #15]
    788c:	490f      	ldr	r1, [pc, #60]	; (78cc <_get_tcc_cfg+0x50>)
    788e:	4613      	mov	r3, r2
    7890:	005b      	lsls	r3, r3, #1
    7892:	4413      	add	r3, r2
    7894:	011b      	lsls	r3, r3, #4
    7896:	440b      	add	r3, r1
    7898:	681a      	ldr	r2, [r3, #0]
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	429a      	cmp	r2, r3
    789e:	d107      	bne.n	78b0 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    78a0:	7bfa      	ldrb	r2, [r7, #15]
    78a2:	4613      	mov	r3, r2
    78a4:	005b      	lsls	r3, r3, #1
    78a6:	4413      	add	r3, r2
    78a8:	011b      	lsls	r3, r3, #4
    78aa:	4a08      	ldr	r2, [pc, #32]	; (78cc <_get_tcc_cfg+0x50>)
    78ac:	4413      	add	r3, r2
    78ae:	e006      	b.n	78be <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    78b0:	7bfb      	ldrb	r3, [r7, #15]
    78b2:	3301      	adds	r3, #1
    78b4:	73fb      	strb	r3, [r7, #15]
    78b6:	7bfb      	ldrb	r3, [r7, #15]
    78b8:	2b01      	cmp	r3, #1
    78ba:	d9e6      	bls.n	788a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    78bc:	2300      	movs	r3, #0
}
    78be:	4618      	mov	r0, r3
    78c0:	3714      	adds	r7, #20
    78c2:	46bd      	mov	sp, r7
    78c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78c8:	4770      	bx	lr
    78ca:	bf00      	nop
    78cc:	20000060 	.word	0x20000060

000078d0 <__NVIC_EnableIRQ>:
{
    78d0:	b480      	push	{r7}
    78d2:	b083      	sub	sp, #12
    78d4:	af00      	add	r7, sp, #0
    78d6:	4603      	mov	r3, r0
    78d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78de:	2b00      	cmp	r3, #0
    78e0:	db0b      	blt.n	78fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78e2:	4909      	ldr	r1, [pc, #36]	; (7908 <__NVIC_EnableIRQ+0x38>)
    78e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78e8:	095b      	lsrs	r3, r3, #5
    78ea:	88fa      	ldrh	r2, [r7, #6]
    78ec:	f002 021f 	and.w	r2, r2, #31
    78f0:	2001      	movs	r0, #1
    78f2:	fa00 f202 	lsl.w	r2, r0, r2
    78f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78fa:	bf00      	nop
    78fc:	370c      	adds	r7, #12
    78fe:	46bd      	mov	sp, r7
    7900:	f85d 7b04 	ldr.w	r7, [sp], #4
    7904:	4770      	bx	lr
    7906:	bf00      	nop
    7908:	e000e100 	.word	0xe000e100

0000790c <__NVIC_DisableIRQ>:
{
    790c:	b480      	push	{r7}
    790e:	b083      	sub	sp, #12
    7910:	af00      	add	r7, sp, #0
    7912:	4603      	mov	r3, r0
    7914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    791a:	2b00      	cmp	r3, #0
    791c:	db10      	blt.n	7940 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    791e:	490b      	ldr	r1, [pc, #44]	; (794c <__NVIC_DisableIRQ+0x40>)
    7920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7924:	095b      	lsrs	r3, r3, #5
    7926:	88fa      	ldrh	r2, [r7, #6]
    7928:	f002 021f 	and.w	r2, r2, #31
    792c:	2001      	movs	r0, #1
    792e:	fa00 f202 	lsl.w	r2, r0, r2
    7932:	3320      	adds	r3, #32
    7934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    793c:	f3bf 8f6f 	isb	sy
}
    7940:	bf00      	nop
    7942:	370c      	adds	r7, #12
    7944:	46bd      	mov	sp, r7
    7946:	f85d 7b04 	ldr.w	r7, [sp], #4
    794a:	4770      	bx	lr
    794c:	e000e100 	.word	0xe000e100

00007950 <__NVIC_ClearPendingIRQ>:
{
    7950:	b480      	push	{r7}
    7952:	b083      	sub	sp, #12
    7954:	af00      	add	r7, sp, #0
    7956:	4603      	mov	r3, r0
    7958:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    795a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    795e:	2b00      	cmp	r3, #0
    7960:	db0c      	blt.n	797c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7962:	4909      	ldr	r1, [pc, #36]	; (7988 <__NVIC_ClearPendingIRQ+0x38>)
    7964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7968:	095b      	lsrs	r3, r3, #5
    796a:	88fa      	ldrh	r2, [r7, #6]
    796c:	f002 021f 	and.w	r2, r2, #31
    7970:	2001      	movs	r0, #1
    7972:	fa00 f202 	lsl.w	r2, r0, r2
    7976:	3360      	adds	r3, #96	; 0x60
    7978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    797c:	bf00      	nop
    797e:	370c      	adds	r7, #12
    7980:	46bd      	mov	sp, r7
    7982:	f85d 7b04 	ldr.w	r7, [sp], #4
    7986:	4770      	bx	lr
    7988:	e000e100 	.word	0xe000e100

0000798c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    798c:	b480      	push	{r7}
    798e:	b083      	sub	sp, #12
    7990:	af00      	add	r7, sp, #0
    7992:	6078      	str	r0, [r7, #4]
    7994:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7996:	bf00      	nop
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	691a      	ldr	r2, [r3, #16]
    799c:	683b      	ldr	r3, [r7, #0]
    799e:	4013      	ands	r3, r2
    79a0:	2b00      	cmp	r3, #0
    79a2:	d1f9      	bne.n	7998 <hri_tc_wait_for_sync+0xc>
	};
}
    79a4:	bf00      	nop
    79a6:	370c      	adds	r7, #12
    79a8:	46bd      	mov	sp, r7
    79aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ae:	4770      	bx	lr

000079b0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    79b0:	b480      	push	{r7}
    79b2:	b083      	sub	sp, #12
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	691a      	ldr	r2, [r3, #16]
    79be:	683b      	ldr	r3, [r7, #0]
    79c0:	4013      	ands	r3, r2
    79c2:	2b00      	cmp	r3, #0
    79c4:	bf14      	ite	ne
    79c6:	2301      	movne	r3, #1
    79c8:	2300      	moveq	r3, #0
    79ca:	b2db      	uxtb	r3, r3
}
    79cc:	4618      	mov	r0, r3
    79ce:	370c      	adds	r7, #12
    79d0:	46bd      	mov	sp, r7
    79d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d6:	4770      	bx	lr

000079d8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    79d8:	b480      	push	{r7}
    79da:	b083      	sub	sp, #12
    79dc:	af00      	add	r7, sp, #0
    79de:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	7a9b      	ldrb	r3, [r3, #10]
    79e4:	b2db      	uxtb	r3, r3
    79e6:	f003 0301 	and.w	r3, r3, #1
    79ea:	2b00      	cmp	r3, #0
    79ec:	bf14      	ite	ne
    79ee:	2301      	movne	r3, #1
    79f0:	2300      	moveq	r3, #0
    79f2:	b2db      	uxtb	r3, r3
}
    79f4:	4618      	mov	r0, r3
    79f6:	370c      	adds	r7, #12
    79f8:	46bd      	mov	sp, r7
    79fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    79fe:	4770      	bx	lr

00007a00 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7a00:	b480      	push	{r7}
    7a02:	b083      	sub	sp, #12
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	2201      	movs	r2, #1
    7a0c:	729a      	strb	r2, [r3, #10]
}
    7a0e:	bf00      	nop
    7a10:	370c      	adds	r7, #12
    7a12:	46bd      	mov	sp, r7
    7a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a18:	4770      	bx	lr

00007a1a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7a1a:	b480      	push	{r7}
    7a1c:	b083      	sub	sp, #12
    7a1e:	af00      	add	r7, sp, #0
    7a20:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	2202      	movs	r2, #2
    7a26:	729a      	strb	r2, [r3, #10]
}
    7a28:	bf00      	nop
    7a2a:	370c      	adds	r7, #12
    7a2c:	46bd      	mov	sp, r7
    7a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a32:	4770      	bx	lr

00007a34 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7a34:	b480      	push	{r7}
    7a36:	b083      	sub	sp, #12
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7a3c:	687b      	ldr	r3, [r7, #4]
    7a3e:	2201      	movs	r2, #1
    7a40:	725a      	strb	r2, [r3, #9]
}
    7a42:	bf00      	nop
    7a44:	370c      	adds	r7, #12
    7a46:	46bd      	mov	sp, r7
    7a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a4c:	4770      	bx	lr

00007a4e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7a4e:	b480      	push	{r7}
    7a50:	b083      	sub	sp, #12
    7a52:	af00      	add	r7, sp, #0
    7a54:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7a56:	687b      	ldr	r3, [r7, #4]
    7a58:	7a5b      	ldrb	r3, [r3, #9]
    7a5a:	b2db      	uxtb	r3, r3
    7a5c:	085b      	lsrs	r3, r3, #1
    7a5e:	f003 0301 	and.w	r3, r3, #1
    7a62:	2b00      	cmp	r3, #0
    7a64:	bf14      	ite	ne
    7a66:	2301      	movne	r3, #1
    7a68:	2300      	moveq	r3, #0
    7a6a:	b2db      	uxtb	r3, r3
}
    7a6c:	4618      	mov	r0, r3
    7a6e:	370c      	adds	r7, #12
    7a70:	46bd      	mov	sp, r7
    7a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a76:	4770      	bx	lr

00007a78 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	b082      	sub	sp, #8
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	681b      	ldr	r3, [r3, #0]
    7a84:	f043 0201 	orr.w	r2, r3, #1
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7a8c:	2101      	movs	r1, #1
    7a8e:	6878      	ldr	r0, [r7, #4]
    7a90:	4b02      	ldr	r3, [pc, #8]	; (7a9c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7a92:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a94:	bf00      	nop
    7a96:	3708      	adds	r7, #8
    7a98:	46bd      	mov	sp, r7
    7a9a:	bd80      	pop	{r7, pc}
    7a9c:	0000798d 	.word	0x0000798d

00007aa0 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7aa0:	b580      	push	{r7, lr}
    7aa2:	b082      	sub	sp, #8
    7aa4:	af00      	add	r7, sp, #0
    7aa6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	681b      	ldr	r3, [r3, #0]
    7aac:	f043 0202 	orr.w	r2, r3, #2
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ab4:	2103      	movs	r1, #3
    7ab6:	6878      	ldr	r0, [r7, #4]
    7ab8:	4b02      	ldr	r3, [pc, #8]	; (7ac4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7aba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7abc:	bf00      	nop
    7abe:	3708      	adds	r7, #8
    7ac0:	46bd      	mov	sp, r7
    7ac2:	bd80      	pop	{r7, pc}
    7ac4:	0000798d 	.word	0x0000798d

00007ac8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	b084      	sub	sp, #16
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ad0:	2103      	movs	r1, #3
    7ad2:	6878      	ldr	r0, [r7, #4]
    7ad4:	4b09      	ldr	r3, [pc, #36]	; (7afc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7ad6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	681b      	ldr	r3, [r3, #0]
    7adc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7ade:	68fb      	ldr	r3, [r7, #12]
    7ae0:	085b      	lsrs	r3, r3, #1
    7ae2:	f003 0301 	and.w	r3, r3, #1
    7ae6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ae8:	68fb      	ldr	r3, [r7, #12]
    7aea:	2b00      	cmp	r3, #0
    7aec:	bf14      	ite	ne
    7aee:	2301      	movne	r3, #1
    7af0:	2300      	moveq	r3, #0
    7af2:	b2db      	uxtb	r3, r3
}
    7af4:	4618      	mov	r0, r3
    7af6:	3710      	adds	r7, #16
    7af8:	46bd      	mov	sp, r7
    7afa:	bd80      	pop	{r7, pc}
    7afc:	0000798d 	.word	0x0000798d

00007b00 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7b00:	b580      	push	{r7, lr}
    7b02:	b082      	sub	sp, #8
    7b04:	af00      	add	r7, sp, #0
    7b06:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	681b      	ldr	r3, [r3, #0]
    7b0c:	f023 0202 	bic.w	r2, r3, #2
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b14:	2103      	movs	r1, #3
    7b16:	6878      	ldr	r0, [r7, #4]
    7b18:	4b02      	ldr	r3, [pc, #8]	; (7b24 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7b1a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b1c:	bf00      	nop
    7b1e:	3708      	adds	r7, #8
    7b20:	46bd      	mov	sp, r7
    7b22:	bd80      	pop	{r7, pc}
    7b24:	0000798d 	.word	0x0000798d

00007b28 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7b28:	b480      	push	{r7}
    7b2a:	b085      	sub	sp, #20
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	681b      	ldr	r3, [r3, #0]
    7b34:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7b36:	68fb      	ldr	r3, [r7, #12]
    7b38:	089b      	lsrs	r3, r3, #2
    7b3a:	f003 0303 	and.w	r3, r3, #3
    7b3e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b40:	68fb      	ldr	r3, [r7, #12]
}
    7b42:	4618      	mov	r0, r3
    7b44:	3714      	adds	r7, #20
    7b46:	46bd      	mov	sp, r7
    7b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4c:	4770      	bx	lr
	...

00007b50 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7b50:	b580      	push	{r7, lr}
    7b52:	b084      	sub	sp, #16
    7b54:	af00      	add	r7, sp, #0
    7b56:	6078      	str	r0, [r7, #4]
    7b58:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b5a:	2103      	movs	r1, #3
    7b5c:	6878      	ldr	r0, [r7, #4]
    7b5e:	4b07      	ldr	r3, [pc, #28]	; (7b7c <hri_tc_get_CTRLA_reg+0x2c>)
    7b60:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	681b      	ldr	r3, [r3, #0]
    7b66:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b68:	68fa      	ldr	r2, [r7, #12]
    7b6a:	683b      	ldr	r3, [r7, #0]
    7b6c:	4013      	ands	r3, r2
    7b6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b70:	68fb      	ldr	r3, [r7, #12]
}
    7b72:	4618      	mov	r0, r3
    7b74:	3710      	adds	r7, #16
    7b76:	46bd      	mov	sp, r7
    7b78:	bd80      	pop	{r7, pc}
    7b7a:	bf00      	nop
    7b7c:	0000798d 	.word	0x0000798d

00007b80 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7b80:	b580      	push	{r7, lr}
    7b82:	b082      	sub	sp, #8
    7b84:	af00      	add	r7, sp, #0
    7b86:	6078      	str	r0, [r7, #4]
    7b88:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7b8a:	687b      	ldr	r3, [r7, #4]
    7b8c:	683a      	ldr	r2, [r7, #0]
    7b8e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b90:	2103      	movs	r1, #3
    7b92:	6878      	ldr	r0, [r7, #4]
    7b94:	4b02      	ldr	r3, [pc, #8]	; (7ba0 <hri_tc_write_CTRLA_reg+0x20>)
    7b96:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b98:	bf00      	nop
    7b9a:	3708      	adds	r7, #8
    7b9c:	46bd      	mov	sp, r7
    7b9e:	bd80      	pop	{r7, pc}
    7ba0:	0000798d 	.word	0x0000798d

00007ba4 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7ba4:	b480      	push	{r7}
    7ba6:	b083      	sub	sp, #12
    7ba8:	af00      	add	r7, sp, #0
    7baa:	6078      	str	r0, [r7, #4]
    7bac:	460b      	mov	r3, r1
    7bae:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7bb0:	687b      	ldr	r3, [r7, #4]
    7bb2:	887a      	ldrh	r2, [r7, #2]
    7bb4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7bb6:	bf00      	nop
    7bb8:	370c      	adds	r7, #12
    7bba:	46bd      	mov	sp, r7
    7bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc0:	4770      	bx	lr

00007bc2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7bc2:	b480      	push	{r7}
    7bc4:	b083      	sub	sp, #12
    7bc6:	af00      	add	r7, sp, #0
    7bc8:	6078      	str	r0, [r7, #4]
    7bca:	460b      	mov	r3, r1
    7bcc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	78fa      	ldrb	r2, [r7, #3]
    7bd2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7bd4:	bf00      	nop
    7bd6:	370c      	adds	r7, #12
    7bd8:	46bd      	mov	sp, r7
    7bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bde:	4770      	bx	lr

00007be0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7be0:	b480      	push	{r7}
    7be2:	b083      	sub	sp, #12
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
    7be8:	460b      	mov	r3, r1
    7bea:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	78fa      	ldrb	r2, [r7, #3]
    7bf0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7bf2:	bf00      	nop
    7bf4:	370c      	adds	r7, #12
    7bf6:	46bd      	mov	sp, r7
    7bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bfc:	4770      	bx	lr
	...

00007c00 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7c00:	b580      	push	{r7, lr}
    7c02:	b082      	sub	sp, #8
    7c04:	af00      	add	r7, sp, #0
    7c06:	6078      	str	r0, [r7, #4]
    7c08:	460b      	mov	r3, r1
    7c0a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	78fa      	ldrb	r2, [r7, #3]
    7c10:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7c12:	2120      	movs	r1, #32
    7c14:	6878      	ldr	r0, [r7, #4]
    7c16:	4b03      	ldr	r3, [pc, #12]	; (7c24 <hri_tccount8_write_PER_reg+0x24>)
    7c18:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c1a:	bf00      	nop
    7c1c:	3708      	adds	r7, #8
    7c1e:	46bd      	mov	sp, r7
    7c20:	bd80      	pop	{r7, pc}
    7c22:	bf00      	nop
    7c24:	0000798d 	.word	0x0000798d

00007c28 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7c28:	b580      	push	{r7, lr}
    7c2a:	b082      	sub	sp, #8
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7c30:	2120      	movs	r1, #32
    7c32:	6878      	ldr	r0, [r7, #4]
    7c34:	4b04      	ldr	r3, [pc, #16]	; (7c48 <hri_tccount8_read_PER_reg+0x20>)
    7c36:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	7edb      	ldrb	r3, [r3, #27]
    7c3c:	b2db      	uxtb	r3, r3
}
    7c3e:	4618      	mov	r0, r3
    7c40:	3708      	adds	r7, #8
    7c42:	46bd      	mov	sp, r7
    7c44:	bd80      	pop	{r7, pc}
    7c46:	bf00      	nop
    7c48:	0000798d 	.word	0x0000798d

00007c4c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7c4c:	b580      	push	{r7, lr}
    7c4e:	b082      	sub	sp, #8
    7c50:	af00      	add	r7, sp, #0
    7c52:	6078      	str	r0, [r7, #4]
    7c54:	460b      	mov	r3, r1
    7c56:	70fb      	strb	r3, [r7, #3]
    7c58:	4613      	mov	r3, r2
    7c5a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7c5c:	78fb      	ldrb	r3, [r7, #3]
    7c5e:	687a      	ldr	r2, [r7, #4]
    7c60:	4413      	add	r3, r2
    7c62:	78ba      	ldrb	r2, [r7, #2]
    7c64:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c66:	21c0      	movs	r1, #192	; 0xc0
    7c68:	6878      	ldr	r0, [r7, #4]
    7c6a:	4b03      	ldr	r3, [pc, #12]	; (7c78 <hri_tccount8_write_CC_reg+0x2c>)
    7c6c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c6e:	bf00      	nop
    7c70:	3708      	adds	r7, #8
    7c72:	46bd      	mov	sp, r7
    7c74:	bd80      	pop	{r7, pc}
    7c76:	bf00      	nop
    7c78:	0000798d 	.word	0x0000798d

00007c7c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b082      	sub	sp, #8
    7c80:	af00      	add	r7, sp, #0
    7c82:	6078      	str	r0, [r7, #4]
    7c84:	460b      	mov	r3, r1
    7c86:	70fb      	strb	r3, [r7, #3]
    7c88:	4613      	mov	r3, r2
    7c8a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7c8c:	78fb      	ldrb	r3, [r7, #3]
    7c8e:	687a      	ldr	r2, [r7, #4]
    7c90:	330c      	adds	r3, #12
    7c92:	005b      	lsls	r3, r3, #1
    7c94:	4413      	add	r3, r2
    7c96:	883a      	ldrh	r2, [r7, #0]
    7c98:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c9a:	21c0      	movs	r1, #192	; 0xc0
    7c9c:	6878      	ldr	r0, [r7, #4]
    7c9e:	4b03      	ldr	r3, [pc, #12]	; (7cac <hri_tccount16_write_CC_reg+0x30>)
    7ca0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ca2:	bf00      	nop
    7ca4:	3708      	adds	r7, #8
    7ca6:	46bd      	mov	sp, r7
    7ca8:	bd80      	pop	{r7, pc}
    7caa:	bf00      	nop
    7cac:	0000798d 	.word	0x0000798d

00007cb0 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b082      	sub	sp, #8
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cbc:	21c0      	movs	r1, #192	; 0xc0
    7cbe:	6878      	ldr	r0, [r7, #4]
    7cc0:	4b06      	ldr	r3, [pc, #24]	; (7cdc <hri_tccount16_read_CC_reg+0x2c>)
    7cc2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7cc4:	78fb      	ldrb	r3, [r7, #3]
    7cc6:	687a      	ldr	r2, [r7, #4]
    7cc8:	330c      	adds	r3, #12
    7cca:	005b      	lsls	r3, r3, #1
    7ccc:	4413      	add	r3, r2
    7cce:	889b      	ldrh	r3, [r3, #4]
    7cd0:	b29b      	uxth	r3, r3
}
    7cd2:	4618      	mov	r0, r3
    7cd4:	3708      	adds	r7, #8
    7cd6:	46bd      	mov	sp, r7
    7cd8:	bd80      	pop	{r7, pc}
    7cda:	bf00      	nop
    7cdc:	0000798d 	.word	0x0000798d

00007ce0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b084      	sub	sp, #16
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	60f8      	str	r0, [r7, #12]
    7ce8:	460b      	mov	r3, r1
    7cea:	607a      	str	r2, [r7, #4]
    7cec:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7cee:	7afb      	ldrb	r3, [r7, #11]
    7cf0:	68fa      	ldr	r2, [r7, #12]
    7cf2:	3306      	adds	r3, #6
    7cf4:	009b      	lsls	r3, r3, #2
    7cf6:	4413      	add	r3, r2
    7cf8:	687a      	ldr	r2, [r7, #4]
    7cfa:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cfc:	21c0      	movs	r1, #192	; 0xc0
    7cfe:	68f8      	ldr	r0, [r7, #12]
    7d00:	4b02      	ldr	r3, [pc, #8]	; (7d0c <hri_tccount32_write_CC_reg+0x2c>)
    7d02:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7d04:	bf00      	nop
    7d06:	3710      	adds	r7, #16
    7d08:	46bd      	mov	sp, r7
    7d0a:	bd80      	pop	{r7, pc}
    7d0c:	0000798d 	.word	0x0000798d

00007d10 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7d10:	b580      	push	{r7, lr}
    7d12:	b082      	sub	sp, #8
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
    7d18:	460b      	mov	r3, r1
    7d1a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7d1c:	21c0      	movs	r1, #192	; 0xc0
    7d1e:	6878      	ldr	r0, [r7, #4]
    7d20:	4b05      	ldr	r3, [pc, #20]	; (7d38 <hri_tccount32_read_CC_reg+0x28>)
    7d22:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7d24:	78fb      	ldrb	r3, [r7, #3]
    7d26:	687a      	ldr	r2, [r7, #4]
    7d28:	3306      	adds	r3, #6
    7d2a:	009b      	lsls	r3, r3, #2
    7d2c:	4413      	add	r3, r2
    7d2e:	685b      	ldr	r3, [r3, #4]
}
    7d30:	4618      	mov	r0, r3
    7d32:	3708      	adds	r7, #8
    7d34:	46bd      	mov	sp, r7
    7d36:	bd80      	pop	{r7, pc}
    7d38:	0000798d 	.word	0x0000798d

00007d3c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d3c:	b580      	push	{r7, lr}
    7d3e:	b084      	sub	sp, #16
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
    7d44:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7d46:	6838      	ldr	r0, [r7, #0]
    7d48:	4b93      	ldr	r3, [pc, #588]	; (7f98 <_tc_timer_init+0x25c>)
    7d4a:	4798      	blx	r3
    7d4c:	4603      	mov	r3, r0
    7d4e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	683a      	ldr	r2, [r7, #0]
    7d54:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7d56:	22a4      	movs	r2, #164	; 0xa4
    7d58:	4990      	ldr	r1, [pc, #576]	; (7f9c <_tc_timer_init+0x260>)
    7d5a:	2001      	movs	r0, #1
    7d5c:	4b90      	ldr	r3, [pc, #576]	; (7fa0 <_tc_timer_init+0x264>)
    7d5e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d60:	2101      	movs	r1, #1
    7d62:	6838      	ldr	r0, [r7, #0]
    7d64:	4b8f      	ldr	r3, [pc, #572]	; (7fa4 <_tc_timer_init+0x268>)
    7d66:	4798      	blx	r3
    7d68:	4603      	mov	r3, r0
    7d6a:	f083 0301 	eor.w	r3, r3, #1
    7d6e:	b2db      	uxtb	r3, r3
    7d70:	2b00      	cmp	r3, #0
    7d72:	d011      	beq.n	7d98 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d74:	2102      	movs	r1, #2
    7d76:	6838      	ldr	r0, [r7, #0]
    7d78:	4b8b      	ldr	r3, [pc, #556]	; (7fa8 <_tc_timer_init+0x26c>)
    7d7a:	4798      	blx	r3
    7d7c:	4603      	mov	r3, r0
    7d7e:	2b00      	cmp	r3, #0
    7d80:	d006      	beq.n	7d90 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d82:	6838      	ldr	r0, [r7, #0]
    7d84:	4b89      	ldr	r3, [pc, #548]	; (7fac <_tc_timer_init+0x270>)
    7d86:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d88:	2102      	movs	r1, #2
    7d8a:	6838      	ldr	r0, [r7, #0]
    7d8c:	4b88      	ldr	r3, [pc, #544]	; (7fb0 <_tc_timer_init+0x274>)
    7d8e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d90:	2101      	movs	r1, #1
    7d92:	6838      	ldr	r0, [r7, #0]
    7d94:	4b87      	ldr	r3, [pc, #540]	; (7fb4 <_tc_timer_init+0x278>)
    7d96:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d98:	2101      	movs	r1, #1
    7d9a:	6838      	ldr	r0, [r7, #0]
    7d9c:	4b84      	ldr	r3, [pc, #528]	; (7fb0 <_tc_timer_init+0x274>)
    7d9e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7da0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7da4:	4984      	ldr	r1, [pc, #528]	; (7fb8 <_tc_timer_init+0x27c>)
    7da6:	4613      	mov	r3, r2
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	4413      	add	r3, r2
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	440b      	add	r3, r1
    7db0:	3304      	adds	r3, #4
    7db2:	681b      	ldr	r3, [r3, #0]
    7db4:	4619      	mov	r1, r3
    7db6:	6838      	ldr	r0, [r7, #0]
    7db8:	4b7e      	ldr	r3, [pc, #504]	; (7fb4 <_tc_timer_init+0x278>)
    7dba:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7dbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dc0:	497d      	ldr	r1, [pc, #500]	; (7fb8 <_tc_timer_init+0x27c>)
    7dc2:	4613      	mov	r3, r2
    7dc4:	009b      	lsls	r3, r3, #2
    7dc6:	4413      	add	r3, r2
    7dc8:	009b      	lsls	r3, r3, #2
    7dca:	440b      	add	r3, r1
    7dcc:	330a      	adds	r3, #10
    7dce:	781b      	ldrb	r3, [r3, #0]
    7dd0:	4619      	mov	r1, r3
    7dd2:	6838      	ldr	r0, [r7, #0]
    7dd4:	4b79      	ldr	r3, [pc, #484]	; (7fbc <_tc_timer_init+0x280>)
    7dd6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7dd8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ddc:	4976      	ldr	r1, [pc, #472]	; (7fb8 <_tc_timer_init+0x27c>)
    7dde:	4613      	mov	r3, r2
    7de0:	009b      	lsls	r3, r3, #2
    7de2:	4413      	add	r3, r2
    7de4:	009b      	lsls	r3, r3, #2
    7de6:	440b      	add	r3, r1
    7de8:	3308      	adds	r3, #8
    7dea:	881b      	ldrh	r3, [r3, #0]
    7dec:	4619      	mov	r1, r3
    7dee:	6838      	ldr	r0, [r7, #0]
    7df0:	4b73      	ldr	r3, [pc, #460]	; (7fc0 <_tc_timer_init+0x284>)
    7df2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7df4:	2101      	movs	r1, #1
    7df6:	6838      	ldr	r0, [r7, #0]
    7df8:	4b72      	ldr	r3, [pc, #456]	; (7fc4 <_tc_timer_init+0x288>)
    7dfa:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7dfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e00:	496d      	ldr	r1, [pc, #436]	; (7fb8 <_tc_timer_init+0x27c>)
    7e02:	4613      	mov	r3, r2
    7e04:	009b      	lsls	r3, r3, #2
    7e06:	4413      	add	r3, r2
    7e08:	009b      	lsls	r3, r3, #2
    7e0a:	440b      	add	r3, r1
    7e0c:	3304      	adds	r3, #4
    7e0e:	681b      	ldr	r3, [r3, #0]
    7e10:	f003 030c 	and.w	r3, r3, #12
    7e14:	2b08      	cmp	r3, #8
    7e16:	d11e      	bne.n	7e56 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7e18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e1c:	4966      	ldr	r1, [pc, #408]	; (7fb8 <_tc_timer_init+0x27c>)
    7e1e:	4613      	mov	r3, r2
    7e20:	009b      	lsls	r3, r3, #2
    7e22:	4413      	add	r3, r2
    7e24:	009b      	lsls	r3, r3, #2
    7e26:	440b      	add	r3, r1
    7e28:	330c      	adds	r3, #12
    7e2a:	681b      	ldr	r3, [r3, #0]
    7e2c:	461a      	mov	r2, r3
    7e2e:	2100      	movs	r1, #0
    7e30:	6838      	ldr	r0, [r7, #0]
    7e32:	4b65      	ldr	r3, [pc, #404]	; (7fc8 <_tc_timer_init+0x28c>)
    7e34:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7e36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e3a:	495f      	ldr	r1, [pc, #380]	; (7fb8 <_tc_timer_init+0x27c>)
    7e3c:	4613      	mov	r3, r2
    7e3e:	009b      	lsls	r3, r3, #2
    7e40:	4413      	add	r3, r2
    7e42:	009b      	lsls	r3, r3, #2
    7e44:	440b      	add	r3, r1
    7e46:	3310      	adds	r3, #16
    7e48:	681b      	ldr	r3, [r3, #0]
    7e4a:	461a      	mov	r2, r3
    7e4c:	2101      	movs	r1, #1
    7e4e:	6838      	ldr	r0, [r7, #0]
    7e50:	4b5d      	ldr	r3, [pc, #372]	; (7fc8 <_tc_timer_init+0x28c>)
    7e52:	4798      	blx	r3
    7e54:	e06a      	b.n	7f2c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e5a:	4957      	ldr	r1, [pc, #348]	; (7fb8 <_tc_timer_init+0x27c>)
    7e5c:	4613      	mov	r3, r2
    7e5e:	009b      	lsls	r3, r3, #2
    7e60:	4413      	add	r3, r2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	440b      	add	r3, r1
    7e66:	3304      	adds	r3, #4
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	f003 030c 	and.w	r3, r3, #12
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d120      	bne.n	7eb4 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e76:	4950      	ldr	r1, [pc, #320]	; (7fb8 <_tc_timer_init+0x27c>)
    7e78:	4613      	mov	r3, r2
    7e7a:	009b      	lsls	r3, r3, #2
    7e7c:	4413      	add	r3, r2
    7e7e:	009b      	lsls	r3, r3, #2
    7e80:	440b      	add	r3, r1
    7e82:	330c      	adds	r3, #12
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	b29b      	uxth	r3, r3
    7e88:	461a      	mov	r2, r3
    7e8a:	2100      	movs	r1, #0
    7e8c:	6838      	ldr	r0, [r7, #0]
    7e8e:	4b4f      	ldr	r3, [pc, #316]	; (7fcc <_tc_timer_init+0x290>)
    7e90:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e92:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e96:	4948      	ldr	r1, [pc, #288]	; (7fb8 <_tc_timer_init+0x27c>)
    7e98:	4613      	mov	r3, r2
    7e9a:	009b      	lsls	r3, r3, #2
    7e9c:	4413      	add	r3, r2
    7e9e:	009b      	lsls	r3, r3, #2
    7ea0:	440b      	add	r3, r1
    7ea2:	3310      	adds	r3, #16
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	b29b      	uxth	r3, r3
    7ea8:	461a      	mov	r2, r3
    7eaa:	2101      	movs	r1, #1
    7eac:	6838      	ldr	r0, [r7, #0]
    7eae:	4b47      	ldr	r3, [pc, #284]	; (7fcc <_tc_timer_init+0x290>)
    7eb0:	4798      	blx	r3
    7eb2:	e03b      	b.n	7f2c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7eb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eb8:	493f      	ldr	r1, [pc, #252]	; (7fb8 <_tc_timer_init+0x27c>)
    7eba:	4613      	mov	r3, r2
    7ebc:	009b      	lsls	r3, r3, #2
    7ebe:	4413      	add	r3, r2
    7ec0:	009b      	lsls	r3, r3, #2
    7ec2:	440b      	add	r3, r1
    7ec4:	3304      	adds	r3, #4
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	f003 030c 	and.w	r3, r3, #12
    7ecc:	2b04      	cmp	r3, #4
    7ece:	d12d      	bne.n	7f2c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7ed0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ed4:	4938      	ldr	r1, [pc, #224]	; (7fb8 <_tc_timer_init+0x27c>)
    7ed6:	4613      	mov	r3, r2
    7ed8:	009b      	lsls	r3, r3, #2
    7eda:	4413      	add	r3, r2
    7edc:	009b      	lsls	r3, r3, #2
    7ede:	440b      	add	r3, r1
    7ee0:	330c      	adds	r3, #12
    7ee2:	681b      	ldr	r3, [r3, #0]
    7ee4:	b2db      	uxtb	r3, r3
    7ee6:	461a      	mov	r2, r3
    7ee8:	2100      	movs	r1, #0
    7eea:	6838      	ldr	r0, [r7, #0]
    7eec:	4b38      	ldr	r3, [pc, #224]	; (7fd0 <_tc_timer_init+0x294>)
    7eee:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ef0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ef4:	4930      	ldr	r1, [pc, #192]	; (7fb8 <_tc_timer_init+0x27c>)
    7ef6:	4613      	mov	r3, r2
    7ef8:	009b      	lsls	r3, r3, #2
    7efa:	4413      	add	r3, r2
    7efc:	009b      	lsls	r3, r3, #2
    7efe:	440b      	add	r3, r1
    7f00:	3310      	adds	r3, #16
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	b2db      	uxtb	r3, r3
    7f06:	461a      	mov	r2, r3
    7f08:	2101      	movs	r1, #1
    7f0a:	6838      	ldr	r0, [r7, #0]
    7f0c:	4b30      	ldr	r3, [pc, #192]	; (7fd0 <_tc_timer_init+0x294>)
    7f0e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7f10:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f14:	4928      	ldr	r1, [pc, #160]	; (7fb8 <_tc_timer_init+0x27c>)
    7f16:	4613      	mov	r3, r2
    7f18:	009b      	lsls	r3, r3, #2
    7f1a:	4413      	add	r3, r2
    7f1c:	009b      	lsls	r3, r3, #2
    7f1e:	440b      	add	r3, r1
    7f20:	330b      	adds	r3, #11
    7f22:	781b      	ldrb	r3, [r3, #0]
    7f24:	4619      	mov	r1, r3
    7f26:	6838      	ldr	r0, [r7, #0]
    7f28:	4b2a      	ldr	r3, [pc, #168]	; (7fd4 <_tc_timer_init+0x298>)
    7f2a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7f2c:	6838      	ldr	r0, [r7, #0]
    7f2e:	4b2a      	ldr	r3, [pc, #168]	; (7fd8 <_tc_timer_init+0x29c>)
    7f30:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7f32:	6879      	ldr	r1, [r7, #4]
    7f34:	6838      	ldr	r0, [r7, #0]
    7f36:	4b29      	ldr	r3, [pc, #164]	; (7fdc <_tc_timer_init+0x2a0>)
    7f38:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7f3a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f3e:	491e      	ldr	r1, [pc, #120]	; (7fb8 <_tc_timer_init+0x27c>)
    7f40:	4613      	mov	r3, r2
    7f42:	009b      	lsls	r3, r3, #2
    7f44:	4413      	add	r3, r2
    7f46:	009b      	lsls	r3, r3, #2
    7f48:	440b      	add	r3, r1
    7f4a:	3302      	adds	r3, #2
    7f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f50:	4618      	mov	r0, r3
    7f52:	4b23      	ldr	r3, [pc, #140]	; (7fe0 <_tc_timer_init+0x2a4>)
    7f54:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7f56:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f5a:	4917      	ldr	r1, [pc, #92]	; (7fb8 <_tc_timer_init+0x27c>)
    7f5c:	4613      	mov	r3, r2
    7f5e:	009b      	lsls	r3, r3, #2
    7f60:	4413      	add	r3, r2
    7f62:	009b      	lsls	r3, r3, #2
    7f64:	440b      	add	r3, r1
    7f66:	3302      	adds	r3, #2
    7f68:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f6c:	4618      	mov	r0, r3
    7f6e:	4b1d      	ldr	r3, [pc, #116]	; (7fe4 <_tc_timer_init+0x2a8>)
    7f70:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7f72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f76:	4910      	ldr	r1, [pc, #64]	; (7fb8 <_tc_timer_init+0x27c>)
    7f78:	4613      	mov	r3, r2
    7f7a:	009b      	lsls	r3, r3, #2
    7f7c:	4413      	add	r3, r2
    7f7e:	009b      	lsls	r3, r3, #2
    7f80:	440b      	add	r3, r1
    7f82:	3302      	adds	r3, #2
    7f84:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f88:	4618      	mov	r0, r3
    7f8a:	4b17      	ldr	r3, [pc, #92]	; (7fe8 <_tc_timer_init+0x2ac>)
    7f8c:	4798      	blx	r3

	return ERR_NONE;
    7f8e:	2300      	movs	r3, #0
}
    7f90:	4618      	mov	r0, r3
    7f92:	3710      	adds	r7, #16
    7f94:	46bd      	mov	sp, r7
    7f96:	bd80      	pop	{r7, pc}
    7f98:	000085cd 	.word	0x000085cd
    7f9c:	0000f1b8 	.word	0x0000f1b8
    7fa0:	00003511 	.word	0x00003511
    7fa4:	000079b1 	.word	0x000079b1
    7fa8:	00007b51 	.word	0x00007b51
    7fac:	00007b01 	.word	0x00007b01
    7fb0:	0000798d 	.word	0x0000798d
    7fb4:	00007b81 	.word	0x00007b81
    7fb8:	200000e0 	.word	0x200000e0
    7fbc:	00007be1 	.word	0x00007be1
    7fc0:	00007ba5 	.word	0x00007ba5
    7fc4:	00007bc3 	.word	0x00007bc3
    7fc8:	00007ce1 	.word	0x00007ce1
    7fcc:	00007c7d 	.word	0x00007c7d
    7fd0:	00007c4d 	.word	0x00007c4d
    7fd4:	00007c01 	.word	0x00007c01
    7fd8:	00007a35 	.word	0x00007a35
    7fdc:	00008635 	.word	0x00008635
    7fe0:	0000790d 	.word	0x0000790d
    7fe4:	00007951 	.word	0x00007951
    7fe8:	000078d1 	.word	0x000078d1

00007fec <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7fec:	b580      	push	{r7, lr}
    7fee:	b084      	sub	sp, #16
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	6078      	str	r0, [r7, #4]
    7ff4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7ff6:	6838      	ldr	r0, [r7, #0]
    7ff8:	4b73      	ldr	r3, [pc, #460]	; (81c8 <_pwm_init+0x1dc>)
    7ffa:	4798      	blx	r3
    7ffc:	4603      	mov	r3, r0
    7ffe:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	683a      	ldr	r2, [r7, #0]
    8004:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8006:	2101      	movs	r1, #1
    8008:	6838      	ldr	r0, [r7, #0]
    800a:	4b70      	ldr	r3, [pc, #448]	; (81cc <_pwm_init+0x1e0>)
    800c:	4798      	blx	r3
    800e:	4603      	mov	r3, r0
    8010:	f083 0301 	eor.w	r3, r3, #1
    8014:	b2db      	uxtb	r3, r3
    8016:	2b00      	cmp	r3, #0
    8018:	d011      	beq.n	803e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    801a:	2102      	movs	r1, #2
    801c:	6838      	ldr	r0, [r7, #0]
    801e:	4b6c      	ldr	r3, [pc, #432]	; (81d0 <_pwm_init+0x1e4>)
    8020:	4798      	blx	r3
    8022:	4603      	mov	r3, r0
    8024:	2b00      	cmp	r3, #0
    8026:	d006      	beq.n	8036 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8028:	6838      	ldr	r0, [r7, #0]
    802a:	4b6a      	ldr	r3, [pc, #424]	; (81d4 <_pwm_init+0x1e8>)
    802c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    802e:	2102      	movs	r1, #2
    8030:	6838      	ldr	r0, [r7, #0]
    8032:	4b69      	ldr	r3, [pc, #420]	; (81d8 <_pwm_init+0x1ec>)
    8034:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8036:	2101      	movs	r1, #1
    8038:	6838      	ldr	r0, [r7, #0]
    803a:	4b68      	ldr	r3, [pc, #416]	; (81dc <_pwm_init+0x1f0>)
    803c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    803e:	2101      	movs	r1, #1
    8040:	6838      	ldr	r0, [r7, #0]
    8042:	4b65      	ldr	r3, [pc, #404]	; (81d8 <_pwm_init+0x1ec>)
    8044:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8046:	f997 200f 	ldrsb.w	r2, [r7, #15]
    804a:	4965      	ldr	r1, [pc, #404]	; (81e0 <_pwm_init+0x1f4>)
    804c:	4613      	mov	r3, r2
    804e:	009b      	lsls	r3, r3, #2
    8050:	4413      	add	r3, r2
    8052:	009b      	lsls	r3, r3, #2
    8054:	440b      	add	r3, r1
    8056:	3304      	adds	r3, #4
    8058:	681b      	ldr	r3, [r3, #0]
    805a:	4619      	mov	r1, r3
    805c:	6838      	ldr	r0, [r7, #0]
    805e:	4b5f      	ldr	r3, [pc, #380]	; (81dc <_pwm_init+0x1f0>)
    8060:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8062:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8066:	495e      	ldr	r1, [pc, #376]	; (81e0 <_pwm_init+0x1f4>)
    8068:	4613      	mov	r3, r2
    806a:	009b      	lsls	r3, r3, #2
    806c:	4413      	add	r3, r2
    806e:	009b      	lsls	r3, r3, #2
    8070:	440b      	add	r3, r1
    8072:	330a      	adds	r3, #10
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	4619      	mov	r1, r3
    8078:	6838      	ldr	r0, [r7, #0]
    807a:	4b5a      	ldr	r3, [pc, #360]	; (81e4 <_pwm_init+0x1f8>)
    807c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    807e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8082:	4957      	ldr	r1, [pc, #348]	; (81e0 <_pwm_init+0x1f4>)
    8084:	4613      	mov	r3, r2
    8086:	009b      	lsls	r3, r3, #2
    8088:	4413      	add	r3, r2
    808a:	009b      	lsls	r3, r3, #2
    808c:	440b      	add	r3, r1
    808e:	3308      	adds	r3, #8
    8090:	881b      	ldrh	r3, [r3, #0]
    8092:	4619      	mov	r1, r3
    8094:	6838      	ldr	r0, [r7, #0]
    8096:	4b54      	ldr	r3, [pc, #336]	; (81e8 <_pwm_init+0x1fc>)
    8098:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    809a:	2103      	movs	r1, #3
    809c:	6838      	ldr	r0, [r7, #0]
    809e:	4b53      	ldr	r3, [pc, #332]	; (81ec <_pwm_init+0x200>)
    80a0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    80a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80a6:	494e      	ldr	r1, [pc, #312]	; (81e0 <_pwm_init+0x1f4>)
    80a8:	4613      	mov	r3, r2
    80aa:	009b      	lsls	r3, r3, #2
    80ac:	4413      	add	r3, r2
    80ae:	009b      	lsls	r3, r3, #2
    80b0:	440b      	add	r3, r1
    80b2:	3304      	adds	r3, #4
    80b4:	681b      	ldr	r3, [r3, #0]
    80b6:	f003 030c 	and.w	r3, r3, #12
    80ba:	2b08      	cmp	r3, #8
    80bc:	d11e      	bne.n	80fc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    80be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80c2:	4947      	ldr	r1, [pc, #284]	; (81e0 <_pwm_init+0x1f4>)
    80c4:	4613      	mov	r3, r2
    80c6:	009b      	lsls	r3, r3, #2
    80c8:	4413      	add	r3, r2
    80ca:	009b      	lsls	r3, r3, #2
    80cc:	440b      	add	r3, r1
    80ce:	330c      	adds	r3, #12
    80d0:	681b      	ldr	r3, [r3, #0]
    80d2:	461a      	mov	r2, r3
    80d4:	2100      	movs	r1, #0
    80d6:	6838      	ldr	r0, [r7, #0]
    80d8:	4b45      	ldr	r3, [pc, #276]	; (81f0 <_pwm_init+0x204>)
    80da:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    80dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80e0:	493f      	ldr	r1, [pc, #252]	; (81e0 <_pwm_init+0x1f4>)
    80e2:	4613      	mov	r3, r2
    80e4:	009b      	lsls	r3, r3, #2
    80e6:	4413      	add	r3, r2
    80e8:	009b      	lsls	r3, r3, #2
    80ea:	440b      	add	r3, r1
    80ec:	3310      	adds	r3, #16
    80ee:	681b      	ldr	r3, [r3, #0]
    80f0:	461a      	mov	r2, r3
    80f2:	2101      	movs	r1, #1
    80f4:	6838      	ldr	r0, [r7, #0]
    80f6:	4b3e      	ldr	r3, [pc, #248]	; (81f0 <_pwm_init+0x204>)
    80f8:	4798      	blx	r3
    80fa:	e031      	b.n	8160 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    80fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8100:	4937      	ldr	r1, [pc, #220]	; (81e0 <_pwm_init+0x1f4>)
    8102:	4613      	mov	r3, r2
    8104:	009b      	lsls	r3, r3, #2
    8106:	4413      	add	r3, r2
    8108:	009b      	lsls	r3, r3, #2
    810a:	440b      	add	r3, r1
    810c:	3304      	adds	r3, #4
    810e:	681b      	ldr	r3, [r3, #0]
    8110:	f003 030c 	and.w	r3, r3, #12
    8114:	2b00      	cmp	r3, #0
    8116:	d120      	bne.n	815a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8118:	f997 200f 	ldrsb.w	r2, [r7, #15]
    811c:	4930      	ldr	r1, [pc, #192]	; (81e0 <_pwm_init+0x1f4>)
    811e:	4613      	mov	r3, r2
    8120:	009b      	lsls	r3, r3, #2
    8122:	4413      	add	r3, r2
    8124:	009b      	lsls	r3, r3, #2
    8126:	440b      	add	r3, r1
    8128:	330c      	adds	r3, #12
    812a:	681b      	ldr	r3, [r3, #0]
    812c:	b29b      	uxth	r3, r3
    812e:	461a      	mov	r2, r3
    8130:	2100      	movs	r1, #0
    8132:	6838      	ldr	r0, [r7, #0]
    8134:	4b2f      	ldr	r3, [pc, #188]	; (81f4 <_pwm_init+0x208>)
    8136:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8138:	f997 200f 	ldrsb.w	r2, [r7, #15]
    813c:	4928      	ldr	r1, [pc, #160]	; (81e0 <_pwm_init+0x1f4>)
    813e:	4613      	mov	r3, r2
    8140:	009b      	lsls	r3, r3, #2
    8142:	4413      	add	r3, r2
    8144:	009b      	lsls	r3, r3, #2
    8146:	440b      	add	r3, r1
    8148:	3310      	adds	r3, #16
    814a:	681b      	ldr	r3, [r3, #0]
    814c:	b29b      	uxth	r3, r3
    814e:	461a      	mov	r2, r3
    8150:	2101      	movs	r1, #1
    8152:	6838      	ldr	r0, [r7, #0]
    8154:	4b27      	ldr	r3, [pc, #156]	; (81f4 <_pwm_init+0x208>)
    8156:	4798      	blx	r3
    8158:	e002      	b.n	8160 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    815a:	f04f 33ff 	mov.w	r3, #4294967295
    815e:	e02e      	b.n	81be <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8160:	6879      	ldr	r1, [r7, #4]
    8162:	6838      	ldr	r0, [r7, #0]
    8164:	4b24      	ldr	r3, [pc, #144]	; (81f8 <_pwm_init+0x20c>)
    8166:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8168:	f997 200f 	ldrsb.w	r2, [r7, #15]
    816c:	491c      	ldr	r1, [pc, #112]	; (81e0 <_pwm_init+0x1f4>)
    816e:	4613      	mov	r3, r2
    8170:	009b      	lsls	r3, r3, #2
    8172:	4413      	add	r3, r2
    8174:	009b      	lsls	r3, r3, #2
    8176:	440b      	add	r3, r1
    8178:	3302      	adds	r3, #2
    817a:	f9b3 3000 	ldrsh.w	r3, [r3]
    817e:	4618      	mov	r0, r3
    8180:	4b1e      	ldr	r3, [pc, #120]	; (81fc <_pwm_init+0x210>)
    8182:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8184:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8188:	4915      	ldr	r1, [pc, #84]	; (81e0 <_pwm_init+0x1f4>)
    818a:	4613      	mov	r3, r2
    818c:	009b      	lsls	r3, r3, #2
    818e:	4413      	add	r3, r2
    8190:	009b      	lsls	r3, r3, #2
    8192:	440b      	add	r3, r1
    8194:	3302      	adds	r3, #2
    8196:	f9b3 3000 	ldrsh.w	r3, [r3]
    819a:	4618      	mov	r0, r3
    819c:	4b18      	ldr	r3, [pc, #96]	; (8200 <_pwm_init+0x214>)
    819e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    81a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81a4:	490e      	ldr	r1, [pc, #56]	; (81e0 <_pwm_init+0x1f4>)
    81a6:	4613      	mov	r3, r2
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	4413      	add	r3, r2
    81ac:	009b      	lsls	r3, r3, #2
    81ae:	440b      	add	r3, r1
    81b0:	3302      	adds	r3, #2
    81b2:	f9b3 3000 	ldrsh.w	r3, [r3]
    81b6:	4618      	mov	r0, r3
    81b8:	4b12      	ldr	r3, [pc, #72]	; (8204 <_pwm_init+0x218>)
    81ba:	4798      	blx	r3

	return 0;
    81bc:	2300      	movs	r3, #0
}
    81be:	4618      	mov	r0, r3
    81c0:	3710      	adds	r7, #16
    81c2:	46bd      	mov	sp, r7
    81c4:	bd80      	pop	{r7, pc}
    81c6:	bf00      	nop
    81c8:	000085cd 	.word	0x000085cd
    81cc:	000079b1 	.word	0x000079b1
    81d0:	00007b51 	.word	0x00007b51
    81d4:	00007b01 	.word	0x00007b01
    81d8:	0000798d 	.word	0x0000798d
    81dc:	00007b81 	.word	0x00007b81
    81e0:	200000e0 	.word	0x200000e0
    81e4:	00007be1 	.word	0x00007be1
    81e8:	00007ba5 	.word	0x00007ba5
    81ec:	00007bc3 	.word	0x00007bc3
    81f0:	00007ce1 	.word	0x00007ce1
    81f4:	00007c7d 	.word	0x00007c7d
    81f8:	00008635 	.word	0x00008635
    81fc:	0000790d 	.word	0x0000790d
    8200:	00007951 	.word	0x00007951
    8204:	000078d1 	.word	0x000078d1

00008208 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8208:	b580      	push	{r7, lr}
    820a:	b084      	sub	sp, #16
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	68db      	ldr	r3, [r3, #12]
    8214:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8216:	68f8      	ldr	r0, [r7, #12]
    8218:	4b10      	ldr	r3, [pc, #64]	; (825c <_tc_timer_deinit+0x54>)
    821a:	4798      	blx	r3
    821c:	4603      	mov	r3, r0
    821e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8220:	22f9      	movs	r2, #249	; 0xf9
    8222:	490f      	ldr	r1, [pc, #60]	; (8260 <_tc_timer_deinit+0x58>)
    8224:	2001      	movs	r0, #1
    8226:	4b0f      	ldr	r3, [pc, #60]	; (8264 <_tc_timer_deinit+0x5c>)
    8228:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    822a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    822e:	490e      	ldr	r1, [pc, #56]	; (8268 <_tc_timer_deinit+0x60>)
    8230:	4613      	mov	r3, r2
    8232:	009b      	lsls	r3, r3, #2
    8234:	4413      	add	r3, r2
    8236:	009b      	lsls	r3, r3, #2
    8238:	440b      	add	r3, r1
    823a:	3302      	adds	r3, #2
    823c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8240:	4618      	mov	r0, r3
    8242:	4b0a      	ldr	r3, [pc, #40]	; (826c <_tc_timer_deinit+0x64>)
    8244:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8246:	68f8      	ldr	r0, [r7, #12]
    8248:	4b09      	ldr	r3, [pc, #36]	; (8270 <_tc_timer_deinit+0x68>)
    824a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    824c:	68f8      	ldr	r0, [r7, #12]
    824e:	4b09      	ldr	r3, [pc, #36]	; (8274 <_tc_timer_deinit+0x6c>)
    8250:	4798      	blx	r3
}
    8252:	bf00      	nop
    8254:	3710      	adds	r7, #16
    8256:	46bd      	mov	sp, r7
    8258:	bd80      	pop	{r7, pc}
    825a:	bf00      	nop
    825c:	000085cd 	.word	0x000085cd
    8260:	0000f1b8 	.word	0x0000f1b8
    8264:	00003511 	.word	0x00003511
    8268:	200000e0 	.word	0x200000e0
    826c:	0000790d 	.word	0x0000790d
    8270:	00007b01 	.word	0x00007b01
    8274:	00007a79 	.word	0x00007a79

00008278 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8278:	b580      	push	{r7, lr}
    827a:	b082      	sub	sp, #8
    827c:	af00      	add	r7, sp, #0
    827e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8280:	687b      	ldr	r3, [r7, #4]
    8282:	68db      	ldr	r3, [r3, #12]
    8284:	4618      	mov	r0, r3
    8286:	4b03      	ldr	r3, [pc, #12]	; (8294 <_tc_timer_start+0x1c>)
    8288:	4798      	blx	r3
}
    828a:	bf00      	nop
    828c:	3708      	adds	r7, #8
    828e:	46bd      	mov	sp, r7
    8290:	bd80      	pop	{r7, pc}
    8292:	bf00      	nop
    8294:	00007aa1 	.word	0x00007aa1

00008298 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8298:	b580      	push	{r7, lr}
    829a:	b082      	sub	sp, #8
    829c:	af00      	add	r7, sp, #0
    829e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    82a0:	687b      	ldr	r3, [r7, #4]
    82a2:	691b      	ldr	r3, [r3, #16]
    82a4:	4618      	mov	r0, r3
    82a6:	4b03      	ldr	r3, [pc, #12]	; (82b4 <_pwm_enable+0x1c>)
    82a8:	4798      	blx	r3
}
    82aa:	bf00      	nop
    82ac:	3708      	adds	r7, #8
    82ae:	46bd      	mov	sp, r7
    82b0:	bd80      	pop	{r7, pc}
    82b2:	bf00      	nop
    82b4:	00007aa1 	.word	0x00007aa1

000082b8 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	68db      	ldr	r3, [r3, #12]
    82c4:	4618      	mov	r0, r3
    82c6:	4b03      	ldr	r3, [pc, #12]	; (82d4 <_tc_timer_stop+0x1c>)
    82c8:	4798      	blx	r3
}
    82ca:	bf00      	nop
    82cc:	3708      	adds	r7, #8
    82ce:	46bd      	mov	sp, r7
    82d0:	bd80      	pop	{r7, pc}
    82d2:	bf00      	nop
    82d4:	00007b01 	.word	0x00007b01

000082d8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    82d8:	b580      	push	{r7, lr}
    82da:	b084      	sub	sp, #16
    82dc:	af00      	add	r7, sp, #0
    82de:	6078      	str	r0, [r7, #4]
    82e0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    82e2:	687b      	ldr	r3, [r7, #4]
    82e4:	68db      	ldr	r3, [r3, #12]
    82e6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82e8:	68f8      	ldr	r0, [r7, #12]
    82ea:	4b14      	ldr	r3, [pc, #80]	; (833c <_tc_timer_set_period+0x64>)
    82ec:	4798      	blx	r3
    82ee:	4603      	mov	r3, r0
    82f0:	2b02      	cmp	r3, #2
    82f2:	d105      	bne.n	8300 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    82f4:	683a      	ldr	r2, [r7, #0]
    82f6:	2100      	movs	r1, #0
    82f8:	68f8      	ldr	r0, [r7, #12]
    82fa:	4b11      	ldr	r3, [pc, #68]	; (8340 <_tc_timer_set_period+0x68>)
    82fc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    82fe:	e019      	b.n	8334 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8300:	68f8      	ldr	r0, [r7, #12]
    8302:	4b0e      	ldr	r3, [pc, #56]	; (833c <_tc_timer_set_period+0x64>)
    8304:	4798      	blx	r3
    8306:	4603      	mov	r3, r0
    8308:	2b00      	cmp	r3, #0
    830a:	d107      	bne.n	831c <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    830c:	683b      	ldr	r3, [r7, #0]
    830e:	b29b      	uxth	r3, r3
    8310:	461a      	mov	r2, r3
    8312:	2100      	movs	r1, #0
    8314:	68f8      	ldr	r0, [r7, #12]
    8316:	4b0b      	ldr	r3, [pc, #44]	; (8344 <_tc_timer_set_period+0x6c>)
    8318:	4798      	blx	r3
}
    831a:	e00b      	b.n	8334 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    831c:	68f8      	ldr	r0, [r7, #12]
    831e:	4b07      	ldr	r3, [pc, #28]	; (833c <_tc_timer_set_period+0x64>)
    8320:	4798      	blx	r3
    8322:	4603      	mov	r3, r0
    8324:	2b01      	cmp	r3, #1
    8326:	d105      	bne.n	8334 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8328:	683b      	ldr	r3, [r7, #0]
    832a:	b2db      	uxtb	r3, r3
    832c:	4619      	mov	r1, r3
    832e:	68f8      	ldr	r0, [r7, #12]
    8330:	4b05      	ldr	r3, [pc, #20]	; (8348 <_tc_timer_set_period+0x70>)
    8332:	4798      	blx	r3
}
    8334:	bf00      	nop
    8336:	3710      	adds	r7, #16
    8338:	46bd      	mov	sp, r7
    833a:	bd80      	pop	{r7, pc}
    833c:	00007b29 	.word	0x00007b29
    8340:	00007ce1 	.word	0x00007ce1
    8344:	00007c7d 	.word	0x00007c7d
    8348:	00007c01 	.word	0x00007c01

0000834c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    834c:	b580      	push	{r7, lr}
    834e:	b084      	sub	sp, #16
    8350:	af00      	add	r7, sp, #0
    8352:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	68db      	ldr	r3, [r3, #12]
    8358:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    835a:	68f8      	ldr	r0, [r7, #12]
    835c:	4b13      	ldr	r3, [pc, #76]	; (83ac <_tc_timer_get_period+0x60>)
    835e:	4798      	blx	r3
    8360:	4603      	mov	r3, r0
    8362:	2b02      	cmp	r3, #2
    8364:	d105      	bne.n	8372 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8366:	2100      	movs	r1, #0
    8368:	68f8      	ldr	r0, [r7, #12]
    836a:	4b11      	ldr	r3, [pc, #68]	; (83b0 <_tc_timer_get_period+0x64>)
    836c:	4798      	blx	r3
    836e:	4603      	mov	r3, r0
    8370:	e017      	b.n	83a2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8372:	68f8      	ldr	r0, [r7, #12]
    8374:	4b0d      	ldr	r3, [pc, #52]	; (83ac <_tc_timer_get_period+0x60>)
    8376:	4798      	blx	r3
    8378:	4603      	mov	r3, r0
    837a:	2b00      	cmp	r3, #0
    837c:	d105      	bne.n	838a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    837e:	2100      	movs	r1, #0
    8380:	68f8      	ldr	r0, [r7, #12]
    8382:	4b0c      	ldr	r3, [pc, #48]	; (83b4 <_tc_timer_get_period+0x68>)
    8384:	4798      	blx	r3
    8386:	4603      	mov	r3, r0
    8388:	e00b      	b.n	83a2 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    838a:	68f8      	ldr	r0, [r7, #12]
    838c:	4b07      	ldr	r3, [pc, #28]	; (83ac <_tc_timer_get_period+0x60>)
    838e:	4798      	blx	r3
    8390:	4603      	mov	r3, r0
    8392:	2b01      	cmp	r3, #1
    8394:	d104      	bne.n	83a0 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8396:	68f8      	ldr	r0, [r7, #12]
    8398:	4b07      	ldr	r3, [pc, #28]	; (83b8 <_tc_timer_get_period+0x6c>)
    839a:	4798      	blx	r3
    839c:	4603      	mov	r3, r0
    839e:	e000      	b.n	83a2 <_tc_timer_get_period+0x56>
	}

	return 0;
    83a0:	2300      	movs	r3, #0
}
    83a2:	4618      	mov	r0, r3
    83a4:	3710      	adds	r7, #16
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop
    83ac:	00007b29 	.word	0x00007b29
    83b0:	00007d11 	.word	0x00007d11
    83b4:	00007cb1 	.word	0x00007cb1
    83b8:	00007c29 	.word	0x00007c29

000083bc <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    83bc:	b580      	push	{r7, lr}
    83be:	b082      	sub	sp, #8
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	68db      	ldr	r3, [r3, #12]
    83c8:	4618      	mov	r0, r3
    83ca:	4b03      	ldr	r3, [pc, #12]	; (83d8 <_tc_timer_is_started+0x1c>)
    83cc:	4798      	blx	r3
    83ce:	4603      	mov	r3, r0
}
    83d0:	4618      	mov	r0, r3
    83d2:	3708      	adds	r7, #8
    83d4:	46bd      	mov	sp, r7
    83d6:	bd80      	pop	{r7, pc}
    83d8:	00007ac9 	.word	0x00007ac9

000083dc <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    83dc:	b580      	push	{r7, lr}
    83de:	b082      	sub	sp, #8
    83e0:	af00      	add	r7, sp, #0
    83e2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	691b      	ldr	r3, [r3, #16]
    83e8:	4618      	mov	r0, r3
    83ea:	4b03      	ldr	r3, [pc, #12]	; (83f8 <_pwm_is_enabled+0x1c>)
    83ec:	4798      	blx	r3
    83ee:	4603      	mov	r3, r0
}
    83f0:	4618      	mov	r0, r3
    83f2:	3708      	adds	r7, #8
    83f4:	46bd      	mov	sp, r7
    83f6:	bd80      	pop	{r7, pc}
    83f8:	00007ac9 	.word	0x00007ac9

000083fc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    83fc:	b480      	push	{r7}
    83fe:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8400:	4b02      	ldr	r3, [pc, #8]	; (840c <_tc_get_timer+0x10>)
}
    8402:	4618      	mov	r0, r3
    8404:	46bd      	mov	sp, r7
    8406:	f85d 7b04 	ldr.w	r7, [sp], #4
    840a:	4770      	bx	lr
    840c:	20000158 	.word	0x20000158

00008410 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8410:	b480      	push	{r7}
    8412:	af00      	add	r7, sp, #0
	return NULL;
    8414:	2300      	movs	r3, #0
}
    8416:	4618      	mov	r0, r3
    8418:	46bd      	mov	sp, r7
    841a:	f85d 7b04 	ldr.w	r7, [sp], #4
    841e:	4770      	bx	lr

00008420 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8420:	b580      	push	{r7, lr}
    8422:	b084      	sub	sp, #16
    8424:	af00      	add	r7, sp, #0
    8426:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	68db      	ldr	r3, [r3, #12]
    842c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    842e:	68f8      	ldr	r0, [r7, #12]
    8430:	4b0e      	ldr	r3, [pc, #56]	; (846c <_tc_timer_set_irq+0x4c>)
    8432:	4798      	blx	r3
    8434:	4603      	mov	r3, r0
    8436:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8438:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    843c:	490c      	ldr	r1, [pc, #48]	; (8470 <_tc_timer_set_irq+0x50>)
    843e:	2001      	movs	r0, #1
    8440:	4b0c      	ldr	r3, [pc, #48]	; (8474 <_tc_timer_set_irq+0x54>)
    8442:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8444:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8448:	490b      	ldr	r1, [pc, #44]	; (8478 <_tc_timer_set_irq+0x58>)
    844a:	4613      	mov	r3, r2
    844c:	009b      	lsls	r3, r3, #2
    844e:	4413      	add	r3, r2
    8450:	009b      	lsls	r3, r3, #2
    8452:	440b      	add	r3, r1
    8454:	3302      	adds	r3, #2
    8456:	f9b3 3000 	ldrsh.w	r3, [r3]
    845a:	b2db      	uxtb	r3, r3
    845c:	4618      	mov	r0, r3
    845e:	4b07      	ldr	r3, [pc, #28]	; (847c <_tc_timer_set_irq+0x5c>)
    8460:	4798      	blx	r3
}
    8462:	bf00      	nop
    8464:	3710      	adds	r7, #16
    8466:	46bd      	mov	sp, r7
    8468:	bd80      	pop	{r7, pc}
    846a:	bf00      	nop
    846c:	000085cd 	.word	0x000085cd
    8470:	0000f1b8 	.word	0x0000f1b8
    8474:	00003511 	.word	0x00003511
    8478:	200000e0 	.word	0x200000e0
    847c:	00003d5d 	.word	0x00003d5d

00008480 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8480:	b580      	push	{r7, lr}
    8482:	b084      	sub	sp, #16
    8484:	af00      	add	r7, sp, #0
    8486:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	68db      	ldr	r3, [r3, #12]
    848c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    848e:	68f8      	ldr	r0, [r7, #12]
    8490:	4b07      	ldr	r3, [pc, #28]	; (84b0 <tc_interrupt_handler+0x30>)
    8492:	4798      	blx	r3
    8494:	4603      	mov	r3, r0
    8496:	2b00      	cmp	r3, #0
    8498:	d006      	beq.n	84a8 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    849a:	68f8      	ldr	r0, [r7, #12]
    849c:	4b05      	ldr	r3, [pc, #20]	; (84b4 <tc_interrupt_handler+0x34>)
    849e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    84a0:	687b      	ldr	r3, [r7, #4]
    84a2:	681b      	ldr	r3, [r3, #0]
    84a4:	6878      	ldr	r0, [r7, #4]
    84a6:	4798      	blx	r3
	}
}
    84a8:	bf00      	nop
    84aa:	3710      	adds	r7, #16
    84ac:	46bd      	mov	sp, r7
    84ae:	bd80      	pop	{r7, pc}
    84b0:	000079d9 	.word	0x000079d9
    84b4:	00007a01 	.word	0x00007a01

000084b8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b084      	sub	sp, #16
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    84c0:	687b      	ldr	r3, [r7, #4]
    84c2:	691b      	ldr	r3, [r3, #16]
    84c4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    84c6:	68f8      	ldr	r0, [r7, #12]
    84c8:	4b12      	ldr	r3, [pc, #72]	; (8514 <tc_pwm_interrupt_handler+0x5c>)
    84ca:	4798      	blx	r3
    84cc:	4603      	mov	r3, r0
    84ce:	2b00      	cmp	r3, #0
    84d0:	d00a      	beq.n	84e8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    84d2:	68f8      	ldr	r0, [r7, #12]
    84d4:	4b10      	ldr	r3, [pc, #64]	; (8518 <tc_pwm_interrupt_handler+0x60>)
    84d6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    84d8:	687b      	ldr	r3, [r7, #4]
    84da:	681b      	ldr	r3, [r3, #0]
    84dc:	2b00      	cmp	r3, #0
    84de:	d003      	beq.n	84e8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	6878      	ldr	r0, [r7, #4]
    84e6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    84e8:	68f8      	ldr	r0, [r7, #12]
    84ea:	4b0c      	ldr	r3, [pc, #48]	; (851c <tc_pwm_interrupt_handler+0x64>)
    84ec:	4798      	blx	r3
    84ee:	4603      	mov	r3, r0
    84f0:	2b00      	cmp	r3, #0
    84f2:	d00a      	beq.n	850a <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    84f4:	68f8      	ldr	r0, [r7, #12]
    84f6:	4b0a      	ldr	r3, [pc, #40]	; (8520 <tc_pwm_interrupt_handler+0x68>)
    84f8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	685b      	ldr	r3, [r3, #4]
    84fe:	2b00      	cmp	r3, #0
    8500:	d003      	beq.n	850a <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8502:	687b      	ldr	r3, [r7, #4]
    8504:	685b      	ldr	r3, [r3, #4]
    8506:	6878      	ldr	r0, [r7, #4]
    8508:	4798      	blx	r3
		}
	}
}
    850a:	bf00      	nop
    850c:	3710      	adds	r7, #16
    850e:	46bd      	mov	sp, r7
    8510:	bd80      	pop	{r7, pc}
    8512:	bf00      	nop
    8514:	000079d9 	.word	0x000079d9
    8518:	00007a01 	.word	0x00007a01
    851c:	00007a4f 	.word	0x00007a4f
    8520:	00007a1b 	.word	0x00007a1b

00008524 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8524:	b580      	push	{r7, lr}
    8526:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8528:	4b03      	ldr	r3, [pc, #12]	; (8538 <TC0_Handler+0x14>)
    852a:	681b      	ldr	r3, [r3, #0]
    852c:	4618      	mov	r0, r3
    852e:	4b03      	ldr	r3, [pc, #12]	; (853c <TC0_Handler+0x18>)
    8530:	4798      	blx	r3
}
    8532:	bf00      	nop
    8534:	bd80      	pop	{r7, pc}
    8536:	bf00      	nop
    8538:	20000838 	.word	0x20000838
    853c:	00008481 	.word	0x00008481

00008540 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8540:	b580      	push	{r7, lr}
    8542:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8544:	4b03      	ldr	r3, [pc, #12]	; (8554 <TC2_Handler+0x14>)
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	4618      	mov	r0, r3
    854a:	4b03      	ldr	r3, [pc, #12]	; (8558 <TC2_Handler+0x18>)
    854c:	4798      	blx	r3
}
    854e:	bf00      	nop
    8550:	bd80      	pop	{r7, pc}
    8552:	bf00      	nop
    8554:	2000083c 	.word	0x2000083c
    8558:	00008481 	.word	0x00008481

0000855c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    855c:	b580      	push	{r7, lr}
    855e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8560:	4b03      	ldr	r3, [pc, #12]	; (8570 <TC4_Handler+0x14>)
    8562:	681b      	ldr	r3, [r3, #0]
    8564:	4618      	mov	r0, r3
    8566:	4b03      	ldr	r3, [pc, #12]	; (8574 <TC4_Handler+0x18>)
    8568:	4798      	blx	r3
}
    856a:	bf00      	nop
    856c:	bd80      	pop	{r7, pc}
    856e:	bf00      	nop
    8570:	20000840 	.word	0x20000840
    8574:	00008481 	.word	0x00008481

00008578 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8578:	b580      	push	{r7, lr}
    857a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    857c:	4b03      	ldr	r3, [pc, #12]	; (858c <TC5_Handler+0x14>)
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	4618      	mov	r0, r3
    8582:	4b03      	ldr	r3, [pc, #12]	; (8590 <TC5_Handler+0x18>)
    8584:	4798      	blx	r3
}
    8586:	bf00      	nop
    8588:	bd80      	pop	{r7, pc}
    858a:	bf00      	nop
    858c:	20000844 	.word	0x20000844
    8590:	00008481 	.word	0x00008481

00008594 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8594:	b580      	push	{r7, lr}
    8596:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8598:	4b03      	ldr	r3, [pc, #12]	; (85a8 <TC6_Handler+0x14>)
    859a:	681b      	ldr	r3, [r3, #0]
    859c:	4618      	mov	r0, r3
    859e:	4b03      	ldr	r3, [pc, #12]	; (85ac <TC6_Handler+0x18>)
    85a0:	4798      	blx	r3
}
    85a2:	bf00      	nop
    85a4:	bd80      	pop	{r7, pc}
    85a6:	bf00      	nop
    85a8:	20000848 	.word	0x20000848
    85ac:	00008481 	.word	0x00008481

000085b0 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    85b0:	b580      	push	{r7, lr}
    85b2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    85b4:	4b03      	ldr	r3, [pc, #12]	; (85c4 <TC7_Handler+0x14>)
    85b6:	681b      	ldr	r3, [r3, #0]
    85b8:	4618      	mov	r0, r3
    85ba:	4b03      	ldr	r3, [pc, #12]	; (85c8 <TC7_Handler+0x18>)
    85bc:	4798      	blx	r3
}
    85be:	bf00      	nop
    85c0:	bd80      	pop	{r7, pc}
    85c2:	bf00      	nop
    85c4:	2000084c 	.word	0x2000084c
    85c8:	000084b9 	.word	0x000084b9

000085cc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    85cc:	b580      	push	{r7, lr}
    85ce:	b084      	sub	sp, #16
    85d0:	af00      	add	r7, sp, #0
    85d2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    85d4:	6878      	ldr	r0, [r7, #4]
    85d6:	4b13      	ldr	r3, [pc, #76]	; (8624 <get_tc_index+0x58>)
    85d8:	4798      	blx	r3
    85da:	4603      	mov	r3, r0
    85dc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    85de:	2300      	movs	r3, #0
    85e0:	73fb      	strb	r3, [r7, #15]
    85e2:	e010      	b.n	8606 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    85e4:	7bfa      	ldrb	r2, [r7, #15]
    85e6:	4910      	ldr	r1, [pc, #64]	; (8628 <get_tc_index+0x5c>)
    85e8:	4613      	mov	r3, r2
    85ea:	009b      	lsls	r3, r3, #2
    85ec:	4413      	add	r3, r2
    85ee:	009b      	lsls	r3, r3, #2
    85f0:	440b      	add	r3, r1
    85f2:	781b      	ldrb	r3, [r3, #0]
    85f4:	7bba      	ldrb	r2, [r7, #14]
    85f6:	429a      	cmp	r2, r3
    85f8:	d102      	bne.n	8600 <get_tc_index+0x34>
			return i;
    85fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    85fe:	e00d      	b.n	861c <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8600:	7bfb      	ldrb	r3, [r7, #15]
    8602:	3301      	adds	r3, #1
    8604:	73fb      	strb	r3, [r7, #15]
    8606:	7bfb      	ldrb	r3, [r7, #15]
    8608:	2b05      	cmp	r3, #5
    860a:	d9eb      	bls.n	85e4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    860c:	f240 221d 	movw	r2, #541	; 0x21d
    8610:	4906      	ldr	r1, [pc, #24]	; (862c <get_tc_index+0x60>)
    8612:	2000      	movs	r0, #0
    8614:	4b06      	ldr	r3, [pc, #24]	; (8630 <get_tc_index+0x64>)
    8616:	4798      	blx	r3
	return -1;
    8618:	f04f 33ff 	mov.w	r3, #4294967295
}
    861c:	4618      	mov	r0, r3
    861e:	3710      	adds	r7, #16
    8620:	46bd      	mov	sp, r7
    8622:	bd80      	pop	{r7, pc}
    8624:	000086d1 	.word	0x000086d1
    8628:	200000e0 	.word	0x200000e0
    862c:	0000f1b8 	.word	0x0000f1b8
    8630:	00003511 	.word	0x00003511

00008634 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8634:	b480      	push	{r7}
    8636:	b083      	sub	sp, #12
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
    863c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	4a17      	ldr	r2, [pc, #92]	; (86a0 <_tc_init_irq_param+0x6c>)
    8642:	4293      	cmp	r3, r2
    8644:	d102      	bne.n	864c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8646:	4a17      	ldr	r2, [pc, #92]	; (86a4 <_tc_init_irq_param+0x70>)
    8648:	683b      	ldr	r3, [r7, #0]
    864a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	4a16      	ldr	r2, [pc, #88]	; (86a8 <_tc_init_irq_param+0x74>)
    8650:	4293      	cmp	r3, r2
    8652:	d102      	bne.n	865a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8654:	4a15      	ldr	r2, [pc, #84]	; (86ac <_tc_init_irq_param+0x78>)
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	4a14      	ldr	r2, [pc, #80]	; (86b0 <_tc_init_irq_param+0x7c>)
    865e:	4293      	cmp	r3, r2
    8660:	d102      	bne.n	8668 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8662:	4a14      	ldr	r2, [pc, #80]	; (86b4 <_tc_init_irq_param+0x80>)
    8664:	683b      	ldr	r3, [r7, #0]
    8666:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	4a13      	ldr	r2, [pc, #76]	; (86b8 <_tc_init_irq_param+0x84>)
    866c:	4293      	cmp	r3, r2
    866e:	d102      	bne.n	8676 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8670:	4a12      	ldr	r2, [pc, #72]	; (86bc <_tc_init_irq_param+0x88>)
    8672:	683b      	ldr	r3, [r7, #0]
    8674:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8676:	687b      	ldr	r3, [r7, #4]
    8678:	4a11      	ldr	r2, [pc, #68]	; (86c0 <_tc_init_irq_param+0x8c>)
    867a:	4293      	cmp	r3, r2
    867c:	d102      	bne.n	8684 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    867e:	4a11      	ldr	r2, [pc, #68]	; (86c4 <_tc_init_irq_param+0x90>)
    8680:	683b      	ldr	r3, [r7, #0]
    8682:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8684:	687b      	ldr	r3, [r7, #4]
    8686:	4a10      	ldr	r2, [pc, #64]	; (86c8 <_tc_init_irq_param+0x94>)
    8688:	4293      	cmp	r3, r2
    868a:	d102      	bne.n	8692 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    868c:	4a0f      	ldr	r2, [pc, #60]	; (86cc <_tc_init_irq_param+0x98>)
    868e:	683b      	ldr	r3, [r7, #0]
    8690:	6013      	str	r3, [r2, #0]
	}
}
    8692:	bf00      	nop
    8694:	370c      	adds	r7, #12
    8696:	46bd      	mov	sp, r7
    8698:	f85d 7b04 	ldr.w	r7, [sp], #4
    869c:	4770      	bx	lr
    869e:	bf00      	nop
    86a0:	40003800 	.word	0x40003800
    86a4:	20000838 	.word	0x20000838
    86a8:	4101a000 	.word	0x4101a000
    86ac:	2000083c 	.word	0x2000083c
    86b0:	42001400 	.word	0x42001400
    86b4:	20000840 	.word	0x20000840
    86b8:	42001800 	.word	0x42001800
    86bc:	20000844 	.word	0x20000844
    86c0:	43001400 	.word	0x43001400
    86c4:	20000848 	.word	0x20000848
    86c8:	43001800 	.word	0x43001800
    86cc:	2000084c 	.word	0x2000084c

000086d0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    86d0:	b4b0      	push	{r4, r5, r7}
    86d2:	b08d      	sub	sp, #52	; 0x34
    86d4:	af00      	add	r7, sp, #0
    86d6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    86d8:	4b13      	ldr	r3, [pc, #76]	; (8728 <_get_hardware_offset+0x58>)
    86da:	f107 040c 	add.w	r4, r7, #12
    86de:	461d      	mov	r5, r3
    86e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    86e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    86e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    86e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86ec:	2300      	movs	r3, #0
    86ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    86f0:	e010      	b.n	8714 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    86f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86f4:	009b      	lsls	r3, r3, #2
    86f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    86fa:	4413      	add	r3, r2
    86fc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8700:	461a      	mov	r2, r3
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	429a      	cmp	r2, r3
    8706:	d102      	bne.n	870e <_get_hardware_offset+0x3e>
			return i;
    8708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    870a:	b2db      	uxtb	r3, r3
    870c:	e006      	b.n	871c <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8710:	3301      	adds	r3, #1
    8712:	62fb      	str	r3, [r7, #44]	; 0x2c
    8714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8716:	2b07      	cmp	r3, #7
    8718:	d9eb      	bls.n	86f2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    871a:	2300      	movs	r3, #0
}
    871c:	4618      	mov	r0, r3
    871e:	3734      	adds	r7, #52	; 0x34
    8720:	46bd      	mov	sp, r7
    8722:	bcb0      	pop	{r4, r5, r7}
    8724:	4770      	bx	lr
    8726:	bf00      	nop
    8728:	0000f1cc 	.word	0x0000f1cc

0000872c <__NVIC_EnableIRQ>:
{
    872c:	b480      	push	{r7}
    872e:	b083      	sub	sp, #12
    8730:	af00      	add	r7, sp, #0
    8732:	4603      	mov	r3, r0
    8734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    873a:	2b00      	cmp	r3, #0
    873c:	db0b      	blt.n	8756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    873e:	4909      	ldr	r1, [pc, #36]	; (8764 <__NVIC_EnableIRQ+0x38>)
    8740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8744:	095b      	lsrs	r3, r3, #5
    8746:	88fa      	ldrh	r2, [r7, #6]
    8748:	f002 021f 	and.w	r2, r2, #31
    874c:	2001      	movs	r0, #1
    874e:	fa00 f202 	lsl.w	r2, r0, r2
    8752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8756:	bf00      	nop
    8758:	370c      	adds	r7, #12
    875a:	46bd      	mov	sp, r7
    875c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8760:	4770      	bx	lr
    8762:	bf00      	nop
    8764:	e000e100 	.word	0xe000e100

00008768 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8768:	b480      	push	{r7}
    876a:	b087      	sub	sp, #28
    876c:	af00      	add	r7, sp, #0
    876e:	60f8      	str	r0, [r7, #12]
    8770:	460b      	mov	r3, r1
    8772:	607a      	str	r2, [r7, #4]
    8774:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8776:	7afa      	ldrb	r2, [r7, #11]
    8778:	68f9      	ldr	r1, [r7, #12]
    877a:	4613      	mov	r3, r2
    877c:	009b      	lsls	r3, r3, #2
    877e:	4413      	add	r3, r2
    8780:	009b      	lsls	r3, r3, #2
    8782:	440b      	add	r3, r1
    8784:	3340      	adds	r3, #64	; 0x40
    8786:	681b      	ldr	r3, [r3, #0]
    8788:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    878a:	697a      	ldr	r2, [r7, #20]
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	4013      	ands	r3, r2
    8790:	617b      	str	r3, [r7, #20]
	return tmp;
    8792:	697b      	ldr	r3, [r7, #20]
}
    8794:	4618      	mov	r0, r3
    8796:	371c      	adds	r7, #28
    8798:	46bd      	mov	sp, r7
    879a:	f85d 7b04 	ldr.w	r7, [sp], #4
    879e:	4770      	bx	lr

000087a0 <hri_oscctrl_get_STATUS_reg>:
{
    87a0:	b480      	push	{r7}
    87a2:	b085      	sub	sp, #20
    87a4:	af00      	add	r7, sp, #0
    87a6:	6078      	str	r0, [r7, #4]
    87a8:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    87aa:	687b      	ldr	r3, [r7, #4]
    87ac:	691b      	ldr	r3, [r3, #16]
    87ae:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    87b0:	68fa      	ldr	r2, [r7, #12]
    87b2:	683b      	ldr	r3, [r7, #0]
    87b4:	4013      	ands	r3, r2
    87b6:	60fb      	str	r3, [r7, #12]
	return tmp;
    87b8:	68fb      	ldr	r3, [r7, #12]
}
    87ba:	4618      	mov	r0, r3
    87bc:	3714      	adds	r7, #20
    87be:	46bd      	mov	sp, r7
    87c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    87c4:	4770      	bx	lr

000087c6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    87c6:	b480      	push	{r7}
    87c8:	b085      	sub	sp, #20
    87ca:	af00      	add	r7, sp, #0
    87cc:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	f893 3020 	ldrb.w	r3, [r3, #32]
    87d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    87d6:	7bfb      	ldrb	r3, [r7, #15]
    87d8:	f003 0301 	and.w	r3, r3, #1
    87dc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    87de:	7bfb      	ldrb	r3, [r7, #15]
    87e0:	2b00      	cmp	r3, #0
    87e2:	bf14      	ite	ne
    87e4:	2301      	movne	r3, #1
    87e6:	2300      	moveq	r3, #0
    87e8:	b2db      	uxtb	r3, r3
}
    87ea:	4618      	mov	r0, r3
    87ec:	3714      	adds	r7, #20
    87ee:	46bd      	mov	sp, r7
    87f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    87f4:	4770      	bx	lr

000087f6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87f6:	b480      	push	{r7}
    87f8:	b083      	sub	sp, #12
    87fa:	af00      	add	r7, sp, #0
    87fc:	6078      	str	r0, [r7, #4]
    87fe:	460b      	mov	r3, r1
    8800:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8802:	bf00      	nop
    8804:	687b      	ldr	r3, [r7, #4]
    8806:	789b      	ldrb	r3, [r3, #2]
    8808:	b2da      	uxtb	r2, r3
    880a:	78fb      	ldrb	r3, [r7, #3]
    880c:	4013      	ands	r3, r2
    880e:	b2db      	uxtb	r3, r3
    8810:	2b00      	cmp	r3, #0
    8812:	d1f7      	bne.n	8804 <hri_usb_wait_for_sync+0xe>
	};
}
    8814:	bf00      	nop
    8816:	370c      	adds	r7, #12
    8818:	46bd      	mov	sp, r7
    881a:	f85d 7b04 	ldr.w	r7, [sp], #4
    881e:	4770      	bx	lr

00008820 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8820:	b480      	push	{r7}
    8822:	b083      	sub	sp, #12
    8824:	af00      	add	r7, sp, #0
    8826:	6078      	str	r0, [r7, #4]
    8828:	460b      	mov	r3, r1
    882a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	789b      	ldrb	r3, [r3, #2]
    8830:	b2da      	uxtb	r2, r3
    8832:	78fb      	ldrb	r3, [r7, #3]
    8834:	4013      	ands	r3, r2
    8836:	b2db      	uxtb	r3, r3
    8838:	2b00      	cmp	r3, #0
    883a:	bf14      	ite	ne
    883c:	2301      	movne	r3, #1
    883e:	2300      	moveq	r3, #0
    8840:	b2db      	uxtb	r3, r3
}
    8842:	4618      	mov	r0, r3
    8844:	370c      	adds	r7, #12
    8846:	46bd      	mov	sp, r7
    8848:	f85d 7b04 	ldr.w	r7, [sp], #4
    884c:	4770      	bx	lr

0000884e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    884e:	b480      	push	{r7}
    8850:	b085      	sub	sp, #20
    8852:	af00      	add	r7, sp, #0
    8854:	6078      	str	r0, [r7, #4]
    8856:	460b      	mov	r3, r1
    8858:	70fb      	strb	r3, [r7, #3]
    885a:	4613      	mov	r3, r2
    885c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    885e:	78fb      	ldrb	r3, [r7, #3]
    8860:	687a      	ldr	r2, [r7, #4]
    8862:	3308      	adds	r3, #8
    8864:	015b      	lsls	r3, r3, #5
    8866:	4413      	add	r3, r2
    8868:	3307      	adds	r3, #7
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    886e:	7bfa      	ldrb	r2, [r7, #15]
    8870:	78bb      	ldrb	r3, [r7, #2]
    8872:	4013      	ands	r3, r2
    8874:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8876:	7bfb      	ldrb	r3, [r7, #15]
}
    8878:	4618      	mov	r0, r3
    887a:	3714      	adds	r7, #20
    887c:	46bd      	mov	sp, r7
    887e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8882:	4770      	bx	lr

00008884 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8884:	b480      	push	{r7}
    8886:	b083      	sub	sp, #12
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
    888c:	460b      	mov	r3, r1
    888e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8890:	78fb      	ldrb	r3, [r7, #3]
    8892:	687a      	ldr	r2, [r7, #4]
    8894:	3308      	adds	r3, #8
    8896:	015b      	lsls	r3, r3, #5
    8898:	4413      	add	r3, r2
    889a:	3307      	adds	r3, #7
    889c:	781b      	ldrb	r3, [r3, #0]
    889e:	b2db      	uxtb	r3, r3
}
    88a0:	4618      	mov	r0, r3
    88a2:	370c      	adds	r7, #12
    88a4:	46bd      	mov	sp, r7
    88a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88aa:	4770      	bx	lr

000088ac <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    88ac:	b480      	push	{r7}
    88ae:	b083      	sub	sp, #12
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
    88b4:	460b      	mov	r3, r1
    88b6:	70fb      	strb	r3, [r7, #3]
    88b8:	4613      	mov	r3, r2
    88ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    88bc:	78fb      	ldrb	r3, [r7, #3]
    88be:	687a      	ldr	r2, [r7, #4]
    88c0:	3308      	adds	r3, #8
    88c2:	015b      	lsls	r3, r3, #5
    88c4:	4413      	add	r3, r2
    88c6:	3307      	adds	r3, #7
    88c8:	78ba      	ldrb	r2, [r7, #2]
    88ca:	701a      	strb	r2, [r3, #0]
}
    88cc:	bf00      	nop
    88ce:	370c      	adds	r7, #12
    88d0:	46bd      	mov	sp, r7
    88d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d6:	4770      	bx	lr

000088d8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    88d8:	b480      	push	{r7}
    88da:	b083      	sub	sp, #12
    88dc:	af00      	add	r7, sp, #0
    88de:	6078      	str	r0, [r7, #4]
    88e0:	460b      	mov	r3, r1
    88e2:	70fb      	strb	r3, [r7, #3]
    88e4:	4613      	mov	r3, r2
    88e6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    88e8:	78fb      	ldrb	r3, [r7, #3]
    88ea:	687a      	ldr	r2, [r7, #4]
    88ec:	3308      	adds	r3, #8
    88ee:	015b      	lsls	r3, r3, #5
    88f0:	4413      	add	r3, r2
    88f2:	3305      	adds	r3, #5
    88f4:	78ba      	ldrb	r2, [r7, #2]
    88f6:	701a      	strb	r2, [r3, #0]
}
    88f8:	bf00      	nop
    88fa:	370c      	adds	r7, #12
    88fc:	46bd      	mov	sp, r7
    88fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8902:	4770      	bx	lr

00008904 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8904:	b480      	push	{r7}
    8906:	b083      	sub	sp, #12
    8908:	af00      	add	r7, sp, #0
    890a:	6078      	str	r0, [r7, #4]
    890c:	460b      	mov	r3, r1
    890e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8910:	78fb      	ldrb	r3, [r7, #3]
    8912:	687a      	ldr	r2, [r7, #4]
    8914:	3308      	adds	r3, #8
    8916:	015b      	lsls	r3, r3, #5
    8918:	4413      	add	r3, r2
    891a:	3306      	adds	r3, #6
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	b2db      	uxtb	r3, r3
}
    8920:	4618      	mov	r0, r3
    8922:	370c      	adds	r7, #12
    8924:	46bd      	mov	sp, r7
    8926:	f85d 7b04 	ldr.w	r7, [sp], #4
    892a:	4770      	bx	lr

0000892c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    892c:	b480      	push	{r7}
    892e:	b083      	sub	sp, #12
    8930:	af00      	add	r7, sp, #0
    8932:	6078      	str	r0, [r7, #4]
    8934:	460b      	mov	r3, r1
    8936:	70fb      	strb	r3, [r7, #3]
    8938:	4613      	mov	r3, r2
    893a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    893c:	78fb      	ldrb	r3, [r7, #3]
    893e:	687a      	ldr	r2, [r7, #4]
    8940:	3308      	adds	r3, #8
    8942:	015b      	lsls	r3, r3, #5
    8944:	4413      	add	r3, r2
    8946:	3304      	adds	r3, #4
    8948:	78ba      	ldrb	r2, [r7, #2]
    894a:	701a      	strb	r2, [r3, #0]
}
    894c:	bf00      	nop
    894e:	370c      	adds	r7, #12
    8950:	46bd      	mov	sp, r7
    8952:	f85d 7b04 	ldr.w	r7, [sp], #4
    8956:	4770      	bx	lr

00008958 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8958:	b480      	push	{r7}
    895a:	b083      	sub	sp, #12
    895c:	af00      	add	r7, sp, #0
    895e:	6078      	str	r0, [r7, #4]
    8960:	460b      	mov	r3, r1
    8962:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8964:	78fb      	ldrb	r3, [r7, #3]
    8966:	687a      	ldr	r2, [r7, #4]
    8968:	015b      	lsls	r3, r3, #5
    896a:	4413      	add	r3, r2
    896c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8970:	2210      	movs	r2, #16
    8972:	701a      	strb	r2, [r3, #0]
}
    8974:	bf00      	nop
    8976:	370c      	adds	r7, #12
    8978:	46bd      	mov	sp, r7
    897a:	f85d 7b04 	ldr.w	r7, [sp], #4
    897e:	4770      	bx	lr

00008980 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8980:	b480      	push	{r7}
    8982:	b083      	sub	sp, #12
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
    8988:	460b      	mov	r3, r1
    898a:	70fb      	strb	r3, [r7, #3]
    898c:	4613      	mov	r3, r2
    898e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8990:	78fb      	ldrb	r3, [r7, #3]
    8992:	687a      	ldr	r2, [r7, #4]
    8994:	015b      	lsls	r3, r3, #5
    8996:	4413      	add	r3, r2
    8998:	f203 1309 	addw	r3, r3, #265	; 0x109
    899c:	78ba      	ldrb	r2, [r7, #2]
    899e:	701a      	strb	r2, [r3, #0]
}
    89a0:	bf00      	nop
    89a2:	370c      	adds	r7, #12
    89a4:	46bd      	mov	sp, r7
    89a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89aa:	4770      	bx	lr

000089ac <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    89ac:	b480      	push	{r7}
    89ae:	b083      	sub	sp, #12
    89b0:	af00      	add	r7, sp, #0
    89b2:	6078      	str	r0, [r7, #4]
    89b4:	460b      	mov	r3, r1
    89b6:	70fb      	strb	r3, [r7, #3]
    89b8:	4613      	mov	r3, r2
    89ba:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    89bc:	78fb      	ldrb	r3, [r7, #3]
    89be:	687a      	ldr	r2, [r7, #4]
    89c0:	015b      	lsls	r3, r3, #5
    89c2:	4413      	add	r3, r2
    89c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    89c8:	78ba      	ldrb	r2, [r7, #2]
    89ca:	701a      	strb	r2, [r3, #0]
}
    89cc:	bf00      	nop
    89ce:	370c      	adds	r7, #12
    89d0:	46bd      	mov	sp, r7
    89d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    89d6:	4770      	bx	lr

000089d8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    89d8:	b480      	push	{r7}
    89da:	b085      	sub	sp, #20
    89dc:	af00      	add	r7, sp, #0
    89de:	6078      	str	r0, [r7, #4]
    89e0:	460b      	mov	r3, r1
    89e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    89e4:	78fb      	ldrb	r3, [r7, #3]
    89e6:	687a      	ldr	r2, [r7, #4]
    89e8:	3308      	adds	r3, #8
    89ea:	015b      	lsls	r3, r3, #5
    89ec:	4413      	add	r3, r2
    89ee:	781b      	ldrb	r3, [r3, #0]
    89f0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    89f2:	7bfb      	ldrb	r3, [r7, #15]
    89f4:	f003 0307 	and.w	r3, r3, #7
    89f8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89fa:	7bfb      	ldrb	r3, [r7, #15]
}
    89fc:	4618      	mov	r0, r3
    89fe:	3714      	adds	r7, #20
    8a00:	46bd      	mov	sp, r7
    8a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a06:	4770      	bx	lr

00008a08 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8a08:	b480      	push	{r7}
    8a0a:	b085      	sub	sp, #20
    8a0c:	af00      	add	r7, sp, #0
    8a0e:	6078      	str	r0, [r7, #4]
    8a10:	460b      	mov	r3, r1
    8a12:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a14:	78fb      	ldrb	r3, [r7, #3]
    8a16:	687a      	ldr	r2, [r7, #4]
    8a18:	3308      	adds	r3, #8
    8a1a:	015b      	lsls	r3, r3, #5
    8a1c:	4413      	add	r3, r2
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8a22:	7bfb      	ldrb	r3, [r7, #15]
    8a24:	091b      	lsrs	r3, r3, #4
    8a26:	b2db      	uxtb	r3, r3
    8a28:	f003 0307 	and.w	r3, r3, #7
    8a2c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8a2e:	7bfb      	ldrb	r3, [r7, #15]
}
    8a30:	4618      	mov	r0, r3
    8a32:	3714      	adds	r7, #20
    8a34:	46bd      	mov	sp, r7
    8a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a3a:	4770      	bx	lr

00008a3c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8a3c:	b480      	push	{r7}
    8a3e:	b083      	sub	sp, #12
    8a40:	af00      	add	r7, sp, #0
    8a42:	6078      	str	r0, [r7, #4]
    8a44:	460b      	mov	r3, r1
    8a46:	70fb      	strb	r3, [r7, #3]
    8a48:	4613      	mov	r3, r2
    8a4a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a4c:	78fb      	ldrb	r3, [r7, #3]
    8a4e:	687a      	ldr	r2, [r7, #4]
    8a50:	3308      	adds	r3, #8
    8a52:	015b      	lsls	r3, r3, #5
    8a54:	4413      	add	r3, r2
    8a56:	78ba      	ldrb	r2, [r7, #2]
    8a58:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a5a:	bf00      	nop
    8a5c:	370c      	adds	r7, #12
    8a5e:	46bd      	mov	sp, r7
    8a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a64:	4770      	bx	lr

00008a66 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8a66:	b480      	push	{r7}
    8a68:	b083      	sub	sp, #12
    8a6a:	af00      	add	r7, sp, #0
    8a6c:	6078      	str	r0, [r7, #4]
    8a6e:	460b      	mov	r3, r1
    8a70:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a72:	78fb      	ldrb	r3, [r7, #3]
    8a74:	687a      	ldr	r2, [r7, #4]
    8a76:	3308      	adds	r3, #8
    8a78:	015b      	lsls	r3, r3, #5
    8a7a:	4413      	add	r3, r2
    8a7c:	781b      	ldrb	r3, [r3, #0]
    8a7e:	b2db      	uxtb	r3, r3
}
    8a80:	4618      	mov	r0, r3
    8a82:	370c      	adds	r7, #12
    8a84:	46bd      	mov	sp, r7
    8a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8a:	4770      	bx	lr

00008a8c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8a8c:	b480      	push	{r7}
    8a8e:	b083      	sub	sp, #12
    8a90:	af00      	add	r7, sp, #0
    8a92:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8a94:	687b      	ldr	r3, [r7, #4]
    8a96:	8b9b      	ldrh	r3, [r3, #28]
    8a98:	b29b      	uxth	r3, r3
}
    8a9a:	4618      	mov	r0, r3
    8a9c:	370c      	adds	r7, #12
    8a9e:	46bd      	mov	sp, r7
    8aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aa4:	4770      	bx	lr

00008aa6 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8aa6:	b480      	push	{r7}
    8aa8:	b083      	sub	sp, #12
    8aaa:	af00      	add	r7, sp, #0
    8aac:	6078      	str	r0, [r7, #4]
    8aae:	460b      	mov	r3, r1
    8ab0:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8ab2:	687b      	ldr	r3, [r7, #4]
    8ab4:	887a      	ldrh	r2, [r7, #2]
    8ab6:	839a      	strh	r2, [r3, #28]
}
    8ab8:	bf00      	nop
    8aba:	370c      	adds	r7, #12
    8abc:	46bd      	mov	sp, r7
    8abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac2:	4770      	bx	lr

00008ac4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8ac4:	b480      	push	{r7}
    8ac6:	b083      	sub	sp, #12
    8ac8:	af00      	add	r7, sp, #0
    8aca:	6078      	str	r0, [r7, #4]
    8acc:	460b      	mov	r3, r1
    8ace:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	887a      	ldrh	r2, [r7, #2]
    8ad4:	831a      	strh	r2, [r3, #24]
}
    8ad6:	bf00      	nop
    8ad8:	370c      	adds	r7, #12
    8ada:	46bd      	mov	sp, r7
    8adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae0:	4770      	bx	lr

00008ae2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8ae2:	b480      	push	{r7}
    8ae4:	b083      	sub	sp, #12
    8ae6:	af00      	add	r7, sp, #0
    8ae8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8aea:	687b      	ldr	r3, [r7, #4]
    8aec:	8b1b      	ldrh	r3, [r3, #24]
    8aee:	b29b      	uxth	r3, r3
}
    8af0:	4618      	mov	r0, r3
    8af2:	370c      	adds	r7, #12
    8af4:	46bd      	mov	sp, r7
    8af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8afa:	4770      	bx	lr

00008afc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8afc:	b480      	push	{r7}
    8afe:	b083      	sub	sp, #12
    8b00:	af00      	add	r7, sp, #0
    8b02:	6078      	str	r0, [r7, #4]
    8b04:	460b      	mov	r3, r1
    8b06:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	887a      	ldrh	r2, [r7, #2]
    8b0c:	829a      	strh	r2, [r3, #20]
}
    8b0e:	bf00      	nop
    8b10:	370c      	adds	r7, #12
    8b12:	46bd      	mov	sp, r7
    8b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b18:	4770      	bx	lr

00008b1a <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8b1a:	b480      	push	{r7}
    8b1c:	b085      	sub	sp, #20
    8b1e:	af00      	add	r7, sp, #0
    8b20:	6078      	str	r0, [r7, #4]
    8b22:	460b      	mov	r3, r1
    8b24:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	789b      	ldrb	r3, [r3, #2]
    8b2a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b2c:	7bfa      	ldrb	r2, [r7, #15]
    8b2e:	78fb      	ldrb	r3, [r7, #3]
    8b30:	4013      	ands	r3, r2
    8b32:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b34:	7bfb      	ldrb	r3, [r7, #15]
}
    8b36:	4618      	mov	r0, r3
    8b38:	3714      	adds	r7, #20
    8b3a:	46bd      	mov	sp, r7
    8b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b40:	4770      	bx	lr
	...

00008b44 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8b44:	b580      	push	{r7, lr}
    8b46:	b082      	sub	sp, #8
    8b48:	af00      	add	r7, sp, #0
    8b4a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8b4c:	687b      	ldr	r3, [r7, #4]
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	b2db      	uxtb	r3, r3
    8b52:	f023 0302 	bic.w	r3, r3, #2
    8b56:	b2da      	uxtb	r2, r3
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8b5c:	2103      	movs	r1, #3
    8b5e:	6878      	ldr	r0, [r7, #4]
    8b60:	4b02      	ldr	r3, [pc, #8]	; (8b6c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8b62:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b64:	bf00      	nop
    8b66:	3708      	adds	r7, #8
    8b68:	46bd      	mov	sp, r7
    8b6a:	bd80      	pop	{r7, pc}
    8b6c:	000087f7 	.word	0x000087f7

00008b70 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8b70:	b580      	push	{r7, lr}
    8b72:	b084      	sub	sp, #16
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
    8b78:	460b      	mov	r3, r1
    8b7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b7c:	2103      	movs	r1, #3
    8b7e:	6878      	ldr	r0, [r7, #4]
    8b80:	4b06      	ldr	r3, [pc, #24]	; (8b9c <hri_usb_get_CTRLA_reg+0x2c>)
    8b82:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b8a:	7bfa      	ldrb	r2, [r7, #15]
    8b8c:	78fb      	ldrb	r3, [r7, #3]
    8b8e:	4013      	ands	r3, r2
    8b90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b92:	7bfb      	ldrb	r3, [r7, #15]
}
    8b94:	4618      	mov	r0, r3
    8b96:	3710      	adds	r7, #16
    8b98:	46bd      	mov	sp, r7
    8b9a:	bd80      	pop	{r7, pc}
    8b9c:	000087f7 	.word	0x000087f7

00008ba0 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8ba0:	b580      	push	{r7, lr}
    8ba2:	b082      	sub	sp, #8
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6078      	str	r0, [r7, #4]
    8ba8:	460b      	mov	r3, r1
    8baa:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	78fa      	ldrb	r2, [r7, #3]
    8bb0:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8bb2:	2103      	movs	r1, #3
    8bb4:	6878      	ldr	r0, [r7, #4]
    8bb6:	4b03      	ldr	r3, [pc, #12]	; (8bc4 <hri_usb_write_CTRLA_reg+0x24>)
    8bb8:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8bba:	bf00      	nop
    8bbc:	3708      	adds	r7, #8
    8bbe:	46bd      	mov	sp, r7
    8bc0:	bd80      	pop	{r7, pc}
    8bc2:	bf00      	nop
    8bc4:	000087f7 	.word	0x000087f7

00008bc8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b082      	sub	sp, #8
    8bcc:	af00      	add	r7, sp, #0
    8bce:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8bd0:	2103      	movs	r1, #3
    8bd2:	6878      	ldr	r0, [r7, #4]
    8bd4:	4b04      	ldr	r3, [pc, #16]	; (8be8 <hri_usb_read_CTRLA_reg+0x20>)
    8bd6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	781b      	ldrb	r3, [r3, #0]
    8bdc:	b2db      	uxtb	r3, r3
}
    8bde:	4618      	mov	r0, r3
    8be0:	3708      	adds	r7, #8
    8be2:	46bd      	mov	sp, r7
    8be4:	bd80      	pop	{r7, pc}
    8be6:	bf00      	nop
    8be8:	000087f7 	.word	0x000087f7

00008bec <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8bec:	b480      	push	{r7}
    8bee:	b083      	sub	sp, #12
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	891b      	ldrh	r3, [r3, #8]
    8bf8:	b29b      	uxth	r3, r3
    8bfa:	f023 0301 	bic.w	r3, r3, #1
    8bfe:	b29a      	uxth	r2, r3
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8c04:	bf00      	nop
    8c06:	370c      	adds	r7, #12
    8c08:	46bd      	mov	sp, r7
    8c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c0e:	4770      	bx	lr

00008c10 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8c10:	b480      	push	{r7}
    8c12:	b083      	sub	sp, #12
    8c14:	af00      	add	r7, sp, #0
    8c16:	6078      	str	r0, [r7, #4]
    8c18:	460b      	mov	r3, r1
    8c1a:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	887a      	ldrh	r2, [r7, #2]
    8c20:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8c22:	bf00      	nop
    8c24:	370c      	adds	r7, #12
    8c26:	46bd      	mov	sp, r7
    8c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c2c:	4770      	bx	lr

00008c2e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8c2e:	b480      	push	{r7}
    8c30:	b083      	sub	sp, #12
    8c32:	af00      	add	r7, sp, #0
    8c34:	6078      	str	r0, [r7, #4]
    8c36:	460b      	mov	r3, r1
    8c38:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	78fa      	ldrb	r2, [r7, #3]
    8c3e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8c40:	bf00      	nop
    8c42:	370c      	adds	r7, #12
    8c44:	46bd      	mov	sp, r7
    8c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c4a:	4770      	bx	lr

00008c4c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8c4c:	b480      	push	{r7}
    8c4e:	b083      	sub	sp, #12
    8c50:	af00      	add	r7, sp, #0
    8c52:	6078      	str	r0, [r7, #4]
    8c54:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	683a      	ldr	r2, [r7, #0]
    8c5a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8c5c:	bf00      	nop
    8c5e:	370c      	adds	r7, #12
    8c60:	46bd      	mov	sp, r7
    8c62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c66:	4770      	bx	lr

00008c68 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8c68:	b480      	push	{r7}
    8c6a:	b083      	sub	sp, #12
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	6078      	str	r0, [r7, #4]
    8c70:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8c72:	2300      	movs	r3, #0
}
    8c74:	4618      	mov	r0, r3
    8c76:	370c      	adds	r7, #12
    8c78:	46bd      	mov	sp, r7
    8c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c7e:	4770      	bx	lr

00008c80 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8c80:	b480      	push	{r7}
    8c82:	b085      	sub	sp, #20
    8c84:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8c86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c8a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8c8c:	4b28      	ldr	r3, [pc, #160]	; (8d30 <_usb_load_calib+0xb0>)
    8c8e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8c90:	f003 031f 	and.w	r3, r3, #31
    8c94:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8c96:	4b26      	ldr	r3, [pc, #152]	; (8d30 <_usb_load_calib+0xb0>)
    8c98:	681b      	ldr	r3, [r3, #0]
    8c9a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8c9c:	f003 031f 	and.w	r3, r3, #31
    8ca0:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8ca2:	4b23      	ldr	r3, [pc, #140]	; (8d30 <_usb_load_calib+0xb0>)
    8ca4:	681b      	ldr	r3, [r3, #0]
    8ca6:	0a9b      	lsrs	r3, r3, #10
    8ca8:	f003 0307 	and.w	r3, r3, #7
    8cac:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8cae:	68fb      	ldr	r3, [r7, #12]
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d002      	beq.n	8cba <_usb_load_calib+0x3a>
    8cb4:	68fb      	ldr	r3, [r7, #12]
    8cb6:	2b1f      	cmp	r3, #31
    8cb8:	d101      	bne.n	8cbe <_usb_load_calib+0x3e>
		pad_transn = 9;
    8cba:	2309      	movs	r3, #9
    8cbc:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8cbe:	68bb      	ldr	r3, [r7, #8]
    8cc0:	2b00      	cmp	r3, #0
    8cc2:	d002      	beq.n	8cca <_usb_load_calib+0x4a>
    8cc4:	68bb      	ldr	r3, [r7, #8]
    8cc6:	2b1f      	cmp	r3, #31
    8cc8:	d101      	bne.n	8cce <_usb_load_calib+0x4e>
		pad_transp = 25;
    8cca:	2319      	movs	r3, #25
    8ccc:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	d002      	beq.n	8cda <_usb_load_calib+0x5a>
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	2b07      	cmp	r3, #7
    8cd8:	d101      	bne.n	8cde <_usb_load_calib+0x5e>
		pad_trim = 6;
    8cda:	2306      	movs	r3, #6
    8cdc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8cde:	68fb      	ldr	r3, [r7, #12]
    8ce0:	b29b      	uxth	r3, r3
    8ce2:	019b      	lsls	r3, r3, #6
    8ce4:	b29b      	uxth	r3, r3
    8ce6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8cea:	b29a      	uxth	r2, r3
    8cec:	68bb      	ldr	r3, [r7, #8]
    8cee:	b29b      	uxth	r3, r3
    8cf0:	f003 031f 	and.w	r3, r3, #31
    8cf4:	b29b      	uxth	r3, r3
    8cf6:	4313      	orrs	r3, r2
    8cf8:	b29a      	uxth	r2, r3
    8cfa:	687b      	ldr	r3, [r7, #4]
    8cfc:	b29b      	uxth	r3, r3
    8cfe:	031b      	lsls	r3, r3, #12
    8d00:	b29b      	uxth	r3, r3
    8d02:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8d06:	b29b      	uxth	r3, r3
    8d08:	4313      	orrs	r3, r2
    8d0a:	b29a      	uxth	r2, r3
    8d0c:	683b      	ldr	r3, [r7, #0]
    8d0e:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8d10:	683a      	ldr	r2, [r7, #0]
    8d12:	78d3      	ldrb	r3, [r2, #3]
    8d14:	f043 0303 	orr.w	r3, r3, #3
    8d18:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8d1a:	683a      	ldr	r2, [r7, #0]
    8d1c:	78d3      	ldrb	r3, [r2, #3]
    8d1e:	f043 030c 	orr.w	r3, r3, #12
    8d22:	70d3      	strb	r3, [r2, #3]
}
    8d24:	bf00      	nop
    8d26:	3714      	adds	r7, #20
    8d28:	46bd      	mov	sp, r7
    8d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2e:	4770      	bx	lr
    8d30:	00800084 	.word	0x00800084

00008d34 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8d34:	b580      	push	{r7, lr}
    8d36:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8d38:	bf00      	nop
    8d3a:	2203      	movs	r2, #3
    8d3c:	2100      	movs	r1, #0
    8d3e:	4804      	ldr	r0, [pc, #16]	; (8d50 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8d40:	4b04      	ldr	r3, [pc, #16]	; (8d54 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8d42:	4798      	blx	r3
    8d44:	4603      	mov	r3, r0
    8d46:	2b03      	cmp	r3, #3
    8d48:	d1f7      	bne.n	8d3a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8d4a:	bf00      	nop
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	bf00      	nop
    8d50:	40001000 	.word	0x40001000
    8d54:	00008769 	.word	0x00008769

00008d58 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8d58:	b580      	push	{r7, lr}
    8d5a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8d5c:	480e      	ldr	r0, [pc, #56]	; (8d98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d5e:	4b0f      	ldr	r3, [pc, #60]	; (8d9c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8d60:	4798      	blx	r3
    8d62:	4603      	mov	r3, r0
    8d64:	2b00      	cmp	r3, #0
    8d66:	d00a      	beq.n	8d7e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8d68:	bf00      	nop
    8d6a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8d6e:	480a      	ldr	r0, [pc, #40]	; (8d98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d70:	4b0b      	ldr	r3, [pc, #44]	; (8da0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d72:	4798      	blx	r3
    8d74:	4603      	mov	r3, r0
    8d76:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8d7a:	d1f6      	bne.n	8d6a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8d7c:	e009      	b.n	8d92 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8d7e:	bf00      	nop
    8d80:	f44f 7180 	mov.w	r1, #256	; 0x100
    8d84:	4804      	ldr	r0, [pc, #16]	; (8d98 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d86:	4b06      	ldr	r3, [pc, #24]	; (8da0 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d88:	4798      	blx	r3
    8d8a:	4603      	mov	r3, r0
    8d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d90:	d1f6      	bne.n	8d80 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8d92:	bf00      	nop
    8d94:	bd80      	pop	{r7, pc}
    8d96:	bf00      	nop
    8d98:	40001000 	.word	0x40001000
    8d9c:	000087c7 	.word	0x000087c7
    8da0:	000087a1 	.word	0x000087a1

00008da4 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b082      	sub	sp, #8
    8da8:	af00      	add	r7, sp, #0
    8daa:	4603      	mov	r3, r0
    8dac:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8dae:	79fb      	ldrb	r3, [r7, #7]
    8db0:	2b00      	cmp	r3, #0
    8db2:	d102      	bne.n	8dba <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8db4:	4b05      	ldr	r3, [pc, #20]	; (8dcc <_usb_d_dev_wait_clk_rdy+0x28>)
    8db6:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8db8:	e004      	b.n	8dc4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8dba:	79fb      	ldrb	r3, [r7, #7]
    8dbc:	2b01      	cmp	r3, #1
    8dbe:	d101      	bne.n	8dc4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8dc0:	4b03      	ldr	r3, [pc, #12]	; (8dd0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8dc2:	4798      	blx	r3
}
    8dc4:	bf00      	nop
    8dc6:	3708      	adds	r7, #8
    8dc8:	46bd      	mov	sp, r7
    8dca:	bd80      	pop	{r7, pc}
    8dcc:	00008d59 	.word	0x00008d59
    8dd0:	00008d35 	.word	0x00008d35

00008dd4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8dd4:	b580      	push	{r7, lr}
    8dd6:	b082      	sub	sp, #8
    8dd8:	af00      	add	r7, sp, #0
    8dda:	4603      	mov	r3, r0
    8ddc:	6039      	str	r1, [r7, #0]
    8dde:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8de0:	683b      	ldr	r3, [r7, #0]
    8de2:	b2da      	uxtb	r2, r3
    8de4:	79fb      	ldrb	r3, [r7, #7]
    8de6:	4619      	mov	r1, r3
    8de8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dec:	4b02      	ldr	r3, [pc, #8]	; (8df8 <_usbd_ep_int_ack+0x24>)
    8dee:	4798      	blx	r3
}
    8df0:	bf00      	nop
    8df2:	3708      	adds	r7, #8
    8df4:	46bd      	mov	sp, r7
    8df6:	bd80      	pop	{r7, pc}
    8df8:	000088ad 	.word	0x000088ad

00008dfc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b082      	sub	sp, #8
    8e00:	af00      	add	r7, sp, #0
    8e02:	4603      	mov	r3, r0
    8e04:	6039      	str	r1, [r7, #0]
    8e06:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8e08:	683b      	ldr	r3, [r7, #0]
    8e0a:	b2da      	uxtb	r2, r3
    8e0c:	79fb      	ldrb	r3, [r7, #7]
    8e0e:	4619      	mov	r1, r3
    8e10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e14:	4b02      	ldr	r3, [pc, #8]	; (8e20 <_usbd_ep_int_en+0x24>)
    8e16:	4798      	blx	r3
}
    8e18:	bf00      	nop
    8e1a:	3708      	adds	r7, #8
    8e1c:	46bd      	mov	sp, r7
    8e1e:	bd80      	pop	{r7, pc}
    8e20:	00008981 	.word	0x00008981

00008e24 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	af00      	add	r7, sp, #0
    8e2a:	4603      	mov	r3, r0
    8e2c:	6039      	str	r1, [r7, #0]
    8e2e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8e30:	683b      	ldr	r3, [r7, #0]
    8e32:	b2da      	uxtb	r2, r3
    8e34:	79fb      	ldrb	r3, [r7, #7]
    8e36:	4619      	mov	r1, r3
    8e38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e3c:	4b02      	ldr	r3, [pc, #8]	; (8e48 <_usbd_ep_int_dis+0x24>)
    8e3e:	4798      	blx	r3
}
    8e40:	bf00      	nop
    8e42:	3708      	adds	r7, #8
    8e44:	46bd      	mov	sp, r7
    8e46:	bd80      	pop	{r7, pc}
    8e48:	000089ad 	.word	0x000089ad

00008e4c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b082      	sub	sp, #8
    8e50:	af00      	add	r7, sp, #0
    8e52:	4603      	mov	r3, r0
    8e54:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8e56:	79fb      	ldrb	r3, [r7, #7]
    8e58:	4619      	mov	r1, r3
    8e5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e5e:	4b06      	ldr	r3, [pc, #24]	; (8e78 <_usbd_ep_is_ctrl+0x2c>)
    8e60:	4798      	blx	r3
    8e62:	4603      	mov	r3, r0
    8e64:	2b11      	cmp	r3, #17
    8e66:	bf0c      	ite	eq
    8e68:	2301      	moveq	r3, #1
    8e6a:	2300      	movne	r3, #0
    8e6c:	b2db      	uxtb	r3, r3
}
    8e6e:	4618      	mov	r0, r3
    8e70:	3708      	adds	r7, #8
    8e72:	46bd      	mov	sp, r7
    8e74:	bd80      	pop	{r7, pc}
    8e76:	bf00      	nop
    8e78:	00008a67 	.word	0x00008a67

00008e7c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	b082      	sub	sp, #8
    8e80:	af00      	add	r7, sp, #0
    8e82:	4603      	mov	r3, r0
    8e84:	71fb      	strb	r3, [r7, #7]
    8e86:	460b      	mov	r3, r1
    8e88:	71bb      	strb	r3, [r7, #6]
    8e8a:	4613      	mov	r3, r2
    8e8c:	717b      	strb	r3, [r7, #5]
	if (st) {
    8e8e:	797b      	ldrb	r3, [r7, #5]
    8e90:	2b00      	cmp	r3, #0
    8e92:	d00b      	beq.n	8eac <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e94:	79bb      	ldrb	r3, [r7, #6]
    8e96:	2210      	movs	r2, #16
    8e98:	fa02 f303 	lsl.w	r3, r2, r3
    8e9c:	b2da      	uxtb	r2, r3
    8e9e:	79fb      	ldrb	r3, [r7, #7]
    8ea0:	4619      	mov	r1, r3
    8ea2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ea6:	4b09      	ldr	r3, [pc, #36]	; (8ecc <_usbd_ep_set_stall+0x50>)
    8ea8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8eaa:	e00a      	b.n	8ec2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8eac:	79bb      	ldrb	r3, [r7, #6]
    8eae:	2210      	movs	r2, #16
    8eb0:	fa02 f303 	lsl.w	r3, r2, r3
    8eb4:	b2da      	uxtb	r2, r3
    8eb6:	79fb      	ldrb	r3, [r7, #7]
    8eb8:	4619      	mov	r1, r3
    8eba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ebe:	4b04      	ldr	r3, [pc, #16]	; (8ed0 <_usbd_ep_set_stall+0x54>)
    8ec0:	4798      	blx	r3
}
    8ec2:	bf00      	nop
    8ec4:	3708      	adds	r7, #8
    8ec6:	46bd      	mov	sp, r7
    8ec8:	bd80      	pop	{r7, pc}
    8eca:	bf00      	nop
    8ecc:	000088d9 	.word	0x000088d9
    8ed0:	0000892d 	.word	0x0000892d

00008ed4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	b084      	sub	sp, #16
    8ed8:	af00      	add	r7, sp, #0
    8eda:	4603      	mov	r3, r0
    8edc:	460a      	mov	r2, r1
    8ede:	71fb      	strb	r3, [r7, #7]
    8ee0:	4613      	mov	r3, r2
    8ee2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8ee4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ee8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8eea:	79fb      	ldrb	r3, [r7, #7]
    8eec:	4619      	mov	r1, r3
    8eee:	68f8      	ldr	r0, [r7, #12]
    8ef0:	4b08      	ldr	r3, [pc, #32]	; (8f14 <_usbd_ep_is_stalled+0x40>)
    8ef2:	4798      	blx	r3
    8ef4:	4603      	mov	r3, r0
    8ef6:	4619      	mov	r1, r3
    8ef8:	79bb      	ldrb	r3, [r7, #6]
    8efa:	2210      	movs	r2, #16
    8efc:	fa02 f303 	lsl.w	r3, r2, r3
    8f00:	400b      	ands	r3, r1
    8f02:	2b00      	cmp	r3, #0
    8f04:	bf14      	ite	ne
    8f06:	2301      	movne	r3, #1
    8f08:	2300      	moveq	r3, #0
    8f0a:	b2db      	uxtb	r3, r3
}
    8f0c:	4618      	mov	r0, r3
    8f0e:	3710      	adds	r7, #16
    8f10:	46bd      	mov	sp, r7
    8f12:	bd80      	pop	{r7, pc}
    8f14:	00008905 	.word	0x00008905

00008f18 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8f18:	b580      	push	{r7, lr}
    8f1a:	b084      	sub	sp, #16
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	4603      	mov	r3, r0
    8f20:	460a      	mov	r2, r1
    8f22:	71fb      	strb	r3, [r7, #7]
    8f24:	4613      	mov	r3, r2
    8f26:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8f28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f2c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8f2e:	79fb      	ldrb	r3, [r7, #7]
    8f30:	4619      	mov	r1, r3
    8f32:	68f8      	ldr	r0, [r7, #12]
    8f34:	4b08      	ldr	r3, [pc, #32]	; (8f58 <_usbd_ep_is_stall_sent+0x40>)
    8f36:	4798      	blx	r3
    8f38:	4603      	mov	r3, r0
    8f3a:	4619      	mov	r1, r3
    8f3c:	79bb      	ldrb	r3, [r7, #6]
    8f3e:	2220      	movs	r2, #32
    8f40:	fa02 f303 	lsl.w	r3, r2, r3
    8f44:	400b      	ands	r3, r1
    8f46:	2b00      	cmp	r3, #0
    8f48:	bf14      	ite	ne
    8f4a:	2301      	movne	r3, #1
    8f4c:	2300      	moveq	r3, #0
    8f4e:	b2db      	uxtb	r3, r3
}
    8f50:	4618      	mov	r0, r3
    8f52:	3710      	adds	r7, #16
    8f54:	46bd      	mov	sp, r7
    8f56:	bd80      	pop	{r7, pc}
    8f58:	00008885 	.word	0x00008885

00008f5c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	af00      	add	r7, sp, #0
    8f62:	4603      	mov	r3, r0
    8f64:	460a      	mov	r2, r1
    8f66:	71fb      	strb	r3, [r7, #7]
    8f68:	4613      	mov	r3, r2
    8f6a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8f6c:	79bb      	ldrb	r3, [r7, #6]
    8f6e:	2220      	movs	r2, #32
    8f70:	409a      	lsls	r2, r3
    8f72:	79fb      	ldrb	r3, [r7, #7]
    8f74:	4611      	mov	r1, r2
    8f76:	4618      	mov	r0, r3
    8f78:	4b02      	ldr	r3, [pc, #8]	; (8f84 <_usbd_ep_ack_stall+0x28>)
    8f7a:	4798      	blx	r3
}
    8f7c:	bf00      	nop
    8f7e:	3708      	adds	r7, #8
    8f80:	46bd      	mov	sp, r7
    8f82:	bd80      	pop	{r7, pc}
    8f84:	00008dd5 	.word	0x00008dd5

00008f88 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8f88:	b580      	push	{r7, lr}
    8f8a:	b082      	sub	sp, #8
    8f8c:	af00      	add	r7, sp, #0
    8f8e:	4603      	mov	r3, r0
    8f90:	71fb      	strb	r3, [r7, #7]
    8f92:	460b      	mov	r3, r1
    8f94:	71bb      	strb	r3, [r7, #6]
    8f96:	4613      	mov	r3, r2
    8f98:	717b      	strb	r3, [r7, #5]
	if (en) {
    8f9a:	797b      	ldrb	r3, [r7, #5]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d008      	beq.n	8fb2 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8fa0:	79bb      	ldrb	r3, [r7, #6]
    8fa2:	2220      	movs	r2, #32
    8fa4:	409a      	lsls	r2, r3
    8fa6:	79fb      	ldrb	r3, [r7, #7]
    8fa8:	4611      	mov	r1, r2
    8faa:	4618      	mov	r0, r3
    8fac:	4b07      	ldr	r3, [pc, #28]	; (8fcc <_usbd_ep_int_stall_en+0x44>)
    8fae:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8fb0:	e007      	b.n	8fc2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8fb2:	79bb      	ldrb	r3, [r7, #6]
    8fb4:	2220      	movs	r2, #32
    8fb6:	409a      	lsls	r2, r3
    8fb8:	79fb      	ldrb	r3, [r7, #7]
    8fba:	4611      	mov	r1, r2
    8fbc:	4618      	mov	r0, r3
    8fbe:	4b04      	ldr	r3, [pc, #16]	; (8fd0 <_usbd_ep_int_stall_en+0x48>)
    8fc0:	4798      	blx	r3
}
    8fc2:	bf00      	nop
    8fc4:	3708      	adds	r7, #8
    8fc6:	46bd      	mov	sp, r7
    8fc8:	bd80      	pop	{r7, pc}
    8fca:	bf00      	nop
    8fcc:	00008dfd 	.word	0x00008dfd
    8fd0:	00008e25 	.word	0x00008e25

00008fd4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	b082      	sub	sp, #8
    8fd8:	af00      	add	r7, sp, #0
    8fda:	4603      	mov	r3, r0
    8fdc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8fde:	79fb      	ldrb	r3, [r7, #7]
    8fe0:	4619      	mov	r1, r3
    8fe2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fe6:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <_usbd_ep_stop_setup+0x20>)
    8fe8:	4798      	blx	r3
}
    8fea:	bf00      	nop
    8fec:	3708      	adds	r7, #8
    8fee:	46bd      	mov	sp, r7
    8ff0:	bd80      	pop	{r7, pc}
    8ff2:	bf00      	nop
    8ff4:	00008959 	.word	0x00008959

00008ff8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8ff8:	b580      	push	{r7, lr}
    8ffa:	b082      	sub	sp, #8
    8ffc:	af00      	add	r7, sp, #0
    8ffe:	4603      	mov	r3, r0
    9000:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9002:	79fb      	ldrb	r3, [r7, #7]
    9004:	2210      	movs	r2, #16
    9006:	4619      	mov	r1, r3
    9008:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    900c:	4b05      	ldr	r3, [pc, #20]	; (9024 <_usbd_ep_is_setup+0x2c>)
    900e:	4798      	blx	r3
    9010:	4603      	mov	r3, r0
    9012:	2b00      	cmp	r3, #0
    9014:	bf14      	ite	ne
    9016:	2301      	movne	r3, #1
    9018:	2300      	moveq	r3, #0
    901a:	b2db      	uxtb	r3, r3
}
    901c:	4618      	mov	r0, r3
    901e:	3708      	adds	r7, #8
    9020:	46bd      	mov	sp, r7
    9022:	bd80      	pop	{r7, pc}
    9024:	0000884f 	.word	0x0000884f

00009028 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9028:	b580      	push	{r7, lr}
    902a:	b082      	sub	sp, #8
    902c:	af00      	add	r7, sp, #0
    902e:	4603      	mov	r3, r0
    9030:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    9032:	79fb      	ldrb	r3, [r7, #7]
    9034:	2110      	movs	r1, #16
    9036:	4618      	mov	r0, r3
    9038:	4b02      	ldr	r3, [pc, #8]	; (9044 <_usbd_ep_ack_setup+0x1c>)
    903a:	4798      	blx	r3
}
    903c:	bf00      	nop
    903e:	3708      	adds	r7, #8
    9040:	46bd      	mov	sp, r7
    9042:	bd80      	pop	{r7, pc}
    9044:	00008dd5 	.word	0x00008dd5

00009048 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9048:	b580      	push	{r7, lr}
    904a:	b082      	sub	sp, #8
    904c:	af00      	add	r7, sp, #0
    904e:	4603      	mov	r3, r0
    9050:	71fb      	strb	r3, [r7, #7]
    9052:	460b      	mov	r3, r1
    9054:	71bb      	strb	r3, [r7, #6]
    9056:	4613      	mov	r3, r2
    9058:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    905a:	797b      	ldrb	r3, [r7, #5]
    905c:	2b00      	cmp	r3, #0
    905e:	d00b      	beq.n	9078 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9060:	79bb      	ldrb	r3, [r7, #6]
    9062:	2201      	movs	r2, #1
    9064:	fa02 f303 	lsl.w	r3, r2, r3
    9068:	b2da      	uxtb	r2, r3
    906a:	79fb      	ldrb	r3, [r7, #7]
    906c:	4619      	mov	r1, r3
    906e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9072:	4b09      	ldr	r3, [pc, #36]	; (9098 <_usbd_ep_set_toggle+0x50>)
    9074:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9076:	e00a      	b.n	908e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9078:	79bb      	ldrb	r3, [r7, #6]
    907a:	2201      	movs	r2, #1
    907c:	fa02 f303 	lsl.w	r3, r2, r3
    9080:	b2da      	uxtb	r2, r3
    9082:	79fb      	ldrb	r3, [r7, #7]
    9084:	4619      	mov	r1, r3
    9086:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    908a:	4b04      	ldr	r3, [pc, #16]	; (909c <_usbd_ep_set_toggle+0x54>)
    908c:	4798      	blx	r3
}
    908e:	bf00      	nop
    9090:	3708      	adds	r7, #8
    9092:	46bd      	mov	sp, r7
    9094:	bd80      	pop	{r7, pc}
    9096:	bf00      	nop
    9098:	000088d9 	.word	0x000088d9
    909c:	0000892d 	.word	0x0000892d

000090a0 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b082      	sub	sp, #8
    90a4:	af00      	add	r7, sp, #0
    90a6:	4603      	mov	r3, r0
    90a8:	460a      	mov	r2, r1
    90aa:	71fb      	strb	r3, [r7, #7]
    90ac:	4613      	mov	r3, r2
    90ae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    90b0:	79bb      	ldrb	r3, [r7, #6]
    90b2:	2201      	movs	r2, #1
    90b4:	409a      	lsls	r2, r3
    90b6:	79fb      	ldrb	r3, [r7, #7]
    90b8:	4611      	mov	r1, r2
    90ba:	4618      	mov	r0, r3
    90bc:	4b02      	ldr	r3, [pc, #8]	; (90c8 <_usbd_ep_ack_io_cpt+0x28>)
    90be:	4798      	blx	r3
}
    90c0:	bf00      	nop
    90c2:	3708      	adds	r7, #8
    90c4:	46bd      	mov	sp, r7
    90c6:	bd80      	pop	{r7, pc}
    90c8:	00008dd5 	.word	0x00008dd5

000090cc <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    90cc:	b480      	push	{r7}
    90ce:	b085      	sub	sp, #20
    90d0:	af00      	add	r7, sp, #0
    90d2:	4603      	mov	r3, r0
    90d4:	603a      	str	r2, [r7, #0]
    90d6:	71fb      	strb	r3, [r7, #7]
    90d8:	460b      	mov	r3, r1
    90da:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90dc:	79fa      	ldrb	r2, [r7, #7]
    90de:	79bb      	ldrb	r3, [r7, #6]
    90e0:	0052      	lsls	r2, r2, #1
    90e2:	4413      	add	r3, r2
    90e4:	011b      	lsls	r3, r3, #4
    90e6:	4a06      	ldr	r2, [pc, #24]	; (9100 <_usbd_ep_set_buf+0x34>)
    90e8:	4413      	add	r3, r2
    90ea:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    90ec:	68fb      	ldr	r3, [r7, #12]
    90ee:	683a      	ldr	r2, [r7, #0]
    90f0:	601a      	str	r2, [r3, #0]
}
    90f2:	bf00      	nop
    90f4:	3714      	adds	r7, #20
    90f6:	46bd      	mov	sp, r7
    90f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fc:	4770      	bx	lr
    90fe:	bf00      	nop
    9100:	20000b58 	.word	0x20000b58

00009104 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9104:	b480      	push	{r7}
    9106:	b085      	sub	sp, #20
    9108:	af00      	add	r7, sp, #0
    910a:	4603      	mov	r3, r0
    910c:	71fb      	strb	r3, [r7, #7]
    910e:	460b      	mov	r3, r1
    9110:	71bb      	strb	r3, [r7, #6]
    9112:	4613      	mov	r3, r2
    9114:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9116:	79fa      	ldrb	r2, [r7, #7]
    9118:	79bb      	ldrb	r3, [r7, #6]
    911a:	0052      	lsls	r2, r2, #1
    911c:	4413      	add	r3, r2
    911e:	011b      	lsls	r3, r3, #4
    9120:	4a08      	ldr	r2, [pc, #32]	; (9144 <_usbd_ep_set_in_count+0x40>)
    9122:	4413      	add	r3, r2
    9124:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9126:	88bb      	ldrh	r3, [r7, #4]
    9128:	f3c3 030d 	ubfx	r3, r3, #0, #14
    912c:	b299      	uxth	r1, r3
    912e:	68fa      	ldr	r2, [r7, #12]
    9130:	6853      	ldr	r3, [r2, #4]
    9132:	f361 339b 	bfi	r3, r1, #14, #14
    9136:	6053      	str	r3, [r2, #4]
}
    9138:	bf00      	nop
    913a:	3714      	adds	r7, #20
    913c:	46bd      	mov	sp, r7
    913e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9142:	4770      	bx	lr
    9144:	20000b58 	.word	0x20000b58

00009148 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9148:	b480      	push	{r7}
    914a:	b085      	sub	sp, #20
    914c:	af00      	add	r7, sp, #0
    914e:	4603      	mov	r3, r0
    9150:	71fb      	strb	r3, [r7, #7]
    9152:	460b      	mov	r3, r1
    9154:	71bb      	strb	r3, [r7, #6]
    9156:	4613      	mov	r3, r2
    9158:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    915a:	79fa      	ldrb	r2, [r7, #7]
    915c:	79bb      	ldrb	r3, [r7, #6]
    915e:	0052      	lsls	r2, r2, #1
    9160:	4413      	add	r3, r2
    9162:	011b      	lsls	r3, r3, #4
    9164:	4a08      	ldr	r2, [pc, #32]	; (9188 <_usbd_ep_set_in_size+0x40>)
    9166:	4413      	add	r3, r2
    9168:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    916a:	88bb      	ldrh	r3, [r7, #4]
    916c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9170:	b299      	uxth	r1, r3
    9172:	68fa      	ldr	r2, [r7, #12]
    9174:	6853      	ldr	r3, [r2, #4]
    9176:	f361 030d 	bfi	r3, r1, #0, #14
    917a:	6053      	str	r3, [r2, #4]
}
    917c:	bf00      	nop
    917e:	3714      	adds	r7, #20
    9180:	46bd      	mov	sp, r7
    9182:	f85d 7b04 	ldr.w	r7, [sp], #4
    9186:	4770      	bx	lr
    9188:	20000b58 	.word	0x20000b58

0000918c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    918c:	b480      	push	{r7}
    918e:	b085      	sub	sp, #20
    9190:	af00      	add	r7, sp, #0
    9192:	4603      	mov	r3, r0
    9194:	71fb      	strb	r3, [r7, #7]
    9196:	460b      	mov	r3, r1
    9198:	71bb      	strb	r3, [r7, #6]
    919a:	4613      	mov	r3, r2
    919c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    919e:	79fa      	ldrb	r2, [r7, #7]
    91a0:	79bb      	ldrb	r3, [r7, #6]
    91a2:	0052      	lsls	r2, r2, #1
    91a4:	4413      	add	r3, r2
    91a6:	011b      	lsls	r3, r3, #4
    91a8:	4a08      	ldr	r2, [pc, #32]	; (91cc <_usbd_ep_set_out_count+0x40>)
    91aa:	4413      	add	r3, r2
    91ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    91ae:	88bb      	ldrh	r3, [r7, #4]
    91b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    91b4:	b299      	uxth	r1, r3
    91b6:	68fa      	ldr	r2, [r7, #12]
    91b8:	6853      	ldr	r3, [r2, #4]
    91ba:	f361 030d 	bfi	r3, r1, #0, #14
    91be:	6053      	str	r3, [r2, #4]
}
    91c0:	bf00      	nop
    91c2:	3714      	adds	r7, #20
    91c4:	46bd      	mov	sp, r7
    91c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ca:	4770      	bx	lr
    91cc:	20000b58 	.word	0x20000b58

000091d0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    91d0:	b480      	push	{r7}
    91d2:	b085      	sub	sp, #20
    91d4:	af00      	add	r7, sp, #0
    91d6:	4603      	mov	r3, r0
    91d8:	71fb      	strb	r3, [r7, #7]
    91da:	460b      	mov	r3, r1
    91dc:	71bb      	strb	r3, [r7, #6]
    91de:	4613      	mov	r3, r2
    91e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    91e2:	79fa      	ldrb	r2, [r7, #7]
    91e4:	79bb      	ldrb	r3, [r7, #6]
    91e6:	0052      	lsls	r2, r2, #1
    91e8:	4413      	add	r3, r2
    91ea:	011b      	lsls	r3, r3, #4
    91ec:	4a08      	ldr	r2, [pc, #32]	; (9210 <_usbd_ep_set_out_size+0x40>)
    91ee:	4413      	add	r3, r2
    91f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    91f2:	88bb      	ldrh	r3, [r7, #4]
    91f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    91f8:	b299      	uxth	r1, r3
    91fa:	68fa      	ldr	r2, [r7, #12]
    91fc:	6853      	ldr	r3, [r2, #4]
    91fe:	f361 339b 	bfi	r3, r1, #14, #14
    9202:	6053      	str	r3, [r2, #4]
}
    9204:	bf00      	nop
    9206:	3714      	adds	r7, #20
    9208:	46bd      	mov	sp, r7
    920a:	f85d 7b04 	ldr.w	r7, [sp], #4
    920e:	4770      	bx	lr
    9210:	20000b58 	.word	0x20000b58

00009214 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	af00      	add	r7, sp, #0
    921a:	60ba      	str	r2, [r7, #8]
    921c:	607b      	str	r3, [r7, #4]
    921e:	4603      	mov	r3, r0
    9220:	73fb      	strb	r3, [r7, #15]
    9222:	460b      	mov	r3, r1
    9224:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9226:	68bb      	ldr	r3, [r7, #8]
    9228:	b29a      	uxth	r2, r3
    922a:	7bb9      	ldrb	r1, [r7, #14]
    922c:	7bfb      	ldrb	r3, [r7, #15]
    922e:	4618      	mov	r0, r3
    9230:	4b06      	ldr	r3, [pc, #24]	; (924c <_usbd_ep_set_in_trans+0x38>)
    9232:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	b29a      	uxth	r2, r3
    9238:	7bb9      	ldrb	r1, [r7, #14]
    923a:	7bfb      	ldrb	r3, [r7, #15]
    923c:	4618      	mov	r0, r3
    923e:	4b04      	ldr	r3, [pc, #16]	; (9250 <_usbd_ep_set_in_trans+0x3c>)
    9240:	4798      	blx	r3
}
    9242:	bf00      	nop
    9244:	3710      	adds	r7, #16
    9246:	46bd      	mov	sp, r7
    9248:	bd80      	pop	{r7, pc}
    924a:	bf00      	nop
    924c:	00009149 	.word	0x00009149
    9250:	00009105 	.word	0x00009105

00009254 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9254:	b580      	push	{r7, lr}
    9256:	b084      	sub	sp, #16
    9258:	af00      	add	r7, sp, #0
    925a:	60ba      	str	r2, [r7, #8]
    925c:	607b      	str	r3, [r7, #4]
    925e:	4603      	mov	r3, r0
    9260:	73fb      	strb	r3, [r7, #15]
    9262:	460b      	mov	r3, r1
    9264:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9266:	68bb      	ldr	r3, [r7, #8]
    9268:	b29a      	uxth	r2, r3
    926a:	7bb9      	ldrb	r1, [r7, #14]
    926c:	7bfb      	ldrb	r3, [r7, #15]
    926e:	4618      	mov	r0, r3
    9270:	4b06      	ldr	r3, [pc, #24]	; (928c <_usbd_ep_set_out_trans+0x38>)
    9272:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	b29a      	uxth	r2, r3
    9278:	7bb9      	ldrb	r1, [r7, #14]
    927a:	7bfb      	ldrb	r3, [r7, #15]
    927c:	4618      	mov	r0, r3
    927e:	4b04      	ldr	r3, [pc, #16]	; (9290 <_usbd_ep_set_out_trans+0x3c>)
    9280:	4798      	blx	r3
}
    9282:	bf00      	nop
    9284:	3710      	adds	r7, #16
    9286:	46bd      	mov	sp, r7
    9288:	bd80      	pop	{r7, pc}
    928a:	bf00      	nop
    928c:	000091d1 	.word	0x000091d1
    9290:	0000918d 	.word	0x0000918d

00009294 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9294:	b480      	push	{r7}
    9296:	b085      	sub	sp, #20
    9298:	af00      	add	r7, sp, #0
    929a:	4603      	mov	r3, r0
    929c:	460a      	mov	r2, r1
    929e:	71fb      	strb	r3, [r7, #7]
    92a0:	4613      	mov	r3, r2
    92a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    92a4:	79fa      	ldrb	r2, [r7, #7]
    92a6:	79bb      	ldrb	r3, [r7, #6]
    92a8:	0052      	lsls	r2, r2, #1
    92aa:	4413      	add	r3, r2
    92ac:	011b      	lsls	r3, r3, #4
    92ae:	4a06      	ldr	r2, [pc, #24]	; (92c8 <_usbd_ep_clear_bank_status+0x34>)
    92b0:	4413      	add	r3, r2
    92b2:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    92b4:	68fb      	ldr	r3, [r7, #12]
    92b6:	2200      	movs	r2, #0
    92b8:	729a      	strb	r2, [r3, #10]
}
    92ba:	bf00      	nop
    92bc:	3714      	adds	r7, #20
    92be:	46bd      	mov	sp, r7
    92c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c4:	4770      	bx	lr
    92c6:	bf00      	nop
    92c8:	20000b58 	.word	0x20000b58

000092cc <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    92cc:	b580      	push	{r7, lr}
    92ce:	b082      	sub	sp, #8
    92d0:	af00      	add	r7, sp, #0
    92d2:	4603      	mov	r3, r0
    92d4:	71fb      	strb	r3, [r7, #7]
    92d6:	460b      	mov	r3, r1
    92d8:	71bb      	strb	r3, [r7, #6]
    92da:	4613      	mov	r3, r2
    92dc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    92de:	797b      	ldrb	r3, [r7, #5]
    92e0:	2b00      	cmp	r3, #0
    92e2:	d00b      	beq.n	92fc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92e4:	79bb      	ldrb	r3, [r7, #6]
    92e6:	2240      	movs	r2, #64	; 0x40
    92e8:	fa02 f303 	lsl.w	r3, r2, r3
    92ec:	b2da      	uxtb	r2, r3
    92ee:	79fb      	ldrb	r3, [r7, #7]
    92f0:	4619      	mov	r1, r3
    92f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92f6:	4b09      	ldr	r3, [pc, #36]	; (931c <_usbd_ep_set_in_rdy+0x50>)
    92f8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    92fa:	e00a      	b.n	9312 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92fc:	79bb      	ldrb	r3, [r7, #6]
    92fe:	2240      	movs	r2, #64	; 0x40
    9300:	fa02 f303 	lsl.w	r3, r2, r3
    9304:	b2da      	uxtb	r2, r3
    9306:	79fb      	ldrb	r3, [r7, #7]
    9308:	4619      	mov	r1, r3
    930a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    930e:	4b04      	ldr	r3, [pc, #16]	; (9320 <_usbd_ep_set_in_rdy+0x54>)
    9310:	4798      	blx	r3
}
    9312:	bf00      	nop
    9314:	3708      	adds	r7, #8
    9316:	46bd      	mov	sp, r7
    9318:	bd80      	pop	{r7, pc}
    931a:	bf00      	nop
    931c:	000088d9 	.word	0x000088d9
    9320:	0000892d 	.word	0x0000892d

00009324 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9324:	b580      	push	{r7, lr}
    9326:	b082      	sub	sp, #8
    9328:	af00      	add	r7, sp, #0
    932a:	4603      	mov	r3, r0
    932c:	71fb      	strb	r3, [r7, #7]
    932e:	460b      	mov	r3, r1
    9330:	71bb      	strb	r3, [r7, #6]
    9332:	4613      	mov	r3, r2
    9334:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9336:	797b      	ldrb	r3, [r7, #5]
    9338:	2b00      	cmp	r3, #0
    933a:	d00b      	beq.n	9354 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    933c:	79bb      	ldrb	r3, [r7, #6]
    933e:	2240      	movs	r2, #64	; 0x40
    9340:	fa02 f303 	lsl.w	r3, r2, r3
    9344:	b2da      	uxtb	r2, r3
    9346:	79fb      	ldrb	r3, [r7, #7]
    9348:	4619      	mov	r1, r3
    934a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    934e:	4b09      	ldr	r3, [pc, #36]	; (9374 <_usbd_ep_set_out_rdy+0x50>)
    9350:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9352:	e00a      	b.n	936a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9354:	79bb      	ldrb	r3, [r7, #6]
    9356:	2240      	movs	r2, #64	; 0x40
    9358:	fa02 f303 	lsl.w	r3, r2, r3
    935c:	b2da      	uxtb	r2, r3
    935e:	79fb      	ldrb	r3, [r7, #7]
    9360:	4619      	mov	r1, r3
    9362:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9366:	4b04      	ldr	r3, [pc, #16]	; (9378 <_usbd_ep_set_out_rdy+0x54>)
    9368:	4798      	blx	r3
}
    936a:	bf00      	nop
    936c:	3708      	adds	r7, #8
    936e:	46bd      	mov	sp, r7
    9370:	bd80      	pop	{r7, pc}
    9372:	bf00      	nop
    9374:	0000892d 	.word	0x0000892d
    9378:	000088d9 	.word	0x000088d9

0000937c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    937c:	b480      	push	{r7}
    937e:	b083      	sub	sp, #12
    9380:	af00      	add	r7, sp, #0
    9382:	4603      	mov	r3, r0
    9384:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9386:	88fb      	ldrh	r3, [r7, #6]
    9388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    938c:	d820      	bhi.n	93d0 <_usbd_ep_pcksize_size+0x54>
    938e:	88fb      	ldrh	r3, [r7, #6]
    9390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9394:	d81a      	bhi.n	93cc <_usbd_ep_pcksize_size+0x50>
    9396:	88fb      	ldrh	r3, [r7, #6]
    9398:	2b80      	cmp	r3, #128	; 0x80
    939a:	d815      	bhi.n	93c8 <_usbd_ep_pcksize_size+0x4c>
    939c:	88fb      	ldrh	r3, [r7, #6]
    939e:	2b40      	cmp	r3, #64	; 0x40
    93a0:	d810      	bhi.n	93c4 <_usbd_ep_pcksize_size+0x48>
    93a2:	88fb      	ldrh	r3, [r7, #6]
    93a4:	2b20      	cmp	r3, #32
    93a6:	d80b      	bhi.n	93c0 <_usbd_ep_pcksize_size+0x44>
    93a8:	88fb      	ldrh	r3, [r7, #6]
    93aa:	2b10      	cmp	r3, #16
    93ac:	d806      	bhi.n	93bc <_usbd_ep_pcksize_size+0x40>
    93ae:	88fb      	ldrh	r3, [r7, #6]
    93b0:	2b08      	cmp	r3, #8
    93b2:	bf8c      	ite	hi
    93b4:	2301      	movhi	r3, #1
    93b6:	2300      	movls	r3, #0
    93b8:	b2db      	uxtb	r3, r3
    93ba:	e00a      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93bc:	2302      	movs	r3, #2
    93be:	e008      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93c0:	2303      	movs	r3, #3
    93c2:	e006      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93c4:	2304      	movs	r3, #4
    93c6:	e004      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93c8:	2305      	movs	r3, #5
    93ca:	e002      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93cc:	2306      	movs	r3, #6
    93ce:	e000      	b.n	93d2 <_usbd_ep_pcksize_size+0x56>
    93d0:	2307      	movs	r3, #7
}
    93d2:	4618      	mov	r0, r3
    93d4:	370c      	adds	r7, #12
    93d6:	46bd      	mov	sp, r7
    93d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93dc:	4770      	bx	lr
	...

000093e0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    93e0:	b480      	push	{r7}
    93e2:	b085      	sub	sp, #20
    93e4:	af00      	add	r7, sp, #0
    93e6:	4603      	mov	r3, r0
    93e8:	460a      	mov	r2, r1
    93ea:	71fb      	strb	r3, [r7, #7]
    93ec:	4613      	mov	r3, r2
    93ee:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    93f0:	79fb      	ldrb	r3, [r7, #7]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d008      	beq.n	9408 <_usb_d_dev_ept+0x28>
    93f6:	79bb      	ldrb	r3, [r7, #6]
    93f8:	2b00      	cmp	r3, #0
    93fa:	d003      	beq.n	9404 <_usb_d_dev_ept+0x24>
    93fc:	79fb      	ldrb	r3, [r7, #7]
    93fe:	3304      	adds	r3, #4
    9400:	b2db      	uxtb	r3, r3
    9402:	e002      	b.n	940a <_usb_d_dev_ept+0x2a>
    9404:	79fb      	ldrb	r3, [r7, #7]
    9406:	e000      	b.n	940a <_usb_d_dev_ept+0x2a>
    9408:	2300      	movs	r3, #0
    940a:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    940c:	7bfa      	ldrb	r2, [r7, #15]
    940e:	4613      	mov	r3, r2
    9410:	009b      	lsls	r3, r3, #2
    9412:	4413      	add	r3, r2
    9414:	009b      	lsls	r3, r3, #2
    9416:	3310      	adds	r3, #16
    9418:	4a04      	ldr	r2, [pc, #16]	; (942c <_usb_d_dev_ept+0x4c>)
    941a:	4413      	add	r3, r2
    941c:	3304      	adds	r3, #4
}
    941e:	4618      	mov	r0, r3
    9420:	3714      	adds	r7, #20
    9422:	46bd      	mov	sp, r7
    9424:	f85d 7b04 	ldr.w	r7, [sp], #4
    9428:	4770      	bx	lr
    942a:	bf00      	nop
    942c:	20000a90 	.word	0x20000a90

00009430 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9430:	b580      	push	{r7, lr}
    9432:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9434:	2104      	movs	r1, #4
    9436:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    943a:	4b03      	ldr	r3, [pc, #12]	; (9448 <_usb_d_dev_sof+0x18>)
    943c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    943e:	4b03      	ldr	r3, [pc, #12]	; (944c <_usb_d_dev_sof+0x1c>)
    9440:	681b      	ldr	r3, [r3, #0]
    9442:	4798      	blx	r3
}
    9444:	bf00      	nop
    9446:	bd80      	pop	{r7, pc}
    9448:	00008aa7 	.word	0x00008aa7
    944c:	20000a90 	.word	0x20000a90

00009450 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9450:	b580      	push	{r7, lr}
    9452:	b084      	sub	sp, #16
    9454:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9456:	2300      	movs	r3, #0
    9458:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    945a:	f240 2101 	movw	r1, #513	; 0x201
    945e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9462:	4b1a      	ldr	r3, [pc, #104]	; (94cc <_usb_d_dev_lpmsusp+0x7c>)
    9464:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9466:	f240 2101 	movw	r1, #513	; 0x201
    946a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    946e:	4b18      	ldr	r3, [pc, #96]	; (94d0 <_usb_d_dev_lpmsusp+0x80>)
    9470:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9472:	2170      	movs	r1, #112	; 0x70
    9474:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9478:	4b16      	ldr	r3, [pc, #88]	; (94d4 <_usb_d_dev_lpmsusp+0x84>)
    947a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    947c:	2300      	movs	r3, #0
    947e:	73fb      	strb	r3, [r7, #15]
    9480:	e018      	b.n	94b4 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9482:	7bfb      	ldrb	r3, [r7, #15]
    9484:	015b      	lsls	r3, r3, #5
    9486:	4a14      	ldr	r2, [pc, #80]	; (94d8 <_usb_d_dev_lpmsusp+0x88>)
    9488:	4413      	add	r3, r2
    948a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    948c:	687b      	ldr	r3, [r7, #4]
    948e:	891b      	ldrh	r3, [r3, #8]
    9490:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9494:	b2db      	uxtb	r3, r3
    9496:	2b03      	cmp	r3, #3
    9498:	d109      	bne.n	94ae <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    949a:	687b      	ldr	r3, [r7, #4]
    949c:	891b      	ldrh	r3, [r3, #8]
    949e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    94a2:	b29b      	uxth	r3, r3
    94a4:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	2200      	movs	r2, #0
    94aa:	811a      	strh	r2, [r3, #8]
			break;
    94ac:	e005      	b.n	94ba <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    94ae:	7bfb      	ldrb	r3, [r7, #15]
    94b0:	3301      	adds	r3, #1
    94b2:	73fb      	strb	r3, [r7, #15]
    94b4:	7bfb      	ldrb	r3, [r7, #15]
    94b6:	2b03      	cmp	r3, #3
    94b8:	d9e3      	bls.n	9482 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    94ba:	4b08      	ldr	r3, [pc, #32]	; (94dc <_usb_d_dev_lpmsusp+0x8c>)
    94bc:	685b      	ldr	r3, [r3, #4]
    94be:	68b9      	ldr	r1, [r7, #8]
    94c0:	2003      	movs	r0, #3
    94c2:	4798      	blx	r3
}
    94c4:	bf00      	nop
    94c6:	3710      	adds	r7, #16
    94c8:	46bd      	mov	sp, r7
    94ca:	bd80      	pop	{r7, pc}
    94cc:	00008aa7 	.word	0x00008aa7
    94d0:	00008afd 	.word	0x00008afd
    94d4:	00008ac5 	.word	0x00008ac5
    94d8:	20000b58 	.word	0x20000b58
    94dc:	20000a90 	.word	0x20000a90

000094e0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    94e4:	2180      	movs	r1, #128	; 0x80
    94e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94ea:	4b04      	ldr	r3, [pc, #16]	; (94fc <_usb_d_dev_ramerr+0x1c>)
    94ec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    94ee:	4b04      	ldr	r3, [pc, #16]	; (9500 <_usb_d_dev_ramerr+0x20>)
    94f0:	685b      	ldr	r3, [r3, #4]
    94f2:	2100      	movs	r1, #0
    94f4:	2005      	movs	r0, #5
    94f6:	4798      	blx	r3
}
    94f8:	bf00      	nop
    94fa:	bd80      	pop	{r7, pc}
    94fc:	00008aa7 	.word	0x00008aa7
    9500:	20000a90 	.word	0x20000a90

00009504 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9504:	b580      	push	{r7, lr}
    9506:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9508:	2170      	movs	r1, #112	; 0x70
    950a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    950e:	4b0b      	ldr	r3, [pc, #44]	; (953c <_usb_d_dev_wakeup+0x38>)
    9510:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9512:	2170      	movs	r1, #112	; 0x70
    9514:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9518:	4b09      	ldr	r3, [pc, #36]	; (9540 <_usb_d_dev_wakeup+0x3c>)
    951a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    951c:	f240 2101 	movw	r1, #513	; 0x201
    9520:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9524:	4b07      	ldr	r3, [pc, #28]	; (9544 <_usb_d_dev_wakeup+0x40>)
    9526:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9528:	2000      	movs	r0, #0
    952a:	4b07      	ldr	r3, [pc, #28]	; (9548 <_usb_d_dev_wakeup+0x44>)
    952c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    952e:	4b07      	ldr	r3, [pc, #28]	; (954c <_usb_d_dev_wakeup+0x48>)
    9530:	685b      	ldr	r3, [r3, #4]
    9532:	2100      	movs	r1, #0
    9534:	2002      	movs	r0, #2
    9536:	4798      	blx	r3
}
    9538:	bf00      	nop
    953a:	bd80      	pop	{r7, pc}
    953c:	00008aa7 	.word	0x00008aa7
    9540:	00008afd 	.word	0x00008afd
    9544:	00008ac5 	.word	0x00008ac5
    9548:	00008da5 	.word	0x00008da5
    954c:	20000a90 	.word	0x20000a90

00009550 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9550:	b580      	push	{r7, lr}
    9552:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9554:	2200      	movs	r2, #0
    9556:	2100      	movs	r1, #0
    9558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    955c:	4b0d      	ldr	r3, [pc, #52]	; (9594 <_usb_d_dev_reset+0x44>)
    955e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9560:	2108      	movs	r1, #8
    9562:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9566:	4b0c      	ldr	r3, [pc, #48]	; (9598 <_usb_d_dev_reset+0x48>)
    9568:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    956a:	2170      	movs	r1, #112	; 0x70
    956c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9570:	4b0a      	ldr	r3, [pc, #40]	; (959c <_usb_d_dev_reset+0x4c>)
    9572:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9574:	f240 2101 	movw	r1, #513	; 0x201
    9578:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    957c:	4b08      	ldr	r3, [pc, #32]	; (95a0 <_usb_d_dev_reset+0x50>)
    957e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9580:	4b08      	ldr	r3, [pc, #32]	; (95a4 <_usb_d_dev_reset+0x54>)
    9582:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9584:	4b08      	ldr	r3, [pc, #32]	; (95a8 <_usb_d_dev_reset+0x58>)
    9586:	685b      	ldr	r3, [r3, #4]
    9588:	2100      	movs	r1, #0
    958a:	2001      	movs	r0, #1
    958c:	4798      	blx	r3
}
    958e:	bf00      	nop
    9590:	bd80      	pop	{r7, pc}
    9592:	bf00      	nop
    9594:	00008a3d 	.word	0x00008a3d
    9598:	00008aa7 	.word	0x00008aa7
    959c:	00008afd 	.word	0x00008afd
    95a0:	00008ac5 	.word	0x00008ac5
    95a4:	0000a10d 	.word	0x0000a10d
    95a8:	20000a90 	.word	0x20000a90

000095ac <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    95b0:	f240 2101 	movw	r1, #513	; 0x201
    95b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95b8:	4b09      	ldr	r3, [pc, #36]	; (95e0 <_usb_d_dev_suspend+0x34>)
    95ba:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    95bc:	f240 2101 	movw	r1, #513	; 0x201
    95c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95c4:	4b07      	ldr	r3, [pc, #28]	; (95e4 <_usb_d_dev_suspend+0x38>)
    95c6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    95c8:	2170      	movs	r1, #112	; 0x70
    95ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95ce:	4b06      	ldr	r3, [pc, #24]	; (95e8 <_usb_d_dev_suspend+0x3c>)
    95d0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    95d2:	4b06      	ldr	r3, [pc, #24]	; (95ec <_usb_d_dev_suspend+0x40>)
    95d4:	685b      	ldr	r3, [r3, #4]
    95d6:	2100      	movs	r1, #0
    95d8:	2004      	movs	r0, #4
    95da:	4798      	blx	r3
}
    95dc:	bf00      	nop
    95de:	bd80      	pop	{r7, pc}
    95e0:	00008aa7 	.word	0x00008aa7
    95e4:	00008afd 	.word	0x00008afd
    95e8:	00008ac5 	.word	0x00008ac5
    95ec:	20000a90 	.word	0x20000a90

000095f0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    95f0:	b580      	push	{r7, lr}
    95f2:	b082      	sub	sp, #8
    95f4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    95f6:	2301      	movs	r3, #1
    95f8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    95fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95fe:	4b22      	ldr	r3, [pc, #136]	; (9688 <_usb_d_dev_handle_nep+0x98>)
    9600:	4798      	blx	r3
    9602:	4603      	mov	r3, r0
    9604:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9606:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    960a:	4b20      	ldr	r3, [pc, #128]	; (968c <_usb_d_dev_handle_nep+0x9c>)
    960c:	4798      	blx	r3
    960e:	4603      	mov	r3, r0
    9610:	461a      	mov	r2, r3
    9612:	88bb      	ldrh	r3, [r7, #4]
    9614:	4013      	ands	r3, r2
    9616:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9618:	88bb      	ldrh	r3, [r7, #4]
    961a:	f003 0304 	and.w	r3, r3, #4
    961e:	2b00      	cmp	r3, #0
    9620:	d003      	beq.n	962a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9622:	4b1b      	ldr	r3, [pc, #108]	; (9690 <_usb_d_dev_handle_nep+0xa0>)
    9624:	4798      	blx	r3
		return true;
    9626:	2301      	movs	r3, #1
    9628:	e02a      	b.n	9680 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    962a:	88bb      	ldrh	r3, [r7, #4]
    962c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9630:	2b00      	cmp	r3, #0
    9632:	d002      	beq.n	963a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9634:	4b17      	ldr	r3, [pc, #92]	; (9694 <_usb_d_dev_handle_nep+0xa4>)
    9636:	4798      	blx	r3
    9638:	e021      	b.n	967e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    963a:	88bb      	ldrh	r3, [r7, #4]
    963c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9640:	2b00      	cmp	r3, #0
    9642:	d002      	beq.n	964a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9644:	4b14      	ldr	r3, [pc, #80]	; (9698 <_usb_d_dev_handle_nep+0xa8>)
    9646:	4798      	blx	r3
    9648:	e019      	b.n	967e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    964a:	88bb      	ldrh	r3, [r7, #4]
    964c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9650:	2b00      	cmp	r3, #0
    9652:	d002      	beq.n	965a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9654:	4b11      	ldr	r3, [pc, #68]	; (969c <_usb_d_dev_handle_nep+0xac>)
    9656:	4798      	blx	r3
    9658:	e011      	b.n	967e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    965a:	88bb      	ldrh	r3, [r7, #4]
    965c:	f003 0308 	and.w	r3, r3, #8
    9660:	2b00      	cmp	r3, #0
    9662:	d002      	beq.n	966a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9664:	4b0e      	ldr	r3, [pc, #56]	; (96a0 <_usb_d_dev_handle_nep+0xb0>)
    9666:	4798      	blx	r3
    9668:	e009      	b.n	967e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    966a:	88bb      	ldrh	r3, [r7, #4]
    966c:	f003 0301 	and.w	r3, r3, #1
    9670:	2b00      	cmp	r3, #0
    9672:	d002      	beq.n	967a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9674:	4b0b      	ldr	r3, [pc, #44]	; (96a4 <_usb_d_dev_handle_nep+0xb4>)
    9676:	4798      	blx	r3
    9678:	e001      	b.n	967e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    967a:	2300      	movs	r3, #0
    967c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    967e:	79fb      	ldrb	r3, [r7, #7]
}
    9680:	4618      	mov	r0, r3
    9682:	3708      	adds	r7, #8
    9684:	46bd      	mov	sp, r7
    9686:	bd80      	pop	{r7, pc}
    9688:	00008a8d 	.word	0x00008a8d
    968c:	00008ae3 	.word	0x00008ae3
    9690:	00009431 	.word	0x00009431
    9694:	00009451 	.word	0x00009451
    9698:	000094e1 	.word	0x000094e1
    969c:	00009505 	.word	0x00009505
    96a0:	00009551 	.word	0x00009551
    96a4:	000095ad 	.word	0x000095ad

000096a8 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    96a8:	b590      	push	{r4, r7, lr}
    96aa:	b089      	sub	sp, #36	; 0x24
    96ac:	af00      	add	r7, sp, #0
    96ae:	6078      	str	r0, [r7, #4]
    96b0:	460b      	mov	r3, r1
    96b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    96b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96b8:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    96ba:	687b      	ldr	r3, [r7, #4]
    96bc:	7c9b      	ldrb	r3, [r3, #18]
    96be:	f003 030f 	and.w	r3, r3, #15
    96c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    96c4:	7dfb      	ldrb	r3, [r7, #23]
    96c6:	015b      	lsls	r3, r3, #5
    96c8:	4a73      	ldr	r2, [pc, #460]	; (9898 <_usb_d_dev_in_next+0x1f0>)
    96ca:	4413      	add	r3, r2
    96cc:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    96ce:	78fb      	ldrb	r3, [r7, #3]
    96d0:	2b00      	cmp	r3, #0
    96d2:	d006      	beq.n	96e2 <_usb_d_dev_in_next+0x3a>
    96d4:	693b      	ldr	r3, [r7, #16]
    96d6:	3310      	adds	r3, #16
    96d8:	685b      	ldr	r3, [r3, #4]
    96da:	f3c3 030d 	ubfx	r3, r3, #0, #14
    96de:	b29b      	uxth	r3, r3
    96e0:	e000      	b.n	96e4 <_usb_d_dev_in_next+0x3c>
    96e2:	2300      	movs	r3, #0
    96e4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    96e6:	687b      	ldr	r3, [r7, #4]
    96e8:	8a1b      	ldrh	r3, [r3, #16]
    96ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    96ee:	4293      	cmp	r3, r2
    96f0:	d103      	bne.n	96fa <_usb_d_dev_in_next+0x52>
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	8a1b      	ldrh	r3, [r3, #16]
    96f6:	b21b      	sxth	r3, r3
    96f8:	e004      	b.n	9704 <_usb_d_dev_in_next+0x5c>
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	8a1b      	ldrh	r3, [r3, #16]
    96fe:	3b01      	subs	r3, #1
    9700:	b29b      	uxth	r3, r3
    9702:	b21b      	sxth	r3, r3
    9704:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9708:	4013      	ands	r3, r2
    970a:	b21b      	sxth	r3, r3
    970c:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    970e:	2300      	movs	r3, #0
    9710:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9712:	687b      	ldr	r3, [r7, #4]
    9714:	7cdb      	ldrb	r3, [r3, #19]
    9716:	f003 0307 	and.w	r3, r3, #7
    971a:	b2db      	uxtb	r3, r3
    971c:	2b01      	cmp	r3, #1
    971e:	bf0c      	ite	eq
    9720:	2301      	moveq	r3, #1
    9722:	2300      	movne	r3, #0
    9724:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9726:	78fb      	ldrb	r3, [r7, #3]
    9728:	2b00      	cmp	r3, #0
    972a:	d004      	beq.n	9736 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    972c:	7dfb      	ldrb	r3, [r7, #23]
    972e:	2101      	movs	r1, #1
    9730:	4618      	mov	r0, r3
    9732:	4b5a      	ldr	r3, [pc, #360]	; (989c <_usb_d_dev_in_next+0x1f4>)
    9734:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9736:	687b      	ldr	r3, [r7, #4]
    9738:	689a      	ldr	r2, [r3, #8]
    973a:	89fb      	ldrh	r3, [r7, #14]
    973c:	441a      	add	r2, r3
    973e:	687b      	ldr	r3, [r7, #4]
    9740:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	689a      	ldr	r2, [r3, #8]
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	685b      	ldr	r3, [r3, #4]
    974a:	429a      	cmp	r2, r3
    974c:	d243      	bcs.n	97d6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    974e:	687b      	ldr	r3, [r7, #4]
    9750:	685b      	ldr	r3, [r3, #4]
    9752:	b29a      	uxth	r2, r3
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	689b      	ldr	r3, [r3, #8]
    9758:	b29b      	uxth	r3, r3
    975a:	1ad3      	subs	r3, r2, r3
    975c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	7cdb      	ldrb	r3, [r3, #19]
    9762:	f003 0320 	and.w	r3, r3, #32
    9766:	b2db      	uxtb	r3, r3
    9768:	2b00      	cmp	r3, #0
    976a:	d01b      	beq.n	97a4 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	8a1b      	ldrh	r3, [r3, #16]
    9770:	8bfa      	ldrh	r2, [r7, #30]
    9772:	429a      	cmp	r2, r3
    9774:	d902      	bls.n	977c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9776:	687b      	ldr	r3, [r7, #4]
    9778:	8a1b      	ldrh	r3, [r3, #16]
    977a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	68d8      	ldr	r0, [r3, #12]
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	681a      	ldr	r2, [r3, #0]
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	689b      	ldr	r3, [r3, #8]
    9788:	4413      	add	r3, r2
    978a:	8bfa      	ldrh	r2, [r7, #30]
    978c:	4619      	mov	r1, r3
    978e:	4b44      	ldr	r3, [pc, #272]	; (98a0 <_usb_d_dev_in_next+0x1f8>)
    9790:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9792:	687b      	ldr	r3, [r7, #4]
    9794:	68db      	ldr	r3, [r3, #12]
    9796:	461a      	mov	r2, r3
    9798:	7dfb      	ldrb	r3, [r7, #23]
    979a:	2101      	movs	r1, #1
    979c:	4618      	mov	r0, r3
    979e:	4b41      	ldr	r3, [pc, #260]	; (98a4 <_usb_d_dev_in_next+0x1fc>)
    97a0:	4798      	blx	r3
    97a2:	e011      	b.n	97c8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    97a4:	8bfb      	ldrh	r3, [r7, #30]
    97a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    97aa:	d902      	bls.n	97b2 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    97ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    97b0:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	681a      	ldr	r2, [r3, #0]
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	689b      	ldr	r3, [r3, #8]
    97ba:	4413      	add	r3, r2
    97bc:	461a      	mov	r2, r3
    97be:	7dfb      	ldrb	r3, [r7, #23]
    97c0:	2101      	movs	r1, #1
    97c2:	4618      	mov	r0, r3
    97c4:	4b37      	ldr	r3, [pc, #220]	; (98a4 <_usb_d_dev_in_next+0x1fc>)
    97c6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    97c8:	8bfa      	ldrh	r2, [r7, #30]
    97ca:	7df8      	ldrb	r0, [r7, #23]
    97cc:	2300      	movs	r3, #0
    97ce:	2101      	movs	r1, #1
    97d0:	4c35      	ldr	r4, [pc, #212]	; (98a8 <_usb_d_dev_in_next+0x200>)
    97d2:	47a0      	blx	r4
		goto _in_tx_exec;
    97d4:	e041      	b.n	985a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	7cdb      	ldrb	r3, [r3, #19]
    97da:	f003 0310 	and.w	r3, r3, #16
    97de:	b2db      	uxtb	r3, r3
    97e0:	2b00      	cmp	r3, #0
    97e2:	d00b      	beq.n	97fc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    97e4:	687a      	ldr	r2, [r7, #4]
    97e6:	7cd3      	ldrb	r3, [r2, #19]
    97e8:	f36f 1304 	bfc	r3, #4, #1
    97ec:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    97ee:	7df8      	ldrb	r0, [r7, #23]
    97f0:	2300      	movs	r3, #0
    97f2:	2200      	movs	r2, #0
    97f4:	2101      	movs	r1, #1
    97f6:	4c2c      	ldr	r4, [pc, #176]	; (98a8 <_usb_d_dev_in_next+0x200>)
    97f8:	47a0      	blx	r4
		goto _in_tx_exec;
    97fa:	e02e      	b.n	985a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    97fc:	7afb      	ldrb	r3, [r7, #11]
    97fe:	2b00      	cmp	r3, #0
    9800:	d006      	beq.n	9810 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9802:	7dfb      	ldrb	r3, [r7, #23]
    9804:	224b      	movs	r2, #75	; 0x4b
    9806:	4619      	mov	r1, r3
    9808:	69b8      	ldr	r0, [r7, #24]
    980a:	4b28      	ldr	r3, [pc, #160]	; (98ac <_usb_d_dev_in_next+0x204>)
    980c:	4798      	blx	r3
    980e:	e005      	b.n	981c <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9810:	7dfb      	ldrb	r3, [r7, #23]
    9812:	224a      	movs	r2, #74	; 0x4a
    9814:	4619      	mov	r1, r3
    9816:	69b8      	ldr	r0, [r7, #24]
    9818:	4b24      	ldr	r3, [pc, #144]	; (98ac <_usb_d_dev_in_next+0x204>)
    981a:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	8a1b      	ldrh	r3, [r3, #16]
    9820:	89ba      	ldrh	r2, [r7, #12]
    9822:	429a      	cmp	r2, r3
    9824:	d114      	bne.n	9850 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9826:	687a      	ldr	r2, [r7, #4]
    9828:	7cd3      	ldrb	r3, [r2, #19]
    982a:	f36f 1386 	bfc	r3, #6, #1
    982e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9830:	4b1f      	ldr	r3, [pc, #124]	; (98b0 <_usb_d_dev_in_next+0x208>)
    9832:	68db      	ldr	r3, [r3, #12]
    9834:	687a      	ldr	r2, [r7, #4]
    9836:	7c90      	ldrb	r0, [r2, #18]
    9838:	687a      	ldr	r2, [r7, #4]
    983a:	6892      	ldr	r2, [r2, #8]
    983c:	4611      	mov	r1, r2
    983e:	4798      	blx	r3
    9840:	4603      	mov	r3, r0
    9842:	2b00      	cmp	r3, #0
    9844:	d124      	bne.n	9890 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9846:	687a      	ldr	r2, [r7, #4]
    9848:	7cd3      	ldrb	r3, [r2, #19]
    984a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    984e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9850:	2100      	movs	r1, #0
    9852:	6878      	ldr	r0, [r7, #4]
    9854:	4b17      	ldr	r3, [pc, #92]	; (98b4 <_usb_d_dev_in_next+0x20c>)
    9856:	4798      	blx	r3
	return;
    9858:	e01b      	b.n	9892 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    985a:	78fb      	ldrb	r3, [r7, #3]
    985c:	f083 0301 	eor.w	r3, r3, #1
    9860:	b2db      	uxtb	r3, r3
    9862:	2b00      	cmp	r3, #0
    9864:	d00d      	beq.n	9882 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9866:	7afb      	ldrb	r3, [r7, #11]
    9868:	2b00      	cmp	r3, #0
    986a:	d002      	beq.n	9872 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    986c:	234e      	movs	r3, #78	; 0x4e
    986e:	777b      	strb	r3, [r7, #29]
    9870:	e001      	b.n	9876 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9872:	234a      	movs	r3, #74	; 0x4a
    9874:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9876:	7f7a      	ldrb	r2, [r7, #29]
    9878:	7dfb      	ldrb	r3, [r7, #23]
    987a:	4619      	mov	r1, r3
    987c:	69b8      	ldr	r0, [r7, #24]
    987e:	4b0e      	ldr	r3, [pc, #56]	; (98b8 <_usb_d_dev_in_next+0x210>)
    9880:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9882:	7dfb      	ldrb	r3, [r7, #23]
    9884:	2201      	movs	r2, #1
    9886:	2101      	movs	r1, #1
    9888:	4618      	mov	r0, r3
    988a:	4b0c      	ldr	r3, [pc, #48]	; (98bc <_usb_d_dev_in_next+0x214>)
    988c:	4798      	blx	r3
    988e:	e000      	b.n	9892 <_usb_d_dev_in_next+0x1ea>
			return;
    9890:	bf00      	nop
}
    9892:	3724      	adds	r7, #36	; 0x24
    9894:	46bd      	mov	sp, r7
    9896:	bd90      	pop	{r4, r7, pc}
    9898:	20000b58 	.word	0x20000b58
    989c:	000090a1 	.word	0x000090a1
    98a0:	0000ea09 	.word	0x0000ea09
    98a4:	000090cd 	.word	0x000090cd
    98a8:	00009215 	.word	0x00009215
    98ac:	000089ad 	.word	0x000089ad
    98b0:	20000a90 	.word	0x20000a90
    98b4:	0000a9d1 	.word	0x0000a9d1
    98b8:	00008981 	.word	0x00008981
    98bc:	000092cd 	.word	0x000092cd

000098c0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    98c0:	b590      	push	{r4, r7, lr}
    98c2:	b08b      	sub	sp, #44	; 0x2c
    98c4:	af00      	add	r7, sp, #0
    98c6:	6078      	str	r0, [r7, #4]
    98c8:	460b      	mov	r3, r1
    98ca:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    98cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98d0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    98d2:	687b      	ldr	r3, [r7, #4]
    98d4:	7c9b      	ldrb	r3, [r3, #18]
    98d6:	f003 030f 	and.w	r3, r3, #15
    98da:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    98dc:	7ffb      	ldrb	r3, [r7, #31]
    98de:	015b      	lsls	r3, r3, #5
    98e0:	4a94      	ldr	r2, [pc, #592]	; (9b34 <_usb_d_dev_out_next+0x274>)
    98e2:	4413      	add	r3, r2
    98e4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    98e6:	78fb      	ldrb	r3, [r7, #3]
    98e8:	2b00      	cmp	r3, #0
    98ea:	d005      	beq.n	98f8 <_usb_d_dev_out_next+0x38>
    98ec:	69bb      	ldr	r3, [r7, #24]
    98ee:	685b      	ldr	r3, [r3, #4]
    98f0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    98f4:	b29b      	uxth	r3, r3
    98f6:	e000      	b.n	98fa <_usb_d_dev_out_next+0x3a>
    98f8:	2300      	movs	r3, #0
    98fa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    98fc:	78fb      	ldrb	r3, [r7, #3]
    98fe:	2b00      	cmp	r3, #0
    9900:	d005      	beq.n	990e <_usb_d_dev_out_next+0x4e>
    9902:	69bb      	ldr	r3, [r7, #24]
    9904:	685b      	ldr	r3, [r3, #4]
    9906:	f3c3 030d 	ubfx	r3, r3, #0, #14
    990a:	b29b      	uxth	r3, r3
    990c:	e000      	b.n	9910 <_usb_d_dev_out_next+0x50>
    990e:	2300      	movs	r3, #0
    9910:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9912:	687b      	ldr	r3, [r7, #4]
    9914:	8a1b      	ldrh	r3, [r3, #16]
    9916:	f240 32ff 	movw	r2, #1023	; 0x3ff
    991a:	4293      	cmp	r3, r2
    991c:	d004      	beq.n	9928 <_usb_d_dev_out_next+0x68>
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	8a1b      	ldrh	r3, [r3, #16]
    9922:	3b01      	subs	r3, #1
    9924:	b29b      	uxth	r3, r3
    9926:	e001      	b.n	992c <_usb_d_dev_out_next+0x6c>
    9928:	f240 33ff 	movw	r3, #1023	; 0x3ff
    992c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    992e:	8aba      	ldrh	r2, [r7, #20]
    9930:	8a7b      	ldrh	r3, [r7, #18]
    9932:	4013      	ands	r3, r2
    9934:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9936:	687b      	ldr	r3, [r7, #4]
    9938:	7cdb      	ldrb	r3, [r3, #19]
    993a:	f003 0307 	and.w	r3, r3, #7
    993e:	b2db      	uxtb	r3, r3
    9940:	2b01      	cmp	r3, #1
    9942:	bf0c      	ite	eq
    9944:	2301      	moveq	r3, #1
    9946:	2300      	movne	r3, #0
    9948:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    994a:	78fb      	ldrb	r3, [r7, #3]
    994c:	2b00      	cmp	r3, #0
    994e:	d004      	beq.n	995a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9950:	7ffb      	ldrb	r3, [r7, #31]
    9952:	2100      	movs	r1, #0
    9954:	4618      	mov	r0, r3
    9956:	4b78      	ldr	r3, [pc, #480]	; (9b38 <_usb_d_dev_out_next+0x278>)
    9958:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	7cdb      	ldrb	r3, [r3, #19]
    995e:	f003 0320 	and.w	r3, r3, #32
    9962:	b2db      	uxtb	r3, r3
    9964:	2b00      	cmp	r3, #0
    9966:	d01c      	beq.n	99a2 <_usb_d_dev_out_next+0xe2>
    9968:	687b      	ldr	r3, [r7, #4]
    996a:	685b      	ldr	r3, [r3, #4]
    996c:	2b00      	cmp	r3, #0
    996e:	d018      	beq.n	99a2 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9970:	687b      	ldr	r3, [r7, #4]
    9972:	685b      	ldr	r3, [r3, #4]
    9974:	b29a      	uxth	r2, r3
    9976:	687b      	ldr	r3, [r7, #4]
    9978:	689b      	ldr	r3, [r3, #8]
    997a:	b29b      	uxth	r3, r3
    997c:	1ad3      	subs	r3, r2, r3
    997e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9980:	687b      	ldr	r3, [r7, #4]
    9982:	681a      	ldr	r2, [r3, #0]
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	689b      	ldr	r3, [r3, #8]
    9988:	18d0      	adds	r0, r2, r3
    998a:	687b      	ldr	r3, [r7, #4]
    998c:	68d9      	ldr	r1, [r3, #12]
    998e:	89ba      	ldrh	r2, [r7, #12]
    9990:	8a3b      	ldrh	r3, [r7, #16]
    9992:	429a      	cmp	r2, r3
    9994:	d901      	bls.n	999a <_usb_d_dev_out_next+0xda>
    9996:	8a3b      	ldrh	r3, [r7, #16]
    9998:	e000      	b.n	999c <_usb_d_dev_out_next+0xdc>
    999a:	89bb      	ldrh	r3, [r7, #12]
    999c:	461a      	mov	r2, r3
    999e:	4b67      	ldr	r3, [pc, #412]	; (9b3c <_usb_d_dev_out_next+0x27c>)
    99a0:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    99a2:	687b      	ldr	r3, [r7, #4]
    99a4:	685b      	ldr	r3, [r3, #4]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d121      	bne.n	99ee <_usb_d_dev_out_next+0x12e>
    99aa:	687b      	ldr	r3, [r7, #4]
    99ac:	7cdb      	ldrb	r3, [r3, #19]
    99ae:	f003 0310 	and.w	r3, r3, #16
    99b2:	b2db      	uxtb	r3, r3
    99b4:	2b00      	cmp	r3, #0
    99b6:	d01a      	beq.n	99ee <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    99b8:	687a      	ldr	r2, [r7, #4]
    99ba:	7cd3      	ldrb	r3, [r2, #19]
    99bc:	f36f 1304 	bfc	r3, #4, #1
    99c0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    99c2:	687a      	ldr	r2, [r7, #4]
    99c4:	7cd3      	ldrb	r3, [r2, #19]
    99c6:	f043 0320 	orr.w	r3, r3, #32
    99ca:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	68db      	ldr	r3, [r3, #12]
    99d0:	461a      	mov	r2, r3
    99d2:	7ffb      	ldrb	r3, [r7, #31]
    99d4:	2100      	movs	r1, #0
    99d6:	4618      	mov	r0, r3
    99d8:	4b59      	ldr	r3, [pc, #356]	; (9b40 <_usb_d_dev_out_next+0x280>)
    99da:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	8a1b      	ldrh	r3, [r3, #16]
    99e0:	461a      	mov	r2, r3
    99e2:	7ff8      	ldrb	r0, [r7, #31]
    99e4:	2300      	movs	r3, #0
    99e6:	2100      	movs	r1, #0
    99e8:	4c56      	ldr	r4, [pc, #344]	; (9b44 <_usb_d_dev_out_next+0x284>)
    99ea:	47a0      	blx	r4
		goto _out_rx_exec;
    99ec:	e090      	b.n	9b10 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    99ee:	78fb      	ldrb	r3, [r7, #3]
    99f0:	2b00      	cmp	r3, #0
    99f2:	d010      	beq.n	9a16 <_usb_d_dev_out_next+0x156>
    99f4:	687b      	ldr	r3, [r7, #4]
    99f6:	8a1b      	ldrh	r3, [r3, #16]
    99f8:	8a3a      	ldrh	r2, [r7, #16]
    99fa:	429a      	cmp	r2, r3
    99fc:	d20b      	bcs.n	9a16 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    99fe:	687a      	ldr	r2, [r7, #4]
    9a00:	7cd3      	ldrb	r3, [r2, #19]
    9a02:	f36f 1304 	bfc	r3, #4, #1
    9a06:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	689a      	ldr	r2, [r3, #8]
    9a0c:	8abb      	ldrh	r3, [r7, #20]
    9a0e:	441a      	add	r2, r3
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	609a      	str	r2, [r3, #8]
    9a14:	e05c      	b.n	9ad0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9a16:	687b      	ldr	r3, [r7, #4]
    9a18:	689a      	ldr	r2, [r3, #8]
    9a1a:	8afb      	ldrh	r3, [r7, #22]
    9a1c:	441a      	add	r2, r3
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	689a      	ldr	r2, [r3, #8]
    9a26:	687b      	ldr	r3, [r7, #4]
    9a28:	685b      	ldr	r3, [r3, #4]
    9a2a:	429a      	cmp	r2, r3
    9a2c:	d250      	bcs.n	9ad0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9a2e:	687b      	ldr	r3, [r7, #4]
    9a30:	685b      	ldr	r3, [r3, #4]
    9a32:	b29a      	uxth	r2, r3
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	689b      	ldr	r3, [r3, #8]
    9a38:	b29b      	uxth	r3, r3
    9a3a:	1ad3      	subs	r3, r2, r3
    9a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9a3e:	687b      	ldr	r3, [r7, #4]
    9a40:	7cdb      	ldrb	r3, [r3, #19]
    9a42:	f003 0320 	and.w	r3, r3, #32
    9a46:	b2db      	uxtb	r3, r3
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d010      	beq.n	9a6e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9a4c:	687b      	ldr	r3, [r7, #4]
    9a4e:	8a1b      	ldrh	r3, [r3, #16]
    9a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a52:	429a      	cmp	r2, r3
    9a54:	d902      	bls.n	9a5c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9a56:	687b      	ldr	r3, [r7, #4]
    9a58:	8a1b      	ldrh	r3, [r3, #16]
    9a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9a5c:	687b      	ldr	r3, [r7, #4]
    9a5e:	68db      	ldr	r3, [r3, #12]
    9a60:	461a      	mov	r2, r3
    9a62:	7ffb      	ldrb	r3, [r7, #31]
    9a64:	2100      	movs	r1, #0
    9a66:	4618      	mov	r0, r3
    9a68:	4b35      	ldr	r3, [pc, #212]	; (9b40 <_usb_d_dev_out_next+0x280>)
    9a6a:	4798      	blx	r3
    9a6c:	e029      	b.n	9ac2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9a6e:	687b      	ldr	r3, [r7, #4]
    9a70:	8a1b      	ldrh	r3, [r3, #16]
    9a72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a74:	429a      	cmp	r2, r3
    9a76:	d90f      	bls.n	9a98 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a7e:	d903      	bls.n	9a88 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a84:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a86:	e011      	b.n	9aac <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9a88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a8a:	8a7b      	ldrh	r3, [r7, #18]
    9a8c:	4013      	ands	r3, r2
    9a8e:	b29b      	uxth	r3, r3
    9a90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a92:	1ad3      	subs	r3, r2, r3
    9a94:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a96:	e009      	b.n	9aac <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9a98:	687b      	ldr	r3, [r7, #4]
    9a9a:	8a1b      	ldrh	r3, [r3, #16]
    9a9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a9e:	429a      	cmp	r2, r3
    9aa0:	d204      	bcs.n	9aac <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9aa2:	687a      	ldr	r2, [r7, #4]
    9aa4:	7cd3      	ldrb	r3, [r2, #19]
    9aa6:	f043 0320 	orr.w	r3, r3, #32
    9aaa:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	681a      	ldr	r2, [r3, #0]
    9ab0:	687b      	ldr	r3, [r7, #4]
    9ab2:	689b      	ldr	r3, [r3, #8]
    9ab4:	4413      	add	r3, r2
    9ab6:	461a      	mov	r2, r3
    9ab8:	7ffb      	ldrb	r3, [r7, #31]
    9aba:	2100      	movs	r1, #0
    9abc:	4618      	mov	r0, r3
    9abe:	4b20      	ldr	r3, [pc, #128]	; (9b40 <_usb_d_dev_out_next+0x280>)
    9ac0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9ac2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9ac4:	7ff8      	ldrb	r0, [r7, #31]
    9ac6:	2300      	movs	r3, #0
    9ac8:	2100      	movs	r1, #0
    9aca:	4c1e      	ldr	r4, [pc, #120]	; (9b44 <_usb_d_dev_out_next+0x284>)
    9acc:	47a0      	blx	r4
			goto _out_rx_exec;
    9ace:	e01f      	b.n	9b10 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9ad0:	7bfb      	ldrb	r3, [r7, #15]
    9ad2:	2b00      	cmp	r3, #0
    9ad4:	d006      	beq.n	9ae4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9ad6:	7ffb      	ldrb	r3, [r7, #31]
    9ad8:	222d      	movs	r2, #45	; 0x2d
    9ada:	4619      	mov	r1, r3
    9adc:	6a38      	ldr	r0, [r7, #32]
    9ade:	4b1a      	ldr	r3, [pc, #104]	; (9b48 <_usb_d_dev_out_next+0x288>)
    9ae0:	4798      	blx	r3
    9ae2:	e005      	b.n	9af0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9ae4:	7ffb      	ldrb	r3, [r7, #31]
    9ae6:	2225      	movs	r2, #37	; 0x25
    9ae8:	4619      	mov	r1, r3
    9aea:	6a38      	ldr	r0, [r7, #32]
    9aec:	4b16      	ldr	r3, [pc, #88]	; (9b48 <_usb_d_dev_out_next+0x288>)
    9aee:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9af0:	7ffb      	ldrb	r3, [r7, #31]
    9af2:	2b00      	cmp	r3, #0
    9af4:	d107      	bne.n	9b06 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	68db      	ldr	r3, [r3, #12]
    9afa:	461a      	mov	r2, r3
    9afc:	7ffb      	ldrb	r3, [r7, #31]
    9afe:	2100      	movs	r1, #0
    9b00:	4618      	mov	r0, r3
    9b02:	4b0f      	ldr	r3, [pc, #60]	; (9b40 <_usb_d_dev_out_next+0x280>)
    9b04:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9b06:	2100      	movs	r1, #0
    9b08:	6878      	ldr	r0, [r7, #4]
    9b0a:	4b10      	ldr	r3, [pc, #64]	; (9b4c <_usb_d_dev_out_next+0x28c>)
    9b0c:	4798      	blx	r3
	return;
    9b0e:	e031      	b.n	9b74 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9b10:	78fb      	ldrb	r3, [r7, #3]
    9b12:	f083 0301 	eor.w	r3, r3, #1
    9b16:	b2db      	uxtb	r3, r3
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d025      	beq.n	9b68 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9b1c:	7bfb      	ldrb	r3, [r7, #15]
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d018      	beq.n	9b54 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9b22:	7ffb      	ldrb	r3, [r7, #31]
    9b24:	2101      	movs	r1, #1
    9b26:	4618      	mov	r0, r3
    9b28:	4b09      	ldr	r3, [pc, #36]	; (9b50 <_usb_d_dev_out_next+0x290>)
    9b2a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9b2c:	232d      	movs	r3, #45	; 0x2d
    9b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9b32:	e012      	b.n	9b5a <_usb_d_dev_out_next+0x29a>
    9b34:	20000b58 	.word	0x20000b58
    9b38:	000090a1 	.word	0x000090a1
    9b3c:	0000ea09 	.word	0x0000ea09
    9b40:	000090cd 	.word	0x000090cd
    9b44:	00009255 	.word	0x00009255
    9b48:	000089ad 	.word	0x000089ad
    9b4c:	0000a9d1 	.word	0x0000a9d1
    9b50:	00009295 	.word	0x00009295
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9b54:	2325      	movs	r3, #37	; 0x25
    9b56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9b5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9b5e:	7ffb      	ldrb	r3, [r7, #31]
    9b60:	4619      	mov	r1, r3
    9b62:	6a38      	ldr	r0, [r7, #32]
    9b64:	4b05      	ldr	r3, [pc, #20]	; (9b7c <_usb_d_dev_out_next+0x2bc>)
    9b66:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9b68:	7ffb      	ldrb	r3, [r7, #31]
    9b6a:	2201      	movs	r2, #1
    9b6c:	2100      	movs	r1, #0
    9b6e:	4618      	mov	r0, r3
    9b70:	4b03      	ldr	r3, [pc, #12]	; (9b80 <_usb_d_dev_out_next+0x2c0>)
    9b72:	4798      	blx	r3
}
    9b74:	372c      	adds	r7, #44	; 0x2c
    9b76:	46bd      	mov	sp, r7
    9b78:	bd90      	pop	{r4, r7, pc}
    9b7a:	bf00      	nop
    9b7c:	00008981 	.word	0x00008981
    9b80:	00009325 	.word	0x00009325

00009b84 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9b84:	b580      	push	{r7, lr}
    9b86:	b084      	sub	sp, #16
    9b88:	af00      	add	r7, sp, #0
    9b8a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	7c9b      	ldrb	r3, [r3, #18]
    9b90:	f003 030f 	and.w	r3, r3, #15
    9b94:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	7cdb      	ldrb	r3, [r3, #19]
    9b9a:	f003 0307 	and.w	r3, r3, #7
    9b9e:	b2db      	uxtb	r3, r3
    9ba0:	2b01      	cmp	r3, #1
    9ba2:	bf0c      	ite	eq
    9ba4:	2301      	moveq	r3, #1
    9ba6:	2300      	movne	r3, #0
    9ba8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9baa:	7bbb      	ldrb	r3, [r7, #14]
    9bac:	f083 0301 	eor.w	r3, r3, #1
    9bb0:	b2db      	uxtb	r3, r3
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d008      	beq.n	9bc8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9bb6:	7bfb      	ldrb	r3, [r7, #15]
    9bb8:	4618      	mov	r0, r3
    9bba:	4b20      	ldr	r3, [pc, #128]	; (9c3c <_usb_d_dev_handle_setup+0xb8>)
    9bbc:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9bbe:	7bfb      	ldrb	r3, [r7, #15]
    9bc0:	4618      	mov	r0, r3
    9bc2:	4b1f      	ldr	r3, [pc, #124]	; (9c40 <_usb_d_dev_handle_setup+0xbc>)
    9bc4:	4798      	blx	r3
		return;
    9bc6:	e036      	b.n	9c36 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	7cdb      	ldrb	r3, [r3, #19]
    9bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bd0:	b2db      	uxtb	r3, r3
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d010      	beq.n	9bf8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9bd6:	687a      	ldr	r2, [r7, #4]
    9bd8:	7cd3      	ldrb	r3, [r2, #19]
    9bda:	f36f 1386 	bfc	r3, #6, #1
    9bde:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9be0:	7bfb      	ldrb	r3, [r7, #15]
    9be2:	2200      	movs	r2, #0
    9be4:	2101      	movs	r1, #1
    9be6:	4618      	mov	r0, r3
    9be8:	4b16      	ldr	r3, [pc, #88]	; (9c44 <_usb_d_dev_handle_setup+0xc0>)
    9bea:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9bec:	7bfb      	ldrb	r3, [r7, #15]
    9bee:	2200      	movs	r2, #0
    9bf0:	2100      	movs	r1, #0
    9bf2:	4618      	mov	r0, r3
    9bf4:	4b14      	ldr	r3, [pc, #80]	; (9c48 <_usb_d_dev_handle_setup+0xc4>)
    9bf6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9bf8:	687a      	ldr	r2, [r7, #4]
    9bfa:	7cd3      	ldrb	r3, [r2, #19]
    9bfc:	f36f 03c3 	bfc	r3, #3, #1
    9c00:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9c02:	7bfb      	ldrb	r3, [r7, #15]
    9c04:	2100      	movs	r1, #0
    9c06:	4618      	mov	r0, r3
    9c08:	4b10      	ldr	r3, [pc, #64]	; (9c4c <_usb_d_dev_handle_setup+0xc8>)
    9c0a:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9c0c:	7bfb      	ldrb	r3, [r7, #15]
    9c0e:	2101      	movs	r1, #1
    9c10:	4618      	mov	r0, r3
    9c12:	4b0e      	ldr	r3, [pc, #56]	; (9c4c <_usb_d_dev_handle_setup+0xc8>)
    9c14:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9c16:	7bfb      	ldrb	r3, [r7, #15]
    9c18:	216f      	movs	r1, #111	; 0x6f
    9c1a:	4618      	mov	r0, r3
    9c1c:	4b0c      	ldr	r3, [pc, #48]	; (9c50 <_usb_d_dev_handle_setup+0xcc>)
    9c1e:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9c20:	7bfb      	ldrb	r3, [r7, #15]
    9c22:	216f      	movs	r1, #111	; 0x6f
    9c24:	4618      	mov	r0, r3
    9c26:	4b0b      	ldr	r3, [pc, #44]	; (9c54 <_usb_d_dev_handle_setup+0xd0>)
    9c28:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9c2a:	4b0b      	ldr	r3, [pc, #44]	; (9c58 <_usb_d_dev_handle_setup+0xd4>)
    9c2c:	689b      	ldr	r3, [r3, #8]
    9c2e:	687a      	ldr	r2, [r7, #4]
    9c30:	7c92      	ldrb	r2, [r2, #18]
    9c32:	4610      	mov	r0, r2
    9c34:	4798      	blx	r3
}
    9c36:	3710      	adds	r7, #16
    9c38:	46bd      	mov	sp, r7
    9c3a:	bd80      	pop	{r7, pc}
    9c3c:	00009029 	.word	0x00009029
    9c40:	00008fd5 	.word	0x00008fd5
    9c44:	000092cd 	.word	0x000092cd
    9c48:	00009325 	.word	0x00009325
    9c4c:	00009295 	.word	0x00009295
    9c50:	00008dd5 	.word	0x00008dd5
    9c54:	00008e25 	.word	0x00008e25
    9c58:	20000a90 	.word	0x20000a90

00009c5c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
    9c64:	460b      	mov	r3, r1
    9c66:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c68:	687b      	ldr	r3, [r7, #4]
    9c6a:	7c9b      	ldrb	r3, [r3, #18]
    9c6c:	f003 030f 	and.w	r3, r3, #15
    9c70:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9c72:	78f9      	ldrb	r1, [r7, #3]
    9c74:	7bfb      	ldrb	r3, [r7, #15]
    9c76:	2200      	movs	r2, #0
    9c78:	4618      	mov	r0, r3
    9c7a:	4b07      	ldr	r3, [pc, #28]	; (9c98 <_usb_d_dev_handle_stall+0x3c>)
    9c7c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9c7e:	4b07      	ldr	r3, [pc, #28]	; (9c9c <_usb_d_dev_handle_stall+0x40>)
    9c80:	691b      	ldr	r3, [r3, #16]
    9c82:	687a      	ldr	r2, [r7, #4]
    9c84:	7c90      	ldrb	r0, [r2, #18]
    9c86:	687a      	ldr	r2, [r7, #4]
    9c88:	6892      	ldr	r2, [r2, #8]
    9c8a:	2101      	movs	r1, #1
    9c8c:	4798      	blx	r3
}
    9c8e:	bf00      	nop
    9c90:	3710      	adds	r7, #16
    9c92:	46bd      	mov	sp, r7
    9c94:	bd80      	pop	{r7, pc}
    9c96:	bf00      	nop
    9c98:	00008f89 	.word	0x00008f89
    9c9c:	20000a90 	.word	0x20000a90

00009ca0 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b088      	sub	sp, #32
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	6078      	str	r0, [r7, #4]
    9ca8:	460b      	mov	r3, r1
    9caa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9cac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9cb0:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9cb2:	687b      	ldr	r3, [r7, #4]
    9cb4:	7c9b      	ldrb	r3, [r3, #18]
    9cb6:	f003 030f 	and.w	r3, r3, #15
    9cba:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9cbc:	4b61      	ldr	r3, [pc, #388]	; (9e44 <_usb_d_dev_handle_trfail+0x1a4>)
    9cbe:	881b      	ldrh	r3, [r3, #0]
    9cc0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9cc2:	7efb      	ldrb	r3, [r7, #27]
    9cc4:	015b      	lsls	r3, r3, #5
    9cc6:	4a60      	ldr	r2, [pc, #384]	; (9e48 <_usb_d_dev_handle_trfail+0x1a8>)
    9cc8:	4413      	add	r3, r2
    9cca:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9ccc:	78fb      	ldrb	r3, [r7, #3]
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d006      	beq.n	9ce0 <_usb_d_dev_handle_trfail+0x40>
    9cd2:	7efb      	ldrb	r3, [r7, #27]
    9cd4:	4619      	mov	r1, r3
    9cd6:	69f8      	ldr	r0, [r7, #28]
    9cd8:	4b5c      	ldr	r3, [pc, #368]	; (9e4c <_usb_d_dev_handle_trfail+0x1ac>)
    9cda:	4798      	blx	r3
    9cdc:	4603      	mov	r3, r0
    9cde:	e005      	b.n	9cec <_usb_d_dev_handle_trfail+0x4c>
    9ce0:	7efb      	ldrb	r3, [r7, #27]
    9ce2:	4619      	mov	r1, r3
    9ce4:	69f8      	ldr	r0, [r7, #28]
    9ce6:	4b5a      	ldr	r3, [pc, #360]	; (9e50 <_usb_d_dev_handle_trfail+0x1b0>)
    9ce8:	4798      	blx	r3
    9cea:	4603      	mov	r3, r0
    9cec:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9cee:	687b      	ldr	r3, [r7, #4]
    9cf0:	7cdb      	ldrb	r3, [r3, #19]
    9cf2:	f003 0307 	and.w	r3, r3, #7
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	2b01      	cmp	r3, #1
    9cfa:	bf0c      	ite	eq
    9cfc:	2301      	moveq	r3, #1
    9cfe:	2300      	movne	r3, #0
    9d00:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9d02:	78fb      	ldrb	r3, [r7, #3]
    9d04:	011b      	lsls	r3, r3, #4
    9d06:	697a      	ldr	r2, [r7, #20]
    9d08:	4413      	add	r3, r2
    9d0a:	7a9b      	ldrb	r3, [r3, #10]
    9d0c:	b2db      	uxtb	r3, r3
    9d0e:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9d10:	7cfb      	ldrb	r3, [r7, #19]
    9d12:	2b02      	cmp	r3, #2
    9d14:	d12f      	bne.n	9d76 <_usb_d_dev_handle_trfail+0xd6>
    9d16:	7b3b      	ldrb	r3, [r7, #12]
    9d18:	f003 0301 	and.w	r3, r3, #1
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d029      	beq.n	9d76 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9d22:	78fb      	ldrb	r3, [r7, #3]
    9d24:	011b      	lsls	r3, r3, #4
    9d26:	697a      	ldr	r2, [r7, #20]
    9d28:	441a      	add	r2, r3
    9d2a:	7a93      	ldrb	r3, [r2, #10]
    9d2c:	f36f 0300 	bfc	r3, #0, #1
    9d30:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d32:	78fb      	ldrb	r3, [r7, #3]
    9d34:	f107 0220 	add.w	r2, r7, #32
    9d38:	4413      	add	r3, r2
    9d3a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d3e:	7efb      	ldrb	r3, [r7, #27]
    9d40:	4619      	mov	r1, r3
    9d42:	69f8      	ldr	r0, [r7, #28]
    9d44:	4b43      	ldr	r3, [pc, #268]	; (9e54 <_usb_d_dev_handle_trfail+0x1b4>)
    9d46:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d48:	78fb      	ldrb	r3, [r7, #3]
    9d4a:	f107 0220 	add.w	r2, r7, #32
    9d4e:	4413      	add	r3, r2
    9d50:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d54:	7efb      	ldrb	r3, [r7, #27]
    9d56:	4619      	mov	r1, r3
    9d58:	69f8      	ldr	r0, [r7, #28]
    9d5a:	4b3f      	ldr	r3, [pc, #252]	; (9e58 <_usb_d_dev_handle_trfail+0x1b8>)
    9d5c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9d5e:	78fb      	ldrb	r3, [r7, #3]
    9d60:	2b00      	cmp	r3, #0
    9d62:	bf14      	ite	ne
    9d64:	2301      	movne	r3, #1
    9d66:	2300      	moveq	r3, #0
    9d68:	b2db      	uxtb	r3, r3
    9d6a:	2204      	movs	r2, #4
    9d6c:	4619      	mov	r1, r3
    9d6e:	6878      	ldr	r0, [r7, #4]
    9d70:	4b3a      	ldr	r3, [pc, #232]	; (9e5c <_usb_d_dev_handle_trfail+0x1bc>)
    9d72:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9d74:	e062      	b.n	9e3c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9d76:	7b3b      	ldrb	r3, [r7, #12]
    9d78:	f003 0302 	and.w	r3, r3, #2
    9d7c:	b2db      	uxtb	r3, r3
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d040      	beq.n	9e04 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9d82:	78fb      	ldrb	r3, [r7, #3]
    9d84:	011b      	lsls	r3, r3, #4
    9d86:	697a      	ldr	r2, [r7, #20]
    9d88:	441a      	add	r2, r3
    9d8a:	7a93      	ldrb	r3, [r2, #10]
    9d8c:	f36f 0341 	bfc	r3, #1, #1
    9d90:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d92:	78fb      	ldrb	r3, [r7, #3]
    9d94:	f107 0220 	add.w	r2, r7, #32
    9d98:	4413      	add	r3, r2
    9d9a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d9e:	7efb      	ldrb	r3, [r7, #27]
    9da0:	4619      	mov	r1, r3
    9da2:	69f8      	ldr	r0, [r7, #28]
    9da4:	4b2b      	ldr	r3, [pc, #172]	; (9e54 <_usb_d_dev_handle_trfail+0x1b4>)
    9da6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9da8:	78fb      	ldrb	r3, [r7, #3]
    9daa:	f107 0220 	add.w	r2, r7, #32
    9dae:	4413      	add	r3, r2
    9db0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9db4:	7efb      	ldrb	r3, [r7, #27]
    9db6:	4619      	mov	r1, r3
    9db8:	69f8      	ldr	r0, [r7, #28]
    9dba:	4b27      	ldr	r3, [pc, #156]	; (9e58 <_usb_d_dev_handle_trfail+0x1b8>)
    9dbc:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9dbe:	7cbb      	ldrb	r3, [r7, #18]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d03b      	beq.n	9e3c <_usb_d_dev_handle_trfail+0x19c>
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	7cdb      	ldrb	r3, [r3, #19]
    9dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9dcc:	b2db      	uxtb	r3, r3
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d034      	beq.n	9e3c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9dd2:	687b      	ldr	r3, [r7, #4]
    9dd4:	7cdb      	ldrb	r3, [r3, #19]
    9dd6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9dda:	b2db      	uxtb	r3, r3
    9ddc:	461a      	mov	r2, r3
    9dde:	78fb      	ldrb	r3, [r7, #3]
    9de0:	4293      	cmp	r3, r2
    9de2:	d02b      	beq.n	9e3c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	7cdb      	ldrb	r3, [r3, #19]
    9de8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9dec:	b2db      	uxtb	r3, r3
    9dee:	2b00      	cmp	r3, #0
    9df0:	bf14      	ite	ne
    9df2:	2301      	movne	r3, #1
    9df4:	2300      	moveq	r3, #0
    9df6:	b2db      	uxtb	r3, r3
    9df8:	2200      	movs	r2, #0
    9dfa:	4619      	mov	r1, r3
    9dfc:	6878      	ldr	r0, [r7, #4]
    9dfe:	4b17      	ldr	r3, [pc, #92]	; (9e5c <_usb_d_dev_handle_trfail+0x1bc>)
    9e00:	4798      	blx	r3
}
    9e02:	e01b      	b.n	9e3c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9e04:	78fa      	ldrb	r2, [r7, #3]
    9e06:	7efb      	ldrb	r3, [r7, #27]
    9e08:	4611      	mov	r1, r2
    9e0a:	4618      	mov	r0, r3
    9e0c:	4b14      	ldr	r3, [pc, #80]	; (9e60 <_usb_d_dev_handle_trfail+0x1c0>)
    9e0e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9e10:	78fb      	ldrb	r3, [r7, #3]
    9e12:	f107 0220 	add.w	r2, r7, #32
    9e16:	4413      	add	r3, r2
    9e18:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9e1c:	7efb      	ldrb	r3, [r7, #27]
    9e1e:	4619      	mov	r1, r3
    9e20:	69f8      	ldr	r0, [r7, #28]
    9e22:	4b0c      	ldr	r3, [pc, #48]	; (9e54 <_usb_d_dev_handle_trfail+0x1b4>)
    9e24:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9e26:	78fb      	ldrb	r3, [r7, #3]
    9e28:	f107 0220 	add.w	r2, r7, #32
    9e2c:	4413      	add	r3, r2
    9e2e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9e32:	7efb      	ldrb	r3, [r7, #27]
    9e34:	4619      	mov	r1, r3
    9e36:	69f8      	ldr	r0, [r7, #28]
    9e38:	4b07      	ldr	r3, [pc, #28]	; (9e58 <_usb_d_dev_handle_trfail+0x1b8>)
    9e3a:	4798      	blx	r3
}
    9e3c:	bf00      	nop
    9e3e:	3720      	adds	r7, #32
    9e40:	46bd      	mov	sp, r7
    9e42:	bd80      	pop	{r7, pc}
    9e44:	0000f228 	.word	0x0000f228
    9e48:	20000b58 	.word	0x20000b58
    9e4c:	00008a09 	.word	0x00008a09
    9e50:	000089d9 	.word	0x000089d9
    9e54:	000088ad 	.word	0x000088ad
    9e58:	000089ad 	.word	0x000089ad
    9e5c:	0000aa19 	.word	0x0000aa19
    9e60:	00009295 	.word	0x00009295

00009e64 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e64:	b580      	push	{r7, lr}
    9e66:	b082      	sub	sp, #8
    9e68:	af00      	add	r7, sp, #0
    9e6a:	6078      	str	r0, [r7, #4]
    9e6c:	460b      	mov	r3, r1
    9e6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e70:	78fb      	ldrb	r3, [r7, #3]
    9e72:	f003 0310 	and.w	r3, r3, #16
    9e76:	2b00      	cmp	r3, #0
    9e78:	d003      	beq.n	9e82 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9e7a:	6878      	ldr	r0, [r7, #4]
    9e7c:	4b0c      	ldr	r3, [pc, #48]	; (9eb0 <_usb_d_dev_trans_setup_isr+0x4c>)
    9e7e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9e80:	e012      	b.n	9ea8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e82:	78fb      	ldrb	r3, [r7, #3]
    9e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d004      	beq.n	9e96 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9e8c:	2101      	movs	r1, #1
    9e8e:	6878      	ldr	r0, [r7, #4]
    9e90:	4b08      	ldr	r3, [pc, #32]	; (9eb4 <_usb_d_dev_trans_setup_isr+0x50>)
    9e92:	4798      	blx	r3
}
    9e94:	e008      	b.n	9ea8 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9e96:	78fb      	ldrb	r3, [r7, #3]
    9e98:	f003 0320 	and.w	r3, r3, #32
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d003      	beq.n	9ea8 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9ea0:	2100      	movs	r1, #0
    9ea2:	6878      	ldr	r0, [r7, #4]
    9ea4:	4b03      	ldr	r3, [pc, #12]	; (9eb4 <_usb_d_dev_trans_setup_isr+0x50>)
    9ea6:	4798      	blx	r3
}
    9ea8:	bf00      	nop
    9eaa:	3708      	adds	r7, #8
    9eac:	46bd      	mov	sp, r7
    9eae:	bd80      	pop	{r7, pc}
    9eb0:	00009b85 	.word	0x00009b85
    9eb4:	00009c5d 	.word	0x00009c5d

00009eb8 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b082      	sub	sp, #8
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	6078      	str	r0, [r7, #4]
    9ec0:	460b      	mov	r3, r1
    9ec2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9ec4:	78fb      	ldrb	r3, [r7, #3]
    9ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d004      	beq.n	9ed8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9ece:	2101      	movs	r1, #1
    9ed0:	6878      	ldr	r0, [r7, #4]
    9ed2:	4b1a      	ldr	r3, [pc, #104]	; (9f3c <_usb_d_dev_trans_in_isr+0x84>)
    9ed4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9ed6:	e02c      	b.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9ed8:	78fb      	ldrb	r3, [r7, #3]
    9eda:	f003 0308 	and.w	r3, r3, #8
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d004      	beq.n	9eec <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9ee2:	2101      	movs	r1, #1
    9ee4:	6878      	ldr	r0, [r7, #4]
    9ee6:	4b16      	ldr	r3, [pc, #88]	; (9f40 <_usb_d_dev_trans_in_isr+0x88>)
    9ee8:	4798      	blx	r3
}
    9eea:	e022      	b.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9eec:	78fb      	ldrb	r3, [r7, #3]
    9eee:	f003 0302 	and.w	r3, r3, #2
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d004      	beq.n	9f00 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9ef6:	2101      	movs	r1, #1
    9ef8:	6878      	ldr	r0, [r7, #4]
    9efa:	4b12      	ldr	r3, [pc, #72]	; (9f44 <_usb_d_dev_trans_in_isr+0x8c>)
    9efc:	4798      	blx	r3
}
    9efe:	e018      	b.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	7cdb      	ldrb	r3, [r3, #19]
    9f04:	f003 0307 	and.w	r3, r3, #7
    9f08:	b2db      	uxtb	r3, r3
    9f0a:	2b01      	cmp	r3, #1
    9f0c:	d111      	bne.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9f0e:	78fb      	ldrb	r3, [r7, #3]
    9f10:	f003 0304 	and.w	r3, r3, #4
    9f14:	2b00      	cmp	r3, #0
    9f16:	d004      	beq.n	9f22 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9f18:	2100      	movs	r1, #0
    9f1a:	6878      	ldr	r0, [r7, #4]
    9f1c:	4b08      	ldr	r3, [pc, #32]	; (9f40 <_usb_d_dev_trans_in_isr+0x88>)
    9f1e:	4798      	blx	r3
}
    9f20:	e007      	b.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9f22:	78fb      	ldrb	r3, [r7, #3]
    9f24:	f003 0310 	and.w	r3, r3, #16
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d002      	beq.n	9f32 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9f2c:	6878      	ldr	r0, [r7, #4]
    9f2e:	4b06      	ldr	r3, [pc, #24]	; (9f48 <_usb_d_dev_trans_in_isr+0x90>)
    9f30:	4798      	blx	r3
}
    9f32:	bf00      	nop
    9f34:	3708      	adds	r7, #8
    9f36:	46bd      	mov	sp, r7
    9f38:	bd80      	pop	{r7, pc}
    9f3a:	bf00      	nop
    9f3c:	00009c5d 	.word	0x00009c5d
    9f40:	00009ca1 	.word	0x00009ca1
    9f44:	000096a9 	.word	0x000096a9
    9f48:	00009b85 	.word	0x00009b85

00009f4c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9f4c:	b580      	push	{r7, lr}
    9f4e:	b082      	sub	sp, #8
    9f50:	af00      	add	r7, sp, #0
    9f52:	6078      	str	r0, [r7, #4]
    9f54:	460b      	mov	r3, r1
    9f56:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9f58:	78fb      	ldrb	r3, [r7, #3]
    9f5a:	f003 0320 	and.w	r3, r3, #32
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d004      	beq.n	9f6c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9f62:	2100      	movs	r1, #0
    9f64:	6878      	ldr	r0, [r7, #4]
    9f66:	4b1a      	ldr	r3, [pc, #104]	; (9fd0 <_usb_d_dev_trans_out_isr+0x84>)
    9f68:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9f6a:	e02c      	b.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9f6c:	78fb      	ldrb	r3, [r7, #3]
    9f6e:	f003 0304 	and.w	r3, r3, #4
    9f72:	2b00      	cmp	r3, #0
    9f74:	d004      	beq.n	9f80 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9f76:	2100      	movs	r1, #0
    9f78:	6878      	ldr	r0, [r7, #4]
    9f7a:	4b16      	ldr	r3, [pc, #88]	; (9fd4 <_usb_d_dev_trans_out_isr+0x88>)
    9f7c:	4798      	blx	r3
}
    9f7e:	e022      	b.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9f80:	78fb      	ldrb	r3, [r7, #3]
    9f82:	f003 0301 	and.w	r3, r3, #1
    9f86:	2b00      	cmp	r3, #0
    9f88:	d004      	beq.n	9f94 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9f8a:	2101      	movs	r1, #1
    9f8c:	6878      	ldr	r0, [r7, #4]
    9f8e:	4b12      	ldr	r3, [pc, #72]	; (9fd8 <_usb_d_dev_trans_out_isr+0x8c>)
    9f90:	4798      	blx	r3
}
    9f92:	e018      	b.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	7cdb      	ldrb	r3, [r3, #19]
    9f98:	f003 0307 	and.w	r3, r3, #7
    9f9c:	b2db      	uxtb	r3, r3
    9f9e:	2b01      	cmp	r3, #1
    9fa0:	d111      	bne.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9fa2:	78fb      	ldrb	r3, [r7, #3]
    9fa4:	f003 0308 	and.w	r3, r3, #8
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d004      	beq.n	9fb6 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9fac:	2101      	movs	r1, #1
    9fae:	6878      	ldr	r0, [r7, #4]
    9fb0:	4b08      	ldr	r3, [pc, #32]	; (9fd4 <_usb_d_dev_trans_out_isr+0x88>)
    9fb2:	4798      	blx	r3
}
    9fb4:	e007      	b.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9fb6:	78fb      	ldrb	r3, [r7, #3]
    9fb8:	f003 0310 	and.w	r3, r3, #16
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d002      	beq.n	9fc6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9fc0:	6878      	ldr	r0, [r7, #4]
    9fc2:	4b06      	ldr	r3, [pc, #24]	; (9fdc <_usb_d_dev_trans_out_isr+0x90>)
    9fc4:	4798      	blx	r3
}
    9fc6:	bf00      	nop
    9fc8:	3708      	adds	r7, #8
    9fca:	46bd      	mov	sp, r7
    9fcc:	bd80      	pop	{r7, pc}
    9fce:	bf00      	nop
    9fd0:	00009c5d 	.word	0x00009c5d
    9fd4:	00009ca1 	.word	0x00009ca1
    9fd8:	000098c1 	.word	0x000098c1
    9fdc:	00009b85 	.word	0x00009b85

00009fe0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9fe0:	b580      	push	{r7, lr}
    9fe2:	b084      	sub	sp, #16
    9fe4:	af00      	add	r7, sp, #0
    9fe6:	6078      	str	r0, [r7, #4]
    9fe8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9fea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fee:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ff0:	683b      	ldr	r3, [r7, #0]
    9ff2:	7c9b      	ldrb	r3, [r3, #18]
    9ff4:	f003 030f 	and.w	r3, r3, #15
    9ff8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9ffa:	7afb      	ldrb	r3, [r7, #11]
    9ffc:	2201      	movs	r2, #1
    9ffe:	409a      	lsls	r2, r3
    a000:	687b      	ldr	r3, [r7, #4]
    a002:	4013      	ands	r3, r2
    a004:	2b00      	cmp	r3, #0
    a006:	d03d      	beq.n	a084 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a008:	7afb      	ldrb	r3, [r7, #11]
    a00a:	68fa      	ldr	r2, [r7, #12]
    a00c:	3308      	adds	r3, #8
    a00e:	015b      	lsls	r3, r3, #5
    a010:	4413      	add	r3, r2
    a012:	3307      	adds	r3, #7
    a014:	781b      	ldrb	r3, [r3, #0]
    a016:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a018:	7afb      	ldrb	r3, [r7, #11]
    a01a:	68fa      	ldr	r2, [r7, #12]
    a01c:	015b      	lsls	r3, r3, #5
    a01e:	4413      	add	r3, r2
    a020:	f203 1309 	addw	r3, r3, #265	; 0x109
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a028:	7aba      	ldrb	r2, [r7, #10]
    a02a:	7a7b      	ldrb	r3, [r7, #9]
    a02c:	4013      	ands	r3, r2
    a02e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a030:	7abb      	ldrb	r3, [r7, #10]
    a032:	2b00      	cmp	r3, #0
    a034:	d027      	beq.n	a086 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a036:	683b      	ldr	r3, [r7, #0]
    a038:	7cdb      	ldrb	r3, [r3, #19]
    a03a:	f003 0307 	and.w	r3, r3, #7
    a03e:	b2db      	uxtb	r3, r3
    a040:	2b01      	cmp	r3, #1
    a042:	d10c      	bne.n	a05e <_usb_d_dev_handle_eps+0x7e>
    a044:	683b      	ldr	r3, [r7, #0]
    a046:	7cdb      	ldrb	r3, [r3, #19]
    a048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a04c:	b2db      	uxtb	r3, r3
    a04e:	2b00      	cmp	r3, #0
    a050:	d105      	bne.n	a05e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a052:	7abb      	ldrb	r3, [r7, #10]
    a054:	4619      	mov	r1, r3
    a056:	6838      	ldr	r0, [r7, #0]
    a058:	4b0c      	ldr	r3, [pc, #48]	; (a08c <_usb_d_dev_handle_eps+0xac>)
    a05a:	4798      	blx	r3
    a05c:	e013      	b.n	a086 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a05e:	683b      	ldr	r3, [r7, #0]
    a060:	7cdb      	ldrb	r3, [r3, #19]
    a062:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a066:	b2db      	uxtb	r3, r3
    a068:	2b00      	cmp	r3, #0
    a06a:	d005      	beq.n	a078 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a06c:	7abb      	ldrb	r3, [r7, #10]
    a06e:	4619      	mov	r1, r3
    a070:	6838      	ldr	r0, [r7, #0]
    a072:	4b07      	ldr	r3, [pc, #28]	; (a090 <_usb_d_dev_handle_eps+0xb0>)
    a074:	4798      	blx	r3
    a076:	e006      	b.n	a086 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a078:	7abb      	ldrb	r3, [r7, #10]
    a07a:	4619      	mov	r1, r3
    a07c:	6838      	ldr	r0, [r7, #0]
    a07e:	4b05      	ldr	r3, [pc, #20]	; (a094 <_usb_d_dev_handle_eps+0xb4>)
    a080:	4798      	blx	r3
    a082:	e000      	b.n	a086 <_usb_d_dev_handle_eps+0xa6>
		return;
    a084:	bf00      	nop
		}
	}
}
    a086:	3710      	adds	r7, #16
    a088:	46bd      	mov	sp, r7
    a08a:	bd80      	pop	{r7, pc}
    a08c:	00009e65 	.word	0x00009e65
    a090:	00009eb9 	.word	0x00009eb9
    a094:	00009f4d 	.word	0x00009f4d

0000a098 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a098:	b580      	push	{r7, lr}
    a09a:	b084      	sub	sp, #16
    a09c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a09e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a0a2:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a0a4:	68bb      	ldr	r3, [r7, #8]
    a0a6:	8c1b      	ldrh	r3, [r3, #32]
    a0a8:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a0aa:	88fb      	ldrh	r3, [r7, #6]
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d104      	bne.n	a0ba <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a0b0:	4b13      	ldr	r3, [pc, #76]	; (a100 <_usb_d_dev_handler+0x68>)
    a0b2:	4798      	blx	r3
    a0b4:	4603      	mov	r3, r0
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d11e      	bne.n	a0f8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a0ba:	2300      	movs	r3, #0
    a0bc:	73fb      	strb	r3, [r7, #15]
    a0be:	e017      	b.n	a0f0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a0c0:	7bfa      	ldrb	r2, [r7, #15]
    a0c2:	4613      	mov	r3, r2
    a0c4:	009b      	lsls	r3, r3, #2
    a0c6:	4413      	add	r3, r2
    a0c8:	009b      	lsls	r3, r3, #2
    a0ca:	3310      	adds	r3, #16
    a0cc:	4a0d      	ldr	r2, [pc, #52]	; (a104 <_usb_d_dev_handler+0x6c>)
    a0ce:	4413      	add	r3, r2
    a0d0:	3304      	adds	r3, #4
    a0d2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a0d4:	683b      	ldr	r3, [r7, #0]
    a0d6:	7c9b      	ldrb	r3, [r3, #18]
    a0d8:	2bff      	cmp	r3, #255	; 0xff
    a0da:	d005      	beq.n	a0e8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a0dc:	88fb      	ldrh	r3, [r7, #6]
    a0de:	6839      	ldr	r1, [r7, #0]
    a0e0:	4618      	mov	r0, r3
    a0e2:	4b09      	ldr	r3, [pc, #36]	; (a108 <_usb_d_dev_handler+0x70>)
    a0e4:	4798      	blx	r3
    a0e6:	e000      	b.n	a0ea <_usb_d_dev_handler+0x52>
			continue;
    a0e8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a0ea:	7bfb      	ldrb	r3, [r7, #15]
    a0ec:	3301      	adds	r3, #1
    a0ee:	73fb      	strb	r3, [r7, #15]
    a0f0:	7bfb      	ldrb	r3, [r7, #15]
    a0f2:	2b08      	cmp	r3, #8
    a0f4:	d9e4      	bls.n	a0c0 <_usb_d_dev_handler+0x28>
    a0f6:	e000      	b.n	a0fa <_usb_d_dev_handler+0x62>
			return;
    a0f8:	bf00      	nop
	}
}
    a0fa:	3710      	adds	r7, #16
    a0fc:	46bd      	mov	sp, r7
    a0fe:	bd80      	pop	{r7, pc}
    a100:	000095f1 	.word	0x000095f1
    a104:	20000a90 	.word	0x20000a90
    a108:	00009fe1 	.word	0x00009fe1

0000a10c <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	b082      	sub	sp, #8
    a110:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a112:	2300      	movs	r3, #0
    a114:	71fb      	strb	r3, [r7, #7]
    a116:	e023      	b.n	a160 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a118:	79fa      	ldrb	r2, [r7, #7]
    a11a:	4613      	mov	r3, r2
    a11c:	009b      	lsls	r3, r3, #2
    a11e:	4413      	add	r3, r2
    a120:	009b      	lsls	r3, r3, #2
    a122:	3310      	adds	r3, #16
    a124:	4a14      	ldr	r2, [pc, #80]	; (a178 <_usb_d_dev_reset_epts+0x6c>)
    a126:	4413      	add	r3, r2
    a128:	3304      	adds	r3, #4
    a12a:	2103      	movs	r1, #3
    a12c:	4618      	mov	r0, r3
    a12e:	4b13      	ldr	r3, [pc, #76]	; (a17c <_usb_d_dev_reset_epts+0x70>)
    a130:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a132:	79fa      	ldrb	r2, [r7, #7]
    a134:	4910      	ldr	r1, [pc, #64]	; (a178 <_usb_d_dev_reset_epts+0x6c>)
    a136:	4613      	mov	r3, r2
    a138:	009b      	lsls	r3, r3, #2
    a13a:	4413      	add	r3, r2
    a13c:	009b      	lsls	r3, r3, #2
    a13e:	440b      	add	r3, r1
    a140:	3326      	adds	r3, #38	; 0x26
    a142:	22ff      	movs	r2, #255	; 0xff
    a144:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a146:	79fa      	ldrb	r2, [r7, #7]
    a148:	490b      	ldr	r1, [pc, #44]	; (a178 <_usb_d_dev_reset_epts+0x6c>)
    a14a:	4613      	mov	r3, r2
    a14c:	009b      	lsls	r3, r3, #2
    a14e:	4413      	add	r3, r2
    a150:	009b      	lsls	r3, r3, #2
    a152:	440b      	add	r3, r1
    a154:	3327      	adds	r3, #39	; 0x27
    a156:	2200      	movs	r2, #0
    a158:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a15a:	79fb      	ldrb	r3, [r7, #7]
    a15c:	3301      	adds	r3, #1
    a15e:	71fb      	strb	r3, [r7, #7]
    a160:	79fb      	ldrb	r3, [r7, #7]
    a162:	2b08      	cmp	r3, #8
    a164:	d9d8      	bls.n	a118 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a166:	22a0      	movs	r2, #160	; 0xa0
    a168:	2100      	movs	r1, #0
    a16a:	4805      	ldr	r0, [pc, #20]	; (a180 <_usb_d_dev_reset_epts+0x74>)
    a16c:	4b05      	ldr	r3, [pc, #20]	; (a184 <_usb_d_dev_reset_epts+0x78>)
    a16e:	4798      	blx	r3
}
    a170:	bf00      	nop
    a172:	3708      	adds	r7, #8
    a174:	46bd      	mov	sp, r7
    a176:	bd80      	pop	{r7, pc}
    a178:	20000a90 	.word	0x20000a90
    a17c:	0000a9d1 	.word	0x0000a9d1
    a180:	20000b58 	.word	0x20000b58
    a184:	0000eb3d 	.word	0x0000eb3d

0000a188 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a188:	b580      	push	{r7, lr}
    a18a:	b084      	sub	sp, #16
    a18c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a18e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a192:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a194:	2301      	movs	r3, #1
    a196:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a198:	2304      	movs	r3, #4
    a19a:	713b      	strb	r3, [r7, #4]
    a19c:	2300      	movs	r3, #0
    a19e:	717b      	strb	r3, [r7, #5]
    a1a0:	2300      	movs	r3, #0
    a1a2:	71bb      	strb	r3, [r7, #6]
    a1a4:	2300      	movs	r3, #0
    a1a6:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a1a8:	2101      	movs	r1, #1
    a1aa:	68f8      	ldr	r0, [r7, #12]
    a1ac:	4b26      	ldr	r3, [pc, #152]	; (a248 <_usb_d_dev_init+0xc0>)
    a1ae:	4798      	blx	r3
    a1b0:	4603      	mov	r3, r0
    a1b2:	f083 0301 	eor.w	r3, r3, #1
    a1b6:	b2db      	uxtb	r3, r3
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d011      	beq.n	a1e0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a1bc:	2102      	movs	r1, #2
    a1be:	68f8      	ldr	r0, [r7, #12]
    a1c0:	4b22      	ldr	r3, [pc, #136]	; (a24c <_usb_d_dev_init+0xc4>)
    a1c2:	4798      	blx	r3
    a1c4:	4603      	mov	r3, r0
    a1c6:	2b00      	cmp	r3, #0
    a1c8:	d006      	beq.n	a1d8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a1ca:	68f8      	ldr	r0, [r7, #12]
    a1cc:	4b20      	ldr	r3, [pc, #128]	; (a250 <_usb_d_dev_init+0xc8>)
    a1ce:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a1d0:	2102      	movs	r1, #2
    a1d2:	68f8      	ldr	r0, [r7, #12]
    a1d4:	4b1f      	ldr	r3, [pc, #124]	; (a254 <_usb_d_dev_init+0xcc>)
    a1d6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a1d8:	2101      	movs	r1, #1
    a1da:	68f8      	ldr	r0, [r7, #12]
    a1dc:	4b1e      	ldr	r3, [pc, #120]	; (a258 <_usb_d_dev_init+0xd0>)
    a1de:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a1e0:	2101      	movs	r1, #1
    a1e2:	68f8      	ldr	r0, [r7, #12]
    a1e4:	4b1b      	ldr	r3, [pc, #108]	; (a254 <_usb_d_dev_init+0xcc>)
    a1e6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a1e8:	4b1c      	ldr	r3, [pc, #112]	; (a25c <_usb_d_dev_init+0xd4>)
    a1ea:	4a1d      	ldr	r2, [pc, #116]	; (a260 <_usb_d_dev_init+0xd8>)
    a1ec:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a1ee:	4b1b      	ldr	r3, [pc, #108]	; (a25c <_usb_d_dev_init+0xd4>)
    a1f0:	4a1b      	ldr	r2, [pc, #108]	; (a260 <_usb_d_dev_init+0xd8>)
    a1f2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a1f4:	4b19      	ldr	r3, [pc, #100]	; (a25c <_usb_d_dev_init+0xd4>)
    a1f6:	4a1a      	ldr	r2, [pc, #104]	; (a260 <_usb_d_dev_init+0xd8>)
    a1f8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a1fa:	4b18      	ldr	r3, [pc, #96]	; (a25c <_usb_d_dev_init+0xd4>)
    a1fc:	4a18      	ldr	r2, [pc, #96]	; (a260 <_usb_d_dev_init+0xd8>)
    a1fe:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a200:	4b16      	ldr	r3, [pc, #88]	; (a25c <_usb_d_dev_init+0xd4>)
    a202:	4a17      	ldr	r2, [pc, #92]	; (a260 <_usb_d_dev_init+0xd8>)
    a204:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a206:	4b17      	ldr	r3, [pc, #92]	; (a264 <_usb_d_dev_init+0xdc>)
    a208:	4798      	blx	r3

	_usb_load_calib();
    a20a:	4b17      	ldr	r3, [pc, #92]	; (a268 <_usb_d_dev_init+0xe0>)
    a20c:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a20e:	2104      	movs	r1, #4
    a210:	68f8      	ldr	r0, [r7, #12]
    a212:	4b11      	ldr	r3, [pc, #68]	; (a258 <_usb_d_dev_init+0xd0>)
    a214:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a216:	4b15      	ldr	r3, [pc, #84]	; (a26c <_usb_d_dev_init+0xe4>)
    a218:	4619      	mov	r1, r3
    a21a:	68f8      	ldr	r0, [r7, #12]
    a21c:	4b14      	ldr	r3, [pc, #80]	; (a270 <_usb_d_dev_init+0xe8>)
    a21e:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a220:	7afb      	ldrb	r3, [r7, #11]
    a222:	f107 0210 	add.w	r2, r7, #16
    a226:	4413      	add	r3, r2
    a228:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a22c:	f043 0301 	orr.w	r3, r3, #1
    a230:	b2db      	uxtb	r3, r3
    a232:	b29b      	uxth	r3, r3
    a234:	4619      	mov	r1, r3
    a236:	68f8      	ldr	r0, [r7, #12]
    a238:	4b0e      	ldr	r3, [pc, #56]	; (a274 <_usb_d_dev_init+0xec>)
    a23a:	4798      	blx	r3

	return ERR_NONE;
    a23c:	2300      	movs	r3, #0
}
    a23e:	4618      	mov	r0, r3
    a240:	3710      	adds	r7, #16
    a242:	46bd      	mov	sp, r7
    a244:	bd80      	pop	{r7, pc}
    a246:	bf00      	nop
    a248:	00008821 	.word	0x00008821
    a24c:	00008b71 	.word	0x00008b71
    a250:	00008b45 	.word	0x00008b45
    a254:	000087f7 	.word	0x000087f7
    a258:	00008ba1 	.word	0x00008ba1
    a25c:	20000a90 	.word	0x20000a90
    a260:	00008c69 	.word	0x00008c69
    a264:	0000a10d 	.word	0x0000a10d
    a268:	00008c81 	.word	0x00008c81
    a26c:	20000b58 	.word	0x20000b58
    a270:	00008c4d 	.word	0x00008c4d
    a274:	00008c11 	.word	0x00008c11

0000a278 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a278:	b580      	push	{r7, lr}
    a27a:	b082      	sub	sp, #8
    a27c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a27e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a282:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a284:	2103      	movs	r1, #3
    a286:	6878      	ldr	r0, [r7, #4]
    a288:	4b17      	ldr	r3, [pc, #92]	; (a2e8 <_usb_d_dev_enable+0x70>)
    a28a:	4798      	blx	r3
    a28c:	4603      	mov	r3, r0
    a28e:	2b00      	cmp	r3, #0
    a290:	d002      	beq.n	a298 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a292:	f06f 0310 	mvn.w	r3, #16
    a296:	e023      	b.n	a2e0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a298:	6878      	ldr	r0, [r7, #4]
    a29a:	4b14      	ldr	r3, [pc, #80]	; (a2ec <_usb_d_dev_enable+0x74>)
    a29c:	4798      	blx	r3
    a29e:	4603      	mov	r3, r0
    a2a0:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a2a2:	78fb      	ldrb	r3, [r7, #3]
    a2a4:	f003 0302 	and.w	r3, r3, #2
    a2a8:	2b00      	cmp	r3, #0
    a2aa:	d107      	bne.n	a2bc <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a2ac:	78fb      	ldrb	r3, [r7, #3]
    a2ae:	f043 0302 	orr.w	r3, r3, #2
    a2b2:	b2db      	uxtb	r3, r3
    a2b4:	4619      	mov	r1, r3
    a2b6:	6878      	ldr	r0, [r7, #4]
    a2b8:	4b0d      	ldr	r3, [pc, #52]	; (a2f0 <_usb_d_dev_enable+0x78>)
    a2ba:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a2bc:	2050      	movs	r0, #80	; 0x50
    a2be:	4b0d      	ldr	r3, [pc, #52]	; (a2f4 <_usb_d_dev_enable+0x7c>)
    a2c0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a2c2:	2051      	movs	r0, #81	; 0x51
    a2c4:	4b0b      	ldr	r3, [pc, #44]	; (a2f4 <_usb_d_dev_enable+0x7c>)
    a2c6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a2c8:	2052      	movs	r0, #82	; 0x52
    a2ca:	4b0a      	ldr	r3, [pc, #40]	; (a2f4 <_usb_d_dev_enable+0x7c>)
    a2cc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a2ce:	2053      	movs	r0, #83	; 0x53
    a2d0:	4b08      	ldr	r3, [pc, #32]	; (a2f4 <_usb_d_dev_enable+0x7c>)
    a2d2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a2d4:	f240 218d 	movw	r1, #653	; 0x28d
    a2d8:	6878      	ldr	r0, [r7, #4]
    a2da:	4b07      	ldr	r3, [pc, #28]	; (a2f8 <_usb_d_dev_enable+0x80>)
    a2dc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a2de:	2300      	movs	r3, #0
}
    a2e0:	4618      	mov	r0, r3
    a2e2:	3708      	adds	r7, #8
    a2e4:	46bd      	mov	sp, r7
    a2e6:	bd80      	pop	{r7, pc}
    a2e8:	00008b1b 	.word	0x00008b1b
    a2ec:	00008bc9 	.word	0x00008bc9
    a2f0:	00008ba1 	.word	0x00008ba1
    a2f4:	0000872d 	.word	0x0000872d
    a2f8:	00008ac5 	.word	0x00008ac5

0000a2fc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a300:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a304:	4b01      	ldr	r3, [pc, #4]	; (a30c <_usb_d_dev_attach+0x10>)
    a306:	4798      	blx	r3
}
    a308:	bf00      	nop
    a30a:	bd80      	pop	{r7, pc}
    a30c:	00008bed 	.word	0x00008bed

0000a310 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a310:	b580      	push	{r7, lr}
    a312:	b082      	sub	sp, #8
    a314:	af00      	add	r7, sp, #0
    a316:	4603      	mov	r3, r0
    a318:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a31a:	79fb      	ldrb	r3, [r7, #7]
    a31c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a320:	b2db      	uxtb	r3, r3
    a322:	4619      	mov	r1, r3
    a324:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a328:	4b02      	ldr	r3, [pc, #8]	; (a334 <_usb_d_dev_set_address+0x24>)
    a32a:	4798      	blx	r3
}
    a32c:	bf00      	nop
    a32e:	3708      	adds	r7, #8
    a330:	46bd      	mov	sp, r7
    a332:	bd80      	pop	{r7, pc}
    a334:	00008c2f 	.word	0x00008c2f

0000a338 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a338:	b590      	push	{r4, r7, lr}
    a33a:	b085      	sub	sp, #20
    a33c:	af00      	add	r7, sp, #0
    a33e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a340:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a344:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a346:	687b      	ldr	r3, [r7, #4]
    a348:	7c9b      	ldrb	r3, [r3, #18]
    a34a:	f003 030f 	and.w	r3, r3, #15
    a34e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	68db      	ldr	r3, [r3, #12]
    a354:	461a      	mov	r2, r3
    a356:	7afb      	ldrb	r3, [r7, #11]
    a358:	2100      	movs	r1, #0
    a35a:	4618      	mov	r0, r3
    a35c:	4b0f      	ldr	r3, [pc, #60]	; (a39c <_usb_d_dev_trans_setup+0x64>)
    a35e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	8a1b      	ldrh	r3, [r3, #16]
    a364:	461a      	mov	r2, r3
    a366:	7af8      	ldrb	r0, [r7, #11]
    a368:	2300      	movs	r3, #0
    a36a:	2100      	movs	r1, #0
    a36c:	4c0c      	ldr	r4, [pc, #48]	; (a3a0 <_usb_d_dev_trans_setup+0x68>)
    a36e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a370:	7afb      	ldrb	r3, [r7, #11]
    a372:	22b0      	movs	r2, #176	; 0xb0
    a374:	4619      	mov	r1, r3
    a376:	68f8      	ldr	r0, [r7, #12]
    a378:	4b0a      	ldr	r3, [pc, #40]	; (a3a4 <_usb_d_dev_trans_setup+0x6c>)
    a37a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a37c:	7afb      	ldrb	r3, [r7, #11]
    a37e:	2200      	movs	r2, #0
    a380:	2100      	movs	r1, #0
    a382:	4618      	mov	r0, r3
    a384:	4b08      	ldr	r3, [pc, #32]	; (a3a8 <_usb_d_dev_trans_setup+0x70>)
    a386:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a388:	7afb      	ldrb	r3, [r7, #11]
    a38a:	2210      	movs	r2, #16
    a38c:	4619      	mov	r1, r3
    a38e:	68f8      	ldr	r0, [r7, #12]
    a390:	4b06      	ldr	r3, [pc, #24]	; (a3ac <_usb_d_dev_trans_setup+0x74>)
    a392:	4798      	blx	r3
}
    a394:	bf00      	nop
    a396:	3714      	adds	r7, #20
    a398:	46bd      	mov	sp, r7
    a39a:	bd90      	pop	{r4, r7, pc}
    a39c:	000090cd 	.word	0x000090cd
    a3a0:	00009255 	.word	0x00009255
    a3a4:	0000892d 	.word	0x0000892d
    a3a8:	00009325 	.word	0x00009325
    a3ac:	00008981 	.word	0x00008981

0000a3b0 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a3b0:	b580      	push	{r7, lr}
    a3b2:	b088      	sub	sp, #32
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	4603      	mov	r3, r0
    a3b8:	71fb      	strb	r3, [r7, #7]
    a3ba:	460b      	mov	r3, r1
    a3bc:	71bb      	strb	r3, [r7, #6]
    a3be:	4613      	mov	r3, r2
    a3c0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a3c2:	79fb      	ldrb	r3, [r7, #7]
    a3c4:	f003 030f 	and.w	r3, r3, #15
    a3c8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a3ca:	79fb      	ldrb	r3, [r7, #7]
    a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	bf14      	ite	ne
    a3d4:	2301      	movne	r3, #1
    a3d6:	2300      	moveq	r3, #0
    a3d8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a3da:	7fba      	ldrb	r2, [r7, #30]
    a3dc:	7ffb      	ldrb	r3, [r7, #31]
    a3de:	4611      	mov	r1, r2
    a3e0:	4618      	mov	r0, r3
    a3e2:	4b3e      	ldr	r3, [pc, #248]	; (a4dc <_usb_d_dev_ep_init+0x12c>)
    a3e4:	4798      	blx	r3
    a3e6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a3e8:	79bb      	ldrb	r3, [r7, #6]
    a3ea:	f003 0303 	and.w	r3, r3, #3
    a3ee:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a3f0:	7ffa      	ldrb	r2, [r7, #31]
    a3f2:	4613      	mov	r3, r2
    a3f4:	005b      	lsls	r3, r3, #1
    a3f6:	4413      	add	r3, r2
    a3f8:	009b      	lsls	r3, r3, #2
    a3fa:	4a39      	ldr	r2, [pc, #228]	; (a4e0 <_usb_d_dev_ep_init+0x130>)
    a3fc:	4413      	add	r3, r2
    a3fe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a400:	7ffb      	ldrb	r3, [r7, #31]
    a402:	2b04      	cmp	r3, #4
    a404:	d902      	bls.n	a40c <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a406:	f06f 0311 	mvn.w	r3, #17
    a40a:	e063      	b.n	a4d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a40c:	69bb      	ldr	r3, [r7, #24]
    a40e:	7c9b      	ldrb	r3, [r3, #18]
    a410:	2bff      	cmp	r3, #255	; 0xff
    a412:	d002      	beq.n	a41a <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a414:	f06f 0313 	mvn.w	r3, #19
    a418:	e05c      	b.n	a4d4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a41a:	7dfb      	ldrb	r3, [r7, #23]
    a41c:	2b00      	cmp	r3, #0
    a41e:	d11f      	bne.n	a460 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a420:	7fbb      	ldrb	r3, [r7, #30]
    a422:	2b00      	cmp	r3, #0
    a424:	bf14      	ite	ne
    a426:	2301      	movne	r3, #1
    a428:	2300      	moveq	r3, #0
    a42a:	b2db      	uxtb	r3, r3
    a42c:	f083 0301 	eor.w	r3, r3, #1
    a430:	b2db      	uxtb	r3, r3
    a432:	f003 0301 	and.w	r3, r3, #1
    a436:	b2da      	uxtb	r2, r3
    a438:	7ffb      	ldrb	r3, [r7, #31]
    a43a:	4611      	mov	r1, r2
    a43c:	4618      	mov	r0, r3
    a43e:	4b27      	ldr	r3, [pc, #156]	; (a4dc <_usb_d_dev_ep_init+0x12c>)
    a440:	4798      	blx	r3
    a442:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a444:	68fb      	ldr	r3, [r7, #12]
    a446:	7c9b      	ldrb	r3, [r3, #18]
    a448:	2bff      	cmp	r3, #255	; 0xff
    a44a:	d002      	beq.n	a452 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a44c:	f06f 0313 	mvn.w	r3, #19
    a450:	e040      	b.n	a4d4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a452:	693b      	ldr	r3, [r7, #16]
    a454:	681b      	ldr	r3, [r3, #0]
    a456:	2b00      	cmp	r3, #0
    a458:	d102      	bne.n	a460 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a45a:	f06f 0312 	mvn.w	r3, #18
    a45e:	e039      	b.n	a4d4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a460:	7fbb      	ldrb	r3, [r7, #30]
    a462:	2b00      	cmp	r3, #0
    a464:	d007      	beq.n	a476 <_usb_d_dev_ep_init+0xc6>
    a466:	693b      	ldr	r3, [r7, #16]
    a468:	685b      	ldr	r3, [r3, #4]
    a46a:	2b00      	cmp	r3, #0
    a46c:	bf14      	ite	ne
    a46e:	2301      	movne	r3, #1
    a470:	2300      	moveq	r3, #0
    a472:	b2db      	uxtb	r3, r3
    a474:	e006      	b.n	a484 <_usb_d_dev_ep_init+0xd4>
    a476:	693b      	ldr	r3, [r7, #16]
    a478:	681b      	ldr	r3, [r3, #0]
    a47a:	2b00      	cmp	r3, #0
    a47c:	bf14      	ite	ne
    a47e:	2301      	movne	r3, #1
    a480:	2300      	moveq	r3, #0
    a482:	b2db      	uxtb	r3, r3
    a484:	2b00      	cmp	r3, #0
    a486:	d00f      	beq.n	a4a8 <_usb_d_dev_ep_init+0xf8>
    a488:	7fbb      	ldrb	r3, [r7, #30]
    a48a:	2b00      	cmp	r3, #0
    a48c:	d003      	beq.n	a496 <_usb_d_dev_ep_init+0xe6>
    a48e:	693b      	ldr	r3, [r7, #16]
    a490:	895b      	ldrh	r3, [r3, #10]
    a492:	461a      	mov	r2, r3
    a494:	e002      	b.n	a49c <_usb_d_dev_ep_init+0xec>
    a496:	693b      	ldr	r3, [r7, #16]
    a498:	891b      	ldrh	r3, [r3, #8]
    a49a:	461a      	mov	r2, r3
    a49c:	88bb      	ldrh	r3, [r7, #4]
    a49e:	429a      	cmp	r2, r3
    a4a0:	da02      	bge.n	a4a8 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a4a2:	f06f 0312 	mvn.w	r3, #18
    a4a6:	e015      	b.n	a4d4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a4a8:	7fbb      	ldrb	r3, [r7, #30]
    a4aa:	2b00      	cmp	r3, #0
    a4ac:	d002      	beq.n	a4b4 <_usb_d_dev_ep_init+0x104>
    a4ae:	693b      	ldr	r3, [r7, #16]
    a4b0:	685b      	ldr	r3, [r3, #4]
    a4b2:	e001      	b.n	a4b8 <_usb_d_dev_ep_init+0x108>
    a4b4:	693b      	ldr	r3, [r7, #16]
    a4b6:	681b      	ldr	r3, [r3, #0]
    a4b8:	69ba      	ldr	r2, [r7, #24]
    a4ba:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a4bc:	69bb      	ldr	r3, [r7, #24]
    a4be:	88ba      	ldrh	r2, [r7, #4]
    a4c0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a4c2:	7dfb      	ldrb	r3, [r7, #23]
    a4c4:	3301      	adds	r3, #1
    a4c6:	b2da      	uxtb	r2, r3
    a4c8:	69bb      	ldr	r3, [r7, #24]
    a4ca:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a4cc:	69bb      	ldr	r3, [r7, #24]
    a4ce:	79fa      	ldrb	r2, [r7, #7]
    a4d0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a4d2:	2300      	movs	r3, #0
}
    a4d4:	4618      	mov	r0, r3
    a4d6:	3720      	adds	r7, #32
    a4d8:	46bd      	mov	sp, r7
    a4da:	bd80      	pop	{r7, pc}
    a4dc:	000093e1 	.word	0x000093e1
    a4e0:	0000f1ec 	.word	0x0000f1ec

0000a4e4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a4e4:	b580      	push	{r7, lr}
    a4e6:	b086      	sub	sp, #24
    a4e8:	af00      	add	r7, sp, #0
    a4ea:	4603      	mov	r3, r0
    a4ec:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a4ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4f2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a4f4:	79fb      	ldrb	r3, [r7, #7]
    a4f6:	f003 030f 	and.w	r3, r3, #15
    a4fa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a4fc:	79fb      	ldrb	r3, [r7, #7]
    a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a502:	2b00      	cmp	r3, #0
    a504:	bf14      	ite	ne
    a506:	2301      	movne	r3, #1
    a508:	2300      	moveq	r3, #0
    a50a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a50c:	7cba      	ldrb	r2, [r7, #18]
    a50e:	7cfb      	ldrb	r3, [r7, #19]
    a510:	4611      	mov	r1, r2
    a512:	4618      	mov	r0, r3
    a514:	4b2a      	ldr	r3, [pc, #168]	; (a5c0 <_usb_d_dev_ep_deinit+0xdc>)
    a516:	4798      	blx	r3
    a518:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a51a:	7cfb      	ldrb	r3, [r7, #19]
    a51c:	2b04      	cmp	r3, #4
    a51e:	d84a      	bhi.n	a5b6 <_usb_d_dev_ep_deinit+0xd2>
    a520:	68fb      	ldr	r3, [r7, #12]
    a522:	7c9b      	ldrb	r3, [r3, #18]
    a524:	2bff      	cmp	r3, #255	; 0xff
    a526:	d046      	beq.n	a5b6 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a528:	7cbb      	ldrb	r3, [r7, #18]
    a52a:	2203      	movs	r2, #3
    a52c:	4619      	mov	r1, r3
    a52e:	68f8      	ldr	r0, [r7, #12]
    a530:	4b24      	ldr	r3, [pc, #144]	; (a5c4 <_usb_d_dev_ep_deinit+0xe0>)
    a532:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a534:	68fb      	ldr	r3, [r7, #12]
    a536:	7cdb      	ldrb	r3, [r3, #19]
    a538:	f003 0307 	and.w	r3, r3, #7
    a53c:	b2db      	uxtb	r3, r3
    a53e:	2b01      	cmp	r3, #1
    a540:	d107      	bne.n	a552 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a542:	79fb      	ldrb	r3, [r7, #7]
    a544:	697a      	ldr	r2, [r7, #20]
    a546:	3308      	adds	r3, #8
    a548:	015b      	lsls	r3, r3, #5
    a54a:	4413      	add	r3, r2
    a54c:	2200      	movs	r2, #0
    a54e:	701a      	strb	r2, [r3, #0]
    a550:	e02a      	b.n	a5a8 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a552:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a556:	2b00      	cmp	r3, #0
    a558:	da15      	bge.n	a586 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a55a:	79fb      	ldrb	r3, [r7, #7]
    a55c:	f003 030f 	and.w	r3, r3, #15
    a560:	79fa      	ldrb	r2, [r7, #7]
    a562:	f002 020f 	and.w	r2, r2, #15
    a566:	6979      	ldr	r1, [r7, #20]
    a568:	3208      	adds	r2, #8
    a56a:	0152      	lsls	r2, r2, #5
    a56c:	440a      	add	r2, r1
    a56e:	7812      	ldrb	r2, [r2, #0]
    a570:	b2d2      	uxtb	r2, r2
    a572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a576:	b2d1      	uxtb	r1, r2
    a578:	697a      	ldr	r2, [r7, #20]
    a57a:	3308      	adds	r3, #8
    a57c:	015b      	lsls	r3, r3, #5
    a57e:	4413      	add	r3, r2
    a580:	460a      	mov	r2, r1
    a582:	701a      	strb	r2, [r3, #0]
    a584:	e010      	b.n	a5a8 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a586:	79fb      	ldrb	r3, [r7, #7]
    a588:	79fa      	ldrb	r2, [r7, #7]
    a58a:	6979      	ldr	r1, [r7, #20]
    a58c:	3208      	adds	r2, #8
    a58e:	0152      	lsls	r2, r2, #5
    a590:	440a      	add	r2, r1
    a592:	7812      	ldrb	r2, [r2, #0]
    a594:	b2d2      	uxtb	r2, r2
    a596:	f022 0207 	bic.w	r2, r2, #7
    a59a:	b2d1      	uxtb	r1, r2
    a59c:	697a      	ldr	r2, [r7, #20]
    a59e:	3308      	adds	r3, #8
    a5a0:	015b      	lsls	r3, r3, #5
    a5a2:	4413      	add	r3, r2
    a5a4:	460a      	mov	r2, r1
    a5a6:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a5a8:	68fb      	ldr	r3, [r7, #12]
    a5aa:	2200      	movs	r2, #0
    a5ac:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a5ae:	68fb      	ldr	r3, [r7, #12]
    a5b0:	22ff      	movs	r2, #255	; 0xff
    a5b2:	749a      	strb	r2, [r3, #18]
    a5b4:	e000      	b.n	a5b8 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a5b6:	bf00      	nop
}
    a5b8:	3718      	adds	r7, #24
    a5ba:	46bd      	mov	sp, r7
    a5bc:	bd80      	pop	{r7, pc}
    a5be:	bf00      	nop
    a5c0:	000093e1 	.word	0x000093e1
    a5c4:	0000aa19 	.word	0x0000aa19

0000a5c8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a5c8:	b5b0      	push	{r4, r5, r7, lr}
    a5ca:	b088      	sub	sp, #32
    a5cc:	af00      	add	r7, sp, #0
    a5ce:	4603      	mov	r3, r0
    a5d0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a5d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a5d6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a5d8:	79fb      	ldrb	r3, [r7, #7]
    a5da:	f003 030f 	and.w	r3, r3, #15
    a5de:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a5e0:	79fb      	ldrb	r3, [r7, #7]
    a5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	bf14      	ite	ne
    a5ea:	2301      	movne	r3, #1
    a5ec:	2300      	moveq	r3, #0
    a5ee:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a5f0:	7eba      	ldrb	r2, [r7, #26]
    a5f2:	7efb      	ldrb	r3, [r7, #27]
    a5f4:	4611      	mov	r1, r2
    a5f6:	4618      	mov	r0, r3
    a5f8:	4b70      	ldr	r3, [pc, #448]	; (a7bc <_usb_d_dev_ep_enable+0x1f4>)
    a5fa:	4798      	blx	r3
    a5fc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a5fe:	7efb      	ldrb	r3, [r7, #27]
    a600:	4619      	mov	r1, r3
    a602:	69f8      	ldr	r0, [r7, #28]
    a604:	4b6e      	ldr	r3, [pc, #440]	; (a7c0 <_usb_d_dev_ep_enable+0x1f8>)
    a606:	4798      	blx	r3
    a608:	4603      	mov	r3, r0
    a60a:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a60c:	7efb      	ldrb	r3, [r7, #27]
    a60e:	2b04      	cmp	r3, #4
    a610:	d803      	bhi.n	a61a <_usb_d_dev_ep_enable+0x52>
    a612:	697b      	ldr	r3, [r7, #20]
    a614:	7c9b      	ldrb	r3, [r3, #18]
    a616:	2bff      	cmp	r3, #255	; 0xff
    a618:	d102      	bne.n	a620 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a61a:	f06f 0311 	mvn.w	r3, #17
    a61e:	e0c8      	b.n	a7b2 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a620:	7efb      	ldrb	r3, [r7, #27]
    a622:	015b      	lsls	r3, r3, #5
    a624:	4a67      	ldr	r2, [pc, #412]	; (a7c4 <_usb_d_dev_ep_enable+0x1fc>)
    a626:	4413      	add	r3, r2
    a628:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a62a:	697b      	ldr	r3, [r7, #20]
    a62c:	7cdb      	ldrb	r3, [r3, #19]
    a62e:	f003 0307 	and.w	r3, r3, #7
    a632:	b2db      	uxtb	r3, r3
    a634:	2b01      	cmp	r3, #1
    a636:	d14b      	bne.n	a6d0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a638:	7cfb      	ldrb	r3, [r7, #19]
    a63a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a63e:	2b00      	cmp	r3, #0
    a640:	d002      	beq.n	a648 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a642:	f06f 0313 	mvn.w	r3, #19
    a646:	e0b4      	b.n	a7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a648:	7efb      	ldrb	r3, [r7, #27]
    a64a:	2211      	movs	r2, #17
    a64c:	4619      	mov	r1, r3
    a64e:	69f8      	ldr	r0, [r7, #28]
    a650:	4b5d      	ldr	r3, [pc, #372]	; (a7c8 <_usb_d_dev_ep_enable+0x200>)
    a652:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a654:	697b      	ldr	r3, [r7, #20]
    a656:	8a1b      	ldrh	r3, [r3, #16]
    a658:	039b      	lsls	r3, r3, #14
    a65a:	4c5c      	ldr	r4, [pc, #368]	; (a7cc <_usb_d_dev_ep_enable+0x204>)
    a65c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a65e:	697b      	ldr	r3, [r7, #20]
    a660:	8a1b      	ldrh	r3, [r3, #16]
    a662:	4618      	mov	r0, r3
    a664:	4b5a      	ldr	r3, [pc, #360]	; (a7d0 <_usb_d_dev_ep_enable+0x208>)
    a666:	4798      	blx	r3
    a668:	4603      	mov	r3, r0
    a66a:	071b      	lsls	r3, r3, #28
    a66c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a670:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a674:	68fb      	ldr	r3, [r7, #12]
    a676:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a678:	68fb      	ldr	r3, [r7, #12]
    a67a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a67e:	697b      	ldr	r3, [r7, #20]
    a680:	8a1b      	ldrh	r3, [r3, #16]
    a682:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a686:	697b      	ldr	r3, [r7, #20]
    a688:	8a1b      	ldrh	r3, [r3, #16]
    a68a:	4618      	mov	r0, r3
    a68c:	4b50      	ldr	r3, [pc, #320]	; (a7d0 <_usb_d_dev_ep_enable+0x208>)
    a68e:	4798      	blx	r3
    a690:	4603      	mov	r3, r0
    a692:	071b      	lsls	r3, r3, #28
    a694:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a698:	432b      	orrs	r3, r5
    a69a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a69c:	7efb      	ldrb	r3, [r7, #27]
    a69e:	2200      	movs	r2, #0
    a6a0:	2100      	movs	r1, #0
    a6a2:	4618      	mov	r0, r3
    a6a4:	4b4b      	ldr	r3, [pc, #300]	; (a7d4 <_usb_d_dev_ep_enable+0x20c>)
    a6a6:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6a8:	7efb      	ldrb	r3, [r7, #27]
    a6aa:	2200      	movs	r2, #0
    a6ac:	2101      	movs	r1, #1
    a6ae:	4618      	mov	r0, r3
    a6b0:	4b49      	ldr	r3, [pc, #292]	; (a7d8 <_usb_d_dev_ep_enable+0x210>)
    a6b2:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a6b4:	7efb      	ldrb	r3, [r7, #27]
    a6b6:	2100      	movs	r1, #0
    a6b8:	4618      	mov	r0, r3
    a6ba:	4b48      	ldr	r3, [pc, #288]	; (a7dc <_usb_d_dev_ep_enable+0x214>)
    a6bc:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a6be:	7efb      	ldrb	r3, [r7, #27]
    a6c0:	2101      	movs	r1, #1
    a6c2:	4618      	mov	r0, r3
    a6c4:	4b45      	ldr	r3, [pc, #276]	; (a7dc <_usb_d_dev_ep_enable+0x214>)
    a6c6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a6c8:	6978      	ldr	r0, [r7, #20]
    a6ca:	4b45      	ldr	r3, [pc, #276]	; (a7e0 <_usb_d_dev_ep_enable+0x218>)
    a6cc:	4798      	blx	r3
    a6ce:	e06f      	b.n	a7b0 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a6d0:	7ebb      	ldrb	r3, [r7, #26]
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	d038      	beq.n	a748 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a6d6:	7cfb      	ldrb	r3, [r7, #19]
    a6d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d002      	beq.n	a6e6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a6e0:	f06f 0313 	mvn.w	r3, #19
    a6e4:	e065      	b.n	a7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a6e6:	697b      	ldr	r3, [r7, #20]
    a6e8:	7cdb      	ldrb	r3, [r3, #19]
    a6ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a6ee:	b2db      	uxtb	r3, r3
    a6f0:	011b      	lsls	r3, r3, #4
    a6f2:	b2db      	uxtb	r3, r3
    a6f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a6f8:	b2da      	uxtb	r2, r3
    a6fa:	7cfb      	ldrb	r3, [r7, #19]
    a6fc:	4313      	orrs	r3, r2
    a6fe:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a700:	7cfa      	ldrb	r2, [r7, #19]
    a702:	7efb      	ldrb	r3, [r7, #27]
    a704:	4619      	mov	r1, r3
    a706:	69f8      	ldr	r0, [r7, #28]
    a708:	4b2f      	ldr	r3, [pc, #188]	; (a7c8 <_usb_d_dev_ep_enable+0x200>)
    a70a:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a70c:	68fb      	ldr	r3, [r7, #12]
    a70e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a712:	697b      	ldr	r3, [r7, #20]
    a714:	8a1b      	ldrh	r3, [r3, #16]
    a716:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a71a:	697b      	ldr	r3, [r7, #20]
    a71c:	8a1b      	ldrh	r3, [r3, #16]
    a71e:	4618      	mov	r0, r3
    a720:	4b2b      	ldr	r3, [pc, #172]	; (a7d0 <_usb_d_dev_ep_enable+0x208>)
    a722:	4798      	blx	r3
    a724:	4603      	mov	r3, r0
    a726:	071b      	lsls	r3, r3, #28
    a728:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a72c:	432b      	orrs	r3, r5
    a72e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a730:	7efb      	ldrb	r3, [r7, #27]
    a732:	2200      	movs	r2, #0
    a734:	2101      	movs	r1, #1
    a736:	4618      	mov	r0, r3
    a738:	4b27      	ldr	r3, [pc, #156]	; (a7d8 <_usb_d_dev_ep_enable+0x210>)
    a73a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a73c:	7efb      	ldrb	r3, [r7, #27]
    a73e:	2101      	movs	r1, #1
    a740:	4618      	mov	r0, r3
    a742:	4b26      	ldr	r3, [pc, #152]	; (a7dc <_usb_d_dev_ep_enable+0x214>)
    a744:	4798      	blx	r3
    a746:	e033      	b.n	a7b0 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a748:	7cfb      	ldrb	r3, [r7, #19]
    a74a:	f003 0307 	and.w	r3, r3, #7
    a74e:	2b00      	cmp	r3, #0
    a750:	d002      	beq.n	a758 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a752:	f06f 0313 	mvn.w	r3, #19
    a756:	e02c      	b.n	a7b2 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a758:	697b      	ldr	r3, [r7, #20]
    a75a:	7cdb      	ldrb	r3, [r3, #19]
    a75c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a760:	b2db      	uxtb	r3, r3
    a762:	461a      	mov	r2, r3
    a764:	7cfb      	ldrb	r3, [r7, #19]
    a766:	4313      	orrs	r3, r2
    a768:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a76a:	7cfa      	ldrb	r2, [r7, #19]
    a76c:	7efb      	ldrb	r3, [r7, #27]
    a76e:	4619      	mov	r1, r3
    a770:	69f8      	ldr	r0, [r7, #28]
    a772:	4b15      	ldr	r3, [pc, #84]	; (a7c8 <_usb_d_dev_ep_enable+0x200>)
    a774:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a776:	697b      	ldr	r3, [r7, #20]
    a778:	8a1b      	ldrh	r3, [r3, #16]
    a77a:	039b      	lsls	r3, r3, #14
    a77c:	4c13      	ldr	r4, [pc, #76]	; (a7cc <_usb_d_dev_ep_enable+0x204>)
    a77e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a780:	697b      	ldr	r3, [r7, #20]
    a782:	8a1b      	ldrh	r3, [r3, #16]
    a784:	4618      	mov	r0, r3
    a786:	4b12      	ldr	r3, [pc, #72]	; (a7d0 <_usb_d_dev_ep_enable+0x208>)
    a788:	4798      	blx	r3
    a78a:	4603      	mov	r3, r0
    a78c:	071b      	lsls	r3, r3, #28
    a78e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a792:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a796:	68fb      	ldr	r3, [r7, #12]
    a798:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a79a:	7efb      	ldrb	r3, [r7, #27]
    a79c:	2200      	movs	r2, #0
    a79e:	2100      	movs	r1, #0
    a7a0:	4618      	mov	r0, r3
    a7a2:	4b0c      	ldr	r3, [pc, #48]	; (a7d4 <_usb_d_dev_ep_enable+0x20c>)
    a7a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a7a6:	7efb      	ldrb	r3, [r7, #27]
    a7a8:	2100      	movs	r1, #0
    a7aa:	4618      	mov	r0, r3
    a7ac:	4b0b      	ldr	r3, [pc, #44]	; (a7dc <_usb_d_dev_ep_enable+0x214>)
    a7ae:	4798      	blx	r3
	}

	return USB_OK;
    a7b0:	2300      	movs	r3, #0
}
    a7b2:	4618      	mov	r0, r3
    a7b4:	3720      	adds	r7, #32
    a7b6:	46bd      	mov	sp, r7
    a7b8:	bdb0      	pop	{r4, r5, r7, pc}
    a7ba:	bf00      	nop
    a7bc:	000093e1 	.word	0x000093e1
    a7c0:	00008a67 	.word	0x00008a67
    a7c4:	20000b58 	.word	0x20000b58
    a7c8:	00008a3d 	.word	0x00008a3d
    a7cc:	0fffc000 	.word	0x0fffc000
    a7d0:	0000937d 	.word	0x0000937d
    a7d4:	00009325 	.word	0x00009325
    a7d8:	000092cd 	.word	0x000092cd
    a7dc:	00009295 	.word	0x00009295
    a7e0:	0000a339 	.word	0x0000a339

0000a7e4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b084      	sub	sp, #16
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	6078      	str	r0, [r7, #4]
    a7ec:	460b      	mov	r3, r1
    a7ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7f0:	687b      	ldr	r3, [r7, #4]
    a7f2:	7c9b      	ldrb	r3, [r3, #18]
    a7f4:	f003 030f 	and.w	r3, r3, #15
    a7f8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a7fa:	78fa      	ldrb	r2, [r7, #3]
    a7fc:	7bfb      	ldrb	r3, [r7, #15]
    a7fe:	4611      	mov	r1, r2
    a800:	4618      	mov	r0, r3
    a802:	4b03      	ldr	r3, [pc, #12]	; (a810 <_usb_d_dev_ep_stall_get+0x2c>)
    a804:	4798      	blx	r3
    a806:	4603      	mov	r3, r0
}
    a808:	4618      	mov	r0, r3
    a80a:	3710      	adds	r7, #16
    a80c:	46bd      	mov	sp, r7
    a80e:	bd80      	pop	{r7, pc}
    a810:	00008ed5 	.word	0x00008ed5

0000a814 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a814:	b580      	push	{r7, lr}
    a816:	b084      	sub	sp, #16
    a818:	af00      	add	r7, sp, #0
    a81a:	6078      	str	r0, [r7, #4]
    a81c:	460b      	mov	r3, r1
    a81e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a820:	687b      	ldr	r3, [r7, #4]
    a822:	7c9b      	ldrb	r3, [r3, #18]
    a824:	f003 030f 	and.w	r3, r3, #15
    a828:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a82a:	78f9      	ldrb	r1, [r7, #3]
    a82c:	7bfb      	ldrb	r3, [r7, #15]
    a82e:	2201      	movs	r2, #1
    a830:	4618      	mov	r0, r3
    a832:	4b0a      	ldr	r3, [pc, #40]	; (a85c <_usb_d_dev_ep_stall_set+0x48>)
    a834:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a836:	78fb      	ldrb	r3, [r7, #3]
    a838:	2220      	movs	r2, #32
    a83a:	409a      	lsls	r2, r3
    a83c:	7bfb      	ldrb	r3, [r7, #15]
    a83e:	4611      	mov	r1, r2
    a840:	4618      	mov	r0, r3
    a842:	4b07      	ldr	r3, [pc, #28]	; (a860 <_usb_d_dev_ep_stall_set+0x4c>)
    a844:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a846:	687a      	ldr	r2, [r7, #4]
    a848:	7cd3      	ldrb	r3, [r2, #19]
    a84a:	f043 0308 	orr.w	r3, r3, #8
    a84e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a850:	2300      	movs	r3, #0
}
    a852:	4618      	mov	r0, r3
    a854:	3710      	adds	r7, #16
    a856:	46bd      	mov	sp, r7
    a858:	bd80      	pop	{r7, pc}
    a85a:	bf00      	nop
    a85c:	00008e7d 	.word	0x00008e7d
    a860:	00008dfd 	.word	0x00008dfd

0000a864 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a864:	b580      	push	{r7, lr}
    a866:	b084      	sub	sp, #16
    a868:	af00      	add	r7, sp, #0
    a86a:	6078      	str	r0, [r7, #4]
    a86c:	460b      	mov	r3, r1
    a86e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	7c9b      	ldrb	r3, [r3, #18]
    a874:	f003 030f 	and.w	r3, r3, #15
    a878:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a87a:	78fa      	ldrb	r2, [r7, #3]
    a87c:	7bfb      	ldrb	r3, [r7, #15]
    a87e:	4611      	mov	r1, r2
    a880:	4618      	mov	r0, r3
    a882:	4b28      	ldr	r3, [pc, #160]	; (a924 <_usb_d_dev_ep_stall_clr+0xc0>)
    a884:	4798      	blx	r3
    a886:	4603      	mov	r3, r0
    a888:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a88a:	7bbb      	ldrb	r3, [r7, #14]
    a88c:	f083 0301 	eor.w	r3, r3, #1
    a890:	b2db      	uxtb	r3, r3
    a892:	2b00      	cmp	r3, #0
    a894:	d001      	beq.n	a89a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a896:	2300      	movs	r3, #0
    a898:	e040      	b.n	a91c <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a89a:	78f9      	ldrb	r1, [r7, #3]
    a89c:	7bfb      	ldrb	r3, [r7, #15]
    a89e:	2200      	movs	r2, #0
    a8a0:	4618      	mov	r0, r3
    a8a2:	4b21      	ldr	r3, [pc, #132]	; (a928 <_usb_d_dev_ep_stall_clr+0xc4>)
    a8a4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a8a6:	78fb      	ldrb	r3, [r7, #3]
    a8a8:	2220      	movs	r2, #32
    a8aa:	409a      	lsls	r2, r3
    a8ac:	7bfb      	ldrb	r3, [r7, #15]
    a8ae:	4611      	mov	r1, r2
    a8b0:	4618      	mov	r0, r3
    a8b2:	4b1e      	ldr	r3, [pc, #120]	; (a92c <_usb_d_dev_ep_stall_clr+0xc8>)
    a8b4:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a8b6:	78fa      	ldrb	r2, [r7, #3]
    a8b8:	7bfb      	ldrb	r3, [r7, #15]
    a8ba:	4611      	mov	r1, r2
    a8bc:	4618      	mov	r0, r3
    a8be:	4b1c      	ldr	r3, [pc, #112]	; (a930 <_usb_d_dev_ep_stall_clr+0xcc>)
    a8c0:	4798      	blx	r3
    a8c2:	4603      	mov	r3, r0
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d00b      	beq.n	a8e0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a8c8:	78fa      	ldrb	r2, [r7, #3]
    a8ca:	7bfb      	ldrb	r3, [r7, #15]
    a8cc:	4611      	mov	r1, r2
    a8ce:	4618      	mov	r0, r3
    a8d0:	4b18      	ldr	r3, [pc, #96]	; (a934 <_usb_d_dev_ep_stall_clr+0xd0>)
    a8d2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a8d4:	78f9      	ldrb	r1, [r7, #3]
    a8d6:	7bfb      	ldrb	r3, [r7, #15]
    a8d8:	2200      	movs	r2, #0
    a8da:	4618      	mov	r0, r3
    a8dc:	4b16      	ldr	r3, [pc, #88]	; (a938 <_usb_d_dev_ep_stall_clr+0xd4>)
    a8de:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a8e0:	687b      	ldr	r3, [r7, #4]
    a8e2:	7cdb      	ldrb	r3, [r3, #19]
    a8e4:	f003 0307 	and.w	r3, r3, #7
    a8e8:	b2db      	uxtb	r3, r3
    a8ea:	2b01      	cmp	r3, #1
    a8ec:	d110      	bne.n	a910 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a8ee:	7bfb      	ldrb	r3, [r7, #15]
    a8f0:	4619      	mov	r1, r3
    a8f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8f6:	4b11      	ldr	r3, [pc, #68]	; (a93c <_usb_d_dev_ep_stall_clr+0xd8>)
    a8f8:	4798      	blx	r3
    a8fa:	4603      	mov	r3, r0
    a8fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a900:	2b00      	cmp	r3, #0
    a902:	d10a      	bne.n	a91a <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a904:	687a      	ldr	r2, [r7, #4]
    a906:	7cd3      	ldrb	r3, [r2, #19]
    a908:	f36f 03c3 	bfc	r3, #3, #1
    a90c:	74d3      	strb	r3, [r2, #19]
    a90e:	e004      	b.n	a91a <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a910:	687a      	ldr	r2, [r7, #4]
    a912:	7cd3      	ldrb	r3, [r2, #19]
    a914:	f36f 03c3 	bfc	r3, #3, #1
    a918:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a91a:	2300      	movs	r3, #0
}
    a91c:	4618      	mov	r0, r3
    a91e:	3710      	adds	r7, #16
    a920:	46bd      	mov	sp, r7
    a922:	bd80      	pop	{r7, pc}
    a924:	00008ed5 	.word	0x00008ed5
    a928:	00008e7d 	.word	0x00008e7d
    a92c:	00008e25 	.word	0x00008e25
    a930:	00008f19 	.word	0x00008f19
    a934:	00008f5d 	.word	0x00008f5d
    a938:	00009049 	.word	0x00009049
    a93c:	00008905 	.word	0x00008905

0000a940 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a940:	b580      	push	{r7, lr}
    a942:	b086      	sub	sp, #24
    a944:	af00      	add	r7, sp, #0
    a946:	4603      	mov	r3, r0
    a948:	460a      	mov	r2, r1
    a94a:	71fb      	strb	r3, [r7, #7]
    a94c:	4613      	mov	r3, r2
    a94e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a950:	79fb      	ldrb	r3, [r7, #7]
    a952:	f003 030f 	and.w	r3, r3, #15
    a956:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a958:	79fb      	ldrb	r3, [r7, #7]
    a95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a95e:	2b00      	cmp	r3, #0
    a960:	bf14      	ite	ne
    a962:	2301      	movne	r3, #1
    a964:	2300      	moveq	r3, #0
    a966:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a968:	7cba      	ldrb	r2, [r7, #18]
    a96a:	7cfb      	ldrb	r3, [r7, #19]
    a96c:	4611      	mov	r1, r2
    a96e:	4618      	mov	r0, r3
    a970:	4b13      	ldr	r3, [pc, #76]	; (a9c0 <_usb_d_dev_ep_stall+0x80>)
    a972:	4798      	blx	r3
    a974:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a976:	7cfb      	ldrb	r3, [r7, #19]
    a978:	2b04      	cmp	r3, #4
    a97a:	d902      	bls.n	a982 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a97c:	f06f 0311 	mvn.w	r3, #17
    a980:	e01a      	b.n	a9b8 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a982:	79bb      	ldrb	r3, [r7, #6]
    a984:	2b01      	cmp	r3, #1
    a986:	d106      	bne.n	a996 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a988:	7cbb      	ldrb	r3, [r7, #18]
    a98a:	4619      	mov	r1, r3
    a98c:	68f8      	ldr	r0, [r7, #12]
    a98e:	4b0d      	ldr	r3, [pc, #52]	; (a9c4 <_usb_d_dev_ep_stall+0x84>)
    a990:	4798      	blx	r3
    a992:	6178      	str	r0, [r7, #20]
    a994:	e00f      	b.n	a9b6 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a996:	79bb      	ldrb	r3, [r7, #6]
    a998:	2b00      	cmp	r3, #0
    a99a:	d106      	bne.n	a9aa <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a99c:	7cbb      	ldrb	r3, [r7, #18]
    a99e:	4619      	mov	r1, r3
    a9a0:	68f8      	ldr	r0, [r7, #12]
    a9a2:	4b09      	ldr	r3, [pc, #36]	; (a9c8 <_usb_d_dev_ep_stall+0x88>)
    a9a4:	4798      	blx	r3
    a9a6:	6178      	str	r0, [r7, #20]
    a9a8:	e005      	b.n	a9b6 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a9aa:	7cbb      	ldrb	r3, [r7, #18]
    a9ac:	4619      	mov	r1, r3
    a9ae:	68f8      	ldr	r0, [r7, #12]
    a9b0:	4b06      	ldr	r3, [pc, #24]	; (a9cc <_usb_d_dev_ep_stall+0x8c>)
    a9b2:	4798      	blx	r3
    a9b4:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a9b6:	697b      	ldr	r3, [r7, #20]
}
    a9b8:	4618      	mov	r0, r3
    a9ba:	3718      	adds	r7, #24
    a9bc:	46bd      	mov	sp, r7
    a9be:	bd80      	pop	{r7, pc}
    a9c0:	000093e1 	.word	0x000093e1
    a9c4:	0000a815 	.word	0x0000a815
    a9c8:	0000a865 	.word	0x0000a865
    a9cc:	0000a7e5 	.word	0x0000a7e5

0000a9d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	b082      	sub	sp, #8
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
    a9d8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a9da:	687b      	ldr	r3, [r7, #4]
    a9dc:	7c9b      	ldrb	r3, [r3, #18]
    a9de:	2bff      	cmp	r3, #255	; 0xff
    a9e0:	d014      	beq.n	aa0c <_usb_d_dev_trans_done+0x3c>
    a9e2:	687b      	ldr	r3, [r7, #4]
    a9e4:	7cdb      	ldrb	r3, [r3, #19]
    a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9ea:	b2db      	uxtb	r3, r3
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d00d      	beq.n	aa0c <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a9f0:	687a      	ldr	r2, [r7, #4]
    a9f2:	7cd3      	ldrb	r3, [r2, #19]
    a9f4:	f36f 1386 	bfc	r3, #6, #1
    a9f8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a9fa:	4b06      	ldr	r3, [pc, #24]	; (aa14 <_usb_d_dev_trans_done+0x44>)
    a9fc:	691b      	ldr	r3, [r3, #16]
    a9fe:	687a      	ldr	r2, [r7, #4]
    aa00:	7c90      	ldrb	r0, [r2, #18]
    aa02:	687a      	ldr	r2, [r7, #4]
    aa04:	6892      	ldr	r2, [r2, #8]
    aa06:	6839      	ldr	r1, [r7, #0]
    aa08:	4798      	blx	r3
    aa0a:	e000      	b.n	aa0e <_usb_d_dev_trans_done+0x3e>
		return;
    aa0c:	bf00      	nop
}
    aa0e:	3708      	adds	r7, #8
    aa10:	46bd      	mov	sp, r7
    aa12:	bd80      	pop	{r7, pc}
    aa14:	20000a90 	.word	0x20000a90

0000aa18 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    aa18:	b580      	push	{r7, lr}
    aa1a:	b086      	sub	sp, #24
    aa1c:	af00      	add	r7, sp, #0
    aa1e:	60f8      	str	r0, [r7, #12]
    aa20:	460b      	mov	r3, r1
    aa22:	607a      	str	r2, [r7, #4]
    aa24:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa26:	68fb      	ldr	r3, [r7, #12]
    aa28:	7c9b      	ldrb	r3, [r3, #18]
    aa2a:	f003 030f 	and.w	r3, r3, #15
    aa2e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    aa30:	4b1f      	ldr	r3, [pc, #124]	; (aab0 <_usb_d_dev_trans_stop+0x98>)
    aa32:	881b      	ldrh	r3, [r3, #0]
    aa34:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    aa36:	68fb      	ldr	r3, [r7, #12]
    aa38:	7c9b      	ldrb	r3, [r3, #18]
    aa3a:	2bff      	cmp	r3, #255	; 0xff
    aa3c:	d033      	beq.n	aaa6 <_usb_d_dev_trans_stop+0x8e>
    aa3e:	68fb      	ldr	r3, [r7, #12]
    aa40:	7cdb      	ldrb	r3, [r3, #19]
    aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aa46:	b2db      	uxtb	r3, r3
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d02c      	beq.n	aaa6 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    aa4c:	7afb      	ldrb	r3, [r7, #11]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d006      	beq.n	aa60 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aa52:	7dfb      	ldrb	r3, [r7, #23]
    aa54:	2200      	movs	r2, #0
    aa56:	2101      	movs	r1, #1
    aa58:	4618      	mov	r0, r3
    aa5a:	4b16      	ldr	r3, [pc, #88]	; (aab4 <_usb_d_dev_trans_stop+0x9c>)
    aa5c:	4798      	blx	r3
    aa5e:	e005      	b.n	aa6c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa60:	7dfb      	ldrb	r3, [r7, #23]
    aa62:	2200      	movs	r2, #0
    aa64:	2100      	movs	r1, #0
    aa66:	4618      	mov	r0, r3
    aa68:	4b13      	ldr	r3, [pc, #76]	; (aab8 <_usb_d_dev_trans_stop+0xa0>)
    aa6a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    aa6c:	7afb      	ldrb	r3, [r7, #11]
    aa6e:	f107 0218 	add.w	r2, r7, #24
    aa72:	4413      	add	r3, r2
    aa74:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa78:	461a      	mov	r2, r3
    aa7a:	7dfb      	ldrb	r3, [r7, #23]
    aa7c:	4611      	mov	r1, r2
    aa7e:	4618      	mov	r0, r3
    aa80:	4b0e      	ldr	r3, [pc, #56]	; (aabc <_usb_d_dev_trans_stop+0xa4>)
    aa82:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    aa84:	7afb      	ldrb	r3, [r7, #11]
    aa86:	f107 0218 	add.w	r2, r7, #24
    aa8a:	4413      	add	r3, r2
    aa8c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa90:	461a      	mov	r2, r3
    aa92:	7dfb      	ldrb	r3, [r7, #23]
    aa94:	4611      	mov	r1, r2
    aa96:	4618      	mov	r0, r3
    aa98:	4b09      	ldr	r3, [pc, #36]	; (aac0 <_usb_d_dev_trans_stop+0xa8>)
    aa9a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    aa9c:	6879      	ldr	r1, [r7, #4]
    aa9e:	68f8      	ldr	r0, [r7, #12]
    aaa0:	4b08      	ldr	r3, [pc, #32]	; (aac4 <_usb_d_dev_trans_stop+0xac>)
    aaa2:	4798      	blx	r3
    aaa4:	e000      	b.n	aaa8 <_usb_d_dev_trans_stop+0x90>
		return;
    aaa6:	bf00      	nop
}
    aaa8:	3718      	adds	r7, #24
    aaaa:	46bd      	mov	sp, r7
    aaac:	bd80      	pop	{r7, pc}
    aaae:	bf00      	nop
    aab0:	0000f22c 	.word	0x0000f22c
    aab4:	000092cd 	.word	0x000092cd
    aab8:	00009325 	.word	0x00009325
    aabc:	00008dd5 	.word	0x00008dd5
    aac0:	00008e25 	.word	0x00008e25
    aac4:	0000a9d1 	.word	0x0000a9d1

0000aac8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    aac8:	b580      	push	{r7, lr}
    aaca:	b086      	sub	sp, #24
    aacc:	af00      	add	r7, sp, #0
    aace:	4603      	mov	r3, r0
    aad0:	6039      	str	r1, [r7, #0]
    aad2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    aad4:	79fb      	ldrb	r3, [r7, #7]
    aad6:	f003 030f 	and.w	r3, r3, #15
    aada:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    aadc:	7dfb      	ldrb	r3, [r7, #23]
    aade:	015b      	lsls	r3, r3, #5
    aae0:	4a1e      	ldr	r2, [pc, #120]	; (ab5c <_usb_d_dev_ep_read_req+0x94>)
    aae2:	4413      	add	r3, r2
    aae4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    aae6:	693b      	ldr	r3, [r7, #16]
    aae8:	681b      	ldr	r3, [r3, #0]
    aaea:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    aaec:	693b      	ldr	r3, [r7, #16]
    aaee:	685b      	ldr	r3, [r3, #4]
    aaf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aaf4:	b29b      	uxth	r3, r3
    aaf6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    aaf8:	7dfb      	ldrb	r3, [r7, #23]
    aafa:	2b04      	cmp	r3, #4
    aafc:	d802      	bhi.n	ab04 <_usb_d_dev_ep_read_req+0x3c>
    aafe:	683b      	ldr	r3, [r7, #0]
    ab00:	2b00      	cmp	r3, #0
    ab02:	d102      	bne.n	ab0a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    ab04:	f06f 0311 	mvn.w	r3, #17
    ab08:	e023      	b.n	ab52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    ab0a:	7dfb      	ldrb	r3, [r7, #23]
    ab0c:	4618      	mov	r0, r3
    ab0e:	4b14      	ldr	r3, [pc, #80]	; (ab60 <_usb_d_dev_ep_read_req+0x98>)
    ab10:	4798      	blx	r3
    ab12:	4603      	mov	r3, r0
    ab14:	f083 0301 	eor.w	r3, r3, #1
    ab18:	b2db      	uxtb	r3, r3
    ab1a:	2b00      	cmp	r3, #0
    ab1c:	d002      	beq.n	ab24 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    ab1e:	f06f 0312 	mvn.w	r3, #18
    ab22:	e016      	b.n	ab52 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    ab24:	7dfb      	ldrb	r3, [r7, #23]
    ab26:	4618      	mov	r0, r3
    ab28:	4b0e      	ldr	r3, [pc, #56]	; (ab64 <_usb_d_dev_ep_read_req+0x9c>)
    ab2a:	4798      	blx	r3
    ab2c:	4603      	mov	r3, r0
    ab2e:	f083 0301 	eor.w	r3, r3, #1
    ab32:	b2db      	uxtb	r3, r3
    ab34:	2b00      	cmp	r3, #0
    ab36:	d001      	beq.n	ab3c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    ab38:	2300      	movs	r3, #0
    ab3a:	e00a      	b.n	ab52 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    ab3c:	68fb      	ldr	r3, [r7, #12]
    ab3e:	2208      	movs	r2, #8
    ab40:	4619      	mov	r1, r3
    ab42:	6838      	ldr	r0, [r7, #0]
    ab44:	4b08      	ldr	r3, [pc, #32]	; (ab68 <_usb_d_dev_ep_read_req+0xa0>)
    ab46:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    ab48:	7dfb      	ldrb	r3, [r7, #23]
    ab4a:	4618      	mov	r0, r3
    ab4c:	4b07      	ldr	r3, [pc, #28]	; (ab6c <_usb_d_dev_ep_read_req+0xa4>)
    ab4e:	4798      	blx	r3

	return bytes;
    ab50:	897b      	ldrh	r3, [r7, #10]
}
    ab52:	4618      	mov	r0, r3
    ab54:	3718      	adds	r7, #24
    ab56:	46bd      	mov	sp, r7
    ab58:	bd80      	pop	{r7, pc}
    ab5a:	bf00      	nop
    ab5c:	20000b58 	.word	0x20000b58
    ab60:	00008e4d 	.word	0x00008e4d
    ab64:	00008ff9 	.word	0x00008ff9
    ab68:	0000ea09 	.word	0x0000ea09
    ab6c:	00009029 	.word	0x00009029

0000ab70 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ab70:	b580      	push	{r7, lr}
    ab72:	b086      	sub	sp, #24
    ab74:	af00      	add	r7, sp, #0
    ab76:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	7a1b      	ldrb	r3, [r3, #8]
    ab7c:	f003 030f 	and.w	r3, r3, #15
    ab80:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	7a1b      	ldrb	r3, [r3, #8]
    ab86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	bf14      	ite	ne
    ab8e:	2301      	movne	r3, #1
    ab90:	2300      	moveq	r3, #0
    ab92:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab94:	7d7a      	ldrb	r2, [r7, #21]
    ab96:	7dbb      	ldrb	r3, [r7, #22]
    ab98:	4611      	mov	r1, r2
    ab9a:	4618      	mov	r0, r3
    ab9c:	4b5f      	ldr	r3, [pc, #380]	; (ad1c <_usb_d_dev_ep_trans+0x1ac>)
    ab9e:	4798      	blx	r3
    aba0:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    aba2:	693b      	ldr	r3, [r7, #16]
    aba4:	8a1b      	ldrh	r3, [r3, #16]
    aba6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    abaa:	4293      	cmp	r3, r2
    abac:	d004      	beq.n	abb8 <_usb_d_dev_ep_trans+0x48>
    abae:	693b      	ldr	r3, [r7, #16]
    abb0:	8a1b      	ldrh	r3, [r3, #16]
    abb2:	3b01      	subs	r3, #1
    abb4:	b29b      	uxth	r3, r3
    abb6:	e001      	b.n	abbc <_usb_d_dev_ep_trans+0x4c>
    abb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    abbc:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    abbe:	687b      	ldr	r3, [r7, #4]
    abc0:	685a      	ldr	r2, [r3, #4]
    abc2:	89fb      	ldrh	r3, [r7, #14]
    abc4:	4013      	ands	r3, r2
    abc6:	2b00      	cmp	r3, #0
    abc8:	bf14      	ite	ne
    abca:	2301      	movne	r3, #1
    abcc:	2300      	moveq	r3, #0
    abce:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    abd0:	2300      	movs	r3, #0
    abd2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    abd4:	7dbb      	ldrb	r3, [r7, #22]
    abd6:	2b04      	cmp	r3, #4
    abd8:	d902      	bls.n	abe0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    abda:	f06f 0311 	mvn.w	r3, #17
    abde:	e098      	b.n	ad12 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	681b      	ldr	r3, [r3, #0]
    abe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    abe8:	d31a      	bcc.n	ac20 <_usb_d_dev_ep_trans+0xb0>
    abea:	687b      	ldr	r3, [r7, #4]
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	461a      	mov	r2, r3
    abf0:	687b      	ldr	r3, [r7, #4]
    abf2:	685b      	ldr	r3, [r3, #4]
    abf4:	4413      	add	r3, r2
    abf6:	4a4a      	ldr	r2, [pc, #296]	; (ad20 <_usb_d_dev_ep_trans+0x1b0>)
    abf8:	4293      	cmp	r3, r2
    abfa:	d811      	bhi.n	ac20 <_usb_d_dev_ep_trans+0xb0>
    abfc:	687b      	ldr	r3, [r7, #4]
    abfe:	681b      	ldr	r3, [r3, #0]
    ac00:	f003 0303 	and.w	r3, r3, #3
    ac04:	2b00      	cmp	r3, #0
    ac06:	d10b      	bne.n	ac20 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    ac08:	7d7b      	ldrb	r3, [r7, #21]
    ac0a:	f083 0301 	eor.w	r3, r3, #1
    ac0e:	b2db      	uxtb	r3, r3
    ac10:	2b00      	cmp	r3, #0
    ac12:	d00e      	beq.n	ac32 <_usb_d_dev_ep_trans+0xc2>
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	685b      	ldr	r3, [r3, #4]
    ac18:	693a      	ldr	r2, [r7, #16]
    ac1a:	8a12      	ldrh	r2, [r2, #16]
    ac1c:	4293      	cmp	r3, r2
    ac1e:	d208      	bcs.n	ac32 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    ac20:	693b      	ldr	r3, [r7, #16]
    ac22:	68db      	ldr	r3, [r3, #12]
    ac24:	2b00      	cmp	r3, #0
    ac26:	d102      	bne.n	ac2e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    ac28:	f06f 0312 	mvn.w	r3, #18
    ac2c:	e071      	b.n	ad12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    ac2e:	2301      	movs	r3, #1
    ac30:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    ac32:	7d7b      	ldrb	r3, [r7, #21]
    ac34:	f083 0301 	eor.w	r3, r3, #1
    ac38:	b2db      	uxtb	r3, r3
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d009      	beq.n	ac52 <_usb_d_dev_ep_trans+0xe2>
    ac3e:	7b7b      	ldrb	r3, [r7, #13]
    ac40:	2b00      	cmp	r3, #0
    ac42:	d006      	beq.n	ac52 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    ac44:	693b      	ldr	r3, [r7, #16]
    ac46:	68db      	ldr	r3, [r3, #12]
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d102      	bne.n	ac52 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ac4c:	f06f 0311 	mvn.w	r3, #17
    ac50:	e05f      	b.n	ad12 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ac52:	693b      	ldr	r3, [r7, #16]
    ac54:	7cdb      	ldrb	r3, [r3, #19]
    ac56:	f003 0308 	and.w	r3, r3, #8
    ac5a:	b2db      	uxtb	r3, r3
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d001      	beq.n	ac64 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ac60:	2302      	movs	r3, #2
    ac62:	e056      	b.n	ad12 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ac64:	f107 0308 	add.w	r3, r7, #8
    ac68:	4618      	mov	r0, r3
    ac6a:	4b2e      	ldr	r3, [pc, #184]	; (ad24 <_usb_d_dev_ep_trans+0x1b4>)
    ac6c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ac6e:	693b      	ldr	r3, [r7, #16]
    ac70:	7cdb      	ldrb	r3, [r3, #19]
    ac72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac76:	b2db      	uxtb	r3, r3
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d006      	beq.n	ac8a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ac7c:	f107 0308 	add.w	r3, r7, #8
    ac80:	4618      	mov	r0, r3
    ac82:	4b29      	ldr	r3, [pc, #164]	; (ad28 <_usb_d_dev_ep_trans+0x1b8>)
    ac84:	4798      	blx	r3
		return USB_BUSY;
    ac86:	2301      	movs	r3, #1
    ac88:	e043      	b.n	ad12 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ac8a:	693a      	ldr	r2, [r7, #16]
    ac8c:	7cd3      	ldrb	r3, [r2, #19]
    ac8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac92:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ac94:	f107 0308 	add.w	r3, r7, #8
    ac98:	4618      	mov	r0, r3
    ac9a:	4b23      	ldr	r3, [pc, #140]	; (ad28 <_usb_d_dev_ep_trans+0x1b8>)
    ac9c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ac9e:	687b      	ldr	r3, [r7, #4]
    aca0:	681a      	ldr	r2, [r3, #0]
    aca2:	693b      	ldr	r3, [r7, #16]
    aca4:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	685a      	ldr	r2, [r3, #4]
    acaa:	693b      	ldr	r3, [r7, #16]
    acac:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    acae:	693b      	ldr	r3, [r7, #16]
    acb0:	2200      	movs	r2, #0
    acb2:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    acb4:	693a      	ldr	r2, [r7, #16]
    acb6:	7cd3      	ldrb	r3, [r2, #19]
    acb8:	7d79      	ldrb	r1, [r7, #21]
    acba:	f361 13c7 	bfi	r3, r1, #7, #1
    acbe:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    acc0:	693a      	ldr	r2, [r7, #16]
    acc2:	7cd3      	ldrb	r3, [r2, #19]
    acc4:	7df9      	ldrb	r1, [r7, #23]
    acc6:	f361 1345 	bfi	r3, r1, #5, #1
    acca:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    accc:	687b      	ldr	r3, [r7, #4]
    acce:	7a5b      	ldrb	r3, [r3, #9]
    acd0:	2b00      	cmp	r3, #0
    acd2:	d007      	beq.n	ace4 <_usb_d_dev_ep_trans+0x174>
    acd4:	7b7b      	ldrb	r3, [r7, #13]
    acd6:	f083 0301 	eor.w	r3, r3, #1
    acda:	b2db      	uxtb	r3, r3
    acdc:	2b00      	cmp	r3, #0
    acde:	d001      	beq.n	ace4 <_usb_d_dev_ep_trans+0x174>
    ace0:	2301      	movs	r3, #1
    ace2:	e000      	b.n	ace6 <_usb_d_dev_ep_trans+0x176>
    ace4:	2300      	movs	r3, #0
    ace6:	b2db      	uxtb	r3, r3
    ace8:	f003 0301 	and.w	r3, r3, #1
    acec:	b2d9      	uxtb	r1, r3
    acee:	693a      	ldr	r2, [r7, #16]
    acf0:	7cd3      	ldrb	r3, [r2, #19]
    acf2:	f361 1304 	bfi	r3, r1, #4, #1
    acf6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    acf8:	7d7b      	ldrb	r3, [r7, #21]
    acfa:	2b00      	cmp	r3, #0
    acfc:	d004      	beq.n	ad08 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    acfe:	2100      	movs	r1, #0
    ad00:	6938      	ldr	r0, [r7, #16]
    ad02:	4b0a      	ldr	r3, [pc, #40]	; (ad2c <_usb_d_dev_ep_trans+0x1bc>)
    ad04:	4798      	blx	r3
    ad06:	e003      	b.n	ad10 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    ad08:	2100      	movs	r1, #0
    ad0a:	6938      	ldr	r0, [r7, #16]
    ad0c:	4b08      	ldr	r3, [pc, #32]	; (ad30 <_usb_d_dev_ep_trans+0x1c0>)
    ad0e:	4798      	blx	r3
	}

	return ERR_NONE;
    ad10:	2300      	movs	r3, #0
}
    ad12:	4618      	mov	r0, r3
    ad14:	3718      	adds	r7, #24
    ad16:	46bd      	mov	sp, r7
    ad18:	bd80      	pop	{r7, pc}
    ad1a:	bf00      	nop
    ad1c:	000093e1 	.word	0x000093e1
    ad20:	20041fff 	.word	0x20041fff
    ad24:	0000b53d 	.word	0x0000b53d
    ad28:	0000b563 	.word	0x0000b563
    ad2c:	000096a9 	.word	0x000096a9
    ad30:	000098c1 	.word	0x000098c1

0000ad34 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    ad34:	b580      	push	{r7, lr}
    ad36:	b084      	sub	sp, #16
    ad38:	af00      	add	r7, sp, #0
    ad3a:	4603      	mov	r3, r0
    ad3c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    ad3e:	79fb      	ldrb	r3, [r7, #7]
    ad40:	f003 030f 	and.w	r3, r3, #15
    ad44:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    ad46:	79fb      	ldrb	r3, [r7, #7]
    ad48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad4c:	2b00      	cmp	r3, #0
    ad4e:	bf14      	ite	ne
    ad50:	2301      	movne	r3, #1
    ad52:	2300      	moveq	r3, #0
    ad54:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad56:	7bba      	ldrb	r2, [r7, #14]
    ad58:	7bfb      	ldrb	r3, [r7, #15]
    ad5a:	4611      	mov	r1, r2
    ad5c:	4618      	mov	r0, r3
    ad5e:	4b08      	ldr	r3, [pc, #32]	; (ad80 <_usb_d_dev_ep_abort+0x4c>)
    ad60:	4798      	blx	r3
    ad62:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ad64:	7bfb      	ldrb	r3, [r7, #15]
    ad66:	2b04      	cmp	r3, #4
    ad68:	d806      	bhi.n	ad78 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ad6a:	7bbb      	ldrb	r3, [r7, #14]
    ad6c:	2202      	movs	r2, #2
    ad6e:	4619      	mov	r1, r3
    ad70:	68b8      	ldr	r0, [r7, #8]
    ad72:	4b04      	ldr	r3, [pc, #16]	; (ad84 <_usb_d_dev_ep_abort+0x50>)
    ad74:	4798      	blx	r3
    ad76:	e000      	b.n	ad7a <_usb_d_dev_ep_abort+0x46>
		return;
    ad78:	bf00      	nop
}
    ad7a:	3710      	adds	r7, #16
    ad7c:	46bd      	mov	sp, r7
    ad7e:	bd80      	pop	{r7, pc}
    ad80:	000093e1 	.word	0x000093e1
    ad84:	0000aa19 	.word	0x0000aa19

0000ad88 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ad88:	b480      	push	{r7}
    ad8a:	b085      	sub	sp, #20
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	4603      	mov	r3, r0
    ad90:	6039      	str	r1, [r7, #0]
    ad92:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad94:	683b      	ldr	r3, [r7, #0]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d001      	beq.n	ad9e <_usb_d_dev_register_callback+0x16>
    ad9a:	683b      	ldr	r3, [r7, #0]
    ad9c:	e000      	b.n	ada0 <_usb_d_dev_register_callback+0x18>
    ad9e:	4b0a      	ldr	r3, [pc, #40]	; (adc8 <_usb_d_dev_register_callback+0x40>)
    ada0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ada2:	79fb      	ldrb	r3, [r7, #7]
    ada4:	2b01      	cmp	r3, #1
    ada6:	d103      	bne.n	adb0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ada8:	4a08      	ldr	r2, [pc, #32]	; (adcc <_usb_d_dev_register_callback+0x44>)
    adaa:	68fb      	ldr	r3, [r7, #12]
    adac:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    adae:	e005      	b.n	adbc <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    adb0:	79fb      	ldrb	r3, [r7, #7]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d102      	bne.n	adbc <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    adb6:	4a05      	ldr	r2, [pc, #20]	; (adcc <_usb_d_dev_register_callback+0x44>)
    adb8:	68fb      	ldr	r3, [r7, #12]
    adba:	6013      	str	r3, [r2, #0]
}
    adbc:	bf00      	nop
    adbe:	3714      	adds	r7, #20
    adc0:	46bd      	mov	sp, r7
    adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adc6:	4770      	bx	lr
    adc8:	00008c69 	.word	0x00008c69
    adcc:	20000a90 	.word	0x20000a90

0000add0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    add0:	b480      	push	{r7}
    add2:	b085      	sub	sp, #20
    add4:	af00      	add	r7, sp, #0
    add6:	4603      	mov	r3, r0
    add8:	6039      	str	r1, [r7, #0]
    adda:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    addc:	683b      	ldr	r3, [r7, #0]
    adde:	2b00      	cmp	r3, #0
    ade0:	d001      	beq.n	ade6 <_usb_d_dev_register_ep_callback+0x16>
    ade2:	683b      	ldr	r3, [r7, #0]
    ade4:	e000      	b.n	ade8 <_usb_d_dev_register_ep_callback+0x18>
    ade6:	4b0e      	ldr	r3, [pc, #56]	; (ae20 <_usb_d_dev_register_ep_callback+0x50>)
    ade8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    adea:	79fb      	ldrb	r3, [r7, #7]
    adec:	2b00      	cmp	r3, #0
    adee:	d103      	bne.n	adf8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    adf0:	4a0c      	ldr	r2, [pc, #48]	; (ae24 <_usb_d_dev_register_ep_callback+0x54>)
    adf2:	68fb      	ldr	r3, [r7, #12]
    adf4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    adf6:	e00c      	b.n	ae12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    adf8:	79fb      	ldrb	r3, [r7, #7]
    adfa:	2b01      	cmp	r3, #1
    adfc:	d103      	bne.n	ae06 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    adfe:	4a09      	ldr	r2, [pc, #36]	; (ae24 <_usb_d_dev_register_ep_callback+0x54>)
    ae00:	68fb      	ldr	r3, [r7, #12]
    ae02:	60d3      	str	r3, [r2, #12]
}
    ae04:	e005      	b.n	ae12 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    ae06:	79fb      	ldrb	r3, [r7, #7]
    ae08:	2b02      	cmp	r3, #2
    ae0a:	d102      	bne.n	ae12 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    ae0c:	4a05      	ldr	r2, [pc, #20]	; (ae24 <_usb_d_dev_register_ep_callback+0x54>)
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	6113      	str	r3, [r2, #16]
}
    ae12:	bf00      	nop
    ae14:	3714      	adds	r7, #20
    ae16:	46bd      	mov	sp, r7
    ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae1c:	4770      	bx	lr
    ae1e:	bf00      	nop
    ae20:	00008c69 	.word	0x00008c69
    ae24:	20000a90 	.word	0x20000a90

0000ae28 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ae28:	b580      	push	{r7, lr}
    ae2a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae2c:	4b01      	ldr	r3, [pc, #4]	; (ae34 <USB_0_Handler+0xc>)
    ae2e:	4798      	blx	r3
}
    ae30:	bf00      	nop
    ae32:	bd80      	pop	{r7, pc}
    ae34:	0000a099 	.word	0x0000a099

0000ae38 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae3c:	4b01      	ldr	r3, [pc, #4]	; (ae44 <USB_1_Handler+0xc>)
    ae3e:	4798      	blx	r3
}
    ae40:	bf00      	nop
    ae42:	bd80      	pop	{r7, pc}
    ae44:	0000a099 	.word	0x0000a099

0000ae48 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ae48:	b580      	push	{r7, lr}
    ae4a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae4c:	4b01      	ldr	r3, [pc, #4]	; (ae54 <USB_2_Handler+0xc>)
    ae4e:	4798      	blx	r3
}
    ae50:	bf00      	nop
    ae52:	bd80      	pop	{r7, pc}
    ae54:	0000a099 	.word	0x0000a099

0000ae58 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae5c:	4b01      	ldr	r3, [pc, #4]	; (ae64 <USB_3_Handler+0xc>)
    ae5e:	4798      	blx	r3
}
    ae60:	bf00      	nop
    ae62:	bd80      	pop	{r7, pc}
    ae64:	0000a099 	.word	0x0000a099

0000ae68 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ae68:	b480      	push	{r7}
    ae6a:	b083      	sub	sp, #12
    ae6c:	af00      	add	r7, sp, #0
    ae6e:	6078      	str	r0, [r7, #4]
    ae70:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ae72:	bf00      	nop
    ae74:	687b      	ldr	r3, [r7, #4]
    ae76:	689a      	ldr	r2, [r3, #8]
    ae78:	683b      	ldr	r3, [r7, #0]
    ae7a:	4013      	ands	r3, r2
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	d1f9      	bne.n	ae74 <hri_wdt_wait_for_sync+0xc>
	};
}
    ae80:	bf00      	nop
    ae82:	370c      	adds	r7, #12
    ae84:	46bd      	mov	sp, r7
    ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae8a:	4770      	bx	lr

0000ae8c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ae8c:	b580      	push	{r7, lr}
    ae8e:	b084      	sub	sp, #16
    ae90:	af00      	add	r7, sp, #0
    ae92:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae94:	210e      	movs	r1, #14
    ae96:	6878      	ldr	r0, [r7, #4]
    ae98:	4b0a      	ldr	r3, [pc, #40]	; (aec4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ae9a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae9c:	687b      	ldr	r3, [r7, #4]
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    aea2:	7bfb      	ldrb	r3, [r7, #15]
    aea4:	085b      	lsrs	r3, r3, #1
    aea6:	b2db      	uxtb	r3, r3
    aea8:	f003 0301 	and.w	r3, r3, #1
    aeac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aeae:	7bfb      	ldrb	r3, [r7, #15]
    aeb0:	2b00      	cmp	r3, #0
    aeb2:	bf14      	ite	ne
    aeb4:	2301      	movne	r3, #1
    aeb6:	2300      	moveq	r3, #0
    aeb8:	b2db      	uxtb	r3, r3
}
    aeba:	4618      	mov	r0, r3
    aebc:	3710      	adds	r7, #16
    aebe:	46bd      	mov	sp, r7
    aec0:	bd80      	pop	{r7, pc}
    aec2:	bf00      	nop
    aec4:	0000ae69 	.word	0x0000ae69

0000aec8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    aec8:	b580      	push	{r7, lr}
    aeca:	b082      	sub	sp, #8
    aecc:	af00      	add	r7, sp, #0
    aece:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    aed0:	687b      	ldr	r3, [r7, #4]
    aed2:	781b      	ldrb	r3, [r3, #0]
    aed4:	b2db      	uxtb	r3, r3
    aed6:	f023 0304 	bic.w	r3, r3, #4
    aeda:	b2da      	uxtb	r2, r3
    aedc:	687b      	ldr	r3, [r7, #4]
    aede:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aee0:	210e      	movs	r1, #14
    aee2:	6878      	ldr	r0, [r7, #4]
    aee4:	4b02      	ldr	r3, [pc, #8]	; (aef0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    aee6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    aee8:	bf00      	nop
    aeea:	3708      	adds	r7, #8
    aeec:	46bd      	mov	sp, r7
    aeee:	bd80      	pop	{r7, pc}
    aef0:	0000ae69 	.word	0x0000ae69

0000aef4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b084      	sub	sp, #16
    aef8:	af00      	add	r7, sp, #0
    aefa:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aefc:	210e      	movs	r1, #14
    aefe:	6878      	ldr	r0, [r7, #4]
    af00:	4b08      	ldr	r3, [pc, #32]	; (af24 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    af02:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    af04:	687b      	ldr	r3, [r7, #4]
    af06:	781b      	ldrb	r3, [r3, #0]
    af08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    af0a:	7bfb      	ldrb	r3, [r7, #15]
    af0c:	09db      	lsrs	r3, r3, #7
    af0e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    af10:	7bfb      	ldrb	r3, [r7, #15]
    af12:	2b00      	cmp	r3, #0
    af14:	bf14      	ite	ne
    af16:	2301      	movne	r3, #1
    af18:	2300      	moveq	r3, #0
    af1a:	b2db      	uxtb	r3, r3
}
    af1c:	4618      	mov	r0, r3
    af1e:	3710      	adds	r7, #16
    af20:	46bd      	mov	sp, r7
    af22:	bd80      	pop	{r7, pc}
    af24:	0000ae69 	.word	0x0000ae69

0000af28 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    af28:	b480      	push	{r7}
    af2a:	b085      	sub	sp, #20
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
    af30:	460b      	mov	r3, r1
    af32:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    af34:	687b      	ldr	r3, [r7, #4]
    af36:	785b      	ldrb	r3, [r3, #1]
    af38:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    af3a:	7bfb      	ldrb	r3, [r7, #15]
    af3c:	f023 030f 	bic.w	r3, r3, #15
    af40:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    af42:	78fb      	ldrb	r3, [r7, #3]
    af44:	f003 030f 	and.w	r3, r3, #15
    af48:	b2da      	uxtb	r2, r3
    af4a:	7bfb      	ldrb	r3, [r7, #15]
    af4c:	4313      	orrs	r3, r2
    af4e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    af50:	687b      	ldr	r3, [r7, #4]
    af52:	7bfa      	ldrb	r2, [r7, #15]
    af54:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    af56:	bf00      	nop
    af58:	3714      	adds	r7, #20
    af5a:	46bd      	mov	sp, r7
    af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af60:	4770      	bx	lr
	...

0000af64 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    af64:	b580      	push	{r7, lr}
    af66:	b082      	sub	sp, #8
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	2b00      	cmp	r3, #0
    af70:	d005      	beq.n	af7e <_wdt_init+0x1a>
    af72:	687b      	ldr	r3, [r7, #4]
    af74:	681b      	ldr	r3, [r3, #0]
    af76:	2b00      	cmp	r3, #0
    af78:	d001      	beq.n	af7e <_wdt_init+0x1a>
    af7a:	2301      	movs	r3, #1
    af7c:	e000      	b.n	af80 <_wdt_init+0x1c>
    af7e:	2300      	movs	r3, #0
    af80:	f003 0301 	and.w	r3, r3, #1
    af84:	b2db      	uxtb	r3, r3
    af86:	2250      	movs	r2, #80	; 0x50
    af88:	4913      	ldr	r1, [pc, #76]	; (afd8 <_wdt_init+0x74>)
    af8a:	4618      	mov	r0, r3
    af8c:	4b13      	ldr	r3, [pc, #76]	; (afdc <_wdt_init+0x78>)
    af8e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    af90:	687b      	ldr	r3, [r7, #4]
    af92:	681b      	ldr	r3, [r3, #0]
    af94:	4618      	mov	r0, r3
    af96:	4b12      	ldr	r3, [pc, #72]	; (afe0 <_wdt_init+0x7c>)
    af98:	4798      	blx	r3
    af9a:	4603      	mov	r3, r0
    af9c:	2b00      	cmp	r3, #0
    af9e:	d107      	bne.n	afb0 <_wdt_init+0x4c>
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	681b      	ldr	r3, [r3, #0]
    afa4:	4618      	mov	r0, r3
    afa6:	4b0f      	ldr	r3, [pc, #60]	; (afe4 <_wdt_init+0x80>)
    afa8:	4798      	blx	r3
    afaa:	4603      	mov	r3, r0
    afac:	2b00      	cmp	r3, #0
    afae:	d002      	beq.n	afb6 <_wdt_init+0x52>
		return ERR_DENIED;
    afb0:	f06f 0310 	mvn.w	r3, #16
    afb4:	e00b      	b.n	afce <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	681b      	ldr	r3, [r3, #0]
    afba:	4618      	mov	r0, r3
    afbc:	4b0a      	ldr	r3, [pc, #40]	; (afe8 <_wdt_init+0x84>)
    afbe:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    afc0:	687b      	ldr	r3, [r7, #4]
    afc2:	681b      	ldr	r3, [r3, #0]
    afc4:	210b      	movs	r1, #11
    afc6:	4618      	mov	r0, r3
    afc8:	4b08      	ldr	r3, [pc, #32]	; (afec <_wdt_init+0x88>)
    afca:	4798      	blx	r3
	}

	return ERR_NONE;
    afcc:	2300      	movs	r3, #0
}
    afce:	4618      	mov	r0, r3
    afd0:	3708      	adds	r7, #8
    afd2:	46bd      	mov	sp, r7
    afd4:	bd80      	pop	{r7, pc}
    afd6:	bf00      	nop
    afd8:	0000f230 	.word	0x0000f230
    afdc:	00003511 	.word	0x00003511
    afe0:	0000aef5 	.word	0x0000aef5
    afe4:	0000ae8d 	.word	0x0000ae8d
    afe8:	0000aec9 	.word	0x0000aec9
    afec:	0000af29 	.word	0x0000af29

0000aff0 <hri_port_set_DIR_reg>:
{
    aff0:	b480      	push	{r7}
    aff2:	b085      	sub	sp, #20
    aff4:	af00      	add	r7, sp, #0
    aff6:	60f8      	str	r0, [r7, #12]
    aff8:	460b      	mov	r3, r1
    affa:	607a      	str	r2, [r7, #4]
    affc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    affe:	7afb      	ldrb	r3, [r7, #11]
    b000:	68fa      	ldr	r2, [r7, #12]
    b002:	01db      	lsls	r3, r3, #7
    b004:	4413      	add	r3, r2
    b006:	3308      	adds	r3, #8
    b008:	687a      	ldr	r2, [r7, #4]
    b00a:	601a      	str	r2, [r3, #0]
}
    b00c:	bf00      	nop
    b00e:	3714      	adds	r7, #20
    b010:	46bd      	mov	sp, r7
    b012:	f85d 7b04 	ldr.w	r7, [sp], #4
    b016:	4770      	bx	lr

0000b018 <hri_port_clear_DIR_reg>:
{
    b018:	b480      	push	{r7}
    b01a:	b085      	sub	sp, #20
    b01c:	af00      	add	r7, sp, #0
    b01e:	60f8      	str	r0, [r7, #12]
    b020:	460b      	mov	r3, r1
    b022:	607a      	str	r2, [r7, #4]
    b024:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b026:	7afb      	ldrb	r3, [r7, #11]
    b028:	68fa      	ldr	r2, [r7, #12]
    b02a:	01db      	lsls	r3, r3, #7
    b02c:	4413      	add	r3, r2
    b02e:	3304      	adds	r3, #4
    b030:	687a      	ldr	r2, [r7, #4]
    b032:	601a      	str	r2, [r3, #0]
}
    b034:	bf00      	nop
    b036:	3714      	adds	r7, #20
    b038:	46bd      	mov	sp, r7
    b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b03e:	4770      	bx	lr

0000b040 <hri_port_set_OUT_reg>:
{
    b040:	b480      	push	{r7}
    b042:	b085      	sub	sp, #20
    b044:	af00      	add	r7, sp, #0
    b046:	60f8      	str	r0, [r7, #12]
    b048:	460b      	mov	r3, r1
    b04a:	607a      	str	r2, [r7, #4]
    b04c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b04e:	7afb      	ldrb	r3, [r7, #11]
    b050:	68fa      	ldr	r2, [r7, #12]
    b052:	01db      	lsls	r3, r3, #7
    b054:	4413      	add	r3, r2
    b056:	3318      	adds	r3, #24
    b058:	687a      	ldr	r2, [r7, #4]
    b05a:	601a      	str	r2, [r3, #0]
}
    b05c:	bf00      	nop
    b05e:	3714      	adds	r7, #20
    b060:	46bd      	mov	sp, r7
    b062:	f85d 7b04 	ldr.w	r7, [sp], #4
    b066:	4770      	bx	lr

0000b068 <hri_port_clear_OUT_reg>:
{
    b068:	b480      	push	{r7}
    b06a:	b085      	sub	sp, #20
    b06c:	af00      	add	r7, sp, #0
    b06e:	60f8      	str	r0, [r7, #12]
    b070:	460b      	mov	r3, r1
    b072:	607a      	str	r2, [r7, #4]
    b074:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b076:	7afb      	ldrb	r3, [r7, #11]
    b078:	68fa      	ldr	r2, [r7, #12]
    b07a:	01db      	lsls	r3, r3, #7
    b07c:	4413      	add	r3, r2
    b07e:	3314      	adds	r3, #20
    b080:	687a      	ldr	r2, [r7, #4]
    b082:	601a      	str	r2, [r3, #0]
}
    b084:	bf00      	nop
    b086:	3714      	adds	r7, #20
    b088:	46bd      	mov	sp, r7
    b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b08e:	4770      	bx	lr

0000b090 <hri_port_write_PMUX_PMUXE_bf>:
{
    b090:	b480      	push	{r7}
    b092:	b085      	sub	sp, #20
    b094:	af00      	add	r7, sp, #0
    b096:	6078      	str	r0, [r7, #4]
    b098:	4608      	mov	r0, r1
    b09a:	4611      	mov	r1, r2
    b09c:	461a      	mov	r2, r3
    b09e:	4603      	mov	r3, r0
    b0a0:	70fb      	strb	r3, [r7, #3]
    b0a2:	460b      	mov	r3, r1
    b0a4:	70bb      	strb	r3, [r7, #2]
    b0a6:	4613      	mov	r3, r2
    b0a8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b0aa:	78fa      	ldrb	r2, [r7, #3]
    b0ac:	78bb      	ldrb	r3, [r7, #2]
    b0ae:	6879      	ldr	r1, [r7, #4]
    b0b0:	01d2      	lsls	r2, r2, #7
    b0b2:	440a      	add	r2, r1
    b0b4:	4413      	add	r3, r2
    b0b6:	3330      	adds	r3, #48	; 0x30
    b0b8:	781b      	ldrb	r3, [r3, #0]
    b0ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b0bc:	7bfb      	ldrb	r3, [r7, #15]
    b0be:	f023 030f 	bic.w	r3, r3, #15
    b0c2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b0c4:	787b      	ldrb	r3, [r7, #1]
    b0c6:	f003 030f 	and.w	r3, r3, #15
    b0ca:	b2da      	uxtb	r2, r3
    b0cc:	7bfb      	ldrb	r3, [r7, #15]
    b0ce:	4313      	orrs	r3, r2
    b0d0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b0d2:	78fa      	ldrb	r2, [r7, #3]
    b0d4:	78bb      	ldrb	r3, [r7, #2]
    b0d6:	6879      	ldr	r1, [r7, #4]
    b0d8:	01d2      	lsls	r2, r2, #7
    b0da:	440a      	add	r2, r1
    b0dc:	4413      	add	r3, r2
    b0de:	3330      	adds	r3, #48	; 0x30
    b0e0:	7bfa      	ldrb	r2, [r7, #15]
    b0e2:	701a      	strb	r2, [r3, #0]
}
    b0e4:	bf00      	nop
    b0e6:	3714      	adds	r7, #20
    b0e8:	46bd      	mov	sp, r7
    b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ee:	4770      	bx	lr

0000b0f0 <hri_port_write_PMUX_PMUXO_bf>:
{
    b0f0:	b480      	push	{r7}
    b0f2:	b085      	sub	sp, #20
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	6078      	str	r0, [r7, #4]
    b0f8:	4608      	mov	r0, r1
    b0fa:	4611      	mov	r1, r2
    b0fc:	461a      	mov	r2, r3
    b0fe:	4603      	mov	r3, r0
    b100:	70fb      	strb	r3, [r7, #3]
    b102:	460b      	mov	r3, r1
    b104:	70bb      	strb	r3, [r7, #2]
    b106:	4613      	mov	r3, r2
    b108:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b10a:	78fa      	ldrb	r2, [r7, #3]
    b10c:	78bb      	ldrb	r3, [r7, #2]
    b10e:	6879      	ldr	r1, [r7, #4]
    b110:	01d2      	lsls	r2, r2, #7
    b112:	440a      	add	r2, r1
    b114:	4413      	add	r3, r2
    b116:	3330      	adds	r3, #48	; 0x30
    b118:	781b      	ldrb	r3, [r3, #0]
    b11a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b11c:	7bfb      	ldrb	r3, [r7, #15]
    b11e:	f003 030f 	and.w	r3, r3, #15
    b122:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b124:	787b      	ldrb	r3, [r7, #1]
    b126:	011b      	lsls	r3, r3, #4
    b128:	b2da      	uxtb	r2, r3
    b12a:	7bfb      	ldrb	r3, [r7, #15]
    b12c:	4313      	orrs	r3, r2
    b12e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b130:	78fa      	ldrb	r2, [r7, #3]
    b132:	78bb      	ldrb	r3, [r7, #2]
    b134:	6879      	ldr	r1, [r7, #4]
    b136:	01d2      	lsls	r2, r2, #7
    b138:	440a      	add	r2, r1
    b13a:	4413      	add	r3, r2
    b13c:	3330      	adds	r3, #48	; 0x30
    b13e:	7bfa      	ldrb	r2, [r7, #15]
    b140:	701a      	strb	r2, [r3, #0]
}
    b142:	bf00      	nop
    b144:	3714      	adds	r7, #20
    b146:	46bd      	mov	sp, r7
    b148:	f85d 7b04 	ldr.w	r7, [sp], #4
    b14c:	4770      	bx	lr

0000b14e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b14e:	b480      	push	{r7}
    b150:	b085      	sub	sp, #20
    b152:	af00      	add	r7, sp, #0
    b154:	6078      	str	r0, [r7, #4]
    b156:	4608      	mov	r0, r1
    b158:	4611      	mov	r1, r2
    b15a:	461a      	mov	r2, r3
    b15c:	4603      	mov	r3, r0
    b15e:	70fb      	strb	r3, [r7, #3]
    b160:	460b      	mov	r3, r1
    b162:	70bb      	strb	r3, [r7, #2]
    b164:	4613      	mov	r3, r2
    b166:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b168:	78fa      	ldrb	r2, [r7, #3]
    b16a:	78bb      	ldrb	r3, [r7, #2]
    b16c:	6879      	ldr	r1, [r7, #4]
    b16e:	01d2      	lsls	r2, r2, #7
    b170:	440a      	add	r2, r1
    b172:	4413      	add	r3, r2
    b174:	3340      	adds	r3, #64	; 0x40
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b17a:	7bfb      	ldrb	r3, [r7, #15]
    b17c:	f023 0301 	bic.w	r3, r3, #1
    b180:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b182:	787a      	ldrb	r2, [r7, #1]
    b184:	7bfb      	ldrb	r3, [r7, #15]
    b186:	4313      	orrs	r3, r2
    b188:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b18a:	78fa      	ldrb	r2, [r7, #3]
    b18c:	78bb      	ldrb	r3, [r7, #2]
    b18e:	6879      	ldr	r1, [r7, #4]
    b190:	01d2      	lsls	r2, r2, #7
    b192:	440a      	add	r2, r1
    b194:	4413      	add	r3, r2
    b196:	3340      	adds	r3, #64	; 0x40
    b198:	7bfa      	ldrb	r2, [r7, #15]
    b19a:	701a      	strb	r2, [r3, #0]
}
    b19c:	bf00      	nop
    b19e:	3714      	adds	r7, #20
    b1a0:	46bd      	mov	sp, r7
    b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a6:	4770      	bx	lr

0000b1a8 <hri_port_write_WRCONFIG_reg>:
{
    b1a8:	b480      	push	{r7}
    b1aa:	b085      	sub	sp, #20
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	60f8      	str	r0, [r7, #12]
    b1b0:	460b      	mov	r3, r1
    b1b2:	607a      	str	r2, [r7, #4]
    b1b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b1b6:	7afb      	ldrb	r3, [r7, #11]
    b1b8:	68fa      	ldr	r2, [r7, #12]
    b1ba:	01db      	lsls	r3, r3, #7
    b1bc:	4413      	add	r3, r2
    b1be:	3328      	adds	r3, #40	; 0x28
    b1c0:	687a      	ldr	r2, [r7, #4]
    b1c2:	601a      	str	r2, [r3, #0]
}
    b1c4:	bf00      	nop
    b1c6:	3714      	adds	r7, #20
    b1c8:	46bd      	mov	sp, r7
    b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ce:	4770      	bx	lr

0000b1d0 <_gpio_set_direction>:
{
    b1d0:	b580      	push	{r7, lr}
    b1d2:	b082      	sub	sp, #8
    b1d4:	af00      	add	r7, sp, #0
    b1d6:	4603      	mov	r3, r0
    b1d8:	6039      	str	r1, [r7, #0]
    b1da:	71fb      	strb	r3, [r7, #7]
    b1dc:	4613      	mov	r3, r2
    b1de:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b1e0:	79bb      	ldrb	r3, [r7, #6]
    b1e2:	2b01      	cmp	r3, #1
    b1e4:	d01c      	beq.n	b220 <_gpio_set_direction+0x50>
    b1e6:	2b02      	cmp	r3, #2
    b1e8:	d037      	beq.n	b25a <_gpio_set_direction+0x8a>
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d14e      	bne.n	b28c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1ee:	79fb      	ldrb	r3, [r7, #7]
    b1f0:	683a      	ldr	r2, [r7, #0]
    b1f2:	4619      	mov	r1, r3
    b1f4:	482a      	ldr	r0, [pc, #168]	; (b2a0 <_gpio_set_direction+0xd0>)
    b1f6:	4b2b      	ldr	r3, [pc, #172]	; (b2a4 <_gpio_set_direction+0xd4>)
    b1f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b1fa:	683b      	ldr	r3, [r7, #0]
    b1fc:	b29b      	uxth	r3, r3
    b1fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b202:	79fb      	ldrb	r3, [r7, #7]
    b204:	4619      	mov	r1, r3
    b206:	4826      	ldr	r0, [pc, #152]	; (b2a0 <_gpio_set_direction+0xd0>)
    b208:	4b27      	ldr	r3, [pc, #156]	; (b2a8 <_gpio_set_direction+0xd8>)
    b20a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b20c:	683b      	ldr	r3, [r7, #0]
    b20e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b210:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b214:	79fb      	ldrb	r3, [r7, #7]
    b216:	4619      	mov	r1, r3
    b218:	4821      	ldr	r0, [pc, #132]	; (b2a0 <_gpio_set_direction+0xd0>)
    b21a:	4b23      	ldr	r3, [pc, #140]	; (b2a8 <_gpio_set_direction+0xd8>)
    b21c:	4798      	blx	r3
		break;
    b21e:	e03a      	b.n	b296 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b220:	79fb      	ldrb	r3, [r7, #7]
    b222:	683a      	ldr	r2, [r7, #0]
    b224:	4619      	mov	r1, r3
    b226:	481e      	ldr	r0, [pc, #120]	; (b2a0 <_gpio_set_direction+0xd0>)
    b228:	4b1e      	ldr	r3, [pc, #120]	; (b2a4 <_gpio_set_direction+0xd4>)
    b22a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b22c:	683b      	ldr	r3, [r7, #0]
    b22e:	b29b      	uxth	r3, r3
    b230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b238:	79f9      	ldrb	r1, [r7, #7]
    b23a:	461a      	mov	r2, r3
    b23c:	4818      	ldr	r0, [pc, #96]	; (b2a0 <_gpio_set_direction+0xd0>)
    b23e:	4b1a      	ldr	r3, [pc, #104]	; (b2a8 <_gpio_set_direction+0xd8>)
    b240:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b242:	683b      	ldr	r3, [r7, #0]
    b244:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b24a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b24e:	79f9      	ldrb	r1, [r7, #7]
    b250:	461a      	mov	r2, r3
    b252:	4813      	ldr	r0, [pc, #76]	; (b2a0 <_gpio_set_direction+0xd0>)
    b254:	4b14      	ldr	r3, [pc, #80]	; (b2a8 <_gpio_set_direction+0xd8>)
    b256:	4798      	blx	r3
		break;
    b258:	e01d      	b.n	b296 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b25a:	79fb      	ldrb	r3, [r7, #7]
    b25c:	683a      	ldr	r2, [r7, #0]
    b25e:	4619      	mov	r1, r3
    b260:	480f      	ldr	r0, [pc, #60]	; (b2a0 <_gpio_set_direction+0xd0>)
    b262:	4b12      	ldr	r3, [pc, #72]	; (b2ac <_gpio_set_direction+0xdc>)
    b264:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b266:	683b      	ldr	r3, [r7, #0]
    b268:	b29b      	uxth	r3, r3
    b26a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b26e:	79fb      	ldrb	r3, [r7, #7]
    b270:	4619      	mov	r1, r3
    b272:	480b      	ldr	r0, [pc, #44]	; (b2a0 <_gpio_set_direction+0xd0>)
    b274:	4b0c      	ldr	r3, [pc, #48]	; (b2a8 <_gpio_set_direction+0xd8>)
    b276:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b278:	683b      	ldr	r3, [r7, #0]
    b27a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b27c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b280:	79fb      	ldrb	r3, [r7, #7]
    b282:	4619      	mov	r1, r3
    b284:	4806      	ldr	r0, [pc, #24]	; (b2a0 <_gpio_set_direction+0xd0>)
    b286:	4b08      	ldr	r3, [pc, #32]	; (b2a8 <_gpio_set_direction+0xd8>)
    b288:	4798      	blx	r3
		break;
    b28a:	e004      	b.n	b296 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b28c:	2246      	movs	r2, #70	; 0x46
    b28e:	4908      	ldr	r1, [pc, #32]	; (b2b0 <_gpio_set_direction+0xe0>)
    b290:	2000      	movs	r0, #0
    b292:	4b08      	ldr	r3, [pc, #32]	; (b2b4 <_gpio_set_direction+0xe4>)
    b294:	4798      	blx	r3
}
    b296:	bf00      	nop
    b298:	3708      	adds	r7, #8
    b29a:	46bd      	mov	sp, r7
    b29c:	bd80      	pop	{r7, pc}
    b29e:	bf00      	nop
    b2a0:	41008000 	.word	0x41008000
    b2a4:	0000b019 	.word	0x0000b019
    b2a8:	0000b1a9 	.word	0x0000b1a9
    b2ac:	0000aff1 	.word	0x0000aff1
    b2b0:	0000f248 	.word	0x0000f248
    b2b4:	00003511 	.word	0x00003511

0000b2b8 <_gpio_set_level>:
{
    b2b8:	b580      	push	{r7, lr}
    b2ba:	b082      	sub	sp, #8
    b2bc:	af00      	add	r7, sp, #0
    b2be:	4603      	mov	r3, r0
    b2c0:	6039      	str	r1, [r7, #0]
    b2c2:	71fb      	strb	r3, [r7, #7]
    b2c4:	4613      	mov	r3, r2
    b2c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b2c8:	79bb      	ldrb	r3, [r7, #6]
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	d006      	beq.n	b2dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b2ce:	79fb      	ldrb	r3, [r7, #7]
    b2d0:	683a      	ldr	r2, [r7, #0]
    b2d2:	4619      	mov	r1, r3
    b2d4:	4806      	ldr	r0, [pc, #24]	; (b2f0 <_gpio_set_level+0x38>)
    b2d6:	4b07      	ldr	r3, [pc, #28]	; (b2f4 <_gpio_set_level+0x3c>)
    b2d8:	4798      	blx	r3
}
    b2da:	e005      	b.n	b2e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b2dc:	79fb      	ldrb	r3, [r7, #7]
    b2de:	683a      	ldr	r2, [r7, #0]
    b2e0:	4619      	mov	r1, r3
    b2e2:	4803      	ldr	r0, [pc, #12]	; (b2f0 <_gpio_set_level+0x38>)
    b2e4:	4b04      	ldr	r3, [pc, #16]	; (b2f8 <_gpio_set_level+0x40>)
    b2e6:	4798      	blx	r3
}
    b2e8:	bf00      	nop
    b2ea:	3708      	adds	r7, #8
    b2ec:	46bd      	mov	sp, r7
    b2ee:	bd80      	pop	{r7, pc}
    b2f0:	41008000 	.word	0x41008000
    b2f4:	0000b041 	.word	0x0000b041
    b2f8:	0000b069 	.word	0x0000b069

0000b2fc <_gpio_set_pin_function>:
{
    b2fc:	b590      	push	{r4, r7, lr}
    b2fe:	b085      	sub	sp, #20
    b300:	af00      	add	r7, sp, #0
    b302:	6078      	str	r0, [r7, #4]
    b304:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	095b      	lsrs	r3, r3, #5
    b30a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b30c:	687b      	ldr	r3, [r7, #4]
    b30e:	b2db      	uxtb	r3, r3
    b310:	f003 031f 	and.w	r3, r3, #31
    b314:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b316:	683b      	ldr	r3, [r7, #0]
    b318:	f1b3 3fff 	cmp.w	r3, #4294967295
    b31c:	d106      	bne.n	b32c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b31e:	7bba      	ldrb	r2, [r7, #14]
    b320:	7bf9      	ldrb	r1, [r7, #15]
    b322:	2300      	movs	r3, #0
    b324:	4812      	ldr	r0, [pc, #72]	; (b370 <_gpio_set_pin_function+0x74>)
    b326:	4c13      	ldr	r4, [pc, #76]	; (b374 <_gpio_set_pin_function+0x78>)
    b328:	47a0      	blx	r4
}
    b32a:	e01d      	b.n	b368 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b32c:	7bba      	ldrb	r2, [r7, #14]
    b32e:	7bf9      	ldrb	r1, [r7, #15]
    b330:	2301      	movs	r3, #1
    b332:	480f      	ldr	r0, [pc, #60]	; (b370 <_gpio_set_pin_function+0x74>)
    b334:	4c0f      	ldr	r4, [pc, #60]	; (b374 <_gpio_set_pin_function+0x78>)
    b336:	47a0      	blx	r4
		if (pin & 1) {
    b338:	7bbb      	ldrb	r3, [r7, #14]
    b33a:	f003 0301 	and.w	r3, r3, #1
    b33e:	2b00      	cmp	r3, #0
    b340:	d009      	beq.n	b356 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b342:	7bbb      	ldrb	r3, [r7, #14]
    b344:	085b      	lsrs	r3, r3, #1
    b346:	b2da      	uxtb	r2, r3
    b348:	683b      	ldr	r3, [r7, #0]
    b34a:	b2db      	uxtb	r3, r3
    b34c:	7bf9      	ldrb	r1, [r7, #15]
    b34e:	4808      	ldr	r0, [pc, #32]	; (b370 <_gpio_set_pin_function+0x74>)
    b350:	4c09      	ldr	r4, [pc, #36]	; (b378 <_gpio_set_pin_function+0x7c>)
    b352:	47a0      	blx	r4
}
    b354:	e008      	b.n	b368 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b356:	7bbb      	ldrb	r3, [r7, #14]
    b358:	085b      	lsrs	r3, r3, #1
    b35a:	b2da      	uxtb	r2, r3
    b35c:	683b      	ldr	r3, [r7, #0]
    b35e:	b2db      	uxtb	r3, r3
    b360:	7bf9      	ldrb	r1, [r7, #15]
    b362:	4803      	ldr	r0, [pc, #12]	; (b370 <_gpio_set_pin_function+0x74>)
    b364:	4c05      	ldr	r4, [pc, #20]	; (b37c <_gpio_set_pin_function+0x80>)
    b366:	47a0      	blx	r4
}
    b368:	bf00      	nop
    b36a:	3714      	adds	r7, #20
    b36c:	46bd      	mov	sp, r7
    b36e:	bd90      	pop	{r4, r7, pc}
    b370:	41008000 	.word	0x41008000
    b374:	0000b14f 	.word	0x0000b14f
    b378:	0000b0f1 	.word	0x0000b0f1
    b37c:	0000b091 	.word	0x0000b091

0000b380 <gpio_set_pin_function>:
{
    b380:	b580      	push	{r7, lr}
    b382:	b082      	sub	sp, #8
    b384:	af00      	add	r7, sp, #0
    b386:	6078      	str	r0, [r7, #4]
    b388:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b38a:	6839      	ldr	r1, [r7, #0]
    b38c:	6878      	ldr	r0, [r7, #4]
    b38e:	4b03      	ldr	r3, [pc, #12]	; (b39c <gpio_set_pin_function+0x1c>)
    b390:	4798      	blx	r3
}
    b392:	bf00      	nop
    b394:	3708      	adds	r7, #8
    b396:	46bd      	mov	sp, r7
    b398:	bd80      	pop	{r7, pc}
    b39a:	bf00      	nop
    b39c:	0000b2fd 	.word	0x0000b2fd

0000b3a0 <gpio_set_pin_direction>:
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b082      	sub	sp, #8
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	4603      	mov	r3, r0
    b3a8:	460a      	mov	r2, r1
    b3aa:	71fb      	strb	r3, [r7, #7]
    b3ac:	4613      	mov	r3, r2
    b3ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b3b0:	79fb      	ldrb	r3, [r7, #7]
    b3b2:	095b      	lsrs	r3, r3, #5
    b3b4:	b2d8      	uxtb	r0, r3
    b3b6:	79fb      	ldrb	r3, [r7, #7]
    b3b8:	f003 031f 	and.w	r3, r3, #31
    b3bc:	2201      	movs	r2, #1
    b3be:	fa02 f303 	lsl.w	r3, r2, r3
    b3c2:	79ba      	ldrb	r2, [r7, #6]
    b3c4:	4619      	mov	r1, r3
    b3c6:	4b03      	ldr	r3, [pc, #12]	; (b3d4 <gpio_set_pin_direction+0x34>)
    b3c8:	4798      	blx	r3
}
    b3ca:	bf00      	nop
    b3cc:	3708      	adds	r7, #8
    b3ce:	46bd      	mov	sp, r7
    b3d0:	bd80      	pop	{r7, pc}
    b3d2:	bf00      	nop
    b3d4:	0000b1d1 	.word	0x0000b1d1

0000b3d8 <gpio_set_pin_level>:
{
    b3d8:	b580      	push	{r7, lr}
    b3da:	b082      	sub	sp, #8
    b3dc:	af00      	add	r7, sp, #0
    b3de:	4603      	mov	r3, r0
    b3e0:	460a      	mov	r2, r1
    b3e2:	71fb      	strb	r3, [r7, #7]
    b3e4:	4613      	mov	r3, r2
    b3e6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b3e8:	79fb      	ldrb	r3, [r7, #7]
    b3ea:	095b      	lsrs	r3, r3, #5
    b3ec:	b2d8      	uxtb	r0, r3
    b3ee:	79fb      	ldrb	r3, [r7, #7]
    b3f0:	f003 031f 	and.w	r3, r3, #31
    b3f4:	2201      	movs	r2, #1
    b3f6:	fa02 f303 	lsl.w	r3, r2, r3
    b3fa:	79ba      	ldrb	r2, [r7, #6]
    b3fc:	4619      	mov	r1, r3
    b3fe:	4b03      	ldr	r3, [pc, #12]	; (b40c <gpio_set_pin_level+0x34>)
    b400:	4798      	blx	r3
}
    b402:	bf00      	nop
    b404:	3708      	adds	r7, #8
    b406:	46bd      	mov	sp, r7
    b408:	bd80      	pop	{r7, pc}
    b40a:	bf00      	nop
    b40c:	0000b2b9 	.word	0x0000b2b9

0000b410 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b410:	b580      	push	{r7, lr}
    b412:	b082      	sub	sp, #8
    b414:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b416:	2100      	movs	r1, #0
    b418:	2008      	movs	r0, #8
    b41a:	4b24      	ldr	r3, [pc, #144]	; (b4ac <QSPI_N25Q256_exit_xip+0x9c>)
    b41c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b41e:	2100      	movs	r1, #0
    b420:	202b      	movs	r0, #43	; 0x2b
    b422:	4b22      	ldr	r3, [pc, #136]	; (b4ac <QSPI_N25Q256_exit_xip+0x9c>)
    b424:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b426:	2100      	movs	r1, #0
    b428:	202a      	movs	r0, #42	; 0x2a
    b42a:	4b20      	ldr	r3, [pc, #128]	; (b4ac <QSPI_N25Q256_exit_xip+0x9c>)
    b42c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b42e:	2102      	movs	r1, #2
    b430:	2008      	movs	r0, #8
    b432:	4b1f      	ldr	r3, [pc, #124]	; (b4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b434:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b436:	2102      	movs	r1, #2
    b438:	202b      	movs	r0, #43	; 0x2b
    b43a:	4b1d      	ldr	r3, [pc, #116]	; (b4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b43c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b43e:	2102      	movs	r1, #2
    b440:	202a      	movs	r0, #42	; 0x2a
    b442:	4b1b      	ldr	r3, [pc, #108]	; (b4b0 <QSPI_N25Q256_exit_xip+0xa0>)
    b444:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b446:	2101      	movs	r1, #1
    b448:	2008      	movs	r0, #8
    b44a:	4b1a      	ldr	r3, [pc, #104]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b44c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b44e:	2100      	movs	r1, #0
    b450:	202b      	movs	r0, #43	; 0x2b
    b452:	4b18      	ldr	r3, [pc, #96]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b454:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b456:	2100      	movs	r1, #0
    b458:	202a      	movs	r0, #42	; 0x2a
    b45a:	4b16      	ldr	r3, [pc, #88]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b45c:	4798      	blx	r3

	delay_us(1);
    b45e:	2001      	movs	r0, #1
    b460:	4b15      	ldr	r3, [pc, #84]	; (b4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b462:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b464:	2300      	movs	r3, #0
    b466:	607b      	str	r3, [r7, #4]
    b468:	e010      	b.n	b48c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b46a:	2101      	movs	r1, #1
    b46c:	202a      	movs	r0, #42	; 0x2a
    b46e:	4b11      	ldr	r3, [pc, #68]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b470:	4798      	blx	r3
		delay_us(1);
    b472:	2001      	movs	r0, #1
    b474:	4b10      	ldr	r3, [pc, #64]	; (b4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b476:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b478:	2100      	movs	r1, #0
    b47a:	202a      	movs	r0, #42	; 0x2a
    b47c:	4b0d      	ldr	r3, [pc, #52]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b47e:	4798      	blx	r3
		delay_us(1);
    b480:	2001      	movs	r0, #1
    b482:	4b0d      	ldr	r3, [pc, #52]	; (b4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b484:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b486:	687b      	ldr	r3, [r7, #4]
    b488:	3301      	adds	r3, #1
    b48a:	607b      	str	r3, [r7, #4]
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	2b06      	cmp	r3, #6
    b490:	ddeb      	ble.n	b46a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b492:	2101      	movs	r1, #1
    b494:	202b      	movs	r0, #43	; 0x2b
    b496:	4b07      	ldr	r3, [pc, #28]	; (b4b4 <QSPI_N25Q256_exit_xip+0xa4>)
    b498:	4798      	blx	r3
	delay_us(1);
    b49a:	2001      	movs	r0, #1
    b49c:	4b06      	ldr	r3, [pc, #24]	; (b4b8 <QSPI_N25Q256_exit_xip+0xa8>)
    b49e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b4a0:	4b06      	ldr	r3, [pc, #24]	; (b4bc <QSPI_N25Q256_exit_xip+0xac>)
    b4a2:	4798      	blx	r3
}
    b4a4:	bf00      	nop
    b4a6:	3708      	adds	r7, #8
    b4a8:	46bd      	mov	sp, r7
    b4aa:	bd80      	pop	{r7, pc}
    b4ac:	0000b381 	.word	0x0000b381
    b4b0:	0000b3a1 	.word	0x0000b3a1
    b4b4:	0000b3d9 	.word	0x0000b3d9
    b4b8:	00001d3d 	.word	0x00001d3d
    b4bc:	000010f1 	.word	0x000010f1

0000b4c0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b4c0:	b598      	push	{r3, r4, r7, lr}
    b4c2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b4c4:	4806      	ldr	r0, [pc, #24]	; (b4e0 <spi_nor_flash_init+0x20>)
    b4c6:	4b07      	ldr	r3, [pc, #28]	; (b4e4 <spi_nor_flash_init+0x24>)
    b4c8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b4ca:	2300      	movs	r3, #0
    b4cc:	4a06      	ldr	r2, [pc, #24]	; (b4e8 <spi_nor_flash_init+0x28>)
    b4ce:	4904      	ldr	r1, [pc, #16]	; (b4e0 <spi_nor_flash_init+0x20>)
    b4d0:	4806      	ldr	r0, [pc, #24]	; (b4ec <spi_nor_flash_init+0x2c>)
    b4d2:	4c07      	ldr	r4, [pc, #28]	; (b4f0 <spi_nor_flash_init+0x30>)
    b4d4:	47a0      	blx	r4
    b4d6:	4602      	mov	r2, r0
    b4d8:	4b06      	ldr	r3, [pc, #24]	; (b4f4 <spi_nor_flash_init+0x34>)
    b4da:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b4dc:	bf00      	nop
    b4de:	bd98      	pop	{r3, r4, r7, pc}
    b4e0:	2000108c 	.word	0x2000108c
    b4e4:	00002479 	.word	0x00002479
    b4e8:	0000b411 	.word	0x0000b411
    b4ec:	20000bf8 	.word	0x20000bf8
    b4f0:	0000b92d 	.word	0x0000b92d
    b4f4:	200012ac 	.word	0x200012ac

0000b4f8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b4f8:	b580      	push	{r7, lr}
    b4fa:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b4fc:	4805      	ldr	r0, [pc, #20]	; (b514 <cdc_device_acm_init+0x1c>)
    b4fe:	4b06      	ldr	r3, [pc, #24]	; (b518 <cdc_device_acm_init+0x20>)
    b500:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b502:	4b06      	ldr	r3, [pc, #24]	; (b51c <cdc_device_acm_init+0x24>)
    b504:	4798      	blx	r3

	usbdc_start(single_desc);
    b506:	4806      	ldr	r0, [pc, #24]	; (b520 <cdc_device_acm_init+0x28>)
    b508:	4b06      	ldr	r3, [pc, #24]	; (b524 <cdc_device_acm_init+0x2c>)
    b50a:	4798      	blx	r3
	usbdc_attach();
    b50c:	4b06      	ldr	r3, [pc, #24]	; (b528 <cdc_device_acm_init+0x30>)
    b50e:	4798      	blx	r3
}
    b510:	bf00      	nop
    b512:	bd80      	pop	{r7, pc}
    b514:	20000c48 	.word	0x20000c48
    b518:	0000d055 	.word	0x0000d055
    b51c:	0000c2cd 	.word	0x0000c2cd
    b520:	200001d0 	.word	0x200001d0
    b524:	0000d0f1 	.word	0x0000d0f1
    b528:	0000d141 	.word	0x0000d141

0000b52c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b52c:	b580      	push	{r7, lr}
    b52e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b530:	4b01      	ldr	r3, [pc, #4]	; (b538 <usb_init+0xc>)
    b532:	4798      	blx	r3
}
    b534:	bf00      	nop
    b536:	bd80      	pop	{r7, pc}
    b538:	0000b4f9 	.word	0x0000b4f9

0000b53c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b53c:	b480      	push	{r7}
    b53e:	b085      	sub	sp, #20
    b540:	af00      	add	r7, sp, #0
    b542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b544:	f3ef 8310 	mrs	r3, PRIMASK
    b548:	60fb      	str	r3, [r7, #12]
  return(result);
    b54a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b550:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b552:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b556:	bf00      	nop
    b558:	3714      	adds	r7, #20
    b55a:	46bd      	mov	sp, r7
    b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b560:	4770      	bx	lr

0000b562 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b562:	b480      	push	{r7}
    b564:	b085      	sub	sp, #20
    b566:	af00      	add	r7, sp, #0
    b568:	6078      	str	r0, [r7, #4]
    b56a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b56e:	687b      	ldr	r3, [r7, #4]
    b570:	681b      	ldr	r3, [r3, #0]
    b572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b574:	68fb      	ldr	r3, [r7, #12]
    b576:	f383 8810 	msr	PRIMASK, r3
}
    b57a:	bf00      	nop
    b57c:	3714      	adds	r7, #20
    b57e:	46bd      	mov	sp, r7
    b580:	f85d 7b04 	ldr.w	r7, [sp], #4
    b584:	4770      	bx	lr
	...

0000b588 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b588:	b580      	push	{r7, lr}
    b58a:	b08c      	sub	sp, #48	; 0x30
    b58c:	af00      	add	r7, sp, #0
    b58e:	6078      	str	r0, [r7, #4]
    b590:	460b      	mov	r3, r1
    b592:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b594:	687b      	ldr	r3, [r7, #4]
    b596:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b59e:	f107 030c 	add.w	r3, r7, #12
    b5a2:	2200      	movs	r2, #0
    b5a4:	601a      	str	r2, [r3, #0]
    b5a6:	605a      	str	r2, [r3, #4]
    b5a8:	609a      	str	r2, [r3, #8]
    b5aa:	60da      	str	r2, [r3, #12]
    b5ac:	611a      	str	r2, [r3, #16]
    b5ae:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5b2:	7b1b      	ldrb	r3, [r3, #12]
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	d001      	beq.n	b5bc <n25q256a_xip_confirm+0x34>
    b5b8:	2206      	movs	r2, #6
    b5ba:	e000      	b.n	b5be <n25q256a_xip_confirm+0x36>
    b5bc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b5be:	7b3b      	ldrb	r3, [r7, #12]
    b5c0:	f362 0302 	bfi	r3, r2, #0, #3
    b5c4:	733b      	strb	r3, [r7, #12]
    b5c6:	7b3b      	ldrb	r3, [r7, #12]
    b5c8:	f043 0310 	orr.w	r3, r3, #16
    b5cc:	733b      	strb	r3, [r7, #12]
    b5ce:	7b3b      	ldrb	r3, [r7, #12]
    b5d0:	f043 0320 	orr.w	r3, r3, #32
    b5d4:	733b      	strb	r3, [r7, #12]
    b5d6:	7b3b      	ldrb	r3, [r7, #12]
    b5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5dc:	733b      	strb	r3, [r7, #12]
    b5de:	7b3b      	ldrb	r3, [r7, #12]
    b5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b5e4:	733b      	strb	r3, [r7, #12]
    b5e6:	7b7b      	ldrb	r3, [r7, #13]
    b5e8:	f043 0303 	orr.w	r3, r3, #3
    b5ec:	737b      	strb	r3, [r7, #13]
    b5ee:	7b7b      	ldrb	r3, [r7, #13]
    b5f0:	2201      	movs	r2, #1
    b5f2:	f362 1305 	bfi	r3, r2, #4, #2
    b5f6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5fa:	7b1b      	ldrb	r3, [r3, #12]
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d001      	beq.n	b604 <n25q256a_xip_confirm+0x7c>
    b600:	2208      	movs	r2, #8
    b602:	e000      	b.n	b606 <n25q256a_xip_confirm+0x7e>
    b604:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b606:	7bbb      	ldrb	r3, [r7, #14]
    b608:	f362 0304 	bfi	r3, r2, #0, #5
    b60c:	73bb      	strb	r3, [r7, #14]
    b60e:	230b      	movs	r3, #11
    b610:	743b      	strb	r3, [r7, #16]
    b612:	78fb      	ldrb	r3, [r7, #3]
    b614:	2b00      	cmp	r3, #0
    b616:	d001      	beq.n	b61c <n25q256a_xip_confirm+0x94>
    b618:	2300      	movs	r3, #0
    b61a:	e000      	b.n	b61e <n25q256a_xip_confirm+0x96>
    b61c:	23ff      	movs	r3, #255	; 0xff
    b61e:	747b      	strb	r3, [r7, #17]
    b620:	2301      	movs	r3, #1
    b622:	61bb      	str	r3, [r7, #24]
    b624:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b628:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b62a:	f107 030c 	add.w	r3, r7, #12
    b62e:	4619      	mov	r1, r3
    b630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b632:	4b07      	ldr	r3, [pc, #28]	; (b650 <n25q256a_xip_confirm+0xc8>)
    b634:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b636:	78fb      	ldrb	r3, [r7, #3]
    b638:	2b00      	cmp	r3, #0
    b63a:	d001      	beq.n	b640 <n25q256a_xip_confirm+0xb8>
    b63c:	2202      	movs	r2, #2
    b63e:	e000      	b.n	b642 <n25q256a_xip_confirm+0xba>
    b640:	2201      	movs	r2, #1
    b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b644:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b646:	2300      	movs	r3, #0
}
    b648:	4618      	mov	r0, r3
    b64a:	3730      	adds	r7, #48	; 0x30
    b64c:	46bd      	mov	sp, r7
    b64e:	bd80      	pop	{r7, pc}
    b650:	000024f1 	.word	0x000024f1

0000b654 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b654:	b580      	push	{r7, lr}
    b656:	b08c      	sub	sp, #48	; 0x30
    b658:	af00      	add	r7, sp, #0
    b65a:	6078      	str	r0, [r7, #4]
    b65c:	460b      	mov	r3, r1
    b65e:	70fb      	strb	r3, [r7, #3]
    b660:	4613      	mov	r3, r2
    b662:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b664:	2300      	movs	r3, #0
    b666:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b668:	687b      	ldr	r3, [r7, #4]
    b66a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	681b      	ldr	r3, [r3, #0]
    b670:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b672:	f107 030c 	add.w	r3, r7, #12
    b676:	2200      	movs	r2, #0
    b678:	601a      	str	r2, [r3, #0]
    b67a:	605a      	str	r2, [r3, #4]
    b67c:	609a      	str	r2, [r3, #8]
    b67e:	60da      	str	r2, [r3, #12]
    b680:	611a      	str	r2, [r3, #16]
    b682:	615a      	str	r2, [r3, #20]
    b684:	78fb      	ldrb	r3, [r7, #3]
    b686:	f003 0307 	and.w	r3, r3, #7
    b68a:	b2da      	uxtb	r2, r3
    b68c:	7b3b      	ldrb	r3, [r7, #12]
    b68e:	f362 0302 	bfi	r3, r2, #0, #3
    b692:	733b      	strb	r3, [r7, #12]
    b694:	7b3b      	ldrb	r3, [r7, #12]
    b696:	f043 0310 	orr.w	r3, r3, #16
    b69a:	733b      	strb	r3, [r7, #12]
    b69c:	7b3b      	ldrb	r3, [r7, #12]
    b69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6a2:	733b      	strb	r3, [r7, #12]
    b6a4:	78bb      	ldrb	r3, [r7, #2]
    b6a6:	743b      	strb	r3, [r7, #16]
    b6a8:	2301      	movs	r3, #1
    b6aa:	61bb      	str	r3, [r7, #24]
    b6ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b6b0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6b4:	7b5b      	ldrb	r3, [r3, #13]
    b6b6:	2b00      	cmp	r3, #0
    b6b8:	d003      	beq.n	b6c2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b6ba:	2100      	movs	r1, #0
    b6bc:	6878      	ldr	r0, [r7, #4]
    b6be:	4b0a      	ldr	r3, [pc, #40]	; (b6e8 <n25q256a_read_reg+0x94>)
    b6c0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b6c2:	f107 030c 	add.w	r3, r7, #12
    b6c6:	4619      	mov	r1, r3
    b6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b6ca:	4b08      	ldr	r3, [pc, #32]	; (b6ec <n25q256a_read_reg+0x98>)
    b6cc:	4798      	blx	r3
	if (n25q->xip_mode) {
    b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6d0:	7b5b      	ldrb	r3, [r3, #13]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d003      	beq.n	b6de <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b6d6:	2101      	movs	r1, #1
    b6d8:	6878      	ldr	r0, [r7, #4]
    b6da:	4b03      	ldr	r3, [pc, #12]	; (b6e8 <n25q256a_read_reg+0x94>)
    b6dc:	4798      	blx	r3
	}
	return status;
    b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b6e0:	4618      	mov	r0, r3
    b6e2:	3730      	adds	r7, #48	; 0x30
    b6e4:	46bd      	mov	sp, r7
    b6e6:	bd80      	pop	{r7, pc}
    b6e8:	0000b589 	.word	0x0000b589
    b6ec:	000024f1 	.word	0x000024f1

0000b6f0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b6f0:	b580      	push	{r7, lr}
    b6f2:	b08c      	sub	sp, #48	; 0x30
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	60f8      	str	r0, [r7, #12]
    b6f8:	607b      	str	r3, [r7, #4]
    b6fa:	460b      	mov	r3, r1
    b6fc:	72fb      	strb	r3, [r7, #11]
    b6fe:	4613      	mov	r3, r2
    b700:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b702:	68fb      	ldr	r3, [r7, #12]
    b704:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b706:	68fb      	ldr	r3, [r7, #12]
    b708:	681b      	ldr	r3, [r3, #0]
    b70a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b70c:	f107 0310 	add.w	r3, r7, #16
    b710:	2200      	movs	r2, #0
    b712:	601a      	str	r2, [r3, #0]
    b714:	605a      	str	r2, [r3, #4]
    b716:	609a      	str	r2, [r3, #8]
    b718:	60da      	str	r2, [r3, #12]
    b71a:	611a      	str	r2, [r3, #16]
    b71c:	615a      	str	r2, [r3, #20]
    b71e:	7afb      	ldrb	r3, [r7, #11]
    b720:	f003 0307 	and.w	r3, r3, #7
    b724:	b2da      	uxtb	r2, r3
    b726:	7c3b      	ldrb	r3, [r7, #16]
    b728:	f362 0302 	bfi	r3, r2, #0, #3
    b72c:	743b      	strb	r3, [r7, #16]
    b72e:	7c3b      	ldrb	r3, [r7, #16]
    b730:	f043 0310 	orr.w	r3, r3, #16
    b734:	743b      	strb	r3, [r7, #16]
    b736:	7c3b      	ldrb	r3, [r7, #16]
    b738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b73c:	743b      	strb	r3, [r7, #16]
    b73e:	7c7b      	ldrb	r3, [r7, #17]
    b740:	2202      	movs	r2, #2
    b742:	f362 1305 	bfi	r3, r2, #4, #2
    b746:	747b      	strb	r3, [r7, #17]
    b748:	7abb      	ldrb	r3, [r7, #10]
    b74a:	753b      	strb	r3, [r7, #20]
    b74c:	2301      	movs	r3, #1
    b74e:	61fb      	str	r3, [r7, #28]
    b750:	1d3b      	adds	r3, r7, #4
    b752:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b756:	7b5b      	ldrb	r3, [r3, #13]
    b758:	2b00      	cmp	r3, #0
    b75a:	d003      	beq.n	b764 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b75c:	2100      	movs	r1, #0
    b75e:	68f8      	ldr	r0, [r7, #12]
    b760:	4b09      	ldr	r3, [pc, #36]	; (b788 <n25q256a_write_reg+0x98>)
    b762:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b764:	f107 0310 	add.w	r3, r7, #16
    b768:	4619      	mov	r1, r3
    b76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b76c:	4b07      	ldr	r3, [pc, #28]	; (b78c <n25q256a_write_reg+0x9c>)
    b76e:	4798      	blx	r3
	if (n25q->xip_mode) {
    b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b772:	7b5b      	ldrb	r3, [r3, #13]
    b774:	2b00      	cmp	r3, #0
    b776:	d003      	beq.n	b780 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b778:	2101      	movs	r1, #1
    b77a:	68f8      	ldr	r0, [r7, #12]
    b77c:	4b02      	ldr	r3, [pc, #8]	; (b788 <n25q256a_write_reg+0x98>)
    b77e:	4798      	blx	r3
	}
}
    b780:	bf00      	nop
    b782:	3730      	adds	r7, #48	; 0x30
    b784:	46bd      	mov	sp, r7
    b786:	bd80      	pop	{r7, pc}
    b788:	0000b589 	.word	0x0000b589
    b78c:	000024f1 	.word	0x000024f1

0000b790 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b790:	b580      	push	{r7, lr}
    b792:	b090      	sub	sp, #64	; 0x40
    b794:	af00      	add	r7, sp, #0
    b796:	6078      	str	r0, [r7, #4]
    b798:	460b      	mov	r3, r1
    b79a:	70fb      	strb	r3, [r7, #3]
    b79c:	4613      	mov	r3, r2
    b79e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b7a0:	687b      	ldr	r3, [r7, #4]
    b7a2:	681b      	ldr	r3, [r3, #0]
    b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b7a6:	78bb      	ldrb	r3, [r7, #2]
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d001      	beq.n	b7b0 <n25q256a_write_enable+0x20>
    b7ac:	2306      	movs	r3, #6
    b7ae:	e000      	b.n	b7b2 <n25q256a_write_enable+0x22>
    b7b0:	2304      	movs	r3, #4
    b7b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b7b6:	f107 0320 	add.w	r3, r7, #32
    b7ba:	2200      	movs	r2, #0
    b7bc:	601a      	str	r2, [r3, #0]
    b7be:	605a      	str	r2, [r3, #4]
    b7c0:	609a      	str	r2, [r3, #8]
    b7c2:	60da      	str	r2, [r3, #12]
    b7c4:	611a      	str	r2, [r3, #16]
    b7c6:	615a      	str	r2, [r3, #20]
    b7c8:	78fb      	ldrb	r3, [r7, #3]
    b7ca:	f003 0307 	and.w	r3, r3, #7
    b7ce:	b2da      	uxtb	r2, r3
    b7d0:	f897 3020 	ldrb.w	r3, [r7, #32]
    b7d4:	f362 0302 	bfi	r3, r2, #0, #3
    b7d8:	f887 3020 	strb.w	r3, [r7, #32]
    b7dc:	f897 3020 	ldrb.w	r3, [r7, #32]
    b7e0:	f043 0310 	orr.w	r3, r3, #16
    b7e4:	f887 3020 	strb.w	r3, [r7, #32]
    b7e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b7ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b7f0:	f107 0308 	add.w	r3, r7, #8
    b7f4:	2200      	movs	r2, #0
    b7f6:	601a      	str	r2, [r3, #0]
    b7f8:	605a      	str	r2, [r3, #4]
    b7fa:	609a      	str	r2, [r3, #8]
    b7fc:	60da      	str	r2, [r3, #12]
    b7fe:	611a      	str	r2, [r3, #16]
    b800:	615a      	str	r2, [r3, #20]
    b802:	78fb      	ldrb	r3, [r7, #3]
    b804:	f003 0307 	and.w	r3, r3, #7
    b808:	b2da      	uxtb	r2, r3
    b80a:	7a3b      	ldrb	r3, [r7, #8]
    b80c:	f362 0302 	bfi	r3, r2, #0, #3
    b810:	723b      	strb	r3, [r7, #8]
    b812:	7a3b      	ldrb	r3, [r7, #8]
    b814:	f043 0310 	orr.w	r3, r3, #16
    b818:	723b      	strb	r3, [r7, #8]
    b81a:	7a3b      	ldrb	r3, [r7, #8]
    b81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b820:	723b      	strb	r3, [r7, #8]
    b822:	2305      	movs	r3, #5
    b824:	733b      	strb	r3, [r7, #12]
    b826:	2301      	movs	r3, #1
    b828:	617b      	str	r3, [r7, #20]
    b82a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b82e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b830:	f107 0320 	add.w	r3, r7, #32
    b834:	4619      	mov	r1, r3
    b836:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b838:	4b08      	ldr	r3, [pc, #32]	; (b85c <n25q256a_write_enable+0xcc>)
    b83a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b83c:	f107 0308 	add.w	r3, r7, #8
    b840:	4619      	mov	r1, r3
    b842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b844:	4b05      	ldr	r3, [pc, #20]	; (b85c <n25q256a_write_enable+0xcc>)
    b846:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b848:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b84c:	f003 0302 	and.w	r3, r3, #2
    b850:	2b00      	cmp	r3, #0
    b852:	d0ed      	beq.n	b830 <n25q256a_write_enable+0xa0>
}
    b854:	bf00      	nop
    b856:	3740      	adds	r7, #64	; 0x40
    b858:	46bd      	mov	sp, r7
    b85a:	bd80      	pop	{r7, pc}
    b85c:	000024f1 	.word	0x000024f1

0000b860 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b860:	b590      	push	{r4, r7, lr}
    b862:	b087      	sub	sp, #28
    b864:	af00      	add	r7, sp, #0
    b866:	6078      	str	r0, [r7, #4]
    b868:	460b      	mov	r3, r1
    b86a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b86c:	687b      	ldr	r3, [r7, #4]
    b86e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b870:	68fb      	ldr	r3, [r7, #12]
    b872:	7b1b      	ldrb	r3, [r3, #12]
    b874:	2b00      	cmp	r3, #0
    b876:	d001      	beq.n	b87c <n25q256a_switch_mode+0x1c>
    b878:	2306      	movs	r3, #6
    b87a:	e000      	b.n	b87e <n25q256a_switch_mode+0x1e>
    b87c:	2300      	movs	r3, #0
    b87e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b880:	7afb      	ldrb	r3, [r7, #11]
    b882:	2265      	movs	r2, #101	; 0x65
    b884:	4619      	mov	r1, r3
    b886:	6878      	ldr	r0, [r7, #4]
    b888:	4b25      	ldr	r3, [pc, #148]	; (b920 <n25q256a_switch_mode+0xc0>)
    b88a:	4798      	blx	r3
    b88c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b88e:	2300      	movs	r3, #0
    b890:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b892:	68fb      	ldr	r3, [r7, #12]
    b894:	7b1b      	ldrb	r3, [r3, #12]
    b896:	78fa      	ldrb	r2, [r7, #3]
    b898:	429a      	cmp	r2, r3
    b89a:	d03d      	beq.n	b918 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b89c:	78fb      	ldrb	r3, [r7, #3]
    b89e:	2b00      	cmp	r3, #0
    b8a0:	d00b      	beq.n	b8ba <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b8a2:	697b      	ldr	r3, [r7, #20]
    b8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	d011      	beq.n	b8d0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b8ac:	697b      	ldr	r3, [r7, #20]
    b8ae:	f003 031f 	and.w	r3, r3, #31
    b8b2:	617b      	str	r3, [r7, #20]
			modify = 1;
    b8b4:	2301      	movs	r3, #1
    b8b6:	74fb      	strb	r3, [r7, #19]
    b8b8:	e00a      	b.n	b8d0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b8ba:	697b      	ldr	r3, [r7, #20]
    b8bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d105      	bne.n	b8d0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b8c4:	697b      	ldr	r3, [r7, #20]
    b8c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b8ca:	617b      	str	r3, [r7, #20]
			modify = 1;
    b8cc:	2301      	movs	r3, #1
    b8ce:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b8d0:	7cfb      	ldrb	r3, [r7, #19]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d021      	beq.n	b91a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b8d6:	68fb      	ldr	r3, [r7, #12]
    b8d8:	78fa      	ldrb	r2, [r7, #3]
    b8da:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b8dc:	7afb      	ldrb	r3, [r7, #11]
    b8de:	2201      	movs	r2, #1
    b8e0:	4619      	mov	r1, r3
    b8e2:	6878      	ldr	r0, [r7, #4]
    b8e4:	4b0f      	ldr	r3, [pc, #60]	; (b924 <n25q256a_switch_mode+0xc4>)
    b8e6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b8e8:	7af9      	ldrb	r1, [r7, #11]
    b8ea:	697b      	ldr	r3, [r7, #20]
    b8ec:	2261      	movs	r2, #97	; 0x61
    b8ee:	6878      	ldr	r0, [r7, #4]
    b8f0:	4c0d      	ldr	r4, [pc, #52]	; (b928 <n25q256a_switch_mode+0xc8>)
    b8f2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b8f4:	78fb      	ldrb	r3, [r7, #3]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d001      	beq.n	b8fe <n25q256a_switch_mode+0x9e>
    b8fa:	2306      	movs	r3, #6
    b8fc:	e000      	b.n	b900 <n25q256a_switch_mode+0xa0>
    b8fe:	2300      	movs	r3, #0
    b900:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b902:	7afb      	ldrb	r3, [r7, #11]
    b904:	2265      	movs	r2, #101	; 0x65
    b906:	4619      	mov	r1, r3
    b908:	6878      	ldr	r0, [r7, #4]
    b90a:	4b05      	ldr	r3, [pc, #20]	; (b920 <n25q256a_switch_mode+0xc0>)
    b90c:	4798      	blx	r3
    b90e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b910:	68fb      	ldr	r3, [r7, #12]
    b912:	78fa      	ldrb	r2, [r7, #3]
    b914:	731a      	strb	r2, [r3, #12]
    b916:	e000      	b.n	b91a <n25q256a_switch_mode+0xba>
		return;
    b918:	bf00      	nop
	}
}
    b91a:	371c      	adds	r7, #28
    b91c:	46bd      	mov	sp, r7
    b91e:	bd90      	pop	{r4, r7, pc}
    b920:	0000b655 	.word	0x0000b655
    b924:	0000b791 	.word	0x0000b791
    b928:	0000b6f1 	.word	0x0000b6f1

0000b92c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b92c:	b580      	push	{r7, lr}
    b92e:	b086      	sub	sp, #24
    b930:	af00      	add	r7, sp, #0
    b932:	60f8      	str	r0, [r7, #12]
    b934:	60b9      	str	r1, [r7, #8]
    b936:	607a      	str	r2, [r7, #4]
    b938:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b93a:	68fb      	ldr	r3, [r7, #12]
    b93c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b93e:	4a0c      	ldr	r2, [pc, #48]	; (b970 <n25q256a_construct+0x44>)
    b940:	68b9      	ldr	r1, [r7, #8]
    b942:	68f8      	ldr	r0, [r7, #12]
    b944:	4b0b      	ldr	r3, [pc, #44]	; (b974 <n25q256a_construct+0x48>)
    b946:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b948:	697b      	ldr	r3, [r7, #20]
    b94a:	2200      	movs	r2, #0
    b94c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b94e:	697b      	ldr	r3, [r7, #20]
    b950:	2200      	movs	r2, #0
    b952:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b954:	697b      	ldr	r3, [r7, #20]
    b956:	687a      	ldr	r2, [r7, #4]
    b958:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b95a:	78fb      	ldrb	r3, [r7, #3]
    b95c:	4619      	mov	r1, r3
    b95e:	68f8      	ldr	r0, [r7, #12]
    b960:	4b05      	ldr	r3, [pc, #20]	; (b978 <n25q256a_construct+0x4c>)
    b962:	4798      	blx	r3
	return me;
    b964:	68fb      	ldr	r3, [r7, #12]
}
    b966:	4618      	mov	r0, r3
    b968:	3718      	adds	r7, #24
    b96a:	46bd      	mov	sp, r7
    b96c:	bd80      	pop	{r7, pc}
    b96e:	bf00      	nop
    b970:	0000f264 	.word	0x0000f264
    b974:	0000be09 	.word	0x0000be09
    b978:	0000b861 	.word	0x0000b861

0000b97c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b97c:	b580      	push	{r7, lr}
    b97e:	b08c      	sub	sp, #48	; 0x30
    b980:	af00      	add	r7, sp, #0
    b982:	60f8      	str	r0, [r7, #12]
    b984:	60b9      	str	r1, [r7, #8]
    b986:	607a      	str	r2, [r7, #4]
    b988:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b98a:	68fb      	ldr	r3, [r7, #12]
    b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b98e:	68fb      	ldr	r3, [r7, #12]
    b990:	681b      	ldr	r3, [r3, #0]
    b992:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b994:	f107 0310 	add.w	r3, r7, #16
    b998:	2200      	movs	r2, #0
    b99a:	601a      	str	r2, [r3, #0]
    b99c:	605a      	str	r2, [r3, #4]
    b99e:	609a      	str	r2, [r3, #8]
    b9a0:	60da      	str	r2, [r3, #12]
    b9a2:	611a      	str	r2, [r3, #16]
    b9a4:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9a8:	7b1b      	ldrb	r3, [r3, #12]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d001      	beq.n	b9b2 <n25q256a_read+0x36>
    b9ae:	2206      	movs	r2, #6
    b9b0:	e000      	b.n	b9b4 <n25q256a_read+0x38>
    b9b2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b9b4:	7c3b      	ldrb	r3, [r7, #16]
    b9b6:	f362 0302 	bfi	r3, r2, #0, #3
    b9ba:	743b      	strb	r3, [r7, #16]
    b9bc:	7c3b      	ldrb	r3, [r7, #16]
    b9be:	f043 0310 	orr.w	r3, r3, #16
    b9c2:	743b      	strb	r3, [r7, #16]
    b9c4:	7c3b      	ldrb	r3, [r7, #16]
    b9c6:	f043 0320 	orr.w	r3, r3, #32
    b9ca:	743b      	strb	r3, [r7, #16]
    b9cc:	7c3b      	ldrb	r3, [r7, #16]
    b9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b9d2:	743b      	strb	r3, [r7, #16]
    b9d4:	7c7b      	ldrb	r3, [r7, #17]
    b9d6:	2201      	movs	r2, #1
    b9d8:	f362 1305 	bfi	r3, r2, #4, #2
    b9dc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b9e0:	7b1b      	ldrb	r3, [r3, #12]
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d001      	beq.n	b9ea <n25q256a_read+0x6e>
    b9e6:	220a      	movs	r2, #10
    b9e8:	e000      	b.n	b9ec <n25q256a_read+0x70>
    b9ea:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b9ec:	7cbb      	ldrb	r3, [r7, #18]
    b9ee:	f362 0304 	bfi	r3, r2, #0, #5
    b9f2:	74bb      	strb	r3, [r7, #18]
    b9f4:	230b      	movs	r3, #11
    b9f6:	753b      	strb	r3, [r7, #20]
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	61bb      	str	r3, [r7, #24]
    b9fc:	683b      	ldr	r3, [r7, #0]
    b9fe:	61fb      	str	r3, [r7, #28]
    ba00:	68bb      	ldr	r3, [r7, #8]
    ba02:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ba04:	f107 0310 	add.w	r3, r7, #16
    ba08:	4619      	mov	r1, r3
    ba0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba0c:	4b03      	ldr	r3, [pc, #12]	; (ba1c <n25q256a_read+0xa0>)
    ba0e:	4798      	blx	r3
	return ERR_NONE;
    ba10:	2300      	movs	r3, #0
}
    ba12:	4618      	mov	r0, r3
    ba14:	3730      	adds	r7, #48	; 0x30
    ba16:	46bd      	mov	sp, r7
    ba18:	bd80      	pop	{r7, pc}
    ba1a:	bf00      	nop
    ba1c:	000024f1 	.word	0x000024f1

0000ba20 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	b08c      	sub	sp, #48	; 0x30
    ba24:	af00      	add	r7, sp, #0
    ba26:	60f8      	str	r0, [r7, #12]
    ba28:	60b9      	str	r1, [r7, #8]
    ba2a:	607a      	str	r2, [r7, #4]
    ba2c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba2e:	68fb      	ldr	r3, [r7, #12]
    ba30:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba32:	68fb      	ldr	r3, [r7, #12]
    ba34:	681b      	ldr	r3, [r3, #0]
    ba36:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ba38:	f107 0310 	add.w	r3, r7, #16
    ba3c:	2200      	movs	r2, #0
    ba3e:	601a      	str	r2, [r3, #0]
    ba40:	605a      	str	r2, [r3, #4]
    ba42:	609a      	str	r2, [r3, #8]
    ba44:	60da      	str	r2, [r3, #12]
    ba46:	611a      	str	r2, [r3, #16]
    ba48:	615a      	str	r2, [r3, #20]
    ba4a:	7c3b      	ldrb	r3, [r7, #16]
    ba4c:	f043 0310 	orr.w	r3, r3, #16
    ba50:	743b      	strb	r3, [r7, #16]
    ba52:	7c3b      	ldrb	r3, [r7, #16]
    ba54:	f043 0320 	orr.w	r3, r3, #32
    ba58:	743b      	strb	r3, [r7, #16]
    ba5a:	7c3b      	ldrb	r3, [r7, #16]
    ba5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba60:	743b      	strb	r3, [r7, #16]
    ba62:	7c7b      	ldrb	r3, [r7, #17]
    ba64:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ba68:	747b      	strb	r3, [r7, #17]
    ba6a:	2302      	movs	r3, #2
    ba6c:	753b      	strb	r3, [r7, #20]
    ba6e:	687b      	ldr	r3, [r7, #4]
    ba70:	61bb      	str	r3, [r7, #24]
    ba72:	683b      	ldr	r3, [r7, #0]
    ba74:	61fb      	str	r3, [r7, #28]
    ba76:	68bb      	ldr	r3, [r7, #8]
    ba78:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba7c:	7b1b      	ldrb	r3, [r3, #12]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	d001      	beq.n	ba86 <n25q256a_write+0x66>
    ba82:	2206      	movs	r2, #6
    ba84:	e000      	b.n	ba88 <n25q256a_write+0x68>
    ba86:	2200      	movs	r2, #0
    ba88:	7c3b      	ldrb	r3, [r7, #16]
    ba8a:	f362 0302 	bfi	r3, r2, #0, #3
    ba8e:	743b      	strb	r3, [r7, #16]
	while (length) {
    ba90:	e035      	b.n	bafe <n25q256a_write+0xde>
		cmd.address = address;
    ba92:	687b      	ldr	r3, [r7, #4]
    ba94:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ba96:	683b      	ldr	r3, [r7, #0]
    ba98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ba9c:	d802      	bhi.n	baa4 <n25q256a_write+0x84>
			cmd.buf_len = length;
    ba9e:	683b      	ldr	r3, [r7, #0]
    baa0:	61fb      	str	r3, [r7, #28]
    baa2:	e002      	b.n	baaa <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    baa4:	f44f 7380 	mov.w	r3, #256	; 0x100
    baa8:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    baaa:	7c3b      	ldrb	r3, [r7, #16]
    baac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bab0:	b2db      	uxtb	r3, r3
    bab2:	2201      	movs	r2, #1
    bab4:	4619      	mov	r1, r3
    bab6:	68f8      	ldr	r0, [r7, #12]
    bab8:	4b19      	ldr	r3, [pc, #100]	; (bb20 <n25q256a_write+0x100>)
    baba:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    babc:	f107 0310 	add.w	r3, r7, #16
    bac0:	4619      	mov	r1, r3
    bac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bac4:	4b17      	ldr	r3, [pc, #92]	; (bb24 <n25q256a_write+0x104>)
    bac6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bac8:	bf00      	nop
    baca:	7c3b      	ldrb	r3, [r7, #16]
    bacc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bad0:	b2db      	uxtb	r3, r3
    bad2:	2270      	movs	r2, #112	; 0x70
    bad4:	4619      	mov	r1, r3
    bad6:	68f8      	ldr	r0, [r7, #12]
    bad8:	4b13      	ldr	r3, [pc, #76]	; (bb28 <n25q256a_write+0x108>)
    bada:	4798      	blx	r3
    badc:	4603      	mov	r3, r0
    bade:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bae2:	2b00      	cmp	r3, #0
    bae4:	d0f1      	beq.n	baca <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bae6:	6a3a      	ldr	r2, [r7, #32]
    bae8:	69fb      	ldr	r3, [r7, #28]
    baea:	4413      	add	r3, r2
    baec:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    baee:	69fb      	ldr	r3, [r7, #28]
    baf0:	683a      	ldr	r2, [r7, #0]
    baf2:	1ad3      	subs	r3, r2, r3
    baf4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    baf6:	69fb      	ldr	r3, [r7, #28]
    baf8:	687a      	ldr	r2, [r7, #4]
    bafa:	4413      	add	r3, r2
    bafc:	607b      	str	r3, [r7, #4]
	while (length) {
    bafe:	683b      	ldr	r3, [r7, #0]
    bb00:	2b00      	cmp	r3, #0
    bb02:	d1c6      	bne.n	ba92 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb06:	7b5b      	ldrb	r3, [r3, #13]
    bb08:	2b00      	cmp	r3, #0
    bb0a:	d003      	beq.n	bb14 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bb0c:	2101      	movs	r1, #1
    bb0e:	68f8      	ldr	r0, [r7, #12]
    bb10:	4b06      	ldr	r3, [pc, #24]	; (bb2c <n25q256a_write+0x10c>)
    bb12:	4798      	blx	r3
	}
	return ERR_NONE;
    bb14:	2300      	movs	r3, #0
}
    bb16:	4618      	mov	r0, r3
    bb18:	3730      	adds	r7, #48	; 0x30
    bb1a:	46bd      	mov	sp, r7
    bb1c:	bd80      	pop	{r7, pc}
    bb1e:	bf00      	nop
    bb20:	0000b791 	.word	0x0000b791
    bb24:	000024f1 	.word	0x000024f1
    bb28:	0000b655 	.word	0x0000b655
    bb2c:	0000b589 	.word	0x0000b589

0000bb30 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bb30:	b580      	push	{r7, lr}
    bb32:	b090      	sub	sp, #64	; 0x40
    bb34:	af00      	add	r7, sp, #0
    bb36:	60f8      	str	r0, [r7, #12]
    bb38:	60b9      	str	r1, [r7, #8]
    bb3a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bb3c:	68fb      	ldr	r3, [r7, #12]
    bb3e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bb40:	68fb      	ldr	r3, [r7, #12]
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bb46:	f107 0314 	add.w	r3, r7, #20
    bb4a:	2200      	movs	r2, #0
    bb4c:	601a      	str	r2, [r3, #0]
    bb4e:	605a      	str	r2, [r3, #4]
    bb50:	609a      	str	r2, [r3, #8]
    bb52:	60da      	str	r2, [r3, #12]
    bb54:	611a      	str	r2, [r3, #16]
    bb56:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb5a:	7b1b      	ldrb	r3, [r3, #12]
    bb5c:	2b00      	cmp	r3, #0
    bb5e:	d001      	beq.n	bb64 <n25q256a_erase+0x34>
    bb60:	2206      	movs	r2, #6
    bb62:	e000      	b.n	bb66 <n25q256a_erase+0x36>
    bb64:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bb66:	7d3b      	ldrb	r3, [r7, #20]
    bb68:	f362 0302 	bfi	r3, r2, #0, #3
    bb6c:	753b      	strb	r3, [r7, #20]
    bb6e:	7d3b      	ldrb	r3, [r7, #20]
    bb70:	f043 0310 	orr.w	r3, r3, #16
    bb74:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bb76:	687b      	ldr	r3, [r7, #4]
    bb78:	4a56      	ldr	r2, [pc, #344]	; (bcd4 <n25q256a_erase+0x1a4>)
    bb7a:	4293      	cmp	r3, r2
    bb7c:	bf94      	ite	ls
    bb7e:	2301      	movls	r3, #1
    bb80:	2300      	movhi	r3, #0
    bb82:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bb84:	7d3b      	ldrb	r3, [r7, #20]
    bb86:	f362 1345 	bfi	r3, r2, #5, #1
    bb8a:	753b      	strb	r3, [r7, #20]
    bb8c:	7d7b      	ldrb	r3, [r7, #21]
    bb8e:	2202      	movs	r2, #2
    bb90:	f362 1305 	bfi	r3, r2, #4, #2
    bb94:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bb96:	68bb      	ldr	r3, [r7, #8]
    bb98:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bb9e:	2300      	movs	r3, #0
    bba0:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bba8:	2b00      	cmp	r3, #0
    bbaa:	d104      	bne.n	bbb6 <n25q256a_erase+0x86>
    bbac:	68bb      	ldr	r3, [r7, #8]
    bbae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d002      	beq.n	bbbc <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bbb6:	f06f 030c 	mvn.w	r3, #12
    bbba:	e087      	b.n	bccc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bbbc:	687b      	ldr	r3, [r7, #4]
    bbbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bbc2:	d368      	bcc.n	bc96 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bbc4:	23c7      	movs	r3, #199	; 0xc7
    bbc6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bbc8:	7d3b      	ldrb	r3, [r7, #20]
    bbca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbce:	b2db      	uxtb	r3, r3
    bbd0:	2201      	movs	r2, #1
    bbd2:	4619      	mov	r1, r3
    bbd4:	68f8      	ldr	r0, [r7, #12]
    bbd6:	4b40      	ldr	r3, [pc, #256]	; (bcd8 <n25q256a_erase+0x1a8>)
    bbd8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bbda:	f107 0314 	add.w	r3, r7, #20
    bbde:	4619      	mov	r1, r3
    bbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbe2:	4b3e      	ldr	r3, [pc, #248]	; (bcdc <n25q256a_erase+0x1ac>)
    bbe4:	4798      	blx	r3
    bbe6:	e059      	b.n	bc9c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbea:	b29b      	uxth	r3, r3
    bbec:	2b00      	cmp	r3, #0
    bbee:	d11f      	bne.n	bc30 <n25q256a_erase+0x100>
    bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bbf6:	d31b      	bcc.n	bc30 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbfa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bbfc:	23d8      	movs	r3, #216	; 0xd8
    bbfe:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bc00:	7d3b      	ldrb	r3, [r7, #20]
    bc02:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc06:	b2db      	uxtb	r3, r3
    bc08:	2201      	movs	r2, #1
    bc0a:	4619      	mov	r1, r3
    bc0c:	68f8      	ldr	r0, [r7, #12]
    bc0e:	4b32      	ldr	r3, [pc, #200]	; (bcd8 <n25q256a_erase+0x1a8>)
    bc10:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bc12:	f107 0314 	add.w	r3, r7, #20
    bc16:	4619      	mov	r1, r3
    bc18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bc1a:	4b30      	ldr	r3, [pc, #192]	; (bcdc <n25q256a_erase+0x1ac>)
    bc1c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc20:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc28:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bc2c:	63bb      	str	r3, [r7, #56]	; 0x38
    bc2e:	e023      	b.n	bc78 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bc36:	d31b      	bcc.n	bc70 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc3a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bc3c:	2320      	movs	r3, #32
    bc3e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bc40:	7d3b      	ldrb	r3, [r7, #20]
    bc42:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc46:	b2db      	uxtb	r3, r3
    bc48:	2201      	movs	r2, #1
    bc4a:	4619      	mov	r1, r3
    bc4c:	68f8      	ldr	r0, [r7, #12]
    bc4e:	4b22      	ldr	r3, [pc, #136]	; (bcd8 <n25q256a_erase+0x1a8>)
    bc50:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bc52:	f107 0314 	add.w	r3, r7, #20
    bc56:	4619      	mov	r1, r3
    bc58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bc5a:	4b20      	ldr	r3, [pc, #128]	; (bcdc <n25q256a_erase+0x1ac>)
    bc5c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bc64:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc68:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bc6c:	63bb      	str	r3, [r7, #56]	; 0x38
    bc6e:	e003      	b.n	bc78 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bc70:	f06f 030c 	mvn.w	r3, #12
    bc74:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bc76:	e011      	b.n	bc9c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc78:	bf00      	nop
    bc7a:	7d3b      	ldrb	r3, [r7, #20]
    bc7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc80:	b2db      	uxtb	r3, r3
    bc82:	2270      	movs	r2, #112	; 0x70
    bc84:	4619      	mov	r1, r3
    bc86:	68f8      	ldr	r0, [r7, #12]
    bc88:	4b15      	ldr	r3, [pc, #84]	; (bce0 <n25q256a_erase+0x1b0>)
    bc8a:	4798      	blx	r3
    bc8c:	4603      	mov	r3, r0
    bc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc92:	2b00      	cmp	r3, #0
    bc94:	d0f1      	beq.n	bc7a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d1a5      	bne.n	bbe8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc9c:	bf00      	nop
    bc9e:	7d3b      	ldrb	r3, [r7, #20]
    bca0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bca4:	b2db      	uxtb	r3, r3
    bca6:	2270      	movs	r2, #112	; 0x70
    bca8:	4619      	mov	r1, r3
    bcaa:	68f8      	ldr	r0, [r7, #12]
    bcac:	4b0c      	ldr	r3, [pc, #48]	; (bce0 <n25q256a_erase+0x1b0>)
    bcae:	4798      	blx	r3
    bcb0:	4603      	mov	r3, r0
    bcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	d0f1      	beq.n	bc9e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bcbc:	7b5b      	ldrb	r3, [r3, #13]
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d003      	beq.n	bcca <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bcc2:	2101      	movs	r1, #1
    bcc4:	68f8      	ldr	r0, [r7, #12]
    bcc6:	4b07      	ldr	r3, [pc, #28]	; (bce4 <n25q256a_erase+0x1b4>)
    bcc8:	4798      	blx	r3
	}
	return rc;
    bcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bccc:	4618      	mov	r0, r3
    bcce:	3740      	adds	r7, #64	; 0x40
    bcd0:	46bd      	mov	sp, r7
    bcd2:	bd80      	pop	{r7, pc}
    bcd4:	001fffff 	.word	0x001fffff
    bcd8:	0000b791 	.word	0x0000b791
    bcdc:	000024f1 	.word	0x000024f1
    bce0:	0000b655 	.word	0x0000b655
    bce4:	0000b589 	.word	0x0000b589

0000bce8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bce8:	b590      	push	{r4, r7, lr}
    bcea:	b085      	sub	sp, #20
    bcec:	af00      	add	r7, sp, #0
    bcee:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bcf0:	687b      	ldr	r3, [r7, #4]
    bcf2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bcf4:	68fb      	ldr	r3, [r7, #12]
    bcf6:	7b1b      	ldrb	r3, [r3, #12]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d001      	beq.n	bd00 <n25q256a_enable_xip+0x18>
    bcfc:	2306      	movs	r3, #6
    bcfe:	e000      	b.n	bd02 <n25q256a_enable_xip+0x1a>
    bd00:	2300      	movs	r3, #0
    bd02:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bd04:	68fb      	ldr	r3, [r7, #12]
    bd06:	7b5b      	ldrb	r3, [r3, #13]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d129      	bne.n	bd60 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bd0c:	7afb      	ldrb	r3, [r7, #11]
    bd0e:	2285      	movs	r2, #133	; 0x85
    bd10:	4619      	mov	r1, r3
    bd12:	6878      	ldr	r0, [r7, #4]
    bd14:	4b15      	ldr	r3, [pc, #84]	; (bd6c <n25q256a_enable_xip+0x84>)
    bd16:	4798      	blx	r3
    bd18:	4603      	mov	r3, r0
    bd1a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bd1c:	7abb      	ldrb	r3, [r7, #10]
    bd1e:	f003 0308 	and.w	r3, r3, #8
    bd22:	2b00      	cmp	r3, #0
    bd24:	d015      	beq.n	bd52 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bd26:	7abb      	ldrb	r3, [r7, #10]
    bd28:	f023 0308 	bic.w	r3, r3, #8
    bd2c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bd2e:	7abb      	ldrb	r3, [r7, #10]
    bd30:	7af9      	ldrb	r1, [r7, #11]
    bd32:	2281      	movs	r2, #129	; 0x81
    bd34:	6878      	ldr	r0, [r7, #4]
    bd36:	4c0e      	ldr	r4, [pc, #56]	; (bd70 <n25q256a_enable_xip+0x88>)
    bd38:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bd3a:	bf00      	nop
    bd3c:	7afb      	ldrb	r3, [r7, #11]
    bd3e:	2270      	movs	r2, #112	; 0x70
    bd40:	4619      	mov	r1, r3
    bd42:	6878      	ldr	r0, [r7, #4]
    bd44:	4b09      	ldr	r3, [pc, #36]	; (bd6c <n25q256a_enable_xip+0x84>)
    bd46:	4798      	blx	r3
    bd48:	4603      	mov	r3, r0
    bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d0f4      	beq.n	bd3c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bd52:	68fb      	ldr	r3, [r7, #12]
    bd54:	2201      	movs	r2, #1
    bd56:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bd58:	2101      	movs	r1, #1
    bd5a:	6878      	ldr	r0, [r7, #4]
    bd5c:	4b05      	ldr	r3, [pc, #20]	; (bd74 <n25q256a_enable_xip+0x8c>)
    bd5e:	4798      	blx	r3
	}
	return ERR_NONE;
    bd60:	2300      	movs	r3, #0
}
    bd62:	4618      	mov	r0, r3
    bd64:	3714      	adds	r7, #20
    bd66:	46bd      	mov	sp, r7
    bd68:	bd90      	pop	{r4, r7, pc}
    bd6a:	bf00      	nop
    bd6c:	0000b655 	.word	0x0000b655
    bd70:	0000b6f1 	.word	0x0000b6f1
    bd74:	0000b589 	.word	0x0000b589

0000bd78 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bd78:	b580      	push	{r7, lr}
    bd7a:	b086      	sub	sp, #24
    bd7c:	af00      	add	r7, sp, #0
    bd7e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd80:	687b      	ldr	r3, [r7, #4]
    bd82:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd84:	687b      	ldr	r3, [r7, #4]
    bd86:	681b      	ldr	r3, [r3, #0]
    bd88:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd8a:	697b      	ldr	r3, [r7, #20]
    bd8c:	7b1b      	ldrb	r3, [r3, #12]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d001      	beq.n	bd96 <n25q256a_disable_xip+0x1e>
    bd92:	2306      	movs	r3, #6
    bd94:	e000      	b.n	bd98 <n25q256a_disable_xip+0x20>
    bd96:	2300      	movs	r3, #0
    bd98:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bd9a:	2100      	movs	r1, #0
    bd9c:	6878      	ldr	r0, [r7, #4]
    bd9e:	4b15      	ldr	r3, [pc, #84]	; (bdf4 <n25q256a_disable_xip+0x7c>)
    bda0:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bda2:	7bfb      	ldrb	r3, [r7, #15]
    bda4:	2285      	movs	r2, #133	; 0x85
    bda6:	4619      	mov	r1, r3
    bda8:	6878      	ldr	r0, [r7, #4]
    bdaa:	4b13      	ldr	r3, [pc, #76]	; (bdf8 <n25q256a_disable_xip+0x80>)
    bdac:	4798      	blx	r3
    bdae:	4603      	mov	r3, r0
    bdb0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bdb2:	7bbb      	ldrb	r3, [r7, #14]
    bdb4:	f003 0308 	and.w	r3, r3, #8
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d113      	bne.n	bde4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bdbc:	697b      	ldr	r3, [r7, #20]
    bdbe:	689b      	ldr	r3, [r3, #8]
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d00f      	beq.n	bde4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bdc4:	693b      	ldr	r3, [r7, #16]
    bdc6:	681b      	ldr	r3, [r3, #0]
    bdc8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bdca:	6938      	ldr	r0, [r7, #16]
    bdcc:	4b0b      	ldr	r3, [pc, #44]	; (bdfc <n25q256a_disable_xip+0x84>)
    bdce:	4798      	blx	r3
			n25q->pin_exit_xip();
    bdd0:	697b      	ldr	r3, [r7, #20]
    bdd2:	689b      	ldr	r3, [r3, #8]
    bdd4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bdd6:	68b9      	ldr	r1, [r7, #8]
    bdd8:	6938      	ldr	r0, [r7, #16]
    bdda:	4b09      	ldr	r3, [pc, #36]	; (be00 <n25q256a_disable_xip+0x88>)
    bddc:	4798      	blx	r3
			qspi_sync_enable(descr);
    bdde:	6938      	ldr	r0, [r7, #16]
    bde0:	4b08      	ldr	r3, [pc, #32]	; (be04 <n25q256a_disable_xip+0x8c>)
    bde2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bde4:	697b      	ldr	r3, [r7, #20]
    bde6:	2200      	movs	r2, #0
    bde8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bdea:	2300      	movs	r3, #0
}
    bdec:	4618      	mov	r0, r3
    bdee:	3718      	adds	r7, #24
    bdf0:	46bd      	mov	sp, r7
    bdf2:	bd80      	pop	{r7, pc}
    bdf4:	0000b589 	.word	0x0000b589
    bdf8:	0000b655 	.word	0x0000b655
    bdfc:	000024b5 	.word	0x000024b5
    be00:	0000242d 	.word	0x0000242d
    be04:	00002479 	.word	0x00002479

0000be08 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    be08:	b480      	push	{r7}
    be0a:	b085      	sub	sp, #20
    be0c:	af00      	add	r7, sp, #0
    be0e:	60f8      	str	r0, [r7, #12]
    be10:	60b9      	str	r1, [r7, #8]
    be12:	607a      	str	r2, [r7, #4]
	me->io        = io;
    be14:	68fb      	ldr	r3, [r7, #12]
    be16:	68ba      	ldr	r2, [r7, #8]
    be18:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    be1a:	68fb      	ldr	r3, [r7, #12]
    be1c:	687a      	ldr	r2, [r7, #4]
    be1e:	605a      	str	r2, [r3, #4]

	return me;
    be20:	68fb      	ldr	r3, [r7, #12]
}
    be22:	4618      	mov	r0, r3
    be24:	3714      	adds	r7, #20
    be26:	46bd      	mov	sp, r7
    be28:	f85d 7b04 	ldr.w	r7, [sp], #4
    be2c:	4770      	bx	lr

0000be2e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    be2e:	b480      	push	{r7}
    be30:	b083      	sub	sp, #12
    be32:	af00      	add	r7, sp, #0
    be34:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    be36:	687b      	ldr	r3, [r7, #4]
    be38:	781b      	ldrb	r3, [r3, #0]
    be3a:	b29a      	uxth	r2, r3
    be3c:	687b      	ldr	r3, [r7, #4]
    be3e:	3301      	adds	r3, #1
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	b29b      	uxth	r3, r3
    be44:	021b      	lsls	r3, r3, #8
    be46:	b29b      	uxth	r3, r3
    be48:	4413      	add	r3, r2
    be4a:	b29b      	uxth	r3, r3
}
    be4c:	4618      	mov	r0, r3
    be4e:	370c      	adds	r7, #12
    be50:	46bd      	mov	sp, r7
    be52:	f85d 7b04 	ldr.w	r7, [sp], #4
    be56:	4770      	bx	lr

0000be58 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    be58:	b480      	push	{r7}
    be5a:	b083      	sub	sp, #12
    be5c:	af00      	add	r7, sp, #0
    be5e:	6078      	str	r0, [r7, #4]
	return desc[0];
    be60:	687b      	ldr	r3, [r7, #4]
    be62:	781b      	ldrb	r3, [r3, #0]
}
    be64:	4618      	mov	r0, r3
    be66:	370c      	adds	r7, #12
    be68:	46bd      	mov	sp, r7
    be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be6e:	4770      	bx	lr

0000be70 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    be70:	b580      	push	{r7, lr}
    be72:	b082      	sub	sp, #8
    be74:	af00      	add	r7, sp, #0
    be76:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    be78:	6878      	ldr	r0, [r7, #4]
    be7a:	4b05      	ldr	r3, [pc, #20]	; (be90 <usb_desc_next+0x20>)
    be7c:	4798      	blx	r3
    be7e:	4603      	mov	r3, r0
    be80:	461a      	mov	r2, r3
    be82:	687b      	ldr	r3, [r7, #4]
    be84:	4413      	add	r3, r2
}
    be86:	4618      	mov	r0, r3
    be88:	3708      	adds	r7, #8
    be8a:	46bd      	mov	sp, r7
    be8c:	bd80      	pop	{r7, pc}
    be8e:	bf00      	nop
    be90:	0000be59 	.word	0x0000be59

0000be94 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be94:	b580      	push	{r7, lr}
    be96:	b08c      	sub	sp, #48	; 0x30
    be98:	af00      	add	r7, sp, #0
    be9a:	6078      	str	r0, [r7, #4]
    be9c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    be9e:	687b      	ldr	r3, [r7, #4]
    bea0:	689b      	ldr	r3, [r3, #8]
    bea2:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    bea4:	683b      	ldr	r3, [r7, #0]
    bea6:	681b      	ldr	r3, [r3, #0]
    bea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    beaa:	2300      	movs	r3, #0
    beac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    beb0:	e08f      	b.n	bfd2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    beb4:	2b00      	cmp	r3, #0
    beb6:	d102      	bne.n	bebe <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    beb8:	f06f 0309 	mvn.w	r3, #9
    bebc:	e092      	b.n	bfe4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bec0:	789b      	ldrb	r3, [r3, #2]
    bec2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bec6:	795b      	ldrb	r3, [r3, #5]
    bec8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    beca:	7c7b      	ldrb	r3, [r7, #17]
    becc:	2b02      	cmp	r3, #2
    bece:	d002      	beq.n	bed6 <cdcdf_acm_enable+0x42>
    bed0:	7c7b      	ldrb	r3, [r7, #17]
    bed2:	2b0a      	cmp	r3, #10
    bed4:	d121      	bne.n	bf1a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beda:	6a3a      	ldr	r2, [r7, #32]
    bedc:	5cd2      	ldrb	r2, [r2, r3]
    bede:	7bbb      	ldrb	r3, [r7, #14]
    bee0:	429a      	cmp	r2, r3
    bee2:	d102      	bne.n	beea <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    bee4:	f06f 0311 	mvn.w	r3, #17
    bee8:	e07c      	b.n	bfe4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    beea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beee:	6a3a      	ldr	r2, [r7, #32]
    bef0:	5cd3      	ldrb	r3, [r2, r3]
    bef2:	2bff      	cmp	r3, #255	; 0xff
    bef4:	d002      	beq.n	befc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    bef6:	f06f 031b 	mvn.w	r3, #27
    befa:	e073      	b.n	bfe4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    befc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf00:	7bb9      	ldrb	r1, [r7, #14]
    bf02:	6a3a      	ldr	r2, [r7, #32]
    bf04:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bf06:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	685b      	ldr	r3, [r3, #4]
    bf0c:	2205      	movs	r2, #5
    bf0e:	4619      	mov	r1, r3
    bf10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bf12:	4b36      	ldr	r3, [pc, #216]	; (bfec <cdcdf_acm_enable+0x158>)
    bf14:	4798      	blx	r3
    bf16:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bf18:	e047      	b.n	bfaa <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bf1a:	f06f 0309 	mvn.w	r3, #9
    bf1e:	e061      	b.n	bfe4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf22:	789b      	ldrb	r3, [r3, #2]
    bf24:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf28:	78db      	ldrb	r3, [r3, #3]
    bf2a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf2e:	3304      	adds	r3, #4
    bf30:	4618      	mov	r0, r3
    bf32:	4b2f      	ldr	r3, [pc, #188]	; (bff0 <cdcdf_acm_enable+0x15c>)
    bf34:	4798      	blx	r3
    bf36:	4603      	mov	r3, r0
    bf38:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bf3a:	7ebb      	ldrb	r3, [r7, #26]
    bf3c:	7ef9      	ldrb	r1, [r7, #27]
    bf3e:	8bba      	ldrh	r2, [r7, #28]
    bf40:	4618      	mov	r0, r3
    bf42:	4b2c      	ldr	r3, [pc, #176]	; (bff4 <cdcdf_acm_enable+0x160>)
    bf44:	4798      	blx	r3
    bf46:	4603      	mov	r3, r0
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d002      	beq.n	bf52 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bf4c:	f06f 0313 	mvn.w	r3, #19
    bf50:	e048      	b.n	bfe4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bf52:	7ebb      	ldrb	r3, [r7, #26]
    bf54:	b25b      	sxtb	r3, r3
    bf56:	2b00      	cmp	r3, #0
    bf58:	da0f      	bge.n	bf7a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bf5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf5e:	7eb9      	ldrb	r1, [r7, #26]
    bf60:	6a3a      	ldr	r2, [r7, #32]
    bf62:	4413      	add	r3, r2
    bf64:	460a      	mov	r2, r1
    bf66:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bf68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf6c:	6a3a      	ldr	r2, [r7, #32]
    bf6e:	4413      	add	r3, r2
    bf70:	789b      	ldrb	r3, [r3, #2]
    bf72:	4618      	mov	r0, r3
    bf74:	4b20      	ldr	r3, [pc, #128]	; (bff8 <cdcdf_acm_enable+0x164>)
    bf76:	4798      	blx	r3
    bf78:	e007      	b.n	bf8a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bf7a:	7eba      	ldrb	r2, [r7, #26]
    bf7c:	6a3b      	ldr	r3, [r7, #32]
    bf7e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bf80:	6a3b      	ldr	r3, [r7, #32]
    bf82:	791b      	ldrb	r3, [r3, #4]
    bf84:	4618      	mov	r0, r3
    bf86:	4b1c      	ldr	r3, [pc, #112]	; (bff8 <cdcdf_acm_enable+0x164>)
    bf88:	4798      	blx	r3
			}
			desc->sod = ep;
    bf8a:	683b      	ldr	r3, [r7, #0]
    bf8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bf8e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bf90:	683b      	ldr	r3, [r7, #0]
    bf92:	681b      	ldr	r3, [r3, #0]
    bf94:	4618      	mov	r0, r3
    bf96:	4b19      	ldr	r3, [pc, #100]	; (bffc <cdcdf_acm_enable+0x168>)
    bf98:	4798      	blx	r3
    bf9a:	4602      	mov	r2, r0
    bf9c:	683b      	ldr	r3, [r7, #0]
    bf9e:	685b      	ldr	r3, [r3, #4]
    bfa0:	4619      	mov	r1, r3
    bfa2:	4610      	mov	r0, r2
    bfa4:	4b16      	ldr	r3, [pc, #88]	; (c000 <cdcdf_acm_enable+0x16c>)
    bfa6:	4798      	blx	r3
    bfa8:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfac:	2b00      	cmp	r3, #0
    bfae:	d1b7      	bne.n	bf20 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bfb0:	683b      	ldr	r3, [r7, #0]
    bfb2:	681b      	ldr	r3, [r3, #0]
    bfb4:	4618      	mov	r0, r3
    bfb6:	4b11      	ldr	r3, [pc, #68]	; (bffc <cdcdf_acm_enable+0x168>)
    bfb8:	4798      	blx	r3
    bfba:	683b      	ldr	r3, [r7, #0]
    bfbc:	685b      	ldr	r3, [r3, #4]
    bfbe:	2204      	movs	r2, #4
    bfc0:	4619      	mov	r1, r3
    bfc2:	4b0a      	ldr	r3, [pc, #40]	; (bfec <cdcdf_acm_enable+0x158>)
    bfc4:	4798      	blx	r3
    bfc6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bfcc:	3301      	adds	r3, #1
    bfce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bfd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bfd6:	2b01      	cmp	r3, #1
    bfd8:	f67f af6b 	bls.w	beb2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bfdc:	4b09      	ldr	r3, [pc, #36]	; (c004 <cdcdf_acm_enable+0x170>)
    bfde:	2201      	movs	r2, #1
    bfe0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bfe2:	2300      	movs	r3, #0
}
    bfe4:	4618      	mov	r0, r3
    bfe6:	3730      	adds	r7, #48	; 0x30
    bfe8:	46bd      	mov	sp, r7
    bfea:	bd80      	pop	{r7, pc}
    bfec:	0000d255 	.word	0x0000d255
    bff0:	0000be2f 	.word	0x0000be2f
    bff4:	000030a5 	.word	0x000030a5
    bff8:	00003191 	.word	0x00003191
    bffc:	0000be71 	.word	0x0000be71
    c000:	0000d2b1 	.word	0x0000d2b1
    c004:	20000c94 	.word	0x20000c94

0000c008 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c008:	b580      	push	{r7, lr}
    c00a:	b088      	sub	sp, #32
    c00c:	af00      	add	r7, sp, #0
    c00e:	6078      	str	r0, [r7, #4]
    c010:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c012:	687b      	ldr	r3, [r7, #4]
    c014:	689b      	ldr	r3, [r3, #8]
    c016:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c018:	683b      	ldr	r3, [r7, #0]
    c01a:	2b00      	cmp	r3, #0
    c01c:	d00c      	beq.n	c038 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c01e:	683b      	ldr	r3, [r7, #0]
    c020:	681b      	ldr	r3, [r3, #0]
    c022:	795b      	ldrb	r3, [r3, #5]
    c024:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c026:	7c7b      	ldrb	r3, [r7, #17]
    c028:	2b02      	cmp	r3, #2
    c02a:	d005      	beq.n	c038 <cdcdf_acm_disable+0x30>
    c02c:	7c7b      	ldrb	r3, [r7, #17]
    c02e:	2b0a      	cmp	r3, #10
    c030:	d002      	beq.n	c038 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c032:	f06f 0309 	mvn.w	r3, #9
    c036:	e035      	b.n	c0a4 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c038:	2300      	movs	r3, #0
    c03a:	77fb      	strb	r3, [r7, #31]
    c03c:	e01f      	b.n	c07e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c03e:	7ffb      	ldrb	r3, [r7, #31]
    c040:	69ba      	ldr	r2, [r7, #24]
    c042:	5cd3      	ldrb	r3, [r2, r3]
    c044:	2bff      	cmp	r3, #255	; 0xff
    c046:	d016      	beq.n	c076 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c048:	7ffb      	ldrb	r3, [r7, #31]
    c04a:	69ba      	ldr	r2, [r7, #24]
    c04c:	21ff      	movs	r1, #255	; 0xff
    c04e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c050:	7ffb      	ldrb	r3, [r7, #31]
    c052:	69ba      	ldr	r2, [r7, #24]
    c054:	4413      	add	r3, r2
    c056:	789b      	ldrb	r3, [r3, #2]
    c058:	2bff      	cmp	r3, #255	; 0xff
    c05a:	d00d      	beq.n	c078 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c05c:	7ffb      	ldrb	r3, [r7, #31]
    c05e:	69ba      	ldr	r2, [r7, #24]
    c060:	4413      	add	r3, r2
    c062:	789b      	ldrb	r3, [r3, #2]
    c064:	4618      	mov	r0, r3
    c066:	4b11      	ldr	r3, [pc, #68]	; (c0ac <cdcdf_acm_disable+0xa4>)
    c068:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c06a:	7ffb      	ldrb	r3, [r7, #31]
    c06c:	69ba      	ldr	r2, [r7, #24]
    c06e:	4413      	add	r3, r2
    c070:	22ff      	movs	r2, #255	; 0xff
    c072:	709a      	strb	r2, [r3, #2]
    c074:	e000      	b.n	c078 <cdcdf_acm_disable+0x70>
			continue;
    c076:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c078:	7ffb      	ldrb	r3, [r7, #31]
    c07a:	3301      	adds	r3, #1
    c07c:	77fb      	strb	r3, [r7, #31]
    c07e:	7ffb      	ldrb	r3, [r7, #31]
    c080:	2b01      	cmp	r3, #1
    c082:	d9dc      	bls.n	c03e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c084:	69bb      	ldr	r3, [r7, #24]
    c086:	791b      	ldrb	r3, [r3, #4]
    c088:	2bff      	cmp	r3, #255	; 0xff
    c08a:	d007      	beq.n	c09c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c08c:	69bb      	ldr	r3, [r7, #24]
    c08e:	791b      	ldrb	r3, [r3, #4]
    c090:	4618      	mov	r0, r3
    c092:	4b06      	ldr	r3, [pc, #24]	; (c0ac <cdcdf_acm_disable+0xa4>)
    c094:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c096:	69bb      	ldr	r3, [r7, #24]
    c098:	22ff      	movs	r2, #255	; 0xff
    c09a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c09c:	4b04      	ldr	r3, [pc, #16]	; (c0b0 <cdcdf_acm_disable+0xa8>)
    c09e:	2200      	movs	r2, #0
    c0a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c0a2:	2300      	movs	r3, #0
}
    c0a4:	4618      	mov	r0, r3
    c0a6:	3720      	adds	r7, #32
    c0a8:	46bd      	mov	sp, r7
    c0aa:	bd80      	pop	{r7, pc}
    c0ac:	00003141 	.word	0x00003141
    c0b0:	20000c94 	.word	0x20000c94

0000c0b4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c0b4:	b580      	push	{r7, lr}
    c0b6:	b084      	sub	sp, #16
    c0b8:	af00      	add	r7, sp, #0
    c0ba:	60f8      	str	r0, [r7, #12]
    c0bc:	460b      	mov	r3, r1
    c0be:	607a      	str	r2, [r7, #4]
    c0c0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c0c2:	7afb      	ldrb	r3, [r7, #11]
    c0c4:	2b01      	cmp	r3, #1
    c0c6:	d009      	beq.n	c0dc <cdcdf_acm_ctrl+0x28>
    c0c8:	2b02      	cmp	r3, #2
    c0ca:	d00d      	beq.n	c0e8 <cdcdf_acm_ctrl+0x34>
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d10e      	bne.n	c0ee <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c0d0:	6879      	ldr	r1, [r7, #4]
    c0d2:	68f8      	ldr	r0, [r7, #12]
    c0d4:	4b09      	ldr	r3, [pc, #36]	; (c0fc <cdcdf_acm_ctrl+0x48>)
    c0d6:	4798      	blx	r3
    c0d8:	4603      	mov	r3, r0
    c0da:	e00a      	b.n	c0f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c0dc:	6879      	ldr	r1, [r7, #4]
    c0de:	68f8      	ldr	r0, [r7, #12]
    c0e0:	4b07      	ldr	r3, [pc, #28]	; (c100 <cdcdf_acm_ctrl+0x4c>)
    c0e2:	4798      	blx	r3
    c0e4:	4603      	mov	r3, r0
    c0e6:	e004      	b.n	c0f2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c0e8:	f06f 031a 	mvn.w	r3, #26
    c0ec:	e001      	b.n	c0f2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c0ee:	f06f 030c 	mvn.w	r3, #12
	}
}
    c0f2:	4618      	mov	r0, r3
    c0f4:	3710      	adds	r7, #16
    c0f6:	46bd      	mov	sp, r7
    c0f8:	bd80      	pop	{r7, pc}
    c0fa:	bf00      	nop
    c0fc:	0000be95 	.word	0x0000be95
    c100:	0000c009 	.word	0x0000c009

0000c104 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c104:	b590      	push	{r4, r7, lr}
    c106:	b087      	sub	sp, #28
    c108:	af00      	add	r7, sp, #0
    c10a:	4603      	mov	r3, r0
    c10c:	6039      	str	r1, [r7, #0]
    c10e:	71fb      	strb	r3, [r7, #7]
    c110:	4613      	mov	r3, r2
    c112:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c114:	683b      	ldr	r3, [r7, #0]
    c116:	799a      	ldrb	r2, [r3, #6]
    c118:	79db      	ldrb	r3, [r3, #7]
    c11a:	021b      	lsls	r3, r3, #8
    c11c:	4313      	orrs	r3, r2
    c11e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c120:	4b2b      	ldr	r3, [pc, #172]	; (c1d0 <cdcdf_acm_set_req+0xcc>)
    c122:	4798      	blx	r3
    c124:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c126:	683b      	ldr	r3, [r7, #0]
    c128:	785b      	ldrb	r3, [r3, #1]
    c12a:	2b20      	cmp	r3, #32
    c12c:	d002      	beq.n	c134 <cdcdf_acm_set_req+0x30>
    c12e:	2b22      	cmp	r3, #34	; 0x22
    c130:	d034      	beq.n	c19c <cdcdf_acm_set_req+0x98>
    c132:	e046      	b.n	c1c2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c134:	8afb      	ldrh	r3, [r7, #22]
    c136:	2b07      	cmp	r3, #7
    c138:	d002      	beq.n	c140 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c13a:	f04f 33ff 	mov.w	r3, #4294967295
    c13e:	e042      	b.n	c1c6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c140:	79bb      	ldrb	r3, [r7, #6]
    c142:	2b00      	cmp	r3, #0
    c144:	d107      	bne.n	c156 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c146:	8afa      	ldrh	r2, [r7, #22]
    c148:	79f8      	ldrb	r0, [r7, #7]
    c14a:	2300      	movs	r3, #0
    c14c:	6939      	ldr	r1, [r7, #16]
    c14e:	4c21      	ldr	r4, [pc, #132]	; (c1d4 <cdcdf_acm_set_req+0xd0>)
    c150:	47a0      	blx	r4
    c152:	4603      	mov	r3, r0
    c154:	e037      	b.n	c1c6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c156:	693a      	ldr	r2, [r7, #16]
    c158:	f107 0308 	add.w	r3, r7, #8
    c15c:	6810      	ldr	r0, [r2, #0]
    c15e:	6018      	str	r0, [r3, #0]
    c160:	8891      	ldrh	r1, [r2, #4]
    c162:	7992      	ldrb	r2, [r2, #6]
    c164:	8099      	strh	r1, [r3, #4]
    c166:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c168:	4b1b      	ldr	r3, [pc, #108]	; (c1d8 <cdcdf_acm_set_req+0xd4>)
    c16a:	681b      	ldr	r3, [r3, #0]
    c16c:	2b00      	cmp	r3, #0
    c16e:	d008      	beq.n	c182 <cdcdf_acm_set_req+0x7e>
    c170:	4b19      	ldr	r3, [pc, #100]	; (c1d8 <cdcdf_acm_set_req+0xd4>)
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	f107 0208 	add.w	r2, r7, #8
    c178:	4610      	mov	r0, r2
    c17a:	4798      	blx	r3
    c17c:	4603      	mov	r3, r0
    c17e:	2b00      	cmp	r3, #0
    c180:	d00a      	beq.n	c198 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c182:	4b16      	ldr	r3, [pc, #88]	; (c1dc <cdcdf_acm_set_req+0xd8>)
    c184:	f107 0208 	add.w	r2, r7, #8
    c188:	e892 0003 	ldmia.w	r2, {r0, r1}
    c18c:	6018      	str	r0, [r3, #0]
    c18e:	3304      	adds	r3, #4
    c190:	8019      	strh	r1, [r3, #0]
    c192:	3302      	adds	r3, #2
    c194:	0c0a      	lsrs	r2, r1, #16
    c196:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c198:	2300      	movs	r3, #0
    c19a:	e014      	b.n	c1c6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c19c:	2300      	movs	r3, #0
    c19e:	2200      	movs	r2, #0
    c1a0:	2100      	movs	r1, #0
    c1a2:	2000      	movs	r0, #0
    c1a4:	4c0b      	ldr	r4, [pc, #44]	; (c1d4 <cdcdf_acm_set_req+0xd0>)
    c1a6:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c1a8:	4b0d      	ldr	r3, [pc, #52]	; (c1e0 <cdcdf_acm_set_req+0xdc>)
    c1aa:	681b      	ldr	r3, [r3, #0]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d006      	beq.n	c1be <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c1b0:	4b0b      	ldr	r3, [pc, #44]	; (c1e0 <cdcdf_acm_set_req+0xdc>)
    c1b2:	681b      	ldr	r3, [r3, #0]
    c1b4:	683a      	ldr	r2, [r7, #0]
    c1b6:	8852      	ldrh	r2, [r2, #2]
    c1b8:	b292      	uxth	r2, r2
    c1ba:	4610      	mov	r0, r2
    c1bc:	4798      	blx	r3
		}
		return ERR_NONE;
    c1be:	2300      	movs	r3, #0
    c1c0:	e001      	b.n	c1c6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c1c2:	f06f 030c 	mvn.w	r3, #12
	}
}
    c1c6:	4618      	mov	r0, r3
    c1c8:	371c      	adds	r7, #28
    c1ca:	46bd      	mov	sp, r7
    c1cc:	bd90      	pop	{r4, r7, pc}
    c1ce:	bf00      	nop
    c1d0:	0000d151 	.word	0x0000d151
    c1d4:	0000cfc5 	.word	0x0000cfc5
    c1d8:	20000ca8 	.word	0x20000ca8
    c1dc:	20000c9c 	.word	0x20000c9c
    c1e0:	20000ca4 	.word	0x20000ca4

0000c1e4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c1e4:	b590      	push	{r4, r7, lr}
    c1e6:	b085      	sub	sp, #20
    c1e8:	af00      	add	r7, sp, #0
    c1ea:	4603      	mov	r3, r0
    c1ec:	6039      	str	r1, [r7, #0]
    c1ee:	71fb      	strb	r3, [r7, #7]
    c1f0:	4613      	mov	r3, r2
    c1f2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c1f4:	683b      	ldr	r3, [r7, #0]
    c1f6:	799a      	ldrb	r2, [r3, #6]
    c1f8:	79db      	ldrb	r3, [r3, #7]
    c1fa:	021b      	lsls	r3, r3, #8
    c1fc:	4313      	orrs	r3, r2
    c1fe:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c200:	79bb      	ldrb	r3, [r7, #6]
    c202:	2b01      	cmp	r3, #1
    c204:	d101      	bne.n	c20a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c206:	2300      	movs	r3, #0
    c208:	e013      	b.n	c232 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c20a:	683b      	ldr	r3, [r7, #0]
    c20c:	785b      	ldrb	r3, [r3, #1]
    c20e:	2b21      	cmp	r3, #33	; 0x21
    c210:	d10d      	bne.n	c22e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c212:	89fb      	ldrh	r3, [r7, #14]
    c214:	2b07      	cmp	r3, #7
    c216:	d002      	beq.n	c21e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c218:	f04f 33ff 	mov.w	r3, #4294967295
    c21c:	e009      	b.n	c232 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c21e:	89fa      	ldrh	r2, [r7, #14]
    c220:	79f8      	ldrb	r0, [r7, #7]
    c222:	2300      	movs	r3, #0
    c224:	4905      	ldr	r1, [pc, #20]	; (c23c <cdcdf_acm_get_req+0x58>)
    c226:	4c06      	ldr	r4, [pc, #24]	; (c240 <cdcdf_acm_get_req+0x5c>)
    c228:	47a0      	blx	r4
    c22a:	4603      	mov	r3, r0
    c22c:	e001      	b.n	c232 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c22e:	f06f 030c 	mvn.w	r3, #12
	}
}
    c232:	4618      	mov	r0, r3
    c234:	3714      	adds	r7, #20
    c236:	46bd      	mov	sp, r7
    c238:	bd90      	pop	{r4, r7, pc}
    c23a:	bf00      	nop
    c23c:	20000c9c 	.word	0x20000c9c
    c240:	0000cfc5 	.word	0x0000cfc5

0000c244 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c244:	b580      	push	{r7, lr}
    c246:	b082      	sub	sp, #8
    c248:	af00      	add	r7, sp, #0
    c24a:	4603      	mov	r3, r0
    c24c:	6039      	str	r1, [r7, #0]
    c24e:	71fb      	strb	r3, [r7, #7]
    c250:	4613      	mov	r3, r2
    c252:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c254:	683b      	ldr	r3, [r7, #0]
    c256:	781b      	ldrb	r3, [r3, #0]
    c258:	095b      	lsrs	r3, r3, #5
    c25a:	b2db      	uxtb	r3, r3
    c25c:	f003 0303 	and.w	r3, r3, #3
    c260:	2b01      	cmp	r3, #1
    c262:	d002      	beq.n	c26a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c264:	f06f 0309 	mvn.w	r3, #9
    c268:	e026      	b.n	c2b8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	889b      	ldrh	r3, [r3, #4]
    c26e:	b29a      	uxth	r2, r3
    c270:	4b13      	ldr	r3, [pc, #76]	; (c2c0 <cdcdf_acm_req+0x7c>)
    c272:	781b      	ldrb	r3, [r3, #0]
    c274:	b29b      	uxth	r3, r3
    c276:	429a      	cmp	r2, r3
    c278:	d007      	beq.n	c28a <cdcdf_acm_req+0x46>
    c27a:	683b      	ldr	r3, [r7, #0]
    c27c:	889b      	ldrh	r3, [r3, #4]
    c27e:	b29a      	uxth	r2, r3
    c280:	4b0f      	ldr	r3, [pc, #60]	; (c2c0 <cdcdf_acm_req+0x7c>)
    c282:	785b      	ldrb	r3, [r3, #1]
    c284:	b29b      	uxth	r3, r3
    c286:	429a      	cmp	r2, r3
    c288:	d114      	bne.n	c2b4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c28a:	683b      	ldr	r3, [r7, #0]
    c28c:	781b      	ldrb	r3, [r3, #0]
    c28e:	b25b      	sxtb	r3, r3
    c290:	2b00      	cmp	r3, #0
    c292:	da07      	bge.n	c2a4 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c294:	79ba      	ldrb	r2, [r7, #6]
    c296:	79fb      	ldrb	r3, [r7, #7]
    c298:	6839      	ldr	r1, [r7, #0]
    c29a:	4618      	mov	r0, r3
    c29c:	4b09      	ldr	r3, [pc, #36]	; (c2c4 <cdcdf_acm_req+0x80>)
    c29e:	4798      	blx	r3
    c2a0:	4603      	mov	r3, r0
    c2a2:	e009      	b.n	c2b8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c2a4:	79ba      	ldrb	r2, [r7, #6]
    c2a6:	79fb      	ldrb	r3, [r7, #7]
    c2a8:	6839      	ldr	r1, [r7, #0]
    c2aa:	4618      	mov	r0, r3
    c2ac:	4b06      	ldr	r3, [pc, #24]	; (c2c8 <cdcdf_acm_req+0x84>)
    c2ae:	4798      	blx	r3
    c2b0:	4603      	mov	r3, r0
    c2b2:	e001      	b.n	c2b8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c2b4:	f06f 0309 	mvn.w	r3, #9
	}
}
    c2b8:	4618      	mov	r0, r3
    c2ba:	3708      	adds	r7, #8
    c2bc:	46bd      	mov	sp, r7
    c2be:	bd80      	pop	{r7, pc}
    c2c0:	20000c94 	.word	0x20000c94
    c2c4:	0000c1e5 	.word	0x0000c1e5
    c2c8:	0000c105 	.word	0x0000c105

0000c2cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c2cc:	b580      	push	{r7, lr}
    c2ce:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c2d0:	4b0b      	ldr	r3, [pc, #44]	; (c300 <cdcdf_acm_init+0x34>)
    c2d2:	4798      	blx	r3
    c2d4:	4603      	mov	r3, r0
    c2d6:	2b01      	cmp	r3, #1
    c2d8:	d902      	bls.n	c2e0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c2da:	f06f 0310 	mvn.w	r3, #16
    c2de:	e00d      	b.n	c2fc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c2e0:	4b08      	ldr	r3, [pc, #32]	; (c304 <cdcdf_acm_init+0x38>)
    c2e2:	4a09      	ldr	r2, [pc, #36]	; (c308 <cdcdf_acm_init+0x3c>)
    c2e4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c2e6:	4b07      	ldr	r3, [pc, #28]	; (c304 <cdcdf_acm_init+0x38>)
    c2e8:	4a08      	ldr	r2, [pc, #32]	; (c30c <cdcdf_acm_init+0x40>)
    c2ea:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c2ec:	4805      	ldr	r0, [pc, #20]	; (c304 <cdcdf_acm_init+0x38>)
    c2ee:	4b08      	ldr	r3, [pc, #32]	; (c310 <cdcdf_acm_init+0x44>)
    c2f0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c2f2:	4908      	ldr	r1, [pc, #32]	; (c314 <cdcdf_acm_init+0x48>)
    c2f4:	2001      	movs	r0, #1
    c2f6:	4b08      	ldr	r3, [pc, #32]	; (c318 <cdcdf_acm_init+0x4c>)
    c2f8:	4798      	blx	r3
	return ERR_NONE;
    c2fa:	2300      	movs	r3, #0
}
    c2fc:	4618      	mov	r0, r3
    c2fe:	bd80      	pop	{r7, pc}
    c300:	0000d169 	.word	0x0000d169
    c304:	20000c88 	.word	0x20000c88
    c308:	0000c0b5 	.word	0x0000c0b5
    c30c:	20000c94 	.word	0x20000c94
    c310:	0000d0d1 	.word	0x0000d0d1
    c314:	200001d8 	.word	0x200001d8
    c318:	0000d001 	.word	0x0000d001

0000c31c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c31c:	b590      	push	{r4, r7, lr}
    c31e:	b083      	sub	sp, #12
    c320:	af00      	add	r7, sp, #0
    c322:	6078      	str	r0, [r7, #4]
    c324:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c326:	4b0b      	ldr	r3, [pc, #44]	; (c354 <cdcdf_acm_read+0x38>)
    c328:	4798      	blx	r3
    c32a:	4603      	mov	r3, r0
    c32c:	f083 0301 	eor.w	r3, r3, #1
    c330:	b2db      	uxtb	r3, r3
    c332:	2b00      	cmp	r3, #0
    c334:	d002      	beq.n	c33c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c336:	f06f 0310 	mvn.w	r3, #16
    c33a:	e007      	b.n	c34c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c33c:	4b06      	ldr	r3, [pc, #24]	; (c358 <cdcdf_acm_read+0x3c>)
    c33e:	7918      	ldrb	r0, [r3, #4]
    c340:	2300      	movs	r3, #0
    c342:	683a      	ldr	r2, [r7, #0]
    c344:	6879      	ldr	r1, [r7, #4]
    c346:	4c05      	ldr	r4, [pc, #20]	; (c35c <cdcdf_acm_read+0x40>)
    c348:	47a0      	blx	r4
    c34a:	4603      	mov	r3, r0
}
    c34c:	4618      	mov	r0, r3
    c34e:	370c      	adds	r7, #12
    c350:	46bd      	mov	sp, r7
    c352:	bd90      	pop	{r4, r7, pc}
    c354:	0000c441 	.word	0x0000c441
    c358:	20000c94 	.word	0x20000c94
    c35c:	0000cfc5 	.word	0x0000cfc5

0000c360 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c360:	b590      	push	{r4, r7, lr}
    c362:	b083      	sub	sp, #12
    c364:	af00      	add	r7, sp, #0
    c366:	6078      	str	r0, [r7, #4]
    c368:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c36a:	4b0b      	ldr	r3, [pc, #44]	; (c398 <cdcdf_acm_write+0x38>)
    c36c:	4798      	blx	r3
    c36e:	4603      	mov	r3, r0
    c370:	f083 0301 	eor.w	r3, r3, #1
    c374:	b2db      	uxtb	r3, r3
    c376:	2b00      	cmp	r3, #0
    c378:	d002      	beq.n	c380 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c37a:	f06f 0310 	mvn.w	r3, #16
    c37e:	e007      	b.n	c390 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c380:	4b06      	ldr	r3, [pc, #24]	; (c39c <cdcdf_acm_write+0x3c>)
    c382:	78d8      	ldrb	r0, [r3, #3]
    c384:	2301      	movs	r3, #1
    c386:	683a      	ldr	r2, [r7, #0]
    c388:	6879      	ldr	r1, [r7, #4]
    c38a:	4c05      	ldr	r4, [pc, #20]	; (c3a0 <cdcdf_acm_write+0x40>)
    c38c:	47a0      	blx	r4
    c38e:	4603      	mov	r3, r0
}
    c390:	4618      	mov	r0, r3
    c392:	370c      	adds	r7, #12
    c394:	46bd      	mov	sp, r7
    c396:	bd90      	pop	{r4, r7, pc}
    c398:	0000c441 	.word	0x0000c441
    c39c:	20000c94 	.word	0x20000c94
    c3a0:	0000cfc5 	.word	0x0000cfc5

0000c3a4 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c3a4:	b580      	push	{r7, lr}
    c3a6:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c3a8:	4b05      	ldr	r3, [pc, #20]	; (c3c0 <cdcdf_acm_stop_xfer+0x1c>)
    c3aa:	78db      	ldrb	r3, [r3, #3]
    c3ac:	4618      	mov	r0, r3
    c3ae:	4b05      	ldr	r3, [pc, #20]	; (c3c4 <cdcdf_acm_stop_xfer+0x20>)
    c3b0:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c3b2:	4b03      	ldr	r3, [pc, #12]	; (c3c0 <cdcdf_acm_stop_xfer+0x1c>)
    c3b4:	791b      	ldrb	r3, [r3, #4]
    c3b6:	4618      	mov	r0, r3
    c3b8:	4b02      	ldr	r3, [pc, #8]	; (c3c4 <cdcdf_acm_stop_xfer+0x20>)
    c3ba:	4798      	blx	r3
}
    c3bc:	bf00      	nop
    c3be:	bd80      	pop	{r7, pc}
    c3c0:	20000c94 	.word	0x20000c94
    c3c4:	00003369 	.word	0x00003369

0000c3c8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c3c8:	b580      	push	{r7, lr}
    c3ca:	b082      	sub	sp, #8
    c3cc:	af00      	add	r7, sp, #0
    c3ce:	4603      	mov	r3, r0
    c3d0:	6039      	str	r1, [r7, #0]
    c3d2:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c3d4:	79fb      	ldrb	r3, [r7, #7]
    c3d6:	2b03      	cmp	r3, #3
    c3d8:	d822      	bhi.n	c420 <cdcdf_acm_register_callback+0x58>
    c3da:	a201      	add	r2, pc, #4	; (adr r2, c3e0 <cdcdf_acm_register_callback+0x18>)
    c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c3e0:	0000c3f1 	.word	0x0000c3f1
    c3e4:	0000c401 	.word	0x0000c401
    c3e8:	0000c411 	.word	0x0000c411
    c3ec:	0000c419 	.word	0x0000c419
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c3f0:	4b0f      	ldr	r3, [pc, #60]	; (c430 <cdcdf_acm_register_callback+0x68>)
    c3f2:	791b      	ldrb	r3, [r3, #4]
    c3f4:	683a      	ldr	r2, [r7, #0]
    c3f6:	2102      	movs	r1, #2
    c3f8:	4618      	mov	r0, r3
    c3fa:	4b0e      	ldr	r3, [pc, #56]	; (c434 <cdcdf_acm_register_callback+0x6c>)
    c3fc:	4798      	blx	r3
		break;
    c3fe:	e012      	b.n	c426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c400:	4b0b      	ldr	r3, [pc, #44]	; (c430 <cdcdf_acm_register_callback+0x68>)
    c402:	78db      	ldrb	r3, [r3, #3]
    c404:	683a      	ldr	r2, [r7, #0]
    c406:	2102      	movs	r1, #2
    c408:	4618      	mov	r0, r3
    c40a:	4b0a      	ldr	r3, [pc, #40]	; (c434 <cdcdf_acm_register_callback+0x6c>)
    c40c:	4798      	blx	r3
		break;
    c40e:	e00a      	b.n	c426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c410:	4a09      	ldr	r2, [pc, #36]	; (c438 <cdcdf_acm_register_callback+0x70>)
    c412:	683b      	ldr	r3, [r7, #0]
    c414:	6013      	str	r3, [r2, #0]
		break;
    c416:	e006      	b.n	c426 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c418:	4a08      	ldr	r2, [pc, #32]	; (c43c <cdcdf_acm_register_callback+0x74>)
    c41a:	683b      	ldr	r3, [r7, #0]
    c41c:	6013      	str	r3, [r2, #0]
		break;
    c41e:	e002      	b.n	c426 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c420:	f06f 030c 	mvn.w	r3, #12
    c424:	e000      	b.n	c428 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c426:	2300      	movs	r3, #0
}
    c428:	4618      	mov	r0, r3
    c42a:	3708      	adds	r7, #8
    c42c:	46bd      	mov	sp, r7
    c42e:	bd80      	pop	{r7, pc}
    c430:	20000c94 	.word	0x20000c94
    c434:	00003495 	.word	0x00003495
    c438:	20000ca8 	.word	0x20000ca8
    c43c:	20000ca4 	.word	0x20000ca4

0000c440 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c440:	b480      	push	{r7}
    c442:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c444:	4b03      	ldr	r3, [pc, #12]	; (c454 <cdcdf_acm_is_enabled+0x14>)
    c446:	795b      	ldrb	r3, [r3, #5]
}
    c448:	4618      	mov	r0, r3
    c44a:	46bd      	mov	sp, r7
    c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c450:	4770      	bx	lr
    c452:	bf00      	nop
    c454:	20000c94 	.word	0x20000c94

0000c458 <usb_get_u16>:
{
    c458:	b480      	push	{r7}
    c45a:	b083      	sub	sp, #12
    c45c:	af00      	add	r7, sp, #0
    c45e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c460:	687b      	ldr	r3, [r7, #4]
    c462:	781b      	ldrb	r3, [r3, #0]
    c464:	b29a      	uxth	r2, r3
    c466:	687b      	ldr	r3, [r7, #4]
    c468:	3301      	adds	r3, #1
    c46a:	781b      	ldrb	r3, [r3, #0]
    c46c:	b29b      	uxth	r3, r3
    c46e:	021b      	lsls	r3, r3, #8
    c470:	b29b      	uxth	r3, r3
    c472:	4413      	add	r3, r2
    c474:	b29b      	uxth	r3, r3
}
    c476:	4618      	mov	r0, r3
    c478:	370c      	adds	r7, #12
    c47a:	46bd      	mov	sp, r7
    c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c480:	4770      	bx	lr

0000c482 <usb_desc_len>:
{
    c482:	b480      	push	{r7}
    c484:	b083      	sub	sp, #12
    c486:	af00      	add	r7, sp, #0
    c488:	6078      	str	r0, [r7, #4]
	return desc[0];
    c48a:	687b      	ldr	r3, [r7, #4]
    c48c:	781b      	ldrb	r3, [r3, #0]
}
    c48e:	4618      	mov	r0, r3
    c490:	370c      	adds	r7, #12
    c492:	46bd      	mov	sp, r7
    c494:	f85d 7b04 	ldr.w	r7, [sp], #4
    c498:	4770      	bx	lr
	...

0000c49c <usb_desc_next>:
{
    c49c:	b580      	push	{r7, lr}
    c49e:	b082      	sub	sp, #8
    c4a0:	af00      	add	r7, sp, #0
    c4a2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c4a4:	6878      	ldr	r0, [r7, #4]
    c4a6:	4b05      	ldr	r3, [pc, #20]	; (c4bc <usb_desc_next+0x20>)
    c4a8:	4798      	blx	r3
    c4aa:	4603      	mov	r3, r0
    c4ac:	461a      	mov	r2, r3
    c4ae:	687b      	ldr	r3, [r7, #4]
    c4b0:	4413      	add	r3, r2
}
    c4b2:	4618      	mov	r0, r3
    c4b4:	3708      	adds	r7, #8
    c4b6:	46bd      	mov	sp, r7
    c4b8:	bd80      	pop	{r7, pc}
    c4ba:	bf00      	nop
    c4bc:	0000c483 	.word	0x0000c483

0000c4c0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c4c0:	b580      	push	{r7, lr}
    c4c2:	b082      	sub	sp, #8
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	3302      	adds	r3, #2
    c4cc:	4618      	mov	r0, r3
    c4ce:	4b03      	ldr	r3, [pc, #12]	; (c4dc <usb_cfg_desc_total_len+0x1c>)
    c4d0:	4798      	blx	r3
    c4d2:	4603      	mov	r3, r0
}
    c4d4:	4618      	mov	r0, r3
    c4d6:	3708      	adds	r7, #8
    c4d8:	46bd      	mov	sp, r7
    c4da:	bd80      	pop	{r7, pc}
    c4dc:	0000c459 	.word	0x0000c459

0000c4e0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c4e0:	b590      	push	{r4, r7, lr}
    c4e2:	b085      	sub	sp, #20
    c4e4:	af00      	add	r7, sp, #0
    c4e6:	4603      	mov	r3, r0
    c4e8:	6039      	str	r1, [r7, #0]
    c4ea:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c4ec:	2300      	movs	r3, #0
    c4ee:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c4f0:	683b      	ldr	r3, [r7, #0]
    c4f2:	799a      	ldrb	r2, [r3, #6]
    c4f4:	79db      	ldrb	r3, [r3, #7]
    c4f6:	021b      	lsls	r3, r3, #8
    c4f8:	4313      	orrs	r3, r2
    c4fa:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c4fc:	897b      	ldrh	r3, [r7, #10]
    c4fe:	2b12      	cmp	r3, #18
    c500:	d901      	bls.n	c506 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c502:	2312      	movs	r3, #18
    c504:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c506:	68fb      	ldr	r3, [r7, #12]
    c508:	2b00      	cmp	r3, #0
    c50a:	d10a      	bne.n	c522 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c50c:	4b0f      	ldr	r3, [pc, #60]	; (c54c <usbdc_get_dev_desc+0x6c>)
    c50e:	681b      	ldr	r3, [r3, #0]
    c510:	6818      	ldr	r0, [r3, #0]
    c512:	4b0e      	ldr	r3, [pc, #56]	; (c54c <usbdc_get_dev_desc+0x6c>)
    c514:	681b      	ldr	r3, [r3, #0]
    c516:	685b      	ldr	r3, [r3, #4]
    c518:	2201      	movs	r2, #1
    c51a:	4619      	mov	r1, r3
    c51c:	4b0c      	ldr	r3, [pc, #48]	; (c550 <usbdc_get_dev_desc+0x70>)
    c51e:	4798      	blx	r3
    c520:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c522:	68fb      	ldr	r3, [r7, #12]
    c524:	2b00      	cmp	r3, #0
    c526:	d101      	bne.n	c52c <usbdc_get_dev_desc+0x4c>
		return false;
    c528:	2300      	movs	r3, #0
    c52a:	e00b      	b.n	c544 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c52c:	897a      	ldrh	r2, [r7, #10]
    c52e:	79f8      	ldrb	r0, [r7, #7]
    c530:	2300      	movs	r3, #0
    c532:	68f9      	ldr	r1, [r7, #12]
    c534:	4c07      	ldr	r4, [pc, #28]	; (c554 <usbdc_get_dev_desc+0x74>)
    c536:	47a0      	blx	r4
    c538:	4603      	mov	r3, r0
    c53a:	2b00      	cmp	r3, #0
    c53c:	d001      	beq.n	c542 <usbdc_get_dev_desc+0x62>
		return false;
    c53e:	2300      	movs	r3, #0
    c540:	e000      	b.n	c544 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c542:	2301      	movs	r3, #1
}
    c544:	4618      	mov	r0, r3
    c546:	3714      	adds	r7, #20
    c548:	46bd      	mov	sp, r7
    c54a:	bd90      	pop	{r4, r7, pc}
    c54c:	20000cac 	.word	0x20000cac
    c550:	0000d255 	.word	0x0000d255
    c554:	0000cfc5 	.word	0x0000cfc5

0000c558 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c558:	b590      	push	{r4, r7, lr}
    c55a:	b087      	sub	sp, #28
    c55c:	af00      	add	r7, sp, #0
    c55e:	4603      	mov	r3, r0
    c560:	6039      	str	r1, [r7, #0]
    c562:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c564:	2300      	movs	r3, #0
    c566:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c568:	683b      	ldr	r3, [r7, #0]
    c56a:	799a      	ldrb	r2, [r3, #6]
    c56c:	79db      	ldrb	r3, [r3, #7]
    c56e:	021b      	lsls	r3, r3, #8
    c570:	4313      	orrs	r3, r2
    c572:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c574:	683b      	ldr	r3, [r7, #0]
    c576:	885b      	ldrh	r3, [r3, #2]
    c578:	b29b      	uxth	r3, r3
    c57a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c57c:	8a7a      	ldrh	r2, [r7, #18]
    c57e:	4b1e      	ldr	r3, [pc, #120]	; (c5f8 <usbdc_get_cfg_desc+0xa0>)
    c580:	7f1b      	ldrb	r3, [r3, #28]
    c582:	3b01      	subs	r3, #1
    c584:	4013      	ands	r3, r2
    c586:	2b00      	cmp	r3, #0
    c588:	bf0c      	ite	eq
    c58a:	2301      	moveq	r3, #1
    c58c:	2300      	movne	r3, #0
    c58e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c590:	697b      	ldr	r3, [r7, #20]
    c592:	2b00      	cmp	r3, #0
    c594:	d10c      	bne.n	c5b0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c596:	4b18      	ldr	r3, [pc, #96]	; (c5f8 <usbdc_get_cfg_desc+0xa0>)
    c598:	681b      	ldr	r3, [r3, #0]
    c59a:	6818      	ldr	r0, [r3, #0]
    c59c:	4b16      	ldr	r3, [pc, #88]	; (c5f8 <usbdc_get_cfg_desc+0xa0>)
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	6859      	ldr	r1, [r3, #4]
    c5a2:	7c3b      	ldrb	r3, [r7, #16]
    c5a4:	3301      	adds	r3, #1
    c5a6:	b2db      	uxtb	r3, r3
    c5a8:	461a      	mov	r2, r3
    c5aa:	4b14      	ldr	r3, [pc, #80]	; (c5fc <usbdc_get_cfg_desc+0xa4>)
    c5ac:	4798      	blx	r3
    c5ae:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c5b0:	697b      	ldr	r3, [r7, #20]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d101      	bne.n	c5ba <usbdc_get_cfg_desc+0x62>
		return false;
    c5b6:	2300      	movs	r3, #0
    c5b8:	e019      	b.n	c5ee <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c5ba:	6978      	ldr	r0, [r7, #20]
    c5bc:	4b10      	ldr	r3, [pc, #64]	; (c600 <usbdc_get_cfg_desc+0xa8>)
    c5be:	4798      	blx	r3
    c5c0:	4603      	mov	r3, r0
    c5c2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c5c4:	8a7a      	ldrh	r2, [r7, #18]
    c5c6:	89fb      	ldrh	r3, [r7, #14]
    c5c8:	429a      	cmp	r2, r3
    c5ca:	d802      	bhi.n	c5d2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c5cc:	2300      	movs	r3, #0
    c5ce:	747b      	strb	r3, [r7, #17]
    c5d0:	e001      	b.n	c5d6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c5d2:	89fb      	ldrh	r3, [r7, #14]
    c5d4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c5d6:	8a7a      	ldrh	r2, [r7, #18]
    c5d8:	7c7b      	ldrb	r3, [r7, #17]
    c5da:	79f8      	ldrb	r0, [r7, #7]
    c5dc:	6979      	ldr	r1, [r7, #20]
    c5de:	4c09      	ldr	r4, [pc, #36]	; (c604 <usbdc_get_cfg_desc+0xac>)
    c5e0:	47a0      	blx	r4
    c5e2:	4603      	mov	r3, r0
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d001      	beq.n	c5ec <usbdc_get_cfg_desc+0x94>
		return false;
    c5e8:	2300      	movs	r3, #0
    c5ea:	e000      	b.n	c5ee <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c5ec:	2301      	movs	r3, #1
}
    c5ee:	4618      	mov	r0, r3
    c5f0:	371c      	adds	r7, #28
    c5f2:	46bd      	mov	sp, r7
    c5f4:	bd90      	pop	{r4, r7, pc}
    c5f6:	bf00      	nop
    c5f8:	20000cac 	.word	0x20000cac
    c5fc:	0000d315 	.word	0x0000d315
    c600:	0000c4c1 	.word	0x0000c4c1
    c604:	0000cfc5 	.word	0x0000cfc5

0000c608 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c608:	b590      	push	{r4, r7, lr}
    c60a:	b085      	sub	sp, #20
    c60c:	af00      	add	r7, sp, #0
    c60e:	4603      	mov	r3, r0
    c610:	6039      	str	r1, [r7, #0]
    c612:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c614:	683b      	ldr	r3, [r7, #0]
    c616:	799a      	ldrb	r2, [r3, #6]
    c618:	79db      	ldrb	r3, [r3, #7]
    c61a:	021b      	lsls	r3, r3, #8
    c61c:	4313      	orrs	r3, r2
    c61e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c620:	683b      	ldr	r3, [r7, #0]
    c622:	885b      	ldrh	r3, [r3, #2]
    c624:	b29b      	uxth	r3, r3
    c626:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c628:	89fa      	ldrh	r2, [r7, #14]
    c62a:	4b1a      	ldr	r3, [pc, #104]	; (c694 <usbdc_get_str_desc+0x8c>)
    c62c:	7f1b      	ldrb	r3, [r3, #28]
    c62e:	3b01      	subs	r3, #1
    c630:	4013      	ands	r3, r2
    c632:	2b00      	cmp	r3, #0
    c634:	bf0c      	ite	eq
    c636:	2301      	moveq	r3, #1
    c638:	2300      	movne	r3, #0
    c63a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c63c:	4b15      	ldr	r3, [pc, #84]	; (c694 <usbdc_get_str_desc+0x8c>)
    c63e:	681b      	ldr	r3, [r3, #0]
    c640:	6818      	ldr	r0, [r3, #0]
    c642:	4b14      	ldr	r3, [pc, #80]	; (c694 <usbdc_get_str_desc+0x8c>)
    c644:	681b      	ldr	r3, [r3, #0]
    c646:	685b      	ldr	r3, [r3, #4]
    c648:	7b3a      	ldrb	r2, [r7, #12]
    c64a:	4619      	mov	r1, r3
    c64c:	4b12      	ldr	r3, [pc, #72]	; (c698 <usbdc_get_str_desc+0x90>)
    c64e:	4798      	blx	r3
    c650:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c652:	68bb      	ldr	r3, [r7, #8]
    c654:	2b00      	cmp	r3, #0
    c656:	d101      	bne.n	c65c <usbdc_get_str_desc+0x54>
		return false;
    c658:	2300      	movs	r3, #0
    c65a:	e017      	b.n	c68c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c65c:	68bb      	ldr	r3, [r7, #8]
    c65e:	781b      	ldrb	r3, [r3, #0]
    c660:	b29b      	uxth	r3, r3
    c662:	89fa      	ldrh	r2, [r7, #14]
    c664:	429a      	cmp	r2, r3
    c666:	d802      	bhi.n	c66e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c668:	2300      	movs	r3, #0
    c66a:	737b      	strb	r3, [r7, #13]
    c66c:	e002      	b.n	c674 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c66e:	68bb      	ldr	r3, [r7, #8]
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c674:	89fa      	ldrh	r2, [r7, #14]
    c676:	7b7b      	ldrb	r3, [r7, #13]
    c678:	79f8      	ldrb	r0, [r7, #7]
    c67a:	68b9      	ldr	r1, [r7, #8]
    c67c:	4c07      	ldr	r4, [pc, #28]	; (c69c <usbdc_get_str_desc+0x94>)
    c67e:	47a0      	blx	r4
    c680:	4603      	mov	r3, r0
    c682:	2b00      	cmp	r3, #0
    c684:	d001      	beq.n	c68a <usbdc_get_str_desc+0x82>
		return false;
    c686:	2300      	movs	r3, #0
    c688:	e000      	b.n	c68c <usbdc_get_str_desc+0x84>
	}
	return true;
    c68a:	2301      	movs	r3, #1
}
    c68c:	4618      	mov	r0, r3
    c68e:	3714      	adds	r7, #20
    c690:	46bd      	mov	sp, r7
    c692:	bd90      	pop	{r4, r7, pc}
    c694:	20000cac 	.word	0x20000cac
    c698:	0000d38d 	.word	0x0000d38d
    c69c:	0000cfc5 	.word	0x0000cfc5

0000c6a0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c6a0:	b580      	push	{r7, lr}
    c6a2:	b084      	sub	sp, #16
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	4603      	mov	r3, r0
    c6a8:	6039      	str	r1, [r7, #0]
    c6aa:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c6ac:	683b      	ldr	r3, [r7, #0]
    c6ae:	885b      	ldrh	r3, [r3, #2]
    c6b0:	b29b      	uxth	r3, r3
    c6b2:	0a1b      	lsrs	r3, r3, #8
    c6b4:	b29b      	uxth	r3, r3
    c6b6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c6b8:	7bfb      	ldrb	r3, [r7, #15]
    c6ba:	2b02      	cmp	r3, #2
    c6bc:	d00d      	beq.n	c6da <usbdc_get_desc_req+0x3a>
    c6be:	2b03      	cmp	r3, #3
    c6c0:	d012      	beq.n	c6e8 <usbdc_get_desc_req+0x48>
    c6c2:	2b01      	cmp	r3, #1
    c6c4:	d002      	beq.n	c6cc <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c6c6:	bf00      	nop
	}
	return false;
    c6c8:	2300      	movs	r3, #0
    c6ca:	e013      	b.n	c6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c6cc:	79fb      	ldrb	r3, [r7, #7]
    c6ce:	6839      	ldr	r1, [r7, #0]
    c6d0:	4618      	mov	r0, r3
    c6d2:	4b0a      	ldr	r3, [pc, #40]	; (c6fc <usbdc_get_desc_req+0x5c>)
    c6d4:	4798      	blx	r3
    c6d6:	4603      	mov	r3, r0
    c6d8:	e00c      	b.n	c6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c6da:	79fb      	ldrb	r3, [r7, #7]
    c6dc:	6839      	ldr	r1, [r7, #0]
    c6de:	4618      	mov	r0, r3
    c6e0:	4b07      	ldr	r3, [pc, #28]	; (c700 <usbdc_get_desc_req+0x60>)
    c6e2:	4798      	blx	r3
    c6e4:	4603      	mov	r3, r0
    c6e6:	e005      	b.n	c6f4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c6e8:	79fb      	ldrb	r3, [r7, #7]
    c6ea:	6839      	ldr	r1, [r7, #0]
    c6ec:	4618      	mov	r0, r3
    c6ee:	4b05      	ldr	r3, [pc, #20]	; (c704 <usbdc_get_desc_req+0x64>)
    c6f0:	4798      	blx	r3
    c6f2:	4603      	mov	r3, r0
}
    c6f4:	4618      	mov	r0, r3
    c6f6:	3710      	adds	r7, #16
    c6f8:	46bd      	mov	sp, r7
    c6fa:	bd80      	pop	{r7, pc}
    c6fc:	0000c4e1 	.word	0x0000c4e1
    c700:	0000c559 	.word	0x0000c559
    c704:	0000c609 	.word	0x0000c609

0000c708 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c708:	b590      	push	{r4, r7, lr}
    c70a:	b085      	sub	sp, #20
    c70c:	af00      	add	r7, sp, #0
    c70e:	4603      	mov	r3, r0
    c710:	6039      	str	r1, [r7, #0]
    c712:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c714:	683b      	ldr	r3, [r7, #0]
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	f003 031f 	and.w	r3, r3, #31
    c71c:	2b00      	cmp	r3, #0
    c71e:	db1b      	blt.n	c758 <usbdc_get_status_req+0x50>
    c720:	2b01      	cmp	r3, #1
    c722:	dd02      	ble.n	c72a <usbdc_get_status_req+0x22>
    c724:	2b02      	cmp	r3, #2
    c726:	d003      	beq.n	c730 <usbdc_get_status_req+0x28>
    c728:	e016      	b.n	c758 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c72a:	2300      	movs	r3, #0
    c72c:	60fb      	str	r3, [r7, #12]
		break;
    c72e:	e015      	b.n	c75c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c730:	683b      	ldr	r3, [r7, #0]
    c732:	889b      	ldrh	r3, [r3, #4]
    c734:	b29b      	uxth	r3, r3
    c736:	b2db      	uxtb	r3, r3
    c738:	2102      	movs	r1, #2
    c73a:	4618      	mov	r0, r3
    c73c:	4b0f      	ldr	r3, [pc, #60]	; (c77c <usbdc_get_status_req+0x74>)
    c73e:	4798      	blx	r3
    c740:	4603      	mov	r3, r0
    c742:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c744:	68fb      	ldr	r3, [r7, #12]
    c746:	2b00      	cmp	r3, #0
    c748:	da01      	bge.n	c74e <usbdc_get_status_req+0x46>
			return false;
    c74a:	2300      	movs	r3, #0
    c74c:	e012      	b.n	c774 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c74e:	68fb      	ldr	r3, [r7, #12]
    c750:	f003 0301 	and.w	r3, r3, #1
    c754:	60fb      	str	r3, [r7, #12]
		break;
    c756:	e001      	b.n	c75c <usbdc_get_status_req+0x54>
	default:
		return false;
    c758:	2300      	movs	r3, #0
    c75a:	e00b      	b.n	c774 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c75c:	4b08      	ldr	r3, [pc, #32]	; (c780 <usbdc_get_status_req+0x78>)
    c75e:	695b      	ldr	r3, [r3, #20]
    c760:	89ba      	ldrh	r2, [r7, #12]
    c762:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c764:	4b06      	ldr	r3, [pc, #24]	; (c780 <usbdc_get_status_req+0x78>)
    c766:	6959      	ldr	r1, [r3, #20]
    c768:	79f8      	ldrb	r0, [r7, #7]
    c76a:	2300      	movs	r3, #0
    c76c:	2202      	movs	r2, #2
    c76e:	4c05      	ldr	r4, [pc, #20]	; (c784 <usbdc_get_status_req+0x7c>)
    c770:	47a0      	blx	r4
	return true;
    c772:	2301      	movs	r3, #1
}
    c774:	4618      	mov	r0, r3
    c776:	3714      	adds	r7, #20
    c778:	46bd      	mov	sp, r7
    c77a:	bd90      	pop	{r4, r7, pc}
    c77c:	00003441 	.word	0x00003441
    c780:	20000cac 	.word	0x20000cac
    c784:	0000cfc5 	.word	0x0000cfc5

0000c788 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c788:	b590      	push	{r4, r7, lr}
    c78a:	b085      	sub	sp, #20
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c790:	4b1f      	ldr	r3, [pc, #124]	; (c810 <usbdc_get_interface+0x88>)
    c792:	691b      	ldr	r3, [r3, #16]
    c794:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c796:	4b1e      	ldr	r3, [pc, #120]	; (c810 <usbdc_get_interface+0x88>)
    c798:	7f5b      	ldrb	r3, [r3, #29]
    c79a:	461a      	mov	r2, r3
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	889b      	ldrh	r3, [r3, #4]
    c7a0:	b29b      	uxth	r3, r3
    c7a2:	fa42 f303 	asr.w	r3, r2, r3
    c7a6:	f003 0301 	and.w	r3, r3, #1
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d128      	bne.n	c800 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c7ae:	4b18      	ldr	r3, [pc, #96]	; (c810 <usbdc_get_interface+0x88>)
    c7b0:	695b      	ldr	r3, [r3, #20]
    c7b2:	2200      	movs	r2, #0
    c7b4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c7b6:	4b16      	ldr	r3, [pc, #88]	; (c810 <usbdc_get_interface+0x88>)
    c7b8:	6959      	ldr	r1, [r3, #20]
    c7ba:	2300      	movs	r3, #0
    c7bc:	2201      	movs	r2, #1
    c7be:	2000      	movs	r0, #0
    c7c0:	4c14      	ldr	r4, [pc, #80]	; (c814 <usbdc_get_interface+0x8c>)
    c7c2:	47a0      	blx	r4
		return true;
    c7c4:	2301      	movs	r3, #1
    c7c6:	e01f      	b.n	c808 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c7c8:	68fb      	ldr	r3, [r7, #12]
    c7ca:	685b      	ldr	r3, [r3, #4]
    c7cc:	687a      	ldr	r2, [r7, #4]
    c7ce:	2102      	movs	r1, #2
    c7d0:	68f8      	ldr	r0, [r7, #12]
    c7d2:	4798      	blx	r3
    c7d4:	60b8      	str	r0, [r7, #8]
    c7d6:	68bb      	ldr	r3, [r7, #8]
    c7d8:	2b00      	cmp	r3, #0
    c7da:	da03      	bge.n	c7e4 <usbdc_get_interface+0x5c>
			func = func->next;
    c7dc:	68fb      	ldr	r3, [r7, #12]
    c7de:	681b      	ldr	r3, [r3, #0]
    c7e0:	60fb      	str	r3, [r7, #12]
    c7e2:	e00d      	b.n	c800 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c7e4:	4b0a      	ldr	r3, [pc, #40]	; (c810 <usbdc_get_interface+0x88>)
    c7e6:	695b      	ldr	r3, [r3, #20]
    c7e8:	68ba      	ldr	r2, [r7, #8]
    c7ea:	b2d2      	uxtb	r2, r2
    c7ec:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c7ee:	4b08      	ldr	r3, [pc, #32]	; (c810 <usbdc_get_interface+0x88>)
    c7f0:	6959      	ldr	r1, [r3, #20]
    c7f2:	2300      	movs	r3, #0
    c7f4:	2201      	movs	r2, #1
    c7f6:	2000      	movs	r0, #0
    c7f8:	4c06      	ldr	r4, [pc, #24]	; (c814 <usbdc_get_interface+0x8c>)
    c7fa:	47a0      	blx	r4
			return true;
    c7fc:	2301      	movs	r3, #1
    c7fe:	e003      	b.n	c808 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c800:	68fb      	ldr	r3, [r7, #12]
    c802:	2b00      	cmp	r3, #0
    c804:	d1e0      	bne.n	c7c8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c806:	2300      	movs	r3, #0
}
    c808:	4618      	mov	r0, r3
    c80a:	3714      	adds	r7, #20
    c80c:	46bd      	mov	sp, r7
    c80e:	bd90      	pop	{r4, r7, pc}
    c810:	20000cac 	.word	0x20000cac
    c814:	0000cfc5 	.word	0x0000cfc5

0000c818 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c818:	b590      	push	{r4, r7, lr}
    c81a:	b083      	sub	sp, #12
    c81c:	af00      	add	r7, sp, #0
    c81e:	4603      	mov	r3, r0
    c820:	6039      	str	r1, [r7, #0]
    c822:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	785b      	ldrb	r3, [r3, #1]
    c828:	2b0a      	cmp	r3, #10
    c82a:	d83a      	bhi.n	c8a2 <usbdc_get_req+0x8a>
    c82c:	a201      	add	r2, pc, #4	; (adr r2, c834 <usbdc_get_req+0x1c>)
    c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c832:	bf00      	nop
    c834:	0000c88b 	.word	0x0000c88b
    c838:	0000c8a3 	.word	0x0000c8a3
    c83c:	0000c8a3 	.word	0x0000c8a3
    c840:	0000c8a3 	.word	0x0000c8a3
    c844:	0000c8a3 	.word	0x0000c8a3
    c848:	0000c8a3 	.word	0x0000c8a3
    c84c:	0000c861 	.word	0x0000c861
    c850:	0000c8a3 	.word	0x0000c8a3
    c854:	0000c86f 	.word	0x0000c86f
    c858:	0000c8a3 	.word	0x0000c8a3
    c85c:	0000c899 	.word	0x0000c899
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c860:	79fb      	ldrb	r3, [r7, #7]
    c862:	6839      	ldr	r1, [r7, #0]
    c864:	4618      	mov	r0, r3
    c866:	4b11      	ldr	r3, [pc, #68]	; (c8ac <usbdc_get_req+0x94>)
    c868:	4798      	blx	r3
    c86a:	4603      	mov	r3, r0
    c86c:	e01a      	b.n	c8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c86e:	4b10      	ldr	r3, [pc, #64]	; (c8b0 <usbdc_get_req+0x98>)
    c870:	695b      	ldr	r3, [r3, #20]
    c872:	4a0f      	ldr	r2, [pc, #60]	; (c8b0 <usbdc_get_req+0x98>)
    c874:	7ed2      	ldrb	r2, [r2, #27]
    c876:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c878:	4b0d      	ldr	r3, [pc, #52]	; (c8b0 <usbdc_get_req+0x98>)
    c87a:	6959      	ldr	r1, [r3, #20]
    c87c:	79f8      	ldrb	r0, [r7, #7]
    c87e:	2300      	movs	r3, #0
    c880:	2201      	movs	r2, #1
    c882:	4c0c      	ldr	r4, [pc, #48]	; (c8b4 <usbdc_get_req+0x9c>)
    c884:	47a0      	blx	r4
		return true;
    c886:	2301      	movs	r3, #1
    c888:	e00c      	b.n	c8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c88a:	79fb      	ldrb	r3, [r7, #7]
    c88c:	6839      	ldr	r1, [r7, #0]
    c88e:	4618      	mov	r0, r3
    c890:	4b09      	ldr	r3, [pc, #36]	; (c8b8 <usbdc_get_req+0xa0>)
    c892:	4798      	blx	r3
    c894:	4603      	mov	r3, r0
    c896:	e005      	b.n	c8a4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c898:	6838      	ldr	r0, [r7, #0]
    c89a:	4b08      	ldr	r3, [pc, #32]	; (c8bc <usbdc_get_req+0xa4>)
    c89c:	4798      	blx	r3
    c89e:	4603      	mov	r3, r0
    c8a0:	e000      	b.n	c8a4 <usbdc_get_req+0x8c>
	default:
		return false;
    c8a2:	2300      	movs	r3, #0
	}
}
    c8a4:	4618      	mov	r0, r3
    c8a6:	370c      	adds	r7, #12
    c8a8:	46bd      	mov	sp, r7
    c8aa:	bd90      	pop	{r4, r7, pc}
    c8ac:	0000c6a1 	.word	0x0000c6a1
    c8b0:	20000cac 	.word	0x20000cac
    c8b4:	0000cfc5 	.word	0x0000cfc5
    c8b8:	0000c709 	.word	0x0000c709
    c8bc:	0000c789 	.word	0x0000c789

0000c8c0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c8c0:	b590      	push	{r4, r7, lr}
    c8c2:	b083      	sub	sp, #12
    c8c4:	af00      	add	r7, sp, #0
    c8c6:	4603      	mov	r3, r0
    c8c8:	6039      	str	r1, [r7, #0]
    c8ca:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c8cc:	683b      	ldr	r3, [r7, #0]
    c8ce:	781b      	ldrb	r3, [r3, #0]
    c8d0:	f003 031f 	and.w	r3, r3, #31
    c8d4:	2b02      	cmp	r3, #2
    c8d6:	d116      	bne.n	c906 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c8d8:	683b      	ldr	r3, [r7, #0]
    c8da:	88db      	ldrh	r3, [r3, #6]
    c8dc:	b29b      	uxth	r3, r3
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d001      	beq.n	c8e6 <usbdc_clear_ftr_req+0x26>
			return false;
    c8e2:	2300      	movs	r3, #0
    c8e4:	e010      	b.n	c908 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c8e6:	683b      	ldr	r3, [r7, #0]
    c8e8:	889b      	ldrh	r3, [r3, #4]
    c8ea:	b29b      	uxth	r3, r3
    c8ec:	b2db      	uxtb	r3, r3
    c8ee:	2100      	movs	r1, #0
    c8f0:	4618      	mov	r0, r3
    c8f2:	4b07      	ldr	r3, [pc, #28]	; (c910 <usbdc_clear_ftr_req+0x50>)
    c8f4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c8f6:	79f8      	ldrb	r0, [r7, #7]
    c8f8:	2301      	movs	r3, #1
    c8fa:	2200      	movs	r2, #0
    c8fc:	2100      	movs	r1, #0
    c8fe:	4c05      	ldr	r4, [pc, #20]	; (c914 <usbdc_clear_ftr_req+0x54>)
    c900:	47a0      	blx	r4
		return true;
    c902:	2301      	movs	r3, #1
    c904:	e000      	b.n	c908 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c906:	2300      	movs	r3, #0
	}
}
    c908:	4618      	mov	r0, r3
    c90a:	370c      	adds	r7, #12
    c90c:	46bd      	mov	sp, r7
    c90e:	bd90      	pop	{r4, r7, pc}
    c910:	00003441 	.word	0x00003441
    c914:	0000cfc5 	.word	0x0000cfc5

0000c918 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c918:	b590      	push	{r4, r7, lr}
    c91a:	b083      	sub	sp, #12
    c91c:	af00      	add	r7, sp, #0
    c91e:	4603      	mov	r3, r0
    c920:	6039      	str	r1, [r7, #0]
    c922:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c924:	683b      	ldr	r3, [r7, #0]
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	f003 031f 	and.w	r3, r3, #31
    c92c:	2b02      	cmp	r3, #2
    c92e:	d116      	bne.n	c95e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c930:	683b      	ldr	r3, [r7, #0]
    c932:	88db      	ldrh	r3, [r3, #6]
    c934:	b29b      	uxth	r3, r3
    c936:	2b00      	cmp	r3, #0
    c938:	d001      	beq.n	c93e <usbdc_set_ftr_req+0x26>
			return false;
    c93a:	2300      	movs	r3, #0
    c93c:	e010      	b.n	c960 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c93e:	683b      	ldr	r3, [r7, #0]
    c940:	889b      	ldrh	r3, [r3, #4]
    c942:	b29b      	uxth	r3, r3
    c944:	b2db      	uxtb	r3, r3
    c946:	2101      	movs	r1, #1
    c948:	4618      	mov	r0, r3
    c94a:	4b07      	ldr	r3, [pc, #28]	; (c968 <usbdc_set_ftr_req+0x50>)
    c94c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c94e:	79f8      	ldrb	r0, [r7, #7]
    c950:	2301      	movs	r3, #1
    c952:	2200      	movs	r2, #0
    c954:	2100      	movs	r1, #0
    c956:	4c05      	ldr	r4, [pc, #20]	; (c96c <usbdc_set_ftr_req+0x54>)
    c958:	47a0      	blx	r4
		return true;
    c95a:	2301      	movs	r3, #1
    c95c:	e000      	b.n	c960 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c95e:	2300      	movs	r3, #0
	}
}
    c960:	4618      	mov	r0, r3
    c962:	370c      	adds	r7, #12
    c964:	46bd      	mov	sp, r7
    c966:	bd90      	pop	{r4, r7, pc}
    c968:	00003441 	.word	0x00003441
    c96c:	0000cfc5 	.word	0x0000cfc5

0000c970 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c970:	b580      	push	{r7, lr}
    c972:	b082      	sub	sp, #8
    c974:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c976:	4b0a      	ldr	r3, [pc, #40]	; (c9a0 <usbdc_unconfig+0x30>)
    c978:	691b      	ldr	r3, [r3, #16]
    c97a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c97c:	e008      	b.n	c990 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c97e:	687b      	ldr	r3, [r7, #4]
    c980:	685b      	ldr	r3, [r3, #4]
    c982:	2200      	movs	r2, #0
    c984:	2101      	movs	r1, #1
    c986:	6878      	ldr	r0, [r7, #4]
    c988:	4798      	blx	r3
		func = func->next;
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	681b      	ldr	r3, [r3, #0]
    c98e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c990:	687b      	ldr	r3, [r7, #4]
    c992:	2b00      	cmp	r3, #0
    c994:	d1f3      	bne.n	c97e <usbdc_unconfig+0xe>
	}
}
    c996:	bf00      	nop
    c998:	3708      	adds	r7, #8
    c99a:	46bd      	mov	sp, r7
    c99c:	bd80      	pop	{r7, pc}
    c99e:	bf00      	nop
    c9a0:	20000cac 	.word	0x20000cac

0000c9a4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c9a4:	b580      	push	{r7, lr}
    c9a6:	b088      	sub	sp, #32
    c9a8:	af00      	add	r7, sp, #0
    c9aa:	4603      	mov	r3, r0
    c9ac:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c9ae:	2300      	movs	r3, #0
    c9b0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c9b2:	23ff      	movs	r3, #255	; 0xff
    c9b4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c9b6:	79fb      	ldrb	r3, [r7, #7]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d103      	bne.n	c9c4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    c9bc:	4b2e      	ldr	r3, [pc, #184]	; (ca78 <usbdc_set_config+0xd4>)
    c9be:	4798      	blx	r3
		return true;
    c9c0:	2301      	movs	r3, #1
    c9c2:	e055      	b.n	ca70 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c9c4:	69bb      	ldr	r3, [r7, #24]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d10a      	bne.n	c9e0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c9ca:	4b2c      	ldr	r3, [pc, #176]	; (ca7c <usbdc_set_config+0xd8>)
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	6818      	ldr	r0, [r3, #0]
    c9d0:	4b2a      	ldr	r3, [pc, #168]	; (ca7c <usbdc_set_config+0xd8>)
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	685b      	ldr	r3, [r3, #4]
    c9d6:	79fa      	ldrb	r2, [r7, #7]
    c9d8:	4619      	mov	r1, r3
    c9da:	4b29      	ldr	r3, [pc, #164]	; (ca80 <usbdc_set_config+0xdc>)
    c9dc:	4798      	blx	r3
    c9de:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c9e0:	69bb      	ldr	r3, [r7, #24]
    c9e2:	2b00      	cmp	r3, #0
    c9e4:	d101      	bne.n	c9ea <usbdc_set_config+0x46>
		return false;
    c9e6:	2300      	movs	r3, #0
    c9e8:	e042      	b.n	ca70 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c9ea:	69b8      	ldr	r0, [r7, #24]
    c9ec:	4b25      	ldr	r3, [pc, #148]	; (ca84 <usbdc_set_config+0xe0>)
    c9ee:	4798      	blx	r3
    c9f0:	4603      	mov	r3, r0
    c9f2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c9f4:	8abb      	ldrh	r3, [r7, #20]
    c9f6:	69ba      	ldr	r2, [r7, #24]
    c9f8:	4413      	add	r3, r2
    c9fa:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c9fc:	693b      	ldr	r3, [r7, #16]
    c9fe:	2204      	movs	r2, #4
    ca00:	4619      	mov	r1, r3
    ca02:	69b8      	ldr	r0, [r7, #24]
    ca04:	4b20      	ldr	r3, [pc, #128]	; (ca88 <usbdc_set_config+0xe4>)
    ca06:	4798      	blx	r3
    ca08:	4603      	mov	r3, r0
    ca0a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    ca0c:	e02c      	b.n	ca68 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ca0e:	68fb      	ldr	r3, [r7, #12]
    ca10:	3302      	adds	r3, #2
    ca12:	781b      	ldrb	r3, [r3, #0]
    ca14:	7dfa      	ldrb	r2, [r7, #23]
    ca16:	429a      	cmp	r2, r3
    ca18:	d018      	beq.n	ca4c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    ca1a:	68fb      	ldr	r3, [r7, #12]
    ca1c:	789b      	ldrb	r3, [r3, #2]
    ca1e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ca20:	4b16      	ldr	r3, [pc, #88]	; (ca7c <usbdc_set_config+0xd8>)
    ca22:	691b      	ldr	r3, [r3, #16]
    ca24:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ca26:	e00c      	b.n	ca42 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ca28:	69fb      	ldr	r3, [r7, #28]
    ca2a:	685b      	ldr	r3, [r3, #4]
    ca2c:	f107 020c 	add.w	r2, r7, #12
    ca30:	2100      	movs	r1, #0
    ca32:	69f8      	ldr	r0, [r7, #28]
    ca34:	4798      	blx	r3
    ca36:	4603      	mov	r3, r0
    ca38:	2b00      	cmp	r3, #0
    ca3a:	d006      	beq.n	ca4a <usbdc_set_config+0xa6>
					func = func->next;
    ca3c:	69fb      	ldr	r3, [r7, #28]
    ca3e:	681b      	ldr	r3, [r3, #0]
    ca40:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ca42:	69fb      	ldr	r3, [r7, #28]
    ca44:	2b00      	cmp	r3, #0
    ca46:	d1ef      	bne.n	ca28 <usbdc_set_config+0x84>
    ca48:	e000      	b.n	ca4c <usbdc_set_config+0xa8>
				} else {
					break;
    ca4a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    ca4c:	68fb      	ldr	r3, [r7, #12]
    ca4e:	4618      	mov	r0, r3
    ca50:	4b0e      	ldr	r3, [pc, #56]	; (ca8c <usbdc_set_config+0xe8>)
    ca52:	4798      	blx	r3
    ca54:	4603      	mov	r3, r0
    ca56:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ca58:	68fb      	ldr	r3, [r7, #12]
    ca5a:	6939      	ldr	r1, [r7, #16]
    ca5c:	2204      	movs	r2, #4
    ca5e:	4618      	mov	r0, r3
    ca60:	4b09      	ldr	r3, [pc, #36]	; (ca88 <usbdc_set_config+0xe4>)
    ca62:	4798      	blx	r3
    ca64:	4603      	mov	r3, r0
    ca66:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ca68:	68fb      	ldr	r3, [r7, #12]
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d1cf      	bne.n	ca0e <usbdc_set_config+0x6a>
	}
	return true;
    ca6e:	2301      	movs	r3, #1
}
    ca70:	4618      	mov	r0, r3
    ca72:	3720      	adds	r7, #32
    ca74:	46bd      	mov	sp, r7
    ca76:	bd80      	pop	{r7, pc}
    ca78:	0000c971 	.word	0x0000c971
    ca7c:	20000cac 	.word	0x20000cac
    ca80:	0000d315 	.word	0x0000d315
    ca84:	0000c4c1 	.word	0x0000c4c1
    ca88:	0000d255 	.word	0x0000d255
    ca8c:	0000c49d 	.word	0x0000c49d

0000ca90 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ca90:	b580      	push	{r7, lr}
    ca92:	b082      	sub	sp, #8
    ca94:	af00      	add	r7, sp, #0
    ca96:	4603      	mov	r3, r0
    ca98:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ca9a:	79fb      	ldrb	r3, [r7, #7]
    ca9c:	4618      	mov	r0, r3
    ca9e:	4b03      	ldr	r3, [pc, #12]	; (caac <usbdc_set_address+0x1c>)
    caa0:	4798      	blx	r3
}
    caa2:	bf00      	nop
    caa4:	3708      	adds	r7, #8
    caa6:	46bd      	mov	sp, r7
    caa8:	bd80      	pop	{r7, pc}
    caaa:	bf00      	nop
    caac:	0000305d 	.word	0x0000305d

0000cab0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cab0:	b590      	push	{r4, r7, lr}
    cab2:	b087      	sub	sp, #28
    cab4:	af00      	add	r7, sp, #0
    cab6:	4603      	mov	r3, r0
    cab8:	460a      	mov	r2, r1
    caba:	80fb      	strh	r3, [r7, #6]
    cabc:	4613      	mov	r3, r2
    cabe:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cac0:	2300      	movs	r3, #0
    cac2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cac4:	693b      	ldr	r3, [r7, #16]
    cac6:	2b00      	cmp	r3, #0
    cac8:	d10b      	bne.n	cae2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    caca:	4b43      	ldr	r3, [pc, #268]	; (cbd8 <usbdc_set_interface+0x128>)
    cacc:	681b      	ldr	r3, [r3, #0]
    cace:	6818      	ldr	r0, [r3, #0]
    cad0:	4b41      	ldr	r3, [pc, #260]	; (cbd8 <usbdc_set_interface+0x128>)
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	6859      	ldr	r1, [r3, #4]
    cad6:	4b40      	ldr	r3, [pc, #256]	; (cbd8 <usbdc_set_interface+0x128>)
    cad8:	7edb      	ldrb	r3, [r3, #27]
    cada:	461a      	mov	r2, r3
    cadc:	4b3f      	ldr	r3, [pc, #252]	; (cbdc <usbdc_set_interface+0x12c>)
    cade:	4798      	blx	r3
    cae0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cae2:	693b      	ldr	r3, [r7, #16]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d101      	bne.n	caec <usbdc_set_interface+0x3c>
		return false;
    cae8:	2300      	movs	r3, #0
    caea:	e071      	b.n	cbd0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    caec:	693b      	ldr	r3, [r7, #16]
    caee:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    caf0:	6938      	ldr	r0, [r7, #16]
    caf2:	4b3b      	ldr	r3, [pc, #236]	; (cbe0 <usbdc_set_interface+0x130>)
    caf4:	4798      	blx	r3
    caf6:	4603      	mov	r3, r0
    caf8:	461a      	mov	r2, r3
    cafa:	693b      	ldr	r3, [r7, #16]
    cafc:	4413      	add	r3, r2
    cafe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cb00:	68bb      	ldr	r3, [r7, #8]
    cb02:	68f9      	ldr	r1, [r7, #12]
    cb04:	2204      	movs	r2, #4
    cb06:	4618      	mov	r0, r3
    cb08:	4b36      	ldr	r3, [pc, #216]	; (cbe4 <usbdc_set_interface+0x134>)
    cb0a:	4798      	blx	r3
    cb0c:	6138      	str	r0, [r7, #16]
    cb0e:	693b      	ldr	r3, [r7, #16]
    cb10:	2b00      	cmp	r3, #0
    cb12:	d113      	bne.n	cb3c <usbdc_set_interface+0x8c>
		return false;
    cb14:	2300      	movs	r3, #0
    cb16:	e05b      	b.n	cbd0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cb18:	68bb      	ldr	r3, [r7, #8]
    cb1a:	4618      	mov	r0, r3
    cb1c:	4b32      	ldr	r3, [pc, #200]	; (cbe8 <usbdc_set_interface+0x138>)
    cb1e:	4798      	blx	r3
    cb20:	4603      	mov	r3, r0
    cb22:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cb24:	68bb      	ldr	r3, [r7, #8]
    cb26:	68f9      	ldr	r1, [r7, #12]
    cb28:	2204      	movs	r2, #4
    cb2a:	4618      	mov	r0, r3
    cb2c:	4b2d      	ldr	r3, [pc, #180]	; (cbe4 <usbdc_set_interface+0x134>)
    cb2e:	4798      	blx	r3
    cb30:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cb32:	693b      	ldr	r3, [r7, #16]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d101      	bne.n	cb3c <usbdc_set_interface+0x8c>
			return false;
    cb38:	2300      	movs	r3, #0
    cb3a:	e049      	b.n	cbd0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cb3c:	693b      	ldr	r3, [r7, #16]
    cb3e:	3302      	adds	r3, #2
    cb40:	781b      	ldrb	r3, [r3, #0]
    cb42:	b29b      	uxth	r3, r3
    cb44:	88ba      	ldrh	r2, [r7, #4]
    cb46:	429a      	cmp	r2, r3
    cb48:	d1e6      	bne.n	cb18 <usbdc_set_interface+0x68>
    cb4a:	693b      	ldr	r3, [r7, #16]
    cb4c:	3303      	adds	r3, #3
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	b29b      	uxth	r3, r3
    cb52:	88fa      	ldrh	r2, [r7, #6]
    cb54:	429a      	cmp	r2, r3
    cb56:	d1df      	bne.n	cb18 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cb58:	693b      	ldr	r3, [r7, #16]
    cb5a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cb5c:	4b1e      	ldr	r3, [pc, #120]	; (cbd8 <usbdc_set_interface+0x128>)
    cb5e:	691b      	ldr	r3, [r3, #16]
    cb60:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cb62:	e031      	b.n	cbc8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cb64:	697b      	ldr	r3, [r7, #20]
    cb66:	685b      	ldr	r3, [r3, #4]
    cb68:	f107 0208 	add.w	r2, r7, #8
    cb6c:	2101      	movs	r1, #1
    cb6e:	6978      	ldr	r0, [r7, #20]
    cb70:	4798      	blx	r3
    cb72:	4603      	mov	r3, r0
    cb74:	2b00      	cmp	r3, #0
    cb76:	d003      	beq.n	cb80 <usbdc_set_interface+0xd0>
			func = func->next;
    cb78:	697b      	ldr	r3, [r7, #20]
    cb7a:	681b      	ldr	r3, [r3, #0]
    cb7c:	617b      	str	r3, [r7, #20]
    cb7e:	e023      	b.n	cbc8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cb80:	697b      	ldr	r3, [r7, #20]
    cb82:	685b      	ldr	r3, [r3, #4]
    cb84:	f107 0208 	add.w	r2, r7, #8
    cb88:	2100      	movs	r1, #0
    cb8a:	6978      	ldr	r0, [r7, #20]
    cb8c:	4798      	blx	r3
    cb8e:	4603      	mov	r3, r0
    cb90:	2b00      	cmp	r3, #0
    cb92:	d117      	bne.n	cbc4 <usbdc_set_interface+0x114>
			if (alt_set) {
    cb94:	88fb      	ldrh	r3, [r7, #6]
    cb96:	2b00      	cmp	r3, #0
    cb98:	d00c      	beq.n	cbb4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cb9a:	4b0f      	ldr	r3, [pc, #60]	; (cbd8 <usbdc_set_interface+0x128>)
    cb9c:	7f5b      	ldrb	r3, [r3, #29]
    cb9e:	b25a      	sxtb	r2, r3
    cba0:	88bb      	ldrh	r3, [r7, #4]
    cba2:	2101      	movs	r1, #1
    cba4:	fa01 f303 	lsl.w	r3, r1, r3
    cba8:	b25b      	sxtb	r3, r3
    cbaa:	4313      	orrs	r3, r2
    cbac:	b25b      	sxtb	r3, r3
    cbae:	b2da      	uxtb	r2, r3
    cbb0:	4b09      	ldr	r3, [pc, #36]	; (cbd8 <usbdc_set_interface+0x128>)
    cbb2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cbb4:	2300      	movs	r3, #0
    cbb6:	2200      	movs	r2, #0
    cbb8:	2100      	movs	r1, #0
    cbba:	2000      	movs	r0, #0
    cbbc:	4c0b      	ldr	r4, [pc, #44]	; (cbec <usbdc_set_interface+0x13c>)
    cbbe:	47a0      	blx	r4
			return true;
    cbc0:	2301      	movs	r3, #1
    cbc2:	e005      	b.n	cbd0 <usbdc_set_interface+0x120>
		} else {
			return false;
    cbc4:	2300      	movs	r3, #0
    cbc6:	e003      	b.n	cbd0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cbc8:	697b      	ldr	r3, [r7, #20]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	d1ca      	bne.n	cb64 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cbce:	2300      	movs	r3, #0
}
    cbd0:	4618      	mov	r0, r3
    cbd2:	371c      	adds	r7, #28
    cbd4:	46bd      	mov	sp, r7
    cbd6:	bd90      	pop	{r4, r7, pc}
    cbd8:	20000cac 	.word	0x20000cac
    cbdc:	0000d315 	.word	0x0000d315
    cbe0:	0000c4c1 	.word	0x0000c4c1
    cbe4:	0000d255 	.word	0x0000d255
    cbe8:	0000c49d 	.word	0x0000c49d
    cbec:	0000cfc5 	.word	0x0000cfc5

0000cbf0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cbf0:	b590      	push	{r4, r7, lr}
    cbf2:	b083      	sub	sp, #12
    cbf4:	af00      	add	r7, sp, #0
    cbf6:	4603      	mov	r3, r0
    cbf8:	6039      	str	r1, [r7, #0]
    cbfa:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cbfc:	683b      	ldr	r3, [r7, #0]
    cbfe:	785b      	ldrb	r3, [r3, #1]
    cc00:	3b01      	subs	r3, #1
    cc02:	2b0a      	cmp	r3, #10
    cc04:	d85b      	bhi.n	ccbe <usbdc_set_req+0xce>
    cc06:	a201      	add	r2, pc, #4	; (adr r2, cc0c <usbdc_set_req+0x1c>)
    cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc0c:	0000cc8b 	.word	0x0000cc8b
    cc10:	0000ccbf 	.word	0x0000ccbf
    cc14:	0000cc99 	.word	0x0000cc99
    cc18:	0000ccbf 	.word	0x0000ccbf
    cc1c:	0000cc39 	.word	0x0000cc39
    cc20:	0000ccbf 	.word	0x0000ccbf
    cc24:	0000ccbf 	.word	0x0000ccbf
    cc28:	0000ccbf 	.word	0x0000ccbf
    cc2c:	0000cc53 	.word	0x0000cc53
    cc30:	0000ccbf 	.word	0x0000ccbf
    cc34:	0000cca7 	.word	0x0000cca7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc38:	79f8      	ldrb	r0, [r7, #7]
    cc3a:	2301      	movs	r3, #1
    cc3c:	2200      	movs	r2, #0
    cc3e:	2100      	movs	r1, #0
    cc40:	4c21      	ldr	r4, [pc, #132]	; (ccc8 <usbdc_set_req+0xd8>)
    cc42:	47a0      	blx	r4
    cc44:	4603      	mov	r3, r0
    cc46:	2b00      	cmp	r3, #0
    cc48:	bf0c      	ite	eq
    cc4a:	2301      	moveq	r3, #1
    cc4c:	2300      	movne	r3, #0
    cc4e:	b2db      	uxtb	r3, r3
    cc50:	e036      	b.n	ccc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cc52:	683b      	ldr	r3, [r7, #0]
    cc54:	885b      	ldrh	r3, [r3, #2]
    cc56:	b29b      	uxth	r3, r3
    cc58:	b2db      	uxtb	r3, r3
    cc5a:	4618      	mov	r0, r3
    cc5c:	4b1b      	ldr	r3, [pc, #108]	; (cccc <usbdc_set_req+0xdc>)
    cc5e:	4798      	blx	r3
    cc60:	4603      	mov	r3, r0
    cc62:	f083 0301 	eor.w	r3, r3, #1
    cc66:	b2db      	uxtb	r3, r3
    cc68:	2b00      	cmp	r3, #0
    cc6a:	d001      	beq.n	cc70 <usbdc_set_req+0x80>
			return false;
    cc6c:	2300      	movs	r3, #0
    cc6e:	e027      	b.n	ccc0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc70:	79f8      	ldrb	r0, [r7, #7]
    cc72:	2301      	movs	r3, #1
    cc74:	2200      	movs	r2, #0
    cc76:	2100      	movs	r1, #0
    cc78:	4c13      	ldr	r4, [pc, #76]	; (ccc8 <usbdc_set_req+0xd8>)
    cc7a:	47a0      	blx	r4
    cc7c:	4603      	mov	r3, r0
    cc7e:	2b00      	cmp	r3, #0
    cc80:	bf0c      	ite	eq
    cc82:	2301      	moveq	r3, #1
    cc84:	2300      	movne	r3, #0
    cc86:	b2db      	uxtb	r3, r3
    cc88:	e01a      	b.n	ccc0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cc8a:	79fb      	ldrb	r3, [r7, #7]
    cc8c:	6839      	ldr	r1, [r7, #0]
    cc8e:	4618      	mov	r0, r3
    cc90:	4b0f      	ldr	r3, [pc, #60]	; (ccd0 <usbdc_set_req+0xe0>)
    cc92:	4798      	blx	r3
    cc94:	4603      	mov	r3, r0
    cc96:	e013      	b.n	ccc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cc98:	79fb      	ldrb	r3, [r7, #7]
    cc9a:	6839      	ldr	r1, [r7, #0]
    cc9c:	4618      	mov	r0, r3
    cc9e:	4b0d      	ldr	r3, [pc, #52]	; (ccd4 <usbdc_set_req+0xe4>)
    cca0:	4798      	blx	r3
    cca2:	4603      	mov	r3, r0
    cca4:	e00c      	b.n	ccc0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cca6:	683b      	ldr	r3, [r7, #0]
    cca8:	885b      	ldrh	r3, [r3, #2]
    ccaa:	b29a      	uxth	r2, r3
    ccac:	683b      	ldr	r3, [r7, #0]
    ccae:	889b      	ldrh	r3, [r3, #4]
    ccb0:	b29b      	uxth	r3, r3
    ccb2:	4619      	mov	r1, r3
    ccb4:	4610      	mov	r0, r2
    ccb6:	4b08      	ldr	r3, [pc, #32]	; (ccd8 <usbdc_set_req+0xe8>)
    ccb8:	4798      	blx	r3
    ccba:	4603      	mov	r3, r0
    ccbc:	e000      	b.n	ccc0 <usbdc_set_req+0xd0>
	default:
		return false;
    ccbe:	2300      	movs	r3, #0
	}
}
    ccc0:	4618      	mov	r0, r3
    ccc2:	370c      	adds	r7, #12
    ccc4:	46bd      	mov	sp, r7
    ccc6:	bd90      	pop	{r4, r7, pc}
    ccc8:	0000cfc5 	.word	0x0000cfc5
    cccc:	0000c9a5 	.word	0x0000c9a5
    ccd0:	0000c8c1 	.word	0x0000c8c1
    ccd4:	0000c919 	.word	0x0000c919
    ccd8:	0000cab1 	.word	0x0000cab1

0000ccdc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    ccdc:	b580      	push	{r7, lr}
    ccde:	b082      	sub	sp, #8
    cce0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cce2:	4b0a      	ldr	r3, [pc, #40]	; (cd0c <usbdc_sof_notify+0x30>)
    cce4:	685b      	ldr	r3, [r3, #4]
    cce6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cce8:	e009      	b.n	ccfe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	685b      	ldr	r3, [r3, #4]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d002      	beq.n	ccf8 <usbdc_sof_notify+0x1c>
			sof->cb();
    ccf2:	687b      	ldr	r3, [r7, #4]
    ccf4:	685b      	ldr	r3, [r3, #4]
    ccf6:	4798      	blx	r3
		}
		sof = sof->next;
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	681b      	ldr	r3, [r3, #0]
    ccfc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    ccfe:	687b      	ldr	r3, [r7, #4]
    cd00:	2b00      	cmp	r3, #0
    cd02:	d1f2      	bne.n	ccea <usbdc_sof_notify+0xe>
	}
}
    cd04:	bf00      	nop
    cd06:	3708      	adds	r7, #8
    cd08:	46bd      	mov	sp, r7
    cd0a:	bd80      	pop	{r7, pc}
    cd0c:	20000cac 	.word	0x20000cac

0000cd10 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cd10:	b580      	push	{r7, lr}
    cd12:	b084      	sub	sp, #16
    cd14:	af00      	add	r7, sp, #0
    cd16:	4603      	mov	r3, r0
    cd18:	6039      	str	r1, [r7, #0]
    cd1a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cd1c:	4b0b      	ldr	r3, [pc, #44]	; (cd4c <usbdc_change_notify+0x3c>)
    cd1e:	68db      	ldr	r3, [r3, #12]
    cd20:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cd22:	e00c      	b.n	cd3e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cd24:	68fb      	ldr	r3, [r7, #12]
    cd26:	685b      	ldr	r3, [r3, #4]
    cd28:	2b00      	cmp	r3, #0
    cd2a:	d005      	beq.n	cd38 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cd2c:	68fb      	ldr	r3, [r7, #12]
    cd2e:	685b      	ldr	r3, [r3, #4]
    cd30:	79fa      	ldrb	r2, [r7, #7]
    cd32:	6839      	ldr	r1, [r7, #0]
    cd34:	4610      	mov	r0, r2
    cd36:	4798      	blx	r3
		}
		cg = cg->next;
    cd38:	68fb      	ldr	r3, [r7, #12]
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    cd3e:	68fb      	ldr	r3, [r7, #12]
    cd40:	2b00      	cmp	r3, #0
    cd42:	d1ef      	bne.n	cd24 <usbdc_change_notify+0x14>
	}
}
    cd44:	bf00      	nop
    cd46:	3710      	adds	r7, #16
    cd48:	46bd      	mov	sp, r7
    cd4a:	bd80      	pop	{r7, pc}
    cd4c:	20000cac 	.word	0x20000cac

0000cd50 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cd50:	b580      	push	{r7, lr}
    cd52:	b084      	sub	sp, #16
    cd54:	af00      	add	r7, sp, #0
    cd56:	4603      	mov	r3, r0
    cd58:	6039      	str	r1, [r7, #0]
    cd5a:	71fb      	strb	r3, [r7, #7]
    cd5c:	4613      	mov	r3, r2
    cd5e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cd60:	4b12      	ldr	r3, [pc, #72]	; (cdac <usbdc_request_handler+0x5c>)
    cd62:	689b      	ldr	r3, [r3, #8]
    cd64:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cd66:	e019      	b.n	cd9c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cd68:	68fb      	ldr	r3, [r7, #12]
    cd6a:	685b      	ldr	r3, [r3, #4]
    cd6c:	2b00      	cmp	r3, #0
    cd6e:	d012      	beq.n	cd96 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cd70:	68fb      	ldr	r3, [r7, #12]
    cd72:	685b      	ldr	r3, [r3, #4]
    cd74:	79ba      	ldrb	r2, [r7, #6]
    cd76:	79f8      	ldrb	r0, [r7, #7]
    cd78:	6839      	ldr	r1, [r7, #0]
    cd7a:	4798      	blx	r3
    cd7c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cd7e:	68bb      	ldr	r3, [r7, #8]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d101      	bne.n	cd88 <usbdc_request_handler+0x38>
				return true;
    cd84:	2301      	movs	r3, #1
    cd86:	e00d      	b.n	cda4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cd88:	68bb      	ldr	r3, [r7, #8]
    cd8a:	f113 0f0a 	cmn.w	r3, #10
    cd8e:	d002      	beq.n	cd96 <usbdc_request_handler+0x46>
				return -1;
    cd90:	f04f 33ff 	mov.w	r3, #4294967295
    cd94:	e006      	b.n	cda4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cd96:	68fb      	ldr	r3, [r7, #12]
    cd98:	681b      	ldr	r3, [r3, #0]
    cd9a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cd9c:	68fb      	ldr	r3, [r7, #12]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d1e2      	bne.n	cd68 <usbdc_request_handler+0x18>
	}
	return false;
    cda2:	2300      	movs	r3, #0
}
    cda4:	4618      	mov	r0, r3
    cda6:	3710      	adds	r7, #16
    cda8:	46bd      	mov	sp, r7
    cdaa:	bd80      	pop	{r7, pc}
    cdac:	20000cac 	.word	0x20000cac

0000cdb0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cdb0:	b580      	push	{r7, lr}
    cdb2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cdb4:	4b01      	ldr	r3, [pc, #4]	; (cdbc <usbd_sof_cb+0xc>)
    cdb6:	4798      	blx	r3
}
    cdb8:	bf00      	nop
    cdba:	bd80      	pop	{r7, pc}
    cdbc:	0000ccdd 	.word	0x0000ccdd

0000cdc0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cdc0:	b580      	push	{r7, lr}
    cdc2:	b082      	sub	sp, #8
    cdc4:	af00      	add	r7, sp, #0
    cdc6:	4603      	mov	r3, r0
    cdc8:	6039      	str	r1, [r7, #0]
    cdca:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cdcc:	79fb      	ldrb	r3, [r7, #7]
    cdce:	2200      	movs	r2, #0
    cdd0:	6839      	ldr	r1, [r7, #0]
    cdd2:	4618      	mov	r0, r3
    cdd4:	4b14      	ldr	r3, [pc, #80]	; (ce28 <usbdc_cb_ctl_req+0x68>)
    cdd6:	4798      	blx	r3
    cdd8:	4603      	mov	r3, r0
    cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
    cdde:	d00b      	beq.n	cdf8 <usbdc_cb_ctl_req+0x38>
    cde0:	2b01      	cmp	r3, #1
    cde2:	d007      	beq.n	cdf4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cde4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cde6:	683b      	ldr	r3, [r7, #0]
    cde8:	781b      	ldrb	r3, [r3, #0]
    cdea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cdee:	2b00      	cmp	r3, #0
    cdf0:	d007      	beq.n	ce02 <usbdc_cb_ctl_req+0x42>
    cdf2:	e003      	b.n	cdfc <usbdc_cb_ctl_req+0x3c>
		return true;
    cdf4:	2301      	movs	r3, #1
    cdf6:	e013      	b.n	ce20 <usbdc_cb_ctl_req+0x60>
		return false;
    cdf8:	2300      	movs	r3, #0
    cdfa:	e011      	b.n	ce20 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cdfc:	2b80      	cmp	r3, #128	; 0x80
    cdfe:	d007      	beq.n	ce10 <usbdc_cb_ctl_req+0x50>
    ce00:	e00d      	b.n	ce1e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    ce02:	79fb      	ldrb	r3, [r7, #7]
    ce04:	6839      	ldr	r1, [r7, #0]
    ce06:	4618      	mov	r0, r3
    ce08:	4b08      	ldr	r3, [pc, #32]	; (ce2c <usbdc_cb_ctl_req+0x6c>)
    ce0a:	4798      	blx	r3
    ce0c:	4603      	mov	r3, r0
    ce0e:	e007      	b.n	ce20 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    ce10:	79fb      	ldrb	r3, [r7, #7]
    ce12:	6839      	ldr	r1, [r7, #0]
    ce14:	4618      	mov	r0, r3
    ce16:	4b06      	ldr	r3, [pc, #24]	; (ce30 <usbdc_cb_ctl_req+0x70>)
    ce18:	4798      	blx	r3
    ce1a:	4603      	mov	r3, r0
    ce1c:	e000      	b.n	ce20 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ce1e:	2300      	movs	r3, #0
	}
}
    ce20:	4618      	mov	r0, r3
    ce22:	3708      	adds	r7, #8
    ce24:	46bd      	mov	sp, r7
    ce26:	bd80      	pop	{r7, pc}
    ce28:	0000cd51 	.word	0x0000cd51
    ce2c:	0000cbf1 	.word	0x0000cbf1
    ce30:	0000c819 	.word	0x0000c819

0000ce34 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ce34:	b580      	push	{r7, lr}
    ce36:	b082      	sub	sp, #8
    ce38:	af00      	add	r7, sp, #0
    ce3a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    ce3c:	687b      	ldr	r3, [r7, #4]
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d135      	bne.n	ceb0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ce44:	687b      	ldr	r3, [r7, #4]
    ce46:	785b      	ldrb	r3, [r3, #1]
    ce48:	2b05      	cmp	r3, #5
    ce4a:	d019      	beq.n	ce80 <usbdc_ctrl_status_end+0x4c>
    ce4c:	2b09      	cmp	r3, #9
    ce4e:	d000      	beq.n	ce52 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ce50:	e02f      	b.n	ceb2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ce52:	687b      	ldr	r3, [r7, #4]
    ce54:	885b      	ldrh	r3, [r3, #2]
    ce56:	b29b      	uxth	r3, r3
    ce58:	b2da      	uxtb	r2, r3
    ce5a:	4b17      	ldr	r3, [pc, #92]	; (ceb8 <usbdc_ctrl_status_end+0x84>)
    ce5c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ce5e:	687b      	ldr	r3, [r7, #4]
    ce60:	885b      	ldrh	r3, [r3, #2]
    ce62:	b29b      	uxth	r3, r3
    ce64:	2b00      	cmp	r3, #0
    ce66:	d001      	beq.n	ce6c <usbdc_ctrl_status_end+0x38>
    ce68:	2204      	movs	r2, #4
    ce6a:	e000      	b.n	ce6e <usbdc_ctrl_status_end+0x3a>
    ce6c:	2203      	movs	r2, #3
    ce6e:	4b12      	ldr	r3, [pc, #72]	; (ceb8 <usbdc_ctrl_status_end+0x84>)
    ce70:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce72:	4b11      	ldr	r3, [pc, #68]	; (ceb8 <usbdc_ctrl_status_end+0x84>)
    ce74:	7e9b      	ldrb	r3, [r3, #26]
    ce76:	4619      	mov	r1, r3
    ce78:	2001      	movs	r0, #1
    ce7a:	4b10      	ldr	r3, [pc, #64]	; (cebc <usbdc_ctrl_status_end+0x88>)
    ce7c:	4798      	blx	r3
		break;
    ce7e:	e018      	b.n	ceb2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ce80:	687b      	ldr	r3, [r7, #4]
    ce82:	885b      	ldrh	r3, [r3, #2]
    ce84:	b29b      	uxth	r3, r3
    ce86:	b2db      	uxtb	r3, r3
    ce88:	4618      	mov	r0, r3
    ce8a:	4b0d      	ldr	r3, [pc, #52]	; (cec0 <usbdc_ctrl_status_end+0x8c>)
    ce8c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ce8e:	687b      	ldr	r3, [r7, #4]
    ce90:	885b      	ldrh	r3, [r3, #2]
    ce92:	b29b      	uxth	r3, r3
    ce94:	2b00      	cmp	r3, #0
    ce96:	d001      	beq.n	ce9c <usbdc_ctrl_status_end+0x68>
    ce98:	2203      	movs	r2, #3
    ce9a:	e000      	b.n	ce9e <usbdc_ctrl_status_end+0x6a>
    ce9c:	2202      	movs	r2, #2
    ce9e:	4b06      	ldr	r3, [pc, #24]	; (ceb8 <usbdc_ctrl_status_end+0x84>)
    cea0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    cea2:	4b05      	ldr	r3, [pc, #20]	; (ceb8 <usbdc_ctrl_status_end+0x84>)
    cea4:	7e9b      	ldrb	r3, [r3, #26]
    cea6:	4619      	mov	r1, r3
    cea8:	2001      	movs	r0, #1
    ceaa:	4b04      	ldr	r3, [pc, #16]	; (cebc <usbdc_ctrl_status_end+0x88>)
    ceac:	4798      	blx	r3
		break;
    ceae:	e000      	b.n	ceb2 <usbdc_ctrl_status_end+0x7e>
		return;
    ceb0:	bf00      	nop
	}
}
    ceb2:	3708      	adds	r7, #8
    ceb4:	46bd      	mov	sp, r7
    ceb6:	bd80      	pop	{r7, pc}
    ceb8:	20000cac 	.word	0x20000cac
    cebc:	0000cd11 	.word	0x0000cd11
    cec0:	0000ca91 	.word	0x0000ca91

0000cec4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    cec4:	b580      	push	{r7, lr}
    cec6:	b082      	sub	sp, #8
    cec8:	af00      	add	r7, sp, #0
    ceca:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    cecc:	2201      	movs	r2, #1
    cece:	6879      	ldr	r1, [r7, #4]
    ced0:	2000      	movs	r0, #0
    ced2:	4b03      	ldr	r3, [pc, #12]	; (cee0 <usbdc_ctrl_data_end+0x1c>)
    ced4:	4798      	blx	r3
	return false;
    ced6:	2300      	movs	r3, #0
}
    ced8:	4618      	mov	r0, r3
    ceda:	3708      	adds	r7, #8
    cedc:	46bd      	mov	sp, r7
    cede:	bd80      	pop	{r7, pc}
    cee0:	0000cd51 	.word	0x0000cd51

0000cee4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    cee4:	b580      	push	{r7, lr}
    cee6:	b082      	sub	sp, #8
    cee8:	af00      	add	r7, sp, #0
    ceea:	4603      	mov	r3, r0
    ceec:	603a      	str	r2, [r7, #0]
    ceee:	71fb      	strb	r3, [r7, #7]
    cef0:	460b      	mov	r3, r1
    cef2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    cef4:	79bb      	ldrb	r3, [r7, #6]
    cef6:	2b00      	cmp	r3, #0
    cef8:	d002      	beq.n	cf00 <usbdc_cb_ctl_done+0x1c>
    cefa:	2b01      	cmp	r3, #1
    cefc:	d004      	beq.n	cf08 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    cefe:	e008      	b.n	cf12 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    cf00:	6838      	ldr	r0, [r7, #0]
    cf02:	4b06      	ldr	r3, [pc, #24]	; (cf1c <usbdc_cb_ctl_done+0x38>)
    cf04:	4798      	blx	r3
		break;
    cf06:	e004      	b.n	cf12 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cf08:	6838      	ldr	r0, [r7, #0]
    cf0a:	4b05      	ldr	r3, [pc, #20]	; (cf20 <usbdc_cb_ctl_done+0x3c>)
    cf0c:	4798      	blx	r3
    cf0e:	4603      	mov	r3, r0
    cf10:	e000      	b.n	cf14 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    cf12:	2300      	movs	r3, #0
}
    cf14:	4618      	mov	r0, r3
    cf16:	3708      	adds	r7, #8
    cf18:	46bd      	mov	sp, r7
    cf1a:	bd80      	pop	{r7, pc}
    cf1c:	0000ce35 	.word	0x0000ce35
    cf20:	0000cec5 	.word	0x0000cec5

0000cf24 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cf24:	b580      	push	{r7, lr}
    cf26:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cf28:	4b10      	ldr	r3, [pc, #64]	; (cf6c <usbdc_reset+0x48>)
    cf2a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cf2c:	4b10      	ldr	r3, [pc, #64]	; (cf70 <usbdc_reset+0x4c>)
    cf2e:	2202      	movs	r2, #2
    cf30:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    cf32:	4b0f      	ldr	r3, [pc, #60]	; (cf70 <usbdc_reset+0x4c>)
    cf34:	2200      	movs	r2, #0
    cf36:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cf38:	4b0d      	ldr	r3, [pc, #52]	; (cf70 <usbdc_reset+0x4c>)
    cf3a:	2200      	movs	r2, #0
    cf3c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cf3e:	2000      	movs	r0, #0
    cf40:	4b0c      	ldr	r3, [pc, #48]	; (cf74 <usbdc_reset+0x50>)
    cf42:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cf44:	4b0a      	ldr	r3, [pc, #40]	; (cf70 <usbdc_reset+0x4c>)
    cf46:	7f1b      	ldrb	r3, [r3, #28]
    cf48:	4618      	mov	r0, r3
    cf4a:	4b0b      	ldr	r3, [pc, #44]	; (cf78 <usbdc_reset+0x54>)
    cf4c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cf4e:	4a0b      	ldr	r2, [pc, #44]	; (cf7c <usbdc_reset+0x58>)
    cf50:	2100      	movs	r1, #0
    cf52:	2000      	movs	r0, #0
    cf54:	4b0a      	ldr	r3, [pc, #40]	; (cf80 <usbdc_reset+0x5c>)
    cf56:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cf58:	4a0a      	ldr	r2, [pc, #40]	; (cf84 <usbdc_reset+0x60>)
    cf5a:	2102      	movs	r1, #2
    cf5c:	2000      	movs	r0, #0
    cf5e:	4b08      	ldr	r3, [pc, #32]	; (cf80 <usbdc_reset+0x5c>)
    cf60:	4798      	blx	r3
	usb_d_ep_enable(0);
    cf62:	2000      	movs	r0, #0
    cf64:	4b08      	ldr	r3, [pc, #32]	; (cf88 <usbdc_reset+0x64>)
    cf66:	4798      	blx	r3
}
    cf68:	bf00      	nop
    cf6a:	bd80      	pop	{r7, pc}
    cf6c:	0000c971 	.word	0x0000c971
    cf70:	20000cac 	.word	0x20000cac
    cf74:	00003141 	.word	0x00003141
    cf78:	0000307d 	.word	0x0000307d
    cf7c:	0000cdc1 	.word	0x0000cdc1
    cf80:	00003495 	.word	0x00003495
    cf84:	0000cee5 	.word	0x0000cee5
    cf88:	00003191 	.word	0x00003191

0000cf8c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	b082      	sub	sp, #8
    cf90:	af00      	add	r7, sp, #0
    cf92:	4603      	mov	r3, r0
    cf94:	6039      	str	r1, [r7, #0]
    cf96:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cf98:	79fb      	ldrb	r3, [r7, #7]
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	d002      	beq.n	cfa4 <usbd_event_cb+0x18>
    cf9e:	2b01      	cmp	r3, #1
    cfa0:	d005      	beq.n	cfae <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cfa2:	e007      	b.n	cfb4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cfa4:	6839      	ldr	r1, [r7, #0]
    cfa6:	2000      	movs	r0, #0
    cfa8:	4b04      	ldr	r3, [pc, #16]	; (cfbc <usbd_event_cb+0x30>)
    cfaa:	4798      	blx	r3
		break;
    cfac:	e002      	b.n	cfb4 <usbd_event_cb+0x28>
		usbdc_reset();
    cfae:	4b04      	ldr	r3, [pc, #16]	; (cfc0 <usbd_event_cb+0x34>)
    cfb0:	4798      	blx	r3
		break;
    cfb2:	bf00      	nop
	}
}
    cfb4:	bf00      	nop
    cfb6:	3708      	adds	r7, #8
    cfb8:	46bd      	mov	sp, r7
    cfba:	bd80      	pop	{r7, pc}
    cfbc:	0000cd11 	.word	0x0000cd11
    cfc0:	0000cf25 	.word	0x0000cf25

0000cfc4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cfc4:	b580      	push	{r7, lr}
    cfc6:	b088      	sub	sp, #32
    cfc8:	af00      	add	r7, sp, #0
    cfca:	60b9      	str	r1, [r7, #8]
    cfcc:	607a      	str	r2, [r7, #4]
    cfce:	461a      	mov	r2, r3
    cfd0:	4603      	mov	r3, r0
    cfd2:	73fb      	strb	r3, [r7, #15]
    cfd4:	4613      	mov	r3, r2
    cfd6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cfd8:	68bb      	ldr	r3, [r7, #8]
    cfda:	617b      	str	r3, [r7, #20]
    cfdc:	687b      	ldr	r3, [r7, #4]
    cfde:	61bb      	str	r3, [r7, #24]
    cfe0:	7bfb      	ldrb	r3, [r7, #15]
    cfe2:	773b      	strb	r3, [r7, #28]
    cfe4:	7bbb      	ldrb	r3, [r7, #14]
    cfe6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cfe8:	f107 0314 	add.w	r3, r7, #20
    cfec:	4618      	mov	r0, r3
    cfee:	4b03      	ldr	r3, [pc, #12]	; (cffc <usbdc_xfer+0x38>)
    cff0:	4798      	blx	r3
    cff2:	4603      	mov	r3, r0
}
    cff4:	4618      	mov	r0, r3
    cff6:	3720      	adds	r7, #32
    cff8:	46bd      	mov	sp, r7
    cffa:	bd80      	pop	{r7, pc}
    cffc:	00003201 	.word	0x00003201

0000d000 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d000:	b580      	push	{r7, lr}
    d002:	b082      	sub	sp, #8
    d004:	af00      	add	r7, sp, #0
    d006:	4603      	mov	r3, r0
    d008:	6039      	str	r1, [r7, #0]
    d00a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d00c:	79fb      	ldrb	r3, [r7, #7]
    d00e:	2b01      	cmp	r3, #1
    d010:	d009      	beq.n	d026 <usbdc_register_handler+0x26>
    d012:	2b02      	cmp	r3, #2
    d014:	d00c      	beq.n	d030 <usbdc_register_handler+0x30>
    d016:	2b00      	cmp	r3, #0
    d018:	d000      	beq.n	d01c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d01a:	e00e      	b.n	d03a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d01c:	6839      	ldr	r1, [r7, #0]
    d01e:	4809      	ldr	r0, [pc, #36]	; (d044 <usbdc_register_handler+0x44>)
    d020:	4b09      	ldr	r3, [pc, #36]	; (d048 <usbdc_register_handler+0x48>)
    d022:	4798      	blx	r3
		break;
    d024:	e009      	b.n	d03a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d026:	6839      	ldr	r1, [r7, #0]
    d028:	4808      	ldr	r0, [pc, #32]	; (d04c <usbdc_register_handler+0x4c>)
    d02a:	4b07      	ldr	r3, [pc, #28]	; (d048 <usbdc_register_handler+0x48>)
    d02c:	4798      	blx	r3
		break;
    d02e:	e004      	b.n	d03a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d030:	6839      	ldr	r1, [r7, #0]
    d032:	4807      	ldr	r0, [pc, #28]	; (d050 <usbdc_register_handler+0x50>)
    d034:	4b04      	ldr	r3, [pc, #16]	; (d048 <usbdc_register_handler+0x48>)
    d036:	4798      	blx	r3
		break;
    d038:	bf00      	nop
	}
}
    d03a:	bf00      	nop
    d03c:	3708      	adds	r7, #8
    d03e:	46bd      	mov	sp, r7
    d040:	bd80      	pop	{r7, pc}
    d042:	bf00      	nop
    d044:	20000cb0 	.word	0x20000cb0
    d048:	000035ed 	.word	0x000035ed
    d04c:	20000cb4 	.word	0x20000cb4
    d050:	20000cb8 	.word	0x20000cb8

0000d054 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d054:	b580      	push	{r7, lr}
    d056:	b084      	sub	sp, #16
    d058:	af00      	add	r7, sp, #0
    d05a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	2b00      	cmp	r3, #0
    d060:	bf14      	ite	ne
    d062:	2301      	movne	r3, #1
    d064:	2300      	moveq	r3, #0
    d066:	b2db      	uxtb	r3, r3
    d068:	f240 3255 	movw	r2, #853	; 0x355
    d06c:	4910      	ldr	r1, [pc, #64]	; (d0b0 <usbdc_init+0x5c>)
    d06e:	4618      	mov	r0, r3
    d070:	4b10      	ldr	r3, [pc, #64]	; (d0b4 <usbdc_init+0x60>)
    d072:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d074:	4b10      	ldr	r3, [pc, #64]	; (d0b8 <usbdc_init+0x64>)
    d076:	4798      	blx	r3
    d078:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d07a:	68fb      	ldr	r3, [r7, #12]
    d07c:	2b00      	cmp	r3, #0
    d07e:	da01      	bge.n	d084 <usbdc_init+0x30>
		return rc;
    d080:	68fb      	ldr	r3, [r7, #12]
    d082:	e010      	b.n	d0a6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d084:	2220      	movs	r2, #32
    d086:	2100      	movs	r1, #0
    d088:	480c      	ldr	r0, [pc, #48]	; (d0bc <usbdc_init+0x68>)
    d08a:	4b0d      	ldr	r3, [pc, #52]	; (d0c0 <usbdc_init+0x6c>)
    d08c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d08e:	4a0b      	ldr	r2, [pc, #44]	; (d0bc <usbdc_init+0x68>)
    d090:	687b      	ldr	r3, [r7, #4]
    d092:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d094:	490b      	ldr	r1, [pc, #44]	; (d0c4 <usbdc_init+0x70>)
    d096:	2000      	movs	r0, #0
    d098:	4b0b      	ldr	r3, [pc, #44]	; (d0c8 <usbdc_init+0x74>)
    d09a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d09c:	490b      	ldr	r1, [pc, #44]	; (d0cc <usbdc_init+0x78>)
    d09e:	2001      	movs	r0, #1
    d0a0:	4b09      	ldr	r3, [pc, #36]	; (d0c8 <usbdc_init+0x74>)
    d0a2:	4798      	blx	r3

	return 0;
    d0a4:	2300      	movs	r3, #0
}
    d0a6:	4618      	mov	r0, r3
    d0a8:	3710      	adds	r7, #16
    d0aa:	46bd      	mov	sp, r7
    d0ac:	bd80      	pop	{r7, pc}
    d0ae:	bf00      	nop
    d0b0:	0000f278 	.word	0x0000f278
    d0b4:	00003511 	.word	0x00003511
    d0b8:	00002f69 	.word	0x00002f69
    d0bc:	20000cac 	.word	0x20000cac
    d0c0:	0000eb3d 	.word	0x0000eb3d
    d0c4:	0000cdb1 	.word	0x0000cdb1
    d0c8:	00003015 	.word	0x00003015
    d0cc:	0000cf8d 	.word	0x0000cf8d

0000d0d0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d0d0:	b580      	push	{r7, lr}
    d0d2:	b082      	sub	sp, #8
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d0d8:	6879      	ldr	r1, [r7, #4]
    d0da:	4803      	ldr	r0, [pc, #12]	; (d0e8 <usbdc_register_function+0x18>)
    d0dc:	4b03      	ldr	r3, [pc, #12]	; (d0ec <usbdc_register_function+0x1c>)
    d0de:	4798      	blx	r3
}
    d0e0:	bf00      	nop
    d0e2:	3708      	adds	r7, #8
    d0e4:	46bd      	mov	sp, r7
    d0e6:	bd80      	pop	{r7, pc}
    d0e8:	20000cbc 	.word	0x20000cbc
    d0ec:	000035ed 	.word	0x000035ed

0000d0f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d0f8:	4b0f      	ldr	r3, [pc, #60]	; (d138 <usbdc_start+0x48>)
    d0fa:	7e9b      	ldrb	r3, [r3, #26]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d002      	beq.n	d106 <usbdc_start+0x16>
		return ERR_BUSY;
    d100:	f06f 0303 	mvn.w	r3, #3
    d104:	e013      	b.n	d12e <usbdc_start+0x3e>
	}

	if (desces) {
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	2b00      	cmp	r3, #0
    d10a:	d00e      	beq.n	d12a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d10c:	4a0a      	ldr	r2, [pc, #40]	; (d138 <usbdc_start+0x48>)
    d10e:	687b      	ldr	r3, [r7, #4]
    d110:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d112:	687b      	ldr	r3, [r7, #4]
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	79da      	ldrb	r2, [r3, #7]
    d118:	4b07      	ldr	r3, [pc, #28]	; (d138 <usbdc_start+0x48>)
    d11a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d11c:	4b06      	ldr	r3, [pc, #24]	; (d138 <usbdc_start+0x48>)
    d11e:	2201      	movs	r2, #1
    d120:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d122:	4b06      	ldr	r3, [pc, #24]	; (d13c <usbdc_start+0x4c>)
    d124:	4798      	blx	r3
	return ERR_NONE;
    d126:	2300      	movs	r3, #0
    d128:	e001      	b.n	d12e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d12a:	f06f 0308 	mvn.w	r3, #8
}
    d12e:	4618      	mov	r0, r3
    d130:	3708      	adds	r7, #8
    d132:	46bd      	mov	sp, r7
    d134:	bd80      	pop	{r7, pc}
    d136:	bf00      	nop
    d138:	20000cac 	.word	0x20000cac
    d13c:	00003039 	.word	0x00003039

0000d140 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d140:	b580      	push	{r7, lr}
    d142:	af00      	add	r7, sp, #0
	usb_d_attach();
    d144:	4b01      	ldr	r3, [pc, #4]	; (d14c <usbdc_attach+0xc>)
    d146:	4798      	blx	r3
}
    d148:	bf00      	nop
    d14a:	bd80      	pop	{r7, pc}
    d14c:	0000304d 	.word	0x0000304d

0000d150 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d150:	b480      	push	{r7}
    d152:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d154:	4b03      	ldr	r3, [pc, #12]	; (d164 <usbdc_get_ctrl_buffer+0x14>)
    d156:	695b      	ldr	r3, [r3, #20]
}
    d158:	4618      	mov	r0, r3
    d15a:	46bd      	mov	sp, r7
    d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d160:	4770      	bx	lr
    d162:	bf00      	nop
    d164:	20000cac 	.word	0x20000cac

0000d168 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d168:	b480      	push	{r7}
    d16a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d16c:	4b07      	ldr	r3, [pc, #28]	; (d18c <usbdc_get_state+0x24>)
    d16e:	7e9b      	ldrb	r3, [r3, #26]
    d170:	f003 0310 	and.w	r3, r3, #16
    d174:	2b00      	cmp	r3, #0
    d176:	d001      	beq.n	d17c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d178:	2310      	movs	r3, #16
    d17a:	e001      	b.n	d180 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d17c:	4b03      	ldr	r3, [pc, #12]	; (d18c <usbdc_get_state+0x24>)
    d17e:	7e9b      	ldrb	r3, [r3, #26]
}
    d180:	4618      	mov	r0, r3
    d182:	46bd      	mov	sp, r7
    d184:	f85d 7b04 	ldr.w	r7, [sp], #4
    d188:	4770      	bx	lr
    d18a:	bf00      	nop
    d18c:	20000cac 	.word	0x20000cac

0000d190 <usb_get_u16>:
{
    d190:	b480      	push	{r7}
    d192:	b083      	sub	sp, #12
    d194:	af00      	add	r7, sp, #0
    d196:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d198:	687b      	ldr	r3, [r7, #4]
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	b29a      	uxth	r2, r3
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	3301      	adds	r3, #1
    d1a2:	781b      	ldrb	r3, [r3, #0]
    d1a4:	b29b      	uxth	r3, r3
    d1a6:	021b      	lsls	r3, r3, #8
    d1a8:	b29b      	uxth	r3, r3
    d1aa:	4413      	add	r3, r2
    d1ac:	b29b      	uxth	r3, r3
}
    d1ae:	4618      	mov	r0, r3
    d1b0:	370c      	adds	r7, #12
    d1b2:	46bd      	mov	sp, r7
    d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1b8:	4770      	bx	lr

0000d1ba <usb_desc_len>:
{
    d1ba:	b480      	push	{r7}
    d1bc:	b083      	sub	sp, #12
    d1be:	af00      	add	r7, sp, #0
    d1c0:	6078      	str	r0, [r7, #4]
	return desc[0];
    d1c2:	687b      	ldr	r3, [r7, #4]
    d1c4:	781b      	ldrb	r3, [r3, #0]
}
    d1c6:	4618      	mov	r0, r3
    d1c8:	370c      	adds	r7, #12
    d1ca:	46bd      	mov	sp, r7
    d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1d0:	4770      	bx	lr

0000d1d2 <usb_desc_type>:
{
    d1d2:	b480      	push	{r7}
    d1d4:	b083      	sub	sp, #12
    d1d6:	af00      	add	r7, sp, #0
    d1d8:	6078      	str	r0, [r7, #4]
	return desc[1];
    d1da:	687b      	ldr	r3, [r7, #4]
    d1dc:	3301      	adds	r3, #1
    d1de:	781b      	ldrb	r3, [r3, #0]
}
    d1e0:	4618      	mov	r0, r3
    d1e2:	370c      	adds	r7, #12
    d1e4:	46bd      	mov	sp, r7
    d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1ea:	4770      	bx	lr

0000d1ec <usb_desc_next>:
{
    d1ec:	b580      	push	{r7, lr}
    d1ee:	b082      	sub	sp, #8
    d1f0:	af00      	add	r7, sp, #0
    d1f2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d1f4:	6878      	ldr	r0, [r7, #4]
    d1f6:	4b05      	ldr	r3, [pc, #20]	; (d20c <usb_desc_next+0x20>)
    d1f8:	4798      	blx	r3
    d1fa:	4603      	mov	r3, r0
    d1fc:	461a      	mov	r2, r3
    d1fe:	687b      	ldr	r3, [r7, #4]
    d200:	4413      	add	r3, r2
}
    d202:	4618      	mov	r0, r3
    d204:	3708      	adds	r7, #8
    d206:	46bd      	mov	sp, r7
    d208:	bd80      	pop	{r7, pc}
    d20a:	bf00      	nop
    d20c:	0000d1bb 	.word	0x0000d1bb

0000d210 <usb_cfg_desc_total_len>:
{
    d210:	b580      	push	{r7, lr}
    d212:	b082      	sub	sp, #8
    d214:	af00      	add	r7, sp, #0
    d216:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	3302      	adds	r3, #2
    d21c:	4618      	mov	r0, r3
    d21e:	4b03      	ldr	r3, [pc, #12]	; (d22c <usb_cfg_desc_total_len+0x1c>)
    d220:	4798      	blx	r3
    d222:	4603      	mov	r3, r0
}
    d224:	4618      	mov	r0, r3
    d226:	3708      	adds	r7, #8
    d228:	46bd      	mov	sp, r7
    d22a:	bd80      	pop	{r7, pc}
    d22c:	0000d191 	.word	0x0000d191

0000d230 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d230:	b580      	push	{r7, lr}
    d232:	b082      	sub	sp, #8
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d238:	6878      	ldr	r0, [r7, #4]
    d23a:	4b05      	ldr	r3, [pc, #20]	; (d250 <usb_cfg_desc_next+0x20>)
    d23c:	4798      	blx	r3
    d23e:	4603      	mov	r3, r0
    d240:	461a      	mov	r2, r3
    d242:	687b      	ldr	r3, [r7, #4]
    d244:	4413      	add	r3, r2
}
    d246:	4618      	mov	r0, r3
    d248:	3708      	adds	r7, #8
    d24a:	46bd      	mov	sp, r7
    d24c:	bd80      	pop	{r7, pc}
    d24e:	bf00      	nop
    d250:	0000d211 	.word	0x0000d211

0000d254 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d254:	b580      	push	{r7, lr}
    d256:	b084      	sub	sp, #16
    d258:	af00      	add	r7, sp, #0
    d25a:	60f8      	str	r0, [r7, #12]
    d25c:	60b9      	str	r1, [r7, #8]
    d25e:	4613      	mov	r3, r2
    d260:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d262:	e015      	b.n	d290 <usb_find_desc+0x3c>
		_desc_len_check();
    d264:	68f8      	ldr	r0, [r7, #12]
    d266:	4b0f      	ldr	r3, [pc, #60]	; (d2a4 <usb_find_desc+0x50>)
    d268:	4798      	blx	r3
    d26a:	4603      	mov	r3, r0
    d26c:	2b01      	cmp	r3, #1
    d26e:	d801      	bhi.n	d274 <usb_find_desc+0x20>
    d270:	2300      	movs	r3, #0
    d272:	e012      	b.n	d29a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d274:	68f8      	ldr	r0, [r7, #12]
    d276:	4b0c      	ldr	r3, [pc, #48]	; (d2a8 <usb_find_desc+0x54>)
    d278:	4798      	blx	r3
    d27a:	4603      	mov	r3, r0
    d27c:	461a      	mov	r2, r3
    d27e:	79fb      	ldrb	r3, [r7, #7]
    d280:	4293      	cmp	r3, r2
    d282:	d101      	bne.n	d288 <usb_find_desc+0x34>
			return desc;
    d284:	68fb      	ldr	r3, [r7, #12]
    d286:	e008      	b.n	d29a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d288:	68f8      	ldr	r0, [r7, #12]
    d28a:	4b08      	ldr	r3, [pc, #32]	; (d2ac <usb_find_desc+0x58>)
    d28c:	4798      	blx	r3
    d28e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d290:	68fa      	ldr	r2, [r7, #12]
    d292:	68bb      	ldr	r3, [r7, #8]
    d294:	429a      	cmp	r2, r3
    d296:	d3e5      	bcc.n	d264 <usb_find_desc+0x10>
	}
	return NULL;
    d298:	2300      	movs	r3, #0
}
    d29a:	4618      	mov	r0, r3
    d29c:	3710      	adds	r7, #16
    d29e:	46bd      	mov	sp, r7
    d2a0:	bd80      	pop	{r7, pc}
    d2a2:	bf00      	nop
    d2a4:	0000d1bb 	.word	0x0000d1bb
    d2a8:	0000d1d3 	.word	0x0000d1d3
    d2ac:	0000d1ed 	.word	0x0000d1ed

0000d2b0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d2b0:	b580      	push	{r7, lr}
    d2b2:	b082      	sub	sp, #8
    d2b4:	af00      	add	r7, sp, #0
    d2b6:	6078      	str	r0, [r7, #4]
    d2b8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d2ba:	e019      	b.n	d2f0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d2bc:	6878      	ldr	r0, [r7, #4]
    d2be:	4b12      	ldr	r3, [pc, #72]	; (d308 <usb_find_ep_desc+0x58>)
    d2c0:	4798      	blx	r3
    d2c2:	4603      	mov	r3, r0
    d2c4:	2b01      	cmp	r3, #1
    d2c6:	d801      	bhi.n	d2cc <usb_find_ep_desc+0x1c>
    d2c8:	2300      	movs	r3, #0
    d2ca:	e018      	b.n	d2fe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d2cc:	6878      	ldr	r0, [r7, #4]
    d2ce:	4b0f      	ldr	r3, [pc, #60]	; (d30c <usb_find_ep_desc+0x5c>)
    d2d0:	4798      	blx	r3
    d2d2:	4603      	mov	r3, r0
    d2d4:	2b04      	cmp	r3, #4
    d2d6:	d010      	beq.n	d2fa <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d2d8:	6878      	ldr	r0, [r7, #4]
    d2da:	4b0c      	ldr	r3, [pc, #48]	; (d30c <usb_find_ep_desc+0x5c>)
    d2dc:	4798      	blx	r3
    d2de:	4603      	mov	r3, r0
    d2e0:	2b05      	cmp	r3, #5
    d2e2:	d101      	bne.n	d2e8 <usb_find_ep_desc+0x38>
			return desc;
    d2e4:	687b      	ldr	r3, [r7, #4]
    d2e6:	e00a      	b.n	d2fe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d2e8:	6878      	ldr	r0, [r7, #4]
    d2ea:	4b09      	ldr	r3, [pc, #36]	; (d310 <usb_find_ep_desc+0x60>)
    d2ec:	4798      	blx	r3
    d2ee:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d2f0:	687a      	ldr	r2, [r7, #4]
    d2f2:	683b      	ldr	r3, [r7, #0]
    d2f4:	429a      	cmp	r2, r3
    d2f6:	d3e1      	bcc.n	d2bc <usb_find_ep_desc+0xc>
    d2f8:	e000      	b.n	d2fc <usb_find_ep_desc+0x4c>
			break;
    d2fa:	bf00      	nop
	}
	return NULL;
    d2fc:	2300      	movs	r3, #0
}
    d2fe:	4618      	mov	r0, r3
    d300:	3708      	adds	r7, #8
    d302:	46bd      	mov	sp, r7
    d304:	bd80      	pop	{r7, pc}
    d306:	bf00      	nop
    d308:	0000d1bb 	.word	0x0000d1bb
    d30c:	0000d1d3 	.word	0x0000d1d3
    d310:	0000d1ed 	.word	0x0000d1ed

0000d314 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d314:	b580      	push	{r7, lr}
    d316:	b084      	sub	sp, #16
    d318:	af00      	add	r7, sp, #0
    d31a:	60f8      	str	r0, [r7, #12]
    d31c:	60b9      	str	r1, [r7, #8]
    d31e:	4613      	mov	r3, r2
    d320:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d322:	2202      	movs	r2, #2
    d324:	68b9      	ldr	r1, [r7, #8]
    d326:	68f8      	ldr	r0, [r7, #12]
    d328:	4b15      	ldr	r3, [pc, #84]	; (d380 <usb_find_cfg_desc+0x6c>)
    d32a:	4798      	blx	r3
    d32c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d32e:	68fb      	ldr	r3, [r7, #12]
    d330:	2b00      	cmp	r3, #0
    d332:	d11a      	bne.n	d36a <usb_find_cfg_desc+0x56>
		return NULL;
    d334:	2300      	movs	r3, #0
    d336:	e01f      	b.n	d378 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d338:	68f8      	ldr	r0, [r7, #12]
    d33a:	4b12      	ldr	r3, [pc, #72]	; (d384 <usb_find_cfg_desc+0x70>)
    d33c:	4798      	blx	r3
    d33e:	4603      	mov	r3, r0
    d340:	2b01      	cmp	r3, #1
    d342:	d801      	bhi.n	d348 <usb_find_cfg_desc+0x34>
    d344:	2300      	movs	r3, #0
    d346:	e017      	b.n	d378 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d348:	68fb      	ldr	r3, [r7, #12]
    d34a:	3301      	adds	r3, #1
    d34c:	781b      	ldrb	r3, [r3, #0]
    d34e:	2b02      	cmp	r3, #2
    d350:	d110      	bne.n	d374 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d352:	68fb      	ldr	r3, [r7, #12]
    d354:	3305      	adds	r3, #5
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	79fa      	ldrb	r2, [r7, #7]
    d35a:	429a      	cmp	r2, r3
    d35c:	d101      	bne.n	d362 <usb_find_cfg_desc+0x4e>
			return desc;
    d35e:	68fb      	ldr	r3, [r7, #12]
    d360:	e00a      	b.n	d378 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d362:	68f8      	ldr	r0, [r7, #12]
    d364:	4b08      	ldr	r3, [pc, #32]	; (d388 <usb_find_cfg_desc+0x74>)
    d366:	4798      	blx	r3
    d368:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d36a:	68fa      	ldr	r2, [r7, #12]
    d36c:	68bb      	ldr	r3, [r7, #8]
    d36e:	429a      	cmp	r2, r3
    d370:	d3e2      	bcc.n	d338 <usb_find_cfg_desc+0x24>
    d372:	e000      	b.n	d376 <usb_find_cfg_desc+0x62>
			break;
    d374:	bf00      	nop
	}
	return NULL;
    d376:	2300      	movs	r3, #0
}
    d378:	4618      	mov	r0, r3
    d37a:	3710      	adds	r7, #16
    d37c:	46bd      	mov	sp, r7
    d37e:	bd80      	pop	{r7, pc}
    d380:	0000d255 	.word	0x0000d255
    d384:	0000d1bb 	.word	0x0000d1bb
    d388:	0000d231 	.word	0x0000d231

0000d38c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d38c:	b580      	push	{r7, lr}
    d38e:	b086      	sub	sp, #24
    d390:	af00      	add	r7, sp, #0
    d392:	60f8      	str	r0, [r7, #12]
    d394:	60b9      	str	r1, [r7, #8]
    d396:	4613      	mov	r3, r2
    d398:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d39a:	2300      	movs	r3, #0
    d39c:	75fb      	strb	r3, [r7, #23]
    d39e:	e020      	b.n	d3e2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d3a0:	2203      	movs	r2, #3
    d3a2:	68b9      	ldr	r1, [r7, #8]
    d3a4:	68f8      	ldr	r0, [r7, #12]
    d3a6:	4b13      	ldr	r3, [pc, #76]	; (d3f4 <usb_find_str_desc+0x68>)
    d3a8:	4798      	blx	r3
    d3aa:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d3ac:	68fb      	ldr	r3, [r7, #12]
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d015      	beq.n	d3de <usb_find_str_desc+0x52>
			_desc_len_check();
    d3b2:	68f8      	ldr	r0, [r7, #12]
    d3b4:	4b10      	ldr	r3, [pc, #64]	; (d3f8 <usb_find_str_desc+0x6c>)
    d3b6:	4798      	blx	r3
    d3b8:	4603      	mov	r3, r0
    d3ba:	2b01      	cmp	r3, #1
    d3bc:	d801      	bhi.n	d3c2 <usb_find_str_desc+0x36>
    d3be:	2300      	movs	r3, #0
    d3c0:	e014      	b.n	d3ec <usb_find_str_desc+0x60>
			if (i == str_index) {
    d3c2:	7dfa      	ldrb	r2, [r7, #23]
    d3c4:	79fb      	ldrb	r3, [r7, #7]
    d3c6:	429a      	cmp	r2, r3
    d3c8:	d101      	bne.n	d3ce <usb_find_str_desc+0x42>
				return desc;
    d3ca:	68fb      	ldr	r3, [r7, #12]
    d3cc:	e00e      	b.n	d3ec <usb_find_str_desc+0x60>
			}
			i++;
    d3ce:	7dfb      	ldrb	r3, [r7, #23]
    d3d0:	3301      	adds	r3, #1
    d3d2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d3d4:	68f8      	ldr	r0, [r7, #12]
    d3d6:	4b09      	ldr	r3, [pc, #36]	; (d3fc <usb_find_str_desc+0x70>)
    d3d8:	4798      	blx	r3
    d3da:	60f8      	str	r0, [r7, #12]
    d3dc:	e001      	b.n	d3e2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d3de:	2300      	movs	r3, #0
    d3e0:	e004      	b.n	d3ec <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d3e2:	68fa      	ldr	r2, [r7, #12]
    d3e4:	68bb      	ldr	r3, [r7, #8]
    d3e6:	429a      	cmp	r2, r3
    d3e8:	d3da      	bcc.n	d3a0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d3ea:	2300      	movs	r3, #0
}
    d3ec:	4618      	mov	r0, r3
    d3ee:	3718      	adds	r7, #24
    d3f0:	46bd      	mov	sp, r7
    d3f2:	bd80      	pop	{r7, pc}
    d3f4:	0000d255 	.word	0x0000d255
    d3f8:	0000d1bb 	.word	0x0000d1bb
    d3fc:	0000d1ed 	.word	0x0000d1ed

0000d400 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d400:	b480      	push	{r7}
    d402:	b083      	sub	sp, #12
    d404:	af00      	add	r7, sp, #0
    d406:	6078      	str	r0, [r7, #4]
    d408:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d40a:	687b      	ldr	r3, [r7, #4]
    d40c:	683a      	ldr	r2, [r7, #0]
    d40e:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	4618      	mov	r0, r3
    d414:	370c      	adds	r7, #12
    d416:	46bd      	mov	sp, r7
    d418:	bc80      	pop	{r7}
    d41a:	4770      	bx	lr

0000d41c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d41c:	b480      	push	{r7}
    d41e:	b083      	sub	sp, #12
    d420:	af00      	add	r7, sp, #0
    d422:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d424:	687b      	ldr	r3, [r7, #4]
    d426:	4618      	mov	r0, r3
    d428:	370c      	adds	r7, #12
    d42a:	46bd      	mov	sp, r7
    d42c:	bc80      	pop	{r7}
    d42e:	4770      	bx	lr

0000d430 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d430:	b580      	push	{r7, lr}
    d432:	b084      	sub	sp, #16
    d434:	af00      	add	r7, sp, #0
    d436:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	4a14      	ldr	r2, [pc, #80]	; (d48c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d43c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	4a12      	ldr	r2, [pc, #72]	; (d48c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    d442:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	691a      	ldr	r2, [r3, #16]
    d448:	687b      	ldr	r3, [r7, #4]
    d44a:	330c      	adds	r3, #12
    d44c:	4619      	mov	r1, r3
    d44e:	4610      	mov	r0, r2
    d450:	4b0f      	ldr	r3, [pc, #60]	; (d490 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    d452:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	691b      	ldr	r3, [r3, #16]
    d458:	4618      	mov	r0, r3
    d45a:	4b0e      	ldr	r3, [pc, #56]	; (d494 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    d45c:	4798      	blx	r3
    d45e:	4603      	mov	r3, r0
    d460:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    d462:	7bfb      	ldrb	r3, [r7, #15]
    d464:	2b00      	cmp	r3, #0
    d466:	bf0c      	ite	eq
    d468:	2301      	moveq	r3, #1
    d46a:	2300      	movne	r3, #0
    d46c:	b2da      	uxtb	r2, r3
    d46e:	687b      	ldr	r3, [r7, #4]
    d470:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    d472:	687b      	ldr	r3, [r7, #4]
    d474:	7a5b      	ldrb	r3, [r3, #9]
    d476:	b2da      	uxtb	r2, r3
    d478:	687b      	ldr	r3, [r7, #4]
    d47a:	721a      	strb	r2, [r3, #8]
	return isOK;
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	7a5b      	ldrb	r3, [r3, #9]
    d480:	b2db      	uxtb	r3, r3
	
}
    d482:	4618      	mov	r0, r3
    d484:	3710      	adds	r7, #16
    d486:	46bd      	mov	sp, r7
    d488:	bd80      	pop	{r7, pc}
    d48a:	bf00      	nop
    d48c:	20000ccc 	.word	0x20000ccc
    d490:	0000230b 	.word	0x0000230b
    d494:	000022b1 	.word	0x000022b1

0000d498 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d498:	b580      	push	{r7, lr}
    d49a:	b082      	sub	sp, #8
    d49c:	af00      	add	r7, sp, #0
    d49e:	6078      	str	r0, [r7, #4]
    d4a0:	460b      	mov	r3, r1
    d4a2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d4a4:	687b      	ldr	r3, [r7, #4]
    d4a6:	691b      	ldr	r3, [r3, #16]
    d4a8:	78fa      	ldrb	r2, [r7, #3]
    d4aa:	b211      	sxth	r1, r2
    d4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d4b0:	4618      	mov	r0, r3
    d4b2:	4b03      	ldr	r3, [pc, #12]	; (d4c0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d4b4:	4798      	blx	r3
    d4b6:	4603      	mov	r3, r0
}
    d4b8:	4618      	mov	r0, r3
    d4ba:	3708      	adds	r7, #8
    d4bc:	46bd      	mov	sp, r7
    d4be:	bd80      	pop	{r7, pc}
    d4c0:	000022d1 	.word	0x000022d1

0000d4c4 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d4c4:	b580      	push	{r7, lr}
    d4c6:	b086      	sub	sp, #24
    d4c8:	af00      	add	r7, sp, #0
    d4ca:	60f8      	str	r0, [r7, #12]
    d4cc:	60b9      	str	r1, [r7, #8]
    d4ce:	4613      	mov	r3, r2
    d4d0:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d4d2:	68fb      	ldr	r3, [r7, #12]
    d4d4:	68db      	ldr	r3, [r3, #12]
    d4d6:	88fa      	ldrh	r2, [r7, #6]
    d4d8:	68b9      	ldr	r1, [r7, #8]
    d4da:	4618      	mov	r0, r3
    d4dc:	4b03      	ldr	r3, [pc, #12]	; (d4ec <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d4de:	4798      	blx	r3
    d4e0:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d4e2:	697b      	ldr	r3, [r7, #20]
}
    d4e4:	4618      	mov	r0, r3
    d4e6:	3718      	adds	r7, #24
    d4e8:	46bd      	mov	sp, r7
    d4ea:	bd80      	pop	{r7, pc}
    d4ec:	0000e8e5 	.word	0x0000e8e5

0000d4f0 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d4f0:	b580      	push	{r7, lr}
    d4f2:	b086      	sub	sp, #24
    d4f4:	af00      	add	r7, sp, #0
    d4f6:	60f8      	str	r0, [r7, #12]
    d4f8:	60b9      	str	r1, [r7, #8]
    d4fa:	4613      	mov	r3, r2
    d4fc:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d4fe:	68fb      	ldr	r3, [r7, #12]
    d500:	68db      	ldr	r3, [r3, #12]
    d502:	88fa      	ldrh	r2, [r7, #6]
    d504:	68b9      	ldr	r1, [r7, #8]
    d506:	4618      	mov	r0, r3
    d508:	4b03      	ldr	r3, [pc, #12]	; (d518 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d50a:	4798      	blx	r3
    d50c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d50e:	697b      	ldr	r3, [r7, #20]
}
    d510:	4618      	mov	r0, r3
    d512:	3718      	adds	r7, #24
    d514:	46bd      	mov	sp, r7
    d516:	bd80      	pop	{r7, pc}
    d518:	0000e935 	.word	0x0000e935

0000d51c <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d51c:	b480      	push	{r7}
    d51e:	b083      	sub	sp, #12
    d520:	af00      	add	r7, sp, #0
    d522:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	4618      	mov	r0, r3
    d528:	370c      	adds	r7, #12
    d52a:	46bd      	mov	sp, r7
    d52c:	bc80      	pop	{r7}
    d52e:	4770      	bx	lr

0000d530 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d530:	b480      	push	{r7}
    d532:	b083      	sub	sp, #12
    d534:	af00      	add	r7, sp, #0
    d536:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d538:	687b      	ldr	r3, [r7, #4]
    d53a:	4618      	mov	r0, r3
    d53c:	370c      	adds	r7, #12
    d53e:	46bd      	mov	sp, r7
    d540:	bc80      	pop	{r7}
    d542:	4770      	bx	lr

0000d544 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d544:	b480      	push	{r7}
    d546:	b085      	sub	sp, #20
    d548:	af00      	add	r7, sp, #0
    d54a:	60f8      	str	r0, [r7, #12]
    d54c:	460b      	mov	r3, r1
    d54e:	607a      	str	r2, [r7, #4]
    d550:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	681a      	ldr	r2, [r3, #0]
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	685a      	ldr	r2, [r3, #4]
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    d562:	68fb      	ldr	r3, [r7, #12]
    d564:	7afa      	ldrb	r2, [r7, #11]
    d566:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    d568:	68fb      	ldr	r3, [r7, #12]
    d56a:	687a      	ldr	r2, [r7, #4]
    d56c:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	691b      	ldr	r3, [r3, #16]
    d572:	7a5b      	ldrb	r3, [r3, #9]
    d574:	b2da      	uxtb	r2, r3
    d576:	68fb      	ldr	r3, [r7, #12]
    d578:	729a      	strb	r2, [r3, #10]
	return isOK;
    d57a:	68fb      	ldr	r3, [r7, #12]
    d57c:	7a9b      	ldrb	r3, [r3, #10]
    d57e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d580:	4618      	mov	r0, r3
    d582:	3714      	adds	r7, #20
    d584:	46bd      	mov	sp, r7
    d586:	bc80      	pop	{r7}
    d588:	4770      	bx	lr

0000d58a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d58a:	b480      	push	{r7}
    d58c:	b083      	sub	sp, #12
    d58e:	af00      	add	r7, sp, #0
    d590:	6078      	str	r0, [r7, #4]
    d592:	460b      	mov	r3, r1
    d594:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d596:	78fb      	ldrb	r3, [r7, #3]
    d598:	f003 0307 	and.w	r3, r3, #7
    d59c:	b2db      	uxtb	r3, r3
}
    d59e:	4618      	mov	r0, r3
    d5a0:	370c      	adds	r7, #12
    d5a2:	46bd      	mov	sp, r7
    d5a4:	bc80      	pop	{r7}
    d5a6:	4770      	bx	lr

0000d5a8 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d5a8:	b480      	push	{r7}
    d5aa:	b083      	sub	sp, #12
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
    d5b0:	4608      	mov	r0, r1
    d5b2:	4611      	mov	r1, r2
    d5b4:	461a      	mov	r2, r3
    d5b6:	4603      	mov	r3, r0
    d5b8:	70fb      	strb	r3, [r7, #3]
    d5ba:	460b      	mov	r3, r1
    d5bc:	70bb      	strb	r3, [r7, #2]
    d5be:	4613      	mov	r3, r2
    d5c0:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d5c2:	78fb      	ldrb	r3, [r7, #3]
    d5c4:	2b07      	cmp	r3, #7
    d5c6:	dc01      	bgt.n	d5cc <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d5c8:	78bb      	ldrb	r3, [r7, #2]
    d5ca:	e000      	b.n	d5ce <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d5cc:	787b      	ldrb	r3, [r7, #1]
}
    d5ce:	4618      	mov	r0, r3
    d5d0:	370c      	adds	r7, #12
    d5d2:	46bd      	mov	sp, r7
    d5d4:	bc80      	pop	{r7}
    d5d6:	4770      	bx	lr

0000d5d8 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d5d8:	b580      	push	{r7, lr}
    d5da:	b082      	sub	sp, #8
    d5dc:	af00      	add	r7, sp, #0
    d5de:	6078      	str	r0, [r7, #4]
    d5e0:	460b      	mov	r3, r1
    d5e2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	691a      	ldr	r2, [r3, #16]
    d5e8:	687b      	ldr	r3, [r7, #4]
    d5ea:	7b1b      	ldrb	r3, [r3, #12]
    d5ec:	4619      	mov	r1, r3
    d5ee:	4610      	mov	r0, r2
    d5f0:	4b0b      	ldr	r3, [pc, #44]	; (d620 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d5f2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d5f4:	687b      	ldr	r3, [r7, #4]
    d5f6:	691b      	ldr	r3, [r3, #16]
    d5f8:	1cf9      	adds	r1, r7, #3
    d5fa:	2201      	movs	r2, #1
    d5fc:	4618      	mov	r0, r3
    d5fe:	4b09      	ldr	r3, [pc, #36]	; (d624 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d600:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d602:	687b      	ldr	r3, [r7, #4]
    d604:	6918      	ldr	r0, [r3, #16]
    d606:	687b      	ldr	r3, [r7, #4]
    d608:	3304      	adds	r3, #4
    d60a:	2201      	movs	r2, #1
    d60c:	4619      	mov	r1, r3
    d60e:	4b06      	ldr	r3, [pc, #24]	; (d628 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    d610:	4798      	blx	r3

	return registerValue;
    d612:	687b      	ldr	r3, [r7, #4]
    d614:	791b      	ldrb	r3, [r3, #4]
}
    d616:	4618      	mov	r0, r3
    d618:	3708      	adds	r7, #8
    d61a:	46bd      	mov	sp, r7
    d61c:	bd80      	pop	{r7, pc}
    d61e:	bf00      	nop
    d620:	0000d499 	.word	0x0000d499
    d624:	0000d4c5 	.word	0x0000d4c5
    d628:	0000d4f1 	.word	0x0000d4f1

0000d62c <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d62c:	b580      	push	{r7, lr}
    d62e:	b082      	sub	sp, #8
    d630:	af00      	add	r7, sp, #0
    d632:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    d634:	687b      	ldr	r3, [r7, #4]
    d636:	691a      	ldr	r2, [r3, #16]
    d638:	687b      	ldr	r3, [r7, #4]
    d63a:	7b1b      	ldrb	r3, [r3, #12]
    d63c:	4619      	mov	r1, r3
    d63e:	4610      	mov	r0, r2
    d640:	4b05      	ldr	r3, [pc, #20]	; (d658 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    d642:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    d644:	2109      	movs	r1, #9
    d646:	6878      	ldr	r0, [r7, #4]
    d648:	4b04      	ldr	r3, [pc, #16]	; (d65c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d64a:	4798      	blx	r3
    d64c:	4603      	mov	r3, r0
}
    d64e:	4618      	mov	r0, r3
    d650:	3708      	adds	r7, #8
    d652:	46bd      	mov	sp, r7
    d654:	bd80      	pop	{r7, pc}
    d656:	bf00      	nop
    d658:	0000d499 	.word	0x0000d499
    d65c:	0000d5d9 	.word	0x0000d5d9

0000d660 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d660:	b580      	push	{r7, lr}
    d662:	b084      	sub	sp, #16
    d664:	af00      	add	r7, sp, #0
    d666:	6078      	str	r0, [r7, #4]
    d668:	460b      	mov	r3, r1
    d66a:	70fb      	strb	r3, [r7, #3]
    d66c:	4613      	mov	r3, r2
    d66e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	691a      	ldr	r2, [r3, #16]
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	7b1b      	ldrb	r3, [r3, #12]
    d678:	4619      	mov	r1, r3
    d67a:	4610      	mov	r0, r2
    d67c:	4b09      	ldr	r3, [pc, #36]	; (d6a4 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d67e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d680:	78fb      	ldrb	r3, [r7, #3]
    d682:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d684:	78bb      	ldrb	r3, [r7, #2]
    d686:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d688:	687b      	ldr	r3, [r7, #4]
    d68a:	691b      	ldr	r3, [r3, #16]
    d68c:	f107 010c 	add.w	r1, r7, #12
    d690:	2202      	movs	r2, #2
    d692:	4618      	mov	r0, r3
    d694:	4b04      	ldr	r3, [pc, #16]	; (d6a8 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d696:	4798      	blx	r3
    d698:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d69a:	4618      	mov	r0, r3
    d69c:	3710      	adds	r7, #16
    d69e:	46bd      	mov	sp, r7
    d6a0:	bd80      	pop	{r7, pc}
    d6a2:	bf00      	nop
    d6a4:	0000d499 	.word	0x0000d499
    d6a8:	0000d4c5 	.word	0x0000d4c5

0000d6ac <_ZN14MCP23008_Class12SetPortInputEv>:
	writeRegister(MCP23008_GPIOA,v);
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d6ac:	b580      	push	{r7, lr}
    d6ae:	b084      	sub	sp, #16
    d6b0:	af00      	add	r7, sp, #0
    d6b2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d6b4:	2300      	movs	r3, #0
    d6b6:	73fb      	strb	r3, [r7, #15]
    d6b8:	7bfb      	ldrb	r3, [r7, #15]
    d6ba:	2b07      	cmp	r3, #7
    d6bc:	dc0f      	bgt.n	d6de <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d6be:	7bfb      	ldrb	r3, [r7, #15]
    d6c0:	2201      	movs	r2, #1
    d6c2:	4619      	mov	r1, r3
    d6c4:	6878      	ldr	r0, [r7, #4]
    d6c6:	4b08      	ldr	r3, [pc, #32]	; (d6e8 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d6c8:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d6ca:	7bfb      	ldrb	r3, [r7, #15]
    d6cc:	2201      	movs	r2, #1
    d6ce:	4619      	mov	r1, r3
    d6d0:	6878      	ldr	r0, [r7, #4]
    d6d2:	4b06      	ldr	r3, [pc, #24]	; (d6ec <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d6d4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d6d6:	7bfb      	ldrb	r3, [r7, #15]
    d6d8:	3301      	adds	r3, #1
    d6da:	73fb      	strb	r3, [r7, #15]
    d6dc:	e7ec      	b.n	d6b8 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d6de:	bf00      	nop
    d6e0:	3710      	adds	r7, #16
    d6e2:	46bd      	mov	sp, r7
    d6e4:	bd80      	pop	{r7, pc}
    d6e6:	bf00      	nop
    d6e8:	0000d7b1 	.word	0x0000d7b1
    d6ec:	0000d895 	.word	0x0000d895

0000d6f0 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d6f0:	b580      	push	{r7, lr}
    d6f2:	b084      	sub	sp, #16
    d6f4:	af00      	add	r7, sp, #0
    d6f6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d6f8:	2300      	movs	r3, #0
    d6fa:	73fb      	strb	r3, [r7, #15]
    d6fc:	7bfb      	ldrb	r3, [r7, #15]
    d6fe:	2b07      	cmp	r3, #7
    d700:	dc09      	bgt.n	d716 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d702:	7bfb      	ldrb	r3, [r7, #15]
    d704:	2200      	movs	r2, #0
    d706:	4619      	mov	r1, r3
    d708:	6878      	ldr	r0, [r7, #4]
    d70a:	4b05      	ldr	r3, [pc, #20]	; (d720 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d70c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d70e:	7bfb      	ldrb	r3, [r7, #15]
    d710:	3301      	adds	r3, #1
    d712:	73fb      	strb	r3, [r7, #15]
    d714:	e7f2      	b.n	d6fc <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d716:	bf00      	nop
    d718:	3710      	adds	r7, #16
    d71a:	46bd      	mov	sp, r7
    d71c:	bd80      	pop	{r7, pc}
    d71e:	bf00      	nop
    d720:	0000d7b1 	.word	0x0000d7b1

0000d724 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d724:	b580      	push	{r7, lr}
    d726:	b084      	sub	sp, #16
    d728:	af00      	add	r7, sp, #0
    d72a:	6078      	str	r0, [r7, #4]
    d72c:	4608      	mov	r0, r1
    d72e:	4611      	mov	r1, r2
    d730:	461a      	mov	r2, r3
    d732:	4603      	mov	r3, r0
    d734:	70fb      	strb	r3, [r7, #3]
    d736:	460b      	mov	r3, r1
    d738:	70bb      	strb	r3, [r7, #2]
    d73a:	4613      	mov	r3, r2
    d73c:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d73e:	787b      	ldrb	r3, [r7, #1]
    d740:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d742:	78fb      	ldrb	r3, [r7, #3]
    d744:	4619      	mov	r1, r3
    d746:	6878      	ldr	r0, [r7, #4]
    d748:	4b16      	ldr	r3, [pc, #88]	; (d7a4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d74a:	4798      	blx	r3
    d74c:	4603      	mov	r3, r0
    d74e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d750:	7bfb      	ldrb	r3, [r7, #15]
    d752:	4619      	mov	r1, r3
    d754:	6878      	ldr	r0, [r7, #4]
    d756:	4b14      	ldr	r3, [pc, #80]	; (d7a8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d758:	4798      	blx	r3
    d75a:	4603      	mov	r3, r0
    d75c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d75e:	78bb      	ldrb	r3, [r7, #2]
    d760:	2b00      	cmp	r3, #0
    d762:	d009      	beq.n	d778 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d764:	7bba      	ldrb	r2, [r7, #14]
    d766:	7b7b      	ldrb	r3, [r7, #13]
    d768:	4619      	mov	r1, r3
    d76a:	2301      	movs	r3, #1
    d76c:	408b      	lsls	r3, r1
    d76e:	b2db      	uxtb	r3, r3
    d770:	4313      	orrs	r3, r2
    d772:	b2db      	uxtb	r3, r3
    d774:	73bb      	strb	r3, [r7, #14]
    d776:	e00a      	b.n	d78e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d778:	7bba      	ldrb	r2, [r7, #14]
    d77a:	7b7b      	ldrb	r3, [r7, #13]
    d77c:	4619      	mov	r1, r3
    d77e:	2301      	movs	r3, #1
    d780:	408b      	lsls	r3, r1
    d782:	b2db      	uxtb	r3, r3
    d784:	43db      	mvns	r3, r3
    d786:	b2db      	uxtb	r3, r3
    d788:	4013      	ands	r3, r2
    d78a:	b2db      	uxtb	r3, r3
    d78c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d78e:	7bba      	ldrb	r2, [r7, #14]
    d790:	7bfb      	ldrb	r3, [r7, #15]
    d792:	4619      	mov	r1, r3
    d794:	6878      	ldr	r0, [r7, #4]
    d796:	4b05      	ldr	r3, [pc, #20]	; (d7ac <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d798:	4798      	blx	r3
}
    d79a:	bf00      	nop
    d79c:	3710      	adds	r7, #16
    d79e:	46bd      	mov	sp, r7
    d7a0:	bd80      	pop	{r7, pc}
    d7a2:	bf00      	nop
    d7a4:	0000d58b 	.word	0x0000d58b
    d7a8:	0000d5d9 	.word	0x0000d5d9
    d7ac:	0000d661 	.word	0x0000d661

0000d7b0 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d7b0:	b590      	push	{r4, r7, lr}
    d7b2:	b085      	sub	sp, #20
    d7b4:	af02      	add	r7, sp, #8
    d7b6:	6078      	str	r0, [r7, #4]
    d7b8:	460b      	mov	r3, r1
    d7ba:	70fb      	strb	r3, [r7, #3]
    d7bc:	4613      	mov	r3, r2
    d7be:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d7c0:	78bb      	ldrb	r3, [r7, #2]
    d7c2:	2b01      	cmp	r3, #1
    d7c4:	bf0c      	ite	eq
    d7c6:	2301      	moveq	r3, #1
    d7c8:	2300      	movne	r3, #0
    d7ca:	b2db      	uxtb	r3, r3
    d7cc:	461a      	mov	r2, r3
    d7ce:	78f9      	ldrb	r1, [r7, #3]
    d7d0:	2300      	movs	r3, #0
    d7d2:	9300      	str	r3, [sp, #0]
    d7d4:	2300      	movs	r3, #0
    d7d6:	6878      	ldr	r0, [r7, #4]
    d7d8:	4c02      	ldr	r4, [pc, #8]	; (d7e4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d7da:	47a0      	blx	r4
}
    d7dc:	bf00      	nop
    d7de:	370c      	adds	r7, #12
    d7e0:	46bd      	mov	sp, r7
    d7e2:	bd90      	pop	{r4, r7, pc}
    d7e4:	0000d725 	.word	0x0000d725

0000d7e8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d7e8:	b590      	push	{r4, r7, lr}
    d7ea:	b085      	sub	sp, #20
    d7ec:	af00      	add	r7, sp, #0
    d7ee:	6078      	str	r0, [r7, #4]
    d7f0:	460b      	mov	r3, r1
    d7f2:	70fb      	strb	r3, [r7, #3]
    d7f4:	4613      	mov	r3, r2
    d7f6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d7f8:	78fb      	ldrb	r3, [r7, #3]
    d7fa:	4619      	mov	r1, r3
    d7fc:	6878      	ldr	r0, [r7, #4]
    d7fe:	4b21      	ldr	r3, [pc, #132]	; (d884 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d800:	4798      	blx	r3
    d802:	4603      	mov	r3, r0
    d804:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d806:	78f9      	ldrb	r1, [r7, #3]
    d808:	230a      	movs	r3, #10
    d80a:	220a      	movs	r2, #10
    d80c:	6878      	ldr	r0, [r7, #4]
    d80e:	4c1e      	ldr	r4, [pc, #120]	; (d888 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d810:	47a0      	blx	r4
    d812:	4603      	mov	r3, r0
    d814:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d816:	7bfb      	ldrb	r3, [r7, #15]
    d818:	4619      	mov	r1, r3
    d81a:	6878      	ldr	r0, [r7, #4]
    d81c:	4b1b      	ldr	r3, [pc, #108]	; (d88c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d81e:	4798      	blx	r3
    d820:	4603      	mov	r3, r0
    d822:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d824:	78bb      	ldrb	r3, [r7, #2]
    d826:	2b00      	cmp	r3, #0
    d828:	d009      	beq.n	d83e <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d82a:	7bba      	ldrb	r2, [r7, #14]
    d82c:	7b7b      	ldrb	r3, [r7, #13]
    d82e:	4619      	mov	r1, r3
    d830:	2301      	movs	r3, #1
    d832:	408b      	lsls	r3, r1
    d834:	b2db      	uxtb	r3, r3
    d836:	4313      	orrs	r3, r2
    d838:	b2db      	uxtb	r3, r3
    d83a:	73bb      	strb	r3, [r7, #14]
    d83c:	e00a      	b.n	d854 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d83e:	7bba      	ldrb	r2, [r7, #14]
    d840:	7b7b      	ldrb	r3, [r7, #13]
    d842:	4619      	mov	r1, r3
    d844:	2301      	movs	r3, #1
    d846:	408b      	lsls	r3, r1
    d848:	b2db      	uxtb	r3, r3
    d84a:	43db      	mvns	r3, r3
    d84c:	b2db      	uxtb	r3, r3
    d84e:	4013      	ands	r3, r2
    d850:	b2db      	uxtb	r3, r3
    d852:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d854:	78f9      	ldrb	r1, [r7, #3]
    d856:	2309      	movs	r3, #9
    d858:	2209      	movs	r2, #9
    d85a:	6878      	ldr	r0, [r7, #4]
    d85c:	4c0a      	ldr	r4, [pc, #40]	; (d888 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d85e:	47a0      	blx	r4
    d860:	4603      	mov	r3, r0
    d862:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d864:	7bba      	ldrb	r2, [r7, #14]
    d866:	7bfb      	ldrb	r3, [r7, #15]
    d868:	4619      	mov	r1, r3
    d86a:	6878      	ldr	r0, [r7, #4]
    d86c:	4b08      	ldr	r3, [pc, #32]	; (d890 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d86e:	4798      	blx	r3
    d870:	4603      	mov	r3, r0
    d872:	2b00      	cmp	r3, #0
    d874:	bf0c      	ite	eq
    d876:	2301      	moveq	r3, #1
    d878:	2300      	movne	r3, #0
    d87a:	b2db      	uxtb	r3, r3
}
    d87c:	4618      	mov	r0, r3
    d87e:	3714      	adds	r7, #20
    d880:	46bd      	mov	sp, r7
    d882:	bd90      	pop	{r4, r7, pc}
    d884:	0000d58b 	.word	0x0000d58b
    d888:	0000d5a9 	.word	0x0000d5a9
    d88c:	0000d5d9 	.word	0x0000d5d9
    d890:	0000d661 	.word	0x0000d661

0000d894 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d894:	b590      	push	{r4, r7, lr}
    d896:	b085      	sub	sp, #20
    d898:	af02      	add	r7, sp, #8
    d89a:	6078      	str	r0, [r7, #4]
    d89c:	460b      	mov	r3, r1
    d89e:	70fb      	strb	r3, [r7, #3]
    d8a0:	4613      	mov	r3, r2
    d8a2:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d8a4:	78ba      	ldrb	r2, [r7, #2]
    d8a6:	78f9      	ldrb	r1, [r7, #3]
    d8a8:	2306      	movs	r3, #6
    d8aa:	9300      	str	r3, [sp, #0]
    d8ac:	2306      	movs	r3, #6
    d8ae:	6878      	ldr	r0, [r7, #4]
    d8b0:	4c02      	ldr	r4, [pc, #8]	; (d8bc <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d8b2:	47a0      	blx	r4
}
    d8b4:	bf00      	nop
    d8b6:	370c      	adds	r7, #12
    d8b8:	46bd      	mov	sp, r7
    d8ba:	bd90      	pop	{r4, r7, pc}
    d8bc:	0000d725 	.word	0x0000d725

0000d8c0 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d8c0:	b480      	push	{r7}
    d8c2:	b083      	sub	sp, #12
    d8c4:	af00      	add	r7, sp, #0
    d8c6:	6078      	str	r0, [r7, #4]
    d8c8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d8ca:	687b      	ldr	r3, [r7, #4]
    d8cc:	683a      	ldr	r2, [r7, #0]
    d8ce:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d8d0:	4a06      	ldr	r2, [pc, #24]	; (d8ec <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d8d6:	687b      	ldr	r3, [r7, #4]
    d8d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d8dc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	4618      	mov	r0, r3
    d8e2:	370c      	adds	r7, #12
    d8e4:	46bd      	mov	sp, r7
    d8e6:	bc80      	pop	{r7}
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop
    d8ec:	20000d4c 	.word	0x20000d4c

0000d8f0 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d8f0:	b480      	push	{r7}
    d8f2:	b083      	sub	sp, #12
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d8f8:	687b      	ldr	r3, [r7, #4]
    d8fa:	2200      	movs	r2, #0
    d8fc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	4618      	mov	r0, r3
    d902:	370c      	adds	r7, #12
    d904:	46bd      	mov	sp, r7
    d906:	bc80      	pop	{r7}
    d908:	4770      	bx	lr
	...

0000d90c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d90c:	b580      	push	{r7, lr}
    d90e:	b086      	sub	sp, #24
    d910:	af00      	add	r7, sp, #0
    d912:	60f8      	str	r0, [r7, #12]
    d914:	60b9      	str	r1, [r7, #8]
    d916:	607a      	str	r2, [r7, #4]
    d918:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d91a:	68f8      	ldr	r0, [r7, #12]
    d91c:	4b0d      	ldr	r3, [pc, #52]	; (d954 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d91e:	4798      	blx	r3
	task->interval = interval;
    d920:	68fb      	ldr	r3, [r7, #12]
    d922:	699b      	ldr	r3, [r3, #24]
    d924:	687a      	ldr	r2, [r7, #4]
    d926:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d928:	68fb      	ldr	r3, [r7, #12]
    d92a:	699b      	ldr	r3, [r3, #24]
    d92c:	68ba      	ldr	r2, [r7, #8]
    d92e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    d930:	68fb      	ldr	r3, [r7, #12]
    d932:	699b      	ldr	r3, [r3, #24]
    d934:	78fa      	ldrb	r2, [r7, #3]
    d936:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    d938:	68fb      	ldr	r3, [r7, #12]
    d93a:	68da      	ldr	r2, [r3, #12]
    d93c:	68fb      	ldr	r3, [r7, #12]
    d93e:	699b      	ldr	r3, [r3, #24]
    d940:	4619      	mov	r1, r3
    d942:	4610      	mov	r0, r2
    d944:	4b04      	ldr	r3, [pc, #16]	; (d958 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    d946:	4798      	blx	r3
    d948:	6178      	str	r0, [r7, #20]
	
	return status;
    d94a:	697b      	ldr	r3, [r7, #20]
}
    d94c:	4618      	mov	r0, r3
    d94e:	3718      	adds	r7, #24
    d950:	46bd      	mov	sp, r7
    d952:	bd80      	pop	{r7, pc}
    d954:	0000d9d1 	.word	0x0000d9d1
    d958:	0000284d 	.word	0x0000284d

0000d95c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    d95c:	b580      	push	{r7, lr}
    d95e:	b086      	sub	sp, #24
    d960:	af00      	add	r7, sp, #0
    d962:	60f8      	str	r0, [r7, #12]
    d964:	60b9      	str	r1, [r7, #8]
    d966:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    d968:	687a      	ldr	r2, [r7, #4]
    d96a:	68b9      	ldr	r1, [r7, #8]
    d96c:	68f8      	ldr	r0, [r7, #12]
    d96e:	4b0c      	ldr	r3, [pc, #48]	; (d9a0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    d970:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    d972:	68fb      	ldr	r3, [r7, #12]
    d974:	68db      	ldr	r3, [r3, #12]
    d976:	681b      	ldr	r3, [r3, #0]
    d978:	699b      	ldr	r3, [r3, #24]
    d97a:	68fa      	ldr	r2, [r7, #12]
    d97c:	68d2      	ldr	r2, [r2, #12]
    d97e:	3204      	adds	r2, #4
    d980:	4610      	mov	r0, r2
    d982:	4798      	blx	r3
    d984:	4603      	mov	r3, r0
    d986:	2b00      	cmp	r3, #0
    d988:	d105      	bne.n	d996 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    d98a:	68fb      	ldr	r3, [r7, #12]
    d98c:	68db      	ldr	r3, [r3, #12]
    d98e:	4618      	mov	r0, r3
    d990:	4b04      	ldr	r3, [pc, #16]	; (d9a4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    d992:	4798      	blx	r3
    d994:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    d996:	697b      	ldr	r3, [r7, #20]
}
    d998:	4618      	mov	r0, r3
    d99a:	3718      	adds	r7, #24
    d99c:	46bd      	mov	sp, r7
    d99e:	bd80      	pop	{r7, pc}
    d9a0:	0000d9a9 	.word	0x0000d9a9
    d9a4:	00002779 	.word	0x00002779

0000d9a8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    d9a8:	b590      	push	{r4, r7, lr}
    d9aa:	b087      	sub	sp, #28
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	60f8      	str	r0, [r7, #12]
    d9b0:	60b9      	str	r1, [r7, #8]
    d9b2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    d9b4:	2301      	movs	r3, #1
    d9b6:	687a      	ldr	r2, [r7, #4]
    d9b8:	68b9      	ldr	r1, [r7, #8]
    d9ba:	68f8      	ldr	r0, [r7, #12]
    d9bc:	4c03      	ldr	r4, [pc, #12]	; (d9cc <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    d9be:	47a0      	blx	r4
    d9c0:	6178      	str	r0, [r7, #20]
		return status;
    d9c2:	697b      	ldr	r3, [r7, #20]
}
    d9c4:	4618      	mov	r0, r3
    d9c6:	371c      	adds	r7, #28
    d9c8:	46bd      	mov	sp, r7
    d9ca:	bd90      	pop	{r4, r7, pc}
    d9cc:	0000d90d 	.word	0x0000d90d

0000d9d0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    d9d0:	b480      	push	{r7}
    d9d2:	b085      	sub	sp, #20
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    d9d8:	2300      	movs	r3, #0
    d9da:	73fb      	strb	r3, [r7, #15]
    d9dc:	7bfb      	ldrb	r3, [r7, #15]
    d9de:	2b0f      	cmp	r3, #15
    d9e0:	dc1c      	bgt.n	da1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    d9e2:	7bfb      	ldrb	r3, [r7, #15]
    d9e4:	f003 030f 	and.w	r3, r3, #15
    d9e8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    d9ea:	7bba      	ldrb	r2, [r7, #14]
    d9ec:	490f      	ldr	r1, [pc, #60]	; (da2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    d9ee:	4613      	mov	r3, r2
    d9f0:	009b      	lsls	r3, r3, #2
    d9f2:	4413      	add	r3, r2
    d9f4:	009b      	lsls	r3, r3, #2
    d9f6:	440b      	add	r3, r1
    d9f8:	330c      	adds	r3, #12
    d9fa:	681b      	ldr	r3, [r3, #0]
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d109      	bne.n	da14 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    da00:	7bba      	ldrb	r2, [r7, #14]
    da02:	4613      	mov	r3, r2
    da04:	009b      	lsls	r3, r3, #2
    da06:	4413      	add	r3, r2
    da08:	009b      	lsls	r3, r3, #2
    da0a:	4a08      	ldr	r2, [pc, #32]	; (da2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    da0c:	441a      	add	r2, r3
    da0e:	687b      	ldr	r3, [r7, #4]
    da10:	619a      	str	r2, [r3, #24]
			return;
    da12:	e006      	b.n	da22 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    da14:	7bfb      	ldrb	r3, [r7, #15]
    da16:	3301      	adds	r3, #1
    da18:	73fb      	strb	r3, [r7, #15]
    da1a:	e7df      	b.n	d9dc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	4a03      	ldr	r2, [pc, #12]	; (da2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    da20:	619a      	str	r2, [r3, #24]

}
    da22:	3714      	adds	r7, #20
    da24:	46bd      	mov	sp, r7
    da26:	bc80      	pop	{r7}
    da28:	4770      	bx	lr
    da2a:	bf00      	nop
    da2c:	20000d50 	.word	0x20000d50

0000da30 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    da30:	b580      	push	{r7, lr}
    da32:	b082      	sub	sp, #8
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	6039      	str	r1, [r7, #0]
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	2b01      	cmp	r3, #1
    da3e:	d131      	bne.n	daa4 <_Z41__static_initialization_and_destruction_0ii+0x74>
    da40:	683b      	ldr	r3, [r7, #0]
    da42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da46:	4293      	cmp	r3, r2
    da48:	d12c      	bne.n	daa4 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    da4a:	4918      	ldr	r1, [pc, #96]	; (daac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    da4c:	4818      	ldr	r0, [pc, #96]	; (dab0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    da4e:	4b19      	ldr	r3, [pc, #100]	; (dab4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    da50:	4798      	blx	r3
    da52:	4a19      	ldr	r2, [pc, #100]	; (dab8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    da54:	4919      	ldr	r1, [pc, #100]	; (dabc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    da56:	4816      	ldr	r0, [pc, #88]	; (dab0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    da58:	4b19      	ldr	r3, [pc, #100]	; (dac0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    da5a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    da5c:	4919      	ldr	r1, [pc, #100]	; (dac4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    da5e:	481a      	ldr	r0, [pc, #104]	; (dac8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    da60:	4b14      	ldr	r3, [pc, #80]	; (dab4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    da62:	4798      	blx	r3
    da64:	4a14      	ldr	r2, [pc, #80]	; (dab8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    da66:	4915      	ldr	r1, [pc, #84]	; (dabc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    da68:	4817      	ldr	r0, [pc, #92]	; (dac8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    da6a:	4b15      	ldr	r3, [pc, #84]	; (dac0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    da6c:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    da6e:	4917      	ldr	r1, [pc, #92]	; (dacc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    da70:	4817      	ldr	r0, [pc, #92]	; (dad0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    da72:	4b10      	ldr	r3, [pc, #64]	; (dab4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    da74:	4798      	blx	r3
    da76:	4a10      	ldr	r2, [pc, #64]	; (dab8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    da78:	4910      	ldr	r1, [pc, #64]	; (dabc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    da7a:	4815      	ldr	r0, [pc, #84]	; (dad0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    da7c:	4b10      	ldr	r3, [pc, #64]	; (dac0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    da7e:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    da80:	4914      	ldr	r1, [pc, #80]	; (dad4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    da82:	4815      	ldr	r0, [pc, #84]	; (dad8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    da84:	4b0b      	ldr	r3, [pc, #44]	; (dab4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    da86:	4798      	blx	r3
    da88:	4a0b      	ldr	r2, [pc, #44]	; (dab8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    da8a:	490c      	ldr	r1, [pc, #48]	; (dabc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    da8c:	4812      	ldr	r0, [pc, #72]	; (dad8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    da8e:	4b0c      	ldr	r3, [pc, #48]	; (dac0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    da90:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    da92:	4912      	ldr	r1, [pc, #72]	; (dadc <_Z41__static_initialization_and_destruction_0ii+0xac>)
    da94:	4812      	ldr	r0, [pc, #72]	; (dae0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    da96:	4b07      	ldr	r3, [pc, #28]	; (dab4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    da98:	4798      	blx	r3
    da9a:	4a07      	ldr	r2, [pc, #28]	; (dab8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    da9c:	4907      	ldr	r1, [pc, #28]	; (dabc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    da9e:	4810      	ldr	r0, [pc, #64]	; (dae0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    daa0:	4b07      	ldr	r3, [pc, #28]	; (dac0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    daa2:	4798      	blx	r3
    daa4:	bf00      	nop
    daa6:	3708      	adds	r7, #8
    daa8:	46bd      	mov	sp, r7
    daaa:	bd80      	pop	{r7, pc}
    daac:	2000101c 	.word	0x2000101c
    dab0:	20000e94 	.word	0x20000e94
    dab4:	0000d8c1 	.word	0x0000d8c1
    dab8:	20000000 	.word	0x20000000
    dabc:	0000d8f1 	.word	0x0000d8f1
    dac0:	0000e985 	.word	0x0000e985
    dac4:	20001090 	.word	0x20001090
    dac8:	20000eb0 	.word	0x20000eb0
    dacc:	20001194 	.word	0x20001194
    dad0:	20000ecc 	.word	0x20000ecc
    dad4:	200010b0 	.word	0x200010b0
    dad8:	20000ee8 	.word	0x20000ee8
    dadc:	20001114 	.word	0x20001114
    dae0:	20000f04 	.word	0x20000f04

0000dae4 <_GLOBAL__sub_I_ptrTimerClass>:
    dae4:	b580      	push	{r7, lr}
    dae6:	af00      	add	r7, sp, #0
    dae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    daec:	2001      	movs	r0, #1
    daee:	4b01      	ldr	r3, [pc, #4]	; (daf4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    daf0:	4798      	blx	r3
    daf2:	bd80      	pop	{r7, pc}
    daf4:	0000da31 	.word	0x0000da31

0000daf8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    daf8:	b480      	push	{r7}
    dafa:	b083      	sub	sp, #12
    dafc:	af00      	add	r7, sp, #0
    dafe:	6078      	str	r0, [r7, #4]
    db00:	4a05      	ldr	r2, [pc, #20]	; (db18 <_ZN5PrintC1Ev+0x20>)
    db02:	687b      	ldr	r3, [r7, #4]
    db04:	601a      	str	r2, [r3, #0]
    db06:	687b      	ldr	r3, [r7, #4]
    db08:	2200      	movs	r2, #0
    db0a:	605a      	str	r2, [r3, #4]
    db0c:	687b      	ldr	r3, [r7, #4]
    db0e:	4618      	mov	r0, r3
    db10:	370c      	adds	r7, #12
    db12:	46bd      	mov	sp, r7
    db14:	bc80      	pop	{r7}
    db16:	4770      	bx	lr
    db18:	0000f304 	.word	0x0000f304

0000db1c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    db1c:	b480      	push	{r7}
    db1e:	b083      	sub	sp, #12
    db20:	af00      	add	r7, sp, #0
    db22:	6078      	str	r0, [r7, #4]
    db24:	2300      	movs	r3, #0
    db26:	4618      	mov	r0, r3
    db28:	370c      	adds	r7, #12
    db2a:	46bd      	mov	sp, r7
    db2c:	bc80      	pop	{r7}
    db2e:	4770      	bx	lr

0000db30 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    db30:	b480      	push	{r7}
    db32:	b083      	sub	sp, #12
    db34:	af00      	add	r7, sp, #0
    db36:	6078      	str	r0, [r7, #4]
    db38:	bf00      	nop
    db3a:	370c      	adds	r7, #12
    db3c:	46bd      	mov	sp, r7
    db3e:	bc80      	pop	{r7}
    db40:	4770      	bx	lr
	...

0000db44 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    db44:	b580      	push	{r7, lr}
    db46:	b082      	sub	sp, #8
    db48:	af00      	add	r7, sp, #0
    db4a:	6078      	str	r0, [r7, #4]
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	4618      	mov	r0, r3
    db50:	4b06      	ldr	r3, [pc, #24]	; (db6c <_ZN6StreamC1Ev+0x28>)
    db52:	4798      	blx	r3
    db54:	4a06      	ldr	r2, [pc, #24]	; (db70 <_ZN6StreamC1Ev+0x2c>)
    db56:	687b      	ldr	r3, [r7, #4]
    db58:	601a      	str	r2, [r3, #0]
    db5a:	687b      	ldr	r3, [r7, #4]
    db5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db60:	609a      	str	r2, [r3, #8]
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	4618      	mov	r0, r3
    db66:	3708      	adds	r7, #8
    db68:	46bd      	mov	sp, r7
    db6a:	bd80      	pop	{r7, pc}
    db6c:	0000daf9 	.word	0x0000daf9
    db70:	0000f2c8 	.word	0x0000f2c8

0000db74 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    db74:	b480      	push	{r7}
    db76:	b083      	sub	sp, #12
    db78:	af00      	add	r7, sp, #0
    db7a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    db7c:	4b06      	ldr	r3, [pc, #24]	; (db98 <_ZL10USBTimeoutPK10timer_task+0x24>)
    db7e:	681b      	ldr	r3, [r3, #0]
    db80:	2201      	movs	r2, #1
    db82:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    db84:	4b04      	ldr	r3, [pc, #16]	; (db98 <_ZL10USBTimeoutPK10timer_task+0x24>)
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	2200      	movs	r2, #0
    db8a:	741a      	strb	r2, [r3, #16]
	
}
    db8c:	bf00      	nop
    db8e:	370c      	adds	r7, #12
    db90:	46bd      	mov	sp, r7
    db92:	bc80      	pop	{r7}
    db94:	4770      	bx	lr
    db96:	bf00      	nop
    db98:	20000f20 	.word	0x20000f20

0000db9c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    db9c:	b480      	push	{r7}
    db9e:	b083      	sub	sp, #12
    dba0:	af00      	add	r7, sp, #0
    dba2:	4603      	mov	r3, r0
    dba4:	603a      	str	r2, [r7, #0]
    dba6:	71fb      	strb	r3, [r7, #7]
    dba8:	460b      	mov	r3, r1
    dbaa:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dbac:	4b08      	ldr	r3, [pc, #32]	; (dbd0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dbae:	681b      	ldr	r3, [r3, #0]
    dbb0:	2201      	movs	r2, #1
    dbb2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dbb4:	4b06      	ldr	r3, [pc, #24]	; (dbd0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dbb6:	681b      	ldr	r3, [r3, #0]
    dbb8:	2201      	movs	r2, #1
    dbba:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dbbc:	4b04      	ldr	r3, [pc, #16]	; (dbd0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dbbe:	681b      	ldr	r3, [r3, #0]
    dbc0:	2201      	movs	r2, #1
    dbc2:	741a      	strb	r2, [r3, #16]


	return false;
    dbc4:	2300      	movs	r3, #0
}
    dbc6:	4618      	mov	r0, r3
    dbc8:	370c      	adds	r7, #12
    dbca:	46bd      	mov	sp, r7
    dbcc:	bc80      	pop	{r7}
    dbce:	4770      	bx	lr
    dbd0:	20000f20 	.word	0x20000f20

0000dbd4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dbd4:	b480      	push	{r7}
    dbd6:	b083      	sub	sp, #12
    dbd8:	af00      	add	r7, sp, #0
    dbda:	4603      	mov	r3, r0
    dbdc:	603a      	str	r2, [r7, #0]
    dbde:	71fb      	strb	r3, [r7, #7]
    dbe0:	460b      	mov	r3, r1
    dbe2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dbe4:	4b08      	ldr	r3, [pc, #32]	; (dc08 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dbe6:	681b      	ldr	r3, [r3, #0]
    dbe8:	2201      	movs	r2, #1
    dbea:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    dbec:	4b06      	ldr	r3, [pc, #24]	; (dc08 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dbee:	681b      	ldr	r3, [r3, #0]
    dbf0:	2201      	movs	r2, #1
    dbf2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dbf4:	4b04      	ldr	r3, [pc, #16]	; (dc08 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dbf6:	681b      	ldr	r3, [r3, #0]
    dbf8:	2201      	movs	r2, #1
    dbfa:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    dbfc:	2300      	movs	r3, #0
}
    dbfe:	4618      	mov	r0, r3
    dc00:	370c      	adds	r7, #12
    dc02:	46bd      	mov	sp, r7
    dc04:	bc80      	pop	{r7}
    dc06:	4770      	bx	lr
    dc08:	20000f20 	.word	0x20000f20

0000dc0c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b082      	sub	sp, #8
    dc10:	af00      	add	r7, sp, #0
    dc12:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    dc14:	793b      	ldrb	r3, [r7, #4]
    dc16:	f003 0301 	and.w	r3, r3, #1
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d013      	beq.n	dc48 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    dc20:	490c      	ldr	r1, [pc, #48]	; (dc54 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    dc22:	2000      	movs	r0, #0
    dc24:	4b0c      	ldr	r3, [pc, #48]	; (dc58 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dc26:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    dc28:	490c      	ldr	r1, [pc, #48]	; (dc5c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    dc2a:	2001      	movs	r0, #1
    dc2c:	4b0a      	ldr	r3, [pc, #40]	; (dc58 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dc2e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    dc30:	4b0b      	ldr	r3, [pc, #44]	; (dc60 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dc32:	681b      	ldr	r3, [r3, #0]
    dc34:	2201      	movs	r2, #1
    dc36:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    dc38:	4b09      	ldr	r3, [pc, #36]	; (dc60 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dc3a:	681b      	ldr	r3, [r3, #0]
    dc3c:	2201      	movs	r2, #1
    dc3e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    dc40:	4b07      	ldr	r3, [pc, #28]	; (dc60 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dc42:	681b      	ldr	r3, [r3, #0]
    dc44:	2201      	movs	r2, #1
    dc46:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    dc48:	2300      	movs	r3, #0
}
    dc4a:	4618      	mov	r0, r3
    dc4c:	3708      	adds	r7, #8
    dc4e:	46bd      	mov	sp, r7
    dc50:	bd80      	pop	{r7, pc}
    dc52:	bf00      	nop
    dc54:	0000db9d 	.word	0x0000db9d
    dc58:	0000c3c9 	.word	0x0000c3c9
    dc5c:	0000dbd5 	.word	0x0000dbd5
    dc60:	20000f20 	.word	0x20000f20

0000dc64 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    dc64:	b580      	push	{r7, lr}
    dc66:	b082      	sub	sp, #8
    dc68:	af00      	add	r7, sp, #0
    dc6a:	6078      	str	r0, [r7, #4]
    dc6c:	687b      	ldr	r3, [r7, #4]
    dc6e:	4618      	mov	r0, r3
    dc70:	4b0a      	ldr	r3, [pc, #40]	; (dc9c <_ZN9CDC_ClassC1Ev+0x38>)
    dc72:	4798      	blx	r3
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	3310      	adds	r3, #16
    dc78:	4618      	mov	r0, r3
    dc7a:	4b09      	ldr	r3, [pc, #36]	; (dca0 <_ZN9CDC_ClassC1Ev+0x3c>)
    dc7c:	4798      	blx	r3
    dc7e:	4a09      	ldr	r2, [pc, #36]	; (dca4 <_ZN9CDC_ClassC1Ev+0x40>)
    dc80:	687b      	ldr	r3, [r7, #4]
    dc82:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	f04f 32ff 	mov.w	r2, #4294967295
    dc8a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dc8c:	4a06      	ldr	r2, [pc, #24]	; (dca8 <_ZN9CDC_ClassC1Ev+0x44>)
    dc8e:	687b      	ldr	r3, [r7, #4]
    dc90:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	4618      	mov	r0, r3
    dc96:	3708      	adds	r7, #8
    dc98:	46bd      	mov	sp, r7
    dc9a:	bd80      	pop	{r7, pc}
    dc9c:	0000db45 	.word	0x0000db45
    dca0:	0000e495 	.word	0x0000e495
    dca4:	0000f298 	.word	0x0000f298
    dca8:	20000f20 	.word	0x20000f20

0000dcac <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dcac:	b580      	push	{r7, lr}
    dcae:	b082      	sub	sp, #8
    dcb0:	af00      	add	r7, sp, #0
    dcb2:	6078      	str	r0, [r7, #4]
    dcb4:	4a06      	ldr	r2, [pc, #24]	; (dcd0 <_ZN9CDC_ClassD1Ev+0x24>)
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	601a      	str	r2, [r3, #0]
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	3310      	adds	r3, #16
    dcbe:	4618      	mov	r0, r3
    dcc0:	4b04      	ldr	r3, [pc, #16]	; (dcd4 <_ZN9CDC_ClassD1Ev+0x28>)
    dcc2:	4798      	blx	r3
{
} //~CDC_Class
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	4618      	mov	r0, r3
    dcc8:	3708      	adds	r7, #8
    dcca:	46bd      	mov	sp, r7
    dccc:	bd80      	pop	{r7, pc}
    dcce:	bf00      	nop
    dcd0:	0000f298 	.word	0x0000f298
    dcd4:	0000e4b5 	.word	0x0000e4b5

0000dcd8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dcd8:	b580      	push	{r7, lr}
    dcda:	b082      	sub	sp, #8
    dcdc:	af00      	add	r7, sp, #0
    dcde:	6078      	str	r0, [r7, #4]
	
	OnInit();
    dce0:	687b      	ldr	r3, [r7, #4]
    dce2:	3310      	adds	r3, #16
    dce4:	4618      	mov	r0, r3
    dce6:	4b09      	ldr	r3, [pc, #36]	; (dd0c <_ZN9CDC_Class4InitEv+0x34>)
    dce8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    dcea:	4909      	ldr	r1, [pc, #36]	; (dd10 <_ZN9CDC_Class4InitEv+0x38>)
    dcec:	2003      	movs	r0, #3
    dcee:	4b09      	ldr	r3, [pc, #36]	; (dd14 <_ZN9CDC_Class4InitEv+0x3c>)
    dcf0:	4798      	blx	r3
	delay_ms(100);
    dcf2:	2064      	movs	r0, #100	; 0x64
    dcf4:	4b08      	ldr	r3, [pc, #32]	; (dd18 <_ZN9CDC_Class4InitEv+0x40>)
    dcf6:	4798      	blx	r3
		
	if (connected)
    dcf8:	687b      	ldr	r3, [r7, #4]
    dcfa:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    dcfc:	2064      	movs	r0, #100	; 0x64
    dcfe:	4b06      	ldr	r3, [pc, #24]	; (dd18 <_ZN9CDC_Class4InitEv+0x40>)
    dd00:	4798      	blx	r3

	

}
    dd02:	bf00      	nop
    dd04:	3708      	adds	r7, #8
    dd06:	46bd      	mov	sp, r7
    dd08:	bd80      	pop	{r7, pc}
    dd0a:	bf00      	nop
    dd0c:	0000e4c9 	.word	0x0000e4c9
    dd10:	0000dc0d 	.word	0x0000dc0d
    dd14:	0000c3c9 	.word	0x0000c3c9
    dd18:	00001d71 	.word	0x00001d71

0000dd1c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b082      	sub	sp, #8
    dd20:	af00      	add	r7, sp, #0
    dd22:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    dd24:	4b03      	ldr	r3, [pc, #12]	; (dd34 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    dd26:	4798      	blx	r3
    dd28:	4603      	mov	r3, r0
	
}
    dd2a:	4618      	mov	r0, r3
    dd2c:	3708      	adds	r7, #8
    dd2e:	46bd      	mov	sp, r7
    dd30:	bd80      	pop	{r7, pc}
    dd32:	bf00      	nop
    dd34:	0000c441 	.word	0x0000c441

0000dd38 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    dd38:	b580      	push	{r7, lr}
    dd3a:	b084      	sub	sp, #16
    dd3c:	af00      	add	r7, sp, #0
    dd3e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    dd40:	687b      	ldr	r3, [r7, #4]
    dd42:	699b      	ldr	r3, [r3, #24]
    dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
    dd48:	bf14      	ite	ne
    dd4a:	2301      	movne	r3, #1
    dd4c:	2300      	moveq	r3, #0
    dd4e:	b2db      	uxtb	r3, r3
    dd50:	2b00      	cmp	r3, #0
    dd52:	d002      	beq.n	dd5a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    dd54:	687b      	ldr	r3, [r7, #4]
    dd56:	699b      	ldr	r3, [r3, #24]
    dd58:	e011      	b.n	dd7e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    dd5a:	687b      	ldr	r3, [r7, #4]
    dd5c:	681b      	ldr	r3, [r3, #0]
    dd5e:	331c      	adds	r3, #28
    dd60:	681b      	ldr	r3, [r3, #0]
    dd62:	f107 010f 	add.w	r1, r7, #15
    dd66:	2201      	movs	r2, #1
    dd68:	6878      	ldr	r0, [r7, #4]
    dd6a:	4798      	blx	r3
    dd6c:	4602      	mov	r2, r0
    dd6e:	687b      	ldr	r3, [r7, #4]
    dd70:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    dd72:	7bfb      	ldrb	r3, [r7, #15]
    dd74:	461a      	mov	r2, r3
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	699b      	ldr	r3, [r3, #24]
}
    dd7e:	4618      	mov	r0, r3
    dd80:	3710      	adds	r7, #16
    dd82:	46bd      	mov	sp, r7
    dd84:	bd80      	pop	{r7, pc}
	...

0000dd88 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dd88:	b580      	push	{r7, lr}
    dd8a:	b086      	sub	sp, #24
    dd8c:	af00      	add	r7, sp, #0
    dd8e:	60f8      	str	r0, [r7, #12]
    dd90:	60b9      	str	r1, [r7, #8]
    dd92:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    dd94:	68fb      	ldr	r3, [r7, #12]
    dd96:	7c1b      	ldrb	r3, [r3, #16]
    dd98:	b2db      	uxtb	r3, r3
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d02e      	beq.n	ddfc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    dd9e:	687a      	ldr	r2, [r7, #4]
    dda0:	4613      	mov	r3, r2
    dda2:	009b      	lsls	r3, r3, #2
    dda4:	4413      	add	r3, r2
    dda6:	005b      	lsls	r3, r3, #1
    dda8:	461a      	mov	r2, r3
    ddaa:	4918      	ldr	r1, [pc, #96]	; (de0c <_ZN9CDC_Class8readDataEPvl+0x84>)
    ddac:	4818      	ldr	r0, [pc, #96]	; (de10 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ddae:	4b19      	ldr	r3, [pc, #100]	; (de14 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    ddb0:	4798      	blx	r3
		rxReady=false;
    ddb2:	68fb      	ldr	r3, [r7, #12]
    ddb4:	2200      	movs	r2, #0
    ddb6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    ddb8:	687b      	ldr	r3, [r7, #4]
    ddba:	4619      	mov	r1, r3
    ddbc:	68b8      	ldr	r0, [r7, #8]
    ddbe:	4b16      	ldr	r3, [pc, #88]	; (de18 <_ZN9CDC_Class8readDataEPvl+0x90>)
    ddc0:	4798      	blx	r3
    ddc2:	4603      	mov	r3, r0
    ddc4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ddc6:	68fb      	ldr	r3, [r7, #12]
    ddc8:	7d5b      	ldrb	r3, [r3, #21]
    ddca:	b2db      	uxtb	r3, r3
    ddcc:	f083 0301 	eor.w	r3, r3, #1
    ddd0:	b2db      	uxtb	r3, r3
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d006      	beq.n	dde4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ddd6:	68fb      	ldr	r3, [r7, #12]
    ddd8:	7c1b      	ldrb	r3, [r3, #16]
    ddda:	b2db      	uxtb	r3, r3
    dddc:	2b00      	cmp	r3, #0
    ddde:	d001      	beq.n	dde4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    dde0:	2301      	movs	r3, #1
    dde2:	e000      	b.n	dde6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    dde4:	2300      	movs	r3, #0
    dde6:	2b00      	cmp	r3, #0
    dde8:	d000      	beq.n	ddec <_ZN9CDC_Class8readDataEPvl+0x64>
    ddea:	e7ec      	b.n	ddc6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ddec:	4808      	ldr	r0, [pc, #32]	; (de10 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ddee:	4b0b      	ldr	r3, [pc, #44]	; (de1c <_ZN9CDC_Class8readDataEPvl+0x94>)
    ddf0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ddf2:	4906      	ldr	r1, [pc, #24]	; (de0c <_ZN9CDC_Class8readDataEPvl+0x84>)
    ddf4:	4806      	ldr	r0, [pc, #24]	; (de10 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ddf6:	4b0a      	ldr	r3, [pc, #40]	; (de20 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ddf8:	4798      	blx	r3
    ddfa:	e001      	b.n	de00 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    ddfc:	2300      	movs	r3, #0
    ddfe:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    de00:	7dfb      	ldrb	r3, [r7, #23]
}
    de02:	4618      	mov	r0, r3
    de04:	3718      	adds	r7, #24
    de06:	46bd      	mov	sp, r7
    de08:	bd80      	pop	{r7, pc}
    de0a:	bf00      	nop
    de0c:	0000db75 	.word	0x0000db75
    de10:	20000fdc 	.word	0x20000fdc
    de14:	0000e70d 	.word	0x0000e70d
    de18:	0000c31d 	.word	0x0000c31d
    de1c:	0000e655 	.word	0x0000e655
    de20:	0000e745 	.word	0x0000e745

0000de24 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    de24:	b580      	push	{r7, lr}
    de26:	b084      	sub	sp, #16
    de28:	af00      	add	r7, sp, #0
    de2a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	2200      	movs	r2, #0
    de30:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    de32:	f107 030f 	add.w	r3, r7, #15
    de36:	2101      	movs	r1, #1
    de38:	4618      	mov	r0, r3
    de3a:	4b08      	ldr	r3, [pc, #32]	; (de5c <_ZN9CDC_Class4readEv+0x38>)
    de3c:	4798      	blx	r3
	while(!rxReady);
    de3e:	687b      	ldr	r3, [r7, #4]
    de40:	7d5b      	ldrb	r3, [r3, #21]
    de42:	b2db      	uxtb	r3, r3
    de44:	f083 0301 	eor.w	r3, r3, #1
    de48:	b2db      	uxtb	r3, r3
    de4a:	2b00      	cmp	r3, #0
    de4c:	d000      	beq.n	de50 <_ZN9CDC_Class4readEv+0x2c>
    de4e:	e7f6      	b.n	de3e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    de50:	7bfb      	ldrb	r3, [r7, #15]
}
    de52:	4618      	mov	r0, r3
    de54:	3710      	adds	r7, #16
    de56:	46bd      	mov	sp, r7
    de58:	bd80      	pop	{r7, pc}
    de5a:	bf00      	nop
    de5c:	0000c31d 	.word	0x0000c31d

0000de60 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    de60:	b580      	push	{r7, lr}
    de62:	b082      	sub	sp, #8
    de64:	af00      	add	r7, sp, #0
    de66:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	331c      	adds	r3, #28
    de6c:	2140      	movs	r1, #64	; 0x40
    de6e:	4618      	mov	r0, r3
    de70:	4b02      	ldr	r3, [pc, #8]	; (de7c <_ZN9CDC_Class5flushEv+0x1c>)
    de72:	4798      	blx	r3
}
    de74:	bf00      	nop
    de76:	3708      	adds	r7, #8
    de78:	46bd      	mov	sp, r7
    de7a:	bd80      	pop	{r7, pc}
    de7c:	0000c361 	.word	0x0000c361

0000de80 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    de80:	b580      	push	{r7, lr}
    de82:	b082      	sub	sp, #8
    de84:	af00      	add	r7, sp, #0
    de86:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    de88:	4b02      	ldr	r3, [pc, #8]	; (de94 <_ZN9CDC_Class5clearEv+0x14>)
    de8a:	4798      	blx	r3
}
    de8c:	bf00      	nop
    de8e:	3708      	adds	r7, #8
    de90:	46bd      	mov	sp, r7
    de92:	bd80      	pop	{r7, pc}
    de94:	0000c3a5 	.word	0x0000c3a5

0000de98 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    de98:	b580      	push	{r7, lr}
    de9a:	b082      	sub	sp, #8
    de9c:	af00      	add	r7, sp, #0
    de9e:	6078      	str	r0, [r7, #4]
    dea0:	460b      	mov	r3, r1
    dea2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    dea4:	687b      	ldr	r3, [r7, #4]
    dea6:	7c1b      	ldrb	r3, [r3, #16]
    dea8:	b2db      	uxtb	r3, r3
    deaa:	2b00      	cmp	r3, #0
    deac:	d012      	beq.n	ded4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	7d1b      	ldrb	r3, [r3, #20]
    deb2:	b2db      	uxtb	r3, r3
    deb4:	f083 0301 	eor.w	r3, r3, #1
    deb8:	b2db      	uxtb	r3, r3
    deba:	2b00      	cmp	r3, #0
    debc:	d000      	beq.n	dec0 <_ZN9CDC_Class5writeEh+0x28>
    debe:	e7f6      	b.n	deae <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	681b      	ldr	r3, [r3, #0]
    dec4:	3324      	adds	r3, #36	; 0x24
    dec6:	681b      	ldr	r3, [r3, #0]
    dec8:	1cf9      	adds	r1, r7, #3
    deca:	2201      	movs	r2, #1
    decc:	6878      	ldr	r0, [r7, #4]
    dece:	4798      	blx	r3
    ded0:	4603      	mov	r3, r0
    ded2:	e000      	b.n	ded6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    ded4:	2300      	movs	r3, #0
	}
		
}
    ded6:	4618      	mov	r0, r3
    ded8:	3708      	adds	r7, #8
    deda:	46bd      	mov	sp, r7
    dedc:	bd80      	pop	{r7, pc}
	...

0000dee0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    dee0:	b580      	push	{r7, lr}
    dee2:	b086      	sub	sp, #24
    dee4:	af00      	add	r7, sp, #0
    dee6:	60f8      	str	r0, [r7, #12]
    dee8:	60b9      	str	r1, [r7, #8]
    deea:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    deec:	68fb      	ldr	r3, [r7, #12]
    deee:	7c1b      	ldrb	r3, [r3, #16]
    def0:	b2db      	uxtb	r3, r3
    def2:	2b00      	cmp	r3, #0
    def4:	d02f      	beq.n	df56 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    def6:	687a      	ldr	r2, [r7, #4]
    def8:	4613      	mov	r3, r2
    defa:	009b      	lsls	r3, r3, #2
    defc:	4413      	add	r3, r2
    defe:	005b      	lsls	r3, r3, #1
    df00:	461a      	mov	r2, r3
    df02:	4917      	ldr	r1, [pc, #92]	; (df60 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    df04:	4817      	ldr	r0, [pc, #92]	; (df64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    df06:	4b18      	ldr	r3, [pc, #96]	; (df68 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    df08:	4798      	blx	r3
		txReady=false;
    df0a:	68fb      	ldr	r3, [r7, #12]
    df0c:	2200      	movs	r2, #0
    df0e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	4619      	mov	r1, r3
    df14:	68b8      	ldr	r0, [r7, #8]
    df16:	4b15      	ldr	r3, [pc, #84]	; (df6c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    df18:	4798      	blx	r3
    df1a:	4603      	mov	r3, r0
    df1c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    df1e:	68fb      	ldr	r3, [r7, #12]
    df20:	7d1b      	ldrb	r3, [r3, #20]
    df22:	b2db      	uxtb	r3, r3
    df24:	f083 0301 	eor.w	r3, r3, #1
    df28:	b2db      	uxtb	r3, r3
    df2a:	2b00      	cmp	r3, #0
    df2c:	d006      	beq.n	df3c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    df2e:	68fb      	ldr	r3, [r7, #12]
    df30:	7c1b      	ldrb	r3, [r3, #16]
    df32:	b2db      	uxtb	r3, r3
    df34:	2b00      	cmp	r3, #0
    df36:	d001      	beq.n	df3c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    df38:	2301      	movs	r3, #1
    df3a:	e000      	b.n	df3e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    df3c:	2300      	movs	r3, #0
    df3e:	2b00      	cmp	r3, #0
    df40:	d000      	beq.n	df44 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    df42:	e7ec      	b.n	df1e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    df44:	4807      	ldr	r0, [pc, #28]	; (df64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    df46:	4b0a      	ldr	r3, [pc, #40]	; (df70 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    df48:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    df4a:	4905      	ldr	r1, [pc, #20]	; (df60 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    df4c:	4805      	ldr	r0, [pc, #20]	; (df64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    df4e:	4b09      	ldr	r3, [pc, #36]	; (df74 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    df50:	4798      	blx	r3
		return r;
    df52:	697b      	ldr	r3, [r7, #20]
    df54:	e000      	b.n	df58 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    df56:	2300      	movs	r3, #0
	}
	

}
    df58:	4618      	mov	r0, r3
    df5a:	3718      	adds	r7, #24
    df5c:	46bd      	mov	sp, r7
    df5e:	bd80      	pop	{r7, pc}
    df60:	0000db75 	.word	0x0000db75
    df64:	20000fdc 	.word	0x20000fdc
    df68:	0000e70d 	.word	0x0000e70d
    df6c:	0000c361 	.word	0x0000c361
    df70:	0000e655 	.word	0x0000e655
    df74:	0000e745 	.word	0x0000e745

0000df78 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    df78:	b580      	push	{r7, lr}
    df7a:	b086      	sub	sp, #24
    df7c:	af00      	add	r7, sp, #0
    df7e:	60f8      	str	r0, [r7, #12]
    df80:	60b9      	str	r1, [r7, #8]
    df82:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    df84:	68fb      	ldr	r3, [r7, #12]
    df86:	2200      	movs	r2, #0
    df88:	751a      	strb	r2, [r3, #20]

 	if (connected){
    df8a:	68fb      	ldr	r3, [r7, #12]
    df8c:	7c1b      	ldrb	r3, [r3, #16]
    df8e:	b2db      	uxtb	r3, r3
    df90:	2b00      	cmp	r3, #0
    df92:	d02a      	beq.n	dfea <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    df94:	687a      	ldr	r2, [r7, #4]
    df96:	4613      	mov	r3, r2
    df98:	009b      	lsls	r3, r3, #2
    df9a:	4413      	add	r3, r2
    df9c:	005b      	lsls	r3, r3, #1
    df9e:	461a      	mov	r2, r3
    dfa0:	4915      	ldr	r1, [pc, #84]	; (dff8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dfa2:	4816      	ldr	r0, [pc, #88]	; (dffc <_ZN9CDC_Class5writeEPKhj+0x84>)
    dfa4:	4b16      	ldr	r3, [pc, #88]	; (e000 <_ZN9CDC_Class5writeEPKhj+0x88>)
    dfa6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    dfa8:	6879      	ldr	r1, [r7, #4]
    dfaa:	68b8      	ldr	r0, [r7, #8]
    dfac:	4b15      	ldr	r3, [pc, #84]	; (e004 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    dfae:	4798      	blx	r3
    dfb0:	4603      	mov	r3, r0
    dfb2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    dfb4:	68fb      	ldr	r3, [r7, #12]
    dfb6:	7d1b      	ldrb	r3, [r3, #20]
    dfb8:	b2db      	uxtb	r3, r3
    dfba:	f083 0301 	eor.w	r3, r3, #1
    dfbe:	b2db      	uxtb	r3, r3
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d006      	beq.n	dfd2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dfc4:	68fb      	ldr	r3, [r7, #12]
    dfc6:	7c1b      	ldrb	r3, [r3, #16]
    dfc8:	b2db      	uxtb	r3, r3
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d001      	beq.n	dfd2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    dfce:	2301      	movs	r3, #1
    dfd0:	e000      	b.n	dfd4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    dfd2:	2300      	movs	r3, #0
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d000      	beq.n	dfda <_ZN9CDC_Class5writeEPKhj+0x62>
    dfd8:	e7ec      	b.n	dfb4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    dfda:	4808      	ldr	r0, [pc, #32]	; (dffc <_ZN9CDC_Class5writeEPKhj+0x84>)
    dfdc:	4b0a      	ldr	r3, [pc, #40]	; (e008 <_ZN9CDC_Class5writeEPKhj+0x90>)
    dfde:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    dfe0:	4905      	ldr	r1, [pc, #20]	; (dff8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    dfe2:	4806      	ldr	r0, [pc, #24]	; (dffc <_ZN9CDC_Class5writeEPKhj+0x84>)
    dfe4:	4b09      	ldr	r3, [pc, #36]	; (e00c <_ZN9CDC_Class5writeEPKhj+0x94>)
    dfe6:	4798      	blx	r3
    dfe8:	e001      	b.n	dfee <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    dfea:	2300      	movs	r3, #0
    dfec:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    dfee:	697b      	ldr	r3, [r7, #20]
}
    dff0:	4618      	mov	r0, r3
    dff2:	3718      	adds	r7, #24
    dff4:	46bd      	mov	sp, r7
    dff6:	bd80      	pop	{r7, pc}
    dff8:	0000db75 	.word	0x0000db75
    dffc:	20000fdc 	.word	0x20000fdc
    e000:	0000e70d 	.word	0x0000e70d
    e004:	0000c361 	.word	0x0000c361
    e008:	0000e655 	.word	0x0000e655
    e00c:	0000e745 	.word	0x0000e745

0000e010 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e010:	b480      	push	{r7}
    e012:	b083      	sub	sp, #12
    e014:	af00      	add	r7, sp, #0
    e016:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e018:	687b      	ldr	r3, [r7, #4]
    e01a:	7d5b      	ldrb	r3, [r3, #21]
    e01c:	b2db      	uxtb	r3, r3
    e01e:	2b00      	cmp	r3, #0
    e020:	d006      	beq.n	e030 <_ZN9CDC_Class9availableEv+0x20>
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	7d1b      	ldrb	r3, [r3, #20]
    e026:	b2db      	uxtb	r3, r3
    e028:	2b00      	cmp	r3, #0
    e02a:	d001      	beq.n	e030 <_ZN9CDC_Class9availableEv+0x20>
    e02c:	2301      	movs	r3, #1
    e02e:	e000      	b.n	e032 <_ZN9CDC_Class9availableEv+0x22>
    e030:	2300      	movs	r3, #0
    e032:	2b00      	cmp	r3, #0
    e034:	d001      	beq.n	e03a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e036:	2301      	movs	r3, #1
    e038:	e000      	b.n	e03c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e03a:	2300      	movs	r3, #0
	}
	
}
    e03c:	4618      	mov	r0, r3
    e03e:	370c      	adds	r7, #12
    e040:	46bd      	mov	sp, r7
    e042:	bc80      	pop	{r7}
    e044:	4770      	bx	lr
	...

0000e048 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e048:	b580      	push	{r7, lr}
    e04a:	b082      	sub	sp, #8
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
    e050:	6039      	str	r1, [r7, #0]
    e052:	687b      	ldr	r3, [r7, #4]
    e054:	2b01      	cmp	r3, #1
    e056:	d10c      	bne.n	e072 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e058:	683b      	ldr	r3, [r7, #0]
    e05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e05e:	4293      	cmp	r3, r2
    e060:	d107      	bne.n	e072 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e062:	4806      	ldr	r0, [pc, #24]	; (e07c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e064:	4b06      	ldr	r3, [pc, #24]	; (e080 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e066:	4798      	blx	r3
    e068:	4a06      	ldr	r2, [pc, #24]	; (e084 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e06a:	4907      	ldr	r1, [pc, #28]	; (e088 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e06c:	4803      	ldr	r0, [pc, #12]	; (e07c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e06e:	4b07      	ldr	r3, [pc, #28]	; (e08c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e070:	4798      	blx	r3
    e072:	bf00      	nop
    e074:	3708      	adds	r7, #8
    e076:	46bd      	mov	sp, r7
    e078:	bd80      	pop	{r7, pc}
    e07a:	bf00      	nop
    e07c:	20000f24 	.word	0x20000f24
    e080:	0000dc65 	.word	0x0000dc65
    e084:	20000000 	.word	0x20000000
    e088:	0000dcad 	.word	0x0000dcad
    e08c:	0000e985 	.word	0x0000e985

0000e090 <_GLOBAL__sub_I_ptrCDCClass>:
    e090:	b580      	push	{r7, lr}
    e092:	af00      	add	r7, sp, #0
    e094:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e098:	2001      	movs	r0, #1
    e09a:	4b01      	ldr	r3, [pc, #4]	; (e0a0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e09c:	4798      	blx	r3
    e09e:	bd80      	pop	{r7, pc}
    e0a0:	0000e049 	.word	0x0000e049

0000e0a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e0a4:	b590      	push	{r4, r7, lr}
    e0a6:	b083      	sub	sp, #12
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
    e0ac:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e0ae:	683b      	ldr	r3, [r7, #0]
    e0b0:	2b00      	cmp	r3, #0
    e0b2:	d101      	bne.n	e0b8 <_ZN5Print5writeEPKc+0x14>
    e0b4:	2300      	movs	r3, #0
    e0b6:	e00c      	b.n	e0d2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e0b8:	687b      	ldr	r3, [r7, #4]
    e0ba:	681b      	ldr	r3, [r3, #0]
    e0bc:	3304      	adds	r3, #4
    e0be:	681c      	ldr	r4, [r3, #0]
    e0c0:	6838      	ldr	r0, [r7, #0]
    e0c2:	4b06      	ldr	r3, [pc, #24]	; (e0dc <_ZN5Print5writeEPKc+0x38>)
    e0c4:	4798      	blx	r3
    e0c6:	4603      	mov	r3, r0
    e0c8:	461a      	mov	r2, r3
    e0ca:	6839      	ldr	r1, [r7, #0]
    e0cc:	6878      	ldr	r0, [r7, #4]
    e0ce:	47a0      	blx	r4
    e0d0:	4603      	mov	r3, r0
    }
    e0d2:	4618      	mov	r0, r3
    e0d4:	370c      	adds	r7, #12
    e0d6:	46bd      	mov	sp, r7
    e0d8:	bd90      	pop	{r4, r7, pc}
    e0da:	bf00      	nop
    e0dc:	0000ec01 	.word	0x0000ec01

0000e0e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e0e0:	b580      	push	{r7, lr}
    e0e2:	b086      	sub	sp, #24
    e0e4:	af00      	add	r7, sp, #0
    e0e6:	60f8      	str	r0, [r7, #12]
    e0e8:	60b9      	str	r1, [r7, #8]
    e0ea:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e0ec:	2300      	movs	r3, #0
    e0ee:	617b      	str	r3, [r7, #20]
  while (size--) {
    e0f0:	687b      	ldr	r3, [r7, #4]
    e0f2:	1e5a      	subs	r2, r3, #1
    e0f4:	607a      	str	r2, [r7, #4]
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	bf14      	ite	ne
    e0fa:	2301      	movne	r3, #1
    e0fc:	2300      	moveq	r3, #0
    e0fe:	b2db      	uxtb	r3, r3
    e100:	2b00      	cmp	r3, #0
    e102:	d016      	beq.n	e132 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e104:	68fb      	ldr	r3, [r7, #12]
    e106:	681b      	ldr	r3, [r3, #0]
    e108:	681a      	ldr	r2, [r3, #0]
    e10a:	68bb      	ldr	r3, [r7, #8]
    e10c:	1c59      	adds	r1, r3, #1
    e10e:	60b9      	str	r1, [r7, #8]
    e110:	781b      	ldrb	r3, [r3, #0]
    e112:	4619      	mov	r1, r3
    e114:	68f8      	ldr	r0, [r7, #12]
    e116:	4790      	blx	r2
    e118:	4603      	mov	r3, r0
    e11a:	2b00      	cmp	r3, #0
    e11c:	bf14      	ite	ne
    e11e:	2301      	movne	r3, #1
    e120:	2300      	moveq	r3, #0
    e122:	b2db      	uxtb	r3, r3
    e124:	2b00      	cmp	r3, #0
    e126:	d003      	beq.n	e130 <_ZN5Print5writeEPKhj+0x50>
    e128:	697b      	ldr	r3, [r7, #20]
    e12a:	3301      	adds	r3, #1
    e12c:	617b      	str	r3, [r7, #20]
  while (size--) {
    e12e:	e7df      	b.n	e0f0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    e130:	bf00      	nop
  }
  return n;
    e132:	697b      	ldr	r3, [r7, #20]
}
    e134:	4618      	mov	r0, r3
    e136:	3718      	adds	r7, #24
    e138:	46bd      	mov	sp, r7
    e13a:	bd80      	pop	{r7, pc}

0000e13c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e13c:	b580      	push	{r7, lr}
    e13e:	b082      	sub	sp, #8
    e140:	af00      	add	r7, sp, #0
    e142:	6078      	str	r0, [r7, #4]
    e144:	6039      	str	r1, [r7, #0]
  return write(str);
    e146:	6839      	ldr	r1, [r7, #0]
    e148:	6878      	ldr	r0, [r7, #4]
    e14a:	4b03      	ldr	r3, [pc, #12]	; (e158 <_ZN5Print5printEPKc+0x1c>)
    e14c:	4798      	blx	r3
    e14e:	4603      	mov	r3, r0
}
    e150:	4618      	mov	r0, r3
    e152:	3708      	adds	r7, #8
    e154:	46bd      	mov	sp, r7
    e156:	bd80      	pop	{r7, pc}
    e158:	0000e0a5 	.word	0x0000e0a5

0000e15c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    e15c:	b580      	push	{r7, lr}
    e15e:	b082      	sub	sp, #8
    e160:	af00      	add	r7, sp, #0
    e162:	6078      	str	r0, [r7, #4]
    e164:	460b      	mov	r3, r1
    e166:	70fb      	strb	r3, [r7, #3]
  return write(c);
    e168:	687b      	ldr	r3, [r7, #4]
    e16a:	681b      	ldr	r3, [r3, #0]
    e16c:	681b      	ldr	r3, [r3, #0]
    e16e:	78fa      	ldrb	r2, [r7, #3]
    e170:	4611      	mov	r1, r2
    e172:	6878      	ldr	r0, [r7, #4]
    e174:	4798      	blx	r3
    e176:	4603      	mov	r3, r0
}
    e178:	4618      	mov	r0, r3
    e17a:	3708      	adds	r7, #8
    e17c:	46bd      	mov	sp, r7
    e17e:	bd80      	pop	{r7, pc}

0000e180 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    e180:	b580      	push	{r7, lr}
    e182:	b084      	sub	sp, #16
    e184:	af00      	add	r7, sp, #0
    e186:	60f8      	str	r0, [r7, #12]
    e188:	460b      	mov	r3, r1
    e18a:	607a      	str	r2, [r7, #4]
    e18c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    e18e:	7afb      	ldrb	r3, [r7, #11]
    e190:	687a      	ldr	r2, [r7, #4]
    e192:	4619      	mov	r1, r3
    e194:	68f8      	ldr	r0, [r7, #12]
    e196:	4b03      	ldr	r3, [pc, #12]	; (e1a4 <_ZN5Print5printEhi+0x24>)
    e198:	4798      	blx	r3
    e19a:	4603      	mov	r3, r0
}
    e19c:	4618      	mov	r0, r3
    e19e:	3710      	adds	r7, #16
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd80      	pop	{r7, pc}
    e1a4:	0000e255 	.word	0x0000e255

0000e1a8 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b084      	sub	sp, #16
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	60f8      	str	r0, [r7, #12]
    e1b0:	60b9      	str	r1, [r7, #8]
    e1b2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    e1b4:	687a      	ldr	r2, [r7, #4]
    e1b6:	68b9      	ldr	r1, [r7, #8]
    e1b8:	68f8      	ldr	r0, [r7, #12]
    e1ba:	4b03      	ldr	r3, [pc, #12]	; (e1c8 <_ZN5Print5printEii+0x20>)
    e1bc:	4798      	blx	r3
    e1be:	4603      	mov	r3, r0
}
    e1c0:	4618      	mov	r0, r3
    e1c2:	3710      	adds	r7, #16
    e1c4:	46bd      	mov	sp, r7
    e1c6:	bd80      	pop	{r7, pc}
    e1c8:	0000e1cd 	.word	0x0000e1cd

0000e1cc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    e1cc:	b580      	push	{r7, lr}
    e1ce:	b086      	sub	sp, #24
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	60f8      	str	r0, [r7, #12]
    e1d4:	60b9      	str	r1, [r7, #8]
    e1d6:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    e1d8:	687b      	ldr	r3, [r7, #4]
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d109      	bne.n	e1f2 <_ZN5Print5printEli+0x26>
    return write(n);
    e1de:	68fb      	ldr	r3, [r7, #12]
    e1e0:	681b      	ldr	r3, [r3, #0]
    e1e2:	681b      	ldr	r3, [r3, #0]
    e1e4:	68ba      	ldr	r2, [r7, #8]
    e1e6:	b2d2      	uxtb	r2, r2
    e1e8:	4611      	mov	r1, r2
    e1ea:	68f8      	ldr	r0, [r7, #12]
    e1ec:	4798      	blx	r3
    e1ee:	4603      	mov	r3, r0
    e1f0:	e028      	b.n	e244 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    e1f2:	687b      	ldr	r3, [r7, #4]
    e1f4:	2b0a      	cmp	r3, #10
    e1f6:	d11d      	bne.n	e234 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    e1f8:	68bb      	ldr	r3, [r7, #8]
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	da12      	bge.n	e224 <_ZN5Print5printEli+0x58>
      int t = print('-');
    e1fe:	212d      	movs	r1, #45	; 0x2d
    e200:	68f8      	ldr	r0, [r7, #12]
    e202:	4b12      	ldr	r3, [pc, #72]	; (e24c <_ZN5Print5printEli+0x80>)
    e204:	4798      	blx	r3
    e206:	4603      	mov	r3, r0
    e208:	617b      	str	r3, [r7, #20]
      n = -n;
    e20a:	68bb      	ldr	r3, [r7, #8]
    e20c:	425b      	negs	r3, r3
    e20e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    e210:	68bb      	ldr	r3, [r7, #8]
    e212:	220a      	movs	r2, #10
    e214:	4619      	mov	r1, r3
    e216:	68f8      	ldr	r0, [r7, #12]
    e218:	4b0d      	ldr	r3, [pc, #52]	; (e250 <_ZN5Print5printEli+0x84>)
    e21a:	4798      	blx	r3
    e21c:	4602      	mov	r2, r0
    e21e:	697b      	ldr	r3, [r7, #20]
    e220:	4413      	add	r3, r2
    e222:	e00f      	b.n	e244 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    e224:	68bb      	ldr	r3, [r7, #8]
    e226:	220a      	movs	r2, #10
    e228:	4619      	mov	r1, r3
    e22a:	68f8      	ldr	r0, [r7, #12]
    e22c:	4b08      	ldr	r3, [pc, #32]	; (e250 <_ZN5Print5printEli+0x84>)
    e22e:	4798      	blx	r3
    e230:	4603      	mov	r3, r0
    e232:	e007      	b.n	e244 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    e234:	68bb      	ldr	r3, [r7, #8]
    e236:	687a      	ldr	r2, [r7, #4]
    e238:	b2d2      	uxtb	r2, r2
    e23a:	4619      	mov	r1, r3
    e23c:	68f8      	ldr	r0, [r7, #12]
    e23e:	4b04      	ldr	r3, [pc, #16]	; (e250 <_ZN5Print5printEli+0x84>)
    e240:	4798      	blx	r3
    e242:	4603      	mov	r3, r0
  }
}
    e244:	4618      	mov	r0, r3
    e246:	3718      	adds	r7, #24
    e248:	46bd      	mov	sp, r7
    e24a:	bd80      	pop	{r7, pc}
    e24c:	0000e15d 	.word	0x0000e15d
    e250:	0000e299 	.word	0x0000e299

0000e254 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    e254:	b580      	push	{r7, lr}
    e256:	b084      	sub	sp, #16
    e258:	af00      	add	r7, sp, #0
    e25a:	60f8      	str	r0, [r7, #12]
    e25c:	60b9      	str	r1, [r7, #8]
    e25e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e260:	687b      	ldr	r3, [r7, #4]
    e262:	2b00      	cmp	r3, #0
    e264:	d109      	bne.n	e27a <_ZN5Print5printEmi+0x26>
    e266:	68fb      	ldr	r3, [r7, #12]
    e268:	681b      	ldr	r3, [r3, #0]
    e26a:	681b      	ldr	r3, [r3, #0]
    e26c:	68ba      	ldr	r2, [r7, #8]
    e26e:	b2d2      	uxtb	r2, r2
    e270:	4611      	mov	r1, r2
    e272:	68f8      	ldr	r0, [r7, #12]
    e274:	4798      	blx	r3
    e276:	4603      	mov	r3, r0
    e278:	e007      	b.n	e28a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	b2db      	uxtb	r3, r3
    e27e:	461a      	mov	r2, r3
    e280:	68b9      	ldr	r1, [r7, #8]
    e282:	68f8      	ldr	r0, [r7, #12]
    e284:	4b03      	ldr	r3, [pc, #12]	; (e294 <_ZN5Print5printEmi+0x40>)
    e286:	4798      	blx	r3
    e288:	4603      	mov	r3, r0
}
    e28a:	4618      	mov	r0, r3
    e28c:	3710      	adds	r7, #16
    e28e:	46bd      	mov	sp, r7
    e290:	bd80      	pop	{r7, pc}
    e292:	bf00      	nop
    e294:	0000e299 	.word	0x0000e299

0000e298 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e298:	b580      	push	{r7, lr}
    e29a:	b08e      	sub	sp, #56	; 0x38
    e29c:	af00      	add	r7, sp, #0
    e29e:	60f8      	str	r0, [r7, #12]
    e2a0:	60b9      	str	r1, [r7, #8]
    e2a2:	4613      	mov	r3, r2
    e2a4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e2a6:	f107 0310 	add.w	r3, r7, #16
    e2aa:	3320      	adds	r3, #32
    e2ac:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2b0:	2200      	movs	r2, #0
    e2b2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e2b4:	79fb      	ldrb	r3, [r7, #7]
    e2b6:	2b01      	cmp	r3, #1
    e2b8:	dc01      	bgt.n	e2be <_ZN5Print11printNumberEmh+0x26>
    e2ba:	230a      	movs	r3, #10
    e2bc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e2be:	79fa      	ldrb	r2, [r7, #7]
    e2c0:	68bb      	ldr	r3, [r7, #8]
    e2c2:	fbb3 f1f2 	udiv	r1, r3, r2
    e2c6:	fb02 f201 	mul.w	r2, r2, r1
    e2ca:	1a9b      	subs	r3, r3, r2
    e2cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e2d0:	79fb      	ldrb	r3, [r7, #7]
    e2d2:	68ba      	ldr	r2, [r7, #8]
    e2d4:	fbb2 f3f3 	udiv	r3, r2, r3
    e2d8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2dc:	3b01      	subs	r3, #1
    e2de:	637b      	str	r3, [r7, #52]	; 0x34
    e2e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e2e4:	2b09      	cmp	r3, #9
    e2e6:	dc04      	bgt.n	e2f2 <_ZN5Print11printNumberEmh+0x5a>
    e2e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e2ec:	3330      	adds	r3, #48	; 0x30
    e2ee:	b2db      	uxtb	r3, r3
    e2f0:	e003      	b.n	e2fa <_ZN5Print11printNumberEmh+0x62>
    e2f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e2f6:	3337      	adds	r3, #55	; 0x37
    e2f8:	b2db      	uxtb	r3, r3
    e2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e2fc:	7013      	strb	r3, [r2, #0]
  } while(n);
    e2fe:	68bb      	ldr	r3, [r7, #8]
    e300:	2b00      	cmp	r3, #0
    e302:	d000      	beq.n	e306 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e304:	e7db      	b.n	e2be <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e306:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e308:	68f8      	ldr	r0, [r7, #12]
    e30a:	4b03      	ldr	r3, [pc, #12]	; (e318 <_ZN5Print11printNumberEmh+0x80>)
    e30c:	4798      	blx	r3
    e30e:	4603      	mov	r3, r0
}
    e310:	4618      	mov	r0, r3
    e312:	3738      	adds	r7, #56	; 0x38
    e314:	46bd      	mov	sp, r7
    e316:	bd80      	pop	{r7, pc}
    e318:	0000e0a5 	.word	0x0000e0a5

0000e31c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e31c:	b480      	push	{r7}
    e31e:	b083      	sub	sp, #12
    e320:	af00      	add	r7, sp, #0
    e322:	6078      	str	r0, [r7, #4]
    e324:	460b      	mov	r3, r1
    e326:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e328:	78fb      	ldrb	r3, [r7, #3]
    e32a:	687a      	ldr	r2, [r7, #4]
    e32c:	01db      	lsls	r3, r3, #7
    e32e:	4413      	add	r3, r2
    e330:	681b      	ldr	r3, [r3, #0]
}
    e332:	4618      	mov	r0, r3
    e334:	370c      	adds	r7, #12
    e336:	46bd      	mov	sp, r7
    e338:	bc80      	pop	{r7}
    e33a:	4770      	bx	lr

0000e33c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e33c:	b480      	push	{r7}
    e33e:	b083      	sub	sp, #12
    e340:	af00      	add	r7, sp, #0
    e342:	6078      	str	r0, [r7, #4]
    e344:	460b      	mov	r3, r1
    e346:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e348:	78fb      	ldrb	r3, [r7, #3]
    e34a:	687a      	ldr	r2, [r7, #4]
    e34c:	01db      	lsls	r3, r3, #7
    e34e:	4413      	add	r3, r2
    e350:	3310      	adds	r3, #16
    e352:	681b      	ldr	r3, [r3, #0]
}
    e354:	4618      	mov	r0, r3
    e356:	370c      	adds	r7, #12
    e358:	46bd      	mov	sp, r7
    e35a:	bc80      	pop	{r7}
    e35c:	4770      	bx	lr

0000e35e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e35e:	b480      	push	{r7}
    e360:	b083      	sub	sp, #12
    e362:	af00      	add	r7, sp, #0
    e364:	6078      	str	r0, [r7, #4]
    e366:	460b      	mov	r3, r1
    e368:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e36a:	78fb      	ldrb	r3, [r7, #3]
    e36c:	687a      	ldr	r2, [r7, #4]
    e36e:	01db      	lsls	r3, r3, #7
    e370:	4413      	add	r3, r2
    e372:	3320      	adds	r3, #32
    e374:	681b      	ldr	r3, [r3, #0]
}
    e376:	4618      	mov	r0, r3
    e378:	370c      	adds	r7, #12
    e37a:	46bd      	mov	sp, r7
    e37c:	bc80      	pop	{r7}
    e37e:	4770      	bx	lr

0000e380 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e380:	b580      	push	{r7, lr}
    e382:	b086      	sub	sp, #24
    e384:	af00      	add	r7, sp, #0
    e386:	4603      	mov	r3, r0
    e388:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e38a:	f107 030c 	add.w	r3, r7, #12
    e38e:	4618      	mov	r0, r3
    e390:	4b13      	ldr	r3, [pc, #76]	; (e3e0 <_gpio_get_level+0x60>)
    e392:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e394:	79fb      	ldrb	r3, [r7, #7]
    e396:	4619      	mov	r1, r3
    e398:	4812      	ldr	r0, [pc, #72]	; (e3e4 <_gpio_get_level+0x64>)
    e39a:	4b13      	ldr	r3, [pc, #76]	; (e3e8 <_gpio_get_level+0x68>)
    e39c:	4798      	blx	r3
    e39e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e3a0:	79fb      	ldrb	r3, [r7, #7]
    e3a2:	4619      	mov	r1, r3
    e3a4:	480f      	ldr	r0, [pc, #60]	; (e3e4 <_gpio_get_level+0x64>)
    e3a6:	4b11      	ldr	r3, [pc, #68]	; (e3ec <_gpio_get_level+0x6c>)
    e3a8:	4798      	blx	r3
    e3aa:	4602      	mov	r2, r0
    e3ac:	697b      	ldr	r3, [r7, #20]
    e3ae:	43db      	mvns	r3, r3
    e3b0:	4013      	ands	r3, r2
    e3b2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e3b4:	79fb      	ldrb	r3, [r7, #7]
    e3b6:	4619      	mov	r1, r3
    e3b8:	480a      	ldr	r0, [pc, #40]	; (e3e4 <_gpio_get_level+0x64>)
    e3ba:	4b0d      	ldr	r3, [pc, #52]	; (e3f0 <_gpio_get_level+0x70>)
    e3bc:	4798      	blx	r3
    e3be:	4602      	mov	r2, r0
    e3c0:	697b      	ldr	r3, [r7, #20]
    e3c2:	4013      	ands	r3, r2
    e3c4:	693a      	ldr	r2, [r7, #16]
    e3c6:	4313      	orrs	r3, r2
    e3c8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e3ca:	f107 030c 	add.w	r3, r7, #12
    e3ce:	4618      	mov	r0, r3
    e3d0:	4b08      	ldr	r3, [pc, #32]	; (e3f4 <_gpio_get_level+0x74>)
    e3d2:	4798      	blx	r3

	return tmp;
    e3d4:	693b      	ldr	r3, [r7, #16]
}
    e3d6:	4618      	mov	r0, r3
    e3d8:	3718      	adds	r7, #24
    e3da:	46bd      	mov	sp, r7
    e3dc:	bd80      	pop	{r7, pc}
    e3de:	bf00      	nop
    e3e0:	0000b53d 	.word	0x0000b53d
    e3e4:	41008000 	.word	0x41008000
    e3e8:	0000e31d 	.word	0x0000e31d
    e3ec:	0000e35f 	.word	0x0000e35f
    e3f0:	0000e33d 	.word	0x0000e33d
    e3f4:	0000b563 	.word	0x0000b563

0000e3f8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e3f8:	b580      	push	{r7, lr}
    e3fa:	b082      	sub	sp, #8
    e3fc:	af00      	add	r7, sp, #0
    e3fe:	4603      	mov	r3, r0
    e400:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e402:	79fb      	ldrb	r3, [r7, #7]
    e404:	115b      	asrs	r3, r3, #5
    e406:	b2db      	uxtb	r3, r3
    e408:	4618      	mov	r0, r3
    e40a:	4b09      	ldr	r3, [pc, #36]	; (e430 <gpio_get_pin_level+0x38>)
    e40c:	4798      	blx	r3
    e40e:	4601      	mov	r1, r0
    e410:	79fb      	ldrb	r3, [r7, #7]
    e412:	f003 031f 	and.w	r3, r3, #31
    e416:	2201      	movs	r2, #1
    e418:	fa02 f303 	lsl.w	r3, r2, r3
    e41c:	400b      	ands	r3, r1
    e41e:	2b00      	cmp	r3, #0
    e420:	bf14      	ite	ne
    e422:	2301      	movne	r3, #1
    e424:	2300      	moveq	r3, #0
    e426:	b2db      	uxtb	r3, r3
}
    e428:	4618      	mov	r0, r3
    e42a:	3708      	adds	r7, #8
    e42c:	46bd      	mov	sp, r7
    e42e:	bd80      	pop	{r7, pc}
    e430:	0000e381 	.word	0x0000e381

0000e434 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e434:	b480      	push	{r7}
    e436:	b083      	sub	sp, #12
    e438:	af00      	add	r7, sp, #0
    e43a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e43c:	4b06      	ldr	r3, [pc, #24]	; (e458 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e43e:	681b      	ldr	r3, [r3, #0]
    e440:	2201      	movs	r2, #1
    e442:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e444:	4b04      	ldr	r3, [pc, #16]	; (e458 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e446:	681b      	ldr	r3, [r3, #0]
    e448:	2200      	movs	r2, #0
    e44a:	705a      	strb	r2, [r3, #1]
}
    e44c:	bf00      	nop
    e44e:	370c      	adds	r7, #12
    e450:	46bd      	mov	sp, r7
    e452:	bc80      	pop	{r7}
    e454:	4770      	bx	lr
    e456:	bf00      	nop
    e458:	20000f84 	.word	0x20000f84

0000e45c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e45c:	b580      	push	{r7, lr}
    e45e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e460:	2040      	movs	r0, #64	; 0x40
    e462:	4b0a      	ldr	r3, [pc, #40]	; (e48c <_ZL10USBPluggedv+0x30>)
    e464:	4798      	blx	r3
    e466:	4603      	mov	r3, r0
    e468:	2b00      	cmp	r3, #0
    e46a:	d004      	beq.n	e476 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e46c:	4b08      	ldr	r3, [pc, #32]	; (e490 <_ZL10USBPluggedv+0x34>)
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	2201      	movs	r2, #1
    e472:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e474:	e007      	b.n	e486 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e476:	4b06      	ldr	r3, [pc, #24]	; (e490 <_ZL10USBPluggedv+0x34>)
    e478:	681b      	ldr	r3, [r3, #0]
    e47a:	2200      	movs	r2, #0
    e47c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e47e:	4b04      	ldr	r3, [pc, #16]	; (e490 <_ZL10USBPluggedv+0x34>)
    e480:	681b      	ldr	r3, [r3, #0]
    e482:	2200      	movs	r2, #0
    e484:	701a      	strb	r2, [r3, #0]
}
    e486:	bf00      	nop
    e488:	bd80      	pop	{r7, pc}
    e48a:	bf00      	nop
    e48c:	0000e3f9 	.word	0x0000e3f9
    e490:	20000f84 	.word	0x20000f84

0000e494 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e494:	b480      	push	{r7}
    e496:	b083      	sub	sp, #12
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e49c:	4a04      	ldr	r2, [pc, #16]	; (e4b0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e49e:	687b      	ldr	r3, [r7, #4]
    e4a0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e4a2:	687b      	ldr	r3, [r7, #4]
    e4a4:	4618      	mov	r0, r3
    e4a6:	370c      	adds	r7, #12
    e4a8:	46bd      	mov	sp, r7
    e4aa:	bc80      	pop	{r7}
    e4ac:	4770      	bx	lr
    e4ae:	bf00      	nop
    e4b0:	20000f84 	.word	0x20000f84

0000e4b4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e4b4:	b480      	push	{r7}
    e4b6:	b083      	sub	sp, #12
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e4bc:	687b      	ldr	r3, [r7, #4]
    e4be:	4618      	mov	r0, r3
    e4c0:	370c      	adds	r7, #12
    e4c2:	46bd      	mov	sp, r7
    e4c4:	bc80      	pop	{r7}
    e4c6:	4770      	bx	lr

0000e4c8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e4c8:	b580      	push	{r7, lr}
    e4ca:	b082      	sub	sp, #8
    e4cc:	af00      	add	r7, sp, #0
    e4ce:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e4d0:	491f      	ldr	r1, [pc, #124]	; (e550 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e4d2:	2040      	movs	r0, #64	; 0x40
    e4d4:	4b1f      	ldr	r3, [pc, #124]	; (e554 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e4d6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e4d8:	481f      	ldr	r0, [pc, #124]	; (e558 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4da:	4b20      	ldr	r3, [pc, #128]	; (e55c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e4dc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e4de:	2040      	movs	r0, #64	; 0x40
    e4e0:	4b1f      	ldr	r3, [pc, #124]	; (e560 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e4e2:	4798      	blx	r3
    e4e4:	4603      	mov	r3, r0
    e4e6:	461a      	mov	r2, r3
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	78db      	ldrb	r3, [r3, #3]
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d024      	beq.n	e53e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	2200      	movs	r2, #0
    e4f8:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	2201      	movs	r2, #1
    e4fe:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e500:	f44f 7216 	mov.w	r2, #600	; 0x258
    e504:	4917      	ldr	r1, [pc, #92]	; (e564 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e506:	4814      	ldr	r0, [pc, #80]	; (e558 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e508:	4b17      	ldr	r3, [pc, #92]	; (e568 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e50a:	4798      	blx	r3
			usbTerminalTimer.Start();
    e50c:	4812      	ldr	r0, [pc, #72]	; (e558 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e50e:	4b17      	ldr	r3, [pc, #92]	; (e56c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e510:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e512:	4817      	ldr	r0, [pc, #92]	; (e570 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e514:	4b17      	ldr	r3, [pc, #92]	; (e574 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e516:	4798      	blx	r3
    e518:	4603      	mov	r3, r0
    e51a:	f083 0301 	eor.w	r3, r3, #1
    e51e:	b2db      	uxtb	r3, r3
    e520:	2b00      	cmp	r3, #0
    e522:	d008      	beq.n	e536 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e524:	687b      	ldr	r3, [r7, #4]
    e526:	789b      	ldrb	r3, [r3, #2]
    e528:	b2db      	uxtb	r3, r3
    e52a:	2b00      	cmp	r3, #0
    e52c:	d0f1      	beq.n	e512 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	2200      	movs	r2, #0
    e532:	701a      	strb	r2, [r3, #0]
					return;
    e534:	e009      	b.n	e54a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e536:	4808      	ldr	r0, [pc, #32]	; (e558 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e538:	4b0f      	ldr	r3, [pc, #60]	; (e578 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e53a:	4798      	blx	r3
    e53c:	e005      	b.n	e54a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e53e:	687b      	ldr	r3, [r7, #4]
    e540:	2200      	movs	r2, #0
    e542:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e544:	687b      	ldr	r3, [r7, #4]
    e546:	2200      	movs	r2, #0
    e548:	705a      	strb	r2, [r3, #1]
		}
		
}
    e54a:	3708      	adds	r7, #8
    e54c:	46bd      	mov	sp, r7
    e54e:	bd80      	pop	{r7, pc}
    e550:	0000e45d 	.word	0x0000e45d
    e554:	00001e05 	.word	0x00001e05
    e558:	20000fdc 	.word	0x20000fdc
    e55c:	0000e5f9 	.word	0x0000e5f9
    e560:	0000e3f9 	.word	0x0000e3f9
    e564:	0000e435 	.word	0x0000e435
    e568:	0000e6e5 	.word	0x0000e6e5
    e56c:	0000e631 	.word	0x0000e631
    e570:	20000f24 	.word	0x20000f24
    e574:	0000dd1d 	.word	0x0000dd1d
    e578:	0000e655 	.word	0x0000e655

0000e57c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e57c:	b580      	push	{r7, lr}
    e57e:	b082      	sub	sp, #8
    e580:	af00      	add	r7, sp, #0
    e582:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e584:	4b04      	ldr	r3, [pc, #16]	; (e598 <_ZL7task_cbPK10timer_task+0x1c>)
    e586:	681b      	ldr	r3, [r3, #0]
    e588:	4618      	mov	r0, r3
    e58a:	4b04      	ldr	r3, [pc, #16]	; (e59c <_ZL7task_cbPK10timer_task+0x20>)
    e58c:	4798      	blx	r3
}
    e58e:	bf00      	nop
    e590:	3708      	adds	r7, #8
    e592:	46bd      	mov	sp, r7
    e594:	bd80      	pop	{r7, pc}
    e596:	bf00      	nop
    e598:	20000f88 	.word	0x20000f88
    e59c:	0000e67d 	.word	0x0000e67d

0000e5a0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e5a0:	b480      	push	{r7}
    e5a2:	b083      	sub	sp, #12
    e5a4:	af00      	add	r7, sp, #0
    e5a6:	6078      	str	r0, [r7, #4]
    e5a8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e5aa:	687b      	ldr	r3, [r7, #4]
    e5ac:	683a      	ldr	r2, [r7, #0]
    e5ae:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e5b0:	4a08      	ldr	r2, [pc, #32]	; (e5d4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e5bc:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e5be:	687b      	ldr	r3, [r7, #4]
    e5c0:	689b      	ldr	r3, [r3, #8]
    e5c2:	4a05      	ldr	r2, [pc, #20]	; (e5d8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e5c4:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e5c6:	687b      	ldr	r3, [r7, #4]
    e5c8:	4618      	mov	r0, r3
    e5ca:	370c      	adds	r7, #12
    e5cc:	46bd      	mov	sp, r7
    e5ce:	bc80      	pop	{r7}
    e5d0:	4770      	bx	lr
    e5d2:	bf00      	nop
    e5d4:	20000f88 	.word	0x20000f88
    e5d8:	0000e57d 	.word	0x0000e57d

0000e5dc <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e5dc:	b480      	push	{r7}
    e5de:	b083      	sub	sp, #12
    e5e0:	af00      	add	r7, sp, #0
    e5e2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	2200      	movs	r2, #0
    e5e8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e5ea:	687b      	ldr	r3, [r7, #4]
    e5ec:	4618      	mov	r0, r3
    e5ee:	370c      	adds	r7, #12
    e5f0:	46bd      	mov	sp, r7
    e5f2:	bc80      	pop	{r7}
    e5f4:	4770      	bx	lr
	...

0000e5f8 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e5f8:	b580      	push	{r7, lr}
    e5fa:	b082      	sub	sp, #8
    e5fc:	af00      	add	r7, sp, #0
    e5fe:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e600:	687b      	ldr	r3, [r7, #4]
    e602:	2200      	movs	r2, #0
    e604:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e606:	6878      	ldr	r0, [r7, #4]
    e608:	4b08      	ldr	r3, [pc, #32]	; (e62c <_ZN17TimerSerial_Class4InitEv+0x34>)
    e60a:	4798      	blx	r3
    e60c:	4603      	mov	r3, r0
    e60e:	2b00      	cmp	r3, #0
    e610:	bf0c      	ite	eq
    e612:	2301      	moveq	r3, #1
    e614:	2300      	movne	r3, #0
    e616:	b2da      	uxtb	r2, r3
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	709a      	strb	r2, [r3, #2]
	return isOK;
    e61c:	687b      	ldr	r3, [r7, #4]
    e61e:	789b      	ldrb	r3, [r3, #2]
    e620:	b2db      	uxtb	r3, r3
}
    e622:	4618      	mov	r0, r3
    e624:	3708      	adds	r7, #8
    e626:	46bd      	mov	sp, r7
    e628:	bd80      	pop	{r7, pc}
    e62a:	bf00      	nop
    e62c:	0000e631 	.word	0x0000e631

0000e630 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e630:	b580      	push	{r7, lr}
    e632:	b084      	sub	sp, #16
    e634:	af00      	add	r7, sp, #0
    e636:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e638:	687b      	ldr	r3, [r7, #4]
    e63a:	691b      	ldr	r3, [r3, #16]
    e63c:	4618      	mov	r0, r3
    e63e:	4b04      	ldr	r3, [pc, #16]	; (e650 <_ZN17TimerSerial_Class5StartEv+0x20>)
    e640:	4798      	blx	r3
    e642:	60f8      	str	r0, [r7, #12]
	return status;
    e644:	68fb      	ldr	r3, [r7, #12]
	
}
    e646:	4618      	mov	r0, r3
    e648:	3710      	adds	r7, #16
    e64a:	46bd      	mov	sp, r7
    e64c:	bd80      	pop	{r7, pc}
    e64e:	bf00      	nop
    e650:	00002779 	.word	0x00002779

0000e654 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e654:	b580      	push	{r7, lr}
    e656:	b084      	sub	sp, #16
    e658:	af00      	add	r7, sp, #0
    e65a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e65c:	687b      	ldr	r3, [r7, #4]
    e65e:	691b      	ldr	r3, [r3, #16]
    e660:	4618      	mov	r0, r3
    e662:	4b05      	ldr	r3, [pc, #20]	; (e678 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e664:	4798      	blx	r3
    e666:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	2200      	movs	r2, #0
    e66c:	705a      	strb	r2, [r3, #1]
	return status;
    e66e:	68fb      	ldr	r3, [r7, #12]
}
    e670:	4618      	mov	r0, r3
    e672:	3710      	adds	r7, #16
    e674:	46bd      	mov	sp, r7
    e676:	bd80      	pop	{r7, pc}
    e678:	000027e1 	.word	0x000027e1

0000e67c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e67c:	b480      	push	{r7}
    e67e:	b083      	sub	sp, #12
    e680:	af00      	add	r7, sp, #0
    e682:	6078      	str	r0, [r7, #4]
	timeout=1;
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	2201      	movs	r2, #1
    e688:	705a      	strb	r2, [r3, #1]
}
    e68a:	bf00      	nop
    e68c:	370c      	adds	r7, #12
    e68e:	46bd      	mov	sp, r7
    e690:	bc80      	pop	{r7}
    e692:	4770      	bx	lr

0000e694 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e694:	b580      	push	{r7, lr}
    e696:	b086      	sub	sp, #24
    e698:	af00      	add	r7, sp, #0
    e69a:	60f8      	str	r0, [r7, #12]
    e69c:	60b9      	str	r1, [r7, #8]
    e69e:	607a      	str	r2, [r7, #4]
    e6a0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e6a2:	68f8      	ldr	r0, [r7, #12]
    e6a4:	4b0d      	ldr	r3, [pc, #52]	; (e6dc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e6a6:	4798      	blx	r3
	task->interval = interval;
    e6a8:	68fb      	ldr	r3, [r7, #12]
    e6aa:	689b      	ldr	r3, [r3, #8]
    e6ac:	687a      	ldr	r2, [r7, #4]
    e6ae:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e6b0:	68fb      	ldr	r3, [r7, #12]
    e6b2:	689b      	ldr	r3, [r3, #8]
    e6b4:	68ba      	ldr	r2, [r7, #8]
    e6b6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e6b8:	68fb      	ldr	r3, [r7, #12]
    e6ba:	689b      	ldr	r3, [r3, #8]
    e6bc:	78fa      	ldrb	r2, [r7, #3]
    e6be:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e6c0:	68fb      	ldr	r3, [r7, #12]
    e6c2:	691a      	ldr	r2, [r3, #16]
    e6c4:	68fb      	ldr	r3, [r7, #12]
    e6c6:	689b      	ldr	r3, [r3, #8]
    e6c8:	4619      	mov	r1, r3
    e6ca:	4610      	mov	r0, r2
    e6cc:	4b04      	ldr	r3, [pc, #16]	; (e6e0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e6ce:	4798      	blx	r3
    e6d0:	6178      	str	r0, [r7, #20]
	
	return status;
    e6d2:	697b      	ldr	r3, [r7, #20]
}
    e6d4:	4618      	mov	r0, r3
    e6d6:	3718      	adds	r7, #24
    e6d8:	46bd      	mov	sp, r7
    e6da:	bd80      	pop	{r7, pc}
    e6dc:	0000e79d 	.word	0x0000e79d
    e6e0:	0000284d 	.word	0x0000284d

0000e6e4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e6e4:	b590      	push	{r4, r7, lr}
    e6e6:	b087      	sub	sp, #28
    e6e8:	af00      	add	r7, sp, #0
    e6ea:	60f8      	str	r0, [r7, #12]
    e6ec:	60b9      	str	r1, [r7, #8]
    e6ee:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e6f0:	2300      	movs	r3, #0
    e6f2:	687a      	ldr	r2, [r7, #4]
    e6f4:	68b9      	ldr	r1, [r7, #8]
    e6f6:	68f8      	ldr	r0, [r7, #12]
    e6f8:	4c03      	ldr	r4, [pc, #12]	; (e708 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e6fa:	47a0      	blx	r4
    e6fc:	6178      	str	r0, [r7, #20]
	return status;
    e6fe:	697b      	ldr	r3, [r7, #20]
}
    e700:	4618      	mov	r0, r3
    e702:	371c      	adds	r7, #28
    e704:	46bd      	mov	sp, r7
    e706:	bd90      	pop	{r4, r7, pc}
    e708:	0000e695 	.word	0x0000e695

0000e70c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e70c:	b590      	push	{r4, r7, lr}
    e70e:	b087      	sub	sp, #28
    e710:	af00      	add	r7, sp, #0
    e712:	60f8      	str	r0, [r7, #12]
    e714:	60b9      	str	r1, [r7, #8]
    e716:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e718:	2300      	movs	r3, #0
    e71a:	687a      	ldr	r2, [r7, #4]
    e71c:	68b9      	ldr	r1, [r7, #8]
    e71e:	68f8      	ldr	r0, [r7, #12]
    e720:	4c06      	ldr	r4, [pc, #24]	; (e73c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e722:	47a0      	blx	r4
    e724:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	691b      	ldr	r3, [r3, #16]
    e72a:	4618      	mov	r0, r3
    e72c:	4b04      	ldr	r3, [pc, #16]	; (e740 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e72e:	4798      	blx	r3
    e730:	6178      	str	r0, [r7, #20]
	return status;
    e732:	697b      	ldr	r3, [r7, #20]
}
    e734:	4618      	mov	r0, r3
    e736:	371c      	adds	r7, #28
    e738:	46bd      	mov	sp, r7
    e73a:	bd90      	pop	{r4, r7, pc}
    e73c:	0000e695 	.word	0x0000e695
    e740:	00002779 	.word	0x00002779

0000e744 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e744:	b580      	push	{r7, lr}
    e746:	b082      	sub	sp, #8
    e748:	af00      	add	r7, sp, #0
    e74a:	6078      	str	r0, [r7, #4]
    e74c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e74e:	6839      	ldr	r1, [r7, #0]
    e750:	6878      	ldr	r0, [r7, #4]
    e752:	4b0f      	ldr	r3, [pc, #60]	; (e790 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e754:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	691b      	ldr	r3, [r3, #16]
    e75a:	f103 0218 	add.w	r2, r3, #24
    e75e:	687b      	ldr	r3, [r7, #4]
    e760:	689b      	ldr	r3, [r3, #8]
    e762:	4619      	mov	r1, r3
    e764:	4610      	mov	r0, r2
    e766:	4b0b      	ldr	r3, [pc, #44]	; (e794 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e768:	4798      	blx	r3
    e76a:	4603      	mov	r3, r0
    e76c:	2b00      	cmp	r3, #0
    e76e:	d007      	beq.n	e780 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e770:	687b      	ldr	r3, [r7, #4]
    e772:	691a      	ldr	r2, [r3, #16]
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	689b      	ldr	r3, [r3, #8]
    e778:	4619      	mov	r1, r3
    e77a:	4610      	mov	r0, r2
    e77c:	4b06      	ldr	r3, [pc, #24]	; (e798 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e77e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	689b      	ldr	r3, [r3, #8]
    e784:	2200      	movs	r2, #0
    e786:	60da      	str	r2, [r3, #12]
}
    e788:	bf00      	nop
    e78a:	3708      	adds	r7, #8
    e78c:	46bd      	mov	sp, r7
    e78e:	bd80      	pop	{r7, pc}
    e790:	0000e7f5 	.word	0x0000e7f5
    e794:	00003539 	.word	0x00003539
    e798:	00002951 	.word	0x00002951

0000e79c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e79c:	b480      	push	{r7}
    e79e:	b085      	sub	sp, #20
    e7a0:	af00      	add	r7, sp, #0
    e7a2:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7a4:	2300      	movs	r3, #0
    e7a6:	73fb      	strb	r3, [r7, #15]
    e7a8:	7bfb      	ldrb	r3, [r7, #15]
    e7aa:	2b03      	cmp	r3, #3
    e7ac:	dc18      	bgt.n	e7e0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e7ae:	7bfa      	ldrb	r2, [r7, #15]
    e7b0:	490f      	ldr	r1, [pc, #60]	; (e7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7b2:	4613      	mov	r3, r2
    e7b4:	009b      	lsls	r3, r3, #2
    e7b6:	4413      	add	r3, r2
    e7b8:	009b      	lsls	r3, r3, #2
    e7ba:	440b      	add	r3, r1
    e7bc:	330c      	adds	r3, #12
    e7be:	681b      	ldr	r3, [r3, #0]
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d109      	bne.n	e7d8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e7c4:	7bfa      	ldrb	r2, [r7, #15]
    e7c6:	4613      	mov	r3, r2
    e7c8:	009b      	lsls	r3, r3, #2
    e7ca:	4413      	add	r3, r2
    e7cc:	009b      	lsls	r3, r3, #2
    e7ce:	4a08      	ldr	r2, [pc, #32]	; (e7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7d0:	441a      	add	r2, r3
    e7d2:	687b      	ldr	r3, [r7, #4]
    e7d4:	609a      	str	r2, [r3, #8]
			return;
    e7d6:	e006      	b.n	e7e6 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7d8:	7bfb      	ldrb	r3, [r7, #15]
    e7da:	3301      	adds	r3, #1
    e7dc:	73fb      	strb	r3, [r7, #15]
    e7de:	e7e3      	b.n	e7a8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e7e0:	687b      	ldr	r3, [r7, #4]
    e7e2:	4a03      	ldr	r2, [pc, #12]	; (e7f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7e4:	609a      	str	r2, [r3, #8]

}
    e7e6:	3714      	adds	r7, #20
    e7e8:	46bd      	mov	sp, r7
    e7ea:	bc80      	pop	{r7}
    e7ec:	4770      	bx	lr
    e7ee:	bf00      	nop
    e7f0:	20000f8c 	.word	0x20000f8c

0000e7f4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e7f4:	b480      	push	{r7}
    e7f6:	b085      	sub	sp, #20
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
    e7fc:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7fe:	2300      	movs	r3, #0
    e800:	73fb      	strb	r3, [r7, #15]
    e802:	7bfb      	ldrb	r3, [r7, #15]
    e804:	2b03      	cmp	r3, #3
    e806:	dc19      	bgt.n	e83c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e808:	7bfa      	ldrb	r2, [r7, #15]
    e80a:	490e      	ldr	r1, [pc, #56]	; (e844 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e80c:	4613      	mov	r3, r2
    e80e:	009b      	lsls	r3, r3, #2
    e810:	4413      	add	r3, r2
    e812:	009b      	lsls	r3, r3, #2
    e814:	440b      	add	r3, r1
    e816:	330c      	adds	r3, #12
    e818:	681a      	ldr	r2, [r3, #0]
    e81a:	683b      	ldr	r3, [r7, #0]
    e81c:	429a      	cmp	r2, r3
    e81e:	d109      	bne.n	e834 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e820:	7bfa      	ldrb	r2, [r7, #15]
    e822:	4613      	mov	r3, r2
    e824:	009b      	lsls	r3, r3, #2
    e826:	4413      	add	r3, r2
    e828:	009b      	lsls	r3, r3, #2
    e82a:	4a06      	ldr	r2, [pc, #24]	; (e844 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e82c:	441a      	add	r2, r3
    e82e:	687b      	ldr	r3, [r7, #4]
    e830:	609a      	str	r2, [r3, #8]
			return;
    e832:	e003      	b.n	e83c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e834:	7bfb      	ldrb	r3, [r7, #15]
    e836:	3301      	adds	r3, #1
    e838:	73fb      	strb	r3, [r7, #15]
    e83a:	e7e2      	b.n	e802 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e83c:	3714      	adds	r7, #20
    e83e:	46bd      	mov	sp, r7
    e840:	bc80      	pop	{r7}
    e842:	4770      	bx	lr
    e844:	20000f8c 	.word	0x20000f8c

0000e848 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e848:	b580      	push	{r7, lr}
    e84a:	b082      	sub	sp, #8
    e84c:	af00      	add	r7, sp, #0
    e84e:	6078      	str	r0, [r7, #4]
    e850:	6039      	str	r1, [r7, #0]
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	2b01      	cmp	r3, #1
    e856:	d116      	bne.n	e886 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e858:	683b      	ldr	r3, [r7, #0]
    e85a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e85e:	4293      	cmp	r3, r2
    e860:	d111      	bne.n	e886 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e862:	490b      	ldr	r1, [pc, #44]	; (e890 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e864:	480b      	ldr	r0, [pc, #44]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e866:	4b0c      	ldr	r3, [pc, #48]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e868:	4798      	blx	r3
    e86a:	4a0c      	ldr	r2, [pc, #48]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e86c:	490c      	ldr	r1, [pc, #48]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e86e:	4809      	ldr	r0, [pc, #36]	; (e894 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e870:	4b0c      	ldr	r3, [pc, #48]	; (e8a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e872:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e874:	490c      	ldr	r1, [pc, #48]	; (e8a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e876:	480d      	ldr	r0, [pc, #52]	; (e8ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e878:	4b07      	ldr	r3, [pc, #28]	; (e898 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e87a:	4798      	blx	r3
    e87c:	4a07      	ldr	r2, [pc, #28]	; (e89c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e87e:	4908      	ldr	r1, [pc, #32]	; (e8a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e880:	480a      	ldr	r0, [pc, #40]	; (e8ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e882:	4b08      	ldr	r3, [pc, #32]	; (e8a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e884:	4798      	blx	r3
    e886:	bf00      	nop
    e888:	3708      	adds	r7, #8
    e88a:	46bd      	mov	sp, r7
    e88c:	bd80      	pop	{r7, pc}
    e88e:	bf00      	nop
    e890:	20001134 	.word	0x20001134
    e894:	20000fdc 	.word	0x20000fdc
    e898:	0000e5a1 	.word	0x0000e5a1
    e89c:	20000000 	.word	0x20000000
    e8a0:	0000e5dd 	.word	0x0000e5dd
    e8a4:	0000e985 	.word	0x0000e985
    e8a8:	2000106c 	.word	0x2000106c
    e8ac:	20000ffc 	.word	0x20000ffc

0000e8b0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e8b0:	b580      	push	{r7, lr}
    e8b2:	af00      	add	r7, sp, #0
    e8b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8b8:	2001      	movs	r0, #1
    e8ba:	4b01      	ldr	r3, [pc, #4]	; (e8c0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e8bc:	4798      	blx	r3
    e8be:	bd80      	pop	{r7, pc}
    e8c0:	0000e849 	.word	0x0000e849

0000e8c4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e8c4:	b480      	push	{r7}
    e8c6:	b083      	sub	sp, #12
    e8c8:	af00      	add	r7, sp, #0
    e8ca:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e8cc:	2300      	movs	r3, #0
	}
    e8ce:	4618      	mov	r0, r3
    e8d0:	370c      	adds	r7, #12
    e8d2:	46bd      	mov	sp, r7
    e8d4:	bc80      	pop	{r7}
    e8d6:	4770      	bx	lr

0000e8d8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e8d8:	b480      	push	{r7}
    e8da:	af00      	add	r7, sp, #0
		}
    e8dc:	bf00      	nop
    e8de:	46bd      	mov	sp, r7
    e8e0:	bc80      	pop	{r7}
    e8e2:	4770      	bx	lr

0000e8e4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    e8e4:	b580      	push	{r7, lr}
    e8e6:	b084      	sub	sp, #16
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	60f8      	str	r0, [r7, #12]
    e8ec:	60b9      	str	r1, [r7, #8]
    e8ee:	4613      	mov	r3, r2
    e8f0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e8f2:	68fb      	ldr	r3, [r7, #12]
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d004      	beq.n	e902 <io_write+0x1e>
    e8f8:	68bb      	ldr	r3, [r7, #8]
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	d001      	beq.n	e902 <io_write+0x1e>
    e8fe:	2301      	movs	r3, #1
    e900:	e000      	b.n	e904 <io_write+0x20>
    e902:	2300      	movs	r3, #0
    e904:	f003 0301 	and.w	r3, r3, #1
    e908:	b2db      	uxtb	r3, r3
    e90a:	2234      	movs	r2, #52	; 0x34
    e90c:	4907      	ldr	r1, [pc, #28]	; (e92c <io_write+0x48>)
    e90e:	4618      	mov	r0, r3
    e910:	4b07      	ldr	r3, [pc, #28]	; (e930 <io_write+0x4c>)
    e912:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    e914:	68fb      	ldr	r3, [r7, #12]
    e916:	681b      	ldr	r3, [r3, #0]
    e918:	88fa      	ldrh	r2, [r7, #6]
    e91a:	68b9      	ldr	r1, [r7, #8]
    e91c:	68f8      	ldr	r0, [r7, #12]
    e91e:	4798      	blx	r3
    e920:	4603      	mov	r3, r0
}
    e922:	4618      	mov	r0, r3
    e924:	3710      	adds	r7, #16
    e926:	46bd      	mov	sp, r7
    e928:	bd80      	pop	{r7, pc}
    e92a:	bf00      	nop
    e92c:	0000f314 	.word	0x0000f314
    e930:	00003511 	.word	0x00003511

0000e934 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    e934:	b580      	push	{r7, lr}
    e936:	b084      	sub	sp, #16
    e938:	af00      	add	r7, sp, #0
    e93a:	60f8      	str	r0, [r7, #12]
    e93c:	60b9      	str	r1, [r7, #8]
    e93e:	4613      	mov	r3, r2
    e940:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    e942:	68fb      	ldr	r3, [r7, #12]
    e944:	2b00      	cmp	r3, #0
    e946:	d004      	beq.n	e952 <io_read+0x1e>
    e948:	68bb      	ldr	r3, [r7, #8]
    e94a:	2b00      	cmp	r3, #0
    e94c:	d001      	beq.n	e952 <io_read+0x1e>
    e94e:	2301      	movs	r3, #1
    e950:	e000      	b.n	e954 <io_read+0x20>
    e952:	2300      	movs	r3, #0
    e954:	f003 0301 	and.w	r3, r3, #1
    e958:	b2db      	uxtb	r3, r3
    e95a:	223d      	movs	r2, #61	; 0x3d
    e95c:	4907      	ldr	r1, [pc, #28]	; (e97c <io_read+0x48>)
    e95e:	4618      	mov	r0, r3
    e960:	4b07      	ldr	r3, [pc, #28]	; (e980 <io_read+0x4c>)
    e962:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    e964:	68fb      	ldr	r3, [r7, #12]
    e966:	685b      	ldr	r3, [r3, #4]
    e968:	88fa      	ldrh	r2, [r7, #6]
    e96a:	68b9      	ldr	r1, [r7, #8]
    e96c:	68f8      	ldr	r0, [r7, #12]
    e96e:	4798      	blx	r3
    e970:	4603      	mov	r3, r0
}
    e972:	4618      	mov	r0, r3
    e974:	3710      	adds	r7, #16
    e976:	46bd      	mov	sp, r7
    e978:	bd80      	pop	{r7, pc}
    e97a:	bf00      	nop
    e97c:	0000f314 	.word	0x0000f314
    e980:	00003511 	.word	0x00003511

0000e984 <__aeabi_atexit>:
    e984:	460b      	mov	r3, r1
    e986:	4601      	mov	r1, r0
    e988:	4618      	mov	r0, r3
    e98a:	f000 b801 	b.w	e990 <__cxa_atexit>
    e98e:	bf00      	nop

0000e990 <__cxa_atexit>:
    e990:	4613      	mov	r3, r2
    e992:	460a      	mov	r2, r1
    e994:	4601      	mov	r1, r0
    e996:	2002      	movs	r0, #2
    e998:	f000 b9a0 	b.w	ecdc <__register_exitproc>

0000e99c <ffs>:
    e99c:	b140      	cbz	r0, e9b0 <ffs+0x14>
    e99e:	2300      	movs	r3, #0
    e9a0:	fa40 f103 	asr.w	r1, r0, r3
    e9a4:	1c5a      	adds	r2, r3, #1
    e9a6:	07c9      	lsls	r1, r1, #31
    e9a8:	4613      	mov	r3, r2
    e9aa:	d5f9      	bpl.n	e9a0 <ffs+0x4>
    e9ac:	4610      	mov	r0, r2
    e9ae:	4770      	bx	lr
    e9b0:	4602      	mov	r2, r0
    e9b2:	4610      	mov	r0, r2
    e9b4:	4770      	bx	lr
    e9b6:	bf00      	nop

0000e9b8 <__libc_init_array>:
    e9b8:	b570      	push	{r4, r5, r6, lr}
    e9ba:	4e0f      	ldr	r6, [pc, #60]	; (e9f8 <__libc_init_array+0x40>)
    e9bc:	4d0f      	ldr	r5, [pc, #60]	; (e9fc <__libc_init_array+0x44>)
    e9be:	1b76      	subs	r6, r6, r5
    e9c0:	10b6      	asrs	r6, r6, #2
    e9c2:	bf18      	it	ne
    e9c4:	2400      	movne	r4, #0
    e9c6:	d005      	beq.n	e9d4 <__libc_init_array+0x1c>
    e9c8:	3401      	adds	r4, #1
    e9ca:	f855 3b04 	ldr.w	r3, [r5], #4
    e9ce:	4798      	blx	r3
    e9d0:	42a6      	cmp	r6, r4
    e9d2:	d1f9      	bne.n	e9c8 <__libc_init_array+0x10>
    e9d4:	4e0a      	ldr	r6, [pc, #40]	; (ea00 <__libc_init_array+0x48>)
    e9d6:	4d0b      	ldr	r5, [pc, #44]	; (ea04 <__libc_init_array+0x4c>)
    e9d8:	1b76      	subs	r6, r6, r5
    e9da:	f000 fca7 	bl	f32c <_init>
    e9de:	10b6      	asrs	r6, r6, #2
    e9e0:	bf18      	it	ne
    e9e2:	2400      	movne	r4, #0
    e9e4:	d006      	beq.n	e9f4 <__libc_init_array+0x3c>
    e9e6:	3401      	adds	r4, #1
    e9e8:	f855 3b04 	ldr.w	r3, [r5], #4
    e9ec:	4798      	blx	r3
    e9ee:	42a6      	cmp	r6, r4
    e9f0:	d1f9      	bne.n	e9e6 <__libc_init_array+0x2e>
    e9f2:	bd70      	pop	{r4, r5, r6, pc}
    e9f4:	bd70      	pop	{r4, r5, r6, pc}
    e9f6:	bf00      	nop
    e9f8:	0000f338 	.word	0x0000f338
    e9fc:	0000f338 	.word	0x0000f338
    ea00:	0000f354 	.word	0x0000f354
    ea04:	0000f338 	.word	0x0000f338

0000ea08 <memcpy>:
    ea08:	4684      	mov	ip, r0
    ea0a:	ea41 0300 	orr.w	r3, r1, r0
    ea0e:	f013 0303 	ands.w	r3, r3, #3
    ea12:	d16d      	bne.n	eaf0 <memcpy+0xe8>
    ea14:	3a40      	subs	r2, #64	; 0x40
    ea16:	d341      	bcc.n	ea9c <memcpy+0x94>
    ea18:	f851 3b04 	ldr.w	r3, [r1], #4
    ea1c:	f840 3b04 	str.w	r3, [r0], #4
    ea20:	f851 3b04 	ldr.w	r3, [r1], #4
    ea24:	f840 3b04 	str.w	r3, [r0], #4
    ea28:	f851 3b04 	ldr.w	r3, [r1], #4
    ea2c:	f840 3b04 	str.w	r3, [r0], #4
    ea30:	f851 3b04 	ldr.w	r3, [r1], #4
    ea34:	f840 3b04 	str.w	r3, [r0], #4
    ea38:	f851 3b04 	ldr.w	r3, [r1], #4
    ea3c:	f840 3b04 	str.w	r3, [r0], #4
    ea40:	f851 3b04 	ldr.w	r3, [r1], #4
    ea44:	f840 3b04 	str.w	r3, [r0], #4
    ea48:	f851 3b04 	ldr.w	r3, [r1], #4
    ea4c:	f840 3b04 	str.w	r3, [r0], #4
    ea50:	f851 3b04 	ldr.w	r3, [r1], #4
    ea54:	f840 3b04 	str.w	r3, [r0], #4
    ea58:	f851 3b04 	ldr.w	r3, [r1], #4
    ea5c:	f840 3b04 	str.w	r3, [r0], #4
    ea60:	f851 3b04 	ldr.w	r3, [r1], #4
    ea64:	f840 3b04 	str.w	r3, [r0], #4
    ea68:	f851 3b04 	ldr.w	r3, [r1], #4
    ea6c:	f840 3b04 	str.w	r3, [r0], #4
    ea70:	f851 3b04 	ldr.w	r3, [r1], #4
    ea74:	f840 3b04 	str.w	r3, [r0], #4
    ea78:	f851 3b04 	ldr.w	r3, [r1], #4
    ea7c:	f840 3b04 	str.w	r3, [r0], #4
    ea80:	f851 3b04 	ldr.w	r3, [r1], #4
    ea84:	f840 3b04 	str.w	r3, [r0], #4
    ea88:	f851 3b04 	ldr.w	r3, [r1], #4
    ea8c:	f840 3b04 	str.w	r3, [r0], #4
    ea90:	f851 3b04 	ldr.w	r3, [r1], #4
    ea94:	f840 3b04 	str.w	r3, [r0], #4
    ea98:	3a40      	subs	r2, #64	; 0x40
    ea9a:	d2bd      	bcs.n	ea18 <memcpy+0x10>
    ea9c:	3230      	adds	r2, #48	; 0x30
    ea9e:	d311      	bcc.n	eac4 <memcpy+0xbc>
    eaa0:	f851 3b04 	ldr.w	r3, [r1], #4
    eaa4:	f840 3b04 	str.w	r3, [r0], #4
    eaa8:	f851 3b04 	ldr.w	r3, [r1], #4
    eaac:	f840 3b04 	str.w	r3, [r0], #4
    eab0:	f851 3b04 	ldr.w	r3, [r1], #4
    eab4:	f840 3b04 	str.w	r3, [r0], #4
    eab8:	f851 3b04 	ldr.w	r3, [r1], #4
    eabc:	f840 3b04 	str.w	r3, [r0], #4
    eac0:	3a10      	subs	r2, #16
    eac2:	d2ed      	bcs.n	eaa0 <memcpy+0x98>
    eac4:	320c      	adds	r2, #12
    eac6:	d305      	bcc.n	ead4 <memcpy+0xcc>
    eac8:	f851 3b04 	ldr.w	r3, [r1], #4
    eacc:	f840 3b04 	str.w	r3, [r0], #4
    ead0:	3a04      	subs	r2, #4
    ead2:	d2f9      	bcs.n	eac8 <memcpy+0xc0>
    ead4:	3204      	adds	r2, #4
    ead6:	d008      	beq.n	eaea <memcpy+0xe2>
    ead8:	07d2      	lsls	r2, r2, #31
    eada:	bf1c      	itt	ne
    eadc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    eae0:	f800 3b01 	strbne.w	r3, [r0], #1
    eae4:	d301      	bcc.n	eaea <memcpy+0xe2>
    eae6:	880b      	ldrh	r3, [r1, #0]
    eae8:	8003      	strh	r3, [r0, #0]
    eaea:	4660      	mov	r0, ip
    eaec:	4770      	bx	lr
    eaee:	bf00      	nop
    eaf0:	2a08      	cmp	r2, #8
    eaf2:	d313      	bcc.n	eb1c <memcpy+0x114>
    eaf4:	078b      	lsls	r3, r1, #30
    eaf6:	d08d      	beq.n	ea14 <memcpy+0xc>
    eaf8:	f010 0303 	ands.w	r3, r0, #3
    eafc:	d08a      	beq.n	ea14 <memcpy+0xc>
    eafe:	f1c3 0304 	rsb	r3, r3, #4
    eb02:	1ad2      	subs	r2, r2, r3
    eb04:	07db      	lsls	r3, r3, #31
    eb06:	bf1c      	itt	ne
    eb08:	f811 3b01 	ldrbne.w	r3, [r1], #1
    eb0c:	f800 3b01 	strbne.w	r3, [r0], #1
    eb10:	d380      	bcc.n	ea14 <memcpy+0xc>
    eb12:	f831 3b02 	ldrh.w	r3, [r1], #2
    eb16:	f820 3b02 	strh.w	r3, [r0], #2
    eb1a:	e77b      	b.n	ea14 <memcpy+0xc>
    eb1c:	3a04      	subs	r2, #4
    eb1e:	d3d9      	bcc.n	ead4 <memcpy+0xcc>
    eb20:	3a01      	subs	r2, #1
    eb22:	f811 3b01 	ldrb.w	r3, [r1], #1
    eb26:	f800 3b01 	strb.w	r3, [r0], #1
    eb2a:	d2f9      	bcs.n	eb20 <memcpy+0x118>
    eb2c:	780b      	ldrb	r3, [r1, #0]
    eb2e:	7003      	strb	r3, [r0, #0]
    eb30:	784b      	ldrb	r3, [r1, #1]
    eb32:	7043      	strb	r3, [r0, #1]
    eb34:	788b      	ldrb	r3, [r1, #2]
    eb36:	7083      	strb	r3, [r0, #2]
    eb38:	4660      	mov	r0, ip
    eb3a:	4770      	bx	lr

0000eb3c <memset>:
    eb3c:	b470      	push	{r4, r5, r6}
    eb3e:	0786      	lsls	r6, r0, #30
    eb40:	d046      	beq.n	ebd0 <memset+0x94>
    eb42:	1e54      	subs	r4, r2, #1
    eb44:	2a00      	cmp	r2, #0
    eb46:	d041      	beq.n	ebcc <memset+0x90>
    eb48:	b2ca      	uxtb	r2, r1
    eb4a:	4603      	mov	r3, r0
    eb4c:	e002      	b.n	eb54 <memset+0x18>
    eb4e:	f114 34ff 	adds.w	r4, r4, #4294967295
    eb52:	d33b      	bcc.n	ebcc <memset+0x90>
    eb54:	f803 2b01 	strb.w	r2, [r3], #1
    eb58:	079d      	lsls	r5, r3, #30
    eb5a:	d1f8      	bne.n	eb4e <memset+0x12>
    eb5c:	2c03      	cmp	r4, #3
    eb5e:	d92e      	bls.n	ebbe <memset+0x82>
    eb60:	b2cd      	uxtb	r5, r1
    eb62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    eb66:	2c0f      	cmp	r4, #15
    eb68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    eb6c:	d919      	bls.n	eba2 <memset+0x66>
    eb6e:	f103 0210 	add.w	r2, r3, #16
    eb72:	4626      	mov	r6, r4
    eb74:	3e10      	subs	r6, #16
    eb76:	2e0f      	cmp	r6, #15
    eb78:	f842 5c10 	str.w	r5, [r2, #-16]
    eb7c:	f842 5c0c 	str.w	r5, [r2, #-12]
    eb80:	f842 5c08 	str.w	r5, [r2, #-8]
    eb84:	f842 5c04 	str.w	r5, [r2, #-4]
    eb88:	f102 0210 	add.w	r2, r2, #16
    eb8c:	d8f2      	bhi.n	eb74 <memset+0x38>
    eb8e:	f1a4 0210 	sub.w	r2, r4, #16
    eb92:	f022 020f 	bic.w	r2, r2, #15
    eb96:	f004 040f 	and.w	r4, r4, #15
    eb9a:	3210      	adds	r2, #16
    eb9c:	2c03      	cmp	r4, #3
    eb9e:	4413      	add	r3, r2
    eba0:	d90d      	bls.n	ebbe <memset+0x82>
    eba2:	461e      	mov	r6, r3
    eba4:	4622      	mov	r2, r4
    eba6:	3a04      	subs	r2, #4
    eba8:	2a03      	cmp	r2, #3
    ebaa:	f846 5b04 	str.w	r5, [r6], #4
    ebae:	d8fa      	bhi.n	eba6 <memset+0x6a>
    ebb0:	1f22      	subs	r2, r4, #4
    ebb2:	f022 0203 	bic.w	r2, r2, #3
    ebb6:	3204      	adds	r2, #4
    ebb8:	4413      	add	r3, r2
    ebba:	f004 0403 	and.w	r4, r4, #3
    ebbe:	b12c      	cbz	r4, ebcc <memset+0x90>
    ebc0:	b2c9      	uxtb	r1, r1
    ebc2:	441c      	add	r4, r3
    ebc4:	f803 1b01 	strb.w	r1, [r3], #1
    ebc8:	429c      	cmp	r4, r3
    ebca:	d1fb      	bne.n	ebc4 <memset+0x88>
    ebcc:	bc70      	pop	{r4, r5, r6}
    ebce:	4770      	bx	lr
    ebd0:	4614      	mov	r4, r2
    ebd2:	4603      	mov	r3, r0
    ebd4:	e7c2      	b.n	eb5c <memset+0x20>
    ebd6:	bf00      	nop
	...

0000ec00 <strlen>:
    ec00:	f890 f000 	pld	[r0]
    ec04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ec08:	f020 0107 	bic.w	r1, r0, #7
    ec0c:	f06f 0c00 	mvn.w	ip, #0
    ec10:	f010 0407 	ands.w	r4, r0, #7
    ec14:	f891 f020 	pld	[r1, #32]
    ec18:	f040 8049 	bne.w	ecae <strlen+0xae>
    ec1c:	f04f 0400 	mov.w	r4, #0
    ec20:	f06f 0007 	mvn.w	r0, #7
    ec24:	e9d1 2300 	ldrd	r2, r3, [r1]
    ec28:	f891 f040 	pld	[r1, #64]	; 0x40
    ec2c:	f100 0008 	add.w	r0, r0, #8
    ec30:	fa82 f24c 	uadd8	r2, r2, ip
    ec34:	faa4 f28c 	sel	r2, r4, ip
    ec38:	fa83 f34c 	uadd8	r3, r3, ip
    ec3c:	faa2 f38c 	sel	r3, r2, ip
    ec40:	bb4b      	cbnz	r3, ec96 <strlen+0x96>
    ec42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ec46:	fa82 f24c 	uadd8	r2, r2, ip
    ec4a:	f100 0008 	add.w	r0, r0, #8
    ec4e:	faa4 f28c 	sel	r2, r4, ip
    ec52:	fa83 f34c 	uadd8	r3, r3, ip
    ec56:	faa2 f38c 	sel	r3, r2, ip
    ec5a:	b9e3      	cbnz	r3, ec96 <strlen+0x96>
    ec5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ec60:	fa82 f24c 	uadd8	r2, r2, ip
    ec64:	f100 0008 	add.w	r0, r0, #8
    ec68:	faa4 f28c 	sel	r2, r4, ip
    ec6c:	fa83 f34c 	uadd8	r3, r3, ip
    ec70:	faa2 f38c 	sel	r3, r2, ip
    ec74:	b97b      	cbnz	r3, ec96 <strlen+0x96>
    ec76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ec7a:	f101 0120 	add.w	r1, r1, #32
    ec7e:	fa82 f24c 	uadd8	r2, r2, ip
    ec82:	f100 0008 	add.w	r0, r0, #8
    ec86:	faa4 f28c 	sel	r2, r4, ip
    ec8a:	fa83 f34c 	uadd8	r3, r3, ip
    ec8e:	faa2 f38c 	sel	r3, r2, ip
    ec92:	2b00      	cmp	r3, #0
    ec94:	d0c6      	beq.n	ec24 <strlen+0x24>
    ec96:	2a00      	cmp	r2, #0
    ec98:	bf04      	itt	eq
    ec9a:	3004      	addeq	r0, #4
    ec9c:	461a      	moveq	r2, r3
    ec9e:	ba12      	rev	r2, r2
    eca0:	fab2 f282 	clz	r2, r2
    eca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    eca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ecac:	4770      	bx	lr
    ecae:	e9d1 2300 	ldrd	r2, r3, [r1]
    ecb2:	f004 0503 	and.w	r5, r4, #3
    ecb6:	f1c4 0000 	rsb	r0, r4, #0
    ecba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ecbe:	f014 0f04 	tst.w	r4, #4
    ecc2:	f891 f040 	pld	[r1, #64]	; 0x40
    ecc6:	fa0c f505 	lsl.w	r5, ip, r5
    ecca:	ea62 0205 	orn	r2, r2, r5
    ecce:	bf1c      	itt	ne
    ecd0:	ea63 0305 	ornne	r3, r3, r5
    ecd4:	4662      	movne	r2, ip
    ecd6:	f04f 0400 	mov.w	r4, #0
    ecda:	e7a9      	b.n	ec30 <strlen+0x30>

0000ecdc <__register_exitproc>:
    ecdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ece0:	4d2c      	ldr	r5, [pc, #176]	; (ed94 <__register_exitproc+0xb8>)
    ece2:	4606      	mov	r6, r0
    ece4:	6828      	ldr	r0, [r5, #0]
    ece6:	4698      	mov	r8, r3
    ece8:	460f      	mov	r7, r1
    ecea:	4691      	mov	r9, r2
    ecec:	f000 f882 	bl	edf4 <__retarget_lock_acquire_recursive>
    ecf0:	4b29      	ldr	r3, [pc, #164]	; (ed98 <__register_exitproc+0xbc>)
    ecf2:	681c      	ldr	r4, [r3, #0]
    ecf4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ecf8:	2b00      	cmp	r3, #0
    ecfa:	d03e      	beq.n	ed7a <__register_exitproc+0x9e>
    ecfc:	685a      	ldr	r2, [r3, #4]
    ecfe:	2a1f      	cmp	r2, #31
    ed00:	dc1c      	bgt.n	ed3c <__register_exitproc+0x60>
    ed02:	f102 0e01 	add.w	lr, r2, #1
    ed06:	b176      	cbz	r6, ed26 <__register_exitproc+0x4a>
    ed08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ed0c:	2401      	movs	r4, #1
    ed0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ed12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ed16:	4094      	lsls	r4, r2
    ed18:	4320      	orrs	r0, r4
    ed1a:	2e02      	cmp	r6, #2
    ed1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ed20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ed24:	d023      	beq.n	ed6e <__register_exitproc+0x92>
    ed26:	3202      	adds	r2, #2
    ed28:	f8c3 e004 	str.w	lr, [r3, #4]
    ed2c:	6828      	ldr	r0, [r5, #0]
    ed2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ed32:	f000 f861 	bl	edf8 <__retarget_lock_release_recursive>
    ed36:	2000      	movs	r0, #0
    ed38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed3c:	4b17      	ldr	r3, [pc, #92]	; (ed9c <__register_exitproc+0xc0>)
    ed3e:	b30b      	cbz	r3, ed84 <__register_exitproc+0xa8>
    ed40:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ed44:	f7ff fdbe 	bl	e8c4 <malloc>
    ed48:	4603      	mov	r3, r0
    ed4a:	b1d8      	cbz	r0, ed84 <__register_exitproc+0xa8>
    ed4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ed50:	6002      	str	r2, [r0, #0]
    ed52:	2100      	movs	r1, #0
    ed54:	6041      	str	r1, [r0, #4]
    ed56:	460a      	mov	r2, r1
    ed58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ed5c:	f04f 0e01 	mov.w	lr, #1
    ed60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ed64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ed68:	2e00      	cmp	r6, #0
    ed6a:	d0dc      	beq.n	ed26 <__register_exitproc+0x4a>
    ed6c:	e7cc      	b.n	ed08 <__register_exitproc+0x2c>
    ed6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ed72:	430c      	orrs	r4, r1
    ed74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ed78:	e7d5      	b.n	ed26 <__register_exitproc+0x4a>
    ed7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ed7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ed82:	e7bb      	b.n	ecfc <__register_exitproc+0x20>
    ed84:	6828      	ldr	r0, [r5, #0]
    ed86:	f000 f837 	bl	edf8 <__retarget_lock_release_recursive>
    ed8a:	f04f 30ff 	mov.w	r0, #4294967295
    ed8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed92:	bf00      	nop
    ed94:	20000608 	.word	0x20000608
    ed98:	0000f328 	.word	0x0000f328
    ed9c:	0000e8c5 	.word	0x0000e8c5

0000eda0 <register_fini>:
    eda0:	4b02      	ldr	r3, [pc, #8]	; (edac <register_fini+0xc>)
    eda2:	b113      	cbz	r3, edaa <register_fini+0xa>
    eda4:	4802      	ldr	r0, [pc, #8]	; (edb0 <register_fini+0x10>)
    eda6:	f000 b805 	b.w	edb4 <atexit>
    edaa:	4770      	bx	lr
    edac:	00000000 	.word	0x00000000
    edb0:	0000edc1 	.word	0x0000edc1

0000edb4 <atexit>:
    edb4:	2300      	movs	r3, #0
    edb6:	4601      	mov	r1, r0
    edb8:	461a      	mov	r2, r3
    edba:	4618      	mov	r0, r3
    edbc:	f7ff bf8e 	b.w	ecdc <__register_exitproc>

0000edc0 <__libc_fini_array>:
    edc0:	b538      	push	{r3, r4, r5, lr}
    edc2:	4c0a      	ldr	r4, [pc, #40]	; (edec <__libc_fini_array+0x2c>)
    edc4:	4d0a      	ldr	r5, [pc, #40]	; (edf0 <__libc_fini_array+0x30>)
    edc6:	1b64      	subs	r4, r4, r5
    edc8:	10a4      	asrs	r4, r4, #2
    edca:	d00a      	beq.n	ede2 <__libc_fini_array+0x22>
    edcc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    edd0:	3b01      	subs	r3, #1
    edd2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    edd6:	3c01      	subs	r4, #1
    edd8:	f855 3904 	ldr.w	r3, [r5], #-4
    eddc:	4798      	blx	r3
    edde:	2c00      	cmp	r4, #0
    ede0:	d1f9      	bne.n	edd6 <__libc_fini_array+0x16>
    ede2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ede6:	f000 bab5 	b.w	f354 <_fini>
    edea:	bf00      	nop
    edec:	0000f364 	.word	0x0000f364
    edf0:	0000f360 	.word	0x0000f360

0000edf4 <__retarget_lock_acquire_recursive>:
    edf4:	4770      	bx	lr
    edf6:	bf00      	nop

0000edf8 <__retarget_lock_release_recursive>:
    edf8:	4770      	bx	lr
    edfa:	bf00      	nop
    edfc:	00000a0d 	.word	0x00000a0d
    ee00:	202a2a2a 	.word	0x202a2a2a
    ee04:	72617453 	.word	0x72617453
    ee08:	20705574 	.word	0x20705574
    ee0c:	6f676c41 	.word	0x6f676c41
    ee10:	68746972 	.word	0x68746972
    ee14:	206e656d 	.word	0x206e656d
    ee18:	74736554 	.word	0x74736554
    ee1c:	2a2a2a20 	.word	0x2a2a2a20
    ee20:	00000000 	.word	0x00000000
    ee24:	202a2a2a 	.word	0x202a2a2a
    ee28:	65746144 	.word	0x65746144
    ee2c:	0020203a 	.word	0x0020203a
    ee30:	2074634f 	.word	0x2074634f
    ee34:	32203632 	.word	0x32203632
    ee38:	00303230 	.word	0x00303230
    ee3c:	6d695420 	.word	0x6d695420
    ee40:	00203a65 	.word	0x00203a65
    ee44:	333a3431 	.word	0x333a3431
    ee48:	30343a35 	.word	0x30343a35
    ee4c:	00000000 	.word	0x00000000
    ee50:	62616e45 	.word	0x62616e45
    ee54:	676e696c 	.word	0x676e696c
    ee58:	61654820 	.word	0x61654820
    ee5c:	3a726574 	.word	0x3a726574
    ee60:	00000020 	.word	0x00000020
    ee64:	00092e20 	.word	0x00092e20
    ee68:	74616548 	.word	0x74616548
    ee6c:	00207265 	.word	0x00207265
    ee70:	61745320 	.word	0x61745320
    ee74:	20737574 	.word	0x20737574
    ee78:	0000003a 	.word	0x0000003a
    ee7c:	682f2e2e 	.word	0x682f2e2e
    ee80:	702f6c70 	.word	0x702f6c70
    ee84:	2f74726f 	.word	0x2f74726f
    ee88:	5f6c7068 	.word	0x5f6c7068
    ee8c:	6f697067 	.word	0x6f697067
    ee90:	7361625f 	.word	0x7361625f
    ee94:	00682e65 	.word	0x00682e65
    ee98:	682f2e2e 	.word	0x682f2e2e
    ee9c:	692f6c61 	.word	0x692f6c61
    eea0:	756c636e 	.word	0x756c636e
    eea4:	682f6564 	.word	0x682f6564
    eea8:	775f6c61 	.word	0x775f6c61
    eeac:	682e7464 	.word	0x682e7464
    eeb0:	00000000 	.word	0x00000000
    eeb4:	682f2e2e 	.word	0x682f2e2e
    eeb8:	732f6c61 	.word	0x732f6c61
    eebc:	682f6372 	.word	0x682f6372
    eec0:	635f6c61 	.word	0x635f6c61
    eec4:	6e656c61 	.word	0x6e656c61
    eec8:	2e726164 	.word	0x2e726164
    eecc:	00000063 	.word	0x00000063
    eed0:	682f2e2e 	.word	0x682f2e2e
    eed4:	732f6c61 	.word	0x732f6c61
    eed8:	682f6372 	.word	0x682f6372
    eedc:	635f6c61 	.word	0x635f6c61
    eee0:	615f6e61 	.word	0x615f6e61
    eee4:	636e7973 	.word	0x636e7973
    eee8:	0000632e 	.word	0x0000632e
    eeec:	682f2e2e 	.word	0x682f2e2e
    eef0:	732f6c61 	.word	0x732f6c61
    eef4:	682f6372 	.word	0x682f6372
    eef8:	635f6c61 	.word	0x635f6c61
    eefc:	735f6372 	.word	0x735f6372
    ef00:	2e636e79 	.word	0x2e636e79
    ef04:	00000063 	.word	0x00000063
    ef08:	682f2e2e 	.word	0x682f2e2e
    ef0c:	732f6c61 	.word	0x732f6c61
    ef10:	682f6372 	.word	0x682f6372
    ef14:	695f6c61 	.word	0x695f6c61
    ef18:	6d5f6332 	.word	0x6d5f6332
    ef1c:	7973615f 	.word	0x7973615f
    ef20:	632e636e 	.word	0x632e636e
    ef24:	00000000 	.word	0x00000000
    ef28:	682f2e2e 	.word	0x682f2e2e
    ef2c:	732f6c61 	.word	0x732f6c61
    ef30:	682f6372 	.word	0x682f6372
    ef34:	695f6c61 	.word	0x695f6c61
    ef38:	6d5f6332 	.word	0x6d5f6332
    ef3c:	6e79735f 	.word	0x6e79735f
    ef40:	00632e63 	.word	0x00632e63
    ef44:	682f2e2e 	.word	0x682f2e2e
    ef48:	732f6c61 	.word	0x732f6c61
    ef4c:	682f6372 	.word	0x682f6372
    ef50:	705f6c61 	.word	0x705f6c61
    ef54:	632e6d77 	.word	0x632e6d77
    ef58:	00000000 	.word	0x00000000
    ef5c:	682f2e2e 	.word	0x682f2e2e
    ef60:	732f6c61 	.word	0x732f6c61
    ef64:	682f6372 	.word	0x682f6372
    ef68:	715f6c61 	.word	0x715f6c61
    ef6c:	5f697073 	.word	0x5f697073
    ef70:	636e7973 	.word	0x636e7973
    ef74:	0000632e 	.word	0x0000632e
    ef78:	682f2e2e 	.word	0x682f2e2e
    ef7c:	732f6c61 	.word	0x732f6c61
    ef80:	682f6372 	.word	0x682f6372
    ef84:	735f6c61 	.word	0x735f6c61
    ef88:	6d5f6970 	.word	0x6d5f6970
    ef8c:	6e79735f 	.word	0x6e79735f
    ef90:	00632e63 	.word	0x00632e63
    ef94:	682f2e2e 	.word	0x682f2e2e
    ef98:	732f6c61 	.word	0x732f6c61
    ef9c:	682f6372 	.word	0x682f6372
    efa0:	745f6c61 	.word	0x745f6c61
    efa4:	72656d69 	.word	0x72656d69
    efa8:	0000632e 	.word	0x0000632e
    efac:	682f2e2e 	.word	0x682f2e2e
    efb0:	752f6c61 	.word	0x752f6c61
    efb4:	736c6974 	.word	0x736c6974
    efb8:	6372732f 	.word	0x6372732f
    efbc:	6974752f 	.word	0x6974752f
    efc0:	6c5f736c 	.word	0x6c5f736c
    efc4:	2e747369 	.word	0x2e747369
    efc8:	00000063 	.word	0x00000063

0000efcc <_map>:
    efcc:	00000000 00000040 00000003 00000003     ....@...........
    efdc:	00000004 00000004 00000005 00000005     ................
    efec:	00000006 00000056 00000007 00000057     ....V.......W...
    effc:	00000008 00000028 00000009 00000029     ....(.......)...
    f00c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    f01c:	632e6369 00000000                       ic.c....

0000f024 <user_mux_confs>:
    f024:	00020100 00000000 00000000 00000000     ................
	...

0000f068 <channel_confs>:
    f068:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000f0a8 <interrupt_cfg>:
	...
    f128:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f138:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f148:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f158:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f168:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f178:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f188:	43000400 43000800 43000c00              ...C...C...C

0000f194 <sercomspi_regs>:
    f194:	0020000c 00020000 00000000 01ff0001     .. .............
    f1a4:	30000c04 02000000 00000000 ff00ef00     ...0............
    f1b4:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f1c4:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f1d4:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f1e4:	43001400 43001800                       ...C...C

0000f1ec <_usb_ep_cfgs>:
    f1ec:	20000850 00000000 00000040 20000890     P.. ....@...... 
    f1fc:	200008d0 00400040 20000910 20000950     ... @.@.... P.. 
    f20c:	00400040 20000990 200009d0 00400040     @.@.... ... @.@.
    f21c:	20000a10 20000a50 00400040 00000804     ... P.. @.@.....
    f22c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f23c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f24c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f25c:	7361625f 00682e65                       _base.h.

0000f264 <n25q256a_interface>:
    f264:	0000b97d 0000ba21 0000bb31 0000bce9     }...!...1.......
    f274:	0000bd79 752f2e2e 642f6273 63697665     y...../usb/devic
    f284:	73752f65 2e636462 00000063              e/usbdc.c...

0000f290 <_ZTV9CDC_Class>:
	...
    f298:	0000de99 0000df79 0000db1d 0000de61     ....y.......a...
    f2a8:	0000e011 0000de25 0000dd39 0000dd89     ....%...9.......
    f2b8:	0000de81 0000dee1                       ........

0000f2c0 <_ZTV6Stream>:
	...
    f2c8:	0000e8d9 0000e0e1 0000db1d 0000db31     ............1...
    f2d8:	0000e8d9 0000e8d9 0000e8d9 2e257830     ............0x%.
    f2e8:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f2f8:	0066766f                                ovf.

0000f2fc <_ZTV5Print>:
	...
    f304:	0000e8d9 0000e0e1 0000db1d 0000db31     ............1...
    f314:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f324:	00632e6f                                o.c.

0000f328 <_global_impure_ptr>:
    f328:	200001e0                                ... 

0000f32c <_init>:
    f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f32e:	bf00      	nop
    f330:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f332:	bc08      	pop	{r3}
    f334:	469e      	mov	lr, r3
    f336:	4770      	bx	lr

0000f338 <__init_array_start>:
    f338:	0000eda1 	.word	0x0000eda1

0000f33c <__frame_dummy_init_array_entry>:
    f33c:	00000289 000004c5 000005e5 0000dae5     ................
    f34c:	0000e091 0000e8b1                       ........

0000f354 <_fini>:
    f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f356:	bf00      	nop
    f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f35a:	bc08      	pop	{r3}
    f35c:	469e      	mov	lr, r3
    f35e:	4770      	bx	lr

0000f360 <__fini_array_start>:
    f360:	00000265 	.word	0x00000265
