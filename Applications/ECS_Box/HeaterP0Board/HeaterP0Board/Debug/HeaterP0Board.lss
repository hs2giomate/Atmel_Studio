
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f4bc  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000f4bc  0000f4bc  0001f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  0000f4c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002063c  2**0
                  CONTENTS
  5 .bss          0000116c  2000063c  0000fb00  0002063c  2**2
                  ALLOC
  6 .stack        00010000  200017a8  00010c6c  0002063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000621d7  00000000  00000000  000206c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000859c  00000000  00000000  0008289a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a39b  00000000  00000000  0008ae36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ea8  00000000  00000000  000a51d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002b98  00000000  00000000  000a8079  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ab60  00000000  00000000  000aac11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000334a2  00000000  00000000  000f5771  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013c0f8  00000000  00000000  00128c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c53c  00000000  00000000  00264d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 17 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	65 5e 00 00 69 4c 00 00 79 4c 00 00 55 03 00 00     e^..iL..yL..U...
      7c:	89 4c 00 00 99 4c 00 00 a9 4c 00 00 b9 4c 00 00     .L...L...L...L..
      8c:	c9 4c 00 00 d9 4c 00 00 e9 4c 00 00 55 03 00 00     .L...L...L..U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     154:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 b1 40 00 00 e1 ad 00 00     U...U....@......
     184:	f1 ad 00 00 01 ae 00 00 11 ae 00 00 55 03 00 00     ............U...
     194:	e1 77 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .w..U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 fd 77 00 00     U...U...U....w..
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	19 78 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .x..U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 dd 84 00 00 55 03 00 00     U...U.......U...
     1f4:	f9 84 00 00 55 03 00 00 15 85 00 00 31 85 00 00     ....U.......1...
     204:	4d 85 00 00 69 85 00 00 55 03 00 00 55 03 00 00     M...i...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	0000f4c4 	.word	0x0000f4c4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000f4c4 	.word	0x0000f4c4
     2c4:	20000640 	.word	0x20000640
     2c8:	0000f4c4 	.word	0x0000f4c4
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0000f4c4 	.word	0x0000f4c4
     334:	20000000 	.word	0x20000000
     338:	2000063c 	.word	0x2000063c
     33c:	2000063c 	.word	0x2000063c
     340:	200017a8 	.word	0x200017a8
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000eb6d 	.word	0x0000eb6d
     350:	000004bd 	.word	0x000004bd

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	3318      	adds	r3, #24
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     380:	b480      	push	{r7}
     382:	b085      	sub	sp, #20
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	460b      	mov	r3, r1
     38a:	607a      	str	r2, [r7, #4]
     38c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38e:	7afb      	ldrb	r3, [r7, #11]
     390:	68fa      	ldr	r2, [r7, #12]
     392:	01db      	lsls	r3, r3, #7
     394:	4413      	add	r3, r2
     396:	3314      	adds	r3, #20
     398:	687a      	ldr	r2, [r7, #4]
     39a:	601a      	str	r2, [r3, #0]
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr

000003a6 <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     3a6:	b480      	push	{r7}
     3a8:	b085      	sub	sp, #20
     3aa:	af00      	add	r7, sp, #0
     3ac:	60f8      	str	r0, [r7, #12]
     3ae:	460b      	mov	r3, r1
     3b0:	607a      	str	r2, [r7, #4]
     3b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     3b4:	7afb      	ldrb	r3, [r7, #11]
     3b6:	68fa      	ldr	r2, [r7, #12]
     3b8:	01db      	lsls	r3, r3, #7
     3ba:	4413      	add	r3, r2
     3bc:	331c      	adds	r3, #28
     3be:	687a      	ldr	r2, [r7, #4]
     3c0:	601a      	str	r2, [r3, #0]
}
     3c2:	bf00      	nop
     3c4:	3714      	adds	r7, #20
     3c6:	46bd      	mov	sp, r7
     3c8:	bc80      	pop	{r7}
     3ca:	4770      	bx	lr

000003cc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	4603      	mov	r3, r0
     3d4:	6039      	str	r1, [r7, #0]
     3d6:	71fb      	strb	r3, [r7, #7]
     3d8:	4613      	mov	r3, r2
     3da:	71bb      	strb	r3, [r7, #6]
	if (level) {
     3dc:	79bb      	ldrb	r3, [r7, #6]
     3de:	2b00      	cmp	r3, #0
     3e0:	d006      	beq.n	3f0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     3e2:	79fb      	ldrb	r3, [r7, #7]
     3e4:	683a      	ldr	r2, [r7, #0]
     3e6:	4619      	mov	r1, r3
     3e8:	4806      	ldr	r0, [pc, #24]	; (404 <_gpio_set_level+0x38>)
     3ea:	4b07      	ldr	r3, [pc, #28]	; (408 <_gpio_set_level+0x3c>)
     3ec:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     3ee:	e005      	b.n	3fc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	683a      	ldr	r2, [r7, #0]
     3f4:	4619      	mov	r1, r3
     3f6:	4803      	ldr	r0, [pc, #12]	; (404 <_gpio_set_level+0x38>)
     3f8:	4b04      	ldr	r3, [pc, #16]	; (40c <_gpio_set_level+0x40>)
     3fa:	4798      	blx	r3
}
     3fc:	bf00      	nop
     3fe:	3708      	adds	r7, #8
     400:	46bd      	mov	sp, r7
     402:	bd80      	pop	{r7, pc}
     404:	41008000 	.word	0x41008000
     408:	0000035b 	.word	0x0000035b
     40c:	00000381 	.word	0x00000381

00000410 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	4603      	mov	r3, r0
     418:	6039      	str	r1, [r7, #0]
     41a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     41c:	79fb      	ldrb	r3, [r7, #7]
     41e:	683a      	ldr	r2, [r7, #0]
     420:	4619      	mov	r1, r3
     422:	4803      	ldr	r0, [pc, #12]	; (430 <_gpio_toggle_level+0x20>)
     424:	4b03      	ldr	r3, [pc, #12]	; (434 <_gpio_toggle_level+0x24>)
     426:	4798      	blx	r3
}
     428:	bf00      	nop
     42a:	3708      	adds	r7, #8
     42c:	46bd      	mov	sp, r7
     42e:	bd80      	pop	{r7, pc}
     430:	41008000 	.word	0x41008000
     434:	000003a7 	.word	0x000003a7

00000438 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	4603      	mov	r3, r0
     440:	460a      	mov	r2, r1
     442:	71fb      	strb	r3, [r7, #7]
     444:	4613      	mov	r3, r2
     446:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     448:	79fb      	ldrb	r3, [r7, #7]
     44a:	115b      	asrs	r3, r3, #5
     44c:	b2d8      	uxtb	r0, r3
     44e:	79fb      	ldrb	r3, [r7, #7]
     450:	f003 031f 	and.w	r3, r3, #31
     454:	2201      	movs	r2, #1
     456:	fa02 f303 	lsl.w	r3, r2, r3
     45a:	79ba      	ldrb	r2, [r7, #6]
     45c:	4619      	mov	r1, r3
     45e:	4b03      	ldr	r3, [pc, #12]	; (46c <gpio_set_pin_level+0x34>)
     460:	4798      	blx	r3
}
     462:	bf00      	nop
     464:	3708      	adds	r7, #8
     466:	46bd      	mov	sp, r7
     468:	bd80      	pop	{r7, pc}
     46a:	bf00      	nop
     46c:	000003cd 	.word	0x000003cd

00000470 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	4603      	mov	r3, r0
     478:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     47a:	79fb      	ldrb	r3, [r7, #7]
     47c:	115b      	asrs	r3, r3, #5
     47e:	b2d8      	uxtb	r0, r3
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	f003 031f 	and.w	r3, r3, #31
     486:	2201      	movs	r2, #1
     488:	fa02 f303 	lsl.w	r3, r2, r3
     48c:	4619      	mov	r1, r3
     48e:	4b03      	ldr	r3, [pc, #12]	; (49c <gpio_toggle_pin_level+0x2c>)
     490:	4798      	blx	r3
}
     492:	bf00      	nop
     494:	3708      	adds	r7, #8
     496:	46bd      	mov	sp, r7
     498:	bd80      	pop	{r7, pc}
     49a:	bf00      	nop
     49c:	00000411 	.word	0x00000411

000004a0 <_ZL13FirmwareAlivePK10timer_task>:
//static Maintenance_Tool	toolApp;
//static SingleTaskMessage singleTask;
#define DELAY_HEATER_COMMUNICATION 1000

static void FirmwareAlive(const struct timer_task *const timer_task)
{
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
     4a6:	6078      	str	r0, [r7, #4]
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
     4a8:	2101      	movs	r1, #1
     4aa:	2007      	movs	r0, #7
     4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <_ZL13FirmwareAlivePK10timer_task+0x18>)
     4ae:	4798      	blx	r3
}
     4b0:	bf00      	nop
     4b2:	3708      	adds	r7, #8
     4b4:	46bd      	mov	sp, r7
     4b6:	bd80      	pop	{r7, pc}
     4b8:	00000439 	.word	0x00000439

000004bc <main>:

int main(void)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
	atmel_start_init();
     4c2:	4b3d      	ldr	r3, [pc, #244]	; (5b8 <main+0xfc>)
     4c4:	4798      	blx	r3
	uint8_t status,enableMask,lastEnableMask;
	bool powerOn;

	usb.Init();
     4c6:	483d      	ldr	r0, [pc, #244]	; (5bc <main+0x100>)
     4c8:	4b3d      	ldr	r3, [pc, #244]	; (5c0 <main+0x104>)
     4ca:	4798      	blx	r3
	delay_ms(100);
     4cc:	2064      	movs	r0, #100	; 0x64
     4ce:	4b3d      	ldr	r3, [pc, #244]	; (5c4 <main+0x108>)
     4d0:	4798      	blx	r3
// 	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
// 	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     4d2:	483d      	ldr	r0, [pc, #244]	; (5c8 <main+0x10c>)
     4d4:	4b3d      	ldr	r3, [pc, #244]	; (5cc <main+0x110>)
     4d6:	4798      	blx	r3
     4d8:	4603      	mov	r3, r0
     4da:	607b      	str	r3, [r7, #4]
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     4dc:	22fa      	movs	r2, #250	; 0xfa
     4de:	493c      	ldr	r1, [pc, #240]	; (5d0 <main+0x114>)
     4e0:	483c      	ldr	r0, [pc, #240]	; (5d4 <main+0x118>)
     4e2:	4b3d      	ldr	r3, [pc, #244]	; (5d8 <main+0x11c>)
     4e4:	4798      	blx	r3
	gpio_set_pin_level(LED0,true);
     4e6:	2101      	movs	r1, #1
     4e8:	2052      	movs	r0, #82	; 0x52
     4ea:	4b3c      	ldr	r3, [pc, #240]	; (5dc <main+0x120>)
     4ec:	4798      	blx	r3
	while (!heater.Init())
     4ee:	483c      	ldr	r0, [pc, #240]	; (5e0 <main+0x124>)
     4f0:	4b3c      	ldr	r3, [pc, #240]	; (5e4 <main+0x128>)
     4f2:	4798      	blx	r3
     4f4:	4603      	mov	r3, r0
     4f6:	f083 0301 	eor.w	r3, r3, #1
     4fa:	b2db      	uxtb	r3, r3
     4fc:	2b00      	cmp	r3, #0
     4fe:	d006      	beq.n	50e <main+0x52>
	{
		delay_ms(200);
     500:	20c8      	movs	r0, #200	; 0xc8
     502:	4b30      	ldr	r3, [pc, #192]	; (5c4 <main+0x108>)
     504:	4798      	blx	r3
		gpio_toggle_pin_level(LED0);
     506:	2052      	movs	r0, #82	; 0x52
     508:	4b37      	ldr	r3, [pc, #220]	; (5e8 <main+0x12c>)
     50a:	4798      	blx	r3
	while (!heater.Init())
     50c:	e7ef      	b.n	4ee <main+0x32>
		
	}
	gpio_set_pin_level(LED0,true);
     50e:	2101      	movs	r1, #1
     510:	2052      	movs	r0, #82	; 0x52
     512:	4b32      	ldr	r3, [pc, #200]	; (5dc <main+0x120>)
     514:	4798      	blx	r3
// 			}
// 			
// 		} 
// 		else
// 		{
			enableMask=0xff;
     516:	23ff      	movs	r3, #255	; 0xff
     518:	70fb      	strb	r3, [r7, #3]
			for (uint8_t i = 0; i < 4; i++)
     51a:	2300      	movs	r3, #0
     51c:	707b      	strb	r3, [r7, #1]
     51e:	787b      	ldrb	r3, [r7, #1]
     520:	2b03      	cmp	r3, #3
     522:	dcf8      	bgt.n	516 <main+0x5a>
			{
			
					delay_ms(1);
     524:	2001      	movs	r0, #1
     526:	4b27      	ldr	r3, [pc, #156]	; (5c4 <main+0x108>)
     528:	4798      	blx	r3
					usb<<"Enabling Heater: "<<i<<" .\t";
     52a:	4930      	ldr	r1, [pc, #192]	; (5ec <main+0x130>)
     52c:	4823      	ldr	r0, [pc, #140]	; (5bc <main+0x100>)
     52e:	4b30      	ldr	r3, [pc, #192]	; (5f0 <main+0x134>)
     530:	4798      	blx	r3
     532:	4602      	mov	r2, r0
     534:	1c7b      	adds	r3, r7, #1
     536:	4619      	mov	r1, r3
     538:	4610      	mov	r0, r2
     53a:	4b2e      	ldr	r3, [pc, #184]	; (5f4 <main+0x138>)
     53c:	4798      	blx	r3
     53e:	4603      	mov	r3, r0
     540:	492d      	ldr	r1, [pc, #180]	; (5f8 <main+0x13c>)
     542:	4618      	mov	r0, r3
     544:	4b2d      	ldr	r3, [pc, #180]	; (5fc <main+0x140>)
     546:	4798      	blx	r3
					heater.EnableIndex(i);
     548:	787b      	ldrb	r3, [r7, #1]
     54a:	4619      	mov	r1, r3
     54c:	4824      	ldr	r0, [pc, #144]	; (5e0 <main+0x124>)
     54e:	4b2c      	ldr	r3, [pc, #176]	; (600 <main+0x144>)
     550:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     556:	4b1b      	ldr	r3, [pc, #108]	; (5c4 <main+0x108>)
     558:	4798      	blx	r3
					status= heater.ReadStatus();
     55a:	4821      	ldr	r0, [pc, #132]	; (5e0 <main+0x124>)
     55c:	4b29      	ldr	r3, [pc, #164]	; (604 <main+0x148>)
     55e:	4798      	blx	r3
     560:	4603      	mov	r3, r0
     562:	70bb      	strb	r3, [r7, #2]
					usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
     564:	4928      	ldr	r1, [pc, #160]	; (608 <main+0x14c>)
     566:	4815      	ldr	r0, [pc, #84]	; (5bc <main+0x100>)
     568:	4b28      	ldr	r3, [pc, #160]	; (60c <main+0x150>)
     56a:	4798      	blx	r3
     56c:	4602      	mov	r2, r0
     56e:	1c7b      	adds	r3, r7, #1
     570:	4619      	mov	r1, r3
     572:	4610      	mov	r0, r2
     574:	4b1f      	ldr	r3, [pc, #124]	; (5f4 <main+0x138>)
     576:	4798      	blx	r3
     578:	4603      	mov	r3, r0
     57a:	4925      	ldr	r1, [pc, #148]	; (610 <main+0x154>)
     57c:	4618      	mov	r0, r3
     57e:	4b25      	ldr	r3, [pc, #148]	; (614 <main+0x158>)
     580:	4798      	blx	r3
     582:	787b      	ldrb	r3, [r7, #1]
     584:	461a      	mov	r2, r3
     586:	4b16      	ldr	r3, [pc, #88]	; (5e0 <main+0x124>)
     588:	4413      	add	r3, r2
     58a:	3303      	adds	r3, #3
     58c:	4619      	mov	r1, r3
     58e:	4b22      	ldr	r3, [pc, #136]	; (618 <main+0x15c>)
     590:	4798      	blx	r3
     592:	4603      	mov	r3, r0
     594:	4921      	ldr	r1, [pc, #132]	; (61c <main+0x160>)
     596:	4618      	mov	r0, r3
     598:	4b21      	ldr	r3, [pc, #132]	; (620 <main+0x164>)
     59a:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     59c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5a0:	4b08      	ldr	r3, [pc, #32]	; (5c4 <main+0x108>)
     5a2:	4798      	blx	r3
					heater.DisableIndex(i);
     5a4:	787b      	ldrb	r3, [r7, #1]
     5a6:	4619      	mov	r1, r3
     5a8:	480d      	ldr	r0, [pc, #52]	; (5e0 <main+0x124>)
     5aa:	4b1e      	ldr	r3, [pc, #120]	; (624 <main+0x168>)
     5ac:	4798      	blx	r3
			for (uint8_t i = 0; i < 4; i++)
     5ae:	787b      	ldrb	r3, [r7, #1]
     5b0:	3301      	adds	r3, #1
     5b2:	b2db      	uxtb	r3, r3
     5b4:	707b      	strb	r3, [r7, #1]
     5b6:	e7b2      	b.n	51e <main+0x62>
     5b8:	00000bb1 	.word	0x00000bb1
     5bc:	2000138c 	.word	0x2000138c
     5c0:	0000dfed 	.word	0x0000dfed
     5c4:	0000237d 	.word	0x0000237d
     5c8:	200015e4 	.word	0x200015e4
     5cc:	000027ed 	.word	0x000027ed
     5d0:	000004a1 	.word	0x000004a1
     5d4:	20000698 	.word	0x20000698
     5d8:	0000da95 	.word	0x0000da95
     5dc:	00000439 	.word	0x00000439
     5e0:	200007c4 	.word	0x200007c4
     5e4:	00000895 	.word	0x00000895
     5e8:	00000471 	.word	0x00000471
     5ec:	0000efbc 	.word	0x0000efbc
     5f0:	00000629 	.word	0x00000629
     5f4:	00000649 	.word	0x00000649
     5f8:	0000efd0 	.word	0x0000efd0
     5fc:	00000671 	.word	0x00000671
     600:	00000a01 	.word	0x00000a01
     604:	00000995 	.word	0x00000995
     608:	0000efd4 	.word	0x0000efd4
     60c:	00000691 	.word	0x00000691
     610:	0000efdc 	.word	0x0000efdc
     614:	000006b1 	.word	0x000006b1
     618:	000006d1 	.word	0x000006d1
     61c:	0000efe8 	.word	0x0000efe8
     620:	000006f9 	.word	0x000006f9
     624:	00000a35 	.word	0x00000a35

00000628 <_ZlsIA18_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     628:	b580      	push	{r7, lr}
     62a:	b082      	sub	sp, #8
     62c:	af00      	add	r7, sp, #0
     62e:	6078      	str	r0, [r7, #4]
     630:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     632:	6839      	ldr	r1, [r7, #0]
     634:	6878      	ldr	r0, [r7, #4]
     636:	4b03      	ldr	r3, [pc, #12]	; (644 <_ZlsIA18_cER5PrintS2_RKT_+0x1c>)
     638:	4798      	blx	r3
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	4618      	mov	r0, r3
     63e:	3708      	adds	r7, #8
     640:	46bd      	mov	sp, r7
     642:	bd80      	pop	{r7, pc}
     644:	0000e529 	.word	0x0000e529

00000648 <_ZlsIhER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
     650:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     652:	683b      	ldr	r3, [r7, #0]
     654:	781b      	ldrb	r3, [r3, #0]
     656:	220a      	movs	r2, #10
     658:	4619      	mov	r1, r3
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	4b03      	ldr	r3, [pc, #12]	; (66c <_ZlsIhER5PrintS1_RKT_+0x24>)
     65e:	4798      	blx	r3
     660:	687b      	ldr	r3, [r7, #4]
     662:	4618      	mov	r0, r3
     664:	3708      	adds	r7, #8
     666:	46bd      	mov	sp, r7
     668:	bd80      	pop	{r7, pc}
     66a:	bf00      	nop
     66c:	0000e56d 	.word	0x0000e56d

00000670 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
     678:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     67a:	6839      	ldr	r1, [r7, #0]
     67c:	6878      	ldr	r0, [r7, #4]
     67e:	4b03      	ldr	r3, [pc, #12]	; (68c <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
     680:	4798      	blx	r3
     682:	687b      	ldr	r3, [r7, #4]
     684:	4618      	mov	r0, r3
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	0000e529 	.word	0x0000e529

00000690 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     69a:	6839      	ldr	r1, [r7, #0]
     69c:	6878      	ldr	r0, [r7, #4]
     69e:	4b03      	ldr	r3, [pc, #12]	; (6ac <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
     6a0:	4798      	blx	r3
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	4618      	mov	r0, r3
     6a6:	3708      	adds	r7, #8
     6a8:	46bd      	mov	sp, r7
     6aa:	bd80      	pop	{r7, pc}
     6ac:	0000e529 	.word	0x0000e529

000006b0 <_ZlsIA10_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
     6b8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6ba:	6839      	ldr	r1, [r7, #0]
     6bc:	6878      	ldr	r0, [r7, #4]
     6be:	4b03      	ldr	r3, [pc, #12]	; (6cc <_ZlsIA10_cER5PrintS2_RKT_+0x1c>)
     6c0:	4798      	blx	r3
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	4618      	mov	r0, r3
     6c6:	3708      	adds	r7, #8
     6c8:	46bd      	mov	sp, r7
     6ca:	bd80      	pop	{r7, pc}
     6cc:	0000e529 	.word	0x0000e529

000006d0 <_ZlsIbER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     6da:	683b      	ldr	r3, [r7, #0]
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	220a      	movs	r2, #10
     6e0:	4619      	mov	r1, r3
     6e2:	6878      	ldr	r0, [r7, #4]
     6e4:	4b03      	ldr	r3, [pc, #12]	; (6f4 <_ZlsIbER5PrintS1_RKT_+0x24>)
     6e6:	4798      	blx	r3
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	4618      	mov	r0, r3
     6ec:	3708      	adds	r7, #8
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	0000e595 	.word	0x0000e595

000006f8 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
     700:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     702:	6839      	ldr	r1, [r7, #0]
     704:	6878      	ldr	r0, [r7, #4]
     706:	4b03      	ldr	r3, [pc, #12]	; (714 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     708:	4798      	blx	r3
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	4618      	mov	r0, r3
     70e:	3708      	adds	r7, #8
     710:	46bd      	mov	sp, r7
     712:	bd80      	pop	{r7, pc}
     714:	0000e529 	.word	0x0000e529

00000718 <_Z41__static_initialization_and_destruction_0ii>:
	/*	}*/
		
		

	}
}
     718:	b580      	push	{r7, lr}
     71a:	b082      	sub	sp, #8
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
     720:	6039      	str	r1, [r7, #0]
     722:	687b      	ldr	r3, [r7, #4]
     724:	2b01      	cmp	r3, #1
     726:	d155      	bne.n	7d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
     728:	683b      	ldr	r3, [r7, #0]
     72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     72e:	4293      	cmp	r3, r2
     730:	d150      	bne.n	7d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     732:	492a      	ldr	r1, [pc, #168]	; (7dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     734:	482a      	ldr	r0, [pc, #168]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     736:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     738:	4798      	blx	r3
     73a:	4a2b      	ldr	r2, [pc, #172]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     73c:	492b      	ldr	r1, [pc, #172]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     73e:	4828      	ldr	r0, [pc, #160]	; (7e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     740:	4b2b      	ldr	r3, [pc, #172]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     742:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
     744:	492b      	ldr	r1, [pc, #172]	; (7f4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
     746:	482c      	ldr	r0, [pc, #176]	; (7f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     748:	4b26      	ldr	r3, [pc, #152]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     74a:	4798      	blx	r3
     74c:	4a26      	ldr	r2, [pc, #152]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     74e:	4927      	ldr	r1, [pc, #156]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     750:	4829      	ldr	r0, [pc, #164]	; (7f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
     752:	4b27      	ldr	r3, [pc, #156]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     754:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
     756:	4929      	ldr	r1, [pc, #164]	; (7fc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
     758:	4829      	ldr	r0, [pc, #164]	; (800 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     75a:	4b22      	ldr	r3, [pc, #136]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     75c:	4798      	blx	r3
     75e:	4a22      	ldr	r2, [pc, #136]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     760:	4922      	ldr	r1, [pc, #136]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     762:	4827      	ldr	r0, [pc, #156]	; (800 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
     764:	4b22      	ldr	r3, [pc, #136]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     766:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     768:	4926      	ldr	r1, [pc, #152]	; (804 <_Z41__static_initialization_and_destruction_0ii+0xec>)
     76a:	4827      	ldr	r0, [pc, #156]	; (808 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     76c:	4b1d      	ldr	r3, [pc, #116]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     76e:	4798      	blx	r3
     770:	4a1d      	ldr	r2, [pc, #116]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     772:	491e      	ldr	r1, [pc, #120]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     774:	4824      	ldr	r0, [pc, #144]	; (808 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
     776:	4b1e      	ldr	r3, [pc, #120]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     778:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
     77a:	4924      	ldr	r1, [pc, #144]	; (80c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
     77c:	4824      	ldr	r0, [pc, #144]	; (810 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     77e:	4b19      	ldr	r3, [pc, #100]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     780:	4798      	blx	r3
     782:	4a19      	ldr	r2, [pc, #100]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     784:	4919      	ldr	r1, [pc, #100]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     786:	4822      	ldr	r0, [pc, #136]	; (810 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
     788:	4b19      	ldr	r3, [pc, #100]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     78a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
     78c:	4921      	ldr	r1, [pc, #132]	; (814 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
     78e:	4822      	ldr	r0, [pc, #136]	; (818 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     790:	4b14      	ldr	r3, [pc, #80]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     792:	4798      	blx	r3
     794:	4a14      	ldr	r2, [pc, #80]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     796:	4915      	ldr	r1, [pc, #84]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     798:	481f      	ldr	r0, [pc, #124]	; (818 <_Z41__static_initialization_and_destruction_0ii+0x100>)
     79a:	4b15      	ldr	r3, [pc, #84]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     79c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     79e:	491f      	ldr	r1, [pc, #124]	; (81c <_Z41__static_initialization_and_destruction_0ii+0x104>)
     7a0:	481f      	ldr	r0, [pc, #124]	; (820 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     7a2:	4b10      	ldr	r3, [pc, #64]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     7a4:	4798      	blx	r3
     7a6:	4a10      	ldr	r2, [pc, #64]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7a8:	4910      	ldr	r1, [pc, #64]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     7aa:	481d      	ldr	r0, [pc, #116]	; (820 <_Z41__static_initialization_and_destruction_0ii+0x108>)
     7ac:	4b10      	ldr	r3, [pc, #64]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7ae:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
     7b0:	491c      	ldr	r1, [pc, #112]	; (824 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
     7b2:	481d      	ldr	r0, [pc, #116]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     7b6:	4798      	blx	r3
     7b8:	4a0b      	ldr	r2, [pc, #44]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7ba:	490c      	ldr	r1, [pc, #48]	; (7ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
     7bc:	481a      	ldr	r0, [pc, #104]	; (828 <_Z41__static_initialization_and_destruction_0ii+0x110>)
     7be:	4b0c      	ldr	r3, [pc, #48]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7c0:	4798      	blx	r3
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     7c2:	491a      	ldr	r1, [pc, #104]	; (82c <_Z41__static_initialization_and_destruction_0ii+0x114>)
     7c4:	481a      	ldr	r0, [pc, #104]	; (830 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     7c6:	4b1b      	ldr	r3, [pc, #108]	; (834 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
     7c8:	4798      	blx	r3
     7ca:	4a07      	ldr	r2, [pc, #28]	; (7e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     7cc:	491a      	ldr	r1, [pc, #104]	; (838 <_Z41__static_initialization_and_destruction_0ii+0x120>)
     7ce:	4818      	ldr	r0, [pc, #96]	; (830 <_Z41__static_initialization_and_destruction_0ii+0x118>)
     7d0:	4b07      	ldr	r3, [pc, #28]	; (7f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
     7d2:	4798      	blx	r3
     7d4:	bf00      	nop
     7d6:	3708      	adds	r7, #8
     7d8:	46bd      	mov	sp, r7
     7da:	bd80      	pop	{r7, pc}
     7dc:	200014f0 	.word	0x200014f0
     7e0:	20000658 	.word	0x20000658
     7e4:	0000d8b9 	.word	0x0000d8b9
     7e8:	20000000 	.word	0x20000000
     7ec:	0000d8f1 	.word	0x0000d8f1
     7f0:	0000eb39 	.word	0x0000eb39
     7f4:	20001584 	.word	0x20001584
     7f8:	20000678 	.word	0x20000678
     7fc:	200016a8 	.word	0x200016a8
     800:	20000698 	.word	0x20000698
     804:	200015a4 	.word	0x200015a4
     808:	200006b8 	.word	0x200006b8
     80c:	20001668 	.word	0x20001668
     810:	200006d8 	.word	0x200006d8
     814:	20001688 	.word	0x20001688
     818:	200006f8 	.word	0x200006f8
     81c:	20001560 	.word	0x20001560
     820:	20000718 	.word	0x20000718
     824:	20001600 	.word	0x20001600
     828:	20000738 	.word	0x20000738
     82c:	20001620 	.word	0x20001620
     830:	20000758 	.word	0x20000758
     834:	0000d3b9 	.word	0x0000d3b9
     838:	0000d3d5 	.word	0x0000d3d5

0000083c <_GLOBAL__sub_I_main>:
     83c:	b580      	push	{r7, lr}
     83e:	af00      	add	r7, sp, #0
     840:	f64f 71ff 	movw	r1, #65535	; 0xffff
     844:	2001      	movs	r0, #1
     846:	4b01      	ldr	r3, [pc, #4]	; (84c <_GLOBAL__sub_I_main+0x10>)
     848:	4798      	blx	r3
     84a:	bd80      	pop	{r7, pc}
     84c:	00000719 	.word	0x00000719

00000850 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
     850:	b480      	push	{r7}
     852:	b083      	sub	sp, #12
     854:	af00      	add	r7, sp, #0
     856:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
     858:	4a07      	ldr	r2, [pc, #28]	; (878 <_ZN18SingleHeater_ClassC1Ev+0x28>)
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
     85e:	687b      	ldr	r3, [r7, #4]
     860:	4a06      	ldr	r2, [pc, #24]	; (87c <_ZN18SingleHeater_ClassC1Ev+0x2c>)
     862:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
     864:	687b      	ldr	r3, [r7, #4]
     866:	2200      	movs	r2, #0
     868:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	4618      	mov	r0, r3
     86e:	370c      	adds	r7, #12
     870:	46bd      	mov	sp, r7
     872:	bc80      	pop	{r7}
     874:	4770      	bx	lr
     876:	bf00      	nop
     878:	20000788 	.word	0x20000788
     87c:	20000770 	.word	0x20000770

00000880 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
     880:	b480      	push	{r7}
     882:	b083      	sub	sp, #12
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
     888:	687b      	ldr	r3, [r7, #4]
     88a:	4618      	mov	r0, r3
     88c:	370c      	adds	r7, #12
     88e:	46bd      	mov	sp, r7
     890:	bc80      	pop	{r7}
     892:	4770      	bx	lr

00000894 <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
     894:	b580      	push	{r7, lr}
     896:	b082      	sub	sp, #8
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
	heater_id=0;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		i2c->Init();
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	699b      	ldr	r3, [r3, #24]
     8a8:	4618      	mov	r0, r3
     8aa:	4b15      	ldr	r3, [pc, #84]	; (900 <_ZN18SingleHeater_Class4InitEv+0x6c>)
     8ac:	4798      	blx	r3
		if (i2c->isOK)
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	699b      	ldr	r3, [r3, #24]
     8b2:	7a5b      	ldrb	r3, [r3, #9]
     8b4:	b2db      	uxtb	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	d014      	beq.n	8e4 <_ZN18SingleHeater_Class4InitEv+0x50>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
     8ba:	6878      	ldr	r0, [r7, #4]
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <_ZN18SingleHeater_Class4InitEv+0x70>)
     8be:	4798      	blx	r3
			expanders[0]->SetPortInput();
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	68db      	ldr	r3, [r3, #12]
     8c4:	4618      	mov	r0, r3
     8c6:	4b10      	ldr	r3, [pc, #64]	; (908 <_ZN18SingleHeater_Class4InitEv+0x74>)
     8c8:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	691b      	ldr	r3, [r3, #16]
     8ce:	4618      	mov	r0, r3
     8d0:	4b0e      	ldr	r3, [pc, #56]	; (90c <_ZN18SingleHeater_Class4InitEv+0x78>)
     8d2:	4798      	blx	r3
			isOK=SelfTest();
     8d4:	6878      	ldr	r0, [r7, #4]
     8d6:	4b0e      	ldr	r3, [pc, #56]	; (910 <_ZN18SingleHeater_Class4InitEv+0x7c>)
     8d8:	4798      	blx	r3
     8da:	4603      	mov	r3, r0
     8dc:	461a      	mov	r2, r3
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	701a      	strb	r2, [r3, #0]
     8e2:	e000      	b.n	8e6 <_ZN18SingleHeater_Class4InitEv+0x52>
		}
		else
		{
			asm("nop");
     8e4:	bf00      	nop
		}
		isOK=i2c->isOK;
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	699b      	ldr	r3, [r3, #24]
     8ea:	7a5b      	ldrb	r3, [r3, #9]
     8ec:	b2da      	uxtb	r2, r3
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	701a      	strb	r2, [r3, #0]
		return isOK;
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	b2db      	uxtb	r3, r3
}
     8f8:	4618      	mov	r0, r3
     8fa:	3708      	adds	r7, #8
     8fc:	46bd      	mov	sp, r7
     8fe:	bd80      	pop	{r7, pc}
     900:	0000d3e9 	.word	0x0000d3e9
     904:	00000915 	.word	0x00000915
     908:	0000d6a5 	.word	0x0000d6a5
     90c:	0000d6e9 	.word	0x0000d6e9
     910:	00000a71 	.word	0x00000a71

00000914 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
     914:	b580      	push	{r7, lr}
     916:	b084      	sub	sp, #16
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     91c:	2300      	movs	r3, #0
     91e:	60fb      	str	r3, [r7, #12]
     920:	68fb      	ldr	r3, [r7, #12]
     922:	2b01      	cmp	r3, #1
     924:	dc2d      	bgt.n	982 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6e>
	{
		expanders[i]=&expandersStatic[i];
     926:	68fa      	ldr	r2, [r7, #12]
     928:	4613      	mov	r3, r2
     92a:	00db      	lsls	r3, r3, #3
     92c:	1a9b      	subs	r3, r3, r2
     92e:	009b      	lsls	r3, r3, #2
     930:	4a16      	ldr	r2, [pc, #88]	; (98c <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x78>)
     932:	441a      	add	r2, r3
     934:	6879      	ldr	r1, [r7, #4]
     936:	68fb      	ldr	r3, [r7, #12]
     938:	3302      	adds	r3, #2
     93a:	009b      	lsls	r3, r3, #2
     93c:	440b      	add	r3, r1
     93e:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
     940:	687a      	ldr	r2, [r7, #4]
     942:	68fb      	ldr	r3, [r7, #12]
     944:	3302      	adds	r3, #2
     946:	009b      	lsls	r3, r3, #2
     948:	4413      	add	r3, r2
     94a:	685a      	ldr	r2, [r3, #4]
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
     950:	687b      	ldr	r3, [r7, #4]
     952:	6958      	ldr	r0, [r3, #20]
     954:	68fb      	ldr	r3, [r7, #12]
     956:	b2da      	uxtb	r2, r3
     958:	687b      	ldr	r3, [r7, #4]
     95a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
     95e:	005b      	lsls	r3, r3, #1
     960:	b2db      	uxtb	r3, r3
     962:	4313      	orrs	r3, r2
     964:	b2db      	uxtb	r3, r3
     966:	f043 0320 	orr.w	r3, r3, #32
     96a:	b2db      	uxtb	r3, r3
     96c:	b25b      	sxtb	r3, r3
     96e:	b2d9      	uxtb	r1, r3
     970:	687b      	ldr	r3, [r7, #4]
     972:	699b      	ldr	r3, [r3, #24]
     974:	461a      	mov	r2, r3
     976:	4b06      	ldr	r3, [pc, #24]	; (990 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x7c>)
     978:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	3301      	adds	r3, #1
     97e:	60fb      	str	r3, [r7, #12]
     980:	e7ce      	b.n	920 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
     982:	bf00      	nop
     984:	4618      	mov	r0, r3
     986:	3710      	adds	r7, #16
     988:	46bd      	mov	sp, r7
     98a:	bd80      	pop	{r7, pc}
     98c:	2000078c 	.word	0x2000078c
     990:	0000d53d 	.word	0x0000d53d

00000994 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	68db      	ldr	r3, [r3, #12]
     9a0:	4618      	mov	r0, r3
     9a2:	4b16      	ldr	r3, [pc, #88]	; (9fc <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
     9a4:	4798      	blx	r3
     9a6:	4603      	mov	r3, r0
     9a8:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     9aa:	7bbb      	ldrb	r3, [r7, #14]
     9ac:	f003 0301 	and.w	r3, r3, #1
     9b0:	2b00      	cmp	r3, #0
     9b2:	bf14      	ite	ne
     9b4:	2301      	movne	r3, #1
     9b6:	2300      	moveq	r3, #0
     9b8:	b2da      	uxtb	r2, r3
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
     9be:	2300      	movs	r3, #0
     9c0:	73fb      	strb	r3, [r7, #15]
     9c2:	7bfb      	ldrb	r3, [r7, #15]
     9c4:	2b03      	cmp	r3, #3
     9c6:	dc14      	bgt.n	9f2 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     9c8:	7bfb      	ldrb	r3, [r7, #15]
     9ca:	7bb9      	ldrb	r1, [r7, #14]
     9cc:	7bfa      	ldrb	r2, [r7, #15]
     9ce:	3201      	adds	r2, #1
     9d0:	fa41 f202 	asr.w	r2, r1, r2
     9d4:	f002 0201 	and.w	r2, r2, #1
     9d8:	2a00      	cmp	r2, #0
     9da:	bf14      	ite	ne
     9dc:	2201      	movne	r2, #1
     9de:	2200      	moveq	r2, #0
     9e0:	b2d1      	uxtb	r1, r2
     9e2:	687a      	ldr	r2, [r7, #4]
     9e4:	4413      	add	r3, r2
     9e6:	460a      	mov	r2, r1
     9e8:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
     9ea:	7bfb      	ldrb	r3, [r7, #15]
     9ec:	3301      	adds	r3, #1
     9ee:	73fb      	strb	r3, [r7, #15]
     9f0:	e7e7      	b.n	9c2 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
     9f2:	7bbb      	ldrb	r3, [r7, #14]
}
     9f4:	4618      	mov	r0, r3
     9f6:	3710      	adds	r7, #16
     9f8:	46bd      	mov	sp, r7
     9fa:	bd80      	pop	{r7, pc}
     9fc:	0000d621 	.word	0x0000d621

00000a00 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
     a00:	b580      	push	{r7, lr}
     a02:	b082      	sub	sp, #8
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
     a08:	460b      	mov	r3, r1
     a0a:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	691b      	ldr	r3, [r3, #16]
     a10:	78f9      	ldrb	r1, [r7, #3]
     a12:	2200      	movs	r2, #0
     a14:	4618      	mov	r0, r3
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
     a18:	4798      	blx	r3
     a1a:	4603      	mov	r3, r0
     a1c:	461a      	mov	r2, r3
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	7adb      	ldrb	r3, [r3, #11]
}
     a26:	4618      	mov	r0, r3
     a28:	3708      	adds	r7, #8
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	0000d7e1 	.word	0x0000d7e1

00000a34 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	460b      	mov	r3, r1
     a3e:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	691b      	ldr	r3, [r3, #16]
     a44:	78f9      	ldrb	r1, [r7, #3]
     a46:	2201      	movs	r2, #1
     a48:	4618      	mov	r0, r3
     a4a:	4b08      	ldr	r3, [pc, #32]	; (a6c <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
     a4c:	4798      	blx	r3
     a4e:	4603      	mov	r3, r0
     a50:	2b00      	cmp	r3, #0
     a52:	d001      	beq.n	a58 <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
     a54:	2200      	movs	r2, #0
     a56:	e000      	b.n	a5a <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
     a58:	2201      	movs	r2, #1
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	7adb      	ldrb	r3, [r3, #11]
}
     a62:	4618      	mov	r0, r3
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	0000d7e1 	.word	0x0000d7e1

00000a70 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
     a78:	2300      	movs	r3, #0
     a7a:	73bb      	strb	r3, [r7, #14]
     a7c:	7bbb      	ldrb	r3, [r7, #14]
     a7e:	2b03      	cmp	r3, #3
     a80:	dc1f      	bgt.n	ac2 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
     a82:	7bbb      	ldrb	r3, [r7, #14]
     a84:	4619      	mov	r1, r3
     a86:	6878      	ldr	r0, [r7, #4]
     a88:	4b10      	ldr	r3, [pc, #64]	; (acc <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
     a8a:	4798      	blx	r3
		delay_ms(100);
     a8c:	2064      	movs	r0, #100	; 0x64
     a8e:	4b10      	ldr	r3, [pc, #64]	; (ad0 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
     a90:	4798      	blx	r3
		DisableIndex(i);
     a92:	7bbb      	ldrb	r3, [r7, #14]
     a94:	4619      	mov	r1, r3
     a96:	6878      	ldr	r0, [r7, #4]
     a98:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
     a9a:	4798      	blx	r3
		ReadStatus();
     a9c:	6878      	ldr	r0, [r7, #4]
     a9e:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
     aa0:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
     aa2:	7bbb      	ldrb	r3, [r7, #14]
     aa4:	687a      	ldr	r2, [r7, #4]
     aa6:	4413      	add	r3, r2
     aa8:	78db      	ldrb	r3, [r3, #3]
     aaa:	2b00      	cmp	r3, #0
     aac:	d002      	beq.n	ab4 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
     aae:	2301      	movs	r3, #1
     ab0:	73fb      	strb	r3, [r7, #15]
     ab2:	e002      	b.n	aba <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
     ab4:	2300      	movs	r3, #0
     ab6:	73fb      	strb	r3, [r7, #15]
			break;
     ab8:	e003      	b.n	ac2 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
     aba:	7bbb      	ldrb	r3, [r7, #14]
     abc:	3301      	adds	r3, #1
     abe:	73bb      	strb	r3, [r7, #14]
     ac0:	e7dc      	b.n	a7c <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
     ac2:	7bfb      	ldrb	r3, [r7, #15]
}
     ac4:	4618      	mov	r0, r3
     ac6:	3710      	adds	r7, #16
     ac8:	46bd      	mov	sp, r7
     aca:	bd80      	pop	{r7, pc}
     acc:	00000a01 	.word	0x00000a01
     ad0:	0000237d 	.word	0x0000237d
     ad4:	00000a35 	.word	0x00000a35
     ad8:	00000995 	.word	0x00000995

00000adc <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     adc:	b590      	push	{r4, r7, lr}
     ade:	b083      	sub	sp, #12
     ae0:	af00      	add	r7, sp, #0
     ae2:	6078      	str	r0, [r7, #4]
     ae4:	4c05      	ldr	r4, [pc, #20]	; (afc <__tcf_0+0x20>)
     ae6:	4b06      	ldr	r3, [pc, #24]	; (b00 <__tcf_0+0x24>)
     ae8:	429c      	cmp	r4, r3
     aea:	d004      	beq.n	af6 <__tcf_0+0x1a>
     aec:	3c1c      	subs	r4, #28
     aee:	4620      	mov	r0, r4
     af0:	4b04      	ldr	r3, [pc, #16]	; (b04 <__tcf_0+0x28>)
     af2:	4798      	blx	r3
     af4:	e7f7      	b.n	ae6 <__tcf_0+0xa>
     af6:	370c      	adds	r7, #12
     af8:	46bd      	mov	sp, r7
     afa:	bd90      	pop	{r4, r7, pc}
     afc:	200007c4 	.word	0x200007c4
     b00:	2000078c 	.word	0x2000078c
     b04:	0000d529 	.word	0x0000d529

00000b08 <_Z41__static_initialization_and_destruction_0ii>:

     b08:	b5b0      	push	{r4, r5, r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
     b10:	6039      	str	r1, [r7, #0]
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	2b01      	cmp	r3, #1
     b16:	d125      	bne.n	b64 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b1e:	4293      	cmp	r3, r2
     b20:	d120      	bne.n	b64 <_Z41__static_initialization_and_destruction_0ii+0x5c>
     b22:	4912      	ldr	r1, [pc, #72]	; (b6c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     b24:	4812      	ldr	r0, [pc, #72]	; (b70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     b26:	4b13      	ldr	r3, [pc, #76]	; (b74 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     b28:	4798      	blx	r3
     b2a:	4a13      	ldr	r2, [pc, #76]	; (b78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b2c:	4913      	ldr	r1, [pc, #76]	; (b7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     b2e:	4810      	ldr	r0, [pc, #64]	; (b70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     b30:	4b13      	ldr	r3, [pc, #76]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b32:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     b34:	4b13      	ldr	r3, [pc, #76]	; (b84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     b36:	2401      	movs	r4, #1
     b38:	461d      	mov	r5, r3
     b3a:	2c00      	cmp	r4, #0
     b3c:	db05      	blt.n	b4a <_Z41__static_initialization_and_destruction_0ii+0x42>
     b3e:	4628      	mov	r0, r5
     b40:	4b11      	ldr	r3, [pc, #68]	; (b88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     b42:	4798      	blx	r3
     b44:	351c      	adds	r5, #28
     b46:	3c01      	subs	r4, #1
     b48:	e7f7      	b.n	b3a <_Z41__static_initialization_and_destruction_0ii+0x32>
     b4a:	4a0b      	ldr	r2, [pc, #44]	; (b78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b4c:	490f      	ldr	r1, [pc, #60]	; (b8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
     b4e:	2000      	movs	r0, #0
     b50:	4b0b      	ldr	r3, [pc, #44]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b52:	4798      	blx	r3
     b54:	480e      	ldr	r0, [pc, #56]	; (b90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     b56:	4b0f      	ldr	r3, [pc, #60]	; (b94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     b58:	4798      	blx	r3
     b5a:	4a07      	ldr	r2, [pc, #28]	; (b78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     b5c:	490e      	ldr	r1, [pc, #56]	; (b98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     b5e:	480c      	ldr	r0, [pc, #48]	; (b90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     b62:	4798      	blx	r3
     b64:	bf00      	nop
     b66:	3708      	adds	r7, #8
     b68:	46bd      	mov	sp, r7
     b6a:	bdb0      	pop	{r4, r5, r7, pc}
     b6c:	20001620 	.word	0x20001620
     b70:	20000770 	.word	0x20000770
     b74:	0000d3b9 	.word	0x0000d3b9
     b78:	20000000 	.word	0x20000000
     b7c:	0000d3d5 	.word	0x0000d3d5
     b80:	0000eb39 	.word	0x0000eb39
     b84:	2000078c 	.word	0x2000078c
     b88:	0000d515 	.word	0x0000d515
     b8c:	00000add 	.word	0x00000add
     b90:	200007c4 	.word	0x200007c4
     b94:	00000851 	.word	0x00000851
     b98:	00000881 	.word	0x00000881

00000b9c <_GLOBAL__sub_I_ptrSingleHeaterClass>:
     b9c:	b580      	push	{r7, lr}
     b9e:	af00      	add	r7, sp, #0
     ba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     ba4:	2001      	movs	r0, #1
     ba6:	4b01      	ldr	r3, [pc, #4]	; (bac <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
     ba8:	4798      	blx	r3
     baa:	bd80      	pop	{r7, pc}
     bac:	00000b09 	.word	0x00000b09

00000bb0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     bb0:	b580      	push	{r7, lr}
     bb2:	af00      	add	r7, sp, #0
	system_init();
     bb4:	4b03      	ldr	r3, [pc, #12]	; (bc4 <atmel_start_init+0x14>)
     bb6:	4798      	blx	r3
	usb_init();
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <atmel_start_init+0x18>)
     bba:	4798      	blx	r3
	spi_nor_flash_init();
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <atmel_start_init+0x1c>)
     bbe:	4798      	blx	r3
}
     bc0:	bf00      	nop
     bc2:	bd80      	pop	{r7, pc}
     bc4:	00001fb1 	.word	0x00001fb1
     bc8:	0000b4e5 	.word	0x0000b4e5
     bcc:	0000b479 	.word	0x0000b479

00000bd0 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     bd0:	b480      	push	{r7}
     bd2:	b085      	sub	sp, #20
     bd4:	af00      	add	r7, sp, #0
     bd6:	60f8      	str	r0, [r7, #12]
     bd8:	460b      	mov	r3, r1
     bda:	607a      	str	r2, [r7, #4]
     bdc:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     bde:	7afa      	ldrb	r2, [r7, #11]
     be0:	68fb      	ldr	r3, [r7, #12]
     be2:	3220      	adds	r2, #32
     be4:	6879      	ldr	r1, [r7, #4]
     be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     bea:	bf00      	nop
     bec:	3714      	adds	r7, #20
     bee:	46bd      	mov	sp, r7
     bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf4:	4770      	bx	lr

00000bf6 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     bf6:	b480      	push	{r7}
     bf8:	b083      	sub	sp, #12
     bfa:	af00      	add	r7, sp, #0
     bfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	691b      	ldr	r3, [r3, #16]
     c02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c0a:	bf00      	nop
     c0c:	370c      	adds	r7, #12
     c0e:	46bd      	mov	sp, r7
     c10:	f85d 7b04 	ldr.w	r7, [sp], #4
     c14:	4770      	bx	lr

00000c16 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     c16:	b480      	push	{r7}
     c18:	b083      	sub	sp, #12
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	691b      	ldr	r3, [r3, #16]
     c22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c2a:	bf00      	nop
     c2c:	370c      	adds	r7, #12
     c2e:	46bd      	mov	sp, r7
     c30:	f85d 7b04 	ldr.w	r7, [sp], #4
     c34:	4770      	bx	lr

00000c36 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     c36:	b480      	push	{r7}
     c38:	b083      	sub	sp, #12
     c3a:	af00      	add	r7, sp, #0
     c3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	691b      	ldr	r3, [r3, #16]
     c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c4a:	bf00      	nop
     c4c:	370c      	adds	r7, #12
     c4e:	46bd      	mov	sp, r7
     c50:	f85d 7b04 	ldr.w	r7, [sp], #4
     c54:	4770      	bx	lr

00000c56 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     c56:	b480      	push	{r7}
     c58:	b083      	sub	sp, #12
     c5a:	af00      	add	r7, sp, #0
     c5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	691b      	ldr	r3, [r3, #16]
     c62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c6a:	bf00      	nop
     c6c:	370c      	adds	r7, #12
     c6e:	46bd      	mov	sp, r7
     c70:	f85d 7b04 	ldr.w	r7, [sp], #4
     c74:	4770      	bx	lr

00000c76 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     c76:	b480      	push	{r7}
     c78:	b083      	sub	sp, #12
     c7a:	af00      	add	r7, sp, #0
     c7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	695b      	ldr	r3, [r3, #20]
     c82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c8a:	bf00      	nop
     c8c:	370c      	adds	r7, #12
     c8e:	46bd      	mov	sp, r7
     c90:	f85d 7b04 	ldr.w	r7, [sp], #4
     c94:	4770      	bx	lr

00000c96 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     c96:	b480      	push	{r7}
     c98:	b083      	sub	sp, #12
     c9a:	af00      	add	r7, sp, #0
     c9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	695b      	ldr	r3, [r3, #20]
     ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     caa:	bf00      	nop
     cac:	370c      	adds	r7, #12
     cae:	46bd      	mov	sp, r7
     cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb4:	4770      	bx	lr

00000cb6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     cb6:	b480      	push	{r7}
     cb8:	b083      	sub	sp, #12
     cba:	af00      	add	r7, sp, #0
     cbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	695b      	ldr	r3, [r3, #20]
     cc2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cca:	bf00      	nop
     ccc:	370c      	adds	r7, #12
     cce:	46bd      	mov	sp, r7
     cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cd4:	4770      	bx	lr

00000cd6 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     cd6:	b480      	push	{r7}
     cd8:	b083      	sub	sp, #12
     cda:	af00      	add	r7, sp, #0
     cdc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	695b      	ldr	r3, [r3, #20]
     ce2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     ce6:	687b      	ldr	r3, [r7, #4]
     ce8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cea:	bf00      	nop
     cec:	370c      	adds	r7, #12
     cee:	46bd      	mov	sp, r7
     cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf4:	4770      	bx	lr

00000cf6 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     cf6:	b480      	push	{r7}
     cf8:	b083      	sub	sp, #12
     cfa:	af00      	add	r7, sp, #0
     cfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	695b      	ldr	r3, [r3, #20]
     d02:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d0a:	bf00      	nop
     d0c:	370c      	adds	r7, #12
     d0e:	46bd      	mov	sp, r7
     d10:	f85d 7b04 	ldr.w	r7, [sp], #4
     d14:	4770      	bx	lr

00000d16 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     d16:	b480      	push	{r7}
     d18:	b083      	sub	sp, #12
     d1a:	af00      	add	r7, sp, #0
     d1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	699b      	ldr	r3, [r3, #24]
     d22:	f043 0201 	orr.w	r2, r3, #1
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d2a:	bf00      	nop
     d2c:	370c      	adds	r7, #12
     d2e:	46bd      	mov	sp, r7
     d30:	f85d 7b04 	ldr.w	r7, [sp], #4
     d34:	4770      	bx	lr

00000d36 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     d36:	b480      	push	{r7}
     d38:	b083      	sub	sp, #12
     d3a:	af00      	add	r7, sp, #0
     d3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	699b      	ldr	r3, [r3, #24]
     d42:	f043 0202 	orr.w	r2, r3, #2
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d4a:	bf00      	nop
     d4c:	370c      	adds	r7, #12
     d4e:	46bd      	mov	sp, r7
     d50:	f85d 7b04 	ldr.w	r7, [sp], #4
     d54:	4770      	bx	lr

00000d56 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     d56:	b480      	push	{r7}
     d58:	b083      	sub	sp, #12
     d5a:	af00      	add	r7, sp, #0
     d5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	699b      	ldr	r3, [r3, #24]
     d62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d6a:	bf00      	nop
     d6c:	370c      	adds	r7, #12
     d6e:	46bd      	mov	sp, r7
     d70:	f85d 7b04 	ldr.w	r7, [sp], #4
     d74:	4770      	bx	lr

00000d76 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     d76:	b480      	push	{r7}
     d78:	b083      	sub	sp, #12
     d7a:	af00      	add	r7, sp, #0
     d7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	699b      	ldr	r3, [r3, #24]
     d82:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d8a:	bf00      	nop
     d8c:	370c      	adds	r7, #12
     d8e:	46bd      	mov	sp, r7
     d90:	f85d 7b04 	ldr.w	r7, [sp], #4
     d94:	4770      	bx	lr

00000d96 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     d96:	b480      	push	{r7}
     d98:	b083      	sub	sp, #12
     d9a:	af00      	add	r7, sp, #0
     d9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	699b      	ldr	r3, [r3, #24]
     da2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     daa:	bf00      	nop
     dac:	370c      	adds	r7, #12
     dae:	46bd      	mov	sp, r7
     db0:	f85d 7b04 	ldr.w	r7, [sp], #4
     db4:	4770      	bx	lr

00000db6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     db6:	b480      	push	{r7}
     db8:	b083      	sub	sp, #12
     dba:	af00      	add	r7, sp, #0
     dbc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	699b      	ldr	r3, [r3, #24]
     dc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dca:	bf00      	nop
     dcc:	370c      	adds	r7, #12
     dce:	46bd      	mov	sp, r7
     dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd4:	4770      	bx	lr

00000dd6 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     dd6:	b480      	push	{r7}
     dd8:	b083      	sub	sp, #12
     dda:	af00      	add	r7, sp, #0
     ddc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	69db      	ldr	r3, [r3, #28]
     de2:	f043 0208 	orr.w	r2, r3, #8
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dea:	bf00      	nop
     dec:	370c      	adds	r7, #12
     dee:	46bd      	mov	sp, r7
     df0:	f85d 7b04 	ldr.w	r7, [sp], #4
     df4:	4770      	bx	lr

00000df6 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     df6:	b480      	push	{r7}
     df8:	b083      	sub	sp, #12
     dfa:	af00      	add	r7, sp, #0
     dfc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	69db      	ldr	r3, [r3, #28]
     e02:	f043 0220 	orr.w	r2, r3, #32
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e0a:	bf00      	nop
     e0c:	370c      	adds	r7, #12
     e0e:	46bd      	mov	sp, r7
     e10:	f85d 7b04 	ldr.w	r7, [sp], #4
     e14:	4770      	bx	lr

00000e16 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     e16:	b480      	push	{r7}
     e18:	b083      	sub	sp, #12
     e1a:	af00      	add	r7, sp, #0
     e1c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	69db      	ldr	r3, [r3, #28]
     e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e2a:	bf00      	nop
     e2c:	370c      	adds	r7, #12
     e2e:	46bd      	mov	sp, r7
     e30:	f85d 7b04 	ldr.w	r7, [sp], #4
     e34:	4770      	bx	lr

00000e36 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     e36:	b480      	push	{r7}
     e38:	b083      	sub	sp, #12
     e3a:	af00      	add	r7, sp, #0
     e3c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	69db      	ldr	r3, [r3, #28]
     e42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e4a:	bf00      	nop
     e4c:	370c      	adds	r7, #12
     e4e:	46bd      	mov	sp, r7
     e50:	f85d 7b04 	ldr.w	r7, [sp], #4
     e54:	4770      	bx	lr

00000e56 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     e56:	b480      	push	{r7}
     e58:	b083      	sub	sp, #12
     e5a:	af00      	add	r7, sp, #0
     e5c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	6a1b      	ldr	r3, [r3, #32]
     e62:	f043 0201 	orr.w	r2, r3, #1
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e6a:	bf00      	nop
     e6c:	370c      	adds	r7, #12
     e6e:	46bd      	mov	sp, r7
     e70:	f85d 7b04 	ldr.w	r7, [sp], #4
     e74:	4770      	bx	lr

00000e76 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     e76:	b480      	push	{r7}
     e78:	b083      	sub	sp, #12
     e7a:	af00      	add	r7, sp, #0
     e7c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	6a1b      	ldr	r3, [r3, #32]
     e82:	f043 0202 	orr.w	r2, r3, #2
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e8a:	bf00      	nop
     e8c:	370c      	adds	r7, #12
     e8e:	46bd      	mov	sp, r7
     e90:	f85d 7b04 	ldr.w	r7, [sp], #4
     e94:	4770      	bx	lr

00000e96 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     e96:	b480      	push	{r7}
     e98:	b083      	sub	sp, #12
     e9a:	af00      	add	r7, sp, #0
     e9c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	6a1b      	ldr	r3, [r3, #32]
     ea2:	f043 0204 	orr.w	r2, r3, #4
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eaa:	bf00      	nop
     eac:	370c      	adds	r7, #12
     eae:	46bd      	mov	sp, r7
     eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     eb4:	4770      	bx	lr

00000eb6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     eb6:	b480      	push	{r7}
     eb8:	b083      	sub	sp, #12
     eba:	af00      	add	r7, sp, #0
     ebc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	6a1b      	ldr	r3, [r3, #32]
     ec2:	f043 0208 	orr.w	r2, r3, #8
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eca:	bf00      	nop
     ecc:	370c      	adds	r7, #12
     ece:	46bd      	mov	sp, r7
     ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed4:	4770      	bx	lr

00000ed6 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     ed6:	b480      	push	{r7}
     ed8:	b083      	sub	sp, #12
     eda:	af00      	add	r7, sp, #0
     edc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	6a1b      	ldr	r3, [r3, #32]
     ee2:	f043 0220 	orr.w	r2, r3, #32
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eea:	bf00      	nop
     eec:	370c      	adds	r7, #12
     eee:	46bd      	mov	sp, r7
     ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
     ef4:	4770      	bx	lr

00000ef6 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     ef6:	b480      	push	{r7}
     ef8:	b083      	sub	sp, #12
     efa:	af00      	add	r7, sp, #0
     efc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	6a1b      	ldr	r3, [r3, #32]
     f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f0a:	bf00      	nop
     f0c:	370c      	adds	r7, #12
     f0e:	46bd      	mov	sp, r7
     f10:	f85d 7b04 	ldr.w	r7, [sp], #4
     f14:	4770      	bx	lr

00000f16 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f16:	b480      	push	{r7}
     f18:	b085      	sub	sp, #20
     f1a:	af00      	add	r7, sp, #0
     f1c:	60f8      	str	r0, [r7, #12]
     f1e:	460b      	mov	r3, r1
     f20:	607a      	str	r2, [r7, #4]
     f22:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f24:	7afb      	ldrb	r3, [r7, #11]
     f26:	68fa      	ldr	r2, [r7, #12]
     f28:	01db      	lsls	r3, r3, #7
     f2a:	4413      	add	r3, r2
     f2c:	3308      	adds	r3, #8
     f2e:	687a      	ldr	r2, [r7, #4]
     f30:	601a      	str	r2, [r3, #0]
}
     f32:	bf00      	nop
     f34:	3714      	adds	r7, #20
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr

00000f3e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f3e:	b480      	push	{r7}
     f40:	b085      	sub	sp, #20
     f42:	af00      	add	r7, sp, #0
     f44:	60f8      	str	r0, [r7, #12]
     f46:	460b      	mov	r3, r1
     f48:	607a      	str	r2, [r7, #4]
     f4a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f4c:	7afb      	ldrb	r3, [r7, #11]
     f4e:	68fa      	ldr	r2, [r7, #12]
     f50:	01db      	lsls	r3, r3, #7
     f52:	4413      	add	r3, r2
     f54:	3304      	adds	r3, #4
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	601a      	str	r2, [r3, #0]
}
     f5a:	bf00      	nop
     f5c:	3714      	adds	r7, #20
     f5e:	46bd      	mov	sp, r7
     f60:	f85d 7b04 	ldr.w	r7, [sp], #4
     f64:	4770      	bx	lr

00000f66 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f66:	b480      	push	{r7}
     f68:	b085      	sub	sp, #20
     f6a:	af00      	add	r7, sp, #0
     f6c:	60f8      	str	r0, [r7, #12]
     f6e:	460b      	mov	r3, r1
     f70:	607a      	str	r2, [r7, #4]
     f72:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f74:	7afb      	ldrb	r3, [r7, #11]
     f76:	68fa      	ldr	r2, [r7, #12]
     f78:	01db      	lsls	r3, r3, #7
     f7a:	4413      	add	r3, r2
     f7c:	3318      	adds	r3, #24
     f7e:	687a      	ldr	r2, [r7, #4]
     f80:	601a      	str	r2, [r3, #0]
}
     f82:	bf00      	nop
     f84:	3714      	adds	r7, #20
     f86:	46bd      	mov	sp, r7
     f88:	f85d 7b04 	ldr.w	r7, [sp], #4
     f8c:	4770      	bx	lr

00000f8e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f8e:	b480      	push	{r7}
     f90:	b085      	sub	sp, #20
     f92:	af00      	add	r7, sp, #0
     f94:	60f8      	str	r0, [r7, #12]
     f96:	460b      	mov	r3, r1
     f98:	607a      	str	r2, [r7, #4]
     f9a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f9c:	7afb      	ldrb	r3, [r7, #11]
     f9e:	68fa      	ldr	r2, [r7, #12]
     fa0:	01db      	lsls	r3, r3, #7
     fa2:	4413      	add	r3, r2
     fa4:	3314      	adds	r3, #20
     fa6:	687a      	ldr	r2, [r7, #4]
     fa8:	601a      	str	r2, [r3, #0]
}
     faa:	bf00      	nop
     fac:	3714      	adds	r7, #20
     fae:	46bd      	mov	sp, r7
     fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb4:	4770      	bx	lr

00000fb6 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     fb6:	b480      	push	{r7}
     fb8:	b085      	sub	sp, #20
     fba:	af00      	add	r7, sp, #0
     fbc:	6078      	str	r0, [r7, #4]
     fbe:	4608      	mov	r0, r1
     fc0:	4611      	mov	r1, r2
     fc2:	461a      	mov	r2, r3
     fc4:	4603      	mov	r3, r0
     fc6:	70fb      	strb	r3, [r7, #3]
     fc8:	460b      	mov	r3, r1
     fca:	70bb      	strb	r3, [r7, #2]
     fcc:	4613      	mov	r3, r2
     fce:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fd0:	78fa      	ldrb	r2, [r7, #3]
     fd2:	78bb      	ldrb	r3, [r7, #2]
     fd4:	6879      	ldr	r1, [r7, #4]
     fd6:	01d2      	lsls	r2, r2, #7
     fd8:	440a      	add	r2, r1
     fda:	4413      	add	r3, r2
     fdc:	3330      	adds	r3, #48	; 0x30
     fde:	781b      	ldrb	r3, [r3, #0]
     fe0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fe2:	7bfb      	ldrb	r3, [r7, #15]
     fe4:	f023 030f 	bic.w	r3, r3, #15
     fe8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     fea:	787b      	ldrb	r3, [r7, #1]
     fec:	f003 030f 	and.w	r3, r3, #15
     ff0:	b2da      	uxtb	r2, r3
     ff2:	7bfb      	ldrb	r3, [r7, #15]
     ff4:	4313      	orrs	r3, r2
     ff6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ff8:	78fa      	ldrb	r2, [r7, #3]
     ffa:	78bb      	ldrb	r3, [r7, #2]
     ffc:	6879      	ldr	r1, [r7, #4]
     ffe:	01d2      	lsls	r2, r2, #7
    1000:	440a      	add	r2, r1
    1002:	4413      	add	r3, r2
    1004:	3330      	adds	r3, #48	; 0x30
    1006:	7bfa      	ldrb	r2, [r7, #15]
    1008:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    100a:	bf00      	nop
    100c:	3714      	adds	r7, #20
    100e:	46bd      	mov	sp, r7
    1010:	f85d 7b04 	ldr.w	r7, [sp], #4
    1014:	4770      	bx	lr

00001016 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1016:	b480      	push	{r7}
    1018:	b085      	sub	sp, #20
    101a:	af00      	add	r7, sp, #0
    101c:	6078      	str	r0, [r7, #4]
    101e:	4608      	mov	r0, r1
    1020:	4611      	mov	r1, r2
    1022:	461a      	mov	r2, r3
    1024:	4603      	mov	r3, r0
    1026:	70fb      	strb	r3, [r7, #3]
    1028:	460b      	mov	r3, r1
    102a:	70bb      	strb	r3, [r7, #2]
    102c:	4613      	mov	r3, r2
    102e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1030:	78fa      	ldrb	r2, [r7, #3]
    1032:	78bb      	ldrb	r3, [r7, #2]
    1034:	6879      	ldr	r1, [r7, #4]
    1036:	01d2      	lsls	r2, r2, #7
    1038:	440a      	add	r2, r1
    103a:	4413      	add	r3, r2
    103c:	3330      	adds	r3, #48	; 0x30
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1042:	7bfb      	ldrb	r3, [r7, #15]
    1044:	f003 030f 	and.w	r3, r3, #15
    1048:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    104a:	787b      	ldrb	r3, [r7, #1]
    104c:	011b      	lsls	r3, r3, #4
    104e:	b2da      	uxtb	r2, r3
    1050:	7bfb      	ldrb	r3, [r7, #15]
    1052:	4313      	orrs	r3, r2
    1054:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1056:	78fa      	ldrb	r2, [r7, #3]
    1058:	78bb      	ldrb	r3, [r7, #2]
    105a:	6879      	ldr	r1, [r7, #4]
    105c:	01d2      	lsls	r2, r2, #7
    105e:	440a      	add	r2, r1
    1060:	4413      	add	r3, r2
    1062:	3330      	adds	r3, #48	; 0x30
    1064:	7bfa      	ldrb	r2, [r7, #15]
    1066:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1068:	bf00      	nop
    106a:	3714      	adds	r7, #20
    106c:	46bd      	mov	sp, r7
    106e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1072:	4770      	bx	lr

00001074 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1074:	b480      	push	{r7}
    1076:	b085      	sub	sp, #20
    1078:	af00      	add	r7, sp, #0
    107a:	6078      	str	r0, [r7, #4]
    107c:	4608      	mov	r0, r1
    107e:	4611      	mov	r1, r2
    1080:	461a      	mov	r2, r3
    1082:	4603      	mov	r3, r0
    1084:	70fb      	strb	r3, [r7, #3]
    1086:	460b      	mov	r3, r1
    1088:	70bb      	strb	r3, [r7, #2]
    108a:	4613      	mov	r3, r2
    108c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    108e:	78fa      	ldrb	r2, [r7, #3]
    1090:	78bb      	ldrb	r3, [r7, #2]
    1092:	6879      	ldr	r1, [r7, #4]
    1094:	01d2      	lsls	r2, r2, #7
    1096:	440a      	add	r2, r1
    1098:	4413      	add	r3, r2
    109a:	3340      	adds	r3, #64	; 0x40
    109c:	781b      	ldrb	r3, [r3, #0]
    109e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10a0:	7bfb      	ldrb	r3, [r7, #15]
    10a2:	f023 0301 	bic.w	r3, r3, #1
    10a6:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10a8:	787a      	ldrb	r2, [r7, #1]
    10aa:	7bfb      	ldrb	r3, [r7, #15]
    10ac:	4313      	orrs	r3, r2
    10ae:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10b0:	78fa      	ldrb	r2, [r7, #3]
    10b2:	78bb      	ldrb	r3, [r7, #2]
    10b4:	6879      	ldr	r1, [r7, #4]
    10b6:	01d2      	lsls	r2, r2, #7
    10b8:	440a      	add	r2, r1
    10ba:	4413      	add	r3, r2
    10bc:	3340      	adds	r3, #64	; 0x40
    10be:	7bfa      	ldrb	r2, [r7, #15]
    10c0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10c2:	bf00      	nop
    10c4:	3714      	adds	r7, #20
    10c6:	46bd      	mov	sp, r7
    10c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    10cc:	4770      	bx	lr

000010ce <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    10ce:	b490      	push	{r4, r7}
    10d0:	b082      	sub	sp, #8
    10d2:	af00      	add	r7, sp, #0
    10d4:	6078      	str	r0, [r7, #4]
    10d6:	460b      	mov	r3, r1
    10d8:	70fb      	strb	r3, [r7, #3]
    10da:	4613      	mov	r3, r2
    10dc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    10de:	78fa      	ldrb	r2, [r7, #3]
    10e0:	78bb      	ldrb	r3, [r7, #2]
    10e2:	78f8      	ldrb	r0, [r7, #3]
    10e4:	78b9      	ldrb	r1, [r7, #2]
    10e6:	687c      	ldr	r4, [r7, #4]
    10e8:	01c0      	lsls	r0, r0, #7
    10ea:	4420      	add	r0, r4
    10ec:	4401      	add	r1, r0
    10ee:	3140      	adds	r1, #64	; 0x40
    10f0:	7809      	ldrb	r1, [r1, #0]
    10f2:	b2c9      	uxtb	r1, r1
    10f4:	f041 0104 	orr.w	r1, r1, #4
    10f8:	b2c8      	uxtb	r0, r1
    10fa:	6879      	ldr	r1, [r7, #4]
    10fc:	01d2      	lsls	r2, r2, #7
    10fe:	440a      	add	r2, r1
    1100:	4413      	add	r3, r2
    1102:	3340      	adds	r3, #64	; 0x40
    1104:	4602      	mov	r2, r0
    1106:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1108:	bf00      	nop
    110a:	3708      	adds	r7, #8
    110c:	46bd      	mov	sp, r7
    110e:	bc90      	pop	{r4, r7}
    1110:	4770      	bx	lr

00001112 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1112:	b490      	push	{r4, r7}
    1114:	b082      	sub	sp, #8
    1116:	af00      	add	r7, sp, #0
    1118:	6078      	str	r0, [r7, #4]
    111a:	460b      	mov	r3, r1
    111c:	70fb      	strb	r3, [r7, #3]
    111e:	4613      	mov	r3, r2
    1120:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1122:	78fa      	ldrb	r2, [r7, #3]
    1124:	78bb      	ldrb	r3, [r7, #2]
    1126:	78f8      	ldrb	r0, [r7, #3]
    1128:	78b9      	ldrb	r1, [r7, #2]
    112a:	687c      	ldr	r4, [r7, #4]
    112c:	01c0      	lsls	r0, r0, #7
    112e:	4420      	add	r0, r4
    1130:	4401      	add	r1, r0
    1132:	3140      	adds	r1, #64	; 0x40
    1134:	7809      	ldrb	r1, [r1, #0]
    1136:	b2c9      	uxtb	r1, r1
    1138:	f021 0104 	bic.w	r1, r1, #4
    113c:	b2c8      	uxtb	r0, r1
    113e:	6879      	ldr	r1, [r7, #4]
    1140:	01d2      	lsls	r2, r2, #7
    1142:	440a      	add	r2, r1
    1144:	4413      	add	r3, r2
    1146:	3340      	adds	r3, #64	; 0x40
    1148:	4602      	mov	r2, r0
    114a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    114c:	bf00      	nop
    114e:	3708      	adds	r7, #8
    1150:	46bd      	mov	sp, r7
    1152:	bc90      	pop	{r4, r7}
    1154:	4770      	bx	lr

00001156 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1156:	b480      	push	{r7}
    1158:	b085      	sub	sp, #20
    115a:	af00      	add	r7, sp, #0
    115c:	60f8      	str	r0, [r7, #12]
    115e:	460b      	mov	r3, r1
    1160:	607a      	str	r2, [r7, #4]
    1162:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1164:	7afb      	ldrb	r3, [r7, #11]
    1166:	68fa      	ldr	r2, [r7, #12]
    1168:	01db      	lsls	r3, r3, #7
    116a:	4413      	add	r3, r2
    116c:	3328      	adds	r3, #40	; 0x28
    116e:	687a      	ldr	r2, [r7, #4]
    1170:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1172:	bf00      	nop
    1174:	3714      	adds	r7, #20
    1176:	46bd      	mov	sp, r7
    1178:	f85d 7b04 	ldr.w	r7, [sp], #4
    117c:	4770      	bx	lr
	...

00001180 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1180:	b580      	push	{r7, lr}
    1182:	b082      	sub	sp, #8
    1184:	af00      	add	r7, sp, #0
    1186:	4603      	mov	r3, r0
    1188:	6039      	str	r1, [r7, #0]
    118a:	71fb      	strb	r3, [r7, #7]
    118c:	4613      	mov	r3, r2
    118e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1190:	79bb      	ldrb	r3, [r7, #6]
    1192:	2b01      	cmp	r3, #1
    1194:	d01c      	beq.n	11d0 <_gpio_set_direction+0x50>
    1196:	2b02      	cmp	r3, #2
    1198:	d037      	beq.n	120a <_gpio_set_direction+0x8a>
    119a:	2b00      	cmp	r3, #0
    119c:	d14e      	bne.n	123c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    119e:	79fb      	ldrb	r3, [r7, #7]
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	4619      	mov	r1, r3
    11a4:	482a      	ldr	r0, [pc, #168]	; (1250 <_gpio_set_direction+0xd0>)
    11a6:	4b2b      	ldr	r3, [pc, #172]	; (1254 <_gpio_set_direction+0xd4>)
    11a8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	b29b      	uxth	r3, r3
    11ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	4619      	mov	r1, r3
    11b6:	4826      	ldr	r0, [pc, #152]	; (1250 <_gpio_set_direction+0xd0>)
    11b8:	4b27      	ldr	r3, [pc, #156]	; (1258 <_gpio_set_direction+0xd8>)
    11ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    11bc:	683b      	ldr	r3, [r7, #0]
    11be:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    11c0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    11c4:	79fb      	ldrb	r3, [r7, #7]
    11c6:	4619      	mov	r1, r3
    11c8:	4821      	ldr	r0, [pc, #132]	; (1250 <_gpio_set_direction+0xd0>)
    11ca:	4b23      	ldr	r3, [pc, #140]	; (1258 <_gpio_set_direction+0xd8>)
    11cc:	4798      	blx	r3
		break;
    11ce:	e03a      	b.n	1246 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    11d0:	79fb      	ldrb	r3, [r7, #7]
    11d2:	683a      	ldr	r2, [r7, #0]
    11d4:	4619      	mov	r1, r3
    11d6:	481e      	ldr	r0, [pc, #120]	; (1250 <_gpio_set_direction+0xd0>)
    11d8:	4b1e      	ldr	r3, [pc, #120]	; (1254 <_gpio_set_direction+0xd4>)
    11da:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    11dc:	683b      	ldr	r3, [r7, #0]
    11de:	b29b      	uxth	r3, r3
    11e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    11e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11e8:	79f9      	ldrb	r1, [r7, #7]
    11ea:	461a      	mov	r2, r3
    11ec:	4818      	ldr	r0, [pc, #96]	; (1250 <_gpio_set_direction+0xd0>)
    11ee:	4b1a      	ldr	r3, [pc, #104]	; (1258 <_gpio_set_direction+0xd8>)
    11f0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    11f2:	683b      	ldr	r3, [r7, #0]
    11f4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    11f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    11fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11fe:	79f9      	ldrb	r1, [r7, #7]
    1200:	461a      	mov	r2, r3
    1202:	4813      	ldr	r0, [pc, #76]	; (1250 <_gpio_set_direction+0xd0>)
    1204:	4b14      	ldr	r3, [pc, #80]	; (1258 <_gpio_set_direction+0xd8>)
    1206:	4798      	blx	r3
		break;
    1208:	e01d      	b.n	1246 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    120a:	79fb      	ldrb	r3, [r7, #7]
    120c:	683a      	ldr	r2, [r7, #0]
    120e:	4619      	mov	r1, r3
    1210:	480f      	ldr	r0, [pc, #60]	; (1250 <_gpio_set_direction+0xd0>)
    1212:	4b12      	ldr	r3, [pc, #72]	; (125c <_gpio_set_direction+0xdc>)
    1214:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1216:	683b      	ldr	r3, [r7, #0]
    1218:	b29b      	uxth	r3, r3
    121a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    121e:	79fb      	ldrb	r3, [r7, #7]
    1220:	4619      	mov	r1, r3
    1222:	480b      	ldr	r0, [pc, #44]	; (1250 <_gpio_set_direction+0xd0>)
    1224:	4b0c      	ldr	r3, [pc, #48]	; (1258 <_gpio_set_direction+0xd8>)
    1226:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1228:	683b      	ldr	r3, [r7, #0]
    122a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    122c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1230:	79fb      	ldrb	r3, [r7, #7]
    1232:	4619      	mov	r1, r3
    1234:	4806      	ldr	r0, [pc, #24]	; (1250 <_gpio_set_direction+0xd0>)
    1236:	4b08      	ldr	r3, [pc, #32]	; (1258 <_gpio_set_direction+0xd8>)
    1238:	4798      	blx	r3
		break;
    123a:	e004      	b.n	1246 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    123c:	2246      	movs	r2, #70	; 0x46
    123e:	4908      	ldr	r1, [pc, #32]	; (1260 <_gpio_set_direction+0xe0>)
    1240:	2000      	movs	r0, #0
    1242:	4b08      	ldr	r3, [pc, #32]	; (1264 <_gpio_set_direction+0xe4>)
    1244:	4798      	blx	r3
	}
}
    1246:	bf00      	nop
    1248:	3708      	adds	r7, #8
    124a:	46bd      	mov	sp, r7
    124c:	bd80      	pop	{r7, pc}
    124e:	bf00      	nop
    1250:	41008000 	.word	0x41008000
    1254:	00000f3f 	.word	0x00000f3f
    1258:	00001157 	.word	0x00001157
    125c:	00000f17 	.word	0x00000f17
    1260:	0000efec 	.word	0x0000efec
    1264:	0000396d 	.word	0x0000396d

00001268 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1268:	b580      	push	{r7, lr}
    126a:	b082      	sub	sp, #8
    126c:	af00      	add	r7, sp, #0
    126e:	4603      	mov	r3, r0
    1270:	6039      	str	r1, [r7, #0]
    1272:	71fb      	strb	r3, [r7, #7]
    1274:	4613      	mov	r3, r2
    1276:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1278:	79bb      	ldrb	r3, [r7, #6]
    127a:	2b00      	cmp	r3, #0
    127c:	d006      	beq.n	128c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    127e:	79fb      	ldrb	r3, [r7, #7]
    1280:	683a      	ldr	r2, [r7, #0]
    1282:	4619      	mov	r1, r3
    1284:	4806      	ldr	r0, [pc, #24]	; (12a0 <_gpio_set_level+0x38>)
    1286:	4b07      	ldr	r3, [pc, #28]	; (12a4 <_gpio_set_level+0x3c>)
    1288:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    128a:	e005      	b.n	1298 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    128c:	79fb      	ldrb	r3, [r7, #7]
    128e:	683a      	ldr	r2, [r7, #0]
    1290:	4619      	mov	r1, r3
    1292:	4803      	ldr	r0, [pc, #12]	; (12a0 <_gpio_set_level+0x38>)
    1294:	4b04      	ldr	r3, [pc, #16]	; (12a8 <_gpio_set_level+0x40>)
    1296:	4798      	blx	r3
}
    1298:	bf00      	nop
    129a:	3708      	adds	r7, #8
    129c:	46bd      	mov	sp, r7
    129e:	bd80      	pop	{r7, pc}
    12a0:	41008000 	.word	0x41008000
    12a4:	00000f67 	.word	0x00000f67
    12a8:	00000f8f 	.word	0x00000f8f

000012ac <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	b082      	sub	sp, #8
    12b0:	af00      	add	r7, sp, #0
    12b2:	4603      	mov	r3, r0
    12b4:	71fb      	strb	r3, [r7, #7]
    12b6:	460b      	mov	r3, r1
    12b8:	71bb      	strb	r3, [r7, #6]
    12ba:	4613      	mov	r3, r2
    12bc:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    12be:	797b      	ldrb	r3, [r7, #5]
    12c0:	2b01      	cmp	r3, #1
    12c2:	d00a      	beq.n	12da <_gpio_set_pin_pull_mode+0x2e>
    12c4:	2b02      	cmp	r3, #2
    12c6:	d01f      	beq.n	1308 <_gpio_set_pin_pull_mode+0x5c>
    12c8:	2b00      	cmp	r3, #0
    12ca:	d134      	bne.n	1336 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    12cc:	79ba      	ldrb	r2, [r7, #6]
    12ce:	79fb      	ldrb	r3, [r7, #7]
    12d0:	4619      	mov	r1, r3
    12d2:	481e      	ldr	r0, [pc, #120]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    12d4:	4b1e      	ldr	r3, [pc, #120]	; (1350 <_gpio_set_pin_pull_mode+0xa4>)
    12d6:	4798      	blx	r3
		break;
    12d8:	e033      	b.n	1342 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    12da:	79bb      	ldrb	r3, [r7, #6]
    12dc:	2201      	movs	r2, #1
    12de:	409a      	lsls	r2, r3
    12e0:	79fb      	ldrb	r3, [r7, #7]
    12e2:	4619      	mov	r1, r3
    12e4:	4819      	ldr	r0, [pc, #100]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    12e6:	4b1b      	ldr	r3, [pc, #108]	; (1354 <_gpio_set_pin_pull_mode+0xa8>)
    12e8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    12ea:	79ba      	ldrb	r2, [r7, #6]
    12ec:	79fb      	ldrb	r3, [r7, #7]
    12ee:	4619      	mov	r1, r3
    12f0:	4816      	ldr	r0, [pc, #88]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    12f2:	4b19      	ldr	r3, [pc, #100]	; (1358 <_gpio_set_pin_pull_mode+0xac>)
    12f4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    12f6:	79bb      	ldrb	r3, [r7, #6]
    12f8:	2201      	movs	r2, #1
    12fa:	409a      	lsls	r2, r3
    12fc:	79fb      	ldrb	r3, [r7, #7]
    12fe:	4619      	mov	r1, r3
    1300:	4812      	ldr	r0, [pc, #72]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    1302:	4b16      	ldr	r3, [pc, #88]	; (135c <_gpio_set_pin_pull_mode+0xb0>)
    1304:	4798      	blx	r3
		break;
    1306:	e01c      	b.n	1342 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1308:	79bb      	ldrb	r3, [r7, #6]
    130a:	2201      	movs	r2, #1
    130c:	409a      	lsls	r2, r3
    130e:	79fb      	ldrb	r3, [r7, #7]
    1310:	4619      	mov	r1, r3
    1312:	480e      	ldr	r0, [pc, #56]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <_gpio_set_pin_pull_mode+0xa8>)
    1316:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1318:	79ba      	ldrb	r2, [r7, #6]
    131a:	79fb      	ldrb	r3, [r7, #7]
    131c:	4619      	mov	r1, r3
    131e:	480b      	ldr	r0, [pc, #44]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    1320:	4b0d      	ldr	r3, [pc, #52]	; (1358 <_gpio_set_pin_pull_mode+0xac>)
    1322:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1324:	79bb      	ldrb	r3, [r7, #6]
    1326:	2201      	movs	r2, #1
    1328:	409a      	lsls	r2, r3
    132a:	79fb      	ldrb	r3, [r7, #7]
    132c:	4619      	mov	r1, r3
    132e:	4807      	ldr	r0, [pc, #28]	; (134c <_gpio_set_pin_pull_mode+0xa0>)
    1330:	4b0b      	ldr	r3, [pc, #44]	; (1360 <_gpio_set_pin_pull_mode+0xb4>)
    1332:	4798      	blx	r3
		break;
    1334:	e005      	b.n	1342 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1336:	2289      	movs	r2, #137	; 0x89
    1338:	490a      	ldr	r1, [pc, #40]	; (1364 <_gpio_set_pin_pull_mode+0xb8>)
    133a:	2000      	movs	r0, #0
    133c:	4b0a      	ldr	r3, [pc, #40]	; (1368 <_gpio_set_pin_pull_mode+0xbc>)
    133e:	4798      	blx	r3
		break;
    1340:	bf00      	nop
	}
}
    1342:	bf00      	nop
    1344:	3708      	adds	r7, #8
    1346:	46bd      	mov	sp, r7
    1348:	bd80      	pop	{r7, pc}
    134a:	bf00      	nop
    134c:	41008000 	.word	0x41008000
    1350:	00001113 	.word	0x00001113
    1354:	00000f3f 	.word	0x00000f3f
    1358:	000010cf 	.word	0x000010cf
    135c:	00000f67 	.word	0x00000f67
    1360:	00000f8f 	.word	0x00000f8f
    1364:	0000efec 	.word	0x0000efec
    1368:	0000396d 	.word	0x0000396d

0000136c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    136c:	b590      	push	{r4, r7, lr}
    136e:	b085      	sub	sp, #20
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
    1374:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	095b      	lsrs	r3, r3, #5
    137a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	b2db      	uxtb	r3, r3
    1380:	f003 031f 	and.w	r3, r3, #31
    1384:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	f1b3 3fff 	cmp.w	r3, #4294967295
    138c:	d106      	bne.n	139c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    138e:	7bba      	ldrb	r2, [r7, #14]
    1390:	7bf9      	ldrb	r1, [r7, #15]
    1392:	2300      	movs	r3, #0
    1394:	4812      	ldr	r0, [pc, #72]	; (13e0 <_gpio_set_pin_function+0x74>)
    1396:	4c13      	ldr	r4, [pc, #76]	; (13e4 <_gpio_set_pin_function+0x78>)
    1398:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    139a:	e01d      	b.n	13d8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    139c:	7bba      	ldrb	r2, [r7, #14]
    139e:	7bf9      	ldrb	r1, [r7, #15]
    13a0:	2301      	movs	r3, #1
    13a2:	480f      	ldr	r0, [pc, #60]	; (13e0 <_gpio_set_pin_function+0x74>)
    13a4:	4c0f      	ldr	r4, [pc, #60]	; (13e4 <_gpio_set_pin_function+0x78>)
    13a6:	47a0      	blx	r4
		if (pin & 1) {
    13a8:	7bbb      	ldrb	r3, [r7, #14]
    13aa:	f003 0301 	and.w	r3, r3, #1
    13ae:	2b00      	cmp	r3, #0
    13b0:	d009      	beq.n	13c6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    13b2:	7bbb      	ldrb	r3, [r7, #14]
    13b4:	085b      	lsrs	r3, r3, #1
    13b6:	b2da      	uxtb	r2, r3
    13b8:	683b      	ldr	r3, [r7, #0]
    13ba:	b2db      	uxtb	r3, r3
    13bc:	7bf9      	ldrb	r1, [r7, #15]
    13be:	4808      	ldr	r0, [pc, #32]	; (13e0 <_gpio_set_pin_function+0x74>)
    13c0:	4c09      	ldr	r4, [pc, #36]	; (13e8 <_gpio_set_pin_function+0x7c>)
    13c2:	47a0      	blx	r4
}
    13c4:	e008      	b.n	13d8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    13c6:	7bbb      	ldrb	r3, [r7, #14]
    13c8:	085b      	lsrs	r3, r3, #1
    13ca:	b2da      	uxtb	r2, r3
    13cc:	683b      	ldr	r3, [r7, #0]
    13ce:	b2db      	uxtb	r3, r3
    13d0:	7bf9      	ldrb	r1, [r7, #15]
    13d2:	4803      	ldr	r0, [pc, #12]	; (13e0 <_gpio_set_pin_function+0x74>)
    13d4:	4c05      	ldr	r4, [pc, #20]	; (13ec <_gpio_set_pin_function+0x80>)
    13d6:	47a0      	blx	r4
}
    13d8:	bf00      	nop
    13da:	3714      	adds	r7, #20
    13dc:	46bd      	mov	sp, r7
    13de:	bd90      	pop	{r4, r7, pc}
    13e0:	41008000 	.word	0x41008000
    13e4:	00001075 	.word	0x00001075
    13e8:	00001017 	.word	0x00001017
    13ec:	00000fb7 	.word	0x00000fb7

000013f0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b082      	sub	sp, #8
    13f4:	af00      	add	r7, sp, #0
    13f6:	4603      	mov	r3, r0
    13f8:	460a      	mov	r2, r1
    13fa:	71fb      	strb	r3, [r7, #7]
    13fc:	4613      	mov	r3, r2
    13fe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1400:	79fb      	ldrb	r3, [r7, #7]
    1402:	095b      	lsrs	r3, r3, #5
    1404:	b2d8      	uxtb	r0, r3
    1406:	79fb      	ldrb	r3, [r7, #7]
    1408:	f003 031f 	and.w	r3, r3, #31
    140c:	b2db      	uxtb	r3, r3
    140e:	79ba      	ldrb	r2, [r7, #6]
    1410:	4619      	mov	r1, r3
    1412:	4b03      	ldr	r3, [pc, #12]	; (1420 <gpio_set_pin_pull_mode+0x30>)
    1414:	4798      	blx	r3
}
    1416:	bf00      	nop
    1418:	3708      	adds	r7, #8
    141a:	46bd      	mov	sp, r7
    141c:	bd80      	pop	{r7, pc}
    141e:	bf00      	nop
    1420:	000012ad 	.word	0x000012ad

00001424 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    142c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    142e:	6839      	ldr	r1, [r7, #0]
    1430:	6878      	ldr	r0, [r7, #4]
    1432:	4b03      	ldr	r3, [pc, #12]	; (1440 <gpio_set_pin_function+0x1c>)
    1434:	4798      	blx	r3
}
    1436:	bf00      	nop
    1438:	3708      	adds	r7, #8
    143a:	46bd      	mov	sp, r7
    143c:	bd80      	pop	{r7, pc}
    143e:	bf00      	nop
    1440:	0000136d 	.word	0x0000136d

00001444 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	4603      	mov	r3, r0
    144c:	460a      	mov	r2, r1
    144e:	71fb      	strb	r3, [r7, #7]
    1450:	4613      	mov	r3, r2
    1452:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1454:	79fb      	ldrb	r3, [r7, #7]
    1456:	095b      	lsrs	r3, r3, #5
    1458:	b2d8      	uxtb	r0, r3
    145a:	79fb      	ldrb	r3, [r7, #7]
    145c:	f003 031f 	and.w	r3, r3, #31
    1460:	2201      	movs	r2, #1
    1462:	fa02 f303 	lsl.w	r3, r2, r3
    1466:	79ba      	ldrb	r2, [r7, #6]
    1468:	4619      	mov	r1, r3
    146a:	4b03      	ldr	r3, [pc, #12]	; (1478 <gpio_set_pin_direction+0x34>)
    146c:	4798      	blx	r3
}
    146e:	bf00      	nop
    1470:	3708      	adds	r7, #8
    1472:	46bd      	mov	sp, r7
    1474:	bd80      	pop	{r7, pc}
    1476:	bf00      	nop
    1478:	00001181 	.word	0x00001181

0000147c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    147c:	b580      	push	{r7, lr}
    147e:	b082      	sub	sp, #8
    1480:	af00      	add	r7, sp, #0
    1482:	4603      	mov	r3, r0
    1484:	460a      	mov	r2, r1
    1486:	71fb      	strb	r3, [r7, #7]
    1488:	4613      	mov	r3, r2
    148a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    148c:	79fb      	ldrb	r3, [r7, #7]
    148e:	095b      	lsrs	r3, r3, #5
    1490:	b2d8      	uxtb	r0, r3
    1492:	79fb      	ldrb	r3, [r7, #7]
    1494:	f003 031f 	and.w	r3, r3, #31
    1498:	2201      	movs	r2, #1
    149a:	fa02 f303 	lsl.w	r3, r2, r3
    149e:	79ba      	ldrb	r2, [r7, #6]
    14a0:	4619      	mov	r1, r3
    14a2:	4b03      	ldr	r3, [pc, #12]	; (14b0 <gpio_set_pin_level+0x34>)
    14a4:	4798      	blx	r3
}
    14a6:	bf00      	nop
    14a8:	3708      	adds	r7, #8
    14aa:	46bd      	mov	sp, r7
    14ac:	bd80      	pop	{r7, pc}
    14ae:	bf00      	nop
    14b0:	00001269 	.word	0x00001269

000014b4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	af00      	add	r7, sp, #0
	_init_chip();
    14b8:	4b01      	ldr	r3, [pc, #4]	; (14c0 <init_mcu+0xc>)
    14ba:	4798      	blx	r3
}
    14bc:	bf00      	nop
    14be:	bd80      	pop	{r7, pc}
    14c0:	00004575 	.word	0x00004575

000014c4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	b082      	sub	sp, #8
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
    14cc:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	2b00      	cmp	r3, #0
    14d2:	d004      	beq.n	14de <wdt_init+0x1a>
    14d4:	683b      	ldr	r3, [r7, #0]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d001      	beq.n	14de <wdt_init+0x1a>
    14da:	2301      	movs	r3, #1
    14dc:	e000      	b.n	14e0 <wdt_init+0x1c>
    14de:	2300      	movs	r3, #0
    14e0:	f003 0301 	and.w	r3, r3, #1
    14e4:	b2db      	uxtb	r3, r3
    14e6:	2248      	movs	r2, #72	; 0x48
    14e8:	4907      	ldr	r1, [pc, #28]	; (1508 <wdt_init+0x44>)
    14ea:	4618      	mov	r0, r3
    14ec:	4b07      	ldr	r3, [pc, #28]	; (150c <wdt_init+0x48>)
    14ee:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	683a      	ldr	r2, [r7, #0]
    14f4:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	4618      	mov	r0, r3
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <wdt_init+0x4c>)
    14fc:	4798      	blx	r3
    14fe:	4603      	mov	r3, r0
}
    1500:	4618      	mov	r0, r3
    1502:	3708      	adds	r7, #8
    1504:	46bd      	mov	sp, r7
    1506:	bd80      	pop	{r7, pc}
    1508:	0000f008 	.word	0x0000f008
    150c:	0000396d 	.word	0x0000396d
    1510:	0000af1d 	.word	0x0000af1d

00001514 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1514:	b580      	push	{r7, lr}
    1516:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1518:	4804      	ldr	r0, [pc, #16]	; (152c <CRC_CALC_init+0x18>)
    151a:	4b05      	ldr	r3, [pc, #20]	; (1530 <CRC_CALC_init+0x1c>)
    151c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    151e:	4905      	ldr	r1, [pc, #20]	; (1534 <CRC_CALC_init+0x20>)
    1520:	4805      	ldr	r0, [pc, #20]	; (1538 <CRC_CALC_init+0x24>)
    1522:	4b06      	ldr	r3, [pc, #24]	; (153c <CRC_CALC_init+0x28>)
    1524:	4798      	blx	r3
}
    1526:	bf00      	nop
    1528:	bd80      	pop	{r7, pc}
    152a:	bf00      	nop
    152c:	40000800 	.word	0x40000800
    1530:	00000d37 	.word	0x00000d37
    1534:	41002000 	.word	0x41002000
    1538:	200016ec 	.word	0x200016ec
    153c:	000022fd 	.word	0x000022fd

00001540 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1540:	b580      	push	{r7, lr}
    1542:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1544:	2244      	movs	r2, #68	; 0x44
    1546:	2104      	movs	r1, #4
    1548:	483f      	ldr	r0, [pc, #252]	; (1648 <EXTERNAL_IRQ_0_init+0x108>)
    154a:	4b40      	ldr	r3, [pc, #256]	; (164c <EXTERNAL_IRQ_0_init+0x10c>)
    154c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    154e:	4840      	ldr	r0, [pc, #256]	; (1650 <EXTERNAL_IRQ_0_init+0x110>)
    1550:	4b40      	ldr	r3, [pc, #256]	; (1654 <EXTERNAL_IRQ_0_init+0x114>)
    1552:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1554:	2101      	movs	r1, #1
    1556:	2040      	movs	r0, #64	; 0x40
    1558:	4b3f      	ldr	r3, [pc, #252]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    155a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    155c:	2100      	movs	r1, #0
    155e:	2040      	movs	r0, #64	; 0x40
    1560:	4b3e      	ldr	r3, [pc, #248]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    1562:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1564:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1568:	2040      	movs	r0, #64	; 0x40
    156a:	4b3d      	ldr	r3, [pc, #244]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    156c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    156e:	2101      	movs	r1, #1
    1570:	2021      	movs	r0, #33	; 0x21
    1572:	4b39      	ldr	r3, [pc, #228]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    1574:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1576:	2100      	movs	r1, #0
    1578:	2021      	movs	r0, #33	; 0x21
    157a:	4b38      	ldr	r3, [pc, #224]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    157c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    157e:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1582:	2021      	movs	r0, #33	; 0x21
    1584:	4b36      	ldr	r3, [pc, #216]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    1586:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1588:	2101      	movs	r1, #1
    158a:	2003      	movs	r0, #3
    158c:	4b32      	ldr	r3, [pc, #200]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    158e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1590:	2102      	movs	r1, #2
    1592:	2003      	movs	r0, #3
    1594:	4b31      	ldr	r3, [pc, #196]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    1596:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1598:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    159c:	2003      	movs	r0, #3
    159e:	4b30      	ldr	r3, [pc, #192]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    15a0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    15a2:	2101      	movs	r1, #1
    15a4:	2004      	movs	r0, #4
    15a6:	4b2c      	ldr	r3, [pc, #176]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    15a8:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    15aa:	2102      	movs	r1, #2
    15ac:	2004      	movs	r0, #4
    15ae:	4b2b      	ldr	r3, [pc, #172]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    15b0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    15b2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    15b6:	2004      	movs	r0, #4
    15b8:	4b29      	ldr	r3, [pc, #164]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    15ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    15bc:	2101      	movs	r1, #1
    15be:	2005      	movs	r0, #5
    15c0:	4b25      	ldr	r3, [pc, #148]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    15c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    15c4:	2102      	movs	r1, #2
    15c6:	2005      	movs	r0, #5
    15c8:	4b24      	ldr	r3, [pc, #144]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    15ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    15cc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    15d0:	2005      	movs	r0, #5
    15d2:	4b23      	ldr	r3, [pc, #140]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    15d4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    15d6:	2101      	movs	r1, #1
    15d8:	2056      	movs	r0, #86	; 0x56
    15da:	4b1f      	ldr	r3, [pc, #124]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    15dc:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    15de:	2102      	movs	r1, #2
    15e0:	2056      	movs	r0, #86	; 0x56
    15e2:	4b1e      	ldr	r3, [pc, #120]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    15e4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    15e6:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    15ea:	2056      	movs	r0, #86	; 0x56
    15ec:	4b1c      	ldr	r3, [pc, #112]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    15ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    15f0:	2101      	movs	r1, #1
    15f2:	2057      	movs	r0, #87	; 0x57
    15f4:	4b18      	ldr	r3, [pc, #96]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    15f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    15f8:	2102      	movs	r1, #2
    15fa:	2057      	movs	r0, #87	; 0x57
    15fc:	4b17      	ldr	r3, [pc, #92]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    15fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1600:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1604:	2057      	movs	r0, #87	; 0x57
    1606:	4b16      	ldr	r3, [pc, #88]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    1608:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    160a:	2101      	movs	r1, #1
    160c:	2028      	movs	r0, #40	; 0x28
    160e:	4b12      	ldr	r3, [pc, #72]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    1610:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1612:	2100      	movs	r1, #0
    1614:	2028      	movs	r0, #40	; 0x28
    1616:	4b11      	ldr	r3, [pc, #68]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    1618:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    161a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    161e:	2028      	movs	r0, #40	; 0x28
    1620:	4b0f      	ldr	r3, [pc, #60]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    1622:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1624:	2101      	movs	r1, #1
    1626:	2029      	movs	r0, #41	; 0x29
    1628:	4b0b      	ldr	r3, [pc, #44]	; (1658 <EXTERNAL_IRQ_0_init+0x118>)
    162a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    162c:	2100      	movs	r1, #0
    162e:	2029      	movs	r0, #41	; 0x29
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <EXTERNAL_IRQ_0_init+0x11c>)
    1632:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1634:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1638:	2029      	movs	r0, #41	; 0x29
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <EXTERNAL_IRQ_0_init+0x120>)
    163c:	4798      	blx	r3

	ext_irq_init();
    163e:	4b09      	ldr	r3, [pc, #36]	; (1664 <EXTERNAL_IRQ_0_init+0x124>)
    1640:	4798      	blx	r3
}
    1642:	bf00      	nop
    1644:	bd80      	pop	{r7, pc}
    1646:	bf00      	nop
    1648:	40001c00 	.word	0x40001c00
    164c:	00000bd1 	.word	0x00000bd1
    1650:	40000800 	.word	0x40000800
    1654:	00000cb7 	.word	0x00000cb7
    1658:	00001445 	.word	0x00001445
    165c:	000013f1 	.word	0x000013f1
    1660:	00001425 	.word	0x00001425
    1664:	000023c5 	.word	0x000023c5

00001668 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1668:	b580      	push	{r7, lr}
    166a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    166c:	2244      	movs	r2, #68	; 0x44
    166e:	210b      	movs	r1, #11
    1670:	4807      	ldr	r0, [pc, #28]	; (1690 <EVENT_SYSTEM_0_init+0x28>)
    1672:	4b08      	ldr	r3, [pc, #32]	; (1694 <EVENT_SYSTEM_0_init+0x2c>)
    1674:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1676:	2244      	movs	r2, #68	; 0x44
    1678:	210c      	movs	r1, #12
    167a:	4805      	ldr	r0, [pc, #20]	; (1690 <EVENT_SYSTEM_0_init+0x28>)
    167c:	4b05      	ldr	r3, [pc, #20]	; (1694 <EVENT_SYSTEM_0_init+0x2c>)
    167e:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1680:	4805      	ldr	r0, [pc, #20]	; (1698 <EVENT_SYSTEM_0_init+0x30>)
    1682:	4b06      	ldr	r3, [pc, #24]	; (169c <EVENT_SYSTEM_0_init+0x34>)
    1684:	4798      	blx	r3

	event_system_init();
    1686:	4b06      	ldr	r3, [pc, #24]	; (16a0 <EVENT_SYSTEM_0_init+0x38>)
    1688:	4798      	blx	r3
}
    168a:	bf00      	nop
    168c:	bd80      	pop	{r7, pc}
    168e:	bf00      	nop
    1690:	40001c00 	.word	0x40001c00
    1694:	00000bd1 	.word	0x00000bd1
    1698:	40000800 	.word	0x40000800
    169c:	00000d57 	.word	0x00000d57
    16a0:	000023b1 	.word	0x000023b1

000016a4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    16a8:	2101      	movs	r1, #1
    16aa:	202b      	movs	r0, #43	; 0x2b
    16ac:	4b2b      	ldr	r3, [pc, #172]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    16ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    16b0:	2100      	movs	r1, #0
    16b2:	202b      	movs	r0, #43	; 0x2b
    16b4:	4b2a      	ldr	r3, [pc, #168]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    16b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    16b8:	492a      	ldr	r1, [pc, #168]	; (1764 <QSPI_N25Q256_PORT_init+0xc0>)
    16ba:	202b      	movs	r0, #43	; 0x2b
    16bc:	4b2a      	ldr	r3, [pc, #168]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    16be:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    16c0:	2102      	movs	r1, #2
    16c2:	2008      	movs	r0, #8
    16c4:	4b25      	ldr	r3, [pc, #148]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    16c6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    16c8:	2100      	movs	r1, #0
    16ca:	2008      	movs	r0, #8
    16cc:	4b27      	ldr	r3, [pc, #156]	; (176c <QSPI_N25Q256_PORT_init+0xc8>)
    16ce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    16d0:	2100      	movs	r1, #0
    16d2:	2008      	movs	r0, #8
    16d4:	4b22      	ldr	r3, [pc, #136]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    16d6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    16d8:	4925      	ldr	r1, [pc, #148]	; (1770 <QSPI_N25Q256_PORT_init+0xcc>)
    16da:	2008      	movs	r0, #8
    16dc:	4b22      	ldr	r3, [pc, #136]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    16de:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    16e0:	2102      	movs	r1, #2
    16e2:	2009      	movs	r0, #9
    16e4:	4b1d      	ldr	r3, [pc, #116]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    16e6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    16e8:	2100      	movs	r1, #0
    16ea:	2009      	movs	r0, #9
    16ec:	4b1f      	ldr	r3, [pc, #124]	; (176c <QSPI_N25Q256_PORT_init+0xc8>)
    16ee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    16f0:	2100      	movs	r1, #0
    16f2:	2009      	movs	r0, #9
    16f4:	4b1a      	ldr	r3, [pc, #104]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    16f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    16f8:	491e      	ldr	r1, [pc, #120]	; (1774 <QSPI_N25Q256_PORT_init+0xd0>)
    16fa:	2009      	movs	r0, #9
    16fc:	4b1a      	ldr	r3, [pc, #104]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    16fe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1700:	2102      	movs	r1, #2
    1702:	200a      	movs	r0, #10
    1704:	4b15      	ldr	r3, [pc, #84]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    1706:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1708:	2100      	movs	r1, #0
    170a:	200a      	movs	r0, #10
    170c:	4b17      	ldr	r3, [pc, #92]	; (176c <QSPI_N25Q256_PORT_init+0xc8>)
    170e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1710:	2100      	movs	r1, #0
    1712:	200a      	movs	r0, #10
    1714:	4b12      	ldr	r3, [pc, #72]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    1716:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1718:	4917      	ldr	r1, [pc, #92]	; (1778 <QSPI_N25Q256_PORT_init+0xd4>)
    171a:	200a      	movs	r0, #10
    171c:	4b12      	ldr	r3, [pc, #72]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    171e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1720:	2102      	movs	r1, #2
    1722:	200b      	movs	r0, #11
    1724:	4b0d      	ldr	r3, [pc, #52]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    1726:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1728:	2100      	movs	r1, #0
    172a:	200b      	movs	r0, #11
    172c:	4b0f      	ldr	r3, [pc, #60]	; (176c <QSPI_N25Q256_PORT_init+0xc8>)
    172e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1730:	2100      	movs	r1, #0
    1732:	200b      	movs	r0, #11
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    1736:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1738:	4910      	ldr	r1, [pc, #64]	; (177c <QSPI_N25Q256_PORT_init+0xd8>)
    173a:	200b      	movs	r0, #11
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    173e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1740:	2101      	movs	r1, #1
    1742:	202a      	movs	r0, #42	; 0x2a
    1744:	4b05      	ldr	r3, [pc, #20]	; (175c <QSPI_N25Q256_PORT_init+0xb8>)
    1746:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1748:	2100      	movs	r1, #0
    174a:	202a      	movs	r0, #42	; 0x2a
    174c:	4b04      	ldr	r3, [pc, #16]	; (1760 <QSPI_N25Q256_PORT_init+0xbc>)
    174e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1750:	490b      	ldr	r1, [pc, #44]	; (1780 <QSPI_N25Q256_PORT_init+0xdc>)
    1752:	202a      	movs	r0, #42	; 0x2a
    1754:	4b04      	ldr	r3, [pc, #16]	; (1768 <QSPI_N25Q256_PORT_init+0xc4>)
    1756:	4798      	blx	r3
}
    1758:	bf00      	nop
    175a:	bd80      	pop	{r7, pc}
    175c:	00001445 	.word	0x00001445
    1760:	000013f1 	.word	0x000013f1
    1764:	002b0007 	.word	0x002b0007
    1768:	00001425 	.word	0x00001425
    176c:	0000147d 	.word	0x0000147d
    1770:	00080007 	.word	0x00080007
    1774:	00090007 	.word	0x00090007
    1778:	000a0007 	.word	0x000a0007
    177c:	000b0007 	.word	0x000b0007
    1780:	002a0007 	.word	0x002a0007

00001784 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1788:	4805      	ldr	r0, [pc, #20]	; (17a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <QSPI_N25Q256_CLOCK_init+0x20>)
    178c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    178e:	4804      	ldr	r0, [pc, #16]	; (17a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <QSPI_N25Q256_CLOCK_init+0x24>)
    1792:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1794:	4802      	ldr	r0, [pc, #8]	; (17a0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1796:	4b05      	ldr	r3, [pc, #20]	; (17ac <QSPI_N25Q256_CLOCK_init+0x28>)
    1798:	4798      	blx	r3
}
    179a:	bf00      	nop
    179c:	bd80      	pop	{r7, pc}
    179e:	bf00      	nop
    17a0:	40000800 	.word	0x40000800
    17a4:	00000c17 	.word	0x00000c17
    17a8:	00000c57 	.word	0x00000c57
    17ac:	00000e37 	.word	0x00000e37

000017b0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <QSPI_N25Q256_init+0x18>)
    17b6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    17b8:	4904      	ldr	r1, [pc, #16]	; (17cc <QSPI_N25Q256_init+0x1c>)
    17ba:	4805      	ldr	r0, [pc, #20]	; (17d0 <QSPI_N25Q256_init+0x20>)
    17bc:	4b05      	ldr	r3, [pc, #20]	; (17d4 <QSPI_N25Q256_init+0x24>)
    17be:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    17c0:	4b05      	ldr	r3, [pc, #20]	; (17d8 <QSPI_N25Q256_init+0x28>)
    17c2:	4798      	blx	r3
}
    17c4:	bf00      	nop
    17c6:	bd80      	pop	{r7, pc}
    17c8:	00001785 	.word	0x00001785
    17cc:	42003400 	.word	0x42003400
    17d0:	20001580 	.word	0x20001580
    17d4:	00002889 	.word	0x00002889
    17d8:	000016a5 	.word	0x000016a5

000017dc <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    17dc:	b580      	push	{r7, lr}
    17de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    17e0:	4802      	ldr	r0, [pc, #8]	; (17ec <DATETIME_CLOCK_CLOCK_init+0x10>)
    17e2:	4b03      	ldr	r3, [pc, #12]	; (17f0 <DATETIME_CLOCK_CLOCK_init+0x14>)
    17e4:	4798      	blx	r3
}
    17e6:	bf00      	nop
    17e8:	bd80      	pop	{r7, pc}
    17ea:	bf00      	nop
    17ec:	40000800 	.word	0x40000800
    17f0:	00000c97 	.word	0x00000c97

000017f4 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    17f8:	4b03      	ldr	r3, [pc, #12]	; (1808 <DATETIME_CLOCK_init+0x14>)
    17fa:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    17fc:	4903      	ldr	r1, [pc, #12]	; (180c <DATETIME_CLOCK_init+0x18>)
    17fe:	4804      	ldr	r0, [pc, #16]	; (1810 <DATETIME_CLOCK_init+0x1c>)
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <DATETIME_CLOCK_init+0x20>)
    1802:	4798      	blx	r3
}
    1804:	bf00      	nop
    1806:	bd80      	pop	{r7, pc}
    1808:	000017dd 	.word	0x000017dd
    180c:	40002400 	.word	0x40002400
    1810:	200016c8 	.word	0x200016c8
    1814:	000021a1 	.word	0x000021a1

00001818 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    181c:	2101      	movs	r1, #1
    181e:	2010      	movs	r0, #16
    1820:	4b07      	ldr	r3, [pc, #28]	; (1840 <I2C_HEATERS_PORT_init+0x28>)
    1822:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1824:	4907      	ldr	r1, [pc, #28]	; (1844 <I2C_HEATERS_PORT_init+0x2c>)
    1826:	2010      	movs	r0, #16
    1828:	4b07      	ldr	r3, [pc, #28]	; (1848 <I2C_HEATERS_PORT_init+0x30>)
    182a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    182c:	2101      	movs	r1, #1
    182e:	2011      	movs	r0, #17
    1830:	4b03      	ldr	r3, [pc, #12]	; (1840 <I2C_HEATERS_PORT_init+0x28>)
    1832:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1834:	4905      	ldr	r1, [pc, #20]	; (184c <I2C_HEATERS_PORT_init+0x34>)
    1836:	2011      	movs	r0, #17
    1838:	4b03      	ldr	r3, [pc, #12]	; (1848 <I2C_HEATERS_PORT_init+0x30>)
    183a:	4798      	blx	r3
}
    183c:	bf00      	nop
    183e:	bd80      	pop	{r7, pc}
    1840:	000013f1 	.word	0x000013f1
    1844:	00100002 	.word	0x00100002
    1848:	00001425 	.word	0x00001425
    184c:	00110002 	.word	0x00110002

00001850 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1850:	b580      	push	{r7, lr}
    1852:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1854:	2242      	movs	r2, #66	; 0x42
    1856:	2108      	movs	r1, #8
    1858:	4806      	ldr	r0, [pc, #24]	; (1874 <I2C_HEATERS_CLOCK_init+0x24>)
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <I2C_HEATERS_CLOCK_init+0x28>)
    185c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    185e:	224a      	movs	r2, #74	; 0x4a
    1860:	2103      	movs	r1, #3
    1862:	4804      	ldr	r0, [pc, #16]	; (1874 <I2C_HEATERS_CLOCK_init+0x24>)
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <I2C_HEATERS_CLOCK_init+0x28>)
    1866:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1868:	4804      	ldr	r0, [pc, #16]	; (187c <I2C_HEATERS_CLOCK_init+0x2c>)
    186a:	4b05      	ldr	r3, [pc, #20]	; (1880 <I2C_HEATERS_CLOCK_init+0x30>)
    186c:	4798      	blx	r3
}
    186e:	bf00      	nop
    1870:	bd80      	pop	{r7, pc}
    1872:	bf00      	nop
    1874:	40001c00 	.word	0x40001c00
    1878:	00000bd1 	.word	0x00000bd1
    187c:	40000800 	.word	0x40000800
    1880:	00000cd7 	.word	0x00000cd7

00001884 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1888:	4b04      	ldr	r3, [pc, #16]	; (189c <I2C_HEATERS_init+0x18>)
    188a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    188c:	4904      	ldr	r1, [pc, #16]	; (18a0 <I2C_HEATERS_init+0x1c>)
    188e:	4805      	ldr	r0, [pc, #20]	; (18a4 <I2C_HEATERS_init+0x20>)
    1890:	4b05      	ldr	r3, [pc, #20]	; (18a8 <I2C_HEATERS_init+0x24>)
    1892:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1894:	4b05      	ldr	r3, [pc, #20]	; (18ac <I2C_HEATERS_init+0x28>)
    1896:	4798      	blx	r3
}
    1898:	bf00      	nop
    189a:	bd80      	pop	{r7, pc}
    189c:	00001851 	.word	0x00001851
    18a0:	40003400 	.word	0x40003400
    18a4:	20001620 	.word	0x20001620
    18a8:	0000268d 	.word	0x0000268d
    18ac:	00001819 	.word	0x00001819

000018b0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    18b0:	b580      	push	{r7, lr}
    18b2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    18b4:	2100      	movs	r1, #0
    18b6:	203b      	movs	r0, #59	; 0x3b
    18b8:	4b11      	ldr	r3, [pc, #68]	; (1900 <SPI_TEMP_PORT_init+0x50>)
    18ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    18bc:	2102      	movs	r1, #2
    18be:	203b      	movs	r0, #59	; 0x3b
    18c0:	4b10      	ldr	r3, [pc, #64]	; (1904 <SPI_TEMP_PORT_init+0x54>)
    18c2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    18c4:	4910      	ldr	r1, [pc, #64]	; (1908 <SPI_TEMP_PORT_init+0x58>)
    18c6:	203b      	movs	r0, #59	; 0x3b
    18c8:	4b10      	ldr	r3, [pc, #64]	; (190c <SPI_TEMP_PORT_init+0x5c>)
    18ca:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    18cc:	2100      	movs	r1, #0
    18ce:	203a      	movs	r0, #58	; 0x3a
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <SPI_TEMP_PORT_init+0x50>)
    18d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    18d4:	2102      	movs	r1, #2
    18d6:	203a      	movs	r0, #58	; 0x3a
    18d8:	4b0a      	ldr	r3, [pc, #40]	; (1904 <SPI_TEMP_PORT_init+0x54>)
    18da:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    18dc:	490c      	ldr	r1, [pc, #48]	; (1910 <SPI_TEMP_PORT_init+0x60>)
    18de:	203a      	movs	r0, #58	; 0x3a
    18e0:	4b0a      	ldr	r3, [pc, #40]	; (190c <SPI_TEMP_PORT_init+0x5c>)
    18e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    18e4:	2101      	movs	r1, #1
    18e6:	203c      	movs	r0, #60	; 0x3c
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <SPI_TEMP_PORT_init+0x54>)
    18ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    18ec:	2100      	movs	r1, #0
    18ee:	203c      	movs	r0, #60	; 0x3c
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <SPI_TEMP_PORT_init+0x64>)
    18f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    18f4:	4908      	ldr	r1, [pc, #32]	; (1918 <SPI_TEMP_PORT_init+0x68>)
    18f6:	203c      	movs	r0, #60	; 0x3c
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <SPI_TEMP_PORT_init+0x5c>)
    18fa:	4798      	blx	r3
}
    18fc:	bf00      	nop
    18fe:	bd80      	pop	{r7, pc}
    1900:	0000147d 	.word	0x0000147d
    1904:	00001445 	.word	0x00001445
    1908:	003b0003 	.word	0x003b0003
    190c:	00001425 	.word	0x00001425
    1910:	003a0003 	.word	0x003a0003
    1914:	000013f1 	.word	0x000013f1
    1918:	003c0003 	.word	0x003c0003

0000191c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    191c:	b580      	push	{r7, lr}
    191e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1920:	2245      	movs	r2, #69	; 0x45
    1922:	2122      	movs	r1, #34	; 0x22
    1924:	4806      	ldr	r0, [pc, #24]	; (1940 <SPI_TEMP_CLOCK_init+0x24>)
    1926:	4b07      	ldr	r3, [pc, #28]	; (1944 <SPI_TEMP_CLOCK_init+0x28>)
    1928:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    192a:	224a      	movs	r2, #74	; 0x4a
    192c:	2103      	movs	r1, #3
    192e:	4804      	ldr	r0, [pc, #16]	; (1940 <SPI_TEMP_CLOCK_init+0x24>)
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <SPI_TEMP_CLOCK_init+0x28>)
    1932:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1934:	4804      	ldr	r0, [pc, #16]	; (1948 <SPI_TEMP_CLOCK_init+0x2c>)
    1936:	4b05      	ldr	r3, [pc, #20]	; (194c <SPI_TEMP_CLOCK_init+0x30>)
    1938:	4798      	blx	r3
}
    193a:	bf00      	nop
    193c:	bd80      	pop	{r7, pc}
    193e:	bf00      	nop
    1940:	40001c00 	.word	0x40001c00
    1944:	00000bd1 	.word	0x00000bd1
    1948:	40000800 	.word	0x40000800
    194c:	00000e57 	.word	0x00000e57

00001950 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1950:	b580      	push	{r7, lr}
    1952:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1954:	4b05      	ldr	r3, [pc, #20]	; (196c <SPI_TEMP_init+0x1c>)
    1956:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1958:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    195c:	4804      	ldr	r0, [pc, #16]	; (1970 <SPI_TEMP_init+0x20>)
    195e:	4b05      	ldr	r3, [pc, #20]	; (1974 <SPI_TEMP_init+0x24>)
    1960:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1962:	4b05      	ldr	r3, [pc, #20]	; (1978 <SPI_TEMP_init+0x28>)
    1964:	4798      	blx	r3
}
    1966:	bf00      	nop
    1968:	bd80      	pop	{r7, pc}
    196a:	bf00      	nop
    196c:	0000191d 	.word	0x0000191d
    1970:	20001528 	.word	0x20001528
    1974:	00002999 	.word	0x00002999
    1978:	000018b1 	.word	0x000018b1

0000197c <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    197c:	b580      	push	{r7, lr}
    197e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1980:	2100      	movs	r1, #0
    1982:	2017      	movs	r0, #23
    1984:	4b07      	ldr	r3, [pc, #28]	; (19a4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1986:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1988:	4907      	ldr	r1, [pc, #28]	; (19a8 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    198a:	2017      	movs	r0, #23
    198c:	4b07      	ldr	r3, [pc, #28]	; (19ac <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    198e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1990:	2100      	movs	r1, #0
    1992:	2016      	movs	r0, #22
    1994:	4b03      	ldr	r3, [pc, #12]	; (19a4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1996:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1998:	4905      	ldr	r1, [pc, #20]	; (19b0 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    199a:	2016      	movs	r0, #22
    199c:	4b03      	ldr	r3, [pc, #12]	; (19ac <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    199e:	4798      	blx	r3
}
    19a0:	bf00      	nop
    19a2:	bd80      	pop	{r7, pc}
    19a4:	000013f1 	.word	0x000013f1
    19a8:	00170003 	.word	0x00170003
    19ac:	00001425 	.word	0x00001425
    19b0:	00160003 	.word	0x00160003

000019b4 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19b8:	2244      	movs	r2, #68	; 0x44
    19ba:	2123      	movs	r1, #35	; 0x23
    19bc:	4806      	ldr	r0, [pc, #24]	; (19d8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    19be:	4b07      	ldr	r3, [pc, #28]	; (19dc <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    19c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19c2:	224a      	movs	r2, #74	; 0x4a
    19c4:	2103      	movs	r1, #3
    19c6:	4804      	ldr	r0, [pc, #16]	; (19d8 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    19ca:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    19cc:	4804      	ldr	r0, [pc, #16]	; (19e0 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    19d0:	4798      	blx	r3
}
    19d2:	bf00      	nop
    19d4:	bd80      	pop	{r7, pc}
    19d6:	bf00      	nop
    19d8:	40001c00 	.word	0x40001c00
    19dc:	00000bd1 	.word	0x00000bd1
    19e0:	40000800 	.word	0x40000800
    19e4:	00000e77 	.word	0x00000e77

000019e8 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    19ec:	4b04      	ldr	r3, [pc, #16]	; (1a00 <I2C_FLAPPER_VALVE_init+0x18>)
    19ee:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    19f0:	4904      	ldr	r1, [pc, #16]	; (1a04 <I2C_FLAPPER_VALVE_init+0x1c>)
    19f2:	4805      	ldr	r0, [pc, #20]	; (1a08 <I2C_FLAPPER_VALVE_init+0x20>)
    19f4:	4b05      	ldr	r3, [pc, #20]	; (1a0c <I2C_FLAPPER_VALVE_init+0x24>)
    19f6:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    19f8:	4b05      	ldr	r3, [pc, #20]	; (1a10 <I2C_FLAPPER_VALVE_init+0x28>)
    19fa:	4798      	blx	r3
}
    19fc:	bf00      	nop
    19fe:	bd80      	pop	{r7, pc}
    1a00:	000019b5 	.word	0x000019b5
    1a04:	43000400 	.word	0x43000400
    1a08:	200015c4 	.word	0x200015c4
    1a0c:	0000268d 	.word	0x0000268d
    1a10:	0000197d 	.word	0x0000197d

00001a14 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1a14:	b580      	push	{r7, lr}
    1a16:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1a18:	2100      	movs	r1, #0
    1a1a:	2044      	movs	r0, #68	; 0x44
    1a1c:	4b11      	ldr	r3, [pc, #68]	; (1a64 <SPI_HI3593_PORT_init+0x50>)
    1a1e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1a20:	2102      	movs	r1, #2
    1a22:	2044      	movs	r0, #68	; 0x44
    1a24:	4b10      	ldr	r3, [pc, #64]	; (1a68 <SPI_HI3593_PORT_init+0x54>)
    1a26:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1a28:	4910      	ldr	r1, [pc, #64]	; (1a6c <SPI_HI3593_PORT_init+0x58>)
    1a2a:	2044      	movs	r0, #68	; 0x44
    1a2c:	4b10      	ldr	r3, [pc, #64]	; (1a70 <SPI_HI3593_PORT_init+0x5c>)
    1a2e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1a30:	2100      	movs	r1, #0
    1a32:	2045      	movs	r0, #69	; 0x45
    1a34:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <SPI_HI3593_PORT_init+0x50>)
    1a36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1a38:	2102      	movs	r1, #2
    1a3a:	2045      	movs	r0, #69	; 0x45
    1a3c:	4b0a      	ldr	r3, [pc, #40]	; (1a68 <SPI_HI3593_PORT_init+0x54>)
    1a3e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1a40:	490c      	ldr	r1, [pc, #48]	; (1a74 <SPI_HI3593_PORT_init+0x60>)
    1a42:	2045      	movs	r0, #69	; 0x45
    1a44:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <SPI_HI3593_PORT_init+0x5c>)
    1a46:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1a48:	2101      	movs	r1, #1
    1a4a:	2047      	movs	r0, #71	; 0x47
    1a4c:	4b06      	ldr	r3, [pc, #24]	; (1a68 <SPI_HI3593_PORT_init+0x54>)
    1a4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1a50:	2100      	movs	r1, #0
    1a52:	2047      	movs	r0, #71	; 0x47
    1a54:	4b08      	ldr	r3, [pc, #32]	; (1a78 <SPI_HI3593_PORT_init+0x64>)
    1a56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1a58:	4908      	ldr	r1, [pc, #32]	; (1a7c <SPI_HI3593_PORT_init+0x68>)
    1a5a:	2047      	movs	r0, #71	; 0x47
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <SPI_HI3593_PORT_init+0x5c>)
    1a5e:	4798      	blx	r3
}
    1a60:	bf00      	nop
    1a62:	bd80      	pop	{r7, pc}
    1a64:	0000147d 	.word	0x0000147d
    1a68:	00001445 	.word	0x00001445
    1a6c:	00440002 	.word	0x00440002
    1a70:	00001425 	.word	0x00001425
    1a74:	00450002 	.word	0x00450002
    1a78:	000013f1 	.word	0x000013f1
    1a7c:	00470002 	.word	0x00470002

00001a80 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a84:	2242      	movs	r2, #66	; 0x42
    1a86:	2124      	movs	r1, #36	; 0x24
    1a88:	4806      	ldr	r0, [pc, #24]	; (1aa4 <SPI_HI3593_CLOCK_init+0x24>)
    1a8a:	4b07      	ldr	r3, [pc, #28]	; (1aa8 <SPI_HI3593_CLOCK_init+0x28>)
    1a8c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a8e:	224a      	movs	r2, #74	; 0x4a
    1a90:	2103      	movs	r1, #3
    1a92:	4804      	ldr	r0, [pc, #16]	; (1aa4 <SPI_HI3593_CLOCK_init+0x24>)
    1a94:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <SPI_HI3593_CLOCK_init+0x28>)
    1a96:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1a98:	4804      	ldr	r0, [pc, #16]	; (1aac <SPI_HI3593_CLOCK_init+0x2c>)
    1a9a:	4b05      	ldr	r3, [pc, #20]	; (1ab0 <SPI_HI3593_CLOCK_init+0x30>)
    1a9c:	4798      	blx	r3
}
    1a9e:	bf00      	nop
    1aa0:	bd80      	pop	{r7, pc}
    1aa2:	bf00      	nop
    1aa4:	40001c00 	.word	0x40001c00
    1aa8:	00000bd1 	.word	0x00000bd1
    1aac:	40000800 	.word	0x40000800
    1ab0:	00000e97 	.word	0x00000e97

00001ab4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1ab8:	4b04      	ldr	r3, [pc, #16]	; (1acc <SPI_HI3593_init+0x18>)
    1aba:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1abc:	4904      	ldr	r1, [pc, #16]	; (1ad0 <SPI_HI3593_init+0x1c>)
    1abe:	4805      	ldr	r0, [pc, #20]	; (1ad4 <SPI_HI3593_init+0x20>)
    1ac0:	4b05      	ldr	r3, [pc, #20]	; (1ad8 <SPI_HI3593_init+0x24>)
    1ac2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1ac4:	4b05      	ldr	r3, [pc, #20]	; (1adc <SPI_HI3593_init+0x28>)
    1ac6:	4798      	blx	r3
}
    1ac8:	bf00      	nop
    1aca:	bd80      	pop	{r7, pc}
    1acc:	00001a81 	.word	0x00001a81
    1ad0:	43000800 	.word	0x43000800
    1ad4:	20001510 	.word	0x20001510
    1ad8:	00002999 	.word	0x00002999
    1adc:	00001a15 	.word	0x00001a15

00001ae0 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1ae4:	2100      	movs	r1, #0
    1ae6:	2068      	movs	r0, #104	; 0x68
    1ae8:	4b07      	ldr	r3, [pc, #28]	; (1b08 <I2C_FANS_PORT_init+0x28>)
    1aea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1aec:	4907      	ldr	r1, [pc, #28]	; (1b0c <I2C_FANS_PORT_init+0x2c>)
    1aee:	2068      	movs	r0, #104	; 0x68
    1af0:	4b07      	ldr	r3, [pc, #28]	; (1b10 <I2C_FANS_PORT_init+0x30>)
    1af2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1af4:	2100      	movs	r1, #0
    1af6:	2069      	movs	r0, #105	; 0x69
    1af8:	4b03      	ldr	r3, [pc, #12]	; (1b08 <I2C_FANS_PORT_init+0x28>)
    1afa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1afc:	4905      	ldr	r1, [pc, #20]	; (1b14 <I2C_FANS_PORT_init+0x34>)
    1afe:	2069      	movs	r0, #105	; 0x69
    1b00:	4b03      	ldr	r3, [pc, #12]	; (1b10 <I2C_FANS_PORT_init+0x30>)
    1b02:	4798      	blx	r3
}
    1b04:	bf00      	nop
    1b06:	bd80      	pop	{r7, pc}
    1b08:	000013f1 	.word	0x000013f1
    1b0c:	00680002 	.word	0x00680002
    1b10:	00001425 	.word	0x00001425
    1b14:	00690002 	.word	0x00690002

00001b18 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b1c:	2244      	movs	r2, #68	; 0x44
    1b1e:	2125      	movs	r1, #37	; 0x25
    1b20:	4806      	ldr	r0, [pc, #24]	; (1b3c <I2C_FANS_CLOCK_init+0x24>)
    1b22:	4b07      	ldr	r3, [pc, #28]	; (1b40 <I2C_FANS_CLOCK_init+0x28>)
    1b24:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b26:	224a      	movs	r2, #74	; 0x4a
    1b28:	2103      	movs	r1, #3
    1b2a:	4804      	ldr	r0, [pc, #16]	; (1b3c <I2C_FANS_CLOCK_init+0x24>)
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <I2C_FANS_CLOCK_init+0x28>)
    1b2e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1b30:	4804      	ldr	r0, [pc, #16]	; (1b44 <I2C_FANS_CLOCK_init+0x2c>)
    1b32:	4b05      	ldr	r3, [pc, #20]	; (1b48 <I2C_FANS_CLOCK_init+0x30>)
    1b34:	4798      	blx	r3
}
    1b36:	bf00      	nop
    1b38:	bd80      	pop	{r7, pc}
    1b3a:	bf00      	nop
    1b3c:	40001c00 	.word	0x40001c00
    1b40:	00000bd1 	.word	0x00000bd1
    1b44:	40000800 	.word	0x40000800
    1b48:	00000eb7 	.word	0x00000eb7

00001b4c <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1b50:	4b04      	ldr	r3, [pc, #16]	; (1b64 <I2C_FANS_init+0x18>)
    1b52:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1b54:	4904      	ldr	r1, [pc, #16]	; (1b68 <I2C_FANS_init+0x1c>)
    1b56:	4805      	ldr	r0, [pc, #20]	; (1b6c <I2C_FANS_init+0x20>)
    1b58:	4b05      	ldr	r3, [pc, #20]	; (1b70 <I2C_FANS_init+0x24>)
    1b5a:	4798      	blx	r3
	I2C_FANS_PORT_init();
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <I2C_FANS_init+0x28>)
    1b5e:	4798      	blx	r3
}
    1b60:	bf00      	nop
    1b62:	bd80      	pop	{r7, pc}
    1b64:	00001b19 	.word	0x00001b19
    1b68:	43000c00 	.word	0x43000c00
    1b6c:	20001540 	.word	0x20001540
    1b70:	0000268d 	.word	0x0000268d
    1b74:	00001ae1 	.word	0x00001ae1

00001b78 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1b7c:	4808      	ldr	r0, [pc, #32]	; (1ba0 <TIMER_USB_init+0x28>)
    1b7e:	4b09      	ldr	r3, [pc, #36]	; (1ba4 <TIMER_USB_init+0x2c>)
    1b80:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b82:	2243      	movs	r2, #67	; 0x43
    1b84:	2109      	movs	r1, #9
    1b86:	4808      	ldr	r0, [pc, #32]	; (1ba8 <TIMER_USB_init+0x30>)
    1b88:	4b08      	ldr	r3, [pc, #32]	; (1bac <TIMER_USB_init+0x34>)
    1b8a:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1b8c:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <TIMER_USB_init+0x38>)
    1b8e:	4798      	blx	r3
    1b90:	4603      	mov	r3, r0
    1b92:	461a      	mov	r2, r3
    1b94:	4907      	ldr	r1, [pc, #28]	; (1bb4 <TIMER_USB_init+0x3c>)
    1b96:	4808      	ldr	r0, [pc, #32]	; (1bb8 <TIMER_USB_init+0x40>)
    1b98:	4b08      	ldr	r3, [pc, #32]	; (1bbc <TIMER_USB_init+0x44>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bf00      	nop
    1b9e:	bd80      	pop	{r7, pc}
    1ba0:	40000800 	.word	0x40000800
    1ba4:	00000cf7 	.word	0x00000cf7
    1ba8:	40001c00 	.word	0x40001c00
    1bac:	00000bd1 	.word	0x00000bd1
    1bb0:	000083b5 	.word	0x000083b5
    1bb4:	40003800 	.word	0x40003800
    1bb8:	20001688 	.word	0x20001688
    1bbc:	00002b69 	.word	0x00002b69

00001bc0 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1bc4:	4808      	ldr	r0, [pc, #32]	; (1be8 <TIMER_ARINC_init+0x28>)
    1bc6:	4b09      	ldr	r3, [pc, #36]	; (1bec <TIMER_ARINC_init+0x2c>)
    1bc8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bca:	2244      	movs	r2, #68	; 0x44
    1bcc:	211a      	movs	r1, #26
    1bce:	4808      	ldr	r0, [pc, #32]	; (1bf0 <TIMER_ARINC_init+0x30>)
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <TIMER_ARINC_init+0x34>)
    1bd2:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <TIMER_ARINC_init+0x38>)
    1bd6:	4798      	blx	r3
    1bd8:	4603      	mov	r3, r0
    1bda:	461a      	mov	r2, r3
    1bdc:	4907      	ldr	r1, [pc, #28]	; (1bfc <TIMER_ARINC_init+0x3c>)
    1bde:	4808      	ldr	r0, [pc, #32]	; (1c00 <TIMER_ARINC_init+0x40>)
    1be0:	4b08      	ldr	r3, [pc, #32]	; (1c04 <TIMER_ARINC_init+0x44>)
    1be2:	4798      	blx	r3
}
    1be4:	bf00      	nop
    1be6:	bd80      	pop	{r7, pc}
    1be8:	40000800 	.word	0x40000800
    1bec:	00000db7 	.word	0x00000db7
    1bf0:	40001c00 	.word	0x40001c00
    1bf4:	00000bd1 	.word	0x00000bd1
    1bf8:	000083b5 	.word	0x000083b5
    1bfc:	4101a000 	.word	0x4101a000
    1c00:	20001668 	.word	0x20001668
    1c04:	00002b69 	.word	0x00002b69

00001c08 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1c0c:	4808      	ldr	r0, [pc, #32]	; (1c30 <TIMER_MAINTENANCE_init+0x28>)
    1c0e:	4b09      	ldr	r3, [pc, #36]	; (1c34 <TIMER_MAINTENANCE_init+0x2c>)
    1c10:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c12:	2246      	movs	r2, #70	; 0x46
    1c14:	211e      	movs	r1, #30
    1c16:	4808      	ldr	r0, [pc, #32]	; (1c38 <TIMER_MAINTENANCE_init+0x30>)
    1c18:	4b08      	ldr	r3, [pc, #32]	; (1c3c <TIMER_MAINTENANCE_init+0x34>)
    1c1a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1c1c:	4b08      	ldr	r3, [pc, #32]	; (1c40 <TIMER_MAINTENANCE_init+0x38>)
    1c1e:	4798      	blx	r3
    1c20:	4603      	mov	r3, r0
    1c22:	461a      	mov	r2, r3
    1c24:	4907      	ldr	r1, [pc, #28]	; (1c44 <TIMER_MAINTENANCE_init+0x3c>)
    1c26:	4808      	ldr	r0, [pc, #32]	; (1c48 <TIMER_MAINTENANCE_init+0x40>)
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <TIMER_MAINTENANCE_init+0x44>)
    1c2a:	4798      	blx	r3
}
    1c2c:	bf00      	nop
    1c2e:	bd80      	pop	{r7, pc}
    1c30:	40000800 	.word	0x40000800
    1c34:	00000df7 	.word	0x00000df7
    1c38:	40001c00 	.word	0x40001c00
    1c3c:	00000bd1 	.word	0x00000bd1
    1c40:	000083b5 	.word	0x000083b5
    1c44:	42001400 	.word	0x42001400
    1c48:	20001560 	.word	0x20001560
    1c4c:	00002b69 	.word	0x00002b69

00001c50 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1c54:	4808      	ldr	r0, [pc, #32]	; (1c78 <TIMER_INTERFACE_init+0x28>)
    1c56:	4b09      	ldr	r3, [pc, #36]	; (1c7c <TIMER_INTERFACE_init+0x2c>)
    1c58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c5a:	2246      	movs	r2, #70	; 0x46
    1c5c:	211e      	movs	r1, #30
    1c5e:	4808      	ldr	r0, [pc, #32]	; (1c80 <TIMER_INTERFACE_init+0x30>)
    1c60:	4b08      	ldr	r3, [pc, #32]	; (1c84 <TIMER_INTERFACE_init+0x34>)
    1c62:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1c64:	4b08      	ldr	r3, [pc, #32]	; (1c88 <TIMER_INTERFACE_init+0x38>)
    1c66:	4798      	blx	r3
    1c68:	4603      	mov	r3, r0
    1c6a:	461a      	mov	r2, r3
    1c6c:	4907      	ldr	r1, [pc, #28]	; (1c8c <TIMER_INTERFACE_init+0x3c>)
    1c6e:	4808      	ldr	r0, [pc, #32]	; (1c90 <TIMER_INTERFACE_init+0x40>)
    1c70:	4b08      	ldr	r3, [pc, #32]	; (1c94 <TIMER_INTERFACE_init+0x44>)
    1c72:	4798      	blx	r3
}
    1c74:	bf00      	nop
    1c76:	bd80      	pop	{r7, pc}
    1c78:	40000800 	.word	0x40000800
    1c7c:	00000e17 	.word	0x00000e17
    1c80:	40001c00 	.word	0x40001c00
    1c84:	00000bd1 	.word	0x00000bd1
    1c88:	000083b5 	.word	0x000083b5
    1c8c:	42001800 	.word	0x42001800
    1c90:	200015a4 	.word	0x200015a4
    1c94:	00002b69 	.word	0x00002b69

00001c98 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1c9c:	4808      	ldr	r0, [pc, #32]	; (1cc0 <TIMER_EVENT_init+0x28>)
    1c9e:	4b09      	ldr	r3, [pc, #36]	; (1cc4 <TIMER_EVENT_init+0x2c>)
    1ca0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ca2:	2246      	movs	r2, #70	; 0x46
    1ca4:	2127      	movs	r1, #39	; 0x27
    1ca6:	4808      	ldr	r0, [pc, #32]	; (1cc8 <TIMER_EVENT_init+0x30>)
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <TIMER_EVENT_init+0x34>)
    1caa:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1cac:	4b08      	ldr	r3, [pc, #32]	; (1cd0 <TIMER_EVENT_init+0x38>)
    1cae:	4798      	blx	r3
    1cb0:	4603      	mov	r3, r0
    1cb2:	461a      	mov	r2, r3
    1cb4:	4907      	ldr	r1, [pc, #28]	; (1cd4 <TIMER_EVENT_init+0x3c>)
    1cb6:	4808      	ldr	r0, [pc, #32]	; (1cd8 <TIMER_EVENT_init+0x40>)
    1cb8:	4b08      	ldr	r3, [pc, #32]	; (1cdc <TIMER_EVENT_init+0x44>)
    1cba:	4798      	blx	r3
}
    1cbc:	bf00      	nop
    1cbe:	bd80      	pop	{r7, pc}
    1cc0:	40000800 	.word	0x40000800
    1cc4:	00000ed7 	.word	0x00000ed7
    1cc8:	40001c00 	.word	0x40001c00
    1ccc:	00000bd1 	.word	0x00000bd1
    1cd0:	000083b5 	.word	0x000083b5
    1cd4:	43001400 	.word	0x43001400
    1cd8:	20001584 	.word	0x20001584
    1cdc:	00002b69 	.word	0x00002b69

00001ce0 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1ce0:	b480      	push	{r7}
    1ce2:	af00      	add	r7, sp, #0
}
    1ce4:	bf00      	nop
    1ce6:	46bd      	mov	sp, r7
    1ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cec:	4770      	bx	lr
	...

00001cf0 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1cf4:	4804      	ldr	r0, [pc, #16]	; (1d08 <LIVE_PULSE_CLOCK_init+0x18>)
    1cf6:	4b05      	ldr	r3, [pc, #20]	; (1d0c <LIVE_PULSE_CLOCK_init+0x1c>)
    1cf8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cfa:	2240      	movs	r2, #64	; 0x40
    1cfc:	2127      	movs	r1, #39	; 0x27
    1cfe:	4804      	ldr	r0, [pc, #16]	; (1d10 <LIVE_PULSE_CLOCK_init+0x20>)
    1d00:	4b04      	ldr	r3, [pc, #16]	; (1d14 <LIVE_PULSE_CLOCK_init+0x24>)
    1d02:	4798      	blx	r3
}
    1d04:	bf00      	nop
    1d06:	bd80      	pop	{r7, pc}
    1d08:	40000800 	.word	0x40000800
    1d0c:	00000ef7 	.word	0x00000ef7
    1d10:	40001c00 	.word	0x40001c00
    1d14:	00000bd1 	.word	0x00000bd1

00001d18 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1d1c:	4b06      	ldr	r3, [pc, #24]	; (1d38 <LIVE_PULSE_init+0x20>)
    1d1e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1d20:	4b06      	ldr	r3, [pc, #24]	; (1d3c <LIVE_PULSE_init+0x24>)
    1d22:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1d24:	4b06      	ldr	r3, [pc, #24]	; (1d40 <LIVE_PULSE_init+0x28>)
    1d26:	4798      	blx	r3
    1d28:	4603      	mov	r3, r0
    1d2a:	461a      	mov	r2, r3
    1d2c:	4905      	ldr	r1, [pc, #20]	; (1d44 <LIVE_PULSE_init+0x2c>)
    1d2e:	4806      	ldr	r0, [pc, #24]	; (1d48 <LIVE_PULSE_init+0x30>)
    1d30:	4b06      	ldr	r3, [pc, #24]	; (1d4c <LIVE_PULSE_init+0x34>)
    1d32:	4798      	blx	r3
}
    1d34:	bf00      	nop
    1d36:	bd80      	pop	{r7, pc}
    1d38:	00001cf1 	.word	0x00001cf1
    1d3c:	00001ce1 	.word	0x00001ce1
    1d40:	000083c9 	.word	0x000083c9
    1d44:	43001800 	.word	0x43001800
    1d48:	200015e4 	.word	0x200015e4
    1d4c:	00002789 	.word	0x00002789

00001d50 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1d54:	4804      	ldr	r0, [pc, #16]	; (1d68 <TIMER_HVAC_CLOCK_init+0x18>)
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <TIMER_HVAC_CLOCK_init+0x1c>)
    1d58:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d5a:	2244      	movs	r2, #68	; 0x44
    1d5c:	2119      	movs	r1, #25
    1d5e:	4804      	ldr	r0, [pc, #16]	; (1d70 <TIMER_HVAC_CLOCK_init+0x20>)
    1d60:	4b04      	ldr	r3, [pc, #16]	; (1d74 <TIMER_HVAC_CLOCK_init+0x24>)
    1d62:	4798      	blx	r3
}
    1d64:	bf00      	nop
    1d66:	bd80      	pop	{r7, pc}
    1d68:	40000800 	.word	0x40000800
    1d6c:	00000d77 	.word	0x00000d77
    1d70:	40001c00 	.word	0x40001c00
    1d74:	00000bd1 	.word	0x00000bd1

00001d78 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1d7c:	4b05      	ldr	r3, [pc, #20]	; (1d94 <TIMER_HVAC_init+0x1c>)
    1d7e:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <TIMER_HVAC_init+0x20>)
    1d82:	4798      	blx	r3
    1d84:	4603      	mov	r3, r0
    1d86:	461a      	mov	r2, r3
    1d88:	4904      	ldr	r1, [pc, #16]	; (1d9c <TIMER_HVAC_init+0x24>)
    1d8a:	4805      	ldr	r0, [pc, #20]	; (1da0 <TIMER_HVAC_init+0x28>)
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <TIMER_HVAC_init+0x2c>)
    1d8e:	4798      	blx	r3
}
    1d90:	bf00      	nop
    1d92:	bd80      	pop	{r7, pc}
    1d94:	00001d51 	.word	0x00001d51
    1d98:	00007759 	.word	0x00007759
    1d9c:	41016000 	.word	0x41016000
    1da0:	200016a8 	.word	0x200016a8
    1da4:	00002b69 	.word	0x00002b69

00001da8 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1dac:	4804      	ldr	r0, [pc, #16]	; (1dc0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1db0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1db2:	2244      	movs	r2, #68	; 0x44
    1db4:	2119      	movs	r1, #25
    1db6:	4804      	ldr	r0, [pc, #16]	; (1dc8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1db8:	4b04      	ldr	r3, [pc, #16]	; (1dcc <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1dba:	4798      	blx	r3
}
    1dbc:	bf00      	nop
    1dbe:	bd80      	pop	{r7, pc}
    1dc0:	40000800 	.word	0x40000800
    1dc4:	00000d97 	.word	0x00000d97
    1dc8:	40001c00 	.word	0x40001c00
    1dcc:	00000bd1 	.word	0x00000bd1

00001dd0 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1dd4:	4b05      	ldr	r3, [pc, #20]	; (1dec <TIMER_TEMPERATURES_init+0x1c>)
    1dd6:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1dd8:	4b05      	ldr	r3, [pc, #20]	; (1df0 <TIMER_TEMPERATURES_init+0x20>)
    1dda:	4798      	blx	r3
    1ddc:	4603      	mov	r3, r0
    1dde:	461a      	mov	r2, r3
    1de0:	4904      	ldr	r1, [pc, #16]	; (1df4 <TIMER_TEMPERATURES_init+0x24>)
    1de2:	4805      	ldr	r0, [pc, #20]	; (1df8 <TIMER_TEMPERATURES_init+0x28>)
    1de4:	4b05      	ldr	r3, [pc, #20]	; (1dfc <TIMER_TEMPERATURES_init+0x2c>)
    1de6:	4798      	blx	r3
}
    1de8:	bf00      	nop
    1dea:	bd80      	pop	{r7, pc}
    1dec:	00001da9 	.word	0x00001da9
    1df0:	00007759 	.word	0x00007759
    1df4:	41018000 	.word	0x41018000
    1df8:	200014f0 	.word	0x200014f0
    1dfc:	00002b69 	.word	0x00002b69

00001e00 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1e04:	4804      	ldr	r0, [pc, #16]	; (1e18 <TIMER_CCU_CLOCK_init+0x18>)
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <TIMER_CCU_CLOCK_init+0x1c>)
    1e08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e0a:	2240      	movs	r2, #64	; 0x40
    1e0c:	211d      	movs	r1, #29
    1e0e:	4804      	ldr	r0, [pc, #16]	; (1e20 <TIMER_CCU_CLOCK_init+0x20>)
    1e10:	4b04      	ldr	r3, [pc, #16]	; (1e24 <TIMER_CCU_CLOCK_init+0x24>)
    1e12:	4798      	blx	r3
}
    1e14:	bf00      	nop
    1e16:	bd80      	pop	{r7, pc}
    1e18:	40000800 	.word	0x40000800
    1e1c:	00000dd7 	.word	0x00000dd7
    1e20:	40001c00 	.word	0x40001c00
    1e24:	00000bd1 	.word	0x00000bd1

00001e28 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    1e2c:	4b05      	ldr	r3, [pc, #20]	; (1e44 <TIMER_CCU_init+0x1c>)
    1e2e:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1e30:	4b05      	ldr	r3, [pc, #20]	; (1e48 <TIMER_CCU_init+0x20>)
    1e32:	4798      	blx	r3
    1e34:	4603      	mov	r3, r0
    1e36:	461a      	mov	r2, r3
    1e38:	4904      	ldr	r1, [pc, #16]	; (1e4c <TIMER_CCU_init+0x24>)
    1e3a:	4805      	ldr	r0, [pc, #20]	; (1e50 <TIMER_CCU_init+0x28>)
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <TIMER_CCU_init+0x2c>)
    1e3e:	4798      	blx	r3
}
    1e40:	bf00      	nop
    1e42:	bd80      	pop	{r7, pc}
    1e44:	00001e01 	.word	0x00001e01
    1e48:	00007759 	.word	0x00007759
    1e4c:	42000c00 	.word	0x42000c00
    1e50:	20001600 	.word	0x20001600
    1e54:	00002b69 	.word	0x00002b69

00001e58 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1e5c:	2102      	movs	r1, #2
    1e5e:	2018      	movs	r0, #24
    1e60:	4b0f      	ldr	r3, [pc, #60]	; (1ea0 <CDCUSB_PORT_init+0x48>)
    1e62:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1e64:	2100      	movs	r1, #0
    1e66:	2018      	movs	r0, #24
    1e68:	4b0e      	ldr	r3, [pc, #56]	; (1ea4 <CDCUSB_PORT_init+0x4c>)
    1e6a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1e6c:	2100      	movs	r1, #0
    1e6e:	2018      	movs	r0, #24
    1e70:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <CDCUSB_PORT_init+0x50>)
    1e72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1e74:	490d      	ldr	r1, [pc, #52]	; (1eac <CDCUSB_PORT_init+0x54>)
    1e76:	2018      	movs	r0, #24
    1e78:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <CDCUSB_PORT_init+0x58>)
    1e7a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1e7c:	2102      	movs	r1, #2
    1e7e:	2019      	movs	r0, #25
    1e80:	4b07      	ldr	r3, [pc, #28]	; (1ea0 <CDCUSB_PORT_init+0x48>)
    1e82:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1e84:	2100      	movs	r1, #0
    1e86:	2019      	movs	r0, #25
    1e88:	4b06      	ldr	r3, [pc, #24]	; (1ea4 <CDCUSB_PORT_init+0x4c>)
    1e8a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1e8c:	2100      	movs	r1, #0
    1e8e:	2019      	movs	r0, #25
    1e90:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <CDCUSB_PORT_init+0x50>)
    1e92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1e94:	4907      	ldr	r1, [pc, #28]	; (1eb4 <CDCUSB_PORT_init+0x5c>)
    1e96:	2019      	movs	r0, #25
    1e98:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <CDCUSB_PORT_init+0x58>)
    1e9a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1e9c:	bf00      	nop
    1e9e:	bd80      	pop	{r7, pc}
    1ea0:	00001445 	.word	0x00001445
    1ea4:	0000147d 	.word	0x0000147d
    1ea8:	000013f1 	.word	0x000013f1
    1eac:	00180007 	.word	0x00180007
    1eb0:	00001425 	.word	0x00001425
    1eb4:	00190007 	.word	0x00190007

00001eb8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1ebc:	2242      	movs	r2, #66	; 0x42
    1ebe:	210a      	movs	r1, #10
    1ec0:	4805      	ldr	r0, [pc, #20]	; (1ed8 <CDCUSB_CLOCK_init+0x20>)
    1ec2:	4b06      	ldr	r3, [pc, #24]	; (1edc <CDCUSB_CLOCK_init+0x24>)
    1ec4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1ec6:	4806      	ldr	r0, [pc, #24]	; (1ee0 <CDCUSB_CLOCK_init+0x28>)
    1ec8:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <CDCUSB_CLOCK_init+0x2c>)
    1eca:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1ecc:	4804      	ldr	r0, [pc, #16]	; (1ee0 <CDCUSB_CLOCK_init+0x28>)
    1ece:	4b06      	ldr	r3, [pc, #24]	; (1ee8 <CDCUSB_CLOCK_init+0x30>)
    1ed0:	4798      	blx	r3
}
    1ed2:	bf00      	nop
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	bf00      	nop
    1ed8:	40001c00 	.word	0x40001c00
    1edc:	00000bd1 	.word	0x00000bd1
    1ee0:	40000800 	.word	0x40000800
    1ee4:	00000bf7 	.word	0x00000bf7
    1ee8:	00000d17 	.word	0x00000d17

00001eec <CDCUSB_init>:

void CDCUSB_init(void)
{
    1eec:	b580      	push	{r7, lr}
    1eee:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1ef0:	4b03      	ldr	r3, [pc, #12]	; (1f00 <CDCUSB_init+0x14>)
    1ef2:	4798      	blx	r3
	usb_d_init();
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <CDCUSB_init+0x18>)
    1ef6:	4798      	blx	r3
	CDCUSB_PORT_init();
    1ef8:	4b03      	ldr	r3, [pc, #12]	; (1f08 <CDCUSB_init+0x1c>)
    1efa:	4798      	blx	r3
}
    1efc:	bf00      	nop
    1efe:	bd80      	pop	{r7, pc}
    1f00:	00001eb9 	.word	0x00001eb9
    1f04:	000033c5 	.word	0x000033c5
    1f08:	00001e59 	.word	0x00001e59

00001f0c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1f10:	4802      	ldr	r0, [pc, #8]	; (1f1c <WATCHDOG_CLOCK_init+0x10>)
    1f12:	4b03      	ldr	r3, [pc, #12]	; (1f20 <WATCHDOG_CLOCK_init+0x14>)
    1f14:	4798      	blx	r3
}
    1f16:	bf00      	nop
    1f18:	bd80      	pop	{r7, pc}
    1f1a:	bf00      	nop
    1f1c:	40000800 	.word	0x40000800
    1f20:	00000c77 	.word	0x00000c77

00001f24 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1f24:	b580      	push	{r7, lr}
    1f26:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1f28:	4b03      	ldr	r3, [pc, #12]	; (1f38 <WATCHDOG_init+0x14>)
    1f2a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1f2c:	4903      	ldr	r1, [pc, #12]	; (1f3c <WATCHDOG_init+0x18>)
    1f2e:	4804      	ldr	r0, [pc, #16]	; (1f40 <WATCHDOG_init+0x1c>)
    1f30:	4b04      	ldr	r3, [pc, #16]	; (1f44 <WATCHDOG_init+0x20>)
    1f32:	4798      	blx	r3
}
    1f34:	bf00      	nop
    1f36:	bd80      	pop	{r7, pc}
    1f38:	00001f0d 	.word	0x00001f0d
    1f3c:	40002000 	.word	0x40002000
    1f40:	200016e8 	.word	0x200016e8
    1f44:	000014c5 	.word	0x000014c5

00001f48 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1f4c:	4904      	ldr	r1, [pc, #16]	; (1f60 <CAN_CCU_PORT_init+0x18>)
    1f4e:	202d      	movs	r0, #45	; 0x2d
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <CAN_CCU_PORT_init+0x1c>)
    1f52:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1f54:	4904      	ldr	r1, [pc, #16]	; (1f68 <CAN_CCU_PORT_init+0x20>)
    1f56:	202c      	movs	r0, #44	; 0x2c
    1f58:	4b02      	ldr	r3, [pc, #8]	; (1f64 <CAN_CCU_PORT_init+0x1c>)
    1f5a:	4798      	blx	r3
}
    1f5c:	bf00      	nop
    1f5e:	bd80      	pop	{r7, pc}
    1f60:	002d0007 	.word	0x002d0007
    1f64:	00001425 	.word	0x00001425
    1f68:	002c0007 	.word	0x002c0007

00001f6c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1f70:	4807      	ldr	r0, [pc, #28]	; (1f90 <CAN_CCU_init+0x24>)
    1f72:	4b08      	ldr	r3, [pc, #32]	; (1f94 <CAN_CCU_init+0x28>)
    1f74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f76:	2249      	movs	r2, #73	; 0x49
    1f78:	211c      	movs	r1, #28
    1f7a:	4807      	ldr	r0, [pc, #28]	; (1f98 <CAN_CCU_init+0x2c>)
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <CAN_CCU_init+0x30>)
    1f7e:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1f80:	4907      	ldr	r1, [pc, #28]	; (1fa0 <CAN_CCU_init+0x34>)
    1f82:	4808      	ldr	r0, [pc, #32]	; (1fa4 <CAN_CCU_init+0x38>)
    1f84:	4b08      	ldr	r3, [pc, #32]	; (1fa8 <CAN_CCU_init+0x3c>)
    1f86:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1f88:	4b08      	ldr	r3, [pc, #32]	; (1fac <CAN_CCU_init+0x40>)
    1f8a:	4798      	blx	r3
}
    1f8c:	bf00      	nop
    1f8e:	bd80      	pop	{r7, pc}
    1f90:	40000800 	.word	0x40000800
    1f94:	00000c37 	.word	0x00000c37
    1f98:	40001c00 	.word	0x40001c00
    1f9c:	00000bd1 	.word	0x00000bd1
    1fa0:	42000400 	.word	0x42000400
    1fa4:	20001640 	.word	0x20001640
    1fa8:	00002211 	.word	0x00002211
    1fac:	00001f49 	.word	0x00001f49

00001fb0 <system_init>:

void system_init(void)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	af00      	add	r7, sp, #0
	init_mcu();
    1fb4:	4b5f      	ldr	r3, [pc, #380]	; (2134 <system_init+0x184>)
    1fb6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1fb8:	2100      	movs	r1, #0
    1fba:	2007      	movs	r0, #7
    1fbc:	4b5e      	ldr	r3, [pc, #376]	; (2138 <system_init+0x188>)
    1fbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1fc0:	2102      	movs	r1, #2
    1fc2:	2007      	movs	r0, #7
    1fc4:	4b5d      	ldr	r3, [pc, #372]	; (213c <system_init+0x18c>)
    1fc6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1fc8:	f04f 31ff 	mov.w	r1, #4294967295
    1fcc:	2007      	movs	r0, #7
    1fce:	4b5c      	ldr	r3, [pc, #368]	; (2140 <system_init+0x190>)
    1fd0:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1fd2:	2101      	movs	r1, #1
    1fd4:	200f      	movs	r0, #15
    1fd6:	4b58      	ldr	r3, [pc, #352]	; (2138 <system_init+0x188>)
    1fd8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1fda:	2102      	movs	r1, #2
    1fdc:	200f      	movs	r0, #15
    1fde:	4b57      	ldr	r3, [pc, #348]	; (213c <system_init+0x18c>)
    1fe0:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1fe2:	f04f 31ff 	mov.w	r1, #4294967295
    1fe6:	200f      	movs	r0, #15
    1fe8:	4b55      	ldr	r3, [pc, #340]	; (2140 <system_init+0x190>)
    1fea:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1fec:	2101      	movs	r1, #1
    1fee:	2013      	movs	r0, #19
    1ff0:	4b51      	ldr	r3, [pc, #324]	; (2138 <system_init+0x188>)
    1ff2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1ff4:	2102      	movs	r1, #2
    1ff6:	2013      	movs	r0, #19
    1ff8:	4b50      	ldr	r3, [pc, #320]	; (213c <system_init+0x18c>)
    1ffa:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1ffc:	f04f 31ff 	mov.w	r1, #4294967295
    2000:	2013      	movs	r0, #19
    2002:	4b4f      	ldr	r3, [pc, #316]	; (2140 <system_init+0x190>)
    2004:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2006:	2101      	movs	r1, #1
    2008:	201b      	movs	r0, #27
    200a:	4b4b      	ldr	r3, [pc, #300]	; (2138 <system_init+0x188>)
    200c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    200e:	2102      	movs	r1, #2
    2010:	201b      	movs	r0, #27
    2012:	4b4a      	ldr	r3, [pc, #296]	; (213c <system_init+0x18c>)
    2014:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2016:	f04f 31ff 	mov.w	r1, #4294967295
    201a:	201b      	movs	r0, #27
    201c:	4b48      	ldr	r3, [pc, #288]	; (2140 <system_init+0x190>)
    201e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2020:	2101      	movs	r1, #1
    2022:	2027      	movs	r0, #39	; 0x27
    2024:	4b44      	ldr	r3, [pc, #272]	; (2138 <system_init+0x188>)
    2026:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2028:	2102      	movs	r1, #2
    202a:	2027      	movs	r0, #39	; 0x27
    202c:	4b43      	ldr	r3, [pc, #268]	; (213c <system_init+0x18c>)
    202e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2030:	f04f 31ff 	mov.w	r1, #4294967295
    2034:	2027      	movs	r0, #39	; 0x27
    2036:	4b42      	ldr	r3, [pc, #264]	; (2140 <system_init+0x190>)
    2038:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    203a:	2101      	movs	r1, #1
    203c:	203d      	movs	r0, #61	; 0x3d
    203e:	4b3e      	ldr	r3, [pc, #248]	; (2138 <system_init+0x188>)
    2040:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2042:	2102      	movs	r1, #2
    2044:	203d      	movs	r0, #61	; 0x3d
    2046:	4b3d      	ldr	r3, [pc, #244]	; (213c <system_init+0x18c>)
    2048:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    204a:	f04f 31ff 	mov.w	r1, #4294967295
    204e:	203d      	movs	r0, #61	; 0x3d
    2050:	4b3b      	ldr	r3, [pc, #236]	; (2140 <system_init+0x190>)
    2052:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2054:	2101      	movs	r1, #1
    2056:	203f      	movs	r0, #63	; 0x3f
    2058:	4b38      	ldr	r3, [pc, #224]	; (213c <system_init+0x18c>)
    205a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    205c:	2101      	movs	r1, #1
    205e:	203f      	movs	r0, #63	; 0x3f
    2060:	4b38      	ldr	r3, [pc, #224]	; (2144 <system_init+0x194>)
    2062:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2064:	f04f 31ff 	mov.w	r1, #4294967295
    2068:	203f      	movs	r0, #63	; 0x3f
    206a:	4b35      	ldr	r3, [pc, #212]	; (2140 <system_init+0x190>)
    206c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    206e:	2100      	movs	r1, #0
    2070:	204d      	movs	r0, #77	; 0x4d
    2072:	4b31      	ldr	r3, [pc, #196]	; (2138 <system_init+0x188>)
    2074:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2076:	2102      	movs	r1, #2
    2078:	204d      	movs	r0, #77	; 0x4d
    207a:	4b30      	ldr	r3, [pc, #192]	; (213c <system_init+0x18c>)
    207c:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    207e:	f04f 31ff 	mov.w	r1, #4294967295
    2082:	204d      	movs	r0, #77	; 0x4d
    2084:	4b2e      	ldr	r3, [pc, #184]	; (2140 <system_init+0x190>)
    2086:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2088:	2101      	movs	r1, #1
    208a:	204e      	movs	r0, #78	; 0x4e
    208c:	4b2a      	ldr	r3, [pc, #168]	; (2138 <system_init+0x188>)
    208e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2090:	2102      	movs	r1, #2
    2092:	204e      	movs	r0, #78	; 0x4e
    2094:	4b29      	ldr	r3, [pc, #164]	; (213c <system_init+0x18c>)
    2096:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2098:	f04f 31ff 	mov.w	r1, #4294967295
    209c:	204e      	movs	r0, #78	; 0x4e
    209e:	4b28      	ldr	r3, [pc, #160]	; (2140 <system_init+0x190>)
    20a0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    20a2:	2100      	movs	r1, #0
    20a4:	204f      	movs	r0, #79	; 0x4f
    20a6:	4b24      	ldr	r3, [pc, #144]	; (2138 <system_init+0x188>)
    20a8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    20aa:	2102      	movs	r1, #2
    20ac:	204f      	movs	r0, #79	; 0x4f
    20ae:	4b23      	ldr	r3, [pc, #140]	; (213c <system_init+0x18c>)
    20b0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    20b2:	f04f 31ff 	mov.w	r1, #4294967295
    20b6:	204f      	movs	r0, #79	; 0x4f
    20b8:	4b21      	ldr	r3, [pc, #132]	; (2140 <system_init+0x190>)
    20ba:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    20bc:	2100      	movs	r1, #0
    20be:	2052      	movs	r0, #82	; 0x52
    20c0:	4b1d      	ldr	r3, [pc, #116]	; (2138 <system_init+0x188>)
    20c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    20c4:	2102      	movs	r1, #2
    20c6:	2052      	movs	r0, #82	; 0x52
    20c8:	4b1c      	ldr	r3, [pc, #112]	; (213c <system_init+0x18c>)
    20ca:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    20cc:	f04f 31ff 	mov.w	r1, #4294967295
    20d0:	2052      	movs	r0, #82	; 0x52
    20d2:	4b1b      	ldr	r3, [pc, #108]	; (2140 <system_init+0x190>)
    20d4:	4798      	blx	r3

	CRC_CALC_init();
    20d6:	4b1c      	ldr	r3, [pc, #112]	; (2148 <system_init+0x198>)
    20d8:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    20da:	4b1c      	ldr	r3, [pc, #112]	; (214c <system_init+0x19c>)
    20dc:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    20de:	4b1c      	ldr	r3, [pc, #112]	; (2150 <system_init+0x1a0>)
    20e0:	4798      	blx	r3

	QSPI_N25Q256_init();
    20e2:	4b1c      	ldr	r3, [pc, #112]	; (2154 <system_init+0x1a4>)
    20e4:	4798      	blx	r3

	DATETIME_CLOCK_init();
    20e6:	4b1c      	ldr	r3, [pc, #112]	; (2158 <system_init+0x1a8>)
    20e8:	4798      	blx	r3

	I2C_HEATERS_init();
    20ea:	4b1c      	ldr	r3, [pc, #112]	; (215c <system_init+0x1ac>)
    20ec:	4798      	blx	r3

	SPI_TEMP_init();
    20ee:	4b1c      	ldr	r3, [pc, #112]	; (2160 <system_init+0x1b0>)
    20f0:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    20f2:	4b1c      	ldr	r3, [pc, #112]	; (2164 <system_init+0x1b4>)
    20f4:	4798      	blx	r3

	SPI_HI3593_init();
    20f6:	4b1c      	ldr	r3, [pc, #112]	; (2168 <system_init+0x1b8>)
    20f8:	4798      	blx	r3

	I2C_FANS_init();
    20fa:	4b1c      	ldr	r3, [pc, #112]	; (216c <system_init+0x1bc>)
    20fc:	4798      	blx	r3

	TIMER_USB_init();
    20fe:	4b1c      	ldr	r3, [pc, #112]	; (2170 <system_init+0x1c0>)
    2100:	4798      	blx	r3
	TIMER_ARINC_init();
    2102:	4b1c      	ldr	r3, [pc, #112]	; (2174 <system_init+0x1c4>)
    2104:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2106:	4b1c      	ldr	r3, [pc, #112]	; (2178 <system_init+0x1c8>)
    2108:	4798      	blx	r3
	TIMER_INTERFACE_init();
    210a:	4b1c      	ldr	r3, [pc, #112]	; (217c <system_init+0x1cc>)
    210c:	4798      	blx	r3
	TIMER_EVENT_init();
    210e:	4b1c      	ldr	r3, [pc, #112]	; (2180 <system_init+0x1d0>)
    2110:	4798      	blx	r3
	LIVE_PULSE_init();
    2112:	4b1c      	ldr	r3, [pc, #112]	; (2184 <system_init+0x1d4>)
    2114:	4798      	blx	r3

	TIMER_HVAC_init();
    2116:	4b1c      	ldr	r3, [pc, #112]	; (2188 <system_init+0x1d8>)
    2118:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    211a:	4b1c      	ldr	r3, [pc, #112]	; (218c <system_init+0x1dc>)
    211c:	4798      	blx	r3

	TIMER_CCU_init();
    211e:	4b1c      	ldr	r3, [pc, #112]	; (2190 <system_init+0x1e0>)
    2120:	4798      	blx	r3

	CDCUSB_init();
    2122:	4b1c      	ldr	r3, [pc, #112]	; (2194 <system_init+0x1e4>)
    2124:	4798      	blx	r3

	WATCHDOG_init();
    2126:	4b1c      	ldr	r3, [pc, #112]	; (2198 <system_init+0x1e8>)
    2128:	4798      	blx	r3
	CAN_CCU_init();
    212a:	4b1c      	ldr	r3, [pc, #112]	; (219c <system_init+0x1ec>)
    212c:	4798      	blx	r3
}
    212e:	bf00      	nop
    2130:	bd80      	pop	{r7, pc}
    2132:	bf00      	nop
    2134:	000014b5 	.word	0x000014b5
    2138:	0000147d 	.word	0x0000147d
    213c:	00001445 	.word	0x00001445
    2140:	00001425 	.word	0x00001425
    2144:	000013f1 	.word	0x000013f1
    2148:	00001515 	.word	0x00001515
    214c:	00001541 	.word	0x00001541
    2150:	00001669 	.word	0x00001669
    2154:	000017b1 	.word	0x000017b1
    2158:	000017f5 	.word	0x000017f5
    215c:	00001885 	.word	0x00001885
    2160:	00001951 	.word	0x00001951
    2164:	000019e9 	.word	0x000019e9
    2168:	00001ab5 	.word	0x00001ab5
    216c:	00001b4d 	.word	0x00001b4d
    2170:	00001b79 	.word	0x00001b79
    2174:	00001bc1 	.word	0x00001bc1
    2178:	00001c09 	.word	0x00001c09
    217c:	00001c51 	.word	0x00001c51
    2180:	00001c99 	.word	0x00001c99
    2184:	00001d19 	.word	0x00001d19
    2188:	00001d79 	.word	0x00001d79
    218c:	00001dd1 	.word	0x00001dd1
    2190:	00001e29 	.word	0x00001e29
    2194:	00001eed 	.word	0x00001eed
    2198:	00001f25 	.word	0x00001f25
    219c:	00001f6d 	.word	0x00001f6d

000021a0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	b084      	sub	sp, #16
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
    21a8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    21aa:	2300      	movs	r3, #0
    21ac:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	2b00      	cmp	r3, #0
    21b2:	bf14      	ite	ne
    21b4:	2301      	movne	r3, #1
    21b6:	2300      	moveq	r3, #0
    21b8:	b2db      	uxtb	r3, r3
    21ba:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    21be:	4911      	ldr	r1, [pc, #68]	; (2204 <calendar_init+0x64>)
    21c0:	4618      	mov	r0, r3
    21c2:	4b11      	ldr	r3, [pc, #68]	; (2208 <calendar_init+0x68>)
    21c4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    21c6:	687b      	ldr	r3, [r7, #4]
    21c8:	681a      	ldr	r2, [r3, #0]
    21ca:	683b      	ldr	r3, [r7, #0]
    21cc:	429a      	cmp	r2, r3
    21ce:	d101      	bne.n	21d4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    21d0:	2300      	movs	r3, #0
    21d2:	e013      	b.n	21fc <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	681b      	ldr	r3, [r3, #0]
    21d8:	2b00      	cmp	r3, #0
    21da:	d002      	beq.n	21e2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    21dc:	f06f 0311 	mvn.w	r3, #17
    21e0:	e00c      	b.n	21fc <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	683a      	ldr	r2, [r7, #0]
    21e6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	4618      	mov	r0, r3
    21ec:	4b07      	ldr	r3, [pc, #28]	; (220c <calendar_init+0x6c>)
    21ee:	4798      	blx	r3
    21f0:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	f240 72b2 	movw	r2, #1970	; 0x7b2
    21f8:	619a      	str	r2, [r3, #24]

	return ret;
    21fa:	68fb      	ldr	r3, [r7, #12]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3710      	adds	r7, #16
    2200:	46bd      	mov	sp, r7
    2202:	bd80      	pop	{r7, pc}
    2204:	0000f024 	.word	0x0000f024
    2208:	0000396d 	.word	0x0000396d
    220c:	00005d29 	.word	0x00005d29

00002210 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    2210:	b580      	push	{r7, lr}
    2212:	b084      	sub	sp, #16
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
    2218:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2b00      	cmp	r3, #0
    221e:	d004      	beq.n	222a <can_async_init+0x1a>
    2220:	683b      	ldr	r3, [r7, #0]
    2222:	2b00      	cmp	r3, #0
    2224:	d001      	beq.n	222a <can_async_init+0x1a>
    2226:	2301      	movs	r3, #1
    2228:	e000      	b.n	222c <can_async_init+0x1c>
    222a:	2300      	movs	r3, #0
    222c:	f003 0301 	and.w	r3, r3, #1
    2230:	b2db      	uxtb	r3, r3
    2232:	2241      	movs	r2, #65	; 0x41
    2234:	490e      	ldr	r1, [pc, #56]	; (2270 <can_async_init+0x60>)
    2236:	4618      	mov	r0, r3
    2238:	4b0e      	ldr	r3, [pc, #56]	; (2274 <can_async_init+0x64>)
    223a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	6839      	ldr	r1, [r7, #0]
    2240:	4618      	mov	r0, r3
    2242:	4b0d      	ldr	r3, [pc, #52]	; (2278 <can_async_init+0x68>)
    2244:	4798      	blx	r3
    2246:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2248:	68fb      	ldr	r3, [r7, #12]
    224a:	2b00      	cmp	r3, #0
    224c:	d001      	beq.n	2252 <can_async_init+0x42>
		return rc;
    224e:	68fb      	ldr	r3, [r7, #12]
    2250:	e009      	b.n	2266 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	4a09      	ldr	r2, [pc, #36]	; (227c <can_async_init+0x6c>)
    2256:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	4a09      	ldr	r2, [pc, #36]	; (2280 <can_async_init+0x70>)
    225c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	4a08      	ldr	r2, [pc, #32]	; (2284 <can_async_init+0x74>)
    2262:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2264:	2300      	movs	r3, #0
}
    2266:	4618      	mov	r0, r3
    2268:	3710      	adds	r7, #16
    226a:	46bd      	mov	sp, r7
    226c:	bd80      	pop	{r7, pc}
    226e:	bf00      	nop
    2270:	0000f040 	.word	0x0000f040
    2274:	0000396d 	.word	0x0000396d
    2278:	00003ec9 	.word	0x00003ec9
    227c:	00002289 	.word	0x00002289
    2280:	000022ad 	.word	0x000022ad
    2284:	000022d1 	.word	0x000022d1

00002288 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2288:	b580      	push	{r7, lr}
    228a:	b084      	sub	sp, #16
    228c:	af00      	add	r7, sp, #0
    228e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	69db      	ldr	r3, [r3, #28]
    2298:	2b00      	cmp	r3, #0
    229a:	d003      	beq.n	22a4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    229c:	68fb      	ldr	r3, [r7, #12]
    229e:	69db      	ldr	r3, [r3, #28]
    22a0:	68f8      	ldr	r0, [r7, #12]
    22a2:	4798      	blx	r3
	}
}
    22a4:	bf00      	nop
    22a6:	3710      	adds	r7, #16
    22a8:	46bd      	mov	sp, r7
    22aa:	bd80      	pop	{r7, pc}

000022ac <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b084      	sub	sp, #16
    22b0:	af00      	add	r7, sp, #0
    22b2:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    22b8:	68fb      	ldr	r3, [r7, #12]
    22ba:	6a1b      	ldr	r3, [r3, #32]
    22bc:	2b00      	cmp	r3, #0
    22be:	d003      	beq.n	22c8 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	6a1b      	ldr	r3, [r3, #32]
    22c4:	68f8      	ldr	r0, [r7, #12]
    22c6:	4798      	blx	r3
	}
}
    22c8:	bf00      	nop
    22ca:	3710      	adds	r7, #16
    22cc:	46bd      	mov	sp, r7
    22ce:	bd80      	pop	{r7, pc}

000022d0 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b084      	sub	sp, #16
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
    22d8:	460b      	mov	r3, r1
    22da:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    22e0:	68fb      	ldr	r3, [r7, #12]
    22e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22e4:	2b00      	cmp	r3, #0
    22e6:	d005      	beq.n	22f4 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    22e8:	68fb      	ldr	r3, [r7, #12]
    22ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22ec:	78fa      	ldrb	r2, [r7, #3]
    22ee:	4611      	mov	r1, r2
    22f0:	68f8      	ldr	r0, [r7, #12]
    22f2:	4798      	blx	r3
	}
}
    22f4:	bf00      	nop
    22f6:	3710      	adds	r7, #16
    22f8:	46bd      	mov	sp, r7
    22fa:	bd80      	pop	{r7, pc}

000022fc <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    22fc:	b580      	push	{r7, lr}
    22fe:	b082      	sub	sp, #8
    2300:	af00      	add	r7, sp, #0
    2302:	6078      	str	r0, [r7, #4]
    2304:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	2b00      	cmp	r3, #0
    230a:	d004      	beq.n	2316 <crc_sync_init+0x1a>
    230c:	683b      	ldr	r3, [r7, #0]
    230e:	2b00      	cmp	r3, #0
    2310:	d001      	beq.n	2316 <crc_sync_init+0x1a>
    2312:	2301      	movs	r3, #1
    2314:	e000      	b.n	2318 <crc_sync_init+0x1c>
    2316:	2300      	movs	r3, #0
    2318:	f003 0301 	and.w	r3, r3, #1
    231c:	b2db      	uxtb	r3, r3
    231e:	222b      	movs	r2, #43	; 0x2b
    2320:	4906      	ldr	r1, [pc, #24]	; (233c <crc_sync_init+0x40>)
    2322:	4618      	mov	r0, r3
    2324:	4b06      	ldr	r3, [pc, #24]	; (2340 <crc_sync_init+0x44>)
    2326:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	6839      	ldr	r1, [r7, #0]
    232c:	4618      	mov	r0, r3
    232e:	4b05      	ldr	r3, [pc, #20]	; (2344 <crc_sync_init+0x48>)
    2330:	4798      	blx	r3
    2332:	4603      	mov	r3, r0
}
    2334:	4618      	mov	r0, r3
    2336:	3708      	adds	r7, #8
    2338:	46bd      	mov	sp, r7
    233a:	bd80      	pop	{r7, pc}
    233c:	0000f05c 	.word	0x0000f05c
    2340:	0000396d 	.word	0x0000396d
    2344:	000045c9 	.word	0x000045c9

00002348 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2348:	b590      	push	{r4, r7, lr}
    234a:	b083      	sub	sp, #12
    234c:	af00      	add	r7, sp, #0
    234e:	4603      	mov	r3, r0
    2350:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2352:	4b07      	ldr	r3, [pc, #28]	; (2370 <delay_us+0x28>)
    2354:	681c      	ldr	r4, [r3, #0]
    2356:	88fb      	ldrh	r3, [r7, #6]
    2358:	4618      	mov	r0, r3
    235a:	4b06      	ldr	r3, [pc, #24]	; (2374 <delay_us+0x2c>)
    235c:	4798      	blx	r3
    235e:	4603      	mov	r3, r0
    2360:	4619      	mov	r1, r3
    2362:	4620      	mov	r0, r4
    2364:	4b04      	ldr	r3, [pc, #16]	; (2378 <delay_us+0x30>)
    2366:	4798      	blx	r3
}
    2368:	bf00      	nop
    236a:	370c      	adds	r7, #12
    236c:	46bd      	mov	sp, r7
    236e:	bd90      	pop	{r4, r7, pc}
    2370:	200007e8 	.word	0x200007e8
    2374:	0000431d 	.word	0x0000431d
    2378:	000044b1 	.word	0x000044b1

0000237c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    237c:	b590      	push	{r4, r7, lr}
    237e:	b083      	sub	sp, #12
    2380:	af00      	add	r7, sp, #0
    2382:	4603      	mov	r3, r0
    2384:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2386:	4b07      	ldr	r3, [pc, #28]	; (23a4 <delay_ms+0x28>)
    2388:	681c      	ldr	r4, [r3, #0]
    238a:	88fb      	ldrh	r3, [r7, #6]
    238c:	4618      	mov	r0, r3
    238e:	4b06      	ldr	r3, [pc, #24]	; (23a8 <delay_ms+0x2c>)
    2390:	4798      	blx	r3
    2392:	4603      	mov	r3, r0
    2394:	4619      	mov	r1, r3
    2396:	4620      	mov	r0, r4
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <delay_ms+0x30>)
    239a:	4798      	blx	r3
}
    239c:	bf00      	nop
    239e:	370c      	adds	r7, #12
    23a0:	46bd      	mov	sp, r7
    23a2:	bd90      	pop	{r4, r7, pc}
    23a4:	200007e8 	.word	0x200007e8
    23a8:	00004489 	.word	0x00004489
    23ac:	000044b1 	.word	0x000044b1

000023b0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	af00      	add	r7, sp, #0
	return _event_system_init();
    23b4:	4b02      	ldr	r3, [pc, #8]	; (23c0 <event_system_init+0x10>)
    23b6:	4798      	blx	r3
    23b8:	4603      	mov	r3, r0
}
    23ba:	4618      	mov	r0, r3
    23bc:	bd80      	pop	{r7, pc}
    23be:	bf00      	nop
    23c0:	00004d85 	.word	0x00004d85

000023c4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23ca:	2300      	movs	r3, #0
    23cc:	80fb      	strh	r3, [r7, #6]
    23ce:	e00e      	b.n	23ee <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    23d0:	88fb      	ldrh	r3, [r7, #6]
    23d2:	4a0c      	ldr	r2, [pc, #48]	; (2404 <ext_irq_init+0x40>)
    23d4:	00db      	lsls	r3, r3, #3
    23d6:	4413      	add	r3, r2
    23d8:	f04f 32ff 	mov.w	r2, #4294967295
    23dc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    23de:	88fb      	ldrh	r3, [r7, #6]
    23e0:	4a08      	ldr	r2, [pc, #32]	; (2404 <ext_irq_init+0x40>)
    23e2:	2100      	movs	r1, #0
    23e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23e8:	88fb      	ldrh	r3, [r7, #6]
    23ea:	3301      	adds	r3, #1
    23ec:	80fb      	strh	r3, [r7, #6]
    23ee:	88fb      	ldrh	r3, [r7, #6]
    23f0:	2b08      	cmp	r3, #8
    23f2:	d9ed      	bls.n	23d0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    23f4:	4804      	ldr	r0, [pc, #16]	; (2408 <ext_irq_init+0x44>)
    23f6:	4b05      	ldr	r3, [pc, #20]	; (240c <ext_irq_init+0x48>)
    23f8:	4798      	blx	r3
    23fa:	4603      	mov	r3, r0
}
    23fc:	4618      	mov	r0, r3
    23fe:	3708      	adds	r7, #8
    2400:	46bd      	mov	sp, r7
    2402:	bd80      	pop	{r7, pc}
    2404:	200007ec 	.word	0x200007ec
    2408:	00002569 	.word	0x00002569
    240c:	00004909 	.word	0x00004909

00002410 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2410:	b580      	push	{r7, lr}
    2412:	b086      	sub	sp, #24
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
    2418:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    241a:	2300      	movs	r3, #0
    241c:	75fb      	strb	r3, [r7, #23]
    241e:	2300      	movs	r3, #0
    2420:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2422:	2300      	movs	r3, #0
    2424:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2426:	e012      	b.n	244e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2428:	7dfb      	ldrb	r3, [r7, #23]
    242a:	4a4d      	ldr	r2, [pc, #308]	; (2560 <ext_irq_register+0x150>)
    242c:	00db      	lsls	r3, r3, #3
    242e:	4413      	add	r3, r2
    2430:	685a      	ldr	r2, [r3, #4]
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	429a      	cmp	r2, r3
    2436:	d107      	bne.n	2448 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2438:	7dfb      	ldrb	r3, [r7, #23]
    243a:	4949      	ldr	r1, [pc, #292]	; (2560 <ext_irq_register+0x150>)
    243c:	683a      	ldr	r2, [r7, #0]
    243e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2442:	2301      	movs	r3, #1
    2444:	757b      	strb	r3, [r7, #21]
			break;
    2446:	e005      	b.n	2454 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2448:	7dfb      	ldrb	r3, [r7, #23]
    244a:	3301      	adds	r3, #1
    244c:	75fb      	strb	r3, [r7, #23]
    244e:	7dfb      	ldrb	r3, [r7, #23]
    2450:	2b08      	cmp	r3, #8
    2452:	d9e9      	bls.n	2428 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2454:	683b      	ldr	r3, [r7, #0]
    2456:	2b00      	cmp	r3, #0
    2458:	d10e      	bne.n	2478 <ext_irq_register+0x68>
		if (!found) {
    245a:	7d7b      	ldrb	r3, [r7, #21]
    245c:	f083 0301 	eor.w	r3, r3, #1
    2460:	b2db      	uxtb	r3, r3
    2462:	2b00      	cmp	r3, #0
    2464:	d002      	beq.n	246c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2466:	f06f 030c 	mvn.w	r3, #12
    246a:	e074      	b.n	2556 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    246c:	2100      	movs	r1, #0
    246e:	6878      	ldr	r0, [r7, #4]
    2470:	4b3c      	ldr	r3, [pc, #240]	; (2564 <ext_irq_register+0x154>)
    2472:	4798      	blx	r3
    2474:	4603      	mov	r3, r0
    2476:	e06e      	b.n	2556 <ext_irq_register+0x146>
	}

	if (!found) {
    2478:	7d7b      	ldrb	r3, [r7, #21]
    247a:	f083 0301 	eor.w	r3, r3, #1
    247e:	b2db      	uxtb	r3, r3
    2480:	2b00      	cmp	r3, #0
    2482:	d05a      	beq.n	253a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2484:	2300      	movs	r3, #0
    2486:	75fb      	strb	r3, [r7, #23]
    2488:	e016      	b.n	24b8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    248a:	7dfb      	ldrb	r3, [r7, #23]
    248c:	4a34      	ldr	r2, [pc, #208]	; (2560 <ext_irq_register+0x150>)
    248e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2492:	2b00      	cmp	r3, #0
    2494:	d10d      	bne.n	24b2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2496:	7dfb      	ldrb	r3, [r7, #23]
    2498:	4931      	ldr	r1, [pc, #196]	; (2560 <ext_irq_register+0x150>)
    249a:	683a      	ldr	r2, [r7, #0]
    249c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    24a0:	7dfb      	ldrb	r3, [r7, #23]
    24a2:	4a2f      	ldr	r2, [pc, #188]	; (2560 <ext_irq_register+0x150>)
    24a4:	00db      	lsls	r3, r3, #3
    24a6:	4413      	add	r3, r2
    24a8:	687a      	ldr	r2, [r7, #4]
    24aa:	605a      	str	r2, [r3, #4]
				found           = true;
    24ac:	2301      	movs	r3, #1
    24ae:	757b      	strb	r3, [r7, #21]
				break;
    24b0:	e005      	b.n	24be <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    24b2:	7dfb      	ldrb	r3, [r7, #23]
    24b4:	3301      	adds	r3, #1
    24b6:	75fb      	strb	r3, [r7, #23]
    24b8:	7dfb      	ldrb	r3, [r7, #23]
    24ba:	2b08      	cmp	r3, #8
    24bc:	d9e5      	bls.n	248a <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    24be:	e036      	b.n	252e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    24c0:	7dfb      	ldrb	r3, [r7, #23]
    24c2:	4a27      	ldr	r2, [pc, #156]	; (2560 <ext_irq_register+0x150>)
    24c4:	00db      	lsls	r3, r3, #3
    24c6:	4413      	add	r3, r2
    24c8:	685a      	ldr	r2, [r3, #4]
    24ca:	7dbb      	ldrb	r3, [r7, #22]
    24cc:	4924      	ldr	r1, [pc, #144]	; (2560 <ext_irq_register+0x150>)
    24ce:	00db      	lsls	r3, r3, #3
    24d0:	440b      	add	r3, r1
    24d2:	685b      	ldr	r3, [r3, #4]
    24d4:	429a      	cmp	r2, r3
    24d6:	d227      	bcs.n	2528 <ext_irq_register+0x118>
    24d8:	7dbb      	ldrb	r3, [r7, #22]
    24da:	4a21      	ldr	r2, [pc, #132]	; (2560 <ext_irq_register+0x150>)
    24dc:	00db      	lsls	r3, r3, #3
    24de:	4413      	add	r3, r2
    24e0:	685b      	ldr	r3, [r3, #4]
    24e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    24e6:	d01f      	beq.n	2528 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    24e8:	7dbb      	ldrb	r3, [r7, #22]
    24ea:	491d      	ldr	r1, [pc, #116]	; (2560 <ext_irq_register+0x150>)
    24ec:	f107 020c 	add.w	r2, r7, #12
    24f0:	00db      	lsls	r3, r3, #3
    24f2:	440b      	add	r3, r1
    24f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    24f8:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    24fc:	7dbb      	ldrb	r3, [r7, #22]
    24fe:	7dfa      	ldrb	r2, [r7, #23]
    2500:	4817      	ldr	r0, [pc, #92]	; (2560 <ext_irq_register+0x150>)
    2502:	4917      	ldr	r1, [pc, #92]	; (2560 <ext_irq_register+0x150>)
    2504:	00db      	lsls	r3, r3, #3
    2506:	4403      	add	r3, r0
    2508:	00d2      	lsls	r2, r2, #3
    250a:	440a      	add	r2, r1
    250c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2510:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2514:	7dfb      	ldrb	r3, [r7, #23]
    2516:	4a12      	ldr	r2, [pc, #72]	; (2560 <ext_irq_register+0x150>)
    2518:	00db      	lsls	r3, r3, #3
    251a:	4413      	add	r3, r2
    251c:	f107 020c 	add.w	r2, r7, #12
    2520:	e892 0003 	ldmia.w	r2, {r0, r1}
    2524:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2528:	7dbb      	ldrb	r3, [r7, #22]
    252a:	3301      	adds	r3, #1
    252c:	75bb      	strb	r3, [r7, #22]
    252e:	7dbb      	ldrb	r3, [r7, #22]
    2530:	2b08      	cmp	r3, #8
    2532:	d802      	bhi.n	253a <ext_irq_register+0x12a>
    2534:	7dfb      	ldrb	r3, [r7, #23]
    2536:	2b08      	cmp	r3, #8
    2538:	d9c2      	bls.n	24c0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    253a:	7d7b      	ldrb	r3, [r7, #21]
    253c:	f083 0301 	eor.w	r3, r3, #1
    2540:	b2db      	uxtb	r3, r3
    2542:	2b00      	cmp	r3, #0
    2544:	d002      	beq.n	254c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2546:	f06f 030c 	mvn.w	r3, #12
    254a:	e004      	b.n	2556 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    254c:	2101      	movs	r1, #1
    254e:	6878      	ldr	r0, [r7, #4]
    2550:	4b04      	ldr	r3, [pc, #16]	; (2564 <ext_irq_register+0x154>)
    2552:	4798      	blx	r3
    2554:	4603      	mov	r3, r0
}
    2556:	4618      	mov	r0, r3
    2558:	3718      	adds	r7, #24
    255a:	46bd      	mov	sp, r7
    255c:	bd80      	pop	{r7, pc}
    255e:	bf00      	nop
    2560:	200007ec 	.word	0x200007ec
    2564:	00004a9d 	.word	0x00004a9d

00002568 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2568:	b580      	push	{r7, lr}
    256a:	b084      	sub	sp, #16
    256c:	af00      	add	r7, sp, #0
    256e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2570:	2300      	movs	r3, #0
    2572:	73fb      	strb	r3, [r7, #15]
    2574:	2309      	movs	r3, #9
    2576:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2578:	e02a      	b.n	25d0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    257a:	7bba      	ldrb	r2, [r7, #14]
    257c:	7bfb      	ldrb	r3, [r7, #15]
    257e:	4413      	add	r3, r2
    2580:	105b      	asrs	r3, r3, #1
    2582:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2584:	7b7b      	ldrb	r3, [r7, #13]
    2586:	2b08      	cmp	r3, #8
    2588:	d827      	bhi.n	25da <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    258a:	7b7b      	ldrb	r3, [r7, #13]
    258c:	4a16      	ldr	r2, [pc, #88]	; (25e8 <process_ext_irq+0x80>)
    258e:	00db      	lsls	r3, r3, #3
    2590:	4413      	add	r3, r2
    2592:	685a      	ldr	r2, [r3, #4]
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	429a      	cmp	r2, r3
    2598:	d10b      	bne.n	25b2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    259a:	7b7b      	ldrb	r3, [r7, #13]
    259c:	4a12      	ldr	r2, [pc, #72]	; (25e8 <process_ext_irq+0x80>)
    259e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d01b      	beq.n	25de <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    25a6:	7b7b      	ldrb	r3, [r7, #13]
    25a8:	4a0f      	ldr	r2, [pc, #60]	; (25e8 <process_ext_irq+0x80>)
    25aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25ae:	4798      	blx	r3
			}
			return;
    25b0:	e015      	b.n	25de <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    25b2:	7b7b      	ldrb	r3, [r7, #13]
    25b4:	4a0c      	ldr	r2, [pc, #48]	; (25e8 <process_ext_irq+0x80>)
    25b6:	00db      	lsls	r3, r3, #3
    25b8:	4413      	add	r3, r2
    25ba:	685a      	ldr	r2, [r3, #4]
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	429a      	cmp	r2, r3
    25c0:	d203      	bcs.n	25ca <process_ext_irq+0x62>
			lower = middle + 1;
    25c2:	7b7b      	ldrb	r3, [r7, #13]
    25c4:	3301      	adds	r3, #1
    25c6:	73fb      	strb	r3, [r7, #15]
    25c8:	e002      	b.n	25d0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    25ca:	7b7b      	ldrb	r3, [r7, #13]
    25cc:	3b01      	subs	r3, #1
    25ce:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    25d0:	7bba      	ldrb	r2, [r7, #14]
    25d2:	7bfb      	ldrb	r3, [r7, #15]
    25d4:	429a      	cmp	r2, r3
    25d6:	d2d0      	bcs.n	257a <process_ext_irq+0x12>
    25d8:	e002      	b.n	25e0 <process_ext_irq+0x78>
			return;
    25da:	bf00      	nop
    25dc:	e000      	b.n	25e0 <process_ext_irq+0x78>
			return;
    25de:	bf00      	nop
		}
	}
}
    25e0:	3710      	adds	r7, #16
    25e2:	46bd      	mov	sp, r7
    25e4:	bd80      	pop	{r7, pc}
    25e6:	bf00      	nop
    25e8:	200007ec 	.word	0x200007ec

000025ec <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	b08a      	sub	sp, #40	; 0x28
    25f0:	af00      	add	r7, sp, #0
    25f2:	60f8      	str	r0, [r7, #12]
    25f4:	60b9      	str	r1, [r7, #8]
    25f6:	4613      	mov	r3, r2
    25f8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    25fa:	68fb      	ldr	r3, [r7, #12]
    25fc:	3b14      	subs	r3, #20
    25fe:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2602:	8b9b      	ldrh	r3, [r3, #28]
    2604:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2606:	88fb      	ldrh	r3, [r7, #6]
    2608:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    260a:	f248 0301 	movw	r3, #32769	; 0x8001
    260e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2610:	68bb      	ldr	r3, [r7, #8]
    2612:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2616:	f107 0214 	add.w	r2, r7, #20
    261a:	4611      	mov	r1, r2
    261c:	4618      	mov	r0, r3
    261e:	4b06      	ldr	r3, [pc, #24]	; (2638 <i2c_m_sync_read+0x4c>)
    2620:	4798      	blx	r3
    2622:	6238      	str	r0, [r7, #32]

	if (ret) {
    2624:	6a3b      	ldr	r3, [r7, #32]
    2626:	2b00      	cmp	r3, #0
    2628:	d001      	beq.n	262e <i2c_m_sync_read+0x42>
		return ret;
    262a:	6a3b      	ldr	r3, [r7, #32]
    262c:	e000      	b.n	2630 <i2c_m_sync_read+0x44>
	}

	return n;
    262e:	88fb      	ldrh	r3, [r7, #6]
}
    2630:	4618      	mov	r0, r3
    2632:	3728      	adds	r7, #40	; 0x28
    2634:	46bd      	mov	sp, r7
    2636:	bd80      	pop	{r7, pc}
    2638:	000069e5 	.word	0x000069e5

0000263c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    263c:	b580      	push	{r7, lr}
    263e:	b08a      	sub	sp, #40	; 0x28
    2640:	af00      	add	r7, sp, #0
    2642:	60f8      	str	r0, [r7, #12]
    2644:	60b9      	str	r1, [r7, #8]
    2646:	4613      	mov	r3, r2
    2648:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    264a:	68fb      	ldr	r3, [r7, #12]
    264c:	3b14      	subs	r3, #20
    264e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2652:	8b9b      	ldrh	r3, [r3, #28]
    2654:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2656:	88fb      	ldrh	r3, [r7, #6]
    2658:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    265a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    265e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2660:	68bb      	ldr	r3, [r7, #8]
    2662:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2666:	f107 0214 	add.w	r2, r7, #20
    266a:	4611      	mov	r1, r2
    266c:	4618      	mov	r0, r3
    266e:	4b06      	ldr	r3, [pc, #24]	; (2688 <i2c_m_sync_write+0x4c>)
    2670:	4798      	blx	r3
    2672:	6238      	str	r0, [r7, #32]

	if (ret) {
    2674:	6a3b      	ldr	r3, [r7, #32]
    2676:	2b00      	cmp	r3, #0
    2678:	d001      	beq.n	267e <i2c_m_sync_write+0x42>
		return ret;
    267a:	6a3b      	ldr	r3, [r7, #32]
    267c:	e000      	b.n	2680 <i2c_m_sync_write+0x44>
	}

	return n;
    267e:	88fb      	ldrh	r3, [r7, #6]
}
    2680:	4618      	mov	r0, r3
    2682:	3728      	adds	r7, #40	; 0x28
    2684:	46bd      	mov	sp, r7
    2686:	bd80      	pop	{r7, pc}
    2688:	000069e5 	.word	0x000069e5

0000268c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    268c:	b580      	push	{r7, lr}
    268e:	b084      	sub	sp, #16
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
    2694:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	2b00      	cmp	r3, #0
    269a:	bf14      	ite	ne
    269c:	2301      	movne	r3, #1
    269e:	2300      	moveq	r3, #0
    26a0:	b2db      	uxtb	r3, r3
    26a2:	225e      	movs	r2, #94	; 0x5e
    26a4:	490c      	ldr	r1, [pc, #48]	; (26d8 <i2c_m_sync_init+0x4c>)
    26a6:	4618      	mov	r0, r3
    26a8:	4b0c      	ldr	r3, [pc, #48]	; (26dc <i2c_m_sync_init+0x50>)
    26aa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    26ac:	687b      	ldr	r3, [r7, #4]
    26ae:	6839      	ldr	r1, [r7, #0]
    26b0:	4618      	mov	r0, r3
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <i2c_m_sync_init+0x54>)
    26b4:	4798      	blx	r3
    26b6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    26b8:	68fb      	ldr	r3, [r7, #12]
    26ba:	2b00      	cmp	r3, #0
    26bc:	d001      	beq.n	26c2 <i2c_m_sync_init+0x36>
		return init_status;
    26be:	68fb      	ldr	r3, [r7, #12]
    26c0:	e006      	b.n	26d0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	4a07      	ldr	r2, [pc, #28]	; (26e4 <i2c_m_sync_init+0x58>)
    26c6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	4a07      	ldr	r2, [pc, #28]	; (26e8 <i2c_m_sync_init+0x5c>)
    26cc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    26ce:	2300      	movs	r3, #0
}
    26d0:	4618      	mov	r0, r3
    26d2:	3710      	adds	r7, #16
    26d4:	46bd      	mov	sp, r7
    26d6:	bd80      	pop	{r7, pc}
    26d8:	0000f078 	.word	0x0000f078
    26dc:	0000396d 	.word	0x0000396d
    26e0:	00006785 	.word	0x00006785
    26e4:	000025ed 	.word	0x000025ed
    26e8:	0000263d 	.word	0x0000263d

000026ec <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	4618      	mov	r0, r3
    26f8:	4b03      	ldr	r3, [pc, #12]	; (2708 <i2c_m_sync_enable+0x1c>)
    26fa:	4798      	blx	r3
    26fc:	4603      	mov	r3, r0
}
    26fe:	4618      	mov	r0, r3
    2700:	3708      	adds	r7, #8
    2702:	46bd      	mov	sp, r7
    2704:	bd80      	pop	{r7, pc}
    2706:	bf00      	nop
    2708:	000067cd 	.word	0x000067cd

0000270c <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    270c:	b580      	push	{r7, lr}
    270e:	b082      	sub	sp, #8
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	4618      	mov	r0, r3
    2718:	4b03      	ldr	r3, [pc, #12]	; (2728 <i2c_m_sync_disable+0x1c>)
    271a:	4798      	blx	r3
    271c:	4603      	mov	r3, r0
}
    271e:	4618      	mov	r0, r3
    2720:	3708      	adds	r7, #8
    2722:	46bd      	mov	sp, r7
    2724:	bd80      	pop	{r7, pc}
    2726:	bf00      	nop
    2728:	0000680d 	.word	0x0000680d

0000272c <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    272c:	b480      	push	{r7}
    272e:	b085      	sub	sp, #20
    2730:	af00      	add	r7, sp, #0
    2732:	60f8      	str	r0, [r7, #12]
    2734:	460b      	mov	r3, r1
    2736:	607a      	str	r2, [r7, #4]
    2738:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    273a:	897b      	ldrh	r3, [r7, #10]
    273c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2740:	b21a      	sxth	r2, r3
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	b21b      	sxth	r3, r3
    2746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    274a:	b21b      	sxth	r3, r3
    274c:	4313      	orrs	r3, r2
    274e:	b21b      	sxth	r3, r3
    2750:	b29a      	uxth	r2, r3
    2752:	68fb      	ldr	r3, [r7, #12]
    2754:	839a      	strh	r2, [r3, #28]
    2756:	68fb      	ldr	r3, [r7, #12]
    2758:	8b9b      	ldrh	r3, [r3, #28]
}
    275a:	4618      	mov	r0, r3
    275c:	3714      	adds	r7, #20
    275e:	46bd      	mov	sp, r7
    2760:	f85d 7b04 	ldr.w	r7, [sp], #4
    2764:	4770      	bx	lr

00002766 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2766:	b480      	push	{r7}
    2768:	b083      	sub	sp, #12
    276a:	af00      	add	r7, sp, #0
    276c:	6078      	str	r0, [r7, #4]
    276e:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	f103 0214 	add.w	r2, r3, #20
    2776:	683b      	ldr	r3, [r7, #0]
    2778:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    277a:	2300      	movs	r3, #0
}
    277c:	4618      	mov	r0, r3
    277e:	370c      	adds	r7, #12
    2780:	46bd      	mov	sp, r7
    2782:	f85d 7b04 	ldr.w	r7, [sp], #4
    2786:	4770      	bx	lr

00002788 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2788:	b580      	push	{r7, lr}
    278a:	b084      	sub	sp, #16
    278c:	af00      	add	r7, sp, #0
    278e:	60f8      	str	r0, [r7, #12]
    2790:	60b9      	str	r1, [r7, #8]
    2792:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2794:	68fb      	ldr	r3, [r7, #12]
    2796:	2b00      	cmp	r3, #0
    2798:	d004      	beq.n	27a4 <pwm_init+0x1c>
    279a:	68bb      	ldr	r3, [r7, #8]
    279c:	2b00      	cmp	r3, #0
    279e:	d001      	beq.n	27a4 <pwm_init+0x1c>
    27a0:	2301      	movs	r3, #1
    27a2:	e000      	b.n	27a6 <pwm_init+0x1e>
    27a4:	2300      	movs	r3, #0
    27a6:	f003 0301 	and.w	r3, r3, #1
    27aa:	b2db      	uxtb	r3, r3
    27ac:	2233      	movs	r2, #51	; 0x33
    27ae:	490a      	ldr	r1, [pc, #40]	; (27d8 <pwm_init+0x50>)
    27b0:	4618      	mov	r0, r3
    27b2:	4b0a      	ldr	r3, [pc, #40]	; (27dc <pwm_init+0x54>)
    27b4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    27b6:	68fb      	ldr	r3, [r7, #12]
    27b8:	68b9      	ldr	r1, [r7, #8]
    27ba:	4618      	mov	r0, r3
    27bc:	4b08      	ldr	r3, [pc, #32]	; (27e0 <pwm_init+0x58>)
    27be:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    27c0:	68fb      	ldr	r3, [r7, #12]
    27c2:	4a08      	ldr	r2, [pc, #32]	; (27e4 <pwm_init+0x5c>)
    27c4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    27c6:	68fb      	ldr	r3, [r7, #12]
    27c8:	4a07      	ldr	r2, [pc, #28]	; (27e8 <pwm_init+0x60>)
    27ca:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    27cc:	2300      	movs	r3, #0
}
    27ce:	4618      	mov	r0, r3
    27d0:	3710      	adds	r7, #16
    27d2:	46bd      	mov	sp, r7
    27d4:	bd80      	pop	{r7, pc}
    27d6:	bf00      	nop
    27d8:	0000f094 	.word	0x0000f094
    27dc:	0000396d 	.word	0x0000396d
    27e0:	00007fa5 	.word	0x00007fa5
    27e4:	00002841 	.word	0x00002841
    27e8:	00002865 	.word	0x00002865

000027ec <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b082      	sub	sp, #8
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	2b00      	cmp	r3, #0
    27f8:	bf14      	ite	ne
    27fa:	2301      	movne	r3, #1
    27fc:	2300      	moveq	r3, #0
    27fe:	b2db      	uxtb	r3, r3
    2800:	224a      	movs	r2, #74	; 0x4a
    2802:	490b      	ldr	r1, [pc, #44]	; (2830 <pwm_enable+0x44>)
    2804:	4618      	mov	r0, r3
    2806:	4b0b      	ldr	r3, [pc, #44]	; (2834 <pwm_enable+0x48>)
    2808:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	4618      	mov	r0, r3
    280e:	4b0a      	ldr	r3, [pc, #40]	; (2838 <pwm_enable+0x4c>)
    2810:	4798      	blx	r3
    2812:	4603      	mov	r3, r0
    2814:	2b00      	cmp	r3, #0
    2816:	d002      	beq.n	281e <pwm_enable+0x32>
		return ERR_DENIED;
    2818:	f06f 0310 	mvn.w	r3, #16
    281c:	e004      	b.n	2828 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	4618      	mov	r0, r3
    2822:	4b06      	ldr	r3, [pc, #24]	; (283c <pwm_enable+0x50>)
    2824:	4798      	blx	r3

	return ERR_NONE;
    2826:	2300      	movs	r3, #0
}
    2828:	4618      	mov	r0, r3
    282a:	3708      	adds	r7, #8
    282c:	46bd      	mov	sp, r7
    282e:	bd80      	pop	{r7, pc}
    2830:	0000f094 	.word	0x0000f094
    2834:	0000396d 	.word	0x0000396d
    2838:	00008395 	.word	0x00008395
    283c:	00008251 	.word	0x00008251

00002840 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2840:	b580      	push	{r7, lr}
    2842:	b084      	sub	sp, #16
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    284c:	68fb      	ldr	r3, [r7, #12]
    284e:	695b      	ldr	r3, [r3, #20]
    2850:	2b00      	cmp	r3, #0
    2852:	d003      	beq.n	285c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2854:	68fb      	ldr	r3, [r7, #12]
    2856:	695b      	ldr	r3, [r3, #20]
    2858:	68f8      	ldr	r0, [r7, #12]
    285a:	4798      	blx	r3
	}
}
    285c:	bf00      	nop
    285e:	3710      	adds	r7, #16
    2860:	46bd      	mov	sp, r7
    2862:	bd80      	pop	{r7, pc}

00002864 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2864:	b580      	push	{r7, lr}
    2866:	b084      	sub	sp, #16
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    286c:	687b      	ldr	r3, [r7, #4]
    286e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2870:	68fb      	ldr	r3, [r7, #12]
    2872:	699b      	ldr	r3, [r3, #24]
    2874:	2b00      	cmp	r3, #0
    2876:	d003      	beq.n	2880 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2878:	68fb      	ldr	r3, [r7, #12]
    287a:	699b      	ldr	r3, [r3, #24]
    287c:	68f8      	ldr	r0, [r7, #12]
    287e:	4798      	blx	r3
	}
}
    2880:	bf00      	nop
    2882:	3710      	adds	r7, #16
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}

00002888 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2888:	b580      	push	{r7, lr}
    288a:	b082      	sub	sp, #8
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]
    2890:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	2b00      	cmp	r3, #0
    2896:	d004      	beq.n	28a2 <qspi_sync_init+0x1a>
    2898:	683b      	ldr	r3, [r7, #0]
    289a:	2b00      	cmp	r3, #0
    289c:	d001      	beq.n	28a2 <qspi_sync_init+0x1a>
    289e:	2301      	movs	r3, #1
    28a0:	e000      	b.n	28a4 <qspi_sync_init+0x1c>
    28a2:	2300      	movs	r3, #0
    28a4:	f003 0301 	and.w	r3, r3, #1
    28a8:	b2db      	uxtb	r3, r3
    28aa:	2231      	movs	r2, #49	; 0x31
    28ac:	4906      	ldr	r1, [pc, #24]	; (28c8 <qspi_sync_init+0x40>)
    28ae:	4618      	mov	r0, r3
    28b0:	4b06      	ldr	r3, [pc, #24]	; (28cc <qspi_sync_init+0x44>)
    28b2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	6839      	ldr	r1, [r7, #0]
    28b8:	4618      	mov	r0, r3
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <qspi_sync_init+0x48>)
    28bc:	4798      	blx	r3
    28be:	4603      	mov	r3, r0
}
    28c0:	4618      	mov	r0, r3
    28c2:	3708      	adds	r7, #8
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	0000f0ac 	.word	0x0000f0ac
    28cc:	0000396d 	.word	0x0000396d
    28d0:	00005965 	.word	0x00005965

000028d4 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    28d4:	b580      	push	{r7, lr}
    28d6:	b082      	sub	sp, #8
    28d8:	af00      	add	r7, sp, #0
    28da:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    28dc:	687b      	ldr	r3, [r7, #4]
    28de:	2b00      	cmp	r3, #0
    28e0:	bf14      	ite	ne
    28e2:	2301      	movne	r3, #1
    28e4:	2300      	moveq	r3, #0
    28e6:	b2db      	uxtb	r3, r3
    28e8:	223f      	movs	r2, #63	; 0x3f
    28ea:	4906      	ldr	r1, [pc, #24]	; (2904 <qspi_sync_enable+0x30>)
    28ec:	4618      	mov	r0, r3
    28ee:	4b06      	ldr	r3, [pc, #24]	; (2908 <qspi_sync_enable+0x34>)
    28f0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	4618      	mov	r0, r3
    28f6:	4b05      	ldr	r3, [pc, #20]	; (290c <qspi_sync_enable+0x38>)
    28f8:	4798      	blx	r3
    28fa:	4603      	mov	r3, r0
}
    28fc:	4618      	mov	r0, r3
    28fe:	3708      	adds	r7, #8
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}
    2904:	0000f0ac 	.word	0x0000f0ac
    2908:	0000396d 	.word	0x0000396d
    290c:	000059d9 	.word	0x000059d9

00002910 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2910:	b580      	push	{r7, lr}
    2912:	b082      	sub	sp, #8
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	2b00      	cmp	r3, #0
    291c:	bf14      	ite	ne
    291e:	2301      	movne	r3, #1
    2920:	2300      	moveq	r3, #0
    2922:	b2db      	uxtb	r3, r3
    2924:	2246      	movs	r2, #70	; 0x46
    2926:	4906      	ldr	r1, [pc, #24]	; (2940 <qspi_sync_disable+0x30>)
    2928:	4618      	mov	r0, r3
    292a:	4b06      	ldr	r3, [pc, #24]	; (2944 <qspi_sync_disable+0x34>)
    292c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    292e:	687b      	ldr	r3, [r7, #4]
    2930:	4618      	mov	r0, r3
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <qspi_sync_disable+0x38>)
    2934:	4798      	blx	r3
    2936:	4603      	mov	r3, r0
}
    2938:	4618      	mov	r0, r3
    293a:	3708      	adds	r7, #8
    293c:	46bd      	mov	sp, r7
    293e:	bd80      	pop	{r7, pc}
    2940:	0000f0ac 	.word	0x0000f0ac
    2944:	0000396d 	.word	0x0000396d
    2948:	000059fd 	.word	0x000059fd

0000294c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    294c:	b580      	push	{r7, lr}
    294e:	b082      	sub	sp, #8
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
    2954:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	2b00      	cmp	r3, #0
    295a:	d004      	beq.n	2966 <qspi_sync_serial_run_command+0x1a>
    295c:	683b      	ldr	r3, [r7, #0]
    295e:	2b00      	cmp	r3, #0
    2960:	d001      	beq.n	2966 <qspi_sync_serial_run_command+0x1a>
    2962:	2301      	movs	r3, #1
    2964:	e000      	b.n	2968 <qspi_sync_serial_run_command+0x1c>
    2966:	2300      	movs	r3, #0
    2968:	f003 0301 	and.w	r3, r3, #1
    296c:	b2db      	uxtb	r3, r3
    296e:	224d      	movs	r2, #77	; 0x4d
    2970:	4906      	ldr	r1, [pc, #24]	; (298c <qspi_sync_serial_run_command+0x40>)
    2972:	4618      	mov	r0, r3
    2974:	4b06      	ldr	r3, [pc, #24]	; (2990 <qspi_sync_serial_run_command+0x44>)
    2976:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	6839      	ldr	r1, [r7, #0]
    297c:	4618      	mov	r0, r3
    297e:	4b05      	ldr	r3, [pc, #20]	; (2994 <qspi_sync_serial_run_command+0x48>)
    2980:	4798      	blx	r3
    2982:	4603      	mov	r3, r0
}
    2984:	4618      	mov	r0, r3
    2986:	3708      	adds	r7, #8
    2988:	46bd      	mov	sp, r7
    298a:	bd80      	pop	{r7, pc}
    298c:	0000f0ac 	.word	0x0000f0ac
    2990:	0000396d 	.word	0x0000396d
    2994:	00005b49 	.word	0x00005b49

00002998 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2998:	b580      	push	{r7, lr}
    299a:	b084      	sub	sp, #16
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    29a0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    29a2:	2300      	movs	r3, #0
    29a4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d004      	beq.n	29b6 <spi_m_sync_init+0x1e>
    29ac:	683b      	ldr	r3, [r7, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d001      	beq.n	29b6 <spi_m_sync_init+0x1e>
    29b2:	2301      	movs	r3, #1
    29b4:	e000      	b.n	29b8 <spi_m_sync_init+0x20>
    29b6:	2300      	movs	r3, #0
    29b8:	f003 0301 	and.w	r3, r3, #1
    29bc:	b2db      	uxtb	r3, r3
    29be:	2240      	movs	r2, #64	; 0x40
    29c0:	4910      	ldr	r1, [pc, #64]	; (2a04 <spi_m_sync_init+0x6c>)
    29c2:	4618      	mov	r0, r3
    29c4:	4b10      	ldr	r3, [pc, #64]	; (2a08 <spi_m_sync_init+0x70>)
    29c6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	683a      	ldr	r2, [r7, #0]
    29cc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	3304      	adds	r3, #4
    29d2:	6839      	ldr	r1, [r7, #0]
    29d4:	4618      	mov	r0, r3
    29d6:	4b0d      	ldr	r3, [pc, #52]	; (2a0c <spi_m_sync_init+0x74>)
    29d8:	4798      	blx	r3
    29da:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	2b00      	cmp	r3, #0
    29e0:	da01      	bge.n	29e6 <spi_m_sync_init+0x4e>
		return rc;
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	e00a      	b.n	29fc <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    29ec:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	4a07      	ldr	r2, [pc, #28]	; (2a10 <spi_m_sync_init+0x78>)
    29f2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	4a07      	ldr	r2, [pc, #28]	; (2a14 <spi_m_sync_init+0x7c>)
    29f8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    29fa:	2300      	movs	r3, #0
}
    29fc:	4618      	mov	r0, r3
    29fe:	3710      	adds	r7, #16
    2a00:	46bd      	mov	sp, r7
    2a02:	bd80      	pop	{r7, pc}
    2a04:	0000f0c8 	.word	0x0000f0c8
    2a08:	0000396d 	.word	0x0000396d
    2a0c:	00006e79 	.word	0x00006e79
    2a10:	00002a19 	.word	0x00002a19
    2a14:	00002a71 	.word	0x00002a71

00002a18 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	b088      	sub	sp, #32
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	60f8      	str	r0, [r7, #12]
    2a20:	60b9      	str	r1, [r7, #8]
    2a22:	4613      	mov	r3, r2
    2a24:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a26:	68fb      	ldr	r3, [r7, #12]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	bf14      	ite	ne
    2a2c:	2301      	movne	r3, #1
    2a2e:	2300      	moveq	r3, #0
    2a30:	b2db      	uxtb	r3, r3
    2a32:	2287      	movs	r2, #135	; 0x87
    2a34:	490b      	ldr	r1, [pc, #44]	; (2a64 <_spi_m_sync_io_read+0x4c>)
    2a36:	4618      	mov	r0, r3
    2a38:	4b0b      	ldr	r3, [pc, #44]	; (2a68 <_spi_m_sync_io_read+0x50>)
    2a3a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a3c:	68fb      	ldr	r3, [r7, #12]
    2a3e:	3b0c      	subs	r3, #12
    2a40:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2a42:	68bb      	ldr	r3, [r7, #8]
    2a44:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2a46:	2300      	movs	r3, #0
    2a48:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2a4a:	88fb      	ldrh	r3, [r7, #6]
    2a4c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2a4e:	f107 0310 	add.w	r3, r7, #16
    2a52:	4619      	mov	r1, r3
    2a54:	69f8      	ldr	r0, [r7, #28]
    2a56:	4b05      	ldr	r3, [pc, #20]	; (2a6c <_spi_m_sync_io_read+0x54>)
    2a58:	4798      	blx	r3
    2a5a:	4603      	mov	r3, r0
}
    2a5c:	4618      	mov	r0, r3
    2a5e:	3720      	adds	r7, #32
    2a60:	46bd      	mov	sp, r7
    2a62:	bd80      	pop	{r7, pc}
    2a64:	0000f0c8 	.word	0x0000f0c8
    2a68:	0000396d 	.word	0x0000396d
    2a6c:	00002ac9 	.word	0x00002ac9

00002a70 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2a70:	b580      	push	{r7, lr}
    2a72:	b088      	sub	sp, #32
    2a74:	af00      	add	r7, sp, #0
    2a76:	60f8      	str	r0, [r7, #12]
    2a78:	60b9      	str	r1, [r7, #8]
    2a7a:	4613      	mov	r3, r2
    2a7c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2a7e:	68fb      	ldr	r3, [r7, #12]
    2a80:	2b00      	cmp	r3, #0
    2a82:	bf14      	ite	ne
    2a84:	2301      	movne	r3, #1
    2a86:	2300      	moveq	r3, #0
    2a88:	b2db      	uxtb	r3, r3
    2a8a:	22a3      	movs	r2, #163	; 0xa3
    2a8c:	490b      	ldr	r1, [pc, #44]	; (2abc <_spi_m_sync_io_write+0x4c>)
    2a8e:	4618      	mov	r0, r3
    2a90:	4b0b      	ldr	r3, [pc, #44]	; (2ac0 <_spi_m_sync_io_write+0x50>)
    2a92:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2a94:	68fb      	ldr	r3, [r7, #12]
    2a96:	3b0c      	subs	r3, #12
    2a98:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2a9a:	2300      	movs	r3, #0
    2a9c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2a9e:	68bb      	ldr	r3, [r7, #8]
    2aa0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2aa2:	88fb      	ldrh	r3, [r7, #6]
    2aa4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2aa6:	f107 0310 	add.w	r3, r7, #16
    2aaa:	4619      	mov	r1, r3
    2aac:	69f8      	ldr	r0, [r7, #28]
    2aae:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <_spi_m_sync_io_write+0x54>)
    2ab0:	4798      	blx	r3
    2ab2:	4603      	mov	r3, r0
}
    2ab4:	4618      	mov	r0, r3
    2ab6:	3720      	adds	r7, #32
    2ab8:	46bd      	mov	sp, r7
    2aba:	bd80      	pop	{r7, pc}
    2abc:	0000f0c8 	.word	0x0000f0c8
    2ac0:	0000396d 	.word	0x0000396d
    2ac4:	00002ac9 	.word	0x00002ac9

00002ac8 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b086      	sub	sp, #24
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
    2ad0:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d004      	beq.n	2ae2 <spi_m_sync_transfer+0x1a>
    2ad8:	683b      	ldr	r3, [r7, #0]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d001      	beq.n	2ae2 <spi_m_sync_transfer+0x1a>
    2ade:	2301      	movs	r3, #1
    2ae0:	e000      	b.n	2ae4 <spi_m_sync_transfer+0x1c>
    2ae2:	2300      	movs	r3, #0
    2ae4:	f003 0301 	and.w	r3, r3, #1
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	22b3      	movs	r2, #179	; 0xb3
    2aec:	490c      	ldr	r1, [pc, #48]	; (2b20 <spi_m_sync_transfer+0x58>)
    2aee:	4618      	mov	r0, r3
    2af0:	4b0c      	ldr	r3, [pc, #48]	; (2b24 <spi_m_sync_transfer+0x5c>)
    2af2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2af4:	683b      	ldr	r3, [r7, #0]
    2af6:	681b      	ldr	r3, [r3, #0]
    2af8:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2afa:	683b      	ldr	r3, [r7, #0]
    2afc:	685b      	ldr	r3, [r3, #4]
    2afe:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2b00:	683b      	ldr	r3, [r7, #0]
    2b02:	689b      	ldr	r3, [r3, #8]
    2b04:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	3304      	adds	r3, #4
    2b0a:	f107 020c 	add.w	r2, r7, #12
    2b0e:	4611      	mov	r1, r2
    2b10:	4618      	mov	r0, r3
    2b12:	4b05      	ldr	r3, [pc, #20]	; (2b28 <spi_m_sync_transfer+0x60>)
    2b14:	4798      	blx	r3
    2b16:	4603      	mov	r3, r0
}
    2b18:	4618      	mov	r0, r3
    2b1a:	3718      	adds	r7, #24
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bd80      	pop	{r7, pc}
    2b20:	0000f0c8 	.word	0x0000f0c8
    2b24:	0000396d 	.word	0x0000396d
    2b28:	000070d9 	.word	0x000070d9

00002b2c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2b2c:	b480      	push	{r7}
    2b2e:	b083      	sub	sp, #12
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	681b      	ldr	r3, [r3, #0]
}
    2b38:	4618      	mov	r0, r3
    2b3a:	370c      	adds	r7, #12
    2b3c:	46bd      	mov	sp, r7
    2b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b42:	4770      	bx	lr

00002b44 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2b44:	b480      	push	{r7}
    2b46:	b083      	sub	sp, #12
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d002      	beq.n	2b58 <list_get_next_element+0x14>
    2b52:	687b      	ldr	r3, [r7, #4]
    2b54:	681b      	ldr	r3, [r3, #0]
    2b56:	e000      	b.n	2b5a <list_get_next_element+0x16>
    2b58:	2300      	movs	r3, #0
}
    2b5a:	4618      	mov	r0, r3
    2b5c:	370c      	adds	r7, #12
    2b5e:	46bd      	mov	sp, r7
    2b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b64:	4770      	bx	lr
	...

00002b68 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2b68:	b580      	push	{r7, lr}
    2b6a:	b084      	sub	sp, #16
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	60f8      	str	r0, [r7, #12]
    2b70:	60b9      	str	r1, [r7, #8]
    2b72:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2b74:	68fb      	ldr	r3, [r7, #12]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d007      	beq.n	2b8a <timer_init+0x22>
    2b7a:	68bb      	ldr	r3, [r7, #8]
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d004      	beq.n	2b8a <timer_init+0x22>
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	2b00      	cmp	r3, #0
    2b84:	d001      	beq.n	2b8a <timer_init+0x22>
    2b86:	2301      	movs	r3, #1
    2b88:	e000      	b.n	2b8c <timer_init+0x24>
    2b8a:	2300      	movs	r3, #0
    2b8c:	f003 0301 	and.w	r3, r3, #1
    2b90:	b2db      	uxtb	r3, r3
    2b92:	223b      	movs	r2, #59	; 0x3b
    2b94:	490c      	ldr	r1, [pc, #48]	; (2bc8 <timer_init+0x60>)
    2b96:	4618      	mov	r0, r3
    2b98:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <timer_init+0x64>)
    2b9a:	4798      	blx	r3
	descr->func = func;
    2b9c:	68fb      	ldr	r3, [r7, #12]
    2b9e:	687a      	ldr	r2, [r7, #4]
    2ba0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2ba2:	68fb      	ldr	r3, [r7, #12]
    2ba4:	681b      	ldr	r3, [r3, #0]
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	68fa      	ldr	r2, [r7, #12]
    2baa:	3204      	adds	r2, #4
    2bac:	68b9      	ldr	r1, [r7, #8]
    2bae:	4610      	mov	r0, r2
    2bb0:	4798      	blx	r3
	descr->time                           = 0;
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	2200      	movs	r2, #0
    2bb6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2bb8:	68fb      	ldr	r3, [r7, #12]
    2bba:	4a05      	ldr	r2, [pc, #20]	; (2bd0 <timer_init+0x68>)
    2bbc:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2bbe:	2300      	movs	r3, #0
}
    2bc0:	4618      	mov	r0, r3
    2bc2:	3710      	adds	r7, #16
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd80      	pop	{r7, pc}
    2bc8:	0000f0e4 	.word	0x0000f0e4
    2bcc:	0000396d 	.word	0x0000396d
    2bd0:	00002f59 	.word	0x00002f59

00002bd4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b082      	sub	sp, #8
    2bd8:	af00      	add	r7, sp, #0
    2bda:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d005      	beq.n	2bee <timer_start+0x1a>
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d001      	beq.n	2bee <timer_start+0x1a>
    2bea:	2301      	movs	r3, #1
    2bec:	e000      	b.n	2bf0 <timer_start+0x1c>
    2bee:	2300      	movs	r3, #0
    2bf0:	f003 0301 	and.w	r3, r3, #1
    2bf4:	b2db      	uxtb	r3, r3
    2bf6:	2254      	movs	r2, #84	; 0x54
    2bf8:	490e      	ldr	r1, [pc, #56]	; (2c34 <timer_start+0x60>)
    2bfa:	4618      	mov	r0, r3
    2bfc:	4b0e      	ldr	r3, [pc, #56]	; (2c38 <timer_start+0x64>)
    2bfe:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	681b      	ldr	r3, [r3, #0]
    2c04:	699b      	ldr	r3, [r3, #24]
    2c06:	687a      	ldr	r2, [r7, #4]
    2c08:	3204      	adds	r2, #4
    2c0a:	4610      	mov	r0, r2
    2c0c:	4798      	blx	r3
    2c0e:	4603      	mov	r3, r0
    2c10:	2b00      	cmp	r3, #0
    2c12:	d002      	beq.n	2c1a <timer_start+0x46>
		return ERR_DENIED;
    2c14:	f06f 0310 	mvn.w	r3, #16
    2c18:	e007      	b.n	2c2a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	681b      	ldr	r3, [r3, #0]
    2c1e:	689b      	ldr	r3, [r3, #8]
    2c20:	687a      	ldr	r2, [r7, #4]
    2c22:	3204      	adds	r2, #4
    2c24:	4610      	mov	r0, r2
    2c26:	4798      	blx	r3

	return ERR_NONE;
    2c28:	2300      	movs	r3, #0
}
    2c2a:	4618      	mov	r0, r3
    2c2c:	3708      	adds	r7, #8
    2c2e:	46bd      	mov	sp, r7
    2c30:	bd80      	pop	{r7, pc}
    2c32:	bf00      	nop
    2c34:	0000f0e4 	.word	0x0000f0e4
    2c38:	0000396d 	.word	0x0000396d

00002c3c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b082      	sub	sp, #8
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	2b00      	cmp	r3, #0
    2c48:	d005      	beq.n	2c56 <timer_stop+0x1a>
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	681b      	ldr	r3, [r3, #0]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d001      	beq.n	2c56 <timer_stop+0x1a>
    2c52:	2301      	movs	r3, #1
    2c54:	e000      	b.n	2c58 <timer_stop+0x1c>
    2c56:	2300      	movs	r3, #0
    2c58:	f003 0301 	and.w	r3, r3, #1
    2c5c:	b2db      	uxtb	r3, r3
    2c5e:	2262      	movs	r2, #98	; 0x62
    2c60:	490f      	ldr	r1, [pc, #60]	; (2ca0 <timer_stop+0x64>)
    2c62:	4618      	mov	r0, r3
    2c64:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <timer_stop+0x68>)
    2c66:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	699b      	ldr	r3, [r3, #24]
    2c6e:	687a      	ldr	r2, [r7, #4]
    2c70:	3204      	adds	r2, #4
    2c72:	4610      	mov	r0, r2
    2c74:	4798      	blx	r3
    2c76:	4603      	mov	r3, r0
    2c78:	f083 0301 	eor.w	r3, r3, #1
    2c7c:	b2db      	uxtb	r3, r3
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d002      	beq.n	2c88 <timer_stop+0x4c>
		return ERR_DENIED;
    2c82:	f06f 0310 	mvn.w	r3, #16
    2c86:	e007      	b.n	2c98 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	68db      	ldr	r3, [r3, #12]
    2c8e:	687a      	ldr	r2, [r7, #4]
    2c90:	3204      	adds	r2, #4
    2c92:	4610      	mov	r0, r2
    2c94:	4798      	blx	r3

	return ERR_NONE;
    2c96:	2300      	movs	r3, #0
}
    2c98:	4618      	mov	r0, r3
    2c9a:	3708      	adds	r7, #8
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	0000f0e4 	.word	0x0000f0e4
    2ca4:	0000396d 	.word	0x0000396d

00002ca8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	6078      	str	r0, [r7, #4]
    2cb0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d008      	beq.n	2cca <timer_add_task+0x22>
    2cb8:	683b      	ldr	r3, [r7, #0]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d005      	beq.n	2cca <timer_add_task+0x22>
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d001      	beq.n	2cca <timer_add_task+0x22>
    2cc6:	2301      	movs	r3, #1
    2cc8:	e000      	b.n	2ccc <timer_add_task+0x24>
    2cca:	2300      	movs	r3, #0
    2ccc:	f003 0301 	and.w	r3, r3, #1
    2cd0:	b2db      	uxtb	r3, r3
    2cd2:	227b      	movs	r2, #123	; 0x7b
    2cd4:	492f      	ldr	r1, [pc, #188]	; (2d94 <timer_add_task+0xec>)
    2cd6:	4618      	mov	r0, r3
    2cd8:	4b2f      	ldr	r3, [pc, #188]	; (2d98 <timer_add_task+0xf0>)
    2cda:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	7f1b      	ldrb	r3, [r3, #28]
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	f043 0301 	orr.w	r3, r3, #1
    2ce6:	b2da      	uxtb	r2, r3
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	3318      	adds	r3, #24
    2cf0:	6839      	ldr	r1, [r7, #0]
    2cf2:	4618      	mov	r0, r3
    2cf4:	4b29      	ldr	r3, [pc, #164]	; (2d9c <timer_add_task+0xf4>)
    2cf6:	4798      	blx	r3
    2cf8:	4603      	mov	r3, r0
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d00f      	beq.n	2d1e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	7f1b      	ldrb	r3, [r3, #28]
    2d02:	b2db      	uxtb	r3, r3
    2d04:	f023 0301 	bic.w	r3, r3, #1
    2d08:	b2da      	uxtb	r2, r3
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2d0e:	2280      	movs	r2, #128	; 0x80
    2d10:	4920      	ldr	r1, [pc, #128]	; (2d94 <timer_add_task+0xec>)
    2d12:	2000      	movs	r0, #0
    2d14:	4b20      	ldr	r3, [pc, #128]	; (2d98 <timer_add_task+0xf0>)
    2d16:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2d18:	f06f 0311 	mvn.w	r3, #17
    2d1c:	e035      	b.n	2d8a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	695a      	ldr	r2, [r3, #20]
    2d22:	683b      	ldr	r3, [r7, #0]
    2d24:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	f103 0018 	add.w	r0, r3, #24
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	695b      	ldr	r3, [r3, #20]
    2d30:	461a      	mov	r2, r3
    2d32:	6839      	ldr	r1, [r7, #0]
    2d34:	4b1a      	ldr	r3, [pc, #104]	; (2da0 <timer_add_task+0xf8>)
    2d36:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	7f1b      	ldrb	r3, [r3, #28]
    2d3c:	b2db      	uxtb	r3, r3
    2d3e:	f023 0301 	bic.w	r3, r3, #1
    2d42:	b2da      	uxtb	r2, r3
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	7f1b      	ldrb	r3, [r3, #28]
    2d4c:	b2db      	uxtb	r3, r3
    2d4e:	f003 0302 	and.w	r3, r3, #2
    2d52:	2b00      	cmp	r3, #0
    2d54:	d018      	beq.n	2d88 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2d56:	f107 030c 	add.w	r3, r7, #12
    2d5a:	4618      	mov	r0, r3
    2d5c:	4b11      	ldr	r3, [pc, #68]	; (2da4 <timer_add_task+0xfc>)
    2d5e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d60:	687b      	ldr	r3, [r7, #4]
    2d62:	7f1b      	ldrb	r3, [r3, #28]
    2d64:	b2db      	uxtb	r3, r3
    2d66:	f023 0302 	bic.w	r3, r3, #2
    2d6a:	b2da      	uxtb	r2, r3
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	69db      	ldr	r3, [r3, #28]
    2d76:	687a      	ldr	r2, [r7, #4]
    2d78:	3204      	adds	r2, #4
    2d7a:	4610      	mov	r0, r2
    2d7c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d7e:	f107 030c 	add.w	r3, r7, #12
    2d82:	4618      	mov	r0, r3
    2d84:	4b08      	ldr	r3, [pc, #32]	; (2da8 <timer_add_task+0x100>)
    2d86:	4798      	blx	r3
	}

	return ERR_NONE;
    2d88:	2300      	movs	r3, #0
}
    2d8a:	4618      	mov	r0, r3
    2d8c:	3710      	adds	r7, #16
    2d8e:	46bd      	mov	sp, r7
    2d90:	bd80      	pop	{r7, pc}
    2d92:	bf00      	nop
    2d94:	0000f0e4 	.word	0x0000f0e4
    2d98:	0000396d 	.word	0x0000396d
    2d9c:	00003995 	.word	0x00003995
    2da0:	00002ea9 	.word	0x00002ea9
    2da4:	0000b4f5 	.word	0x0000b4f5
    2da8:	0000b51b 	.word	0x0000b51b

00002dac <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2dac:	b580      	push	{r7, lr}
    2dae:	b084      	sub	sp, #16
    2db0:	af00      	add	r7, sp, #0
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d008      	beq.n	2dce <timer_remove_task+0x22>
    2dbc:	683b      	ldr	r3, [r7, #0]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d005      	beq.n	2dce <timer_remove_task+0x22>
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	681b      	ldr	r3, [r3, #0]
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d001      	beq.n	2dce <timer_remove_task+0x22>
    2dca:	2301      	movs	r3, #1
    2dcc:	e000      	b.n	2dd0 <timer_remove_task+0x24>
    2dce:	2300      	movs	r3, #0
    2dd0:	f003 0301 	and.w	r3, r3, #1
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	2296      	movs	r2, #150	; 0x96
    2dd8:	492d      	ldr	r1, [pc, #180]	; (2e90 <timer_remove_task+0xe4>)
    2dda:	4618      	mov	r0, r3
    2ddc:	4b2d      	ldr	r3, [pc, #180]	; (2e94 <timer_remove_task+0xe8>)
    2dde:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	7f1b      	ldrb	r3, [r3, #28]
    2de4:	b2db      	uxtb	r3, r3
    2de6:	f043 0301 	orr.w	r3, r3, #1
    2dea:	b2da      	uxtb	r2, r3
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	3318      	adds	r3, #24
    2df4:	6839      	ldr	r1, [r7, #0]
    2df6:	4618      	mov	r0, r3
    2df8:	4b27      	ldr	r3, [pc, #156]	; (2e98 <timer_remove_task+0xec>)
    2dfa:	4798      	blx	r3
    2dfc:	4603      	mov	r3, r0
    2dfe:	f083 0301 	eor.w	r3, r3, #1
    2e02:	b2db      	uxtb	r3, r3
    2e04:	2b00      	cmp	r3, #0
    2e06:	d00f      	beq.n	2e28 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	7f1b      	ldrb	r3, [r3, #28]
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	f023 0301 	bic.w	r3, r3, #1
    2e12:	b2da      	uxtb	r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2e18:	229b      	movs	r2, #155	; 0x9b
    2e1a:	491d      	ldr	r1, [pc, #116]	; (2e90 <timer_remove_task+0xe4>)
    2e1c:	2000      	movs	r0, #0
    2e1e:	4b1d      	ldr	r3, [pc, #116]	; (2e94 <timer_remove_task+0xe8>)
    2e20:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2e22:	f06f 0309 	mvn.w	r3, #9
    2e26:	e02e      	b.n	2e86 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	3318      	adds	r3, #24
    2e2c:	6839      	ldr	r1, [r7, #0]
    2e2e:	4618      	mov	r0, r3
    2e30:	4b1a      	ldr	r3, [pc, #104]	; (2e9c <timer_remove_task+0xf0>)
    2e32:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	7f1b      	ldrb	r3, [r3, #28]
    2e38:	b2db      	uxtb	r3, r3
    2e3a:	f023 0301 	bic.w	r3, r3, #1
    2e3e:	b2da      	uxtb	r2, r3
    2e40:	687b      	ldr	r3, [r7, #4]
    2e42:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	7f1b      	ldrb	r3, [r3, #28]
    2e48:	b2db      	uxtb	r3, r3
    2e4a:	f003 0302 	and.w	r3, r3, #2
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d018      	beq.n	2e84 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    2e52:	f107 030c 	add.w	r3, r7, #12
    2e56:	4618      	mov	r0, r3
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <timer_remove_task+0xf4>)
    2e5a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	7f1b      	ldrb	r3, [r3, #28]
    2e60:	b2db      	uxtb	r3, r3
    2e62:	f023 0302 	bic.w	r3, r3, #2
    2e66:	b2da      	uxtb	r2, r3
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	681b      	ldr	r3, [r3, #0]
    2e70:	69db      	ldr	r3, [r3, #28]
    2e72:	687a      	ldr	r2, [r7, #4]
    2e74:	3204      	adds	r2, #4
    2e76:	4610      	mov	r0, r2
    2e78:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2e7a:	f107 030c 	add.w	r3, r7, #12
    2e7e:	4618      	mov	r0, r3
    2e80:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <timer_remove_task+0xf8>)
    2e82:	4798      	blx	r3
	}

	return ERR_NONE;
    2e84:	2300      	movs	r3, #0
}
    2e86:	4618      	mov	r0, r3
    2e88:	3710      	adds	r7, #16
    2e8a:	46bd      	mov	sp, r7
    2e8c:	bd80      	pop	{r7, pc}
    2e8e:	bf00      	nop
    2e90:	0000f0e4 	.word	0x0000f0e4
    2e94:	0000396d 	.word	0x0000396d
    2e98:	00003995 	.word	0x00003995
    2e9c:	00003af7 	.word	0x00003af7
    2ea0:	0000b4f5 	.word	0x0000b4f5
    2ea4:	0000b51b 	.word	0x0000b51b

00002ea8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2ea8:	b580      	push	{r7, lr}
    2eaa:	b088      	sub	sp, #32
    2eac:	af00      	add	r7, sp, #0
    2eae:	60f8      	str	r0, [r7, #12]
    2eb0:	60b9      	str	r1, [r7, #8]
    2eb2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2eb4:	2300      	movs	r3, #0
    2eb6:	61bb      	str	r3, [r7, #24]
    2eb8:	68f8      	ldr	r0, [r7, #12]
    2eba:	4b23      	ldr	r3, [pc, #140]	; (2f48 <timer_add_timer_task+0xa0>)
    2ebc:	4798      	blx	r3
    2ebe:	6138      	str	r0, [r7, #16]

	if (!head) {
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d104      	bne.n	2ed0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2ec6:	68b9      	ldr	r1, [r7, #8]
    2ec8:	68f8      	ldr	r0, [r7, #12]
    2eca:	4b20      	ldr	r3, [pc, #128]	; (2f4c <timer_add_timer_task+0xa4>)
    2ecc:	4798      	blx	r3
		return;
    2ece:	e037      	b.n	2f40 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	61fb      	str	r3, [r7, #28]
    2ed4:	e022      	b.n	2f1c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2ed6:	69fb      	ldr	r3, [r7, #28]
    2ed8:	685a      	ldr	r2, [r3, #4]
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	429a      	cmp	r2, r3
    2ede:	d808      	bhi.n	2ef2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2ee0:	69fb      	ldr	r3, [r7, #28]
    2ee2:	689a      	ldr	r2, [r3, #8]
    2ee4:	69fb      	ldr	r3, [r7, #28]
    2ee6:	6859      	ldr	r1, [r3, #4]
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	1acb      	subs	r3, r1, r3
    2eec:	4413      	add	r3, r2
    2eee:	617b      	str	r3, [r7, #20]
    2ef0:	e009      	b.n	2f06 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2ef2:	69fb      	ldr	r3, [r7, #28]
    2ef4:	689a      	ldr	r2, [r3, #8]
    2ef6:	69fb      	ldr	r3, [r7, #28]
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	441a      	add	r2, r3
    2efc:	687b      	ldr	r3, [r7, #4]
    2efe:	425b      	negs	r3, r3
    2f00:	4413      	add	r3, r2
    2f02:	3301      	adds	r3, #1
    2f04:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2f06:	68bb      	ldr	r3, [r7, #8]
    2f08:	689a      	ldr	r2, [r3, #8]
    2f0a:	697b      	ldr	r3, [r7, #20]
    2f0c:	429a      	cmp	r2, r3
    2f0e:	d909      	bls.n	2f24 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2f10:	69fb      	ldr	r3, [r7, #28]
    2f12:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2f14:	69f8      	ldr	r0, [r7, #28]
    2f16:	4b0e      	ldr	r3, [pc, #56]	; (2f50 <timer_add_timer_task+0xa8>)
    2f18:	4798      	blx	r3
    2f1a:	61f8      	str	r0, [r7, #28]
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d1d9      	bne.n	2ed6 <timer_add_timer_task+0x2e>
    2f22:	e000      	b.n	2f26 <timer_add_timer_task+0x7e>
			break;
    2f24:	bf00      	nop
	}

	if (it == head) {
    2f26:	69fa      	ldr	r2, [r7, #28]
    2f28:	693b      	ldr	r3, [r7, #16]
    2f2a:	429a      	cmp	r2, r3
    2f2c:	d104      	bne.n	2f38 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2f2e:	68b9      	ldr	r1, [r7, #8]
    2f30:	68f8      	ldr	r0, [r7, #12]
    2f32:	4b06      	ldr	r3, [pc, #24]	; (2f4c <timer_add_timer_task+0xa4>)
    2f34:	4798      	blx	r3
    2f36:	e003      	b.n	2f40 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2f38:	68b9      	ldr	r1, [r7, #8]
    2f3a:	69b8      	ldr	r0, [r7, #24]
    2f3c:	4b05      	ldr	r3, [pc, #20]	; (2f54 <timer_add_timer_task+0xac>)
    2f3e:	4798      	blx	r3
	}
}
    2f40:	3720      	adds	r7, #32
    2f42:	46bd      	mov	sp, r7
    2f44:	bd80      	pop	{r7, pc}
    2f46:	bf00      	nop
    2f48:	00002b2d 	.word	0x00002b2d
    2f4c:	000039cd 	.word	0x000039cd
    2f50:	00002b45 	.word	0x00002b45
    2f54:	00003a25 	.word	0x00003a25

00002f58 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	b086      	sub	sp, #24
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	3b04      	subs	r3, #4
    2f64:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2f66:	693b      	ldr	r3, [r7, #16]
    2f68:	3318      	adds	r3, #24
    2f6a:	4618      	mov	r0, r3
    2f6c:	4b27      	ldr	r3, [pc, #156]	; (300c <timer_process_counted+0xb4>)
    2f6e:	4798      	blx	r3
    2f70:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2f72:	693b      	ldr	r3, [r7, #16]
    2f74:	695b      	ldr	r3, [r3, #20]
    2f76:	1c5a      	adds	r2, r3, #1
    2f78:	693b      	ldr	r3, [r7, #16]
    2f7a:	615a      	str	r2, [r3, #20]
    2f7c:	693b      	ldr	r3, [r7, #16]
    2f7e:	695b      	ldr	r3, [r3, #20]
    2f80:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2f82:	693b      	ldr	r3, [r7, #16]
    2f84:	7f1b      	ldrb	r3, [r3, #28]
    2f86:	b2db      	uxtb	r3, r3
    2f88:	f003 0301 	and.w	r3, r3, #1
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d106      	bne.n	2f9e <timer_process_counted+0x46>
    2f90:	693b      	ldr	r3, [r7, #16]
    2f92:	7f1b      	ldrb	r3, [r3, #28]
    2f94:	b2db      	uxtb	r3, r3
    2f96:	f003 0302 	and.w	r3, r3, #2
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d027      	beq.n	2fee <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f9e:	693b      	ldr	r3, [r7, #16]
    2fa0:	7f1b      	ldrb	r3, [r3, #28]
    2fa2:	b2db      	uxtb	r3, r3
    2fa4:	f043 0302 	orr.w	r3, r3, #2
    2fa8:	b2da      	uxtb	r2, r3
    2faa:	693b      	ldr	r3, [r7, #16]
    2fac:	771a      	strb	r2, [r3, #28]
		return;
    2fae:	e029      	b.n	3004 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2fb0:	697b      	ldr	r3, [r7, #20]
    2fb2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2fb4:	693b      	ldr	r3, [r7, #16]
    2fb6:	3318      	adds	r3, #24
    2fb8:	4618      	mov	r0, r3
    2fba:	4b15      	ldr	r3, [pc, #84]	; (3010 <timer_process_counted+0xb8>)
    2fbc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2fbe:	68bb      	ldr	r3, [r7, #8]
    2fc0:	7c1b      	ldrb	r3, [r3, #16]
    2fc2:	2b01      	cmp	r3, #1
    2fc4:	d109      	bne.n	2fda <timer_process_counted+0x82>
			tmp->time_label = time;
    2fc6:	68bb      	ldr	r3, [r7, #8]
    2fc8:	68fa      	ldr	r2, [r7, #12]
    2fca:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2fcc:	693b      	ldr	r3, [r7, #16]
    2fce:	3318      	adds	r3, #24
    2fd0:	68fa      	ldr	r2, [r7, #12]
    2fd2:	68b9      	ldr	r1, [r7, #8]
    2fd4:	4618      	mov	r0, r3
    2fd6:	4b0f      	ldr	r3, [pc, #60]	; (3014 <timer_process_counted+0xbc>)
    2fd8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2fda:	693b      	ldr	r3, [r7, #16]
    2fdc:	3318      	adds	r3, #24
    2fde:	4618      	mov	r0, r3
    2fe0:	4b0a      	ldr	r3, [pc, #40]	; (300c <timer_process_counted+0xb4>)
    2fe2:	4798      	blx	r3
    2fe4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2fe6:	68bb      	ldr	r3, [r7, #8]
    2fe8:	68db      	ldr	r3, [r3, #12]
    2fea:	68b8      	ldr	r0, [r7, #8]
    2fec:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2fee:	697b      	ldr	r3, [r7, #20]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d007      	beq.n	3004 <timer_process_counted+0xac>
    2ff4:	697b      	ldr	r3, [r7, #20]
    2ff6:	685b      	ldr	r3, [r3, #4]
    2ff8:	68fa      	ldr	r2, [r7, #12]
    2ffa:	1ad2      	subs	r2, r2, r3
    2ffc:	697b      	ldr	r3, [r7, #20]
    2ffe:	689b      	ldr	r3, [r3, #8]
    3000:	429a      	cmp	r2, r3
    3002:	d2d5      	bcs.n	2fb0 <timer_process_counted+0x58>
	}
}
    3004:	3718      	adds	r7, #24
    3006:	46bd      	mov	sp, r7
    3008:	bd80      	pop	{r7, pc}
    300a:	bf00      	nop
    300c:	00002b2d 	.word	0x00002b2d
    3010:	00003ac5 	.word	0x00003ac5
    3014:	00002ea9 	.word	0x00002ea9

00003018 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3018:	b480      	push	{r7}
    301a:	b085      	sub	sp, #20
    301c:	af00      	add	r7, sp, #0
    301e:	4603      	mov	r3, r0
    3020:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3022:	2300      	movs	r3, #0
    3024:	73fb      	strb	r3, [r7, #15]
    3026:	e029      	b.n	307c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3028:	f997 300f 	ldrsb.w	r3, [r7, #15]
    302c:	4a19      	ldr	r2, [pc, #100]	; (3094 <_usb_d_find_ep+0x7c>)
    302e:	015b      	lsls	r3, r3, #5
    3030:	4413      	add	r3, r2
    3032:	3301      	adds	r3, #1
    3034:	781b      	ldrb	r3, [r3, #0]
    3036:	79fa      	ldrb	r2, [r7, #7]
    3038:	429a      	cmp	r2, r3
    303a:	d102      	bne.n	3042 <_usb_d_find_ep+0x2a>
			return i;
    303c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3040:	e022      	b.n	3088 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3042:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3046:	4a13      	ldr	r2, [pc, #76]	; (3094 <_usb_d_find_ep+0x7c>)
    3048:	015b      	lsls	r3, r3, #5
    304a:	4413      	add	r3, r2
    304c:	781b      	ldrb	r3, [r3, #0]
    304e:	2b00      	cmp	r3, #0
    3050:	d10e      	bne.n	3070 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3052:	79fb      	ldrb	r3, [r7, #7]
    3054:	f003 030f 	and.w	r3, r3, #15
    3058:	f997 200f 	ldrsb.w	r2, [r7, #15]
    305c:	490d      	ldr	r1, [pc, #52]	; (3094 <_usb_d_find_ep+0x7c>)
    305e:	0152      	lsls	r2, r2, #5
    3060:	440a      	add	r2, r1
    3062:	3201      	adds	r2, #1
    3064:	7812      	ldrb	r2, [r2, #0]
    3066:	4293      	cmp	r3, r2
    3068:	d102      	bne.n	3070 <_usb_d_find_ep+0x58>
			return i;
    306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    306e:	e00b      	b.n	3088 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3070:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3074:	b2db      	uxtb	r3, r3
    3076:	3301      	adds	r3, #1
    3078:	b2db      	uxtb	r3, r3
    307a:	73fb      	strb	r3, [r7, #15]
    307c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3080:	2b03      	cmp	r3, #3
    3082:	ddd1      	ble.n	3028 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3084:	f04f 33ff 	mov.w	r3, #4294967295
}
    3088:	4618      	mov	r0, r3
    308a:	3714      	adds	r7, #20
    308c:	46bd      	mov	sp, r7
    308e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3092:	4770      	bx	lr
    3094:	20000834 	.word	0x20000834

00003098 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3098:	b580      	push	{r7, lr}
    309a:	b088      	sub	sp, #32
    309c:	af00      	add	r7, sp, #0
    309e:	60ba      	str	r2, [r7, #8]
    30a0:	607b      	str	r3, [r7, #4]
    30a2:	4603      	mov	r3, r0
    30a4:	73fb      	strb	r3, [r7, #15]
    30a6:	460b      	mov	r3, r1
    30a8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    30aa:	68bb      	ldr	r3, [r7, #8]
    30ac:	617b      	str	r3, [r7, #20]
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	61bb      	str	r3, [r7, #24]
    30b2:	7bbb      	ldrb	r3, [r7, #14]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d004      	beq.n	30c2 <_usb_d_trans+0x2a>
    30b8:	7bfb      	ldrb	r3, [r7, #15]
    30ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    30be:	b2db      	uxtb	r3, r3
    30c0:	e003      	b.n	30ca <_usb_d_trans+0x32>
    30c2:	7bfb      	ldrb	r3, [r7, #15]
    30c4:	f003 030f 	and.w	r3, r3, #15
    30c8:	b2db      	uxtb	r3, r3
    30ca:	773b      	strb	r3, [r7, #28]
    30cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    30d0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    30d2:	f107 0314 	add.w	r3, r7, #20
    30d6:	4618      	mov	r0, r3
    30d8:	4b03      	ldr	r3, [pc, #12]	; (30e8 <_usb_d_trans+0x50>)
    30da:	4798      	blx	r3
    30dc:	4603      	mov	r3, r0
}
    30de:	4618      	mov	r0, r3
    30e0:	3720      	adds	r7, #32
    30e2:	46bd      	mov	sp, r7
    30e4:	bd80      	pop	{r7, pc}
    30e6:	bf00      	nop
    30e8:	0000ab29 	.word	0x0000ab29

000030ec <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    30ec:	b480      	push	{r7}
    30ee:	b085      	sub	sp, #20
    30f0:	af00      	add	r7, sp, #0
    30f2:	60f8      	str	r0, [r7, #12]
    30f4:	60b9      	str	r1, [r7, #8]
    30f6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    30f8:	2300      	movs	r3, #0
}
    30fa:	4618      	mov	r0, r3
    30fc:	3714      	adds	r7, #20
    30fe:	46bd      	mov	sp, r7
    3100:	f85d 7b04 	ldr.w	r7, [sp], #4
    3104:	4770      	bx	lr
	...

00003108 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3108:	b580      	push	{r7, lr}
    310a:	b086      	sub	sp, #24
    310c:	af00      	add	r7, sp, #0
    310e:	4603      	mov	r3, r0
    3110:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3112:	79fb      	ldrb	r3, [r7, #7]
    3114:	4618      	mov	r0, r3
    3116:	4b2a      	ldr	r3, [pc, #168]	; (31c0 <usb_d_cb_trans_setup+0xb8>)
    3118:	4798      	blx	r3
    311a:	4603      	mov	r3, r0
    311c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3122:	015b      	lsls	r3, r3, #5
    3124:	4a27      	ldr	r2, [pc, #156]	; (31c4 <usb_d_cb_trans_setup+0xbc>)
    3126:	4413      	add	r3, r2
    3128:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    312a:	693b      	ldr	r3, [r7, #16]
    312c:	330c      	adds	r3, #12
    312e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3130:	79fb      	ldrb	r3, [r7, #7]
    3132:	68f9      	ldr	r1, [r7, #12]
    3134:	4618      	mov	r0, r3
    3136:	4b24      	ldr	r3, [pc, #144]	; (31c8 <usb_d_cb_trans_setup+0xc0>)
    3138:	4798      	blx	r3
    313a:	4603      	mov	r3, r0
    313c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    313e:	7afb      	ldrb	r3, [r7, #11]
    3140:	2b08      	cmp	r3, #8
    3142:	d00d      	beq.n	3160 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3144:	79fb      	ldrb	r3, [r7, #7]
    3146:	2101      	movs	r1, #1
    3148:	4618      	mov	r0, r3
    314a:	4b20      	ldr	r3, [pc, #128]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    314c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    314e:	79fb      	ldrb	r3, [r7, #7]
    3150:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3154:	b2db      	uxtb	r3, r3
    3156:	2101      	movs	r1, #1
    3158:	4618      	mov	r0, r3
    315a:	4b1c      	ldr	r3, [pc, #112]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    315c:	4798      	blx	r3
		return;
    315e:	e02b      	b.n	31b8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3160:	79fb      	ldrb	r3, [r7, #7]
    3162:	2100      	movs	r1, #0
    3164:	4618      	mov	r0, r3
    3166:	4b19      	ldr	r3, [pc, #100]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    3168:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    316a:	79fb      	ldrb	r3, [r7, #7]
    316c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3170:	b2db      	uxtb	r3, r3
    3172:	2100      	movs	r1, #0
    3174:	4618      	mov	r0, r3
    3176:	4b15      	ldr	r3, [pc, #84]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    3178:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    317a:	693b      	ldr	r3, [r7, #16]
    317c:	2201      	movs	r2, #1
    317e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3180:	693b      	ldr	r3, [r7, #16]
    3182:	695b      	ldr	r3, [r3, #20]
    3184:	79fa      	ldrb	r2, [r7, #7]
    3186:	68f9      	ldr	r1, [r7, #12]
    3188:	4610      	mov	r0, r2
    318a:	4798      	blx	r3
    318c:	4603      	mov	r3, r0
    318e:	f083 0301 	eor.w	r3, r3, #1
    3192:	b2db      	uxtb	r3, r3
    3194:	2b00      	cmp	r3, #0
    3196:	d00f      	beq.n	31b8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3198:	693b      	ldr	r3, [r7, #16]
    319a:	2205      	movs	r2, #5
    319c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    319e:	79fb      	ldrb	r3, [r7, #7]
    31a0:	2101      	movs	r1, #1
    31a2:	4618      	mov	r0, r3
    31a4:	4b09      	ldr	r3, [pc, #36]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    31a6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    31a8:	79fb      	ldrb	r3, [r7, #7]
    31aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31ae:	b2db      	uxtb	r3, r3
    31b0:	2101      	movs	r1, #1
    31b2:	4618      	mov	r0, r3
    31b4:	4b05      	ldr	r3, [pc, #20]	; (31cc <usb_d_cb_trans_setup+0xc4>)
    31b6:	4798      	blx	r3
	}
}
    31b8:	3718      	adds	r7, #24
    31ba:	46bd      	mov	sp, r7
    31bc:	bd80      	pop	{r7, pc}
    31be:	bf00      	nop
    31c0:	00003019 	.word	0x00003019
    31c4:	20000834 	.word	0x20000834
    31c8:	0000aa81 	.word	0x0000aa81
    31cc:	0000a8f9 	.word	0x0000a8f9

000031d0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b084      	sub	sp, #16
    31d4:	af00      	add	r7, sp, #0
    31d6:	4603      	mov	r3, r0
    31d8:	6039      	str	r1, [r7, #0]
    31da:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31dc:	79fb      	ldrb	r3, [r7, #7]
    31de:	4618      	mov	r0, r3
    31e0:	4b0d      	ldr	r3, [pc, #52]	; (3218 <usb_d_cb_trans_more+0x48>)
    31e2:	4798      	blx	r3
    31e4:	4603      	mov	r3, r0
    31e6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    31ec:	015b      	lsls	r3, r3, #5
    31ee:	4a0b      	ldr	r2, [pc, #44]	; (321c <usb_d_cb_trans_more+0x4c>)
    31f0:	4413      	add	r3, r2
    31f2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    31f4:	68bb      	ldr	r3, [r7, #8]
    31f6:	789b      	ldrb	r3, [r3, #2]
    31f8:	2b03      	cmp	r3, #3
    31fa:	d107      	bne.n	320c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    31fc:	68bb      	ldr	r3, [r7, #8]
    31fe:	699b      	ldr	r3, [r3, #24]
    3200:	79fa      	ldrb	r2, [r7, #7]
    3202:	6839      	ldr	r1, [r7, #0]
    3204:	4610      	mov	r0, r2
    3206:	4798      	blx	r3
    3208:	4603      	mov	r3, r0
    320a:	e000      	b.n	320e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    320c:	2300      	movs	r3, #0
}
    320e:	4618      	mov	r0, r3
    3210:	3710      	adds	r7, #16
    3212:	46bd      	mov	sp, r7
    3214:	bd80      	pop	{r7, pc}
    3216:	bf00      	nop
    3218:	00003019 	.word	0x00003019
    321c:	20000834 	.word	0x20000834

00003220 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3220:	b590      	push	{r4, r7, lr}
    3222:	b087      	sub	sp, #28
    3224:	af02      	add	r7, sp, #8
    3226:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	789b      	ldrb	r3, [r3, #2]
    322c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	7b1b      	ldrb	r3, [r3, #12]
    3232:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3236:	2b00      	cmp	r3, #0
    3238:	bf14      	ite	ne
    323a:	2301      	movne	r3, #1
    323c:	2300      	moveq	r3, #0
    323e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3240:	7bfb      	ldrb	r3, [r7, #15]
    3242:	2b03      	cmp	r3, #3
    3244:	d13a      	bne.n	32bc <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	69db      	ldr	r3, [r3, #28]
    324a:	687a      	ldr	r2, [r7, #4]
    324c:	7850      	ldrb	r0, [r2, #1]
    324e:	687a      	ldr	r2, [r7, #4]
    3250:	320c      	adds	r2, #12
    3252:	2101      	movs	r1, #1
    3254:	4798      	blx	r3
    3256:	4603      	mov	r3, r0
    3258:	737b      	strb	r3, [r7, #13]
		if (err) {
    325a:	7b7b      	ldrb	r3, [r7, #13]
    325c:	2b00      	cmp	r3, #0
    325e:	d015      	beq.n	328c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	2205      	movs	r2, #5
    3264:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	2202      	movs	r2, #2
    326a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    326c:	7bbb      	ldrb	r3, [r7, #14]
    326e:	2b00      	cmp	r3, #0
    3270:	d002      	beq.n	3278 <usb_d_ctrl_trans_done+0x58>
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	785b      	ldrb	r3, [r3, #1]
    3276:	e004      	b.n	3282 <usb_d_ctrl_trans_done+0x62>
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	785b      	ldrb	r3, [r3, #1]
    327c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3280:	b2db      	uxtb	r3, r3
    3282:	2101      	movs	r1, #1
    3284:	4618      	mov	r0, r3
    3286:	4b15      	ldr	r3, [pc, #84]	; (32dc <usb_d_ctrl_trans_done+0xbc>)
    3288:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    328a:	e022      	b.n	32d2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	2204      	movs	r2, #4
    3290:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	7858      	ldrb	r0, [r3, #1]
    3296:	7bbb      	ldrb	r3, [r7, #14]
    3298:	2b00      	cmp	r3, #0
    329a:	bf14      	ite	ne
    329c:	2301      	movne	r3, #1
    329e:	2300      	moveq	r3, #0
    32a0:	b2db      	uxtb	r3, r3
    32a2:	f083 0301 	eor.w	r3, r3, #1
    32a6:	b2db      	uxtb	r3, r3
    32a8:	f003 0301 	and.w	r3, r3, #1
    32ac:	b2d9      	uxtb	r1, r3
    32ae:	2301      	movs	r3, #1
    32b0:	9300      	str	r3, [sp, #0]
    32b2:	2300      	movs	r3, #0
    32b4:	2200      	movs	r2, #0
    32b6:	4c0a      	ldr	r4, [pc, #40]	; (32e0 <usb_d_ctrl_trans_done+0xc0>)
    32b8:	47a0      	blx	r4
}
    32ba:	e00a      	b.n	32d2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	69db      	ldr	r3, [r3, #28]
    32c0:	687a      	ldr	r2, [r7, #4]
    32c2:	7850      	ldrb	r0, [r2, #1]
    32c4:	687a      	ldr	r2, [r7, #4]
    32c6:	320c      	adds	r2, #12
    32c8:	2100      	movs	r1, #0
    32ca:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	2202      	movs	r2, #2
    32d0:	709a      	strb	r2, [r3, #2]
}
    32d2:	bf00      	nop
    32d4:	3714      	adds	r7, #20
    32d6:	46bd      	mov	sp, r7
    32d8:	bd90      	pop	{r4, r7, pc}
    32da:	bf00      	nop
    32dc:	0000a8f9 	.word	0x0000a8f9
    32e0:	00003099 	.word	0x00003099

000032e4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	b086      	sub	sp, #24
    32e8:	af00      	add	r7, sp, #0
    32ea:	4603      	mov	r3, r0
    32ec:	60b9      	str	r1, [r7, #8]
    32ee:	607a      	str	r2, [r7, #4]
    32f0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    32f2:	7bfb      	ldrb	r3, [r7, #15]
    32f4:	4618      	mov	r0, r3
    32f6:	4b2f      	ldr	r3, [pc, #188]	; (33b4 <_usb_d_cb_trans_done+0xd0>)
    32f8:	4798      	blx	r3
    32fa:	4603      	mov	r3, r0
    32fc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    32fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3302:	015b      	lsls	r3, r3, #5
    3304:	4a2c      	ldr	r2, [pc, #176]	; (33b8 <_usb_d_cb_trans_done+0xd4>)
    3306:	4413      	add	r3, r2
    3308:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    330a:	68bb      	ldr	r3, [r7, #8]
    330c:	2b00      	cmp	r3, #0
    330e:	d10e      	bne.n	332e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3310:	693b      	ldr	r3, [r7, #16]
    3312:	2200      	movs	r2, #0
    3314:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3316:	693b      	ldr	r3, [r7, #16]
    3318:	781b      	ldrb	r3, [r3, #0]
    331a:	2b00      	cmp	r3, #0
    331c:	d103      	bne.n	3326 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    331e:	6938      	ldr	r0, [r7, #16]
    3320:	4b26      	ldr	r3, [pc, #152]	; (33bc <_usb_d_cb_trans_done+0xd8>)
    3322:	4798      	blx	r3
			return;
    3324:	e043      	b.n	33ae <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3326:	693b      	ldr	r3, [r7, #16]
    3328:	2201      	movs	r2, #1
    332a:	709a      	strb	r2, [r3, #2]
    332c:	e038      	b.n	33a0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    332e:	68bb      	ldr	r3, [r7, #8]
    3330:	2b01      	cmp	r3, #1
    3332:	d113      	bne.n	335c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3334:	693b      	ldr	r3, [r7, #16]
    3336:	2202      	movs	r2, #2
    3338:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    333a:	693b      	ldr	r3, [r7, #16]
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	2b00      	cmp	r3, #0
    3340:	d108      	bne.n	3354 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3342:	693b      	ldr	r3, [r7, #16]
    3344:	2202      	movs	r2, #2
    3346:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3348:	7bfb      	ldrb	r3, [r7, #15]
    334a:	2100      	movs	r1, #0
    334c:	4618      	mov	r0, r3
    334e:	4b1c      	ldr	r3, [pc, #112]	; (33c0 <_usb_d_cb_trans_done+0xdc>)
    3350:	4798      	blx	r3
    3352:	e025      	b.n	33a0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3354:	693b      	ldr	r3, [r7, #16]
    3356:	2205      	movs	r2, #5
    3358:	709a      	strb	r2, [r3, #2]
    335a:	e021      	b.n	33a0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    335c:	68bb      	ldr	r3, [r7, #8]
    335e:	2b02      	cmp	r3, #2
    3360:	d10e      	bne.n	3380 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3362:	693b      	ldr	r3, [r7, #16]
    3364:	2204      	movs	r2, #4
    3366:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3368:	693b      	ldr	r3, [r7, #16]
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	2b00      	cmp	r3, #0
    336e:	d103      	bne.n	3378 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3370:	693b      	ldr	r3, [r7, #16]
    3372:	2202      	movs	r2, #2
    3374:	709a      	strb	r2, [r3, #2]
			return;
    3376:	e01a      	b.n	33ae <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3378:	693b      	ldr	r3, [r7, #16]
    337a:	2201      	movs	r2, #1
    337c:	709a      	strb	r2, [r3, #2]
    337e:	e00f      	b.n	33a0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3380:	68bb      	ldr	r3, [r7, #8]
    3382:	2b03      	cmp	r3, #3
    3384:	d106      	bne.n	3394 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3386:	693b      	ldr	r3, [r7, #16]
    3388:	2200      	movs	r2, #0
    338a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    338c:	693b      	ldr	r3, [r7, #16]
    338e:	2205      	movs	r2, #5
    3390:	70da      	strb	r2, [r3, #3]
    3392:	e005      	b.n	33a0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3394:	693b      	ldr	r3, [r7, #16]
    3396:	2206      	movs	r2, #6
    3398:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    339a:	693b      	ldr	r3, [r7, #16]
    339c:	2206      	movs	r2, #6
    339e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    33a0:	693b      	ldr	r3, [r7, #16]
    33a2:	69db      	ldr	r3, [r3, #28]
    33a4:	693a      	ldr	r2, [r7, #16]
    33a6:	78d1      	ldrb	r1, [r2, #3]
    33a8:	687a      	ldr	r2, [r7, #4]
    33aa:	7bf8      	ldrb	r0, [r7, #15]
    33ac:	4798      	blx	r3
}
    33ae:	3718      	adds	r7, #24
    33b0:	46bd      	mov	sp, r7
    33b2:	bd80      	pop	{r7, pc}
    33b4:	00003019 	.word	0x00003019
    33b8:	20000834 	.word	0x20000834
    33bc:	00003221 	.word	0x00003221
    33c0:	0000a8f9 	.word	0x0000a8f9

000033c4 <usb_d_init>:

int32_t usb_d_init(void)
{
    33c4:	b580      	push	{r7, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    33ca:	4b21      	ldr	r3, [pc, #132]	; (3450 <usb_d_init+0x8c>)
    33cc:	4798      	blx	r3
    33ce:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    33d0:	683b      	ldr	r3, [r7, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	da01      	bge.n	33da <usb_d_init+0x16>
		return rc;
    33d6:	683b      	ldr	r3, [r7, #0]
    33d8:	e036      	b.n	3448 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    33da:	2280      	movs	r2, #128	; 0x80
    33dc:	2100      	movs	r1, #0
    33de:	481d      	ldr	r0, [pc, #116]	; (3454 <usb_d_init+0x90>)
    33e0:	4b1d      	ldr	r3, [pc, #116]	; (3458 <usb_d_init+0x94>)
    33e2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    33e4:	2300      	movs	r3, #0
    33e6:	71fb      	strb	r3, [r7, #7]
    33e8:	e01e      	b.n	3428 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    33ea:	79fb      	ldrb	r3, [r7, #7]
    33ec:	4a19      	ldr	r2, [pc, #100]	; (3454 <usb_d_init+0x90>)
    33ee:	015b      	lsls	r3, r3, #5
    33f0:	4413      	add	r3, r2
    33f2:	3301      	adds	r3, #1
    33f4:	22ff      	movs	r2, #255	; 0xff
    33f6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    33f8:	79fb      	ldrb	r3, [r7, #7]
    33fa:	4a16      	ldr	r2, [pc, #88]	; (3454 <usb_d_init+0x90>)
    33fc:	015b      	lsls	r3, r3, #5
    33fe:	4413      	add	r3, r2
    3400:	3314      	adds	r3, #20
    3402:	4a16      	ldr	r2, [pc, #88]	; (345c <usb_d_init+0x98>)
    3404:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3406:	79fb      	ldrb	r3, [r7, #7]
    3408:	4a12      	ldr	r2, [pc, #72]	; (3454 <usb_d_init+0x90>)
    340a:	015b      	lsls	r3, r3, #5
    340c:	4413      	add	r3, r2
    340e:	3318      	adds	r3, #24
    3410:	4a12      	ldr	r2, [pc, #72]	; (345c <usb_d_init+0x98>)
    3412:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3414:	79fb      	ldrb	r3, [r7, #7]
    3416:	4a0f      	ldr	r2, [pc, #60]	; (3454 <usb_d_init+0x90>)
    3418:	015b      	lsls	r3, r3, #5
    341a:	4413      	add	r3, r2
    341c:	331c      	adds	r3, #28
    341e:	4a0f      	ldr	r2, [pc, #60]	; (345c <usb_d_init+0x98>)
    3420:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3422:	79fb      	ldrb	r3, [r7, #7]
    3424:	3301      	adds	r3, #1
    3426:	71fb      	strb	r3, [r7, #7]
    3428:	79fb      	ldrb	r3, [r7, #7]
    342a:	2b03      	cmp	r3, #3
    342c:	d9dd      	bls.n	33ea <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    342e:	490c      	ldr	r1, [pc, #48]	; (3460 <usb_d_init+0x9c>)
    3430:	2000      	movs	r0, #0
    3432:	4b0c      	ldr	r3, [pc, #48]	; (3464 <usb_d_init+0xa0>)
    3434:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3436:	490c      	ldr	r1, [pc, #48]	; (3468 <usb_d_init+0xa4>)
    3438:	2001      	movs	r0, #1
    343a:	4b0a      	ldr	r3, [pc, #40]	; (3464 <usb_d_init+0xa0>)
    343c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    343e:	490b      	ldr	r1, [pc, #44]	; (346c <usb_d_init+0xa8>)
    3440:	2002      	movs	r0, #2
    3442:	4b08      	ldr	r3, [pc, #32]	; (3464 <usb_d_init+0xa0>)
    3444:	4798      	blx	r3
	return ERR_NONE;
    3446:	2300      	movs	r3, #0
}
    3448:	4618      	mov	r0, r3
    344a:	3708      	adds	r7, #8
    344c:	46bd      	mov	sp, r7
    344e:	bd80      	pop	{r7, pc}
    3450:	0000a141 	.word	0x0000a141
    3454:	20000834 	.word	0x20000834
    3458:	0000ecf1 	.word	0x0000ecf1
    345c:	000030ed 	.word	0x000030ed
    3460:	00003109 	.word	0x00003109
    3464:	0000ad89 	.word	0x0000ad89
    3468:	000031d1 	.word	0x000031d1
    346c:	000032e5 	.word	0x000032e5

00003470 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3470:	b580      	push	{r7, lr}
    3472:	b082      	sub	sp, #8
    3474:	af00      	add	r7, sp, #0
    3476:	4603      	mov	r3, r0
    3478:	6039      	str	r1, [r7, #0]
    347a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    347c:	79fb      	ldrb	r3, [r7, #7]
    347e:	6839      	ldr	r1, [r7, #0]
    3480:	4618      	mov	r0, r3
    3482:	4b03      	ldr	r3, [pc, #12]	; (3490 <usb_d_register_callback+0x20>)
    3484:	4798      	blx	r3
}
    3486:	bf00      	nop
    3488:	3708      	adds	r7, #8
    348a:	46bd      	mov	sp, r7
    348c:	bd80      	pop	{r7, pc}
    348e:	bf00      	nop
    3490:	0000ad41 	.word	0x0000ad41

00003494 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3494:	b580      	push	{r7, lr}
    3496:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3498:	4b02      	ldr	r3, [pc, #8]	; (34a4 <usb_d_enable+0x10>)
    349a:	4798      	blx	r3
    349c:	4603      	mov	r3, r0
}
    349e:	4618      	mov	r0, r3
    34a0:	bd80      	pop	{r7, pc}
    34a2:	bf00      	nop
    34a4:	0000a231 	.word	0x0000a231

000034a8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    34a8:	b580      	push	{r7, lr}
    34aa:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    34ac:	4b01      	ldr	r3, [pc, #4]	; (34b4 <usb_d_attach+0xc>)
    34ae:	4798      	blx	r3
}
    34b0:	bf00      	nop
    34b2:	bd80      	pop	{r7, pc}
    34b4:	0000a2b5 	.word	0x0000a2b5

000034b8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b082      	sub	sp, #8
    34bc:	af00      	add	r7, sp, #0
    34be:	4603      	mov	r3, r0
    34c0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    34c2:	79fb      	ldrb	r3, [r7, #7]
    34c4:	4618      	mov	r0, r3
    34c6:	4b03      	ldr	r3, [pc, #12]	; (34d4 <usb_d_set_address+0x1c>)
    34c8:	4798      	blx	r3
}
    34ca:	bf00      	nop
    34cc:	3708      	adds	r7, #8
    34ce:	46bd      	mov	sp, r7
    34d0:	bd80      	pop	{r7, pc}
    34d2:	bf00      	nop
    34d4:	0000a2c9 	.word	0x0000a2c9

000034d8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    34d8:	b580      	push	{r7, lr}
    34da:	b082      	sub	sp, #8
    34dc:	af00      	add	r7, sp, #0
    34de:	4603      	mov	r3, r0
    34e0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    34e2:	79fb      	ldrb	r3, [r7, #7]
    34e4:	b29b      	uxth	r3, r3
    34e6:	461a      	mov	r2, r3
    34e8:	2100      	movs	r1, #0
    34ea:	2000      	movs	r0, #0
    34ec:	4b03      	ldr	r3, [pc, #12]	; (34fc <usb_d_ep0_init+0x24>)
    34ee:	4798      	blx	r3
    34f0:	4603      	mov	r3, r0
}
    34f2:	4618      	mov	r0, r3
    34f4:	3708      	adds	r7, #8
    34f6:	46bd      	mov	sp, r7
    34f8:	bd80      	pop	{r7, pc}
    34fa:	bf00      	nop
    34fc:	00003501 	.word	0x00003501

00003500 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3500:	b580      	push	{r7, lr}
    3502:	b086      	sub	sp, #24
    3504:	af00      	add	r7, sp, #0
    3506:	4603      	mov	r3, r0
    3508:	71fb      	strb	r3, [r7, #7]
    350a:	460b      	mov	r3, r1
    350c:	71bb      	strb	r3, [r7, #6]
    350e:	4613      	mov	r3, r2
    3510:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3512:	79fb      	ldrb	r3, [r7, #7]
    3514:	4618      	mov	r0, r3
    3516:	4b1e      	ldr	r3, [pc, #120]	; (3590 <usb_d_ep_init+0x90>)
    3518:	4798      	blx	r3
    351a:	4603      	mov	r3, r0
    351c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    351e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3522:	015b      	lsls	r3, r3, #5
    3524:	4a1b      	ldr	r2, [pc, #108]	; (3594 <usb_d_ep_init+0x94>)
    3526:	4413      	add	r3, r2
    3528:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    352a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    352e:	2b00      	cmp	r3, #0
    3530:	db02      	blt.n	3538 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3532:	f06f 0313 	mvn.w	r3, #19
    3536:	e027      	b.n	3588 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3538:	20ff      	movs	r0, #255	; 0xff
    353a:	4b15      	ldr	r3, [pc, #84]	; (3590 <usb_d_ep_init+0x90>)
    353c:	4798      	blx	r3
    353e:	4603      	mov	r3, r0
    3540:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3542:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3546:	2b00      	cmp	r3, #0
    3548:	da02      	bge.n	3550 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    354a:	f06f 0314 	mvn.w	r3, #20
    354e:	e01b      	b.n	3588 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3550:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3554:	015b      	lsls	r3, r3, #5
    3556:	4a0f      	ldr	r2, [pc, #60]	; (3594 <usb_d_ep_init+0x94>)
    3558:	4413      	add	r3, r2
    355a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    355c:	88ba      	ldrh	r2, [r7, #4]
    355e:	79b9      	ldrb	r1, [r7, #6]
    3560:	79fb      	ldrb	r3, [r7, #7]
    3562:	4618      	mov	r0, r3
    3564:	4b0c      	ldr	r3, [pc, #48]	; (3598 <usb_d_ep_init+0x98>)
    3566:	4798      	blx	r3
    3568:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	2b00      	cmp	r3, #0
    356e:	da01      	bge.n	3574 <usb_d_ep_init+0x74>
		return rc;
    3570:	68fb      	ldr	r3, [r7, #12]
    3572:	e009      	b.n	3588 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3574:	693b      	ldr	r3, [r7, #16]
    3576:	79fa      	ldrb	r2, [r7, #7]
    3578:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    357a:	79bb      	ldrb	r3, [r7, #6]
    357c:	f003 0303 	and.w	r3, r3, #3
    3580:	b2da      	uxtb	r2, r3
    3582:	693b      	ldr	r3, [r7, #16]
    3584:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3586:	2300      	movs	r3, #0
}
    3588:	4618      	mov	r0, r3
    358a:	3718      	adds	r7, #24
    358c:	46bd      	mov	sp, r7
    358e:	bd80      	pop	{r7, pc}
    3590:	00003019 	.word	0x00003019
    3594:	20000834 	.word	0x20000834
    3598:	0000a369 	.word	0x0000a369

0000359c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	4603      	mov	r3, r0
    35a4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35a6:	79fb      	ldrb	r3, [r7, #7]
    35a8:	4618      	mov	r0, r3
    35aa:	4b0d      	ldr	r3, [pc, #52]	; (35e0 <usb_d_ep_deinit+0x44>)
    35ac:	4798      	blx	r3
    35ae:	4603      	mov	r3, r0
    35b0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35b6:	015b      	lsls	r3, r3, #5
    35b8:	4a0a      	ldr	r2, [pc, #40]	; (35e4 <usb_d_ep_deinit+0x48>)
    35ba:	4413      	add	r3, r2
    35bc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    35be:	f997 300f 	ldrsb.w	r3, [r7, #15]
    35c2:	2b00      	cmp	r3, #0
    35c4:	db07      	blt.n	35d6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    35c6:	79fb      	ldrb	r3, [r7, #7]
    35c8:	4618      	mov	r0, r3
    35ca:	4b07      	ldr	r3, [pc, #28]	; (35e8 <usb_d_ep_deinit+0x4c>)
    35cc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    35ce:	68bb      	ldr	r3, [r7, #8]
    35d0:	22ff      	movs	r2, #255	; 0xff
    35d2:	705a      	strb	r2, [r3, #1]
    35d4:	e000      	b.n	35d8 <usb_d_ep_deinit+0x3c>
		return;
    35d6:	bf00      	nop
}
    35d8:	3710      	adds	r7, #16
    35da:	46bd      	mov	sp, r7
    35dc:	bd80      	pop	{r7, pc}
    35de:	bf00      	nop
    35e0:	00003019 	.word	0x00003019
    35e4:	20000834 	.word	0x20000834
    35e8:	0000a49d 	.word	0x0000a49d

000035ec <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    35ec:	b580      	push	{r7, lr}
    35ee:	b086      	sub	sp, #24
    35f0:	af00      	add	r7, sp, #0
    35f2:	4603      	mov	r3, r0
    35f4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35f6:	79fb      	ldrb	r3, [r7, #7]
    35f8:	4618      	mov	r0, r3
    35fa:	4b15      	ldr	r3, [pc, #84]	; (3650 <usb_d_ep_enable+0x64>)
    35fc:	4798      	blx	r3
    35fe:	4603      	mov	r3, r0
    3600:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3602:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3606:	015b      	lsls	r3, r3, #5
    3608:	4a12      	ldr	r2, [pc, #72]	; (3654 <usb_d_ep_enable+0x68>)
    360a:	4413      	add	r3, r2
    360c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    360e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3612:	2b00      	cmp	r3, #0
    3614:	da02      	bge.n	361c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3616:	f06f 0311 	mvn.w	r3, #17
    361a:	e014      	b.n	3646 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    361c:	693b      	ldr	r3, [r7, #16]
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	2b00      	cmp	r3, #0
    3622:	d101      	bne.n	3628 <usb_d_ep_enable+0x3c>
    3624:	2202      	movs	r2, #2
    3626:	e000      	b.n	362a <usb_d_ep_enable+0x3e>
    3628:	2201      	movs	r2, #1
    362a:	693b      	ldr	r3, [r7, #16]
    362c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    362e:	79fb      	ldrb	r3, [r7, #7]
    3630:	4618      	mov	r0, r3
    3632:	4b09      	ldr	r3, [pc, #36]	; (3658 <usb_d_ep_enable+0x6c>)
    3634:	4798      	blx	r3
    3636:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3638:	68fb      	ldr	r3, [r7, #12]
    363a:	2b00      	cmp	r3, #0
    363c:	da02      	bge.n	3644 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    363e:	693b      	ldr	r3, [r7, #16]
    3640:	2200      	movs	r2, #0
    3642:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3644:	68fb      	ldr	r3, [r7, #12]
}
    3646:	4618      	mov	r0, r3
    3648:	3718      	adds	r7, #24
    364a:	46bd      	mov	sp, r7
    364c:	bd80      	pop	{r7, pc}
    364e:	bf00      	nop
    3650:	00003019 	.word	0x00003019
    3654:	20000834 	.word	0x20000834
    3658:	0000a581 	.word	0x0000a581

0000365c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    365c:	b590      	push	{r4, r7, lr}
    365e:	b08d      	sub	sp, #52	; 0x34
    3660:	af02      	add	r7, sp, #8
    3662:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	7a1b      	ldrb	r3, [r3, #8]
    3668:	4618      	mov	r0, r3
    366a:	4b51      	ldr	r3, [pc, #324]	; (37b0 <usb_d_ep_transfer+0x154>)
    366c:	4798      	blx	r3
    366e:	4603      	mov	r3, r0
    3670:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3672:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3676:	015b      	lsls	r3, r3, #5
    3678:	4a4e      	ldr	r2, [pc, #312]	; (37b4 <usb_d_ep_transfer+0x158>)
    367a:	4413      	add	r3, r2
    367c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	7a1b      	ldrb	r3, [r3, #8]
    3682:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3686:	2b00      	cmp	r3, #0
    3688:	bf14      	ite	ne
    368a:	2301      	movne	r3, #1
    368c:	2300      	moveq	r3, #0
    368e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	7a5b      	ldrb	r3, [r3, #9]
    3696:	2b00      	cmp	r3, #0
    3698:	bf14      	ite	ne
    369a:	2301      	movne	r3, #1
    369c:	2300      	moveq	r3, #0
    369e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    36a2:	687b      	ldr	r3, [r7, #4]
    36a4:	685b      	ldr	r3, [r3, #4]
    36a6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    36a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    36ac:	2b00      	cmp	r3, #0
    36ae:	da02      	bge.n	36b6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    36b0:	f06f 0311 	mvn.w	r3, #17
    36b4:	e077      	b.n	37a6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    36b6:	f107 0308 	add.w	r3, r7, #8
    36ba:	4618      	mov	r0, r3
    36bc:	4b3e      	ldr	r3, [pc, #248]	; (37b8 <usb_d_ep_transfer+0x15c>)
    36be:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    36c0:	69bb      	ldr	r3, [r7, #24]
    36c2:	789b      	ldrb	r3, [r3, #2]
    36c4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    36c6:	7bfb      	ldrb	r3, [r7, #15]
    36c8:	b2db      	uxtb	r3, r3
    36ca:	2b01      	cmp	r3, #1
    36cc:	d10c      	bne.n	36e8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    36ce:	69bb      	ldr	r3, [r7, #24]
    36d0:	2203      	movs	r2, #3
    36d2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    36d4:	f107 0308 	add.w	r3, r7, #8
    36d8:	4618      	mov	r0, r3
    36da:	4b38      	ldr	r3, [pc, #224]	; (37bc <usb_d_ep_transfer+0x160>)
    36dc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    36de:	69bb      	ldr	r3, [r7, #24]
    36e0:	781b      	ldrb	r3, [r3, #0]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d151      	bne.n	378a <usb_d_ep_transfer+0x12e>
    36e6:	e017      	b.n	3718 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    36e8:	f107 0308 	add.w	r3, r7, #8
    36ec:	4618      	mov	r0, r3
    36ee:	4b33      	ldr	r3, [pc, #204]	; (37bc <usb_d_ep_transfer+0x160>)
    36f0:	4798      	blx	r3
		switch (state) {
    36f2:	7bfb      	ldrb	r3, [r7, #15]
    36f4:	b2db      	uxtb	r3, r3
    36f6:	2b05      	cmp	r3, #5
    36f8:	d004      	beq.n	3704 <usb_d_ep_transfer+0xa8>
    36fa:	2b06      	cmp	r3, #6
    36fc:	d004      	beq.n	3708 <usb_d_ep_transfer+0xac>
    36fe:	2b00      	cmp	r3, #0
    3700:	d005      	beq.n	370e <usb_d_ep_transfer+0xb2>
    3702:	e007      	b.n	3714 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3704:	2302      	movs	r3, #2
    3706:	e04e      	b.n	37a6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3708:	f06f 030f 	mvn.w	r3, #15
    370c:	e04b      	b.n	37a6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    370e:	f06f 0312 	mvn.w	r3, #18
    3712:	e048      	b.n	37a6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3714:	2301      	movs	r3, #1
    3716:	e046      	b.n	37a6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3718:	69bb      	ldr	r3, [r7, #24]
    371a:	7c9b      	ldrb	r3, [r3, #18]
    371c:	b29a      	uxth	r2, r3
    371e:	69bb      	ldr	r3, [r7, #24]
    3720:	7cdb      	ldrb	r3, [r3, #19]
    3722:	b29b      	uxth	r3, r3
    3724:	021b      	lsls	r3, r3, #8
    3726:	b29b      	uxth	r3, r3
    3728:	4413      	add	r3, r2
    372a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    372c:	8afb      	ldrh	r3, [r7, #22]
    372e:	2b00      	cmp	r3, #0
    3730:	d10b      	bne.n	374a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3732:	2301      	movs	r3, #1
    3734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3738:	2300      	movs	r3, #0
    373a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    373c:	2301      	movs	r3, #1
    373e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3742:	69bb      	ldr	r3, [r7, #24]
    3744:	2204      	movs	r2, #4
    3746:	709a      	strb	r2, [r3, #2]
    3748:	e01f      	b.n	378a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    374a:	69bb      	ldr	r3, [r7, #24]
    374c:	7b1b      	ldrb	r3, [r3, #12]
    374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3752:	2b00      	cmp	r3, #0
    3754:	bf14      	ite	ne
    3756:	2301      	movne	r3, #1
    3758:	2300      	moveq	r3, #0
    375a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    375e:	8afa      	ldrh	r2, [r7, #22]
    3760:	6a3b      	ldr	r3, [r7, #32]
    3762:	429a      	cmp	r2, r3
    3764:	d201      	bcs.n	376a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3766:	8afb      	ldrh	r3, [r7, #22]
    3768:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    376a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    376e:	2b00      	cmp	r3, #0
    3770:	d008      	beq.n	3784 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3772:	8afa      	ldrh	r2, [r7, #22]
    3774:	6a3b      	ldr	r3, [r7, #32]
    3776:	429a      	cmp	r2, r3
    3778:	bf8c      	ite	hi
    377a:	2301      	movhi	r3, #1
    377c:	2300      	movls	r3, #0
    377e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3782:	e002      	b.n	378a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3784:	2300      	movs	r3, #0
    3786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	7a18      	ldrb	r0, [r3, #8]
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	681a      	ldr	r2, [r3, #0]
    3792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3796:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    379a:	9300      	str	r3, [sp, #0]
    379c:	6a3b      	ldr	r3, [r7, #32]
    379e:	4c08      	ldr	r4, [pc, #32]	; (37c0 <usb_d_ep_transfer+0x164>)
    37a0:	47a0      	blx	r4
    37a2:	6138      	str	r0, [r7, #16]
	return rc;
    37a4:	693b      	ldr	r3, [r7, #16]
}
    37a6:	4618      	mov	r0, r3
    37a8:	372c      	adds	r7, #44	; 0x2c
    37aa:	46bd      	mov	sp, r7
    37ac:	bd90      	pop	{r4, r7, pc}
    37ae:	bf00      	nop
    37b0:	00003019 	.word	0x00003019
    37b4:	20000834 	.word	0x20000834
    37b8:	0000b4f5 	.word	0x0000b4f5
    37bc:	0000b51b 	.word	0x0000b51b
    37c0:	00003099 	.word	0x00003099

000037c4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b084      	sub	sp, #16
    37c8:	af00      	add	r7, sp, #0
    37ca:	4603      	mov	r3, r0
    37cc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37ce:	79fb      	ldrb	r3, [r7, #7]
    37d0:	4618      	mov	r0, r3
    37d2:	4b0e      	ldr	r3, [pc, #56]	; (380c <usb_d_ep_abort+0x48>)
    37d4:	4798      	blx	r3
    37d6:	4603      	mov	r3, r0
    37d8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37de:	015b      	lsls	r3, r3, #5
    37e0:	4a0b      	ldr	r2, [pc, #44]	; (3810 <usb_d_ep_abort+0x4c>)
    37e2:	4413      	add	r3, r2
    37e4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    37e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37ea:	2b00      	cmp	r3, #0
    37ec:	db0a      	blt.n	3804 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    37ee:	79fb      	ldrb	r3, [r7, #7]
    37f0:	4618      	mov	r0, r3
    37f2:	4b08      	ldr	r3, [pc, #32]	; (3814 <usb_d_ep_abort+0x50>)
    37f4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    37f6:	68bb      	ldr	r3, [r7, #8]
    37f8:	2201      	movs	r2, #1
    37fa:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    37fc:	68bb      	ldr	r3, [r7, #8]
    37fe:	2204      	movs	r2, #4
    3800:	70da      	strb	r2, [r3, #3]
    3802:	e000      	b.n	3806 <usb_d_ep_abort+0x42>
		return;
    3804:	bf00      	nop
}
    3806:	3710      	adds	r7, #16
    3808:	46bd      	mov	sp, r7
    380a:	bd80      	pop	{r7, pc}
    380c:	00003019 	.word	0x00003019
    3810:	20000834 	.word	0x20000834
    3814:	0000aced 	.word	0x0000aced

00003818 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3818:	b580      	push	{r7, lr}
    381a:	b086      	sub	sp, #24
    381c:	af00      	add	r7, sp, #0
    381e:	4603      	mov	r3, r0
    3820:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3822:	79fb      	ldrb	r3, [r7, #7]
    3824:	4618      	mov	r0, r3
    3826:	4b1a      	ldr	r3, [pc, #104]	; (3890 <_usb_d_ep_halt_clr+0x78>)
    3828:	4798      	blx	r3
    382a:	4603      	mov	r3, r0
    382c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    382e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3832:	015b      	lsls	r3, r3, #5
    3834:	4a17      	ldr	r2, [pc, #92]	; (3894 <_usb_d_ep_halt_clr+0x7c>)
    3836:	4413      	add	r3, r2
    3838:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    383a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    383e:	2b00      	cmp	r3, #0
    3840:	da02      	bge.n	3848 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3842:	f06f 0311 	mvn.w	r3, #17
    3846:	e01f      	b.n	3888 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3848:	79fb      	ldrb	r3, [r7, #7]
    384a:	2102      	movs	r1, #2
    384c:	4618      	mov	r0, r3
    384e:	4b12      	ldr	r3, [pc, #72]	; (3898 <_usb_d_ep_halt_clr+0x80>)
    3850:	4798      	blx	r3
    3852:	4603      	mov	r3, r0
    3854:	2b00      	cmp	r3, #0
    3856:	d016      	beq.n	3886 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3858:	79fb      	ldrb	r3, [r7, #7]
    385a:	2100      	movs	r1, #0
    385c:	4618      	mov	r0, r3
    385e:	4b0e      	ldr	r3, [pc, #56]	; (3898 <_usb_d_ep_halt_clr+0x80>)
    3860:	4798      	blx	r3
    3862:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3864:	68fb      	ldr	r3, [r7, #12]
    3866:	2b00      	cmp	r3, #0
    3868:	da01      	bge.n	386e <_usb_d_ep_halt_clr+0x56>
			return rc;
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	e00c      	b.n	3888 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    386e:	693b      	ldr	r3, [r7, #16]
    3870:	2201      	movs	r2, #1
    3872:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3874:	693b      	ldr	r3, [r7, #16]
    3876:	2203      	movs	r2, #3
    3878:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    387a:	693b      	ldr	r3, [r7, #16]
    387c:	69db      	ldr	r3, [r3, #28]
    387e:	79f8      	ldrb	r0, [r7, #7]
    3880:	2200      	movs	r2, #0
    3882:	2103      	movs	r1, #3
    3884:	4798      	blx	r3
	}
	return ERR_NONE;
    3886:	2300      	movs	r3, #0
}
    3888:	4618      	mov	r0, r3
    388a:	3718      	adds	r7, #24
    388c:	46bd      	mov	sp, r7
    388e:	bd80      	pop	{r7, pc}
    3890:	00003019 	.word	0x00003019
    3894:	20000834 	.word	0x20000834
    3898:	0000a8f9 	.word	0x0000a8f9

0000389c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    389c:	b580      	push	{r7, lr}
    389e:	b082      	sub	sp, #8
    38a0:	af00      	add	r7, sp, #0
    38a2:	4603      	mov	r3, r0
    38a4:	460a      	mov	r2, r1
    38a6:	71fb      	strb	r3, [r7, #7]
    38a8:	4613      	mov	r3, r2
    38aa:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    38ac:	79bb      	ldrb	r3, [r7, #6]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d105      	bne.n	38be <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    38b2:	79fb      	ldrb	r3, [r7, #7]
    38b4:	4618      	mov	r0, r3
    38b6:	4b0c      	ldr	r3, [pc, #48]	; (38e8 <usb_d_ep_halt+0x4c>)
    38b8:	4798      	blx	r3
    38ba:	4603      	mov	r3, r0
    38bc:	e00f      	b.n	38de <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    38be:	79bb      	ldrb	r3, [r7, #6]
    38c0:	2b01      	cmp	r3, #1
    38c2:	d106      	bne.n	38d2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    38c4:	79fb      	ldrb	r3, [r7, #7]
    38c6:	2101      	movs	r1, #1
    38c8:	4618      	mov	r0, r3
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <usb_d_ep_halt+0x50>)
    38cc:	4798      	blx	r3
    38ce:	4603      	mov	r3, r0
    38d0:	e005      	b.n	38de <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    38d2:	79fb      	ldrb	r3, [r7, #7]
    38d4:	2102      	movs	r1, #2
    38d6:	4618      	mov	r0, r3
    38d8:	4b04      	ldr	r3, [pc, #16]	; (38ec <usb_d_ep_halt+0x50>)
    38da:	4798      	blx	r3
    38dc:	4603      	mov	r3, r0
	}
}
    38de:	4618      	mov	r0, r3
    38e0:	3708      	adds	r7, #8
    38e2:	46bd      	mov	sp, r7
    38e4:	bd80      	pop	{r7, pc}
    38e6:	bf00      	nop
    38e8:	00003819 	.word	0x00003819
    38ec:	0000a8f9 	.word	0x0000a8f9

000038f0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b086      	sub	sp, #24
    38f4:	af00      	add	r7, sp, #0
    38f6:	4603      	mov	r3, r0
    38f8:	603a      	str	r2, [r7, #0]
    38fa:	71fb      	strb	r3, [r7, #7]
    38fc:	460b      	mov	r3, r1
    38fe:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3900:	79fb      	ldrb	r3, [r7, #7]
    3902:	4618      	mov	r0, r3
    3904:	4b16      	ldr	r3, [pc, #88]	; (3960 <usb_d_ep_register_callback+0x70>)
    3906:	4798      	blx	r3
    3908:	4603      	mov	r3, r0
    390a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    390c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3910:	015b      	lsls	r3, r3, #5
    3912:	4a14      	ldr	r2, [pc, #80]	; (3964 <usb_d_ep_register_callback+0x74>)
    3914:	4413      	add	r3, r2
    3916:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3918:	683b      	ldr	r3, [r7, #0]
    391a:	2b00      	cmp	r3, #0
    391c:	d001      	beq.n	3922 <usb_d_ep_register_callback+0x32>
    391e:	683b      	ldr	r3, [r7, #0]
    3920:	e000      	b.n	3924 <usb_d_ep_register_callback+0x34>
    3922:	4b11      	ldr	r3, [pc, #68]	; (3968 <usb_d_ep_register_callback+0x78>)
    3924:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3926:	f997 3017 	ldrsb.w	r3, [r7, #23]
    392a:	2b00      	cmp	r3, #0
    392c:	db13      	blt.n	3956 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    392e:	79bb      	ldrb	r3, [r7, #6]
    3930:	2b01      	cmp	r3, #1
    3932:	d008      	beq.n	3946 <usb_d_ep_register_callback+0x56>
    3934:	2b02      	cmp	r3, #2
    3936:	d00a      	beq.n	394e <usb_d_ep_register_callback+0x5e>
    3938:	2b00      	cmp	r3, #0
    393a:	d000      	beq.n	393e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    393c:	e00c      	b.n	3958 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    393e:	693b      	ldr	r3, [r7, #16]
    3940:	68fa      	ldr	r2, [r7, #12]
    3942:	615a      	str	r2, [r3, #20]
		break;
    3944:	e008      	b.n	3958 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3946:	693b      	ldr	r3, [r7, #16]
    3948:	68fa      	ldr	r2, [r7, #12]
    394a:	619a      	str	r2, [r3, #24]
		break;
    394c:	e004      	b.n	3958 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    394e:	693b      	ldr	r3, [r7, #16]
    3950:	68fa      	ldr	r2, [r7, #12]
    3952:	61da      	str	r2, [r3, #28]
		break;
    3954:	e000      	b.n	3958 <usb_d_ep_register_callback+0x68>
		return;
    3956:	bf00      	nop
	}
}
    3958:	3718      	adds	r7, #24
    395a:	46bd      	mov	sp, r7
    395c:	bd80      	pop	{r7, pc}
    395e:	bf00      	nop
    3960:	00003019 	.word	0x00003019
    3964:	20000834 	.word	0x20000834
    3968:	000030ed 	.word	0x000030ed

0000396c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    396c:	b480      	push	{r7}
    396e:	b085      	sub	sp, #20
    3970:	af00      	add	r7, sp, #0
    3972:	4603      	mov	r3, r0
    3974:	60b9      	str	r1, [r7, #8]
    3976:	607a      	str	r2, [r7, #4]
    3978:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    397a:	7bfb      	ldrb	r3, [r7, #15]
    397c:	f083 0301 	eor.w	r3, r3, #1
    3980:	b2db      	uxtb	r3, r3
    3982:	2b00      	cmp	r3, #0
    3984:	d000      	beq.n	3988 <assert+0x1c>
		__asm("BKPT #0");
    3986:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3988:	bf00      	nop
    398a:	3714      	adds	r7, #20
    398c:	46bd      	mov	sp, r7
    398e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3992:	4770      	bx	lr

00003994 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3994:	b480      	push	{r7}
    3996:	b085      	sub	sp, #20
    3998:	af00      	add	r7, sp, #0
    399a:	6078      	str	r0, [r7, #4]
    399c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    399e:	687b      	ldr	r3, [r7, #4]
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	60fb      	str	r3, [r7, #12]
    39a4:	e008      	b.n	39b8 <is_list_element+0x24>
		if (it == element) {
    39a6:	68fa      	ldr	r2, [r7, #12]
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	429a      	cmp	r2, r3
    39ac:	d101      	bne.n	39b2 <is_list_element+0x1e>
			return true;
    39ae:	2301      	movs	r3, #1
    39b0:	e006      	b.n	39c0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    39b2:	68fb      	ldr	r3, [r7, #12]
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	60fb      	str	r3, [r7, #12]
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d1f3      	bne.n	39a6 <is_list_element+0x12>
		}
	}

	return false;
    39be:	2300      	movs	r3, #0
}
    39c0:	4618      	mov	r0, r3
    39c2:	3714      	adds	r7, #20
    39c4:	46bd      	mov	sp, r7
    39c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ca:	4770      	bx	lr

000039cc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    39cc:	b580      	push	{r7, lr}
    39ce:	b082      	sub	sp, #8
    39d0:	af00      	add	r7, sp, #0
    39d2:	6078      	str	r0, [r7, #4]
    39d4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    39d6:	6839      	ldr	r1, [r7, #0]
    39d8:	6878      	ldr	r0, [r7, #4]
    39da:	4b0f      	ldr	r3, [pc, #60]	; (3a18 <list_insert_as_head+0x4c>)
    39dc:	4798      	blx	r3
    39de:	4603      	mov	r3, r0
    39e0:	2b00      	cmp	r3, #0
    39e2:	bf14      	ite	ne
    39e4:	2301      	movne	r3, #1
    39e6:	2300      	moveq	r3, #0
    39e8:	b2db      	uxtb	r3, r3
    39ea:	f083 0301 	eor.w	r3, r3, #1
    39ee:	b2db      	uxtb	r3, r3
    39f0:	f003 0301 	and.w	r3, r3, #1
    39f4:	b2db      	uxtb	r3, r3
    39f6:	2239      	movs	r2, #57	; 0x39
    39f8:	4908      	ldr	r1, [pc, #32]	; (3a1c <list_insert_as_head+0x50>)
    39fa:	4618      	mov	r0, r3
    39fc:	4b08      	ldr	r3, [pc, #32]	; (3a20 <list_insert_as_head+0x54>)
    39fe:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	681a      	ldr	r2, [r3, #0]
    3a04:	683b      	ldr	r3, [r7, #0]
    3a06:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	683a      	ldr	r2, [r7, #0]
    3a0c:	601a      	str	r2, [r3, #0]
}
    3a0e:	bf00      	nop
    3a10:	3708      	adds	r7, #8
    3a12:	46bd      	mov	sp, r7
    3a14:	bd80      	pop	{r7, pc}
    3a16:	bf00      	nop
    3a18:	00003995 	.word	0x00003995
    3a1c:	0000f0fc 	.word	0x0000f0fc
    3a20:	0000396d 	.word	0x0000396d

00003a24 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3a24:	b480      	push	{r7}
    3a26:	b083      	sub	sp, #12
    3a28:	af00      	add	r7, sp, #0
    3a2a:	6078      	str	r0, [r7, #4]
    3a2c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3a2e:	687b      	ldr	r3, [r7, #4]
    3a30:	681a      	ldr	r2, [r3, #0]
    3a32:	683b      	ldr	r3, [r7, #0]
    3a34:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	683a      	ldr	r2, [r7, #0]
    3a3a:	601a      	str	r2, [r3, #0]
}
    3a3c:	bf00      	nop
    3a3e:	370c      	adds	r7, #12
    3a40:	46bd      	mov	sp, r7
    3a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a46:	4770      	bx	lr

00003a48 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	b084      	sub	sp, #16
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
    3a50:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	681b      	ldr	r3, [r3, #0]
    3a56:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3a58:	6839      	ldr	r1, [r7, #0]
    3a5a:	6878      	ldr	r0, [r7, #4]
    3a5c:	4b16      	ldr	r3, [pc, #88]	; (3ab8 <list_insert_at_end+0x70>)
    3a5e:	4798      	blx	r3
    3a60:	4603      	mov	r3, r0
    3a62:	2b00      	cmp	r3, #0
    3a64:	bf14      	ite	ne
    3a66:	2301      	movne	r3, #1
    3a68:	2300      	moveq	r3, #0
    3a6a:	b2db      	uxtb	r3, r3
    3a6c:	f083 0301 	eor.w	r3, r3, #1
    3a70:	b2db      	uxtb	r3, r3
    3a72:	f003 0301 	and.w	r3, r3, #1
    3a76:	b2db      	uxtb	r3, r3
    3a78:	224f      	movs	r2, #79	; 0x4f
    3a7a:	4910      	ldr	r1, [pc, #64]	; (3abc <list_insert_at_end+0x74>)
    3a7c:	4618      	mov	r0, r3
    3a7e:	4b10      	ldr	r3, [pc, #64]	; (3ac0 <list_insert_at_end+0x78>)
    3a80:	4798      	blx	r3

	if (!list->head) {
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d109      	bne.n	3a9e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	683a      	ldr	r2, [r7, #0]
    3a8e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3a90:	683b      	ldr	r3, [r7, #0]
    3a92:	2200      	movs	r2, #0
    3a94:	601a      	str	r2, [r3, #0]
		return;
    3a96:	e00c      	b.n	3ab2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3a98:	68fb      	ldr	r3, [r7, #12]
    3a9a:	681b      	ldr	r3, [r3, #0]
    3a9c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d1f8      	bne.n	3a98 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3aa6:	68fb      	ldr	r3, [r7, #12]
    3aa8:	683a      	ldr	r2, [r7, #0]
    3aaa:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	2200      	movs	r2, #0
    3ab0:	601a      	str	r2, [r3, #0]
}
    3ab2:	3710      	adds	r7, #16
    3ab4:	46bd      	mov	sp, r7
    3ab6:	bd80      	pop	{r7, pc}
    3ab8:	00003995 	.word	0x00003995
    3abc:	0000f0fc 	.word	0x0000f0fc
    3ac0:	0000396d 	.word	0x0000396d

00003ac4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3ac4:	b480      	push	{r7}
    3ac6:	b085      	sub	sp, #20
    3ac8:	af00      	add	r7, sp, #0
    3aca:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d009      	beq.n	3ae8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	681b      	ldr	r3, [r3, #0]
    3ad8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	681a      	ldr	r2, [r3, #0]
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	e000      	b.n	3aea <list_remove_head+0x26>
	}

	return NULL;
    3ae8:	2300      	movs	r3, #0
}
    3aea:	4618      	mov	r0, r3
    3aec:	3714      	adds	r7, #20
    3aee:	46bd      	mov	sp, r7
    3af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af4:	4770      	bx	lr

00003af6 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3af6:	b480      	push	{r7}
    3af8:	b085      	sub	sp, #20
    3afa:	af00      	add	r7, sp, #0
    3afc:	6078      	str	r0, [r7, #4]
    3afe:	6039      	str	r1, [r7, #0]
	if (!element) {
    3b00:	683b      	ldr	r3, [r7, #0]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d101      	bne.n	3b0a <list_delete_element+0x14>
		return false;
    3b06:	2300      	movs	r3, #0
    3b08:	e024      	b.n	3b54 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	681a      	ldr	r2, [r3, #0]
    3b0e:	683b      	ldr	r3, [r7, #0]
    3b10:	429a      	cmp	r2, r3
    3b12:	d106      	bne.n	3b22 <list_delete_element+0x2c>
		list->head = list->head->next;
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	681a      	ldr	r2, [r3, #0]
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	601a      	str	r2, [r3, #0]
		return true;
    3b1e:	2301      	movs	r3, #1
    3b20:	e018      	b.n	3b54 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	681b      	ldr	r3, [r3, #0]
    3b26:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3b28:	e002      	b.n	3b30 <list_delete_element+0x3a>
			it = it->next;
    3b2a:	68fb      	ldr	r3, [r7, #12]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3b30:	68fb      	ldr	r3, [r7, #12]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d004      	beq.n	3b40 <list_delete_element+0x4a>
    3b36:	68fb      	ldr	r3, [r7, #12]
    3b38:	681a      	ldr	r2, [r3, #0]
    3b3a:	683b      	ldr	r3, [r7, #0]
    3b3c:	429a      	cmp	r2, r3
    3b3e:	d1f4      	bne.n	3b2a <list_delete_element+0x34>
		}
		if (it) {
    3b40:	68fb      	ldr	r3, [r7, #12]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d005      	beq.n	3b52 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3b46:	683b      	ldr	r3, [r7, #0]
    3b48:	681a      	ldr	r2, [r3, #0]
    3b4a:	68fb      	ldr	r3, [r7, #12]
    3b4c:	601a      	str	r2, [r3, #0]
			return true;
    3b4e:	2301      	movs	r3, #1
    3b50:	e000      	b.n	3b54 <list_delete_element+0x5e>
		}
	}

	return false;
    3b52:	2300      	movs	r3, #0
}
    3b54:	4618      	mov	r0, r3
    3b56:	3714      	adds	r7, #20
    3b58:	46bd      	mov	sp, r7
    3b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b5e:	4770      	bx	lr

00003b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3b60:	b480      	push	{r7}
    3b62:	b083      	sub	sp, #12
    3b64:	af00      	add	r7, sp, #0
    3b66:	4603      	mov	r3, r0
    3b68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	db0b      	blt.n	3b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b72:	4909      	ldr	r1, [pc, #36]	; (3b98 <__NVIC_EnableIRQ+0x38>)
    3b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b78:	095b      	lsrs	r3, r3, #5
    3b7a:	88fa      	ldrh	r2, [r7, #6]
    3b7c:	f002 021f 	and.w	r2, r2, #31
    3b80:	2001      	movs	r0, #1
    3b82:	fa00 f202 	lsl.w	r2, r0, r2
    3b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3b8a:	bf00      	nop
    3b8c:	370c      	adds	r7, #12
    3b8e:	46bd      	mov	sp, r7
    3b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	e000e100 	.word	0xe000e100

00003b9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3b9c:	b480      	push	{r7}
    3b9e:	b083      	sub	sp, #12
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	4603      	mov	r3, r0
    3ba4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3baa:	2b00      	cmp	r3, #0
    3bac:	db10      	blt.n	3bd0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bae:	490b      	ldr	r1, [pc, #44]	; (3bdc <__NVIC_DisableIRQ+0x40>)
    3bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bb4:	095b      	lsrs	r3, r3, #5
    3bb6:	88fa      	ldrh	r2, [r7, #6]
    3bb8:	f002 021f 	and.w	r2, r2, #31
    3bbc:	2001      	movs	r0, #1
    3bbe:	fa00 f202 	lsl.w	r2, r0, r2
    3bc2:	3320      	adds	r3, #32
    3bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bcc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3bd0:	bf00      	nop
    3bd2:	370c      	adds	r7, #12
    3bd4:	46bd      	mov	sp, r7
    3bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bda:	4770      	bx	lr
    3bdc:	e000e100 	.word	0xe000e100

00003be0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3be0:	b480      	push	{r7}
    3be2:	b083      	sub	sp, #12
    3be4:	af00      	add	r7, sp, #0
    3be6:	4603      	mov	r3, r0
    3be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	db0c      	blt.n	3c0c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bf2:	4909      	ldr	r1, [pc, #36]	; (3c18 <__NVIC_ClearPendingIRQ+0x38>)
    3bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bf8:	095b      	lsrs	r3, r3, #5
    3bfa:	88fa      	ldrh	r2, [r7, #6]
    3bfc:	f002 021f 	and.w	r2, r2, #31
    3c00:	2001      	movs	r0, #1
    3c02:	fa00 f202 	lsl.w	r2, r0, r2
    3c06:	3360      	adds	r3, #96	; 0x60
    3c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3c0c:	bf00      	nop
    3c0e:	370c      	adds	r7, #12
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr
    3c18:	e000e100 	.word	0xe000e100

00003c1c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3c1c:	b480      	push	{r7}
    3c1e:	b083      	sub	sp, #12
    3c20:	af00      	add	r7, sp, #0
    3c22:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c28:	095b      	lsrs	r3, r3, #5
    3c2a:	f003 0301 	and.w	r3, r3, #1
    3c2e:	2b00      	cmp	r3, #0
    3c30:	bf14      	ite	ne
    3c32:	2301      	movne	r3, #1
    3c34:	2300      	moveq	r3, #0
    3c36:	b2db      	uxtb	r3, r3
}
    3c38:	4618      	mov	r0, r3
    3c3a:	370c      	adds	r7, #12
    3c3c:	46bd      	mov	sp, r7
    3c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c42:	4770      	bx	lr

00003c44 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3c44:	b480      	push	{r7}
    3c46:	b083      	sub	sp, #12
    3c48:	af00      	add	r7, sp, #0
    3c4a:	6078      	str	r0, [r7, #4]
    3c4c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	683a      	ldr	r2, [r7, #0]
    3c52:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c54:	bf00      	nop
    3c56:	370c      	adds	r7, #12
    3c58:	46bd      	mov	sp, r7
    3c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5e:	4770      	bx	lr

00003c60 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3c60:	b480      	push	{r7}
    3c62:	b083      	sub	sp, #12
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
    3c68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	683a      	ldr	r2, [r7, #0]
    3c6e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c70:	bf00      	nop
    3c72:	370c      	adds	r7, #12
    3c74:	46bd      	mov	sp, r7
    3c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7a:	4770      	bx	lr

00003c7c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3c7c:	b480      	push	{r7}
    3c7e:	b083      	sub	sp, #12
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	699b      	ldr	r3, [r3, #24]
    3c88:	f043 0201 	orr.w	r2, r3, #1
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3c90:	bf00      	nop
    3c92:	370c      	adds	r7, #12
    3c94:	46bd      	mov	sp, r7
    3c96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c9a:	4770      	bx	lr

00003c9c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3c9c:	b480      	push	{r7}
    3c9e:	b085      	sub	sp, #20
    3ca0:	af00      	add	r7, sp, #0
    3ca2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	699b      	ldr	r3, [r3, #24]
    3ca8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3caa:	68fb      	ldr	r3, [r7, #12]
    3cac:	f003 0301 	and.w	r3, r3, #1
    3cb0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	bf14      	ite	ne
    3cb8:	2301      	movne	r3, #1
    3cba:	2300      	moveq	r3, #0
    3cbc:	b2db      	uxtb	r3, r3
}
    3cbe:	4618      	mov	r0, r3
    3cc0:	3714      	adds	r7, #20
    3cc2:	46bd      	mov	sp, r7
    3cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cc8:	4770      	bx	lr

00003cca <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3cca:	b480      	push	{r7}
    3ccc:	b083      	sub	sp, #12
    3cce:	af00      	add	r7, sp, #0
    3cd0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	699b      	ldr	r3, [r3, #24]
    3cd6:	f023 0201 	bic.w	r2, r3, #1
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cde:	bf00      	nop
    3ce0:	370c      	adds	r7, #12
    3ce2:	46bd      	mov	sp, r7
    3ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ce8:	4770      	bx	lr

00003cea <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3cea:	b480      	push	{r7}
    3cec:	b083      	sub	sp, #12
    3cee:	af00      	add	r7, sp, #0
    3cf0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	699b      	ldr	r3, [r3, #24]
    3cf6:	f043 0202 	orr.w	r2, r3, #2
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3cfe:	bf00      	nop
    3d00:	370c      	adds	r7, #12
    3d02:	46bd      	mov	sp, r7
    3d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d08:	4770      	bx	lr

00003d0a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3d0a:	b480      	push	{r7}
    3d0c:	b083      	sub	sp, #12
    3d0e:	af00      	add	r7, sp, #0
    3d10:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	699b      	ldr	r3, [r3, #24]
    3d16:	f023 0202 	bic.w	r2, r3, #2
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d1e:	bf00      	nop
    3d20:	370c      	adds	r7, #12
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr

00003d2a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3d2a:	b480      	push	{r7}
    3d2c:	b083      	sub	sp, #12
    3d2e:	af00      	add	r7, sp, #0
    3d30:	6078      	str	r0, [r7, #4]
    3d32:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	699a      	ldr	r2, [r3, #24]
    3d38:	683b      	ldr	r3, [r7, #0]
    3d3a:	431a      	orrs	r2, r3
    3d3c:	687b      	ldr	r3, [r7, #4]
    3d3e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d40:	bf00      	nop
    3d42:	370c      	adds	r7, #12
    3d44:	46bd      	mov	sp, r7
    3d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d4a:	4770      	bx	lr

00003d4c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3d4c:	b480      	push	{r7}
    3d4e:	b083      	sub	sp, #12
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    3d54:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	683a      	ldr	r2, [r7, #0]
    3d5a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d5c:	bf00      	nop
    3d5e:	370c      	adds	r7, #12
    3d60:	46bd      	mov	sp, r7
    3d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d66:	4770      	bx	lr

00003d68 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3d68:	b480      	push	{r7}
    3d6a:	b083      	sub	sp, #12
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
    3d70:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	683a      	ldr	r2, [r7, #0]
    3d76:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3d78:	bf00      	nop
    3d7a:	370c      	adds	r7, #12
    3d7c:	46bd      	mov	sp, r7
    3d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d82:	4770      	bx	lr

00003d84 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3d84:	b480      	push	{r7}
    3d86:	b083      	sub	sp, #12
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3d90:	4618      	mov	r0, r3
    3d92:	370c      	adds	r7, #12
    3d94:	46bd      	mov	sp, r7
    3d96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d9a:	4770      	bx	lr

00003d9c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3d9c:	b480      	push	{r7}
    3d9e:	b083      	sub	sp, #12
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    3da4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	683a      	ldr	r2, [r7, #0]
    3daa:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dac:	bf00      	nop
    3dae:	370c      	adds	r7, #12
    3db0:	46bd      	mov	sp, r7
    3db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db6:	4770      	bx	lr

00003db8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3db8:	b480      	push	{r7}
    3dba:	b083      	sub	sp, #12
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    3dc0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	683a      	ldr	r2, [r7, #0]
    3dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3dca:	bf00      	nop
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr

00003dd6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3dd6:	b480      	push	{r7}
    3dd8:	b083      	sub	sp, #12
    3dda:	af00      	add	r7, sp, #0
    3ddc:	6078      	str	r0, [r7, #4]
    3dde:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	683a      	ldr	r2, [r7, #0]
    3de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3de8:	bf00      	nop
    3dea:	370c      	adds	r7, #12
    3dec:	46bd      	mov	sp, r7
    3dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df2:	4770      	bx	lr

00003df4 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	683a      	ldr	r2, [r7, #0]
    3e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e06:	bf00      	nop
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr

00003e12 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3e12:	b480      	push	{r7}
    3e14:	b083      	sub	sp, #12
    3e16:	af00      	add	r7, sp, #0
    3e18:	6078      	str	r0, [r7, #4]
    3e1a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	683a      	ldr	r2, [r7, #0]
    3e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e24:	bf00      	nop
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    3e30:	b480      	push	{r7}
    3e32:	b083      	sub	sp, #12
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	683a      	ldr	r2, [r7, #0]
    3e3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e42:	bf00      	nop
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr

00003e4e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3e4e:	b480      	push	{r7}
    3e50:	b083      	sub	sp, #12
    3e52:	af00      	add	r7, sp, #0
    3e54:	6078      	str	r0, [r7, #4]
    3e56:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	683a      	ldr	r2, [r7, #0]
    3e5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e60:	bf00      	nop
    3e62:	370c      	adds	r7, #12
    3e64:	46bd      	mov	sp, r7
    3e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6a:	4770      	bx	lr

00003e6c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3e6c:	b480      	push	{r7}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
    3e74:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3e76:	687b      	ldr	r3, [r7, #4]
    3e78:	683a      	ldr	r2, [r7, #0]
    3e7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e7e:	bf00      	nop
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr

00003e8a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3e8a:	b480      	push	{r7}
    3e8c:	b083      	sub	sp, #12
    3e8e:	af00      	add	r7, sp, #0
    3e90:	6078      	str	r0, [r7, #4]
    3e92:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	683a      	ldr	r2, [r7, #0]
    3e98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e9c:	bf00      	nop
    3e9e:	370c      	adds	r7, #12
    3ea0:	46bd      	mov	sp, r7
    3ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea6:	4770      	bx	lr

00003ea8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3ea8:	b480      	push	{r7}
    3eaa:	b083      	sub	sp, #12
    3eac:	af00      	add	r7, sp, #0
    3eae:	6078      	str	r0, [r7, #4]
    3eb0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3eb2:	687b      	ldr	r3, [r7, #4]
    3eb4:	683a      	ldr	r2, [r7, #0]
    3eb6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3eba:	bf00      	nop
    3ebc:	370c      	adds	r7, #12
    3ebe:	46bd      	mov	sp, r7
    3ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec4:	4770      	bx	lr
	...

00003ec8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    3ed0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	683a      	ldr	r2, [r7, #0]
    3ed6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	4618      	mov	r0, r3
    3ede:	4b56      	ldr	r3, [pc, #344]	; (4038 <_can_async_init+0x170>)
    3ee0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3ee2:	bf00      	nop
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	681b      	ldr	r3, [r3, #0]
    3ee8:	4618      	mov	r0, r3
    3eea:	4b54      	ldr	r3, [pc, #336]	; (403c <_can_async_init+0x174>)
    3eec:	4798      	blx	r3
    3eee:	4603      	mov	r3, r0
    3ef0:	f083 0301 	eor.w	r3, r3, #1
    3ef4:	b2db      	uxtb	r3, r3
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d1f4      	bne.n	3ee4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	681b      	ldr	r3, [r3, #0]
    3efe:	4618      	mov	r0, r3
    3f00:	4b4f      	ldr	r3, [pc, #316]	; (4040 <_can_async_init+0x178>)
    3f02:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3f04:	683b      	ldr	r3, [r7, #0]
    3f06:	4a4f      	ldr	r2, [pc, #316]	; (4044 <_can_async_init+0x17c>)
    3f08:	4293      	cmp	r3, r2
    3f0a:	d17c      	bne.n	4006 <_can_async_init+0x13e>
		_can1_dev    = dev;
    3f0c:	4a4e      	ldr	r2, [pc, #312]	; (4048 <_can_async_init+0x180>)
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	4a4d      	ldr	r2, [pc, #308]	; (404c <_can_async_init+0x184>)
    3f16:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3f20:	4618      	mov	r0, r3
    3f22:	4b4b      	ldr	r3, [pc, #300]	; (4050 <_can_async_init+0x188>)
    3f24:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	2102      	movs	r1, #2
    3f2c:	4618      	mov	r0, r3
    3f2e:	4b49      	ldr	r3, [pc, #292]	; (4054 <_can_async_init+0x18c>)
    3f30:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	f640 2103 	movw	r1, #2563	; 0xa03
    3f3a:	4618      	mov	r0, r3
    3f3c:	4b46      	ldr	r3, [pc, #280]	; (4058 <_can_async_init+0x190>)
    3f3e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3f48:	4618      	mov	r0, r3
    3f4a:	4b44      	ldr	r3, [pc, #272]	; (405c <_can_async_init+0x194>)
    3f4c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	681a      	ldr	r2, [r3, #0]
    3f52:	4b43      	ldr	r3, [pc, #268]	; (4060 <_can_async_init+0x198>)
    3f54:	b29b      	uxth	r3, r3
    3f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f5e:	4619      	mov	r1, r3
    3f60:	4610      	mov	r0, r2
    3f62:	4b40      	ldr	r3, [pc, #256]	; (4064 <_can_async_init+0x19c>)
    3f64:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	2107      	movs	r1, #7
    3f6c:	4618      	mov	r0, r3
    3f6e:	4b3e      	ldr	r3, [pc, #248]	; (4068 <_can_async_init+0x1a0>)
    3f70:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	2107      	movs	r1, #7
    3f78:	4618      	mov	r0, r3
    3f7a:	4b3c      	ldr	r3, [pc, #240]	; (406c <_can_async_init+0x1a4>)
    3f7c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	681a      	ldr	r2, [r3, #0]
    3f82:	4b3b      	ldr	r3, [pc, #236]	; (4070 <_can_async_init+0x1a8>)
    3f84:	b29b      	uxth	r3, r3
    3f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f8a:	4619      	mov	r1, r3
    3f8c:	4610      	mov	r0, r2
    3f8e:	4b39      	ldr	r3, [pc, #228]	; (4074 <_can_async_init+0x1ac>)
    3f90:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	681a      	ldr	r2, [r3, #0]
    3f96:	4b38      	ldr	r3, [pc, #224]	; (4078 <_can_async_init+0x1b0>)
    3f98:	b29b      	uxth	r3, r3
    3f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3f9e:	4619      	mov	r1, r3
    3fa0:	4610      	mov	r0, r2
    3fa2:	4b36      	ldr	r3, [pc, #216]	; (407c <_can_async_init+0x1b4>)
    3fa4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	681b      	ldr	r3, [r3, #0]
    3faa:	2108      	movs	r1, #8
    3fac:	4618      	mov	r0, r3
    3fae:	4b34      	ldr	r3, [pc, #208]	; (4080 <_can_async_init+0x1b8>)
    3fb0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	681a      	ldr	r2, [r3, #0]
    3fb6:	4b33      	ldr	r3, [pc, #204]	; (4084 <_can_async_init+0x1bc>)
    3fb8:	b29b      	uxth	r3, r3
    3fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3fbe:	4619      	mov	r1, r3
    3fc0:	4610      	mov	r0, r2
    3fc2:	4b31      	ldr	r3, [pc, #196]	; (4088 <_can_async_init+0x1c0>)
    3fc4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	681a      	ldr	r2, [r3, #0]
    3fca:	4b30      	ldr	r3, [pc, #192]	; (408c <_can_async_init+0x1c4>)
    3fcc:	b29b      	uxth	r3, r3
    3fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3fd2:	4619      	mov	r1, r3
    3fd4:	4610      	mov	r0, r2
    3fd6:	4b2e      	ldr	r3, [pc, #184]	; (4090 <_can_async_init+0x1c8>)
    3fd8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3fe2:	4618      	mov	r0, r3
    3fe4:	4b2b      	ldr	r3, [pc, #172]	; (4094 <_can_async_init+0x1cc>)
    3fe6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3fe8:	204f      	movs	r0, #79	; 0x4f
    3fea:	4b2b      	ldr	r3, [pc, #172]	; (4098 <_can_async_init+0x1d0>)
    3fec:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3fee:	204f      	movs	r0, #79	; 0x4f
    3ff0:	4b2a      	ldr	r3, [pc, #168]	; (409c <_can_async_init+0x1d4>)
    3ff2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3ff4:	204f      	movs	r0, #79	; 0x4f
    3ff6:	4b2a      	ldr	r3, [pc, #168]	; (40a0 <_can_async_init+0x1d8>)
    3ff8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	681b      	ldr	r3, [r3, #0]
    3ffe:	2101      	movs	r1, #1
    4000:	4618      	mov	r0, r3
    4002:	4b28      	ldr	r3, [pc, #160]	; (40a4 <_can_async_init+0x1dc>)
    4004:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	681b      	ldr	r3, [r3, #0]
    400a:	4618      	mov	r0, r3
    400c:	4b26      	ldr	r3, [pc, #152]	; (40a8 <_can_async_init+0x1e0>)
    400e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	4618      	mov	r0, r3
    4016:	4b25      	ldr	r3, [pc, #148]	; (40ac <_can_async_init+0x1e4>)
    4018:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    401a:	bf00      	nop
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	4618      	mov	r0, r3
    4022:	4b06      	ldr	r3, [pc, #24]	; (403c <_can_async_init+0x174>)
    4024:	4798      	blx	r3
    4026:	4603      	mov	r3, r0
    4028:	2b00      	cmp	r3, #0
    402a:	d1f7      	bne.n	401c <_can_async_init+0x154>
	};

	return ERR_NONE;
    402c:	2300      	movs	r3, #0
}
    402e:	4618      	mov	r0, r3
    4030:	3708      	adds	r7, #8
    4032:	46bd      	mov	sp, r7
    4034:	bd80      	pop	{r7, pc}
    4036:	bf00      	nop
    4038:	00003c7d 	.word	0x00003c7d
    403c:	00003c9d 	.word	0x00003c9d
    4040:	00003ceb 	.word	0x00003ceb
    4044:	42000400 	.word	0x42000400
    4048:	20000954 	.word	0x20000954
    404c:	20000004 	.word	0x20000004
    4050:	00003d2b 	.word	0x00003d2b
    4054:	00003c45 	.word	0x00003c45
    4058:	00003d4d 	.word	0x00003d4d
    405c:	00003c61 	.word	0x00003c61
    4060:	20001738 	.word	0x20001738
    4064:	00003e31 	.word	0x00003e31
    4068:	00003e4f 	.word	0x00003e4f
    406c:	00003e8b 	.word	0x00003e8b
    4070:	200016f0 	.word	0x200016f0
    4074:	00003e6d 	.word	0x00003e6d
    4078:	200008b4 	.word	0x200008b4
    407c:	00003ea9 	.word	0x00003ea9
    4080:	00003db9 	.word	0x00003db9
    4084:	200008c4 	.word	0x200008c4
    4088:	00003dd7 	.word	0x00003dd7
    408c:	20000944 	.word	0x20000944
    4090:	00003df5 	.word	0x00003df5
    4094:	00003e13 	.word	0x00003e13
    4098:	00003b9d 	.word	0x00003b9d
    409c:	00003be1 	.word	0x00003be1
    40a0:	00003b61 	.word	0x00003b61
    40a4:	00003d9d 	.word	0x00003d9d
    40a8:	00003d0b 	.word	0x00003d0b
    40ac:	00003ccb 	.word	0x00003ccb

000040b0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    40b0:	b590      	push	{r4, r7, lr}
    40b2:	b083      	sub	sp, #12
    40b4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    40b6:	4b2c      	ldr	r3, [pc, #176]	; (4168 <CAN1_Handler+0xb8>)
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	4618      	mov	r0, r3
    40c2:	4b2a      	ldr	r3, [pc, #168]	; (416c <CAN1_Handler+0xbc>)
    40c4:	4798      	blx	r3
    40c6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    40c8:	683b      	ldr	r3, [r7, #0]
    40ca:	f003 0301 	and.w	r3, r3, #1
    40ce:	2b00      	cmp	r3, #0
    40d0:	d003      	beq.n	40da <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	689b      	ldr	r3, [r3, #8]
    40d6:	6878      	ldr	r0, [r7, #4]
    40d8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    40da:	683b      	ldr	r3, [r7, #0]
    40dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	685b      	ldr	r3, [r3, #4]
    40e8:	6878      	ldr	r0, [r7, #4]
    40ea:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    40ec:	683b      	ldr	r3, [r7, #0]
    40ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    40f2:	2b00      	cmp	r3, #0
    40f4:	d004      	beq.n	4100 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    40f6:	687b      	ldr	r3, [r7, #4]
    40f8:	68db      	ldr	r3, [r3, #12]
    40fa:	2103      	movs	r1, #3
    40fc:	6878      	ldr	r0, [r7, #4]
    40fe:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4100:	683b      	ldr	r3, [r7, #0]
    4102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4106:	2b00      	cmp	r3, #0
    4108:	d004      	beq.n	4114 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	68db      	ldr	r3, [r3, #12]
    410e:	2100      	movs	r1, #0
    4110:	6878      	ldr	r0, [r7, #4]
    4112:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4114:	683b      	ldr	r3, [r7, #0]
    4116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    411a:	2b00      	cmp	r3, #0
    411c:	d00f      	beq.n	413e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	68dc      	ldr	r4, [r3, #12]
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	681b      	ldr	r3, [r3, #0]
    4126:	4618      	mov	r0, r3
    4128:	4b11      	ldr	r3, [pc, #68]	; (4170 <CAN1_Handler+0xc0>)
    412a:	4798      	blx	r3
    412c:	4603      	mov	r3, r0
    412e:	2b00      	cmp	r3, #0
    4130:	d001      	beq.n	4136 <CAN1_Handler+0x86>
    4132:	2302      	movs	r3, #2
    4134:	e000      	b.n	4138 <CAN1_Handler+0x88>
    4136:	2301      	movs	r3, #1
    4138:	4619      	mov	r1, r3
    413a:	6878      	ldr	r0, [r7, #4]
    413c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    413e:	683b      	ldr	r3, [r7, #0]
    4140:	f003 0308 	and.w	r3, r3, #8
    4144:	2b00      	cmp	r3, #0
    4146:	d004      	beq.n	4152 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	68db      	ldr	r3, [r3, #12]
    414c:	2104      	movs	r1, #4
    414e:	6878      	ldr	r0, [r7, #4]
    4150:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	6839      	ldr	r1, [r7, #0]
    4158:	4618      	mov	r0, r3
    415a:	4b06      	ldr	r3, [pc, #24]	; (4174 <CAN1_Handler+0xc4>)
    415c:	4798      	blx	r3
}
    415e:	bf00      	nop
    4160:	370c      	adds	r7, #12
    4162:	46bd      	mov	sp, r7
    4164:	bd90      	pop	{r4, r7, pc}
    4166:	bf00      	nop
    4168:	20000954 	.word	0x20000954
    416c:	00003d85 	.word	0x00003d85
    4170:	00003c1d 	.word	0x00003c1d
    4174:	00003d69 	.word	0x00003d69

00004178 <__NVIC_SetPendingIRQ>:
{
    4178:	b480      	push	{r7}
    417a:	b083      	sub	sp, #12
    417c:	af00      	add	r7, sp, #0
    417e:	4603      	mov	r3, r0
    4180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4186:	2b00      	cmp	r3, #0
    4188:	db0c      	blt.n	41a4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    418a:	4909      	ldr	r1, [pc, #36]	; (41b0 <__NVIC_SetPendingIRQ+0x38>)
    418c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4190:	095b      	lsrs	r3, r3, #5
    4192:	88fa      	ldrh	r2, [r7, #6]
    4194:	f002 021f 	and.w	r2, r2, #31
    4198:	2001      	movs	r0, #1
    419a:	fa00 f202 	lsl.w	r2, r0, r2
    419e:	3340      	adds	r3, #64	; 0x40
    41a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    41a4:	bf00      	nop
    41a6:	370c      	adds	r7, #12
    41a8:	46bd      	mov	sp, r7
    41aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ae:	4770      	bx	lr
    41b0:	e000e100 	.word	0xe000e100

000041b4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b082      	sub	sp, #8
    41b8:	af00      	add	r7, sp, #0
    41ba:	4603      	mov	r3, r0
    41bc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    41be:	79fb      	ldrb	r3, [r7, #7]
    41c0:	b21b      	sxth	r3, r3
    41c2:	4618      	mov	r0, r3
    41c4:	4b02      	ldr	r3, [pc, #8]	; (41d0 <_irq_set+0x1c>)
    41c6:	4798      	blx	r3
}
    41c8:	bf00      	nop
    41ca:	3708      	adds	r7, #8
    41cc:	46bd      	mov	sp, r7
    41ce:	bd80      	pop	{r7, pc}
    41d0:	00004179 	.word	0x00004179

000041d4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	4603      	mov	r3, r0
    41dc:	6039      	str	r1, [r7, #0]
    41de:	80fb      	strh	r3, [r7, #6]
    41e0:	4613      	mov	r3, r2
    41e2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    41e4:	797b      	ldrb	r3, [r7, #5]
    41e6:	3b04      	subs	r3, #4
    41e8:	2b05      	cmp	r3, #5
    41ea:	d86b      	bhi.n	42c4 <_get_cycles_for_us_internal+0xf0>
    41ec:	a201      	add	r2, pc, #4	; (adr r2, 41f4 <_get_cycles_for_us_internal+0x20>)
    41ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41f2:	bf00      	nop
    41f4:	000042a3 	.word	0x000042a3
    41f8:	00004283 	.word	0x00004283
    41fc:	00004265 	.word	0x00004265
    4200:	00004247 	.word	0x00004247
    4204:	00004229 	.word	0x00004229
    4208:	0000420d 	.word	0x0000420d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    420c:	88fb      	ldrh	r3, [r7, #6]
    420e:	683a      	ldr	r2, [r7, #0]
    4210:	4935      	ldr	r1, [pc, #212]	; (42e8 <_get_cycles_for_us_internal+0x114>)
    4212:	fba1 1202 	umull	r1, r2, r1, r2
    4216:	0c92      	lsrs	r2, r2, #18
    4218:	fb02 f303 	mul.w	r3, r2, r3
    421c:	3302      	adds	r3, #2
    421e:	4a33      	ldr	r2, [pc, #204]	; (42ec <_get_cycles_for_us_internal+0x118>)
    4220:	fba2 2303 	umull	r2, r3, r2, r3
    4224:	085b      	lsrs	r3, r3, #1
    4226:	e059      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4228:	88fb      	ldrh	r3, [r7, #6]
    422a:	683a      	ldr	r2, [r7, #0]
    422c:	0952      	lsrs	r2, r2, #5
    422e:	4930      	ldr	r1, [pc, #192]	; (42f0 <_get_cycles_for_us_internal+0x11c>)
    4230:	fba1 1202 	umull	r1, r2, r1, r2
    4234:	09d2      	lsrs	r2, r2, #7
    4236:	fb02 f303 	mul.w	r3, r2, r3
    423a:	331d      	adds	r3, #29
    423c:	4a2d      	ldr	r2, [pc, #180]	; (42f4 <_get_cycles_for_us_internal+0x120>)
    423e:	fba2 2303 	umull	r2, r3, r2, r3
    4242:	091b      	lsrs	r3, r3, #4
    4244:	e04a      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4246:	88fb      	ldrh	r3, [r7, #6]
    4248:	683a      	ldr	r2, [r7, #0]
    424a:	492b      	ldr	r1, [pc, #172]	; (42f8 <_get_cycles_for_us_internal+0x124>)
    424c:	fba1 1202 	umull	r1, r2, r1, r2
    4250:	0b52      	lsrs	r2, r2, #13
    4252:	fb02 f303 	mul.w	r3, r2, r3
    4256:	f203 132b 	addw	r3, r3, #299	; 0x12b
    425a:	4a28      	ldr	r2, [pc, #160]	; (42fc <_get_cycles_for_us_internal+0x128>)
    425c:	fba2 2303 	umull	r2, r3, r2, r3
    4260:	095b      	lsrs	r3, r3, #5
    4262:	e03b      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4264:	88fb      	ldrh	r3, [r7, #6]
    4266:	683a      	ldr	r2, [r7, #0]
    4268:	4925      	ldr	r1, [pc, #148]	; (4300 <_get_cycles_for_us_internal+0x12c>)
    426a:	fba1 1202 	umull	r1, r2, r1, r2
    426e:	0992      	lsrs	r2, r2, #6
    4270:	fb02 f303 	mul.w	r3, r2, r3
    4274:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4278:	4a22      	ldr	r2, [pc, #136]	; (4304 <_get_cycles_for_us_internal+0x130>)
    427a:	fba2 2303 	umull	r2, r3, r2, r3
    427e:	099b      	lsrs	r3, r3, #6
    4280:	e02c      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4282:	88fb      	ldrh	r3, [r7, #6]
    4284:	683a      	ldr	r2, [r7, #0]
    4286:	4920      	ldr	r1, [pc, #128]	; (4308 <_get_cycles_for_us_internal+0x134>)
    4288:	fba1 1202 	umull	r1, r2, r1, r2
    428c:	0952      	lsrs	r2, r2, #5
    428e:	fb02 f303 	mul.w	r3, r2, r3
    4292:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4296:	332f      	adds	r3, #47	; 0x2f
    4298:	4a1c      	ldr	r2, [pc, #112]	; (430c <_get_cycles_for_us_internal+0x138>)
    429a:	fba2 2303 	umull	r2, r3, r2, r3
    429e:	0b5b      	lsrs	r3, r3, #13
    42a0:	e01c      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    42a2:	88fb      	ldrh	r3, [r7, #6]
    42a4:	683a      	ldr	r2, [r7, #0]
    42a6:	491a      	ldr	r1, [pc, #104]	; (4310 <_get_cycles_for_us_internal+0x13c>)
    42a8:	fba1 1202 	umull	r1, r2, r1, r2
    42ac:	08d2      	lsrs	r2, r2, #3
    42ae:	fb02 f303 	mul.w	r3, r2, r3
    42b2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    42b6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    42ba:	4a16      	ldr	r2, [pc, #88]	; (4314 <_get_cycles_for_us_internal+0x140>)
    42bc:	fba2 2303 	umull	r2, r3, r2, r3
    42c0:	0c5b      	lsrs	r3, r3, #17
    42c2:	e00b      	b.n	42dc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    42c4:	88fb      	ldrh	r3, [r7, #6]
    42c6:	683a      	ldr	r2, [r7, #0]
    42c8:	fb02 f303 	mul.w	r3, r2, r3
    42cc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    42d0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    42d4:	4a10      	ldr	r2, [pc, #64]	; (4318 <_get_cycles_for_us_internal+0x144>)
    42d6:	fba2 2303 	umull	r2, r3, r2, r3
    42da:	0c9b      	lsrs	r3, r3, #18
	}
}
    42dc:	4618      	mov	r0, r3
    42de:	370c      	adds	r7, #12
    42e0:	46bd      	mov	sp, r7
    42e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e6:	4770      	bx	lr
    42e8:	431bde83 	.word	0x431bde83
    42ec:	aaaaaaab 	.word	0xaaaaaaab
    42f0:	0a7c5ac5 	.word	0x0a7c5ac5
    42f4:	88888889 	.word	0x88888889
    42f8:	d1b71759 	.word	0xd1b71759
    42fc:	1b4e81b5 	.word	0x1b4e81b5
    4300:	10624dd3 	.word	0x10624dd3
    4304:	057619f1 	.word	0x057619f1
    4308:	51eb851f 	.word	0x51eb851f
    430c:	45e7b273 	.word	0x45e7b273
    4310:	cccccccd 	.word	0xcccccccd
    4314:	6fd91d85 	.word	0x6fd91d85
    4318:	165e9f81 	.word	0x165e9f81

0000431c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	4603      	mov	r3, r0
    4324:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4326:	88fb      	ldrh	r3, [r7, #6]
    4328:	2209      	movs	r2, #9
    432a:	4904      	ldr	r1, [pc, #16]	; (433c <_get_cycles_for_us+0x20>)
    432c:	4618      	mov	r0, r3
    432e:	4b04      	ldr	r3, [pc, #16]	; (4340 <_get_cycles_for_us+0x24>)
    4330:	4798      	blx	r3
    4332:	4603      	mov	r3, r0
}
    4334:	4618      	mov	r0, r3
    4336:	3708      	adds	r7, #8
    4338:	46bd      	mov	sp, r7
    433a:	bd80      	pop	{r7, pc}
    433c:	07270e00 	.word	0x07270e00
    4340:	000041d5 	.word	0x000041d5

00004344 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4344:	b480      	push	{r7}
    4346:	b083      	sub	sp, #12
    4348:	af00      	add	r7, sp, #0
    434a:	4603      	mov	r3, r0
    434c:	6039      	str	r1, [r7, #0]
    434e:	80fb      	strh	r3, [r7, #6]
    4350:	4613      	mov	r3, r2
    4352:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4354:	797b      	ldrb	r3, [r7, #5]
    4356:	3b04      	subs	r3, #4
    4358:	2b05      	cmp	r3, #5
    435a:	d870      	bhi.n	443e <_get_cycles_for_ms_internal+0xfa>
    435c:	a201      	add	r2, pc, #4	; (adr r2, 4364 <_get_cycles_for_ms_internal+0x20>)
    435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4362:	bf00      	nop
    4364:	00004421 	.word	0x00004421
    4368:	00004405 	.word	0x00004405
    436c:	000043e9 	.word	0x000043e9
    4370:	000043c5 	.word	0x000043c5
    4374:	000043a1 	.word	0x000043a1
    4378:	0000437d 	.word	0x0000437d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    437c:	88fb      	ldrh	r3, [r7, #6]
    437e:	683a      	ldr	r2, [r7, #0]
    4380:	4937      	ldr	r1, [pc, #220]	; (4460 <_get_cycles_for_ms_internal+0x11c>)
    4382:	fba1 1202 	umull	r1, r2, r1, r2
    4386:	0c92      	lsrs	r2, r2, #18
    4388:	fb02 f303 	mul.w	r3, r2, r3
    438c:	3302      	adds	r3, #2
    438e:	4a35      	ldr	r2, [pc, #212]	; (4464 <_get_cycles_for_ms_internal+0x120>)
    4390:	fba2 2303 	umull	r2, r3, r2, r3
    4394:	085b      	lsrs	r3, r3, #1
    4396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    439a:	fb02 f303 	mul.w	r3, r2, r3
    439e:	e058      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    43a0:	88fb      	ldrh	r3, [r7, #6]
    43a2:	683a      	ldr	r2, [r7, #0]
    43a4:	0952      	lsrs	r2, r2, #5
    43a6:	4930      	ldr	r1, [pc, #192]	; (4468 <_get_cycles_for_ms_internal+0x124>)
    43a8:	fba1 1202 	umull	r1, r2, r1, r2
    43ac:	09d2      	lsrs	r2, r2, #7
    43ae:	fb02 f303 	mul.w	r3, r2, r3
    43b2:	3302      	adds	r3, #2
    43b4:	4a2b      	ldr	r2, [pc, #172]	; (4464 <_get_cycles_for_ms_internal+0x120>)
    43b6:	fba2 2303 	umull	r2, r3, r2, r3
    43ba:	085b      	lsrs	r3, r3, #1
    43bc:	2264      	movs	r2, #100	; 0x64
    43be:	fb02 f303 	mul.w	r3, r2, r3
    43c2:	e046      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    43c4:	88fb      	ldrh	r3, [r7, #6]
    43c6:	683a      	ldr	r2, [r7, #0]
    43c8:	4928      	ldr	r1, [pc, #160]	; (446c <_get_cycles_for_ms_internal+0x128>)
    43ca:	fba1 1202 	umull	r1, r2, r1, r2
    43ce:	0b52      	lsrs	r2, r2, #13
    43d0:	fb02 f303 	mul.w	r3, r2, r3
    43d4:	3302      	adds	r3, #2
    43d6:	4a23      	ldr	r2, [pc, #140]	; (4464 <_get_cycles_for_ms_internal+0x120>)
    43d8:	fba2 2303 	umull	r2, r3, r2, r3
    43dc:	085a      	lsrs	r2, r3, #1
    43de:	4613      	mov	r3, r2
    43e0:	009b      	lsls	r3, r3, #2
    43e2:	4413      	add	r3, r2
    43e4:	005b      	lsls	r3, r3, #1
    43e6:	e034      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    43e8:	88fb      	ldrh	r3, [r7, #6]
    43ea:	683a      	ldr	r2, [r7, #0]
    43ec:	4920      	ldr	r1, [pc, #128]	; (4470 <_get_cycles_for_ms_internal+0x12c>)
    43ee:	fba1 1202 	umull	r1, r2, r1, r2
    43f2:	0992      	lsrs	r2, r2, #6
    43f4:	fb02 f303 	mul.w	r3, r2, r3
    43f8:	3302      	adds	r3, #2
    43fa:	4a1a      	ldr	r2, [pc, #104]	; (4464 <_get_cycles_for_ms_internal+0x120>)
    43fc:	fba2 2303 	umull	r2, r3, r2, r3
    4400:	085b      	lsrs	r3, r3, #1
    4402:	e026      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4404:	88fb      	ldrh	r3, [r7, #6]
    4406:	683a      	ldr	r2, [r7, #0]
    4408:	491a      	ldr	r1, [pc, #104]	; (4474 <_get_cycles_for_ms_internal+0x130>)
    440a:	fba1 1202 	umull	r1, r2, r1, r2
    440e:	0952      	lsrs	r2, r2, #5
    4410:	fb02 f303 	mul.w	r3, r2, r3
    4414:	331d      	adds	r3, #29
    4416:	4a18      	ldr	r2, [pc, #96]	; (4478 <_get_cycles_for_ms_internal+0x134>)
    4418:	fba2 2303 	umull	r2, r3, r2, r3
    441c:	091b      	lsrs	r3, r3, #4
    441e:	e018      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4420:	88fb      	ldrh	r3, [r7, #6]
    4422:	683a      	ldr	r2, [r7, #0]
    4424:	4915      	ldr	r1, [pc, #84]	; (447c <_get_cycles_for_ms_internal+0x138>)
    4426:	fba1 1202 	umull	r1, r2, r1, r2
    442a:	08d2      	lsrs	r2, r2, #3
    442c:	fb02 f303 	mul.w	r3, r2, r3
    4430:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4434:	4a12      	ldr	r2, [pc, #72]	; (4480 <_get_cycles_for_ms_internal+0x13c>)
    4436:	fba2 2303 	umull	r2, r3, r2, r3
    443a:	095b      	lsrs	r3, r3, #5
    443c:	e009      	b.n	4452 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    443e:	88fb      	ldrh	r3, [r7, #6]
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	fb02 f303 	mul.w	r3, r2, r3
    4446:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    444a:	4a0e      	ldr	r2, [pc, #56]	; (4484 <_get_cycles_for_ms_internal+0x140>)
    444c:	fba2 2303 	umull	r2, r3, r2, r3
    4450:	099b      	lsrs	r3, r3, #6
	}
}
    4452:	4618      	mov	r0, r3
    4454:	370c      	adds	r7, #12
    4456:	46bd      	mov	sp, r7
    4458:	f85d 7b04 	ldr.w	r7, [sp], #4
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	431bde83 	.word	0x431bde83
    4464:	aaaaaaab 	.word	0xaaaaaaab
    4468:	0a7c5ac5 	.word	0x0a7c5ac5
    446c:	d1b71759 	.word	0xd1b71759
    4470:	10624dd3 	.word	0x10624dd3
    4474:	51eb851f 	.word	0x51eb851f
    4478:	88888889 	.word	0x88888889
    447c:	cccccccd 	.word	0xcccccccd
    4480:	1b4e81b5 	.word	0x1b4e81b5
    4484:	057619f1 	.word	0x057619f1

00004488 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	4603      	mov	r3, r0
    4490:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4492:	88fb      	ldrh	r3, [r7, #6]
    4494:	2209      	movs	r2, #9
    4496:	4904      	ldr	r1, [pc, #16]	; (44a8 <_get_cycles_for_ms+0x20>)
    4498:	4618      	mov	r0, r3
    449a:	4b04      	ldr	r3, [pc, #16]	; (44ac <_get_cycles_for_ms+0x24>)
    449c:	4798      	blx	r3
    449e:	4603      	mov	r3, r0
}
    44a0:	4618      	mov	r0, r3
    44a2:	3708      	adds	r7, #8
    44a4:	46bd      	mov	sp, r7
    44a6:	bd80      	pop	{r7, pc}
    44a8:	07270e00 	.word	0x07270e00
    44ac:	00004345 	.word	0x00004345

000044b0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    44b0:	b480      	push	{r7}
    44b2:	b083      	sub	sp, #12
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
    44b8:	6039      	str	r1, [r7, #0]
    44ba:	bf00      	nop
    44bc:	f3af 8000 	nop.w

000044c0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    44c0:	3901      	subs	r1, #1
    44c2:	d8fd      	bhi.n	44c0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    44c4:	bf00      	nop
    44c6:	370c      	adds	r7, #12
    44c8:	46bd      	mov	sp, r7
    44ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ce:	4770      	bx	lr

000044d0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    44d0:	b480      	push	{r7}
    44d2:	b083      	sub	sp, #12
    44d4:	af00      	add	r7, sp, #0
    44d6:	6078      	str	r0, [r7, #4]
    44d8:	460b      	mov	r3, r1
    44da:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	881b      	ldrh	r3, [r3, #0]
    44e0:	b29a      	uxth	r2, r3
    44e2:	887b      	ldrh	r3, [r7, #2]
    44e4:	021b      	lsls	r3, r3, #8
    44e6:	b29b      	uxth	r3, r3
    44e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    44ec:	b29b      	uxth	r3, r3
    44ee:	4313      	orrs	r3, r2
    44f0:	b29a      	uxth	r2, r3
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    44f6:	bf00      	nop
    44f8:	370c      	adds	r7, #12
    44fa:	46bd      	mov	sp, r7
    44fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4500:	4770      	bx	lr

00004502 <hri_port_set_EVCTRL_reg>:
{
    4502:	b480      	push	{r7}
    4504:	b085      	sub	sp, #20
    4506:	af00      	add	r7, sp, #0
    4508:	60f8      	str	r0, [r7, #12]
    450a:	460b      	mov	r3, r1
    450c:	607a      	str	r2, [r7, #4]
    450e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4510:	7afb      	ldrb	r3, [r7, #11]
    4512:	7afa      	ldrb	r2, [r7, #11]
    4514:	68f9      	ldr	r1, [r7, #12]
    4516:	01d2      	lsls	r2, r2, #7
    4518:	440a      	add	r2, r1
    451a:	322c      	adds	r2, #44	; 0x2c
    451c:	6811      	ldr	r1, [r2, #0]
    451e:	687a      	ldr	r2, [r7, #4]
    4520:	430a      	orrs	r2, r1
    4522:	68f9      	ldr	r1, [r7, #12]
    4524:	01db      	lsls	r3, r3, #7
    4526:	440b      	add	r3, r1
    4528:	332c      	adds	r3, #44	; 0x2c
    452a:	601a      	str	r2, [r3, #0]
}
    452c:	bf00      	nop
    452e:	3714      	adds	r7, #20
    4530:	46bd      	mov	sp, r7
    4532:	f85d 7b04 	ldr.w	r7, [sp], #4
    4536:	4770      	bx	lr

00004538 <_port_event_init>:

static inline void _port_event_init()
{
    4538:	b580      	push	{r7, lr}
    453a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    453c:	2200      	movs	r2, #0
    453e:	2100      	movs	r1, #0
    4540:	480a      	ldr	r0, [pc, #40]	; (456c <_port_event_init+0x34>)
    4542:	4b0b      	ldr	r3, [pc, #44]	; (4570 <_port_event_init+0x38>)
    4544:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4546:	2200      	movs	r2, #0
    4548:	2101      	movs	r1, #1
    454a:	4808      	ldr	r0, [pc, #32]	; (456c <_port_event_init+0x34>)
    454c:	4b08      	ldr	r3, [pc, #32]	; (4570 <_port_event_init+0x38>)
    454e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4550:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4554:	2102      	movs	r1, #2
    4556:	4805      	ldr	r0, [pc, #20]	; (456c <_port_event_init+0x34>)
    4558:	4b05      	ldr	r3, [pc, #20]	; (4570 <_port_event_init+0x38>)
    455a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    455c:	2200      	movs	r2, #0
    455e:	2103      	movs	r1, #3
    4560:	4802      	ldr	r0, [pc, #8]	; (456c <_port_event_init+0x34>)
    4562:	4b03      	ldr	r3, [pc, #12]	; (4570 <_port_event_init+0x38>)
    4564:	4798      	blx	r3
}
    4566:	bf00      	nop
    4568:	bd80      	pop	{r7, pc}
    456a:	bf00      	nop
    456c:	41008000 	.word	0x41008000
    4570:	00004503 	.word	0x00004503

00004574 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4574:	b580      	push	{r7, lr}
    4576:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4578:	2104      	movs	r1, #4
    457a:	480b      	ldr	r0, [pc, #44]	; (45a8 <_init_chip+0x34>)
    457c:	4b0b      	ldr	r3, [pc, #44]	; (45ac <_init_chip+0x38>)
    457e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4580:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <_init_chip+0x3c>)
    4582:	4798      	blx	r3
	_oscctrl_init_sources();
    4584:	4b0b      	ldr	r3, [pc, #44]	; (45b4 <_init_chip+0x40>)
    4586:	4798      	blx	r3
	_mclk_init();
    4588:	4b0b      	ldr	r3, [pc, #44]	; (45b8 <_init_chip+0x44>)
    458a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    458c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4590:	4b0a      	ldr	r3, [pc, #40]	; (45bc <_init_chip+0x48>)
    4592:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4594:	4b0a      	ldr	r3, [pc, #40]	; (45c0 <_init_chip+0x4c>)
    4596:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4598:	f640 30df 	movw	r0, #3039	; 0xbdf
    459c:	4b07      	ldr	r3, [pc, #28]	; (45bc <_init_chip+0x48>)
    459e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    45a0:	4b08      	ldr	r3, [pc, #32]	; (45c4 <_init_chip+0x50>)
    45a2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    45a4:	bf00      	nop
    45a6:	bd80      	pop	{r7, pc}
    45a8:	41004000 	.word	0x41004000
    45ac:	000044d1 	.word	0x000044d1
    45b0:	0000509d 	.word	0x0000509d
    45b4:	00005565 	.word	0x00005565
    45b8:	00004fbd 	.word	0x00004fbd
    45bc:	00004e65 	.word	0x00004e65
    45c0:	000055a5 	.word	0x000055a5
    45c4:	00004539 	.word	0x00004539

000045c8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    45c8:	b480      	push	{r7}
    45ca:	b083      	sub	sp, #12
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
    45d0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	683a      	ldr	r2, [r7, #0]
    45d6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    45d8:	2300      	movs	r3, #0
}
    45da:	4618      	mov	r0, r3
    45dc:	370c      	adds	r7, #12
    45de:	46bd      	mov	sp, r7
    45e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e4:	4770      	bx	lr
	...

000045e8 <__NVIC_EnableIRQ>:
{
    45e8:	b480      	push	{r7}
    45ea:	b083      	sub	sp, #12
    45ec:	af00      	add	r7, sp, #0
    45ee:	4603      	mov	r3, r0
    45f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    45f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    45f6:	2b00      	cmp	r3, #0
    45f8:	db0b      	blt.n	4612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45fa:	4909      	ldr	r1, [pc, #36]	; (4620 <__NVIC_EnableIRQ+0x38>)
    45fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4600:	095b      	lsrs	r3, r3, #5
    4602:	88fa      	ldrh	r2, [r7, #6]
    4604:	f002 021f 	and.w	r2, r2, #31
    4608:	2001      	movs	r0, #1
    460a:	fa00 f202 	lsl.w	r2, r0, r2
    460e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4612:	bf00      	nop
    4614:	370c      	adds	r7, #12
    4616:	46bd      	mov	sp, r7
    4618:	f85d 7b04 	ldr.w	r7, [sp], #4
    461c:	4770      	bx	lr
    461e:	bf00      	nop
    4620:	e000e100 	.word	0xe000e100

00004624 <__NVIC_DisableIRQ>:
{
    4624:	b480      	push	{r7}
    4626:	b083      	sub	sp, #12
    4628:	af00      	add	r7, sp, #0
    462a:	4603      	mov	r3, r0
    462c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    462e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4632:	2b00      	cmp	r3, #0
    4634:	db10      	blt.n	4658 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4636:	490b      	ldr	r1, [pc, #44]	; (4664 <__NVIC_DisableIRQ+0x40>)
    4638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    463c:	095b      	lsrs	r3, r3, #5
    463e:	88fa      	ldrh	r2, [r7, #6]
    4640:	f002 021f 	and.w	r2, r2, #31
    4644:	2001      	movs	r0, #1
    4646:	fa00 f202 	lsl.w	r2, r0, r2
    464a:	3320      	adds	r3, #32
    464c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4650:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4654:	f3bf 8f6f 	isb	sy
}
    4658:	bf00      	nop
    465a:	370c      	adds	r7, #12
    465c:	46bd      	mov	sp, r7
    465e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4662:	4770      	bx	lr
    4664:	e000e100 	.word	0xe000e100

00004668 <__NVIC_ClearPendingIRQ>:
{
    4668:	b480      	push	{r7}
    466a:	b083      	sub	sp, #12
    466c:	af00      	add	r7, sp, #0
    466e:	4603      	mov	r3, r0
    4670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4676:	2b00      	cmp	r3, #0
    4678:	db0c      	blt.n	4694 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    467a:	4909      	ldr	r1, [pc, #36]	; (46a0 <__NVIC_ClearPendingIRQ+0x38>)
    467c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4680:	095b      	lsrs	r3, r3, #5
    4682:	88fa      	ldrh	r2, [r7, #6]
    4684:	f002 021f 	and.w	r2, r2, #31
    4688:	2001      	movs	r0, #1
    468a:	fa00 f202 	lsl.w	r2, r0, r2
    468e:	3360      	adds	r3, #96	; 0x60
    4690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4694:	bf00      	nop
    4696:	370c      	adds	r7, #12
    4698:	46bd      	mov	sp, r7
    469a:	f85d 7b04 	ldr.w	r7, [sp], #4
    469e:	4770      	bx	lr
    46a0:	e000e100 	.word	0xe000e100

000046a4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    46a4:	b480      	push	{r7}
    46a6:	b083      	sub	sp, #12
    46a8:	af00      	add	r7, sp, #0
    46aa:	6078      	str	r0, [r7, #4]
    46ac:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    46ae:	bf00      	nop
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	685a      	ldr	r2, [r3, #4]
    46b4:	683b      	ldr	r3, [r7, #0]
    46b6:	4013      	ands	r3, r2
    46b8:	2b00      	cmp	r3, #0
    46ba:	d1f9      	bne.n	46b0 <hri_eic_wait_for_sync+0xc>
	};
}
    46bc:	bf00      	nop
    46be:	370c      	adds	r7, #12
    46c0:	46bd      	mov	sp, r7
    46c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c6:	4770      	bx	lr

000046c8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    46c8:	b480      	push	{r7}
    46ca:	b083      	sub	sp, #12
    46cc:	af00      	add	r7, sp, #0
    46ce:	6078      	str	r0, [r7, #4]
    46d0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	685a      	ldr	r2, [r3, #4]
    46d6:	683b      	ldr	r3, [r7, #0]
    46d8:	4013      	ands	r3, r2
    46da:	2b00      	cmp	r3, #0
    46dc:	bf14      	ite	ne
    46de:	2301      	movne	r3, #1
    46e0:	2300      	moveq	r3, #0
    46e2:	b2db      	uxtb	r3, r3
}
    46e4:	4618      	mov	r0, r3
    46e6:	370c      	adds	r7, #12
    46e8:	46bd      	mov	sp, r7
    46ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ee:	4770      	bx	lr

000046f0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    46f0:	b480      	push	{r7}
    46f2:	b083      	sub	sp, #12
    46f4:	af00      	add	r7, sp, #0
    46f6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	695b      	ldr	r3, [r3, #20]
}
    46fc:	4618      	mov	r0, r3
    46fe:	370c      	adds	r7, #12
    4700:	46bd      	mov	sp, r7
    4702:	f85d 7b04 	ldr.w	r7, [sp], #4
    4706:	4770      	bx	lr

00004708 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4708:	b480      	push	{r7}
    470a:	b083      	sub	sp, #12
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
    4710:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4712:	687b      	ldr	r3, [r7, #4]
    4714:	683a      	ldr	r2, [r7, #0]
    4716:	615a      	str	r2, [r3, #20]
}
    4718:	bf00      	nop
    471a:	370c      	adds	r7, #12
    471c:	46bd      	mov	sp, r7
    471e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4722:	4770      	bx	lr

00004724 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4724:	b480      	push	{r7}
    4726:	b083      	sub	sp, #12
    4728:	af00      	add	r7, sp, #0
    472a:	6078      	str	r0, [r7, #4]
    472c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	683a      	ldr	r2, [r7, #0]
    4732:	611a      	str	r2, [r3, #16]
}
    4734:	bf00      	nop
    4736:	370c      	adds	r7, #12
    4738:	46bd      	mov	sp, r7
    473a:	f85d 7b04 	ldr.w	r7, [sp], #4
    473e:	4770      	bx	lr

00004740 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4740:	b480      	push	{r7}
    4742:	b083      	sub	sp, #12
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
    4748:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	683a      	ldr	r2, [r7, #0]
    474e:	60da      	str	r2, [r3, #12]
}
    4750:	bf00      	nop
    4752:	370c      	adds	r7, #12
    4754:	46bd      	mov	sp, r7
    4756:	f85d 7b04 	ldr.w	r7, [sp], #4
    475a:	4770      	bx	lr

0000475c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    475c:	b580      	push	{r7, lr}
    475e:	b082      	sub	sp, #8
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	781b      	ldrb	r3, [r3, #0]
    4768:	b2db      	uxtb	r3, r3
    476a:	f043 0302 	orr.w	r3, r3, #2
    476e:	b2da      	uxtb	r2, r3
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4774:	2103      	movs	r1, #3
    4776:	6878      	ldr	r0, [r7, #4]
    4778:	4b02      	ldr	r3, [pc, #8]	; (4784 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    477a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    477c:	bf00      	nop
    477e:	3708      	adds	r7, #8
    4780:	46bd      	mov	sp, r7
    4782:	bd80      	pop	{r7, pc}
    4784:	000046a5 	.word	0x000046a5

00004788 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4788:	b580      	push	{r7, lr}
    478a:	b082      	sub	sp, #8
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	781b      	ldrb	r3, [r3, #0]
    4794:	b2db      	uxtb	r3, r3
    4796:	f023 0302 	bic.w	r3, r3, #2
    479a:	b2da      	uxtb	r2, r3
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    47a0:	2103      	movs	r1, #3
    47a2:	6878      	ldr	r0, [r7, #4]
    47a4:	4b02      	ldr	r3, [pc, #8]	; (47b0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    47a6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47a8:	bf00      	nop
    47aa:	3708      	adds	r7, #8
    47ac:	46bd      	mov	sp, r7
    47ae:	bd80      	pop	{r7, pc}
    47b0:	000046a5 	.word	0x000046a5

000047b4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    47b4:	b580      	push	{r7, lr}
    47b6:	b084      	sub	sp, #16
    47b8:	af00      	add	r7, sp, #0
    47ba:	6078      	str	r0, [r7, #4]
    47bc:	460b      	mov	r3, r1
    47be:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    47c6:	7bfb      	ldrb	r3, [r7, #15]
    47c8:	f023 0310 	bic.w	r3, r3, #16
    47cc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    47ce:	78fb      	ldrb	r3, [r7, #3]
    47d0:	011b      	lsls	r3, r3, #4
    47d2:	b25a      	sxtb	r2, r3
    47d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    47d8:	4313      	orrs	r3, r2
    47da:	b25b      	sxtb	r3, r3
    47dc:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	7bfa      	ldrb	r2, [r7, #15]
    47e2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    47e4:	2103      	movs	r1, #3
    47e6:	6878      	ldr	r0, [r7, #4]
    47e8:	4b02      	ldr	r3, [pc, #8]	; (47f4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    47ea:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    47ec:	bf00      	nop
    47ee:	3710      	adds	r7, #16
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}
    47f4:	000046a5 	.word	0x000046a5

000047f8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    47f8:	b580      	push	{r7, lr}
    47fa:	b084      	sub	sp, #16
    47fc:	af00      	add	r7, sp, #0
    47fe:	6078      	str	r0, [r7, #4]
    4800:	460b      	mov	r3, r1
    4802:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4804:	2103      	movs	r1, #3
    4806:	6878      	ldr	r0, [r7, #4]
    4808:	4b06      	ldr	r3, [pc, #24]	; (4824 <hri_eic_get_CTRLA_reg+0x2c>)
    480a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	781b      	ldrb	r3, [r3, #0]
    4810:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4812:	7bfa      	ldrb	r2, [r7, #15]
    4814:	78fb      	ldrb	r3, [r7, #3]
    4816:	4013      	ands	r3, r2
    4818:	73fb      	strb	r3, [r7, #15]
	return tmp;
    481a:	7bfb      	ldrb	r3, [r7, #15]
}
    481c:	4618      	mov	r0, r3
    481e:	3710      	adds	r7, #16
    4820:	46bd      	mov	sp, r7
    4822:	bd80      	pop	{r7, pc}
    4824:	000046a5 	.word	0x000046a5

00004828 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
    482e:	6078      	str	r0, [r7, #4]
    4830:	460b      	mov	r3, r1
    4832:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	78fa      	ldrb	r2, [r7, #3]
    4838:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    483a:	2103      	movs	r1, #3
    483c:	6878      	ldr	r0, [r7, #4]
    483e:	4b03      	ldr	r3, [pc, #12]	; (484c <hri_eic_write_CTRLA_reg+0x24>)
    4840:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4842:	bf00      	nop
    4844:	3708      	adds	r7, #8
    4846:	46bd      	mov	sp, r7
    4848:	bd80      	pop	{r7, pc}
    484a:	bf00      	nop
    484c:	000046a5 	.word	0x000046a5

00004850 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4850:	b480      	push	{r7}
    4852:	b083      	sub	sp, #12
    4854:	af00      	add	r7, sp, #0
    4856:	6078      	str	r0, [r7, #4]
    4858:	460b      	mov	r3, r1
    485a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	78fa      	ldrb	r2, [r7, #3]
    4860:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4862:	bf00      	nop
    4864:	370c      	adds	r7, #12
    4866:	46bd      	mov	sp, r7
    4868:	f85d 7b04 	ldr.w	r7, [sp], #4
    486c:	4770      	bx	lr

0000486e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    486e:	b480      	push	{r7}
    4870:	b083      	sub	sp, #12
    4872:	af00      	add	r7, sp, #0
    4874:	6078      	str	r0, [r7, #4]
    4876:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	683a      	ldr	r2, [r7, #0]
    487c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    487e:	bf00      	nop
    4880:	370c      	adds	r7, #12
    4882:	46bd      	mov	sp, r7
    4884:	f85d 7b04 	ldr.w	r7, [sp], #4
    4888:	4770      	bx	lr

0000488a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    488a:	b480      	push	{r7}
    488c:	b083      	sub	sp, #12
    488e:	af00      	add	r7, sp, #0
    4890:	6078      	str	r0, [r7, #4]
    4892:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	683a      	ldr	r2, [r7, #0]
    4898:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    489a:	bf00      	nop
    489c:	370c      	adds	r7, #12
    489e:	46bd      	mov	sp, r7
    48a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48a4:	4770      	bx	lr

000048a6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    48a6:	b480      	push	{r7}
    48a8:	b085      	sub	sp, #20
    48aa:	af00      	add	r7, sp, #0
    48ac:	60f8      	str	r0, [r7, #12]
    48ae:	460b      	mov	r3, r1
    48b0:	607a      	str	r2, [r7, #4]
    48b2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    48b4:	7afb      	ldrb	r3, [r7, #11]
    48b6:	68fa      	ldr	r2, [r7, #12]
    48b8:	3306      	adds	r3, #6
    48ba:	009b      	lsls	r3, r3, #2
    48bc:	4413      	add	r3, r2
    48be:	687a      	ldr	r2, [r7, #4]
    48c0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    48c2:	bf00      	nop
    48c4:	3714      	adds	r7, #20
    48c6:	46bd      	mov	sp, r7
    48c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48cc:	4770      	bx	lr

000048ce <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    48ce:	b480      	push	{r7}
    48d0:	b083      	sub	sp, #12
    48d2:	af00      	add	r7, sp, #0
    48d4:	6078      	str	r0, [r7, #4]
    48d6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	683a      	ldr	r2, [r7, #0]
    48dc:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    48de:	bf00      	nop
    48e0:	370c      	adds	r7, #12
    48e2:	46bd      	mov	sp, r7
    48e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e8:	4770      	bx	lr

000048ea <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    48ea:	b480      	push	{r7}
    48ec:	b083      	sub	sp, #12
    48ee:	af00      	add	r7, sp, #0
    48f0:	6078      	str	r0, [r7, #4]
    48f2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	683a      	ldr	r2, [r7, #0]
    48f8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    48fa:	bf00      	nop
    48fc:	370c      	adds	r7, #12
    48fe:	46bd      	mov	sp, r7
    4900:	f85d 7b04 	ldr.w	r7, [sp], #4
    4904:	4770      	bx	lr
	...

00004908 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4910:	2101      	movs	r1, #1
    4912:	484f      	ldr	r0, [pc, #316]	; (4a50 <_ext_irq_init+0x148>)
    4914:	4b4f      	ldr	r3, [pc, #316]	; (4a54 <_ext_irq_init+0x14c>)
    4916:	4798      	blx	r3
    4918:	4603      	mov	r3, r0
    491a:	f083 0301 	eor.w	r3, r3, #1
    491e:	b2db      	uxtb	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d011      	beq.n	4948 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4924:	2102      	movs	r1, #2
    4926:	484a      	ldr	r0, [pc, #296]	; (4a50 <_ext_irq_init+0x148>)
    4928:	4b4b      	ldr	r3, [pc, #300]	; (4a58 <_ext_irq_init+0x150>)
    492a:	4798      	blx	r3
    492c:	4603      	mov	r3, r0
    492e:	2b00      	cmp	r3, #0
    4930:	d006      	beq.n	4940 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4932:	4847      	ldr	r0, [pc, #284]	; (4a50 <_ext_irq_init+0x148>)
    4934:	4b49      	ldr	r3, [pc, #292]	; (4a5c <_ext_irq_init+0x154>)
    4936:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4938:	2102      	movs	r1, #2
    493a:	4845      	ldr	r0, [pc, #276]	; (4a50 <_ext_irq_init+0x148>)
    493c:	4b48      	ldr	r3, [pc, #288]	; (4a60 <_ext_irq_init+0x158>)
    493e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4940:	2101      	movs	r1, #1
    4942:	4843      	ldr	r0, [pc, #268]	; (4a50 <_ext_irq_init+0x148>)
    4944:	4b47      	ldr	r3, [pc, #284]	; (4a64 <_ext_irq_init+0x15c>)
    4946:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4948:	2101      	movs	r1, #1
    494a:	4841      	ldr	r0, [pc, #260]	; (4a50 <_ext_irq_init+0x148>)
    494c:	4b44      	ldr	r3, [pc, #272]	; (4a60 <_ext_irq_init+0x158>)
    494e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4950:	2100      	movs	r1, #0
    4952:	483f      	ldr	r0, [pc, #252]	; (4a50 <_ext_irq_init+0x148>)
    4954:	4b44      	ldr	r3, [pc, #272]	; (4a68 <_ext_irq_init+0x160>)
    4956:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4958:	2100      	movs	r1, #0
    495a:	483d      	ldr	r0, [pc, #244]	; (4a50 <_ext_irq_init+0x148>)
    495c:	4b43      	ldr	r3, [pc, #268]	; (4a6c <_ext_irq_init+0x164>)
    495e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4960:	2100      	movs	r1, #0
    4962:	483b      	ldr	r0, [pc, #236]	; (4a50 <_ext_irq_init+0x148>)
    4964:	4b42      	ldr	r3, [pc, #264]	; (4a70 <_ext_irq_init+0x168>)
    4966:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4968:	f240 31bb 	movw	r1, #955	; 0x3bb
    496c:	4838      	ldr	r0, [pc, #224]	; (4a50 <_ext_irq_init+0x148>)
    496e:	4b41      	ldr	r3, [pc, #260]	; (4a74 <_ext_irq_init+0x16c>)
    4970:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4972:	f240 313b 	movw	r1, #827	; 0x33b
    4976:	4836      	ldr	r0, [pc, #216]	; (4a50 <_ext_irq_init+0x148>)
    4978:	4b3f      	ldr	r3, [pc, #252]	; (4a78 <_ext_irq_init+0x170>)
    497a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    497c:	2100      	movs	r1, #0
    497e:	4834      	ldr	r0, [pc, #208]	; (4a50 <_ext_irq_init+0x148>)
    4980:	4b3e      	ldr	r3, [pc, #248]	; (4a7c <_ext_irq_init+0x174>)
    4982:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4984:	4a3e      	ldr	r2, [pc, #248]	; (4a80 <_ext_irq_init+0x178>)
    4986:	2100      	movs	r1, #0
    4988:	4831      	ldr	r0, [pc, #196]	; (4a50 <_ext_irq_init+0x148>)
    498a:	4b3e      	ldr	r3, [pc, #248]	; (4a84 <_ext_irq_init+0x17c>)
    498c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    498e:	2211      	movs	r2, #17
    4990:	2101      	movs	r1, #1
    4992:	482f      	ldr	r0, [pc, #188]	; (4a50 <_ext_irq_init+0x148>)
    4994:	4b3b      	ldr	r3, [pc, #236]	; (4a84 <_ext_irq_init+0x17c>)
    4996:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4998:	482d      	ldr	r0, [pc, #180]	; (4a50 <_ext_irq_init+0x148>)
    499a:	4b3b      	ldr	r3, [pc, #236]	; (4a88 <_ext_irq_init+0x180>)
    499c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    499e:	200c      	movs	r0, #12
    49a0:	4b3a      	ldr	r3, [pc, #232]	; (4a8c <_ext_irq_init+0x184>)
    49a2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    49a4:	200c      	movs	r0, #12
    49a6:	4b3a      	ldr	r3, [pc, #232]	; (4a90 <_ext_irq_init+0x188>)
    49a8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    49aa:	200c      	movs	r0, #12
    49ac:	4b39      	ldr	r3, [pc, #228]	; (4a94 <_ext_irq_init+0x18c>)
    49ae:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    49b0:	200d      	movs	r0, #13
    49b2:	4b36      	ldr	r3, [pc, #216]	; (4a8c <_ext_irq_init+0x184>)
    49b4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    49b6:	200d      	movs	r0, #13
    49b8:	4b35      	ldr	r3, [pc, #212]	; (4a90 <_ext_irq_init+0x188>)
    49ba:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    49bc:	200d      	movs	r0, #13
    49be:	4b35      	ldr	r3, [pc, #212]	; (4a94 <_ext_irq_init+0x18c>)
    49c0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    49c2:	200f      	movs	r0, #15
    49c4:	4b31      	ldr	r3, [pc, #196]	; (4a8c <_ext_irq_init+0x184>)
    49c6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    49c8:	200f      	movs	r0, #15
    49ca:	4b31      	ldr	r3, [pc, #196]	; (4a90 <_ext_irq_init+0x188>)
    49cc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    49ce:	200f      	movs	r0, #15
    49d0:	4b30      	ldr	r3, [pc, #192]	; (4a94 <_ext_irq_init+0x18c>)
    49d2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    49d4:	2010      	movs	r0, #16
    49d6:	4b2d      	ldr	r3, [pc, #180]	; (4a8c <_ext_irq_init+0x184>)
    49d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    49da:	2010      	movs	r0, #16
    49dc:	4b2c      	ldr	r3, [pc, #176]	; (4a90 <_ext_irq_init+0x188>)
    49de:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    49e0:	2010      	movs	r0, #16
    49e2:	4b2c      	ldr	r3, [pc, #176]	; (4a94 <_ext_irq_init+0x18c>)
    49e4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    49e6:	2011      	movs	r0, #17
    49e8:	4b28      	ldr	r3, [pc, #160]	; (4a8c <_ext_irq_init+0x184>)
    49ea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    49ec:	2011      	movs	r0, #17
    49ee:	4b28      	ldr	r3, [pc, #160]	; (4a90 <_ext_irq_init+0x188>)
    49f0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    49f2:	2011      	movs	r0, #17
    49f4:	4b27      	ldr	r3, [pc, #156]	; (4a94 <_ext_irq_init+0x18c>)
    49f6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    49f8:	2012      	movs	r0, #18
    49fa:	4b24      	ldr	r3, [pc, #144]	; (4a8c <_ext_irq_init+0x184>)
    49fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    49fe:	2012      	movs	r0, #18
    4a00:	4b23      	ldr	r3, [pc, #140]	; (4a90 <_ext_irq_init+0x188>)
    4a02:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4a04:	2012      	movs	r0, #18
    4a06:	4b23      	ldr	r3, [pc, #140]	; (4a94 <_ext_irq_init+0x18c>)
    4a08:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4a0a:	2013      	movs	r0, #19
    4a0c:	4b1f      	ldr	r3, [pc, #124]	; (4a8c <_ext_irq_init+0x184>)
    4a0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4a10:	2013      	movs	r0, #19
    4a12:	4b1f      	ldr	r3, [pc, #124]	; (4a90 <_ext_irq_init+0x188>)
    4a14:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4a16:	2013      	movs	r0, #19
    4a18:	4b1e      	ldr	r3, [pc, #120]	; (4a94 <_ext_irq_init+0x18c>)
    4a1a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4a1c:	2014      	movs	r0, #20
    4a1e:	4b1b      	ldr	r3, [pc, #108]	; (4a8c <_ext_irq_init+0x184>)
    4a20:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4a22:	2014      	movs	r0, #20
    4a24:	4b1a      	ldr	r3, [pc, #104]	; (4a90 <_ext_irq_init+0x188>)
    4a26:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4a28:	2014      	movs	r0, #20
    4a2a:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <_ext_irq_init+0x18c>)
    4a2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4a2e:	2015      	movs	r0, #21
    4a30:	4b16      	ldr	r3, [pc, #88]	; (4a8c <_ext_irq_init+0x184>)
    4a32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4a34:	2015      	movs	r0, #21
    4a36:	4b16      	ldr	r3, [pc, #88]	; (4a90 <_ext_irq_init+0x188>)
    4a38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4a3a:	2015      	movs	r0, #21
    4a3c:	4b15      	ldr	r3, [pc, #84]	; (4a94 <_ext_irq_init+0x18c>)
    4a3e:	4798      	blx	r3

	callback = cb;
    4a40:	4a15      	ldr	r2, [pc, #84]	; (4a98 <_ext_irq_init+0x190>)
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4a46:	2300      	movs	r3, #0
}
    4a48:	4618      	mov	r0, r3
    4a4a:	3708      	adds	r7, #8
    4a4c:	46bd      	mov	sp, r7
    4a4e:	bd80      	pop	{r7, pc}
    4a50:	40002800 	.word	0x40002800
    4a54:	000046c9 	.word	0x000046c9
    4a58:	000047f9 	.word	0x000047f9
    4a5c:	00004789 	.word	0x00004789
    4a60:	000046a5 	.word	0x000046a5
    4a64:	00004829 	.word	0x00004829
    4a68:	000047b5 	.word	0x000047b5
    4a6c:	00004851 	.word	0x00004851
    4a70:	0000486f 	.word	0x0000486f
    4a74:	0000488b 	.word	0x0000488b
    4a78:	000048cf 	.word	0x000048cf
    4a7c:	000048eb 	.word	0x000048eb
    4a80:	90999013 	.word	0x90999013
    4a84:	000048a7 	.word	0x000048a7
    4a88:	0000475d 	.word	0x0000475d
    4a8c:	00004625 	.word	0x00004625
    4a90:	00004669 	.word	0x00004669
    4a94:	000045e9 	.word	0x000045e9
    4a98:	20000958 	.word	0x20000958

00004a9c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b084      	sub	sp, #16
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	6078      	str	r0, [r7, #4]
    4aa4:	460b      	mov	r3, r1
    4aa6:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4aa8:	23ff      	movs	r3, #255	; 0xff
    4aaa:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4aac:	2300      	movs	r3, #0
    4aae:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4ab0:	e010      	b.n	4ad4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4ab2:	7bbb      	ldrb	r3, [r7, #14]
    4ab4:	4a1c      	ldr	r2, [pc, #112]	; (4b28 <_ext_irq_enable+0x8c>)
    4ab6:	00db      	lsls	r3, r3, #3
    4ab8:	4413      	add	r3, r2
    4aba:	685a      	ldr	r2, [r3, #4]
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	429a      	cmp	r2, r3
    4ac0:	d105      	bne.n	4ace <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4ac2:	7bbb      	ldrb	r3, [r7, #14]
    4ac4:	4a18      	ldr	r2, [pc, #96]	; (4b28 <_ext_irq_enable+0x8c>)
    4ac6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4aca:	73fb      	strb	r3, [r7, #15]
			break;
    4acc:	e005      	b.n	4ada <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4ace:	7bbb      	ldrb	r3, [r7, #14]
    4ad0:	3301      	adds	r3, #1
    4ad2:	73bb      	strb	r3, [r7, #14]
    4ad4:	7bbb      	ldrb	r3, [r7, #14]
    4ad6:	2b08      	cmp	r3, #8
    4ad8:	d9eb      	bls.n	4ab2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4ada:	7bfb      	ldrb	r3, [r7, #15]
    4adc:	2bff      	cmp	r3, #255	; 0xff
    4ade:	d102      	bne.n	4ae6 <_ext_irq_enable+0x4a>
		return -1;
    4ae0:	f04f 33ff 	mov.w	r3, #4294967295
    4ae4:	e01c      	b.n	4b20 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4ae6:	78fb      	ldrb	r3, [r7, #3]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d008      	beq.n	4afe <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4aec:	7bfb      	ldrb	r3, [r7, #15]
    4aee:	2201      	movs	r2, #1
    4af0:	fa02 f303 	lsl.w	r3, r2, r3
    4af4:	4619      	mov	r1, r3
    4af6:	480d      	ldr	r0, [pc, #52]	; (4b2c <_ext_irq_enable+0x90>)
    4af8:	4b0d      	ldr	r3, [pc, #52]	; (4b30 <_ext_irq_enable+0x94>)
    4afa:	4798      	blx	r3
    4afc:	e00f      	b.n	4b1e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4afe:	7bfb      	ldrb	r3, [r7, #15]
    4b00:	2201      	movs	r2, #1
    4b02:	fa02 f303 	lsl.w	r3, r2, r3
    4b06:	4619      	mov	r1, r3
    4b08:	4808      	ldr	r0, [pc, #32]	; (4b2c <_ext_irq_enable+0x90>)
    4b0a:	4b0a      	ldr	r3, [pc, #40]	; (4b34 <_ext_irq_enable+0x98>)
    4b0c:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4b0e:	7bfb      	ldrb	r3, [r7, #15]
    4b10:	2201      	movs	r2, #1
    4b12:	fa02 f303 	lsl.w	r3, r2, r3
    4b16:	4619      	mov	r1, r3
    4b18:	4804      	ldr	r0, [pc, #16]	; (4b2c <_ext_irq_enable+0x90>)
    4b1a:	4b07      	ldr	r3, [pc, #28]	; (4b38 <_ext_irq_enable+0x9c>)
    4b1c:	4798      	blx	r3
	}

	return ERR_NONE;
    4b1e:	2300      	movs	r3, #0
}
    4b20:	4618      	mov	r0, r3
    4b22:	3710      	adds	r7, #16
    4b24:	46bd      	mov	sp, r7
    4b26:	bd80      	pop	{r7, pc}
    4b28:	0000f11c 	.word	0x0000f11c
    4b2c:	40002800 	.word	0x40002800
    4b30:	00004725 	.word	0x00004725
    4b34:	00004741 	.word	0x00004741
    4b38:	00004709 	.word	0x00004709

00004b3c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b084      	sub	sp, #16
    4b40:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4b42:	4841      	ldr	r0, [pc, #260]	; (4c48 <_ext_irq_handler+0x10c>)
    4b44:	4b41      	ldr	r3, [pc, #260]	; (4c4c <_ext_irq_handler+0x110>)
    4b46:	4798      	blx	r3
    4b48:	4603      	mov	r3, r0
    4b4a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4b4c:	f04f 33ff 	mov.w	r3, #4294967295
    4b50:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4b52:	683b      	ldr	r3, [r7, #0]
    4b54:	4619      	mov	r1, r3
    4b56:	483c      	ldr	r0, [pc, #240]	; (4c48 <_ext_irq_handler+0x10c>)
    4b58:	4b3d      	ldr	r3, [pc, #244]	; (4c50 <_ext_irq_handler+0x114>)
    4b5a:	4798      	blx	r3

	ASSERT(callback);
    4b5c:	4b3d      	ldr	r3, [pc, #244]	; (4c54 <_ext_irq_handler+0x118>)
    4b5e:	681b      	ldr	r3, [r3, #0]
    4b60:	2b00      	cmp	r3, #0
    4b62:	bf14      	ite	ne
    4b64:	2301      	movne	r3, #1
    4b66:	2300      	moveq	r3, #0
    4b68:	b2db      	uxtb	r3, r3
    4b6a:	f44f 7284 	mov.w	r2, #264	; 0x108
    4b6e:	493a      	ldr	r1, [pc, #232]	; (4c58 <_ext_irq_handler+0x11c>)
    4b70:	4618      	mov	r0, r3
    4b72:	4b3a      	ldr	r3, [pc, #232]	; (4c5c <_ext_irq_handler+0x120>)
    4b74:	4798      	blx	r3

	while (flags) {
    4b76:	e060      	b.n	4c3a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4b78:	683b      	ldr	r3, [r7, #0]
    4b7a:	4618      	mov	r0, r3
    4b7c:	4b38      	ldr	r3, [pc, #224]	; (4c60 <_ext_irq_handler+0x124>)
    4b7e:	4798      	blx	r3
    4b80:	4603      	mov	r3, r0
    4b82:	b2db      	uxtb	r3, r3
    4b84:	3b01      	subs	r3, #1
    4b86:	b2db      	uxtb	r3, r3
    4b88:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4b8a:	e047      	b.n	4c1c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4b8c:	2300      	movs	r3, #0
    4b8e:	71fb      	strb	r3, [r7, #7]
    4b90:	2309      	movs	r3, #9
    4b92:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4b94:	e024      	b.n	4be0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4b96:	79ba      	ldrb	r2, [r7, #6]
    4b98:	79fb      	ldrb	r3, [r7, #7]
    4b9a:	4413      	add	r3, r2
    4b9c:	105b      	asrs	r3, r3, #1
    4b9e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4ba0:	797b      	ldrb	r3, [r7, #5]
    4ba2:	4a30      	ldr	r2, [pc, #192]	; (4c64 <_ext_irq_handler+0x128>)
    4ba4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4ba8:	461a      	mov	r2, r3
    4baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bae:	429a      	cmp	r2, r3
    4bb0:	d106      	bne.n	4bc0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4bb2:	797b      	ldrb	r3, [r7, #5]
    4bb4:	4a2b      	ldr	r2, [pc, #172]	; (4c64 <_ext_irq_handler+0x128>)
    4bb6:	00db      	lsls	r3, r3, #3
    4bb8:	4413      	add	r3, r2
    4bba:	685b      	ldr	r3, [r3, #4]
    4bbc:	60bb      	str	r3, [r7, #8]
					break;
    4bbe:	e013      	b.n	4be8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4bc0:	797b      	ldrb	r3, [r7, #5]
    4bc2:	4a28      	ldr	r2, [pc, #160]	; (4c64 <_ext_irq_handler+0x128>)
    4bc4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4bc8:	461a      	mov	r2, r3
    4bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bce:	429a      	cmp	r2, r3
    4bd0:	da03      	bge.n	4bda <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4bd2:	797b      	ldrb	r3, [r7, #5]
    4bd4:	3301      	adds	r3, #1
    4bd6:	71fb      	strb	r3, [r7, #7]
    4bd8:	e002      	b.n	4be0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4bda:	797b      	ldrb	r3, [r7, #5]
    4bdc:	3b01      	subs	r3, #1
    4bde:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4be0:	79ba      	ldrb	r2, [r7, #6]
    4be2:	79fb      	ldrb	r3, [r7, #7]
    4be4:	429a      	cmp	r2, r3
    4be6:	d2d6      	bcs.n	4b96 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4be8:	68bb      	ldr	r3, [r7, #8]
    4bea:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bee:	d003      	beq.n	4bf8 <_ext_irq_handler+0xbc>
				callback(pin);
    4bf0:	4b18      	ldr	r3, [pc, #96]	; (4c54 <_ext_irq_handler+0x118>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	68b8      	ldr	r0, [r7, #8]
    4bf6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4bfc:	2201      	movs	r2, #1
    4bfe:	fa02 f303 	lsl.w	r3, r2, r3
    4c02:	43da      	mvns	r2, r3
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	4013      	ands	r3, r2
    4c08:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4c0a:	683b      	ldr	r3, [r7, #0]
    4c0c:	4618      	mov	r0, r3
    4c0e:	4b14      	ldr	r3, [pc, #80]	; (4c60 <_ext_irq_handler+0x124>)
    4c10:	4798      	blx	r3
    4c12:	4603      	mov	r3, r0
    4c14:	b2db      	uxtb	r3, r3
    4c16:	3b01      	subs	r3, #1
    4c18:	b2db      	uxtb	r3, r3
    4c1a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c20:	f1b3 3fff 	cmp.w	r3, #4294967295
    4c24:	d1b2      	bne.n	4b8c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4c26:	4808      	ldr	r0, [pc, #32]	; (4c48 <_ext_irq_handler+0x10c>)
    4c28:	4b08      	ldr	r3, [pc, #32]	; (4c4c <_ext_irq_handler+0x110>)
    4c2a:	4798      	blx	r3
    4c2c:	4603      	mov	r3, r0
    4c2e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4c30:	683b      	ldr	r3, [r7, #0]
    4c32:	4619      	mov	r1, r3
    4c34:	4804      	ldr	r0, [pc, #16]	; (4c48 <_ext_irq_handler+0x10c>)
    4c36:	4b06      	ldr	r3, [pc, #24]	; (4c50 <_ext_irq_handler+0x114>)
    4c38:	4798      	blx	r3
	while (flags) {
    4c3a:	683b      	ldr	r3, [r7, #0]
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d19b      	bne.n	4b78 <_ext_irq_handler+0x3c>
	}
}
    4c40:	bf00      	nop
    4c42:	3710      	adds	r7, #16
    4c44:	46bd      	mov	sp, r7
    4c46:	bd80      	pop	{r7, pc}
    4c48:	40002800 	.word	0x40002800
    4c4c:	000046f1 	.word	0x000046f1
    4c50:	00004709 	.word	0x00004709
    4c54:	20000958 	.word	0x20000958
    4c58:	0000f164 	.word	0x0000f164
    4c5c:	0000396d 	.word	0x0000396d
    4c60:	0000eb51 	.word	0x0000eb51
    4c64:	0000f11c 	.word	0x0000f11c

00004c68 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c6c:	4b01      	ldr	r3, [pc, #4]	; (4c74 <EIC_0_Handler+0xc>)
    4c6e:	4798      	blx	r3
} /**
    4c70:	bf00      	nop
    4c72:	bd80      	pop	{r7, pc}
    4c74:	00004b3d 	.word	0x00004b3d

00004c78 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c7c:	4b01      	ldr	r3, [pc, #4]	; (4c84 <EIC_1_Handler+0xc>)
    4c7e:	4798      	blx	r3
} /**
    4c80:	bf00      	nop
    4c82:	bd80      	pop	{r7, pc}
    4c84:	00004b3d 	.word	0x00004b3d

00004c88 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c8c:	4b01      	ldr	r3, [pc, #4]	; (4c94 <EIC_3_Handler+0xc>)
    4c8e:	4798      	blx	r3
} /**
    4c90:	bf00      	nop
    4c92:	bd80      	pop	{r7, pc}
    4c94:	00004b3d 	.word	0x00004b3d

00004c98 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4c98:	b580      	push	{r7, lr}
    4c9a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4c9c:	4b01      	ldr	r3, [pc, #4]	; (4ca4 <EIC_4_Handler+0xc>)
    4c9e:	4798      	blx	r3
} /**
    4ca0:	bf00      	nop
    4ca2:	bd80      	pop	{r7, pc}
    4ca4:	00004b3d 	.word	0x00004b3d

00004ca8 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cac:	4b01      	ldr	r3, [pc, #4]	; (4cb4 <EIC_5_Handler+0xc>)
    4cae:	4798      	blx	r3
} /**
    4cb0:	bf00      	nop
    4cb2:	bd80      	pop	{r7, pc}
    4cb4:	00004b3d 	.word	0x00004b3d

00004cb8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cbc:	4b01      	ldr	r3, [pc, #4]	; (4cc4 <EIC_6_Handler+0xc>)
    4cbe:	4798      	blx	r3
} /**
    4cc0:	bf00      	nop
    4cc2:	bd80      	pop	{r7, pc}
    4cc4:	00004b3d 	.word	0x00004b3d

00004cc8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ccc:	4b01      	ldr	r3, [pc, #4]	; (4cd4 <EIC_7_Handler+0xc>)
    4cce:	4798      	blx	r3
} /**
    4cd0:	bf00      	nop
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	00004b3d 	.word	0x00004b3d

00004cd8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4cd8:	b580      	push	{r7, lr}
    4cda:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cdc:	4b01      	ldr	r3, [pc, #4]	; (4ce4 <EIC_8_Handler+0xc>)
    4cde:	4798      	blx	r3
} /**
    4ce0:	bf00      	nop
    4ce2:	bd80      	pop	{r7, pc}
    4ce4:	00004b3d 	.word	0x00004b3d

00004ce8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4cec:	4b01      	ldr	r3, [pc, #4]	; (4cf4 <EIC_9_Handler+0xc>)
    4cee:	4798      	blx	r3
}
    4cf0:	bf00      	nop
    4cf2:	bd80      	pop	{r7, pc}
    4cf4:	00004b3d 	.word	0x00004b3d

00004cf8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4cf8:	b480      	push	{r7}
    4cfa:	b085      	sub	sp, #20
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	60f8      	str	r0, [r7, #12]
    4d00:	460b      	mov	r3, r1
    4d02:	607a      	str	r2, [r7, #4]
    4d04:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4d06:	7afa      	ldrb	r2, [r7, #11]
    4d08:	68fb      	ldr	r3, [r7, #12]
    4d0a:	3248      	adds	r2, #72	; 0x48
    4d0c:	6879      	ldr	r1, [r7, #4]
    4d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4d12:	bf00      	nop
    4d14:	3714      	adds	r7, #20
    4d16:	46bd      	mov	sp, r7
    4d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d1c:	4770      	bx	lr

00004d1e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4d1e:	b480      	push	{r7}
    4d20:	b083      	sub	sp, #12
    4d22:	af00      	add	r7, sp, #0
    4d24:	6078      	str	r0, [r7, #4]
    4d26:	460b      	mov	r3, r1
    4d28:	70fb      	strb	r3, [r7, #3]
    4d2a:	4613      	mov	r3, r2
    4d2c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4d2e:	78fb      	ldrb	r3, [r7, #3]
    4d30:	687a      	ldr	r2, [r7, #4]
    4d32:	3304      	adds	r3, #4
    4d34:	00db      	lsls	r3, r3, #3
    4d36:	4413      	add	r3, r2
    4d38:	78ba      	ldrb	r2, [r7, #2]
    4d3a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4d3c:	78fb      	ldrb	r3, [r7, #3]
    4d3e:	78ba      	ldrb	r2, [r7, #2]
    4d40:	43d2      	mvns	r2, r2
    4d42:	b2d1      	uxtb	r1, r2
    4d44:	687a      	ldr	r2, [r7, #4]
    4d46:	3304      	adds	r3, #4
    4d48:	00db      	lsls	r3, r3, #3
    4d4a:	4413      	add	r3, r2
    4d4c:	460a      	mov	r2, r1
    4d4e:	711a      	strb	r2, [r3, #4]
}
    4d50:	bf00      	nop
    4d52:	370c      	adds	r7, #12
    4d54:	46bd      	mov	sp, r7
    4d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5a:	4770      	bx	lr

00004d5c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4d5c:	b480      	push	{r7}
    4d5e:	b085      	sub	sp, #20
    4d60:	af00      	add	r7, sp, #0
    4d62:	60f8      	str	r0, [r7, #12]
    4d64:	460b      	mov	r3, r1
    4d66:	607a      	str	r2, [r7, #4]
    4d68:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4d6a:	7afa      	ldrb	r2, [r7, #11]
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	3204      	adds	r2, #4
    4d70:	6879      	ldr	r1, [r7, #4]
    4d72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4d76:	bf00      	nop
    4d78:	3714      	adds	r7, #20
    4d7a:	46bd      	mov	sp, r7
    4d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d80:	4770      	bx	lr
	...

00004d84 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4d84:	b580      	push	{r7, lr}
    4d86:	b082      	sub	sp, #8
    4d88:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4d8a:	2300      	movs	r3, #0
    4d8c:	71fb      	strb	r3, [r7, #7]
    4d8e:	e00b      	b.n	4da8 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4d90:	79fb      	ldrb	r3, [r7, #7]
    4d92:	4a18      	ldr	r2, [pc, #96]	; (4df4 <_event_system_init+0x70>)
    4d94:	5cd3      	ldrb	r3, [r2, r3]
    4d96:	461a      	mov	r2, r3
    4d98:	79fb      	ldrb	r3, [r7, #7]
    4d9a:	4619      	mov	r1, r3
    4d9c:	4816      	ldr	r0, [pc, #88]	; (4df8 <_event_system_init+0x74>)
    4d9e:	4b17      	ldr	r3, [pc, #92]	; (4dfc <_event_system_init+0x78>)
    4da0:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4da2:	79fb      	ldrb	r3, [r7, #7]
    4da4:	3301      	adds	r3, #1
    4da6:	71fb      	strb	r3, [r7, #7]
    4da8:	79fb      	ldrb	r3, [r7, #7]
    4daa:	2b42      	cmp	r3, #66	; 0x42
    4dac:	d9f0      	bls.n	4d90 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4dae:	2300      	movs	r3, #0
    4db0:	71fb      	strb	r3, [r7, #7]
    4db2:	e016      	b.n	4de2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4db4:	79fb      	ldrb	r3, [r7, #7]
    4db6:	4a12      	ldr	r2, [pc, #72]	; (4e00 <_event_system_init+0x7c>)
    4db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4dbc:	461a      	mov	r2, r3
    4dbe:	79fb      	ldrb	r3, [r7, #7]
    4dc0:	4619      	mov	r1, r3
    4dc2:	480d      	ldr	r0, [pc, #52]	; (4df8 <_event_system_init+0x74>)
    4dc4:	4b0f      	ldr	r3, [pc, #60]	; (4e04 <_event_system_init+0x80>)
    4dc6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4dc8:	79fb      	ldrb	r3, [r7, #7]
    4dca:	4a0f      	ldr	r2, [pc, #60]	; (4e08 <_event_system_init+0x84>)
    4dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4dd0:	b2da      	uxtb	r2, r3
    4dd2:	79fb      	ldrb	r3, [r7, #7]
    4dd4:	4619      	mov	r1, r3
    4dd6:	4808      	ldr	r0, [pc, #32]	; (4df8 <_event_system_init+0x74>)
    4dd8:	4b0c      	ldr	r3, [pc, #48]	; (4e0c <_event_system_init+0x88>)
    4dda:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4ddc:	79fb      	ldrb	r3, [r7, #7]
    4dde:	3301      	adds	r3, #1
    4de0:	71fb      	strb	r3, [r7, #7]
    4de2:	79fb      	ldrb	r3, [r7, #7]
    4de4:	2b1f      	cmp	r3, #31
    4de6:	d9e5      	bls.n	4db4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4de8:	2300      	movs	r3, #0
}
    4dea:	4618      	mov	r0, r3
    4dec:	3708      	adds	r7, #8
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}
    4df2:	bf00      	nop
    4df4:	0000f17c 	.word	0x0000f17c
    4df8:	4100e000 	.word	0x4100e000
    4dfc:	00004cf9 	.word	0x00004cf9
    4e00:	0000f1c0 	.word	0x0000f1c0
    4e04:	00004d5d 	.word	0x00004d5d
    4e08:	0000f200 	.word	0x0000f200
    4e0c:	00004d1f 	.word	0x00004d1f

00004e10 <hri_gclk_wait_for_sync>:
{
    4e10:	b480      	push	{r7}
    4e12:	b083      	sub	sp, #12
    4e14:	af00      	add	r7, sp, #0
    4e16:	6078      	str	r0, [r7, #4]
    4e18:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4e1a:	bf00      	nop
    4e1c:	687b      	ldr	r3, [r7, #4]
    4e1e:	685a      	ldr	r2, [r3, #4]
    4e20:	683b      	ldr	r3, [r7, #0]
    4e22:	4013      	ands	r3, r2
    4e24:	2b00      	cmp	r3, #0
    4e26:	d1f9      	bne.n	4e1c <hri_gclk_wait_for_sync+0xc>
}
    4e28:	bf00      	nop
    4e2a:	370c      	adds	r7, #12
    4e2c:	46bd      	mov	sp, r7
    4e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e32:	4770      	bx	lr

00004e34 <hri_gclk_write_GENCTRL_reg>:
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b084      	sub	sp, #16
    4e38:	af00      	add	r7, sp, #0
    4e3a:	60f8      	str	r0, [r7, #12]
    4e3c:	460b      	mov	r3, r1
    4e3e:	607a      	str	r2, [r7, #4]
    4e40:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    4e42:	7afa      	ldrb	r2, [r7, #11]
    4e44:	68fb      	ldr	r3, [r7, #12]
    4e46:	3208      	adds	r2, #8
    4e48:	6879      	ldr	r1, [r7, #4]
    4e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4e4e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4e52:	68f8      	ldr	r0, [r7, #12]
    4e54:	4b02      	ldr	r3, [pc, #8]	; (4e60 <hri_gclk_write_GENCTRL_reg+0x2c>)
    4e56:	4798      	blx	r3
}
    4e58:	bf00      	nop
    4e5a:	3710      	adds	r7, #16
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	00004e11 	.word	0x00004e11

00004e64 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4e64:	b580      	push	{r7, lr}
    4e66:	b082      	sub	sp, #8
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	f003 0301 	and.w	r3, r3, #1
    4e72:	2b00      	cmp	r3, #0
    4e74:	d004      	beq.n	4e80 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4e76:	4a3b      	ldr	r2, [pc, #236]	; (4f64 <_gclk_init_generators_by_fref+0x100>)
    4e78:	2100      	movs	r1, #0
    4e7a:	483b      	ldr	r0, [pc, #236]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4e7c:	4b3b      	ldr	r3, [pc, #236]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4e7e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	f003 0302 	and.w	r3, r3, #2
    4e86:	2b00      	cmp	r3, #0
    4e88:	d004      	beq.n	4e94 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4e8a:	4a39      	ldr	r2, [pc, #228]	; (4f70 <_gclk_init_generators_by_fref+0x10c>)
    4e8c:	2101      	movs	r1, #1
    4e8e:	4836      	ldr	r0, [pc, #216]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4e90:	4b36      	ldr	r3, [pc, #216]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4e92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	f003 0304 	and.w	r3, r3, #4
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d004      	beq.n	4ea8 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4e9e:	4a35      	ldr	r2, [pc, #212]	; (4f74 <_gclk_init_generators_by_fref+0x110>)
    4ea0:	2102      	movs	r1, #2
    4ea2:	4831      	ldr	r0, [pc, #196]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4ea4:	4b31      	ldr	r3, [pc, #196]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4ea6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	f003 0308 	and.w	r3, r3, #8
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d004      	beq.n	4ebc <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4eb2:	4a31      	ldr	r2, [pc, #196]	; (4f78 <_gclk_init_generators_by_fref+0x114>)
    4eb4:	2103      	movs	r1, #3
    4eb6:	482c      	ldr	r0, [pc, #176]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4eb8:	4b2c      	ldr	r3, [pc, #176]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4eba:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	f003 0310 	and.w	r3, r3, #16
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d004      	beq.n	4ed0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4ec6:	4a2d      	ldr	r2, [pc, #180]	; (4f7c <_gclk_init_generators_by_fref+0x118>)
    4ec8:	2104      	movs	r1, #4
    4eca:	4827      	ldr	r0, [pc, #156]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4ecc:	4b27      	ldr	r3, [pc, #156]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4ece:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	f003 0320 	and.w	r3, r3, #32
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d004      	beq.n	4ee4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4eda:	4a29      	ldr	r2, [pc, #164]	; (4f80 <_gclk_init_generators_by_fref+0x11c>)
    4edc:	2105      	movs	r1, #5
    4ede:	4822      	ldr	r0, [pc, #136]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4ee0:	4b22      	ldr	r3, [pc, #136]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4ee2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4eea:	2b00      	cmp	r3, #0
    4eec:	d004      	beq.n	4ef8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4eee:	4a25      	ldr	r2, [pc, #148]	; (4f84 <_gclk_init_generators_by_fref+0x120>)
    4ef0:	2106      	movs	r1, #6
    4ef2:	481d      	ldr	r0, [pc, #116]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4ef4:	4b1d      	ldr	r3, [pc, #116]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4ef6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4efe:	2b00      	cmp	r3, #0
    4f00:	d004      	beq.n	4f0c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4f02:	4a21      	ldr	r2, [pc, #132]	; (4f88 <_gclk_init_generators_by_fref+0x124>)
    4f04:	2107      	movs	r1, #7
    4f06:	4818      	ldr	r0, [pc, #96]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4f08:	4b18      	ldr	r3, [pc, #96]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4f0a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4f12:	2b00      	cmp	r3, #0
    4f14:	d004      	beq.n	4f20 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4f16:	4a1d      	ldr	r2, [pc, #116]	; (4f8c <_gclk_init_generators_by_fref+0x128>)
    4f18:	2108      	movs	r1, #8
    4f1a:	4813      	ldr	r0, [pc, #76]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4f1c:	4b13      	ldr	r3, [pc, #76]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4f1e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4f26:	2b00      	cmp	r3, #0
    4f28:	d004      	beq.n	4f34 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    4f2a:	4a19      	ldr	r2, [pc, #100]	; (4f90 <_gclk_init_generators_by_fref+0x12c>)
    4f2c:	2109      	movs	r1, #9
    4f2e:	480e      	ldr	r0, [pc, #56]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4f30:	4b0e      	ldr	r3, [pc, #56]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4f32:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d004      	beq.n	4f48 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    4f3e:	4a15      	ldr	r2, [pc, #84]	; (4f94 <_gclk_init_generators_by_fref+0x130>)
    4f40:	210a      	movs	r1, #10
    4f42:	4809      	ldr	r0, [pc, #36]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4f44:	4b09      	ldr	r3, [pc, #36]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4f46:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d004      	beq.n	4f5c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    4f52:	4a11      	ldr	r2, [pc, #68]	; (4f98 <_gclk_init_generators_by_fref+0x134>)
    4f54:	210b      	movs	r1, #11
    4f56:	4804      	ldr	r0, [pc, #16]	; (4f68 <_gclk_init_generators_by_fref+0x104>)
    4f58:	4b04      	ldr	r3, [pc, #16]	; (4f6c <_gclk_init_generators_by_fref+0x108>)
    4f5a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4f5c:	bf00      	nop
    4f5e:	3708      	adds	r7, #8
    4f60:	46bd      	mov	sp, r7
    4f62:	bd80      	pop	{r7, pc}
    4f64:	00010107 	.word	0x00010107
    4f68:	40001c00 	.word	0x40001c00
    4f6c:	00004e35 	.word	0x00004e35
    4f70:	00010907 	.word	0x00010907
    4f74:	00010906 	.word	0x00010906
    4f78:	00020908 	.word	0x00020908
    4f7c:	00010901 	.word	0x00010901
    4f80:	00062901 	.word	0x00062901
    4f84:	000c2901 	.word	0x000c2901
    4f88:	00082908 	.word	0x00082908
    4f8c:	00032901 	.word	0x00032901
    4f90:	00011908 	.word	0x00011908
    4f94:	00010905 	.word	0x00010905
    4f98:	00041905 	.word	0x00041905

00004f9c <hri_mclk_write_CPUDIV_reg>:
{
    4f9c:	b480      	push	{r7}
    4f9e:	b083      	sub	sp, #12
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
    4fa4:	460b      	mov	r3, r1
    4fa6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	78fa      	ldrb	r2, [r7, #3]
    4fac:	715a      	strb	r2, [r3, #5]
}
    4fae:	bf00      	nop
    4fb0:	370c      	adds	r7, #12
    4fb2:	46bd      	mov	sp, r7
    4fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb8:	4770      	bx	lr
	...

00004fbc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4fbc:	b580      	push	{r7, lr}
    4fbe:	b082      	sub	sp, #8
    4fc0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4fc2:	4b05      	ldr	r3, [pc, #20]	; (4fd8 <_mclk_init+0x1c>)
    4fc4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4fc6:	2101      	movs	r1, #1
    4fc8:	6878      	ldr	r0, [r7, #4]
    4fca:	4b04      	ldr	r3, [pc, #16]	; (4fdc <_mclk_init+0x20>)
    4fcc:	4798      	blx	r3
}
    4fce:	bf00      	nop
    4fd0:	3708      	adds	r7, #8
    4fd2:	46bd      	mov	sp, r7
    4fd4:	bd80      	pop	{r7, pc}
    4fd6:	bf00      	nop
    4fd8:	40000800 	.word	0x40000800
    4fdc:	00004f9d 	.word	0x00004f9d

00004fe0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4fe0:	b480      	push	{r7}
    4fe2:	b083      	sub	sp, #12
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
    4fe8:	460b      	mov	r3, r1
    4fea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	78fa      	ldrb	r2, [r7, #3]
    4ff0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4ff2:	bf00      	nop
    4ff4:	370c      	adds	r7, #12
    4ff6:	46bd      	mov	sp, r7
    4ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffc:	4770      	bx	lr

00004ffe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4ffe:	b480      	push	{r7}
    5000:	b083      	sub	sp, #12
    5002:	af00      	add	r7, sp, #0
    5004:	6078      	str	r0, [r7, #4]
    5006:	460b      	mov	r3, r1
    5008:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	887a      	ldrh	r2, [r7, #2]
    500e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5010:	bf00      	nop
    5012:	370c      	adds	r7, #12
    5014:	46bd      	mov	sp, r7
    5016:	f85d 7b04 	ldr.w	r7, [sp], #4
    501a:	4770      	bx	lr

0000501c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    501c:	b480      	push	{r7}
    501e:	b083      	sub	sp, #12
    5020:	af00      	add	r7, sp, #0
    5022:	6078      	str	r0, [r7, #4]
    5024:	460b      	mov	r3, r1
    5026:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	78fa      	ldrb	r2, [r7, #3]
    502c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    502e:	bf00      	nop
    5030:	370c      	adds	r7, #12
    5032:	46bd      	mov	sp, r7
    5034:	f85d 7b04 	ldr.w	r7, [sp], #4
    5038:	4770      	bx	lr

0000503a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    503a:	b480      	push	{r7}
    503c:	b083      	sub	sp, #12
    503e:	af00      	add	r7, sp, #0
    5040:	6078      	str	r0, [r7, #4]
    5042:	460b      	mov	r3, r1
    5044:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	78fa      	ldrb	r2, [r7, #3]
    504a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    504c:	bf00      	nop
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5058:	b480      	push	{r7}
    505a:	b085      	sub	sp, #20
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	69db      	ldr	r3, [r3, #28]
    5064:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5066:	68fb      	ldr	r3, [r7, #12]
    5068:	0a1b      	lsrs	r3, r3, #8
    506a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    506e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5070:	68fb      	ldr	r3, [r7, #12]
}
    5072:	4618      	mov	r0, r3
    5074:	3714      	adds	r7, #20
    5076:	46bd      	mov	sp, r7
    5078:	f85d 7b04 	ldr.w	r7, [sp], #4
    507c:	4770      	bx	lr

0000507e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    507e:	b480      	push	{r7}
    5080:	b083      	sub	sp, #12
    5082:	af00      	add	r7, sp, #0
    5084:	6078      	str	r0, [r7, #4]
    5086:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5088:	687b      	ldr	r3, [r7, #4]
    508a:	683a      	ldr	r2, [r7, #0]
    508c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    508e:	bf00      	nop
    5090:	370c      	adds	r7, #12
    5092:	46bd      	mov	sp, r7
    5094:	f85d 7b04 	ldr.w	r7, [sp], #4
    5098:	4770      	bx	lr
	...

0000509c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    509c:	b580      	push	{r7, lr}
    509e:	b082      	sub	sp, #8
    50a0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    50a2:	4b13      	ldr	r3, [pc, #76]	; (50f0 <_osc32kctrl_init_sources+0x54>)
    50a4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    50a6:	2300      	movs	r3, #0
    50a8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    50aa:	f242 018e 	movw	r1, #8334	; 0x208e
    50ae:	6878      	ldr	r0, [r7, #4]
    50b0:	4b10      	ldr	r3, [pc, #64]	; (50f4 <_osc32kctrl_init_sources+0x58>)
    50b2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    50b4:	2100      	movs	r1, #0
    50b6:	6878      	ldr	r0, [r7, #4]
    50b8:	4b0f      	ldr	r3, [pc, #60]	; (50f8 <_osc32kctrl_init_sources+0x5c>)
    50ba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    50bc:	2100      	movs	r1, #0
    50be:	6878      	ldr	r0, [r7, #4]
    50c0:	4b0e      	ldr	r3, [pc, #56]	; (50fc <_osc32kctrl_init_sources+0x60>)
    50c2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    50c4:	6878      	ldr	r0, [r7, #4]
    50c6:	4b0e      	ldr	r3, [pc, #56]	; (5100 <_osc32kctrl_init_sources+0x64>)
    50c8:	4798      	blx	r3
    50ca:	4603      	mov	r3, r0
    50cc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    50ce:	887b      	ldrh	r3, [r7, #2]
    50d0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    50d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    50d6:	4619      	mov	r1, r3
    50d8:	6878      	ldr	r0, [r7, #4]
    50da:	4b0a      	ldr	r3, [pc, #40]	; (5104 <_osc32kctrl_init_sources+0x68>)
    50dc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    50de:	2100      	movs	r1, #0
    50e0:	6878      	ldr	r0, [r7, #4]
    50e2:	4b09      	ldr	r3, [pc, #36]	; (5108 <_osc32kctrl_init_sources+0x6c>)
    50e4:	4798      	blx	r3
	(void)calib;
}
    50e6:	bf00      	nop
    50e8:	3708      	adds	r7, #8
    50ea:	46bd      	mov	sp, r7
    50ec:	bd80      	pop	{r7, pc}
    50ee:	bf00      	nop
    50f0:	40001400 	.word	0x40001400
    50f4:	00004fff 	.word	0x00004fff
    50f8:	0000501d 	.word	0x0000501d
    50fc:	0000503b 	.word	0x0000503b
    5100:	00005059 	.word	0x00005059
    5104:	0000507f 	.word	0x0000507f
    5108:	00004fe1 	.word	0x00004fe1

0000510c <hri_gclk_wait_for_sync>:
{
    510c:	b480      	push	{r7}
    510e:	b083      	sub	sp, #12
    5110:	af00      	add	r7, sp, #0
    5112:	6078      	str	r0, [r7, #4]
    5114:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5116:	bf00      	nop
    5118:	687b      	ldr	r3, [r7, #4]
    511a:	685a      	ldr	r2, [r3, #4]
    511c:	683b      	ldr	r3, [r7, #0]
    511e:	4013      	ands	r3, r2
    5120:	2b00      	cmp	r3, #0
    5122:	d1f9      	bne.n	5118 <hri_gclk_wait_for_sync+0xc>
}
    5124:	bf00      	nop
    5126:	370c      	adds	r7, #12
    5128:	46bd      	mov	sp, r7
    512a:	f85d 7b04 	ldr.w	r7, [sp], #4
    512e:	4770      	bx	lr

00005130 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5130:	b480      	push	{r7}
    5132:	b083      	sub	sp, #12
    5134:	af00      	add	r7, sp, #0
    5136:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	685b      	ldr	r3, [r3, #4]
    513c:	089b      	lsrs	r3, r3, #2
    513e:	f003 0301 	and.w	r3, r3, #1
    5142:	2b00      	cmp	r3, #0
    5144:	bf14      	ite	ne
    5146:	2301      	movne	r3, #1
    5148:	2300      	moveq	r3, #0
    514a:	b2db      	uxtb	r3, r3
}
    514c:	4618      	mov	r0, r3
    514e:	370c      	adds	r7, #12
    5150:	46bd      	mov	sp, r7
    5152:	f85d 7b04 	ldr.w	r7, [sp], #4
    5156:	4770      	bx	lr

00005158 <hri_gclk_read_SYNCBUSY_reg>:
{
    5158:	b480      	push	{r7}
    515a:	b083      	sub	sp, #12
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	685b      	ldr	r3, [r3, #4]
}
    5164:	4618      	mov	r0, r3
    5166:	370c      	adds	r7, #12
    5168:	46bd      	mov	sp, r7
    516a:	f85d 7b04 	ldr.w	r7, [sp], #4
    516e:	4770      	bx	lr

00005170 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5170:	b580      	push	{r7, lr}
    5172:	b086      	sub	sp, #24
    5174:	af00      	add	r7, sp, #0
    5176:	60f8      	str	r0, [r7, #12]
    5178:	460b      	mov	r3, r1
    517a:	607a      	str	r2, [r7, #4]
    517c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    517e:	7afa      	ldrb	r2, [r7, #11]
    5180:	68fb      	ldr	r3, [r7, #12]
    5182:	3208      	adds	r2, #8
    5184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5188:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    518a:	697b      	ldr	r3, [r7, #20]
    518c:	f023 030f 	bic.w	r3, r3, #15
    5190:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	f003 030f 	and.w	r3, r3, #15
    5198:	697a      	ldr	r2, [r7, #20]
    519a:	4313      	orrs	r3, r2
    519c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    519e:	7afa      	ldrb	r2, [r7, #11]
    51a0:	68fb      	ldr	r3, [r7, #12]
    51a2:	3208      	adds	r2, #8
    51a4:	6979      	ldr	r1, [r7, #20]
    51a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    51aa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    51ae:	68f8      	ldr	r0, [r7, #12]
    51b0:	4b02      	ldr	r3, [pc, #8]	; (51bc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    51b2:	4798      	blx	r3
}
    51b4:	bf00      	nop
    51b6:	3718      	adds	r7, #24
    51b8:	46bd      	mov	sp, r7
    51ba:	bd80      	pop	{r7, pc}
    51bc:	0000510d 	.word	0x0000510d

000051c0 <hri_gclk_write_PCHCTRL_reg>:
{
    51c0:	b480      	push	{r7}
    51c2:	b085      	sub	sp, #20
    51c4:	af00      	add	r7, sp, #0
    51c6:	60f8      	str	r0, [r7, #12]
    51c8:	460b      	mov	r3, r1
    51ca:	607a      	str	r2, [r7, #4]
    51cc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    51ce:	7afa      	ldrb	r2, [r7, #11]
    51d0:	68fb      	ldr	r3, [r7, #12]
    51d2:	3220      	adds	r2, #32
    51d4:	6879      	ldr	r1, [r7, #4]
    51d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51da:	bf00      	nop
    51dc:	3714      	adds	r7, #20
    51de:	46bd      	mov	sp, r7
    51e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e4:	4770      	bx	lr

000051e6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    51e6:	b480      	push	{r7}
    51e8:	b085      	sub	sp, #20
    51ea:	af00      	add	r7, sp, #0
    51ec:	60f8      	str	r0, [r7, #12]
    51ee:	460b      	mov	r3, r1
    51f0:	607a      	str	r2, [r7, #4]
    51f2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    51f4:	bf00      	nop
    51f6:	7afa      	ldrb	r2, [r7, #11]
    51f8:	68f9      	ldr	r1, [r7, #12]
    51fa:	4613      	mov	r3, r2
    51fc:	009b      	lsls	r3, r3, #2
    51fe:	4413      	add	r3, r2
    5200:	009b      	lsls	r3, r3, #2
    5202:	440b      	add	r3, r1
    5204:	333c      	adds	r3, #60	; 0x3c
    5206:	681a      	ldr	r2, [r3, #0]
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	4013      	ands	r3, r2
    520c:	2b00      	cmp	r3, #0
    520e:	d1f2      	bne.n	51f6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5210:	bf00      	nop
    5212:	3714      	adds	r7, #20
    5214:	46bd      	mov	sp, r7
    5216:	f85d 7b04 	ldr.w	r7, [sp], #4
    521a:	4770      	bx	lr

0000521c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    521c:	b480      	push	{r7}
    521e:	b083      	sub	sp, #12
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    5224:	460b      	mov	r3, r1
    5226:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5228:	78fa      	ldrb	r2, [r7, #3]
    522a:	6879      	ldr	r1, [r7, #4]
    522c:	4613      	mov	r3, r2
    522e:	009b      	lsls	r3, r3, #2
    5230:	4413      	add	r3, r2
    5232:	009b      	lsls	r3, r3, #2
    5234:	440b      	add	r3, r1
    5236:	3340      	adds	r3, #64	; 0x40
    5238:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    523a:	f003 0301 	and.w	r3, r3, #1
    523e:	2b00      	cmp	r3, #0
    5240:	bf14      	ite	ne
    5242:	2301      	movne	r3, #1
    5244:	2300      	moveq	r3, #0
    5246:	b2db      	uxtb	r3, r3
}
    5248:	4618      	mov	r0, r3
    524a:	370c      	adds	r7, #12
    524c:	46bd      	mov	sp, r7
    524e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5252:	4770      	bx	lr

00005254 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5254:	b480      	push	{r7}
    5256:	b083      	sub	sp, #12
    5258:	af00      	add	r7, sp, #0
    525a:	6078      	str	r0, [r7, #4]
    525c:	460b      	mov	r3, r1
    525e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5260:	78fa      	ldrb	r2, [r7, #3]
    5262:	6879      	ldr	r1, [r7, #4]
    5264:	4613      	mov	r3, r2
    5266:	009b      	lsls	r3, r3, #2
    5268:	4413      	add	r3, r2
    526a:	009b      	lsls	r3, r3, #2
    526c:	440b      	add	r3, r1
    526e:	3340      	adds	r3, #64	; 0x40
    5270:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5272:	085b      	lsrs	r3, r3, #1
    5274:	f003 0301 	and.w	r3, r3, #1
    5278:	2b00      	cmp	r3, #0
    527a:	bf14      	ite	ne
    527c:	2301      	movne	r3, #1
    527e:	2300      	moveq	r3, #0
    5280:	b2db      	uxtb	r3, r3
}
    5282:	4618      	mov	r0, r3
    5284:	370c      	adds	r7, #12
    5286:	46bd      	mov	sp, r7
    5288:	f85d 7b04 	ldr.w	r7, [sp], #4
    528c:	4770      	bx	lr
	...

00005290 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5290:	b580      	push	{r7, lr}
    5292:	b082      	sub	sp, #8
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
    5298:	460b      	mov	r3, r1
    529a:	70fb      	strb	r3, [r7, #3]
    529c:	4613      	mov	r3, r2
    529e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    52a0:	78fa      	ldrb	r2, [r7, #3]
    52a2:	6879      	ldr	r1, [r7, #4]
    52a4:	4613      	mov	r3, r2
    52a6:	009b      	lsls	r3, r3, #2
    52a8:	4413      	add	r3, r2
    52aa:	009b      	lsls	r3, r3, #2
    52ac:	440b      	add	r3, r1
    52ae:	3330      	adds	r3, #48	; 0x30
    52b0:	78ba      	ldrb	r2, [r7, #2]
    52b2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    52b4:	78fb      	ldrb	r3, [r7, #3]
    52b6:	2202      	movs	r2, #2
    52b8:	4619      	mov	r1, r3
    52ba:	6878      	ldr	r0, [r7, #4]
    52bc:	4b02      	ldr	r3, [pc, #8]	; (52c8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    52be:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52c0:	bf00      	nop
    52c2:	3708      	adds	r7, #8
    52c4:	46bd      	mov	sp, r7
    52c6:	bd80      	pop	{r7, pc}
    52c8:	000051e7 	.word	0x000051e7

000052cc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    52cc:	b580      	push	{r7, lr}
    52ce:	b084      	sub	sp, #16
    52d0:	af00      	add	r7, sp, #0
    52d2:	60f8      	str	r0, [r7, #12]
    52d4:	460b      	mov	r3, r1
    52d6:	607a      	str	r2, [r7, #4]
    52d8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    52da:	7afa      	ldrb	r2, [r7, #11]
    52dc:	68f9      	ldr	r1, [r7, #12]
    52de:	4613      	mov	r3, r2
    52e0:	009b      	lsls	r3, r3, #2
    52e2:	4413      	add	r3, r2
    52e4:	009b      	lsls	r3, r3, #2
    52e6:	440b      	add	r3, r1
    52e8:	3334      	adds	r3, #52	; 0x34
    52ea:	687a      	ldr	r2, [r7, #4]
    52ec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    52ee:	7afb      	ldrb	r3, [r7, #11]
    52f0:	2206      	movs	r2, #6
    52f2:	4619      	mov	r1, r3
    52f4:	68f8      	ldr	r0, [r7, #12]
    52f6:	4b03      	ldr	r3, [pc, #12]	; (5304 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    52f8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    52fa:	bf00      	nop
    52fc:	3710      	adds	r7, #16
    52fe:	46bd      	mov	sp, r7
    5300:	bd80      	pop	{r7, pc}
    5302:	bf00      	nop
    5304:	000051e7 	.word	0x000051e7

00005308 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5308:	b480      	push	{r7}
    530a:	b085      	sub	sp, #20
    530c:	af00      	add	r7, sp, #0
    530e:	60f8      	str	r0, [r7, #12]
    5310:	460b      	mov	r3, r1
    5312:	607a      	str	r2, [r7, #4]
    5314:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5316:	7afa      	ldrb	r2, [r7, #11]
    5318:	68f9      	ldr	r1, [r7, #12]
    531a:	4613      	mov	r3, r2
    531c:	009b      	lsls	r3, r3, #2
    531e:	4413      	add	r3, r2
    5320:	009b      	lsls	r3, r3, #2
    5322:	440b      	add	r3, r1
    5324:	3338      	adds	r3, #56	; 0x38
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    532a:	bf00      	nop
    532c:	3714      	adds	r7, #20
    532e:	46bd      	mov	sp, r7
    5330:	f85d 7b04 	ldr.w	r7, [sp], #4
    5334:	4770      	bx	lr

00005336 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5336:	b480      	push	{r7}
    5338:	b083      	sub	sp, #12
    533a:	af00      	add	r7, sp, #0
    533c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	691b      	ldr	r3, [r3, #16]
    5342:	085b      	lsrs	r3, r3, #1
    5344:	f003 0301 	and.w	r3, r3, #1
    5348:	2b00      	cmp	r3, #0
    534a:	bf14      	ite	ne
    534c:	2301      	movne	r3, #1
    534e:	2300      	moveq	r3, #0
    5350:	b2db      	uxtb	r3, r3
}
    5352:	4618      	mov	r0, r3
    5354:	370c      	adds	r7, #12
    5356:	46bd      	mov	sp, r7
    5358:	f85d 7b04 	ldr.w	r7, [sp], #4
    535c:	4770      	bx	lr

0000535e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    535e:	b480      	push	{r7}
    5360:	b083      	sub	sp, #12
    5362:	af00      	add	r7, sp, #0
    5364:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	691b      	ldr	r3, [r3, #16]
    536a:	0a1b      	lsrs	r3, r3, #8
    536c:	f003 0301 	and.w	r3, r3, #1
    5370:	2b00      	cmp	r3, #0
    5372:	bf14      	ite	ne
    5374:	2301      	movne	r3, #1
    5376:	2300      	moveq	r3, #0
    5378:	b2db      	uxtb	r3, r3
}
    537a:	4618      	mov	r0, r3
    537c:	370c      	adds	r7, #12
    537e:	46bd      	mov	sp, r7
    5380:	f85d 7b04 	ldr.w	r7, [sp], #4
    5384:	4770      	bx	lr

00005386 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5386:	b480      	push	{r7}
    5388:	b085      	sub	sp, #20
    538a:	af00      	add	r7, sp, #0
    538c:	6078      	str	r0, [r7, #4]
    538e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5390:	687b      	ldr	r3, [r7, #4]
    5392:	691b      	ldr	r3, [r3, #16]
    5394:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5396:	68fa      	ldr	r2, [r7, #12]
    5398:	683b      	ldr	r3, [r7, #0]
    539a:	4013      	ands	r3, r2
    539c:	60fb      	str	r3, [r7, #12]
	return tmp;
    539e:	68fb      	ldr	r3, [r7, #12]
}
    53a0:	4618      	mov	r0, r3
    53a2:	3714      	adds	r7, #20
    53a4:	46bd      	mov	sp, r7
    53a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53aa:	4770      	bx	lr

000053ac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    53ac:	b480      	push	{r7}
    53ae:	b085      	sub	sp, #20
    53b0:	af00      	add	r7, sp, #0
    53b2:	60f8      	str	r0, [r7, #12]
    53b4:	460b      	mov	r3, r1
    53b6:	607a      	str	r2, [r7, #4]
    53b8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    53ba:	7afb      	ldrb	r3, [r7, #11]
    53bc:	68fa      	ldr	r2, [r7, #12]
    53be:	3304      	adds	r3, #4
    53c0:	009b      	lsls	r3, r3, #2
    53c2:	4413      	add	r3, r2
    53c4:	687a      	ldr	r2, [r7, #4]
    53c6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53c8:	bf00      	nop
    53ca:	3714      	adds	r7, #20
    53cc:	46bd      	mov	sp, r7
    53ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d2:	4770      	bx	lr

000053d4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    53d4:	b480      	push	{r7}
    53d6:	b083      	sub	sp, #12
    53d8:	af00      	add	r7, sp, #0
    53da:	6078      	str	r0, [r7, #4]
    53dc:	460b      	mov	r3, r1
    53de:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	78fa      	ldrb	r2, [r7, #3]
    53e4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    53e6:	bf00      	nop
    53e8:	370c      	adds	r7, #12
    53ea:	46bd      	mov	sp, r7
    53ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    53f0:	4770      	bx	lr

000053f2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    53f2:	b480      	push	{r7}
    53f4:	b085      	sub	sp, #20
    53f6:	af00      	add	r7, sp, #0
    53f8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    53fa:	687b      	ldr	r3, [r7, #4]
    53fc:	f893 3020 	ldrb.w	r3, [r3, #32]
    5400:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5402:	7bfb      	ldrb	r3, [r7, #15]
    5404:	f003 0301 	and.w	r3, r3, #1
    5408:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    540a:	7bfb      	ldrb	r3, [r7, #15]
    540c:	2b00      	cmp	r3, #0
    540e:	bf14      	ite	ne
    5410:	2301      	movne	r3, #1
    5412:	2300      	moveq	r3, #0
    5414:	b2db      	uxtb	r3, r3
}
    5416:	4618      	mov	r0, r3
    5418:	3714      	adds	r7, #20
    541a:	46bd      	mov	sp, r7
    541c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5420:	4770      	bx	lr

00005422 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5422:	b480      	push	{r7}
    5424:	b083      	sub	sp, #12
    5426:	af00      	add	r7, sp, #0
    5428:	6078      	str	r0, [r7, #4]
    542a:	460b      	mov	r3, r1
    542c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	78fa      	ldrb	r2, [r7, #3]
    5432:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5436:	bf00      	nop
    5438:	370c      	adds	r7, #12
    543a:	46bd      	mov	sp, r7
    543c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5440:	4770      	bx	lr

00005442 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5442:	b480      	push	{r7}
    5444:	b083      	sub	sp, #12
    5446:	af00      	add	r7, sp, #0
    5448:	6078      	str	r0, [r7, #4]
    544a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	683a      	ldr	r2, [r7, #0]
    5450:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5452:	bf00      	nop
    5454:	370c      	adds	r7, #12
    5456:	46bd      	mov	sp, r7
    5458:	f85d 7b04 	ldr.w	r7, [sp], #4
    545c:	4770      	bx	lr

0000545e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    545e:	b480      	push	{r7}
    5460:	b083      	sub	sp, #12
    5462:	af00      	add	r7, sp, #0
    5464:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5466:	687b      	ldr	r3, [r7, #4]
    5468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    546a:	4618      	mov	r0, r3
    546c:	370c      	adds	r7, #12
    546e:	46bd      	mov	sp, r7
    5470:	f85d 7b04 	ldr.w	r7, [sp], #4
    5474:	4770      	bx	lr

00005476 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5476:	b480      	push	{r7}
    5478:	b083      	sub	sp, #12
    547a:	af00      	add	r7, sp, #0
    547c:	6078      	str	r0, [r7, #4]
    547e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	683a      	ldr	r2, [r7, #0]
    5484:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5486:	bf00      	nop
    5488:	370c      	adds	r7, #12
    548a:	46bd      	mov	sp, r7
    548c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5490:	4770      	bx	lr

00005492 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5492:	b480      	push	{r7}
    5494:	b085      	sub	sp, #20
    5496:	af00      	add	r7, sp, #0
    5498:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    54a2:	7bfb      	ldrb	r3, [r7, #15]
    54a4:	085b      	lsrs	r3, r3, #1
    54a6:	b2db      	uxtb	r3, r3
    54a8:	f003 0301 	and.w	r3, r3, #1
    54ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54ae:	7bfb      	ldrb	r3, [r7, #15]
    54b0:	2b00      	cmp	r3, #0
    54b2:	bf14      	ite	ne
    54b4:	2301      	movne	r3, #1
    54b6:	2300      	moveq	r3, #0
    54b8:	b2db      	uxtb	r3, r3
}
    54ba:	4618      	mov	r0, r3
    54bc:	3714      	adds	r7, #20
    54be:	46bd      	mov	sp, r7
    54c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c4:	4770      	bx	lr

000054c6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    54c6:	b480      	push	{r7}
    54c8:	b085      	sub	sp, #20
    54ca:	af00      	add	r7, sp, #0
    54cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    54d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    54d6:	7bfb      	ldrb	r3, [r7, #15]
    54d8:	089b      	lsrs	r3, r3, #2
    54da:	b2db      	uxtb	r3, r3
    54dc:	f003 0301 	and.w	r3, r3, #1
    54e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    54e2:	7bfb      	ldrb	r3, [r7, #15]
    54e4:	2b00      	cmp	r3, #0
    54e6:	bf14      	ite	ne
    54e8:	2301      	movne	r3, #1
    54ea:	2300      	moveq	r3, #0
    54ec:	b2db      	uxtb	r3, r3
}
    54ee:	4618      	mov	r0, r3
    54f0:	3714      	adds	r7, #20
    54f2:	46bd      	mov	sp, r7
    54f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    54f8:	4770      	bx	lr

000054fa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    54fa:	b480      	push	{r7}
    54fc:	b085      	sub	sp, #20
    54fe:	af00      	add	r7, sp, #0
    5500:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5508:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    550a:	7bfb      	ldrb	r3, [r7, #15]
    550c:	08db      	lsrs	r3, r3, #3
    550e:	b2db      	uxtb	r3, r3
    5510:	f003 0301 	and.w	r3, r3, #1
    5514:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5516:	7bfb      	ldrb	r3, [r7, #15]
    5518:	2b00      	cmp	r3, #0
    551a:	bf14      	ite	ne
    551c:	2301      	movne	r3, #1
    551e:	2300      	moveq	r3, #0
    5520:	b2db      	uxtb	r3, r3
}
    5522:	4618      	mov	r0, r3
    5524:	3714      	adds	r7, #20
    5526:	46bd      	mov	sp, r7
    5528:	f85d 7b04 	ldr.w	r7, [sp], #4
    552c:	4770      	bx	lr

0000552e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    552e:	b480      	push	{r7}
    5530:	b085      	sub	sp, #20
    5532:	af00      	add	r7, sp, #0
    5534:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    553c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    553e:	7bfb      	ldrb	r3, [r7, #15]
    5540:	091b      	lsrs	r3, r3, #4
    5542:	b2db      	uxtb	r3, r3
    5544:	f003 0301 	and.w	r3, r3, #1
    5548:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    554a:	7bfb      	ldrb	r3, [r7, #15]
    554c:	2b00      	cmp	r3, #0
    554e:	bf14      	ite	ne
    5550:	2301      	movne	r3, #1
    5552:	2300      	moveq	r3, #0
    5554:	b2db      	uxtb	r3, r3
}
    5556:	4618      	mov	r0, r3
    5558:	3714      	adds	r7, #20
    555a:	46bd      	mov	sp, r7
    555c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5560:	4770      	bx	lr
	...

00005564 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5564:	b580      	push	{r7, lr}
    5566:	b082      	sub	sp, #8
    5568:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    556a:	4b0a      	ldr	r3, [pc, #40]	; (5594 <_oscctrl_init_sources+0x30>)
    556c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    556e:	4a0a      	ldr	r2, [pc, #40]	; (5598 <_oscctrl_init_sources+0x34>)
    5570:	2101      	movs	r1, #1
    5572:	6878      	ldr	r0, [r7, #4]
    5574:	4b09      	ldr	r3, [pc, #36]	; (559c <_oscctrl_init_sources+0x38>)
    5576:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5578:	bf00      	nop
    557a:	6878      	ldr	r0, [r7, #4]
    557c:	4b08      	ldr	r3, [pc, #32]	; (55a0 <_oscctrl_init_sources+0x3c>)
    557e:	4798      	blx	r3
    5580:	4603      	mov	r3, r0
    5582:	f083 0301 	eor.w	r3, r3, #1
    5586:	b2db      	uxtb	r3, r3
    5588:	2b00      	cmp	r3, #0
    558a:	d1f6      	bne.n	557a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    558c:	bf00      	nop
    558e:	3708      	adds	r7, #8
    5590:	46bd      	mov	sp, r7
    5592:	bd80      	pop	{r7, pc}
    5594:	40001000 	.word	0x40001000
    5598:	03002646 	.word	0x03002646
    559c:	000053ad 	.word	0x000053ad
    55a0:	00005337 	.word	0x00005337

000055a4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b084      	sub	sp, #16
    55a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    55aa:	4b6b      	ldr	r3, [pc, #428]	; (5758 <_oscctrl_init_referenced_generators+0x1b4>)
    55ac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    55ae:	2204      	movs	r2, #4
    55b0:	2100      	movs	r1, #0
    55b2:	486a      	ldr	r0, [pc, #424]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    55b4:	4b6a      	ldr	r3, [pc, #424]	; (5760 <_oscctrl_init_referenced_generators+0x1bc>)
    55b6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    55b8:	bf00      	nop
    55ba:	4868      	ldr	r0, [pc, #416]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    55bc:	4b69      	ldr	r3, [pc, #420]	; (5764 <_oscctrl_init_referenced_generators+0x1c0>)
    55be:	4798      	blx	r3
    55c0:	4603      	mov	r3, r0
    55c2:	2b00      	cmp	r3, #0
    55c4:	d1f9      	bne.n	55ba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    55c6:	2100      	movs	r1, #0
    55c8:	68f8      	ldr	r0, [r7, #12]
    55ca:	4b67      	ldr	r3, [pc, #412]	; (5768 <_oscctrl_init_referenced_generators+0x1c4>)
    55cc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    55ce:	4967      	ldr	r1, [pc, #412]	; (576c <_oscctrl_init_referenced_generators+0x1c8>)
    55d0:	68f8      	ldr	r0, [r7, #12]
    55d2:	4b67      	ldr	r3, [pc, #412]	; (5770 <_oscctrl_init_referenced_generators+0x1cc>)
    55d4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    55d6:	bf00      	nop
    55d8:	68f8      	ldr	r0, [r7, #12]
    55da:	4b66      	ldr	r3, [pc, #408]	; (5774 <_oscctrl_init_referenced_generators+0x1d0>)
    55dc:	4798      	blx	r3
    55de:	4603      	mov	r3, r0
    55e0:	2b00      	cmp	r3, #0
    55e2:	d1f9      	bne.n	55d8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    55e4:	2100      	movs	r1, #0
    55e6:	68f8      	ldr	r0, [r7, #12]
    55e8:	4b63      	ldr	r3, [pc, #396]	; (5778 <_oscctrl_init_referenced_generators+0x1d4>)
    55ea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    55ec:	bf00      	nop
    55ee:	68f8      	ldr	r0, [r7, #12]
    55f0:	4b62      	ldr	r3, [pc, #392]	; (577c <_oscctrl_init_referenced_generators+0x1d8>)
    55f2:	4798      	blx	r3
    55f4:	4603      	mov	r3, r0
    55f6:	2b00      	cmp	r3, #0
    55f8:	d1f9      	bne.n	55ee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    55fa:	2302      	movs	r3, #2
    55fc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    55fe:	7afb      	ldrb	r3, [r7, #11]
    5600:	4619      	mov	r1, r3
    5602:	68f8      	ldr	r0, [r7, #12]
    5604:	4b58      	ldr	r3, [pc, #352]	; (5768 <_oscctrl_init_referenced_generators+0x1c4>)
    5606:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5608:	bf00      	nop
    560a:	68f8      	ldr	r0, [r7, #12]
    560c:	4b5c      	ldr	r3, [pc, #368]	; (5780 <_oscctrl_init_referenced_generators+0x1dc>)
    560e:	4798      	blx	r3
    5610:	4603      	mov	r3, r0
    5612:	2b00      	cmp	r3, #0
    5614:	d1f9      	bne.n	560a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5616:	68f8      	ldr	r0, [r7, #12]
    5618:	4b5a      	ldr	r3, [pc, #360]	; (5784 <_oscctrl_init_referenced_generators+0x1e0>)
    561a:	4798      	blx	r3
    561c:	4603      	mov	r3, r0
    561e:	4619      	mov	r1, r3
    5620:	68f8      	ldr	r0, [r7, #12]
    5622:	4b59      	ldr	r3, [pc, #356]	; (5788 <_oscctrl_init_referenced_generators+0x1e4>)
    5624:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5626:	bf00      	nop
    5628:	68f8      	ldr	r0, [r7, #12]
    562a:	4b58      	ldr	r3, [pc, #352]	; (578c <_oscctrl_init_referenced_generators+0x1e8>)
    562c:	4798      	blx	r3
    562e:	4603      	mov	r3, r0
    5630:	2b00      	cmp	r3, #0
    5632:	d1f9      	bne.n	5628 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5634:	2319      	movs	r3, #25
    5636:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5638:	7afb      	ldrb	r3, [r7, #11]
    563a:	4619      	mov	r1, r3
    563c:	68f8      	ldr	r0, [r7, #12]
    563e:	4b4e      	ldr	r3, [pc, #312]	; (5778 <_oscctrl_init_referenced_generators+0x1d4>)
    5640:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5642:	bf00      	nop
    5644:	68f8      	ldr	r0, [r7, #12]
    5646:	4b4d      	ldr	r3, [pc, #308]	; (577c <_oscctrl_init_referenced_generators+0x1d8>)
    5648:	4798      	blx	r3
    564a:	4603      	mov	r3, r0
    564c:	2b00      	cmp	r3, #0
    564e:	d1f9      	bne.n	5644 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5650:	2245      	movs	r2, #69	; 0x45
    5652:	2101      	movs	r1, #1
    5654:	4841      	ldr	r0, [pc, #260]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    5656:	4b4e      	ldr	r3, [pc, #312]	; (5790 <_oscctrl_init_referenced_generators+0x1ec>)
    5658:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    565a:	223b      	movs	r2, #59	; 0x3b
    565c:	2100      	movs	r1, #0
    565e:	68f8      	ldr	r0, [r7, #12]
    5660:	4b4c      	ldr	r3, [pc, #304]	; (5794 <_oscctrl_init_referenced_generators+0x1f0>)
    5662:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5664:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5668:	2100      	movs	r1, #0
    566a:	68f8      	ldr	r0, [r7, #12]
    566c:	4b4a      	ldr	r3, [pc, #296]	; (5798 <_oscctrl_init_referenced_generators+0x1f4>)
    566e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5670:	2242      	movs	r2, #66	; 0x42
    5672:	2100      	movs	r1, #0
    5674:	68f8      	ldr	r0, [r7, #12]
    5676:	4b49      	ldr	r3, [pc, #292]	; (579c <_oscctrl_init_referenced_generators+0x1f8>)
    5678:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    567a:	4a49      	ldr	r2, [pc, #292]	; (57a0 <_oscctrl_init_referenced_generators+0x1fc>)
    567c:	2101      	movs	r1, #1
    567e:	68f8      	ldr	r0, [r7, #12]
    5680:	4b44      	ldr	r3, [pc, #272]	; (5794 <_oscctrl_init_referenced_generators+0x1f0>)
    5682:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5684:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5688:	2101      	movs	r1, #1
    568a:	68f8      	ldr	r0, [r7, #12]
    568c:	4b42      	ldr	r3, [pc, #264]	; (5798 <_oscctrl_init_referenced_generators+0x1f4>)
    568e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5690:	2202      	movs	r2, #2
    5692:	2101      	movs	r1, #1
    5694:	68f8      	ldr	r0, [r7, #12]
    5696:	4b41      	ldr	r3, [pc, #260]	; (579c <_oscctrl_init_referenced_generators+0x1f8>)
    5698:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    569a:	68f8      	ldr	r0, [r7, #12]
    569c:	4b41      	ldr	r3, [pc, #260]	; (57a4 <_oscctrl_init_referenced_generators+0x200>)
    569e:	4798      	blx	r3
    56a0:	4603      	mov	r3, r0
    56a2:	2b00      	cmp	r3, #0
    56a4:	d00c      	beq.n	56c0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    56a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    56aa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    56ac:	bf00      	nop
    56ae:	6879      	ldr	r1, [r7, #4]
    56b0:	68f8      	ldr	r0, [r7, #12]
    56b2:	4b3d      	ldr	r3, [pc, #244]	; (57a8 <_oscctrl_init_referenced_generators+0x204>)
    56b4:	4798      	blx	r3
    56b6:	4602      	mov	r2, r0
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	429a      	cmp	r2, r3
    56bc:	d1f7      	bne.n	56ae <_oscctrl_init_referenced_generators+0x10a>
    56be:	e009      	b.n	56d4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    56c0:	bf00      	nop
    56c2:	68f8      	ldr	r0, [r7, #12]
    56c4:	4b39      	ldr	r3, [pc, #228]	; (57ac <_oscctrl_init_referenced_generators+0x208>)
    56c6:	4798      	blx	r3
    56c8:	4603      	mov	r3, r0
    56ca:	f083 0301 	eor.w	r3, r3, #1
    56ce:	b2db      	uxtb	r3, r3
    56d0:	2b00      	cmp	r3, #0
    56d2:	d1f6      	bne.n	56c2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    56d4:	bf00      	nop
    56d6:	2100      	movs	r1, #0
    56d8:	68f8      	ldr	r0, [r7, #12]
    56da:	4b35      	ldr	r3, [pc, #212]	; (57b0 <_oscctrl_init_referenced_generators+0x20c>)
    56dc:	4798      	blx	r3
    56de:	4603      	mov	r3, r0
    56e0:	f083 0301 	eor.w	r3, r3, #1
    56e4:	b2db      	uxtb	r3, r3
    56e6:	2b00      	cmp	r3, #0
    56e8:	d009      	beq.n	56fe <_oscctrl_init_referenced_generators+0x15a>
    56ea:	2100      	movs	r1, #0
    56ec:	68f8      	ldr	r0, [r7, #12]
    56ee:	4b31      	ldr	r3, [pc, #196]	; (57b4 <_oscctrl_init_referenced_generators+0x210>)
    56f0:	4798      	blx	r3
    56f2:	4603      	mov	r3, r0
    56f4:	f083 0301 	eor.w	r3, r3, #1
    56f8:	b2db      	uxtb	r3, r3
    56fa:	2b00      	cmp	r3, #0
    56fc:	d1eb      	bne.n	56d6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    56fe:	bf00      	nop
    5700:	2101      	movs	r1, #1
    5702:	68f8      	ldr	r0, [r7, #12]
    5704:	4b2a      	ldr	r3, [pc, #168]	; (57b0 <_oscctrl_init_referenced_generators+0x20c>)
    5706:	4798      	blx	r3
    5708:	4603      	mov	r3, r0
    570a:	f083 0301 	eor.w	r3, r3, #1
    570e:	b2db      	uxtb	r3, r3
    5710:	2b00      	cmp	r3, #0
    5712:	d009      	beq.n	5728 <_oscctrl_init_referenced_generators+0x184>
    5714:	2101      	movs	r1, #1
    5716:	68f8      	ldr	r0, [r7, #12]
    5718:	4b26      	ldr	r3, [pc, #152]	; (57b4 <_oscctrl_init_referenced_generators+0x210>)
    571a:	4798      	blx	r3
    571c:	4603      	mov	r3, r0
    571e:	f083 0301 	eor.w	r3, r3, #1
    5722:	b2db      	uxtb	r3, r3
    5724:	2b00      	cmp	r3, #0
    5726:	d1eb      	bne.n	5700 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5728:	bf00      	nop
    572a:	480c      	ldr	r0, [pc, #48]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    572c:	4b22      	ldr	r3, [pc, #136]	; (57b8 <_oscctrl_init_referenced_generators+0x214>)
    572e:	4798      	blx	r3
    5730:	4603      	mov	r3, r0
    5732:	2b00      	cmp	r3, #0
    5734:	d1f9      	bne.n	572a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5736:	2207      	movs	r2, #7
    5738:	2100      	movs	r1, #0
    573a:	4808      	ldr	r0, [pc, #32]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    573c:	4b08      	ldr	r3, [pc, #32]	; (5760 <_oscctrl_init_referenced_generators+0x1bc>)
    573e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5740:	bf00      	nop
    5742:	4806      	ldr	r0, [pc, #24]	; (575c <_oscctrl_init_referenced_generators+0x1b8>)
    5744:	4b07      	ldr	r3, [pc, #28]	; (5764 <_oscctrl_init_referenced_generators+0x1c0>)
    5746:	4798      	blx	r3
    5748:	4603      	mov	r3, r0
    574a:	2b00      	cmp	r3, #0
    574c:	d1f9      	bne.n	5742 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    574e:	bf00      	nop
    5750:	3710      	adds	r7, #16
    5752:	46bd      	mov	sp, r7
    5754:	bd80      	pop	{r7, pc}
    5756:	bf00      	nop
    5758:	40001000 	.word	0x40001000
    575c:	40001c00 	.word	0x40001c00
    5760:	00005171 	.word	0x00005171
    5764:	00005131 	.word	0x00005131
    5768:	000053d5 	.word	0x000053d5
    576c:	0401bb80 	.word	0x0401bb80
    5770:	00005477 	.word	0x00005477
    5774:	0000552f 	.word	0x0000552f
    5778:	00005423 	.word	0x00005423
    577c:	000054c7 	.word	0x000054c7
    5780:	00005493 	.word	0x00005493
    5784:	0000545f 	.word	0x0000545f
    5788:	00005443 	.word	0x00005443
    578c:	000054fb 	.word	0x000054fb
    5790:	000051c1 	.word	0x000051c1
    5794:	000052cd 	.word	0x000052cd
    5798:	00005309 	.word	0x00005309
    579c:	00005291 	.word	0x00005291
    57a0:	000407a0 	.word	0x000407a0
    57a4:	000053f3 	.word	0x000053f3
    57a8:	00005387 	.word	0x00005387
    57ac:	0000535f 	.word	0x0000535f
    57b0:	0000521d 	.word	0x0000521d
    57b4:	00005255 	.word	0x00005255
    57b8:	00005159 	.word	0x00005159

000057bc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    57bc:	b480      	push	{r7}
    57be:	b083      	sub	sp, #12
    57c0:	af00      	add	r7, sp, #0
    57c2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    57c4:	687b      	ldr	r3, [r7, #4]
    57c6:	69db      	ldr	r3, [r3, #28]
    57c8:	0a9b      	lsrs	r3, r3, #10
    57ca:	f003 0301 	and.w	r3, r3, #1
    57ce:	2b00      	cmp	r3, #0
    57d0:	bf14      	ite	ne
    57d2:	2301      	movne	r3, #1
    57d4:	2300      	moveq	r3, #0
    57d6:	b2db      	uxtb	r3, r3
}
    57d8:	4618      	mov	r0, r3
    57da:	370c      	adds	r7, #12
    57dc:	46bd      	mov	sp, r7
    57de:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e2:	4770      	bx	lr

000057e4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    57e4:	b480      	push	{r7}
    57e6:	b083      	sub	sp, #12
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    57f2:	61da      	str	r2, [r3, #28]
}
    57f4:	bf00      	nop
    57f6:	370c      	adds	r7, #12
    57f8:	46bd      	mov	sp, r7
    57fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fe:	4770      	bx	lr

00005800 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5800:	b480      	push	{r7}
    5802:	b083      	sub	sp, #12
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
    5808:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	683a      	ldr	r2, [r7, #0]
    580e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5810:	bf00      	nop
    5812:	370c      	adds	r7, #12
    5814:	46bd      	mov	sp, r7
    5816:	f85d 7b04 	ldr.w	r7, [sp], #4
    581a:	4770      	bx	lr

0000581c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    581c:	b480      	push	{r7}
    581e:	b083      	sub	sp, #12
    5820:	af00      	add	r7, sp, #0
    5822:	6078      	str	r0, [r7, #4]
    5824:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	683a      	ldr	r2, [r7, #0]
    582a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    582c:	bf00      	nop
    582e:	370c      	adds	r7, #12
    5830:	46bd      	mov	sp, r7
    5832:	f85d 7b04 	ldr.w	r7, [sp], #4
    5836:	4770      	bx	lr

00005838 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5838:	b480      	push	{r7}
    583a:	b083      	sub	sp, #12
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
    5840:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	683a      	ldr	r2, [r7, #0]
    5846:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5848:	bf00      	nop
    584a:	370c      	adds	r7, #12
    584c:	46bd      	mov	sp, r7
    584e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5852:	4770      	bx	lr

00005854 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5854:	b480      	push	{r7}
    5856:	b083      	sub	sp, #12
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	683a      	ldr	r2, [r7, #0]
    5862:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5864:	bf00      	nop
    5866:	370c      	adds	r7, #12
    5868:	46bd      	mov	sp, r7
    586a:	f85d 7b04 	ldr.w	r7, [sp], #4
    586e:	4770      	bx	lr

00005870 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5870:	b480      	push	{r7}
    5872:	b085      	sub	sp, #20
    5874:	af00      	add	r7, sp, #0
    5876:	6078      	str	r0, [r7, #4]
    5878:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    587e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5886:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5888:	683b      	ldr	r3, [r7, #0]
    588a:	b2db      	uxtb	r3, r3
    588c:	68fa      	ldr	r2, [r7, #12]
    588e:	4313      	orrs	r3, r2
    5890:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	68fa      	ldr	r2, [r7, #12]
    5896:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5898:	bf00      	nop
    589a:	3714      	adds	r7, #20
    589c:	46bd      	mov	sp, r7
    589e:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a2:	4770      	bx	lr

000058a4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    58a4:	b480      	push	{r7}
    58a6:	b085      	sub	sp, #20
    58a8:	af00      	add	r7, sp, #0
    58aa:	6078      	str	r0, [r7, #4]
    58ac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    58ae:	687b      	ldr	r3, [r7, #4]
    58b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    58b2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    58b4:	68fb      	ldr	r3, [r7, #12]
    58b6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    58ba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    58bc:	683b      	ldr	r3, [r7, #0]
    58be:	041b      	lsls	r3, r3, #16
    58c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    58c4:	68fa      	ldr	r2, [r7, #12]
    58c6:	4313      	orrs	r3, r2
    58c8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    58ca:	687b      	ldr	r3, [r7, #4]
    58cc:	68fa      	ldr	r2, [r7, #12]
    58ce:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58d0:	bf00      	nop
    58d2:	3714      	adds	r7, #20
    58d4:	46bd      	mov	sp, r7
    58d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58da:	4770      	bx	lr

000058dc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    58dc:	b480      	push	{r7}
    58de:	b083      	sub	sp, #12
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
    58e4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	683a      	ldr	r2, [r7, #0]
    58ea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    58ec:	bf00      	nop
    58ee:	370c      	adds	r7, #12
    58f0:	46bd      	mov	sp, r7
    58f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f6:	4770      	bx	lr

000058f8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    58f8:	b480      	push	{r7}
    58fa:	b083      	sub	sp, #12
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5904:	4618      	mov	r0, r3
    5906:	370c      	adds	r7, #12
    5908:	46bd      	mov	sp, r7
    590a:	f85d 7b04 	ldr.w	r7, [sp], #4
    590e:	4770      	bx	lr

00005910 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5910:	b480      	push	{r7}
    5912:	b085      	sub	sp, #20
    5914:	af00      	add	r7, sp, #0
    5916:	60f8      	str	r0, [r7, #12]
    5918:	60b9      	str	r1, [r7, #8]
    591a:	607a      	str	r2, [r7, #4]
	while (count--) {
    591c:	e007      	b.n	592e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	1c5a      	adds	r2, r3, #1
    5922:	60fa      	str	r2, [r7, #12]
    5924:	68ba      	ldr	r2, [r7, #8]
    5926:	1c51      	adds	r1, r2, #1
    5928:	60b9      	str	r1, [r7, #8]
    592a:	7812      	ldrb	r2, [r2, #0]
    592c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	1e5a      	subs	r2, r3, #1
    5932:	607a      	str	r2, [r7, #4]
    5934:	2b00      	cmp	r3, #0
    5936:	d1f2      	bne.n	591e <_qspi_memcpy+0xe>
	}
}
    5938:	bf00      	nop
    593a:	3714      	adds	r7, #20
    593c:	46bd      	mov	sp, r7
    593e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5942:	4770      	bx	lr

00005944 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    594c:	4903      	ldr	r1, [pc, #12]	; (595c <_qspi_end_transfer+0x18>)
    594e:	6878      	ldr	r0, [r7, #4]
    5950:	4b03      	ldr	r3, [pc, #12]	; (5960 <_qspi_end_transfer+0x1c>)
    5952:	4798      	blx	r3
}
    5954:	bf00      	nop
    5956:	3708      	adds	r7, #8
    5958:	46bd      	mov	sp, r7
    595a:	bd80      	pop	{r7, pc}
    595c:	01000002 	.word	0x01000002
    5960:	00005801 	.word	0x00005801

00005964 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5964:	b580      	push	{r7, lr}
    5966:	b082      	sub	sp, #8
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
    596c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	2b00      	cmp	r3, #0
    5972:	d004      	beq.n	597e <_qspi_sync_init+0x1a>
    5974:	683b      	ldr	r3, [r7, #0]
    5976:	2b00      	cmp	r3, #0
    5978:	d001      	beq.n	597e <_qspi_sync_init+0x1a>
    597a:	2301      	movs	r3, #1
    597c:	e000      	b.n	5980 <_qspi_sync_init+0x1c>
    597e:	2300      	movs	r3, #0
    5980:	f003 0301 	and.w	r3, r3, #1
    5984:	b2db      	uxtb	r3, r3
    5986:	2240      	movs	r2, #64	; 0x40
    5988:	490c      	ldr	r1, [pc, #48]	; (59bc <_qspi_sync_init+0x58>)
    598a:	4618      	mov	r0, r3
    598c:	4b0c      	ldr	r3, [pc, #48]	; (59c0 <_qspi_sync_init+0x5c>)
    598e:	4798      	blx	r3
	dev->prvt = hw;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	683a      	ldr	r2, [r7, #0]
    5994:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	2101      	movs	r1, #1
    599c:	4618      	mov	r0, r3
    599e:	4b09      	ldr	r3, [pc, #36]	; (59c4 <_qspi_sync_init+0x60>)
    59a0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    59a2:	4909      	ldr	r1, [pc, #36]	; (59c8 <_qspi_sync_init+0x64>)
    59a4:	6838      	ldr	r0, [r7, #0]
    59a6:	4b09      	ldr	r3, [pc, #36]	; (59cc <_qspi_sync_init+0x68>)
    59a8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    59aa:	4909      	ldr	r1, [pc, #36]	; (59d0 <_qspi_sync_init+0x6c>)
    59ac:	6838      	ldr	r0, [r7, #0]
    59ae:	4b09      	ldr	r3, [pc, #36]	; (59d4 <_qspi_sync_init+0x70>)
    59b0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    59b2:	2300      	movs	r3, #0
}
    59b4:	4618      	mov	r0, r3
    59b6:	3708      	adds	r7, #8
    59b8:	46bd      	mov	sp, r7
    59ba:	bd80      	pop	{r7, pc}
    59bc:	0000f280 	.word	0x0000f280
    59c0:	0000396d 	.word	0x0000396d
    59c4:	00005801 	.word	0x00005801
    59c8:	06000011 	.word	0x06000011
    59cc:	0000581d 	.word	0x0000581d
    59d0:	00241300 	.word	0x00241300
    59d4:	00005839 	.word	0x00005839

000059d8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	2102      	movs	r1, #2
    59e6:	4618      	mov	r0, r3
    59e8:	4b03      	ldr	r3, [pc, #12]	; (59f8 <_qspi_sync_enable+0x20>)
    59ea:	4798      	blx	r3
	return ERR_NONE;
    59ec:	2300      	movs	r3, #0
}
    59ee:	4618      	mov	r0, r3
    59f0:	3708      	adds	r7, #8
    59f2:	46bd      	mov	sp, r7
    59f4:	bd80      	pop	{r7, pc}
    59f6:	bf00      	nop
    59f8:	00005801 	.word	0x00005801

000059fc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    59fc:	b580      	push	{r7, lr}
    59fe:	b082      	sub	sp, #8
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	681b      	ldr	r3, [r3, #0]
    5a08:	2100      	movs	r1, #0
    5a0a:	4618      	mov	r0, r3
    5a0c:	4b03      	ldr	r3, [pc, #12]	; (5a1c <_qspi_sync_disable+0x20>)
    5a0e:	4798      	blx	r3
	return ERR_NONE;
    5a10:	2300      	movs	r3, #0
}
    5a12:	4618      	mov	r0, r3
    5a14:	3708      	adds	r7, #8
    5a16:	46bd      	mov	sp, r7
    5a18:	bd80      	pop	{r7, pc}
    5a1a:	bf00      	nop
    5a1c:	00005801 	.word	0x00005801

00005a20 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5a20:	b580      	push	{r7, lr}
    5a22:	b084      	sub	sp, #16
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
    5a28:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5a30:	683b      	ldr	r3, [r7, #0]
    5a32:	781b      	ldrb	r3, [r3, #0]
    5a34:	f003 0320 	and.w	r3, r3, #32
    5a38:	b2db      	uxtb	r3, r3
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d005      	beq.n	5a4a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5a3e:	683b      	ldr	r3, [r7, #0]
    5a40:	689b      	ldr	r3, [r3, #8]
    5a42:	4619      	mov	r1, r3
    5a44:	68f8      	ldr	r0, [r7, #12]
    5a46:	4b13      	ldr	r3, [pc, #76]	; (5a94 <_qspi_sync_command_set_ifr+0x74>)
    5a48:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5a4a:	683b      	ldr	r3, [r7, #0]
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	f003 0310 	and.w	r3, r3, #16
    5a52:	b2db      	uxtb	r3, r3
    5a54:	2b00      	cmp	r3, #0
    5a56:	d005      	beq.n	5a64 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5a58:	683b      	ldr	r3, [r7, #0]
    5a5a:	791b      	ldrb	r3, [r3, #4]
    5a5c:	4619      	mov	r1, r3
    5a5e:	68f8      	ldr	r0, [r7, #12]
    5a60:	4b0d      	ldr	r3, [pc, #52]	; (5a98 <_qspi_sync_command_set_ifr+0x78>)
    5a62:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5a64:	683b      	ldr	r3, [r7, #0]
    5a66:	781b      	ldrb	r3, [r3, #0]
    5a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5a6c:	b2db      	uxtb	r3, r3
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d005      	beq.n	5a7e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5a72:	683b      	ldr	r3, [r7, #0]
    5a74:	795b      	ldrb	r3, [r3, #5]
    5a76:	4619      	mov	r1, r3
    5a78:	68f8      	ldr	r0, [r7, #12]
    5a7a:	4b08      	ldr	r3, [pc, #32]	; (5a9c <_qspi_sync_command_set_ifr+0x7c>)
    5a7c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5a7e:	683b      	ldr	r3, [r7, #0]
    5a80:	681b      	ldr	r3, [r3, #0]
    5a82:	4619      	mov	r1, r3
    5a84:	68f8      	ldr	r0, [r7, #12]
    5a86:	4b06      	ldr	r3, [pc, #24]	; (5aa0 <_qspi_sync_command_set_ifr+0x80>)
    5a88:	4798      	blx	r3
}
    5a8a:	bf00      	nop
    5a8c:	3710      	adds	r7, #16
    5a8e:	46bd      	mov	sp, r7
    5a90:	bd80      	pop	{r7, pc}
    5a92:	bf00      	nop
    5a94:	00005855 	.word	0x00005855
    5a98:	00005871 	.word	0x00005871
    5a9c:	000058a5 	.word	0x000058a5
    5aa0:	000058dd 	.word	0x000058dd

00005aa4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b084      	sub	sp, #16
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
    5aac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5ab4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5ab8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5aba:	683b      	ldr	r3, [r7, #0]
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	f003 0320 	and.w	r3, r3, #32
    5ac2:	b2db      	uxtb	r3, r3
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d004      	beq.n	5ad2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5ac8:	683b      	ldr	r3, [r7, #0]
    5aca:	689b      	ldr	r3, [r3, #8]
    5acc:	68fa      	ldr	r2, [r7, #12]
    5ace:	4413      	add	r3, r2
    5ad0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5ad2:	68b8      	ldr	r0, [r7, #8]
    5ad4:	4b18      	ldr	r3, [pc, #96]	; (5b38 <_qspi_sync_run_transfer+0x94>)
    5ad6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5ad8:	683b      	ldr	r3, [r7, #0]
    5ada:	691b      	ldr	r3, [r3, #16]
    5adc:	2b00      	cmp	r3, #0
    5ade:	d103      	bne.n	5ae8 <_qspi_sync_run_transfer+0x44>
    5ae0:	683b      	ldr	r3, [r7, #0]
    5ae2:	695b      	ldr	r3, [r3, #20]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d001      	beq.n	5aec <_qspi_sync_run_transfer+0x48>
    5ae8:	2301      	movs	r3, #1
    5aea:	e000      	b.n	5aee <_qspi_sync_run_transfer+0x4a>
    5aec:	2300      	movs	r3, #0
    5aee:	f003 0301 	and.w	r3, r3, #1
    5af2:	b2db      	uxtb	r3, r3
    5af4:	2282      	movs	r2, #130	; 0x82
    5af6:	4911      	ldr	r1, [pc, #68]	; (5b3c <_qspi_sync_run_transfer+0x98>)
    5af8:	4618      	mov	r0, r3
    5afa:	4b11      	ldr	r3, [pc, #68]	; (5b40 <_qspi_sync_run_transfer+0x9c>)
    5afc:	4798      	blx	r3

	if (cmd->tx_buf) {
    5afe:	683b      	ldr	r3, [r7, #0]
    5b00:	691b      	ldr	r3, [r3, #16]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d008      	beq.n	5b18 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5b06:	683b      	ldr	r3, [r7, #0]
    5b08:	6919      	ldr	r1, [r3, #16]
    5b0a:	683b      	ldr	r3, [r7, #0]
    5b0c:	68db      	ldr	r3, [r3, #12]
    5b0e:	461a      	mov	r2, r3
    5b10:	68f8      	ldr	r0, [r7, #12]
    5b12:	4b0c      	ldr	r3, [pc, #48]	; (5b44 <_qspi_sync_run_transfer+0xa0>)
    5b14:	4798      	blx	r3
    5b16:	e007      	b.n	5b28 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5b18:	683b      	ldr	r3, [r7, #0]
    5b1a:	6958      	ldr	r0, [r3, #20]
    5b1c:	683b      	ldr	r3, [r7, #0]
    5b1e:	68db      	ldr	r3, [r3, #12]
    5b20:	461a      	mov	r2, r3
    5b22:	68f9      	ldr	r1, [r7, #12]
    5b24:	4b07      	ldr	r3, [pc, #28]	; (5b44 <_qspi_sync_run_transfer+0xa0>)
    5b26:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5b28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b2c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5b30:	bf00      	nop
    5b32:	3710      	adds	r7, #16
    5b34:	46bd      	mov	sp, r7
    5b36:	bd80      	pop	{r7, pc}
    5b38:	000058f9 	.word	0x000058f9
    5b3c:	0000f280 	.word	0x0000f280
    5b40:	0000396d 	.word	0x0000396d
    5b44:	00005911 	.word	0x00005911

00005b48 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b082      	sub	sp, #8
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
    5b50:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5b52:	6839      	ldr	r1, [r7, #0]
    5b54:	6878      	ldr	r0, [r7, #4]
    5b56:	4b14      	ldr	r3, [pc, #80]	; (5ba8 <_qspi_sync_serial_run_command+0x60>)
    5b58:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5b62:	b2db      	uxtb	r3, r3
    5b64:	2b00      	cmp	r3, #0
    5b66:	d003      	beq.n	5b70 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5b68:	6839      	ldr	r1, [r7, #0]
    5b6a:	6878      	ldr	r0, [r7, #4]
    5b6c:	4b0f      	ldr	r3, [pc, #60]	; (5bac <_qspi_sync_serial_run_command+0x64>)
    5b6e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	4618      	mov	r0, r3
    5b76:	4b0e      	ldr	r3, [pc, #56]	; (5bb0 <_qspi_sync_serial_run_command+0x68>)
    5b78:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5b7a:	bf00      	nop
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	4618      	mov	r0, r3
    5b82:	4b0c      	ldr	r3, [pc, #48]	; (5bb4 <_qspi_sync_serial_run_command+0x6c>)
    5b84:	4798      	blx	r3
    5b86:	4603      	mov	r3, r0
    5b88:	f083 0301 	eor.w	r3, r3, #1
    5b8c:	b2db      	uxtb	r3, r3
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d1f4      	bne.n	5b7c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	4618      	mov	r0, r3
    5b98:	4b07      	ldr	r3, [pc, #28]	; (5bb8 <_qspi_sync_serial_run_command+0x70>)
    5b9a:	4798      	blx	r3
	return ERR_NONE;
    5b9c:	2300      	movs	r3, #0
}
    5b9e:	4618      	mov	r0, r3
    5ba0:	3708      	adds	r7, #8
    5ba2:	46bd      	mov	sp, r7
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	bf00      	nop
    5ba8:	00005a21 	.word	0x00005a21
    5bac:	00005aa5 	.word	0x00005aa5
    5bb0:	00005945 	.word	0x00005945
    5bb4:	000057bd 	.word	0x000057bd
    5bb8:	000057e5 	.word	0x000057e5

00005bbc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5bbc:	b480      	push	{r7}
    5bbe:	b083      	sub	sp, #12
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
    5bc4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5bc6:	bf00      	nop
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	691a      	ldr	r2, [r3, #16]
    5bcc:	683b      	ldr	r3, [r7, #0]
    5bce:	4013      	ands	r3, r2
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d1f9      	bne.n	5bc8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5bd4:	bf00      	nop
    5bd6:	370c      	adds	r7, #12
    5bd8:	46bd      	mov	sp, r7
    5bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bde:	4770      	bx	lr

00005be0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5be0:	b480      	push	{r7}
    5be2:	b083      	sub	sp, #12
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bee:	819a      	strh	r2, [r3, #12]
}
    5bf0:	bf00      	nop
    5bf2:	370c      	adds	r7, #12
    5bf4:	46bd      	mov	sp, r7
    5bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bfa:	4770      	bx	lr

00005bfc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5bfc:	b480      	push	{r7}
    5bfe:	b083      	sub	sp, #12
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5c0a:	819a      	strh	r2, [r3, #12]
}
    5c0c:	bf00      	nop
    5c0e:	370c      	adds	r7, #12
    5c10:	46bd      	mov	sp, r7
    5c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c16:	4770      	bx	lr

00005c18 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5c18:	b480      	push	{r7}
    5c1a:	b083      	sub	sp, #12
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	899b      	ldrh	r3, [r3, #12]
    5c24:	b29b      	uxth	r3, r3
}
    5c26:	4618      	mov	r0, r3
    5c28:	370c      	adds	r7, #12
    5c2a:	46bd      	mov	sp, r7
    5c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c30:	4770      	bx	lr

00005c32 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5c32:	b480      	push	{r7}
    5c34:	b083      	sub	sp, #12
    5c36:	af00      	add	r7, sp, #0
    5c38:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	895b      	ldrh	r3, [r3, #10]
    5c3e:	b29b      	uxth	r3, r3
}
    5c40:	4618      	mov	r0, r3
    5c42:	370c      	adds	r7, #12
    5c44:	46bd      	mov	sp, r7
    5c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4a:	4770      	bx	lr

00005c4c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5c4c:	b580      	push	{r7, lr}
    5c4e:	b082      	sub	sp, #8
    5c50:	af00      	add	r7, sp, #0
    5c52:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	881b      	ldrh	r3, [r3, #0]
    5c58:	b29b      	uxth	r3, r3
    5c5a:	f043 0301 	orr.w	r3, r3, #1
    5c5e:	b29a      	uxth	r2, r3
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5c64:	2101      	movs	r1, #1
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	4b02      	ldr	r3, [pc, #8]	; (5c74 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5c6a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5c6c:	bf00      	nop
    5c6e:	3708      	adds	r7, #8
    5c70:	46bd      	mov	sp, r7
    5c72:	bd80      	pop	{r7, pc}
    5c74:	00005bbd 	.word	0x00005bbd

00005c78 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5c78:	b580      	push	{r7, lr}
    5c7a:	b084      	sub	sp, #16
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5c80:	f248 0103 	movw	r1, #32771	; 0x8003
    5c84:	6878      	ldr	r0, [r7, #4]
    5c86:	4b0a      	ldr	r3, [pc, #40]	; (5cb0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5c88:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	881b      	ldrh	r3, [r3, #0]
    5c8e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5c90:	89fb      	ldrh	r3, [r7, #14]
    5c92:	085b      	lsrs	r3, r3, #1
    5c94:	b29b      	uxth	r3, r3
    5c96:	f003 0301 	and.w	r3, r3, #1
    5c9a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5c9c:	89fb      	ldrh	r3, [r7, #14]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	bf14      	ite	ne
    5ca2:	2301      	movne	r3, #1
    5ca4:	2300      	moveq	r3, #0
    5ca6:	b2db      	uxtb	r3, r3
}
    5ca8:	4618      	mov	r0, r3
    5caa:	3710      	adds	r7, #16
    5cac:	46bd      	mov	sp, r7
    5cae:	bd80      	pop	{r7, pc}
    5cb0:	00005bbd 	.word	0x00005bbd

00005cb4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5cb4:	b580      	push	{r7, lr}
    5cb6:	b082      	sub	sp, #8
    5cb8:	af00      	add	r7, sp, #0
    5cba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	881b      	ldrh	r3, [r3, #0]
    5cc0:	b29b      	uxth	r3, r3
    5cc2:	f023 0302 	bic.w	r3, r3, #2
    5cc6:	b29a      	uxth	r2, r3
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ccc:	f248 0103 	movw	r1, #32771	; 0x8003
    5cd0:	6878      	ldr	r0, [r7, #4]
    5cd2:	4b03      	ldr	r3, [pc, #12]	; (5ce0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5cd4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5cd6:	bf00      	nop
    5cd8:	3708      	adds	r7, #8
    5cda:	46bd      	mov	sp, r7
    5cdc:	bd80      	pop	{r7, pc}
    5cde:	bf00      	nop
    5ce0:	00005bbd 	.word	0x00005bbd

00005ce4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5ce4:	b580      	push	{r7, lr}
    5ce6:	b082      	sub	sp, #8
    5ce8:	af00      	add	r7, sp, #0
    5cea:	6078      	str	r0, [r7, #4]
    5cec:	460b      	mov	r3, r1
    5cee:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	887a      	ldrh	r2, [r7, #2]
    5cf4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5cf6:	f248 0103 	movw	r1, #32771	; 0x8003
    5cfa:	6878      	ldr	r0, [r7, #4]
    5cfc:	4b02      	ldr	r3, [pc, #8]	; (5d08 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5cfe:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d00:	bf00      	nop
    5d02:	3708      	adds	r7, #8
    5d04:	46bd      	mov	sp, r7
    5d06:	bd80      	pop	{r7, pc}
    5d08:	00005bbd 	.word	0x00005bbd

00005d0c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5d0c:	b480      	push	{r7}
    5d0e:	b083      	sub	sp, #12
    5d10:	af00      	add	r7, sp, #0
    5d12:	6078      	str	r0, [r7, #4]
    5d14:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	683a      	ldr	r2, [r7, #0]
    5d1a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5d1c:	bf00      	nop
    5d1e:	370c      	adds	r7, #12
    5d20:	46bd      	mov	sp, r7
    5d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d26:	4770      	bx	lr

00005d28 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	2b00      	cmp	r3, #0
    5d34:	d005      	beq.n	5d42 <_calendar_init+0x1a>
    5d36:	687b      	ldr	r3, [r7, #4]
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d001      	beq.n	5d42 <_calendar_init+0x1a>
    5d3e:	2301      	movs	r3, #1
    5d40:	e000      	b.n	5d44 <_calendar_init+0x1c>
    5d42:	2300      	movs	r3, #0
    5d44:	f003 0301 	and.w	r3, r3, #1
    5d48:	b2db      	uxtb	r3, r3
    5d4a:	222f      	movs	r2, #47	; 0x2f
    5d4c:	491b      	ldr	r1, [pc, #108]	; (5dbc <_calendar_init+0x94>)
    5d4e:	4618      	mov	r0, r3
    5d50:	4b1b      	ldr	r3, [pc, #108]	; (5dc0 <_calendar_init+0x98>)
    5d52:	4798      	blx	r3

	_rtc_dev = dev;
    5d54:	4a1b      	ldr	r2, [pc, #108]	; (5dc4 <_calendar_init+0x9c>)
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	4618      	mov	r0, r3
    5d60:	4b19      	ldr	r3, [pc, #100]	; (5dc8 <_calendar_init+0xa0>)
    5d62:	4798      	blx	r3
    5d64:	4603      	mov	r3, r0
    5d66:	2b00      	cmp	r3, #0
    5d68:	d00a      	beq.n	5d80 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5d6a:	687b      	ldr	r3, [r7, #4]
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	4618      	mov	r0, r3
    5d70:	4b16      	ldr	r3, [pc, #88]	; (5dcc <_calendar_init+0xa4>)
    5d72:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	2102      	movs	r1, #2
    5d7a:	4618      	mov	r0, r3
    5d7c:	4b14      	ldr	r3, [pc, #80]	; (5dd0 <_calendar_init+0xa8>)
    5d7e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	4618      	mov	r0, r3
    5d86:	4b13      	ldr	r3, [pc, #76]	; (5dd4 <_calendar_init+0xac>)
    5d88:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	681b      	ldr	r3, [r3, #0]
    5d8e:	2101      	movs	r1, #1
    5d90:	4618      	mov	r0, r3
    5d92:	4b0f      	ldr	r3, [pc, #60]	; (5dd0 <_calendar_init+0xa8>)
    5d94:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5d9e:	4618      	mov	r0, r3
    5da0:	4b0d      	ldr	r3, [pc, #52]	; (5dd8 <_calendar_init+0xb0>)
    5da2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5da8:	2100      	movs	r1, #0
    5daa:	4618      	mov	r0, r3
    5dac:	4b0b      	ldr	r3, [pc, #44]	; (5ddc <_calendar_init+0xb4>)
    5dae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5db0:	2300      	movs	r3, #0
}
    5db2:	4618      	mov	r0, r3
    5db4:	3708      	adds	r7, #8
    5db6:	46bd      	mov	sp, r7
    5db8:	bd80      	pop	{r7, pc}
    5dba:	bf00      	nop
    5dbc:	0000f298 	.word	0x0000f298
    5dc0:	0000396d 	.word	0x0000396d
    5dc4:	2000095c 	.word	0x2000095c
    5dc8:	00005c79 	.word	0x00005c79
    5dcc:	00005cb5 	.word	0x00005cb5
    5dd0:	00005bbd 	.word	0x00005bbd
    5dd4:	00005c4d 	.word	0x00005c4d
    5dd8:	00005ce5 	.word	0x00005ce5
    5ddc:	00005d0d 	.word	0x00005d0d

00005de0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5de0:	b580      	push	{r7, lr}
    5de2:	b084      	sub	sp, #16
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	681b      	ldr	r3, [r3, #0]
    5dec:	4618      	mov	r0, r3
    5dee:	4b19      	ldr	r3, [pc, #100]	; (5e54 <_rtc_interrupt_handler+0x74>)
    5df0:	4798      	blx	r3
    5df2:	4603      	mov	r3, r0
    5df4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	4618      	mov	r0, r3
    5dfc:	4b16      	ldr	r3, [pc, #88]	; (5e58 <_rtc_interrupt_handler+0x78>)
    5dfe:	4798      	blx	r3
    5e00:	4603      	mov	r3, r0
    5e02:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5e04:	89fa      	ldrh	r2, [r7, #14]
    5e06:	89bb      	ldrh	r3, [r7, #12]
    5e08:	4013      	ands	r3, r2
    5e0a:	b29b      	uxth	r3, r3
    5e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5e10:	2b00      	cmp	r3, #0
    5e12:	d009      	beq.n	5e28 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	685b      	ldr	r3, [r3, #4]
    5e18:	6878      	ldr	r0, [r7, #4]
    5e1a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	681b      	ldr	r3, [r3, #0]
    5e20:	4618      	mov	r0, r3
    5e22:	4b0e      	ldr	r3, [pc, #56]	; (5e5c <_rtc_interrupt_handler+0x7c>)
    5e24:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5e26:	e010      	b.n	5e4a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5e28:	89fa      	ldrh	r2, [r7, #14]
    5e2a:	89bb      	ldrh	r3, [r7, #12]
    5e2c:	4013      	ands	r3, r2
    5e2e:	b29b      	uxth	r3, r3
    5e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5e34:	2b00      	cmp	r3, #0
    5e36:	d008      	beq.n	5e4a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	689b      	ldr	r3, [r3, #8]
    5e3c:	6878      	ldr	r0, [r7, #4]
    5e3e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	681b      	ldr	r3, [r3, #0]
    5e44:	4618      	mov	r0, r3
    5e46:	4b06      	ldr	r3, [pc, #24]	; (5e60 <_rtc_interrupt_handler+0x80>)
    5e48:	4798      	blx	r3
}
    5e4a:	bf00      	nop
    5e4c:	3710      	adds	r7, #16
    5e4e:	46bd      	mov	sp, r7
    5e50:	bd80      	pop	{r7, pc}
    5e52:	bf00      	nop
    5e54:	00005c19 	.word	0x00005c19
    5e58:	00005c33 	.word	0x00005c33
    5e5c:	00005be1 	.word	0x00005be1
    5e60:	00005bfd 	.word	0x00005bfd

00005e64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5e64:	b580      	push	{r7, lr}
    5e66:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5e68:	4b03      	ldr	r3, [pc, #12]	; (5e78 <RTC_Handler+0x14>)
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	4618      	mov	r0, r3
    5e6e:	4b03      	ldr	r3, [pc, #12]	; (5e7c <RTC_Handler+0x18>)
    5e70:	4798      	blx	r3
}
    5e72:	bf00      	nop
    5e74:	bd80      	pop	{r7, pc}
    5e76:	bf00      	nop
    5e78:	2000095c 	.word	0x2000095c
    5e7c:	00005de1 	.word	0x00005de1

00005e80 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5e80:	b480      	push	{r7}
    5e82:	b083      	sub	sp, #12
    5e84:	af00      	add	r7, sp, #0
    5e86:	6078      	str	r0, [r7, #4]
    5e88:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    5e8a:	bf00      	nop
    5e8c:	687b      	ldr	r3, [r7, #4]
    5e8e:	69da      	ldr	r2, [r3, #28]
    5e90:	683b      	ldr	r3, [r7, #0]
    5e92:	4013      	ands	r3, r2
    5e94:	2b00      	cmp	r3, #0
    5e96:	d1f9      	bne.n	5e8c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5e98:	bf00      	nop
    5e9a:	370c      	adds	r7, #12
    5e9c:	46bd      	mov	sp, r7
    5e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ea2:	4770      	bx	lr

00005ea4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5ea4:	b480      	push	{r7}
    5ea6:	b083      	sub	sp, #12
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	6078      	str	r0, [r7, #4]
    5eac:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5eae:	687b      	ldr	r3, [r7, #4]
    5eb0:	69da      	ldr	r2, [r3, #28]
    5eb2:	683b      	ldr	r3, [r7, #0]
    5eb4:	4013      	ands	r3, r2
    5eb6:	2b00      	cmp	r3, #0
    5eb8:	bf14      	ite	ne
    5eba:	2301      	movne	r3, #1
    5ebc:	2300      	moveq	r3, #0
    5ebe:	b2db      	uxtb	r3, r3
}
    5ec0:	4618      	mov	r0, r3
    5ec2:	370c      	adds	r7, #12
    5ec4:	46bd      	mov	sp, r7
    5ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eca:	4770      	bx	lr

00005ecc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5ecc:	b480      	push	{r7}
    5ece:	b083      	sub	sp, #12
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
    5ed4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5ed6:	bf00      	nop
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	69da      	ldr	r2, [r3, #28]
    5edc:	683b      	ldr	r3, [r7, #0]
    5ede:	4013      	ands	r3, r2
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d1f9      	bne.n	5ed8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5ee4:	bf00      	nop
    5ee6:	370c      	adds	r7, #12
    5ee8:	46bd      	mov	sp, r7
    5eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eee:	4770      	bx	lr

00005ef0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5ef0:	b480      	push	{r7}
    5ef2:	b083      	sub	sp, #12
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	69da      	ldr	r2, [r3, #28]
    5efe:	683b      	ldr	r3, [r7, #0]
    5f00:	4013      	ands	r3, r2
    5f02:	2b00      	cmp	r3, #0
    5f04:	bf14      	ite	ne
    5f06:	2301      	movne	r3, #1
    5f08:	2300      	moveq	r3, #0
    5f0a:	b2db      	uxtb	r3, r3
}
    5f0c:	4618      	mov	r0, r3
    5f0e:	370c      	adds	r7, #12
    5f10:	46bd      	mov	sp, r7
    5f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f16:	4770      	bx	lr

00005f18 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5f18:	b480      	push	{r7}
    5f1a:	b083      	sub	sp, #12
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	2201      	movs	r2, #1
    5f24:	761a      	strb	r2, [r3, #24]
}
    5f26:	bf00      	nop
    5f28:	370c      	adds	r7, #12
    5f2a:	46bd      	mov	sp, r7
    5f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f30:	4770      	bx	lr

00005f32 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5f32:	b480      	push	{r7}
    5f34:	b083      	sub	sp, #12
    5f36:	af00      	add	r7, sp, #0
    5f38:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	2202      	movs	r2, #2
    5f3e:	761a      	strb	r2, [r3, #24]
}
    5f40:	bf00      	nop
    5f42:	370c      	adds	r7, #12
    5f44:	46bd      	mov	sp, r7
    5f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4a:	4770      	bx	lr

00005f4c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5f4c:	b480      	push	{r7}
    5f4e:	b083      	sub	sp, #12
    5f50:	af00      	add	r7, sp, #0
    5f52:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	7e1b      	ldrb	r3, [r3, #24]
    5f58:	b2db      	uxtb	r3, r3
}
    5f5a:	4618      	mov	r0, r3
    5f5c:	370c      	adds	r7, #12
    5f5e:	46bd      	mov	sp, r7
    5f60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f64:	4770      	bx	lr

00005f66 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5f66:	b480      	push	{r7}
    5f68:	b085      	sub	sp, #20
    5f6a:	af00      	add	r7, sp, #0
    5f6c:	6078      	str	r0, [r7, #4]
    5f6e:	460b      	mov	r3, r1
    5f70:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	7e1b      	ldrb	r3, [r3, #24]
    5f76:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5f78:	7bfa      	ldrb	r2, [r7, #15]
    5f7a:	78fb      	ldrb	r3, [r7, #3]
    5f7c:	4013      	ands	r3, r2
    5f7e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5f80:	7bfb      	ldrb	r3, [r7, #15]
}
    5f82:	4618      	mov	r0, r3
    5f84:	3714      	adds	r7, #20
    5f86:	46bd      	mov	sp, r7
    5f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f8c:	4770      	bx	lr

00005f8e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5f8e:	b480      	push	{r7}
    5f90:	b083      	sub	sp, #12
    5f92:	af00      	add	r7, sp, #0
    5f94:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	7e1b      	ldrb	r3, [r3, #24]
    5f9a:	b2db      	uxtb	r3, r3
}
    5f9c:	4618      	mov	r0, r3
    5f9e:	370c      	adds	r7, #12
    5fa0:	46bd      	mov	sp, r7
    5fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa6:	4770      	bx	lr

00005fa8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	6078      	str	r0, [r7, #4]
    5fb0:	460b      	mov	r3, r1
    5fb2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	78fa      	ldrb	r2, [r7, #3]
    5fb8:	761a      	strb	r2, [r3, #24]
}
    5fba:	bf00      	nop
    5fbc:	370c      	adds	r7, #12
    5fbe:	46bd      	mov	sp, r7
    5fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc4:	4770      	bx	lr
	...

00005fc8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	f043 0202 	orr.w	r2, r3, #2
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5fdc:	2103      	movs	r1, #3
    5fde:	6878      	ldr	r0, [r7, #4]
    5fe0:	4b02      	ldr	r3, [pc, #8]	; (5fec <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    5fe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5fe4:	bf00      	nop
    5fe6:	3708      	adds	r7, #8
    5fe8:	46bd      	mov	sp, r7
    5fea:	bd80      	pop	{r7, pc}
    5fec:	00005e81 	.word	0x00005e81

00005ff0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b082      	sub	sp, #8
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	f023 0202 	bic.w	r2, r3, #2
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6004:	2103      	movs	r1, #3
    6006:	6878      	ldr	r0, [r7, #4]
    6008:	4b02      	ldr	r3, [pc, #8]	; (6014 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    600a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    600c:	bf00      	nop
    600e:	3708      	adds	r7, #8
    6010:	46bd      	mov	sp, r7
    6012:	bd80      	pop	{r7, pc}
    6014:	00005e81 	.word	0x00005e81

00006018 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6018:	b480      	push	{r7}
    601a:	b085      	sub	sp, #20
    601c:	af00      	add	r7, sp, #0
    601e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	681b      	ldr	r3, [r3, #0]
    6024:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6026:	68fb      	ldr	r3, [r7, #12]
    6028:	0edb      	lsrs	r3, r3, #27
    602a:	f003 0301 	and.w	r3, r3, #1
    602e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6030:	68fb      	ldr	r3, [r7, #12]
    6032:	2b00      	cmp	r3, #0
    6034:	bf14      	ite	ne
    6036:	2301      	movne	r3, #1
    6038:	2300      	moveq	r3, #0
    603a:	b2db      	uxtb	r3, r3
}
    603c:	4618      	mov	r0, r3
    603e:	3714      	adds	r7, #20
    6040:	46bd      	mov	sp, r7
    6042:	f85d 7b04 	ldr.w	r7, [sp], #4
    6046:	4770      	bx	lr

00006048 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6048:	b580      	push	{r7, lr}
    604a:	b084      	sub	sp, #16
    604c:	af00      	add	r7, sp, #0
    604e:	6078      	str	r0, [r7, #4]
    6050:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6052:	2103      	movs	r1, #3
    6054:	6878      	ldr	r0, [r7, #4]
    6056:	4b07      	ldr	r3, [pc, #28]	; (6074 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6058:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    605a:	687b      	ldr	r3, [r7, #4]
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6060:	68fa      	ldr	r2, [r7, #12]
    6062:	683b      	ldr	r3, [r7, #0]
    6064:	4013      	ands	r3, r2
    6066:	60fb      	str	r3, [r7, #12]
	return tmp;
    6068:	68fb      	ldr	r3, [r7, #12]
}
    606a:	4618      	mov	r0, r3
    606c:	3710      	adds	r7, #16
    606e:	46bd      	mov	sp, r7
    6070:	bd80      	pop	{r7, pc}
    6072:	bf00      	nop
    6074:	00005e81 	.word	0x00005e81

00006078 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	683a      	ldr	r2, [r7, #0]
    6086:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6088:	2103      	movs	r1, #3
    608a:	6878      	ldr	r0, [r7, #4]
    608c:	4b02      	ldr	r3, [pc, #8]	; (6098 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    608e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6090:	bf00      	nop
    6092:	3708      	adds	r7, #8
    6094:	46bd      	mov	sp, r7
    6096:	bd80      	pop	{r7, pc}
    6098:	00005e81 	.word	0x00005e81

0000609c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    609c:	b580      	push	{r7, lr}
    609e:	b084      	sub	sp, #16
    60a0:	af00      	add	r7, sp, #0
    60a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60a4:	2103      	movs	r1, #3
    60a6:	6878      	ldr	r0, [r7, #4]
    60a8:	4b09      	ldr	r3, [pc, #36]	; (60d0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    60aa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	681b      	ldr	r3, [r3, #0]
    60b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    60b2:	68fb      	ldr	r3, [r7, #12]
    60b4:	085b      	lsrs	r3, r3, #1
    60b6:	f003 0301 	and.w	r3, r3, #1
    60ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    60bc:	68fb      	ldr	r3, [r7, #12]
    60be:	2b00      	cmp	r3, #0
    60c0:	bf14      	ite	ne
    60c2:	2301      	movne	r3, #1
    60c4:	2300      	moveq	r3, #0
    60c6:	b2db      	uxtb	r3, r3
}
    60c8:	4618      	mov	r0, r3
    60ca:	3710      	adds	r7, #16
    60cc:	46bd      	mov	sp, r7
    60ce:	bd80      	pop	{r7, pc}
    60d0:	00005ecd 	.word	0x00005ecd

000060d4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b082      	sub	sp, #8
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	681b      	ldr	r3, [r3, #0]
    60e0:	f023 0202 	bic.w	r2, r3, #2
    60e4:	687b      	ldr	r3, [r7, #4]
    60e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    60e8:	2103      	movs	r1, #3
    60ea:	6878      	ldr	r0, [r7, #4]
    60ec:	4b02      	ldr	r3, [pc, #8]	; (60f8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    60ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    60f0:	bf00      	nop
    60f2:	3708      	adds	r7, #8
    60f4:	46bd      	mov	sp, r7
    60f6:	bd80      	pop	{r7, pc}
    60f8:	00005ecd 	.word	0x00005ecd

000060fc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    60fc:	b580      	push	{r7, lr}
    60fe:	b084      	sub	sp, #16
    6100:	af00      	add	r7, sp, #0
    6102:	6078      	str	r0, [r7, #4]
    6104:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6106:	2103      	movs	r1, #3
    6108:	6878      	ldr	r0, [r7, #4]
    610a:	4b07      	ldr	r3, [pc, #28]	; (6128 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    610c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    610e:	687b      	ldr	r3, [r7, #4]
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6114:	68fa      	ldr	r2, [r7, #12]
    6116:	683b      	ldr	r3, [r7, #0]
    6118:	4013      	ands	r3, r2
    611a:	60fb      	str	r3, [r7, #12]
	return tmp;
    611c:	68fb      	ldr	r3, [r7, #12]
}
    611e:	4618      	mov	r0, r3
    6120:	3710      	adds	r7, #16
    6122:	46bd      	mov	sp, r7
    6124:	bd80      	pop	{r7, pc}
    6126:	bf00      	nop
    6128:	00005ecd 	.word	0x00005ecd

0000612c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    612c:	b580      	push	{r7, lr}
    612e:	b082      	sub	sp, #8
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
    6134:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	683a      	ldr	r2, [r7, #0]
    613a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    613c:	2103      	movs	r1, #3
    613e:	6878      	ldr	r0, [r7, #4]
    6140:	4b02      	ldr	r3, [pc, #8]	; (614c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6142:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6144:	bf00      	nop
    6146:	3708      	adds	r7, #8
    6148:	46bd      	mov	sp, r7
    614a:	bd80      	pop	{r7, pc}
    614c:	00005ecd 	.word	0x00005ecd

00006150 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6150:	b580      	push	{r7, lr}
    6152:	b082      	sub	sp, #8
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	685b      	ldr	r3, [r3, #4]
    615c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6164:	2104      	movs	r1, #4
    6166:	6878      	ldr	r0, [r7, #4]
    6168:	4b02      	ldr	r3, [pc, #8]	; (6174 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    616a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    616c:	bf00      	nop
    616e:	3708      	adds	r7, #8
    6170:	46bd      	mov	sp, r7
    6172:	bd80      	pop	{r7, pc}
    6174:	00005e81 	.word	0x00005e81

00006178 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6178:	b580      	push	{r7, lr}
    617a:	b082      	sub	sp, #8
    617c:	af00      	add	r7, sp, #0
    617e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    618c:	2104      	movs	r1, #4
    618e:	6878      	ldr	r0, [r7, #4]
    6190:	4b02      	ldr	r3, [pc, #8]	; (619c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6192:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6194:	bf00      	nop
    6196:	3708      	adds	r7, #8
    6198:	46bd      	mov	sp, r7
    619a:	bd80      	pop	{r7, pc}
    619c:	00005e81 	.word	0x00005e81

000061a0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    61a0:	b580      	push	{r7, lr}
    61a2:	b082      	sub	sp, #8
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	685b      	ldr	r3, [r3, #4]
    61ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61b4:	2104      	movs	r1, #4
    61b6:	6878      	ldr	r0, [r7, #4]
    61b8:	4b02      	ldr	r3, [pc, #8]	; (61c4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    61ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61bc:	bf00      	nop
    61be:	3708      	adds	r7, #8
    61c0:	46bd      	mov	sp, r7
    61c2:	bd80      	pop	{r7, pc}
    61c4:	00005e81 	.word	0x00005e81

000061c8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    61c8:	b580      	push	{r7, lr}
    61ca:	b082      	sub	sp, #8
    61cc:	af00      	add	r7, sp, #0
    61ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	685b      	ldr	r3, [r3, #4]
    61d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    61dc:	2104      	movs	r1, #4
    61de:	6878      	ldr	r0, [r7, #4]
    61e0:	4b02      	ldr	r3, [pc, #8]	; (61ec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    61e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    61e4:	bf00      	nop
    61e6:	3708      	adds	r7, #8
    61e8:	46bd      	mov	sp, r7
    61ea:	bd80      	pop	{r7, pc}
    61ec:	00005e81 	.word	0x00005e81

000061f0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    61f0:	b580      	push	{r7, lr}
    61f2:	b082      	sub	sp, #8
    61f4:	af00      	add	r7, sp, #0
    61f6:	6078      	str	r0, [r7, #4]
    61f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    61fa:	687b      	ldr	r3, [r7, #4]
    61fc:	685a      	ldr	r2, [r3, #4]
    61fe:	683b      	ldr	r3, [r7, #0]
    6200:	041b      	lsls	r3, r3, #16
    6202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6206:	431a      	orrs	r2, r3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    620c:	2104      	movs	r1, #4
    620e:	6878      	ldr	r0, [r7, #4]
    6210:	4b02      	ldr	r3, [pc, #8]	; (621c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6212:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6214:	bf00      	nop
    6216:	3708      	adds	r7, #8
    6218:	46bd      	mov	sp, r7
    621a:	bd80      	pop	{r7, pc}
    621c:	00005e81 	.word	0x00005e81

00006220 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6220:	b580      	push	{r7, lr}
    6222:	b082      	sub	sp, #8
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
    6228:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	683a      	ldr	r2, [r7, #0]
    622e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6230:	2104      	movs	r1, #4
    6232:	6878      	ldr	r0, [r7, #4]
    6234:	4b02      	ldr	r3, [pc, #8]	; (6240 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6236:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6238:	bf00      	nop
    623a:	3708      	adds	r7, #8
    623c:	46bd      	mov	sp, r7
    623e:	bd80      	pop	{r7, pc}
    6240:	00005e81 	.word	0x00005e81

00006244 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6244:	b580      	push	{r7, lr}
    6246:	b082      	sub	sp, #8
    6248:	af00      	add	r7, sp, #0
    624a:	6078      	str	r0, [r7, #4]
    624c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	683a      	ldr	r2, [r7, #0]
    6252:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6254:	2117      	movs	r1, #23
    6256:	6878      	ldr	r0, [r7, #4]
    6258:	4b02      	ldr	r3, [pc, #8]	; (6264 <hri_sercomspi_write_CTRLB_reg+0x20>)
    625a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    625c:	bf00      	nop
    625e:	3708      	adds	r7, #8
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	00005ecd 	.word	0x00005ecd

00006268 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6268:	b480      	push	{r7}
    626a:	b083      	sub	sp, #12
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
    6270:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	683a      	ldr	r2, [r7, #0]
    6276:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6278:	bf00      	nop
    627a:	370c      	adds	r7, #12
    627c:	46bd      	mov	sp, r7
    627e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6282:	4770      	bx	lr

00006284 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6284:	b480      	push	{r7}
    6286:	b083      	sub	sp, #12
    6288:	af00      	add	r7, sp, #0
    628a:	6078      	str	r0, [r7, #4]
    628c:	460b      	mov	r3, r1
    628e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	78fa      	ldrb	r2, [r7, #3]
    6294:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6296:	bf00      	nop
    6298:	370c      	adds	r7, #12
    629a:	46bd      	mov	sp, r7
    629c:	f85d 7b04 	ldr.w	r7, [sp], #4
    62a0:	4770      	bx	lr
	...

000062a4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    62a4:	b580      	push	{r7, lr}
    62a6:	b084      	sub	sp, #16
    62a8:	af00      	add	r7, sp, #0
    62aa:	6078      	str	r0, [r7, #4]
    62ac:	460b      	mov	r3, r1
    62ae:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    62b4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    62b6:	68fb      	ldr	r3, [r7, #12]
    62b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    62bc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    62be:	78fb      	ldrb	r3, [r7, #3]
    62c0:	039b      	lsls	r3, r3, #14
    62c2:	461a      	mov	r2, r3
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	4313      	orrs	r3, r2
    62c8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	68fa      	ldr	r2, [r7, #12]
    62ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62d0:	2104      	movs	r1, #4
    62d2:	6878      	ldr	r0, [r7, #4]
    62d4:	4b02      	ldr	r3, [pc, #8]	; (62e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    62d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62d8:	bf00      	nop
    62da:	3710      	adds	r7, #16
    62dc:	46bd      	mov	sp, r7
    62de:	bd80      	pop	{r7, pc}
    62e0:	00005e81 	.word	0x00005e81

000062e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    62e4:	b580      	push	{r7, lr}
    62e6:	b082      	sub	sp, #8
    62e8:	af00      	add	r7, sp, #0
    62ea:	6078      	str	r0, [r7, #4]
    62ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    62ee:	687b      	ldr	r3, [r7, #4]
    62f0:	683a      	ldr	r2, [r7, #0]
    62f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    62f4:	2104      	movs	r1, #4
    62f6:	6878      	ldr	r0, [r7, #4]
    62f8:	4b02      	ldr	r3, [pc, #8]	; (6304 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    62fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62fc:	bf00      	nop
    62fe:	3708      	adds	r7, #8
    6300:	46bd      	mov	sp, r7
    6302:	bd80      	pop	{r7, pc}
    6304:	00005e81 	.word	0x00005e81

00006308 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6308:	b580      	push	{r7, lr}
    630a:	b082      	sub	sp, #8
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6310:	2104      	movs	r1, #4
    6312:	6878      	ldr	r0, [r7, #4]
    6314:	4b03      	ldr	r3, [pc, #12]	; (6324 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6316:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    631c:	4618      	mov	r0, r3
    631e:	3708      	adds	r7, #8
    6320:	46bd      	mov	sp, r7
    6322:	bd80      	pop	{r7, pc}
    6324:	00005e81 	.word	0x00005e81

00006328 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6328:	b480      	push	{r7}
    632a:	b083      	sub	sp, #12
    632c:	af00      	add	r7, sp, #0
    632e:	6078      	str	r0, [r7, #4]
    6330:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	683a      	ldr	r2, [r7, #0]
    6336:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6338:	bf00      	nop
    633a:	370c      	adds	r7, #12
    633c:	46bd      	mov	sp, r7
    633e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6342:	4770      	bx	lr

00006344 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6344:	b580      	push	{r7, lr}
    6346:	b082      	sub	sp, #8
    6348:	af00      	add	r7, sp, #0
    634a:	6078      	str	r0, [r7, #4]
    634c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	683a      	ldr	r2, [r7, #0]
    6352:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6354:	2104      	movs	r1, #4
    6356:	6878      	ldr	r0, [r7, #4]
    6358:	4b02      	ldr	r3, [pc, #8]	; (6364 <hri_sercomi2cm_write_DATA_reg+0x20>)
    635a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    635c:	bf00      	nop
    635e:	3708      	adds	r7, #8
    6360:	46bd      	mov	sp, r7
    6362:	bd80      	pop	{r7, pc}
    6364:	00005e81 	.word	0x00005e81

00006368 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6368:	b580      	push	{r7, lr}
    636a:	b082      	sub	sp, #8
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6370:	2104      	movs	r1, #4
    6372:	6878      	ldr	r0, [r7, #4]
    6374:	4b03      	ldr	r3, [pc, #12]	; (6384 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6376:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    637c:	4618      	mov	r0, r3
    637e:	3708      	adds	r7, #8
    6380:	46bd      	mov	sp, r7
    6382:	bd80      	pop	{r7, pc}
    6384:	00005e81 	.word	0x00005e81

00006388 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6388:	b480      	push	{r7}
    638a:	b083      	sub	sp, #12
    638c:	af00      	add	r7, sp, #0
    638e:	6078      	str	r0, [r7, #4]
    6390:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	683a      	ldr	r2, [r7, #0]
    6396:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6398:	bf00      	nop
    639a:	370c      	adds	r7, #12
    639c:	46bd      	mov	sp, r7
    639e:	f85d 7b04 	ldr.w	r7, [sp], #4
    63a2:	4770      	bx	lr

000063a4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    63a4:	b480      	push	{r7}
    63a6:	b083      	sub	sp, #12
    63a8:	af00      	add	r7, sp, #0
    63aa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    63b0:	4618      	mov	r0, r3
    63b2:	370c      	adds	r7, #12
    63b4:	46bd      	mov	sp, r7
    63b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ba:	4770      	bx	lr

000063bc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    63bc:	b480      	push	{r7}
    63be:	b083      	sub	sp, #12
    63c0:	af00      	add	r7, sp, #0
    63c2:	6078      	str	r0, [r7, #4]
    63c4:	460b      	mov	r3, r1
    63c6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	78fa      	ldrb	r2, [r7, #3]
    63cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63d0:	bf00      	nop
    63d2:	370c      	adds	r7, #12
    63d4:	46bd      	mov	sp, r7
    63d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    63da:	4770      	bx	lr

000063dc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    63dc:	b480      	push	{r7}
    63de:	b083      	sub	sp, #12
    63e0:	af00      	add	r7, sp, #0
    63e2:	6078      	str	r0, [r7, #4]
    63e4:	460b      	mov	r3, r1
    63e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	887a      	ldrh	r2, [r7, #2]
    63ec:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63ee:	bf00      	nop
    63f0:	370c      	adds	r7, #12
    63f2:	46bd      	mov	sp, r7
    63f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63f8:	4770      	bx	lr
	...

000063fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    63fc:	b580      	push	{r7, lr}
    63fe:	b082      	sub	sp, #8
    6400:	af00      	add	r7, sp, #0
    6402:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6404:	2104      	movs	r1, #4
    6406:	6878      	ldr	r0, [r7, #4]
    6408:	4b06      	ldr	r3, [pc, #24]	; (6424 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    640a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	8b5b      	ldrh	r3, [r3, #26]
    6410:	b29b      	uxth	r3, r3
    6412:	091b      	lsrs	r3, r3, #4
    6414:	b29b      	uxth	r3, r3
    6416:	f003 0303 	and.w	r3, r3, #3
    641a:	b29b      	uxth	r3, r3
}
    641c:	4618      	mov	r0, r3
    641e:	3708      	adds	r7, #8
    6420:	46bd      	mov	sp, r7
    6422:	bd80      	pop	{r7, pc}
    6424:	00005e81 	.word	0x00005e81

00006428 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6428:	b580      	push	{r7, lr}
    642a:	b082      	sub	sp, #8
    642c:	af00      	add	r7, sp, #0
    642e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6430:	2104      	movs	r1, #4
    6432:	6878      	ldr	r0, [r7, #4]
    6434:	4b04      	ldr	r3, [pc, #16]	; (6448 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6436:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6438:	687b      	ldr	r3, [r7, #4]
    643a:	8b5b      	ldrh	r3, [r3, #26]
    643c:	b29b      	uxth	r3, r3
}
    643e:	4618      	mov	r0, r3
    6440:	3708      	adds	r7, #8
    6442:	46bd      	mov	sp, r7
    6444:	bd80      	pop	{r7, pc}
    6446:	bf00      	nop
    6448:	00005e81 	.word	0x00005e81

0000644c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    644c:	b580      	push	{r7, lr}
    644e:	b082      	sub	sp, #8
    6450:	af00      	add	r7, sp, #0
    6452:	6078      	str	r0, [r7, #4]
    6454:	460b      	mov	r3, r1
    6456:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	887a      	ldrh	r2, [r7, #2]
    645c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    645e:	2104      	movs	r1, #4
    6460:	6878      	ldr	r0, [r7, #4]
    6462:	4b03      	ldr	r3, [pc, #12]	; (6470 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6464:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6466:	bf00      	nop
    6468:	3708      	adds	r7, #8
    646a:	46bd      	mov	sp, r7
    646c:	bd80      	pop	{r7, pc}
    646e:	bf00      	nop
    6470:	00005e81 	.word	0x00005e81

00006474 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6474:	b4b0      	push	{r4, r5, r7}
    6476:	b08d      	sub	sp, #52	; 0x34
    6478:	af00      	add	r7, sp, #0
    647a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    647c:	4b13      	ldr	r3, [pc, #76]	; (64cc <_sercom_get_hardware_index+0x58>)
    647e:	f107 040c 	add.w	r4, r7, #12
    6482:	461d      	mov	r5, r3
    6484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    648c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6490:	2300      	movs	r3, #0
    6492:	62fb      	str	r3, [r7, #44]	; 0x2c
    6494:	e010      	b.n	64b8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6498:	009b      	lsls	r3, r3, #2
    649a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    649e:	4413      	add	r3, r2
    64a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    64a4:	461a      	mov	r2, r3
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	429a      	cmp	r2, r3
    64aa:	d102      	bne.n	64b2 <_sercom_get_hardware_index+0x3e>
			return i;
    64ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64ae:	b2db      	uxtb	r3, r3
    64b0:	e006      	b.n	64c0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    64b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64b4:	3301      	adds	r3, #1
    64b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    64b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64ba:	2b07      	cmp	r3, #7
    64bc:	d9eb      	bls.n	6496 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    64be:	2300      	movs	r3, #0
}
    64c0:	4618      	mov	r0, r3
    64c2:	3734      	adds	r7, #52	; 0x34
    64c4:	46bd      	mov	sp, r7
    64c6:	bcb0      	pop	{r4, r5, r7}
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	0000f2cc 	.word	0x0000f2cc

000064d0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b084      	sub	sp, #16
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    64d8:	6878      	ldr	r0, [r7, #4]
    64da:	4b13      	ldr	r3, [pc, #76]	; (6528 <_get_i2cm_index+0x58>)
    64dc:	4798      	blx	r3
    64de:	4603      	mov	r3, r0
    64e0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    64e2:	2300      	movs	r3, #0
    64e4:	73fb      	strb	r3, [r7, #15]
    64e6:	e010      	b.n	650a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    64e8:	7bfa      	ldrb	r2, [r7, #15]
    64ea:	4910      	ldr	r1, [pc, #64]	; (652c <_get_i2cm_index+0x5c>)
    64ec:	4613      	mov	r3, r2
    64ee:	005b      	lsls	r3, r3, #1
    64f0:	4413      	add	r3, r2
    64f2:	00db      	lsls	r3, r3, #3
    64f4:	440b      	add	r3, r1
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	7bba      	ldrb	r2, [r7, #14]
    64fa:	429a      	cmp	r2, r3
    64fc:	d102      	bne.n	6504 <_get_i2cm_index+0x34>
			return i;
    64fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6502:	e00d      	b.n	6520 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6504:	7bfb      	ldrb	r3, [r7, #15]
    6506:	3301      	adds	r3, #1
    6508:	73fb      	strb	r3, [r7, #15]
    650a:	7bfb      	ldrb	r3, [r7, #15]
    650c:	2b02      	cmp	r3, #2
    650e:	d9eb      	bls.n	64e8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6510:	f240 32a6 	movw	r2, #934	; 0x3a6
    6514:	4906      	ldr	r1, [pc, #24]	; (6530 <_get_i2cm_index+0x60>)
    6516:	2000      	movs	r0, #0
    6518:	4b06      	ldr	r3, [pc, #24]	; (6534 <_get_i2cm_index+0x64>)
    651a:	4798      	blx	r3
	return -1;
    651c:	f04f 33ff 	mov.w	r3, #4294967295
}
    6520:	4618      	mov	r0, r3
    6522:	3710      	adds	r7, #16
    6524:	46bd      	mov	sp, r7
    6526:	bd80      	pop	{r7, pc}
    6528:	00006475 	.word	0x00006475
    652c:	20000018 	.word	0x20000018
    6530:	0000f2b0 	.word	0x0000f2b0
    6534:	0000396d 	.word	0x0000396d

00006538 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6538:	b580      	push	{r7, lr}
    653a:	b082      	sub	sp, #8
    653c:	af00      	add	r7, sp, #0
    653e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6540:	2103      	movs	r1, #3
    6542:	6878      	ldr	r0, [r7, #4]
    6544:	4b02      	ldr	r3, [pc, #8]	; (6550 <_sercom_i2c_send_stop+0x18>)
    6546:	4798      	blx	r3
}
    6548:	bf00      	nop
    654a:	3708      	adds	r7, #8
    654c:	46bd      	mov	sp, r7
    654e:	bd80      	pop	{r7, pc}
    6550:	000061f1 	.word	0x000061f1

00006554 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6554:	b590      	push	{r4, r7, lr}
    6556:	b087      	sub	sp, #28
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6560:	68f8      	ldr	r0, [r7, #12]
    6562:	4b7d      	ldr	r3, [pc, #500]	; (6758 <_sercom_i2c_sync_analyse_flags+0x204>)
    6564:	4798      	blx	r3
    6566:	4603      	mov	r3, r0
    6568:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    656a:	68f8      	ldr	r0, [r7, #12]
    656c:	4b7b      	ldr	r3, [pc, #492]	; (675c <_sercom_i2c_sync_analyse_flags+0x208>)
    656e:	4798      	blx	r3
    6570:	4603      	mov	r3, r0
    6572:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6574:	68bb      	ldr	r3, [r7, #8]
    6576:	f003 0301 	and.w	r3, r3, #1
    657a:	2b00      	cmp	r3, #0
    657c:	f000 8095 	beq.w	66aa <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6580:	8a7b      	ldrh	r3, [r7, #18]
    6582:	f003 0302 	and.w	r3, r3, #2
    6586:	2b00      	cmp	r3, #0
    6588:	d01d      	beq.n	65c6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    658a:	68f8      	ldr	r0, [r7, #12]
    658c:	4b74      	ldr	r3, [pc, #464]	; (6760 <_sercom_i2c_sync_analyse_flags+0x20c>)
    658e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	885b      	ldrh	r3, [r3, #2]
    6594:	b29b      	uxth	r3, r3
    6596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    659a:	b29a      	uxth	r2, r3
    659c:	687b      	ldr	r3, [r7, #4]
    659e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	885b      	ldrh	r3, [r3, #2]
    65a4:	b29b      	uxth	r3, r3
    65a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    65aa:	b29a      	uxth	r2, r3
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    65b0:	8a7b      	ldrh	r3, [r7, #18]
    65b2:	f003 0301 	and.w	r3, r3, #1
    65b6:	2b00      	cmp	r3, #0
    65b8:	d002      	beq.n	65c0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    65ba:	f06f 0304 	mvn.w	r3, #4
    65be:	e0c6      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    65c0:	f06f 0303 	mvn.w	r3, #3
    65c4:	e0c3      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    65c6:	8a7b      	ldrh	r3, [r7, #18]
    65c8:	f003 0304 	and.w	r3, r3, #4
    65cc:	2b00      	cmp	r3, #0
    65ce:	d01f      	beq.n	6610 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    65d0:	687b      	ldr	r3, [r7, #4]
    65d2:	685b      	ldr	r3, [r3, #4]
    65d4:	2b00      	cmp	r3, #0
    65d6:	dd07      	ble.n	65e8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	885b      	ldrh	r3, [r3, #2]
    65dc:	b29b      	uxth	r3, r3
    65de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    65e2:	b29a      	uxth	r2, r3
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	885b      	ldrh	r3, [r3, #2]
    65ec:	b29b      	uxth	r3, r3
    65ee:	b21b      	sxth	r3, r3
    65f0:	2b00      	cmp	r3, #0
    65f2:	da02      	bge.n	65fa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    65f4:	68f8      	ldr	r0, [r7, #12]
    65f6:	4b5b      	ldr	r3, [pc, #364]	; (6764 <_sercom_i2c_sync_analyse_flags+0x210>)
    65f8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	885b      	ldrh	r3, [r3, #2]
    65fe:	b29b      	uxth	r3, r3
    6600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6604:	b29a      	uxth	r2, r3
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    660a:	f06f 0301 	mvn.w	r3, #1
    660e:	e09e      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	885b      	ldrh	r3, [r3, #2]
    6614:	b29b      	uxth	r3, r3
    6616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    661a:	2b00      	cmp	r3, #0
    661c:	d01c      	beq.n	6658 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    661e:	687b      	ldr	r3, [r7, #4]
    6620:	881b      	ldrh	r3, [r3, #0]
    6622:	121b      	asrs	r3, r3, #8
    6624:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6626:	f003 0406 	and.w	r4, r3, #6
    662a:	68f8      	ldr	r0, [r7, #12]
    662c:	4b4e      	ldr	r3, [pc, #312]	; (6768 <_sercom_i2c_sync_analyse_flags+0x214>)
    662e:	4798      	blx	r3
    6630:	4603      	mov	r3, r0
    6632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6636:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6638:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    663c:	4619      	mov	r1, r3
    663e:	68f8      	ldr	r0, [r7, #12]
    6640:	4b4a      	ldr	r3, [pc, #296]	; (676c <_sercom_i2c_sync_analyse_flags+0x218>)
    6642:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	885b      	ldrh	r3, [r3, #2]
    6648:	b29b      	uxth	r3, r3
    664a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    664e:	b29a      	uxth	r2, r3
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6654:	2300      	movs	r3, #0
    6656:	e07a      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	685b      	ldr	r3, [r3, #4]
    665c:	2b00      	cmp	r3, #0
    665e:	d111      	bne.n	6684 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	885b      	ldrh	r3, [r3, #2]
    6664:	b29b      	uxth	r3, r3
    6666:	b21b      	sxth	r3, r3
    6668:	2b00      	cmp	r3, #0
    666a:	da02      	bge.n	6672 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    666c:	68f8      	ldr	r0, [r7, #12]
    666e:	4b3d      	ldr	r3, [pc, #244]	; (6764 <_sercom_i2c_sync_analyse_flags+0x210>)
    6670:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	885b      	ldrh	r3, [r3, #2]
    6676:	b29b      	uxth	r3, r3
    6678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    667c:	b29a      	uxth	r2, r3
    667e:	687b      	ldr	r3, [r7, #4]
    6680:	805a      	strh	r2, [r3, #2]
    6682:	e010      	b.n	66a6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6684:	687b      	ldr	r3, [r7, #4]
    6686:	689b      	ldr	r3, [r3, #8]
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	4619      	mov	r1, r3
    668c:	68f8      	ldr	r0, [r7, #12]
    668e:	4b38      	ldr	r3, [pc, #224]	; (6770 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6690:	4798      	blx	r3
				msg->buffer++;
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	689b      	ldr	r3, [r3, #8]
    6696:	1c5a      	adds	r2, r3, #1
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	609a      	str	r2, [r3, #8]
				msg->len--;
    669c:	687b      	ldr	r3, [r7, #4]
    669e:	685b      	ldr	r3, [r3, #4]
    66a0:	1e5a      	subs	r2, r3, #1
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    66a6:	2300      	movs	r3, #0
    66a8:	e051      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    66aa:	68bb      	ldr	r3, [r7, #8]
    66ac:	f003 0302 	and.w	r3, r3, #2
    66b0:	2b00      	cmp	r3, #0
    66b2:	d04b      	beq.n	674c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	685b      	ldr	r3, [r3, #4]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d041      	beq.n	6740 <_sercom_i2c_sync_analyse_flags+0x1ec>
    66bc:	8a7b      	ldrh	r3, [r7, #18]
    66be:	f003 0304 	and.w	r3, r3, #4
    66c2:	2b00      	cmp	r3, #0
    66c4:	d13c      	bne.n	6740 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    66c6:	687b      	ldr	r3, [r7, #4]
    66c8:	685b      	ldr	r3, [r3, #4]
    66ca:	1e5a      	subs	r2, r3, #1
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	685b      	ldr	r3, [r3, #4]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d102      	bne.n	66de <_sercom_i2c_sync_analyse_flags+0x18a>
    66d8:	697b      	ldr	r3, [r7, #20]
    66da:	2b00      	cmp	r3, #0
    66dc:	d006      	beq.n	66ec <_sercom_i2c_sync_analyse_flags+0x198>
    66de:	687b      	ldr	r3, [r7, #4]
    66e0:	685b      	ldr	r3, [r3, #4]
    66e2:	2b01      	cmp	r3, #1
    66e4:	d105      	bne.n	66f2 <_sercom_i2c_sync_analyse_flags+0x19e>
    66e6:	697b      	ldr	r3, [r7, #20]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d002      	beq.n	66f2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    66ec:	68f8      	ldr	r0, [r7, #12]
    66ee:	4b21      	ldr	r3, [pc, #132]	; (6774 <_sercom_i2c_sync_analyse_flags+0x220>)
    66f0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	685b      	ldr	r3, [r3, #4]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d113      	bne.n	6722 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	885b      	ldrh	r3, [r3, #2]
    66fe:	b29b      	uxth	r3, r3
    6700:	b21b      	sxth	r3, r3
    6702:	2b00      	cmp	r3, #0
    6704:	da05      	bge.n	6712 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6706:	68f8      	ldr	r0, [r7, #12]
    6708:	4b1b      	ldr	r3, [pc, #108]	; (6778 <_sercom_i2c_sync_analyse_flags+0x224>)
    670a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    670c:	68f8      	ldr	r0, [r7, #12]
    670e:	4b15      	ldr	r3, [pc, #84]	; (6764 <_sercom_i2c_sync_analyse_flags+0x210>)
    6710:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	885b      	ldrh	r3, [r3, #2]
    6716:	b29b      	uxth	r3, r3
    6718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    671c:	b29a      	uxth	r2, r3
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	689c      	ldr	r4, [r3, #8]
    6726:	1c62      	adds	r2, r4, #1
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	609a      	str	r2, [r3, #8]
    672c:	68f8      	ldr	r0, [r7, #12]
    672e:	4b13      	ldr	r3, [pc, #76]	; (677c <_sercom_i2c_sync_analyse_flags+0x228>)
    6730:	4798      	blx	r3
    6732:	4603      	mov	r3, r0
    6734:	b2db      	uxtb	r3, r3
    6736:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6738:	68f8      	ldr	r0, [r7, #12]
    673a:	4b11      	ldr	r3, [pc, #68]	; (6780 <_sercom_i2c_sync_analyse_flags+0x22c>)
    673c:	4798      	blx	r3
    673e:	e005      	b.n	674c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6740:	68f8      	ldr	r0, [r7, #12]
    6742:	4b0f      	ldr	r3, [pc, #60]	; (6780 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6744:	4798      	blx	r3
			return I2C_NACK;
    6746:	f06f 0301 	mvn.w	r3, #1
    674a:	e000      	b.n	674e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    674c:	2300      	movs	r3, #0
}
    674e:	4618      	mov	r0, r3
    6750:	371c      	adds	r7, #28
    6752:	46bd      	mov	sp, r7
    6754:	bd90      	pop	{r4, r7, pc}
    6756:	bf00      	nop
    6758:	00006019 	.word	0x00006019
    675c:	00006429 	.word	0x00006429
    6760:	00005f19 	.word	0x00005f19
    6764:	00006539 	.word	0x00006539
    6768:	00006309 	.word	0x00006309
    676c:	000062e5 	.word	0x000062e5
    6770:	00006345 	.word	0x00006345
    6774:	000061a1 	.word	0x000061a1
    6778:	00006179 	.word	0x00006179
    677c:	00006369 	.word	0x00006369
    6780:	00005f33 	.word	0x00005f33

00006784 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6784:	b580      	push	{r7, lr}
    6786:	b082      	sub	sp, #8
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	2b00      	cmp	r3, #0
    6792:	bf14      	ite	ne
    6794:	2301      	movne	r3, #1
    6796:	2300      	moveq	r3, #0
    6798:	b2db      	uxtb	r3, r3
    679a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    679e:	4908      	ldr	r1, [pc, #32]	; (67c0 <_i2c_m_sync_init+0x3c>)
    67a0:	4618      	mov	r0, r3
    67a2:	4b08      	ldr	r3, [pc, #32]	; (67c4 <_i2c_m_sync_init+0x40>)
    67a4:	4798      	blx	r3

	i2c_dev->hw = hw;
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	683a      	ldr	r2, [r7, #0]
    67aa:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	6839      	ldr	r1, [r7, #0]
    67b0:	4618      	mov	r0, r3
    67b2:	4b05      	ldr	r3, [pc, #20]	; (67c8 <_i2c_m_sync_init+0x44>)
    67b4:	4798      	blx	r3
    67b6:	4603      	mov	r3, r0
}
    67b8:	4618      	mov	r0, r3
    67ba:	3708      	adds	r7, #8
    67bc:	46bd      	mov	sp, r7
    67be:	bd80      	pop	{r7, pc}
    67c0:	0000f2b0 	.word	0x0000f2b0
    67c4:	0000396d 	.word	0x0000396d
    67c8:	00006b9d 	.word	0x00006b9d

000067cc <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b082      	sub	sp, #8
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	2b00      	cmp	r3, #0
    67d8:	bf14      	ite	ne
    67da:	2301      	movne	r3, #1
    67dc:	2300      	moveq	r3, #0
    67de:	b2db      	uxtb	r3, r3
    67e0:	f240 5235 	movw	r2, #1333	; 0x535
    67e4:	4906      	ldr	r1, [pc, #24]	; (6800 <_i2c_m_sync_enable+0x34>)
    67e6:	4618      	mov	r0, r3
    67e8:	4b06      	ldr	r3, [pc, #24]	; (6804 <_i2c_m_sync_enable+0x38>)
    67ea:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	691b      	ldr	r3, [r3, #16]
    67f0:	4618      	mov	r0, r3
    67f2:	4b05      	ldr	r3, [pc, #20]	; (6808 <_i2c_m_sync_enable+0x3c>)
    67f4:	4798      	blx	r3
    67f6:	4603      	mov	r3, r0
}
    67f8:	4618      	mov	r0, r3
    67fa:	3708      	adds	r7, #8
    67fc:	46bd      	mov	sp, r7
    67fe:	bd80      	pop	{r7, pc}
    6800:	0000f2b0 	.word	0x0000f2b0
    6804:	0000396d 	.word	0x0000396d
    6808:	00006b11 	.word	0x00006b11

0000680c <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    680c:	b580      	push	{r7, lr}
    680e:	b084      	sub	sp, #16
    6810:	af00      	add	r7, sp, #0
    6812:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    6814:	687b      	ldr	r3, [r7, #4]
    6816:	691b      	ldr	r3, [r3, #16]
    6818:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	2b00      	cmp	r3, #0
    681e:	bf14      	ite	ne
    6820:	2301      	movne	r3, #1
    6822:	2300      	moveq	r3, #0
    6824:	b2db      	uxtb	r3, r3
    6826:	f240 5243 	movw	r2, #1347	; 0x543
    682a:	490c      	ldr	r1, [pc, #48]	; (685c <_i2c_m_sync_disable+0x50>)
    682c:	4618      	mov	r0, r3
    682e:	4b0c      	ldr	r3, [pc, #48]	; (6860 <_i2c_m_sync_disable+0x54>)
    6830:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	691b      	ldr	r3, [r3, #16]
    6836:	2b00      	cmp	r3, #0
    6838:	bf14      	ite	ne
    683a:	2301      	movne	r3, #1
    683c:	2300      	moveq	r3, #0
    683e:	b2db      	uxtb	r3, r3
    6840:	f240 5244 	movw	r2, #1348	; 0x544
    6844:	4905      	ldr	r1, [pc, #20]	; (685c <_i2c_m_sync_disable+0x50>)
    6846:	4618      	mov	r0, r3
    6848:	4b05      	ldr	r3, [pc, #20]	; (6860 <_i2c_m_sync_disable+0x54>)
    684a:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    684c:	68f8      	ldr	r0, [r7, #12]
    684e:	4b05      	ldr	r3, [pc, #20]	; (6864 <_i2c_m_sync_disable+0x58>)
    6850:	4798      	blx	r3

	return ERR_NONE;
    6852:	2300      	movs	r3, #0
}
    6854:	4618      	mov	r0, r3
    6856:	3710      	adds	r7, #16
    6858:	46bd      	mov	sp, r7
    685a:	bd80      	pop	{r7, pc}
    685c:	0000f2b0 	.word	0x0000f2b0
    6860:	0000396d 	.word	0x0000396d
    6864:	00005ff1 	.word	0x00005ff1

00006868 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6868:	b580      	push	{r7, lr}
    686a:	b084      	sub	sp, #16
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
    6870:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6872:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6876:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	691b      	ldr	r3, [r3, #16]
    687c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    687e:	68b8      	ldr	r0, [r7, #8]
    6880:	4b0f      	ldr	r3, [pc, #60]	; (68c0 <_sercom_i2c_sync_wait_bus+0x58>)
    6882:	4798      	blx	r3
    6884:	4603      	mov	r3, r0
    6886:	461a      	mov	r2, r3
    6888:	683b      	ldr	r3, [r7, #0]
    688a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    688c:	68fb      	ldr	r3, [r7, #12]
    688e:	1e5a      	subs	r2, r3, #1
    6890:	60fa      	str	r2, [r7, #12]
    6892:	2b00      	cmp	r3, #0
    6894:	d102      	bne.n	689c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6896:	f06f 0304 	mvn.w	r3, #4
    689a:	e00c      	b.n	68b6 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    689c:	683b      	ldr	r3, [r7, #0]
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	f003 0301 	and.w	r3, r3, #1
    68a4:	2b00      	cmp	r3, #0
    68a6:	d105      	bne.n	68b4 <_sercom_i2c_sync_wait_bus+0x4c>
    68a8:	683b      	ldr	r3, [r7, #0]
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	f003 0302 	and.w	r3, r3, #2
    68b0:	2b00      	cmp	r3, #0
    68b2:	d0e4      	beq.n	687e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    68b4:	2300      	movs	r3, #0
}
    68b6:	4618      	mov	r0, r3
    68b8:	3710      	adds	r7, #16
    68ba:	46bd      	mov	sp, r7
    68bc:	bd80      	pop	{r7, pc}
    68be:	bf00      	nop
    68c0:	00005f4d 	.word	0x00005f4d

000068c4 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    68c4:	b590      	push	{r4, r7, lr}
    68c6:	b087      	sub	sp, #28
    68c8:	af00      	add	r7, sp, #0
    68ca:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	691b      	ldr	r3, [r3, #16]
    68d0:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    68d6:	6978      	ldr	r0, [r7, #20]
    68d8:	4b39      	ldr	r3, [pc, #228]	; (69c0 <_sercom_i2c_sync_send_address+0xfc>)
    68da:	4798      	blx	r3
    68dc:	4603      	mov	r3, r0
    68de:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	2b00      	cmp	r3, #0
    68e4:	bf14      	ite	ne
    68e6:	2301      	movne	r3, #1
    68e8:	2300      	moveq	r3, #0
    68ea:	b2db      	uxtb	r3, r3
    68ec:	f240 52a5 	movw	r2, #1445	; 0x5a5
    68f0:	4934      	ldr	r1, [pc, #208]	; (69c4 <_sercom_i2c_sync_send_address+0x100>)
    68f2:	4618      	mov	r0, r3
    68f4:	4b34      	ldr	r3, [pc, #208]	; (69c8 <_sercom_i2c_sync_send_address+0x104>)
    68f6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    68f8:	693b      	ldr	r3, [r7, #16]
    68fa:	685b      	ldr	r3, [r3, #4]
    68fc:	2b01      	cmp	r3, #1
    68fe:	d106      	bne.n	690e <_sercom_i2c_sync_send_address+0x4a>
    6900:	68fb      	ldr	r3, [r7, #12]
    6902:	2b00      	cmp	r3, #0
    6904:	d003      	beq.n	690e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6906:	6978      	ldr	r0, [r7, #20]
    6908:	4b30      	ldr	r3, [pc, #192]	; (69cc <_sercom_i2c_sync_send_address+0x108>)
    690a:	4798      	blx	r3
    690c:	e002      	b.n	6914 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    690e:	6978      	ldr	r0, [r7, #20]
    6910:	4b2f      	ldr	r3, [pc, #188]	; (69d0 <_sercom_i2c_sync_send_address+0x10c>)
    6912:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6914:	693b      	ldr	r3, [r7, #16]
    6916:	881b      	ldrh	r3, [r3, #0]
    6918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    691c:	2b00      	cmp	r3, #0
    691e:	d022      	beq.n	6966 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6920:	693b      	ldr	r3, [r7, #16]
    6922:	885b      	ldrh	r3, [r3, #2]
    6924:	b29b      	uxth	r3, r3
    6926:	f003 0301 	and.w	r3, r3, #1
    692a:	2b00      	cmp	r3, #0
    692c:	d007      	beq.n	693e <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    692e:	693b      	ldr	r3, [r7, #16]
    6930:	885b      	ldrh	r3, [r3, #2]
    6932:	b29b      	uxth	r3, r3
    6934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6938:	b29a      	uxth	r2, r3
    693a:	693b      	ldr	r3, [r7, #16]
    693c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    693e:	693b      	ldr	r3, [r7, #16]
    6940:	881b      	ldrh	r3, [r3, #0]
    6942:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6944:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6948:	401c      	ands	r4, r3
    694a:	6978      	ldr	r0, [r7, #20]
    694c:	4b21      	ldr	r3, [pc, #132]	; (69d4 <_sercom_i2c_sync_send_address+0x110>)
    694e:	4798      	blx	r3
    6950:	4603      	mov	r3, r0
    6952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6956:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    695c:	4619      	mov	r1, r3
    695e:	6978      	ldr	r0, [r7, #20]
    6960:	4b1d      	ldr	r3, [pc, #116]	; (69d8 <_sercom_i2c_sync_send_address+0x114>)
    6962:	4798      	blx	r3
    6964:	e01a      	b.n	699c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6966:	693b      	ldr	r3, [r7, #16]
    6968:	881b      	ldrh	r3, [r3, #0]
    696a:	005b      	lsls	r3, r3, #1
    696c:	b2db      	uxtb	r3, r3
    696e:	693a      	ldr	r2, [r7, #16]
    6970:	8852      	ldrh	r2, [r2, #2]
    6972:	b292      	uxth	r2, r2
    6974:	f002 0201 	and.w	r2, r2, #1
    6978:	2a00      	cmp	r2, #0
    697a:	bf14      	ite	ne
    697c:	2201      	movne	r2, #1
    697e:	2200      	moveq	r2, #0
    6980:	b2d2      	uxtb	r2, r2
    6982:	4313      	orrs	r3, r2
    6984:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6986:	6978      	ldr	r0, [r7, #20]
    6988:	4b12      	ldr	r3, [pc, #72]	; (69d4 <_sercom_i2c_sync_send_address+0x110>)
    698a:	4798      	blx	r3
    698c:	4603      	mov	r3, r0
    698e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6992:	4323      	orrs	r3, r4
    6994:	4619      	mov	r1, r3
    6996:	6978      	ldr	r0, [r7, #20]
    6998:	4b0f      	ldr	r3, [pc, #60]	; (69d8 <_sercom_i2c_sync_send_address+0x114>)
    699a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    699c:	f107 0308 	add.w	r3, r7, #8
    69a0:	4619      	mov	r1, r3
    69a2:	6878      	ldr	r0, [r7, #4]
    69a4:	4b0d      	ldr	r3, [pc, #52]	; (69dc <_sercom_i2c_sync_send_address+0x118>)
    69a6:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    69a8:	68bb      	ldr	r3, [r7, #8]
    69aa:	693a      	ldr	r2, [r7, #16]
    69ac:	4619      	mov	r1, r3
    69ae:	6978      	ldr	r0, [r7, #20]
    69b0:	4b0b      	ldr	r3, [pc, #44]	; (69e0 <_sercom_i2c_sync_send_address+0x11c>)
    69b2:	4798      	blx	r3
    69b4:	4603      	mov	r3, r0
}
    69b6:	4618      	mov	r0, r3
    69b8:	371c      	adds	r7, #28
    69ba:	46bd      	mov	sp, r7
    69bc:	bd90      	pop	{r4, r7, pc}
    69be:	bf00      	nop
    69c0:	00006019 	.word	0x00006019
    69c4:	0000f2b0 	.word	0x0000f2b0
    69c8:	0000396d 	.word	0x0000396d
    69cc:	000061a1 	.word	0x000061a1
    69d0:	000061c9 	.word	0x000061c9
    69d4:	00006309 	.word	0x00006309
    69d8:	000062e5 	.word	0x000062e5
    69dc:	00006869 	.word	0x00006869
    69e0:	00006555 	.word	0x00006555

000069e4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b086      	sub	sp, #24
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
    69ec:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	691b      	ldr	r3, [r3, #16]
    69f2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	2b00      	cmp	r3, #0
    69f8:	bf14      	ite	ne
    69fa:	2301      	movne	r3, #1
    69fc:	2300      	moveq	r3, #0
    69fe:	b2db      	uxtb	r3, r3
    6a00:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6a04:	493b      	ldr	r1, [pc, #236]	; (6af4 <_i2c_m_sync_transfer+0x110>)
    6a06:	4618      	mov	r0, r3
    6a08:	4b3b      	ldr	r3, [pc, #236]	; (6af8 <_i2c_m_sync_transfer+0x114>)
    6a0a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	691b      	ldr	r3, [r3, #16]
    6a10:	2b00      	cmp	r3, #0
    6a12:	bf14      	ite	ne
    6a14:	2301      	movne	r3, #1
    6a16:	2300      	moveq	r3, #0
    6a18:	b2db      	uxtb	r3, r3
    6a1a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6a1e:	4935      	ldr	r1, [pc, #212]	; (6af4 <_i2c_m_sync_transfer+0x110>)
    6a20:	4618      	mov	r0, r3
    6a22:	4b35      	ldr	r3, [pc, #212]	; (6af8 <_i2c_m_sync_transfer+0x114>)
    6a24:	4798      	blx	r3
	ASSERT(msg);
    6a26:	683b      	ldr	r3, [r7, #0]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	bf14      	ite	ne
    6a2c:	2301      	movne	r3, #1
    6a2e:	2300      	moveq	r3, #0
    6a30:	b2db      	uxtb	r3, r3
    6a32:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6a36:	492f      	ldr	r1, [pc, #188]	; (6af4 <_i2c_m_sync_transfer+0x110>)
    6a38:	4618      	mov	r0, r3
    6a3a:	4b2f      	ldr	r3, [pc, #188]	; (6af8 <_i2c_m_sync_transfer+0x114>)
    6a3c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	885b      	ldrh	r3, [r3, #2]
    6a42:	b29b      	uxth	r3, r3
    6a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d002      	beq.n	6a52 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6a4c:	f06f 0305 	mvn.w	r3, #5
    6a50:	e04c      	b.n	6aec <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6a52:	683b      	ldr	r3, [r7, #0]
    6a54:	885b      	ldrh	r3, [r3, #2]
    6a56:	b29b      	uxth	r3, r3
    6a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a5c:	b29a      	uxth	r2, r3
    6a5e:	683b      	ldr	r3, [r7, #0]
    6a60:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	683a      	ldr	r2, [r7, #0]
    6a66:	ca07      	ldmia	r2, {r0, r1, r2}
    6a68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6a6c:	6938      	ldr	r0, [r7, #16]
    6a6e:	4b23      	ldr	r3, [pc, #140]	; (6afc <_i2c_m_sync_transfer+0x118>)
    6a70:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6a72:	6878      	ldr	r0, [r7, #4]
    6a74:	4b22      	ldr	r3, [pc, #136]	; (6b00 <_i2c_m_sync_transfer+0x11c>)
    6a76:	4798      	blx	r3
    6a78:	6178      	str	r0, [r7, #20]

	if (ret) {
    6a7a:	697b      	ldr	r3, [r7, #20]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d02d      	beq.n	6adc <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	885b      	ldrh	r3, [r3, #2]
    6a84:	b29b      	uxth	r3, r3
    6a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a8a:	b29a      	uxth	r2, r3
    6a8c:	687b      	ldr	r3, [r7, #4]
    6a8e:	805a      	strh	r2, [r3, #2]

		return ret;
    6a90:	697b      	ldr	r3, [r7, #20]
    6a92:	e02b      	b.n	6aec <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6a94:	f107 030c 	add.w	r3, r7, #12
    6a98:	4619      	mov	r1, r3
    6a9a:	6878      	ldr	r0, [r7, #4]
    6a9c:	4b19      	ldr	r3, [pc, #100]	; (6b04 <_i2c_m_sync_transfer+0x120>)
    6a9e:	4798      	blx	r3
    6aa0:	6178      	str	r0, [r7, #20]

		if (ret) {
    6aa2:	697b      	ldr	r3, [r7, #20]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d012      	beq.n	6ace <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6aa8:	683b      	ldr	r3, [r7, #0]
    6aaa:	885b      	ldrh	r3, [r3, #2]
    6aac:	b29b      	uxth	r3, r3
    6aae:	b21b      	sxth	r3, r3
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	da02      	bge.n	6aba <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6ab4:	6938      	ldr	r0, [r7, #16]
    6ab6:	4b14      	ldr	r3, [pc, #80]	; (6b08 <_i2c_m_sync_transfer+0x124>)
    6ab8:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	885b      	ldrh	r3, [r3, #2]
    6abe:	b29b      	uxth	r3, r3
    6ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ac4:	b29a      	uxth	r2, r3
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	805a      	strh	r2, [r3, #2]

			return ret;
    6aca:	697b      	ldr	r3, [r7, #20]
    6acc:	e00e      	b.n	6aec <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6ace:	68fb      	ldr	r3, [r7, #12]
    6ad0:	687a      	ldr	r2, [r7, #4]
    6ad2:	4619      	mov	r1, r3
    6ad4:	6938      	ldr	r0, [r7, #16]
    6ad6:	4b0d      	ldr	r3, [pc, #52]	; (6b0c <_i2c_m_sync_transfer+0x128>)
    6ad8:	4798      	blx	r3
    6ada:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6adc:	687b      	ldr	r3, [r7, #4]
    6ade:	885b      	ldrh	r3, [r3, #2]
    6ae0:	b29b      	uxth	r3, r3
    6ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d1d4      	bne.n	6a94 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6aea:	697b      	ldr	r3, [r7, #20]
}
    6aec:	4618      	mov	r0, r3
    6aee:	3718      	adds	r7, #24
    6af0:	46bd      	mov	sp, r7
    6af2:	bd80      	pop	{r7, pc}
    6af4:	0000f2b0 	.word	0x0000f2b0
    6af8:	0000396d 	.word	0x0000396d
    6afc:	00006151 	.word	0x00006151
    6b00:	000068c5 	.word	0x000068c5
    6b04:	00006869 	.word	0x00006869
    6b08:	00006539 	.word	0x00006539
    6b0c:	00006555 	.word	0x00006555

00006b10 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6b10:	b580      	push	{r7, lr}
    6b12:	b084      	sub	sp, #16
    6b14:	af00      	add	r7, sp, #0
    6b16:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b1c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6b1e:	2304      	movs	r3, #4
    6b20:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6b22:	687b      	ldr	r3, [r7, #4]
    6b24:	2b00      	cmp	r3, #0
    6b26:	bf14      	ite	ne
    6b28:	2301      	movne	r3, #1
    6b2a:	2300      	moveq	r3, #0
    6b2c:	b2db      	uxtb	r3, r3
    6b2e:	f240 6205 	movw	r2, #1541	; 0x605
    6b32:	4915      	ldr	r1, [pc, #84]	; (6b88 <_i2c_m_enable_implementation+0x78>)
    6b34:	4618      	mov	r0, r3
    6b36:	4b15      	ldr	r3, [pc, #84]	; (6b8c <_i2c_m_enable_implementation+0x7c>)
    6b38:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6b3a:	6878      	ldr	r0, [r7, #4]
    6b3c:	4b14      	ldr	r3, [pc, #80]	; (6b90 <_i2c_m_enable_implementation+0x80>)
    6b3e:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b40:	e016      	b.n	6b70 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6b42:	68fb      	ldr	r3, [r7, #12]
    6b44:	3b01      	subs	r3, #1
    6b46:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6b48:	68fb      	ldr	r3, [r7, #12]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	dc10      	bgt.n	6b70 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6b4e:	68bb      	ldr	r3, [r7, #8]
    6b50:	3b01      	subs	r3, #1
    6b52:	60bb      	str	r3, [r7, #8]
    6b54:	68bb      	ldr	r3, [r7, #8]
    6b56:	2b00      	cmp	r3, #0
    6b58:	d007      	beq.n	6b6a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b5e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6b60:	2110      	movs	r1, #16
    6b62:	6878      	ldr	r0, [r7, #4]
    6b64:	4b0b      	ldr	r3, [pc, #44]	; (6b94 <_i2c_m_enable_implementation+0x84>)
    6b66:	4798      	blx	r3
    6b68:	e002      	b.n	6b70 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6b6a:	f06f 0305 	mvn.w	r3, #5
    6b6e:	e006      	b.n	6b7e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6b70:	6878      	ldr	r0, [r7, #4]
    6b72:	4b09      	ldr	r3, [pc, #36]	; (6b98 <_i2c_m_enable_implementation+0x88>)
    6b74:	4798      	blx	r3
    6b76:	4603      	mov	r3, r0
    6b78:	2b01      	cmp	r3, #1
    6b7a:	d1e2      	bne.n	6b42 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6b7c:	2300      	movs	r3, #0
}
    6b7e:	4618      	mov	r0, r3
    6b80:	3710      	adds	r7, #16
    6b82:	46bd      	mov	sp, r7
    6b84:	bd80      	pop	{r7, pc}
    6b86:	bf00      	nop
    6b88:	0000f2b0 	.word	0x0000f2b0
    6b8c:	0000396d 	.word	0x0000396d
    6b90:	00005fc9 	.word	0x00005fc9
    6b94:	0000644d 	.word	0x0000644d
    6b98:	000063fd 	.word	0x000063fd

00006b9c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b084      	sub	sp, #16
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	6078      	str	r0, [r7, #4]
    6ba4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6ba6:	6838      	ldr	r0, [r7, #0]
    6ba8:	4b42      	ldr	r3, [pc, #264]	; (6cb4 <_i2c_m_sync_init_impl+0x118>)
    6baa:	4798      	blx	r3
    6bac:	4603      	mov	r3, r0
    6bae:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6bb0:	2101      	movs	r1, #1
    6bb2:	6838      	ldr	r0, [r7, #0]
    6bb4:	4b40      	ldr	r3, [pc, #256]	; (6cb8 <_i2c_m_sync_init_impl+0x11c>)
    6bb6:	4798      	blx	r3
    6bb8:	4603      	mov	r3, r0
    6bba:	f083 0301 	eor.w	r3, r3, #1
    6bbe:	b2db      	uxtb	r3, r3
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d020      	beq.n	6c06 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6bc4:	7bfa      	ldrb	r2, [r7, #15]
    6bc6:	493d      	ldr	r1, [pc, #244]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6bc8:	4613      	mov	r3, r2
    6bca:	005b      	lsls	r3, r3, #1
    6bcc:	4413      	add	r3, r2
    6bce:	00db      	lsls	r3, r3, #3
    6bd0:	440b      	add	r3, r1
    6bd2:	3304      	adds	r3, #4
    6bd4:	681b      	ldr	r3, [r3, #0]
    6bd6:	f003 031c 	and.w	r3, r3, #28
    6bda:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6bdc:	2102      	movs	r1, #2
    6bde:	6838      	ldr	r0, [r7, #0]
    6be0:	4b37      	ldr	r3, [pc, #220]	; (6cc0 <_i2c_m_sync_init_impl+0x124>)
    6be2:	4798      	blx	r3
    6be4:	4603      	mov	r3, r0
    6be6:	2b00      	cmp	r3, #0
    6be8:	d006      	beq.n	6bf8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6bea:	6838      	ldr	r0, [r7, #0]
    6bec:	4b35      	ldr	r3, [pc, #212]	; (6cc4 <_i2c_m_sync_init_impl+0x128>)
    6bee:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6bf0:	2102      	movs	r1, #2
    6bf2:	6838      	ldr	r0, [r7, #0]
    6bf4:	4b34      	ldr	r3, [pc, #208]	; (6cc8 <_i2c_m_sync_init_impl+0x12c>)
    6bf6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6bf8:	68bb      	ldr	r3, [r7, #8]
    6bfa:	f043 0301 	orr.w	r3, r3, #1
    6bfe:	4619      	mov	r1, r3
    6c00:	6838      	ldr	r0, [r7, #0]
    6c02:	4b32      	ldr	r3, [pc, #200]	; (6ccc <_i2c_m_sync_init_impl+0x130>)
    6c04:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    6c06:	2101      	movs	r1, #1
    6c08:	6838      	ldr	r0, [r7, #0]
    6c0a:	4b2f      	ldr	r3, [pc, #188]	; (6cc8 <_i2c_m_sync_init_impl+0x12c>)
    6c0c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6c0e:	7bfa      	ldrb	r2, [r7, #15]
    6c10:	492a      	ldr	r1, [pc, #168]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6c12:	4613      	mov	r3, r2
    6c14:	005b      	lsls	r3, r3, #1
    6c16:	4413      	add	r3, r2
    6c18:	00db      	lsls	r3, r3, #3
    6c1a:	440b      	add	r3, r1
    6c1c:	3304      	adds	r3, #4
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	4619      	mov	r1, r3
    6c22:	6838      	ldr	r0, [r7, #0]
    6c24:	4b29      	ldr	r3, [pc, #164]	; (6ccc <_i2c_m_sync_init_impl+0x130>)
    6c26:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6c28:	7bfa      	ldrb	r2, [r7, #15]
    6c2a:	4924      	ldr	r1, [pc, #144]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6c2c:	4613      	mov	r3, r2
    6c2e:	005b      	lsls	r3, r3, #1
    6c30:	4413      	add	r3, r2
    6c32:	00db      	lsls	r3, r3, #3
    6c34:	440b      	add	r3, r1
    6c36:	3308      	adds	r3, #8
    6c38:	681b      	ldr	r3, [r3, #0]
    6c3a:	4619      	mov	r1, r3
    6c3c:	6838      	ldr	r0, [r7, #0]
    6c3e:	4b24      	ldr	r3, [pc, #144]	; (6cd0 <_i2c_m_sync_init_impl+0x134>)
    6c40:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    6c42:	7bfa      	ldrb	r2, [r7, #15]
    6c44:	491d      	ldr	r1, [pc, #116]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6c46:	4613      	mov	r3, r2
    6c48:	005b      	lsls	r3, r3, #1
    6c4a:	4413      	add	r3, r2
    6c4c:	00db      	lsls	r3, r3, #3
    6c4e:	440b      	add	r3, r1
    6c50:	330c      	adds	r3, #12
    6c52:	681b      	ldr	r3, [r3, #0]
    6c54:	4619      	mov	r1, r3
    6c56:	6838      	ldr	r0, [r7, #0]
    6c58:	4b1e      	ldr	r3, [pc, #120]	; (6cd4 <_i2c_m_sync_init_impl+0x138>)
    6c5a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6c5c:	7bfa      	ldrb	r2, [r7, #15]
    6c5e:	4917      	ldr	r1, [pc, #92]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6c60:	4613      	mov	r3, r2
    6c62:	005b      	lsls	r3, r3, #1
    6c64:	4413      	add	r3, r2
    6c66:	00db      	lsls	r3, r3, #3
    6c68:	440b      	add	r3, r1
    6c6a:	3304      	adds	r3, #4
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	0e1b      	lsrs	r3, r3, #24
    6c70:	b29b      	uxth	r3, r3
    6c72:	f003 0303 	and.w	r3, r3, #3
    6c76:	b29a      	uxth	r2, r3
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	899b      	ldrh	r3, [r3, #12]
    6c80:	2b01      	cmp	r3, #1
    6c82:	bf8c      	ite	hi
    6c84:	2301      	movhi	r3, #1
    6c86:	2300      	movls	r3, #0
    6c88:	b2db      	uxtb	r3, r3
    6c8a:	4619      	mov	r1, r3
    6c8c:	6838      	ldr	r0, [r7, #0]
    6c8e:	4b12      	ldr	r3, [pc, #72]	; (6cd8 <_i2c_m_sync_init_impl+0x13c>)
    6c90:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6c92:	7bfa      	ldrb	r2, [r7, #15]
    6c94:	4909      	ldr	r1, [pc, #36]	; (6cbc <_i2c_m_sync_init_impl+0x120>)
    6c96:	4613      	mov	r3, r2
    6c98:	005b      	lsls	r3, r3, #1
    6c9a:	4413      	add	r3, r2
    6c9c:	00db      	lsls	r3, r3, #3
    6c9e:	440b      	add	r3, r1
    6ca0:	3312      	adds	r3, #18
    6ca2:	881a      	ldrh	r2, [r3, #0]
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6ca8:	2300      	movs	r3, #0
}
    6caa:	4618      	mov	r0, r3
    6cac:	3710      	adds	r7, #16
    6cae:	46bd      	mov	sp, r7
    6cb0:	bd80      	pop	{r7, pc}
    6cb2:	bf00      	nop
    6cb4:	000064d1 	.word	0x000064d1
    6cb8:	00005ea5 	.word	0x00005ea5
    6cbc:	20000018 	.word	0x20000018
    6cc0:	00006049 	.word	0x00006049
    6cc4:	00005ff1 	.word	0x00005ff1
    6cc8:	00005e81 	.word	0x00005e81
    6ccc:	00006079 	.word	0x00006079
    6cd0:	00006221 	.word	0x00006221
    6cd4:	00006269 	.word	0x00006269
    6cd8:	000062a5 	.word	0x000062a5

00006cdc <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6cdc:	b580      	push	{r7, lr}
    6cde:	b082      	sub	sp, #8
    6ce0:	af00      	add	r7, sp, #0
    6ce2:	6078      	str	r0, [r7, #4]
    6ce4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	2b00      	cmp	r3, #0
    6cea:	d004      	beq.n	6cf6 <_spi_load_regs_master+0x1a>
    6cec:	683b      	ldr	r3, [r7, #0]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d001      	beq.n	6cf6 <_spi_load_regs_master+0x1a>
    6cf2:	2301      	movs	r3, #1
    6cf4:	e000      	b.n	6cf8 <_spi_load_regs_master+0x1c>
    6cf6:	2300      	movs	r3, #0
    6cf8:	f003 0301 	and.w	r3, r3, #1
    6cfc:	b2db      	uxtb	r3, r3
    6cfe:	f640 1209 	movw	r2, #2313	; 0x909
    6d02:	4915      	ldr	r1, [pc, #84]	; (6d58 <_spi_load_regs_master+0x7c>)
    6d04:	4618      	mov	r0, r3
    6d06:	4b15      	ldr	r3, [pc, #84]	; (6d5c <_spi_load_regs_master+0x80>)
    6d08:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d0a:	683b      	ldr	r3, [r7, #0]
    6d0c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6d0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6d12:	f023 0301 	bic.w	r3, r3, #1
    6d16:	4619      	mov	r1, r3
    6d18:	6878      	ldr	r0, [r7, #4]
    6d1a:	4b11      	ldr	r3, [pc, #68]	; (6d60 <_spi_load_regs_master+0x84>)
    6d1c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6d1e:	683b      	ldr	r3, [r7, #0]
    6d20:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6d22:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6d26:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6d2e:	4619      	mov	r1, r3
    6d30:	6878      	ldr	r0, [r7, #4]
    6d32:	4b0c      	ldr	r3, [pc, #48]	; (6d64 <_spi_load_regs_master+0x88>)
    6d34:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6d36:	683b      	ldr	r3, [r7, #0]
    6d38:	7b1b      	ldrb	r3, [r3, #12]
    6d3a:	4619      	mov	r1, r3
    6d3c:	6878      	ldr	r0, [r7, #4]
    6d3e:	4b0a      	ldr	r3, [pc, #40]	; (6d68 <_spi_load_regs_master+0x8c>)
    6d40:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6d42:	683b      	ldr	r3, [r7, #0]
    6d44:	7b5b      	ldrb	r3, [r3, #13]
    6d46:	4619      	mov	r1, r3
    6d48:	6878      	ldr	r0, [r7, #4]
    6d4a:	4b08      	ldr	r3, [pc, #32]	; (6d6c <_spi_load_regs_master+0x90>)
    6d4c:	4798      	blx	r3
}
    6d4e:	bf00      	nop
    6d50:	3708      	adds	r7, #8
    6d52:	46bd      	mov	sp, r7
    6d54:	bd80      	pop	{r7, pc}
    6d56:	bf00      	nop
    6d58:	0000f2b0 	.word	0x0000f2b0
    6d5c:	0000396d 	.word	0x0000396d
    6d60:	0000612d 	.word	0x0000612d
    6d64:	00006245 	.word	0x00006245
    6d68:	00006285 	.word	0x00006285
    6d6c:	000063bd 	.word	0x000063bd

00006d70 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6d70:	b580      	push	{r7, lr}
    6d72:	b082      	sub	sp, #8
    6d74:	af00      	add	r7, sp, #0
    6d76:	6078      	str	r0, [r7, #4]
    6d78:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	2b00      	cmp	r3, #0
    6d7e:	d004      	beq.n	6d8a <_spi_load_regs_slave+0x1a>
    6d80:	683b      	ldr	r3, [r7, #0]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d001      	beq.n	6d8a <_spi_load_regs_slave+0x1a>
    6d86:	2301      	movs	r3, #1
    6d88:	e000      	b.n	6d8c <_spi_load_regs_slave+0x1c>
    6d8a:	2300      	movs	r3, #0
    6d8c:	f003 0301 	and.w	r3, r3, #1
    6d90:	b2db      	uxtb	r3, r3
    6d92:	f640 121d 	movw	r2, #2333	; 0x91d
    6d96:	491a      	ldr	r1, [pc, #104]	; (6e00 <_spi_load_regs_slave+0x90>)
    6d98:	4618      	mov	r0, r3
    6d9a:	4b1a      	ldr	r3, [pc, #104]	; (6e04 <_spi_load_regs_slave+0x94>)
    6d9c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6d9e:	683b      	ldr	r3, [r7, #0]
    6da0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6da2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6da6:	f023 0301 	bic.w	r3, r3, #1
    6daa:	4619      	mov	r1, r3
    6dac:	6878      	ldr	r0, [r7, #4]
    6dae:	4b16      	ldr	r3, [pc, #88]	; (6e08 <_spi_load_regs_slave+0x98>)
    6db0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6db2:	683b      	ldr	r3, [r7, #0]
    6db4:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6db6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6dba:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6dc2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6dc6:	4619      	mov	r1, r3
    6dc8:	6878      	ldr	r0, [r7, #4]
    6dca:	4b10      	ldr	r3, [pc, #64]	; (6e0c <_spi_load_regs_slave+0x9c>)
    6dcc:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6dce:	683b      	ldr	r3, [r7, #0]
    6dd0:	689b      	ldr	r3, [r3, #8]
    6dd2:	4619      	mov	r1, r3
    6dd4:	6878      	ldr	r0, [r7, #4]
    6dd6:	4b0e      	ldr	r3, [pc, #56]	; (6e10 <_spi_load_regs_slave+0xa0>)
    6dd8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6dda:	683b      	ldr	r3, [r7, #0]
    6ddc:	7b5b      	ldrb	r3, [r3, #13]
    6dde:	4619      	mov	r1, r3
    6de0:	6878      	ldr	r0, [r7, #4]
    6de2:	4b0c      	ldr	r3, [pc, #48]	; (6e14 <_spi_load_regs_slave+0xa4>)
    6de4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6de6:	bf00      	nop
    6de8:	f04f 31ff 	mov.w	r1, #4294967295
    6dec:	6878      	ldr	r0, [r7, #4]
    6dee:	4b0a      	ldr	r3, [pc, #40]	; (6e18 <_spi_load_regs_slave+0xa8>)
    6df0:	4798      	blx	r3
    6df2:	4603      	mov	r3, r0
    6df4:	2b00      	cmp	r3, #0
    6df6:	d1f7      	bne.n	6de8 <_spi_load_regs_slave+0x78>
		;
}
    6df8:	bf00      	nop
    6dfa:	3708      	adds	r7, #8
    6dfc:	46bd      	mov	sp, r7
    6dfe:	bd80      	pop	{r7, pc}
    6e00:	0000f2b0 	.word	0x0000f2b0
    6e04:	0000396d 	.word	0x0000396d
    6e08:	0000612d 	.word	0x0000612d
    6e0c:	00006245 	.word	0x00006245
    6e10:	00006329 	.word	0x00006329
    6e14:	000063bd 	.word	0x000063bd
    6e18:	00005ef1 	.word	0x00005ef1

00006e1c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b084      	sub	sp, #16
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	4618      	mov	r0, r3
    6e28:	4b11      	ldr	r3, [pc, #68]	; (6e70 <_spi_get_regs+0x54>)
    6e2a:	4798      	blx	r3
    6e2c:	4603      	mov	r3, r0
    6e2e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e30:	2300      	movs	r3, #0
    6e32:	73fb      	strb	r3, [r7, #15]
    6e34:	e014      	b.n	6e60 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6e36:	7bfa      	ldrb	r2, [r7, #15]
    6e38:	490e      	ldr	r1, [pc, #56]	; (6e74 <_spi_get_regs+0x58>)
    6e3a:	4613      	mov	r3, r2
    6e3c:	011b      	lsls	r3, r3, #4
    6e3e:	4413      	add	r3, r2
    6e40:	440b      	add	r3, r1
    6e42:	3310      	adds	r3, #16
    6e44:	781b      	ldrb	r3, [r3, #0]
    6e46:	7bba      	ldrb	r2, [r7, #14]
    6e48:	429a      	cmp	r2, r3
    6e4a:	d106      	bne.n	6e5a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6e4c:	7bfa      	ldrb	r2, [r7, #15]
    6e4e:	4613      	mov	r3, r2
    6e50:	011b      	lsls	r3, r3, #4
    6e52:	4413      	add	r3, r2
    6e54:	4a07      	ldr	r2, [pc, #28]	; (6e74 <_spi_get_regs+0x58>)
    6e56:	4413      	add	r3, r2
    6e58:	e006      	b.n	6e68 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6e5a:	7bfb      	ldrb	r3, [r7, #15]
    6e5c:	3301      	adds	r3, #1
    6e5e:	73fb      	strb	r3, [r7, #15]
    6e60:	7bfb      	ldrb	r3, [r7, #15]
    6e62:	2b01      	cmp	r3, #1
    6e64:	d9e7      	bls.n	6e36 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6e66:	2300      	movs	r3, #0
}
    6e68:	4618      	mov	r0, r3
    6e6a:	3710      	adds	r7, #16
    6e6c:	46bd      	mov	sp, r7
    6e6e:	bd80      	pop	{r7, pc}
    6e70:	00006475 	.word	0x00006475
    6e74:	0000f2ec 	.word	0x0000f2ec

00006e78 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	b084      	sub	sp, #16
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	6078      	str	r0, [r7, #4]
    6e80:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6e82:	683b      	ldr	r3, [r7, #0]
    6e84:	4618      	mov	r0, r3
    6e86:	4b35      	ldr	r3, [pc, #212]	; (6f5c <_spi_m_sync_init+0xe4>)
    6e88:	4798      	blx	r3
    6e8a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d004      	beq.n	6e9c <_spi_m_sync_init+0x24>
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	2b00      	cmp	r3, #0
    6e96:	d001      	beq.n	6e9c <_spi_m_sync_init+0x24>
    6e98:	2301      	movs	r3, #1
    6e9a:	e000      	b.n	6e9e <_spi_m_sync_init+0x26>
    6e9c:	2300      	movs	r3, #0
    6e9e:	f003 0301 	and.w	r3, r3, #1
    6ea2:	b2db      	uxtb	r3, r3
    6ea4:	f640 123f 	movw	r2, #2367	; 0x93f
    6ea8:	492d      	ldr	r1, [pc, #180]	; (6f60 <_spi_m_sync_init+0xe8>)
    6eaa:	4618      	mov	r0, r3
    6eac:	4b2d      	ldr	r3, [pc, #180]	; (6f64 <_spi_m_sync_init+0xec>)
    6eae:	4798      	blx	r3

	if (regs == NULL) {
    6eb0:	68fb      	ldr	r3, [r7, #12]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d102      	bne.n	6ebc <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6eb6:	f06f 030c 	mvn.w	r3, #12
    6eba:	e04a      	b.n	6f52 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6ebc:	2101      	movs	r1, #1
    6ebe:	6838      	ldr	r0, [r7, #0]
    6ec0:	4b29      	ldr	r3, [pc, #164]	; (6f68 <_spi_m_sync_init+0xf0>)
    6ec2:	4798      	blx	r3
    6ec4:	4603      	mov	r3, r0
    6ec6:	f083 0301 	eor.w	r3, r3, #1
    6eca:	b2db      	uxtb	r3, r3
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d019      	beq.n	6f04 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6ed0:	68fb      	ldr	r3, [r7, #12]
    6ed2:	681b      	ldr	r3, [r3, #0]
    6ed4:	f003 031c 	and.w	r3, r3, #28
    6ed8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6eda:	2102      	movs	r1, #2
    6edc:	6838      	ldr	r0, [r7, #0]
    6ede:	4b23      	ldr	r3, [pc, #140]	; (6f6c <_spi_m_sync_init+0xf4>)
    6ee0:	4798      	blx	r3
    6ee2:	4603      	mov	r3, r0
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d006      	beq.n	6ef6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6ee8:	6838      	ldr	r0, [r7, #0]
    6eea:	4b21      	ldr	r3, [pc, #132]	; (6f70 <_spi_m_sync_init+0xf8>)
    6eec:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6eee:	2102      	movs	r1, #2
    6ef0:	6838      	ldr	r0, [r7, #0]
    6ef2:	4b20      	ldr	r3, [pc, #128]	; (6f74 <_spi_m_sync_init+0xfc>)
    6ef4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6ef6:	68bb      	ldr	r3, [r7, #8]
    6ef8:	f043 0301 	orr.w	r3, r3, #1
    6efc:	4619      	mov	r1, r3
    6efe:	6838      	ldr	r0, [r7, #0]
    6f00:	4b1d      	ldr	r3, [pc, #116]	; (6f78 <_spi_m_sync_init+0x100>)
    6f02:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6f04:	2101      	movs	r1, #1
    6f06:	6838      	ldr	r0, [r7, #0]
    6f08:	4b1a      	ldr	r3, [pc, #104]	; (6f74 <_spi_m_sync_init+0xfc>)
    6f0a:	4798      	blx	r3

	dev->prvt = hw;
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	683a      	ldr	r2, [r7, #0]
    6f10:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6f12:	68fb      	ldr	r3, [r7, #12]
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	f003 031c 	and.w	r3, r3, #28
    6f1a:	2b08      	cmp	r3, #8
    6f1c:	d104      	bne.n	6f28 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6f1e:	68f9      	ldr	r1, [r7, #12]
    6f20:	6838      	ldr	r0, [r7, #0]
    6f22:	4b16      	ldr	r3, [pc, #88]	; (6f7c <_spi_m_sync_init+0x104>)
    6f24:	4798      	blx	r3
    6f26:	e003      	b.n	6f30 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6f28:	68f9      	ldr	r1, [r7, #12]
    6f2a:	6838      	ldr	r0, [r7, #0]
    6f2c:	4b14      	ldr	r3, [pc, #80]	; (6f80 <_spi_m_sync_init+0x108>)
    6f2e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	685b      	ldr	r3, [r3, #4]
    6f34:	f003 0307 	and.w	r3, r3, #7
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d101      	bne.n	6f40 <_spi_m_sync_init+0xc8>
    6f3c:	2201      	movs	r2, #1
    6f3e:	e000      	b.n	6f42 <_spi_m_sync_init+0xca>
    6f40:	2202      	movs	r2, #2
    6f42:	687b      	ldr	r3, [r7, #4]
    6f44:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	89db      	ldrh	r3, [r3, #14]
    6f4a:	b29a      	uxth	r2, r3
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6f50:	2300      	movs	r3, #0
}
    6f52:	4618      	mov	r0, r3
    6f54:	3710      	adds	r7, #16
    6f56:	46bd      	mov	sp, r7
    6f58:	bd80      	pop	{r7, pc}
    6f5a:	bf00      	nop
    6f5c:	00006e1d 	.word	0x00006e1d
    6f60:	0000f2b0 	.word	0x0000f2b0
    6f64:	0000396d 	.word	0x0000396d
    6f68:	00005ef1 	.word	0x00005ef1
    6f6c:	000060fd 	.word	0x000060fd
    6f70:	000060d5 	.word	0x000060d5
    6f74:	00005ecd 	.word	0x00005ecd
    6f78:	0000612d 	.word	0x0000612d
    6f7c:	00006d71 	.word	0x00006d71
    6f80:	00006cdd 	.word	0x00006cdd

00006f84 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6f84:	b580      	push	{r7, lr}
    6f86:	b082      	sub	sp, #8
    6f88:	af00      	add	r7, sp, #0
    6f8a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6f8c:	bf00      	nop
    6f8e:	2103      	movs	r1, #3
    6f90:	6878      	ldr	r0, [r7, #4]
    6f92:	4b06      	ldr	r3, [pc, #24]	; (6fac <_spi_wait_bus_idle+0x28>)
    6f94:	4798      	blx	r3
    6f96:	4603      	mov	r3, r0
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d0f8      	beq.n	6f8e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6f9c:	2103      	movs	r1, #3
    6f9e:	6878      	ldr	r0, [r7, #4]
    6fa0:	4b03      	ldr	r3, [pc, #12]	; (6fb0 <_spi_wait_bus_idle+0x2c>)
    6fa2:	4798      	blx	r3
}
    6fa4:	bf00      	nop
    6fa6:	3708      	adds	r7, #8
    6fa8:	46bd      	mov	sp, r7
    6faa:	bd80      	pop	{r7, pc}
    6fac:	00005f67 	.word	0x00005f67
    6fb0:	00005fa9 	.word	0x00005fa9

00006fb4 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b086      	sub	sp, #24
    6fb8:	af00      	add	r7, sp, #0
    6fba:	60f8      	str	r0, [r7, #12]
    6fbc:	60b9      	str	r1, [r7, #8]
    6fbe:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6fc0:	68bb      	ldr	r3, [r7, #8]
    6fc2:	f003 0304 	and.w	r3, r3, #4
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d101      	bne.n	6fce <_spi_rx_check_and_receive+0x1a>
		return false;
    6fca:	2300      	movs	r3, #0
    6fcc:	e022      	b.n	7014 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6fce:	68f8      	ldr	r0, [r7, #12]
    6fd0:	4b12      	ldr	r3, [pc, #72]	; (701c <_spi_rx_check_and_receive+0x68>)
    6fd2:	4798      	blx	r3
    6fd4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	685b      	ldr	r3, [r3, #4]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d014      	beq.n	7008 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	685b      	ldr	r3, [r3, #4]
    6fe2:	1c59      	adds	r1, r3, #1
    6fe4:	687a      	ldr	r2, [r7, #4]
    6fe6:	6051      	str	r1, [r2, #4]
    6fe8:	697a      	ldr	r2, [r7, #20]
    6fea:	b2d2      	uxtb	r2, r2
    6fec:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6fee:	687b      	ldr	r3, [r7, #4]
    6ff0:	7c1b      	ldrb	r3, [r3, #16]
    6ff2:	2b01      	cmp	r3, #1
    6ff4:	d908      	bls.n	7008 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	685b      	ldr	r3, [r3, #4]
    6ffa:	1c59      	adds	r1, r3, #1
    6ffc:	687a      	ldr	r2, [r7, #4]
    6ffe:	6051      	str	r1, [r2, #4]
    7000:	697a      	ldr	r2, [r7, #20]
    7002:	0a12      	lsrs	r2, r2, #8
    7004:	b2d2      	uxtb	r2, r2
    7006:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7008:	687b      	ldr	r3, [r7, #4]
    700a:	68db      	ldr	r3, [r3, #12]
    700c:	1c5a      	adds	r2, r3, #1
    700e:	687b      	ldr	r3, [r7, #4]
    7010:	60da      	str	r2, [r3, #12]

	return true;
    7012:	2301      	movs	r3, #1
}
    7014:	4618      	mov	r0, r3
    7016:	3718      	adds	r7, #24
    7018:	46bd      	mov	sp, r7
    701a:	bd80      	pop	{r7, pc}
    701c:	000063a5 	.word	0x000063a5

00007020 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7020:	b580      	push	{r7, lr}
    7022:	b086      	sub	sp, #24
    7024:	af00      	add	r7, sp, #0
    7026:	60f8      	str	r0, [r7, #12]
    7028:	60b9      	str	r1, [r7, #8]
    702a:	607a      	str	r2, [r7, #4]
    702c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    702e:	68bb      	ldr	r3, [r7, #8]
    7030:	f003 0301 	and.w	r3, r3, #1
    7034:	2b00      	cmp	r3, #0
    7036:	d028      	beq.n	708a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7038:	687b      	ldr	r3, [r7, #4]
    703a:	681b      	ldr	r3, [r3, #0]
    703c:	2b00      	cmp	r3, #0
    703e:	d018      	beq.n	7072 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	1c59      	adds	r1, r3, #1
    7046:	687a      	ldr	r2, [r7, #4]
    7048:	6011      	str	r1, [r2, #0]
    704a:	781b      	ldrb	r3, [r3, #0]
    704c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	7c1b      	ldrb	r3, [r3, #16]
    7052:	2b01      	cmp	r3, #1
    7054:	d90f      	bls.n	7076 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	021b      	lsls	r3, r3, #8
    705e:	461a      	mov	r2, r3
    7060:	697b      	ldr	r3, [r7, #20]
    7062:	4313      	orrs	r3, r2
    7064:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	1c5a      	adds	r2, r3, #1
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	601a      	str	r2, [r3, #0]
    7070:	e001      	b.n	7076 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7072:	887b      	ldrh	r3, [r7, #2]
    7074:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	689b      	ldr	r3, [r3, #8]
    707a:	1c5a      	adds	r2, r3, #1
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7080:	6979      	ldr	r1, [r7, #20]
    7082:	68f8      	ldr	r0, [r7, #12]
    7084:	4b03      	ldr	r3, [pc, #12]	; (7094 <_spi_tx_check_and_send+0x74>)
    7086:	4798      	blx	r3
    7088:	e000      	b.n	708c <_spi_tx_check_and_send+0x6c>
		return;
    708a:	bf00      	nop
}
    708c:	3718      	adds	r7, #24
    708e:	46bd      	mov	sp, r7
    7090:	bd80      	pop	{r7, pc}
    7092:	bf00      	nop
    7094:	00006389 	.word	0x00006389

00007098 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7098:	b580      	push	{r7, lr}
    709a:	b082      	sub	sp, #8
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
    70a0:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    70a8:	2b00      	cmp	r3, #0
    70aa:	d00b      	beq.n	70c4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    70ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70b0:	6838      	ldr	r0, [r7, #0]
    70b2:	4b07      	ldr	r3, [pc, #28]	; (70d0 <_spi_err_check+0x38>)
    70b4:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    70b6:	2180      	movs	r1, #128	; 0x80
    70b8:	6838      	ldr	r0, [r7, #0]
    70ba:	4b06      	ldr	r3, [pc, #24]	; (70d4 <_spi_err_check+0x3c>)
    70bc:	4798      	blx	r3
		return ERR_OVERFLOW;
    70be:	f06f 0312 	mvn.w	r3, #18
    70c2:	e000      	b.n	70c6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    70c4:	2300      	movs	r3, #0
}
    70c6:	4618      	mov	r0, r3
    70c8:	3708      	adds	r7, #8
    70ca:	46bd      	mov	sp, r7
    70cc:	bd80      	pop	{r7, pc}
    70ce:	bf00      	nop
    70d0:	000063dd 	.word	0x000063dd
    70d4:	00005fa9 	.word	0x00005fa9

000070d8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    70d8:	b590      	push	{r4, r7, lr}
    70da:	b08b      	sub	sp, #44	; 0x2c
    70dc:	af00      	add	r7, sp, #0
    70de:	6078      	str	r0, [r7, #4]
    70e0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    70e8:	2300      	movs	r3, #0
    70ea:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    70ec:	683b      	ldr	r3, [r7, #0]
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	60bb      	str	r3, [r7, #8]
    70f2:	683b      	ldr	r3, [r7, #0]
    70f4:	685b      	ldr	r3, [r3, #4]
    70f6:	60fb      	str	r3, [r7, #12]
    70f8:	2300      	movs	r3, #0
    70fa:	613b      	str	r3, [r7, #16]
    70fc:	2300      	movs	r3, #0
    70fe:	617b      	str	r3, [r7, #20]
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	791b      	ldrb	r3, [r3, #4]
    7104:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	2b00      	cmp	r3, #0
    710a:	d004      	beq.n	7116 <_spi_m_sync_trans+0x3e>
    710c:	6a3b      	ldr	r3, [r7, #32]
    710e:	2b00      	cmp	r3, #0
    7110:	d001      	beq.n	7116 <_spi_m_sync_trans+0x3e>
    7112:	2301      	movs	r3, #1
    7114:	e000      	b.n	7118 <_spi_m_sync_trans+0x40>
    7116:	2300      	movs	r3, #0
    7118:	f003 0301 	and.w	r3, r3, #1
    711c:	b2db      	uxtb	r3, r3
    711e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    7122:	492b      	ldr	r1, [pc, #172]	; (71d0 <_spi_m_sync_trans+0xf8>)
    7124:	4618      	mov	r0, r3
    7126:	4b2b      	ldr	r3, [pc, #172]	; (71d4 <_spi_m_sync_trans+0xfc>)
    7128:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    712a:	2107      	movs	r1, #7
    712c:	6a38      	ldr	r0, [r7, #32]
    712e:	4b2a      	ldr	r3, [pc, #168]	; (71d8 <_spi_m_sync_trans+0x100>)
    7130:	4798      	blx	r3
    7132:	4603      	mov	r3, r0
    7134:	2b00      	cmp	r3, #0
    7136:	d002      	beq.n	713e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7138:	f06f 0303 	mvn.w	r3, #3
    713c:	e043      	b.n	71c6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    713e:	6a38      	ldr	r0, [r7, #32]
    7140:	4b26      	ldr	r3, [pc, #152]	; (71dc <_spi_m_sync_trans+0x104>)
    7142:	4798      	blx	r3
    7144:	4603      	mov	r3, r0
    7146:	f083 0301 	eor.w	r3, r3, #1
    714a:	b2db      	uxtb	r3, r3
    714c:	2b00      	cmp	r3, #0
    714e:	d002      	beq.n	7156 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7150:	f06f 0313 	mvn.w	r3, #19
    7154:	e037      	b.n	71c6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7156:	6a38      	ldr	r0, [r7, #32]
    7158:	4b21      	ldr	r3, [pc, #132]	; (71e0 <_spi_m_sync_trans+0x108>)
    715a:	4798      	blx	r3
    715c:	4603      	mov	r3, r0
    715e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7160:	f107 0308 	add.w	r3, r7, #8
    7164:	461a      	mov	r2, r3
    7166:	69f9      	ldr	r1, [r7, #28]
    7168:	6a38      	ldr	r0, [r7, #32]
    716a:	4b1e      	ldr	r3, [pc, #120]	; (71e4 <_spi_m_sync_trans+0x10c>)
    716c:	4798      	blx	r3
    716e:	4603      	mov	r3, r0
    7170:	f083 0301 	eor.w	r3, r3, #1
    7174:	b2db      	uxtb	r3, r3
    7176:	2b00      	cmp	r3, #0
    7178:	d00b      	beq.n	7192 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    717a:	697a      	ldr	r2, [r7, #20]
    717c:	693b      	ldr	r3, [r7, #16]
    717e:	429a      	cmp	r2, r3
    7180:	d307      	bcc.n	7192 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	88db      	ldrh	r3, [r3, #6]
    7186:	f107 0208 	add.w	r2, r7, #8
    718a:	69f9      	ldr	r1, [r7, #28]
    718c:	6a38      	ldr	r0, [r7, #32]
    718e:	4c16      	ldr	r4, [pc, #88]	; (71e8 <_spi_m_sync_trans+0x110>)
    7190:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7192:	6a39      	ldr	r1, [r7, #32]
    7194:	69f8      	ldr	r0, [r7, #28]
    7196:	4b15      	ldr	r3, [pc, #84]	; (71ec <_spi_m_sync_trans+0x114>)
    7198:	4798      	blx	r3
    719a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    719e:	2b00      	cmp	r3, #0
    71a0:	db0c      	blt.n	71bc <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    71a2:	693a      	ldr	r2, [r7, #16]
    71a4:	683b      	ldr	r3, [r7, #0]
    71a6:	689b      	ldr	r3, [r3, #8]
    71a8:	429a      	cmp	r2, r3
    71aa:	d3d4      	bcc.n	7156 <_spi_m_sync_trans+0x7e>
    71ac:	697a      	ldr	r2, [r7, #20]
    71ae:	683b      	ldr	r3, [r7, #0]
    71b0:	689b      	ldr	r3, [r3, #8]
    71b2:	429a      	cmp	r2, r3
    71b4:	d3cf      	bcc.n	7156 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    71ba:	e000      	b.n	71be <_spi_m_sync_trans+0xe6>
			break;
    71bc:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    71be:	6a38      	ldr	r0, [r7, #32]
    71c0:	4b0b      	ldr	r3, [pc, #44]	; (71f0 <_spi_m_sync_trans+0x118>)
    71c2:	4798      	blx	r3

	return rc;
    71c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    71c6:	4618      	mov	r0, r3
    71c8:	372c      	adds	r7, #44	; 0x2c
    71ca:	46bd      	mov	sp, r7
    71cc:	bd90      	pop	{r4, r7, pc}
    71ce:	bf00      	nop
    71d0:	0000f2b0 	.word	0x0000f2b0
    71d4:	0000396d 	.word	0x0000396d
    71d8:	00005ef1 	.word	0x00005ef1
    71dc:	0000609d 	.word	0x0000609d
    71e0:	00005f8f 	.word	0x00005f8f
    71e4:	00006fb5 	.word	0x00006fb5
    71e8:	00007021 	.word	0x00007021
    71ec:	00007099 	.word	0x00007099
    71f0:	00006f85 	.word	0x00006f85

000071f4 <__NVIC_EnableIRQ>:
{
    71f4:	b480      	push	{r7}
    71f6:	b083      	sub	sp, #12
    71f8:	af00      	add	r7, sp, #0
    71fa:	4603      	mov	r3, r0
    71fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7202:	2b00      	cmp	r3, #0
    7204:	db0b      	blt.n	721e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7206:	4909      	ldr	r1, [pc, #36]	; (722c <__NVIC_EnableIRQ+0x38>)
    7208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    720c:	095b      	lsrs	r3, r3, #5
    720e:	88fa      	ldrh	r2, [r7, #6]
    7210:	f002 021f 	and.w	r2, r2, #31
    7214:	2001      	movs	r0, #1
    7216:	fa00 f202 	lsl.w	r2, r0, r2
    721a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    721e:	bf00      	nop
    7220:	370c      	adds	r7, #12
    7222:	46bd      	mov	sp, r7
    7224:	f85d 7b04 	ldr.w	r7, [sp], #4
    7228:	4770      	bx	lr
    722a:	bf00      	nop
    722c:	e000e100 	.word	0xe000e100

00007230 <__NVIC_DisableIRQ>:
{
    7230:	b480      	push	{r7}
    7232:	b083      	sub	sp, #12
    7234:	af00      	add	r7, sp, #0
    7236:	4603      	mov	r3, r0
    7238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    723a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    723e:	2b00      	cmp	r3, #0
    7240:	db10      	blt.n	7264 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7242:	490b      	ldr	r1, [pc, #44]	; (7270 <__NVIC_DisableIRQ+0x40>)
    7244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7248:	095b      	lsrs	r3, r3, #5
    724a:	88fa      	ldrh	r2, [r7, #6]
    724c:	f002 021f 	and.w	r2, r2, #31
    7250:	2001      	movs	r0, #1
    7252:	fa00 f202 	lsl.w	r2, r0, r2
    7256:	3320      	adds	r3, #32
    7258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    725c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7260:	f3bf 8f6f 	isb	sy
}
    7264:	bf00      	nop
    7266:	370c      	adds	r7, #12
    7268:	46bd      	mov	sp, r7
    726a:	f85d 7b04 	ldr.w	r7, [sp], #4
    726e:	4770      	bx	lr
    7270:	e000e100 	.word	0xe000e100

00007274 <__NVIC_ClearPendingIRQ>:
{
    7274:	b480      	push	{r7}
    7276:	b083      	sub	sp, #12
    7278:	af00      	add	r7, sp, #0
    727a:	4603      	mov	r3, r0
    727c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    727e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7282:	2b00      	cmp	r3, #0
    7284:	db0c      	blt.n	72a0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7286:	4909      	ldr	r1, [pc, #36]	; (72ac <__NVIC_ClearPendingIRQ+0x38>)
    7288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    728c:	095b      	lsrs	r3, r3, #5
    728e:	88fa      	ldrh	r2, [r7, #6]
    7290:	f002 021f 	and.w	r2, r2, #31
    7294:	2001      	movs	r0, #1
    7296:	fa00 f202 	lsl.w	r2, r0, r2
    729a:	3360      	adds	r3, #96	; 0x60
    729c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72a0:	bf00      	nop
    72a2:	370c      	adds	r7, #12
    72a4:	46bd      	mov	sp, r7
    72a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72aa:	4770      	bx	lr
    72ac:	e000e100 	.word	0xe000e100

000072b0 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72b0:	b480      	push	{r7}
    72b2:	b083      	sub	sp, #12
    72b4:	af00      	add	r7, sp, #0
    72b6:	6078      	str	r0, [r7, #4]
    72b8:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    72ba:	bf00      	nop
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	689a      	ldr	r2, [r3, #8]
    72c0:	683b      	ldr	r3, [r7, #0]
    72c2:	4013      	ands	r3, r2
    72c4:	2b00      	cmp	r3, #0
    72c6:	d1f9      	bne.n	72bc <hri_tcc_wait_for_sync+0xc>
	};
}
    72c8:	bf00      	nop
    72ca:	370c      	adds	r7, #12
    72cc:	46bd      	mov	sp, r7
    72ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    72d2:	4770      	bx	lr

000072d4 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    72d4:	b480      	push	{r7}
    72d6:	b083      	sub	sp, #12
    72d8:	af00      	add	r7, sp, #0
    72da:	6078      	str	r0, [r7, #4]
    72dc:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    72de:	687b      	ldr	r3, [r7, #4]
    72e0:	689a      	ldr	r2, [r3, #8]
    72e2:	683b      	ldr	r3, [r7, #0]
    72e4:	4013      	ands	r3, r2
    72e6:	2b00      	cmp	r3, #0
    72e8:	bf14      	ite	ne
    72ea:	2301      	movne	r3, #1
    72ec:	2300      	moveq	r3, #0
    72ee:	b2db      	uxtb	r3, r3
}
    72f0:	4618      	mov	r0, r3
    72f2:	370c      	adds	r7, #12
    72f4:	46bd      	mov	sp, r7
    72f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72fa:	4770      	bx	lr

000072fc <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    72fc:	b480      	push	{r7}
    72fe:	b083      	sub	sp, #12
    7300:	af00      	add	r7, sp, #0
    7302:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7308:	f003 0301 	and.w	r3, r3, #1
    730c:	2b00      	cmp	r3, #0
    730e:	bf14      	ite	ne
    7310:	2301      	movne	r3, #1
    7312:	2300      	moveq	r3, #0
    7314:	b2db      	uxtb	r3, r3
}
    7316:	4618      	mov	r0, r3
    7318:	370c      	adds	r7, #12
    731a:	46bd      	mov	sp, r7
    731c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7320:	4770      	bx	lr

00007322 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7322:	b480      	push	{r7}
    7324:	b083      	sub	sp, #12
    7326:	af00      	add	r7, sp, #0
    7328:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	2201      	movs	r2, #1
    732e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7330:	bf00      	nop
    7332:	370c      	adds	r7, #12
    7334:	46bd      	mov	sp, r7
    7336:	f85d 7b04 	ldr.w	r7, [sp], #4
    733a:	4770      	bx	lr

0000733c <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    733c:	b480      	push	{r7}
    733e:	b083      	sub	sp, #12
    7340:	af00      	add	r7, sp, #0
    7342:	6078      	str	r0, [r7, #4]
    7344:	460b      	mov	r3, r1
    7346:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	78fa      	ldrb	r2, [r7, #3]
    734c:	715a      	strb	r2, [r3, #5]
}
    734e:	bf00      	nop
    7350:	370c      	adds	r7, #12
    7352:	46bd      	mov	sp, r7
    7354:	f85d 7b04 	ldr.w	r7, [sp], #4
    7358:	4770      	bx	lr

0000735a <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    735a:	b480      	push	{r7}
    735c:	b083      	sub	sp, #12
    735e:	af00      	add	r7, sp, #0
    7360:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	2201      	movs	r2, #1
    7366:	629a      	str	r2, [r3, #40]	; 0x28
}
    7368:	bf00      	nop
    736a:	370c      	adds	r7, #12
    736c:	46bd      	mov	sp, r7
    736e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7372:	4770      	bx	lr

00007374 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7374:	b580      	push	{r7, lr}
    7376:	b082      	sub	sp, #8
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    737c:	687b      	ldr	r3, [r7, #4]
    737e:	681b      	ldr	r3, [r3, #0]
    7380:	f043 0201 	orr.w	r2, r3, #1
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7388:	2101      	movs	r1, #1
    738a:	6878      	ldr	r0, [r7, #4]
    738c:	4b02      	ldr	r3, [pc, #8]	; (7398 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    738e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7390:	bf00      	nop
    7392:	3708      	adds	r7, #8
    7394:	46bd      	mov	sp, r7
    7396:	bd80      	pop	{r7, pc}
    7398:	000072b1 	.word	0x000072b1

0000739c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	681b      	ldr	r3, [r3, #0]
    73a8:	f043 0202 	orr.w	r2, r3, #2
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73b0:	2103      	movs	r1, #3
    73b2:	6878      	ldr	r0, [r7, #4]
    73b4:	4b02      	ldr	r3, [pc, #8]	; (73c0 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    73b6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    73b8:	bf00      	nop
    73ba:	3708      	adds	r7, #8
    73bc:	46bd      	mov	sp, r7
    73be:	bd80      	pop	{r7, pc}
    73c0:	000072b1 	.word	0x000072b1

000073c4 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b084      	sub	sp, #16
    73c8:	af00      	add	r7, sp, #0
    73ca:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    73cc:	2103      	movs	r1, #3
    73ce:	6878      	ldr	r0, [r7, #4]
    73d0:	4b09      	ldr	r3, [pc, #36]	; (73f8 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    73d2:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    73da:	68fb      	ldr	r3, [r7, #12]
    73dc:	085b      	lsrs	r3, r3, #1
    73de:	f003 0301 	and.w	r3, r3, #1
    73e2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    73e4:	68fb      	ldr	r3, [r7, #12]
    73e6:	2b00      	cmp	r3, #0
    73e8:	bf14      	ite	ne
    73ea:	2301      	movne	r3, #1
    73ec:	2300      	moveq	r3, #0
    73ee:	b2db      	uxtb	r3, r3
}
    73f0:	4618      	mov	r0, r3
    73f2:	3710      	adds	r7, #16
    73f4:	46bd      	mov	sp, r7
    73f6:	bd80      	pop	{r7, pc}
    73f8:	000072b1 	.word	0x000072b1

000073fc <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    73fc:	b580      	push	{r7, lr}
    73fe:	b082      	sub	sp, #8
    7400:	af00      	add	r7, sp, #0
    7402:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	681b      	ldr	r3, [r3, #0]
    7408:	f023 0202 	bic.w	r2, r3, #2
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7410:	2103      	movs	r1, #3
    7412:	6878      	ldr	r0, [r7, #4]
    7414:	4b02      	ldr	r3, [pc, #8]	; (7420 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7416:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7418:	bf00      	nop
    741a:	3708      	adds	r7, #8
    741c:	46bd      	mov	sp, r7
    741e:	bd80      	pop	{r7, pc}
    7420:	000072b1 	.word	0x000072b1

00007424 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7424:	b580      	push	{r7, lr}
    7426:	b084      	sub	sp, #16
    7428:	af00      	add	r7, sp, #0
    742a:	6078      	str	r0, [r7, #4]
    742c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    742e:	2103      	movs	r1, #3
    7430:	6878      	ldr	r0, [r7, #4]
    7432:	4b07      	ldr	r3, [pc, #28]	; (7450 <hri_tcc_get_CTRLA_reg+0x2c>)
    7434:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7436:	687b      	ldr	r3, [r7, #4]
    7438:	681b      	ldr	r3, [r3, #0]
    743a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    743c:	68fa      	ldr	r2, [r7, #12]
    743e:	683b      	ldr	r3, [r7, #0]
    7440:	4013      	ands	r3, r2
    7442:	60fb      	str	r3, [r7, #12]
	return tmp;
    7444:	68fb      	ldr	r3, [r7, #12]
}
    7446:	4618      	mov	r0, r3
    7448:	3710      	adds	r7, #16
    744a:	46bd      	mov	sp, r7
    744c:	bd80      	pop	{r7, pc}
    744e:	bf00      	nop
    7450:	000072b1 	.word	0x000072b1

00007454 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7454:	b580      	push	{r7, lr}
    7456:	b082      	sub	sp, #8
    7458:	af00      	add	r7, sp, #0
    745a:	6078      	str	r0, [r7, #4]
    745c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    745e:	687b      	ldr	r3, [r7, #4]
    7460:	683a      	ldr	r2, [r7, #0]
    7462:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7464:	2103      	movs	r1, #3
    7466:	6878      	ldr	r0, [r7, #4]
    7468:	4b02      	ldr	r3, [pc, #8]	; (7474 <hri_tcc_write_CTRLA_reg+0x20>)
    746a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    746c:	bf00      	nop
    746e:	3708      	adds	r7, #8
    7470:	46bd      	mov	sp, r7
    7472:	bd80      	pop	{r7, pc}
    7474:	000072b1 	.word	0x000072b1

00007478 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7478:	b480      	push	{r7}
    747a:	b083      	sub	sp, #12
    747c:	af00      	add	r7, sp, #0
    747e:	6078      	str	r0, [r7, #4]
    7480:	460b      	mov	r3, r1
    7482:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	78fa      	ldrb	r2, [r7, #3]
    7488:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    748a:	bf00      	nop
    748c:	370c      	adds	r7, #12
    748e:	46bd      	mov	sp, r7
    7490:	f85d 7b04 	ldr.w	r7, [sp], #4
    7494:	4770      	bx	lr

00007496 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7496:	b480      	push	{r7}
    7498:	b083      	sub	sp, #12
    749a:	af00      	add	r7, sp, #0
    749c:	6078      	str	r0, [r7, #4]
    749e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    74a0:	687b      	ldr	r3, [r7, #4]
    74a2:	683a      	ldr	r2, [r7, #0]
    74a4:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    74a6:	bf00      	nop
    74a8:	370c      	adds	r7, #12
    74aa:	46bd      	mov	sp, r7
    74ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    74b0:	4770      	bx	lr
	...

000074b4 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    74b4:	b580      	push	{r7, lr}
    74b6:	b082      	sub	sp, #8
    74b8:	af00      	add	r7, sp, #0
    74ba:	6078      	str	r0, [r7, #4]
    74bc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	683a      	ldr	r2, [r7, #0]
    74c2:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74c4:	2180      	movs	r1, #128	; 0x80
    74c6:	6878      	ldr	r0, [r7, #4]
    74c8:	4b02      	ldr	r3, [pc, #8]	; (74d4 <hri_tcc_write_PER_reg+0x20>)
    74ca:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    74cc:	bf00      	nop
    74ce:	3708      	adds	r7, #8
    74d0:	46bd      	mov	sp, r7
    74d2:	bd80      	pop	{r7, pc}
    74d4:	000072b1 	.word	0x000072b1

000074d8 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    74d8:	b580      	push	{r7, lr}
    74da:	b082      	sub	sp, #8
    74dc:	af00      	add	r7, sp, #0
    74de:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    74e0:	2180      	movs	r1, #128	; 0x80
    74e2:	6878      	ldr	r0, [r7, #4]
    74e4:	4b03      	ldr	r3, [pc, #12]	; (74f4 <hri_tcc_read_PER_reg+0x1c>)
    74e6:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    74e8:	687b      	ldr	r3, [r7, #4]
    74ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    74ec:	4618      	mov	r0, r3
    74ee:	3708      	adds	r7, #8
    74f0:	46bd      	mov	sp, r7
    74f2:	bd80      	pop	{r7, pc}
    74f4:	000072b1 	.word	0x000072b1

000074f8 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    74f8:	b480      	push	{r7}
    74fa:	b083      	sub	sp, #12
    74fc:	af00      	add	r7, sp, #0
    74fe:	6078      	str	r0, [r7, #4]
    7500:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7502:	687b      	ldr	r3, [r7, #4]
    7504:	4a0c      	ldr	r2, [pc, #48]	; (7538 <_tcc_init_irq_param+0x40>)
    7506:	4293      	cmp	r3, r2
    7508:	d102      	bne.n	7510 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    750a:	4a0c      	ldr	r2, [pc, #48]	; (753c <_tcc_init_irq_param+0x44>)
    750c:	683b      	ldr	r3, [r7, #0]
    750e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	4a0b      	ldr	r2, [pc, #44]	; (7540 <_tcc_init_irq_param+0x48>)
    7514:	4293      	cmp	r3, r2
    7516:	d102      	bne.n	751e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7518:	4a0a      	ldr	r2, [pc, #40]	; (7544 <_tcc_init_irq_param+0x4c>)
    751a:	683b      	ldr	r3, [r7, #0]
    751c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	4a09      	ldr	r2, [pc, #36]	; (7548 <_tcc_init_irq_param+0x50>)
    7522:	4293      	cmp	r3, r2
    7524:	d102      	bne.n	752c <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7526:	4a09      	ldr	r2, [pc, #36]	; (754c <_tcc_init_irq_param+0x54>)
    7528:	683b      	ldr	r3, [r7, #0]
    752a:	6013      	str	r3, [r2, #0]
	}
}
    752c:	bf00      	nop
    752e:	370c      	adds	r7, #12
    7530:	46bd      	mov	sp, r7
    7532:	f85d 7b04 	ldr.w	r7, [sp], #4
    7536:	4770      	bx	lr
    7538:	41016000 	.word	0x41016000
    753c:	20000960 	.word	0x20000960
    7540:	41018000 	.word	0x41018000
    7544:	20000964 	.word	0x20000964
    7548:	42000c00 	.word	0x42000c00
    754c:	20000968 	.word	0x20000968

00007550 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7550:	b580      	push	{r7, lr}
    7552:	b084      	sub	sp, #16
    7554:	af00      	add	r7, sp, #0
    7556:	6078      	str	r0, [r7, #4]
    7558:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    755a:	6838      	ldr	r0, [r7, #0]
    755c:	4b33      	ldr	r3, [pc, #204]	; (762c <_tcc_timer_init+0xdc>)
    755e:	4798      	blx	r3
    7560:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7562:	68fb      	ldr	r3, [r7, #12]
    7564:	2b00      	cmp	r3, #0
    7566:	d102      	bne.n	756e <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7568:	f06f 0309 	mvn.w	r3, #9
    756c:	e05a      	b.n	7624 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	683a      	ldr	r2, [r7, #0]
    7572:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7574:	2101      	movs	r1, #1
    7576:	6838      	ldr	r0, [r7, #0]
    7578:	4b2d      	ldr	r3, [pc, #180]	; (7630 <_tcc_timer_init+0xe0>)
    757a:	4798      	blx	r3
    757c:	4603      	mov	r3, r0
    757e:	f083 0301 	eor.w	r3, r3, #1
    7582:	b2db      	uxtb	r3, r3
    7584:	2b00      	cmp	r3, #0
    7586:	d011      	beq.n	75ac <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7588:	2102      	movs	r1, #2
    758a:	6838      	ldr	r0, [r7, #0]
    758c:	4b29      	ldr	r3, [pc, #164]	; (7634 <_tcc_timer_init+0xe4>)
    758e:	4798      	blx	r3
    7590:	4603      	mov	r3, r0
    7592:	2b00      	cmp	r3, #0
    7594:	d006      	beq.n	75a4 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7596:	6838      	ldr	r0, [r7, #0]
    7598:	4b27      	ldr	r3, [pc, #156]	; (7638 <_tcc_timer_init+0xe8>)
    759a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    759c:	2102      	movs	r1, #2
    759e:	6838      	ldr	r0, [r7, #0]
    75a0:	4b26      	ldr	r3, [pc, #152]	; (763c <_tcc_timer_init+0xec>)
    75a2:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    75a4:	2101      	movs	r1, #1
    75a6:	6838      	ldr	r0, [r7, #0]
    75a8:	4b25      	ldr	r3, [pc, #148]	; (7640 <_tcc_timer_init+0xf0>)
    75aa:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    75ac:	2101      	movs	r1, #1
    75ae:	6838      	ldr	r0, [r7, #0]
    75b0:	4b22      	ldr	r3, [pc, #136]	; (763c <_tcc_timer_init+0xec>)
    75b2:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    75b4:	68fb      	ldr	r3, [r7, #12]
    75b6:	689b      	ldr	r3, [r3, #8]
    75b8:	4619      	mov	r1, r3
    75ba:	6838      	ldr	r0, [r7, #0]
    75bc:	4b20      	ldr	r3, [pc, #128]	; (7640 <_tcc_timer_init+0xf0>)
    75be:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    75c0:	68fb      	ldr	r3, [r7, #12]
    75c2:	7b1b      	ldrb	r3, [r3, #12]
    75c4:	4619      	mov	r1, r3
    75c6:	6838      	ldr	r0, [r7, #0]
    75c8:	4b1e      	ldr	r3, [pc, #120]	; (7644 <_tcc_timer_init+0xf4>)
    75ca:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    75cc:	68fb      	ldr	r3, [r7, #12]
    75ce:	7b5b      	ldrb	r3, [r3, #13]
    75d0:	4619      	mov	r1, r3
    75d2:	6838      	ldr	r0, [r7, #0]
    75d4:	4b1c      	ldr	r3, [pc, #112]	; (7648 <_tcc_timer_init+0xf8>)
    75d6:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    75d8:	68fb      	ldr	r3, [r7, #12]
    75da:	691b      	ldr	r3, [r3, #16]
    75dc:	4619      	mov	r1, r3
    75de:	6838      	ldr	r0, [r7, #0]
    75e0:	4b1a      	ldr	r3, [pc, #104]	; (764c <_tcc_timer_init+0xfc>)
    75e2:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    75e4:	68fb      	ldr	r3, [r7, #12]
    75e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75e8:	4619      	mov	r1, r3
    75ea:	6838      	ldr	r0, [r7, #0]
    75ec:	4b18      	ldr	r3, [pc, #96]	; (7650 <_tcc_timer_init+0x100>)
    75ee:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    75f0:	6838      	ldr	r0, [r7, #0]
    75f2:	4b18      	ldr	r3, [pc, #96]	; (7654 <_tcc_timer_init+0x104>)
    75f4:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    75f6:	6879      	ldr	r1, [r7, #4]
    75f8:	6838      	ldr	r0, [r7, #0]
    75fa:	4b17      	ldr	r3, [pc, #92]	; (7658 <_tcc_timer_init+0x108>)
    75fc:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    75fe:	68fb      	ldr	r3, [r7, #12]
    7600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7604:	4618      	mov	r0, r3
    7606:	4b15      	ldr	r3, [pc, #84]	; (765c <_tcc_timer_init+0x10c>)
    7608:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    760a:	68fb      	ldr	r3, [r7, #12]
    760c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7610:	4618      	mov	r0, r3
    7612:	4b13      	ldr	r3, [pc, #76]	; (7660 <_tcc_timer_init+0x110>)
    7614:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7616:	68fb      	ldr	r3, [r7, #12]
    7618:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    761c:	4618      	mov	r0, r3
    761e:	4b11      	ldr	r3, [pc, #68]	; (7664 <_tcc_timer_init+0x114>)
    7620:	4798      	blx	r3

	return ERR_NONE;
    7622:	2300      	movs	r3, #0
}
    7624:	4618      	mov	r0, r3
    7626:	3710      	adds	r7, #16
    7628:	46bd      	mov	sp, r7
    762a:	bd80      	pop	{r7, pc}
    762c:	00007835 	.word	0x00007835
    7630:	000072d5 	.word	0x000072d5
    7634:	00007425 	.word	0x00007425
    7638:	000073fd 	.word	0x000073fd
    763c:	000072b1 	.word	0x000072b1
    7640:	00007455 	.word	0x00007455
    7644:	0000733d 	.word	0x0000733d
    7648:	00007479 	.word	0x00007479
    764c:	00007497 	.word	0x00007497
    7650:	000074b5 	.word	0x000074b5
    7654:	0000735b 	.word	0x0000735b
    7658:	000074f9 	.word	0x000074f9
    765c:	00007231 	.word	0x00007231
    7660:	00007275 	.word	0x00007275
    7664:	000071f5 	.word	0x000071f5

00007668 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7668:	b580      	push	{r7, lr}
    766a:	b084      	sub	sp, #16
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	68db      	ldr	r3, [r3, #12]
    7674:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7676:	68f8      	ldr	r0, [r7, #12]
    7678:	4b0a      	ldr	r3, [pc, #40]	; (76a4 <_tcc_timer_deinit+0x3c>)
    767a:	4798      	blx	r3
    767c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    767e:	68bb      	ldr	r3, [r7, #8]
    7680:	2b00      	cmp	r3, #0
    7682:	d00b      	beq.n	769c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7684:	68bb      	ldr	r3, [r7, #8]
    7686:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    768a:	4618      	mov	r0, r3
    768c:	4b06      	ldr	r3, [pc, #24]	; (76a8 <_tcc_timer_deinit+0x40>)
    768e:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7690:	68f8      	ldr	r0, [r7, #12]
    7692:	4b06      	ldr	r3, [pc, #24]	; (76ac <_tcc_timer_deinit+0x44>)
    7694:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7696:	68f8      	ldr	r0, [r7, #12]
    7698:	4b05      	ldr	r3, [pc, #20]	; (76b0 <_tcc_timer_deinit+0x48>)
    769a:	4798      	blx	r3
	}
}
    769c:	bf00      	nop
    769e:	3710      	adds	r7, #16
    76a0:	46bd      	mov	sp, r7
    76a2:	bd80      	pop	{r7, pc}
    76a4:	00007835 	.word	0x00007835
    76a8:	00007231 	.word	0x00007231
    76ac:	000073fd 	.word	0x000073fd
    76b0:	00007375 	.word	0x00007375

000076b4 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b082      	sub	sp, #8
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	68db      	ldr	r3, [r3, #12]
    76c0:	4618      	mov	r0, r3
    76c2:	4b03      	ldr	r3, [pc, #12]	; (76d0 <_tcc_timer_start+0x1c>)
    76c4:	4798      	blx	r3
}
    76c6:	bf00      	nop
    76c8:	3708      	adds	r7, #8
    76ca:	46bd      	mov	sp, r7
    76cc:	bd80      	pop	{r7, pc}
    76ce:	bf00      	nop
    76d0:	0000739d 	.word	0x0000739d

000076d4 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b082      	sub	sp, #8
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	68db      	ldr	r3, [r3, #12]
    76e0:	4618      	mov	r0, r3
    76e2:	4b03      	ldr	r3, [pc, #12]	; (76f0 <_tcc_timer_stop+0x1c>)
    76e4:	4798      	blx	r3
}
    76e6:	bf00      	nop
    76e8:	3708      	adds	r7, #8
    76ea:	46bd      	mov	sp, r7
    76ec:	bd80      	pop	{r7, pc}
    76ee:	bf00      	nop
    76f0:	000073fd 	.word	0x000073fd

000076f4 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	b082      	sub	sp, #8
    76f8:	af00      	add	r7, sp, #0
    76fa:	6078      	str	r0, [r7, #4]
    76fc:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    76fe:	687b      	ldr	r3, [r7, #4]
    7700:	68db      	ldr	r3, [r3, #12]
    7702:	6839      	ldr	r1, [r7, #0]
    7704:	4618      	mov	r0, r3
    7706:	4b03      	ldr	r3, [pc, #12]	; (7714 <_tcc_timer_set_period+0x20>)
    7708:	4798      	blx	r3
}
    770a:	bf00      	nop
    770c:	3708      	adds	r7, #8
    770e:	46bd      	mov	sp, r7
    7710:	bd80      	pop	{r7, pc}
    7712:	bf00      	nop
    7714:	000074b5 	.word	0x000074b5

00007718 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7718:	b580      	push	{r7, lr}
    771a:	b082      	sub	sp, #8
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	68db      	ldr	r3, [r3, #12]
    7724:	4618      	mov	r0, r3
    7726:	4b03      	ldr	r3, [pc, #12]	; (7734 <_tcc_timer_get_period+0x1c>)
    7728:	4798      	blx	r3
    772a:	4603      	mov	r3, r0
}
    772c:	4618      	mov	r0, r3
    772e:	3708      	adds	r7, #8
    7730:	46bd      	mov	sp, r7
    7732:	bd80      	pop	{r7, pc}
    7734:	000074d9 	.word	0x000074d9

00007738 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7738:	b580      	push	{r7, lr}
    773a:	b082      	sub	sp, #8
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	68db      	ldr	r3, [r3, #12]
    7744:	4618      	mov	r0, r3
    7746:	4b03      	ldr	r3, [pc, #12]	; (7754 <_tcc_timer_is_started+0x1c>)
    7748:	4798      	blx	r3
    774a:	4603      	mov	r3, r0
}
    774c:	4618      	mov	r0, r3
    774e:	3708      	adds	r7, #8
    7750:	46bd      	mov	sp, r7
    7752:	bd80      	pop	{r7, pc}
    7754:	000073c5 	.word	0x000073c5

00007758 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7758:	b480      	push	{r7}
    775a:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    775c:	4b02      	ldr	r3, [pc, #8]	; (7768 <_tcc_get_timer+0x10>)
}
    775e:	4618      	mov	r0, r3
    7760:	46bd      	mov	sp, r7
    7762:	f85d 7b04 	ldr.w	r7, [sp], #4
    7766:	4770      	bx	lr
    7768:	200000f0 	.word	0x200000f0

0000776c <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    776c:	b580      	push	{r7, lr}
    776e:	b084      	sub	sp, #16
    7770:	af00      	add	r7, sp, #0
    7772:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	68db      	ldr	r3, [r3, #12]
    7778:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    777a:	68f8      	ldr	r0, [r7, #12]
    777c:	4b08      	ldr	r3, [pc, #32]	; (77a0 <_tcc_timer_set_irq+0x34>)
    777e:	4798      	blx	r3
    7780:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7782:	68bb      	ldr	r3, [r7, #8]
    7784:	2b00      	cmp	r3, #0
    7786:	d006      	beq.n	7796 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7788:	68bb      	ldr	r3, [r7, #8]
    778a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    778e:	b2db      	uxtb	r3, r3
    7790:	4618      	mov	r0, r3
    7792:	4b04      	ldr	r3, [pc, #16]	; (77a4 <_tcc_timer_set_irq+0x38>)
    7794:	4798      	blx	r3
	}
}
    7796:	bf00      	nop
    7798:	3710      	adds	r7, #16
    779a:	46bd      	mov	sp, r7
    779c:	bd80      	pop	{r7, pc}
    779e:	bf00      	nop
    77a0:	00007835 	.word	0x00007835
    77a4:	000041b5 	.word	0x000041b5

000077a8 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b084      	sub	sp, #16
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	68db      	ldr	r3, [r3, #12]
    77b4:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    77b6:	68f8      	ldr	r0, [r7, #12]
    77b8:	4b07      	ldr	r3, [pc, #28]	; (77d8 <tcc_interrupt_handler+0x30>)
    77ba:	4798      	blx	r3
    77bc:	4603      	mov	r3, r0
    77be:	2b00      	cmp	r3, #0
    77c0:	d006      	beq.n	77d0 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    77c2:	68f8      	ldr	r0, [r7, #12]
    77c4:	4b05      	ldr	r3, [pc, #20]	; (77dc <tcc_interrupt_handler+0x34>)
    77c6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	681b      	ldr	r3, [r3, #0]
    77cc:	6878      	ldr	r0, [r7, #4]
    77ce:	4798      	blx	r3
	}
}
    77d0:	bf00      	nop
    77d2:	3710      	adds	r7, #16
    77d4:	46bd      	mov	sp, r7
    77d6:	bd80      	pop	{r7, pc}
    77d8:	000072fd 	.word	0x000072fd
    77dc:	00007323 	.word	0x00007323

000077e0 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    77e0:	b580      	push	{r7, lr}
    77e2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    77e4:	4b03      	ldr	r3, [pc, #12]	; (77f4 <TCC0_0_Handler+0x14>)
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	4618      	mov	r0, r3
    77ea:	4b03      	ldr	r3, [pc, #12]	; (77f8 <TCC0_0_Handler+0x18>)
    77ec:	4798      	blx	r3
}
    77ee:	bf00      	nop
    77f0:	bd80      	pop	{r7, pc}
    77f2:	bf00      	nop
    77f4:	20000960 	.word	0x20000960
    77f8:	000077a9 	.word	0x000077a9

000077fc <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    77fc:	b580      	push	{r7, lr}
    77fe:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7800:	4b03      	ldr	r3, [pc, #12]	; (7810 <TCC1_0_Handler+0x14>)
    7802:	681b      	ldr	r3, [r3, #0]
    7804:	4618      	mov	r0, r3
    7806:	4b03      	ldr	r3, [pc, #12]	; (7814 <TCC1_0_Handler+0x18>)
    7808:	4798      	blx	r3
}
    780a:	bf00      	nop
    780c:	bd80      	pop	{r7, pc}
    780e:	bf00      	nop
    7810:	20000964 	.word	0x20000964
    7814:	000077a9 	.word	0x000077a9

00007818 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7818:	b580      	push	{r7, lr}
    781a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    781c:	4b03      	ldr	r3, [pc, #12]	; (782c <TCC2_0_Handler+0x14>)
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	4618      	mov	r0, r3
    7822:	4b03      	ldr	r3, [pc, #12]	; (7830 <TCC2_0_Handler+0x18>)
    7824:	4798      	blx	r3
}
    7826:	bf00      	nop
    7828:	bd80      	pop	{r7, pc}
    782a:	bf00      	nop
    782c:	20000968 	.word	0x20000968
    7830:	000077a9 	.word	0x000077a9

00007834 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7834:	b480      	push	{r7}
    7836:	b085      	sub	sp, #20
    7838:	af00      	add	r7, sp, #0
    783a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    783c:	2300      	movs	r3, #0
    783e:	73fb      	strb	r3, [r7, #15]
    7840:	e015      	b.n	786e <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7842:	7bfa      	ldrb	r2, [r7, #15]
    7844:	490f      	ldr	r1, [pc, #60]	; (7884 <_get_tcc_cfg+0x50>)
    7846:	4613      	mov	r3, r2
    7848:	005b      	lsls	r3, r3, #1
    784a:	4413      	add	r3, r2
    784c:	011b      	lsls	r3, r3, #4
    784e:	440b      	add	r3, r1
    7850:	681a      	ldr	r2, [r3, #0]
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	429a      	cmp	r2, r3
    7856:	d107      	bne.n	7868 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7858:	7bfa      	ldrb	r2, [r7, #15]
    785a:	4613      	mov	r3, r2
    785c:	005b      	lsls	r3, r3, #1
    785e:	4413      	add	r3, r2
    7860:	011b      	lsls	r3, r3, #4
    7862:	4a08      	ldr	r2, [pc, #32]	; (7884 <_get_tcc_cfg+0x50>)
    7864:	4413      	add	r3, r2
    7866:	e006      	b.n	7876 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7868:	7bfb      	ldrb	r3, [r7, #15]
    786a:	3301      	adds	r3, #1
    786c:	73fb      	strb	r3, [r7, #15]
    786e:	7bfb      	ldrb	r3, [r7, #15]
    7870:	2b02      	cmp	r3, #2
    7872:	d9e6      	bls.n	7842 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7874:	2300      	movs	r3, #0
}
    7876:	4618      	mov	r0, r3
    7878:	3714      	adds	r7, #20
    787a:	46bd      	mov	sp, r7
    787c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7880:	4770      	bx	lr
    7882:	bf00      	nop
    7884:	20000060 	.word	0x20000060

00007888 <__NVIC_EnableIRQ>:
{
    7888:	b480      	push	{r7}
    788a:	b083      	sub	sp, #12
    788c:	af00      	add	r7, sp, #0
    788e:	4603      	mov	r3, r0
    7890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7896:	2b00      	cmp	r3, #0
    7898:	db0b      	blt.n	78b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    789a:	4909      	ldr	r1, [pc, #36]	; (78c0 <__NVIC_EnableIRQ+0x38>)
    789c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78a0:	095b      	lsrs	r3, r3, #5
    78a2:	88fa      	ldrh	r2, [r7, #6]
    78a4:	f002 021f 	and.w	r2, r2, #31
    78a8:	2001      	movs	r0, #1
    78aa:	fa00 f202 	lsl.w	r2, r0, r2
    78ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78b2:	bf00      	nop
    78b4:	370c      	adds	r7, #12
    78b6:	46bd      	mov	sp, r7
    78b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78bc:	4770      	bx	lr
    78be:	bf00      	nop
    78c0:	e000e100 	.word	0xe000e100

000078c4 <__NVIC_DisableIRQ>:
{
    78c4:	b480      	push	{r7}
    78c6:	b083      	sub	sp, #12
    78c8:	af00      	add	r7, sp, #0
    78ca:	4603      	mov	r3, r0
    78cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    78ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78d2:	2b00      	cmp	r3, #0
    78d4:	db10      	blt.n	78f8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78d6:	490b      	ldr	r1, [pc, #44]	; (7904 <__NVIC_DisableIRQ+0x40>)
    78d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    78dc:	095b      	lsrs	r3, r3, #5
    78de:	88fa      	ldrh	r2, [r7, #6]
    78e0:	f002 021f 	and.w	r2, r2, #31
    78e4:	2001      	movs	r0, #1
    78e6:	fa00 f202 	lsl.w	r2, r0, r2
    78ea:	3320      	adds	r3, #32
    78ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    78f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    78f4:	f3bf 8f6f 	isb	sy
}
    78f8:	bf00      	nop
    78fa:	370c      	adds	r7, #12
    78fc:	46bd      	mov	sp, r7
    78fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7902:	4770      	bx	lr
    7904:	e000e100 	.word	0xe000e100

00007908 <__NVIC_ClearPendingIRQ>:
{
    7908:	b480      	push	{r7}
    790a:	b083      	sub	sp, #12
    790c:	af00      	add	r7, sp, #0
    790e:	4603      	mov	r3, r0
    7910:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7916:	2b00      	cmp	r3, #0
    7918:	db0c      	blt.n	7934 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    791a:	4909      	ldr	r1, [pc, #36]	; (7940 <__NVIC_ClearPendingIRQ+0x38>)
    791c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7920:	095b      	lsrs	r3, r3, #5
    7922:	88fa      	ldrh	r2, [r7, #6]
    7924:	f002 021f 	and.w	r2, r2, #31
    7928:	2001      	movs	r0, #1
    792a:	fa00 f202 	lsl.w	r2, r0, r2
    792e:	3360      	adds	r3, #96	; 0x60
    7930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7934:	bf00      	nop
    7936:	370c      	adds	r7, #12
    7938:	46bd      	mov	sp, r7
    793a:	f85d 7b04 	ldr.w	r7, [sp], #4
    793e:	4770      	bx	lr
    7940:	e000e100 	.word	0xe000e100

00007944 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7944:	b480      	push	{r7}
    7946:	b083      	sub	sp, #12
    7948:	af00      	add	r7, sp, #0
    794a:	6078      	str	r0, [r7, #4]
    794c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    794e:	bf00      	nop
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	691a      	ldr	r2, [r3, #16]
    7954:	683b      	ldr	r3, [r7, #0]
    7956:	4013      	ands	r3, r2
    7958:	2b00      	cmp	r3, #0
    795a:	d1f9      	bne.n	7950 <hri_tc_wait_for_sync+0xc>
	};
}
    795c:	bf00      	nop
    795e:	370c      	adds	r7, #12
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
    7970:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	691a      	ldr	r2, [r3, #16]
    7976:	683b      	ldr	r3, [r7, #0]
    7978:	4013      	ands	r3, r2
    797a:	2b00      	cmp	r3, #0
    797c:	bf14      	ite	ne
    797e:	2301      	movne	r3, #1
    7980:	2300      	moveq	r3, #0
    7982:	b2db      	uxtb	r3, r3
}
    7984:	4618      	mov	r0, r3
    7986:	370c      	adds	r7, #12
    7988:	46bd      	mov	sp, r7
    798a:	f85d 7b04 	ldr.w	r7, [sp], #4
    798e:	4770      	bx	lr

00007990 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	7a9b      	ldrb	r3, [r3, #10]
    799c:	b2db      	uxtb	r3, r3
    799e:	f003 0301 	and.w	r3, r3, #1
    79a2:	2b00      	cmp	r3, #0
    79a4:	bf14      	ite	ne
    79a6:	2301      	movne	r3, #1
    79a8:	2300      	moveq	r3, #0
    79aa:	b2db      	uxtb	r3, r3
}
    79ac:	4618      	mov	r0, r3
    79ae:	370c      	adds	r7, #12
    79b0:	46bd      	mov	sp, r7
    79b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79b6:	4770      	bx	lr

000079b8 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    79b8:	b480      	push	{r7}
    79ba:	b083      	sub	sp, #12
    79bc:	af00      	add	r7, sp, #0
    79be:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	2201      	movs	r2, #1
    79c4:	729a      	strb	r2, [r3, #10]
}
    79c6:	bf00      	nop
    79c8:	370c      	adds	r7, #12
    79ca:	46bd      	mov	sp, r7
    79cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d0:	4770      	bx	lr

000079d2 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    79d2:	b480      	push	{r7}
    79d4:	b083      	sub	sp, #12
    79d6:	af00      	add	r7, sp, #0
    79d8:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	2202      	movs	r2, #2
    79de:	729a      	strb	r2, [r3, #10]
}
    79e0:	bf00      	nop
    79e2:	370c      	adds	r7, #12
    79e4:	46bd      	mov	sp, r7
    79e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ea:	4770      	bx	lr

000079ec <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    79ec:	b480      	push	{r7}
    79ee:	b083      	sub	sp, #12
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	2201      	movs	r2, #1
    79f8:	725a      	strb	r2, [r3, #9]
}
    79fa:	bf00      	nop
    79fc:	370c      	adds	r7, #12
    79fe:	46bd      	mov	sp, r7
    7a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a04:	4770      	bx	lr

00007a06 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7a06:	b480      	push	{r7}
    7a08:	b083      	sub	sp, #12
    7a0a:	af00      	add	r7, sp, #0
    7a0c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	7a5b      	ldrb	r3, [r3, #9]
    7a12:	b2db      	uxtb	r3, r3
    7a14:	085b      	lsrs	r3, r3, #1
    7a16:	f003 0301 	and.w	r3, r3, #1
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	bf14      	ite	ne
    7a1e:	2301      	movne	r3, #1
    7a20:	2300      	moveq	r3, #0
    7a22:	b2db      	uxtb	r3, r3
}
    7a24:	4618      	mov	r0, r3
    7a26:	370c      	adds	r7, #12
    7a28:	46bd      	mov	sp, r7
    7a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2e:	4770      	bx	lr

00007a30 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	f043 0201 	orr.w	r2, r3, #1
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7a44:	2101      	movs	r1, #1
    7a46:	6878      	ldr	r0, [r7, #4]
    7a48:	4b02      	ldr	r3, [pc, #8]	; (7a54 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7a4a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a4c:	bf00      	nop
    7a4e:	3708      	adds	r7, #8
    7a50:	46bd      	mov	sp, r7
    7a52:	bd80      	pop	{r7, pc}
    7a54:	00007945 	.word	0x00007945

00007a58 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b082      	sub	sp, #8
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	f043 0202 	orr.w	r2, r3, #2
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a6c:	2103      	movs	r1, #3
    7a6e:	6878      	ldr	r0, [r7, #4]
    7a70:	4b02      	ldr	r3, [pc, #8]	; (7a7c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7a72:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7a74:	bf00      	nop
    7a76:	3708      	adds	r7, #8
    7a78:	46bd      	mov	sp, r7
    7a7a:	bd80      	pop	{r7, pc}
    7a7c:	00007945 	.word	0x00007945

00007a80 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7a80:	b580      	push	{r7, lr}
    7a82:	b084      	sub	sp, #16
    7a84:	af00      	add	r7, sp, #0
    7a86:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7a88:	2103      	movs	r1, #3
    7a8a:	6878      	ldr	r0, [r7, #4]
    7a8c:	4b09      	ldr	r3, [pc, #36]	; (7ab4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7a8e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	681b      	ldr	r3, [r3, #0]
    7a94:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7a96:	68fb      	ldr	r3, [r7, #12]
    7a98:	085b      	lsrs	r3, r3, #1
    7a9a:	f003 0301 	and.w	r3, r3, #1
    7a9e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7aa0:	68fb      	ldr	r3, [r7, #12]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	bf14      	ite	ne
    7aa6:	2301      	movne	r3, #1
    7aa8:	2300      	moveq	r3, #0
    7aaa:	b2db      	uxtb	r3, r3
}
    7aac:	4618      	mov	r0, r3
    7aae:	3710      	adds	r7, #16
    7ab0:	46bd      	mov	sp, r7
    7ab2:	bd80      	pop	{r7, pc}
    7ab4:	00007945 	.word	0x00007945

00007ab8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7ab8:	b580      	push	{r7, lr}
    7aba:	b082      	sub	sp, #8
    7abc:	af00      	add	r7, sp, #0
    7abe:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	681b      	ldr	r3, [r3, #0]
    7ac4:	f023 0202 	bic.w	r2, r3, #2
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7acc:	2103      	movs	r1, #3
    7ace:	6878      	ldr	r0, [r7, #4]
    7ad0:	4b02      	ldr	r3, [pc, #8]	; (7adc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7ad2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ad4:	bf00      	nop
    7ad6:	3708      	adds	r7, #8
    7ad8:	46bd      	mov	sp, r7
    7ada:	bd80      	pop	{r7, pc}
    7adc:	00007945 	.word	0x00007945

00007ae0 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    7ae0:	b480      	push	{r7}
    7ae2:	b085      	sub	sp, #20
    7ae4:	af00      	add	r7, sp, #0
    7ae6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	681b      	ldr	r3, [r3, #0]
    7aec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    7aee:	68fb      	ldr	r3, [r7, #12]
    7af0:	089b      	lsrs	r3, r3, #2
    7af2:	f003 0303 	and.w	r3, r3, #3
    7af6:	60fb      	str	r3, [r7, #12]
	return tmp;
    7af8:	68fb      	ldr	r3, [r7, #12]
}
    7afa:	4618      	mov	r0, r3
    7afc:	3714      	adds	r7, #20
    7afe:	46bd      	mov	sp, r7
    7b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b04:	4770      	bx	lr
	...

00007b08 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    7b08:	b580      	push	{r7, lr}
    7b0a:	b084      	sub	sp, #16
    7b0c:	af00      	add	r7, sp, #0
    7b0e:	6078      	str	r0, [r7, #4]
    7b10:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b12:	2103      	movs	r1, #3
    7b14:	6878      	ldr	r0, [r7, #4]
    7b16:	4b07      	ldr	r3, [pc, #28]	; (7b34 <hri_tc_get_CTRLA_reg+0x2c>)
    7b18:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7b1a:	687b      	ldr	r3, [r7, #4]
    7b1c:	681b      	ldr	r3, [r3, #0]
    7b1e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b20:	68fa      	ldr	r2, [r7, #12]
    7b22:	683b      	ldr	r3, [r7, #0]
    7b24:	4013      	ands	r3, r2
    7b26:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b28:	68fb      	ldr	r3, [r7, #12]
}
    7b2a:	4618      	mov	r0, r3
    7b2c:	3710      	adds	r7, #16
    7b2e:	46bd      	mov	sp, r7
    7b30:	bd80      	pop	{r7, pc}
    7b32:	bf00      	nop
    7b34:	00007945 	.word	0x00007945

00007b38 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7b38:	b580      	push	{r7, lr}
    7b3a:	b082      	sub	sp, #8
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
    7b40:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	683a      	ldr	r2, [r7, #0]
    7b46:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7b48:	2103      	movs	r1, #3
    7b4a:	6878      	ldr	r0, [r7, #4]
    7b4c:	4b02      	ldr	r3, [pc, #8]	; (7b58 <hri_tc_write_CTRLA_reg+0x20>)
    7b4e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7b50:	bf00      	nop
    7b52:	3708      	adds	r7, #8
    7b54:	46bd      	mov	sp, r7
    7b56:	bd80      	pop	{r7, pc}
    7b58:	00007945 	.word	0x00007945

00007b5c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7b5c:	b480      	push	{r7}
    7b5e:	b083      	sub	sp, #12
    7b60:	af00      	add	r7, sp, #0
    7b62:	6078      	str	r0, [r7, #4]
    7b64:	460b      	mov	r3, r1
    7b66:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	887a      	ldrh	r2, [r7, #2]
    7b6c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b6e:	bf00      	nop
    7b70:	370c      	adds	r7, #12
    7b72:	46bd      	mov	sp, r7
    7b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b78:	4770      	bx	lr

00007b7a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7b7a:	b480      	push	{r7}
    7b7c:	b083      	sub	sp, #12
    7b7e:	af00      	add	r7, sp, #0
    7b80:	6078      	str	r0, [r7, #4]
    7b82:	460b      	mov	r3, r1
    7b84:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	78fa      	ldrb	r2, [r7, #3]
    7b8a:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7b8c:	bf00      	nop
    7b8e:	370c      	adds	r7, #12
    7b90:	46bd      	mov	sp, r7
    7b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b96:	4770      	bx	lr

00007b98 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7b98:	b480      	push	{r7}
    7b9a:	b083      	sub	sp, #12
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	6078      	str	r0, [r7, #4]
    7ba0:	460b      	mov	r3, r1
    7ba2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	78fa      	ldrb	r2, [r7, #3]
    7ba8:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7baa:	bf00      	nop
    7bac:	370c      	adds	r7, #12
    7bae:	46bd      	mov	sp, r7
    7bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bb4:	4770      	bx	lr
	...

00007bb8 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	b082      	sub	sp, #8
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	6078      	str	r0, [r7, #4]
    7bc0:	460b      	mov	r3, r1
    7bc2:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7bc4:	687b      	ldr	r3, [r7, #4]
    7bc6:	78fa      	ldrb	r2, [r7, #3]
    7bc8:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7bca:	2120      	movs	r1, #32
    7bcc:	6878      	ldr	r0, [r7, #4]
    7bce:	4b03      	ldr	r3, [pc, #12]	; (7bdc <hri_tccount8_write_PER_reg+0x24>)
    7bd0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7bd2:	bf00      	nop
    7bd4:	3708      	adds	r7, #8
    7bd6:	46bd      	mov	sp, r7
    7bd8:	bd80      	pop	{r7, pc}
    7bda:	bf00      	nop
    7bdc:	00007945 	.word	0x00007945

00007be0 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    7be0:	b580      	push	{r7, lr}
    7be2:	b082      	sub	sp, #8
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7be8:	2120      	movs	r1, #32
    7bea:	6878      	ldr	r0, [r7, #4]
    7bec:	4b04      	ldr	r3, [pc, #16]	; (7c00 <hri_tccount8_read_PER_reg+0x20>)
    7bee:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    7bf0:	687b      	ldr	r3, [r7, #4]
    7bf2:	7edb      	ldrb	r3, [r3, #27]
    7bf4:	b2db      	uxtb	r3, r3
}
    7bf6:	4618      	mov	r0, r3
    7bf8:	3708      	adds	r7, #8
    7bfa:	46bd      	mov	sp, r7
    7bfc:	bd80      	pop	{r7, pc}
    7bfe:	bf00      	nop
    7c00:	00007945 	.word	0x00007945

00007c04 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7c04:	b580      	push	{r7, lr}
    7c06:	b082      	sub	sp, #8
    7c08:	af00      	add	r7, sp, #0
    7c0a:	6078      	str	r0, [r7, #4]
    7c0c:	460b      	mov	r3, r1
    7c0e:	70fb      	strb	r3, [r7, #3]
    7c10:	4613      	mov	r3, r2
    7c12:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7c14:	78fb      	ldrb	r3, [r7, #3]
    7c16:	687a      	ldr	r2, [r7, #4]
    7c18:	4413      	add	r3, r2
    7c1a:	78ba      	ldrb	r2, [r7, #2]
    7c1c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c1e:	21c0      	movs	r1, #192	; 0xc0
    7c20:	6878      	ldr	r0, [r7, #4]
    7c22:	4b03      	ldr	r3, [pc, #12]	; (7c30 <hri_tccount8_write_CC_reg+0x2c>)
    7c24:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c26:	bf00      	nop
    7c28:	3708      	adds	r7, #8
    7c2a:	46bd      	mov	sp, r7
    7c2c:	bd80      	pop	{r7, pc}
    7c2e:	bf00      	nop
    7c30:	00007945 	.word	0x00007945

00007c34 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b082      	sub	sp, #8
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
    7c3c:	460b      	mov	r3, r1
    7c3e:	70fb      	strb	r3, [r7, #3]
    7c40:	4613      	mov	r3, r2
    7c42:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7c44:	78fb      	ldrb	r3, [r7, #3]
    7c46:	687a      	ldr	r2, [r7, #4]
    7c48:	330c      	adds	r3, #12
    7c4a:	005b      	lsls	r3, r3, #1
    7c4c:	4413      	add	r3, r2
    7c4e:	883a      	ldrh	r2, [r7, #0]
    7c50:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c52:	21c0      	movs	r1, #192	; 0xc0
    7c54:	6878      	ldr	r0, [r7, #4]
    7c56:	4b03      	ldr	r3, [pc, #12]	; (7c64 <hri_tccount16_write_CC_reg+0x30>)
    7c58:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7c5a:	bf00      	nop
    7c5c:	3708      	adds	r7, #8
    7c5e:	46bd      	mov	sp, r7
    7c60:	bd80      	pop	{r7, pc}
    7c62:	bf00      	nop
    7c64:	00007945 	.word	0x00007945

00007c68 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	b082      	sub	sp, #8
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	6078      	str	r0, [r7, #4]
    7c70:	460b      	mov	r3, r1
    7c72:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7c74:	21c0      	movs	r1, #192	; 0xc0
    7c76:	6878      	ldr	r0, [r7, #4]
    7c78:	4b06      	ldr	r3, [pc, #24]	; (7c94 <hri_tccount16_read_CC_reg+0x2c>)
    7c7a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7c7c:	78fb      	ldrb	r3, [r7, #3]
    7c7e:	687a      	ldr	r2, [r7, #4]
    7c80:	330c      	adds	r3, #12
    7c82:	005b      	lsls	r3, r3, #1
    7c84:	4413      	add	r3, r2
    7c86:	889b      	ldrh	r3, [r3, #4]
    7c88:	b29b      	uxth	r3, r3
}
    7c8a:	4618      	mov	r0, r3
    7c8c:	3708      	adds	r7, #8
    7c8e:	46bd      	mov	sp, r7
    7c90:	bd80      	pop	{r7, pc}
    7c92:	bf00      	nop
    7c94:	00007945 	.word	0x00007945

00007c98 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7c98:	b580      	push	{r7, lr}
    7c9a:	b084      	sub	sp, #16
    7c9c:	af00      	add	r7, sp, #0
    7c9e:	60f8      	str	r0, [r7, #12]
    7ca0:	460b      	mov	r3, r1
    7ca2:	607a      	str	r2, [r7, #4]
    7ca4:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7ca6:	7afb      	ldrb	r3, [r7, #11]
    7ca8:	68fa      	ldr	r2, [r7, #12]
    7caa:	3306      	adds	r3, #6
    7cac:	009b      	lsls	r3, r3, #2
    7cae:	4413      	add	r3, r2
    7cb0:	687a      	ldr	r2, [r7, #4]
    7cb2:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cb4:	21c0      	movs	r1, #192	; 0xc0
    7cb6:	68f8      	ldr	r0, [r7, #12]
    7cb8:	4b02      	ldr	r3, [pc, #8]	; (7cc4 <hri_tccount32_write_CC_reg+0x2c>)
    7cba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7cbc:	bf00      	nop
    7cbe:	3710      	adds	r7, #16
    7cc0:	46bd      	mov	sp, r7
    7cc2:	bd80      	pop	{r7, pc}
    7cc4:	00007945 	.word	0x00007945

00007cc8 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b082      	sub	sp, #8
    7ccc:	af00      	add	r7, sp, #0
    7cce:	6078      	str	r0, [r7, #4]
    7cd0:	460b      	mov	r3, r1
    7cd2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7cd4:	21c0      	movs	r1, #192	; 0xc0
    7cd6:	6878      	ldr	r0, [r7, #4]
    7cd8:	4b05      	ldr	r3, [pc, #20]	; (7cf0 <hri_tccount32_read_CC_reg+0x28>)
    7cda:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    7cdc:	78fb      	ldrb	r3, [r7, #3]
    7cde:	687a      	ldr	r2, [r7, #4]
    7ce0:	3306      	adds	r3, #6
    7ce2:	009b      	lsls	r3, r3, #2
    7ce4:	4413      	add	r3, r2
    7ce6:	685b      	ldr	r3, [r3, #4]
}
    7ce8:	4618      	mov	r0, r3
    7cea:	3708      	adds	r7, #8
    7cec:	46bd      	mov	sp, r7
    7cee:	bd80      	pop	{r7, pc}
    7cf0:	00007945 	.word	0x00007945

00007cf4 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    7cf4:	b580      	push	{r7, lr}
    7cf6:	b084      	sub	sp, #16
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
    7cfc:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7cfe:	6838      	ldr	r0, [r7, #0]
    7d00:	4b93      	ldr	r3, [pc, #588]	; (7f50 <_tc_timer_init+0x25c>)
    7d02:	4798      	blx	r3
    7d04:	4603      	mov	r3, r0
    7d06:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	683a      	ldr	r2, [r7, #0]
    7d0c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7d0e:	22a4      	movs	r2, #164	; 0xa4
    7d10:	4990      	ldr	r1, [pc, #576]	; (7f54 <_tc_timer_init+0x260>)
    7d12:	2001      	movs	r0, #1
    7d14:	4b90      	ldr	r3, [pc, #576]	; (7f58 <_tc_timer_init+0x264>)
    7d16:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7d18:	2101      	movs	r1, #1
    7d1a:	6838      	ldr	r0, [r7, #0]
    7d1c:	4b8f      	ldr	r3, [pc, #572]	; (7f5c <_tc_timer_init+0x268>)
    7d1e:	4798      	blx	r3
    7d20:	4603      	mov	r3, r0
    7d22:	f083 0301 	eor.w	r3, r3, #1
    7d26:	b2db      	uxtb	r3, r3
    7d28:	2b00      	cmp	r3, #0
    7d2a:	d011      	beq.n	7d50 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7d2c:	2102      	movs	r1, #2
    7d2e:	6838      	ldr	r0, [r7, #0]
    7d30:	4b8b      	ldr	r3, [pc, #556]	; (7f60 <_tc_timer_init+0x26c>)
    7d32:	4798      	blx	r3
    7d34:	4603      	mov	r3, r0
    7d36:	2b00      	cmp	r3, #0
    7d38:	d006      	beq.n	7d48 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7d3a:	6838      	ldr	r0, [r7, #0]
    7d3c:	4b89      	ldr	r3, [pc, #548]	; (7f64 <_tc_timer_init+0x270>)
    7d3e:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7d40:	2102      	movs	r1, #2
    7d42:	6838      	ldr	r0, [r7, #0]
    7d44:	4b88      	ldr	r3, [pc, #544]	; (7f68 <_tc_timer_init+0x274>)
    7d46:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7d48:	2101      	movs	r1, #1
    7d4a:	6838      	ldr	r0, [r7, #0]
    7d4c:	4b87      	ldr	r3, [pc, #540]	; (7f6c <_tc_timer_init+0x278>)
    7d4e:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7d50:	2101      	movs	r1, #1
    7d52:	6838      	ldr	r0, [r7, #0]
    7d54:	4b84      	ldr	r3, [pc, #528]	; (7f68 <_tc_timer_init+0x274>)
    7d56:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7d58:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d5c:	4984      	ldr	r1, [pc, #528]	; (7f70 <_tc_timer_init+0x27c>)
    7d5e:	4613      	mov	r3, r2
    7d60:	009b      	lsls	r3, r3, #2
    7d62:	4413      	add	r3, r2
    7d64:	009b      	lsls	r3, r3, #2
    7d66:	440b      	add	r3, r1
    7d68:	3304      	adds	r3, #4
    7d6a:	681b      	ldr	r3, [r3, #0]
    7d6c:	4619      	mov	r1, r3
    7d6e:	6838      	ldr	r0, [r7, #0]
    7d70:	4b7e      	ldr	r3, [pc, #504]	; (7f6c <_tc_timer_init+0x278>)
    7d72:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7d74:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d78:	497d      	ldr	r1, [pc, #500]	; (7f70 <_tc_timer_init+0x27c>)
    7d7a:	4613      	mov	r3, r2
    7d7c:	009b      	lsls	r3, r3, #2
    7d7e:	4413      	add	r3, r2
    7d80:	009b      	lsls	r3, r3, #2
    7d82:	440b      	add	r3, r1
    7d84:	330a      	adds	r3, #10
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	4619      	mov	r1, r3
    7d8a:	6838      	ldr	r0, [r7, #0]
    7d8c:	4b79      	ldr	r3, [pc, #484]	; (7f74 <_tc_timer_init+0x280>)
    7d8e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7d90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7d94:	4976      	ldr	r1, [pc, #472]	; (7f70 <_tc_timer_init+0x27c>)
    7d96:	4613      	mov	r3, r2
    7d98:	009b      	lsls	r3, r3, #2
    7d9a:	4413      	add	r3, r2
    7d9c:	009b      	lsls	r3, r3, #2
    7d9e:	440b      	add	r3, r1
    7da0:	3308      	adds	r3, #8
    7da2:	881b      	ldrh	r3, [r3, #0]
    7da4:	4619      	mov	r1, r3
    7da6:	6838      	ldr	r0, [r7, #0]
    7da8:	4b73      	ldr	r3, [pc, #460]	; (7f78 <_tc_timer_init+0x284>)
    7daa:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7dac:	2101      	movs	r1, #1
    7dae:	6838      	ldr	r0, [r7, #0]
    7db0:	4b72      	ldr	r3, [pc, #456]	; (7f7c <_tc_timer_init+0x288>)
    7db2:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7db4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7db8:	496d      	ldr	r1, [pc, #436]	; (7f70 <_tc_timer_init+0x27c>)
    7dba:	4613      	mov	r3, r2
    7dbc:	009b      	lsls	r3, r3, #2
    7dbe:	4413      	add	r3, r2
    7dc0:	009b      	lsls	r3, r3, #2
    7dc2:	440b      	add	r3, r1
    7dc4:	3304      	adds	r3, #4
    7dc6:	681b      	ldr	r3, [r3, #0]
    7dc8:	f003 030c 	and.w	r3, r3, #12
    7dcc:	2b08      	cmp	r3, #8
    7dce:	d11e      	bne.n	7e0e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7dd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7dd4:	4966      	ldr	r1, [pc, #408]	; (7f70 <_tc_timer_init+0x27c>)
    7dd6:	4613      	mov	r3, r2
    7dd8:	009b      	lsls	r3, r3, #2
    7dda:	4413      	add	r3, r2
    7ddc:	009b      	lsls	r3, r3, #2
    7dde:	440b      	add	r3, r1
    7de0:	330c      	adds	r3, #12
    7de2:	681b      	ldr	r3, [r3, #0]
    7de4:	461a      	mov	r2, r3
    7de6:	2100      	movs	r1, #0
    7de8:	6838      	ldr	r0, [r7, #0]
    7dea:	4b65      	ldr	r3, [pc, #404]	; (7f80 <_tc_timer_init+0x28c>)
    7dec:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7dee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7df2:	495f      	ldr	r1, [pc, #380]	; (7f70 <_tc_timer_init+0x27c>)
    7df4:	4613      	mov	r3, r2
    7df6:	009b      	lsls	r3, r3, #2
    7df8:	4413      	add	r3, r2
    7dfa:	009b      	lsls	r3, r3, #2
    7dfc:	440b      	add	r3, r1
    7dfe:	3310      	adds	r3, #16
    7e00:	681b      	ldr	r3, [r3, #0]
    7e02:	461a      	mov	r2, r3
    7e04:	2101      	movs	r1, #1
    7e06:	6838      	ldr	r0, [r7, #0]
    7e08:	4b5d      	ldr	r3, [pc, #372]	; (7f80 <_tc_timer_init+0x28c>)
    7e0a:	4798      	blx	r3
    7e0c:	e06a      	b.n	7ee4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7e0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e12:	4957      	ldr	r1, [pc, #348]	; (7f70 <_tc_timer_init+0x27c>)
    7e14:	4613      	mov	r3, r2
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	009b      	lsls	r3, r3, #2
    7e1c:	440b      	add	r3, r1
    7e1e:	3304      	adds	r3, #4
    7e20:	681b      	ldr	r3, [r3, #0]
    7e22:	f003 030c 	and.w	r3, r3, #12
    7e26:	2b00      	cmp	r3, #0
    7e28:	d120      	bne.n	7e6c <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7e2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e2e:	4950      	ldr	r1, [pc, #320]	; (7f70 <_tc_timer_init+0x27c>)
    7e30:	4613      	mov	r3, r2
    7e32:	009b      	lsls	r3, r3, #2
    7e34:	4413      	add	r3, r2
    7e36:	009b      	lsls	r3, r3, #2
    7e38:	440b      	add	r3, r1
    7e3a:	330c      	adds	r3, #12
    7e3c:	681b      	ldr	r3, [r3, #0]
    7e3e:	b29b      	uxth	r3, r3
    7e40:	461a      	mov	r2, r3
    7e42:	2100      	movs	r1, #0
    7e44:	6838      	ldr	r0, [r7, #0]
    7e46:	4b4f      	ldr	r3, [pc, #316]	; (7f84 <_tc_timer_init+0x290>)
    7e48:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7e4a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e4e:	4948      	ldr	r1, [pc, #288]	; (7f70 <_tc_timer_init+0x27c>)
    7e50:	4613      	mov	r3, r2
    7e52:	009b      	lsls	r3, r3, #2
    7e54:	4413      	add	r3, r2
    7e56:	009b      	lsls	r3, r3, #2
    7e58:	440b      	add	r3, r1
    7e5a:	3310      	adds	r3, #16
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	b29b      	uxth	r3, r3
    7e60:	461a      	mov	r2, r3
    7e62:	2101      	movs	r1, #1
    7e64:	6838      	ldr	r0, [r7, #0]
    7e66:	4b47      	ldr	r3, [pc, #284]	; (7f84 <_tc_timer_init+0x290>)
    7e68:	4798      	blx	r3
    7e6a:	e03b      	b.n	7ee4 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7e6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e70:	493f      	ldr	r1, [pc, #252]	; (7f70 <_tc_timer_init+0x27c>)
    7e72:	4613      	mov	r3, r2
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	4413      	add	r3, r2
    7e78:	009b      	lsls	r3, r3, #2
    7e7a:	440b      	add	r3, r1
    7e7c:	3304      	adds	r3, #4
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	f003 030c 	and.w	r3, r3, #12
    7e84:	2b04      	cmp	r3, #4
    7e86:	d12d      	bne.n	7ee4 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7e88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7e8c:	4938      	ldr	r1, [pc, #224]	; (7f70 <_tc_timer_init+0x27c>)
    7e8e:	4613      	mov	r3, r2
    7e90:	009b      	lsls	r3, r3, #2
    7e92:	4413      	add	r3, r2
    7e94:	009b      	lsls	r3, r3, #2
    7e96:	440b      	add	r3, r1
    7e98:	330c      	adds	r3, #12
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	b2db      	uxtb	r3, r3
    7e9e:	461a      	mov	r2, r3
    7ea0:	2100      	movs	r1, #0
    7ea2:	6838      	ldr	r0, [r7, #0]
    7ea4:	4b38      	ldr	r3, [pc, #224]	; (7f88 <_tc_timer_init+0x294>)
    7ea6:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7ea8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7eac:	4930      	ldr	r1, [pc, #192]	; (7f70 <_tc_timer_init+0x27c>)
    7eae:	4613      	mov	r3, r2
    7eb0:	009b      	lsls	r3, r3, #2
    7eb2:	4413      	add	r3, r2
    7eb4:	009b      	lsls	r3, r3, #2
    7eb6:	440b      	add	r3, r1
    7eb8:	3310      	adds	r3, #16
    7eba:	681b      	ldr	r3, [r3, #0]
    7ebc:	b2db      	uxtb	r3, r3
    7ebe:	461a      	mov	r2, r3
    7ec0:	2101      	movs	r1, #1
    7ec2:	6838      	ldr	r0, [r7, #0]
    7ec4:	4b30      	ldr	r3, [pc, #192]	; (7f88 <_tc_timer_init+0x294>)
    7ec6:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7ec8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ecc:	4928      	ldr	r1, [pc, #160]	; (7f70 <_tc_timer_init+0x27c>)
    7ece:	4613      	mov	r3, r2
    7ed0:	009b      	lsls	r3, r3, #2
    7ed2:	4413      	add	r3, r2
    7ed4:	009b      	lsls	r3, r3, #2
    7ed6:	440b      	add	r3, r1
    7ed8:	330b      	adds	r3, #11
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	4619      	mov	r1, r3
    7ede:	6838      	ldr	r0, [r7, #0]
    7ee0:	4b2a      	ldr	r3, [pc, #168]	; (7f8c <_tc_timer_init+0x298>)
    7ee2:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7ee4:	6838      	ldr	r0, [r7, #0]
    7ee6:	4b2a      	ldr	r3, [pc, #168]	; (7f90 <_tc_timer_init+0x29c>)
    7ee8:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7eea:	6879      	ldr	r1, [r7, #4]
    7eec:	6838      	ldr	r0, [r7, #0]
    7eee:	4b29      	ldr	r3, [pc, #164]	; (7f94 <_tc_timer_init+0x2a0>)
    7ef0:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7ef2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7ef6:	491e      	ldr	r1, [pc, #120]	; (7f70 <_tc_timer_init+0x27c>)
    7ef8:	4613      	mov	r3, r2
    7efa:	009b      	lsls	r3, r3, #2
    7efc:	4413      	add	r3, r2
    7efe:	009b      	lsls	r3, r3, #2
    7f00:	440b      	add	r3, r1
    7f02:	3302      	adds	r3, #2
    7f04:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f08:	4618      	mov	r0, r3
    7f0a:	4b23      	ldr	r3, [pc, #140]	; (7f98 <_tc_timer_init+0x2a4>)
    7f0c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7f0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f12:	4917      	ldr	r1, [pc, #92]	; (7f70 <_tc_timer_init+0x27c>)
    7f14:	4613      	mov	r3, r2
    7f16:	009b      	lsls	r3, r3, #2
    7f18:	4413      	add	r3, r2
    7f1a:	009b      	lsls	r3, r3, #2
    7f1c:	440b      	add	r3, r1
    7f1e:	3302      	adds	r3, #2
    7f20:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f24:	4618      	mov	r0, r3
    7f26:	4b1d      	ldr	r3, [pc, #116]	; (7f9c <_tc_timer_init+0x2a8>)
    7f28:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7f2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7f2e:	4910      	ldr	r1, [pc, #64]	; (7f70 <_tc_timer_init+0x27c>)
    7f30:	4613      	mov	r3, r2
    7f32:	009b      	lsls	r3, r3, #2
    7f34:	4413      	add	r3, r2
    7f36:	009b      	lsls	r3, r3, #2
    7f38:	440b      	add	r3, r1
    7f3a:	3302      	adds	r3, #2
    7f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7f40:	4618      	mov	r0, r3
    7f42:	4b17      	ldr	r3, [pc, #92]	; (7fa0 <_tc_timer_init+0x2ac>)
    7f44:	4798      	blx	r3

	return ERR_NONE;
    7f46:	2300      	movs	r3, #0
}
    7f48:	4618      	mov	r0, r3
    7f4a:	3710      	adds	r7, #16
    7f4c:	46bd      	mov	sp, r7
    7f4e:	bd80      	pop	{r7, pc}
    7f50:	00008585 	.word	0x00008585
    7f54:	0000f310 	.word	0x0000f310
    7f58:	0000396d 	.word	0x0000396d
    7f5c:	00007969 	.word	0x00007969
    7f60:	00007b09 	.word	0x00007b09
    7f64:	00007ab9 	.word	0x00007ab9
    7f68:	00007945 	.word	0x00007945
    7f6c:	00007b39 	.word	0x00007b39
    7f70:	20000110 	.word	0x20000110
    7f74:	00007b99 	.word	0x00007b99
    7f78:	00007b5d 	.word	0x00007b5d
    7f7c:	00007b7b 	.word	0x00007b7b
    7f80:	00007c99 	.word	0x00007c99
    7f84:	00007c35 	.word	0x00007c35
    7f88:	00007c05 	.word	0x00007c05
    7f8c:	00007bb9 	.word	0x00007bb9
    7f90:	000079ed 	.word	0x000079ed
    7f94:	000085ed 	.word	0x000085ed
    7f98:	000078c5 	.word	0x000078c5
    7f9c:	00007909 	.word	0x00007909
    7fa0:	00007889 	.word	0x00007889

00007fa4 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b084      	sub	sp, #16
    7fa8:	af00      	add	r7, sp, #0
    7faa:	6078      	str	r0, [r7, #4]
    7fac:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7fae:	6838      	ldr	r0, [r7, #0]
    7fb0:	4b73      	ldr	r3, [pc, #460]	; (8180 <_pwm_init+0x1dc>)
    7fb2:	4798      	blx	r3
    7fb4:	4603      	mov	r3, r0
    7fb6:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7fb8:	687b      	ldr	r3, [r7, #4]
    7fba:	683a      	ldr	r2, [r7, #0]
    7fbc:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7fbe:	2101      	movs	r1, #1
    7fc0:	6838      	ldr	r0, [r7, #0]
    7fc2:	4b70      	ldr	r3, [pc, #448]	; (8184 <_pwm_init+0x1e0>)
    7fc4:	4798      	blx	r3
    7fc6:	4603      	mov	r3, r0
    7fc8:	f083 0301 	eor.w	r3, r3, #1
    7fcc:	b2db      	uxtb	r3, r3
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d011      	beq.n	7ff6 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7fd2:	2102      	movs	r1, #2
    7fd4:	6838      	ldr	r0, [r7, #0]
    7fd6:	4b6c      	ldr	r3, [pc, #432]	; (8188 <_pwm_init+0x1e4>)
    7fd8:	4798      	blx	r3
    7fda:	4603      	mov	r3, r0
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d006      	beq.n	7fee <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7fe0:	6838      	ldr	r0, [r7, #0]
    7fe2:	4b6a      	ldr	r3, [pc, #424]	; (818c <_pwm_init+0x1e8>)
    7fe4:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7fe6:	2102      	movs	r1, #2
    7fe8:	6838      	ldr	r0, [r7, #0]
    7fea:	4b69      	ldr	r3, [pc, #420]	; (8190 <_pwm_init+0x1ec>)
    7fec:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7fee:	2101      	movs	r1, #1
    7ff0:	6838      	ldr	r0, [r7, #0]
    7ff2:	4b68      	ldr	r3, [pc, #416]	; (8194 <_pwm_init+0x1f0>)
    7ff4:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7ff6:	2101      	movs	r1, #1
    7ff8:	6838      	ldr	r0, [r7, #0]
    7ffa:	4b65      	ldr	r3, [pc, #404]	; (8190 <_pwm_init+0x1ec>)
    7ffc:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7ffe:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8002:	4965      	ldr	r1, [pc, #404]	; (8198 <_pwm_init+0x1f4>)
    8004:	4613      	mov	r3, r2
    8006:	009b      	lsls	r3, r3, #2
    8008:	4413      	add	r3, r2
    800a:	009b      	lsls	r3, r3, #2
    800c:	440b      	add	r3, r1
    800e:	3304      	adds	r3, #4
    8010:	681b      	ldr	r3, [r3, #0]
    8012:	4619      	mov	r1, r3
    8014:	6838      	ldr	r0, [r7, #0]
    8016:	4b5f      	ldr	r3, [pc, #380]	; (8194 <_pwm_init+0x1f0>)
    8018:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    801a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    801e:	495e      	ldr	r1, [pc, #376]	; (8198 <_pwm_init+0x1f4>)
    8020:	4613      	mov	r3, r2
    8022:	009b      	lsls	r3, r3, #2
    8024:	4413      	add	r3, r2
    8026:	009b      	lsls	r3, r3, #2
    8028:	440b      	add	r3, r1
    802a:	330a      	adds	r3, #10
    802c:	781b      	ldrb	r3, [r3, #0]
    802e:	4619      	mov	r1, r3
    8030:	6838      	ldr	r0, [r7, #0]
    8032:	4b5a      	ldr	r3, [pc, #360]	; (819c <_pwm_init+0x1f8>)
    8034:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8036:	f997 200f 	ldrsb.w	r2, [r7, #15]
    803a:	4957      	ldr	r1, [pc, #348]	; (8198 <_pwm_init+0x1f4>)
    803c:	4613      	mov	r3, r2
    803e:	009b      	lsls	r3, r3, #2
    8040:	4413      	add	r3, r2
    8042:	009b      	lsls	r3, r3, #2
    8044:	440b      	add	r3, r1
    8046:	3308      	adds	r3, #8
    8048:	881b      	ldrh	r3, [r3, #0]
    804a:	4619      	mov	r1, r3
    804c:	6838      	ldr	r0, [r7, #0]
    804e:	4b54      	ldr	r3, [pc, #336]	; (81a0 <_pwm_init+0x1fc>)
    8050:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8052:	2103      	movs	r1, #3
    8054:	6838      	ldr	r0, [r7, #0]
    8056:	4b53      	ldr	r3, [pc, #332]	; (81a4 <_pwm_init+0x200>)
    8058:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    805a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    805e:	494e      	ldr	r1, [pc, #312]	; (8198 <_pwm_init+0x1f4>)
    8060:	4613      	mov	r3, r2
    8062:	009b      	lsls	r3, r3, #2
    8064:	4413      	add	r3, r2
    8066:	009b      	lsls	r3, r3, #2
    8068:	440b      	add	r3, r1
    806a:	3304      	adds	r3, #4
    806c:	681b      	ldr	r3, [r3, #0]
    806e:	f003 030c 	and.w	r3, r3, #12
    8072:	2b08      	cmp	r3, #8
    8074:	d11e      	bne.n	80b4 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8076:	f997 200f 	ldrsb.w	r2, [r7, #15]
    807a:	4947      	ldr	r1, [pc, #284]	; (8198 <_pwm_init+0x1f4>)
    807c:	4613      	mov	r3, r2
    807e:	009b      	lsls	r3, r3, #2
    8080:	4413      	add	r3, r2
    8082:	009b      	lsls	r3, r3, #2
    8084:	440b      	add	r3, r1
    8086:	330c      	adds	r3, #12
    8088:	681b      	ldr	r3, [r3, #0]
    808a:	461a      	mov	r2, r3
    808c:	2100      	movs	r1, #0
    808e:	6838      	ldr	r0, [r7, #0]
    8090:	4b45      	ldr	r3, [pc, #276]	; (81a8 <_pwm_init+0x204>)
    8092:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8094:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8098:	493f      	ldr	r1, [pc, #252]	; (8198 <_pwm_init+0x1f4>)
    809a:	4613      	mov	r3, r2
    809c:	009b      	lsls	r3, r3, #2
    809e:	4413      	add	r3, r2
    80a0:	009b      	lsls	r3, r3, #2
    80a2:	440b      	add	r3, r1
    80a4:	3310      	adds	r3, #16
    80a6:	681b      	ldr	r3, [r3, #0]
    80a8:	461a      	mov	r2, r3
    80aa:	2101      	movs	r1, #1
    80ac:	6838      	ldr	r0, [r7, #0]
    80ae:	4b3e      	ldr	r3, [pc, #248]	; (81a8 <_pwm_init+0x204>)
    80b0:	4798      	blx	r3
    80b2:	e031      	b.n	8118 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    80b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80b8:	4937      	ldr	r1, [pc, #220]	; (8198 <_pwm_init+0x1f4>)
    80ba:	4613      	mov	r3, r2
    80bc:	009b      	lsls	r3, r3, #2
    80be:	4413      	add	r3, r2
    80c0:	009b      	lsls	r3, r3, #2
    80c2:	440b      	add	r3, r1
    80c4:	3304      	adds	r3, #4
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	f003 030c 	and.w	r3, r3, #12
    80cc:	2b00      	cmp	r3, #0
    80ce:	d120      	bne.n	8112 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    80d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80d4:	4930      	ldr	r1, [pc, #192]	; (8198 <_pwm_init+0x1f4>)
    80d6:	4613      	mov	r3, r2
    80d8:	009b      	lsls	r3, r3, #2
    80da:	4413      	add	r3, r2
    80dc:	009b      	lsls	r3, r3, #2
    80de:	440b      	add	r3, r1
    80e0:	330c      	adds	r3, #12
    80e2:	681b      	ldr	r3, [r3, #0]
    80e4:	b29b      	uxth	r3, r3
    80e6:	461a      	mov	r2, r3
    80e8:	2100      	movs	r1, #0
    80ea:	6838      	ldr	r0, [r7, #0]
    80ec:	4b2f      	ldr	r3, [pc, #188]	; (81ac <_pwm_init+0x208>)
    80ee:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    80f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    80f4:	4928      	ldr	r1, [pc, #160]	; (8198 <_pwm_init+0x1f4>)
    80f6:	4613      	mov	r3, r2
    80f8:	009b      	lsls	r3, r3, #2
    80fa:	4413      	add	r3, r2
    80fc:	009b      	lsls	r3, r3, #2
    80fe:	440b      	add	r3, r1
    8100:	3310      	adds	r3, #16
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	b29b      	uxth	r3, r3
    8106:	461a      	mov	r2, r3
    8108:	2101      	movs	r1, #1
    810a:	6838      	ldr	r0, [r7, #0]
    810c:	4b27      	ldr	r3, [pc, #156]	; (81ac <_pwm_init+0x208>)
    810e:	4798      	blx	r3
    8110:	e002      	b.n	8118 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    8112:	f04f 33ff 	mov.w	r3, #4294967295
    8116:	e02e      	b.n	8176 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8118:	6879      	ldr	r1, [r7, #4]
    811a:	6838      	ldr	r0, [r7, #0]
    811c:	4b24      	ldr	r3, [pc, #144]	; (81b0 <_pwm_init+0x20c>)
    811e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8120:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8124:	491c      	ldr	r1, [pc, #112]	; (8198 <_pwm_init+0x1f4>)
    8126:	4613      	mov	r3, r2
    8128:	009b      	lsls	r3, r3, #2
    812a:	4413      	add	r3, r2
    812c:	009b      	lsls	r3, r3, #2
    812e:	440b      	add	r3, r1
    8130:	3302      	adds	r3, #2
    8132:	f9b3 3000 	ldrsh.w	r3, [r3]
    8136:	4618      	mov	r0, r3
    8138:	4b1e      	ldr	r3, [pc, #120]	; (81b4 <_pwm_init+0x210>)
    813a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    813c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8140:	4915      	ldr	r1, [pc, #84]	; (8198 <_pwm_init+0x1f4>)
    8142:	4613      	mov	r3, r2
    8144:	009b      	lsls	r3, r3, #2
    8146:	4413      	add	r3, r2
    8148:	009b      	lsls	r3, r3, #2
    814a:	440b      	add	r3, r1
    814c:	3302      	adds	r3, #2
    814e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8152:	4618      	mov	r0, r3
    8154:	4b18      	ldr	r3, [pc, #96]	; (81b8 <_pwm_init+0x214>)
    8156:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8158:	f997 200f 	ldrsb.w	r2, [r7, #15]
    815c:	490e      	ldr	r1, [pc, #56]	; (8198 <_pwm_init+0x1f4>)
    815e:	4613      	mov	r3, r2
    8160:	009b      	lsls	r3, r3, #2
    8162:	4413      	add	r3, r2
    8164:	009b      	lsls	r3, r3, #2
    8166:	440b      	add	r3, r1
    8168:	3302      	adds	r3, #2
    816a:	f9b3 3000 	ldrsh.w	r3, [r3]
    816e:	4618      	mov	r0, r3
    8170:	4b12      	ldr	r3, [pc, #72]	; (81bc <_pwm_init+0x218>)
    8172:	4798      	blx	r3

	return 0;
    8174:	2300      	movs	r3, #0
}
    8176:	4618      	mov	r0, r3
    8178:	3710      	adds	r7, #16
    817a:	46bd      	mov	sp, r7
    817c:	bd80      	pop	{r7, pc}
    817e:	bf00      	nop
    8180:	00008585 	.word	0x00008585
    8184:	00007969 	.word	0x00007969
    8188:	00007b09 	.word	0x00007b09
    818c:	00007ab9 	.word	0x00007ab9
    8190:	00007945 	.word	0x00007945
    8194:	00007b39 	.word	0x00007b39
    8198:	20000110 	.word	0x20000110
    819c:	00007b99 	.word	0x00007b99
    81a0:	00007b5d 	.word	0x00007b5d
    81a4:	00007b7b 	.word	0x00007b7b
    81a8:	00007c99 	.word	0x00007c99
    81ac:	00007c35 	.word	0x00007c35
    81b0:	000085ed 	.word	0x000085ed
    81b4:	000078c5 	.word	0x000078c5
    81b8:	00007909 	.word	0x00007909
    81bc:	00007889 	.word	0x00007889

000081c0 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    81c0:	b580      	push	{r7, lr}
    81c2:	b084      	sub	sp, #16
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	68db      	ldr	r3, [r3, #12]
    81cc:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    81ce:	68f8      	ldr	r0, [r7, #12]
    81d0:	4b10      	ldr	r3, [pc, #64]	; (8214 <_tc_timer_deinit+0x54>)
    81d2:	4798      	blx	r3
    81d4:	4603      	mov	r3, r0
    81d6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    81d8:	22f9      	movs	r2, #249	; 0xf9
    81da:	490f      	ldr	r1, [pc, #60]	; (8218 <_tc_timer_deinit+0x58>)
    81dc:	2001      	movs	r0, #1
    81de:	4b0f      	ldr	r3, [pc, #60]	; (821c <_tc_timer_deinit+0x5c>)
    81e0:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    81e2:	f997 200b 	ldrsb.w	r2, [r7, #11]
    81e6:	490e      	ldr	r1, [pc, #56]	; (8220 <_tc_timer_deinit+0x60>)
    81e8:	4613      	mov	r3, r2
    81ea:	009b      	lsls	r3, r3, #2
    81ec:	4413      	add	r3, r2
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	440b      	add	r3, r1
    81f2:	3302      	adds	r3, #2
    81f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    81f8:	4618      	mov	r0, r3
    81fa:	4b0a      	ldr	r3, [pc, #40]	; (8224 <_tc_timer_deinit+0x64>)
    81fc:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    81fe:	68f8      	ldr	r0, [r7, #12]
    8200:	4b09      	ldr	r3, [pc, #36]	; (8228 <_tc_timer_deinit+0x68>)
    8202:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8204:	68f8      	ldr	r0, [r7, #12]
    8206:	4b09      	ldr	r3, [pc, #36]	; (822c <_tc_timer_deinit+0x6c>)
    8208:	4798      	blx	r3
}
    820a:	bf00      	nop
    820c:	3710      	adds	r7, #16
    820e:	46bd      	mov	sp, r7
    8210:	bd80      	pop	{r7, pc}
    8212:	bf00      	nop
    8214:	00008585 	.word	0x00008585
    8218:	0000f310 	.word	0x0000f310
    821c:	0000396d 	.word	0x0000396d
    8220:	20000110 	.word	0x20000110
    8224:	000078c5 	.word	0x000078c5
    8228:	00007ab9 	.word	0x00007ab9
    822c:	00007a31 	.word	0x00007a31

00008230 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	68db      	ldr	r3, [r3, #12]
    823c:	4618      	mov	r0, r3
    823e:	4b03      	ldr	r3, [pc, #12]	; (824c <_tc_timer_start+0x1c>)
    8240:	4798      	blx	r3
}
    8242:	bf00      	nop
    8244:	3708      	adds	r7, #8
    8246:	46bd      	mov	sp, r7
    8248:	bd80      	pop	{r7, pc}
    824a:	bf00      	nop
    824c:	00007a59 	.word	0x00007a59

00008250 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8250:	b580      	push	{r7, lr}
    8252:	b082      	sub	sp, #8
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	691b      	ldr	r3, [r3, #16]
    825c:	4618      	mov	r0, r3
    825e:	4b03      	ldr	r3, [pc, #12]	; (826c <_pwm_enable+0x1c>)
    8260:	4798      	blx	r3
}
    8262:	bf00      	nop
    8264:	3708      	adds	r7, #8
    8266:	46bd      	mov	sp, r7
    8268:	bd80      	pop	{r7, pc}
    826a:	bf00      	nop
    826c:	00007a59 	.word	0x00007a59

00008270 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8270:	b580      	push	{r7, lr}
    8272:	b082      	sub	sp, #8
    8274:	af00      	add	r7, sp, #0
    8276:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8278:	687b      	ldr	r3, [r7, #4]
    827a:	68db      	ldr	r3, [r3, #12]
    827c:	4618      	mov	r0, r3
    827e:	4b03      	ldr	r3, [pc, #12]	; (828c <_tc_timer_stop+0x1c>)
    8280:	4798      	blx	r3
}
    8282:	bf00      	nop
    8284:	3708      	adds	r7, #8
    8286:	46bd      	mov	sp, r7
    8288:	bd80      	pop	{r7, pc}
    828a:	bf00      	nop
    828c:	00007ab9 	.word	0x00007ab9

00008290 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8290:	b580      	push	{r7, lr}
    8292:	b084      	sub	sp, #16
    8294:	af00      	add	r7, sp, #0
    8296:	6078      	str	r0, [r7, #4]
    8298:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    829a:	687b      	ldr	r3, [r7, #4]
    829c:	68db      	ldr	r3, [r3, #12]
    829e:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82a0:	68f8      	ldr	r0, [r7, #12]
    82a2:	4b14      	ldr	r3, [pc, #80]	; (82f4 <_tc_timer_set_period+0x64>)
    82a4:	4798      	blx	r3
    82a6:	4603      	mov	r3, r0
    82a8:	2b02      	cmp	r3, #2
    82aa:	d105      	bne.n	82b8 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    82ac:	683a      	ldr	r2, [r7, #0]
    82ae:	2100      	movs	r1, #0
    82b0:	68f8      	ldr	r0, [r7, #12]
    82b2:	4b11      	ldr	r3, [pc, #68]	; (82f8 <_tc_timer_set_period+0x68>)
    82b4:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    82b6:	e019      	b.n	82ec <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82b8:	68f8      	ldr	r0, [r7, #12]
    82ba:	4b0e      	ldr	r3, [pc, #56]	; (82f4 <_tc_timer_set_period+0x64>)
    82bc:	4798      	blx	r3
    82be:	4603      	mov	r3, r0
    82c0:	2b00      	cmp	r3, #0
    82c2:	d107      	bne.n	82d4 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    82c4:	683b      	ldr	r3, [r7, #0]
    82c6:	b29b      	uxth	r3, r3
    82c8:	461a      	mov	r2, r3
    82ca:	2100      	movs	r1, #0
    82cc:	68f8      	ldr	r0, [r7, #12]
    82ce:	4b0b      	ldr	r3, [pc, #44]	; (82fc <_tc_timer_set_period+0x6c>)
    82d0:	4798      	blx	r3
}
    82d2:	e00b      	b.n	82ec <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    82d4:	68f8      	ldr	r0, [r7, #12]
    82d6:	4b07      	ldr	r3, [pc, #28]	; (82f4 <_tc_timer_set_period+0x64>)
    82d8:	4798      	blx	r3
    82da:	4603      	mov	r3, r0
    82dc:	2b01      	cmp	r3, #1
    82de:	d105      	bne.n	82ec <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    82e0:	683b      	ldr	r3, [r7, #0]
    82e2:	b2db      	uxtb	r3, r3
    82e4:	4619      	mov	r1, r3
    82e6:	68f8      	ldr	r0, [r7, #12]
    82e8:	4b05      	ldr	r3, [pc, #20]	; (8300 <_tc_timer_set_period+0x70>)
    82ea:	4798      	blx	r3
}
    82ec:	bf00      	nop
    82ee:	3710      	adds	r7, #16
    82f0:	46bd      	mov	sp, r7
    82f2:	bd80      	pop	{r7, pc}
    82f4:	00007ae1 	.word	0x00007ae1
    82f8:	00007c99 	.word	0x00007c99
    82fc:	00007c35 	.word	0x00007c35
    8300:	00007bb9 	.word	0x00007bb9

00008304 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8304:	b580      	push	{r7, lr}
    8306:	b084      	sub	sp, #16
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	68db      	ldr	r3, [r3, #12]
    8310:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8312:	68f8      	ldr	r0, [r7, #12]
    8314:	4b13      	ldr	r3, [pc, #76]	; (8364 <_tc_timer_get_period+0x60>)
    8316:	4798      	blx	r3
    8318:	4603      	mov	r3, r0
    831a:	2b02      	cmp	r3, #2
    831c:	d105      	bne.n	832a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    831e:	2100      	movs	r1, #0
    8320:	68f8      	ldr	r0, [r7, #12]
    8322:	4b11      	ldr	r3, [pc, #68]	; (8368 <_tc_timer_get_period+0x64>)
    8324:	4798      	blx	r3
    8326:	4603      	mov	r3, r0
    8328:	e017      	b.n	835a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    832a:	68f8      	ldr	r0, [r7, #12]
    832c:	4b0d      	ldr	r3, [pc, #52]	; (8364 <_tc_timer_get_period+0x60>)
    832e:	4798      	blx	r3
    8330:	4603      	mov	r3, r0
    8332:	2b00      	cmp	r3, #0
    8334:	d105      	bne.n	8342 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8336:	2100      	movs	r1, #0
    8338:	68f8      	ldr	r0, [r7, #12]
    833a:	4b0c      	ldr	r3, [pc, #48]	; (836c <_tc_timer_get_period+0x68>)
    833c:	4798      	blx	r3
    833e:	4603      	mov	r3, r0
    8340:	e00b      	b.n	835a <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8342:	68f8      	ldr	r0, [r7, #12]
    8344:	4b07      	ldr	r3, [pc, #28]	; (8364 <_tc_timer_get_period+0x60>)
    8346:	4798      	blx	r3
    8348:	4603      	mov	r3, r0
    834a:	2b01      	cmp	r3, #1
    834c:	d104      	bne.n	8358 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    834e:	68f8      	ldr	r0, [r7, #12]
    8350:	4b07      	ldr	r3, [pc, #28]	; (8370 <_tc_timer_get_period+0x6c>)
    8352:	4798      	blx	r3
    8354:	4603      	mov	r3, r0
    8356:	e000      	b.n	835a <_tc_timer_get_period+0x56>
	}

	return 0;
    8358:	2300      	movs	r3, #0
}
    835a:	4618      	mov	r0, r3
    835c:	3710      	adds	r7, #16
    835e:	46bd      	mov	sp, r7
    8360:	bd80      	pop	{r7, pc}
    8362:	bf00      	nop
    8364:	00007ae1 	.word	0x00007ae1
    8368:	00007cc9 	.word	0x00007cc9
    836c:	00007c69 	.word	0x00007c69
    8370:	00007be1 	.word	0x00007be1

00008374 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8374:	b580      	push	{r7, lr}
    8376:	b082      	sub	sp, #8
    8378:	af00      	add	r7, sp, #0
    837a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    837c:	687b      	ldr	r3, [r7, #4]
    837e:	68db      	ldr	r3, [r3, #12]
    8380:	4618      	mov	r0, r3
    8382:	4b03      	ldr	r3, [pc, #12]	; (8390 <_tc_timer_is_started+0x1c>)
    8384:	4798      	blx	r3
    8386:	4603      	mov	r3, r0
}
    8388:	4618      	mov	r0, r3
    838a:	3708      	adds	r7, #8
    838c:	46bd      	mov	sp, r7
    838e:	bd80      	pop	{r7, pc}
    8390:	00007a81 	.word	0x00007a81

00008394 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8394:	b580      	push	{r7, lr}
    8396:	b082      	sub	sp, #8
    8398:	af00      	add	r7, sp, #0
    839a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    839c:	687b      	ldr	r3, [r7, #4]
    839e:	691b      	ldr	r3, [r3, #16]
    83a0:	4618      	mov	r0, r3
    83a2:	4b03      	ldr	r3, [pc, #12]	; (83b0 <_pwm_is_enabled+0x1c>)
    83a4:	4798      	blx	r3
    83a6:	4603      	mov	r3, r0
}
    83a8:	4618      	mov	r0, r3
    83aa:	3708      	adds	r7, #8
    83ac:	46bd      	mov	sp, r7
    83ae:	bd80      	pop	{r7, pc}
    83b0:	00007a81 	.word	0x00007a81

000083b4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    83b4:	b480      	push	{r7}
    83b6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    83b8:	4b02      	ldr	r3, [pc, #8]	; (83c4 <_tc_get_timer+0x10>)
}
    83ba:	4618      	mov	r0, r3
    83bc:	46bd      	mov	sp, r7
    83be:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c2:	4770      	bx	lr
    83c4:	20000188 	.word	0x20000188

000083c8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    83c8:	b480      	push	{r7}
    83ca:	af00      	add	r7, sp, #0
	return NULL;
    83cc:	2300      	movs	r3, #0
}
    83ce:	4618      	mov	r0, r3
    83d0:	46bd      	mov	sp, r7
    83d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83d6:	4770      	bx	lr

000083d8 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    83d8:	b580      	push	{r7, lr}
    83da:	b084      	sub	sp, #16
    83dc:	af00      	add	r7, sp, #0
    83de:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    83e0:	687b      	ldr	r3, [r7, #4]
    83e2:	68db      	ldr	r3, [r3, #12]
    83e4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    83e6:	68f8      	ldr	r0, [r7, #12]
    83e8:	4b0e      	ldr	r3, [pc, #56]	; (8424 <_tc_timer_set_irq+0x4c>)
    83ea:	4798      	blx	r3
    83ec:	4603      	mov	r3, r0
    83ee:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    83f0:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    83f4:	490c      	ldr	r1, [pc, #48]	; (8428 <_tc_timer_set_irq+0x50>)
    83f6:	2001      	movs	r0, #1
    83f8:	4b0c      	ldr	r3, [pc, #48]	; (842c <_tc_timer_set_irq+0x54>)
    83fa:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    83fc:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8400:	490b      	ldr	r1, [pc, #44]	; (8430 <_tc_timer_set_irq+0x58>)
    8402:	4613      	mov	r3, r2
    8404:	009b      	lsls	r3, r3, #2
    8406:	4413      	add	r3, r2
    8408:	009b      	lsls	r3, r3, #2
    840a:	440b      	add	r3, r1
    840c:	3302      	adds	r3, #2
    840e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8412:	b2db      	uxtb	r3, r3
    8414:	4618      	mov	r0, r3
    8416:	4b07      	ldr	r3, [pc, #28]	; (8434 <_tc_timer_set_irq+0x5c>)
    8418:	4798      	blx	r3
}
    841a:	bf00      	nop
    841c:	3710      	adds	r7, #16
    841e:	46bd      	mov	sp, r7
    8420:	bd80      	pop	{r7, pc}
    8422:	bf00      	nop
    8424:	00008585 	.word	0x00008585
    8428:	0000f310 	.word	0x0000f310
    842c:	0000396d 	.word	0x0000396d
    8430:	20000110 	.word	0x20000110
    8434:	000041b5 	.word	0x000041b5

00008438 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8438:	b580      	push	{r7, lr}
    843a:	b084      	sub	sp, #16
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8440:	687b      	ldr	r3, [r7, #4]
    8442:	68db      	ldr	r3, [r3, #12]
    8444:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8446:	68f8      	ldr	r0, [r7, #12]
    8448:	4b07      	ldr	r3, [pc, #28]	; (8468 <tc_interrupt_handler+0x30>)
    844a:	4798      	blx	r3
    844c:	4603      	mov	r3, r0
    844e:	2b00      	cmp	r3, #0
    8450:	d006      	beq.n	8460 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8452:	68f8      	ldr	r0, [r7, #12]
    8454:	4b05      	ldr	r3, [pc, #20]	; (846c <tc_interrupt_handler+0x34>)
    8456:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8458:	687b      	ldr	r3, [r7, #4]
    845a:	681b      	ldr	r3, [r3, #0]
    845c:	6878      	ldr	r0, [r7, #4]
    845e:	4798      	blx	r3
	}
}
    8460:	bf00      	nop
    8462:	3710      	adds	r7, #16
    8464:	46bd      	mov	sp, r7
    8466:	bd80      	pop	{r7, pc}
    8468:	00007991 	.word	0x00007991
    846c:	000079b9 	.word	0x000079b9

00008470 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8470:	b580      	push	{r7, lr}
    8472:	b084      	sub	sp, #16
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8478:	687b      	ldr	r3, [r7, #4]
    847a:	691b      	ldr	r3, [r3, #16]
    847c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    847e:	68f8      	ldr	r0, [r7, #12]
    8480:	4b12      	ldr	r3, [pc, #72]	; (84cc <tc_pwm_interrupt_handler+0x5c>)
    8482:	4798      	blx	r3
    8484:	4603      	mov	r3, r0
    8486:	2b00      	cmp	r3, #0
    8488:	d00a      	beq.n	84a0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    848a:	68f8      	ldr	r0, [r7, #12]
    848c:	4b10      	ldr	r3, [pc, #64]	; (84d0 <tc_pwm_interrupt_handler+0x60>)
    848e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	681b      	ldr	r3, [r3, #0]
    8494:	2b00      	cmp	r3, #0
    8496:	d003      	beq.n	84a0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	681b      	ldr	r3, [r3, #0]
    849c:	6878      	ldr	r0, [r7, #4]
    849e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    84a0:	68f8      	ldr	r0, [r7, #12]
    84a2:	4b0c      	ldr	r3, [pc, #48]	; (84d4 <tc_pwm_interrupt_handler+0x64>)
    84a4:	4798      	blx	r3
    84a6:	4603      	mov	r3, r0
    84a8:	2b00      	cmp	r3, #0
    84aa:	d00a      	beq.n	84c2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    84ac:	68f8      	ldr	r0, [r7, #12]
    84ae:	4b0a      	ldr	r3, [pc, #40]	; (84d8 <tc_pwm_interrupt_handler+0x68>)
    84b0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	685b      	ldr	r3, [r3, #4]
    84b6:	2b00      	cmp	r3, #0
    84b8:	d003      	beq.n	84c2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    84ba:	687b      	ldr	r3, [r7, #4]
    84bc:	685b      	ldr	r3, [r3, #4]
    84be:	6878      	ldr	r0, [r7, #4]
    84c0:	4798      	blx	r3
		}
	}
}
    84c2:	bf00      	nop
    84c4:	3710      	adds	r7, #16
    84c6:	46bd      	mov	sp, r7
    84c8:	bd80      	pop	{r7, pc}
    84ca:	bf00      	nop
    84cc:	00007991 	.word	0x00007991
    84d0:	000079b9 	.word	0x000079b9
    84d4:	00007a07 	.word	0x00007a07
    84d8:	000079d3 	.word	0x000079d3

000084dc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    84dc:	b580      	push	{r7, lr}
    84de:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    84e0:	4b03      	ldr	r3, [pc, #12]	; (84f0 <TC0_Handler+0x14>)
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	4618      	mov	r0, r3
    84e6:	4b03      	ldr	r3, [pc, #12]	; (84f4 <TC0_Handler+0x18>)
    84e8:	4798      	blx	r3
}
    84ea:	bf00      	nop
    84ec:	bd80      	pop	{r7, pc}
    84ee:	bf00      	nop
    84f0:	2000096c 	.word	0x2000096c
    84f4:	00008439 	.word	0x00008439

000084f8 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    84f8:	b580      	push	{r7, lr}
    84fa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    84fc:	4b03      	ldr	r3, [pc, #12]	; (850c <TC2_Handler+0x14>)
    84fe:	681b      	ldr	r3, [r3, #0]
    8500:	4618      	mov	r0, r3
    8502:	4b03      	ldr	r3, [pc, #12]	; (8510 <TC2_Handler+0x18>)
    8504:	4798      	blx	r3
}
    8506:	bf00      	nop
    8508:	bd80      	pop	{r7, pc}
    850a:	bf00      	nop
    850c:	20000970 	.word	0x20000970
    8510:	00008439 	.word	0x00008439

00008514 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8514:	b580      	push	{r7, lr}
    8516:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8518:	4b03      	ldr	r3, [pc, #12]	; (8528 <TC4_Handler+0x14>)
    851a:	681b      	ldr	r3, [r3, #0]
    851c:	4618      	mov	r0, r3
    851e:	4b03      	ldr	r3, [pc, #12]	; (852c <TC4_Handler+0x18>)
    8520:	4798      	blx	r3
}
    8522:	bf00      	nop
    8524:	bd80      	pop	{r7, pc}
    8526:	bf00      	nop
    8528:	20000974 	.word	0x20000974
    852c:	00008439 	.word	0x00008439

00008530 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8530:	b580      	push	{r7, lr}
    8532:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8534:	4b03      	ldr	r3, [pc, #12]	; (8544 <TC5_Handler+0x14>)
    8536:	681b      	ldr	r3, [r3, #0]
    8538:	4618      	mov	r0, r3
    853a:	4b03      	ldr	r3, [pc, #12]	; (8548 <TC5_Handler+0x18>)
    853c:	4798      	blx	r3
}
    853e:	bf00      	nop
    8540:	bd80      	pop	{r7, pc}
    8542:	bf00      	nop
    8544:	20000978 	.word	0x20000978
    8548:	00008439 	.word	0x00008439

0000854c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    854c:	b580      	push	{r7, lr}
    854e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8550:	4b03      	ldr	r3, [pc, #12]	; (8560 <TC6_Handler+0x14>)
    8552:	681b      	ldr	r3, [r3, #0]
    8554:	4618      	mov	r0, r3
    8556:	4b03      	ldr	r3, [pc, #12]	; (8564 <TC6_Handler+0x18>)
    8558:	4798      	blx	r3
}
    855a:	bf00      	nop
    855c:	bd80      	pop	{r7, pc}
    855e:	bf00      	nop
    8560:	2000097c 	.word	0x2000097c
    8564:	00008439 	.word	0x00008439

00008568 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8568:	b580      	push	{r7, lr}
    856a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    856c:	4b03      	ldr	r3, [pc, #12]	; (857c <TC7_Handler+0x14>)
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	4618      	mov	r0, r3
    8572:	4b03      	ldr	r3, [pc, #12]	; (8580 <TC7_Handler+0x18>)
    8574:	4798      	blx	r3
}
    8576:	bf00      	nop
    8578:	bd80      	pop	{r7, pc}
    857a:	bf00      	nop
    857c:	20000980 	.word	0x20000980
    8580:	00008471 	.word	0x00008471

00008584 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8584:	b580      	push	{r7, lr}
    8586:	b084      	sub	sp, #16
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    858c:	6878      	ldr	r0, [r7, #4]
    858e:	4b13      	ldr	r3, [pc, #76]	; (85dc <get_tc_index+0x58>)
    8590:	4798      	blx	r3
    8592:	4603      	mov	r3, r0
    8594:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8596:	2300      	movs	r3, #0
    8598:	73fb      	strb	r3, [r7, #15]
    859a:	e010      	b.n	85be <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    859c:	7bfa      	ldrb	r2, [r7, #15]
    859e:	4910      	ldr	r1, [pc, #64]	; (85e0 <get_tc_index+0x5c>)
    85a0:	4613      	mov	r3, r2
    85a2:	009b      	lsls	r3, r3, #2
    85a4:	4413      	add	r3, r2
    85a6:	009b      	lsls	r3, r3, #2
    85a8:	440b      	add	r3, r1
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	7bba      	ldrb	r2, [r7, #14]
    85ae:	429a      	cmp	r2, r3
    85b0:	d102      	bne.n	85b8 <get_tc_index+0x34>
			return i;
    85b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    85b6:	e00d      	b.n	85d4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    85b8:	7bfb      	ldrb	r3, [r7, #15]
    85ba:	3301      	adds	r3, #1
    85bc:	73fb      	strb	r3, [r7, #15]
    85be:	7bfb      	ldrb	r3, [r7, #15]
    85c0:	2b05      	cmp	r3, #5
    85c2:	d9eb      	bls.n	859c <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    85c4:	f240 221d 	movw	r2, #541	; 0x21d
    85c8:	4906      	ldr	r1, [pc, #24]	; (85e4 <get_tc_index+0x60>)
    85ca:	2000      	movs	r0, #0
    85cc:	4b06      	ldr	r3, [pc, #24]	; (85e8 <get_tc_index+0x64>)
    85ce:	4798      	blx	r3
	return -1;
    85d0:	f04f 33ff 	mov.w	r3, #4294967295
}
    85d4:	4618      	mov	r0, r3
    85d6:	3710      	adds	r7, #16
    85d8:	46bd      	mov	sp, r7
    85da:	bd80      	pop	{r7, pc}
    85dc:	00008689 	.word	0x00008689
    85e0:	20000110 	.word	0x20000110
    85e4:	0000f310 	.word	0x0000f310
    85e8:	0000396d 	.word	0x0000396d

000085ec <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    85ec:	b480      	push	{r7}
    85ee:	b083      	sub	sp, #12
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
    85f4:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    85f6:	687b      	ldr	r3, [r7, #4]
    85f8:	4a17      	ldr	r2, [pc, #92]	; (8658 <_tc_init_irq_param+0x6c>)
    85fa:	4293      	cmp	r3, r2
    85fc:	d102      	bne.n	8604 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    85fe:	4a17      	ldr	r2, [pc, #92]	; (865c <_tc_init_irq_param+0x70>)
    8600:	683b      	ldr	r3, [r7, #0]
    8602:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8604:	687b      	ldr	r3, [r7, #4]
    8606:	4a16      	ldr	r2, [pc, #88]	; (8660 <_tc_init_irq_param+0x74>)
    8608:	4293      	cmp	r3, r2
    860a:	d102      	bne.n	8612 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    860c:	4a15      	ldr	r2, [pc, #84]	; (8664 <_tc_init_irq_param+0x78>)
    860e:	683b      	ldr	r3, [r7, #0]
    8610:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8612:	687b      	ldr	r3, [r7, #4]
    8614:	4a14      	ldr	r2, [pc, #80]	; (8668 <_tc_init_irq_param+0x7c>)
    8616:	4293      	cmp	r3, r2
    8618:	d102      	bne.n	8620 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    861a:	4a14      	ldr	r2, [pc, #80]	; (866c <_tc_init_irq_param+0x80>)
    861c:	683b      	ldr	r3, [r7, #0]
    861e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	4a13      	ldr	r2, [pc, #76]	; (8670 <_tc_init_irq_param+0x84>)
    8624:	4293      	cmp	r3, r2
    8626:	d102      	bne.n	862e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8628:	4a12      	ldr	r2, [pc, #72]	; (8674 <_tc_init_irq_param+0x88>)
    862a:	683b      	ldr	r3, [r7, #0]
    862c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    862e:	687b      	ldr	r3, [r7, #4]
    8630:	4a11      	ldr	r2, [pc, #68]	; (8678 <_tc_init_irq_param+0x8c>)
    8632:	4293      	cmp	r3, r2
    8634:	d102      	bne.n	863c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8636:	4a11      	ldr	r2, [pc, #68]	; (867c <_tc_init_irq_param+0x90>)
    8638:	683b      	ldr	r3, [r7, #0]
    863a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    863c:	687b      	ldr	r3, [r7, #4]
    863e:	4a10      	ldr	r2, [pc, #64]	; (8680 <_tc_init_irq_param+0x94>)
    8640:	4293      	cmp	r3, r2
    8642:	d102      	bne.n	864a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8644:	4a0f      	ldr	r2, [pc, #60]	; (8684 <_tc_init_irq_param+0x98>)
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	6013      	str	r3, [r2, #0]
	}
}
    864a:	bf00      	nop
    864c:	370c      	adds	r7, #12
    864e:	46bd      	mov	sp, r7
    8650:	f85d 7b04 	ldr.w	r7, [sp], #4
    8654:	4770      	bx	lr
    8656:	bf00      	nop
    8658:	40003800 	.word	0x40003800
    865c:	2000096c 	.word	0x2000096c
    8660:	4101a000 	.word	0x4101a000
    8664:	20000970 	.word	0x20000970
    8668:	42001400 	.word	0x42001400
    866c:	20000974 	.word	0x20000974
    8670:	42001800 	.word	0x42001800
    8674:	20000978 	.word	0x20000978
    8678:	43001400 	.word	0x43001400
    867c:	2000097c 	.word	0x2000097c
    8680:	43001800 	.word	0x43001800
    8684:	20000980 	.word	0x20000980

00008688 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8688:	b4b0      	push	{r4, r5, r7}
    868a:	b08d      	sub	sp, #52	; 0x34
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8690:	4b13      	ldr	r3, [pc, #76]	; (86e0 <_get_hardware_offset+0x58>)
    8692:	f107 040c 	add.w	r4, r7, #12
    8696:	461d      	mov	r5, r3
    8698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    869a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    869c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    86a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86a4:	2300      	movs	r3, #0
    86a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    86a8:	e010      	b.n	86cc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    86aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86ac:	009b      	lsls	r3, r3, #2
    86ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    86b2:	4413      	add	r3, r2
    86b4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    86b8:	461a      	mov	r2, r3
    86ba:	687b      	ldr	r3, [r7, #4]
    86bc:	429a      	cmp	r2, r3
    86be:	d102      	bne.n	86c6 <_get_hardware_offset+0x3e>
			return i;
    86c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86c2:	b2db      	uxtb	r3, r3
    86c4:	e006      	b.n	86d4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    86c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86c8:	3301      	adds	r3, #1
    86ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    86cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    86ce:	2b07      	cmp	r3, #7
    86d0:	d9eb      	bls.n	86aa <_get_hardware_offset+0x22>
		}
	}
	return 0;
    86d2:	2300      	movs	r3, #0
}
    86d4:	4618      	mov	r0, r3
    86d6:	3734      	adds	r7, #52	; 0x34
    86d8:	46bd      	mov	sp, r7
    86da:	bcb0      	pop	{r4, r5, r7}
    86dc:	4770      	bx	lr
    86de:	bf00      	nop
    86e0:	0000f324 	.word	0x0000f324

000086e4 <__NVIC_EnableIRQ>:
{
    86e4:	b480      	push	{r7}
    86e6:	b083      	sub	sp, #12
    86e8:	af00      	add	r7, sp, #0
    86ea:	4603      	mov	r3, r0
    86ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    86ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86f2:	2b00      	cmp	r3, #0
    86f4:	db0b      	blt.n	870e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86f6:	4909      	ldr	r1, [pc, #36]	; (871c <__NVIC_EnableIRQ+0x38>)
    86f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    86fc:	095b      	lsrs	r3, r3, #5
    86fe:	88fa      	ldrh	r2, [r7, #6]
    8700:	f002 021f 	and.w	r2, r2, #31
    8704:	2001      	movs	r0, #1
    8706:	fa00 f202 	lsl.w	r2, r0, r2
    870a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    870e:	bf00      	nop
    8710:	370c      	adds	r7, #12
    8712:	46bd      	mov	sp, r7
    8714:	f85d 7b04 	ldr.w	r7, [sp], #4
    8718:	4770      	bx	lr
    871a:	bf00      	nop
    871c:	e000e100 	.word	0xe000e100

00008720 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8720:	b480      	push	{r7}
    8722:	b087      	sub	sp, #28
    8724:	af00      	add	r7, sp, #0
    8726:	60f8      	str	r0, [r7, #12]
    8728:	460b      	mov	r3, r1
    872a:	607a      	str	r2, [r7, #4]
    872c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    872e:	7afa      	ldrb	r2, [r7, #11]
    8730:	68f9      	ldr	r1, [r7, #12]
    8732:	4613      	mov	r3, r2
    8734:	009b      	lsls	r3, r3, #2
    8736:	4413      	add	r3, r2
    8738:	009b      	lsls	r3, r3, #2
    873a:	440b      	add	r3, r1
    873c:	3340      	adds	r3, #64	; 0x40
    873e:	681b      	ldr	r3, [r3, #0]
    8740:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8742:	697a      	ldr	r2, [r7, #20]
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	4013      	ands	r3, r2
    8748:	617b      	str	r3, [r7, #20]
	return tmp;
    874a:	697b      	ldr	r3, [r7, #20]
}
    874c:	4618      	mov	r0, r3
    874e:	371c      	adds	r7, #28
    8750:	46bd      	mov	sp, r7
    8752:	f85d 7b04 	ldr.w	r7, [sp], #4
    8756:	4770      	bx	lr

00008758 <hri_oscctrl_get_STATUS_reg>:
{
    8758:	b480      	push	{r7}
    875a:	b085      	sub	sp, #20
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
    8760:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8762:	687b      	ldr	r3, [r7, #4]
    8764:	691b      	ldr	r3, [r3, #16]
    8766:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8768:	68fa      	ldr	r2, [r7, #12]
    876a:	683b      	ldr	r3, [r7, #0]
    876c:	4013      	ands	r3, r2
    876e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8770:	68fb      	ldr	r3, [r7, #12]
}
    8772:	4618      	mov	r0, r3
    8774:	3714      	adds	r7, #20
    8776:	46bd      	mov	sp, r7
    8778:	f85d 7b04 	ldr.w	r7, [sp], #4
    877c:	4770      	bx	lr

0000877e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    877e:	b480      	push	{r7}
    8780:	b085      	sub	sp, #20
    8782:	af00      	add	r7, sp, #0
    8784:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8786:	687b      	ldr	r3, [r7, #4]
    8788:	f893 3020 	ldrb.w	r3, [r3, #32]
    878c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    878e:	7bfb      	ldrb	r3, [r7, #15]
    8790:	f003 0301 	and.w	r3, r3, #1
    8794:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8796:	7bfb      	ldrb	r3, [r7, #15]
    8798:	2b00      	cmp	r3, #0
    879a:	bf14      	ite	ne
    879c:	2301      	movne	r3, #1
    879e:	2300      	moveq	r3, #0
    87a0:	b2db      	uxtb	r3, r3
}
    87a2:	4618      	mov	r0, r3
    87a4:	3714      	adds	r7, #20
    87a6:	46bd      	mov	sp, r7
    87a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87ac:	4770      	bx	lr

000087ae <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87ae:	b480      	push	{r7}
    87b0:	b083      	sub	sp, #12
    87b2:	af00      	add	r7, sp, #0
    87b4:	6078      	str	r0, [r7, #4]
    87b6:	460b      	mov	r3, r1
    87b8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    87ba:	bf00      	nop
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	789b      	ldrb	r3, [r3, #2]
    87c0:	b2da      	uxtb	r2, r3
    87c2:	78fb      	ldrb	r3, [r7, #3]
    87c4:	4013      	ands	r3, r2
    87c6:	b2db      	uxtb	r3, r3
    87c8:	2b00      	cmp	r3, #0
    87ca:	d1f7      	bne.n	87bc <hri_usb_wait_for_sync+0xe>
	};
}
    87cc:	bf00      	nop
    87ce:	370c      	adds	r7, #12
    87d0:	46bd      	mov	sp, r7
    87d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87d6:	4770      	bx	lr

000087d8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    87d8:	b480      	push	{r7}
    87da:	b083      	sub	sp, #12
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
    87e0:	460b      	mov	r3, r1
    87e2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	789b      	ldrb	r3, [r3, #2]
    87e8:	b2da      	uxtb	r2, r3
    87ea:	78fb      	ldrb	r3, [r7, #3]
    87ec:	4013      	ands	r3, r2
    87ee:	b2db      	uxtb	r3, r3
    87f0:	2b00      	cmp	r3, #0
    87f2:	bf14      	ite	ne
    87f4:	2301      	movne	r3, #1
    87f6:	2300      	moveq	r3, #0
    87f8:	b2db      	uxtb	r3, r3
}
    87fa:	4618      	mov	r0, r3
    87fc:	370c      	adds	r7, #12
    87fe:	46bd      	mov	sp, r7
    8800:	f85d 7b04 	ldr.w	r7, [sp], #4
    8804:	4770      	bx	lr

00008806 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8806:	b480      	push	{r7}
    8808:	b085      	sub	sp, #20
    880a:	af00      	add	r7, sp, #0
    880c:	6078      	str	r0, [r7, #4]
    880e:	460b      	mov	r3, r1
    8810:	70fb      	strb	r3, [r7, #3]
    8812:	4613      	mov	r3, r2
    8814:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8816:	78fb      	ldrb	r3, [r7, #3]
    8818:	687a      	ldr	r2, [r7, #4]
    881a:	3308      	adds	r3, #8
    881c:	015b      	lsls	r3, r3, #5
    881e:	4413      	add	r3, r2
    8820:	3307      	adds	r3, #7
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8826:	7bfa      	ldrb	r2, [r7, #15]
    8828:	78bb      	ldrb	r3, [r7, #2]
    882a:	4013      	ands	r3, r2
    882c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    882e:	7bfb      	ldrb	r3, [r7, #15]
}
    8830:	4618      	mov	r0, r3
    8832:	3714      	adds	r7, #20
    8834:	46bd      	mov	sp, r7
    8836:	f85d 7b04 	ldr.w	r7, [sp], #4
    883a:	4770      	bx	lr

0000883c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    883c:	b480      	push	{r7}
    883e:	b083      	sub	sp, #12
    8840:	af00      	add	r7, sp, #0
    8842:	6078      	str	r0, [r7, #4]
    8844:	460b      	mov	r3, r1
    8846:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8848:	78fb      	ldrb	r3, [r7, #3]
    884a:	687a      	ldr	r2, [r7, #4]
    884c:	3308      	adds	r3, #8
    884e:	015b      	lsls	r3, r3, #5
    8850:	4413      	add	r3, r2
    8852:	3307      	adds	r3, #7
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	b2db      	uxtb	r3, r3
}
    8858:	4618      	mov	r0, r3
    885a:	370c      	adds	r7, #12
    885c:	46bd      	mov	sp, r7
    885e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8862:	4770      	bx	lr

00008864 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8864:	b480      	push	{r7}
    8866:	b083      	sub	sp, #12
    8868:	af00      	add	r7, sp, #0
    886a:	6078      	str	r0, [r7, #4]
    886c:	460b      	mov	r3, r1
    886e:	70fb      	strb	r3, [r7, #3]
    8870:	4613      	mov	r3, r2
    8872:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8874:	78fb      	ldrb	r3, [r7, #3]
    8876:	687a      	ldr	r2, [r7, #4]
    8878:	3308      	adds	r3, #8
    887a:	015b      	lsls	r3, r3, #5
    887c:	4413      	add	r3, r2
    887e:	3307      	adds	r3, #7
    8880:	78ba      	ldrb	r2, [r7, #2]
    8882:	701a      	strb	r2, [r3, #0]
}
    8884:	bf00      	nop
    8886:	370c      	adds	r7, #12
    8888:	46bd      	mov	sp, r7
    888a:	f85d 7b04 	ldr.w	r7, [sp], #4
    888e:	4770      	bx	lr

00008890 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8890:	b480      	push	{r7}
    8892:	b083      	sub	sp, #12
    8894:	af00      	add	r7, sp, #0
    8896:	6078      	str	r0, [r7, #4]
    8898:	460b      	mov	r3, r1
    889a:	70fb      	strb	r3, [r7, #3]
    889c:	4613      	mov	r3, r2
    889e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    88a0:	78fb      	ldrb	r3, [r7, #3]
    88a2:	687a      	ldr	r2, [r7, #4]
    88a4:	3308      	adds	r3, #8
    88a6:	015b      	lsls	r3, r3, #5
    88a8:	4413      	add	r3, r2
    88aa:	3305      	adds	r3, #5
    88ac:	78ba      	ldrb	r2, [r7, #2]
    88ae:	701a      	strb	r2, [r3, #0]
}
    88b0:	bf00      	nop
    88b2:	370c      	adds	r7, #12
    88b4:	46bd      	mov	sp, r7
    88b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ba:	4770      	bx	lr

000088bc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    88bc:	b480      	push	{r7}
    88be:	b083      	sub	sp, #12
    88c0:	af00      	add	r7, sp, #0
    88c2:	6078      	str	r0, [r7, #4]
    88c4:	460b      	mov	r3, r1
    88c6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    88c8:	78fb      	ldrb	r3, [r7, #3]
    88ca:	687a      	ldr	r2, [r7, #4]
    88cc:	3308      	adds	r3, #8
    88ce:	015b      	lsls	r3, r3, #5
    88d0:	4413      	add	r3, r2
    88d2:	3306      	adds	r3, #6
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	b2db      	uxtb	r3, r3
}
    88d8:	4618      	mov	r0, r3
    88da:	370c      	adds	r7, #12
    88dc:	46bd      	mov	sp, r7
    88de:	f85d 7b04 	ldr.w	r7, [sp], #4
    88e2:	4770      	bx	lr

000088e4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    88e4:	b480      	push	{r7}
    88e6:	b083      	sub	sp, #12
    88e8:	af00      	add	r7, sp, #0
    88ea:	6078      	str	r0, [r7, #4]
    88ec:	460b      	mov	r3, r1
    88ee:	70fb      	strb	r3, [r7, #3]
    88f0:	4613      	mov	r3, r2
    88f2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    88f4:	78fb      	ldrb	r3, [r7, #3]
    88f6:	687a      	ldr	r2, [r7, #4]
    88f8:	3308      	adds	r3, #8
    88fa:	015b      	lsls	r3, r3, #5
    88fc:	4413      	add	r3, r2
    88fe:	3304      	adds	r3, #4
    8900:	78ba      	ldrb	r2, [r7, #2]
    8902:	701a      	strb	r2, [r3, #0]
}
    8904:	bf00      	nop
    8906:	370c      	adds	r7, #12
    8908:	46bd      	mov	sp, r7
    890a:	f85d 7b04 	ldr.w	r7, [sp], #4
    890e:	4770      	bx	lr

00008910 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8910:	b480      	push	{r7}
    8912:	b083      	sub	sp, #12
    8914:	af00      	add	r7, sp, #0
    8916:	6078      	str	r0, [r7, #4]
    8918:	460b      	mov	r3, r1
    891a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    891c:	78fb      	ldrb	r3, [r7, #3]
    891e:	687a      	ldr	r2, [r7, #4]
    8920:	015b      	lsls	r3, r3, #5
    8922:	4413      	add	r3, r2
    8924:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8928:	2210      	movs	r2, #16
    892a:	701a      	strb	r2, [r3, #0]
}
    892c:	bf00      	nop
    892e:	370c      	adds	r7, #12
    8930:	46bd      	mov	sp, r7
    8932:	f85d 7b04 	ldr.w	r7, [sp], #4
    8936:	4770      	bx	lr

00008938 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8938:	b480      	push	{r7}
    893a:	b083      	sub	sp, #12
    893c:	af00      	add	r7, sp, #0
    893e:	6078      	str	r0, [r7, #4]
    8940:	460b      	mov	r3, r1
    8942:	70fb      	strb	r3, [r7, #3]
    8944:	4613      	mov	r3, r2
    8946:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8948:	78fb      	ldrb	r3, [r7, #3]
    894a:	687a      	ldr	r2, [r7, #4]
    894c:	015b      	lsls	r3, r3, #5
    894e:	4413      	add	r3, r2
    8950:	f203 1309 	addw	r3, r3, #265	; 0x109
    8954:	78ba      	ldrb	r2, [r7, #2]
    8956:	701a      	strb	r2, [r3, #0]
}
    8958:	bf00      	nop
    895a:	370c      	adds	r7, #12
    895c:	46bd      	mov	sp, r7
    895e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8962:	4770      	bx	lr

00008964 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8964:	b480      	push	{r7}
    8966:	b083      	sub	sp, #12
    8968:	af00      	add	r7, sp, #0
    896a:	6078      	str	r0, [r7, #4]
    896c:	460b      	mov	r3, r1
    896e:	70fb      	strb	r3, [r7, #3]
    8970:	4613      	mov	r3, r2
    8972:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8974:	78fb      	ldrb	r3, [r7, #3]
    8976:	687a      	ldr	r2, [r7, #4]
    8978:	015b      	lsls	r3, r3, #5
    897a:	4413      	add	r3, r2
    897c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8980:	78ba      	ldrb	r2, [r7, #2]
    8982:	701a      	strb	r2, [r3, #0]
}
    8984:	bf00      	nop
    8986:	370c      	adds	r7, #12
    8988:	46bd      	mov	sp, r7
    898a:	f85d 7b04 	ldr.w	r7, [sp], #4
    898e:	4770      	bx	lr

00008990 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8990:	b480      	push	{r7}
    8992:	b085      	sub	sp, #20
    8994:	af00      	add	r7, sp, #0
    8996:	6078      	str	r0, [r7, #4]
    8998:	460b      	mov	r3, r1
    899a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    899c:	78fb      	ldrb	r3, [r7, #3]
    899e:	687a      	ldr	r2, [r7, #4]
    89a0:	3308      	adds	r3, #8
    89a2:	015b      	lsls	r3, r3, #5
    89a4:	4413      	add	r3, r2
    89a6:	781b      	ldrb	r3, [r3, #0]
    89a8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    89aa:	7bfb      	ldrb	r3, [r7, #15]
    89ac:	f003 0307 	and.w	r3, r3, #7
    89b0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89b2:	7bfb      	ldrb	r3, [r7, #15]
}
    89b4:	4618      	mov	r0, r3
    89b6:	3714      	adds	r7, #20
    89b8:	46bd      	mov	sp, r7
    89ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    89be:	4770      	bx	lr

000089c0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    89c0:	b480      	push	{r7}
    89c2:	b085      	sub	sp, #20
    89c4:	af00      	add	r7, sp, #0
    89c6:	6078      	str	r0, [r7, #4]
    89c8:	460b      	mov	r3, r1
    89ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    89cc:	78fb      	ldrb	r3, [r7, #3]
    89ce:	687a      	ldr	r2, [r7, #4]
    89d0:	3308      	adds	r3, #8
    89d2:	015b      	lsls	r3, r3, #5
    89d4:	4413      	add	r3, r2
    89d6:	781b      	ldrb	r3, [r3, #0]
    89d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    89da:	7bfb      	ldrb	r3, [r7, #15]
    89dc:	091b      	lsrs	r3, r3, #4
    89de:	b2db      	uxtb	r3, r3
    89e0:	f003 0307 	and.w	r3, r3, #7
    89e4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    89e6:	7bfb      	ldrb	r3, [r7, #15]
}
    89e8:	4618      	mov	r0, r3
    89ea:	3714      	adds	r7, #20
    89ec:	46bd      	mov	sp, r7
    89ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    89f2:	4770      	bx	lr

000089f4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    89f4:	b480      	push	{r7}
    89f6:	b083      	sub	sp, #12
    89f8:	af00      	add	r7, sp, #0
    89fa:	6078      	str	r0, [r7, #4]
    89fc:	460b      	mov	r3, r1
    89fe:	70fb      	strb	r3, [r7, #3]
    8a00:	4613      	mov	r3, r2
    8a02:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8a04:	78fb      	ldrb	r3, [r7, #3]
    8a06:	687a      	ldr	r2, [r7, #4]
    8a08:	3308      	adds	r3, #8
    8a0a:	015b      	lsls	r3, r3, #5
    8a0c:	4413      	add	r3, r2
    8a0e:	78ba      	ldrb	r2, [r7, #2]
    8a10:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8a12:	bf00      	nop
    8a14:	370c      	adds	r7, #12
    8a16:	46bd      	mov	sp, r7
    8a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a1c:	4770      	bx	lr

00008a1e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8a1e:	b480      	push	{r7}
    8a20:	b083      	sub	sp, #12
    8a22:	af00      	add	r7, sp, #0
    8a24:	6078      	str	r0, [r7, #4]
    8a26:	460b      	mov	r3, r1
    8a28:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8a2a:	78fb      	ldrb	r3, [r7, #3]
    8a2c:	687a      	ldr	r2, [r7, #4]
    8a2e:	3308      	adds	r3, #8
    8a30:	015b      	lsls	r3, r3, #5
    8a32:	4413      	add	r3, r2
    8a34:	781b      	ldrb	r3, [r3, #0]
    8a36:	b2db      	uxtb	r3, r3
}
    8a38:	4618      	mov	r0, r3
    8a3a:	370c      	adds	r7, #12
    8a3c:	46bd      	mov	sp, r7
    8a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a42:	4770      	bx	lr

00008a44 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8a44:	b480      	push	{r7}
    8a46:	b083      	sub	sp, #12
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	8b9b      	ldrh	r3, [r3, #28]
    8a50:	b29b      	uxth	r3, r3
}
    8a52:	4618      	mov	r0, r3
    8a54:	370c      	adds	r7, #12
    8a56:	46bd      	mov	sp, r7
    8a58:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a5c:	4770      	bx	lr

00008a5e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8a5e:	b480      	push	{r7}
    8a60:	b083      	sub	sp, #12
    8a62:	af00      	add	r7, sp, #0
    8a64:	6078      	str	r0, [r7, #4]
    8a66:	460b      	mov	r3, r1
    8a68:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8a6a:	687b      	ldr	r3, [r7, #4]
    8a6c:	887a      	ldrh	r2, [r7, #2]
    8a6e:	839a      	strh	r2, [r3, #28]
}
    8a70:	bf00      	nop
    8a72:	370c      	adds	r7, #12
    8a74:	46bd      	mov	sp, r7
    8a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a7a:	4770      	bx	lr

00008a7c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8a7c:	b480      	push	{r7}
    8a7e:	b083      	sub	sp, #12
    8a80:	af00      	add	r7, sp, #0
    8a82:	6078      	str	r0, [r7, #4]
    8a84:	460b      	mov	r3, r1
    8a86:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8a88:	687b      	ldr	r3, [r7, #4]
    8a8a:	887a      	ldrh	r2, [r7, #2]
    8a8c:	831a      	strh	r2, [r3, #24]
}
    8a8e:	bf00      	nop
    8a90:	370c      	adds	r7, #12
    8a92:	46bd      	mov	sp, r7
    8a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a98:	4770      	bx	lr

00008a9a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8a9a:	b480      	push	{r7}
    8a9c:	b083      	sub	sp, #12
    8a9e:	af00      	add	r7, sp, #0
    8aa0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8aa2:	687b      	ldr	r3, [r7, #4]
    8aa4:	8b1b      	ldrh	r3, [r3, #24]
    8aa6:	b29b      	uxth	r3, r3
}
    8aa8:	4618      	mov	r0, r3
    8aaa:	370c      	adds	r7, #12
    8aac:	46bd      	mov	sp, r7
    8aae:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ab2:	4770      	bx	lr

00008ab4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8ab4:	b480      	push	{r7}
    8ab6:	b083      	sub	sp, #12
    8ab8:	af00      	add	r7, sp, #0
    8aba:	6078      	str	r0, [r7, #4]
    8abc:	460b      	mov	r3, r1
    8abe:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	887a      	ldrh	r2, [r7, #2]
    8ac4:	829a      	strh	r2, [r3, #20]
}
    8ac6:	bf00      	nop
    8ac8:	370c      	adds	r7, #12
    8aca:	46bd      	mov	sp, r7
    8acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ad0:	4770      	bx	lr

00008ad2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8ad2:	b480      	push	{r7}
    8ad4:	b085      	sub	sp, #20
    8ad6:	af00      	add	r7, sp, #0
    8ad8:	6078      	str	r0, [r7, #4]
    8ada:	460b      	mov	r3, r1
    8adc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8ade:	687b      	ldr	r3, [r7, #4]
    8ae0:	789b      	ldrb	r3, [r3, #2]
    8ae2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8ae4:	7bfa      	ldrb	r2, [r7, #15]
    8ae6:	78fb      	ldrb	r3, [r7, #3]
    8ae8:	4013      	ands	r3, r2
    8aea:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8aec:	7bfb      	ldrb	r3, [r7, #15]
}
    8aee:	4618      	mov	r0, r3
    8af0:	3714      	adds	r7, #20
    8af2:	46bd      	mov	sp, r7
    8af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8af8:	4770      	bx	lr
	...

00008afc <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8afc:	b580      	push	{r7, lr}
    8afe:	b082      	sub	sp, #8
    8b00:	af00      	add	r7, sp, #0
    8b02:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8b04:	687b      	ldr	r3, [r7, #4]
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	b2db      	uxtb	r3, r3
    8b0a:	f023 0302 	bic.w	r3, r3, #2
    8b0e:	b2da      	uxtb	r2, r3
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8b14:	2103      	movs	r1, #3
    8b16:	6878      	ldr	r0, [r7, #4]
    8b18:	4b02      	ldr	r3, [pc, #8]	; (8b24 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8b1a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b1c:	bf00      	nop
    8b1e:	3708      	adds	r7, #8
    8b20:	46bd      	mov	sp, r7
    8b22:	bd80      	pop	{r7, pc}
    8b24:	000087af 	.word	0x000087af

00008b28 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8b28:	b580      	push	{r7, lr}
    8b2a:	b084      	sub	sp, #16
    8b2c:	af00      	add	r7, sp, #0
    8b2e:	6078      	str	r0, [r7, #4]
    8b30:	460b      	mov	r3, r1
    8b32:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b34:	2103      	movs	r1, #3
    8b36:	6878      	ldr	r0, [r7, #4]
    8b38:	4b06      	ldr	r3, [pc, #24]	; (8b54 <hri_usb_get_CTRLA_reg+0x2c>)
    8b3a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8b3c:	687b      	ldr	r3, [r7, #4]
    8b3e:	781b      	ldrb	r3, [r3, #0]
    8b40:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b42:	7bfa      	ldrb	r2, [r7, #15]
    8b44:	78fb      	ldrb	r3, [r7, #3]
    8b46:	4013      	ands	r3, r2
    8b48:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b4a:	7bfb      	ldrb	r3, [r7, #15]
}
    8b4c:	4618      	mov	r0, r3
    8b4e:	3710      	adds	r7, #16
    8b50:	46bd      	mov	sp, r7
    8b52:	bd80      	pop	{r7, pc}
    8b54:	000087af 	.word	0x000087af

00008b58 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8b58:	b580      	push	{r7, lr}
    8b5a:	b082      	sub	sp, #8
    8b5c:	af00      	add	r7, sp, #0
    8b5e:	6078      	str	r0, [r7, #4]
    8b60:	460b      	mov	r3, r1
    8b62:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	78fa      	ldrb	r2, [r7, #3]
    8b68:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b6a:	2103      	movs	r1, #3
    8b6c:	6878      	ldr	r0, [r7, #4]
    8b6e:	4b03      	ldr	r3, [pc, #12]	; (8b7c <hri_usb_write_CTRLA_reg+0x24>)
    8b70:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8b72:	bf00      	nop
    8b74:	3708      	adds	r7, #8
    8b76:	46bd      	mov	sp, r7
    8b78:	bd80      	pop	{r7, pc}
    8b7a:	bf00      	nop
    8b7c:	000087af 	.word	0x000087af

00008b80 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8b88:	2103      	movs	r1, #3
    8b8a:	6878      	ldr	r0, [r7, #4]
    8b8c:	4b04      	ldr	r3, [pc, #16]	; (8ba0 <hri_usb_read_CTRLA_reg+0x20>)
    8b8e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	b2db      	uxtb	r3, r3
}
    8b96:	4618      	mov	r0, r3
    8b98:	3708      	adds	r7, #8
    8b9a:	46bd      	mov	sp, r7
    8b9c:	bd80      	pop	{r7, pc}
    8b9e:	bf00      	nop
    8ba0:	000087af 	.word	0x000087af

00008ba4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8ba4:	b480      	push	{r7}
    8ba6:	b083      	sub	sp, #12
    8ba8:	af00      	add	r7, sp, #0
    8baa:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	891b      	ldrh	r3, [r3, #8]
    8bb0:	b29b      	uxth	r3, r3
    8bb2:	f023 0301 	bic.w	r3, r3, #1
    8bb6:	b29a      	uxth	r2, r3
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bbc:	bf00      	nop
    8bbe:	370c      	adds	r7, #12
    8bc0:	46bd      	mov	sp, r7
    8bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bc6:	4770      	bx	lr

00008bc8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8bc8:	b480      	push	{r7}
    8bca:	b083      	sub	sp, #12
    8bcc:	af00      	add	r7, sp, #0
    8bce:	6078      	str	r0, [r7, #4]
    8bd0:	460b      	mov	r3, r1
    8bd2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	887a      	ldrh	r2, [r7, #2]
    8bd8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bda:	bf00      	nop
    8bdc:	370c      	adds	r7, #12
    8bde:	46bd      	mov	sp, r7
    8be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8be4:	4770      	bx	lr

00008be6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8be6:	b480      	push	{r7}
    8be8:	b083      	sub	sp, #12
    8bea:	af00      	add	r7, sp, #0
    8bec:	6078      	str	r0, [r7, #4]
    8bee:	460b      	mov	r3, r1
    8bf0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	78fa      	ldrb	r2, [r7, #3]
    8bf6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8bf8:	bf00      	nop
    8bfa:	370c      	adds	r7, #12
    8bfc:	46bd      	mov	sp, r7
    8bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c02:	4770      	bx	lr

00008c04 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8c04:	b480      	push	{r7}
    8c06:	b083      	sub	sp, #12
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
    8c0c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	683a      	ldr	r2, [r7, #0]
    8c12:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8c14:	bf00      	nop
    8c16:	370c      	adds	r7, #12
    8c18:	46bd      	mov	sp, r7
    8c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c1e:	4770      	bx	lr

00008c20 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8c20:	b480      	push	{r7}
    8c22:	b083      	sub	sp, #12
    8c24:	af00      	add	r7, sp, #0
    8c26:	6078      	str	r0, [r7, #4]
    8c28:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8c2a:	2300      	movs	r3, #0
}
    8c2c:	4618      	mov	r0, r3
    8c2e:	370c      	adds	r7, #12
    8c30:	46bd      	mov	sp, r7
    8c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c36:	4770      	bx	lr

00008c38 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8c38:	b480      	push	{r7}
    8c3a:	b085      	sub	sp, #20
    8c3c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8c3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8c42:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8c44:	4b28      	ldr	r3, [pc, #160]	; (8ce8 <_usb_load_calib+0xb0>)
    8c46:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8c48:	f003 031f 	and.w	r3, r3, #31
    8c4c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8c4e:	4b26      	ldr	r3, [pc, #152]	; (8ce8 <_usb_load_calib+0xb0>)
    8c50:	681b      	ldr	r3, [r3, #0]
    8c52:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8c54:	f003 031f 	and.w	r3, r3, #31
    8c58:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8c5a:	4b23      	ldr	r3, [pc, #140]	; (8ce8 <_usb_load_calib+0xb0>)
    8c5c:	681b      	ldr	r3, [r3, #0]
    8c5e:	0a9b      	lsrs	r3, r3, #10
    8c60:	f003 0307 	and.w	r3, r3, #7
    8c64:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8c66:	68fb      	ldr	r3, [r7, #12]
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d002      	beq.n	8c72 <_usb_load_calib+0x3a>
    8c6c:	68fb      	ldr	r3, [r7, #12]
    8c6e:	2b1f      	cmp	r3, #31
    8c70:	d101      	bne.n	8c76 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8c72:	2309      	movs	r3, #9
    8c74:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8c76:	68bb      	ldr	r3, [r7, #8]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d002      	beq.n	8c82 <_usb_load_calib+0x4a>
    8c7c:	68bb      	ldr	r3, [r7, #8]
    8c7e:	2b1f      	cmp	r3, #31
    8c80:	d101      	bne.n	8c86 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8c82:	2319      	movs	r3, #25
    8c84:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d002      	beq.n	8c92 <_usb_load_calib+0x5a>
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	2b07      	cmp	r3, #7
    8c90:	d101      	bne.n	8c96 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8c92:	2306      	movs	r3, #6
    8c94:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8c96:	68fb      	ldr	r3, [r7, #12]
    8c98:	b29b      	uxth	r3, r3
    8c9a:	019b      	lsls	r3, r3, #6
    8c9c:	b29b      	uxth	r3, r3
    8c9e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8ca2:	b29a      	uxth	r2, r3
    8ca4:	68bb      	ldr	r3, [r7, #8]
    8ca6:	b29b      	uxth	r3, r3
    8ca8:	f003 031f 	and.w	r3, r3, #31
    8cac:	b29b      	uxth	r3, r3
    8cae:	4313      	orrs	r3, r2
    8cb0:	b29a      	uxth	r2, r3
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	b29b      	uxth	r3, r3
    8cb6:	031b      	lsls	r3, r3, #12
    8cb8:	b29b      	uxth	r3, r3
    8cba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8cbe:	b29b      	uxth	r3, r3
    8cc0:	4313      	orrs	r3, r2
    8cc2:	b29a      	uxth	r2, r3
    8cc4:	683b      	ldr	r3, [r7, #0]
    8cc6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8cc8:	683a      	ldr	r2, [r7, #0]
    8cca:	78d3      	ldrb	r3, [r2, #3]
    8ccc:	f043 0303 	orr.w	r3, r3, #3
    8cd0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8cd2:	683a      	ldr	r2, [r7, #0]
    8cd4:	78d3      	ldrb	r3, [r2, #3]
    8cd6:	f043 030c 	orr.w	r3, r3, #12
    8cda:	70d3      	strb	r3, [r2, #3]
}
    8cdc:	bf00      	nop
    8cde:	3714      	adds	r7, #20
    8ce0:	46bd      	mov	sp, r7
    8ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce6:	4770      	bx	lr
    8ce8:	00800084 	.word	0x00800084

00008cec <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    8cf0:	bf00      	nop
    8cf2:	2203      	movs	r2, #3
    8cf4:	2100      	movs	r1, #0
    8cf6:	4804      	ldr	r0, [pc, #16]	; (8d08 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8cf8:	4b04      	ldr	r3, [pc, #16]	; (8d0c <_usb_d_dev_wait_dpll_rdy+0x20>)
    8cfa:	4798      	blx	r3
    8cfc:	4603      	mov	r3, r0
    8cfe:	2b03      	cmp	r3, #3
    8d00:	d1f7      	bne.n	8cf2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    8d02:	bf00      	nop
    8d04:	bd80      	pop	{r7, pc}
    8d06:	bf00      	nop
    8d08:	40001000 	.word	0x40001000
    8d0c:	00008721 	.word	0x00008721

00008d10 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8d10:	b580      	push	{r7, lr}
    8d12:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    8d14:	480e      	ldr	r0, [pc, #56]	; (8d50 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d16:	4b0f      	ldr	r3, [pc, #60]	; (8d54 <_usb_d_dev_wait_dfll_rdy+0x44>)
    8d18:	4798      	blx	r3
    8d1a:	4603      	mov	r3, r0
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d00a      	beq.n	8d36 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8d20:	bf00      	nop
    8d22:	f44f 6110 	mov.w	r1, #2304	; 0x900
    8d26:	480a      	ldr	r0, [pc, #40]	; (8d50 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d28:	4b0b      	ldr	r3, [pc, #44]	; (8d58 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d2a:	4798      	blx	r3
    8d2c:	4603      	mov	r3, r0
    8d2e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8d32:	d1f6      	bne.n	8d22 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8d34:	e009      	b.n	8d4a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8d36:	bf00      	nop
    8d38:	f44f 7180 	mov.w	r1, #256	; 0x100
    8d3c:	4804      	ldr	r0, [pc, #16]	; (8d50 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8d3e:	4b06      	ldr	r3, [pc, #24]	; (8d58 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8d40:	4798      	blx	r3
    8d42:	4603      	mov	r3, r0
    8d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d48:	d1f6      	bne.n	8d38 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8d4a:	bf00      	nop
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	bf00      	nop
    8d50:	40001000 	.word	0x40001000
    8d54:	0000877f 	.word	0x0000877f
    8d58:	00008759 	.word	0x00008759

00008d5c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8d5c:	b580      	push	{r7, lr}
    8d5e:	b082      	sub	sp, #8
    8d60:	af00      	add	r7, sp, #0
    8d62:	4603      	mov	r3, r0
    8d64:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8d66:	79fb      	ldrb	r3, [r7, #7]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d102      	bne.n	8d72 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8d6c:	4b05      	ldr	r3, [pc, #20]	; (8d84 <_usb_d_dev_wait_clk_rdy+0x28>)
    8d6e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8d70:	e004      	b.n	8d7c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8d72:	79fb      	ldrb	r3, [r7, #7]
    8d74:	2b01      	cmp	r3, #1
    8d76:	d101      	bne.n	8d7c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8d78:	4b03      	ldr	r3, [pc, #12]	; (8d88 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8d7a:	4798      	blx	r3
}
    8d7c:	bf00      	nop
    8d7e:	3708      	adds	r7, #8
    8d80:	46bd      	mov	sp, r7
    8d82:	bd80      	pop	{r7, pc}
    8d84:	00008d11 	.word	0x00008d11
    8d88:	00008ced 	.word	0x00008ced

00008d8c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	4603      	mov	r3, r0
    8d94:	6039      	str	r1, [r7, #0]
    8d96:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8d98:	683b      	ldr	r3, [r7, #0]
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	79fb      	ldrb	r3, [r7, #7]
    8d9e:	4619      	mov	r1, r3
    8da0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8da4:	4b02      	ldr	r3, [pc, #8]	; (8db0 <_usbd_ep_int_ack+0x24>)
    8da6:	4798      	blx	r3
}
    8da8:	bf00      	nop
    8daa:	3708      	adds	r7, #8
    8dac:	46bd      	mov	sp, r7
    8dae:	bd80      	pop	{r7, pc}
    8db0:	00008865 	.word	0x00008865

00008db4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8db4:	b580      	push	{r7, lr}
    8db6:	b082      	sub	sp, #8
    8db8:	af00      	add	r7, sp, #0
    8dba:	4603      	mov	r3, r0
    8dbc:	6039      	str	r1, [r7, #0]
    8dbe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8dc0:	683b      	ldr	r3, [r7, #0]
    8dc2:	b2da      	uxtb	r2, r3
    8dc4:	79fb      	ldrb	r3, [r7, #7]
    8dc6:	4619      	mov	r1, r3
    8dc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8dcc:	4b02      	ldr	r3, [pc, #8]	; (8dd8 <_usbd_ep_int_en+0x24>)
    8dce:	4798      	blx	r3
}
    8dd0:	bf00      	nop
    8dd2:	3708      	adds	r7, #8
    8dd4:	46bd      	mov	sp, r7
    8dd6:	bd80      	pop	{r7, pc}
    8dd8:	00008939 	.word	0x00008939

00008ddc <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	b082      	sub	sp, #8
    8de0:	af00      	add	r7, sp, #0
    8de2:	4603      	mov	r3, r0
    8de4:	6039      	str	r1, [r7, #0]
    8de6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8de8:	683b      	ldr	r3, [r7, #0]
    8dea:	b2da      	uxtb	r2, r3
    8dec:	79fb      	ldrb	r3, [r7, #7]
    8dee:	4619      	mov	r1, r3
    8df0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8df4:	4b02      	ldr	r3, [pc, #8]	; (8e00 <_usbd_ep_int_dis+0x24>)
    8df6:	4798      	blx	r3
}
    8df8:	bf00      	nop
    8dfa:	3708      	adds	r7, #8
    8dfc:	46bd      	mov	sp, r7
    8dfe:	bd80      	pop	{r7, pc}
    8e00:	00008965 	.word	0x00008965

00008e04 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8e04:	b580      	push	{r7, lr}
    8e06:	b082      	sub	sp, #8
    8e08:	af00      	add	r7, sp, #0
    8e0a:	4603      	mov	r3, r0
    8e0c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8e0e:	79fb      	ldrb	r3, [r7, #7]
    8e10:	4619      	mov	r1, r3
    8e12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e16:	4b06      	ldr	r3, [pc, #24]	; (8e30 <_usbd_ep_is_ctrl+0x2c>)
    8e18:	4798      	blx	r3
    8e1a:	4603      	mov	r3, r0
    8e1c:	2b11      	cmp	r3, #17
    8e1e:	bf0c      	ite	eq
    8e20:	2301      	moveq	r3, #1
    8e22:	2300      	movne	r3, #0
    8e24:	b2db      	uxtb	r3, r3
}
    8e26:	4618      	mov	r0, r3
    8e28:	3708      	adds	r7, #8
    8e2a:	46bd      	mov	sp, r7
    8e2c:	bd80      	pop	{r7, pc}
    8e2e:	bf00      	nop
    8e30:	00008a1f 	.word	0x00008a1f

00008e34 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8e34:	b580      	push	{r7, lr}
    8e36:	b082      	sub	sp, #8
    8e38:	af00      	add	r7, sp, #0
    8e3a:	4603      	mov	r3, r0
    8e3c:	71fb      	strb	r3, [r7, #7]
    8e3e:	460b      	mov	r3, r1
    8e40:	71bb      	strb	r3, [r7, #6]
    8e42:	4613      	mov	r3, r2
    8e44:	717b      	strb	r3, [r7, #5]
	if (st) {
    8e46:	797b      	ldrb	r3, [r7, #5]
    8e48:	2b00      	cmp	r3, #0
    8e4a:	d00b      	beq.n	8e64 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e4c:	79bb      	ldrb	r3, [r7, #6]
    8e4e:	2210      	movs	r2, #16
    8e50:	fa02 f303 	lsl.w	r3, r2, r3
    8e54:	b2da      	uxtb	r2, r3
    8e56:	79fb      	ldrb	r3, [r7, #7]
    8e58:	4619      	mov	r1, r3
    8e5a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e5e:	4b09      	ldr	r3, [pc, #36]	; (8e84 <_usbd_ep_set_stall+0x50>)
    8e60:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8e62:	e00a      	b.n	8e7a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8e64:	79bb      	ldrb	r3, [r7, #6]
    8e66:	2210      	movs	r2, #16
    8e68:	fa02 f303 	lsl.w	r3, r2, r3
    8e6c:	b2da      	uxtb	r2, r3
    8e6e:	79fb      	ldrb	r3, [r7, #7]
    8e70:	4619      	mov	r1, r3
    8e72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8e76:	4b04      	ldr	r3, [pc, #16]	; (8e88 <_usbd_ep_set_stall+0x54>)
    8e78:	4798      	blx	r3
}
    8e7a:	bf00      	nop
    8e7c:	3708      	adds	r7, #8
    8e7e:	46bd      	mov	sp, r7
    8e80:	bd80      	pop	{r7, pc}
    8e82:	bf00      	nop
    8e84:	00008891 	.word	0x00008891
    8e88:	000088e5 	.word	0x000088e5

00008e8c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8e8c:	b580      	push	{r7, lr}
    8e8e:	b084      	sub	sp, #16
    8e90:	af00      	add	r7, sp, #0
    8e92:	4603      	mov	r3, r0
    8e94:	460a      	mov	r2, r1
    8e96:	71fb      	strb	r3, [r7, #7]
    8e98:	4613      	mov	r3, r2
    8e9a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8e9c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ea0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8ea2:	79fb      	ldrb	r3, [r7, #7]
    8ea4:	4619      	mov	r1, r3
    8ea6:	68f8      	ldr	r0, [r7, #12]
    8ea8:	4b08      	ldr	r3, [pc, #32]	; (8ecc <_usbd_ep_is_stalled+0x40>)
    8eaa:	4798      	blx	r3
    8eac:	4603      	mov	r3, r0
    8eae:	4619      	mov	r1, r3
    8eb0:	79bb      	ldrb	r3, [r7, #6]
    8eb2:	2210      	movs	r2, #16
    8eb4:	fa02 f303 	lsl.w	r3, r2, r3
    8eb8:	400b      	ands	r3, r1
    8eba:	2b00      	cmp	r3, #0
    8ebc:	bf14      	ite	ne
    8ebe:	2301      	movne	r3, #1
    8ec0:	2300      	moveq	r3, #0
    8ec2:	b2db      	uxtb	r3, r3
}
    8ec4:	4618      	mov	r0, r3
    8ec6:	3710      	adds	r7, #16
    8ec8:	46bd      	mov	sp, r7
    8eca:	bd80      	pop	{r7, pc}
    8ecc:	000088bd 	.word	0x000088bd

00008ed0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    8ed0:	b580      	push	{r7, lr}
    8ed2:	b084      	sub	sp, #16
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	4603      	mov	r3, r0
    8ed8:	460a      	mov	r2, r1
    8eda:	71fb      	strb	r3, [r7, #7]
    8edc:	4613      	mov	r3, r2
    8ede:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8ee0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8ee4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8ee6:	79fb      	ldrb	r3, [r7, #7]
    8ee8:	4619      	mov	r1, r3
    8eea:	68f8      	ldr	r0, [r7, #12]
    8eec:	4b08      	ldr	r3, [pc, #32]	; (8f10 <_usbd_ep_is_stall_sent+0x40>)
    8eee:	4798      	blx	r3
    8ef0:	4603      	mov	r3, r0
    8ef2:	4619      	mov	r1, r3
    8ef4:	79bb      	ldrb	r3, [r7, #6]
    8ef6:	2220      	movs	r2, #32
    8ef8:	fa02 f303 	lsl.w	r3, r2, r3
    8efc:	400b      	ands	r3, r1
    8efe:	2b00      	cmp	r3, #0
    8f00:	bf14      	ite	ne
    8f02:	2301      	movne	r3, #1
    8f04:	2300      	moveq	r3, #0
    8f06:	b2db      	uxtb	r3, r3
}
    8f08:	4618      	mov	r0, r3
    8f0a:	3710      	adds	r7, #16
    8f0c:	46bd      	mov	sp, r7
    8f0e:	bd80      	pop	{r7, pc}
    8f10:	0000883d 	.word	0x0000883d

00008f14 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8f14:	b580      	push	{r7, lr}
    8f16:	b082      	sub	sp, #8
    8f18:	af00      	add	r7, sp, #0
    8f1a:	4603      	mov	r3, r0
    8f1c:	460a      	mov	r2, r1
    8f1e:	71fb      	strb	r3, [r7, #7]
    8f20:	4613      	mov	r3, r2
    8f22:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8f24:	79bb      	ldrb	r3, [r7, #6]
    8f26:	2220      	movs	r2, #32
    8f28:	409a      	lsls	r2, r3
    8f2a:	79fb      	ldrb	r3, [r7, #7]
    8f2c:	4611      	mov	r1, r2
    8f2e:	4618      	mov	r0, r3
    8f30:	4b02      	ldr	r3, [pc, #8]	; (8f3c <_usbd_ep_ack_stall+0x28>)
    8f32:	4798      	blx	r3
}
    8f34:	bf00      	nop
    8f36:	3708      	adds	r7, #8
    8f38:	46bd      	mov	sp, r7
    8f3a:	bd80      	pop	{r7, pc}
    8f3c:	00008d8d 	.word	0x00008d8d

00008f40 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8f40:	b580      	push	{r7, lr}
    8f42:	b082      	sub	sp, #8
    8f44:	af00      	add	r7, sp, #0
    8f46:	4603      	mov	r3, r0
    8f48:	71fb      	strb	r3, [r7, #7]
    8f4a:	460b      	mov	r3, r1
    8f4c:	71bb      	strb	r3, [r7, #6]
    8f4e:	4613      	mov	r3, r2
    8f50:	717b      	strb	r3, [r7, #5]
	if (en) {
    8f52:	797b      	ldrb	r3, [r7, #5]
    8f54:	2b00      	cmp	r3, #0
    8f56:	d008      	beq.n	8f6a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f58:	79bb      	ldrb	r3, [r7, #6]
    8f5a:	2220      	movs	r2, #32
    8f5c:	409a      	lsls	r2, r3
    8f5e:	79fb      	ldrb	r3, [r7, #7]
    8f60:	4611      	mov	r1, r2
    8f62:	4618      	mov	r0, r3
    8f64:	4b07      	ldr	r3, [pc, #28]	; (8f84 <_usbd_ep_int_stall_en+0x44>)
    8f66:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8f68:	e007      	b.n	8f7a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8f6a:	79bb      	ldrb	r3, [r7, #6]
    8f6c:	2220      	movs	r2, #32
    8f6e:	409a      	lsls	r2, r3
    8f70:	79fb      	ldrb	r3, [r7, #7]
    8f72:	4611      	mov	r1, r2
    8f74:	4618      	mov	r0, r3
    8f76:	4b04      	ldr	r3, [pc, #16]	; (8f88 <_usbd_ep_int_stall_en+0x48>)
    8f78:	4798      	blx	r3
}
    8f7a:	bf00      	nop
    8f7c:	3708      	adds	r7, #8
    8f7e:	46bd      	mov	sp, r7
    8f80:	bd80      	pop	{r7, pc}
    8f82:	bf00      	nop
    8f84:	00008db5 	.word	0x00008db5
    8f88:	00008ddd 	.word	0x00008ddd

00008f8c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8f8c:	b580      	push	{r7, lr}
    8f8e:	b082      	sub	sp, #8
    8f90:	af00      	add	r7, sp, #0
    8f92:	4603      	mov	r3, r0
    8f94:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8f96:	79fb      	ldrb	r3, [r7, #7]
    8f98:	4619      	mov	r1, r3
    8f9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8f9e:	4b03      	ldr	r3, [pc, #12]	; (8fac <_usbd_ep_stop_setup+0x20>)
    8fa0:	4798      	blx	r3
}
    8fa2:	bf00      	nop
    8fa4:	3708      	adds	r7, #8
    8fa6:	46bd      	mov	sp, r7
    8fa8:	bd80      	pop	{r7, pc}
    8faa:	bf00      	nop
    8fac:	00008911 	.word	0x00008911

00008fb0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8fb0:	b580      	push	{r7, lr}
    8fb2:	b082      	sub	sp, #8
    8fb4:	af00      	add	r7, sp, #0
    8fb6:	4603      	mov	r3, r0
    8fb8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8fba:	79fb      	ldrb	r3, [r7, #7]
    8fbc:	2210      	movs	r2, #16
    8fbe:	4619      	mov	r1, r3
    8fc0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8fc4:	4b05      	ldr	r3, [pc, #20]	; (8fdc <_usbd_ep_is_setup+0x2c>)
    8fc6:	4798      	blx	r3
    8fc8:	4603      	mov	r3, r0
    8fca:	2b00      	cmp	r3, #0
    8fcc:	bf14      	ite	ne
    8fce:	2301      	movne	r3, #1
    8fd0:	2300      	moveq	r3, #0
    8fd2:	b2db      	uxtb	r3, r3
}
    8fd4:	4618      	mov	r0, r3
    8fd6:	3708      	adds	r7, #8
    8fd8:	46bd      	mov	sp, r7
    8fda:	bd80      	pop	{r7, pc}
    8fdc:	00008807 	.word	0x00008807

00008fe0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    8fe0:	b580      	push	{r7, lr}
    8fe2:	b082      	sub	sp, #8
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	4603      	mov	r3, r0
    8fe8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8fea:	79fb      	ldrb	r3, [r7, #7]
    8fec:	2110      	movs	r1, #16
    8fee:	4618      	mov	r0, r3
    8ff0:	4b02      	ldr	r3, [pc, #8]	; (8ffc <_usbd_ep_ack_setup+0x1c>)
    8ff2:	4798      	blx	r3
}
    8ff4:	bf00      	nop
    8ff6:	3708      	adds	r7, #8
    8ff8:	46bd      	mov	sp, r7
    8ffa:	bd80      	pop	{r7, pc}
    8ffc:	00008d8d 	.word	0x00008d8d

00009000 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9000:	b580      	push	{r7, lr}
    9002:	b082      	sub	sp, #8
    9004:	af00      	add	r7, sp, #0
    9006:	4603      	mov	r3, r0
    9008:	71fb      	strb	r3, [r7, #7]
    900a:	460b      	mov	r3, r1
    900c:	71bb      	strb	r3, [r7, #6]
    900e:	4613      	mov	r3, r2
    9010:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9012:	797b      	ldrb	r3, [r7, #5]
    9014:	2b00      	cmp	r3, #0
    9016:	d00b      	beq.n	9030 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9018:	79bb      	ldrb	r3, [r7, #6]
    901a:	2201      	movs	r2, #1
    901c:	fa02 f303 	lsl.w	r3, r2, r3
    9020:	b2da      	uxtb	r2, r3
    9022:	79fb      	ldrb	r3, [r7, #7]
    9024:	4619      	mov	r1, r3
    9026:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    902a:	4b09      	ldr	r3, [pc, #36]	; (9050 <_usbd_ep_set_toggle+0x50>)
    902c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    902e:	e00a      	b.n	9046 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9030:	79bb      	ldrb	r3, [r7, #6]
    9032:	2201      	movs	r2, #1
    9034:	fa02 f303 	lsl.w	r3, r2, r3
    9038:	b2da      	uxtb	r2, r3
    903a:	79fb      	ldrb	r3, [r7, #7]
    903c:	4619      	mov	r1, r3
    903e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9042:	4b04      	ldr	r3, [pc, #16]	; (9054 <_usbd_ep_set_toggle+0x54>)
    9044:	4798      	blx	r3
}
    9046:	bf00      	nop
    9048:	3708      	adds	r7, #8
    904a:	46bd      	mov	sp, r7
    904c:	bd80      	pop	{r7, pc}
    904e:	bf00      	nop
    9050:	00008891 	.word	0x00008891
    9054:	000088e5 	.word	0x000088e5

00009058 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9058:	b580      	push	{r7, lr}
    905a:	b082      	sub	sp, #8
    905c:	af00      	add	r7, sp, #0
    905e:	4603      	mov	r3, r0
    9060:	460a      	mov	r2, r1
    9062:	71fb      	strb	r3, [r7, #7]
    9064:	4613      	mov	r3, r2
    9066:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9068:	79bb      	ldrb	r3, [r7, #6]
    906a:	2201      	movs	r2, #1
    906c:	409a      	lsls	r2, r3
    906e:	79fb      	ldrb	r3, [r7, #7]
    9070:	4611      	mov	r1, r2
    9072:	4618      	mov	r0, r3
    9074:	4b02      	ldr	r3, [pc, #8]	; (9080 <_usbd_ep_ack_io_cpt+0x28>)
    9076:	4798      	blx	r3
}
    9078:	bf00      	nop
    907a:	3708      	adds	r7, #8
    907c:	46bd      	mov	sp, r7
    907e:	bd80      	pop	{r7, pc}
    9080:	00008d8d 	.word	0x00008d8d

00009084 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9084:	b480      	push	{r7}
    9086:	b085      	sub	sp, #20
    9088:	af00      	add	r7, sp, #0
    908a:	4603      	mov	r3, r0
    908c:	603a      	str	r2, [r7, #0]
    908e:	71fb      	strb	r3, [r7, #7]
    9090:	460b      	mov	r3, r1
    9092:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9094:	79fa      	ldrb	r2, [r7, #7]
    9096:	79bb      	ldrb	r3, [r7, #6]
    9098:	0052      	lsls	r2, r2, #1
    909a:	4413      	add	r3, r2
    909c:	011b      	lsls	r3, r3, #4
    909e:	4a06      	ldr	r2, [pc, #24]	; (90b8 <_usbd_ep_set_buf+0x34>)
    90a0:	4413      	add	r3, r2
    90a2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    90a4:	68fb      	ldr	r3, [r7, #12]
    90a6:	683a      	ldr	r2, [r7, #0]
    90a8:	601a      	str	r2, [r3, #0]
}
    90aa:	bf00      	nop
    90ac:	3714      	adds	r7, #20
    90ae:	46bd      	mov	sp, r7
    90b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b4:	4770      	bx	lr
    90b6:	bf00      	nop
    90b8:	20000c8c 	.word	0x20000c8c

000090bc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    90bc:	b480      	push	{r7}
    90be:	b085      	sub	sp, #20
    90c0:	af00      	add	r7, sp, #0
    90c2:	4603      	mov	r3, r0
    90c4:	71fb      	strb	r3, [r7, #7]
    90c6:	460b      	mov	r3, r1
    90c8:	71bb      	strb	r3, [r7, #6]
    90ca:	4613      	mov	r3, r2
    90cc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    90ce:	79fa      	ldrb	r2, [r7, #7]
    90d0:	79bb      	ldrb	r3, [r7, #6]
    90d2:	0052      	lsls	r2, r2, #1
    90d4:	4413      	add	r3, r2
    90d6:	011b      	lsls	r3, r3, #4
    90d8:	4a08      	ldr	r2, [pc, #32]	; (90fc <_usbd_ep_set_in_count+0x40>)
    90da:	4413      	add	r3, r2
    90dc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    90de:	88bb      	ldrh	r3, [r7, #4]
    90e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    90e4:	b299      	uxth	r1, r3
    90e6:	68fa      	ldr	r2, [r7, #12]
    90e8:	6853      	ldr	r3, [r2, #4]
    90ea:	f361 339b 	bfi	r3, r1, #14, #14
    90ee:	6053      	str	r3, [r2, #4]
}
    90f0:	bf00      	nop
    90f2:	3714      	adds	r7, #20
    90f4:	46bd      	mov	sp, r7
    90f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fa:	4770      	bx	lr
    90fc:	20000c8c 	.word	0x20000c8c

00009100 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9100:	b480      	push	{r7}
    9102:	b085      	sub	sp, #20
    9104:	af00      	add	r7, sp, #0
    9106:	4603      	mov	r3, r0
    9108:	71fb      	strb	r3, [r7, #7]
    910a:	460b      	mov	r3, r1
    910c:	71bb      	strb	r3, [r7, #6]
    910e:	4613      	mov	r3, r2
    9110:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9112:	79fa      	ldrb	r2, [r7, #7]
    9114:	79bb      	ldrb	r3, [r7, #6]
    9116:	0052      	lsls	r2, r2, #1
    9118:	4413      	add	r3, r2
    911a:	011b      	lsls	r3, r3, #4
    911c:	4a08      	ldr	r2, [pc, #32]	; (9140 <_usbd_ep_set_in_size+0x40>)
    911e:	4413      	add	r3, r2
    9120:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9122:	88bb      	ldrh	r3, [r7, #4]
    9124:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9128:	b299      	uxth	r1, r3
    912a:	68fa      	ldr	r2, [r7, #12]
    912c:	6853      	ldr	r3, [r2, #4]
    912e:	f361 030d 	bfi	r3, r1, #0, #14
    9132:	6053      	str	r3, [r2, #4]
}
    9134:	bf00      	nop
    9136:	3714      	adds	r7, #20
    9138:	46bd      	mov	sp, r7
    913a:	f85d 7b04 	ldr.w	r7, [sp], #4
    913e:	4770      	bx	lr
    9140:	20000c8c 	.word	0x20000c8c

00009144 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9144:	b480      	push	{r7}
    9146:	b085      	sub	sp, #20
    9148:	af00      	add	r7, sp, #0
    914a:	4603      	mov	r3, r0
    914c:	71fb      	strb	r3, [r7, #7]
    914e:	460b      	mov	r3, r1
    9150:	71bb      	strb	r3, [r7, #6]
    9152:	4613      	mov	r3, r2
    9154:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9156:	79fa      	ldrb	r2, [r7, #7]
    9158:	79bb      	ldrb	r3, [r7, #6]
    915a:	0052      	lsls	r2, r2, #1
    915c:	4413      	add	r3, r2
    915e:	011b      	lsls	r3, r3, #4
    9160:	4a08      	ldr	r2, [pc, #32]	; (9184 <_usbd_ep_set_out_count+0x40>)
    9162:	4413      	add	r3, r2
    9164:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9166:	88bb      	ldrh	r3, [r7, #4]
    9168:	f3c3 030d 	ubfx	r3, r3, #0, #14
    916c:	b299      	uxth	r1, r3
    916e:	68fa      	ldr	r2, [r7, #12]
    9170:	6853      	ldr	r3, [r2, #4]
    9172:	f361 030d 	bfi	r3, r1, #0, #14
    9176:	6053      	str	r3, [r2, #4]
}
    9178:	bf00      	nop
    917a:	3714      	adds	r7, #20
    917c:	46bd      	mov	sp, r7
    917e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9182:	4770      	bx	lr
    9184:	20000c8c 	.word	0x20000c8c

00009188 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9188:	b480      	push	{r7}
    918a:	b085      	sub	sp, #20
    918c:	af00      	add	r7, sp, #0
    918e:	4603      	mov	r3, r0
    9190:	71fb      	strb	r3, [r7, #7]
    9192:	460b      	mov	r3, r1
    9194:	71bb      	strb	r3, [r7, #6]
    9196:	4613      	mov	r3, r2
    9198:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    919a:	79fa      	ldrb	r2, [r7, #7]
    919c:	79bb      	ldrb	r3, [r7, #6]
    919e:	0052      	lsls	r2, r2, #1
    91a0:	4413      	add	r3, r2
    91a2:	011b      	lsls	r3, r3, #4
    91a4:	4a08      	ldr	r2, [pc, #32]	; (91c8 <_usbd_ep_set_out_size+0x40>)
    91a6:	4413      	add	r3, r2
    91a8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    91aa:	88bb      	ldrh	r3, [r7, #4]
    91ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
    91b0:	b299      	uxth	r1, r3
    91b2:	68fa      	ldr	r2, [r7, #12]
    91b4:	6853      	ldr	r3, [r2, #4]
    91b6:	f361 339b 	bfi	r3, r1, #14, #14
    91ba:	6053      	str	r3, [r2, #4]
}
    91bc:	bf00      	nop
    91be:	3714      	adds	r7, #20
    91c0:	46bd      	mov	sp, r7
    91c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c6:	4770      	bx	lr
    91c8:	20000c8c 	.word	0x20000c8c

000091cc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    91cc:	b580      	push	{r7, lr}
    91ce:	b084      	sub	sp, #16
    91d0:	af00      	add	r7, sp, #0
    91d2:	60ba      	str	r2, [r7, #8]
    91d4:	607b      	str	r3, [r7, #4]
    91d6:	4603      	mov	r3, r0
    91d8:	73fb      	strb	r3, [r7, #15]
    91da:	460b      	mov	r3, r1
    91dc:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    91de:	68bb      	ldr	r3, [r7, #8]
    91e0:	b29a      	uxth	r2, r3
    91e2:	7bb9      	ldrb	r1, [r7, #14]
    91e4:	7bfb      	ldrb	r3, [r7, #15]
    91e6:	4618      	mov	r0, r3
    91e8:	4b06      	ldr	r3, [pc, #24]	; (9204 <_usbd_ep_set_in_trans+0x38>)
    91ea:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    91ec:	687b      	ldr	r3, [r7, #4]
    91ee:	b29a      	uxth	r2, r3
    91f0:	7bb9      	ldrb	r1, [r7, #14]
    91f2:	7bfb      	ldrb	r3, [r7, #15]
    91f4:	4618      	mov	r0, r3
    91f6:	4b04      	ldr	r3, [pc, #16]	; (9208 <_usbd_ep_set_in_trans+0x3c>)
    91f8:	4798      	blx	r3
}
    91fa:	bf00      	nop
    91fc:	3710      	adds	r7, #16
    91fe:	46bd      	mov	sp, r7
    9200:	bd80      	pop	{r7, pc}
    9202:	bf00      	nop
    9204:	00009101 	.word	0x00009101
    9208:	000090bd 	.word	0x000090bd

0000920c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    920c:	b580      	push	{r7, lr}
    920e:	b084      	sub	sp, #16
    9210:	af00      	add	r7, sp, #0
    9212:	60ba      	str	r2, [r7, #8]
    9214:	607b      	str	r3, [r7, #4]
    9216:	4603      	mov	r3, r0
    9218:	73fb      	strb	r3, [r7, #15]
    921a:	460b      	mov	r3, r1
    921c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    921e:	68bb      	ldr	r3, [r7, #8]
    9220:	b29a      	uxth	r2, r3
    9222:	7bb9      	ldrb	r1, [r7, #14]
    9224:	7bfb      	ldrb	r3, [r7, #15]
    9226:	4618      	mov	r0, r3
    9228:	4b06      	ldr	r3, [pc, #24]	; (9244 <_usbd_ep_set_out_trans+0x38>)
    922a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	b29a      	uxth	r2, r3
    9230:	7bb9      	ldrb	r1, [r7, #14]
    9232:	7bfb      	ldrb	r3, [r7, #15]
    9234:	4618      	mov	r0, r3
    9236:	4b04      	ldr	r3, [pc, #16]	; (9248 <_usbd_ep_set_out_trans+0x3c>)
    9238:	4798      	blx	r3
}
    923a:	bf00      	nop
    923c:	3710      	adds	r7, #16
    923e:	46bd      	mov	sp, r7
    9240:	bd80      	pop	{r7, pc}
    9242:	bf00      	nop
    9244:	00009189 	.word	0x00009189
    9248:	00009145 	.word	0x00009145

0000924c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    924c:	b480      	push	{r7}
    924e:	b085      	sub	sp, #20
    9250:	af00      	add	r7, sp, #0
    9252:	4603      	mov	r3, r0
    9254:	460a      	mov	r2, r1
    9256:	71fb      	strb	r3, [r7, #7]
    9258:	4613      	mov	r3, r2
    925a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    925c:	79fa      	ldrb	r2, [r7, #7]
    925e:	79bb      	ldrb	r3, [r7, #6]
    9260:	0052      	lsls	r2, r2, #1
    9262:	4413      	add	r3, r2
    9264:	011b      	lsls	r3, r3, #4
    9266:	4a06      	ldr	r2, [pc, #24]	; (9280 <_usbd_ep_clear_bank_status+0x34>)
    9268:	4413      	add	r3, r2
    926a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    926c:	68fb      	ldr	r3, [r7, #12]
    926e:	2200      	movs	r2, #0
    9270:	729a      	strb	r2, [r3, #10]
}
    9272:	bf00      	nop
    9274:	3714      	adds	r7, #20
    9276:	46bd      	mov	sp, r7
    9278:	f85d 7b04 	ldr.w	r7, [sp], #4
    927c:	4770      	bx	lr
    927e:	bf00      	nop
    9280:	20000c8c 	.word	0x20000c8c

00009284 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9284:	b580      	push	{r7, lr}
    9286:	b082      	sub	sp, #8
    9288:	af00      	add	r7, sp, #0
    928a:	4603      	mov	r3, r0
    928c:	71fb      	strb	r3, [r7, #7]
    928e:	460b      	mov	r3, r1
    9290:	71bb      	strb	r3, [r7, #6]
    9292:	4613      	mov	r3, r2
    9294:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9296:	797b      	ldrb	r3, [r7, #5]
    9298:	2b00      	cmp	r3, #0
    929a:	d00b      	beq.n	92b4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    929c:	79bb      	ldrb	r3, [r7, #6]
    929e:	2240      	movs	r2, #64	; 0x40
    92a0:	fa02 f303 	lsl.w	r3, r2, r3
    92a4:	b2da      	uxtb	r2, r3
    92a6:	79fb      	ldrb	r3, [r7, #7]
    92a8:	4619      	mov	r1, r3
    92aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92ae:	4b09      	ldr	r3, [pc, #36]	; (92d4 <_usbd_ep_set_in_rdy+0x50>)
    92b0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    92b2:	e00a      	b.n	92ca <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92b4:	79bb      	ldrb	r3, [r7, #6]
    92b6:	2240      	movs	r2, #64	; 0x40
    92b8:	fa02 f303 	lsl.w	r3, r2, r3
    92bc:	b2da      	uxtb	r2, r3
    92be:	79fb      	ldrb	r3, [r7, #7]
    92c0:	4619      	mov	r1, r3
    92c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92c6:	4b04      	ldr	r3, [pc, #16]	; (92d8 <_usbd_ep_set_in_rdy+0x54>)
    92c8:	4798      	blx	r3
}
    92ca:	bf00      	nop
    92cc:	3708      	adds	r7, #8
    92ce:	46bd      	mov	sp, r7
    92d0:	bd80      	pop	{r7, pc}
    92d2:	bf00      	nop
    92d4:	00008891 	.word	0x00008891
    92d8:	000088e5 	.word	0x000088e5

000092dc <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    92dc:	b580      	push	{r7, lr}
    92de:	b082      	sub	sp, #8
    92e0:	af00      	add	r7, sp, #0
    92e2:	4603      	mov	r3, r0
    92e4:	71fb      	strb	r3, [r7, #7]
    92e6:	460b      	mov	r3, r1
    92e8:	71bb      	strb	r3, [r7, #6]
    92ea:	4613      	mov	r3, r2
    92ec:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    92ee:	797b      	ldrb	r3, [r7, #5]
    92f0:	2b00      	cmp	r3, #0
    92f2:	d00b      	beq.n	930c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    92f4:	79bb      	ldrb	r3, [r7, #6]
    92f6:	2240      	movs	r2, #64	; 0x40
    92f8:	fa02 f303 	lsl.w	r3, r2, r3
    92fc:	b2da      	uxtb	r2, r3
    92fe:	79fb      	ldrb	r3, [r7, #7]
    9300:	4619      	mov	r1, r3
    9302:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9306:	4b09      	ldr	r3, [pc, #36]	; (932c <_usbd_ep_set_out_rdy+0x50>)
    9308:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    930a:	e00a      	b.n	9322 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    930c:	79bb      	ldrb	r3, [r7, #6]
    930e:	2240      	movs	r2, #64	; 0x40
    9310:	fa02 f303 	lsl.w	r3, r2, r3
    9314:	b2da      	uxtb	r2, r3
    9316:	79fb      	ldrb	r3, [r7, #7]
    9318:	4619      	mov	r1, r3
    931a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    931e:	4b04      	ldr	r3, [pc, #16]	; (9330 <_usbd_ep_set_out_rdy+0x54>)
    9320:	4798      	blx	r3
}
    9322:	bf00      	nop
    9324:	3708      	adds	r7, #8
    9326:	46bd      	mov	sp, r7
    9328:	bd80      	pop	{r7, pc}
    932a:	bf00      	nop
    932c:	000088e5 	.word	0x000088e5
    9330:	00008891 	.word	0x00008891

00009334 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9334:	b480      	push	{r7}
    9336:	b083      	sub	sp, #12
    9338:	af00      	add	r7, sp, #0
    933a:	4603      	mov	r3, r0
    933c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    933e:	88fb      	ldrh	r3, [r7, #6]
    9340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9344:	d820      	bhi.n	9388 <_usbd_ep_pcksize_size+0x54>
    9346:	88fb      	ldrh	r3, [r7, #6]
    9348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    934c:	d81a      	bhi.n	9384 <_usbd_ep_pcksize_size+0x50>
    934e:	88fb      	ldrh	r3, [r7, #6]
    9350:	2b80      	cmp	r3, #128	; 0x80
    9352:	d815      	bhi.n	9380 <_usbd_ep_pcksize_size+0x4c>
    9354:	88fb      	ldrh	r3, [r7, #6]
    9356:	2b40      	cmp	r3, #64	; 0x40
    9358:	d810      	bhi.n	937c <_usbd_ep_pcksize_size+0x48>
    935a:	88fb      	ldrh	r3, [r7, #6]
    935c:	2b20      	cmp	r3, #32
    935e:	d80b      	bhi.n	9378 <_usbd_ep_pcksize_size+0x44>
    9360:	88fb      	ldrh	r3, [r7, #6]
    9362:	2b10      	cmp	r3, #16
    9364:	d806      	bhi.n	9374 <_usbd_ep_pcksize_size+0x40>
    9366:	88fb      	ldrh	r3, [r7, #6]
    9368:	2b08      	cmp	r3, #8
    936a:	bf8c      	ite	hi
    936c:	2301      	movhi	r3, #1
    936e:	2300      	movls	r3, #0
    9370:	b2db      	uxtb	r3, r3
    9372:	e00a      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    9374:	2302      	movs	r3, #2
    9376:	e008      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    9378:	2303      	movs	r3, #3
    937a:	e006      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    937c:	2304      	movs	r3, #4
    937e:	e004      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    9380:	2305      	movs	r3, #5
    9382:	e002      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    9384:	2306      	movs	r3, #6
    9386:	e000      	b.n	938a <_usbd_ep_pcksize_size+0x56>
    9388:	2307      	movs	r3, #7
}
    938a:	4618      	mov	r0, r3
    938c:	370c      	adds	r7, #12
    938e:	46bd      	mov	sp, r7
    9390:	f85d 7b04 	ldr.w	r7, [sp], #4
    9394:	4770      	bx	lr
	...

00009398 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9398:	b480      	push	{r7}
    939a:	b085      	sub	sp, #20
    939c:	af00      	add	r7, sp, #0
    939e:	4603      	mov	r3, r0
    93a0:	460a      	mov	r2, r1
    93a2:	71fb      	strb	r3, [r7, #7]
    93a4:	4613      	mov	r3, r2
    93a6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    93a8:	79fb      	ldrb	r3, [r7, #7]
    93aa:	2b00      	cmp	r3, #0
    93ac:	d008      	beq.n	93c0 <_usb_d_dev_ept+0x28>
    93ae:	79bb      	ldrb	r3, [r7, #6]
    93b0:	2b00      	cmp	r3, #0
    93b2:	d003      	beq.n	93bc <_usb_d_dev_ept+0x24>
    93b4:	79fb      	ldrb	r3, [r7, #7]
    93b6:	3304      	adds	r3, #4
    93b8:	b2db      	uxtb	r3, r3
    93ba:	e002      	b.n	93c2 <_usb_d_dev_ept+0x2a>
    93bc:	79fb      	ldrb	r3, [r7, #7]
    93be:	e000      	b.n	93c2 <_usb_d_dev_ept+0x2a>
    93c0:	2300      	movs	r3, #0
    93c2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    93c4:	7bfa      	ldrb	r2, [r7, #15]
    93c6:	4613      	mov	r3, r2
    93c8:	009b      	lsls	r3, r3, #2
    93ca:	4413      	add	r3, r2
    93cc:	009b      	lsls	r3, r3, #2
    93ce:	3310      	adds	r3, #16
    93d0:	4a04      	ldr	r2, [pc, #16]	; (93e4 <_usb_d_dev_ept+0x4c>)
    93d2:	4413      	add	r3, r2
    93d4:	3304      	adds	r3, #4
}
    93d6:	4618      	mov	r0, r3
    93d8:	3714      	adds	r7, #20
    93da:	46bd      	mov	sp, r7
    93dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    93e0:	4770      	bx	lr
    93e2:	bf00      	nop
    93e4:	20000bc4 	.word	0x20000bc4

000093e8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    93e8:	b580      	push	{r7, lr}
    93ea:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    93ec:	2104      	movs	r1, #4
    93ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93f2:	4b03      	ldr	r3, [pc, #12]	; (9400 <_usb_d_dev_sof+0x18>)
    93f4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    93f6:	4b03      	ldr	r3, [pc, #12]	; (9404 <_usb_d_dev_sof+0x1c>)
    93f8:	681b      	ldr	r3, [r3, #0]
    93fa:	4798      	blx	r3
}
    93fc:	bf00      	nop
    93fe:	bd80      	pop	{r7, pc}
    9400:	00008a5f 	.word	0x00008a5f
    9404:	20000bc4 	.word	0x20000bc4

00009408 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9408:	b580      	push	{r7, lr}
    940a:	b084      	sub	sp, #16
    940c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    940e:	2300      	movs	r3, #0
    9410:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9412:	f240 2101 	movw	r1, #513	; 0x201
    9416:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    941a:	4b1a      	ldr	r3, [pc, #104]	; (9484 <_usb_d_dev_lpmsusp+0x7c>)
    941c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    941e:	f240 2101 	movw	r1, #513	; 0x201
    9422:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9426:	4b18      	ldr	r3, [pc, #96]	; (9488 <_usb_d_dev_lpmsusp+0x80>)
    9428:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    942a:	2170      	movs	r1, #112	; 0x70
    942c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9430:	4b16      	ldr	r3, [pc, #88]	; (948c <_usb_d_dev_lpmsusp+0x84>)
    9432:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9434:	2300      	movs	r3, #0
    9436:	73fb      	strb	r3, [r7, #15]
    9438:	e018      	b.n	946c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    943a:	7bfb      	ldrb	r3, [r7, #15]
    943c:	015b      	lsls	r3, r3, #5
    943e:	4a14      	ldr	r2, [pc, #80]	; (9490 <_usb_d_dev_lpmsusp+0x88>)
    9440:	4413      	add	r3, r2
    9442:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	891b      	ldrh	r3, [r3, #8]
    9448:	f3c3 0303 	ubfx	r3, r3, #0, #4
    944c:	b2db      	uxtb	r3, r3
    944e:	2b03      	cmp	r3, #3
    9450:	d109      	bne.n	9466 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	891b      	ldrh	r3, [r3, #8]
    9456:	f3c3 130a 	ubfx	r3, r3, #4, #11
    945a:	b29b      	uxth	r3, r3
    945c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    945e:	687b      	ldr	r3, [r7, #4]
    9460:	2200      	movs	r2, #0
    9462:	811a      	strh	r2, [r3, #8]
			break;
    9464:	e005      	b.n	9472 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9466:	7bfb      	ldrb	r3, [r7, #15]
    9468:	3301      	adds	r3, #1
    946a:	73fb      	strb	r3, [r7, #15]
    946c:	7bfb      	ldrb	r3, [r7, #15]
    946e:	2b03      	cmp	r3, #3
    9470:	d9e3      	bls.n	943a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9472:	4b08      	ldr	r3, [pc, #32]	; (9494 <_usb_d_dev_lpmsusp+0x8c>)
    9474:	685b      	ldr	r3, [r3, #4]
    9476:	68b9      	ldr	r1, [r7, #8]
    9478:	2003      	movs	r0, #3
    947a:	4798      	blx	r3
}
    947c:	bf00      	nop
    947e:	3710      	adds	r7, #16
    9480:	46bd      	mov	sp, r7
    9482:	bd80      	pop	{r7, pc}
    9484:	00008a5f 	.word	0x00008a5f
    9488:	00008ab5 	.word	0x00008ab5
    948c:	00008a7d 	.word	0x00008a7d
    9490:	20000c8c 	.word	0x20000c8c
    9494:	20000bc4 	.word	0x20000bc4

00009498 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9498:	b580      	push	{r7, lr}
    949a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    949c:	2180      	movs	r1, #128	; 0x80
    949e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94a2:	4b04      	ldr	r3, [pc, #16]	; (94b4 <_usb_d_dev_ramerr+0x1c>)
    94a4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    94a6:	4b04      	ldr	r3, [pc, #16]	; (94b8 <_usb_d_dev_ramerr+0x20>)
    94a8:	685b      	ldr	r3, [r3, #4]
    94aa:	2100      	movs	r1, #0
    94ac:	2005      	movs	r0, #5
    94ae:	4798      	blx	r3
}
    94b0:	bf00      	nop
    94b2:	bd80      	pop	{r7, pc}
    94b4:	00008a5f 	.word	0x00008a5f
    94b8:	20000bc4 	.word	0x20000bc4

000094bc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    94bc:	b580      	push	{r7, lr}
    94be:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94c0:	2170      	movs	r1, #112	; 0x70
    94c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94c6:	4b0b      	ldr	r3, [pc, #44]	; (94f4 <_usb_d_dev_wakeup+0x38>)
    94c8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    94ca:	2170      	movs	r1, #112	; 0x70
    94cc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94d0:	4b09      	ldr	r3, [pc, #36]	; (94f8 <_usb_d_dev_wakeup+0x3c>)
    94d2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    94d4:	f240 2101 	movw	r1, #513	; 0x201
    94d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94dc:	4b07      	ldr	r3, [pc, #28]	; (94fc <_usb_d_dev_wakeup+0x40>)
    94de:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    94e0:	2000      	movs	r0, #0
    94e2:	4b07      	ldr	r3, [pc, #28]	; (9500 <_usb_d_dev_wakeup+0x44>)
    94e4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    94e6:	4b07      	ldr	r3, [pc, #28]	; (9504 <_usb_d_dev_wakeup+0x48>)
    94e8:	685b      	ldr	r3, [r3, #4]
    94ea:	2100      	movs	r1, #0
    94ec:	2002      	movs	r0, #2
    94ee:	4798      	blx	r3
}
    94f0:	bf00      	nop
    94f2:	bd80      	pop	{r7, pc}
    94f4:	00008a5f 	.word	0x00008a5f
    94f8:	00008ab5 	.word	0x00008ab5
    94fc:	00008a7d 	.word	0x00008a7d
    9500:	00008d5d 	.word	0x00008d5d
    9504:	20000bc4 	.word	0x20000bc4

00009508 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9508:	b580      	push	{r7, lr}
    950a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    950c:	2200      	movs	r2, #0
    950e:	2100      	movs	r1, #0
    9510:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9514:	4b0d      	ldr	r3, [pc, #52]	; (954c <_usb_d_dev_reset+0x44>)
    9516:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9518:	2108      	movs	r1, #8
    951a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    951e:	4b0c      	ldr	r3, [pc, #48]	; (9550 <_usb_d_dev_reset+0x48>)
    9520:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9522:	2170      	movs	r1, #112	; 0x70
    9524:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9528:	4b0a      	ldr	r3, [pc, #40]	; (9554 <_usb_d_dev_reset+0x4c>)
    952a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    952c:	f240 2101 	movw	r1, #513	; 0x201
    9530:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9534:	4b08      	ldr	r3, [pc, #32]	; (9558 <_usb_d_dev_reset+0x50>)
    9536:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9538:	4b08      	ldr	r3, [pc, #32]	; (955c <_usb_d_dev_reset+0x54>)
    953a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    953c:	4b08      	ldr	r3, [pc, #32]	; (9560 <_usb_d_dev_reset+0x58>)
    953e:	685b      	ldr	r3, [r3, #4]
    9540:	2100      	movs	r1, #0
    9542:	2001      	movs	r0, #1
    9544:	4798      	blx	r3
}
    9546:	bf00      	nop
    9548:	bd80      	pop	{r7, pc}
    954a:	bf00      	nop
    954c:	000089f5 	.word	0x000089f5
    9550:	00008a5f 	.word	0x00008a5f
    9554:	00008ab5 	.word	0x00008ab5
    9558:	00008a7d 	.word	0x00008a7d
    955c:	0000a0c5 	.word	0x0000a0c5
    9560:	20000bc4 	.word	0x20000bc4

00009564 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9564:	b580      	push	{r7, lr}
    9566:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9568:	f240 2101 	movw	r1, #513	; 0x201
    956c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9570:	4b09      	ldr	r3, [pc, #36]	; (9598 <_usb_d_dev_suspend+0x34>)
    9572:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9574:	f240 2101 	movw	r1, #513	; 0x201
    9578:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    957c:	4b07      	ldr	r3, [pc, #28]	; (959c <_usb_d_dev_suspend+0x38>)
    957e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9580:	2170      	movs	r1, #112	; 0x70
    9582:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9586:	4b06      	ldr	r3, [pc, #24]	; (95a0 <_usb_d_dev_suspend+0x3c>)
    9588:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    958a:	4b06      	ldr	r3, [pc, #24]	; (95a4 <_usb_d_dev_suspend+0x40>)
    958c:	685b      	ldr	r3, [r3, #4]
    958e:	2100      	movs	r1, #0
    9590:	2004      	movs	r0, #4
    9592:	4798      	blx	r3
}
    9594:	bf00      	nop
    9596:	bd80      	pop	{r7, pc}
    9598:	00008a5f 	.word	0x00008a5f
    959c:	00008ab5 	.word	0x00008ab5
    95a0:	00008a7d 	.word	0x00008a7d
    95a4:	20000bc4 	.word	0x20000bc4

000095a8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    95a8:	b580      	push	{r7, lr}
    95aa:	b082      	sub	sp, #8
    95ac:	af00      	add	r7, sp, #0
	bool     rc    = true;
    95ae:	2301      	movs	r3, #1
    95b0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    95b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95b6:	4b22      	ldr	r3, [pc, #136]	; (9640 <_usb_d_dev_handle_nep+0x98>)
    95b8:	4798      	blx	r3
    95ba:	4603      	mov	r3, r0
    95bc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    95be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95c2:	4b20      	ldr	r3, [pc, #128]	; (9644 <_usb_d_dev_handle_nep+0x9c>)
    95c4:	4798      	blx	r3
    95c6:	4603      	mov	r3, r0
    95c8:	461a      	mov	r2, r3
    95ca:	88bb      	ldrh	r3, [r7, #4]
    95cc:	4013      	ands	r3, r2
    95ce:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    95d0:	88bb      	ldrh	r3, [r7, #4]
    95d2:	f003 0304 	and.w	r3, r3, #4
    95d6:	2b00      	cmp	r3, #0
    95d8:	d003      	beq.n	95e2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    95da:	4b1b      	ldr	r3, [pc, #108]	; (9648 <_usb_d_dev_handle_nep+0xa0>)
    95dc:	4798      	blx	r3
		return true;
    95de:	2301      	movs	r3, #1
    95e0:	e02a      	b.n	9638 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    95e2:	88bb      	ldrh	r3, [r7, #4]
    95e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    95e8:	2b00      	cmp	r3, #0
    95ea:	d002      	beq.n	95f2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    95ec:	4b17      	ldr	r3, [pc, #92]	; (964c <_usb_d_dev_handle_nep+0xa4>)
    95ee:	4798      	blx	r3
    95f0:	e021      	b.n	9636 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    95f2:	88bb      	ldrh	r3, [r7, #4]
    95f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95f8:	2b00      	cmp	r3, #0
    95fa:	d002      	beq.n	9602 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    95fc:	4b14      	ldr	r3, [pc, #80]	; (9650 <_usb_d_dev_handle_nep+0xa8>)
    95fe:	4798      	blx	r3
    9600:	e019      	b.n	9636 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9602:	88bb      	ldrh	r3, [r7, #4]
    9604:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9608:	2b00      	cmp	r3, #0
    960a:	d002      	beq.n	9612 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    960c:	4b11      	ldr	r3, [pc, #68]	; (9654 <_usb_d_dev_handle_nep+0xac>)
    960e:	4798      	blx	r3
    9610:	e011      	b.n	9636 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9612:	88bb      	ldrh	r3, [r7, #4]
    9614:	f003 0308 	and.w	r3, r3, #8
    9618:	2b00      	cmp	r3, #0
    961a:	d002      	beq.n	9622 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    961c:	4b0e      	ldr	r3, [pc, #56]	; (9658 <_usb_d_dev_handle_nep+0xb0>)
    961e:	4798      	blx	r3
    9620:	e009      	b.n	9636 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9622:	88bb      	ldrh	r3, [r7, #4]
    9624:	f003 0301 	and.w	r3, r3, #1
    9628:	2b00      	cmp	r3, #0
    962a:	d002      	beq.n	9632 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    962c:	4b0b      	ldr	r3, [pc, #44]	; (965c <_usb_d_dev_handle_nep+0xb4>)
    962e:	4798      	blx	r3
    9630:	e001      	b.n	9636 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9632:	2300      	movs	r3, #0
    9634:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9636:	79fb      	ldrb	r3, [r7, #7]
}
    9638:	4618      	mov	r0, r3
    963a:	3708      	adds	r7, #8
    963c:	46bd      	mov	sp, r7
    963e:	bd80      	pop	{r7, pc}
    9640:	00008a45 	.word	0x00008a45
    9644:	00008a9b 	.word	0x00008a9b
    9648:	000093e9 	.word	0x000093e9
    964c:	00009409 	.word	0x00009409
    9650:	00009499 	.word	0x00009499
    9654:	000094bd 	.word	0x000094bd
    9658:	00009509 	.word	0x00009509
    965c:	00009565 	.word	0x00009565

00009660 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9660:	b590      	push	{r4, r7, lr}
    9662:	b089      	sub	sp, #36	; 0x24
    9664:	af00      	add	r7, sp, #0
    9666:	6078      	str	r0, [r7, #4]
    9668:	460b      	mov	r3, r1
    966a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    966c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9670:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	7c9b      	ldrb	r3, [r3, #18]
    9676:	f003 030f 	and.w	r3, r3, #15
    967a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    967c:	7dfb      	ldrb	r3, [r7, #23]
    967e:	015b      	lsls	r3, r3, #5
    9680:	4a73      	ldr	r2, [pc, #460]	; (9850 <_usb_d_dev_in_next+0x1f0>)
    9682:	4413      	add	r3, r2
    9684:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9686:	78fb      	ldrb	r3, [r7, #3]
    9688:	2b00      	cmp	r3, #0
    968a:	d006      	beq.n	969a <_usb_d_dev_in_next+0x3a>
    968c:	693b      	ldr	r3, [r7, #16]
    968e:	3310      	adds	r3, #16
    9690:	685b      	ldr	r3, [r3, #4]
    9692:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9696:	b29b      	uxth	r3, r3
    9698:	e000      	b.n	969c <_usb_d_dev_in_next+0x3c>
    969a:	2300      	movs	r3, #0
    969c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	8a1b      	ldrh	r3, [r3, #16]
    96a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    96a6:	4293      	cmp	r3, r2
    96a8:	d103      	bne.n	96b2 <_usb_d_dev_in_next+0x52>
    96aa:	687b      	ldr	r3, [r7, #4]
    96ac:	8a1b      	ldrh	r3, [r3, #16]
    96ae:	b21b      	sxth	r3, r3
    96b0:	e004      	b.n	96bc <_usb_d_dev_in_next+0x5c>
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	8a1b      	ldrh	r3, [r3, #16]
    96b6:	3b01      	subs	r3, #1
    96b8:	b29b      	uxth	r3, r3
    96ba:	b21b      	sxth	r3, r3
    96bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    96c0:	4013      	ands	r3, r2
    96c2:	b21b      	sxth	r3, r3
    96c4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    96c6:	2300      	movs	r3, #0
    96c8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    96ca:	687b      	ldr	r3, [r7, #4]
    96cc:	7cdb      	ldrb	r3, [r3, #19]
    96ce:	f003 0307 	and.w	r3, r3, #7
    96d2:	b2db      	uxtb	r3, r3
    96d4:	2b01      	cmp	r3, #1
    96d6:	bf0c      	ite	eq
    96d8:	2301      	moveq	r3, #1
    96da:	2300      	movne	r3, #0
    96dc:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    96de:	78fb      	ldrb	r3, [r7, #3]
    96e0:	2b00      	cmp	r3, #0
    96e2:	d004      	beq.n	96ee <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    96e4:	7dfb      	ldrb	r3, [r7, #23]
    96e6:	2101      	movs	r1, #1
    96e8:	4618      	mov	r0, r3
    96ea:	4b5a      	ldr	r3, [pc, #360]	; (9854 <_usb_d_dev_in_next+0x1f4>)
    96ec:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    96ee:	687b      	ldr	r3, [r7, #4]
    96f0:	689a      	ldr	r2, [r3, #8]
    96f2:	89fb      	ldrh	r3, [r7, #14]
    96f4:	441a      	add	r2, r3
    96f6:	687b      	ldr	r3, [r7, #4]
    96f8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	689a      	ldr	r2, [r3, #8]
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	685b      	ldr	r3, [r3, #4]
    9702:	429a      	cmp	r2, r3
    9704:	d243      	bcs.n	978e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9706:	687b      	ldr	r3, [r7, #4]
    9708:	685b      	ldr	r3, [r3, #4]
    970a:	b29a      	uxth	r2, r3
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	689b      	ldr	r3, [r3, #8]
    9710:	b29b      	uxth	r3, r3
    9712:	1ad3      	subs	r3, r2, r3
    9714:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	7cdb      	ldrb	r3, [r3, #19]
    971a:	f003 0320 	and.w	r3, r3, #32
    971e:	b2db      	uxtb	r3, r3
    9720:	2b00      	cmp	r3, #0
    9722:	d01b      	beq.n	975c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9724:	687b      	ldr	r3, [r7, #4]
    9726:	8a1b      	ldrh	r3, [r3, #16]
    9728:	8bfa      	ldrh	r2, [r7, #30]
    972a:	429a      	cmp	r2, r3
    972c:	d902      	bls.n	9734 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	8a1b      	ldrh	r3, [r3, #16]
    9732:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	68d8      	ldr	r0, [r3, #12]
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	681a      	ldr	r2, [r3, #0]
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	689b      	ldr	r3, [r3, #8]
    9740:	4413      	add	r3, r2
    9742:	8bfa      	ldrh	r2, [r7, #30]
    9744:	4619      	mov	r1, r3
    9746:	4b44      	ldr	r3, [pc, #272]	; (9858 <_usb_d_dev_in_next+0x1f8>)
    9748:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    974a:	687b      	ldr	r3, [r7, #4]
    974c:	68db      	ldr	r3, [r3, #12]
    974e:	461a      	mov	r2, r3
    9750:	7dfb      	ldrb	r3, [r7, #23]
    9752:	2101      	movs	r1, #1
    9754:	4618      	mov	r0, r3
    9756:	4b41      	ldr	r3, [pc, #260]	; (985c <_usb_d_dev_in_next+0x1fc>)
    9758:	4798      	blx	r3
    975a:	e011      	b.n	9780 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    975c:	8bfb      	ldrh	r3, [r7, #30]
    975e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9762:	d902      	bls.n	976a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9768:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    976a:	687b      	ldr	r3, [r7, #4]
    976c:	681a      	ldr	r2, [r3, #0]
    976e:	687b      	ldr	r3, [r7, #4]
    9770:	689b      	ldr	r3, [r3, #8]
    9772:	4413      	add	r3, r2
    9774:	461a      	mov	r2, r3
    9776:	7dfb      	ldrb	r3, [r7, #23]
    9778:	2101      	movs	r1, #1
    977a:	4618      	mov	r0, r3
    977c:	4b37      	ldr	r3, [pc, #220]	; (985c <_usb_d_dev_in_next+0x1fc>)
    977e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9780:	8bfa      	ldrh	r2, [r7, #30]
    9782:	7df8      	ldrb	r0, [r7, #23]
    9784:	2300      	movs	r3, #0
    9786:	2101      	movs	r1, #1
    9788:	4c35      	ldr	r4, [pc, #212]	; (9860 <_usb_d_dev_in_next+0x200>)
    978a:	47a0      	blx	r4
		goto _in_tx_exec;
    978c:	e041      	b.n	9812 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    978e:	687b      	ldr	r3, [r7, #4]
    9790:	7cdb      	ldrb	r3, [r3, #19]
    9792:	f003 0310 	and.w	r3, r3, #16
    9796:	b2db      	uxtb	r3, r3
    9798:	2b00      	cmp	r3, #0
    979a:	d00b      	beq.n	97b4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    979c:	687a      	ldr	r2, [r7, #4]
    979e:	7cd3      	ldrb	r3, [r2, #19]
    97a0:	f36f 1304 	bfc	r3, #4, #1
    97a4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    97a6:	7df8      	ldrb	r0, [r7, #23]
    97a8:	2300      	movs	r3, #0
    97aa:	2200      	movs	r2, #0
    97ac:	2101      	movs	r1, #1
    97ae:	4c2c      	ldr	r4, [pc, #176]	; (9860 <_usb_d_dev_in_next+0x200>)
    97b0:	47a0      	blx	r4
		goto _in_tx_exec;
    97b2:	e02e      	b.n	9812 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    97b4:	7afb      	ldrb	r3, [r7, #11]
    97b6:	2b00      	cmp	r3, #0
    97b8:	d006      	beq.n	97c8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    97ba:	7dfb      	ldrb	r3, [r7, #23]
    97bc:	224b      	movs	r2, #75	; 0x4b
    97be:	4619      	mov	r1, r3
    97c0:	69b8      	ldr	r0, [r7, #24]
    97c2:	4b28      	ldr	r3, [pc, #160]	; (9864 <_usb_d_dev_in_next+0x204>)
    97c4:	4798      	blx	r3
    97c6:	e005      	b.n	97d4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    97c8:	7dfb      	ldrb	r3, [r7, #23]
    97ca:	224a      	movs	r2, #74	; 0x4a
    97cc:	4619      	mov	r1, r3
    97ce:	69b8      	ldr	r0, [r7, #24]
    97d0:	4b24      	ldr	r3, [pc, #144]	; (9864 <_usb_d_dev_in_next+0x204>)
    97d2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    97d4:	687b      	ldr	r3, [r7, #4]
    97d6:	8a1b      	ldrh	r3, [r3, #16]
    97d8:	89ba      	ldrh	r2, [r7, #12]
    97da:	429a      	cmp	r2, r3
    97dc:	d114      	bne.n	9808 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    97de:	687a      	ldr	r2, [r7, #4]
    97e0:	7cd3      	ldrb	r3, [r2, #19]
    97e2:	f36f 1386 	bfc	r3, #6, #1
    97e6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    97e8:	4b1f      	ldr	r3, [pc, #124]	; (9868 <_usb_d_dev_in_next+0x208>)
    97ea:	68db      	ldr	r3, [r3, #12]
    97ec:	687a      	ldr	r2, [r7, #4]
    97ee:	7c90      	ldrb	r0, [r2, #18]
    97f0:	687a      	ldr	r2, [r7, #4]
    97f2:	6892      	ldr	r2, [r2, #8]
    97f4:	4611      	mov	r1, r2
    97f6:	4798      	blx	r3
    97f8:	4603      	mov	r3, r0
    97fa:	2b00      	cmp	r3, #0
    97fc:	d124      	bne.n	9848 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    97fe:	687a      	ldr	r2, [r7, #4]
    9800:	7cd3      	ldrb	r3, [r2, #19]
    9802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9806:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9808:	2100      	movs	r1, #0
    980a:	6878      	ldr	r0, [r7, #4]
    980c:	4b17      	ldr	r3, [pc, #92]	; (986c <_usb_d_dev_in_next+0x20c>)
    980e:	4798      	blx	r3
	return;
    9810:	e01b      	b.n	984a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9812:	78fb      	ldrb	r3, [r7, #3]
    9814:	f083 0301 	eor.w	r3, r3, #1
    9818:	b2db      	uxtb	r3, r3
    981a:	2b00      	cmp	r3, #0
    981c:	d00d      	beq.n	983a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    981e:	7afb      	ldrb	r3, [r7, #11]
    9820:	2b00      	cmp	r3, #0
    9822:	d002      	beq.n	982a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9824:	234e      	movs	r3, #78	; 0x4e
    9826:	777b      	strb	r3, [r7, #29]
    9828:	e001      	b.n	982e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    982a:	234a      	movs	r3, #74	; 0x4a
    982c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    982e:	7f7a      	ldrb	r2, [r7, #29]
    9830:	7dfb      	ldrb	r3, [r7, #23]
    9832:	4619      	mov	r1, r3
    9834:	69b8      	ldr	r0, [r7, #24]
    9836:	4b0e      	ldr	r3, [pc, #56]	; (9870 <_usb_d_dev_in_next+0x210>)
    9838:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    983a:	7dfb      	ldrb	r3, [r7, #23]
    983c:	2201      	movs	r2, #1
    983e:	2101      	movs	r1, #1
    9840:	4618      	mov	r0, r3
    9842:	4b0c      	ldr	r3, [pc, #48]	; (9874 <_usb_d_dev_in_next+0x214>)
    9844:	4798      	blx	r3
    9846:	e000      	b.n	984a <_usb_d_dev_in_next+0x1ea>
			return;
    9848:	bf00      	nop
}
    984a:	3724      	adds	r7, #36	; 0x24
    984c:	46bd      	mov	sp, r7
    984e:	bd90      	pop	{r4, r7, pc}
    9850:	20000c8c 	.word	0x20000c8c
    9854:	00009059 	.word	0x00009059
    9858:	0000ebbd 	.word	0x0000ebbd
    985c:	00009085 	.word	0x00009085
    9860:	000091cd 	.word	0x000091cd
    9864:	00008965 	.word	0x00008965
    9868:	20000bc4 	.word	0x20000bc4
    986c:	0000a989 	.word	0x0000a989
    9870:	00008939 	.word	0x00008939
    9874:	00009285 	.word	0x00009285

00009878 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9878:	b590      	push	{r4, r7, lr}
    987a:	b08b      	sub	sp, #44	; 0x2c
    987c:	af00      	add	r7, sp, #0
    987e:	6078      	str	r0, [r7, #4]
    9880:	460b      	mov	r3, r1
    9882:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9884:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9888:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    988a:	687b      	ldr	r3, [r7, #4]
    988c:	7c9b      	ldrb	r3, [r3, #18]
    988e:	f003 030f 	and.w	r3, r3, #15
    9892:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9894:	7ffb      	ldrb	r3, [r7, #31]
    9896:	015b      	lsls	r3, r3, #5
    9898:	4a94      	ldr	r2, [pc, #592]	; (9aec <_usb_d_dev_out_next+0x274>)
    989a:	4413      	add	r3, r2
    989c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    989e:	78fb      	ldrb	r3, [r7, #3]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d005      	beq.n	98b0 <_usb_d_dev_out_next+0x38>
    98a4:	69bb      	ldr	r3, [r7, #24]
    98a6:	685b      	ldr	r3, [r3, #4]
    98a8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    98ac:	b29b      	uxth	r3, r3
    98ae:	e000      	b.n	98b2 <_usb_d_dev_out_next+0x3a>
    98b0:	2300      	movs	r3, #0
    98b2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    98b4:	78fb      	ldrb	r3, [r7, #3]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d005      	beq.n	98c6 <_usb_d_dev_out_next+0x4e>
    98ba:	69bb      	ldr	r3, [r7, #24]
    98bc:	685b      	ldr	r3, [r3, #4]
    98be:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98c2:	b29b      	uxth	r3, r3
    98c4:	e000      	b.n	98c8 <_usb_d_dev_out_next+0x50>
    98c6:	2300      	movs	r3, #0
    98c8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    98ca:	687b      	ldr	r3, [r7, #4]
    98cc:	8a1b      	ldrh	r3, [r3, #16]
    98ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    98d2:	4293      	cmp	r3, r2
    98d4:	d004      	beq.n	98e0 <_usb_d_dev_out_next+0x68>
    98d6:	687b      	ldr	r3, [r7, #4]
    98d8:	8a1b      	ldrh	r3, [r3, #16]
    98da:	3b01      	subs	r3, #1
    98dc:	b29b      	uxth	r3, r3
    98de:	e001      	b.n	98e4 <_usb_d_dev_out_next+0x6c>
    98e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    98e4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    98e6:	8aba      	ldrh	r2, [r7, #20]
    98e8:	8a7b      	ldrh	r3, [r7, #18]
    98ea:	4013      	ands	r3, r2
    98ec:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    98ee:	687b      	ldr	r3, [r7, #4]
    98f0:	7cdb      	ldrb	r3, [r3, #19]
    98f2:	f003 0307 	and.w	r3, r3, #7
    98f6:	b2db      	uxtb	r3, r3
    98f8:	2b01      	cmp	r3, #1
    98fa:	bf0c      	ite	eq
    98fc:	2301      	moveq	r3, #1
    98fe:	2300      	movne	r3, #0
    9900:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9902:	78fb      	ldrb	r3, [r7, #3]
    9904:	2b00      	cmp	r3, #0
    9906:	d004      	beq.n	9912 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9908:	7ffb      	ldrb	r3, [r7, #31]
    990a:	2100      	movs	r1, #0
    990c:	4618      	mov	r0, r3
    990e:	4b78      	ldr	r3, [pc, #480]	; (9af0 <_usb_d_dev_out_next+0x278>)
    9910:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9912:	687b      	ldr	r3, [r7, #4]
    9914:	7cdb      	ldrb	r3, [r3, #19]
    9916:	f003 0320 	and.w	r3, r3, #32
    991a:	b2db      	uxtb	r3, r3
    991c:	2b00      	cmp	r3, #0
    991e:	d01c      	beq.n	995a <_usb_d_dev_out_next+0xe2>
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	685b      	ldr	r3, [r3, #4]
    9924:	2b00      	cmp	r3, #0
    9926:	d018      	beq.n	995a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	685b      	ldr	r3, [r3, #4]
    992c:	b29a      	uxth	r2, r3
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	689b      	ldr	r3, [r3, #8]
    9932:	b29b      	uxth	r3, r3
    9934:	1ad3      	subs	r3, r2, r3
    9936:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	681a      	ldr	r2, [r3, #0]
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	689b      	ldr	r3, [r3, #8]
    9940:	18d0      	adds	r0, r2, r3
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	68d9      	ldr	r1, [r3, #12]
    9946:	89ba      	ldrh	r2, [r7, #12]
    9948:	8a3b      	ldrh	r3, [r7, #16]
    994a:	429a      	cmp	r2, r3
    994c:	d901      	bls.n	9952 <_usb_d_dev_out_next+0xda>
    994e:	8a3b      	ldrh	r3, [r7, #16]
    9950:	e000      	b.n	9954 <_usb_d_dev_out_next+0xdc>
    9952:	89bb      	ldrh	r3, [r7, #12]
    9954:	461a      	mov	r2, r3
    9956:	4b67      	ldr	r3, [pc, #412]	; (9af4 <_usb_d_dev_out_next+0x27c>)
    9958:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    995a:	687b      	ldr	r3, [r7, #4]
    995c:	685b      	ldr	r3, [r3, #4]
    995e:	2b00      	cmp	r3, #0
    9960:	d121      	bne.n	99a6 <_usb_d_dev_out_next+0x12e>
    9962:	687b      	ldr	r3, [r7, #4]
    9964:	7cdb      	ldrb	r3, [r3, #19]
    9966:	f003 0310 	and.w	r3, r3, #16
    996a:	b2db      	uxtb	r3, r3
    996c:	2b00      	cmp	r3, #0
    996e:	d01a      	beq.n	99a6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9970:	687a      	ldr	r2, [r7, #4]
    9972:	7cd3      	ldrb	r3, [r2, #19]
    9974:	f36f 1304 	bfc	r3, #4, #1
    9978:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    997a:	687a      	ldr	r2, [r7, #4]
    997c:	7cd3      	ldrb	r3, [r2, #19]
    997e:	f043 0320 	orr.w	r3, r3, #32
    9982:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	68db      	ldr	r3, [r3, #12]
    9988:	461a      	mov	r2, r3
    998a:	7ffb      	ldrb	r3, [r7, #31]
    998c:	2100      	movs	r1, #0
    998e:	4618      	mov	r0, r3
    9990:	4b59      	ldr	r3, [pc, #356]	; (9af8 <_usb_d_dev_out_next+0x280>)
    9992:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9994:	687b      	ldr	r3, [r7, #4]
    9996:	8a1b      	ldrh	r3, [r3, #16]
    9998:	461a      	mov	r2, r3
    999a:	7ff8      	ldrb	r0, [r7, #31]
    999c:	2300      	movs	r3, #0
    999e:	2100      	movs	r1, #0
    99a0:	4c56      	ldr	r4, [pc, #344]	; (9afc <_usb_d_dev_out_next+0x284>)
    99a2:	47a0      	blx	r4
		goto _out_rx_exec;
    99a4:	e090      	b.n	9ac8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    99a6:	78fb      	ldrb	r3, [r7, #3]
    99a8:	2b00      	cmp	r3, #0
    99aa:	d010      	beq.n	99ce <_usb_d_dev_out_next+0x156>
    99ac:	687b      	ldr	r3, [r7, #4]
    99ae:	8a1b      	ldrh	r3, [r3, #16]
    99b0:	8a3a      	ldrh	r2, [r7, #16]
    99b2:	429a      	cmp	r2, r3
    99b4:	d20b      	bcs.n	99ce <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    99b6:	687a      	ldr	r2, [r7, #4]
    99b8:	7cd3      	ldrb	r3, [r2, #19]
    99ba:	f36f 1304 	bfc	r3, #4, #1
    99be:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    99c0:	687b      	ldr	r3, [r7, #4]
    99c2:	689a      	ldr	r2, [r3, #8]
    99c4:	8abb      	ldrh	r3, [r7, #20]
    99c6:	441a      	add	r2, r3
    99c8:	687b      	ldr	r3, [r7, #4]
    99ca:	609a      	str	r2, [r3, #8]
    99cc:	e05c      	b.n	9a88 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    99ce:	687b      	ldr	r3, [r7, #4]
    99d0:	689a      	ldr	r2, [r3, #8]
    99d2:	8afb      	ldrh	r3, [r7, #22]
    99d4:	441a      	add	r2, r3
    99d6:	687b      	ldr	r3, [r7, #4]
    99d8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	689a      	ldr	r2, [r3, #8]
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	685b      	ldr	r3, [r3, #4]
    99e2:	429a      	cmp	r2, r3
    99e4:	d250      	bcs.n	9a88 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    99e6:	687b      	ldr	r3, [r7, #4]
    99e8:	685b      	ldr	r3, [r3, #4]
    99ea:	b29a      	uxth	r2, r3
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	689b      	ldr	r3, [r3, #8]
    99f0:	b29b      	uxth	r3, r3
    99f2:	1ad3      	subs	r3, r2, r3
    99f4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	7cdb      	ldrb	r3, [r3, #19]
    99fa:	f003 0320 	and.w	r3, r3, #32
    99fe:	b2db      	uxtb	r3, r3
    9a00:	2b00      	cmp	r3, #0
    9a02:	d010      	beq.n	9a26 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	8a1b      	ldrh	r3, [r3, #16]
    9a08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a0a:	429a      	cmp	r2, r3
    9a0c:	d902      	bls.n	9a14 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9a0e:	687b      	ldr	r3, [r7, #4]
    9a10:	8a1b      	ldrh	r3, [r3, #16]
    9a12:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	68db      	ldr	r3, [r3, #12]
    9a18:	461a      	mov	r2, r3
    9a1a:	7ffb      	ldrb	r3, [r7, #31]
    9a1c:	2100      	movs	r1, #0
    9a1e:	4618      	mov	r0, r3
    9a20:	4b35      	ldr	r3, [pc, #212]	; (9af8 <_usb_d_dev_out_next+0x280>)
    9a22:	4798      	blx	r3
    9a24:	e029      	b.n	9a7a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9a26:	687b      	ldr	r3, [r7, #4]
    9a28:	8a1b      	ldrh	r3, [r3, #16]
    9a2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a2c:	429a      	cmp	r2, r3
    9a2e:	d90f      	bls.n	9a50 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a36:	d903      	bls.n	9a40 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a3e:	e011      	b.n	9a64 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9a40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a42:	8a7b      	ldrh	r3, [r7, #18]
    9a44:	4013      	ands	r3, r2
    9a46:	b29b      	uxth	r3, r3
    9a48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a4a:	1ad3      	subs	r3, r2, r3
    9a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9a4e:	e009      	b.n	9a64 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9a50:	687b      	ldr	r3, [r7, #4]
    9a52:	8a1b      	ldrh	r3, [r3, #16]
    9a54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a56:	429a      	cmp	r2, r3
    9a58:	d204      	bcs.n	9a64 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9a5a:	687a      	ldr	r2, [r7, #4]
    9a5c:	7cd3      	ldrb	r3, [r2, #19]
    9a5e:	f043 0320 	orr.w	r3, r3, #32
    9a62:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9a64:	687b      	ldr	r3, [r7, #4]
    9a66:	681a      	ldr	r2, [r3, #0]
    9a68:	687b      	ldr	r3, [r7, #4]
    9a6a:	689b      	ldr	r3, [r3, #8]
    9a6c:	4413      	add	r3, r2
    9a6e:	461a      	mov	r2, r3
    9a70:	7ffb      	ldrb	r3, [r7, #31]
    9a72:	2100      	movs	r1, #0
    9a74:	4618      	mov	r0, r3
    9a76:	4b20      	ldr	r3, [pc, #128]	; (9af8 <_usb_d_dev_out_next+0x280>)
    9a78:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9a7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9a7c:	7ff8      	ldrb	r0, [r7, #31]
    9a7e:	2300      	movs	r3, #0
    9a80:	2100      	movs	r1, #0
    9a82:	4c1e      	ldr	r4, [pc, #120]	; (9afc <_usb_d_dev_out_next+0x284>)
    9a84:	47a0      	blx	r4
			goto _out_rx_exec;
    9a86:	e01f      	b.n	9ac8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9a88:	7bfb      	ldrb	r3, [r7, #15]
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d006      	beq.n	9a9c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9a8e:	7ffb      	ldrb	r3, [r7, #31]
    9a90:	222d      	movs	r2, #45	; 0x2d
    9a92:	4619      	mov	r1, r3
    9a94:	6a38      	ldr	r0, [r7, #32]
    9a96:	4b1a      	ldr	r3, [pc, #104]	; (9b00 <_usb_d_dev_out_next+0x288>)
    9a98:	4798      	blx	r3
    9a9a:	e005      	b.n	9aa8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9a9c:	7ffb      	ldrb	r3, [r7, #31]
    9a9e:	2225      	movs	r2, #37	; 0x25
    9aa0:	4619      	mov	r1, r3
    9aa2:	6a38      	ldr	r0, [r7, #32]
    9aa4:	4b16      	ldr	r3, [pc, #88]	; (9b00 <_usb_d_dev_out_next+0x288>)
    9aa6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9aa8:	7ffb      	ldrb	r3, [r7, #31]
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d107      	bne.n	9abe <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	68db      	ldr	r3, [r3, #12]
    9ab2:	461a      	mov	r2, r3
    9ab4:	7ffb      	ldrb	r3, [r7, #31]
    9ab6:	2100      	movs	r1, #0
    9ab8:	4618      	mov	r0, r3
    9aba:	4b0f      	ldr	r3, [pc, #60]	; (9af8 <_usb_d_dev_out_next+0x280>)
    9abc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9abe:	2100      	movs	r1, #0
    9ac0:	6878      	ldr	r0, [r7, #4]
    9ac2:	4b10      	ldr	r3, [pc, #64]	; (9b04 <_usb_d_dev_out_next+0x28c>)
    9ac4:	4798      	blx	r3
	return;
    9ac6:	e031      	b.n	9b2c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9ac8:	78fb      	ldrb	r3, [r7, #3]
    9aca:	f083 0301 	eor.w	r3, r3, #1
    9ace:	b2db      	uxtb	r3, r3
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d025      	beq.n	9b20 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9ad4:	7bfb      	ldrb	r3, [r7, #15]
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d018      	beq.n	9b0c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9ada:	7ffb      	ldrb	r3, [r7, #31]
    9adc:	2101      	movs	r1, #1
    9ade:	4618      	mov	r0, r3
    9ae0:	4b09      	ldr	r3, [pc, #36]	; (9b08 <_usb_d_dev_out_next+0x290>)
    9ae2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9ae4:	232d      	movs	r3, #45	; 0x2d
    9ae6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9aea:	e012      	b.n	9b12 <_usb_d_dev_out_next+0x29a>
    9aec:	20000c8c 	.word	0x20000c8c
    9af0:	00009059 	.word	0x00009059
    9af4:	0000ebbd 	.word	0x0000ebbd
    9af8:	00009085 	.word	0x00009085
    9afc:	0000920d 	.word	0x0000920d
    9b00:	00008965 	.word	0x00008965
    9b04:	0000a989 	.word	0x0000a989
    9b08:	0000924d 	.word	0x0000924d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9b0c:	2325      	movs	r3, #37	; 0x25
    9b0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9b12:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9b16:	7ffb      	ldrb	r3, [r7, #31]
    9b18:	4619      	mov	r1, r3
    9b1a:	6a38      	ldr	r0, [r7, #32]
    9b1c:	4b05      	ldr	r3, [pc, #20]	; (9b34 <_usb_d_dev_out_next+0x2bc>)
    9b1e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9b20:	7ffb      	ldrb	r3, [r7, #31]
    9b22:	2201      	movs	r2, #1
    9b24:	2100      	movs	r1, #0
    9b26:	4618      	mov	r0, r3
    9b28:	4b03      	ldr	r3, [pc, #12]	; (9b38 <_usb_d_dev_out_next+0x2c0>)
    9b2a:	4798      	blx	r3
}
    9b2c:	372c      	adds	r7, #44	; 0x2c
    9b2e:	46bd      	mov	sp, r7
    9b30:	bd90      	pop	{r4, r7, pc}
    9b32:	bf00      	nop
    9b34:	00008939 	.word	0x00008939
    9b38:	000092dd 	.word	0x000092dd

00009b3c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9b3c:	b580      	push	{r7, lr}
    9b3e:	b084      	sub	sp, #16
    9b40:	af00      	add	r7, sp, #0
    9b42:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	7c9b      	ldrb	r3, [r3, #18]
    9b48:	f003 030f 	and.w	r3, r3, #15
    9b4c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	7cdb      	ldrb	r3, [r3, #19]
    9b52:	f003 0307 	and.w	r3, r3, #7
    9b56:	b2db      	uxtb	r3, r3
    9b58:	2b01      	cmp	r3, #1
    9b5a:	bf0c      	ite	eq
    9b5c:	2301      	moveq	r3, #1
    9b5e:	2300      	movne	r3, #0
    9b60:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9b62:	7bbb      	ldrb	r3, [r7, #14]
    9b64:	f083 0301 	eor.w	r3, r3, #1
    9b68:	b2db      	uxtb	r3, r3
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d008      	beq.n	9b80 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9b6e:	7bfb      	ldrb	r3, [r7, #15]
    9b70:	4618      	mov	r0, r3
    9b72:	4b20      	ldr	r3, [pc, #128]	; (9bf4 <_usb_d_dev_handle_setup+0xb8>)
    9b74:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9b76:	7bfb      	ldrb	r3, [r7, #15]
    9b78:	4618      	mov	r0, r3
    9b7a:	4b1f      	ldr	r3, [pc, #124]	; (9bf8 <_usb_d_dev_handle_setup+0xbc>)
    9b7c:	4798      	blx	r3
		return;
    9b7e:	e036      	b.n	9bee <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	7cdb      	ldrb	r3, [r3, #19]
    9b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b88:	b2db      	uxtb	r3, r3
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d010      	beq.n	9bb0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9b8e:	687a      	ldr	r2, [r7, #4]
    9b90:	7cd3      	ldrb	r3, [r2, #19]
    9b92:	f36f 1386 	bfc	r3, #6, #1
    9b96:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b98:	7bfb      	ldrb	r3, [r7, #15]
    9b9a:	2200      	movs	r2, #0
    9b9c:	2101      	movs	r1, #1
    9b9e:	4618      	mov	r0, r3
    9ba0:	4b16      	ldr	r3, [pc, #88]	; (9bfc <_usb_d_dev_handle_setup+0xc0>)
    9ba2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9ba4:	7bfb      	ldrb	r3, [r7, #15]
    9ba6:	2200      	movs	r2, #0
    9ba8:	2100      	movs	r1, #0
    9baa:	4618      	mov	r0, r3
    9bac:	4b14      	ldr	r3, [pc, #80]	; (9c00 <_usb_d_dev_handle_setup+0xc4>)
    9bae:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9bb0:	687a      	ldr	r2, [r7, #4]
    9bb2:	7cd3      	ldrb	r3, [r2, #19]
    9bb4:	f36f 03c3 	bfc	r3, #3, #1
    9bb8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9bba:	7bfb      	ldrb	r3, [r7, #15]
    9bbc:	2100      	movs	r1, #0
    9bbe:	4618      	mov	r0, r3
    9bc0:	4b10      	ldr	r3, [pc, #64]	; (9c04 <_usb_d_dev_handle_setup+0xc8>)
    9bc2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9bc4:	7bfb      	ldrb	r3, [r7, #15]
    9bc6:	2101      	movs	r1, #1
    9bc8:	4618      	mov	r0, r3
    9bca:	4b0e      	ldr	r3, [pc, #56]	; (9c04 <_usb_d_dev_handle_setup+0xc8>)
    9bcc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9bce:	7bfb      	ldrb	r3, [r7, #15]
    9bd0:	216f      	movs	r1, #111	; 0x6f
    9bd2:	4618      	mov	r0, r3
    9bd4:	4b0c      	ldr	r3, [pc, #48]	; (9c08 <_usb_d_dev_handle_setup+0xcc>)
    9bd6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9bd8:	7bfb      	ldrb	r3, [r7, #15]
    9bda:	216f      	movs	r1, #111	; 0x6f
    9bdc:	4618      	mov	r0, r3
    9bde:	4b0b      	ldr	r3, [pc, #44]	; (9c0c <_usb_d_dev_handle_setup+0xd0>)
    9be0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9be2:	4b0b      	ldr	r3, [pc, #44]	; (9c10 <_usb_d_dev_handle_setup+0xd4>)
    9be4:	689b      	ldr	r3, [r3, #8]
    9be6:	687a      	ldr	r2, [r7, #4]
    9be8:	7c92      	ldrb	r2, [r2, #18]
    9bea:	4610      	mov	r0, r2
    9bec:	4798      	blx	r3
}
    9bee:	3710      	adds	r7, #16
    9bf0:	46bd      	mov	sp, r7
    9bf2:	bd80      	pop	{r7, pc}
    9bf4:	00008fe1 	.word	0x00008fe1
    9bf8:	00008f8d 	.word	0x00008f8d
    9bfc:	00009285 	.word	0x00009285
    9c00:	000092dd 	.word	0x000092dd
    9c04:	0000924d 	.word	0x0000924d
    9c08:	00008d8d 	.word	0x00008d8d
    9c0c:	00008ddd 	.word	0x00008ddd
    9c10:	20000bc4 	.word	0x20000bc4

00009c14 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c14:	b580      	push	{r7, lr}
    9c16:	b084      	sub	sp, #16
    9c18:	af00      	add	r7, sp, #0
    9c1a:	6078      	str	r0, [r7, #4]
    9c1c:	460b      	mov	r3, r1
    9c1e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	7c9b      	ldrb	r3, [r3, #18]
    9c24:	f003 030f 	and.w	r3, r3, #15
    9c28:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9c2a:	78f9      	ldrb	r1, [r7, #3]
    9c2c:	7bfb      	ldrb	r3, [r7, #15]
    9c2e:	2200      	movs	r2, #0
    9c30:	4618      	mov	r0, r3
    9c32:	4b07      	ldr	r3, [pc, #28]	; (9c50 <_usb_d_dev_handle_stall+0x3c>)
    9c34:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9c36:	4b07      	ldr	r3, [pc, #28]	; (9c54 <_usb_d_dev_handle_stall+0x40>)
    9c38:	691b      	ldr	r3, [r3, #16]
    9c3a:	687a      	ldr	r2, [r7, #4]
    9c3c:	7c90      	ldrb	r0, [r2, #18]
    9c3e:	687a      	ldr	r2, [r7, #4]
    9c40:	6892      	ldr	r2, [r2, #8]
    9c42:	2101      	movs	r1, #1
    9c44:	4798      	blx	r3
}
    9c46:	bf00      	nop
    9c48:	3710      	adds	r7, #16
    9c4a:	46bd      	mov	sp, r7
    9c4c:	bd80      	pop	{r7, pc}
    9c4e:	bf00      	nop
    9c50:	00008f41 	.word	0x00008f41
    9c54:	20000bc4 	.word	0x20000bc4

00009c58 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9c58:	b580      	push	{r7, lr}
    9c5a:	b088      	sub	sp, #32
    9c5c:	af00      	add	r7, sp, #0
    9c5e:	6078      	str	r0, [r7, #4]
    9c60:	460b      	mov	r3, r1
    9c62:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9c64:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c68:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	7c9b      	ldrb	r3, [r3, #18]
    9c6e:	f003 030f 	and.w	r3, r3, #15
    9c72:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9c74:	4b61      	ldr	r3, [pc, #388]	; (9dfc <_usb_d_dev_handle_trfail+0x1a4>)
    9c76:	881b      	ldrh	r3, [r3, #0]
    9c78:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9c7a:	7efb      	ldrb	r3, [r7, #27]
    9c7c:	015b      	lsls	r3, r3, #5
    9c7e:	4a60      	ldr	r2, [pc, #384]	; (9e00 <_usb_d_dev_handle_trfail+0x1a8>)
    9c80:	4413      	add	r3, r2
    9c82:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9c84:	78fb      	ldrb	r3, [r7, #3]
    9c86:	2b00      	cmp	r3, #0
    9c88:	d006      	beq.n	9c98 <_usb_d_dev_handle_trfail+0x40>
    9c8a:	7efb      	ldrb	r3, [r7, #27]
    9c8c:	4619      	mov	r1, r3
    9c8e:	69f8      	ldr	r0, [r7, #28]
    9c90:	4b5c      	ldr	r3, [pc, #368]	; (9e04 <_usb_d_dev_handle_trfail+0x1ac>)
    9c92:	4798      	blx	r3
    9c94:	4603      	mov	r3, r0
    9c96:	e005      	b.n	9ca4 <_usb_d_dev_handle_trfail+0x4c>
    9c98:	7efb      	ldrb	r3, [r7, #27]
    9c9a:	4619      	mov	r1, r3
    9c9c:	69f8      	ldr	r0, [r7, #28]
    9c9e:	4b5a      	ldr	r3, [pc, #360]	; (9e08 <_usb_d_dev_handle_trfail+0x1b0>)
    9ca0:	4798      	blx	r3
    9ca2:	4603      	mov	r3, r0
    9ca4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9ca6:	687b      	ldr	r3, [r7, #4]
    9ca8:	7cdb      	ldrb	r3, [r3, #19]
    9caa:	f003 0307 	and.w	r3, r3, #7
    9cae:	b2db      	uxtb	r3, r3
    9cb0:	2b01      	cmp	r3, #1
    9cb2:	bf0c      	ite	eq
    9cb4:	2301      	moveq	r3, #1
    9cb6:	2300      	movne	r3, #0
    9cb8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9cba:	78fb      	ldrb	r3, [r7, #3]
    9cbc:	011b      	lsls	r3, r3, #4
    9cbe:	697a      	ldr	r2, [r7, #20]
    9cc0:	4413      	add	r3, r2
    9cc2:	7a9b      	ldrb	r3, [r3, #10]
    9cc4:	b2db      	uxtb	r3, r3
    9cc6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9cc8:	7cfb      	ldrb	r3, [r7, #19]
    9cca:	2b02      	cmp	r3, #2
    9ccc:	d12f      	bne.n	9d2e <_usb_d_dev_handle_trfail+0xd6>
    9cce:	7b3b      	ldrb	r3, [r7, #12]
    9cd0:	f003 0301 	and.w	r3, r3, #1
    9cd4:	b2db      	uxtb	r3, r3
    9cd6:	2b00      	cmp	r3, #0
    9cd8:	d029      	beq.n	9d2e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9cda:	78fb      	ldrb	r3, [r7, #3]
    9cdc:	011b      	lsls	r3, r3, #4
    9cde:	697a      	ldr	r2, [r7, #20]
    9ce0:	441a      	add	r2, r3
    9ce2:	7a93      	ldrb	r3, [r2, #10]
    9ce4:	f36f 0300 	bfc	r3, #0, #1
    9ce8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9cea:	78fb      	ldrb	r3, [r7, #3]
    9cec:	f107 0220 	add.w	r2, r7, #32
    9cf0:	4413      	add	r3, r2
    9cf2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9cf6:	7efb      	ldrb	r3, [r7, #27]
    9cf8:	4619      	mov	r1, r3
    9cfa:	69f8      	ldr	r0, [r7, #28]
    9cfc:	4b43      	ldr	r3, [pc, #268]	; (9e0c <_usb_d_dev_handle_trfail+0x1b4>)
    9cfe:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d00:	78fb      	ldrb	r3, [r7, #3]
    9d02:	f107 0220 	add.w	r2, r7, #32
    9d06:	4413      	add	r3, r2
    9d08:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d0c:	7efb      	ldrb	r3, [r7, #27]
    9d0e:	4619      	mov	r1, r3
    9d10:	69f8      	ldr	r0, [r7, #28]
    9d12:	4b3f      	ldr	r3, [pc, #252]	; (9e10 <_usb_d_dev_handle_trfail+0x1b8>)
    9d14:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    9d16:	78fb      	ldrb	r3, [r7, #3]
    9d18:	2b00      	cmp	r3, #0
    9d1a:	bf14      	ite	ne
    9d1c:	2301      	movne	r3, #1
    9d1e:	2300      	moveq	r3, #0
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2204      	movs	r2, #4
    9d24:	4619      	mov	r1, r3
    9d26:	6878      	ldr	r0, [r7, #4]
    9d28:	4b3a      	ldr	r3, [pc, #232]	; (9e14 <_usb_d_dev_handle_trfail+0x1bc>)
    9d2a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9d2c:	e062      	b.n	9df4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9d2e:	7b3b      	ldrb	r3, [r7, #12]
    9d30:	f003 0302 	and.w	r3, r3, #2
    9d34:	b2db      	uxtb	r3, r3
    9d36:	2b00      	cmp	r3, #0
    9d38:	d040      	beq.n	9dbc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9d3a:	78fb      	ldrb	r3, [r7, #3]
    9d3c:	011b      	lsls	r3, r3, #4
    9d3e:	697a      	ldr	r2, [r7, #20]
    9d40:	441a      	add	r2, r3
    9d42:	7a93      	ldrb	r3, [r2, #10]
    9d44:	f36f 0341 	bfc	r3, #1, #1
    9d48:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9d4a:	78fb      	ldrb	r3, [r7, #3]
    9d4c:	f107 0220 	add.w	r2, r7, #32
    9d50:	4413      	add	r3, r2
    9d52:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d56:	7efb      	ldrb	r3, [r7, #27]
    9d58:	4619      	mov	r1, r3
    9d5a:	69f8      	ldr	r0, [r7, #28]
    9d5c:	4b2b      	ldr	r3, [pc, #172]	; (9e0c <_usb_d_dev_handle_trfail+0x1b4>)
    9d5e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9d60:	78fb      	ldrb	r3, [r7, #3]
    9d62:	f107 0220 	add.w	r2, r7, #32
    9d66:	4413      	add	r3, r2
    9d68:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9d6c:	7efb      	ldrb	r3, [r7, #27]
    9d6e:	4619      	mov	r1, r3
    9d70:	69f8      	ldr	r0, [r7, #28]
    9d72:	4b27      	ldr	r3, [pc, #156]	; (9e10 <_usb_d_dev_handle_trfail+0x1b8>)
    9d74:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9d76:	7cbb      	ldrb	r3, [r7, #18]
    9d78:	2b00      	cmp	r3, #0
    9d7a:	d03b      	beq.n	9df4 <_usb_d_dev_handle_trfail+0x19c>
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	7cdb      	ldrb	r3, [r3, #19]
    9d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d84:	b2db      	uxtb	r3, r3
    9d86:	2b00      	cmp	r3, #0
    9d88:	d034      	beq.n	9df4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9d8a:	687b      	ldr	r3, [r7, #4]
    9d8c:	7cdb      	ldrb	r3, [r3, #19]
    9d8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9d92:	b2db      	uxtb	r3, r3
    9d94:	461a      	mov	r2, r3
    9d96:	78fb      	ldrb	r3, [r7, #3]
    9d98:	4293      	cmp	r3, r2
    9d9a:	d02b      	beq.n	9df4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9d9c:	687b      	ldr	r3, [r7, #4]
    9d9e:	7cdb      	ldrb	r3, [r3, #19]
    9da0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9da4:	b2db      	uxtb	r3, r3
    9da6:	2b00      	cmp	r3, #0
    9da8:	bf14      	ite	ne
    9daa:	2301      	movne	r3, #1
    9dac:	2300      	moveq	r3, #0
    9dae:	b2db      	uxtb	r3, r3
    9db0:	2200      	movs	r2, #0
    9db2:	4619      	mov	r1, r3
    9db4:	6878      	ldr	r0, [r7, #4]
    9db6:	4b17      	ldr	r3, [pc, #92]	; (9e14 <_usb_d_dev_handle_trfail+0x1bc>)
    9db8:	4798      	blx	r3
}
    9dba:	e01b      	b.n	9df4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9dbc:	78fa      	ldrb	r2, [r7, #3]
    9dbe:	7efb      	ldrb	r3, [r7, #27]
    9dc0:	4611      	mov	r1, r2
    9dc2:	4618      	mov	r0, r3
    9dc4:	4b14      	ldr	r3, [pc, #80]	; (9e18 <_usb_d_dev_handle_trfail+0x1c0>)
    9dc6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9dc8:	78fb      	ldrb	r3, [r7, #3]
    9dca:	f107 0220 	add.w	r2, r7, #32
    9dce:	4413      	add	r3, r2
    9dd0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9dd4:	7efb      	ldrb	r3, [r7, #27]
    9dd6:	4619      	mov	r1, r3
    9dd8:	69f8      	ldr	r0, [r7, #28]
    9dda:	4b0c      	ldr	r3, [pc, #48]	; (9e0c <_usb_d_dev_handle_trfail+0x1b4>)
    9ddc:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9dde:	78fb      	ldrb	r3, [r7, #3]
    9de0:	f107 0220 	add.w	r2, r7, #32
    9de4:	4413      	add	r3, r2
    9de6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9dea:	7efb      	ldrb	r3, [r7, #27]
    9dec:	4619      	mov	r1, r3
    9dee:	69f8      	ldr	r0, [r7, #28]
    9df0:	4b07      	ldr	r3, [pc, #28]	; (9e10 <_usb_d_dev_handle_trfail+0x1b8>)
    9df2:	4798      	blx	r3
}
    9df4:	bf00      	nop
    9df6:	3720      	adds	r7, #32
    9df8:	46bd      	mov	sp, r7
    9dfa:	bd80      	pop	{r7, pc}
    9dfc:	0000f380 	.word	0x0000f380
    9e00:	20000c8c 	.word	0x20000c8c
    9e04:	000089c1 	.word	0x000089c1
    9e08:	00008991 	.word	0x00008991
    9e0c:	00008865 	.word	0x00008865
    9e10:	00008965 	.word	0x00008965
    9e14:	0000a9d1 	.word	0x0000a9d1
    9e18:	0000924d 	.word	0x0000924d

00009e1c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b082      	sub	sp, #8
    9e20:	af00      	add	r7, sp, #0
    9e22:	6078      	str	r0, [r7, #4]
    9e24:	460b      	mov	r3, r1
    9e26:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e28:	78fb      	ldrb	r3, [r7, #3]
    9e2a:	f003 0310 	and.w	r3, r3, #16
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d003      	beq.n	9e3a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9e32:	6878      	ldr	r0, [r7, #4]
    9e34:	4b0c      	ldr	r3, [pc, #48]	; (9e68 <_usb_d_dev_trans_setup_isr+0x4c>)
    9e36:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9e38:	e012      	b.n	9e60 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e3a:	78fb      	ldrb	r3, [r7, #3]
    9e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e40:	2b00      	cmp	r3, #0
    9e42:	d004      	beq.n	9e4e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9e44:	2101      	movs	r1, #1
    9e46:	6878      	ldr	r0, [r7, #4]
    9e48:	4b08      	ldr	r3, [pc, #32]	; (9e6c <_usb_d_dev_trans_setup_isr+0x50>)
    9e4a:	4798      	blx	r3
}
    9e4c:	e008      	b.n	9e60 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9e4e:	78fb      	ldrb	r3, [r7, #3]
    9e50:	f003 0320 	and.w	r3, r3, #32
    9e54:	2b00      	cmp	r3, #0
    9e56:	d003      	beq.n	9e60 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9e58:	2100      	movs	r1, #0
    9e5a:	6878      	ldr	r0, [r7, #4]
    9e5c:	4b03      	ldr	r3, [pc, #12]	; (9e6c <_usb_d_dev_trans_setup_isr+0x50>)
    9e5e:	4798      	blx	r3
}
    9e60:	bf00      	nop
    9e62:	3708      	adds	r7, #8
    9e64:	46bd      	mov	sp, r7
    9e66:	bd80      	pop	{r7, pc}
    9e68:	00009b3d 	.word	0x00009b3d
    9e6c:	00009c15 	.word	0x00009c15

00009e70 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9e70:	b580      	push	{r7, lr}
    9e72:	b082      	sub	sp, #8
    9e74:	af00      	add	r7, sp, #0
    9e76:	6078      	str	r0, [r7, #4]
    9e78:	460b      	mov	r3, r1
    9e7a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9e7c:	78fb      	ldrb	r3, [r7, #3]
    9e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e82:	2b00      	cmp	r3, #0
    9e84:	d004      	beq.n	9e90 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9e86:	2101      	movs	r1, #1
    9e88:	6878      	ldr	r0, [r7, #4]
    9e8a:	4b1a      	ldr	r3, [pc, #104]	; (9ef4 <_usb_d_dev_trans_in_isr+0x84>)
    9e8c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9e8e:	e02c      	b.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9e90:	78fb      	ldrb	r3, [r7, #3]
    9e92:	f003 0308 	and.w	r3, r3, #8
    9e96:	2b00      	cmp	r3, #0
    9e98:	d004      	beq.n	9ea4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9e9a:	2101      	movs	r1, #1
    9e9c:	6878      	ldr	r0, [r7, #4]
    9e9e:	4b16      	ldr	r3, [pc, #88]	; (9ef8 <_usb_d_dev_trans_in_isr+0x88>)
    9ea0:	4798      	blx	r3
}
    9ea2:	e022      	b.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9ea4:	78fb      	ldrb	r3, [r7, #3]
    9ea6:	f003 0302 	and.w	r3, r3, #2
    9eaa:	2b00      	cmp	r3, #0
    9eac:	d004      	beq.n	9eb8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    9eae:	2101      	movs	r1, #1
    9eb0:	6878      	ldr	r0, [r7, #4]
    9eb2:	4b12      	ldr	r3, [pc, #72]	; (9efc <_usb_d_dev_trans_in_isr+0x8c>)
    9eb4:	4798      	blx	r3
}
    9eb6:	e018      	b.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	7cdb      	ldrb	r3, [r3, #19]
    9ebc:	f003 0307 	and.w	r3, r3, #7
    9ec0:	b2db      	uxtb	r3, r3
    9ec2:	2b01      	cmp	r3, #1
    9ec4:	d111      	bne.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9ec6:	78fb      	ldrb	r3, [r7, #3]
    9ec8:	f003 0304 	and.w	r3, r3, #4
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d004      	beq.n	9eda <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    9ed0:	2100      	movs	r1, #0
    9ed2:	6878      	ldr	r0, [r7, #4]
    9ed4:	4b08      	ldr	r3, [pc, #32]	; (9ef8 <_usb_d_dev_trans_in_isr+0x88>)
    9ed6:	4798      	blx	r3
}
    9ed8:	e007      	b.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9eda:	78fb      	ldrb	r3, [r7, #3]
    9edc:	f003 0310 	and.w	r3, r3, #16
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d002      	beq.n	9eea <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9ee4:	6878      	ldr	r0, [r7, #4]
    9ee6:	4b06      	ldr	r3, [pc, #24]	; (9f00 <_usb_d_dev_trans_in_isr+0x90>)
    9ee8:	4798      	blx	r3
}
    9eea:	bf00      	nop
    9eec:	3708      	adds	r7, #8
    9eee:	46bd      	mov	sp, r7
    9ef0:	bd80      	pop	{r7, pc}
    9ef2:	bf00      	nop
    9ef4:	00009c15 	.word	0x00009c15
    9ef8:	00009c59 	.word	0x00009c59
    9efc:	00009661 	.word	0x00009661
    9f00:	00009b3d 	.word	0x00009b3d

00009f04 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9f04:	b580      	push	{r7, lr}
    9f06:	b082      	sub	sp, #8
    9f08:	af00      	add	r7, sp, #0
    9f0a:	6078      	str	r0, [r7, #4]
    9f0c:	460b      	mov	r3, r1
    9f0e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9f10:	78fb      	ldrb	r3, [r7, #3]
    9f12:	f003 0320 	and.w	r3, r3, #32
    9f16:	2b00      	cmp	r3, #0
    9f18:	d004      	beq.n	9f24 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9f1a:	2100      	movs	r1, #0
    9f1c:	6878      	ldr	r0, [r7, #4]
    9f1e:	4b1a      	ldr	r3, [pc, #104]	; (9f88 <_usb_d_dev_trans_out_isr+0x84>)
    9f20:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9f22:	e02c      	b.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9f24:	78fb      	ldrb	r3, [r7, #3]
    9f26:	f003 0304 	and.w	r3, r3, #4
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d004      	beq.n	9f38 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9f2e:	2100      	movs	r1, #0
    9f30:	6878      	ldr	r0, [r7, #4]
    9f32:	4b16      	ldr	r3, [pc, #88]	; (9f8c <_usb_d_dev_trans_out_isr+0x88>)
    9f34:	4798      	blx	r3
}
    9f36:	e022      	b.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9f38:	78fb      	ldrb	r3, [r7, #3]
    9f3a:	f003 0301 	and.w	r3, r3, #1
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d004      	beq.n	9f4c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9f42:	2101      	movs	r1, #1
    9f44:	6878      	ldr	r0, [r7, #4]
    9f46:	4b12      	ldr	r3, [pc, #72]	; (9f90 <_usb_d_dev_trans_out_isr+0x8c>)
    9f48:	4798      	blx	r3
}
    9f4a:	e018      	b.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	7cdb      	ldrb	r3, [r3, #19]
    9f50:	f003 0307 	and.w	r3, r3, #7
    9f54:	b2db      	uxtb	r3, r3
    9f56:	2b01      	cmp	r3, #1
    9f58:	d111      	bne.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9f5a:	78fb      	ldrb	r3, [r7, #3]
    9f5c:	f003 0308 	and.w	r3, r3, #8
    9f60:	2b00      	cmp	r3, #0
    9f62:	d004      	beq.n	9f6e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9f64:	2101      	movs	r1, #1
    9f66:	6878      	ldr	r0, [r7, #4]
    9f68:	4b08      	ldr	r3, [pc, #32]	; (9f8c <_usb_d_dev_trans_out_isr+0x88>)
    9f6a:	4798      	blx	r3
}
    9f6c:	e007      	b.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9f6e:	78fb      	ldrb	r3, [r7, #3]
    9f70:	f003 0310 	and.w	r3, r3, #16
    9f74:	2b00      	cmp	r3, #0
    9f76:	d002      	beq.n	9f7e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9f78:	6878      	ldr	r0, [r7, #4]
    9f7a:	4b06      	ldr	r3, [pc, #24]	; (9f94 <_usb_d_dev_trans_out_isr+0x90>)
    9f7c:	4798      	blx	r3
}
    9f7e:	bf00      	nop
    9f80:	3708      	adds	r7, #8
    9f82:	46bd      	mov	sp, r7
    9f84:	bd80      	pop	{r7, pc}
    9f86:	bf00      	nop
    9f88:	00009c15 	.word	0x00009c15
    9f8c:	00009c59 	.word	0x00009c59
    9f90:	00009879 	.word	0x00009879
    9f94:	00009b3d 	.word	0x00009b3d

00009f98 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9f98:	b580      	push	{r7, lr}
    9f9a:	b084      	sub	sp, #16
    9f9c:	af00      	add	r7, sp, #0
    9f9e:	6078      	str	r0, [r7, #4]
    9fa0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9fa2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9fa6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9fa8:	683b      	ldr	r3, [r7, #0]
    9faa:	7c9b      	ldrb	r3, [r3, #18]
    9fac:	f003 030f 	and.w	r3, r3, #15
    9fb0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9fb2:	7afb      	ldrb	r3, [r7, #11]
    9fb4:	2201      	movs	r2, #1
    9fb6:	409a      	lsls	r2, r3
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	4013      	ands	r3, r2
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d03d      	beq.n	a03c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9fc0:	7afb      	ldrb	r3, [r7, #11]
    9fc2:	68fa      	ldr	r2, [r7, #12]
    9fc4:	3308      	adds	r3, #8
    9fc6:	015b      	lsls	r3, r3, #5
    9fc8:	4413      	add	r3, r2
    9fca:	3307      	adds	r3, #7
    9fcc:	781b      	ldrb	r3, [r3, #0]
    9fce:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    9fd0:	7afb      	ldrb	r3, [r7, #11]
    9fd2:	68fa      	ldr	r2, [r7, #12]
    9fd4:	015b      	lsls	r3, r3, #5
    9fd6:	4413      	add	r3, r2
    9fd8:	f203 1309 	addw	r3, r3, #265	; 0x109
    9fdc:	781b      	ldrb	r3, [r3, #0]
    9fde:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    9fe0:	7aba      	ldrb	r2, [r7, #10]
    9fe2:	7a7b      	ldrb	r3, [r7, #9]
    9fe4:	4013      	ands	r3, r2
    9fe6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9fe8:	7abb      	ldrb	r3, [r7, #10]
    9fea:	2b00      	cmp	r3, #0
    9fec:	d027      	beq.n	a03e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    9fee:	683b      	ldr	r3, [r7, #0]
    9ff0:	7cdb      	ldrb	r3, [r3, #19]
    9ff2:	f003 0307 	and.w	r3, r3, #7
    9ff6:	b2db      	uxtb	r3, r3
    9ff8:	2b01      	cmp	r3, #1
    9ffa:	d10c      	bne.n	a016 <_usb_d_dev_handle_eps+0x7e>
    9ffc:	683b      	ldr	r3, [r7, #0]
    9ffe:	7cdb      	ldrb	r3, [r3, #19]
    a000:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a004:	b2db      	uxtb	r3, r3
    a006:	2b00      	cmp	r3, #0
    a008:	d105      	bne.n	a016 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a00a:	7abb      	ldrb	r3, [r7, #10]
    a00c:	4619      	mov	r1, r3
    a00e:	6838      	ldr	r0, [r7, #0]
    a010:	4b0c      	ldr	r3, [pc, #48]	; (a044 <_usb_d_dev_handle_eps+0xac>)
    a012:	4798      	blx	r3
    a014:	e013      	b.n	a03e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a016:	683b      	ldr	r3, [r7, #0]
    a018:	7cdb      	ldrb	r3, [r3, #19]
    a01a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a01e:	b2db      	uxtb	r3, r3
    a020:	2b00      	cmp	r3, #0
    a022:	d005      	beq.n	a030 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a024:	7abb      	ldrb	r3, [r7, #10]
    a026:	4619      	mov	r1, r3
    a028:	6838      	ldr	r0, [r7, #0]
    a02a:	4b07      	ldr	r3, [pc, #28]	; (a048 <_usb_d_dev_handle_eps+0xb0>)
    a02c:	4798      	blx	r3
    a02e:	e006      	b.n	a03e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a030:	7abb      	ldrb	r3, [r7, #10]
    a032:	4619      	mov	r1, r3
    a034:	6838      	ldr	r0, [r7, #0]
    a036:	4b05      	ldr	r3, [pc, #20]	; (a04c <_usb_d_dev_handle_eps+0xb4>)
    a038:	4798      	blx	r3
    a03a:	e000      	b.n	a03e <_usb_d_dev_handle_eps+0xa6>
		return;
    a03c:	bf00      	nop
		}
	}
}
    a03e:	3710      	adds	r7, #16
    a040:	46bd      	mov	sp, r7
    a042:	bd80      	pop	{r7, pc}
    a044:	00009e1d 	.word	0x00009e1d
    a048:	00009e71 	.word	0x00009e71
    a04c:	00009f05 	.word	0x00009f05

0000a050 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a050:	b580      	push	{r7, lr}
    a052:	b084      	sub	sp, #16
    a054:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a056:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a05a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a05c:	68bb      	ldr	r3, [r7, #8]
    a05e:	8c1b      	ldrh	r3, [r3, #32]
    a060:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a062:	88fb      	ldrh	r3, [r7, #6]
    a064:	2b00      	cmp	r3, #0
    a066:	d104      	bne.n	a072 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a068:	4b13      	ldr	r3, [pc, #76]	; (a0b8 <_usb_d_dev_handler+0x68>)
    a06a:	4798      	blx	r3
    a06c:	4603      	mov	r3, r0
    a06e:	2b00      	cmp	r3, #0
    a070:	d11e      	bne.n	a0b0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a072:	2300      	movs	r3, #0
    a074:	73fb      	strb	r3, [r7, #15]
    a076:	e017      	b.n	a0a8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a078:	7bfa      	ldrb	r2, [r7, #15]
    a07a:	4613      	mov	r3, r2
    a07c:	009b      	lsls	r3, r3, #2
    a07e:	4413      	add	r3, r2
    a080:	009b      	lsls	r3, r3, #2
    a082:	3310      	adds	r3, #16
    a084:	4a0d      	ldr	r2, [pc, #52]	; (a0bc <_usb_d_dev_handler+0x6c>)
    a086:	4413      	add	r3, r2
    a088:	3304      	adds	r3, #4
    a08a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a08c:	683b      	ldr	r3, [r7, #0]
    a08e:	7c9b      	ldrb	r3, [r3, #18]
    a090:	2bff      	cmp	r3, #255	; 0xff
    a092:	d005      	beq.n	a0a0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a094:	88fb      	ldrh	r3, [r7, #6]
    a096:	6839      	ldr	r1, [r7, #0]
    a098:	4618      	mov	r0, r3
    a09a:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <_usb_d_dev_handler+0x70>)
    a09c:	4798      	blx	r3
    a09e:	e000      	b.n	a0a2 <_usb_d_dev_handler+0x52>
			continue;
    a0a0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a0a2:	7bfb      	ldrb	r3, [r7, #15]
    a0a4:	3301      	adds	r3, #1
    a0a6:	73fb      	strb	r3, [r7, #15]
    a0a8:	7bfb      	ldrb	r3, [r7, #15]
    a0aa:	2b08      	cmp	r3, #8
    a0ac:	d9e4      	bls.n	a078 <_usb_d_dev_handler+0x28>
    a0ae:	e000      	b.n	a0b2 <_usb_d_dev_handler+0x62>
			return;
    a0b0:	bf00      	nop
	}
}
    a0b2:	3710      	adds	r7, #16
    a0b4:	46bd      	mov	sp, r7
    a0b6:	bd80      	pop	{r7, pc}
    a0b8:	000095a9 	.word	0x000095a9
    a0bc:	20000bc4 	.word	0x20000bc4
    a0c0:	00009f99 	.word	0x00009f99

0000a0c4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a0c4:	b580      	push	{r7, lr}
    a0c6:	b082      	sub	sp, #8
    a0c8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a0ca:	2300      	movs	r3, #0
    a0cc:	71fb      	strb	r3, [r7, #7]
    a0ce:	e023      	b.n	a118 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a0d0:	79fa      	ldrb	r2, [r7, #7]
    a0d2:	4613      	mov	r3, r2
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	4413      	add	r3, r2
    a0d8:	009b      	lsls	r3, r3, #2
    a0da:	3310      	adds	r3, #16
    a0dc:	4a14      	ldr	r2, [pc, #80]	; (a130 <_usb_d_dev_reset_epts+0x6c>)
    a0de:	4413      	add	r3, r2
    a0e0:	3304      	adds	r3, #4
    a0e2:	2103      	movs	r1, #3
    a0e4:	4618      	mov	r0, r3
    a0e6:	4b13      	ldr	r3, [pc, #76]	; (a134 <_usb_d_dev_reset_epts+0x70>)
    a0e8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a0ea:	79fa      	ldrb	r2, [r7, #7]
    a0ec:	4910      	ldr	r1, [pc, #64]	; (a130 <_usb_d_dev_reset_epts+0x6c>)
    a0ee:	4613      	mov	r3, r2
    a0f0:	009b      	lsls	r3, r3, #2
    a0f2:	4413      	add	r3, r2
    a0f4:	009b      	lsls	r3, r3, #2
    a0f6:	440b      	add	r3, r1
    a0f8:	3326      	adds	r3, #38	; 0x26
    a0fa:	22ff      	movs	r2, #255	; 0xff
    a0fc:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a0fe:	79fa      	ldrb	r2, [r7, #7]
    a100:	490b      	ldr	r1, [pc, #44]	; (a130 <_usb_d_dev_reset_epts+0x6c>)
    a102:	4613      	mov	r3, r2
    a104:	009b      	lsls	r3, r3, #2
    a106:	4413      	add	r3, r2
    a108:	009b      	lsls	r3, r3, #2
    a10a:	440b      	add	r3, r1
    a10c:	3327      	adds	r3, #39	; 0x27
    a10e:	2200      	movs	r2, #0
    a110:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a112:	79fb      	ldrb	r3, [r7, #7]
    a114:	3301      	adds	r3, #1
    a116:	71fb      	strb	r3, [r7, #7]
    a118:	79fb      	ldrb	r3, [r7, #7]
    a11a:	2b08      	cmp	r3, #8
    a11c:	d9d8      	bls.n	a0d0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a11e:	22a0      	movs	r2, #160	; 0xa0
    a120:	2100      	movs	r1, #0
    a122:	4805      	ldr	r0, [pc, #20]	; (a138 <_usb_d_dev_reset_epts+0x74>)
    a124:	4b05      	ldr	r3, [pc, #20]	; (a13c <_usb_d_dev_reset_epts+0x78>)
    a126:	4798      	blx	r3
}
    a128:	bf00      	nop
    a12a:	3708      	adds	r7, #8
    a12c:	46bd      	mov	sp, r7
    a12e:	bd80      	pop	{r7, pc}
    a130:	20000bc4 	.word	0x20000bc4
    a134:	0000a989 	.word	0x0000a989
    a138:	20000c8c 	.word	0x20000c8c
    a13c:	0000ecf1 	.word	0x0000ecf1

0000a140 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a140:	b580      	push	{r7, lr}
    a142:	b084      	sub	sp, #16
    a144:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a146:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a14a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a14c:	2301      	movs	r3, #1
    a14e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a150:	2304      	movs	r3, #4
    a152:	713b      	strb	r3, [r7, #4]
    a154:	2300      	movs	r3, #0
    a156:	717b      	strb	r3, [r7, #5]
    a158:	2300      	movs	r3, #0
    a15a:	71bb      	strb	r3, [r7, #6]
    a15c:	2300      	movs	r3, #0
    a15e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a160:	2101      	movs	r1, #1
    a162:	68f8      	ldr	r0, [r7, #12]
    a164:	4b26      	ldr	r3, [pc, #152]	; (a200 <_usb_d_dev_init+0xc0>)
    a166:	4798      	blx	r3
    a168:	4603      	mov	r3, r0
    a16a:	f083 0301 	eor.w	r3, r3, #1
    a16e:	b2db      	uxtb	r3, r3
    a170:	2b00      	cmp	r3, #0
    a172:	d011      	beq.n	a198 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a174:	2102      	movs	r1, #2
    a176:	68f8      	ldr	r0, [r7, #12]
    a178:	4b22      	ldr	r3, [pc, #136]	; (a204 <_usb_d_dev_init+0xc4>)
    a17a:	4798      	blx	r3
    a17c:	4603      	mov	r3, r0
    a17e:	2b00      	cmp	r3, #0
    a180:	d006      	beq.n	a190 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a182:	68f8      	ldr	r0, [r7, #12]
    a184:	4b20      	ldr	r3, [pc, #128]	; (a208 <_usb_d_dev_init+0xc8>)
    a186:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a188:	2102      	movs	r1, #2
    a18a:	68f8      	ldr	r0, [r7, #12]
    a18c:	4b1f      	ldr	r3, [pc, #124]	; (a20c <_usb_d_dev_init+0xcc>)
    a18e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a190:	2101      	movs	r1, #1
    a192:	68f8      	ldr	r0, [r7, #12]
    a194:	4b1e      	ldr	r3, [pc, #120]	; (a210 <_usb_d_dev_init+0xd0>)
    a196:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a198:	2101      	movs	r1, #1
    a19a:	68f8      	ldr	r0, [r7, #12]
    a19c:	4b1b      	ldr	r3, [pc, #108]	; (a20c <_usb_d_dev_init+0xcc>)
    a19e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a1a0:	4b1c      	ldr	r3, [pc, #112]	; (a214 <_usb_d_dev_init+0xd4>)
    a1a2:	4a1d      	ldr	r2, [pc, #116]	; (a218 <_usb_d_dev_init+0xd8>)
    a1a4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a1a6:	4b1b      	ldr	r3, [pc, #108]	; (a214 <_usb_d_dev_init+0xd4>)
    a1a8:	4a1b      	ldr	r2, [pc, #108]	; (a218 <_usb_d_dev_init+0xd8>)
    a1aa:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a1ac:	4b19      	ldr	r3, [pc, #100]	; (a214 <_usb_d_dev_init+0xd4>)
    a1ae:	4a1a      	ldr	r2, [pc, #104]	; (a218 <_usb_d_dev_init+0xd8>)
    a1b0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a1b2:	4b18      	ldr	r3, [pc, #96]	; (a214 <_usb_d_dev_init+0xd4>)
    a1b4:	4a18      	ldr	r2, [pc, #96]	; (a218 <_usb_d_dev_init+0xd8>)
    a1b6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a1b8:	4b16      	ldr	r3, [pc, #88]	; (a214 <_usb_d_dev_init+0xd4>)
    a1ba:	4a17      	ldr	r2, [pc, #92]	; (a218 <_usb_d_dev_init+0xd8>)
    a1bc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a1be:	4b17      	ldr	r3, [pc, #92]	; (a21c <_usb_d_dev_init+0xdc>)
    a1c0:	4798      	blx	r3

	_usb_load_calib();
    a1c2:	4b17      	ldr	r3, [pc, #92]	; (a220 <_usb_d_dev_init+0xe0>)
    a1c4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a1c6:	2104      	movs	r1, #4
    a1c8:	68f8      	ldr	r0, [r7, #12]
    a1ca:	4b11      	ldr	r3, [pc, #68]	; (a210 <_usb_d_dev_init+0xd0>)
    a1cc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a1ce:	4b15      	ldr	r3, [pc, #84]	; (a224 <_usb_d_dev_init+0xe4>)
    a1d0:	4619      	mov	r1, r3
    a1d2:	68f8      	ldr	r0, [r7, #12]
    a1d4:	4b14      	ldr	r3, [pc, #80]	; (a228 <_usb_d_dev_init+0xe8>)
    a1d6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a1d8:	7afb      	ldrb	r3, [r7, #11]
    a1da:	f107 0210 	add.w	r2, r7, #16
    a1de:	4413      	add	r3, r2
    a1e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a1e4:	f043 0301 	orr.w	r3, r3, #1
    a1e8:	b2db      	uxtb	r3, r3
    a1ea:	b29b      	uxth	r3, r3
    a1ec:	4619      	mov	r1, r3
    a1ee:	68f8      	ldr	r0, [r7, #12]
    a1f0:	4b0e      	ldr	r3, [pc, #56]	; (a22c <_usb_d_dev_init+0xec>)
    a1f2:	4798      	blx	r3

	return ERR_NONE;
    a1f4:	2300      	movs	r3, #0
}
    a1f6:	4618      	mov	r0, r3
    a1f8:	3710      	adds	r7, #16
    a1fa:	46bd      	mov	sp, r7
    a1fc:	bd80      	pop	{r7, pc}
    a1fe:	bf00      	nop
    a200:	000087d9 	.word	0x000087d9
    a204:	00008b29 	.word	0x00008b29
    a208:	00008afd 	.word	0x00008afd
    a20c:	000087af 	.word	0x000087af
    a210:	00008b59 	.word	0x00008b59
    a214:	20000bc4 	.word	0x20000bc4
    a218:	00008c21 	.word	0x00008c21
    a21c:	0000a0c5 	.word	0x0000a0c5
    a220:	00008c39 	.word	0x00008c39
    a224:	20000c8c 	.word	0x20000c8c
    a228:	00008c05 	.word	0x00008c05
    a22c:	00008bc9 	.word	0x00008bc9

0000a230 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a230:	b580      	push	{r7, lr}
    a232:	b082      	sub	sp, #8
    a234:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a236:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a23a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a23c:	2103      	movs	r1, #3
    a23e:	6878      	ldr	r0, [r7, #4]
    a240:	4b17      	ldr	r3, [pc, #92]	; (a2a0 <_usb_d_dev_enable+0x70>)
    a242:	4798      	blx	r3
    a244:	4603      	mov	r3, r0
    a246:	2b00      	cmp	r3, #0
    a248:	d002      	beq.n	a250 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a24a:	f06f 0310 	mvn.w	r3, #16
    a24e:	e023      	b.n	a298 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a250:	6878      	ldr	r0, [r7, #4]
    a252:	4b14      	ldr	r3, [pc, #80]	; (a2a4 <_usb_d_dev_enable+0x74>)
    a254:	4798      	blx	r3
    a256:	4603      	mov	r3, r0
    a258:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a25a:	78fb      	ldrb	r3, [r7, #3]
    a25c:	f003 0302 	and.w	r3, r3, #2
    a260:	2b00      	cmp	r3, #0
    a262:	d107      	bne.n	a274 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a264:	78fb      	ldrb	r3, [r7, #3]
    a266:	f043 0302 	orr.w	r3, r3, #2
    a26a:	b2db      	uxtb	r3, r3
    a26c:	4619      	mov	r1, r3
    a26e:	6878      	ldr	r0, [r7, #4]
    a270:	4b0d      	ldr	r3, [pc, #52]	; (a2a8 <_usb_d_dev_enable+0x78>)
    a272:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a274:	2050      	movs	r0, #80	; 0x50
    a276:	4b0d      	ldr	r3, [pc, #52]	; (a2ac <_usb_d_dev_enable+0x7c>)
    a278:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a27a:	2051      	movs	r0, #81	; 0x51
    a27c:	4b0b      	ldr	r3, [pc, #44]	; (a2ac <_usb_d_dev_enable+0x7c>)
    a27e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a280:	2052      	movs	r0, #82	; 0x52
    a282:	4b0a      	ldr	r3, [pc, #40]	; (a2ac <_usb_d_dev_enable+0x7c>)
    a284:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a286:	2053      	movs	r0, #83	; 0x53
    a288:	4b08      	ldr	r3, [pc, #32]	; (a2ac <_usb_d_dev_enable+0x7c>)
    a28a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a28c:	f240 218d 	movw	r1, #653	; 0x28d
    a290:	6878      	ldr	r0, [r7, #4]
    a292:	4b07      	ldr	r3, [pc, #28]	; (a2b0 <_usb_d_dev_enable+0x80>)
    a294:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a296:	2300      	movs	r3, #0
}
    a298:	4618      	mov	r0, r3
    a29a:	3708      	adds	r7, #8
    a29c:	46bd      	mov	sp, r7
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	00008ad3 	.word	0x00008ad3
    a2a4:	00008b81 	.word	0x00008b81
    a2a8:	00008b59 	.word	0x00008b59
    a2ac:	000086e5 	.word	0x000086e5
    a2b0:	00008a7d 	.word	0x00008a7d

0000a2b4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a2b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2bc:	4b01      	ldr	r3, [pc, #4]	; (a2c4 <_usb_d_dev_attach+0x10>)
    a2be:	4798      	blx	r3
}
    a2c0:	bf00      	nop
    a2c2:	bd80      	pop	{r7, pc}
    a2c4:	00008ba5 	.word	0x00008ba5

0000a2c8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a2c8:	b580      	push	{r7, lr}
    a2ca:	b082      	sub	sp, #8
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	4603      	mov	r3, r0
    a2d0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a2d2:	79fb      	ldrb	r3, [r7, #7]
    a2d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a2d8:	b2db      	uxtb	r3, r3
    a2da:	4619      	mov	r1, r3
    a2dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a2e0:	4b02      	ldr	r3, [pc, #8]	; (a2ec <_usb_d_dev_set_address+0x24>)
    a2e2:	4798      	blx	r3
}
    a2e4:	bf00      	nop
    a2e6:	3708      	adds	r7, #8
    a2e8:	46bd      	mov	sp, r7
    a2ea:	bd80      	pop	{r7, pc}
    a2ec:	00008be7 	.word	0x00008be7

0000a2f0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a2f0:	b590      	push	{r4, r7, lr}
    a2f2:	b085      	sub	sp, #20
    a2f4:	af00      	add	r7, sp, #0
    a2f6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a2f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2fc:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a2fe:	687b      	ldr	r3, [r7, #4]
    a300:	7c9b      	ldrb	r3, [r3, #18]
    a302:	f003 030f 	and.w	r3, r3, #15
    a306:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	68db      	ldr	r3, [r3, #12]
    a30c:	461a      	mov	r2, r3
    a30e:	7afb      	ldrb	r3, [r7, #11]
    a310:	2100      	movs	r1, #0
    a312:	4618      	mov	r0, r3
    a314:	4b0f      	ldr	r3, [pc, #60]	; (a354 <_usb_d_dev_trans_setup+0x64>)
    a316:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a318:	687b      	ldr	r3, [r7, #4]
    a31a:	8a1b      	ldrh	r3, [r3, #16]
    a31c:	461a      	mov	r2, r3
    a31e:	7af8      	ldrb	r0, [r7, #11]
    a320:	2300      	movs	r3, #0
    a322:	2100      	movs	r1, #0
    a324:	4c0c      	ldr	r4, [pc, #48]	; (a358 <_usb_d_dev_trans_setup+0x68>)
    a326:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a328:	7afb      	ldrb	r3, [r7, #11]
    a32a:	22b0      	movs	r2, #176	; 0xb0
    a32c:	4619      	mov	r1, r3
    a32e:	68f8      	ldr	r0, [r7, #12]
    a330:	4b0a      	ldr	r3, [pc, #40]	; (a35c <_usb_d_dev_trans_setup+0x6c>)
    a332:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a334:	7afb      	ldrb	r3, [r7, #11]
    a336:	2200      	movs	r2, #0
    a338:	2100      	movs	r1, #0
    a33a:	4618      	mov	r0, r3
    a33c:	4b08      	ldr	r3, [pc, #32]	; (a360 <_usb_d_dev_trans_setup+0x70>)
    a33e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a340:	7afb      	ldrb	r3, [r7, #11]
    a342:	2210      	movs	r2, #16
    a344:	4619      	mov	r1, r3
    a346:	68f8      	ldr	r0, [r7, #12]
    a348:	4b06      	ldr	r3, [pc, #24]	; (a364 <_usb_d_dev_trans_setup+0x74>)
    a34a:	4798      	blx	r3
}
    a34c:	bf00      	nop
    a34e:	3714      	adds	r7, #20
    a350:	46bd      	mov	sp, r7
    a352:	bd90      	pop	{r4, r7, pc}
    a354:	00009085 	.word	0x00009085
    a358:	0000920d 	.word	0x0000920d
    a35c:	000088e5 	.word	0x000088e5
    a360:	000092dd 	.word	0x000092dd
    a364:	00008939 	.word	0x00008939

0000a368 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a368:	b580      	push	{r7, lr}
    a36a:	b088      	sub	sp, #32
    a36c:	af00      	add	r7, sp, #0
    a36e:	4603      	mov	r3, r0
    a370:	71fb      	strb	r3, [r7, #7]
    a372:	460b      	mov	r3, r1
    a374:	71bb      	strb	r3, [r7, #6]
    a376:	4613      	mov	r3, r2
    a378:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a37a:	79fb      	ldrb	r3, [r7, #7]
    a37c:	f003 030f 	and.w	r3, r3, #15
    a380:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a382:	79fb      	ldrb	r3, [r7, #7]
    a384:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a388:	2b00      	cmp	r3, #0
    a38a:	bf14      	ite	ne
    a38c:	2301      	movne	r3, #1
    a38e:	2300      	moveq	r3, #0
    a390:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a392:	7fba      	ldrb	r2, [r7, #30]
    a394:	7ffb      	ldrb	r3, [r7, #31]
    a396:	4611      	mov	r1, r2
    a398:	4618      	mov	r0, r3
    a39a:	4b3e      	ldr	r3, [pc, #248]	; (a494 <_usb_d_dev_ep_init+0x12c>)
    a39c:	4798      	blx	r3
    a39e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a3a0:	79bb      	ldrb	r3, [r7, #6]
    a3a2:	f003 0303 	and.w	r3, r3, #3
    a3a6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a3a8:	7ffa      	ldrb	r2, [r7, #31]
    a3aa:	4613      	mov	r3, r2
    a3ac:	005b      	lsls	r3, r3, #1
    a3ae:	4413      	add	r3, r2
    a3b0:	009b      	lsls	r3, r3, #2
    a3b2:	4a39      	ldr	r2, [pc, #228]	; (a498 <_usb_d_dev_ep_init+0x130>)
    a3b4:	4413      	add	r3, r2
    a3b6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a3b8:	7ffb      	ldrb	r3, [r7, #31]
    a3ba:	2b04      	cmp	r3, #4
    a3bc:	d902      	bls.n	a3c4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a3be:	f06f 0311 	mvn.w	r3, #17
    a3c2:	e063      	b.n	a48c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a3c4:	69bb      	ldr	r3, [r7, #24]
    a3c6:	7c9b      	ldrb	r3, [r3, #18]
    a3c8:	2bff      	cmp	r3, #255	; 0xff
    a3ca:	d002      	beq.n	a3d2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a3cc:	f06f 0313 	mvn.w	r3, #19
    a3d0:	e05c      	b.n	a48c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a3d2:	7dfb      	ldrb	r3, [r7, #23]
    a3d4:	2b00      	cmp	r3, #0
    a3d6:	d11f      	bne.n	a418 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a3d8:	7fbb      	ldrb	r3, [r7, #30]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	bf14      	ite	ne
    a3de:	2301      	movne	r3, #1
    a3e0:	2300      	moveq	r3, #0
    a3e2:	b2db      	uxtb	r3, r3
    a3e4:	f083 0301 	eor.w	r3, r3, #1
    a3e8:	b2db      	uxtb	r3, r3
    a3ea:	f003 0301 	and.w	r3, r3, #1
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	7ffb      	ldrb	r3, [r7, #31]
    a3f2:	4611      	mov	r1, r2
    a3f4:	4618      	mov	r0, r3
    a3f6:	4b27      	ldr	r3, [pc, #156]	; (a494 <_usb_d_dev_ep_init+0x12c>)
    a3f8:	4798      	blx	r3
    a3fa:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a3fc:	68fb      	ldr	r3, [r7, #12]
    a3fe:	7c9b      	ldrb	r3, [r3, #18]
    a400:	2bff      	cmp	r3, #255	; 0xff
    a402:	d002      	beq.n	a40a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a404:	f06f 0313 	mvn.w	r3, #19
    a408:	e040      	b.n	a48c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a40a:	693b      	ldr	r3, [r7, #16]
    a40c:	681b      	ldr	r3, [r3, #0]
    a40e:	2b00      	cmp	r3, #0
    a410:	d102      	bne.n	a418 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a412:	f06f 0312 	mvn.w	r3, #18
    a416:	e039      	b.n	a48c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a418:	7fbb      	ldrb	r3, [r7, #30]
    a41a:	2b00      	cmp	r3, #0
    a41c:	d007      	beq.n	a42e <_usb_d_dev_ep_init+0xc6>
    a41e:	693b      	ldr	r3, [r7, #16]
    a420:	685b      	ldr	r3, [r3, #4]
    a422:	2b00      	cmp	r3, #0
    a424:	bf14      	ite	ne
    a426:	2301      	movne	r3, #1
    a428:	2300      	moveq	r3, #0
    a42a:	b2db      	uxtb	r3, r3
    a42c:	e006      	b.n	a43c <_usb_d_dev_ep_init+0xd4>
    a42e:	693b      	ldr	r3, [r7, #16]
    a430:	681b      	ldr	r3, [r3, #0]
    a432:	2b00      	cmp	r3, #0
    a434:	bf14      	ite	ne
    a436:	2301      	movne	r3, #1
    a438:	2300      	moveq	r3, #0
    a43a:	b2db      	uxtb	r3, r3
    a43c:	2b00      	cmp	r3, #0
    a43e:	d00f      	beq.n	a460 <_usb_d_dev_ep_init+0xf8>
    a440:	7fbb      	ldrb	r3, [r7, #30]
    a442:	2b00      	cmp	r3, #0
    a444:	d003      	beq.n	a44e <_usb_d_dev_ep_init+0xe6>
    a446:	693b      	ldr	r3, [r7, #16]
    a448:	895b      	ldrh	r3, [r3, #10]
    a44a:	461a      	mov	r2, r3
    a44c:	e002      	b.n	a454 <_usb_d_dev_ep_init+0xec>
    a44e:	693b      	ldr	r3, [r7, #16]
    a450:	891b      	ldrh	r3, [r3, #8]
    a452:	461a      	mov	r2, r3
    a454:	88bb      	ldrh	r3, [r7, #4]
    a456:	429a      	cmp	r2, r3
    a458:	da02      	bge.n	a460 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a45a:	f06f 0312 	mvn.w	r3, #18
    a45e:	e015      	b.n	a48c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a460:	7fbb      	ldrb	r3, [r7, #30]
    a462:	2b00      	cmp	r3, #0
    a464:	d002      	beq.n	a46c <_usb_d_dev_ep_init+0x104>
    a466:	693b      	ldr	r3, [r7, #16]
    a468:	685b      	ldr	r3, [r3, #4]
    a46a:	e001      	b.n	a470 <_usb_d_dev_ep_init+0x108>
    a46c:	693b      	ldr	r3, [r7, #16]
    a46e:	681b      	ldr	r3, [r3, #0]
    a470:	69ba      	ldr	r2, [r7, #24]
    a472:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a474:	69bb      	ldr	r3, [r7, #24]
    a476:	88ba      	ldrh	r2, [r7, #4]
    a478:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a47a:	7dfb      	ldrb	r3, [r7, #23]
    a47c:	3301      	adds	r3, #1
    a47e:	b2da      	uxtb	r2, r3
    a480:	69bb      	ldr	r3, [r7, #24]
    a482:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a484:	69bb      	ldr	r3, [r7, #24]
    a486:	79fa      	ldrb	r2, [r7, #7]
    a488:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a48a:	2300      	movs	r3, #0
}
    a48c:	4618      	mov	r0, r3
    a48e:	3720      	adds	r7, #32
    a490:	46bd      	mov	sp, r7
    a492:	bd80      	pop	{r7, pc}
    a494:	00009399 	.word	0x00009399
    a498:	0000f344 	.word	0x0000f344

0000a49c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b086      	sub	sp, #24
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	4603      	mov	r3, r0
    a4a4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a4a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a4aa:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a4ac:	79fb      	ldrb	r3, [r7, #7]
    a4ae:	f003 030f 	and.w	r3, r3, #15
    a4b2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a4b4:	79fb      	ldrb	r3, [r7, #7]
    a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	bf14      	ite	ne
    a4be:	2301      	movne	r3, #1
    a4c0:	2300      	moveq	r3, #0
    a4c2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a4c4:	7cba      	ldrb	r2, [r7, #18]
    a4c6:	7cfb      	ldrb	r3, [r7, #19]
    a4c8:	4611      	mov	r1, r2
    a4ca:	4618      	mov	r0, r3
    a4cc:	4b2a      	ldr	r3, [pc, #168]	; (a578 <_usb_d_dev_ep_deinit+0xdc>)
    a4ce:	4798      	blx	r3
    a4d0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a4d2:	7cfb      	ldrb	r3, [r7, #19]
    a4d4:	2b04      	cmp	r3, #4
    a4d6:	d84a      	bhi.n	a56e <_usb_d_dev_ep_deinit+0xd2>
    a4d8:	68fb      	ldr	r3, [r7, #12]
    a4da:	7c9b      	ldrb	r3, [r3, #18]
    a4dc:	2bff      	cmp	r3, #255	; 0xff
    a4de:	d046      	beq.n	a56e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a4e0:	7cbb      	ldrb	r3, [r7, #18]
    a4e2:	2203      	movs	r2, #3
    a4e4:	4619      	mov	r1, r3
    a4e6:	68f8      	ldr	r0, [r7, #12]
    a4e8:	4b24      	ldr	r3, [pc, #144]	; (a57c <_usb_d_dev_ep_deinit+0xe0>)
    a4ea:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a4ec:	68fb      	ldr	r3, [r7, #12]
    a4ee:	7cdb      	ldrb	r3, [r3, #19]
    a4f0:	f003 0307 	and.w	r3, r3, #7
    a4f4:	b2db      	uxtb	r3, r3
    a4f6:	2b01      	cmp	r3, #1
    a4f8:	d107      	bne.n	a50a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a4fa:	79fb      	ldrb	r3, [r7, #7]
    a4fc:	697a      	ldr	r2, [r7, #20]
    a4fe:	3308      	adds	r3, #8
    a500:	015b      	lsls	r3, r3, #5
    a502:	4413      	add	r3, r2
    a504:	2200      	movs	r2, #0
    a506:	701a      	strb	r2, [r3, #0]
    a508:	e02a      	b.n	a560 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a50e:	2b00      	cmp	r3, #0
    a510:	da15      	bge.n	a53e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a512:	79fb      	ldrb	r3, [r7, #7]
    a514:	f003 030f 	and.w	r3, r3, #15
    a518:	79fa      	ldrb	r2, [r7, #7]
    a51a:	f002 020f 	and.w	r2, r2, #15
    a51e:	6979      	ldr	r1, [r7, #20]
    a520:	3208      	adds	r2, #8
    a522:	0152      	lsls	r2, r2, #5
    a524:	440a      	add	r2, r1
    a526:	7812      	ldrb	r2, [r2, #0]
    a528:	b2d2      	uxtb	r2, r2
    a52a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a52e:	b2d1      	uxtb	r1, r2
    a530:	697a      	ldr	r2, [r7, #20]
    a532:	3308      	adds	r3, #8
    a534:	015b      	lsls	r3, r3, #5
    a536:	4413      	add	r3, r2
    a538:	460a      	mov	r2, r1
    a53a:	701a      	strb	r2, [r3, #0]
    a53c:	e010      	b.n	a560 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a53e:	79fb      	ldrb	r3, [r7, #7]
    a540:	79fa      	ldrb	r2, [r7, #7]
    a542:	6979      	ldr	r1, [r7, #20]
    a544:	3208      	adds	r2, #8
    a546:	0152      	lsls	r2, r2, #5
    a548:	440a      	add	r2, r1
    a54a:	7812      	ldrb	r2, [r2, #0]
    a54c:	b2d2      	uxtb	r2, r2
    a54e:	f022 0207 	bic.w	r2, r2, #7
    a552:	b2d1      	uxtb	r1, r2
    a554:	697a      	ldr	r2, [r7, #20]
    a556:	3308      	adds	r3, #8
    a558:	015b      	lsls	r3, r3, #5
    a55a:	4413      	add	r3, r2
    a55c:	460a      	mov	r2, r1
    a55e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a560:	68fb      	ldr	r3, [r7, #12]
    a562:	2200      	movs	r2, #0
    a564:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a566:	68fb      	ldr	r3, [r7, #12]
    a568:	22ff      	movs	r2, #255	; 0xff
    a56a:	749a      	strb	r2, [r3, #18]
    a56c:	e000      	b.n	a570 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a56e:	bf00      	nop
}
    a570:	3718      	adds	r7, #24
    a572:	46bd      	mov	sp, r7
    a574:	bd80      	pop	{r7, pc}
    a576:	bf00      	nop
    a578:	00009399 	.word	0x00009399
    a57c:	0000a9d1 	.word	0x0000a9d1

0000a580 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a580:	b5b0      	push	{r4, r5, r7, lr}
    a582:	b088      	sub	sp, #32
    a584:	af00      	add	r7, sp, #0
    a586:	4603      	mov	r3, r0
    a588:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a58a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a58e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a590:	79fb      	ldrb	r3, [r7, #7]
    a592:	f003 030f 	and.w	r3, r3, #15
    a596:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a598:	79fb      	ldrb	r3, [r7, #7]
    a59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a59e:	2b00      	cmp	r3, #0
    a5a0:	bf14      	ite	ne
    a5a2:	2301      	movne	r3, #1
    a5a4:	2300      	moveq	r3, #0
    a5a6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a5a8:	7eba      	ldrb	r2, [r7, #26]
    a5aa:	7efb      	ldrb	r3, [r7, #27]
    a5ac:	4611      	mov	r1, r2
    a5ae:	4618      	mov	r0, r3
    a5b0:	4b70      	ldr	r3, [pc, #448]	; (a774 <_usb_d_dev_ep_enable+0x1f4>)
    a5b2:	4798      	blx	r3
    a5b4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a5b6:	7efb      	ldrb	r3, [r7, #27]
    a5b8:	4619      	mov	r1, r3
    a5ba:	69f8      	ldr	r0, [r7, #28]
    a5bc:	4b6e      	ldr	r3, [pc, #440]	; (a778 <_usb_d_dev_ep_enable+0x1f8>)
    a5be:	4798      	blx	r3
    a5c0:	4603      	mov	r3, r0
    a5c2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a5c4:	7efb      	ldrb	r3, [r7, #27]
    a5c6:	2b04      	cmp	r3, #4
    a5c8:	d803      	bhi.n	a5d2 <_usb_d_dev_ep_enable+0x52>
    a5ca:	697b      	ldr	r3, [r7, #20]
    a5cc:	7c9b      	ldrb	r3, [r3, #18]
    a5ce:	2bff      	cmp	r3, #255	; 0xff
    a5d0:	d102      	bne.n	a5d8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a5d2:	f06f 0311 	mvn.w	r3, #17
    a5d6:	e0c8      	b.n	a76a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a5d8:	7efb      	ldrb	r3, [r7, #27]
    a5da:	015b      	lsls	r3, r3, #5
    a5dc:	4a67      	ldr	r2, [pc, #412]	; (a77c <_usb_d_dev_ep_enable+0x1fc>)
    a5de:	4413      	add	r3, r2
    a5e0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a5e2:	697b      	ldr	r3, [r7, #20]
    a5e4:	7cdb      	ldrb	r3, [r3, #19]
    a5e6:	f003 0307 	and.w	r3, r3, #7
    a5ea:	b2db      	uxtb	r3, r3
    a5ec:	2b01      	cmp	r3, #1
    a5ee:	d14b      	bne.n	a688 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a5f0:	7cfb      	ldrb	r3, [r7, #19]
    a5f2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d002      	beq.n	a600 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a5fa:	f06f 0313 	mvn.w	r3, #19
    a5fe:	e0b4      	b.n	a76a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a600:	7efb      	ldrb	r3, [r7, #27]
    a602:	2211      	movs	r2, #17
    a604:	4619      	mov	r1, r3
    a606:	69f8      	ldr	r0, [r7, #28]
    a608:	4b5d      	ldr	r3, [pc, #372]	; (a780 <_usb_d_dev_ep_enable+0x200>)
    a60a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a60c:	697b      	ldr	r3, [r7, #20]
    a60e:	8a1b      	ldrh	r3, [r3, #16]
    a610:	039b      	lsls	r3, r3, #14
    a612:	4c5c      	ldr	r4, [pc, #368]	; (a784 <_usb_d_dev_ep_enable+0x204>)
    a614:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a616:	697b      	ldr	r3, [r7, #20]
    a618:	8a1b      	ldrh	r3, [r3, #16]
    a61a:	4618      	mov	r0, r3
    a61c:	4b5a      	ldr	r3, [pc, #360]	; (a788 <_usb_d_dev_ep_enable+0x208>)
    a61e:	4798      	blx	r3
    a620:	4603      	mov	r3, r0
    a622:	071b      	lsls	r3, r3, #28
    a624:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a628:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a62c:	68fb      	ldr	r3, [r7, #12]
    a62e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a630:	68fb      	ldr	r3, [r7, #12]
    a632:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a636:	697b      	ldr	r3, [r7, #20]
    a638:	8a1b      	ldrh	r3, [r3, #16]
    a63a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a63e:	697b      	ldr	r3, [r7, #20]
    a640:	8a1b      	ldrh	r3, [r3, #16]
    a642:	4618      	mov	r0, r3
    a644:	4b50      	ldr	r3, [pc, #320]	; (a788 <_usb_d_dev_ep_enable+0x208>)
    a646:	4798      	blx	r3
    a648:	4603      	mov	r3, r0
    a64a:	071b      	lsls	r3, r3, #28
    a64c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a650:	432b      	orrs	r3, r5
    a652:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a654:	7efb      	ldrb	r3, [r7, #27]
    a656:	2200      	movs	r2, #0
    a658:	2100      	movs	r1, #0
    a65a:	4618      	mov	r0, r3
    a65c:	4b4b      	ldr	r3, [pc, #300]	; (a78c <_usb_d_dev_ep_enable+0x20c>)
    a65e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a660:	7efb      	ldrb	r3, [r7, #27]
    a662:	2200      	movs	r2, #0
    a664:	2101      	movs	r1, #1
    a666:	4618      	mov	r0, r3
    a668:	4b49      	ldr	r3, [pc, #292]	; (a790 <_usb_d_dev_ep_enable+0x210>)
    a66a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a66c:	7efb      	ldrb	r3, [r7, #27]
    a66e:	2100      	movs	r1, #0
    a670:	4618      	mov	r0, r3
    a672:	4b48      	ldr	r3, [pc, #288]	; (a794 <_usb_d_dev_ep_enable+0x214>)
    a674:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a676:	7efb      	ldrb	r3, [r7, #27]
    a678:	2101      	movs	r1, #1
    a67a:	4618      	mov	r0, r3
    a67c:	4b45      	ldr	r3, [pc, #276]	; (a794 <_usb_d_dev_ep_enable+0x214>)
    a67e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a680:	6978      	ldr	r0, [r7, #20]
    a682:	4b45      	ldr	r3, [pc, #276]	; (a798 <_usb_d_dev_ep_enable+0x218>)
    a684:	4798      	blx	r3
    a686:	e06f      	b.n	a768 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a688:	7ebb      	ldrb	r3, [r7, #26]
    a68a:	2b00      	cmp	r3, #0
    a68c:	d038      	beq.n	a700 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a68e:	7cfb      	ldrb	r3, [r7, #19]
    a690:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a694:	2b00      	cmp	r3, #0
    a696:	d002      	beq.n	a69e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a698:	f06f 0313 	mvn.w	r3, #19
    a69c:	e065      	b.n	a76a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a69e:	697b      	ldr	r3, [r7, #20]
    a6a0:	7cdb      	ldrb	r3, [r3, #19]
    a6a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a6a6:	b2db      	uxtb	r3, r3
    a6a8:	011b      	lsls	r3, r3, #4
    a6aa:	b2db      	uxtb	r3, r3
    a6ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a6b0:	b2da      	uxtb	r2, r3
    a6b2:	7cfb      	ldrb	r3, [r7, #19]
    a6b4:	4313      	orrs	r3, r2
    a6b6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a6b8:	7cfa      	ldrb	r2, [r7, #19]
    a6ba:	7efb      	ldrb	r3, [r7, #27]
    a6bc:	4619      	mov	r1, r3
    a6be:	69f8      	ldr	r0, [r7, #28]
    a6c0:	4b2f      	ldr	r3, [pc, #188]	; (a780 <_usb_d_dev_ep_enable+0x200>)
    a6c2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a6c4:	68fb      	ldr	r3, [r7, #12]
    a6c6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a6ca:	697b      	ldr	r3, [r7, #20]
    a6cc:	8a1b      	ldrh	r3, [r3, #16]
    a6ce:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a6d2:	697b      	ldr	r3, [r7, #20]
    a6d4:	8a1b      	ldrh	r3, [r3, #16]
    a6d6:	4618      	mov	r0, r3
    a6d8:	4b2b      	ldr	r3, [pc, #172]	; (a788 <_usb_d_dev_ep_enable+0x208>)
    a6da:	4798      	blx	r3
    a6dc:	4603      	mov	r3, r0
    a6de:	071b      	lsls	r3, r3, #28
    a6e0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a6e4:	432b      	orrs	r3, r5
    a6e6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a6e8:	7efb      	ldrb	r3, [r7, #27]
    a6ea:	2200      	movs	r2, #0
    a6ec:	2101      	movs	r1, #1
    a6ee:	4618      	mov	r0, r3
    a6f0:	4b27      	ldr	r3, [pc, #156]	; (a790 <_usb_d_dev_ep_enable+0x210>)
    a6f2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a6f4:	7efb      	ldrb	r3, [r7, #27]
    a6f6:	2101      	movs	r1, #1
    a6f8:	4618      	mov	r0, r3
    a6fa:	4b26      	ldr	r3, [pc, #152]	; (a794 <_usb_d_dev_ep_enable+0x214>)
    a6fc:	4798      	blx	r3
    a6fe:	e033      	b.n	a768 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    a700:	7cfb      	ldrb	r3, [r7, #19]
    a702:	f003 0307 	and.w	r3, r3, #7
    a706:	2b00      	cmp	r3, #0
    a708:	d002      	beq.n	a710 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    a70a:	f06f 0313 	mvn.w	r3, #19
    a70e:	e02c      	b.n	a76a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    a710:	697b      	ldr	r3, [r7, #20]
    a712:	7cdb      	ldrb	r3, [r3, #19]
    a714:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a718:	b2db      	uxtb	r3, r3
    a71a:	461a      	mov	r2, r3
    a71c:	7cfb      	ldrb	r3, [r7, #19]
    a71e:	4313      	orrs	r3, r2
    a720:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a722:	7cfa      	ldrb	r2, [r7, #19]
    a724:	7efb      	ldrb	r3, [r7, #27]
    a726:	4619      	mov	r1, r3
    a728:	69f8      	ldr	r0, [r7, #28]
    a72a:	4b15      	ldr	r3, [pc, #84]	; (a780 <_usb_d_dev_ep_enable+0x200>)
    a72c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a72e:	697b      	ldr	r3, [r7, #20]
    a730:	8a1b      	ldrh	r3, [r3, #16]
    a732:	039b      	lsls	r3, r3, #14
    a734:	4c13      	ldr	r4, [pc, #76]	; (a784 <_usb_d_dev_ep_enable+0x204>)
    a736:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a738:	697b      	ldr	r3, [r7, #20]
    a73a:	8a1b      	ldrh	r3, [r3, #16]
    a73c:	4618      	mov	r0, r3
    a73e:	4b12      	ldr	r3, [pc, #72]	; (a788 <_usb_d_dev_ep_enable+0x208>)
    a740:	4798      	blx	r3
    a742:	4603      	mov	r3, r0
    a744:	071b      	lsls	r3, r3, #28
    a746:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a74a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a74e:	68fb      	ldr	r3, [r7, #12]
    a750:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a752:	7efb      	ldrb	r3, [r7, #27]
    a754:	2200      	movs	r2, #0
    a756:	2100      	movs	r1, #0
    a758:	4618      	mov	r0, r3
    a75a:	4b0c      	ldr	r3, [pc, #48]	; (a78c <_usb_d_dev_ep_enable+0x20c>)
    a75c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    a75e:	7efb      	ldrb	r3, [r7, #27]
    a760:	2100      	movs	r1, #0
    a762:	4618      	mov	r0, r3
    a764:	4b0b      	ldr	r3, [pc, #44]	; (a794 <_usb_d_dev_ep_enable+0x214>)
    a766:	4798      	blx	r3
	}

	return USB_OK;
    a768:	2300      	movs	r3, #0
}
    a76a:	4618      	mov	r0, r3
    a76c:	3720      	adds	r7, #32
    a76e:	46bd      	mov	sp, r7
    a770:	bdb0      	pop	{r4, r5, r7, pc}
    a772:	bf00      	nop
    a774:	00009399 	.word	0x00009399
    a778:	00008a1f 	.word	0x00008a1f
    a77c:	20000c8c 	.word	0x20000c8c
    a780:	000089f5 	.word	0x000089f5
    a784:	0fffc000 	.word	0x0fffc000
    a788:	00009335 	.word	0x00009335
    a78c:	000092dd 	.word	0x000092dd
    a790:	00009285 	.word	0x00009285
    a794:	0000924d 	.word	0x0000924d
    a798:	0000a2f1 	.word	0x0000a2f1

0000a79c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    a79c:	b580      	push	{r7, lr}
    a79e:	b084      	sub	sp, #16
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	6078      	str	r0, [r7, #4]
    a7a4:	460b      	mov	r3, r1
    a7a6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	7c9b      	ldrb	r3, [r3, #18]
    a7ac:	f003 030f 	and.w	r3, r3, #15
    a7b0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    a7b2:	78fa      	ldrb	r2, [r7, #3]
    a7b4:	7bfb      	ldrb	r3, [r7, #15]
    a7b6:	4611      	mov	r1, r2
    a7b8:	4618      	mov	r0, r3
    a7ba:	4b03      	ldr	r3, [pc, #12]	; (a7c8 <_usb_d_dev_ep_stall_get+0x2c>)
    a7bc:	4798      	blx	r3
    a7be:	4603      	mov	r3, r0
}
    a7c0:	4618      	mov	r0, r3
    a7c2:	3710      	adds	r7, #16
    a7c4:	46bd      	mov	sp, r7
    a7c6:	bd80      	pop	{r7, pc}
    a7c8:	00008e8d 	.word	0x00008e8d

0000a7cc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    a7cc:	b580      	push	{r7, lr}
    a7ce:	b084      	sub	sp, #16
    a7d0:	af00      	add	r7, sp, #0
    a7d2:	6078      	str	r0, [r7, #4]
    a7d4:	460b      	mov	r3, r1
    a7d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	7c9b      	ldrb	r3, [r3, #18]
    a7dc:	f003 030f 	and.w	r3, r3, #15
    a7e0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    a7e2:	78f9      	ldrb	r1, [r7, #3]
    a7e4:	7bfb      	ldrb	r3, [r7, #15]
    a7e6:	2201      	movs	r2, #1
    a7e8:	4618      	mov	r0, r3
    a7ea:	4b0a      	ldr	r3, [pc, #40]	; (a814 <_usb_d_dev_ep_stall_set+0x48>)
    a7ec:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a7ee:	78fb      	ldrb	r3, [r7, #3]
    a7f0:	2220      	movs	r2, #32
    a7f2:	409a      	lsls	r2, r3
    a7f4:	7bfb      	ldrb	r3, [r7, #15]
    a7f6:	4611      	mov	r1, r2
    a7f8:	4618      	mov	r0, r3
    a7fa:	4b07      	ldr	r3, [pc, #28]	; (a818 <_usb_d_dev_ep_stall_set+0x4c>)
    a7fc:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    a7fe:	687a      	ldr	r2, [r7, #4]
    a800:	7cd3      	ldrb	r3, [r2, #19]
    a802:	f043 0308 	orr.w	r3, r3, #8
    a806:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    a808:	2300      	movs	r3, #0
}
    a80a:	4618      	mov	r0, r3
    a80c:	3710      	adds	r7, #16
    a80e:	46bd      	mov	sp, r7
    a810:	bd80      	pop	{r7, pc}
    a812:	bf00      	nop
    a814:	00008e35 	.word	0x00008e35
    a818:	00008db5 	.word	0x00008db5

0000a81c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    a81c:	b580      	push	{r7, lr}
    a81e:	b084      	sub	sp, #16
    a820:	af00      	add	r7, sp, #0
    a822:	6078      	str	r0, [r7, #4]
    a824:	460b      	mov	r3, r1
    a826:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    a828:	687b      	ldr	r3, [r7, #4]
    a82a:	7c9b      	ldrb	r3, [r3, #18]
    a82c:	f003 030f 	and.w	r3, r3, #15
    a830:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    a832:	78fa      	ldrb	r2, [r7, #3]
    a834:	7bfb      	ldrb	r3, [r7, #15]
    a836:	4611      	mov	r1, r2
    a838:	4618      	mov	r0, r3
    a83a:	4b28      	ldr	r3, [pc, #160]	; (a8dc <_usb_d_dev_ep_stall_clr+0xc0>)
    a83c:	4798      	blx	r3
    a83e:	4603      	mov	r3, r0
    a840:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    a842:	7bbb      	ldrb	r3, [r7, #14]
    a844:	f083 0301 	eor.w	r3, r3, #1
    a848:	b2db      	uxtb	r3, r3
    a84a:	2b00      	cmp	r3, #0
    a84c:	d001      	beq.n	a852 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    a84e:	2300      	movs	r3, #0
    a850:	e040      	b.n	a8d4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    a852:	78f9      	ldrb	r1, [r7, #3]
    a854:	7bfb      	ldrb	r3, [r7, #15]
    a856:	2200      	movs	r2, #0
    a858:	4618      	mov	r0, r3
    a85a:	4b21      	ldr	r3, [pc, #132]	; (a8e0 <_usb_d_dev_ep_stall_clr+0xc4>)
    a85c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    a85e:	78fb      	ldrb	r3, [r7, #3]
    a860:	2220      	movs	r2, #32
    a862:	409a      	lsls	r2, r3
    a864:	7bfb      	ldrb	r3, [r7, #15]
    a866:	4611      	mov	r1, r2
    a868:	4618      	mov	r0, r3
    a86a:	4b1e      	ldr	r3, [pc, #120]	; (a8e4 <_usb_d_dev_ep_stall_clr+0xc8>)
    a86c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    a86e:	78fa      	ldrb	r2, [r7, #3]
    a870:	7bfb      	ldrb	r3, [r7, #15]
    a872:	4611      	mov	r1, r2
    a874:	4618      	mov	r0, r3
    a876:	4b1c      	ldr	r3, [pc, #112]	; (a8e8 <_usb_d_dev_ep_stall_clr+0xcc>)
    a878:	4798      	blx	r3
    a87a:	4603      	mov	r3, r0
    a87c:	2b00      	cmp	r3, #0
    a87e:	d00b      	beq.n	a898 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a880:	78fa      	ldrb	r2, [r7, #3]
    a882:	7bfb      	ldrb	r3, [r7, #15]
    a884:	4611      	mov	r1, r2
    a886:	4618      	mov	r0, r3
    a888:	4b18      	ldr	r3, [pc, #96]	; (a8ec <_usb_d_dev_ep_stall_clr+0xd0>)
    a88a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a88c:	78f9      	ldrb	r1, [r7, #3]
    a88e:	7bfb      	ldrb	r3, [r7, #15]
    a890:	2200      	movs	r2, #0
    a892:	4618      	mov	r0, r3
    a894:	4b16      	ldr	r3, [pc, #88]	; (a8f0 <_usb_d_dev_ep_stall_clr+0xd4>)
    a896:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	7cdb      	ldrb	r3, [r3, #19]
    a89c:	f003 0307 	and.w	r3, r3, #7
    a8a0:	b2db      	uxtb	r3, r3
    a8a2:	2b01      	cmp	r3, #1
    a8a4:	d110      	bne.n	a8c8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a8a6:	7bfb      	ldrb	r3, [r7, #15]
    a8a8:	4619      	mov	r1, r3
    a8aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a8ae:	4b11      	ldr	r3, [pc, #68]	; (a8f4 <_usb_d_dev_ep_stall_clr+0xd8>)
    a8b0:	4798      	blx	r3
    a8b2:	4603      	mov	r3, r0
    a8b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d10a      	bne.n	a8d2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a8bc:	687a      	ldr	r2, [r7, #4]
    a8be:	7cd3      	ldrb	r3, [r2, #19]
    a8c0:	f36f 03c3 	bfc	r3, #3, #1
    a8c4:	74d3      	strb	r3, [r2, #19]
    a8c6:	e004      	b.n	a8d2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a8c8:	687a      	ldr	r2, [r7, #4]
    a8ca:	7cd3      	ldrb	r3, [r2, #19]
    a8cc:	f36f 03c3 	bfc	r3, #3, #1
    a8d0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a8d2:	2300      	movs	r3, #0
}
    a8d4:	4618      	mov	r0, r3
    a8d6:	3710      	adds	r7, #16
    a8d8:	46bd      	mov	sp, r7
    a8da:	bd80      	pop	{r7, pc}
    a8dc:	00008e8d 	.word	0x00008e8d
    a8e0:	00008e35 	.word	0x00008e35
    a8e4:	00008ddd 	.word	0x00008ddd
    a8e8:	00008ed1 	.word	0x00008ed1
    a8ec:	00008f15 	.word	0x00008f15
    a8f0:	00009001 	.word	0x00009001
    a8f4:	000088bd 	.word	0x000088bd

0000a8f8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a8f8:	b580      	push	{r7, lr}
    a8fa:	b086      	sub	sp, #24
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	4603      	mov	r3, r0
    a900:	460a      	mov	r2, r1
    a902:	71fb      	strb	r3, [r7, #7]
    a904:	4613      	mov	r3, r2
    a906:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a908:	79fb      	ldrb	r3, [r7, #7]
    a90a:	f003 030f 	and.w	r3, r3, #15
    a90e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a910:	79fb      	ldrb	r3, [r7, #7]
    a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a916:	2b00      	cmp	r3, #0
    a918:	bf14      	ite	ne
    a91a:	2301      	movne	r3, #1
    a91c:	2300      	moveq	r3, #0
    a91e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a920:	7cba      	ldrb	r2, [r7, #18]
    a922:	7cfb      	ldrb	r3, [r7, #19]
    a924:	4611      	mov	r1, r2
    a926:	4618      	mov	r0, r3
    a928:	4b13      	ldr	r3, [pc, #76]	; (a978 <_usb_d_dev_ep_stall+0x80>)
    a92a:	4798      	blx	r3
    a92c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a92e:	7cfb      	ldrb	r3, [r7, #19]
    a930:	2b04      	cmp	r3, #4
    a932:	d902      	bls.n	a93a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a934:	f06f 0311 	mvn.w	r3, #17
    a938:	e01a      	b.n	a970 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a93a:	79bb      	ldrb	r3, [r7, #6]
    a93c:	2b01      	cmp	r3, #1
    a93e:	d106      	bne.n	a94e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a940:	7cbb      	ldrb	r3, [r7, #18]
    a942:	4619      	mov	r1, r3
    a944:	68f8      	ldr	r0, [r7, #12]
    a946:	4b0d      	ldr	r3, [pc, #52]	; (a97c <_usb_d_dev_ep_stall+0x84>)
    a948:	4798      	blx	r3
    a94a:	6178      	str	r0, [r7, #20]
    a94c:	e00f      	b.n	a96e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a94e:	79bb      	ldrb	r3, [r7, #6]
    a950:	2b00      	cmp	r3, #0
    a952:	d106      	bne.n	a962 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a954:	7cbb      	ldrb	r3, [r7, #18]
    a956:	4619      	mov	r1, r3
    a958:	68f8      	ldr	r0, [r7, #12]
    a95a:	4b09      	ldr	r3, [pc, #36]	; (a980 <_usb_d_dev_ep_stall+0x88>)
    a95c:	4798      	blx	r3
    a95e:	6178      	str	r0, [r7, #20]
    a960:	e005      	b.n	a96e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a962:	7cbb      	ldrb	r3, [r7, #18]
    a964:	4619      	mov	r1, r3
    a966:	68f8      	ldr	r0, [r7, #12]
    a968:	4b06      	ldr	r3, [pc, #24]	; (a984 <_usb_d_dev_ep_stall+0x8c>)
    a96a:	4798      	blx	r3
    a96c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a96e:	697b      	ldr	r3, [r7, #20]
}
    a970:	4618      	mov	r0, r3
    a972:	3718      	adds	r7, #24
    a974:	46bd      	mov	sp, r7
    a976:	bd80      	pop	{r7, pc}
    a978:	00009399 	.word	0x00009399
    a97c:	0000a7cd 	.word	0x0000a7cd
    a980:	0000a81d 	.word	0x0000a81d
    a984:	0000a79d 	.word	0x0000a79d

0000a988 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a988:	b580      	push	{r7, lr}
    a98a:	b082      	sub	sp, #8
    a98c:	af00      	add	r7, sp, #0
    a98e:	6078      	str	r0, [r7, #4]
    a990:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a992:	687b      	ldr	r3, [r7, #4]
    a994:	7c9b      	ldrb	r3, [r3, #18]
    a996:	2bff      	cmp	r3, #255	; 0xff
    a998:	d014      	beq.n	a9c4 <_usb_d_dev_trans_done+0x3c>
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	7cdb      	ldrb	r3, [r3, #19]
    a99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9a2:	b2db      	uxtb	r3, r3
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d00d      	beq.n	a9c4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a9a8:	687a      	ldr	r2, [r7, #4]
    a9aa:	7cd3      	ldrb	r3, [r2, #19]
    a9ac:	f36f 1386 	bfc	r3, #6, #1
    a9b0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a9b2:	4b06      	ldr	r3, [pc, #24]	; (a9cc <_usb_d_dev_trans_done+0x44>)
    a9b4:	691b      	ldr	r3, [r3, #16]
    a9b6:	687a      	ldr	r2, [r7, #4]
    a9b8:	7c90      	ldrb	r0, [r2, #18]
    a9ba:	687a      	ldr	r2, [r7, #4]
    a9bc:	6892      	ldr	r2, [r2, #8]
    a9be:	6839      	ldr	r1, [r7, #0]
    a9c0:	4798      	blx	r3
    a9c2:	e000      	b.n	a9c6 <_usb_d_dev_trans_done+0x3e>
		return;
    a9c4:	bf00      	nop
}
    a9c6:	3708      	adds	r7, #8
    a9c8:	46bd      	mov	sp, r7
    a9ca:	bd80      	pop	{r7, pc}
    a9cc:	20000bc4 	.word	0x20000bc4

0000a9d0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a9d0:	b580      	push	{r7, lr}
    a9d2:	b086      	sub	sp, #24
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	60f8      	str	r0, [r7, #12]
    a9d8:	460b      	mov	r3, r1
    a9da:	607a      	str	r2, [r7, #4]
    a9dc:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a9de:	68fb      	ldr	r3, [r7, #12]
    a9e0:	7c9b      	ldrb	r3, [r3, #18]
    a9e2:	f003 030f 	and.w	r3, r3, #15
    a9e6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a9e8:	4b1f      	ldr	r3, [pc, #124]	; (aa68 <_usb_d_dev_trans_stop+0x98>)
    a9ea:	881b      	ldrh	r3, [r3, #0]
    a9ec:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a9ee:	68fb      	ldr	r3, [r7, #12]
    a9f0:	7c9b      	ldrb	r3, [r3, #18]
    a9f2:	2bff      	cmp	r3, #255	; 0xff
    a9f4:	d033      	beq.n	aa5e <_usb_d_dev_trans_stop+0x8e>
    a9f6:	68fb      	ldr	r3, [r7, #12]
    a9f8:	7cdb      	ldrb	r3, [r3, #19]
    a9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9fe:	b2db      	uxtb	r3, r3
    aa00:	2b00      	cmp	r3, #0
    aa02:	d02c      	beq.n	aa5e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    aa04:	7afb      	ldrb	r3, [r7, #11]
    aa06:	2b00      	cmp	r3, #0
    aa08:	d006      	beq.n	aa18 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aa0a:	7dfb      	ldrb	r3, [r7, #23]
    aa0c:	2200      	movs	r2, #0
    aa0e:	2101      	movs	r1, #1
    aa10:	4618      	mov	r0, r3
    aa12:	4b16      	ldr	r3, [pc, #88]	; (aa6c <_usb_d_dev_trans_stop+0x9c>)
    aa14:	4798      	blx	r3
    aa16:	e005      	b.n	aa24 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa18:	7dfb      	ldrb	r3, [r7, #23]
    aa1a:	2200      	movs	r2, #0
    aa1c:	2100      	movs	r1, #0
    aa1e:	4618      	mov	r0, r3
    aa20:	4b13      	ldr	r3, [pc, #76]	; (aa70 <_usb_d_dev_trans_stop+0xa0>)
    aa22:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    aa24:	7afb      	ldrb	r3, [r7, #11]
    aa26:	f107 0218 	add.w	r2, r7, #24
    aa2a:	4413      	add	r3, r2
    aa2c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa30:	461a      	mov	r2, r3
    aa32:	7dfb      	ldrb	r3, [r7, #23]
    aa34:	4611      	mov	r1, r2
    aa36:	4618      	mov	r0, r3
    aa38:	4b0e      	ldr	r3, [pc, #56]	; (aa74 <_usb_d_dev_trans_stop+0xa4>)
    aa3a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    aa3c:	7afb      	ldrb	r3, [r7, #11]
    aa3e:	f107 0218 	add.w	r2, r7, #24
    aa42:	4413      	add	r3, r2
    aa44:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    aa48:	461a      	mov	r2, r3
    aa4a:	7dfb      	ldrb	r3, [r7, #23]
    aa4c:	4611      	mov	r1, r2
    aa4e:	4618      	mov	r0, r3
    aa50:	4b09      	ldr	r3, [pc, #36]	; (aa78 <_usb_d_dev_trans_stop+0xa8>)
    aa52:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    aa54:	6879      	ldr	r1, [r7, #4]
    aa56:	68f8      	ldr	r0, [r7, #12]
    aa58:	4b08      	ldr	r3, [pc, #32]	; (aa7c <_usb_d_dev_trans_stop+0xac>)
    aa5a:	4798      	blx	r3
    aa5c:	e000      	b.n	aa60 <_usb_d_dev_trans_stop+0x90>
		return;
    aa5e:	bf00      	nop
}
    aa60:	3718      	adds	r7, #24
    aa62:	46bd      	mov	sp, r7
    aa64:	bd80      	pop	{r7, pc}
    aa66:	bf00      	nop
    aa68:	0000f384 	.word	0x0000f384
    aa6c:	00009285 	.word	0x00009285
    aa70:	000092dd 	.word	0x000092dd
    aa74:	00008d8d 	.word	0x00008d8d
    aa78:	00008ddd 	.word	0x00008ddd
    aa7c:	0000a989 	.word	0x0000a989

0000aa80 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b086      	sub	sp, #24
    aa84:	af00      	add	r7, sp, #0
    aa86:	4603      	mov	r3, r0
    aa88:	6039      	str	r1, [r7, #0]
    aa8a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    aa8c:	79fb      	ldrb	r3, [r7, #7]
    aa8e:	f003 030f 	and.w	r3, r3, #15
    aa92:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    aa94:	7dfb      	ldrb	r3, [r7, #23]
    aa96:	015b      	lsls	r3, r3, #5
    aa98:	4a1e      	ldr	r2, [pc, #120]	; (ab14 <_usb_d_dev_ep_read_req+0x94>)
    aa9a:	4413      	add	r3, r2
    aa9c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    aa9e:	693b      	ldr	r3, [r7, #16]
    aaa0:	681b      	ldr	r3, [r3, #0]
    aaa2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    aaa4:	693b      	ldr	r3, [r7, #16]
    aaa6:	685b      	ldr	r3, [r3, #4]
    aaa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    aaac:	b29b      	uxth	r3, r3
    aaae:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    aab0:	7dfb      	ldrb	r3, [r7, #23]
    aab2:	2b04      	cmp	r3, #4
    aab4:	d802      	bhi.n	aabc <_usb_d_dev_ep_read_req+0x3c>
    aab6:	683b      	ldr	r3, [r7, #0]
    aab8:	2b00      	cmp	r3, #0
    aaba:	d102      	bne.n	aac2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    aabc:	f06f 0311 	mvn.w	r3, #17
    aac0:	e023      	b.n	ab0a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    aac2:	7dfb      	ldrb	r3, [r7, #23]
    aac4:	4618      	mov	r0, r3
    aac6:	4b14      	ldr	r3, [pc, #80]	; (ab18 <_usb_d_dev_ep_read_req+0x98>)
    aac8:	4798      	blx	r3
    aaca:	4603      	mov	r3, r0
    aacc:	f083 0301 	eor.w	r3, r3, #1
    aad0:	b2db      	uxtb	r3, r3
    aad2:	2b00      	cmp	r3, #0
    aad4:	d002      	beq.n	aadc <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    aad6:	f06f 0312 	mvn.w	r3, #18
    aada:	e016      	b.n	ab0a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    aadc:	7dfb      	ldrb	r3, [r7, #23]
    aade:	4618      	mov	r0, r3
    aae0:	4b0e      	ldr	r3, [pc, #56]	; (ab1c <_usb_d_dev_ep_read_req+0x9c>)
    aae2:	4798      	blx	r3
    aae4:	4603      	mov	r3, r0
    aae6:	f083 0301 	eor.w	r3, r3, #1
    aaea:	b2db      	uxtb	r3, r3
    aaec:	2b00      	cmp	r3, #0
    aaee:	d001      	beq.n	aaf4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    aaf0:	2300      	movs	r3, #0
    aaf2:	e00a      	b.n	ab0a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    aaf4:	68fb      	ldr	r3, [r7, #12]
    aaf6:	2208      	movs	r2, #8
    aaf8:	4619      	mov	r1, r3
    aafa:	6838      	ldr	r0, [r7, #0]
    aafc:	4b08      	ldr	r3, [pc, #32]	; (ab20 <_usb_d_dev_ep_read_req+0xa0>)
    aafe:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    ab00:	7dfb      	ldrb	r3, [r7, #23]
    ab02:	4618      	mov	r0, r3
    ab04:	4b07      	ldr	r3, [pc, #28]	; (ab24 <_usb_d_dev_ep_read_req+0xa4>)
    ab06:	4798      	blx	r3

	return bytes;
    ab08:	897b      	ldrh	r3, [r7, #10]
}
    ab0a:	4618      	mov	r0, r3
    ab0c:	3718      	adds	r7, #24
    ab0e:	46bd      	mov	sp, r7
    ab10:	bd80      	pop	{r7, pc}
    ab12:	bf00      	nop
    ab14:	20000c8c 	.word	0x20000c8c
    ab18:	00008e05 	.word	0x00008e05
    ab1c:	00008fb1 	.word	0x00008fb1
    ab20:	0000ebbd 	.word	0x0000ebbd
    ab24:	00008fe1 	.word	0x00008fe1

0000ab28 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ab28:	b580      	push	{r7, lr}
    ab2a:	b086      	sub	sp, #24
    ab2c:	af00      	add	r7, sp, #0
    ab2e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	7a1b      	ldrb	r3, [r3, #8]
    ab34:	f003 030f 	and.w	r3, r3, #15
    ab38:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ab3a:	687b      	ldr	r3, [r7, #4]
    ab3c:	7a1b      	ldrb	r3, [r3, #8]
    ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab42:	2b00      	cmp	r3, #0
    ab44:	bf14      	ite	ne
    ab46:	2301      	movne	r3, #1
    ab48:	2300      	moveq	r3, #0
    ab4a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab4c:	7d7a      	ldrb	r2, [r7, #21]
    ab4e:	7dbb      	ldrb	r3, [r7, #22]
    ab50:	4611      	mov	r1, r2
    ab52:	4618      	mov	r0, r3
    ab54:	4b5f      	ldr	r3, [pc, #380]	; (acd4 <_usb_d_dev_ep_trans+0x1ac>)
    ab56:	4798      	blx	r3
    ab58:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ab5a:	693b      	ldr	r3, [r7, #16]
    ab5c:	8a1b      	ldrh	r3, [r3, #16]
    ab5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ab62:	4293      	cmp	r3, r2
    ab64:	d004      	beq.n	ab70 <_usb_d_dev_ep_trans+0x48>
    ab66:	693b      	ldr	r3, [r7, #16]
    ab68:	8a1b      	ldrh	r3, [r3, #16]
    ab6a:	3b01      	subs	r3, #1
    ab6c:	b29b      	uxth	r3, r3
    ab6e:	e001      	b.n	ab74 <_usb_d_dev_ep_trans+0x4c>
    ab70:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ab74:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	685a      	ldr	r2, [r3, #4]
    ab7a:	89fb      	ldrh	r3, [r7, #14]
    ab7c:	4013      	ands	r3, r2
    ab7e:	2b00      	cmp	r3, #0
    ab80:	bf14      	ite	ne
    ab82:	2301      	movne	r3, #1
    ab84:	2300      	moveq	r3, #0
    ab86:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ab88:	2300      	movs	r3, #0
    ab8a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab8c:	7dbb      	ldrb	r3, [r7, #22]
    ab8e:	2b04      	cmp	r3, #4
    ab90:	d902      	bls.n	ab98 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    ab92:	f06f 0311 	mvn.w	r3, #17
    ab96:	e098      	b.n	acca <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ab98:	687b      	ldr	r3, [r7, #4]
    ab9a:	681b      	ldr	r3, [r3, #0]
    ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    aba0:	d31a      	bcc.n	abd8 <_usb_d_dev_ep_trans+0xb0>
    aba2:	687b      	ldr	r3, [r7, #4]
    aba4:	681b      	ldr	r3, [r3, #0]
    aba6:	461a      	mov	r2, r3
    aba8:	687b      	ldr	r3, [r7, #4]
    abaa:	685b      	ldr	r3, [r3, #4]
    abac:	4413      	add	r3, r2
    abae:	4a4a      	ldr	r2, [pc, #296]	; (acd8 <_usb_d_dev_ep_trans+0x1b0>)
    abb0:	4293      	cmp	r3, r2
    abb2:	d811      	bhi.n	abd8 <_usb_d_dev_ep_trans+0xb0>
    abb4:	687b      	ldr	r3, [r7, #4]
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	f003 0303 	and.w	r3, r3, #3
    abbc:	2b00      	cmp	r3, #0
    abbe:	d10b      	bne.n	abd8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    abc0:	7d7b      	ldrb	r3, [r7, #21]
    abc2:	f083 0301 	eor.w	r3, r3, #1
    abc6:	b2db      	uxtb	r3, r3
    abc8:	2b00      	cmp	r3, #0
    abca:	d00e      	beq.n	abea <_usb_d_dev_ep_trans+0xc2>
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	685b      	ldr	r3, [r3, #4]
    abd0:	693a      	ldr	r2, [r7, #16]
    abd2:	8a12      	ldrh	r2, [r2, #16]
    abd4:	4293      	cmp	r3, r2
    abd6:	d208      	bcs.n	abea <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    abd8:	693b      	ldr	r3, [r7, #16]
    abda:	68db      	ldr	r3, [r3, #12]
    abdc:	2b00      	cmp	r3, #0
    abde:	d102      	bne.n	abe6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    abe0:	f06f 0312 	mvn.w	r3, #18
    abe4:	e071      	b.n	acca <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    abe6:	2301      	movs	r3, #1
    abe8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    abea:	7d7b      	ldrb	r3, [r7, #21]
    abec:	f083 0301 	eor.w	r3, r3, #1
    abf0:	b2db      	uxtb	r3, r3
    abf2:	2b00      	cmp	r3, #0
    abf4:	d009      	beq.n	ac0a <_usb_d_dev_ep_trans+0xe2>
    abf6:	7b7b      	ldrb	r3, [r7, #13]
    abf8:	2b00      	cmp	r3, #0
    abfa:	d006      	beq.n	ac0a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    abfc:	693b      	ldr	r3, [r7, #16]
    abfe:	68db      	ldr	r3, [r3, #12]
    ac00:	2b00      	cmp	r3, #0
    ac02:	d102      	bne.n	ac0a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    ac04:	f06f 0311 	mvn.w	r3, #17
    ac08:	e05f      	b.n	acca <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ac0a:	693b      	ldr	r3, [r7, #16]
    ac0c:	7cdb      	ldrb	r3, [r3, #19]
    ac0e:	f003 0308 	and.w	r3, r3, #8
    ac12:	b2db      	uxtb	r3, r3
    ac14:	2b00      	cmp	r3, #0
    ac16:	d001      	beq.n	ac1c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    ac18:	2302      	movs	r3, #2
    ac1a:	e056      	b.n	acca <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ac1c:	f107 0308 	add.w	r3, r7, #8
    ac20:	4618      	mov	r0, r3
    ac22:	4b2e      	ldr	r3, [pc, #184]	; (acdc <_usb_d_dev_ep_trans+0x1b4>)
    ac24:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ac26:	693b      	ldr	r3, [r7, #16]
    ac28:	7cdb      	ldrb	r3, [r3, #19]
    ac2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac2e:	b2db      	uxtb	r3, r3
    ac30:	2b00      	cmp	r3, #0
    ac32:	d006      	beq.n	ac42 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    ac34:	f107 0308 	add.w	r3, r7, #8
    ac38:	4618      	mov	r0, r3
    ac3a:	4b29      	ldr	r3, [pc, #164]	; (ace0 <_usb_d_dev_ep_trans+0x1b8>)
    ac3c:	4798      	blx	r3
		return USB_BUSY;
    ac3e:	2301      	movs	r3, #1
    ac40:	e043      	b.n	acca <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    ac42:	693a      	ldr	r2, [r7, #16]
    ac44:	7cd3      	ldrb	r3, [r2, #19]
    ac46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac4a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    ac4c:	f107 0308 	add.w	r3, r7, #8
    ac50:	4618      	mov	r0, r3
    ac52:	4b23      	ldr	r3, [pc, #140]	; (ace0 <_usb_d_dev_ep_trans+0x1b8>)
    ac54:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	681a      	ldr	r2, [r3, #0]
    ac5a:	693b      	ldr	r3, [r7, #16]
    ac5c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	685a      	ldr	r2, [r3, #4]
    ac62:	693b      	ldr	r3, [r7, #16]
    ac64:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    ac66:	693b      	ldr	r3, [r7, #16]
    ac68:	2200      	movs	r2, #0
    ac6a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    ac6c:	693a      	ldr	r2, [r7, #16]
    ac6e:	7cd3      	ldrb	r3, [r2, #19]
    ac70:	7d79      	ldrb	r1, [r7, #21]
    ac72:	f361 13c7 	bfi	r3, r1, #7, #1
    ac76:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    ac78:	693a      	ldr	r2, [r7, #16]
    ac7a:	7cd3      	ldrb	r3, [r2, #19]
    ac7c:	7df9      	ldrb	r1, [r7, #23]
    ac7e:	f361 1345 	bfi	r3, r1, #5, #1
    ac82:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	7a5b      	ldrb	r3, [r3, #9]
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d007      	beq.n	ac9c <_usb_d_dev_ep_trans+0x174>
    ac8c:	7b7b      	ldrb	r3, [r7, #13]
    ac8e:	f083 0301 	eor.w	r3, r3, #1
    ac92:	b2db      	uxtb	r3, r3
    ac94:	2b00      	cmp	r3, #0
    ac96:	d001      	beq.n	ac9c <_usb_d_dev_ep_trans+0x174>
    ac98:	2301      	movs	r3, #1
    ac9a:	e000      	b.n	ac9e <_usb_d_dev_ep_trans+0x176>
    ac9c:	2300      	movs	r3, #0
    ac9e:	b2db      	uxtb	r3, r3
    aca0:	f003 0301 	and.w	r3, r3, #1
    aca4:	b2d9      	uxtb	r1, r3
    aca6:	693a      	ldr	r2, [r7, #16]
    aca8:	7cd3      	ldrb	r3, [r2, #19]
    acaa:	f361 1304 	bfi	r3, r1, #4, #1
    acae:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    acb0:	7d7b      	ldrb	r3, [r7, #21]
    acb2:	2b00      	cmp	r3, #0
    acb4:	d004      	beq.n	acc0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    acb6:	2100      	movs	r1, #0
    acb8:	6938      	ldr	r0, [r7, #16]
    acba:	4b0a      	ldr	r3, [pc, #40]	; (ace4 <_usb_d_dev_ep_trans+0x1bc>)
    acbc:	4798      	blx	r3
    acbe:	e003      	b.n	acc8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    acc0:	2100      	movs	r1, #0
    acc2:	6938      	ldr	r0, [r7, #16]
    acc4:	4b08      	ldr	r3, [pc, #32]	; (ace8 <_usb_d_dev_ep_trans+0x1c0>)
    acc6:	4798      	blx	r3
	}

	return ERR_NONE;
    acc8:	2300      	movs	r3, #0
}
    acca:	4618      	mov	r0, r3
    accc:	3718      	adds	r7, #24
    acce:	46bd      	mov	sp, r7
    acd0:	bd80      	pop	{r7, pc}
    acd2:	bf00      	nop
    acd4:	00009399 	.word	0x00009399
    acd8:	20041fff 	.word	0x20041fff
    acdc:	0000b4f5 	.word	0x0000b4f5
    ace0:	0000b51b 	.word	0x0000b51b
    ace4:	00009661 	.word	0x00009661
    ace8:	00009879 	.word	0x00009879

0000acec <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    acec:	b580      	push	{r7, lr}
    acee:	b084      	sub	sp, #16
    acf0:	af00      	add	r7, sp, #0
    acf2:	4603      	mov	r3, r0
    acf4:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    acf6:	79fb      	ldrb	r3, [r7, #7]
    acf8:	f003 030f 	and.w	r3, r3, #15
    acfc:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    acfe:	79fb      	ldrb	r3, [r7, #7]
    ad00:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad04:	2b00      	cmp	r3, #0
    ad06:	bf14      	ite	ne
    ad08:	2301      	movne	r3, #1
    ad0a:	2300      	moveq	r3, #0
    ad0c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ad0e:	7bba      	ldrb	r2, [r7, #14]
    ad10:	7bfb      	ldrb	r3, [r7, #15]
    ad12:	4611      	mov	r1, r2
    ad14:	4618      	mov	r0, r3
    ad16:	4b08      	ldr	r3, [pc, #32]	; (ad38 <_usb_d_dev_ep_abort+0x4c>)
    ad18:	4798      	blx	r3
    ad1a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    ad1c:	7bfb      	ldrb	r3, [r7, #15]
    ad1e:	2b04      	cmp	r3, #4
    ad20:	d806      	bhi.n	ad30 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    ad22:	7bbb      	ldrb	r3, [r7, #14]
    ad24:	2202      	movs	r2, #2
    ad26:	4619      	mov	r1, r3
    ad28:	68b8      	ldr	r0, [r7, #8]
    ad2a:	4b04      	ldr	r3, [pc, #16]	; (ad3c <_usb_d_dev_ep_abort+0x50>)
    ad2c:	4798      	blx	r3
    ad2e:	e000      	b.n	ad32 <_usb_d_dev_ep_abort+0x46>
		return;
    ad30:	bf00      	nop
}
    ad32:	3710      	adds	r7, #16
    ad34:	46bd      	mov	sp, r7
    ad36:	bd80      	pop	{r7, pc}
    ad38:	00009399 	.word	0x00009399
    ad3c:	0000a9d1 	.word	0x0000a9d1

0000ad40 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    ad40:	b480      	push	{r7}
    ad42:	b085      	sub	sp, #20
    ad44:	af00      	add	r7, sp, #0
    ad46:	4603      	mov	r3, r0
    ad48:	6039      	str	r1, [r7, #0]
    ad4a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad4c:	683b      	ldr	r3, [r7, #0]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d001      	beq.n	ad56 <_usb_d_dev_register_callback+0x16>
    ad52:	683b      	ldr	r3, [r7, #0]
    ad54:	e000      	b.n	ad58 <_usb_d_dev_register_callback+0x18>
    ad56:	4b0a      	ldr	r3, [pc, #40]	; (ad80 <_usb_d_dev_register_callback+0x40>)
    ad58:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    ad5a:	79fb      	ldrb	r3, [r7, #7]
    ad5c:	2b01      	cmp	r3, #1
    ad5e:	d103      	bne.n	ad68 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    ad60:	4a08      	ldr	r2, [pc, #32]	; (ad84 <_usb_d_dev_register_callback+0x44>)
    ad62:	68fb      	ldr	r3, [r7, #12]
    ad64:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    ad66:	e005      	b.n	ad74 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    ad68:	79fb      	ldrb	r3, [r7, #7]
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d102      	bne.n	ad74 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    ad6e:	4a05      	ldr	r2, [pc, #20]	; (ad84 <_usb_d_dev_register_callback+0x44>)
    ad70:	68fb      	ldr	r3, [r7, #12]
    ad72:	6013      	str	r3, [r2, #0]
}
    ad74:	bf00      	nop
    ad76:	3714      	adds	r7, #20
    ad78:	46bd      	mov	sp, r7
    ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad7e:	4770      	bx	lr
    ad80:	00008c21 	.word	0x00008c21
    ad84:	20000bc4 	.word	0x20000bc4

0000ad88 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    ad88:	b480      	push	{r7}
    ad8a:	b085      	sub	sp, #20
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	4603      	mov	r3, r0
    ad90:	6039      	str	r1, [r7, #0]
    ad92:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    ad94:	683b      	ldr	r3, [r7, #0]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d001      	beq.n	ad9e <_usb_d_dev_register_ep_callback+0x16>
    ad9a:	683b      	ldr	r3, [r7, #0]
    ad9c:	e000      	b.n	ada0 <_usb_d_dev_register_ep_callback+0x18>
    ad9e:	4b0e      	ldr	r3, [pc, #56]	; (add8 <_usb_d_dev_register_ep_callback+0x50>)
    ada0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    ada2:	79fb      	ldrb	r3, [r7, #7]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d103      	bne.n	adb0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    ada8:	4a0c      	ldr	r2, [pc, #48]	; (addc <_usb_d_dev_register_ep_callback+0x54>)
    adaa:	68fb      	ldr	r3, [r7, #12]
    adac:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    adae:	e00c      	b.n	adca <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    adb0:	79fb      	ldrb	r3, [r7, #7]
    adb2:	2b01      	cmp	r3, #1
    adb4:	d103      	bne.n	adbe <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    adb6:	4a09      	ldr	r2, [pc, #36]	; (addc <_usb_d_dev_register_ep_callback+0x54>)
    adb8:	68fb      	ldr	r3, [r7, #12]
    adba:	60d3      	str	r3, [r2, #12]
}
    adbc:	e005      	b.n	adca <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    adbe:	79fb      	ldrb	r3, [r7, #7]
    adc0:	2b02      	cmp	r3, #2
    adc2:	d102      	bne.n	adca <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    adc4:	4a05      	ldr	r2, [pc, #20]	; (addc <_usb_d_dev_register_ep_callback+0x54>)
    adc6:	68fb      	ldr	r3, [r7, #12]
    adc8:	6113      	str	r3, [r2, #16]
}
    adca:	bf00      	nop
    adcc:	3714      	adds	r7, #20
    adce:	46bd      	mov	sp, r7
    add0:	f85d 7b04 	ldr.w	r7, [sp], #4
    add4:	4770      	bx	lr
    add6:	bf00      	nop
    add8:	00008c21 	.word	0x00008c21
    addc:	20000bc4 	.word	0x20000bc4

0000ade0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ade0:	b580      	push	{r7, lr}
    ade2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ade4:	4b01      	ldr	r3, [pc, #4]	; (adec <USB_0_Handler+0xc>)
    ade6:	4798      	blx	r3
}
    ade8:	bf00      	nop
    adea:	bd80      	pop	{r7, pc}
    adec:	0000a051 	.word	0x0000a051

0000adf0 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    adf0:	b580      	push	{r7, lr}
    adf2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    adf4:	4b01      	ldr	r3, [pc, #4]	; (adfc <USB_1_Handler+0xc>)
    adf6:	4798      	blx	r3
}
    adf8:	bf00      	nop
    adfa:	bd80      	pop	{r7, pc}
    adfc:	0000a051 	.word	0x0000a051

0000ae00 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ae00:	b580      	push	{r7, lr}
    ae02:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae04:	4b01      	ldr	r3, [pc, #4]	; (ae0c <USB_2_Handler+0xc>)
    ae06:	4798      	blx	r3
}
    ae08:	bf00      	nop
    ae0a:	bd80      	pop	{r7, pc}
    ae0c:	0000a051 	.word	0x0000a051

0000ae10 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ae10:	b580      	push	{r7, lr}
    ae12:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ae14:	4b01      	ldr	r3, [pc, #4]	; (ae1c <USB_3_Handler+0xc>)
    ae16:	4798      	blx	r3
}
    ae18:	bf00      	nop
    ae1a:	bd80      	pop	{r7, pc}
    ae1c:	0000a051 	.word	0x0000a051

0000ae20 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ae20:	b480      	push	{r7}
    ae22:	b083      	sub	sp, #12
    ae24:	af00      	add	r7, sp, #0
    ae26:	6078      	str	r0, [r7, #4]
    ae28:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ae2a:	bf00      	nop
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	689a      	ldr	r2, [r3, #8]
    ae30:	683b      	ldr	r3, [r7, #0]
    ae32:	4013      	ands	r3, r2
    ae34:	2b00      	cmp	r3, #0
    ae36:	d1f9      	bne.n	ae2c <hri_wdt_wait_for_sync+0xc>
	};
}
    ae38:	bf00      	nop
    ae3a:	370c      	adds	r7, #12
    ae3c:	46bd      	mov	sp, r7
    ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae42:	4770      	bx	lr

0000ae44 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ae44:	b580      	push	{r7, lr}
    ae46:	b084      	sub	sp, #16
    ae48:	af00      	add	r7, sp, #0
    ae4a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae4c:	210e      	movs	r1, #14
    ae4e:	6878      	ldr	r0, [r7, #4]
    ae50:	4b0a      	ldr	r3, [pc, #40]	; (ae7c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ae52:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ae5a:	7bfb      	ldrb	r3, [r7, #15]
    ae5c:	085b      	lsrs	r3, r3, #1
    ae5e:	b2db      	uxtb	r3, r3
    ae60:	f003 0301 	and.w	r3, r3, #1
    ae64:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ae66:	7bfb      	ldrb	r3, [r7, #15]
    ae68:	2b00      	cmp	r3, #0
    ae6a:	bf14      	ite	ne
    ae6c:	2301      	movne	r3, #1
    ae6e:	2300      	moveq	r3, #0
    ae70:	b2db      	uxtb	r3, r3
}
    ae72:	4618      	mov	r0, r3
    ae74:	3710      	adds	r7, #16
    ae76:	46bd      	mov	sp, r7
    ae78:	bd80      	pop	{r7, pc}
    ae7a:	bf00      	nop
    ae7c:	0000ae21 	.word	0x0000ae21

0000ae80 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ae80:	b580      	push	{r7, lr}
    ae82:	b082      	sub	sp, #8
    ae84:	af00      	add	r7, sp, #0
    ae86:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	781b      	ldrb	r3, [r3, #0]
    ae8c:	b2db      	uxtb	r3, r3
    ae8e:	f023 0304 	bic.w	r3, r3, #4
    ae92:	b2da      	uxtb	r2, r3
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ae98:	210e      	movs	r1, #14
    ae9a:	6878      	ldr	r0, [r7, #4]
    ae9c:	4b02      	ldr	r3, [pc, #8]	; (aea8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ae9e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    aea0:	bf00      	nop
    aea2:	3708      	adds	r7, #8
    aea4:	46bd      	mov	sp, r7
    aea6:	bd80      	pop	{r7, pc}
    aea8:	0000ae21 	.word	0x0000ae21

0000aeac <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    aeac:	b580      	push	{r7, lr}
    aeae:	b084      	sub	sp, #16
    aeb0:	af00      	add	r7, sp, #0
    aeb2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    aeb4:	210e      	movs	r1, #14
    aeb6:	6878      	ldr	r0, [r7, #4]
    aeb8:	4b08      	ldr	r3, [pc, #32]	; (aedc <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    aeba:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	781b      	ldrb	r3, [r3, #0]
    aec0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    aec2:	7bfb      	ldrb	r3, [r7, #15]
    aec4:	09db      	lsrs	r3, r3, #7
    aec6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    aec8:	7bfb      	ldrb	r3, [r7, #15]
    aeca:	2b00      	cmp	r3, #0
    aecc:	bf14      	ite	ne
    aece:	2301      	movne	r3, #1
    aed0:	2300      	moveq	r3, #0
    aed2:	b2db      	uxtb	r3, r3
}
    aed4:	4618      	mov	r0, r3
    aed6:	3710      	adds	r7, #16
    aed8:	46bd      	mov	sp, r7
    aeda:	bd80      	pop	{r7, pc}
    aedc:	0000ae21 	.word	0x0000ae21

0000aee0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    aee0:	b480      	push	{r7}
    aee2:	b085      	sub	sp, #20
    aee4:	af00      	add	r7, sp, #0
    aee6:	6078      	str	r0, [r7, #4]
    aee8:	460b      	mov	r3, r1
    aeea:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	785b      	ldrb	r3, [r3, #1]
    aef0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    aef2:	7bfb      	ldrb	r3, [r7, #15]
    aef4:	f023 030f 	bic.w	r3, r3, #15
    aef8:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    aefa:	78fb      	ldrb	r3, [r7, #3]
    aefc:	f003 030f 	and.w	r3, r3, #15
    af00:	b2da      	uxtb	r2, r3
    af02:	7bfb      	ldrb	r3, [r7, #15]
    af04:	4313      	orrs	r3, r2
    af06:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	7bfa      	ldrb	r2, [r7, #15]
    af0c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    af0e:	bf00      	nop
    af10:	3714      	adds	r7, #20
    af12:	46bd      	mov	sp, r7
    af14:	f85d 7b04 	ldr.w	r7, [sp], #4
    af18:	4770      	bx	lr
	...

0000af1c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    af1c:	b580      	push	{r7, lr}
    af1e:	b082      	sub	sp, #8
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    af24:	687b      	ldr	r3, [r7, #4]
    af26:	2b00      	cmp	r3, #0
    af28:	d005      	beq.n	af36 <_wdt_init+0x1a>
    af2a:	687b      	ldr	r3, [r7, #4]
    af2c:	681b      	ldr	r3, [r3, #0]
    af2e:	2b00      	cmp	r3, #0
    af30:	d001      	beq.n	af36 <_wdt_init+0x1a>
    af32:	2301      	movs	r3, #1
    af34:	e000      	b.n	af38 <_wdt_init+0x1c>
    af36:	2300      	movs	r3, #0
    af38:	f003 0301 	and.w	r3, r3, #1
    af3c:	b2db      	uxtb	r3, r3
    af3e:	2250      	movs	r2, #80	; 0x50
    af40:	4913      	ldr	r1, [pc, #76]	; (af90 <_wdt_init+0x74>)
    af42:	4618      	mov	r0, r3
    af44:	4b13      	ldr	r3, [pc, #76]	; (af94 <_wdt_init+0x78>)
    af46:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	681b      	ldr	r3, [r3, #0]
    af4c:	4618      	mov	r0, r3
    af4e:	4b12      	ldr	r3, [pc, #72]	; (af98 <_wdt_init+0x7c>)
    af50:	4798      	blx	r3
    af52:	4603      	mov	r3, r0
    af54:	2b00      	cmp	r3, #0
    af56:	d107      	bne.n	af68 <_wdt_init+0x4c>
    af58:	687b      	ldr	r3, [r7, #4]
    af5a:	681b      	ldr	r3, [r3, #0]
    af5c:	4618      	mov	r0, r3
    af5e:	4b0f      	ldr	r3, [pc, #60]	; (af9c <_wdt_init+0x80>)
    af60:	4798      	blx	r3
    af62:	4603      	mov	r3, r0
    af64:	2b00      	cmp	r3, #0
    af66:	d002      	beq.n	af6e <_wdt_init+0x52>
		return ERR_DENIED;
    af68:	f06f 0310 	mvn.w	r3, #16
    af6c:	e00b      	b.n	af86 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    af6e:	687b      	ldr	r3, [r7, #4]
    af70:	681b      	ldr	r3, [r3, #0]
    af72:	4618      	mov	r0, r3
    af74:	4b0a      	ldr	r3, [pc, #40]	; (afa0 <_wdt_init+0x84>)
    af76:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	681b      	ldr	r3, [r3, #0]
    af7c:	210b      	movs	r1, #11
    af7e:	4618      	mov	r0, r3
    af80:	4b08      	ldr	r3, [pc, #32]	; (afa4 <_wdt_init+0x88>)
    af82:	4798      	blx	r3
	}

	return ERR_NONE;
    af84:	2300      	movs	r3, #0
}
    af86:	4618      	mov	r0, r3
    af88:	3708      	adds	r7, #8
    af8a:	46bd      	mov	sp, r7
    af8c:	bd80      	pop	{r7, pc}
    af8e:	bf00      	nop
    af90:	0000f388 	.word	0x0000f388
    af94:	0000396d 	.word	0x0000396d
    af98:	0000aead 	.word	0x0000aead
    af9c:	0000ae45 	.word	0x0000ae45
    afa0:	0000ae81 	.word	0x0000ae81
    afa4:	0000aee1 	.word	0x0000aee1

0000afa8 <hri_port_set_DIR_reg>:
{
    afa8:	b480      	push	{r7}
    afaa:	b085      	sub	sp, #20
    afac:	af00      	add	r7, sp, #0
    afae:	60f8      	str	r0, [r7, #12]
    afb0:	460b      	mov	r3, r1
    afb2:	607a      	str	r2, [r7, #4]
    afb4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    afb6:	7afb      	ldrb	r3, [r7, #11]
    afb8:	68fa      	ldr	r2, [r7, #12]
    afba:	01db      	lsls	r3, r3, #7
    afbc:	4413      	add	r3, r2
    afbe:	3308      	adds	r3, #8
    afc0:	687a      	ldr	r2, [r7, #4]
    afc2:	601a      	str	r2, [r3, #0]
}
    afc4:	bf00      	nop
    afc6:	3714      	adds	r7, #20
    afc8:	46bd      	mov	sp, r7
    afca:	f85d 7b04 	ldr.w	r7, [sp], #4
    afce:	4770      	bx	lr

0000afd0 <hri_port_clear_DIR_reg>:
{
    afd0:	b480      	push	{r7}
    afd2:	b085      	sub	sp, #20
    afd4:	af00      	add	r7, sp, #0
    afd6:	60f8      	str	r0, [r7, #12]
    afd8:	460b      	mov	r3, r1
    afda:	607a      	str	r2, [r7, #4]
    afdc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    afde:	7afb      	ldrb	r3, [r7, #11]
    afe0:	68fa      	ldr	r2, [r7, #12]
    afe2:	01db      	lsls	r3, r3, #7
    afe4:	4413      	add	r3, r2
    afe6:	3304      	adds	r3, #4
    afe8:	687a      	ldr	r2, [r7, #4]
    afea:	601a      	str	r2, [r3, #0]
}
    afec:	bf00      	nop
    afee:	3714      	adds	r7, #20
    aff0:	46bd      	mov	sp, r7
    aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff6:	4770      	bx	lr

0000aff8 <hri_port_set_OUT_reg>:
{
    aff8:	b480      	push	{r7}
    affa:	b085      	sub	sp, #20
    affc:	af00      	add	r7, sp, #0
    affe:	60f8      	str	r0, [r7, #12]
    b000:	460b      	mov	r3, r1
    b002:	607a      	str	r2, [r7, #4]
    b004:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b006:	7afb      	ldrb	r3, [r7, #11]
    b008:	68fa      	ldr	r2, [r7, #12]
    b00a:	01db      	lsls	r3, r3, #7
    b00c:	4413      	add	r3, r2
    b00e:	3318      	adds	r3, #24
    b010:	687a      	ldr	r2, [r7, #4]
    b012:	601a      	str	r2, [r3, #0]
}
    b014:	bf00      	nop
    b016:	3714      	adds	r7, #20
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_port_clear_OUT_reg>:
{
    b020:	b480      	push	{r7}
    b022:	b085      	sub	sp, #20
    b024:	af00      	add	r7, sp, #0
    b026:	60f8      	str	r0, [r7, #12]
    b028:	460b      	mov	r3, r1
    b02a:	607a      	str	r2, [r7, #4]
    b02c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b02e:	7afb      	ldrb	r3, [r7, #11]
    b030:	68fa      	ldr	r2, [r7, #12]
    b032:	01db      	lsls	r3, r3, #7
    b034:	4413      	add	r3, r2
    b036:	3314      	adds	r3, #20
    b038:	687a      	ldr	r2, [r7, #4]
    b03a:	601a      	str	r2, [r3, #0]
}
    b03c:	bf00      	nop
    b03e:	3714      	adds	r7, #20
    b040:	46bd      	mov	sp, r7
    b042:	f85d 7b04 	ldr.w	r7, [sp], #4
    b046:	4770      	bx	lr

0000b048 <hri_port_write_PMUX_PMUXE_bf>:
{
    b048:	b480      	push	{r7}
    b04a:	b085      	sub	sp, #20
    b04c:	af00      	add	r7, sp, #0
    b04e:	6078      	str	r0, [r7, #4]
    b050:	4608      	mov	r0, r1
    b052:	4611      	mov	r1, r2
    b054:	461a      	mov	r2, r3
    b056:	4603      	mov	r3, r0
    b058:	70fb      	strb	r3, [r7, #3]
    b05a:	460b      	mov	r3, r1
    b05c:	70bb      	strb	r3, [r7, #2]
    b05e:	4613      	mov	r3, r2
    b060:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b062:	78fa      	ldrb	r2, [r7, #3]
    b064:	78bb      	ldrb	r3, [r7, #2]
    b066:	6879      	ldr	r1, [r7, #4]
    b068:	01d2      	lsls	r2, r2, #7
    b06a:	440a      	add	r2, r1
    b06c:	4413      	add	r3, r2
    b06e:	3330      	adds	r3, #48	; 0x30
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b074:	7bfb      	ldrb	r3, [r7, #15]
    b076:	f023 030f 	bic.w	r3, r3, #15
    b07a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b07c:	787b      	ldrb	r3, [r7, #1]
    b07e:	f003 030f 	and.w	r3, r3, #15
    b082:	b2da      	uxtb	r2, r3
    b084:	7bfb      	ldrb	r3, [r7, #15]
    b086:	4313      	orrs	r3, r2
    b088:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b08a:	78fa      	ldrb	r2, [r7, #3]
    b08c:	78bb      	ldrb	r3, [r7, #2]
    b08e:	6879      	ldr	r1, [r7, #4]
    b090:	01d2      	lsls	r2, r2, #7
    b092:	440a      	add	r2, r1
    b094:	4413      	add	r3, r2
    b096:	3330      	adds	r3, #48	; 0x30
    b098:	7bfa      	ldrb	r2, [r7, #15]
    b09a:	701a      	strb	r2, [r3, #0]
}
    b09c:	bf00      	nop
    b09e:	3714      	adds	r7, #20
    b0a0:	46bd      	mov	sp, r7
    b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0a6:	4770      	bx	lr

0000b0a8 <hri_port_write_PMUX_PMUXO_bf>:
{
    b0a8:	b480      	push	{r7}
    b0aa:	b085      	sub	sp, #20
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	6078      	str	r0, [r7, #4]
    b0b0:	4608      	mov	r0, r1
    b0b2:	4611      	mov	r1, r2
    b0b4:	461a      	mov	r2, r3
    b0b6:	4603      	mov	r3, r0
    b0b8:	70fb      	strb	r3, [r7, #3]
    b0ba:	460b      	mov	r3, r1
    b0bc:	70bb      	strb	r3, [r7, #2]
    b0be:	4613      	mov	r3, r2
    b0c0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b0c2:	78fa      	ldrb	r2, [r7, #3]
    b0c4:	78bb      	ldrb	r3, [r7, #2]
    b0c6:	6879      	ldr	r1, [r7, #4]
    b0c8:	01d2      	lsls	r2, r2, #7
    b0ca:	440a      	add	r2, r1
    b0cc:	4413      	add	r3, r2
    b0ce:	3330      	adds	r3, #48	; 0x30
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b0d4:	7bfb      	ldrb	r3, [r7, #15]
    b0d6:	f003 030f 	and.w	r3, r3, #15
    b0da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b0dc:	787b      	ldrb	r3, [r7, #1]
    b0de:	011b      	lsls	r3, r3, #4
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	7bfb      	ldrb	r3, [r7, #15]
    b0e4:	4313      	orrs	r3, r2
    b0e6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b0e8:	78fa      	ldrb	r2, [r7, #3]
    b0ea:	78bb      	ldrb	r3, [r7, #2]
    b0ec:	6879      	ldr	r1, [r7, #4]
    b0ee:	01d2      	lsls	r2, r2, #7
    b0f0:	440a      	add	r2, r1
    b0f2:	4413      	add	r3, r2
    b0f4:	3330      	adds	r3, #48	; 0x30
    b0f6:	7bfa      	ldrb	r2, [r7, #15]
    b0f8:	701a      	strb	r2, [r3, #0]
}
    b0fa:	bf00      	nop
    b0fc:	3714      	adds	r7, #20
    b0fe:	46bd      	mov	sp, r7
    b100:	f85d 7b04 	ldr.w	r7, [sp], #4
    b104:	4770      	bx	lr

0000b106 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b106:	b480      	push	{r7}
    b108:	b085      	sub	sp, #20
    b10a:	af00      	add	r7, sp, #0
    b10c:	6078      	str	r0, [r7, #4]
    b10e:	4608      	mov	r0, r1
    b110:	4611      	mov	r1, r2
    b112:	461a      	mov	r2, r3
    b114:	4603      	mov	r3, r0
    b116:	70fb      	strb	r3, [r7, #3]
    b118:	460b      	mov	r3, r1
    b11a:	70bb      	strb	r3, [r7, #2]
    b11c:	4613      	mov	r3, r2
    b11e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b120:	78fa      	ldrb	r2, [r7, #3]
    b122:	78bb      	ldrb	r3, [r7, #2]
    b124:	6879      	ldr	r1, [r7, #4]
    b126:	01d2      	lsls	r2, r2, #7
    b128:	440a      	add	r2, r1
    b12a:	4413      	add	r3, r2
    b12c:	3340      	adds	r3, #64	; 0x40
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b132:	7bfb      	ldrb	r3, [r7, #15]
    b134:	f023 0301 	bic.w	r3, r3, #1
    b138:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b13a:	787a      	ldrb	r2, [r7, #1]
    b13c:	7bfb      	ldrb	r3, [r7, #15]
    b13e:	4313      	orrs	r3, r2
    b140:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b142:	78fa      	ldrb	r2, [r7, #3]
    b144:	78bb      	ldrb	r3, [r7, #2]
    b146:	6879      	ldr	r1, [r7, #4]
    b148:	01d2      	lsls	r2, r2, #7
    b14a:	440a      	add	r2, r1
    b14c:	4413      	add	r3, r2
    b14e:	3340      	adds	r3, #64	; 0x40
    b150:	7bfa      	ldrb	r2, [r7, #15]
    b152:	701a      	strb	r2, [r3, #0]
}
    b154:	bf00      	nop
    b156:	3714      	adds	r7, #20
    b158:	46bd      	mov	sp, r7
    b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b15e:	4770      	bx	lr

0000b160 <hri_port_write_WRCONFIG_reg>:
{
    b160:	b480      	push	{r7}
    b162:	b085      	sub	sp, #20
    b164:	af00      	add	r7, sp, #0
    b166:	60f8      	str	r0, [r7, #12]
    b168:	460b      	mov	r3, r1
    b16a:	607a      	str	r2, [r7, #4]
    b16c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b16e:	7afb      	ldrb	r3, [r7, #11]
    b170:	68fa      	ldr	r2, [r7, #12]
    b172:	01db      	lsls	r3, r3, #7
    b174:	4413      	add	r3, r2
    b176:	3328      	adds	r3, #40	; 0x28
    b178:	687a      	ldr	r2, [r7, #4]
    b17a:	601a      	str	r2, [r3, #0]
}
    b17c:	bf00      	nop
    b17e:	3714      	adds	r7, #20
    b180:	46bd      	mov	sp, r7
    b182:	f85d 7b04 	ldr.w	r7, [sp], #4
    b186:	4770      	bx	lr

0000b188 <_gpio_set_direction>:
{
    b188:	b580      	push	{r7, lr}
    b18a:	b082      	sub	sp, #8
    b18c:	af00      	add	r7, sp, #0
    b18e:	4603      	mov	r3, r0
    b190:	6039      	str	r1, [r7, #0]
    b192:	71fb      	strb	r3, [r7, #7]
    b194:	4613      	mov	r3, r2
    b196:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b198:	79bb      	ldrb	r3, [r7, #6]
    b19a:	2b01      	cmp	r3, #1
    b19c:	d01c      	beq.n	b1d8 <_gpio_set_direction+0x50>
    b19e:	2b02      	cmp	r3, #2
    b1a0:	d037      	beq.n	b212 <_gpio_set_direction+0x8a>
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	d14e      	bne.n	b244 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1a6:	79fb      	ldrb	r3, [r7, #7]
    b1a8:	683a      	ldr	r2, [r7, #0]
    b1aa:	4619      	mov	r1, r3
    b1ac:	482a      	ldr	r0, [pc, #168]	; (b258 <_gpio_set_direction+0xd0>)
    b1ae:	4b2b      	ldr	r3, [pc, #172]	; (b25c <_gpio_set_direction+0xd4>)
    b1b0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b1b2:	683b      	ldr	r3, [r7, #0]
    b1b4:	b29b      	uxth	r3, r3
    b1b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b1ba:	79fb      	ldrb	r3, [r7, #7]
    b1bc:	4619      	mov	r1, r3
    b1be:	4826      	ldr	r0, [pc, #152]	; (b258 <_gpio_set_direction+0xd0>)
    b1c0:	4b27      	ldr	r3, [pc, #156]	; (b260 <_gpio_set_direction+0xd8>)
    b1c2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b1c4:	683b      	ldr	r3, [r7, #0]
    b1c6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b1c8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b1cc:	79fb      	ldrb	r3, [r7, #7]
    b1ce:	4619      	mov	r1, r3
    b1d0:	4821      	ldr	r0, [pc, #132]	; (b258 <_gpio_set_direction+0xd0>)
    b1d2:	4b23      	ldr	r3, [pc, #140]	; (b260 <_gpio_set_direction+0xd8>)
    b1d4:	4798      	blx	r3
		break;
    b1d6:	e03a      	b.n	b24e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b1d8:	79fb      	ldrb	r3, [r7, #7]
    b1da:	683a      	ldr	r2, [r7, #0]
    b1dc:	4619      	mov	r1, r3
    b1de:	481e      	ldr	r0, [pc, #120]	; (b258 <_gpio_set_direction+0xd0>)
    b1e0:	4b1e      	ldr	r3, [pc, #120]	; (b25c <_gpio_set_direction+0xd4>)
    b1e2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b1e4:	683b      	ldr	r3, [r7, #0]
    b1e6:	b29b      	uxth	r3, r3
    b1e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b1ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b1f0:	79f9      	ldrb	r1, [r7, #7]
    b1f2:	461a      	mov	r2, r3
    b1f4:	4818      	ldr	r0, [pc, #96]	; (b258 <_gpio_set_direction+0xd0>)
    b1f6:	4b1a      	ldr	r3, [pc, #104]	; (b260 <_gpio_set_direction+0xd8>)
    b1f8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b1fa:	683b      	ldr	r3, [r7, #0]
    b1fc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b1fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b206:	79f9      	ldrb	r1, [r7, #7]
    b208:	461a      	mov	r2, r3
    b20a:	4813      	ldr	r0, [pc, #76]	; (b258 <_gpio_set_direction+0xd0>)
    b20c:	4b14      	ldr	r3, [pc, #80]	; (b260 <_gpio_set_direction+0xd8>)
    b20e:	4798      	blx	r3
		break;
    b210:	e01d      	b.n	b24e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b212:	79fb      	ldrb	r3, [r7, #7]
    b214:	683a      	ldr	r2, [r7, #0]
    b216:	4619      	mov	r1, r3
    b218:	480f      	ldr	r0, [pc, #60]	; (b258 <_gpio_set_direction+0xd0>)
    b21a:	4b12      	ldr	r3, [pc, #72]	; (b264 <_gpio_set_direction+0xdc>)
    b21c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b21e:	683b      	ldr	r3, [r7, #0]
    b220:	b29b      	uxth	r3, r3
    b222:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b226:	79fb      	ldrb	r3, [r7, #7]
    b228:	4619      	mov	r1, r3
    b22a:	480b      	ldr	r0, [pc, #44]	; (b258 <_gpio_set_direction+0xd0>)
    b22c:	4b0c      	ldr	r3, [pc, #48]	; (b260 <_gpio_set_direction+0xd8>)
    b22e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b230:	683b      	ldr	r3, [r7, #0]
    b232:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b234:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b238:	79fb      	ldrb	r3, [r7, #7]
    b23a:	4619      	mov	r1, r3
    b23c:	4806      	ldr	r0, [pc, #24]	; (b258 <_gpio_set_direction+0xd0>)
    b23e:	4b08      	ldr	r3, [pc, #32]	; (b260 <_gpio_set_direction+0xd8>)
    b240:	4798      	blx	r3
		break;
    b242:	e004      	b.n	b24e <_gpio_set_direction+0xc6>
		ASSERT(false);
    b244:	2246      	movs	r2, #70	; 0x46
    b246:	4908      	ldr	r1, [pc, #32]	; (b268 <_gpio_set_direction+0xe0>)
    b248:	2000      	movs	r0, #0
    b24a:	4b08      	ldr	r3, [pc, #32]	; (b26c <_gpio_set_direction+0xe4>)
    b24c:	4798      	blx	r3
}
    b24e:	bf00      	nop
    b250:	3708      	adds	r7, #8
    b252:	46bd      	mov	sp, r7
    b254:	bd80      	pop	{r7, pc}
    b256:	bf00      	nop
    b258:	41008000 	.word	0x41008000
    b25c:	0000afd1 	.word	0x0000afd1
    b260:	0000b161 	.word	0x0000b161
    b264:	0000afa9 	.word	0x0000afa9
    b268:	0000f3a0 	.word	0x0000f3a0
    b26c:	0000396d 	.word	0x0000396d

0000b270 <_gpio_set_level>:
{
    b270:	b580      	push	{r7, lr}
    b272:	b082      	sub	sp, #8
    b274:	af00      	add	r7, sp, #0
    b276:	4603      	mov	r3, r0
    b278:	6039      	str	r1, [r7, #0]
    b27a:	71fb      	strb	r3, [r7, #7]
    b27c:	4613      	mov	r3, r2
    b27e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b280:	79bb      	ldrb	r3, [r7, #6]
    b282:	2b00      	cmp	r3, #0
    b284:	d006      	beq.n	b294 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b286:	79fb      	ldrb	r3, [r7, #7]
    b288:	683a      	ldr	r2, [r7, #0]
    b28a:	4619      	mov	r1, r3
    b28c:	4806      	ldr	r0, [pc, #24]	; (b2a8 <_gpio_set_level+0x38>)
    b28e:	4b07      	ldr	r3, [pc, #28]	; (b2ac <_gpio_set_level+0x3c>)
    b290:	4798      	blx	r3
}
    b292:	e005      	b.n	b2a0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b294:	79fb      	ldrb	r3, [r7, #7]
    b296:	683a      	ldr	r2, [r7, #0]
    b298:	4619      	mov	r1, r3
    b29a:	4803      	ldr	r0, [pc, #12]	; (b2a8 <_gpio_set_level+0x38>)
    b29c:	4b04      	ldr	r3, [pc, #16]	; (b2b0 <_gpio_set_level+0x40>)
    b29e:	4798      	blx	r3
}
    b2a0:	bf00      	nop
    b2a2:	3708      	adds	r7, #8
    b2a4:	46bd      	mov	sp, r7
    b2a6:	bd80      	pop	{r7, pc}
    b2a8:	41008000 	.word	0x41008000
    b2ac:	0000aff9 	.word	0x0000aff9
    b2b0:	0000b021 	.word	0x0000b021

0000b2b4 <_gpio_set_pin_function>:
{
    b2b4:	b590      	push	{r4, r7, lr}
    b2b6:	b085      	sub	sp, #20
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	6078      	str	r0, [r7, #4]
    b2bc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b2be:	687b      	ldr	r3, [r7, #4]
    b2c0:	095b      	lsrs	r3, r3, #5
    b2c2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	b2db      	uxtb	r3, r3
    b2c8:	f003 031f 	and.w	r3, r3, #31
    b2cc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b2ce:	683b      	ldr	r3, [r7, #0]
    b2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    b2d4:	d106      	bne.n	b2e4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b2d6:	7bba      	ldrb	r2, [r7, #14]
    b2d8:	7bf9      	ldrb	r1, [r7, #15]
    b2da:	2300      	movs	r3, #0
    b2dc:	4812      	ldr	r0, [pc, #72]	; (b328 <_gpio_set_pin_function+0x74>)
    b2de:	4c13      	ldr	r4, [pc, #76]	; (b32c <_gpio_set_pin_function+0x78>)
    b2e0:	47a0      	blx	r4
}
    b2e2:	e01d      	b.n	b320 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b2e4:	7bba      	ldrb	r2, [r7, #14]
    b2e6:	7bf9      	ldrb	r1, [r7, #15]
    b2e8:	2301      	movs	r3, #1
    b2ea:	480f      	ldr	r0, [pc, #60]	; (b328 <_gpio_set_pin_function+0x74>)
    b2ec:	4c0f      	ldr	r4, [pc, #60]	; (b32c <_gpio_set_pin_function+0x78>)
    b2ee:	47a0      	blx	r4
		if (pin & 1) {
    b2f0:	7bbb      	ldrb	r3, [r7, #14]
    b2f2:	f003 0301 	and.w	r3, r3, #1
    b2f6:	2b00      	cmp	r3, #0
    b2f8:	d009      	beq.n	b30e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b2fa:	7bbb      	ldrb	r3, [r7, #14]
    b2fc:	085b      	lsrs	r3, r3, #1
    b2fe:	b2da      	uxtb	r2, r3
    b300:	683b      	ldr	r3, [r7, #0]
    b302:	b2db      	uxtb	r3, r3
    b304:	7bf9      	ldrb	r1, [r7, #15]
    b306:	4808      	ldr	r0, [pc, #32]	; (b328 <_gpio_set_pin_function+0x74>)
    b308:	4c09      	ldr	r4, [pc, #36]	; (b330 <_gpio_set_pin_function+0x7c>)
    b30a:	47a0      	blx	r4
}
    b30c:	e008      	b.n	b320 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b30e:	7bbb      	ldrb	r3, [r7, #14]
    b310:	085b      	lsrs	r3, r3, #1
    b312:	b2da      	uxtb	r2, r3
    b314:	683b      	ldr	r3, [r7, #0]
    b316:	b2db      	uxtb	r3, r3
    b318:	7bf9      	ldrb	r1, [r7, #15]
    b31a:	4803      	ldr	r0, [pc, #12]	; (b328 <_gpio_set_pin_function+0x74>)
    b31c:	4c05      	ldr	r4, [pc, #20]	; (b334 <_gpio_set_pin_function+0x80>)
    b31e:	47a0      	blx	r4
}
    b320:	bf00      	nop
    b322:	3714      	adds	r7, #20
    b324:	46bd      	mov	sp, r7
    b326:	bd90      	pop	{r4, r7, pc}
    b328:	41008000 	.word	0x41008000
    b32c:	0000b107 	.word	0x0000b107
    b330:	0000b0a9 	.word	0x0000b0a9
    b334:	0000b049 	.word	0x0000b049

0000b338 <gpio_set_pin_function>:
{
    b338:	b580      	push	{r7, lr}
    b33a:	b082      	sub	sp, #8
    b33c:	af00      	add	r7, sp, #0
    b33e:	6078      	str	r0, [r7, #4]
    b340:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b342:	6839      	ldr	r1, [r7, #0]
    b344:	6878      	ldr	r0, [r7, #4]
    b346:	4b03      	ldr	r3, [pc, #12]	; (b354 <gpio_set_pin_function+0x1c>)
    b348:	4798      	blx	r3
}
    b34a:	bf00      	nop
    b34c:	3708      	adds	r7, #8
    b34e:	46bd      	mov	sp, r7
    b350:	bd80      	pop	{r7, pc}
    b352:	bf00      	nop
    b354:	0000b2b5 	.word	0x0000b2b5

0000b358 <gpio_set_pin_direction>:
{
    b358:	b580      	push	{r7, lr}
    b35a:	b082      	sub	sp, #8
    b35c:	af00      	add	r7, sp, #0
    b35e:	4603      	mov	r3, r0
    b360:	460a      	mov	r2, r1
    b362:	71fb      	strb	r3, [r7, #7]
    b364:	4613      	mov	r3, r2
    b366:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b368:	79fb      	ldrb	r3, [r7, #7]
    b36a:	095b      	lsrs	r3, r3, #5
    b36c:	b2d8      	uxtb	r0, r3
    b36e:	79fb      	ldrb	r3, [r7, #7]
    b370:	f003 031f 	and.w	r3, r3, #31
    b374:	2201      	movs	r2, #1
    b376:	fa02 f303 	lsl.w	r3, r2, r3
    b37a:	79ba      	ldrb	r2, [r7, #6]
    b37c:	4619      	mov	r1, r3
    b37e:	4b03      	ldr	r3, [pc, #12]	; (b38c <gpio_set_pin_direction+0x34>)
    b380:	4798      	blx	r3
}
    b382:	bf00      	nop
    b384:	3708      	adds	r7, #8
    b386:	46bd      	mov	sp, r7
    b388:	bd80      	pop	{r7, pc}
    b38a:	bf00      	nop
    b38c:	0000b189 	.word	0x0000b189

0000b390 <gpio_set_pin_level>:
{
    b390:	b580      	push	{r7, lr}
    b392:	b082      	sub	sp, #8
    b394:	af00      	add	r7, sp, #0
    b396:	4603      	mov	r3, r0
    b398:	460a      	mov	r2, r1
    b39a:	71fb      	strb	r3, [r7, #7]
    b39c:	4613      	mov	r3, r2
    b39e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b3a0:	79fb      	ldrb	r3, [r7, #7]
    b3a2:	095b      	lsrs	r3, r3, #5
    b3a4:	b2d8      	uxtb	r0, r3
    b3a6:	79fb      	ldrb	r3, [r7, #7]
    b3a8:	f003 031f 	and.w	r3, r3, #31
    b3ac:	2201      	movs	r2, #1
    b3ae:	fa02 f303 	lsl.w	r3, r2, r3
    b3b2:	79ba      	ldrb	r2, [r7, #6]
    b3b4:	4619      	mov	r1, r3
    b3b6:	4b03      	ldr	r3, [pc, #12]	; (b3c4 <gpio_set_pin_level+0x34>)
    b3b8:	4798      	blx	r3
}
    b3ba:	bf00      	nop
    b3bc:	3708      	adds	r7, #8
    b3be:	46bd      	mov	sp, r7
    b3c0:	bd80      	pop	{r7, pc}
    b3c2:	bf00      	nop
    b3c4:	0000b271 	.word	0x0000b271

0000b3c8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b3c8:	b580      	push	{r7, lr}
    b3ca:	b082      	sub	sp, #8
    b3cc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b3ce:	2100      	movs	r1, #0
    b3d0:	2008      	movs	r0, #8
    b3d2:	4b24      	ldr	r3, [pc, #144]	; (b464 <QSPI_N25Q256_exit_xip+0x9c>)
    b3d4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b3d6:	2100      	movs	r1, #0
    b3d8:	202b      	movs	r0, #43	; 0x2b
    b3da:	4b22      	ldr	r3, [pc, #136]	; (b464 <QSPI_N25Q256_exit_xip+0x9c>)
    b3dc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b3de:	2100      	movs	r1, #0
    b3e0:	202a      	movs	r0, #42	; 0x2a
    b3e2:	4b20      	ldr	r3, [pc, #128]	; (b464 <QSPI_N25Q256_exit_xip+0x9c>)
    b3e4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b3e6:	2102      	movs	r1, #2
    b3e8:	2008      	movs	r0, #8
    b3ea:	4b1f      	ldr	r3, [pc, #124]	; (b468 <QSPI_N25Q256_exit_xip+0xa0>)
    b3ec:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b3ee:	2102      	movs	r1, #2
    b3f0:	202b      	movs	r0, #43	; 0x2b
    b3f2:	4b1d      	ldr	r3, [pc, #116]	; (b468 <QSPI_N25Q256_exit_xip+0xa0>)
    b3f4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b3f6:	2102      	movs	r1, #2
    b3f8:	202a      	movs	r0, #42	; 0x2a
    b3fa:	4b1b      	ldr	r3, [pc, #108]	; (b468 <QSPI_N25Q256_exit_xip+0xa0>)
    b3fc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b3fe:	2101      	movs	r1, #1
    b400:	2008      	movs	r0, #8
    b402:	4b1a      	ldr	r3, [pc, #104]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b404:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b406:	2100      	movs	r1, #0
    b408:	202b      	movs	r0, #43	; 0x2b
    b40a:	4b18      	ldr	r3, [pc, #96]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b40c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b40e:	2100      	movs	r1, #0
    b410:	202a      	movs	r0, #42	; 0x2a
    b412:	4b16      	ldr	r3, [pc, #88]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b414:	4798      	blx	r3

	delay_us(1);
    b416:	2001      	movs	r0, #1
    b418:	4b15      	ldr	r3, [pc, #84]	; (b470 <QSPI_N25Q256_exit_xip+0xa8>)
    b41a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b41c:	2300      	movs	r3, #0
    b41e:	607b      	str	r3, [r7, #4]
    b420:	e010      	b.n	b444 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b422:	2101      	movs	r1, #1
    b424:	202a      	movs	r0, #42	; 0x2a
    b426:	4b11      	ldr	r3, [pc, #68]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b428:	4798      	blx	r3
		delay_us(1);
    b42a:	2001      	movs	r0, #1
    b42c:	4b10      	ldr	r3, [pc, #64]	; (b470 <QSPI_N25Q256_exit_xip+0xa8>)
    b42e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b430:	2100      	movs	r1, #0
    b432:	202a      	movs	r0, #42	; 0x2a
    b434:	4b0d      	ldr	r3, [pc, #52]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b436:	4798      	blx	r3
		delay_us(1);
    b438:	2001      	movs	r0, #1
    b43a:	4b0d      	ldr	r3, [pc, #52]	; (b470 <QSPI_N25Q256_exit_xip+0xa8>)
    b43c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	3301      	adds	r3, #1
    b442:	607b      	str	r3, [r7, #4]
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	2b06      	cmp	r3, #6
    b448:	ddeb      	ble.n	b422 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b44a:	2101      	movs	r1, #1
    b44c:	202b      	movs	r0, #43	; 0x2b
    b44e:	4b07      	ldr	r3, [pc, #28]	; (b46c <QSPI_N25Q256_exit_xip+0xa4>)
    b450:	4798      	blx	r3
	delay_us(1);
    b452:	2001      	movs	r0, #1
    b454:	4b06      	ldr	r3, [pc, #24]	; (b470 <QSPI_N25Q256_exit_xip+0xa8>)
    b456:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b458:	4b06      	ldr	r3, [pc, #24]	; (b474 <QSPI_N25Q256_exit_xip+0xac>)
    b45a:	4798      	blx	r3
}
    b45c:	bf00      	nop
    b45e:	3708      	adds	r7, #8
    b460:	46bd      	mov	sp, r7
    b462:	bd80      	pop	{r7, pc}
    b464:	0000b339 	.word	0x0000b339
    b468:	0000b359 	.word	0x0000b359
    b46c:	0000b391 	.word	0x0000b391
    b470:	00002349 	.word	0x00002349
    b474:	000016a5 	.word	0x000016a5

0000b478 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b478:	b598      	push	{r3, r4, r7, lr}
    b47a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b47c:	4806      	ldr	r0, [pc, #24]	; (b498 <spi_nor_flash_init+0x20>)
    b47e:	4b07      	ldr	r3, [pc, #28]	; (b49c <spi_nor_flash_init+0x24>)
    b480:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b482:	2300      	movs	r3, #0
    b484:	4a06      	ldr	r2, [pc, #24]	; (b4a0 <spi_nor_flash_init+0x28>)
    b486:	4904      	ldr	r1, [pc, #16]	; (b498 <spi_nor_flash_init+0x20>)
    b488:	4806      	ldr	r0, [pc, #24]	; (b4a4 <spi_nor_flash_init+0x2c>)
    b48a:	4c07      	ldr	r4, [pc, #28]	; (b4a8 <spi_nor_flash_init+0x30>)
    b48c:	47a0      	blx	r4
    b48e:	4602      	mov	r2, r0
    b490:	4b06      	ldr	r3, [pc, #24]	; (b4ac <spi_nor_flash_init+0x34>)
    b492:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b494:	bf00      	nop
    b496:	bd98      	pop	{r3, r4, r7, pc}
    b498:	20001580 	.word	0x20001580
    b49c:	000028d5 	.word	0x000028d5
    b4a0:	0000b3c9 	.word	0x0000b3c9
    b4a4:	20000d2c 	.word	0x20000d2c
    b4a8:	0000b8e5 	.word	0x0000b8e5
    b4ac:	20001780 	.word	0x20001780

0000b4b0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b4b0:	b580      	push	{r7, lr}
    b4b2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b4b4:	4805      	ldr	r0, [pc, #20]	; (b4cc <cdc_device_acm_init+0x1c>)
    b4b6:	4b06      	ldr	r3, [pc, #24]	; (b4d0 <cdc_device_acm_init+0x20>)
    b4b8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b4ba:	4b06      	ldr	r3, [pc, #24]	; (b4d4 <cdc_device_acm_init+0x24>)
    b4bc:	4798      	blx	r3

	usbdc_start(single_desc);
    b4be:	4806      	ldr	r0, [pc, #24]	; (b4d8 <cdc_device_acm_init+0x28>)
    b4c0:	4b06      	ldr	r3, [pc, #24]	; (b4dc <cdc_device_acm_init+0x2c>)
    b4c2:	4798      	blx	r3
	usbdc_attach();
    b4c4:	4b06      	ldr	r3, [pc, #24]	; (b4e0 <cdc_device_acm_init+0x30>)
    b4c6:	4798      	blx	r3
}
    b4c8:	bf00      	nop
    b4ca:	bd80      	pop	{r7, pc}
    b4cc:	20000d7c 	.word	0x20000d7c
    b4d0:	0000d00d 	.word	0x0000d00d
    b4d4:	0000c285 	.word	0x0000c285
    b4d8:	20000200 	.word	0x20000200
    b4dc:	0000d0a9 	.word	0x0000d0a9
    b4e0:	0000d0f9 	.word	0x0000d0f9

0000b4e4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b4e8:	4b01      	ldr	r3, [pc, #4]	; (b4f0 <usb_init+0xc>)
    b4ea:	4798      	blx	r3
}
    b4ec:	bf00      	nop
    b4ee:	bd80      	pop	{r7, pc}
    b4f0:	0000b4b1 	.word	0x0000b4b1

0000b4f4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b4f4:	b480      	push	{r7}
    b4f6:	b085      	sub	sp, #20
    b4f8:	af00      	add	r7, sp, #0
    b4fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b4fc:	f3ef 8310 	mrs	r3, PRIMASK
    b500:	60fb      	str	r3, [r7, #12]
  return(result);
    b502:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b504:	687b      	ldr	r3, [r7, #4]
    b506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b508:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b50a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b50e:	bf00      	nop
    b510:	3714      	adds	r7, #20
    b512:	46bd      	mov	sp, r7
    b514:	f85d 7b04 	ldr.w	r7, [sp], #4
    b518:	4770      	bx	lr

0000b51a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b51a:	b480      	push	{r7}
    b51c:	b085      	sub	sp, #20
    b51e:	af00      	add	r7, sp, #0
    b520:	6078      	str	r0, [r7, #4]
    b522:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b526:	687b      	ldr	r3, [r7, #4]
    b528:	681b      	ldr	r3, [r3, #0]
    b52a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b52c:	68fb      	ldr	r3, [r7, #12]
    b52e:	f383 8810 	msr	PRIMASK, r3
}
    b532:	bf00      	nop
    b534:	3714      	adds	r7, #20
    b536:	46bd      	mov	sp, r7
    b538:	f85d 7b04 	ldr.w	r7, [sp], #4
    b53c:	4770      	bx	lr
	...

0000b540 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b540:	b580      	push	{r7, lr}
    b542:	b08c      	sub	sp, #48	; 0x30
    b544:	af00      	add	r7, sp, #0
    b546:	6078      	str	r0, [r7, #4]
    b548:	460b      	mov	r3, r1
    b54a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b556:	f107 030c 	add.w	r3, r7, #12
    b55a:	2200      	movs	r2, #0
    b55c:	601a      	str	r2, [r3, #0]
    b55e:	605a      	str	r2, [r3, #4]
    b560:	609a      	str	r2, [r3, #8]
    b562:	60da      	str	r2, [r3, #12]
    b564:	611a      	str	r2, [r3, #16]
    b566:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b56a:	7b1b      	ldrb	r3, [r3, #12]
    b56c:	2b00      	cmp	r3, #0
    b56e:	d001      	beq.n	b574 <n25q256a_xip_confirm+0x34>
    b570:	2206      	movs	r2, #6
    b572:	e000      	b.n	b576 <n25q256a_xip_confirm+0x36>
    b574:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b576:	7b3b      	ldrb	r3, [r7, #12]
    b578:	f362 0302 	bfi	r3, r2, #0, #3
    b57c:	733b      	strb	r3, [r7, #12]
    b57e:	7b3b      	ldrb	r3, [r7, #12]
    b580:	f043 0310 	orr.w	r3, r3, #16
    b584:	733b      	strb	r3, [r7, #12]
    b586:	7b3b      	ldrb	r3, [r7, #12]
    b588:	f043 0320 	orr.w	r3, r3, #32
    b58c:	733b      	strb	r3, [r7, #12]
    b58e:	7b3b      	ldrb	r3, [r7, #12]
    b590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b594:	733b      	strb	r3, [r7, #12]
    b596:	7b3b      	ldrb	r3, [r7, #12]
    b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b59c:	733b      	strb	r3, [r7, #12]
    b59e:	7b7b      	ldrb	r3, [r7, #13]
    b5a0:	f043 0303 	orr.w	r3, r3, #3
    b5a4:	737b      	strb	r3, [r7, #13]
    b5a6:	7b7b      	ldrb	r3, [r7, #13]
    b5a8:	2201      	movs	r2, #1
    b5aa:	f362 1305 	bfi	r3, r2, #4, #2
    b5ae:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5b2:	7b1b      	ldrb	r3, [r3, #12]
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	d001      	beq.n	b5bc <n25q256a_xip_confirm+0x7c>
    b5b8:	2208      	movs	r2, #8
    b5ba:	e000      	b.n	b5be <n25q256a_xip_confirm+0x7e>
    b5bc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b5be:	7bbb      	ldrb	r3, [r7, #14]
    b5c0:	f362 0304 	bfi	r3, r2, #0, #5
    b5c4:	73bb      	strb	r3, [r7, #14]
    b5c6:	230b      	movs	r3, #11
    b5c8:	743b      	strb	r3, [r7, #16]
    b5ca:	78fb      	ldrb	r3, [r7, #3]
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	d001      	beq.n	b5d4 <n25q256a_xip_confirm+0x94>
    b5d0:	2300      	movs	r3, #0
    b5d2:	e000      	b.n	b5d6 <n25q256a_xip_confirm+0x96>
    b5d4:	23ff      	movs	r3, #255	; 0xff
    b5d6:	747b      	strb	r3, [r7, #17]
    b5d8:	2301      	movs	r3, #1
    b5da:	61bb      	str	r3, [r7, #24]
    b5dc:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b5e0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b5e2:	f107 030c 	add.w	r3, r7, #12
    b5e6:	4619      	mov	r1, r3
    b5e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b5ea:	4b07      	ldr	r3, [pc, #28]	; (b608 <n25q256a_xip_confirm+0xc8>)
    b5ec:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b5ee:	78fb      	ldrb	r3, [r7, #3]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d001      	beq.n	b5f8 <n25q256a_xip_confirm+0xb8>
    b5f4:	2202      	movs	r2, #2
    b5f6:	e000      	b.n	b5fa <n25q256a_xip_confirm+0xba>
    b5f8:	2201      	movs	r2, #1
    b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5fc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b5fe:	2300      	movs	r3, #0
}
    b600:	4618      	mov	r0, r3
    b602:	3730      	adds	r7, #48	; 0x30
    b604:	46bd      	mov	sp, r7
    b606:	bd80      	pop	{r7, pc}
    b608:	0000294d 	.word	0x0000294d

0000b60c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b60c:	b580      	push	{r7, lr}
    b60e:	b08c      	sub	sp, #48	; 0x30
    b610:	af00      	add	r7, sp, #0
    b612:	6078      	str	r0, [r7, #4]
    b614:	460b      	mov	r3, r1
    b616:	70fb      	strb	r3, [r7, #3]
    b618:	4613      	mov	r3, r2
    b61a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b61c:	2300      	movs	r3, #0
    b61e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	681b      	ldr	r3, [r3, #0]
    b628:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b62a:	f107 030c 	add.w	r3, r7, #12
    b62e:	2200      	movs	r2, #0
    b630:	601a      	str	r2, [r3, #0]
    b632:	605a      	str	r2, [r3, #4]
    b634:	609a      	str	r2, [r3, #8]
    b636:	60da      	str	r2, [r3, #12]
    b638:	611a      	str	r2, [r3, #16]
    b63a:	615a      	str	r2, [r3, #20]
    b63c:	78fb      	ldrb	r3, [r7, #3]
    b63e:	f003 0307 	and.w	r3, r3, #7
    b642:	b2da      	uxtb	r2, r3
    b644:	7b3b      	ldrb	r3, [r7, #12]
    b646:	f362 0302 	bfi	r3, r2, #0, #3
    b64a:	733b      	strb	r3, [r7, #12]
    b64c:	7b3b      	ldrb	r3, [r7, #12]
    b64e:	f043 0310 	orr.w	r3, r3, #16
    b652:	733b      	strb	r3, [r7, #12]
    b654:	7b3b      	ldrb	r3, [r7, #12]
    b656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b65a:	733b      	strb	r3, [r7, #12]
    b65c:	78bb      	ldrb	r3, [r7, #2]
    b65e:	743b      	strb	r3, [r7, #16]
    b660:	2301      	movs	r3, #1
    b662:	61bb      	str	r3, [r7, #24]
    b664:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b668:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b66c:	7b5b      	ldrb	r3, [r3, #13]
    b66e:	2b00      	cmp	r3, #0
    b670:	d003      	beq.n	b67a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b672:	2100      	movs	r1, #0
    b674:	6878      	ldr	r0, [r7, #4]
    b676:	4b0a      	ldr	r3, [pc, #40]	; (b6a0 <n25q256a_read_reg+0x94>)
    b678:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b67a:	f107 030c 	add.w	r3, r7, #12
    b67e:	4619      	mov	r1, r3
    b680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b682:	4b08      	ldr	r3, [pc, #32]	; (b6a4 <n25q256a_read_reg+0x98>)
    b684:	4798      	blx	r3
	if (n25q->xip_mode) {
    b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b688:	7b5b      	ldrb	r3, [r3, #13]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d003      	beq.n	b696 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b68e:	2101      	movs	r1, #1
    b690:	6878      	ldr	r0, [r7, #4]
    b692:	4b03      	ldr	r3, [pc, #12]	; (b6a0 <n25q256a_read_reg+0x94>)
    b694:	4798      	blx	r3
	}
	return status;
    b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b698:	4618      	mov	r0, r3
    b69a:	3730      	adds	r7, #48	; 0x30
    b69c:	46bd      	mov	sp, r7
    b69e:	bd80      	pop	{r7, pc}
    b6a0:	0000b541 	.word	0x0000b541
    b6a4:	0000294d 	.word	0x0000294d

0000b6a8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b6a8:	b580      	push	{r7, lr}
    b6aa:	b08c      	sub	sp, #48	; 0x30
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	60f8      	str	r0, [r7, #12]
    b6b0:	607b      	str	r3, [r7, #4]
    b6b2:	460b      	mov	r3, r1
    b6b4:	72fb      	strb	r3, [r7, #11]
    b6b6:	4613      	mov	r3, r2
    b6b8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b6ba:	68fb      	ldr	r3, [r7, #12]
    b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b6be:	68fb      	ldr	r3, [r7, #12]
    b6c0:	681b      	ldr	r3, [r3, #0]
    b6c2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b6c4:	f107 0310 	add.w	r3, r7, #16
    b6c8:	2200      	movs	r2, #0
    b6ca:	601a      	str	r2, [r3, #0]
    b6cc:	605a      	str	r2, [r3, #4]
    b6ce:	609a      	str	r2, [r3, #8]
    b6d0:	60da      	str	r2, [r3, #12]
    b6d2:	611a      	str	r2, [r3, #16]
    b6d4:	615a      	str	r2, [r3, #20]
    b6d6:	7afb      	ldrb	r3, [r7, #11]
    b6d8:	f003 0307 	and.w	r3, r3, #7
    b6dc:	b2da      	uxtb	r2, r3
    b6de:	7c3b      	ldrb	r3, [r7, #16]
    b6e0:	f362 0302 	bfi	r3, r2, #0, #3
    b6e4:	743b      	strb	r3, [r7, #16]
    b6e6:	7c3b      	ldrb	r3, [r7, #16]
    b6e8:	f043 0310 	orr.w	r3, r3, #16
    b6ec:	743b      	strb	r3, [r7, #16]
    b6ee:	7c3b      	ldrb	r3, [r7, #16]
    b6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b6f4:	743b      	strb	r3, [r7, #16]
    b6f6:	7c7b      	ldrb	r3, [r7, #17]
    b6f8:	2202      	movs	r2, #2
    b6fa:	f362 1305 	bfi	r3, r2, #4, #2
    b6fe:	747b      	strb	r3, [r7, #17]
    b700:	7abb      	ldrb	r3, [r7, #10]
    b702:	753b      	strb	r3, [r7, #20]
    b704:	2301      	movs	r3, #1
    b706:	61fb      	str	r3, [r7, #28]
    b708:	1d3b      	adds	r3, r7, #4
    b70a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b70e:	7b5b      	ldrb	r3, [r3, #13]
    b710:	2b00      	cmp	r3, #0
    b712:	d003      	beq.n	b71c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    b714:	2100      	movs	r1, #0
    b716:	68f8      	ldr	r0, [r7, #12]
    b718:	4b09      	ldr	r3, [pc, #36]	; (b740 <n25q256a_write_reg+0x98>)
    b71a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b71c:	f107 0310 	add.w	r3, r7, #16
    b720:	4619      	mov	r1, r3
    b722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b724:	4b07      	ldr	r3, [pc, #28]	; (b744 <n25q256a_write_reg+0x9c>)
    b726:	4798      	blx	r3
	if (n25q->xip_mode) {
    b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b72a:	7b5b      	ldrb	r3, [r3, #13]
    b72c:	2b00      	cmp	r3, #0
    b72e:	d003      	beq.n	b738 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    b730:	2101      	movs	r1, #1
    b732:	68f8      	ldr	r0, [r7, #12]
    b734:	4b02      	ldr	r3, [pc, #8]	; (b740 <n25q256a_write_reg+0x98>)
    b736:	4798      	blx	r3
	}
}
    b738:	bf00      	nop
    b73a:	3730      	adds	r7, #48	; 0x30
    b73c:	46bd      	mov	sp, r7
    b73e:	bd80      	pop	{r7, pc}
    b740:	0000b541 	.word	0x0000b541
    b744:	0000294d 	.word	0x0000294d

0000b748 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    b748:	b580      	push	{r7, lr}
    b74a:	b090      	sub	sp, #64	; 0x40
    b74c:	af00      	add	r7, sp, #0
    b74e:	6078      	str	r0, [r7, #4]
    b750:	460b      	mov	r3, r1
    b752:	70fb      	strb	r3, [r7, #3]
    b754:	4613      	mov	r3, r2
    b756:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	681b      	ldr	r3, [r3, #0]
    b75c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    b75e:	78bb      	ldrb	r3, [r7, #2]
    b760:	2b00      	cmp	r3, #0
    b762:	d001      	beq.n	b768 <n25q256a_write_enable+0x20>
    b764:	2306      	movs	r3, #6
    b766:	e000      	b.n	b76a <n25q256a_write_enable+0x22>
    b768:	2304      	movs	r3, #4
    b76a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    b76e:	f107 0320 	add.w	r3, r7, #32
    b772:	2200      	movs	r2, #0
    b774:	601a      	str	r2, [r3, #0]
    b776:	605a      	str	r2, [r3, #4]
    b778:	609a      	str	r2, [r3, #8]
    b77a:	60da      	str	r2, [r3, #12]
    b77c:	611a      	str	r2, [r3, #16]
    b77e:	615a      	str	r2, [r3, #20]
    b780:	78fb      	ldrb	r3, [r7, #3]
    b782:	f003 0307 	and.w	r3, r3, #7
    b786:	b2da      	uxtb	r2, r3
    b788:	f897 3020 	ldrb.w	r3, [r7, #32]
    b78c:	f362 0302 	bfi	r3, r2, #0, #3
    b790:	f887 3020 	strb.w	r3, [r7, #32]
    b794:	f897 3020 	ldrb.w	r3, [r7, #32]
    b798:	f043 0310 	orr.w	r3, r3, #16
    b79c:	f887 3020 	strb.w	r3, [r7, #32]
    b7a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b7a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    b7a8:	f107 0308 	add.w	r3, r7, #8
    b7ac:	2200      	movs	r2, #0
    b7ae:	601a      	str	r2, [r3, #0]
    b7b0:	605a      	str	r2, [r3, #4]
    b7b2:	609a      	str	r2, [r3, #8]
    b7b4:	60da      	str	r2, [r3, #12]
    b7b6:	611a      	str	r2, [r3, #16]
    b7b8:	615a      	str	r2, [r3, #20]
    b7ba:	78fb      	ldrb	r3, [r7, #3]
    b7bc:	f003 0307 	and.w	r3, r3, #7
    b7c0:	b2da      	uxtb	r2, r3
    b7c2:	7a3b      	ldrb	r3, [r7, #8]
    b7c4:	f362 0302 	bfi	r3, r2, #0, #3
    b7c8:	723b      	strb	r3, [r7, #8]
    b7ca:	7a3b      	ldrb	r3, [r7, #8]
    b7cc:	f043 0310 	orr.w	r3, r3, #16
    b7d0:	723b      	strb	r3, [r7, #8]
    b7d2:	7a3b      	ldrb	r3, [r7, #8]
    b7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7d8:	723b      	strb	r3, [r7, #8]
    b7da:	2305      	movs	r3, #5
    b7dc:	733b      	strb	r3, [r7, #12]
    b7de:	2301      	movs	r3, #1
    b7e0:	617b      	str	r3, [r7, #20]
    b7e2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    b7e6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    b7e8:	f107 0320 	add.w	r3, r7, #32
    b7ec:	4619      	mov	r1, r3
    b7ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b7f0:	4b08      	ldr	r3, [pc, #32]	; (b814 <n25q256a_write_enable+0xcc>)
    b7f2:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    b7f4:	f107 0308 	add.w	r3, r7, #8
    b7f8:	4619      	mov	r1, r3
    b7fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b7fc:	4b05      	ldr	r3, [pc, #20]	; (b814 <n25q256a_write_enable+0xcc>)
    b7fe:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    b800:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    b804:	f003 0302 	and.w	r3, r3, #2
    b808:	2b00      	cmp	r3, #0
    b80a:	d0ed      	beq.n	b7e8 <n25q256a_write_enable+0xa0>
}
    b80c:	bf00      	nop
    b80e:	3740      	adds	r7, #64	; 0x40
    b810:	46bd      	mov	sp, r7
    b812:	bd80      	pop	{r7, pc}
    b814:	0000294d 	.word	0x0000294d

0000b818 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    b818:	b590      	push	{r4, r7, lr}
    b81a:	b087      	sub	sp, #28
    b81c:	af00      	add	r7, sp, #0
    b81e:	6078      	str	r0, [r7, #4]
    b820:	460b      	mov	r3, r1
    b822:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    b824:	687b      	ldr	r3, [r7, #4]
    b826:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b828:	68fb      	ldr	r3, [r7, #12]
    b82a:	7b1b      	ldrb	r3, [r3, #12]
    b82c:	2b00      	cmp	r3, #0
    b82e:	d001      	beq.n	b834 <n25q256a_switch_mode+0x1c>
    b830:	2306      	movs	r3, #6
    b832:	e000      	b.n	b836 <n25q256a_switch_mode+0x1e>
    b834:	2300      	movs	r3, #0
    b836:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b838:	7afb      	ldrb	r3, [r7, #11]
    b83a:	2265      	movs	r2, #101	; 0x65
    b83c:	4619      	mov	r1, r3
    b83e:	6878      	ldr	r0, [r7, #4]
    b840:	4b25      	ldr	r3, [pc, #148]	; (b8d8 <n25q256a_switch_mode+0xc0>)
    b842:	4798      	blx	r3
    b844:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    b846:	2300      	movs	r3, #0
    b848:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    b84a:	68fb      	ldr	r3, [r7, #12]
    b84c:	7b1b      	ldrb	r3, [r3, #12]
    b84e:	78fa      	ldrb	r2, [r7, #3]
    b850:	429a      	cmp	r2, r3
    b852:	d03d      	beq.n	b8d0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    b854:	78fb      	ldrb	r3, [r7, #3]
    b856:	2b00      	cmp	r3, #0
    b858:	d00b      	beq.n	b872 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    b85a:	697b      	ldr	r3, [r7, #20]
    b85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b860:	2b00      	cmp	r3, #0
    b862:	d011      	beq.n	b888 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    b864:	697b      	ldr	r3, [r7, #20]
    b866:	f003 031f 	and.w	r3, r3, #31
    b86a:	617b      	str	r3, [r7, #20]
			modify = 1;
    b86c:	2301      	movs	r3, #1
    b86e:	74fb      	strb	r3, [r7, #19]
    b870:	e00a      	b.n	b888 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    b872:	697b      	ldr	r3, [r7, #20]
    b874:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b878:	2b00      	cmp	r3, #0
    b87a:	d105      	bne.n	b888 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    b87c:	697b      	ldr	r3, [r7, #20]
    b87e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b882:	617b      	str	r3, [r7, #20]
			modify = 1;
    b884:	2301      	movs	r3, #1
    b886:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    b888:	7cfb      	ldrb	r3, [r7, #19]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d021      	beq.n	b8d2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    b88e:	68fb      	ldr	r3, [r7, #12]
    b890:	78fa      	ldrb	r2, [r7, #3]
    b892:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    b894:	7afb      	ldrb	r3, [r7, #11]
    b896:	2201      	movs	r2, #1
    b898:	4619      	mov	r1, r3
    b89a:	6878      	ldr	r0, [r7, #4]
    b89c:	4b0f      	ldr	r3, [pc, #60]	; (b8dc <n25q256a_switch_mode+0xc4>)
    b89e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    b8a0:	7af9      	ldrb	r1, [r7, #11]
    b8a2:	697b      	ldr	r3, [r7, #20]
    b8a4:	2261      	movs	r2, #97	; 0x61
    b8a6:	6878      	ldr	r0, [r7, #4]
    b8a8:	4c0d      	ldr	r4, [pc, #52]	; (b8e0 <n25q256a_switch_mode+0xc8>)
    b8aa:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b8ac:	78fb      	ldrb	r3, [r7, #3]
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d001      	beq.n	b8b6 <n25q256a_switch_mode+0x9e>
    b8b2:	2306      	movs	r3, #6
    b8b4:	e000      	b.n	b8b8 <n25q256a_switch_mode+0xa0>
    b8b6:	2300      	movs	r3, #0
    b8b8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    b8ba:	7afb      	ldrb	r3, [r7, #11]
    b8bc:	2265      	movs	r2, #101	; 0x65
    b8be:	4619      	mov	r1, r3
    b8c0:	6878      	ldr	r0, [r7, #4]
    b8c2:	4b05      	ldr	r3, [pc, #20]	; (b8d8 <n25q256a_switch_mode+0xc0>)
    b8c4:	4798      	blx	r3
    b8c6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b8c8:	68fb      	ldr	r3, [r7, #12]
    b8ca:	78fa      	ldrb	r2, [r7, #3]
    b8cc:	731a      	strb	r2, [r3, #12]
    b8ce:	e000      	b.n	b8d2 <n25q256a_switch_mode+0xba>
		return;
    b8d0:	bf00      	nop
	}
}
    b8d2:	371c      	adds	r7, #28
    b8d4:	46bd      	mov	sp, r7
    b8d6:	bd90      	pop	{r4, r7, pc}
    b8d8:	0000b60d 	.word	0x0000b60d
    b8dc:	0000b749 	.word	0x0000b749
    b8e0:	0000b6a9 	.word	0x0000b6a9

0000b8e4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b8e4:	b580      	push	{r7, lr}
    b8e6:	b086      	sub	sp, #24
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	60f8      	str	r0, [r7, #12]
    b8ec:	60b9      	str	r1, [r7, #8]
    b8ee:	607a      	str	r2, [r7, #4]
    b8f0:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b8f2:	68fb      	ldr	r3, [r7, #12]
    b8f4:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b8f6:	4a0c      	ldr	r2, [pc, #48]	; (b928 <n25q256a_construct+0x44>)
    b8f8:	68b9      	ldr	r1, [r7, #8]
    b8fa:	68f8      	ldr	r0, [r7, #12]
    b8fc:	4b0b      	ldr	r3, [pc, #44]	; (b92c <n25q256a_construct+0x48>)
    b8fe:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b900:	697b      	ldr	r3, [r7, #20]
    b902:	2200      	movs	r2, #0
    b904:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b906:	697b      	ldr	r3, [r7, #20]
    b908:	2200      	movs	r2, #0
    b90a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b90c:	697b      	ldr	r3, [r7, #20]
    b90e:	687a      	ldr	r2, [r7, #4]
    b910:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b912:	78fb      	ldrb	r3, [r7, #3]
    b914:	4619      	mov	r1, r3
    b916:	68f8      	ldr	r0, [r7, #12]
    b918:	4b05      	ldr	r3, [pc, #20]	; (b930 <n25q256a_construct+0x4c>)
    b91a:	4798      	blx	r3
	return me;
    b91c:	68fb      	ldr	r3, [r7, #12]
}
    b91e:	4618      	mov	r0, r3
    b920:	3718      	adds	r7, #24
    b922:	46bd      	mov	sp, r7
    b924:	bd80      	pop	{r7, pc}
    b926:	bf00      	nop
    b928:	0000f3bc 	.word	0x0000f3bc
    b92c:	0000bdc1 	.word	0x0000bdc1
    b930:	0000b819 	.word	0x0000b819

0000b934 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b934:	b580      	push	{r7, lr}
    b936:	b08c      	sub	sp, #48	; 0x30
    b938:	af00      	add	r7, sp, #0
    b93a:	60f8      	str	r0, [r7, #12]
    b93c:	60b9      	str	r1, [r7, #8]
    b93e:	607a      	str	r2, [r7, #4]
    b940:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b942:	68fb      	ldr	r3, [r7, #12]
    b944:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b946:	68fb      	ldr	r3, [r7, #12]
    b948:	681b      	ldr	r3, [r3, #0]
    b94a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b94c:	f107 0310 	add.w	r3, r7, #16
    b950:	2200      	movs	r2, #0
    b952:	601a      	str	r2, [r3, #0]
    b954:	605a      	str	r2, [r3, #4]
    b956:	609a      	str	r2, [r3, #8]
    b958:	60da      	str	r2, [r3, #12]
    b95a:	611a      	str	r2, [r3, #16]
    b95c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b960:	7b1b      	ldrb	r3, [r3, #12]
    b962:	2b00      	cmp	r3, #0
    b964:	d001      	beq.n	b96a <n25q256a_read+0x36>
    b966:	2206      	movs	r2, #6
    b968:	e000      	b.n	b96c <n25q256a_read+0x38>
    b96a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b96c:	7c3b      	ldrb	r3, [r7, #16]
    b96e:	f362 0302 	bfi	r3, r2, #0, #3
    b972:	743b      	strb	r3, [r7, #16]
    b974:	7c3b      	ldrb	r3, [r7, #16]
    b976:	f043 0310 	orr.w	r3, r3, #16
    b97a:	743b      	strb	r3, [r7, #16]
    b97c:	7c3b      	ldrb	r3, [r7, #16]
    b97e:	f043 0320 	orr.w	r3, r3, #32
    b982:	743b      	strb	r3, [r7, #16]
    b984:	7c3b      	ldrb	r3, [r7, #16]
    b986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b98a:	743b      	strb	r3, [r7, #16]
    b98c:	7c7b      	ldrb	r3, [r7, #17]
    b98e:	2201      	movs	r2, #1
    b990:	f362 1305 	bfi	r3, r2, #4, #2
    b994:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b998:	7b1b      	ldrb	r3, [r3, #12]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d001      	beq.n	b9a2 <n25q256a_read+0x6e>
    b99e:	220a      	movs	r2, #10
    b9a0:	e000      	b.n	b9a4 <n25q256a_read+0x70>
    b9a2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b9a4:	7cbb      	ldrb	r3, [r7, #18]
    b9a6:	f362 0304 	bfi	r3, r2, #0, #5
    b9aa:	74bb      	strb	r3, [r7, #18]
    b9ac:	230b      	movs	r3, #11
    b9ae:	753b      	strb	r3, [r7, #20]
    b9b0:	687b      	ldr	r3, [r7, #4]
    b9b2:	61bb      	str	r3, [r7, #24]
    b9b4:	683b      	ldr	r3, [r7, #0]
    b9b6:	61fb      	str	r3, [r7, #28]
    b9b8:	68bb      	ldr	r3, [r7, #8]
    b9ba:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b9bc:	f107 0310 	add.w	r3, r7, #16
    b9c0:	4619      	mov	r1, r3
    b9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9c4:	4b03      	ldr	r3, [pc, #12]	; (b9d4 <n25q256a_read+0xa0>)
    b9c6:	4798      	blx	r3
	return ERR_NONE;
    b9c8:	2300      	movs	r3, #0
}
    b9ca:	4618      	mov	r0, r3
    b9cc:	3730      	adds	r7, #48	; 0x30
    b9ce:	46bd      	mov	sp, r7
    b9d0:	bd80      	pop	{r7, pc}
    b9d2:	bf00      	nop
    b9d4:	0000294d 	.word	0x0000294d

0000b9d8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b9d8:	b580      	push	{r7, lr}
    b9da:	b08c      	sub	sp, #48	; 0x30
    b9dc:	af00      	add	r7, sp, #0
    b9de:	60f8      	str	r0, [r7, #12]
    b9e0:	60b9      	str	r1, [r7, #8]
    b9e2:	607a      	str	r2, [r7, #4]
    b9e4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9e6:	68fb      	ldr	r3, [r7, #12]
    b9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9ea:	68fb      	ldr	r3, [r7, #12]
    b9ec:	681b      	ldr	r3, [r3, #0]
    b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b9f0:	f107 0310 	add.w	r3, r7, #16
    b9f4:	2200      	movs	r2, #0
    b9f6:	601a      	str	r2, [r3, #0]
    b9f8:	605a      	str	r2, [r3, #4]
    b9fa:	609a      	str	r2, [r3, #8]
    b9fc:	60da      	str	r2, [r3, #12]
    b9fe:	611a      	str	r2, [r3, #16]
    ba00:	615a      	str	r2, [r3, #20]
    ba02:	7c3b      	ldrb	r3, [r7, #16]
    ba04:	f043 0310 	orr.w	r3, r3, #16
    ba08:	743b      	strb	r3, [r7, #16]
    ba0a:	7c3b      	ldrb	r3, [r7, #16]
    ba0c:	f043 0320 	orr.w	r3, r3, #32
    ba10:	743b      	strb	r3, [r7, #16]
    ba12:	7c3b      	ldrb	r3, [r7, #16]
    ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba18:	743b      	strb	r3, [r7, #16]
    ba1a:	7c7b      	ldrb	r3, [r7, #17]
    ba1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ba20:	747b      	strb	r3, [r7, #17]
    ba22:	2302      	movs	r3, #2
    ba24:	753b      	strb	r3, [r7, #20]
    ba26:	687b      	ldr	r3, [r7, #4]
    ba28:	61bb      	str	r3, [r7, #24]
    ba2a:	683b      	ldr	r3, [r7, #0]
    ba2c:	61fb      	str	r3, [r7, #28]
    ba2e:	68bb      	ldr	r3, [r7, #8]
    ba30:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ba32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba34:	7b1b      	ldrb	r3, [r3, #12]
    ba36:	2b00      	cmp	r3, #0
    ba38:	d001      	beq.n	ba3e <n25q256a_write+0x66>
    ba3a:	2206      	movs	r2, #6
    ba3c:	e000      	b.n	ba40 <n25q256a_write+0x68>
    ba3e:	2200      	movs	r2, #0
    ba40:	7c3b      	ldrb	r3, [r7, #16]
    ba42:	f362 0302 	bfi	r3, r2, #0, #3
    ba46:	743b      	strb	r3, [r7, #16]
	while (length) {
    ba48:	e035      	b.n	bab6 <n25q256a_write+0xde>
		cmd.address = address;
    ba4a:	687b      	ldr	r3, [r7, #4]
    ba4c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    ba4e:	683b      	ldr	r3, [r7, #0]
    ba50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ba54:	d802      	bhi.n	ba5c <n25q256a_write+0x84>
			cmd.buf_len = length;
    ba56:	683b      	ldr	r3, [r7, #0]
    ba58:	61fb      	str	r3, [r7, #28]
    ba5a:	e002      	b.n	ba62 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    ba5c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ba60:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ba62:	7c3b      	ldrb	r3, [r7, #16]
    ba64:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba68:	b2db      	uxtb	r3, r3
    ba6a:	2201      	movs	r2, #1
    ba6c:	4619      	mov	r1, r3
    ba6e:	68f8      	ldr	r0, [r7, #12]
    ba70:	4b19      	ldr	r3, [pc, #100]	; (bad8 <n25q256a_write+0x100>)
    ba72:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ba74:	f107 0310 	add.w	r3, r7, #16
    ba78:	4619      	mov	r1, r3
    ba7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba7c:	4b17      	ldr	r3, [pc, #92]	; (badc <n25q256a_write+0x104>)
    ba7e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ba80:	bf00      	nop
    ba82:	7c3b      	ldrb	r3, [r7, #16]
    ba84:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ba88:	b2db      	uxtb	r3, r3
    ba8a:	2270      	movs	r2, #112	; 0x70
    ba8c:	4619      	mov	r1, r3
    ba8e:	68f8      	ldr	r0, [r7, #12]
    ba90:	4b13      	ldr	r3, [pc, #76]	; (bae0 <n25q256a_write+0x108>)
    ba92:	4798      	blx	r3
    ba94:	4603      	mov	r3, r0
    ba96:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ba9a:	2b00      	cmp	r3, #0
    ba9c:	d0f1      	beq.n	ba82 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ba9e:	6a3a      	ldr	r2, [r7, #32]
    baa0:	69fb      	ldr	r3, [r7, #28]
    baa2:	4413      	add	r3, r2
    baa4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    baa6:	69fb      	ldr	r3, [r7, #28]
    baa8:	683a      	ldr	r2, [r7, #0]
    baaa:	1ad3      	subs	r3, r2, r3
    baac:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    baae:	69fb      	ldr	r3, [r7, #28]
    bab0:	687a      	ldr	r2, [r7, #4]
    bab2:	4413      	add	r3, r2
    bab4:	607b      	str	r3, [r7, #4]
	while (length) {
    bab6:	683b      	ldr	r3, [r7, #0]
    bab8:	2b00      	cmp	r3, #0
    baba:	d1c6      	bne.n	ba4a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    babe:	7b5b      	ldrb	r3, [r3, #13]
    bac0:	2b00      	cmp	r3, #0
    bac2:	d003      	beq.n	bacc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bac4:	2101      	movs	r1, #1
    bac6:	68f8      	ldr	r0, [r7, #12]
    bac8:	4b06      	ldr	r3, [pc, #24]	; (bae4 <n25q256a_write+0x10c>)
    baca:	4798      	blx	r3
	}
	return ERR_NONE;
    bacc:	2300      	movs	r3, #0
}
    bace:	4618      	mov	r0, r3
    bad0:	3730      	adds	r7, #48	; 0x30
    bad2:	46bd      	mov	sp, r7
    bad4:	bd80      	pop	{r7, pc}
    bad6:	bf00      	nop
    bad8:	0000b749 	.word	0x0000b749
    badc:	0000294d 	.word	0x0000294d
    bae0:	0000b60d 	.word	0x0000b60d
    bae4:	0000b541 	.word	0x0000b541

0000bae8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bae8:	b580      	push	{r7, lr}
    baea:	b090      	sub	sp, #64	; 0x40
    baec:	af00      	add	r7, sp, #0
    baee:	60f8      	str	r0, [r7, #12]
    baf0:	60b9      	str	r1, [r7, #8]
    baf2:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    baf4:	68fb      	ldr	r3, [r7, #12]
    baf6:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    baf8:	68fb      	ldr	r3, [r7, #12]
    bafa:	681b      	ldr	r3, [r3, #0]
    bafc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bafe:	f107 0314 	add.w	r3, r7, #20
    bb02:	2200      	movs	r2, #0
    bb04:	601a      	str	r2, [r3, #0]
    bb06:	605a      	str	r2, [r3, #4]
    bb08:	609a      	str	r2, [r3, #8]
    bb0a:	60da      	str	r2, [r3, #12]
    bb0c:	611a      	str	r2, [r3, #16]
    bb0e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb12:	7b1b      	ldrb	r3, [r3, #12]
    bb14:	2b00      	cmp	r3, #0
    bb16:	d001      	beq.n	bb1c <n25q256a_erase+0x34>
    bb18:	2206      	movs	r2, #6
    bb1a:	e000      	b.n	bb1e <n25q256a_erase+0x36>
    bb1c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    bb1e:	7d3b      	ldrb	r3, [r7, #20]
    bb20:	f362 0302 	bfi	r3, r2, #0, #3
    bb24:	753b      	strb	r3, [r7, #20]
    bb26:	7d3b      	ldrb	r3, [r7, #20]
    bb28:	f043 0310 	orr.w	r3, r3, #16
    bb2c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    bb2e:	687b      	ldr	r3, [r7, #4]
    bb30:	4a56      	ldr	r2, [pc, #344]	; (bc8c <n25q256a_erase+0x1a4>)
    bb32:	4293      	cmp	r3, r2
    bb34:	bf94      	ite	ls
    bb36:	2301      	movls	r3, #1
    bb38:	2300      	movhi	r3, #0
    bb3a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    bb3c:	7d3b      	ldrb	r3, [r7, #20]
    bb3e:	f362 1345 	bfi	r3, r2, #5, #1
    bb42:	753b      	strb	r3, [r7, #20]
    bb44:	7d7b      	ldrb	r3, [r7, #21]
    bb46:	2202      	movs	r2, #2
    bb48:	f362 1305 	bfi	r3, r2, #4, #2
    bb4c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    bb4e:	68bb      	ldr	r3, [r7, #8]
    bb50:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    bb52:	687b      	ldr	r3, [r7, #4]
    bb54:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    bb56:	2300      	movs	r3, #0
    bb58:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    bb5a:	687b      	ldr	r3, [r7, #4]
    bb5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb60:	2b00      	cmp	r3, #0
    bb62:	d104      	bne.n	bb6e <n25q256a_erase+0x86>
    bb64:	68bb      	ldr	r3, [r7, #8]
    bb66:	f3c3 030b 	ubfx	r3, r3, #0, #12
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d002      	beq.n	bb74 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    bb6e:	f06f 030c 	mvn.w	r3, #12
    bb72:	e087      	b.n	bc84 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    bb74:	687b      	ldr	r3, [r7, #4]
    bb76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    bb7a:	d368      	bcc.n	bc4e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    bb7c:	23c7      	movs	r3, #199	; 0xc7
    bb7e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bb80:	7d3b      	ldrb	r3, [r7, #20]
    bb82:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bb86:	b2db      	uxtb	r3, r3
    bb88:	2201      	movs	r2, #1
    bb8a:	4619      	mov	r1, r3
    bb8c:	68f8      	ldr	r0, [r7, #12]
    bb8e:	4b40      	ldr	r3, [pc, #256]	; (bc90 <n25q256a_erase+0x1a8>)
    bb90:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bb92:	f107 0314 	add.w	r3, r7, #20
    bb96:	4619      	mov	r1, r3
    bb98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bb9a:	4b3e      	ldr	r3, [pc, #248]	; (bc94 <n25q256a_erase+0x1ac>)
    bb9c:	4798      	blx	r3
    bb9e:	e059      	b.n	bc54 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    bba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bba2:	b29b      	uxth	r3, r3
    bba4:	2b00      	cmp	r3, #0
    bba6:	d11f      	bne.n	bbe8 <n25q256a_erase+0x100>
    bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bbae:	d31b      	bcc.n	bbe8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbb2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bbb4:	23d8      	movs	r3, #216	; 0xd8
    bbb6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bbb8:	7d3b      	ldrb	r3, [r7, #20]
    bbba:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbbe:	b2db      	uxtb	r3, r3
    bbc0:	2201      	movs	r2, #1
    bbc2:	4619      	mov	r1, r3
    bbc4:	68f8      	ldr	r0, [r7, #12]
    bbc6:	4b32      	ldr	r3, [pc, #200]	; (bc90 <n25q256a_erase+0x1a8>)
    bbc8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bbca:	f107 0314 	add.w	r3, r7, #20
    bbce:	4619      	mov	r1, r3
    bbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bbd2:	4b30      	ldr	r3, [pc, #192]	; (bc94 <n25q256a_erase+0x1ac>)
    bbd4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbd8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    bbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbe0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bbe4:	63bb      	str	r3, [r7, #56]	; 0x38
    bbe6:	e023      	b.n	bc30 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    bbee:	d31b      	bcc.n	bc28 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbf2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bbf4:	2320      	movs	r3, #32
    bbf6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bbf8:	7d3b      	ldrb	r3, [r7, #20]
    bbfa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bbfe:	b2db      	uxtb	r3, r3
    bc00:	2201      	movs	r2, #1
    bc02:	4619      	mov	r1, r3
    bc04:	68f8      	ldr	r0, [r7, #12]
    bc06:	4b22      	ldr	r3, [pc, #136]	; (bc90 <n25q256a_erase+0x1a8>)
    bc08:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bc0a:	f107 0314 	add.w	r3, r7, #20
    bc0e:	4619      	mov	r1, r3
    bc10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bc12:	4b20      	ldr	r3, [pc, #128]	; (bc94 <n25q256a_erase+0x1ac>)
    bc14:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc20:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bc24:	63bb      	str	r3, [r7, #56]	; 0x38
    bc26:	e003      	b.n	bc30 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bc28:	f06f 030c 	mvn.w	r3, #12
    bc2c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bc2e:	e011      	b.n	bc54 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc30:	bf00      	nop
    bc32:	7d3b      	ldrb	r3, [r7, #20]
    bc34:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc38:	b2db      	uxtb	r3, r3
    bc3a:	2270      	movs	r2, #112	; 0x70
    bc3c:	4619      	mov	r1, r3
    bc3e:	68f8      	ldr	r0, [r7, #12]
    bc40:	4b15      	ldr	r3, [pc, #84]	; (bc98 <n25q256a_erase+0x1b0>)
    bc42:	4798      	blx	r3
    bc44:	4603      	mov	r3, r0
    bc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d0f1      	beq.n	bc32 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc50:	2b00      	cmp	r3, #0
    bc52:	d1a5      	bne.n	bba0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bc54:	bf00      	nop
    bc56:	7d3b      	ldrb	r3, [r7, #20]
    bc58:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bc5c:	b2db      	uxtb	r3, r3
    bc5e:	2270      	movs	r2, #112	; 0x70
    bc60:	4619      	mov	r1, r3
    bc62:	68f8      	ldr	r0, [r7, #12]
    bc64:	4b0c      	ldr	r3, [pc, #48]	; (bc98 <n25q256a_erase+0x1b0>)
    bc66:	4798      	blx	r3
    bc68:	4603      	mov	r3, r0
    bc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d0f1      	beq.n	bc56 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc74:	7b5b      	ldrb	r3, [r3, #13]
    bc76:	2b00      	cmp	r3, #0
    bc78:	d003      	beq.n	bc82 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bc7a:	2101      	movs	r1, #1
    bc7c:	68f8      	ldr	r0, [r7, #12]
    bc7e:	4b07      	ldr	r3, [pc, #28]	; (bc9c <n25q256a_erase+0x1b4>)
    bc80:	4798      	blx	r3
	}
	return rc;
    bc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bc84:	4618      	mov	r0, r3
    bc86:	3740      	adds	r7, #64	; 0x40
    bc88:	46bd      	mov	sp, r7
    bc8a:	bd80      	pop	{r7, pc}
    bc8c:	001fffff 	.word	0x001fffff
    bc90:	0000b749 	.word	0x0000b749
    bc94:	0000294d 	.word	0x0000294d
    bc98:	0000b60d 	.word	0x0000b60d
    bc9c:	0000b541 	.word	0x0000b541

0000bca0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bca0:	b590      	push	{r4, r7, lr}
    bca2:	b085      	sub	sp, #20
    bca4:	af00      	add	r7, sp, #0
    bca6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bca8:	687b      	ldr	r3, [r7, #4]
    bcaa:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bcac:	68fb      	ldr	r3, [r7, #12]
    bcae:	7b1b      	ldrb	r3, [r3, #12]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d001      	beq.n	bcb8 <n25q256a_enable_xip+0x18>
    bcb4:	2306      	movs	r3, #6
    bcb6:	e000      	b.n	bcba <n25q256a_enable_xip+0x1a>
    bcb8:	2300      	movs	r3, #0
    bcba:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bcbc:	68fb      	ldr	r3, [r7, #12]
    bcbe:	7b5b      	ldrb	r3, [r3, #13]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d129      	bne.n	bd18 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bcc4:	7afb      	ldrb	r3, [r7, #11]
    bcc6:	2285      	movs	r2, #133	; 0x85
    bcc8:	4619      	mov	r1, r3
    bcca:	6878      	ldr	r0, [r7, #4]
    bccc:	4b15      	ldr	r3, [pc, #84]	; (bd24 <n25q256a_enable_xip+0x84>)
    bcce:	4798      	blx	r3
    bcd0:	4603      	mov	r3, r0
    bcd2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bcd4:	7abb      	ldrb	r3, [r7, #10]
    bcd6:	f003 0308 	and.w	r3, r3, #8
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d015      	beq.n	bd0a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bcde:	7abb      	ldrb	r3, [r7, #10]
    bce0:	f023 0308 	bic.w	r3, r3, #8
    bce4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bce6:	7abb      	ldrb	r3, [r7, #10]
    bce8:	7af9      	ldrb	r1, [r7, #11]
    bcea:	2281      	movs	r2, #129	; 0x81
    bcec:	6878      	ldr	r0, [r7, #4]
    bcee:	4c0e      	ldr	r4, [pc, #56]	; (bd28 <n25q256a_enable_xip+0x88>)
    bcf0:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bcf2:	bf00      	nop
    bcf4:	7afb      	ldrb	r3, [r7, #11]
    bcf6:	2270      	movs	r2, #112	; 0x70
    bcf8:	4619      	mov	r1, r3
    bcfa:	6878      	ldr	r0, [r7, #4]
    bcfc:	4b09      	ldr	r3, [pc, #36]	; (bd24 <n25q256a_enable_xip+0x84>)
    bcfe:	4798      	blx	r3
    bd00:	4603      	mov	r3, r0
    bd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd06:	2b00      	cmp	r3, #0
    bd08:	d0f4      	beq.n	bcf4 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    bd0a:	68fb      	ldr	r3, [r7, #12]
    bd0c:	2201      	movs	r2, #1
    bd0e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    bd10:	2101      	movs	r1, #1
    bd12:	6878      	ldr	r0, [r7, #4]
    bd14:	4b05      	ldr	r3, [pc, #20]	; (bd2c <n25q256a_enable_xip+0x8c>)
    bd16:	4798      	blx	r3
	}
	return ERR_NONE;
    bd18:	2300      	movs	r3, #0
}
    bd1a:	4618      	mov	r0, r3
    bd1c:	3714      	adds	r7, #20
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd90      	pop	{r4, r7, pc}
    bd22:	bf00      	nop
    bd24:	0000b60d 	.word	0x0000b60d
    bd28:	0000b6a9 	.word	0x0000b6a9
    bd2c:	0000b541 	.word	0x0000b541

0000bd30 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    bd30:	b580      	push	{r7, lr}
    bd32:	b086      	sub	sp, #24
    bd34:	af00      	add	r7, sp, #0
    bd36:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd38:	687b      	ldr	r3, [r7, #4]
    bd3a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd3c:	687b      	ldr	r3, [r7, #4]
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd42:	697b      	ldr	r3, [r7, #20]
    bd44:	7b1b      	ldrb	r3, [r3, #12]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d001      	beq.n	bd4e <n25q256a_disable_xip+0x1e>
    bd4a:	2306      	movs	r3, #6
    bd4c:	e000      	b.n	bd50 <n25q256a_disable_xip+0x20>
    bd4e:	2300      	movs	r3, #0
    bd50:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    bd52:	2100      	movs	r1, #0
    bd54:	6878      	ldr	r0, [r7, #4]
    bd56:	4b15      	ldr	r3, [pc, #84]	; (bdac <n25q256a_disable_xip+0x7c>)
    bd58:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bd5a:	7bfb      	ldrb	r3, [r7, #15]
    bd5c:	2285      	movs	r2, #133	; 0x85
    bd5e:	4619      	mov	r1, r3
    bd60:	6878      	ldr	r0, [r7, #4]
    bd62:	4b13      	ldr	r3, [pc, #76]	; (bdb0 <n25q256a_disable_xip+0x80>)
    bd64:	4798      	blx	r3
    bd66:	4603      	mov	r3, r0
    bd68:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    bd6a:	7bbb      	ldrb	r3, [r7, #14]
    bd6c:	f003 0308 	and.w	r3, r3, #8
    bd70:	2b00      	cmp	r3, #0
    bd72:	d113      	bne.n	bd9c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    bd74:	697b      	ldr	r3, [r7, #20]
    bd76:	689b      	ldr	r3, [r3, #8]
    bd78:	2b00      	cmp	r3, #0
    bd7a:	d00f      	beq.n	bd9c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    bd7c:	693b      	ldr	r3, [r7, #16]
    bd7e:	681b      	ldr	r3, [r3, #0]
    bd80:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    bd82:	6938      	ldr	r0, [r7, #16]
    bd84:	4b0b      	ldr	r3, [pc, #44]	; (bdb4 <n25q256a_disable_xip+0x84>)
    bd86:	4798      	blx	r3
			n25q->pin_exit_xip();
    bd88:	697b      	ldr	r3, [r7, #20]
    bd8a:	689b      	ldr	r3, [r3, #8]
    bd8c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    bd8e:	68b9      	ldr	r1, [r7, #8]
    bd90:	6938      	ldr	r0, [r7, #16]
    bd92:	4b09      	ldr	r3, [pc, #36]	; (bdb8 <n25q256a_disable_xip+0x88>)
    bd94:	4798      	blx	r3
			qspi_sync_enable(descr);
    bd96:	6938      	ldr	r0, [r7, #16]
    bd98:	4b08      	ldr	r3, [pc, #32]	; (bdbc <n25q256a_disable_xip+0x8c>)
    bd9a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    bd9c:	697b      	ldr	r3, [r7, #20]
    bd9e:	2200      	movs	r2, #0
    bda0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bda2:	2300      	movs	r3, #0
}
    bda4:	4618      	mov	r0, r3
    bda6:	3718      	adds	r7, #24
    bda8:	46bd      	mov	sp, r7
    bdaa:	bd80      	pop	{r7, pc}
    bdac:	0000b541 	.word	0x0000b541
    bdb0:	0000b60d 	.word	0x0000b60d
    bdb4:	00002911 	.word	0x00002911
    bdb8:	00002889 	.word	0x00002889
    bdbc:	000028d5 	.word	0x000028d5

0000bdc0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    bdc0:	b480      	push	{r7}
    bdc2:	b085      	sub	sp, #20
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	60f8      	str	r0, [r7, #12]
    bdc8:	60b9      	str	r1, [r7, #8]
    bdca:	607a      	str	r2, [r7, #4]
	me->io        = io;
    bdcc:	68fb      	ldr	r3, [r7, #12]
    bdce:	68ba      	ldr	r2, [r7, #8]
    bdd0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    bdd2:	68fb      	ldr	r3, [r7, #12]
    bdd4:	687a      	ldr	r2, [r7, #4]
    bdd6:	605a      	str	r2, [r3, #4]

	return me;
    bdd8:	68fb      	ldr	r3, [r7, #12]
}
    bdda:	4618      	mov	r0, r3
    bddc:	3714      	adds	r7, #20
    bdde:	46bd      	mov	sp, r7
    bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bde4:	4770      	bx	lr

0000bde6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    bde6:	b480      	push	{r7}
    bde8:	b083      	sub	sp, #12
    bdea:	af00      	add	r7, sp, #0
    bdec:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    bdee:	687b      	ldr	r3, [r7, #4]
    bdf0:	781b      	ldrb	r3, [r3, #0]
    bdf2:	b29a      	uxth	r2, r3
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	3301      	adds	r3, #1
    bdf8:	781b      	ldrb	r3, [r3, #0]
    bdfa:	b29b      	uxth	r3, r3
    bdfc:	021b      	lsls	r3, r3, #8
    bdfe:	b29b      	uxth	r3, r3
    be00:	4413      	add	r3, r2
    be02:	b29b      	uxth	r3, r3
}
    be04:	4618      	mov	r0, r3
    be06:	370c      	adds	r7, #12
    be08:	46bd      	mov	sp, r7
    be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    be0e:	4770      	bx	lr

0000be10 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    be10:	b480      	push	{r7}
    be12:	b083      	sub	sp, #12
    be14:	af00      	add	r7, sp, #0
    be16:	6078      	str	r0, [r7, #4]
	return desc[0];
    be18:	687b      	ldr	r3, [r7, #4]
    be1a:	781b      	ldrb	r3, [r3, #0]
}
    be1c:	4618      	mov	r0, r3
    be1e:	370c      	adds	r7, #12
    be20:	46bd      	mov	sp, r7
    be22:	f85d 7b04 	ldr.w	r7, [sp], #4
    be26:	4770      	bx	lr

0000be28 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
    be2e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    be30:	6878      	ldr	r0, [r7, #4]
    be32:	4b05      	ldr	r3, [pc, #20]	; (be48 <usb_desc_next+0x20>)
    be34:	4798      	blx	r3
    be36:	4603      	mov	r3, r0
    be38:	461a      	mov	r2, r3
    be3a:	687b      	ldr	r3, [r7, #4]
    be3c:	4413      	add	r3, r2
}
    be3e:	4618      	mov	r0, r3
    be40:	3708      	adds	r7, #8
    be42:	46bd      	mov	sp, r7
    be44:	bd80      	pop	{r7, pc}
    be46:	bf00      	nop
    be48:	0000be11 	.word	0x0000be11

0000be4c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    be4c:	b580      	push	{r7, lr}
    be4e:	b08c      	sub	sp, #48	; 0x30
    be50:	af00      	add	r7, sp, #0
    be52:	6078      	str	r0, [r7, #4]
    be54:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	689b      	ldr	r3, [r3, #8]
    be5a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    be5c:	683b      	ldr	r3, [r7, #0]
    be5e:	681b      	ldr	r3, [r3, #0]
    be60:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    be62:	2300      	movs	r3, #0
    be64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    be68:	e08f      	b.n	bf8a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be6c:	2b00      	cmp	r3, #0
    be6e:	d102      	bne.n	be76 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    be70:	f06f 0309 	mvn.w	r3, #9
    be74:	e092      	b.n	bf9c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be78:	789b      	ldrb	r3, [r3, #2]
    be7a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be7e:	795b      	ldrb	r3, [r3, #5]
    be80:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    be82:	7c7b      	ldrb	r3, [r7, #17]
    be84:	2b02      	cmp	r3, #2
    be86:	d002      	beq.n	be8e <cdcdf_acm_enable+0x42>
    be88:	7c7b      	ldrb	r3, [r7, #17]
    be8a:	2b0a      	cmp	r3, #10
    be8c:	d121      	bne.n	bed2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    be8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    be92:	6a3a      	ldr	r2, [r7, #32]
    be94:	5cd2      	ldrb	r2, [r2, r3]
    be96:	7bbb      	ldrb	r3, [r7, #14]
    be98:	429a      	cmp	r2, r3
    be9a:	d102      	bne.n	bea2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    be9c:	f06f 0311 	mvn.w	r3, #17
    bea0:	e07c      	b.n	bf9c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    bea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bea6:	6a3a      	ldr	r2, [r7, #32]
    bea8:	5cd3      	ldrb	r3, [r2, r3]
    beaa:	2bff      	cmp	r3, #255	; 0xff
    beac:	d002      	beq.n	beb4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    beae:	f06f 031b 	mvn.w	r3, #27
    beb2:	e073      	b.n	bf9c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    beb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    beb8:	7bb9      	ldrb	r1, [r7, #14]
    beba:	6a3a      	ldr	r2, [r7, #32]
    bebc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    bebe:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    bec0:	683b      	ldr	r3, [r7, #0]
    bec2:	685b      	ldr	r3, [r3, #4]
    bec4:	2205      	movs	r2, #5
    bec6:	4619      	mov	r1, r3
    bec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    beca:	4b36      	ldr	r3, [pc, #216]	; (bfa4 <cdcdf_acm_enable+0x158>)
    becc:	4798      	blx	r3
    bece:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bed0:	e047      	b.n	bf62 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    bed2:	f06f 0309 	mvn.w	r3, #9
    bed6:	e061      	b.n	bf9c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    beda:	789b      	ldrb	r3, [r3, #2]
    bedc:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    bede:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bee0:	78db      	ldrb	r3, [r3, #3]
    bee2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    bee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bee6:	3304      	adds	r3, #4
    bee8:	4618      	mov	r0, r3
    beea:	4b2f      	ldr	r3, [pc, #188]	; (bfa8 <cdcdf_acm_enable+0x15c>)
    beec:	4798      	blx	r3
    beee:	4603      	mov	r3, r0
    bef0:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    bef2:	7ebb      	ldrb	r3, [r7, #26]
    bef4:	7ef9      	ldrb	r1, [r7, #27]
    bef6:	8bba      	ldrh	r2, [r7, #28]
    bef8:	4618      	mov	r0, r3
    befa:	4b2c      	ldr	r3, [pc, #176]	; (bfac <cdcdf_acm_enable+0x160>)
    befc:	4798      	blx	r3
    befe:	4603      	mov	r3, r0
    bf00:	2b00      	cmp	r3, #0
    bf02:	d002      	beq.n	bf0a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    bf04:	f06f 0313 	mvn.w	r3, #19
    bf08:	e048      	b.n	bf9c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    bf0a:	7ebb      	ldrb	r3, [r7, #26]
    bf0c:	b25b      	sxtb	r3, r3
    bf0e:	2b00      	cmp	r3, #0
    bf10:	da0f      	bge.n	bf32 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    bf12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf16:	7eb9      	ldrb	r1, [r7, #26]
    bf18:	6a3a      	ldr	r2, [r7, #32]
    bf1a:	4413      	add	r3, r2
    bf1c:	460a      	mov	r2, r1
    bf1e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf24:	6a3a      	ldr	r2, [r7, #32]
    bf26:	4413      	add	r3, r2
    bf28:	789b      	ldrb	r3, [r3, #2]
    bf2a:	4618      	mov	r0, r3
    bf2c:	4b20      	ldr	r3, [pc, #128]	; (bfb0 <cdcdf_acm_enable+0x164>)
    bf2e:	4798      	blx	r3
    bf30:	e007      	b.n	bf42 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    bf32:	7eba      	ldrb	r2, [r7, #26]
    bf34:	6a3b      	ldr	r3, [r7, #32]
    bf36:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    bf38:	6a3b      	ldr	r3, [r7, #32]
    bf3a:	791b      	ldrb	r3, [r3, #4]
    bf3c:	4618      	mov	r0, r3
    bf3e:	4b1c      	ldr	r3, [pc, #112]	; (bfb0 <cdcdf_acm_enable+0x164>)
    bf40:	4798      	blx	r3
			}
			desc->sod = ep;
    bf42:	683b      	ldr	r3, [r7, #0]
    bf44:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bf46:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    bf48:	683b      	ldr	r3, [r7, #0]
    bf4a:	681b      	ldr	r3, [r3, #0]
    bf4c:	4618      	mov	r0, r3
    bf4e:	4b19      	ldr	r3, [pc, #100]	; (bfb4 <cdcdf_acm_enable+0x168>)
    bf50:	4798      	blx	r3
    bf52:	4602      	mov	r2, r0
    bf54:	683b      	ldr	r3, [r7, #0]
    bf56:	685b      	ldr	r3, [r3, #4]
    bf58:	4619      	mov	r1, r3
    bf5a:	4610      	mov	r0, r2
    bf5c:	4b16      	ldr	r3, [pc, #88]	; (bfb8 <cdcdf_acm_enable+0x16c>)
    bf5e:	4798      	blx	r3
    bf60:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf64:	2b00      	cmp	r3, #0
    bf66:	d1b7      	bne.n	bed8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    bf68:	683b      	ldr	r3, [r7, #0]
    bf6a:	681b      	ldr	r3, [r3, #0]
    bf6c:	4618      	mov	r0, r3
    bf6e:	4b11      	ldr	r3, [pc, #68]	; (bfb4 <cdcdf_acm_enable+0x168>)
    bf70:	4798      	blx	r3
    bf72:	683b      	ldr	r3, [r7, #0]
    bf74:	685b      	ldr	r3, [r3, #4]
    bf76:	2204      	movs	r2, #4
    bf78:	4619      	mov	r1, r3
    bf7a:	4b0a      	ldr	r3, [pc, #40]	; (bfa4 <cdcdf_acm_enable+0x158>)
    bf7c:	4798      	blx	r3
    bf7e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf84:	3301      	adds	r3, #1
    bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bf8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    bf8e:	2b01      	cmp	r3, #1
    bf90:	f67f af6b 	bls.w	be6a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    bf94:	4b09      	ldr	r3, [pc, #36]	; (bfbc <cdcdf_acm_enable+0x170>)
    bf96:	2201      	movs	r2, #1
    bf98:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    bf9a:	2300      	movs	r3, #0
}
    bf9c:	4618      	mov	r0, r3
    bf9e:	3730      	adds	r7, #48	; 0x30
    bfa0:	46bd      	mov	sp, r7
    bfa2:	bd80      	pop	{r7, pc}
    bfa4:	0000d20d 	.word	0x0000d20d
    bfa8:	0000bde7 	.word	0x0000bde7
    bfac:	00003501 	.word	0x00003501
    bfb0:	000035ed 	.word	0x000035ed
    bfb4:	0000be29 	.word	0x0000be29
    bfb8:	0000d269 	.word	0x0000d269
    bfbc:	20000dc8 	.word	0x20000dc8

0000bfc0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    bfc0:	b580      	push	{r7, lr}
    bfc2:	b088      	sub	sp, #32
    bfc4:	af00      	add	r7, sp, #0
    bfc6:	6078      	str	r0, [r7, #4]
    bfc8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    bfca:	687b      	ldr	r3, [r7, #4]
    bfcc:	689b      	ldr	r3, [r3, #8]
    bfce:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    bfd0:	683b      	ldr	r3, [r7, #0]
    bfd2:	2b00      	cmp	r3, #0
    bfd4:	d00c      	beq.n	bff0 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    bfd6:	683b      	ldr	r3, [r7, #0]
    bfd8:	681b      	ldr	r3, [r3, #0]
    bfda:	795b      	ldrb	r3, [r3, #5]
    bfdc:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    bfde:	7c7b      	ldrb	r3, [r7, #17]
    bfe0:	2b02      	cmp	r3, #2
    bfe2:	d005      	beq.n	bff0 <cdcdf_acm_disable+0x30>
    bfe4:	7c7b      	ldrb	r3, [r7, #17]
    bfe6:	2b0a      	cmp	r3, #10
    bfe8:	d002      	beq.n	bff0 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    bfea:	f06f 0309 	mvn.w	r3, #9
    bfee:	e035      	b.n	c05c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    bff0:	2300      	movs	r3, #0
    bff2:	77fb      	strb	r3, [r7, #31]
    bff4:	e01f      	b.n	c036 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    bff6:	7ffb      	ldrb	r3, [r7, #31]
    bff8:	69ba      	ldr	r2, [r7, #24]
    bffa:	5cd3      	ldrb	r3, [r2, r3]
    bffc:	2bff      	cmp	r3, #255	; 0xff
    bffe:	d016      	beq.n	c02e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c000:	7ffb      	ldrb	r3, [r7, #31]
    c002:	69ba      	ldr	r2, [r7, #24]
    c004:	21ff      	movs	r1, #255	; 0xff
    c006:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c008:	7ffb      	ldrb	r3, [r7, #31]
    c00a:	69ba      	ldr	r2, [r7, #24]
    c00c:	4413      	add	r3, r2
    c00e:	789b      	ldrb	r3, [r3, #2]
    c010:	2bff      	cmp	r3, #255	; 0xff
    c012:	d00d      	beq.n	c030 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c014:	7ffb      	ldrb	r3, [r7, #31]
    c016:	69ba      	ldr	r2, [r7, #24]
    c018:	4413      	add	r3, r2
    c01a:	789b      	ldrb	r3, [r3, #2]
    c01c:	4618      	mov	r0, r3
    c01e:	4b11      	ldr	r3, [pc, #68]	; (c064 <cdcdf_acm_disable+0xa4>)
    c020:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c022:	7ffb      	ldrb	r3, [r7, #31]
    c024:	69ba      	ldr	r2, [r7, #24]
    c026:	4413      	add	r3, r2
    c028:	22ff      	movs	r2, #255	; 0xff
    c02a:	709a      	strb	r2, [r3, #2]
    c02c:	e000      	b.n	c030 <cdcdf_acm_disable+0x70>
			continue;
    c02e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c030:	7ffb      	ldrb	r3, [r7, #31]
    c032:	3301      	adds	r3, #1
    c034:	77fb      	strb	r3, [r7, #31]
    c036:	7ffb      	ldrb	r3, [r7, #31]
    c038:	2b01      	cmp	r3, #1
    c03a:	d9dc      	bls.n	bff6 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c03c:	69bb      	ldr	r3, [r7, #24]
    c03e:	791b      	ldrb	r3, [r3, #4]
    c040:	2bff      	cmp	r3, #255	; 0xff
    c042:	d007      	beq.n	c054 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c044:	69bb      	ldr	r3, [r7, #24]
    c046:	791b      	ldrb	r3, [r3, #4]
    c048:	4618      	mov	r0, r3
    c04a:	4b06      	ldr	r3, [pc, #24]	; (c064 <cdcdf_acm_disable+0xa4>)
    c04c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c04e:	69bb      	ldr	r3, [r7, #24]
    c050:	22ff      	movs	r2, #255	; 0xff
    c052:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c054:	4b04      	ldr	r3, [pc, #16]	; (c068 <cdcdf_acm_disable+0xa8>)
    c056:	2200      	movs	r2, #0
    c058:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c05a:	2300      	movs	r3, #0
}
    c05c:	4618      	mov	r0, r3
    c05e:	3720      	adds	r7, #32
    c060:	46bd      	mov	sp, r7
    c062:	bd80      	pop	{r7, pc}
    c064:	0000359d 	.word	0x0000359d
    c068:	20000dc8 	.word	0x20000dc8

0000c06c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c06c:	b580      	push	{r7, lr}
    c06e:	b084      	sub	sp, #16
    c070:	af00      	add	r7, sp, #0
    c072:	60f8      	str	r0, [r7, #12]
    c074:	460b      	mov	r3, r1
    c076:	607a      	str	r2, [r7, #4]
    c078:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c07a:	7afb      	ldrb	r3, [r7, #11]
    c07c:	2b01      	cmp	r3, #1
    c07e:	d009      	beq.n	c094 <cdcdf_acm_ctrl+0x28>
    c080:	2b02      	cmp	r3, #2
    c082:	d00d      	beq.n	c0a0 <cdcdf_acm_ctrl+0x34>
    c084:	2b00      	cmp	r3, #0
    c086:	d10e      	bne.n	c0a6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c088:	6879      	ldr	r1, [r7, #4]
    c08a:	68f8      	ldr	r0, [r7, #12]
    c08c:	4b09      	ldr	r3, [pc, #36]	; (c0b4 <cdcdf_acm_ctrl+0x48>)
    c08e:	4798      	blx	r3
    c090:	4603      	mov	r3, r0
    c092:	e00a      	b.n	c0aa <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c094:	6879      	ldr	r1, [r7, #4]
    c096:	68f8      	ldr	r0, [r7, #12]
    c098:	4b07      	ldr	r3, [pc, #28]	; (c0b8 <cdcdf_acm_ctrl+0x4c>)
    c09a:	4798      	blx	r3
    c09c:	4603      	mov	r3, r0
    c09e:	e004      	b.n	c0aa <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c0a0:	f06f 031a 	mvn.w	r3, #26
    c0a4:	e001      	b.n	c0aa <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c0a6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c0aa:	4618      	mov	r0, r3
    c0ac:	3710      	adds	r7, #16
    c0ae:	46bd      	mov	sp, r7
    c0b0:	bd80      	pop	{r7, pc}
    c0b2:	bf00      	nop
    c0b4:	0000be4d 	.word	0x0000be4d
    c0b8:	0000bfc1 	.word	0x0000bfc1

0000c0bc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c0bc:	b590      	push	{r4, r7, lr}
    c0be:	b087      	sub	sp, #28
    c0c0:	af00      	add	r7, sp, #0
    c0c2:	4603      	mov	r3, r0
    c0c4:	6039      	str	r1, [r7, #0]
    c0c6:	71fb      	strb	r3, [r7, #7]
    c0c8:	4613      	mov	r3, r2
    c0ca:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c0cc:	683b      	ldr	r3, [r7, #0]
    c0ce:	799a      	ldrb	r2, [r3, #6]
    c0d0:	79db      	ldrb	r3, [r3, #7]
    c0d2:	021b      	lsls	r3, r3, #8
    c0d4:	4313      	orrs	r3, r2
    c0d6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c0d8:	4b2b      	ldr	r3, [pc, #172]	; (c188 <cdcdf_acm_set_req+0xcc>)
    c0da:	4798      	blx	r3
    c0dc:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c0de:	683b      	ldr	r3, [r7, #0]
    c0e0:	785b      	ldrb	r3, [r3, #1]
    c0e2:	2b20      	cmp	r3, #32
    c0e4:	d002      	beq.n	c0ec <cdcdf_acm_set_req+0x30>
    c0e6:	2b22      	cmp	r3, #34	; 0x22
    c0e8:	d034      	beq.n	c154 <cdcdf_acm_set_req+0x98>
    c0ea:	e046      	b.n	c17a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c0ec:	8afb      	ldrh	r3, [r7, #22]
    c0ee:	2b07      	cmp	r3, #7
    c0f0:	d002      	beq.n	c0f8 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c0f2:	f04f 33ff 	mov.w	r3, #4294967295
    c0f6:	e042      	b.n	c17e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c0f8:	79bb      	ldrb	r3, [r7, #6]
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d107      	bne.n	c10e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c0fe:	8afa      	ldrh	r2, [r7, #22]
    c100:	79f8      	ldrb	r0, [r7, #7]
    c102:	2300      	movs	r3, #0
    c104:	6939      	ldr	r1, [r7, #16]
    c106:	4c21      	ldr	r4, [pc, #132]	; (c18c <cdcdf_acm_set_req+0xd0>)
    c108:	47a0      	blx	r4
    c10a:	4603      	mov	r3, r0
    c10c:	e037      	b.n	c17e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c10e:	693a      	ldr	r2, [r7, #16]
    c110:	f107 0308 	add.w	r3, r7, #8
    c114:	6810      	ldr	r0, [r2, #0]
    c116:	6018      	str	r0, [r3, #0]
    c118:	8891      	ldrh	r1, [r2, #4]
    c11a:	7992      	ldrb	r2, [r2, #6]
    c11c:	8099      	strh	r1, [r3, #4]
    c11e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c120:	4b1b      	ldr	r3, [pc, #108]	; (c190 <cdcdf_acm_set_req+0xd4>)
    c122:	681b      	ldr	r3, [r3, #0]
    c124:	2b00      	cmp	r3, #0
    c126:	d008      	beq.n	c13a <cdcdf_acm_set_req+0x7e>
    c128:	4b19      	ldr	r3, [pc, #100]	; (c190 <cdcdf_acm_set_req+0xd4>)
    c12a:	681b      	ldr	r3, [r3, #0]
    c12c:	f107 0208 	add.w	r2, r7, #8
    c130:	4610      	mov	r0, r2
    c132:	4798      	blx	r3
    c134:	4603      	mov	r3, r0
    c136:	2b00      	cmp	r3, #0
    c138:	d00a      	beq.n	c150 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c13a:	4b16      	ldr	r3, [pc, #88]	; (c194 <cdcdf_acm_set_req+0xd8>)
    c13c:	f107 0208 	add.w	r2, r7, #8
    c140:	e892 0003 	ldmia.w	r2, {r0, r1}
    c144:	6018      	str	r0, [r3, #0]
    c146:	3304      	adds	r3, #4
    c148:	8019      	strh	r1, [r3, #0]
    c14a:	3302      	adds	r3, #2
    c14c:	0c0a      	lsrs	r2, r1, #16
    c14e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c150:	2300      	movs	r3, #0
    c152:	e014      	b.n	c17e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c154:	2300      	movs	r3, #0
    c156:	2200      	movs	r2, #0
    c158:	2100      	movs	r1, #0
    c15a:	2000      	movs	r0, #0
    c15c:	4c0b      	ldr	r4, [pc, #44]	; (c18c <cdcdf_acm_set_req+0xd0>)
    c15e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c160:	4b0d      	ldr	r3, [pc, #52]	; (c198 <cdcdf_acm_set_req+0xdc>)
    c162:	681b      	ldr	r3, [r3, #0]
    c164:	2b00      	cmp	r3, #0
    c166:	d006      	beq.n	c176 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c168:	4b0b      	ldr	r3, [pc, #44]	; (c198 <cdcdf_acm_set_req+0xdc>)
    c16a:	681b      	ldr	r3, [r3, #0]
    c16c:	683a      	ldr	r2, [r7, #0]
    c16e:	8852      	ldrh	r2, [r2, #2]
    c170:	b292      	uxth	r2, r2
    c172:	4610      	mov	r0, r2
    c174:	4798      	blx	r3
		}
		return ERR_NONE;
    c176:	2300      	movs	r3, #0
    c178:	e001      	b.n	c17e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c17a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c17e:	4618      	mov	r0, r3
    c180:	371c      	adds	r7, #28
    c182:	46bd      	mov	sp, r7
    c184:	bd90      	pop	{r4, r7, pc}
    c186:	bf00      	nop
    c188:	0000d109 	.word	0x0000d109
    c18c:	0000cf7d 	.word	0x0000cf7d
    c190:	20000ddc 	.word	0x20000ddc
    c194:	20000dd0 	.word	0x20000dd0
    c198:	20000dd8 	.word	0x20000dd8

0000c19c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c19c:	b590      	push	{r4, r7, lr}
    c19e:	b085      	sub	sp, #20
    c1a0:	af00      	add	r7, sp, #0
    c1a2:	4603      	mov	r3, r0
    c1a4:	6039      	str	r1, [r7, #0]
    c1a6:	71fb      	strb	r3, [r7, #7]
    c1a8:	4613      	mov	r3, r2
    c1aa:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c1ac:	683b      	ldr	r3, [r7, #0]
    c1ae:	799a      	ldrb	r2, [r3, #6]
    c1b0:	79db      	ldrb	r3, [r3, #7]
    c1b2:	021b      	lsls	r3, r3, #8
    c1b4:	4313      	orrs	r3, r2
    c1b6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c1b8:	79bb      	ldrb	r3, [r7, #6]
    c1ba:	2b01      	cmp	r3, #1
    c1bc:	d101      	bne.n	c1c2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c1be:	2300      	movs	r3, #0
    c1c0:	e013      	b.n	c1ea <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c1c2:	683b      	ldr	r3, [r7, #0]
    c1c4:	785b      	ldrb	r3, [r3, #1]
    c1c6:	2b21      	cmp	r3, #33	; 0x21
    c1c8:	d10d      	bne.n	c1e6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c1ca:	89fb      	ldrh	r3, [r7, #14]
    c1cc:	2b07      	cmp	r3, #7
    c1ce:	d002      	beq.n	c1d6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c1d0:	f04f 33ff 	mov.w	r3, #4294967295
    c1d4:	e009      	b.n	c1ea <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c1d6:	89fa      	ldrh	r2, [r7, #14]
    c1d8:	79f8      	ldrb	r0, [r7, #7]
    c1da:	2300      	movs	r3, #0
    c1dc:	4905      	ldr	r1, [pc, #20]	; (c1f4 <cdcdf_acm_get_req+0x58>)
    c1de:	4c06      	ldr	r4, [pc, #24]	; (c1f8 <cdcdf_acm_get_req+0x5c>)
    c1e0:	47a0      	blx	r4
    c1e2:	4603      	mov	r3, r0
    c1e4:	e001      	b.n	c1ea <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c1e6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c1ea:	4618      	mov	r0, r3
    c1ec:	3714      	adds	r7, #20
    c1ee:	46bd      	mov	sp, r7
    c1f0:	bd90      	pop	{r4, r7, pc}
    c1f2:	bf00      	nop
    c1f4:	20000dd0 	.word	0x20000dd0
    c1f8:	0000cf7d 	.word	0x0000cf7d

0000c1fc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b082      	sub	sp, #8
    c200:	af00      	add	r7, sp, #0
    c202:	4603      	mov	r3, r0
    c204:	6039      	str	r1, [r7, #0]
    c206:	71fb      	strb	r3, [r7, #7]
    c208:	4613      	mov	r3, r2
    c20a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c20c:	683b      	ldr	r3, [r7, #0]
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	095b      	lsrs	r3, r3, #5
    c212:	b2db      	uxtb	r3, r3
    c214:	f003 0303 	and.w	r3, r3, #3
    c218:	2b01      	cmp	r3, #1
    c21a:	d002      	beq.n	c222 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c21c:	f06f 0309 	mvn.w	r3, #9
    c220:	e026      	b.n	c270 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c222:	683b      	ldr	r3, [r7, #0]
    c224:	889b      	ldrh	r3, [r3, #4]
    c226:	b29a      	uxth	r2, r3
    c228:	4b13      	ldr	r3, [pc, #76]	; (c278 <cdcdf_acm_req+0x7c>)
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	b29b      	uxth	r3, r3
    c22e:	429a      	cmp	r2, r3
    c230:	d007      	beq.n	c242 <cdcdf_acm_req+0x46>
    c232:	683b      	ldr	r3, [r7, #0]
    c234:	889b      	ldrh	r3, [r3, #4]
    c236:	b29a      	uxth	r2, r3
    c238:	4b0f      	ldr	r3, [pc, #60]	; (c278 <cdcdf_acm_req+0x7c>)
    c23a:	785b      	ldrb	r3, [r3, #1]
    c23c:	b29b      	uxth	r3, r3
    c23e:	429a      	cmp	r2, r3
    c240:	d114      	bne.n	c26c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c242:	683b      	ldr	r3, [r7, #0]
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	b25b      	sxtb	r3, r3
    c248:	2b00      	cmp	r3, #0
    c24a:	da07      	bge.n	c25c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c24c:	79ba      	ldrb	r2, [r7, #6]
    c24e:	79fb      	ldrb	r3, [r7, #7]
    c250:	6839      	ldr	r1, [r7, #0]
    c252:	4618      	mov	r0, r3
    c254:	4b09      	ldr	r3, [pc, #36]	; (c27c <cdcdf_acm_req+0x80>)
    c256:	4798      	blx	r3
    c258:	4603      	mov	r3, r0
    c25a:	e009      	b.n	c270 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c25c:	79ba      	ldrb	r2, [r7, #6]
    c25e:	79fb      	ldrb	r3, [r7, #7]
    c260:	6839      	ldr	r1, [r7, #0]
    c262:	4618      	mov	r0, r3
    c264:	4b06      	ldr	r3, [pc, #24]	; (c280 <cdcdf_acm_req+0x84>)
    c266:	4798      	blx	r3
    c268:	4603      	mov	r3, r0
    c26a:	e001      	b.n	c270 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c26c:	f06f 0309 	mvn.w	r3, #9
	}
}
    c270:	4618      	mov	r0, r3
    c272:	3708      	adds	r7, #8
    c274:	46bd      	mov	sp, r7
    c276:	bd80      	pop	{r7, pc}
    c278:	20000dc8 	.word	0x20000dc8
    c27c:	0000c19d 	.word	0x0000c19d
    c280:	0000c0bd 	.word	0x0000c0bd

0000c284 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c284:	b580      	push	{r7, lr}
    c286:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c288:	4b0b      	ldr	r3, [pc, #44]	; (c2b8 <cdcdf_acm_init+0x34>)
    c28a:	4798      	blx	r3
    c28c:	4603      	mov	r3, r0
    c28e:	2b01      	cmp	r3, #1
    c290:	d902      	bls.n	c298 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c292:	f06f 0310 	mvn.w	r3, #16
    c296:	e00d      	b.n	c2b4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c298:	4b08      	ldr	r3, [pc, #32]	; (c2bc <cdcdf_acm_init+0x38>)
    c29a:	4a09      	ldr	r2, [pc, #36]	; (c2c0 <cdcdf_acm_init+0x3c>)
    c29c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c29e:	4b07      	ldr	r3, [pc, #28]	; (c2bc <cdcdf_acm_init+0x38>)
    c2a0:	4a08      	ldr	r2, [pc, #32]	; (c2c4 <cdcdf_acm_init+0x40>)
    c2a2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c2a4:	4805      	ldr	r0, [pc, #20]	; (c2bc <cdcdf_acm_init+0x38>)
    c2a6:	4b08      	ldr	r3, [pc, #32]	; (c2c8 <cdcdf_acm_init+0x44>)
    c2a8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c2aa:	4908      	ldr	r1, [pc, #32]	; (c2cc <cdcdf_acm_init+0x48>)
    c2ac:	2001      	movs	r0, #1
    c2ae:	4b08      	ldr	r3, [pc, #32]	; (c2d0 <cdcdf_acm_init+0x4c>)
    c2b0:	4798      	blx	r3
	return ERR_NONE;
    c2b2:	2300      	movs	r3, #0
}
    c2b4:	4618      	mov	r0, r3
    c2b6:	bd80      	pop	{r7, pc}
    c2b8:	0000d121 	.word	0x0000d121
    c2bc:	20000dbc 	.word	0x20000dbc
    c2c0:	0000c06d 	.word	0x0000c06d
    c2c4:	20000dc8 	.word	0x20000dc8
    c2c8:	0000d089 	.word	0x0000d089
    c2cc:	20000208 	.word	0x20000208
    c2d0:	0000cfb9 	.word	0x0000cfb9

0000c2d4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c2d4:	b590      	push	{r4, r7, lr}
    c2d6:	b083      	sub	sp, #12
    c2d8:	af00      	add	r7, sp, #0
    c2da:	6078      	str	r0, [r7, #4]
    c2dc:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c2de:	4b0b      	ldr	r3, [pc, #44]	; (c30c <cdcdf_acm_read+0x38>)
    c2e0:	4798      	blx	r3
    c2e2:	4603      	mov	r3, r0
    c2e4:	f083 0301 	eor.w	r3, r3, #1
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d002      	beq.n	c2f4 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c2ee:	f06f 0310 	mvn.w	r3, #16
    c2f2:	e007      	b.n	c304 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c2f4:	4b06      	ldr	r3, [pc, #24]	; (c310 <cdcdf_acm_read+0x3c>)
    c2f6:	7918      	ldrb	r0, [r3, #4]
    c2f8:	2300      	movs	r3, #0
    c2fa:	683a      	ldr	r2, [r7, #0]
    c2fc:	6879      	ldr	r1, [r7, #4]
    c2fe:	4c05      	ldr	r4, [pc, #20]	; (c314 <cdcdf_acm_read+0x40>)
    c300:	47a0      	blx	r4
    c302:	4603      	mov	r3, r0
}
    c304:	4618      	mov	r0, r3
    c306:	370c      	adds	r7, #12
    c308:	46bd      	mov	sp, r7
    c30a:	bd90      	pop	{r4, r7, pc}
    c30c:	0000c3f9 	.word	0x0000c3f9
    c310:	20000dc8 	.word	0x20000dc8
    c314:	0000cf7d 	.word	0x0000cf7d

0000c318 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c318:	b590      	push	{r4, r7, lr}
    c31a:	b083      	sub	sp, #12
    c31c:	af00      	add	r7, sp, #0
    c31e:	6078      	str	r0, [r7, #4]
    c320:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c322:	4b0b      	ldr	r3, [pc, #44]	; (c350 <cdcdf_acm_write+0x38>)
    c324:	4798      	blx	r3
    c326:	4603      	mov	r3, r0
    c328:	f083 0301 	eor.w	r3, r3, #1
    c32c:	b2db      	uxtb	r3, r3
    c32e:	2b00      	cmp	r3, #0
    c330:	d002      	beq.n	c338 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c332:	f06f 0310 	mvn.w	r3, #16
    c336:	e007      	b.n	c348 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c338:	4b06      	ldr	r3, [pc, #24]	; (c354 <cdcdf_acm_write+0x3c>)
    c33a:	78d8      	ldrb	r0, [r3, #3]
    c33c:	2301      	movs	r3, #1
    c33e:	683a      	ldr	r2, [r7, #0]
    c340:	6879      	ldr	r1, [r7, #4]
    c342:	4c05      	ldr	r4, [pc, #20]	; (c358 <cdcdf_acm_write+0x40>)
    c344:	47a0      	blx	r4
    c346:	4603      	mov	r3, r0
}
    c348:	4618      	mov	r0, r3
    c34a:	370c      	adds	r7, #12
    c34c:	46bd      	mov	sp, r7
    c34e:	bd90      	pop	{r4, r7, pc}
    c350:	0000c3f9 	.word	0x0000c3f9
    c354:	20000dc8 	.word	0x20000dc8
    c358:	0000cf7d 	.word	0x0000cf7d

0000c35c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c35c:	b580      	push	{r7, lr}
    c35e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c360:	4b05      	ldr	r3, [pc, #20]	; (c378 <cdcdf_acm_stop_xfer+0x1c>)
    c362:	78db      	ldrb	r3, [r3, #3]
    c364:	4618      	mov	r0, r3
    c366:	4b05      	ldr	r3, [pc, #20]	; (c37c <cdcdf_acm_stop_xfer+0x20>)
    c368:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c36a:	4b03      	ldr	r3, [pc, #12]	; (c378 <cdcdf_acm_stop_xfer+0x1c>)
    c36c:	791b      	ldrb	r3, [r3, #4]
    c36e:	4618      	mov	r0, r3
    c370:	4b02      	ldr	r3, [pc, #8]	; (c37c <cdcdf_acm_stop_xfer+0x20>)
    c372:	4798      	blx	r3
}
    c374:	bf00      	nop
    c376:	bd80      	pop	{r7, pc}
    c378:	20000dc8 	.word	0x20000dc8
    c37c:	000037c5 	.word	0x000037c5

0000c380 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c380:	b580      	push	{r7, lr}
    c382:	b082      	sub	sp, #8
    c384:	af00      	add	r7, sp, #0
    c386:	4603      	mov	r3, r0
    c388:	6039      	str	r1, [r7, #0]
    c38a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c38c:	79fb      	ldrb	r3, [r7, #7]
    c38e:	2b03      	cmp	r3, #3
    c390:	d822      	bhi.n	c3d8 <cdcdf_acm_register_callback+0x58>
    c392:	a201      	add	r2, pc, #4	; (adr r2, c398 <cdcdf_acm_register_callback+0x18>)
    c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c398:	0000c3a9 	.word	0x0000c3a9
    c39c:	0000c3b9 	.word	0x0000c3b9
    c3a0:	0000c3c9 	.word	0x0000c3c9
    c3a4:	0000c3d1 	.word	0x0000c3d1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c3a8:	4b0f      	ldr	r3, [pc, #60]	; (c3e8 <cdcdf_acm_register_callback+0x68>)
    c3aa:	791b      	ldrb	r3, [r3, #4]
    c3ac:	683a      	ldr	r2, [r7, #0]
    c3ae:	2102      	movs	r1, #2
    c3b0:	4618      	mov	r0, r3
    c3b2:	4b0e      	ldr	r3, [pc, #56]	; (c3ec <cdcdf_acm_register_callback+0x6c>)
    c3b4:	4798      	blx	r3
		break;
    c3b6:	e012      	b.n	c3de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c3b8:	4b0b      	ldr	r3, [pc, #44]	; (c3e8 <cdcdf_acm_register_callback+0x68>)
    c3ba:	78db      	ldrb	r3, [r3, #3]
    c3bc:	683a      	ldr	r2, [r7, #0]
    c3be:	2102      	movs	r1, #2
    c3c0:	4618      	mov	r0, r3
    c3c2:	4b0a      	ldr	r3, [pc, #40]	; (c3ec <cdcdf_acm_register_callback+0x6c>)
    c3c4:	4798      	blx	r3
		break;
    c3c6:	e00a      	b.n	c3de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c3c8:	4a09      	ldr	r2, [pc, #36]	; (c3f0 <cdcdf_acm_register_callback+0x70>)
    c3ca:	683b      	ldr	r3, [r7, #0]
    c3cc:	6013      	str	r3, [r2, #0]
		break;
    c3ce:	e006      	b.n	c3de <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c3d0:	4a08      	ldr	r2, [pc, #32]	; (c3f4 <cdcdf_acm_register_callback+0x74>)
    c3d2:	683b      	ldr	r3, [r7, #0]
    c3d4:	6013      	str	r3, [r2, #0]
		break;
    c3d6:	e002      	b.n	c3de <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c3d8:	f06f 030c 	mvn.w	r3, #12
    c3dc:	e000      	b.n	c3e0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c3de:	2300      	movs	r3, #0
}
    c3e0:	4618      	mov	r0, r3
    c3e2:	3708      	adds	r7, #8
    c3e4:	46bd      	mov	sp, r7
    c3e6:	bd80      	pop	{r7, pc}
    c3e8:	20000dc8 	.word	0x20000dc8
    c3ec:	000038f1 	.word	0x000038f1
    c3f0:	20000ddc 	.word	0x20000ddc
    c3f4:	20000dd8 	.word	0x20000dd8

0000c3f8 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c3f8:	b480      	push	{r7}
    c3fa:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c3fc:	4b03      	ldr	r3, [pc, #12]	; (c40c <cdcdf_acm_is_enabled+0x14>)
    c3fe:	795b      	ldrb	r3, [r3, #5]
}
    c400:	4618      	mov	r0, r3
    c402:	46bd      	mov	sp, r7
    c404:	f85d 7b04 	ldr.w	r7, [sp], #4
    c408:	4770      	bx	lr
    c40a:	bf00      	nop
    c40c:	20000dc8 	.word	0x20000dc8

0000c410 <usb_get_u16>:
{
    c410:	b480      	push	{r7}
    c412:	b083      	sub	sp, #12
    c414:	af00      	add	r7, sp, #0
    c416:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c418:	687b      	ldr	r3, [r7, #4]
    c41a:	781b      	ldrb	r3, [r3, #0]
    c41c:	b29a      	uxth	r2, r3
    c41e:	687b      	ldr	r3, [r7, #4]
    c420:	3301      	adds	r3, #1
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	b29b      	uxth	r3, r3
    c426:	021b      	lsls	r3, r3, #8
    c428:	b29b      	uxth	r3, r3
    c42a:	4413      	add	r3, r2
    c42c:	b29b      	uxth	r3, r3
}
    c42e:	4618      	mov	r0, r3
    c430:	370c      	adds	r7, #12
    c432:	46bd      	mov	sp, r7
    c434:	f85d 7b04 	ldr.w	r7, [sp], #4
    c438:	4770      	bx	lr

0000c43a <usb_desc_len>:
{
    c43a:	b480      	push	{r7}
    c43c:	b083      	sub	sp, #12
    c43e:	af00      	add	r7, sp, #0
    c440:	6078      	str	r0, [r7, #4]
	return desc[0];
    c442:	687b      	ldr	r3, [r7, #4]
    c444:	781b      	ldrb	r3, [r3, #0]
}
    c446:	4618      	mov	r0, r3
    c448:	370c      	adds	r7, #12
    c44a:	46bd      	mov	sp, r7
    c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c450:	4770      	bx	lr
	...

0000c454 <usb_desc_next>:
{
    c454:	b580      	push	{r7, lr}
    c456:	b082      	sub	sp, #8
    c458:	af00      	add	r7, sp, #0
    c45a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c45c:	6878      	ldr	r0, [r7, #4]
    c45e:	4b05      	ldr	r3, [pc, #20]	; (c474 <usb_desc_next+0x20>)
    c460:	4798      	blx	r3
    c462:	4603      	mov	r3, r0
    c464:	461a      	mov	r2, r3
    c466:	687b      	ldr	r3, [r7, #4]
    c468:	4413      	add	r3, r2
}
    c46a:	4618      	mov	r0, r3
    c46c:	3708      	adds	r7, #8
    c46e:	46bd      	mov	sp, r7
    c470:	bd80      	pop	{r7, pc}
    c472:	bf00      	nop
    c474:	0000c43b 	.word	0x0000c43b

0000c478 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c478:	b580      	push	{r7, lr}
    c47a:	b082      	sub	sp, #8
    c47c:	af00      	add	r7, sp, #0
    c47e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	3302      	adds	r3, #2
    c484:	4618      	mov	r0, r3
    c486:	4b03      	ldr	r3, [pc, #12]	; (c494 <usb_cfg_desc_total_len+0x1c>)
    c488:	4798      	blx	r3
    c48a:	4603      	mov	r3, r0
}
    c48c:	4618      	mov	r0, r3
    c48e:	3708      	adds	r7, #8
    c490:	46bd      	mov	sp, r7
    c492:	bd80      	pop	{r7, pc}
    c494:	0000c411 	.word	0x0000c411

0000c498 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c498:	b590      	push	{r4, r7, lr}
    c49a:	b085      	sub	sp, #20
    c49c:	af00      	add	r7, sp, #0
    c49e:	4603      	mov	r3, r0
    c4a0:	6039      	str	r1, [r7, #0]
    c4a2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c4a4:	2300      	movs	r3, #0
    c4a6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c4a8:	683b      	ldr	r3, [r7, #0]
    c4aa:	799a      	ldrb	r2, [r3, #6]
    c4ac:	79db      	ldrb	r3, [r3, #7]
    c4ae:	021b      	lsls	r3, r3, #8
    c4b0:	4313      	orrs	r3, r2
    c4b2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c4b4:	897b      	ldrh	r3, [r7, #10]
    c4b6:	2b12      	cmp	r3, #18
    c4b8:	d901      	bls.n	c4be <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c4ba:	2312      	movs	r3, #18
    c4bc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c4be:	68fb      	ldr	r3, [r7, #12]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d10a      	bne.n	c4da <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c4c4:	4b0f      	ldr	r3, [pc, #60]	; (c504 <usbdc_get_dev_desc+0x6c>)
    c4c6:	681b      	ldr	r3, [r3, #0]
    c4c8:	6818      	ldr	r0, [r3, #0]
    c4ca:	4b0e      	ldr	r3, [pc, #56]	; (c504 <usbdc_get_dev_desc+0x6c>)
    c4cc:	681b      	ldr	r3, [r3, #0]
    c4ce:	685b      	ldr	r3, [r3, #4]
    c4d0:	2201      	movs	r2, #1
    c4d2:	4619      	mov	r1, r3
    c4d4:	4b0c      	ldr	r3, [pc, #48]	; (c508 <usbdc_get_dev_desc+0x70>)
    c4d6:	4798      	blx	r3
    c4d8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c4da:	68fb      	ldr	r3, [r7, #12]
    c4dc:	2b00      	cmp	r3, #0
    c4de:	d101      	bne.n	c4e4 <usbdc_get_dev_desc+0x4c>
		return false;
    c4e0:	2300      	movs	r3, #0
    c4e2:	e00b      	b.n	c4fc <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c4e4:	897a      	ldrh	r2, [r7, #10]
    c4e6:	79f8      	ldrb	r0, [r7, #7]
    c4e8:	2300      	movs	r3, #0
    c4ea:	68f9      	ldr	r1, [r7, #12]
    c4ec:	4c07      	ldr	r4, [pc, #28]	; (c50c <usbdc_get_dev_desc+0x74>)
    c4ee:	47a0      	blx	r4
    c4f0:	4603      	mov	r3, r0
    c4f2:	2b00      	cmp	r3, #0
    c4f4:	d001      	beq.n	c4fa <usbdc_get_dev_desc+0x62>
		return false;
    c4f6:	2300      	movs	r3, #0
    c4f8:	e000      	b.n	c4fc <usbdc_get_dev_desc+0x64>
	}
	return true;
    c4fa:	2301      	movs	r3, #1
}
    c4fc:	4618      	mov	r0, r3
    c4fe:	3714      	adds	r7, #20
    c500:	46bd      	mov	sp, r7
    c502:	bd90      	pop	{r4, r7, pc}
    c504:	20000de0 	.word	0x20000de0
    c508:	0000d20d 	.word	0x0000d20d
    c50c:	0000cf7d 	.word	0x0000cf7d

0000c510 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c510:	b590      	push	{r4, r7, lr}
    c512:	b087      	sub	sp, #28
    c514:	af00      	add	r7, sp, #0
    c516:	4603      	mov	r3, r0
    c518:	6039      	str	r1, [r7, #0]
    c51a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c51c:	2300      	movs	r3, #0
    c51e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c520:	683b      	ldr	r3, [r7, #0]
    c522:	799a      	ldrb	r2, [r3, #6]
    c524:	79db      	ldrb	r3, [r3, #7]
    c526:	021b      	lsls	r3, r3, #8
    c528:	4313      	orrs	r3, r2
    c52a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c52c:	683b      	ldr	r3, [r7, #0]
    c52e:	885b      	ldrh	r3, [r3, #2]
    c530:	b29b      	uxth	r3, r3
    c532:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c534:	8a7a      	ldrh	r2, [r7, #18]
    c536:	4b1e      	ldr	r3, [pc, #120]	; (c5b0 <usbdc_get_cfg_desc+0xa0>)
    c538:	7f1b      	ldrb	r3, [r3, #28]
    c53a:	3b01      	subs	r3, #1
    c53c:	4013      	ands	r3, r2
    c53e:	2b00      	cmp	r3, #0
    c540:	bf0c      	ite	eq
    c542:	2301      	moveq	r3, #1
    c544:	2300      	movne	r3, #0
    c546:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c548:	697b      	ldr	r3, [r7, #20]
    c54a:	2b00      	cmp	r3, #0
    c54c:	d10c      	bne.n	c568 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c54e:	4b18      	ldr	r3, [pc, #96]	; (c5b0 <usbdc_get_cfg_desc+0xa0>)
    c550:	681b      	ldr	r3, [r3, #0]
    c552:	6818      	ldr	r0, [r3, #0]
    c554:	4b16      	ldr	r3, [pc, #88]	; (c5b0 <usbdc_get_cfg_desc+0xa0>)
    c556:	681b      	ldr	r3, [r3, #0]
    c558:	6859      	ldr	r1, [r3, #4]
    c55a:	7c3b      	ldrb	r3, [r7, #16]
    c55c:	3301      	adds	r3, #1
    c55e:	b2db      	uxtb	r3, r3
    c560:	461a      	mov	r2, r3
    c562:	4b14      	ldr	r3, [pc, #80]	; (c5b4 <usbdc_get_cfg_desc+0xa4>)
    c564:	4798      	blx	r3
    c566:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c568:	697b      	ldr	r3, [r7, #20]
    c56a:	2b00      	cmp	r3, #0
    c56c:	d101      	bne.n	c572 <usbdc_get_cfg_desc+0x62>
		return false;
    c56e:	2300      	movs	r3, #0
    c570:	e019      	b.n	c5a6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c572:	6978      	ldr	r0, [r7, #20]
    c574:	4b10      	ldr	r3, [pc, #64]	; (c5b8 <usbdc_get_cfg_desc+0xa8>)
    c576:	4798      	blx	r3
    c578:	4603      	mov	r3, r0
    c57a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c57c:	8a7a      	ldrh	r2, [r7, #18]
    c57e:	89fb      	ldrh	r3, [r7, #14]
    c580:	429a      	cmp	r2, r3
    c582:	d802      	bhi.n	c58a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c584:	2300      	movs	r3, #0
    c586:	747b      	strb	r3, [r7, #17]
    c588:	e001      	b.n	c58e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c58a:	89fb      	ldrh	r3, [r7, #14]
    c58c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c58e:	8a7a      	ldrh	r2, [r7, #18]
    c590:	7c7b      	ldrb	r3, [r7, #17]
    c592:	79f8      	ldrb	r0, [r7, #7]
    c594:	6979      	ldr	r1, [r7, #20]
    c596:	4c09      	ldr	r4, [pc, #36]	; (c5bc <usbdc_get_cfg_desc+0xac>)
    c598:	47a0      	blx	r4
    c59a:	4603      	mov	r3, r0
    c59c:	2b00      	cmp	r3, #0
    c59e:	d001      	beq.n	c5a4 <usbdc_get_cfg_desc+0x94>
		return false;
    c5a0:	2300      	movs	r3, #0
    c5a2:	e000      	b.n	c5a6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c5a4:	2301      	movs	r3, #1
}
    c5a6:	4618      	mov	r0, r3
    c5a8:	371c      	adds	r7, #28
    c5aa:	46bd      	mov	sp, r7
    c5ac:	bd90      	pop	{r4, r7, pc}
    c5ae:	bf00      	nop
    c5b0:	20000de0 	.word	0x20000de0
    c5b4:	0000d2cd 	.word	0x0000d2cd
    c5b8:	0000c479 	.word	0x0000c479
    c5bc:	0000cf7d 	.word	0x0000cf7d

0000c5c0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c5c0:	b590      	push	{r4, r7, lr}
    c5c2:	b085      	sub	sp, #20
    c5c4:	af00      	add	r7, sp, #0
    c5c6:	4603      	mov	r3, r0
    c5c8:	6039      	str	r1, [r7, #0]
    c5ca:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c5cc:	683b      	ldr	r3, [r7, #0]
    c5ce:	799a      	ldrb	r2, [r3, #6]
    c5d0:	79db      	ldrb	r3, [r3, #7]
    c5d2:	021b      	lsls	r3, r3, #8
    c5d4:	4313      	orrs	r3, r2
    c5d6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c5d8:	683b      	ldr	r3, [r7, #0]
    c5da:	885b      	ldrh	r3, [r3, #2]
    c5dc:	b29b      	uxth	r3, r3
    c5de:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c5e0:	89fa      	ldrh	r2, [r7, #14]
    c5e2:	4b1a      	ldr	r3, [pc, #104]	; (c64c <usbdc_get_str_desc+0x8c>)
    c5e4:	7f1b      	ldrb	r3, [r3, #28]
    c5e6:	3b01      	subs	r3, #1
    c5e8:	4013      	ands	r3, r2
    c5ea:	2b00      	cmp	r3, #0
    c5ec:	bf0c      	ite	eq
    c5ee:	2301      	moveq	r3, #1
    c5f0:	2300      	movne	r3, #0
    c5f2:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c5f4:	4b15      	ldr	r3, [pc, #84]	; (c64c <usbdc_get_str_desc+0x8c>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	6818      	ldr	r0, [r3, #0]
    c5fa:	4b14      	ldr	r3, [pc, #80]	; (c64c <usbdc_get_str_desc+0x8c>)
    c5fc:	681b      	ldr	r3, [r3, #0]
    c5fe:	685b      	ldr	r3, [r3, #4]
    c600:	7b3a      	ldrb	r2, [r7, #12]
    c602:	4619      	mov	r1, r3
    c604:	4b12      	ldr	r3, [pc, #72]	; (c650 <usbdc_get_str_desc+0x90>)
    c606:	4798      	blx	r3
    c608:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c60a:	68bb      	ldr	r3, [r7, #8]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d101      	bne.n	c614 <usbdc_get_str_desc+0x54>
		return false;
    c610:	2300      	movs	r3, #0
    c612:	e017      	b.n	c644 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c614:	68bb      	ldr	r3, [r7, #8]
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	b29b      	uxth	r3, r3
    c61a:	89fa      	ldrh	r2, [r7, #14]
    c61c:	429a      	cmp	r2, r3
    c61e:	d802      	bhi.n	c626 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c620:	2300      	movs	r3, #0
    c622:	737b      	strb	r3, [r7, #13]
    c624:	e002      	b.n	c62c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c626:	68bb      	ldr	r3, [r7, #8]
    c628:	781b      	ldrb	r3, [r3, #0]
    c62a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c62c:	89fa      	ldrh	r2, [r7, #14]
    c62e:	7b7b      	ldrb	r3, [r7, #13]
    c630:	79f8      	ldrb	r0, [r7, #7]
    c632:	68b9      	ldr	r1, [r7, #8]
    c634:	4c07      	ldr	r4, [pc, #28]	; (c654 <usbdc_get_str_desc+0x94>)
    c636:	47a0      	blx	r4
    c638:	4603      	mov	r3, r0
    c63a:	2b00      	cmp	r3, #0
    c63c:	d001      	beq.n	c642 <usbdc_get_str_desc+0x82>
		return false;
    c63e:	2300      	movs	r3, #0
    c640:	e000      	b.n	c644 <usbdc_get_str_desc+0x84>
	}
	return true;
    c642:	2301      	movs	r3, #1
}
    c644:	4618      	mov	r0, r3
    c646:	3714      	adds	r7, #20
    c648:	46bd      	mov	sp, r7
    c64a:	bd90      	pop	{r4, r7, pc}
    c64c:	20000de0 	.word	0x20000de0
    c650:	0000d345 	.word	0x0000d345
    c654:	0000cf7d 	.word	0x0000cf7d

0000c658 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c658:	b580      	push	{r7, lr}
    c65a:	b084      	sub	sp, #16
    c65c:	af00      	add	r7, sp, #0
    c65e:	4603      	mov	r3, r0
    c660:	6039      	str	r1, [r7, #0]
    c662:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	885b      	ldrh	r3, [r3, #2]
    c668:	b29b      	uxth	r3, r3
    c66a:	0a1b      	lsrs	r3, r3, #8
    c66c:	b29b      	uxth	r3, r3
    c66e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c670:	7bfb      	ldrb	r3, [r7, #15]
    c672:	2b02      	cmp	r3, #2
    c674:	d00d      	beq.n	c692 <usbdc_get_desc_req+0x3a>
    c676:	2b03      	cmp	r3, #3
    c678:	d012      	beq.n	c6a0 <usbdc_get_desc_req+0x48>
    c67a:	2b01      	cmp	r3, #1
    c67c:	d002      	beq.n	c684 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c67e:	bf00      	nop
	}
	return false;
    c680:	2300      	movs	r3, #0
    c682:	e013      	b.n	c6ac <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c684:	79fb      	ldrb	r3, [r7, #7]
    c686:	6839      	ldr	r1, [r7, #0]
    c688:	4618      	mov	r0, r3
    c68a:	4b0a      	ldr	r3, [pc, #40]	; (c6b4 <usbdc_get_desc_req+0x5c>)
    c68c:	4798      	blx	r3
    c68e:	4603      	mov	r3, r0
    c690:	e00c      	b.n	c6ac <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c692:	79fb      	ldrb	r3, [r7, #7]
    c694:	6839      	ldr	r1, [r7, #0]
    c696:	4618      	mov	r0, r3
    c698:	4b07      	ldr	r3, [pc, #28]	; (c6b8 <usbdc_get_desc_req+0x60>)
    c69a:	4798      	blx	r3
    c69c:	4603      	mov	r3, r0
    c69e:	e005      	b.n	c6ac <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c6a0:	79fb      	ldrb	r3, [r7, #7]
    c6a2:	6839      	ldr	r1, [r7, #0]
    c6a4:	4618      	mov	r0, r3
    c6a6:	4b05      	ldr	r3, [pc, #20]	; (c6bc <usbdc_get_desc_req+0x64>)
    c6a8:	4798      	blx	r3
    c6aa:	4603      	mov	r3, r0
}
    c6ac:	4618      	mov	r0, r3
    c6ae:	3710      	adds	r7, #16
    c6b0:	46bd      	mov	sp, r7
    c6b2:	bd80      	pop	{r7, pc}
    c6b4:	0000c499 	.word	0x0000c499
    c6b8:	0000c511 	.word	0x0000c511
    c6bc:	0000c5c1 	.word	0x0000c5c1

0000c6c0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c6c0:	b590      	push	{r4, r7, lr}
    c6c2:	b085      	sub	sp, #20
    c6c4:	af00      	add	r7, sp, #0
    c6c6:	4603      	mov	r3, r0
    c6c8:	6039      	str	r1, [r7, #0]
    c6ca:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c6cc:	683b      	ldr	r3, [r7, #0]
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	f003 031f 	and.w	r3, r3, #31
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	db1b      	blt.n	c710 <usbdc_get_status_req+0x50>
    c6d8:	2b01      	cmp	r3, #1
    c6da:	dd02      	ble.n	c6e2 <usbdc_get_status_req+0x22>
    c6dc:	2b02      	cmp	r3, #2
    c6de:	d003      	beq.n	c6e8 <usbdc_get_status_req+0x28>
    c6e0:	e016      	b.n	c710 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c6e2:	2300      	movs	r3, #0
    c6e4:	60fb      	str	r3, [r7, #12]
		break;
    c6e6:	e015      	b.n	c714 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c6e8:	683b      	ldr	r3, [r7, #0]
    c6ea:	889b      	ldrh	r3, [r3, #4]
    c6ec:	b29b      	uxth	r3, r3
    c6ee:	b2db      	uxtb	r3, r3
    c6f0:	2102      	movs	r1, #2
    c6f2:	4618      	mov	r0, r3
    c6f4:	4b0f      	ldr	r3, [pc, #60]	; (c734 <usbdc_get_status_req+0x74>)
    c6f6:	4798      	blx	r3
    c6f8:	4603      	mov	r3, r0
    c6fa:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    c6fc:	68fb      	ldr	r3, [r7, #12]
    c6fe:	2b00      	cmp	r3, #0
    c700:	da01      	bge.n	c706 <usbdc_get_status_req+0x46>
			return false;
    c702:	2300      	movs	r3, #0
    c704:	e012      	b.n	c72c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    c706:	68fb      	ldr	r3, [r7, #12]
    c708:	f003 0301 	and.w	r3, r3, #1
    c70c:	60fb      	str	r3, [r7, #12]
		break;
    c70e:	e001      	b.n	c714 <usbdc_get_status_req+0x54>
	default:
		return false;
    c710:	2300      	movs	r3, #0
    c712:	e00b      	b.n	c72c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    c714:	4b08      	ldr	r3, [pc, #32]	; (c738 <usbdc_get_status_req+0x78>)
    c716:	695b      	ldr	r3, [r3, #20]
    c718:	89ba      	ldrh	r2, [r7, #12]
    c71a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    c71c:	4b06      	ldr	r3, [pc, #24]	; (c738 <usbdc_get_status_req+0x78>)
    c71e:	6959      	ldr	r1, [r3, #20]
    c720:	79f8      	ldrb	r0, [r7, #7]
    c722:	2300      	movs	r3, #0
    c724:	2202      	movs	r2, #2
    c726:	4c05      	ldr	r4, [pc, #20]	; (c73c <usbdc_get_status_req+0x7c>)
    c728:	47a0      	blx	r4
	return true;
    c72a:	2301      	movs	r3, #1
}
    c72c:	4618      	mov	r0, r3
    c72e:	3714      	adds	r7, #20
    c730:	46bd      	mov	sp, r7
    c732:	bd90      	pop	{r4, r7, pc}
    c734:	0000389d 	.word	0x0000389d
    c738:	20000de0 	.word	0x20000de0
    c73c:	0000cf7d 	.word	0x0000cf7d

0000c740 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    c740:	b590      	push	{r4, r7, lr}
    c742:	b085      	sub	sp, #20
    c744:	af00      	add	r7, sp, #0
    c746:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c748:	4b1f      	ldr	r3, [pc, #124]	; (c7c8 <usbdc_get_interface+0x88>)
    c74a:	691b      	ldr	r3, [r3, #16]
    c74c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c74e:	4b1e      	ldr	r3, [pc, #120]	; (c7c8 <usbdc_get_interface+0x88>)
    c750:	7f5b      	ldrb	r3, [r3, #29]
    c752:	461a      	mov	r2, r3
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	889b      	ldrh	r3, [r3, #4]
    c758:	b29b      	uxth	r3, r3
    c75a:	fa42 f303 	asr.w	r3, r2, r3
    c75e:	f003 0301 	and.w	r3, r3, #1
    c762:	2b00      	cmp	r3, #0
    c764:	d128      	bne.n	c7b8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    c766:	4b18      	ldr	r3, [pc, #96]	; (c7c8 <usbdc_get_interface+0x88>)
    c768:	695b      	ldr	r3, [r3, #20]
    c76a:	2200      	movs	r2, #0
    c76c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c76e:	4b16      	ldr	r3, [pc, #88]	; (c7c8 <usbdc_get_interface+0x88>)
    c770:	6959      	ldr	r1, [r3, #20]
    c772:	2300      	movs	r3, #0
    c774:	2201      	movs	r2, #1
    c776:	2000      	movs	r0, #0
    c778:	4c14      	ldr	r4, [pc, #80]	; (c7cc <usbdc_get_interface+0x8c>)
    c77a:	47a0      	blx	r4
		return true;
    c77c:	2301      	movs	r3, #1
    c77e:	e01f      	b.n	c7c0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c780:	68fb      	ldr	r3, [r7, #12]
    c782:	685b      	ldr	r3, [r3, #4]
    c784:	687a      	ldr	r2, [r7, #4]
    c786:	2102      	movs	r1, #2
    c788:	68f8      	ldr	r0, [r7, #12]
    c78a:	4798      	blx	r3
    c78c:	60b8      	str	r0, [r7, #8]
    c78e:	68bb      	ldr	r3, [r7, #8]
    c790:	2b00      	cmp	r3, #0
    c792:	da03      	bge.n	c79c <usbdc_get_interface+0x5c>
			func = func->next;
    c794:	68fb      	ldr	r3, [r7, #12]
    c796:	681b      	ldr	r3, [r3, #0]
    c798:	60fb      	str	r3, [r7, #12]
    c79a:	e00d      	b.n	c7b8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    c79c:	4b0a      	ldr	r3, [pc, #40]	; (c7c8 <usbdc_get_interface+0x88>)
    c79e:	695b      	ldr	r3, [r3, #20]
    c7a0:	68ba      	ldr	r2, [r7, #8]
    c7a2:	b2d2      	uxtb	r2, r2
    c7a4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    c7a6:	4b08      	ldr	r3, [pc, #32]	; (c7c8 <usbdc_get_interface+0x88>)
    c7a8:	6959      	ldr	r1, [r3, #20]
    c7aa:	2300      	movs	r3, #0
    c7ac:	2201      	movs	r2, #1
    c7ae:	2000      	movs	r0, #0
    c7b0:	4c06      	ldr	r4, [pc, #24]	; (c7cc <usbdc_get_interface+0x8c>)
    c7b2:	47a0      	blx	r4
			return true;
    c7b4:	2301      	movs	r3, #1
    c7b6:	e003      	b.n	c7c0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    c7b8:	68fb      	ldr	r3, [r7, #12]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d1e0      	bne.n	c780 <usbdc_get_interface+0x40>
		}
	}
	return false;
    c7be:	2300      	movs	r3, #0
}
    c7c0:	4618      	mov	r0, r3
    c7c2:	3714      	adds	r7, #20
    c7c4:	46bd      	mov	sp, r7
    c7c6:	bd90      	pop	{r4, r7, pc}
    c7c8:	20000de0 	.word	0x20000de0
    c7cc:	0000cf7d 	.word	0x0000cf7d

0000c7d0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    c7d0:	b590      	push	{r4, r7, lr}
    c7d2:	b083      	sub	sp, #12
    c7d4:	af00      	add	r7, sp, #0
    c7d6:	4603      	mov	r3, r0
    c7d8:	6039      	str	r1, [r7, #0]
    c7da:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c7dc:	683b      	ldr	r3, [r7, #0]
    c7de:	785b      	ldrb	r3, [r3, #1]
    c7e0:	2b0a      	cmp	r3, #10
    c7e2:	d83a      	bhi.n	c85a <usbdc_get_req+0x8a>
    c7e4:	a201      	add	r2, pc, #4	; (adr r2, c7ec <usbdc_get_req+0x1c>)
    c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c7ea:	bf00      	nop
    c7ec:	0000c843 	.word	0x0000c843
    c7f0:	0000c85b 	.word	0x0000c85b
    c7f4:	0000c85b 	.word	0x0000c85b
    c7f8:	0000c85b 	.word	0x0000c85b
    c7fc:	0000c85b 	.word	0x0000c85b
    c800:	0000c85b 	.word	0x0000c85b
    c804:	0000c819 	.word	0x0000c819
    c808:	0000c85b 	.word	0x0000c85b
    c80c:	0000c827 	.word	0x0000c827
    c810:	0000c85b 	.word	0x0000c85b
    c814:	0000c851 	.word	0x0000c851
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    c818:	79fb      	ldrb	r3, [r7, #7]
    c81a:	6839      	ldr	r1, [r7, #0]
    c81c:	4618      	mov	r0, r3
    c81e:	4b11      	ldr	r3, [pc, #68]	; (c864 <usbdc_get_req+0x94>)
    c820:	4798      	blx	r3
    c822:	4603      	mov	r3, r0
    c824:	e01a      	b.n	c85c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    c826:	4b10      	ldr	r3, [pc, #64]	; (c868 <usbdc_get_req+0x98>)
    c828:	695b      	ldr	r3, [r3, #20]
    c82a:	4a0f      	ldr	r2, [pc, #60]	; (c868 <usbdc_get_req+0x98>)
    c82c:	7ed2      	ldrb	r2, [r2, #27]
    c82e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    c830:	4b0d      	ldr	r3, [pc, #52]	; (c868 <usbdc_get_req+0x98>)
    c832:	6959      	ldr	r1, [r3, #20]
    c834:	79f8      	ldrb	r0, [r7, #7]
    c836:	2300      	movs	r3, #0
    c838:	2201      	movs	r2, #1
    c83a:	4c0c      	ldr	r4, [pc, #48]	; (c86c <usbdc_get_req+0x9c>)
    c83c:	47a0      	blx	r4
		return true;
    c83e:	2301      	movs	r3, #1
    c840:	e00c      	b.n	c85c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    c842:	79fb      	ldrb	r3, [r7, #7]
    c844:	6839      	ldr	r1, [r7, #0]
    c846:	4618      	mov	r0, r3
    c848:	4b09      	ldr	r3, [pc, #36]	; (c870 <usbdc_get_req+0xa0>)
    c84a:	4798      	blx	r3
    c84c:	4603      	mov	r3, r0
    c84e:	e005      	b.n	c85c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    c850:	6838      	ldr	r0, [r7, #0]
    c852:	4b08      	ldr	r3, [pc, #32]	; (c874 <usbdc_get_req+0xa4>)
    c854:	4798      	blx	r3
    c856:	4603      	mov	r3, r0
    c858:	e000      	b.n	c85c <usbdc_get_req+0x8c>
	default:
		return false;
    c85a:	2300      	movs	r3, #0
	}
}
    c85c:	4618      	mov	r0, r3
    c85e:	370c      	adds	r7, #12
    c860:	46bd      	mov	sp, r7
    c862:	bd90      	pop	{r4, r7, pc}
    c864:	0000c659 	.word	0x0000c659
    c868:	20000de0 	.word	0x20000de0
    c86c:	0000cf7d 	.word	0x0000cf7d
    c870:	0000c6c1 	.word	0x0000c6c1
    c874:	0000c741 	.word	0x0000c741

0000c878 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c878:	b590      	push	{r4, r7, lr}
    c87a:	b083      	sub	sp, #12
    c87c:	af00      	add	r7, sp, #0
    c87e:	4603      	mov	r3, r0
    c880:	6039      	str	r1, [r7, #0]
    c882:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c884:	683b      	ldr	r3, [r7, #0]
    c886:	781b      	ldrb	r3, [r3, #0]
    c888:	f003 031f 	and.w	r3, r3, #31
    c88c:	2b02      	cmp	r3, #2
    c88e:	d116      	bne.n	c8be <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c890:	683b      	ldr	r3, [r7, #0]
    c892:	88db      	ldrh	r3, [r3, #6]
    c894:	b29b      	uxth	r3, r3
    c896:	2b00      	cmp	r3, #0
    c898:	d001      	beq.n	c89e <usbdc_clear_ftr_req+0x26>
			return false;
    c89a:	2300      	movs	r3, #0
    c89c:	e010      	b.n	c8c0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c89e:	683b      	ldr	r3, [r7, #0]
    c8a0:	889b      	ldrh	r3, [r3, #4]
    c8a2:	b29b      	uxth	r3, r3
    c8a4:	b2db      	uxtb	r3, r3
    c8a6:	2100      	movs	r1, #0
    c8a8:	4618      	mov	r0, r3
    c8aa:	4b07      	ldr	r3, [pc, #28]	; (c8c8 <usbdc_clear_ftr_req+0x50>)
    c8ac:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c8ae:	79f8      	ldrb	r0, [r7, #7]
    c8b0:	2301      	movs	r3, #1
    c8b2:	2200      	movs	r2, #0
    c8b4:	2100      	movs	r1, #0
    c8b6:	4c05      	ldr	r4, [pc, #20]	; (c8cc <usbdc_clear_ftr_req+0x54>)
    c8b8:	47a0      	blx	r4
		return true;
    c8ba:	2301      	movs	r3, #1
    c8bc:	e000      	b.n	c8c0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    c8be:	2300      	movs	r3, #0
	}
}
    c8c0:	4618      	mov	r0, r3
    c8c2:	370c      	adds	r7, #12
    c8c4:	46bd      	mov	sp, r7
    c8c6:	bd90      	pop	{r4, r7, pc}
    c8c8:	0000389d 	.word	0x0000389d
    c8cc:	0000cf7d 	.word	0x0000cf7d

0000c8d0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    c8d0:	b590      	push	{r4, r7, lr}
    c8d2:	b083      	sub	sp, #12
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	4603      	mov	r3, r0
    c8d8:	6039      	str	r1, [r7, #0]
    c8da:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c8dc:	683b      	ldr	r3, [r7, #0]
    c8de:	781b      	ldrb	r3, [r3, #0]
    c8e0:	f003 031f 	and.w	r3, r3, #31
    c8e4:	2b02      	cmp	r3, #2
    c8e6:	d116      	bne.n	c916 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    c8e8:	683b      	ldr	r3, [r7, #0]
    c8ea:	88db      	ldrh	r3, [r3, #6]
    c8ec:	b29b      	uxth	r3, r3
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d001      	beq.n	c8f6 <usbdc_set_ftr_req+0x26>
			return false;
    c8f2:	2300      	movs	r3, #0
    c8f4:	e010      	b.n	c918 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c8f6:	683b      	ldr	r3, [r7, #0]
    c8f8:	889b      	ldrh	r3, [r3, #4]
    c8fa:	b29b      	uxth	r3, r3
    c8fc:	b2db      	uxtb	r3, r3
    c8fe:	2101      	movs	r1, #1
    c900:	4618      	mov	r0, r3
    c902:	4b07      	ldr	r3, [pc, #28]	; (c920 <usbdc_set_ftr_req+0x50>)
    c904:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c906:	79f8      	ldrb	r0, [r7, #7]
    c908:	2301      	movs	r3, #1
    c90a:	2200      	movs	r2, #0
    c90c:	2100      	movs	r1, #0
    c90e:	4c05      	ldr	r4, [pc, #20]	; (c924 <usbdc_set_ftr_req+0x54>)
    c910:	47a0      	blx	r4
		return true;
    c912:	2301      	movs	r3, #1
    c914:	e000      	b.n	c918 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    c916:	2300      	movs	r3, #0
	}
}
    c918:	4618      	mov	r0, r3
    c91a:	370c      	adds	r7, #12
    c91c:	46bd      	mov	sp, r7
    c91e:	bd90      	pop	{r4, r7, pc}
    c920:	0000389d 	.word	0x0000389d
    c924:	0000cf7d 	.word	0x0000cf7d

0000c928 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c928:	b580      	push	{r7, lr}
    c92a:	b082      	sub	sp, #8
    c92c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c92e:	4b0a      	ldr	r3, [pc, #40]	; (c958 <usbdc_unconfig+0x30>)
    c930:	691b      	ldr	r3, [r3, #16]
    c932:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c934:	e008      	b.n	c948 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	685b      	ldr	r3, [r3, #4]
    c93a:	2200      	movs	r2, #0
    c93c:	2101      	movs	r1, #1
    c93e:	6878      	ldr	r0, [r7, #4]
    c940:	4798      	blx	r3
		func = func->next;
    c942:	687b      	ldr	r3, [r7, #4]
    c944:	681b      	ldr	r3, [r3, #0]
    c946:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    c948:	687b      	ldr	r3, [r7, #4]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d1f3      	bne.n	c936 <usbdc_unconfig+0xe>
	}
}
    c94e:	bf00      	nop
    c950:	3708      	adds	r7, #8
    c952:	46bd      	mov	sp, r7
    c954:	bd80      	pop	{r7, pc}
    c956:	bf00      	nop
    c958:	20000de0 	.word	0x20000de0

0000c95c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    c95c:	b580      	push	{r7, lr}
    c95e:	b088      	sub	sp, #32
    c960:	af00      	add	r7, sp, #0
    c962:	4603      	mov	r3, r0
    c964:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    c966:	2300      	movs	r3, #0
    c968:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    c96a:	23ff      	movs	r3, #255	; 0xff
    c96c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    c96e:	79fb      	ldrb	r3, [r7, #7]
    c970:	2b00      	cmp	r3, #0
    c972:	d103      	bne.n	c97c <usbdc_set_config+0x20>
		usbdc_unconfig();
    c974:	4b2e      	ldr	r3, [pc, #184]	; (ca30 <usbdc_set_config+0xd4>)
    c976:	4798      	blx	r3
		return true;
    c978:	2301      	movs	r3, #1
    c97a:	e055      	b.n	ca28 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c97c:	69bb      	ldr	r3, [r7, #24]
    c97e:	2b00      	cmp	r3, #0
    c980:	d10a      	bne.n	c998 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c982:	4b2c      	ldr	r3, [pc, #176]	; (ca34 <usbdc_set_config+0xd8>)
    c984:	681b      	ldr	r3, [r3, #0]
    c986:	6818      	ldr	r0, [r3, #0]
    c988:	4b2a      	ldr	r3, [pc, #168]	; (ca34 <usbdc_set_config+0xd8>)
    c98a:	681b      	ldr	r3, [r3, #0]
    c98c:	685b      	ldr	r3, [r3, #4]
    c98e:	79fa      	ldrb	r2, [r7, #7]
    c990:	4619      	mov	r1, r3
    c992:	4b29      	ldr	r3, [pc, #164]	; (ca38 <usbdc_set_config+0xdc>)
    c994:	4798      	blx	r3
    c996:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    c998:	69bb      	ldr	r3, [r7, #24]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d101      	bne.n	c9a2 <usbdc_set_config+0x46>
		return false;
    c99e:	2300      	movs	r3, #0
    c9a0:	e042      	b.n	ca28 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    c9a2:	69b8      	ldr	r0, [r7, #24]
    c9a4:	4b25      	ldr	r3, [pc, #148]	; (ca3c <usbdc_set_config+0xe0>)
    c9a6:	4798      	blx	r3
    c9a8:	4603      	mov	r3, r0
    c9aa:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    c9ac:	8abb      	ldrh	r3, [r7, #20]
    c9ae:	69ba      	ldr	r2, [r7, #24]
    c9b0:	4413      	add	r3, r2
    c9b2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c9b4:	693b      	ldr	r3, [r7, #16]
    c9b6:	2204      	movs	r2, #4
    c9b8:	4619      	mov	r1, r3
    c9ba:	69b8      	ldr	r0, [r7, #24]
    c9bc:	4b20      	ldr	r3, [pc, #128]	; (ca40 <usbdc_set_config+0xe4>)
    c9be:	4798      	blx	r3
    c9c0:	4603      	mov	r3, r0
    c9c2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    c9c4:	e02c      	b.n	ca20 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c9c6:	68fb      	ldr	r3, [r7, #12]
    c9c8:	3302      	adds	r3, #2
    c9ca:	781b      	ldrb	r3, [r3, #0]
    c9cc:	7dfa      	ldrb	r2, [r7, #23]
    c9ce:	429a      	cmp	r2, r3
    c9d0:	d018      	beq.n	ca04 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    c9d2:	68fb      	ldr	r3, [r7, #12]
    c9d4:	789b      	ldrb	r3, [r3, #2]
    c9d6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c9d8:	4b16      	ldr	r3, [pc, #88]	; (ca34 <usbdc_set_config+0xd8>)
    c9da:	691b      	ldr	r3, [r3, #16]
    c9dc:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c9de:	e00c      	b.n	c9fa <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c9e0:	69fb      	ldr	r3, [r7, #28]
    c9e2:	685b      	ldr	r3, [r3, #4]
    c9e4:	f107 020c 	add.w	r2, r7, #12
    c9e8:	2100      	movs	r1, #0
    c9ea:	69f8      	ldr	r0, [r7, #28]
    c9ec:	4798      	blx	r3
    c9ee:	4603      	mov	r3, r0
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d006      	beq.n	ca02 <usbdc_set_config+0xa6>
					func = func->next;
    c9f4:	69fb      	ldr	r3, [r7, #28]
    c9f6:	681b      	ldr	r3, [r3, #0]
    c9f8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    c9fa:	69fb      	ldr	r3, [r7, #28]
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d1ef      	bne.n	c9e0 <usbdc_set_config+0x84>
    ca00:	e000      	b.n	ca04 <usbdc_set_config+0xa8>
				} else {
					break;
    ca02:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    ca04:	68fb      	ldr	r3, [r7, #12]
    ca06:	4618      	mov	r0, r3
    ca08:	4b0e      	ldr	r3, [pc, #56]	; (ca44 <usbdc_set_config+0xe8>)
    ca0a:	4798      	blx	r3
    ca0c:	4603      	mov	r3, r0
    ca0e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ca10:	68fb      	ldr	r3, [r7, #12]
    ca12:	6939      	ldr	r1, [r7, #16]
    ca14:	2204      	movs	r2, #4
    ca16:	4618      	mov	r0, r3
    ca18:	4b09      	ldr	r3, [pc, #36]	; (ca40 <usbdc_set_config+0xe4>)
    ca1a:	4798      	blx	r3
    ca1c:	4603      	mov	r3, r0
    ca1e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    ca20:	68fb      	ldr	r3, [r7, #12]
    ca22:	2b00      	cmp	r3, #0
    ca24:	d1cf      	bne.n	c9c6 <usbdc_set_config+0x6a>
	}
	return true;
    ca26:	2301      	movs	r3, #1
}
    ca28:	4618      	mov	r0, r3
    ca2a:	3720      	adds	r7, #32
    ca2c:	46bd      	mov	sp, r7
    ca2e:	bd80      	pop	{r7, pc}
    ca30:	0000c929 	.word	0x0000c929
    ca34:	20000de0 	.word	0x20000de0
    ca38:	0000d2cd 	.word	0x0000d2cd
    ca3c:	0000c479 	.word	0x0000c479
    ca40:	0000d20d 	.word	0x0000d20d
    ca44:	0000c455 	.word	0x0000c455

0000ca48 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    ca48:	b580      	push	{r7, lr}
    ca4a:	b082      	sub	sp, #8
    ca4c:	af00      	add	r7, sp, #0
    ca4e:	4603      	mov	r3, r0
    ca50:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    ca52:	79fb      	ldrb	r3, [r7, #7]
    ca54:	4618      	mov	r0, r3
    ca56:	4b03      	ldr	r3, [pc, #12]	; (ca64 <usbdc_set_address+0x1c>)
    ca58:	4798      	blx	r3
}
    ca5a:	bf00      	nop
    ca5c:	3708      	adds	r7, #8
    ca5e:	46bd      	mov	sp, r7
    ca60:	bd80      	pop	{r7, pc}
    ca62:	bf00      	nop
    ca64:	000034b9 	.word	0x000034b9

0000ca68 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    ca68:	b590      	push	{r4, r7, lr}
    ca6a:	b087      	sub	sp, #28
    ca6c:	af00      	add	r7, sp, #0
    ca6e:	4603      	mov	r3, r0
    ca70:	460a      	mov	r2, r1
    ca72:	80fb      	strh	r3, [r7, #6]
    ca74:	4613      	mov	r3, r2
    ca76:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    ca78:	2300      	movs	r3, #0
    ca7a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    ca7c:	693b      	ldr	r3, [r7, #16]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d10b      	bne.n	ca9a <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    ca82:	4b43      	ldr	r3, [pc, #268]	; (cb90 <usbdc_set_interface+0x128>)
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	6818      	ldr	r0, [r3, #0]
    ca88:	4b41      	ldr	r3, [pc, #260]	; (cb90 <usbdc_set_interface+0x128>)
    ca8a:	681b      	ldr	r3, [r3, #0]
    ca8c:	6859      	ldr	r1, [r3, #4]
    ca8e:	4b40      	ldr	r3, [pc, #256]	; (cb90 <usbdc_set_interface+0x128>)
    ca90:	7edb      	ldrb	r3, [r3, #27]
    ca92:	461a      	mov	r2, r3
    ca94:	4b3f      	ldr	r3, [pc, #252]	; (cb94 <usbdc_set_interface+0x12c>)
    ca96:	4798      	blx	r3
    ca98:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    ca9a:	693b      	ldr	r3, [r7, #16]
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d101      	bne.n	caa4 <usbdc_set_interface+0x3c>
		return false;
    caa0:	2300      	movs	r3, #0
    caa2:	e071      	b.n	cb88 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    caa4:	693b      	ldr	r3, [r7, #16]
    caa6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    caa8:	6938      	ldr	r0, [r7, #16]
    caaa:	4b3b      	ldr	r3, [pc, #236]	; (cb98 <usbdc_set_interface+0x130>)
    caac:	4798      	blx	r3
    caae:	4603      	mov	r3, r0
    cab0:	461a      	mov	r2, r3
    cab2:	693b      	ldr	r3, [r7, #16]
    cab4:	4413      	add	r3, r2
    cab6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cab8:	68bb      	ldr	r3, [r7, #8]
    caba:	68f9      	ldr	r1, [r7, #12]
    cabc:	2204      	movs	r2, #4
    cabe:	4618      	mov	r0, r3
    cac0:	4b36      	ldr	r3, [pc, #216]	; (cb9c <usbdc_set_interface+0x134>)
    cac2:	4798      	blx	r3
    cac4:	6138      	str	r0, [r7, #16]
    cac6:	693b      	ldr	r3, [r7, #16]
    cac8:	2b00      	cmp	r3, #0
    caca:	d113      	bne.n	caf4 <usbdc_set_interface+0x8c>
		return false;
    cacc:	2300      	movs	r3, #0
    cace:	e05b      	b.n	cb88 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cad0:	68bb      	ldr	r3, [r7, #8]
    cad2:	4618      	mov	r0, r3
    cad4:	4b32      	ldr	r3, [pc, #200]	; (cba0 <usbdc_set_interface+0x138>)
    cad6:	4798      	blx	r3
    cad8:	4603      	mov	r3, r0
    cada:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cadc:	68bb      	ldr	r3, [r7, #8]
    cade:	68f9      	ldr	r1, [r7, #12]
    cae0:	2204      	movs	r2, #4
    cae2:	4618      	mov	r0, r3
    cae4:	4b2d      	ldr	r3, [pc, #180]	; (cb9c <usbdc_set_interface+0x134>)
    cae6:	4798      	blx	r3
    cae8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    caea:	693b      	ldr	r3, [r7, #16]
    caec:	2b00      	cmp	r3, #0
    caee:	d101      	bne.n	caf4 <usbdc_set_interface+0x8c>
			return false;
    caf0:	2300      	movs	r3, #0
    caf2:	e049      	b.n	cb88 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    caf4:	693b      	ldr	r3, [r7, #16]
    caf6:	3302      	adds	r3, #2
    caf8:	781b      	ldrb	r3, [r3, #0]
    cafa:	b29b      	uxth	r3, r3
    cafc:	88ba      	ldrh	r2, [r7, #4]
    cafe:	429a      	cmp	r2, r3
    cb00:	d1e6      	bne.n	cad0 <usbdc_set_interface+0x68>
    cb02:	693b      	ldr	r3, [r7, #16]
    cb04:	3303      	adds	r3, #3
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	b29b      	uxth	r3, r3
    cb0a:	88fa      	ldrh	r2, [r7, #6]
    cb0c:	429a      	cmp	r2, r3
    cb0e:	d1df      	bne.n	cad0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cb10:	693b      	ldr	r3, [r7, #16]
    cb12:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    cb14:	4b1e      	ldr	r3, [pc, #120]	; (cb90 <usbdc_set_interface+0x128>)
    cb16:	691b      	ldr	r3, [r3, #16]
    cb18:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    cb1a:	e031      	b.n	cb80 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    cb1c:	697b      	ldr	r3, [r7, #20]
    cb1e:	685b      	ldr	r3, [r3, #4]
    cb20:	f107 0208 	add.w	r2, r7, #8
    cb24:	2101      	movs	r1, #1
    cb26:	6978      	ldr	r0, [r7, #20]
    cb28:	4798      	blx	r3
    cb2a:	4603      	mov	r3, r0
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d003      	beq.n	cb38 <usbdc_set_interface+0xd0>
			func = func->next;
    cb30:	697b      	ldr	r3, [r7, #20]
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	617b      	str	r3, [r7, #20]
    cb36:	e023      	b.n	cb80 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    cb38:	697b      	ldr	r3, [r7, #20]
    cb3a:	685b      	ldr	r3, [r3, #4]
    cb3c:	f107 0208 	add.w	r2, r7, #8
    cb40:	2100      	movs	r1, #0
    cb42:	6978      	ldr	r0, [r7, #20]
    cb44:	4798      	blx	r3
    cb46:	4603      	mov	r3, r0
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d117      	bne.n	cb7c <usbdc_set_interface+0x114>
			if (alt_set) {
    cb4c:	88fb      	ldrh	r3, [r7, #6]
    cb4e:	2b00      	cmp	r3, #0
    cb50:	d00c      	beq.n	cb6c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    cb52:	4b0f      	ldr	r3, [pc, #60]	; (cb90 <usbdc_set_interface+0x128>)
    cb54:	7f5b      	ldrb	r3, [r3, #29]
    cb56:	b25a      	sxtb	r2, r3
    cb58:	88bb      	ldrh	r3, [r7, #4]
    cb5a:	2101      	movs	r1, #1
    cb5c:	fa01 f303 	lsl.w	r3, r1, r3
    cb60:	b25b      	sxtb	r3, r3
    cb62:	4313      	orrs	r3, r2
    cb64:	b25b      	sxtb	r3, r3
    cb66:	b2da      	uxtb	r2, r3
    cb68:	4b09      	ldr	r3, [pc, #36]	; (cb90 <usbdc_set_interface+0x128>)
    cb6a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    cb6c:	2300      	movs	r3, #0
    cb6e:	2200      	movs	r2, #0
    cb70:	2100      	movs	r1, #0
    cb72:	2000      	movs	r0, #0
    cb74:	4c0b      	ldr	r4, [pc, #44]	; (cba4 <usbdc_set_interface+0x13c>)
    cb76:	47a0      	blx	r4
			return true;
    cb78:	2301      	movs	r3, #1
    cb7a:	e005      	b.n	cb88 <usbdc_set_interface+0x120>
		} else {
			return false;
    cb7c:	2300      	movs	r3, #0
    cb7e:	e003      	b.n	cb88 <usbdc_set_interface+0x120>
	while (NULL != func) {
    cb80:	697b      	ldr	r3, [r7, #20]
    cb82:	2b00      	cmp	r3, #0
    cb84:	d1ca      	bne.n	cb1c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    cb86:	2300      	movs	r3, #0
}
    cb88:	4618      	mov	r0, r3
    cb8a:	371c      	adds	r7, #28
    cb8c:	46bd      	mov	sp, r7
    cb8e:	bd90      	pop	{r4, r7, pc}
    cb90:	20000de0 	.word	0x20000de0
    cb94:	0000d2cd 	.word	0x0000d2cd
    cb98:	0000c479 	.word	0x0000c479
    cb9c:	0000d20d 	.word	0x0000d20d
    cba0:	0000c455 	.word	0x0000c455
    cba4:	0000cf7d 	.word	0x0000cf7d

0000cba8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    cba8:	b590      	push	{r4, r7, lr}
    cbaa:	b083      	sub	sp, #12
    cbac:	af00      	add	r7, sp, #0
    cbae:	4603      	mov	r3, r0
    cbb0:	6039      	str	r1, [r7, #0]
    cbb2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cbb4:	683b      	ldr	r3, [r7, #0]
    cbb6:	785b      	ldrb	r3, [r3, #1]
    cbb8:	3b01      	subs	r3, #1
    cbba:	2b0a      	cmp	r3, #10
    cbbc:	d85b      	bhi.n	cc76 <usbdc_set_req+0xce>
    cbbe:	a201      	add	r2, pc, #4	; (adr r2, cbc4 <usbdc_set_req+0x1c>)
    cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cbc4:	0000cc43 	.word	0x0000cc43
    cbc8:	0000cc77 	.word	0x0000cc77
    cbcc:	0000cc51 	.word	0x0000cc51
    cbd0:	0000cc77 	.word	0x0000cc77
    cbd4:	0000cbf1 	.word	0x0000cbf1
    cbd8:	0000cc77 	.word	0x0000cc77
    cbdc:	0000cc77 	.word	0x0000cc77
    cbe0:	0000cc77 	.word	0x0000cc77
    cbe4:	0000cc0b 	.word	0x0000cc0b
    cbe8:	0000cc77 	.word	0x0000cc77
    cbec:	0000cc5f 	.word	0x0000cc5f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cbf0:	79f8      	ldrb	r0, [r7, #7]
    cbf2:	2301      	movs	r3, #1
    cbf4:	2200      	movs	r2, #0
    cbf6:	2100      	movs	r1, #0
    cbf8:	4c21      	ldr	r4, [pc, #132]	; (cc80 <usbdc_set_req+0xd8>)
    cbfa:	47a0      	blx	r4
    cbfc:	4603      	mov	r3, r0
    cbfe:	2b00      	cmp	r3, #0
    cc00:	bf0c      	ite	eq
    cc02:	2301      	moveq	r3, #1
    cc04:	2300      	movne	r3, #0
    cc06:	b2db      	uxtb	r3, r3
    cc08:	e036      	b.n	cc78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cc0a:	683b      	ldr	r3, [r7, #0]
    cc0c:	885b      	ldrh	r3, [r3, #2]
    cc0e:	b29b      	uxth	r3, r3
    cc10:	b2db      	uxtb	r3, r3
    cc12:	4618      	mov	r0, r3
    cc14:	4b1b      	ldr	r3, [pc, #108]	; (cc84 <usbdc_set_req+0xdc>)
    cc16:	4798      	blx	r3
    cc18:	4603      	mov	r3, r0
    cc1a:	f083 0301 	eor.w	r3, r3, #1
    cc1e:	b2db      	uxtb	r3, r3
    cc20:	2b00      	cmp	r3, #0
    cc22:	d001      	beq.n	cc28 <usbdc_set_req+0x80>
			return false;
    cc24:	2300      	movs	r3, #0
    cc26:	e027      	b.n	cc78 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cc28:	79f8      	ldrb	r0, [r7, #7]
    cc2a:	2301      	movs	r3, #1
    cc2c:	2200      	movs	r2, #0
    cc2e:	2100      	movs	r1, #0
    cc30:	4c13      	ldr	r4, [pc, #76]	; (cc80 <usbdc_set_req+0xd8>)
    cc32:	47a0      	blx	r4
    cc34:	4603      	mov	r3, r0
    cc36:	2b00      	cmp	r3, #0
    cc38:	bf0c      	ite	eq
    cc3a:	2301      	moveq	r3, #1
    cc3c:	2300      	movne	r3, #0
    cc3e:	b2db      	uxtb	r3, r3
    cc40:	e01a      	b.n	cc78 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cc42:	79fb      	ldrb	r3, [r7, #7]
    cc44:	6839      	ldr	r1, [r7, #0]
    cc46:	4618      	mov	r0, r3
    cc48:	4b0f      	ldr	r3, [pc, #60]	; (cc88 <usbdc_set_req+0xe0>)
    cc4a:	4798      	blx	r3
    cc4c:	4603      	mov	r3, r0
    cc4e:	e013      	b.n	cc78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cc50:	79fb      	ldrb	r3, [r7, #7]
    cc52:	6839      	ldr	r1, [r7, #0]
    cc54:	4618      	mov	r0, r3
    cc56:	4b0d      	ldr	r3, [pc, #52]	; (cc8c <usbdc_set_req+0xe4>)
    cc58:	4798      	blx	r3
    cc5a:	4603      	mov	r3, r0
    cc5c:	e00c      	b.n	cc78 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cc5e:	683b      	ldr	r3, [r7, #0]
    cc60:	885b      	ldrh	r3, [r3, #2]
    cc62:	b29a      	uxth	r2, r3
    cc64:	683b      	ldr	r3, [r7, #0]
    cc66:	889b      	ldrh	r3, [r3, #4]
    cc68:	b29b      	uxth	r3, r3
    cc6a:	4619      	mov	r1, r3
    cc6c:	4610      	mov	r0, r2
    cc6e:	4b08      	ldr	r3, [pc, #32]	; (cc90 <usbdc_set_req+0xe8>)
    cc70:	4798      	blx	r3
    cc72:	4603      	mov	r3, r0
    cc74:	e000      	b.n	cc78 <usbdc_set_req+0xd0>
	default:
		return false;
    cc76:	2300      	movs	r3, #0
	}
}
    cc78:	4618      	mov	r0, r3
    cc7a:	370c      	adds	r7, #12
    cc7c:	46bd      	mov	sp, r7
    cc7e:	bd90      	pop	{r4, r7, pc}
    cc80:	0000cf7d 	.word	0x0000cf7d
    cc84:	0000c95d 	.word	0x0000c95d
    cc88:	0000c879 	.word	0x0000c879
    cc8c:	0000c8d1 	.word	0x0000c8d1
    cc90:	0000ca69 	.word	0x0000ca69

0000cc94 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cc94:	b580      	push	{r7, lr}
    cc96:	b082      	sub	sp, #8
    cc98:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cc9a:	4b0a      	ldr	r3, [pc, #40]	; (ccc4 <usbdc_sof_notify+0x30>)
    cc9c:	685b      	ldr	r3, [r3, #4]
    cc9e:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cca0:	e009      	b.n	ccb6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	685b      	ldr	r3, [r3, #4]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d002      	beq.n	ccb0 <usbdc_sof_notify+0x1c>
			sof->cb();
    ccaa:	687b      	ldr	r3, [r7, #4]
    ccac:	685b      	ldr	r3, [r3, #4]
    ccae:	4798      	blx	r3
		}
		sof = sof->next;
    ccb0:	687b      	ldr	r3, [r7, #4]
    ccb2:	681b      	ldr	r3, [r3, #0]
    ccb4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d1f2      	bne.n	cca2 <usbdc_sof_notify+0xe>
	}
}
    ccbc:	bf00      	nop
    ccbe:	3708      	adds	r7, #8
    ccc0:	46bd      	mov	sp, r7
    ccc2:	bd80      	pop	{r7, pc}
    ccc4:	20000de0 	.word	0x20000de0

0000ccc8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ccc8:	b580      	push	{r7, lr}
    ccca:	b084      	sub	sp, #16
    cccc:	af00      	add	r7, sp, #0
    ccce:	4603      	mov	r3, r0
    ccd0:	6039      	str	r1, [r7, #0]
    ccd2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ccd4:	4b0b      	ldr	r3, [pc, #44]	; (cd04 <usbdc_change_notify+0x3c>)
    ccd6:	68db      	ldr	r3, [r3, #12]
    ccd8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    ccda:	e00c      	b.n	ccf6 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	685b      	ldr	r3, [r3, #4]
    cce0:	2b00      	cmp	r3, #0
    cce2:	d005      	beq.n	ccf0 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cce4:	68fb      	ldr	r3, [r7, #12]
    cce6:	685b      	ldr	r3, [r3, #4]
    cce8:	79fa      	ldrb	r2, [r7, #7]
    ccea:	6839      	ldr	r1, [r7, #0]
    ccec:	4610      	mov	r0, r2
    ccee:	4798      	blx	r3
		}
		cg = cg->next;
    ccf0:	68fb      	ldr	r3, [r7, #12]
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    ccf6:	68fb      	ldr	r3, [r7, #12]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	d1ef      	bne.n	ccdc <usbdc_change_notify+0x14>
	}
}
    ccfc:	bf00      	nop
    ccfe:	3710      	adds	r7, #16
    cd00:	46bd      	mov	sp, r7
    cd02:	bd80      	pop	{r7, pc}
    cd04:	20000de0 	.word	0x20000de0

0000cd08 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    cd08:	b580      	push	{r7, lr}
    cd0a:	b084      	sub	sp, #16
    cd0c:	af00      	add	r7, sp, #0
    cd0e:	4603      	mov	r3, r0
    cd10:	6039      	str	r1, [r7, #0]
    cd12:	71fb      	strb	r3, [r7, #7]
    cd14:	4613      	mov	r3, r2
    cd16:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    cd18:	4b12      	ldr	r3, [pc, #72]	; (cd64 <usbdc_request_handler+0x5c>)
    cd1a:	689b      	ldr	r3, [r3, #8]
    cd1c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    cd1e:	e019      	b.n	cd54 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    cd20:	68fb      	ldr	r3, [r7, #12]
    cd22:	685b      	ldr	r3, [r3, #4]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d012      	beq.n	cd4e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    cd28:	68fb      	ldr	r3, [r7, #12]
    cd2a:	685b      	ldr	r3, [r3, #4]
    cd2c:	79ba      	ldrb	r2, [r7, #6]
    cd2e:	79f8      	ldrb	r0, [r7, #7]
    cd30:	6839      	ldr	r1, [r7, #0]
    cd32:	4798      	blx	r3
    cd34:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    cd36:	68bb      	ldr	r3, [r7, #8]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d101      	bne.n	cd40 <usbdc_request_handler+0x38>
				return true;
    cd3c:	2301      	movs	r3, #1
    cd3e:	e00d      	b.n	cd5c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    cd40:	68bb      	ldr	r3, [r7, #8]
    cd42:	f113 0f0a 	cmn.w	r3, #10
    cd46:	d002      	beq.n	cd4e <usbdc_request_handler+0x46>
				return -1;
    cd48:	f04f 33ff 	mov.w	r3, #4294967295
    cd4c:	e006      	b.n	cd5c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    cd4e:	68fb      	ldr	r3, [r7, #12]
    cd50:	681b      	ldr	r3, [r3, #0]
    cd52:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    cd54:	68fb      	ldr	r3, [r7, #12]
    cd56:	2b00      	cmp	r3, #0
    cd58:	d1e2      	bne.n	cd20 <usbdc_request_handler+0x18>
	}
	return false;
    cd5a:	2300      	movs	r3, #0
}
    cd5c:	4618      	mov	r0, r3
    cd5e:	3710      	adds	r7, #16
    cd60:	46bd      	mov	sp, r7
    cd62:	bd80      	pop	{r7, pc}
    cd64:	20000de0 	.word	0x20000de0

0000cd68 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    cd68:	b580      	push	{r7, lr}
    cd6a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    cd6c:	4b01      	ldr	r3, [pc, #4]	; (cd74 <usbd_sof_cb+0xc>)
    cd6e:	4798      	blx	r3
}
    cd70:	bf00      	nop
    cd72:	bd80      	pop	{r7, pc}
    cd74:	0000cc95 	.word	0x0000cc95

0000cd78 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    cd78:	b580      	push	{r7, lr}
    cd7a:	b082      	sub	sp, #8
    cd7c:	af00      	add	r7, sp, #0
    cd7e:	4603      	mov	r3, r0
    cd80:	6039      	str	r1, [r7, #0]
    cd82:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    cd84:	79fb      	ldrb	r3, [r7, #7]
    cd86:	2200      	movs	r2, #0
    cd88:	6839      	ldr	r1, [r7, #0]
    cd8a:	4618      	mov	r0, r3
    cd8c:	4b14      	ldr	r3, [pc, #80]	; (cde0 <usbdc_cb_ctl_req+0x68>)
    cd8e:	4798      	blx	r3
    cd90:	4603      	mov	r3, r0
    cd92:	f1b3 3fff 	cmp.w	r3, #4294967295
    cd96:	d00b      	beq.n	cdb0 <usbdc_cb_ctl_req+0x38>
    cd98:	2b01      	cmp	r3, #1
    cd9a:	d007      	beq.n	cdac <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    cd9c:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cd9e:	683b      	ldr	r3, [r7, #0]
    cda0:	781b      	ldrb	r3, [r3, #0]
    cda2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    cda6:	2b00      	cmp	r3, #0
    cda8:	d007      	beq.n	cdba <usbdc_cb_ctl_req+0x42>
    cdaa:	e003      	b.n	cdb4 <usbdc_cb_ctl_req+0x3c>
		return true;
    cdac:	2301      	movs	r3, #1
    cdae:	e013      	b.n	cdd8 <usbdc_cb_ctl_req+0x60>
		return false;
    cdb0:	2300      	movs	r3, #0
    cdb2:	e011      	b.n	cdd8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    cdb4:	2b80      	cmp	r3, #128	; 0x80
    cdb6:	d007      	beq.n	cdc8 <usbdc_cb_ctl_req+0x50>
    cdb8:	e00d      	b.n	cdd6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    cdba:	79fb      	ldrb	r3, [r7, #7]
    cdbc:	6839      	ldr	r1, [r7, #0]
    cdbe:	4618      	mov	r0, r3
    cdc0:	4b08      	ldr	r3, [pc, #32]	; (cde4 <usbdc_cb_ctl_req+0x6c>)
    cdc2:	4798      	blx	r3
    cdc4:	4603      	mov	r3, r0
    cdc6:	e007      	b.n	cdd8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    cdc8:	79fb      	ldrb	r3, [r7, #7]
    cdca:	6839      	ldr	r1, [r7, #0]
    cdcc:	4618      	mov	r0, r3
    cdce:	4b06      	ldr	r3, [pc, #24]	; (cde8 <usbdc_cb_ctl_req+0x70>)
    cdd0:	4798      	blx	r3
    cdd2:	4603      	mov	r3, r0
    cdd4:	e000      	b.n	cdd8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    cdd6:	2300      	movs	r3, #0
	}
}
    cdd8:	4618      	mov	r0, r3
    cdda:	3708      	adds	r7, #8
    cddc:	46bd      	mov	sp, r7
    cdde:	bd80      	pop	{r7, pc}
    cde0:	0000cd09 	.word	0x0000cd09
    cde4:	0000cba9 	.word	0x0000cba9
    cde8:	0000c7d1 	.word	0x0000c7d1

0000cdec <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    cdec:	b580      	push	{r7, lr}
    cdee:	b082      	sub	sp, #8
    cdf0:	af00      	add	r7, sp, #0
    cdf2:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    cdf4:	687b      	ldr	r3, [r7, #4]
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d135      	bne.n	ce68 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    cdfc:	687b      	ldr	r3, [r7, #4]
    cdfe:	785b      	ldrb	r3, [r3, #1]
    ce00:	2b05      	cmp	r3, #5
    ce02:	d019      	beq.n	ce38 <usbdc_ctrl_status_end+0x4c>
    ce04:	2b09      	cmp	r3, #9
    ce06:	d000      	beq.n	ce0a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ce08:	e02f      	b.n	ce6a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ce0a:	687b      	ldr	r3, [r7, #4]
    ce0c:	885b      	ldrh	r3, [r3, #2]
    ce0e:	b29b      	uxth	r3, r3
    ce10:	b2da      	uxtb	r2, r3
    ce12:	4b17      	ldr	r3, [pc, #92]	; (ce70 <usbdc_ctrl_status_end+0x84>)
    ce14:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ce16:	687b      	ldr	r3, [r7, #4]
    ce18:	885b      	ldrh	r3, [r3, #2]
    ce1a:	b29b      	uxth	r3, r3
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d001      	beq.n	ce24 <usbdc_ctrl_status_end+0x38>
    ce20:	2204      	movs	r2, #4
    ce22:	e000      	b.n	ce26 <usbdc_ctrl_status_end+0x3a>
    ce24:	2203      	movs	r2, #3
    ce26:	4b12      	ldr	r3, [pc, #72]	; (ce70 <usbdc_ctrl_status_end+0x84>)
    ce28:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce2a:	4b11      	ldr	r3, [pc, #68]	; (ce70 <usbdc_ctrl_status_end+0x84>)
    ce2c:	7e9b      	ldrb	r3, [r3, #26]
    ce2e:	4619      	mov	r1, r3
    ce30:	2001      	movs	r0, #1
    ce32:	4b10      	ldr	r3, [pc, #64]	; (ce74 <usbdc_ctrl_status_end+0x88>)
    ce34:	4798      	blx	r3
		break;
    ce36:	e018      	b.n	ce6a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	885b      	ldrh	r3, [r3, #2]
    ce3c:	b29b      	uxth	r3, r3
    ce3e:	b2db      	uxtb	r3, r3
    ce40:	4618      	mov	r0, r3
    ce42:	4b0d      	ldr	r3, [pc, #52]	; (ce78 <usbdc_ctrl_status_end+0x8c>)
    ce44:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ce46:	687b      	ldr	r3, [r7, #4]
    ce48:	885b      	ldrh	r3, [r3, #2]
    ce4a:	b29b      	uxth	r3, r3
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d001      	beq.n	ce54 <usbdc_ctrl_status_end+0x68>
    ce50:	2203      	movs	r2, #3
    ce52:	e000      	b.n	ce56 <usbdc_ctrl_status_end+0x6a>
    ce54:	2202      	movs	r2, #2
    ce56:	4b06      	ldr	r3, [pc, #24]	; (ce70 <usbdc_ctrl_status_end+0x84>)
    ce58:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ce5a:	4b05      	ldr	r3, [pc, #20]	; (ce70 <usbdc_ctrl_status_end+0x84>)
    ce5c:	7e9b      	ldrb	r3, [r3, #26]
    ce5e:	4619      	mov	r1, r3
    ce60:	2001      	movs	r0, #1
    ce62:	4b04      	ldr	r3, [pc, #16]	; (ce74 <usbdc_ctrl_status_end+0x88>)
    ce64:	4798      	blx	r3
		break;
    ce66:	e000      	b.n	ce6a <usbdc_ctrl_status_end+0x7e>
		return;
    ce68:	bf00      	nop
	}
}
    ce6a:	3708      	adds	r7, #8
    ce6c:	46bd      	mov	sp, r7
    ce6e:	bd80      	pop	{r7, pc}
    ce70:	20000de0 	.word	0x20000de0
    ce74:	0000ccc9 	.word	0x0000ccc9
    ce78:	0000ca49 	.word	0x0000ca49

0000ce7c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b082      	sub	sp, #8
    ce80:	af00      	add	r7, sp, #0
    ce82:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ce84:	2201      	movs	r2, #1
    ce86:	6879      	ldr	r1, [r7, #4]
    ce88:	2000      	movs	r0, #0
    ce8a:	4b03      	ldr	r3, [pc, #12]	; (ce98 <usbdc_ctrl_data_end+0x1c>)
    ce8c:	4798      	blx	r3
	return false;
    ce8e:	2300      	movs	r3, #0
}
    ce90:	4618      	mov	r0, r3
    ce92:	3708      	adds	r7, #8
    ce94:	46bd      	mov	sp, r7
    ce96:	bd80      	pop	{r7, pc}
    ce98:	0000cd09 	.word	0x0000cd09

0000ce9c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ce9c:	b580      	push	{r7, lr}
    ce9e:	b082      	sub	sp, #8
    cea0:	af00      	add	r7, sp, #0
    cea2:	4603      	mov	r3, r0
    cea4:	603a      	str	r2, [r7, #0]
    cea6:	71fb      	strb	r3, [r7, #7]
    cea8:	460b      	mov	r3, r1
    ceaa:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ceac:	79bb      	ldrb	r3, [r7, #6]
    ceae:	2b00      	cmp	r3, #0
    ceb0:	d002      	beq.n	ceb8 <usbdc_cb_ctl_done+0x1c>
    ceb2:	2b01      	cmp	r3, #1
    ceb4:	d004      	beq.n	cec0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ceb6:	e008      	b.n	ceca <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ceb8:	6838      	ldr	r0, [r7, #0]
    ceba:	4b06      	ldr	r3, [pc, #24]	; (ced4 <usbdc_cb_ctl_done+0x38>)
    cebc:	4798      	blx	r3
		break;
    cebe:	e004      	b.n	ceca <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    cec0:	6838      	ldr	r0, [r7, #0]
    cec2:	4b05      	ldr	r3, [pc, #20]	; (ced8 <usbdc_cb_ctl_done+0x3c>)
    cec4:	4798      	blx	r3
    cec6:	4603      	mov	r3, r0
    cec8:	e000      	b.n	cecc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ceca:	2300      	movs	r3, #0
}
    cecc:	4618      	mov	r0, r3
    cece:	3708      	adds	r7, #8
    ced0:	46bd      	mov	sp, r7
    ced2:	bd80      	pop	{r7, pc}
    ced4:	0000cded 	.word	0x0000cded
    ced8:	0000ce7d 	.word	0x0000ce7d

0000cedc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    cedc:	b580      	push	{r7, lr}
    cede:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    cee0:	4b10      	ldr	r3, [pc, #64]	; (cf24 <usbdc_reset+0x48>)
    cee2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    cee4:	4b10      	ldr	r3, [pc, #64]	; (cf28 <usbdc_reset+0x4c>)
    cee6:	2202      	movs	r2, #2
    cee8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ceea:	4b0f      	ldr	r3, [pc, #60]	; (cf28 <usbdc_reset+0x4c>)
    ceec:	2200      	movs	r2, #0
    ceee:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    cef0:	4b0d      	ldr	r3, [pc, #52]	; (cf28 <usbdc_reset+0x4c>)
    cef2:	2200      	movs	r2, #0
    cef4:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    cef6:	2000      	movs	r0, #0
    cef8:	4b0c      	ldr	r3, [pc, #48]	; (cf2c <usbdc_reset+0x50>)
    cefa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    cefc:	4b0a      	ldr	r3, [pc, #40]	; (cf28 <usbdc_reset+0x4c>)
    cefe:	7f1b      	ldrb	r3, [r3, #28]
    cf00:	4618      	mov	r0, r3
    cf02:	4b0b      	ldr	r3, [pc, #44]	; (cf30 <usbdc_reset+0x54>)
    cf04:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    cf06:	4a0b      	ldr	r2, [pc, #44]	; (cf34 <usbdc_reset+0x58>)
    cf08:	2100      	movs	r1, #0
    cf0a:	2000      	movs	r0, #0
    cf0c:	4b0a      	ldr	r3, [pc, #40]	; (cf38 <usbdc_reset+0x5c>)
    cf0e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    cf10:	4a0a      	ldr	r2, [pc, #40]	; (cf3c <usbdc_reset+0x60>)
    cf12:	2102      	movs	r1, #2
    cf14:	2000      	movs	r0, #0
    cf16:	4b08      	ldr	r3, [pc, #32]	; (cf38 <usbdc_reset+0x5c>)
    cf18:	4798      	blx	r3
	usb_d_ep_enable(0);
    cf1a:	2000      	movs	r0, #0
    cf1c:	4b08      	ldr	r3, [pc, #32]	; (cf40 <usbdc_reset+0x64>)
    cf1e:	4798      	blx	r3
}
    cf20:	bf00      	nop
    cf22:	bd80      	pop	{r7, pc}
    cf24:	0000c929 	.word	0x0000c929
    cf28:	20000de0 	.word	0x20000de0
    cf2c:	0000359d 	.word	0x0000359d
    cf30:	000034d9 	.word	0x000034d9
    cf34:	0000cd79 	.word	0x0000cd79
    cf38:	000038f1 	.word	0x000038f1
    cf3c:	0000ce9d 	.word	0x0000ce9d
    cf40:	000035ed 	.word	0x000035ed

0000cf44 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    cf44:	b580      	push	{r7, lr}
    cf46:	b082      	sub	sp, #8
    cf48:	af00      	add	r7, sp, #0
    cf4a:	4603      	mov	r3, r0
    cf4c:	6039      	str	r1, [r7, #0]
    cf4e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    cf50:	79fb      	ldrb	r3, [r7, #7]
    cf52:	2b00      	cmp	r3, #0
    cf54:	d002      	beq.n	cf5c <usbd_event_cb+0x18>
    cf56:	2b01      	cmp	r3, #1
    cf58:	d005      	beq.n	cf66 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    cf5a:	e007      	b.n	cf6c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    cf5c:	6839      	ldr	r1, [r7, #0]
    cf5e:	2000      	movs	r0, #0
    cf60:	4b04      	ldr	r3, [pc, #16]	; (cf74 <usbd_event_cb+0x30>)
    cf62:	4798      	blx	r3
		break;
    cf64:	e002      	b.n	cf6c <usbd_event_cb+0x28>
		usbdc_reset();
    cf66:	4b04      	ldr	r3, [pc, #16]	; (cf78 <usbd_event_cb+0x34>)
    cf68:	4798      	blx	r3
		break;
    cf6a:	bf00      	nop
	}
}
    cf6c:	bf00      	nop
    cf6e:	3708      	adds	r7, #8
    cf70:	46bd      	mov	sp, r7
    cf72:	bd80      	pop	{r7, pc}
    cf74:	0000ccc9 	.word	0x0000ccc9
    cf78:	0000cedd 	.word	0x0000cedd

0000cf7c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b088      	sub	sp, #32
    cf80:	af00      	add	r7, sp, #0
    cf82:	60b9      	str	r1, [r7, #8]
    cf84:	607a      	str	r2, [r7, #4]
    cf86:	461a      	mov	r2, r3
    cf88:	4603      	mov	r3, r0
    cf8a:	73fb      	strb	r3, [r7, #15]
    cf8c:	4613      	mov	r3, r2
    cf8e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    cf90:	68bb      	ldr	r3, [r7, #8]
    cf92:	617b      	str	r3, [r7, #20]
    cf94:	687b      	ldr	r3, [r7, #4]
    cf96:	61bb      	str	r3, [r7, #24]
    cf98:	7bfb      	ldrb	r3, [r7, #15]
    cf9a:	773b      	strb	r3, [r7, #28]
    cf9c:	7bbb      	ldrb	r3, [r7, #14]
    cf9e:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    cfa0:	f107 0314 	add.w	r3, r7, #20
    cfa4:	4618      	mov	r0, r3
    cfa6:	4b03      	ldr	r3, [pc, #12]	; (cfb4 <usbdc_xfer+0x38>)
    cfa8:	4798      	blx	r3
    cfaa:	4603      	mov	r3, r0
}
    cfac:	4618      	mov	r0, r3
    cfae:	3720      	adds	r7, #32
    cfb0:	46bd      	mov	sp, r7
    cfb2:	bd80      	pop	{r7, pc}
    cfb4:	0000365d 	.word	0x0000365d

0000cfb8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cfb8:	b580      	push	{r7, lr}
    cfba:	b082      	sub	sp, #8
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	4603      	mov	r3, r0
    cfc0:	6039      	str	r1, [r7, #0]
    cfc2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    cfc4:	79fb      	ldrb	r3, [r7, #7]
    cfc6:	2b01      	cmp	r3, #1
    cfc8:	d009      	beq.n	cfde <usbdc_register_handler+0x26>
    cfca:	2b02      	cmp	r3, #2
    cfcc:	d00c      	beq.n	cfe8 <usbdc_register_handler+0x30>
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d000      	beq.n	cfd4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    cfd2:	e00e      	b.n	cff2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cfd4:	6839      	ldr	r1, [r7, #0]
    cfd6:	4809      	ldr	r0, [pc, #36]	; (cffc <usbdc_register_handler+0x44>)
    cfd8:	4b09      	ldr	r3, [pc, #36]	; (d000 <usbdc_register_handler+0x48>)
    cfda:	4798      	blx	r3
		break;
    cfdc:	e009      	b.n	cff2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    cfde:	6839      	ldr	r1, [r7, #0]
    cfe0:	4808      	ldr	r0, [pc, #32]	; (d004 <usbdc_register_handler+0x4c>)
    cfe2:	4b07      	ldr	r3, [pc, #28]	; (d000 <usbdc_register_handler+0x48>)
    cfe4:	4798      	blx	r3
		break;
    cfe6:	e004      	b.n	cff2 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cfe8:	6839      	ldr	r1, [r7, #0]
    cfea:	4807      	ldr	r0, [pc, #28]	; (d008 <usbdc_register_handler+0x50>)
    cfec:	4b04      	ldr	r3, [pc, #16]	; (d000 <usbdc_register_handler+0x48>)
    cfee:	4798      	blx	r3
		break;
    cff0:	bf00      	nop
	}
}
    cff2:	bf00      	nop
    cff4:	3708      	adds	r7, #8
    cff6:	46bd      	mov	sp, r7
    cff8:	bd80      	pop	{r7, pc}
    cffa:	bf00      	nop
    cffc:	20000de4 	.word	0x20000de4
    d000:	00003a49 	.word	0x00003a49
    d004:	20000de8 	.word	0x20000de8
    d008:	20000dec 	.word	0x20000dec

0000d00c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d00c:	b580      	push	{r7, lr}
    d00e:	b084      	sub	sp, #16
    d010:	af00      	add	r7, sp, #0
    d012:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d014:	687b      	ldr	r3, [r7, #4]
    d016:	2b00      	cmp	r3, #0
    d018:	bf14      	ite	ne
    d01a:	2301      	movne	r3, #1
    d01c:	2300      	moveq	r3, #0
    d01e:	b2db      	uxtb	r3, r3
    d020:	f240 3255 	movw	r2, #853	; 0x355
    d024:	4910      	ldr	r1, [pc, #64]	; (d068 <usbdc_init+0x5c>)
    d026:	4618      	mov	r0, r3
    d028:	4b10      	ldr	r3, [pc, #64]	; (d06c <usbdc_init+0x60>)
    d02a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d02c:	4b10      	ldr	r3, [pc, #64]	; (d070 <usbdc_init+0x64>)
    d02e:	4798      	blx	r3
    d030:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	2b00      	cmp	r3, #0
    d036:	da01      	bge.n	d03c <usbdc_init+0x30>
		return rc;
    d038:	68fb      	ldr	r3, [r7, #12]
    d03a:	e010      	b.n	d05e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d03c:	2220      	movs	r2, #32
    d03e:	2100      	movs	r1, #0
    d040:	480c      	ldr	r0, [pc, #48]	; (d074 <usbdc_init+0x68>)
    d042:	4b0d      	ldr	r3, [pc, #52]	; (d078 <usbdc_init+0x6c>)
    d044:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d046:	4a0b      	ldr	r2, [pc, #44]	; (d074 <usbdc_init+0x68>)
    d048:	687b      	ldr	r3, [r7, #4]
    d04a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d04c:	490b      	ldr	r1, [pc, #44]	; (d07c <usbdc_init+0x70>)
    d04e:	2000      	movs	r0, #0
    d050:	4b0b      	ldr	r3, [pc, #44]	; (d080 <usbdc_init+0x74>)
    d052:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d054:	490b      	ldr	r1, [pc, #44]	; (d084 <usbdc_init+0x78>)
    d056:	2001      	movs	r0, #1
    d058:	4b09      	ldr	r3, [pc, #36]	; (d080 <usbdc_init+0x74>)
    d05a:	4798      	blx	r3

	return 0;
    d05c:	2300      	movs	r3, #0
}
    d05e:	4618      	mov	r0, r3
    d060:	3710      	adds	r7, #16
    d062:	46bd      	mov	sp, r7
    d064:	bd80      	pop	{r7, pc}
    d066:	bf00      	nop
    d068:	0000f3d0 	.word	0x0000f3d0
    d06c:	0000396d 	.word	0x0000396d
    d070:	000033c5 	.word	0x000033c5
    d074:	20000de0 	.word	0x20000de0
    d078:	0000ecf1 	.word	0x0000ecf1
    d07c:	0000cd69 	.word	0x0000cd69
    d080:	00003471 	.word	0x00003471
    d084:	0000cf45 	.word	0x0000cf45

0000d088 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d088:	b580      	push	{r7, lr}
    d08a:	b082      	sub	sp, #8
    d08c:	af00      	add	r7, sp, #0
    d08e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d090:	6879      	ldr	r1, [r7, #4]
    d092:	4803      	ldr	r0, [pc, #12]	; (d0a0 <usbdc_register_function+0x18>)
    d094:	4b03      	ldr	r3, [pc, #12]	; (d0a4 <usbdc_register_function+0x1c>)
    d096:	4798      	blx	r3
}
    d098:	bf00      	nop
    d09a:	3708      	adds	r7, #8
    d09c:	46bd      	mov	sp, r7
    d09e:	bd80      	pop	{r7, pc}
    d0a0:	20000df0 	.word	0x20000df0
    d0a4:	00003a49 	.word	0x00003a49

0000d0a8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d0a8:	b580      	push	{r7, lr}
    d0aa:	b082      	sub	sp, #8
    d0ac:	af00      	add	r7, sp, #0
    d0ae:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d0b0:	4b0f      	ldr	r3, [pc, #60]	; (d0f0 <usbdc_start+0x48>)
    d0b2:	7e9b      	ldrb	r3, [r3, #26]
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	d002      	beq.n	d0be <usbdc_start+0x16>
		return ERR_BUSY;
    d0b8:	f06f 0303 	mvn.w	r3, #3
    d0bc:	e013      	b.n	d0e6 <usbdc_start+0x3e>
	}

	if (desces) {
    d0be:	687b      	ldr	r3, [r7, #4]
    d0c0:	2b00      	cmp	r3, #0
    d0c2:	d00e      	beq.n	d0e2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d0c4:	4a0a      	ldr	r2, [pc, #40]	; (d0f0 <usbdc_start+0x48>)
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d0ca:	687b      	ldr	r3, [r7, #4]
    d0cc:	681b      	ldr	r3, [r3, #0]
    d0ce:	79da      	ldrb	r2, [r3, #7]
    d0d0:	4b07      	ldr	r3, [pc, #28]	; (d0f0 <usbdc_start+0x48>)
    d0d2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d0d4:	4b06      	ldr	r3, [pc, #24]	; (d0f0 <usbdc_start+0x48>)
    d0d6:	2201      	movs	r2, #1
    d0d8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d0da:	4b06      	ldr	r3, [pc, #24]	; (d0f4 <usbdc_start+0x4c>)
    d0dc:	4798      	blx	r3
	return ERR_NONE;
    d0de:	2300      	movs	r3, #0
    d0e0:	e001      	b.n	d0e6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d0e2:	f06f 0308 	mvn.w	r3, #8
}
    d0e6:	4618      	mov	r0, r3
    d0e8:	3708      	adds	r7, #8
    d0ea:	46bd      	mov	sp, r7
    d0ec:	bd80      	pop	{r7, pc}
    d0ee:	bf00      	nop
    d0f0:	20000de0 	.word	0x20000de0
    d0f4:	00003495 	.word	0x00003495

0000d0f8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d0f8:	b580      	push	{r7, lr}
    d0fa:	af00      	add	r7, sp, #0
	usb_d_attach();
    d0fc:	4b01      	ldr	r3, [pc, #4]	; (d104 <usbdc_attach+0xc>)
    d0fe:	4798      	blx	r3
}
    d100:	bf00      	nop
    d102:	bd80      	pop	{r7, pc}
    d104:	000034a9 	.word	0x000034a9

0000d108 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d108:	b480      	push	{r7}
    d10a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d10c:	4b03      	ldr	r3, [pc, #12]	; (d11c <usbdc_get_ctrl_buffer+0x14>)
    d10e:	695b      	ldr	r3, [r3, #20]
}
    d110:	4618      	mov	r0, r3
    d112:	46bd      	mov	sp, r7
    d114:	f85d 7b04 	ldr.w	r7, [sp], #4
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	20000de0 	.word	0x20000de0

0000d120 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d120:	b480      	push	{r7}
    d122:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d124:	4b07      	ldr	r3, [pc, #28]	; (d144 <usbdc_get_state+0x24>)
    d126:	7e9b      	ldrb	r3, [r3, #26]
    d128:	f003 0310 	and.w	r3, r3, #16
    d12c:	2b00      	cmp	r3, #0
    d12e:	d001      	beq.n	d134 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d130:	2310      	movs	r3, #16
    d132:	e001      	b.n	d138 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d134:	4b03      	ldr	r3, [pc, #12]	; (d144 <usbdc_get_state+0x24>)
    d136:	7e9b      	ldrb	r3, [r3, #26]
}
    d138:	4618      	mov	r0, r3
    d13a:	46bd      	mov	sp, r7
    d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d140:	4770      	bx	lr
    d142:	bf00      	nop
    d144:	20000de0 	.word	0x20000de0

0000d148 <usb_get_u16>:
{
    d148:	b480      	push	{r7}
    d14a:	b083      	sub	sp, #12
    d14c:	af00      	add	r7, sp, #0
    d14e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	781b      	ldrb	r3, [r3, #0]
    d154:	b29a      	uxth	r2, r3
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	3301      	adds	r3, #1
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	b29b      	uxth	r3, r3
    d15e:	021b      	lsls	r3, r3, #8
    d160:	b29b      	uxth	r3, r3
    d162:	4413      	add	r3, r2
    d164:	b29b      	uxth	r3, r3
}
    d166:	4618      	mov	r0, r3
    d168:	370c      	adds	r7, #12
    d16a:	46bd      	mov	sp, r7
    d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d170:	4770      	bx	lr

0000d172 <usb_desc_len>:
{
    d172:	b480      	push	{r7}
    d174:	b083      	sub	sp, #12
    d176:	af00      	add	r7, sp, #0
    d178:	6078      	str	r0, [r7, #4]
	return desc[0];
    d17a:	687b      	ldr	r3, [r7, #4]
    d17c:	781b      	ldrb	r3, [r3, #0]
}
    d17e:	4618      	mov	r0, r3
    d180:	370c      	adds	r7, #12
    d182:	46bd      	mov	sp, r7
    d184:	f85d 7b04 	ldr.w	r7, [sp], #4
    d188:	4770      	bx	lr

0000d18a <usb_desc_type>:
{
    d18a:	b480      	push	{r7}
    d18c:	b083      	sub	sp, #12
    d18e:	af00      	add	r7, sp, #0
    d190:	6078      	str	r0, [r7, #4]
	return desc[1];
    d192:	687b      	ldr	r3, [r7, #4]
    d194:	3301      	adds	r3, #1
    d196:	781b      	ldrb	r3, [r3, #0]
}
    d198:	4618      	mov	r0, r3
    d19a:	370c      	adds	r7, #12
    d19c:	46bd      	mov	sp, r7
    d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1a2:	4770      	bx	lr

0000d1a4 <usb_desc_next>:
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b082      	sub	sp, #8
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d1ac:	6878      	ldr	r0, [r7, #4]
    d1ae:	4b05      	ldr	r3, [pc, #20]	; (d1c4 <usb_desc_next+0x20>)
    d1b0:	4798      	blx	r3
    d1b2:	4603      	mov	r3, r0
    d1b4:	461a      	mov	r2, r3
    d1b6:	687b      	ldr	r3, [r7, #4]
    d1b8:	4413      	add	r3, r2
}
    d1ba:	4618      	mov	r0, r3
    d1bc:	3708      	adds	r7, #8
    d1be:	46bd      	mov	sp, r7
    d1c0:	bd80      	pop	{r7, pc}
    d1c2:	bf00      	nop
    d1c4:	0000d173 	.word	0x0000d173

0000d1c8 <usb_cfg_desc_total_len>:
{
    d1c8:	b580      	push	{r7, lr}
    d1ca:	b082      	sub	sp, #8
    d1cc:	af00      	add	r7, sp, #0
    d1ce:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d1d0:	687b      	ldr	r3, [r7, #4]
    d1d2:	3302      	adds	r3, #2
    d1d4:	4618      	mov	r0, r3
    d1d6:	4b03      	ldr	r3, [pc, #12]	; (d1e4 <usb_cfg_desc_total_len+0x1c>)
    d1d8:	4798      	blx	r3
    d1da:	4603      	mov	r3, r0
}
    d1dc:	4618      	mov	r0, r3
    d1de:	3708      	adds	r7, #8
    d1e0:	46bd      	mov	sp, r7
    d1e2:	bd80      	pop	{r7, pc}
    d1e4:	0000d149 	.word	0x0000d149

0000d1e8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	b082      	sub	sp, #8
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d1f0:	6878      	ldr	r0, [r7, #4]
    d1f2:	4b05      	ldr	r3, [pc, #20]	; (d208 <usb_cfg_desc_next+0x20>)
    d1f4:	4798      	blx	r3
    d1f6:	4603      	mov	r3, r0
    d1f8:	461a      	mov	r2, r3
    d1fa:	687b      	ldr	r3, [r7, #4]
    d1fc:	4413      	add	r3, r2
}
    d1fe:	4618      	mov	r0, r3
    d200:	3708      	adds	r7, #8
    d202:	46bd      	mov	sp, r7
    d204:	bd80      	pop	{r7, pc}
    d206:	bf00      	nop
    d208:	0000d1c9 	.word	0x0000d1c9

0000d20c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d20c:	b580      	push	{r7, lr}
    d20e:	b084      	sub	sp, #16
    d210:	af00      	add	r7, sp, #0
    d212:	60f8      	str	r0, [r7, #12]
    d214:	60b9      	str	r1, [r7, #8]
    d216:	4613      	mov	r3, r2
    d218:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d21a:	e015      	b.n	d248 <usb_find_desc+0x3c>
		_desc_len_check();
    d21c:	68f8      	ldr	r0, [r7, #12]
    d21e:	4b0f      	ldr	r3, [pc, #60]	; (d25c <usb_find_desc+0x50>)
    d220:	4798      	blx	r3
    d222:	4603      	mov	r3, r0
    d224:	2b01      	cmp	r3, #1
    d226:	d801      	bhi.n	d22c <usb_find_desc+0x20>
    d228:	2300      	movs	r3, #0
    d22a:	e012      	b.n	d252 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d22c:	68f8      	ldr	r0, [r7, #12]
    d22e:	4b0c      	ldr	r3, [pc, #48]	; (d260 <usb_find_desc+0x54>)
    d230:	4798      	blx	r3
    d232:	4603      	mov	r3, r0
    d234:	461a      	mov	r2, r3
    d236:	79fb      	ldrb	r3, [r7, #7]
    d238:	4293      	cmp	r3, r2
    d23a:	d101      	bne.n	d240 <usb_find_desc+0x34>
			return desc;
    d23c:	68fb      	ldr	r3, [r7, #12]
    d23e:	e008      	b.n	d252 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d240:	68f8      	ldr	r0, [r7, #12]
    d242:	4b08      	ldr	r3, [pc, #32]	; (d264 <usb_find_desc+0x58>)
    d244:	4798      	blx	r3
    d246:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d248:	68fa      	ldr	r2, [r7, #12]
    d24a:	68bb      	ldr	r3, [r7, #8]
    d24c:	429a      	cmp	r2, r3
    d24e:	d3e5      	bcc.n	d21c <usb_find_desc+0x10>
	}
	return NULL;
    d250:	2300      	movs	r3, #0
}
    d252:	4618      	mov	r0, r3
    d254:	3710      	adds	r7, #16
    d256:	46bd      	mov	sp, r7
    d258:	bd80      	pop	{r7, pc}
    d25a:	bf00      	nop
    d25c:	0000d173 	.word	0x0000d173
    d260:	0000d18b 	.word	0x0000d18b
    d264:	0000d1a5 	.word	0x0000d1a5

0000d268 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d268:	b580      	push	{r7, lr}
    d26a:	b082      	sub	sp, #8
    d26c:	af00      	add	r7, sp, #0
    d26e:	6078      	str	r0, [r7, #4]
    d270:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d272:	e019      	b.n	d2a8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d274:	6878      	ldr	r0, [r7, #4]
    d276:	4b12      	ldr	r3, [pc, #72]	; (d2c0 <usb_find_ep_desc+0x58>)
    d278:	4798      	blx	r3
    d27a:	4603      	mov	r3, r0
    d27c:	2b01      	cmp	r3, #1
    d27e:	d801      	bhi.n	d284 <usb_find_ep_desc+0x1c>
    d280:	2300      	movs	r3, #0
    d282:	e018      	b.n	d2b6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d284:	6878      	ldr	r0, [r7, #4]
    d286:	4b0f      	ldr	r3, [pc, #60]	; (d2c4 <usb_find_ep_desc+0x5c>)
    d288:	4798      	blx	r3
    d28a:	4603      	mov	r3, r0
    d28c:	2b04      	cmp	r3, #4
    d28e:	d010      	beq.n	d2b2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d290:	6878      	ldr	r0, [r7, #4]
    d292:	4b0c      	ldr	r3, [pc, #48]	; (d2c4 <usb_find_ep_desc+0x5c>)
    d294:	4798      	blx	r3
    d296:	4603      	mov	r3, r0
    d298:	2b05      	cmp	r3, #5
    d29a:	d101      	bne.n	d2a0 <usb_find_ep_desc+0x38>
			return desc;
    d29c:	687b      	ldr	r3, [r7, #4]
    d29e:	e00a      	b.n	d2b6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d2a0:	6878      	ldr	r0, [r7, #4]
    d2a2:	4b09      	ldr	r3, [pc, #36]	; (d2c8 <usb_find_ep_desc+0x60>)
    d2a4:	4798      	blx	r3
    d2a6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d2a8:	687a      	ldr	r2, [r7, #4]
    d2aa:	683b      	ldr	r3, [r7, #0]
    d2ac:	429a      	cmp	r2, r3
    d2ae:	d3e1      	bcc.n	d274 <usb_find_ep_desc+0xc>
    d2b0:	e000      	b.n	d2b4 <usb_find_ep_desc+0x4c>
			break;
    d2b2:	bf00      	nop
	}
	return NULL;
    d2b4:	2300      	movs	r3, #0
}
    d2b6:	4618      	mov	r0, r3
    d2b8:	3708      	adds	r7, #8
    d2ba:	46bd      	mov	sp, r7
    d2bc:	bd80      	pop	{r7, pc}
    d2be:	bf00      	nop
    d2c0:	0000d173 	.word	0x0000d173
    d2c4:	0000d18b 	.word	0x0000d18b
    d2c8:	0000d1a5 	.word	0x0000d1a5

0000d2cc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d2cc:	b580      	push	{r7, lr}
    d2ce:	b084      	sub	sp, #16
    d2d0:	af00      	add	r7, sp, #0
    d2d2:	60f8      	str	r0, [r7, #12]
    d2d4:	60b9      	str	r1, [r7, #8]
    d2d6:	4613      	mov	r3, r2
    d2d8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d2da:	2202      	movs	r2, #2
    d2dc:	68b9      	ldr	r1, [r7, #8]
    d2de:	68f8      	ldr	r0, [r7, #12]
    d2e0:	4b15      	ldr	r3, [pc, #84]	; (d338 <usb_find_cfg_desc+0x6c>)
    d2e2:	4798      	blx	r3
    d2e4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d2e6:	68fb      	ldr	r3, [r7, #12]
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d11a      	bne.n	d322 <usb_find_cfg_desc+0x56>
		return NULL;
    d2ec:	2300      	movs	r3, #0
    d2ee:	e01f      	b.n	d330 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d2f0:	68f8      	ldr	r0, [r7, #12]
    d2f2:	4b12      	ldr	r3, [pc, #72]	; (d33c <usb_find_cfg_desc+0x70>)
    d2f4:	4798      	blx	r3
    d2f6:	4603      	mov	r3, r0
    d2f8:	2b01      	cmp	r3, #1
    d2fa:	d801      	bhi.n	d300 <usb_find_cfg_desc+0x34>
    d2fc:	2300      	movs	r3, #0
    d2fe:	e017      	b.n	d330 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d300:	68fb      	ldr	r3, [r7, #12]
    d302:	3301      	adds	r3, #1
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	2b02      	cmp	r3, #2
    d308:	d110      	bne.n	d32c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d30a:	68fb      	ldr	r3, [r7, #12]
    d30c:	3305      	adds	r3, #5
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	79fa      	ldrb	r2, [r7, #7]
    d312:	429a      	cmp	r2, r3
    d314:	d101      	bne.n	d31a <usb_find_cfg_desc+0x4e>
			return desc;
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	e00a      	b.n	d330 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d31a:	68f8      	ldr	r0, [r7, #12]
    d31c:	4b08      	ldr	r3, [pc, #32]	; (d340 <usb_find_cfg_desc+0x74>)
    d31e:	4798      	blx	r3
    d320:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d322:	68fa      	ldr	r2, [r7, #12]
    d324:	68bb      	ldr	r3, [r7, #8]
    d326:	429a      	cmp	r2, r3
    d328:	d3e2      	bcc.n	d2f0 <usb_find_cfg_desc+0x24>
    d32a:	e000      	b.n	d32e <usb_find_cfg_desc+0x62>
			break;
    d32c:	bf00      	nop
	}
	return NULL;
    d32e:	2300      	movs	r3, #0
}
    d330:	4618      	mov	r0, r3
    d332:	3710      	adds	r7, #16
    d334:	46bd      	mov	sp, r7
    d336:	bd80      	pop	{r7, pc}
    d338:	0000d20d 	.word	0x0000d20d
    d33c:	0000d173 	.word	0x0000d173
    d340:	0000d1e9 	.word	0x0000d1e9

0000d344 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d344:	b580      	push	{r7, lr}
    d346:	b086      	sub	sp, #24
    d348:	af00      	add	r7, sp, #0
    d34a:	60f8      	str	r0, [r7, #12]
    d34c:	60b9      	str	r1, [r7, #8]
    d34e:	4613      	mov	r3, r2
    d350:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d352:	2300      	movs	r3, #0
    d354:	75fb      	strb	r3, [r7, #23]
    d356:	e020      	b.n	d39a <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d358:	2203      	movs	r2, #3
    d35a:	68b9      	ldr	r1, [r7, #8]
    d35c:	68f8      	ldr	r0, [r7, #12]
    d35e:	4b13      	ldr	r3, [pc, #76]	; (d3ac <usb_find_str_desc+0x68>)
    d360:	4798      	blx	r3
    d362:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d364:	68fb      	ldr	r3, [r7, #12]
    d366:	2b00      	cmp	r3, #0
    d368:	d015      	beq.n	d396 <usb_find_str_desc+0x52>
			_desc_len_check();
    d36a:	68f8      	ldr	r0, [r7, #12]
    d36c:	4b10      	ldr	r3, [pc, #64]	; (d3b0 <usb_find_str_desc+0x6c>)
    d36e:	4798      	blx	r3
    d370:	4603      	mov	r3, r0
    d372:	2b01      	cmp	r3, #1
    d374:	d801      	bhi.n	d37a <usb_find_str_desc+0x36>
    d376:	2300      	movs	r3, #0
    d378:	e014      	b.n	d3a4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d37a:	7dfa      	ldrb	r2, [r7, #23]
    d37c:	79fb      	ldrb	r3, [r7, #7]
    d37e:	429a      	cmp	r2, r3
    d380:	d101      	bne.n	d386 <usb_find_str_desc+0x42>
				return desc;
    d382:	68fb      	ldr	r3, [r7, #12]
    d384:	e00e      	b.n	d3a4 <usb_find_str_desc+0x60>
			}
			i++;
    d386:	7dfb      	ldrb	r3, [r7, #23]
    d388:	3301      	adds	r3, #1
    d38a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d38c:	68f8      	ldr	r0, [r7, #12]
    d38e:	4b09      	ldr	r3, [pc, #36]	; (d3b4 <usb_find_str_desc+0x70>)
    d390:	4798      	blx	r3
    d392:	60f8      	str	r0, [r7, #12]
    d394:	e001      	b.n	d39a <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d396:	2300      	movs	r3, #0
    d398:	e004      	b.n	d3a4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d39a:	68fa      	ldr	r2, [r7, #12]
    d39c:	68bb      	ldr	r3, [r7, #8]
    d39e:	429a      	cmp	r2, r3
    d3a0:	d3da      	bcc.n	d358 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d3a2:	2300      	movs	r3, #0
}
    d3a4:	4618      	mov	r0, r3
    d3a6:	3718      	adds	r7, #24
    d3a8:	46bd      	mov	sp, r7
    d3aa:	bd80      	pop	{r7, pc}
    d3ac:	0000d20d 	.word	0x0000d20d
    d3b0:	0000d173 	.word	0x0000d173
    d3b4:	0000d1a5 	.word	0x0000d1a5

0000d3b8 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    d3b8:	b480      	push	{r7}
    d3ba:	b083      	sub	sp, #12
    d3bc:	af00      	add	r7, sp, #0
    d3be:	6078      	str	r0, [r7, #4]
    d3c0:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    d3c2:	687b      	ldr	r3, [r7, #4]
    d3c4:	683a      	ldr	r2, [r7, #0]
    d3c6:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    d3c8:	687b      	ldr	r3, [r7, #4]
    d3ca:	4618      	mov	r0, r3
    d3cc:	370c      	adds	r7, #12
    d3ce:	46bd      	mov	sp, r7
    d3d0:	bc80      	pop	{r7}
    d3d2:	4770      	bx	lr

0000d3d4 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    d3d4:	b480      	push	{r7}
    d3d6:	b083      	sub	sp, #12
    d3d8:	af00      	add	r7, sp, #0
    d3da:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	4618      	mov	r0, r3
    d3e0:	370c      	adds	r7, #12
    d3e2:	46bd      	mov	sp, r7
    d3e4:	bc80      	pop	{r7}
    d3e6:	4770      	bx	lr

0000d3e8 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    d3e8:	b580      	push	{r7, lr}
    d3ea:	b082      	sub	sp, #8
    d3ec:	af00      	add	r7, sp, #0
    d3ee:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	4a23      	ldr	r2, [pc, #140]	; (d480 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d3f4:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	4a21      	ldr	r2, [pc, #132]	; (d480 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    d3fa:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    d3fc:	687b      	ldr	r3, [r7, #4]
    d3fe:	691a      	ldr	r2, [r3, #16]
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	330c      	adds	r3, #12
    d404:	4619      	mov	r1, r3
    d406:	4610      	mov	r0, r2
    d408:	4b1e      	ldr	r3, [pc, #120]	; (d484 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    d40a:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	691b      	ldr	r3, [r3, #16]
    d410:	4618      	mov	r0, r3
    d412:	4b1d      	ldr	r3, [pc, #116]	; (d488 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d414:	4798      	blx	r3
    d416:	4603      	mov	r3, r0
    d418:	b2da      	uxtb	r2, r3
    d41a:	687b      	ldr	r3, [r7, #4]
    d41c:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    d41e:	687b      	ldr	r3, [r7, #4]
    d420:	7d1b      	ldrb	r3, [r3, #20]
    d422:	2b00      	cmp	r3, #0
    d424:	bf0c      	ite	eq
    d426:	2301      	moveq	r3, #1
    d428:	2300      	movne	r3, #0
    d42a:	b2da      	uxtb	r2, r3
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	725a      	strb	r2, [r3, #9]
	if (isOK)
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	7a5b      	ldrb	r3, [r3, #9]
    d434:	b2db      	uxtb	r3, r3
    d436:	2b00      	cmp	r3, #0
    d438:	d116      	bne.n	d468 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	691b      	ldr	r3, [r3, #16]
    d43e:	4618      	mov	r0, r3
    d440:	4b12      	ldr	r3, [pc, #72]	; (d48c <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    d442:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	691b      	ldr	r3, [r3, #16]
    d448:	4618      	mov	r0, r3
    d44a:	4b0f      	ldr	r3, [pc, #60]	; (d488 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    d44c:	4798      	blx	r3
    d44e:	4603      	mov	r3, r0
    d450:	b2da      	uxtb	r2, r3
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    d456:	687b      	ldr	r3, [r7, #4]
    d458:	7d1b      	ldrb	r3, [r3, #20]
    d45a:	2b00      	cmp	r3, #0
    d45c:	bf0c      	ite	eq
    d45e:	2301      	moveq	r3, #1
    d460:	2300      	movne	r3, #0
    d462:	b2da      	uxtb	r2, r3
    d464:	687b      	ldr	r3, [r7, #4]
    d466:	725a      	strb	r2, [r3, #9]
	}
	
	i2c_initiated=isOK;
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	7a5b      	ldrb	r3, [r3, #9]
    d46c:	b2da      	uxtb	r2, r3
    d46e:	687b      	ldr	r3, [r7, #4]
    d470:	721a      	strb	r2, [r3, #8]
	return isOK;
    d472:	687b      	ldr	r3, [r7, #4]
    d474:	7a5b      	ldrb	r3, [r3, #9]
    d476:	b2db      	uxtb	r3, r3
	
}
    d478:	4618      	mov	r0, r3
    d47a:	3708      	adds	r7, #8
    d47c:	46bd      	mov	sp, r7
    d47e:	bd80      	pop	{r7, pc}
    d480:	20000e00 	.word	0x20000e00
    d484:	00002767 	.word	0x00002767
    d488:	000026ed 	.word	0x000026ed
    d48c:	0000270d 	.word	0x0000270d

0000d490 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    d498:	460b      	mov	r3, r1
    d49a:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	691b      	ldr	r3, [r3, #16]
    d4a0:	78fa      	ldrb	r2, [r7, #3]
    d4a2:	b211      	sxth	r1, r2
    d4a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d4a8:	4618      	mov	r0, r3
    d4aa:	4b03      	ldr	r3, [pc, #12]	; (d4b8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    d4ac:	4798      	blx	r3
    d4ae:	4603      	mov	r3, r0
}
    d4b0:	4618      	mov	r0, r3
    d4b2:	3708      	adds	r7, #8
    d4b4:	46bd      	mov	sp, r7
    d4b6:	bd80      	pop	{r7, pc}
    d4b8:	0000272d 	.word	0x0000272d

0000d4bc <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    d4bc:	b580      	push	{r7, lr}
    d4be:	b086      	sub	sp, #24
    d4c0:	af00      	add	r7, sp, #0
    d4c2:	60f8      	str	r0, [r7, #12]
    d4c4:	60b9      	str	r1, [r7, #8]
    d4c6:	4613      	mov	r3, r2
    d4c8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    d4ca:	68fb      	ldr	r3, [r7, #12]
    d4cc:	68db      	ldr	r3, [r3, #12]
    d4ce:	88fa      	ldrh	r2, [r7, #6]
    d4d0:	68b9      	ldr	r1, [r7, #8]
    d4d2:	4618      	mov	r0, r3
    d4d4:	4b03      	ldr	r3, [pc, #12]	; (d4e4 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    d4d6:	4798      	blx	r3
    d4d8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    d4da:	697b      	ldr	r3, [r7, #20]
}
    d4dc:	4618      	mov	r0, r3
    d4de:	3718      	adds	r7, #24
    d4e0:	46bd      	mov	sp, r7
    d4e2:	bd80      	pop	{r7, pc}
    d4e4:	0000ea99 	.word	0x0000ea99

0000d4e8 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    d4e8:	b580      	push	{r7, lr}
    d4ea:	b086      	sub	sp, #24
    d4ec:	af00      	add	r7, sp, #0
    d4ee:	60f8      	str	r0, [r7, #12]
    d4f0:	60b9      	str	r1, [r7, #8]
    d4f2:	4613      	mov	r3, r2
    d4f4:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    d4f6:	68fb      	ldr	r3, [r7, #12]
    d4f8:	68db      	ldr	r3, [r3, #12]
    d4fa:	88fa      	ldrh	r2, [r7, #6]
    d4fc:	68b9      	ldr	r1, [r7, #8]
    d4fe:	4618      	mov	r0, r3
    d500:	4b03      	ldr	r3, [pc, #12]	; (d510 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    d502:	4798      	blx	r3
    d504:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    d506:	697b      	ldr	r3, [r7, #20]
}
    d508:	4618      	mov	r0, r3
    d50a:	3718      	adds	r7, #24
    d50c:	46bd      	mov	sp, r7
    d50e:	bd80      	pop	{r7, pc}
    d510:	0000eae9 	.word	0x0000eae9

0000d514 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    d514:	b480      	push	{r7}
    d516:	b083      	sub	sp, #12
    d518:	af00      	add	r7, sp, #0
    d51a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	4618      	mov	r0, r3
    d520:	370c      	adds	r7, #12
    d522:	46bd      	mov	sp, r7
    d524:	bc80      	pop	{r7}
    d526:	4770      	bx	lr

0000d528 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    d528:	b480      	push	{r7}
    d52a:	b083      	sub	sp, #12
    d52c:	af00      	add	r7, sp, #0
    d52e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	4618      	mov	r0, r3
    d534:	370c      	adds	r7, #12
    d536:	46bd      	mov	sp, r7
    d538:	bc80      	pop	{r7}
    d53a:	4770      	bx	lr

0000d53c <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    d53c:	b480      	push	{r7}
    d53e:	b085      	sub	sp, #20
    d540:	af00      	add	r7, sp, #0
    d542:	60f8      	str	r0, [r7, #12]
    d544:	460b      	mov	r3, r1
    d546:	607a      	str	r2, [r7, #4]
    d548:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	681a      	ldr	r2, [r3, #0]
    d54e:	68fb      	ldr	r3, [r7, #12]
    d550:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	685a      	ldr	r2, [r3, #4]
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    d55a:	68fb      	ldr	r3, [r7, #12]
    d55c:	7afa      	ldrb	r2, [r7, #11]
    d55e:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    d560:	68fb      	ldr	r3, [r7, #12]
    d562:	687a      	ldr	r2, [r7, #4]
    d564:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    d566:	68fb      	ldr	r3, [r7, #12]
    d568:	68db      	ldr	r3, [r3, #12]
    d56a:	7a5b      	ldrb	r3, [r3, #9]
    d56c:	b2da      	uxtb	r2, r3
    d56e:	68fb      	ldr	r3, [r7, #12]
    d570:	719a      	strb	r2, [r3, #6]
	return isOK;
    d572:	68fb      	ldr	r3, [r7, #12]
    d574:	799b      	ldrb	r3, [r3, #6]
    d576:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    d578:	4618      	mov	r0, r3
    d57a:	3714      	adds	r7, #20
    d57c:	46bd      	mov	sp, r7
    d57e:	bc80      	pop	{r7}
    d580:	4770      	bx	lr

0000d582 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    d582:	b480      	push	{r7}
    d584:	b083      	sub	sp, #12
    d586:	af00      	add	r7, sp, #0
    d588:	6078      	str	r0, [r7, #4]
    d58a:	460b      	mov	r3, r1
    d58c:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    d58e:	78fb      	ldrb	r3, [r7, #3]
    d590:	f003 0307 	and.w	r3, r3, #7
    d594:	b2db      	uxtb	r3, r3
}
    d596:	4618      	mov	r0, r3
    d598:	370c      	adds	r7, #12
    d59a:	46bd      	mov	sp, r7
    d59c:	bc80      	pop	{r7}
    d59e:	4770      	bx	lr

0000d5a0 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    d5a0:	b480      	push	{r7}
    d5a2:	b083      	sub	sp, #12
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	6078      	str	r0, [r7, #4]
    d5a8:	4608      	mov	r0, r1
    d5aa:	4611      	mov	r1, r2
    d5ac:	461a      	mov	r2, r3
    d5ae:	4603      	mov	r3, r0
    d5b0:	70fb      	strb	r3, [r7, #3]
    d5b2:	460b      	mov	r3, r1
    d5b4:	70bb      	strb	r3, [r7, #2]
    d5b6:	4613      	mov	r3, r2
    d5b8:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    d5ba:	78fb      	ldrb	r3, [r7, #3]
    d5bc:	2b07      	cmp	r3, #7
    d5be:	dc01      	bgt.n	d5c4 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    d5c0:	78bb      	ldrb	r3, [r7, #2]
    d5c2:	e000      	b.n	d5c6 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    d5c4:	787b      	ldrb	r3, [r7, #1]
}
    d5c6:	4618      	mov	r0, r3
    d5c8:	370c      	adds	r7, #12
    d5ca:	46bd      	mov	sp, r7
    d5cc:	bc80      	pop	{r7}
    d5ce:	4770      	bx	lr

0000d5d0 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    d5d0:	b580      	push	{r7, lr}
    d5d2:	b082      	sub	sp, #8
    d5d4:	af00      	add	r7, sp, #0
    d5d6:	6078      	str	r0, [r7, #4]
    d5d8:	460b      	mov	r3, r1
    d5da:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    d5dc:	687b      	ldr	r3, [r7, #4]
    d5de:	68da      	ldr	r2, [r3, #12]
    d5e0:	687b      	ldr	r3, [r7, #4]
    d5e2:	7a1b      	ldrb	r3, [r3, #8]
    d5e4:	4619      	mov	r1, r3
    d5e6:	4610      	mov	r0, r2
    d5e8:	4b0a      	ldr	r3, [pc, #40]	; (d614 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    d5ea:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    d5ec:	687b      	ldr	r3, [r7, #4]
    d5ee:	68db      	ldr	r3, [r3, #12]
    d5f0:	1cf9      	adds	r1, r7, #3
    d5f2:	2201      	movs	r2, #1
    d5f4:	4618      	mov	r0, r3
    d5f6:	4b08      	ldr	r3, [pc, #32]	; (d618 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    d5f8:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	68db      	ldr	r3, [r3, #12]
    d5fe:	6879      	ldr	r1, [r7, #4]
    d600:	2201      	movs	r2, #1
    d602:	4618      	mov	r0, r3
    d604:	4b05      	ldr	r3, [pc, #20]	; (d61c <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    d606:	4798      	blx	r3

	return registerValue;
    d608:	687b      	ldr	r3, [r7, #4]
    d60a:	781b      	ldrb	r3, [r3, #0]
}
    d60c:	4618      	mov	r0, r3
    d60e:	3708      	adds	r7, #8
    d610:	46bd      	mov	sp, r7
    d612:	bd80      	pop	{r7, pc}
    d614:	0000d491 	.word	0x0000d491
    d618:	0000d4bd 	.word	0x0000d4bd
    d61c:	0000d4e9 	.word	0x0000d4e9

0000d620 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    d620:	b580      	push	{r7, lr}
    d622:	b084      	sub	sp, #16
    d624:	af00      	add	r7, sp, #0
    d626:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	68da      	ldr	r2, [r3, #12]
    d62c:	687b      	ldr	r3, [r7, #4]
    d62e:	7a1b      	ldrb	r3, [r3, #8]
    d630:	4619      	mov	r1, r3
    d632:	4610      	mov	r0, r2
    d634:	4b06      	ldr	r3, [pc, #24]	; (d650 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    d636:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    d638:	2109      	movs	r1, #9
    d63a:	6878      	ldr	r0, [r7, #4]
    d63c:	4b05      	ldr	r3, [pc, #20]	; (d654 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    d63e:	4798      	blx	r3
    d640:	4603      	mov	r3, r0
    d642:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    d644:	7bfb      	ldrb	r3, [r7, #15]
}
    d646:	4618      	mov	r0, r3
    d648:	3710      	adds	r7, #16
    d64a:	46bd      	mov	sp, r7
    d64c:	bd80      	pop	{r7, pc}
    d64e:	bf00      	nop
    d650:	0000d491 	.word	0x0000d491
    d654:	0000d5d1 	.word	0x0000d5d1

0000d658 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    d658:	b580      	push	{r7, lr}
    d65a:	b084      	sub	sp, #16
    d65c:	af00      	add	r7, sp, #0
    d65e:	6078      	str	r0, [r7, #4]
    d660:	460b      	mov	r3, r1
    d662:	70fb      	strb	r3, [r7, #3]
    d664:	4613      	mov	r3, r2
    d666:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    d668:	687b      	ldr	r3, [r7, #4]
    d66a:	68da      	ldr	r2, [r3, #12]
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	7a1b      	ldrb	r3, [r3, #8]
    d670:	4619      	mov	r1, r3
    d672:	4610      	mov	r0, r2
    d674:	4b09      	ldr	r3, [pc, #36]	; (d69c <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    d676:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    d678:	78fb      	ldrb	r3, [r7, #3]
    d67a:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    d67c:	78bb      	ldrb	r3, [r7, #2]
    d67e:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    d680:	687b      	ldr	r3, [r7, #4]
    d682:	68db      	ldr	r3, [r3, #12]
    d684:	f107 010c 	add.w	r1, r7, #12
    d688:	2202      	movs	r2, #2
    d68a:	4618      	mov	r0, r3
    d68c:	4b04      	ldr	r3, [pc, #16]	; (d6a0 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    d68e:	4798      	blx	r3
    d690:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    d692:	4618      	mov	r0, r3
    d694:	3710      	adds	r7, #16
    d696:	46bd      	mov	sp, r7
    d698:	bd80      	pop	{r7, pc}
    d69a:	bf00      	nop
    d69c:	0000d491 	.word	0x0000d491
    d6a0:	0000d4bd 	.word	0x0000d4bd

0000d6a4 <_ZN14MCP23008_Class12SetPortInputEv>:
	//i2cClass->Irq_Enable();
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b084      	sub	sp, #16
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d6ac:	2300      	movs	r3, #0
    d6ae:	73fb      	strb	r3, [r7, #15]
    d6b0:	7bfb      	ldrb	r3, [r7, #15]
    d6b2:	2b07      	cmp	r3, #7
    d6b4:	dc0f      	bgt.n	d6d6 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    d6b6:	7bfb      	ldrb	r3, [r7, #15]
    d6b8:	2201      	movs	r2, #1
    d6ba:	4619      	mov	r1, r3
    d6bc:	6878      	ldr	r0, [r7, #4]
    d6be:	4b08      	ldr	r3, [pc, #32]	; (d6e0 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    d6c0:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    d6c2:	7bfb      	ldrb	r3, [r7, #15]
    d6c4:	2201      	movs	r2, #1
    d6c6:	4619      	mov	r1, r3
    d6c8:	6878      	ldr	r0, [r7, #4]
    d6ca:	4b06      	ldr	r3, [pc, #24]	; (d6e4 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    d6cc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d6ce:	7bfb      	ldrb	r3, [r7, #15]
    d6d0:	3301      	adds	r3, #1
    d6d2:	73fb      	strb	r3, [r7, #15]
    d6d4:	e7ec      	b.n	d6b0 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    d6d6:	bf00      	nop
    d6d8:	3710      	adds	r7, #16
    d6da:	46bd      	mov	sp, r7
    d6dc:	bd80      	pop	{r7, pc}
    d6de:	bf00      	nop
    d6e0:	0000d7a9 	.word	0x0000d7a9
    d6e4:	0000d88d 	.word	0x0000d88d

0000d6e8 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b084      	sub	sp, #16
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    d6f0:	2300      	movs	r3, #0
    d6f2:	73fb      	strb	r3, [r7, #15]
    d6f4:	7bfb      	ldrb	r3, [r7, #15]
    d6f6:	2b07      	cmp	r3, #7
    d6f8:	dc09      	bgt.n	d70e <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    d6fa:	7bfb      	ldrb	r3, [r7, #15]
    d6fc:	2200      	movs	r2, #0
    d6fe:	4619      	mov	r1, r3
    d700:	6878      	ldr	r0, [r7, #4]
    d702:	4b05      	ldr	r3, [pc, #20]	; (d718 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    d704:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    d706:	7bfb      	ldrb	r3, [r7, #15]
    d708:	3301      	adds	r3, #1
    d70a:	73fb      	strb	r3, [r7, #15]
    d70c:	e7f2      	b.n	d6f4 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    d70e:	bf00      	nop
    d710:	3710      	adds	r7, #16
    d712:	46bd      	mov	sp, r7
    d714:	bd80      	pop	{r7, pc}
    d716:	bf00      	nop
    d718:	0000d7a9 	.word	0x0000d7a9

0000d71c <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    d71c:	b580      	push	{r7, lr}
    d71e:	b084      	sub	sp, #16
    d720:	af00      	add	r7, sp, #0
    d722:	6078      	str	r0, [r7, #4]
    d724:	4608      	mov	r0, r1
    d726:	4611      	mov	r1, r2
    d728:	461a      	mov	r2, r3
    d72a:	4603      	mov	r3, r0
    d72c:	70fb      	strb	r3, [r7, #3]
    d72e:	460b      	mov	r3, r1
    d730:	70bb      	strb	r3, [r7, #2]
    d732:	4613      	mov	r3, r2
    d734:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    d736:	787b      	ldrb	r3, [r7, #1]
    d738:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    d73a:	78fb      	ldrb	r3, [r7, #3]
    d73c:	4619      	mov	r1, r3
    d73e:	6878      	ldr	r0, [r7, #4]
    d740:	4b16      	ldr	r3, [pc, #88]	; (d79c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    d742:	4798      	blx	r3
    d744:	4603      	mov	r3, r0
    d746:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    d748:	7bfb      	ldrb	r3, [r7, #15]
    d74a:	4619      	mov	r1, r3
    d74c:	6878      	ldr	r0, [r7, #4]
    d74e:	4b14      	ldr	r3, [pc, #80]	; (d7a0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    d750:	4798      	blx	r3
    d752:	4603      	mov	r3, r0
    d754:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    d756:	78bb      	ldrb	r3, [r7, #2]
    d758:	2b00      	cmp	r3, #0
    d75a:	d009      	beq.n	d770 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    d75c:	7bba      	ldrb	r2, [r7, #14]
    d75e:	7b7b      	ldrb	r3, [r7, #13]
    d760:	4619      	mov	r1, r3
    d762:	2301      	movs	r3, #1
    d764:	408b      	lsls	r3, r1
    d766:	b2db      	uxtb	r3, r3
    d768:	4313      	orrs	r3, r2
    d76a:	b2db      	uxtb	r3, r3
    d76c:	73bb      	strb	r3, [r7, #14]
    d76e:	e00a      	b.n	d786 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    d770:	7bba      	ldrb	r2, [r7, #14]
    d772:	7b7b      	ldrb	r3, [r7, #13]
    d774:	4619      	mov	r1, r3
    d776:	2301      	movs	r3, #1
    d778:	408b      	lsls	r3, r1
    d77a:	b2db      	uxtb	r3, r3
    d77c:	43db      	mvns	r3, r3
    d77e:	b2db      	uxtb	r3, r3
    d780:	4013      	ands	r3, r2
    d782:	b2db      	uxtb	r3, r3
    d784:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    d786:	7bba      	ldrb	r2, [r7, #14]
    d788:	7bfb      	ldrb	r3, [r7, #15]
    d78a:	4619      	mov	r1, r3
    d78c:	6878      	ldr	r0, [r7, #4]
    d78e:	4b05      	ldr	r3, [pc, #20]	; (d7a4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    d790:	4798      	blx	r3
}
    d792:	bf00      	nop
    d794:	3710      	adds	r7, #16
    d796:	46bd      	mov	sp, r7
    d798:	bd80      	pop	{r7, pc}
    d79a:	bf00      	nop
    d79c:	0000d583 	.word	0x0000d583
    d7a0:	0000d5d1 	.word	0x0000d5d1
    d7a4:	0000d659 	.word	0x0000d659

0000d7a8 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    d7a8:	b590      	push	{r4, r7, lr}
    d7aa:	b085      	sub	sp, #20
    d7ac:	af02      	add	r7, sp, #8
    d7ae:	6078      	str	r0, [r7, #4]
    d7b0:	460b      	mov	r3, r1
    d7b2:	70fb      	strb	r3, [r7, #3]
    d7b4:	4613      	mov	r3, r2
    d7b6:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    d7b8:	78bb      	ldrb	r3, [r7, #2]
    d7ba:	2b01      	cmp	r3, #1
    d7bc:	bf0c      	ite	eq
    d7be:	2301      	moveq	r3, #1
    d7c0:	2300      	movne	r3, #0
    d7c2:	b2db      	uxtb	r3, r3
    d7c4:	461a      	mov	r2, r3
    d7c6:	78f9      	ldrb	r1, [r7, #3]
    d7c8:	2300      	movs	r3, #0
    d7ca:	9300      	str	r3, [sp, #0]
    d7cc:	2300      	movs	r3, #0
    d7ce:	6878      	ldr	r0, [r7, #4]
    d7d0:	4c02      	ldr	r4, [pc, #8]	; (d7dc <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    d7d2:	47a0      	blx	r4
}
    d7d4:	bf00      	nop
    d7d6:	370c      	adds	r7, #12
    d7d8:	46bd      	mov	sp, r7
    d7da:	bd90      	pop	{r4, r7, pc}
    d7dc:	0000d71d 	.word	0x0000d71d

0000d7e0 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    d7e0:	b590      	push	{r4, r7, lr}
    d7e2:	b085      	sub	sp, #20
    d7e4:	af00      	add	r7, sp, #0
    d7e6:	6078      	str	r0, [r7, #4]
    d7e8:	460b      	mov	r3, r1
    d7ea:	70fb      	strb	r3, [r7, #3]
    d7ec:	4613      	mov	r3, r2
    d7ee:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    d7f0:	78fb      	ldrb	r3, [r7, #3]
    d7f2:	4619      	mov	r1, r3
    d7f4:	6878      	ldr	r0, [r7, #4]
    d7f6:	4b21      	ldr	r3, [pc, #132]	; (d87c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    d7f8:	4798      	blx	r3
    d7fa:	4603      	mov	r3, r0
    d7fc:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    d7fe:	78f9      	ldrb	r1, [r7, #3]
    d800:	230a      	movs	r3, #10
    d802:	220a      	movs	r2, #10
    d804:	6878      	ldr	r0, [r7, #4]
    d806:	4c1e      	ldr	r4, [pc, #120]	; (d880 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d808:	47a0      	blx	r4
    d80a:	4603      	mov	r3, r0
    d80c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    d80e:	7bfb      	ldrb	r3, [r7, #15]
    d810:	4619      	mov	r1, r3
    d812:	6878      	ldr	r0, [r7, #4]
    d814:	4b1b      	ldr	r3, [pc, #108]	; (d884 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    d816:	4798      	blx	r3
    d818:	4603      	mov	r3, r0
    d81a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    d81c:	78bb      	ldrb	r3, [r7, #2]
    d81e:	2b00      	cmp	r3, #0
    d820:	d009      	beq.n	d836 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    d822:	7bba      	ldrb	r2, [r7, #14]
    d824:	7b7b      	ldrb	r3, [r7, #13]
    d826:	4619      	mov	r1, r3
    d828:	2301      	movs	r3, #1
    d82a:	408b      	lsls	r3, r1
    d82c:	b2db      	uxtb	r3, r3
    d82e:	4313      	orrs	r3, r2
    d830:	b2db      	uxtb	r3, r3
    d832:	73bb      	strb	r3, [r7, #14]
    d834:	e00a      	b.n	d84c <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    d836:	7bba      	ldrb	r2, [r7, #14]
    d838:	7b7b      	ldrb	r3, [r7, #13]
    d83a:	4619      	mov	r1, r3
    d83c:	2301      	movs	r3, #1
    d83e:	408b      	lsls	r3, r1
    d840:	b2db      	uxtb	r3, r3
    d842:	43db      	mvns	r3, r3
    d844:	b2db      	uxtb	r3, r3
    d846:	4013      	ands	r3, r2
    d848:	b2db      	uxtb	r3, r3
    d84a:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    d84c:	78f9      	ldrb	r1, [r7, #3]
    d84e:	2309      	movs	r3, #9
    d850:	2209      	movs	r2, #9
    d852:	6878      	ldr	r0, [r7, #4]
    d854:	4c0a      	ldr	r4, [pc, #40]	; (d880 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    d856:	47a0      	blx	r4
    d858:	4603      	mov	r3, r0
    d85a:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    d85c:	7bba      	ldrb	r2, [r7, #14]
    d85e:	7bfb      	ldrb	r3, [r7, #15]
    d860:	4619      	mov	r1, r3
    d862:	6878      	ldr	r0, [r7, #4]
    d864:	4b08      	ldr	r3, [pc, #32]	; (d888 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    d866:	4798      	blx	r3
    d868:	4603      	mov	r3, r0
    d86a:	2b00      	cmp	r3, #0
    d86c:	bf0c      	ite	eq
    d86e:	2301      	moveq	r3, #1
    d870:	2300      	movne	r3, #0
    d872:	b2db      	uxtb	r3, r3
}
    d874:	4618      	mov	r0, r3
    d876:	3714      	adds	r7, #20
    d878:	46bd      	mov	sp, r7
    d87a:	bd90      	pop	{r4, r7, pc}
    d87c:	0000d583 	.word	0x0000d583
    d880:	0000d5a1 	.word	0x0000d5a1
    d884:	0000d5d1 	.word	0x0000d5d1
    d888:	0000d659 	.word	0x0000d659

0000d88c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    d88c:	b590      	push	{r4, r7, lr}
    d88e:	b085      	sub	sp, #20
    d890:	af02      	add	r7, sp, #8
    d892:	6078      	str	r0, [r7, #4]
    d894:	460b      	mov	r3, r1
    d896:	70fb      	strb	r3, [r7, #3]
    d898:	4613      	mov	r3, r2
    d89a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    d89c:	78ba      	ldrb	r2, [r7, #2]
    d89e:	78f9      	ldrb	r1, [r7, #3]
    d8a0:	2306      	movs	r3, #6
    d8a2:	9300      	str	r3, [sp, #0]
    d8a4:	2306      	movs	r3, #6
    d8a6:	6878      	ldr	r0, [r7, #4]
    d8a8:	4c02      	ldr	r4, [pc, #8]	; (d8b4 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    d8aa:	47a0      	blx	r4
}
    d8ac:	bf00      	nop
    d8ae:	370c      	adds	r7, #12
    d8b0:	46bd      	mov	sp, r7
    d8b2:	bd90      	pop	{r4, r7, pc}
    d8b4:	0000d71d 	.word	0x0000d71d

0000d8b8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d8b8:	b480      	push	{r7}
    d8ba:	b083      	sub	sp, #12
    d8bc:	af00      	add	r7, sp, #0
    d8be:	6078      	str	r0, [r7, #4]
    d8c0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d8c2:	687b      	ldr	r3, [r7, #4]
    d8c4:	683a      	ldr	r2, [r7, #0]
    d8c6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    d8c8:	687b      	ldr	r3, [r7, #4]
    d8ca:	68db      	ldr	r3, [r3, #12]
    d8cc:	2200      	movs	r2, #0
    d8ce:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    d8d0:	4a06      	ldr	r2, [pc, #24]	; (d8ec <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d8d6:	687b      	ldr	r3, [r7, #4]
    d8d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d8dc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	4618      	mov	r0, r3
    d8e2:	370c      	adds	r7, #12
    d8e4:	46bd      	mov	sp, r7
    d8e6:	bc80      	pop	{r7}
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop
    d8ec:	20000f80 	.word	0x20000f80

0000d8f0 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d8f0:	b480      	push	{r7}
    d8f2:	b083      	sub	sp, #12
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d8f8:	687b      	ldr	r3, [r7, #4]
    d8fa:	2200      	movs	r2, #0
    d8fc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	4618      	mov	r0, r3
    d902:	370c      	adds	r7, #12
    d904:	46bd      	mov	sp, r7
    d906:	bc80      	pop	{r7}
    d908:	4770      	bx	lr
	...

0000d90c <_ZL9InitArrayv>:


static void InitArray(){
    d90c:	b480      	push	{r7}
    d90e:	b083      	sub	sp, #12
    d910:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d912:	2301      	movs	r3, #1
    d914:	607b      	str	r3, [r7, #4]
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	2b1f      	cmp	r3, #31
    d91a:	dc34      	bgt.n	d986 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d91c:	491e      	ldr	r1, [pc, #120]	; (d998 <_ZL9InitArrayv+0x8c>)
    d91e:	687a      	ldr	r2, [r7, #4]
    d920:	4613      	mov	r3, r2
    d922:	009b      	lsls	r3, r3, #2
    d924:	4413      	add	r3, r2
    d926:	009b      	lsls	r3, r3, #2
    d928:	440b      	add	r3, r1
    d92a:	2200      	movs	r2, #0
    d92c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d92e:	491a      	ldr	r1, [pc, #104]	; (d998 <_ZL9InitArrayv+0x8c>)
    d930:	687a      	ldr	r2, [r7, #4]
    d932:	4613      	mov	r3, r2
    d934:	009b      	lsls	r3, r3, #2
    d936:	4413      	add	r3, r2
    d938:	009b      	lsls	r3, r3, #2
    d93a:	440b      	add	r3, r1
    d93c:	330c      	adds	r3, #12
    d93e:	2200      	movs	r2, #0
    d940:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	1e5a      	subs	r2, r3, #1
    d946:	6879      	ldr	r1, [r7, #4]
    d948:	460b      	mov	r3, r1
    d94a:	009b      	lsls	r3, r3, #2
    d94c:	440b      	add	r3, r1
    d94e:	009b      	lsls	r3, r3, #2
    d950:	4911      	ldr	r1, [pc, #68]	; (d998 <_ZL9InitArrayv+0x8c>)
    d952:	4419      	add	r1, r3
    d954:	4810      	ldr	r0, [pc, #64]	; (d998 <_ZL9InitArrayv+0x8c>)
    d956:	4613      	mov	r3, r2
    d958:	009b      	lsls	r3, r3, #2
    d95a:	4413      	add	r3, r2
    d95c:	009b      	lsls	r3, r3, #2
    d95e:	4403      	add	r3, r0
    d960:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    d962:	4a0e      	ldr	r2, [pc, #56]	; (d99c <_ZL9InitArrayv+0x90>)
    d964:	687b      	ldr	r3, [r7, #4]
    d966:	2100      	movs	r1, #0
    d968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	3b01      	subs	r3, #1
    d970:	687a      	ldr	r2, [r7, #4]
    d972:	0092      	lsls	r2, r2, #2
    d974:	4909      	ldr	r1, [pc, #36]	; (d99c <_ZL9InitArrayv+0x90>)
    d976:	440a      	add	r2, r1
    d978:	4908      	ldr	r1, [pc, #32]	; (d99c <_ZL9InitArrayv+0x90>)
    d97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	3301      	adds	r3, #1
    d982:	607b      	str	r3, [r7, #4]
    d984:	e7c7      	b.n	d916 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    d986:	4b06      	ldr	r3, [pc, #24]	; (d9a0 <_ZL9InitArrayv+0x94>)
    d988:	2201      	movs	r2, #1
    d98a:	701a      	strb	r2, [r3, #0]
		
}
    d98c:	bf00      	nop
    d98e:	370c      	adds	r7, #12
    d990:	46bd      	mov	sp, r7
    d992:	bc80      	pop	{r7}
    d994:	4770      	bx	lr
    d996:	bf00      	nop
    d998:	20000f84 	.word	0x20000f84
    d99c:	20001204 	.word	0x20001204
    d9a0:	20001284 	.word	0x20001284

0000d9a4 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d9a4:	b580      	push	{r7, lr}
    d9a6:	b082      	sub	sp, #8
    d9a8:	af00      	add	r7, sp, #0
    d9aa:	6078      	str	r0, [r7, #4]
	ticks=0;
    d9ac:	687b      	ldr	r3, [r7, #4]
    d9ae:	2200      	movs	r2, #0
    d9b0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d9b2:	4b0d      	ldr	r3, [pc, #52]	; (d9e8 <_ZN11Timer_Class4InitEv+0x44>)
    d9b4:	781b      	ldrb	r3, [r3, #0]
    d9b6:	f083 0301 	eor.w	r3, r3, #1
    d9ba:	b2db      	uxtb	r3, r3
    d9bc:	2b00      	cmp	r3, #0
    d9be:	d001      	beq.n	d9c4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d9c0:	4b0a      	ldr	r3, [pc, #40]	; (d9ec <_ZN11Timer_Class4InitEv+0x48>)
    d9c2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    d9c4:	6878      	ldr	r0, [r7, #4]
    d9c6:	4b0a      	ldr	r3, [pc, #40]	; (d9f0 <_ZN11Timer_Class4InitEv+0x4c>)
    d9c8:	4798      	blx	r3
    d9ca:	4603      	mov	r3, r0
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	bf0c      	ite	eq
    d9d0:	2301      	moveq	r3, #1
    d9d2:	2300      	movne	r3, #0
    d9d4:	b2da      	uxtb	r2, r3
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	709a      	strb	r2, [r3, #2]
	return isOK;
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	789b      	ldrb	r3, [r3, #2]
    d9de:	b2db      	uxtb	r3, r3
}
    d9e0:	4618      	mov	r0, r3
    d9e2:	3708      	adds	r7, #8
    d9e4:	46bd      	mov	sp, r7
    d9e6:	bd80      	pop	{r7, pc}
    d9e8:	20001284 	.word	0x20001284
    d9ec:	0000d90d 	.word	0x0000d90d
    d9f0:	0000d9f5 	.word	0x0000d9f5

0000d9f4 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    d9f4:	b580      	push	{r7, lr}
    d9f6:	b084      	sub	sp, #16
    d9f8:	af00      	add	r7, sp, #0
    d9fa:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d9fc:	687b      	ldr	r3, [r7, #4]
    d9fe:	68db      	ldr	r3, [r3, #12]
    da00:	4618      	mov	r0, r3
    da02:	4b04      	ldr	r3, [pc, #16]	; (da14 <_ZN11Timer_Class5StartEv+0x20>)
    da04:	4798      	blx	r3
    da06:	60f8      	str	r0, [r7, #12]
	return status;
    da08:	68fb      	ldr	r3, [r7, #12]
	
}
    da0a:	4618      	mov	r0, r3
    da0c:	3710      	adds	r7, #16
    da0e:	46bd      	mov	sp, r7
    da10:	bd80      	pop	{r7, pc}
    da12:	bf00      	nop
    da14:	00002bd5 	.word	0x00002bd5

0000da18 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    da18:	b580      	push	{r7, lr}
    da1a:	b084      	sub	sp, #16
    da1c:	af00      	add	r7, sp, #0
    da1e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    da20:	687b      	ldr	r3, [r7, #4]
    da22:	68db      	ldr	r3, [r3, #12]
    da24:	4618      	mov	r0, r3
    da26:	4b05      	ldr	r3, [pc, #20]	; (da3c <_ZN11Timer_Class4StopEv+0x24>)
    da28:	4798      	blx	r3
    da2a:	60f8      	str	r0, [r7, #12]
	timeout=0;
    da2c:	687b      	ldr	r3, [r7, #4]
    da2e:	2200      	movs	r2, #0
    da30:	705a      	strb	r2, [r3, #1]
	return status;
    da32:	68fb      	ldr	r3, [r7, #12]
}
    da34:	4618      	mov	r0, r3
    da36:	3710      	adds	r7, #16
    da38:	46bd      	mov	sp, r7
    da3a:	bd80      	pop	{r7, pc}
    da3c:	00002c3d 	.word	0x00002c3d

0000da40 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    da40:	b580      	push	{r7, lr}
    da42:	b086      	sub	sp, #24
    da44:	af00      	add	r7, sp, #0
    da46:	60f8      	str	r0, [r7, #12]
    da48:	60b9      	str	r1, [r7, #8]
    da4a:	607a      	str	r2, [r7, #4]
    da4c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    da4e:	68b9      	ldr	r1, [r7, #8]
    da50:	68f8      	ldr	r0, [r7, #12]
    da52:	4b0e      	ldr	r3, [pc, #56]	; (da8c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    da54:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    da56:	68fb      	ldr	r3, [r7, #12]
    da58:	699b      	ldr	r3, [r3, #24]
    da5a:	687a      	ldr	r2, [r7, #4]
    da5c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    da5e:	68fb      	ldr	r3, [r7, #12]
    da60:	699b      	ldr	r3, [r3, #24]
    da62:	68ba      	ldr	r2, [r7, #8]
    da64:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    da66:	68fb      	ldr	r3, [r7, #12]
    da68:	699b      	ldr	r3, [r3, #24]
    da6a:	78fa      	ldrb	r2, [r7, #3]
    da6c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    da6e:	68fb      	ldr	r3, [r7, #12]
    da70:	68da      	ldr	r2, [r3, #12]
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	699b      	ldr	r3, [r3, #24]
    da76:	4619      	mov	r1, r3
    da78:	4610      	mov	r0, r2
    da7a:	4b05      	ldr	r3, [pc, #20]	; (da90 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    da7c:	4798      	blx	r3
    da7e:	6178      	str	r0, [r7, #20]
	
	return status;
    da80:	697b      	ldr	r3, [r7, #20]
}
    da82:	4618      	mov	r0, r3
    da84:	3718      	adds	r7, #24
    da86:	46bd      	mov	sp, r7
    da88:	bd80      	pop	{r7, pc}
    da8a:	bf00      	nop
    da8c:	0000dc1d 	.word	0x0000dc1d
    da90:	00002ca9 	.word	0x00002ca9

0000da94 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    da94:	b580      	push	{r7, lr}
    da96:	b086      	sub	sp, #24
    da98:	af00      	add	r7, sp, #0
    da9a:	60f8      	str	r0, [r7, #12]
    da9c:	60b9      	str	r1, [r7, #8]
    da9e:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    daa0:	687a      	ldr	r2, [r7, #4]
    daa2:	68b9      	ldr	r1, [r7, #8]
    daa4:	68f8      	ldr	r0, [r7, #12]
    daa6:	4b0c      	ldr	r3, [pc, #48]	; (dad8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    daa8:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    daaa:	68fb      	ldr	r3, [r7, #12]
    daac:	68db      	ldr	r3, [r3, #12]
    daae:	681b      	ldr	r3, [r3, #0]
    dab0:	699b      	ldr	r3, [r3, #24]
    dab2:	68fa      	ldr	r2, [r7, #12]
    dab4:	68d2      	ldr	r2, [r2, #12]
    dab6:	3204      	adds	r2, #4
    dab8:	4610      	mov	r0, r2
    daba:	4798      	blx	r3
    dabc:	4603      	mov	r3, r0
    dabe:	2b00      	cmp	r3, #0
    dac0:	d105      	bne.n	dace <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    dac2:	68fb      	ldr	r3, [r7, #12]
    dac4:	68db      	ldr	r3, [r3, #12]
    dac6:	4618      	mov	r0, r3
    dac8:	4b04      	ldr	r3, [pc, #16]	; (dadc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    daca:	4798      	blx	r3
    dacc:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    dace:	697b      	ldr	r3, [r7, #20]
}
    dad0:	4618      	mov	r0, r3
    dad2:	3718      	adds	r7, #24
    dad4:	46bd      	mov	sp, r7
    dad6:	bd80      	pop	{r7, pc}
    dad8:	0000dae1 	.word	0x0000dae1
    dadc:	00002bd5 	.word	0x00002bd5

0000dae0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    dae0:	b590      	push	{r4, r7, lr}
    dae2:	b087      	sub	sp, #28
    dae4:	af00      	add	r7, sp, #0
    dae6:	60f8      	str	r0, [r7, #12]
    dae8:	60b9      	str	r1, [r7, #8]
    daea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    daec:	2301      	movs	r3, #1
    daee:	687a      	ldr	r2, [r7, #4]
    daf0:	68b9      	ldr	r1, [r7, #8]
    daf2:	68f8      	ldr	r0, [r7, #12]
    daf4:	4c03      	ldr	r4, [pc, #12]	; (db04 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    daf6:	47a0      	blx	r4
    daf8:	6178      	str	r0, [r7, #20]
		return status;
    dafa:	697b      	ldr	r3, [r7, #20]
}
    dafc:	4618      	mov	r0, r3
    dafe:	371c      	adds	r7, #28
    db00:	46bd      	mov	sp, r7
    db02:	bd90      	pop	{r4, r7, pc}
    db04:	0000da41 	.word	0x0000da41

0000db08 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    db08:	b580      	push	{r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	af00      	add	r7, sp, #0
    db0e:	6078      	str	r0, [r7, #4]
    db10:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    db12:	6839      	ldr	r1, [r7, #0]
    db14:	6878      	ldr	r0, [r7, #4]
    db16:	4b0f      	ldr	r3, [pc, #60]	; (db54 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    db18:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    db1a:	687b      	ldr	r3, [r7, #4]
    db1c:	68db      	ldr	r3, [r3, #12]
    db1e:	f103 0218 	add.w	r2, r3, #24
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	699b      	ldr	r3, [r3, #24]
    db26:	4619      	mov	r1, r3
    db28:	4610      	mov	r0, r2
    db2a:	4b0b      	ldr	r3, [pc, #44]	; (db58 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    db2c:	4798      	blx	r3
    db2e:	4603      	mov	r3, r0
    db30:	2b00      	cmp	r3, #0
    db32:	d007      	beq.n	db44 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    db34:	687b      	ldr	r3, [r7, #4]
    db36:	68da      	ldr	r2, [r3, #12]
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	699b      	ldr	r3, [r3, #24]
    db3c:	4619      	mov	r1, r3
    db3e:	4610      	mov	r0, r2
    db40:	4b06      	ldr	r3, [pc, #24]	; (db5c <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    db42:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    db44:	687b      	ldr	r3, [r7, #4]
    db46:	699b      	ldr	r3, [r3, #24]
    db48:	2200      	movs	r2, #0
    db4a:	60da      	str	r2, [r3, #12]
}
    db4c:	bf00      	nop
    db4e:	3708      	adds	r7, #8
    db50:	46bd      	mov	sp, r7
    db52:	bd80      	pop	{r7, pc}
    db54:	0000dc9d 	.word	0x0000dc9d
    db58:	00003995 	.word	0x00003995
    db5c:	00002dad 	.word	0x00002dad

0000db60 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    db60:	b590      	push	{r4, r7, lr}
    db62:	b087      	sub	sp, #28
    db64:	af00      	add	r7, sp, #0
    db66:	60f8      	str	r0, [r7, #12]
    db68:	60b9      	str	r1, [r7, #8]
    db6a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    db6c:	2300      	movs	r3, #0
    db6e:	687a      	ldr	r2, [r7, #4]
    db70:	68b9      	ldr	r1, [r7, #8]
    db72:	68f8      	ldr	r0, [r7, #12]
    db74:	4c0c      	ldr	r4, [pc, #48]	; (dba8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    db76:	47a0      	blx	r4
    db78:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    db7a:	68fb      	ldr	r3, [r7, #12]
    db7c:	68db      	ldr	r3, [r3, #12]
    db7e:	681b      	ldr	r3, [r3, #0]
    db80:	699b      	ldr	r3, [r3, #24]
    db82:	68fa      	ldr	r2, [r7, #12]
    db84:	68d2      	ldr	r2, [r2, #12]
    db86:	3204      	adds	r2, #4
    db88:	4610      	mov	r0, r2
    db8a:	4798      	blx	r3
    db8c:	4603      	mov	r3, r0
    db8e:	2b00      	cmp	r3, #0
    db90:	d105      	bne.n	db9e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    db92:	68fb      	ldr	r3, [r7, #12]
    db94:	68db      	ldr	r3, [r3, #12]
    db96:	4618      	mov	r0, r3
    db98:	4b04      	ldr	r3, [pc, #16]	; (dbac <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    db9a:	4798      	blx	r3
    db9c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    db9e:	697b      	ldr	r3, [r7, #20]
}
    dba0:	4618      	mov	r0, r3
    dba2:	371c      	adds	r7, #28
    dba4:	46bd      	mov	sp, r7
    dba6:	bd90      	pop	{r4, r7, pc}
    dba8:	0000da41 	.word	0x0000da41
    dbac:	00002bd5 	.word	0x00002bd5

0000dbb0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dbb0:	b480      	push	{r7}
    dbb2:	b085      	sub	sp, #20
    dbb4:	af00      	add	r7, sp, #0
    dbb6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dbb8:	2300      	movs	r3, #0
    dbba:	73fb      	strb	r3, [r7, #15]
    dbbc:	7bfb      	ldrb	r3, [r7, #15]
    dbbe:	2b1f      	cmp	r3, #31
    dbc0:	dc23      	bgt.n	dc0a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	7f1a      	ldrb	r2, [r3, #28]
    dbc6:	7bfb      	ldrb	r3, [r7, #15]
    dbc8:	4413      	add	r3, r2
    dbca:	b2db      	uxtb	r3, r3
    dbcc:	f003 031f 	and.w	r3, r3, #31
    dbd0:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    dbd2:	7bba      	ldrb	r2, [r7, #14]
    dbd4:	4910      	ldr	r1, [pc, #64]	; (dc18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dbd6:	4613      	mov	r3, r2
    dbd8:	009b      	lsls	r3, r3, #2
    dbda:	4413      	add	r3, r2
    dbdc:	009b      	lsls	r3, r3, #2
    dbde:	440b      	add	r3, r1
    dbe0:	330c      	adds	r3, #12
    dbe2:	681b      	ldr	r3, [r3, #0]
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	d10c      	bne.n	dc02 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    dbe8:	7bba      	ldrb	r2, [r7, #14]
    dbea:	4613      	mov	r3, r2
    dbec:	009b      	lsls	r3, r3, #2
    dbee:	4413      	add	r3, r2
    dbf0:	009b      	lsls	r3, r3, #2
    dbf2:	4a09      	ldr	r2, [pc, #36]	; (dc18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dbf4:	441a      	add	r2, r3
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dbfa:	687b      	ldr	r3, [r7, #4]
    dbfc:	7bba      	ldrb	r2, [r7, #14]
    dbfe:	771a      	strb	r2, [r3, #28]
			return;
    dc00:	e006      	b.n	dc10 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc02:	7bfb      	ldrb	r3, [r7, #15]
    dc04:	3301      	adds	r3, #1
    dc06:	73fb      	strb	r3, [r7, #15]
    dc08:	e7d8      	b.n	dbbc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    dc0a:	687b      	ldr	r3, [r7, #4]
    dc0c:	4a02      	ldr	r2, [pc, #8]	; (dc18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    dc0e:	619a      	str	r2, [r3, #24]

}
    dc10:	3714      	adds	r7, #20
    dc12:	46bd      	mov	sp, r7
    dc14:	bc80      	pop	{r7}
    dc16:	4770      	bx	lr
    dc18:	20000f84 	.word	0x20000f84

0000dc1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    dc1c:	b580      	push	{r7, lr}
    dc1e:	b084      	sub	sp, #16
    dc20:	af00      	add	r7, sp, #0
    dc22:	6078      	str	r0, [r7, #4]
    dc24:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc26:	2300      	movs	r3, #0
    dc28:	73fb      	strb	r3, [r7, #15]
    dc2a:	7bfb      	ldrb	r3, [r7, #15]
    dc2c:	2b1f      	cmp	r3, #31
    dc2e:	dc28      	bgt.n	dc82 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dc30:	687b      	ldr	r3, [r7, #4]
    dc32:	7f1a      	ldrb	r2, [r3, #28]
    dc34:	7bfb      	ldrb	r3, [r7, #15]
    dc36:	4413      	add	r3, r2
    dc38:	b2db      	uxtb	r3, r3
    dc3a:	f003 031f 	and.w	r3, r3, #31
    dc3e:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    dc40:	7bba      	ldrb	r2, [r7, #14]
    dc42:	4913      	ldr	r1, [pc, #76]	; (dc90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dc44:	4613      	mov	r3, r2
    dc46:	009b      	lsls	r3, r3, #2
    dc48:	4413      	add	r3, r2
    dc4a:	009b      	lsls	r3, r3, #2
    dc4c:	440b      	add	r3, r1
    dc4e:	330c      	adds	r3, #12
    dc50:	681a      	ldr	r2, [r3, #0]
    dc52:	683b      	ldr	r3, [r7, #0]
    dc54:	429a      	cmp	r2, r3
    dc56:	d110      	bne.n	dc7a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    dc58:	6839      	ldr	r1, [r7, #0]
    dc5a:	6878      	ldr	r0, [r7, #4]
    dc5c:	4b0d      	ldr	r3, [pc, #52]	; (dc94 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    dc5e:	4798      	blx	r3
			task=&taskArray[j];
    dc60:	7bba      	ldrb	r2, [r7, #14]
    dc62:	4613      	mov	r3, r2
    dc64:	009b      	lsls	r3, r3, #2
    dc66:	4413      	add	r3, r2
    dc68:	009b      	lsls	r3, r3, #2
    dc6a:	4a09      	ldr	r2, [pc, #36]	; (dc90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dc6c:	441a      	add	r2, r3
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	7bba      	ldrb	r2, [r7, #14]
    dc76:	771a      	strb	r2, [r3, #28]
			return;
    dc78:	e006      	b.n	dc88 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dc7a:	7bfb      	ldrb	r3, [r7, #15]
    dc7c:	3301      	adds	r3, #1
    dc7e:	73fb      	strb	r3, [r7, #15]
    dc80:	e7d3      	b.n	dc2a <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    dc82:	6878      	ldr	r0, [r7, #4]
    dc84:	4b04      	ldr	r3, [pc, #16]	; (dc98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    dc86:	4798      	blx	r3
	//task=&taskArray[0];

}
    dc88:	3710      	adds	r7, #16
    dc8a:	46bd      	mov	sp, r7
    dc8c:	bd80      	pop	{r7, pc}
    dc8e:	bf00      	nop
    dc90:	20000f84 	.word	0x20000f84
    dc94:	0000db09 	.word	0x0000db09
    dc98:	0000dbb1 	.word	0x0000dbb1

0000dc9c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    dc9c:	b480      	push	{r7}
    dc9e:	b085      	sub	sp, #20
    dca0:	af00      	add	r7, sp, #0
    dca2:	6078      	str	r0, [r7, #4]
    dca4:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dca6:	2300      	movs	r3, #0
    dca8:	73fb      	strb	r3, [r7, #15]
    dcaa:	7bfb      	ldrb	r3, [r7, #15]
    dcac:	2b1f      	cmp	r3, #31
    dcae:	dc19      	bgt.n	dce4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    dcb0:	7bfa      	ldrb	r2, [r7, #15]
    dcb2:	490f      	ldr	r1, [pc, #60]	; (dcf0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dcb4:	4613      	mov	r3, r2
    dcb6:	009b      	lsls	r3, r3, #2
    dcb8:	4413      	add	r3, r2
    dcba:	009b      	lsls	r3, r3, #2
    dcbc:	440b      	add	r3, r1
    dcbe:	330c      	adds	r3, #12
    dcc0:	681a      	ldr	r2, [r3, #0]
    dcc2:	683b      	ldr	r3, [r7, #0]
    dcc4:	429a      	cmp	r2, r3
    dcc6:	d109      	bne.n	dcdc <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    dcc8:	7bfa      	ldrb	r2, [r7, #15]
    dcca:	4613      	mov	r3, r2
    dccc:	009b      	lsls	r3, r3, #2
    dcce:	4413      	add	r3, r2
    dcd0:	009b      	lsls	r3, r3, #2
    dcd2:	4a07      	ldr	r2, [pc, #28]	; (dcf0 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    dcd4:	441a      	add	r2, r3
    dcd6:	687b      	ldr	r3, [r7, #4]
    dcd8:	619a      	str	r2, [r3, #24]
			return;
    dcda:	e004      	b.n	dce6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dcdc:	7bfb      	ldrb	r3, [r7, #15]
    dcde:	3301      	adds	r3, #1
    dce0:	73fb      	strb	r3, [r7, #15]
    dce2:	e7e2      	b.n	dcaa <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    dce4:	bf00      	nop
}
    dce6:	3714      	adds	r7, #20
    dce8:	46bd      	mov	sp, r7
    dcea:	bc80      	pop	{r7}
    dcec:	4770      	bx	lr
    dcee:	bf00      	nop
    dcf0:	20000f84 	.word	0x20000f84

0000dcf4 <_Z41__static_initialization_and_destruction_0ii>:
    dcf4:	b580      	push	{r7, lr}
    dcf6:	b082      	sub	sp, #8
    dcf8:	af00      	add	r7, sp, #0
    dcfa:	6078      	str	r0, [r7, #4]
    dcfc:	6039      	str	r1, [r7, #0]
    dcfe:	687b      	ldr	r3, [r7, #4]
    dd00:	2b01      	cmp	r3, #1
    dd02:	d14c      	bne.n	dd9e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    dd04:	683b      	ldr	r3, [r7, #0]
    dd06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd0a:	4293      	cmp	r3, r2
    dd0c:	d147      	bne.n	dd9e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dd0e:	4926      	ldr	r1, [pc, #152]	; (dda8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    dd10:	4826      	ldr	r0, [pc, #152]	; (ddac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dd12:	4b27      	ldr	r3, [pc, #156]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd14:	4798      	blx	r3
    dd16:	4a27      	ldr	r2, [pc, #156]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd18:	4927      	ldr	r1, [pc, #156]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd1a:	4824      	ldr	r0, [pc, #144]	; (ddac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    dd1c:	4b27      	ldr	r3, [pc, #156]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd1e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    dd20:	4927      	ldr	r1, [pc, #156]	; (ddc0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    dd22:	4828      	ldr	r0, [pc, #160]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd24:	4b22      	ldr	r3, [pc, #136]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd26:	4798      	blx	r3
    dd28:	4a22      	ldr	r2, [pc, #136]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd2a:	4923      	ldr	r1, [pc, #140]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd2c:	4825      	ldr	r0, [pc, #148]	; (ddc4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    dd2e:	4b23      	ldr	r3, [pc, #140]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd30:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    dd32:	4925      	ldr	r1, [pc, #148]	; (ddc8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    dd34:	4825      	ldr	r0, [pc, #148]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd36:	4b1e      	ldr	r3, [pc, #120]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd38:	4798      	blx	r3
    dd3a:	4a1e      	ldr	r2, [pc, #120]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd3c:	491e      	ldr	r1, [pc, #120]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd3e:	4823      	ldr	r0, [pc, #140]	; (ddcc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    dd40:	4b1e      	ldr	r3, [pc, #120]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd42:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    dd44:	4922      	ldr	r1, [pc, #136]	; (ddd0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    dd46:	4823      	ldr	r0, [pc, #140]	; (ddd4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd48:	4b19      	ldr	r3, [pc, #100]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd4a:	4798      	blx	r3
    dd4c:	4a19      	ldr	r2, [pc, #100]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd4e:	491a      	ldr	r1, [pc, #104]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd50:	4820      	ldr	r0, [pc, #128]	; (ddd4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    dd52:	4b1a      	ldr	r3, [pc, #104]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd54:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    dd56:	4920      	ldr	r1, [pc, #128]	; (ddd8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    dd58:	4820      	ldr	r0, [pc, #128]	; (dddc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd5a:	4b15      	ldr	r3, [pc, #84]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd5c:	4798      	blx	r3
    dd5e:	4a15      	ldr	r2, [pc, #84]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd60:	4915      	ldr	r1, [pc, #84]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd62:	481e      	ldr	r0, [pc, #120]	; (dddc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    dd64:	4b15      	ldr	r3, [pc, #84]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd66:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    dd68:	491d      	ldr	r1, [pc, #116]	; (dde0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    dd6a:	481e      	ldr	r0, [pc, #120]	; (dde4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd6c:	4b10      	ldr	r3, [pc, #64]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd6e:	4798      	blx	r3
    dd70:	4a10      	ldr	r2, [pc, #64]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd72:	4911      	ldr	r1, [pc, #68]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd74:	481b      	ldr	r0, [pc, #108]	; (dde4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    dd76:	4b11      	ldr	r3, [pc, #68]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd78:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    dd7a:	491b      	ldr	r1, [pc, #108]	; (dde8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    dd7c:	481b      	ldr	r0, [pc, #108]	; (ddec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd7e:	4b0c      	ldr	r3, [pc, #48]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd80:	4798      	blx	r3
    dd82:	4a0c      	ldr	r2, [pc, #48]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd84:	490c      	ldr	r1, [pc, #48]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd86:	4819      	ldr	r0, [pc, #100]	; (ddec <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    dd88:	4b0c      	ldr	r3, [pc, #48]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd8a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    dd8c:	4918      	ldr	r1, [pc, #96]	; (ddf0 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    dd8e:	4819      	ldr	r0, [pc, #100]	; (ddf4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dd90:	4b07      	ldr	r3, [pc, #28]	; (ddb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    dd92:	4798      	blx	r3
    dd94:	4a07      	ldr	r2, [pc, #28]	; (ddb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    dd96:	4908      	ldr	r1, [pc, #32]	; (ddb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    dd98:	4816      	ldr	r0, [pc, #88]	; (ddf4 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    dd9a:	4b08      	ldr	r3, [pc, #32]	; (ddbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    dd9c:	4798      	blx	r3
    dd9e:	bf00      	nop
    dda0:	3708      	adds	r7, #8
    dda2:	46bd      	mov	sp, r7
    dda4:	bd80      	pop	{r7, pc}
    dda6:	bf00      	nop
    dda8:	200014f0 	.word	0x200014f0
    ddac:	20000e80 	.word	0x20000e80
    ddb0:	0000d8b9 	.word	0x0000d8b9
    ddb4:	20000000 	.word	0x20000000
    ddb8:	0000d8f1 	.word	0x0000d8f1
    ddbc:	0000eb39 	.word	0x0000eb39
    ddc0:	20001584 	.word	0x20001584
    ddc4:	20000ea0 	.word	0x20000ea0
    ddc8:	200016a8 	.word	0x200016a8
    ddcc:	20000ec0 	.word	0x20000ec0
    ddd0:	200015a4 	.word	0x200015a4
    ddd4:	20000ee0 	.word	0x20000ee0
    ddd8:	20001668 	.word	0x20001668
    dddc:	20000f00 	.word	0x20000f00
    dde0:	20001688 	.word	0x20001688
    dde4:	20000f20 	.word	0x20000f20
    dde8:	20001560 	.word	0x20001560
    ddec:	20000f40 	.word	0x20000f40
    ddf0:	20001600 	.word	0x20001600
    ddf4:	20000f60 	.word	0x20000f60

0000ddf8 <_GLOBAL__sub_I_ptrTimerClass>:
    ddf8:	b580      	push	{r7, lr}
    ddfa:	af00      	add	r7, sp, #0
    ddfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de00:	2001      	movs	r0, #1
    de02:	4b01      	ldr	r3, [pc, #4]	; (de08 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    de04:	4798      	blx	r3
    de06:	bd80      	pop	{r7, pc}
    de08:	0000dcf5 	.word	0x0000dcf5

0000de0c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    de0c:	b480      	push	{r7}
    de0e:	b083      	sub	sp, #12
    de10:	af00      	add	r7, sp, #0
    de12:	6078      	str	r0, [r7, #4]
    de14:	4a05      	ldr	r2, [pc, #20]	; (de2c <_ZN5PrintC1Ev+0x20>)
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	601a      	str	r2, [r3, #0]
    de1a:	687b      	ldr	r3, [r7, #4]
    de1c:	2200      	movs	r2, #0
    de1e:	605a      	str	r2, [r3, #4]
    de20:	687b      	ldr	r3, [r7, #4]
    de22:	4618      	mov	r0, r3
    de24:	370c      	adds	r7, #12
    de26:	46bd      	mov	sp, r7
    de28:	bc80      	pop	{r7}
    de2a:	4770      	bx	lr
    de2c:	0000f45c 	.word	0x0000f45c

0000de30 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    de30:	b480      	push	{r7}
    de32:	b083      	sub	sp, #12
    de34:	af00      	add	r7, sp, #0
    de36:	6078      	str	r0, [r7, #4]
    de38:	2300      	movs	r3, #0
    de3a:	4618      	mov	r0, r3
    de3c:	370c      	adds	r7, #12
    de3e:	46bd      	mov	sp, r7
    de40:	bc80      	pop	{r7}
    de42:	4770      	bx	lr

0000de44 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    de44:	b480      	push	{r7}
    de46:	b083      	sub	sp, #12
    de48:	af00      	add	r7, sp, #0
    de4a:	6078      	str	r0, [r7, #4]
    de4c:	bf00      	nop
    de4e:	370c      	adds	r7, #12
    de50:	46bd      	mov	sp, r7
    de52:	bc80      	pop	{r7}
    de54:	4770      	bx	lr
	...

0000de58 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    de58:	b580      	push	{r7, lr}
    de5a:	b082      	sub	sp, #8
    de5c:	af00      	add	r7, sp, #0
    de5e:	6078      	str	r0, [r7, #4]
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	4618      	mov	r0, r3
    de64:	4b06      	ldr	r3, [pc, #24]	; (de80 <_ZN6StreamC1Ev+0x28>)
    de66:	4798      	blx	r3
    de68:	4a06      	ldr	r2, [pc, #24]	; (de84 <_ZN6StreamC1Ev+0x2c>)
    de6a:	687b      	ldr	r3, [r7, #4]
    de6c:	601a      	str	r2, [r3, #0]
    de6e:	687b      	ldr	r3, [r7, #4]
    de70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    de74:	609a      	str	r2, [r3, #8]
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	4618      	mov	r0, r3
    de7a:	3708      	adds	r7, #8
    de7c:	46bd      	mov	sp, r7
    de7e:	bd80      	pop	{r7, pc}
    de80:	0000de0d 	.word	0x0000de0d
    de84:	0000f420 	.word	0x0000f420

0000de88 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    de88:	b480      	push	{r7}
    de8a:	b083      	sub	sp, #12
    de8c:	af00      	add	r7, sp, #0
    de8e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    de90:	4b06      	ldr	r3, [pc, #24]	; (deac <_ZL10USBTimeoutPK10timer_task+0x24>)
    de92:	681b      	ldr	r3, [r3, #0]
    de94:	2201      	movs	r2, #1
    de96:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    de98:	4b04      	ldr	r3, [pc, #16]	; (deac <_ZL10USBTimeoutPK10timer_task+0x24>)
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	2200      	movs	r2, #0
    de9e:	741a      	strb	r2, [r3, #16]
	
}
    dea0:	bf00      	nop
    dea2:	370c      	adds	r7, #12
    dea4:	46bd      	mov	sp, r7
    dea6:	bc80      	pop	{r7}
    dea8:	4770      	bx	lr
    deaa:	bf00      	nop
    deac:	20001388 	.word	0x20001388

0000deb0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    deb0:	b480      	push	{r7}
    deb2:	b083      	sub	sp, #12
    deb4:	af00      	add	r7, sp, #0
    deb6:	4603      	mov	r3, r0
    deb8:	603a      	str	r2, [r7, #0]
    deba:	71fb      	strb	r3, [r7, #7]
    debc:	460b      	mov	r3, r1
    debe:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dec0:	4b08      	ldr	r3, [pc, #32]	; (dee4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dec2:	681b      	ldr	r3, [r3, #0]
    dec4:	2201      	movs	r2, #1
    dec6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dec8:	4b06      	ldr	r3, [pc, #24]	; (dee4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    deca:	681b      	ldr	r3, [r3, #0]
    decc:	2201      	movs	r2, #1
    dece:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ded0:	4b04      	ldr	r3, [pc, #16]	; (dee4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ded2:	681b      	ldr	r3, [r3, #0]
    ded4:	2201      	movs	r2, #1
    ded6:	741a      	strb	r2, [r3, #16]


	return false;
    ded8:	2300      	movs	r3, #0
}
    deda:	4618      	mov	r0, r3
    dedc:	370c      	adds	r7, #12
    dede:	46bd      	mov	sp, r7
    dee0:	bc80      	pop	{r7}
    dee2:	4770      	bx	lr
    dee4:	20001388 	.word	0x20001388

0000dee8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dee8:	b480      	push	{r7}
    deea:	b083      	sub	sp, #12
    deec:	af00      	add	r7, sp, #0
    deee:	4603      	mov	r3, r0
    def0:	603a      	str	r2, [r7, #0]
    def2:	71fb      	strb	r3, [r7, #7]
    def4:	460b      	mov	r3, r1
    def6:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    def8:	4b08      	ldr	r3, [pc, #32]	; (df1c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    defa:	681b      	ldr	r3, [r3, #0]
    defc:	2201      	movs	r2, #1
    defe:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    df00:	4b06      	ldr	r3, [pc, #24]	; (df1c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    df02:	681b      	ldr	r3, [r3, #0]
    df04:	2201      	movs	r2, #1
    df06:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    df08:	4b04      	ldr	r3, [pc, #16]	; (df1c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    df0a:	681b      	ldr	r3, [r3, #0]
    df0c:	2201      	movs	r2, #1
    df0e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    df10:	2300      	movs	r3, #0
}
    df12:	4618      	mov	r0, r3
    df14:	370c      	adds	r7, #12
    df16:	46bd      	mov	sp, r7
    df18:	bc80      	pop	{r7}
    df1a:	4770      	bx	lr
    df1c:	20001388 	.word	0x20001388

0000df20 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    df20:	b580      	push	{r7, lr}
    df22:	b082      	sub	sp, #8
    df24:	af00      	add	r7, sp, #0
    df26:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    df28:	793b      	ldrb	r3, [r7, #4]
    df2a:	f003 0301 	and.w	r3, r3, #1
    df2e:	b2db      	uxtb	r3, r3
    df30:	2b00      	cmp	r3, #0
    df32:	d013      	beq.n	df5c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    df34:	490c      	ldr	r1, [pc, #48]	; (df68 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    df36:	2000      	movs	r0, #0
    df38:	4b0c      	ldr	r3, [pc, #48]	; (df6c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    df3a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    df3c:	490c      	ldr	r1, [pc, #48]	; (df70 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    df3e:	2001      	movs	r0, #1
    df40:	4b0a      	ldr	r3, [pc, #40]	; (df6c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    df42:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    df44:	4b0b      	ldr	r3, [pc, #44]	; (df74 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df46:	681b      	ldr	r3, [r3, #0]
    df48:	2201      	movs	r2, #1
    df4a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    df4c:	4b09      	ldr	r3, [pc, #36]	; (df74 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df4e:	681b      	ldr	r3, [r3, #0]
    df50:	2201      	movs	r2, #1
    df52:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    df54:	4b07      	ldr	r3, [pc, #28]	; (df74 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    df56:	681b      	ldr	r3, [r3, #0]
    df58:	2201      	movs	r2, #1
    df5a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    df5c:	2300      	movs	r3, #0
}
    df5e:	4618      	mov	r0, r3
    df60:	3708      	adds	r7, #8
    df62:	46bd      	mov	sp, r7
    df64:	bd80      	pop	{r7, pc}
    df66:	bf00      	nop
    df68:	0000deb1 	.word	0x0000deb1
    df6c:	0000c381 	.word	0x0000c381
    df70:	0000dee9 	.word	0x0000dee9
    df74:	20001388 	.word	0x20001388

0000df78 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    df78:	b580      	push	{r7, lr}
    df7a:	b082      	sub	sp, #8
    df7c:	af00      	add	r7, sp, #0
    df7e:	6078      	str	r0, [r7, #4]
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	4618      	mov	r0, r3
    df84:	4b0a      	ldr	r3, [pc, #40]	; (dfb0 <_ZN9CDC_ClassC1Ev+0x38>)
    df86:	4798      	blx	r3
    df88:	687b      	ldr	r3, [r7, #4]
    df8a:	3310      	adds	r3, #16
    df8c:	4618      	mov	r0, r3
    df8e:	4b09      	ldr	r3, [pc, #36]	; (dfb4 <_ZN9CDC_ClassC1Ev+0x3c>)
    df90:	4798      	blx	r3
    df92:	4a09      	ldr	r2, [pc, #36]	; (dfb8 <_ZN9CDC_ClassC1Ev+0x40>)
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    df98:	687b      	ldr	r3, [r7, #4]
    df9a:	f04f 32ff 	mov.w	r2, #4294967295
    df9e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dfa0:	4a06      	ldr	r2, [pc, #24]	; (dfbc <_ZN9CDC_ClassC1Ev+0x44>)
    dfa2:	687b      	ldr	r3, [r7, #4]
    dfa4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	4618      	mov	r0, r3
    dfaa:	3708      	adds	r7, #8
    dfac:	46bd      	mov	sp, r7
    dfae:	bd80      	pop	{r7, pc}
    dfb0:	0000de59 	.word	0x0000de59
    dfb4:	0000e881 	.word	0x0000e881
    dfb8:	0000f3f0 	.word	0x0000f3f0
    dfbc:	20001388 	.word	0x20001388

0000dfc0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
    dfc8:	4a06      	ldr	r2, [pc, #24]	; (dfe4 <_ZN9CDC_ClassD1Ev+0x24>)
    dfca:	687b      	ldr	r3, [r7, #4]
    dfcc:	601a      	str	r2, [r3, #0]
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	3310      	adds	r3, #16
    dfd2:	4618      	mov	r0, r3
    dfd4:	4b04      	ldr	r3, [pc, #16]	; (dfe8 <_ZN9CDC_ClassD1Ev+0x28>)
    dfd6:	4798      	blx	r3
{
} //~CDC_Class
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	4618      	mov	r0, r3
    dfdc:	3708      	adds	r7, #8
    dfde:	46bd      	mov	sp, r7
    dfe0:	bd80      	pop	{r7, pc}
    dfe2:	bf00      	nop
    dfe4:	0000f3f0 	.word	0x0000f3f0
    dfe8:	0000e8a1 	.word	0x0000e8a1

0000dfec <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    dfec:	b580      	push	{r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	af00      	add	r7, sp, #0
    dff2:	6078      	str	r0, [r7, #4]
	
	OnInit();
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	3310      	adds	r3, #16
    dff8:	4618      	mov	r0, r3
    dffa:	4b09      	ldr	r3, [pc, #36]	; (e020 <_ZN9CDC_Class4InitEv+0x34>)
    dffc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    dffe:	4909      	ldr	r1, [pc, #36]	; (e024 <_ZN9CDC_Class4InitEv+0x38>)
    e000:	2003      	movs	r0, #3
    e002:	4b09      	ldr	r3, [pc, #36]	; (e028 <_ZN9CDC_Class4InitEv+0x3c>)
    e004:	4798      	blx	r3
	delay_ms(100);
    e006:	2064      	movs	r0, #100	; 0x64
    e008:	4b08      	ldr	r3, [pc, #32]	; (e02c <_ZN9CDC_Class4InitEv+0x40>)
    e00a:	4798      	blx	r3
		
	if (connected)
    e00c:	687b      	ldr	r3, [r7, #4]
    e00e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e010:	2064      	movs	r0, #100	; 0x64
    e012:	4b06      	ldr	r3, [pc, #24]	; (e02c <_ZN9CDC_Class4InitEv+0x40>)
    e014:	4798      	blx	r3

	

}
    e016:	bf00      	nop
    e018:	3708      	adds	r7, #8
    e01a:	46bd      	mov	sp, r7
    e01c:	bd80      	pop	{r7, pc}
    e01e:	bf00      	nop
    e020:	0000e8b5 	.word	0x0000e8b5
    e024:	0000df21 	.word	0x0000df21
    e028:	0000c381 	.word	0x0000c381
    e02c:	0000237d 	.word	0x0000237d

0000e030 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e030:	b580      	push	{r7, lr}
    e032:	b082      	sub	sp, #8
    e034:	af00      	add	r7, sp, #0
    e036:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e038:	4b03      	ldr	r3, [pc, #12]	; (e048 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e03a:	4798      	blx	r3
    e03c:	4603      	mov	r3, r0
	
}
    e03e:	4618      	mov	r0, r3
    e040:	3708      	adds	r7, #8
    e042:	46bd      	mov	sp, r7
    e044:	bd80      	pop	{r7, pc}
    e046:	bf00      	nop
    e048:	0000c3f9 	.word	0x0000c3f9

0000e04c <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e04c:	b580      	push	{r7, lr}
    e04e:	b084      	sub	sp, #16
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	699b      	ldr	r3, [r3, #24]
    e058:	f1b3 3fff 	cmp.w	r3, #4294967295
    e05c:	bf14      	ite	ne
    e05e:	2301      	movne	r3, #1
    e060:	2300      	moveq	r3, #0
    e062:	b2db      	uxtb	r3, r3
    e064:	2b00      	cmp	r3, #0
    e066:	d002      	beq.n	e06e <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e068:	687b      	ldr	r3, [r7, #4]
    e06a:	699b      	ldr	r3, [r3, #24]
    e06c:	e011      	b.n	e092 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e06e:	687b      	ldr	r3, [r7, #4]
    e070:	681b      	ldr	r3, [r3, #0]
    e072:	331c      	adds	r3, #28
    e074:	681b      	ldr	r3, [r3, #0]
    e076:	f107 010f 	add.w	r1, r7, #15
    e07a:	2201      	movs	r2, #1
    e07c:	6878      	ldr	r0, [r7, #4]
    e07e:	4798      	blx	r3
    e080:	4602      	mov	r2, r0
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e086:	7bfb      	ldrb	r3, [r7, #15]
    e088:	461a      	mov	r2, r3
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e08e:	687b      	ldr	r3, [r7, #4]
    e090:	699b      	ldr	r3, [r3, #24]
}
    e092:	4618      	mov	r0, r3
    e094:	3710      	adds	r7, #16
    e096:	46bd      	mov	sp, r7
    e098:	bd80      	pop	{r7, pc}
	...

0000e09c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e09c:	b580      	push	{r7, lr}
    e09e:	b086      	sub	sp, #24
    e0a0:	af00      	add	r7, sp, #0
    e0a2:	60f8      	str	r0, [r7, #12]
    e0a4:	60b9      	str	r1, [r7, #8]
    e0a6:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e0a8:	68fb      	ldr	r3, [r7, #12]
    e0aa:	7c1b      	ldrb	r3, [r3, #16]
    e0ac:	b2db      	uxtb	r3, r3
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d02e      	beq.n	e110 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e0b2:	687a      	ldr	r2, [r7, #4]
    e0b4:	4613      	mov	r3, r2
    e0b6:	009b      	lsls	r3, r3, #2
    e0b8:	4413      	add	r3, r2
    e0ba:	005b      	lsls	r3, r3, #1
    e0bc:	461a      	mov	r2, r3
    e0be:	4918      	ldr	r1, [pc, #96]	; (e120 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e0c0:	4818      	ldr	r0, [pc, #96]	; (e124 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e0c2:	4b19      	ldr	r3, [pc, #100]	; (e128 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e0c4:	4798      	blx	r3
		rxReady=false;
    e0c6:	68fb      	ldr	r3, [r7, #12]
    e0c8:	2200      	movs	r2, #0
    e0ca:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	4619      	mov	r1, r3
    e0d0:	68b8      	ldr	r0, [r7, #8]
    e0d2:	4b16      	ldr	r3, [pc, #88]	; (e12c <_ZN9CDC_Class8readDataEPvl+0x90>)
    e0d4:	4798      	blx	r3
    e0d6:	4603      	mov	r3, r0
    e0d8:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	7d5b      	ldrb	r3, [r3, #21]
    e0de:	b2db      	uxtb	r3, r3
    e0e0:	f083 0301 	eor.w	r3, r3, #1
    e0e4:	b2db      	uxtb	r3, r3
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d006      	beq.n	e0f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	7c1b      	ldrb	r3, [r3, #16]
    e0ee:	b2db      	uxtb	r3, r3
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d001      	beq.n	e0f8 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e0f4:	2301      	movs	r3, #1
    e0f6:	e000      	b.n	e0fa <_ZN9CDC_Class8readDataEPvl+0x5e>
    e0f8:	2300      	movs	r3, #0
    e0fa:	2b00      	cmp	r3, #0
    e0fc:	d000      	beq.n	e100 <_ZN9CDC_Class8readDataEPvl+0x64>
    e0fe:	e7ec      	b.n	e0da <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e100:	4808      	ldr	r0, [pc, #32]	; (e124 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e102:	4b0b      	ldr	r3, [pc, #44]	; (e130 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e104:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e106:	4906      	ldr	r1, [pc, #24]	; (e120 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e108:	4806      	ldr	r0, [pc, #24]	; (e124 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e10a:	4b0a      	ldr	r3, [pc, #40]	; (e134 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e10c:	4798      	blx	r3
    e10e:	e001      	b.n	e114 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e110:	2300      	movs	r3, #0
    e112:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e114:	7dfb      	ldrb	r3, [r7, #23]
}
    e116:	4618      	mov	r0, r3
    e118:	3718      	adds	r7, #24
    e11a:	46bd      	mov	sp, r7
    e11c:	bd80      	pop	{r7, pc}
    e11e:	bf00      	nop
    e120:	0000de89 	.word	0x0000de89
    e124:	20001328 	.word	0x20001328
    e128:	0000db61 	.word	0x0000db61
    e12c:	0000c2d5 	.word	0x0000c2d5
    e130:	0000da19 	.word	0x0000da19
    e134:	0000db09 	.word	0x0000db09

0000e138 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b084      	sub	sp, #16
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	2200      	movs	r2, #0
    e144:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e146:	f107 030f 	add.w	r3, r7, #15
    e14a:	2101      	movs	r1, #1
    e14c:	4618      	mov	r0, r3
    e14e:	4b08      	ldr	r3, [pc, #32]	; (e170 <_ZN9CDC_Class4readEv+0x38>)
    e150:	4798      	blx	r3
	while(!rxReady);
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	7d5b      	ldrb	r3, [r3, #21]
    e156:	b2db      	uxtb	r3, r3
    e158:	f083 0301 	eor.w	r3, r3, #1
    e15c:	b2db      	uxtb	r3, r3
    e15e:	2b00      	cmp	r3, #0
    e160:	d000      	beq.n	e164 <_ZN9CDC_Class4readEv+0x2c>
    e162:	e7f6      	b.n	e152 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e164:	7bfb      	ldrb	r3, [r7, #15]
}
    e166:	4618      	mov	r0, r3
    e168:	3710      	adds	r7, #16
    e16a:	46bd      	mov	sp, r7
    e16c:	bd80      	pop	{r7, pc}
    e16e:	bf00      	nop
    e170:	0000c2d5 	.word	0x0000c2d5

0000e174 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e174:	b580      	push	{r7, lr}
    e176:	b082      	sub	sp, #8
    e178:	af00      	add	r7, sp, #0
    e17a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e17c:	687b      	ldr	r3, [r7, #4]
    e17e:	331c      	adds	r3, #28
    e180:	2140      	movs	r1, #64	; 0x40
    e182:	4618      	mov	r0, r3
    e184:	4b02      	ldr	r3, [pc, #8]	; (e190 <_ZN9CDC_Class5flushEv+0x1c>)
    e186:	4798      	blx	r3
}
    e188:	bf00      	nop
    e18a:	3708      	adds	r7, #8
    e18c:	46bd      	mov	sp, r7
    e18e:	bd80      	pop	{r7, pc}
    e190:	0000c319 	.word	0x0000c319

0000e194 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e194:	b580      	push	{r7, lr}
    e196:	b082      	sub	sp, #8
    e198:	af00      	add	r7, sp, #0
    e19a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e19c:	4b02      	ldr	r3, [pc, #8]	; (e1a8 <_ZN9CDC_Class5clearEv+0x14>)
    e19e:	4798      	blx	r3
}
    e1a0:	bf00      	nop
    e1a2:	3708      	adds	r7, #8
    e1a4:	46bd      	mov	sp, r7
    e1a6:	bd80      	pop	{r7, pc}
    e1a8:	0000c35d 	.word	0x0000c35d

0000e1ac <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e1ac:	b580      	push	{r7, lr}
    e1ae:	b082      	sub	sp, #8
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	6078      	str	r0, [r7, #4]
    e1b4:	460b      	mov	r3, r1
    e1b6:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e1b8:	687b      	ldr	r3, [r7, #4]
    e1ba:	7c1b      	ldrb	r3, [r3, #16]
    e1bc:	b2db      	uxtb	r3, r3
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d012      	beq.n	e1e8 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e1c2:	687b      	ldr	r3, [r7, #4]
    e1c4:	7d1b      	ldrb	r3, [r3, #20]
    e1c6:	b2db      	uxtb	r3, r3
    e1c8:	f083 0301 	eor.w	r3, r3, #1
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d000      	beq.n	e1d4 <_ZN9CDC_Class5writeEh+0x28>
    e1d2:	e7f6      	b.n	e1c2 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e1d4:	687b      	ldr	r3, [r7, #4]
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	3324      	adds	r3, #36	; 0x24
    e1da:	681b      	ldr	r3, [r3, #0]
    e1dc:	1cf9      	adds	r1, r7, #3
    e1de:	2201      	movs	r2, #1
    e1e0:	6878      	ldr	r0, [r7, #4]
    e1e2:	4798      	blx	r3
    e1e4:	4603      	mov	r3, r0
    e1e6:	e000      	b.n	e1ea <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e1e8:	2300      	movs	r3, #0
	}
		
}
    e1ea:	4618      	mov	r0, r3
    e1ec:	3708      	adds	r7, #8
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bd80      	pop	{r7, pc}
	...

0000e1f4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b086      	sub	sp, #24
    e1f8:	af00      	add	r7, sp, #0
    e1fa:	60f8      	str	r0, [r7, #12]
    e1fc:	60b9      	str	r1, [r7, #8]
    e1fe:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e200:	68fb      	ldr	r3, [r7, #12]
    e202:	7c1b      	ldrb	r3, [r3, #16]
    e204:	b2db      	uxtb	r3, r3
    e206:	2b00      	cmp	r3, #0
    e208:	d02f      	beq.n	e26a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e20a:	687a      	ldr	r2, [r7, #4]
    e20c:	4613      	mov	r3, r2
    e20e:	009b      	lsls	r3, r3, #2
    e210:	4413      	add	r3, r2
    e212:	005b      	lsls	r3, r3, #1
    e214:	461a      	mov	r2, r3
    e216:	4917      	ldr	r1, [pc, #92]	; (e274 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e218:	4817      	ldr	r0, [pc, #92]	; (e278 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e21a:	4b18      	ldr	r3, [pc, #96]	; (e27c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e21c:	4798      	blx	r3
		txReady=false;
    e21e:	68fb      	ldr	r3, [r7, #12]
    e220:	2200      	movs	r2, #0
    e222:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e224:	687b      	ldr	r3, [r7, #4]
    e226:	4619      	mov	r1, r3
    e228:	68b8      	ldr	r0, [r7, #8]
    e22a:	4b15      	ldr	r3, [pc, #84]	; (e280 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e22c:	4798      	blx	r3
    e22e:	4603      	mov	r3, r0
    e230:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e232:	68fb      	ldr	r3, [r7, #12]
    e234:	7d1b      	ldrb	r3, [r3, #20]
    e236:	b2db      	uxtb	r3, r3
    e238:	f083 0301 	eor.w	r3, r3, #1
    e23c:	b2db      	uxtb	r3, r3
    e23e:	2b00      	cmp	r3, #0
    e240:	d006      	beq.n	e250 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	7c1b      	ldrb	r3, [r3, #16]
    e246:	b2db      	uxtb	r3, r3
    e248:	2b00      	cmp	r3, #0
    e24a:	d001      	beq.n	e250 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e24c:	2301      	movs	r3, #1
    e24e:	e000      	b.n	e252 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e250:	2300      	movs	r3, #0
    e252:	2b00      	cmp	r3, #0
    e254:	d000      	beq.n	e258 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e256:	e7ec      	b.n	e232 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e258:	4807      	ldr	r0, [pc, #28]	; (e278 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e25a:	4b0a      	ldr	r3, [pc, #40]	; (e284 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e25c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e25e:	4905      	ldr	r1, [pc, #20]	; (e274 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e260:	4805      	ldr	r0, [pc, #20]	; (e278 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e262:	4b09      	ldr	r3, [pc, #36]	; (e288 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e264:	4798      	blx	r3
		return r;
    e266:	697b      	ldr	r3, [r7, #20]
    e268:	e000      	b.n	e26c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e26a:	2300      	movs	r3, #0
	}
	

}
    e26c:	4618      	mov	r0, r3
    e26e:	3718      	adds	r7, #24
    e270:	46bd      	mov	sp, r7
    e272:	bd80      	pop	{r7, pc}
    e274:	0000de89 	.word	0x0000de89
    e278:	20001328 	.word	0x20001328
    e27c:	0000db61 	.word	0x0000db61
    e280:	0000c319 	.word	0x0000c319
    e284:	0000da19 	.word	0x0000da19
    e288:	0000db09 	.word	0x0000db09

0000e28c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e28c:	b580      	push	{r7, lr}
    e28e:	b086      	sub	sp, #24
    e290:	af00      	add	r7, sp, #0
    e292:	60f8      	str	r0, [r7, #12]
    e294:	60b9      	str	r1, [r7, #8]
    e296:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e298:	68fb      	ldr	r3, [r7, #12]
    e29a:	2200      	movs	r2, #0
    e29c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e29e:	68fb      	ldr	r3, [r7, #12]
    e2a0:	7c1b      	ldrb	r3, [r3, #16]
    e2a2:	b2db      	uxtb	r3, r3
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d02a      	beq.n	e2fe <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e2a8:	687a      	ldr	r2, [r7, #4]
    e2aa:	4613      	mov	r3, r2
    e2ac:	009b      	lsls	r3, r3, #2
    e2ae:	4413      	add	r3, r2
    e2b0:	005b      	lsls	r3, r3, #1
    e2b2:	461a      	mov	r2, r3
    e2b4:	4915      	ldr	r1, [pc, #84]	; (e30c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e2b6:	4816      	ldr	r0, [pc, #88]	; (e310 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e2b8:	4b16      	ldr	r3, [pc, #88]	; (e314 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e2ba:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e2bc:	6879      	ldr	r1, [r7, #4]
    e2be:	68b8      	ldr	r0, [r7, #8]
    e2c0:	4b15      	ldr	r3, [pc, #84]	; (e318 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e2c2:	4798      	blx	r3
    e2c4:	4603      	mov	r3, r0
    e2c6:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e2c8:	68fb      	ldr	r3, [r7, #12]
    e2ca:	7d1b      	ldrb	r3, [r3, #20]
    e2cc:	b2db      	uxtb	r3, r3
    e2ce:	f083 0301 	eor.w	r3, r3, #1
    e2d2:	b2db      	uxtb	r3, r3
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d006      	beq.n	e2e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e2d8:	68fb      	ldr	r3, [r7, #12]
    e2da:	7c1b      	ldrb	r3, [r3, #16]
    e2dc:	b2db      	uxtb	r3, r3
    e2de:	2b00      	cmp	r3, #0
    e2e0:	d001      	beq.n	e2e6 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e2e2:	2301      	movs	r3, #1
    e2e4:	e000      	b.n	e2e8 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e2e6:	2300      	movs	r3, #0
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d000      	beq.n	e2ee <_ZN9CDC_Class5writeEPKhj+0x62>
    e2ec:	e7ec      	b.n	e2c8 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e2ee:	4808      	ldr	r0, [pc, #32]	; (e310 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e2f0:	4b0a      	ldr	r3, [pc, #40]	; (e31c <_ZN9CDC_Class5writeEPKhj+0x90>)
    e2f2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e2f4:	4905      	ldr	r1, [pc, #20]	; (e30c <_ZN9CDC_Class5writeEPKhj+0x80>)
    e2f6:	4806      	ldr	r0, [pc, #24]	; (e310 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e2f8:	4b09      	ldr	r3, [pc, #36]	; (e320 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e2fa:	4798      	blx	r3
    e2fc:	e001      	b.n	e302 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e2fe:	2300      	movs	r3, #0
    e300:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e302:	697b      	ldr	r3, [r7, #20]
}
    e304:	4618      	mov	r0, r3
    e306:	3718      	adds	r7, #24
    e308:	46bd      	mov	sp, r7
    e30a:	bd80      	pop	{r7, pc}
    e30c:	0000de89 	.word	0x0000de89
    e310:	20001328 	.word	0x20001328
    e314:	0000db61 	.word	0x0000db61
    e318:	0000c319 	.word	0x0000c319
    e31c:	0000da19 	.word	0x0000da19
    e320:	0000db09 	.word	0x0000db09

0000e324 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e324:	b480      	push	{r7}
    e326:	b083      	sub	sp, #12
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e32c:	687b      	ldr	r3, [r7, #4]
    e32e:	7d5b      	ldrb	r3, [r3, #21]
    e330:	b2db      	uxtb	r3, r3
    e332:	2b00      	cmp	r3, #0
    e334:	d006      	beq.n	e344 <_ZN9CDC_Class9availableEv+0x20>
    e336:	687b      	ldr	r3, [r7, #4]
    e338:	7d1b      	ldrb	r3, [r3, #20]
    e33a:	b2db      	uxtb	r3, r3
    e33c:	2b00      	cmp	r3, #0
    e33e:	d001      	beq.n	e344 <_ZN9CDC_Class9availableEv+0x20>
    e340:	2301      	movs	r3, #1
    e342:	e000      	b.n	e346 <_ZN9CDC_Class9availableEv+0x22>
    e344:	2300      	movs	r3, #0
    e346:	2b00      	cmp	r3, #0
    e348:	d001      	beq.n	e34e <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e34a:	2301      	movs	r3, #1
    e34c:	e000      	b.n	e350 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e34e:	2300      	movs	r3, #0
	}
	
}
    e350:	4618      	mov	r0, r3
    e352:	370c      	adds	r7, #12
    e354:	46bd      	mov	sp, r7
    e356:	bc80      	pop	{r7}
    e358:	4770      	bx	lr
	...

0000e35c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e35c:	b580      	push	{r7, lr}
    e35e:	b082      	sub	sp, #8
    e360:	af00      	add	r7, sp, #0
    e362:	6078      	str	r0, [r7, #4]
    e364:	6039      	str	r1, [r7, #0]
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	2b01      	cmp	r3, #1
    e36a:	d154      	bne.n	e416 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e36c:	683b      	ldr	r3, [r7, #0]
    e36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e372:	4293      	cmp	r3, r2
    e374:	d14f      	bne.n	e416 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e376:	492a      	ldr	r1, [pc, #168]	; (e420 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e378:	482a      	ldr	r0, [pc, #168]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e37a:	4b2b      	ldr	r3, [pc, #172]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e37c:	4798      	blx	r3
    e37e:	4a2b      	ldr	r2, [pc, #172]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e380:	492b      	ldr	r1, [pc, #172]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e382:	4828      	ldr	r0, [pc, #160]	; (e424 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e384:	4b2b      	ldr	r3, [pc, #172]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e386:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e388:	492b      	ldr	r1, [pc, #172]	; (e438 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e38a:	482c      	ldr	r0, [pc, #176]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e38c:	4b26      	ldr	r3, [pc, #152]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e38e:	4798      	blx	r3
    e390:	4a26      	ldr	r2, [pc, #152]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e392:	4927      	ldr	r1, [pc, #156]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e394:	4829      	ldr	r0, [pc, #164]	; (e43c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e396:	4b27      	ldr	r3, [pc, #156]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e398:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e39a:	4929      	ldr	r1, [pc, #164]	; (e440 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e39c:	4829      	ldr	r0, [pc, #164]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e39e:	4b22      	ldr	r3, [pc, #136]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3a0:	4798      	blx	r3
    e3a2:	4a22      	ldr	r2, [pc, #136]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3a4:	4922      	ldr	r1, [pc, #136]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3a6:	4827      	ldr	r0, [pc, #156]	; (e444 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e3a8:	4b22      	ldr	r3, [pc, #136]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3aa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e3ac:	4926      	ldr	r1, [pc, #152]	; (e448 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e3ae:	4827      	ldr	r0, [pc, #156]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3b0:	4b1d      	ldr	r3, [pc, #116]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3b2:	4798      	blx	r3
    e3b4:	4a1d      	ldr	r2, [pc, #116]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3b6:	491e      	ldr	r1, [pc, #120]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3b8:	4824      	ldr	r0, [pc, #144]	; (e44c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e3ba:	4b1e      	ldr	r3, [pc, #120]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3bc:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e3be:	4924      	ldr	r1, [pc, #144]	; (e450 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e3c0:	4824      	ldr	r0, [pc, #144]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3c2:	4b19      	ldr	r3, [pc, #100]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3c4:	4798      	blx	r3
    e3c6:	4a19      	ldr	r2, [pc, #100]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3c8:	4919      	ldr	r1, [pc, #100]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3ca:	4822      	ldr	r0, [pc, #136]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e3cc:	4b19      	ldr	r3, [pc, #100]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3ce:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e3d0:	4921      	ldr	r1, [pc, #132]	; (e458 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e3d2:	4822      	ldr	r0, [pc, #136]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3d4:	4b14      	ldr	r3, [pc, #80]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3d6:	4798      	blx	r3
    e3d8:	4a14      	ldr	r2, [pc, #80]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3da:	4915      	ldr	r1, [pc, #84]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3dc:	481f      	ldr	r0, [pc, #124]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e3de:	4b15      	ldr	r3, [pc, #84]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3e0:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e3e2:	491f      	ldr	r1, [pc, #124]	; (e460 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e3e4:	481f      	ldr	r0, [pc, #124]	; (e464 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e3e6:	4b10      	ldr	r3, [pc, #64]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3e8:	4798      	blx	r3
    e3ea:	4a10      	ldr	r2, [pc, #64]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3ec:	4910      	ldr	r1, [pc, #64]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e3ee:	481d      	ldr	r0, [pc, #116]	; (e464 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e3f0:	4b10      	ldr	r3, [pc, #64]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e3f2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e3f4:	491c      	ldr	r1, [pc, #112]	; (e468 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e3f6:	481d      	ldr	r0, [pc, #116]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e3f8:	4b0b      	ldr	r3, [pc, #44]	; (e428 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e3fa:	4798      	blx	r3
    e3fc:	4a0b      	ldr	r2, [pc, #44]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e3fe:	490c      	ldr	r1, [pc, #48]	; (e430 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e400:	481a      	ldr	r0, [pc, #104]	; (e46c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e402:	4b0c      	ldr	r3, [pc, #48]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e404:	4798      	blx	r3
    e406:	481a      	ldr	r0, [pc, #104]	; (e470 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e408:	4b1a      	ldr	r3, [pc, #104]	; (e474 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e40a:	4798      	blx	r3
    e40c:	4a07      	ldr	r2, [pc, #28]	; (e42c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e40e:	491a      	ldr	r1, [pc, #104]	; (e478 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e410:	4817      	ldr	r0, [pc, #92]	; (e470 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e412:	4b08      	ldr	r3, [pc, #32]	; (e434 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e414:	4798      	blx	r3
    e416:	bf00      	nop
    e418:	3708      	adds	r7, #8
    e41a:	46bd      	mov	sp, r7
    e41c:	bd80      	pop	{r7, pc}
    e41e:	bf00      	nop
    e420:	200014f0 	.word	0x200014f0
    e424:	20001288 	.word	0x20001288
    e428:	0000d8b9 	.word	0x0000d8b9
    e42c:	20000000 	.word	0x20000000
    e430:	0000d8f1 	.word	0x0000d8f1
    e434:	0000eb39 	.word	0x0000eb39
    e438:	20001584 	.word	0x20001584
    e43c:	200012a8 	.word	0x200012a8
    e440:	200016a8 	.word	0x200016a8
    e444:	200012c8 	.word	0x200012c8
    e448:	200015a4 	.word	0x200015a4
    e44c:	200012e8 	.word	0x200012e8
    e450:	20001668 	.word	0x20001668
    e454:	20001308 	.word	0x20001308
    e458:	20001688 	.word	0x20001688
    e45c:	20001328 	.word	0x20001328
    e460:	20001560 	.word	0x20001560
    e464:	20001348 	.word	0x20001348
    e468:	20001600 	.word	0x20001600
    e46c:	20001368 	.word	0x20001368
    e470:	2000138c 	.word	0x2000138c
    e474:	0000df79 	.word	0x0000df79
    e478:	0000dfc1 	.word	0x0000dfc1

0000e47c <_GLOBAL__sub_I_ptrCDCClass>:
    e47c:	b580      	push	{r7, lr}
    e47e:	af00      	add	r7, sp, #0
    e480:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e484:	2001      	movs	r0, #1
    e486:	4b01      	ldr	r3, [pc, #4]	; (e48c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e488:	4798      	blx	r3
    e48a:	bd80      	pop	{r7, pc}
    e48c:	0000e35d 	.word	0x0000e35d

0000e490 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e490:	b590      	push	{r4, r7, lr}
    e492:	b083      	sub	sp, #12
    e494:	af00      	add	r7, sp, #0
    e496:	6078      	str	r0, [r7, #4]
    e498:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e49a:	683b      	ldr	r3, [r7, #0]
    e49c:	2b00      	cmp	r3, #0
    e49e:	d101      	bne.n	e4a4 <_ZN5Print5writeEPKc+0x14>
    e4a0:	2300      	movs	r3, #0
    e4a2:	e00c      	b.n	e4be <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e4a4:	687b      	ldr	r3, [r7, #4]
    e4a6:	681b      	ldr	r3, [r3, #0]
    e4a8:	3304      	adds	r3, #4
    e4aa:	681c      	ldr	r4, [r3, #0]
    e4ac:	6838      	ldr	r0, [r7, #0]
    e4ae:	4b06      	ldr	r3, [pc, #24]	; (e4c8 <_ZN5Print5writeEPKc+0x38>)
    e4b0:	4798      	blx	r3
    e4b2:	4603      	mov	r3, r0
    e4b4:	461a      	mov	r2, r3
    e4b6:	6839      	ldr	r1, [r7, #0]
    e4b8:	6878      	ldr	r0, [r7, #4]
    e4ba:	47a0      	blx	r4
    e4bc:	4603      	mov	r3, r0
    }
    e4be:	4618      	mov	r0, r3
    e4c0:	370c      	adds	r7, #12
    e4c2:	46bd      	mov	sp, r7
    e4c4:	bd90      	pop	{r4, r7, pc}
    e4c6:	bf00      	nop
    e4c8:	0000edc1 	.word	0x0000edc1

0000e4cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e4cc:	b580      	push	{r7, lr}
    e4ce:	b086      	sub	sp, #24
    e4d0:	af00      	add	r7, sp, #0
    e4d2:	60f8      	str	r0, [r7, #12]
    e4d4:	60b9      	str	r1, [r7, #8]
    e4d6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e4d8:	2300      	movs	r3, #0
    e4da:	617b      	str	r3, [r7, #20]
  while (size--) {
    e4dc:	687b      	ldr	r3, [r7, #4]
    e4de:	1e5a      	subs	r2, r3, #1
    e4e0:	607a      	str	r2, [r7, #4]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	bf14      	ite	ne
    e4e6:	2301      	movne	r3, #1
    e4e8:	2300      	moveq	r3, #0
    e4ea:	b2db      	uxtb	r3, r3
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d016      	beq.n	e51e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e4f0:	68fb      	ldr	r3, [r7, #12]
    e4f2:	681b      	ldr	r3, [r3, #0]
    e4f4:	681a      	ldr	r2, [r3, #0]
    e4f6:	68bb      	ldr	r3, [r7, #8]
    e4f8:	1c59      	adds	r1, r3, #1
    e4fa:	60b9      	str	r1, [r7, #8]
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	4619      	mov	r1, r3
    e500:	68f8      	ldr	r0, [r7, #12]
    e502:	4790      	blx	r2
    e504:	4603      	mov	r3, r0
    e506:	2b00      	cmp	r3, #0
    e508:	bf14      	ite	ne
    e50a:	2301      	movne	r3, #1
    e50c:	2300      	moveq	r3, #0
    e50e:	b2db      	uxtb	r3, r3
    e510:	2b00      	cmp	r3, #0
    e512:	d003      	beq.n	e51c <_ZN5Print5writeEPKhj+0x50>
    e514:	697b      	ldr	r3, [r7, #20]
    e516:	3301      	adds	r3, #1
    e518:	617b      	str	r3, [r7, #20]
  while (size--) {
    e51a:	e7df      	b.n	e4dc <_ZN5Print5writeEPKhj+0x10>
    else break;
    e51c:	bf00      	nop
  }
  return n;
    e51e:	697b      	ldr	r3, [r7, #20]
}
    e520:	4618      	mov	r0, r3
    e522:	3718      	adds	r7, #24
    e524:	46bd      	mov	sp, r7
    e526:	bd80      	pop	{r7, pc}

0000e528 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e528:	b580      	push	{r7, lr}
    e52a:	b082      	sub	sp, #8
    e52c:	af00      	add	r7, sp, #0
    e52e:	6078      	str	r0, [r7, #4]
    e530:	6039      	str	r1, [r7, #0]
  return write(str);
    e532:	6839      	ldr	r1, [r7, #0]
    e534:	6878      	ldr	r0, [r7, #4]
    e536:	4b03      	ldr	r3, [pc, #12]	; (e544 <_ZN5Print5printEPKc+0x1c>)
    e538:	4798      	blx	r3
    e53a:	4603      	mov	r3, r0
}
    e53c:	4618      	mov	r0, r3
    e53e:	3708      	adds	r7, #8
    e540:	46bd      	mov	sp, r7
    e542:	bd80      	pop	{r7, pc}
    e544:	0000e491 	.word	0x0000e491

0000e548 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    e548:	b580      	push	{r7, lr}
    e54a:	b082      	sub	sp, #8
    e54c:	af00      	add	r7, sp, #0
    e54e:	6078      	str	r0, [r7, #4]
    e550:	460b      	mov	r3, r1
    e552:	70fb      	strb	r3, [r7, #3]
  return write(c);
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	681b      	ldr	r3, [r3, #0]
    e558:	681b      	ldr	r3, [r3, #0]
    e55a:	78fa      	ldrb	r2, [r7, #3]
    e55c:	4611      	mov	r1, r2
    e55e:	6878      	ldr	r0, [r7, #4]
    e560:	4798      	blx	r3
    e562:	4603      	mov	r3, r0
}
    e564:	4618      	mov	r0, r3
    e566:	3708      	adds	r7, #8
    e568:	46bd      	mov	sp, r7
    e56a:	bd80      	pop	{r7, pc}

0000e56c <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    e56c:	b580      	push	{r7, lr}
    e56e:	b084      	sub	sp, #16
    e570:	af00      	add	r7, sp, #0
    e572:	60f8      	str	r0, [r7, #12]
    e574:	460b      	mov	r3, r1
    e576:	607a      	str	r2, [r7, #4]
    e578:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    e57a:	7afb      	ldrb	r3, [r7, #11]
    e57c:	687a      	ldr	r2, [r7, #4]
    e57e:	4619      	mov	r1, r3
    e580:	68f8      	ldr	r0, [r7, #12]
    e582:	4b03      	ldr	r3, [pc, #12]	; (e590 <_ZN5Print5printEhi+0x24>)
    e584:	4798      	blx	r3
    e586:	4603      	mov	r3, r0
}
    e588:	4618      	mov	r0, r3
    e58a:	3710      	adds	r7, #16
    e58c:	46bd      	mov	sp, r7
    e58e:	bd80      	pop	{r7, pc}
    e590:	0000e641 	.word	0x0000e641

0000e594 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    e594:	b580      	push	{r7, lr}
    e596:	b084      	sub	sp, #16
    e598:	af00      	add	r7, sp, #0
    e59a:	60f8      	str	r0, [r7, #12]
    e59c:	60b9      	str	r1, [r7, #8]
    e59e:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    e5a0:	687a      	ldr	r2, [r7, #4]
    e5a2:	68b9      	ldr	r1, [r7, #8]
    e5a4:	68f8      	ldr	r0, [r7, #12]
    e5a6:	4b03      	ldr	r3, [pc, #12]	; (e5b4 <_ZN5Print5printEii+0x20>)
    e5a8:	4798      	blx	r3
    e5aa:	4603      	mov	r3, r0
}
    e5ac:	4618      	mov	r0, r3
    e5ae:	3710      	adds	r7, #16
    e5b0:	46bd      	mov	sp, r7
    e5b2:	bd80      	pop	{r7, pc}
    e5b4:	0000e5b9 	.word	0x0000e5b9

0000e5b8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	b086      	sub	sp, #24
    e5bc:	af00      	add	r7, sp, #0
    e5be:	60f8      	str	r0, [r7, #12]
    e5c0:	60b9      	str	r1, [r7, #8]
    e5c2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	d109      	bne.n	e5de <_ZN5Print5printEli+0x26>
    return write(n);
    e5ca:	68fb      	ldr	r3, [r7, #12]
    e5cc:	681b      	ldr	r3, [r3, #0]
    e5ce:	681b      	ldr	r3, [r3, #0]
    e5d0:	68ba      	ldr	r2, [r7, #8]
    e5d2:	b2d2      	uxtb	r2, r2
    e5d4:	4611      	mov	r1, r2
    e5d6:	68f8      	ldr	r0, [r7, #12]
    e5d8:	4798      	blx	r3
    e5da:	4603      	mov	r3, r0
    e5dc:	e028      	b.n	e630 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	2b0a      	cmp	r3, #10
    e5e2:	d11d      	bne.n	e620 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    e5e4:	68bb      	ldr	r3, [r7, #8]
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	da12      	bge.n	e610 <_ZN5Print5printEli+0x58>
      int t = print('-');
    e5ea:	212d      	movs	r1, #45	; 0x2d
    e5ec:	68f8      	ldr	r0, [r7, #12]
    e5ee:	4b12      	ldr	r3, [pc, #72]	; (e638 <_ZN5Print5printEli+0x80>)
    e5f0:	4798      	blx	r3
    e5f2:	4603      	mov	r3, r0
    e5f4:	617b      	str	r3, [r7, #20]
      n = -n;
    e5f6:	68bb      	ldr	r3, [r7, #8]
    e5f8:	425b      	negs	r3, r3
    e5fa:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    e5fc:	68bb      	ldr	r3, [r7, #8]
    e5fe:	220a      	movs	r2, #10
    e600:	4619      	mov	r1, r3
    e602:	68f8      	ldr	r0, [r7, #12]
    e604:	4b0d      	ldr	r3, [pc, #52]	; (e63c <_ZN5Print5printEli+0x84>)
    e606:	4798      	blx	r3
    e608:	4602      	mov	r2, r0
    e60a:	697b      	ldr	r3, [r7, #20]
    e60c:	4413      	add	r3, r2
    e60e:	e00f      	b.n	e630 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    e610:	68bb      	ldr	r3, [r7, #8]
    e612:	220a      	movs	r2, #10
    e614:	4619      	mov	r1, r3
    e616:	68f8      	ldr	r0, [r7, #12]
    e618:	4b08      	ldr	r3, [pc, #32]	; (e63c <_ZN5Print5printEli+0x84>)
    e61a:	4798      	blx	r3
    e61c:	4603      	mov	r3, r0
    e61e:	e007      	b.n	e630 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    e620:	68bb      	ldr	r3, [r7, #8]
    e622:	687a      	ldr	r2, [r7, #4]
    e624:	b2d2      	uxtb	r2, r2
    e626:	4619      	mov	r1, r3
    e628:	68f8      	ldr	r0, [r7, #12]
    e62a:	4b04      	ldr	r3, [pc, #16]	; (e63c <_ZN5Print5printEli+0x84>)
    e62c:	4798      	blx	r3
    e62e:	4603      	mov	r3, r0
  }
}
    e630:	4618      	mov	r0, r3
    e632:	3718      	adds	r7, #24
    e634:	46bd      	mov	sp, r7
    e636:	bd80      	pop	{r7, pc}
    e638:	0000e549 	.word	0x0000e549
    e63c:	0000e685 	.word	0x0000e685

0000e640 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    e640:	b580      	push	{r7, lr}
    e642:	b084      	sub	sp, #16
    e644:	af00      	add	r7, sp, #0
    e646:	60f8      	str	r0, [r7, #12]
    e648:	60b9      	str	r1, [r7, #8]
    e64a:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	2b00      	cmp	r3, #0
    e650:	d109      	bne.n	e666 <_ZN5Print5printEmi+0x26>
    e652:	68fb      	ldr	r3, [r7, #12]
    e654:	681b      	ldr	r3, [r3, #0]
    e656:	681b      	ldr	r3, [r3, #0]
    e658:	68ba      	ldr	r2, [r7, #8]
    e65a:	b2d2      	uxtb	r2, r2
    e65c:	4611      	mov	r1, r2
    e65e:	68f8      	ldr	r0, [r7, #12]
    e660:	4798      	blx	r3
    e662:	4603      	mov	r3, r0
    e664:	e007      	b.n	e676 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    e666:	687b      	ldr	r3, [r7, #4]
    e668:	b2db      	uxtb	r3, r3
    e66a:	461a      	mov	r2, r3
    e66c:	68b9      	ldr	r1, [r7, #8]
    e66e:	68f8      	ldr	r0, [r7, #12]
    e670:	4b03      	ldr	r3, [pc, #12]	; (e680 <_ZN5Print5printEmi+0x40>)
    e672:	4798      	blx	r3
    e674:	4603      	mov	r3, r0
}
    e676:	4618      	mov	r0, r3
    e678:	3710      	adds	r7, #16
    e67a:	46bd      	mov	sp, r7
    e67c:	bd80      	pop	{r7, pc}
    e67e:	bf00      	nop
    e680:	0000e685 	.word	0x0000e685

0000e684 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    e684:	b580      	push	{r7, lr}
    e686:	b08e      	sub	sp, #56	; 0x38
    e688:	af00      	add	r7, sp, #0
    e68a:	60f8      	str	r0, [r7, #12]
    e68c:	60b9      	str	r1, [r7, #8]
    e68e:	4613      	mov	r3, r2
    e690:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    e692:	f107 0310 	add.w	r3, r7, #16
    e696:	3320      	adds	r3, #32
    e698:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    e69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e69c:	2200      	movs	r2, #0
    e69e:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    e6a0:	79fb      	ldrb	r3, [r7, #7]
    e6a2:	2b01      	cmp	r3, #1
    e6a4:	dc01      	bgt.n	e6aa <_ZN5Print11printNumberEmh+0x26>
    e6a6:	230a      	movs	r3, #10
    e6a8:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    e6aa:	79fa      	ldrb	r2, [r7, #7]
    e6ac:	68bb      	ldr	r3, [r7, #8]
    e6ae:	fbb3 f1f2 	udiv	r1, r3, r2
    e6b2:	fb02 f201 	mul.w	r2, r2, r1
    e6b6:	1a9b      	subs	r3, r3, r2
    e6b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    e6bc:	79fb      	ldrb	r3, [r7, #7]
    e6be:	68ba      	ldr	r2, [r7, #8]
    e6c0:	fbb2 f3f3 	udiv	r3, r2, r3
    e6c4:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    e6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6c8:	3b01      	subs	r3, #1
    e6ca:	637b      	str	r3, [r7, #52]	; 0x34
    e6cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6d0:	2b09      	cmp	r3, #9
    e6d2:	dc04      	bgt.n	e6de <_ZN5Print11printNumberEmh+0x5a>
    e6d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6d8:	3330      	adds	r3, #48	; 0x30
    e6da:	b2db      	uxtb	r3, r3
    e6dc:	e003      	b.n	e6e6 <_ZN5Print11printNumberEmh+0x62>
    e6de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    e6e2:	3337      	adds	r3, #55	; 0x37
    e6e4:	b2db      	uxtb	r3, r3
    e6e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e6e8:	7013      	strb	r3, [r2, #0]
  } while(n);
    e6ea:	68bb      	ldr	r3, [r7, #8]
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d000      	beq.n	e6f2 <_ZN5Print11printNumberEmh+0x6e>
  do {
    e6f0:	e7db      	b.n	e6aa <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    e6f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
    e6f4:	68f8      	ldr	r0, [r7, #12]
    e6f6:	4b03      	ldr	r3, [pc, #12]	; (e704 <_ZN5Print11printNumberEmh+0x80>)
    e6f8:	4798      	blx	r3
    e6fa:	4603      	mov	r3, r0
}
    e6fc:	4618      	mov	r0, r3
    e6fe:	3738      	adds	r7, #56	; 0x38
    e700:	46bd      	mov	sp, r7
    e702:	bd80      	pop	{r7, pc}
    e704:	0000e491 	.word	0x0000e491

0000e708 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e708:	b480      	push	{r7}
    e70a:	b083      	sub	sp, #12
    e70c:	af00      	add	r7, sp, #0
    e70e:	6078      	str	r0, [r7, #4]
    e710:	460b      	mov	r3, r1
    e712:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e714:	78fb      	ldrb	r3, [r7, #3]
    e716:	687a      	ldr	r2, [r7, #4]
    e718:	01db      	lsls	r3, r3, #7
    e71a:	4413      	add	r3, r2
    e71c:	681b      	ldr	r3, [r3, #0]
}
    e71e:	4618      	mov	r0, r3
    e720:	370c      	adds	r7, #12
    e722:	46bd      	mov	sp, r7
    e724:	bc80      	pop	{r7}
    e726:	4770      	bx	lr

0000e728 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e728:	b480      	push	{r7}
    e72a:	b083      	sub	sp, #12
    e72c:	af00      	add	r7, sp, #0
    e72e:	6078      	str	r0, [r7, #4]
    e730:	460b      	mov	r3, r1
    e732:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e734:	78fb      	ldrb	r3, [r7, #3]
    e736:	687a      	ldr	r2, [r7, #4]
    e738:	01db      	lsls	r3, r3, #7
    e73a:	4413      	add	r3, r2
    e73c:	3310      	adds	r3, #16
    e73e:	681b      	ldr	r3, [r3, #0]
}
    e740:	4618      	mov	r0, r3
    e742:	370c      	adds	r7, #12
    e744:	46bd      	mov	sp, r7
    e746:	bc80      	pop	{r7}
    e748:	4770      	bx	lr

0000e74a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e74a:	b480      	push	{r7}
    e74c:	b083      	sub	sp, #12
    e74e:	af00      	add	r7, sp, #0
    e750:	6078      	str	r0, [r7, #4]
    e752:	460b      	mov	r3, r1
    e754:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e756:	78fb      	ldrb	r3, [r7, #3]
    e758:	687a      	ldr	r2, [r7, #4]
    e75a:	01db      	lsls	r3, r3, #7
    e75c:	4413      	add	r3, r2
    e75e:	3320      	adds	r3, #32
    e760:	681b      	ldr	r3, [r3, #0]
}
    e762:	4618      	mov	r0, r3
    e764:	370c      	adds	r7, #12
    e766:	46bd      	mov	sp, r7
    e768:	bc80      	pop	{r7}
    e76a:	4770      	bx	lr

0000e76c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e76c:	b580      	push	{r7, lr}
    e76e:	b086      	sub	sp, #24
    e770:	af00      	add	r7, sp, #0
    e772:	4603      	mov	r3, r0
    e774:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e776:	f107 030c 	add.w	r3, r7, #12
    e77a:	4618      	mov	r0, r3
    e77c:	4b13      	ldr	r3, [pc, #76]	; (e7cc <_gpio_get_level+0x60>)
    e77e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e780:	79fb      	ldrb	r3, [r7, #7]
    e782:	4619      	mov	r1, r3
    e784:	4812      	ldr	r0, [pc, #72]	; (e7d0 <_gpio_get_level+0x64>)
    e786:	4b13      	ldr	r3, [pc, #76]	; (e7d4 <_gpio_get_level+0x68>)
    e788:	4798      	blx	r3
    e78a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e78c:	79fb      	ldrb	r3, [r7, #7]
    e78e:	4619      	mov	r1, r3
    e790:	480f      	ldr	r0, [pc, #60]	; (e7d0 <_gpio_get_level+0x64>)
    e792:	4b11      	ldr	r3, [pc, #68]	; (e7d8 <_gpio_get_level+0x6c>)
    e794:	4798      	blx	r3
    e796:	4602      	mov	r2, r0
    e798:	697b      	ldr	r3, [r7, #20]
    e79a:	43db      	mvns	r3, r3
    e79c:	4013      	ands	r3, r2
    e79e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e7a0:	79fb      	ldrb	r3, [r7, #7]
    e7a2:	4619      	mov	r1, r3
    e7a4:	480a      	ldr	r0, [pc, #40]	; (e7d0 <_gpio_get_level+0x64>)
    e7a6:	4b0d      	ldr	r3, [pc, #52]	; (e7dc <_gpio_get_level+0x70>)
    e7a8:	4798      	blx	r3
    e7aa:	4602      	mov	r2, r0
    e7ac:	697b      	ldr	r3, [r7, #20]
    e7ae:	4013      	ands	r3, r2
    e7b0:	693a      	ldr	r2, [r7, #16]
    e7b2:	4313      	orrs	r3, r2
    e7b4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e7b6:	f107 030c 	add.w	r3, r7, #12
    e7ba:	4618      	mov	r0, r3
    e7bc:	4b08      	ldr	r3, [pc, #32]	; (e7e0 <_gpio_get_level+0x74>)
    e7be:	4798      	blx	r3

	return tmp;
    e7c0:	693b      	ldr	r3, [r7, #16]
}
    e7c2:	4618      	mov	r0, r3
    e7c4:	3718      	adds	r7, #24
    e7c6:	46bd      	mov	sp, r7
    e7c8:	bd80      	pop	{r7, pc}
    e7ca:	bf00      	nop
    e7cc:	0000b4f5 	.word	0x0000b4f5
    e7d0:	41008000 	.word	0x41008000
    e7d4:	0000e709 	.word	0x0000e709
    e7d8:	0000e74b 	.word	0x0000e74b
    e7dc:	0000e729 	.word	0x0000e729
    e7e0:	0000b51b 	.word	0x0000b51b

0000e7e4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e7e4:	b580      	push	{r7, lr}
    e7e6:	b082      	sub	sp, #8
    e7e8:	af00      	add	r7, sp, #0
    e7ea:	4603      	mov	r3, r0
    e7ec:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e7ee:	79fb      	ldrb	r3, [r7, #7]
    e7f0:	115b      	asrs	r3, r3, #5
    e7f2:	b2db      	uxtb	r3, r3
    e7f4:	4618      	mov	r0, r3
    e7f6:	4b09      	ldr	r3, [pc, #36]	; (e81c <gpio_get_pin_level+0x38>)
    e7f8:	4798      	blx	r3
    e7fa:	4601      	mov	r1, r0
    e7fc:	79fb      	ldrb	r3, [r7, #7]
    e7fe:	f003 031f 	and.w	r3, r3, #31
    e802:	2201      	movs	r2, #1
    e804:	fa02 f303 	lsl.w	r3, r2, r3
    e808:	400b      	ands	r3, r1
    e80a:	2b00      	cmp	r3, #0
    e80c:	bf14      	ite	ne
    e80e:	2301      	movne	r3, #1
    e810:	2300      	moveq	r3, #0
    e812:	b2db      	uxtb	r3, r3
}
    e814:	4618      	mov	r0, r3
    e816:	3708      	adds	r7, #8
    e818:	46bd      	mov	sp, r7
    e81a:	bd80      	pop	{r7, pc}
    e81c:	0000e76d 	.word	0x0000e76d

0000e820 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e820:	b480      	push	{r7}
    e822:	b083      	sub	sp, #12
    e824:	af00      	add	r7, sp, #0
    e826:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e828:	4b06      	ldr	r3, [pc, #24]	; (e844 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e82a:	681b      	ldr	r3, [r3, #0]
    e82c:	2201      	movs	r2, #1
    e82e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e830:	4b04      	ldr	r3, [pc, #16]	; (e844 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e832:	681b      	ldr	r3, [r3, #0]
    e834:	2200      	movs	r2, #0
    e836:	705a      	strb	r2, [r3, #1]
}
    e838:	bf00      	nop
    e83a:	370c      	adds	r7, #12
    e83c:	46bd      	mov	sp, r7
    e83e:	bc80      	pop	{r7}
    e840:	4770      	bx	lr
    e842:	bf00      	nop
    e844:	200014ec 	.word	0x200014ec

0000e848 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e848:	b580      	push	{r7, lr}
    e84a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e84c:	2040      	movs	r0, #64	; 0x40
    e84e:	4b0a      	ldr	r3, [pc, #40]	; (e878 <_ZL10USBPluggedv+0x30>)
    e850:	4798      	blx	r3
    e852:	4603      	mov	r3, r0
    e854:	2b00      	cmp	r3, #0
    e856:	d004      	beq.n	e862 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e858:	4b08      	ldr	r3, [pc, #32]	; (e87c <_ZL10USBPluggedv+0x34>)
    e85a:	681b      	ldr	r3, [r3, #0]
    e85c:	2201      	movs	r2, #1
    e85e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e860:	e007      	b.n	e872 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e862:	4b06      	ldr	r3, [pc, #24]	; (e87c <_ZL10USBPluggedv+0x34>)
    e864:	681b      	ldr	r3, [r3, #0]
    e866:	2200      	movs	r2, #0
    e868:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e86a:	4b04      	ldr	r3, [pc, #16]	; (e87c <_ZL10USBPluggedv+0x34>)
    e86c:	681b      	ldr	r3, [r3, #0]
    e86e:	2200      	movs	r2, #0
    e870:	701a      	strb	r2, [r3, #0]
}
    e872:	bf00      	nop
    e874:	bd80      	pop	{r7, pc}
    e876:	bf00      	nop
    e878:	0000e7e5 	.word	0x0000e7e5
    e87c:	200014ec 	.word	0x200014ec

0000e880 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e880:	b480      	push	{r7}
    e882:	b083      	sub	sp, #12
    e884:	af00      	add	r7, sp, #0
    e886:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e888:	4a04      	ldr	r2, [pc, #16]	; (e89c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e88a:	687b      	ldr	r3, [r7, #4]
    e88c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e88e:	687b      	ldr	r3, [r7, #4]
    e890:	4618      	mov	r0, r3
    e892:	370c      	adds	r7, #12
    e894:	46bd      	mov	sp, r7
    e896:	bc80      	pop	{r7}
    e898:	4770      	bx	lr
    e89a:	bf00      	nop
    e89c:	200014ec 	.word	0x200014ec

0000e8a0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e8a0:	b480      	push	{r7}
    e8a2:	b083      	sub	sp, #12
    e8a4:	af00      	add	r7, sp, #0
    e8a6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e8a8:	687b      	ldr	r3, [r7, #4]
    e8aa:	4618      	mov	r0, r3
    e8ac:	370c      	adds	r7, #12
    e8ae:	46bd      	mov	sp, r7
    e8b0:	bc80      	pop	{r7}
    e8b2:	4770      	bx	lr

0000e8b4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e8b4:	b580      	push	{r7, lr}
    e8b6:	b082      	sub	sp, #8
    e8b8:	af00      	add	r7, sp, #0
    e8ba:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e8bc:	491e      	ldr	r1, [pc, #120]	; (e938 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    e8be:	2040      	movs	r0, #64	; 0x40
    e8c0:	4b1e      	ldr	r3, [pc, #120]	; (e93c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e8c2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e8c4:	481e      	ldr	r0, [pc, #120]	; (e940 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e8c6:	4b1f      	ldr	r3, [pc, #124]	; (e944 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e8c8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e8ca:	2040      	movs	r0, #64	; 0x40
    e8cc:	4b1e      	ldr	r3, [pc, #120]	; (e948 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e8ce:	4798      	blx	r3
    e8d0:	4603      	mov	r3, r0
    e8d2:	461a      	mov	r2, r3
    e8d4:	687b      	ldr	r3, [r7, #4]
    e8d6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e8d8:	687b      	ldr	r3, [r7, #4]
    e8da:	78db      	ldrb	r3, [r3, #3]
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d021      	beq.n	e924 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	2200      	movs	r2, #0
    e8e4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e8e6:	687b      	ldr	r3, [r7, #4]
    e8e8:	2201      	movs	r2, #1
    e8ea:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e8ec:	f44f 7216 	mov.w	r2, #600	; 0x258
    e8f0:	4916      	ldr	r1, [pc, #88]	; (e94c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e8f2:	4813      	ldr	r0, [pc, #76]	; (e940 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e8f4:	4b16      	ldr	r3, [pc, #88]	; (e950 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e8f6:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e8f8:	4816      	ldr	r0, [pc, #88]	; (e954 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e8fa:	4b17      	ldr	r3, [pc, #92]	; (e958 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e8fc:	4798      	blx	r3
    e8fe:	4603      	mov	r3, r0
    e900:	f083 0301 	eor.w	r3, r3, #1
    e904:	b2db      	uxtb	r3, r3
    e906:	2b00      	cmp	r3, #0
    e908:	d008      	beq.n	e91c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    e90a:	687b      	ldr	r3, [r7, #4]
    e90c:	789b      	ldrb	r3, [r3, #2]
    e90e:	b2db      	uxtb	r3, r3
    e910:	2b00      	cmp	r3, #0
    e912:	d0f1      	beq.n	e8f8 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    e914:	687b      	ldr	r3, [r7, #4]
    e916:	2200      	movs	r2, #0
    e918:	701a      	strb	r2, [r3, #0]
					return;
    e91a:	e009      	b.n	e930 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e91c:	4808      	ldr	r0, [pc, #32]	; (e940 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e91e:	4b0f      	ldr	r3, [pc, #60]	; (e95c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e920:	4798      	blx	r3
    e922:	e005      	b.n	e930 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	2200      	movs	r2, #0
    e928:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	2200      	movs	r2, #0
    e92e:	705a      	strb	r2, [r3, #1]
		}
		
}
    e930:	3708      	adds	r7, #8
    e932:	46bd      	mov	sp, r7
    e934:	bd80      	pop	{r7, pc}
    e936:	bf00      	nop
    e938:	0000e849 	.word	0x0000e849
    e93c:	00002411 	.word	0x00002411
    e940:	2000148c 	.word	0x2000148c
    e944:	0000d9a5 	.word	0x0000d9a5
    e948:	0000e7e5 	.word	0x0000e7e5
    e94c:	0000e821 	.word	0x0000e821
    e950:	0000db61 	.word	0x0000db61
    e954:	2000138c 	.word	0x2000138c
    e958:	0000e031 	.word	0x0000e031
    e95c:	0000da19 	.word	0x0000da19

0000e960 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    e960:	b580      	push	{r7, lr}
    e962:	b082      	sub	sp, #8
    e964:	af00      	add	r7, sp, #0
    e966:	6078      	str	r0, [r7, #4]
    e968:	6039      	str	r1, [r7, #0]
    e96a:	687b      	ldr	r3, [r7, #4]
    e96c:	2b01      	cmp	r3, #1
    e96e:	d14c      	bne.n	ea0a <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e970:	683b      	ldr	r3, [r7, #0]
    e972:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e976:	4293      	cmp	r3, r2
    e978:	d147      	bne.n	ea0a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e97a:	4926      	ldr	r1, [pc, #152]	; (ea14 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e97c:	4826      	ldr	r0, [pc, #152]	; (ea18 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e97e:	4b27      	ldr	r3, [pc, #156]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e980:	4798      	blx	r3
    e982:	4a27      	ldr	r2, [pc, #156]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e984:	4927      	ldr	r1, [pc, #156]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e986:	4824      	ldr	r0, [pc, #144]	; (ea18 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e988:	4b27      	ldr	r3, [pc, #156]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e98a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e98c:	4927      	ldr	r1, [pc, #156]	; (ea2c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e98e:	4828      	ldr	r0, [pc, #160]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e990:	4b22      	ldr	r3, [pc, #136]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e992:	4798      	blx	r3
    e994:	4a22      	ldr	r2, [pc, #136]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e996:	4923      	ldr	r1, [pc, #140]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e998:	4825      	ldr	r0, [pc, #148]	; (ea30 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e99a:	4b23      	ldr	r3, [pc, #140]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e99c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e99e:	4925      	ldr	r1, [pc, #148]	; (ea34 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e9a0:	4825      	ldr	r0, [pc, #148]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9a2:	4b1e      	ldr	r3, [pc, #120]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9a4:	4798      	blx	r3
    e9a6:	4a1e      	ldr	r2, [pc, #120]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9a8:	491e      	ldr	r1, [pc, #120]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9aa:	4823      	ldr	r0, [pc, #140]	; (ea38 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e9ac:	4b1e      	ldr	r3, [pc, #120]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9ae:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e9b0:	4922      	ldr	r1, [pc, #136]	; (ea3c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e9b2:	4823      	ldr	r0, [pc, #140]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e9b4:	4b19      	ldr	r3, [pc, #100]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9b6:	4798      	blx	r3
    e9b8:	4a19      	ldr	r2, [pc, #100]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9ba:	491a      	ldr	r1, [pc, #104]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9bc:	4820      	ldr	r0, [pc, #128]	; (ea40 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e9be:	4b1a      	ldr	r3, [pc, #104]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9c0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e9c2:	4920      	ldr	r1, [pc, #128]	; (ea44 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e9c4:	4820      	ldr	r0, [pc, #128]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9c6:	4b15      	ldr	r3, [pc, #84]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9c8:	4798      	blx	r3
    e9ca:	4a15      	ldr	r2, [pc, #84]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9cc:	4915      	ldr	r1, [pc, #84]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9ce:	481e      	ldr	r0, [pc, #120]	; (ea48 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e9d0:	4b15      	ldr	r3, [pc, #84]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9d2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e9d4:	491d      	ldr	r1, [pc, #116]	; (ea4c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e9d6:	481e      	ldr	r0, [pc, #120]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9d8:	4b10      	ldr	r3, [pc, #64]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9da:	4798      	blx	r3
    e9dc:	4a10      	ldr	r2, [pc, #64]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9de:	4911      	ldr	r1, [pc, #68]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9e0:	481b      	ldr	r0, [pc, #108]	; (ea50 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e9e2:	4b11      	ldr	r3, [pc, #68]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9e4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e9e6:	491b      	ldr	r1, [pc, #108]	; (ea54 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e9e8:	481b      	ldr	r0, [pc, #108]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e9ea:	4b0c      	ldr	r3, [pc, #48]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9ec:	4798      	blx	r3
    e9ee:	4a0c      	ldr	r2, [pc, #48]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e9f0:	490c      	ldr	r1, [pc, #48]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e9f2:	4819      	ldr	r0, [pc, #100]	; (ea58 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e9f4:	4b0c      	ldr	r3, [pc, #48]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e9f6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e9f8:	4918      	ldr	r1, [pc, #96]	; (ea5c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e9fa:	4819      	ldr	r0, [pc, #100]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e9fc:	4b07      	ldr	r3, [pc, #28]	; (ea1c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e9fe:	4798      	blx	r3
    ea00:	4a07      	ldr	r2, [pc, #28]	; (ea20 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ea02:	4908      	ldr	r1, [pc, #32]	; (ea24 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ea04:	4816      	ldr	r0, [pc, #88]	; (ea60 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ea06:	4b08      	ldr	r3, [pc, #32]	; (ea28 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ea08:	4798      	blx	r3
    ea0a:	bf00      	nop
    ea0c:	3708      	adds	r7, #8
    ea0e:	46bd      	mov	sp, r7
    ea10:	bd80      	pop	{r7, pc}
    ea12:	bf00      	nop
    ea14:	200014f0 	.word	0x200014f0
    ea18:	200013ec 	.word	0x200013ec
    ea1c:	0000d8b9 	.word	0x0000d8b9
    ea20:	20000000 	.word	0x20000000
    ea24:	0000d8f1 	.word	0x0000d8f1
    ea28:	0000eb39 	.word	0x0000eb39
    ea2c:	20001584 	.word	0x20001584
    ea30:	2000140c 	.word	0x2000140c
    ea34:	200016a8 	.word	0x200016a8
    ea38:	2000142c 	.word	0x2000142c
    ea3c:	200015a4 	.word	0x200015a4
    ea40:	2000144c 	.word	0x2000144c
    ea44:	20001668 	.word	0x20001668
    ea48:	2000146c 	.word	0x2000146c
    ea4c:	20001688 	.word	0x20001688
    ea50:	2000148c 	.word	0x2000148c
    ea54:	20001560 	.word	0x20001560
    ea58:	200014ac 	.word	0x200014ac
    ea5c:	20001600 	.word	0x20001600
    ea60:	200014cc 	.word	0x200014cc

0000ea64 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ea64:	b580      	push	{r7, lr}
    ea66:	af00      	add	r7, sp, #0
    ea68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea6c:	2001      	movs	r0, #1
    ea6e:	4b01      	ldr	r3, [pc, #4]	; (ea74 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ea70:	4798      	blx	r3
    ea72:	bd80      	pop	{r7, pc}
    ea74:	0000e961 	.word	0x0000e961

0000ea78 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ea78:	b480      	push	{r7}
    ea7a:	b083      	sub	sp, #12
    ea7c:	af00      	add	r7, sp, #0
    ea7e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ea80:	2300      	movs	r3, #0
	}
    ea82:	4618      	mov	r0, r3
    ea84:	370c      	adds	r7, #12
    ea86:	46bd      	mov	sp, r7
    ea88:	bc80      	pop	{r7}
    ea8a:	4770      	bx	lr

0000ea8c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ea8c:	b480      	push	{r7}
    ea8e:	af00      	add	r7, sp, #0
		}
    ea90:	bf00      	nop
    ea92:	46bd      	mov	sp, r7
    ea94:	bc80      	pop	{r7}
    ea96:	4770      	bx	lr

0000ea98 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    ea98:	b580      	push	{r7, lr}
    ea9a:	b084      	sub	sp, #16
    ea9c:	af00      	add	r7, sp, #0
    ea9e:	60f8      	str	r0, [r7, #12]
    eaa0:	60b9      	str	r1, [r7, #8]
    eaa2:	4613      	mov	r3, r2
    eaa4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    eaa6:	68fb      	ldr	r3, [r7, #12]
    eaa8:	2b00      	cmp	r3, #0
    eaaa:	d004      	beq.n	eab6 <io_write+0x1e>
    eaac:	68bb      	ldr	r3, [r7, #8]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d001      	beq.n	eab6 <io_write+0x1e>
    eab2:	2301      	movs	r3, #1
    eab4:	e000      	b.n	eab8 <io_write+0x20>
    eab6:	2300      	movs	r3, #0
    eab8:	f003 0301 	and.w	r3, r3, #1
    eabc:	b2db      	uxtb	r3, r3
    eabe:	2234      	movs	r2, #52	; 0x34
    eac0:	4907      	ldr	r1, [pc, #28]	; (eae0 <io_write+0x48>)
    eac2:	4618      	mov	r0, r3
    eac4:	4b07      	ldr	r3, [pc, #28]	; (eae4 <io_write+0x4c>)
    eac6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    eac8:	68fb      	ldr	r3, [r7, #12]
    eaca:	681b      	ldr	r3, [r3, #0]
    eacc:	88fa      	ldrh	r2, [r7, #6]
    eace:	68b9      	ldr	r1, [r7, #8]
    ead0:	68f8      	ldr	r0, [r7, #12]
    ead2:	4798      	blx	r3
    ead4:	4603      	mov	r3, r0
}
    ead6:	4618      	mov	r0, r3
    ead8:	3710      	adds	r7, #16
    eada:	46bd      	mov	sp, r7
    eadc:	bd80      	pop	{r7, pc}
    eade:	bf00      	nop
    eae0:	0000f46c 	.word	0x0000f46c
    eae4:	0000396d 	.word	0x0000396d

0000eae8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    eae8:	b580      	push	{r7, lr}
    eaea:	b084      	sub	sp, #16
    eaec:	af00      	add	r7, sp, #0
    eaee:	60f8      	str	r0, [r7, #12]
    eaf0:	60b9      	str	r1, [r7, #8]
    eaf2:	4613      	mov	r3, r2
    eaf4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    eaf6:	68fb      	ldr	r3, [r7, #12]
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d004      	beq.n	eb06 <io_read+0x1e>
    eafc:	68bb      	ldr	r3, [r7, #8]
    eafe:	2b00      	cmp	r3, #0
    eb00:	d001      	beq.n	eb06 <io_read+0x1e>
    eb02:	2301      	movs	r3, #1
    eb04:	e000      	b.n	eb08 <io_read+0x20>
    eb06:	2300      	movs	r3, #0
    eb08:	f003 0301 	and.w	r3, r3, #1
    eb0c:	b2db      	uxtb	r3, r3
    eb0e:	223d      	movs	r2, #61	; 0x3d
    eb10:	4907      	ldr	r1, [pc, #28]	; (eb30 <io_read+0x48>)
    eb12:	4618      	mov	r0, r3
    eb14:	4b07      	ldr	r3, [pc, #28]	; (eb34 <io_read+0x4c>)
    eb16:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    eb18:	68fb      	ldr	r3, [r7, #12]
    eb1a:	685b      	ldr	r3, [r3, #4]
    eb1c:	88fa      	ldrh	r2, [r7, #6]
    eb1e:	68b9      	ldr	r1, [r7, #8]
    eb20:	68f8      	ldr	r0, [r7, #12]
    eb22:	4798      	blx	r3
    eb24:	4603      	mov	r3, r0
}
    eb26:	4618      	mov	r0, r3
    eb28:	3710      	adds	r7, #16
    eb2a:	46bd      	mov	sp, r7
    eb2c:	bd80      	pop	{r7, pc}
    eb2e:	bf00      	nop
    eb30:	0000f46c 	.word	0x0000f46c
    eb34:	0000396d 	.word	0x0000396d

0000eb38 <__aeabi_atexit>:
    eb38:	460b      	mov	r3, r1
    eb3a:	4601      	mov	r1, r0
    eb3c:	4618      	mov	r0, r3
    eb3e:	f000 b801 	b.w	eb44 <__cxa_atexit>
    eb42:	bf00      	nop

0000eb44 <__cxa_atexit>:
    eb44:	4613      	mov	r3, r2
    eb46:	460a      	mov	r2, r1
    eb48:	4601      	mov	r1, r0
    eb4a:	2002      	movs	r0, #2
    eb4c:	f000 b9a6 	b.w	ee9c <__register_exitproc>

0000eb50 <ffs>:
    eb50:	b140      	cbz	r0, eb64 <ffs+0x14>
    eb52:	2300      	movs	r3, #0
    eb54:	fa40 f103 	asr.w	r1, r0, r3
    eb58:	1c5a      	adds	r2, r3, #1
    eb5a:	07c9      	lsls	r1, r1, #31
    eb5c:	4613      	mov	r3, r2
    eb5e:	d5f9      	bpl.n	eb54 <ffs+0x4>
    eb60:	4610      	mov	r0, r2
    eb62:	4770      	bx	lr
    eb64:	4602      	mov	r2, r0
    eb66:	4610      	mov	r0, r2
    eb68:	4770      	bx	lr
    eb6a:	bf00      	nop

0000eb6c <__libc_init_array>:
    eb6c:	b570      	push	{r4, r5, r6, lr}
    eb6e:	4e0f      	ldr	r6, [pc, #60]	; (ebac <__libc_init_array+0x40>)
    eb70:	4d0f      	ldr	r5, [pc, #60]	; (ebb0 <__libc_init_array+0x44>)
    eb72:	1b76      	subs	r6, r6, r5
    eb74:	10b6      	asrs	r6, r6, #2
    eb76:	bf18      	it	ne
    eb78:	2400      	movne	r4, #0
    eb7a:	d005      	beq.n	eb88 <__libc_init_array+0x1c>
    eb7c:	3401      	adds	r4, #1
    eb7e:	f855 3b04 	ldr.w	r3, [r5], #4
    eb82:	4798      	blx	r3
    eb84:	42a6      	cmp	r6, r4
    eb86:	d1f9      	bne.n	eb7c <__libc_init_array+0x10>
    eb88:	4e0a      	ldr	r6, [pc, #40]	; (ebb4 <__libc_init_array+0x48>)
    eb8a:	4d0b      	ldr	r5, [pc, #44]	; (ebb8 <__libc_init_array+0x4c>)
    eb8c:	1b76      	subs	r6, r6, r5
    eb8e:	f000 fc79 	bl	f484 <_init>
    eb92:	10b6      	asrs	r6, r6, #2
    eb94:	bf18      	it	ne
    eb96:	2400      	movne	r4, #0
    eb98:	d006      	beq.n	eba8 <__libc_init_array+0x3c>
    eb9a:	3401      	adds	r4, #1
    eb9c:	f855 3b04 	ldr.w	r3, [r5], #4
    eba0:	4798      	blx	r3
    eba2:	42a6      	cmp	r6, r4
    eba4:	d1f9      	bne.n	eb9a <__libc_init_array+0x2e>
    eba6:	bd70      	pop	{r4, r5, r6, pc}
    eba8:	bd70      	pop	{r4, r5, r6, pc}
    ebaa:	bf00      	nop
    ebac:	0000f490 	.word	0x0000f490
    ebb0:	0000f490 	.word	0x0000f490
    ebb4:	0000f4ac 	.word	0x0000f4ac
    ebb8:	0000f490 	.word	0x0000f490

0000ebbc <memcpy>:
    ebbc:	4684      	mov	ip, r0
    ebbe:	ea41 0300 	orr.w	r3, r1, r0
    ebc2:	f013 0303 	ands.w	r3, r3, #3
    ebc6:	d16d      	bne.n	eca4 <memcpy+0xe8>
    ebc8:	3a40      	subs	r2, #64	; 0x40
    ebca:	d341      	bcc.n	ec50 <memcpy+0x94>
    ebcc:	f851 3b04 	ldr.w	r3, [r1], #4
    ebd0:	f840 3b04 	str.w	r3, [r0], #4
    ebd4:	f851 3b04 	ldr.w	r3, [r1], #4
    ebd8:	f840 3b04 	str.w	r3, [r0], #4
    ebdc:	f851 3b04 	ldr.w	r3, [r1], #4
    ebe0:	f840 3b04 	str.w	r3, [r0], #4
    ebe4:	f851 3b04 	ldr.w	r3, [r1], #4
    ebe8:	f840 3b04 	str.w	r3, [r0], #4
    ebec:	f851 3b04 	ldr.w	r3, [r1], #4
    ebf0:	f840 3b04 	str.w	r3, [r0], #4
    ebf4:	f851 3b04 	ldr.w	r3, [r1], #4
    ebf8:	f840 3b04 	str.w	r3, [r0], #4
    ebfc:	f851 3b04 	ldr.w	r3, [r1], #4
    ec00:	f840 3b04 	str.w	r3, [r0], #4
    ec04:	f851 3b04 	ldr.w	r3, [r1], #4
    ec08:	f840 3b04 	str.w	r3, [r0], #4
    ec0c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec10:	f840 3b04 	str.w	r3, [r0], #4
    ec14:	f851 3b04 	ldr.w	r3, [r1], #4
    ec18:	f840 3b04 	str.w	r3, [r0], #4
    ec1c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec20:	f840 3b04 	str.w	r3, [r0], #4
    ec24:	f851 3b04 	ldr.w	r3, [r1], #4
    ec28:	f840 3b04 	str.w	r3, [r0], #4
    ec2c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec30:	f840 3b04 	str.w	r3, [r0], #4
    ec34:	f851 3b04 	ldr.w	r3, [r1], #4
    ec38:	f840 3b04 	str.w	r3, [r0], #4
    ec3c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec40:	f840 3b04 	str.w	r3, [r0], #4
    ec44:	f851 3b04 	ldr.w	r3, [r1], #4
    ec48:	f840 3b04 	str.w	r3, [r0], #4
    ec4c:	3a40      	subs	r2, #64	; 0x40
    ec4e:	d2bd      	bcs.n	ebcc <memcpy+0x10>
    ec50:	3230      	adds	r2, #48	; 0x30
    ec52:	d311      	bcc.n	ec78 <memcpy+0xbc>
    ec54:	f851 3b04 	ldr.w	r3, [r1], #4
    ec58:	f840 3b04 	str.w	r3, [r0], #4
    ec5c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec60:	f840 3b04 	str.w	r3, [r0], #4
    ec64:	f851 3b04 	ldr.w	r3, [r1], #4
    ec68:	f840 3b04 	str.w	r3, [r0], #4
    ec6c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec70:	f840 3b04 	str.w	r3, [r0], #4
    ec74:	3a10      	subs	r2, #16
    ec76:	d2ed      	bcs.n	ec54 <memcpy+0x98>
    ec78:	320c      	adds	r2, #12
    ec7a:	d305      	bcc.n	ec88 <memcpy+0xcc>
    ec7c:	f851 3b04 	ldr.w	r3, [r1], #4
    ec80:	f840 3b04 	str.w	r3, [r0], #4
    ec84:	3a04      	subs	r2, #4
    ec86:	d2f9      	bcs.n	ec7c <memcpy+0xc0>
    ec88:	3204      	adds	r2, #4
    ec8a:	d008      	beq.n	ec9e <memcpy+0xe2>
    ec8c:	07d2      	lsls	r2, r2, #31
    ec8e:	bf1c      	itt	ne
    ec90:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ec94:	f800 3b01 	strbne.w	r3, [r0], #1
    ec98:	d301      	bcc.n	ec9e <memcpy+0xe2>
    ec9a:	880b      	ldrh	r3, [r1, #0]
    ec9c:	8003      	strh	r3, [r0, #0]
    ec9e:	4660      	mov	r0, ip
    eca0:	4770      	bx	lr
    eca2:	bf00      	nop
    eca4:	2a08      	cmp	r2, #8
    eca6:	d313      	bcc.n	ecd0 <memcpy+0x114>
    eca8:	078b      	lsls	r3, r1, #30
    ecaa:	d08d      	beq.n	ebc8 <memcpy+0xc>
    ecac:	f010 0303 	ands.w	r3, r0, #3
    ecb0:	d08a      	beq.n	ebc8 <memcpy+0xc>
    ecb2:	f1c3 0304 	rsb	r3, r3, #4
    ecb6:	1ad2      	subs	r2, r2, r3
    ecb8:	07db      	lsls	r3, r3, #31
    ecba:	bf1c      	itt	ne
    ecbc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    ecc0:	f800 3b01 	strbne.w	r3, [r0], #1
    ecc4:	d380      	bcc.n	ebc8 <memcpy+0xc>
    ecc6:	f831 3b02 	ldrh.w	r3, [r1], #2
    ecca:	f820 3b02 	strh.w	r3, [r0], #2
    ecce:	e77b      	b.n	ebc8 <memcpy+0xc>
    ecd0:	3a04      	subs	r2, #4
    ecd2:	d3d9      	bcc.n	ec88 <memcpy+0xcc>
    ecd4:	3a01      	subs	r2, #1
    ecd6:	f811 3b01 	ldrb.w	r3, [r1], #1
    ecda:	f800 3b01 	strb.w	r3, [r0], #1
    ecde:	d2f9      	bcs.n	ecd4 <memcpy+0x118>
    ece0:	780b      	ldrb	r3, [r1, #0]
    ece2:	7003      	strb	r3, [r0, #0]
    ece4:	784b      	ldrb	r3, [r1, #1]
    ece6:	7043      	strb	r3, [r0, #1]
    ece8:	788b      	ldrb	r3, [r1, #2]
    ecea:	7083      	strb	r3, [r0, #2]
    ecec:	4660      	mov	r0, ip
    ecee:	4770      	bx	lr

0000ecf0 <memset>:
    ecf0:	b470      	push	{r4, r5, r6}
    ecf2:	0786      	lsls	r6, r0, #30
    ecf4:	d046      	beq.n	ed84 <memset+0x94>
    ecf6:	1e54      	subs	r4, r2, #1
    ecf8:	2a00      	cmp	r2, #0
    ecfa:	d041      	beq.n	ed80 <memset+0x90>
    ecfc:	b2ca      	uxtb	r2, r1
    ecfe:	4603      	mov	r3, r0
    ed00:	e002      	b.n	ed08 <memset+0x18>
    ed02:	f114 34ff 	adds.w	r4, r4, #4294967295
    ed06:	d33b      	bcc.n	ed80 <memset+0x90>
    ed08:	f803 2b01 	strb.w	r2, [r3], #1
    ed0c:	079d      	lsls	r5, r3, #30
    ed0e:	d1f8      	bne.n	ed02 <memset+0x12>
    ed10:	2c03      	cmp	r4, #3
    ed12:	d92e      	bls.n	ed72 <memset+0x82>
    ed14:	b2cd      	uxtb	r5, r1
    ed16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    ed1a:	2c0f      	cmp	r4, #15
    ed1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    ed20:	d919      	bls.n	ed56 <memset+0x66>
    ed22:	f103 0210 	add.w	r2, r3, #16
    ed26:	4626      	mov	r6, r4
    ed28:	3e10      	subs	r6, #16
    ed2a:	2e0f      	cmp	r6, #15
    ed2c:	f842 5c10 	str.w	r5, [r2, #-16]
    ed30:	f842 5c0c 	str.w	r5, [r2, #-12]
    ed34:	f842 5c08 	str.w	r5, [r2, #-8]
    ed38:	f842 5c04 	str.w	r5, [r2, #-4]
    ed3c:	f102 0210 	add.w	r2, r2, #16
    ed40:	d8f2      	bhi.n	ed28 <memset+0x38>
    ed42:	f1a4 0210 	sub.w	r2, r4, #16
    ed46:	f022 020f 	bic.w	r2, r2, #15
    ed4a:	f004 040f 	and.w	r4, r4, #15
    ed4e:	3210      	adds	r2, #16
    ed50:	2c03      	cmp	r4, #3
    ed52:	4413      	add	r3, r2
    ed54:	d90d      	bls.n	ed72 <memset+0x82>
    ed56:	461e      	mov	r6, r3
    ed58:	4622      	mov	r2, r4
    ed5a:	3a04      	subs	r2, #4
    ed5c:	2a03      	cmp	r2, #3
    ed5e:	f846 5b04 	str.w	r5, [r6], #4
    ed62:	d8fa      	bhi.n	ed5a <memset+0x6a>
    ed64:	1f22      	subs	r2, r4, #4
    ed66:	f022 0203 	bic.w	r2, r2, #3
    ed6a:	3204      	adds	r2, #4
    ed6c:	4413      	add	r3, r2
    ed6e:	f004 0403 	and.w	r4, r4, #3
    ed72:	b12c      	cbz	r4, ed80 <memset+0x90>
    ed74:	b2c9      	uxtb	r1, r1
    ed76:	441c      	add	r4, r3
    ed78:	f803 1b01 	strb.w	r1, [r3], #1
    ed7c:	429c      	cmp	r4, r3
    ed7e:	d1fb      	bne.n	ed78 <memset+0x88>
    ed80:	bc70      	pop	{r4, r5, r6}
    ed82:	4770      	bx	lr
    ed84:	4614      	mov	r4, r2
    ed86:	4603      	mov	r3, r0
    ed88:	e7c2      	b.n	ed10 <memset+0x20>
    ed8a:	bf00      	nop
	...

0000edc0 <strlen>:
    edc0:	f890 f000 	pld	[r0]
    edc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    edc8:	f020 0107 	bic.w	r1, r0, #7
    edcc:	f06f 0c00 	mvn.w	ip, #0
    edd0:	f010 0407 	ands.w	r4, r0, #7
    edd4:	f891 f020 	pld	[r1, #32]
    edd8:	f040 8049 	bne.w	ee6e <strlen+0xae>
    eddc:	f04f 0400 	mov.w	r4, #0
    ede0:	f06f 0007 	mvn.w	r0, #7
    ede4:	e9d1 2300 	ldrd	r2, r3, [r1]
    ede8:	f891 f040 	pld	[r1, #64]	; 0x40
    edec:	f100 0008 	add.w	r0, r0, #8
    edf0:	fa82 f24c 	uadd8	r2, r2, ip
    edf4:	faa4 f28c 	sel	r2, r4, ip
    edf8:	fa83 f34c 	uadd8	r3, r3, ip
    edfc:	faa2 f38c 	sel	r3, r2, ip
    ee00:	bb4b      	cbnz	r3, ee56 <strlen+0x96>
    ee02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ee06:	fa82 f24c 	uadd8	r2, r2, ip
    ee0a:	f100 0008 	add.w	r0, r0, #8
    ee0e:	faa4 f28c 	sel	r2, r4, ip
    ee12:	fa83 f34c 	uadd8	r3, r3, ip
    ee16:	faa2 f38c 	sel	r3, r2, ip
    ee1a:	b9e3      	cbnz	r3, ee56 <strlen+0x96>
    ee1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    ee20:	fa82 f24c 	uadd8	r2, r2, ip
    ee24:	f100 0008 	add.w	r0, r0, #8
    ee28:	faa4 f28c 	sel	r2, r4, ip
    ee2c:	fa83 f34c 	uadd8	r3, r3, ip
    ee30:	faa2 f38c 	sel	r3, r2, ip
    ee34:	b97b      	cbnz	r3, ee56 <strlen+0x96>
    ee36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ee3a:	f101 0120 	add.w	r1, r1, #32
    ee3e:	fa82 f24c 	uadd8	r2, r2, ip
    ee42:	f100 0008 	add.w	r0, r0, #8
    ee46:	faa4 f28c 	sel	r2, r4, ip
    ee4a:	fa83 f34c 	uadd8	r3, r3, ip
    ee4e:	faa2 f38c 	sel	r3, r2, ip
    ee52:	2b00      	cmp	r3, #0
    ee54:	d0c6      	beq.n	ede4 <strlen+0x24>
    ee56:	2a00      	cmp	r2, #0
    ee58:	bf04      	itt	eq
    ee5a:	3004      	addeq	r0, #4
    ee5c:	461a      	moveq	r2, r3
    ee5e:	ba12      	rev	r2, r2
    ee60:	fab2 f282 	clz	r2, r2
    ee64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    ee68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ee6c:	4770      	bx	lr
    ee6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    ee72:	f004 0503 	and.w	r5, r4, #3
    ee76:	f1c4 0000 	rsb	r0, r4, #0
    ee7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ee7e:	f014 0f04 	tst.w	r4, #4
    ee82:	f891 f040 	pld	[r1, #64]	; 0x40
    ee86:	fa0c f505 	lsl.w	r5, ip, r5
    ee8a:	ea62 0205 	orn	r2, r2, r5
    ee8e:	bf1c      	itt	ne
    ee90:	ea63 0305 	ornne	r3, r3, r5
    ee94:	4662      	movne	r2, ip
    ee96:	f04f 0400 	mov.w	r4, #0
    ee9a:	e7a9      	b.n	edf0 <strlen+0x30>

0000ee9c <__register_exitproc>:
    ee9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eea0:	4d2c      	ldr	r5, [pc, #176]	; (ef54 <__register_exitproc+0xb8>)
    eea2:	4606      	mov	r6, r0
    eea4:	6828      	ldr	r0, [r5, #0]
    eea6:	4698      	mov	r8, r3
    eea8:	460f      	mov	r7, r1
    eeaa:	4691      	mov	r9, r2
    eeac:	f000 f882 	bl	efb4 <__retarget_lock_acquire_recursive>
    eeb0:	4b29      	ldr	r3, [pc, #164]	; (ef58 <__register_exitproc+0xbc>)
    eeb2:	681c      	ldr	r4, [r3, #0]
    eeb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d03e      	beq.n	ef3a <__register_exitproc+0x9e>
    eebc:	685a      	ldr	r2, [r3, #4]
    eebe:	2a1f      	cmp	r2, #31
    eec0:	dc1c      	bgt.n	eefc <__register_exitproc+0x60>
    eec2:	f102 0e01 	add.w	lr, r2, #1
    eec6:	b176      	cbz	r6, eee6 <__register_exitproc+0x4a>
    eec8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    eecc:	2401      	movs	r4, #1
    eece:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    eed2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    eed6:	4094      	lsls	r4, r2
    eed8:	4320      	orrs	r0, r4
    eeda:	2e02      	cmp	r6, #2
    eedc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    eee0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    eee4:	d023      	beq.n	ef2e <__register_exitproc+0x92>
    eee6:	3202      	adds	r2, #2
    eee8:	f8c3 e004 	str.w	lr, [r3, #4]
    eeec:	6828      	ldr	r0, [r5, #0]
    eeee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    eef2:	f000 f861 	bl	efb8 <__retarget_lock_release_recursive>
    eef6:	2000      	movs	r0, #0
    eef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eefc:	4b17      	ldr	r3, [pc, #92]	; (ef5c <__register_exitproc+0xc0>)
    eefe:	b30b      	cbz	r3, ef44 <__register_exitproc+0xa8>
    ef00:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ef04:	f7ff fdb8 	bl	ea78 <malloc>
    ef08:	4603      	mov	r3, r0
    ef0a:	b1d8      	cbz	r0, ef44 <__register_exitproc+0xa8>
    ef0c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ef10:	6002      	str	r2, [r0, #0]
    ef12:	2100      	movs	r1, #0
    ef14:	6041      	str	r1, [r0, #4]
    ef16:	460a      	mov	r2, r1
    ef18:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ef1c:	f04f 0e01 	mov.w	lr, #1
    ef20:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ef24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ef28:	2e00      	cmp	r6, #0
    ef2a:	d0dc      	beq.n	eee6 <__register_exitproc+0x4a>
    ef2c:	e7cc      	b.n	eec8 <__register_exitproc+0x2c>
    ef2e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ef32:	430c      	orrs	r4, r1
    ef34:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ef38:	e7d5      	b.n	eee6 <__register_exitproc+0x4a>
    ef3a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ef3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ef42:	e7bb      	b.n	eebc <__register_exitproc+0x20>
    ef44:	6828      	ldr	r0, [r5, #0]
    ef46:	f000 f837 	bl	efb8 <__retarget_lock_release_recursive>
    ef4a:	f04f 30ff 	mov.w	r0, #4294967295
    ef4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef52:	bf00      	nop
    ef54:	20000638 	.word	0x20000638
    ef58:	0000f480 	.word	0x0000f480
    ef5c:	0000ea79 	.word	0x0000ea79

0000ef60 <register_fini>:
    ef60:	4b02      	ldr	r3, [pc, #8]	; (ef6c <register_fini+0xc>)
    ef62:	b113      	cbz	r3, ef6a <register_fini+0xa>
    ef64:	4802      	ldr	r0, [pc, #8]	; (ef70 <register_fini+0x10>)
    ef66:	f000 b805 	b.w	ef74 <atexit>
    ef6a:	4770      	bx	lr
    ef6c:	00000000 	.word	0x00000000
    ef70:	0000ef81 	.word	0x0000ef81

0000ef74 <atexit>:
    ef74:	2300      	movs	r3, #0
    ef76:	4601      	mov	r1, r0
    ef78:	461a      	mov	r2, r3
    ef7a:	4618      	mov	r0, r3
    ef7c:	f7ff bf8e 	b.w	ee9c <__register_exitproc>

0000ef80 <__libc_fini_array>:
    ef80:	b538      	push	{r3, r4, r5, lr}
    ef82:	4c0a      	ldr	r4, [pc, #40]	; (efac <__libc_fini_array+0x2c>)
    ef84:	4d0a      	ldr	r5, [pc, #40]	; (efb0 <__libc_fini_array+0x30>)
    ef86:	1b64      	subs	r4, r4, r5
    ef88:	10a4      	asrs	r4, r4, #2
    ef8a:	d00a      	beq.n	efa2 <__libc_fini_array+0x22>
    ef8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    ef90:	3b01      	subs	r3, #1
    ef92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ef96:	3c01      	subs	r4, #1
    ef98:	f855 3904 	ldr.w	r3, [r5], #-4
    ef9c:	4798      	blx	r3
    ef9e:	2c00      	cmp	r4, #0
    efa0:	d1f9      	bne.n	ef96 <__libc_fini_array+0x16>
    efa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    efa6:	f000 ba81 	b.w	f4ac <_fini>
    efaa:	bf00      	nop
    efac:	0000f4bc 	.word	0x0000f4bc
    efb0:	0000f4b8 	.word	0x0000f4b8

0000efb4 <__retarget_lock_acquire_recursive>:
    efb4:	4770      	bx	lr
    efb6:	bf00      	nop

0000efb8 <__retarget_lock_release_recursive>:
    efb8:	4770      	bx	lr
    efba:	bf00      	nop
    efbc:	62616e45 	.word	0x62616e45
    efc0:	676e696c 	.word	0x676e696c
    efc4:	61654820 	.word	0x61654820
    efc8:	3a726574 	.word	0x3a726574
    efcc:	00000020 	.word	0x00000020
    efd0:	00092e20 	.word	0x00092e20
    efd4:	74616548 	.word	0x74616548
    efd8:	00207265 	.word	0x00207265
    efdc:	61745320 	.word	0x61745320
    efe0:	20737574 	.word	0x20737574
    efe4:	0000003a 	.word	0x0000003a
    efe8:	00000a0d 	.word	0x00000a0d
    efec:	682f2e2e 	.word	0x682f2e2e
    eff0:	702f6c70 	.word	0x702f6c70
    eff4:	2f74726f 	.word	0x2f74726f
    eff8:	5f6c7068 	.word	0x5f6c7068
    effc:	6f697067 	.word	0x6f697067
    f000:	7361625f 	.word	0x7361625f
    f004:	00682e65 	.word	0x00682e65
    f008:	682f2e2e 	.word	0x682f2e2e
    f00c:	692f6c61 	.word	0x692f6c61
    f010:	756c636e 	.word	0x756c636e
    f014:	682f6564 	.word	0x682f6564
    f018:	775f6c61 	.word	0x775f6c61
    f01c:	682e7464 	.word	0x682e7464
    f020:	00000000 	.word	0x00000000
    f024:	682f2e2e 	.word	0x682f2e2e
    f028:	732f6c61 	.word	0x732f6c61
    f02c:	682f6372 	.word	0x682f6372
    f030:	635f6c61 	.word	0x635f6c61
    f034:	6e656c61 	.word	0x6e656c61
    f038:	2e726164 	.word	0x2e726164
    f03c:	00000063 	.word	0x00000063
    f040:	682f2e2e 	.word	0x682f2e2e
    f044:	732f6c61 	.word	0x732f6c61
    f048:	682f6372 	.word	0x682f6372
    f04c:	635f6c61 	.word	0x635f6c61
    f050:	615f6e61 	.word	0x615f6e61
    f054:	636e7973 	.word	0x636e7973
    f058:	0000632e 	.word	0x0000632e
    f05c:	682f2e2e 	.word	0x682f2e2e
    f060:	732f6c61 	.word	0x732f6c61
    f064:	682f6372 	.word	0x682f6372
    f068:	635f6c61 	.word	0x635f6c61
    f06c:	735f6372 	.word	0x735f6372
    f070:	2e636e79 	.word	0x2e636e79
    f074:	00000063 	.word	0x00000063
    f078:	682f2e2e 	.word	0x682f2e2e
    f07c:	732f6c61 	.word	0x732f6c61
    f080:	682f6372 	.word	0x682f6372
    f084:	695f6c61 	.word	0x695f6c61
    f088:	6d5f6332 	.word	0x6d5f6332
    f08c:	6e79735f 	.word	0x6e79735f
    f090:	00632e63 	.word	0x00632e63
    f094:	682f2e2e 	.word	0x682f2e2e
    f098:	732f6c61 	.word	0x732f6c61
    f09c:	682f6372 	.word	0x682f6372
    f0a0:	705f6c61 	.word	0x705f6c61
    f0a4:	632e6d77 	.word	0x632e6d77
    f0a8:	00000000 	.word	0x00000000
    f0ac:	682f2e2e 	.word	0x682f2e2e
    f0b0:	732f6c61 	.word	0x732f6c61
    f0b4:	682f6372 	.word	0x682f6372
    f0b8:	715f6c61 	.word	0x715f6c61
    f0bc:	5f697073 	.word	0x5f697073
    f0c0:	636e7973 	.word	0x636e7973
    f0c4:	0000632e 	.word	0x0000632e
    f0c8:	682f2e2e 	.word	0x682f2e2e
    f0cc:	732f6c61 	.word	0x732f6c61
    f0d0:	682f6372 	.word	0x682f6372
    f0d4:	735f6c61 	.word	0x735f6c61
    f0d8:	6d5f6970 	.word	0x6d5f6970
    f0dc:	6e79735f 	.word	0x6e79735f
    f0e0:	00632e63 	.word	0x00632e63
    f0e4:	682f2e2e 	.word	0x682f2e2e
    f0e8:	732f6c61 	.word	0x732f6c61
    f0ec:	682f6372 	.word	0x682f6372
    f0f0:	745f6c61 	.word	0x745f6c61
    f0f4:	72656d69 	.word	0x72656d69
    f0f8:	0000632e 	.word	0x0000632e
    f0fc:	682f2e2e 	.word	0x682f2e2e
    f100:	752f6c61 	.word	0x752f6c61
    f104:	736c6974 	.word	0x736c6974
    f108:	6372732f 	.word	0x6372732f
    f10c:	6974752f 	.word	0x6974752f
    f110:	6c5f736c 	.word	0x6c5f736c
    f114:	2e747369 	.word	0x2e747369
    f118:	00000063 	.word	0x00000063

0000f11c <_map>:
    f11c:	00000000 00000040 00000001 00000021     ....@.......!...
    f12c:	00000003 00000003 00000004 00000004     ................
    f13c:	00000005 00000005 00000006 00000056     ............V...
    f14c:	00000007 00000057 00000008 00000028     ....W.......(...
    f15c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
    f16c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000f17c <user_mux_confs>:
    f17c:	00020100 00000000 00000000 00000000     ................
	...

0000f1c0 <channel_confs>:
    f1c0:	0660065f 00000000 00000000 00000000     _.`.............
	...

0000f200 <interrupt_cfg>:
	...
    f280:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    f290:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    f2a0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f2b0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f2c0:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    f2d0:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    f2e0:	43000400 43000800 43000c00              ...C...C...C

0000f2ec <sercomspi_regs>:
    f2ec:	0020000c 00020000 00000000 01ff0001     .. .............
    f2fc:	30000c04 02000000 00000000 ff001700     ...0............
    f30c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    f31c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    f32c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    f33c:	43001400 43001800                       ...C...C

0000f344 <_usb_ep_cfgs>:
    f344:	20000984 00000000 00000040 200009c4     ... ....@...... 
    f354:	20000a04 00400040 20000a44 20000a84     ... @.@.D.. ... 
    f364:	00400040 20000ac4 20000b04 00400040     @.@.... ... @.@.
    f374:	20000b44 20000b84 00400040 00000804     D.. ... @.@.....
    f384:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    f394:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    f3a4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    f3b4:	7361625f 00682e65                       _base.h.

0000f3bc <n25q256a_interface>:
    f3bc:	0000b935 0000b9d9 0000bae9 0000bca1     5...............
    f3cc:	0000bd31 752f2e2e 642f6273 63697665     1...../usb/devic
    f3dc:	73752f65 2e636462 00000063              e/usbdc.c...

0000f3e8 <_ZTV9CDC_Class>:
	...
    f3f0:	0000e1ad 0000e28d 0000de31 0000e175     ........1...u...
    f400:	0000e325 0000e139 0000e04d 0000e09d     %...9...M.......
    f410:	0000e195 0000e1f5                       ........

0000f418 <_ZTV6Stream>:
	...
    f420:	0000ea8d 0000e4cd 0000de31 0000de45     ........1...E...
    f430:	0000ea8d 0000ea8d 0000ea8d 2e257830     ............0x%.
    f440:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
    f450:	0066766f                                ovf.

0000f454 <_ZTV5Print>:
	...
    f45c:	0000ea8d 0000e4cd 0000de31 0000de45     ........1...E...
    f46c:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    f47c:	00632e6f                                o.c.

0000f480 <_global_impure_ptr>:
    f480:	20000210                                ... 

0000f484 <_init>:
    f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f486:	bf00      	nop
    f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f48a:	bc08      	pop	{r3}
    f48c:	469e      	mov	lr, r3
    f48e:	4770      	bx	lr

0000f490 <__init_array_start>:
    f490:	0000ef61 	.word	0x0000ef61

0000f494 <__frame_dummy_init_array_entry>:
    f494:	00000289 0000083d 00000b9d 0000ddf9     ....=...........
    f4a4:	0000e47d 0000ea65                       }...e...

0000f4ac <_fini>:
    f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4ae:	bf00      	nop
    f4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f4b2:	bc08      	pop	{r3}
    f4b4:	469e      	mov	lr, r3
    f4b6:	4770      	bx	lr

0000f4b8 <__fini_array_start>:
    f4b8:	00000265 	.word	0x00000265
