
HeaterP0Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000103f8  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000103f8  000103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00010400  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00000fb4  2000060c  00010a0c  0003060c  2**2
                  ALLOC
  6 .stack        00010000  200015c0  000119c0  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00071f9b  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b47  00000000  00000000  000a262e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001cb41  00000000  00000000  000ac175  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003300  00000000  00000000  000c8cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002fd0  00000000  00000000  000cbfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004e342  00000000  00000000  000cef86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a41d  00000000  00000000  0011d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013e9d7  00000000  00000000  001576e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d38c  00000000  00000000  002960bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 15 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	65 60 00 00 91 4e 00 00 d1 02 00 00 d1 02 00 00     e`...N..........
      7c:	a1 4e 00 00 b1 4e 00 00 c1 4e 00 00 d1 4e 00 00     .N...N...N...N..
      8c:	e1 4e 00 00 f1 4e 00 00 01 4f 00 00 d1 02 00 00     .N...N...O......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 a1 75 00 00 bd 75 00 00 d9 75 00 00     .....u...u...u..
     174:	f5 75 00 00 d1 02 00 00 e9 42 00 00 e9 b5 00 00     .u.......B......
     184:	f9 b5 00 00 09 b6 00 00 19 b6 00 00 d1 02 00 00     ................
     194:	05 80 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 21 80 00 00     ............!...
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 e5 8c 00 00 d1 02 00 00     ................
     1f4:	01 8d 00 00 d1 02 00 00 1d 8d 00 00 39 8d 00 00     ............9...
     204:	55 8d 00 00 71 8d 00 00 d1 02 00 00 d1 02 00 00     U...q...........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00010400 	.word	0x00010400

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00010400 	.word	0x00010400
     2c4:	20000610 	.word	0x20000610
     2c8:	00010400 	.word	0x00010400
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00010400 	.word	0x00010400
     33c:	2000060c 	.word	0x2000060c
     340:	200015c0 	.word	0x200015c0
     344:	2000060c 	.word	0x2000060c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000fa25 	.word	0x0000fa25
     354:	00000365 	.word	0x00000365

00000358 <_ZL13FirmwareAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     358:	2280      	movs	r2, #128	; 0x80
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZL13FirmwareAlivePK10timer_task+0x8>)
     35c:	619a      	str	r2, [r3, #24]
     35e:	4770      	bx	lr
     360:	41008000 	.word	0x41008000

00000364 <main>:
		//gpio_toggle_pin_level(iAlcFwIsAlive);
		gpio_set_pin_level(iAlcFwIsAlive,true);
}

int main(void)
{
     364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
     368:	4b48      	ldr	r3, [pc, #288]	; (48c <main+0x128>)
     36a:	4798      	blx	r3
	uint8_t status,enableMask;
	bool powerOn;

	usb.Init();
     36c:	4c48      	ldr	r4, [pc, #288]	; (490 <main+0x12c>)
     36e:	4620      	mov	r0, r4
     370:	4b48      	ldr	r3, [pc, #288]	; (494 <main+0x130>)
     372:	4798      	blx	r3
	delay_ms(100);
     374:	2064      	movs	r0, #100	; 0x64
     376:	4b48      	ldr	r3, [pc, #288]	; (498 <main+0x134>)
     378:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     37a:	4e48      	ldr	r6, [pc, #288]	; (49c <main+0x138>)
     37c:	4631      	mov	r1, r6
     37e:	4620      	mov	r0, r4
     380:	4d47      	ldr	r5, [pc, #284]	; (4a0 <main+0x13c>)
     382:	47a8      	blx	r5
     384:	4631      	mov	r1, r6
     386:	4620      	mov	r0, r4
     388:	47a8      	blx	r5
     38a:	4946      	ldr	r1, [pc, #280]	; (4a4 <main+0x140>)
     38c:	4620      	mov	r0, r4
     38e:	47a8      	blx	r5
     390:	4631      	mov	r1, r6
     392:	4620      	mov	r0, r4
     394:	47a8      	blx	r5
     396:	4944      	ldr	r1, [pc, #272]	; (4a8 <main+0x144>)
     398:	4620      	mov	r0, r4
     39a:	47a8      	blx	r5
     39c:	4943      	ldr	r1, [pc, #268]	; (4ac <main+0x148>)
     39e:	4620      	mov	r0, r4
     3a0:	47a8      	blx	r5
     3a2:	4943      	ldr	r1, [pc, #268]	; (4b0 <main+0x14c>)
     3a4:	4620      	mov	r0, r4
     3a6:	47a8      	blx	r5
     3a8:	4942      	ldr	r1, [pc, #264]	; (4b4 <main+0x150>)
     3aa:	4620      	mov	r0, r4
     3ac:	47a8      	blx	r5
     3ae:	4631      	mov	r1, r6
     3b0:	4620      	mov	r0, r4
     3b2:	47a8      	blx	r5
     3b4:	4631      	mov	r1, r6
     3b6:	4620      	mov	r0, r4
     3b8:	47a8      	blx	r5
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
	uint32_t p=pwm_enable(&LIVE_PULSE);
     3ba:	483f      	ldr	r0, [pc, #252]	; (4b8 <main+0x154>)
     3bc:	4b3f      	ldr	r3, [pc, #252]	; (4bc <main+0x158>)
     3be:	4798      	blx	r3
	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareAlive),250);
     3c0:	22fa      	movs	r2, #250	; 0xfa
     3c2:	493f      	ldr	r1, [pc, #252]	; (4c0 <main+0x15c>)
     3c4:	483f      	ldr	r0, [pc, #252]	; (4c4 <main+0x160>)
     3c6:	4b40      	ldr	r3, [pc, #256]	; (4c8 <main+0x164>)
     3c8:	4798      	blx	r3
	heater.Init();
     3ca:	4840      	ldr	r0, [pc, #256]	; (4cc <main+0x168>)
     3cc:	4b40      	ldr	r3, [pc, #256]	; (4d0 <main+0x16c>)
     3ce:	4798      	blx	r3
	
	toolApp.Init();
     3d0:	4840      	ldr	r0, [pc, #256]	; (4d4 <main+0x170>)
     3d2:	4b41      	ldr	r3, [pc, #260]	; (4d8 <main+0x174>)
     3d4:	4798      	blx	r3
		{
			enableMask=0xff;
			for (uint8_t i = 0; i < 4; i++)
			{
			
					delay_ms(DELAY_HEATER_COMMUNICATION);
     3d6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 498 <main+0x134>
     3da:	e015      	b.n	408 <main+0xa4>
			if (toolApp.handleCommunication())
     3dc:	483d      	ldr	r0, [pc, #244]	; (4d4 <main+0x170>)
     3de:	4b3f      	ldr	r3, [pc, #252]	; (4dc <main+0x178>)
     3e0:	4798      	blx	r3
     3e2:	b188      	cbz	r0, 408 <main+0xa4>
				enableMask=toolApp.singleTaskMessage.description;
     3e4:	4b3b      	ldr	r3, [pc, #236]	; (4d4 <main+0x170>)
     3e6:	f893 704b 	ldrb.w	r7, [r3, #75]	; 0x4b
     3ea:	2400      	movs	r4, #0
					heater.SetRelay(i,powerOn);
     3ec:	4e37      	ldr	r6, [pc, #220]	; (4cc <main+0x168>)
     3ee:	4d3c      	ldr	r5, [pc, #240]	; (4e0 <main+0x17c>)
					powerOn=enableMask&(0x01<<i);
     3f0:	fa47 f204 	asr.w	r2, r7, r4
					heater.SetRelay(i,powerOn);
     3f4:	f002 0201 	and.w	r2, r2, #1
     3f8:	b2e1      	uxtb	r1, r4
     3fa:	4630      	mov	r0, r6
     3fc:	47a8      	blx	r5
					delay_ms(DELAY_HEATER_COMMUNICATION/10);
     3fe:	200a      	movs	r0, #10
     400:	47c8      	blx	r9
     402:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     404:	2c04      	cmp	r4, #4
     406:	d1f3      	bne.n	3f0 <main+0x8c>
		if (toolApp.IsAppConnected())
     408:	4832      	ldr	r0, [pc, #200]	; (4d4 <main+0x170>)
     40a:	4b36      	ldr	r3, [pc, #216]	; (4e4 <main+0x180>)
     40c:	4798      	blx	r3
     40e:	2800      	cmp	r0, #0
     410:	d1e4      	bne.n	3dc <main+0x78>
     412:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 508 <main+0x1a4>
     416:	2700      	movs	r7, #0
     418:	b2fe      	uxtb	r6, r7
					delay_ms(DELAY_HEATER_COMMUNICATION);
     41a:	2064      	movs	r0, #100	; 0x64
     41c:	47c8      	blx	r9
     41e:	4c1c      	ldr	r4, [pc, #112]	; (490 <main+0x12c>)
     420:	4931      	ldr	r1, [pc, #196]	; (4e8 <main+0x184>)
     422:	4620      	mov	r0, r4
     424:	4d1e      	ldr	r5, [pc, #120]	; (4a0 <main+0x13c>)
     426:	47a8      	blx	r5
     428:	220a      	movs	r2, #10
     42a:	4631      	mov	r1, r6
     42c:	4620      	mov	r0, r4
     42e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 50c <main+0x1a8>
     432:	47d0      	blx	sl
     434:	492d      	ldr	r1, [pc, #180]	; (4ec <main+0x188>)
     436:	4620      	mov	r0, r4
     438:	47a8      	blx	r5
					usb<<"Enabling Heater: "<<i<<" .\t";
					heater.Enable(i);
     43a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4cc <main+0x168>
     43e:	4631      	mov	r1, r6
     440:	4640      	mov	r0, r8
     442:	4b2b      	ldr	r3, [pc, #172]	; (4f0 <main+0x18c>)
     444:	4798      	blx	r3
					delay_ms(DELAY_HEATER_COMMUNICATION);
     446:	2064      	movs	r0, #100	; 0x64
     448:	47c8      	blx	r9
					status= heater.ReadStatus();
     44a:	4640      	mov	r0, r8
     44c:	4b29      	ldr	r3, [pc, #164]	; (4f4 <main+0x190>)
     44e:	4798      	blx	r3
     450:	4929      	ldr	r1, [pc, #164]	; (4f8 <main+0x194>)
     452:	4620      	mov	r0, r4
     454:	47a8      	blx	r5
     456:	220a      	movs	r2, #10
     458:	4631      	mov	r1, r6
     45a:	4620      	mov	r0, r4
     45c:	47d0      	blx	sl
     45e:	4927      	ldr	r1, [pc, #156]	; (4fc <main+0x198>)
     460:	4620      	mov	r0, r4
     462:	47a8      	blx	r5
     464:	220a      	movs	r2, #10
     466:	f81b 1b01 	ldrb.w	r1, [fp], #1
     46a:	4620      	mov	r0, r4
     46c:	4b24      	ldr	r3, [pc, #144]	; (500 <main+0x19c>)
     46e:	4798      	blx	r3
     470:	490a      	ldr	r1, [pc, #40]	; (49c <main+0x138>)
     472:	4620      	mov	r0, r4
     474:	47a8      	blx	r5
					usb<<"Heater "<<i<< " Status :"<<heater.heaterGPIO.inputs.niAlcHeaterRelayFault[i]<<NEWLINE;
					delay_ms(DELAY_HEATER_COMMUNICATION);
     476:	2064      	movs	r0, #100	; 0x64
     478:	47c8      	blx	r9
					heater.Disable(i);
     47a:	4631      	mov	r1, r6
     47c:	4640      	mov	r0, r8
     47e:	4b21      	ldr	r3, [pc, #132]	; (504 <main+0x1a0>)
     480:	4798      	blx	r3
     482:	3701      	adds	r7, #1
			for (uint8_t i = 0; i < 4; i++)
     484:	2f04      	cmp	r7, #4
     486:	d1c7      	bne.n	418 <main+0xb4>
     488:	e7be      	b.n	408 <main+0xa4>
     48a:	bf00      	nop
     48c:	00000c09 	.word	0x00000c09
     490:	200011cc 	.word	0x200011cc
     494:	0000eba9 	.word	0x0000eba9
     498:	00002341 	.word	0x00002341
     49c:	0000fe7c 	.word	0x0000fe7c
     4a0:	0000f03d 	.word	0x0000f03d
     4a4:	0000fe80 	.word	0x0000fe80
     4a8:	0000fea4 	.word	0x0000fea4
     4ac:	0000feb0 	.word	0x0000feb0
     4b0:	0000febc 	.word	0x0000febc
     4b4:	0000fec4 	.word	0x0000fec4
     4b8:	200013bc 	.word	0x200013bc
     4bc:	00002961 	.word	0x00002961
     4c0:	00000359 	.word	0x00000359
     4c4:	20001174 	.word	0x20001174
     4c8:	0000e82d 	.word	0x0000e82d
     4cc:	200007a0 	.word	0x200007a0
     4d0:	00000589 	.word	0x00000589
     4d4:	20000628 	.word	0x20000628
     4d8:	000008bd 	.word	0x000008bd
     4dc:	00000b31 	.word	0x00000b31
     4e0:	0000060d 	.word	0x0000060d
     4e4:	0000073d 	.word	0x0000073d
     4e8:	0000fed0 	.word	0x0000fed0
     4ec:	0000fee4 	.word	0x0000fee4
     4f0:	000005f9 	.word	0x000005f9
     4f4:	000005c9 	.word	0x000005c9
     4f8:	0000fee8 	.word	0x0000fee8
     4fc:	0000fef0 	.word	0x0000fef0
     500:	0000f0a9 	.word	0x0000f0a9
     504:	00000625 	.word	0x00000625
     508:	200007a3 	.word	0x200007a3
     50c:	0000f081 	.word	0x0000f081

00000510 <_GLOBAL__sub_I_main>:
		}
		
		

	}
}
     510:	b510      	push	{r4, lr}
static Maintenance_Tool	toolApp;
     512:	4c05      	ldr	r4, [pc, #20]	; (528 <_GLOBAL__sub_I_main+0x18>)
     514:	4620      	mov	r0, r4
     516:	4b05      	ldr	r3, [pc, #20]	; (52c <_GLOBAL__sub_I_main+0x1c>)
     518:	4798      	blx	r3
     51a:	4a05      	ldr	r2, [pc, #20]	; (530 <_GLOBAL__sub_I_main+0x20>)
     51c:	4905      	ldr	r1, [pc, #20]	; (534 <_GLOBAL__sub_I_main+0x24>)
     51e:	4620      	mov	r0, r4
     520:	4b05      	ldr	r3, [pc, #20]	; (538 <_GLOBAL__sub_I_main+0x28>)
     522:	4798      	blx	r3
     524:	bd10      	pop	{r4, pc}
     526:	bf00      	nop
     528:	20000628 	.word	0x20000628
     52c:	000006f5 	.word	0x000006f5
     530:	20000000 	.word	0x20000000
     534:	000006cd 	.word	0x000006cd
     538:	0000f9f1 	.word	0x0000f9f1

0000053c <_ZN18SingleHeater_ClassD1Ev>:


// default destructor
SingleHeater_Class::~SingleHeater_Class()
{
} //~SingleHeater_Class
     53c:	4770      	bx	lr
	...

00000540 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     540:	b538      	push	{r3, r4, r5, lr}
     542:	4d04      	ldr	r5, [pc, #16]	; (554 <__tcf_0+0x14>)
     544:	f105 001c 	add.w	r0, r5, #28
     548:	4c03      	ldr	r4, [pc, #12]	; (558 <__tcf_0+0x18>)
     54a:	47a0      	blx	r4
     54c:	4628      	mov	r0, r5
     54e:	47a0      	blx	r4
     550:	bd38      	pop	{r3, r4, r5, pc}
     552:	bf00      	nop
     554:	20000750 	.word	0x20000750
     558:	0000dcf1 	.word	0x0000dcf1

0000055c <_ZN18SingleHeater_Class17InitExpanderArrayEv>:
			asm("nop");
		}
		return isOK;
}

uint8_t SingleHeater_Class::InitExpanderArray(void){
     55c:	b570      	push	{r4, r5, r6, lr}
     55e:	4605      	mov	r5, r0
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
	{
		expanders[i]=&expandersStatic[i];
     560:	4c07      	ldr	r4, [pc, #28]	; (580 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x24>)
     562:	60c4      	str	r4, [r0, #12]
		currentExpander=(expanders[i]);
     564:	6144      	str	r4, [r0, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     566:	6982      	ldr	r2, [r0, #24]
     568:	2120      	movs	r1, #32
     56a:	4620      	mov	r0, r4
     56c:	4e05      	ldr	r6, [pc, #20]	; (584 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x28>)
     56e:	47b0      	blx	r6
		expanders[i]=&expandersStatic[i];
     570:	f104 001c 	add.w	r0, r4, #28
     574:	6128      	str	r0, [r5, #16]
		currentExpander=(expanders[i]);
     576:	6168      	str	r0, [r5, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
     578:	69aa      	ldr	r2, [r5, #24]
     57a:	2121      	movs	r1, #33	; 0x21
     57c:	47b0      	blx	r6
	}
	
}
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	20000750 	.word	0x20000750
     584:	0000dd05 	.word	0x0000dd05

00000588 <_ZN18SingleHeater_Class4InitEv>:
bool SingleHeater_Class::Init(void){
     588:	b510      	push	{r4, lr}
     58a:	4604      	mov	r4, r0
		i2c->Init();
     58c:	6980      	ldr	r0, [r0, #24]
     58e:	4b0a      	ldr	r3, [pc, #40]	; (5b8 <_ZN18SingleHeater_Class4InitEv+0x30>)
     590:	4798      	blx	r3
		if (i2c->isOK)
     592:	69a3      	ldr	r3, [r4, #24]
     594:	7a5b      	ldrb	r3, [r3, #9]
     596:	b913      	cbnz	r3, 59e <_ZN18SingleHeater_Class4InitEv+0x16>
			asm("nop");
     598:	bf00      	nop
		return isOK;
     59a:	7820      	ldrb	r0, [r4, #0]
}
     59c:	bd10      	pop	{r4, pc}
			InitExpanderArray();
     59e:	4620      	mov	r0, r4
     5a0:	4b06      	ldr	r3, [pc, #24]	; (5bc <_ZN18SingleHeater_Class4InitEv+0x34>)
     5a2:	4798      	blx	r3
			expanders[0]->SetPortInput();
     5a4:	68e0      	ldr	r0, [r4, #12]
     5a6:	4b06      	ldr	r3, [pc, #24]	; (5c0 <_ZN18SingleHeater_Class4InitEv+0x38>)
     5a8:	4798      	blx	r3
			expanders[1]->SetPortOutput();
     5aa:	6920      	ldr	r0, [r4, #16]
     5ac:	4b05      	ldr	r3, [pc, #20]	; (5c4 <_ZN18SingleHeater_Class4InitEv+0x3c>)
     5ae:	4798      	blx	r3
			isOK=SelfTest();
     5b0:	2301      	movs	r3, #1
     5b2:	7023      	strb	r3, [r4, #0]
     5b4:	e7f1      	b.n	59a <_ZN18SingleHeater_Class4InitEv+0x12>
     5b6:	bf00      	nop
     5b8:	0000dbf1 	.word	0x0000dbf1
     5bc:	0000055d 	.word	0x0000055d
     5c0:	0000de6d 	.word	0x0000de6d
     5c4:	0000deb1 	.word	0x0000deb1

000005c8 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
     5c8:	b538      	push	{r3, r4, r5, lr}
     5ca:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
     5cc:	68c0      	ldr	r0, [r0, #12]
     5ce:	4b09      	ldr	r3, [pc, #36]	; (5f4 <_ZN18SingleHeater_Class10ReadStatusEv+0x2c>)
     5d0:	4798      	blx	r3
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
     5d2:	4605      	mov	r5, r0
     5d4:	f000 0301 	and.w	r3, r0, #1
     5d8:	70a3      	strb	r3, [r4, #2]
     5da:	1ce1      	adds	r1, r4, #3
     5dc:	2301      	movs	r3, #1
	for (uint8_t i = 0; i < 4; i++)
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
     5de:	fa45 f203 	asr.w	r2, r5, r3
     5e2:	f002 0201 	and.w	r2, r2, #1
     5e6:	f801 2b01 	strb.w	r2, [r1], #1
     5ea:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 4; i++)
     5ec:	2b05      	cmp	r3, #5
     5ee:	d1f6      	bne.n	5de <_ZN18SingleHeater_Class10ReadStatusEv+0x16>
	}
	return r;
}
     5f0:	bd38      	pop	{r3, r4, r5, pc}
     5f2:	bf00      	nop
     5f4:	0000dded 	.word	0x0000dded

000005f8 <_ZN18SingleHeater_Class6EnableEh>:
uint8_t	SingleHeater_Class::Enable(uint8_t indexHeater){
     5f8:	b510      	push	{r4, lr}
     5fa:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,false);
     5fc:	2200      	movs	r2, #0
     5fe:	6900      	ldr	r0, [r0, #16]
     600:	4b01      	ldr	r3, [pc, #4]	; (608 <_ZN18SingleHeater_Class6EnableEh+0x10>)
     602:	4798      	blx	r3
     604:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     606:	bd10      	pop	{r4, pc}
     608:	0000dfa9 	.word	0x0000dfa9

0000060c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
     60c:	b510      	push	{r4, lr}
     60e:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
     610:	f082 0201 	eor.w	r2, r2, #1
     614:	6900      	ldr	r0, [r0, #16]
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <_ZN18SingleHeater_Class8SetRelayEhb+0x14>)
     618:	4798      	blx	r3
     61a:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     61c:	bd10      	pop	{r4, pc}
     61e:	bf00      	nop
     620:	0000dfa9 	.word	0x0000dfa9

00000624 <_ZN18SingleHeater_Class7DisableEh>:

uint8_t	SingleHeater_Class::Disable(uint8_t indexHeater){
     624:	b510      	push	{r4, lr}
     626:	4604      	mov	r4, r0
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
     628:	2201      	movs	r2, #1
     62a:	6900      	ldr	r0, [r0, #16]
     62c:	4b03      	ldr	r3, [pc, #12]	; (63c <_ZN18SingleHeater_Class7DisableEh+0x18>)
     62e:	4798      	blx	r3
     630:	f080 0001 	eor.w	r0, r0, #1
     634:	b2c0      	uxtb	r0, r0
     636:	72e0      	strb	r0, [r4, #11]
	return uint8_t(enabled);
}
     638:	bd10      	pop	{r4, pc}
     63a:	bf00      	nop
     63c:	0000dfa9 	.word	0x0000dfa9

00000640 <_GLOBAL__sub_I_ptrSingleHeaterClass>:

bool SingleHeater_Class::SelfTest(void){
	return true;
}

     640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_EXPANDER);
     644:	4c10      	ldr	r4, [pc, #64]	; (688 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x48>)
     646:	f104 073c 	add.w	r7, r4, #60	; 0x3c
     64a:	4910      	ldr	r1, [pc, #64]	; (68c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x4c>)
     64c:	4638      	mov	r0, r7
     64e:	4b10      	ldr	r3, [pc, #64]	; (690 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x50>)
     650:	4798      	blx	r3
     652:	4e10      	ldr	r6, [pc, #64]	; (694 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x54>)
     654:	4632      	mov	r2, r6
     656:	4910      	ldr	r1, [pc, #64]	; (698 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x58>)
     658:	4638      	mov	r0, r7
     65a:	4d10      	ldr	r5, [pc, #64]	; (69c <_GLOBAL__sub_I_ptrSingleHeaterClass+0x5c>)
     65c:	47a8      	blx	r5
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
     65e:	4620      	mov	r0, r4
     660:	f8df 8044 	ldr.w	r8, [pc, #68]	; 6a8 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x68>
     664:	47c0      	blx	r8
     666:	f104 001c 	add.w	r0, r4, #28
     66a:	47c0      	blx	r8
     66c:	4632      	mov	r2, r6
     66e:	490c      	ldr	r1, [pc, #48]	; (6a0 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x60>)
     670:	2000      	movs	r0, #0
     672:	47a8      	blx	r5
	ptrSingleHeaterClass=this;
     674:	f104 0050 	add.w	r0, r4, #80	; 0x50
     678:	63a0      	str	r0, [r4, #56]	; 0x38
	i2c=&i2cSharedStatic;
     67a:	66a7      	str	r7, [r4, #104]	; 0x68
     67c:	4632      	mov	r2, r6
     67e:	4909      	ldr	r1, [pc, #36]	; (6a4 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x64>)
     680:	47a8      	blx	r5
     682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     686:	bf00      	nop
     688:	20000750 	.word	0x20000750
     68c:	20001440 	.word	0x20001440
     690:	0000dbc1 	.word	0x0000dbc1
     694:	20000000 	.word	0x20000000
     698:	0000dbdd 	.word	0x0000dbdd
     69c:	0000f9f1 	.word	0x0000f9f1
     6a0:	00000541 	.word	0x00000541
     6a4:	0000053d 	.word	0x0000053d
     6a8:	0000dcdd 	.word	0x0000dcdd

000006ac <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     6ac:	4b02      	ldr	r3, [pc, #8]	; (6b8 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     6ae:	681a      	ldr	r2, [r3, #0]
     6b0:	6813      	ldr	r3, [r2, #0]
     6b2:	3301      	adds	r3, #1
     6b4:	6013      	str	r3, [r2, #0]
     6b6:	4770      	bx	lr
     6b8:	200007bc 	.word	0x200007bc

000006bc <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     6bc:	4b02      	ldr	r3, [pc, #8]	; (6c8 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	2200      	movs	r2, #0
     6c2:	711a      	strb	r2, [r3, #4]
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	200007bc 	.word	0x200007bc

000006cc <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     6cc:	b538      	push	{r3, r4, r5, lr}
     6ce:	4604      	mov	r4, r0
{
	ticks=0;
     6d0:	2300      	movs	r3, #0
     6d2:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
     6d4:	4d04      	ldr	r5, [pc, #16]	; (6e8 <_ZN16Maintenance_ToolD1Ev+0x1c>)
     6d6:	4628      	mov	r0, r5
     6d8:	4b04      	ldr	r3, [pc, #16]	; (6ec <_ZN16Maintenance_ToolD1Ev+0x20>)
     6da:	4798      	blx	r3
	interfaceTimer.Remove_task();
     6dc:	4628      	mov	r0, r5
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <_ZN16Maintenance_ToolD1Ev+0x24>)
     6e0:	4798      	blx	r3
	
} //~Maintenance_Tool
     6e2:	4620      	mov	r0, r4
     6e4:	bd38      	pop	{r3, r4, r5, pc}
     6e6:	bf00      	nop
     6e8:	200012a4 	.word	0x200012a4
     6ec:	0000f555 	.word	0x0000f555
     6f0:	0000f66d 	.word	0x0000f66d

000006f4 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
     6f4:	4a04      	ldr	r2, [pc, #16]	; (708 <_ZN16Maintenance_ToolC1Ev+0x14>)
     6f6:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
     6f8:	2200      	movs	r2, #0
     6fa:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
	nextMaintenanceSyncTime = 0;
     6fe:	64c2      	str	r2, [r0, #76]	; 0x4c
	nextMaintenanceUsageTimerSyncTime = 0;
     700:	6502      	str	r2, [r0, #80]	; 0x50
	ticks=0;
     702:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	200007bc 	.word	0x200007bc

0000070c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     70c:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     70e:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
		if (isConnected)
     712:	b919      	cbnz	r1, 71c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     714:	4805      	ldr	r0, [pc, #20]	; (72c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     716:	4b06      	ldr	r3, [pc, #24]	; (730 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     718:	4798      	blx	r3
     71a:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     71c:	f64e 2260 	movw	r2, #60000	; 0xea60
     720:	4904      	ldr	r1, [pc, #16]	; (734 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     722:	4802      	ldr	r0, [pc, #8]	; (72c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     726:	4798      	blx	r3
     728:	bd08      	pop	{r3, pc}
     72a:	bf00      	nop
     72c:	200012a4 	.word	0x200012a4
     730:	0000f555 	.word	0x0000f555
     734:	000006bd 	.word	0x000006bd
     738:	0000f635 	.word	0x0000f635

0000073c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     73c:	b510      	push	{r4, lr}
     73e:	4604      	mov	r4, r0
	result=false;
     740:	2300      	movs	r3, #0
     742:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	magic=0;
     746:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
	if (gotAccess==true)
     74a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     74e:	b12b      	cbz	r3, 75c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     750:	2301      	movs	r3, #1
     752:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	return	result;
     756:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
}
     75a:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     75c:	4b13      	ldr	r3, [pc, #76]	; (7ac <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     75e:	7d5b      	ldrb	r3, [r3, #21]
     760:	b18b      	cbz	r3, 786 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
     762:	1d43      	adds	r3, r0, #5
     764:	3009      	adds	r0, #9
     766:	2200      	movs	r2, #0
				magic|= localBuffer[i];
     768:	f813 1b01 	ldrb.w	r1, [r3], #1
     76c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
     770:	4283      	cmp	r3, r0
     772:	d1f9      	bne.n	768 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
     774:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     778:	4b0d      	ldr	r3, [pc, #52]	; (7b0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
     77a:	ea82 0103 	eor.w	r1, r2, r3
     77e:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
			if (xorResult==0)
     782:	429a      	cmp	r2, r3
     784:	d005      	beq.n	792 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     786:	2240      	movs	r2, #64	; 0x40
     788:	1d61      	adds	r1, r4, #5
     78a:	4808      	ldr	r0, [pc, #32]	; (7ac <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
     78c:	4b09      	ldr	r3, [pc, #36]	; (7b4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
     78e:	4798      	blx	r3
     790:	e7e1      	b.n	756 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     792:	2101      	movs	r1, #1
     794:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				result=true;
     798:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
				is_MTPC_Beaming=true;
     79c:	7121      	strb	r1, [r4, #4]
				setConnected(true);
     79e:	4620      	mov	r0, r4
     7a0:	4b05      	ldr	r3, [pc, #20]	; (7b8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     7a2:	4798      	blx	r3
				return	result;
     7a4:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     7a8:	bd10      	pop	{r4, pc}
     7aa:	bf00      	nop
     7ac:	200011cc 	.word	0x200011cc
     7b0:	61626364 	.word	0x61626364
     7b4:	0000ecf5 	.word	0x0000ecf5
     7b8:	0000070d 	.word	0x0000070d

000007bc <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     7bc:	b410      	push	{r4}
     7be:	1d02      	adds	r2, r0, #4
     7c0:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     7c2:	2400      	movs	r4, #0
     7c4:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     7c8:	b2d9      	uxtb	r1, r3
     7ca:	3301      	adds	r3, #1
     7cc:	2b41      	cmp	r3, #65	; 0x41
     7ce:	d1f9      	bne.n	7c4 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
     7d0:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
	}
	return	i;
}
     7d4:	4608      	mov	r0, r1
     7d6:	bc10      	pop	{r4}
     7d8:	4770      	bx	lr

000007da <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     7da:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
     7de:	b92b      	cbnz	r3, 7ec <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     7e0:	64c3      	str	r3, [r0, #76]	; 0x4c
		maintenanceIsConnected = true;
     7e2:	2301      	movs	r3, #1
     7e4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
		bSendNotifications = true;
     7e8:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     7ec:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
     7f0:	4770      	bx	lr
	...

000007f4 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader>:

	uint32_t	w,r;
	
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     7f4:	790b      	ldrb	r3, [r1, #4]
     7f6:	2b47      	cmp	r3, #71	; 0x47
     7f8:	d001      	beq.n	7fe <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0xa>
	bool	result(header.command == kGAINCommandWriteParameters);
     7fa:	2000      	movs	r0, #0
     7fc:	4770      	bx	lr
bool Maintenance_Tool::handleGAINCommandWriteParameters(HVACMessageHeader& header)	{
     7fe:	b570      	push	{r4, r5, r6, lr}
     800:	4604      	mov	r4, r0
		int n=sizeof(HVACMessageHeader)+1;
		flash.eraseFlash((uint32_t)&flashLayout->parameters,sizeof(UserParameters));
     802:	4e0c      	ldr	r6, [pc, #48]	; (834 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x40>)
     804:	6831      	ldr	r1, [r6, #0]
     806:	4d0c      	ldr	r5, [pc, #48]	; (838 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x44>)
     808:	2201      	movs	r2, #1
     80a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
     80e:	4628      	mov	r0, r5
     810:	4b0a      	ldr	r3, [pc, #40]	; (83c <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x48>)
     812:	4798      	blx	r3
			
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(UserParameters));
     814:	7b63      	ldrb	r3, [r4, #13]
     816:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		//uint32_t add=(uint32_t)&framMemory->parameters;
		uint32_t add=(uint32_t)&flashLayout->parameters;
     81a:	6832      	ldr	r2, [r6, #0]
		r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     81c:	2301      	movs	r3, #1
     81e:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     822:	f504 7184 	add.w	r1, r4, #264	; 0x108
     826:	4628      	mov	r0, r5
     828:	4c05      	ldr	r4, [pc, #20]	; (840 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17HVACMessageHeader+0x4c>)
     82a:	47a0      	blx	r4
		//	r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
			result=(bool)(r==0);
     82c:	fab0 f080 	clz	r0, r0
     830:	0940      	lsrs	r0, r0, #5
     832:	bd70      	pop	{r4, r5, r6, pc}
     834:	20000fa0 	.word	0x20000fa0
     838:	20000fa4 	.word	0x20000fa4
     83c:	0000e2f9 	.word	0x0000e2f9
     840:	0000e59d 	.word	0x0000e59d

00000844 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     844:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     846:	0855      	lsrs	r5, r2, #1
     848:	d007      	beq.n	85a <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     84a:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     84c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     850:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     852:	3401      	adds	r4, #1
     854:	b2a4      	uxth	r4, r4
     856:	42ac      	cmp	r4, r5
     858:	dbf8      	blt.n	84c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     85a:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     85e:	bf1d      	ittte	ne
     860:	189b      	addne	r3, r3, r2
     862:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     866:	4048      	eorne	r0, r1
     868:	4608      	moveq	r0, r1

	return checksum;
	}
     86a:	bc30      	pop	{r4, r5}
     86c:	4770      	bx	lr
	...

00000870 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     870:	b538      	push	{r3, r4, r5, lr}
     872:	4604      	mov	r4, r0
	checksum=0;
     874:	2500      	movs	r5, #0
     876:	f8a0 5104 	strh.w	r5, [r0, #260]	; 0x104
	checksum = calculateChecksum(0, sizeof(header), &header);
     87a:	460b      	mov	r3, r1
     87c:	2206      	movs	r2, #6
     87e:	4629      	mov	r1, r5
     880:	4d02      	ldr	r5, [pc, #8]	; (88c <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     882:	47a8      	blx	r5
     884:	f8a4 0104 	strh.w	r0, [r4, #260]	; 0x104
	}
     888:	bd38      	pop	{r3, r4, r5, pc}
     88a:	bf00      	nop
     88c:	00000845 	.word	0x00000845

00000890 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     890:	b410      	push	{r4}
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
     892:	2200      	movs	r2, #0
     894:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     898:	4c07      	ldr	r4, [pc, #28]	; (8b8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     89a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
     89e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (i = 0; i < 4; i++)
     8a2:	f890 3124 	ldrb.w	r3, [r0, #292]	; 0x124
     8a6:	3301      	adds	r3, #1
     8a8:	b2db      	uxtb	r3, r3
     8aa:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
     8ae:	461a      	mov	r2, r3
     8b0:	2b03      	cmp	r3, #3
     8b2:	ddf2      	ble.n	89a <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0xa>
	}

}
     8b4:	bc10      	pop	{r4}
     8b6:	4770      	bx	lr
     8b8:	41002018 	.word	0x41002018

000008bc <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8be:	4604      	mov	r4, r0
	ticks=0;
     8c0:	2600      	movs	r6, #0
     8c2:	6006      	str	r6, [r0, #0]
	interfaceTimer.Init();
     8c4:	4d12      	ldr	r5, [pc, #72]	; (910 <_ZN16Maintenance_Tool4InitEv+0x54>)
     8c6:	4628      	mov	r0, r5
     8c8:	4b12      	ldr	r3, [pc, #72]	; (914 <_ZN16Maintenance_Tool4InitEv+0x58>)
     8ca:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     8cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8d0:	4911      	ldr	r1, [pc, #68]	; (918 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     8d2:	4628      	mov	r0, r5
     8d4:	4b11      	ldr	r3, [pc, #68]	; (91c <_ZN16Maintenance_Tool4InitEv+0x60>)
     8d6:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     8d8:	f504 7585 	add.w	r5, r4, #266	; 0x10a
     8dc:	4629      	mov	r1, r5
     8de:	4620      	mov	r0, r4
     8e0:	4b0f      	ldr	r3, [pc, #60]	; (920 <_ZN16Maintenance_Tool4InitEv+0x64>)
     8e2:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     8e4:	f8d4 710a 	ldr.w	r7, [r4, #266]	; 0x10a
     8e8:	f8d4 010e 	ldr.w	r0, [r4, #270]	; 0x10e
     8ec:	f8d4 1112 	ldr.w	r1, [r4, #274]	; 0x112
     8f0:	f8d4 2116 	ldr.w	r2, [r4, #278]	; 0x116
     8f4:	f8c4 7005 	str.w	r7, [r4, #5]
     8f8:	f8c4 0009 	str.w	r0, [r4, #9]
     8fc:	f8c4 100d 	str.w	r1, [r4, #13]
     900:	f8c4 2011 	str.w	r2, [r4, #17]
	gotAccess=false;
     904:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
}
     908:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     90e:	bf00      	nop
     910:	200012a4 	.word	0x200012a4
     914:	0000f4f9 	.word	0x0000f4f9
     918:	000006ad 	.word	0x000006ad
     91c:	0000f5e5 	.word	0x0000f5e5
     920:	00000891 	.word	0x00000891

00000924 <_GLOBAL__sub_I_ptrMaintenanceTool>:
     924:	b510      	push	{r4, lr}
     926:	4c05      	ldr	r4, [pc, #20]	; (93c <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     928:	4620      	mov	r0, r4
     92a:	4b05      	ldr	r3, [pc, #20]	; (940 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     92c:	4798      	blx	r3
     92e:	4a05      	ldr	r2, [pc, #20]	; (944 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     930:	4905      	ldr	r1, [pc, #20]	; (948 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     932:	4620      	mov	r0, r4
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     936:	4798      	blx	r3
     938:	bd10      	pop	{r4, pc}
     93a:	bf00      	nop
     93c:	200007c0 	.word	0x200007c0
     940:	000006f5 	.word	0x000006f5
     944:	20000000 	.word	0x20000000
     948:	000006cd 	.word	0x000006cd
     94c:	0000f9f1 	.word	0x0000f9f1

00000950 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     950:	b538      	push	{r3, r4, r5, lr}
     952:	4605      	mov	r5, r0
     954:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     956:	4b05      	ldr	r3, [pc, #20]	; (96c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     958:	4798      	blx	r3
     95a:	f8a5 0104 	strh.w	r0, [r5, #260]	; 0x104
	usb.writeData(&header, sizeof(header));
     95e:	2206      	movs	r2, #6
     960:	4621      	mov	r1, r4
     962:	4803      	ldr	r0, [pc, #12]	; (970 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     964:	4b03      	ldr	r3, [pc, #12]	; (974 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     966:	4798      	blx	r3
     968:	bd38      	pop	{r3, r4, r5, pc}
     96a:	bf00      	nop
     96c:	00000871 	.word	0x00000871
     970:	200011cc 	.word	0x200011cc
     974:	0000ede1 	.word	0x0000ede1

00000978 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(HVACMessageHeader& header){
     978:	b538      	push	{r3, r4, r5, lr}
		if (result){
     97a:	790b      	ldrb	r3, [r1, #4]
     97c:	2b48      	cmp	r3, #72	; 0x48
     97e:	d001      	beq.n	984 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0xc>
	 	bool	result(header.command == kGAINCommandReadParameters);
     980:	2000      	movs	r0, #0
     982:	bd38      	pop	{r3, r4, r5, pc}
     984:	4604      	mov	r4, r0
			uint32_t add=(uint32_t)&flashLayout->parameters;
     986:	4b0d      	ldr	r3, [pc, #52]	; (9bc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x44>)
     988:	681a      	ldr	r2, [r3, #0]
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(UserParameters));
     98a:	2301      	movs	r3, #1
     98c:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
     990:	f500 7184 	add.w	r1, r0, #264	; 0x108
     994:	480a      	ldr	r0, [pc, #40]	; (9c0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x48>)
     996:	4d0b      	ldr	r5, [pc, #44]	; (9c4 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x4c>)
     998:	47a8      	blx	r5
			 if (r>0)
     99a:	b908      	cbnz	r0, 9a0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x28>
	 	bool	result(header.command == kGAINCommandReadParameters);
     99c:	2001      	movs	r0, #1
}
     99e:	bd38      	pop	{r3, r4, r5, pc}
				memcpy((uint8_t*)&localBuffer[n+1],(void*)&parameters,sizeof(UserParameters));
     9a0:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
     9a4:	7363      	strb	r3, [r4, #13]
				delay_us(1);
     9a6:	2001      	movs	r0, #1
     9a8:	4b07      	ldr	r3, [pc, #28]	; (9c8 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x50>)
     9aa:	4798      	blx	r3
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     9ac:	2240      	movs	r2, #64	; 0x40
     9ae:	1d61      	adds	r1, r4, #5
     9b0:	4806      	ldr	r0, [pc, #24]	; (9cc <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x54>)
     9b2:	4b07      	ldr	r3, [pc, #28]	; (9d0 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17HVACMessageHeader+0x58>)
     9b4:	4798      	blx	r3
				 result=w>0;
     9b6:	2000      	movs	r0, #0
     9b8:	bd38      	pop	{r3, r4, r5, pc}
     9ba:	bf00      	nop
     9bc:	20000fa0 	.word	0x20000fa0
     9c0:	20000fa4 	.word	0x20000fa4
     9c4:	0000e67d 	.word	0x0000e67d
     9c8:	0000230d 	.word	0x0000230d
     9cc:	200011cc 	.word	0x200011cc
     9d0:	0000ee79 	.word	0x0000ee79

000009d4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     9d4:	b570      	push	{r4, r5, r6, lr}
	bool	result(header.command == kGAINCommandReadParameters);
     9d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     9da:	2b48      	cmp	r3, #72	; 0x48
     9dc:	bf0c      	ite	eq
     9de:	2501      	moveq	r5, #1
     9e0:	2500      	movne	r5, #0
	if (result){
     9e2:	d001      	beq.n	9e8 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     9e4:	4628      	mov	r0, r5
     9e6:	bd70      	pop	{r4, r5, r6, pc}
     9e8:	4604      	mov	r4, r0
			singleTaskMessage.description=heater.ReadStatus();
     9ea:	480c      	ldr	r0, [pc, #48]	; (a1c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x48>)
     9ec:	4b0c      	ldr	r3, [pc, #48]	; (a20 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x4c>)
     9ee:	4798      	blx	r3
     9f0:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
			memcpy(localBuffer,(void*)&singleTaskMessage,n);
     9f4:	1d66      	adds	r6, r4, #5
     9f6:	4623      	mov	r3, r4
     9f8:	f853 2f45 	ldr.w	r2, [r3, #69]!
     9fc:	f8c4 2005 	str.w	r2, [r4, #5]
     a00:	889b      	ldrh	r3, [r3, #4]
     a02:	f8a4 3009 	strh.w	r3, [r4, #9]
     a06:	72e0      	strb	r0, [r4, #11]
			delay_us(1);
     a08:	2001      	movs	r0, #1
     a0a:	4b06      	ldr	r3, [pc, #24]	; (a24 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x50>)
     a0c:	4798      	blx	r3
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a0e:	2240      	movs	r2, #64	; 0x40
     a10:	4631      	mov	r1, r6
     a12:	4805      	ldr	r0, [pc, #20]	; (a28 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x54>)
     a14:	4b05      	ldr	r3, [pc, #20]	; (a2c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x58>)
     a16:	4798      	blx	r3
     a18:	e7e4      	b.n	9e4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
     a1a:	bf00      	nop
     a1c:	200007a0 	.word	0x200007a0
     a20:	000005c9 	.word	0x000005c9
     a24:	0000230d 	.word	0x0000230d
     a28:	200011cc 	.word	0x200011cc
     a2c:	0000ee79 	.word	0x0000ee79

00000a30 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a32:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     a34:	f100 069c 	add.w	r6, r0, #156	; 0x9c
     a38:	4605      	mov	r5, r0
     a3a:	f855 3f05 	ldr.w	r3, [r5, #5]!
     a3e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
     a42:	88ab      	ldrh	r3, [r5, #4]
     a44:	80b3      	strh	r3, [r6, #4]
	&& (header.task<kGAINNumberOfCommands))
     a46:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
     a4a:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     a4c:	b2db      	uxtb	r3, r3
     a4e:	2b0f      	cmp	r3, #15
     a50:	d813      	bhi.n	a7a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x4a>
		gotTask=true;
     a52:	2301      	movs	r3, #1
     a54:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		result=gotTask;
     a58:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
		switch (header.task)
     a5c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
     a60:	3b41      	subs	r3, #65	; 0x41
     a62:	2b0f      	cmp	r3, #15
     a64:	d852      	bhi.n	b0c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xdc>
     a66:	e8df f003 	tbb	[pc, r3]
     a6a:	211a      	.short	0x211a
     a6c:	17172717 	.word	0x17172717
     a70:	4b3e3730 	.word	0x4b3e3730
     a74:	51171717 	.word	0x51171717
     a78:	1751      	.short	0x1751
		gotTask=false;
     a7a:	2300      	movs	r3, #0
     a7c:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     a80:	4f24      	ldr	r7, [pc, #144]	; (b14 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe4>)
     a82:	2240      	movs	r2, #64	; 0x40
     a84:	4629      	mov	r1, r5
     a86:	4638      	mov	r0, r7
     a88:	4b23      	ldr	r3, [pc, #140]	; (b18 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xe8>)
     a8a:	4798      	blx	r3
		result=usb.rxReady;
     a8c:	7d7b      	ldrb	r3, [r7, #21]
     a8e:	b2db      	uxtb	r3, r3
     a90:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	if (result)
     a94:	2b00      	cmp	r3, #0
     a96:	d1e1      	bne.n	a5c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
     a98:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				result = handleGAINCommandConnect( header);
     a9e:	4631      	mov	r1, r6
     aa0:	4620      	mov	r0, r4
     aa2:	4b1e      	ldr	r3, [pc, #120]	; (b1c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xec>)
     aa4:	4798      	blx	r3
     aa6:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     aaa:	e7f5      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
	maintenanceIsConnected = false;
     aac:	2300      	movs	r3, #0
     aae:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	bSendNotifications = false;
     ab2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
				break;
     ab6:	e7ef      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				notifyGAINCommandReceived( header, result);
     ab8:	2201      	movs	r2, #1
     aba:	4631      	mov	r1, r6
     abc:	4620      	mov	r0, r4
     abe:	4b18      	ldr	r3, [pc, #96]	; (b20 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf0>)
     ac0:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     ac2:	2301      	movs	r3, #1
     ac4:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     ac8:	e7e6      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandWriteParameters( header);
     aca:	4631      	mov	r1, r6
     acc:	4620      	mov	r0, r4
     ace:	4b15      	ldr	r3, [pc, #84]	; (b24 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf4>)
     ad0:	4798      	blx	r3
     ad2:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			break;
     ad6:	e7df      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = handleGAINCommandReadParameters( header);
     ad8:	4631      	mov	r1, r6
     ada:	4620      	mov	r0, r4
     adc:	4b12      	ldr	r3, [pc, #72]	; (b28 <_ZN16Maintenance_Tool14handleHVACTaskEv+0xf8>)
     ade:	4798      	blx	r3
     ae0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			break;
     ae4:	e7d8      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				memcpy(&singleTaskMessage,localBuffer,sizeMessage);
     ae6:	682b      	ldr	r3, [r5, #0]
     ae8:	f8c4 3045 	str.w	r3, [r4, #69]	; 0x45
     aec:	88ab      	ldrh	r3, [r5, #4]
     aee:	f8a4 3049 	strh.w	r3, [r4, #73]	; 0x49
				singleTaskMessage.description=localBuffer[0x06];
     af2:	7ae3      	ldrb	r3, [r4, #11]
     af4:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
				result = SetHeaters();
     af8:	2301      	movs	r3, #1
     afa:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     afe:	e7cb      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = CommandReadHeaterStatus();
     b00:	4620      	mov	r0, r4
     b02:	4b0a      	ldr	r3, [pc, #40]	; (b2c <_ZN16Maintenance_Tool14handleHVACTaskEv+0xfc>)
     b04:	4798      	blx	r3
     b06:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     b0a:	e7c5      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
				result = false;
     b0c:	2300      	movs	r3, #0
     b0e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     b12:	e7c1      	b.n	a98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x68>
     b14:	200011cc 	.word	0x200011cc
     b18:	0000ecf5 	.word	0x0000ecf5
     b1c:	000007db 	.word	0x000007db
     b20:	00000951 	.word	0x00000951
     b24:	000007f5 	.word	0x000007f5
     b28:	00000979 	.word	0x00000979
     b2c:	000009d5 	.word	0x000009d5

00000b30 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b32:	4604      	mov	r4, r0
	result=false;
     b34:	2300      	movs	r3, #0
     b36:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	if (gotAccess)
     b3a:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
     b3e:	2b00      	cmp	r3, #0
     b40:	d04c      	beq.n	bdc <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     b42:	4b28      	ldr	r3, [pc, #160]	; (be4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     b44:	7d5b      	ldrb	r3, [r3, #21]
     b46:	b953      	cbnz	r3, b5e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2e>
			gotCommand=false;
     b48:	2300      	movs	r3, #0
     b4a:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b4e:	2240      	movs	r2, #64	; 0x40
     b50:	1d61      	adds	r1, r4, #5
     b52:	4824      	ldr	r0, [pc, #144]	; (be4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     b54:	4b24      	ldr	r3, [pc, #144]	; (be8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     b56:	4798      	blx	r3
	}
     b58:	f894 0100 	ldrb.w	r0, [r4, #256]	; 0x100
     b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     b5e:	4603      	mov	r3, r0
     b60:	f853 2f05 	ldr.w	r2, [r3, #5]!
     b64:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
     b68:	889b      	ldrh	r3, [r3, #4]
     b6a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
			switch (input){
     b6e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
     b72:	2b3d      	cmp	r3, #61	; 0x3d
     b74:	d017      	beq.n	ba6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     b76:	2b3e      	cmp	r3, #62	; 0x3e
     b78:	d010      	beq.n	b9c <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     b7a:	2b3c      	cmp	r3, #60	; 0x3c
     b7c:	d003      	beq.n	b86 <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     b7e:	2300      	movs	r3, #0
     b80:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
				break;
     b84:	e006      	b.n	b94 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     b86:	2301      	movs	r3, #1
     b88:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
					result = handleHVACTask();
     b8c:	4b17      	ldr	r3, [pc, #92]	; (bec <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     b8e:	4798      	blx	r3
     b90:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
			ClearLocalBuffer();
     b94:	4620      	mov	r0, r4
     b96:	4b16      	ldr	r3, [pc, #88]	; (bf0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     b98:	4798      	blx	r3
     b9a:	e7d8      	b.n	b4e <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
     b9c:	4b13      	ldr	r3, [pc, #76]	; (bec <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     b9e:	4798      	blx	r3
     ba0:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
				break;
     ba4:	e7f6      	b.n	b94 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
     ba6:	2501      	movs	r5, #1
     ba8:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     baa:	4e12      	ldr	r6, [pc, #72]	; (bf4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     bac:	4630      	mov	r0, r6
     bae:	4b12      	ldr	r3, [pc, #72]	; (bf8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     bb0:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     bb2:	4f12      	ldr	r7, [pc, #72]	; (bfc <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
     bb4:	4639      	mov	r1, r7
     bb6:	4630      	mov	r0, r6
     bb8:	4b11      	ldr	r3, [pc, #68]	; (c00 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
     bba:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     bbc:	f242 7210 	movw	r2, #10000	; 0x2710
     bc0:	4639      	mov	r1, r7
     bc2:	4630      	mov	r0, r6
     bc4:	4b0f      	ldr	r3, [pc, #60]	; (c04 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
     bc6:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     bc8:	2300      	movs	r3, #0
     bca:	64e3      	str	r3, [r4, #76]	; 0x4c
					maintenanceIsConnected = true;
     bcc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
					bSendNotifications = true;
     bd0:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
					result=is_MTPC_Beaming;
     bd4:	7923      	ldrb	r3, [r4, #4]
     bd6:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
				break;
     bda:	e7db      	b.n	b94 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
     bdc:	2300      	movs	r3, #0
     bde:	f880 3102 	strb.w	r3, [r0, #258]	; 0x102
     be2:	e7b9      	b.n	b58 <_ZN16Maintenance_Tool19handleCommunicationEv+0x28>
     be4:	200011cc 	.word	0x200011cc
     be8:	0000ecf5 	.word	0x0000ecf5
     bec:	00000a31 	.word	0x00000a31
     bf0:	000007bd 	.word	0x000007bd
     bf4:	200012a4 	.word	0x200012a4
     bf8:	0000f555 	.word	0x0000f555
     bfc:	000006bd 	.word	0x000006bd
     c00:	0000f699 	.word	0x0000f699
     c04:	0000f635 	.word	0x0000f635

00000c08 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     c08:	b580      	push	{r7, lr}
     c0a:	af00      	add	r7, sp, #0
	system_init();
     c0c:	4b03      	ldr	r3, [pc, #12]	; (c1c <atmel_start_init+0x14>)
     c0e:	4798      	blx	r3
	usb_init();
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <atmel_start_init+0x18>)
     c12:	4798      	blx	r3
	spi_nor_flash_init();
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <atmel_start_init+0x1c>)
     c16:	4798      	blx	r3
}
     c18:	bf00      	nop
     c1a:	bd80      	pop	{r7, pc}
     c1c:	00001f7d 	.word	0x00001f7d
     c20:	0000bced 	.word	0x0000bced
     c24:	0000bc81 	.word	0x0000bc81

00000c28 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     c28:	b480      	push	{r7}
     c2a:	b085      	sub	sp, #20
     c2c:	af00      	add	r7, sp, #0
     c2e:	60f8      	str	r0, [r7, #12]
     c30:	460b      	mov	r3, r1
     c32:	607a      	str	r2, [r7, #4]
     c34:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     c36:	7afa      	ldrb	r2, [r7, #11]
     c38:	68fb      	ldr	r3, [r7, #12]
     c3a:	3220      	adds	r2, #32
     c3c:	6879      	ldr	r1, [r7, #4]
     c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     c42:	bf00      	nop
     c44:	3714      	adds	r7, #20
     c46:	46bd      	mov	sp, r7
     c48:	f85d 7b04 	ldr.w	r7, [sp], #4
     c4c:	4770      	bx	lr

00000c4e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     c4e:	b480      	push	{r7}
     c50:	b083      	sub	sp, #12
     c52:	af00      	add	r7, sp, #0
     c54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	691b      	ldr	r3, [r3, #16]
     c5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c62:	bf00      	nop
     c64:	370c      	adds	r7, #12
     c66:	46bd      	mov	sp, r7
     c68:	f85d 7b04 	ldr.w	r7, [sp], #4
     c6c:	4770      	bx	lr

00000c6e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     c6e:	b480      	push	{r7}
     c70:	b083      	sub	sp, #12
     c72:	af00      	add	r7, sp, #0
     c74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	691b      	ldr	r3, [r3, #16]
     c7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c82:	bf00      	nop
     c84:	370c      	adds	r7, #12
     c86:	46bd      	mov	sp, r7
     c88:	f85d 7b04 	ldr.w	r7, [sp], #4
     c8c:	4770      	bx	lr

00000c8e <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     c8e:	b480      	push	{r7}
     c90:	b083      	sub	sp, #12
     c92:	af00      	add	r7, sp, #0
     c94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	691b      	ldr	r3, [r3, #16]
     c9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ca2:	bf00      	nop
     ca4:	370c      	adds	r7, #12
     ca6:	46bd      	mov	sp, r7
     ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cac:	4770      	bx	lr

00000cae <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     cae:	b480      	push	{r7}
     cb0:	b083      	sub	sp, #12
     cb2:	af00      	add	r7, sp, #0
     cb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	691b      	ldr	r3, [r3, #16]
     cba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     cc2:	bf00      	nop
     cc4:	370c      	adds	r7, #12
     cc6:	46bd      	mov	sp, r7
     cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ccc:	4770      	bx	lr

00000cce <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     cce:	b480      	push	{r7}
     cd0:	b083      	sub	sp, #12
     cd2:	af00      	add	r7, sp, #0
     cd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	695b      	ldr	r3, [r3, #20]
     cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     cde:	687b      	ldr	r3, [r7, #4]
     ce0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ce2:	bf00      	nop
     ce4:	370c      	adds	r7, #12
     ce6:	46bd      	mov	sp, r7
     ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
     cec:	4770      	bx	lr

00000cee <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     cee:	b480      	push	{r7}
     cf0:	b083      	sub	sp, #12
     cf2:	af00      	add	r7, sp, #0
     cf4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	695b      	ldr	r3, [r3, #20]
     cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d02:	bf00      	nop
     d04:	370c      	adds	r7, #12
     d06:	46bd      	mov	sp, r7
     d08:	f85d 7b04 	ldr.w	r7, [sp], #4
     d0c:	4770      	bx	lr

00000d0e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     d0e:	b480      	push	{r7}
     d10:	b083      	sub	sp, #12
     d12:	af00      	add	r7, sp, #0
     d14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	695b      	ldr	r3, [r3, #20]
     d1a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d22:	bf00      	nop
     d24:	370c      	adds	r7, #12
     d26:	46bd      	mov	sp, r7
     d28:	f85d 7b04 	ldr.w	r7, [sp], #4
     d2c:	4770      	bx	lr

00000d2e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     d2e:	b480      	push	{r7}
     d30:	b083      	sub	sp, #12
     d32:	af00      	add	r7, sp, #0
     d34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	695b      	ldr	r3, [r3, #20]
     d3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d42:	bf00      	nop
     d44:	370c      	adds	r7, #12
     d46:	46bd      	mov	sp, r7
     d48:	f85d 7b04 	ldr.w	r7, [sp], #4
     d4c:	4770      	bx	lr

00000d4e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     d4e:	b480      	push	{r7}
     d50:	b083      	sub	sp, #12
     d52:	af00      	add	r7, sp, #0
     d54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	695b      	ldr	r3, [r3, #20]
     d5a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d62:	bf00      	nop
     d64:	370c      	adds	r7, #12
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr

00000d6e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     d6e:	b480      	push	{r7}
     d70:	b083      	sub	sp, #12
     d72:	af00      	add	r7, sp, #0
     d74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	699b      	ldr	r3, [r3, #24]
     d7a:	f043 0201 	orr.w	r2, r3, #1
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     d82:	bf00      	nop
     d84:	370c      	adds	r7, #12
     d86:	46bd      	mov	sp, r7
     d88:	f85d 7b04 	ldr.w	r7, [sp], #4
     d8c:	4770      	bx	lr

00000d8e <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     d8e:	b480      	push	{r7}
     d90:	b083      	sub	sp, #12
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	699b      	ldr	r3, [r3, #24]
     d9a:	f043 0202 	orr.w	r2, r3, #2
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     da2:	bf00      	nop
     da4:	370c      	adds	r7, #12
     da6:	46bd      	mov	sp, r7
     da8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dac:	4770      	bx	lr

00000dae <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     dae:	b480      	push	{r7}
     db0:	b083      	sub	sp, #12
     db2:	af00      	add	r7, sp, #0
     db4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	699b      	ldr	r3, [r3, #24]
     dba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dc2:	bf00      	nop
     dc4:	370c      	adds	r7, #12
     dc6:	46bd      	mov	sp, r7
     dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dcc:	4770      	bx	lr

00000dce <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     dce:	b480      	push	{r7}
     dd0:	b083      	sub	sp, #12
     dd2:	af00      	add	r7, sp, #0
     dd4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	699b      	ldr	r3, [r3, #24]
     dda:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     de2:	bf00      	nop
     de4:	370c      	adds	r7, #12
     de6:	46bd      	mov	sp, r7
     de8:	f85d 7b04 	ldr.w	r7, [sp], #4
     dec:	4770      	bx	lr

00000dee <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     dee:	b480      	push	{r7}
     df0:	b083      	sub	sp, #12
     df2:	af00      	add	r7, sp, #0
     df4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	699b      	ldr	r3, [r3, #24]
     dfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e02:	bf00      	nop
     e04:	370c      	adds	r7, #12
     e06:	46bd      	mov	sp, r7
     e08:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0c:	4770      	bx	lr

00000e0e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     e0e:	b480      	push	{r7}
     e10:	b083      	sub	sp, #12
     e12:	af00      	add	r7, sp, #0
     e14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	699b      	ldr	r3, [r3, #24]
     e1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e22:	bf00      	nop
     e24:	370c      	adds	r7, #12
     e26:	46bd      	mov	sp, r7
     e28:	f85d 7b04 	ldr.w	r7, [sp], #4
     e2c:	4770      	bx	lr

00000e2e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     e2e:	b480      	push	{r7}
     e30:	b083      	sub	sp, #12
     e32:	af00      	add	r7, sp, #0
     e34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	69db      	ldr	r3, [r3, #28]
     e3a:	f043 0220 	orr.w	r2, r3, #32
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e42:	bf00      	nop
     e44:	370c      	adds	r7, #12
     e46:	46bd      	mov	sp, r7
     e48:	f85d 7b04 	ldr.w	r7, [sp], #4
     e4c:	4770      	bx	lr

00000e4e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     e4e:	b480      	push	{r7}
     e50:	b083      	sub	sp, #12
     e52:	af00      	add	r7, sp, #0
     e54:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     e56:	687b      	ldr	r3, [r7, #4]
     e58:	69db      	ldr	r3, [r3, #28]
     e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e62:	bf00      	nop
     e64:	370c      	adds	r7, #12
     e66:	46bd      	mov	sp, r7
     e68:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6c:	4770      	bx	lr

00000e6e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     e6e:	b480      	push	{r7}
     e70:	b083      	sub	sp, #12
     e72:	af00      	add	r7, sp, #0
     e74:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	69db      	ldr	r3, [r3, #28]
     e7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e82:	bf00      	nop
     e84:	370c      	adds	r7, #12
     e86:	46bd      	mov	sp, r7
     e88:	f85d 7b04 	ldr.w	r7, [sp], #4
     e8c:	4770      	bx	lr

00000e8e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     e8e:	b480      	push	{r7}
     e90:	b083      	sub	sp, #12
     e92:	af00      	add	r7, sp, #0
     e94:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	6a1b      	ldr	r3, [r3, #32]
     e9a:	f043 0201 	orr.w	r2, r3, #1
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ea2:	bf00      	nop
     ea4:	370c      	adds	r7, #12
     ea6:	46bd      	mov	sp, r7
     ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eac:	4770      	bx	lr

00000eae <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     eae:	b480      	push	{r7}
     eb0:	b083      	sub	sp, #12
     eb2:	af00      	add	r7, sp, #0
     eb4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	6a1b      	ldr	r3, [r3, #32]
     eba:	f043 0202 	orr.w	r2, r3, #2
     ebe:	687b      	ldr	r3, [r7, #4]
     ec0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ec2:	bf00      	nop
     ec4:	370c      	adds	r7, #12
     ec6:	46bd      	mov	sp, r7
     ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ecc:	4770      	bx	lr

00000ece <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     ece:	b480      	push	{r7}
     ed0:	b083      	sub	sp, #12
     ed2:	af00      	add	r7, sp, #0
     ed4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     ed6:	687b      	ldr	r3, [r7, #4]
     ed8:	6a1b      	ldr	r3, [r3, #32]
     eda:	f043 0204 	orr.w	r2, r3, #4
     ede:	687b      	ldr	r3, [r7, #4]
     ee0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ee2:	bf00      	nop
     ee4:	370c      	adds	r7, #12
     ee6:	46bd      	mov	sp, r7
     ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
     eec:	4770      	bx	lr

00000eee <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     eee:	b480      	push	{r7}
     ef0:	b083      	sub	sp, #12
     ef2:	af00      	add	r7, sp, #0
     ef4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	6a1b      	ldr	r3, [r3, #32]
     efa:	f043 0208 	orr.w	r2, r3, #8
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f02:	bf00      	nop
     f04:	370c      	adds	r7, #12
     f06:	46bd      	mov	sp, r7
     f08:	f85d 7b04 	ldr.w	r7, [sp], #4
     f0c:	4770      	bx	lr

00000f0e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     f0e:	b480      	push	{r7}
     f10:	b083      	sub	sp, #12
     f12:	af00      	add	r7, sp, #0
     f14:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	6a1b      	ldr	r3, [r3, #32]
     f1a:	f043 0220 	orr.w	r2, r3, #32
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f22:	bf00      	nop
     f24:	370c      	adds	r7, #12
     f26:	46bd      	mov	sp, r7
     f28:	f85d 7b04 	ldr.w	r7, [sp], #4
     f2c:	4770      	bx	lr

00000f2e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     f2e:	b480      	push	{r7}
     f30:	b083      	sub	sp, #12
     f32:	af00      	add	r7, sp, #0
     f34:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	6a1b      	ldr	r3, [r3, #32]
     f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     f3e:	687b      	ldr	r3, [r7, #4]
     f40:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f42:	bf00      	nop
     f44:	370c      	adds	r7, #12
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr

00000f4e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f4e:	b480      	push	{r7}
     f50:	b085      	sub	sp, #20
     f52:	af00      	add	r7, sp, #0
     f54:	60f8      	str	r0, [r7, #12]
     f56:	460b      	mov	r3, r1
     f58:	607a      	str	r2, [r7, #4]
     f5a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f5c:	7afb      	ldrb	r3, [r7, #11]
     f5e:	68fa      	ldr	r2, [r7, #12]
     f60:	01db      	lsls	r3, r3, #7
     f62:	4413      	add	r3, r2
     f64:	3308      	adds	r3, #8
     f66:	687a      	ldr	r2, [r7, #4]
     f68:	601a      	str	r2, [r3, #0]
}
     f6a:	bf00      	nop
     f6c:	3714      	adds	r7, #20
     f6e:	46bd      	mov	sp, r7
     f70:	f85d 7b04 	ldr.w	r7, [sp], #4
     f74:	4770      	bx	lr

00000f76 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     f76:	b480      	push	{r7}
     f78:	b085      	sub	sp, #20
     f7a:	af00      	add	r7, sp, #0
     f7c:	60f8      	str	r0, [r7, #12]
     f7e:	460b      	mov	r3, r1
     f80:	607a      	str	r2, [r7, #4]
     f82:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f84:	7afb      	ldrb	r3, [r7, #11]
     f86:	68fa      	ldr	r2, [r7, #12]
     f88:	01db      	lsls	r3, r3, #7
     f8a:	4413      	add	r3, r2
     f8c:	3304      	adds	r3, #4
     f8e:	687a      	ldr	r2, [r7, #4]
     f90:	601a      	str	r2, [r3, #0]
}
     f92:	bf00      	nop
     f94:	3714      	adds	r7, #20
     f96:	46bd      	mov	sp, r7
     f98:	f85d 7b04 	ldr.w	r7, [sp], #4
     f9c:	4770      	bx	lr

00000f9e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     f9e:	b480      	push	{r7}
     fa0:	b085      	sub	sp, #20
     fa2:	af00      	add	r7, sp, #0
     fa4:	60f8      	str	r0, [r7, #12]
     fa6:	460b      	mov	r3, r1
     fa8:	607a      	str	r2, [r7, #4]
     faa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fac:	7afb      	ldrb	r3, [r7, #11]
     fae:	68fa      	ldr	r2, [r7, #12]
     fb0:	01db      	lsls	r3, r3, #7
     fb2:	4413      	add	r3, r2
     fb4:	3318      	adds	r3, #24
     fb6:	687a      	ldr	r2, [r7, #4]
     fb8:	601a      	str	r2, [r3, #0]
}
     fba:	bf00      	nop
     fbc:	3714      	adds	r7, #20
     fbe:	46bd      	mov	sp, r7
     fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
     fc4:	4770      	bx	lr

00000fc6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     fc6:	b480      	push	{r7}
     fc8:	b085      	sub	sp, #20
     fca:	af00      	add	r7, sp, #0
     fcc:	60f8      	str	r0, [r7, #12]
     fce:	460b      	mov	r3, r1
     fd0:	607a      	str	r2, [r7, #4]
     fd2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd4:	7afb      	ldrb	r3, [r7, #11]
     fd6:	68fa      	ldr	r2, [r7, #12]
     fd8:	01db      	lsls	r3, r3, #7
     fda:	4413      	add	r3, r2
     fdc:	3314      	adds	r3, #20
     fde:	687a      	ldr	r2, [r7, #4]
     fe0:	601a      	str	r2, [r3, #0]
}
     fe2:	bf00      	nop
     fe4:	3714      	adds	r7, #20
     fe6:	46bd      	mov	sp, r7
     fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
     fec:	4770      	bx	lr

00000fee <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     fee:	b480      	push	{r7}
     ff0:	b085      	sub	sp, #20
     ff2:	af00      	add	r7, sp, #0
     ff4:	6078      	str	r0, [r7, #4]
     ff6:	4608      	mov	r0, r1
     ff8:	4611      	mov	r1, r2
     ffa:	461a      	mov	r2, r3
     ffc:	4603      	mov	r3, r0
     ffe:	70fb      	strb	r3, [r7, #3]
    1000:	460b      	mov	r3, r1
    1002:	70bb      	strb	r3, [r7, #2]
    1004:	4613      	mov	r3, r2
    1006:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1008:	78fa      	ldrb	r2, [r7, #3]
    100a:	78bb      	ldrb	r3, [r7, #2]
    100c:	6879      	ldr	r1, [r7, #4]
    100e:	01d2      	lsls	r2, r2, #7
    1010:	440a      	add	r2, r1
    1012:	4413      	add	r3, r2
    1014:	3330      	adds	r3, #48	; 0x30
    1016:	781b      	ldrb	r3, [r3, #0]
    1018:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    101a:	7bfb      	ldrb	r3, [r7, #15]
    101c:	f023 030f 	bic.w	r3, r3, #15
    1020:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1022:	787b      	ldrb	r3, [r7, #1]
    1024:	f003 030f 	and.w	r3, r3, #15
    1028:	b2da      	uxtb	r2, r3
    102a:	7bfb      	ldrb	r3, [r7, #15]
    102c:	4313      	orrs	r3, r2
    102e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1030:	78fa      	ldrb	r2, [r7, #3]
    1032:	78bb      	ldrb	r3, [r7, #2]
    1034:	6879      	ldr	r1, [r7, #4]
    1036:	01d2      	lsls	r2, r2, #7
    1038:	440a      	add	r2, r1
    103a:	4413      	add	r3, r2
    103c:	3330      	adds	r3, #48	; 0x30
    103e:	7bfa      	ldrb	r2, [r7, #15]
    1040:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1042:	bf00      	nop
    1044:	3714      	adds	r7, #20
    1046:	46bd      	mov	sp, r7
    1048:	f85d 7b04 	ldr.w	r7, [sp], #4
    104c:	4770      	bx	lr

0000104e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    104e:	b480      	push	{r7}
    1050:	b085      	sub	sp, #20
    1052:	af00      	add	r7, sp, #0
    1054:	6078      	str	r0, [r7, #4]
    1056:	4608      	mov	r0, r1
    1058:	4611      	mov	r1, r2
    105a:	461a      	mov	r2, r3
    105c:	4603      	mov	r3, r0
    105e:	70fb      	strb	r3, [r7, #3]
    1060:	460b      	mov	r3, r1
    1062:	70bb      	strb	r3, [r7, #2]
    1064:	4613      	mov	r3, r2
    1066:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1068:	78fa      	ldrb	r2, [r7, #3]
    106a:	78bb      	ldrb	r3, [r7, #2]
    106c:	6879      	ldr	r1, [r7, #4]
    106e:	01d2      	lsls	r2, r2, #7
    1070:	440a      	add	r2, r1
    1072:	4413      	add	r3, r2
    1074:	3330      	adds	r3, #48	; 0x30
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    107a:	7bfb      	ldrb	r3, [r7, #15]
    107c:	f003 030f 	and.w	r3, r3, #15
    1080:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1082:	787b      	ldrb	r3, [r7, #1]
    1084:	011b      	lsls	r3, r3, #4
    1086:	b2da      	uxtb	r2, r3
    1088:	7bfb      	ldrb	r3, [r7, #15]
    108a:	4313      	orrs	r3, r2
    108c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    108e:	78fa      	ldrb	r2, [r7, #3]
    1090:	78bb      	ldrb	r3, [r7, #2]
    1092:	6879      	ldr	r1, [r7, #4]
    1094:	01d2      	lsls	r2, r2, #7
    1096:	440a      	add	r2, r1
    1098:	4413      	add	r3, r2
    109a:	3330      	adds	r3, #48	; 0x30
    109c:	7bfa      	ldrb	r2, [r7, #15]
    109e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10a0:	bf00      	nop
    10a2:	3714      	adds	r7, #20
    10a4:	46bd      	mov	sp, r7
    10a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    10aa:	4770      	bx	lr

000010ac <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    10ac:	b480      	push	{r7}
    10ae:	b085      	sub	sp, #20
    10b0:	af00      	add	r7, sp, #0
    10b2:	6078      	str	r0, [r7, #4]
    10b4:	4608      	mov	r0, r1
    10b6:	4611      	mov	r1, r2
    10b8:	461a      	mov	r2, r3
    10ba:	4603      	mov	r3, r0
    10bc:	70fb      	strb	r3, [r7, #3]
    10be:	460b      	mov	r3, r1
    10c0:	70bb      	strb	r3, [r7, #2]
    10c2:	4613      	mov	r3, r2
    10c4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10c6:	78fa      	ldrb	r2, [r7, #3]
    10c8:	78bb      	ldrb	r3, [r7, #2]
    10ca:	6879      	ldr	r1, [r7, #4]
    10cc:	01d2      	lsls	r2, r2, #7
    10ce:	440a      	add	r2, r1
    10d0:	4413      	add	r3, r2
    10d2:	3340      	adds	r3, #64	; 0x40
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10d8:	7bfb      	ldrb	r3, [r7, #15]
    10da:	f023 0301 	bic.w	r3, r3, #1
    10de:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10e0:	787a      	ldrb	r2, [r7, #1]
    10e2:	7bfb      	ldrb	r3, [r7, #15]
    10e4:	4313      	orrs	r3, r2
    10e6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e8:	78fa      	ldrb	r2, [r7, #3]
    10ea:	78bb      	ldrb	r3, [r7, #2]
    10ec:	6879      	ldr	r1, [r7, #4]
    10ee:	01d2      	lsls	r2, r2, #7
    10f0:	440a      	add	r2, r1
    10f2:	4413      	add	r3, r2
    10f4:	3340      	adds	r3, #64	; 0x40
    10f6:	7bfa      	ldrb	r2, [r7, #15]
    10f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    10fa:	bf00      	nop
    10fc:	3714      	adds	r7, #20
    10fe:	46bd      	mov	sp, r7
    1100:	f85d 7b04 	ldr.w	r7, [sp], #4
    1104:	4770      	bx	lr

00001106 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1106:	b490      	push	{r4, r7}
    1108:	b082      	sub	sp, #8
    110a:	af00      	add	r7, sp, #0
    110c:	6078      	str	r0, [r7, #4]
    110e:	460b      	mov	r3, r1
    1110:	70fb      	strb	r3, [r7, #3]
    1112:	4613      	mov	r3, r2
    1114:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1116:	78fa      	ldrb	r2, [r7, #3]
    1118:	78bb      	ldrb	r3, [r7, #2]
    111a:	78f8      	ldrb	r0, [r7, #3]
    111c:	78b9      	ldrb	r1, [r7, #2]
    111e:	687c      	ldr	r4, [r7, #4]
    1120:	01c0      	lsls	r0, r0, #7
    1122:	4420      	add	r0, r4
    1124:	4401      	add	r1, r0
    1126:	3140      	adds	r1, #64	; 0x40
    1128:	7809      	ldrb	r1, [r1, #0]
    112a:	b2c9      	uxtb	r1, r1
    112c:	f041 0104 	orr.w	r1, r1, #4
    1130:	b2c8      	uxtb	r0, r1
    1132:	6879      	ldr	r1, [r7, #4]
    1134:	01d2      	lsls	r2, r2, #7
    1136:	440a      	add	r2, r1
    1138:	4413      	add	r3, r2
    113a:	3340      	adds	r3, #64	; 0x40
    113c:	4602      	mov	r2, r0
    113e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1140:	bf00      	nop
    1142:	3708      	adds	r7, #8
    1144:	46bd      	mov	sp, r7
    1146:	bc90      	pop	{r4, r7}
    1148:	4770      	bx	lr

0000114a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    114a:	b490      	push	{r4, r7}
    114c:	b082      	sub	sp, #8
    114e:	af00      	add	r7, sp, #0
    1150:	6078      	str	r0, [r7, #4]
    1152:	460b      	mov	r3, r1
    1154:	70fb      	strb	r3, [r7, #3]
    1156:	4613      	mov	r3, r2
    1158:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    115a:	78fa      	ldrb	r2, [r7, #3]
    115c:	78bb      	ldrb	r3, [r7, #2]
    115e:	78f8      	ldrb	r0, [r7, #3]
    1160:	78b9      	ldrb	r1, [r7, #2]
    1162:	687c      	ldr	r4, [r7, #4]
    1164:	01c0      	lsls	r0, r0, #7
    1166:	4420      	add	r0, r4
    1168:	4401      	add	r1, r0
    116a:	3140      	adds	r1, #64	; 0x40
    116c:	7809      	ldrb	r1, [r1, #0]
    116e:	b2c9      	uxtb	r1, r1
    1170:	f021 0104 	bic.w	r1, r1, #4
    1174:	b2c8      	uxtb	r0, r1
    1176:	6879      	ldr	r1, [r7, #4]
    1178:	01d2      	lsls	r2, r2, #7
    117a:	440a      	add	r2, r1
    117c:	4413      	add	r3, r2
    117e:	3340      	adds	r3, #64	; 0x40
    1180:	4602      	mov	r2, r0
    1182:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1184:	bf00      	nop
    1186:	3708      	adds	r7, #8
    1188:	46bd      	mov	sp, r7
    118a:	bc90      	pop	{r4, r7}
    118c:	4770      	bx	lr

0000118e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    118e:	b480      	push	{r7}
    1190:	b085      	sub	sp, #20
    1192:	af00      	add	r7, sp, #0
    1194:	60f8      	str	r0, [r7, #12]
    1196:	460b      	mov	r3, r1
    1198:	607a      	str	r2, [r7, #4]
    119a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    119c:	7afb      	ldrb	r3, [r7, #11]
    119e:	68fa      	ldr	r2, [r7, #12]
    11a0:	01db      	lsls	r3, r3, #7
    11a2:	4413      	add	r3, r2
    11a4:	3328      	adds	r3, #40	; 0x28
    11a6:	687a      	ldr	r2, [r7, #4]
    11a8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    11aa:	bf00      	nop
    11ac:	3714      	adds	r7, #20
    11ae:	46bd      	mov	sp, r7
    11b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    11b4:	4770      	bx	lr
	...

000011b8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    11b8:	b580      	push	{r7, lr}
    11ba:	b082      	sub	sp, #8
    11bc:	af00      	add	r7, sp, #0
    11be:	4603      	mov	r3, r0
    11c0:	6039      	str	r1, [r7, #0]
    11c2:	71fb      	strb	r3, [r7, #7]
    11c4:	4613      	mov	r3, r2
    11c6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    11c8:	79bb      	ldrb	r3, [r7, #6]
    11ca:	2b01      	cmp	r3, #1
    11cc:	d01c      	beq.n	1208 <_gpio_set_direction+0x50>
    11ce:	2b02      	cmp	r3, #2
    11d0:	d037      	beq.n	1242 <_gpio_set_direction+0x8a>
    11d2:	2b00      	cmp	r3, #0
    11d4:	d14e      	bne.n	1274 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    11d6:	79fb      	ldrb	r3, [r7, #7]
    11d8:	683a      	ldr	r2, [r7, #0]
    11da:	4619      	mov	r1, r3
    11dc:	482a      	ldr	r0, [pc, #168]	; (1288 <_gpio_set_direction+0xd0>)
    11de:	4b2b      	ldr	r3, [pc, #172]	; (128c <_gpio_set_direction+0xd4>)
    11e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    11e2:	683b      	ldr	r3, [r7, #0]
    11e4:	b29b      	uxth	r3, r3
    11e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    11ea:	79fb      	ldrb	r3, [r7, #7]
    11ec:	4619      	mov	r1, r3
    11ee:	4826      	ldr	r0, [pc, #152]	; (1288 <_gpio_set_direction+0xd0>)
    11f0:	4b27      	ldr	r3, [pc, #156]	; (1290 <_gpio_set_direction+0xd8>)
    11f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    11f4:	683b      	ldr	r3, [r7, #0]
    11f6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    11f8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    11fc:	79fb      	ldrb	r3, [r7, #7]
    11fe:	4619      	mov	r1, r3
    1200:	4821      	ldr	r0, [pc, #132]	; (1288 <_gpio_set_direction+0xd0>)
    1202:	4b23      	ldr	r3, [pc, #140]	; (1290 <_gpio_set_direction+0xd8>)
    1204:	4798      	blx	r3
		break;
    1206:	e03a      	b.n	127e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1208:	79fb      	ldrb	r3, [r7, #7]
    120a:	683a      	ldr	r2, [r7, #0]
    120c:	4619      	mov	r1, r3
    120e:	481e      	ldr	r0, [pc, #120]	; (1288 <_gpio_set_direction+0xd0>)
    1210:	4b1e      	ldr	r3, [pc, #120]	; (128c <_gpio_set_direction+0xd4>)
    1212:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1214:	683b      	ldr	r3, [r7, #0]
    1216:	b29b      	uxth	r3, r3
    1218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1220:	79f9      	ldrb	r1, [r7, #7]
    1222:	461a      	mov	r2, r3
    1224:	4818      	ldr	r0, [pc, #96]	; (1288 <_gpio_set_direction+0xd0>)
    1226:	4b1a      	ldr	r3, [pc, #104]	; (1290 <_gpio_set_direction+0xd8>)
    1228:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    122a:	683b      	ldr	r3, [r7, #0]
    122c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    122e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1236:	79f9      	ldrb	r1, [r7, #7]
    1238:	461a      	mov	r2, r3
    123a:	4813      	ldr	r0, [pc, #76]	; (1288 <_gpio_set_direction+0xd0>)
    123c:	4b14      	ldr	r3, [pc, #80]	; (1290 <_gpio_set_direction+0xd8>)
    123e:	4798      	blx	r3
		break;
    1240:	e01d      	b.n	127e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1242:	79fb      	ldrb	r3, [r7, #7]
    1244:	683a      	ldr	r2, [r7, #0]
    1246:	4619      	mov	r1, r3
    1248:	480f      	ldr	r0, [pc, #60]	; (1288 <_gpio_set_direction+0xd0>)
    124a:	4b12      	ldr	r3, [pc, #72]	; (1294 <_gpio_set_direction+0xdc>)
    124c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    124e:	683b      	ldr	r3, [r7, #0]
    1250:	b29b      	uxth	r3, r3
    1252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1256:	79fb      	ldrb	r3, [r7, #7]
    1258:	4619      	mov	r1, r3
    125a:	480b      	ldr	r0, [pc, #44]	; (1288 <_gpio_set_direction+0xd0>)
    125c:	4b0c      	ldr	r3, [pc, #48]	; (1290 <_gpio_set_direction+0xd8>)
    125e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1260:	683b      	ldr	r3, [r7, #0]
    1262:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1264:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1268:	79fb      	ldrb	r3, [r7, #7]
    126a:	4619      	mov	r1, r3
    126c:	4806      	ldr	r0, [pc, #24]	; (1288 <_gpio_set_direction+0xd0>)
    126e:	4b08      	ldr	r3, [pc, #32]	; (1290 <_gpio_set_direction+0xd8>)
    1270:	4798      	blx	r3
		break;
    1272:	e004      	b.n	127e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1274:	2246      	movs	r2, #70	; 0x46
    1276:	4908      	ldr	r1, [pc, #32]	; (1298 <_gpio_set_direction+0xe0>)
    1278:	2000      	movs	r0, #0
    127a:	4b08      	ldr	r3, [pc, #32]	; (129c <_gpio_set_direction+0xe4>)
    127c:	4798      	blx	r3
	}
}
    127e:	bf00      	nop
    1280:	3708      	adds	r7, #8
    1282:	46bd      	mov	sp, r7
    1284:	bd80      	pop	{r7, pc}
    1286:	bf00      	nop
    1288:	41008000 	.word	0x41008000
    128c:	00000f77 	.word	0x00000f77
    1290:	0000118f 	.word	0x0000118f
    1294:	00000f4f 	.word	0x00000f4f
    1298:	0000fefc 	.word	0x0000fefc
    129c:	00003ba1 	.word	0x00003ba1

000012a0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	b082      	sub	sp, #8
    12a4:	af00      	add	r7, sp, #0
    12a6:	4603      	mov	r3, r0
    12a8:	6039      	str	r1, [r7, #0]
    12aa:	71fb      	strb	r3, [r7, #7]
    12ac:	4613      	mov	r3, r2
    12ae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    12b0:	79bb      	ldrb	r3, [r7, #6]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d006      	beq.n	12c4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    12b6:	79fb      	ldrb	r3, [r7, #7]
    12b8:	683a      	ldr	r2, [r7, #0]
    12ba:	4619      	mov	r1, r3
    12bc:	4806      	ldr	r0, [pc, #24]	; (12d8 <_gpio_set_level+0x38>)
    12be:	4b07      	ldr	r3, [pc, #28]	; (12dc <_gpio_set_level+0x3c>)
    12c0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    12c2:	e005      	b.n	12d0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    12c4:	79fb      	ldrb	r3, [r7, #7]
    12c6:	683a      	ldr	r2, [r7, #0]
    12c8:	4619      	mov	r1, r3
    12ca:	4803      	ldr	r0, [pc, #12]	; (12d8 <_gpio_set_level+0x38>)
    12cc:	4b04      	ldr	r3, [pc, #16]	; (12e0 <_gpio_set_level+0x40>)
    12ce:	4798      	blx	r3
}
    12d0:	bf00      	nop
    12d2:	3708      	adds	r7, #8
    12d4:	46bd      	mov	sp, r7
    12d6:	bd80      	pop	{r7, pc}
    12d8:	41008000 	.word	0x41008000
    12dc:	00000f9f 	.word	0x00000f9f
    12e0:	00000fc7 	.word	0x00000fc7

000012e4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	b082      	sub	sp, #8
    12e8:	af00      	add	r7, sp, #0
    12ea:	4603      	mov	r3, r0
    12ec:	71fb      	strb	r3, [r7, #7]
    12ee:	460b      	mov	r3, r1
    12f0:	71bb      	strb	r3, [r7, #6]
    12f2:	4613      	mov	r3, r2
    12f4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    12f6:	797b      	ldrb	r3, [r7, #5]
    12f8:	2b01      	cmp	r3, #1
    12fa:	d00a      	beq.n	1312 <_gpio_set_pin_pull_mode+0x2e>
    12fc:	2b02      	cmp	r3, #2
    12fe:	d01f      	beq.n	1340 <_gpio_set_pin_pull_mode+0x5c>
    1300:	2b00      	cmp	r3, #0
    1302:	d134      	bne.n	136e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1304:	79ba      	ldrb	r2, [r7, #6]
    1306:	79fb      	ldrb	r3, [r7, #7]
    1308:	4619      	mov	r1, r3
    130a:	481e      	ldr	r0, [pc, #120]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    130c:	4b1e      	ldr	r3, [pc, #120]	; (1388 <_gpio_set_pin_pull_mode+0xa4>)
    130e:	4798      	blx	r3
		break;
    1310:	e033      	b.n	137a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1312:	79bb      	ldrb	r3, [r7, #6]
    1314:	2201      	movs	r2, #1
    1316:	409a      	lsls	r2, r3
    1318:	79fb      	ldrb	r3, [r7, #7]
    131a:	4619      	mov	r1, r3
    131c:	4819      	ldr	r0, [pc, #100]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    131e:	4b1b      	ldr	r3, [pc, #108]	; (138c <_gpio_set_pin_pull_mode+0xa8>)
    1320:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1322:	79ba      	ldrb	r2, [r7, #6]
    1324:	79fb      	ldrb	r3, [r7, #7]
    1326:	4619      	mov	r1, r3
    1328:	4816      	ldr	r0, [pc, #88]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    132a:	4b19      	ldr	r3, [pc, #100]	; (1390 <_gpio_set_pin_pull_mode+0xac>)
    132c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    132e:	79bb      	ldrb	r3, [r7, #6]
    1330:	2201      	movs	r2, #1
    1332:	409a      	lsls	r2, r3
    1334:	79fb      	ldrb	r3, [r7, #7]
    1336:	4619      	mov	r1, r3
    1338:	4812      	ldr	r0, [pc, #72]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    133a:	4b16      	ldr	r3, [pc, #88]	; (1394 <_gpio_set_pin_pull_mode+0xb0>)
    133c:	4798      	blx	r3
		break;
    133e:	e01c      	b.n	137a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1340:	79bb      	ldrb	r3, [r7, #6]
    1342:	2201      	movs	r2, #1
    1344:	409a      	lsls	r2, r3
    1346:	79fb      	ldrb	r3, [r7, #7]
    1348:	4619      	mov	r1, r3
    134a:	480e      	ldr	r0, [pc, #56]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    134c:	4b0f      	ldr	r3, [pc, #60]	; (138c <_gpio_set_pin_pull_mode+0xa8>)
    134e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1350:	79ba      	ldrb	r2, [r7, #6]
    1352:	79fb      	ldrb	r3, [r7, #7]
    1354:	4619      	mov	r1, r3
    1356:	480b      	ldr	r0, [pc, #44]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    1358:	4b0d      	ldr	r3, [pc, #52]	; (1390 <_gpio_set_pin_pull_mode+0xac>)
    135a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    135c:	79bb      	ldrb	r3, [r7, #6]
    135e:	2201      	movs	r2, #1
    1360:	409a      	lsls	r2, r3
    1362:	79fb      	ldrb	r3, [r7, #7]
    1364:	4619      	mov	r1, r3
    1366:	4807      	ldr	r0, [pc, #28]	; (1384 <_gpio_set_pin_pull_mode+0xa0>)
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <_gpio_set_pin_pull_mode+0xb4>)
    136a:	4798      	blx	r3
		break;
    136c:	e005      	b.n	137a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    136e:	2289      	movs	r2, #137	; 0x89
    1370:	490a      	ldr	r1, [pc, #40]	; (139c <_gpio_set_pin_pull_mode+0xb8>)
    1372:	2000      	movs	r0, #0
    1374:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <_gpio_set_pin_pull_mode+0xbc>)
    1376:	4798      	blx	r3
		break;
    1378:	bf00      	nop
	}
}
    137a:	bf00      	nop
    137c:	3708      	adds	r7, #8
    137e:	46bd      	mov	sp, r7
    1380:	bd80      	pop	{r7, pc}
    1382:	bf00      	nop
    1384:	41008000 	.word	0x41008000
    1388:	0000114b 	.word	0x0000114b
    138c:	00000f77 	.word	0x00000f77
    1390:	00001107 	.word	0x00001107
    1394:	00000f9f 	.word	0x00000f9f
    1398:	00000fc7 	.word	0x00000fc7
    139c:	0000fefc 	.word	0x0000fefc
    13a0:	00003ba1 	.word	0x00003ba1

000013a4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    13a4:	b590      	push	{r4, r7, lr}
    13a6:	b085      	sub	sp, #20
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
    13ac:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    13ae:	687b      	ldr	r3, [r7, #4]
    13b0:	095b      	lsrs	r3, r3, #5
    13b2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	b2db      	uxtb	r3, r3
    13b8:	f003 031f 	and.w	r3, r3, #31
    13bc:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    13be:	683b      	ldr	r3, [r7, #0]
    13c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    13c4:	d106      	bne.n	13d4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    13c6:	7bba      	ldrb	r2, [r7, #14]
    13c8:	7bf9      	ldrb	r1, [r7, #15]
    13ca:	2300      	movs	r3, #0
    13cc:	4812      	ldr	r0, [pc, #72]	; (1418 <_gpio_set_pin_function+0x74>)
    13ce:	4c13      	ldr	r4, [pc, #76]	; (141c <_gpio_set_pin_function+0x78>)
    13d0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    13d2:	e01d      	b.n	1410 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    13d4:	7bba      	ldrb	r2, [r7, #14]
    13d6:	7bf9      	ldrb	r1, [r7, #15]
    13d8:	2301      	movs	r3, #1
    13da:	480f      	ldr	r0, [pc, #60]	; (1418 <_gpio_set_pin_function+0x74>)
    13dc:	4c0f      	ldr	r4, [pc, #60]	; (141c <_gpio_set_pin_function+0x78>)
    13de:	47a0      	blx	r4
		if (pin & 1) {
    13e0:	7bbb      	ldrb	r3, [r7, #14]
    13e2:	f003 0301 	and.w	r3, r3, #1
    13e6:	2b00      	cmp	r3, #0
    13e8:	d009      	beq.n	13fe <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    13ea:	7bbb      	ldrb	r3, [r7, #14]
    13ec:	085b      	lsrs	r3, r3, #1
    13ee:	b2da      	uxtb	r2, r3
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	b2db      	uxtb	r3, r3
    13f4:	7bf9      	ldrb	r1, [r7, #15]
    13f6:	4808      	ldr	r0, [pc, #32]	; (1418 <_gpio_set_pin_function+0x74>)
    13f8:	4c09      	ldr	r4, [pc, #36]	; (1420 <_gpio_set_pin_function+0x7c>)
    13fa:	47a0      	blx	r4
}
    13fc:	e008      	b.n	1410 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    13fe:	7bbb      	ldrb	r3, [r7, #14]
    1400:	085b      	lsrs	r3, r3, #1
    1402:	b2da      	uxtb	r2, r3
    1404:	683b      	ldr	r3, [r7, #0]
    1406:	b2db      	uxtb	r3, r3
    1408:	7bf9      	ldrb	r1, [r7, #15]
    140a:	4803      	ldr	r0, [pc, #12]	; (1418 <_gpio_set_pin_function+0x74>)
    140c:	4c05      	ldr	r4, [pc, #20]	; (1424 <_gpio_set_pin_function+0x80>)
    140e:	47a0      	blx	r4
}
    1410:	bf00      	nop
    1412:	3714      	adds	r7, #20
    1414:	46bd      	mov	sp, r7
    1416:	bd90      	pop	{r4, r7, pc}
    1418:	41008000 	.word	0x41008000
    141c:	000010ad 	.word	0x000010ad
    1420:	0000104f 	.word	0x0000104f
    1424:	00000fef 	.word	0x00000fef

00001428 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1428:	b580      	push	{r7, lr}
    142a:	b082      	sub	sp, #8
    142c:	af00      	add	r7, sp, #0
    142e:	4603      	mov	r3, r0
    1430:	460a      	mov	r2, r1
    1432:	71fb      	strb	r3, [r7, #7]
    1434:	4613      	mov	r3, r2
    1436:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1438:	79fb      	ldrb	r3, [r7, #7]
    143a:	095b      	lsrs	r3, r3, #5
    143c:	b2d8      	uxtb	r0, r3
    143e:	79fb      	ldrb	r3, [r7, #7]
    1440:	f003 031f 	and.w	r3, r3, #31
    1444:	b2db      	uxtb	r3, r3
    1446:	79ba      	ldrb	r2, [r7, #6]
    1448:	4619      	mov	r1, r3
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <gpio_set_pin_pull_mode+0x30>)
    144c:	4798      	blx	r3
}
    144e:	bf00      	nop
    1450:	3708      	adds	r7, #8
    1452:	46bd      	mov	sp, r7
    1454:	bd80      	pop	{r7, pc}
    1456:	bf00      	nop
    1458:	000012e5 	.word	0x000012e5

0000145c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    145c:	b580      	push	{r7, lr}
    145e:	b082      	sub	sp, #8
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
    1464:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1466:	6839      	ldr	r1, [r7, #0]
    1468:	6878      	ldr	r0, [r7, #4]
    146a:	4b03      	ldr	r3, [pc, #12]	; (1478 <gpio_set_pin_function+0x1c>)
    146c:	4798      	blx	r3
}
    146e:	bf00      	nop
    1470:	3708      	adds	r7, #8
    1472:	46bd      	mov	sp, r7
    1474:	bd80      	pop	{r7, pc}
    1476:	bf00      	nop
    1478:	000013a5 	.word	0x000013a5

0000147c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    147c:	b580      	push	{r7, lr}
    147e:	b082      	sub	sp, #8
    1480:	af00      	add	r7, sp, #0
    1482:	4603      	mov	r3, r0
    1484:	460a      	mov	r2, r1
    1486:	71fb      	strb	r3, [r7, #7]
    1488:	4613      	mov	r3, r2
    148a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    148c:	79fb      	ldrb	r3, [r7, #7]
    148e:	095b      	lsrs	r3, r3, #5
    1490:	b2d8      	uxtb	r0, r3
    1492:	79fb      	ldrb	r3, [r7, #7]
    1494:	f003 031f 	and.w	r3, r3, #31
    1498:	2201      	movs	r2, #1
    149a:	fa02 f303 	lsl.w	r3, r2, r3
    149e:	79ba      	ldrb	r2, [r7, #6]
    14a0:	4619      	mov	r1, r3
    14a2:	4b03      	ldr	r3, [pc, #12]	; (14b0 <gpio_set_pin_direction+0x34>)
    14a4:	4798      	blx	r3
}
    14a6:	bf00      	nop
    14a8:	3708      	adds	r7, #8
    14aa:	46bd      	mov	sp, r7
    14ac:	bd80      	pop	{r7, pc}
    14ae:	bf00      	nop
    14b0:	000011b9 	.word	0x000011b9

000014b4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	af00      	add	r7, sp, #0
    14ba:	4603      	mov	r3, r0
    14bc:	460a      	mov	r2, r1
    14be:	71fb      	strb	r3, [r7, #7]
    14c0:	4613      	mov	r3, r2
    14c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    14c4:	79fb      	ldrb	r3, [r7, #7]
    14c6:	095b      	lsrs	r3, r3, #5
    14c8:	b2d8      	uxtb	r0, r3
    14ca:	79fb      	ldrb	r3, [r7, #7]
    14cc:	f003 031f 	and.w	r3, r3, #31
    14d0:	2201      	movs	r2, #1
    14d2:	fa02 f303 	lsl.w	r3, r2, r3
    14d6:	79ba      	ldrb	r2, [r7, #6]
    14d8:	4619      	mov	r1, r3
    14da:	4b03      	ldr	r3, [pc, #12]	; (14e8 <gpio_set_pin_level+0x34>)
    14dc:	4798      	blx	r3
}
    14de:	bf00      	nop
    14e0:	3708      	adds	r7, #8
    14e2:	46bd      	mov	sp, r7
    14e4:	bd80      	pop	{r7, pc}
    14e6:	bf00      	nop
    14e8:	000012a1 	.word	0x000012a1

000014ec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	af00      	add	r7, sp, #0
	_init_chip();
    14f0:	4b01      	ldr	r3, [pc, #4]	; (14f8 <init_mcu+0xc>)
    14f2:	4798      	blx	r3
}
    14f4:	bf00      	nop
    14f6:	bd80      	pop	{r7, pc}
    14f8:	000047ad 	.word	0x000047ad

000014fc <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    14fc:	b580      	push	{r7, lr}
    14fe:	b082      	sub	sp, #8
    1500:	af00      	add	r7, sp, #0
    1502:	6078      	str	r0, [r7, #4]
    1504:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1506:	687b      	ldr	r3, [r7, #4]
    1508:	2b00      	cmp	r3, #0
    150a:	d004      	beq.n	1516 <wdt_init+0x1a>
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	2b00      	cmp	r3, #0
    1510:	d001      	beq.n	1516 <wdt_init+0x1a>
    1512:	2301      	movs	r3, #1
    1514:	e000      	b.n	1518 <wdt_init+0x1c>
    1516:	2300      	movs	r3, #0
    1518:	f003 0301 	and.w	r3, r3, #1
    151c:	b2db      	uxtb	r3, r3
    151e:	2248      	movs	r2, #72	; 0x48
    1520:	4907      	ldr	r1, [pc, #28]	; (1540 <wdt_init+0x44>)
    1522:	4618      	mov	r0, r3
    1524:	4b07      	ldr	r3, [pc, #28]	; (1544 <wdt_init+0x48>)
    1526:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	683a      	ldr	r2, [r7, #0]
    152c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	4618      	mov	r0, r3
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <wdt_init+0x4c>)
    1534:	4798      	blx	r3
    1536:	4603      	mov	r3, r0
}
    1538:	4618      	mov	r0, r3
    153a:	3708      	adds	r7, #8
    153c:	46bd      	mov	sp, r7
    153e:	bd80      	pop	{r7, pc}
    1540:	0000ff18 	.word	0x0000ff18
    1544:	00003ba1 	.word	0x00003ba1
    1548:	0000b725 	.word	0x0000b725

0000154c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    154c:	b580      	push	{r7, lr}
    154e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1550:	4804      	ldr	r0, [pc, #16]	; (1564 <CRC_CALC_init+0x18>)
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <CRC_CALC_init+0x1c>)
    1554:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1556:	4905      	ldr	r1, [pc, #20]	; (156c <CRC_CALC_init+0x20>)
    1558:	4805      	ldr	r0, [pc, #20]	; (1570 <CRC_CALC_init+0x24>)
    155a:	4b06      	ldr	r3, [pc, #24]	; (1574 <CRC_CALC_init+0x28>)
    155c:	4798      	blx	r3
}
    155e:	bf00      	nop
    1560:	bd80      	pop	{r7, pc}
    1562:	bf00      	nop
    1564:	40000800 	.word	0x40000800
    1568:	00000d8f 	.word	0x00000d8f
    156c:	41002000 	.word	0x41002000
    1570:	20001504 	.word	0x20001504
    1574:	000022c1 	.word	0x000022c1

00001578 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1578:	b580      	push	{r7, lr}
    157a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    157c:	2244      	movs	r2, #68	; 0x44
    157e:	2104      	movs	r1, #4
    1580:	4838      	ldr	r0, [pc, #224]	; (1664 <EXTERNAL_IRQ_0_init+0xec>)
    1582:	4b39      	ldr	r3, [pc, #228]	; (1668 <EXTERNAL_IRQ_0_init+0xf0>)
    1584:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1586:	4839      	ldr	r0, [pc, #228]	; (166c <EXTERNAL_IRQ_0_init+0xf4>)
    1588:	4b39      	ldr	r3, [pc, #228]	; (1670 <EXTERNAL_IRQ_0_init+0xf8>)
    158a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    158c:	2101      	movs	r1, #1
    158e:	2040      	movs	r0, #64	; 0x40
    1590:	4b38      	ldr	r3, [pc, #224]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    1592:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1594:	2100      	movs	r1, #0
    1596:	2040      	movs	r0, #64	; 0x40
    1598:	4b37      	ldr	r3, [pc, #220]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    159a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    159c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    15a0:	2040      	movs	r0, #64	; 0x40
    15a2:	4b36      	ldr	r3, [pc, #216]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    15a4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    15a6:	2101      	movs	r1, #1
    15a8:	2003      	movs	r0, #3
    15aa:	4b32      	ldr	r3, [pc, #200]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    15ac:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    15ae:	2102      	movs	r1, #2
    15b0:	2003      	movs	r0, #3
    15b2:	4b31      	ldr	r3, [pc, #196]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    15b4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    15b6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    15ba:	2003      	movs	r0, #3
    15bc:	4b2f      	ldr	r3, [pc, #188]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    15be:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    15c0:	2101      	movs	r1, #1
    15c2:	2004      	movs	r0, #4
    15c4:	4b2b      	ldr	r3, [pc, #172]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    15c6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    15c8:	2102      	movs	r1, #2
    15ca:	2004      	movs	r0, #4
    15cc:	4b2a      	ldr	r3, [pc, #168]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    15ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    15d0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    15d4:	2004      	movs	r0, #4
    15d6:	4b29      	ldr	r3, [pc, #164]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    15d8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    15da:	2101      	movs	r1, #1
    15dc:	2005      	movs	r0, #5
    15de:	4b25      	ldr	r3, [pc, #148]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    15e0:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    15e2:	2102      	movs	r1, #2
    15e4:	2005      	movs	r0, #5
    15e6:	4b24      	ldr	r3, [pc, #144]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    15e8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    15ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    15ee:	2005      	movs	r0, #5
    15f0:	4b22      	ldr	r3, [pc, #136]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    15f2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    15f4:	2101      	movs	r1, #1
    15f6:	2056      	movs	r0, #86	; 0x56
    15f8:	4b1e      	ldr	r3, [pc, #120]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    15fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    15fc:	2102      	movs	r1, #2
    15fe:	2056      	movs	r0, #86	; 0x56
    1600:	4b1d      	ldr	r3, [pc, #116]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    1602:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1604:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1608:	2056      	movs	r0, #86	; 0x56
    160a:	4b1c      	ldr	r3, [pc, #112]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    160c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    160e:	2101      	movs	r1, #1
    1610:	2057      	movs	r0, #87	; 0x57
    1612:	4b18      	ldr	r3, [pc, #96]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    1614:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1616:	2102      	movs	r1, #2
    1618:	2057      	movs	r0, #87	; 0x57
    161a:	4b17      	ldr	r3, [pc, #92]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    161c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    161e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1622:	2057      	movs	r0, #87	; 0x57
    1624:	4b15      	ldr	r3, [pc, #84]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    1626:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1628:	2101      	movs	r1, #1
    162a:	2028      	movs	r0, #40	; 0x28
    162c:	4b11      	ldr	r3, [pc, #68]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    162e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1630:	2100      	movs	r1, #0
    1632:	2028      	movs	r0, #40	; 0x28
    1634:	4b10      	ldr	r3, [pc, #64]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    1636:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1638:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    163c:	2028      	movs	r0, #40	; 0x28
    163e:	4b0f      	ldr	r3, [pc, #60]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    1640:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1642:	2101      	movs	r1, #1
    1644:	2029      	movs	r0, #41	; 0x29
    1646:	4b0b      	ldr	r3, [pc, #44]	; (1674 <EXTERNAL_IRQ_0_init+0xfc>)
    1648:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    164a:	2100      	movs	r1, #0
    164c:	2029      	movs	r0, #41	; 0x29
    164e:	4b0a      	ldr	r3, [pc, #40]	; (1678 <EXTERNAL_IRQ_0_init+0x100>)
    1650:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1652:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1656:	2029      	movs	r0, #41	; 0x29
    1658:	4b08      	ldr	r3, [pc, #32]	; (167c <EXTERNAL_IRQ_0_init+0x104>)
    165a:	4798      	blx	r3

	ext_irq_init();
    165c:	4b08      	ldr	r3, [pc, #32]	; (1680 <EXTERNAL_IRQ_0_init+0x108>)
    165e:	4798      	blx	r3
}
    1660:	bf00      	nop
    1662:	bd80      	pop	{r7, pc}
    1664:	40001c00 	.word	0x40001c00
    1668:	00000c29 	.word	0x00000c29
    166c:	40000800 	.word	0x40000800
    1670:	00000d0f 	.word	0x00000d0f
    1674:	0000147d 	.word	0x0000147d
    1678:	00001429 	.word	0x00001429
    167c:	0000145d 	.word	0x0000145d
    1680:	00002389 	.word	0x00002389

00001684 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1684:	b580      	push	{r7, lr}
    1686:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1688:	2244      	movs	r2, #68	; 0x44
    168a:	210b      	movs	r1, #11
    168c:	4807      	ldr	r0, [pc, #28]	; (16ac <EVENT_SYSTEM_0_init+0x28>)
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <EVENT_SYSTEM_0_init+0x2c>)
    1690:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1692:	2244      	movs	r2, #68	; 0x44
    1694:	210c      	movs	r1, #12
    1696:	4805      	ldr	r0, [pc, #20]	; (16ac <EVENT_SYSTEM_0_init+0x28>)
    1698:	4b05      	ldr	r3, [pc, #20]	; (16b0 <EVENT_SYSTEM_0_init+0x2c>)
    169a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    169c:	4805      	ldr	r0, [pc, #20]	; (16b4 <EVENT_SYSTEM_0_init+0x30>)
    169e:	4b06      	ldr	r3, [pc, #24]	; (16b8 <EVENT_SYSTEM_0_init+0x34>)
    16a0:	4798      	blx	r3

	event_system_init();
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <EVENT_SYSTEM_0_init+0x38>)
    16a4:	4798      	blx	r3
}
    16a6:	bf00      	nop
    16a8:	bd80      	pop	{r7, pc}
    16aa:	bf00      	nop
    16ac:	40001c00 	.word	0x40001c00
    16b0:	00000c29 	.word	0x00000c29
    16b4:	40000800 	.word	0x40000800
    16b8:	00000daf 	.word	0x00000daf
    16bc:	00002375 	.word	0x00002375

000016c0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    16c4:	2101      	movs	r1, #1
    16c6:	202b      	movs	r0, #43	; 0x2b
    16c8:	4b2b      	ldr	r3, [pc, #172]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    16ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    16cc:	2100      	movs	r1, #0
    16ce:	202b      	movs	r0, #43	; 0x2b
    16d0:	4b2a      	ldr	r3, [pc, #168]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    16d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    16d4:	492a      	ldr	r1, [pc, #168]	; (1780 <QSPI_N25Q256_PORT_init+0xc0>)
    16d6:	202b      	movs	r0, #43	; 0x2b
    16d8:	4b2a      	ldr	r3, [pc, #168]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    16da:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    16dc:	2102      	movs	r1, #2
    16de:	2008      	movs	r0, #8
    16e0:	4b25      	ldr	r3, [pc, #148]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    16e2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    16e4:	2100      	movs	r1, #0
    16e6:	2008      	movs	r0, #8
    16e8:	4b27      	ldr	r3, [pc, #156]	; (1788 <QSPI_N25Q256_PORT_init+0xc8>)
    16ea:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    16ec:	2100      	movs	r1, #0
    16ee:	2008      	movs	r0, #8
    16f0:	4b22      	ldr	r3, [pc, #136]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    16f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    16f4:	4925      	ldr	r1, [pc, #148]	; (178c <QSPI_N25Q256_PORT_init+0xcc>)
    16f6:	2008      	movs	r0, #8
    16f8:	4b22      	ldr	r3, [pc, #136]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    16fa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    16fc:	2102      	movs	r1, #2
    16fe:	2009      	movs	r0, #9
    1700:	4b1d      	ldr	r3, [pc, #116]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    1702:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1704:	2100      	movs	r1, #0
    1706:	2009      	movs	r0, #9
    1708:	4b1f      	ldr	r3, [pc, #124]	; (1788 <QSPI_N25Q256_PORT_init+0xc8>)
    170a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    170c:	2100      	movs	r1, #0
    170e:	2009      	movs	r0, #9
    1710:	4b1a      	ldr	r3, [pc, #104]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    1712:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1714:	491e      	ldr	r1, [pc, #120]	; (1790 <QSPI_N25Q256_PORT_init+0xd0>)
    1716:	2009      	movs	r0, #9
    1718:	4b1a      	ldr	r3, [pc, #104]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    171a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    171c:	2102      	movs	r1, #2
    171e:	200a      	movs	r0, #10
    1720:	4b15      	ldr	r3, [pc, #84]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    1722:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1724:	2100      	movs	r1, #0
    1726:	200a      	movs	r0, #10
    1728:	4b17      	ldr	r3, [pc, #92]	; (1788 <QSPI_N25Q256_PORT_init+0xc8>)
    172a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    172c:	2100      	movs	r1, #0
    172e:	200a      	movs	r0, #10
    1730:	4b12      	ldr	r3, [pc, #72]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    1732:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1734:	4917      	ldr	r1, [pc, #92]	; (1794 <QSPI_N25Q256_PORT_init+0xd4>)
    1736:	200a      	movs	r0, #10
    1738:	4b12      	ldr	r3, [pc, #72]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    173a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    173c:	2102      	movs	r1, #2
    173e:	200b      	movs	r0, #11
    1740:	4b0d      	ldr	r3, [pc, #52]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    1742:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1744:	2100      	movs	r1, #0
    1746:	200b      	movs	r0, #11
    1748:	4b0f      	ldr	r3, [pc, #60]	; (1788 <QSPI_N25Q256_PORT_init+0xc8>)
    174a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    174c:	2100      	movs	r1, #0
    174e:	200b      	movs	r0, #11
    1750:	4b0a      	ldr	r3, [pc, #40]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    1752:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1754:	4910      	ldr	r1, [pc, #64]	; (1798 <QSPI_N25Q256_PORT_init+0xd8>)
    1756:	200b      	movs	r0, #11
    1758:	4b0a      	ldr	r3, [pc, #40]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    175a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    175c:	2101      	movs	r1, #1
    175e:	202a      	movs	r0, #42	; 0x2a
    1760:	4b05      	ldr	r3, [pc, #20]	; (1778 <QSPI_N25Q256_PORT_init+0xb8>)
    1762:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1764:	2100      	movs	r1, #0
    1766:	202a      	movs	r0, #42	; 0x2a
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <QSPI_N25Q256_PORT_init+0xbc>)
    176a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    176c:	490b      	ldr	r1, [pc, #44]	; (179c <QSPI_N25Q256_PORT_init+0xdc>)
    176e:	202a      	movs	r0, #42	; 0x2a
    1770:	4b04      	ldr	r3, [pc, #16]	; (1784 <QSPI_N25Q256_PORT_init+0xc4>)
    1772:	4798      	blx	r3
}
    1774:	bf00      	nop
    1776:	bd80      	pop	{r7, pc}
    1778:	0000147d 	.word	0x0000147d
    177c:	00001429 	.word	0x00001429
    1780:	002b0007 	.word	0x002b0007
    1784:	0000145d 	.word	0x0000145d
    1788:	000014b5 	.word	0x000014b5
    178c:	00080007 	.word	0x00080007
    1790:	00090007 	.word	0x00090007
    1794:	000a0007 	.word	0x000a0007
    1798:	000b0007 	.word	0x000b0007
    179c:	002a0007 	.word	0x002a0007

000017a0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    17a0:	b580      	push	{r7, lr}
    17a2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    17a4:	4805      	ldr	r0, [pc, #20]	; (17bc <QSPI_N25Q256_CLOCK_init+0x1c>)
    17a6:	4b06      	ldr	r3, [pc, #24]	; (17c0 <QSPI_N25Q256_CLOCK_init+0x20>)
    17a8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    17aa:	4804      	ldr	r0, [pc, #16]	; (17bc <QSPI_N25Q256_CLOCK_init+0x1c>)
    17ac:	4b05      	ldr	r3, [pc, #20]	; (17c4 <QSPI_N25Q256_CLOCK_init+0x24>)
    17ae:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    17b0:	4802      	ldr	r0, [pc, #8]	; (17bc <QSPI_N25Q256_CLOCK_init+0x1c>)
    17b2:	4b05      	ldr	r3, [pc, #20]	; (17c8 <QSPI_N25Q256_CLOCK_init+0x28>)
    17b4:	4798      	blx	r3
}
    17b6:	bf00      	nop
    17b8:	bd80      	pop	{r7, pc}
    17ba:	bf00      	nop
    17bc:	40000800 	.word	0x40000800
    17c0:	00000c6f 	.word	0x00000c6f
    17c4:	00000caf 	.word	0x00000caf
    17c8:	00000e6f 	.word	0x00000e6f

000017cc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <QSPI_N25Q256_init+0x18>)
    17d2:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    17d4:	4904      	ldr	r1, [pc, #16]	; (17e8 <QSPI_N25Q256_init+0x1c>)
    17d6:	4805      	ldr	r0, [pc, #20]	; (17ec <QSPI_N25Q256_init+0x20>)
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <QSPI_N25Q256_init+0x24>)
    17da:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    17dc:	4b05      	ldr	r3, [pc, #20]	; (17f4 <QSPI_N25Q256_init+0x28>)
    17de:	4798      	blx	r3
}
    17e0:	bf00      	nop
    17e2:	bd80      	pop	{r7, pc}
    17e4:	000017a1 	.word	0x000017a1
    17e8:	42003400 	.word	0x42003400
    17ec:	20001378 	.word	0x20001378
    17f0:	000029fd 	.word	0x000029fd
    17f4:	000016c1 	.word	0x000016c1

000017f8 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    17fc:	4802      	ldr	r0, [pc, #8]	; (1808 <DATETIME_CLOCK_CLOCK_init+0x10>)
    17fe:	4b03      	ldr	r3, [pc, #12]	; (180c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1800:	4798      	blx	r3
}
    1802:	bf00      	nop
    1804:	bd80      	pop	{r7, pc}
    1806:	bf00      	nop
    1808:	40000800 	.word	0x40000800
    180c:	00000cef 	.word	0x00000cef

00001810 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1810:	b580      	push	{r7, lr}
    1812:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1814:	4b03      	ldr	r3, [pc, #12]	; (1824 <DATETIME_CLOCK_init+0x14>)
    1816:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1818:	4903      	ldr	r1, [pc, #12]	; (1828 <DATETIME_CLOCK_init+0x18>)
    181a:	4804      	ldr	r0, [pc, #16]	; (182c <DATETIME_CLOCK_init+0x1c>)
    181c:	4b04      	ldr	r3, [pc, #16]	; (1830 <DATETIME_CLOCK_init+0x20>)
    181e:	4798      	blx	r3
}
    1820:	bf00      	nop
    1822:	bd80      	pop	{r7, pc}
    1824:	000017f9 	.word	0x000017f9
    1828:	40002400 	.word	0x40002400
    182c:	200014e0 	.word	0x200014e0
    1830:	00002165 	.word	0x00002165

00001834 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    1834:	b580      	push	{r7, lr}
    1836:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1838:	2100      	movs	r1, #0
    183a:	2010      	movs	r0, #16
    183c:	4b07      	ldr	r3, [pc, #28]	; (185c <I2C_SHARED_PORT_init+0x28>)
    183e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1840:	4907      	ldr	r1, [pc, #28]	; (1860 <I2C_SHARED_PORT_init+0x2c>)
    1842:	2010      	movs	r0, #16
    1844:	4b07      	ldr	r3, [pc, #28]	; (1864 <I2C_SHARED_PORT_init+0x30>)
    1846:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1848:	2100      	movs	r1, #0
    184a:	2011      	movs	r0, #17
    184c:	4b03      	ldr	r3, [pc, #12]	; (185c <I2C_SHARED_PORT_init+0x28>)
    184e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1850:	4905      	ldr	r1, [pc, #20]	; (1868 <I2C_SHARED_PORT_init+0x34>)
    1852:	2011      	movs	r0, #17
    1854:	4b03      	ldr	r3, [pc, #12]	; (1864 <I2C_SHARED_PORT_init+0x30>)
    1856:	4798      	blx	r3
}
    1858:	bf00      	nop
    185a:	bd80      	pop	{r7, pc}
    185c:	00001429 	.word	0x00001429
    1860:	00100002 	.word	0x00100002
    1864:	0000145d 	.word	0x0000145d
    1868:	00110002 	.word	0x00110002

0000186c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1870:	2245      	movs	r2, #69	; 0x45
    1872:	2108      	movs	r1, #8
    1874:	4806      	ldr	r0, [pc, #24]	; (1890 <I2C_SHARED_CLOCK_init+0x24>)
    1876:	4b07      	ldr	r3, [pc, #28]	; (1894 <I2C_SHARED_CLOCK_init+0x28>)
    1878:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    187a:	224a      	movs	r2, #74	; 0x4a
    187c:	2103      	movs	r1, #3
    187e:	4804      	ldr	r0, [pc, #16]	; (1890 <I2C_SHARED_CLOCK_init+0x24>)
    1880:	4b04      	ldr	r3, [pc, #16]	; (1894 <I2C_SHARED_CLOCK_init+0x28>)
    1882:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1884:	4804      	ldr	r0, [pc, #16]	; (1898 <I2C_SHARED_CLOCK_init+0x2c>)
    1886:	4b05      	ldr	r3, [pc, #20]	; (189c <I2C_SHARED_CLOCK_init+0x30>)
    1888:	4798      	blx	r3
}
    188a:	bf00      	nop
    188c:	bd80      	pop	{r7, pc}
    188e:	bf00      	nop
    1890:	40001c00 	.word	0x40001c00
    1894:	00000c29 	.word	0x00000c29
    1898:	40000800 	.word	0x40000800
    189c:	00000d2f 	.word	0x00000d2f

000018a0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    18a0:	b580      	push	{r7, lr}
    18a2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    18a4:	4b04      	ldr	r3, [pc, #16]	; (18b8 <I2C_SHARED_init+0x18>)
    18a6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    18a8:	4904      	ldr	r1, [pc, #16]	; (18bc <I2C_SHARED_init+0x1c>)
    18aa:	4805      	ldr	r0, [pc, #20]	; (18c0 <I2C_SHARED_init+0x20>)
    18ac:	4b05      	ldr	r3, [pc, #20]	; (18c4 <I2C_SHARED_init+0x24>)
    18ae:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    18b0:	4b05      	ldr	r3, [pc, #20]	; (18c8 <I2C_SHARED_init+0x28>)
    18b2:	4798      	blx	r3
}
    18b4:	bf00      	nop
    18b6:	bd80      	pop	{r7, pc}
    18b8:	0000186d 	.word	0x0000186d
    18bc:	40003400 	.word	0x40003400
    18c0:	20001460 	.word	0x20001460
    18c4:	00002821 	.word	0x00002821
    18c8:	00001835 	.word	0x00001835

000018cc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    18d0:	2100      	movs	r1, #0
    18d2:	203b      	movs	r0, #59	; 0x3b
    18d4:	4b11      	ldr	r3, [pc, #68]	; (191c <SPI_TEMP_PORT_init+0x50>)
    18d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    18d8:	2102      	movs	r1, #2
    18da:	203b      	movs	r0, #59	; 0x3b
    18dc:	4b10      	ldr	r3, [pc, #64]	; (1920 <SPI_TEMP_PORT_init+0x54>)
    18de:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    18e0:	4910      	ldr	r1, [pc, #64]	; (1924 <SPI_TEMP_PORT_init+0x58>)
    18e2:	203b      	movs	r0, #59	; 0x3b
    18e4:	4b10      	ldr	r3, [pc, #64]	; (1928 <SPI_TEMP_PORT_init+0x5c>)
    18e6:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    18e8:	2100      	movs	r1, #0
    18ea:	203a      	movs	r0, #58	; 0x3a
    18ec:	4b0b      	ldr	r3, [pc, #44]	; (191c <SPI_TEMP_PORT_init+0x50>)
    18ee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    18f0:	2102      	movs	r1, #2
    18f2:	203a      	movs	r0, #58	; 0x3a
    18f4:	4b0a      	ldr	r3, [pc, #40]	; (1920 <SPI_TEMP_PORT_init+0x54>)
    18f6:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    18f8:	490c      	ldr	r1, [pc, #48]	; (192c <SPI_TEMP_PORT_init+0x60>)
    18fa:	203a      	movs	r0, #58	; 0x3a
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <SPI_TEMP_PORT_init+0x5c>)
    18fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1900:	2101      	movs	r1, #1
    1902:	203c      	movs	r0, #60	; 0x3c
    1904:	4b06      	ldr	r3, [pc, #24]	; (1920 <SPI_TEMP_PORT_init+0x54>)
    1906:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1908:	2100      	movs	r1, #0
    190a:	203c      	movs	r0, #60	; 0x3c
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <SPI_TEMP_PORT_init+0x64>)
    190e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1910:	4908      	ldr	r1, [pc, #32]	; (1934 <SPI_TEMP_PORT_init+0x68>)
    1912:	203c      	movs	r0, #60	; 0x3c
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <SPI_TEMP_PORT_init+0x5c>)
    1916:	4798      	blx	r3
}
    1918:	bf00      	nop
    191a:	bd80      	pop	{r7, pc}
    191c:	000014b5 	.word	0x000014b5
    1920:	0000147d 	.word	0x0000147d
    1924:	003b0003 	.word	0x003b0003
    1928:	0000145d 	.word	0x0000145d
    192c:	003a0003 	.word	0x003a0003
    1930:	00001429 	.word	0x00001429
    1934:	003c0003 	.word	0x003c0003

00001938 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1938:	b580      	push	{r7, lr}
    193a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    193c:	2245      	movs	r2, #69	; 0x45
    193e:	2122      	movs	r1, #34	; 0x22
    1940:	4806      	ldr	r0, [pc, #24]	; (195c <SPI_TEMP_CLOCK_init+0x24>)
    1942:	4b07      	ldr	r3, [pc, #28]	; (1960 <SPI_TEMP_CLOCK_init+0x28>)
    1944:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1946:	224a      	movs	r2, #74	; 0x4a
    1948:	2103      	movs	r1, #3
    194a:	4804      	ldr	r0, [pc, #16]	; (195c <SPI_TEMP_CLOCK_init+0x24>)
    194c:	4b04      	ldr	r3, [pc, #16]	; (1960 <SPI_TEMP_CLOCK_init+0x28>)
    194e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1950:	4804      	ldr	r0, [pc, #16]	; (1964 <SPI_TEMP_CLOCK_init+0x2c>)
    1952:	4b05      	ldr	r3, [pc, #20]	; (1968 <SPI_TEMP_CLOCK_init+0x30>)
    1954:	4798      	blx	r3
}
    1956:	bf00      	nop
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	40001c00 	.word	0x40001c00
    1960:	00000c29 	.word	0x00000c29
    1964:	40000800 	.word	0x40000800
    1968:	00000e8f 	.word	0x00000e8f

0000196c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    196c:	b580      	push	{r7, lr}
    196e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1970:	4b05      	ldr	r3, [pc, #20]	; (1988 <SPI_TEMP_init+0x1c>)
    1972:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1974:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1978:	4804      	ldr	r0, [pc, #16]	; (198c <SPI_TEMP_init+0x20>)
    197a:	4b05      	ldr	r3, [pc, #20]	; (1990 <SPI_TEMP_init+0x24>)
    197c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <SPI_TEMP_init+0x28>)
    1980:	4798      	blx	r3
}
    1982:	bf00      	nop
    1984:	bd80      	pop	{r7, pc}
    1986:	bf00      	nop
    1988:	00001939 	.word	0x00001939
    198c:	20001340 	.word	0x20001340
    1990:	00002b0d 	.word	0x00002b0d
    1994:	000018cd 	.word	0x000018cd

00001998 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    199c:	2100      	movs	r1, #0
    199e:	2017      	movs	r0, #23
    19a0:	4b07      	ldr	r3, [pc, #28]	; (19c0 <I2C_EXPANDER_PORT_init+0x28>)
    19a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    19a4:	4907      	ldr	r1, [pc, #28]	; (19c4 <I2C_EXPANDER_PORT_init+0x2c>)
    19a6:	2017      	movs	r0, #23
    19a8:	4b07      	ldr	r3, [pc, #28]	; (19c8 <I2C_EXPANDER_PORT_init+0x30>)
    19aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    19ac:	2100      	movs	r1, #0
    19ae:	2016      	movs	r0, #22
    19b0:	4b03      	ldr	r3, [pc, #12]	; (19c0 <I2C_EXPANDER_PORT_init+0x28>)
    19b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    19b4:	4905      	ldr	r1, [pc, #20]	; (19cc <I2C_EXPANDER_PORT_init+0x34>)
    19b6:	2016      	movs	r0, #22
    19b8:	4b03      	ldr	r3, [pc, #12]	; (19c8 <I2C_EXPANDER_PORT_init+0x30>)
    19ba:	4798      	blx	r3
}
    19bc:	bf00      	nop
    19be:	bd80      	pop	{r7, pc}
    19c0:	00001429 	.word	0x00001429
    19c4:	00170003 	.word	0x00170003
    19c8:	0000145d 	.word	0x0000145d
    19cc:	00160003 	.word	0x00160003

000019d0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19d4:	2244      	movs	r2, #68	; 0x44
    19d6:	2123      	movs	r1, #35	; 0x23
    19d8:	4806      	ldr	r0, [pc, #24]	; (19f4 <I2C_EXPANDER_CLOCK_init+0x24>)
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <I2C_EXPANDER_CLOCK_init+0x28>)
    19dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19de:	224a      	movs	r2, #74	; 0x4a
    19e0:	2103      	movs	r1, #3
    19e2:	4804      	ldr	r0, [pc, #16]	; (19f4 <I2C_EXPANDER_CLOCK_init+0x24>)
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <I2C_EXPANDER_CLOCK_init+0x28>)
    19e6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    19e8:	4804      	ldr	r0, [pc, #16]	; (19fc <I2C_EXPANDER_CLOCK_init+0x2c>)
    19ea:	4b05      	ldr	r3, [pc, #20]	; (1a00 <I2C_EXPANDER_CLOCK_init+0x30>)
    19ec:	4798      	blx	r3
}
    19ee:	bf00      	nop
    19f0:	bd80      	pop	{r7, pc}
    19f2:	bf00      	nop
    19f4:	40001c00 	.word	0x40001c00
    19f8:	00000c29 	.word	0x00000c29
    19fc:	40000800 	.word	0x40000800
    1a00:	00000eaf 	.word	0x00000eaf

00001a04 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <I2C_EXPANDER_init+0x18>)
    1a0a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    1a0c:	4904      	ldr	r1, [pc, #16]	; (1a20 <I2C_EXPANDER_init+0x1c>)
    1a0e:	4805      	ldr	r0, [pc, #20]	; (1a24 <I2C_EXPANDER_init+0x20>)
    1a10:	4b05      	ldr	r3, [pc, #20]	; (1a28 <I2C_EXPANDER_init+0x24>)
    1a12:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1a14:	4b05      	ldr	r3, [pc, #20]	; (1a2c <I2C_EXPANDER_init+0x28>)
    1a16:	4798      	blx	r3
}
    1a18:	bf00      	nop
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	000019d1 	.word	0x000019d1
    1a20:	43000400 	.word	0x43000400
    1a24:	20001440 	.word	0x20001440
    1a28:	00002821 	.word	0x00002821
    1a2c:	00001999 	.word	0x00001999

00001a30 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1a30:	b580      	push	{r7, lr}
    1a32:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1a34:	2100      	movs	r1, #0
    1a36:	2044      	movs	r0, #68	; 0x44
    1a38:	4b11      	ldr	r3, [pc, #68]	; (1a80 <SPI_HI3593_PORT_init+0x50>)
    1a3a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1a3c:	2102      	movs	r1, #2
    1a3e:	2044      	movs	r0, #68	; 0x44
    1a40:	4b10      	ldr	r3, [pc, #64]	; (1a84 <SPI_HI3593_PORT_init+0x54>)
    1a42:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1a44:	4910      	ldr	r1, [pc, #64]	; (1a88 <SPI_HI3593_PORT_init+0x58>)
    1a46:	2044      	movs	r0, #68	; 0x44
    1a48:	4b10      	ldr	r3, [pc, #64]	; (1a8c <SPI_HI3593_PORT_init+0x5c>)
    1a4a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1a4c:	2100      	movs	r1, #0
    1a4e:	2045      	movs	r0, #69	; 0x45
    1a50:	4b0b      	ldr	r3, [pc, #44]	; (1a80 <SPI_HI3593_PORT_init+0x50>)
    1a52:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1a54:	2102      	movs	r1, #2
    1a56:	2045      	movs	r0, #69	; 0x45
    1a58:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <SPI_HI3593_PORT_init+0x54>)
    1a5a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1a5c:	490c      	ldr	r1, [pc, #48]	; (1a90 <SPI_HI3593_PORT_init+0x60>)
    1a5e:	2045      	movs	r0, #69	; 0x45
    1a60:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <SPI_HI3593_PORT_init+0x5c>)
    1a62:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1a64:	2101      	movs	r1, #1
    1a66:	2047      	movs	r0, #71	; 0x47
    1a68:	4b06      	ldr	r3, [pc, #24]	; (1a84 <SPI_HI3593_PORT_init+0x54>)
    1a6a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1a6c:	2100      	movs	r1, #0
    1a6e:	2047      	movs	r0, #71	; 0x47
    1a70:	4b08      	ldr	r3, [pc, #32]	; (1a94 <SPI_HI3593_PORT_init+0x64>)
    1a72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1a74:	4908      	ldr	r1, [pc, #32]	; (1a98 <SPI_HI3593_PORT_init+0x68>)
    1a76:	2047      	movs	r0, #71	; 0x47
    1a78:	4b04      	ldr	r3, [pc, #16]	; (1a8c <SPI_HI3593_PORT_init+0x5c>)
    1a7a:	4798      	blx	r3
}
    1a7c:	bf00      	nop
    1a7e:	bd80      	pop	{r7, pc}
    1a80:	000014b5 	.word	0x000014b5
    1a84:	0000147d 	.word	0x0000147d
    1a88:	00440002 	.word	0x00440002
    1a8c:	0000145d 	.word	0x0000145d
    1a90:	00450002 	.word	0x00450002
    1a94:	00001429 	.word	0x00001429
    1a98:	00470002 	.word	0x00470002

00001a9c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1a9c:	b580      	push	{r7, lr}
    1a9e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aa0:	2242      	movs	r2, #66	; 0x42
    1aa2:	2124      	movs	r1, #36	; 0x24
    1aa4:	4806      	ldr	r0, [pc, #24]	; (1ac0 <SPI_HI3593_CLOCK_init+0x24>)
    1aa6:	4b07      	ldr	r3, [pc, #28]	; (1ac4 <SPI_HI3593_CLOCK_init+0x28>)
    1aa8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1aaa:	224a      	movs	r2, #74	; 0x4a
    1aac:	2103      	movs	r1, #3
    1aae:	4804      	ldr	r0, [pc, #16]	; (1ac0 <SPI_HI3593_CLOCK_init+0x24>)
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <SPI_HI3593_CLOCK_init+0x28>)
    1ab2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1ab4:	4804      	ldr	r0, [pc, #16]	; (1ac8 <SPI_HI3593_CLOCK_init+0x2c>)
    1ab6:	4b05      	ldr	r3, [pc, #20]	; (1acc <SPI_HI3593_CLOCK_init+0x30>)
    1ab8:	4798      	blx	r3
}
    1aba:	bf00      	nop
    1abc:	bd80      	pop	{r7, pc}
    1abe:	bf00      	nop
    1ac0:	40001c00 	.word	0x40001c00
    1ac4:	00000c29 	.word	0x00000c29
    1ac8:	40000800 	.word	0x40000800
    1acc:	00000ecf 	.word	0x00000ecf

00001ad0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1ad4:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <SPI_HI3593_init+0x18>)
    1ad6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1ad8:	4904      	ldr	r1, [pc, #16]	; (1aec <SPI_HI3593_init+0x1c>)
    1ada:	4805      	ldr	r0, [pc, #20]	; (1af0 <SPI_HI3593_init+0x20>)
    1adc:	4b05      	ldr	r3, [pc, #20]	; (1af4 <SPI_HI3593_init+0x24>)
    1ade:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1ae0:	4b05      	ldr	r3, [pc, #20]	; (1af8 <SPI_HI3593_init+0x28>)
    1ae2:	4798      	blx	r3
}
    1ae4:	bf00      	nop
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	00001a9d 	.word	0x00001a9d
    1aec:	43000800 	.word	0x43000800
    1af0:	20001328 	.word	0x20001328
    1af4:	00002b0d 	.word	0x00002b0d
    1af8:	00001a31 	.word	0x00001a31

00001afc <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1b00:	2100      	movs	r1, #0
    1b02:	2068      	movs	r0, #104	; 0x68
    1b04:	4b07      	ldr	r3, [pc, #28]	; (1b24 <I2C_EEPROM_PORT_init+0x28>)
    1b06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1b08:	4907      	ldr	r1, [pc, #28]	; (1b28 <I2C_EEPROM_PORT_init+0x2c>)
    1b0a:	2068      	movs	r0, #104	; 0x68
    1b0c:	4b07      	ldr	r3, [pc, #28]	; (1b2c <I2C_EEPROM_PORT_init+0x30>)
    1b0e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1b10:	2100      	movs	r1, #0
    1b12:	2069      	movs	r0, #105	; 0x69
    1b14:	4b03      	ldr	r3, [pc, #12]	; (1b24 <I2C_EEPROM_PORT_init+0x28>)
    1b16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1b18:	4905      	ldr	r1, [pc, #20]	; (1b30 <I2C_EEPROM_PORT_init+0x34>)
    1b1a:	2069      	movs	r0, #105	; 0x69
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <I2C_EEPROM_PORT_init+0x30>)
    1b1e:	4798      	blx	r3
}
    1b20:	bf00      	nop
    1b22:	bd80      	pop	{r7, pc}
    1b24:	00001429 	.word	0x00001429
    1b28:	00680002 	.word	0x00680002
    1b2c:	0000145d 	.word	0x0000145d
    1b30:	00690002 	.word	0x00690002

00001b34 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b38:	2248      	movs	r2, #72	; 0x48
    1b3a:	2125      	movs	r1, #37	; 0x25
    1b3c:	4806      	ldr	r0, [pc, #24]	; (1b58 <I2C_EEPROM_CLOCK_init+0x24>)
    1b3e:	4b07      	ldr	r3, [pc, #28]	; (1b5c <I2C_EEPROM_CLOCK_init+0x28>)
    1b40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b42:	224a      	movs	r2, #74	; 0x4a
    1b44:	2103      	movs	r1, #3
    1b46:	4804      	ldr	r0, [pc, #16]	; (1b58 <I2C_EEPROM_CLOCK_init+0x24>)
    1b48:	4b04      	ldr	r3, [pc, #16]	; (1b5c <I2C_EEPROM_CLOCK_init+0x28>)
    1b4a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1b4c:	4804      	ldr	r0, [pc, #16]	; (1b60 <I2C_EEPROM_CLOCK_init+0x2c>)
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <I2C_EEPROM_CLOCK_init+0x30>)
    1b50:	4798      	blx	r3
}
    1b52:	bf00      	nop
    1b54:	bd80      	pop	{r7, pc}
    1b56:	bf00      	nop
    1b58:	40001c00 	.word	0x40001c00
    1b5c:	00000c29 	.word	0x00000c29
    1b60:	40000800 	.word	0x40000800
    1b64:	00000eef 	.word	0x00000eef

00001b68 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1b6c:	4b04      	ldr	r3, [pc, #16]	; (1b80 <I2C_EEPROM_init+0x18>)
    1b6e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1b70:	4904      	ldr	r1, [pc, #16]	; (1b84 <I2C_EEPROM_init+0x1c>)
    1b72:	4805      	ldr	r0, [pc, #20]	; (1b88 <I2C_EEPROM_init+0x20>)
    1b74:	4b05      	ldr	r3, [pc, #20]	; (1b8c <I2C_EEPROM_init+0x24>)
    1b76:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1b78:	4b05      	ldr	r3, [pc, #20]	; (1b90 <I2C_EEPROM_init+0x28>)
    1b7a:	4798      	blx	r3
}
    1b7c:	bf00      	nop
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	00001b35 	.word	0x00001b35
    1b84:	43000c00 	.word	0x43000c00
    1b88:	200014a0 	.word	0x200014a0
    1b8c:	000026ed 	.word	0x000026ed
    1b90:	00001afd 	.word	0x00001afd

00001b94 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1b98:	4808      	ldr	r0, [pc, #32]	; (1bbc <TIMER_USB_init+0x28>)
    1b9a:	4b09      	ldr	r3, [pc, #36]	; (1bc0 <TIMER_USB_init+0x2c>)
    1b9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b9e:	2243      	movs	r2, #67	; 0x43
    1ba0:	2109      	movs	r1, #9
    1ba2:	4808      	ldr	r0, [pc, #32]	; (1bc4 <TIMER_USB_init+0x30>)
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <TIMER_USB_init+0x34>)
    1ba6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <TIMER_USB_init+0x38>)
    1baa:	4798      	blx	r3
    1bac:	4603      	mov	r3, r0
    1bae:	461a      	mov	r2, r3
    1bb0:	4907      	ldr	r1, [pc, #28]	; (1bd0 <TIMER_USB_init+0x3c>)
    1bb2:	4808      	ldr	r0, [pc, #32]	; (1bd4 <TIMER_USB_init+0x40>)
    1bb4:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <TIMER_USB_init+0x44>)
    1bb6:	4798      	blx	r3
}
    1bb8:	bf00      	nop
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	40000800 	.word	0x40000800
    1bc0:	00000d4f 	.word	0x00000d4f
    1bc4:	40001c00 	.word	0x40001c00
    1bc8:	00000c29 	.word	0x00000c29
    1bcc:	00008bbd 	.word	0x00008bbd
    1bd0:	40003800 	.word	0x40003800
    1bd4:	20001420 	.word	0x20001420
    1bd8:	00002d9d 	.word	0x00002d9d

00001bdc <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1be0:	4808      	ldr	r0, [pc, #32]	; (1c04 <TIMER_ARINC_init+0x28>)
    1be2:	4b09      	ldr	r3, [pc, #36]	; (1c08 <TIMER_ARINC_init+0x2c>)
    1be4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1be6:	2244      	movs	r2, #68	; 0x44
    1be8:	211a      	movs	r1, #26
    1bea:	4808      	ldr	r0, [pc, #32]	; (1c0c <TIMER_ARINC_init+0x30>)
    1bec:	4b08      	ldr	r3, [pc, #32]	; (1c10 <TIMER_ARINC_init+0x34>)
    1bee:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1bf0:	4b08      	ldr	r3, [pc, #32]	; (1c14 <TIMER_ARINC_init+0x38>)
    1bf2:	4798      	blx	r3
    1bf4:	4603      	mov	r3, r0
    1bf6:	461a      	mov	r2, r3
    1bf8:	4907      	ldr	r1, [pc, #28]	; (1c18 <TIMER_ARINC_init+0x3c>)
    1bfa:	4808      	ldr	r0, [pc, #32]	; (1c1c <TIMER_ARINC_init+0x40>)
    1bfc:	4b08      	ldr	r3, [pc, #32]	; (1c20 <TIMER_ARINC_init+0x44>)
    1bfe:	4798      	blx	r3
}
    1c00:	bf00      	nop
    1c02:	bd80      	pop	{r7, pc}
    1c04:	40000800 	.word	0x40000800
    1c08:	00000e0f 	.word	0x00000e0f
    1c0c:	40001c00 	.word	0x40001c00
    1c10:	00000c29 	.word	0x00000c29
    1c14:	00008bbd 	.word	0x00008bbd
    1c18:	4101a000 	.word	0x4101a000
    1c1c:	20001400 	.word	0x20001400
    1c20:	00002d9d 	.word	0x00002d9d

00001c24 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1c28:	4808      	ldr	r0, [pc, #32]	; (1c4c <TIMER_MAINTENANCE_init+0x28>)
    1c2a:	4b09      	ldr	r3, [pc, #36]	; (1c50 <TIMER_MAINTENANCE_init+0x2c>)
    1c2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c2e:	2246      	movs	r2, #70	; 0x46
    1c30:	211e      	movs	r1, #30
    1c32:	4808      	ldr	r0, [pc, #32]	; (1c54 <TIMER_MAINTENANCE_init+0x30>)
    1c34:	4b08      	ldr	r3, [pc, #32]	; (1c58 <TIMER_MAINTENANCE_init+0x34>)
    1c36:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1c38:	4b08      	ldr	r3, [pc, #32]	; (1c5c <TIMER_MAINTENANCE_init+0x38>)
    1c3a:	4798      	blx	r3
    1c3c:	4603      	mov	r3, r0
    1c3e:	461a      	mov	r2, r3
    1c40:	4907      	ldr	r1, [pc, #28]	; (1c60 <TIMER_MAINTENANCE_init+0x3c>)
    1c42:	4808      	ldr	r0, [pc, #32]	; (1c64 <TIMER_MAINTENANCE_init+0x40>)
    1c44:	4b08      	ldr	r3, [pc, #32]	; (1c68 <TIMER_MAINTENANCE_init+0x44>)
    1c46:	4798      	blx	r3
}
    1c48:	bf00      	nop
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	40000800 	.word	0x40000800
    1c50:	00000e2f 	.word	0x00000e2f
    1c54:	40001c00 	.word	0x40001c00
    1c58:	00000c29 	.word	0x00000c29
    1c5c:	00008bbd 	.word	0x00008bbd
    1c60:	42001400 	.word	0x42001400
    1c64:	20001358 	.word	0x20001358
    1c68:	00002d9d 	.word	0x00002d9d

00001c6c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1c70:	4808      	ldr	r0, [pc, #32]	; (1c94 <TIMER_INTERFACE_init+0x28>)
    1c72:	4b09      	ldr	r3, [pc, #36]	; (1c98 <TIMER_INTERFACE_init+0x2c>)
    1c74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c76:	2246      	movs	r2, #70	; 0x46
    1c78:	211e      	movs	r1, #30
    1c7a:	4808      	ldr	r0, [pc, #32]	; (1c9c <TIMER_INTERFACE_init+0x30>)
    1c7c:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <TIMER_INTERFACE_init+0x34>)
    1c7e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1c80:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <TIMER_INTERFACE_init+0x38>)
    1c82:	4798      	blx	r3
    1c84:	4603      	mov	r3, r0
    1c86:	461a      	mov	r2, r3
    1c88:	4907      	ldr	r1, [pc, #28]	; (1ca8 <TIMER_INTERFACE_init+0x3c>)
    1c8a:	4808      	ldr	r0, [pc, #32]	; (1cac <TIMER_INTERFACE_init+0x40>)
    1c8c:	4b08      	ldr	r3, [pc, #32]	; (1cb0 <TIMER_INTERFACE_init+0x44>)
    1c8e:	4798      	blx	r3
}
    1c90:	bf00      	nop
    1c92:	bd80      	pop	{r7, pc}
    1c94:	40000800 	.word	0x40000800
    1c98:	00000e4f 	.word	0x00000e4f
    1c9c:	40001c00 	.word	0x40001c00
    1ca0:	00000c29 	.word	0x00000c29
    1ca4:	00008bbd 	.word	0x00008bbd
    1ca8:	42001800 	.word	0x42001800
    1cac:	2000139c 	.word	0x2000139c
    1cb0:	00002d9d 	.word	0x00002d9d

00001cb4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    1cb8:	4808      	ldr	r0, [pc, #32]	; (1cdc <TIMER_EVENT_init+0x28>)
    1cba:	4b09      	ldr	r3, [pc, #36]	; (1ce0 <TIMER_EVENT_init+0x2c>)
    1cbc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cbe:	2246      	movs	r2, #70	; 0x46
    1cc0:	2127      	movs	r1, #39	; 0x27
    1cc2:	4808      	ldr	r0, [pc, #32]	; (1ce4 <TIMER_EVENT_init+0x30>)
    1cc4:	4b08      	ldr	r3, [pc, #32]	; (1ce8 <TIMER_EVENT_init+0x34>)
    1cc6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    1cc8:	4b08      	ldr	r3, [pc, #32]	; (1cec <TIMER_EVENT_init+0x38>)
    1cca:	4798      	blx	r3
    1ccc:	4603      	mov	r3, r0
    1cce:	461a      	mov	r2, r3
    1cd0:	4907      	ldr	r1, [pc, #28]	; (1cf0 <TIMER_EVENT_init+0x3c>)
    1cd2:	4808      	ldr	r0, [pc, #32]	; (1cf4 <TIMER_EVENT_init+0x40>)
    1cd4:	4b08      	ldr	r3, [pc, #32]	; (1cf8 <TIMER_EVENT_init+0x44>)
    1cd6:	4798      	blx	r3
}
    1cd8:	bf00      	nop
    1cda:	bd80      	pop	{r7, pc}
    1cdc:	40000800 	.word	0x40000800
    1ce0:	00000f0f 	.word	0x00000f0f
    1ce4:	40001c00 	.word	0x40001c00
    1ce8:	00000c29 	.word	0x00000c29
    1cec:	00008bbd 	.word	0x00008bbd
    1cf0:	43001400 	.word	0x43001400
    1cf4:	2000137c 	.word	0x2000137c
    1cf8:	00002d9d 	.word	0x00002d9d

00001cfc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    1d00:	4902      	ldr	r1, [pc, #8]	; (1d0c <LIVE_PULSE_PORT_init+0x10>)
    1d02:	2021      	movs	r0, #33	; 0x21
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <LIVE_PULSE_PORT_init+0x14>)
    1d06:	4798      	blx	r3
}
    1d08:	bf00      	nop
    1d0a:	bd80      	pop	{r7, pc}
    1d0c:	00210004 	.word	0x00210004
    1d10:	0000145d 	.word	0x0000145d

00001d14 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1d18:	4804      	ldr	r0, [pc, #16]	; (1d2c <LIVE_PULSE_CLOCK_init+0x18>)
    1d1a:	4b05      	ldr	r3, [pc, #20]	; (1d30 <LIVE_PULSE_CLOCK_init+0x1c>)
    1d1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d1e:	2240      	movs	r2, #64	; 0x40
    1d20:	2127      	movs	r1, #39	; 0x27
    1d22:	4804      	ldr	r0, [pc, #16]	; (1d34 <LIVE_PULSE_CLOCK_init+0x20>)
    1d24:	4b04      	ldr	r3, [pc, #16]	; (1d38 <LIVE_PULSE_CLOCK_init+0x24>)
    1d26:	4798      	blx	r3
}
    1d28:	bf00      	nop
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	40000800 	.word	0x40000800
    1d30:	00000f2f 	.word	0x00000f2f
    1d34:	40001c00 	.word	0x40001c00
    1d38:	00000c29 	.word	0x00000c29

00001d3c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <LIVE_PULSE_init+0x20>)
    1d42:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1d44:	4b06      	ldr	r3, [pc, #24]	; (1d60 <LIVE_PULSE_init+0x24>)
    1d46:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1d48:	4b06      	ldr	r3, [pc, #24]	; (1d64 <LIVE_PULSE_init+0x28>)
    1d4a:	4798      	blx	r3
    1d4c:	4603      	mov	r3, r0
    1d4e:	461a      	mov	r2, r3
    1d50:	4905      	ldr	r1, [pc, #20]	; (1d68 <LIVE_PULSE_init+0x2c>)
    1d52:	4806      	ldr	r0, [pc, #24]	; (1d6c <LIVE_PULSE_init+0x30>)
    1d54:	4b06      	ldr	r3, [pc, #24]	; (1d70 <LIVE_PULSE_init+0x34>)
    1d56:	4798      	blx	r3
}
    1d58:	bf00      	nop
    1d5a:	bd80      	pop	{r7, pc}
    1d5c:	00001d15 	.word	0x00001d15
    1d60:	00001cfd 	.word	0x00001cfd
    1d64:	00008bd1 	.word	0x00008bd1
    1d68:	43001800 	.word	0x43001800
    1d6c:	200013bc 	.word	0x200013bc
    1d70:	000028fd 	.word	0x000028fd

00001d74 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1d78:	4804      	ldr	r0, [pc, #16]	; (1d8c <TIMER_HVAC_CLOCK_init+0x18>)
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <TIMER_HVAC_CLOCK_init+0x1c>)
    1d7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d7e:	2244      	movs	r2, #68	; 0x44
    1d80:	2119      	movs	r1, #25
    1d82:	4804      	ldr	r0, [pc, #16]	; (1d94 <TIMER_HVAC_CLOCK_init+0x20>)
    1d84:	4b04      	ldr	r3, [pc, #16]	; (1d98 <TIMER_HVAC_CLOCK_init+0x24>)
    1d86:	4798      	blx	r3
}
    1d88:	bf00      	nop
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	40000800 	.word	0x40000800
    1d90:	00000dcf 	.word	0x00000dcf
    1d94:	40001c00 	.word	0x40001c00
    1d98:	00000c29 	.word	0x00000c29

00001d9c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <TIMER_HVAC_init+0x1c>)
    1da2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    1da4:	4b05      	ldr	r3, [pc, #20]	; (1dbc <TIMER_HVAC_init+0x20>)
    1da6:	4798      	blx	r3
    1da8:	4603      	mov	r3, r0
    1daa:	461a      	mov	r2, r3
    1dac:	4904      	ldr	r1, [pc, #16]	; (1dc0 <TIMER_HVAC_init+0x24>)
    1dae:	4805      	ldr	r0, [pc, #20]	; (1dc4 <TIMER_HVAC_init+0x28>)
    1db0:	4b05      	ldr	r3, [pc, #20]	; (1dc8 <TIMER_HVAC_init+0x2c>)
    1db2:	4798      	blx	r3
}
    1db4:	bf00      	nop
    1db6:	bd80      	pop	{r7, pc}
    1db8:	00001d75 	.word	0x00001d75
    1dbc:	00007f7d 	.word	0x00007f7d
    1dc0:	41016000 	.word	0x41016000
    1dc4:	20001480 	.word	0x20001480
    1dc8:	00002d9d 	.word	0x00002d9d

00001dcc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    1dd0:	4804      	ldr	r0, [pc, #16]	; (1de4 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    1dd2:	4b05      	ldr	r3, [pc, #20]	; (1de8 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    1dd4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dd6:	2244      	movs	r2, #68	; 0x44
    1dd8:	2119      	movs	r1, #25
    1dda:	4804      	ldr	r0, [pc, #16]	; (1dec <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    1ddc:	4b04      	ldr	r3, [pc, #16]	; (1df0 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    1dde:	4798      	blx	r3
}
    1de0:	bf00      	nop
    1de2:	bd80      	pop	{r7, pc}
    1de4:	40000800 	.word	0x40000800
    1de8:	00000def 	.word	0x00000def
    1dec:	40001c00 	.word	0x40001c00
    1df0:	00000c29 	.word	0x00000c29

00001df4 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1df4:	b580      	push	{r7, lr}
    1df6:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1df8:	4b05      	ldr	r3, [pc, #20]	; (1e10 <TIMER_TEMPERATURES_init+0x1c>)
    1dfa:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <TIMER_TEMPERATURES_init+0x20>)
    1dfe:	4798      	blx	r3
    1e00:	4603      	mov	r3, r0
    1e02:	461a      	mov	r2, r3
    1e04:	4904      	ldr	r1, [pc, #16]	; (1e18 <TIMER_TEMPERATURES_init+0x24>)
    1e06:	4805      	ldr	r0, [pc, #20]	; (1e1c <TIMER_TEMPERATURES_init+0x28>)
    1e08:	4b05      	ldr	r3, [pc, #20]	; (1e20 <TIMER_TEMPERATURES_init+0x2c>)
    1e0a:	4798      	blx	r3
}
    1e0c:	bf00      	nop
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	00001dcd 	.word	0x00001dcd
    1e14:	00007f7d 	.word	0x00007f7d
    1e18:	41018000 	.word	0x41018000
    1e1c:	20001308 	.word	0x20001308
    1e20:	00002d9d 	.word	0x00002d9d

00001e24 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1e28:	2102      	movs	r1, #2
    1e2a:	2018      	movs	r0, #24
    1e2c:	4b0f      	ldr	r3, [pc, #60]	; (1e6c <CDCUSB_PORT_init+0x48>)
    1e2e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1e30:	2100      	movs	r1, #0
    1e32:	2018      	movs	r0, #24
    1e34:	4b0e      	ldr	r3, [pc, #56]	; (1e70 <CDCUSB_PORT_init+0x4c>)
    1e36:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1e38:	2100      	movs	r1, #0
    1e3a:	2018      	movs	r0, #24
    1e3c:	4b0d      	ldr	r3, [pc, #52]	; (1e74 <CDCUSB_PORT_init+0x50>)
    1e3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1e40:	490d      	ldr	r1, [pc, #52]	; (1e78 <CDCUSB_PORT_init+0x54>)
    1e42:	2018      	movs	r0, #24
    1e44:	4b0d      	ldr	r3, [pc, #52]	; (1e7c <CDCUSB_PORT_init+0x58>)
    1e46:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1e48:	2102      	movs	r1, #2
    1e4a:	2019      	movs	r0, #25
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <CDCUSB_PORT_init+0x48>)
    1e4e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1e50:	2100      	movs	r1, #0
    1e52:	2019      	movs	r0, #25
    1e54:	4b06      	ldr	r3, [pc, #24]	; (1e70 <CDCUSB_PORT_init+0x4c>)
    1e56:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1e58:	2100      	movs	r1, #0
    1e5a:	2019      	movs	r0, #25
    1e5c:	4b05      	ldr	r3, [pc, #20]	; (1e74 <CDCUSB_PORT_init+0x50>)
    1e5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1e60:	4907      	ldr	r1, [pc, #28]	; (1e80 <CDCUSB_PORT_init+0x5c>)
    1e62:	2019      	movs	r0, #25
    1e64:	4b05      	ldr	r3, [pc, #20]	; (1e7c <CDCUSB_PORT_init+0x58>)
    1e66:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1e68:	bf00      	nop
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	0000147d 	.word	0x0000147d
    1e70:	000014b5 	.word	0x000014b5
    1e74:	00001429 	.word	0x00001429
    1e78:	00180007 	.word	0x00180007
    1e7c:	0000145d 	.word	0x0000145d
    1e80:	00190007 	.word	0x00190007

00001e84 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1e88:	2242      	movs	r2, #66	; 0x42
    1e8a:	210a      	movs	r1, #10
    1e8c:	4805      	ldr	r0, [pc, #20]	; (1ea4 <CDCUSB_CLOCK_init+0x20>)
    1e8e:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <CDCUSB_CLOCK_init+0x24>)
    1e90:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1e92:	4806      	ldr	r0, [pc, #24]	; (1eac <CDCUSB_CLOCK_init+0x28>)
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <CDCUSB_CLOCK_init+0x2c>)
    1e96:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1e98:	4804      	ldr	r0, [pc, #16]	; (1eac <CDCUSB_CLOCK_init+0x28>)
    1e9a:	4b06      	ldr	r3, [pc, #24]	; (1eb4 <CDCUSB_CLOCK_init+0x30>)
    1e9c:	4798      	blx	r3
}
    1e9e:	bf00      	nop
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	bf00      	nop
    1ea4:	40001c00 	.word	0x40001c00
    1ea8:	00000c29 	.word	0x00000c29
    1eac:	40000800 	.word	0x40000800
    1eb0:	00000c4f 	.word	0x00000c4f
    1eb4:	00000d6f 	.word	0x00000d6f

00001eb8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1ebc:	4b03      	ldr	r3, [pc, #12]	; (1ecc <CDCUSB_init+0x14>)
    1ebe:	4798      	blx	r3
	usb_d_init();
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <CDCUSB_init+0x18>)
    1ec2:	4798      	blx	r3
	CDCUSB_PORT_init();
    1ec4:	4b03      	ldr	r3, [pc, #12]	; (1ed4 <CDCUSB_init+0x1c>)
    1ec6:	4798      	blx	r3
}
    1ec8:	bf00      	nop
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	00001e85 	.word	0x00001e85
    1ed0:	000035f9 	.word	0x000035f9
    1ed4:	00001e25 	.word	0x00001e25

00001ed8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1edc:	4802      	ldr	r0, [pc, #8]	; (1ee8 <WATCHDOG_CLOCK_init+0x10>)
    1ede:	4b03      	ldr	r3, [pc, #12]	; (1eec <WATCHDOG_CLOCK_init+0x14>)
    1ee0:	4798      	blx	r3
}
    1ee2:	bf00      	nop
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	bf00      	nop
    1ee8:	40000800 	.word	0x40000800
    1eec:	00000ccf 	.word	0x00000ccf

00001ef0 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <WATCHDOG_init+0x14>)
    1ef6:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1ef8:	4903      	ldr	r1, [pc, #12]	; (1f08 <WATCHDOG_init+0x18>)
    1efa:	4804      	ldr	r0, [pc, #16]	; (1f0c <WATCHDOG_init+0x1c>)
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <WATCHDOG_init+0x20>)
    1efe:	4798      	blx	r3
}
    1f00:	bf00      	nop
    1f02:	bd80      	pop	{r7, pc}
    1f04:	00001ed9 	.word	0x00001ed9
    1f08:	40002000 	.word	0x40002000
    1f0c:	20001500 	.word	0x20001500
    1f10:	000014fd 	.word	0x000014fd

00001f14 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1f18:	4904      	ldr	r1, [pc, #16]	; (1f2c <CAN_CCU_PORT_init+0x18>)
    1f1a:	202d      	movs	r0, #45	; 0x2d
    1f1c:	4b04      	ldr	r3, [pc, #16]	; (1f30 <CAN_CCU_PORT_init+0x1c>)
    1f1e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1f20:	4904      	ldr	r1, [pc, #16]	; (1f34 <CAN_CCU_PORT_init+0x20>)
    1f22:	202c      	movs	r0, #44	; 0x2c
    1f24:	4b02      	ldr	r3, [pc, #8]	; (1f30 <CAN_CCU_PORT_init+0x1c>)
    1f26:	4798      	blx	r3
}
    1f28:	bf00      	nop
    1f2a:	bd80      	pop	{r7, pc}
    1f2c:	002d0007 	.word	0x002d0007
    1f30:	0000145d 	.word	0x0000145d
    1f34:	002c0007 	.word	0x002c0007

00001f38 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1f3c:	4807      	ldr	r0, [pc, #28]	; (1f5c <CAN_CCU_init+0x24>)
    1f3e:	4b08      	ldr	r3, [pc, #32]	; (1f60 <CAN_CCU_init+0x28>)
    1f40:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f42:	2243      	movs	r2, #67	; 0x43
    1f44:	211c      	movs	r1, #28
    1f46:	4807      	ldr	r0, [pc, #28]	; (1f64 <CAN_CCU_init+0x2c>)
    1f48:	4b07      	ldr	r3, [pc, #28]	; (1f68 <CAN_CCU_init+0x30>)
    1f4a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1f4c:	4907      	ldr	r1, [pc, #28]	; (1f6c <CAN_CCU_init+0x34>)
    1f4e:	4808      	ldr	r0, [pc, #32]	; (1f70 <CAN_CCU_init+0x38>)
    1f50:	4b08      	ldr	r3, [pc, #32]	; (1f74 <CAN_CCU_init+0x3c>)
    1f52:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1f54:	4b08      	ldr	r3, [pc, #32]	; (1f78 <CAN_CCU_init+0x40>)
    1f56:	4798      	blx	r3
}
    1f58:	bf00      	nop
    1f5a:	bd80      	pop	{r7, pc}
    1f5c:	40000800 	.word	0x40000800
    1f60:	00000c8f 	.word	0x00000c8f
    1f64:	40001c00 	.word	0x40001c00
    1f68:	00000c29 	.word	0x00000c29
    1f6c:	42000400 	.word	0x42000400
    1f70:	200013d8 	.word	0x200013d8
    1f74:	000021d5 	.word	0x000021d5
    1f78:	00001f15 	.word	0x00001f15

00001f7c <system_init>:

void system_init(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	af00      	add	r7, sp, #0
	init_mcu();
    1f80:	4b5e      	ldr	r3, [pc, #376]	; (20fc <system_init+0x180>)
    1f82:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    1f84:	2100      	movs	r1, #0
    1f86:	2007      	movs	r0, #7
    1f88:	4b5d      	ldr	r3, [pc, #372]	; (2100 <system_init+0x184>)
    1f8a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    1f8c:	2102      	movs	r1, #2
    1f8e:	2007      	movs	r0, #7
    1f90:	4b5c      	ldr	r3, [pc, #368]	; (2104 <system_init+0x188>)
    1f92:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    1f94:	f04f 31ff 	mov.w	r1, #4294967295
    1f98:	2007      	movs	r0, #7
    1f9a:	4b5b      	ldr	r3, [pc, #364]	; (2108 <system_init+0x18c>)
    1f9c:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1f9e:	2101      	movs	r1, #1
    1fa0:	200f      	movs	r0, #15
    1fa2:	4b57      	ldr	r3, [pc, #348]	; (2100 <system_init+0x184>)
    1fa4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1fa6:	2102      	movs	r1, #2
    1fa8:	200f      	movs	r0, #15
    1faa:	4b56      	ldr	r3, [pc, #344]	; (2104 <system_init+0x188>)
    1fac:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1fae:	f04f 31ff 	mov.w	r1, #4294967295
    1fb2:	200f      	movs	r0, #15
    1fb4:	4b54      	ldr	r3, [pc, #336]	; (2108 <system_init+0x18c>)
    1fb6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    1fb8:	2101      	movs	r1, #1
    1fba:	2013      	movs	r0, #19
    1fbc:	4b50      	ldr	r3, [pc, #320]	; (2100 <system_init+0x184>)
    1fbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1fc0:	2102      	movs	r1, #2
    1fc2:	2013      	movs	r0, #19
    1fc4:	4b4f      	ldr	r3, [pc, #316]	; (2104 <system_init+0x188>)
    1fc6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1fc8:	f04f 31ff 	mov.w	r1, #4294967295
    1fcc:	2013      	movs	r0, #19
    1fce:	4b4e      	ldr	r3, [pc, #312]	; (2108 <system_init+0x18c>)
    1fd0:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1fd2:	2101      	movs	r1, #1
    1fd4:	201b      	movs	r0, #27
    1fd6:	4b4a      	ldr	r3, [pc, #296]	; (2100 <system_init+0x184>)
    1fd8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    1fda:	2102      	movs	r1, #2
    1fdc:	201b      	movs	r0, #27
    1fde:	4b49      	ldr	r3, [pc, #292]	; (2104 <system_init+0x188>)
    1fe0:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1fe2:	f04f 31ff 	mov.w	r1, #4294967295
    1fe6:	201b      	movs	r0, #27
    1fe8:	4b47      	ldr	r3, [pc, #284]	; (2108 <system_init+0x18c>)
    1fea:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1fec:	2101      	movs	r1, #1
    1fee:	2027      	movs	r0, #39	; 0x27
    1ff0:	4b44      	ldr	r3, [pc, #272]	; (2104 <system_init+0x188>)
    1ff2:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1ff4:	2102      	movs	r1, #2
    1ff6:	2027      	movs	r0, #39	; 0x27
    1ff8:	4b44      	ldr	r3, [pc, #272]	; (210c <system_init+0x190>)
    1ffa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1ffc:	f04f 31ff 	mov.w	r1, #4294967295
    2000:	2027      	movs	r0, #39	; 0x27
    2002:	4b41      	ldr	r3, [pc, #260]	; (2108 <system_init+0x18c>)
    2004:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2006:	2101      	movs	r1, #1
    2008:	203d      	movs	r0, #61	; 0x3d
    200a:	4b3d      	ldr	r3, [pc, #244]	; (2100 <system_init+0x184>)
    200c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    200e:	2102      	movs	r1, #2
    2010:	203d      	movs	r0, #61	; 0x3d
    2012:	4b3c      	ldr	r3, [pc, #240]	; (2104 <system_init+0x188>)
    2014:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2016:	f04f 31ff 	mov.w	r1, #4294967295
    201a:	203d      	movs	r0, #61	; 0x3d
    201c:	4b3a      	ldr	r3, [pc, #232]	; (2108 <system_init+0x18c>)
    201e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2020:	2101      	movs	r1, #1
    2022:	203f      	movs	r0, #63	; 0x3f
    2024:	4b37      	ldr	r3, [pc, #220]	; (2104 <system_init+0x188>)
    2026:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2028:	2101      	movs	r1, #1
    202a:	203f      	movs	r0, #63	; 0x3f
    202c:	4b37      	ldr	r3, [pc, #220]	; (210c <system_init+0x190>)
    202e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2030:	f04f 31ff 	mov.w	r1, #4294967295
    2034:	203f      	movs	r0, #63	; 0x3f
    2036:	4b34      	ldr	r3, [pc, #208]	; (2108 <system_init+0x18c>)
    2038:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    203a:	2100      	movs	r1, #0
    203c:	204d      	movs	r0, #77	; 0x4d
    203e:	4b30      	ldr	r3, [pc, #192]	; (2100 <system_init+0x184>)
    2040:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2042:	2102      	movs	r1, #2
    2044:	204d      	movs	r0, #77	; 0x4d
    2046:	4b2f      	ldr	r3, [pc, #188]	; (2104 <system_init+0x188>)
    2048:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    204a:	f04f 31ff 	mov.w	r1, #4294967295
    204e:	204d      	movs	r0, #77	; 0x4d
    2050:	4b2d      	ldr	r3, [pc, #180]	; (2108 <system_init+0x18c>)
    2052:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2054:	2101      	movs	r1, #1
    2056:	204e      	movs	r0, #78	; 0x4e
    2058:	4b29      	ldr	r3, [pc, #164]	; (2100 <system_init+0x184>)
    205a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    205c:	2102      	movs	r1, #2
    205e:	204e      	movs	r0, #78	; 0x4e
    2060:	4b28      	ldr	r3, [pc, #160]	; (2104 <system_init+0x188>)
    2062:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2064:	f04f 31ff 	mov.w	r1, #4294967295
    2068:	204e      	movs	r0, #78	; 0x4e
    206a:	4b27      	ldr	r3, [pc, #156]	; (2108 <system_init+0x18c>)
    206c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    206e:	2100      	movs	r1, #0
    2070:	204f      	movs	r0, #79	; 0x4f
    2072:	4b23      	ldr	r3, [pc, #140]	; (2100 <system_init+0x184>)
    2074:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2076:	2102      	movs	r1, #2
    2078:	204f      	movs	r0, #79	; 0x4f
    207a:	4b22      	ldr	r3, [pc, #136]	; (2104 <system_init+0x188>)
    207c:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    207e:	f04f 31ff 	mov.w	r1, #4294967295
    2082:	204f      	movs	r0, #79	; 0x4f
    2084:	4b20      	ldr	r3, [pc, #128]	; (2108 <system_init+0x18c>)
    2086:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2088:	2100      	movs	r1, #0
    208a:	2052      	movs	r0, #82	; 0x52
    208c:	4b1c      	ldr	r3, [pc, #112]	; (2100 <system_init+0x184>)
    208e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2090:	2102      	movs	r1, #2
    2092:	2052      	movs	r0, #82	; 0x52
    2094:	4b1b      	ldr	r3, [pc, #108]	; (2104 <system_init+0x188>)
    2096:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2098:	f04f 31ff 	mov.w	r1, #4294967295
    209c:	2052      	movs	r0, #82	; 0x52
    209e:	4b1a      	ldr	r3, [pc, #104]	; (2108 <system_init+0x18c>)
    20a0:	4798      	blx	r3

	CRC_CALC_init();
    20a2:	4b1b      	ldr	r3, [pc, #108]	; (2110 <system_init+0x194>)
    20a4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    20a6:	4b1b      	ldr	r3, [pc, #108]	; (2114 <system_init+0x198>)
    20a8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    20aa:	4b1b      	ldr	r3, [pc, #108]	; (2118 <system_init+0x19c>)
    20ac:	4798      	blx	r3

	QSPI_N25Q256_init();
    20ae:	4b1b      	ldr	r3, [pc, #108]	; (211c <system_init+0x1a0>)
    20b0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    20b2:	4b1b      	ldr	r3, [pc, #108]	; (2120 <system_init+0x1a4>)
    20b4:	4798      	blx	r3

	I2C_SHARED_init();
    20b6:	4b1b      	ldr	r3, [pc, #108]	; (2124 <system_init+0x1a8>)
    20b8:	4798      	blx	r3

	SPI_TEMP_init();
    20ba:	4b1b      	ldr	r3, [pc, #108]	; (2128 <system_init+0x1ac>)
    20bc:	4798      	blx	r3

	I2C_EXPANDER_init();
    20be:	4b1b      	ldr	r3, [pc, #108]	; (212c <system_init+0x1b0>)
    20c0:	4798      	blx	r3

	SPI_HI3593_init();
    20c2:	4b1b      	ldr	r3, [pc, #108]	; (2130 <system_init+0x1b4>)
    20c4:	4798      	blx	r3

	I2C_EEPROM_init();
    20c6:	4b1b      	ldr	r3, [pc, #108]	; (2134 <system_init+0x1b8>)
    20c8:	4798      	blx	r3

	TIMER_USB_init();
    20ca:	4b1b      	ldr	r3, [pc, #108]	; (2138 <system_init+0x1bc>)
    20cc:	4798      	blx	r3
	TIMER_ARINC_init();
    20ce:	4b1b      	ldr	r3, [pc, #108]	; (213c <system_init+0x1c0>)
    20d0:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    20d2:	4b1b      	ldr	r3, [pc, #108]	; (2140 <system_init+0x1c4>)
    20d4:	4798      	blx	r3
	TIMER_INTERFACE_init();
    20d6:	4b1b      	ldr	r3, [pc, #108]	; (2144 <system_init+0x1c8>)
    20d8:	4798      	blx	r3
	TIMER_EVENT_init();
    20da:	4b1b      	ldr	r3, [pc, #108]	; (2148 <system_init+0x1cc>)
    20dc:	4798      	blx	r3
	LIVE_PULSE_init();
    20de:	4b1b      	ldr	r3, [pc, #108]	; (214c <system_init+0x1d0>)
    20e0:	4798      	blx	r3

	TIMER_HVAC_init();
    20e2:	4b1b      	ldr	r3, [pc, #108]	; (2150 <system_init+0x1d4>)
    20e4:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    20e6:	4b1b      	ldr	r3, [pc, #108]	; (2154 <system_init+0x1d8>)
    20e8:	4798      	blx	r3

	CDCUSB_init();
    20ea:	4b1b      	ldr	r3, [pc, #108]	; (2158 <system_init+0x1dc>)
    20ec:	4798      	blx	r3

	WATCHDOG_init();
    20ee:	4b1b      	ldr	r3, [pc, #108]	; (215c <system_init+0x1e0>)
    20f0:	4798      	blx	r3
	CAN_CCU_init();
    20f2:	4b1b      	ldr	r3, [pc, #108]	; (2160 <system_init+0x1e4>)
    20f4:	4798      	blx	r3
}
    20f6:	bf00      	nop
    20f8:	bd80      	pop	{r7, pc}
    20fa:	bf00      	nop
    20fc:	000014ed 	.word	0x000014ed
    2100:	000014b5 	.word	0x000014b5
    2104:	0000147d 	.word	0x0000147d
    2108:	0000145d 	.word	0x0000145d
    210c:	00001429 	.word	0x00001429
    2110:	0000154d 	.word	0x0000154d
    2114:	00001579 	.word	0x00001579
    2118:	00001685 	.word	0x00001685
    211c:	000017cd 	.word	0x000017cd
    2120:	00001811 	.word	0x00001811
    2124:	000018a1 	.word	0x000018a1
    2128:	0000196d 	.word	0x0000196d
    212c:	00001a05 	.word	0x00001a05
    2130:	00001ad1 	.word	0x00001ad1
    2134:	00001b69 	.word	0x00001b69
    2138:	00001b95 	.word	0x00001b95
    213c:	00001bdd 	.word	0x00001bdd
    2140:	00001c25 	.word	0x00001c25
    2144:	00001c6d 	.word	0x00001c6d
    2148:	00001cb5 	.word	0x00001cb5
    214c:	00001d3d 	.word	0x00001d3d
    2150:	00001d9d 	.word	0x00001d9d
    2154:	00001df5 	.word	0x00001df5
    2158:	00001eb9 	.word	0x00001eb9
    215c:	00001ef1 	.word	0x00001ef1
    2160:	00001f39 	.word	0x00001f39

00002164 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2164:	b580      	push	{r7, lr}
    2166:	b084      	sub	sp, #16
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
    216c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    216e:	2300      	movs	r3, #0
    2170:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2b00      	cmp	r3, #0
    2176:	bf14      	ite	ne
    2178:	2301      	movne	r3, #1
    217a:	2300      	moveq	r3, #0
    217c:	b2db      	uxtb	r3, r3
    217e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2182:	4911      	ldr	r1, [pc, #68]	; (21c8 <calendar_init+0x64>)
    2184:	4618      	mov	r0, r3
    2186:	4b11      	ldr	r3, [pc, #68]	; (21cc <calendar_init+0x68>)
    2188:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	681a      	ldr	r2, [r3, #0]
    218e:	683b      	ldr	r3, [r7, #0]
    2190:	429a      	cmp	r2, r3
    2192:	d101      	bne.n	2198 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2194:	2300      	movs	r3, #0
    2196:	e013      	b.n	21c0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	681b      	ldr	r3, [r3, #0]
    219c:	2b00      	cmp	r3, #0
    219e:	d002      	beq.n	21a6 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    21a0:	f06f 0311 	mvn.w	r3, #17
    21a4:	e00c      	b.n	21c0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	683a      	ldr	r2, [r7, #0]
    21aa:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	4618      	mov	r0, r3
    21b0:	4b07      	ldr	r3, [pc, #28]	; (21d0 <calendar_init+0x6c>)
    21b2:	4798      	blx	r3
    21b4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    21bc:	619a      	str	r2, [r3, #24]

	return ret;
    21be:	68fb      	ldr	r3, [r7, #12]
}
    21c0:	4618      	mov	r0, r3
    21c2:	3710      	adds	r7, #16
    21c4:	46bd      	mov	sp, r7
    21c6:	bd80      	pop	{r7, pc}
    21c8:	0000ff34 	.word	0x0000ff34
    21cc:	00003ba1 	.word	0x00003ba1
    21d0:	00005f29 	.word	0x00005f29

000021d4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    21d4:	b580      	push	{r7, lr}
    21d6:	b084      	sub	sp, #16
    21d8:	af00      	add	r7, sp, #0
    21da:	6078      	str	r0, [r7, #4]
    21dc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d004      	beq.n	21ee <can_async_init+0x1a>
    21e4:	683b      	ldr	r3, [r7, #0]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d001      	beq.n	21ee <can_async_init+0x1a>
    21ea:	2301      	movs	r3, #1
    21ec:	e000      	b.n	21f0 <can_async_init+0x1c>
    21ee:	2300      	movs	r3, #0
    21f0:	f003 0301 	and.w	r3, r3, #1
    21f4:	b2db      	uxtb	r3, r3
    21f6:	2241      	movs	r2, #65	; 0x41
    21f8:	490e      	ldr	r1, [pc, #56]	; (2234 <can_async_init+0x60>)
    21fa:	4618      	mov	r0, r3
    21fc:	4b0e      	ldr	r3, [pc, #56]	; (2238 <can_async_init+0x64>)
    21fe:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	6839      	ldr	r1, [r7, #0]
    2204:	4618      	mov	r0, r3
    2206:	4b0d      	ldr	r3, [pc, #52]	; (223c <can_async_init+0x68>)
    2208:	4798      	blx	r3
    220a:	60f8      	str	r0, [r7, #12]
	if (rc) {
    220c:	68fb      	ldr	r3, [r7, #12]
    220e:	2b00      	cmp	r3, #0
    2210:	d001      	beq.n	2216 <can_async_init+0x42>
		return rc;
    2212:	68fb      	ldr	r3, [r7, #12]
    2214:	e009      	b.n	222a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    2216:	687b      	ldr	r3, [r7, #4]
    2218:	4a09      	ldr	r2, [pc, #36]	; (2240 <can_async_init+0x6c>)
    221a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    221c:	687b      	ldr	r3, [r7, #4]
    221e:	4a09      	ldr	r2, [pc, #36]	; (2244 <can_async_init+0x70>)
    2220:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	4a08      	ldr	r2, [pc, #32]	; (2248 <can_async_init+0x74>)
    2226:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2228:	2300      	movs	r3, #0
}
    222a:	4618      	mov	r0, r3
    222c:	3710      	adds	r7, #16
    222e:	46bd      	mov	sp, r7
    2230:	bd80      	pop	{r7, pc}
    2232:	bf00      	nop
    2234:	0000ff50 	.word	0x0000ff50
    2238:	00003ba1 	.word	0x00003ba1
    223c:	000040fd 	.word	0x000040fd
    2240:	0000224d 	.word	0x0000224d
    2244:	00002271 	.word	0x00002271
    2248:	00002295 	.word	0x00002295

0000224c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    224c:	b580      	push	{r7, lr}
    224e:	b084      	sub	sp, #16
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2254:	687b      	ldr	r3, [r7, #4]
    2256:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2258:	68fb      	ldr	r3, [r7, #12]
    225a:	69db      	ldr	r3, [r3, #28]
    225c:	2b00      	cmp	r3, #0
    225e:	d003      	beq.n	2268 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2260:	68fb      	ldr	r3, [r7, #12]
    2262:	69db      	ldr	r3, [r3, #28]
    2264:	68f8      	ldr	r0, [r7, #12]
    2266:	4798      	blx	r3
	}
}
    2268:	bf00      	nop
    226a:	3710      	adds	r7, #16
    226c:	46bd      	mov	sp, r7
    226e:	bd80      	pop	{r7, pc}

00002270 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2270:	b580      	push	{r7, lr}
    2272:	b084      	sub	sp, #16
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    227c:	68fb      	ldr	r3, [r7, #12]
    227e:	6a1b      	ldr	r3, [r3, #32]
    2280:	2b00      	cmp	r3, #0
    2282:	d003      	beq.n	228c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2284:	68fb      	ldr	r3, [r7, #12]
    2286:	6a1b      	ldr	r3, [r3, #32]
    2288:	68f8      	ldr	r0, [r7, #12]
    228a:	4798      	blx	r3
	}
}
    228c:	bf00      	nop
    228e:	3710      	adds	r7, #16
    2290:	46bd      	mov	sp, r7
    2292:	bd80      	pop	{r7, pc}

00002294 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2294:	b580      	push	{r7, lr}
    2296:	b084      	sub	sp, #16
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
    229c:	460b      	mov	r3, r1
    229e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22a8:	2b00      	cmp	r3, #0
    22aa:	d005      	beq.n	22b8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    22ac:	68fb      	ldr	r3, [r7, #12]
    22ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22b0:	78fa      	ldrb	r2, [r7, #3]
    22b2:	4611      	mov	r1, r2
    22b4:	68f8      	ldr	r0, [r7, #12]
    22b6:	4798      	blx	r3
	}
}
    22b8:	bf00      	nop
    22ba:	3710      	adds	r7, #16
    22bc:	46bd      	mov	sp, r7
    22be:	bd80      	pop	{r7, pc}

000022c0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b082      	sub	sp, #8
    22c4:	af00      	add	r7, sp, #0
    22c6:	6078      	str	r0, [r7, #4]
    22c8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d004      	beq.n	22da <crc_sync_init+0x1a>
    22d0:	683b      	ldr	r3, [r7, #0]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d001      	beq.n	22da <crc_sync_init+0x1a>
    22d6:	2301      	movs	r3, #1
    22d8:	e000      	b.n	22dc <crc_sync_init+0x1c>
    22da:	2300      	movs	r3, #0
    22dc:	f003 0301 	and.w	r3, r3, #1
    22e0:	b2db      	uxtb	r3, r3
    22e2:	222b      	movs	r2, #43	; 0x2b
    22e4:	4906      	ldr	r1, [pc, #24]	; (2300 <crc_sync_init+0x40>)
    22e6:	4618      	mov	r0, r3
    22e8:	4b06      	ldr	r3, [pc, #24]	; (2304 <crc_sync_init+0x44>)
    22ea:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	6839      	ldr	r1, [r7, #0]
    22f0:	4618      	mov	r0, r3
    22f2:	4b05      	ldr	r3, [pc, #20]	; (2308 <crc_sync_init+0x48>)
    22f4:	4798      	blx	r3
    22f6:	4603      	mov	r3, r0
}
    22f8:	4618      	mov	r0, r3
    22fa:	3708      	adds	r7, #8
    22fc:	46bd      	mov	sp, r7
    22fe:	bd80      	pop	{r7, pc}
    2300:	0000ff6c 	.word	0x0000ff6c
    2304:	00003ba1 	.word	0x00003ba1
    2308:	00004801 	.word	0x00004801

0000230c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    230c:	b590      	push	{r4, r7, lr}
    230e:	b083      	sub	sp, #12
    2310:	af00      	add	r7, sp, #0
    2312:	4603      	mov	r3, r0
    2314:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2316:	4b07      	ldr	r3, [pc, #28]	; (2334 <delay_us+0x28>)
    2318:	681c      	ldr	r4, [r3, #0]
    231a:	88fb      	ldrh	r3, [r7, #6]
    231c:	4618      	mov	r0, r3
    231e:	4b06      	ldr	r3, [pc, #24]	; (2338 <delay_us+0x2c>)
    2320:	4798      	blx	r3
    2322:	4603      	mov	r3, r0
    2324:	4619      	mov	r1, r3
    2326:	4620      	mov	r0, r4
    2328:	4b04      	ldr	r3, [pc, #16]	; (233c <delay_us+0x30>)
    232a:	4798      	blx	r3
}
    232c:	bf00      	nop
    232e:	370c      	adds	r7, #12
    2330:	46bd      	mov	sp, r7
    2332:	bd90      	pop	{r4, r7, pc}
    2334:	200008e8 	.word	0x200008e8
    2338:	00004555 	.word	0x00004555
    233c:	000046e9 	.word	0x000046e9

00002340 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2340:	b590      	push	{r4, r7, lr}
    2342:	b083      	sub	sp, #12
    2344:	af00      	add	r7, sp, #0
    2346:	4603      	mov	r3, r0
    2348:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    234a:	4b07      	ldr	r3, [pc, #28]	; (2368 <delay_ms+0x28>)
    234c:	681c      	ldr	r4, [r3, #0]
    234e:	88fb      	ldrh	r3, [r7, #6]
    2350:	4618      	mov	r0, r3
    2352:	4b06      	ldr	r3, [pc, #24]	; (236c <delay_ms+0x2c>)
    2354:	4798      	blx	r3
    2356:	4603      	mov	r3, r0
    2358:	4619      	mov	r1, r3
    235a:	4620      	mov	r0, r4
    235c:	4b04      	ldr	r3, [pc, #16]	; (2370 <delay_ms+0x30>)
    235e:	4798      	blx	r3
}
    2360:	bf00      	nop
    2362:	370c      	adds	r7, #12
    2364:	46bd      	mov	sp, r7
    2366:	bd90      	pop	{r4, r7, pc}
    2368:	200008e8 	.word	0x200008e8
    236c:	000046c1 	.word	0x000046c1
    2370:	000046e9 	.word	0x000046e9

00002374 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2374:	b580      	push	{r7, lr}
    2376:	af00      	add	r7, sp, #0
	return _event_system_init();
    2378:	4b02      	ldr	r3, [pc, #8]	; (2384 <event_system_init+0x10>)
    237a:	4798      	blx	r3
    237c:	4603      	mov	r3, r0
}
    237e:	4618      	mov	r0, r3
    2380:	bd80      	pop	{r7, pc}
    2382:	bf00      	nop
    2384:	00004f9d 	.word	0x00004f9d

00002388 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2388:	b580      	push	{r7, lr}
    238a:	b082      	sub	sp, #8
    238c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    238e:	2300      	movs	r3, #0
    2390:	80fb      	strh	r3, [r7, #6]
    2392:	e00e      	b.n	23b2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2394:	88fb      	ldrh	r3, [r7, #6]
    2396:	4a0c      	ldr	r2, [pc, #48]	; (23c8 <ext_irq_init+0x40>)
    2398:	00db      	lsls	r3, r3, #3
    239a:	4413      	add	r3, r2
    239c:	f04f 32ff 	mov.w	r2, #4294967295
    23a0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    23a2:	88fb      	ldrh	r3, [r7, #6]
    23a4:	4a08      	ldr	r2, [pc, #32]	; (23c8 <ext_irq_init+0x40>)
    23a6:	2100      	movs	r1, #0
    23a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    23ac:	88fb      	ldrh	r3, [r7, #6]
    23ae:	3301      	adds	r3, #1
    23b0:	80fb      	strh	r3, [r7, #6]
    23b2:	88fb      	ldrh	r3, [r7, #6]
    23b4:	2b07      	cmp	r3, #7
    23b6:	d9ed      	bls.n	2394 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    23b8:	4804      	ldr	r0, [pc, #16]	; (23cc <ext_irq_init+0x44>)
    23ba:	4b05      	ldr	r3, [pc, #20]	; (23d0 <ext_irq_init+0x48>)
    23bc:	4798      	blx	r3
    23be:	4603      	mov	r3, r0
}
    23c0:	4618      	mov	r0, r3
    23c2:	3708      	adds	r7, #8
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}
    23c8:	200008ec 	.word	0x200008ec
    23cc:	0000252d 	.word	0x0000252d
    23d0:	00004b41 	.word	0x00004b41

000023d4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b086      	sub	sp, #24
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
    23dc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    23de:	2300      	movs	r3, #0
    23e0:	75fb      	strb	r3, [r7, #23]
    23e2:	2300      	movs	r3, #0
    23e4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    23e6:	2300      	movs	r3, #0
    23e8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    23ea:	e012      	b.n	2412 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    23ec:	7dfb      	ldrb	r3, [r7, #23]
    23ee:	4a4d      	ldr	r2, [pc, #308]	; (2524 <ext_irq_register+0x150>)
    23f0:	00db      	lsls	r3, r3, #3
    23f2:	4413      	add	r3, r2
    23f4:	685a      	ldr	r2, [r3, #4]
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	429a      	cmp	r2, r3
    23fa:	d107      	bne.n	240c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    23fc:	7dfb      	ldrb	r3, [r7, #23]
    23fe:	4949      	ldr	r1, [pc, #292]	; (2524 <ext_irq_register+0x150>)
    2400:	683a      	ldr	r2, [r7, #0]
    2402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2406:	2301      	movs	r3, #1
    2408:	757b      	strb	r3, [r7, #21]
			break;
    240a:	e005      	b.n	2418 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    240c:	7dfb      	ldrb	r3, [r7, #23]
    240e:	3301      	adds	r3, #1
    2410:	75fb      	strb	r3, [r7, #23]
    2412:	7dfb      	ldrb	r3, [r7, #23]
    2414:	2b07      	cmp	r3, #7
    2416:	d9e9      	bls.n	23ec <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2418:	683b      	ldr	r3, [r7, #0]
    241a:	2b00      	cmp	r3, #0
    241c:	d10e      	bne.n	243c <ext_irq_register+0x68>
		if (!found) {
    241e:	7d7b      	ldrb	r3, [r7, #21]
    2420:	f083 0301 	eor.w	r3, r3, #1
    2424:	b2db      	uxtb	r3, r3
    2426:	2b00      	cmp	r3, #0
    2428:	d002      	beq.n	2430 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    242a:	f06f 030c 	mvn.w	r3, #12
    242e:	e074      	b.n	251a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2430:	2100      	movs	r1, #0
    2432:	6878      	ldr	r0, [r7, #4]
    2434:	4b3c      	ldr	r3, [pc, #240]	; (2528 <ext_irq_register+0x154>)
    2436:	4798      	blx	r3
    2438:	4603      	mov	r3, r0
    243a:	e06e      	b.n	251a <ext_irq_register+0x146>
	}

	if (!found) {
    243c:	7d7b      	ldrb	r3, [r7, #21]
    243e:	f083 0301 	eor.w	r3, r3, #1
    2442:	b2db      	uxtb	r3, r3
    2444:	2b00      	cmp	r3, #0
    2446:	d05a      	beq.n	24fe <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2448:	2300      	movs	r3, #0
    244a:	75fb      	strb	r3, [r7, #23]
    244c:	e016      	b.n	247c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    244e:	7dfb      	ldrb	r3, [r7, #23]
    2450:	4a34      	ldr	r2, [pc, #208]	; (2524 <ext_irq_register+0x150>)
    2452:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d10d      	bne.n	2476 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    245a:	7dfb      	ldrb	r3, [r7, #23]
    245c:	4931      	ldr	r1, [pc, #196]	; (2524 <ext_irq_register+0x150>)
    245e:	683a      	ldr	r2, [r7, #0]
    2460:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2464:	7dfb      	ldrb	r3, [r7, #23]
    2466:	4a2f      	ldr	r2, [pc, #188]	; (2524 <ext_irq_register+0x150>)
    2468:	00db      	lsls	r3, r3, #3
    246a:	4413      	add	r3, r2
    246c:	687a      	ldr	r2, [r7, #4]
    246e:	605a      	str	r2, [r3, #4]
				found           = true;
    2470:	2301      	movs	r3, #1
    2472:	757b      	strb	r3, [r7, #21]
				break;
    2474:	e005      	b.n	2482 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2476:	7dfb      	ldrb	r3, [r7, #23]
    2478:	3301      	adds	r3, #1
    247a:	75fb      	strb	r3, [r7, #23]
    247c:	7dfb      	ldrb	r3, [r7, #23]
    247e:	2b07      	cmp	r3, #7
    2480:	d9e5      	bls.n	244e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2482:	e036      	b.n	24f2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2484:	7dfb      	ldrb	r3, [r7, #23]
    2486:	4a27      	ldr	r2, [pc, #156]	; (2524 <ext_irq_register+0x150>)
    2488:	00db      	lsls	r3, r3, #3
    248a:	4413      	add	r3, r2
    248c:	685a      	ldr	r2, [r3, #4]
    248e:	7dbb      	ldrb	r3, [r7, #22]
    2490:	4924      	ldr	r1, [pc, #144]	; (2524 <ext_irq_register+0x150>)
    2492:	00db      	lsls	r3, r3, #3
    2494:	440b      	add	r3, r1
    2496:	685b      	ldr	r3, [r3, #4]
    2498:	429a      	cmp	r2, r3
    249a:	d227      	bcs.n	24ec <ext_irq_register+0x118>
    249c:	7dbb      	ldrb	r3, [r7, #22]
    249e:	4a21      	ldr	r2, [pc, #132]	; (2524 <ext_irq_register+0x150>)
    24a0:	00db      	lsls	r3, r3, #3
    24a2:	4413      	add	r3, r2
    24a4:	685b      	ldr	r3, [r3, #4]
    24a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    24aa:	d01f      	beq.n	24ec <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    24ac:	7dbb      	ldrb	r3, [r7, #22]
    24ae:	491d      	ldr	r1, [pc, #116]	; (2524 <ext_irq_register+0x150>)
    24b0:	f107 020c 	add.w	r2, r7, #12
    24b4:	00db      	lsls	r3, r3, #3
    24b6:	440b      	add	r3, r1
    24b8:	e893 0003 	ldmia.w	r3, {r0, r1}
    24bc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    24c0:	7dbb      	ldrb	r3, [r7, #22]
    24c2:	7dfa      	ldrb	r2, [r7, #23]
    24c4:	4817      	ldr	r0, [pc, #92]	; (2524 <ext_irq_register+0x150>)
    24c6:	4917      	ldr	r1, [pc, #92]	; (2524 <ext_irq_register+0x150>)
    24c8:	00db      	lsls	r3, r3, #3
    24ca:	4403      	add	r3, r0
    24cc:	00d2      	lsls	r2, r2, #3
    24ce:	440a      	add	r2, r1
    24d0:	e892 0003 	ldmia.w	r2, {r0, r1}
    24d4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    24d8:	7dfb      	ldrb	r3, [r7, #23]
    24da:	4a12      	ldr	r2, [pc, #72]	; (2524 <ext_irq_register+0x150>)
    24dc:	00db      	lsls	r3, r3, #3
    24de:	4413      	add	r3, r2
    24e0:	f107 020c 	add.w	r2, r7, #12
    24e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    24e8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    24ec:	7dbb      	ldrb	r3, [r7, #22]
    24ee:	3301      	adds	r3, #1
    24f0:	75bb      	strb	r3, [r7, #22]
    24f2:	7dbb      	ldrb	r3, [r7, #22]
    24f4:	2b07      	cmp	r3, #7
    24f6:	d802      	bhi.n	24fe <ext_irq_register+0x12a>
    24f8:	7dfb      	ldrb	r3, [r7, #23]
    24fa:	2b07      	cmp	r3, #7
    24fc:	d9c2      	bls.n	2484 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    24fe:	7d7b      	ldrb	r3, [r7, #21]
    2500:	f083 0301 	eor.w	r3, r3, #1
    2504:	b2db      	uxtb	r3, r3
    2506:	2b00      	cmp	r3, #0
    2508:	d002      	beq.n	2510 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    250a:	f06f 030c 	mvn.w	r3, #12
    250e:	e004      	b.n	251a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2510:	2101      	movs	r1, #1
    2512:	6878      	ldr	r0, [r7, #4]
    2514:	4b04      	ldr	r3, [pc, #16]	; (2528 <ext_irq_register+0x154>)
    2516:	4798      	blx	r3
    2518:	4603      	mov	r3, r0
}
    251a:	4618      	mov	r0, r3
    251c:	3718      	adds	r7, #24
    251e:	46bd      	mov	sp, r7
    2520:	bd80      	pop	{r7, pc}
    2522:	bf00      	nop
    2524:	200008ec 	.word	0x200008ec
    2528:	00004cc5 	.word	0x00004cc5

0000252c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    252c:	b580      	push	{r7, lr}
    252e:	b084      	sub	sp, #16
    2530:	af00      	add	r7, sp, #0
    2532:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2534:	2300      	movs	r3, #0
    2536:	73fb      	strb	r3, [r7, #15]
    2538:	2308      	movs	r3, #8
    253a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    253c:	e02a      	b.n	2594 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    253e:	7bba      	ldrb	r2, [r7, #14]
    2540:	7bfb      	ldrb	r3, [r7, #15]
    2542:	4413      	add	r3, r2
    2544:	105b      	asrs	r3, r3, #1
    2546:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2548:	7b7b      	ldrb	r3, [r7, #13]
    254a:	2b07      	cmp	r3, #7
    254c:	d827      	bhi.n	259e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    254e:	7b7b      	ldrb	r3, [r7, #13]
    2550:	4a16      	ldr	r2, [pc, #88]	; (25ac <process_ext_irq+0x80>)
    2552:	00db      	lsls	r3, r3, #3
    2554:	4413      	add	r3, r2
    2556:	685a      	ldr	r2, [r3, #4]
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	429a      	cmp	r2, r3
    255c:	d10b      	bne.n	2576 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    255e:	7b7b      	ldrb	r3, [r7, #13]
    2560:	4a12      	ldr	r2, [pc, #72]	; (25ac <process_ext_irq+0x80>)
    2562:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d01b      	beq.n	25a2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    256a:	7b7b      	ldrb	r3, [r7, #13]
    256c:	4a0f      	ldr	r2, [pc, #60]	; (25ac <process_ext_irq+0x80>)
    256e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2572:	4798      	blx	r3
			}
			return;
    2574:	e015      	b.n	25a2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2576:	7b7b      	ldrb	r3, [r7, #13]
    2578:	4a0c      	ldr	r2, [pc, #48]	; (25ac <process_ext_irq+0x80>)
    257a:	00db      	lsls	r3, r3, #3
    257c:	4413      	add	r3, r2
    257e:	685a      	ldr	r2, [r3, #4]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	429a      	cmp	r2, r3
    2584:	d203      	bcs.n	258e <process_ext_irq+0x62>
			lower = middle + 1;
    2586:	7b7b      	ldrb	r3, [r7, #13]
    2588:	3301      	adds	r3, #1
    258a:	73fb      	strb	r3, [r7, #15]
    258c:	e002      	b.n	2594 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    258e:	7b7b      	ldrb	r3, [r7, #13]
    2590:	3b01      	subs	r3, #1
    2592:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2594:	7bba      	ldrb	r2, [r7, #14]
    2596:	7bfb      	ldrb	r3, [r7, #15]
    2598:	429a      	cmp	r2, r3
    259a:	d2d0      	bcs.n	253e <process_ext_irq+0x12>
    259c:	e002      	b.n	25a4 <process_ext_irq+0x78>
			return;
    259e:	bf00      	nop
    25a0:	e000      	b.n	25a4 <process_ext_irq+0x78>
			return;
    25a2:	bf00      	nop
		}
	}
}
    25a4:	3710      	adds	r7, #16
    25a6:	46bd      	mov	sp, r7
    25a8:	bd80      	pop	{r7, pc}
    25aa:	bf00      	nop
    25ac:	200008ec 	.word	0x200008ec

000025b0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	b084      	sub	sp, #16
    25b4:	af00      	add	r7, sp, #0
    25b6:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	885b      	ldrh	r3, [r3, #2]
    25c0:	b29b      	uxth	r3, r3
    25c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    25c6:	2b00      	cmp	r3, #0
    25c8:	d107      	bne.n	25da <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    25ca:	68fb      	ldr	r3, [r7, #12]
    25cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25ce:	2b00      	cmp	r3, #0
    25d0:	d003      	beq.n	25da <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    25d2:	68fb      	ldr	r3, [r7, #12]
    25d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25d6:	68f8      	ldr	r0, [r7, #12]
    25d8:	4798      	blx	r3
		}
	}
}
    25da:	bf00      	nop
    25dc:	3710      	adds	r7, #16
    25de:	46bd      	mov	sp, r7
    25e0:	bd80      	pop	{r7, pc}

000025e2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    25e2:	b580      	push	{r7, lr}
    25e4:	b084      	sub	sp, #16
    25e6:	af00      	add	r7, sp, #0
    25e8:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    25ee:	687b      	ldr	r3, [r7, #4]
    25f0:	885b      	ldrh	r3, [r3, #2]
    25f2:	b29b      	uxth	r3, r3
    25f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    25f8:	2b00      	cmp	r3, #0
    25fa:	d107      	bne.n	260c <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    25fc:	68fb      	ldr	r3, [r7, #12]
    25fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2600:	2b00      	cmp	r3, #0
    2602:	d003      	beq.n	260c <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    2604:	68fb      	ldr	r3, [r7, #12]
    2606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2608:	68f8      	ldr	r0, [r7, #12]
    260a:	4798      	blx	r3
		}
	}
}
    260c:	bf00      	nop
    260e:	3710      	adds	r7, #16
    2610:	46bd      	mov	sp, r7
    2612:	bd80      	pop	{r7, pc}

00002614 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    2614:	b580      	push	{r7, lr}
    2616:	b084      	sub	sp, #16
    2618:	af00      	add	r7, sp, #0
    261a:	6078      	str	r0, [r7, #4]
    261c:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	885b      	ldrh	r3, [r3, #2]
    2626:	b29b      	uxth	r3, r3
    2628:	f403 7380 	and.w	r3, r3, #256	; 0x100
    262c:	2b00      	cmp	r3, #0
    262e:	d108      	bne.n	2642 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2634:	2b00      	cmp	r3, #0
    2636:	d004      	beq.n	2642 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2638:	68fb      	ldr	r3, [r7, #12]
    263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    263c:	6839      	ldr	r1, [r7, #0]
    263e:	68f8      	ldr	r0, [r7, #12]
    2640:	4798      	blx	r3
		}
	}
}
    2642:	bf00      	nop
    2644:	3710      	adds	r7, #16
    2646:	46bd      	mov	sp, r7
    2648:	bd80      	pop	{r7, pc}
	...

0000264c <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    264c:	b580      	push	{r7, lr}
    264e:	b08a      	sub	sp, #40	; 0x28
    2650:	af00      	add	r7, sp, #0
    2652:	60f8      	str	r0, [r7, #12]
    2654:	60b9      	str	r1, [r7, #8]
    2656:	4613      	mov	r3, r2
    2658:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	3b28      	subs	r3, #40	; 0x28
    265e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2662:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2664:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2666:	88fb      	ldrh	r3, [r7, #6]
    2668:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    266a:	f248 0301 	movw	r3, #32769	; 0x8001
    266e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2670:	68bb      	ldr	r3, [r7, #8]
    2672:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2676:	f107 0214 	add.w	r2, r7, #20
    267a:	4611      	mov	r1, r2
    267c:	4618      	mov	r0, r3
    267e:	4b06      	ldr	r3, [pc, #24]	; (2698 <i2c_m_async_read+0x4c>)
    2680:	4798      	blx	r3
    2682:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2684:	6a3b      	ldr	r3, [r7, #32]
    2686:	2b00      	cmp	r3, #0
    2688:	d001      	beq.n	268e <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    268a:	6a3b      	ldr	r3, [r7, #32]
    268c:	e000      	b.n	2690 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    268e:	88fb      	ldrh	r3, [r7, #6]
}
    2690:	4618      	mov	r0, r3
    2692:	3728      	adds	r7, #40	; 0x28
    2694:	46bd      	mov	sp, r7
    2696:	bd80      	pop	{r7, pc}
    2698:	00006d89 	.word	0x00006d89

0000269c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    269c:	b580      	push	{r7, lr}
    269e:	b08a      	sub	sp, #40	; 0x28
    26a0:	af00      	add	r7, sp, #0
    26a2:	60f8      	str	r0, [r7, #12]
    26a4:	60b9      	str	r1, [r7, #8]
    26a6:	4613      	mov	r3, r2
    26a8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    26aa:	68fb      	ldr	r3, [r7, #12]
    26ac:	3b28      	subs	r3, #40	; 0x28
    26ae:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    26b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    26b4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    26b6:	88fb      	ldrh	r3, [r7, #6]
    26b8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    26ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    26be:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    26c0:	68bb      	ldr	r3, [r7, #8]
    26c2:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    26c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26c6:	f107 0214 	add.w	r2, r7, #20
    26ca:	4611      	mov	r1, r2
    26cc:	4618      	mov	r0, r3
    26ce:	4b06      	ldr	r3, [pc, #24]	; (26e8 <i2c_m_async_write+0x4c>)
    26d0:	4798      	blx	r3
    26d2:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    26d4:	6a3b      	ldr	r3, [r7, #32]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d001      	beq.n	26de <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    26da:	6a3b      	ldr	r3, [r7, #32]
    26dc:	e000      	b.n	26e0 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    26de:	88fb      	ldrh	r3, [r7, #6]
}
    26e0:	4618      	mov	r0, r3
    26e2:	3728      	adds	r7, #40	; 0x28
    26e4:	46bd      	mov	sp, r7
    26e6:	bd80      	pop	{r7, pc}
    26e8:	00006d89 	.word	0x00006d89

000026ec <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b084      	sub	sp, #16
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    26f4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	2b00      	cmp	r3, #0
    26fa:	bf14      	ite	ne
    26fc:	2301      	movne	r3, #1
    26fe:	2300      	moveq	r3, #0
    2700:	b2db      	uxtb	r3, r3
    2702:	2289      	movs	r2, #137	; 0x89
    2704:	4915      	ldr	r1, [pc, #84]	; (275c <i2c_m_async_init+0x70>)
    2706:	4618      	mov	r0, r3
    2708:	4b15      	ldr	r3, [pc, #84]	; (2760 <i2c_m_async_init+0x74>)
    270a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	6839      	ldr	r1, [r7, #0]
    2710:	4618      	mov	r0, r3
    2712:	4b14      	ldr	r3, [pc, #80]	; (2764 <i2c_m_async_init+0x78>)
    2714:	4798      	blx	r3
    2716:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2718:	68fb      	ldr	r3, [r7, #12]
    271a:	2b00      	cmp	r3, #0
    271c:	d001      	beq.n	2722 <i2c_m_async_init+0x36>
		return init_status;
    271e:	68fb      	ldr	r3, [r7, #12]
    2720:	e018      	b.n	2754 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	4a10      	ldr	r2, [pc, #64]	; (2768 <i2c_m_async_init+0x7c>)
    2726:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	4a10      	ldr	r2, [pc, #64]	; (276c <i2c_m_async_init+0x80>)
    272c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	4a0f      	ldr	r2, [pc, #60]	; (2770 <i2c_m_async_init+0x84>)
    2732:	2101      	movs	r1, #1
    2734:	4618      	mov	r0, r3
    2736:	4b0f      	ldr	r3, [pc, #60]	; (2774 <i2c_m_async_init+0x88>)
    2738:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	4a0e      	ldr	r2, [pc, #56]	; (2778 <i2c_m_async_init+0x8c>)
    273e:	2102      	movs	r1, #2
    2740:	4618      	mov	r0, r3
    2742:	4b0c      	ldr	r3, [pc, #48]	; (2774 <i2c_m_async_init+0x88>)
    2744:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	4a0c      	ldr	r2, [pc, #48]	; (277c <i2c_m_async_init+0x90>)
    274a:	2100      	movs	r1, #0
    274c:	4618      	mov	r0, r3
    274e:	4b09      	ldr	r3, [pc, #36]	; (2774 <i2c_m_async_init+0x88>)
    2750:	4798      	blx	r3

	return ERR_NONE;
    2752:	2300      	movs	r3, #0
}
    2754:	4618      	mov	r0, r3
    2756:	3710      	adds	r7, #16
    2758:	46bd      	mov	sp, r7
    275a:	bd80      	pop	{r7, pc}
    275c:	0000ff88 	.word	0x0000ff88
    2760:	00003ba1 	.word	0x00003ba1
    2764:	00006bd9 	.word	0x00006bd9
    2768:	0000264d 	.word	0x0000264d
    276c:	0000269d 	.word	0x0000269d
    2770:	000025b1 	.word	0x000025b1
    2774:	00006e5d 	.word	0x00006e5d
    2778:	000025e3 	.word	0x000025e3
    277c:	00002615 	.word	0x00002615

00002780 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2780:	b580      	push	{r7, lr}
    2782:	b08a      	sub	sp, #40	; 0x28
    2784:	af00      	add	r7, sp, #0
    2786:	60f8      	str	r0, [r7, #12]
    2788:	60b9      	str	r1, [r7, #8]
    278a:	4613      	mov	r3, r2
    278c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    278e:	68fb      	ldr	r3, [r7, #12]
    2790:	3b14      	subs	r3, #20
    2792:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2796:	8b9b      	ldrh	r3, [r3, #28]
    2798:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    279a:	88fb      	ldrh	r3, [r7, #6]
    279c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    279e:	f248 0301 	movw	r3, #32769	; 0x8001
    27a2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    27a4:	68bb      	ldr	r3, [r7, #8]
    27a6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    27a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27aa:	f107 0214 	add.w	r2, r7, #20
    27ae:	4611      	mov	r1, r2
    27b0:	4618      	mov	r0, r3
    27b2:	4b06      	ldr	r3, [pc, #24]	; (27cc <i2c_m_sync_read+0x4c>)
    27b4:	4798      	blx	r3
    27b6:	6238      	str	r0, [r7, #32]

	if (ret) {
    27b8:	6a3b      	ldr	r3, [r7, #32]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d001      	beq.n	27c2 <i2c_m_sync_read+0x42>
		return ret;
    27be:	6a3b      	ldr	r3, [r7, #32]
    27c0:	e000      	b.n	27c4 <i2c_m_sync_read+0x44>
	}

	return n;
    27c2:	88fb      	ldrh	r3, [r7, #6]
}
    27c4:	4618      	mov	r0, r3
    27c6:	3728      	adds	r7, #40	; 0x28
    27c8:	46bd      	mov	sp, r7
    27ca:	bd80      	pop	{r7, pc}
    27cc:	000070a5 	.word	0x000070a5

000027d0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b08a      	sub	sp, #40	; 0x28
    27d4:	af00      	add	r7, sp, #0
    27d6:	60f8      	str	r0, [r7, #12]
    27d8:	60b9      	str	r1, [r7, #8]
    27da:	4613      	mov	r3, r2
    27dc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    27de:	68fb      	ldr	r3, [r7, #12]
    27e0:	3b14      	subs	r3, #20
    27e2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    27e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27e6:	8b9b      	ldrh	r3, [r3, #28]
    27e8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    27ea:	88fb      	ldrh	r3, [r7, #6]
    27ec:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    27ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    27f2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    27f4:	68bb      	ldr	r3, [r7, #8]
    27f6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    27f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27fa:	f107 0214 	add.w	r2, r7, #20
    27fe:	4611      	mov	r1, r2
    2800:	4618      	mov	r0, r3
    2802:	4b06      	ldr	r3, [pc, #24]	; (281c <i2c_m_sync_write+0x4c>)
    2804:	4798      	blx	r3
    2806:	6238      	str	r0, [r7, #32]

	if (ret) {
    2808:	6a3b      	ldr	r3, [r7, #32]
    280a:	2b00      	cmp	r3, #0
    280c:	d001      	beq.n	2812 <i2c_m_sync_write+0x42>
		return ret;
    280e:	6a3b      	ldr	r3, [r7, #32]
    2810:	e000      	b.n	2814 <i2c_m_sync_write+0x44>
	}

	return n;
    2812:	88fb      	ldrh	r3, [r7, #6]
}
    2814:	4618      	mov	r0, r3
    2816:	3728      	adds	r7, #40	; 0x28
    2818:	46bd      	mov	sp, r7
    281a:	bd80      	pop	{r7, pc}
    281c:	000070a5 	.word	0x000070a5

00002820 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2820:	b580      	push	{r7, lr}
    2822:	b084      	sub	sp, #16
    2824:	af00      	add	r7, sp, #0
    2826:	6078      	str	r0, [r7, #4]
    2828:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	2b00      	cmp	r3, #0
    282e:	bf14      	ite	ne
    2830:	2301      	movne	r3, #1
    2832:	2300      	moveq	r3, #0
    2834:	b2db      	uxtb	r3, r3
    2836:	225e      	movs	r2, #94	; 0x5e
    2838:	490c      	ldr	r1, [pc, #48]	; (286c <i2c_m_sync_init+0x4c>)
    283a:	4618      	mov	r0, r3
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <i2c_m_sync_init+0x50>)
    283e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	6839      	ldr	r1, [r7, #0]
    2844:	4618      	mov	r0, r3
    2846:	4b0b      	ldr	r3, [pc, #44]	; (2874 <i2c_m_sync_init+0x54>)
    2848:	4798      	blx	r3
    284a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    284c:	68fb      	ldr	r3, [r7, #12]
    284e:	2b00      	cmp	r3, #0
    2850:	d001      	beq.n	2856 <i2c_m_sync_init+0x36>
		return init_status;
    2852:	68fb      	ldr	r3, [r7, #12]
    2854:	e006      	b.n	2864 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	4a07      	ldr	r2, [pc, #28]	; (2878 <i2c_m_sync_init+0x58>)
    285a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	4a07      	ldr	r2, [pc, #28]	; (287c <i2c_m_sync_init+0x5c>)
    2860:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2862:	2300      	movs	r3, #0
}
    2864:	4618      	mov	r0, r3
    2866:	3710      	adds	r7, #16
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}
    286c:	0000ffa8 	.word	0x0000ffa8
    2870:	00003ba1 	.word	0x00003ba1
    2874:	00006ea1 	.word	0x00006ea1
    2878:	00002781 	.word	0x00002781
    287c:	000027d1 	.word	0x000027d1

00002880 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2880:	b580      	push	{r7, lr}
    2882:	b082      	sub	sp, #8
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2888:	687b      	ldr	r3, [r7, #4]
    288a:	4618      	mov	r0, r3
    288c:	4b03      	ldr	r3, [pc, #12]	; (289c <i2c_m_sync_enable+0x1c>)
    288e:	4798      	blx	r3
    2890:	4603      	mov	r3, r0
}
    2892:	4618      	mov	r0, r3
    2894:	3708      	adds	r7, #8
    2896:	46bd      	mov	sp, r7
    2898:	bd80      	pop	{r7, pc}
    289a:	bf00      	nop
    289c:	00006ee9 	.word	0x00006ee9

000028a0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    28a0:	b480      	push	{r7}
    28a2:	b085      	sub	sp, #20
    28a4:	af00      	add	r7, sp, #0
    28a6:	60f8      	str	r0, [r7, #12]
    28a8:	460b      	mov	r3, r1
    28aa:	607a      	str	r2, [r7, #4]
    28ac:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    28ae:	897b      	ldrh	r3, [r7, #10]
    28b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    28b4:	b21a      	sxth	r2, r3
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	b21b      	sxth	r3, r3
    28ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    28be:	b21b      	sxth	r3, r3
    28c0:	4313      	orrs	r3, r2
    28c2:	b21b      	sxth	r3, r3
    28c4:	b29a      	uxth	r2, r3
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	839a      	strh	r2, [r3, #28]
    28ca:	68fb      	ldr	r3, [r7, #12]
    28cc:	8b9b      	ldrh	r3, [r3, #28]
}
    28ce:	4618      	mov	r0, r3
    28d0:	3714      	adds	r7, #20
    28d2:	46bd      	mov	sp, r7
    28d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28d8:	4770      	bx	lr

000028da <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    28da:	b480      	push	{r7}
    28dc:	b083      	sub	sp, #12
    28de:	af00      	add	r7, sp, #0
    28e0:	6078      	str	r0, [r7, #4]
    28e2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	f103 0214 	add.w	r2, r3, #20
    28ea:	683b      	ldr	r3, [r7, #0]
    28ec:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    28ee:	2300      	movs	r3, #0
}
    28f0:	4618      	mov	r0, r3
    28f2:	370c      	adds	r7, #12
    28f4:	46bd      	mov	sp, r7
    28f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28fa:	4770      	bx	lr

000028fc <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    28fc:	b580      	push	{r7, lr}
    28fe:	b084      	sub	sp, #16
    2900:	af00      	add	r7, sp, #0
    2902:	60f8      	str	r0, [r7, #12]
    2904:	60b9      	str	r1, [r7, #8]
    2906:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	2b00      	cmp	r3, #0
    290c:	d004      	beq.n	2918 <pwm_init+0x1c>
    290e:	68bb      	ldr	r3, [r7, #8]
    2910:	2b00      	cmp	r3, #0
    2912:	d001      	beq.n	2918 <pwm_init+0x1c>
    2914:	2301      	movs	r3, #1
    2916:	e000      	b.n	291a <pwm_init+0x1e>
    2918:	2300      	movs	r3, #0
    291a:	f003 0301 	and.w	r3, r3, #1
    291e:	b2db      	uxtb	r3, r3
    2920:	2233      	movs	r2, #51	; 0x33
    2922:	490a      	ldr	r1, [pc, #40]	; (294c <pwm_init+0x50>)
    2924:	4618      	mov	r0, r3
    2926:	4b0a      	ldr	r3, [pc, #40]	; (2950 <pwm_init+0x54>)
    2928:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    292a:	68fb      	ldr	r3, [r7, #12]
    292c:	68b9      	ldr	r1, [r7, #8]
    292e:	4618      	mov	r0, r3
    2930:	4b08      	ldr	r3, [pc, #32]	; (2954 <pwm_init+0x58>)
    2932:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2934:	68fb      	ldr	r3, [r7, #12]
    2936:	4a08      	ldr	r2, [pc, #32]	; (2958 <pwm_init+0x5c>)
    2938:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    293a:	68fb      	ldr	r3, [r7, #12]
    293c:	4a07      	ldr	r2, [pc, #28]	; (295c <pwm_init+0x60>)
    293e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2940:	2300      	movs	r3, #0
}
    2942:	4618      	mov	r0, r3
    2944:	3710      	adds	r7, #16
    2946:	46bd      	mov	sp, r7
    2948:	bd80      	pop	{r7, pc}
    294a:	bf00      	nop
    294c:	0000ffc4 	.word	0x0000ffc4
    2950:	00003ba1 	.word	0x00003ba1
    2954:	000087ad 	.word	0x000087ad
    2958:	000029b5 	.word	0x000029b5
    295c:	000029d9 	.word	0x000029d9

00002960 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    2960:	b580      	push	{r7, lr}
    2962:	b082      	sub	sp, #8
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	2b00      	cmp	r3, #0
    296c:	bf14      	ite	ne
    296e:	2301      	movne	r3, #1
    2970:	2300      	moveq	r3, #0
    2972:	b2db      	uxtb	r3, r3
    2974:	224a      	movs	r2, #74	; 0x4a
    2976:	490b      	ldr	r1, [pc, #44]	; (29a4 <pwm_enable+0x44>)
    2978:	4618      	mov	r0, r3
    297a:	4b0b      	ldr	r3, [pc, #44]	; (29a8 <pwm_enable+0x48>)
    297c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	4618      	mov	r0, r3
    2982:	4b0a      	ldr	r3, [pc, #40]	; (29ac <pwm_enable+0x4c>)
    2984:	4798      	blx	r3
    2986:	4603      	mov	r3, r0
    2988:	2b00      	cmp	r3, #0
    298a:	d002      	beq.n	2992 <pwm_enable+0x32>
		return ERR_DENIED;
    298c:	f06f 0310 	mvn.w	r3, #16
    2990:	e004      	b.n	299c <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	4618      	mov	r0, r3
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <pwm_enable+0x50>)
    2998:	4798      	blx	r3

	return ERR_NONE;
    299a:	2300      	movs	r3, #0
}
    299c:	4618      	mov	r0, r3
    299e:	3708      	adds	r7, #8
    29a0:	46bd      	mov	sp, r7
    29a2:	bd80      	pop	{r7, pc}
    29a4:	0000ffc4 	.word	0x0000ffc4
    29a8:	00003ba1 	.word	0x00003ba1
    29ac:	00008b9d 	.word	0x00008b9d
    29b0:	00008a59 	.word	0x00008a59

000029b4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	695b      	ldr	r3, [r3, #20]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d003      	beq.n	29d0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    29c8:	68fb      	ldr	r3, [r7, #12]
    29ca:	695b      	ldr	r3, [r3, #20]
    29cc:	68f8      	ldr	r0, [r7, #12]
    29ce:	4798      	blx	r3
	}
}
    29d0:	bf00      	nop
    29d2:	3710      	adds	r7, #16
    29d4:	46bd      	mov	sp, r7
    29d6:	bd80      	pop	{r7, pc}

000029d8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b084      	sub	sp, #16
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	699b      	ldr	r3, [r3, #24]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d003      	beq.n	29f4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	699b      	ldr	r3, [r3, #24]
    29f0:	68f8      	ldr	r0, [r7, #12]
    29f2:	4798      	blx	r3
	}
}
    29f4:	bf00      	nop
    29f6:	3710      	adds	r7, #16
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
    2a04:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d004      	beq.n	2a16 <qspi_sync_init+0x1a>
    2a0c:	683b      	ldr	r3, [r7, #0]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d001      	beq.n	2a16 <qspi_sync_init+0x1a>
    2a12:	2301      	movs	r3, #1
    2a14:	e000      	b.n	2a18 <qspi_sync_init+0x1c>
    2a16:	2300      	movs	r3, #0
    2a18:	f003 0301 	and.w	r3, r3, #1
    2a1c:	b2db      	uxtb	r3, r3
    2a1e:	2231      	movs	r2, #49	; 0x31
    2a20:	4906      	ldr	r1, [pc, #24]	; (2a3c <qspi_sync_init+0x40>)
    2a22:	4618      	mov	r0, r3
    2a24:	4b06      	ldr	r3, [pc, #24]	; (2a40 <qspi_sync_init+0x44>)
    2a26:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	6839      	ldr	r1, [r7, #0]
    2a2c:	4618      	mov	r0, r3
    2a2e:	4b05      	ldr	r3, [pc, #20]	; (2a44 <qspi_sync_init+0x48>)
    2a30:	4798      	blx	r3
    2a32:	4603      	mov	r3, r0
}
    2a34:	4618      	mov	r0, r3
    2a36:	3708      	adds	r7, #8
    2a38:	46bd      	mov	sp, r7
    2a3a:	bd80      	pop	{r7, pc}
    2a3c:	0000ffdc 	.word	0x0000ffdc
    2a40:	00003ba1 	.word	0x00003ba1
    2a44:	00005b65 	.word	0x00005b65

00002a48 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b082      	sub	sp, #8
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	2b00      	cmp	r3, #0
    2a54:	bf14      	ite	ne
    2a56:	2301      	movne	r3, #1
    2a58:	2300      	moveq	r3, #0
    2a5a:	b2db      	uxtb	r3, r3
    2a5c:	223f      	movs	r2, #63	; 0x3f
    2a5e:	4906      	ldr	r1, [pc, #24]	; (2a78 <qspi_sync_enable+0x30>)
    2a60:	4618      	mov	r0, r3
    2a62:	4b06      	ldr	r3, [pc, #24]	; (2a7c <qspi_sync_enable+0x34>)
    2a64:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	4618      	mov	r0, r3
    2a6a:	4b05      	ldr	r3, [pc, #20]	; (2a80 <qspi_sync_enable+0x38>)
    2a6c:	4798      	blx	r3
    2a6e:	4603      	mov	r3, r0
}
    2a70:	4618      	mov	r0, r3
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bd80      	pop	{r7, pc}
    2a78:	0000ffdc 	.word	0x0000ffdc
    2a7c:	00003ba1 	.word	0x00003ba1
    2a80:	00005bd9 	.word	0x00005bd9

00002a84 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2a84:	b580      	push	{r7, lr}
    2a86:	b082      	sub	sp, #8
    2a88:	af00      	add	r7, sp, #0
    2a8a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	bf14      	ite	ne
    2a92:	2301      	movne	r3, #1
    2a94:	2300      	moveq	r3, #0
    2a96:	b2db      	uxtb	r3, r3
    2a98:	2246      	movs	r2, #70	; 0x46
    2a9a:	4906      	ldr	r1, [pc, #24]	; (2ab4 <qspi_sync_disable+0x30>)
    2a9c:	4618      	mov	r0, r3
    2a9e:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <qspi_sync_disable+0x34>)
    2aa0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	4618      	mov	r0, r3
    2aa6:	4b05      	ldr	r3, [pc, #20]	; (2abc <qspi_sync_disable+0x38>)
    2aa8:	4798      	blx	r3
    2aaa:	4603      	mov	r3, r0
}
    2aac:	4618      	mov	r0, r3
    2aae:	3708      	adds	r7, #8
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	0000ffdc 	.word	0x0000ffdc
    2ab8:	00003ba1 	.word	0x00003ba1
    2abc:	00005bfd 	.word	0x00005bfd

00002ac0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b082      	sub	sp, #8
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	6078      	str	r0, [r7, #4]
    2ac8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d004      	beq.n	2ada <qspi_sync_serial_run_command+0x1a>
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d001      	beq.n	2ada <qspi_sync_serial_run_command+0x1a>
    2ad6:	2301      	movs	r3, #1
    2ad8:	e000      	b.n	2adc <qspi_sync_serial_run_command+0x1c>
    2ada:	2300      	movs	r3, #0
    2adc:	f003 0301 	and.w	r3, r3, #1
    2ae0:	b2db      	uxtb	r3, r3
    2ae2:	224d      	movs	r2, #77	; 0x4d
    2ae4:	4906      	ldr	r1, [pc, #24]	; (2b00 <qspi_sync_serial_run_command+0x40>)
    2ae6:	4618      	mov	r0, r3
    2ae8:	4b06      	ldr	r3, [pc, #24]	; (2b04 <qspi_sync_serial_run_command+0x44>)
    2aea:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	6839      	ldr	r1, [r7, #0]
    2af0:	4618      	mov	r0, r3
    2af2:	4b05      	ldr	r3, [pc, #20]	; (2b08 <qspi_sync_serial_run_command+0x48>)
    2af4:	4798      	blx	r3
    2af6:	4603      	mov	r3, r0
}
    2af8:	4618      	mov	r0, r3
    2afa:	3708      	adds	r7, #8
    2afc:	46bd      	mov	sp, r7
    2afe:	bd80      	pop	{r7, pc}
    2b00:	0000ffdc 	.word	0x0000ffdc
    2b04:	00003ba1 	.word	0x00003ba1
    2b08:	00005d49 	.word	0x00005d49

00002b0c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b084      	sub	sp, #16
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2b16:	2300      	movs	r3, #0
    2b18:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d004      	beq.n	2b2a <spi_m_sync_init+0x1e>
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d001      	beq.n	2b2a <spi_m_sync_init+0x1e>
    2b26:	2301      	movs	r3, #1
    2b28:	e000      	b.n	2b2c <spi_m_sync_init+0x20>
    2b2a:	2300      	movs	r3, #0
    2b2c:	f003 0301 	and.w	r3, r3, #1
    2b30:	b2db      	uxtb	r3, r3
    2b32:	2240      	movs	r2, #64	; 0x40
    2b34:	4910      	ldr	r1, [pc, #64]	; (2b78 <spi_m_sync_init+0x6c>)
    2b36:	4618      	mov	r0, r3
    2b38:	4b10      	ldr	r3, [pc, #64]	; (2b7c <spi_m_sync_init+0x70>)
    2b3a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	683a      	ldr	r2, [r7, #0]
    2b40:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	3304      	adds	r3, #4
    2b46:	6839      	ldr	r1, [r7, #0]
    2b48:	4618      	mov	r0, r3
    2b4a:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <spi_m_sync_init+0x74>)
    2b4c:	4798      	blx	r3
    2b4e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	2b00      	cmp	r3, #0
    2b54:	da01      	bge.n	2b5a <spi_m_sync_init+0x4e>
		return rc;
    2b56:	68fb      	ldr	r3, [r7, #12]
    2b58:	e00a      	b.n	2b70 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b60:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	4a07      	ldr	r2, [pc, #28]	; (2b84 <spi_m_sync_init+0x78>)
    2b66:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	4a07      	ldr	r2, [pc, #28]	; (2b88 <spi_m_sync_init+0x7c>)
    2b6c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2b6e:	2300      	movs	r3, #0
}
    2b70:	4618      	mov	r0, r3
    2b72:	3710      	adds	r7, #16
    2b74:	46bd      	mov	sp, r7
    2b76:	bd80      	pop	{r7, pc}
    2b78:	0000fff8 	.word	0x0000fff8
    2b7c:	00003ba1 	.word	0x00003ba1
    2b80:	00007611 	.word	0x00007611
    2b84:	00002c05 	.word	0x00002c05
    2b88:	00002c5d 	.word	0x00002c5d

00002b8c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
    2b92:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	2b00      	cmp	r3, #0
    2b98:	bf14      	ite	ne
    2b9a:	2301      	movne	r3, #1
    2b9c:	2300      	moveq	r3, #0
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2257      	movs	r2, #87	; 0x57
    2ba2:	4906      	ldr	r1, [pc, #24]	; (2bbc <spi_m_sync_enable+0x30>)
    2ba4:	4618      	mov	r0, r3
    2ba6:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <spi_m_sync_enable+0x34>)
    2ba8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2baa:	687b      	ldr	r3, [r7, #4]
    2bac:	3304      	adds	r3, #4
    2bae:	4618      	mov	r0, r3
    2bb0:	4b04      	ldr	r3, [pc, #16]	; (2bc4 <spi_m_sync_enable+0x38>)
    2bb2:	4798      	blx	r3
}
    2bb4:	bf00      	nop
    2bb6:	3708      	adds	r7, #8
    2bb8:	46bd      	mov	sp, r7
    2bba:	bd80      	pop	{r7, pc}
    2bbc:	0000fff8 	.word	0x0000fff8
    2bc0:	00003ba1 	.word	0x00003ba1
    2bc4:	0000771d 	.word	0x0000771d

00002bc8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b082      	sub	sp, #8
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	bf14      	ite	ne
    2bd6:	2301      	movne	r3, #1
    2bd8:	2300      	moveq	r3, #0
    2bda:	b2db      	uxtb	r3, r3
    2bdc:	225d      	movs	r2, #93	; 0x5d
    2bde:	4906      	ldr	r1, [pc, #24]	; (2bf8 <spi_m_sync_disable+0x30>)
    2be0:	4618      	mov	r0, r3
    2be2:	4b06      	ldr	r3, [pc, #24]	; (2bfc <spi_m_sync_disable+0x34>)
    2be4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	3304      	adds	r3, #4
    2bea:	4618      	mov	r0, r3
    2bec:	4b04      	ldr	r3, [pc, #16]	; (2c00 <spi_m_sync_disable+0x38>)
    2bee:	4798      	blx	r3
}
    2bf0:	bf00      	nop
    2bf2:	3708      	adds	r7, #8
    2bf4:	46bd      	mov	sp, r7
    2bf6:	bd80      	pop	{r7, pc}
    2bf8:	0000fff8 	.word	0x0000fff8
    2bfc:	00003ba1 	.word	0x00003ba1
    2c00:	0000776d 	.word	0x0000776d

00002c04 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2c04:	b580      	push	{r7, lr}
    2c06:	b088      	sub	sp, #32
    2c08:	af00      	add	r7, sp, #0
    2c0a:	60f8      	str	r0, [r7, #12]
    2c0c:	60b9      	str	r1, [r7, #8]
    2c0e:	4613      	mov	r3, r2
    2c10:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	2b00      	cmp	r3, #0
    2c16:	bf14      	ite	ne
    2c18:	2301      	movne	r3, #1
    2c1a:	2300      	moveq	r3, #0
    2c1c:	b2db      	uxtb	r3, r3
    2c1e:	2287      	movs	r2, #135	; 0x87
    2c20:	490b      	ldr	r1, [pc, #44]	; (2c50 <_spi_m_sync_io_read+0x4c>)
    2c22:	4618      	mov	r0, r3
    2c24:	4b0b      	ldr	r3, [pc, #44]	; (2c54 <_spi_m_sync_io_read+0x50>)
    2c26:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2c28:	68fb      	ldr	r3, [r7, #12]
    2c2a:	3b0c      	subs	r3, #12
    2c2c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2c32:	2300      	movs	r3, #0
    2c34:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2c36:	88fb      	ldrh	r3, [r7, #6]
    2c38:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2c3a:	f107 0310 	add.w	r3, r7, #16
    2c3e:	4619      	mov	r1, r3
    2c40:	69f8      	ldr	r0, [r7, #28]
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_spi_m_sync_io_read+0x54>)
    2c44:	4798      	blx	r3
    2c46:	4603      	mov	r3, r0
}
    2c48:	4618      	mov	r0, r3
    2c4a:	3720      	adds	r7, #32
    2c4c:	46bd      	mov	sp, r7
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	0000fff8 	.word	0x0000fff8
    2c54:	00003ba1 	.word	0x00003ba1
    2c58:	00002cb5 	.word	0x00002cb5

00002c5c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b088      	sub	sp, #32
    2c60:	af00      	add	r7, sp, #0
    2c62:	60f8      	str	r0, [r7, #12]
    2c64:	60b9      	str	r1, [r7, #8]
    2c66:	4613      	mov	r3, r2
    2c68:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2c6a:	68fb      	ldr	r3, [r7, #12]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	bf14      	ite	ne
    2c70:	2301      	movne	r3, #1
    2c72:	2300      	moveq	r3, #0
    2c74:	b2db      	uxtb	r3, r3
    2c76:	22a3      	movs	r2, #163	; 0xa3
    2c78:	490b      	ldr	r1, [pc, #44]	; (2ca8 <_spi_m_sync_io_write+0x4c>)
    2c7a:	4618      	mov	r0, r3
    2c7c:	4b0b      	ldr	r3, [pc, #44]	; (2cac <_spi_m_sync_io_write+0x50>)
    2c7e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2c80:	68fb      	ldr	r3, [r7, #12]
    2c82:	3b0c      	subs	r3, #12
    2c84:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2c86:	2300      	movs	r3, #0
    2c88:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2c8a:	68bb      	ldr	r3, [r7, #8]
    2c8c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2c8e:	88fb      	ldrh	r3, [r7, #6]
    2c90:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2c92:	f107 0310 	add.w	r3, r7, #16
    2c96:	4619      	mov	r1, r3
    2c98:	69f8      	ldr	r0, [r7, #28]
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <_spi_m_sync_io_write+0x54>)
    2c9c:	4798      	blx	r3
    2c9e:	4603      	mov	r3, r0
}
    2ca0:	4618      	mov	r0, r3
    2ca2:	3720      	adds	r7, #32
    2ca4:	46bd      	mov	sp, r7
    2ca6:	bd80      	pop	{r7, pc}
    2ca8:	0000fff8 	.word	0x0000fff8
    2cac:	00003ba1 	.word	0x00003ba1
    2cb0:	00002cb5 	.word	0x00002cb5

00002cb4 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b086      	sub	sp, #24
    2cb8:	af00      	add	r7, sp, #0
    2cba:	6078      	str	r0, [r7, #4]
    2cbc:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d004      	beq.n	2cce <spi_m_sync_transfer+0x1a>
    2cc4:	683b      	ldr	r3, [r7, #0]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d001      	beq.n	2cce <spi_m_sync_transfer+0x1a>
    2cca:	2301      	movs	r3, #1
    2ccc:	e000      	b.n	2cd0 <spi_m_sync_transfer+0x1c>
    2cce:	2300      	movs	r3, #0
    2cd0:	f003 0301 	and.w	r3, r3, #1
    2cd4:	b2db      	uxtb	r3, r3
    2cd6:	22b3      	movs	r2, #179	; 0xb3
    2cd8:	490c      	ldr	r1, [pc, #48]	; (2d0c <spi_m_sync_transfer+0x58>)
    2cda:	4618      	mov	r0, r3
    2cdc:	4b0c      	ldr	r3, [pc, #48]	; (2d10 <spi_m_sync_transfer+0x5c>)
    2cde:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2ce6:	683b      	ldr	r3, [r7, #0]
    2ce8:	685b      	ldr	r3, [r3, #4]
    2cea:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2cec:	683b      	ldr	r3, [r7, #0]
    2cee:	689b      	ldr	r3, [r3, #8]
    2cf0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	3304      	adds	r3, #4
    2cf6:	f107 020c 	add.w	r2, r7, #12
    2cfa:	4611      	mov	r1, r2
    2cfc:	4618      	mov	r0, r3
    2cfe:	4b05      	ldr	r3, [pc, #20]	; (2d14 <spi_m_sync_transfer+0x60>)
    2d00:	4798      	blx	r3
    2d02:	4603      	mov	r3, r0
}
    2d04:	4618      	mov	r0, r3
    2d06:	3718      	adds	r7, #24
    2d08:	46bd      	mov	sp, r7
    2d0a:	bd80      	pop	{r7, pc}
    2d0c:	0000fff8 	.word	0x0000fff8
    2d10:	00003ba1 	.word	0x00003ba1
    2d14:	00007911 	.word	0x00007911

00002d18 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d004      	beq.n	2d32 <spi_m_sync_get_io_descriptor+0x1a>
    2d28:	683b      	ldr	r3, [r7, #0]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d001      	beq.n	2d32 <spi_m_sync_get_io_descriptor+0x1a>
    2d2e:	2301      	movs	r3, #1
    2d30:	e000      	b.n	2d34 <spi_m_sync_get_io_descriptor+0x1c>
    2d32:	2300      	movs	r3, #0
    2d34:	f003 0301 	and.w	r3, r3, #1
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	22bd      	movs	r2, #189	; 0xbd
    2d3c:	4906      	ldr	r1, [pc, #24]	; (2d58 <spi_m_sync_get_io_descriptor+0x40>)
    2d3e:	4618      	mov	r0, r3
    2d40:	4b06      	ldr	r3, [pc, #24]	; (2d5c <spi_m_sync_get_io_descriptor+0x44>)
    2d42:	4798      	blx	r3
	*io = &spi->io;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	f103 020c 	add.w	r2, r3, #12
    2d4a:	683b      	ldr	r3, [r7, #0]
    2d4c:	601a      	str	r2, [r3, #0]
	return 0;
    2d4e:	2300      	movs	r3, #0
}
    2d50:	4618      	mov	r0, r3
    2d52:	3708      	adds	r7, #8
    2d54:	46bd      	mov	sp, r7
    2d56:	bd80      	pop	{r7, pc}
    2d58:	0000fff8 	.word	0x0000fff8
    2d5c:	00003ba1 	.word	0x00003ba1

00002d60 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2d60:	b480      	push	{r7}
    2d62:	b083      	sub	sp, #12
    2d64:	af00      	add	r7, sp, #0
    2d66:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	681b      	ldr	r3, [r3, #0]
}
    2d6c:	4618      	mov	r0, r3
    2d6e:	370c      	adds	r7, #12
    2d70:	46bd      	mov	sp, r7
    2d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d76:	4770      	bx	lr

00002d78 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2d78:	b480      	push	{r7}
    2d7a:	b083      	sub	sp, #12
    2d7c:	af00      	add	r7, sp, #0
    2d7e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d002      	beq.n	2d8c <list_get_next_element+0x14>
    2d86:	687b      	ldr	r3, [r7, #4]
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	e000      	b.n	2d8e <list_get_next_element+0x16>
    2d8c:	2300      	movs	r3, #0
}
    2d8e:	4618      	mov	r0, r3
    2d90:	370c      	adds	r7, #12
    2d92:	46bd      	mov	sp, r7
    2d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d98:	4770      	bx	lr
	...

00002d9c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	60f8      	str	r0, [r7, #12]
    2da4:	60b9      	str	r1, [r7, #8]
    2da6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    2da8:	68fb      	ldr	r3, [r7, #12]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d007      	beq.n	2dbe <timer_init+0x22>
    2dae:	68bb      	ldr	r3, [r7, #8]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d004      	beq.n	2dbe <timer_init+0x22>
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	2b00      	cmp	r3, #0
    2db8:	d001      	beq.n	2dbe <timer_init+0x22>
    2dba:	2301      	movs	r3, #1
    2dbc:	e000      	b.n	2dc0 <timer_init+0x24>
    2dbe:	2300      	movs	r3, #0
    2dc0:	f003 0301 	and.w	r3, r3, #1
    2dc4:	b2db      	uxtb	r3, r3
    2dc6:	223b      	movs	r2, #59	; 0x3b
    2dc8:	490c      	ldr	r1, [pc, #48]	; (2dfc <timer_init+0x60>)
    2dca:	4618      	mov	r0, r3
    2dcc:	4b0c      	ldr	r3, [pc, #48]	; (2e00 <timer_init+0x64>)
    2dce:	4798      	blx	r3
	descr->func = func;
    2dd0:	68fb      	ldr	r3, [r7, #12]
    2dd2:	687a      	ldr	r2, [r7, #4]
    2dd4:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2dd6:	68fb      	ldr	r3, [r7, #12]
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	68fa      	ldr	r2, [r7, #12]
    2dde:	3204      	adds	r2, #4
    2de0:	68b9      	ldr	r1, [r7, #8]
    2de2:	4610      	mov	r0, r2
    2de4:	4798      	blx	r3
	descr->time                           = 0;
    2de6:	68fb      	ldr	r3, [r7, #12]
    2de8:	2200      	movs	r2, #0
    2dea:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2dec:	68fb      	ldr	r3, [r7, #12]
    2dee:	4a05      	ldr	r2, [pc, #20]	; (2e04 <timer_init+0x68>)
    2df0:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2df2:	2300      	movs	r3, #0
}
    2df4:	4618      	mov	r0, r3
    2df6:	3710      	adds	r7, #16
    2df8:	46bd      	mov	sp, r7
    2dfa:	bd80      	pop	{r7, pc}
    2dfc:	00010014 	.word	0x00010014
    2e00:	00003ba1 	.word	0x00003ba1
    2e04:	0000318d 	.word	0x0000318d

00002e08 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d005      	beq.n	2e22 <timer_start+0x1a>
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d001      	beq.n	2e22 <timer_start+0x1a>
    2e1e:	2301      	movs	r3, #1
    2e20:	e000      	b.n	2e24 <timer_start+0x1c>
    2e22:	2300      	movs	r3, #0
    2e24:	f003 0301 	and.w	r3, r3, #1
    2e28:	b2db      	uxtb	r3, r3
    2e2a:	2254      	movs	r2, #84	; 0x54
    2e2c:	490e      	ldr	r1, [pc, #56]	; (2e68 <timer_start+0x60>)
    2e2e:	4618      	mov	r0, r3
    2e30:	4b0e      	ldr	r3, [pc, #56]	; (2e6c <timer_start+0x64>)
    2e32:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	699b      	ldr	r3, [r3, #24]
    2e3a:	687a      	ldr	r2, [r7, #4]
    2e3c:	3204      	adds	r2, #4
    2e3e:	4610      	mov	r0, r2
    2e40:	4798      	blx	r3
    2e42:	4603      	mov	r3, r0
    2e44:	2b00      	cmp	r3, #0
    2e46:	d002      	beq.n	2e4e <timer_start+0x46>
		return ERR_DENIED;
    2e48:	f06f 0310 	mvn.w	r3, #16
    2e4c:	e007      	b.n	2e5e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	681b      	ldr	r3, [r3, #0]
    2e52:	689b      	ldr	r3, [r3, #8]
    2e54:	687a      	ldr	r2, [r7, #4]
    2e56:	3204      	adds	r2, #4
    2e58:	4610      	mov	r0, r2
    2e5a:	4798      	blx	r3

	return ERR_NONE;
    2e5c:	2300      	movs	r3, #0
}
    2e5e:	4618      	mov	r0, r3
    2e60:	3708      	adds	r7, #8
    2e62:	46bd      	mov	sp, r7
    2e64:	bd80      	pop	{r7, pc}
    2e66:	bf00      	nop
    2e68:	00010014 	.word	0x00010014
    2e6c:	00003ba1 	.word	0x00003ba1

00002e70 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	b082      	sub	sp, #8
    2e74:	af00      	add	r7, sp, #0
    2e76:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d005      	beq.n	2e8a <timer_stop+0x1a>
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d001      	beq.n	2e8a <timer_stop+0x1a>
    2e86:	2301      	movs	r3, #1
    2e88:	e000      	b.n	2e8c <timer_stop+0x1c>
    2e8a:	2300      	movs	r3, #0
    2e8c:	f003 0301 	and.w	r3, r3, #1
    2e90:	b2db      	uxtb	r3, r3
    2e92:	2262      	movs	r2, #98	; 0x62
    2e94:	490f      	ldr	r1, [pc, #60]	; (2ed4 <timer_stop+0x64>)
    2e96:	4618      	mov	r0, r3
    2e98:	4b0f      	ldr	r3, [pc, #60]	; (2ed8 <timer_stop+0x68>)
    2e9a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	681b      	ldr	r3, [r3, #0]
    2ea0:	699b      	ldr	r3, [r3, #24]
    2ea2:	687a      	ldr	r2, [r7, #4]
    2ea4:	3204      	adds	r2, #4
    2ea6:	4610      	mov	r0, r2
    2ea8:	4798      	blx	r3
    2eaa:	4603      	mov	r3, r0
    2eac:	f083 0301 	eor.w	r3, r3, #1
    2eb0:	b2db      	uxtb	r3, r3
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d002      	beq.n	2ebc <timer_stop+0x4c>
		return ERR_DENIED;
    2eb6:	f06f 0310 	mvn.w	r3, #16
    2eba:	e007      	b.n	2ecc <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	68db      	ldr	r3, [r3, #12]
    2ec2:	687a      	ldr	r2, [r7, #4]
    2ec4:	3204      	adds	r2, #4
    2ec6:	4610      	mov	r0, r2
    2ec8:	4798      	blx	r3

	return ERR_NONE;
    2eca:	2300      	movs	r3, #0
}
    2ecc:	4618      	mov	r0, r3
    2ece:	3708      	adds	r7, #8
    2ed0:	46bd      	mov	sp, r7
    2ed2:	bd80      	pop	{r7, pc}
    2ed4:	00010014 	.word	0x00010014
    2ed8:	00003ba1 	.word	0x00003ba1

00002edc <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b084      	sub	sp, #16
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	6078      	str	r0, [r7, #4]
    2ee4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d008      	beq.n	2efe <timer_add_task+0x22>
    2eec:	683b      	ldr	r3, [r7, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d005      	beq.n	2efe <timer_add_task+0x22>
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	681b      	ldr	r3, [r3, #0]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d001      	beq.n	2efe <timer_add_task+0x22>
    2efa:	2301      	movs	r3, #1
    2efc:	e000      	b.n	2f00 <timer_add_task+0x24>
    2efe:	2300      	movs	r3, #0
    2f00:	f003 0301 	and.w	r3, r3, #1
    2f04:	b2db      	uxtb	r3, r3
    2f06:	227b      	movs	r2, #123	; 0x7b
    2f08:	492f      	ldr	r1, [pc, #188]	; (2fc8 <timer_add_task+0xec>)
    2f0a:	4618      	mov	r0, r3
    2f0c:	4b2f      	ldr	r3, [pc, #188]	; (2fcc <timer_add_task+0xf0>)
    2f0e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	7f1b      	ldrb	r3, [r3, #28]
    2f14:	b2db      	uxtb	r3, r3
    2f16:	f043 0301 	orr.w	r3, r3, #1
    2f1a:	b2da      	uxtb	r2, r3
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	3318      	adds	r3, #24
    2f24:	6839      	ldr	r1, [r7, #0]
    2f26:	4618      	mov	r0, r3
    2f28:	4b29      	ldr	r3, [pc, #164]	; (2fd0 <timer_add_task+0xf4>)
    2f2a:	4798      	blx	r3
    2f2c:	4603      	mov	r3, r0
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d00f      	beq.n	2f52 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f32:	687b      	ldr	r3, [r7, #4]
    2f34:	7f1b      	ldrb	r3, [r3, #28]
    2f36:	b2db      	uxtb	r3, r3
    2f38:	f023 0301 	bic.w	r3, r3, #1
    2f3c:	b2da      	uxtb	r2, r3
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    2f42:	2280      	movs	r2, #128	; 0x80
    2f44:	4920      	ldr	r1, [pc, #128]	; (2fc8 <timer_add_task+0xec>)
    2f46:	2000      	movs	r0, #0
    2f48:	4b20      	ldr	r3, [pc, #128]	; (2fcc <timer_add_task+0xf0>)
    2f4a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2f4c:	f06f 0311 	mvn.w	r3, #17
    2f50:	e035      	b.n	2fbe <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	695a      	ldr	r2, [r3, #20]
    2f56:	683b      	ldr	r3, [r7, #0]
    2f58:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	f103 0018 	add.w	r0, r3, #24
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	695b      	ldr	r3, [r3, #20]
    2f64:	461a      	mov	r2, r3
    2f66:	6839      	ldr	r1, [r7, #0]
    2f68:	4b1a      	ldr	r3, [pc, #104]	; (2fd4 <timer_add_task+0xf8>)
    2f6a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	7f1b      	ldrb	r3, [r3, #28]
    2f70:	b2db      	uxtb	r3, r3
    2f72:	f023 0301 	bic.w	r3, r3, #1
    2f76:	b2da      	uxtb	r2, r3
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	7f1b      	ldrb	r3, [r3, #28]
    2f80:	b2db      	uxtb	r3, r3
    2f82:	f003 0302 	and.w	r3, r3, #2
    2f86:	2b00      	cmp	r3, #0
    2f88:	d018      	beq.n	2fbc <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    2f8a:	f107 030c 	add.w	r3, r7, #12
    2f8e:	4618      	mov	r0, r3
    2f90:	4b11      	ldr	r3, [pc, #68]	; (2fd8 <timer_add_task+0xfc>)
    2f92:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	7f1b      	ldrb	r3, [r3, #28]
    2f98:	b2db      	uxtb	r3, r3
    2f9a:	f023 0302 	bic.w	r3, r3, #2
    2f9e:	b2da      	uxtb	r2, r3
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	69db      	ldr	r3, [r3, #28]
    2faa:	687a      	ldr	r2, [r7, #4]
    2fac:	3204      	adds	r2, #4
    2fae:	4610      	mov	r0, r2
    2fb0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2fb2:	f107 030c 	add.w	r3, r7, #12
    2fb6:	4618      	mov	r0, r3
    2fb8:	4b08      	ldr	r3, [pc, #32]	; (2fdc <timer_add_task+0x100>)
    2fba:	4798      	blx	r3
	}

	return ERR_NONE;
    2fbc:	2300      	movs	r3, #0
}
    2fbe:	4618      	mov	r0, r3
    2fc0:	3710      	adds	r7, #16
    2fc2:	46bd      	mov	sp, r7
    2fc4:	bd80      	pop	{r7, pc}
    2fc6:	bf00      	nop
    2fc8:	00010014 	.word	0x00010014
    2fcc:	00003ba1 	.word	0x00003ba1
    2fd0:	00003bc9 	.word	0x00003bc9
    2fd4:	000030dd 	.word	0x000030dd
    2fd8:	0000bcfd 	.word	0x0000bcfd
    2fdc:	0000bd23 	.word	0x0000bd23

00002fe0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    2fe0:	b580      	push	{r7, lr}
    2fe2:	b084      	sub	sp, #16
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    2fe8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d008      	beq.n	3002 <timer_remove_task+0x22>
    2ff0:	683b      	ldr	r3, [r7, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d005      	beq.n	3002 <timer_remove_task+0x22>
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d001      	beq.n	3002 <timer_remove_task+0x22>
    2ffe:	2301      	movs	r3, #1
    3000:	e000      	b.n	3004 <timer_remove_task+0x24>
    3002:	2300      	movs	r3, #0
    3004:	f003 0301 	and.w	r3, r3, #1
    3008:	b2db      	uxtb	r3, r3
    300a:	2296      	movs	r2, #150	; 0x96
    300c:	492d      	ldr	r1, [pc, #180]	; (30c4 <timer_remove_task+0xe4>)
    300e:	4618      	mov	r0, r3
    3010:	4b2d      	ldr	r3, [pc, #180]	; (30c8 <timer_remove_task+0xe8>)
    3012:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3014:	687b      	ldr	r3, [r7, #4]
    3016:	7f1b      	ldrb	r3, [r3, #28]
    3018:	b2db      	uxtb	r3, r3
    301a:	f043 0301 	orr.w	r3, r3, #1
    301e:	b2da      	uxtb	r2, r3
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	3318      	adds	r3, #24
    3028:	6839      	ldr	r1, [r7, #0]
    302a:	4618      	mov	r0, r3
    302c:	4b27      	ldr	r3, [pc, #156]	; (30cc <timer_remove_task+0xec>)
    302e:	4798      	blx	r3
    3030:	4603      	mov	r3, r0
    3032:	f083 0301 	eor.w	r3, r3, #1
    3036:	b2db      	uxtb	r3, r3
    3038:	2b00      	cmp	r3, #0
    303a:	d00f      	beq.n	305c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	7f1b      	ldrb	r3, [r3, #28]
    3040:	b2db      	uxtb	r3, r3
    3042:	f023 0301 	bic.w	r3, r3, #1
    3046:	b2da      	uxtb	r2, r3
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    304c:	229b      	movs	r2, #155	; 0x9b
    304e:	491d      	ldr	r1, [pc, #116]	; (30c4 <timer_remove_task+0xe4>)
    3050:	2000      	movs	r0, #0
    3052:	4b1d      	ldr	r3, [pc, #116]	; (30c8 <timer_remove_task+0xe8>)
    3054:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3056:	f06f 0309 	mvn.w	r3, #9
    305a:	e02e      	b.n	30ba <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	3318      	adds	r3, #24
    3060:	6839      	ldr	r1, [r7, #0]
    3062:	4618      	mov	r0, r3
    3064:	4b1a      	ldr	r3, [pc, #104]	; (30d0 <timer_remove_task+0xf0>)
    3066:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	7f1b      	ldrb	r3, [r3, #28]
    306c:	b2db      	uxtb	r3, r3
    306e:	f023 0301 	bic.w	r3, r3, #1
    3072:	b2da      	uxtb	r2, r3
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3078:	687b      	ldr	r3, [r7, #4]
    307a:	7f1b      	ldrb	r3, [r3, #28]
    307c:	b2db      	uxtb	r3, r3
    307e:	f003 0302 	and.w	r3, r3, #2
    3082:	2b00      	cmp	r3, #0
    3084:	d018      	beq.n	30b8 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3086:	f107 030c 	add.w	r3, r7, #12
    308a:	4618      	mov	r0, r3
    308c:	4b11      	ldr	r3, [pc, #68]	; (30d4 <timer_remove_task+0xf4>)
    308e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	7f1b      	ldrb	r3, [r3, #28]
    3094:	b2db      	uxtb	r3, r3
    3096:	f023 0302 	bic.w	r3, r3, #2
    309a:	b2da      	uxtb	r2, r3
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	681b      	ldr	r3, [r3, #0]
    30a4:	69db      	ldr	r3, [r3, #28]
    30a6:	687a      	ldr	r2, [r7, #4]
    30a8:	3204      	adds	r2, #4
    30aa:	4610      	mov	r0, r2
    30ac:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    30ae:	f107 030c 	add.w	r3, r7, #12
    30b2:	4618      	mov	r0, r3
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <timer_remove_task+0xf8>)
    30b6:	4798      	blx	r3
	}

	return ERR_NONE;
    30b8:	2300      	movs	r3, #0
}
    30ba:	4618      	mov	r0, r3
    30bc:	3710      	adds	r7, #16
    30be:	46bd      	mov	sp, r7
    30c0:	bd80      	pop	{r7, pc}
    30c2:	bf00      	nop
    30c4:	00010014 	.word	0x00010014
    30c8:	00003ba1 	.word	0x00003ba1
    30cc:	00003bc9 	.word	0x00003bc9
    30d0:	00003d2b 	.word	0x00003d2b
    30d4:	0000bcfd 	.word	0x0000bcfd
    30d8:	0000bd23 	.word	0x0000bd23

000030dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b088      	sub	sp, #32
    30e0:	af00      	add	r7, sp, #0
    30e2:	60f8      	str	r0, [r7, #12]
    30e4:	60b9      	str	r1, [r7, #8]
    30e6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    30e8:	2300      	movs	r3, #0
    30ea:	61bb      	str	r3, [r7, #24]
    30ec:	68f8      	ldr	r0, [r7, #12]
    30ee:	4b23      	ldr	r3, [pc, #140]	; (317c <timer_add_timer_task+0xa0>)
    30f0:	4798      	blx	r3
    30f2:	6138      	str	r0, [r7, #16]

	if (!head) {
    30f4:	693b      	ldr	r3, [r7, #16]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d104      	bne.n	3104 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    30fa:	68b9      	ldr	r1, [r7, #8]
    30fc:	68f8      	ldr	r0, [r7, #12]
    30fe:	4b20      	ldr	r3, [pc, #128]	; (3180 <timer_add_timer_task+0xa4>)
    3100:	4798      	blx	r3
		return;
    3102:	e037      	b.n	3174 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3104:	693b      	ldr	r3, [r7, #16]
    3106:	61fb      	str	r3, [r7, #28]
    3108:	e022      	b.n	3150 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    310a:	69fb      	ldr	r3, [r7, #28]
    310c:	685a      	ldr	r2, [r3, #4]
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	429a      	cmp	r2, r3
    3112:	d808      	bhi.n	3126 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3114:	69fb      	ldr	r3, [r7, #28]
    3116:	689a      	ldr	r2, [r3, #8]
    3118:	69fb      	ldr	r3, [r7, #28]
    311a:	6859      	ldr	r1, [r3, #4]
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	1acb      	subs	r3, r1, r3
    3120:	4413      	add	r3, r2
    3122:	617b      	str	r3, [r7, #20]
    3124:	e009      	b.n	313a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3126:	69fb      	ldr	r3, [r7, #28]
    3128:	689a      	ldr	r2, [r3, #8]
    312a:	69fb      	ldr	r3, [r7, #28]
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	441a      	add	r2, r3
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	425b      	negs	r3, r3
    3134:	4413      	add	r3, r2
    3136:	3301      	adds	r3, #1
    3138:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    313a:	68bb      	ldr	r3, [r7, #8]
    313c:	689a      	ldr	r2, [r3, #8]
    313e:	697b      	ldr	r3, [r7, #20]
    3140:	429a      	cmp	r2, r3
    3142:	d909      	bls.n	3158 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3144:	69fb      	ldr	r3, [r7, #28]
    3146:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3148:	69f8      	ldr	r0, [r7, #28]
    314a:	4b0e      	ldr	r3, [pc, #56]	; (3184 <timer_add_timer_task+0xa8>)
    314c:	4798      	blx	r3
    314e:	61f8      	str	r0, [r7, #28]
    3150:	69fb      	ldr	r3, [r7, #28]
    3152:	2b00      	cmp	r3, #0
    3154:	d1d9      	bne.n	310a <timer_add_timer_task+0x2e>
    3156:	e000      	b.n	315a <timer_add_timer_task+0x7e>
			break;
    3158:	bf00      	nop
	}

	if (it == head) {
    315a:	69fa      	ldr	r2, [r7, #28]
    315c:	693b      	ldr	r3, [r7, #16]
    315e:	429a      	cmp	r2, r3
    3160:	d104      	bne.n	316c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    3162:	68b9      	ldr	r1, [r7, #8]
    3164:	68f8      	ldr	r0, [r7, #12]
    3166:	4b06      	ldr	r3, [pc, #24]	; (3180 <timer_add_timer_task+0xa4>)
    3168:	4798      	blx	r3
    316a:	e003      	b.n	3174 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    316c:	68b9      	ldr	r1, [r7, #8]
    316e:	69b8      	ldr	r0, [r7, #24]
    3170:	4b05      	ldr	r3, [pc, #20]	; (3188 <timer_add_timer_task+0xac>)
    3172:	4798      	blx	r3
	}
}
    3174:	3720      	adds	r7, #32
    3176:	46bd      	mov	sp, r7
    3178:	bd80      	pop	{r7, pc}
    317a:	bf00      	nop
    317c:	00002d61 	.word	0x00002d61
    3180:	00003c01 	.word	0x00003c01
    3184:	00002d79 	.word	0x00002d79
    3188:	00003c59 	.word	0x00003c59

0000318c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    318c:	b580      	push	{r7, lr}
    318e:	b086      	sub	sp, #24
    3190:	af00      	add	r7, sp, #0
    3192:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3194:	687b      	ldr	r3, [r7, #4]
    3196:	3b04      	subs	r3, #4
    3198:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    319a:	693b      	ldr	r3, [r7, #16]
    319c:	3318      	adds	r3, #24
    319e:	4618      	mov	r0, r3
    31a0:	4b27      	ldr	r3, [pc, #156]	; (3240 <timer_process_counted+0xb4>)
    31a2:	4798      	blx	r3
    31a4:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    31a6:	693b      	ldr	r3, [r7, #16]
    31a8:	695b      	ldr	r3, [r3, #20]
    31aa:	1c5a      	adds	r2, r3, #1
    31ac:	693b      	ldr	r3, [r7, #16]
    31ae:	615a      	str	r2, [r3, #20]
    31b0:	693b      	ldr	r3, [r7, #16]
    31b2:	695b      	ldr	r3, [r3, #20]
    31b4:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    31b6:	693b      	ldr	r3, [r7, #16]
    31b8:	7f1b      	ldrb	r3, [r3, #28]
    31ba:	b2db      	uxtb	r3, r3
    31bc:	f003 0301 	and.w	r3, r3, #1
    31c0:	2b00      	cmp	r3, #0
    31c2:	d106      	bne.n	31d2 <timer_process_counted+0x46>
    31c4:	693b      	ldr	r3, [r7, #16]
    31c6:	7f1b      	ldrb	r3, [r3, #28]
    31c8:	b2db      	uxtb	r3, r3
    31ca:	f003 0302 	and.w	r3, r3, #2
    31ce:	2b00      	cmp	r3, #0
    31d0:	d027      	beq.n	3222 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    31d2:	693b      	ldr	r3, [r7, #16]
    31d4:	7f1b      	ldrb	r3, [r3, #28]
    31d6:	b2db      	uxtb	r3, r3
    31d8:	f043 0302 	orr.w	r3, r3, #2
    31dc:	b2da      	uxtb	r2, r3
    31de:	693b      	ldr	r3, [r7, #16]
    31e0:	771a      	strb	r2, [r3, #28]
		return;
    31e2:	e029      	b.n	3238 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    31e4:	697b      	ldr	r3, [r7, #20]
    31e6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    31e8:	693b      	ldr	r3, [r7, #16]
    31ea:	3318      	adds	r3, #24
    31ec:	4618      	mov	r0, r3
    31ee:	4b15      	ldr	r3, [pc, #84]	; (3244 <timer_process_counted+0xb8>)
    31f0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    31f2:	68bb      	ldr	r3, [r7, #8]
    31f4:	7c1b      	ldrb	r3, [r3, #16]
    31f6:	2b01      	cmp	r3, #1
    31f8:	d109      	bne.n	320e <timer_process_counted+0x82>
			tmp->time_label = time;
    31fa:	68bb      	ldr	r3, [r7, #8]
    31fc:	68fa      	ldr	r2, [r7, #12]
    31fe:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3200:	693b      	ldr	r3, [r7, #16]
    3202:	3318      	adds	r3, #24
    3204:	68fa      	ldr	r2, [r7, #12]
    3206:	68b9      	ldr	r1, [r7, #8]
    3208:	4618      	mov	r0, r3
    320a:	4b0f      	ldr	r3, [pc, #60]	; (3248 <timer_process_counted+0xbc>)
    320c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    320e:	693b      	ldr	r3, [r7, #16]
    3210:	3318      	adds	r3, #24
    3212:	4618      	mov	r0, r3
    3214:	4b0a      	ldr	r3, [pc, #40]	; (3240 <timer_process_counted+0xb4>)
    3216:	4798      	blx	r3
    3218:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    321a:	68bb      	ldr	r3, [r7, #8]
    321c:	68db      	ldr	r3, [r3, #12]
    321e:	68b8      	ldr	r0, [r7, #8]
    3220:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3222:	697b      	ldr	r3, [r7, #20]
    3224:	2b00      	cmp	r3, #0
    3226:	d007      	beq.n	3238 <timer_process_counted+0xac>
    3228:	697b      	ldr	r3, [r7, #20]
    322a:	685b      	ldr	r3, [r3, #4]
    322c:	68fa      	ldr	r2, [r7, #12]
    322e:	1ad2      	subs	r2, r2, r3
    3230:	697b      	ldr	r3, [r7, #20]
    3232:	689b      	ldr	r3, [r3, #8]
    3234:	429a      	cmp	r2, r3
    3236:	d2d5      	bcs.n	31e4 <timer_process_counted+0x58>
	}
}
    3238:	3718      	adds	r7, #24
    323a:	46bd      	mov	sp, r7
    323c:	bd80      	pop	{r7, pc}
    323e:	bf00      	nop
    3240:	00002d61 	.word	0x00002d61
    3244:	00003cf9 	.word	0x00003cf9
    3248:	000030dd 	.word	0x000030dd

0000324c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    324c:	b480      	push	{r7}
    324e:	b085      	sub	sp, #20
    3250:	af00      	add	r7, sp, #0
    3252:	4603      	mov	r3, r0
    3254:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3256:	2300      	movs	r3, #0
    3258:	73fb      	strb	r3, [r7, #15]
    325a:	e029      	b.n	32b0 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3260:	4a19      	ldr	r2, [pc, #100]	; (32c8 <_usb_d_find_ep+0x7c>)
    3262:	015b      	lsls	r3, r3, #5
    3264:	4413      	add	r3, r2
    3266:	3301      	adds	r3, #1
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	79fa      	ldrb	r2, [r7, #7]
    326c:	429a      	cmp	r2, r3
    326e:	d102      	bne.n	3276 <_usb_d_find_ep+0x2a>
			return i;
    3270:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3274:	e022      	b.n	32bc <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3276:	f997 300f 	ldrsb.w	r3, [r7, #15]
    327a:	4a13      	ldr	r2, [pc, #76]	; (32c8 <_usb_d_find_ep+0x7c>)
    327c:	015b      	lsls	r3, r3, #5
    327e:	4413      	add	r3, r2
    3280:	781b      	ldrb	r3, [r3, #0]
    3282:	2b00      	cmp	r3, #0
    3284:	d10e      	bne.n	32a4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3286:	79fb      	ldrb	r3, [r7, #7]
    3288:	f003 030f 	and.w	r3, r3, #15
    328c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3290:	490d      	ldr	r1, [pc, #52]	; (32c8 <_usb_d_find_ep+0x7c>)
    3292:	0152      	lsls	r2, r2, #5
    3294:	440a      	add	r2, r1
    3296:	3201      	adds	r2, #1
    3298:	7812      	ldrb	r2, [r2, #0]
    329a:	4293      	cmp	r3, r2
    329c:	d102      	bne.n	32a4 <_usb_d_find_ep+0x58>
			return i;
    329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    32a2:	e00b      	b.n	32bc <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    32a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    32a8:	b2db      	uxtb	r3, r3
    32aa:	3301      	adds	r3, #1
    32ac:	b2db      	uxtb	r3, r3
    32ae:	73fb      	strb	r3, [r7, #15]
    32b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    32b4:	2b03      	cmp	r3, #3
    32b6:	ddd1      	ble.n	325c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    32b8:	f04f 33ff 	mov.w	r3, #4294967295
}
    32bc:	4618      	mov	r0, r3
    32be:	3714      	adds	r7, #20
    32c0:	46bd      	mov	sp, r7
    32c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    32c6:	4770      	bx	lr
    32c8:	2000092c 	.word	0x2000092c

000032cc <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b088      	sub	sp, #32
    32d0:	af00      	add	r7, sp, #0
    32d2:	60ba      	str	r2, [r7, #8]
    32d4:	607b      	str	r3, [r7, #4]
    32d6:	4603      	mov	r3, r0
    32d8:	73fb      	strb	r3, [r7, #15]
    32da:	460b      	mov	r3, r1
    32dc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    32de:	68bb      	ldr	r3, [r7, #8]
    32e0:	617b      	str	r3, [r7, #20]
    32e2:	687b      	ldr	r3, [r7, #4]
    32e4:	61bb      	str	r3, [r7, #24]
    32e6:	7bbb      	ldrb	r3, [r7, #14]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d004      	beq.n	32f6 <_usb_d_trans+0x2a>
    32ec:	7bfb      	ldrb	r3, [r7, #15]
    32ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    32f2:	b2db      	uxtb	r3, r3
    32f4:	e003      	b.n	32fe <_usb_d_trans+0x32>
    32f6:	7bfb      	ldrb	r3, [r7, #15]
    32f8:	f003 030f 	and.w	r3, r3, #15
    32fc:	b2db      	uxtb	r3, r3
    32fe:	773b      	strb	r3, [r7, #28]
    3300:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3304:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    3306:	f107 0314 	add.w	r3, r7, #20
    330a:	4618      	mov	r0, r3
    330c:	4b03      	ldr	r3, [pc, #12]	; (331c <_usb_d_trans+0x50>)
    330e:	4798      	blx	r3
    3310:	4603      	mov	r3, r0
}
    3312:	4618      	mov	r0, r3
    3314:	3720      	adds	r7, #32
    3316:	46bd      	mov	sp, r7
    3318:	bd80      	pop	{r7, pc}
    331a:	bf00      	nop
    331c:	0000b331 	.word	0x0000b331

00003320 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3320:	b480      	push	{r7}
    3322:	b085      	sub	sp, #20
    3324:	af00      	add	r7, sp, #0
    3326:	60f8      	str	r0, [r7, #12]
    3328:	60b9      	str	r1, [r7, #8]
    332a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    332c:	2300      	movs	r3, #0
}
    332e:	4618      	mov	r0, r3
    3330:	3714      	adds	r7, #20
    3332:	46bd      	mov	sp, r7
    3334:	f85d 7b04 	ldr.w	r7, [sp], #4
    3338:	4770      	bx	lr
	...

0000333c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    333c:	b580      	push	{r7, lr}
    333e:	b086      	sub	sp, #24
    3340:	af00      	add	r7, sp, #0
    3342:	4603      	mov	r3, r0
    3344:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3346:	79fb      	ldrb	r3, [r7, #7]
    3348:	4618      	mov	r0, r3
    334a:	4b2a      	ldr	r3, [pc, #168]	; (33f4 <usb_d_cb_trans_setup+0xb8>)
    334c:	4798      	blx	r3
    334e:	4603      	mov	r3, r0
    3350:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3352:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3356:	015b      	lsls	r3, r3, #5
    3358:	4a27      	ldr	r2, [pc, #156]	; (33f8 <usb_d_cb_trans_setup+0xbc>)
    335a:	4413      	add	r3, r2
    335c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    335e:	693b      	ldr	r3, [r7, #16]
    3360:	330c      	adds	r3, #12
    3362:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3364:	79fb      	ldrb	r3, [r7, #7]
    3366:	68f9      	ldr	r1, [r7, #12]
    3368:	4618      	mov	r0, r3
    336a:	4b24      	ldr	r3, [pc, #144]	; (33fc <usb_d_cb_trans_setup+0xc0>)
    336c:	4798      	blx	r3
    336e:	4603      	mov	r3, r0
    3370:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    3372:	7afb      	ldrb	r3, [r7, #11]
    3374:	2b08      	cmp	r3, #8
    3376:	d00d      	beq.n	3394 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3378:	79fb      	ldrb	r3, [r7, #7]
    337a:	2101      	movs	r1, #1
    337c:	4618      	mov	r0, r3
    337e:	4b20      	ldr	r3, [pc, #128]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    3380:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3382:	79fb      	ldrb	r3, [r7, #7]
    3384:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3388:	b2db      	uxtb	r3, r3
    338a:	2101      	movs	r1, #1
    338c:	4618      	mov	r0, r3
    338e:	4b1c      	ldr	r3, [pc, #112]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    3390:	4798      	blx	r3
		return;
    3392:	e02b      	b.n	33ec <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3394:	79fb      	ldrb	r3, [r7, #7]
    3396:	2100      	movs	r1, #0
    3398:	4618      	mov	r0, r3
    339a:	4b19      	ldr	r3, [pc, #100]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    339c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    339e:	79fb      	ldrb	r3, [r7, #7]
    33a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33a4:	b2db      	uxtb	r3, r3
    33a6:	2100      	movs	r1, #0
    33a8:	4618      	mov	r0, r3
    33aa:	4b15      	ldr	r3, [pc, #84]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    33ac:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    33ae:	693b      	ldr	r3, [r7, #16]
    33b0:	2201      	movs	r2, #1
    33b2:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    33b4:	693b      	ldr	r3, [r7, #16]
    33b6:	695b      	ldr	r3, [r3, #20]
    33b8:	79fa      	ldrb	r2, [r7, #7]
    33ba:	68f9      	ldr	r1, [r7, #12]
    33bc:	4610      	mov	r0, r2
    33be:	4798      	blx	r3
    33c0:	4603      	mov	r3, r0
    33c2:	f083 0301 	eor.w	r3, r3, #1
    33c6:	b2db      	uxtb	r3, r3
    33c8:	2b00      	cmp	r3, #0
    33ca:	d00f      	beq.n	33ec <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    33cc:	693b      	ldr	r3, [r7, #16]
    33ce:	2205      	movs	r2, #5
    33d0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    33d2:	79fb      	ldrb	r3, [r7, #7]
    33d4:	2101      	movs	r1, #1
    33d6:	4618      	mov	r0, r3
    33d8:	4b09      	ldr	r3, [pc, #36]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    33da:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    33dc:	79fb      	ldrb	r3, [r7, #7]
    33de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    33e2:	b2db      	uxtb	r3, r3
    33e4:	2101      	movs	r1, #1
    33e6:	4618      	mov	r0, r3
    33e8:	4b05      	ldr	r3, [pc, #20]	; (3400 <usb_d_cb_trans_setup+0xc4>)
    33ea:	4798      	blx	r3
	}
}
    33ec:	3718      	adds	r7, #24
    33ee:	46bd      	mov	sp, r7
    33f0:	bd80      	pop	{r7, pc}
    33f2:	bf00      	nop
    33f4:	0000324d 	.word	0x0000324d
    33f8:	2000092c 	.word	0x2000092c
    33fc:	0000b289 	.word	0x0000b289
    3400:	0000b101 	.word	0x0000b101

00003404 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3404:	b580      	push	{r7, lr}
    3406:	b084      	sub	sp, #16
    3408:	af00      	add	r7, sp, #0
    340a:	4603      	mov	r3, r0
    340c:	6039      	str	r1, [r7, #0]
    340e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3410:	79fb      	ldrb	r3, [r7, #7]
    3412:	4618      	mov	r0, r3
    3414:	4b0d      	ldr	r3, [pc, #52]	; (344c <usb_d_cb_trans_more+0x48>)
    3416:	4798      	blx	r3
    3418:	4603      	mov	r3, r0
    341a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    341c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3420:	015b      	lsls	r3, r3, #5
    3422:	4a0b      	ldr	r2, [pc, #44]	; (3450 <usb_d_cb_trans_more+0x4c>)
    3424:	4413      	add	r3, r2
    3426:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3428:	68bb      	ldr	r3, [r7, #8]
    342a:	789b      	ldrb	r3, [r3, #2]
    342c:	2b03      	cmp	r3, #3
    342e:	d107      	bne.n	3440 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3430:	68bb      	ldr	r3, [r7, #8]
    3432:	699b      	ldr	r3, [r3, #24]
    3434:	79fa      	ldrb	r2, [r7, #7]
    3436:	6839      	ldr	r1, [r7, #0]
    3438:	4610      	mov	r0, r2
    343a:	4798      	blx	r3
    343c:	4603      	mov	r3, r0
    343e:	e000      	b.n	3442 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3440:	2300      	movs	r3, #0
}
    3442:	4618      	mov	r0, r3
    3444:	3710      	adds	r7, #16
    3446:	46bd      	mov	sp, r7
    3448:	bd80      	pop	{r7, pc}
    344a:	bf00      	nop
    344c:	0000324d 	.word	0x0000324d
    3450:	2000092c 	.word	0x2000092c

00003454 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3454:	b590      	push	{r4, r7, lr}
    3456:	b087      	sub	sp, #28
    3458:	af02      	add	r7, sp, #8
    345a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	789b      	ldrb	r3, [r3, #2]
    3460:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	7b1b      	ldrb	r3, [r3, #12]
    3466:	f003 0380 	and.w	r3, r3, #128	; 0x80
    346a:	2b00      	cmp	r3, #0
    346c:	bf14      	ite	ne
    346e:	2301      	movne	r3, #1
    3470:	2300      	moveq	r3, #0
    3472:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3474:	7bfb      	ldrb	r3, [r7, #15]
    3476:	2b03      	cmp	r3, #3
    3478:	d13a      	bne.n	34f0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	69db      	ldr	r3, [r3, #28]
    347e:	687a      	ldr	r2, [r7, #4]
    3480:	7850      	ldrb	r0, [r2, #1]
    3482:	687a      	ldr	r2, [r7, #4]
    3484:	320c      	adds	r2, #12
    3486:	2101      	movs	r1, #1
    3488:	4798      	blx	r3
    348a:	4603      	mov	r3, r0
    348c:	737b      	strb	r3, [r7, #13]
		if (err) {
    348e:	7b7b      	ldrb	r3, [r7, #13]
    3490:	2b00      	cmp	r3, #0
    3492:	d015      	beq.n	34c0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	2205      	movs	r2, #5
    3498:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	2202      	movs	r2, #2
    349e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    34a0:	7bbb      	ldrb	r3, [r7, #14]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d002      	beq.n	34ac <usb_d_ctrl_trans_done+0x58>
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	785b      	ldrb	r3, [r3, #1]
    34aa:	e004      	b.n	34b6 <usb_d_ctrl_trans_done+0x62>
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	785b      	ldrb	r3, [r3, #1]
    34b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34b4:	b2db      	uxtb	r3, r3
    34b6:	2101      	movs	r1, #1
    34b8:	4618      	mov	r0, r3
    34ba:	4b15      	ldr	r3, [pc, #84]	; (3510 <usb_d_ctrl_trans_done+0xbc>)
    34bc:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    34be:	e022      	b.n	3506 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	2204      	movs	r2, #4
    34c4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	7858      	ldrb	r0, [r3, #1]
    34ca:	7bbb      	ldrb	r3, [r7, #14]
    34cc:	2b00      	cmp	r3, #0
    34ce:	bf14      	ite	ne
    34d0:	2301      	movne	r3, #1
    34d2:	2300      	moveq	r3, #0
    34d4:	b2db      	uxtb	r3, r3
    34d6:	f083 0301 	eor.w	r3, r3, #1
    34da:	b2db      	uxtb	r3, r3
    34dc:	f003 0301 	and.w	r3, r3, #1
    34e0:	b2d9      	uxtb	r1, r3
    34e2:	2301      	movs	r3, #1
    34e4:	9300      	str	r3, [sp, #0]
    34e6:	2300      	movs	r3, #0
    34e8:	2200      	movs	r2, #0
    34ea:	4c0a      	ldr	r4, [pc, #40]	; (3514 <usb_d_ctrl_trans_done+0xc0>)
    34ec:	47a0      	blx	r4
}
    34ee:	e00a      	b.n	3506 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	69db      	ldr	r3, [r3, #28]
    34f4:	687a      	ldr	r2, [r7, #4]
    34f6:	7850      	ldrb	r0, [r2, #1]
    34f8:	687a      	ldr	r2, [r7, #4]
    34fa:	320c      	adds	r2, #12
    34fc:	2100      	movs	r1, #0
    34fe:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	2202      	movs	r2, #2
    3504:	709a      	strb	r2, [r3, #2]
}
    3506:	bf00      	nop
    3508:	3714      	adds	r7, #20
    350a:	46bd      	mov	sp, r7
    350c:	bd90      	pop	{r4, r7, pc}
    350e:	bf00      	nop
    3510:	0000b101 	.word	0x0000b101
    3514:	000032cd 	.word	0x000032cd

00003518 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    3518:	b580      	push	{r7, lr}
    351a:	b086      	sub	sp, #24
    351c:	af00      	add	r7, sp, #0
    351e:	4603      	mov	r3, r0
    3520:	60b9      	str	r1, [r7, #8]
    3522:	607a      	str	r2, [r7, #4]
    3524:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3526:	7bfb      	ldrb	r3, [r7, #15]
    3528:	4618      	mov	r0, r3
    352a:	4b2f      	ldr	r3, [pc, #188]	; (35e8 <_usb_d_cb_trans_done+0xd0>)
    352c:	4798      	blx	r3
    352e:	4603      	mov	r3, r0
    3530:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3532:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3536:	015b      	lsls	r3, r3, #5
    3538:	4a2c      	ldr	r2, [pc, #176]	; (35ec <_usb_d_cb_trans_done+0xd4>)
    353a:	4413      	add	r3, r2
    353c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    353e:	68bb      	ldr	r3, [r7, #8]
    3540:	2b00      	cmp	r3, #0
    3542:	d10e      	bne.n	3562 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3544:	693b      	ldr	r3, [r7, #16]
    3546:	2200      	movs	r2, #0
    3548:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    354a:	693b      	ldr	r3, [r7, #16]
    354c:	781b      	ldrb	r3, [r3, #0]
    354e:	2b00      	cmp	r3, #0
    3550:	d103      	bne.n	355a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3552:	6938      	ldr	r0, [r7, #16]
    3554:	4b26      	ldr	r3, [pc, #152]	; (35f0 <_usb_d_cb_trans_done+0xd8>)
    3556:	4798      	blx	r3
			return;
    3558:	e043      	b.n	35e2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    355a:	693b      	ldr	r3, [r7, #16]
    355c:	2201      	movs	r2, #1
    355e:	709a      	strb	r2, [r3, #2]
    3560:	e038      	b.n	35d4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3562:	68bb      	ldr	r3, [r7, #8]
    3564:	2b01      	cmp	r3, #1
    3566:	d113      	bne.n	3590 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3568:	693b      	ldr	r3, [r7, #16]
    356a:	2202      	movs	r2, #2
    356c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    356e:	693b      	ldr	r3, [r7, #16]
    3570:	781b      	ldrb	r3, [r3, #0]
    3572:	2b00      	cmp	r3, #0
    3574:	d108      	bne.n	3588 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3576:	693b      	ldr	r3, [r7, #16]
    3578:	2202      	movs	r2, #2
    357a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    357c:	7bfb      	ldrb	r3, [r7, #15]
    357e:	2100      	movs	r1, #0
    3580:	4618      	mov	r0, r3
    3582:	4b1c      	ldr	r3, [pc, #112]	; (35f4 <_usb_d_cb_trans_done+0xdc>)
    3584:	4798      	blx	r3
    3586:	e025      	b.n	35d4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3588:	693b      	ldr	r3, [r7, #16]
    358a:	2205      	movs	r2, #5
    358c:	709a      	strb	r2, [r3, #2]
    358e:	e021      	b.n	35d4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3590:	68bb      	ldr	r3, [r7, #8]
    3592:	2b02      	cmp	r3, #2
    3594:	d10e      	bne.n	35b4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3596:	693b      	ldr	r3, [r7, #16]
    3598:	2204      	movs	r2, #4
    359a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    359c:	693b      	ldr	r3, [r7, #16]
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	2b00      	cmp	r3, #0
    35a2:	d103      	bne.n	35ac <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    35a4:	693b      	ldr	r3, [r7, #16]
    35a6:	2202      	movs	r2, #2
    35a8:	709a      	strb	r2, [r3, #2]
			return;
    35aa:	e01a      	b.n	35e2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    35ac:	693b      	ldr	r3, [r7, #16]
    35ae:	2201      	movs	r2, #1
    35b0:	709a      	strb	r2, [r3, #2]
    35b2:	e00f      	b.n	35d4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    35b4:	68bb      	ldr	r3, [r7, #8]
    35b6:	2b03      	cmp	r3, #3
    35b8:	d106      	bne.n	35c8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    35ba:	693b      	ldr	r3, [r7, #16]
    35bc:	2200      	movs	r2, #0
    35be:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    35c0:	693b      	ldr	r3, [r7, #16]
    35c2:	2205      	movs	r2, #5
    35c4:	70da      	strb	r2, [r3, #3]
    35c6:	e005      	b.n	35d4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    35c8:	693b      	ldr	r3, [r7, #16]
    35ca:	2206      	movs	r2, #6
    35cc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    35ce:	693b      	ldr	r3, [r7, #16]
    35d0:	2206      	movs	r2, #6
    35d2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    35d4:	693b      	ldr	r3, [r7, #16]
    35d6:	69db      	ldr	r3, [r3, #28]
    35d8:	693a      	ldr	r2, [r7, #16]
    35da:	78d1      	ldrb	r1, [r2, #3]
    35dc:	687a      	ldr	r2, [r7, #4]
    35de:	7bf8      	ldrb	r0, [r7, #15]
    35e0:	4798      	blx	r3
}
    35e2:	3718      	adds	r7, #24
    35e4:	46bd      	mov	sp, r7
    35e6:	bd80      	pop	{r7, pc}
    35e8:	0000324d 	.word	0x0000324d
    35ec:	2000092c 	.word	0x2000092c
    35f0:	00003455 	.word	0x00003455
    35f4:	0000b101 	.word	0x0000b101

000035f8 <usb_d_init>:

int32_t usb_d_init(void)
{
    35f8:	b580      	push	{r7, lr}
    35fa:	b082      	sub	sp, #8
    35fc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    35fe:	4b21      	ldr	r3, [pc, #132]	; (3684 <usb_d_init+0x8c>)
    3600:	4798      	blx	r3
    3602:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3604:	683b      	ldr	r3, [r7, #0]
    3606:	2b00      	cmp	r3, #0
    3608:	da01      	bge.n	360e <usb_d_init+0x16>
		return rc;
    360a:	683b      	ldr	r3, [r7, #0]
    360c:	e036      	b.n	367c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    360e:	2280      	movs	r2, #128	; 0x80
    3610:	2100      	movs	r1, #0
    3612:	481d      	ldr	r0, [pc, #116]	; (3688 <usb_d_init+0x90>)
    3614:	4b1d      	ldr	r3, [pc, #116]	; (368c <usb_d_init+0x94>)
    3616:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3618:	2300      	movs	r3, #0
    361a:	71fb      	strb	r3, [r7, #7]
    361c:	e01e      	b.n	365c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    361e:	79fb      	ldrb	r3, [r7, #7]
    3620:	4a19      	ldr	r2, [pc, #100]	; (3688 <usb_d_init+0x90>)
    3622:	015b      	lsls	r3, r3, #5
    3624:	4413      	add	r3, r2
    3626:	3301      	adds	r3, #1
    3628:	22ff      	movs	r2, #255	; 0xff
    362a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    362c:	79fb      	ldrb	r3, [r7, #7]
    362e:	4a16      	ldr	r2, [pc, #88]	; (3688 <usb_d_init+0x90>)
    3630:	015b      	lsls	r3, r3, #5
    3632:	4413      	add	r3, r2
    3634:	3314      	adds	r3, #20
    3636:	4a16      	ldr	r2, [pc, #88]	; (3690 <usb_d_init+0x98>)
    3638:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    363a:	79fb      	ldrb	r3, [r7, #7]
    363c:	4a12      	ldr	r2, [pc, #72]	; (3688 <usb_d_init+0x90>)
    363e:	015b      	lsls	r3, r3, #5
    3640:	4413      	add	r3, r2
    3642:	3318      	adds	r3, #24
    3644:	4a12      	ldr	r2, [pc, #72]	; (3690 <usb_d_init+0x98>)
    3646:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3648:	79fb      	ldrb	r3, [r7, #7]
    364a:	4a0f      	ldr	r2, [pc, #60]	; (3688 <usb_d_init+0x90>)
    364c:	015b      	lsls	r3, r3, #5
    364e:	4413      	add	r3, r2
    3650:	331c      	adds	r3, #28
    3652:	4a0f      	ldr	r2, [pc, #60]	; (3690 <usb_d_init+0x98>)
    3654:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3656:	79fb      	ldrb	r3, [r7, #7]
    3658:	3301      	adds	r3, #1
    365a:	71fb      	strb	r3, [r7, #7]
    365c:	79fb      	ldrb	r3, [r7, #7]
    365e:	2b03      	cmp	r3, #3
    3660:	d9dd      	bls.n	361e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3662:	490c      	ldr	r1, [pc, #48]	; (3694 <usb_d_init+0x9c>)
    3664:	2000      	movs	r0, #0
    3666:	4b0c      	ldr	r3, [pc, #48]	; (3698 <usb_d_init+0xa0>)
    3668:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    366a:	490c      	ldr	r1, [pc, #48]	; (369c <usb_d_init+0xa4>)
    366c:	2001      	movs	r0, #1
    366e:	4b0a      	ldr	r3, [pc, #40]	; (3698 <usb_d_init+0xa0>)
    3670:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3672:	490b      	ldr	r1, [pc, #44]	; (36a0 <usb_d_init+0xa8>)
    3674:	2002      	movs	r0, #2
    3676:	4b08      	ldr	r3, [pc, #32]	; (3698 <usb_d_init+0xa0>)
    3678:	4798      	blx	r3
	return ERR_NONE;
    367a:	2300      	movs	r3, #0
}
    367c:	4618      	mov	r0, r3
    367e:	3708      	adds	r7, #8
    3680:	46bd      	mov	sp, r7
    3682:	bd80      	pop	{r7, pc}
    3684:	0000a949 	.word	0x0000a949
    3688:	2000092c 	.word	0x2000092c
    368c:	0000fba9 	.word	0x0000fba9
    3690:	00003321 	.word	0x00003321
    3694:	0000333d 	.word	0x0000333d
    3698:	0000b591 	.word	0x0000b591
    369c:	00003405 	.word	0x00003405
    36a0:	00003519 	.word	0x00003519

000036a4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    36a4:	b580      	push	{r7, lr}
    36a6:	b082      	sub	sp, #8
    36a8:	af00      	add	r7, sp, #0
    36aa:	4603      	mov	r3, r0
    36ac:	6039      	str	r1, [r7, #0]
    36ae:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    36b0:	79fb      	ldrb	r3, [r7, #7]
    36b2:	6839      	ldr	r1, [r7, #0]
    36b4:	4618      	mov	r0, r3
    36b6:	4b03      	ldr	r3, [pc, #12]	; (36c4 <usb_d_register_callback+0x20>)
    36b8:	4798      	blx	r3
}
    36ba:	bf00      	nop
    36bc:	3708      	adds	r7, #8
    36be:	46bd      	mov	sp, r7
    36c0:	bd80      	pop	{r7, pc}
    36c2:	bf00      	nop
    36c4:	0000b549 	.word	0x0000b549

000036c8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    36cc:	4b02      	ldr	r3, [pc, #8]	; (36d8 <usb_d_enable+0x10>)
    36ce:	4798      	blx	r3
    36d0:	4603      	mov	r3, r0
}
    36d2:	4618      	mov	r0, r3
    36d4:	bd80      	pop	{r7, pc}
    36d6:	bf00      	nop
    36d8:	0000aa39 	.word	0x0000aa39

000036dc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    36dc:	b580      	push	{r7, lr}
    36de:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    36e0:	4b01      	ldr	r3, [pc, #4]	; (36e8 <usb_d_attach+0xc>)
    36e2:	4798      	blx	r3
}
    36e4:	bf00      	nop
    36e6:	bd80      	pop	{r7, pc}
    36e8:	0000aabd 	.word	0x0000aabd

000036ec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b082      	sub	sp, #8
    36f0:	af00      	add	r7, sp, #0
    36f2:	4603      	mov	r3, r0
    36f4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    36f6:	79fb      	ldrb	r3, [r7, #7]
    36f8:	4618      	mov	r0, r3
    36fa:	4b03      	ldr	r3, [pc, #12]	; (3708 <usb_d_set_address+0x1c>)
    36fc:	4798      	blx	r3
}
    36fe:	bf00      	nop
    3700:	3708      	adds	r7, #8
    3702:	46bd      	mov	sp, r7
    3704:	bd80      	pop	{r7, pc}
    3706:	bf00      	nop
    3708:	0000aad1 	.word	0x0000aad1

0000370c <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    370c:	b580      	push	{r7, lr}
    370e:	b082      	sub	sp, #8
    3710:	af00      	add	r7, sp, #0
    3712:	4603      	mov	r3, r0
    3714:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3716:	79fb      	ldrb	r3, [r7, #7]
    3718:	b29b      	uxth	r3, r3
    371a:	461a      	mov	r2, r3
    371c:	2100      	movs	r1, #0
    371e:	2000      	movs	r0, #0
    3720:	4b03      	ldr	r3, [pc, #12]	; (3730 <usb_d_ep0_init+0x24>)
    3722:	4798      	blx	r3
    3724:	4603      	mov	r3, r0
}
    3726:	4618      	mov	r0, r3
    3728:	3708      	adds	r7, #8
    372a:	46bd      	mov	sp, r7
    372c:	bd80      	pop	{r7, pc}
    372e:	bf00      	nop
    3730:	00003735 	.word	0x00003735

00003734 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3734:	b580      	push	{r7, lr}
    3736:	b086      	sub	sp, #24
    3738:	af00      	add	r7, sp, #0
    373a:	4603      	mov	r3, r0
    373c:	71fb      	strb	r3, [r7, #7]
    373e:	460b      	mov	r3, r1
    3740:	71bb      	strb	r3, [r7, #6]
    3742:	4613      	mov	r3, r2
    3744:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3746:	79fb      	ldrb	r3, [r7, #7]
    3748:	4618      	mov	r0, r3
    374a:	4b1e      	ldr	r3, [pc, #120]	; (37c4 <usb_d_ep_init+0x90>)
    374c:	4798      	blx	r3
    374e:	4603      	mov	r3, r0
    3750:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3752:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3756:	015b      	lsls	r3, r3, #5
    3758:	4a1b      	ldr	r2, [pc, #108]	; (37c8 <usb_d_ep_init+0x94>)
    375a:	4413      	add	r3, r2
    375c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    375e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3762:	2b00      	cmp	r3, #0
    3764:	db02      	blt.n	376c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3766:	f06f 0313 	mvn.w	r3, #19
    376a:	e027      	b.n	37bc <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    376c:	20ff      	movs	r0, #255	; 0xff
    376e:	4b15      	ldr	r3, [pc, #84]	; (37c4 <usb_d_ep_init+0x90>)
    3770:	4798      	blx	r3
    3772:	4603      	mov	r3, r0
    3774:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3776:	f997 3017 	ldrsb.w	r3, [r7, #23]
    377a:	2b00      	cmp	r3, #0
    377c:	da02      	bge.n	3784 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    377e:	f06f 0314 	mvn.w	r3, #20
    3782:	e01b      	b.n	37bc <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3784:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3788:	015b      	lsls	r3, r3, #5
    378a:	4a0f      	ldr	r2, [pc, #60]	; (37c8 <usb_d_ep_init+0x94>)
    378c:	4413      	add	r3, r2
    378e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3790:	88ba      	ldrh	r2, [r7, #4]
    3792:	79b9      	ldrb	r1, [r7, #6]
    3794:	79fb      	ldrb	r3, [r7, #7]
    3796:	4618      	mov	r0, r3
    3798:	4b0c      	ldr	r3, [pc, #48]	; (37cc <usb_d_ep_init+0x98>)
    379a:	4798      	blx	r3
    379c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    379e:	68fb      	ldr	r3, [r7, #12]
    37a0:	2b00      	cmp	r3, #0
    37a2:	da01      	bge.n	37a8 <usb_d_ep_init+0x74>
		return rc;
    37a4:	68fb      	ldr	r3, [r7, #12]
    37a6:	e009      	b.n	37bc <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	79fa      	ldrb	r2, [r7, #7]
    37ac:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    37ae:	79bb      	ldrb	r3, [r7, #6]
    37b0:	f003 0303 	and.w	r3, r3, #3
    37b4:	b2da      	uxtb	r2, r3
    37b6:	693b      	ldr	r3, [r7, #16]
    37b8:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    37ba:	2300      	movs	r3, #0
}
    37bc:	4618      	mov	r0, r3
    37be:	3718      	adds	r7, #24
    37c0:	46bd      	mov	sp, r7
    37c2:	bd80      	pop	{r7, pc}
    37c4:	0000324d 	.word	0x0000324d
    37c8:	2000092c 	.word	0x2000092c
    37cc:	0000ab71 	.word	0x0000ab71

000037d0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    37d0:	b580      	push	{r7, lr}
    37d2:	b084      	sub	sp, #16
    37d4:	af00      	add	r7, sp, #0
    37d6:	4603      	mov	r3, r0
    37d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37da:	79fb      	ldrb	r3, [r7, #7]
    37dc:	4618      	mov	r0, r3
    37de:	4b0d      	ldr	r3, [pc, #52]	; (3814 <usb_d_ep_deinit+0x44>)
    37e0:	4798      	blx	r3
    37e2:	4603      	mov	r3, r0
    37e4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37ea:	015b      	lsls	r3, r3, #5
    37ec:	4a0a      	ldr	r2, [pc, #40]	; (3818 <usb_d_ep_deinit+0x48>)
    37ee:	4413      	add	r3, r2
    37f0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    37f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37f6:	2b00      	cmp	r3, #0
    37f8:	db07      	blt.n	380a <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    37fa:	79fb      	ldrb	r3, [r7, #7]
    37fc:	4618      	mov	r0, r3
    37fe:	4b07      	ldr	r3, [pc, #28]	; (381c <usb_d_ep_deinit+0x4c>)
    3800:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3802:	68bb      	ldr	r3, [r7, #8]
    3804:	22ff      	movs	r2, #255	; 0xff
    3806:	705a      	strb	r2, [r3, #1]
    3808:	e000      	b.n	380c <usb_d_ep_deinit+0x3c>
		return;
    380a:	bf00      	nop
}
    380c:	3710      	adds	r7, #16
    380e:	46bd      	mov	sp, r7
    3810:	bd80      	pop	{r7, pc}
    3812:	bf00      	nop
    3814:	0000324d 	.word	0x0000324d
    3818:	2000092c 	.word	0x2000092c
    381c:	0000aca5 	.word	0x0000aca5

00003820 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3820:	b580      	push	{r7, lr}
    3822:	b086      	sub	sp, #24
    3824:	af00      	add	r7, sp, #0
    3826:	4603      	mov	r3, r0
    3828:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    382a:	79fb      	ldrb	r3, [r7, #7]
    382c:	4618      	mov	r0, r3
    382e:	4b15      	ldr	r3, [pc, #84]	; (3884 <usb_d_ep_enable+0x64>)
    3830:	4798      	blx	r3
    3832:	4603      	mov	r3, r0
    3834:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3836:	f997 3017 	ldrsb.w	r3, [r7, #23]
    383a:	015b      	lsls	r3, r3, #5
    383c:	4a12      	ldr	r2, [pc, #72]	; (3888 <usb_d_ep_enable+0x68>)
    383e:	4413      	add	r3, r2
    3840:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3842:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3846:	2b00      	cmp	r3, #0
    3848:	da02      	bge.n	3850 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    384a:	f06f 0311 	mvn.w	r3, #17
    384e:	e014      	b.n	387a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3850:	693b      	ldr	r3, [r7, #16]
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	2b00      	cmp	r3, #0
    3856:	d101      	bne.n	385c <usb_d_ep_enable+0x3c>
    3858:	2202      	movs	r2, #2
    385a:	e000      	b.n	385e <usb_d_ep_enable+0x3e>
    385c:	2201      	movs	r2, #1
    385e:	693b      	ldr	r3, [r7, #16]
    3860:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3862:	79fb      	ldrb	r3, [r7, #7]
    3864:	4618      	mov	r0, r3
    3866:	4b09      	ldr	r3, [pc, #36]	; (388c <usb_d_ep_enable+0x6c>)
    3868:	4798      	blx	r3
    386a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    386c:	68fb      	ldr	r3, [r7, #12]
    386e:	2b00      	cmp	r3, #0
    3870:	da02      	bge.n	3878 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3872:	693b      	ldr	r3, [r7, #16]
    3874:	2200      	movs	r2, #0
    3876:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3878:	68fb      	ldr	r3, [r7, #12]
}
    387a:	4618      	mov	r0, r3
    387c:	3718      	adds	r7, #24
    387e:	46bd      	mov	sp, r7
    3880:	bd80      	pop	{r7, pc}
    3882:	bf00      	nop
    3884:	0000324d 	.word	0x0000324d
    3888:	2000092c 	.word	0x2000092c
    388c:	0000ad89 	.word	0x0000ad89

00003890 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3890:	b590      	push	{r4, r7, lr}
    3892:	b08d      	sub	sp, #52	; 0x34
    3894:	af02      	add	r7, sp, #8
    3896:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	7a1b      	ldrb	r3, [r3, #8]
    389c:	4618      	mov	r0, r3
    389e:	4b51      	ldr	r3, [pc, #324]	; (39e4 <usb_d_ep_transfer+0x154>)
    38a0:	4798      	blx	r3
    38a2:	4603      	mov	r3, r0
    38a4:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    38a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
    38aa:	015b      	lsls	r3, r3, #5
    38ac:	4a4e      	ldr	r2, [pc, #312]	; (39e8 <usb_d_ep_transfer+0x158>)
    38ae:	4413      	add	r3, r2
    38b0:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	7a1b      	ldrb	r3, [r3, #8]
    38b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    38ba:	2b00      	cmp	r3, #0
    38bc:	bf14      	ite	ne
    38be:	2301      	movne	r3, #1
    38c0:	2300      	moveq	r3, #0
    38c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	7a5b      	ldrb	r3, [r3, #9]
    38ca:	2b00      	cmp	r3, #0
    38cc:	bf14      	ite	ne
    38ce:	2301      	movne	r3, #1
    38d0:	2300      	moveq	r3, #0
    38d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    38d6:	687b      	ldr	r3, [r7, #4]
    38d8:	685b      	ldr	r3, [r3, #4]
    38da:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    38dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    38e0:	2b00      	cmp	r3, #0
    38e2:	da02      	bge.n	38ea <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    38e4:	f06f 0311 	mvn.w	r3, #17
    38e8:	e077      	b.n	39da <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    38ea:	f107 0308 	add.w	r3, r7, #8
    38ee:	4618      	mov	r0, r3
    38f0:	4b3e      	ldr	r3, [pc, #248]	; (39ec <usb_d_ep_transfer+0x15c>)
    38f2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    38f4:	69bb      	ldr	r3, [r7, #24]
    38f6:	789b      	ldrb	r3, [r3, #2]
    38f8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    38fa:	7bfb      	ldrb	r3, [r7, #15]
    38fc:	b2db      	uxtb	r3, r3
    38fe:	2b01      	cmp	r3, #1
    3900:	d10c      	bne.n	391c <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3902:	69bb      	ldr	r3, [r7, #24]
    3904:	2203      	movs	r2, #3
    3906:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3908:	f107 0308 	add.w	r3, r7, #8
    390c:	4618      	mov	r0, r3
    390e:	4b38      	ldr	r3, [pc, #224]	; (39f0 <usb_d_ep_transfer+0x160>)
    3910:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3912:	69bb      	ldr	r3, [r7, #24]
    3914:	781b      	ldrb	r3, [r3, #0]
    3916:	2b00      	cmp	r3, #0
    3918:	d151      	bne.n	39be <usb_d_ep_transfer+0x12e>
    391a:	e017      	b.n	394c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    391c:	f107 0308 	add.w	r3, r7, #8
    3920:	4618      	mov	r0, r3
    3922:	4b33      	ldr	r3, [pc, #204]	; (39f0 <usb_d_ep_transfer+0x160>)
    3924:	4798      	blx	r3
		switch (state) {
    3926:	7bfb      	ldrb	r3, [r7, #15]
    3928:	b2db      	uxtb	r3, r3
    392a:	2b05      	cmp	r3, #5
    392c:	d004      	beq.n	3938 <usb_d_ep_transfer+0xa8>
    392e:	2b06      	cmp	r3, #6
    3930:	d004      	beq.n	393c <usb_d_ep_transfer+0xac>
    3932:	2b00      	cmp	r3, #0
    3934:	d005      	beq.n	3942 <usb_d_ep_transfer+0xb2>
    3936:	e007      	b.n	3948 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3938:	2302      	movs	r3, #2
    393a:	e04e      	b.n	39da <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    393c:	f06f 030f 	mvn.w	r3, #15
    3940:	e04b      	b.n	39da <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3942:	f06f 0312 	mvn.w	r3, #18
    3946:	e048      	b.n	39da <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3948:	2301      	movs	r3, #1
    394a:	e046      	b.n	39da <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    394c:	69bb      	ldr	r3, [r7, #24]
    394e:	7c9b      	ldrb	r3, [r3, #18]
    3950:	b29a      	uxth	r2, r3
    3952:	69bb      	ldr	r3, [r7, #24]
    3954:	7cdb      	ldrb	r3, [r3, #19]
    3956:	b29b      	uxth	r3, r3
    3958:	021b      	lsls	r3, r3, #8
    395a:	b29b      	uxth	r3, r3
    395c:	4413      	add	r3, r2
    395e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3960:	8afb      	ldrh	r3, [r7, #22]
    3962:	2b00      	cmp	r3, #0
    3964:	d10b      	bne.n	397e <usb_d_ep_transfer+0xee>
			dir                 = true;
    3966:	2301      	movs	r3, #1
    3968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    396c:	2300      	movs	r3, #0
    396e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3970:	2301      	movs	r3, #1
    3972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3976:	69bb      	ldr	r3, [r7, #24]
    3978:	2204      	movs	r2, #4
    397a:	709a      	strb	r2, [r3, #2]
    397c:	e01f      	b.n	39be <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    397e:	69bb      	ldr	r3, [r7, #24]
    3980:	7b1b      	ldrb	r3, [r3, #12]
    3982:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3986:	2b00      	cmp	r3, #0
    3988:	bf14      	ite	ne
    398a:	2301      	movne	r3, #1
    398c:	2300      	moveq	r3, #0
    398e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3992:	8afa      	ldrh	r2, [r7, #22]
    3994:	6a3b      	ldr	r3, [r7, #32]
    3996:	429a      	cmp	r2, r3
    3998:	d201      	bcs.n	399e <usb_d_ep_transfer+0x10e>
				len = req_len;
    399a:	8afb      	ldrh	r3, [r7, #22]
    399c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    399e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    39a2:	2b00      	cmp	r3, #0
    39a4:	d008      	beq.n	39b8 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    39a6:	8afa      	ldrh	r2, [r7, #22]
    39a8:	6a3b      	ldr	r3, [r7, #32]
    39aa:	429a      	cmp	r2, r3
    39ac:	bf8c      	ite	hi
    39ae:	2301      	movhi	r3, #1
    39b0:	2300      	movls	r3, #0
    39b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    39b6:	e002      	b.n	39be <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    39b8:	2300      	movs	r3, #0
    39ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	7a18      	ldrb	r0, [r3, #8]
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	681a      	ldr	r2, [r3, #0]
    39c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    39ca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    39ce:	9300      	str	r3, [sp, #0]
    39d0:	6a3b      	ldr	r3, [r7, #32]
    39d2:	4c08      	ldr	r4, [pc, #32]	; (39f4 <usb_d_ep_transfer+0x164>)
    39d4:	47a0      	blx	r4
    39d6:	6138      	str	r0, [r7, #16]
	return rc;
    39d8:	693b      	ldr	r3, [r7, #16]
}
    39da:	4618      	mov	r0, r3
    39dc:	372c      	adds	r7, #44	; 0x2c
    39de:	46bd      	mov	sp, r7
    39e0:	bd90      	pop	{r4, r7, pc}
    39e2:	bf00      	nop
    39e4:	0000324d 	.word	0x0000324d
    39e8:	2000092c 	.word	0x2000092c
    39ec:	0000bcfd 	.word	0x0000bcfd
    39f0:	0000bd23 	.word	0x0000bd23
    39f4:	000032cd 	.word	0x000032cd

000039f8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b084      	sub	sp, #16
    39fc:	af00      	add	r7, sp, #0
    39fe:	4603      	mov	r3, r0
    3a00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a02:	79fb      	ldrb	r3, [r7, #7]
    3a04:	4618      	mov	r0, r3
    3a06:	4b0e      	ldr	r3, [pc, #56]	; (3a40 <usb_d_ep_abort+0x48>)
    3a08:	4798      	blx	r3
    3a0a:	4603      	mov	r3, r0
    3a0c:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a12:	015b      	lsls	r3, r3, #5
    3a14:	4a0b      	ldr	r2, [pc, #44]	; (3a44 <usb_d_ep_abort+0x4c>)
    3a16:	4413      	add	r3, r2
    3a18:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	db0a      	blt.n	3a38 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3a22:	79fb      	ldrb	r3, [r7, #7]
    3a24:	4618      	mov	r0, r3
    3a26:	4b08      	ldr	r3, [pc, #32]	; (3a48 <usb_d_ep_abort+0x50>)
    3a28:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3a2a:	68bb      	ldr	r3, [r7, #8]
    3a2c:	2201      	movs	r2, #1
    3a2e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3a30:	68bb      	ldr	r3, [r7, #8]
    3a32:	2204      	movs	r2, #4
    3a34:	70da      	strb	r2, [r3, #3]
    3a36:	e000      	b.n	3a3a <usb_d_ep_abort+0x42>
		return;
    3a38:	bf00      	nop
}
    3a3a:	3710      	adds	r7, #16
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	0000324d 	.word	0x0000324d
    3a44:	2000092c 	.word	0x2000092c
    3a48:	0000b4f5 	.word	0x0000b4f5

00003a4c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b086      	sub	sp, #24
    3a50:	af00      	add	r7, sp, #0
    3a52:	4603      	mov	r3, r0
    3a54:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a56:	79fb      	ldrb	r3, [r7, #7]
    3a58:	4618      	mov	r0, r3
    3a5a:	4b1a      	ldr	r3, [pc, #104]	; (3ac4 <_usb_d_ep_halt_clr+0x78>)
    3a5c:	4798      	blx	r3
    3a5e:	4603      	mov	r3, r0
    3a60:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a66:	015b      	lsls	r3, r3, #5
    3a68:	4a17      	ldr	r2, [pc, #92]	; (3ac8 <_usb_d_ep_halt_clr+0x7c>)
    3a6a:	4413      	add	r3, r2
    3a6c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a72:	2b00      	cmp	r3, #0
    3a74:	da02      	bge.n	3a7c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3a76:	f06f 0311 	mvn.w	r3, #17
    3a7a:	e01f      	b.n	3abc <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3a7c:	79fb      	ldrb	r3, [r7, #7]
    3a7e:	2102      	movs	r1, #2
    3a80:	4618      	mov	r0, r3
    3a82:	4b12      	ldr	r3, [pc, #72]	; (3acc <_usb_d_ep_halt_clr+0x80>)
    3a84:	4798      	blx	r3
    3a86:	4603      	mov	r3, r0
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d016      	beq.n	3aba <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3a8c:	79fb      	ldrb	r3, [r7, #7]
    3a8e:	2100      	movs	r1, #0
    3a90:	4618      	mov	r0, r3
    3a92:	4b0e      	ldr	r3, [pc, #56]	; (3acc <_usb_d_ep_halt_clr+0x80>)
    3a94:	4798      	blx	r3
    3a96:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3a98:	68fb      	ldr	r3, [r7, #12]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	da01      	bge.n	3aa2 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	e00c      	b.n	3abc <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3aa2:	693b      	ldr	r3, [r7, #16]
    3aa4:	2201      	movs	r2, #1
    3aa6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3aa8:	693b      	ldr	r3, [r7, #16]
    3aaa:	2203      	movs	r2, #3
    3aac:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3aae:	693b      	ldr	r3, [r7, #16]
    3ab0:	69db      	ldr	r3, [r3, #28]
    3ab2:	79f8      	ldrb	r0, [r7, #7]
    3ab4:	2200      	movs	r2, #0
    3ab6:	2103      	movs	r1, #3
    3ab8:	4798      	blx	r3
	}
	return ERR_NONE;
    3aba:	2300      	movs	r3, #0
}
    3abc:	4618      	mov	r0, r3
    3abe:	3718      	adds	r7, #24
    3ac0:	46bd      	mov	sp, r7
    3ac2:	bd80      	pop	{r7, pc}
    3ac4:	0000324d 	.word	0x0000324d
    3ac8:	2000092c 	.word	0x2000092c
    3acc:	0000b101 	.word	0x0000b101

00003ad0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3ad0:	b580      	push	{r7, lr}
    3ad2:	b082      	sub	sp, #8
    3ad4:	af00      	add	r7, sp, #0
    3ad6:	4603      	mov	r3, r0
    3ad8:	460a      	mov	r2, r1
    3ada:	71fb      	strb	r3, [r7, #7]
    3adc:	4613      	mov	r3, r2
    3ade:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3ae0:	79bb      	ldrb	r3, [r7, #6]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d105      	bne.n	3af2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3ae6:	79fb      	ldrb	r3, [r7, #7]
    3ae8:	4618      	mov	r0, r3
    3aea:	4b0c      	ldr	r3, [pc, #48]	; (3b1c <usb_d_ep_halt+0x4c>)
    3aec:	4798      	blx	r3
    3aee:	4603      	mov	r3, r0
    3af0:	e00f      	b.n	3b12 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3af2:	79bb      	ldrb	r3, [r7, #6]
    3af4:	2b01      	cmp	r3, #1
    3af6:	d106      	bne.n	3b06 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3af8:	79fb      	ldrb	r3, [r7, #7]
    3afa:	2101      	movs	r1, #1
    3afc:	4618      	mov	r0, r3
    3afe:	4b08      	ldr	r3, [pc, #32]	; (3b20 <usb_d_ep_halt+0x50>)
    3b00:	4798      	blx	r3
    3b02:	4603      	mov	r3, r0
    3b04:	e005      	b.n	3b12 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3b06:	79fb      	ldrb	r3, [r7, #7]
    3b08:	2102      	movs	r1, #2
    3b0a:	4618      	mov	r0, r3
    3b0c:	4b04      	ldr	r3, [pc, #16]	; (3b20 <usb_d_ep_halt+0x50>)
    3b0e:	4798      	blx	r3
    3b10:	4603      	mov	r3, r0
	}
}
    3b12:	4618      	mov	r0, r3
    3b14:	3708      	adds	r7, #8
    3b16:	46bd      	mov	sp, r7
    3b18:	bd80      	pop	{r7, pc}
    3b1a:	bf00      	nop
    3b1c:	00003a4d 	.word	0x00003a4d
    3b20:	0000b101 	.word	0x0000b101

00003b24 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3b24:	b580      	push	{r7, lr}
    3b26:	b086      	sub	sp, #24
    3b28:	af00      	add	r7, sp, #0
    3b2a:	4603      	mov	r3, r0
    3b2c:	603a      	str	r2, [r7, #0]
    3b2e:	71fb      	strb	r3, [r7, #7]
    3b30:	460b      	mov	r3, r1
    3b32:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b34:	79fb      	ldrb	r3, [r7, #7]
    3b36:	4618      	mov	r0, r3
    3b38:	4b16      	ldr	r3, [pc, #88]	; (3b94 <usb_d_ep_register_callback+0x70>)
    3b3a:	4798      	blx	r3
    3b3c:	4603      	mov	r3, r0
    3b3e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b44:	015b      	lsls	r3, r3, #5
    3b46:	4a14      	ldr	r2, [pc, #80]	; (3b98 <usb_d_ep_register_callback+0x74>)
    3b48:	4413      	add	r3, r2
    3b4a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d001      	beq.n	3b56 <usb_d_ep_register_callback+0x32>
    3b52:	683b      	ldr	r3, [r7, #0]
    3b54:	e000      	b.n	3b58 <usb_d_ep_register_callback+0x34>
    3b56:	4b11      	ldr	r3, [pc, #68]	; (3b9c <usb_d_ep_register_callback+0x78>)
    3b58:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	db13      	blt.n	3b8a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3b62:	79bb      	ldrb	r3, [r7, #6]
    3b64:	2b01      	cmp	r3, #1
    3b66:	d008      	beq.n	3b7a <usb_d_ep_register_callback+0x56>
    3b68:	2b02      	cmp	r3, #2
    3b6a:	d00a      	beq.n	3b82 <usb_d_ep_register_callback+0x5e>
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d000      	beq.n	3b72 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3b70:	e00c      	b.n	3b8c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3b72:	693b      	ldr	r3, [r7, #16]
    3b74:	68fa      	ldr	r2, [r7, #12]
    3b76:	615a      	str	r2, [r3, #20]
		break;
    3b78:	e008      	b.n	3b8c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3b7a:	693b      	ldr	r3, [r7, #16]
    3b7c:	68fa      	ldr	r2, [r7, #12]
    3b7e:	619a      	str	r2, [r3, #24]
		break;
    3b80:	e004      	b.n	3b8c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3b82:	693b      	ldr	r3, [r7, #16]
    3b84:	68fa      	ldr	r2, [r7, #12]
    3b86:	61da      	str	r2, [r3, #28]
		break;
    3b88:	e000      	b.n	3b8c <usb_d_ep_register_callback+0x68>
		return;
    3b8a:	bf00      	nop
	}
}
    3b8c:	3718      	adds	r7, #24
    3b8e:	46bd      	mov	sp, r7
    3b90:	bd80      	pop	{r7, pc}
    3b92:	bf00      	nop
    3b94:	0000324d 	.word	0x0000324d
    3b98:	2000092c 	.word	0x2000092c
    3b9c:	00003321 	.word	0x00003321

00003ba0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3ba0:	b480      	push	{r7}
    3ba2:	b085      	sub	sp, #20
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	4603      	mov	r3, r0
    3ba8:	60b9      	str	r1, [r7, #8]
    3baa:	607a      	str	r2, [r7, #4]
    3bac:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3bae:	7bfb      	ldrb	r3, [r7, #15]
    3bb0:	f083 0301 	eor.w	r3, r3, #1
    3bb4:	b2db      	uxtb	r3, r3
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d000      	beq.n	3bbc <assert+0x1c>
		__asm("BKPT #0");
    3bba:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3bbc:	bf00      	nop
    3bbe:	3714      	adds	r7, #20
    3bc0:	46bd      	mov	sp, r7
    3bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bc6:	4770      	bx	lr

00003bc8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3bc8:	b480      	push	{r7}
    3bca:	b085      	sub	sp, #20
    3bcc:	af00      	add	r7, sp, #0
    3bce:	6078      	str	r0, [r7, #4]
    3bd0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	60fb      	str	r3, [r7, #12]
    3bd8:	e008      	b.n	3bec <is_list_element+0x24>
		if (it == element) {
    3bda:	68fa      	ldr	r2, [r7, #12]
    3bdc:	683b      	ldr	r3, [r7, #0]
    3bde:	429a      	cmp	r2, r3
    3be0:	d101      	bne.n	3be6 <is_list_element+0x1e>
			return true;
    3be2:	2301      	movs	r3, #1
    3be4:	e006      	b.n	3bf4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3be6:	68fb      	ldr	r3, [r7, #12]
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	60fb      	str	r3, [r7, #12]
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d1f3      	bne.n	3bda <is_list_element+0x12>
		}
	}

	return false;
    3bf2:	2300      	movs	r3, #0
}
    3bf4:	4618      	mov	r0, r3
    3bf6:	3714      	adds	r7, #20
    3bf8:	46bd      	mov	sp, r7
    3bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bfe:	4770      	bx	lr

00003c00 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b082      	sub	sp, #8
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
    3c08:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3c0a:	6839      	ldr	r1, [r7, #0]
    3c0c:	6878      	ldr	r0, [r7, #4]
    3c0e:	4b0f      	ldr	r3, [pc, #60]	; (3c4c <list_insert_as_head+0x4c>)
    3c10:	4798      	blx	r3
    3c12:	4603      	mov	r3, r0
    3c14:	2b00      	cmp	r3, #0
    3c16:	bf14      	ite	ne
    3c18:	2301      	movne	r3, #1
    3c1a:	2300      	moveq	r3, #0
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	f083 0301 	eor.w	r3, r3, #1
    3c22:	b2db      	uxtb	r3, r3
    3c24:	f003 0301 	and.w	r3, r3, #1
    3c28:	b2db      	uxtb	r3, r3
    3c2a:	2239      	movs	r2, #57	; 0x39
    3c2c:	4908      	ldr	r1, [pc, #32]	; (3c50 <list_insert_as_head+0x50>)
    3c2e:	4618      	mov	r0, r3
    3c30:	4b08      	ldr	r3, [pc, #32]	; (3c54 <list_insert_as_head+0x54>)
    3c32:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	681a      	ldr	r2, [r3, #0]
    3c38:	683b      	ldr	r3, [r7, #0]
    3c3a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	683a      	ldr	r2, [r7, #0]
    3c40:	601a      	str	r2, [r3, #0]
}
    3c42:	bf00      	nop
    3c44:	3708      	adds	r7, #8
    3c46:	46bd      	mov	sp, r7
    3c48:	bd80      	pop	{r7, pc}
    3c4a:	bf00      	nop
    3c4c:	00003bc9 	.word	0x00003bc9
    3c50:	0001002c 	.word	0x0001002c
    3c54:	00003ba1 	.word	0x00003ba1

00003c58 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3c58:	b480      	push	{r7}
    3c5a:	b083      	sub	sp, #12
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
    3c60:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	681a      	ldr	r2, [r3, #0]
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	683a      	ldr	r2, [r7, #0]
    3c6e:	601a      	str	r2, [r3, #0]
}
    3c70:	bf00      	nop
    3c72:	370c      	adds	r7, #12
    3c74:	46bd      	mov	sp, r7
    3c76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7a:	4770      	bx	lr

00003c7c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	6078      	str	r0, [r7, #4]
    3c84:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3c8c:	6839      	ldr	r1, [r7, #0]
    3c8e:	6878      	ldr	r0, [r7, #4]
    3c90:	4b16      	ldr	r3, [pc, #88]	; (3cec <list_insert_at_end+0x70>)
    3c92:	4798      	blx	r3
    3c94:	4603      	mov	r3, r0
    3c96:	2b00      	cmp	r3, #0
    3c98:	bf14      	ite	ne
    3c9a:	2301      	movne	r3, #1
    3c9c:	2300      	moveq	r3, #0
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	f083 0301 	eor.w	r3, r3, #1
    3ca4:	b2db      	uxtb	r3, r3
    3ca6:	f003 0301 	and.w	r3, r3, #1
    3caa:	b2db      	uxtb	r3, r3
    3cac:	224f      	movs	r2, #79	; 0x4f
    3cae:	4910      	ldr	r1, [pc, #64]	; (3cf0 <list_insert_at_end+0x74>)
    3cb0:	4618      	mov	r0, r3
    3cb2:	4b10      	ldr	r3, [pc, #64]	; (3cf4 <list_insert_at_end+0x78>)
    3cb4:	4798      	blx	r3

	if (!list->head) {
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d109      	bne.n	3cd2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	683a      	ldr	r2, [r7, #0]
    3cc2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3cc4:	683b      	ldr	r3, [r7, #0]
    3cc6:	2200      	movs	r2, #0
    3cc8:	601a      	str	r2, [r3, #0]
		return;
    3cca:	e00c      	b.n	3ce6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3ccc:	68fb      	ldr	r3, [r7, #12]
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3cd2:	68fb      	ldr	r3, [r7, #12]
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d1f8      	bne.n	3ccc <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	683a      	ldr	r2, [r7, #0]
    3cde:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3ce0:	683b      	ldr	r3, [r7, #0]
    3ce2:	2200      	movs	r2, #0
    3ce4:	601a      	str	r2, [r3, #0]
}
    3ce6:	3710      	adds	r7, #16
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}
    3cec:	00003bc9 	.word	0x00003bc9
    3cf0:	0001002c 	.word	0x0001002c
    3cf4:	00003ba1 	.word	0x00003ba1

00003cf8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3cf8:	b480      	push	{r7}
    3cfa:	b085      	sub	sp, #20
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	2b00      	cmp	r3, #0
    3d06:	d009      	beq.n	3d1c <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3d0e:	687b      	ldr	r3, [r7, #4]
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	681a      	ldr	r2, [r3, #0]
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3d18:	68fb      	ldr	r3, [r7, #12]
    3d1a:	e000      	b.n	3d1e <list_remove_head+0x26>
	}

	return NULL;
    3d1c:	2300      	movs	r3, #0
}
    3d1e:	4618      	mov	r0, r3
    3d20:	3714      	adds	r7, #20
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr

00003d2a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3d2a:	b480      	push	{r7}
    3d2c:	b085      	sub	sp, #20
    3d2e:	af00      	add	r7, sp, #0
    3d30:	6078      	str	r0, [r7, #4]
    3d32:	6039      	str	r1, [r7, #0]
	if (!element) {
    3d34:	683b      	ldr	r3, [r7, #0]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d101      	bne.n	3d3e <list_delete_element+0x14>
		return false;
    3d3a:	2300      	movs	r3, #0
    3d3c:	e024      	b.n	3d88 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	681a      	ldr	r2, [r3, #0]
    3d42:	683b      	ldr	r3, [r7, #0]
    3d44:	429a      	cmp	r2, r3
    3d46:	d106      	bne.n	3d56 <list_delete_element+0x2c>
		list->head = list->head->next;
    3d48:	687b      	ldr	r3, [r7, #4]
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	681a      	ldr	r2, [r3, #0]
    3d4e:	687b      	ldr	r3, [r7, #4]
    3d50:	601a      	str	r2, [r3, #0]
		return true;
    3d52:	2301      	movs	r3, #1
    3d54:	e018      	b.n	3d88 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	681b      	ldr	r3, [r3, #0]
    3d5a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3d5c:	e002      	b.n	3d64 <list_delete_element+0x3a>
			it = it->next;
    3d5e:	68fb      	ldr	r3, [r7, #12]
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d004      	beq.n	3d74 <list_delete_element+0x4a>
    3d6a:	68fb      	ldr	r3, [r7, #12]
    3d6c:	681a      	ldr	r2, [r3, #0]
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	429a      	cmp	r2, r3
    3d72:	d1f4      	bne.n	3d5e <list_delete_element+0x34>
		}
		if (it) {
    3d74:	68fb      	ldr	r3, [r7, #12]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d005      	beq.n	3d86 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3d7a:	683b      	ldr	r3, [r7, #0]
    3d7c:	681a      	ldr	r2, [r3, #0]
    3d7e:	68fb      	ldr	r3, [r7, #12]
    3d80:	601a      	str	r2, [r3, #0]
			return true;
    3d82:	2301      	movs	r3, #1
    3d84:	e000      	b.n	3d88 <list_delete_element+0x5e>
		}
	}

	return false;
    3d86:	2300      	movs	r3, #0
}
    3d88:	4618      	mov	r0, r3
    3d8a:	3714      	adds	r7, #20
    3d8c:	46bd      	mov	sp, r7
    3d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d92:	4770      	bx	lr

00003d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3d94:	b480      	push	{r7}
    3d96:	b083      	sub	sp, #12
    3d98:	af00      	add	r7, sp, #0
    3d9a:	4603      	mov	r3, r0
    3d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3da2:	2b00      	cmp	r3, #0
    3da4:	db0b      	blt.n	3dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3da6:	4909      	ldr	r1, [pc, #36]	; (3dcc <__NVIC_EnableIRQ+0x38>)
    3da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3dac:	095b      	lsrs	r3, r3, #5
    3dae:	88fa      	ldrh	r2, [r7, #6]
    3db0:	f002 021f 	and.w	r2, r2, #31
    3db4:	2001      	movs	r0, #1
    3db6:	fa00 f202 	lsl.w	r2, r0, r2
    3dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3dbe:	bf00      	nop
    3dc0:	370c      	adds	r7, #12
    3dc2:	46bd      	mov	sp, r7
    3dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	e000e100 	.word	0xe000e100

00003dd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3dd0:	b480      	push	{r7}
    3dd2:	b083      	sub	sp, #12
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	4603      	mov	r3, r0
    3dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3dde:	2b00      	cmp	r3, #0
    3de0:	db10      	blt.n	3e04 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3de2:	490b      	ldr	r1, [pc, #44]	; (3e10 <__NVIC_DisableIRQ+0x40>)
    3de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3de8:	095b      	lsrs	r3, r3, #5
    3dea:	88fa      	ldrh	r2, [r7, #6]
    3dec:	f002 021f 	and.w	r2, r2, #31
    3df0:	2001      	movs	r0, #1
    3df2:	fa00 f202 	lsl.w	r2, r0, r2
    3df6:	3320      	adds	r3, #32
    3df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3dfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e00:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3e04:	bf00      	nop
    3e06:	370c      	adds	r7, #12
    3e08:	46bd      	mov	sp, r7
    3e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e0e:	4770      	bx	lr
    3e10:	e000e100 	.word	0xe000e100

00003e14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3e14:	b480      	push	{r7}
    3e16:	b083      	sub	sp, #12
    3e18:	af00      	add	r7, sp, #0
    3e1a:	4603      	mov	r3, r0
    3e1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e22:	2b00      	cmp	r3, #0
    3e24:	db0c      	blt.n	3e40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e26:	4909      	ldr	r1, [pc, #36]	; (3e4c <__NVIC_ClearPendingIRQ+0x38>)
    3e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3e2c:	095b      	lsrs	r3, r3, #5
    3e2e:	88fa      	ldrh	r2, [r7, #6]
    3e30:	f002 021f 	and.w	r2, r2, #31
    3e34:	2001      	movs	r0, #1
    3e36:	fa00 f202 	lsl.w	r2, r0, r2
    3e3a:	3360      	adds	r3, #96	; 0x60
    3e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3e40:	bf00      	nop
    3e42:	370c      	adds	r7, #12
    3e44:	46bd      	mov	sp, r7
    3e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4a:	4770      	bx	lr
    3e4c:	e000e100 	.word	0xe000e100

00003e50 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3e50:	b480      	push	{r7}
    3e52:	b083      	sub	sp, #12
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3e58:	687b      	ldr	r3, [r7, #4]
    3e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e5c:	095b      	lsrs	r3, r3, #5
    3e5e:	f003 0301 	and.w	r3, r3, #1
    3e62:	2b00      	cmp	r3, #0
    3e64:	bf14      	ite	ne
    3e66:	2301      	movne	r3, #1
    3e68:	2300      	moveq	r3, #0
    3e6a:	b2db      	uxtb	r3, r3
}
    3e6c:	4618      	mov	r0, r3
    3e6e:	370c      	adds	r7, #12
    3e70:	46bd      	mov	sp, r7
    3e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e76:	4770      	bx	lr

00003e78 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
    3e80:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	683a      	ldr	r2, [r7, #0]
    3e86:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3e88:	bf00      	nop
    3e8a:	370c      	adds	r7, #12
    3e8c:	46bd      	mov	sp, r7
    3e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e92:	4770      	bx	lr

00003e94 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    3e94:	b480      	push	{r7}
    3e96:	b083      	sub	sp, #12
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
    3e9c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	683a      	ldr	r2, [r7, #0]
    3ea2:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ea4:	bf00      	nop
    3ea6:	370c      	adds	r7, #12
    3ea8:	46bd      	mov	sp, r7
    3eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eae:	4770      	bx	lr

00003eb0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3eb0:	b480      	push	{r7}
    3eb2:	b083      	sub	sp, #12
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	699b      	ldr	r3, [r3, #24]
    3ebc:	f043 0201 	orr.w	r2, r3, #1
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ec4:	bf00      	nop
    3ec6:	370c      	adds	r7, #12
    3ec8:	46bd      	mov	sp, r7
    3eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ece:	4770      	bx	lr

00003ed0 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3ed0:	b480      	push	{r7}
    3ed2:	b085      	sub	sp, #20
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	699b      	ldr	r3, [r3, #24]
    3edc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	f003 0301 	and.w	r3, r3, #1
    3ee4:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	2b00      	cmp	r3, #0
    3eea:	bf14      	ite	ne
    3eec:	2301      	movne	r3, #1
    3eee:	2300      	moveq	r3, #0
    3ef0:	b2db      	uxtb	r3, r3
}
    3ef2:	4618      	mov	r0, r3
    3ef4:	3714      	adds	r7, #20
    3ef6:	46bd      	mov	sp, r7
    3ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efc:	4770      	bx	lr

00003efe <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3efe:	b480      	push	{r7}
    3f00:	b083      	sub	sp, #12
    3f02:	af00      	add	r7, sp, #0
    3f04:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	699b      	ldr	r3, [r3, #24]
    3f0a:	f023 0201 	bic.w	r2, r3, #1
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f12:	bf00      	nop
    3f14:	370c      	adds	r7, #12
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr

00003f1e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3f1e:	b480      	push	{r7}
    3f20:	b083      	sub	sp, #12
    3f22:	af00      	add	r7, sp, #0
    3f24:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	699b      	ldr	r3, [r3, #24]
    3f2a:	f043 0202 	orr.w	r2, r3, #2
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f32:	bf00      	nop
    3f34:	370c      	adds	r7, #12
    3f36:	46bd      	mov	sp, r7
    3f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3c:	4770      	bx	lr

00003f3e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3f3e:	b480      	push	{r7}
    3f40:	b083      	sub	sp, #12
    3f42:	af00      	add	r7, sp, #0
    3f44:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	699b      	ldr	r3, [r3, #24]
    3f4a:	f023 0202 	bic.w	r2, r3, #2
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f52:	bf00      	nop
    3f54:	370c      	adds	r7, #12
    3f56:	46bd      	mov	sp, r7
    3f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5c:	4770      	bx	lr

00003f5e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3f5e:	b480      	push	{r7}
    3f60:	b083      	sub	sp, #12
    3f62:	af00      	add	r7, sp, #0
    3f64:	6078      	str	r0, [r7, #4]
    3f66:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	699a      	ldr	r2, [r3, #24]
    3f6c:	683b      	ldr	r3, [r7, #0]
    3f6e:	431a      	orrs	r2, r3
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f74:	bf00      	nop
    3f76:	370c      	adds	r7, #12
    3f78:	46bd      	mov	sp, r7
    3f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7e:	4770      	bx	lr

00003f80 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3f80:	b480      	push	{r7}
    3f82:	b083      	sub	sp, #12
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
    3f88:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	683a      	ldr	r2, [r7, #0]
    3f8e:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3f90:	bf00      	nop
    3f92:	370c      	adds	r7, #12
    3f94:	46bd      	mov	sp, r7
    3f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9a:	4770      	bx	lr

00003f9c <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3f9c:	b480      	push	{r7}
    3f9e:	b083      	sub	sp, #12
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
    3fa4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	683a      	ldr	r2, [r7, #0]
    3faa:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fac:	bf00      	nop
    3fae:	370c      	adds	r7, #12
    3fb0:	46bd      	mov	sp, r7
    3fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb6:	4770      	bx	lr

00003fb8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3fb8:	b480      	push	{r7}
    3fba:	b083      	sub	sp, #12
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3fc4:	4618      	mov	r0, r3
    3fc6:	370c      	adds	r7, #12
    3fc8:	46bd      	mov	sp, r7
    3fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fce:	4770      	bx	lr

00003fd0 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3fd0:	b480      	push	{r7}
    3fd2:	b083      	sub	sp, #12
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
    3fd8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	683a      	ldr	r2, [r7, #0]
    3fde:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3fe0:	bf00      	nop
    3fe2:	370c      	adds	r7, #12
    3fe4:	46bd      	mov	sp, r7
    3fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fea:	4770      	bx	lr

00003fec <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3fec:	b480      	push	{r7}
    3fee:	b083      	sub	sp, #12
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    3ff4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3ff6:	687b      	ldr	r3, [r7, #4]
    3ff8:	683a      	ldr	r2, [r7, #0]
    3ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3ffe:	bf00      	nop
    4000:	370c      	adds	r7, #12
    4002:	46bd      	mov	sp, r7
    4004:	f85d 7b04 	ldr.w	r7, [sp], #4
    4008:	4770      	bx	lr

0000400a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    400a:	b480      	push	{r7}
    400c:	b083      	sub	sp, #12
    400e:	af00      	add	r7, sp, #0
    4010:	6078      	str	r0, [r7, #4]
    4012:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	683a      	ldr	r2, [r7, #0]
    4018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    401c:	bf00      	nop
    401e:	370c      	adds	r7, #12
    4020:	46bd      	mov	sp, r7
    4022:	f85d 7b04 	ldr.w	r7, [sp], #4
    4026:	4770      	bx	lr

00004028 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4028:	b480      	push	{r7}
    402a:	b083      	sub	sp, #12
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
    4030:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	683a      	ldr	r2, [r7, #0]
    4036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    403a:	bf00      	nop
    403c:	370c      	adds	r7, #12
    403e:	46bd      	mov	sp, r7
    4040:	f85d 7b04 	ldr.w	r7, [sp], #4
    4044:	4770      	bx	lr

00004046 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4046:	b480      	push	{r7}
    4048:	b083      	sub	sp, #12
    404a:	af00      	add	r7, sp, #0
    404c:	6078      	str	r0, [r7, #4]
    404e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	683a      	ldr	r2, [r7, #0]
    4054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4058:	bf00      	nop
    405a:	370c      	adds	r7, #12
    405c:	46bd      	mov	sp, r7
    405e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4062:	4770      	bx	lr

00004064 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4064:	b480      	push	{r7}
    4066:	b083      	sub	sp, #12
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
    406c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	683a      	ldr	r2, [r7, #0]
    4072:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4076:	bf00      	nop
    4078:	370c      	adds	r7, #12
    407a:	46bd      	mov	sp, r7
    407c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4080:	4770      	bx	lr

00004082 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    4082:	b480      	push	{r7}
    4084:	b083      	sub	sp, #12
    4086:	af00      	add	r7, sp, #0
    4088:	6078      	str	r0, [r7, #4]
    408a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	683a      	ldr	r2, [r7, #0]
    4090:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4094:	bf00      	nop
    4096:	370c      	adds	r7, #12
    4098:	46bd      	mov	sp, r7
    409a:	f85d 7b04 	ldr.w	r7, [sp], #4
    409e:	4770      	bx	lr

000040a0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    40a0:	b480      	push	{r7}
    40a2:	b083      	sub	sp, #12
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    40a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	683a      	ldr	r2, [r7, #0]
    40ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    40b2:	bf00      	nop
    40b4:	370c      	adds	r7, #12
    40b6:	46bd      	mov	sp, r7
    40b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40bc:	4770      	bx	lr

000040be <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    40be:	b480      	push	{r7}
    40c0:	b083      	sub	sp, #12
    40c2:	af00      	add	r7, sp, #0
    40c4:	6078      	str	r0, [r7, #4]
    40c6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	683a      	ldr	r2, [r7, #0]
    40cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    40d0:	bf00      	nop
    40d2:	370c      	adds	r7, #12
    40d4:	46bd      	mov	sp, r7
    40d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40da:	4770      	bx	lr

000040dc <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
    40e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	683a      	ldr	r2, [r7, #0]
    40ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    40ee:	bf00      	nop
    40f0:	370c      	adds	r7, #12
    40f2:	46bd      	mov	sp, r7
    40f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f8:	4770      	bx	lr
	...

000040fc <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b082      	sub	sp, #8
    4100:	af00      	add	r7, sp, #0
    4102:	6078      	str	r0, [r7, #4]
    4104:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	683a      	ldr	r2, [r7, #0]
    410a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	681b      	ldr	r3, [r3, #0]
    4110:	4618      	mov	r0, r3
    4112:	4b55      	ldr	r3, [pc, #340]	; (4268 <_can_async_init+0x16c>)
    4114:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    4116:	bf00      	nop
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	681b      	ldr	r3, [r3, #0]
    411c:	4618      	mov	r0, r3
    411e:	4b53      	ldr	r3, [pc, #332]	; (426c <_can_async_init+0x170>)
    4120:	4798      	blx	r3
    4122:	4603      	mov	r3, r0
    4124:	f083 0301 	eor.w	r3, r3, #1
    4128:	b2db      	uxtb	r3, r3
    412a:	2b00      	cmp	r3, #0
    412c:	d1f4      	bne.n	4118 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	4618      	mov	r0, r3
    4134:	4b4e      	ldr	r3, [pc, #312]	; (4270 <_can_async_init+0x174>)
    4136:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4138:	683b      	ldr	r3, [r7, #0]
    413a:	4a4e      	ldr	r2, [pc, #312]	; (4274 <_can_async_init+0x178>)
    413c:	4293      	cmp	r3, r2
    413e:	d17a      	bne.n	4236 <_can_async_init+0x13a>
		_can1_dev    = dev;
    4140:	4a4d      	ldr	r2, [pc, #308]	; (4278 <_can_async_init+0x17c>)
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	4a4c      	ldr	r2, [pc, #304]	; (427c <_can_async_init+0x180>)
    414a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	f44f 7140 	mov.w	r1, #768	; 0x300
    4154:	4618      	mov	r0, r3
    4156:	4b4a      	ldr	r3, [pc, #296]	; (4280 <_can_async_init+0x184>)
    4158:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	2102      	movs	r1, #2
    4160:	4618      	mov	r0, r3
    4162:	4b48      	ldr	r3, [pc, #288]	; (4284 <_can_async_init+0x188>)
    4164:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	681b      	ldr	r3, [r3, #0]
    416a:	4947      	ldr	r1, [pc, #284]	; (4288 <_can_async_init+0x18c>)
    416c:	4618      	mov	r0, r3
    416e:	4b47      	ldr	r3, [pc, #284]	; (428c <_can_async_init+0x190>)
    4170:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	4946      	ldr	r1, [pc, #280]	; (4290 <_can_async_init+0x194>)
    4178:	4618      	mov	r0, r3
    417a:	4b46      	ldr	r3, [pc, #280]	; (4294 <_can_async_init+0x198>)
    417c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    417e:	687b      	ldr	r3, [r7, #4]
    4180:	681a      	ldr	r2, [r3, #0]
    4182:	4b45      	ldr	r3, [pc, #276]	; (4298 <_can_async_init+0x19c>)
    4184:	b29b      	uxth	r3, r3
    4186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    418e:	4619      	mov	r1, r3
    4190:	4610      	mov	r0, r2
    4192:	4b42      	ldr	r3, [pc, #264]	; (429c <_can_async_init+0x1a0>)
    4194:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4196:	687b      	ldr	r3, [r7, #4]
    4198:	681b      	ldr	r3, [r3, #0]
    419a:	2107      	movs	r1, #7
    419c:	4618      	mov	r0, r3
    419e:	4b40      	ldr	r3, [pc, #256]	; (42a0 <_can_async_init+0x1a4>)
    41a0:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	2107      	movs	r1, #7
    41a8:	4618      	mov	r0, r3
    41aa:	4b3e      	ldr	r3, [pc, #248]	; (42a4 <_can_async_init+0x1a8>)
    41ac:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	681a      	ldr	r2, [r3, #0]
    41b2:	4b3d      	ldr	r3, [pc, #244]	; (42a8 <_can_async_init+0x1ac>)
    41b4:	b29b      	uxth	r3, r3
    41b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    41ba:	4619      	mov	r1, r3
    41bc:	4610      	mov	r0, r2
    41be:	4b3b      	ldr	r3, [pc, #236]	; (42ac <_can_async_init+0x1b0>)
    41c0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	681a      	ldr	r2, [r3, #0]
    41c6:	4b3a      	ldr	r3, [pc, #232]	; (42b0 <_can_async_init+0x1b4>)
    41c8:	b29b      	uxth	r3, r3
    41ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    41ce:	4619      	mov	r1, r3
    41d0:	4610      	mov	r0, r2
    41d2:	4b38      	ldr	r3, [pc, #224]	; (42b4 <_can_async_init+0x1b8>)
    41d4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	681b      	ldr	r3, [r3, #0]
    41da:	2108      	movs	r1, #8
    41dc:	4618      	mov	r0, r3
    41de:	4b36      	ldr	r3, [pc, #216]	; (42b8 <_can_async_init+0x1bc>)
    41e0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    41e2:	687b      	ldr	r3, [r7, #4]
    41e4:	681a      	ldr	r2, [r3, #0]
    41e6:	4b35      	ldr	r3, [pc, #212]	; (42bc <_can_async_init+0x1c0>)
    41e8:	b29b      	uxth	r3, r3
    41ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    41ee:	4619      	mov	r1, r3
    41f0:	4610      	mov	r0, r2
    41f2:	4b33      	ldr	r3, [pc, #204]	; (42c0 <_can_async_init+0x1c4>)
    41f4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	681a      	ldr	r2, [r3, #0]
    41fa:	4b32      	ldr	r3, [pc, #200]	; (42c4 <_can_async_init+0x1c8>)
    41fc:	b29b      	uxth	r3, r3
    41fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4202:	4619      	mov	r1, r3
    4204:	4610      	mov	r0, r2
    4206:	4b30      	ldr	r3, [pc, #192]	; (42c8 <_can_async_init+0x1cc>)
    4208:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4212:	4618      	mov	r0, r3
    4214:	4b2d      	ldr	r3, [pc, #180]	; (42cc <_can_async_init+0x1d0>)
    4216:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    4218:	204f      	movs	r0, #79	; 0x4f
    421a:	4b2d      	ldr	r3, [pc, #180]	; (42d0 <_can_async_init+0x1d4>)
    421c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    421e:	204f      	movs	r0, #79	; 0x4f
    4220:	4b2c      	ldr	r3, [pc, #176]	; (42d4 <_can_async_init+0x1d8>)
    4222:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4224:	204f      	movs	r0, #79	; 0x4f
    4226:	4b2c      	ldr	r3, [pc, #176]	; (42d8 <_can_async_init+0x1dc>)
    4228:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	2101      	movs	r1, #1
    4230:	4618      	mov	r0, r3
    4232:	4b2a      	ldr	r3, [pc, #168]	; (42dc <_can_async_init+0x1e0>)
    4234:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	4618      	mov	r0, r3
    423c:	4b28      	ldr	r3, [pc, #160]	; (42e0 <_can_async_init+0x1e4>)
    423e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	681b      	ldr	r3, [r3, #0]
    4244:	4618      	mov	r0, r3
    4246:	4b27      	ldr	r3, [pc, #156]	; (42e4 <_can_async_init+0x1e8>)
    4248:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    424a:	bf00      	nop
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	681b      	ldr	r3, [r3, #0]
    4250:	4618      	mov	r0, r3
    4252:	4b06      	ldr	r3, [pc, #24]	; (426c <_can_async_init+0x170>)
    4254:	4798      	blx	r3
    4256:	4603      	mov	r3, r0
    4258:	2b00      	cmp	r3, #0
    425a:	d1f7      	bne.n	424c <_can_async_init+0x150>
	};

	return ERR_NONE;
    425c:	2300      	movs	r3, #0
}
    425e:	4618      	mov	r0, r3
    4260:	3708      	adds	r7, #8
    4262:	46bd      	mov	sp, r7
    4264:	bd80      	pop	{r7, pc}
    4266:	bf00      	nop
    4268:	00003eb1 	.word	0x00003eb1
    426c:	00003ed1 	.word	0x00003ed1
    4270:	00003f1f 	.word	0x00003f1f
    4274:	42000400 	.word	0x42000400
    4278:	20000a4c 	.word	0x20000a4c
    427c:	20000004 	.word	0x20000004
    4280:	00003f5f 	.word	0x00003f5f
    4284:	00003e79 	.word	0x00003e79
    4288:	00010c01 	.word	0x00010c01
    428c:	00003f81 	.word	0x00003f81
    4290:	00010c10 	.word	0x00010c10
    4294:	00003e95 	.word	0x00003e95
    4298:	20001550 	.word	0x20001550
    429c:	00004065 	.word	0x00004065
    42a0:	00004083 	.word	0x00004083
    42a4:	000040bf 	.word	0x000040bf
    42a8:	20001508 	.word	0x20001508
    42ac:	000040a1 	.word	0x000040a1
    42b0:	200009ac 	.word	0x200009ac
    42b4:	000040dd 	.word	0x000040dd
    42b8:	00003fed 	.word	0x00003fed
    42bc:	200009bc 	.word	0x200009bc
    42c0:	0000400b 	.word	0x0000400b
    42c4:	20000a3c 	.word	0x20000a3c
    42c8:	00004029 	.word	0x00004029
    42cc:	00004047 	.word	0x00004047
    42d0:	00003dd1 	.word	0x00003dd1
    42d4:	00003e15 	.word	0x00003e15
    42d8:	00003d95 	.word	0x00003d95
    42dc:	00003fd1 	.word	0x00003fd1
    42e0:	00003f3f 	.word	0x00003f3f
    42e4:	00003eff 	.word	0x00003eff

000042e8 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    42e8:	b590      	push	{r4, r7, lr}
    42ea:	b083      	sub	sp, #12
    42ec:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    42ee:	4b2c      	ldr	r3, [pc, #176]	; (43a0 <CAN1_Handler+0xb8>)
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	4618      	mov	r0, r3
    42fa:	4b2a      	ldr	r3, [pc, #168]	; (43a4 <CAN1_Handler+0xbc>)
    42fc:	4798      	blx	r3
    42fe:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	f003 0301 	and.w	r3, r3, #1
    4306:	2b00      	cmp	r3, #0
    4308:	d003      	beq.n	4312 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    430a:	687b      	ldr	r3, [r7, #4]
    430c:	689b      	ldr	r3, [r3, #8]
    430e:	6878      	ldr	r0, [r7, #4]
    4310:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4312:	683b      	ldr	r3, [r7, #0]
    4314:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4318:	2b00      	cmp	r3, #0
    431a:	d003      	beq.n	4324 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	685b      	ldr	r3, [r3, #4]
    4320:	6878      	ldr	r0, [r7, #4]
    4322:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4324:	683b      	ldr	r3, [r7, #0]
    4326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    432a:	2b00      	cmp	r3, #0
    432c:	d004      	beq.n	4338 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	68db      	ldr	r3, [r3, #12]
    4332:	2103      	movs	r1, #3
    4334:	6878      	ldr	r0, [r7, #4]
    4336:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4338:	683b      	ldr	r3, [r7, #0]
    433a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    433e:	2b00      	cmp	r3, #0
    4340:	d004      	beq.n	434c <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	68db      	ldr	r3, [r3, #12]
    4346:	2100      	movs	r1, #0
    4348:	6878      	ldr	r0, [r7, #4]
    434a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    434c:	683b      	ldr	r3, [r7, #0]
    434e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    4352:	2b00      	cmp	r3, #0
    4354:	d00f      	beq.n	4376 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	68dc      	ldr	r4, [r3, #12]
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	4618      	mov	r0, r3
    4360:	4b11      	ldr	r3, [pc, #68]	; (43a8 <CAN1_Handler+0xc0>)
    4362:	4798      	blx	r3
    4364:	4603      	mov	r3, r0
    4366:	2b00      	cmp	r3, #0
    4368:	d001      	beq.n	436e <CAN1_Handler+0x86>
    436a:	2302      	movs	r3, #2
    436c:	e000      	b.n	4370 <CAN1_Handler+0x88>
    436e:	2301      	movs	r3, #1
    4370:	4619      	mov	r1, r3
    4372:	6878      	ldr	r0, [r7, #4]
    4374:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    4376:	683b      	ldr	r3, [r7, #0]
    4378:	f003 0308 	and.w	r3, r3, #8
    437c:	2b00      	cmp	r3, #0
    437e:	d004      	beq.n	438a <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	68db      	ldr	r3, [r3, #12]
    4384:	2104      	movs	r1, #4
    4386:	6878      	ldr	r0, [r7, #4]
    4388:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	681b      	ldr	r3, [r3, #0]
    438e:	6839      	ldr	r1, [r7, #0]
    4390:	4618      	mov	r0, r3
    4392:	4b06      	ldr	r3, [pc, #24]	; (43ac <CAN1_Handler+0xc4>)
    4394:	4798      	blx	r3
}
    4396:	bf00      	nop
    4398:	370c      	adds	r7, #12
    439a:	46bd      	mov	sp, r7
    439c:	bd90      	pop	{r4, r7, pc}
    439e:	bf00      	nop
    43a0:	20000a4c 	.word	0x20000a4c
    43a4:	00003fb9 	.word	0x00003fb9
    43a8:	00003e51 	.word	0x00003e51
    43ac:	00003f9d 	.word	0x00003f9d

000043b0 <__NVIC_SetPendingIRQ>:
{
    43b0:	b480      	push	{r7}
    43b2:	b083      	sub	sp, #12
    43b4:	af00      	add	r7, sp, #0
    43b6:	4603      	mov	r3, r0
    43b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    43ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43be:	2b00      	cmp	r3, #0
    43c0:	db0c      	blt.n	43dc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43c2:	4909      	ldr	r1, [pc, #36]	; (43e8 <__NVIC_SetPendingIRQ+0x38>)
    43c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    43c8:	095b      	lsrs	r3, r3, #5
    43ca:	88fa      	ldrh	r2, [r7, #6]
    43cc:	f002 021f 	and.w	r2, r2, #31
    43d0:	2001      	movs	r0, #1
    43d2:	fa00 f202 	lsl.w	r2, r0, r2
    43d6:	3340      	adds	r3, #64	; 0x40
    43d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    43dc:	bf00      	nop
    43de:	370c      	adds	r7, #12
    43e0:	46bd      	mov	sp, r7
    43e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e6:	4770      	bx	lr
    43e8:	e000e100 	.word	0xe000e100

000043ec <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    43ec:	b580      	push	{r7, lr}
    43ee:	b082      	sub	sp, #8
    43f0:	af00      	add	r7, sp, #0
    43f2:	4603      	mov	r3, r0
    43f4:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    43f6:	79fb      	ldrb	r3, [r7, #7]
    43f8:	b21b      	sxth	r3, r3
    43fa:	4618      	mov	r0, r3
    43fc:	4b02      	ldr	r3, [pc, #8]	; (4408 <_irq_set+0x1c>)
    43fe:	4798      	blx	r3
}
    4400:	bf00      	nop
    4402:	3708      	adds	r7, #8
    4404:	46bd      	mov	sp, r7
    4406:	bd80      	pop	{r7, pc}
    4408:	000043b1 	.word	0x000043b1

0000440c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    440c:	b480      	push	{r7}
    440e:	b083      	sub	sp, #12
    4410:	af00      	add	r7, sp, #0
    4412:	4603      	mov	r3, r0
    4414:	6039      	str	r1, [r7, #0]
    4416:	80fb      	strh	r3, [r7, #6]
    4418:	4613      	mov	r3, r2
    441a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    441c:	797b      	ldrb	r3, [r7, #5]
    441e:	3b04      	subs	r3, #4
    4420:	2b05      	cmp	r3, #5
    4422:	d86b      	bhi.n	44fc <_get_cycles_for_us_internal+0xf0>
    4424:	a201      	add	r2, pc, #4	; (adr r2, 442c <_get_cycles_for_us_internal+0x20>)
    4426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    442a:	bf00      	nop
    442c:	000044db 	.word	0x000044db
    4430:	000044bb 	.word	0x000044bb
    4434:	0000449d 	.word	0x0000449d
    4438:	0000447f 	.word	0x0000447f
    443c:	00004461 	.word	0x00004461
    4440:	00004445 	.word	0x00004445
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    4444:	88fb      	ldrh	r3, [r7, #6]
    4446:	683a      	ldr	r2, [r7, #0]
    4448:	4935      	ldr	r1, [pc, #212]	; (4520 <_get_cycles_for_us_internal+0x114>)
    444a:	fba1 1202 	umull	r1, r2, r1, r2
    444e:	0c92      	lsrs	r2, r2, #18
    4450:	fb02 f303 	mul.w	r3, r2, r3
    4454:	3302      	adds	r3, #2
    4456:	4a33      	ldr	r2, [pc, #204]	; (4524 <_get_cycles_for_us_internal+0x118>)
    4458:	fba2 2303 	umull	r2, r3, r2, r3
    445c:	085b      	lsrs	r3, r3, #1
    445e:	e059      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4460:	88fb      	ldrh	r3, [r7, #6]
    4462:	683a      	ldr	r2, [r7, #0]
    4464:	0952      	lsrs	r2, r2, #5
    4466:	4930      	ldr	r1, [pc, #192]	; (4528 <_get_cycles_for_us_internal+0x11c>)
    4468:	fba1 1202 	umull	r1, r2, r1, r2
    446c:	09d2      	lsrs	r2, r2, #7
    446e:	fb02 f303 	mul.w	r3, r2, r3
    4472:	331d      	adds	r3, #29
    4474:	4a2d      	ldr	r2, [pc, #180]	; (452c <_get_cycles_for_us_internal+0x120>)
    4476:	fba2 2303 	umull	r2, r3, r2, r3
    447a:	091b      	lsrs	r3, r3, #4
    447c:	e04a      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    447e:	88fb      	ldrh	r3, [r7, #6]
    4480:	683a      	ldr	r2, [r7, #0]
    4482:	492b      	ldr	r1, [pc, #172]	; (4530 <_get_cycles_for_us_internal+0x124>)
    4484:	fba1 1202 	umull	r1, r2, r1, r2
    4488:	0b52      	lsrs	r2, r2, #13
    448a:	fb02 f303 	mul.w	r3, r2, r3
    448e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4492:	4a28      	ldr	r2, [pc, #160]	; (4534 <_get_cycles_for_us_internal+0x128>)
    4494:	fba2 2303 	umull	r2, r3, r2, r3
    4498:	095b      	lsrs	r3, r3, #5
    449a:	e03b      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    449c:	88fb      	ldrh	r3, [r7, #6]
    449e:	683a      	ldr	r2, [r7, #0]
    44a0:	4925      	ldr	r1, [pc, #148]	; (4538 <_get_cycles_for_us_internal+0x12c>)
    44a2:	fba1 1202 	umull	r1, r2, r1, r2
    44a6:	0992      	lsrs	r2, r2, #6
    44a8:	fb02 f303 	mul.w	r3, r2, r3
    44ac:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    44b0:	4a22      	ldr	r2, [pc, #136]	; (453c <_get_cycles_for_us_internal+0x130>)
    44b2:	fba2 2303 	umull	r2, r3, r2, r3
    44b6:	099b      	lsrs	r3, r3, #6
    44b8:	e02c      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    44ba:	88fb      	ldrh	r3, [r7, #6]
    44bc:	683a      	ldr	r2, [r7, #0]
    44be:	4920      	ldr	r1, [pc, #128]	; (4540 <_get_cycles_for_us_internal+0x134>)
    44c0:	fba1 1202 	umull	r1, r2, r1, r2
    44c4:	0952      	lsrs	r2, r2, #5
    44c6:	fb02 f303 	mul.w	r3, r2, r3
    44ca:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    44ce:	332f      	adds	r3, #47	; 0x2f
    44d0:	4a1c      	ldr	r2, [pc, #112]	; (4544 <_get_cycles_for_us_internal+0x138>)
    44d2:	fba2 2303 	umull	r2, r3, r2, r3
    44d6:	0b5b      	lsrs	r3, r3, #13
    44d8:	e01c      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    44da:	88fb      	ldrh	r3, [r7, #6]
    44dc:	683a      	ldr	r2, [r7, #0]
    44de:	491a      	ldr	r1, [pc, #104]	; (4548 <_get_cycles_for_us_internal+0x13c>)
    44e0:	fba1 1202 	umull	r1, r2, r1, r2
    44e4:	08d2      	lsrs	r2, r2, #3
    44e6:	fb02 f303 	mul.w	r3, r2, r3
    44ea:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    44ee:	f203 33df 	addw	r3, r3, #991	; 0x3df
    44f2:	4a16      	ldr	r2, [pc, #88]	; (454c <_get_cycles_for_us_internal+0x140>)
    44f4:	fba2 2303 	umull	r2, r3, r2, r3
    44f8:	0c5b      	lsrs	r3, r3, #17
    44fa:	e00b      	b.n	4514 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    44fc:	88fb      	ldrh	r3, [r7, #6]
    44fe:	683a      	ldr	r2, [r7, #0]
    4500:	fb02 f303 	mul.w	r3, r2, r3
    4504:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    4508:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    450c:	4a10      	ldr	r2, [pc, #64]	; (4550 <_get_cycles_for_us_internal+0x144>)
    450e:	fba2 2303 	umull	r2, r3, r2, r3
    4512:	0c9b      	lsrs	r3, r3, #18
	}
}
    4514:	4618      	mov	r0, r3
    4516:	370c      	adds	r7, #12
    4518:	46bd      	mov	sp, r7
    451a:	f85d 7b04 	ldr.w	r7, [sp], #4
    451e:	4770      	bx	lr
    4520:	431bde83 	.word	0x431bde83
    4524:	aaaaaaab 	.word	0xaaaaaaab
    4528:	0a7c5ac5 	.word	0x0a7c5ac5
    452c:	88888889 	.word	0x88888889
    4530:	d1b71759 	.word	0xd1b71759
    4534:	1b4e81b5 	.word	0x1b4e81b5
    4538:	10624dd3 	.word	0x10624dd3
    453c:	057619f1 	.word	0x057619f1
    4540:	51eb851f 	.word	0x51eb851f
    4544:	45e7b273 	.word	0x45e7b273
    4548:	cccccccd 	.word	0xcccccccd
    454c:	6fd91d85 	.word	0x6fd91d85
    4550:	165e9f81 	.word	0x165e9f81

00004554 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	4603      	mov	r3, r0
    455c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    455e:	88fb      	ldrh	r3, [r7, #6]
    4560:	2209      	movs	r2, #9
    4562:	4904      	ldr	r1, [pc, #16]	; (4574 <_get_cycles_for_us+0x20>)
    4564:	4618      	mov	r0, r3
    4566:	4b04      	ldr	r3, [pc, #16]	; (4578 <_get_cycles_for_us+0x24>)
    4568:	4798      	blx	r3
    456a:	4603      	mov	r3, r0
}
    456c:	4618      	mov	r0, r3
    456e:	3708      	adds	r7, #8
    4570:	46bd      	mov	sp, r7
    4572:	bd80      	pop	{r7, pc}
    4574:	07270e00 	.word	0x07270e00
    4578:	0000440d 	.word	0x0000440d

0000457c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    457c:	b480      	push	{r7}
    457e:	b083      	sub	sp, #12
    4580:	af00      	add	r7, sp, #0
    4582:	4603      	mov	r3, r0
    4584:	6039      	str	r1, [r7, #0]
    4586:	80fb      	strh	r3, [r7, #6]
    4588:	4613      	mov	r3, r2
    458a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    458c:	797b      	ldrb	r3, [r7, #5]
    458e:	3b04      	subs	r3, #4
    4590:	2b05      	cmp	r3, #5
    4592:	d870      	bhi.n	4676 <_get_cycles_for_ms_internal+0xfa>
    4594:	a201      	add	r2, pc, #4	; (adr r2, 459c <_get_cycles_for_ms_internal+0x20>)
    4596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    459a:	bf00      	nop
    459c:	00004659 	.word	0x00004659
    45a0:	0000463d 	.word	0x0000463d
    45a4:	00004621 	.word	0x00004621
    45a8:	000045fd 	.word	0x000045fd
    45ac:	000045d9 	.word	0x000045d9
    45b0:	000045b5 	.word	0x000045b5
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    45b4:	88fb      	ldrh	r3, [r7, #6]
    45b6:	683a      	ldr	r2, [r7, #0]
    45b8:	4937      	ldr	r1, [pc, #220]	; (4698 <_get_cycles_for_ms_internal+0x11c>)
    45ba:	fba1 1202 	umull	r1, r2, r1, r2
    45be:	0c92      	lsrs	r2, r2, #18
    45c0:	fb02 f303 	mul.w	r3, r2, r3
    45c4:	3302      	adds	r3, #2
    45c6:	4a35      	ldr	r2, [pc, #212]	; (469c <_get_cycles_for_ms_internal+0x120>)
    45c8:	fba2 2303 	umull	r2, r3, r2, r3
    45cc:	085b      	lsrs	r3, r3, #1
    45ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45d2:	fb02 f303 	mul.w	r3, r2, r3
    45d6:	e058      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    45d8:	88fb      	ldrh	r3, [r7, #6]
    45da:	683a      	ldr	r2, [r7, #0]
    45dc:	0952      	lsrs	r2, r2, #5
    45de:	4930      	ldr	r1, [pc, #192]	; (46a0 <_get_cycles_for_ms_internal+0x124>)
    45e0:	fba1 1202 	umull	r1, r2, r1, r2
    45e4:	09d2      	lsrs	r2, r2, #7
    45e6:	fb02 f303 	mul.w	r3, r2, r3
    45ea:	3302      	adds	r3, #2
    45ec:	4a2b      	ldr	r2, [pc, #172]	; (469c <_get_cycles_for_ms_internal+0x120>)
    45ee:	fba2 2303 	umull	r2, r3, r2, r3
    45f2:	085b      	lsrs	r3, r3, #1
    45f4:	2264      	movs	r2, #100	; 0x64
    45f6:	fb02 f303 	mul.w	r3, r2, r3
    45fa:	e046      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    45fc:	88fb      	ldrh	r3, [r7, #6]
    45fe:	683a      	ldr	r2, [r7, #0]
    4600:	4928      	ldr	r1, [pc, #160]	; (46a4 <_get_cycles_for_ms_internal+0x128>)
    4602:	fba1 1202 	umull	r1, r2, r1, r2
    4606:	0b52      	lsrs	r2, r2, #13
    4608:	fb02 f303 	mul.w	r3, r2, r3
    460c:	3302      	adds	r3, #2
    460e:	4a23      	ldr	r2, [pc, #140]	; (469c <_get_cycles_for_ms_internal+0x120>)
    4610:	fba2 2303 	umull	r2, r3, r2, r3
    4614:	085a      	lsrs	r2, r3, #1
    4616:	4613      	mov	r3, r2
    4618:	009b      	lsls	r3, r3, #2
    461a:	4413      	add	r3, r2
    461c:	005b      	lsls	r3, r3, #1
    461e:	e034      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4620:	88fb      	ldrh	r3, [r7, #6]
    4622:	683a      	ldr	r2, [r7, #0]
    4624:	4920      	ldr	r1, [pc, #128]	; (46a8 <_get_cycles_for_ms_internal+0x12c>)
    4626:	fba1 1202 	umull	r1, r2, r1, r2
    462a:	0992      	lsrs	r2, r2, #6
    462c:	fb02 f303 	mul.w	r3, r2, r3
    4630:	3302      	adds	r3, #2
    4632:	4a1a      	ldr	r2, [pc, #104]	; (469c <_get_cycles_for_ms_internal+0x120>)
    4634:	fba2 2303 	umull	r2, r3, r2, r3
    4638:	085b      	lsrs	r3, r3, #1
    463a:	e026      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    463c:	88fb      	ldrh	r3, [r7, #6]
    463e:	683a      	ldr	r2, [r7, #0]
    4640:	491a      	ldr	r1, [pc, #104]	; (46ac <_get_cycles_for_ms_internal+0x130>)
    4642:	fba1 1202 	umull	r1, r2, r1, r2
    4646:	0952      	lsrs	r2, r2, #5
    4648:	fb02 f303 	mul.w	r3, r2, r3
    464c:	331d      	adds	r3, #29
    464e:	4a18      	ldr	r2, [pc, #96]	; (46b0 <_get_cycles_for_ms_internal+0x134>)
    4650:	fba2 2303 	umull	r2, r3, r2, r3
    4654:	091b      	lsrs	r3, r3, #4
    4656:	e018      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4658:	88fb      	ldrh	r3, [r7, #6]
    465a:	683a      	ldr	r2, [r7, #0]
    465c:	4915      	ldr	r1, [pc, #84]	; (46b4 <_get_cycles_for_ms_internal+0x138>)
    465e:	fba1 1202 	umull	r1, r2, r1, r2
    4662:	08d2      	lsrs	r2, r2, #3
    4664:	fb02 f303 	mul.w	r3, r2, r3
    4668:	f203 132b 	addw	r3, r3, #299	; 0x12b
    466c:	4a12      	ldr	r2, [pc, #72]	; (46b8 <_get_cycles_for_ms_internal+0x13c>)
    466e:	fba2 2303 	umull	r2, r3, r2, r3
    4672:	095b      	lsrs	r3, r3, #5
    4674:	e009      	b.n	468a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4676:	88fb      	ldrh	r3, [r7, #6]
    4678:	683a      	ldr	r2, [r7, #0]
    467a:	fb02 f303 	mul.w	r3, r2, r3
    467e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4682:	4a0e      	ldr	r2, [pc, #56]	; (46bc <_get_cycles_for_ms_internal+0x140>)
    4684:	fba2 2303 	umull	r2, r3, r2, r3
    4688:	099b      	lsrs	r3, r3, #6
	}
}
    468a:	4618      	mov	r0, r3
    468c:	370c      	adds	r7, #12
    468e:	46bd      	mov	sp, r7
    4690:	f85d 7b04 	ldr.w	r7, [sp], #4
    4694:	4770      	bx	lr
    4696:	bf00      	nop
    4698:	431bde83 	.word	0x431bde83
    469c:	aaaaaaab 	.word	0xaaaaaaab
    46a0:	0a7c5ac5 	.word	0x0a7c5ac5
    46a4:	d1b71759 	.word	0xd1b71759
    46a8:	10624dd3 	.word	0x10624dd3
    46ac:	51eb851f 	.word	0x51eb851f
    46b0:	88888889 	.word	0x88888889
    46b4:	cccccccd 	.word	0xcccccccd
    46b8:	1b4e81b5 	.word	0x1b4e81b5
    46bc:	057619f1 	.word	0x057619f1

000046c0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	af00      	add	r7, sp, #0
    46c6:	4603      	mov	r3, r0
    46c8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    46ca:	88fb      	ldrh	r3, [r7, #6]
    46cc:	2209      	movs	r2, #9
    46ce:	4904      	ldr	r1, [pc, #16]	; (46e0 <_get_cycles_for_ms+0x20>)
    46d0:	4618      	mov	r0, r3
    46d2:	4b04      	ldr	r3, [pc, #16]	; (46e4 <_get_cycles_for_ms+0x24>)
    46d4:	4798      	blx	r3
    46d6:	4603      	mov	r3, r0
}
    46d8:	4618      	mov	r0, r3
    46da:	3708      	adds	r7, #8
    46dc:	46bd      	mov	sp, r7
    46de:	bd80      	pop	{r7, pc}
    46e0:	07270e00 	.word	0x07270e00
    46e4:	0000457d 	.word	0x0000457d

000046e8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    46e8:	b480      	push	{r7}
    46ea:	b083      	sub	sp, #12
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
    46f0:	6039      	str	r1, [r7, #0]
    46f2:	bf00      	nop
    46f4:	f3af 8000 	nop.w

000046f8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    46f8:	3901      	subs	r1, #1
    46fa:	d8fd      	bhi.n	46f8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    46fc:	bf00      	nop
    46fe:	370c      	adds	r7, #12
    4700:	46bd      	mov	sp, r7
    4702:	f85d 7b04 	ldr.w	r7, [sp], #4
    4706:	4770      	bx	lr

00004708 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4708:	b480      	push	{r7}
    470a:	b083      	sub	sp, #12
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
    4710:	460b      	mov	r3, r1
    4712:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	881b      	ldrh	r3, [r3, #0]
    4718:	b29a      	uxth	r2, r3
    471a:	887b      	ldrh	r3, [r7, #2]
    471c:	021b      	lsls	r3, r3, #8
    471e:	b29b      	uxth	r3, r3
    4720:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4724:	b29b      	uxth	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b29a      	uxth	r2, r3
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    472e:	bf00      	nop
    4730:	370c      	adds	r7, #12
    4732:	46bd      	mov	sp, r7
    4734:	f85d 7b04 	ldr.w	r7, [sp], #4
    4738:	4770      	bx	lr

0000473a <hri_port_set_EVCTRL_reg>:
{
    473a:	b480      	push	{r7}
    473c:	b085      	sub	sp, #20
    473e:	af00      	add	r7, sp, #0
    4740:	60f8      	str	r0, [r7, #12]
    4742:	460b      	mov	r3, r1
    4744:	607a      	str	r2, [r7, #4]
    4746:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4748:	7afb      	ldrb	r3, [r7, #11]
    474a:	7afa      	ldrb	r2, [r7, #11]
    474c:	68f9      	ldr	r1, [r7, #12]
    474e:	01d2      	lsls	r2, r2, #7
    4750:	440a      	add	r2, r1
    4752:	322c      	adds	r2, #44	; 0x2c
    4754:	6811      	ldr	r1, [r2, #0]
    4756:	687a      	ldr	r2, [r7, #4]
    4758:	430a      	orrs	r2, r1
    475a:	68f9      	ldr	r1, [r7, #12]
    475c:	01db      	lsls	r3, r3, #7
    475e:	440b      	add	r3, r1
    4760:	332c      	adds	r3, #44	; 0x2c
    4762:	601a      	str	r2, [r3, #0]
}
    4764:	bf00      	nop
    4766:	3714      	adds	r7, #20
    4768:	46bd      	mov	sp, r7
    476a:	f85d 7b04 	ldr.w	r7, [sp], #4
    476e:	4770      	bx	lr

00004770 <_port_event_init>:

static inline void _port_event_init()
{
    4770:	b580      	push	{r7, lr}
    4772:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4774:	2200      	movs	r2, #0
    4776:	2100      	movs	r1, #0
    4778:	480a      	ldr	r0, [pc, #40]	; (47a4 <_port_event_init+0x34>)
    477a:	4b0b      	ldr	r3, [pc, #44]	; (47a8 <_port_event_init+0x38>)
    477c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    477e:	2200      	movs	r2, #0
    4780:	2101      	movs	r1, #1
    4782:	4808      	ldr	r0, [pc, #32]	; (47a4 <_port_event_init+0x34>)
    4784:	4b08      	ldr	r3, [pc, #32]	; (47a8 <_port_event_init+0x38>)
    4786:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4788:	f64e 72ef 	movw	r2, #61423	; 0xefef
    478c:	2102      	movs	r1, #2
    478e:	4805      	ldr	r0, [pc, #20]	; (47a4 <_port_event_init+0x34>)
    4790:	4b05      	ldr	r3, [pc, #20]	; (47a8 <_port_event_init+0x38>)
    4792:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4794:	2200      	movs	r2, #0
    4796:	2103      	movs	r1, #3
    4798:	4802      	ldr	r0, [pc, #8]	; (47a4 <_port_event_init+0x34>)
    479a:	4b03      	ldr	r3, [pc, #12]	; (47a8 <_port_event_init+0x38>)
    479c:	4798      	blx	r3
}
    479e:	bf00      	nop
    47a0:	bd80      	pop	{r7, pc}
    47a2:	bf00      	nop
    47a4:	41008000 	.word	0x41008000
    47a8:	0000473b 	.word	0x0000473b

000047ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    47ac:	b580      	push	{r7, lr}
    47ae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    47b0:	2104      	movs	r1, #4
    47b2:	480b      	ldr	r0, [pc, #44]	; (47e0 <_init_chip+0x34>)
    47b4:	4b0b      	ldr	r3, [pc, #44]	; (47e4 <_init_chip+0x38>)
    47b6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    47b8:	4b0b      	ldr	r3, [pc, #44]	; (47e8 <_init_chip+0x3c>)
    47ba:	4798      	blx	r3
	_oscctrl_init_sources();
    47bc:	4b0b      	ldr	r3, [pc, #44]	; (47ec <_init_chip+0x40>)
    47be:	4798      	blx	r3
	_mclk_init();
    47c0:	4b0b      	ldr	r3, [pc, #44]	; (47f0 <_init_chip+0x44>)
    47c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    47c4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    47c8:	4b0a      	ldr	r3, [pc, #40]	; (47f4 <_init_chip+0x48>)
    47ca:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    47cc:	4b0a      	ldr	r3, [pc, #40]	; (47f8 <_init_chip+0x4c>)
    47ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    47d0:	f640 30df 	movw	r0, #3039	; 0xbdf
    47d4:	4b07      	ldr	r3, [pc, #28]	; (47f4 <_init_chip+0x48>)
    47d6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    47d8:	4b08      	ldr	r3, [pc, #32]	; (47fc <_init_chip+0x50>)
    47da:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    47dc:	bf00      	nop
    47de:	bd80      	pop	{r7, pc}
    47e0:	41004000 	.word	0x41004000
    47e4:	00004709 	.word	0x00004709
    47e8:	0000529d 	.word	0x0000529d
    47ec:	00005765 	.word	0x00005765
    47f0:	000051bd 	.word	0x000051bd
    47f4:	0000507d 	.word	0x0000507d
    47f8:	000057a5 	.word	0x000057a5
    47fc:	00004771 	.word	0x00004771

00004800 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4800:	b480      	push	{r7}
    4802:	b083      	sub	sp, #12
    4804:	af00      	add	r7, sp, #0
    4806:	6078      	str	r0, [r7, #4]
    4808:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	683a      	ldr	r2, [r7, #0]
    480e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4810:	2300      	movs	r3, #0
}
    4812:	4618      	mov	r0, r3
    4814:	370c      	adds	r7, #12
    4816:	46bd      	mov	sp, r7
    4818:	f85d 7b04 	ldr.w	r7, [sp], #4
    481c:	4770      	bx	lr
	...

00004820 <__NVIC_EnableIRQ>:
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	4603      	mov	r3, r0
    4828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    482a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    482e:	2b00      	cmp	r3, #0
    4830:	db0b      	blt.n	484a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4832:	4909      	ldr	r1, [pc, #36]	; (4858 <__NVIC_EnableIRQ+0x38>)
    4834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4838:	095b      	lsrs	r3, r3, #5
    483a:	88fa      	ldrh	r2, [r7, #6]
    483c:	f002 021f 	and.w	r2, r2, #31
    4840:	2001      	movs	r0, #1
    4842:	fa00 f202 	lsl.w	r2, r0, r2
    4846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    484a:	bf00      	nop
    484c:	370c      	adds	r7, #12
    484e:	46bd      	mov	sp, r7
    4850:	f85d 7b04 	ldr.w	r7, [sp], #4
    4854:	4770      	bx	lr
    4856:	bf00      	nop
    4858:	e000e100 	.word	0xe000e100

0000485c <__NVIC_DisableIRQ>:
{
    485c:	b480      	push	{r7}
    485e:	b083      	sub	sp, #12
    4860:	af00      	add	r7, sp, #0
    4862:	4603      	mov	r3, r0
    4864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    486a:	2b00      	cmp	r3, #0
    486c:	db10      	blt.n	4890 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    486e:	490b      	ldr	r1, [pc, #44]	; (489c <__NVIC_DisableIRQ+0x40>)
    4870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4874:	095b      	lsrs	r3, r3, #5
    4876:	88fa      	ldrh	r2, [r7, #6]
    4878:	f002 021f 	and.w	r2, r2, #31
    487c:	2001      	movs	r0, #1
    487e:	fa00 f202 	lsl.w	r2, r0, r2
    4882:	3320      	adds	r3, #32
    4884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    488c:	f3bf 8f6f 	isb	sy
}
    4890:	bf00      	nop
    4892:	370c      	adds	r7, #12
    4894:	46bd      	mov	sp, r7
    4896:	f85d 7b04 	ldr.w	r7, [sp], #4
    489a:	4770      	bx	lr
    489c:	e000e100 	.word	0xe000e100

000048a0 <__NVIC_ClearPendingIRQ>:
{
    48a0:	b480      	push	{r7}
    48a2:	b083      	sub	sp, #12
    48a4:	af00      	add	r7, sp, #0
    48a6:	4603      	mov	r3, r0
    48a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    48aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    48ae:	2b00      	cmp	r3, #0
    48b0:	db0c      	blt.n	48cc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48b2:	4909      	ldr	r1, [pc, #36]	; (48d8 <__NVIC_ClearPendingIRQ+0x38>)
    48b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    48b8:	095b      	lsrs	r3, r3, #5
    48ba:	88fa      	ldrh	r2, [r7, #6]
    48bc:	f002 021f 	and.w	r2, r2, #31
    48c0:	2001      	movs	r0, #1
    48c2:	fa00 f202 	lsl.w	r2, r0, r2
    48c6:	3360      	adds	r3, #96	; 0x60
    48c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    48cc:	bf00      	nop
    48ce:	370c      	adds	r7, #12
    48d0:	46bd      	mov	sp, r7
    48d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d6:	4770      	bx	lr
    48d8:	e000e100 	.word	0xe000e100

000048dc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    48dc:	b480      	push	{r7}
    48de:	b083      	sub	sp, #12
    48e0:	af00      	add	r7, sp, #0
    48e2:	6078      	str	r0, [r7, #4]
    48e4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    48e6:	bf00      	nop
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	685a      	ldr	r2, [r3, #4]
    48ec:	683b      	ldr	r3, [r7, #0]
    48ee:	4013      	ands	r3, r2
    48f0:	2b00      	cmp	r3, #0
    48f2:	d1f9      	bne.n	48e8 <hri_eic_wait_for_sync+0xc>
	};
}
    48f4:	bf00      	nop
    48f6:	370c      	adds	r7, #12
    48f8:	46bd      	mov	sp, r7
    48fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    48fe:	4770      	bx	lr

00004900 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4900:	b480      	push	{r7}
    4902:	b083      	sub	sp, #12
    4904:	af00      	add	r7, sp, #0
    4906:	6078      	str	r0, [r7, #4]
    4908:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	685a      	ldr	r2, [r3, #4]
    490e:	683b      	ldr	r3, [r7, #0]
    4910:	4013      	ands	r3, r2
    4912:	2b00      	cmp	r3, #0
    4914:	bf14      	ite	ne
    4916:	2301      	movne	r3, #1
    4918:	2300      	moveq	r3, #0
    491a:	b2db      	uxtb	r3, r3
}
    491c:	4618      	mov	r0, r3
    491e:	370c      	adds	r7, #12
    4920:	46bd      	mov	sp, r7
    4922:	f85d 7b04 	ldr.w	r7, [sp], #4
    4926:	4770      	bx	lr

00004928 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4928:	b480      	push	{r7}
    492a:	b083      	sub	sp, #12
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	695b      	ldr	r3, [r3, #20]
}
    4934:	4618      	mov	r0, r3
    4936:	370c      	adds	r7, #12
    4938:	46bd      	mov	sp, r7
    493a:	f85d 7b04 	ldr.w	r7, [sp], #4
    493e:	4770      	bx	lr

00004940 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4940:	b480      	push	{r7}
    4942:	b083      	sub	sp, #12
    4944:	af00      	add	r7, sp, #0
    4946:	6078      	str	r0, [r7, #4]
    4948:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    494a:	687b      	ldr	r3, [r7, #4]
    494c:	683a      	ldr	r2, [r7, #0]
    494e:	615a      	str	r2, [r3, #20]
}
    4950:	bf00      	nop
    4952:	370c      	adds	r7, #12
    4954:	46bd      	mov	sp, r7
    4956:	f85d 7b04 	ldr.w	r7, [sp], #4
    495a:	4770      	bx	lr

0000495c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    495c:	b480      	push	{r7}
    495e:	b083      	sub	sp, #12
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
    4964:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	683a      	ldr	r2, [r7, #0]
    496a:	611a      	str	r2, [r3, #16]
}
    496c:	bf00      	nop
    496e:	370c      	adds	r7, #12
    4970:	46bd      	mov	sp, r7
    4972:	f85d 7b04 	ldr.w	r7, [sp], #4
    4976:	4770      	bx	lr

00004978 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4978:	b480      	push	{r7}
    497a:	b083      	sub	sp, #12
    497c:	af00      	add	r7, sp, #0
    497e:	6078      	str	r0, [r7, #4]
    4980:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	683a      	ldr	r2, [r7, #0]
    4986:	60da      	str	r2, [r3, #12]
}
    4988:	bf00      	nop
    498a:	370c      	adds	r7, #12
    498c:	46bd      	mov	sp, r7
    498e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4992:	4770      	bx	lr

00004994 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4994:	b580      	push	{r7, lr}
    4996:	b082      	sub	sp, #8
    4998:	af00      	add	r7, sp, #0
    499a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	781b      	ldrb	r3, [r3, #0]
    49a0:	b2db      	uxtb	r3, r3
    49a2:	f043 0302 	orr.w	r3, r3, #2
    49a6:	b2da      	uxtb	r2, r3
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    49ac:	2103      	movs	r1, #3
    49ae:	6878      	ldr	r0, [r7, #4]
    49b0:	4b02      	ldr	r3, [pc, #8]	; (49bc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    49b2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    49b4:	bf00      	nop
    49b6:	3708      	adds	r7, #8
    49b8:	46bd      	mov	sp, r7
    49ba:	bd80      	pop	{r7, pc}
    49bc:	000048dd 	.word	0x000048dd

000049c0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    49c0:	b580      	push	{r7, lr}
    49c2:	b082      	sub	sp, #8
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	b2db      	uxtb	r3, r3
    49ce:	f023 0302 	bic.w	r3, r3, #2
    49d2:	b2da      	uxtb	r2, r3
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    49d8:	2103      	movs	r1, #3
    49da:	6878      	ldr	r0, [r7, #4]
    49dc:	4b02      	ldr	r3, [pc, #8]	; (49e8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    49de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    49e0:	bf00      	nop
    49e2:	3708      	adds	r7, #8
    49e4:	46bd      	mov	sp, r7
    49e6:	bd80      	pop	{r7, pc}
    49e8:	000048dd 	.word	0x000048dd

000049ec <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    49ec:	b580      	push	{r7, lr}
    49ee:	b084      	sub	sp, #16
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
    49f4:	460b      	mov	r3, r1
    49f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    49fe:	7bfb      	ldrb	r3, [r7, #15]
    4a00:	f023 0310 	bic.w	r3, r3, #16
    4a04:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4a06:	78fb      	ldrb	r3, [r7, #3]
    4a08:	011b      	lsls	r3, r3, #4
    4a0a:	b25a      	sxtb	r2, r3
    4a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4a10:	4313      	orrs	r3, r2
    4a12:	b25b      	sxtb	r3, r3
    4a14:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	7bfa      	ldrb	r2, [r7, #15]
    4a1a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4a1c:	2103      	movs	r1, #3
    4a1e:	6878      	ldr	r0, [r7, #4]
    4a20:	4b02      	ldr	r3, [pc, #8]	; (4a2c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4a22:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a24:	bf00      	nop
    4a26:	3710      	adds	r7, #16
    4a28:	46bd      	mov	sp, r7
    4a2a:	bd80      	pop	{r7, pc}
    4a2c:	000048dd 	.word	0x000048dd

00004a30 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	6078      	str	r0, [r7, #4]
    4a38:	460b      	mov	r3, r1
    4a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4a3c:	2103      	movs	r1, #3
    4a3e:	6878      	ldr	r0, [r7, #4]
    4a40:	4b06      	ldr	r3, [pc, #24]	; (4a5c <hri_eic_get_CTRLA_reg+0x2c>)
    4a42:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	781b      	ldrb	r3, [r3, #0]
    4a48:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4a4a:	7bfa      	ldrb	r2, [r7, #15]
    4a4c:	78fb      	ldrb	r3, [r7, #3]
    4a4e:	4013      	ands	r3, r2
    4a50:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4a52:	7bfb      	ldrb	r3, [r7, #15]
}
    4a54:	4618      	mov	r0, r3
    4a56:	3710      	adds	r7, #16
    4a58:	46bd      	mov	sp, r7
    4a5a:	bd80      	pop	{r7, pc}
    4a5c:	000048dd 	.word	0x000048dd

00004a60 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4a60:	b580      	push	{r7, lr}
    4a62:	b082      	sub	sp, #8
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
    4a68:	460b      	mov	r3, r1
    4a6a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	78fa      	ldrb	r2, [r7, #3]
    4a70:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4a72:	2103      	movs	r1, #3
    4a74:	6878      	ldr	r0, [r7, #4]
    4a76:	4b03      	ldr	r3, [pc, #12]	; (4a84 <hri_eic_write_CTRLA_reg+0x24>)
    4a78:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a7a:	bf00      	nop
    4a7c:	3708      	adds	r7, #8
    4a7e:	46bd      	mov	sp, r7
    4a80:	bd80      	pop	{r7, pc}
    4a82:	bf00      	nop
    4a84:	000048dd 	.word	0x000048dd

00004a88 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4a88:	b480      	push	{r7}
    4a8a:	b083      	sub	sp, #12
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
    4a90:	460b      	mov	r3, r1
    4a92:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	78fa      	ldrb	r2, [r7, #3]
    4a98:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4a9a:	bf00      	nop
    4a9c:	370c      	adds	r7, #12
    4a9e:	46bd      	mov	sp, r7
    4aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa4:	4770      	bx	lr

00004aa6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4aa6:	b480      	push	{r7}
    4aa8:	b083      	sub	sp, #12
    4aaa:	af00      	add	r7, sp, #0
    4aac:	6078      	str	r0, [r7, #4]
    4aae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4ab0:	687b      	ldr	r3, [r7, #4]
    4ab2:	683a      	ldr	r2, [r7, #0]
    4ab4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ab6:	bf00      	nop
    4ab8:	370c      	adds	r7, #12
    4aba:	46bd      	mov	sp, r7
    4abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ac0:	4770      	bx	lr

00004ac2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4ac2:	b480      	push	{r7}
    4ac4:	b083      	sub	sp, #12
    4ac6:	af00      	add	r7, sp, #0
    4ac8:	6078      	str	r0, [r7, #4]
    4aca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	683a      	ldr	r2, [r7, #0]
    4ad0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ad2:	bf00      	nop
    4ad4:	370c      	adds	r7, #12
    4ad6:	46bd      	mov	sp, r7
    4ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4adc:	4770      	bx	lr

00004ade <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4ade:	b480      	push	{r7}
    4ae0:	b085      	sub	sp, #20
    4ae2:	af00      	add	r7, sp, #0
    4ae4:	60f8      	str	r0, [r7, #12]
    4ae6:	460b      	mov	r3, r1
    4ae8:	607a      	str	r2, [r7, #4]
    4aea:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4aec:	7afb      	ldrb	r3, [r7, #11]
    4aee:	68fa      	ldr	r2, [r7, #12]
    4af0:	3306      	adds	r3, #6
    4af2:	009b      	lsls	r3, r3, #2
    4af4:	4413      	add	r3, r2
    4af6:	687a      	ldr	r2, [r7, #4]
    4af8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4afa:	bf00      	nop
    4afc:	3714      	adds	r7, #20
    4afe:	46bd      	mov	sp, r7
    4b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b04:	4770      	bx	lr

00004b06 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4b06:	b480      	push	{r7}
    4b08:	b083      	sub	sp, #12
    4b0a:	af00      	add	r7, sp, #0
    4b0c:	6078      	str	r0, [r7, #4]
    4b0e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	683a      	ldr	r2, [r7, #0]
    4b14:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b16:	bf00      	nop
    4b18:	370c      	adds	r7, #12
    4b1a:	46bd      	mov	sp, r7
    4b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b20:	4770      	bx	lr

00004b22 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4b22:	b480      	push	{r7}
    4b24:	b083      	sub	sp, #12
    4b26:	af00      	add	r7, sp, #0
    4b28:	6078      	str	r0, [r7, #4]
    4b2a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	683a      	ldr	r2, [r7, #0]
    4b30:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4b32:	bf00      	nop
    4b34:	370c      	adds	r7, #12
    4b36:	46bd      	mov	sp, r7
    4b38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b3c:	4770      	bx	lr
	...

00004b40 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b082      	sub	sp, #8
    4b44:	af00      	add	r7, sp, #0
    4b46:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4b48:	2101      	movs	r1, #1
    4b4a:	484b      	ldr	r0, [pc, #300]	; (4c78 <_ext_irq_init+0x138>)
    4b4c:	4b4b      	ldr	r3, [pc, #300]	; (4c7c <_ext_irq_init+0x13c>)
    4b4e:	4798      	blx	r3
    4b50:	4603      	mov	r3, r0
    4b52:	f083 0301 	eor.w	r3, r3, #1
    4b56:	b2db      	uxtb	r3, r3
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d011      	beq.n	4b80 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4b5c:	2102      	movs	r1, #2
    4b5e:	4846      	ldr	r0, [pc, #280]	; (4c78 <_ext_irq_init+0x138>)
    4b60:	4b47      	ldr	r3, [pc, #284]	; (4c80 <_ext_irq_init+0x140>)
    4b62:	4798      	blx	r3
    4b64:	4603      	mov	r3, r0
    4b66:	2b00      	cmp	r3, #0
    4b68:	d006      	beq.n	4b78 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4b6a:	4843      	ldr	r0, [pc, #268]	; (4c78 <_ext_irq_init+0x138>)
    4b6c:	4b45      	ldr	r3, [pc, #276]	; (4c84 <_ext_irq_init+0x144>)
    4b6e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4b70:	2102      	movs	r1, #2
    4b72:	4841      	ldr	r0, [pc, #260]	; (4c78 <_ext_irq_init+0x138>)
    4b74:	4b44      	ldr	r3, [pc, #272]	; (4c88 <_ext_irq_init+0x148>)
    4b76:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4b78:	2101      	movs	r1, #1
    4b7a:	483f      	ldr	r0, [pc, #252]	; (4c78 <_ext_irq_init+0x138>)
    4b7c:	4b43      	ldr	r3, [pc, #268]	; (4c8c <_ext_irq_init+0x14c>)
    4b7e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4b80:	2101      	movs	r1, #1
    4b82:	483d      	ldr	r0, [pc, #244]	; (4c78 <_ext_irq_init+0x138>)
    4b84:	4b40      	ldr	r3, [pc, #256]	; (4c88 <_ext_irq_init+0x148>)
    4b86:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4b88:	2100      	movs	r1, #0
    4b8a:	483b      	ldr	r0, [pc, #236]	; (4c78 <_ext_irq_init+0x138>)
    4b8c:	4b40      	ldr	r3, [pc, #256]	; (4c90 <_ext_irq_init+0x150>)
    4b8e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4b90:	2100      	movs	r1, #0
    4b92:	4839      	ldr	r0, [pc, #228]	; (4c78 <_ext_irq_init+0x138>)
    4b94:	4b3f      	ldr	r3, [pc, #252]	; (4c94 <_ext_irq_init+0x154>)
    4b96:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4b98:	2100      	movs	r1, #0
    4b9a:	4837      	ldr	r0, [pc, #220]	; (4c78 <_ext_irq_init+0x138>)
    4b9c:	4b3e      	ldr	r3, [pc, #248]	; (4c98 <_ext_irq_init+0x158>)
    4b9e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4ba0:	f240 31b9 	movw	r1, #953	; 0x3b9
    4ba4:	4834      	ldr	r0, [pc, #208]	; (4c78 <_ext_irq_init+0x138>)
    4ba6:	4b3d      	ldr	r3, [pc, #244]	; (4c9c <_ext_irq_init+0x15c>)
    4ba8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4baa:	f240 3139 	movw	r1, #825	; 0x339
    4bae:	4832      	ldr	r0, [pc, #200]	; (4c78 <_ext_irq_init+0x138>)
    4bb0:	4b3b      	ldr	r3, [pc, #236]	; (4ca0 <_ext_irq_init+0x160>)
    4bb2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4bb4:	2100      	movs	r1, #0
    4bb6:	4830      	ldr	r0, [pc, #192]	; (4c78 <_ext_irq_init+0x138>)
    4bb8:	4b3a      	ldr	r3, [pc, #232]	; (4ca4 <_ext_irq_init+0x164>)
    4bba:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4bbc:	4a3a      	ldr	r2, [pc, #232]	; (4ca8 <_ext_irq_init+0x168>)
    4bbe:	2100      	movs	r1, #0
    4bc0:	482d      	ldr	r0, [pc, #180]	; (4c78 <_ext_irq_init+0x138>)
    4bc2:	4b3a      	ldr	r3, [pc, #232]	; (4cac <_ext_irq_init+0x16c>)
    4bc4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4bc6:	2211      	movs	r2, #17
    4bc8:	2101      	movs	r1, #1
    4bca:	482b      	ldr	r0, [pc, #172]	; (4c78 <_ext_irq_init+0x138>)
    4bcc:	4b37      	ldr	r3, [pc, #220]	; (4cac <_ext_irq_init+0x16c>)
    4bce:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4bd0:	4829      	ldr	r0, [pc, #164]	; (4c78 <_ext_irq_init+0x138>)
    4bd2:	4b37      	ldr	r3, [pc, #220]	; (4cb0 <_ext_irq_init+0x170>)
    4bd4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4bd6:	200c      	movs	r0, #12
    4bd8:	4b36      	ldr	r3, [pc, #216]	; (4cb4 <_ext_irq_init+0x174>)
    4bda:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4bdc:	200c      	movs	r0, #12
    4bde:	4b36      	ldr	r3, [pc, #216]	; (4cb8 <_ext_irq_init+0x178>)
    4be0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4be2:	200c      	movs	r0, #12
    4be4:	4b35      	ldr	r3, [pc, #212]	; (4cbc <_ext_irq_init+0x17c>)
    4be6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4be8:	200f      	movs	r0, #15
    4bea:	4b32      	ldr	r3, [pc, #200]	; (4cb4 <_ext_irq_init+0x174>)
    4bec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4bee:	200f      	movs	r0, #15
    4bf0:	4b31      	ldr	r3, [pc, #196]	; (4cb8 <_ext_irq_init+0x178>)
    4bf2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4bf4:	200f      	movs	r0, #15
    4bf6:	4b31      	ldr	r3, [pc, #196]	; (4cbc <_ext_irq_init+0x17c>)
    4bf8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4bfa:	2010      	movs	r0, #16
    4bfc:	4b2d      	ldr	r3, [pc, #180]	; (4cb4 <_ext_irq_init+0x174>)
    4bfe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4c00:	2010      	movs	r0, #16
    4c02:	4b2d      	ldr	r3, [pc, #180]	; (4cb8 <_ext_irq_init+0x178>)
    4c04:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4c06:	2010      	movs	r0, #16
    4c08:	4b2c      	ldr	r3, [pc, #176]	; (4cbc <_ext_irq_init+0x17c>)
    4c0a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4c0c:	2011      	movs	r0, #17
    4c0e:	4b29      	ldr	r3, [pc, #164]	; (4cb4 <_ext_irq_init+0x174>)
    4c10:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4c12:	2011      	movs	r0, #17
    4c14:	4b28      	ldr	r3, [pc, #160]	; (4cb8 <_ext_irq_init+0x178>)
    4c16:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4c18:	2011      	movs	r0, #17
    4c1a:	4b28      	ldr	r3, [pc, #160]	; (4cbc <_ext_irq_init+0x17c>)
    4c1c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4c1e:	2012      	movs	r0, #18
    4c20:	4b24      	ldr	r3, [pc, #144]	; (4cb4 <_ext_irq_init+0x174>)
    4c22:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4c24:	2012      	movs	r0, #18
    4c26:	4b24      	ldr	r3, [pc, #144]	; (4cb8 <_ext_irq_init+0x178>)
    4c28:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4c2a:	2012      	movs	r0, #18
    4c2c:	4b23      	ldr	r3, [pc, #140]	; (4cbc <_ext_irq_init+0x17c>)
    4c2e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4c30:	2013      	movs	r0, #19
    4c32:	4b20      	ldr	r3, [pc, #128]	; (4cb4 <_ext_irq_init+0x174>)
    4c34:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4c36:	2013      	movs	r0, #19
    4c38:	4b1f      	ldr	r3, [pc, #124]	; (4cb8 <_ext_irq_init+0x178>)
    4c3a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4c3c:	2013      	movs	r0, #19
    4c3e:	4b1f      	ldr	r3, [pc, #124]	; (4cbc <_ext_irq_init+0x17c>)
    4c40:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4c42:	2014      	movs	r0, #20
    4c44:	4b1b      	ldr	r3, [pc, #108]	; (4cb4 <_ext_irq_init+0x174>)
    4c46:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4c48:	2014      	movs	r0, #20
    4c4a:	4b1b      	ldr	r3, [pc, #108]	; (4cb8 <_ext_irq_init+0x178>)
    4c4c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4c4e:	2014      	movs	r0, #20
    4c50:	4b1a      	ldr	r3, [pc, #104]	; (4cbc <_ext_irq_init+0x17c>)
    4c52:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4c54:	2015      	movs	r0, #21
    4c56:	4b17      	ldr	r3, [pc, #92]	; (4cb4 <_ext_irq_init+0x174>)
    4c58:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4c5a:	2015      	movs	r0, #21
    4c5c:	4b16      	ldr	r3, [pc, #88]	; (4cb8 <_ext_irq_init+0x178>)
    4c5e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4c60:	2015      	movs	r0, #21
    4c62:	4b16      	ldr	r3, [pc, #88]	; (4cbc <_ext_irq_init+0x17c>)
    4c64:	4798      	blx	r3

	callback = cb;
    4c66:	4a16      	ldr	r2, [pc, #88]	; (4cc0 <_ext_irq_init+0x180>)
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4c6c:	2300      	movs	r3, #0
}
    4c6e:	4618      	mov	r0, r3
    4c70:	3708      	adds	r7, #8
    4c72:	46bd      	mov	sp, r7
    4c74:	bd80      	pop	{r7, pc}
    4c76:	bf00      	nop
    4c78:	40002800 	.word	0x40002800
    4c7c:	00004901 	.word	0x00004901
    4c80:	00004a31 	.word	0x00004a31
    4c84:	000049c1 	.word	0x000049c1
    4c88:	000048dd 	.word	0x000048dd
    4c8c:	00004a61 	.word	0x00004a61
    4c90:	000049ed 	.word	0x000049ed
    4c94:	00004a89 	.word	0x00004a89
    4c98:	00004aa7 	.word	0x00004aa7
    4c9c:	00004ac3 	.word	0x00004ac3
    4ca0:	00004b07 	.word	0x00004b07
    4ca4:	00004b23 	.word	0x00004b23
    4ca8:	90999003 	.word	0x90999003
    4cac:	00004adf 	.word	0x00004adf
    4cb0:	00004995 	.word	0x00004995
    4cb4:	0000485d 	.word	0x0000485d
    4cb8:	000048a1 	.word	0x000048a1
    4cbc:	00004821 	.word	0x00004821
    4cc0:	20000a50 	.word	0x20000a50

00004cc4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4cc4:	b580      	push	{r7, lr}
    4cc6:	b084      	sub	sp, #16
    4cc8:	af00      	add	r7, sp, #0
    4cca:	6078      	str	r0, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4cd0:	23ff      	movs	r3, #255	; 0xff
    4cd2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4cd4:	2300      	movs	r3, #0
    4cd6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4cd8:	e010      	b.n	4cfc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4cda:	7bbb      	ldrb	r3, [r7, #14]
    4cdc:	4a1c      	ldr	r2, [pc, #112]	; (4d50 <_ext_irq_enable+0x8c>)
    4cde:	00db      	lsls	r3, r3, #3
    4ce0:	4413      	add	r3, r2
    4ce2:	685a      	ldr	r2, [r3, #4]
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d105      	bne.n	4cf6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4cea:	7bbb      	ldrb	r3, [r7, #14]
    4cec:	4a18      	ldr	r2, [pc, #96]	; (4d50 <_ext_irq_enable+0x8c>)
    4cee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4cf2:	73fb      	strb	r3, [r7, #15]
			break;
    4cf4:	e005      	b.n	4d02 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4cf6:	7bbb      	ldrb	r3, [r7, #14]
    4cf8:	3301      	adds	r3, #1
    4cfa:	73bb      	strb	r3, [r7, #14]
    4cfc:	7bbb      	ldrb	r3, [r7, #14]
    4cfe:	2b07      	cmp	r3, #7
    4d00:	d9eb      	bls.n	4cda <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4d02:	7bfb      	ldrb	r3, [r7, #15]
    4d04:	2bff      	cmp	r3, #255	; 0xff
    4d06:	d102      	bne.n	4d0e <_ext_irq_enable+0x4a>
		return -1;
    4d08:	f04f 33ff 	mov.w	r3, #4294967295
    4d0c:	e01c      	b.n	4d48 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4d0e:	78fb      	ldrb	r3, [r7, #3]
    4d10:	2b00      	cmp	r3, #0
    4d12:	d008      	beq.n	4d26 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4d14:	7bfb      	ldrb	r3, [r7, #15]
    4d16:	2201      	movs	r2, #1
    4d18:	fa02 f303 	lsl.w	r3, r2, r3
    4d1c:	4619      	mov	r1, r3
    4d1e:	480d      	ldr	r0, [pc, #52]	; (4d54 <_ext_irq_enable+0x90>)
    4d20:	4b0d      	ldr	r3, [pc, #52]	; (4d58 <_ext_irq_enable+0x94>)
    4d22:	4798      	blx	r3
    4d24:	e00f      	b.n	4d46 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4d26:	7bfb      	ldrb	r3, [r7, #15]
    4d28:	2201      	movs	r2, #1
    4d2a:	fa02 f303 	lsl.w	r3, r2, r3
    4d2e:	4619      	mov	r1, r3
    4d30:	4808      	ldr	r0, [pc, #32]	; (4d54 <_ext_irq_enable+0x90>)
    4d32:	4b0a      	ldr	r3, [pc, #40]	; (4d5c <_ext_irq_enable+0x98>)
    4d34:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4d36:	7bfb      	ldrb	r3, [r7, #15]
    4d38:	2201      	movs	r2, #1
    4d3a:	fa02 f303 	lsl.w	r3, r2, r3
    4d3e:	4619      	mov	r1, r3
    4d40:	4804      	ldr	r0, [pc, #16]	; (4d54 <_ext_irq_enable+0x90>)
    4d42:	4b07      	ldr	r3, [pc, #28]	; (4d60 <_ext_irq_enable+0x9c>)
    4d44:	4798      	blx	r3
	}

	return ERR_NONE;
    4d46:	2300      	movs	r3, #0
}
    4d48:	4618      	mov	r0, r3
    4d4a:	3710      	adds	r7, #16
    4d4c:	46bd      	mov	sp, r7
    4d4e:	bd80      	pop	{r7, pc}
    4d50:	0001004c 	.word	0x0001004c
    4d54:	40002800 	.word	0x40002800
    4d58:	0000495d 	.word	0x0000495d
    4d5c:	00004979 	.word	0x00004979
    4d60:	00004941 	.word	0x00004941

00004d64 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4d64:	b580      	push	{r7, lr}
    4d66:	b084      	sub	sp, #16
    4d68:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4d6a:	4841      	ldr	r0, [pc, #260]	; (4e70 <_ext_irq_handler+0x10c>)
    4d6c:	4b41      	ldr	r3, [pc, #260]	; (4e74 <_ext_irq_handler+0x110>)
    4d6e:	4798      	blx	r3
    4d70:	4603      	mov	r3, r0
    4d72:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4d74:	f04f 33ff 	mov.w	r3, #4294967295
    4d78:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4d7a:	683b      	ldr	r3, [r7, #0]
    4d7c:	4619      	mov	r1, r3
    4d7e:	483c      	ldr	r0, [pc, #240]	; (4e70 <_ext_irq_handler+0x10c>)
    4d80:	4b3d      	ldr	r3, [pc, #244]	; (4e78 <_ext_irq_handler+0x114>)
    4d82:	4798      	blx	r3

	ASSERT(callback);
    4d84:	4b3d      	ldr	r3, [pc, #244]	; (4e7c <_ext_irq_handler+0x118>)
    4d86:	681b      	ldr	r3, [r3, #0]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	bf14      	ite	ne
    4d8c:	2301      	movne	r3, #1
    4d8e:	2300      	moveq	r3, #0
    4d90:	b2db      	uxtb	r3, r3
    4d92:	f44f 7282 	mov.w	r2, #260	; 0x104
    4d96:	493a      	ldr	r1, [pc, #232]	; (4e80 <_ext_irq_handler+0x11c>)
    4d98:	4618      	mov	r0, r3
    4d9a:	4b3a      	ldr	r3, [pc, #232]	; (4e84 <_ext_irq_handler+0x120>)
    4d9c:	4798      	blx	r3

	while (flags) {
    4d9e:	e060      	b.n	4e62 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    4da0:	683b      	ldr	r3, [r7, #0]
    4da2:	4618      	mov	r0, r3
    4da4:	4b38      	ldr	r3, [pc, #224]	; (4e88 <_ext_irq_handler+0x124>)
    4da6:	4798      	blx	r3
    4da8:	4603      	mov	r3, r0
    4daa:	b2db      	uxtb	r3, r3
    4dac:	3b01      	subs	r3, #1
    4dae:	b2db      	uxtb	r3, r3
    4db0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4db2:	e047      	b.n	4e44 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4db4:	2300      	movs	r3, #0
    4db6:	71fb      	strb	r3, [r7, #7]
    4db8:	2308      	movs	r3, #8
    4dba:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4dbc:	e024      	b.n	4e08 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4dbe:	79ba      	ldrb	r2, [r7, #6]
    4dc0:	79fb      	ldrb	r3, [r7, #7]
    4dc2:	4413      	add	r3, r2
    4dc4:	105b      	asrs	r3, r3, #1
    4dc6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4dc8:	797b      	ldrb	r3, [r7, #5]
    4dca:	4a30      	ldr	r2, [pc, #192]	; (4e8c <_ext_irq_handler+0x128>)
    4dcc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4dd0:	461a      	mov	r2, r3
    4dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4dd6:	429a      	cmp	r2, r3
    4dd8:	d106      	bne.n	4de8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4dda:	797b      	ldrb	r3, [r7, #5]
    4ddc:	4a2b      	ldr	r2, [pc, #172]	; (4e8c <_ext_irq_handler+0x128>)
    4dde:	00db      	lsls	r3, r3, #3
    4de0:	4413      	add	r3, r2
    4de2:	685b      	ldr	r3, [r3, #4]
    4de4:	60bb      	str	r3, [r7, #8]
					break;
    4de6:	e013      	b.n	4e10 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4de8:	797b      	ldrb	r3, [r7, #5]
    4dea:	4a28      	ldr	r2, [pc, #160]	; (4e8c <_ext_irq_handler+0x128>)
    4dec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4df0:	461a      	mov	r2, r3
    4df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4df6:	429a      	cmp	r2, r3
    4df8:	da03      	bge.n	4e02 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4dfa:	797b      	ldrb	r3, [r7, #5]
    4dfc:	3301      	adds	r3, #1
    4dfe:	71fb      	strb	r3, [r7, #7]
    4e00:	e002      	b.n	4e08 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    4e02:	797b      	ldrb	r3, [r7, #5]
    4e04:	3b01      	subs	r3, #1
    4e06:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4e08:	79ba      	ldrb	r2, [r7, #6]
    4e0a:	79fb      	ldrb	r3, [r7, #7]
    4e0c:	429a      	cmp	r2, r3
    4e0e:	d2d6      	bcs.n	4dbe <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4e10:	68bb      	ldr	r3, [r7, #8]
    4e12:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e16:	d003      	beq.n	4e20 <_ext_irq_handler+0xbc>
				callback(pin);
    4e18:	4b18      	ldr	r3, [pc, #96]	; (4e7c <_ext_irq_handler+0x118>)
    4e1a:	681b      	ldr	r3, [r3, #0]
    4e1c:	68b8      	ldr	r0, [r7, #8]
    4e1e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e24:	2201      	movs	r2, #1
    4e26:	fa02 f303 	lsl.w	r3, r2, r3
    4e2a:	43da      	mvns	r2, r3
    4e2c:	683b      	ldr	r3, [r7, #0]
    4e2e:	4013      	ands	r3, r2
    4e30:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4e32:	683b      	ldr	r3, [r7, #0]
    4e34:	4618      	mov	r0, r3
    4e36:	4b14      	ldr	r3, [pc, #80]	; (4e88 <_ext_irq_handler+0x124>)
    4e38:	4798      	blx	r3
    4e3a:	4603      	mov	r3, r0
    4e3c:	b2db      	uxtb	r3, r3
    4e3e:	3b01      	subs	r3, #1
    4e40:	b2db      	uxtb	r3, r3
    4e42:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4e48:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e4c:	d1b2      	bne.n	4db4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4e4e:	4808      	ldr	r0, [pc, #32]	; (4e70 <_ext_irq_handler+0x10c>)
    4e50:	4b08      	ldr	r3, [pc, #32]	; (4e74 <_ext_irq_handler+0x110>)
    4e52:	4798      	blx	r3
    4e54:	4603      	mov	r3, r0
    4e56:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4e58:	683b      	ldr	r3, [r7, #0]
    4e5a:	4619      	mov	r1, r3
    4e5c:	4804      	ldr	r0, [pc, #16]	; (4e70 <_ext_irq_handler+0x10c>)
    4e5e:	4b06      	ldr	r3, [pc, #24]	; (4e78 <_ext_irq_handler+0x114>)
    4e60:	4798      	blx	r3
	while (flags) {
    4e62:	683b      	ldr	r3, [r7, #0]
    4e64:	2b00      	cmp	r3, #0
    4e66:	d19b      	bne.n	4da0 <_ext_irq_handler+0x3c>
	}
}
    4e68:	bf00      	nop
    4e6a:	3710      	adds	r7, #16
    4e6c:	46bd      	mov	sp, r7
    4e6e:	bd80      	pop	{r7, pc}
    4e70:	40002800 	.word	0x40002800
    4e74:	00004929 	.word	0x00004929
    4e78:	00004941 	.word	0x00004941
    4e7c:	20000a50 	.word	0x20000a50
    4e80:	0001008c 	.word	0x0001008c
    4e84:	00003ba1 	.word	0x00003ba1
    4e88:	0000fa09 	.word	0x0000fa09
    4e8c:	0001004c 	.word	0x0001004c

00004e90 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    4e90:	b580      	push	{r7, lr}
    4e92:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4e94:	4b01      	ldr	r3, [pc, #4]	; (4e9c <EIC_0_Handler+0xc>)
    4e96:	4798      	blx	r3
} /**
    4e98:	bf00      	nop
    4e9a:	bd80      	pop	{r7, pc}
    4e9c:	00004d65 	.word	0x00004d65

00004ea0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ea4:	4b01      	ldr	r3, [pc, #4]	; (4eac <EIC_3_Handler+0xc>)
    4ea6:	4798      	blx	r3
} /**
    4ea8:	bf00      	nop
    4eaa:	bd80      	pop	{r7, pc}
    4eac:	00004d65 	.word	0x00004d65

00004eb0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4eb0:	b580      	push	{r7, lr}
    4eb2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4eb4:	4b01      	ldr	r3, [pc, #4]	; (4ebc <EIC_4_Handler+0xc>)
    4eb6:	4798      	blx	r3
} /**
    4eb8:	bf00      	nop
    4eba:	bd80      	pop	{r7, pc}
    4ebc:	00004d65 	.word	0x00004d65

00004ec0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ec4:	4b01      	ldr	r3, [pc, #4]	; (4ecc <EIC_5_Handler+0xc>)
    4ec6:	4798      	blx	r3
} /**
    4ec8:	bf00      	nop
    4eca:	bd80      	pop	{r7, pc}
    4ecc:	00004d65 	.word	0x00004d65

00004ed0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4ed0:	b580      	push	{r7, lr}
    4ed2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ed4:	4b01      	ldr	r3, [pc, #4]	; (4edc <EIC_6_Handler+0xc>)
    4ed6:	4798      	blx	r3
} /**
    4ed8:	bf00      	nop
    4eda:	bd80      	pop	{r7, pc}
    4edc:	00004d65 	.word	0x00004d65

00004ee0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4ee0:	b580      	push	{r7, lr}
    4ee2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ee4:	4b01      	ldr	r3, [pc, #4]	; (4eec <EIC_7_Handler+0xc>)
    4ee6:	4798      	blx	r3
} /**
    4ee8:	bf00      	nop
    4eea:	bd80      	pop	{r7, pc}
    4eec:	00004d65 	.word	0x00004d65

00004ef0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4ef4:	4b01      	ldr	r3, [pc, #4]	; (4efc <EIC_8_Handler+0xc>)
    4ef6:	4798      	blx	r3
} /**
    4ef8:	bf00      	nop
    4efa:	bd80      	pop	{r7, pc}
    4efc:	00004d65 	.word	0x00004d65

00004f00 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4f00:	b580      	push	{r7, lr}
    4f02:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4f04:	4b01      	ldr	r3, [pc, #4]	; (4f0c <EIC_9_Handler+0xc>)
    4f06:	4798      	blx	r3
}
    4f08:	bf00      	nop
    4f0a:	bd80      	pop	{r7, pc}
    4f0c:	00004d65 	.word	0x00004d65

00004f10 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4f10:	b480      	push	{r7}
    4f12:	b085      	sub	sp, #20
    4f14:	af00      	add	r7, sp, #0
    4f16:	60f8      	str	r0, [r7, #12]
    4f18:	460b      	mov	r3, r1
    4f1a:	607a      	str	r2, [r7, #4]
    4f1c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4f1e:	7afa      	ldrb	r2, [r7, #11]
    4f20:	68fb      	ldr	r3, [r7, #12]
    4f22:	3248      	adds	r2, #72	; 0x48
    4f24:	6879      	ldr	r1, [r7, #4]
    4f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4f2a:	bf00      	nop
    4f2c:	3714      	adds	r7, #20
    4f2e:	46bd      	mov	sp, r7
    4f30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f34:	4770      	bx	lr

00004f36 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    4f36:	b480      	push	{r7}
    4f38:	b083      	sub	sp, #12
    4f3a:	af00      	add	r7, sp, #0
    4f3c:	6078      	str	r0, [r7, #4]
    4f3e:	460b      	mov	r3, r1
    4f40:	70fb      	strb	r3, [r7, #3]
    4f42:	4613      	mov	r3, r2
    4f44:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    4f46:	78fb      	ldrb	r3, [r7, #3]
    4f48:	687a      	ldr	r2, [r7, #4]
    4f4a:	3304      	adds	r3, #4
    4f4c:	00db      	lsls	r3, r3, #3
    4f4e:	4413      	add	r3, r2
    4f50:	78ba      	ldrb	r2, [r7, #2]
    4f52:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4f54:	78fb      	ldrb	r3, [r7, #3]
    4f56:	78ba      	ldrb	r2, [r7, #2]
    4f58:	43d2      	mvns	r2, r2
    4f5a:	b2d1      	uxtb	r1, r2
    4f5c:	687a      	ldr	r2, [r7, #4]
    4f5e:	3304      	adds	r3, #4
    4f60:	00db      	lsls	r3, r3, #3
    4f62:	4413      	add	r3, r2
    4f64:	460a      	mov	r2, r1
    4f66:	711a      	strb	r2, [r3, #4]
}
    4f68:	bf00      	nop
    4f6a:	370c      	adds	r7, #12
    4f6c:	46bd      	mov	sp, r7
    4f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f72:	4770      	bx	lr

00004f74 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4f74:	b480      	push	{r7}
    4f76:	b085      	sub	sp, #20
    4f78:	af00      	add	r7, sp, #0
    4f7a:	60f8      	str	r0, [r7, #12]
    4f7c:	460b      	mov	r3, r1
    4f7e:	607a      	str	r2, [r7, #4]
    4f80:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4f82:	7afa      	ldrb	r2, [r7, #11]
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	3204      	adds	r2, #4
    4f88:	6879      	ldr	r1, [r7, #4]
    4f8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4f8e:	bf00      	nop
    4f90:	3714      	adds	r7, #20
    4f92:	46bd      	mov	sp, r7
    4f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f98:	4770      	bx	lr
	...

00004f9c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b082      	sub	sp, #8
    4fa0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4fa2:	2300      	movs	r3, #0
    4fa4:	71fb      	strb	r3, [r7, #7]
    4fa6:	e00b      	b.n	4fc0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4fa8:	79fb      	ldrb	r3, [r7, #7]
    4faa:	4a18      	ldr	r2, [pc, #96]	; (500c <_event_system_init+0x70>)
    4fac:	5cd3      	ldrb	r3, [r2, r3]
    4fae:	461a      	mov	r2, r3
    4fb0:	79fb      	ldrb	r3, [r7, #7]
    4fb2:	4619      	mov	r1, r3
    4fb4:	4816      	ldr	r0, [pc, #88]	; (5010 <_event_system_init+0x74>)
    4fb6:	4b17      	ldr	r3, [pc, #92]	; (5014 <_event_system_init+0x78>)
    4fb8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4fba:	79fb      	ldrb	r3, [r7, #7]
    4fbc:	3301      	adds	r3, #1
    4fbe:	71fb      	strb	r3, [r7, #7]
    4fc0:	79fb      	ldrb	r3, [r7, #7]
    4fc2:	2b42      	cmp	r3, #66	; 0x42
    4fc4:	d9f0      	bls.n	4fa8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4fc6:	2300      	movs	r3, #0
    4fc8:	71fb      	strb	r3, [r7, #7]
    4fca:	e016      	b.n	4ffa <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4fcc:	79fb      	ldrb	r3, [r7, #7]
    4fce:	4a12      	ldr	r2, [pc, #72]	; (5018 <_event_system_init+0x7c>)
    4fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4fd4:	461a      	mov	r2, r3
    4fd6:	79fb      	ldrb	r3, [r7, #7]
    4fd8:	4619      	mov	r1, r3
    4fda:	480d      	ldr	r0, [pc, #52]	; (5010 <_event_system_init+0x74>)
    4fdc:	4b0f      	ldr	r3, [pc, #60]	; (501c <_event_system_init+0x80>)
    4fde:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4fe0:	79fb      	ldrb	r3, [r7, #7]
    4fe2:	4a0f      	ldr	r2, [pc, #60]	; (5020 <_event_system_init+0x84>)
    4fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fe8:	b2da      	uxtb	r2, r3
    4fea:	79fb      	ldrb	r3, [r7, #7]
    4fec:	4619      	mov	r1, r3
    4fee:	4808      	ldr	r0, [pc, #32]	; (5010 <_event_system_init+0x74>)
    4ff0:	4b0c      	ldr	r3, [pc, #48]	; (5024 <_event_system_init+0x88>)
    4ff2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4ff4:	79fb      	ldrb	r3, [r7, #7]
    4ff6:	3301      	adds	r3, #1
    4ff8:	71fb      	strb	r3, [r7, #7]
    4ffa:	79fb      	ldrb	r3, [r7, #7]
    4ffc:	2b1f      	cmp	r3, #31
    4ffe:	d9e5      	bls.n	4fcc <_event_system_init+0x30>
	}

	return ERR_NONE;
    5000:	2300      	movs	r3, #0
}
    5002:	4618      	mov	r0, r3
    5004:	3708      	adds	r7, #8
    5006:	46bd      	mov	sp, r7
    5008:	bd80      	pop	{r7, pc}
    500a:	bf00      	nop
    500c:	000100a4 	.word	0x000100a4
    5010:	4100e000 	.word	0x4100e000
    5014:	00004f11 	.word	0x00004f11
    5018:	000100e8 	.word	0x000100e8
    501c:	00004f75 	.word	0x00004f75
    5020:	00010128 	.word	0x00010128
    5024:	00004f37 	.word	0x00004f37

00005028 <hri_gclk_wait_for_sync>:
{
    5028:	b480      	push	{r7}
    502a:	b083      	sub	sp, #12
    502c:	af00      	add	r7, sp, #0
    502e:	6078      	str	r0, [r7, #4]
    5030:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5032:	bf00      	nop
    5034:	687b      	ldr	r3, [r7, #4]
    5036:	685a      	ldr	r2, [r3, #4]
    5038:	683b      	ldr	r3, [r7, #0]
    503a:	4013      	ands	r3, r2
    503c:	2b00      	cmp	r3, #0
    503e:	d1f9      	bne.n	5034 <hri_gclk_wait_for_sync+0xc>
}
    5040:	bf00      	nop
    5042:	370c      	adds	r7, #12
    5044:	46bd      	mov	sp, r7
    5046:	f85d 7b04 	ldr.w	r7, [sp], #4
    504a:	4770      	bx	lr

0000504c <hri_gclk_write_GENCTRL_reg>:
{
    504c:	b580      	push	{r7, lr}
    504e:	b084      	sub	sp, #16
    5050:	af00      	add	r7, sp, #0
    5052:	60f8      	str	r0, [r7, #12]
    5054:	460b      	mov	r3, r1
    5056:	607a      	str	r2, [r7, #4]
    5058:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    505a:	7afa      	ldrb	r2, [r7, #11]
    505c:	68fb      	ldr	r3, [r7, #12]
    505e:	3208      	adds	r2, #8
    5060:	6879      	ldr	r1, [r7, #4]
    5062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5066:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    506a:	68f8      	ldr	r0, [r7, #12]
    506c:	4b02      	ldr	r3, [pc, #8]	; (5078 <hri_gclk_write_GENCTRL_reg+0x2c>)
    506e:	4798      	blx	r3
}
    5070:	bf00      	nop
    5072:	3710      	adds	r7, #16
    5074:	46bd      	mov	sp, r7
    5076:	bd80      	pop	{r7, pc}
    5078:	00005029 	.word	0x00005029

0000507c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    507c:	b580      	push	{r7, lr}
    507e:	b082      	sub	sp, #8
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	f003 0301 	and.w	r3, r3, #1
    508a:	2b00      	cmp	r3, #0
    508c:	d004      	beq.n	5098 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    508e:	4a36      	ldr	r2, [pc, #216]	; (5168 <_gclk_init_generators_by_fref+0xec>)
    5090:	2100      	movs	r1, #0
    5092:	4836      	ldr	r0, [pc, #216]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    5094:	4b36      	ldr	r3, [pc, #216]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    5096:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	f003 0302 	and.w	r3, r3, #2
    509e:	2b00      	cmp	r3, #0
    50a0:	d004      	beq.n	50ac <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    50a2:	4a34      	ldr	r2, [pc, #208]	; (5174 <_gclk_init_generators_by_fref+0xf8>)
    50a4:	2101      	movs	r1, #1
    50a6:	4831      	ldr	r0, [pc, #196]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    50a8:	4b31      	ldr	r3, [pc, #196]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    50aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	f003 0304 	and.w	r3, r3, #4
    50b2:	2b00      	cmp	r3, #0
    50b4:	d004      	beq.n	50c0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    50b6:	4a30      	ldr	r2, [pc, #192]	; (5178 <_gclk_init_generators_by_fref+0xfc>)
    50b8:	2102      	movs	r1, #2
    50ba:	482c      	ldr	r0, [pc, #176]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    50bc:	4b2c      	ldr	r3, [pc, #176]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    50be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	f003 0308 	and.w	r3, r3, #8
    50c6:	2b00      	cmp	r3, #0
    50c8:	d004      	beq.n	50d4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    50ca:	4a2c      	ldr	r2, [pc, #176]	; (517c <_gclk_init_generators_by_fref+0x100>)
    50cc:	2103      	movs	r1, #3
    50ce:	4827      	ldr	r0, [pc, #156]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    50d0:	4b27      	ldr	r3, [pc, #156]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    50d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	f003 0310 	and.w	r3, r3, #16
    50da:	2b00      	cmp	r3, #0
    50dc:	d004      	beq.n	50e8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    50de:	4a28      	ldr	r2, [pc, #160]	; (5180 <_gclk_init_generators_by_fref+0x104>)
    50e0:	2104      	movs	r1, #4
    50e2:	4822      	ldr	r0, [pc, #136]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    50e4:	4b22      	ldr	r3, [pc, #136]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    50e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	f003 0320 	and.w	r3, r3, #32
    50ee:	2b00      	cmp	r3, #0
    50f0:	d004      	beq.n	50fc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    50f2:	4a24      	ldr	r2, [pc, #144]	; (5184 <_gclk_init_generators_by_fref+0x108>)
    50f4:	2105      	movs	r1, #5
    50f6:	481d      	ldr	r0, [pc, #116]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    50f8:	4b1d      	ldr	r3, [pc, #116]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    50fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5102:	2b00      	cmp	r3, #0
    5104:	d004      	beq.n	5110 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    5106:	4a20      	ldr	r2, [pc, #128]	; (5188 <_gclk_init_generators_by_fref+0x10c>)
    5108:	2106      	movs	r1, #6
    510a:	4818      	ldr	r0, [pc, #96]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    510c:	4b18      	ldr	r3, [pc, #96]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    510e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5116:	2b00      	cmp	r3, #0
    5118:	d004      	beq.n	5124 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    511a:	4a1c      	ldr	r2, [pc, #112]	; (518c <_gclk_init_generators_by_fref+0x110>)
    511c:	2107      	movs	r1, #7
    511e:	4813      	ldr	r0, [pc, #76]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    5120:	4b13      	ldr	r3, [pc, #76]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    5122:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	f403 7380 	and.w	r3, r3, #256	; 0x100
    512a:	2b00      	cmp	r3, #0
    512c:	d004      	beq.n	5138 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    512e:	4a18      	ldr	r2, [pc, #96]	; (5190 <_gclk_init_generators_by_fref+0x114>)
    5130:	2108      	movs	r1, #8
    5132:	480e      	ldr	r0, [pc, #56]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    5134:	4b0e      	ldr	r3, [pc, #56]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    5136:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    513e:	2b00      	cmp	r3, #0
    5140:	d004      	beq.n	514c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    5142:	4a14      	ldr	r2, [pc, #80]	; (5194 <_gclk_init_generators_by_fref+0x118>)
    5144:	210a      	movs	r1, #10
    5146:	4809      	ldr	r0, [pc, #36]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    5148:	4b09      	ldr	r3, [pc, #36]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    514a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    5152:	2b00      	cmp	r3, #0
    5154:	d004      	beq.n	5160 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    5156:	4a10      	ldr	r2, [pc, #64]	; (5198 <_gclk_init_generators_by_fref+0x11c>)
    5158:	210b      	movs	r1, #11
    515a:	4804      	ldr	r0, [pc, #16]	; (516c <_gclk_init_generators_by_fref+0xf0>)
    515c:	4b04      	ldr	r3, [pc, #16]	; (5170 <_gclk_init_generators_by_fref+0xf4>)
    515e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    5160:	bf00      	nop
    5162:	3708      	adds	r7, #8
    5164:	46bd      	mov	sp, r7
    5166:	bd80      	pop	{r7, pc}
    5168:	00010107 	.word	0x00010107
    516c:	40001c00 	.word	0x40001c00
    5170:	0000504d 	.word	0x0000504d
    5174:	00010907 	.word	0x00010907
    5178:	00010906 	.word	0x00010906
    517c:	00020908 	.word	0x00020908
    5180:	00010901 	.word	0x00010901
    5184:	00062901 	.word	0x00062901
    5188:	000c2901 	.word	0x000c2901
    518c:	00082908 	.word	0x00082908
    5190:	00032901 	.word	0x00032901
    5194:	00010905 	.word	0x00010905
    5198:	00041905 	.word	0x00041905

0000519c <hri_mclk_write_CPUDIV_reg>:
{
    519c:	b480      	push	{r7}
    519e:	b083      	sub	sp, #12
    51a0:	af00      	add	r7, sp, #0
    51a2:	6078      	str	r0, [r7, #4]
    51a4:	460b      	mov	r3, r1
    51a6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    51a8:	687b      	ldr	r3, [r7, #4]
    51aa:	78fa      	ldrb	r2, [r7, #3]
    51ac:	715a      	strb	r2, [r3, #5]
}
    51ae:	bf00      	nop
    51b0:	370c      	adds	r7, #12
    51b2:	46bd      	mov	sp, r7
    51b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51b8:	4770      	bx	lr
	...

000051bc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    51bc:	b580      	push	{r7, lr}
    51be:	b082      	sub	sp, #8
    51c0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    51c2:	4b05      	ldr	r3, [pc, #20]	; (51d8 <_mclk_init+0x1c>)
    51c4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    51c6:	2101      	movs	r1, #1
    51c8:	6878      	ldr	r0, [r7, #4]
    51ca:	4b04      	ldr	r3, [pc, #16]	; (51dc <_mclk_init+0x20>)
    51cc:	4798      	blx	r3
}
    51ce:	bf00      	nop
    51d0:	3708      	adds	r7, #8
    51d2:	46bd      	mov	sp, r7
    51d4:	bd80      	pop	{r7, pc}
    51d6:	bf00      	nop
    51d8:	40000800 	.word	0x40000800
    51dc:	0000519d 	.word	0x0000519d

000051e0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    51e0:	b480      	push	{r7}
    51e2:	b083      	sub	sp, #12
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
    51e8:	460b      	mov	r3, r1
    51ea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	78fa      	ldrb	r2, [r7, #3]
    51f0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    51f2:	bf00      	nop
    51f4:	370c      	adds	r7, #12
    51f6:	46bd      	mov	sp, r7
    51f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51fc:	4770      	bx	lr

000051fe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    51fe:	b480      	push	{r7}
    5200:	b083      	sub	sp, #12
    5202:	af00      	add	r7, sp, #0
    5204:	6078      	str	r0, [r7, #4]
    5206:	460b      	mov	r3, r1
    5208:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	887a      	ldrh	r2, [r7, #2]
    520e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5210:	bf00      	nop
    5212:	370c      	adds	r7, #12
    5214:	46bd      	mov	sp, r7
    5216:	f85d 7b04 	ldr.w	r7, [sp], #4
    521a:	4770      	bx	lr

0000521c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    521c:	b480      	push	{r7}
    521e:	b083      	sub	sp, #12
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    5224:	460b      	mov	r3, r1
    5226:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	78fa      	ldrb	r2, [r7, #3]
    522c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    522e:	bf00      	nop
    5230:	370c      	adds	r7, #12
    5232:	46bd      	mov	sp, r7
    5234:	f85d 7b04 	ldr.w	r7, [sp], #4
    5238:	4770      	bx	lr

0000523a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    523a:	b480      	push	{r7}
    523c:	b083      	sub	sp, #12
    523e:	af00      	add	r7, sp, #0
    5240:	6078      	str	r0, [r7, #4]
    5242:	460b      	mov	r3, r1
    5244:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5246:	687b      	ldr	r3, [r7, #4]
    5248:	78fa      	ldrb	r2, [r7, #3]
    524a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    524c:	bf00      	nop
    524e:	370c      	adds	r7, #12
    5250:	46bd      	mov	sp, r7
    5252:	f85d 7b04 	ldr.w	r7, [sp], #4
    5256:	4770      	bx	lr

00005258 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5258:	b480      	push	{r7}
    525a:	b085      	sub	sp, #20
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	69db      	ldr	r3, [r3, #28]
    5264:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5266:	68fb      	ldr	r3, [r7, #12]
    5268:	0a1b      	lsrs	r3, r3, #8
    526a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    526e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5270:	68fb      	ldr	r3, [r7, #12]
}
    5272:	4618      	mov	r0, r3
    5274:	3714      	adds	r7, #20
    5276:	46bd      	mov	sp, r7
    5278:	f85d 7b04 	ldr.w	r7, [sp], #4
    527c:	4770      	bx	lr

0000527e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    527e:	b480      	push	{r7}
    5280:	b083      	sub	sp, #12
    5282:	af00      	add	r7, sp, #0
    5284:	6078      	str	r0, [r7, #4]
    5286:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	683a      	ldr	r2, [r7, #0]
    528c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    528e:	bf00      	nop
    5290:	370c      	adds	r7, #12
    5292:	46bd      	mov	sp, r7
    5294:	f85d 7b04 	ldr.w	r7, [sp], #4
    5298:	4770      	bx	lr
	...

0000529c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    529c:	b580      	push	{r7, lr}
    529e:	b082      	sub	sp, #8
    52a0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    52a2:	4b13      	ldr	r3, [pc, #76]	; (52f0 <_osc32kctrl_init_sources+0x54>)
    52a4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    52a6:	2300      	movs	r3, #0
    52a8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    52aa:	f242 018e 	movw	r1, #8334	; 0x208e
    52ae:	6878      	ldr	r0, [r7, #4]
    52b0:	4b10      	ldr	r3, [pc, #64]	; (52f4 <_osc32kctrl_init_sources+0x58>)
    52b2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    52b4:	2100      	movs	r1, #0
    52b6:	6878      	ldr	r0, [r7, #4]
    52b8:	4b0f      	ldr	r3, [pc, #60]	; (52f8 <_osc32kctrl_init_sources+0x5c>)
    52ba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    52bc:	2100      	movs	r1, #0
    52be:	6878      	ldr	r0, [r7, #4]
    52c0:	4b0e      	ldr	r3, [pc, #56]	; (52fc <_osc32kctrl_init_sources+0x60>)
    52c2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    52c4:	6878      	ldr	r0, [r7, #4]
    52c6:	4b0e      	ldr	r3, [pc, #56]	; (5300 <_osc32kctrl_init_sources+0x64>)
    52c8:	4798      	blx	r3
    52ca:	4603      	mov	r3, r0
    52cc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    52ce:	887b      	ldrh	r3, [r7, #2]
    52d0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    52d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    52d6:	4619      	mov	r1, r3
    52d8:	6878      	ldr	r0, [r7, #4]
    52da:	4b0a      	ldr	r3, [pc, #40]	; (5304 <_osc32kctrl_init_sources+0x68>)
    52dc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    52de:	2100      	movs	r1, #0
    52e0:	6878      	ldr	r0, [r7, #4]
    52e2:	4b09      	ldr	r3, [pc, #36]	; (5308 <_osc32kctrl_init_sources+0x6c>)
    52e4:	4798      	blx	r3
	(void)calib;
}
    52e6:	bf00      	nop
    52e8:	3708      	adds	r7, #8
    52ea:	46bd      	mov	sp, r7
    52ec:	bd80      	pop	{r7, pc}
    52ee:	bf00      	nop
    52f0:	40001400 	.word	0x40001400
    52f4:	000051ff 	.word	0x000051ff
    52f8:	0000521d 	.word	0x0000521d
    52fc:	0000523b 	.word	0x0000523b
    5300:	00005259 	.word	0x00005259
    5304:	0000527f 	.word	0x0000527f
    5308:	000051e1 	.word	0x000051e1

0000530c <hri_gclk_wait_for_sync>:
{
    530c:	b480      	push	{r7}
    530e:	b083      	sub	sp, #12
    5310:	af00      	add	r7, sp, #0
    5312:	6078      	str	r0, [r7, #4]
    5314:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5316:	bf00      	nop
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	685a      	ldr	r2, [r3, #4]
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	4013      	ands	r3, r2
    5320:	2b00      	cmp	r3, #0
    5322:	d1f9      	bne.n	5318 <hri_gclk_wait_for_sync+0xc>
}
    5324:	bf00      	nop
    5326:	370c      	adds	r7, #12
    5328:	46bd      	mov	sp, r7
    532a:	f85d 7b04 	ldr.w	r7, [sp], #4
    532e:	4770      	bx	lr

00005330 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5330:	b480      	push	{r7}
    5332:	b083      	sub	sp, #12
    5334:	af00      	add	r7, sp, #0
    5336:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5338:	687b      	ldr	r3, [r7, #4]
    533a:	685b      	ldr	r3, [r3, #4]
    533c:	089b      	lsrs	r3, r3, #2
    533e:	f003 0301 	and.w	r3, r3, #1
    5342:	2b00      	cmp	r3, #0
    5344:	bf14      	ite	ne
    5346:	2301      	movne	r3, #1
    5348:	2300      	moveq	r3, #0
    534a:	b2db      	uxtb	r3, r3
}
    534c:	4618      	mov	r0, r3
    534e:	370c      	adds	r7, #12
    5350:	46bd      	mov	sp, r7
    5352:	f85d 7b04 	ldr.w	r7, [sp], #4
    5356:	4770      	bx	lr

00005358 <hri_gclk_read_SYNCBUSY_reg>:
{
    5358:	b480      	push	{r7}
    535a:	b083      	sub	sp, #12
    535c:	af00      	add	r7, sp, #0
    535e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	685b      	ldr	r3, [r3, #4]
}
    5364:	4618      	mov	r0, r3
    5366:	370c      	adds	r7, #12
    5368:	46bd      	mov	sp, r7
    536a:	f85d 7b04 	ldr.w	r7, [sp], #4
    536e:	4770      	bx	lr

00005370 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5370:	b580      	push	{r7, lr}
    5372:	b086      	sub	sp, #24
    5374:	af00      	add	r7, sp, #0
    5376:	60f8      	str	r0, [r7, #12]
    5378:	460b      	mov	r3, r1
    537a:	607a      	str	r2, [r7, #4]
    537c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    537e:	7afa      	ldrb	r2, [r7, #11]
    5380:	68fb      	ldr	r3, [r7, #12]
    5382:	3208      	adds	r2, #8
    5384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5388:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    538a:	697b      	ldr	r3, [r7, #20]
    538c:	f023 030f 	bic.w	r3, r3, #15
    5390:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	f003 030f 	and.w	r3, r3, #15
    5398:	697a      	ldr	r2, [r7, #20]
    539a:	4313      	orrs	r3, r2
    539c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    539e:	7afa      	ldrb	r2, [r7, #11]
    53a0:	68fb      	ldr	r3, [r7, #12]
    53a2:	3208      	adds	r2, #8
    53a4:	6979      	ldr	r1, [r7, #20]
    53a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    53aa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    53ae:	68f8      	ldr	r0, [r7, #12]
    53b0:	4b02      	ldr	r3, [pc, #8]	; (53bc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    53b2:	4798      	blx	r3
}
    53b4:	bf00      	nop
    53b6:	3718      	adds	r7, #24
    53b8:	46bd      	mov	sp, r7
    53ba:	bd80      	pop	{r7, pc}
    53bc:	0000530d 	.word	0x0000530d

000053c0 <hri_gclk_write_PCHCTRL_reg>:
{
    53c0:	b480      	push	{r7}
    53c2:	b085      	sub	sp, #20
    53c4:	af00      	add	r7, sp, #0
    53c6:	60f8      	str	r0, [r7, #12]
    53c8:	460b      	mov	r3, r1
    53ca:	607a      	str	r2, [r7, #4]
    53cc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    53ce:	7afa      	ldrb	r2, [r7, #11]
    53d0:	68fb      	ldr	r3, [r7, #12]
    53d2:	3220      	adds	r2, #32
    53d4:	6879      	ldr	r1, [r7, #4]
    53d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    53da:	bf00      	nop
    53dc:	3714      	adds	r7, #20
    53de:	46bd      	mov	sp, r7
    53e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e4:	4770      	bx	lr

000053e6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    53e6:	b480      	push	{r7}
    53e8:	b085      	sub	sp, #20
    53ea:	af00      	add	r7, sp, #0
    53ec:	60f8      	str	r0, [r7, #12]
    53ee:	460b      	mov	r3, r1
    53f0:	607a      	str	r2, [r7, #4]
    53f2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    53f4:	bf00      	nop
    53f6:	7afa      	ldrb	r2, [r7, #11]
    53f8:	68f9      	ldr	r1, [r7, #12]
    53fa:	4613      	mov	r3, r2
    53fc:	009b      	lsls	r3, r3, #2
    53fe:	4413      	add	r3, r2
    5400:	009b      	lsls	r3, r3, #2
    5402:	440b      	add	r3, r1
    5404:	333c      	adds	r3, #60	; 0x3c
    5406:	681a      	ldr	r2, [r3, #0]
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	4013      	ands	r3, r2
    540c:	2b00      	cmp	r3, #0
    540e:	d1f2      	bne.n	53f6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5410:	bf00      	nop
    5412:	3714      	adds	r7, #20
    5414:	46bd      	mov	sp, r7
    5416:	f85d 7b04 	ldr.w	r7, [sp], #4
    541a:	4770      	bx	lr

0000541c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    541c:	b480      	push	{r7}
    541e:	b083      	sub	sp, #12
    5420:	af00      	add	r7, sp, #0
    5422:	6078      	str	r0, [r7, #4]
    5424:	460b      	mov	r3, r1
    5426:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5428:	78fa      	ldrb	r2, [r7, #3]
    542a:	6879      	ldr	r1, [r7, #4]
    542c:	4613      	mov	r3, r2
    542e:	009b      	lsls	r3, r3, #2
    5430:	4413      	add	r3, r2
    5432:	009b      	lsls	r3, r3, #2
    5434:	440b      	add	r3, r1
    5436:	3340      	adds	r3, #64	; 0x40
    5438:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    543a:	f003 0301 	and.w	r3, r3, #1
    543e:	2b00      	cmp	r3, #0
    5440:	bf14      	ite	ne
    5442:	2301      	movne	r3, #1
    5444:	2300      	moveq	r3, #0
    5446:	b2db      	uxtb	r3, r3
}
    5448:	4618      	mov	r0, r3
    544a:	370c      	adds	r7, #12
    544c:	46bd      	mov	sp, r7
    544e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5452:	4770      	bx	lr

00005454 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5454:	b480      	push	{r7}
    5456:	b083      	sub	sp, #12
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    545c:	460b      	mov	r3, r1
    545e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5460:	78fa      	ldrb	r2, [r7, #3]
    5462:	6879      	ldr	r1, [r7, #4]
    5464:	4613      	mov	r3, r2
    5466:	009b      	lsls	r3, r3, #2
    5468:	4413      	add	r3, r2
    546a:	009b      	lsls	r3, r3, #2
    546c:	440b      	add	r3, r1
    546e:	3340      	adds	r3, #64	; 0x40
    5470:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5472:	085b      	lsrs	r3, r3, #1
    5474:	f003 0301 	and.w	r3, r3, #1
    5478:	2b00      	cmp	r3, #0
    547a:	bf14      	ite	ne
    547c:	2301      	movne	r3, #1
    547e:	2300      	moveq	r3, #0
    5480:	b2db      	uxtb	r3, r3
}
    5482:	4618      	mov	r0, r3
    5484:	370c      	adds	r7, #12
    5486:	46bd      	mov	sp, r7
    5488:	f85d 7b04 	ldr.w	r7, [sp], #4
    548c:	4770      	bx	lr
	...

00005490 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5490:	b580      	push	{r7, lr}
    5492:	b082      	sub	sp, #8
    5494:	af00      	add	r7, sp, #0
    5496:	6078      	str	r0, [r7, #4]
    5498:	460b      	mov	r3, r1
    549a:	70fb      	strb	r3, [r7, #3]
    549c:	4613      	mov	r3, r2
    549e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    54a0:	78fa      	ldrb	r2, [r7, #3]
    54a2:	6879      	ldr	r1, [r7, #4]
    54a4:	4613      	mov	r3, r2
    54a6:	009b      	lsls	r3, r3, #2
    54a8:	4413      	add	r3, r2
    54aa:	009b      	lsls	r3, r3, #2
    54ac:	440b      	add	r3, r1
    54ae:	3330      	adds	r3, #48	; 0x30
    54b0:	78ba      	ldrb	r2, [r7, #2]
    54b2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    54b4:	78fb      	ldrb	r3, [r7, #3]
    54b6:	2202      	movs	r2, #2
    54b8:	4619      	mov	r1, r3
    54ba:	6878      	ldr	r0, [r7, #4]
    54bc:	4b02      	ldr	r3, [pc, #8]	; (54c8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    54be:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    54c0:	bf00      	nop
    54c2:	3708      	adds	r7, #8
    54c4:	46bd      	mov	sp, r7
    54c6:	bd80      	pop	{r7, pc}
    54c8:	000053e7 	.word	0x000053e7

000054cc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b084      	sub	sp, #16
    54d0:	af00      	add	r7, sp, #0
    54d2:	60f8      	str	r0, [r7, #12]
    54d4:	460b      	mov	r3, r1
    54d6:	607a      	str	r2, [r7, #4]
    54d8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    54da:	7afa      	ldrb	r2, [r7, #11]
    54dc:	68f9      	ldr	r1, [r7, #12]
    54de:	4613      	mov	r3, r2
    54e0:	009b      	lsls	r3, r3, #2
    54e2:	4413      	add	r3, r2
    54e4:	009b      	lsls	r3, r3, #2
    54e6:	440b      	add	r3, r1
    54e8:	3334      	adds	r3, #52	; 0x34
    54ea:	687a      	ldr	r2, [r7, #4]
    54ec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    54ee:	7afb      	ldrb	r3, [r7, #11]
    54f0:	2206      	movs	r2, #6
    54f2:	4619      	mov	r1, r3
    54f4:	68f8      	ldr	r0, [r7, #12]
    54f6:	4b03      	ldr	r3, [pc, #12]	; (5504 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    54f8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    54fa:	bf00      	nop
    54fc:	3710      	adds	r7, #16
    54fe:	46bd      	mov	sp, r7
    5500:	bd80      	pop	{r7, pc}
    5502:	bf00      	nop
    5504:	000053e7 	.word	0x000053e7

00005508 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5508:	b480      	push	{r7}
    550a:	b085      	sub	sp, #20
    550c:	af00      	add	r7, sp, #0
    550e:	60f8      	str	r0, [r7, #12]
    5510:	460b      	mov	r3, r1
    5512:	607a      	str	r2, [r7, #4]
    5514:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5516:	7afa      	ldrb	r2, [r7, #11]
    5518:	68f9      	ldr	r1, [r7, #12]
    551a:	4613      	mov	r3, r2
    551c:	009b      	lsls	r3, r3, #2
    551e:	4413      	add	r3, r2
    5520:	009b      	lsls	r3, r3, #2
    5522:	440b      	add	r3, r1
    5524:	3338      	adds	r3, #56	; 0x38
    5526:	687a      	ldr	r2, [r7, #4]
    5528:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    552a:	bf00      	nop
    552c:	3714      	adds	r7, #20
    552e:	46bd      	mov	sp, r7
    5530:	f85d 7b04 	ldr.w	r7, [sp], #4
    5534:	4770      	bx	lr

00005536 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5536:	b480      	push	{r7}
    5538:	b083      	sub	sp, #12
    553a:	af00      	add	r7, sp, #0
    553c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	691b      	ldr	r3, [r3, #16]
    5542:	085b      	lsrs	r3, r3, #1
    5544:	f003 0301 	and.w	r3, r3, #1
    5548:	2b00      	cmp	r3, #0
    554a:	bf14      	ite	ne
    554c:	2301      	movne	r3, #1
    554e:	2300      	moveq	r3, #0
    5550:	b2db      	uxtb	r3, r3
}
    5552:	4618      	mov	r0, r3
    5554:	370c      	adds	r7, #12
    5556:	46bd      	mov	sp, r7
    5558:	f85d 7b04 	ldr.w	r7, [sp], #4
    555c:	4770      	bx	lr

0000555e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    555e:	b480      	push	{r7}
    5560:	b083      	sub	sp, #12
    5562:	af00      	add	r7, sp, #0
    5564:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5566:	687b      	ldr	r3, [r7, #4]
    5568:	691b      	ldr	r3, [r3, #16]
    556a:	0a1b      	lsrs	r3, r3, #8
    556c:	f003 0301 	and.w	r3, r3, #1
    5570:	2b00      	cmp	r3, #0
    5572:	bf14      	ite	ne
    5574:	2301      	movne	r3, #1
    5576:	2300      	moveq	r3, #0
    5578:	b2db      	uxtb	r3, r3
}
    557a:	4618      	mov	r0, r3
    557c:	370c      	adds	r7, #12
    557e:	46bd      	mov	sp, r7
    5580:	f85d 7b04 	ldr.w	r7, [sp], #4
    5584:	4770      	bx	lr

00005586 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5586:	b480      	push	{r7}
    5588:	b085      	sub	sp, #20
    558a:	af00      	add	r7, sp, #0
    558c:	6078      	str	r0, [r7, #4]
    558e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	691b      	ldr	r3, [r3, #16]
    5594:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5596:	68fa      	ldr	r2, [r7, #12]
    5598:	683b      	ldr	r3, [r7, #0]
    559a:	4013      	ands	r3, r2
    559c:	60fb      	str	r3, [r7, #12]
	return tmp;
    559e:	68fb      	ldr	r3, [r7, #12]
}
    55a0:	4618      	mov	r0, r3
    55a2:	3714      	adds	r7, #20
    55a4:	46bd      	mov	sp, r7
    55a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55aa:	4770      	bx	lr

000055ac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    55ac:	b480      	push	{r7}
    55ae:	b085      	sub	sp, #20
    55b0:	af00      	add	r7, sp, #0
    55b2:	60f8      	str	r0, [r7, #12]
    55b4:	460b      	mov	r3, r1
    55b6:	607a      	str	r2, [r7, #4]
    55b8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    55ba:	7afb      	ldrb	r3, [r7, #11]
    55bc:	68fa      	ldr	r2, [r7, #12]
    55be:	3304      	adds	r3, #4
    55c0:	009b      	lsls	r3, r3, #2
    55c2:	4413      	add	r3, r2
    55c4:	687a      	ldr	r2, [r7, #4]
    55c6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55c8:	bf00      	nop
    55ca:	3714      	adds	r7, #20
    55cc:	46bd      	mov	sp, r7
    55ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    55d2:	4770      	bx	lr

000055d4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    55d4:	b480      	push	{r7}
    55d6:	b083      	sub	sp, #12
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
    55dc:	460b      	mov	r3, r1
    55de:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	78fa      	ldrb	r2, [r7, #3]
    55e4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    55e6:	bf00      	nop
    55e8:	370c      	adds	r7, #12
    55ea:	46bd      	mov	sp, r7
    55ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f0:	4770      	bx	lr

000055f2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    55f2:	b480      	push	{r7}
    55f4:	b085      	sub	sp, #20
    55f6:	af00      	add	r7, sp, #0
    55f8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    55fa:	687b      	ldr	r3, [r7, #4]
    55fc:	f893 3020 	ldrb.w	r3, [r3, #32]
    5600:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5602:	7bfb      	ldrb	r3, [r7, #15]
    5604:	f003 0301 	and.w	r3, r3, #1
    5608:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    560a:	7bfb      	ldrb	r3, [r7, #15]
    560c:	2b00      	cmp	r3, #0
    560e:	bf14      	ite	ne
    5610:	2301      	movne	r3, #1
    5612:	2300      	moveq	r3, #0
    5614:	b2db      	uxtb	r3, r3
}
    5616:	4618      	mov	r0, r3
    5618:	3714      	adds	r7, #20
    561a:	46bd      	mov	sp, r7
    561c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5620:	4770      	bx	lr

00005622 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5622:	b480      	push	{r7}
    5624:	b083      	sub	sp, #12
    5626:	af00      	add	r7, sp, #0
    5628:	6078      	str	r0, [r7, #4]
    562a:	460b      	mov	r3, r1
    562c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	78fa      	ldrb	r2, [r7, #3]
    5632:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5636:	bf00      	nop
    5638:	370c      	adds	r7, #12
    563a:	46bd      	mov	sp, r7
    563c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5640:	4770      	bx	lr

00005642 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5642:	b480      	push	{r7}
    5644:	b083      	sub	sp, #12
    5646:	af00      	add	r7, sp, #0
    5648:	6078      	str	r0, [r7, #4]
    564a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	683a      	ldr	r2, [r7, #0]
    5650:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5652:	bf00      	nop
    5654:	370c      	adds	r7, #12
    5656:	46bd      	mov	sp, r7
    5658:	f85d 7b04 	ldr.w	r7, [sp], #4
    565c:	4770      	bx	lr

0000565e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    565e:	b480      	push	{r7}
    5660:	b083      	sub	sp, #12
    5662:	af00      	add	r7, sp, #0
    5664:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    566a:	4618      	mov	r0, r3
    566c:	370c      	adds	r7, #12
    566e:	46bd      	mov	sp, r7
    5670:	f85d 7b04 	ldr.w	r7, [sp], #4
    5674:	4770      	bx	lr

00005676 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5676:	b480      	push	{r7}
    5678:	b083      	sub	sp, #12
    567a:	af00      	add	r7, sp, #0
    567c:	6078      	str	r0, [r7, #4]
    567e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	683a      	ldr	r2, [r7, #0]
    5684:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5686:	bf00      	nop
    5688:	370c      	adds	r7, #12
    568a:	46bd      	mov	sp, r7
    568c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5690:	4770      	bx	lr

00005692 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5692:	b480      	push	{r7}
    5694:	b085      	sub	sp, #20
    5696:	af00      	add	r7, sp, #0
    5698:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    56a0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    56a2:	7bfb      	ldrb	r3, [r7, #15]
    56a4:	085b      	lsrs	r3, r3, #1
    56a6:	b2db      	uxtb	r3, r3
    56a8:	f003 0301 	and.w	r3, r3, #1
    56ac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    56ae:	7bfb      	ldrb	r3, [r7, #15]
    56b0:	2b00      	cmp	r3, #0
    56b2:	bf14      	ite	ne
    56b4:	2301      	movne	r3, #1
    56b6:	2300      	moveq	r3, #0
    56b8:	b2db      	uxtb	r3, r3
}
    56ba:	4618      	mov	r0, r3
    56bc:	3714      	adds	r7, #20
    56be:	46bd      	mov	sp, r7
    56c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    56c4:	4770      	bx	lr

000056c6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    56c6:	b480      	push	{r7}
    56c8:	b085      	sub	sp, #20
    56ca:	af00      	add	r7, sp, #0
    56cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    56d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    56d6:	7bfb      	ldrb	r3, [r7, #15]
    56d8:	089b      	lsrs	r3, r3, #2
    56da:	b2db      	uxtb	r3, r3
    56dc:	f003 0301 	and.w	r3, r3, #1
    56e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    56e2:	7bfb      	ldrb	r3, [r7, #15]
    56e4:	2b00      	cmp	r3, #0
    56e6:	bf14      	ite	ne
    56e8:	2301      	movne	r3, #1
    56ea:	2300      	moveq	r3, #0
    56ec:	b2db      	uxtb	r3, r3
}
    56ee:	4618      	mov	r0, r3
    56f0:	3714      	adds	r7, #20
    56f2:	46bd      	mov	sp, r7
    56f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    56f8:	4770      	bx	lr

000056fa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    56fa:	b480      	push	{r7}
    56fc:	b085      	sub	sp, #20
    56fe:	af00      	add	r7, sp, #0
    5700:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5708:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    570a:	7bfb      	ldrb	r3, [r7, #15]
    570c:	08db      	lsrs	r3, r3, #3
    570e:	b2db      	uxtb	r3, r3
    5710:	f003 0301 	and.w	r3, r3, #1
    5714:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5716:	7bfb      	ldrb	r3, [r7, #15]
    5718:	2b00      	cmp	r3, #0
    571a:	bf14      	ite	ne
    571c:	2301      	movne	r3, #1
    571e:	2300      	moveq	r3, #0
    5720:	b2db      	uxtb	r3, r3
}
    5722:	4618      	mov	r0, r3
    5724:	3714      	adds	r7, #20
    5726:	46bd      	mov	sp, r7
    5728:	f85d 7b04 	ldr.w	r7, [sp], #4
    572c:	4770      	bx	lr

0000572e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    572e:	b480      	push	{r7}
    5730:	b085      	sub	sp, #20
    5732:	af00      	add	r7, sp, #0
    5734:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    573c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    573e:	7bfb      	ldrb	r3, [r7, #15]
    5740:	091b      	lsrs	r3, r3, #4
    5742:	b2db      	uxtb	r3, r3
    5744:	f003 0301 	and.w	r3, r3, #1
    5748:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    574a:	7bfb      	ldrb	r3, [r7, #15]
    574c:	2b00      	cmp	r3, #0
    574e:	bf14      	ite	ne
    5750:	2301      	movne	r3, #1
    5752:	2300      	moveq	r3, #0
    5754:	b2db      	uxtb	r3, r3
}
    5756:	4618      	mov	r0, r3
    5758:	3714      	adds	r7, #20
    575a:	46bd      	mov	sp, r7
    575c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5760:	4770      	bx	lr
	...

00005764 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    576a:	4b0a      	ldr	r3, [pc, #40]	; (5794 <_oscctrl_init_sources+0x30>)
    576c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    576e:	4a0a      	ldr	r2, [pc, #40]	; (5798 <_oscctrl_init_sources+0x34>)
    5770:	2101      	movs	r1, #1
    5772:	6878      	ldr	r0, [r7, #4]
    5774:	4b09      	ldr	r3, [pc, #36]	; (579c <_oscctrl_init_sources+0x38>)
    5776:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5778:	bf00      	nop
    577a:	6878      	ldr	r0, [r7, #4]
    577c:	4b08      	ldr	r3, [pc, #32]	; (57a0 <_oscctrl_init_sources+0x3c>)
    577e:	4798      	blx	r3
    5780:	4603      	mov	r3, r0
    5782:	f083 0301 	eor.w	r3, r3, #1
    5786:	b2db      	uxtb	r3, r3
    5788:	2b00      	cmp	r3, #0
    578a:	d1f6      	bne.n	577a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    578c:	bf00      	nop
    578e:	3708      	adds	r7, #8
    5790:	46bd      	mov	sp, r7
    5792:	bd80      	pop	{r7, pc}
    5794:	40001000 	.word	0x40001000
    5798:	03002646 	.word	0x03002646
    579c:	000055ad 	.word	0x000055ad
    57a0:	00005537 	.word	0x00005537

000057a4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	b084      	sub	sp, #16
    57a8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    57aa:	4b6b      	ldr	r3, [pc, #428]	; (5958 <_oscctrl_init_referenced_generators+0x1b4>)
    57ac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    57ae:	2204      	movs	r2, #4
    57b0:	2100      	movs	r1, #0
    57b2:	486a      	ldr	r0, [pc, #424]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    57b4:	4b6a      	ldr	r3, [pc, #424]	; (5960 <_oscctrl_init_referenced_generators+0x1bc>)
    57b6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    57b8:	bf00      	nop
    57ba:	4868      	ldr	r0, [pc, #416]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    57bc:	4b69      	ldr	r3, [pc, #420]	; (5964 <_oscctrl_init_referenced_generators+0x1c0>)
    57be:	4798      	blx	r3
    57c0:	4603      	mov	r3, r0
    57c2:	2b00      	cmp	r3, #0
    57c4:	d1f9      	bne.n	57ba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    57c6:	2100      	movs	r1, #0
    57c8:	68f8      	ldr	r0, [r7, #12]
    57ca:	4b67      	ldr	r3, [pc, #412]	; (5968 <_oscctrl_init_referenced_generators+0x1c4>)
    57cc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    57ce:	4967      	ldr	r1, [pc, #412]	; (596c <_oscctrl_init_referenced_generators+0x1c8>)
    57d0:	68f8      	ldr	r0, [r7, #12]
    57d2:	4b67      	ldr	r3, [pc, #412]	; (5970 <_oscctrl_init_referenced_generators+0x1cc>)
    57d4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    57d6:	bf00      	nop
    57d8:	68f8      	ldr	r0, [r7, #12]
    57da:	4b66      	ldr	r3, [pc, #408]	; (5974 <_oscctrl_init_referenced_generators+0x1d0>)
    57dc:	4798      	blx	r3
    57de:	4603      	mov	r3, r0
    57e0:	2b00      	cmp	r3, #0
    57e2:	d1f9      	bne.n	57d8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    57e4:	2100      	movs	r1, #0
    57e6:	68f8      	ldr	r0, [r7, #12]
    57e8:	4b63      	ldr	r3, [pc, #396]	; (5978 <_oscctrl_init_referenced_generators+0x1d4>)
    57ea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    57ec:	bf00      	nop
    57ee:	68f8      	ldr	r0, [r7, #12]
    57f0:	4b62      	ldr	r3, [pc, #392]	; (597c <_oscctrl_init_referenced_generators+0x1d8>)
    57f2:	4798      	blx	r3
    57f4:	4603      	mov	r3, r0
    57f6:	2b00      	cmp	r3, #0
    57f8:	d1f9      	bne.n	57ee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    57fa:	2302      	movs	r3, #2
    57fc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    57fe:	7afb      	ldrb	r3, [r7, #11]
    5800:	4619      	mov	r1, r3
    5802:	68f8      	ldr	r0, [r7, #12]
    5804:	4b58      	ldr	r3, [pc, #352]	; (5968 <_oscctrl_init_referenced_generators+0x1c4>)
    5806:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5808:	bf00      	nop
    580a:	68f8      	ldr	r0, [r7, #12]
    580c:	4b5c      	ldr	r3, [pc, #368]	; (5980 <_oscctrl_init_referenced_generators+0x1dc>)
    580e:	4798      	blx	r3
    5810:	4603      	mov	r3, r0
    5812:	2b00      	cmp	r3, #0
    5814:	d1f9      	bne.n	580a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5816:	68f8      	ldr	r0, [r7, #12]
    5818:	4b5a      	ldr	r3, [pc, #360]	; (5984 <_oscctrl_init_referenced_generators+0x1e0>)
    581a:	4798      	blx	r3
    581c:	4603      	mov	r3, r0
    581e:	4619      	mov	r1, r3
    5820:	68f8      	ldr	r0, [r7, #12]
    5822:	4b59      	ldr	r3, [pc, #356]	; (5988 <_oscctrl_init_referenced_generators+0x1e4>)
    5824:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5826:	bf00      	nop
    5828:	68f8      	ldr	r0, [r7, #12]
    582a:	4b58      	ldr	r3, [pc, #352]	; (598c <_oscctrl_init_referenced_generators+0x1e8>)
    582c:	4798      	blx	r3
    582e:	4603      	mov	r3, r0
    5830:	2b00      	cmp	r3, #0
    5832:	d1f9      	bne.n	5828 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5834:	2319      	movs	r3, #25
    5836:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5838:	7afb      	ldrb	r3, [r7, #11]
    583a:	4619      	mov	r1, r3
    583c:	68f8      	ldr	r0, [r7, #12]
    583e:	4b4e      	ldr	r3, [pc, #312]	; (5978 <_oscctrl_init_referenced_generators+0x1d4>)
    5840:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5842:	bf00      	nop
    5844:	68f8      	ldr	r0, [r7, #12]
    5846:	4b4d      	ldr	r3, [pc, #308]	; (597c <_oscctrl_init_referenced_generators+0x1d8>)
    5848:	4798      	blx	r3
    584a:	4603      	mov	r3, r0
    584c:	2b00      	cmp	r3, #0
    584e:	d1f9      	bne.n	5844 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5850:	2245      	movs	r2, #69	; 0x45
    5852:	2101      	movs	r1, #1
    5854:	4841      	ldr	r0, [pc, #260]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    5856:	4b4e      	ldr	r3, [pc, #312]	; (5990 <_oscctrl_init_referenced_generators+0x1ec>)
    5858:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    585a:	223b      	movs	r2, #59	; 0x3b
    585c:	2100      	movs	r1, #0
    585e:	68f8      	ldr	r0, [r7, #12]
    5860:	4b4c      	ldr	r3, [pc, #304]	; (5994 <_oscctrl_init_referenced_generators+0x1f0>)
    5862:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5864:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5868:	2100      	movs	r1, #0
    586a:	68f8      	ldr	r0, [r7, #12]
    586c:	4b4a      	ldr	r3, [pc, #296]	; (5998 <_oscctrl_init_referenced_generators+0x1f4>)
    586e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5870:	2242      	movs	r2, #66	; 0x42
    5872:	2100      	movs	r1, #0
    5874:	68f8      	ldr	r0, [r7, #12]
    5876:	4b49      	ldr	r3, [pc, #292]	; (599c <_oscctrl_init_referenced_generators+0x1f8>)
    5878:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    587a:	4a49      	ldr	r2, [pc, #292]	; (59a0 <_oscctrl_init_referenced_generators+0x1fc>)
    587c:	2101      	movs	r1, #1
    587e:	68f8      	ldr	r0, [r7, #12]
    5880:	4b44      	ldr	r3, [pc, #272]	; (5994 <_oscctrl_init_referenced_generators+0x1f0>)
    5882:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5884:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5888:	2101      	movs	r1, #1
    588a:	68f8      	ldr	r0, [r7, #12]
    588c:	4b42      	ldr	r3, [pc, #264]	; (5998 <_oscctrl_init_referenced_generators+0x1f4>)
    588e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5890:	2202      	movs	r2, #2
    5892:	2101      	movs	r1, #1
    5894:	68f8      	ldr	r0, [r7, #12]
    5896:	4b41      	ldr	r3, [pc, #260]	; (599c <_oscctrl_init_referenced_generators+0x1f8>)
    5898:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    589a:	68f8      	ldr	r0, [r7, #12]
    589c:	4b41      	ldr	r3, [pc, #260]	; (59a4 <_oscctrl_init_referenced_generators+0x200>)
    589e:	4798      	blx	r3
    58a0:	4603      	mov	r3, r0
    58a2:	2b00      	cmp	r3, #0
    58a4:	d00c      	beq.n	58c0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    58a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    58aa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    58ac:	bf00      	nop
    58ae:	6879      	ldr	r1, [r7, #4]
    58b0:	68f8      	ldr	r0, [r7, #12]
    58b2:	4b3d      	ldr	r3, [pc, #244]	; (59a8 <_oscctrl_init_referenced_generators+0x204>)
    58b4:	4798      	blx	r3
    58b6:	4602      	mov	r2, r0
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	429a      	cmp	r2, r3
    58bc:	d1f7      	bne.n	58ae <_oscctrl_init_referenced_generators+0x10a>
    58be:	e009      	b.n	58d4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    58c0:	bf00      	nop
    58c2:	68f8      	ldr	r0, [r7, #12]
    58c4:	4b39      	ldr	r3, [pc, #228]	; (59ac <_oscctrl_init_referenced_generators+0x208>)
    58c6:	4798      	blx	r3
    58c8:	4603      	mov	r3, r0
    58ca:	f083 0301 	eor.w	r3, r3, #1
    58ce:	b2db      	uxtb	r3, r3
    58d0:	2b00      	cmp	r3, #0
    58d2:	d1f6      	bne.n	58c2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    58d4:	bf00      	nop
    58d6:	2100      	movs	r1, #0
    58d8:	68f8      	ldr	r0, [r7, #12]
    58da:	4b35      	ldr	r3, [pc, #212]	; (59b0 <_oscctrl_init_referenced_generators+0x20c>)
    58dc:	4798      	blx	r3
    58de:	4603      	mov	r3, r0
    58e0:	f083 0301 	eor.w	r3, r3, #1
    58e4:	b2db      	uxtb	r3, r3
    58e6:	2b00      	cmp	r3, #0
    58e8:	d009      	beq.n	58fe <_oscctrl_init_referenced_generators+0x15a>
    58ea:	2100      	movs	r1, #0
    58ec:	68f8      	ldr	r0, [r7, #12]
    58ee:	4b31      	ldr	r3, [pc, #196]	; (59b4 <_oscctrl_init_referenced_generators+0x210>)
    58f0:	4798      	blx	r3
    58f2:	4603      	mov	r3, r0
    58f4:	f083 0301 	eor.w	r3, r3, #1
    58f8:	b2db      	uxtb	r3, r3
    58fa:	2b00      	cmp	r3, #0
    58fc:	d1eb      	bne.n	58d6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    58fe:	bf00      	nop
    5900:	2101      	movs	r1, #1
    5902:	68f8      	ldr	r0, [r7, #12]
    5904:	4b2a      	ldr	r3, [pc, #168]	; (59b0 <_oscctrl_init_referenced_generators+0x20c>)
    5906:	4798      	blx	r3
    5908:	4603      	mov	r3, r0
    590a:	f083 0301 	eor.w	r3, r3, #1
    590e:	b2db      	uxtb	r3, r3
    5910:	2b00      	cmp	r3, #0
    5912:	d009      	beq.n	5928 <_oscctrl_init_referenced_generators+0x184>
    5914:	2101      	movs	r1, #1
    5916:	68f8      	ldr	r0, [r7, #12]
    5918:	4b26      	ldr	r3, [pc, #152]	; (59b4 <_oscctrl_init_referenced_generators+0x210>)
    591a:	4798      	blx	r3
    591c:	4603      	mov	r3, r0
    591e:	f083 0301 	eor.w	r3, r3, #1
    5922:	b2db      	uxtb	r3, r3
    5924:	2b00      	cmp	r3, #0
    5926:	d1eb      	bne.n	5900 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5928:	bf00      	nop
    592a:	480c      	ldr	r0, [pc, #48]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    592c:	4b22      	ldr	r3, [pc, #136]	; (59b8 <_oscctrl_init_referenced_generators+0x214>)
    592e:	4798      	blx	r3
    5930:	4603      	mov	r3, r0
    5932:	2b00      	cmp	r3, #0
    5934:	d1f9      	bne.n	592a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5936:	2207      	movs	r2, #7
    5938:	2100      	movs	r1, #0
    593a:	4808      	ldr	r0, [pc, #32]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    593c:	4b08      	ldr	r3, [pc, #32]	; (5960 <_oscctrl_init_referenced_generators+0x1bc>)
    593e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5940:	bf00      	nop
    5942:	4806      	ldr	r0, [pc, #24]	; (595c <_oscctrl_init_referenced_generators+0x1b8>)
    5944:	4b07      	ldr	r3, [pc, #28]	; (5964 <_oscctrl_init_referenced_generators+0x1c0>)
    5946:	4798      	blx	r3
    5948:	4603      	mov	r3, r0
    594a:	2b00      	cmp	r3, #0
    594c:	d1f9      	bne.n	5942 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    594e:	bf00      	nop
    5950:	3710      	adds	r7, #16
    5952:	46bd      	mov	sp, r7
    5954:	bd80      	pop	{r7, pc}
    5956:	bf00      	nop
    5958:	40001000 	.word	0x40001000
    595c:	40001c00 	.word	0x40001c00
    5960:	00005371 	.word	0x00005371
    5964:	00005331 	.word	0x00005331
    5968:	000055d5 	.word	0x000055d5
    596c:	0401bb80 	.word	0x0401bb80
    5970:	00005677 	.word	0x00005677
    5974:	0000572f 	.word	0x0000572f
    5978:	00005623 	.word	0x00005623
    597c:	000056c7 	.word	0x000056c7
    5980:	00005693 	.word	0x00005693
    5984:	0000565f 	.word	0x0000565f
    5988:	00005643 	.word	0x00005643
    598c:	000056fb 	.word	0x000056fb
    5990:	000053c1 	.word	0x000053c1
    5994:	000054cd 	.word	0x000054cd
    5998:	00005509 	.word	0x00005509
    599c:	00005491 	.word	0x00005491
    59a0:	000407a0 	.word	0x000407a0
    59a4:	000055f3 	.word	0x000055f3
    59a8:	00005587 	.word	0x00005587
    59ac:	0000555f 	.word	0x0000555f
    59b0:	0000541d 	.word	0x0000541d
    59b4:	00005455 	.word	0x00005455
    59b8:	00005359 	.word	0x00005359

000059bc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    59bc:	b480      	push	{r7}
    59be:	b083      	sub	sp, #12
    59c0:	af00      	add	r7, sp, #0
    59c2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	69db      	ldr	r3, [r3, #28]
    59c8:	0a9b      	lsrs	r3, r3, #10
    59ca:	f003 0301 	and.w	r3, r3, #1
    59ce:	2b00      	cmp	r3, #0
    59d0:	bf14      	ite	ne
    59d2:	2301      	movne	r3, #1
    59d4:	2300      	moveq	r3, #0
    59d6:	b2db      	uxtb	r3, r3
}
    59d8:	4618      	mov	r0, r3
    59da:	370c      	adds	r7, #12
    59dc:	46bd      	mov	sp, r7
    59de:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e2:	4770      	bx	lr

000059e4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    59e4:	b480      	push	{r7}
    59e6:	b083      	sub	sp, #12
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    59f2:	61da      	str	r2, [r3, #28]
}
    59f4:	bf00      	nop
    59f6:	370c      	adds	r7, #12
    59f8:	46bd      	mov	sp, r7
    59fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fe:	4770      	bx	lr

00005a00 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5a00:	b480      	push	{r7}
    5a02:	b083      	sub	sp, #12
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
    5a08:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	683a      	ldr	r2, [r7, #0]
    5a0e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a10:	bf00      	nop
    5a12:	370c      	adds	r7, #12
    5a14:	46bd      	mov	sp, r7
    5a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1a:	4770      	bx	lr

00005a1c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5a1c:	b480      	push	{r7}
    5a1e:	b083      	sub	sp, #12
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
    5a24:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	683a      	ldr	r2, [r7, #0]
    5a2a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a2c:	bf00      	nop
    5a2e:	370c      	adds	r7, #12
    5a30:	46bd      	mov	sp, r7
    5a32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a36:	4770      	bx	lr

00005a38 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5a38:	b480      	push	{r7}
    5a3a:	b083      	sub	sp, #12
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
    5a40:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	683a      	ldr	r2, [r7, #0]
    5a46:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a48:	bf00      	nop
    5a4a:	370c      	adds	r7, #12
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5a54:	b480      	push	{r7}
    5a56:	b083      	sub	sp, #12
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
    5a5c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	683a      	ldr	r2, [r7, #0]
    5a62:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a64:	bf00      	nop
    5a66:	370c      	adds	r7, #12
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5a70:	b480      	push	{r7}
    5a72:	b085      	sub	sp, #20
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
    5a78:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5a7a:	687b      	ldr	r3, [r7, #4]
    5a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5a7e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5a80:	68fb      	ldr	r3, [r7, #12]
    5a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5a86:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5a88:	683b      	ldr	r3, [r7, #0]
    5a8a:	b2db      	uxtb	r3, r3
    5a8c:	68fa      	ldr	r2, [r7, #12]
    5a8e:	4313      	orrs	r3, r2
    5a90:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	68fa      	ldr	r2, [r7, #12]
    5a96:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5a98:	bf00      	nop
    5a9a:	3714      	adds	r7, #20
    5a9c:	46bd      	mov	sp, r7
    5a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa2:	4770      	bx	lr

00005aa4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5aa4:	b480      	push	{r7}
    5aa6:	b085      	sub	sp, #20
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
    5aac:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5ab2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5aba:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5abc:	683b      	ldr	r3, [r7, #0]
    5abe:	041b      	lsls	r3, r3, #16
    5ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5ac4:	68fa      	ldr	r2, [r7, #12]
    5ac6:	4313      	orrs	r3, r2
    5ac8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	68fa      	ldr	r2, [r7, #12]
    5ace:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5ad0:	bf00      	nop
    5ad2:	3714      	adds	r7, #20
    5ad4:	46bd      	mov	sp, r7
    5ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ada:	4770      	bx	lr

00005adc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5adc:	b480      	push	{r7}
    5ade:	b083      	sub	sp, #12
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	6078      	str	r0, [r7, #4]
    5ae4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	683a      	ldr	r2, [r7, #0]
    5aea:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5aec:	bf00      	nop
    5aee:	370c      	adds	r7, #12
    5af0:	46bd      	mov	sp, r7
    5af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5af6:	4770      	bx	lr

00005af8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5af8:	b480      	push	{r7}
    5afa:	b083      	sub	sp, #12
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5b04:	4618      	mov	r0, r3
    5b06:	370c      	adds	r7, #12
    5b08:	46bd      	mov	sp, r7
    5b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b0e:	4770      	bx	lr

00005b10 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5b10:	b480      	push	{r7}
    5b12:	b085      	sub	sp, #20
    5b14:	af00      	add	r7, sp, #0
    5b16:	60f8      	str	r0, [r7, #12]
    5b18:	60b9      	str	r1, [r7, #8]
    5b1a:	607a      	str	r2, [r7, #4]
	while (count--) {
    5b1c:	e007      	b.n	5b2e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5b1e:	68fb      	ldr	r3, [r7, #12]
    5b20:	1c5a      	adds	r2, r3, #1
    5b22:	60fa      	str	r2, [r7, #12]
    5b24:	68ba      	ldr	r2, [r7, #8]
    5b26:	1c51      	adds	r1, r2, #1
    5b28:	60b9      	str	r1, [r7, #8]
    5b2a:	7812      	ldrb	r2, [r2, #0]
    5b2c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	1e5a      	subs	r2, r3, #1
    5b32:	607a      	str	r2, [r7, #4]
    5b34:	2b00      	cmp	r3, #0
    5b36:	d1f2      	bne.n	5b1e <_qspi_memcpy+0xe>
	}
}
    5b38:	bf00      	nop
    5b3a:	3714      	adds	r7, #20
    5b3c:	46bd      	mov	sp, r7
    5b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b42:	4770      	bx	lr

00005b44 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b082      	sub	sp, #8
    5b48:	af00      	add	r7, sp, #0
    5b4a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5b4c:	4903      	ldr	r1, [pc, #12]	; (5b5c <_qspi_end_transfer+0x18>)
    5b4e:	6878      	ldr	r0, [r7, #4]
    5b50:	4b03      	ldr	r3, [pc, #12]	; (5b60 <_qspi_end_transfer+0x1c>)
    5b52:	4798      	blx	r3
}
    5b54:	bf00      	nop
    5b56:	3708      	adds	r7, #8
    5b58:	46bd      	mov	sp, r7
    5b5a:	bd80      	pop	{r7, pc}
    5b5c:	01000002 	.word	0x01000002
    5b60:	00005a01 	.word	0x00005a01

00005b64 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5b64:	b580      	push	{r7, lr}
    5b66:	b082      	sub	sp, #8
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
    5b6c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5b6e:	687b      	ldr	r3, [r7, #4]
    5b70:	2b00      	cmp	r3, #0
    5b72:	d004      	beq.n	5b7e <_qspi_sync_init+0x1a>
    5b74:	683b      	ldr	r3, [r7, #0]
    5b76:	2b00      	cmp	r3, #0
    5b78:	d001      	beq.n	5b7e <_qspi_sync_init+0x1a>
    5b7a:	2301      	movs	r3, #1
    5b7c:	e000      	b.n	5b80 <_qspi_sync_init+0x1c>
    5b7e:	2300      	movs	r3, #0
    5b80:	f003 0301 	and.w	r3, r3, #1
    5b84:	b2db      	uxtb	r3, r3
    5b86:	2240      	movs	r2, #64	; 0x40
    5b88:	490c      	ldr	r1, [pc, #48]	; (5bbc <_qspi_sync_init+0x58>)
    5b8a:	4618      	mov	r0, r3
    5b8c:	4b0c      	ldr	r3, [pc, #48]	; (5bc0 <_qspi_sync_init+0x5c>)
    5b8e:	4798      	blx	r3
	dev->prvt = hw;
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	683a      	ldr	r2, [r7, #0]
    5b94:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	2101      	movs	r1, #1
    5b9c:	4618      	mov	r0, r3
    5b9e:	4b09      	ldr	r3, [pc, #36]	; (5bc4 <_qspi_sync_init+0x60>)
    5ba0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5ba2:	4909      	ldr	r1, [pc, #36]	; (5bc8 <_qspi_sync_init+0x64>)
    5ba4:	6838      	ldr	r0, [r7, #0]
    5ba6:	4b09      	ldr	r3, [pc, #36]	; (5bcc <_qspi_sync_init+0x68>)
    5ba8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5baa:	4909      	ldr	r1, [pc, #36]	; (5bd0 <_qspi_sync_init+0x6c>)
    5bac:	6838      	ldr	r0, [r7, #0]
    5bae:	4b09      	ldr	r3, [pc, #36]	; (5bd4 <_qspi_sync_init+0x70>)
    5bb0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5bb2:	2300      	movs	r3, #0
}
    5bb4:	4618      	mov	r0, r3
    5bb6:	3708      	adds	r7, #8
    5bb8:	46bd      	mov	sp, r7
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	000101a8 	.word	0x000101a8
    5bc0:	00003ba1 	.word	0x00003ba1
    5bc4:	00005a01 	.word	0x00005a01
    5bc8:	06000011 	.word	0x06000011
    5bcc:	00005a1d 	.word	0x00005a1d
    5bd0:	00241300 	.word	0x00241300
    5bd4:	00005a39 	.word	0x00005a39

00005bd8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	b082      	sub	sp, #8
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	681b      	ldr	r3, [r3, #0]
    5be4:	2102      	movs	r1, #2
    5be6:	4618      	mov	r0, r3
    5be8:	4b03      	ldr	r3, [pc, #12]	; (5bf8 <_qspi_sync_enable+0x20>)
    5bea:	4798      	blx	r3
	return ERR_NONE;
    5bec:	2300      	movs	r3, #0
}
    5bee:	4618      	mov	r0, r3
    5bf0:	3708      	adds	r7, #8
    5bf2:	46bd      	mov	sp, r7
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop
    5bf8:	00005a01 	.word	0x00005a01

00005bfc <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	2100      	movs	r1, #0
    5c0a:	4618      	mov	r0, r3
    5c0c:	4b03      	ldr	r3, [pc, #12]	; (5c1c <_qspi_sync_disable+0x20>)
    5c0e:	4798      	blx	r3
	return ERR_NONE;
    5c10:	2300      	movs	r3, #0
}
    5c12:	4618      	mov	r0, r3
    5c14:	3708      	adds	r7, #8
    5c16:	46bd      	mov	sp, r7
    5c18:	bd80      	pop	{r7, pc}
    5c1a:	bf00      	nop
    5c1c:	00005a01 	.word	0x00005a01

00005c20 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b084      	sub	sp, #16
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
    5c28:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	681b      	ldr	r3, [r3, #0]
    5c2e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5c30:	683b      	ldr	r3, [r7, #0]
    5c32:	781b      	ldrb	r3, [r3, #0]
    5c34:	f003 0320 	and.w	r3, r3, #32
    5c38:	b2db      	uxtb	r3, r3
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d005      	beq.n	5c4a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5c3e:	683b      	ldr	r3, [r7, #0]
    5c40:	689b      	ldr	r3, [r3, #8]
    5c42:	4619      	mov	r1, r3
    5c44:	68f8      	ldr	r0, [r7, #12]
    5c46:	4b13      	ldr	r3, [pc, #76]	; (5c94 <_qspi_sync_command_set_ifr+0x74>)
    5c48:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5c4a:	683b      	ldr	r3, [r7, #0]
    5c4c:	781b      	ldrb	r3, [r3, #0]
    5c4e:	f003 0310 	and.w	r3, r3, #16
    5c52:	b2db      	uxtb	r3, r3
    5c54:	2b00      	cmp	r3, #0
    5c56:	d005      	beq.n	5c64 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5c58:	683b      	ldr	r3, [r7, #0]
    5c5a:	791b      	ldrb	r3, [r3, #4]
    5c5c:	4619      	mov	r1, r3
    5c5e:	68f8      	ldr	r0, [r7, #12]
    5c60:	4b0d      	ldr	r3, [pc, #52]	; (5c98 <_qspi_sync_command_set_ifr+0x78>)
    5c62:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5c64:	683b      	ldr	r3, [r7, #0]
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5c6c:	b2db      	uxtb	r3, r3
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d005      	beq.n	5c7e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5c72:	683b      	ldr	r3, [r7, #0]
    5c74:	795b      	ldrb	r3, [r3, #5]
    5c76:	4619      	mov	r1, r3
    5c78:	68f8      	ldr	r0, [r7, #12]
    5c7a:	4b08      	ldr	r3, [pc, #32]	; (5c9c <_qspi_sync_command_set_ifr+0x7c>)
    5c7c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	681b      	ldr	r3, [r3, #0]
    5c82:	4619      	mov	r1, r3
    5c84:	68f8      	ldr	r0, [r7, #12]
    5c86:	4b06      	ldr	r3, [pc, #24]	; (5ca0 <_qspi_sync_command_set_ifr+0x80>)
    5c88:	4798      	blx	r3
}
    5c8a:	bf00      	nop
    5c8c:	3710      	adds	r7, #16
    5c8e:	46bd      	mov	sp, r7
    5c90:	bd80      	pop	{r7, pc}
    5c92:	bf00      	nop
    5c94:	00005a55 	.word	0x00005a55
    5c98:	00005a71 	.word	0x00005a71
    5c9c:	00005aa5 	.word	0x00005aa5
    5ca0:	00005add 	.word	0x00005add

00005ca4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ca4:	b580      	push	{r7, lr}
    5ca6:	b084      	sub	sp, #16
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	681b      	ldr	r3, [r3, #0]
    5cb2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5cb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5cb8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5cba:	683b      	ldr	r3, [r7, #0]
    5cbc:	781b      	ldrb	r3, [r3, #0]
    5cbe:	f003 0320 	and.w	r3, r3, #32
    5cc2:	b2db      	uxtb	r3, r3
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d004      	beq.n	5cd2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5cc8:	683b      	ldr	r3, [r7, #0]
    5cca:	689b      	ldr	r3, [r3, #8]
    5ccc:	68fa      	ldr	r2, [r7, #12]
    5cce:	4413      	add	r3, r2
    5cd0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5cd2:	68b8      	ldr	r0, [r7, #8]
    5cd4:	4b18      	ldr	r3, [pc, #96]	; (5d38 <_qspi_sync_run_transfer+0x94>)
    5cd6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5cd8:	683b      	ldr	r3, [r7, #0]
    5cda:	691b      	ldr	r3, [r3, #16]
    5cdc:	2b00      	cmp	r3, #0
    5cde:	d103      	bne.n	5ce8 <_qspi_sync_run_transfer+0x44>
    5ce0:	683b      	ldr	r3, [r7, #0]
    5ce2:	695b      	ldr	r3, [r3, #20]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d001      	beq.n	5cec <_qspi_sync_run_transfer+0x48>
    5ce8:	2301      	movs	r3, #1
    5cea:	e000      	b.n	5cee <_qspi_sync_run_transfer+0x4a>
    5cec:	2300      	movs	r3, #0
    5cee:	f003 0301 	and.w	r3, r3, #1
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	2282      	movs	r2, #130	; 0x82
    5cf6:	4911      	ldr	r1, [pc, #68]	; (5d3c <_qspi_sync_run_transfer+0x98>)
    5cf8:	4618      	mov	r0, r3
    5cfa:	4b11      	ldr	r3, [pc, #68]	; (5d40 <_qspi_sync_run_transfer+0x9c>)
    5cfc:	4798      	blx	r3

	if (cmd->tx_buf) {
    5cfe:	683b      	ldr	r3, [r7, #0]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	2b00      	cmp	r3, #0
    5d04:	d008      	beq.n	5d18 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5d06:	683b      	ldr	r3, [r7, #0]
    5d08:	6919      	ldr	r1, [r3, #16]
    5d0a:	683b      	ldr	r3, [r7, #0]
    5d0c:	68db      	ldr	r3, [r3, #12]
    5d0e:	461a      	mov	r2, r3
    5d10:	68f8      	ldr	r0, [r7, #12]
    5d12:	4b0c      	ldr	r3, [pc, #48]	; (5d44 <_qspi_sync_run_transfer+0xa0>)
    5d14:	4798      	blx	r3
    5d16:	e007      	b.n	5d28 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5d18:	683b      	ldr	r3, [r7, #0]
    5d1a:	6958      	ldr	r0, [r3, #20]
    5d1c:	683b      	ldr	r3, [r7, #0]
    5d1e:	68db      	ldr	r3, [r3, #12]
    5d20:	461a      	mov	r2, r3
    5d22:	68f9      	ldr	r1, [r7, #12]
    5d24:	4b07      	ldr	r3, [pc, #28]	; (5d44 <_qspi_sync_run_transfer+0xa0>)
    5d26:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5d28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5d2c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5d30:	bf00      	nop
    5d32:	3710      	adds	r7, #16
    5d34:	46bd      	mov	sp, r7
    5d36:	bd80      	pop	{r7, pc}
    5d38:	00005af9 	.word	0x00005af9
    5d3c:	000101a8 	.word	0x000101a8
    5d40:	00003ba1 	.word	0x00003ba1
    5d44:	00005b11 	.word	0x00005b11

00005d48 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5d48:	b580      	push	{r7, lr}
    5d4a:	b082      	sub	sp, #8
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	6078      	str	r0, [r7, #4]
    5d50:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5d52:	6839      	ldr	r1, [r7, #0]
    5d54:	6878      	ldr	r0, [r7, #4]
    5d56:	4b14      	ldr	r3, [pc, #80]	; (5da8 <_qspi_sync_serial_run_command+0x60>)
    5d58:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5d5a:	683b      	ldr	r3, [r7, #0]
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5d62:	b2db      	uxtb	r3, r3
    5d64:	2b00      	cmp	r3, #0
    5d66:	d003      	beq.n	5d70 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5d68:	6839      	ldr	r1, [r7, #0]
    5d6a:	6878      	ldr	r0, [r7, #4]
    5d6c:	4b0f      	ldr	r3, [pc, #60]	; (5dac <_qspi_sync_serial_run_command+0x64>)
    5d6e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	681b      	ldr	r3, [r3, #0]
    5d74:	4618      	mov	r0, r3
    5d76:	4b0e      	ldr	r3, [pc, #56]	; (5db0 <_qspi_sync_serial_run_command+0x68>)
    5d78:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5d7a:	bf00      	nop
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	681b      	ldr	r3, [r3, #0]
    5d80:	4618      	mov	r0, r3
    5d82:	4b0c      	ldr	r3, [pc, #48]	; (5db4 <_qspi_sync_serial_run_command+0x6c>)
    5d84:	4798      	blx	r3
    5d86:	4603      	mov	r3, r0
    5d88:	f083 0301 	eor.w	r3, r3, #1
    5d8c:	b2db      	uxtb	r3, r3
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d1f4      	bne.n	5d7c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	681b      	ldr	r3, [r3, #0]
    5d96:	4618      	mov	r0, r3
    5d98:	4b07      	ldr	r3, [pc, #28]	; (5db8 <_qspi_sync_serial_run_command+0x70>)
    5d9a:	4798      	blx	r3
	return ERR_NONE;
    5d9c:	2300      	movs	r3, #0
}
    5d9e:	4618      	mov	r0, r3
    5da0:	3708      	adds	r7, #8
    5da2:	46bd      	mov	sp, r7
    5da4:	bd80      	pop	{r7, pc}
    5da6:	bf00      	nop
    5da8:	00005c21 	.word	0x00005c21
    5dac:	00005ca5 	.word	0x00005ca5
    5db0:	00005b45 	.word	0x00005b45
    5db4:	000059bd 	.word	0x000059bd
    5db8:	000059e5 	.word	0x000059e5

00005dbc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5dbc:	b480      	push	{r7}
    5dbe:	b083      	sub	sp, #12
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
    5dc4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5dc6:	bf00      	nop
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	691a      	ldr	r2, [r3, #16]
    5dcc:	683b      	ldr	r3, [r7, #0]
    5dce:	4013      	ands	r3, r2
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d1f9      	bne.n	5dc8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5dd4:	bf00      	nop
    5dd6:	370c      	adds	r7, #12
    5dd8:	46bd      	mov	sp, r7
    5dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dde:	4770      	bx	lr

00005de0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5de0:	b480      	push	{r7}
    5de2:	b083      	sub	sp, #12
    5de4:	af00      	add	r7, sp, #0
    5de6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	f44f 7280 	mov.w	r2, #256	; 0x100
    5dee:	819a      	strh	r2, [r3, #12]
}
    5df0:	bf00      	nop
    5df2:	370c      	adds	r7, #12
    5df4:	46bd      	mov	sp, r7
    5df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dfa:	4770      	bx	lr

00005dfc <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5dfc:	b480      	push	{r7}
    5dfe:	b083      	sub	sp, #12
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5e0a:	819a      	strh	r2, [r3, #12]
}
    5e0c:	bf00      	nop
    5e0e:	370c      	adds	r7, #12
    5e10:	46bd      	mov	sp, r7
    5e12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e16:	4770      	bx	lr

00005e18 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5e18:	b480      	push	{r7}
    5e1a:	b083      	sub	sp, #12
    5e1c:	af00      	add	r7, sp, #0
    5e1e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	899b      	ldrh	r3, [r3, #12]
    5e24:	b29b      	uxth	r3, r3
}
    5e26:	4618      	mov	r0, r3
    5e28:	370c      	adds	r7, #12
    5e2a:	46bd      	mov	sp, r7
    5e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e30:	4770      	bx	lr

00005e32 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    5e32:	b480      	push	{r7}
    5e34:	b083      	sub	sp, #12
    5e36:	af00      	add	r7, sp, #0
    5e38:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5e3a:	687b      	ldr	r3, [r7, #4]
    5e3c:	895b      	ldrh	r3, [r3, #10]
    5e3e:	b29b      	uxth	r3, r3
}
    5e40:	4618      	mov	r0, r3
    5e42:	370c      	adds	r7, #12
    5e44:	46bd      	mov	sp, r7
    5e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4a:	4770      	bx	lr

00005e4c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b082      	sub	sp, #8
    5e50:	af00      	add	r7, sp, #0
    5e52:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	881b      	ldrh	r3, [r3, #0]
    5e58:	b29b      	uxth	r3, r3
    5e5a:	f043 0301 	orr.w	r3, r3, #1
    5e5e:	b29a      	uxth	r2, r3
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5e64:	2101      	movs	r1, #1
    5e66:	6878      	ldr	r0, [r7, #4]
    5e68:	4b02      	ldr	r3, [pc, #8]	; (5e74 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5e6a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5e6c:	bf00      	nop
    5e6e:	3708      	adds	r7, #8
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}
    5e74:	00005dbd 	.word	0x00005dbd

00005e78 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5e78:	b580      	push	{r7, lr}
    5e7a:	b084      	sub	sp, #16
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5e80:	f248 0103 	movw	r1, #32771	; 0x8003
    5e84:	6878      	ldr	r0, [r7, #4]
    5e86:	4b0a      	ldr	r3, [pc, #40]	; (5eb0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5e88:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5e8a:	687b      	ldr	r3, [r7, #4]
    5e8c:	881b      	ldrh	r3, [r3, #0]
    5e8e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5e90:	89fb      	ldrh	r3, [r7, #14]
    5e92:	085b      	lsrs	r3, r3, #1
    5e94:	b29b      	uxth	r3, r3
    5e96:	f003 0301 	and.w	r3, r3, #1
    5e9a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5e9c:	89fb      	ldrh	r3, [r7, #14]
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	bf14      	ite	ne
    5ea2:	2301      	movne	r3, #1
    5ea4:	2300      	moveq	r3, #0
    5ea6:	b2db      	uxtb	r3, r3
}
    5ea8:	4618      	mov	r0, r3
    5eaa:	3710      	adds	r7, #16
    5eac:	46bd      	mov	sp, r7
    5eae:	bd80      	pop	{r7, pc}
    5eb0:	00005dbd 	.word	0x00005dbd

00005eb4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5eb4:	b580      	push	{r7, lr}
    5eb6:	b082      	sub	sp, #8
    5eb8:	af00      	add	r7, sp, #0
    5eba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	881b      	ldrh	r3, [r3, #0]
    5ec0:	b29b      	uxth	r3, r3
    5ec2:	f023 0302 	bic.w	r3, r3, #2
    5ec6:	b29a      	uxth	r2, r3
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ecc:	f248 0103 	movw	r1, #32771	; 0x8003
    5ed0:	6878      	ldr	r0, [r7, #4]
    5ed2:	4b03      	ldr	r3, [pc, #12]	; (5ee0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5ed4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5ed6:	bf00      	nop
    5ed8:	3708      	adds	r7, #8
    5eda:	46bd      	mov	sp, r7
    5edc:	bd80      	pop	{r7, pc}
    5ede:	bf00      	nop
    5ee0:	00005dbd 	.word	0x00005dbd

00005ee4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	b082      	sub	sp, #8
    5ee8:	af00      	add	r7, sp, #0
    5eea:	6078      	str	r0, [r7, #4]
    5eec:	460b      	mov	r3, r1
    5eee:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	887a      	ldrh	r2, [r7, #2]
    5ef4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5ef6:	f248 0103 	movw	r1, #32771	; 0x8003
    5efa:	6878      	ldr	r0, [r7, #4]
    5efc:	4b02      	ldr	r3, [pc, #8]	; (5f08 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5efe:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5f00:	bf00      	nop
    5f02:	3708      	adds	r7, #8
    5f04:	46bd      	mov	sp, r7
    5f06:	bd80      	pop	{r7, pc}
    5f08:	00005dbd 	.word	0x00005dbd

00005f0c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5f0c:	b480      	push	{r7}
    5f0e:	b083      	sub	sp, #12
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
    5f14:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	683a      	ldr	r2, [r7, #0]
    5f1a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5f1c:	bf00      	nop
    5f1e:	370c      	adds	r7, #12
    5f20:	46bd      	mov	sp, r7
    5f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f26:	4770      	bx	lr

00005f28 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b082      	sub	sp, #8
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	2b00      	cmp	r3, #0
    5f34:	d005      	beq.n	5f42 <_calendar_init+0x1a>
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d001      	beq.n	5f42 <_calendar_init+0x1a>
    5f3e:	2301      	movs	r3, #1
    5f40:	e000      	b.n	5f44 <_calendar_init+0x1c>
    5f42:	2300      	movs	r3, #0
    5f44:	f003 0301 	and.w	r3, r3, #1
    5f48:	b2db      	uxtb	r3, r3
    5f4a:	222f      	movs	r2, #47	; 0x2f
    5f4c:	491b      	ldr	r1, [pc, #108]	; (5fbc <_calendar_init+0x94>)
    5f4e:	4618      	mov	r0, r3
    5f50:	4b1b      	ldr	r3, [pc, #108]	; (5fc0 <_calendar_init+0x98>)
    5f52:	4798      	blx	r3

	_rtc_dev = dev;
    5f54:	4a1b      	ldr	r2, [pc, #108]	; (5fc4 <_calendar_init+0x9c>)
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5f5a:	687b      	ldr	r3, [r7, #4]
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	4618      	mov	r0, r3
    5f60:	4b19      	ldr	r3, [pc, #100]	; (5fc8 <_calendar_init+0xa0>)
    5f62:	4798      	blx	r3
    5f64:	4603      	mov	r3, r0
    5f66:	2b00      	cmp	r3, #0
    5f68:	d00a      	beq.n	5f80 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	4618      	mov	r0, r3
    5f70:	4b16      	ldr	r3, [pc, #88]	; (5fcc <_calendar_init+0xa4>)
    5f72:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	2102      	movs	r1, #2
    5f7a:	4618      	mov	r0, r3
    5f7c:	4b14      	ldr	r3, [pc, #80]	; (5fd0 <_calendar_init+0xa8>)
    5f7e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	4618      	mov	r0, r3
    5f86:	4b13      	ldr	r3, [pc, #76]	; (5fd4 <_calendar_init+0xac>)
    5f88:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5f8a:	687b      	ldr	r3, [r7, #4]
    5f8c:	681b      	ldr	r3, [r3, #0]
    5f8e:	2101      	movs	r1, #1
    5f90:	4618      	mov	r0, r3
    5f92:	4b0f      	ldr	r3, [pc, #60]	; (5fd0 <_calendar_init+0xa8>)
    5f94:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	681b      	ldr	r3, [r3, #0]
    5f9a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    5f9e:	4618      	mov	r0, r3
    5fa0:	4b0d      	ldr	r3, [pc, #52]	; (5fd8 <_calendar_init+0xb0>)
    5fa2:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5fa8:	2100      	movs	r1, #0
    5faa:	4618      	mov	r0, r3
    5fac:	4b0b      	ldr	r3, [pc, #44]	; (5fdc <_calendar_init+0xb4>)
    5fae:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5fb0:	2300      	movs	r3, #0
}
    5fb2:	4618      	mov	r0, r3
    5fb4:	3708      	adds	r7, #8
    5fb6:	46bd      	mov	sp, r7
    5fb8:	bd80      	pop	{r7, pc}
    5fba:	bf00      	nop
    5fbc:	000101c0 	.word	0x000101c0
    5fc0:	00003ba1 	.word	0x00003ba1
    5fc4:	20000a54 	.word	0x20000a54
    5fc8:	00005e79 	.word	0x00005e79
    5fcc:	00005eb5 	.word	0x00005eb5
    5fd0:	00005dbd 	.word	0x00005dbd
    5fd4:	00005e4d 	.word	0x00005e4d
    5fd8:	00005ee5 	.word	0x00005ee5
    5fdc:	00005f0d 	.word	0x00005f0d

00005fe0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b084      	sub	sp, #16
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	681b      	ldr	r3, [r3, #0]
    5fec:	4618      	mov	r0, r3
    5fee:	4b19      	ldr	r3, [pc, #100]	; (6054 <_rtc_interrupt_handler+0x74>)
    5ff0:	4798      	blx	r3
    5ff2:	4603      	mov	r3, r0
    5ff4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	681b      	ldr	r3, [r3, #0]
    5ffa:	4618      	mov	r0, r3
    5ffc:	4b16      	ldr	r3, [pc, #88]	; (6058 <_rtc_interrupt_handler+0x78>)
    5ffe:	4798      	blx	r3
    6000:	4603      	mov	r3, r0
    6002:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    6004:	89fa      	ldrh	r2, [r7, #14]
    6006:	89bb      	ldrh	r3, [r7, #12]
    6008:	4013      	ands	r3, r2
    600a:	b29b      	uxth	r3, r3
    600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6010:	2b00      	cmp	r3, #0
    6012:	d009      	beq.n	6028 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6014:	687b      	ldr	r3, [r7, #4]
    6016:	685b      	ldr	r3, [r3, #4]
    6018:	6878      	ldr	r0, [r7, #4]
    601a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	681b      	ldr	r3, [r3, #0]
    6020:	4618      	mov	r0, r3
    6022:	4b0e      	ldr	r3, [pc, #56]	; (605c <_rtc_interrupt_handler+0x7c>)
    6024:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6026:	e010      	b.n	604a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6028:	89fa      	ldrh	r2, [r7, #14]
    602a:	89bb      	ldrh	r3, [r7, #12]
    602c:	4013      	ands	r3, r2
    602e:	b29b      	uxth	r3, r3
    6030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6034:	2b00      	cmp	r3, #0
    6036:	d008      	beq.n	604a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	689b      	ldr	r3, [r3, #8]
    603c:	6878      	ldr	r0, [r7, #4]
    603e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	681b      	ldr	r3, [r3, #0]
    6044:	4618      	mov	r0, r3
    6046:	4b06      	ldr	r3, [pc, #24]	; (6060 <_rtc_interrupt_handler+0x80>)
    6048:	4798      	blx	r3
}
    604a:	bf00      	nop
    604c:	3710      	adds	r7, #16
    604e:	46bd      	mov	sp, r7
    6050:	bd80      	pop	{r7, pc}
    6052:	bf00      	nop
    6054:	00005e19 	.word	0x00005e19
    6058:	00005e33 	.word	0x00005e33
    605c:	00005de1 	.word	0x00005de1
    6060:	00005dfd 	.word	0x00005dfd

00006064 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6064:	b580      	push	{r7, lr}
    6066:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6068:	4b03      	ldr	r3, [pc, #12]	; (6078 <RTC_Handler+0x14>)
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	4618      	mov	r0, r3
    606e:	4b03      	ldr	r3, [pc, #12]	; (607c <RTC_Handler+0x18>)
    6070:	4798      	blx	r3
}
    6072:	bf00      	nop
    6074:	bd80      	pop	{r7, pc}
    6076:	bf00      	nop
    6078:	20000a54 	.word	0x20000a54
    607c:	00005fe1 	.word	0x00005fe1

00006080 <__NVIC_EnableIRQ>:
{
    6080:	b480      	push	{r7}
    6082:	b083      	sub	sp, #12
    6084:	af00      	add	r7, sp, #0
    6086:	4603      	mov	r3, r0
    6088:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    608a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    608e:	2b00      	cmp	r3, #0
    6090:	db0b      	blt.n	60aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6092:	4909      	ldr	r1, [pc, #36]	; (60b8 <__NVIC_EnableIRQ+0x38>)
    6094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6098:	095b      	lsrs	r3, r3, #5
    609a:	88fa      	ldrh	r2, [r7, #6]
    609c:	f002 021f 	and.w	r2, r2, #31
    60a0:	2001      	movs	r0, #1
    60a2:	fa00 f202 	lsl.w	r2, r0, r2
    60a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    60aa:	bf00      	nop
    60ac:	370c      	adds	r7, #12
    60ae:	46bd      	mov	sp, r7
    60b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b4:	4770      	bx	lr
    60b6:	bf00      	nop
    60b8:	e000e100 	.word	0xe000e100

000060bc <__NVIC_DisableIRQ>:
{
    60bc:	b480      	push	{r7}
    60be:	b083      	sub	sp, #12
    60c0:	af00      	add	r7, sp, #0
    60c2:	4603      	mov	r3, r0
    60c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    60c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    60ca:	2b00      	cmp	r3, #0
    60cc:	db10      	blt.n	60f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60ce:	490b      	ldr	r1, [pc, #44]	; (60fc <__NVIC_DisableIRQ+0x40>)
    60d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    60d4:	095b      	lsrs	r3, r3, #5
    60d6:	88fa      	ldrh	r2, [r7, #6]
    60d8:	f002 021f 	and.w	r2, r2, #31
    60dc:	2001      	movs	r0, #1
    60de:	fa00 f202 	lsl.w	r2, r0, r2
    60e2:	3320      	adds	r3, #32
    60e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    60e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    60ec:	f3bf 8f6f 	isb	sy
}
    60f0:	bf00      	nop
    60f2:	370c      	adds	r7, #12
    60f4:	46bd      	mov	sp, r7
    60f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fa:	4770      	bx	lr
    60fc:	e000e100 	.word	0xe000e100

00006100 <__NVIC_ClearPendingIRQ>:
{
    6100:	b480      	push	{r7}
    6102:	b083      	sub	sp, #12
    6104:	af00      	add	r7, sp, #0
    6106:	4603      	mov	r3, r0
    6108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    610a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    610e:	2b00      	cmp	r3, #0
    6110:	db0c      	blt.n	612c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6112:	4909      	ldr	r1, [pc, #36]	; (6138 <__NVIC_ClearPendingIRQ+0x38>)
    6114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6118:	095b      	lsrs	r3, r3, #5
    611a:	88fa      	ldrh	r2, [r7, #6]
    611c:	f002 021f 	and.w	r2, r2, #31
    6120:	2001      	movs	r0, #1
    6122:	fa00 f202 	lsl.w	r2, r0, r2
    6126:	3360      	adds	r3, #96	; 0x60
    6128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    612c:	bf00      	nop
    612e:	370c      	adds	r7, #12
    6130:	46bd      	mov	sp, r7
    6132:	f85d 7b04 	ldr.w	r7, [sp], #4
    6136:	4770      	bx	lr
    6138:	e000e100 	.word	0xe000e100

0000613c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    613c:	b480      	push	{r7}
    613e:	b083      	sub	sp, #12
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6146:	bf00      	nop
    6148:	687b      	ldr	r3, [r7, #4]
    614a:	69da      	ldr	r2, [r3, #28]
    614c:	683b      	ldr	r3, [r7, #0]
    614e:	4013      	ands	r3, r2
    6150:	2b00      	cmp	r3, #0
    6152:	d1f9      	bne.n	6148 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6154:	bf00      	nop
    6156:	370c      	adds	r7, #12
    6158:	46bd      	mov	sp, r7
    615a:	f85d 7b04 	ldr.w	r7, [sp], #4
    615e:	4770      	bx	lr

00006160 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6160:	b480      	push	{r7}
    6162:	b083      	sub	sp, #12
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    6168:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    616a:	687b      	ldr	r3, [r7, #4]
    616c:	69da      	ldr	r2, [r3, #28]
    616e:	683b      	ldr	r3, [r7, #0]
    6170:	4013      	ands	r3, r2
    6172:	2b00      	cmp	r3, #0
    6174:	bf14      	ite	ne
    6176:	2301      	movne	r3, #1
    6178:	2300      	moveq	r3, #0
    617a:	b2db      	uxtb	r3, r3
}
    617c:	4618      	mov	r0, r3
    617e:	370c      	adds	r7, #12
    6180:	46bd      	mov	sp, r7
    6182:	f85d 7b04 	ldr.w	r7, [sp], #4
    6186:	4770      	bx	lr

00006188 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6188:	b480      	push	{r7}
    618a:	b083      	sub	sp, #12
    618c:	af00      	add	r7, sp, #0
    618e:	6078      	str	r0, [r7, #4]
    6190:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6192:	bf00      	nop
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	69da      	ldr	r2, [r3, #28]
    6198:	683b      	ldr	r3, [r7, #0]
    619a:	4013      	ands	r3, r2
    619c:	2b00      	cmp	r3, #0
    619e:	d1f9      	bne.n	6194 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    61a0:	bf00      	nop
    61a2:	370c      	adds	r7, #12
    61a4:	46bd      	mov	sp, r7
    61a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    61aa:	4770      	bx	lr

000061ac <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    61ac:	b480      	push	{r7}
    61ae:	b083      	sub	sp, #12
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
    61b4:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	69da      	ldr	r2, [r3, #28]
    61ba:	683b      	ldr	r3, [r7, #0]
    61bc:	4013      	ands	r3, r2
    61be:	2b00      	cmp	r3, #0
    61c0:	bf14      	ite	ne
    61c2:	2301      	movne	r3, #1
    61c4:	2300      	moveq	r3, #0
    61c6:	b2db      	uxtb	r3, r3
}
    61c8:	4618      	mov	r0, r3
    61ca:	370c      	adds	r7, #12
    61cc:	46bd      	mov	sp, r7
    61ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d2:	4770      	bx	lr

000061d4 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    61d4:	b480      	push	{r7}
    61d6:	b083      	sub	sp, #12
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	2201      	movs	r2, #1
    61e0:	761a      	strb	r2, [r3, #24]
}
    61e2:	bf00      	nop
    61e4:	370c      	adds	r7, #12
    61e6:	46bd      	mov	sp, r7
    61e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ec:	4770      	bx	lr

000061ee <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    61ee:	b480      	push	{r7}
    61f0:	b083      	sub	sp, #12
    61f2:	af00      	add	r7, sp, #0
    61f4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    61f6:	687b      	ldr	r3, [r7, #4]
    61f8:	2202      	movs	r2, #2
    61fa:	761a      	strb	r2, [r3, #24]
}
    61fc:	bf00      	nop
    61fe:	370c      	adds	r7, #12
    6200:	46bd      	mov	sp, r7
    6202:	f85d 7b04 	ldr.w	r7, [sp], #4
    6206:	4770      	bx	lr

00006208 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    6208:	b480      	push	{r7}
    620a:	b083      	sub	sp, #12
    620c:	af00      	add	r7, sp, #0
    620e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	7e1b      	ldrb	r3, [r3, #24]
    6214:	b2db      	uxtb	r3, r3
}
    6216:	4618      	mov	r0, r3
    6218:	370c      	adds	r7, #12
    621a:	46bd      	mov	sp, r7
    621c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6220:	4770      	bx	lr

00006222 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    6222:	b480      	push	{r7}
    6224:	b083      	sub	sp, #12
    6226:	af00      	add	r7, sp, #0
    6228:	6078      	str	r0, [r7, #4]
    622a:	460b      	mov	r3, r1
    622c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	78fa      	ldrb	r2, [r7, #3]
    6232:	761a      	strb	r2, [r3, #24]
}
    6234:	bf00      	nop
    6236:	370c      	adds	r7, #12
    6238:	46bd      	mov	sp, r7
    623a:	f85d 7b04 	ldr.w	r7, [sp], #4
    623e:	4770      	bx	lr

00006240 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6240:	b480      	push	{r7}
    6242:	b085      	sub	sp, #20
    6244:	af00      	add	r7, sp, #0
    6246:	6078      	str	r0, [r7, #4]
    6248:	460b      	mov	r3, r1
    624a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	7e1b      	ldrb	r3, [r3, #24]
    6250:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6252:	7bfa      	ldrb	r2, [r7, #15]
    6254:	78fb      	ldrb	r3, [r7, #3]
    6256:	4013      	ands	r3, r2
    6258:	73fb      	strb	r3, [r7, #15]
	return tmp;
    625a:	7bfb      	ldrb	r3, [r7, #15]
}
    625c:	4618      	mov	r0, r3
    625e:	3714      	adds	r7, #20
    6260:	46bd      	mov	sp, r7
    6262:	f85d 7b04 	ldr.w	r7, [sp], #4
    6266:	4770      	bx	lr

00006268 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6268:	b480      	push	{r7}
    626a:	b083      	sub	sp, #12
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	7e1b      	ldrb	r3, [r3, #24]
    6274:	b2db      	uxtb	r3, r3
}
    6276:	4618      	mov	r0, r3
    6278:	370c      	adds	r7, #12
    627a:	46bd      	mov	sp, r7
    627c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6280:	4770      	bx	lr

00006282 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6282:	b480      	push	{r7}
    6284:	b083      	sub	sp, #12
    6286:	af00      	add	r7, sp, #0
    6288:	6078      	str	r0, [r7, #4]
    628a:	460b      	mov	r3, r1
    628c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	78fa      	ldrb	r2, [r7, #3]
    6292:	761a      	strb	r2, [r3, #24]
}
    6294:	bf00      	nop
    6296:	370c      	adds	r7, #12
    6298:	46bd      	mov	sp, r7
    629a:	f85d 7b04 	ldr.w	r7, [sp], #4
    629e:	4770      	bx	lr

000062a0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    62a0:	b580      	push	{r7, lr}
    62a2:	b082      	sub	sp, #8
    62a4:	af00      	add	r7, sp, #0
    62a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	f043 0202 	orr.w	r2, r3, #2
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    62b4:	2103      	movs	r1, #3
    62b6:	6878      	ldr	r0, [r7, #4]
    62b8:	4b02      	ldr	r3, [pc, #8]	; (62c4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    62ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62bc:	bf00      	nop
    62be:	3708      	adds	r7, #8
    62c0:	46bd      	mov	sp, r7
    62c2:	bd80      	pop	{r7, pc}
    62c4:	0000613d 	.word	0x0000613d

000062c8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    62c8:	b580      	push	{r7, lr}
    62ca:	b082      	sub	sp, #8
    62cc:	af00      	add	r7, sp, #0
    62ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	f023 0202 	bic.w	r2, r3, #2
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    62dc:	2103      	movs	r1, #3
    62de:	6878      	ldr	r0, [r7, #4]
    62e0:	4b02      	ldr	r3, [pc, #8]	; (62ec <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    62e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    62e4:	bf00      	nop
    62e6:	3708      	adds	r7, #8
    62e8:	46bd      	mov	sp, r7
    62ea:	bd80      	pop	{r7, pc}
    62ec:	0000613d 	.word	0x0000613d

000062f0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    62f0:	b480      	push	{r7}
    62f2:	b085      	sub	sp, #20
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	681b      	ldr	r3, [r3, #0]
    62fc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    62fe:	68fb      	ldr	r3, [r7, #12]
    6300:	0edb      	lsrs	r3, r3, #27
    6302:	f003 0301 	and.w	r3, r3, #1
    6306:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	2b00      	cmp	r3, #0
    630c:	bf14      	ite	ne
    630e:	2301      	movne	r3, #1
    6310:	2300      	moveq	r3, #0
    6312:	b2db      	uxtb	r3, r3
}
    6314:	4618      	mov	r0, r3
    6316:	3714      	adds	r7, #20
    6318:	46bd      	mov	sp, r7
    631a:	f85d 7b04 	ldr.w	r7, [sp], #4
    631e:	4770      	bx	lr

00006320 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6320:	b580      	push	{r7, lr}
    6322:	b084      	sub	sp, #16
    6324:	af00      	add	r7, sp, #0
    6326:	6078      	str	r0, [r7, #4]
    6328:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    632a:	2103      	movs	r1, #3
    632c:	6878      	ldr	r0, [r7, #4]
    632e:	4b07      	ldr	r3, [pc, #28]	; (634c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6330:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	681b      	ldr	r3, [r3, #0]
    6336:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6338:	68fa      	ldr	r2, [r7, #12]
    633a:	683b      	ldr	r3, [r7, #0]
    633c:	4013      	ands	r3, r2
    633e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6340:	68fb      	ldr	r3, [r7, #12]
}
    6342:	4618      	mov	r0, r3
    6344:	3710      	adds	r7, #16
    6346:	46bd      	mov	sp, r7
    6348:	bd80      	pop	{r7, pc}
    634a:	bf00      	nop
    634c:	0000613d 	.word	0x0000613d

00006350 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6350:	b580      	push	{r7, lr}
    6352:	b082      	sub	sp, #8
    6354:	af00      	add	r7, sp, #0
    6356:	6078      	str	r0, [r7, #4]
    6358:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    635a:	687b      	ldr	r3, [r7, #4]
    635c:	683a      	ldr	r2, [r7, #0]
    635e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6360:	2103      	movs	r1, #3
    6362:	6878      	ldr	r0, [r7, #4]
    6364:	4b02      	ldr	r3, [pc, #8]	; (6370 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6366:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6368:	bf00      	nop
    636a:	3708      	adds	r7, #8
    636c:	46bd      	mov	sp, r7
    636e:	bd80      	pop	{r7, pc}
    6370:	0000613d 	.word	0x0000613d

00006374 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6374:	b580      	push	{r7, lr}
    6376:	b082      	sub	sp, #8
    6378:	af00      	add	r7, sp, #0
    637a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    637c:	687b      	ldr	r3, [r7, #4]
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	f043 0202 	orr.w	r2, r3, #2
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6388:	2103      	movs	r1, #3
    638a:	6878      	ldr	r0, [r7, #4]
    638c:	4b02      	ldr	r3, [pc, #8]	; (6398 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    638e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6390:	bf00      	nop
    6392:	3708      	adds	r7, #8
    6394:	46bd      	mov	sp, r7
    6396:	bd80      	pop	{r7, pc}
    6398:	00006189 	.word	0x00006189

0000639c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    639c:	b580      	push	{r7, lr}
    639e:	b084      	sub	sp, #16
    63a0:	af00      	add	r7, sp, #0
    63a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63a4:	2103      	movs	r1, #3
    63a6:	6878      	ldr	r0, [r7, #4]
    63a8:	4b09      	ldr	r3, [pc, #36]	; (63d0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    63aa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	681b      	ldr	r3, [r3, #0]
    63b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    63b2:	68fb      	ldr	r3, [r7, #12]
    63b4:	085b      	lsrs	r3, r3, #1
    63b6:	f003 0301 	and.w	r3, r3, #1
    63ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    63bc:	68fb      	ldr	r3, [r7, #12]
    63be:	2b00      	cmp	r3, #0
    63c0:	bf14      	ite	ne
    63c2:	2301      	movne	r3, #1
    63c4:	2300      	moveq	r3, #0
    63c6:	b2db      	uxtb	r3, r3
}
    63c8:	4618      	mov	r0, r3
    63ca:	3710      	adds	r7, #16
    63cc:	46bd      	mov	sp, r7
    63ce:	bd80      	pop	{r7, pc}
    63d0:	00006189 	.word	0x00006189

000063d4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63d4:	b580      	push	{r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	681b      	ldr	r3, [r3, #0]
    63e0:	f023 0202 	bic.w	r2, r3, #2
    63e4:	687b      	ldr	r3, [r7, #4]
    63e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    63e8:	2103      	movs	r1, #3
    63ea:	6878      	ldr	r0, [r7, #4]
    63ec:	4b02      	ldr	r3, [pc, #8]	; (63f8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    63ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    63f0:	bf00      	nop
    63f2:	3708      	adds	r7, #8
    63f4:	46bd      	mov	sp, r7
    63f6:	bd80      	pop	{r7, pc}
    63f8:	00006189 	.word	0x00006189

000063fc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    63fc:	b580      	push	{r7, lr}
    63fe:	b084      	sub	sp, #16
    6400:	af00      	add	r7, sp, #0
    6402:	6078      	str	r0, [r7, #4]
    6404:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6406:	2103      	movs	r1, #3
    6408:	6878      	ldr	r0, [r7, #4]
    640a:	4b07      	ldr	r3, [pc, #28]	; (6428 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    640c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	681b      	ldr	r3, [r3, #0]
    6412:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6414:	68fa      	ldr	r2, [r7, #12]
    6416:	683b      	ldr	r3, [r7, #0]
    6418:	4013      	ands	r3, r2
    641a:	60fb      	str	r3, [r7, #12]
	return tmp;
    641c:	68fb      	ldr	r3, [r7, #12]
}
    641e:	4618      	mov	r0, r3
    6420:	3710      	adds	r7, #16
    6422:	46bd      	mov	sp, r7
    6424:	bd80      	pop	{r7, pc}
    6426:	bf00      	nop
    6428:	00006189 	.word	0x00006189

0000642c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    642c:	b580      	push	{r7, lr}
    642e:	b082      	sub	sp, #8
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
    6434:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	683a      	ldr	r2, [r7, #0]
    643a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    643c:	2103      	movs	r1, #3
    643e:	6878      	ldr	r0, [r7, #4]
    6440:	4b02      	ldr	r3, [pc, #8]	; (644c <hri_sercomspi_write_CTRLA_reg+0x20>)
    6442:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6444:	bf00      	nop
    6446:	3708      	adds	r7, #8
    6448:	46bd      	mov	sp, r7
    644a:	bd80      	pop	{r7, pc}
    644c:	00006189 	.word	0x00006189

00006450 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6450:	b580      	push	{r7, lr}
    6452:	b082      	sub	sp, #8
    6454:	af00      	add	r7, sp, #0
    6456:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	685b      	ldr	r3, [r3, #4]
    645c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6464:	2104      	movs	r1, #4
    6466:	6878      	ldr	r0, [r7, #4]
    6468:	4b02      	ldr	r3, [pc, #8]	; (6474 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    646a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    646c:	bf00      	nop
    646e:	3708      	adds	r7, #8
    6470:	46bd      	mov	sp, r7
    6472:	bd80      	pop	{r7, pc}
    6474:	0000613d 	.word	0x0000613d

00006478 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6478:	b580      	push	{r7, lr}
    647a:	b082      	sub	sp, #8
    647c:	af00      	add	r7, sp, #0
    647e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	685b      	ldr	r3, [r3, #4]
    6484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    648c:	2104      	movs	r1, #4
    648e:	6878      	ldr	r0, [r7, #4]
    6490:	4b02      	ldr	r3, [pc, #8]	; (649c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6492:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6494:	bf00      	nop
    6496:	3708      	adds	r7, #8
    6498:	46bd      	mov	sp, r7
    649a:	bd80      	pop	{r7, pc}
    649c:	0000613d 	.word	0x0000613d

000064a0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    64a0:	b580      	push	{r7, lr}
    64a2:	b082      	sub	sp, #8
    64a4:	af00      	add	r7, sp, #0
    64a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	685b      	ldr	r3, [r3, #4]
    64ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64b4:	2104      	movs	r1, #4
    64b6:	6878      	ldr	r0, [r7, #4]
    64b8:	4b02      	ldr	r3, [pc, #8]	; (64c4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    64ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64bc:	bf00      	nop
    64be:	3708      	adds	r7, #8
    64c0:	46bd      	mov	sp, r7
    64c2:	bd80      	pop	{r7, pc}
    64c4:	0000613d 	.word	0x0000613d

000064c8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    64c8:	b580      	push	{r7, lr}
    64ca:	b082      	sub	sp, #8
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	685b      	ldr	r3, [r3, #4]
    64d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    64dc:	2104      	movs	r1, #4
    64de:	6878      	ldr	r0, [r7, #4]
    64e0:	4b02      	ldr	r3, [pc, #8]	; (64ec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    64e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    64e4:	bf00      	nop
    64e6:	3708      	adds	r7, #8
    64e8:	46bd      	mov	sp, r7
    64ea:	bd80      	pop	{r7, pc}
    64ec:	0000613d 	.word	0x0000613d

000064f0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    64f0:	b580      	push	{r7, lr}
    64f2:	b082      	sub	sp, #8
    64f4:	af00      	add	r7, sp, #0
    64f6:	6078      	str	r0, [r7, #4]
    64f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	685a      	ldr	r2, [r3, #4]
    64fe:	683b      	ldr	r3, [r7, #0]
    6500:	041b      	lsls	r3, r3, #16
    6502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6506:	431a      	orrs	r2, r3
    6508:	687b      	ldr	r3, [r7, #4]
    650a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    650c:	2104      	movs	r1, #4
    650e:	6878      	ldr	r0, [r7, #4]
    6510:	4b02      	ldr	r3, [pc, #8]	; (651c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    6512:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6514:	bf00      	nop
    6516:	3708      	adds	r7, #8
    6518:	46bd      	mov	sp, r7
    651a:	bd80      	pop	{r7, pc}
    651c:	0000613d 	.word	0x0000613d

00006520 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6520:	b580      	push	{r7, lr}
    6522:	b082      	sub	sp, #8
    6524:	af00      	add	r7, sp, #0
    6526:	6078      	str	r0, [r7, #4]
    6528:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	683a      	ldr	r2, [r7, #0]
    652e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6530:	2104      	movs	r1, #4
    6532:	6878      	ldr	r0, [r7, #4]
    6534:	4b02      	ldr	r3, [pc, #8]	; (6540 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6536:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6538:	bf00      	nop
    653a:	3708      	adds	r7, #8
    653c:	46bd      	mov	sp, r7
    653e:	bd80      	pop	{r7, pc}
    6540:	0000613d 	.word	0x0000613d

00006544 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6544:	b580      	push	{r7, lr}
    6546:	b082      	sub	sp, #8
    6548:	af00      	add	r7, sp, #0
    654a:	6078      	str	r0, [r7, #4]
    654c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	683a      	ldr	r2, [r7, #0]
    6552:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6554:	2117      	movs	r1, #23
    6556:	6878      	ldr	r0, [r7, #4]
    6558:	4b02      	ldr	r3, [pc, #8]	; (6564 <hri_sercomspi_write_CTRLB_reg+0x20>)
    655a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    655c:	bf00      	nop
    655e:	3708      	adds	r7, #8
    6560:	46bd      	mov	sp, r7
    6562:	bd80      	pop	{r7, pc}
    6564:	00006189 	.word	0x00006189

00006568 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6568:	b480      	push	{r7}
    656a:	b083      	sub	sp, #12
    656c:	af00      	add	r7, sp, #0
    656e:	6078      	str	r0, [r7, #4]
    6570:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	683a      	ldr	r2, [r7, #0]
    6576:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6578:	bf00      	nop
    657a:	370c      	adds	r7, #12
    657c:	46bd      	mov	sp, r7
    657e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6582:	4770      	bx	lr

00006584 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6584:	b480      	push	{r7}
    6586:	b083      	sub	sp, #12
    6588:	af00      	add	r7, sp, #0
    658a:	6078      	str	r0, [r7, #4]
    658c:	460b      	mov	r3, r1
    658e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	78fa      	ldrb	r2, [r7, #3]
    6594:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6596:	bf00      	nop
    6598:	370c      	adds	r7, #12
    659a:	46bd      	mov	sp, r7
    659c:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a0:	4770      	bx	lr
	...

000065a4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    65a4:	b580      	push	{r7, lr}
    65a6:	b084      	sub	sp, #16
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
    65ac:	460b      	mov	r3, r1
    65ae:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65b4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    65b6:	68fb      	ldr	r3, [r7, #12]
    65b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    65bc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    65be:	78fb      	ldrb	r3, [r7, #3]
    65c0:	039b      	lsls	r3, r3, #14
    65c2:	461a      	mov	r2, r3
    65c4:	68fb      	ldr	r3, [r7, #12]
    65c6:	4313      	orrs	r3, r2
    65c8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	68fa      	ldr	r2, [r7, #12]
    65ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65d0:	2104      	movs	r1, #4
    65d2:	6878      	ldr	r0, [r7, #4]
    65d4:	4b02      	ldr	r3, [pc, #8]	; (65e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    65d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65d8:	bf00      	nop
    65da:	3710      	adds	r7, #16
    65dc:	46bd      	mov	sp, r7
    65de:	bd80      	pop	{r7, pc}
    65e0:	0000613d 	.word	0x0000613d

000065e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b082      	sub	sp, #8
    65e8:	af00      	add	r7, sp, #0
    65ea:	6078      	str	r0, [r7, #4]
    65ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	683a      	ldr	r2, [r7, #0]
    65f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    65f4:	2104      	movs	r1, #4
    65f6:	6878      	ldr	r0, [r7, #4]
    65f8:	4b02      	ldr	r3, [pc, #8]	; (6604 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    65fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65fc:	bf00      	nop
    65fe:	3708      	adds	r7, #8
    6600:	46bd      	mov	sp, r7
    6602:	bd80      	pop	{r7, pc}
    6604:	0000613d 	.word	0x0000613d

00006608 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6608:	b580      	push	{r7, lr}
    660a:	b082      	sub	sp, #8
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6610:	2104      	movs	r1, #4
    6612:	6878      	ldr	r0, [r7, #4]
    6614:	4b03      	ldr	r3, [pc, #12]	; (6624 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6616:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6618:	687b      	ldr	r3, [r7, #4]
    661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    661c:	4618      	mov	r0, r3
    661e:	3708      	adds	r7, #8
    6620:	46bd      	mov	sp, r7
    6622:	bd80      	pop	{r7, pc}
    6624:	0000613d 	.word	0x0000613d

00006628 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6628:	b480      	push	{r7}
    662a:	b083      	sub	sp, #12
    662c:	af00      	add	r7, sp, #0
    662e:	6078      	str	r0, [r7, #4]
    6630:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	683a      	ldr	r2, [r7, #0]
    6636:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6638:	bf00      	nop
    663a:	370c      	adds	r7, #12
    663c:	46bd      	mov	sp, r7
    663e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6642:	4770      	bx	lr

00006644 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6644:	b580      	push	{r7, lr}
    6646:	b082      	sub	sp, #8
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
    664c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	683a      	ldr	r2, [r7, #0]
    6652:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6654:	2104      	movs	r1, #4
    6656:	6878      	ldr	r0, [r7, #4]
    6658:	4b02      	ldr	r3, [pc, #8]	; (6664 <hri_sercomi2cm_write_DATA_reg+0x20>)
    665a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    665c:	bf00      	nop
    665e:	3708      	adds	r7, #8
    6660:	46bd      	mov	sp, r7
    6662:	bd80      	pop	{r7, pc}
    6664:	0000613d 	.word	0x0000613d

00006668 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6668:	b580      	push	{r7, lr}
    666a:	b082      	sub	sp, #8
    666c:	af00      	add	r7, sp, #0
    666e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6670:	2104      	movs	r1, #4
    6672:	6878      	ldr	r0, [r7, #4]
    6674:	4b03      	ldr	r3, [pc, #12]	; (6684 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6676:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    667c:	4618      	mov	r0, r3
    667e:	3708      	adds	r7, #8
    6680:	46bd      	mov	sp, r7
    6682:	bd80      	pop	{r7, pc}
    6684:	0000613d 	.word	0x0000613d

00006688 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6688:	b480      	push	{r7}
    668a:	b083      	sub	sp, #12
    668c:	af00      	add	r7, sp, #0
    668e:	6078      	str	r0, [r7, #4]
    6690:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	683a      	ldr	r2, [r7, #0]
    6696:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6698:	bf00      	nop
    669a:	370c      	adds	r7, #12
    669c:	46bd      	mov	sp, r7
    669e:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a2:	4770      	bx	lr

000066a4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    66a4:	b480      	push	{r7}
    66a6:	b083      	sub	sp, #12
    66a8:	af00      	add	r7, sp, #0
    66aa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    66ac:	687b      	ldr	r3, [r7, #4]
    66ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    66b0:	4618      	mov	r0, r3
    66b2:	370c      	adds	r7, #12
    66b4:	46bd      	mov	sp, r7
    66b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66ba:	4770      	bx	lr

000066bc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    66bc:	b480      	push	{r7}
    66be:	b083      	sub	sp, #12
    66c0:	af00      	add	r7, sp, #0
    66c2:	6078      	str	r0, [r7, #4]
    66c4:	460b      	mov	r3, r1
    66c6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	78fa      	ldrb	r2, [r7, #3]
    66cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66d0:	bf00      	nop
    66d2:	370c      	adds	r7, #12
    66d4:	46bd      	mov	sp, r7
    66d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66da:	4770      	bx	lr

000066dc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    66dc:	b480      	push	{r7}
    66de:	b083      	sub	sp, #12
    66e0:	af00      	add	r7, sp, #0
    66e2:	6078      	str	r0, [r7, #4]
    66e4:	460b      	mov	r3, r1
    66e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	887a      	ldrh	r2, [r7, #2]
    66ec:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66ee:	bf00      	nop
    66f0:	370c      	adds	r7, #12
    66f2:	46bd      	mov	sp, r7
    66f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66f8:	4770      	bx	lr
	...

000066fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    66fc:	b580      	push	{r7, lr}
    66fe:	b082      	sub	sp, #8
    6700:	af00      	add	r7, sp, #0
    6702:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6704:	2104      	movs	r1, #4
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	4b06      	ldr	r3, [pc, #24]	; (6724 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    670a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	8b5b      	ldrh	r3, [r3, #26]
    6710:	b29b      	uxth	r3, r3
    6712:	091b      	lsrs	r3, r3, #4
    6714:	b29b      	uxth	r3, r3
    6716:	f003 0303 	and.w	r3, r3, #3
    671a:	b29b      	uxth	r3, r3
}
    671c:	4618      	mov	r0, r3
    671e:	3708      	adds	r7, #8
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	0000613d 	.word	0x0000613d

00006728 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6728:	b580      	push	{r7, lr}
    672a:	b082      	sub	sp, #8
    672c:	af00      	add	r7, sp, #0
    672e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6730:	2104      	movs	r1, #4
    6732:	6878      	ldr	r0, [r7, #4]
    6734:	4b04      	ldr	r3, [pc, #16]	; (6748 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6736:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	8b5b      	ldrh	r3, [r3, #26]
    673c:	b29b      	uxth	r3, r3
}
    673e:	4618      	mov	r0, r3
    6740:	3708      	adds	r7, #8
    6742:	46bd      	mov	sp, r7
    6744:	bd80      	pop	{r7, pc}
    6746:	bf00      	nop
    6748:	0000613d 	.word	0x0000613d

0000674c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    674c:	b580      	push	{r7, lr}
    674e:	b082      	sub	sp, #8
    6750:	af00      	add	r7, sp, #0
    6752:	6078      	str	r0, [r7, #4]
    6754:	460b      	mov	r3, r1
    6756:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	887a      	ldrh	r2, [r7, #2]
    675c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    675e:	2104      	movs	r1, #4
    6760:	6878      	ldr	r0, [r7, #4]
    6762:	4b03      	ldr	r3, [pc, #12]	; (6770 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6764:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6766:	bf00      	nop
    6768:	3708      	adds	r7, #8
    676a:	46bd      	mov	sp, r7
    676c:	bd80      	pop	{r7, pc}
    676e:	bf00      	nop
    6770:	0000613d 	.word	0x0000613d

00006774 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6774:	b4b0      	push	{r4, r5, r7}
    6776:	b08d      	sub	sp, #52	; 0x34
    6778:	af00      	add	r7, sp, #0
    677a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    677c:	4b13      	ldr	r3, [pc, #76]	; (67cc <_sercom_get_hardware_index+0x58>)
    677e:	f107 040c 	add.w	r4, r7, #12
    6782:	461d      	mov	r5, r3
    6784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6788:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    678c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6790:	2300      	movs	r3, #0
    6792:	62fb      	str	r3, [r7, #44]	; 0x2c
    6794:	e010      	b.n	67b8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6798:	009b      	lsls	r3, r3, #2
    679a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    679e:	4413      	add	r3, r2
    67a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    67a4:	461a      	mov	r2, r3
    67a6:	687b      	ldr	r3, [r7, #4]
    67a8:	429a      	cmp	r2, r3
    67aa:	d102      	bne.n	67b2 <_sercom_get_hardware_index+0x3e>
			return i;
    67ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67ae:	b2db      	uxtb	r3, r3
    67b0:	e006      	b.n	67c0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    67b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67b4:	3301      	adds	r3, #1
    67b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    67b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    67ba:	2b07      	cmp	r3, #7
    67bc:	d9eb      	bls.n	6796 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    67be:	2300      	movs	r3, #0
}
    67c0:	4618      	mov	r0, r3
    67c2:	3734      	adds	r7, #52	; 0x34
    67c4:	46bd      	mov	sp, r7
    67c6:	bcb0      	pop	{r4, r5, r7}
    67c8:	4770      	bx	lr
    67ca:	bf00      	nop
    67cc:	000101f4 	.word	0x000101f4

000067d0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    67d0:	b480      	push	{r7}
    67d2:	b083      	sub	sp, #12
    67d4:	af00      	add	r7, sp, #0
    67d6:	6078      	str	r0, [r7, #4]
    67d8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	4a05      	ldr	r2, [pc, #20]	; (67f4 <_sercom_init_irq_param+0x24>)
    67de:	4293      	cmp	r3, r2
    67e0:	d102      	bne.n	67e8 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    67e2:	4a05      	ldr	r2, [pc, #20]	; (67f8 <_sercom_init_irq_param+0x28>)
    67e4:	683b      	ldr	r3, [r7, #0]
    67e6:	6013      	str	r3, [r2, #0]
	}
}
    67e8:	bf00      	nop
    67ea:	370c      	adds	r7, #12
    67ec:	46bd      	mov	sp, r7
    67ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    67f2:	4770      	bx	lr
    67f4:	43000c00 	.word	0x43000c00
    67f8:	20000a70 	.word	0x20000a70

000067fc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	b084      	sub	sp, #16
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6804:	6878      	ldr	r0, [r7, #4]
    6806:	4b13      	ldr	r3, [pc, #76]	; (6854 <_get_i2cm_index+0x58>)
    6808:	4798      	blx	r3
    680a:	4603      	mov	r3, r0
    680c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    680e:	2300      	movs	r3, #0
    6810:	73fb      	strb	r3, [r7, #15]
    6812:	e010      	b.n	6836 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6814:	7bfa      	ldrb	r2, [r7, #15]
    6816:	4910      	ldr	r1, [pc, #64]	; (6858 <_get_i2cm_index+0x5c>)
    6818:	4613      	mov	r3, r2
    681a:	005b      	lsls	r3, r3, #1
    681c:	4413      	add	r3, r2
    681e:	00db      	lsls	r3, r3, #3
    6820:	440b      	add	r3, r1
    6822:	781b      	ldrb	r3, [r3, #0]
    6824:	7bba      	ldrb	r2, [r7, #14]
    6826:	429a      	cmp	r2, r3
    6828:	d102      	bne.n	6830 <_get_i2cm_index+0x34>
			return i;
    682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    682e:	e00d      	b.n	684c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6830:	7bfb      	ldrb	r3, [r7, #15]
    6832:	3301      	adds	r3, #1
    6834:	73fb      	strb	r3, [r7, #15]
    6836:	7bfb      	ldrb	r3, [r7, #15]
    6838:	2b02      	cmp	r3, #2
    683a:	d9eb      	bls.n	6814 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    683c:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    6840:	4906      	ldr	r1, [pc, #24]	; (685c <_get_i2cm_index+0x60>)
    6842:	2000      	movs	r0, #0
    6844:	4b06      	ldr	r3, [pc, #24]	; (6860 <_get_i2cm_index+0x64>)
    6846:	4798      	blx	r3
	return -1;
    6848:	f04f 33ff 	mov.w	r3, #4294967295
}
    684c:	4618      	mov	r0, r3
    684e:	3710      	adds	r7, #16
    6850:	46bd      	mov	sp, r7
    6852:	bd80      	pop	{r7, pc}
    6854:	00006775 	.word	0x00006775
    6858:	20000018 	.word	0x20000018
    685c:	000101d8 	.word	0x000101d8
    6860:	00003ba1 	.word	0x00003ba1

00006864 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6864:	b580      	push	{r7, lr}
    6866:	b082      	sub	sp, #8
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    686c:	2103      	movs	r1, #3
    686e:	6878      	ldr	r0, [r7, #4]
    6870:	4b02      	ldr	r3, [pc, #8]	; (687c <_sercom_i2c_send_stop+0x18>)
    6872:	4798      	blx	r3
}
    6874:	bf00      	nop
    6876:	3708      	adds	r7, #8
    6878:	46bd      	mov	sp, r7
    687a:	bd80      	pop	{r7, pc}
    687c:	000064f1 	.word	0x000064f1

00006880 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6880:	b590      	push	{r4, r7, lr}
    6882:	b087      	sub	sp, #28
    6884:	af00      	add	r7, sp, #0
    6886:	60f8      	str	r0, [r7, #12]
    6888:	60b9      	str	r1, [r7, #8]
    688a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    688c:	68f8      	ldr	r0, [r7, #12]
    688e:	4b7d      	ldr	r3, [pc, #500]	; (6a84 <_sercom_i2c_sync_analyse_flags+0x204>)
    6890:	4798      	blx	r3
    6892:	4603      	mov	r3, r0
    6894:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6896:	68f8      	ldr	r0, [r7, #12]
    6898:	4b7b      	ldr	r3, [pc, #492]	; (6a88 <_sercom_i2c_sync_analyse_flags+0x208>)
    689a:	4798      	blx	r3
    689c:	4603      	mov	r3, r0
    689e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    68a0:	68bb      	ldr	r3, [r7, #8]
    68a2:	f003 0301 	and.w	r3, r3, #1
    68a6:	2b00      	cmp	r3, #0
    68a8:	f000 8095 	beq.w	69d6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    68ac:	8a7b      	ldrh	r3, [r7, #18]
    68ae:	f003 0302 	and.w	r3, r3, #2
    68b2:	2b00      	cmp	r3, #0
    68b4:	d01d      	beq.n	68f2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    68b6:	68f8      	ldr	r0, [r7, #12]
    68b8:	4b74      	ldr	r3, [pc, #464]	; (6a8c <_sercom_i2c_sync_analyse_flags+0x20c>)
    68ba:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	885b      	ldrh	r3, [r3, #2]
    68c0:	b29b      	uxth	r3, r3
    68c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    68c6:	b29a      	uxth	r2, r3
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	885b      	ldrh	r3, [r3, #2]
    68d0:	b29b      	uxth	r3, r3
    68d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    68d6:	b29a      	uxth	r2, r3
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    68dc:	8a7b      	ldrh	r3, [r7, #18]
    68de:	f003 0301 	and.w	r3, r3, #1
    68e2:	2b00      	cmp	r3, #0
    68e4:	d002      	beq.n	68ec <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    68e6:	f06f 0304 	mvn.w	r3, #4
    68ea:	e0c6      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    68ec:	f06f 0303 	mvn.w	r3, #3
    68f0:	e0c3      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    68f2:	8a7b      	ldrh	r3, [r7, #18]
    68f4:	f003 0304 	and.w	r3, r3, #4
    68f8:	2b00      	cmp	r3, #0
    68fa:	d01f      	beq.n	693c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    68fc:	687b      	ldr	r3, [r7, #4]
    68fe:	685b      	ldr	r3, [r3, #4]
    6900:	2b00      	cmp	r3, #0
    6902:	dd07      	ble.n	6914 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	885b      	ldrh	r3, [r3, #2]
    6908:	b29b      	uxth	r3, r3
    690a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    690e:	b29a      	uxth	r2, r3
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	885b      	ldrh	r3, [r3, #2]
    6918:	b29b      	uxth	r3, r3
    691a:	b21b      	sxth	r3, r3
    691c:	2b00      	cmp	r3, #0
    691e:	da02      	bge.n	6926 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6920:	68f8      	ldr	r0, [r7, #12]
    6922:	4b5b      	ldr	r3, [pc, #364]	; (6a90 <_sercom_i2c_sync_analyse_flags+0x210>)
    6924:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6926:	687b      	ldr	r3, [r7, #4]
    6928:	885b      	ldrh	r3, [r3, #2]
    692a:	b29b      	uxth	r3, r3
    692c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6930:	b29a      	uxth	r2, r3
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6936:	f06f 0301 	mvn.w	r3, #1
    693a:	e09e      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	885b      	ldrh	r3, [r3, #2]
    6940:	b29b      	uxth	r3, r3
    6942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6946:	2b00      	cmp	r3, #0
    6948:	d01c      	beq.n	6984 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	881b      	ldrh	r3, [r3, #0]
    694e:	121b      	asrs	r3, r3, #8
    6950:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6952:	f003 0406 	and.w	r4, r3, #6
    6956:	68f8      	ldr	r0, [r7, #12]
    6958:	4b4e      	ldr	r3, [pc, #312]	; (6a94 <_sercom_i2c_sync_analyse_flags+0x214>)
    695a:	4798      	blx	r3
    695c:	4603      	mov	r3, r0
    695e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6962:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6964:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6968:	4619      	mov	r1, r3
    696a:	68f8      	ldr	r0, [r7, #12]
    696c:	4b4a      	ldr	r3, [pc, #296]	; (6a98 <_sercom_i2c_sync_analyse_flags+0x218>)
    696e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	885b      	ldrh	r3, [r3, #2]
    6974:	b29b      	uxth	r3, r3
    6976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    697a:	b29a      	uxth	r2, r3
    697c:	687b      	ldr	r3, [r7, #4]
    697e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6980:	2300      	movs	r3, #0
    6982:	e07a      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6984:	687b      	ldr	r3, [r7, #4]
    6986:	685b      	ldr	r3, [r3, #4]
    6988:	2b00      	cmp	r3, #0
    698a:	d111      	bne.n	69b0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	885b      	ldrh	r3, [r3, #2]
    6990:	b29b      	uxth	r3, r3
    6992:	b21b      	sxth	r3, r3
    6994:	2b00      	cmp	r3, #0
    6996:	da02      	bge.n	699e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6998:	68f8      	ldr	r0, [r7, #12]
    699a:	4b3d      	ldr	r3, [pc, #244]	; (6a90 <_sercom_i2c_sync_analyse_flags+0x210>)
    699c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	885b      	ldrh	r3, [r3, #2]
    69a2:	b29b      	uxth	r3, r3
    69a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    69a8:	b29a      	uxth	r2, r3
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	805a      	strh	r2, [r3, #2]
    69ae:	e010      	b.n	69d2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    69b0:	687b      	ldr	r3, [r7, #4]
    69b2:	689b      	ldr	r3, [r3, #8]
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	4619      	mov	r1, r3
    69b8:	68f8      	ldr	r0, [r7, #12]
    69ba:	4b38      	ldr	r3, [pc, #224]	; (6a9c <_sercom_i2c_sync_analyse_flags+0x21c>)
    69bc:	4798      	blx	r3
				msg->buffer++;
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	689b      	ldr	r3, [r3, #8]
    69c2:	1c5a      	adds	r2, r3, #1
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	609a      	str	r2, [r3, #8]
				msg->len--;
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	685b      	ldr	r3, [r3, #4]
    69cc:	1e5a      	subs	r2, r3, #1
    69ce:	687b      	ldr	r3, [r7, #4]
    69d0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    69d2:	2300      	movs	r3, #0
    69d4:	e051      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    69d6:	68bb      	ldr	r3, [r7, #8]
    69d8:	f003 0302 	and.w	r3, r3, #2
    69dc:	2b00      	cmp	r3, #0
    69de:	d04b      	beq.n	6a78 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    69e0:	687b      	ldr	r3, [r7, #4]
    69e2:	685b      	ldr	r3, [r3, #4]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d041      	beq.n	6a6c <_sercom_i2c_sync_analyse_flags+0x1ec>
    69e8:	8a7b      	ldrh	r3, [r7, #18]
    69ea:	f003 0304 	and.w	r3, r3, #4
    69ee:	2b00      	cmp	r3, #0
    69f0:	d13c      	bne.n	6a6c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	685b      	ldr	r3, [r3, #4]
    69f6:	1e5a      	subs	r2, r3, #1
    69f8:	687b      	ldr	r3, [r7, #4]
    69fa:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	685b      	ldr	r3, [r3, #4]
    6a00:	2b00      	cmp	r3, #0
    6a02:	d102      	bne.n	6a0a <_sercom_i2c_sync_analyse_flags+0x18a>
    6a04:	697b      	ldr	r3, [r7, #20]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d006      	beq.n	6a18 <_sercom_i2c_sync_analyse_flags+0x198>
    6a0a:	687b      	ldr	r3, [r7, #4]
    6a0c:	685b      	ldr	r3, [r3, #4]
    6a0e:	2b01      	cmp	r3, #1
    6a10:	d105      	bne.n	6a1e <_sercom_i2c_sync_analyse_flags+0x19e>
    6a12:	697b      	ldr	r3, [r7, #20]
    6a14:	2b00      	cmp	r3, #0
    6a16:	d002      	beq.n	6a1e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6a18:	68f8      	ldr	r0, [r7, #12]
    6a1a:	4b21      	ldr	r3, [pc, #132]	; (6aa0 <_sercom_i2c_sync_analyse_flags+0x220>)
    6a1c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	685b      	ldr	r3, [r3, #4]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d113      	bne.n	6a4e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	885b      	ldrh	r3, [r3, #2]
    6a2a:	b29b      	uxth	r3, r3
    6a2c:	b21b      	sxth	r3, r3
    6a2e:	2b00      	cmp	r3, #0
    6a30:	da05      	bge.n	6a3e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6a32:	68f8      	ldr	r0, [r7, #12]
    6a34:	4b1b      	ldr	r3, [pc, #108]	; (6aa4 <_sercom_i2c_sync_analyse_flags+0x224>)
    6a36:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6a38:	68f8      	ldr	r0, [r7, #12]
    6a3a:	4b15      	ldr	r3, [pc, #84]	; (6a90 <_sercom_i2c_sync_analyse_flags+0x210>)
    6a3c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	885b      	ldrh	r3, [r3, #2]
    6a42:	b29b      	uxth	r3, r3
    6a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a48:	b29a      	uxth	r2, r3
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6a4e:	687b      	ldr	r3, [r7, #4]
    6a50:	689c      	ldr	r4, [r3, #8]
    6a52:	1c62      	adds	r2, r4, #1
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	609a      	str	r2, [r3, #8]
    6a58:	68f8      	ldr	r0, [r7, #12]
    6a5a:	4b13      	ldr	r3, [pc, #76]	; (6aa8 <_sercom_i2c_sync_analyse_flags+0x228>)
    6a5c:	4798      	blx	r3
    6a5e:	4603      	mov	r3, r0
    6a60:	b2db      	uxtb	r3, r3
    6a62:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6a64:	68f8      	ldr	r0, [r7, #12]
    6a66:	4b11      	ldr	r3, [pc, #68]	; (6aac <_sercom_i2c_sync_analyse_flags+0x22c>)
    6a68:	4798      	blx	r3
    6a6a:	e005      	b.n	6a78 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6a6c:	68f8      	ldr	r0, [r7, #12]
    6a6e:	4b0f      	ldr	r3, [pc, #60]	; (6aac <_sercom_i2c_sync_analyse_flags+0x22c>)
    6a70:	4798      	blx	r3
			return I2C_NACK;
    6a72:	f06f 0301 	mvn.w	r3, #1
    6a76:	e000      	b.n	6a7a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6a78:	2300      	movs	r3, #0
}
    6a7a:	4618      	mov	r0, r3
    6a7c:	371c      	adds	r7, #28
    6a7e:	46bd      	mov	sp, r7
    6a80:	bd90      	pop	{r4, r7, pc}
    6a82:	bf00      	nop
    6a84:	000062f1 	.word	0x000062f1
    6a88:	00006729 	.word	0x00006729
    6a8c:	000061d5 	.word	0x000061d5
    6a90:	00006865 	.word	0x00006865
    6a94:	00006609 	.word	0x00006609
    6a98:	000065e5 	.word	0x000065e5
    6a9c:	00006645 	.word	0x00006645
    6aa0:	000064a1 	.word	0x000064a1
    6aa4:	00006479 	.word	0x00006479
    6aa8:	00006669 	.word	0x00006669
    6aac:	000061ef 	.word	0x000061ef

00006ab0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6ab0:	b580      	push	{r7, lr}
    6ab2:	b086      	sub	sp, #24
    6ab4:	af00      	add	r7, sp, #0
    6ab6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	691b      	ldr	r3, [r3, #16]
    6abc:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6abe:	6938      	ldr	r0, [r7, #16]
    6ac0:	4b37      	ldr	r3, [pc, #220]	; (6ba0 <_sercom_i2c_m_irq_handler+0xf0>)
    6ac2:	4798      	blx	r3
    6ac4:	4603      	mov	r3, r0
    6ac6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6ac8:	2300      	movs	r3, #0
    6aca:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	2b00      	cmp	r3, #0
    6ad0:	bf14      	ite	ne
    6ad2:	2301      	movne	r3, #1
    6ad4:	2300      	moveq	r3, #0
    6ad6:	b2db      	uxtb	r3, r3
    6ad8:	f240 421e 	movw	r2, #1054	; 0x41e
    6adc:	4931      	ldr	r1, [pc, #196]	; (6ba4 <_sercom_i2c_m_irq_handler+0xf4>)
    6ade:	4618      	mov	r0, r3
    6ae0:	4b31      	ldr	r3, [pc, #196]	; (6ba8 <_sercom_i2c_m_irq_handler+0xf8>)
    6ae2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	691b      	ldr	r3, [r3, #16]
    6ae8:	2b00      	cmp	r3, #0
    6aea:	bf14      	ite	ne
    6aec:	2301      	movne	r3, #1
    6aee:	2300      	moveq	r3, #0
    6af0:	b2db      	uxtb	r3, r3
    6af2:	f240 421f 	movw	r2, #1055	; 0x41f
    6af6:	492b      	ldr	r1, [pc, #172]	; (6ba4 <_sercom_i2c_m_irq_handler+0xf4>)
    6af8:	4618      	mov	r0, r3
    6afa:	4b2b      	ldr	r3, [pc, #172]	; (6ba8 <_sercom_i2c_m_irq_handler+0xf8>)
    6afc:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6afe:	bf00      	nop
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6b06:	2b00      	cmp	r3, #0
    6b08:	d126      	bne.n	6b58 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	461a      	mov	r2, r3
    6b0e:	68f9      	ldr	r1, [r7, #12]
    6b10:	6938      	ldr	r0, [r7, #16]
    6b12:	4b26      	ldr	r3, [pc, #152]	; (6bac <_sercom_i2c_m_irq_handler+0xfc>)
    6b14:	4798      	blx	r3
    6b16:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6b18:	697b      	ldr	r3, [r7, #20]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d11b      	bne.n	6b56 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6b1e:	68fb      	ldr	r3, [r7, #12]
    6b20:	f003 0301 	and.w	r3, r3, #1
    6b24:	2b00      	cmp	r3, #0
    6b26:	d008      	beq.n	6b3a <_sercom_i2c_m_irq_handler+0x8a>
    6b28:	687b      	ldr	r3, [r7, #4]
    6b2a:	699b      	ldr	r3, [r3, #24]
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d004      	beq.n	6b3a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	699b      	ldr	r3, [r3, #24]
    6b34:	6878      	ldr	r0, [r7, #4]
    6b36:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6b38:	e02e      	b.n	6b98 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6b3a:	68fb      	ldr	r3, [r7, #12]
    6b3c:	f003 0302 	and.w	r3, r3, #2
    6b40:	2b00      	cmp	r3, #0
    6b42:	d029      	beq.n	6b98 <_sercom_i2c_m_irq_handler+0xe8>
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	69db      	ldr	r3, [r3, #28]
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d025      	beq.n	6b98 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	69db      	ldr	r3, [r3, #28]
    6b50:	6878      	ldr	r0, [r7, #4]
    6b52:	4798      	blx	r3
		return;
    6b54:	e020      	b.n	6b98 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6b56:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	885b      	ldrh	r3, [r3, #2]
    6b5c:	b29b      	uxth	r3, r3
    6b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b62:	b29a      	uxth	r2, r3
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6b68:	687b      	ldr	r3, [r7, #4]
    6b6a:	695b      	ldr	r3, [r3, #20]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d014      	beq.n	6b9a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6b70:	697b      	ldr	r3, [r7, #20]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d005      	beq.n	6b82 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	695b      	ldr	r3, [r3, #20]
    6b7a:	6979      	ldr	r1, [r7, #20]
    6b7c:	6878      	ldr	r0, [r7, #4]
    6b7e:	4798      	blx	r3
    6b80:	e005      	b.n	6b8e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	695b      	ldr	r3, [r3, #20]
    6b86:	f06f 0104 	mvn.w	r1, #4
    6b8a:	6878      	ldr	r0, [r7, #4]
    6b8c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6b8e:	2180      	movs	r1, #128	; 0x80
    6b90:	6938      	ldr	r0, [r7, #16]
    6b92:	4b07      	ldr	r3, [pc, #28]	; (6bb0 <_sercom_i2c_m_irq_handler+0x100>)
    6b94:	4798      	blx	r3
    6b96:	e000      	b.n	6b9a <_sercom_i2c_m_irq_handler+0xea>
		return;
    6b98:	bf00      	nop
	}
}
    6b9a:	3718      	adds	r7, #24
    6b9c:	46bd      	mov	sp, r7
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	00006209 	.word	0x00006209
    6ba4:	000101d8 	.word	0x000101d8
    6ba8:	00003ba1 	.word	0x00003ba1
    6bac:	00006881 	.word	0x00006881
    6bb0:	00006223 	.word	0x00006223

00006bb4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6bb4:	b580      	push	{r7, lr}
    6bb6:	b082      	sub	sp, #8
    6bb8:	af00      	add	r7, sp, #0
    6bba:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6bbc:	6878      	ldr	r0, [r7, #4]
    6bbe:	4b05      	ldr	r3, [pc, #20]	; (6bd4 <_sercom_get_irq_num+0x20>)
    6bc0:	4798      	blx	r3
    6bc2:	4603      	mov	r3, r0
    6bc4:	009b      	lsls	r3, r3, #2
    6bc6:	b2db      	uxtb	r3, r3
    6bc8:	332e      	adds	r3, #46	; 0x2e
    6bca:	b2db      	uxtb	r3, r3
}
    6bcc:	4618      	mov	r0, r3
    6bce:	3708      	adds	r7, #8
    6bd0:	46bd      	mov	sp, r7
    6bd2:	bd80      	pop	{r7, pc}
    6bd4:	00006775 	.word	0x00006775

00006bd8 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6bd8:	b580      	push	{r7, lr}
    6bda:	b086      	sub	sp, #24
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
    6be0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6be2:	687b      	ldr	r3, [r7, #4]
    6be4:	2b00      	cmp	r3, #0
    6be6:	bf14      	ite	ne
    6be8:	2301      	movne	r3, #1
    6bea:	2300      	moveq	r3, #0
    6bec:	b2db      	uxtb	r3, r3
    6bee:	f240 4292 	movw	r2, #1170	; 0x492
    6bf2:	491d      	ldr	r1, [pc, #116]	; (6c68 <_i2c_m_async_init+0x90>)
    6bf4:	4618      	mov	r0, r3
    6bf6:	4b1d      	ldr	r3, [pc, #116]	; (6c6c <_i2c_m_async_init+0x94>)
    6bf8:	4798      	blx	r3

	i2c_dev->hw = hw;
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	683a      	ldr	r2, [r7, #0]
    6bfe:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6c00:	687b      	ldr	r3, [r7, #4]
    6c02:	6839      	ldr	r1, [r7, #0]
    6c04:	4618      	mov	r0, r3
    6c06:	4b1a      	ldr	r3, [pc, #104]	; (6c70 <_i2c_m_async_init+0x98>)
    6c08:	4798      	blx	r3
    6c0a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6c0c:	68fb      	ldr	r3, [r7, #12]
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d001      	beq.n	6c16 <_i2c_m_async_init+0x3e>
		return init_status;
    6c12:	68fb      	ldr	r3, [r7, #12]
    6c14:	e024      	b.n	6c60 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    6c16:	6879      	ldr	r1, [r7, #4]
    6c18:	6838      	ldr	r0, [r7, #0]
    6c1a:	4b16      	ldr	r3, [pc, #88]	; (6c74 <_i2c_m_async_init+0x9c>)
    6c1c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6c1e:	6838      	ldr	r0, [r7, #0]
    6c20:	4b15      	ldr	r3, [pc, #84]	; (6c78 <_i2c_m_async_init+0xa0>)
    6c22:	4798      	blx	r3
    6c24:	4603      	mov	r3, r0
    6c26:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c28:	2300      	movs	r3, #0
    6c2a:	613b      	str	r3, [r7, #16]
    6c2c:	e014      	b.n	6c58 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6c2e:	7dfb      	ldrb	r3, [r7, #23]
    6c30:	b21b      	sxth	r3, r3
    6c32:	4618      	mov	r0, r3
    6c34:	4b11      	ldr	r3, [pc, #68]	; (6c7c <_i2c_m_async_init+0xa4>)
    6c36:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6c38:	7dfb      	ldrb	r3, [r7, #23]
    6c3a:	b21b      	sxth	r3, r3
    6c3c:	4618      	mov	r0, r3
    6c3e:	4b10      	ldr	r3, [pc, #64]	; (6c80 <_i2c_m_async_init+0xa8>)
    6c40:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6c42:	7dfb      	ldrb	r3, [r7, #23]
    6c44:	b21b      	sxth	r3, r3
    6c46:	4618      	mov	r0, r3
    6c48:	4b0e      	ldr	r3, [pc, #56]	; (6c84 <_i2c_m_async_init+0xac>)
    6c4a:	4798      	blx	r3
		irq++;
    6c4c:	7dfb      	ldrb	r3, [r7, #23]
    6c4e:	3301      	adds	r3, #1
    6c50:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c52:	693b      	ldr	r3, [r7, #16]
    6c54:	3301      	adds	r3, #1
    6c56:	613b      	str	r3, [r7, #16]
    6c58:	693b      	ldr	r3, [r7, #16]
    6c5a:	2b03      	cmp	r3, #3
    6c5c:	d9e7      	bls.n	6c2e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6c5e:	2300      	movs	r3, #0
}
    6c60:	4618      	mov	r0, r3
    6c62:	3718      	adds	r7, #24
    6c64:	46bd      	mov	sp, r7
    6c66:	bd80      	pop	{r7, pc}
    6c68:	000101d8 	.word	0x000101d8
    6c6c:	00003ba1 	.word	0x00003ba1
    6c70:	0000725d 	.word	0x0000725d
    6c74:	000067d1 	.word	0x000067d1
    6c78:	00006bb5 	.word	0x00006bb5
    6c7c:	000060bd 	.word	0x000060bd
    6c80:	00006101 	.word	0x00006101
    6c84:	00006081 	.word	0x00006081

00006c88 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    6c88:	b590      	push	{r4, r7, lr}
    6c8a:	b087      	sub	sp, #28
    6c8c:	af00      	add	r7, sp, #0
    6c8e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	691b      	ldr	r3, [r3, #16]
    6c94:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6c9a:	6978      	ldr	r0, [r7, #20]
    6c9c:	4b33      	ldr	r3, [pc, #204]	; (6d6c <_sercom_i2c_send_address+0xe4>)
    6c9e:	4798      	blx	r3
    6ca0:	4603      	mov	r3, r0
    6ca2:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	bf14      	ite	ne
    6caa:	2301      	movne	r3, #1
    6cac:	2300      	moveq	r3, #0
    6cae:	b2db      	uxtb	r3, r3
    6cb0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    6cb4:	492e      	ldr	r1, [pc, #184]	; (6d70 <_sercom_i2c_send_address+0xe8>)
    6cb6:	4618      	mov	r0, r3
    6cb8:	4b2e      	ldr	r3, [pc, #184]	; (6d74 <_sercom_i2c_send_address+0xec>)
    6cba:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6cbc:	693b      	ldr	r3, [r7, #16]
    6cbe:	685b      	ldr	r3, [r3, #4]
    6cc0:	2b01      	cmp	r3, #1
    6cc2:	d106      	bne.n	6cd2 <_sercom_i2c_send_address+0x4a>
    6cc4:	68fb      	ldr	r3, [r7, #12]
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d003      	beq.n	6cd2 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6cca:	6978      	ldr	r0, [r7, #20]
    6ccc:	4b2a      	ldr	r3, [pc, #168]	; (6d78 <_sercom_i2c_send_address+0xf0>)
    6cce:	4798      	blx	r3
    6cd0:	e002      	b.n	6cd8 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6cd2:	6978      	ldr	r0, [r7, #20]
    6cd4:	4b29      	ldr	r3, [pc, #164]	; (6d7c <_sercom_i2c_send_address+0xf4>)
    6cd6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6cd8:	693b      	ldr	r3, [r7, #16]
    6cda:	881b      	ldrh	r3, [r3, #0]
    6cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6ce0:	2b00      	cmp	r3, #0
    6ce2:	d022      	beq.n	6d2a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6ce4:	693b      	ldr	r3, [r7, #16]
    6ce6:	885b      	ldrh	r3, [r3, #2]
    6ce8:	b29b      	uxth	r3, r3
    6cea:	f003 0301 	and.w	r3, r3, #1
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d007      	beq.n	6d02 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6cf2:	693b      	ldr	r3, [r7, #16]
    6cf4:	885b      	ldrh	r3, [r3, #2]
    6cf6:	b29b      	uxth	r3, r3
    6cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6cfc:	b29a      	uxth	r2, r3
    6cfe:	693b      	ldr	r3, [r7, #16]
    6d00:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6d02:	693b      	ldr	r3, [r7, #16]
    6d04:	881b      	ldrh	r3, [r3, #0]
    6d06:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d08:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6d0c:	401c      	ands	r4, r3
    6d0e:	6978      	ldr	r0, [r7, #20]
    6d10:	4b1b      	ldr	r3, [pc, #108]	; (6d80 <_sercom_i2c_send_address+0xf8>)
    6d12:	4798      	blx	r3
    6d14:	4603      	mov	r3, r0
    6d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6d1a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6d20:	4619      	mov	r1, r3
    6d22:	6978      	ldr	r0, [r7, #20]
    6d24:	4b17      	ldr	r3, [pc, #92]	; (6d84 <_sercom_i2c_send_address+0xfc>)
    6d26:	4798      	blx	r3
    6d28:	e01a      	b.n	6d60 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6d2a:	693b      	ldr	r3, [r7, #16]
    6d2c:	881b      	ldrh	r3, [r3, #0]
    6d2e:	005b      	lsls	r3, r3, #1
    6d30:	b2db      	uxtb	r3, r3
    6d32:	693a      	ldr	r2, [r7, #16]
    6d34:	8852      	ldrh	r2, [r2, #2]
    6d36:	b292      	uxth	r2, r2
    6d38:	f002 0201 	and.w	r2, r2, #1
    6d3c:	2a00      	cmp	r2, #0
    6d3e:	bf14      	ite	ne
    6d40:	2201      	movne	r2, #1
    6d42:	2200      	moveq	r2, #0
    6d44:	b2d2      	uxtb	r2, r2
    6d46:	4313      	orrs	r3, r2
    6d48:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d4a:	6978      	ldr	r0, [r7, #20]
    6d4c:	4b0c      	ldr	r3, [pc, #48]	; (6d80 <_sercom_i2c_send_address+0xf8>)
    6d4e:	4798      	blx	r3
    6d50:	4603      	mov	r3, r0
    6d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6d56:	4323      	orrs	r3, r4
    6d58:	4619      	mov	r1, r3
    6d5a:	6978      	ldr	r0, [r7, #20]
    6d5c:	4b09      	ldr	r3, [pc, #36]	; (6d84 <_sercom_i2c_send_address+0xfc>)
    6d5e:	4798      	blx	r3
	}

	return ERR_NONE;
    6d60:	2300      	movs	r3, #0
}
    6d62:	4618      	mov	r0, r3
    6d64:	371c      	adds	r7, #28
    6d66:	46bd      	mov	sp, r7
    6d68:	bd90      	pop	{r4, r7, pc}
    6d6a:	bf00      	nop
    6d6c:	000062f1 	.word	0x000062f1
    6d70:	000101d8 	.word	0x000101d8
    6d74:	00003ba1 	.word	0x00003ba1
    6d78:	000064a1 	.word	0x000064a1
    6d7c:	000064c9 	.word	0x000064c9
    6d80:	00006609 	.word	0x00006609
    6d84:	000065e5 	.word	0x000065e5

00006d88 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b084      	sub	sp, #16
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
    6d90:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	2b00      	cmp	r3, #0
    6d96:	bf14      	ite	ne
    6d98:	2301      	movne	r3, #1
    6d9a:	2300      	moveq	r3, #0
    6d9c:	b2db      	uxtb	r3, r3
    6d9e:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    6da2:	492a      	ldr	r1, [pc, #168]	; (6e4c <_i2c_m_async_transfer+0xc4>)
    6da4:	4618      	mov	r0, r3
    6da6:	4b2a      	ldr	r3, [pc, #168]	; (6e50 <_i2c_m_async_transfer+0xc8>)
    6da8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	691b      	ldr	r3, [r3, #16]
    6dae:	2b00      	cmp	r3, #0
    6db0:	bf14      	ite	ne
    6db2:	2301      	movne	r3, #1
    6db4:	2300      	moveq	r3, #0
    6db6:	b2db      	uxtb	r3, r3
    6db8:	f240 42e9 	movw	r2, #1257	; 0x4e9
    6dbc:	4923      	ldr	r1, [pc, #140]	; (6e4c <_i2c_m_async_transfer+0xc4>)
    6dbe:	4618      	mov	r0, r3
    6dc0:	4b23      	ldr	r3, [pc, #140]	; (6e50 <_i2c_m_async_transfer+0xc8>)
    6dc2:	4798      	blx	r3
	ASSERT(msg);
    6dc4:	683b      	ldr	r3, [r7, #0]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	bf14      	ite	ne
    6dca:	2301      	movne	r3, #1
    6dcc:	2300      	moveq	r3, #0
    6dce:	b2db      	uxtb	r3, r3
    6dd0:	f240 42ea 	movw	r2, #1258	; 0x4ea
    6dd4:	491d      	ldr	r1, [pc, #116]	; (6e4c <_i2c_m_async_transfer+0xc4>)
    6dd6:	4618      	mov	r0, r3
    6dd8:	4b1d      	ldr	r3, [pc, #116]	; (6e50 <_i2c_m_async_transfer+0xc8>)
    6dda:	4798      	blx	r3

	if (msg->len == 0) {
    6ddc:	683b      	ldr	r3, [r7, #0]
    6dde:	685b      	ldr	r3, [r3, #4]
    6de0:	2b00      	cmp	r3, #0
    6de2:	d101      	bne.n	6de8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6de4:	2300      	movs	r3, #0
    6de6:	e02d      	b.n	6e44 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	885b      	ldrh	r3, [r3, #2]
    6dec:	b29b      	uxth	r3, r3
    6dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6df2:	2b00      	cmp	r3, #0
    6df4:	d002      	beq.n	6dfc <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    6df6:	f06f 0303 	mvn.w	r3, #3
    6dfa:	e023      	b.n	6e44 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6dfc:	683b      	ldr	r3, [r7, #0]
    6dfe:	885b      	ldrh	r3, [r3, #2]
    6e00:	b29b      	uxth	r3, r3
    6e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6e06:	b29a      	uxth	r2, r3
    6e08:	683b      	ldr	r3, [r7, #0]
    6e0a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	683a      	ldr	r2, [r7, #0]
    6e10:	ca07      	ldmia	r2, {r0, r1, r2}
    6e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	691b      	ldr	r3, [r3, #16]
    6e1a:	4618      	mov	r0, r3
    6e1c:	4b0d      	ldr	r3, [pc, #52]	; (6e54 <_i2c_m_async_transfer+0xcc>)
    6e1e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6e20:	6878      	ldr	r0, [r7, #4]
    6e22:	4b0d      	ldr	r3, [pc, #52]	; (6e58 <_i2c_m_async_transfer+0xd0>)
    6e24:	4798      	blx	r3
    6e26:	60f8      	str	r0, [r7, #12]

	if (ret) {
    6e28:	68fb      	ldr	r3, [r7, #12]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d009      	beq.n	6e42 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	885b      	ldrh	r3, [r3, #2]
    6e32:	b29b      	uxth	r3, r3
    6e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e38:	b29a      	uxth	r2, r3
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	805a      	strh	r2, [r3, #2]

		return ret;
    6e3e:	68fb      	ldr	r3, [r7, #12]
    6e40:	e000      	b.n	6e44 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6e42:	2300      	movs	r3, #0
}
    6e44:	4618      	mov	r0, r3
    6e46:	3710      	adds	r7, #16
    6e48:	46bd      	mov	sp, r7
    6e4a:	bd80      	pop	{r7, pc}
    6e4c:	000101d8 	.word	0x000101d8
    6e50:	00003ba1 	.word	0x00003ba1
    6e54:	00006451 	.word	0x00006451
    6e58:	00006c89 	.word	0x00006c89

00006e5c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6e5c:	b480      	push	{r7}
    6e5e:	b085      	sub	sp, #20
    6e60:	af00      	add	r7, sp, #0
    6e62:	60f8      	str	r0, [r7, #12]
    6e64:	460b      	mov	r3, r1
    6e66:	607a      	str	r2, [r7, #4]
    6e68:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6e6a:	7afb      	ldrb	r3, [r7, #11]
    6e6c:	2b01      	cmp	r3, #1
    6e6e:	d008      	beq.n	6e82 <_i2c_m_async_register_callback+0x26>
    6e70:	2b02      	cmp	r3, #2
    6e72:	d00a      	beq.n	6e8a <_i2c_m_async_register_callback+0x2e>
    6e74:	2b00      	cmp	r3, #0
    6e76:	d000      	beq.n	6e7a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6e78:	e00b      	b.n	6e92 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    6e7a:	68fb      	ldr	r3, [r7, #12]
    6e7c:	687a      	ldr	r2, [r7, #4]
    6e7e:	615a      	str	r2, [r3, #20]
		break;
    6e80:	e007      	b.n	6e92 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6e82:	68fb      	ldr	r3, [r7, #12]
    6e84:	687a      	ldr	r2, [r7, #4]
    6e86:	619a      	str	r2, [r3, #24]
		break;
    6e88:	e003      	b.n	6e92 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    6e8a:	68fb      	ldr	r3, [r7, #12]
    6e8c:	687a      	ldr	r2, [r7, #4]
    6e8e:	61da      	str	r2, [r3, #28]
		break;
    6e90:	bf00      	nop
	}

	return ERR_NONE;
    6e92:	2300      	movs	r3, #0
}
    6e94:	4618      	mov	r0, r3
    6e96:	3714      	adds	r7, #20
    6e98:	46bd      	mov	sp, r7
    6e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e9e:	4770      	bx	lr

00006ea0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b082      	sub	sp, #8
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
    6ea8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	2b00      	cmp	r3, #0
    6eae:	bf14      	ite	ne
    6eb0:	2301      	movne	r3, #1
    6eb2:	2300      	moveq	r3, #0
    6eb4:	b2db      	uxtb	r3, r3
    6eb6:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    6eba:	4908      	ldr	r1, [pc, #32]	; (6edc <_i2c_m_sync_init+0x3c>)
    6ebc:	4618      	mov	r0, r3
    6ebe:	4b08      	ldr	r3, [pc, #32]	; (6ee0 <_i2c_m_sync_init+0x40>)
    6ec0:	4798      	blx	r3

	i2c_dev->hw = hw;
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	683a      	ldr	r2, [r7, #0]
    6ec6:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	6839      	ldr	r1, [r7, #0]
    6ecc:	4618      	mov	r0, r3
    6ece:	4b05      	ldr	r3, [pc, #20]	; (6ee4 <_i2c_m_sync_init+0x44>)
    6ed0:	4798      	blx	r3
    6ed2:	4603      	mov	r3, r0
}
    6ed4:	4618      	mov	r0, r3
    6ed6:	3708      	adds	r7, #8
    6ed8:	46bd      	mov	sp, r7
    6eda:	bd80      	pop	{r7, pc}
    6edc:	000101d8 	.word	0x000101d8
    6ee0:	00003ba1 	.word	0x00003ba1
    6ee4:	0000725d 	.word	0x0000725d

00006ee8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6ee8:	b580      	push	{r7, lr}
    6eea:	b082      	sub	sp, #8
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6ef0:	687b      	ldr	r3, [r7, #4]
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	bf14      	ite	ne
    6ef6:	2301      	movne	r3, #1
    6ef8:	2300      	moveq	r3, #0
    6efa:	b2db      	uxtb	r3, r3
    6efc:	f240 5265 	movw	r2, #1381	; 0x565
    6f00:	4906      	ldr	r1, [pc, #24]	; (6f1c <_i2c_m_sync_enable+0x34>)
    6f02:	4618      	mov	r0, r3
    6f04:	4b06      	ldr	r3, [pc, #24]	; (6f20 <_i2c_m_sync_enable+0x38>)
    6f06:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	691b      	ldr	r3, [r3, #16]
    6f0c:	4618      	mov	r0, r3
    6f0e:	4b05      	ldr	r3, [pc, #20]	; (6f24 <_i2c_m_sync_enable+0x3c>)
    6f10:	4798      	blx	r3
    6f12:	4603      	mov	r3, r0
}
    6f14:	4618      	mov	r0, r3
    6f16:	3708      	adds	r7, #8
    6f18:	46bd      	mov	sp, r7
    6f1a:	bd80      	pop	{r7, pc}
    6f1c:	000101d8 	.word	0x000101d8
    6f20:	00003ba1 	.word	0x00003ba1
    6f24:	000071d1 	.word	0x000071d1

00006f28 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6f28:	b580      	push	{r7, lr}
    6f2a:	b084      	sub	sp, #16
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	6078      	str	r0, [r7, #4]
    6f30:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f36:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6f38:	687b      	ldr	r3, [r7, #4]
    6f3a:	691b      	ldr	r3, [r3, #16]
    6f3c:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6f3e:	68b8      	ldr	r0, [r7, #8]
    6f40:	4b0f      	ldr	r3, [pc, #60]	; (6f80 <_sercom_i2c_sync_wait_bus+0x58>)
    6f42:	4798      	blx	r3
    6f44:	4603      	mov	r3, r0
    6f46:	461a      	mov	r2, r3
    6f48:	683b      	ldr	r3, [r7, #0]
    6f4a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6f4c:	68fb      	ldr	r3, [r7, #12]
    6f4e:	1e5a      	subs	r2, r3, #1
    6f50:	60fa      	str	r2, [r7, #12]
    6f52:	2b00      	cmp	r3, #0
    6f54:	d102      	bne.n	6f5c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6f56:	f06f 0304 	mvn.w	r3, #4
    6f5a:	e00c      	b.n	6f76 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6f5c:	683b      	ldr	r3, [r7, #0]
    6f5e:	681b      	ldr	r3, [r3, #0]
    6f60:	f003 0301 	and.w	r3, r3, #1
    6f64:	2b00      	cmp	r3, #0
    6f66:	d105      	bne.n	6f74 <_sercom_i2c_sync_wait_bus+0x4c>
    6f68:	683b      	ldr	r3, [r7, #0]
    6f6a:	681b      	ldr	r3, [r3, #0]
    6f6c:	f003 0302 	and.w	r3, r3, #2
    6f70:	2b00      	cmp	r3, #0
    6f72:	d0e4      	beq.n	6f3e <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6f74:	2300      	movs	r3, #0
}
    6f76:	4618      	mov	r0, r3
    6f78:	3710      	adds	r7, #16
    6f7a:	46bd      	mov	sp, r7
    6f7c:	bd80      	pop	{r7, pc}
    6f7e:	bf00      	nop
    6f80:	00006209 	.word	0x00006209

00006f84 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6f84:	b590      	push	{r4, r7, lr}
    6f86:	b087      	sub	sp, #28
    6f88:	af00      	add	r7, sp, #0
    6f8a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	691b      	ldr	r3, [r3, #16]
    6f90:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6f96:	6978      	ldr	r0, [r7, #20]
    6f98:	4b39      	ldr	r3, [pc, #228]	; (7080 <_sercom_i2c_sync_send_address+0xfc>)
    6f9a:	4798      	blx	r3
    6f9c:	4603      	mov	r3, r0
    6f9e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	bf14      	ite	ne
    6fa6:	2301      	movne	r3, #1
    6fa8:	2300      	moveq	r3, #0
    6faa:	b2db      	uxtb	r3, r3
    6fac:	f240 52d5 	movw	r2, #1493	; 0x5d5
    6fb0:	4934      	ldr	r1, [pc, #208]	; (7084 <_sercom_i2c_sync_send_address+0x100>)
    6fb2:	4618      	mov	r0, r3
    6fb4:	4b34      	ldr	r3, [pc, #208]	; (7088 <_sercom_i2c_sync_send_address+0x104>)
    6fb6:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6fb8:	693b      	ldr	r3, [r7, #16]
    6fba:	685b      	ldr	r3, [r3, #4]
    6fbc:	2b01      	cmp	r3, #1
    6fbe:	d106      	bne.n	6fce <_sercom_i2c_sync_send_address+0x4a>
    6fc0:	68fb      	ldr	r3, [r7, #12]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d003      	beq.n	6fce <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6fc6:	6978      	ldr	r0, [r7, #20]
    6fc8:	4b30      	ldr	r3, [pc, #192]	; (708c <_sercom_i2c_sync_send_address+0x108>)
    6fca:	4798      	blx	r3
    6fcc:	e002      	b.n	6fd4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6fce:	6978      	ldr	r0, [r7, #20]
    6fd0:	4b2f      	ldr	r3, [pc, #188]	; (7090 <_sercom_i2c_sync_send_address+0x10c>)
    6fd2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6fd4:	693b      	ldr	r3, [r7, #16]
    6fd6:	881b      	ldrh	r3, [r3, #0]
    6fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d022      	beq.n	7026 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6fe0:	693b      	ldr	r3, [r7, #16]
    6fe2:	885b      	ldrh	r3, [r3, #2]
    6fe4:	b29b      	uxth	r3, r3
    6fe6:	f003 0301 	and.w	r3, r3, #1
    6fea:	2b00      	cmp	r3, #0
    6fec:	d007      	beq.n	6ffe <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6fee:	693b      	ldr	r3, [r7, #16]
    6ff0:	885b      	ldrh	r3, [r3, #2]
    6ff2:	b29b      	uxth	r3, r3
    6ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6ff8:	b29a      	uxth	r2, r3
    6ffa:	693b      	ldr	r3, [r7, #16]
    6ffc:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6ffe:	693b      	ldr	r3, [r7, #16]
    7000:	881b      	ldrh	r3, [r3, #0]
    7002:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7004:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7008:	401c      	ands	r4, r3
    700a:	6978      	ldr	r0, [r7, #20]
    700c:	4b21      	ldr	r3, [pc, #132]	; (7094 <_sercom_i2c_sync_send_address+0x110>)
    700e:	4798      	blx	r3
    7010:	4603      	mov	r3, r0
    7012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7016:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    701c:	4619      	mov	r1, r3
    701e:	6978      	ldr	r0, [r7, #20]
    7020:	4b1d      	ldr	r3, [pc, #116]	; (7098 <_sercom_i2c_sync_send_address+0x114>)
    7022:	4798      	blx	r3
    7024:	e01a      	b.n	705c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7026:	693b      	ldr	r3, [r7, #16]
    7028:	881b      	ldrh	r3, [r3, #0]
    702a:	005b      	lsls	r3, r3, #1
    702c:	b2db      	uxtb	r3, r3
    702e:	693a      	ldr	r2, [r7, #16]
    7030:	8852      	ldrh	r2, [r2, #2]
    7032:	b292      	uxth	r2, r2
    7034:	f002 0201 	and.w	r2, r2, #1
    7038:	2a00      	cmp	r2, #0
    703a:	bf14      	ite	ne
    703c:	2201      	movne	r2, #1
    703e:	2200      	moveq	r2, #0
    7040:	b2d2      	uxtb	r2, r2
    7042:	4313      	orrs	r3, r2
    7044:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7046:	6978      	ldr	r0, [r7, #20]
    7048:	4b12      	ldr	r3, [pc, #72]	; (7094 <_sercom_i2c_sync_send_address+0x110>)
    704a:	4798      	blx	r3
    704c:	4603      	mov	r3, r0
    704e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7052:	4323      	orrs	r3, r4
    7054:	4619      	mov	r1, r3
    7056:	6978      	ldr	r0, [r7, #20]
    7058:	4b0f      	ldr	r3, [pc, #60]	; (7098 <_sercom_i2c_sync_send_address+0x114>)
    705a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    705c:	f107 0308 	add.w	r3, r7, #8
    7060:	4619      	mov	r1, r3
    7062:	6878      	ldr	r0, [r7, #4]
    7064:	4b0d      	ldr	r3, [pc, #52]	; (709c <_sercom_i2c_sync_send_address+0x118>)
    7066:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7068:	68bb      	ldr	r3, [r7, #8]
    706a:	693a      	ldr	r2, [r7, #16]
    706c:	4619      	mov	r1, r3
    706e:	6978      	ldr	r0, [r7, #20]
    7070:	4b0b      	ldr	r3, [pc, #44]	; (70a0 <_sercom_i2c_sync_send_address+0x11c>)
    7072:	4798      	blx	r3
    7074:	4603      	mov	r3, r0
}
    7076:	4618      	mov	r0, r3
    7078:	371c      	adds	r7, #28
    707a:	46bd      	mov	sp, r7
    707c:	bd90      	pop	{r4, r7, pc}
    707e:	bf00      	nop
    7080:	000062f1 	.word	0x000062f1
    7084:	000101d8 	.word	0x000101d8
    7088:	00003ba1 	.word	0x00003ba1
    708c:	000064a1 	.word	0x000064a1
    7090:	000064c9 	.word	0x000064c9
    7094:	00006609 	.word	0x00006609
    7098:	000065e5 	.word	0x000065e5
    709c:	00006f29 	.word	0x00006f29
    70a0:	00006881 	.word	0x00006881

000070a4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    70a4:	b580      	push	{r7, lr}
    70a6:	b086      	sub	sp, #24
    70a8:	af00      	add	r7, sp, #0
    70aa:	6078      	str	r0, [r7, #4]
    70ac:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	691b      	ldr	r3, [r3, #16]
    70b2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	2b00      	cmp	r3, #0
    70b8:	bf14      	ite	ne
    70ba:	2301      	movne	r3, #1
    70bc:	2300      	moveq	r3, #0
    70be:	b2db      	uxtb	r3, r3
    70c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    70c4:	493b      	ldr	r1, [pc, #236]	; (71b4 <_i2c_m_sync_transfer+0x110>)
    70c6:	4618      	mov	r0, r3
    70c8:	4b3b      	ldr	r3, [pc, #236]	; (71b8 <_i2c_m_sync_transfer+0x114>)
    70ca:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	691b      	ldr	r3, [r3, #16]
    70d0:	2b00      	cmp	r3, #0
    70d2:	bf14      	ite	ne
    70d4:	2301      	movne	r3, #1
    70d6:	2300      	moveq	r3, #0
    70d8:	b2db      	uxtb	r3, r3
    70da:	f240 6201 	movw	r2, #1537	; 0x601
    70de:	4935      	ldr	r1, [pc, #212]	; (71b4 <_i2c_m_sync_transfer+0x110>)
    70e0:	4618      	mov	r0, r3
    70e2:	4b35      	ldr	r3, [pc, #212]	; (71b8 <_i2c_m_sync_transfer+0x114>)
    70e4:	4798      	blx	r3
	ASSERT(msg);
    70e6:	683b      	ldr	r3, [r7, #0]
    70e8:	2b00      	cmp	r3, #0
    70ea:	bf14      	ite	ne
    70ec:	2301      	movne	r3, #1
    70ee:	2300      	moveq	r3, #0
    70f0:	b2db      	uxtb	r3, r3
    70f2:	f240 6202 	movw	r2, #1538	; 0x602
    70f6:	492f      	ldr	r1, [pc, #188]	; (71b4 <_i2c_m_sync_transfer+0x110>)
    70f8:	4618      	mov	r0, r3
    70fa:	4b2f      	ldr	r3, [pc, #188]	; (71b8 <_i2c_m_sync_transfer+0x114>)
    70fc:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	885b      	ldrh	r3, [r3, #2]
    7102:	b29b      	uxth	r3, r3
    7104:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7108:	2b00      	cmp	r3, #0
    710a:	d002      	beq.n	7112 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    710c:	f06f 0305 	mvn.w	r3, #5
    7110:	e04c      	b.n	71ac <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    7112:	683b      	ldr	r3, [r7, #0]
    7114:	885b      	ldrh	r3, [r3, #2]
    7116:	b29b      	uxth	r3, r3
    7118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    711c:	b29a      	uxth	r2, r3
    711e:	683b      	ldr	r3, [r7, #0]
    7120:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    7122:	687b      	ldr	r3, [r7, #4]
    7124:	683a      	ldr	r2, [r7, #0]
    7126:	ca07      	ldmia	r2, {r0, r1, r2}
    7128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    712c:	6938      	ldr	r0, [r7, #16]
    712e:	4b23      	ldr	r3, [pc, #140]	; (71bc <_i2c_m_sync_transfer+0x118>)
    7130:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    7132:	6878      	ldr	r0, [r7, #4]
    7134:	4b22      	ldr	r3, [pc, #136]	; (71c0 <_i2c_m_sync_transfer+0x11c>)
    7136:	4798      	blx	r3
    7138:	6178      	str	r0, [r7, #20]

	if (ret) {
    713a:	697b      	ldr	r3, [r7, #20]
    713c:	2b00      	cmp	r3, #0
    713e:	d02d      	beq.n	719c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7140:	687b      	ldr	r3, [r7, #4]
    7142:	885b      	ldrh	r3, [r3, #2]
    7144:	b29b      	uxth	r3, r3
    7146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    714a:	b29a      	uxth	r2, r3
    714c:	687b      	ldr	r3, [r7, #4]
    714e:	805a      	strh	r2, [r3, #2]

		return ret;
    7150:	697b      	ldr	r3, [r7, #20]
    7152:	e02b      	b.n	71ac <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7154:	f107 030c 	add.w	r3, r7, #12
    7158:	4619      	mov	r1, r3
    715a:	6878      	ldr	r0, [r7, #4]
    715c:	4b19      	ldr	r3, [pc, #100]	; (71c4 <_i2c_m_sync_transfer+0x120>)
    715e:	4798      	blx	r3
    7160:	6178      	str	r0, [r7, #20]

		if (ret) {
    7162:	697b      	ldr	r3, [r7, #20]
    7164:	2b00      	cmp	r3, #0
    7166:	d012      	beq.n	718e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7168:	683b      	ldr	r3, [r7, #0]
    716a:	885b      	ldrh	r3, [r3, #2]
    716c:	b29b      	uxth	r3, r3
    716e:	b21b      	sxth	r3, r3
    7170:	2b00      	cmp	r3, #0
    7172:	da02      	bge.n	717a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7174:	6938      	ldr	r0, [r7, #16]
    7176:	4b14      	ldr	r3, [pc, #80]	; (71c8 <_i2c_m_sync_transfer+0x124>)
    7178:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    717a:	687b      	ldr	r3, [r7, #4]
    717c:	885b      	ldrh	r3, [r3, #2]
    717e:	b29b      	uxth	r3, r3
    7180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7184:	b29a      	uxth	r2, r3
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	805a      	strh	r2, [r3, #2]

			return ret;
    718a:	697b      	ldr	r3, [r7, #20]
    718c:	e00e      	b.n	71ac <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    718e:	68fb      	ldr	r3, [r7, #12]
    7190:	687a      	ldr	r2, [r7, #4]
    7192:	4619      	mov	r1, r3
    7194:	6938      	ldr	r0, [r7, #16]
    7196:	4b0d      	ldr	r3, [pc, #52]	; (71cc <_i2c_m_sync_transfer+0x128>)
    7198:	4798      	blx	r3
    719a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    719c:	687b      	ldr	r3, [r7, #4]
    719e:	885b      	ldrh	r3, [r3, #2]
    71a0:	b29b      	uxth	r3, r3
    71a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    71a6:	2b00      	cmp	r3, #0
    71a8:	d1d4      	bne.n	7154 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    71aa:	697b      	ldr	r3, [r7, #20]
}
    71ac:	4618      	mov	r0, r3
    71ae:	3718      	adds	r7, #24
    71b0:	46bd      	mov	sp, r7
    71b2:	bd80      	pop	{r7, pc}
    71b4:	000101d8 	.word	0x000101d8
    71b8:	00003ba1 	.word	0x00003ba1
    71bc:	00006451 	.word	0x00006451
    71c0:	00006f85 	.word	0x00006f85
    71c4:	00006f29 	.word	0x00006f29
    71c8:	00006865 	.word	0x00006865
    71cc:	00006881 	.word	0x00006881

000071d0 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	b084      	sub	sp, #16
    71d4:	af00      	add	r7, sp, #0
    71d6:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    71d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    71dc:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    71de:	2304      	movs	r3, #4
    71e0:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	2b00      	cmp	r3, #0
    71e6:	bf14      	ite	ne
    71e8:	2301      	movne	r3, #1
    71ea:	2300      	moveq	r3, #0
    71ec:	b2db      	uxtb	r3, r3
    71ee:	f240 6235 	movw	r2, #1589	; 0x635
    71f2:	4915      	ldr	r1, [pc, #84]	; (7248 <_i2c_m_enable_implementation+0x78>)
    71f4:	4618      	mov	r0, r3
    71f6:	4b15      	ldr	r3, [pc, #84]	; (724c <_i2c_m_enable_implementation+0x7c>)
    71f8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    71fa:	6878      	ldr	r0, [r7, #4]
    71fc:	4b14      	ldr	r3, [pc, #80]	; (7250 <_i2c_m_enable_implementation+0x80>)
    71fe:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7200:	e016      	b.n	7230 <_i2c_m_enable_implementation+0x60>
		timeout--;
    7202:	68fb      	ldr	r3, [r7, #12]
    7204:	3b01      	subs	r3, #1
    7206:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7208:	68fb      	ldr	r3, [r7, #12]
    720a:	2b00      	cmp	r3, #0
    720c:	dc10      	bgt.n	7230 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    720e:	68bb      	ldr	r3, [r7, #8]
    7210:	3b01      	subs	r3, #1
    7212:	60bb      	str	r3, [r7, #8]
    7214:	68bb      	ldr	r3, [r7, #8]
    7216:	2b00      	cmp	r3, #0
    7218:	d007      	beq.n	722a <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    721a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    721e:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    7220:	2110      	movs	r1, #16
    7222:	6878      	ldr	r0, [r7, #4]
    7224:	4b0b      	ldr	r3, [pc, #44]	; (7254 <_i2c_m_enable_implementation+0x84>)
    7226:	4798      	blx	r3
    7228:	e002      	b.n	7230 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    722a:	f06f 0305 	mvn.w	r3, #5
    722e:	e006      	b.n	723e <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    7230:	6878      	ldr	r0, [r7, #4]
    7232:	4b09      	ldr	r3, [pc, #36]	; (7258 <_i2c_m_enable_implementation+0x88>)
    7234:	4798      	blx	r3
    7236:	4603      	mov	r3, r0
    7238:	2b01      	cmp	r3, #1
    723a:	d1e2      	bne.n	7202 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    723c:	2300      	movs	r3, #0
}
    723e:	4618      	mov	r0, r3
    7240:	3710      	adds	r7, #16
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	000101d8 	.word	0x000101d8
    724c:	00003ba1 	.word	0x00003ba1
    7250:	000062a1 	.word	0x000062a1
    7254:	0000674d 	.word	0x0000674d
    7258:	000066fd 	.word	0x000066fd

0000725c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    725c:	b580      	push	{r7, lr}
    725e:	b084      	sub	sp, #16
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
    7264:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7266:	6838      	ldr	r0, [r7, #0]
    7268:	4b42      	ldr	r3, [pc, #264]	; (7374 <_i2c_m_sync_init_impl+0x118>)
    726a:	4798      	blx	r3
    726c:	4603      	mov	r3, r0
    726e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7270:	2101      	movs	r1, #1
    7272:	6838      	ldr	r0, [r7, #0]
    7274:	4b40      	ldr	r3, [pc, #256]	; (7378 <_i2c_m_sync_init_impl+0x11c>)
    7276:	4798      	blx	r3
    7278:	4603      	mov	r3, r0
    727a:	f083 0301 	eor.w	r3, r3, #1
    727e:	b2db      	uxtb	r3, r3
    7280:	2b00      	cmp	r3, #0
    7282:	d020      	beq.n	72c6 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7284:	7bfa      	ldrb	r2, [r7, #15]
    7286:	493d      	ldr	r1, [pc, #244]	; (737c <_i2c_m_sync_init_impl+0x120>)
    7288:	4613      	mov	r3, r2
    728a:	005b      	lsls	r3, r3, #1
    728c:	4413      	add	r3, r2
    728e:	00db      	lsls	r3, r3, #3
    7290:	440b      	add	r3, r1
    7292:	3304      	adds	r3, #4
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	f003 031c 	and.w	r3, r3, #28
    729a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    729c:	2102      	movs	r1, #2
    729e:	6838      	ldr	r0, [r7, #0]
    72a0:	4b37      	ldr	r3, [pc, #220]	; (7380 <_i2c_m_sync_init_impl+0x124>)
    72a2:	4798      	blx	r3
    72a4:	4603      	mov	r3, r0
    72a6:	2b00      	cmp	r3, #0
    72a8:	d006      	beq.n	72b8 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    72aa:	6838      	ldr	r0, [r7, #0]
    72ac:	4b35      	ldr	r3, [pc, #212]	; (7384 <_i2c_m_sync_init_impl+0x128>)
    72ae:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    72b0:	2102      	movs	r1, #2
    72b2:	6838      	ldr	r0, [r7, #0]
    72b4:	4b34      	ldr	r3, [pc, #208]	; (7388 <_i2c_m_sync_init_impl+0x12c>)
    72b6:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    72b8:	68bb      	ldr	r3, [r7, #8]
    72ba:	f043 0301 	orr.w	r3, r3, #1
    72be:	4619      	mov	r1, r3
    72c0:	6838      	ldr	r0, [r7, #0]
    72c2:	4b32      	ldr	r3, [pc, #200]	; (738c <_i2c_m_sync_init_impl+0x130>)
    72c4:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    72c6:	2101      	movs	r1, #1
    72c8:	6838      	ldr	r0, [r7, #0]
    72ca:	4b2f      	ldr	r3, [pc, #188]	; (7388 <_i2c_m_sync_init_impl+0x12c>)
    72cc:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    72ce:	7bfa      	ldrb	r2, [r7, #15]
    72d0:	492a      	ldr	r1, [pc, #168]	; (737c <_i2c_m_sync_init_impl+0x120>)
    72d2:	4613      	mov	r3, r2
    72d4:	005b      	lsls	r3, r3, #1
    72d6:	4413      	add	r3, r2
    72d8:	00db      	lsls	r3, r3, #3
    72da:	440b      	add	r3, r1
    72dc:	3304      	adds	r3, #4
    72de:	681b      	ldr	r3, [r3, #0]
    72e0:	4619      	mov	r1, r3
    72e2:	6838      	ldr	r0, [r7, #0]
    72e4:	4b29      	ldr	r3, [pc, #164]	; (738c <_i2c_m_sync_init_impl+0x130>)
    72e6:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    72e8:	7bfa      	ldrb	r2, [r7, #15]
    72ea:	4924      	ldr	r1, [pc, #144]	; (737c <_i2c_m_sync_init_impl+0x120>)
    72ec:	4613      	mov	r3, r2
    72ee:	005b      	lsls	r3, r3, #1
    72f0:	4413      	add	r3, r2
    72f2:	00db      	lsls	r3, r3, #3
    72f4:	440b      	add	r3, r1
    72f6:	3308      	adds	r3, #8
    72f8:	681b      	ldr	r3, [r3, #0]
    72fa:	4619      	mov	r1, r3
    72fc:	6838      	ldr	r0, [r7, #0]
    72fe:	4b24      	ldr	r3, [pc, #144]	; (7390 <_i2c_m_sync_init_impl+0x134>)
    7300:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7302:	7bfa      	ldrb	r2, [r7, #15]
    7304:	491d      	ldr	r1, [pc, #116]	; (737c <_i2c_m_sync_init_impl+0x120>)
    7306:	4613      	mov	r3, r2
    7308:	005b      	lsls	r3, r3, #1
    730a:	4413      	add	r3, r2
    730c:	00db      	lsls	r3, r3, #3
    730e:	440b      	add	r3, r1
    7310:	330c      	adds	r3, #12
    7312:	681b      	ldr	r3, [r3, #0]
    7314:	4619      	mov	r1, r3
    7316:	6838      	ldr	r0, [r7, #0]
    7318:	4b1e      	ldr	r3, [pc, #120]	; (7394 <_i2c_m_sync_init_impl+0x138>)
    731a:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    731c:	7bfa      	ldrb	r2, [r7, #15]
    731e:	4917      	ldr	r1, [pc, #92]	; (737c <_i2c_m_sync_init_impl+0x120>)
    7320:	4613      	mov	r3, r2
    7322:	005b      	lsls	r3, r3, #1
    7324:	4413      	add	r3, r2
    7326:	00db      	lsls	r3, r3, #3
    7328:	440b      	add	r3, r1
    732a:	3304      	adds	r3, #4
    732c:	681b      	ldr	r3, [r3, #0]
    732e:	0e1b      	lsrs	r3, r3, #24
    7330:	b29b      	uxth	r3, r3
    7332:	f003 0303 	and.w	r3, r3, #3
    7336:	b29a      	uxth	r2, r3
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	899b      	ldrh	r3, [r3, #12]
    7340:	2b01      	cmp	r3, #1
    7342:	bf8c      	ite	hi
    7344:	2301      	movhi	r3, #1
    7346:	2300      	movls	r3, #0
    7348:	b2db      	uxtb	r3, r3
    734a:	4619      	mov	r1, r3
    734c:	6838      	ldr	r0, [r7, #0]
    734e:	4b12      	ldr	r3, [pc, #72]	; (7398 <_i2c_m_sync_init_impl+0x13c>)
    7350:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    7352:	7bfa      	ldrb	r2, [r7, #15]
    7354:	4909      	ldr	r1, [pc, #36]	; (737c <_i2c_m_sync_init_impl+0x120>)
    7356:	4613      	mov	r3, r2
    7358:	005b      	lsls	r3, r3, #1
    735a:	4413      	add	r3, r2
    735c:	00db      	lsls	r3, r3, #3
    735e:	440b      	add	r3, r1
    7360:	3312      	adds	r3, #18
    7362:	881a      	ldrh	r2, [r3, #0]
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7368:	2300      	movs	r3, #0
}
    736a:	4618      	mov	r0, r3
    736c:	3710      	adds	r7, #16
    736e:	46bd      	mov	sp, r7
    7370:	bd80      	pop	{r7, pc}
    7372:	bf00      	nop
    7374:	000067fd 	.word	0x000067fd
    7378:	00006161 	.word	0x00006161
    737c:	20000018 	.word	0x20000018
    7380:	00006321 	.word	0x00006321
    7384:	000062c9 	.word	0x000062c9
    7388:	0000613d 	.word	0x0000613d
    738c:	00006351 	.word	0x00006351
    7390:	00006521 	.word	0x00006521
    7394:	00006569 	.word	0x00006569
    7398:	000065a5 	.word	0x000065a5

0000739c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73a4:	2101      	movs	r1, #1
    73a6:	6878      	ldr	r0, [r7, #4]
    73a8:	4b07      	ldr	r3, [pc, #28]	; (73c8 <_spi_sync_enable+0x2c>)
    73aa:	4798      	blx	r3
    73ac:	4603      	mov	r3, r0
    73ae:	2b00      	cmp	r3, #0
    73b0:	d002      	beq.n	73b8 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    73b2:	f06f 0303 	mvn.w	r3, #3
    73b6:	e003      	b.n	73c0 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    73b8:	6878      	ldr	r0, [r7, #4]
    73ba:	4b04      	ldr	r3, [pc, #16]	; (73cc <_spi_sync_enable+0x30>)
    73bc:	4798      	blx	r3

	return ERR_NONE;
    73be:	2300      	movs	r3, #0
}
    73c0:	4618      	mov	r0, r3
    73c2:	3708      	adds	r7, #8
    73c4:	46bd      	mov	sp, r7
    73c6:	bd80      	pop	{r7, pc}
    73c8:	000061ad 	.word	0x000061ad
    73cc:	00006375 	.word	0x00006375

000073d0 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    73d0:	b580      	push	{r7, lr}
    73d2:	b082      	sub	sp, #8
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73d8:	2101      	movs	r1, #1
    73da:	6878      	ldr	r0, [r7, #4]
    73dc:	4b07      	ldr	r3, [pc, #28]	; (73fc <_spi_sync_disable+0x2c>)
    73de:	4798      	blx	r3
    73e0:	4603      	mov	r3, r0
    73e2:	2b00      	cmp	r3, #0
    73e4:	d002      	beq.n	73ec <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    73e6:	f06f 0303 	mvn.w	r3, #3
    73ea:	e003      	b.n	73f4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    73ec:	6878      	ldr	r0, [r7, #4]
    73ee:	4b04      	ldr	r3, [pc, #16]	; (7400 <_spi_sync_disable+0x30>)
    73f0:	4798      	blx	r3

	return ERR_NONE;
    73f2:	2300      	movs	r3, #0
}
    73f4:	4618      	mov	r0, r3
    73f6:	3708      	adds	r7, #8
    73f8:	46bd      	mov	sp, r7
    73fa:	bd80      	pop	{r7, pc}
    73fc:	000061ad 	.word	0x000061ad
    7400:	000063d5 	.word	0x000063d5

00007404 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7404:	b580      	push	{r7, lr}
    7406:	b082      	sub	sp, #8
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
    740c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    740e:	687b      	ldr	r3, [r7, #4]
    7410:	2b00      	cmp	r3, #0
    7412:	d004      	beq.n	741e <_spi_load_regs_master+0x1a>
    7414:	683b      	ldr	r3, [r7, #0]
    7416:	2b00      	cmp	r3, #0
    7418:	d001      	beq.n	741e <_spi_load_regs_master+0x1a>
    741a:	2301      	movs	r3, #1
    741c:	e000      	b.n	7420 <_spi_load_regs_master+0x1c>
    741e:	2300      	movs	r3, #0
    7420:	f003 0301 	and.w	r3, r3, #1
    7424:	b2db      	uxtb	r3, r3
    7426:	f640 1239 	movw	r2, #2361	; 0x939
    742a:	4915      	ldr	r1, [pc, #84]	; (7480 <_spi_load_regs_master+0x7c>)
    742c:	4618      	mov	r0, r3
    742e:	4b15      	ldr	r3, [pc, #84]	; (7484 <_spi_load_regs_master+0x80>)
    7430:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    7432:	683b      	ldr	r3, [r7, #0]
    7434:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7436:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    743a:	f023 0301 	bic.w	r3, r3, #1
    743e:	4619      	mov	r1, r3
    7440:	6878      	ldr	r0, [r7, #4]
    7442:	4b11      	ldr	r3, [pc, #68]	; (7488 <_spi_load_regs_master+0x84>)
    7444:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7446:	683b      	ldr	r3, [r7, #0]
    7448:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    744a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    744e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    7452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7456:	4619      	mov	r1, r3
    7458:	6878      	ldr	r0, [r7, #4]
    745a:	4b0c      	ldr	r3, [pc, #48]	; (748c <_spi_load_regs_master+0x88>)
    745c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    745e:	683b      	ldr	r3, [r7, #0]
    7460:	7b1b      	ldrb	r3, [r3, #12]
    7462:	4619      	mov	r1, r3
    7464:	6878      	ldr	r0, [r7, #4]
    7466:	4b0a      	ldr	r3, [pc, #40]	; (7490 <_spi_load_regs_master+0x8c>)
    7468:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    746a:	683b      	ldr	r3, [r7, #0]
    746c:	7b5b      	ldrb	r3, [r3, #13]
    746e:	4619      	mov	r1, r3
    7470:	6878      	ldr	r0, [r7, #4]
    7472:	4b08      	ldr	r3, [pc, #32]	; (7494 <_spi_load_regs_master+0x90>)
    7474:	4798      	blx	r3
}
    7476:	bf00      	nop
    7478:	3708      	adds	r7, #8
    747a:	46bd      	mov	sp, r7
    747c:	bd80      	pop	{r7, pc}
    747e:	bf00      	nop
    7480:	000101d8 	.word	0x000101d8
    7484:	00003ba1 	.word	0x00003ba1
    7488:	0000642d 	.word	0x0000642d
    748c:	00006545 	.word	0x00006545
    7490:	00006585 	.word	0x00006585
    7494:	000066bd 	.word	0x000066bd

00007498 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7498:	b580      	push	{r7, lr}
    749a:	b082      	sub	sp, #8
    749c:	af00      	add	r7, sp, #0
    749e:	6078      	str	r0, [r7, #4]
    74a0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d004      	beq.n	74b2 <_spi_load_regs_slave+0x1a>
    74a8:	683b      	ldr	r3, [r7, #0]
    74aa:	2b00      	cmp	r3, #0
    74ac:	d001      	beq.n	74b2 <_spi_load_regs_slave+0x1a>
    74ae:	2301      	movs	r3, #1
    74b0:	e000      	b.n	74b4 <_spi_load_regs_slave+0x1c>
    74b2:	2300      	movs	r3, #0
    74b4:	f003 0301 	and.w	r3, r3, #1
    74b8:	b2db      	uxtb	r3, r3
    74ba:	f640 124d 	movw	r2, #2381	; 0x94d
    74be:	491a      	ldr	r1, [pc, #104]	; (7528 <_spi_load_regs_slave+0x90>)
    74c0:	4618      	mov	r0, r3
    74c2:	4b1a      	ldr	r3, [pc, #104]	; (752c <_spi_load_regs_slave+0x94>)
    74c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74c6:	683b      	ldr	r3, [r7, #0]
    74c8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    74ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74ce:	f023 0301 	bic.w	r3, r3, #1
    74d2:	4619      	mov	r1, r3
    74d4:	6878      	ldr	r0, [r7, #4]
    74d6:	4b16      	ldr	r3, [pc, #88]	; (7530 <_spi_load_regs_slave+0x98>)
    74d8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    74da:	683b      	ldr	r3, [r7, #0]
    74dc:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    74de:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    74e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    74e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74ea:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    74ee:	4619      	mov	r1, r3
    74f0:	6878      	ldr	r0, [r7, #4]
    74f2:	4b10      	ldr	r3, [pc, #64]	; (7534 <_spi_load_regs_slave+0x9c>)
    74f4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    74f6:	683b      	ldr	r3, [r7, #0]
    74f8:	689b      	ldr	r3, [r3, #8]
    74fa:	4619      	mov	r1, r3
    74fc:	6878      	ldr	r0, [r7, #4]
    74fe:	4b0e      	ldr	r3, [pc, #56]	; (7538 <_spi_load_regs_slave+0xa0>)
    7500:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7502:	683b      	ldr	r3, [r7, #0]
    7504:	7b5b      	ldrb	r3, [r3, #13]
    7506:	4619      	mov	r1, r3
    7508:	6878      	ldr	r0, [r7, #4]
    750a:	4b0c      	ldr	r3, [pc, #48]	; (753c <_spi_load_regs_slave+0xa4>)
    750c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    750e:	bf00      	nop
    7510:	f04f 31ff 	mov.w	r1, #4294967295
    7514:	6878      	ldr	r0, [r7, #4]
    7516:	4b0a      	ldr	r3, [pc, #40]	; (7540 <_spi_load_regs_slave+0xa8>)
    7518:	4798      	blx	r3
    751a:	4603      	mov	r3, r0
    751c:	2b00      	cmp	r3, #0
    751e:	d1f7      	bne.n	7510 <_spi_load_regs_slave+0x78>
		;
}
    7520:	bf00      	nop
    7522:	3708      	adds	r7, #8
    7524:	46bd      	mov	sp, r7
    7526:	bd80      	pop	{r7, pc}
    7528:	000101d8 	.word	0x000101d8
    752c:	00003ba1 	.word	0x00003ba1
    7530:	0000642d 	.word	0x0000642d
    7534:	00006545 	.word	0x00006545
    7538:	00006629 	.word	0x00006629
    753c:	000066bd 	.word	0x000066bd
    7540:	000061ad 	.word	0x000061ad

00007544 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7544:	b580      	push	{r7, lr}
    7546:	b084      	sub	sp, #16
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	4618      	mov	r0, r3
    7550:	4b11      	ldr	r3, [pc, #68]	; (7598 <_spi_get_regs+0x54>)
    7552:	4798      	blx	r3
    7554:	4603      	mov	r3, r0
    7556:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7558:	2300      	movs	r3, #0
    755a:	73fb      	strb	r3, [r7, #15]
    755c:	e014      	b.n	7588 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    755e:	7bfa      	ldrb	r2, [r7, #15]
    7560:	490e      	ldr	r1, [pc, #56]	; (759c <_spi_get_regs+0x58>)
    7562:	4613      	mov	r3, r2
    7564:	011b      	lsls	r3, r3, #4
    7566:	4413      	add	r3, r2
    7568:	440b      	add	r3, r1
    756a:	3310      	adds	r3, #16
    756c:	781b      	ldrb	r3, [r3, #0]
    756e:	7bba      	ldrb	r2, [r7, #14]
    7570:	429a      	cmp	r2, r3
    7572:	d106      	bne.n	7582 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7574:	7bfa      	ldrb	r2, [r7, #15]
    7576:	4613      	mov	r3, r2
    7578:	011b      	lsls	r3, r3, #4
    757a:	4413      	add	r3, r2
    757c:	4a07      	ldr	r2, [pc, #28]	; (759c <_spi_get_regs+0x58>)
    757e:	4413      	add	r3, r2
    7580:	e006      	b.n	7590 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7582:	7bfb      	ldrb	r3, [r7, #15]
    7584:	3301      	adds	r3, #1
    7586:	73fb      	strb	r3, [r7, #15]
    7588:	7bfb      	ldrb	r3, [r7, #15]
    758a:	2b01      	cmp	r3, #1
    758c:	d9e7      	bls.n	755e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    758e:	2300      	movs	r3, #0
}
    7590:	4618      	mov	r0, r3
    7592:	3710      	adds	r7, #16
    7594:	46bd      	mov	sp, r7
    7596:	bd80      	pop	{r7, pc}
    7598:	00006775 	.word	0x00006775
    759c:	00010214 	.word	0x00010214

000075a0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    75a0:	b580      	push	{r7, lr}
    75a2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75a4:	4b03      	ldr	r3, [pc, #12]	; (75b4 <SERCOM7_0_Handler+0x14>)
    75a6:	681b      	ldr	r3, [r3, #0]
    75a8:	4618      	mov	r0, r3
    75aa:	4b03      	ldr	r3, [pc, #12]	; (75b8 <SERCOM7_0_Handler+0x18>)
    75ac:	4798      	blx	r3
}
    75ae:	bf00      	nop
    75b0:	bd80      	pop	{r7, pc}
    75b2:	bf00      	nop
    75b4:	20000a70 	.word	0x20000a70
    75b8:	00006ab1 	.word	0x00006ab1

000075bc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    75bc:	b580      	push	{r7, lr}
    75be:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75c0:	4b03      	ldr	r3, [pc, #12]	; (75d0 <SERCOM7_1_Handler+0x14>)
    75c2:	681b      	ldr	r3, [r3, #0]
    75c4:	4618      	mov	r0, r3
    75c6:	4b03      	ldr	r3, [pc, #12]	; (75d4 <SERCOM7_1_Handler+0x18>)
    75c8:	4798      	blx	r3
}
    75ca:	bf00      	nop
    75cc:	bd80      	pop	{r7, pc}
    75ce:	bf00      	nop
    75d0:	20000a70 	.word	0x20000a70
    75d4:	00006ab1 	.word	0x00006ab1

000075d8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    75d8:	b580      	push	{r7, lr}
    75da:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75dc:	4b03      	ldr	r3, [pc, #12]	; (75ec <SERCOM7_2_Handler+0x14>)
    75de:	681b      	ldr	r3, [r3, #0]
    75e0:	4618      	mov	r0, r3
    75e2:	4b03      	ldr	r3, [pc, #12]	; (75f0 <SERCOM7_2_Handler+0x18>)
    75e4:	4798      	blx	r3
}
    75e6:	bf00      	nop
    75e8:	bd80      	pop	{r7, pc}
    75ea:	bf00      	nop
    75ec:	20000a70 	.word	0x20000a70
    75f0:	00006ab1 	.word	0x00006ab1

000075f4 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    75f4:	b580      	push	{r7, lr}
    75f6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    75f8:	4b03      	ldr	r3, [pc, #12]	; (7608 <SERCOM7_3_Handler+0x14>)
    75fa:	681b      	ldr	r3, [r3, #0]
    75fc:	4618      	mov	r0, r3
    75fe:	4b03      	ldr	r3, [pc, #12]	; (760c <SERCOM7_3_Handler+0x18>)
    7600:	4798      	blx	r3
}
    7602:	bf00      	nop
    7604:	bd80      	pop	{r7, pc}
    7606:	bf00      	nop
    7608:	20000a70 	.word	0x20000a70
    760c:	00006ab1 	.word	0x00006ab1

00007610 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7610:	b580      	push	{r7, lr}
    7612:	b084      	sub	sp, #16
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
    7618:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    761a:	683b      	ldr	r3, [r7, #0]
    761c:	4618      	mov	r0, r3
    761e:	4b35      	ldr	r3, [pc, #212]	; (76f4 <_spi_m_sync_init+0xe4>)
    7620:	4798      	blx	r3
    7622:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	2b00      	cmp	r3, #0
    7628:	d004      	beq.n	7634 <_spi_m_sync_init+0x24>
    762a:	683b      	ldr	r3, [r7, #0]
    762c:	2b00      	cmp	r3, #0
    762e:	d001      	beq.n	7634 <_spi_m_sync_init+0x24>
    7630:	2301      	movs	r3, #1
    7632:	e000      	b.n	7636 <_spi_m_sync_init+0x26>
    7634:	2300      	movs	r3, #0
    7636:	f003 0301 	and.w	r3, r3, #1
    763a:	b2db      	uxtb	r3, r3
    763c:	f640 128c 	movw	r2, #2444	; 0x98c
    7640:	492d      	ldr	r1, [pc, #180]	; (76f8 <_spi_m_sync_init+0xe8>)
    7642:	4618      	mov	r0, r3
    7644:	4b2d      	ldr	r3, [pc, #180]	; (76fc <_spi_m_sync_init+0xec>)
    7646:	4798      	blx	r3

	if (regs == NULL) {
    7648:	68fb      	ldr	r3, [r7, #12]
    764a:	2b00      	cmp	r3, #0
    764c:	d102      	bne.n	7654 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    764e:	f06f 030c 	mvn.w	r3, #12
    7652:	e04a      	b.n	76ea <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7654:	2101      	movs	r1, #1
    7656:	6838      	ldr	r0, [r7, #0]
    7658:	4b29      	ldr	r3, [pc, #164]	; (7700 <_spi_m_sync_init+0xf0>)
    765a:	4798      	blx	r3
    765c:	4603      	mov	r3, r0
    765e:	f083 0301 	eor.w	r3, r3, #1
    7662:	b2db      	uxtb	r3, r3
    7664:	2b00      	cmp	r3, #0
    7666:	d019      	beq.n	769c <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    7668:	68fb      	ldr	r3, [r7, #12]
    766a:	681b      	ldr	r3, [r3, #0]
    766c:	f003 031c 	and.w	r3, r3, #28
    7670:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7672:	2102      	movs	r1, #2
    7674:	6838      	ldr	r0, [r7, #0]
    7676:	4b23      	ldr	r3, [pc, #140]	; (7704 <_spi_m_sync_init+0xf4>)
    7678:	4798      	blx	r3
    767a:	4603      	mov	r3, r0
    767c:	2b00      	cmp	r3, #0
    767e:	d006      	beq.n	768e <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7680:	6838      	ldr	r0, [r7, #0]
    7682:	4b21      	ldr	r3, [pc, #132]	; (7708 <_spi_m_sync_init+0xf8>)
    7684:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7686:	2102      	movs	r1, #2
    7688:	6838      	ldr	r0, [r7, #0]
    768a:	4b20      	ldr	r3, [pc, #128]	; (770c <_spi_m_sync_init+0xfc>)
    768c:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    768e:	68bb      	ldr	r3, [r7, #8]
    7690:	f043 0301 	orr.w	r3, r3, #1
    7694:	4619      	mov	r1, r3
    7696:	6838      	ldr	r0, [r7, #0]
    7698:	4b1d      	ldr	r3, [pc, #116]	; (7710 <_spi_m_sync_init+0x100>)
    769a:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    769c:	2101      	movs	r1, #1
    769e:	6838      	ldr	r0, [r7, #0]
    76a0:	4b1a      	ldr	r3, [pc, #104]	; (770c <_spi_m_sync_init+0xfc>)
    76a2:	4798      	blx	r3

	dev->prvt = hw;
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	683a      	ldr	r2, [r7, #0]
    76a8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	681b      	ldr	r3, [r3, #0]
    76ae:	f003 031c 	and.w	r3, r3, #28
    76b2:	2b08      	cmp	r3, #8
    76b4:	d104      	bne.n	76c0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    76b6:	68f9      	ldr	r1, [r7, #12]
    76b8:	6838      	ldr	r0, [r7, #0]
    76ba:	4b16      	ldr	r3, [pc, #88]	; (7714 <_spi_m_sync_init+0x104>)
    76bc:	4798      	blx	r3
    76be:	e003      	b.n	76c8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    76c0:	68f9      	ldr	r1, [r7, #12]
    76c2:	6838      	ldr	r0, [r7, #0]
    76c4:	4b14      	ldr	r3, [pc, #80]	; (7718 <_spi_m_sync_init+0x108>)
    76c6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    76c8:	68fb      	ldr	r3, [r7, #12]
    76ca:	685b      	ldr	r3, [r3, #4]
    76cc:	f003 0307 	and.w	r3, r3, #7
    76d0:	2b00      	cmp	r3, #0
    76d2:	d101      	bne.n	76d8 <_spi_m_sync_init+0xc8>
    76d4:	2201      	movs	r2, #1
    76d6:	e000      	b.n	76da <_spi_m_sync_init+0xca>
    76d8:	2202      	movs	r2, #2
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    76de:	68fb      	ldr	r3, [r7, #12]
    76e0:	89db      	ldrh	r3, [r3, #14]
    76e2:	b29a      	uxth	r2, r3
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    76e8:	2300      	movs	r3, #0
}
    76ea:	4618      	mov	r0, r3
    76ec:	3710      	adds	r7, #16
    76ee:	46bd      	mov	sp, r7
    76f0:	bd80      	pop	{r7, pc}
    76f2:	bf00      	nop
    76f4:	00007545 	.word	0x00007545
    76f8:	000101d8 	.word	0x000101d8
    76fc:	00003ba1 	.word	0x00003ba1
    7700:	000061ad 	.word	0x000061ad
    7704:	000063fd 	.word	0x000063fd
    7708:	000063d5 	.word	0x000063d5
    770c:	00006189 	.word	0x00006189
    7710:	0000642d 	.word	0x0000642d
    7714:	00007499 	.word	0x00007499
    7718:	00007405 	.word	0x00007405

0000771c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    771c:	b580      	push	{r7, lr}
    771e:	b082      	sub	sp, #8
    7720:	af00      	add	r7, sp, #0
    7722:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7724:	687b      	ldr	r3, [r7, #4]
    7726:	2b00      	cmp	r3, #0
    7728:	d005      	beq.n	7736 <_spi_m_sync_enable+0x1a>
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	681b      	ldr	r3, [r3, #0]
    772e:	2b00      	cmp	r3, #0
    7730:	d001      	beq.n	7736 <_spi_m_sync_enable+0x1a>
    7732:	2301      	movs	r3, #1
    7734:	e000      	b.n	7738 <_spi_m_sync_enable+0x1c>
    7736:	2300      	movs	r3, #0
    7738:	f003 0301 	and.w	r3, r3, #1
    773c:	b2db      	uxtb	r3, r3
    773e:	f640 12eb 	movw	r2, #2539	; 0x9eb
    7742:	4907      	ldr	r1, [pc, #28]	; (7760 <_spi_m_sync_enable+0x44>)
    7744:	4618      	mov	r0, r3
    7746:	4b07      	ldr	r3, [pc, #28]	; (7764 <_spi_m_sync_enable+0x48>)
    7748:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	681b      	ldr	r3, [r3, #0]
    774e:	4618      	mov	r0, r3
    7750:	4b05      	ldr	r3, [pc, #20]	; (7768 <_spi_m_sync_enable+0x4c>)
    7752:	4798      	blx	r3
    7754:	4603      	mov	r3, r0
}
    7756:	4618      	mov	r0, r3
    7758:	3708      	adds	r7, #8
    775a:	46bd      	mov	sp, r7
    775c:	bd80      	pop	{r7, pc}
    775e:	bf00      	nop
    7760:	000101d8 	.word	0x000101d8
    7764:	00003ba1 	.word	0x00003ba1
    7768:	0000739d 	.word	0x0000739d

0000776c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    776c:	b580      	push	{r7, lr}
    776e:	b082      	sub	sp, #8
    7770:	af00      	add	r7, sp, #0
    7772:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	2b00      	cmp	r3, #0
    7778:	d005      	beq.n	7786 <_spi_m_sync_disable+0x1a>
    777a:	687b      	ldr	r3, [r7, #4]
    777c:	681b      	ldr	r3, [r3, #0]
    777e:	2b00      	cmp	r3, #0
    7780:	d001      	beq.n	7786 <_spi_m_sync_disable+0x1a>
    7782:	2301      	movs	r3, #1
    7784:	e000      	b.n	7788 <_spi_m_sync_disable+0x1c>
    7786:	2300      	movs	r3, #0
    7788:	f003 0301 	and.w	r3, r3, #1
    778c:	b2db      	uxtb	r3, r3
    778e:	f640 2207 	movw	r2, #2567	; 0xa07
    7792:	4907      	ldr	r1, [pc, #28]	; (77b0 <_spi_m_sync_disable+0x44>)
    7794:	4618      	mov	r0, r3
    7796:	4b07      	ldr	r3, [pc, #28]	; (77b4 <_spi_m_sync_disable+0x48>)
    7798:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	681b      	ldr	r3, [r3, #0]
    779e:	4618      	mov	r0, r3
    77a0:	4b05      	ldr	r3, [pc, #20]	; (77b8 <_spi_m_sync_disable+0x4c>)
    77a2:	4798      	blx	r3
    77a4:	4603      	mov	r3, r0
}
    77a6:	4618      	mov	r0, r3
    77a8:	3708      	adds	r7, #8
    77aa:	46bd      	mov	sp, r7
    77ac:	bd80      	pop	{r7, pc}
    77ae:	bf00      	nop
    77b0:	000101d8 	.word	0x000101d8
    77b4:	00003ba1 	.word	0x00003ba1
    77b8:	000073d1 	.word	0x000073d1

000077bc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    77bc:	b580      	push	{r7, lr}
    77be:	b082      	sub	sp, #8
    77c0:	af00      	add	r7, sp, #0
    77c2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    77c4:	bf00      	nop
    77c6:	2103      	movs	r1, #3
    77c8:	6878      	ldr	r0, [r7, #4]
    77ca:	4b06      	ldr	r3, [pc, #24]	; (77e4 <_spi_wait_bus_idle+0x28>)
    77cc:	4798      	blx	r3
    77ce:	4603      	mov	r3, r0
    77d0:	2b00      	cmp	r3, #0
    77d2:	d0f8      	beq.n	77c6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    77d4:	2103      	movs	r1, #3
    77d6:	6878      	ldr	r0, [r7, #4]
    77d8:	4b03      	ldr	r3, [pc, #12]	; (77e8 <_spi_wait_bus_idle+0x2c>)
    77da:	4798      	blx	r3
}
    77dc:	bf00      	nop
    77de:	3708      	adds	r7, #8
    77e0:	46bd      	mov	sp, r7
    77e2:	bd80      	pop	{r7, pc}
    77e4:	00006241 	.word	0x00006241
    77e8:	00006283 	.word	0x00006283

000077ec <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    77ec:	b580      	push	{r7, lr}
    77ee:	b086      	sub	sp, #24
    77f0:	af00      	add	r7, sp, #0
    77f2:	60f8      	str	r0, [r7, #12]
    77f4:	60b9      	str	r1, [r7, #8]
    77f6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    77f8:	68bb      	ldr	r3, [r7, #8]
    77fa:	f003 0304 	and.w	r3, r3, #4
    77fe:	2b00      	cmp	r3, #0
    7800:	d101      	bne.n	7806 <_spi_rx_check_and_receive+0x1a>
		return false;
    7802:	2300      	movs	r3, #0
    7804:	e022      	b.n	784c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7806:	68f8      	ldr	r0, [r7, #12]
    7808:	4b12      	ldr	r3, [pc, #72]	; (7854 <_spi_rx_check_and_receive+0x68>)
    780a:	4798      	blx	r3
    780c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    780e:	687b      	ldr	r3, [r7, #4]
    7810:	685b      	ldr	r3, [r3, #4]
    7812:	2b00      	cmp	r3, #0
    7814:	d014      	beq.n	7840 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	685b      	ldr	r3, [r3, #4]
    781a:	1c59      	adds	r1, r3, #1
    781c:	687a      	ldr	r2, [r7, #4]
    781e:	6051      	str	r1, [r2, #4]
    7820:	697a      	ldr	r2, [r7, #20]
    7822:	b2d2      	uxtb	r2, r2
    7824:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	7c1b      	ldrb	r3, [r3, #16]
    782a:	2b01      	cmp	r3, #1
    782c:	d908      	bls.n	7840 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    782e:	687b      	ldr	r3, [r7, #4]
    7830:	685b      	ldr	r3, [r3, #4]
    7832:	1c59      	adds	r1, r3, #1
    7834:	687a      	ldr	r2, [r7, #4]
    7836:	6051      	str	r1, [r2, #4]
    7838:	697a      	ldr	r2, [r7, #20]
    783a:	0a12      	lsrs	r2, r2, #8
    783c:	b2d2      	uxtb	r2, r2
    783e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	68db      	ldr	r3, [r3, #12]
    7844:	1c5a      	adds	r2, r3, #1
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	60da      	str	r2, [r3, #12]

	return true;
    784a:	2301      	movs	r3, #1
}
    784c:	4618      	mov	r0, r3
    784e:	3718      	adds	r7, #24
    7850:	46bd      	mov	sp, r7
    7852:	bd80      	pop	{r7, pc}
    7854:	000066a5 	.word	0x000066a5

00007858 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    7858:	b580      	push	{r7, lr}
    785a:	b086      	sub	sp, #24
    785c:	af00      	add	r7, sp, #0
    785e:	60f8      	str	r0, [r7, #12]
    7860:	60b9      	str	r1, [r7, #8]
    7862:	607a      	str	r2, [r7, #4]
    7864:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    7866:	68bb      	ldr	r3, [r7, #8]
    7868:	f003 0301 	and.w	r3, r3, #1
    786c:	2b00      	cmp	r3, #0
    786e:	d028      	beq.n	78c2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	681b      	ldr	r3, [r3, #0]
    7874:	2b00      	cmp	r3, #0
    7876:	d018      	beq.n	78aa <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	1c59      	adds	r1, r3, #1
    787e:	687a      	ldr	r2, [r7, #4]
    7880:	6011      	str	r1, [r2, #0]
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	7c1b      	ldrb	r3, [r3, #16]
    788a:	2b01      	cmp	r3, #1
    788c:	d90f      	bls.n	78ae <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	681b      	ldr	r3, [r3, #0]
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	021b      	lsls	r3, r3, #8
    7896:	461a      	mov	r2, r3
    7898:	697b      	ldr	r3, [r7, #20]
    789a:	4313      	orrs	r3, r2
    789c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	681b      	ldr	r3, [r3, #0]
    78a2:	1c5a      	adds	r2, r3, #1
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	601a      	str	r2, [r3, #0]
    78a8:	e001      	b.n	78ae <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    78aa:	887b      	ldrh	r3, [r7, #2]
    78ac:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	689b      	ldr	r3, [r3, #8]
    78b2:	1c5a      	adds	r2, r3, #1
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    78b8:	6979      	ldr	r1, [r7, #20]
    78ba:	68f8      	ldr	r0, [r7, #12]
    78bc:	4b03      	ldr	r3, [pc, #12]	; (78cc <_spi_tx_check_and_send+0x74>)
    78be:	4798      	blx	r3
    78c0:	e000      	b.n	78c4 <_spi_tx_check_and_send+0x6c>
		return;
    78c2:	bf00      	nop
}
    78c4:	3718      	adds	r7, #24
    78c6:	46bd      	mov	sp, r7
    78c8:	bd80      	pop	{r7, pc}
    78ca:	bf00      	nop
    78cc:	00006689 	.word	0x00006689

000078d0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    78d0:	b580      	push	{r7, lr}
    78d2:	b082      	sub	sp, #8
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
    78d8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    78e0:	2b00      	cmp	r3, #0
    78e2:	d00b      	beq.n	78fc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    78e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    78e8:	6838      	ldr	r0, [r7, #0]
    78ea:	4b07      	ldr	r3, [pc, #28]	; (7908 <_spi_err_check+0x38>)
    78ec:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    78ee:	2180      	movs	r1, #128	; 0x80
    78f0:	6838      	ldr	r0, [r7, #0]
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <_spi_err_check+0x3c>)
    78f4:	4798      	blx	r3
		return ERR_OVERFLOW;
    78f6:	f06f 0312 	mvn.w	r3, #18
    78fa:	e000      	b.n	78fe <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    78fc:	2300      	movs	r3, #0
}
    78fe:	4618      	mov	r0, r3
    7900:	3708      	adds	r7, #8
    7902:	46bd      	mov	sp, r7
    7904:	bd80      	pop	{r7, pc}
    7906:	bf00      	nop
    7908:	000066dd 	.word	0x000066dd
    790c:	00006283 	.word	0x00006283

00007910 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7910:	b590      	push	{r4, r7, lr}
    7912:	b08b      	sub	sp, #44	; 0x2c
    7914:	af00      	add	r7, sp, #0
    7916:	6078      	str	r0, [r7, #4]
    7918:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    791a:	687b      	ldr	r3, [r7, #4]
    791c:	681b      	ldr	r3, [r3, #0]
    791e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7920:	2300      	movs	r3, #0
    7922:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7924:	683b      	ldr	r3, [r7, #0]
    7926:	681b      	ldr	r3, [r3, #0]
    7928:	60bb      	str	r3, [r7, #8]
    792a:	683b      	ldr	r3, [r7, #0]
    792c:	685b      	ldr	r3, [r3, #4]
    792e:	60fb      	str	r3, [r7, #12]
    7930:	2300      	movs	r3, #0
    7932:	613b      	str	r3, [r7, #16]
    7934:	2300      	movs	r3, #0
    7936:	617b      	str	r3, [r7, #20]
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	791b      	ldrb	r3, [r3, #4]
    793c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    793e:	687b      	ldr	r3, [r7, #4]
    7940:	2b00      	cmp	r3, #0
    7942:	d004      	beq.n	794e <_spi_m_sync_trans+0x3e>
    7944:	6a3b      	ldr	r3, [r7, #32]
    7946:	2b00      	cmp	r3, #0
    7948:	d001      	beq.n	794e <_spi_m_sync_trans+0x3e>
    794a:	2301      	movs	r3, #1
    794c:	e000      	b.n	7950 <_spi_m_sync_trans+0x40>
    794e:	2300      	movs	r3, #0
    7950:	f003 0301 	and.w	r3, r3, #1
    7954:	b2db      	uxtb	r3, r3
    7956:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    795a:	492b      	ldr	r1, [pc, #172]	; (7a08 <_spi_m_sync_trans+0xf8>)
    795c:	4618      	mov	r0, r3
    795e:	4b2b      	ldr	r3, [pc, #172]	; (7a0c <_spi_m_sync_trans+0xfc>)
    7960:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7962:	2107      	movs	r1, #7
    7964:	6a38      	ldr	r0, [r7, #32]
    7966:	4b2a      	ldr	r3, [pc, #168]	; (7a10 <_spi_m_sync_trans+0x100>)
    7968:	4798      	blx	r3
    796a:	4603      	mov	r3, r0
    796c:	2b00      	cmp	r3, #0
    796e:	d002      	beq.n	7976 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7970:	f06f 0303 	mvn.w	r3, #3
    7974:	e043      	b.n	79fe <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7976:	6a38      	ldr	r0, [r7, #32]
    7978:	4b26      	ldr	r3, [pc, #152]	; (7a14 <_spi_m_sync_trans+0x104>)
    797a:	4798      	blx	r3
    797c:	4603      	mov	r3, r0
    797e:	f083 0301 	eor.w	r3, r3, #1
    7982:	b2db      	uxtb	r3, r3
    7984:	2b00      	cmp	r3, #0
    7986:	d002      	beq.n	798e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7988:	f06f 0313 	mvn.w	r3, #19
    798c:	e037      	b.n	79fe <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    798e:	6a38      	ldr	r0, [r7, #32]
    7990:	4b21      	ldr	r3, [pc, #132]	; (7a18 <_spi_m_sync_trans+0x108>)
    7992:	4798      	blx	r3
    7994:	4603      	mov	r3, r0
    7996:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7998:	f107 0308 	add.w	r3, r7, #8
    799c:	461a      	mov	r2, r3
    799e:	69f9      	ldr	r1, [r7, #28]
    79a0:	6a38      	ldr	r0, [r7, #32]
    79a2:	4b1e      	ldr	r3, [pc, #120]	; (7a1c <_spi_m_sync_trans+0x10c>)
    79a4:	4798      	blx	r3
    79a6:	4603      	mov	r3, r0
    79a8:	f083 0301 	eor.w	r3, r3, #1
    79ac:	b2db      	uxtb	r3, r3
    79ae:	2b00      	cmp	r3, #0
    79b0:	d00b      	beq.n	79ca <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    79b2:	697a      	ldr	r2, [r7, #20]
    79b4:	693b      	ldr	r3, [r7, #16]
    79b6:	429a      	cmp	r2, r3
    79b8:	d307      	bcc.n	79ca <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	88db      	ldrh	r3, [r3, #6]
    79be:	f107 0208 	add.w	r2, r7, #8
    79c2:	69f9      	ldr	r1, [r7, #28]
    79c4:	6a38      	ldr	r0, [r7, #32]
    79c6:	4c16      	ldr	r4, [pc, #88]	; (7a20 <_spi_m_sync_trans+0x110>)
    79c8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    79ca:	6a39      	ldr	r1, [r7, #32]
    79cc:	69f8      	ldr	r0, [r7, #28]
    79ce:	4b15      	ldr	r3, [pc, #84]	; (7a24 <_spi_m_sync_trans+0x114>)
    79d0:	4798      	blx	r3
    79d2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    79d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    79d6:	2b00      	cmp	r3, #0
    79d8:	db0c      	blt.n	79f4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    79da:	693a      	ldr	r2, [r7, #16]
    79dc:	683b      	ldr	r3, [r7, #0]
    79de:	689b      	ldr	r3, [r3, #8]
    79e0:	429a      	cmp	r2, r3
    79e2:	d3d4      	bcc.n	798e <_spi_m_sync_trans+0x7e>
    79e4:	697a      	ldr	r2, [r7, #20]
    79e6:	683b      	ldr	r3, [r7, #0]
    79e8:	689b      	ldr	r3, [r3, #8]
    79ea:	429a      	cmp	r2, r3
    79ec:	d3cf      	bcc.n	798e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    79ee:	693b      	ldr	r3, [r7, #16]
    79f0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    79f2:	e000      	b.n	79f6 <_spi_m_sync_trans+0xe6>
			break;
    79f4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    79f6:	6a38      	ldr	r0, [r7, #32]
    79f8:	4b0b      	ldr	r3, [pc, #44]	; (7a28 <_spi_m_sync_trans+0x118>)
    79fa:	4798      	blx	r3

	return rc;
    79fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    79fe:	4618      	mov	r0, r3
    7a00:	372c      	adds	r7, #44	; 0x2c
    7a02:	46bd      	mov	sp, r7
    7a04:	bd90      	pop	{r4, r7, pc}
    7a06:	bf00      	nop
    7a08:	000101d8 	.word	0x000101d8
    7a0c:	00003ba1 	.word	0x00003ba1
    7a10:	000061ad 	.word	0x000061ad
    7a14:	0000639d 	.word	0x0000639d
    7a18:	00006269 	.word	0x00006269
    7a1c:	000077ed 	.word	0x000077ed
    7a20:	00007859 	.word	0x00007859
    7a24:	000078d1 	.word	0x000078d1
    7a28:	000077bd 	.word	0x000077bd

00007a2c <__NVIC_EnableIRQ>:
{
    7a2c:	b480      	push	{r7}
    7a2e:	b083      	sub	sp, #12
    7a30:	af00      	add	r7, sp, #0
    7a32:	4603      	mov	r3, r0
    7a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	db0b      	blt.n	7a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a3e:	4909      	ldr	r1, [pc, #36]	; (7a64 <__NVIC_EnableIRQ+0x38>)
    7a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a44:	095b      	lsrs	r3, r3, #5
    7a46:	88fa      	ldrh	r2, [r7, #6]
    7a48:	f002 021f 	and.w	r2, r2, #31
    7a4c:	2001      	movs	r0, #1
    7a4e:	fa00 f202 	lsl.w	r2, r0, r2
    7a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a56:	bf00      	nop
    7a58:	370c      	adds	r7, #12
    7a5a:	46bd      	mov	sp, r7
    7a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a60:	4770      	bx	lr
    7a62:	bf00      	nop
    7a64:	e000e100 	.word	0xe000e100

00007a68 <__NVIC_DisableIRQ>:
{
    7a68:	b480      	push	{r7}
    7a6a:	b083      	sub	sp, #12
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	4603      	mov	r3, r0
    7a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a76:	2b00      	cmp	r3, #0
    7a78:	db10      	blt.n	7a9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a7a:	490b      	ldr	r1, [pc, #44]	; (7aa8 <__NVIC_DisableIRQ+0x40>)
    7a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a80:	095b      	lsrs	r3, r3, #5
    7a82:	88fa      	ldrh	r2, [r7, #6]
    7a84:	f002 021f 	and.w	r2, r2, #31
    7a88:	2001      	movs	r0, #1
    7a8a:	fa00 f202 	lsl.w	r2, r0, r2
    7a8e:	3320      	adds	r3, #32
    7a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7a94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7a98:	f3bf 8f6f 	isb	sy
}
    7a9c:	bf00      	nop
    7a9e:	370c      	adds	r7, #12
    7aa0:	46bd      	mov	sp, r7
    7aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa6:	4770      	bx	lr
    7aa8:	e000e100 	.word	0xe000e100

00007aac <__NVIC_ClearPendingIRQ>:
{
    7aac:	b480      	push	{r7}
    7aae:	b083      	sub	sp, #12
    7ab0:	af00      	add	r7, sp, #0
    7ab2:	4603      	mov	r3, r0
    7ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7aba:	2b00      	cmp	r3, #0
    7abc:	db0c      	blt.n	7ad8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7abe:	4909      	ldr	r1, [pc, #36]	; (7ae4 <__NVIC_ClearPendingIRQ+0x38>)
    7ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ac4:	095b      	lsrs	r3, r3, #5
    7ac6:	88fa      	ldrh	r2, [r7, #6]
    7ac8:	f002 021f 	and.w	r2, r2, #31
    7acc:	2001      	movs	r0, #1
    7ace:	fa00 f202 	lsl.w	r2, r0, r2
    7ad2:	3360      	adds	r3, #96	; 0x60
    7ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ad8:	bf00      	nop
    7ada:	370c      	adds	r7, #12
    7adc:	46bd      	mov	sp, r7
    7ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae2:	4770      	bx	lr
    7ae4:	e000e100 	.word	0xe000e100

00007ae8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7af2:	bf00      	nop
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	689a      	ldr	r2, [r3, #8]
    7af8:	683b      	ldr	r3, [r7, #0]
    7afa:	4013      	ands	r3, r2
    7afc:	2b00      	cmp	r3, #0
    7afe:	d1f9      	bne.n	7af4 <hri_tcc_wait_for_sync+0xc>
	};
}
    7b00:	bf00      	nop
    7b02:	370c      	adds	r7, #12
    7b04:	46bd      	mov	sp, r7
    7b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b0a:	4770      	bx	lr

00007b0c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7b0c:	b480      	push	{r7}
    7b0e:	b083      	sub	sp, #12
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
    7b14:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	689a      	ldr	r2, [r3, #8]
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	4013      	ands	r3, r2
    7b1e:	2b00      	cmp	r3, #0
    7b20:	bf14      	ite	ne
    7b22:	2301      	movne	r3, #1
    7b24:	2300      	moveq	r3, #0
    7b26:	b2db      	uxtb	r3, r3
}
    7b28:	4618      	mov	r0, r3
    7b2a:	370c      	adds	r7, #12
    7b2c:	46bd      	mov	sp, r7
    7b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b32:	4770      	bx	lr

00007b34 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7b34:	b480      	push	{r7}
    7b36:	b083      	sub	sp, #12
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b40:	f003 0301 	and.w	r3, r3, #1
    7b44:	2b00      	cmp	r3, #0
    7b46:	bf14      	ite	ne
    7b48:	2301      	movne	r3, #1
    7b4a:	2300      	moveq	r3, #0
    7b4c:	b2db      	uxtb	r3, r3
}
    7b4e:	4618      	mov	r0, r3
    7b50:	370c      	adds	r7, #12
    7b52:	46bd      	mov	sp, r7
    7b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b58:	4770      	bx	lr

00007b5a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7b5a:	b480      	push	{r7}
    7b5c:	b083      	sub	sp, #12
    7b5e:	af00      	add	r7, sp, #0
    7b60:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	2201      	movs	r2, #1
    7b66:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7b68:	bf00      	nop
    7b6a:	370c      	adds	r7, #12
    7b6c:	46bd      	mov	sp, r7
    7b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b72:	4770      	bx	lr

00007b74 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7b74:	b480      	push	{r7}
    7b76:	b083      	sub	sp, #12
    7b78:	af00      	add	r7, sp, #0
    7b7a:	6078      	str	r0, [r7, #4]
    7b7c:	460b      	mov	r3, r1
    7b7e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	78fa      	ldrb	r2, [r7, #3]
    7b84:	715a      	strb	r2, [r3, #5]
}
    7b86:	bf00      	nop
    7b88:	370c      	adds	r7, #12
    7b8a:	46bd      	mov	sp, r7
    7b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b90:	4770      	bx	lr

00007b92 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7b92:	b480      	push	{r7}
    7b94:	b083      	sub	sp, #12
    7b96:	af00      	add	r7, sp, #0
    7b98:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	2201      	movs	r2, #1
    7b9e:	629a      	str	r2, [r3, #40]	; 0x28
}
    7ba0:	bf00      	nop
    7ba2:	370c      	adds	r7, #12
    7ba4:	46bd      	mov	sp, r7
    7ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7baa:	4770      	bx	lr

00007bac <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7bac:	b580      	push	{r7, lr}
    7bae:	b082      	sub	sp, #8
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	f043 0201 	orr.w	r2, r3, #1
    7bbc:	687b      	ldr	r3, [r7, #4]
    7bbe:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7bc0:	2101      	movs	r1, #1
    7bc2:	6878      	ldr	r0, [r7, #4]
    7bc4:	4b02      	ldr	r3, [pc, #8]	; (7bd0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7bc6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bc8:	bf00      	nop
    7bca:	3708      	adds	r7, #8
    7bcc:	46bd      	mov	sp, r7
    7bce:	bd80      	pop	{r7, pc}
    7bd0:	00007ae9 	.word	0x00007ae9

00007bd4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7bd4:	b580      	push	{r7, lr}
    7bd6:	b082      	sub	sp, #8
    7bd8:	af00      	add	r7, sp, #0
    7bda:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	f043 0202 	orr.w	r2, r3, #2
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7be8:	2103      	movs	r1, #3
    7bea:	6878      	ldr	r0, [r7, #4]
    7bec:	4b02      	ldr	r3, [pc, #8]	; (7bf8 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7bee:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bf0:	bf00      	nop
    7bf2:	3708      	adds	r7, #8
    7bf4:	46bd      	mov	sp, r7
    7bf6:	bd80      	pop	{r7, pc}
    7bf8:	00007ae9 	.word	0x00007ae9

00007bfc <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b084      	sub	sp, #16
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c04:	2103      	movs	r1, #3
    7c06:	6878      	ldr	r0, [r7, #4]
    7c08:	4b09      	ldr	r3, [pc, #36]	; (7c30 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7c0a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7c12:	68fb      	ldr	r3, [r7, #12]
    7c14:	085b      	lsrs	r3, r3, #1
    7c16:	f003 0301 	and.w	r3, r3, #1
    7c1a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	bf14      	ite	ne
    7c22:	2301      	movne	r3, #1
    7c24:	2300      	moveq	r3, #0
    7c26:	b2db      	uxtb	r3, r3
}
    7c28:	4618      	mov	r0, r3
    7c2a:	3710      	adds	r7, #16
    7c2c:	46bd      	mov	sp, r7
    7c2e:	bd80      	pop	{r7, pc}
    7c30:	00007ae9 	.word	0x00007ae9

00007c34 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b082      	sub	sp, #8
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	681b      	ldr	r3, [r3, #0]
    7c40:	f023 0202 	bic.w	r2, r3, #2
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c48:	2103      	movs	r1, #3
    7c4a:	6878      	ldr	r0, [r7, #4]
    7c4c:	4b02      	ldr	r3, [pc, #8]	; (7c58 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7c4e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c50:	bf00      	nop
    7c52:	3708      	adds	r7, #8
    7c54:	46bd      	mov	sp, r7
    7c56:	bd80      	pop	{r7, pc}
    7c58:	00007ae9 	.word	0x00007ae9

00007c5c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7c5c:	b580      	push	{r7, lr}
    7c5e:	b084      	sub	sp, #16
    7c60:	af00      	add	r7, sp, #0
    7c62:	6078      	str	r0, [r7, #4]
    7c64:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c66:	2103      	movs	r1, #3
    7c68:	6878      	ldr	r0, [r7, #4]
    7c6a:	4b07      	ldr	r3, [pc, #28]	; (7c88 <hri_tcc_get_CTRLA_reg+0x2c>)
    7c6c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c74:	68fa      	ldr	r2, [r7, #12]
    7c76:	683b      	ldr	r3, [r7, #0]
    7c78:	4013      	ands	r3, r2
    7c7a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c7c:	68fb      	ldr	r3, [r7, #12]
}
    7c7e:	4618      	mov	r0, r3
    7c80:	3710      	adds	r7, #16
    7c82:	46bd      	mov	sp, r7
    7c84:	bd80      	pop	{r7, pc}
    7c86:	bf00      	nop
    7c88:	00007ae9 	.word	0x00007ae9

00007c8c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	b082      	sub	sp, #8
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
    7c94:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	683a      	ldr	r2, [r7, #0]
    7c9a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c9c:	2103      	movs	r1, #3
    7c9e:	6878      	ldr	r0, [r7, #4]
    7ca0:	4b02      	ldr	r3, [pc, #8]	; (7cac <hri_tcc_write_CTRLA_reg+0x20>)
    7ca2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7ca4:	bf00      	nop
    7ca6:	3708      	adds	r7, #8
    7ca8:	46bd      	mov	sp, r7
    7caa:	bd80      	pop	{r7, pc}
    7cac:	00007ae9 	.word	0x00007ae9

00007cb0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7cb0:	b480      	push	{r7}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	460b      	mov	r3, r1
    7cba:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	78fa      	ldrb	r2, [r7, #3]
    7cc0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cc2:	bf00      	nop
    7cc4:	370c      	adds	r7, #12
    7cc6:	46bd      	mov	sp, r7
    7cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ccc:	4770      	bx	lr

00007cce <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7cce:	b480      	push	{r7}
    7cd0:	b083      	sub	sp, #12
    7cd2:	af00      	add	r7, sp, #0
    7cd4:	6078      	str	r0, [r7, #4]
    7cd6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	683a      	ldr	r2, [r7, #0]
    7cdc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7cde:	bf00      	nop
    7ce0:	370c      	adds	r7, #12
    7ce2:	46bd      	mov	sp, r7
    7ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ce8:	4770      	bx	lr
	...

00007cec <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7cec:	b580      	push	{r7, lr}
    7cee:	b082      	sub	sp, #8
    7cf0:	af00      	add	r7, sp, #0
    7cf2:	6078      	str	r0, [r7, #4]
    7cf4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	683a      	ldr	r2, [r7, #0]
    7cfa:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7cfc:	2180      	movs	r1, #128	; 0x80
    7cfe:	6878      	ldr	r0, [r7, #4]
    7d00:	4b02      	ldr	r3, [pc, #8]	; (7d0c <hri_tcc_write_PER_reg+0x20>)
    7d02:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7d04:	bf00      	nop
    7d06:	3708      	adds	r7, #8
    7d08:	46bd      	mov	sp, r7
    7d0a:	bd80      	pop	{r7, pc}
    7d0c:	00007ae9 	.word	0x00007ae9

00007d10 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7d10:	b580      	push	{r7, lr}
    7d12:	b082      	sub	sp, #8
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7d18:	2180      	movs	r1, #128	; 0x80
    7d1a:	6878      	ldr	r0, [r7, #4]
    7d1c:	4b03      	ldr	r3, [pc, #12]	; (7d2c <hri_tcc_read_PER_reg+0x1c>)
    7d1e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7d24:	4618      	mov	r0, r3
    7d26:	3708      	adds	r7, #8
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	00007ae9 	.word	0x00007ae9

00007d30 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7d30:	b480      	push	{r7}
    7d32:	b083      	sub	sp, #12
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
    7d38:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	4a09      	ldr	r2, [pc, #36]	; (7d64 <_tcc_init_irq_param+0x34>)
    7d3e:	4293      	cmp	r3, r2
    7d40:	d102      	bne.n	7d48 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7d42:	4a09      	ldr	r2, [pc, #36]	; (7d68 <_tcc_init_irq_param+0x38>)
    7d44:	683b      	ldr	r3, [r7, #0]
    7d46:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	4a08      	ldr	r2, [pc, #32]	; (7d6c <_tcc_init_irq_param+0x3c>)
    7d4c:	4293      	cmp	r3, r2
    7d4e:	d102      	bne.n	7d56 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7d50:	4a07      	ldr	r2, [pc, #28]	; (7d70 <_tcc_init_irq_param+0x40>)
    7d52:	683b      	ldr	r3, [r7, #0]
    7d54:	6013      	str	r3, [r2, #0]
	}
}
    7d56:	bf00      	nop
    7d58:	370c      	adds	r7, #12
    7d5a:	46bd      	mov	sp, r7
    7d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d60:	4770      	bx	lr
    7d62:	bf00      	nop
    7d64:	41016000 	.word	0x41016000
    7d68:	20000a84 	.word	0x20000a84
    7d6c:	41018000 	.word	0x41018000
    7d70:	20000a88 	.word	0x20000a88

00007d74 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b084      	sub	sp, #16
    7d78:	af00      	add	r7, sp, #0
    7d7a:	6078      	str	r0, [r7, #4]
    7d7c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7d7e:	6838      	ldr	r0, [r7, #0]
    7d80:	4b33      	ldr	r3, [pc, #204]	; (7e50 <_tcc_timer_init+0xdc>)
    7d82:	4798      	blx	r3
    7d84:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7d86:	68fb      	ldr	r3, [r7, #12]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d102      	bne.n	7d92 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7d8c:	f06f 0309 	mvn.w	r3, #9
    7d90:	e05a      	b.n	7e48 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	683a      	ldr	r2, [r7, #0]
    7d96:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7d98:	2101      	movs	r1, #1
    7d9a:	6838      	ldr	r0, [r7, #0]
    7d9c:	4b2d      	ldr	r3, [pc, #180]	; (7e54 <_tcc_timer_init+0xe0>)
    7d9e:	4798      	blx	r3
    7da0:	4603      	mov	r3, r0
    7da2:	f083 0301 	eor.w	r3, r3, #1
    7da6:	b2db      	uxtb	r3, r3
    7da8:	2b00      	cmp	r3, #0
    7daa:	d011      	beq.n	7dd0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7dac:	2102      	movs	r1, #2
    7dae:	6838      	ldr	r0, [r7, #0]
    7db0:	4b29      	ldr	r3, [pc, #164]	; (7e58 <_tcc_timer_init+0xe4>)
    7db2:	4798      	blx	r3
    7db4:	4603      	mov	r3, r0
    7db6:	2b00      	cmp	r3, #0
    7db8:	d006      	beq.n	7dc8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7dba:	6838      	ldr	r0, [r7, #0]
    7dbc:	4b27      	ldr	r3, [pc, #156]	; (7e5c <_tcc_timer_init+0xe8>)
    7dbe:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7dc0:	2102      	movs	r1, #2
    7dc2:	6838      	ldr	r0, [r7, #0]
    7dc4:	4b26      	ldr	r3, [pc, #152]	; (7e60 <_tcc_timer_init+0xec>)
    7dc6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7dc8:	2101      	movs	r1, #1
    7dca:	6838      	ldr	r0, [r7, #0]
    7dcc:	4b25      	ldr	r3, [pc, #148]	; (7e64 <_tcc_timer_init+0xf0>)
    7dce:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7dd0:	2101      	movs	r1, #1
    7dd2:	6838      	ldr	r0, [r7, #0]
    7dd4:	4b22      	ldr	r3, [pc, #136]	; (7e60 <_tcc_timer_init+0xec>)
    7dd6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7dd8:	68fb      	ldr	r3, [r7, #12]
    7dda:	689b      	ldr	r3, [r3, #8]
    7ddc:	4619      	mov	r1, r3
    7dde:	6838      	ldr	r0, [r7, #0]
    7de0:	4b20      	ldr	r3, [pc, #128]	; (7e64 <_tcc_timer_init+0xf0>)
    7de2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7de4:	68fb      	ldr	r3, [r7, #12]
    7de6:	7b1b      	ldrb	r3, [r3, #12]
    7de8:	4619      	mov	r1, r3
    7dea:	6838      	ldr	r0, [r7, #0]
    7dec:	4b1e      	ldr	r3, [pc, #120]	; (7e68 <_tcc_timer_init+0xf4>)
    7dee:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7df0:	68fb      	ldr	r3, [r7, #12]
    7df2:	7b5b      	ldrb	r3, [r3, #13]
    7df4:	4619      	mov	r1, r3
    7df6:	6838      	ldr	r0, [r7, #0]
    7df8:	4b1c      	ldr	r3, [pc, #112]	; (7e6c <_tcc_timer_init+0xf8>)
    7dfa:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7dfc:	68fb      	ldr	r3, [r7, #12]
    7dfe:	691b      	ldr	r3, [r3, #16]
    7e00:	4619      	mov	r1, r3
    7e02:	6838      	ldr	r0, [r7, #0]
    7e04:	4b1a      	ldr	r3, [pc, #104]	; (7e70 <_tcc_timer_init+0xfc>)
    7e06:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e0c:	4619      	mov	r1, r3
    7e0e:	6838      	ldr	r0, [r7, #0]
    7e10:	4b18      	ldr	r3, [pc, #96]	; (7e74 <_tcc_timer_init+0x100>)
    7e12:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7e14:	6838      	ldr	r0, [r7, #0]
    7e16:	4b18      	ldr	r3, [pc, #96]	; (7e78 <_tcc_timer_init+0x104>)
    7e18:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7e1a:	6879      	ldr	r1, [r7, #4]
    7e1c:	6838      	ldr	r0, [r7, #0]
    7e1e:	4b17      	ldr	r3, [pc, #92]	; (7e7c <_tcc_timer_init+0x108>)
    7e20:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7e22:	68fb      	ldr	r3, [r7, #12]
    7e24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e28:	4618      	mov	r0, r3
    7e2a:	4b15      	ldr	r3, [pc, #84]	; (7e80 <_tcc_timer_init+0x10c>)
    7e2c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7e2e:	68fb      	ldr	r3, [r7, #12]
    7e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e34:	4618      	mov	r0, r3
    7e36:	4b13      	ldr	r3, [pc, #76]	; (7e84 <_tcc_timer_init+0x110>)
    7e38:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7e3a:	68fb      	ldr	r3, [r7, #12]
    7e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e40:	4618      	mov	r0, r3
    7e42:	4b11      	ldr	r3, [pc, #68]	; (7e88 <_tcc_timer_init+0x114>)
    7e44:	4798      	blx	r3

	return ERR_NONE;
    7e46:	2300      	movs	r3, #0
}
    7e48:	4618      	mov	r0, r3
    7e4a:	3710      	adds	r7, #16
    7e4c:	46bd      	mov	sp, r7
    7e4e:	bd80      	pop	{r7, pc}
    7e50:	0000803d 	.word	0x0000803d
    7e54:	00007b0d 	.word	0x00007b0d
    7e58:	00007c5d 	.word	0x00007c5d
    7e5c:	00007c35 	.word	0x00007c35
    7e60:	00007ae9 	.word	0x00007ae9
    7e64:	00007c8d 	.word	0x00007c8d
    7e68:	00007b75 	.word	0x00007b75
    7e6c:	00007cb1 	.word	0x00007cb1
    7e70:	00007ccf 	.word	0x00007ccf
    7e74:	00007ced 	.word	0x00007ced
    7e78:	00007b93 	.word	0x00007b93
    7e7c:	00007d31 	.word	0x00007d31
    7e80:	00007a69 	.word	0x00007a69
    7e84:	00007aad 	.word	0x00007aad
    7e88:	00007a2d 	.word	0x00007a2d

00007e8c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	b084      	sub	sp, #16
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	68db      	ldr	r3, [r3, #12]
    7e98:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7e9a:	68f8      	ldr	r0, [r7, #12]
    7e9c:	4b0a      	ldr	r3, [pc, #40]	; (7ec8 <_tcc_timer_deinit+0x3c>)
    7e9e:	4798      	blx	r3
    7ea0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7ea2:	68bb      	ldr	r3, [r7, #8]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d00b      	beq.n	7ec0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7ea8:	68bb      	ldr	r3, [r7, #8]
    7eaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7eae:	4618      	mov	r0, r3
    7eb0:	4b06      	ldr	r3, [pc, #24]	; (7ecc <_tcc_timer_deinit+0x40>)
    7eb2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7eb4:	68f8      	ldr	r0, [r7, #12]
    7eb6:	4b06      	ldr	r3, [pc, #24]	; (7ed0 <_tcc_timer_deinit+0x44>)
    7eb8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7eba:	68f8      	ldr	r0, [r7, #12]
    7ebc:	4b05      	ldr	r3, [pc, #20]	; (7ed4 <_tcc_timer_deinit+0x48>)
    7ebe:	4798      	blx	r3
	}
}
    7ec0:	bf00      	nop
    7ec2:	3710      	adds	r7, #16
    7ec4:	46bd      	mov	sp, r7
    7ec6:	bd80      	pop	{r7, pc}
    7ec8:	0000803d 	.word	0x0000803d
    7ecc:	00007a69 	.word	0x00007a69
    7ed0:	00007c35 	.word	0x00007c35
    7ed4:	00007bad 	.word	0x00007bad

00007ed8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b082      	sub	sp, #8
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	68db      	ldr	r3, [r3, #12]
    7ee4:	4618      	mov	r0, r3
    7ee6:	4b03      	ldr	r3, [pc, #12]	; (7ef4 <_tcc_timer_start+0x1c>)
    7ee8:	4798      	blx	r3
}
    7eea:	bf00      	nop
    7eec:	3708      	adds	r7, #8
    7eee:	46bd      	mov	sp, r7
    7ef0:	bd80      	pop	{r7, pc}
    7ef2:	bf00      	nop
    7ef4:	00007bd5 	.word	0x00007bd5

00007ef8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	68db      	ldr	r3, [r3, #12]
    7f04:	4618      	mov	r0, r3
    7f06:	4b03      	ldr	r3, [pc, #12]	; (7f14 <_tcc_timer_stop+0x1c>)
    7f08:	4798      	blx	r3
}
    7f0a:	bf00      	nop
    7f0c:	3708      	adds	r7, #8
    7f0e:	46bd      	mov	sp, r7
    7f10:	bd80      	pop	{r7, pc}
    7f12:	bf00      	nop
    7f14:	00007c35 	.word	0x00007c35

00007f18 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7f18:	b580      	push	{r7, lr}
    7f1a:	b082      	sub	sp, #8
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
    7f20:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	68db      	ldr	r3, [r3, #12]
    7f26:	6839      	ldr	r1, [r7, #0]
    7f28:	4618      	mov	r0, r3
    7f2a:	4b03      	ldr	r3, [pc, #12]	; (7f38 <_tcc_timer_set_period+0x20>)
    7f2c:	4798      	blx	r3
}
    7f2e:	bf00      	nop
    7f30:	3708      	adds	r7, #8
    7f32:	46bd      	mov	sp, r7
    7f34:	bd80      	pop	{r7, pc}
    7f36:	bf00      	nop
    7f38:	00007ced 	.word	0x00007ced

00007f3c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7f3c:	b580      	push	{r7, lr}
    7f3e:	b082      	sub	sp, #8
    7f40:	af00      	add	r7, sp, #0
    7f42:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	68db      	ldr	r3, [r3, #12]
    7f48:	4618      	mov	r0, r3
    7f4a:	4b03      	ldr	r3, [pc, #12]	; (7f58 <_tcc_timer_get_period+0x1c>)
    7f4c:	4798      	blx	r3
    7f4e:	4603      	mov	r3, r0
}
    7f50:	4618      	mov	r0, r3
    7f52:	3708      	adds	r7, #8
    7f54:	46bd      	mov	sp, r7
    7f56:	bd80      	pop	{r7, pc}
    7f58:	00007d11 	.word	0x00007d11

00007f5c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7f5c:	b580      	push	{r7, lr}
    7f5e:	b082      	sub	sp, #8
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7f64:	687b      	ldr	r3, [r7, #4]
    7f66:	68db      	ldr	r3, [r3, #12]
    7f68:	4618      	mov	r0, r3
    7f6a:	4b03      	ldr	r3, [pc, #12]	; (7f78 <_tcc_timer_is_started+0x1c>)
    7f6c:	4798      	blx	r3
    7f6e:	4603      	mov	r3, r0
}
    7f70:	4618      	mov	r0, r3
    7f72:	3708      	adds	r7, #8
    7f74:	46bd      	mov	sp, r7
    7f76:	bd80      	pop	{r7, pc}
    7f78:	00007bfd 	.word	0x00007bfd

00007f7c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7f7c:	b480      	push	{r7}
    7f7e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7f80:	4b02      	ldr	r3, [pc, #8]	; (7f8c <_tcc_get_timer+0x10>)
}
    7f82:	4618      	mov	r0, r3
    7f84:	46bd      	mov	sp, r7
    7f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f8a:	4770      	bx	lr
    7f8c:	200000c0 	.word	0x200000c0

00007f90 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7f90:	b580      	push	{r7, lr}
    7f92:	b084      	sub	sp, #16
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	68db      	ldr	r3, [r3, #12]
    7f9c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f9e:	68f8      	ldr	r0, [r7, #12]
    7fa0:	4b08      	ldr	r3, [pc, #32]	; (7fc4 <_tcc_timer_set_irq+0x34>)
    7fa2:	4798      	blx	r3
    7fa4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7fa6:	68bb      	ldr	r3, [r7, #8]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d006      	beq.n	7fba <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7fac:	68bb      	ldr	r3, [r7, #8]
    7fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	4618      	mov	r0, r3
    7fb6:	4b04      	ldr	r3, [pc, #16]	; (7fc8 <_tcc_timer_set_irq+0x38>)
    7fb8:	4798      	blx	r3
	}
}
    7fba:	bf00      	nop
    7fbc:	3710      	adds	r7, #16
    7fbe:	46bd      	mov	sp, r7
    7fc0:	bd80      	pop	{r7, pc}
    7fc2:	bf00      	nop
    7fc4:	0000803d 	.word	0x0000803d
    7fc8:	000043ed 	.word	0x000043ed

00007fcc <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7fcc:	b580      	push	{r7, lr}
    7fce:	b084      	sub	sp, #16
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	68db      	ldr	r3, [r3, #12]
    7fd8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7fda:	68f8      	ldr	r0, [r7, #12]
    7fdc:	4b07      	ldr	r3, [pc, #28]	; (7ffc <tcc_interrupt_handler+0x30>)
    7fde:	4798      	blx	r3
    7fe0:	4603      	mov	r3, r0
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d006      	beq.n	7ff4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7fe6:	68f8      	ldr	r0, [r7, #12]
    7fe8:	4b05      	ldr	r3, [pc, #20]	; (8000 <tcc_interrupt_handler+0x34>)
    7fea:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	6878      	ldr	r0, [r7, #4]
    7ff2:	4798      	blx	r3
	}
}
    7ff4:	bf00      	nop
    7ff6:	3710      	adds	r7, #16
    7ff8:	46bd      	mov	sp, r7
    7ffa:	bd80      	pop	{r7, pc}
    7ffc:	00007b35 	.word	0x00007b35
    8000:	00007b5b 	.word	0x00007b5b

00008004 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    8004:	b580      	push	{r7, lr}
    8006:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    8008:	4b03      	ldr	r3, [pc, #12]	; (8018 <TCC0_0_Handler+0x14>)
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	4618      	mov	r0, r3
    800e:	4b03      	ldr	r3, [pc, #12]	; (801c <TCC0_0_Handler+0x18>)
    8010:	4798      	blx	r3
}
    8012:	bf00      	nop
    8014:	bd80      	pop	{r7, pc}
    8016:	bf00      	nop
    8018:	20000a84 	.word	0x20000a84
    801c:	00007fcd 	.word	0x00007fcd

00008020 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    8020:	b580      	push	{r7, lr}
    8022:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    8024:	4b03      	ldr	r3, [pc, #12]	; (8034 <TCC1_0_Handler+0x14>)
    8026:	681b      	ldr	r3, [r3, #0]
    8028:	4618      	mov	r0, r3
    802a:	4b03      	ldr	r3, [pc, #12]	; (8038 <TCC1_0_Handler+0x18>)
    802c:	4798      	blx	r3
}
    802e:	bf00      	nop
    8030:	bd80      	pop	{r7, pc}
    8032:	bf00      	nop
    8034:	20000a88 	.word	0x20000a88
    8038:	00007fcd 	.word	0x00007fcd

0000803c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    803c:	b480      	push	{r7}
    803e:	b085      	sub	sp, #20
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8044:	2300      	movs	r3, #0
    8046:	73fb      	strb	r3, [r7, #15]
    8048:	e015      	b.n	8076 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    804a:	7bfa      	ldrb	r2, [r7, #15]
    804c:	490f      	ldr	r1, [pc, #60]	; (808c <_get_tcc_cfg+0x50>)
    804e:	4613      	mov	r3, r2
    8050:	005b      	lsls	r3, r3, #1
    8052:	4413      	add	r3, r2
    8054:	011b      	lsls	r3, r3, #4
    8056:	440b      	add	r3, r1
    8058:	681a      	ldr	r2, [r3, #0]
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	429a      	cmp	r2, r3
    805e:	d107      	bne.n	8070 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    8060:	7bfa      	ldrb	r2, [r7, #15]
    8062:	4613      	mov	r3, r2
    8064:	005b      	lsls	r3, r3, #1
    8066:	4413      	add	r3, r2
    8068:	011b      	lsls	r3, r3, #4
    806a:	4a08      	ldr	r2, [pc, #32]	; (808c <_get_tcc_cfg+0x50>)
    806c:	4413      	add	r3, r2
    806e:	e006      	b.n	807e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8070:	7bfb      	ldrb	r3, [r7, #15]
    8072:	3301      	adds	r3, #1
    8074:	73fb      	strb	r3, [r7, #15]
    8076:	7bfb      	ldrb	r3, [r7, #15]
    8078:	2b01      	cmp	r3, #1
    807a:	d9e6      	bls.n	804a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    807c:	2300      	movs	r3, #0
}
    807e:	4618      	mov	r0, r3
    8080:	3714      	adds	r7, #20
    8082:	46bd      	mov	sp, r7
    8084:	f85d 7b04 	ldr.w	r7, [sp], #4
    8088:	4770      	bx	lr
    808a:	bf00      	nop
    808c:	20000060 	.word	0x20000060

00008090 <__NVIC_EnableIRQ>:
{
    8090:	b480      	push	{r7}
    8092:	b083      	sub	sp, #12
    8094:	af00      	add	r7, sp, #0
    8096:	4603      	mov	r3, r0
    8098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    809a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    809e:	2b00      	cmp	r3, #0
    80a0:	db0b      	blt.n	80ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80a2:	4909      	ldr	r1, [pc, #36]	; (80c8 <__NVIC_EnableIRQ+0x38>)
    80a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80a8:	095b      	lsrs	r3, r3, #5
    80aa:	88fa      	ldrh	r2, [r7, #6]
    80ac:	f002 021f 	and.w	r2, r2, #31
    80b0:	2001      	movs	r0, #1
    80b2:	fa00 f202 	lsl.w	r2, r0, r2
    80b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80ba:	bf00      	nop
    80bc:	370c      	adds	r7, #12
    80be:	46bd      	mov	sp, r7
    80c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c4:	4770      	bx	lr
    80c6:	bf00      	nop
    80c8:	e000e100 	.word	0xe000e100

000080cc <__NVIC_DisableIRQ>:
{
    80cc:	b480      	push	{r7}
    80ce:	b083      	sub	sp, #12
    80d0:	af00      	add	r7, sp, #0
    80d2:	4603      	mov	r3, r0
    80d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80da:	2b00      	cmp	r3, #0
    80dc:	db10      	blt.n	8100 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80de:	490b      	ldr	r1, [pc, #44]	; (810c <__NVIC_DisableIRQ+0x40>)
    80e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80e4:	095b      	lsrs	r3, r3, #5
    80e6:	88fa      	ldrh	r2, [r7, #6]
    80e8:	f002 021f 	and.w	r2, r2, #31
    80ec:	2001      	movs	r0, #1
    80ee:	fa00 f202 	lsl.w	r2, r0, r2
    80f2:	3320      	adds	r3, #32
    80f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    80f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    80fc:	f3bf 8f6f 	isb	sy
}
    8100:	bf00      	nop
    8102:	370c      	adds	r7, #12
    8104:	46bd      	mov	sp, r7
    8106:	f85d 7b04 	ldr.w	r7, [sp], #4
    810a:	4770      	bx	lr
    810c:	e000e100 	.word	0xe000e100

00008110 <__NVIC_ClearPendingIRQ>:
{
    8110:	b480      	push	{r7}
    8112:	b083      	sub	sp, #12
    8114:	af00      	add	r7, sp, #0
    8116:	4603      	mov	r3, r0
    8118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    811a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    811e:	2b00      	cmp	r3, #0
    8120:	db0c      	blt.n	813c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8122:	4909      	ldr	r1, [pc, #36]	; (8148 <__NVIC_ClearPendingIRQ+0x38>)
    8124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8128:	095b      	lsrs	r3, r3, #5
    812a:	88fa      	ldrh	r2, [r7, #6]
    812c:	f002 021f 	and.w	r2, r2, #31
    8130:	2001      	movs	r0, #1
    8132:	fa00 f202 	lsl.w	r2, r0, r2
    8136:	3360      	adds	r3, #96	; 0x60
    8138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    813c:	bf00      	nop
    813e:	370c      	adds	r7, #12
    8140:	46bd      	mov	sp, r7
    8142:	f85d 7b04 	ldr.w	r7, [sp], #4
    8146:	4770      	bx	lr
    8148:	e000e100 	.word	0xe000e100

0000814c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    814c:	b480      	push	{r7}
    814e:	b083      	sub	sp, #12
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
    8154:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8156:	bf00      	nop
    8158:	687b      	ldr	r3, [r7, #4]
    815a:	691a      	ldr	r2, [r3, #16]
    815c:	683b      	ldr	r3, [r7, #0]
    815e:	4013      	ands	r3, r2
    8160:	2b00      	cmp	r3, #0
    8162:	d1f9      	bne.n	8158 <hri_tc_wait_for_sync+0xc>
	};
}
    8164:	bf00      	nop
    8166:	370c      	adds	r7, #12
    8168:	46bd      	mov	sp, r7
    816a:	f85d 7b04 	ldr.w	r7, [sp], #4
    816e:	4770      	bx	lr

00008170 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8170:	b480      	push	{r7}
    8172:	b083      	sub	sp, #12
    8174:	af00      	add	r7, sp, #0
    8176:	6078      	str	r0, [r7, #4]
    8178:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	691a      	ldr	r2, [r3, #16]
    817e:	683b      	ldr	r3, [r7, #0]
    8180:	4013      	ands	r3, r2
    8182:	2b00      	cmp	r3, #0
    8184:	bf14      	ite	ne
    8186:	2301      	movne	r3, #1
    8188:	2300      	moveq	r3, #0
    818a:	b2db      	uxtb	r3, r3
}
    818c:	4618      	mov	r0, r3
    818e:	370c      	adds	r7, #12
    8190:	46bd      	mov	sp, r7
    8192:	f85d 7b04 	ldr.w	r7, [sp], #4
    8196:	4770      	bx	lr

00008198 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8198:	b480      	push	{r7}
    819a:	b083      	sub	sp, #12
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	7a9b      	ldrb	r3, [r3, #10]
    81a4:	b2db      	uxtb	r3, r3
    81a6:	f003 0301 	and.w	r3, r3, #1
    81aa:	2b00      	cmp	r3, #0
    81ac:	bf14      	ite	ne
    81ae:	2301      	movne	r3, #1
    81b0:	2300      	moveq	r3, #0
    81b2:	b2db      	uxtb	r3, r3
}
    81b4:	4618      	mov	r0, r3
    81b6:	370c      	adds	r7, #12
    81b8:	46bd      	mov	sp, r7
    81ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    81be:	4770      	bx	lr

000081c0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    81c0:	b480      	push	{r7}
    81c2:	b083      	sub	sp, #12
    81c4:	af00      	add	r7, sp, #0
    81c6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	2201      	movs	r2, #1
    81cc:	729a      	strb	r2, [r3, #10]
}
    81ce:	bf00      	nop
    81d0:	370c      	adds	r7, #12
    81d2:	46bd      	mov	sp, r7
    81d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81d8:	4770      	bx	lr

000081da <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    81da:	b480      	push	{r7}
    81dc:	b083      	sub	sp, #12
    81de:	af00      	add	r7, sp, #0
    81e0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	2202      	movs	r2, #2
    81e6:	729a      	strb	r2, [r3, #10]
}
    81e8:	bf00      	nop
    81ea:	370c      	adds	r7, #12
    81ec:	46bd      	mov	sp, r7
    81ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f2:	4770      	bx	lr

000081f4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    81f4:	b480      	push	{r7}
    81f6:	b083      	sub	sp, #12
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    81fc:	687b      	ldr	r3, [r7, #4]
    81fe:	2201      	movs	r2, #1
    8200:	725a      	strb	r2, [r3, #9]
}
    8202:	bf00      	nop
    8204:	370c      	adds	r7, #12
    8206:	46bd      	mov	sp, r7
    8208:	f85d 7b04 	ldr.w	r7, [sp], #4
    820c:	4770      	bx	lr

0000820e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    820e:	b480      	push	{r7}
    8210:	b083      	sub	sp, #12
    8212:	af00      	add	r7, sp, #0
    8214:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	7a5b      	ldrb	r3, [r3, #9]
    821a:	b2db      	uxtb	r3, r3
    821c:	085b      	lsrs	r3, r3, #1
    821e:	f003 0301 	and.w	r3, r3, #1
    8222:	2b00      	cmp	r3, #0
    8224:	bf14      	ite	ne
    8226:	2301      	movne	r3, #1
    8228:	2300      	moveq	r3, #0
    822a:	b2db      	uxtb	r3, r3
}
    822c:	4618      	mov	r0, r3
    822e:	370c      	adds	r7, #12
    8230:	46bd      	mov	sp, r7
    8232:	f85d 7b04 	ldr.w	r7, [sp], #4
    8236:	4770      	bx	lr

00008238 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8238:	b580      	push	{r7, lr}
    823a:	b082      	sub	sp, #8
    823c:	af00      	add	r7, sp, #0
    823e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	f043 0201 	orr.w	r2, r3, #1
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    824c:	2101      	movs	r1, #1
    824e:	6878      	ldr	r0, [r7, #4]
    8250:	4b02      	ldr	r3, [pc, #8]	; (825c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    8252:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8254:	bf00      	nop
    8256:	3708      	adds	r7, #8
    8258:	46bd      	mov	sp, r7
    825a:	bd80      	pop	{r7, pc}
    825c:	0000814d 	.word	0x0000814d

00008260 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8260:	b580      	push	{r7, lr}
    8262:	b082      	sub	sp, #8
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	681b      	ldr	r3, [r3, #0]
    826c:	f043 0202 	orr.w	r2, r3, #2
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8274:	2103      	movs	r1, #3
    8276:	6878      	ldr	r0, [r7, #4]
    8278:	4b02      	ldr	r3, [pc, #8]	; (8284 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    827a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    827c:	bf00      	nop
    827e:	3708      	adds	r7, #8
    8280:	46bd      	mov	sp, r7
    8282:	bd80      	pop	{r7, pc}
    8284:	0000814d 	.word	0x0000814d

00008288 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8288:	b580      	push	{r7, lr}
    828a:	b084      	sub	sp, #16
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8290:	2103      	movs	r1, #3
    8292:	6878      	ldr	r0, [r7, #4]
    8294:	4b09      	ldr	r3, [pc, #36]	; (82bc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8296:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	681b      	ldr	r3, [r3, #0]
    829c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    829e:	68fb      	ldr	r3, [r7, #12]
    82a0:	085b      	lsrs	r3, r3, #1
    82a2:	f003 0301 	and.w	r3, r3, #1
    82a6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    82a8:	68fb      	ldr	r3, [r7, #12]
    82aa:	2b00      	cmp	r3, #0
    82ac:	bf14      	ite	ne
    82ae:	2301      	movne	r3, #1
    82b0:	2300      	moveq	r3, #0
    82b2:	b2db      	uxtb	r3, r3
}
    82b4:	4618      	mov	r0, r3
    82b6:	3710      	adds	r7, #16
    82b8:	46bd      	mov	sp, r7
    82ba:	bd80      	pop	{r7, pc}
    82bc:	0000814d 	.word	0x0000814d

000082c0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	f023 0202 	bic.w	r2, r3, #2
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    82d4:	2103      	movs	r1, #3
    82d6:	6878      	ldr	r0, [r7, #4]
    82d8:	4b02      	ldr	r3, [pc, #8]	; (82e4 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    82da:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    82dc:	bf00      	nop
    82de:	3708      	adds	r7, #8
    82e0:	46bd      	mov	sp, r7
    82e2:	bd80      	pop	{r7, pc}
    82e4:	0000814d 	.word	0x0000814d

000082e8 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    82e8:	b480      	push	{r7}
    82ea:	b085      	sub	sp, #20
    82ec:	af00      	add	r7, sp, #0
    82ee:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    82f6:	68fb      	ldr	r3, [r7, #12]
    82f8:	089b      	lsrs	r3, r3, #2
    82fa:	f003 0303 	and.w	r3, r3, #3
    82fe:	60fb      	str	r3, [r7, #12]
	return tmp;
    8300:	68fb      	ldr	r3, [r7, #12]
}
    8302:	4618      	mov	r0, r3
    8304:	3714      	adds	r7, #20
    8306:	46bd      	mov	sp, r7
    8308:	f85d 7b04 	ldr.w	r7, [sp], #4
    830c:	4770      	bx	lr
	...

00008310 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8310:	b580      	push	{r7, lr}
    8312:	b084      	sub	sp, #16
    8314:	af00      	add	r7, sp, #0
    8316:	6078      	str	r0, [r7, #4]
    8318:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    831a:	2103      	movs	r1, #3
    831c:	6878      	ldr	r0, [r7, #4]
    831e:	4b07      	ldr	r3, [pc, #28]	; (833c <hri_tc_get_CTRLA_reg+0x2c>)
    8320:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8322:	687b      	ldr	r3, [r7, #4]
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8328:	68fa      	ldr	r2, [r7, #12]
    832a:	683b      	ldr	r3, [r7, #0]
    832c:	4013      	ands	r3, r2
    832e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8330:	68fb      	ldr	r3, [r7, #12]
}
    8332:	4618      	mov	r0, r3
    8334:	3710      	adds	r7, #16
    8336:	46bd      	mov	sp, r7
    8338:	bd80      	pop	{r7, pc}
    833a:	bf00      	nop
    833c:	0000814d 	.word	0x0000814d

00008340 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8340:	b580      	push	{r7, lr}
    8342:	b082      	sub	sp, #8
    8344:	af00      	add	r7, sp, #0
    8346:	6078      	str	r0, [r7, #4]
    8348:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	683a      	ldr	r2, [r7, #0]
    834e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8350:	2103      	movs	r1, #3
    8352:	6878      	ldr	r0, [r7, #4]
    8354:	4b02      	ldr	r3, [pc, #8]	; (8360 <hri_tc_write_CTRLA_reg+0x20>)
    8356:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8358:	bf00      	nop
    835a:	3708      	adds	r7, #8
    835c:	46bd      	mov	sp, r7
    835e:	bd80      	pop	{r7, pc}
    8360:	0000814d 	.word	0x0000814d

00008364 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8364:	b480      	push	{r7}
    8366:	b083      	sub	sp, #12
    8368:	af00      	add	r7, sp, #0
    836a:	6078      	str	r0, [r7, #4]
    836c:	460b      	mov	r3, r1
    836e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	887a      	ldrh	r2, [r7, #2]
    8374:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8376:	bf00      	nop
    8378:	370c      	adds	r7, #12
    837a:	46bd      	mov	sp, r7
    837c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8380:	4770      	bx	lr

00008382 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8382:	b480      	push	{r7}
    8384:	b083      	sub	sp, #12
    8386:	af00      	add	r7, sp, #0
    8388:	6078      	str	r0, [r7, #4]
    838a:	460b      	mov	r3, r1
    838c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    838e:	687b      	ldr	r3, [r7, #4]
    8390:	78fa      	ldrb	r2, [r7, #3]
    8392:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8394:	bf00      	nop
    8396:	370c      	adds	r7, #12
    8398:	46bd      	mov	sp, r7
    839a:	f85d 7b04 	ldr.w	r7, [sp], #4
    839e:	4770      	bx	lr

000083a0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    83a0:	b480      	push	{r7}
    83a2:	b083      	sub	sp, #12
    83a4:	af00      	add	r7, sp, #0
    83a6:	6078      	str	r0, [r7, #4]
    83a8:	460b      	mov	r3, r1
    83aa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	78fa      	ldrb	r2, [r7, #3]
    83b0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    83b2:	bf00      	nop
    83b4:	370c      	adds	r7, #12
    83b6:	46bd      	mov	sp, r7
    83b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83bc:	4770      	bx	lr
	...

000083c0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    83c0:	b580      	push	{r7, lr}
    83c2:	b082      	sub	sp, #8
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
    83c8:	460b      	mov	r3, r1
    83ca:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	78fa      	ldrb	r2, [r7, #3]
    83d0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83d2:	2120      	movs	r1, #32
    83d4:	6878      	ldr	r0, [r7, #4]
    83d6:	4b03      	ldr	r3, [pc, #12]	; (83e4 <hri_tccount8_write_PER_reg+0x24>)
    83d8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83da:	bf00      	nop
    83dc:	3708      	adds	r7, #8
    83de:	46bd      	mov	sp, r7
    83e0:	bd80      	pop	{r7, pc}
    83e2:	bf00      	nop
    83e4:	0000814d 	.word	0x0000814d

000083e8 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b082      	sub	sp, #8
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83f0:	2120      	movs	r1, #32
    83f2:	6878      	ldr	r0, [r7, #4]
    83f4:	4b04      	ldr	r3, [pc, #16]	; (8408 <hri_tccount8_read_PER_reg+0x20>)
    83f6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	7edb      	ldrb	r3, [r3, #27]
    83fc:	b2db      	uxtb	r3, r3
}
    83fe:	4618      	mov	r0, r3
    8400:	3708      	adds	r7, #8
    8402:	46bd      	mov	sp, r7
    8404:	bd80      	pop	{r7, pc}
    8406:	bf00      	nop
    8408:	0000814d 	.word	0x0000814d

0000840c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    840c:	b580      	push	{r7, lr}
    840e:	b082      	sub	sp, #8
    8410:	af00      	add	r7, sp, #0
    8412:	6078      	str	r0, [r7, #4]
    8414:	460b      	mov	r3, r1
    8416:	70fb      	strb	r3, [r7, #3]
    8418:	4613      	mov	r3, r2
    841a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    841c:	78fb      	ldrb	r3, [r7, #3]
    841e:	687a      	ldr	r2, [r7, #4]
    8420:	4413      	add	r3, r2
    8422:	78ba      	ldrb	r2, [r7, #2]
    8424:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8426:	21c0      	movs	r1, #192	; 0xc0
    8428:	6878      	ldr	r0, [r7, #4]
    842a:	4b03      	ldr	r3, [pc, #12]	; (8438 <hri_tccount8_write_CC_reg+0x2c>)
    842c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    842e:	bf00      	nop
    8430:	3708      	adds	r7, #8
    8432:	46bd      	mov	sp, r7
    8434:	bd80      	pop	{r7, pc}
    8436:	bf00      	nop
    8438:	0000814d 	.word	0x0000814d

0000843c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    843c:	b580      	push	{r7, lr}
    843e:	b082      	sub	sp, #8
    8440:	af00      	add	r7, sp, #0
    8442:	6078      	str	r0, [r7, #4]
    8444:	460b      	mov	r3, r1
    8446:	70fb      	strb	r3, [r7, #3]
    8448:	4613      	mov	r3, r2
    844a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    844c:	78fb      	ldrb	r3, [r7, #3]
    844e:	687a      	ldr	r2, [r7, #4]
    8450:	330c      	adds	r3, #12
    8452:	005b      	lsls	r3, r3, #1
    8454:	4413      	add	r3, r2
    8456:	883a      	ldrh	r2, [r7, #0]
    8458:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    845a:	21c0      	movs	r1, #192	; 0xc0
    845c:	6878      	ldr	r0, [r7, #4]
    845e:	4b03      	ldr	r3, [pc, #12]	; (846c <hri_tccount16_write_CC_reg+0x30>)
    8460:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8462:	bf00      	nop
    8464:	3708      	adds	r7, #8
    8466:	46bd      	mov	sp, r7
    8468:	bd80      	pop	{r7, pc}
    846a:	bf00      	nop
    846c:	0000814d 	.word	0x0000814d

00008470 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8470:	b580      	push	{r7, lr}
    8472:	b082      	sub	sp, #8
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
    8478:	460b      	mov	r3, r1
    847a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    847c:	21c0      	movs	r1, #192	; 0xc0
    847e:	6878      	ldr	r0, [r7, #4]
    8480:	4b06      	ldr	r3, [pc, #24]	; (849c <hri_tccount16_read_CC_reg+0x2c>)
    8482:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8484:	78fb      	ldrb	r3, [r7, #3]
    8486:	687a      	ldr	r2, [r7, #4]
    8488:	330c      	adds	r3, #12
    848a:	005b      	lsls	r3, r3, #1
    848c:	4413      	add	r3, r2
    848e:	889b      	ldrh	r3, [r3, #4]
    8490:	b29b      	uxth	r3, r3
}
    8492:	4618      	mov	r0, r3
    8494:	3708      	adds	r7, #8
    8496:	46bd      	mov	sp, r7
    8498:	bd80      	pop	{r7, pc}
    849a:	bf00      	nop
    849c:	0000814d 	.word	0x0000814d

000084a0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b084      	sub	sp, #16
    84a4:	af00      	add	r7, sp, #0
    84a6:	60f8      	str	r0, [r7, #12]
    84a8:	460b      	mov	r3, r1
    84aa:	607a      	str	r2, [r7, #4]
    84ac:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    84ae:	7afb      	ldrb	r3, [r7, #11]
    84b0:	68fa      	ldr	r2, [r7, #12]
    84b2:	3306      	adds	r3, #6
    84b4:	009b      	lsls	r3, r3, #2
    84b6:	4413      	add	r3, r2
    84b8:	687a      	ldr	r2, [r7, #4]
    84ba:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84bc:	21c0      	movs	r1, #192	; 0xc0
    84be:	68f8      	ldr	r0, [r7, #12]
    84c0:	4b02      	ldr	r3, [pc, #8]	; (84cc <hri_tccount32_write_CC_reg+0x2c>)
    84c2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    84c4:	bf00      	nop
    84c6:	3710      	adds	r7, #16
    84c8:	46bd      	mov	sp, r7
    84ca:	bd80      	pop	{r7, pc}
    84cc:	0000814d 	.word	0x0000814d

000084d0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b082      	sub	sp, #8
    84d4:	af00      	add	r7, sp, #0
    84d6:	6078      	str	r0, [r7, #4]
    84d8:	460b      	mov	r3, r1
    84da:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    84dc:	21c0      	movs	r1, #192	; 0xc0
    84de:	6878      	ldr	r0, [r7, #4]
    84e0:	4b05      	ldr	r3, [pc, #20]	; (84f8 <hri_tccount32_read_CC_reg+0x28>)
    84e2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    84e4:	78fb      	ldrb	r3, [r7, #3]
    84e6:	687a      	ldr	r2, [r7, #4]
    84e8:	3306      	adds	r3, #6
    84ea:	009b      	lsls	r3, r3, #2
    84ec:	4413      	add	r3, r2
    84ee:	685b      	ldr	r3, [r3, #4]
}
    84f0:	4618      	mov	r0, r3
    84f2:	3708      	adds	r7, #8
    84f4:	46bd      	mov	sp, r7
    84f6:	bd80      	pop	{r7, pc}
    84f8:	0000814d 	.word	0x0000814d

000084fc <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    84fc:	b580      	push	{r7, lr}
    84fe:	b084      	sub	sp, #16
    8500:	af00      	add	r7, sp, #0
    8502:	6078      	str	r0, [r7, #4]
    8504:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8506:	6838      	ldr	r0, [r7, #0]
    8508:	4b93      	ldr	r3, [pc, #588]	; (8758 <_tc_timer_init+0x25c>)
    850a:	4798      	blx	r3
    850c:	4603      	mov	r3, r0
    850e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	683a      	ldr	r2, [r7, #0]
    8514:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8516:	22a4      	movs	r2, #164	; 0xa4
    8518:	4990      	ldr	r1, [pc, #576]	; (875c <_tc_timer_init+0x260>)
    851a:	2001      	movs	r0, #1
    851c:	4b90      	ldr	r3, [pc, #576]	; (8760 <_tc_timer_init+0x264>)
    851e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8520:	2101      	movs	r1, #1
    8522:	6838      	ldr	r0, [r7, #0]
    8524:	4b8f      	ldr	r3, [pc, #572]	; (8764 <_tc_timer_init+0x268>)
    8526:	4798      	blx	r3
    8528:	4603      	mov	r3, r0
    852a:	f083 0301 	eor.w	r3, r3, #1
    852e:	b2db      	uxtb	r3, r3
    8530:	2b00      	cmp	r3, #0
    8532:	d011      	beq.n	8558 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8534:	2102      	movs	r1, #2
    8536:	6838      	ldr	r0, [r7, #0]
    8538:	4b8b      	ldr	r3, [pc, #556]	; (8768 <_tc_timer_init+0x26c>)
    853a:	4798      	blx	r3
    853c:	4603      	mov	r3, r0
    853e:	2b00      	cmp	r3, #0
    8540:	d006      	beq.n	8550 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8542:	6838      	ldr	r0, [r7, #0]
    8544:	4b89      	ldr	r3, [pc, #548]	; (876c <_tc_timer_init+0x270>)
    8546:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8548:	2102      	movs	r1, #2
    854a:	6838      	ldr	r0, [r7, #0]
    854c:	4b88      	ldr	r3, [pc, #544]	; (8770 <_tc_timer_init+0x274>)
    854e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8550:	2101      	movs	r1, #1
    8552:	6838      	ldr	r0, [r7, #0]
    8554:	4b87      	ldr	r3, [pc, #540]	; (8774 <_tc_timer_init+0x278>)
    8556:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8558:	2101      	movs	r1, #1
    855a:	6838      	ldr	r0, [r7, #0]
    855c:	4b84      	ldr	r3, [pc, #528]	; (8770 <_tc_timer_init+0x274>)
    855e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8560:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8564:	4984      	ldr	r1, [pc, #528]	; (8778 <_tc_timer_init+0x27c>)
    8566:	4613      	mov	r3, r2
    8568:	009b      	lsls	r3, r3, #2
    856a:	4413      	add	r3, r2
    856c:	009b      	lsls	r3, r3, #2
    856e:	440b      	add	r3, r1
    8570:	3304      	adds	r3, #4
    8572:	681b      	ldr	r3, [r3, #0]
    8574:	4619      	mov	r1, r3
    8576:	6838      	ldr	r0, [r7, #0]
    8578:	4b7e      	ldr	r3, [pc, #504]	; (8774 <_tc_timer_init+0x278>)
    857a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    857c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8580:	497d      	ldr	r1, [pc, #500]	; (8778 <_tc_timer_init+0x27c>)
    8582:	4613      	mov	r3, r2
    8584:	009b      	lsls	r3, r3, #2
    8586:	4413      	add	r3, r2
    8588:	009b      	lsls	r3, r3, #2
    858a:	440b      	add	r3, r1
    858c:	330a      	adds	r3, #10
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	4619      	mov	r1, r3
    8592:	6838      	ldr	r0, [r7, #0]
    8594:	4b79      	ldr	r3, [pc, #484]	; (877c <_tc_timer_init+0x280>)
    8596:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8598:	f997 200f 	ldrsb.w	r2, [r7, #15]
    859c:	4976      	ldr	r1, [pc, #472]	; (8778 <_tc_timer_init+0x27c>)
    859e:	4613      	mov	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	4413      	add	r3, r2
    85a4:	009b      	lsls	r3, r3, #2
    85a6:	440b      	add	r3, r1
    85a8:	3308      	adds	r3, #8
    85aa:	881b      	ldrh	r3, [r3, #0]
    85ac:	4619      	mov	r1, r3
    85ae:	6838      	ldr	r0, [r7, #0]
    85b0:	4b73      	ldr	r3, [pc, #460]	; (8780 <_tc_timer_init+0x284>)
    85b2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    85b4:	2101      	movs	r1, #1
    85b6:	6838      	ldr	r0, [r7, #0]
    85b8:	4b72      	ldr	r3, [pc, #456]	; (8784 <_tc_timer_init+0x288>)
    85ba:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    85bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85c0:	496d      	ldr	r1, [pc, #436]	; (8778 <_tc_timer_init+0x27c>)
    85c2:	4613      	mov	r3, r2
    85c4:	009b      	lsls	r3, r3, #2
    85c6:	4413      	add	r3, r2
    85c8:	009b      	lsls	r3, r3, #2
    85ca:	440b      	add	r3, r1
    85cc:	3304      	adds	r3, #4
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	f003 030c 	and.w	r3, r3, #12
    85d4:	2b08      	cmp	r3, #8
    85d6:	d11e      	bne.n	8616 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    85d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85dc:	4966      	ldr	r1, [pc, #408]	; (8778 <_tc_timer_init+0x27c>)
    85de:	4613      	mov	r3, r2
    85e0:	009b      	lsls	r3, r3, #2
    85e2:	4413      	add	r3, r2
    85e4:	009b      	lsls	r3, r3, #2
    85e6:	440b      	add	r3, r1
    85e8:	330c      	adds	r3, #12
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	461a      	mov	r2, r3
    85ee:	2100      	movs	r1, #0
    85f0:	6838      	ldr	r0, [r7, #0]
    85f2:	4b65      	ldr	r3, [pc, #404]	; (8788 <_tc_timer_init+0x28c>)
    85f4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85fa:	495f      	ldr	r1, [pc, #380]	; (8778 <_tc_timer_init+0x27c>)
    85fc:	4613      	mov	r3, r2
    85fe:	009b      	lsls	r3, r3, #2
    8600:	4413      	add	r3, r2
    8602:	009b      	lsls	r3, r3, #2
    8604:	440b      	add	r3, r1
    8606:	3310      	adds	r3, #16
    8608:	681b      	ldr	r3, [r3, #0]
    860a:	461a      	mov	r2, r3
    860c:	2101      	movs	r1, #1
    860e:	6838      	ldr	r0, [r7, #0]
    8610:	4b5d      	ldr	r3, [pc, #372]	; (8788 <_tc_timer_init+0x28c>)
    8612:	4798      	blx	r3
    8614:	e06a      	b.n	86ec <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8616:	f997 200f 	ldrsb.w	r2, [r7, #15]
    861a:	4957      	ldr	r1, [pc, #348]	; (8778 <_tc_timer_init+0x27c>)
    861c:	4613      	mov	r3, r2
    861e:	009b      	lsls	r3, r3, #2
    8620:	4413      	add	r3, r2
    8622:	009b      	lsls	r3, r3, #2
    8624:	440b      	add	r3, r1
    8626:	3304      	adds	r3, #4
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	f003 030c 	and.w	r3, r3, #12
    862e:	2b00      	cmp	r3, #0
    8630:	d120      	bne.n	8674 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8632:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8636:	4950      	ldr	r1, [pc, #320]	; (8778 <_tc_timer_init+0x27c>)
    8638:	4613      	mov	r3, r2
    863a:	009b      	lsls	r3, r3, #2
    863c:	4413      	add	r3, r2
    863e:	009b      	lsls	r3, r3, #2
    8640:	440b      	add	r3, r1
    8642:	330c      	adds	r3, #12
    8644:	681b      	ldr	r3, [r3, #0]
    8646:	b29b      	uxth	r3, r3
    8648:	461a      	mov	r2, r3
    864a:	2100      	movs	r1, #0
    864c:	6838      	ldr	r0, [r7, #0]
    864e:	4b4f      	ldr	r3, [pc, #316]	; (878c <_tc_timer_init+0x290>)
    8650:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8652:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8656:	4948      	ldr	r1, [pc, #288]	; (8778 <_tc_timer_init+0x27c>)
    8658:	4613      	mov	r3, r2
    865a:	009b      	lsls	r3, r3, #2
    865c:	4413      	add	r3, r2
    865e:	009b      	lsls	r3, r3, #2
    8660:	440b      	add	r3, r1
    8662:	3310      	adds	r3, #16
    8664:	681b      	ldr	r3, [r3, #0]
    8666:	b29b      	uxth	r3, r3
    8668:	461a      	mov	r2, r3
    866a:	2101      	movs	r1, #1
    866c:	6838      	ldr	r0, [r7, #0]
    866e:	4b47      	ldr	r3, [pc, #284]	; (878c <_tc_timer_init+0x290>)
    8670:	4798      	blx	r3
    8672:	e03b      	b.n	86ec <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8678:	493f      	ldr	r1, [pc, #252]	; (8778 <_tc_timer_init+0x27c>)
    867a:	4613      	mov	r3, r2
    867c:	009b      	lsls	r3, r3, #2
    867e:	4413      	add	r3, r2
    8680:	009b      	lsls	r3, r3, #2
    8682:	440b      	add	r3, r1
    8684:	3304      	adds	r3, #4
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	f003 030c 	and.w	r3, r3, #12
    868c:	2b04      	cmp	r3, #4
    868e:	d12d      	bne.n	86ec <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8690:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8694:	4938      	ldr	r1, [pc, #224]	; (8778 <_tc_timer_init+0x27c>)
    8696:	4613      	mov	r3, r2
    8698:	009b      	lsls	r3, r3, #2
    869a:	4413      	add	r3, r2
    869c:	009b      	lsls	r3, r3, #2
    869e:	440b      	add	r3, r1
    86a0:	330c      	adds	r3, #12
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	b2db      	uxtb	r3, r3
    86a6:	461a      	mov	r2, r3
    86a8:	2100      	movs	r1, #0
    86aa:	6838      	ldr	r0, [r7, #0]
    86ac:	4b38      	ldr	r3, [pc, #224]	; (8790 <_tc_timer_init+0x294>)
    86ae:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    86b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86b4:	4930      	ldr	r1, [pc, #192]	; (8778 <_tc_timer_init+0x27c>)
    86b6:	4613      	mov	r3, r2
    86b8:	009b      	lsls	r3, r3, #2
    86ba:	4413      	add	r3, r2
    86bc:	009b      	lsls	r3, r3, #2
    86be:	440b      	add	r3, r1
    86c0:	3310      	adds	r3, #16
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	b2db      	uxtb	r3, r3
    86c6:	461a      	mov	r2, r3
    86c8:	2101      	movs	r1, #1
    86ca:	6838      	ldr	r0, [r7, #0]
    86cc:	4b30      	ldr	r3, [pc, #192]	; (8790 <_tc_timer_init+0x294>)
    86ce:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    86d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86d4:	4928      	ldr	r1, [pc, #160]	; (8778 <_tc_timer_init+0x27c>)
    86d6:	4613      	mov	r3, r2
    86d8:	009b      	lsls	r3, r3, #2
    86da:	4413      	add	r3, r2
    86dc:	009b      	lsls	r3, r3, #2
    86de:	440b      	add	r3, r1
    86e0:	330b      	adds	r3, #11
    86e2:	781b      	ldrb	r3, [r3, #0]
    86e4:	4619      	mov	r1, r3
    86e6:	6838      	ldr	r0, [r7, #0]
    86e8:	4b2a      	ldr	r3, [pc, #168]	; (8794 <_tc_timer_init+0x298>)
    86ea:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    86ec:	6838      	ldr	r0, [r7, #0]
    86ee:	4b2a      	ldr	r3, [pc, #168]	; (8798 <_tc_timer_init+0x29c>)
    86f0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    86f2:	6879      	ldr	r1, [r7, #4]
    86f4:	6838      	ldr	r0, [r7, #0]
    86f6:	4b29      	ldr	r3, [pc, #164]	; (879c <_tc_timer_init+0x2a0>)
    86f8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    86fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86fe:	491e      	ldr	r1, [pc, #120]	; (8778 <_tc_timer_init+0x27c>)
    8700:	4613      	mov	r3, r2
    8702:	009b      	lsls	r3, r3, #2
    8704:	4413      	add	r3, r2
    8706:	009b      	lsls	r3, r3, #2
    8708:	440b      	add	r3, r1
    870a:	3302      	adds	r3, #2
    870c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8710:	4618      	mov	r0, r3
    8712:	4b23      	ldr	r3, [pc, #140]	; (87a0 <_tc_timer_init+0x2a4>)
    8714:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8716:	f997 200f 	ldrsb.w	r2, [r7, #15]
    871a:	4917      	ldr	r1, [pc, #92]	; (8778 <_tc_timer_init+0x27c>)
    871c:	4613      	mov	r3, r2
    871e:	009b      	lsls	r3, r3, #2
    8720:	4413      	add	r3, r2
    8722:	009b      	lsls	r3, r3, #2
    8724:	440b      	add	r3, r1
    8726:	3302      	adds	r3, #2
    8728:	f9b3 3000 	ldrsh.w	r3, [r3]
    872c:	4618      	mov	r0, r3
    872e:	4b1d      	ldr	r3, [pc, #116]	; (87a4 <_tc_timer_init+0x2a8>)
    8730:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8732:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8736:	4910      	ldr	r1, [pc, #64]	; (8778 <_tc_timer_init+0x27c>)
    8738:	4613      	mov	r3, r2
    873a:	009b      	lsls	r3, r3, #2
    873c:	4413      	add	r3, r2
    873e:	009b      	lsls	r3, r3, #2
    8740:	440b      	add	r3, r1
    8742:	3302      	adds	r3, #2
    8744:	f9b3 3000 	ldrsh.w	r3, [r3]
    8748:	4618      	mov	r0, r3
    874a:	4b17      	ldr	r3, [pc, #92]	; (87a8 <_tc_timer_init+0x2ac>)
    874c:	4798      	blx	r3

	return ERR_NONE;
    874e:	2300      	movs	r3, #0
}
    8750:	4618      	mov	r0, r3
    8752:	3710      	adds	r7, #16
    8754:	46bd      	mov	sp, r7
    8756:	bd80      	pop	{r7, pc}
    8758:	00008d8d 	.word	0x00008d8d
    875c:	00010238 	.word	0x00010238
    8760:	00003ba1 	.word	0x00003ba1
    8764:	00008171 	.word	0x00008171
    8768:	00008311 	.word	0x00008311
    876c:	000082c1 	.word	0x000082c1
    8770:	0000814d 	.word	0x0000814d
    8774:	00008341 	.word	0x00008341
    8778:	200000e0 	.word	0x200000e0
    877c:	000083a1 	.word	0x000083a1
    8780:	00008365 	.word	0x00008365
    8784:	00008383 	.word	0x00008383
    8788:	000084a1 	.word	0x000084a1
    878c:	0000843d 	.word	0x0000843d
    8790:	0000840d 	.word	0x0000840d
    8794:	000083c1 	.word	0x000083c1
    8798:	000081f5 	.word	0x000081f5
    879c:	00008df5 	.word	0x00008df5
    87a0:	000080cd 	.word	0x000080cd
    87a4:	00008111 	.word	0x00008111
    87a8:	00008091 	.word	0x00008091

000087ac <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b084      	sub	sp, #16
    87b0:	af00      	add	r7, sp, #0
    87b2:	6078      	str	r0, [r7, #4]
    87b4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    87b6:	6838      	ldr	r0, [r7, #0]
    87b8:	4b73      	ldr	r3, [pc, #460]	; (8988 <_pwm_init+0x1dc>)
    87ba:	4798      	blx	r3
    87bc:	4603      	mov	r3, r0
    87be:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	683a      	ldr	r2, [r7, #0]
    87c4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    87c6:	2101      	movs	r1, #1
    87c8:	6838      	ldr	r0, [r7, #0]
    87ca:	4b70      	ldr	r3, [pc, #448]	; (898c <_pwm_init+0x1e0>)
    87cc:	4798      	blx	r3
    87ce:	4603      	mov	r3, r0
    87d0:	f083 0301 	eor.w	r3, r3, #1
    87d4:	b2db      	uxtb	r3, r3
    87d6:	2b00      	cmp	r3, #0
    87d8:	d011      	beq.n	87fe <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    87da:	2102      	movs	r1, #2
    87dc:	6838      	ldr	r0, [r7, #0]
    87de:	4b6c      	ldr	r3, [pc, #432]	; (8990 <_pwm_init+0x1e4>)
    87e0:	4798      	blx	r3
    87e2:	4603      	mov	r3, r0
    87e4:	2b00      	cmp	r3, #0
    87e6:	d006      	beq.n	87f6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    87e8:	6838      	ldr	r0, [r7, #0]
    87ea:	4b6a      	ldr	r3, [pc, #424]	; (8994 <_pwm_init+0x1e8>)
    87ec:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    87ee:	2102      	movs	r1, #2
    87f0:	6838      	ldr	r0, [r7, #0]
    87f2:	4b69      	ldr	r3, [pc, #420]	; (8998 <_pwm_init+0x1ec>)
    87f4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    87f6:	2101      	movs	r1, #1
    87f8:	6838      	ldr	r0, [r7, #0]
    87fa:	4b68      	ldr	r3, [pc, #416]	; (899c <_pwm_init+0x1f0>)
    87fc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    87fe:	2101      	movs	r1, #1
    8800:	6838      	ldr	r0, [r7, #0]
    8802:	4b65      	ldr	r3, [pc, #404]	; (8998 <_pwm_init+0x1ec>)
    8804:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8806:	f997 200f 	ldrsb.w	r2, [r7, #15]
    880a:	4965      	ldr	r1, [pc, #404]	; (89a0 <_pwm_init+0x1f4>)
    880c:	4613      	mov	r3, r2
    880e:	009b      	lsls	r3, r3, #2
    8810:	4413      	add	r3, r2
    8812:	009b      	lsls	r3, r3, #2
    8814:	440b      	add	r3, r1
    8816:	3304      	adds	r3, #4
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	4619      	mov	r1, r3
    881c:	6838      	ldr	r0, [r7, #0]
    881e:	4b5f      	ldr	r3, [pc, #380]	; (899c <_pwm_init+0x1f0>)
    8820:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8822:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8826:	495e      	ldr	r1, [pc, #376]	; (89a0 <_pwm_init+0x1f4>)
    8828:	4613      	mov	r3, r2
    882a:	009b      	lsls	r3, r3, #2
    882c:	4413      	add	r3, r2
    882e:	009b      	lsls	r3, r3, #2
    8830:	440b      	add	r3, r1
    8832:	330a      	adds	r3, #10
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	4619      	mov	r1, r3
    8838:	6838      	ldr	r0, [r7, #0]
    883a:	4b5a      	ldr	r3, [pc, #360]	; (89a4 <_pwm_init+0x1f8>)
    883c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    883e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8842:	4957      	ldr	r1, [pc, #348]	; (89a0 <_pwm_init+0x1f4>)
    8844:	4613      	mov	r3, r2
    8846:	009b      	lsls	r3, r3, #2
    8848:	4413      	add	r3, r2
    884a:	009b      	lsls	r3, r3, #2
    884c:	440b      	add	r3, r1
    884e:	3308      	adds	r3, #8
    8850:	881b      	ldrh	r3, [r3, #0]
    8852:	4619      	mov	r1, r3
    8854:	6838      	ldr	r0, [r7, #0]
    8856:	4b54      	ldr	r3, [pc, #336]	; (89a8 <_pwm_init+0x1fc>)
    8858:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    885a:	2103      	movs	r1, #3
    885c:	6838      	ldr	r0, [r7, #0]
    885e:	4b53      	ldr	r3, [pc, #332]	; (89ac <_pwm_init+0x200>)
    8860:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8862:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8866:	494e      	ldr	r1, [pc, #312]	; (89a0 <_pwm_init+0x1f4>)
    8868:	4613      	mov	r3, r2
    886a:	009b      	lsls	r3, r3, #2
    886c:	4413      	add	r3, r2
    886e:	009b      	lsls	r3, r3, #2
    8870:	440b      	add	r3, r1
    8872:	3304      	adds	r3, #4
    8874:	681b      	ldr	r3, [r3, #0]
    8876:	f003 030c 	and.w	r3, r3, #12
    887a:	2b08      	cmp	r3, #8
    887c:	d11e      	bne.n	88bc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    887e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8882:	4947      	ldr	r1, [pc, #284]	; (89a0 <_pwm_init+0x1f4>)
    8884:	4613      	mov	r3, r2
    8886:	009b      	lsls	r3, r3, #2
    8888:	4413      	add	r3, r2
    888a:	009b      	lsls	r3, r3, #2
    888c:	440b      	add	r3, r1
    888e:	330c      	adds	r3, #12
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	461a      	mov	r2, r3
    8894:	2100      	movs	r1, #0
    8896:	6838      	ldr	r0, [r7, #0]
    8898:	4b45      	ldr	r3, [pc, #276]	; (89b0 <_pwm_init+0x204>)
    889a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    889c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88a0:	493f      	ldr	r1, [pc, #252]	; (89a0 <_pwm_init+0x1f4>)
    88a2:	4613      	mov	r3, r2
    88a4:	009b      	lsls	r3, r3, #2
    88a6:	4413      	add	r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	440b      	add	r3, r1
    88ac:	3310      	adds	r3, #16
    88ae:	681b      	ldr	r3, [r3, #0]
    88b0:	461a      	mov	r2, r3
    88b2:	2101      	movs	r1, #1
    88b4:	6838      	ldr	r0, [r7, #0]
    88b6:	4b3e      	ldr	r3, [pc, #248]	; (89b0 <_pwm_init+0x204>)
    88b8:	4798      	blx	r3
    88ba:	e031      	b.n	8920 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    88bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88c0:	4937      	ldr	r1, [pc, #220]	; (89a0 <_pwm_init+0x1f4>)
    88c2:	4613      	mov	r3, r2
    88c4:	009b      	lsls	r3, r3, #2
    88c6:	4413      	add	r3, r2
    88c8:	009b      	lsls	r3, r3, #2
    88ca:	440b      	add	r3, r1
    88cc:	3304      	adds	r3, #4
    88ce:	681b      	ldr	r3, [r3, #0]
    88d0:	f003 030c 	and.w	r3, r3, #12
    88d4:	2b00      	cmp	r3, #0
    88d6:	d120      	bne.n	891a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    88d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88dc:	4930      	ldr	r1, [pc, #192]	; (89a0 <_pwm_init+0x1f4>)
    88de:	4613      	mov	r3, r2
    88e0:	009b      	lsls	r3, r3, #2
    88e2:	4413      	add	r3, r2
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	440b      	add	r3, r1
    88e8:	330c      	adds	r3, #12
    88ea:	681b      	ldr	r3, [r3, #0]
    88ec:	b29b      	uxth	r3, r3
    88ee:	461a      	mov	r2, r3
    88f0:	2100      	movs	r1, #0
    88f2:	6838      	ldr	r0, [r7, #0]
    88f4:	4b2f      	ldr	r3, [pc, #188]	; (89b4 <_pwm_init+0x208>)
    88f6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    88f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88fc:	4928      	ldr	r1, [pc, #160]	; (89a0 <_pwm_init+0x1f4>)
    88fe:	4613      	mov	r3, r2
    8900:	009b      	lsls	r3, r3, #2
    8902:	4413      	add	r3, r2
    8904:	009b      	lsls	r3, r3, #2
    8906:	440b      	add	r3, r1
    8908:	3310      	adds	r3, #16
    890a:	681b      	ldr	r3, [r3, #0]
    890c:	b29b      	uxth	r3, r3
    890e:	461a      	mov	r2, r3
    8910:	2101      	movs	r1, #1
    8912:	6838      	ldr	r0, [r7, #0]
    8914:	4b27      	ldr	r3, [pc, #156]	; (89b4 <_pwm_init+0x208>)
    8916:	4798      	blx	r3
    8918:	e002      	b.n	8920 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    891a:	f04f 33ff 	mov.w	r3, #4294967295
    891e:	e02e      	b.n	897e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8920:	6879      	ldr	r1, [r7, #4]
    8922:	6838      	ldr	r0, [r7, #0]
    8924:	4b24      	ldr	r3, [pc, #144]	; (89b8 <_pwm_init+0x20c>)
    8926:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8928:	f997 200f 	ldrsb.w	r2, [r7, #15]
    892c:	491c      	ldr	r1, [pc, #112]	; (89a0 <_pwm_init+0x1f4>)
    892e:	4613      	mov	r3, r2
    8930:	009b      	lsls	r3, r3, #2
    8932:	4413      	add	r3, r2
    8934:	009b      	lsls	r3, r3, #2
    8936:	440b      	add	r3, r1
    8938:	3302      	adds	r3, #2
    893a:	f9b3 3000 	ldrsh.w	r3, [r3]
    893e:	4618      	mov	r0, r3
    8940:	4b1e      	ldr	r3, [pc, #120]	; (89bc <_pwm_init+0x210>)
    8942:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8944:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8948:	4915      	ldr	r1, [pc, #84]	; (89a0 <_pwm_init+0x1f4>)
    894a:	4613      	mov	r3, r2
    894c:	009b      	lsls	r3, r3, #2
    894e:	4413      	add	r3, r2
    8950:	009b      	lsls	r3, r3, #2
    8952:	440b      	add	r3, r1
    8954:	3302      	adds	r3, #2
    8956:	f9b3 3000 	ldrsh.w	r3, [r3]
    895a:	4618      	mov	r0, r3
    895c:	4b18      	ldr	r3, [pc, #96]	; (89c0 <_pwm_init+0x214>)
    895e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8960:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8964:	490e      	ldr	r1, [pc, #56]	; (89a0 <_pwm_init+0x1f4>)
    8966:	4613      	mov	r3, r2
    8968:	009b      	lsls	r3, r3, #2
    896a:	4413      	add	r3, r2
    896c:	009b      	lsls	r3, r3, #2
    896e:	440b      	add	r3, r1
    8970:	3302      	adds	r3, #2
    8972:	f9b3 3000 	ldrsh.w	r3, [r3]
    8976:	4618      	mov	r0, r3
    8978:	4b12      	ldr	r3, [pc, #72]	; (89c4 <_pwm_init+0x218>)
    897a:	4798      	blx	r3

	return 0;
    897c:	2300      	movs	r3, #0
}
    897e:	4618      	mov	r0, r3
    8980:	3710      	adds	r7, #16
    8982:	46bd      	mov	sp, r7
    8984:	bd80      	pop	{r7, pc}
    8986:	bf00      	nop
    8988:	00008d8d 	.word	0x00008d8d
    898c:	00008171 	.word	0x00008171
    8990:	00008311 	.word	0x00008311
    8994:	000082c1 	.word	0x000082c1
    8998:	0000814d 	.word	0x0000814d
    899c:	00008341 	.word	0x00008341
    89a0:	200000e0 	.word	0x200000e0
    89a4:	000083a1 	.word	0x000083a1
    89a8:	00008365 	.word	0x00008365
    89ac:	00008383 	.word	0x00008383
    89b0:	000084a1 	.word	0x000084a1
    89b4:	0000843d 	.word	0x0000843d
    89b8:	00008df5 	.word	0x00008df5
    89bc:	000080cd 	.word	0x000080cd
    89c0:	00008111 	.word	0x00008111
    89c4:	00008091 	.word	0x00008091

000089c8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	b084      	sub	sp, #16
    89cc:	af00      	add	r7, sp, #0
    89ce:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	68db      	ldr	r3, [r3, #12]
    89d4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    89d6:	68f8      	ldr	r0, [r7, #12]
    89d8:	4b10      	ldr	r3, [pc, #64]	; (8a1c <_tc_timer_deinit+0x54>)
    89da:	4798      	blx	r3
    89dc:	4603      	mov	r3, r0
    89de:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    89e0:	22f9      	movs	r2, #249	; 0xf9
    89e2:	490f      	ldr	r1, [pc, #60]	; (8a20 <_tc_timer_deinit+0x58>)
    89e4:	2001      	movs	r0, #1
    89e6:	4b0f      	ldr	r3, [pc, #60]	; (8a24 <_tc_timer_deinit+0x5c>)
    89e8:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    89ea:	f997 200b 	ldrsb.w	r2, [r7, #11]
    89ee:	490e      	ldr	r1, [pc, #56]	; (8a28 <_tc_timer_deinit+0x60>)
    89f0:	4613      	mov	r3, r2
    89f2:	009b      	lsls	r3, r3, #2
    89f4:	4413      	add	r3, r2
    89f6:	009b      	lsls	r3, r3, #2
    89f8:	440b      	add	r3, r1
    89fa:	3302      	adds	r3, #2
    89fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    8a00:	4618      	mov	r0, r3
    8a02:	4b0a      	ldr	r3, [pc, #40]	; (8a2c <_tc_timer_deinit+0x64>)
    8a04:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8a06:	68f8      	ldr	r0, [r7, #12]
    8a08:	4b09      	ldr	r3, [pc, #36]	; (8a30 <_tc_timer_deinit+0x68>)
    8a0a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8a0c:	68f8      	ldr	r0, [r7, #12]
    8a0e:	4b09      	ldr	r3, [pc, #36]	; (8a34 <_tc_timer_deinit+0x6c>)
    8a10:	4798      	blx	r3
}
    8a12:	bf00      	nop
    8a14:	3710      	adds	r7, #16
    8a16:	46bd      	mov	sp, r7
    8a18:	bd80      	pop	{r7, pc}
    8a1a:	bf00      	nop
    8a1c:	00008d8d 	.word	0x00008d8d
    8a20:	00010238 	.word	0x00010238
    8a24:	00003ba1 	.word	0x00003ba1
    8a28:	200000e0 	.word	0x200000e0
    8a2c:	000080cd 	.word	0x000080cd
    8a30:	000082c1 	.word	0x000082c1
    8a34:	00008239 	.word	0x00008239

00008a38 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b082      	sub	sp, #8
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8a40:	687b      	ldr	r3, [r7, #4]
    8a42:	68db      	ldr	r3, [r3, #12]
    8a44:	4618      	mov	r0, r3
    8a46:	4b03      	ldr	r3, [pc, #12]	; (8a54 <_tc_timer_start+0x1c>)
    8a48:	4798      	blx	r3
}
    8a4a:	bf00      	nop
    8a4c:	3708      	adds	r7, #8
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd80      	pop	{r7, pc}
    8a52:	bf00      	nop
    8a54:	00008261 	.word	0x00008261

00008a58 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    8a58:	b580      	push	{r7, lr}
    8a5a:	b082      	sub	sp, #8
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8a60:	687b      	ldr	r3, [r7, #4]
    8a62:	691b      	ldr	r3, [r3, #16]
    8a64:	4618      	mov	r0, r3
    8a66:	4b03      	ldr	r3, [pc, #12]	; (8a74 <_pwm_enable+0x1c>)
    8a68:	4798      	blx	r3
}
    8a6a:	bf00      	nop
    8a6c:	3708      	adds	r7, #8
    8a6e:	46bd      	mov	sp, r7
    8a70:	bd80      	pop	{r7, pc}
    8a72:	bf00      	nop
    8a74:	00008261 	.word	0x00008261

00008a78 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b082      	sub	sp, #8
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	68db      	ldr	r3, [r3, #12]
    8a84:	4618      	mov	r0, r3
    8a86:	4b03      	ldr	r3, [pc, #12]	; (8a94 <_tc_timer_stop+0x1c>)
    8a88:	4798      	blx	r3
}
    8a8a:	bf00      	nop
    8a8c:	3708      	adds	r7, #8
    8a8e:	46bd      	mov	sp, r7
    8a90:	bd80      	pop	{r7, pc}
    8a92:	bf00      	nop
    8a94:	000082c1 	.word	0x000082c1

00008a98 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b084      	sub	sp, #16
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	6078      	str	r0, [r7, #4]
    8aa0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8aa2:	687b      	ldr	r3, [r7, #4]
    8aa4:	68db      	ldr	r3, [r3, #12]
    8aa6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8aa8:	68f8      	ldr	r0, [r7, #12]
    8aaa:	4b14      	ldr	r3, [pc, #80]	; (8afc <_tc_timer_set_period+0x64>)
    8aac:	4798      	blx	r3
    8aae:	4603      	mov	r3, r0
    8ab0:	2b02      	cmp	r3, #2
    8ab2:	d105      	bne.n	8ac0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8ab4:	683a      	ldr	r2, [r7, #0]
    8ab6:	2100      	movs	r1, #0
    8ab8:	68f8      	ldr	r0, [r7, #12]
    8aba:	4b11      	ldr	r3, [pc, #68]	; (8b00 <_tc_timer_set_period+0x68>)
    8abc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8abe:	e019      	b.n	8af4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ac0:	68f8      	ldr	r0, [r7, #12]
    8ac2:	4b0e      	ldr	r3, [pc, #56]	; (8afc <_tc_timer_set_period+0x64>)
    8ac4:	4798      	blx	r3
    8ac6:	4603      	mov	r3, r0
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d107      	bne.n	8adc <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8acc:	683b      	ldr	r3, [r7, #0]
    8ace:	b29b      	uxth	r3, r3
    8ad0:	461a      	mov	r2, r3
    8ad2:	2100      	movs	r1, #0
    8ad4:	68f8      	ldr	r0, [r7, #12]
    8ad6:	4b0b      	ldr	r3, [pc, #44]	; (8b04 <_tc_timer_set_period+0x6c>)
    8ad8:	4798      	blx	r3
}
    8ada:	e00b      	b.n	8af4 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8adc:	68f8      	ldr	r0, [r7, #12]
    8ade:	4b07      	ldr	r3, [pc, #28]	; (8afc <_tc_timer_set_period+0x64>)
    8ae0:	4798      	blx	r3
    8ae2:	4603      	mov	r3, r0
    8ae4:	2b01      	cmp	r3, #1
    8ae6:	d105      	bne.n	8af4 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8ae8:	683b      	ldr	r3, [r7, #0]
    8aea:	b2db      	uxtb	r3, r3
    8aec:	4619      	mov	r1, r3
    8aee:	68f8      	ldr	r0, [r7, #12]
    8af0:	4b05      	ldr	r3, [pc, #20]	; (8b08 <_tc_timer_set_period+0x70>)
    8af2:	4798      	blx	r3
}
    8af4:	bf00      	nop
    8af6:	3710      	adds	r7, #16
    8af8:	46bd      	mov	sp, r7
    8afa:	bd80      	pop	{r7, pc}
    8afc:	000082e9 	.word	0x000082e9
    8b00:	000084a1 	.word	0x000084a1
    8b04:	0000843d 	.word	0x0000843d
    8b08:	000083c1 	.word	0x000083c1

00008b0c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b084      	sub	sp, #16
    8b10:	af00      	add	r7, sp, #0
    8b12:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	68db      	ldr	r3, [r3, #12]
    8b18:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b1a:	68f8      	ldr	r0, [r7, #12]
    8b1c:	4b13      	ldr	r3, [pc, #76]	; (8b6c <_tc_timer_get_period+0x60>)
    8b1e:	4798      	blx	r3
    8b20:	4603      	mov	r3, r0
    8b22:	2b02      	cmp	r3, #2
    8b24:	d105      	bne.n	8b32 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8b26:	2100      	movs	r1, #0
    8b28:	68f8      	ldr	r0, [r7, #12]
    8b2a:	4b11      	ldr	r3, [pc, #68]	; (8b70 <_tc_timer_get_period+0x64>)
    8b2c:	4798      	blx	r3
    8b2e:	4603      	mov	r3, r0
    8b30:	e017      	b.n	8b62 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b32:	68f8      	ldr	r0, [r7, #12]
    8b34:	4b0d      	ldr	r3, [pc, #52]	; (8b6c <_tc_timer_get_period+0x60>)
    8b36:	4798      	blx	r3
    8b38:	4603      	mov	r3, r0
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d105      	bne.n	8b4a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8b3e:	2100      	movs	r1, #0
    8b40:	68f8      	ldr	r0, [r7, #12]
    8b42:	4b0c      	ldr	r3, [pc, #48]	; (8b74 <_tc_timer_get_period+0x68>)
    8b44:	4798      	blx	r3
    8b46:	4603      	mov	r3, r0
    8b48:	e00b      	b.n	8b62 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8b4a:	68f8      	ldr	r0, [r7, #12]
    8b4c:	4b07      	ldr	r3, [pc, #28]	; (8b6c <_tc_timer_get_period+0x60>)
    8b4e:	4798      	blx	r3
    8b50:	4603      	mov	r3, r0
    8b52:	2b01      	cmp	r3, #1
    8b54:	d104      	bne.n	8b60 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8b56:	68f8      	ldr	r0, [r7, #12]
    8b58:	4b07      	ldr	r3, [pc, #28]	; (8b78 <_tc_timer_get_period+0x6c>)
    8b5a:	4798      	blx	r3
    8b5c:	4603      	mov	r3, r0
    8b5e:	e000      	b.n	8b62 <_tc_timer_get_period+0x56>
	}

	return 0;
    8b60:	2300      	movs	r3, #0
}
    8b62:	4618      	mov	r0, r3
    8b64:	3710      	adds	r7, #16
    8b66:	46bd      	mov	sp, r7
    8b68:	bd80      	pop	{r7, pc}
    8b6a:	bf00      	nop
    8b6c:	000082e9 	.word	0x000082e9
    8b70:	000084d1 	.word	0x000084d1
    8b74:	00008471 	.word	0x00008471
    8b78:	000083e9 	.word	0x000083e9

00008b7c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8b7c:	b580      	push	{r7, lr}
    8b7e:	b082      	sub	sp, #8
    8b80:	af00      	add	r7, sp, #0
    8b82:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	68db      	ldr	r3, [r3, #12]
    8b88:	4618      	mov	r0, r3
    8b8a:	4b03      	ldr	r3, [pc, #12]	; (8b98 <_tc_timer_is_started+0x1c>)
    8b8c:	4798      	blx	r3
    8b8e:	4603      	mov	r3, r0
}
    8b90:	4618      	mov	r0, r3
    8b92:	3708      	adds	r7, #8
    8b94:	46bd      	mov	sp, r7
    8b96:	bd80      	pop	{r7, pc}
    8b98:	00008289 	.word	0x00008289

00008b9c <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    8b9c:	b580      	push	{r7, lr}
    8b9e:	b082      	sub	sp, #8
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	691b      	ldr	r3, [r3, #16]
    8ba8:	4618      	mov	r0, r3
    8baa:	4b03      	ldr	r3, [pc, #12]	; (8bb8 <_pwm_is_enabled+0x1c>)
    8bac:	4798      	blx	r3
    8bae:	4603      	mov	r3, r0
}
    8bb0:	4618      	mov	r0, r3
    8bb2:	3708      	adds	r7, #8
    8bb4:	46bd      	mov	sp, r7
    8bb6:	bd80      	pop	{r7, pc}
    8bb8:	00008289 	.word	0x00008289

00008bbc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8bbc:	b480      	push	{r7}
    8bbe:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8bc0:	4b02      	ldr	r3, [pc, #8]	; (8bcc <_tc_get_timer+0x10>)
}
    8bc2:	4618      	mov	r0, r3
    8bc4:	46bd      	mov	sp, r7
    8bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bca:	4770      	bx	lr
    8bcc:	20000158 	.word	0x20000158

00008bd0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8bd0:	b480      	push	{r7}
    8bd2:	af00      	add	r7, sp, #0
	return NULL;
    8bd4:	2300      	movs	r3, #0
}
    8bd6:	4618      	mov	r0, r3
    8bd8:	46bd      	mov	sp, r7
    8bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bde:	4770      	bx	lr

00008be0 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8be0:	b580      	push	{r7, lr}
    8be2:	b084      	sub	sp, #16
    8be4:	af00      	add	r7, sp, #0
    8be6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8be8:	687b      	ldr	r3, [r7, #4]
    8bea:	68db      	ldr	r3, [r3, #12]
    8bec:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8bee:	68f8      	ldr	r0, [r7, #12]
    8bf0:	4b0e      	ldr	r3, [pc, #56]	; (8c2c <_tc_timer_set_irq+0x4c>)
    8bf2:	4798      	blx	r3
    8bf4:	4603      	mov	r3, r0
    8bf6:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8bf8:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8bfc:	490c      	ldr	r1, [pc, #48]	; (8c30 <_tc_timer_set_irq+0x50>)
    8bfe:	2001      	movs	r0, #1
    8c00:	4b0c      	ldr	r3, [pc, #48]	; (8c34 <_tc_timer_set_irq+0x54>)
    8c02:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8c04:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8c08:	490b      	ldr	r1, [pc, #44]	; (8c38 <_tc_timer_set_irq+0x58>)
    8c0a:	4613      	mov	r3, r2
    8c0c:	009b      	lsls	r3, r3, #2
    8c0e:	4413      	add	r3, r2
    8c10:	009b      	lsls	r3, r3, #2
    8c12:	440b      	add	r3, r1
    8c14:	3302      	adds	r3, #2
    8c16:	f9b3 3000 	ldrsh.w	r3, [r3]
    8c1a:	b2db      	uxtb	r3, r3
    8c1c:	4618      	mov	r0, r3
    8c1e:	4b07      	ldr	r3, [pc, #28]	; (8c3c <_tc_timer_set_irq+0x5c>)
    8c20:	4798      	blx	r3
}
    8c22:	bf00      	nop
    8c24:	3710      	adds	r7, #16
    8c26:	46bd      	mov	sp, r7
    8c28:	bd80      	pop	{r7, pc}
    8c2a:	bf00      	nop
    8c2c:	00008d8d 	.word	0x00008d8d
    8c30:	00010238 	.word	0x00010238
    8c34:	00003ba1 	.word	0x00003ba1
    8c38:	200000e0 	.word	0x200000e0
    8c3c:	000043ed 	.word	0x000043ed

00008c40 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8c40:	b580      	push	{r7, lr}
    8c42:	b084      	sub	sp, #16
    8c44:	af00      	add	r7, sp, #0
    8c46:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	68db      	ldr	r3, [r3, #12]
    8c4c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c4e:	68f8      	ldr	r0, [r7, #12]
    8c50:	4b07      	ldr	r3, [pc, #28]	; (8c70 <tc_interrupt_handler+0x30>)
    8c52:	4798      	blx	r3
    8c54:	4603      	mov	r3, r0
    8c56:	2b00      	cmp	r3, #0
    8c58:	d006      	beq.n	8c68 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c5a:	68f8      	ldr	r0, [r7, #12]
    8c5c:	4b05      	ldr	r3, [pc, #20]	; (8c74 <tc_interrupt_handler+0x34>)
    8c5e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	6878      	ldr	r0, [r7, #4]
    8c66:	4798      	blx	r3
	}
}
    8c68:	bf00      	nop
    8c6a:	3710      	adds	r7, #16
    8c6c:	46bd      	mov	sp, r7
    8c6e:	bd80      	pop	{r7, pc}
    8c70:	00008199 	.word	0x00008199
    8c74:	000081c1 	.word	0x000081c1

00008c78 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8c78:	b580      	push	{r7, lr}
    8c7a:	b084      	sub	sp, #16
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	691b      	ldr	r3, [r3, #16]
    8c84:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c86:	68f8      	ldr	r0, [r7, #12]
    8c88:	4b12      	ldr	r3, [pc, #72]	; (8cd4 <tc_pwm_interrupt_handler+0x5c>)
    8c8a:	4798      	blx	r3
    8c8c:	4603      	mov	r3, r0
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d00a      	beq.n	8ca8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c92:	68f8      	ldr	r0, [r7, #12]
    8c94:	4b10      	ldr	r3, [pc, #64]	; (8cd8 <tc_pwm_interrupt_handler+0x60>)
    8c96:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	681b      	ldr	r3, [r3, #0]
    8c9c:	2b00      	cmp	r3, #0
    8c9e:	d003      	beq.n	8ca8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	681b      	ldr	r3, [r3, #0]
    8ca4:	6878      	ldr	r0, [r7, #4]
    8ca6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8ca8:	68f8      	ldr	r0, [r7, #12]
    8caa:	4b0c      	ldr	r3, [pc, #48]	; (8cdc <tc_pwm_interrupt_handler+0x64>)
    8cac:	4798      	blx	r3
    8cae:	4603      	mov	r3, r0
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d00a      	beq.n	8cca <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8cb4:	68f8      	ldr	r0, [r7, #12]
    8cb6:	4b0a      	ldr	r3, [pc, #40]	; (8ce0 <tc_pwm_interrupt_handler+0x68>)
    8cb8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	685b      	ldr	r3, [r3, #4]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d003      	beq.n	8cca <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	685b      	ldr	r3, [r3, #4]
    8cc6:	6878      	ldr	r0, [r7, #4]
    8cc8:	4798      	blx	r3
		}
	}
}
    8cca:	bf00      	nop
    8ccc:	3710      	adds	r7, #16
    8cce:	46bd      	mov	sp, r7
    8cd0:	bd80      	pop	{r7, pc}
    8cd2:	bf00      	nop
    8cd4:	00008199 	.word	0x00008199
    8cd8:	000081c1 	.word	0x000081c1
    8cdc:	0000820f 	.word	0x0000820f
    8ce0:	000081db 	.word	0x000081db

00008ce4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8ce4:	b580      	push	{r7, lr}
    8ce6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8ce8:	4b03      	ldr	r3, [pc, #12]	; (8cf8 <TC0_Handler+0x14>)
    8cea:	681b      	ldr	r3, [r3, #0]
    8cec:	4618      	mov	r0, r3
    8cee:	4b03      	ldr	r3, [pc, #12]	; (8cfc <TC0_Handler+0x18>)
    8cf0:	4798      	blx	r3
}
    8cf2:	bf00      	nop
    8cf4:	bd80      	pop	{r7, pc}
    8cf6:	bf00      	nop
    8cf8:	20000a8c 	.word	0x20000a8c
    8cfc:	00008c41 	.word	0x00008c41

00008d00 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8d00:	b580      	push	{r7, lr}
    8d02:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8d04:	4b03      	ldr	r3, [pc, #12]	; (8d14 <TC2_Handler+0x14>)
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	4618      	mov	r0, r3
    8d0a:	4b03      	ldr	r3, [pc, #12]	; (8d18 <TC2_Handler+0x18>)
    8d0c:	4798      	blx	r3
}
    8d0e:	bf00      	nop
    8d10:	bd80      	pop	{r7, pc}
    8d12:	bf00      	nop
    8d14:	20000a90 	.word	0x20000a90
    8d18:	00008c41 	.word	0x00008c41

00008d1c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8d20:	4b03      	ldr	r3, [pc, #12]	; (8d30 <TC4_Handler+0x14>)
    8d22:	681b      	ldr	r3, [r3, #0]
    8d24:	4618      	mov	r0, r3
    8d26:	4b03      	ldr	r3, [pc, #12]	; (8d34 <TC4_Handler+0x18>)
    8d28:	4798      	blx	r3
}
    8d2a:	bf00      	nop
    8d2c:	bd80      	pop	{r7, pc}
    8d2e:	bf00      	nop
    8d30:	20000a94 	.word	0x20000a94
    8d34:	00008c41 	.word	0x00008c41

00008d38 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8d38:	b580      	push	{r7, lr}
    8d3a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8d3c:	4b03      	ldr	r3, [pc, #12]	; (8d4c <TC5_Handler+0x14>)
    8d3e:	681b      	ldr	r3, [r3, #0]
    8d40:	4618      	mov	r0, r3
    8d42:	4b03      	ldr	r3, [pc, #12]	; (8d50 <TC5_Handler+0x18>)
    8d44:	4798      	blx	r3
}
    8d46:	bf00      	nop
    8d48:	bd80      	pop	{r7, pc}
    8d4a:	bf00      	nop
    8d4c:	20000a98 	.word	0x20000a98
    8d50:	00008c41 	.word	0x00008c41

00008d54 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8d58:	4b03      	ldr	r3, [pc, #12]	; (8d68 <TC6_Handler+0x14>)
    8d5a:	681b      	ldr	r3, [r3, #0]
    8d5c:	4618      	mov	r0, r3
    8d5e:	4b03      	ldr	r3, [pc, #12]	; (8d6c <TC6_Handler+0x18>)
    8d60:	4798      	blx	r3
}
    8d62:	bf00      	nop
    8d64:	bd80      	pop	{r7, pc}
    8d66:	bf00      	nop
    8d68:	20000a9c 	.word	0x20000a9c
    8d6c:	00008c41 	.word	0x00008c41

00008d70 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8d70:	b580      	push	{r7, lr}
    8d72:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8d74:	4b03      	ldr	r3, [pc, #12]	; (8d84 <TC7_Handler+0x14>)
    8d76:	681b      	ldr	r3, [r3, #0]
    8d78:	4618      	mov	r0, r3
    8d7a:	4b03      	ldr	r3, [pc, #12]	; (8d88 <TC7_Handler+0x18>)
    8d7c:	4798      	blx	r3
}
    8d7e:	bf00      	nop
    8d80:	bd80      	pop	{r7, pc}
    8d82:	bf00      	nop
    8d84:	20000aa0 	.word	0x20000aa0
    8d88:	00008c79 	.word	0x00008c79

00008d8c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b084      	sub	sp, #16
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8d94:	6878      	ldr	r0, [r7, #4]
    8d96:	4b13      	ldr	r3, [pc, #76]	; (8de4 <get_tc_index+0x58>)
    8d98:	4798      	blx	r3
    8d9a:	4603      	mov	r3, r0
    8d9c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d9e:	2300      	movs	r3, #0
    8da0:	73fb      	strb	r3, [r7, #15]
    8da2:	e010      	b.n	8dc6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8da4:	7bfa      	ldrb	r2, [r7, #15]
    8da6:	4910      	ldr	r1, [pc, #64]	; (8de8 <get_tc_index+0x5c>)
    8da8:	4613      	mov	r3, r2
    8daa:	009b      	lsls	r3, r3, #2
    8dac:	4413      	add	r3, r2
    8dae:	009b      	lsls	r3, r3, #2
    8db0:	440b      	add	r3, r1
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	7bba      	ldrb	r2, [r7, #14]
    8db6:	429a      	cmp	r2, r3
    8db8:	d102      	bne.n	8dc0 <get_tc_index+0x34>
			return i;
    8dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8dbe:	e00d      	b.n	8ddc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8dc0:	7bfb      	ldrb	r3, [r7, #15]
    8dc2:	3301      	adds	r3, #1
    8dc4:	73fb      	strb	r3, [r7, #15]
    8dc6:	7bfb      	ldrb	r3, [r7, #15]
    8dc8:	2b05      	cmp	r3, #5
    8dca:	d9eb      	bls.n	8da4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8dcc:	f240 221d 	movw	r2, #541	; 0x21d
    8dd0:	4906      	ldr	r1, [pc, #24]	; (8dec <get_tc_index+0x60>)
    8dd2:	2000      	movs	r0, #0
    8dd4:	4b06      	ldr	r3, [pc, #24]	; (8df0 <get_tc_index+0x64>)
    8dd6:	4798      	blx	r3
	return -1;
    8dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
    8ddc:	4618      	mov	r0, r3
    8dde:	3710      	adds	r7, #16
    8de0:	46bd      	mov	sp, r7
    8de2:	bd80      	pop	{r7, pc}
    8de4:	00008e91 	.word	0x00008e91
    8de8:	200000e0 	.word	0x200000e0
    8dec:	00010238 	.word	0x00010238
    8df0:	00003ba1 	.word	0x00003ba1

00008df4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8df4:	b480      	push	{r7}
    8df6:	b083      	sub	sp, #12
    8df8:	af00      	add	r7, sp, #0
    8dfa:	6078      	str	r0, [r7, #4]
    8dfc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	4a17      	ldr	r2, [pc, #92]	; (8e60 <_tc_init_irq_param+0x6c>)
    8e02:	4293      	cmp	r3, r2
    8e04:	d102      	bne.n	8e0c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8e06:	4a17      	ldr	r2, [pc, #92]	; (8e64 <_tc_init_irq_param+0x70>)
    8e08:	683b      	ldr	r3, [r7, #0]
    8e0a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	4a16      	ldr	r2, [pc, #88]	; (8e68 <_tc_init_irq_param+0x74>)
    8e10:	4293      	cmp	r3, r2
    8e12:	d102      	bne.n	8e1a <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8e14:	4a15      	ldr	r2, [pc, #84]	; (8e6c <_tc_init_irq_param+0x78>)
    8e16:	683b      	ldr	r3, [r7, #0]
    8e18:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8e1a:	687b      	ldr	r3, [r7, #4]
    8e1c:	4a14      	ldr	r2, [pc, #80]	; (8e70 <_tc_init_irq_param+0x7c>)
    8e1e:	4293      	cmp	r3, r2
    8e20:	d102      	bne.n	8e28 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8e22:	4a14      	ldr	r2, [pc, #80]	; (8e74 <_tc_init_irq_param+0x80>)
    8e24:	683b      	ldr	r3, [r7, #0]
    8e26:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	4a13      	ldr	r2, [pc, #76]	; (8e78 <_tc_init_irq_param+0x84>)
    8e2c:	4293      	cmp	r3, r2
    8e2e:	d102      	bne.n	8e36 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8e30:	4a12      	ldr	r2, [pc, #72]	; (8e7c <_tc_init_irq_param+0x88>)
    8e32:	683b      	ldr	r3, [r7, #0]
    8e34:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8e36:	687b      	ldr	r3, [r7, #4]
    8e38:	4a11      	ldr	r2, [pc, #68]	; (8e80 <_tc_init_irq_param+0x8c>)
    8e3a:	4293      	cmp	r3, r2
    8e3c:	d102      	bne.n	8e44 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8e3e:	4a11      	ldr	r2, [pc, #68]	; (8e84 <_tc_init_irq_param+0x90>)
    8e40:	683b      	ldr	r3, [r7, #0]
    8e42:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8e44:	687b      	ldr	r3, [r7, #4]
    8e46:	4a10      	ldr	r2, [pc, #64]	; (8e88 <_tc_init_irq_param+0x94>)
    8e48:	4293      	cmp	r3, r2
    8e4a:	d102      	bne.n	8e52 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8e4c:	4a0f      	ldr	r2, [pc, #60]	; (8e8c <_tc_init_irq_param+0x98>)
    8e4e:	683b      	ldr	r3, [r7, #0]
    8e50:	6013      	str	r3, [r2, #0]
	}
}
    8e52:	bf00      	nop
    8e54:	370c      	adds	r7, #12
    8e56:	46bd      	mov	sp, r7
    8e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e5c:	4770      	bx	lr
    8e5e:	bf00      	nop
    8e60:	40003800 	.word	0x40003800
    8e64:	20000a8c 	.word	0x20000a8c
    8e68:	4101a000 	.word	0x4101a000
    8e6c:	20000a90 	.word	0x20000a90
    8e70:	42001400 	.word	0x42001400
    8e74:	20000a94 	.word	0x20000a94
    8e78:	42001800 	.word	0x42001800
    8e7c:	20000a98 	.word	0x20000a98
    8e80:	43001400 	.word	0x43001400
    8e84:	20000a9c 	.word	0x20000a9c
    8e88:	43001800 	.word	0x43001800
    8e8c:	20000aa0 	.word	0x20000aa0

00008e90 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8e90:	b4b0      	push	{r4, r5, r7}
    8e92:	b08d      	sub	sp, #52	; 0x34
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8e98:	4b13      	ldr	r3, [pc, #76]	; (8ee8 <_get_hardware_offset+0x58>)
    8e9a:	f107 040c 	add.w	r4, r7, #12
    8e9e:	461d      	mov	r5, r3
    8ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8ea4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8eac:	2300      	movs	r3, #0
    8eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    8eb0:	e010      	b.n	8ed4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8eb4:	009b      	lsls	r3, r3, #2
    8eb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8eba:	4413      	add	r3, r2
    8ebc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8ec0:	461a      	mov	r2, r3
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	429a      	cmp	r2, r3
    8ec6:	d102      	bne.n	8ece <_get_hardware_offset+0x3e>
			return i;
    8ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8eca:	b2db      	uxtb	r3, r3
    8ecc:	e006      	b.n	8edc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ed0:	3301      	adds	r3, #1
    8ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ed6:	2b07      	cmp	r3, #7
    8ed8:	d9eb      	bls.n	8eb2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8eda:	2300      	movs	r3, #0
}
    8edc:	4618      	mov	r0, r3
    8ede:	3734      	adds	r7, #52	; 0x34
    8ee0:	46bd      	mov	sp, r7
    8ee2:	bcb0      	pop	{r4, r5, r7}
    8ee4:	4770      	bx	lr
    8ee6:	bf00      	nop
    8ee8:	0001024c 	.word	0x0001024c

00008eec <__NVIC_EnableIRQ>:
{
    8eec:	b480      	push	{r7}
    8eee:	b083      	sub	sp, #12
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	4603      	mov	r3, r0
    8ef4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8efa:	2b00      	cmp	r3, #0
    8efc:	db0b      	blt.n	8f16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8efe:	4909      	ldr	r1, [pc, #36]	; (8f24 <__NVIC_EnableIRQ+0x38>)
    8f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8f04:	095b      	lsrs	r3, r3, #5
    8f06:	88fa      	ldrh	r2, [r7, #6]
    8f08:	f002 021f 	and.w	r2, r2, #31
    8f0c:	2001      	movs	r0, #1
    8f0e:	fa00 f202 	lsl.w	r2, r0, r2
    8f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f16:	bf00      	nop
    8f18:	370c      	adds	r7, #12
    8f1a:	46bd      	mov	sp, r7
    8f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop
    8f24:	e000e100 	.word	0xe000e100

00008f28 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8f28:	b480      	push	{r7}
    8f2a:	b087      	sub	sp, #28
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	60f8      	str	r0, [r7, #12]
    8f30:	460b      	mov	r3, r1
    8f32:	607a      	str	r2, [r7, #4]
    8f34:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8f36:	7afa      	ldrb	r2, [r7, #11]
    8f38:	68f9      	ldr	r1, [r7, #12]
    8f3a:	4613      	mov	r3, r2
    8f3c:	009b      	lsls	r3, r3, #2
    8f3e:	4413      	add	r3, r2
    8f40:	009b      	lsls	r3, r3, #2
    8f42:	440b      	add	r3, r1
    8f44:	3340      	adds	r3, #64	; 0x40
    8f46:	681b      	ldr	r3, [r3, #0]
    8f48:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8f4a:	697a      	ldr	r2, [r7, #20]
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	4013      	ands	r3, r2
    8f50:	617b      	str	r3, [r7, #20]
	return tmp;
    8f52:	697b      	ldr	r3, [r7, #20]
}
    8f54:	4618      	mov	r0, r3
    8f56:	371c      	adds	r7, #28
    8f58:	46bd      	mov	sp, r7
    8f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f5e:	4770      	bx	lr

00008f60 <hri_oscctrl_get_STATUS_reg>:
{
    8f60:	b480      	push	{r7}
    8f62:	b085      	sub	sp, #20
    8f64:	af00      	add	r7, sp, #0
    8f66:	6078      	str	r0, [r7, #4]
    8f68:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8f6a:	687b      	ldr	r3, [r7, #4]
    8f6c:	691b      	ldr	r3, [r3, #16]
    8f6e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8f70:	68fa      	ldr	r2, [r7, #12]
    8f72:	683b      	ldr	r3, [r7, #0]
    8f74:	4013      	ands	r3, r2
    8f76:	60fb      	str	r3, [r7, #12]
	return tmp;
    8f78:	68fb      	ldr	r3, [r7, #12]
}
    8f7a:	4618      	mov	r0, r3
    8f7c:	3714      	adds	r7, #20
    8f7e:	46bd      	mov	sp, r7
    8f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f84:	4770      	bx	lr

00008f86 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8f86:	b480      	push	{r7}
    8f88:	b085      	sub	sp, #20
    8f8a:	af00      	add	r7, sp, #0
    8f8c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	f893 3020 	ldrb.w	r3, [r3, #32]
    8f94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8f96:	7bfb      	ldrb	r3, [r7, #15]
    8f98:	f003 0301 	and.w	r3, r3, #1
    8f9c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8f9e:	7bfb      	ldrb	r3, [r7, #15]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	bf14      	ite	ne
    8fa4:	2301      	movne	r3, #1
    8fa6:	2300      	moveq	r3, #0
    8fa8:	b2db      	uxtb	r3, r3
}
    8faa:	4618      	mov	r0, r3
    8fac:	3714      	adds	r7, #20
    8fae:	46bd      	mov	sp, r7
    8fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fb4:	4770      	bx	lr

00008fb6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8fb6:	b480      	push	{r7}
    8fb8:	b083      	sub	sp, #12
    8fba:	af00      	add	r7, sp, #0
    8fbc:	6078      	str	r0, [r7, #4]
    8fbe:	460b      	mov	r3, r1
    8fc0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8fc2:	bf00      	nop
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	789b      	ldrb	r3, [r3, #2]
    8fc8:	b2da      	uxtb	r2, r3
    8fca:	78fb      	ldrb	r3, [r7, #3]
    8fcc:	4013      	ands	r3, r2
    8fce:	b2db      	uxtb	r3, r3
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d1f7      	bne.n	8fc4 <hri_usb_wait_for_sync+0xe>
	};
}
    8fd4:	bf00      	nop
    8fd6:	370c      	adds	r7, #12
    8fd8:	46bd      	mov	sp, r7
    8fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fde:	4770      	bx	lr

00008fe0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8fe0:	b480      	push	{r7}
    8fe2:	b083      	sub	sp, #12
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	6078      	str	r0, [r7, #4]
    8fe8:	460b      	mov	r3, r1
    8fea:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	789b      	ldrb	r3, [r3, #2]
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	78fb      	ldrb	r3, [r7, #3]
    8ff4:	4013      	ands	r3, r2
    8ff6:	b2db      	uxtb	r3, r3
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	bf14      	ite	ne
    8ffc:	2301      	movne	r3, #1
    8ffe:	2300      	moveq	r3, #0
    9000:	b2db      	uxtb	r3, r3
}
    9002:	4618      	mov	r0, r3
    9004:	370c      	adds	r7, #12
    9006:	46bd      	mov	sp, r7
    9008:	f85d 7b04 	ldr.w	r7, [sp], #4
    900c:	4770      	bx	lr

0000900e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    900e:	b480      	push	{r7}
    9010:	b085      	sub	sp, #20
    9012:	af00      	add	r7, sp, #0
    9014:	6078      	str	r0, [r7, #4]
    9016:	460b      	mov	r3, r1
    9018:	70fb      	strb	r3, [r7, #3]
    901a:	4613      	mov	r3, r2
    901c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    901e:	78fb      	ldrb	r3, [r7, #3]
    9020:	687a      	ldr	r2, [r7, #4]
    9022:	3308      	adds	r3, #8
    9024:	015b      	lsls	r3, r3, #5
    9026:	4413      	add	r3, r2
    9028:	3307      	adds	r3, #7
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    902e:	7bfa      	ldrb	r2, [r7, #15]
    9030:	78bb      	ldrb	r3, [r7, #2]
    9032:	4013      	ands	r3, r2
    9034:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9036:	7bfb      	ldrb	r3, [r7, #15]
}
    9038:	4618      	mov	r0, r3
    903a:	3714      	adds	r7, #20
    903c:	46bd      	mov	sp, r7
    903e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9042:	4770      	bx	lr

00009044 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    9044:	b480      	push	{r7}
    9046:	b083      	sub	sp, #12
    9048:	af00      	add	r7, sp, #0
    904a:	6078      	str	r0, [r7, #4]
    904c:	460b      	mov	r3, r1
    904e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    9050:	78fb      	ldrb	r3, [r7, #3]
    9052:	687a      	ldr	r2, [r7, #4]
    9054:	3308      	adds	r3, #8
    9056:	015b      	lsls	r3, r3, #5
    9058:	4413      	add	r3, r2
    905a:	3307      	adds	r3, #7
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	b2db      	uxtb	r3, r3
}
    9060:	4618      	mov	r0, r3
    9062:	370c      	adds	r7, #12
    9064:	46bd      	mov	sp, r7
    9066:	f85d 7b04 	ldr.w	r7, [sp], #4
    906a:	4770      	bx	lr

0000906c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    906c:	b480      	push	{r7}
    906e:	b083      	sub	sp, #12
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
    9074:	460b      	mov	r3, r1
    9076:	70fb      	strb	r3, [r7, #3]
    9078:	4613      	mov	r3, r2
    907a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    907c:	78fb      	ldrb	r3, [r7, #3]
    907e:	687a      	ldr	r2, [r7, #4]
    9080:	3308      	adds	r3, #8
    9082:	015b      	lsls	r3, r3, #5
    9084:	4413      	add	r3, r2
    9086:	3307      	adds	r3, #7
    9088:	78ba      	ldrb	r2, [r7, #2]
    908a:	701a      	strb	r2, [r3, #0]
}
    908c:	bf00      	nop
    908e:	370c      	adds	r7, #12
    9090:	46bd      	mov	sp, r7
    9092:	f85d 7b04 	ldr.w	r7, [sp], #4
    9096:	4770      	bx	lr

00009098 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9098:	b480      	push	{r7}
    909a:	b083      	sub	sp, #12
    909c:	af00      	add	r7, sp, #0
    909e:	6078      	str	r0, [r7, #4]
    90a0:	460b      	mov	r3, r1
    90a2:	70fb      	strb	r3, [r7, #3]
    90a4:	4613      	mov	r3, r2
    90a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    90a8:	78fb      	ldrb	r3, [r7, #3]
    90aa:	687a      	ldr	r2, [r7, #4]
    90ac:	3308      	adds	r3, #8
    90ae:	015b      	lsls	r3, r3, #5
    90b0:	4413      	add	r3, r2
    90b2:	3305      	adds	r3, #5
    90b4:	78ba      	ldrb	r2, [r7, #2]
    90b6:	701a      	strb	r2, [r3, #0]
}
    90b8:	bf00      	nop
    90ba:	370c      	adds	r7, #12
    90bc:	46bd      	mov	sp, r7
    90be:	f85d 7b04 	ldr.w	r7, [sp], #4
    90c2:	4770      	bx	lr

000090c4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    90c4:	b480      	push	{r7}
    90c6:	b083      	sub	sp, #12
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	460b      	mov	r3, r1
    90ce:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    90d0:	78fb      	ldrb	r3, [r7, #3]
    90d2:	687a      	ldr	r2, [r7, #4]
    90d4:	3308      	adds	r3, #8
    90d6:	015b      	lsls	r3, r3, #5
    90d8:	4413      	add	r3, r2
    90da:	3306      	adds	r3, #6
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	b2db      	uxtb	r3, r3
}
    90e0:	4618      	mov	r0, r3
    90e2:	370c      	adds	r7, #12
    90e4:	46bd      	mov	sp, r7
    90e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ea:	4770      	bx	lr

000090ec <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    90ec:	b480      	push	{r7}
    90ee:	b083      	sub	sp, #12
    90f0:	af00      	add	r7, sp, #0
    90f2:	6078      	str	r0, [r7, #4]
    90f4:	460b      	mov	r3, r1
    90f6:	70fb      	strb	r3, [r7, #3]
    90f8:	4613      	mov	r3, r2
    90fa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    90fc:	78fb      	ldrb	r3, [r7, #3]
    90fe:	687a      	ldr	r2, [r7, #4]
    9100:	3308      	adds	r3, #8
    9102:	015b      	lsls	r3, r3, #5
    9104:	4413      	add	r3, r2
    9106:	3304      	adds	r3, #4
    9108:	78ba      	ldrb	r2, [r7, #2]
    910a:	701a      	strb	r2, [r3, #0]
}
    910c:	bf00      	nop
    910e:	370c      	adds	r7, #12
    9110:	46bd      	mov	sp, r7
    9112:	f85d 7b04 	ldr.w	r7, [sp], #4
    9116:	4770      	bx	lr

00009118 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9118:	b480      	push	{r7}
    911a:	b083      	sub	sp, #12
    911c:	af00      	add	r7, sp, #0
    911e:	6078      	str	r0, [r7, #4]
    9120:	460b      	mov	r3, r1
    9122:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    9124:	78fb      	ldrb	r3, [r7, #3]
    9126:	687a      	ldr	r2, [r7, #4]
    9128:	015b      	lsls	r3, r3, #5
    912a:	4413      	add	r3, r2
    912c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9130:	2210      	movs	r2, #16
    9132:	701a      	strb	r2, [r3, #0]
}
    9134:	bf00      	nop
    9136:	370c      	adds	r7, #12
    9138:	46bd      	mov	sp, r7
    913a:	f85d 7b04 	ldr.w	r7, [sp], #4
    913e:	4770      	bx	lr

00009140 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    9140:	b480      	push	{r7}
    9142:	b083      	sub	sp, #12
    9144:	af00      	add	r7, sp, #0
    9146:	6078      	str	r0, [r7, #4]
    9148:	460b      	mov	r3, r1
    914a:	70fb      	strb	r3, [r7, #3]
    914c:	4613      	mov	r3, r2
    914e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    9150:	78fb      	ldrb	r3, [r7, #3]
    9152:	687a      	ldr	r2, [r7, #4]
    9154:	015b      	lsls	r3, r3, #5
    9156:	4413      	add	r3, r2
    9158:	f203 1309 	addw	r3, r3, #265	; 0x109
    915c:	78ba      	ldrb	r2, [r7, #2]
    915e:	701a      	strb	r2, [r3, #0]
}
    9160:	bf00      	nop
    9162:	370c      	adds	r7, #12
    9164:	46bd      	mov	sp, r7
    9166:	f85d 7b04 	ldr.w	r7, [sp], #4
    916a:	4770      	bx	lr

0000916c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    916c:	b480      	push	{r7}
    916e:	b083      	sub	sp, #12
    9170:	af00      	add	r7, sp, #0
    9172:	6078      	str	r0, [r7, #4]
    9174:	460b      	mov	r3, r1
    9176:	70fb      	strb	r3, [r7, #3]
    9178:	4613      	mov	r3, r2
    917a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    917c:	78fb      	ldrb	r3, [r7, #3]
    917e:	687a      	ldr	r2, [r7, #4]
    9180:	015b      	lsls	r3, r3, #5
    9182:	4413      	add	r3, r2
    9184:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9188:	78ba      	ldrb	r2, [r7, #2]
    918a:	701a      	strb	r2, [r3, #0]
}
    918c:	bf00      	nop
    918e:	370c      	adds	r7, #12
    9190:	46bd      	mov	sp, r7
    9192:	f85d 7b04 	ldr.w	r7, [sp], #4
    9196:	4770      	bx	lr

00009198 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9198:	b480      	push	{r7}
    919a:	b085      	sub	sp, #20
    919c:	af00      	add	r7, sp, #0
    919e:	6078      	str	r0, [r7, #4]
    91a0:	460b      	mov	r3, r1
    91a2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91a4:	78fb      	ldrb	r3, [r7, #3]
    91a6:	687a      	ldr	r2, [r7, #4]
    91a8:	3308      	adds	r3, #8
    91aa:	015b      	lsls	r3, r3, #5
    91ac:	4413      	add	r3, r2
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    91b2:	7bfb      	ldrb	r3, [r7, #15]
    91b4:	f003 0307 	and.w	r3, r3, #7
    91b8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91ba:	7bfb      	ldrb	r3, [r7, #15]
}
    91bc:	4618      	mov	r0, r3
    91be:	3714      	adds	r7, #20
    91c0:	46bd      	mov	sp, r7
    91c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c6:	4770      	bx	lr

000091c8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    91c8:	b480      	push	{r7}
    91ca:	b085      	sub	sp, #20
    91cc:	af00      	add	r7, sp, #0
    91ce:	6078      	str	r0, [r7, #4]
    91d0:	460b      	mov	r3, r1
    91d2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91d4:	78fb      	ldrb	r3, [r7, #3]
    91d6:	687a      	ldr	r2, [r7, #4]
    91d8:	3308      	adds	r3, #8
    91da:	015b      	lsls	r3, r3, #5
    91dc:	4413      	add	r3, r2
    91de:	781b      	ldrb	r3, [r3, #0]
    91e0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    91e2:	7bfb      	ldrb	r3, [r7, #15]
    91e4:	091b      	lsrs	r3, r3, #4
    91e6:	b2db      	uxtb	r3, r3
    91e8:	f003 0307 	and.w	r3, r3, #7
    91ec:	73fb      	strb	r3, [r7, #15]
	return tmp;
    91ee:	7bfb      	ldrb	r3, [r7, #15]
}
    91f0:	4618      	mov	r0, r3
    91f2:	3714      	adds	r7, #20
    91f4:	46bd      	mov	sp, r7
    91f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91fa:	4770      	bx	lr

000091fc <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    91fc:	b480      	push	{r7}
    91fe:	b083      	sub	sp, #12
    9200:	af00      	add	r7, sp, #0
    9202:	6078      	str	r0, [r7, #4]
    9204:	460b      	mov	r3, r1
    9206:	70fb      	strb	r3, [r7, #3]
    9208:	4613      	mov	r3, r2
    920a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    920c:	78fb      	ldrb	r3, [r7, #3]
    920e:	687a      	ldr	r2, [r7, #4]
    9210:	3308      	adds	r3, #8
    9212:	015b      	lsls	r3, r3, #5
    9214:	4413      	add	r3, r2
    9216:	78ba      	ldrb	r2, [r7, #2]
    9218:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    921a:	bf00      	nop
    921c:	370c      	adds	r7, #12
    921e:	46bd      	mov	sp, r7
    9220:	f85d 7b04 	ldr.w	r7, [sp], #4
    9224:	4770      	bx	lr

00009226 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    9226:	b480      	push	{r7}
    9228:	b083      	sub	sp, #12
    922a:	af00      	add	r7, sp, #0
    922c:	6078      	str	r0, [r7, #4]
    922e:	460b      	mov	r3, r1
    9230:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9232:	78fb      	ldrb	r3, [r7, #3]
    9234:	687a      	ldr	r2, [r7, #4]
    9236:	3308      	adds	r3, #8
    9238:	015b      	lsls	r3, r3, #5
    923a:	4413      	add	r3, r2
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	b2db      	uxtb	r3, r3
}
    9240:	4618      	mov	r0, r3
    9242:	370c      	adds	r7, #12
    9244:	46bd      	mov	sp, r7
    9246:	f85d 7b04 	ldr.w	r7, [sp], #4
    924a:	4770      	bx	lr

0000924c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    924c:	b480      	push	{r7}
    924e:	b083      	sub	sp, #12
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	8b9b      	ldrh	r3, [r3, #28]
    9258:	b29b      	uxth	r3, r3
}
    925a:	4618      	mov	r0, r3
    925c:	370c      	adds	r7, #12
    925e:	46bd      	mov	sp, r7
    9260:	f85d 7b04 	ldr.w	r7, [sp], #4
    9264:	4770      	bx	lr

00009266 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    9266:	b480      	push	{r7}
    9268:	b083      	sub	sp, #12
    926a:	af00      	add	r7, sp, #0
    926c:	6078      	str	r0, [r7, #4]
    926e:	460b      	mov	r3, r1
    9270:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    9272:	687b      	ldr	r3, [r7, #4]
    9274:	887a      	ldrh	r2, [r7, #2]
    9276:	839a      	strh	r2, [r3, #28]
}
    9278:	bf00      	nop
    927a:	370c      	adds	r7, #12
    927c:	46bd      	mov	sp, r7
    927e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9282:	4770      	bx	lr

00009284 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9284:	b480      	push	{r7}
    9286:	b083      	sub	sp, #12
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
    928c:	460b      	mov	r3, r1
    928e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	887a      	ldrh	r2, [r7, #2]
    9294:	831a      	strh	r2, [r3, #24]
}
    9296:	bf00      	nop
    9298:	370c      	adds	r7, #12
    929a:	46bd      	mov	sp, r7
    929c:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a0:	4770      	bx	lr

000092a2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    92a2:	b480      	push	{r7}
    92a4:	b083      	sub	sp, #12
    92a6:	af00      	add	r7, sp, #0
    92a8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    92aa:	687b      	ldr	r3, [r7, #4]
    92ac:	8b1b      	ldrh	r3, [r3, #24]
    92ae:	b29b      	uxth	r3, r3
}
    92b0:	4618      	mov	r0, r3
    92b2:	370c      	adds	r7, #12
    92b4:	46bd      	mov	sp, r7
    92b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ba:	4770      	bx	lr

000092bc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    92bc:	b480      	push	{r7}
    92be:	b083      	sub	sp, #12
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
    92c4:	460b      	mov	r3, r1
    92c6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    92c8:	687b      	ldr	r3, [r7, #4]
    92ca:	887a      	ldrh	r2, [r7, #2]
    92cc:	829a      	strh	r2, [r3, #20]
}
    92ce:	bf00      	nop
    92d0:	370c      	adds	r7, #12
    92d2:	46bd      	mov	sp, r7
    92d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92d8:	4770      	bx	lr

000092da <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    92da:	b480      	push	{r7}
    92dc:	b085      	sub	sp, #20
    92de:	af00      	add	r7, sp, #0
    92e0:	6078      	str	r0, [r7, #4]
    92e2:	460b      	mov	r3, r1
    92e4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    92e6:	687b      	ldr	r3, [r7, #4]
    92e8:	789b      	ldrb	r3, [r3, #2]
    92ea:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92ec:	7bfa      	ldrb	r2, [r7, #15]
    92ee:	78fb      	ldrb	r3, [r7, #3]
    92f0:	4013      	ands	r3, r2
    92f2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92f4:	7bfb      	ldrb	r3, [r7, #15]
}
    92f6:	4618      	mov	r0, r3
    92f8:	3714      	adds	r7, #20
    92fa:	46bd      	mov	sp, r7
    92fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9300:	4770      	bx	lr
	...

00009304 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9304:	b580      	push	{r7, lr}
    9306:	b082      	sub	sp, #8
    9308:	af00      	add	r7, sp, #0
    930a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	781b      	ldrb	r3, [r3, #0]
    9310:	b2db      	uxtb	r3, r3
    9312:	f023 0302 	bic.w	r3, r3, #2
    9316:	b2da      	uxtb	r2, r3
    9318:	687b      	ldr	r3, [r7, #4]
    931a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    931c:	2103      	movs	r1, #3
    931e:	6878      	ldr	r0, [r7, #4]
    9320:	4b02      	ldr	r3, [pc, #8]	; (932c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9322:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9324:	bf00      	nop
    9326:	3708      	adds	r7, #8
    9328:	46bd      	mov	sp, r7
    932a:	bd80      	pop	{r7, pc}
    932c:	00008fb7 	.word	0x00008fb7

00009330 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9330:	b580      	push	{r7, lr}
    9332:	b084      	sub	sp, #16
    9334:	af00      	add	r7, sp, #0
    9336:	6078      	str	r0, [r7, #4]
    9338:	460b      	mov	r3, r1
    933a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    933c:	2103      	movs	r1, #3
    933e:	6878      	ldr	r0, [r7, #4]
    9340:	4b06      	ldr	r3, [pc, #24]	; (935c <hri_usb_get_CTRLA_reg+0x2c>)
    9342:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	781b      	ldrb	r3, [r3, #0]
    9348:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    934a:	7bfa      	ldrb	r2, [r7, #15]
    934c:	78fb      	ldrb	r3, [r7, #3]
    934e:	4013      	ands	r3, r2
    9350:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9352:	7bfb      	ldrb	r3, [r7, #15]
}
    9354:	4618      	mov	r0, r3
    9356:	3710      	adds	r7, #16
    9358:	46bd      	mov	sp, r7
    935a:	bd80      	pop	{r7, pc}
    935c:	00008fb7 	.word	0x00008fb7

00009360 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9360:	b580      	push	{r7, lr}
    9362:	b082      	sub	sp, #8
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
    9368:	460b      	mov	r3, r1
    936a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    936c:	687b      	ldr	r3, [r7, #4]
    936e:	78fa      	ldrb	r2, [r7, #3]
    9370:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9372:	2103      	movs	r1, #3
    9374:	6878      	ldr	r0, [r7, #4]
    9376:	4b03      	ldr	r3, [pc, #12]	; (9384 <hri_usb_write_CTRLA_reg+0x24>)
    9378:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    937a:	bf00      	nop
    937c:	3708      	adds	r7, #8
    937e:	46bd      	mov	sp, r7
    9380:	bd80      	pop	{r7, pc}
    9382:	bf00      	nop
    9384:	00008fb7 	.word	0x00008fb7

00009388 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9388:	b580      	push	{r7, lr}
    938a:	b082      	sub	sp, #8
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9390:	2103      	movs	r1, #3
    9392:	6878      	ldr	r0, [r7, #4]
    9394:	4b04      	ldr	r3, [pc, #16]	; (93a8 <hri_usb_read_CTRLA_reg+0x20>)
    9396:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	781b      	ldrb	r3, [r3, #0]
    939c:	b2db      	uxtb	r3, r3
}
    939e:	4618      	mov	r0, r3
    93a0:	3708      	adds	r7, #8
    93a2:	46bd      	mov	sp, r7
    93a4:	bd80      	pop	{r7, pc}
    93a6:	bf00      	nop
    93a8:	00008fb7 	.word	0x00008fb7

000093ac <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    93ac:	b480      	push	{r7}
    93ae:	b083      	sub	sp, #12
    93b0:	af00      	add	r7, sp, #0
    93b2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    93b4:	687b      	ldr	r3, [r7, #4]
    93b6:	891b      	ldrh	r3, [r3, #8]
    93b8:	b29b      	uxth	r3, r3
    93ba:	f023 0301 	bic.w	r3, r3, #1
    93be:	b29a      	uxth	r2, r3
    93c0:	687b      	ldr	r3, [r7, #4]
    93c2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    93c4:	bf00      	nop
    93c6:	370c      	adds	r7, #12
    93c8:	46bd      	mov	sp, r7
    93ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ce:	4770      	bx	lr

000093d0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    93d0:	b480      	push	{r7}
    93d2:	b083      	sub	sp, #12
    93d4:	af00      	add	r7, sp, #0
    93d6:	6078      	str	r0, [r7, #4]
    93d8:	460b      	mov	r3, r1
    93da:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	887a      	ldrh	r2, [r7, #2]
    93e0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    93e2:	bf00      	nop
    93e4:	370c      	adds	r7, #12
    93e6:	46bd      	mov	sp, r7
    93e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ec:	4770      	bx	lr

000093ee <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    93ee:	b480      	push	{r7}
    93f0:	b083      	sub	sp, #12
    93f2:	af00      	add	r7, sp, #0
    93f4:	6078      	str	r0, [r7, #4]
    93f6:	460b      	mov	r3, r1
    93f8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	78fa      	ldrb	r2, [r7, #3]
    93fe:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    9400:	bf00      	nop
    9402:	370c      	adds	r7, #12
    9404:	46bd      	mov	sp, r7
    9406:	f85d 7b04 	ldr.w	r7, [sp], #4
    940a:	4770      	bx	lr

0000940c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    940c:	b480      	push	{r7}
    940e:	b083      	sub	sp, #12
    9410:	af00      	add	r7, sp, #0
    9412:	6078      	str	r0, [r7, #4]
    9414:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9416:	687b      	ldr	r3, [r7, #4]
    9418:	683a      	ldr	r2, [r7, #0]
    941a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    941c:	bf00      	nop
    941e:	370c      	adds	r7, #12
    9420:	46bd      	mov	sp, r7
    9422:	f85d 7b04 	ldr.w	r7, [sp], #4
    9426:	4770      	bx	lr

00009428 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    9428:	b480      	push	{r7}
    942a:	b083      	sub	sp, #12
    942c:	af00      	add	r7, sp, #0
    942e:	6078      	str	r0, [r7, #4]
    9430:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9432:	2300      	movs	r3, #0
}
    9434:	4618      	mov	r0, r3
    9436:	370c      	adds	r7, #12
    9438:	46bd      	mov	sp, r7
    943a:	f85d 7b04 	ldr.w	r7, [sp], #4
    943e:	4770      	bx	lr

00009440 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9440:	b480      	push	{r7}
    9442:	b085      	sub	sp, #20
    9444:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    9446:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    944a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    944c:	4b28      	ldr	r3, [pc, #160]	; (94f0 <_usb_load_calib+0xb0>)
    944e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9450:	f003 031f 	and.w	r3, r3, #31
    9454:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    9456:	4b26      	ldr	r3, [pc, #152]	; (94f0 <_usb_load_calib+0xb0>)
    9458:	681b      	ldr	r3, [r3, #0]
    945a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    945c:	f003 031f 	and.w	r3, r3, #31
    9460:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9462:	4b23      	ldr	r3, [pc, #140]	; (94f0 <_usb_load_calib+0xb0>)
    9464:	681b      	ldr	r3, [r3, #0]
    9466:	0a9b      	lsrs	r3, r3, #10
    9468:	f003 0307 	and.w	r3, r3, #7
    946c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    946e:	68fb      	ldr	r3, [r7, #12]
    9470:	2b00      	cmp	r3, #0
    9472:	d002      	beq.n	947a <_usb_load_calib+0x3a>
    9474:	68fb      	ldr	r3, [r7, #12]
    9476:	2b1f      	cmp	r3, #31
    9478:	d101      	bne.n	947e <_usb_load_calib+0x3e>
		pad_transn = 9;
    947a:	2309      	movs	r3, #9
    947c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    947e:	68bb      	ldr	r3, [r7, #8]
    9480:	2b00      	cmp	r3, #0
    9482:	d002      	beq.n	948a <_usb_load_calib+0x4a>
    9484:	68bb      	ldr	r3, [r7, #8]
    9486:	2b1f      	cmp	r3, #31
    9488:	d101      	bne.n	948e <_usb_load_calib+0x4e>
		pad_transp = 25;
    948a:	2319      	movs	r3, #25
    948c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	2b00      	cmp	r3, #0
    9492:	d002      	beq.n	949a <_usb_load_calib+0x5a>
    9494:	687b      	ldr	r3, [r7, #4]
    9496:	2b07      	cmp	r3, #7
    9498:	d101      	bne.n	949e <_usb_load_calib+0x5e>
		pad_trim = 6;
    949a:	2306      	movs	r3, #6
    949c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    949e:	68fb      	ldr	r3, [r7, #12]
    94a0:	b29b      	uxth	r3, r3
    94a2:	019b      	lsls	r3, r3, #6
    94a4:	b29b      	uxth	r3, r3
    94a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    94aa:	b29a      	uxth	r2, r3
    94ac:	68bb      	ldr	r3, [r7, #8]
    94ae:	b29b      	uxth	r3, r3
    94b0:	f003 031f 	and.w	r3, r3, #31
    94b4:	b29b      	uxth	r3, r3
    94b6:	4313      	orrs	r3, r2
    94b8:	b29a      	uxth	r2, r3
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	b29b      	uxth	r3, r3
    94be:	031b      	lsls	r3, r3, #12
    94c0:	b29b      	uxth	r3, r3
    94c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    94c6:	b29b      	uxth	r3, r3
    94c8:	4313      	orrs	r3, r2
    94ca:	b29a      	uxth	r2, r3
    94cc:	683b      	ldr	r3, [r7, #0]
    94ce:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    94d0:	683a      	ldr	r2, [r7, #0]
    94d2:	78d3      	ldrb	r3, [r2, #3]
    94d4:	f043 0303 	orr.w	r3, r3, #3
    94d8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    94da:	683a      	ldr	r2, [r7, #0]
    94dc:	78d3      	ldrb	r3, [r2, #3]
    94de:	f043 030c 	orr.w	r3, r3, #12
    94e2:	70d3      	strb	r3, [r2, #3]
}
    94e4:	bf00      	nop
    94e6:	3714      	adds	r7, #20
    94e8:	46bd      	mov	sp, r7
    94ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    94ee:	4770      	bx	lr
    94f0:	00800084 	.word	0x00800084

000094f4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    94f8:	bf00      	nop
    94fa:	2203      	movs	r2, #3
    94fc:	2100      	movs	r1, #0
    94fe:	4804      	ldr	r0, [pc, #16]	; (9510 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9500:	4b04      	ldr	r3, [pc, #16]	; (9514 <_usb_d_dev_wait_dpll_rdy+0x20>)
    9502:	4798      	blx	r3
    9504:	4603      	mov	r3, r0
    9506:	2b03      	cmp	r3, #3
    9508:	d1f7      	bne.n	94fa <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    950a:	bf00      	nop
    950c:	bd80      	pop	{r7, pc}
    950e:	bf00      	nop
    9510:	40001000 	.word	0x40001000
    9514:	00008f29 	.word	0x00008f29

00009518 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9518:	b580      	push	{r7, lr}
    951a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    951c:	480e      	ldr	r0, [pc, #56]	; (9558 <_usb_d_dev_wait_dfll_rdy+0x40>)
    951e:	4b0f      	ldr	r3, [pc, #60]	; (955c <_usb_d_dev_wait_dfll_rdy+0x44>)
    9520:	4798      	blx	r3
    9522:	4603      	mov	r3, r0
    9524:	2b00      	cmp	r3, #0
    9526:	d00a      	beq.n	953e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9528:	bf00      	nop
    952a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    952e:	480a      	ldr	r0, [pc, #40]	; (9558 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9530:	4b0b      	ldr	r3, [pc, #44]	; (9560 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9532:	4798      	blx	r3
    9534:	4603      	mov	r3, r0
    9536:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    953a:	d1f6      	bne.n	952a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    953c:	e009      	b.n	9552 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    953e:	bf00      	nop
    9540:	f44f 7180 	mov.w	r1, #256	; 0x100
    9544:	4804      	ldr	r0, [pc, #16]	; (9558 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9546:	4b06      	ldr	r3, [pc, #24]	; (9560 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9548:	4798      	blx	r3
    954a:	4603      	mov	r3, r0
    954c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9550:	d1f6      	bne.n	9540 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9552:	bf00      	nop
    9554:	bd80      	pop	{r7, pc}
    9556:	bf00      	nop
    9558:	40001000 	.word	0x40001000
    955c:	00008f87 	.word	0x00008f87
    9560:	00008f61 	.word	0x00008f61

00009564 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9564:	b580      	push	{r7, lr}
    9566:	b082      	sub	sp, #8
    9568:	af00      	add	r7, sp, #0
    956a:	4603      	mov	r3, r0
    956c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    956e:	79fb      	ldrb	r3, [r7, #7]
    9570:	2b00      	cmp	r3, #0
    9572:	d102      	bne.n	957a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9574:	4b05      	ldr	r3, [pc, #20]	; (958c <_usb_d_dev_wait_clk_rdy+0x28>)
    9576:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9578:	e004      	b.n	9584 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    957a:	79fb      	ldrb	r3, [r7, #7]
    957c:	2b01      	cmp	r3, #1
    957e:	d101      	bne.n	9584 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9580:	4b03      	ldr	r3, [pc, #12]	; (9590 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9582:	4798      	blx	r3
}
    9584:	bf00      	nop
    9586:	3708      	adds	r7, #8
    9588:	46bd      	mov	sp, r7
    958a:	bd80      	pop	{r7, pc}
    958c:	00009519 	.word	0x00009519
    9590:	000094f5 	.word	0x000094f5

00009594 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9594:	b580      	push	{r7, lr}
    9596:	b082      	sub	sp, #8
    9598:	af00      	add	r7, sp, #0
    959a:	4603      	mov	r3, r0
    959c:	6039      	str	r1, [r7, #0]
    959e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    95a0:	683b      	ldr	r3, [r7, #0]
    95a2:	b2da      	uxtb	r2, r3
    95a4:	79fb      	ldrb	r3, [r7, #7]
    95a6:	4619      	mov	r1, r3
    95a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95ac:	4b02      	ldr	r3, [pc, #8]	; (95b8 <_usbd_ep_int_ack+0x24>)
    95ae:	4798      	blx	r3
}
    95b0:	bf00      	nop
    95b2:	3708      	adds	r7, #8
    95b4:	46bd      	mov	sp, r7
    95b6:	bd80      	pop	{r7, pc}
    95b8:	0000906d 	.word	0x0000906d

000095bc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    95bc:	b580      	push	{r7, lr}
    95be:	b082      	sub	sp, #8
    95c0:	af00      	add	r7, sp, #0
    95c2:	4603      	mov	r3, r0
    95c4:	6039      	str	r1, [r7, #0]
    95c6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    95c8:	683b      	ldr	r3, [r7, #0]
    95ca:	b2da      	uxtb	r2, r3
    95cc:	79fb      	ldrb	r3, [r7, #7]
    95ce:	4619      	mov	r1, r3
    95d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95d4:	4b02      	ldr	r3, [pc, #8]	; (95e0 <_usbd_ep_int_en+0x24>)
    95d6:	4798      	blx	r3
}
    95d8:	bf00      	nop
    95da:	3708      	adds	r7, #8
    95dc:	46bd      	mov	sp, r7
    95de:	bd80      	pop	{r7, pc}
    95e0:	00009141 	.word	0x00009141

000095e4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    95e4:	b580      	push	{r7, lr}
    95e6:	b082      	sub	sp, #8
    95e8:	af00      	add	r7, sp, #0
    95ea:	4603      	mov	r3, r0
    95ec:	6039      	str	r1, [r7, #0]
    95ee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    95f0:	683b      	ldr	r3, [r7, #0]
    95f2:	b2da      	uxtb	r2, r3
    95f4:	79fb      	ldrb	r3, [r7, #7]
    95f6:	4619      	mov	r1, r3
    95f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95fc:	4b02      	ldr	r3, [pc, #8]	; (9608 <_usbd_ep_int_dis+0x24>)
    95fe:	4798      	blx	r3
}
    9600:	bf00      	nop
    9602:	3708      	adds	r7, #8
    9604:	46bd      	mov	sp, r7
    9606:	bd80      	pop	{r7, pc}
    9608:	0000916d 	.word	0x0000916d

0000960c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    960c:	b580      	push	{r7, lr}
    960e:	b082      	sub	sp, #8
    9610:	af00      	add	r7, sp, #0
    9612:	4603      	mov	r3, r0
    9614:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9616:	79fb      	ldrb	r3, [r7, #7]
    9618:	4619      	mov	r1, r3
    961a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    961e:	4b06      	ldr	r3, [pc, #24]	; (9638 <_usbd_ep_is_ctrl+0x2c>)
    9620:	4798      	blx	r3
    9622:	4603      	mov	r3, r0
    9624:	2b11      	cmp	r3, #17
    9626:	bf0c      	ite	eq
    9628:	2301      	moveq	r3, #1
    962a:	2300      	movne	r3, #0
    962c:	b2db      	uxtb	r3, r3
}
    962e:	4618      	mov	r0, r3
    9630:	3708      	adds	r7, #8
    9632:	46bd      	mov	sp, r7
    9634:	bd80      	pop	{r7, pc}
    9636:	bf00      	nop
    9638:	00009227 	.word	0x00009227

0000963c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    963c:	b580      	push	{r7, lr}
    963e:	b082      	sub	sp, #8
    9640:	af00      	add	r7, sp, #0
    9642:	4603      	mov	r3, r0
    9644:	71fb      	strb	r3, [r7, #7]
    9646:	460b      	mov	r3, r1
    9648:	71bb      	strb	r3, [r7, #6]
    964a:	4613      	mov	r3, r2
    964c:	717b      	strb	r3, [r7, #5]
	if (st) {
    964e:	797b      	ldrb	r3, [r7, #5]
    9650:	2b00      	cmp	r3, #0
    9652:	d00b      	beq.n	966c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9654:	79bb      	ldrb	r3, [r7, #6]
    9656:	2210      	movs	r2, #16
    9658:	fa02 f303 	lsl.w	r3, r2, r3
    965c:	b2da      	uxtb	r2, r3
    965e:	79fb      	ldrb	r3, [r7, #7]
    9660:	4619      	mov	r1, r3
    9662:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9666:	4b09      	ldr	r3, [pc, #36]	; (968c <_usbd_ep_set_stall+0x50>)
    9668:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    966a:	e00a      	b.n	9682 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    966c:	79bb      	ldrb	r3, [r7, #6]
    966e:	2210      	movs	r2, #16
    9670:	fa02 f303 	lsl.w	r3, r2, r3
    9674:	b2da      	uxtb	r2, r3
    9676:	79fb      	ldrb	r3, [r7, #7]
    9678:	4619      	mov	r1, r3
    967a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    967e:	4b04      	ldr	r3, [pc, #16]	; (9690 <_usbd_ep_set_stall+0x54>)
    9680:	4798      	blx	r3
}
    9682:	bf00      	nop
    9684:	3708      	adds	r7, #8
    9686:	46bd      	mov	sp, r7
    9688:	bd80      	pop	{r7, pc}
    968a:	bf00      	nop
    968c:	00009099 	.word	0x00009099
    9690:	000090ed 	.word	0x000090ed

00009694 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9694:	b580      	push	{r7, lr}
    9696:	b084      	sub	sp, #16
    9698:	af00      	add	r7, sp, #0
    969a:	4603      	mov	r3, r0
    969c:	460a      	mov	r2, r1
    969e:	71fb      	strb	r3, [r7, #7]
    96a0:	4613      	mov	r3, r2
    96a2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    96a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96a8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    96aa:	79fb      	ldrb	r3, [r7, #7]
    96ac:	4619      	mov	r1, r3
    96ae:	68f8      	ldr	r0, [r7, #12]
    96b0:	4b08      	ldr	r3, [pc, #32]	; (96d4 <_usbd_ep_is_stalled+0x40>)
    96b2:	4798      	blx	r3
    96b4:	4603      	mov	r3, r0
    96b6:	4619      	mov	r1, r3
    96b8:	79bb      	ldrb	r3, [r7, #6]
    96ba:	2210      	movs	r2, #16
    96bc:	fa02 f303 	lsl.w	r3, r2, r3
    96c0:	400b      	ands	r3, r1
    96c2:	2b00      	cmp	r3, #0
    96c4:	bf14      	ite	ne
    96c6:	2301      	movne	r3, #1
    96c8:	2300      	moveq	r3, #0
    96ca:	b2db      	uxtb	r3, r3
}
    96cc:	4618      	mov	r0, r3
    96ce:	3710      	adds	r7, #16
    96d0:	46bd      	mov	sp, r7
    96d2:	bd80      	pop	{r7, pc}
    96d4:	000090c5 	.word	0x000090c5

000096d8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    96d8:	b580      	push	{r7, lr}
    96da:	b084      	sub	sp, #16
    96dc:	af00      	add	r7, sp, #0
    96de:	4603      	mov	r3, r0
    96e0:	460a      	mov	r2, r1
    96e2:	71fb      	strb	r3, [r7, #7]
    96e4:	4613      	mov	r3, r2
    96e6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    96e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96ec:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96ee:	79fb      	ldrb	r3, [r7, #7]
    96f0:	4619      	mov	r1, r3
    96f2:	68f8      	ldr	r0, [r7, #12]
    96f4:	4b08      	ldr	r3, [pc, #32]	; (9718 <_usbd_ep_is_stall_sent+0x40>)
    96f6:	4798      	blx	r3
    96f8:	4603      	mov	r3, r0
    96fa:	4619      	mov	r1, r3
    96fc:	79bb      	ldrb	r3, [r7, #6]
    96fe:	2220      	movs	r2, #32
    9700:	fa02 f303 	lsl.w	r3, r2, r3
    9704:	400b      	ands	r3, r1
    9706:	2b00      	cmp	r3, #0
    9708:	bf14      	ite	ne
    970a:	2301      	movne	r3, #1
    970c:	2300      	moveq	r3, #0
    970e:	b2db      	uxtb	r3, r3
}
    9710:	4618      	mov	r0, r3
    9712:	3710      	adds	r7, #16
    9714:	46bd      	mov	sp, r7
    9716:	bd80      	pop	{r7, pc}
    9718:	00009045 	.word	0x00009045

0000971c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    971c:	b580      	push	{r7, lr}
    971e:	b082      	sub	sp, #8
    9720:	af00      	add	r7, sp, #0
    9722:	4603      	mov	r3, r0
    9724:	460a      	mov	r2, r1
    9726:	71fb      	strb	r3, [r7, #7]
    9728:	4613      	mov	r3, r2
    972a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    972c:	79bb      	ldrb	r3, [r7, #6]
    972e:	2220      	movs	r2, #32
    9730:	409a      	lsls	r2, r3
    9732:	79fb      	ldrb	r3, [r7, #7]
    9734:	4611      	mov	r1, r2
    9736:	4618      	mov	r0, r3
    9738:	4b02      	ldr	r3, [pc, #8]	; (9744 <_usbd_ep_ack_stall+0x28>)
    973a:	4798      	blx	r3
}
    973c:	bf00      	nop
    973e:	3708      	adds	r7, #8
    9740:	46bd      	mov	sp, r7
    9742:	bd80      	pop	{r7, pc}
    9744:	00009595 	.word	0x00009595

00009748 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9748:	b580      	push	{r7, lr}
    974a:	b082      	sub	sp, #8
    974c:	af00      	add	r7, sp, #0
    974e:	4603      	mov	r3, r0
    9750:	71fb      	strb	r3, [r7, #7]
    9752:	460b      	mov	r3, r1
    9754:	71bb      	strb	r3, [r7, #6]
    9756:	4613      	mov	r3, r2
    9758:	717b      	strb	r3, [r7, #5]
	if (en) {
    975a:	797b      	ldrb	r3, [r7, #5]
    975c:	2b00      	cmp	r3, #0
    975e:	d008      	beq.n	9772 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9760:	79bb      	ldrb	r3, [r7, #6]
    9762:	2220      	movs	r2, #32
    9764:	409a      	lsls	r2, r3
    9766:	79fb      	ldrb	r3, [r7, #7]
    9768:	4611      	mov	r1, r2
    976a:	4618      	mov	r0, r3
    976c:	4b07      	ldr	r3, [pc, #28]	; (978c <_usbd_ep_int_stall_en+0x44>)
    976e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9770:	e007      	b.n	9782 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9772:	79bb      	ldrb	r3, [r7, #6]
    9774:	2220      	movs	r2, #32
    9776:	409a      	lsls	r2, r3
    9778:	79fb      	ldrb	r3, [r7, #7]
    977a:	4611      	mov	r1, r2
    977c:	4618      	mov	r0, r3
    977e:	4b04      	ldr	r3, [pc, #16]	; (9790 <_usbd_ep_int_stall_en+0x48>)
    9780:	4798      	blx	r3
}
    9782:	bf00      	nop
    9784:	3708      	adds	r7, #8
    9786:	46bd      	mov	sp, r7
    9788:	bd80      	pop	{r7, pc}
    978a:	bf00      	nop
    978c:	000095bd 	.word	0x000095bd
    9790:	000095e5 	.word	0x000095e5

00009794 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9794:	b580      	push	{r7, lr}
    9796:	b082      	sub	sp, #8
    9798:	af00      	add	r7, sp, #0
    979a:	4603      	mov	r3, r0
    979c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    979e:	79fb      	ldrb	r3, [r7, #7]
    97a0:	4619      	mov	r1, r3
    97a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97a6:	4b03      	ldr	r3, [pc, #12]	; (97b4 <_usbd_ep_stop_setup+0x20>)
    97a8:	4798      	blx	r3
}
    97aa:	bf00      	nop
    97ac:	3708      	adds	r7, #8
    97ae:	46bd      	mov	sp, r7
    97b0:	bd80      	pop	{r7, pc}
    97b2:	bf00      	nop
    97b4:	00009119 	.word	0x00009119

000097b8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	4603      	mov	r3, r0
    97c0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    97c2:	79fb      	ldrb	r3, [r7, #7]
    97c4:	2210      	movs	r2, #16
    97c6:	4619      	mov	r1, r3
    97c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97cc:	4b05      	ldr	r3, [pc, #20]	; (97e4 <_usbd_ep_is_setup+0x2c>)
    97ce:	4798      	blx	r3
    97d0:	4603      	mov	r3, r0
    97d2:	2b00      	cmp	r3, #0
    97d4:	bf14      	ite	ne
    97d6:	2301      	movne	r3, #1
    97d8:	2300      	moveq	r3, #0
    97da:	b2db      	uxtb	r3, r3
}
    97dc:	4618      	mov	r0, r3
    97de:	3708      	adds	r7, #8
    97e0:	46bd      	mov	sp, r7
    97e2:	bd80      	pop	{r7, pc}
    97e4:	0000900f 	.word	0x0000900f

000097e8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b082      	sub	sp, #8
    97ec:	af00      	add	r7, sp, #0
    97ee:	4603      	mov	r3, r0
    97f0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    97f2:	79fb      	ldrb	r3, [r7, #7]
    97f4:	2110      	movs	r1, #16
    97f6:	4618      	mov	r0, r3
    97f8:	4b02      	ldr	r3, [pc, #8]	; (9804 <_usbd_ep_ack_setup+0x1c>)
    97fa:	4798      	blx	r3
}
    97fc:	bf00      	nop
    97fe:	3708      	adds	r7, #8
    9800:	46bd      	mov	sp, r7
    9802:	bd80      	pop	{r7, pc}
    9804:	00009595 	.word	0x00009595

00009808 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9808:	b580      	push	{r7, lr}
    980a:	b082      	sub	sp, #8
    980c:	af00      	add	r7, sp, #0
    980e:	4603      	mov	r3, r0
    9810:	71fb      	strb	r3, [r7, #7]
    9812:	460b      	mov	r3, r1
    9814:	71bb      	strb	r3, [r7, #6]
    9816:	4613      	mov	r3, r2
    9818:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    981a:	797b      	ldrb	r3, [r7, #5]
    981c:	2b00      	cmp	r3, #0
    981e:	d00b      	beq.n	9838 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9820:	79bb      	ldrb	r3, [r7, #6]
    9822:	2201      	movs	r2, #1
    9824:	fa02 f303 	lsl.w	r3, r2, r3
    9828:	b2da      	uxtb	r2, r3
    982a:	79fb      	ldrb	r3, [r7, #7]
    982c:	4619      	mov	r1, r3
    982e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9832:	4b09      	ldr	r3, [pc, #36]	; (9858 <_usbd_ep_set_toggle+0x50>)
    9834:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    9836:	e00a      	b.n	984e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9838:	79bb      	ldrb	r3, [r7, #6]
    983a:	2201      	movs	r2, #1
    983c:	fa02 f303 	lsl.w	r3, r2, r3
    9840:	b2da      	uxtb	r2, r3
    9842:	79fb      	ldrb	r3, [r7, #7]
    9844:	4619      	mov	r1, r3
    9846:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    984a:	4b04      	ldr	r3, [pc, #16]	; (985c <_usbd_ep_set_toggle+0x54>)
    984c:	4798      	blx	r3
}
    984e:	bf00      	nop
    9850:	3708      	adds	r7, #8
    9852:	46bd      	mov	sp, r7
    9854:	bd80      	pop	{r7, pc}
    9856:	bf00      	nop
    9858:	00009099 	.word	0x00009099
    985c:	000090ed 	.word	0x000090ed

00009860 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9860:	b580      	push	{r7, lr}
    9862:	b082      	sub	sp, #8
    9864:	af00      	add	r7, sp, #0
    9866:	4603      	mov	r3, r0
    9868:	460a      	mov	r2, r1
    986a:	71fb      	strb	r3, [r7, #7]
    986c:	4613      	mov	r3, r2
    986e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9870:	79bb      	ldrb	r3, [r7, #6]
    9872:	2201      	movs	r2, #1
    9874:	409a      	lsls	r2, r3
    9876:	79fb      	ldrb	r3, [r7, #7]
    9878:	4611      	mov	r1, r2
    987a:	4618      	mov	r0, r3
    987c:	4b02      	ldr	r3, [pc, #8]	; (9888 <_usbd_ep_ack_io_cpt+0x28>)
    987e:	4798      	blx	r3
}
    9880:	bf00      	nop
    9882:	3708      	adds	r7, #8
    9884:	46bd      	mov	sp, r7
    9886:	bd80      	pop	{r7, pc}
    9888:	00009595 	.word	0x00009595

0000988c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    988c:	b480      	push	{r7}
    988e:	b085      	sub	sp, #20
    9890:	af00      	add	r7, sp, #0
    9892:	4603      	mov	r3, r0
    9894:	603a      	str	r2, [r7, #0]
    9896:	71fb      	strb	r3, [r7, #7]
    9898:	460b      	mov	r3, r1
    989a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    989c:	79fa      	ldrb	r2, [r7, #7]
    989e:	79bb      	ldrb	r3, [r7, #6]
    98a0:	0052      	lsls	r2, r2, #1
    98a2:	4413      	add	r3, r2
    98a4:	011b      	lsls	r3, r3, #4
    98a6:	4a06      	ldr	r2, [pc, #24]	; (98c0 <_usbd_ep_set_buf+0x34>)
    98a8:	4413      	add	r3, r2
    98aa:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    98ac:	68fb      	ldr	r3, [r7, #12]
    98ae:	683a      	ldr	r2, [r7, #0]
    98b0:	601a      	str	r2, [r3, #0]
}
    98b2:	bf00      	nop
    98b4:	3714      	adds	r7, #20
    98b6:	46bd      	mov	sp, r7
    98b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    98bc:	4770      	bx	lr
    98be:	bf00      	nop
    98c0:	20000dac 	.word	0x20000dac

000098c4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    98c4:	b480      	push	{r7}
    98c6:	b085      	sub	sp, #20
    98c8:	af00      	add	r7, sp, #0
    98ca:	4603      	mov	r3, r0
    98cc:	71fb      	strb	r3, [r7, #7]
    98ce:	460b      	mov	r3, r1
    98d0:	71bb      	strb	r3, [r7, #6]
    98d2:	4613      	mov	r3, r2
    98d4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98d6:	79fa      	ldrb	r2, [r7, #7]
    98d8:	79bb      	ldrb	r3, [r7, #6]
    98da:	0052      	lsls	r2, r2, #1
    98dc:	4413      	add	r3, r2
    98de:	011b      	lsls	r3, r3, #4
    98e0:	4a08      	ldr	r2, [pc, #32]	; (9904 <_usbd_ep_set_in_count+0x40>)
    98e2:	4413      	add	r3, r2
    98e4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    98e6:	88bb      	ldrh	r3, [r7, #4]
    98e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98ec:	b299      	uxth	r1, r3
    98ee:	68fa      	ldr	r2, [r7, #12]
    98f0:	6853      	ldr	r3, [r2, #4]
    98f2:	f361 339b 	bfi	r3, r1, #14, #14
    98f6:	6053      	str	r3, [r2, #4]
}
    98f8:	bf00      	nop
    98fa:	3714      	adds	r7, #20
    98fc:	46bd      	mov	sp, r7
    98fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9902:	4770      	bx	lr
    9904:	20000dac 	.word	0x20000dac

00009908 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9908:	b480      	push	{r7}
    990a:	b085      	sub	sp, #20
    990c:	af00      	add	r7, sp, #0
    990e:	4603      	mov	r3, r0
    9910:	71fb      	strb	r3, [r7, #7]
    9912:	460b      	mov	r3, r1
    9914:	71bb      	strb	r3, [r7, #6]
    9916:	4613      	mov	r3, r2
    9918:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    991a:	79fa      	ldrb	r2, [r7, #7]
    991c:	79bb      	ldrb	r3, [r7, #6]
    991e:	0052      	lsls	r2, r2, #1
    9920:	4413      	add	r3, r2
    9922:	011b      	lsls	r3, r3, #4
    9924:	4a08      	ldr	r2, [pc, #32]	; (9948 <_usbd_ep_set_in_size+0x40>)
    9926:	4413      	add	r3, r2
    9928:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    992a:	88bb      	ldrh	r3, [r7, #4]
    992c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9930:	b299      	uxth	r1, r3
    9932:	68fa      	ldr	r2, [r7, #12]
    9934:	6853      	ldr	r3, [r2, #4]
    9936:	f361 030d 	bfi	r3, r1, #0, #14
    993a:	6053      	str	r3, [r2, #4]
}
    993c:	bf00      	nop
    993e:	3714      	adds	r7, #20
    9940:	46bd      	mov	sp, r7
    9942:	f85d 7b04 	ldr.w	r7, [sp], #4
    9946:	4770      	bx	lr
    9948:	20000dac 	.word	0x20000dac

0000994c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    994c:	b480      	push	{r7}
    994e:	b085      	sub	sp, #20
    9950:	af00      	add	r7, sp, #0
    9952:	4603      	mov	r3, r0
    9954:	71fb      	strb	r3, [r7, #7]
    9956:	460b      	mov	r3, r1
    9958:	71bb      	strb	r3, [r7, #6]
    995a:	4613      	mov	r3, r2
    995c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    995e:	79fa      	ldrb	r2, [r7, #7]
    9960:	79bb      	ldrb	r3, [r7, #6]
    9962:	0052      	lsls	r2, r2, #1
    9964:	4413      	add	r3, r2
    9966:	011b      	lsls	r3, r3, #4
    9968:	4a08      	ldr	r2, [pc, #32]	; (998c <_usbd_ep_set_out_count+0x40>)
    996a:	4413      	add	r3, r2
    996c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    996e:	88bb      	ldrh	r3, [r7, #4]
    9970:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9974:	b299      	uxth	r1, r3
    9976:	68fa      	ldr	r2, [r7, #12]
    9978:	6853      	ldr	r3, [r2, #4]
    997a:	f361 030d 	bfi	r3, r1, #0, #14
    997e:	6053      	str	r3, [r2, #4]
}
    9980:	bf00      	nop
    9982:	3714      	adds	r7, #20
    9984:	46bd      	mov	sp, r7
    9986:	f85d 7b04 	ldr.w	r7, [sp], #4
    998a:	4770      	bx	lr
    998c:	20000dac 	.word	0x20000dac

00009990 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9990:	b480      	push	{r7}
    9992:	b085      	sub	sp, #20
    9994:	af00      	add	r7, sp, #0
    9996:	4603      	mov	r3, r0
    9998:	71fb      	strb	r3, [r7, #7]
    999a:	460b      	mov	r3, r1
    999c:	71bb      	strb	r3, [r7, #6]
    999e:	4613      	mov	r3, r2
    99a0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    99a2:	79fa      	ldrb	r2, [r7, #7]
    99a4:	79bb      	ldrb	r3, [r7, #6]
    99a6:	0052      	lsls	r2, r2, #1
    99a8:	4413      	add	r3, r2
    99aa:	011b      	lsls	r3, r3, #4
    99ac:	4a08      	ldr	r2, [pc, #32]	; (99d0 <_usbd_ep_set_out_size+0x40>)
    99ae:	4413      	add	r3, r2
    99b0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    99b2:	88bb      	ldrh	r3, [r7, #4]
    99b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    99b8:	b299      	uxth	r1, r3
    99ba:	68fa      	ldr	r2, [r7, #12]
    99bc:	6853      	ldr	r3, [r2, #4]
    99be:	f361 339b 	bfi	r3, r1, #14, #14
    99c2:	6053      	str	r3, [r2, #4]
}
    99c4:	bf00      	nop
    99c6:	3714      	adds	r7, #20
    99c8:	46bd      	mov	sp, r7
    99ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ce:	4770      	bx	lr
    99d0:	20000dac 	.word	0x20000dac

000099d4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b084      	sub	sp, #16
    99d8:	af00      	add	r7, sp, #0
    99da:	60ba      	str	r2, [r7, #8]
    99dc:	607b      	str	r3, [r7, #4]
    99de:	4603      	mov	r3, r0
    99e0:	73fb      	strb	r3, [r7, #15]
    99e2:	460b      	mov	r3, r1
    99e4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    99e6:	68bb      	ldr	r3, [r7, #8]
    99e8:	b29a      	uxth	r2, r3
    99ea:	7bb9      	ldrb	r1, [r7, #14]
    99ec:	7bfb      	ldrb	r3, [r7, #15]
    99ee:	4618      	mov	r0, r3
    99f0:	4b06      	ldr	r3, [pc, #24]	; (9a0c <_usbd_ep_set_in_trans+0x38>)
    99f2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    99f4:	687b      	ldr	r3, [r7, #4]
    99f6:	b29a      	uxth	r2, r3
    99f8:	7bb9      	ldrb	r1, [r7, #14]
    99fa:	7bfb      	ldrb	r3, [r7, #15]
    99fc:	4618      	mov	r0, r3
    99fe:	4b04      	ldr	r3, [pc, #16]	; (9a10 <_usbd_ep_set_in_trans+0x3c>)
    9a00:	4798      	blx	r3
}
    9a02:	bf00      	nop
    9a04:	3710      	adds	r7, #16
    9a06:	46bd      	mov	sp, r7
    9a08:	bd80      	pop	{r7, pc}
    9a0a:	bf00      	nop
    9a0c:	00009909 	.word	0x00009909
    9a10:	000098c5 	.word	0x000098c5

00009a14 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9a14:	b580      	push	{r7, lr}
    9a16:	b084      	sub	sp, #16
    9a18:	af00      	add	r7, sp, #0
    9a1a:	60ba      	str	r2, [r7, #8]
    9a1c:	607b      	str	r3, [r7, #4]
    9a1e:	4603      	mov	r3, r0
    9a20:	73fb      	strb	r3, [r7, #15]
    9a22:	460b      	mov	r3, r1
    9a24:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    9a26:	68bb      	ldr	r3, [r7, #8]
    9a28:	b29a      	uxth	r2, r3
    9a2a:	7bb9      	ldrb	r1, [r7, #14]
    9a2c:	7bfb      	ldrb	r3, [r7, #15]
    9a2e:	4618      	mov	r0, r3
    9a30:	4b06      	ldr	r3, [pc, #24]	; (9a4c <_usbd_ep_set_out_trans+0x38>)
    9a32:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	b29a      	uxth	r2, r3
    9a38:	7bb9      	ldrb	r1, [r7, #14]
    9a3a:	7bfb      	ldrb	r3, [r7, #15]
    9a3c:	4618      	mov	r0, r3
    9a3e:	4b04      	ldr	r3, [pc, #16]	; (9a50 <_usbd_ep_set_out_trans+0x3c>)
    9a40:	4798      	blx	r3
}
    9a42:	bf00      	nop
    9a44:	3710      	adds	r7, #16
    9a46:	46bd      	mov	sp, r7
    9a48:	bd80      	pop	{r7, pc}
    9a4a:	bf00      	nop
    9a4c:	00009991 	.word	0x00009991
    9a50:	0000994d 	.word	0x0000994d

00009a54 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9a54:	b480      	push	{r7}
    9a56:	b085      	sub	sp, #20
    9a58:	af00      	add	r7, sp, #0
    9a5a:	4603      	mov	r3, r0
    9a5c:	460a      	mov	r2, r1
    9a5e:	71fb      	strb	r3, [r7, #7]
    9a60:	4613      	mov	r3, r2
    9a62:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9a64:	79fa      	ldrb	r2, [r7, #7]
    9a66:	79bb      	ldrb	r3, [r7, #6]
    9a68:	0052      	lsls	r2, r2, #1
    9a6a:	4413      	add	r3, r2
    9a6c:	011b      	lsls	r3, r3, #4
    9a6e:	4a06      	ldr	r2, [pc, #24]	; (9a88 <_usbd_ep_clear_bank_status+0x34>)
    9a70:	4413      	add	r3, r2
    9a72:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9a74:	68fb      	ldr	r3, [r7, #12]
    9a76:	2200      	movs	r2, #0
    9a78:	729a      	strb	r2, [r3, #10]
}
    9a7a:	bf00      	nop
    9a7c:	3714      	adds	r7, #20
    9a7e:	46bd      	mov	sp, r7
    9a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a84:	4770      	bx	lr
    9a86:	bf00      	nop
    9a88:	20000dac 	.word	0x20000dac

00009a8c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b082      	sub	sp, #8
    9a90:	af00      	add	r7, sp, #0
    9a92:	4603      	mov	r3, r0
    9a94:	71fb      	strb	r3, [r7, #7]
    9a96:	460b      	mov	r3, r1
    9a98:	71bb      	strb	r3, [r7, #6]
    9a9a:	4613      	mov	r3, r2
    9a9c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a9e:	797b      	ldrb	r3, [r7, #5]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d00b      	beq.n	9abc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9aa4:	79bb      	ldrb	r3, [r7, #6]
    9aa6:	2240      	movs	r2, #64	; 0x40
    9aa8:	fa02 f303 	lsl.w	r3, r2, r3
    9aac:	b2da      	uxtb	r2, r3
    9aae:	79fb      	ldrb	r3, [r7, #7]
    9ab0:	4619      	mov	r1, r3
    9ab2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ab6:	4b09      	ldr	r3, [pc, #36]	; (9adc <_usbd_ep_set_in_rdy+0x50>)
    9ab8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9aba:	e00a      	b.n	9ad2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9abc:	79bb      	ldrb	r3, [r7, #6]
    9abe:	2240      	movs	r2, #64	; 0x40
    9ac0:	fa02 f303 	lsl.w	r3, r2, r3
    9ac4:	b2da      	uxtb	r2, r3
    9ac6:	79fb      	ldrb	r3, [r7, #7]
    9ac8:	4619      	mov	r1, r3
    9aca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ace:	4b04      	ldr	r3, [pc, #16]	; (9ae0 <_usbd_ep_set_in_rdy+0x54>)
    9ad0:	4798      	blx	r3
}
    9ad2:	bf00      	nop
    9ad4:	3708      	adds	r7, #8
    9ad6:	46bd      	mov	sp, r7
    9ad8:	bd80      	pop	{r7, pc}
    9ada:	bf00      	nop
    9adc:	00009099 	.word	0x00009099
    9ae0:	000090ed 	.word	0x000090ed

00009ae4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b082      	sub	sp, #8
    9ae8:	af00      	add	r7, sp, #0
    9aea:	4603      	mov	r3, r0
    9aec:	71fb      	strb	r3, [r7, #7]
    9aee:	460b      	mov	r3, r1
    9af0:	71bb      	strb	r3, [r7, #6]
    9af2:	4613      	mov	r3, r2
    9af4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9af6:	797b      	ldrb	r3, [r7, #5]
    9af8:	2b00      	cmp	r3, #0
    9afa:	d00b      	beq.n	9b14 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9afc:	79bb      	ldrb	r3, [r7, #6]
    9afe:	2240      	movs	r2, #64	; 0x40
    9b00:	fa02 f303 	lsl.w	r3, r2, r3
    9b04:	b2da      	uxtb	r2, r3
    9b06:	79fb      	ldrb	r3, [r7, #7]
    9b08:	4619      	mov	r1, r3
    9b0a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b0e:	4b09      	ldr	r3, [pc, #36]	; (9b34 <_usbd_ep_set_out_rdy+0x50>)
    9b10:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9b12:	e00a      	b.n	9b2a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9b14:	79bb      	ldrb	r3, [r7, #6]
    9b16:	2240      	movs	r2, #64	; 0x40
    9b18:	fa02 f303 	lsl.w	r3, r2, r3
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	79fb      	ldrb	r3, [r7, #7]
    9b20:	4619      	mov	r1, r3
    9b22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b26:	4b04      	ldr	r3, [pc, #16]	; (9b38 <_usbd_ep_set_out_rdy+0x54>)
    9b28:	4798      	blx	r3
}
    9b2a:	bf00      	nop
    9b2c:	3708      	adds	r7, #8
    9b2e:	46bd      	mov	sp, r7
    9b30:	bd80      	pop	{r7, pc}
    9b32:	bf00      	nop
    9b34:	000090ed 	.word	0x000090ed
    9b38:	00009099 	.word	0x00009099

00009b3c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9b3c:	b480      	push	{r7}
    9b3e:	b083      	sub	sp, #12
    9b40:	af00      	add	r7, sp, #0
    9b42:	4603      	mov	r3, r0
    9b44:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9b46:	88fb      	ldrh	r3, [r7, #6]
    9b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b4c:	d820      	bhi.n	9b90 <_usbd_ep_pcksize_size+0x54>
    9b4e:	88fb      	ldrh	r3, [r7, #6]
    9b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9b54:	d81a      	bhi.n	9b8c <_usbd_ep_pcksize_size+0x50>
    9b56:	88fb      	ldrh	r3, [r7, #6]
    9b58:	2b80      	cmp	r3, #128	; 0x80
    9b5a:	d815      	bhi.n	9b88 <_usbd_ep_pcksize_size+0x4c>
    9b5c:	88fb      	ldrh	r3, [r7, #6]
    9b5e:	2b40      	cmp	r3, #64	; 0x40
    9b60:	d810      	bhi.n	9b84 <_usbd_ep_pcksize_size+0x48>
    9b62:	88fb      	ldrh	r3, [r7, #6]
    9b64:	2b20      	cmp	r3, #32
    9b66:	d80b      	bhi.n	9b80 <_usbd_ep_pcksize_size+0x44>
    9b68:	88fb      	ldrh	r3, [r7, #6]
    9b6a:	2b10      	cmp	r3, #16
    9b6c:	d806      	bhi.n	9b7c <_usbd_ep_pcksize_size+0x40>
    9b6e:	88fb      	ldrh	r3, [r7, #6]
    9b70:	2b08      	cmp	r3, #8
    9b72:	bf8c      	ite	hi
    9b74:	2301      	movhi	r3, #1
    9b76:	2300      	movls	r3, #0
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	e00a      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b7c:	2302      	movs	r3, #2
    9b7e:	e008      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b80:	2303      	movs	r3, #3
    9b82:	e006      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b84:	2304      	movs	r3, #4
    9b86:	e004      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b88:	2305      	movs	r3, #5
    9b8a:	e002      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b8c:	2306      	movs	r3, #6
    9b8e:	e000      	b.n	9b92 <_usbd_ep_pcksize_size+0x56>
    9b90:	2307      	movs	r3, #7
}
    9b92:	4618      	mov	r0, r3
    9b94:	370c      	adds	r7, #12
    9b96:	46bd      	mov	sp, r7
    9b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b9c:	4770      	bx	lr
	...

00009ba0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9ba0:	b480      	push	{r7}
    9ba2:	b085      	sub	sp, #20
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	4603      	mov	r3, r0
    9ba8:	460a      	mov	r2, r1
    9baa:	71fb      	strb	r3, [r7, #7]
    9bac:	4613      	mov	r3, r2
    9bae:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9bb0:	79fb      	ldrb	r3, [r7, #7]
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d008      	beq.n	9bc8 <_usb_d_dev_ept+0x28>
    9bb6:	79bb      	ldrb	r3, [r7, #6]
    9bb8:	2b00      	cmp	r3, #0
    9bba:	d003      	beq.n	9bc4 <_usb_d_dev_ept+0x24>
    9bbc:	79fb      	ldrb	r3, [r7, #7]
    9bbe:	3304      	adds	r3, #4
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	e002      	b.n	9bca <_usb_d_dev_ept+0x2a>
    9bc4:	79fb      	ldrb	r3, [r7, #7]
    9bc6:	e000      	b.n	9bca <_usb_d_dev_ept+0x2a>
    9bc8:	2300      	movs	r3, #0
    9bca:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9bcc:	7bfa      	ldrb	r2, [r7, #15]
    9bce:	4613      	mov	r3, r2
    9bd0:	009b      	lsls	r3, r3, #2
    9bd2:	4413      	add	r3, r2
    9bd4:	009b      	lsls	r3, r3, #2
    9bd6:	3310      	adds	r3, #16
    9bd8:	4a04      	ldr	r2, [pc, #16]	; (9bec <_usb_d_dev_ept+0x4c>)
    9bda:	4413      	add	r3, r2
    9bdc:	3304      	adds	r3, #4
}
    9bde:	4618      	mov	r0, r3
    9be0:	3714      	adds	r7, #20
    9be2:	46bd      	mov	sp, r7
    9be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be8:	4770      	bx	lr
    9bea:	bf00      	nop
    9bec:	20000ce4 	.word	0x20000ce4

00009bf0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9bf0:	b580      	push	{r7, lr}
    9bf2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9bf4:	2104      	movs	r1, #4
    9bf6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bfa:	4b03      	ldr	r3, [pc, #12]	; (9c08 <_usb_d_dev_sof+0x18>)
    9bfc:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9bfe:	4b03      	ldr	r3, [pc, #12]	; (9c0c <_usb_d_dev_sof+0x1c>)
    9c00:	681b      	ldr	r3, [r3, #0]
    9c02:	4798      	blx	r3
}
    9c04:	bf00      	nop
    9c06:	bd80      	pop	{r7, pc}
    9c08:	00009267 	.word	0x00009267
    9c0c:	20000ce4 	.word	0x20000ce4

00009c10 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9c10:	b580      	push	{r7, lr}
    9c12:	b084      	sub	sp, #16
    9c14:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9c16:	2300      	movs	r3, #0
    9c18:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c1a:	f240 2101 	movw	r1, #513	; 0x201
    9c1e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c22:	4b1a      	ldr	r3, [pc, #104]	; (9c8c <_usb_d_dev_lpmsusp+0x7c>)
    9c24:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c26:	f240 2101 	movw	r1, #513	; 0x201
    9c2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c2e:	4b18      	ldr	r3, [pc, #96]	; (9c90 <_usb_d_dev_lpmsusp+0x80>)
    9c30:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c32:	2170      	movs	r1, #112	; 0x70
    9c34:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c38:	4b16      	ldr	r3, [pc, #88]	; (9c94 <_usb_d_dev_lpmsusp+0x84>)
    9c3a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c3c:	2300      	movs	r3, #0
    9c3e:	73fb      	strb	r3, [r7, #15]
    9c40:	e018      	b.n	9c74 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9c42:	7bfb      	ldrb	r3, [r7, #15]
    9c44:	015b      	lsls	r3, r3, #5
    9c46:	4a14      	ldr	r2, [pc, #80]	; (9c98 <_usb_d_dev_lpmsusp+0x88>)
    9c48:	4413      	add	r3, r2
    9c4a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9c4c:	687b      	ldr	r3, [r7, #4]
    9c4e:	891b      	ldrh	r3, [r3, #8]
    9c50:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9c54:	b2db      	uxtb	r3, r3
    9c56:	2b03      	cmp	r3, #3
    9c58:	d109      	bne.n	9c6e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	891b      	ldrh	r3, [r3, #8]
    9c5e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9c62:	b29b      	uxth	r3, r3
    9c64:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	2200      	movs	r2, #0
    9c6a:	811a      	strh	r2, [r3, #8]
			break;
    9c6c:	e005      	b.n	9c7a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9c6e:	7bfb      	ldrb	r3, [r7, #15]
    9c70:	3301      	adds	r3, #1
    9c72:	73fb      	strb	r3, [r7, #15]
    9c74:	7bfb      	ldrb	r3, [r7, #15]
    9c76:	2b03      	cmp	r3, #3
    9c78:	d9e3      	bls.n	9c42 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9c7a:	4b08      	ldr	r3, [pc, #32]	; (9c9c <_usb_d_dev_lpmsusp+0x8c>)
    9c7c:	685b      	ldr	r3, [r3, #4]
    9c7e:	68b9      	ldr	r1, [r7, #8]
    9c80:	2003      	movs	r0, #3
    9c82:	4798      	blx	r3
}
    9c84:	bf00      	nop
    9c86:	3710      	adds	r7, #16
    9c88:	46bd      	mov	sp, r7
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	00009267 	.word	0x00009267
    9c90:	000092bd 	.word	0x000092bd
    9c94:	00009285 	.word	0x00009285
    9c98:	20000dac 	.word	0x20000dac
    9c9c:	20000ce4 	.word	0x20000ce4

00009ca0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9ca4:	2180      	movs	r1, #128	; 0x80
    9ca6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9caa:	4b04      	ldr	r3, [pc, #16]	; (9cbc <_usb_d_dev_ramerr+0x1c>)
    9cac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9cae:	4b04      	ldr	r3, [pc, #16]	; (9cc0 <_usb_d_dev_ramerr+0x20>)
    9cb0:	685b      	ldr	r3, [r3, #4]
    9cb2:	2100      	movs	r1, #0
    9cb4:	2005      	movs	r0, #5
    9cb6:	4798      	blx	r3
}
    9cb8:	bf00      	nop
    9cba:	bd80      	pop	{r7, pc}
    9cbc:	00009267 	.word	0x00009267
    9cc0:	20000ce4 	.word	0x20000ce4

00009cc4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9cc4:	b580      	push	{r7, lr}
    9cc6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9cc8:	2170      	movs	r1, #112	; 0x70
    9cca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cce:	4b0b      	ldr	r3, [pc, #44]	; (9cfc <_usb_d_dev_wakeup+0x38>)
    9cd0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9cd2:	2170      	movs	r1, #112	; 0x70
    9cd4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cd8:	4b09      	ldr	r3, [pc, #36]	; (9d00 <_usb_d_dev_wakeup+0x3c>)
    9cda:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cdc:	f240 2101 	movw	r1, #513	; 0x201
    9ce0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ce4:	4b07      	ldr	r3, [pc, #28]	; (9d04 <_usb_d_dev_wakeup+0x40>)
    9ce6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9ce8:	2000      	movs	r0, #0
    9cea:	4b07      	ldr	r3, [pc, #28]	; (9d08 <_usb_d_dev_wakeup+0x44>)
    9cec:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9cee:	4b07      	ldr	r3, [pc, #28]	; (9d0c <_usb_d_dev_wakeup+0x48>)
    9cf0:	685b      	ldr	r3, [r3, #4]
    9cf2:	2100      	movs	r1, #0
    9cf4:	2002      	movs	r0, #2
    9cf6:	4798      	blx	r3
}
    9cf8:	bf00      	nop
    9cfa:	bd80      	pop	{r7, pc}
    9cfc:	00009267 	.word	0x00009267
    9d00:	000092bd 	.word	0x000092bd
    9d04:	00009285 	.word	0x00009285
    9d08:	00009565 	.word	0x00009565
    9d0c:	20000ce4 	.word	0x20000ce4

00009d10 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9d10:	b580      	push	{r7, lr}
    9d12:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9d14:	2200      	movs	r2, #0
    9d16:	2100      	movs	r1, #0
    9d18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d1c:	4b0d      	ldr	r3, [pc, #52]	; (9d54 <_usb_d_dev_reset+0x44>)
    9d1e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9d20:	2108      	movs	r1, #8
    9d22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d26:	4b0c      	ldr	r3, [pc, #48]	; (9d58 <_usb_d_dev_reset+0x48>)
    9d28:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d2a:	2170      	movs	r1, #112	; 0x70
    9d2c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d30:	4b0a      	ldr	r3, [pc, #40]	; (9d5c <_usb_d_dev_reset+0x4c>)
    9d32:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d34:	f240 2101 	movw	r1, #513	; 0x201
    9d38:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d3c:	4b08      	ldr	r3, [pc, #32]	; (9d60 <_usb_d_dev_reset+0x50>)
    9d3e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9d40:	4b08      	ldr	r3, [pc, #32]	; (9d64 <_usb_d_dev_reset+0x54>)
    9d42:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9d44:	4b08      	ldr	r3, [pc, #32]	; (9d68 <_usb_d_dev_reset+0x58>)
    9d46:	685b      	ldr	r3, [r3, #4]
    9d48:	2100      	movs	r1, #0
    9d4a:	2001      	movs	r0, #1
    9d4c:	4798      	blx	r3
}
    9d4e:	bf00      	nop
    9d50:	bd80      	pop	{r7, pc}
    9d52:	bf00      	nop
    9d54:	000091fd 	.word	0x000091fd
    9d58:	00009267 	.word	0x00009267
    9d5c:	000092bd 	.word	0x000092bd
    9d60:	00009285 	.word	0x00009285
    9d64:	0000a8cd 	.word	0x0000a8cd
    9d68:	20000ce4 	.word	0x20000ce4

00009d6c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9d6c:	b580      	push	{r7, lr}
    9d6e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d70:	f240 2101 	movw	r1, #513	; 0x201
    9d74:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d78:	4b09      	ldr	r3, [pc, #36]	; (9da0 <_usb_d_dev_suspend+0x34>)
    9d7a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9d7c:	f240 2101 	movw	r1, #513	; 0x201
    9d80:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d84:	4b07      	ldr	r3, [pc, #28]	; (9da4 <_usb_d_dev_suspend+0x38>)
    9d86:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d88:	2170      	movs	r1, #112	; 0x70
    9d8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d8e:	4b06      	ldr	r3, [pc, #24]	; (9da8 <_usb_d_dev_suspend+0x3c>)
    9d90:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9d92:	4b06      	ldr	r3, [pc, #24]	; (9dac <_usb_d_dev_suspend+0x40>)
    9d94:	685b      	ldr	r3, [r3, #4]
    9d96:	2100      	movs	r1, #0
    9d98:	2004      	movs	r0, #4
    9d9a:	4798      	blx	r3
}
    9d9c:	bf00      	nop
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	00009267 	.word	0x00009267
    9da4:	000092bd 	.word	0x000092bd
    9da8:	00009285 	.word	0x00009285
    9dac:	20000ce4 	.word	0x20000ce4

00009db0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9db0:	b580      	push	{r7, lr}
    9db2:	b082      	sub	sp, #8
    9db4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9db6:	2301      	movs	r3, #1
    9db8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9dba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dbe:	4b22      	ldr	r3, [pc, #136]	; (9e48 <_usb_d_dev_handle_nep+0x98>)
    9dc0:	4798      	blx	r3
    9dc2:	4603      	mov	r3, r0
    9dc4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9dc6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9dca:	4b20      	ldr	r3, [pc, #128]	; (9e4c <_usb_d_dev_handle_nep+0x9c>)
    9dcc:	4798      	blx	r3
    9dce:	4603      	mov	r3, r0
    9dd0:	461a      	mov	r2, r3
    9dd2:	88bb      	ldrh	r3, [r7, #4]
    9dd4:	4013      	ands	r3, r2
    9dd6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9dd8:	88bb      	ldrh	r3, [r7, #4]
    9dda:	f003 0304 	and.w	r3, r3, #4
    9dde:	2b00      	cmp	r3, #0
    9de0:	d003      	beq.n	9dea <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9de2:	4b1b      	ldr	r3, [pc, #108]	; (9e50 <_usb_d_dev_handle_nep+0xa0>)
    9de4:	4798      	blx	r3
		return true;
    9de6:	2301      	movs	r3, #1
    9de8:	e02a      	b.n	9e40 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9dea:	88bb      	ldrh	r3, [r7, #4]
    9dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9df0:	2b00      	cmp	r3, #0
    9df2:	d002      	beq.n	9dfa <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9df4:	4b17      	ldr	r3, [pc, #92]	; (9e54 <_usb_d_dev_handle_nep+0xa4>)
    9df6:	4798      	blx	r3
    9df8:	e021      	b.n	9e3e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9dfa:	88bb      	ldrh	r3, [r7, #4]
    9dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e00:	2b00      	cmp	r3, #0
    9e02:	d002      	beq.n	9e0a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9e04:	4b14      	ldr	r3, [pc, #80]	; (9e58 <_usb_d_dev_handle_nep+0xa8>)
    9e06:	4798      	blx	r3
    9e08:	e019      	b.n	9e3e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9e0a:	88bb      	ldrh	r3, [r7, #4]
    9e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9e10:	2b00      	cmp	r3, #0
    9e12:	d002      	beq.n	9e1a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9e14:	4b11      	ldr	r3, [pc, #68]	; (9e5c <_usb_d_dev_handle_nep+0xac>)
    9e16:	4798      	blx	r3
    9e18:	e011      	b.n	9e3e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9e1a:	88bb      	ldrh	r3, [r7, #4]
    9e1c:	f003 0308 	and.w	r3, r3, #8
    9e20:	2b00      	cmp	r3, #0
    9e22:	d002      	beq.n	9e2a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9e24:	4b0e      	ldr	r3, [pc, #56]	; (9e60 <_usb_d_dev_handle_nep+0xb0>)
    9e26:	4798      	blx	r3
    9e28:	e009      	b.n	9e3e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9e2a:	88bb      	ldrh	r3, [r7, #4]
    9e2c:	f003 0301 	and.w	r3, r3, #1
    9e30:	2b00      	cmp	r3, #0
    9e32:	d002      	beq.n	9e3a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9e34:	4b0b      	ldr	r3, [pc, #44]	; (9e64 <_usb_d_dev_handle_nep+0xb4>)
    9e36:	4798      	blx	r3
    9e38:	e001      	b.n	9e3e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9e3a:	2300      	movs	r3, #0
    9e3c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9e3e:	79fb      	ldrb	r3, [r7, #7]
}
    9e40:	4618      	mov	r0, r3
    9e42:	3708      	adds	r7, #8
    9e44:	46bd      	mov	sp, r7
    9e46:	bd80      	pop	{r7, pc}
    9e48:	0000924d 	.word	0x0000924d
    9e4c:	000092a3 	.word	0x000092a3
    9e50:	00009bf1 	.word	0x00009bf1
    9e54:	00009c11 	.word	0x00009c11
    9e58:	00009ca1 	.word	0x00009ca1
    9e5c:	00009cc5 	.word	0x00009cc5
    9e60:	00009d11 	.word	0x00009d11
    9e64:	00009d6d 	.word	0x00009d6d

00009e68 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9e68:	b590      	push	{r4, r7, lr}
    9e6a:	b089      	sub	sp, #36	; 0x24
    9e6c:	af00      	add	r7, sp, #0
    9e6e:	6078      	str	r0, [r7, #4]
    9e70:	460b      	mov	r3, r1
    9e72:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9e74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9e78:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	7c9b      	ldrb	r3, [r3, #18]
    9e7e:	f003 030f 	and.w	r3, r3, #15
    9e82:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9e84:	7dfb      	ldrb	r3, [r7, #23]
    9e86:	015b      	lsls	r3, r3, #5
    9e88:	4a73      	ldr	r2, [pc, #460]	; (a058 <_usb_d_dev_in_next+0x1f0>)
    9e8a:	4413      	add	r3, r2
    9e8c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9e8e:	78fb      	ldrb	r3, [r7, #3]
    9e90:	2b00      	cmp	r3, #0
    9e92:	d006      	beq.n	9ea2 <_usb_d_dev_in_next+0x3a>
    9e94:	693b      	ldr	r3, [r7, #16]
    9e96:	3310      	adds	r3, #16
    9e98:	685b      	ldr	r3, [r3, #4]
    9e9a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9e9e:	b29b      	uxth	r3, r3
    9ea0:	e000      	b.n	9ea4 <_usb_d_dev_in_next+0x3c>
    9ea2:	2300      	movs	r3, #0
    9ea4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	8a1b      	ldrh	r3, [r3, #16]
    9eaa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9eae:	4293      	cmp	r3, r2
    9eb0:	d103      	bne.n	9eba <_usb_d_dev_in_next+0x52>
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	8a1b      	ldrh	r3, [r3, #16]
    9eb6:	b21b      	sxth	r3, r3
    9eb8:	e004      	b.n	9ec4 <_usb_d_dev_in_next+0x5c>
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	8a1b      	ldrh	r3, [r3, #16]
    9ebe:	3b01      	subs	r3, #1
    9ec0:	b29b      	uxth	r3, r3
    9ec2:	b21b      	sxth	r3, r3
    9ec4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9ec8:	4013      	ands	r3, r2
    9eca:	b21b      	sxth	r3, r3
    9ecc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9ece:	2300      	movs	r3, #0
    9ed0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	7cdb      	ldrb	r3, [r3, #19]
    9ed6:	f003 0307 	and.w	r3, r3, #7
    9eda:	b2db      	uxtb	r3, r3
    9edc:	2b01      	cmp	r3, #1
    9ede:	bf0c      	ite	eq
    9ee0:	2301      	moveq	r3, #1
    9ee2:	2300      	movne	r3, #0
    9ee4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9ee6:	78fb      	ldrb	r3, [r7, #3]
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d004      	beq.n	9ef6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9eec:	7dfb      	ldrb	r3, [r7, #23]
    9eee:	2101      	movs	r1, #1
    9ef0:	4618      	mov	r0, r3
    9ef2:	4b5a      	ldr	r3, [pc, #360]	; (a05c <_usb_d_dev_in_next+0x1f4>)
    9ef4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	689a      	ldr	r2, [r3, #8]
    9efa:	89fb      	ldrh	r3, [r7, #14]
    9efc:	441a      	add	r2, r3
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	689a      	ldr	r2, [r3, #8]
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	685b      	ldr	r3, [r3, #4]
    9f0a:	429a      	cmp	r2, r3
    9f0c:	d243      	bcs.n	9f96 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9f0e:	687b      	ldr	r3, [r7, #4]
    9f10:	685b      	ldr	r3, [r3, #4]
    9f12:	b29a      	uxth	r2, r3
    9f14:	687b      	ldr	r3, [r7, #4]
    9f16:	689b      	ldr	r3, [r3, #8]
    9f18:	b29b      	uxth	r3, r3
    9f1a:	1ad3      	subs	r3, r2, r3
    9f1c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9f1e:	687b      	ldr	r3, [r7, #4]
    9f20:	7cdb      	ldrb	r3, [r3, #19]
    9f22:	f003 0320 	and.w	r3, r3, #32
    9f26:	b2db      	uxtb	r3, r3
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d01b      	beq.n	9f64 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	8a1b      	ldrh	r3, [r3, #16]
    9f30:	8bfa      	ldrh	r2, [r7, #30]
    9f32:	429a      	cmp	r2, r3
    9f34:	d902      	bls.n	9f3c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	8a1b      	ldrh	r3, [r3, #16]
    9f3a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9f3c:	687b      	ldr	r3, [r7, #4]
    9f3e:	68d8      	ldr	r0, [r3, #12]
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	681a      	ldr	r2, [r3, #0]
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	689b      	ldr	r3, [r3, #8]
    9f48:	4413      	add	r3, r2
    9f4a:	8bfa      	ldrh	r2, [r7, #30]
    9f4c:	4619      	mov	r1, r3
    9f4e:	4b44      	ldr	r3, [pc, #272]	; (a060 <_usb_d_dev_in_next+0x1f8>)
    9f50:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9f52:	687b      	ldr	r3, [r7, #4]
    9f54:	68db      	ldr	r3, [r3, #12]
    9f56:	461a      	mov	r2, r3
    9f58:	7dfb      	ldrb	r3, [r7, #23]
    9f5a:	2101      	movs	r1, #1
    9f5c:	4618      	mov	r0, r3
    9f5e:	4b41      	ldr	r3, [pc, #260]	; (a064 <_usb_d_dev_in_next+0x1fc>)
    9f60:	4798      	blx	r3
    9f62:	e011      	b.n	9f88 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9f64:	8bfb      	ldrh	r3, [r7, #30]
    9f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9f6a:	d902      	bls.n	9f72 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f70:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9f72:	687b      	ldr	r3, [r7, #4]
    9f74:	681a      	ldr	r2, [r3, #0]
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	689b      	ldr	r3, [r3, #8]
    9f7a:	4413      	add	r3, r2
    9f7c:	461a      	mov	r2, r3
    9f7e:	7dfb      	ldrb	r3, [r7, #23]
    9f80:	2101      	movs	r1, #1
    9f82:	4618      	mov	r0, r3
    9f84:	4b37      	ldr	r3, [pc, #220]	; (a064 <_usb_d_dev_in_next+0x1fc>)
    9f86:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9f88:	8bfa      	ldrh	r2, [r7, #30]
    9f8a:	7df8      	ldrb	r0, [r7, #23]
    9f8c:	2300      	movs	r3, #0
    9f8e:	2101      	movs	r1, #1
    9f90:	4c35      	ldr	r4, [pc, #212]	; (a068 <_usb_d_dev_in_next+0x200>)
    9f92:	47a0      	blx	r4
		goto _in_tx_exec;
    9f94:	e041      	b.n	a01a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9f96:	687b      	ldr	r3, [r7, #4]
    9f98:	7cdb      	ldrb	r3, [r3, #19]
    9f9a:	f003 0310 	and.w	r3, r3, #16
    9f9e:	b2db      	uxtb	r3, r3
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d00b      	beq.n	9fbc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9fa4:	687a      	ldr	r2, [r7, #4]
    9fa6:	7cd3      	ldrb	r3, [r2, #19]
    9fa8:	f36f 1304 	bfc	r3, #4, #1
    9fac:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9fae:	7df8      	ldrb	r0, [r7, #23]
    9fb0:	2300      	movs	r3, #0
    9fb2:	2200      	movs	r2, #0
    9fb4:	2101      	movs	r1, #1
    9fb6:	4c2c      	ldr	r4, [pc, #176]	; (a068 <_usb_d_dev_in_next+0x200>)
    9fb8:	47a0      	blx	r4
		goto _in_tx_exec;
    9fba:	e02e      	b.n	a01a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9fbc:	7afb      	ldrb	r3, [r7, #11]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d006      	beq.n	9fd0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9fc2:	7dfb      	ldrb	r3, [r7, #23]
    9fc4:	224b      	movs	r2, #75	; 0x4b
    9fc6:	4619      	mov	r1, r3
    9fc8:	69b8      	ldr	r0, [r7, #24]
    9fca:	4b28      	ldr	r3, [pc, #160]	; (a06c <_usb_d_dev_in_next+0x204>)
    9fcc:	4798      	blx	r3
    9fce:	e005      	b.n	9fdc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9fd0:	7dfb      	ldrb	r3, [r7, #23]
    9fd2:	224a      	movs	r2, #74	; 0x4a
    9fd4:	4619      	mov	r1, r3
    9fd6:	69b8      	ldr	r0, [r7, #24]
    9fd8:	4b24      	ldr	r3, [pc, #144]	; (a06c <_usb_d_dev_in_next+0x204>)
    9fda:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	8a1b      	ldrh	r3, [r3, #16]
    9fe0:	89ba      	ldrh	r2, [r7, #12]
    9fe2:	429a      	cmp	r2, r3
    9fe4:	d114      	bne.n	a010 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9fe6:	687a      	ldr	r2, [r7, #4]
    9fe8:	7cd3      	ldrb	r3, [r2, #19]
    9fea:	f36f 1386 	bfc	r3, #6, #1
    9fee:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9ff0:	4b1f      	ldr	r3, [pc, #124]	; (a070 <_usb_d_dev_in_next+0x208>)
    9ff2:	68db      	ldr	r3, [r3, #12]
    9ff4:	687a      	ldr	r2, [r7, #4]
    9ff6:	7c90      	ldrb	r0, [r2, #18]
    9ff8:	687a      	ldr	r2, [r7, #4]
    9ffa:	6892      	ldr	r2, [r2, #8]
    9ffc:	4611      	mov	r1, r2
    9ffe:	4798      	blx	r3
    a000:	4603      	mov	r3, r0
    a002:	2b00      	cmp	r3, #0
    a004:	d124      	bne.n	a050 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    a006:	687a      	ldr	r2, [r7, #4]
    a008:	7cd3      	ldrb	r3, [r2, #19]
    a00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a00e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a010:	2100      	movs	r1, #0
    a012:	6878      	ldr	r0, [r7, #4]
    a014:	4b17      	ldr	r3, [pc, #92]	; (a074 <_usb_d_dev_in_next+0x20c>)
    a016:	4798      	blx	r3
	return;
    a018:	e01b      	b.n	a052 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    a01a:	78fb      	ldrb	r3, [r7, #3]
    a01c:	f083 0301 	eor.w	r3, r3, #1
    a020:	b2db      	uxtb	r3, r3
    a022:	2b00      	cmp	r3, #0
    a024:	d00d      	beq.n	a042 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    a026:	7afb      	ldrb	r3, [r7, #11]
    a028:	2b00      	cmp	r3, #0
    a02a:	d002      	beq.n	a032 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    a02c:	234e      	movs	r3, #78	; 0x4e
    a02e:	777b      	strb	r3, [r7, #29]
    a030:	e001      	b.n	a036 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    a032:	234a      	movs	r3, #74	; 0x4a
    a034:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a036:	7f7a      	ldrb	r2, [r7, #29]
    a038:	7dfb      	ldrb	r3, [r7, #23]
    a03a:	4619      	mov	r1, r3
    a03c:	69b8      	ldr	r0, [r7, #24]
    a03e:	4b0e      	ldr	r3, [pc, #56]	; (a078 <_usb_d_dev_in_next+0x210>)
    a040:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    a042:	7dfb      	ldrb	r3, [r7, #23]
    a044:	2201      	movs	r2, #1
    a046:	2101      	movs	r1, #1
    a048:	4618      	mov	r0, r3
    a04a:	4b0c      	ldr	r3, [pc, #48]	; (a07c <_usb_d_dev_in_next+0x214>)
    a04c:	4798      	blx	r3
    a04e:	e000      	b.n	a052 <_usb_d_dev_in_next+0x1ea>
			return;
    a050:	bf00      	nop
}
    a052:	3724      	adds	r7, #36	; 0x24
    a054:	46bd      	mov	sp, r7
    a056:	bd90      	pop	{r4, r7, pc}
    a058:	20000dac 	.word	0x20000dac
    a05c:	00009861 	.word	0x00009861
    a060:	0000fa75 	.word	0x0000fa75
    a064:	0000988d 	.word	0x0000988d
    a068:	000099d5 	.word	0x000099d5
    a06c:	0000916d 	.word	0x0000916d
    a070:	20000ce4 	.word	0x20000ce4
    a074:	0000b191 	.word	0x0000b191
    a078:	00009141 	.word	0x00009141
    a07c:	00009a8d 	.word	0x00009a8d

0000a080 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    a080:	b590      	push	{r4, r7, lr}
    a082:	b08b      	sub	sp, #44	; 0x2c
    a084:	af00      	add	r7, sp, #0
    a086:	6078      	str	r0, [r7, #4]
    a088:	460b      	mov	r3, r1
    a08a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a08c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a090:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	7c9b      	ldrb	r3, [r3, #18]
    a096:	f003 030f 	and.w	r3, r3, #15
    a09a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a09c:	7ffb      	ldrb	r3, [r7, #31]
    a09e:	015b      	lsls	r3, r3, #5
    a0a0:	4a94      	ldr	r2, [pc, #592]	; (a2f4 <_usb_d_dev_out_next+0x274>)
    a0a2:	4413      	add	r3, r2
    a0a4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a0a6:	78fb      	ldrb	r3, [r7, #3]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d005      	beq.n	a0b8 <_usb_d_dev_out_next+0x38>
    a0ac:	69bb      	ldr	r3, [r7, #24]
    a0ae:	685b      	ldr	r3, [r3, #4]
    a0b0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a0b4:	b29b      	uxth	r3, r3
    a0b6:	e000      	b.n	a0ba <_usb_d_dev_out_next+0x3a>
    a0b8:	2300      	movs	r3, #0
    a0ba:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a0bc:	78fb      	ldrb	r3, [r7, #3]
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d005      	beq.n	a0ce <_usb_d_dev_out_next+0x4e>
    a0c2:	69bb      	ldr	r3, [r7, #24]
    a0c4:	685b      	ldr	r3, [r3, #4]
    a0c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a0ca:	b29b      	uxth	r3, r3
    a0cc:	e000      	b.n	a0d0 <_usb_d_dev_out_next+0x50>
    a0ce:	2300      	movs	r3, #0
    a0d0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a0d2:	687b      	ldr	r3, [r7, #4]
    a0d4:	8a1b      	ldrh	r3, [r3, #16]
    a0d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a0da:	4293      	cmp	r3, r2
    a0dc:	d004      	beq.n	a0e8 <_usb_d_dev_out_next+0x68>
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	8a1b      	ldrh	r3, [r3, #16]
    a0e2:	3b01      	subs	r3, #1
    a0e4:	b29b      	uxth	r3, r3
    a0e6:	e001      	b.n	a0ec <_usb_d_dev_out_next+0x6c>
    a0e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a0ec:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a0ee:	8aba      	ldrh	r2, [r7, #20]
    a0f0:	8a7b      	ldrh	r3, [r7, #18]
    a0f2:	4013      	ands	r3, r2
    a0f4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	7cdb      	ldrb	r3, [r3, #19]
    a0fa:	f003 0307 	and.w	r3, r3, #7
    a0fe:	b2db      	uxtb	r3, r3
    a100:	2b01      	cmp	r3, #1
    a102:	bf0c      	ite	eq
    a104:	2301      	moveq	r3, #1
    a106:	2300      	movne	r3, #0
    a108:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a10a:	78fb      	ldrb	r3, [r7, #3]
    a10c:	2b00      	cmp	r3, #0
    a10e:	d004      	beq.n	a11a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a110:	7ffb      	ldrb	r3, [r7, #31]
    a112:	2100      	movs	r1, #0
    a114:	4618      	mov	r0, r3
    a116:	4b78      	ldr	r3, [pc, #480]	; (a2f8 <_usb_d_dev_out_next+0x278>)
    a118:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a11a:	687b      	ldr	r3, [r7, #4]
    a11c:	7cdb      	ldrb	r3, [r3, #19]
    a11e:	f003 0320 	and.w	r3, r3, #32
    a122:	b2db      	uxtb	r3, r3
    a124:	2b00      	cmp	r3, #0
    a126:	d01c      	beq.n	a162 <_usb_d_dev_out_next+0xe2>
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	685b      	ldr	r3, [r3, #4]
    a12c:	2b00      	cmp	r3, #0
    a12e:	d018      	beq.n	a162 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	685b      	ldr	r3, [r3, #4]
    a134:	b29a      	uxth	r2, r3
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	689b      	ldr	r3, [r3, #8]
    a13a:	b29b      	uxth	r3, r3
    a13c:	1ad3      	subs	r3, r2, r3
    a13e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	681a      	ldr	r2, [r3, #0]
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	689b      	ldr	r3, [r3, #8]
    a148:	18d0      	adds	r0, r2, r3
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	68d9      	ldr	r1, [r3, #12]
    a14e:	89ba      	ldrh	r2, [r7, #12]
    a150:	8a3b      	ldrh	r3, [r7, #16]
    a152:	429a      	cmp	r2, r3
    a154:	d901      	bls.n	a15a <_usb_d_dev_out_next+0xda>
    a156:	8a3b      	ldrh	r3, [r7, #16]
    a158:	e000      	b.n	a15c <_usb_d_dev_out_next+0xdc>
    a15a:	89bb      	ldrh	r3, [r7, #12]
    a15c:	461a      	mov	r2, r3
    a15e:	4b67      	ldr	r3, [pc, #412]	; (a2fc <_usb_d_dev_out_next+0x27c>)
    a160:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a162:	687b      	ldr	r3, [r7, #4]
    a164:	685b      	ldr	r3, [r3, #4]
    a166:	2b00      	cmp	r3, #0
    a168:	d121      	bne.n	a1ae <_usb_d_dev_out_next+0x12e>
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	7cdb      	ldrb	r3, [r3, #19]
    a16e:	f003 0310 	and.w	r3, r3, #16
    a172:	b2db      	uxtb	r3, r3
    a174:	2b00      	cmp	r3, #0
    a176:	d01a      	beq.n	a1ae <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a178:	687a      	ldr	r2, [r7, #4]
    a17a:	7cd3      	ldrb	r3, [r2, #19]
    a17c:	f36f 1304 	bfc	r3, #4, #1
    a180:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a182:	687a      	ldr	r2, [r7, #4]
    a184:	7cd3      	ldrb	r3, [r2, #19]
    a186:	f043 0320 	orr.w	r3, r3, #32
    a18a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a18c:	687b      	ldr	r3, [r7, #4]
    a18e:	68db      	ldr	r3, [r3, #12]
    a190:	461a      	mov	r2, r3
    a192:	7ffb      	ldrb	r3, [r7, #31]
    a194:	2100      	movs	r1, #0
    a196:	4618      	mov	r0, r3
    a198:	4b59      	ldr	r3, [pc, #356]	; (a300 <_usb_d_dev_out_next+0x280>)
    a19a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	8a1b      	ldrh	r3, [r3, #16]
    a1a0:	461a      	mov	r2, r3
    a1a2:	7ff8      	ldrb	r0, [r7, #31]
    a1a4:	2300      	movs	r3, #0
    a1a6:	2100      	movs	r1, #0
    a1a8:	4c56      	ldr	r4, [pc, #344]	; (a304 <_usb_d_dev_out_next+0x284>)
    a1aa:	47a0      	blx	r4
		goto _out_rx_exec;
    a1ac:	e090      	b.n	a2d0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a1ae:	78fb      	ldrb	r3, [r7, #3]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d010      	beq.n	a1d6 <_usb_d_dev_out_next+0x156>
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	8a1b      	ldrh	r3, [r3, #16]
    a1b8:	8a3a      	ldrh	r2, [r7, #16]
    a1ba:	429a      	cmp	r2, r3
    a1bc:	d20b      	bcs.n	a1d6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a1be:	687a      	ldr	r2, [r7, #4]
    a1c0:	7cd3      	ldrb	r3, [r2, #19]
    a1c2:	f36f 1304 	bfc	r3, #4, #1
    a1c6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	689a      	ldr	r2, [r3, #8]
    a1cc:	8abb      	ldrh	r3, [r7, #20]
    a1ce:	441a      	add	r2, r3
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	609a      	str	r2, [r3, #8]
    a1d4:	e05c      	b.n	a290 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	689a      	ldr	r2, [r3, #8]
    a1da:	8afb      	ldrh	r3, [r7, #22]
    a1dc:	441a      	add	r2, r3
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a1e2:	687b      	ldr	r3, [r7, #4]
    a1e4:	689a      	ldr	r2, [r3, #8]
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	685b      	ldr	r3, [r3, #4]
    a1ea:	429a      	cmp	r2, r3
    a1ec:	d250      	bcs.n	a290 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	685b      	ldr	r3, [r3, #4]
    a1f2:	b29a      	uxth	r2, r3
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	689b      	ldr	r3, [r3, #8]
    a1f8:	b29b      	uxth	r3, r3
    a1fa:	1ad3      	subs	r3, r2, r3
    a1fc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	7cdb      	ldrb	r3, [r3, #19]
    a202:	f003 0320 	and.w	r3, r3, #32
    a206:	b2db      	uxtb	r3, r3
    a208:	2b00      	cmp	r3, #0
    a20a:	d010      	beq.n	a22e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	8a1b      	ldrh	r3, [r3, #16]
    a210:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a212:	429a      	cmp	r2, r3
    a214:	d902      	bls.n	a21c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	8a1b      	ldrh	r3, [r3, #16]
    a21a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a21c:	687b      	ldr	r3, [r7, #4]
    a21e:	68db      	ldr	r3, [r3, #12]
    a220:	461a      	mov	r2, r3
    a222:	7ffb      	ldrb	r3, [r7, #31]
    a224:	2100      	movs	r1, #0
    a226:	4618      	mov	r0, r3
    a228:	4b35      	ldr	r3, [pc, #212]	; (a300 <_usb_d_dev_out_next+0x280>)
    a22a:	4798      	blx	r3
    a22c:	e029      	b.n	a282 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a22e:	687b      	ldr	r3, [r7, #4]
    a230:	8a1b      	ldrh	r3, [r3, #16]
    a232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a234:	429a      	cmp	r2, r3
    a236:	d90f      	bls.n	a258 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a23e:	d903      	bls.n	a248 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a244:	84fb      	strh	r3, [r7, #38]	; 0x26
    a246:	e011      	b.n	a26c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a24a:	8a7b      	ldrh	r3, [r7, #18]
    a24c:	4013      	ands	r3, r2
    a24e:	b29b      	uxth	r3, r3
    a250:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a252:	1ad3      	subs	r3, r2, r3
    a254:	84fb      	strh	r3, [r7, #38]	; 0x26
    a256:	e009      	b.n	a26c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a258:	687b      	ldr	r3, [r7, #4]
    a25a:	8a1b      	ldrh	r3, [r3, #16]
    a25c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a25e:	429a      	cmp	r2, r3
    a260:	d204      	bcs.n	a26c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a262:	687a      	ldr	r2, [r7, #4]
    a264:	7cd3      	ldrb	r3, [r2, #19]
    a266:	f043 0320 	orr.w	r3, r3, #32
    a26a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	681a      	ldr	r2, [r3, #0]
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	689b      	ldr	r3, [r3, #8]
    a274:	4413      	add	r3, r2
    a276:	461a      	mov	r2, r3
    a278:	7ffb      	ldrb	r3, [r7, #31]
    a27a:	2100      	movs	r1, #0
    a27c:	4618      	mov	r0, r3
    a27e:	4b20      	ldr	r3, [pc, #128]	; (a300 <_usb_d_dev_out_next+0x280>)
    a280:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a282:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a284:	7ff8      	ldrb	r0, [r7, #31]
    a286:	2300      	movs	r3, #0
    a288:	2100      	movs	r1, #0
    a28a:	4c1e      	ldr	r4, [pc, #120]	; (a304 <_usb_d_dev_out_next+0x284>)
    a28c:	47a0      	blx	r4
			goto _out_rx_exec;
    a28e:	e01f      	b.n	a2d0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a290:	7bfb      	ldrb	r3, [r7, #15]
    a292:	2b00      	cmp	r3, #0
    a294:	d006      	beq.n	a2a4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a296:	7ffb      	ldrb	r3, [r7, #31]
    a298:	222d      	movs	r2, #45	; 0x2d
    a29a:	4619      	mov	r1, r3
    a29c:	6a38      	ldr	r0, [r7, #32]
    a29e:	4b1a      	ldr	r3, [pc, #104]	; (a308 <_usb_d_dev_out_next+0x288>)
    a2a0:	4798      	blx	r3
    a2a2:	e005      	b.n	a2b0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a2a4:	7ffb      	ldrb	r3, [r7, #31]
    a2a6:	2225      	movs	r2, #37	; 0x25
    a2a8:	4619      	mov	r1, r3
    a2aa:	6a38      	ldr	r0, [r7, #32]
    a2ac:	4b16      	ldr	r3, [pc, #88]	; (a308 <_usb_d_dev_out_next+0x288>)
    a2ae:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a2b0:	7ffb      	ldrb	r3, [r7, #31]
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d107      	bne.n	a2c6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a2b6:	687b      	ldr	r3, [r7, #4]
    a2b8:	68db      	ldr	r3, [r3, #12]
    a2ba:	461a      	mov	r2, r3
    a2bc:	7ffb      	ldrb	r3, [r7, #31]
    a2be:	2100      	movs	r1, #0
    a2c0:	4618      	mov	r0, r3
    a2c2:	4b0f      	ldr	r3, [pc, #60]	; (a300 <_usb_d_dev_out_next+0x280>)
    a2c4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a2c6:	2100      	movs	r1, #0
    a2c8:	6878      	ldr	r0, [r7, #4]
    a2ca:	4b10      	ldr	r3, [pc, #64]	; (a30c <_usb_d_dev_out_next+0x28c>)
    a2cc:	4798      	blx	r3
	return;
    a2ce:	e031      	b.n	a334 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a2d0:	78fb      	ldrb	r3, [r7, #3]
    a2d2:	f083 0301 	eor.w	r3, r3, #1
    a2d6:	b2db      	uxtb	r3, r3
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d025      	beq.n	a328 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a2dc:	7bfb      	ldrb	r3, [r7, #15]
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d018      	beq.n	a314 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a2e2:	7ffb      	ldrb	r3, [r7, #31]
    a2e4:	2101      	movs	r1, #1
    a2e6:	4618      	mov	r0, r3
    a2e8:	4b09      	ldr	r3, [pc, #36]	; (a310 <_usb_d_dev_out_next+0x290>)
    a2ea:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a2ec:	232d      	movs	r3, #45	; 0x2d
    a2ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a2f2:	e012      	b.n	a31a <_usb_d_dev_out_next+0x29a>
    a2f4:	20000dac 	.word	0x20000dac
    a2f8:	00009861 	.word	0x00009861
    a2fc:	0000fa75 	.word	0x0000fa75
    a300:	0000988d 	.word	0x0000988d
    a304:	00009a15 	.word	0x00009a15
    a308:	0000916d 	.word	0x0000916d
    a30c:	0000b191 	.word	0x0000b191
    a310:	00009a55 	.word	0x00009a55
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a314:	2325      	movs	r3, #37	; 0x25
    a316:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a31a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a31e:	7ffb      	ldrb	r3, [r7, #31]
    a320:	4619      	mov	r1, r3
    a322:	6a38      	ldr	r0, [r7, #32]
    a324:	4b05      	ldr	r3, [pc, #20]	; (a33c <_usb_d_dev_out_next+0x2bc>)
    a326:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a328:	7ffb      	ldrb	r3, [r7, #31]
    a32a:	2201      	movs	r2, #1
    a32c:	2100      	movs	r1, #0
    a32e:	4618      	mov	r0, r3
    a330:	4b03      	ldr	r3, [pc, #12]	; (a340 <_usb_d_dev_out_next+0x2c0>)
    a332:	4798      	blx	r3
}
    a334:	372c      	adds	r7, #44	; 0x2c
    a336:	46bd      	mov	sp, r7
    a338:	bd90      	pop	{r4, r7, pc}
    a33a:	bf00      	nop
    a33c:	00009141 	.word	0x00009141
    a340:	00009ae5 	.word	0x00009ae5

0000a344 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a344:	b580      	push	{r7, lr}
    a346:	b084      	sub	sp, #16
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	7c9b      	ldrb	r3, [r3, #18]
    a350:	f003 030f 	and.w	r3, r3, #15
    a354:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a356:	687b      	ldr	r3, [r7, #4]
    a358:	7cdb      	ldrb	r3, [r3, #19]
    a35a:	f003 0307 	and.w	r3, r3, #7
    a35e:	b2db      	uxtb	r3, r3
    a360:	2b01      	cmp	r3, #1
    a362:	bf0c      	ite	eq
    a364:	2301      	moveq	r3, #1
    a366:	2300      	movne	r3, #0
    a368:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a36a:	7bbb      	ldrb	r3, [r7, #14]
    a36c:	f083 0301 	eor.w	r3, r3, #1
    a370:	b2db      	uxtb	r3, r3
    a372:	2b00      	cmp	r3, #0
    a374:	d008      	beq.n	a388 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a376:	7bfb      	ldrb	r3, [r7, #15]
    a378:	4618      	mov	r0, r3
    a37a:	4b20      	ldr	r3, [pc, #128]	; (a3fc <_usb_d_dev_handle_setup+0xb8>)
    a37c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a37e:	7bfb      	ldrb	r3, [r7, #15]
    a380:	4618      	mov	r0, r3
    a382:	4b1f      	ldr	r3, [pc, #124]	; (a400 <_usb_d_dev_handle_setup+0xbc>)
    a384:	4798      	blx	r3
		return;
    a386:	e036      	b.n	a3f6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	7cdb      	ldrb	r3, [r3, #19]
    a38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a390:	b2db      	uxtb	r3, r3
    a392:	2b00      	cmp	r3, #0
    a394:	d010      	beq.n	a3b8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a396:	687a      	ldr	r2, [r7, #4]
    a398:	7cd3      	ldrb	r3, [r2, #19]
    a39a:	f36f 1386 	bfc	r3, #6, #1
    a39e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a3a0:	7bfb      	ldrb	r3, [r7, #15]
    a3a2:	2200      	movs	r2, #0
    a3a4:	2101      	movs	r1, #1
    a3a6:	4618      	mov	r0, r3
    a3a8:	4b16      	ldr	r3, [pc, #88]	; (a404 <_usb_d_dev_handle_setup+0xc0>)
    a3aa:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a3ac:	7bfb      	ldrb	r3, [r7, #15]
    a3ae:	2200      	movs	r2, #0
    a3b0:	2100      	movs	r1, #0
    a3b2:	4618      	mov	r0, r3
    a3b4:	4b14      	ldr	r3, [pc, #80]	; (a408 <_usb_d_dev_handle_setup+0xc4>)
    a3b6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a3b8:	687a      	ldr	r2, [r7, #4]
    a3ba:	7cd3      	ldrb	r3, [r2, #19]
    a3bc:	f36f 03c3 	bfc	r3, #3, #1
    a3c0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a3c2:	7bfb      	ldrb	r3, [r7, #15]
    a3c4:	2100      	movs	r1, #0
    a3c6:	4618      	mov	r0, r3
    a3c8:	4b10      	ldr	r3, [pc, #64]	; (a40c <_usb_d_dev_handle_setup+0xc8>)
    a3ca:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a3cc:	7bfb      	ldrb	r3, [r7, #15]
    a3ce:	2101      	movs	r1, #1
    a3d0:	4618      	mov	r0, r3
    a3d2:	4b0e      	ldr	r3, [pc, #56]	; (a40c <_usb_d_dev_handle_setup+0xc8>)
    a3d4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a3d6:	7bfb      	ldrb	r3, [r7, #15]
    a3d8:	216f      	movs	r1, #111	; 0x6f
    a3da:	4618      	mov	r0, r3
    a3dc:	4b0c      	ldr	r3, [pc, #48]	; (a410 <_usb_d_dev_handle_setup+0xcc>)
    a3de:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a3e0:	7bfb      	ldrb	r3, [r7, #15]
    a3e2:	216f      	movs	r1, #111	; 0x6f
    a3e4:	4618      	mov	r0, r3
    a3e6:	4b0b      	ldr	r3, [pc, #44]	; (a414 <_usb_d_dev_handle_setup+0xd0>)
    a3e8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a3ea:	4b0b      	ldr	r3, [pc, #44]	; (a418 <_usb_d_dev_handle_setup+0xd4>)
    a3ec:	689b      	ldr	r3, [r3, #8]
    a3ee:	687a      	ldr	r2, [r7, #4]
    a3f0:	7c92      	ldrb	r2, [r2, #18]
    a3f2:	4610      	mov	r0, r2
    a3f4:	4798      	blx	r3
}
    a3f6:	3710      	adds	r7, #16
    a3f8:	46bd      	mov	sp, r7
    a3fa:	bd80      	pop	{r7, pc}
    a3fc:	000097e9 	.word	0x000097e9
    a400:	00009795 	.word	0x00009795
    a404:	00009a8d 	.word	0x00009a8d
    a408:	00009ae5 	.word	0x00009ae5
    a40c:	00009a55 	.word	0x00009a55
    a410:	00009595 	.word	0x00009595
    a414:	000095e5 	.word	0x000095e5
    a418:	20000ce4 	.word	0x20000ce4

0000a41c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a41c:	b580      	push	{r7, lr}
    a41e:	b084      	sub	sp, #16
    a420:	af00      	add	r7, sp, #0
    a422:	6078      	str	r0, [r7, #4]
    a424:	460b      	mov	r3, r1
    a426:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a428:	687b      	ldr	r3, [r7, #4]
    a42a:	7c9b      	ldrb	r3, [r3, #18]
    a42c:	f003 030f 	and.w	r3, r3, #15
    a430:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a432:	78f9      	ldrb	r1, [r7, #3]
    a434:	7bfb      	ldrb	r3, [r7, #15]
    a436:	2200      	movs	r2, #0
    a438:	4618      	mov	r0, r3
    a43a:	4b07      	ldr	r3, [pc, #28]	; (a458 <_usb_d_dev_handle_stall+0x3c>)
    a43c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a43e:	4b07      	ldr	r3, [pc, #28]	; (a45c <_usb_d_dev_handle_stall+0x40>)
    a440:	691b      	ldr	r3, [r3, #16]
    a442:	687a      	ldr	r2, [r7, #4]
    a444:	7c90      	ldrb	r0, [r2, #18]
    a446:	687a      	ldr	r2, [r7, #4]
    a448:	6892      	ldr	r2, [r2, #8]
    a44a:	2101      	movs	r1, #1
    a44c:	4798      	blx	r3
}
    a44e:	bf00      	nop
    a450:	3710      	adds	r7, #16
    a452:	46bd      	mov	sp, r7
    a454:	bd80      	pop	{r7, pc}
    a456:	bf00      	nop
    a458:	00009749 	.word	0x00009749
    a45c:	20000ce4 	.word	0x20000ce4

0000a460 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a460:	b580      	push	{r7, lr}
    a462:	b088      	sub	sp, #32
    a464:	af00      	add	r7, sp, #0
    a466:	6078      	str	r0, [r7, #4]
    a468:	460b      	mov	r3, r1
    a46a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a46c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a470:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a472:	687b      	ldr	r3, [r7, #4]
    a474:	7c9b      	ldrb	r3, [r3, #18]
    a476:	f003 030f 	and.w	r3, r3, #15
    a47a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a47c:	4b61      	ldr	r3, [pc, #388]	; (a604 <_usb_d_dev_handle_trfail+0x1a4>)
    a47e:	881b      	ldrh	r3, [r3, #0]
    a480:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a482:	7efb      	ldrb	r3, [r7, #27]
    a484:	015b      	lsls	r3, r3, #5
    a486:	4a60      	ldr	r2, [pc, #384]	; (a608 <_usb_d_dev_handle_trfail+0x1a8>)
    a488:	4413      	add	r3, r2
    a48a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a48c:	78fb      	ldrb	r3, [r7, #3]
    a48e:	2b00      	cmp	r3, #0
    a490:	d006      	beq.n	a4a0 <_usb_d_dev_handle_trfail+0x40>
    a492:	7efb      	ldrb	r3, [r7, #27]
    a494:	4619      	mov	r1, r3
    a496:	69f8      	ldr	r0, [r7, #28]
    a498:	4b5c      	ldr	r3, [pc, #368]	; (a60c <_usb_d_dev_handle_trfail+0x1ac>)
    a49a:	4798      	blx	r3
    a49c:	4603      	mov	r3, r0
    a49e:	e005      	b.n	a4ac <_usb_d_dev_handle_trfail+0x4c>
    a4a0:	7efb      	ldrb	r3, [r7, #27]
    a4a2:	4619      	mov	r1, r3
    a4a4:	69f8      	ldr	r0, [r7, #28]
    a4a6:	4b5a      	ldr	r3, [pc, #360]	; (a610 <_usb_d_dev_handle_trfail+0x1b0>)
    a4a8:	4798      	blx	r3
    a4aa:	4603      	mov	r3, r0
    a4ac:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a4ae:	687b      	ldr	r3, [r7, #4]
    a4b0:	7cdb      	ldrb	r3, [r3, #19]
    a4b2:	f003 0307 	and.w	r3, r3, #7
    a4b6:	b2db      	uxtb	r3, r3
    a4b8:	2b01      	cmp	r3, #1
    a4ba:	bf0c      	ite	eq
    a4bc:	2301      	moveq	r3, #1
    a4be:	2300      	movne	r3, #0
    a4c0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a4c2:	78fb      	ldrb	r3, [r7, #3]
    a4c4:	011b      	lsls	r3, r3, #4
    a4c6:	697a      	ldr	r2, [r7, #20]
    a4c8:	4413      	add	r3, r2
    a4ca:	7a9b      	ldrb	r3, [r3, #10]
    a4cc:	b2db      	uxtb	r3, r3
    a4ce:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a4d0:	7cfb      	ldrb	r3, [r7, #19]
    a4d2:	2b02      	cmp	r3, #2
    a4d4:	d12f      	bne.n	a536 <_usb_d_dev_handle_trfail+0xd6>
    a4d6:	7b3b      	ldrb	r3, [r7, #12]
    a4d8:	f003 0301 	and.w	r3, r3, #1
    a4dc:	b2db      	uxtb	r3, r3
    a4de:	2b00      	cmp	r3, #0
    a4e0:	d029      	beq.n	a536 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a4e2:	78fb      	ldrb	r3, [r7, #3]
    a4e4:	011b      	lsls	r3, r3, #4
    a4e6:	697a      	ldr	r2, [r7, #20]
    a4e8:	441a      	add	r2, r3
    a4ea:	7a93      	ldrb	r3, [r2, #10]
    a4ec:	f36f 0300 	bfc	r3, #0, #1
    a4f0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a4f2:	78fb      	ldrb	r3, [r7, #3]
    a4f4:	f107 0220 	add.w	r2, r7, #32
    a4f8:	4413      	add	r3, r2
    a4fa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4fe:	7efb      	ldrb	r3, [r7, #27]
    a500:	4619      	mov	r1, r3
    a502:	69f8      	ldr	r0, [r7, #28]
    a504:	4b43      	ldr	r3, [pc, #268]	; (a614 <_usb_d_dev_handle_trfail+0x1b4>)
    a506:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a508:	78fb      	ldrb	r3, [r7, #3]
    a50a:	f107 0220 	add.w	r2, r7, #32
    a50e:	4413      	add	r3, r2
    a510:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a514:	7efb      	ldrb	r3, [r7, #27]
    a516:	4619      	mov	r1, r3
    a518:	69f8      	ldr	r0, [r7, #28]
    a51a:	4b3f      	ldr	r3, [pc, #252]	; (a618 <_usb_d_dev_handle_trfail+0x1b8>)
    a51c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a51e:	78fb      	ldrb	r3, [r7, #3]
    a520:	2b00      	cmp	r3, #0
    a522:	bf14      	ite	ne
    a524:	2301      	movne	r3, #1
    a526:	2300      	moveq	r3, #0
    a528:	b2db      	uxtb	r3, r3
    a52a:	2204      	movs	r2, #4
    a52c:	4619      	mov	r1, r3
    a52e:	6878      	ldr	r0, [r7, #4]
    a530:	4b3a      	ldr	r3, [pc, #232]	; (a61c <_usb_d_dev_handle_trfail+0x1bc>)
    a532:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a534:	e062      	b.n	a5fc <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a536:	7b3b      	ldrb	r3, [r7, #12]
    a538:	f003 0302 	and.w	r3, r3, #2
    a53c:	b2db      	uxtb	r3, r3
    a53e:	2b00      	cmp	r3, #0
    a540:	d040      	beq.n	a5c4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a542:	78fb      	ldrb	r3, [r7, #3]
    a544:	011b      	lsls	r3, r3, #4
    a546:	697a      	ldr	r2, [r7, #20]
    a548:	441a      	add	r2, r3
    a54a:	7a93      	ldrb	r3, [r2, #10]
    a54c:	f36f 0341 	bfc	r3, #1, #1
    a550:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a552:	78fb      	ldrb	r3, [r7, #3]
    a554:	f107 0220 	add.w	r2, r7, #32
    a558:	4413      	add	r3, r2
    a55a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a55e:	7efb      	ldrb	r3, [r7, #27]
    a560:	4619      	mov	r1, r3
    a562:	69f8      	ldr	r0, [r7, #28]
    a564:	4b2b      	ldr	r3, [pc, #172]	; (a614 <_usb_d_dev_handle_trfail+0x1b4>)
    a566:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a568:	78fb      	ldrb	r3, [r7, #3]
    a56a:	f107 0220 	add.w	r2, r7, #32
    a56e:	4413      	add	r3, r2
    a570:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a574:	7efb      	ldrb	r3, [r7, #27]
    a576:	4619      	mov	r1, r3
    a578:	69f8      	ldr	r0, [r7, #28]
    a57a:	4b27      	ldr	r3, [pc, #156]	; (a618 <_usb_d_dev_handle_trfail+0x1b8>)
    a57c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a57e:	7cbb      	ldrb	r3, [r7, #18]
    a580:	2b00      	cmp	r3, #0
    a582:	d03b      	beq.n	a5fc <_usb_d_dev_handle_trfail+0x19c>
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	7cdb      	ldrb	r3, [r3, #19]
    a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a58c:	b2db      	uxtb	r3, r3
    a58e:	2b00      	cmp	r3, #0
    a590:	d034      	beq.n	a5fc <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a592:	687b      	ldr	r3, [r7, #4]
    a594:	7cdb      	ldrb	r3, [r3, #19]
    a596:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a59a:	b2db      	uxtb	r3, r3
    a59c:	461a      	mov	r2, r3
    a59e:	78fb      	ldrb	r3, [r7, #3]
    a5a0:	4293      	cmp	r3, r2
    a5a2:	d02b      	beq.n	a5fc <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a5a4:	687b      	ldr	r3, [r7, #4]
    a5a6:	7cdb      	ldrb	r3, [r3, #19]
    a5a8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	2b00      	cmp	r3, #0
    a5b0:	bf14      	ite	ne
    a5b2:	2301      	movne	r3, #1
    a5b4:	2300      	moveq	r3, #0
    a5b6:	b2db      	uxtb	r3, r3
    a5b8:	2200      	movs	r2, #0
    a5ba:	4619      	mov	r1, r3
    a5bc:	6878      	ldr	r0, [r7, #4]
    a5be:	4b17      	ldr	r3, [pc, #92]	; (a61c <_usb_d_dev_handle_trfail+0x1bc>)
    a5c0:	4798      	blx	r3
}
    a5c2:	e01b      	b.n	a5fc <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a5c4:	78fa      	ldrb	r2, [r7, #3]
    a5c6:	7efb      	ldrb	r3, [r7, #27]
    a5c8:	4611      	mov	r1, r2
    a5ca:	4618      	mov	r0, r3
    a5cc:	4b14      	ldr	r3, [pc, #80]	; (a620 <_usb_d_dev_handle_trfail+0x1c0>)
    a5ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a5d0:	78fb      	ldrb	r3, [r7, #3]
    a5d2:	f107 0220 	add.w	r2, r7, #32
    a5d6:	4413      	add	r3, r2
    a5d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5dc:	7efb      	ldrb	r3, [r7, #27]
    a5de:	4619      	mov	r1, r3
    a5e0:	69f8      	ldr	r0, [r7, #28]
    a5e2:	4b0c      	ldr	r3, [pc, #48]	; (a614 <_usb_d_dev_handle_trfail+0x1b4>)
    a5e4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a5e6:	78fb      	ldrb	r3, [r7, #3]
    a5e8:	f107 0220 	add.w	r2, r7, #32
    a5ec:	4413      	add	r3, r2
    a5ee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a5f2:	7efb      	ldrb	r3, [r7, #27]
    a5f4:	4619      	mov	r1, r3
    a5f6:	69f8      	ldr	r0, [r7, #28]
    a5f8:	4b07      	ldr	r3, [pc, #28]	; (a618 <_usb_d_dev_handle_trfail+0x1b8>)
    a5fa:	4798      	blx	r3
}
    a5fc:	bf00      	nop
    a5fe:	3720      	adds	r7, #32
    a600:	46bd      	mov	sp, r7
    a602:	bd80      	pop	{r7, pc}
    a604:	000102a8 	.word	0x000102a8
    a608:	20000dac 	.word	0x20000dac
    a60c:	000091c9 	.word	0x000091c9
    a610:	00009199 	.word	0x00009199
    a614:	0000906d 	.word	0x0000906d
    a618:	0000916d 	.word	0x0000916d
    a61c:	0000b1d9 	.word	0x0000b1d9
    a620:	00009a55 	.word	0x00009a55

0000a624 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a624:	b580      	push	{r7, lr}
    a626:	b082      	sub	sp, #8
    a628:	af00      	add	r7, sp, #0
    a62a:	6078      	str	r0, [r7, #4]
    a62c:	460b      	mov	r3, r1
    a62e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a630:	78fb      	ldrb	r3, [r7, #3]
    a632:	f003 0310 	and.w	r3, r3, #16
    a636:	2b00      	cmp	r3, #0
    a638:	d003      	beq.n	a642 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a63a:	6878      	ldr	r0, [r7, #4]
    a63c:	4b0c      	ldr	r3, [pc, #48]	; (a670 <_usb_d_dev_trans_setup_isr+0x4c>)
    a63e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a640:	e012      	b.n	a668 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a642:	78fb      	ldrb	r3, [r7, #3]
    a644:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a648:	2b00      	cmp	r3, #0
    a64a:	d004      	beq.n	a656 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a64c:	2101      	movs	r1, #1
    a64e:	6878      	ldr	r0, [r7, #4]
    a650:	4b08      	ldr	r3, [pc, #32]	; (a674 <_usb_d_dev_trans_setup_isr+0x50>)
    a652:	4798      	blx	r3
}
    a654:	e008      	b.n	a668 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a656:	78fb      	ldrb	r3, [r7, #3]
    a658:	f003 0320 	and.w	r3, r3, #32
    a65c:	2b00      	cmp	r3, #0
    a65e:	d003      	beq.n	a668 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a660:	2100      	movs	r1, #0
    a662:	6878      	ldr	r0, [r7, #4]
    a664:	4b03      	ldr	r3, [pc, #12]	; (a674 <_usb_d_dev_trans_setup_isr+0x50>)
    a666:	4798      	blx	r3
}
    a668:	bf00      	nop
    a66a:	3708      	adds	r7, #8
    a66c:	46bd      	mov	sp, r7
    a66e:	bd80      	pop	{r7, pc}
    a670:	0000a345 	.word	0x0000a345
    a674:	0000a41d 	.word	0x0000a41d

0000a678 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a678:	b580      	push	{r7, lr}
    a67a:	b082      	sub	sp, #8
    a67c:	af00      	add	r7, sp, #0
    a67e:	6078      	str	r0, [r7, #4]
    a680:	460b      	mov	r3, r1
    a682:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a684:	78fb      	ldrb	r3, [r7, #3]
    a686:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a68a:	2b00      	cmp	r3, #0
    a68c:	d004      	beq.n	a698 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a68e:	2101      	movs	r1, #1
    a690:	6878      	ldr	r0, [r7, #4]
    a692:	4b1a      	ldr	r3, [pc, #104]	; (a6fc <_usb_d_dev_trans_in_isr+0x84>)
    a694:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a696:	e02c      	b.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a698:	78fb      	ldrb	r3, [r7, #3]
    a69a:	f003 0308 	and.w	r3, r3, #8
    a69e:	2b00      	cmp	r3, #0
    a6a0:	d004      	beq.n	a6ac <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a6a2:	2101      	movs	r1, #1
    a6a4:	6878      	ldr	r0, [r7, #4]
    a6a6:	4b16      	ldr	r3, [pc, #88]	; (a700 <_usb_d_dev_trans_in_isr+0x88>)
    a6a8:	4798      	blx	r3
}
    a6aa:	e022      	b.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a6ac:	78fb      	ldrb	r3, [r7, #3]
    a6ae:	f003 0302 	and.w	r3, r3, #2
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	d004      	beq.n	a6c0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a6b6:	2101      	movs	r1, #1
    a6b8:	6878      	ldr	r0, [r7, #4]
    a6ba:	4b12      	ldr	r3, [pc, #72]	; (a704 <_usb_d_dev_trans_in_isr+0x8c>)
    a6bc:	4798      	blx	r3
}
    a6be:	e018      	b.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a6c0:	687b      	ldr	r3, [r7, #4]
    a6c2:	7cdb      	ldrb	r3, [r3, #19]
    a6c4:	f003 0307 	and.w	r3, r3, #7
    a6c8:	b2db      	uxtb	r3, r3
    a6ca:	2b01      	cmp	r3, #1
    a6cc:	d111      	bne.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a6ce:	78fb      	ldrb	r3, [r7, #3]
    a6d0:	f003 0304 	and.w	r3, r3, #4
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d004      	beq.n	a6e2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a6d8:	2100      	movs	r1, #0
    a6da:	6878      	ldr	r0, [r7, #4]
    a6dc:	4b08      	ldr	r3, [pc, #32]	; (a700 <_usb_d_dev_trans_in_isr+0x88>)
    a6de:	4798      	blx	r3
}
    a6e0:	e007      	b.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a6e2:	78fb      	ldrb	r3, [r7, #3]
    a6e4:	f003 0310 	and.w	r3, r3, #16
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d002      	beq.n	a6f2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a6ec:	6878      	ldr	r0, [r7, #4]
    a6ee:	4b06      	ldr	r3, [pc, #24]	; (a708 <_usb_d_dev_trans_in_isr+0x90>)
    a6f0:	4798      	blx	r3
}
    a6f2:	bf00      	nop
    a6f4:	3708      	adds	r7, #8
    a6f6:	46bd      	mov	sp, r7
    a6f8:	bd80      	pop	{r7, pc}
    a6fa:	bf00      	nop
    a6fc:	0000a41d 	.word	0x0000a41d
    a700:	0000a461 	.word	0x0000a461
    a704:	00009e69 	.word	0x00009e69
    a708:	0000a345 	.word	0x0000a345

0000a70c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
    a714:	460b      	mov	r3, r1
    a716:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a718:	78fb      	ldrb	r3, [r7, #3]
    a71a:	f003 0320 	and.w	r3, r3, #32
    a71e:	2b00      	cmp	r3, #0
    a720:	d004      	beq.n	a72c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a722:	2100      	movs	r1, #0
    a724:	6878      	ldr	r0, [r7, #4]
    a726:	4b1a      	ldr	r3, [pc, #104]	; (a790 <_usb_d_dev_trans_out_isr+0x84>)
    a728:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a72a:	e02c      	b.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a72c:	78fb      	ldrb	r3, [r7, #3]
    a72e:	f003 0304 	and.w	r3, r3, #4
    a732:	2b00      	cmp	r3, #0
    a734:	d004      	beq.n	a740 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a736:	2100      	movs	r1, #0
    a738:	6878      	ldr	r0, [r7, #4]
    a73a:	4b16      	ldr	r3, [pc, #88]	; (a794 <_usb_d_dev_trans_out_isr+0x88>)
    a73c:	4798      	blx	r3
}
    a73e:	e022      	b.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a740:	78fb      	ldrb	r3, [r7, #3]
    a742:	f003 0301 	and.w	r3, r3, #1
    a746:	2b00      	cmp	r3, #0
    a748:	d004      	beq.n	a754 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a74a:	2101      	movs	r1, #1
    a74c:	6878      	ldr	r0, [r7, #4]
    a74e:	4b12      	ldr	r3, [pc, #72]	; (a798 <_usb_d_dev_trans_out_isr+0x8c>)
    a750:	4798      	blx	r3
}
    a752:	e018      	b.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a754:	687b      	ldr	r3, [r7, #4]
    a756:	7cdb      	ldrb	r3, [r3, #19]
    a758:	f003 0307 	and.w	r3, r3, #7
    a75c:	b2db      	uxtb	r3, r3
    a75e:	2b01      	cmp	r3, #1
    a760:	d111      	bne.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a762:	78fb      	ldrb	r3, [r7, #3]
    a764:	f003 0308 	and.w	r3, r3, #8
    a768:	2b00      	cmp	r3, #0
    a76a:	d004      	beq.n	a776 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a76c:	2101      	movs	r1, #1
    a76e:	6878      	ldr	r0, [r7, #4]
    a770:	4b08      	ldr	r3, [pc, #32]	; (a794 <_usb_d_dev_trans_out_isr+0x88>)
    a772:	4798      	blx	r3
}
    a774:	e007      	b.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a776:	78fb      	ldrb	r3, [r7, #3]
    a778:	f003 0310 	and.w	r3, r3, #16
    a77c:	2b00      	cmp	r3, #0
    a77e:	d002      	beq.n	a786 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a780:	6878      	ldr	r0, [r7, #4]
    a782:	4b06      	ldr	r3, [pc, #24]	; (a79c <_usb_d_dev_trans_out_isr+0x90>)
    a784:	4798      	blx	r3
}
    a786:	bf00      	nop
    a788:	3708      	adds	r7, #8
    a78a:	46bd      	mov	sp, r7
    a78c:	bd80      	pop	{r7, pc}
    a78e:	bf00      	nop
    a790:	0000a41d 	.word	0x0000a41d
    a794:	0000a461 	.word	0x0000a461
    a798:	0000a081 	.word	0x0000a081
    a79c:	0000a345 	.word	0x0000a345

0000a7a0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a7a0:	b580      	push	{r7, lr}
    a7a2:	b084      	sub	sp, #16
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
    a7a8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a7aa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7ae:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7b0:	683b      	ldr	r3, [r7, #0]
    a7b2:	7c9b      	ldrb	r3, [r3, #18]
    a7b4:	f003 030f 	and.w	r3, r3, #15
    a7b8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a7ba:	7afb      	ldrb	r3, [r7, #11]
    a7bc:	2201      	movs	r2, #1
    a7be:	409a      	lsls	r2, r3
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	4013      	ands	r3, r2
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d03d      	beq.n	a844 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a7c8:	7afb      	ldrb	r3, [r7, #11]
    a7ca:	68fa      	ldr	r2, [r7, #12]
    a7cc:	3308      	adds	r3, #8
    a7ce:	015b      	lsls	r3, r3, #5
    a7d0:	4413      	add	r3, r2
    a7d2:	3307      	adds	r3, #7
    a7d4:	781b      	ldrb	r3, [r3, #0]
    a7d6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a7d8:	7afb      	ldrb	r3, [r7, #11]
    a7da:	68fa      	ldr	r2, [r7, #12]
    a7dc:	015b      	lsls	r3, r3, #5
    a7de:	4413      	add	r3, r2
    a7e0:	f203 1309 	addw	r3, r3, #265	; 0x109
    a7e4:	781b      	ldrb	r3, [r3, #0]
    a7e6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a7e8:	7aba      	ldrb	r2, [r7, #10]
    a7ea:	7a7b      	ldrb	r3, [r7, #9]
    a7ec:	4013      	ands	r3, r2
    a7ee:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a7f0:	7abb      	ldrb	r3, [r7, #10]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d027      	beq.n	a846 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a7f6:	683b      	ldr	r3, [r7, #0]
    a7f8:	7cdb      	ldrb	r3, [r3, #19]
    a7fa:	f003 0307 	and.w	r3, r3, #7
    a7fe:	b2db      	uxtb	r3, r3
    a800:	2b01      	cmp	r3, #1
    a802:	d10c      	bne.n	a81e <_usb_d_dev_handle_eps+0x7e>
    a804:	683b      	ldr	r3, [r7, #0]
    a806:	7cdb      	ldrb	r3, [r3, #19]
    a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a80c:	b2db      	uxtb	r3, r3
    a80e:	2b00      	cmp	r3, #0
    a810:	d105      	bne.n	a81e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a812:	7abb      	ldrb	r3, [r7, #10]
    a814:	4619      	mov	r1, r3
    a816:	6838      	ldr	r0, [r7, #0]
    a818:	4b0c      	ldr	r3, [pc, #48]	; (a84c <_usb_d_dev_handle_eps+0xac>)
    a81a:	4798      	blx	r3
    a81c:	e013      	b.n	a846 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a81e:	683b      	ldr	r3, [r7, #0]
    a820:	7cdb      	ldrb	r3, [r3, #19]
    a822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a826:	b2db      	uxtb	r3, r3
    a828:	2b00      	cmp	r3, #0
    a82a:	d005      	beq.n	a838 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a82c:	7abb      	ldrb	r3, [r7, #10]
    a82e:	4619      	mov	r1, r3
    a830:	6838      	ldr	r0, [r7, #0]
    a832:	4b07      	ldr	r3, [pc, #28]	; (a850 <_usb_d_dev_handle_eps+0xb0>)
    a834:	4798      	blx	r3
    a836:	e006      	b.n	a846 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a838:	7abb      	ldrb	r3, [r7, #10]
    a83a:	4619      	mov	r1, r3
    a83c:	6838      	ldr	r0, [r7, #0]
    a83e:	4b05      	ldr	r3, [pc, #20]	; (a854 <_usb_d_dev_handle_eps+0xb4>)
    a840:	4798      	blx	r3
    a842:	e000      	b.n	a846 <_usb_d_dev_handle_eps+0xa6>
		return;
    a844:	bf00      	nop
		}
	}
}
    a846:	3710      	adds	r7, #16
    a848:	46bd      	mov	sp, r7
    a84a:	bd80      	pop	{r7, pc}
    a84c:	0000a625 	.word	0x0000a625
    a850:	0000a679 	.word	0x0000a679
    a854:	0000a70d 	.word	0x0000a70d

0000a858 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a858:	b580      	push	{r7, lr}
    a85a:	b084      	sub	sp, #16
    a85c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a85e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a862:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a864:	68bb      	ldr	r3, [r7, #8]
    a866:	8c1b      	ldrh	r3, [r3, #32]
    a868:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a86a:	88fb      	ldrh	r3, [r7, #6]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d104      	bne.n	a87a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a870:	4b13      	ldr	r3, [pc, #76]	; (a8c0 <_usb_d_dev_handler+0x68>)
    a872:	4798      	blx	r3
    a874:	4603      	mov	r3, r0
    a876:	2b00      	cmp	r3, #0
    a878:	d11e      	bne.n	a8b8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a87a:	2300      	movs	r3, #0
    a87c:	73fb      	strb	r3, [r7, #15]
    a87e:	e017      	b.n	a8b0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a880:	7bfa      	ldrb	r2, [r7, #15]
    a882:	4613      	mov	r3, r2
    a884:	009b      	lsls	r3, r3, #2
    a886:	4413      	add	r3, r2
    a888:	009b      	lsls	r3, r3, #2
    a88a:	3310      	adds	r3, #16
    a88c:	4a0d      	ldr	r2, [pc, #52]	; (a8c4 <_usb_d_dev_handler+0x6c>)
    a88e:	4413      	add	r3, r2
    a890:	3304      	adds	r3, #4
    a892:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a894:	683b      	ldr	r3, [r7, #0]
    a896:	7c9b      	ldrb	r3, [r3, #18]
    a898:	2bff      	cmp	r3, #255	; 0xff
    a89a:	d005      	beq.n	a8a8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a89c:	88fb      	ldrh	r3, [r7, #6]
    a89e:	6839      	ldr	r1, [r7, #0]
    a8a0:	4618      	mov	r0, r3
    a8a2:	4b09      	ldr	r3, [pc, #36]	; (a8c8 <_usb_d_dev_handler+0x70>)
    a8a4:	4798      	blx	r3
    a8a6:	e000      	b.n	a8aa <_usb_d_dev_handler+0x52>
			continue;
    a8a8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a8aa:	7bfb      	ldrb	r3, [r7, #15]
    a8ac:	3301      	adds	r3, #1
    a8ae:	73fb      	strb	r3, [r7, #15]
    a8b0:	7bfb      	ldrb	r3, [r7, #15]
    a8b2:	2b08      	cmp	r3, #8
    a8b4:	d9e4      	bls.n	a880 <_usb_d_dev_handler+0x28>
    a8b6:	e000      	b.n	a8ba <_usb_d_dev_handler+0x62>
			return;
    a8b8:	bf00      	nop
	}
}
    a8ba:	3710      	adds	r7, #16
    a8bc:	46bd      	mov	sp, r7
    a8be:	bd80      	pop	{r7, pc}
    a8c0:	00009db1 	.word	0x00009db1
    a8c4:	20000ce4 	.word	0x20000ce4
    a8c8:	0000a7a1 	.word	0x0000a7a1

0000a8cc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a8cc:	b580      	push	{r7, lr}
    a8ce:	b082      	sub	sp, #8
    a8d0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a8d2:	2300      	movs	r3, #0
    a8d4:	71fb      	strb	r3, [r7, #7]
    a8d6:	e023      	b.n	a920 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a8d8:	79fa      	ldrb	r2, [r7, #7]
    a8da:	4613      	mov	r3, r2
    a8dc:	009b      	lsls	r3, r3, #2
    a8de:	4413      	add	r3, r2
    a8e0:	009b      	lsls	r3, r3, #2
    a8e2:	3310      	adds	r3, #16
    a8e4:	4a14      	ldr	r2, [pc, #80]	; (a938 <_usb_d_dev_reset_epts+0x6c>)
    a8e6:	4413      	add	r3, r2
    a8e8:	3304      	adds	r3, #4
    a8ea:	2103      	movs	r1, #3
    a8ec:	4618      	mov	r0, r3
    a8ee:	4b13      	ldr	r3, [pc, #76]	; (a93c <_usb_d_dev_reset_epts+0x70>)
    a8f0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a8f2:	79fa      	ldrb	r2, [r7, #7]
    a8f4:	4910      	ldr	r1, [pc, #64]	; (a938 <_usb_d_dev_reset_epts+0x6c>)
    a8f6:	4613      	mov	r3, r2
    a8f8:	009b      	lsls	r3, r3, #2
    a8fa:	4413      	add	r3, r2
    a8fc:	009b      	lsls	r3, r3, #2
    a8fe:	440b      	add	r3, r1
    a900:	3326      	adds	r3, #38	; 0x26
    a902:	22ff      	movs	r2, #255	; 0xff
    a904:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a906:	79fa      	ldrb	r2, [r7, #7]
    a908:	490b      	ldr	r1, [pc, #44]	; (a938 <_usb_d_dev_reset_epts+0x6c>)
    a90a:	4613      	mov	r3, r2
    a90c:	009b      	lsls	r3, r3, #2
    a90e:	4413      	add	r3, r2
    a910:	009b      	lsls	r3, r3, #2
    a912:	440b      	add	r3, r1
    a914:	3327      	adds	r3, #39	; 0x27
    a916:	2200      	movs	r2, #0
    a918:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a91a:	79fb      	ldrb	r3, [r7, #7]
    a91c:	3301      	adds	r3, #1
    a91e:	71fb      	strb	r3, [r7, #7]
    a920:	79fb      	ldrb	r3, [r7, #7]
    a922:	2b08      	cmp	r3, #8
    a924:	d9d8      	bls.n	a8d8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a926:	22a0      	movs	r2, #160	; 0xa0
    a928:	2100      	movs	r1, #0
    a92a:	4805      	ldr	r0, [pc, #20]	; (a940 <_usb_d_dev_reset_epts+0x74>)
    a92c:	4b05      	ldr	r3, [pc, #20]	; (a944 <_usb_d_dev_reset_epts+0x78>)
    a92e:	4798      	blx	r3
}
    a930:	bf00      	nop
    a932:	3708      	adds	r7, #8
    a934:	46bd      	mov	sp, r7
    a936:	bd80      	pop	{r7, pc}
    a938:	20000ce4 	.word	0x20000ce4
    a93c:	0000b191 	.word	0x0000b191
    a940:	20000dac 	.word	0x20000dac
    a944:	0000fba9 	.word	0x0000fba9

0000a948 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a948:	b580      	push	{r7, lr}
    a94a:	b084      	sub	sp, #16
    a94c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a94e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a952:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a954:	2301      	movs	r3, #1
    a956:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a958:	2304      	movs	r3, #4
    a95a:	713b      	strb	r3, [r7, #4]
    a95c:	2300      	movs	r3, #0
    a95e:	717b      	strb	r3, [r7, #5]
    a960:	2300      	movs	r3, #0
    a962:	71bb      	strb	r3, [r7, #6]
    a964:	2300      	movs	r3, #0
    a966:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a968:	2101      	movs	r1, #1
    a96a:	68f8      	ldr	r0, [r7, #12]
    a96c:	4b26      	ldr	r3, [pc, #152]	; (aa08 <_usb_d_dev_init+0xc0>)
    a96e:	4798      	blx	r3
    a970:	4603      	mov	r3, r0
    a972:	f083 0301 	eor.w	r3, r3, #1
    a976:	b2db      	uxtb	r3, r3
    a978:	2b00      	cmp	r3, #0
    a97a:	d011      	beq.n	a9a0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a97c:	2102      	movs	r1, #2
    a97e:	68f8      	ldr	r0, [r7, #12]
    a980:	4b22      	ldr	r3, [pc, #136]	; (aa0c <_usb_d_dev_init+0xc4>)
    a982:	4798      	blx	r3
    a984:	4603      	mov	r3, r0
    a986:	2b00      	cmp	r3, #0
    a988:	d006      	beq.n	a998 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a98a:	68f8      	ldr	r0, [r7, #12]
    a98c:	4b20      	ldr	r3, [pc, #128]	; (aa10 <_usb_d_dev_init+0xc8>)
    a98e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a990:	2102      	movs	r1, #2
    a992:	68f8      	ldr	r0, [r7, #12]
    a994:	4b1f      	ldr	r3, [pc, #124]	; (aa14 <_usb_d_dev_init+0xcc>)
    a996:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a998:	2101      	movs	r1, #1
    a99a:	68f8      	ldr	r0, [r7, #12]
    a99c:	4b1e      	ldr	r3, [pc, #120]	; (aa18 <_usb_d_dev_init+0xd0>)
    a99e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a9a0:	2101      	movs	r1, #1
    a9a2:	68f8      	ldr	r0, [r7, #12]
    a9a4:	4b1b      	ldr	r3, [pc, #108]	; (aa14 <_usb_d_dev_init+0xcc>)
    a9a6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a9a8:	4b1c      	ldr	r3, [pc, #112]	; (aa1c <_usb_d_dev_init+0xd4>)
    a9aa:	4a1d      	ldr	r2, [pc, #116]	; (aa20 <_usb_d_dev_init+0xd8>)
    a9ac:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a9ae:	4b1b      	ldr	r3, [pc, #108]	; (aa1c <_usb_d_dev_init+0xd4>)
    a9b0:	4a1b      	ldr	r2, [pc, #108]	; (aa20 <_usb_d_dev_init+0xd8>)
    a9b2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a9b4:	4b19      	ldr	r3, [pc, #100]	; (aa1c <_usb_d_dev_init+0xd4>)
    a9b6:	4a1a      	ldr	r2, [pc, #104]	; (aa20 <_usb_d_dev_init+0xd8>)
    a9b8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a9ba:	4b18      	ldr	r3, [pc, #96]	; (aa1c <_usb_d_dev_init+0xd4>)
    a9bc:	4a18      	ldr	r2, [pc, #96]	; (aa20 <_usb_d_dev_init+0xd8>)
    a9be:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a9c0:	4b16      	ldr	r3, [pc, #88]	; (aa1c <_usb_d_dev_init+0xd4>)
    a9c2:	4a17      	ldr	r2, [pc, #92]	; (aa20 <_usb_d_dev_init+0xd8>)
    a9c4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a9c6:	4b17      	ldr	r3, [pc, #92]	; (aa24 <_usb_d_dev_init+0xdc>)
    a9c8:	4798      	blx	r3

	_usb_load_calib();
    a9ca:	4b17      	ldr	r3, [pc, #92]	; (aa28 <_usb_d_dev_init+0xe0>)
    a9cc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a9ce:	2104      	movs	r1, #4
    a9d0:	68f8      	ldr	r0, [r7, #12]
    a9d2:	4b11      	ldr	r3, [pc, #68]	; (aa18 <_usb_d_dev_init+0xd0>)
    a9d4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a9d6:	4b15      	ldr	r3, [pc, #84]	; (aa2c <_usb_d_dev_init+0xe4>)
    a9d8:	4619      	mov	r1, r3
    a9da:	68f8      	ldr	r0, [r7, #12]
    a9dc:	4b14      	ldr	r3, [pc, #80]	; (aa30 <_usb_d_dev_init+0xe8>)
    a9de:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a9e0:	7afb      	ldrb	r3, [r7, #11]
    a9e2:	f107 0210 	add.w	r2, r7, #16
    a9e6:	4413      	add	r3, r2
    a9e8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a9ec:	f043 0301 	orr.w	r3, r3, #1
    a9f0:	b2db      	uxtb	r3, r3
    a9f2:	b29b      	uxth	r3, r3
    a9f4:	4619      	mov	r1, r3
    a9f6:	68f8      	ldr	r0, [r7, #12]
    a9f8:	4b0e      	ldr	r3, [pc, #56]	; (aa34 <_usb_d_dev_init+0xec>)
    a9fa:	4798      	blx	r3

	return ERR_NONE;
    a9fc:	2300      	movs	r3, #0
}
    a9fe:	4618      	mov	r0, r3
    aa00:	3710      	adds	r7, #16
    aa02:	46bd      	mov	sp, r7
    aa04:	bd80      	pop	{r7, pc}
    aa06:	bf00      	nop
    aa08:	00008fe1 	.word	0x00008fe1
    aa0c:	00009331 	.word	0x00009331
    aa10:	00009305 	.word	0x00009305
    aa14:	00008fb7 	.word	0x00008fb7
    aa18:	00009361 	.word	0x00009361
    aa1c:	20000ce4 	.word	0x20000ce4
    aa20:	00009429 	.word	0x00009429
    aa24:	0000a8cd 	.word	0x0000a8cd
    aa28:	00009441 	.word	0x00009441
    aa2c:	20000dac 	.word	0x20000dac
    aa30:	0000940d 	.word	0x0000940d
    aa34:	000093d1 	.word	0x000093d1

0000aa38 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    aa38:	b580      	push	{r7, lr}
    aa3a:	b082      	sub	sp, #8
    aa3c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    aa3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa42:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    aa44:	2103      	movs	r1, #3
    aa46:	6878      	ldr	r0, [r7, #4]
    aa48:	4b17      	ldr	r3, [pc, #92]	; (aaa8 <_usb_d_dev_enable+0x70>)
    aa4a:	4798      	blx	r3
    aa4c:	4603      	mov	r3, r0
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d002      	beq.n	aa58 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    aa52:	f06f 0310 	mvn.w	r3, #16
    aa56:	e023      	b.n	aaa0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    aa58:	6878      	ldr	r0, [r7, #4]
    aa5a:	4b14      	ldr	r3, [pc, #80]	; (aaac <_usb_d_dev_enable+0x74>)
    aa5c:	4798      	blx	r3
    aa5e:	4603      	mov	r3, r0
    aa60:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    aa62:	78fb      	ldrb	r3, [r7, #3]
    aa64:	f003 0302 	and.w	r3, r3, #2
    aa68:	2b00      	cmp	r3, #0
    aa6a:	d107      	bne.n	aa7c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    aa6c:	78fb      	ldrb	r3, [r7, #3]
    aa6e:	f043 0302 	orr.w	r3, r3, #2
    aa72:	b2db      	uxtb	r3, r3
    aa74:	4619      	mov	r1, r3
    aa76:	6878      	ldr	r0, [r7, #4]
    aa78:	4b0d      	ldr	r3, [pc, #52]	; (aab0 <_usb_d_dev_enable+0x78>)
    aa7a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    aa7c:	2050      	movs	r0, #80	; 0x50
    aa7e:	4b0d      	ldr	r3, [pc, #52]	; (aab4 <_usb_d_dev_enable+0x7c>)
    aa80:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    aa82:	2051      	movs	r0, #81	; 0x51
    aa84:	4b0b      	ldr	r3, [pc, #44]	; (aab4 <_usb_d_dev_enable+0x7c>)
    aa86:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aa88:	2052      	movs	r0, #82	; 0x52
    aa8a:	4b0a      	ldr	r3, [pc, #40]	; (aab4 <_usb_d_dev_enable+0x7c>)
    aa8c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aa8e:	2053      	movs	r0, #83	; 0x53
    aa90:	4b08      	ldr	r3, [pc, #32]	; (aab4 <_usb_d_dev_enable+0x7c>)
    aa92:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aa94:	f240 218d 	movw	r1, #653	; 0x28d
    aa98:	6878      	ldr	r0, [r7, #4]
    aa9a:	4b07      	ldr	r3, [pc, #28]	; (aab8 <_usb_d_dev_enable+0x80>)
    aa9c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aa9e:	2300      	movs	r3, #0
}
    aaa0:	4618      	mov	r0, r3
    aaa2:	3708      	adds	r7, #8
    aaa4:	46bd      	mov	sp, r7
    aaa6:	bd80      	pop	{r7, pc}
    aaa8:	000092db 	.word	0x000092db
    aaac:	00009389 	.word	0x00009389
    aab0:	00009361 	.word	0x00009361
    aab4:	00008eed 	.word	0x00008eed
    aab8:	00009285 	.word	0x00009285

0000aabc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    aabc:	b580      	push	{r7, lr}
    aabe:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    aac0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aac4:	4b01      	ldr	r3, [pc, #4]	; (aacc <_usb_d_dev_attach+0x10>)
    aac6:	4798      	blx	r3
}
    aac8:	bf00      	nop
    aaca:	bd80      	pop	{r7, pc}
    aacc:	000093ad 	.word	0x000093ad

0000aad0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    aad0:	b580      	push	{r7, lr}
    aad2:	b082      	sub	sp, #8
    aad4:	af00      	add	r7, sp, #0
    aad6:	4603      	mov	r3, r0
    aad8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    aada:	79fb      	ldrb	r3, [r7, #7]
    aadc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aae0:	b2db      	uxtb	r3, r3
    aae2:	4619      	mov	r1, r3
    aae4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aae8:	4b02      	ldr	r3, [pc, #8]	; (aaf4 <_usb_d_dev_set_address+0x24>)
    aaea:	4798      	blx	r3
}
    aaec:	bf00      	nop
    aaee:	3708      	adds	r7, #8
    aaf0:	46bd      	mov	sp, r7
    aaf2:	bd80      	pop	{r7, pc}
    aaf4:	000093ef 	.word	0x000093ef

0000aaf8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    aaf8:	b590      	push	{r4, r7, lr}
    aafa:	b085      	sub	sp, #20
    aafc:	af00      	add	r7, sp, #0
    aafe:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    ab00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab04:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ab06:	687b      	ldr	r3, [r7, #4]
    ab08:	7c9b      	ldrb	r3, [r3, #18]
    ab0a:	f003 030f 	and.w	r3, r3, #15
    ab0e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ab10:	687b      	ldr	r3, [r7, #4]
    ab12:	68db      	ldr	r3, [r3, #12]
    ab14:	461a      	mov	r2, r3
    ab16:	7afb      	ldrb	r3, [r7, #11]
    ab18:	2100      	movs	r1, #0
    ab1a:	4618      	mov	r0, r3
    ab1c:	4b0f      	ldr	r3, [pc, #60]	; (ab5c <_usb_d_dev_trans_setup+0x64>)
    ab1e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	8a1b      	ldrh	r3, [r3, #16]
    ab24:	461a      	mov	r2, r3
    ab26:	7af8      	ldrb	r0, [r7, #11]
    ab28:	2300      	movs	r3, #0
    ab2a:	2100      	movs	r1, #0
    ab2c:	4c0c      	ldr	r4, [pc, #48]	; (ab60 <_usb_d_dev_trans_setup+0x68>)
    ab2e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    ab30:	7afb      	ldrb	r3, [r7, #11]
    ab32:	22b0      	movs	r2, #176	; 0xb0
    ab34:	4619      	mov	r1, r3
    ab36:	68f8      	ldr	r0, [r7, #12]
    ab38:	4b0a      	ldr	r3, [pc, #40]	; (ab64 <_usb_d_dev_trans_setup+0x6c>)
    ab3a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    ab3c:	7afb      	ldrb	r3, [r7, #11]
    ab3e:	2200      	movs	r2, #0
    ab40:	2100      	movs	r1, #0
    ab42:	4618      	mov	r0, r3
    ab44:	4b08      	ldr	r3, [pc, #32]	; (ab68 <_usb_d_dev_trans_setup+0x70>)
    ab46:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    ab48:	7afb      	ldrb	r3, [r7, #11]
    ab4a:	2210      	movs	r2, #16
    ab4c:	4619      	mov	r1, r3
    ab4e:	68f8      	ldr	r0, [r7, #12]
    ab50:	4b06      	ldr	r3, [pc, #24]	; (ab6c <_usb_d_dev_trans_setup+0x74>)
    ab52:	4798      	blx	r3
}
    ab54:	bf00      	nop
    ab56:	3714      	adds	r7, #20
    ab58:	46bd      	mov	sp, r7
    ab5a:	bd90      	pop	{r4, r7, pc}
    ab5c:	0000988d 	.word	0x0000988d
    ab60:	00009a15 	.word	0x00009a15
    ab64:	000090ed 	.word	0x000090ed
    ab68:	00009ae5 	.word	0x00009ae5
    ab6c:	00009141 	.word	0x00009141

0000ab70 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    ab70:	b580      	push	{r7, lr}
    ab72:	b088      	sub	sp, #32
    ab74:	af00      	add	r7, sp, #0
    ab76:	4603      	mov	r3, r0
    ab78:	71fb      	strb	r3, [r7, #7]
    ab7a:	460b      	mov	r3, r1
    ab7c:	71bb      	strb	r3, [r7, #6]
    ab7e:	4613      	mov	r3, r2
    ab80:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    ab82:	79fb      	ldrb	r3, [r7, #7]
    ab84:	f003 030f 	and.w	r3, r3, #15
    ab88:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab8a:	79fb      	ldrb	r3, [r7, #7]
    ab8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab90:	2b00      	cmp	r3, #0
    ab92:	bf14      	ite	ne
    ab94:	2301      	movne	r3, #1
    ab96:	2300      	moveq	r3, #0
    ab98:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab9a:	7fba      	ldrb	r2, [r7, #30]
    ab9c:	7ffb      	ldrb	r3, [r7, #31]
    ab9e:	4611      	mov	r1, r2
    aba0:	4618      	mov	r0, r3
    aba2:	4b3e      	ldr	r3, [pc, #248]	; (ac9c <_usb_d_dev_ep_init+0x12c>)
    aba4:	4798      	blx	r3
    aba6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    aba8:	79bb      	ldrb	r3, [r7, #6]
    abaa:	f003 0303 	and.w	r3, r3, #3
    abae:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    abb0:	7ffa      	ldrb	r2, [r7, #31]
    abb2:	4613      	mov	r3, r2
    abb4:	005b      	lsls	r3, r3, #1
    abb6:	4413      	add	r3, r2
    abb8:	009b      	lsls	r3, r3, #2
    abba:	4a39      	ldr	r2, [pc, #228]	; (aca0 <_usb_d_dev_ep_init+0x130>)
    abbc:	4413      	add	r3, r2
    abbe:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    abc0:	7ffb      	ldrb	r3, [r7, #31]
    abc2:	2b04      	cmp	r3, #4
    abc4:	d902      	bls.n	abcc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    abc6:	f06f 0311 	mvn.w	r3, #17
    abca:	e063      	b.n	ac94 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    abcc:	69bb      	ldr	r3, [r7, #24]
    abce:	7c9b      	ldrb	r3, [r3, #18]
    abd0:	2bff      	cmp	r3, #255	; 0xff
    abd2:	d002      	beq.n	abda <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    abd4:	f06f 0313 	mvn.w	r3, #19
    abd8:	e05c      	b.n	ac94 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    abda:	7dfb      	ldrb	r3, [r7, #23]
    abdc:	2b00      	cmp	r3, #0
    abde:	d11f      	bne.n	ac20 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    abe0:	7fbb      	ldrb	r3, [r7, #30]
    abe2:	2b00      	cmp	r3, #0
    abe4:	bf14      	ite	ne
    abe6:	2301      	movne	r3, #1
    abe8:	2300      	moveq	r3, #0
    abea:	b2db      	uxtb	r3, r3
    abec:	f083 0301 	eor.w	r3, r3, #1
    abf0:	b2db      	uxtb	r3, r3
    abf2:	f003 0301 	and.w	r3, r3, #1
    abf6:	b2da      	uxtb	r2, r3
    abf8:	7ffb      	ldrb	r3, [r7, #31]
    abfa:	4611      	mov	r1, r2
    abfc:	4618      	mov	r0, r3
    abfe:	4b27      	ldr	r3, [pc, #156]	; (ac9c <_usb_d_dev_ep_init+0x12c>)
    ac00:	4798      	blx	r3
    ac02:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ac04:	68fb      	ldr	r3, [r7, #12]
    ac06:	7c9b      	ldrb	r3, [r3, #18]
    ac08:	2bff      	cmp	r3, #255	; 0xff
    ac0a:	d002      	beq.n	ac12 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ac0c:	f06f 0313 	mvn.w	r3, #19
    ac10:	e040      	b.n	ac94 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ac12:	693b      	ldr	r3, [r7, #16]
    ac14:	681b      	ldr	r3, [r3, #0]
    ac16:	2b00      	cmp	r3, #0
    ac18:	d102      	bne.n	ac20 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ac1a:	f06f 0312 	mvn.w	r3, #18
    ac1e:	e039      	b.n	ac94 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ac20:	7fbb      	ldrb	r3, [r7, #30]
    ac22:	2b00      	cmp	r3, #0
    ac24:	d007      	beq.n	ac36 <_usb_d_dev_ep_init+0xc6>
    ac26:	693b      	ldr	r3, [r7, #16]
    ac28:	685b      	ldr	r3, [r3, #4]
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	bf14      	ite	ne
    ac2e:	2301      	movne	r3, #1
    ac30:	2300      	moveq	r3, #0
    ac32:	b2db      	uxtb	r3, r3
    ac34:	e006      	b.n	ac44 <_usb_d_dev_ep_init+0xd4>
    ac36:	693b      	ldr	r3, [r7, #16]
    ac38:	681b      	ldr	r3, [r3, #0]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	bf14      	ite	ne
    ac3e:	2301      	movne	r3, #1
    ac40:	2300      	moveq	r3, #0
    ac42:	b2db      	uxtb	r3, r3
    ac44:	2b00      	cmp	r3, #0
    ac46:	d00f      	beq.n	ac68 <_usb_d_dev_ep_init+0xf8>
    ac48:	7fbb      	ldrb	r3, [r7, #30]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d003      	beq.n	ac56 <_usb_d_dev_ep_init+0xe6>
    ac4e:	693b      	ldr	r3, [r7, #16]
    ac50:	895b      	ldrh	r3, [r3, #10]
    ac52:	461a      	mov	r2, r3
    ac54:	e002      	b.n	ac5c <_usb_d_dev_ep_init+0xec>
    ac56:	693b      	ldr	r3, [r7, #16]
    ac58:	891b      	ldrh	r3, [r3, #8]
    ac5a:	461a      	mov	r2, r3
    ac5c:	88bb      	ldrh	r3, [r7, #4]
    ac5e:	429a      	cmp	r2, r3
    ac60:	da02      	bge.n	ac68 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    ac62:	f06f 0312 	mvn.w	r3, #18
    ac66:	e015      	b.n	ac94 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    ac68:	7fbb      	ldrb	r3, [r7, #30]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d002      	beq.n	ac74 <_usb_d_dev_ep_init+0x104>
    ac6e:	693b      	ldr	r3, [r7, #16]
    ac70:	685b      	ldr	r3, [r3, #4]
    ac72:	e001      	b.n	ac78 <_usb_d_dev_ep_init+0x108>
    ac74:	693b      	ldr	r3, [r7, #16]
    ac76:	681b      	ldr	r3, [r3, #0]
    ac78:	69ba      	ldr	r2, [r7, #24]
    ac7a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    ac7c:	69bb      	ldr	r3, [r7, #24]
    ac7e:	88ba      	ldrh	r2, [r7, #4]
    ac80:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    ac82:	7dfb      	ldrb	r3, [r7, #23]
    ac84:	3301      	adds	r3, #1
    ac86:	b2da      	uxtb	r2, r3
    ac88:	69bb      	ldr	r3, [r7, #24]
    ac8a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ac8c:	69bb      	ldr	r3, [r7, #24]
    ac8e:	79fa      	ldrb	r2, [r7, #7]
    ac90:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ac92:	2300      	movs	r3, #0
}
    ac94:	4618      	mov	r0, r3
    ac96:	3720      	adds	r7, #32
    ac98:	46bd      	mov	sp, r7
    ac9a:	bd80      	pop	{r7, pc}
    ac9c:	00009ba1 	.word	0x00009ba1
    aca0:	0001026c 	.word	0x0001026c

0000aca4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    aca4:	b580      	push	{r7, lr}
    aca6:	b086      	sub	sp, #24
    aca8:	af00      	add	r7, sp, #0
    acaa:	4603      	mov	r3, r0
    acac:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    acae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    acb2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    acb4:	79fb      	ldrb	r3, [r7, #7]
    acb6:	f003 030f 	and.w	r3, r3, #15
    acba:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    acbc:	79fb      	ldrb	r3, [r7, #7]
    acbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acc2:	2b00      	cmp	r3, #0
    acc4:	bf14      	ite	ne
    acc6:	2301      	movne	r3, #1
    acc8:	2300      	moveq	r3, #0
    acca:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    accc:	7cba      	ldrb	r2, [r7, #18]
    acce:	7cfb      	ldrb	r3, [r7, #19]
    acd0:	4611      	mov	r1, r2
    acd2:	4618      	mov	r0, r3
    acd4:	4b2a      	ldr	r3, [pc, #168]	; (ad80 <_usb_d_dev_ep_deinit+0xdc>)
    acd6:	4798      	blx	r3
    acd8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    acda:	7cfb      	ldrb	r3, [r7, #19]
    acdc:	2b04      	cmp	r3, #4
    acde:	d84a      	bhi.n	ad76 <_usb_d_dev_ep_deinit+0xd2>
    ace0:	68fb      	ldr	r3, [r7, #12]
    ace2:	7c9b      	ldrb	r3, [r3, #18]
    ace4:	2bff      	cmp	r3, #255	; 0xff
    ace6:	d046      	beq.n	ad76 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ace8:	7cbb      	ldrb	r3, [r7, #18]
    acea:	2203      	movs	r2, #3
    acec:	4619      	mov	r1, r3
    acee:	68f8      	ldr	r0, [r7, #12]
    acf0:	4b24      	ldr	r3, [pc, #144]	; (ad84 <_usb_d_dev_ep_deinit+0xe0>)
    acf2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    acf4:	68fb      	ldr	r3, [r7, #12]
    acf6:	7cdb      	ldrb	r3, [r3, #19]
    acf8:	f003 0307 	and.w	r3, r3, #7
    acfc:	b2db      	uxtb	r3, r3
    acfe:	2b01      	cmp	r3, #1
    ad00:	d107      	bne.n	ad12 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ad02:	79fb      	ldrb	r3, [r7, #7]
    ad04:	697a      	ldr	r2, [r7, #20]
    ad06:	3308      	adds	r3, #8
    ad08:	015b      	lsls	r3, r3, #5
    ad0a:	4413      	add	r3, r2
    ad0c:	2200      	movs	r2, #0
    ad0e:	701a      	strb	r2, [r3, #0]
    ad10:	e02a      	b.n	ad68 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ad12:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ad16:	2b00      	cmp	r3, #0
    ad18:	da15      	bge.n	ad46 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ad1a:	79fb      	ldrb	r3, [r7, #7]
    ad1c:	f003 030f 	and.w	r3, r3, #15
    ad20:	79fa      	ldrb	r2, [r7, #7]
    ad22:	f002 020f 	and.w	r2, r2, #15
    ad26:	6979      	ldr	r1, [r7, #20]
    ad28:	3208      	adds	r2, #8
    ad2a:	0152      	lsls	r2, r2, #5
    ad2c:	440a      	add	r2, r1
    ad2e:	7812      	ldrb	r2, [r2, #0]
    ad30:	b2d2      	uxtb	r2, r2
    ad32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    ad36:	b2d1      	uxtb	r1, r2
    ad38:	697a      	ldr	r2, [r7, #20]
    ad3a:	3308      	adds	r3, #8
    ad3c:	015b      	lsls	r3, r3, #5
    ad3e:	4413      	add	r3, r2
    ad40:	460a      	mov	r2, r1
    ad42:	701a      	strb	r2, [r3, #0]
    ad44:	e010      	b.n	ad68 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ad46:	79fb      	ldrb	r3, [r7, #7]
    ad48:	79fa      	ldrb	r2, [r7, #7]
    ad4a:	6979      	ldr	r1, [r7, #20]
    ad4c:	3208      	adds	r2, #8
    ad4e:	0152      	lsls	r2, r2, #5
    ad50:	440a      	add	r2, r1
    ad52:	7812      	ldrb	r2, [r2, #0]
    ad54:	b2d2      	uxtb	r2, r2
    ad56:	f022 0207 	bic.w	r2, r2, #7
    ad5a:	b2d1      	uxtb	r1, r2
    ad5c:	697a      	ldr	r2, [r7, #20]
    ad5e:	3308      	adds	r3, #8
    ad60:	015b      	lsls	r3, r3, #5
    ad62:	4413      	add	r3, r2
    ad64:	460a      	mov	r2, r1
    ad66:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ad68:	68fb      	ldr	r3, [r7, #12]
    ad6a:	2200      	movs	r2, #0
    ad6c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    ad6e:	68fb      	ldr	r3, [r7, #12]
    ad70:	22ff      	movs	r2, #255	; 0xff
    ad72:	749a      	strb	r2, [r3, #18]
    ad74:	e000      	b.n	ad78 <_usb_d_dev_ep_deinit+0xd4>
		return;
    ad76:	bf00      	nop
}
    ad78:	3718      	adds	r7, #24
    ad7a:	46bd      	mov	sp, r7
    ad7c:	bd80      	pop	{r7, pc}
    ad7e:	bf00      	nop
    ad80:	00009ba1 	.word	0x00009ba1
    ad84:	0000b1d9 	.word	0x0000b1d9

0000ad88 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ad88:	b5b0      	push	{r4, r5, r7, lr}
    ad8a:	b088      	sub	sp, #32
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	4603      	mov	r3, r0
    ad90:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ad92:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad96:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ad98:	79fb      	ldrb	r3, [r7, #7]
    ad9a:	f003 030f 	and.w	r3, r3, #15
    ad9e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ada0:	79fb      	ldrb	r3, [r7, #7]
    ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ada6:	2b00      	cmp	r3, #0
    ada8:	bf14      	ite	ne
    adaa:	2301      	movne	r3, #1
    adac:	2300      	moveq	r3, #0
    adae:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    adb0:	7eba      	ldrb	r2, [r7, #26]
    adb2:	7efb      	ldrb	r3, [r7, #27]
    adb4:	4611      	mov	r1, r2
    adb6:	4618      	mov	r0, r3
    adb8:	4b70      	ldr	r3, [pc, #448]	; (af7c <_usb_d_dev_ep_enable+0x1f4>)
    adba:	4798      	blx	r3
    adbc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    adbe:	7efb      	ldrb	r3, [r7, #27]
    adc0:	4619      	mov	r1, r3
    adc2:	69f8      	ldr	r0, [r7, #28]
    adc4:	4b6e      	ldr	r3, [pc, #440]	; (af80 <_usb_d_dev_ep_enable+0x1f8>)
    adc6:	4798      	blx	r3
    adc8:	4603      	mov	r3, r0
    adca:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    adcc:	7efb      	ldrb	r3, [r7, #27]
    adce:	2b04      	cmp	r3, #4
    add0:	d803      	bhi.n	adda <_usb_d_dev_ep_enable+0x52>
    add2:	697b      	ldr	r3, [r7, #20]
    add4:	7c9b      	ldrb	r3, [r3, #18]
    add6:	2bff      	cmp	r3, #255	; 0xff
    add8:	d102      	bne.n	ade0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    adda:	f06f 0311 	mvn.w	r3, #17
    adde:	e0c8      	b.n	af72 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ade0:	7efb      	ldrb	r3, [r7, #27]
    ade2:	015b      	lsls	r3, r3, #5
    ade4:	4a67      	ldr	r2, [pc, #412]	; (af84 <_usb_d_dev_ep_enable+0x1fc>)
    ade6:	4413      	add	r3, r2
    ade8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    adea:	697b      	ldr	r3, [r7, #20]
    adec:	7cdb      	ldrb	r3, [r3, #19]
    adee:	f003 0307 	and.w	r3, r3, #7
    adf2:	b2db      	uxtb	r3, r3
    adf4:	2b01      	cmp	r3, #1
    adf6:	d14b      	bne.n	ae90 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    adf8:	7cfb      	ldrb	r3, [r7, #19]
    adfa:	f003 0377 	and.w	r3, r3, #119	; 0x77
    adfe:	2b00      	cmp	r3, #0
    ae00:	d002      	beq.n	ae08 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    ae02:	f06f 0313 	mvn.w	r3, #19
    ae06:	e0b4      	b.n	af72 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ae08:	7efb      	ldrb	r3, [r7, #27]
    ae0a:	2211      	movs	r2, #17
    ae0c:	4619      	mov	r1, r3
    ae0e:	69f8      	ldr	r0, [r7, #28]
    ae10:	4b5d      	ldr	r3, [pc, #372]	; (af88 <_usb_d_dev_ep_enable+0x200>)
    ae12:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae14:	697b      	ldr	r3, [r7, #20]
    ae16:	8a1b      	ldrh	r3, [r3, #16]
    ae18:	039b      	lsls	r3, r3, #14
    ae1a:	4c5c      	ldr	r4, [pc, #368]	; (af8c <_usb_d_dev_ep_enable+0x204>)
    ae1c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae1e:	697b      	ldr	r3, [r7, #20]
    ae20:	8a1b      	ldrh	r3, [r3, #16]
    ae22:	4618      	mov	r0, r3
    ae24:	4b5a      	ldr	r3, [pc, #360]	; (af90 <_usb_d_dev_ep_enable+0x208>)
    ae26:	4798      	blx	r3
    ae28:	4603      	mov	r3, r0
    ae2a:	071b      	lsls	r3, r3, #28
    ae2c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae30:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ae34:	68fb      	ldr	r3, [r7, #12]
    ae36:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ae38:	68fb      	ldr	r3, [r7, #12]
    ae3a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae3e:	697b      	ldr	r3, [r7, #20]
    ae40:	8a1b      	ldrh	r3, [r3, #16]
    ae42:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae46:	697b      	ldr	r3, [r7, #20]
    ae48:	8a1b      	ldrh	r3, [r3, #16]
    ae4a:	4618      	mov	r0, r3
    ae4c:	4b50      	ldr	r3, [pc, #320]	; (af90 <_usb_d_dev_ep_enable+0x208>)
    ae4e:	4798      	blx	r3
    ae50:	4603      	mov	r3, r0
    ae52:	071b      	lsls	r3, r3, #28
    ae54:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae58:	432b      	orrs	r3, r5
    ae5a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ae5c:	7efb      	ldrb	r3, [r7, #27]
    ae5e:	2200      	movs	r2, #0
    ae60:	2100      	movs	r1, #0
    ae62:	4618      	mov	r0, r3
    ae64:	4b4b      	ldr	r3, [pc, #300]	; (af94 <_usb_d_dev_ep_enable+0x20c>)
    ae66:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ae68:	7efb      	ldrb	r3, [r7, #27]
    ae6a:	2200      	movs	r2, #0
    ae6c:	2101      	movs	r1, #1
    ae6e:	4618      	mov	r0, r3
    ae70:	4b49      	ldr	r3, [pc, #292]	; (af98 <_usb_d_dev_ep_enable+0x210>)
    ae72:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ae74:	7efb      	ldrb	r3, [r7, #27]
    ae76:	2100      	movs	r1, #0
    ae78:	4618      	mov	r0, r3
    ae7a:	4b48      	ldr	r3, [pc, #288]	; (af9c <_usb_d_dev_ep_enable+0x214>)
    ae7c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ae7e:	7efb      	ldrb	r3, [r7, #27]
    ae80:	2101      	movs	r1, #1
    ae82:	4618      	mov	r0, r3
    ae84:	4b45      	ldr	r3, [pc, #276]	; (af9c <_usb_d_dev_ep_enable+0x214>)
    ae86:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ae88:	6978      	ldr	r0, [r7, #20]
    ae8a:	4b45      	ldr	r3, [pc, #276]	; (afa0 <_usb_d_dev_ep_enable+0x218>)
    ae8c:	4798      	blx	r3
    ae8e:	e06f      	b.n	af70 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ae90:	7ebb      	ldrb	r3, [r7, #26]
    ae92:	2b00      	cmp	r3, #0
    ae94:	d038      	beq.n	af08 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ae96:	7cfb      	ldrb	r3, [r7, #19]
    ae98:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d002      	beq.n	aea6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    aea0:	f06f 0313 	mvn.w	r3, #19
    aea4:	e065      	b.n	af72 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    aea6:	697b      	ldr	r3, [r7, #20]
    aea8:	7cdb      	ldrb	r3, [r3, #19]
    aeaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aeae:	b2db      	uxtb	r3, r3
    aeb0:	011b      	lsls	r3, r3, #4
    aeb2:	b2db      	uxtb	r3, r3
    aeb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    aeb8:	b2da      	uxtb	r2, r3
    aeba:	7cfb      	ldrb	r3, [r7, #19]
    aebc:	4313      	orrs	r3, r2
    aebe:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aec0:	7cfa      	ldrb	r2, [r7, #19]
    aec2:	7efb      	ldrb	r3, [r7, #27]
    aec4:	4619      	mov	r1, r3
    aec6:	69f8      	ldr	r0, [r7, #28]
    aec8:	4b2f      	ldr	r3, [pc, #188]	; (af88 <_usb_d_dev_ep_enable+0x200>)
    aeca:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    aecc:	68fb      	ldr	r3, [r7, #12]
    aece:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aed2:	697b      	ldr	r3, [r7, #20]
    aed4:	8a1b      	ldrh	r3, [r3, #16]
    aed6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    aeda:	697b      	ldr	r3, [r7, #20]
    aedc:	8a1b      	ldrh	r3, [r3, #16]
    aede:	4618      	mov	r0, r3
    aee0:	4b2b      	ldr	r3, [pc, #172]	; (af90 <_usb_d_dev_ep_enable+0x208>)
    aee2:	4798      	blx	r3
    aee4:	4603      	mov	r3, r0
    aee6:	071b      	lsls	r3, r3, #28
    aee8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aeec:	432b      	orrs	r3, r5
    aeee:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aef0:	7efb      	ldrb	r3, [r7, #27]
    aef2:	2200      	movs	r2, #0
    aef4:	2101      	movs	r1, #1
    aef6:	4618      	mov	r0, r3
    aef8:	4b27      	ldr	r3, [pc, #156]	; (af98 <_usb_d_dev_ep_enable+0x210>)
    aefa:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aefc:	7efb      	ldrb	r3, [r7, #27]
    aefe:	2101      	movs	r1, #1
    af00:	4618      	mov	r0, r3
    af02:	4b26      	ldr	r3, [pc, #152]	; (af9c <_usb_d_dev_ep_enable+0x214>)
    af04:	4798      	blx	r3
    af06:	e033      	b.n	af70 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    af08:	7cfb      	ldrb	r3, [r7, #19]
    af0a:	f003 0307 	and.w	r3, r3, #7
    af0e:	2b00      	cmp	r3, #0
    af10:	d002      	beq.n	af18 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    af12:	f06f 0313 	mvn.w	r3, #19
    af16:	e02c      	b.n	af72 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    af18:	697b      	ldr	r3, [r7, #20]
    af1a:	7cdb      	ldrb	r3, [r3, #19]
    af1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af20:	b2db      	uxtb	r3, r3
    af22:	461a      	mov	r2, r3
    af24:	7cfb      	ldrb	r3, [r7, #19]
    af26:	4313      	orrs	r3, r2
    af28:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    af2a:	7cfa      	ldrb	r2, [r7, #19]
    af2c:	7efb      	ldrb	r3, [r7, #27]
    af2e:	4619      	mov	r1, r3
    af30:	69f8      	ldr	r0, [r7, #28]
    af32:	4b15      	ldr	r3, [pc, #84]	; (af88 <_usb_d_dev_ep_enable+0x200>)
    af34:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af36:	697b      	ldr	r3, [r7, #20]
    af38:	8a1b      	ldrh	r3, [r3, #16]
    af3a:	039b      	lsls	r3, r3, #14
    af3c:	4c13      	ldr	r4, [pc, #76]	; (af8c <_usb_d_dev_ep_enable+0x204>)
    af3e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    af40:	697b      	ldr	r3, [r7, #20]
    af42:	8a1b      	ldrh	r3, [r3, #16]
    af44:	4618      	mov	r0, r3
    af46:	4b12      	ldr	r3, [pc, #72]	; (af90 <_usb_d_dev_ep_enable+0x208>)
    af48:	4798      	blx	r3
    af4a:	4603      	mov	r3, r0
    af4c:	071b      	lsls	r3, r3, #28
    af4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    af52:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    af56:	68fb      	ldr	r3, [r7, #12]
    af58:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    af5a:	7efb      	ldrb	r3, [r7, #27]
    af5c:	2200      	movs	r2, #0
    af5e:	2100      	movs	r1, #0
    af60:	4618      	mov	r0, r3
    af62:	4b0c      	ldr	r3, [pc, #48]	; (af94 <_usb_d_dev_ep_enable+0x20c>)
    af64:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    af66:	7efb      	ldrb	r3, [r7, #27]
    af68:	2100      	movs	r1, #0
    af6a:	4618      	mov	r0, r3
    af6c:	4b0b      	ldr	r3, [pc, #44]	; (af9c <_usb_d_dev_ep_enable+0x214>)
    af6e:	4798      	blx	r3
	}

	return USB_OK;
    af70:	2300      	movs	r3, #0
}
    af72:	4618      	mov	r0, r3
    af74:	3720      	adds	r7, #32
    af76:	46bd      	mov	sp, r7
    af78:	bdb0      	pop	{r4, r5, r7, pc}
    af7a:	bf00      	nop
    af7c:	00009ba1 	.word	0x00009ba1
    af80:	00009227 	.word	0x00009227
    af84:	20000dac 	.word	0x20000dac
    af88:	000091fd 	.word	0x000091fd
    af8c:	0fffc000 	.word	0x0fffc000
    af90:	00009b3d 	.word	0x00009b3d
    af94:	00009ae5 	.word	0x00009ae5
    af98:	00009a8d 	.word	0x00009a8d
    af9c:	00009a55 	.word	0x00009a55
    afa0:	0000aaf9 	.word	0x0000aaf9

0000afa4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    afa4:	b580      	push	{r7, lr}
    afa6:	b084      	sub	sp, #16
    afa8:	af00      	add	r7, sp, #0
    afaa:	6078      	str	r0, [r7, #4]
    afac:	460b      	mov	r3, r1
    afae:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	7c9b      	ldrb	r3, [r3, #18]
    afb4:	f003 030f 	and.w	r3, r3, #15
    afb8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    afba:	78fa      	ldrb	r2, [r7, #3]
    afbc:	7bfb      	ldrb	r3, [r7, #15]
    afbe:	4611      	mov	r1, r2
    afc0:	4618      	mov	r0, r3
    afc2:	4b03      	ldr	r3, [pc, #12]	; (afd0 <_usb_d_dev_ep_stall_get+0x2c>)
    afc4:	4798      	blx	r3
    afc6:	4603      	mov	r3, r0
}
    afc8:	4618      	mov	r0, r3
    afca:	3710      	adds	r7, #16
    afcc:	46bd      	mov	sp, r7
    afce:	bd80      	pop	{r7, pc}
    afd0:	00009695 	.word	0x00009695

0000afd4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    afd4:	b580      	push	{r7, lr}
    afd6:	b084      	sub	sp, #16
    afd8:	af00      	add	r7, sp, #0
    afda:	6078      	str	r0, [r7, #4]
    afdc:	460b      	mov	r3, r1
    afde:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	7c9b      	ldrb	r3, [r3, #18]
    afe4:	f003 030f 	and.w	r3, r3, #15
    afe8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    afea:	78f9      	ldrb	r1, [r7, #3]
    afec:	7bfb      	ldrb	r3, [r7, #15]
    afee:	2201      	movs	r2, #1
    aff0:	4618      	mov	r0, r3
    aff2:	4b0a      	ldr	r3, [pc, #40]	; (b01c <_usb_d_dev_ep_stall_set+0x48>)
    aff4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    aff6:	78fb      	ldrb	r3, [r7, #3]
    aff8:	2220      	movs	r2, #32
    affa:	409a      	lsls	r2, r3
    affc:	7bfb      	ldrb	r3, [r7, #15]
    affe:	4611      	mov	r1, r2
    b000:	4618      	mov	r0, r3
    b002:	4b07      	ldr	r3, [pc, #28]	; (b020 <_usb_d_dev_ep_stall_set+0x4c>)
    b004:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    b006:	687a      	ldr	r2, [r7, #4]
    b008:	7cd3      	ldrb	r3, [r2, #19]
    b00a:	f043 0308 	orr.w	r3, r3, #8
    b00e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    b010:	2300      	movs	r3, #0
}
    b012:	4618      	mov	r0, r3
    b014:	3710      	adds	r7, #16
    b016:	46bd      	mov	sp, r7
    b018:	bd80      	pop	{r7, pc}
    b01a:	bf00      	nop
    b01c:	0000963d 	.word	0x0000963d
    b020:	000095bd 	.word	0x000095bd

0000b024 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    b024:	b580      	push	{r7, lr}
    b026:	b084      	sub	sp, #16
    b028:	af00      	add	r7, sp, #0
    b02a:	6078      	str	r0, [r7, #4]
    b02c:	460b      	mov	r3, r1
    b02e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b030:	687b      	ldr	r3, [r7, #4]
    b032:	7c9b      	ldrb	r3, [r3, #18]
    b034:	f003 030f 	and.w	r3, r3, #15
    b038:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    b03a:	78fa      	ldrb	r2, [r7, #3]
    b03c:	7bfb      	ldrb	r3, [r7, #15]
    b03e:	4611      	mov	r1, r2
    b040:	4618      	mov	r0, r3
    b042:	4b28      	ldr	r3, [pc, #160]	; (b0e4 <_usb_d_dev_ep_stall_clr+0xc0>)
    b044:	4798      	blx	r3
    b046:	4603      	mov	r3, r0
    b048:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    b04a:	7bbb      	ldrb	r3, [r7, #14]
    b04c:	f083 0301 	eor.w	r3, r3, #1
    b050:	b2db      	uxtb	r3, r3
    b052:	2b00      	cmp	r3, #0
    b054:	d001      	beq.n	b05a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    b056:	2300      	movs	r3, #0
    b058:	e040      	b.n	b0dc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    b05a:	78f9      	ldrb	r1, [r7, #3]
    b05c:	7bfb      	ldrb	r3, [r7, #15]
    b05e:	2200      	movs	r2, #0
    b060:	4618      	mov	r0, r3
    b062:	4b21      	ldr	r3, [pc, #132]	; (b0e8 <_usb_d_dev_ep_stall_clr+0xc4>)
    b064:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b066:	78fb      	ldrb	r3, [r7, #3]
    b068:	2220      	movs	r2, #32
    b06a:	409a      	lsls	r2, r3
    b06c:	7bfb      	ldrb	r3, [r7, #15]
    b06e:	4611      	mov	r1, r2
    b070:	4618      	mov	r0, r3
    b072:	4b1e      	ldr	r3, [pc, #120]	; (b0ec <_usb_d_dev_ep_stall_clr+0xc8>)
    b074:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b076:	78fa      	ldrb	r2, [r7, #3]
    b078:	7bfb      	ldrb	r3, [r7, #15]
    b07a:	4611      	mov	r1, r2
    b07c:	4618      	mov	r0, r3
    b07e:	4b1c      	ldr	r3, [pc, #112]	; (b0f0 <_usb_d_dev_ep_stall_clr+0xcc>)
    b080:	4798      	blx	r3
    b082:	4603      	mov	r3, r0
    b084:	2b00      	cmp	r3, #0
    b086:	d00b      	beq.n	b0a0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b088:	78fa      	ldrb	r2, [r7, #3]
    b08a:	7bfb      	ldrb	r3, [r7, #15]
    b08c:	4611      	mov	r1, r2
    b08e:	4618      	mov	r0, r3
    b090:	4b18      	ldr	r3, [pc, #96]	; (b0f4 <_usb_d_dev_ep_stall_clr+0xd0>)
    b092:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b094:	78f9      	ldrb	r1, [r7, #3]
    b096:	7bfb      	ldrb	r3, [r7, #15]
    b098:	2200      	movs	r2, #0
    b09a:	4618      	mov	r0, r3
    b09c:	4b16      	ldr	r3, [pc, #88]	; (b0f8 <_usb_d_dev_ep_stall_clr+0xd4>)
    b09e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	7cdb      	ldrb	r3, [r3, #19]
    b0a4:	f003 0307 	and.w	r3, r3, #7
    b0a8:	b2db      	uxtb	r3, r3
    b0aa:	2b01      	cmp	r3, #1
    b0ac:	d110      	bne.n	b0d0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b0ae:	7bfb      	ldrb	r3, [r7, #15]
    b0b0:	4619      	mov	r1, r3
    b0b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0b6:	4b11      	ldr	r3, [pc, #68]	; (b0fc <_usb_d_dev_ep_stall_clr+0xd8>)
    b0b8:	4798      	blx	r3
    b0ba:	4603      	mov	r3, r0
    b0bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d10a      	bne.n	b0da <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b0c4:	687a      	ldr	r2, [r7, #4]
    b0c6:	7cd3      	ldrb	r3, [r2, #19]
    b0c8:	f36f 03c3 	bfc	r3, #3, #1
    b0cc:	74d3      	strb	r3, [r2, #19]
    b0ce:	e004      	b.n	b0da <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b0d0:	687a      	ldr	r2, [r7, #4]
    b0d2:	7cd3      	ldrb	r3, [r2, #19]
    b0d4:	f36f 03c3 	bfc	r3, #3, #1
    b0d8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b0da:	2300      	movs	r3, #0
}
    b0dc:	4618      	mov	r0, r3
    b0de:	3710      	adds	r7, #16
    b0e0:	46bd      	mov	sp, r7
    b0e2:	bd80      	pop	{r7, pc}
    b0e4:	00009695 	.word	0x00009695
    b0e8:	0000963d 	.word	0x0000963d
    b0ec:	000095e5 	.word	0x000095e5
    b0f0:	000096d9 	.word	0x000096d9
    b0f4:	0000971d 	.word	0x0000971d
    b0f8:	00009809 	.word	0x00009809
    b0fc:	000090c5 	.word	0x000090c5

0000b100 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b100:	b580      	push	{r7, lr}
    b102:	b086      	sub	sp, #24
    b104:	af00      	add	r7, sp, #0
    b106:	4603      	mov	r3, r0
    b108:	460a      	mov	r2, r1
    b10a:	71fb      	strb	r3, [r7, #7]
    b10c:	4613      	mov	r3, r2
    b10e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b110:	79fb      	ldrb	r3, [r7, #7]
    b112:	f003 030f 	and.w	r3, r3, #15
    b116:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b118:	79fb      	ldrb	r3, [r7, #7]
    b11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b11e:	2b00      	cmp	r3, #0
    b120:	bf14      	ite	ne
    b122:	2301      	movne	r3, #1
    b124:	2300      	moveq	r3, #0
    b126:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b128:	7cba      	ldrb	r2, [r7, #18]
    b12a:	7cfb      	ldrb	r3, [r7, #19]
    b12c:	4611      	mov	r1, r2
    b12e:	4618      	mov	r0, r3
    b130:	4b13      	ldr	r3, [pc, #76]	; (b180 <_usb_d_dev_ep_stall+0x80>)
    b132:	4798      	blx	r3
    b134:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b136:	7cfb      	ldrb	r3, [r7, #19]
    b138:	2b04      	cmp	r3, #4
    b13a:	d902      	bls.n	b142 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b13c:	f06f 0311 	mvn.w	r3, #17
    b140:	e01a      	b.n	b178 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b142:	79bb      	ldrb	r3, [r7, #6]
    b144:	2b01      	cmp	r3, #1
    b146:	d106      	bne.n	b156 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b148:	7cbb      	ldrb	r3, [r7, #18]
    b14a:	4619      	mov	r1, r3
    b14c:	68f8      	ldr	r0, [r7, #12]
    b14e:	4b0d      	ldr	r3, [pc, #52]	; (b184 <_usb_d_dev_ep_stall+0x84>)
    b150:	4798      	blx	r3
    b152:	6178      	str	r0, [r7, #20]
    b154:	e00f      	b.n	b176 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b156:	79bb      	ldrb	r3, [r7, #6]
    b158:	2b00      	cmp	r3, #0
    b15a:	d106      	bne.n	b16a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b15c:	7cbb      	ldrb	r3, [r7, #18]
    b15e:	4619      	mov	r1, r3
    b160:	68f8      	ldr	r0, [r7, #12]
    b162:	4b09      	ldr	r3, [pc, #36]	; (b188 <_usb_d_dev_ep_stall+0x88>)
    b164:	4798      	blx	r3
    b166:	6178      	str	r0, [r7, #20]
    b168:	e005      	b.n	b176 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b16a:	7cbb      	ldrb	r3, [r7, #18]
    b16c:	4619      	mov	r1, r3
    b16e:	68f8      	ldr	r0, [r7, #12]
    b170:	4b06      	ldr	r3, [pc, #24]	; (b18c <_usb_d_dev_ep_stall+0x8c>)
    b172:	4798      	blx	r3
    b174:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b176:	697b      	ldr	r3, [r7, #20]
}
    b178:	4618      	mov	r0, r3
    b17a:	3718      	adds	r7, #24
    b17c:	46bd      	mov	sp, r7
    b17e:	bd80      	pop	{r7, pc}
    b180:	00009ba1 	.word	0x00009ba1
    b184:	0000afd5 	.word	0x0000afd5
    b188:	0000b025 	.word	0x0000b025
    b18c:	0000afa5 	.word	0x0000afa5

0000b190 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b190:	b580      	push	{r7, lr}
    b192:	b082      	sub	sp, #8
    b194:	af00      	add	r7, sp, #0
    b196:	6078      	str	r0, [r7, #4]
    b198:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b19a:	687b      	ldr	r3, [r7, #4]
    b19c:	7c9b      	ldrb	r3, [r3, #18]
    b19e:	2bff      	cmp	r3, #255	; 0xff
    b1a0:	d014      	beq.n	b1cc <_usb_d_dev_trans_done+0x3c>
    b1a2:	687b      	ldr	r3, [r7, #4]
    b1a4:	7cdb      	ldrb	r3, [r3, #19]
    b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b1aa:	b2db      	uxtb	r3, r3
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d00d      	beq.n	b1cc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b1b0:	687a      	ldr	r2, [r7, #4]
    b1b2:	7cd3      	ldrb	r3, [r2, #19]
    b1b4:	f36f 1386 	bfc	r3, #6, #1
    b1b8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b1ba:	4b06      	ldr	r3, [pc, #24]	; (b1d4 <_usb_d_dev_trans_done+0x44>)
    b1bc:	691b      	ldr	r3, [r3, #16]
    b1be:	687a      	ldr	r2, [r7, #4]
    b1c0:	7c90      	ldrb	r0, [r2, #18]
    b1c2:	687a      	ldr	r2, [r7, #4]
    b1c4:	6892      	ldr	r2, [r2, #8]
    b1c6:	6839      	ldr	r1, [r7, #0]
    b1c8:	4798      	blx	r3
    b1ca:	e000      	b.n	b1ce <_usb_d_dev_trans_done+0x3e>
		return;
    b1cc:	bf00      	nop
}
    b1ce:	3708      	adds	r7, #8
    b1d0:	46bd      	mov	sp, r7
    b1d2:	bd80      	pop	{r7, pc}
    b1d4:	20000ce4 	.word	0x20000ce4

0000b1d8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b1d8:	b580      	push	{r7, lr}
    b1da:	b086      	sub	sp, #24
    b1dc:	af00      	add	r7, sp, #0
    b1de:	60f8      	str	r0, [r7, #12]
    b1e0:	460b      	mov	r3, r1
    b1e2:	607a      	str	r2, [r7, #4]
    b1e4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b1e6:	68fb      	ldr	r3, [r7, #12]
    b1e8:	7c9b      	ldrb	r3, [r3, #18]
    b1ea:	f003 030f 	and.w	r3, r3, #15
    b1ee:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b1f0:	4b1f      	ldr	r3, [pc, #124]	; (b270 <_usb_d_dev_trans_stop+0x98>)
    b1f2:	881b      	ldrh	r3, [r3, #0]
    b1f4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b1f6:	68fb      	ldr	r3, [r7, #12]
    b1f8:	7c9b      	ldrb	r3, [r3, #18]
    b1fa:	2bff      	cmp	r3, #255	; 0xff
    b1fc:	d033      	beq.n	b266 <_usb_d_dev_trans_stop+0x8e>
    b1fe:	68fb      	ldr	r3, [r7, #12]
    b200:	7cdb      	ldrb	r3, [r3, #19]
    b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b206:	b2db      	uxtb	r3, r3
    b208:	2b00      	cmp	r3, #0
    b20a:	d02c      	beq.n	b266 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b20c:	7afb      	ldrb	r3, [r7, #11]
    b20e:	2b00      	cmp	r3, #0
    b210:	d006      	beq.n	b220 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b212:	7dfb      	ldrb	r3, [r7, #23]
    b214:	2200      	movs	r2, #0
    b216:	2101      	movs	r1, #1
    b218:	4618      	mov	r0, r3
    b21a:	4b16      	ldr	r3, [pc, #88]	; (b274 <_usb_d_dev_trans_stop+0x9c>)
    b21c:	4798      	blx	r3
    b21e:	e005      	b.n	b22c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b220:	7dfb      	ldrb	r3, [r7, #23]
    b222:	2200      	movs	r2, #0
    b224:	2100      	movs	r1, #0
    b226:	4618      	mov	r0, r3
    b228:	4b13      	ldr	r3, [pc, #76]	; (b278 <_usb_d_dev_trans_stop+0xa0>)
    b22a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b22c:	7afb      	ldrb	r3, [r7, #11]
    b22e:	f107 0218 	add.w	r2, r7, #24
    b232:	4413      	add	r3, r2
    b234:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b238:	461a      	mov	r2, r3
    b23a:	7dfb      	ldrb	r3, [r7, #23]
    b23c:	4611      	mov	r1, r2
    b23e:	4618      	mov	r0, r3
    b240:	4b0e      	ldr	r3, [pc, #56]	; (b27c <_usb_d_dev_trans_stop+0xa4>)
    b242:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b244:	7afb      	ldrb	r3, [r7, #11]
    b246:	f107 0218 	add.w	r2, r7, #24
    b24a:	4413      	add	r3, r2
    b24c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b250:	461a      	mov	r2, r3
    b252:	7dfb      	ldrb	r3, [r7, #23]
    b254:	4611      	mov	r1, r2
    b256:	4618      	mov	r0, r3
    b258:	4b09      	ldr	r3, [pc, #36]	; (b280 <_usb_d_dev_trans_stop+0xa8>)
    b25a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b25c:	6879      	ldr	r1, [r7, #4]
    b25e:	68f8      	ldr	r0, [r7, #12]
    b260:	4b08      	ldr	r3, [pc, #32]	; (b284 <_usb_d_dev_trans_stop+0xac>)
    b262:	4798      	blx	r3
    b264:	e000      	b.n	b268 <_usb_d_dev_trans_stop+0x90>
		return;
    b266:	bf00      	nop
}
    b268:	3718      	adds	r7, #24
    b26a:	46bd      	mov	sp, r7
    b26c:	bd80      	pop	{r7, pc}
    b26e:	bf00      	nop
    b270:	000102ac 	.word	0x000102ac
    b274:	00009a8d 	.word	0x00009a8d
    b278:	00009ae5 	.word	0x00009ae5
    b27c:	00009595 	.word	0x00009595
    b280:	000095e5 	.word	0x000095e5
    b284:	0000b191 	.word	0x0000b191

0000b288 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b288:	b580      	push	{r7, lr}
    b28a:	b086      	sub	sp, #24
    b28c:	af00      	add	r7, sp, #0
    b28e:	4603      	mov	r3, r0
    b290:	6039      	str	r1, [r7, #0]
    b292:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b294:	79fb      	ldrb	r3, [r7, #7]
    b296:	f003 030f 	and.w	r3, r3, #15
    b29a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b29c:	7dfb      	ldrb	r3, [r7, #23]
    b29e:	015b      	lsls	r3, r3, #5
    b2a0:	4a1e      	ldr	r2, [pc, #120]	; (b31c <_usb_d_dev_ep_read_req+0x94>)
    b2a2:	4413      	add	r3, r2
    b2a4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b2a6:	693b      	ldr	r3, [r7, #16]
    b2a8:	681b      	ldr	r3, [r3, #0]
    b2aa:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b2ac:	693b      	ldr	r3, [r7, #16]
    b2ae:	685b      	ldr	r3, [r3, #4]
    b2b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b2b4:	b29b      	uxth	r3, r3
    b2b6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b2b8:	7dfb      	ldrb	r3, [r7, #23]
    b2ba:	2b04      	cmp	r3, #4
    b2bc:	d802      	bhi.n	b2c4 <_usb_d_dev_ep_read_req+0x3c>
    b2be:	683b      	ldr	r3, [r7, #0]
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d102      	bne.n	b2ca <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b2c4:	f06f 0311 	mvn.w	r3, #17
    b2c8:	e023      	b.n	b312 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b2ca:	7dfb      	ldrb	r3, [r7, #23]
    b2cc:	4618      	mov	r0, r3
    b2ce:	4b14      	ldr	r3, [pc, #80]	; (b320 <_usb_d_dev_ep_read_req+0x98>)
    b2d0:	4798      	blx	r3
    b2d2:	4603      	mov	r3, r0
    b2d4:	f083 0301 	eor.w	r3, r3, #1
    b2d8:	b2db      	uxtb	r3, r3
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d002      	beq.n	b2e4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b2de:	f06f 0312 	mvn.w	r3, #18
    b2e2:	e016      	b.n	b312 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b2e4:	7dfb      	ldrb	r3, [r7, #23]
    b2e6:	4618      	mov	r0, r3
    b2e8:	4b0e      	ldr	r3, [pc, #56]	; (b324 <_usb_d_dev_ep_read_req+0x9c>)
    b2ea:	4798      	blx	r3
    b2ec:	4603      	mov	r3, r0
    b2ee:	f083 0301 	eor.w	r3, r3, #1
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d001      	beq.n	b2fc <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b2f8:	2300      	movs	r3, #0
    b2fa:	e00a      	b.n	b312 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b2fc:	68fb      	ldr	r3, [r7, #12]
    b2fe:	2208      	movs	r2, #8
    b300:	4619      	mov	r1, r3
    b302:	6838      	ldr	r0, [r7, #0]
    b304:	4b08      	ldr	r3, [pc, #32]	; (b328 <_usb_d_dev_ep_read_req+0xa0>)
    b306:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b308:	7dfb      	ldrb	r3, [r7, #23]
    b30a:	4618      	mov	r0, r3
    b30c:	4b07      	ldr	r3, [pc, #28]	; (b32c <_usb_d_dev_ep_read_req+0xa4>)
    b30e:	4798      	blx	r3

	return bytes;
    b310:	897b      	ldrh	r3, [r7, #10]
}
    b312:	4618      	mov	r0, r3
    b314:	3718      	adds	r7, #24
    b316:	46bd      	mov	sp, r7
    b318:	bd80      	pop	{r7, pc}
    b31a:	bf00      	nop
    b31c:	20000dac 	.word	0x20000dac
    b320:	0000960d 	.word	0x0000960d
    b324:	000097b9 	.word	0x000097b9
    b328:	0000fa75 	.word	0x0000fa75
    b32c:	000097e9 	.word	0x000097e9

0000b330 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b330:	b580      	push	{r7, lr}
    b332:	b086      	sub	sp, #24
    b334:	af00      	add	r7, sp, #0
    b336:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	7a1b      	ldrb	r3, [r3, #8]
    b33c:	f003 030f 	and.w	r3, r3, #15
    b340:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b342:	687b      	ldr	r3, [r7, #4]
    b344:	7a1b      	ldrb	r3, [r3, #8]
    b346:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b34a:	2b00      	cmp	r3, #0
    b34c:	bf14      	ite	ne
    b34e:	2301      	movne	r3, #1
    b350:	2300      	moveq	r3, #0
    b352:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b354:	7d7a      	ldrb	r2, [r7, #21]
    b356:	7dbb      	ldrb	r3, [r7, #22]
    b358:	4611      	mov	r1, r2
    b35a:	4618      	mov	r0, r3
    b35c:	4b5f      	ldr	r3, [pc, #380]	; (b4dc <_usb_d_dev_ep_trans+0x1ac>)
    b35e:	4798      	blx	r3
    b360:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b362:	693b      	ldr	r3, [r7, #16]
    b364:	8a1b      	ldrh	r3, [r3, #16]
    b366:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b36a:	4293      	cmp	r3, r2
    b36c:	d004      	beq.n	b378 <_usb_d_dev_ep_trans+0x48>
    b36e:	693b      	ldr	r3, [r7, #16]
    b370:	8a1b      	ldrh	r3, [r3, #16]
    b372:	3b01      	subs	r3, #1
    b374:	b29b      	uxth	r3, r3
    b376:	e001      	b.n	b37c <_usb_d_dev_ep_trans+0x4c>
    b378:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b37c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	685a      	ldr	r2, [r3, #4]
    b382:	89fb      	ldrh	r3, [r7, #14]
    b384:	4013      	ands	r3, r2
    b386:	2b00      	cmp	r3, #0
    b388:	bf14      	ite	ne
    b38a:	2301      	movne	r3, #1
    b38c:	2300      	moveq	r3, #0
    b38e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b390:	2300      	movs	r3, #0
    b392:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b394:	7dbb      	ldrb	r3, [r7, #22]
    b396:	2b04      	cmp	r3, #4
    b398:	d902      	bls.n	b3a0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b39a:	f06f 0311 	mvn.w	r3, #17
    b39e:	e098      	b.n	b4d2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b3a0:	687b      	ldr	r3, [r7, #4]
    b3a2:	681b      	ldr	r3, [r3, #0]
    b3a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b3a8:	d31a      	bcc.n	b3e0 <_usb_d_dev_ep_trans+0xb0>
    b3aa:	687b      	ldr	r3, [r7, #4]
    b3ac:	681b      	ldr	r3, [r3, #0]
    b3ae:	461a      	mov	r2, r3
    b3b0:	687b      	ldr	r3, [r7, #4]
    b3b2:	685b      	ldr	r3, [r3, #4]
    b3b4:	4413      	add	r3, r2
    b3b6:	4a4a      	ldr	r2, [pc, #296]	; (b4e0 <_usb_d_dev_ep_trans+0x1b0>)
    b3b8:	4293      	cmp	r3, r2
    b3ba:	d811      	bhi.n	b3e0 <_usb_d_dev_ep_trans+0xb0>
    b3bc:	687b      	ldr	r3, [r7, #4]
    b3be:	681b      	ldr	r3, [r3, #0]
    b3c0:	f003 0303 	and.w	r3, r3, #3
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d10b      	bne.n	b3e0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b3c8:	7d7b      	ldrb	r3, [r7, #21]
    b3ca:	f083 0301 	eor.w	r3, r3, #1
    b3ce:	b2db      	uxtb	r3, r3
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d00e      	beq.n	b3f2 <_usb_d_dev_ep_trans+0xc2>
    b3d4:	687b      	ldr	r3, [r7, #4]
    b3d6:	685b      	ldr	r3, [r3, #4]
    b3d8:	693a      	ldr	r2, [r7, #16]
    b3da:	8a12      	ldrh	r2, [r2, #16]
    b3dc:	4293      	cmp	r3, r2
    b3de:	d208      	bcs.n	b3f2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b3e0:	693b      	ldr	r3, [r7, #16]
    b3e2:	68db      	ldr	r3, [r3, #12]
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	d102      	bne.n	b3ee <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b3e8:	f06f 0312 	mvn.w	r3, #18
    b3ec:	e071      	b.n	b4d2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b3ee:	2301      	movs	r3, #1
    b3f0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b3f2:	7d7b      	ldrb	r3, [r7, #21]
    b3f4:	f083 0301 	eor.w	r3, r3, #1
    b3f8:	b2db      	uxtb	r3, r3
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	d009      	beq.n	b412 <_usb_d_dev_ep_trans+0xe2>
    b3fe:	7b7b      	ldrb	r3, [r7, #13]
    b400:	2b00      	cmp	r3, #0
    b402:	d006      	beq.n	b412 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b404:	693b      	ldr	r3, [r7, #16]
    b406:	68db      	ldr	r3, [r3, #12]
    b408:	2b00      	cmp	r3, #0
    b40a:	d102      	bne.n	b412 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b40c:	f06f 0311 	mvn.w	r3, #17
    b410:	e05f      	b.n	b4d2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b412:	693b      	ldr	r3, [r7, #16]
    b414:	7cdb      	ldrb	r3, [r3, #19]
    b416:	f003 0308 	and.w	r3, r3, #8
    b41a:	b2db      	uxtb	r3, r3
    b41c:	2b00      	cmp	r3, #0
    b41e:	d001      	beq.n	b424 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b420:	2302      	movs	r3, #2
    b422:	e056      	b.n	b4d2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b424:	f107 0308 	add.w	r3, r7, #8
    b428:	4618      	mov	r0, r3
    b42a:	4b2e      	ldr	r3, [pc, #184]	; (b4e4 <_usb_d_dev_ep_trans+0x1b4>)
    b42c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b42e:	693b      	ldr	r3, [r7, #16]
    b430:	7cdb      	ldrb	r3, [r3, #19]
    b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b436:	b2db      	uxtb	r3, r3
    b438:	2b00      	cmp	r3, #0
    b43a:	d006      	beq.n	b44a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b43c:	f107 0308 	add.w	r3, r7, #8
    b440:	4618      	mov	r0, r3
    b442:	4b29      	ldr	r3, [pc, #164]	; (b4e8 <_usb_d_dev_ep_trans+0x1b8>)
    b444:	4798      	blx	r3
		return USB_BUSY;
    b446:	2301      	movs	r3, #1
    b448:	e043      	b.n	b4d2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b44a:	693a      	ldr	r2, [r7, #16]
    b44c:	7cd3      	ldrb	r3, [r2, #19]
    b44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b452:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b454:	f107 0308 	add.w	r3, r7, #8
    b458:	4618      	mov	r0, r3
    b45a:	4b23      	ldr	r3, [pc, #140]	; (b4e8 <_usb_d_dev_ep_trans+0x1b8>)
    b45c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b45e:	687b      	ldr	r3, [r7, #4]
    b460:	681a      	ldr	r2, [r3, #0]
    b462:	693b      	ldr	r3, [r7, #16]
    b464:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b466:	687b      	ldr	r3, [r7, #4]
    b468:	685a      	ldr	r2, [r3, #4]
    b46a:	693b      	ldr	r3, [r7, #16]
    b46c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b46e:	693b      	ldr	r3, [r7, #16]
    b470:	2200      	movs	r2, #0
    b472:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b474:	693a      	ldr	r2, [r7, #16]
    b476:	7cd3      	ldrb	r3, [r2, #19]
    b478:	7d79      	ldrb	r1, [r7, #21]
    b47a:	f361 13c7 	bfi	r3, r1, #7, #1
    b47e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b480:	693a      	ldr	r2, [r7, #16]
    b482:	7cd3      	ldrb	r3, [r2, #19]
    b484:	7df9      	ldrb	r1, [r7, #23]
    b486:	f361 1345 	bfi	r3, r1, #5, #1
    b48a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	7a5b      	ldrb	r3, [r3, #9]
    b490:	2b00      	cmp	r3, #0
    b492:	d007      	beq.n	b4a4 <_usb_d_dev_ep_trans+0x174>
    b494:	7b7b      	ldrb	r3, [r7, #13]
    b496:	f083 0301 	eor.w	r3, r3, #1
    b49a:	b2db      	uxtb	r3, r3
    b49c:	2b00      	cmp	r3, #0
    b49e:	d001      	beq.n	b4a4 <_usb_d_dev_ep_trans+0x174>
    b4a0:	2301      	movs	r3, #1
    b4a2:	e000      	b.n	b4a6 <_usb_d_dev_ep_trans+0x176>
    b4a4:	2300      	movs	r3, #0
    b4a6:	b2db      	uxtb	r3, r3
    b4a8:	f003 0301 	and.w	r3, r3, #1
    b4ac:	b2d9      	uxtb	r1, r3
    b4ae:	693a      	ldr	r2, [r7, #16]
    b4b0:	7cd3      	ldrb	r3, [r2, #19]
    b4b2:	f361 1304 	bfi	r3, r1, #4, #1
    b4b6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b4b8:	7d7b      	ldrb	r3, [r7, #21]
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d004      	beq.n	b4c8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b4be:	2100      	movs	r1, #0
    b4c0:	6938      	ldr	r0, [r7, #16]
    b4c2:	4b0a      	ldr	r3, [pc, #40]	; (b4ec <_usb_d_dev_ep_trans+0x1bc>)
    b4c4:	4798      	blx	r3
    b4c6:	e003      	b.n	b4d0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b4c8:	2100      	movs	r1, #0
    b4ca:	6938      	ldr	r0, [r7, #16]
    b4cc:	4b08      	ldr	r3, [pc, #32]	; (b4f0 <_usb_d_dev_ep_trans+0x1c0>)
    b4ce:	4798      	blx	r3
	}

	return ERR_NONE;
    b4d0:	2300      	movs	r3, #0
}
    b4d2:	4618      	mov	r0, r3
    b4d4:	3718      	adds	r7, #24
    b4d6:	46bd      	mov	sp, r7
    b4d8:	bd80      	pop	{r7, pc}
    b4da:	bf00      	nop
    b4dc:	00009ba1 	.word	0x00009ba1
    b4e0:	20041fff 	.word	0x20041fff
    b4e4:	0000bcfd 	.word	0x0000bcfd
    b4e8:	0000bd23 	.word	0x0000bd23
    b4ec:	00009e69 	.word	0x00009e69
    b4f0:	0000a081 	.word	0x0000a081

0000b4f4 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	b084      	sub	sp, #16
    b4f8:	af00      	add	r7, sp, #0
    b4fa:	4603      	mov	r3, r0
    b4fc:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b4fe:	79fb      	ldrb	r3, [r7, #7]
    b500:	f003 030f 	and.w	r3, r3, #15
    b504:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b506:	79fb      	ldrb	r3, [r7, #7]
    b508:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b50c:	2b00      	cmp	r3, #0
    b50e:	bf14      	ite	ne
    b510:	2301      	movne	r3, #1
    b512:	2300      	moveq	r3, #0
    b514:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b516:	7bba      	ldrb	r2, [r7, #14]
    b518:	7bfb      	ldrb	r3, [r7, #15]
    b51a:	4611      	mov	r1, r2
    b51c:	4618      	mov	r0, r3
    b51e:	4b08      	ldr	r3, [pc, #32]	; (b540 <_usb_d_dev_ep_abort+0x4c>)
    b520:	4798      	blx	r3
    b522:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b524:	7bfb      	ldrb	r3, [r7, #15]
    b526:	2b04      	cmp	r3, #4
    b528:	d806      	bhi.n	b538 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b52a:	7bbb      	ldrb	r3, [r7, #14]
    b52c:	2202      	movs	r2, #2
    b52e:	4619      	mov	r1, r3
    b530:	68b8      	ldr	r0, [r7, #8]
    b532:	4b04      	ldr	r3, [pc, #16]	; (b544 <_usb_d_dev_ep_abort+0x50>)
    b534:	4798      	blx	r3
    b536:	e000      	b.n	b53a <_usb_d_dev_ep_abort+0x46>
		return;
    b538:	bf00      	nop
}
    b53a:	3710      	adds	r7, #16
    b53c:	46bd      	mov	sp, r7
    b53e:	bd80      	pop	{r7, pc}
    b540:	00009ba1 	.word	0x00009ba1
    b544:	0000b1d9 	.word	0x0000b1d9

0000b548 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b548:	b480      	push	{r7}
    b54a:	b085      	sub	sp, #20
    b54c:	af00      	add	r7, sp, #0
    b54e:	4603      	mov	r3, r0
    b550:	6039      	str	r1, [r7, #0]
    b552:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b554:	683b      	ldr	r3, [r7, #0]
    b556:	2b00      	cmp	r3, #0
    b558:	d001      	beq.n	b55e <_usb_d_dev_register_callback+0x16>
    b55a:	683b      	ldr	r3, [r7, #0]
    b55c:	e000      	b.n	b560 <_usb_d_dev_register_callback+0x18>
    b55e:	4b0a      	ldr	r3, [pc, #40]	; (b588 <_usb_d_dev_register_callback+0x40>)
    b560:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b562:	79fb      	ldrb	r3, [r7, #7]
    b564:	2b01      	cmp	r3, #1
    b566:	d103      	bne.n	b570 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b568:	4a08      	ldr	r2, [pc, #32]	; (b58c <_usb_d_dev_register_callback+0x44>)
    b56a:	68fb      	ldr	r3, [r7, #12]
    b56c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b56e:	e005      	b.n	b57c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b570:	79fb      	ldrb	r3, [r7, #7]
    b572:	2b00      	cmp	r3, #0
    b574:	d102      	bne.n	b57c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b576:	4a05      	ldr	r2, [pc, #20]	; (b58c <_usb_d_dev_register_callback+0x44>)
    b578:	68fb      	ldr	r3, [r7, #12]
    b57a:	6013      	str	r3, [r2, #0]
}
    b57c:	bf00      	nop
    b57e:	3714      	adds	r7, #20
    b580:	46bd      	mov	sp, r7
    b582:	f85d 7b04 	ldr.w	r7, [sp], #4
    b586:	4770      	bx	lr
    b588:	00009429 	.word	0x00009429
    b58c:	20000ce4 	.word	0x20000ce4

0000b590 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b590:	b480      	push	{r7}
    b592:	b085      	sub	sp, #20
    b594:	af00      	add	r7, sp, #0
    b596:	4603      	mov	r3, r0
    b598:	6039      	str	r1, [r7, #0]
    b59a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b59c:	683b      	ldr	r3, [r7, #0]
    b59e:	2b00      	cmp	r3, #0
    b5a0:	d001      	beq.n	b5a6 <_usb_d_dev_register_ep_callback+0x16>
    b5a2:	683b      	ldr	r3, [r7, #0]
    b5a4:	e000      	b.n	b5a8 <_usb_d_dev_register_ep_callback+0x18>
    b5a6:	4b0e      	ldr	r3, [pc, #56]	; (b5e0 <_usb_d_dev_register_ep_callback+0x50>)
    b5a8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b5aa:	79fb      	ldrb	r3, [r7, #7]
    b5ac:	2b00      	cmp	r3, #0
    b5ae:	d103      	bne.n	b5b8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b5b0:	4a0c      	ldr	r2, [pc, #48]	; (b5e4 <_usb_d_dev_register_ep_callback+0x54>)
    b5b2:	68fb      	ldr	r3, [r7, #12]
    b5b4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b5b6:	e00c      	b.n	b5d2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b5b8:	79fb      	ldrb	r3, [r7, #7]
    b5ba:	2b01      	cmp	r3, #1
    b5bc:	d103      	bne.n	b5c6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b5be:	4a09      	ldr	r2, [pc, #36]	; (b5e4 <_usb_d_dev_register_ep_callback+0x54>)
    b5c0:	68fb      	ldr	r3, [r7, #12]
    b5c2:	60d3      	str	r3, [r2, #12]
}
    b5c4:	e005      	b.n	b5d2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b5c6:	79fb      	ldrb	r3, [r7, #7]
    b5c8:	2b02      	cmp	r3, #2
    b5ca:	d102      	bne.n	b5d2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b5cc:	4a05      	ldr	r2, [pc, #20]	; (b5e4 <_usb_d_dev_register_ep_callback+0x54>)
    b5ce:	68fb      	ldr	r3, [r7, #12]
    b5d0:	6113      	str	r3, [r2, #16]
}
    b5d2:	bf00      	nop
    b5d4:	3714      	adds	r7, #20
    b5d6:	46bd      	mov	sp, r7
    b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5dc:	4770      	bx	lr
    b5de:	bf00      	nop
    b5e0:	00009429 	.word	0x00009429
    b5e4:	20000ce4 	.word	0x20000ce4

0000b5e8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5ec:	4b01      	ldr	r3, [pc, #4]	; (b5f4 <USB_0_Handler+0xc>)
    b5ee:	4798      	blx	r3
}
    b5f0:	bf00      	nop
    b5f2:	bd80      	pop	{r7, pc}
    b5f4:	0000a859 	.word	0x0000a859

0000b5f8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b5f8:	b580      	push	{r7, lr}
    b5fa:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b5fc:	4b01      	ldr	r3, [pc, #4]	; (b604 <USB_1_Handler+0xc>)
    b5fe:	4798      	blx	r3
}
    b600:	bf00      	nop
    b602:	bd80      	pop	{r7, pc}
    b604:	0000a859 	.word	0x0000a859

0000b608 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b608:	b580      	push	{r7, lr}
    b60a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b60c:	4b01      	ldr	r3, [pc, #4]	; (b614 <USB_2_Handler+0xc>)
    b60e:	4798      	blx	r3
}
    b610:	bf00      	nop
    b612:	bd80      	pop	{r7, pc}
    b614:	0000a859 	.word	0x0000a859

0000b618 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b618:	b580      	push	{r7, lr}
    b61a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b61c:	4b01      	ldr	r3, [pc, #4]	; (b624 <USB_3_Handler+0xc>)
    b61e:	4798      	blx	r3
}
    b620:	bf00      	nop
    b622:	bd80      	pop	{r7, pc}
    b624:	0000a859 	.word	0x0000a859

0000b628 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b628:	b480      	push	{r7}
    b62a:	b083      	sub	sp, #12
    b62c:	af00      	add	r7, sp, #0
    b62e:	6078      	str	r0, [r7, #4]
    b630:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b632:	bf00      	nop
    b634:	687b      	ldr	r3, [r7, #4]
    b636:	689a      	ldr	r2, [r3, #8]
    b638:	683b      	ldr	r3, [r7, #0]
    b63a:	4013      	ands	r3, r2
    b63c:	2b00      	cmp	r3, #0
    b63e:	d1f9      	bne.n	b634 <hri_wdt_wait_for_sync+0xc>
	};
}
    b640:	bf00      	nop
    b642:	370c      	adds	r7, #12
    b644:	46bd      	mov	sp, r7
    b646:	f85d 7b04 	ldr.w	r7, [sp], #4
    b64a:	4770      	bx	lr

0000b64c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b64c:	b580      	push	{r7, lr}
    b64e:	b084      	sub	sp, #16
    b650:	af00      	add	r7, sp, #0
    b652:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b654:	210e      	movs	r1, #14
    b656:	6878      	ldr	r0, [r7, #4]
    b658:	4b0a      	ldr	r3, [pc, #40]	; (b684 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b65a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	781b      	ldrb	r3, [r3, #0]
    b660:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b662:	7bfb      	ldrb	r3, [r7, #15]
    b664:	085b      	lsrs	r3, r3, #1
    b666:	b2db      	uxtb	r3, r3
    b668:	f003 0301 	and.w	r3, r3, #1
    b66c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b66e:	7bfb      	ldrb	r3, [r7, #15]
    b670:	2b00      	cmp	r3, #0
    b672:	bf14      	ite	ne
    b674:	2301      	movne	r3, #1
    b676:	2300      	moveq	r3, #0
    b678:	b2db      	uxtb	r3, r3
}
    b67a:	4618      	mov	r0, r3
    b67c:	3710      	adds	r7, #16
    b67e:	46bd      	mov	sp, r7
    b680:	bd80      	pop	{r7, pc}
    b682:	bf00      	nop
    b684:	0000b629 	.word	0x0000b629

0000b688 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b688:	b580      	push	{r7, lr}
    b68a:	b082      	sub	sp, #8
    b68c:	af00      	add	r7, sp, #0
    b68e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	b2db      	uxtb	r3, r3
    b696:	f023 0304 	bic.w	r3, r3, #4
    b69a:	b2da      	uxtb	r2, r3
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b6a0:	210e      	movs	r1, #14
    b6a2:	6878      	ldr	r0, [r7, #4]
    b6a4:	4b02      	ldr	r3, [pc, #8]	; (b6b0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b6a6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b6a8:	bf00      	nop
    b6aa:	3708      	adds	r7, #8
    b6ac:	46bd      	mov	sp, r7
    b6ae:	bd80      	pop	{r7, pc}
    b6b0:	0000b629 	.word	0x0000b629

0000b6b4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b6b4:	b580      	push	{r7, lr}
    b6b6:	b084      	sub	sp, #16
    b6b8:	af00      	add	r7, sp, #0
    b6ba:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b6bc:	210e      	movs	r1, #14
    b6be:	6878      	ldr	r0, [r7, #4]
    b6c0:	4b08      	ldr	r3, [pc, #32]	; (b6e4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b6c2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	781b      	ldrb	r3, [r3, #0]
    b6c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b6ca:	7bfb      	ldrb	r3, [r7, #15]
    b6cc:	09db      	lsrs	r3, r3, #7
    b6ce:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b6d0:	7bfb      	ldrb	r3, [r7, #15]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	bf14      	ite	ne
    b6d6:	2301      	movne	r3, #1
    b6d8:	2300      	moveq	r3, #0
    b6da:	b2db      	uxtb	r3, r3
}
    b6dc:	4618      	mov	r0, r3
    b6de:	3710      	adds	r7, #16
    b6e0:	46bd      	mov	sp, r7
    b6e2:	bd80      	pop	{r7, pc}
    b6e4:	0000b629 	.word	0x0000b629

0000b6e8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b6e8:	b480      	push	{r7}
    b6ea:	b085      	sub	sp, #20
    b6ec:	af00      	add	r7, sp, #0
    b6ee:	6078      	str	r0, [r7, #4]
    b6f0:	460b      	mov	r3, r1
    b6f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	785b      	ldrb	r3, [r3, #1]
    b6f8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b6fa:	7bfb      	ldrb	r3, [r7, #15]
    b6fc:	f023 030f 	bic.w	r3, r3, #15
    b700:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b702:	78fb      	ldrb	r3, [r7, #3]
    b704:	f003 030f 	and.w	r3, r3, #15
    b708:	b2da      	uxtb	r2, r3
    b70a:	7bfb      	ldrb	r3, [r7, #15]
    b70c:	4313      	orrs	r3, r2
    b70e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b710:	687b      	ldr	r3, [r7, #4]
    b712:	7bfa      	ldrb	r2, [r7, #15]
    b714:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b716:	bf00      	nop
    b718:	3714      	adds	r7, #20
    b71a:	46bd      	mov	sp, r7
    b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b720:	4770      	bx	lr
	...

0000b724 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b724:	b580      	push	{r7, lr}
    b726:	b082      	sub	sp, #8
    b728:	af00      	add	r7, sp, #0
    b72a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b72c:	687b      	ldr	r3, [r7, #4]
    b72e:	2b00      	cmp	r3, #0
    b730:	d005      	beq.n	b73e <_wdt_init+0x1a>
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	681b      	ldr	r3, [r3, #0]
    b736:	2b00      	cmp	r3, #0
    b738:	d001      	beq.n	b73e <_wdt_init+0x1a>
    b73a:	2301      	movs	r3, #1
    b73c:	e000      	b.n	b740 <_wdt_init+0x1c>
    b73e:	2300      	movs	r3, #0
    b740:	f003 0301 	and.w	r3, r3, #1
    b744:	b2db      	uxtb	r3, r3
    b746:	2250      	movs	r2, #80	; 0x50
    b748:	4913      	ldr	r1, [pc, #76]	; (b798 <_wdt_init+0x74>)
    b74a:	4618      	mov	r0, r3
    b74c:	4b13      	ldr	r3, [pc, #76]	; (b79c <_wdt_init+0x78>)
    b74e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b750:	687b      	ldr	r3, [r7, #4]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	4618      	mov	r0, r3
    b756:	4b12      	ldr	r3, [pc, #72]	; (b7a0 <_wdt_init+0x7c>)
    b758:	4798      	blx	r3
    b75a:	4603      	mov	r3, r0
    b75c:	2b00      	cmp	r3, #0
    b75e:	d107      	bne.n	b770 <_wdt_init+0x4c>
    b760:	687b      	ldr	r3, [r7, #4]
    b762:	681b      	ldr	r3, [r3, #0]
    b764:	4618      	mov	r0, r3
    b766:	4b0f      	ldr	r3, [pc, #60]	; (b7a4 <_wdt_init+0x80>)
    b768:	4798      	blx	r3
    b76a:	4603      	mov	r3, r0
    b76c:	2b00      	cmp	r3, #0
    b76e:	d002      	beq.n	b776 <_wdt_init+0x52>
		return ERR_DENIED;
    b770:	f06f 0310 	mvn.w	r3, #16
    b774:	e00b      	b.n	b78e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b776:	687b      	ldr	r3, [r7, #4]
    b778:	681b      	ldr	r3, [r3, #0]
    b77a:	4618      	mov	r0, r3
    b77c:	4b0a      	ldr	r3, [pc, #40]	; (b7a8 <_wdt_init+0x84>)
    b77e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	681b      	ldr	r3, [r3, #0]
    b784:	210b      	movs	r1, #11
    b786:	4618      	mov	r0, r3
    b788:	4b08      	ldr	r3, [pc, #32]	; (b7ac <_wdt_init+0x88>)
    b78a:	4798      	blx	r3
	}

	return ERR_NONE;
    b78c:	2300      	movs	r3, #0
}
    b78e:	4618      	mov	r0, r3
    b790:	3708      	adds	r7, #8
    b792:	46bd      	mov	sp, r7
    b794:	bd80      	pop	{r7, pc}
    b796:	bf00      	nop
    b798:	000102b0 	.word	0x000102b0
    b79c:	00003ba1 	.word	0x00003ba1
    b7a0:	0000b6b5 	.word	0x0000b6b5
    b7a4:	0000b64d 	.word	0x0000b64d
    b7a8:	0000b689 	.word	0x0000b689
    b7ac:	0000b6e9 	.word	0x0000b6e9

0000b7b0 <hri_port_set_DIR_reg>:
{
    b7b0:	b480      	push	{r7}
    b7b2:	b085      	sub	sp, #20
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	60f8      	str	r0, [r7, #12]
    b7b8:	460b      	mov	r3, r1
    b7ba:	607a      	str	r2, [r7, #4]
    b7bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b7be:	7afb      	ldrb	r3, [r7, #11]
    b7c0:	68fa      	ldr	r2, [r7, #12]
    b7c2:	01db      	lsls	r3, r3, #7
    b7c4:	4413      	add	r3, r2
    b7c6:	3308      	adds	r3, #8
    b7c8:	687a      	ldr	r2, [r7, #4]
    b7ca:	601a      	str	r2, [r3, #0]
}
    b7cc:	bf00      	nop
    b7ce:	3714      	adds	r7, #20
    b7d0:	46bd      	mov	sp, r7
    b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7d6:	4770      	bx	lr

0000b7d8 <hri_port_clear_DIR_reg>:
{
    b7d8:	b480      	push	{r7}
    b7da:	b085      	sub	sp, #20
    b7dc:	af00      	add	r7, sp, #0
    b7de:	60f8      	str	r0, [r7, #12]
    b7e0:	460b      	mov	r3, r1
    b7e2:	607a      	str	r2, [r7, #4]
    b7e4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b7e6:	7afb      	ldrb	r3, [r7, #11]
    b7e8:	68fa      	ldr	r2, [r7, #12]
    b7ea:	01db      	lsls	r3, r3, #7
    b7ec:	4413      	add	r3, r2
    b7ee:	3304      	adds	r3, #4
    b7f0:	687a      	ldr	r2, [r7, #4]
    b7f2:	601a      	str	r2, [r3, #0]
}
    b7f4:	bf00      	nop
    b7f6:	3714      	adds	r7, #20
    b7f8:	46bd      	mov	sp, r7
    b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7fe:	4770      	bx	lr

0000b800 <hri_port_set_OUT_reg>:
{
    b800:	b480      	push	{r7}
    b802:	b085      	sub	sp, #20
    b804:	af00      	add	r7, sp, #0
    b806:	60f8      	str	r0, [r7, #12]
    b808:	460b      	mov	r3, r1
    b80a:	607a      	str	r2, [r7, #4]
    b80c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b80e:	7afb      	ldrb	r3, [r7, #11]
    b810:	68fa      	ldr	r2, [r7, #12]
    b812:	01db      	lsls	r3, r3, #7
    b814:	4413      	add	r3, r2
    b816:	3318      	adds	r3, #24
    b818:	687a      	ldr	r2, [r7, #4]
    b81a:	601a      	str	r2, [r3, #0]
}
    b81c:	bf00      	nop
    b81e:	3714      	adds	r7, #20
    b820:	46bd      	mov	sp, r7
    b822:	f85d 7b04 	ldr.w	r7, [sp], #4
    b826:	4770      	bx	lr

0000b828 <hri_port_clear_OUT_reg>:
{
    b828:	b480      	push	{r7}
    b82a:	b085      	sub	sp, #20
    b82c:	af00      	add	r7, sp, #0
    b82e:	60f8      	str	r0, [r7, #12]
    b830:	460b      	mov	r3, r1
    b832:	607a      	str	r2, [r7, #4]
    b834:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b836:	7afb      	ldrb	r3, [r7, #11]
    b838:	68fa      	ldr	r2, [r7, #12]
    b83a:	01db      	lsls	r3, r3, #7
    b83c:	4413      	add	r3, r2
    b83e:	3314      	adds	r3, #20
    b840:	687a      	ldr	r2, [r7, #4]
    b842:	601a      	str	r2, [r3, #0]
}
    b844:	bf00      	nop
    b846:	3714      	adds	r7, #20
    b848:	46bd      	mov	sp, r7
    b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b84e:	4770      	bx	lr

0000b850 <hri_port_write_PMUX_PMUXE_bf>:
{
    b850:	b480      	push	{r7}
    b852:	b085      	sub	sp, #20
    b854:	af00      	add	r7, sp, #0
    b856:	6078      	str	r0, [r7, #4]
    b858:	4608      	mov	r0, r1
    b85a:	4611      	mov	r1, r2
    b85c:	461a      	mov	r2, r3
    b85e:	4603      	mov	r3, r0
    b860:	70fb      	strb	r3, [r7, #3]
    b862:	460b      	mov	r3, r1
    b864:	70bb      	strb	r3, [r7, #2]
    b866:	4613      	mov	r3, r2
    b868:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b86a:	78fa      	ldrb	r2, [r7, #3]
    b86c:	78bb      	ldrb	r3, [r7, #2]
    b86e:	6879      	ldr	r1, [r7, #4]
    b870:	01d2      	lsls	r2, r2, #7
    b872:	440a      	add	r2, r1
    b874:	4413      	add	r3, r2
    b876:	3330      	adds	r3, #48	; 0x30
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b87c:	7bfb      	ldrb	r3, [r7, #15]
    b87e:	f023 030f 	bic.w	r3, r3, #15
    b882:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b884:	787b      	ldrb	r3, [r7, #1]
    b886:	f003 030f 	and.w	r3, r3, #15
    b88a:	b2da      	uxtb	r2, r3
    b88c:	7bfb      	ldrb	r3, [r7, #15]
    b88e:	4313      	orrs	r3, r2
    b890:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b892:	78fa      	ldrb	r2, [r7, #3]
    b894:	78bb      	ldrb	r3, [r7, #2]
    b896:	6879      	ldr	r1, [r7, #4]
    b898:	01d2      	lsls	r2, r2, #7
    b89a:	440a      	add	r2, r1
    b89c:	4413      	add	r3, r2
    b89e:	3330      	adds	r3, #48	; 0x30
    b8a0:	7bfa      	ldrb	r2, [r7, #15]
    b8a2:	701a      	strb	r2, [r3, #0]
}
    b8a4:	bf00      	nop
    b8a6:	3714      	adds	r7, #20
    b8a8:	46bd      	mov	sp, r7
    b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ae:	4770      	bx	lr

0000b8b0 <hri_port_write_PMUX_PMUXO_bf>:
{
    b8b0:	b480      	push	{r7}
    b8b2:	b085      	sub	sp, #20
    b8b4:	af00      	add	r7, sp, #0
    b8b6:	6078      	str	r0, [r7, #4]
    b8b8:	4608      	mov	r0, r1
    b8ba:	4611      	mov	r1, r2
    b8bc:	461a      	mov	r2, r3
    b8be:	4603      	mov	r3, r0
    b8c0:	70fb      	strb	r3, [r7, #3]
    b8c2:	460b      	mov	r3, r1
    b8c4:	70bb      	strb	r3, [r7, #2]
    b8c6:	4613      	mov	r3, r2
    b8c8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b8ca:	78fa      	ldrb	r2, [r7, #3]
    b8cc:	78bb      	ldrb	r3, [r7, #2]
    b8ce:	6879      	ldr	r1, [r7, #4]
    b8d0:	01d2      	lsls	r2, r2, #7
    b8d2:	440a      	add	r2, r1
    b8d4:	4413      	add	r3, r2
    b8d6:	3330      	adds	r3, #48	; 0x30
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b8dc:	7bfb      	ldrb	r3, [r7, #15]
    b8de:	f003 030f 	and.w	r3, r3, #15
    b8e2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b8e4:	787b      	ldrb	r3, [r7, #1]
    b8e6:	011b      	lsls	r3, r3, #4
    b8e8:	b2da      	uxtb	r2, r3
    b8ea:	7bfb      	ldrb	r3, [r7, #15]
    b8ec:	4313      	orrs	r3, r2
    b8ee:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b8f0:	78fa      	ldrb	r2, [r7, #3]
    b8f2:	78bb      	ldrb	r3, [r7, #2]
    b8f4:	6879      	ldr	r1, [r7, #4]
    b8f6:	01d2      	lsls	r2, r2, #7
    b8f8:	440a      	add	r2, r1
    b8fa:	4413      	add	r3, r2
    b8fc:	3330      	adds	r3, #48	; 0x30
    b8fe:	7bfa      	ldrb	r2, [r7, #15]
    b900:	701a      	strb	r2, [r3, #0]
}
    b902:	bf00      	nop
    b904:	3714      	adds	r7, #20
    b906:	46bd      	mov	sp, r7
    b908:	f85d 7b04 	ldr.w	r7, [sp], #4
    b90c:	4770      	bx	lr

0000b90e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b90e:	b480      	push	{r7}
    b910:	b085      	sub	sp, #20
    b912:	af00      	add	r7, sp, #0
    b914:	6078      	str	r0, [r7, #4]
    b916:	4608      	mov	r0, r1
    b918:	4611      	mov	r1, r2
    b91a:	461a      	mov	r2, r3
    b91c:	4603      	mov	r3, r0
    b91e:	70fb      	strb	r3, [r7, #3]
    b920:	460b      	mov	r3, r1
    b922:	70bb      	strb	r3, [r7, #2]
    b924:	4613      	mov	r3, r2
    b926:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b928:	78fa      	ldrb	r2, [r7, #3]
    b92a:	78bb      	ldrb	r3, [r7, #2]
    b92c:	6879      	ldr	r1, [r7, #4]
    b92e:	01d2      	lsls	r2, r2, #7
    b930:	440a      	add	r2, r1
    b932:	4413      	add	r3, r2
    b934:	3340      	adds	r3, #64	; 0x40
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b93a:	7bfb      	ldrb	r3, [r7, #15]
    b93c:	f023 0301 	bic.w	r3, r3, #1
    b940:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b942:	787a      	ldrb	r2, [r7, #1]
    b944:	7bfb      	ldrb	r3, [r7, #15]
    b946:	4313      	orrs	r3, r2
    b948:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b94a:	78fa      	ldrb	r2, [r7, #3]
    b94c:	78bb      	ldrb	r3, [r7, #2]
    b94e:	6879      	ldr	r1, [r7, #4]
    b950:	01d2      	lsls	r2, r2, #7
    b952:	440a      	add	r2, r1
    b954:	4413      	add	r3, r2
    b956:	3340      	adds	r3, #64	; 0x40
    b958:	7bfa      	ldrb	r2, [r7, #15]
    b95a:	701a      	strb	r2, [r3, #0]
}
    b95c:	bf00      	nop
    b95e:	3714      	adds	r7, #20
    b960:	46bd      	mov	sp, r7
    b962:	f85d 7b04 	ldr.w	r7, [sp], #4
    b966:	4770      	bx	lr

0000b968 <hri_port_write_WRCONFIG_reg>:
{
    b968:	b480      	push	{r7}
    b96a:	b085      	sub	sp, #20
    b96c:	af00      	add	r7, sp, #0
    b96e:	60f8      	str	r0, [r7, #12]
    b970:	460b      	mov	r3, r1
    b972:	607a      	str	r2, [r7, #4]
    b974:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b976:	7afb      	ldrb	r3, [r7, #11]
    b978:	68fa      	ldr	r2, [r7, #12]
    b97a:	01db      	lsls	r3, r3, #7
    b97c:	4413      	add	r3, r2
    b97e:	3328      	adds	r3, #40	; 0x28
    b980:	687a      	ldr	r2, [r7, #4]
    b982:	601a      	str	r2, [r3, #0]
}
    b984:	bf00      	nop
    b986:	3714      	adds	r7, #20
    b988:	46bd      	mov	sp, r7
    b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b98e:	4770      	bx	lr

0000b990 <_gpio_set_direction>:
{
    b990:	b580      	push	{r7, lr}
    b992:	b082      	sub	sp, #8
    b994:	af00      	add	r7, sp, #0
    b996:	4603      	mov	r3, r0
    b998:	6039      	str	r1, [r7, #0]
    b99a:	71fb      	strb	r3, [r7, #7]
    b99c:	4613      	mov	r3, r2
    b99e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b9a0:	79bb      	ldrb	r3, [r7, #6]
    b9a2:	2b01      	cmp	r3, #1
    b9a4:	d01c      	beq.n	b9e0 <_gpio_set_direction+0x50>
    b9a6:	2b02      	cmp	r3, #2
    b9a8:	d037      	beq.n	ba1a <_gpio_set_direction+0x8a>
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d14e      	bne.n	ba4c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b9ae:	79fb      	ldrb	r3, [r7, #7]
    b9b0:	683a      	ldr	r2, [r7, #0]
    b9b2:	4619      	mov	r1, r3
    b9b4:	482a      	ldr	r0, [pc, #168]	; (ba60 <_gpio_set_direction+0xd0>)
    b9b6:	4b2b      	ldr	r3, [pc, #172]	; (ba64 <_gpio_set_direction+0xd4>)
    b9b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b9ba:	683b      	ldr	r3, [r7, #0]
    b9bc:	b29b      	uxth	r3, r3
    b9be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b9c2:	79fb      	ldrb	r3, [r7, #7]
    b9c4:	4619      	mov	r1, r3
    b9c6:	4826      	ldr	r0, [pc, #152]	; (ba60 <_gpio_set_direction+0xd0>)
    b9c8:	4b27      	ldr	r3, [pc, #156]	; (ba68 <_gpio_set_direction+0xd8>)
    b9ca:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b9cc:	683b      	ldr	r3, [r7, #0]
    b9ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b9d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b9d4:	79fb      	ldrb	r3, [r7, #7]
    b9d6:	4619      	mov	r1, r3
    b9d8:	4821      	ldr	r0, [pc, #132]	; (ba60 <_gpio_set_direction+0xd0>)
    b9da:	4b23      	ldr	r3, [pc, #140]	; (ba68 <_gpio_set_direction+0xd8>)
    b9dc:	4798      	blx	r3
		break;
    b9de:	e03a      	b.n	ba56 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b9e0:	79fb      	ldrb	r3, [r7, #7]
    b9e2:	683a      	ldr	r2, [r7, #0]
    b9e4:	4619      	mov	r1, r3
    b9e6:	481e      	ldr	r0, [pc, #120]	; (ba60 <_gpio_set_direction+0xd0>)
    b9e8:	4b1e      	ldr	r3, [pc, #120]	; (ba64 <_gpio_set_direction+0xd4>)
    b9ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b9ec:	683b      	ldr	r3, [r7, #0]
    b9ee:	b29b      	uxth	r3, r3
    b9f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b9f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b9f8:	79f9      	ldrb	r1, [r7, #7]
    b9fa:	461a      	mov	r2, r3
    b9fc:	4818      	ldr	r0, [pc, #96]	; (ba60 <_gpio_set_direction+0xd0>)
    b9fe:	4b1a      	ldr	r3, [pc, #104]	; (ba68 <_gpio_set_direction+0xd8>)
    ba00:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ba02:	683b      	ldr	r3, [r7, #0]
    ba04:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ba06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ba0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba0e:	79f9      	ldrb	r1, [r7, #7]
    ba10:	461a      	mov	r2, r3
    ba12:	4813      	ldr	r0, [pc, #76]	; (ba60 <_gpio_set_direction+0xd0>)
    ba14:	4b14      	ldr	r3, [pc, #80]	; (ba68 <_gpio_set_direction+0xd8>)
    ba16:	4798      	blx	r3
		break;
    ba18:	e01d      	b.n	ba56 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ba1a:	79fb      	ldrb	r3, [r7, #7]
    ba1c:	683a      	ldr	r2, [r7, #0]
    ba1e:	4619      	mov	r1, r3
    ba20:	480f      	ldr	r0, [pc, #60]	; (ba60 <_gpio_set_direction+0xd0>)
    ba22:	4b12      	ldr	r3, [pc, #72]	; (ba6c <_gpio_set_direction+0xdc>)
    ba24:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ba26:	683b      	ldr	r3, [r7, #0]
    ba28:	b29b      	uxth	r3, r3
    ba2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ba2e:	79fb      	ldrb	r3, [r7, #7]
    ba30:	4619      	mov	r1, r3
    ba32:	480b      	ldr	r0, [pc, #44]	; (ba60 <_gpio_set_direction+0xd0>)
    ba34:	4b0c      	ldr	r3, [pc, #48]	; (ba68 <_gpio_set_direction+0xd8>)
    ba36:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ba38:	683b      	ldr	r3, [r7, #0]
    ba3a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ba3c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ba40:	79fb      	ldrb	r3, [r7, #7]
    ba42:	4619      	mov	r1, r3
    ba44:	4806      	ldr	r0, [pc, #24]	; (ba60 <_gpio_set_direction+0xd0>)
    ba46:	4b08      	ldr	r3, [pc, #32]	; (ba68 <_gpio_set_direction+0xd8>)
    ba48:	4798      	blx	r3
		break;
    ba4a:	e004      	b.n	ba56 <_gpio_set_direction+0xc6>
		ASSERT(false);
    ba4c:	2246      	movs	r2, #70	; 0x46
    ba4e:	4908      	ldr	r1, [pc, #32]	; (ba70 <_gpio_set_direction+0xe0>)
    ba50:	2000      	movs	r0, #0
    ba52:	4b08      	ldr	r3, [pc, #32]	; (ba74 <_gpio_set_direction+0xe4>)
    ba54:	4798      	blx	r3
}
    ba56:	bf00      	nop
    ba58:	3708      	adds	r7, #8
    ba5a:	46bd      	mov	sp, r7
    ba5c:	bd80      	pop	{r7, pc}
    ba5e:	bf00      	nop
    ba60:	41008000 	.word	0x41008000
    ba64:	0000b7d9 	.word	0x0000b7d9
    ba68:	0000b969 	.word	0x0000b969
    ba6c:	0000b7b1 	.word	0x0000b7b1
    ba70:	000102c8 	.word	0x000102c8
    ba74:	00003ba1 	.word	0x00003ba1

0000ba78 <_gpio_set_level>:
{
    ba78:	b580      	push	{r7, lr}
    ba7a:	b082      	sub	sp, #8
    ba7c:	af00      	add	r7, sp, #0
    ba7e:	4603      	mov	r3, r0
    ba80:	6039      	str	r1, [r7, #0]
    ba82:	71fb      	strb	r3, [r7, #7]
    ba84:	4613      	mov	r3, r2
    ba86:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ba88:	79bb      	ldrb	r3, [r7, #6]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d006      	beq.n	ba9c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ba8e:	79fb      	ldrb	r3, [r7, #7]
    ba90:	683a      	ldr	r2, [r7, #0]
    ba92:	4619      	mov	r1, r3
    ba94:	4806      	ldr	r0, [pc, #24]	; (bab0 <_gpio_set_level+0x38>)
    ba96:	4b07      	ldr	r3, [pc, #28]	; (bab4 <_gpio_set_level+0x3c>)
    ba98:	4798      	blx	r3
}
    ba9a:	e005      	b.n	baa8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ba9c:	79fb      	ldrb	r3, [r7, #7]
    ba9e:	683a      	ldr	r2, [r7, #0]
    baa0:	4619      	mov	r1, r3
    baa2:	4803      	ldr	r0, [pc, #12]	; (bab0 <_gpio_set_level+0x38>)
    baa4:	4b04      	ldr	r3, [pc, #16]	; (bab8 <_gpio_set_level+0x40>)
    baa6:	4798      	blx	r3
}
    baa8:	bf00      	nop
    baaa:	3708      	adds	r7, #8
    baac:	46bd      	mov	sp, r7
    baae:	bd80      	pop	{r7, pc}
    bab0:	41008000 	.word	0x41008000
    bab4:	0000b801 	.word	0x0000b801
    bab8:	0000b829 	.word	0x0000b829

0000babc <_gpio_set_pin_function>:
{
    babc:	b590      	push	{r4, r7, lr}
    babe:	b085      	sub	sp, #20
    bac0:	af00      	add	r7, sp, #0
    bac2:	6078      	str	r0, [r7, #4]
    bac4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    bac6:	687b      	ldr	r3, [r7, #4]
    bac8:	095b      	lsrs	r3, r3, #5
    baca:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    bacc:	687b      	ldr	r3, [r7, #4]
    bace:	b2db      	uxtb	r3, r3
    bad0:	f003 031f 	and.w	r3, r3, #31
    bad4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    bad6:	683b      	ldr	r3, [r7, #0]
    bad8:	f1b3 3fff 	cmp.w	r3, #4294967295
    badc:	d106      	bne.n	baec <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    bade:	7bba      	ldrb	r2, [r7, #14]
    bae0:	7bf9      	ldrb	r1, [r7, #15]
    bae2:	2300      	movs	r3, #0
    bae4:	4812      	ldr	r0, [pc, #72]	; (bb30 <_gpio_set_pin_function+0x74>)
    bae6:	4c13      	ldr	r4, [pc, #76]	; (bb34 <_gpio_set_pin_function+0x78>)
    bae8:	47a0      	blx	r4
}
    baea:	e01d      	b.n	bb28 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    baec:	7bba      	ldrb	r2, [r7, #14]
    baee:	7bf9      	ldrb	r1, [r7, #15]
    baf0:	2301      	movs	r3, #1
    baf2:	480f      	ldr	r0, [pc, #60]	; (bb30 <_gpio_set_pin_function+0x74>)
    baf4:	4c0f      	ldr	r4, [pc, #60]	; (bb34 <_gpio_set_pin_function+0x78>)
    baf6:	47a0      	blx	r4
		if (pin & 1) {
    baf8:	7bbb      	ldrb	r3, [r7, #14]
    bafa:	f003 0301 	and.w	r3, r3, #1
    bafe:	2b00      	cmp	r3, #0
    bb00:	d009      	beq.n	bb16 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    bb02:	7bbb      	ldrb	r3, [r7, #14]
    bb04:	085b      	lsrs	r3, r3, #1
    bb06:	b2da      	uxtb	r2, r3
    bb08:	683b      	ldr	r3, [r7, #0]
    bb0a:	b2db      	uxtb	r3, r3
    bb0c:	7bf9      	ldrb	r1, [r7, #15]
    bb0e:	4808      	ldr	r0, [pc, #32]	; (bb30 <_gpio_set_pin_function+0x74>)
    bb10:	4c09      	ldr	r4, [pc, #36]	; (bb38 <_gpio_set_pin_function+0x7c>)
    bb12:	47a0      	blx	r4
}
    bb14:	e008      	b.n	bb28 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    bb16:	7bbb      	ldrb	r3, [r7, #14]
    bb18:	085b      	lsrs	r3, r3, #1
    bb1a:	b2da      	uxtb	r2, r3
    bb1c:	683b      	ldr	r3, [r7, #0]
    bb1e:	b2db      	uxtb	r3, r3
    bb20:	7bf9      	ldrb	r1, [r7, #15]
    bb22:	4803      	ldr	r0, [pc, #12]	; (bb30 <_gpio_set_pin_function+0x74>)
    bb24:	4c05      	ldr	r4, [pc, #20]	; (bb3c <_gpio_set_pin_function+0x80>)
    bb26:	47a0      	blx	r4
}
    bb28:	bf00      	nop
    bb2a:	3714      	adds	r7, #20
    bb2c:	46bd      	mov	sp, r7
    bb2e:	bd90      	pop	{r4, r7, pc}
    bb30:	41008000 	.word	0x41008000
    bb34:	0000b90f 	.word	0x0000b90f
    bb38:	0000b8b1 	.word	0x0000b8b1
    bb3c:	0000b851 	.word	0x0000b851

0000bb40 <gpio_set_pin_function>:
{
    bb40:	b580      	push	{r7, lr}
    bb42:	b082      	sub	sp, #8
    bb44:	af00      	add	r7, sp, #0
    bb46:	6078      	str	r0, [r7, #4]
    bb48:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bb4a:	6839      	ldr	r1, [r7, #0]
    bb4c:	6878      	ldr	r0, [r7, #4]
    bb4e:	4b03      	ldr	r3, [pc, #12]	; (bb5c <gpio_set_pin_function+0x1c>)
    bb50:	4798      	blx	r3
}
    bb52:	bf00      	nop
    bb54:	3708      	adds	r7, #8
    bb56:	46bd      	mov	sp, r7
    bb58:	bd80      	pop	{r7, pc}
    bb5a:	bf00      	nop
    bb5c:	0000babd 	.word	0x0000babd

0000bb60 <gpio_set_pin_direction>:
{
    bb60:	b580      	push	{r7, lr}
    bb62:	b082      	sub	sp, #8
    bb64:	af00      	add	r7, sp, #0
    bb66:	4603      	mov	r3, r0
    bb68:	460a      	mov	r2, r1
    bb6a:	71fb      	strb	r3, [r7, #7]
    bb6c:	4613      	mov	r3, r2
    bb6e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    bb70:	79fb      	ldrb	r3, [r7, #7]
    bb72:	095b      	lsrs	r3, r3, #5
    bb74:	b2d8      	uxtb	r0, r3
    bb76:	79fb      	ldrb	r3, [r7, #7]
    bb78:	f003 031f 	and.w	r3, r3, #31
    bb7c:	2201      	movs	r2, #1
    bb7e:	fa02 f303 	lsl.w	r3, r2, r3
    bb82:	79ba      	ldrb	r2, [r7, #6]
    bb84:	4619      	mov	r1, r3
    bb86:	4b03      	ldr	r3, [pc, #12]	; (bb94 <gpio_set_pin_direction+0x34>)
    bb88:	4798      	blx	r3
}
    bb8a:	bf00      	nop
    bb8c:	3708      	adds	r7, #8
    bb8e:	46bd      	mov	sp, r7
    bb90:	bd80      	pop	{r7, pc}
    bb92:	bf00      	nop
    bb94:	0000b991 	.word	0x0000b991

0000bb98 <gpio_set_pin_level>:
{
    bb98:	b580      	push	{r7, lr}
    bb9a:	b082      	sub	sp, #8
    bb9c:	af00      	add	r7, sp, #0
    bb9e:	4603      	mov	r3, r0
    bba0:	460a      	mov	r2, r1
    bba2:	71fb      	strb	r3, [r7, #7]
    bba4:	4613      	mov	r3, r2
    bba6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bba8:	79fb      	ldrb	r3, [r7, #7]
    bbaa:	095b      	lsrs	r3, r3, #5
    bbac:	b2d8      	uxtb	r0, r3
    bbae:	79fb      	ldrb	r3, [r7, #7]
    bbb0:	f003 031f 	and.w	r3, r3, #31
    bbb4:	2201      	movs	r2, #1
    bbb6:	fa02 f303 	lsl.w	r3, r2, r3
    bbba:	79ba      	ldrb	r2, [r7, #6]
    bbbc:	4619      	mov	r1, r3
    bbbe:	4b03      	ldr	r3, [pc, #12]	; (bbcc <gpio_set_pin_level+0x34>)
    bbc0:	4798      	blx	r3
}
    bbc2:	bf00      	nop
    bbc4:	3708      	adds	r7, #8
    bbc6:	46bd      	mov	sp, r7
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	bf00      	nop
    bbcc:	0000ba79 	.word	0x0000ba79

0000bbd0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bbd0:	b580      	push	{r7, lr}
    bbd2:	b082      	sub	sp, #8
    bbd4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bbd6:	2100      	movs	r1, #0
    bbd8:	2008      	movs	r0, #8
    bbda:	4b24      	ldr	r3, [pc, #144]	; (bc6c <QSPI_N25Q256_exit_xip+0x9c>)
    bbdc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bbde:	2100      	movs	r1, #0
    bbe0:	202b      	movs	r0, #43	; 0x2b
    bbe2:	4b22      	ldr	r3, [pc, #136]	; (bc6c <QSPI_N25Q256_exit_xip+0x9c>)
    bbe4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bbe6:	2100      	movs	r1, #0
    bbe8:	202a      	movs	r0, #42	; 0x2a
    bbea:	4b20      	ldr	r3, [pc, #128]	; (bc6c <QSPI_N25Q256_exit_xip+0x9c>)
    bbec:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bbee:	2102      	movs	r1, #2
    bbf0:	2008      	movs	r0, #8
    bbf2:	4b1f      	ldr	r3, [pc, #124]	; (bc70 <QSPI_N25Q256_exit_xip+0xa0>)
    bbf4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bbf6:	2102      	movs	r1, #2
    bbf8:	202b      	movs	r0, #43	; 0x2b
    bbfa:	4b1d      	ldr	r3, [pc, #116]	; (bc70 <QSPI_N25Q256_exit_xip+0xa0>)
    bbfc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bbfe:	2102      	movs	r1, #2
    bc00:	202a      	movs	r0, #42	; 0x2a
    bc02:	4b1b      	ldr	r3, [pc, #108]	; (bc70 <QSPI_N25Q256_exit_xip+0xa0>)
    bc04:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bc06:	2101      	movs	r1, #1
    bc08:	2008      	movs	r0, #8
    bc0a:	4b1a      	ldr	r3, [pc, #104]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc0c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bc0e:	2100      	movs	r1, #0
    bc10:	202b      	movs	r0, #43	; 0x2b
    bc12:	4b18      	ldr	r3, [pc, #96]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc14:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bc16:	2100      	movs	r1, #0
    bc18:	202a      	movs	r0, #42	; 0x2a
    bc1a:	4b16      	ldr	r3, [pc, #88]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc1c:	4798      	blx	r3

	delay_us(1);
    bc1e:	2001      	movs	r0, #1
    bc20:	4b15      	ldr	r3, [pc, #84]	; (bc78 <QSPI_N25Q256_exit_xip+0xa8>)
    bc22:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bc24:	2300      	movs	r3, #0
    bc26:	607b      	str	r3, [r7, #4]
    bc28:	e010      	b.n	bc4c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bc2a:	2101      	movs	r1, #1
    bc2c:	202a      	movs	r0, #42	; 0x2a
    bc2e:	4b11      	ldr	r3, [pc, #68]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc30:	4798      	blx	r3
		delay_us(1);
    bc32:	2001      	movs	r0, #1
    bc34:	4b10      	ldr	r3, [pc, #64]	; (bc78 <QSPI_N25Q256_exit_xip+0xa8>)
    bc36:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bc38:	2100      	movs	r1, #0
    bc3a:	202a      	movs	r0, #42	; 0x2a
    bc3c:	4b0d      	ldr	r3, [pc, #52]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc3e:	4798      	blx	r3
		delay_us(1);
    bc40:	2001      	movs	r0, #1
    bc42:	4b0d      	ldr	r3, [pc, #52]	; (bc78 <QSPI_N25Q256_exit_xip+0xa8>)
    bc44:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bc46:	687b      	ldr	r3, [r7, #4]
    bc48:	3301      	adds	r3, #1
    bc4a:	607b      	str	r3, [r7, #4]
    bc4c:	687b      	ldr	r3, [r7, #4]
    bc4e:	2b06      	cmp	r3, #6
    bc50:	ddeb      	ble.n	bc2a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bc52:	2101      	movs	r1, #1
    bc54:	202b      	movs	r0, #43	; 0x2b
    bc56:	4b07      	ldr	r3, [pc, #28]	; (bc74 <QSPI_N25Q256_exit_xip+0xa4>)
    bc58:	4798      	blx	r3
	delay_us(1);
    bc5a:	2001      	movs	r0, #1
    bc5c:	4b06      	ldr	r3, [pc, #24]	; (bc78 <QSPI_N25Q256_exit_xip+0xa8>)
    bc5e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bc60:	4b06      	ldr	r3, [pc, #24]	; (bc7c <QSPI_N25Q256_exit_xip+0xac>)
    bc62:	4798      	blx	r3
}
    bc64:	bf00      	nop
    bc66:	3708      	adds	r7, #8
    bc68:	46bd      	mov	sp, r7
    bc6a:	bd80      	pop	{r7, pc}
    bc6c:	0000bb41 	.word	0x0000bb41
    bc70:	0000bb61 	.word	0x0000bb61
    bc74:	0000bb99 	.word	0x0000bb99
    bc78:	0000230d 	.word	0x0000230d
    bc7c:	000016c1 	.word	0x000016c1

0000bc80 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bc80:	b598      	push	{r3, r4, r7, lr}
    bc82:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bc84:	4806      	ldr	r0, [pc, #24]	; (bca0 <spi_nor_flash_init+0x20>)
    bc86:	4b07      	ldr	r3, [pc, #28]	; (bca4 <spi_nor_flash_init+0x24>)
    bc88:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bc8a:	2300      	movs	r3, #0
    bc8c:	4a06      	ldr	r2, [pc, #24]	; (bca8 <spi_nor_flash_init+0x28>)
    bc8e:	4904      	ldr	r1, [pc, #16]	; (bca0 <spi_nor_flash_init+0x20>)
    bc90:	4806      	ldr	r0, [pc, #24]	; (bcac <spi_nor_flash_init+0x2c>)
    bc92:	4c07      	ldr	r4, [pc, #28]	; (bcb0 <spi_nor_flash_init+0x30>)
    bc94:	47a0      	blx	r4
    bc96:	4602      	mov	r2, r0
    bc98:	4b06      	ldr	r3, [pc, #24]	; (bcb4 <spi_nor_flash_init+0x34>)
    bc9a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bc9c:	bf00      	nop
    bc9e:	bd98      	pop	{r3, r4, r7, pc}
    bca0:	20001378 	.word	0x20001378
    bca4:	00002a49 	.word	0x00002a49
    bca8:	0000bbd1 	.word	0x0000bbd1
    bcac:	20000e4c 	.word	0x20000e4c
    bcb0:	0000c0ed 	.word	0x0000c0ed
    bcb4:	20001598 	.word	0x20001598

0000bcb8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bcb8:	b580      	push	{r7, lr}
    bcba:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bcbc:	4805      	ldr	r0, [pc, #20]	; (bcd4 <cdc_device_acm_init+0x1c>)
    bcbe:	4b06      	ldr	r3, [pc, #24]	; (bcd8 <cdc_device_acm_init+0x20>)
    bcc0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bcc2:	4b06      	ldr	r3, [pc, #24]	; (bcdc <cdc_device_acm_init+0x24>)
    bcc4:	4798      	blx	r3

	usbdc_start(single_desc);
    bcc6:	4806      	ldr	r0, [pc, #24]	; (bce0 <cdc_device_acm_init+0x28>)
    bcc8:	4b06      	ldr	r3, [pc, #24]	; (bce4 <cdc_device_acm_init+0x2c>)
    bcca:	4798      	blx	r3
	usbdc_attach();
    bccc:	4b06      	ldr	r3, [pc, #24]	; (bce8 <cdc_device_acm_init+0x30>)
    bcce:	4798      	blx	r3
}
    bcd0:	bf00      	nop
    bcd2:	bd80      	pop	{r7, pc}
    bcd4:	20000e9c 	.word	0x20000e9c
    bcd8:	0000d815 	.word	0x0000d815
    bcdc:	0000ca8d 	.word	0x0000ca8d
    bce0:	200001d0 	.word	0x200001d0
    bce4:	0000d8b1 	.word	0x0000d8b1
    bce8:	0000d901 	.word	0x0000d901

0000bcec <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bcec:	b580      	push	{r7, lr}
    bcee:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bcf0:	4b01      	ldr	r3, [pc, #4]	; (bcf8 <usb_init+0xc>)
    bcf2:	4798      	blx	r3
}
    bcf4:	bf00      	nop
    bcf6:	bd80      	pop	{r7, pc}
    bcf8:	0000bcb9 	.word	0x0000bcb9

0000bcfc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bcfc:	b480      	push	{r7}
    bcfe:	b085      	sub	sp, #20
    bd00:	af00      	add	r7, sp, #0
    bd02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bd04:	f3ef 8310 	mrs	r3, PRIMASK
    bd08:	60fb      	str	r3, [r7, #12]
  return(result);
    bd0a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bd0c:	687b      	ldr	r3, [r7, #4]
    bd0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bd10:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bd12:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bd16:	bf00      	nop
    bd18:	3714      	adds	r7, #20
    bd1a:	46bd      	mov	sp, r7
    bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd20:	4770      	bx	lr

0000bd22 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bd22:	b480      	push	{r7}
    bd24:	b085      	sub	sp, #20
    bd26:	af00      	add	r7, sp, #0
    bd28:	6078      	str	r0, [r7, #4]
    bd2a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bd2e:	687b      	ldr	r3, [r7, #4]
    bd30:	681b      	ldr	r3, [r3, #0]
    bd32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bd34:	68fb      	ldr	r3, [r7, #12]
    bd36:	f383 8810 	msr	PRIMASK, r3
}
    bd3a:	bf00      	nop
    bd3c:	3714      	adds	r7, #20
    bd3e:	46bd      	mov	sp, r7
    bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd44:	4770      	bx	lr
	...

0000bd48 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bd48:	b580      	push	{r7, lr}
    bd4a:	b08c      	sub	sp, #48	; 0x30
    bd4c:	af00      	add	r7, sp, #0
    bd4e:	6078      	str	r0, [r7, #4]
    bd50:	460b      	mov	r3, r1
    bd52:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bd54:	687b      	ldr	r3, [r7, #4]
    bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bd58:	687b      	ldr	r3, [r7, #4]
    bd5a:	681b      	ldr	r3, [r3, #0]
    bd5c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bd5e:	f107 030c 	add.w	r3, r7, #12
    bd62:	2200      	movs	r2, #0
    bd64:	601a      	str	r2, [r3, #0]
    bd66:	605a      	str	r2, [r3, #4]
    bd68:	609a      	str	r2, [r3, #8]
    bd6a:	60da      	str	r2, [r3, #12]
    bd6c:	611a      	str	r2, [r3, #16]
    bd6e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd72:	7b1b      	ldrb	r3, [r3, #12]
    bd74:	2b00      	cmp	r3, #0
    bd76:	d001      	beq.n	bd7c <n25q256a_xip_confirm+0x34>
    bd78:	2206      	movs	r2, #6
    bd7a:	e000      	b.n	bd7e <n25q256a_xip_confirm+0x36>
    bd7c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd7e:	7b3b      	ldrb	r3, [r7, #12]
    bd80:	f362 0302 	bfi	r3, r2, #0, #3
    bd84:	733b      	strb	r3, [r7, #12]
    bd86:	7b3b      	ldrb	r3, [r7, #12]
    bd88:	f043 0310 	orr.w	r3, r3, #16
    bd8c:	733b      	strb	r3, [r7, #12]
    bd8e:	7b3b      	ldrb	r3, [r7, #12]
    bd90:	f043 0320 	orr.w	r3, r3, #32
    bd94:	733b      	strb	r3, [r7, #12]
    bd96:	7b3b      	ldrb	r3, [r7, #12]
    bd98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd9c:	733b      	strb	r3, [r7, #12]
    bd9e:	7b3b      	ldrb	r3, [r7, #12]
    bda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bda4:	733b      	strb	r3, [r7, #12]
    bda6:	7b7b      	ldrb	r3, [r7, #13]
    bda8:	f043 0303 	orr.w	r3, r3, #3
    bdac:	737b      	strb	r3, [r7, #13]
    bdae:	7b7b      	ldrb	r3, [r7, #13]
    bdb0:	2201      	movs	r2, #1
    bdb2:	f362 1305 	bfi	r3, r2, #4, #2
    bdb6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdba:	7b1b      	ldrb	r3, [r3, #12]
    bdbc:	2b00      	cmp	r3, #0
    bdbe:	d001      	beq.n	bdc4 <n25q256a_xip_confirm+0x7c>
    bdc0:	2208      	movs	r2, #8
    bdc2:	e000      	b.n	bdc6 <n25q256a_xip_confirm+0x7e>
    bdc4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bdc6:	7bbb      	ldrb	r3, [r7, #14]
    bdc8:	f362 0304 	bfi	r3, r2, #0, #5
    bdcc:	73bb      	strb	r3, [r7, #14]
    bdce:	230b      	movs	r3, #11
    bdd0:	743b      	strb	r3, [r7, #16]
    bdd2:	78fb      	ldrb	r3, [r7, #3]
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d001      	beq.n	bddc <n25q256a_xip_confirm+0x94>
    bdd8:	2300      	movs	r3, #0
    bdda:	e000      	b.n	bdde <n25q256a_xip_confirm+0x96>
    bddc:	23ff      	movs	r3, #255	; 0xff
    bdde:	747b      	strb	r3, [r7, #17]
    bde0:	2301      	movs	r3, #1
    bde2:	61bb      	str	r3, [r7, #24]
    bde4:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bde8:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bdea:	f107 030c 	add.w	r3, r7, #12
    bdee:	4619      	mov	r1, r3
    bdf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bdf2:	4b07      	ldr	r3, [pc, #28]	; (be10 <n25q256a_xip_confirm+0xc8>)
    bdf4:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bdf6:	78fb      	ldrb	r3, [r7, #3]
    bdf8:	2b00      	cmp	r3, #0
    bdfa:	d001      	beq.n	be00 <n25q256a_xip_confirm+0xb8>
    bdfc:	2202      	movs	r2, #2
    bdfe:	e000      	b.n	be02 <n25q256a_xip_confirm+0xba>
    be00:	2201      	movs	r2, #1
    be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be04:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    be06:	2300      	movs	r3, #0
}
    be08:	4618      	mov	r0, r3
    be0a:	3730      	adds	r7, #48	; 0x30
    be0c:	46bd      	mov	sp, r7
    be0e:	bd80      	pop	{r7, pc}
    be10:	00002ac1 	.word	0x00002ac1

0000be14 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    be14:	b580      	push	{r7, lr}
    be16:	b08c      	sub	sp, #48	; 0x30
    be18:	af00      	add	r7, sp, #0
    be1a:	6078      	str	r0, [r7, #4]
    be1c:	460b      	mov	r3, r1
    be1e:	70fb      	strb	r3, [r7, #3]
    be20:	4613      	mov	r3, r2
    be22:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    be24:	2300      	movs	r3, #0
    be26:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    be2c:	687b      	ldr	r3, [r7, #4]
    be2e:	681b      	ldr	r3, [r3, #0]
    be30:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    be32:	f107 030c 	add.w	r3, r7, #12
    be36:	2200      	movs	r2, #0
    be38:	601a      	str	r2, [r3, #0]
    be3a:	605a      	str	r2, [r3, #4]
    be3c:	609a      	str	r2, [r3, #8]
    be3e:	60da      	str	r2, [r3, #12]
    be40:	611a      	str	r2, [r3, #16]
    be42:	615a      	str	r2, [r3, #20]
    be44:	78fb      	ldrb	r3, [r7, #3]
    be46:	f003 0307 	and.w	r3, r3, #7
    be4a:	b2da      	uxtb	r2, r3
    be4c:	7b3b      	ldrb	r3, [r7, #12]
    be4e:	f362 0302 	bfi	r3, r2, #0, #3
    be52:	733b      	strb	r3, [r7, #12]
    be54:	7b3b      	ldrb	r3, [r7, #12]
    be56:	f043 0310 	orr.w	r3, r3, #16
    be5a:	733b      	strb	r3, [r7, #12]
    be5c:	7b3b      	ldrb	r3, [r7, #12]
    be5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be62:	733b      	strb	r3, [r7, #12]
    be64:	78bb      	ldrb	r3, [r7, #2]
    be66:	743b      	strb	r3, [r7, #16]
    be68:	2301      	movs	r3, #1
    be6a:	61bb      	str	r3, [r7, #24]
    be6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    be70:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be74:	7b5b      	ldrb	r3, [r3, #13]
    be76:	2b00      	cmp	r3, #0
    be78:	d003      	beq.n	be82 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    be7a:	2100      	movs	r1, #0
    be7c:	6878      	ldr	r0, [r7, #4]
    be7e:	4b0a      	ldr	r3, [pc, #40]	; (bea8 <n25q256a_read_reg+0x94>)
    be80:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    be82:	f107 030c 	add.w	r3, r7, #12
    be86:	4619      	mov	r1, r3
    be88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be8a:	4b08      	ldr	r3, [pc, #32]	; (beac <n25q256a_read_reg+0x98>)
    be8c:	4798      	blx	r3
	if (n25q->xip_mode) {
    be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be90:	7b5b      	ldrb	r3, [r3, #13]
    be92:	2b00      	cmp	r3, #0
    be94:	d003      	beq.n	be9e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    be96:	2101      	movs	r1, #1
    be98:	6878      	ldr	r0, [r7, #4]
    be9a:	4b03      	ldr	r3, [pc, #12]	; (bea8 <n25q256a_read_reg+0x94>)
    be9c:	4798      	blx	r3
	}
	return status;
    be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bea0:	4618      	mov	r0, r3
    bea2:	3730      	adds	r7, #48	; 0x30
    bea4:	46bd      	mov	sp, r7
    bea6:	bd80      	pop	{r7, pc}
    bea8:	0000bd49 	.word	0x0000bd49
    beac:	00002ac1 	.word	0x00002ac1

0000beb0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    beb0:	b580      	push	{r7, lr}
    beb2:	b08c      	sub	sp, #48	; 0x30
    beb4:	af00      	add	r7, sp, #0
    beb6:	60f8      	str	r0, [r7, #12]
    beb8:	607b      	str	r3, [r7, #4]
    beba:	460b      	mov	r3, r1
    bebc:	72fb      	strb	r3, [r7, #11]
    bebe:	4613      	mov	r3, r2
    bec0:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bec2:	68fb      	ldr	r3, [r7, #12]
    bec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bec6:	68fb      	ldr	r3, [r7, #12]
    bec8:	681b      	ldr	r3, [r3, #0]
    beca:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    becc:	f107 0310 	add.w	r3, r7, #16
    bed0:	2200      	movs	r2, #0
    bed2:	601a      	str	r2, [r3, #0]
    bed4:	605a      	str	r2, [r3, #4]
    bed6:	609a      	str	r2, [r3, #8]
    bed8:	60da      	str	r2, [r3, #12]
    beda:	611a      	str	r2, [r3, #16]
    bedc:	615a      	str	r2, [r3, #20]
    bede:	7afb      	ldrb	r3, [r7, #11]
    bee0:	f003 0307 	and.w	r3, r3, #7
    bee4:	b2da      	uxtb	r2, r3
    bee6:	7c3b      	ldrb	r3, [r7, #16]
    bee8:	f362 0302 	bfi	r3, r2, #0, #3
    beec:	743b      	strb	r3, [r7, #16]
    beee:	7c3b      	ldrb	r3, [r7, #16]
    bef0:	f043 0310 	orr.w	r3, r3, #16
    bef4:	743b      	strb	r3, [r7, #16]
    bef6:	7c3b      	ldrb	r3, [r7, #16]
    bef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    befc:	743b      	strb	r3, [r7, #16]
    befe:	7c7b      	ldrb	r3, [r7, #17]
    bf00:	2202      	movs	r2, #2
    bf02:	f362 1305 	bfi	r3, r2, #4, #2
    bf06:	747b      	strb	r3, [r7, #17]
    bf08:	7abb      	ldrb	r3, [r7, #10]
    bf0a:	753b      	strb	r3, [r7, #20]
    bf0c:	2301      	movs	r3, #1
    bf0e:	61fb      	str	r3, [r7, #28]
    bf10:	1d3b      	adds	r3, r7, #4
    bf12:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf16:	7b5b      	ldrb	r3, [r3, #13]
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d003      	beq.n	bf24 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bf1c:	2100      	movs	r1, #0
    bf1e:	68f8      	ldr	r0, [r7, #12]
    bf20:	4b09      	ldr	r3, [pc, #36]	; (bf48 <n25q256a_write_reg+0x98>)
    bf22:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bf24:	f107 0310 	add.w	r3, r7, #16
    bf28:	4619      	mov	r1, r3
    bf2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf2c:	4b07      	ldr	r3, [pc, #28]	; (bf4c <n25q256a_write_reg+0x9c>)
    bf2e:	4798      	blx	r3
	if (n25q->xip_mode) {
    bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf32:	7b5b      	ldrb	r3, [r3, #13]
    bf34:	2b00      	cmp	r3, #0
    bf36:	d003      	beq.n	bf40 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bf38:	2101      	movs	r1, #1
    bf3a:	68f8      	ldr	r0, [r7, #12]
    bf3c:	4b02      	ldr	r3, [pc, #8]	; (bf48 <n25q256a_write_reg+0x98>)
    bf3e:	4798      	blx	r3
	}
}
    bf40:	bf00      	nop
    bf42:	3730      	adds	r7, #48	; 0x30
    bf44:	46bd      	mov	sp, r7
    bf46:	bd80      	pop	{r7, pc}
    bf48:	0000bd49 	.word	0x0000bd49
    bf4c:	00002ac1 	.word	0x00002ac1

0000bf50 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bf50:	b580      	push	{r7, lr}
    bf52:	b090      	sub	sp, #64	; 0x40
    bf54:	af00      	add	r7, sp, #0
    bf56:	6078      	str	r0, [r7, #4]
    bf58:	460b      	mov	r3, r1
    bf5a:	70fb      	strb	r3, [r7, #3]
    bf5c:	4613      	mov	r3, r2
    bf5e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bf66:	78bb      	ldrb	r3, [r7, #2]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d001      	beq.n	bf70 <n25q256a_write_enable+0x20>
    bf6c:	2306      	movs	r3, #6
    bf6e:	e000      	b.n	bf72 <n25q256a_write_enable+0x22>
    bf70:	2304      	movs	r3, #4
    bf72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bf76:	f107 0320 	add.w	r3, r7, #32
    bf7a:	2200      	movs	r2, #0
    bf7c:	601a      	str	r2, [r3, #0]
    bf7e:	605a      	str	r2, [r3, #4]
    bf80:	609a      	str	r2, [r3, #8]
    bf82:	60da      	str	r2, [r3, #12]
    bf84:	611a      	str	r2, [r3, #16]
    bf86:	615a      	str	r2, [r3, #20]
    bf88:	78fb      	ldrb	r3, [r7, #3]
    bf8a:	f003 0307 	and.w	r3, r3, #7
    bf8e:	b2da      	uxtb	r2, r3
    bf90:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf94:	f362 0302 	bfi	r3, r2, #0, #3
    bf98:	f887 3020 	strb.w	r3, [r7, #32]
    bf9c:	f897 3020 	ldrb.w	r3, [r7, #32]
    bfa0:	f043 0310 	orr.w	r3, r3, #16
    bfa4:	f887 3020 	strb.w	r3, [r7, #32]
    bfa8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bfac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bfb0:	f107 0308 	add.w	r3, r7, #8
    bfb4:	2200      	movs	r2, #0
    bfb6:	601a      	str	r2, [r3, #0]
    bfb8:	605a      	str	r2, [r3, #4]
    bfba:	609a      	str	r2, [r3, #8]
    bfbc:	60da      	str	r2, [r3, #12]
    bfbe:	611a      	str	r2, [r3, #16]
    bfc0:	615a      	str	r2, [r3, #20]
    bfc2:	78fb      	ldrb	r3, [r7, #3]
    bfc4:	f003 0307 	and.w	r3, r3, #7
    bfc8:	b2da      	uxtb	r2, r3
    bfca:	7a3b      	ldrb	r3, [r7, #8]
    bfcc:	f362 0302 	bfi	r3, r2, #0, #3
    bfd0:	723b      	strb	r3, [r7, #8]
    bfd2:	7a3b      	ldrb	r3, [r7, #8]
    bfd4:	f043 0310 	orr.w	r3, r3, #16
    bfd8:	723b      	strb	r3, [r7, #8]
    bfda:	7a3b      	ldrb	r3, [r7, #8]
    bfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bfe0:	723b      	strb	r3, [r7, #8]
    bfe2:	2305      	movs	r3, #5
    bfe4:	733b      	strb	r3, [r7, #12]
    bfe6:	2301      	movs	r3, #1
    bfe8:	617b      	str	r3, [r7, #20]
    bfea:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bfee:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bff0:	f107 0320 	add.w	r3, r7, #32
    bff4:	4619      	mov	r1, r3
    bff6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bff8:	4b08      	ldr	r3, [pc, #32]	; (c01c <n25q256a_write_enable+0xcc>)
    bffa:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bffc:	f107 0308 	add.w	r3, r7, #8
    c000:	4619      	mov	r1, r3
    c002:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c004:	4b05      	ldr	r3, [pc, #20]	; (c01c <n25q256a_write_enable+0xcc>)
    c006:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    c008:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    c00c:	f003 0302 	and.w	r3, r3, #2
    c010:	2b00      	cmp	r3, #0
    c012:	d0ed      	beq.n	bff0 <n25q256a_write_enable+0xa0>
}
    c014:	bf00      	nop
    c016:	3740      	adds	r7, #64	; 0x40
    c018:	46bd      	mov	sp, r7
    c01a:	bd80      	pop	{r7, pc}
    c01c:	00002ac1 	.word	0x00002ac1

0000c020 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    c020:	b590      	push	{r4, r7, lr}
    c022:	b087      	sub	sp, #28
    c024:	af00      	add	r7, sp, #0
    c026:	6078      	str	r0, [r7, #4]
    c028:	460b      	mov	r3, r1
    c02a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c030:	68fb      	ldr	r3, [r7, #12]
    c032:	7b1b      	ldrb	r3, [r3, #12]
    c034:	2b00      	cmp	r3, #0
    c036:	d001      	beq.n	c03c <n25q256a_switch_mode+0x1c>
    c038:	2306      	movs	r3, #6
    c03a:	e000      	b.n	c03e <n25q256a_switch_mode+0x1e>
    c03c:	2300      	movs	r3, #0
    c03e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c040:	7afb      	ldrb	r3, [r7, #11]
    c042:	2265      	movs	r2, #101	; 0x65
    c044:	4619      	mov	r1, r3
    c046:	6878      	ldr	r0, [r7, #4]
    c048:	4b25      	ldr	r3, [pc, #148]	; (c0e0 <n25q256a_switch_mode+0xc0>)
    c04a:	4798      	blx	r3
    c04c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    c04e:	2300      	movs	r3, #0
    c050:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	7b1b      	ldrb	r3, [r3, #12]
    c056:	78fa      	ldrb	r2, [r7, #3]
    c058:	429a      	cmp	r2, r3
    c05a:	d03d      	beq.n	c0d8 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    c05c:	78fb      	ldrb	r3, [r7, #3]
    c05e:	2b00      	cmp	r3, #0
    c060:	d00b      	beq.n	c07a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    c062:	697b      	ldr	r3, [r7, #20]
    c064:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c068:	2b00      	cmp	r3, #0
    c06a:	d011      	beq.n	c090 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    c06c:	697b      	ldr	r3, [r7, #20]
    c06e:	f003 031f 	and.w	r3, r3, #31
    c072:	617b      	str	r3, [r7, #20]
			modify = 1;
    c074:	2301      	movs	r3, #1
    c076:	74fb      	strb	r3, [r7, #19]
    c078:	e00a      	b.n	c090 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    c07a:	697b      	ldr	r3, [r7, #20]
    c07c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c080:	2b00      	cmp	r3, #0
    c082:	d105      	bne.n	c090 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c084:	697b      	ldr	r3, [r7, #20]
    c086:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c08a:	617b      	str	r3, [r7, #20]
			modify = 1;
    c08c:	2301      	movs	r3, #1
    c08e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c090:	7cfb      	ldrb	r3, [r7, #19]
    c092:	2b00      	cmp	r3, #0
    c094:	d021      	beq.n	c0da <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c096:	68fb      	ldr	r3, [r7, #12]
    c098:	78fa      	ldrb	r2, [r7, #3]
    c09a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c09c:	7afb      	ldrb	r3, [r7, #11]
    c09e:	2201      	movs	r2, #1
    c0a0:	4619      	mov	r1, r3
    c0a2:	6878      	ldr	r0, [r7, #4]
    c0a4:	4b0f      	ldr	r3, [pc, #60]	; (c0e4 <n25q256a_switch_mode+0xc4>)
    c0a6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c0a8:	7af9      	ldrb	r1, [r7, #11]
    c0aa:	697b      	ldr	r3, [r7, #20]
    c0ac:	2261      	movs	r2, #97	; 0x61
    c0ae:	6878      	ldr	r0, [r7, #4]
    c0b0:	4c0d      	ldr	r4, [pc, #52]	; (c0e8 <n25q256a_switch_mode+0xc8>)
    c0b2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c0b4:	78fb      	ldrb	r3, [r7, #3]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d001      	beq.n	c0be <n25q256a_switch_mode+0x9e>
    c0ba:	2306      	movs	r3, #6
    c0bc:	e000      	b.n	c0c0 <n25q256a_switch_mode+0xa0>
    c0be:	2300      	movs	r3, #0
    c0c0:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c0c2:	7afb      	ldrb	r3, [r7, #11]
    c0c4:	2265      	movs	r2, #101	; 0x65
    c0c6:	4619      	mov	r1, r3
    c0c8:	6878      	ldr	r0, [r7, #4]
    c0ca:	4b05      	ldr	r3, [pc, #20]	; (c0e0 <n25q256a_switch_mode+0xc0>)
    c0cc:	4798      	blx	r3
    c0ce:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c0d0:	68fb      	ldr	r3, [r7, #12]
    c0d2:	78fa      	ldrb	r2, [r7, #3]
    c0d4:	731a      	strb	r2, [r3, #12]
    c0d6:	e000      	b.n	c0da <n25q256a_switch_mode+0xba>
		return;
    c0d8:	bf00      	nop
	}
}
    c0da:	371c      	adds	r7, #28
    c0dc:	46bd      	mov	sp, r7
    c0de:	bd90      	pop	{r4, r7, pc}
    c0e0:	0000be15 	.word	0x0000be15
    c0e4:	0000bf51 	.word	0x0000bf51
    c0e8:	0000beb1 	.word	0x0000beb1

0000c0ec <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c0ec:	b580      	push	{r7, lr}
    c0ee:	b086      	sub	sp, #24
    c0f0:	af00      	add	r7, sp, #0
    c0f2:	60f8      	str	r0, [r7, #12]
    c0f4:	60b9      	str	r1, [r7, #8]
    c0f6:	607a      	str	r2, [r7, #4]
    c0f8:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c0fa:	68fb      	ldr	r3, [r7, #12]
    c0fc:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c0fe:	4a0c      	ldr	r2, [pc, #48]	; (c130 <n25q256a_construct+0x44>)
    c100:	68b9      	ldr	r1, [r7, #8]
    c102:	68f8      	ldr	r0, [r7, #12]
    c104:	4b0b      	ldr	r3, [pc, #44]	; (c134 <n25q256a_construct+0x48>)
    c106:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c108:	697b      	ldr	r3, [r7, #20]
    c10a:	2200      	movs	r2, #0
    c10c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c10e:	697b      	ldr	r3, [r7, #20]
    c110:	2200      	movs	r2, #0
    c112:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c114:	697b      	ldr	r3, [r7, #20]
    c116:	687a      	ldr	r2, [r7, #4]
    c118:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c11a:	78fb      	ldrb	r3, [r7, #3]
    c11c:	4619      	mov	r1, r3
    c11e:	68f8      	ldr	r0, [r7, #12]
    c120:	4b05      	ldr	r3, [pc, #20]	; (c138 <n25q256a_construct+0x4c>)
    c122:	4798      	blx	r3
	return me;
    c124:	68fb      	ldr	r3, [r7, #12]
}
    c126:	4618      	mov	r0, r3
    c128:	3718      	adds	r7, #24
    c12a:	46bd      	mov	sp, r7
    c12c:	bd80      	pop	{r7, pc}
    c12e:	bf00      	nop
    c130:	000102e4 	.word	0x000102e4
    c134:	0000c5c9 	.word	0x0000c5c9
    c138:	0000c021 	.word	0x0000c021

0000c13c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c13c:	b580      	push	{r7, lr}
    c13e:	b08c      	sub	sp, #48	; 0x30
    c140:	af00      	add	r7, sp, #0
    c142:	60f8      	str	r0, [r7, #12]
    c144:	60b9      	str	r1, [r7, #8]
    c146:	607a      	str	r2, [r7, #4]
    c148:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c14a:	68fb      	ldr	r3, [r7, #12]
    c14c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c14e:	68fb      	ldr	r3, [r7, #12]
    c150:	681b      	ldr	r3, [r3, #0]
    c152:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c154:	f107 0310 	add.w	r3, r7, #16
    c158:	2200      	movs	r2, #0
    c15a:	601a      	str	r2, [r3, #0]
    c15c:	605a      	str	r2, [r3, #4]
    c15e:	609a      	str	r2, [r3, #8]
    c160:	60da      	str	r2, [r3, #12]
    c162:	611a      	str	r2, [r3, #16]
    c164:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c168:	7b1b      	ldrb	r3, [r3, #12]
    c16a:	2b00      	cmp	r3, #0
    c16c:	d001      	beq.n	c172 <n25q256a_read+0x36>
    c16e:	2206      	movs	r2, #6
    c170:	e000      	b.n	c174 <n25q256a_read+0x38>
    c172:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c174:	7c3b      	ldrb	r3, [r7, #16]
    c176:	f362 0302 	bfi	r3, r2, #0, #3
    c17a:	743b      	strb	r3, [r7, #16]
    c17c:	7c3b      	ldrb	r3, [r7, #16]
    c17e:	f043 0310 	orr.w	r3, r3, #16
    c182:	743b      	strb	r3, [r7, #16]
    c184:	7c3b      	ldrb	r3, [r7, #16]
    c186:	f043 0320 	orr.w	r3, r3, #32
    c18a:	743b      	strb	r3, [r7, #16]
    c18c:	7c3b      	ldrb	r3, [r7, #16]
    c18e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c192:	743b      	strb	r3, [r7, #16]
    c194:	7c7b      	ldrb	r3, [r7, #17]
    c196:	2201      	movs	r2, #1
    c198:	f362 1305 	bfi	r3, r2, #4, #2
    c19c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1a0:	7b1b      	ldrb	r3, [r3, #12]
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d001      	beq.n	c1aa <n25q256a_read+0x6e>
    c1a6:	220a      	movs	r2, #10
    c1a8:	e000      	b.n	c1ac <n25q256a_read+0x70>
    c1aa:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c1ac:	7cbb      	ldrb	r3, [r7, #18]
    c1ae:	f362 0304 	bfi	r3, r2, #0, #5
    c1b2:	74bb      	strb	r3, [r7, #18]
    c1b4:	230b      	movs	r3, #11
    c1b6:	753b      	strb	r3, [r7, #20]
    c1b8:	687b      	ldr	r3, [r7, #4]
    c1ba:	61bb      	str	r3, [r7, #24]
    c1bc:	683b      	ldr	r3, [r7, #0]
    c1be:	61fb      	str	r3, [r7, #28]
    c1c0:	68bb      	ldr	r3, [r7, #8]
    c1c2:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c1c4:	f107 0310 	add.w	r3, r7, #16
    c1c8:	4619      	mov	r1, r3
    c1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c1cc:	4b03      	ldr	r3, [pc, #12]	; (c1dc <n25q256a_read+0xa0>)
    c1ce:	4798      	blx	r3
	return ERR_NONE;
    c1d0:	2300      	movs	r3, #0
}
    c1d2:	4618      	mov	r0, r3
    c1d4:	3730      	adds	r7, #48	; 0x30
    c1d6:	46bd      	mov	sp, r7
    c1d8:	bd80      	pop	{r7, pc}
    c1da:	bf00      	nop
    c1dc:	00002ac1 	.word	0x00002ac1

0000c1e0 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c1e0:	b580      	push	{r7, lr}
    c1e2:	b08c      	sub	sp, #48	; 0x30
    c1e4:	af00      	add	r7, sp, #0
    c1e6:	60f8      	str	r0, [r7, #12]
    c1e8:	60b9      	str	r1, [r7, #8]
    c1ea:	607a      	str	r2, [r7, #4]
    c1ec:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c1ee:	68fb      	ldr	r3, [r7, #12]
    c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c1f2:	68fb      	ldr	r3, [r7, #12]
    c1f4:	681b      	ldr	r3, [r3, #0]
    c1f6:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c1f8:	f107 0310 	add.w	r3, r7, #16
    c1fc:	2200      	movs	r2, #0
    c1fe:	601a      	str	r2, [r3, #0]
    c200:	605a      	str	r2, [r3, #4]
    c202:	609a      	str	r2, [r3, #8]
    c204:	60da      	str	r2, [r3, #12]
    c206:	611a      	str	r2, [r3, #16]
    c208:	615a      	str	r2, [r3, #20]
    c20a:	7c3b      	ldrb	r3, [r7, #16]
    c20c:	f043 0310 	orr.w	r3, r3, #16
    c210:	743b      	strb	r3, [r7, #16]
    c212:	7c3b      	ldrb	r3, [r7, #16]
    c214:	f043 0320 	orr.w	r3, r3, #32
    c218:	743b      	strb	r3, [r7, #16]
    c21a:	7c3b      	ldrb	r3, [r7, #16]
    c21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c220:	743b      	strb	r3, [r7, #16]
    c222:	7c7b      	ldrb	r3, [r7, #17]
    c224:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c228:	747b      	strb	r3, [r7, #17]
    c22a:	2302      	movs	r3, #2
    c22c:	753b      	strb	r3, [r7, #20]
    c22e:	687b      	ldr	r3, [r7, #4]
    c230:	61bb      	str	r3, [r7, #24]
    c232:	683b      	ldr	r3, [r7, #0]
    c234:	61fb      	str	r3, [r7, #28]
    c236:	68bb      	ldr	r3, [r7, #8]
    c238:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c23c:	7b1b      	ldrb	r3, [r3, #12]
    c23e:	2b00      	cmp	r3, #0
    c240:	d001      	beq.n	c246 <n25q256a_write+0x66>
    c242:	2206      	movs	r2, #6
    c244:	e000      	b.n	c248 <n25q256a_write+0x68>
    c246:	2200      	movs	r2, #0
    c248:	7c3b      	ldrb	r3, [r7, #16]
    c24a:	f362 0302 	bfi	r3, r2, #0, #3
    c24e:	743b      	strb	r3, [r7, #16]
	while (length) {
    c250:	e035      	b.n	c2be <n25q256a_write+0xde>
		cmd.address = address;
    c252:	687b      	ldr	r3, [r7, #4]
    c254:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c256:	683b      	ldr	r3, [r7, #0]
    c258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c25c:	d802      	bhi.n	c264 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c25e:	683b      	ldr	r3, [r7, #0]
    c260:	61fb      	str	r3, [r7, #28]
    c262:	e002      	b.n	c26a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c264:	f44f 7380 	mov.w	r3, #256	; 0x100
    c268:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c26a:	7c3b      	ldrb	r3, [r7, #16]
    c26c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c270:	b2db      	uxtb	r3, r3
    c272:	2201      	movs	r2, #1
    c274:	4619      	mov	r1, r3
    c276:	68f8      	ldr	r0, [r7, #12]
    c278:	4b19      	ldr	r3, [pc, #100]	; (c2e0 <n25q256a_write+0x100>)
    c27a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c27c:	f107 0310 	add.w	r3, r7, #16
    c280:	4619      	mov	r1, r3
    c282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c284:	4b17      	ldr	r3, [pc, #92]	; (c2e4 <n25q256a_write+0x104>)
    c286:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c288:	bf00      	nop
    c28a:	7c3b      	ldrb	r3, [r7, #16]
    c28c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c290:	b2db      	uxtb	r3, r3
    c292:	2270      	movs	r2, #112	; 0x70
    c294:	4619      	mov	r1, r3
    c296:	68f8      	ldr	r0, [r7, #12]
    c298:	4b13      	ldr	r3, [pc, #76]	; (c2e8 <n25q256a_write+0x108>)
    c29a:	4798      	blx	r3
    c29c:	4603      	mov	r3, r0
    c29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d0f1      	beq.n	c28a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c2a6:	6a3a      	ldr	r2, [r7, #32]
    c2a8:	69fb      	ldr	r3, [r7, #28]
    c2aa:	4413      	add	r3, r2
    c2ac:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c2ae:	69fb      	ldr	r3, [r7, #28]
    c2b0:	683a      	ldr	r2, [r7, #0]
    c2b2:	1ad3      	subs	r3, r2, r3
    c2b4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c2b6:	69fb      	ldr	r3, [r7, #28]
    c2b8:	687a      	ldr	r2, [r7, #4]
    c2ba:	4413      	add	r3, r2
    c2bc:	607b      	str	r3, [r7, #4]
	while (length) {
    c2be:	683b      	ldr	r3, [r7, #0]
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d1c6      	bne.n	c252 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2c6:	7b5b      	ldrb	r3, [r3, #13]
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	d003      	beq.n	c2d4 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c2cc:	2101      	movs	r1, #1
    c2ce:	68f8      	ldr	r0, [r7, #12]
    c2d0:	4b06      	ldr	r3, [pc, #24]	; (c2ec <n25q256a_write+0x10c>)
    c2d2:	4798      	blx	r3
	}
	return ERR_NONE;
    c2d4:	2300      	movs	r3, #0
}
    c2d6:	4618      	mov	r0, r3
    c2d8:	3730      	adds	r7, #48	; 0x30
    c2da:	46bd      	mov	sp, r7
    c2dc:	bd80      	pop	{r7, pc}
    c2de:	bf00      	nop
    c2e0:	0000bf51 	.word	0x0000bf51
    c2e4:	00002ac1 	.word	0x00002ac1
    c2e8:	0000be15 	.word	0x0000be15
    c2ec:	0000bd49 	.word	0x0000bd49

0000c2f0 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c2f0:	b580      	push	{r7, lr}
    c2f2:	b090      	sub	sp, #64	; 0x40
    c2f4:	af00      	add	r7, sp, #0
    c2f6:	60f8      	str	r0, [r7, #12]
    c2f8:	60b9      	str	r1, [r7, #8]
    c2fa:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c2fc:	68fb      	ldr	r3, [r7, #12]
    c2fe:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c300:	68fb      	ldr	r3, [r7, #12]
    c302:	681b      	ldr	r3, [r3, #0]
    c304:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c306:	f107 0314 	add.w	r3, r7, #20
    c30a:	2200      	movs	r2, #0
    c30c:	601a      	str	r2, [r3, #0]
    c30e:	605a      	str	r2, [r3, #4]
    c310:	609a      	str	r2, [r3, #8]
    c312:	60da      	str	r2, [r3, #12]
    c314:	611a      	str	r2, [r3, #16]
    c316:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c31a:	7b1b      	ldrb	r3, [r3, #12]
    c31c:	2b00      	cmp	r3, #0
    c31e:	d001      	beq.n	c324 <n25q256a_erase+0x34>
    c320:	2206      	movs	r2, #6
    c322:	e000      	b.n	c326 <n25q256a_erase+0x36>
    c324:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c326:	7d3b      	ldrb	r3, [r7, #20]
    c328:	f362 0302 	bfi	r3, r2, #0, #3
    c32c:	753b      	strb	r3, [r7, #20]
    c32e:	7d3b      	ldrb	r3, [r7, #20]
    c330:	f043 0310 	orr.w	r3, r3, #16
    c334:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c336:	687b      	ldr	r3, [r7, #4]
    c338:	4a56      	ldr	r2, [pc, #344]	; (c494 <n25q256a_erase+0x1a4>)
    c33a:	4293      	cmp	r3, r2
    c33c:	bf94      	ite	ls
    c33e:	2301      	movls	r3, #1
    c340:	2300      	movhi	r3, #0
    c342:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c344:	7d3b      	ldrb	r3, [r7, #20]
    c346:	f362 1345 	bfi	r3, r2, #5, #1
    c34a:	753b      	strb	r3, [r7, #20]
    c34c:	7d7b      	ldrb	r3, [r7, #21]
    c34e:	2202      	movs	r2, #2
    c350:	f362 1305 	bfi	r3, r2, #4, #2
    c354:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c356:	68bb      	ldr	r3, [r7, #8]
    c358:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c35a:	687b      	ldr	r3, [r7, #4]
    c35c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c35e:	2300      	movs	r3, #0
    c360:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c362:	687b      	ldr	r3, [r7, #4]
    c364:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c368:	2b00      	cmp	r3, #0
    c36a:	d104      	bne.n	c376 <n25q256a_erase+0x86>
    c36c:	68bb      	ldr	r3, [r7, #8]
    c36e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c372:	2b00      	cmp	r3, #0
    c374:	d002      	beq.n	c37c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c376:	f06f 030c 	mvn.w	r3, #12
    c37a:	e087      	b.n	c48c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c37c:	687b      	ldr	r3, [r7, #4]
    c37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c382:	d368      	bcc.n	c456 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c384:	23c7      	movs	r3, #199	; 0xc7
    c386:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c388:	7d3b      	ldrb	r3, [r7, #20]
    c38a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c38e:	b2db      	uxtb	r3, r3
    c390:	2201      	movs	r2, #1
    c392:	4619      	mov	r1, r3
    c394:	68f8      	ldr	r0, [r7, #12]
    c396:	4b40      	ldr	r3, [pc, #256]	; (c498 <n25q256a_erase+0x1a8>)
    c398:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c39a:	f107 0314 	add.w	r3, r7, #20
    c39e:	4619      	mov	r1, r3
    c3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3a2:	4b3e      	ldr	r3, [pc, #248]	; (c49c <n25q256a_erase+0x1ac>)
    c3a4:	4798      	blx	r3
    c3a6:	e059      	b.n	c45c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3aa:	b29b      	uxth	r3, r3
    c3ac:	2b00      	cmp	r3, #0
    c3ae:	d11f      	bne.n	c3f0 <n25q256a_erase+0x100>
    c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c3b6:	d31b      	bcc.n	c3f0 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3ba:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c3bc:	23d8      	movs	r3, #216	; 0xd8
    c3be:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c3c0:	7d3b      	ldrb	r3, [r7, #20]
    c3c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	2201      	movs	r2, #1
    c3ca:	4619      	mov	r1, r3
    c3cc:	68f8      	ldr	r0, [r7, #12]
    c3ce:	4b32      	ldr	r3, [pc, #200]	; (c498 <n25q256a_erase+0x1a8>)
    c3d0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c3d2:	f107 0314 	add.w	r3, r7, #20
    c3d6:	4619      	mov	r1, r3
    c3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3da:	4b30      	ldr	r3, [pc, #192]	; (c49c <n25q256a_erase+0x1ac>)
    c3dc:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3e8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c3ec:	63bb      	str	r3, [r7, #56]	; 0x38
    c3ee:	e023      	b.n	c438 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c3f6:	d31b      	bcc.n	c430 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c3fa:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c3fc:	2320      	movs	r3, #32
    c3fe:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c400:	7d3b      	ldrb	r3, [r7, #20]
    c402:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c406:	b2db      	uxtb	r3, r3
    c408:	2201      	movs	r2, #1
    c40a:	4619      	mov	r1, r3
    c40c:	68f8      	ldr	r0, [r7, #12]
    c40e:	4b22      	ldr	r3, [pc, #136]	; (c498 <n25q256a_erase+0x1a8>)
    c410:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c412:	f107 0314 	add.w	r3, r7, #20
    c416:	4619      	mov	r1, r3
    c418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c41a:	4b20      	ldr	r3, [pc, #128]	; (c49c <n25q256a_erase+0x1ac>)
    c41c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c424:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c428:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c42c:	63bb      	str	r3, [r7, #56]	; 0x38
    c42e:	e003      	b.n	c438 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c430:	f06f 030c 	mvn.w	r3, #12
    c434:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c436:	e011      	b.n	c45c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c438:	bf00      	nop
    c43a:	7d3b      	ldrb	r3, [r7, #20]
    c43c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c440:	b2db      	uxtb	r3, r3
    c442:	2270      	movs	r2, #112	; 0x70
    c444:	4619      	mov	r1, r3
    c446:	68f8      	ldr	r0, [r7, #12]
    c448:	4b15      	ldr	r3, [pc, #84]	; (c4a0 <n25q256a_erase+0x1b0>)
    c44a:	4798      	blx	r3
    c44c:	4603      	mov	r3, r0
    c44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c452:	2b00      	cmp	r3, #0
    c454:	d0f1      	beq.n	c43a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c458:	2b00      	cmp	r3, #0
    c45a:	d1a5      	bne.n	c3a8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c45c:	bf00      	nop
    c45e:	7d3b      	ldrb	r3, [r7, #20]
    c460:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c464:	b2db      	uxtb	r3, r3
    c466:	2270      	movs	r2, #112	; 0x70
    c468:	4619      	mov	r1, r3
    c46a:	68f8      	ldr	r0, [r7, #12]
    c46c:	4b0c      	ldr	r3, [pc, #48]	; (c4a0 <n25q256a_erase+0x1b0>)
    c46e:	4798      	blx	r3
    c470:	4603      	mov	r3, r0
    c472:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c476:	2b00      	cmp	r3, #0
    c478:	d0f1      	beq.n	c45e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c47c:	7b5b      	ldrb	r3, [r3, #13]
    c47e:	2b00      	cmp	r3, #0
    c480:	d003      	beq.n	c48a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c482:	2101      	movs	r1, #1
    c484:	68f8      	ldr	r0, [r7, #12]
    c486:	4b07      	ldr	r3, [pc, #28]	; (c4a4 <n25q256a_erase+0x1b4>)
    c488:	4798      	blx	r3
	}
	return rc;
    c48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c48c:	4618      	mov	r0, r3
    c48e:	3740      	adds	r7, #64	; 0x40
    c490:	46bd      	mov	sp, r7
    c492:	bd80      	pop	{r7, pc}
    c494:	001fffff 	.word	0x001fffff
    c498:	0000bf51 	.word	0x0000bf51
    c49c:	00002ac1 	.word	0x00002ac1
    c4a0:	0000be15 	.word	0x0000be15
    c4a4:	0000bd49 	.word	0x0000bd49

0000c4a8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c4a8:	b590      	push	{r4, r7, lr}
    c4aa:	b085      	sub	sp, #20
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c4b0:	687b      	ldr	r3, [r7, #4]
    c4b2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c4b4:	68fb      	ldr	r3, [r7, #12]
    c4b6:	7b1b      	ldrb	r3, [r3, #12]
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d001      	beq.n	c4c0 <n25q256a_enable_xip+0x18>
    c4bc:	2306      	movs	r3, #6
    c4be:	e000      	b.n	c4c2 <n25q256a_enable_xip+0x1a>
    c4c0:	2300      	movs	r3, #0
    c4c2:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c4c4:	68fb      	ldr	r3, [r7, #12]
    c4c6:	7b5b      	ldrb	r3, [r3, #13]
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d129      	bne.n	c520 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c4cc:	7afb      	ldrb	r3, [r7, #11]
    c4ce:	2285      	movs	r2, #133	; 0x85
    c4d0:	4619      	mov	r1, r3
    c4d2:	6878      	ldr	r0, [r7, #4]
    c4d4:	4b15      	ldr	r3, [pc, #84]	; (c52c <n25q256a_enable_xip+0x84>)
    c4d6:	4798      	blx	r3
    c4d8:	4603      	mov	r3, r0
    c4da:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c4dc:	7abb      	ldrb	r3, [r7, #10]
    c4de:	f003 0308 	and.w	r3, r3, #8
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d015      	beq.n	c512 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c4e6:	7abb      	ldrb	r3, [r7, #10]
    c4e8:	f023 0308 	bic.w	r3, r3, #8
    c4ec:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c4ee:	7abb      	ldrb	r3, [r7, #10]
    c4f0:	7af9      	ldrb	r1, [r7, #11]
    c4f2:	2281      	movs	r2, #129	; 0x81
    c4f4:	6878      	ldr	r0, [r7, #4]
    c4f6:	4c0e      	ldr	r4, [pc, #56]	; (c530 <n25q256a_enable_xip+0x88>)
    c4f8:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c4fa:	bf00      	nop
    c4fc:	7afb      	ldrb	r3, [r7, #11]
    c4fe:	2270      	movs	r2, #112	; 0x70
    c500:	4619      	mov	r1, r3
    c502:	6878      	ldr	r0, [r7, #4]
    c504:	4b09      	ldr	r3, [pc, #36]	; (c52c <n25q256a_enable_xip+0x84>)
    c506:	4798      	blx	r3
    c508:	4603      	mov	r3, r0
    c50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c50e:	2b00      	cmp	r3, #0
    c510:	d0f4      	beq.n	c4fc <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c512:	68fb      	ldr	r3, [r7, #12]
    c514:	2201      	movs	r2, #1
    c516:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c518:	2101      	movs	r1, #1
    c51a:	6878      	ldr	r0, [r7, #4]
    c51c:	4b05      	ldr	r3, [pc, #20]	; (c534 <n25q256a_enable_xip+0x8c>)
    c51e:	4798      	blx	r3
	}
	return ERR_NONE;
    c520:	2300      	movs	r3, #0
}
    c522:	4618      	mov	r0, r3
    c524:	3714      	adds	r7, #20
    c526:	46bd      	mov	sp, r7
    c528:	bd90      	pop	{r4, r7, pc}
    c52a:	bf00      	nop
    c52c:	0000be15 	.word	0x0000be15
    c530:	0000beb1 	.word	0x0000beb1
    c534:	0000bd49 	.word	0x0000bd49

0000c538 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c538:	b580      	push	{r7, lr}
    c53a:	b086      	sub	sp, #24
    c53c:	af00      	add	r7, sp, #0
    c53e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c540:	687b      	ldr	r3, [r7, #4]
    c542:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c544:	687b      	ldr	r3, [r7, #4]
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c54a:	697b      	ldr	r3, [r7, #20]
    c54c:	7b1b      	ldrb	r3, [r3, #12]
    c54e:	2b00      	cmp	r3, #0
    c550:	d001      	beq.n	c556 <n25q256a_disable_xip+0x1e>
    c552:	2306      	movs	r3, #6
    c554:	e000      	b.n	c558 <n25q256a_disable_xip+0x20>
    c556:	2300      	movs	r3, #0
    c558:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c55a:	2100      	movs	r1, #0
    c55c:	6878      	ldr	r0, [r7, #4]
    c55e:	4b15      	ldr	r3, [pc, #84]	; (c5b4 <n25q256a_disable_xip+0x7c>)
    c560:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c562:	7bfb      	ldrb	r3, [r7, #15]
    c564:	2285      	movs	r2, #133	; 0x85
    c566:	4619      	mov	r1, r3
    c568:	6878      	ldr	r0, [r7, #4]
    c56a:	4b13      	ldr	r3, [pc, #76]	; (c5b8 <n25q256a_disable_xip+0x80>)
    c56c:	4798      	blx	r3
    c56e:	4603      	mov	r3, r0
    c570:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c572:	7bbb      	ldrb	r3, [r7, #14]
    c574:	f003 0308 	and.w	r3, r3, #8
    c578:	2b00      	cmp	r3, #0
    c57a:	d113      	bne.n	c5a4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c57c:	697b      	ldr	r3, [r7, #20]
    c57e:	689b      	ldr	r3, [r3, #8]
    c580:	2b00      	cmp	r3, #0
    c582:	d00f      	beq.n	c5a4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c584:	693b      	ldr	r3, [r7, #16]
    c586:	681b      	ldr	r3, [r3, #0]
    c588:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c58a:	6938      	ldr	r0, [r7, #16]
    c58c:	4b0b      	ldr	r3, [pc, #44]	; (c5bc <n25q256a_disable_xip+0x84>)
    c58e:	4798      	blx	r3
			n25q->pin_exit_xip();
    c590:	697b      	ldr	r3, [r7, #20]
    c592:	689b      	ldr	r3, [r3, #8]
    c594:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c596:	68b9      	ldr	r1, [r7, #8]
    c598:	6938      	ldr	r0, [r7, #16]
    c59a:	4b09      	ldr	r3, [pc, #36]	; (c5c0 <n25q256a_disable_xip+0x88>)
    c59c:	4798      	blx	r3
			qspi_sync_enable(descr);
    c59e:	6938      	ldr	r0, [r7, #16]
    c5a0:	4b08      	ldr	r3, [pc, #32]	; (c5c4 <n25q256a_disable_xip+0x8c>)
    c5a2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c5a4:	697b      	ldr	r3, [r7, #20]
    c5a6:	2200      	movs	r2, #0
    c5a8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c5aa:	2300      	movs	r3, #0
}
    c5ac:	4618      	mov	r0, r3
    c5ae:	3718      	adds	r7, #24
    c5b0:	46bd      	mov	sp, r7
    c5b2:	bd80      	pop	{r7, pc}
    c5b4:	0000bd49 	.word	0x0000bd49
    c5b8:	0000be15 	.word	0x0000be15
    c5bc:	00002a85 	.word	0x00002a85
    c5c0:	000029fd 	.word	0x000029fd
    c5c4:	00002a49 	.word	0x00002a49

0000c5c8 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c5c8:	b480      	push	{r7}
    c5ca:	b085      	sub	sp, #20
    c5cc:	af00      	add	r7, sp, #0
    c5ce:	60f8      	str	r0, [r7, #12]
    c5d0:	60b9      	str	r1, [r7, #8]
    c5d2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c5d4:	68fb      	ldr	r3, [r7, #12]
    c5d6:	68ba      	ldr	r2, [r7, #8]
    c5d8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c5da:	68fb      	ldr	r3, [r7, #12]
    c5dc:	687a      	ldr	r2, [r7, #4]
    c5de:	605a      	str	r2, [r3, #4]

	return me;
    c5e0:	68fb      	ldr	r3, [r7, #12]
}
    c5e2:	4618      	mov	r0, r3
    c5e4:	3714      	adds	r7, #20
    c5e6:	46bd      	mov	sp, r7
    c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5ec:	4770      	bx	lr

0000c5ee <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c5ee:	b480      	push	{r7}
    c5f0:	b083      	sub	sp, #12
    c5f2:	af00      	add	r7, sp, #0
    c5f4:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c5f6:	687b      	ldr	r3, [r7, #4]
    c5f8:	781b      	ldrb	r3, [r3, #0]
    c5fa:	b29a      	uxth	r2, r3
    c5fc:	687b      	ldr	r3, [r7, #4]
    c5fe:	3301      	adds	r3, #1
    c600:	781b      	ldrb	r3, [r3, #0]
    c602:	b29b      	uxth	r3, r3
    c604:	021b      	lsls	r3, r3, #8
    c606:	b29b      	uxth	r3, r3
    c608:	4413      	add	r3, r2
    c60a:	b29b      	uxth	r3, r3
}
    c60c:	4618      	mov	r0, r3
    c60e:	370c      	adds	r7, #12
    c610:	46bd      	mov	sp, r7
    c612:	f85d 7b04 	ldr.w	r7, [sp], #4
    c616:	4770      	bx	lr

0000c618 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c618:	b480      	push	{r7}
    c61a:	b083      	sub	sp, #12
    c61c:	af00      	add	r7, sp, #0
    c61e:	6078      	str	r0, [r7, #4]
	return desc[0];
    c620:	687b      	ldr	r3, [r7, #4]
    c622:	781b      	ldrb	r3, [r3, #0]
}
    c624:	4618      	mov	r0, r3
    c626:	370c      	adds	r7, #12
    c628:	46bd      	mov	sp, r7
    c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c62e:	4770      	bx	lr

0000c630 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c630:	b580      	push	{r7, lr}
    c632:	b082      	sub	sp, #8
    c634:	af00      	add	r7, sp, #0
    c636:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c638:	6878      	ldr	r0, [r7, #4]
    c63a:	4b05      	ldr	r3, [pc, #20]	; (c650 <usb_desc_next+0x20>)
    c63c:	4798      	blx	r3
    c63e:	4603      	mov	r3, r0
    c640:	461a      	mov	r2, r3
    c642:	687b      	ldr	r3, [r7, #4]
    c644:	4413      	add	r3, r2
}
    c646:	4618      	mov	r0, r3
    c648:	3708      	adds	r7, #8
    c64a:	46bd      	mov	sp, r7
    c64c:	bd80      	pop	{r7, pc}
    c64e:	bf00      	nop
    c650:	0000c619 	.word	0x0000c619

0000c654 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c654:	b580      	push	{r7, lr}
    c656:	b08c      	sub	sp, #48	; 0x30
    c658:	af00      	add	r7, sp, #0
    c65a:	6078      	str	r0, [r7, #4]
    c65c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c65e:	687b      	ldr	r3, [r7, #4]
    c660:	689b      	ldr	r3, [r3, #8]
    c662:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c664:	683b      	ldr	r3, [r7, #0]
    c666:	681b      	ldr	r3, [r3, #0]
    c668:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c66a:	2300      	movs	r3, #0
    c66c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c670:	e08f      	b.n	c792 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c674:	2b00      	cmp	r3, #0
    c676:	d102      	bne.n	c67e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c678:	f06f 0309 	mvn.w	r3, #9
    c67c:	e092      	b.n	c7a4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c680:	789b      	ldrb	r3, [r3, #2]
    c682:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c686:	795b      	ldrb	r3, [r3, #5]
    c688:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c68a:	7c7b      	ldrb	r3, [r7, #17]
    c68c:	2b02      	cmp	r3, #2
    c68e:	d002      	beq.n	c696 <cdcdf_acm_enable+0x42>
    c690:	7c7b      	ldrb	r3, [r7, #17]
    c692:	2b0a      	cmp	r3, #10
    c694:	d121      	bne.n	c6da <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c69a:	6a3a      	ldr	r2, [r7, #32]
    c69c:	5cd2      	ldrb	r2, [r2, r3]
    c69e:	7bbb      	ldrb	r3, [r7, #14]
    c6a0:	429a      	cmp	r2, r3
    c6a2:	d102      	bne.n	c6aa <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c6a4:	f06f 0311 	mvn.w	r3, #17
    c6a8:	e07c      	b.n	c7a4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6ae:	6a3a      	ldr	r2, [r7, #32]
    c6b0:	5cd3      	ldrb	r3, [r2, r3]
    c6b2:	2bff      	cmp	r3, #255	; 0xff
    c6b4:	d002      	beq.n	c6bc <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c6b6:	f06f 031b 	mvn.w	r3, #27
    c6ba:	e073      	b.n	c7a4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6c0:	7bb9      	ldrb	r1, [r7, #14]
    c6c2:	6a3a      	ldr	r2, [r7, #32]
    c6c4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c6c6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c6c8:	683b      	ldr	r3, [r7, #0]
    c6ca:	685b      	ldr	r3, [r3, #4]
    c6cc:	2205      	movs	r2, #5
    c6ce:	4619      	mov	r1, r3
    c6d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c6d2:	4b36      	ldr	r3, [pc, #216]	; (c7ac <cdcdf_acm_enable+0x158>)
    c6d4:	4798      	blx	r3
    c6d6:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c6d8:	e047      	b.n	c76a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c6da:	f06f 0309 	mvn.w	r3, #9
    c6de:	e061      	b.n	c7a4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6e2:	789b      	ldrb	r3, [r3, #2]
    c6e4:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6e8:	78db      	ldrb	r3, [r3, #3]
    c6ea:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6ee:	3304      	adds	r3, #4
    c6f0:	4618      	mov	r0, r3
    c6f2:	4b2f      	ldr	r3, [pc, #188]	; (c7b0 <cdcdf_acm_enable+0x15c>)
    c6f4:	4798      	blx	r3
    c6f6:	4603      	mov	r3, r0
    c6f8:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c6fa:	7ebb      	ldrb	r3, [r7, #26]
    c6fc:	7ef9      	ldrb	r1, [r7, #27]
    c6fe:	8bba      	ldrh	r2, [r7, #28]
    c700:	4618      	mov	r0, r3
    c702:	4b2c      	ldr	r3, [pc, #176]	; (c7b4 <cdcdf_acm_enable+0x160>)
    c704:	4798      	blx	r3
    c706:	4603      	mov	r3, r0
    c708:	2b00      	cmp	r3, #0
    c70a:	d002      	beq.n	c712 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c70c:	f06f 0313 	mvn.w	r3, #19
    c710:	e048      	b.n	c7a4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c712:	7ebb      	ldrb	r3, [r7, #26]
    c714:	b25b      	sxtb	r3, r3
    c716:	2b00      	cmp	r3, #0
    c718:	da0f      	bge.n	c73a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c71e:	7eb9      	ldrb	r1, [r7, #26]
    c720:	6a3a      	ldr	r2, [r7, #32]
    c722:	4413      	add	r3, r2
    c724:	460a      	mov	r2, r1
    c726:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c72c:	6a3a      	ldr	r2, [r7, #32]
    c72e:	4413      	add	r3, r2
    c730:	789b      	ldrb	r3, [r3, #2]
    c732:	4618      	mov	r0, r3
    c734:	4b20      	ldr	r3, [pc, #128]	; (c7b8 <cdcdf_acm_enable+0x164>)
    c736:	4798      	blx	r3
    c738:	e007      	b.n	c74a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c73a:	7eba      	ldrb	r2, [r7, #26]
    c73c:	6a3b      	ldr	r3, [r7, #32]
    c73e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c740:	6a3b      	ldr	r3, [r7, #32]
    c742:	791b      	ldrb	r3, [r3, #4]
    c744:	4618      	mov	r0, r3
    c746:	4b1c      	ldr	r3, [pc, #112]	; (c7b8 <cdcdf_acm_enable+0x164>)
    c748:	4798      	blx	r3
			}
			desc->sod = ep;
    c74a:	683b      	ldr	r3, [r7, #0]
    c74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c74e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c750:	683b      	ldr	r3, [r7, #0]
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	4618      	mov	r0, r3
    c756:	4b19      	ldr	r3, [pc, #100]	; (c7bc <cdcdf_acm_enable+0x168>)
    c758:	4798      	blx	r3
    c75a:	4602      	mov	r2, r0
    c75c:	683b      	ldr	r3, [r7, #0]
    c75e:	685b      	ldr	r3, [r3, #4]
    c760:	4619      	mov	r1, r3
    c762:	4610      	mov	r0, r2
    c764:	4b16      	ldr	r3, [pc, #88]	; (c7c0 <cdcdf_acm_enable+0x16c>)
    c766:	4798      	blx	r3
    c768:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c76c:	2b00      	cmp	r3, #0
    c76e:	d1b7      	bne.n	c6e0 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c770:	683b      	ldr	r3, [r7, #0]
    c772:	681b      	ldr	r3, [r3, #0]
    c774:	4618      	mov	r0, r3
    c776:	4b11      	ldr	r3, [pc, #68]	; (c7bc <cdcdf_acm_enable+0x168>)
    c778:	4798      	blx	r3
    c77a:	683b      	ldr	r3, [r7, #0]
    c77c:	685b      	ldr	r3, [r3, #4]
    c77e:	2204      	movs	r2, #4
    c780:	4619      	mov	r1, r3
    c782:	4b0a      	ldr	r3, [pc, #40]	; (c7ac <cdcdf_acm_enable+0x158>)
    c784:	4798      	blx	r3
    c786:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c78c:	3301      	adds	r3, #1
    c78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c796:	2b01      	cmp	r3, #1
    c798:	f67f af6b 	bls.w	c672 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c79c:	4b09      	ldr	r3, [pc, #36]	; (c7c4 <cdcdf_acm_enable+0x170>)
    c79e:	2201      	movs	r2, #1
    c7a0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c7a2:	2300      	movs	r3, #0
}
    c7a4:	4618      	mov	r0, r3
    c7a6:	3730      	adds	r7, #48	; 0x30
    c7a8:	46bd      	mov	sp, r7
    c7aa:	bd80      	pop	{r7, pc}
    c7ac:	0000da15 	.word	0x0000da15
    c7b0:	0000c5ef 	.word	0x0000c5ef
    c7b4:	00003735 	.word	0x00003735
    c7b8:	00003821 	.word	0x00003821
    c7bc:	0000c631 	.word	0x0000c631
    c7c0:	0000da71 	.word	0x0000da71
    c7c4:	20000ee8 	.word	0x20000ee8

0000c7c8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b088      	sub	sp, #32
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	6078      	str	r0, [r7, #4]
    c7d0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c7d2:	687b      	ldr	r3, [r7, #4]
    c7d4:	689b      	ldr	r3, [r3, #8]
    c7d6:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c7d8:	683b      	ldr	r3, [r7, #0]
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d00c      	beq.n	c7f8 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c7de:	683b      	ldr	r3, [r7, #0]
    c7e0:	681b      	ldr	r3, [r3, #0]
    c7e2:	795b      	ldrb	r3, [r3, #5]
    c7e4:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c7e6:	7c7b      	ldrb	r3, [r7, #17]
    c7e8:	2b02      	cmp	r3, #2
    c7ea:	d005      	beq.n	c7f8 <cdcdf_acm_disable+0x30>
    c7ec:	7c7b      	ldrb	r3, [r7, #17]
    c7ee:	2b0a      	cmp	r3, #10
    c7f0:	d002      	beq.n	c7f8 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c7f2:	f06f 0309 	mvn.w	r3, #9
    c7f6:	e035      	b.n	c864 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c7f8:	2300      	movs	r3, #0
    c7fa:	77fb      	strb	r3, [r7, #31]
    c7fc:	e01f      	b.n	c83e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c7fe:	7ffb      	ldrb	r3, [r7, #31]
    c800:	69ba      	ldr	r2, [r7, #24]
    c802:	5cd3      	ldrb	r3, [r2, r3]
    c804:	2bff      	cmp	r3, #255	; 0xff
    c806:	d016      	beq.n	c836 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c808:	7ffb      	ldrb	r3, [r7, #31]
    c80a:	69ba      	ldr	r2, [r7, #24]
    c80c:	21ff      	movs	r1, #255	; 0xff
    c80e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c810:	7ffb      	ldrb	r3, [r7, #31]
    c812:	69ba      	ldr	r2, [r7, #24]
    c814:	4413      	add	r3, r2
    c816:	789b      	ldrb	r3, [r3, #2]
    c818:	2bff      	cmp	r3, #255	; 0xff
    c81a:	d00d      	beq.n	c838 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c81c:	7ffb      	ldrb	r3, [r7, #31]
    c81e:	69ba      	ldr	r2, [r7, #24]
    c820:	4413      	add	r3, r2
    c822:	789b      	ldrb	r3, [r3, #2]
    c824:	4618      	mov	r0, r3
    c826:	4b11      	ldr	r3, [pc, #68]	; (c86c <cdcdf_acm_disable+0xa4>)
    c828:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c82a:	7ffb      	ldrb	r3, [r7, #31]
    c82c:	69ba      	ldr	r2, [r7, #24]
    c82e:	4413      	add	r3, r2
    c830:	22ff      	movs	r2, #255	; 0xff
    c832:	709a      	strb	r2, [r3, #2]
    c834:	e000      	b.n	c838 <cdcdf_acm_disable+0x70>
			continue;
    c836:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c838:	7ffb      	ldrb	r3, [r7, #31]
    c83a:	3301      	adds	r3, #1
    c83c:	77fb      	strb	r3, [r7, #31]
    c83e:	7ffb      	ldrb	r3, [r7, #31]
    c840:	2b01      	cmp	r3, #1
    c842:	d9dc      	bls.n	c7fe <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c844:	69bb      	ldr	r3, [r7, #24]
    c846:	791b      	ldrb	r3, [r3, #4]
    c848:	2bff      	cmp	r3, #255	; 0xff
    c84a:	d007      	beq.n	c85c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c84c:	69bb      	ldr	r3, [r7, #24]
    c84e:	791b      	ldrb	r3, [r3, #4]
    c850:	4618      	mov	r0, r3
    c852:	4b06      	ldr	r3, [pc, #24]	; (c86c <cdcdf_acm_disable+0xa4>)
    c854:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c856:	69bb      	ldr	r3, [r7, #24]
    c858:	22ff      	movs	r2, #255	; 0xff
    c85a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c85c:	4b04      	ldr	r3, [pc, #16]	; (c870 <cdcdf_acm_disable+0xa8>)
    c85e:	2200      	movs	r2, #0
    c860:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c862:	2300      	movs	r3, #0
}
    c864:	4618      	mov	r0, r3
    c866:	3720      	adds	r7, #32
    c868:	46bd      	mov	sp, r7
    c86a:	bd80      	pop	{r7, pc}
    c86c:	000037d1 	.word	0x000037d1
    c870:	20000ee8 	.word	0x20000ee8

0000c874 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c874:	b580      	push	{r7, lr}
    c876:	b084      	sub	sp, #16
    c878:	af00      	add	r7, sp, #0
    c87a:	60f8      	str	r0, [r7, #12]
    c87c:	460b      	mov	r3, r1
    c87e:	607a      	str	r2, [r7, #4]
    c880:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c882:	7afb      	ldrb	r3, [r7, #11]
    c884:	2b01      	cmp	r3, #1
    c886:	d009      	beq.n	c89c <cdcdf_acm_ctrl+0x28>
    c888:	2b02      	cmp	r3, #2
    c88a:	d00d      	beq.n	c8a8 <cdcdf_acm_ctrl+0x34>
    c88c:	2b00      	cmp	r3, #0
    c88e:	d10e      	bne.n	c8ae <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c890:	6879      	ldr	r1, [r7, #4]
    c892:	68f8      	ldr	r0, [r7, #12]
    c894:	4b09      	ldr	r3, [pc, #36]	; (c8bc <cdcdf_acm_ctrl+0x48>)
    c896:	4798      	blx	r3
    c898:	4603      	mov	r3, r0
    c89a:	e00a      	b.n	c8b2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c89c:	6879      	ldr	r1, [r7, #4]
    c89e:	68f8      	ldr	r0, [r7, #12]
    c8a0:	4b07      	ldr	r3, [pc, #28]	; (c8c0 <cdcdf_acm_ctrl+0x4c>)
    c8a2:	4798      	blx	r3
    c8a4:	4603      	mov	r3, r0
    c8a6:	e004      	b.n	c8b2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c8a8:	f06f 031a 	mvn.w	r3, #26
    c8ac:	e001      	b.n	c8b2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c8ae:	f06f 030c 	mvn.w	r3, #12
	}
}
    c8b2:	4618      	mov	r0, r3
    c8b4:	3710      	adds	r7, #16
    c8b6:	46bd      	mov	sp, r7
    c8b8:	bd80      	pop	{r7, pc}
    c8ba:	bf00      	nop
    c8bc:	0000c655 	.word	0x0000c655
    c8c0:	0000c7c9 	.word	0x0000c7c9

0000c8c4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c8c4:	b590      	push	{r4, r7, lr}
    c8c6:	b087      	sub	sp, #28
    c8c8:	af00      	add	r7, sp, #0
    c8ca:	4603      	mov	r3, r0
    c8cc:	6039      	str	r1, [r7, #0]
    c8ce:	71fb      	strb	r3, [r7, #7]
    c8d0:	4613      	mov	r3, r2
    c8d2:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c8d4:	683b      	ldr	r3, [r7, #0]
    c8d6:	799a      	ldrb	r2, [r3, #6]
    c8d8:	79db      	ldrb	r3, [r3, #7]
    c8da:	021b      	lsls	r3, r3, #8
    c8dc:	4313      	orrs	r3, r2
    c8de:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c8e0:	4b2b      	ldr	r3, [pc, #172]	; (c990 <cdcdf_acm_set_req+0xcc>)
    c8e2:	4798      	blx	r3
    c8e4:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c8e6:	683b      	ldr	r3, [r7, #0]
    c8e8:	785b      	ldrb	r3, [r3, #1]
    c8ea:	2b20      	cmp	r3, #32
    c8ec:	d002      	beq.n	c8f4 <cdcdf_acm_set_req+0x30>
    c8ee:	2b22      	cmp	r3, #34	; 0x22
    c8f0:	d034      	beq.n	c95c <cdcdf_acm_set_req+0x98>
    c8f2:	e046      	b.n	c982 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c8f4:	8afb      	ldrh	r3, [r7, #22]
    c8f6:	2b07      	cmp	r3, #7
    c8f8:	d002      	beq.n	c900 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c8fa:	f04f 33ff 	mov.w	r3, #4294967295
    c8fe:	e042      	b.n	c986 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c900:	79bb      	ldrb	r3, [r7, #6]
    c902:	2b00      	cmp	r3, #0
    c904:	d107      	bne.n	c916 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c906:	8afa      	ldrh	r2, [r7, #22]
    c908:	79f8      	ldrb	r0, [r7, #7]
    c90a:	2300      	movs	r3, #0
    c90c:	6939      	ldr	r1, [r7, #16]
    c90e:	4c21      	ldr	r4, [pc, #132]	; (c994 <cdcdf_acm_set_req+0xd0>)
    c910:	47a0      	blx	r4
    c912:	4603      	mov	r3, r0
    c914:	e037      	b.n	c986 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c916:	693a      	ldr	r2, [r7, #16]
    c918:	f107 0308 	add.w	r3, r7, #8
    c91c:	6810      	ldr	r0, [r2, #0]
    c91e:	6018      	str	r0, [r3, #0]
    c920:	8891      	ldrh	r1, [r2, #4]
    c922:	7992      	ldrb	r2, [r2, #6]
    c924:	8099      	strh	r1, [r3, #4]
    c926:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c928:	4b1b      	ldr	r3, [pc, #108]	; (c998 <cdcdf_acm_set_req+0xd4>)
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	2b00      	cmp	r3, #0
    c92e:	d008      	beq.n	c942 <cdcdf_acm_set_req+0x7e>
    c930:	4b19      	ldr	r3, [pc, #100]	; (c998 <cdcdf_acm_set_req+0xd4>)
    c932:	681b      	ldr	r3, [r3, #0]
    c934:	f107 0208 	add.w	r2, r7, #8
    c938:	4610      	mov	r0, r2
    c93a:	4798      	blx	r3
    c93c:	4603      	mov	r3, r0
    c93e:	2b00      	cmp	r3, #0
    c940:	d00a      	beq.n	c958 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c942:	4b16      	ldr	r3, [pc, #88]	; (c99c <cdcdf_acm_set_req+0xd8>)
    c944:	f107 0208 	add.w	r2, r7, #8
    c948:	e892 0003 	ldmia.w	r2, {r0, r1}
    c94c:	6018      	str	r0, [r3, #0]
    c94e:	3304      	adds	r3, #4
    c950:	8019      	strh	r1, [r3, #0]
    c952:	3302      	adds	r3, #2
    c954:	0c0a      	lsrs	r2, r1, #16
    c956:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c958:	2300      	movs	r3, #0
    c95a:	e014      	b.n	c986 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c95c:	2300      	movs	r3, #0
    c95e:	2200      	movs	r2, #0
    c960:	2100      	movs	r1, #0
    c962:	2000      	movs	r0, #0
    c964:	4c0b      	ldr	r4, [pc, #44]	; (c994 <cdcdf_acm_set_req+0xd0>)
    c966:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c968:	4b0d      	ldr	r3, [pc, #52]	; (c9a0 <cdcdf_acm_set_req+0xdc>)
    c96a:	681b      	ldr	r3, [r3, #0]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d006      	beq.n	c97e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c970:	4b0b      	ldr	r3, [pc, #44]	; (c9a0 <cdcdf_acm_set_req+0xdc>)
    c972:	681b      	ldr	r3, [r3, #0]
    c974:	683a      	ldr	r2, [r7, #0]
    c976:	8852      	ldrh	r2, [r2, #2]
    c978:	b292      	uxth	r2, r2
    c97a:	4610      	mov	r0, r2
    c97c:	4798      	blx	r3
		}
		return ERR_NONE;
    c97e:	2300      	movs	r3, #0
    c980:	e001      	b.n	c986 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c982:	f06f 030c 	mvn.w	r3, #12
	}
}
    c986:	4618      	mov	r0, r3
    c988:	371c      	adds	r7, #28
    c98a:	46bd      	mov	sp, r7
    c98c:	bd90      	pop	{r4, r7, pc}
    c98e:	bf00      	nop
    c990:	0000d911 	.word	0x0000d911
    c994:	0000d785 	.word	0x0000d785
    c998:	20000efc 	.word	0x20000efc
    c99c:	20000ef0 	.word	0x20000ef0
    c9a0:	20000ef8 	.word	0x20000ef8

0000c9a4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c9a4:	b590      	push	{r4, r7, lr}
    c9a6:	b085      	sub	sp, #20
    c9a8:	af00      	add	r7, sp, #0
    c9aa:	4603      	mov	r3, r0
    c9ac:	6039      	str	r1, [r7, #0]
    c9ae:	71fb      	strb	r3, [r7, #7]
    c9b0:	4613      	mov	r3, r2
    c9b2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c9b4:	683b      	ldr	r3, [r7, #0]
    c9b6:	799a      	ldrb	r2, [r3, #6]
    c9b8:	79db      	ldrb	r3, [r3, #7]
    c9ba:	021b      	lsls	r3, r3, #8
    c9bc:	4313      	orrs	r3, r2
    c9be:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c9c0:	79bb      	ldrb	r3, [r7, #6]
    c9c2:	2b01      	cmp	r3, #1
    c9c4:	d101      	bne.n	c9ca <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c9c6:	2300      	movs	r3, #0
    c9c8:	e013      	b.n	c9f2 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c9ca:	683b      	ldr	r3, [r7, #0]
    c9cc:	785b      	ldrb	r3, [r3, #1]
    c9ce:	2b21      	cmp	r3, #33	; 0x21
    c9d0:	d10d      	bne.n	c9ee <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c9d2:	89fb      	ldrh	r3, [r7, #14]
    c9d4:	2b07      	cmp	r3, #7
    c9d6:	d002      	beq.n	c9de <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c9d8:	f04f 33ff 	mov.w	r3, #4294967295
    c9dc:	e009      	b.n	c9f2 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c9de:	89fa      	ldrh	r2, [r7, #14]
    c9e0:	79f8      	ldrb	r0, [r7, #7]
    c9e2:	2300      	movs	r3, #0
    c9e4:	4905      	ldr	r1, [pc, #20]	; (c9fc <cdcdf_acm_get_req+0x58>)
    c9e6:	4c06      	ldr	r4, [pc, #24]	; (ca00 <cdcdf_acm_get_req+0x5c>)
    c9e8:	47a0      	blx	r4
    c9ea:	4603      	mov	r3, r0
    c9ec:	e001      	b.n	c9f2 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c9ee:	f06f 030c 	mvn.w	r3, #12
	}
}
    c9f2:	4618      	mov	r0, r3
    c9f4:	3714      	adds	r7, #20
    c9f6:	46bd      	mov	sp, r7
    c9f8:	bd90      	pop	{r4, r7, pc}
    c9fa:	bf00      	nop
    c9fc:	20000ef0 	.word	0x20000ef0
    ca00:	0000d785 	.word	0x0000d785

0000ca04 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ca04:	b580      	push	{r7, lr}
    ca06:	b082      	sub	sp, #8
    ca08:	af00      	add	r7, sp, #0
    ca0a:	4603      	mov	r3, r0
    ca0c:	6039      	str	r1, [r7, #0]
    ca0e:	71fb      	strb	r3, [r7, #7]
    ca10:	4613      	mov	r3, r2
    ca12:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ca14:	683b      	ldr	r3, [r7, #0]
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	095b      	lsrs	r3, r3, #5
    ca1a:	b2db      	uxtb	r3, r3
    ca1c:	f003 0303 	and.w	r3, r3, #3
    ca20:	2b01      	cmp	r3, #1
    ca22:	d002      	beq.n	ca2a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ca24:	f06f 0309 	mvn.w	r3, #9
    ca28:	e026      	b.n	ca78 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ca2a:	683b      	ldr	r3, [r7, #0]
    ca2c:	889b      	ldrh	r3, [r3, #4]
    ca2e:	b29a      	uxth	r2, r3
    ca30:	4b13      	ldr	r3, [pc, #76]	; (ca80 <cdcdf_acm_req+0x7c>)
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	b29b      	uxth	r3, r3
    ca36:	429a      	cmp	r2, r3
    ca38:	d007      	beq.n	ca4a <cdcdf_acm_req+0x46>
    ca3a:	683b      	ldr	r3, [r7, #0]
    ca3c:	889b      	ldrh	r3, [r3, #4]
    ca3e:	b29a      	uxth	r2, r3
    ca40:	4b0f      	ldr	r3, [pc, #60]	; (ca80 <cdcdf_acm_req+0x7c>)
    ca42:	785b      	ldrb	r3, [r3, #1]
    ca44:	b29b      	uxth	r3, r3
    ca46:	429a      	cmp	r2, r3
    ca48:	d114      	bne.n	ca74 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ca4a:	683b      	ldr	r3, [r7, #0]
    ca4c:	781b      	ldrb	r3, [r3, #0]
    ca4e:	b25b      	sxtb	r3, r3
    ca50:	2b00      	cmp	r3, #0
    ca52:	da07      	bge.n	ca64 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    ca54:	79ba      	ldrb	r2, [r7, #6]
    ca56:	79fb      	ldrb	r3, [r7, #7]
    ca58:	6839      	ldr	r1, [r7, #0]
    ca5a:	4618      	mov	r0, r3
    ca5c:	4b09      	ldr	r3, [pc, #36]	; (ca84 <cdcdf_acm_req+0x80>)
    ca5e:	4798      	blx	r3
    ca60:	4603      	mov	r3, r0
    ca62:	e009      	b.n	ca78 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    ca64:	79ba      	ldrb	r2, [r7, #6]
    ca66:	79fb      	ldrb	r3, [r7, #7]
    ca68:	6839      	ldr	r1, [r7, #0]
    ca6a:	4618      	mov	r0, r3
    ca6c:	4b06      	ldr	r3, [pc, #24]	; (ca88 <cdcdf_acm_req+0x84>)
    ca6e:	4798      	blx	r3
    ca70:	4603      	mov	r3, r0
    ca72:	e001      	b.n	ca78 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    ca74:	f06f 0309 	mvn.w	r3, #9
	}
}
    ca78:	4618      	mov	r0, r3
    ca7a:	3708      	adds	r7, #8
    ca7c:	46bd      	mov	sp, r7
    ca7e:	bd80      	pop	{r7, pc}
    ca80:	20000ee8 	.word	0x20000ee8
    ca84:	0000c9a5 	.word	0x0000c9a5
    ca88:	0000c8c5 	.word	0x0000c8c5

0000ca8c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ca8c:	b580      	push	{r7, lr}
    ca8e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    ca90:	4b0b      	ldr	r3, [pc, #44]	; (cac0 <cdcdf_acm_init+0x34>)
    ca92:	4798      	blx	r3
    ca94:	4603      	mov	r3, r0
    ca96:	2b01      	cmp	r3, #1
    ca98:	d902      	bls.n	caa0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    ca9a:	f06f 0310 	mvn.w	r3, #16
    ca9e:	e00d      	b.n	cabc <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    caa0:	4b08      	ldr	r3, [pc, #32]	; (cac4 <cdcdf_acm_init+0x38>)
    caa2:	4a09      	ldr	r2, [pc, #36]	; (cac8 <cdcdf_acm_init+0x3c>)
    caa4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    caa6:	4b07      	ldr	r3, [pc, #28]	; (cac4 <cdcdf_acm_init+0x38>)
    caa8:	4a08      	ldr	r2, [pc, #32]	; (cacc <cdcdf_acm_init+0x40>)
    caaa:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    caac:	4805      	ldr	r0, [pc, #20]	; (cac4 <cdcdf_acm_init+0x38>)
    caae:	4b08      	ldr	r3, [pc, #32]	; (cad0 <cdcdf_acm_init+0x44>)
    cab0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    cab2:	4908      	ldr	r1, [pc, #32]	; (cad4 <cdcdf_acm_init+0x48>)
    cab4:	2001      	movs	r0, #1
    cab6:	4b08      	ldr	r3, [pc, #32]	; (cad8 <cdcdf_acm_init+0x4c>)
    cab8:	4798      	blx	r3
	return ERR_NONE;
    caba:	2300      	movs	r3, #0
}
    cabc:	4618      	mov	r0, r3
    cabe:	bd80      	pop	{r7, pc}
    cac0:	0000d929 	.word	0x0000d929
    cac4:	20000edc 	.word	0x20000edc
    cac8:	0000c875 	.word	0x0000c875
    cacc:	20000ee8 	.word	0x20000ee8
    cad0:	0000d891 	.word	0x0000d891
    cad4:	200001d8 	.word	0x200001d8
    cad8:	0000d7c1 	.word	0x0000d7c1

0000cadc <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    cadc:	b590      	push	{r4, r7, lr}
    cade:	b083      	sub	sp, #12
    cae0:	af00      	add	r7, sp, #0
    cae2:	6078      	str	r0, [r7, #4]
    cae4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cae6:	4b0b      	ldr	r3, [pc, #44]	; (cb14 <cdcdf_acm_read+0x38>)
    cae8:	4798      	blx	r3
    caea:	4603      	mov	r3, r0
    caec:	f083 0301 	eor.w	r3, r3, #1
    caf0:	b2db      	uxtb	r3, r3
    caf2:	2b00      	cmp	r3, #0
    caf4:	d002      	beq.n	cafc <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    caf6:	f06f 0310 	mvn.w	r3, #16
    cafa:	e007      	b.n	cb0c <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    cafc:	4b06      	ldr	r3, [pc, #24]	; (cb18 <cdcdf_acm_read+0x3c>)
    cafe:	7918      	ldrb	r0, [r3, #4]
    cb00:	2300      	movs	r3, #0
    cb02:	683a      	ldr	r2, [r7, #0]
    cb04:	6879      	ldr	r1, [r7, #4]
    cb06:	4c05      	ldr	r4, [pc, #20]	; (cb1c <cdcdf_acm_read+0x40>)
    cb08:	47a0      	blx	r4
    cb0a:	4603      	mov	r3, r0
}
    cb0c:	4618      	mov	r0, r3
    cb0e:	370c      	adds	r7, #12
    cb10:	46bd      	mov	sp, r7
    cb12:	bd90      	pop	{r4, r7, pc}
    cb14:	0000cc01 	.word	0x0000cc01
    cb18:	20000ee8 	.word	0x20000ee8
    cb1c:	0000d785 	.word	0x0000d785

0000cb20 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    cb20:	b590      	push	{r4, r7, lr}
    cb22:	b083      	sub	sp, #12
    cb24:	af00      	add	r7, sp, #0
    cb26:	6078      	str	r0, [r7, #4]
    cb28:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    cb2a:	4b0b      	ldr	r3, [pc, #44]	; (cb58 <cdcdf_acm_write+0x38>)
    cb2c:	4798      	blx	r3
    cb2e:	4603      	mov	r3, r0
    cb30:	f083 0301 	eor.w	r3, r3, #1
    cb34:	b2db      	uxtb	r3, r3
    cb36:	2b00      	cmp	r3, #0
    cb38:	d002      	beq.n	cb40 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cb3a:	f06f 0310 	mvn.w	r3, #16
    cb3e:	e007      	b.n	cb50 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cb40:	4b06      	ldr	r3, [pc, #24]	; (cb5c <cdcdf_acm_write+0x3c>)
    cb42:	78d8      	ldrb	r0, [r3, #3]
    cb44:	2301      	movs	r3, #1
    cb46:	683a      	ldr	r2, [r7, #0]
    cb48:	6879      	ldr	r1, [r7, #4]
    cb4a:	4c05      	ldr	r4, [pc, #20]	; (cb60 <cdcdf_acm_write+0x40>)
    cb4c:	47a0      	blx	r4
    cb4e:	4603      	mov	r3, r0
}
    cb50:	4618      	mov	r0, r3
    cb52:	370c      	adds	r7, #12
    cb54:	46bd      	mov	sp, r7
    cb56:	bd90      	pop	{r4, r7, pc}
    cb58:	0000cc01 	.word	0x0000cc01
    cb5c:	20000ee8 	.word	0x20000ee8
    cb60:	0000d785 	.word	0x0000d785

0000cb64 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cb64:	b580      	push	{r7, lr}
    cb66:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cb68:	4b05      	ldr	r3, [pc, #20]	; (cb80 <cdcdf_acm_stop_xfer+0x1c>)
    cb6a:	78db      	ldrb	r3, [r3, #3]
    cb6c:	4618      	mov	r0, r3
    cb6e:	4b05      	ldr	r3, [pc, #20]	; (cb84 <cdcdf_acm_stop_xfer+0x20>)
    cb70:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    cb72:	4b03      	ldr	r3, [pc, #12]	; (cb80 <cdcdf_acm_stop_xfer+0x1c>)
    cb74:	791b      	ldrb	r3, [r3, #4]
    cb76:	4618      	mov	r0, r3
    cb78:	4b02      	ldr	r3, [pc, #8]	; (cb84 <cdcdf_acm_stop_xfer+0x20>)
    cb7a:	4798      	blx	r3
}
    cb7c:	bf00      	nop
    cb7e:	bd80      	pop	{r7, pc}
    cb80:	20000ee8 	.word	0x20000ee8
    cb84:	000039f9 	.word	0x000039f9

0000cb88 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cb88:	b580      	push	{r7, lr}
    cb8a:	b082      	sub	sp, #8
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	4603      	mov	r3, r0
    cb90:	6039      	str	r1, [r7, #0]
    cb92:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cb94:	79fb      	ldrb	r3, [r7, #7]
    cb96:	2b03      	cmp	r3, #3
    cb98:	d822      	bhi.n	cbe0 <cdcdf_acm_register_callback+0x58>
    cb9a:	a201      	add	r2, pc, #4	; (adr r2, cba0 <cdcdf_acm_register_callback+0x18>)
    cb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cba0:	0000cbb1 	.word	0x0000cbb1
    cba4:	0000cbc1 	.word	0x0000cbc1
    cba8:	0000cbd1 	.word	0x0000cbd1
    cbac:	0000cbd9 	.word	0x0000cbd9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cbb0:	4b0f      	ldr	r3, [pc, #60]	; (cbf0 <cdcdf_acm_register_callback+0x68>)
    cbb2:	791b      	ldrb	r3, [r3, #4]
    cbb4:	683a      	ldr	r2, [r7, #0]
    cbb6:	2102      	movs	r1, #2
    cbb8:	4618      	mov	r0, r3
    cbba:	4b0e      	ldr	r3, [pc, #56]	; (cbf4 <cdcdf_acm_register_callback+0x6c>)
    cbbc:	4798      	blx	r3
		break;
    cbbe:	e012      	b.n	cbe6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cbc0:	4b0b      	ldr	r3, [pc, #44]	; (cbf0 <cdcdf_acm_register_callback+0x68>)
    cbc2:	78db      	ldrb	r3, [r3, #3]
    cbc4:	683a      	ldr	r2, [r7, #0]
    cbc6:	2102      	movs	r1, #2
    cbc8:	4618      	mov	r0, r3
    cbca:	4b0a      	ldr	r3, [pc, #40]	; (cbf4 <cdcdf_acm_register_callback+0x6c>)
    cbcc:	4798      	blx	r3
		break;
    cbce:	e00a      	b.n	cbe6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cbd0:	4a09      	ldr	r2, [pc, #36]	; (cbf8 <cdcdf_acm_register_callback+0x70>)
    cbd2:	683b      	ldr	r3, [r7, #0]
    cbd4:	6013      	str	r3, [r2, #0]
		break;
    cbd6:	e006      	b.n	cbe6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cbd8:	4a08      	ldr	r2, [pc, #32]	; (cbfc <cdcdf_acm_register_callback+0x74>)
    cbda:	683b      	ldr	r3, [r7, #0]
    cbdc:	6013      	str	r3, [r2, #0]
		break;
    cbde:	e002      	b.n	cbe6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cbe0:	f06f 030c 	mvn.w	r3, #12
    cbe4:	e000      	b.n	cbe8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cbe6:	2300      	movs	r3, #0
}
    cbe8:	4618      	mov	r0, r3
    cbea:	3708      	adds	r7, #8
    cbec:	46bd      	mov	sp, r7
    cbee:	bd80      	pop	{r7, pc}
    cbf0:	20000ee8 	.word	0x20000ee8
    cbf4:	00003b25 	.word	0x00003b25
    cbf8:	20000efc 	.word	0x20000efc
    cbfc:	20000ef8 	.word	0x20000ef8

0000cc00 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cc00:	b480      	push	{r7}
    cc02:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cc04:	4b03      	ldr	r3, [pc, #12]	; (cc14 <cdcdf_acm_is_enabled+0x14>)
    cc06:	795b      	ldrb	r3, [r3, #5]
}
    cc08:	4618      	mov	r0, r3
    cc0a:	46bd      	mov	sp, r7
    cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc10:	4770      	bx	lr
    cc12:	bf00      	nop
    cc14:	20000ee8 	.word	0x20000ee8

0000cc18 <usb_get_u16>:
{
    cc18:	b480      	push	{r7}
    cc1a:	b083      	sub	sp, #12
    cc1c:	af00      	add	r7, sp, #0
    cc1e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cc20:	687b      	ldr	r3, [r7, #4]
    cc22:	781b      	ldrb	r3, [r3, #0]
    cc24:	b29a      	uxth	r2, r3
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	3301      	adds	r3, #1
    cc2a:	781b      	ldrb	r3, [r3, #0]
    cc2c:	b29b      	uxth	r3, r3
    cc2e:	021b      	lsls	r3, r3, #8
    cc30:	b29b      	uxth	r3, r3
    cc32:	4413      	add	r3, r2
    cc34:	b29b      	uxth	r3, r3
}
    cc36:	4618      	mov	r0, r3
    cc38:	370c      	adds	r7, #12
    cc3a:	46bd      	mov	sp, r7
    cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc40:	4770      	bx	lr

0000cc42 <usb_desc_len>:
{
    cc42:	b480      	push	{r7}
    cc44:	b083      	sub	sp, #12
    cc46:	af00      	add	r7, sp, #0
    cc48:	6078      	str	r0, [r7, #4]
	return desc[0];
    cc4a:	687b      	ldr	r3, [r7, #4]
    cc4c:	781b      	ldrb	r3, [r3, #0]
}
    cc4e:	4618      	mov	r0, r3
    cc50:	370c      	adds	r7, #12
    cc52:	46bd      	mov	sp, r7
    cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc58:	4770      	bx	lr
	...

0000cc5c <usb_desc_next>:
{
    cc5c:	b580      	push	{r7, lr}
    cc5e:	b082      	sub	sp, #8
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cc64:	6878      	ldr	r0, [r7, #4]
    cc66:	4b05      	ldr	r3, [pc, #20]	; (cc7c <usb_desc_next+0x20>)
    cc68:	4798      	blx	r3
    cc6a:	4603      	mov	r3, r0
    cc6c:	461a      	mov	r2, r3
    cc6e:	687b      	ldr	r3, [r7, #4]
    cc70:	4413      	add	r3, r2
}
    cc72:	4618      	mov	r0, r3
    cc74:	3708      	adds	r7, #8
    cc76:	46bd      	mov	sp, r7
    cc78:	bd80      	pop	{r7, pc}
    cc7a:	bf00      	nop
    cc7c:	0000cc43 	.word	0x0000cc43

0000cc80 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cc80:	b580      	push	{r7, lr}
    cc82:	b082      	sub	sp, #8
    cc84:	af00      	add	r7, sp, #0
    cc86:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	3302      	adds	r3, #2
    cc8c:	4618      	mov	r0, r3
    cc8e:	4b03      	ldr	r3, [pc, #12]	; (cc9c <usb_cfg_desc_total_len+0x1c>)
    cc90:	4798      	blx	r3
    cc92:	4603      	mov	r3, r0
}
    cc94:	4618      	mov	r0, r3
    cc96:	3708      	adds	r7, #8
    cc98:	46bd      	mov	sp, r7
    cc9a:	bd80      	pop	{r7, pc}
    cc9c:	0000cc19 	.word	0x0000cc19

0000cca0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cca0:	b590      	push	{r4, r7, lr}
    cca2:	b085      	sub	sp, #20
    cca4:	af00      	add	r7, sp, #0
    cca6:	4603      	mov	r3, r0
    cca8:	6039      	str	r1, [r7, #0]
    ccaa:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    ccac:	2300      	movs	r3, #0
    ccae:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	799a      	ldrb	r2, [r3, #6]
    ccb4:	79db      	ldrb	r3, [r3, #7]
    ccb6:	021b      	lsls	r3, r3, #8
    ccb8:	4313      	orrs	r3, r2
    ccba:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    ccbc:	897b      	ldrh	r3, [r7, #10]
    ccbe:	2b12      	cmp	r3, #18
    ccc0:	d901      	bls.n	ccc6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    ccc2:	2312      	movs	r3, #18
    ccc4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    ccc6:	68fb      	ldr	r3, [r7, #12]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d10a      	bne.n	cce2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cccc:	4b0f      	ldr	r3, [pc, #60]	; (cd0c <usbdc_get_dev_desc+0x6c>)
    ccce:	681b      	ldr	r3, [r3, #0]
    ccd0:	6818      	ldr	r0, [r3, #0]
    ccd2:	4b0e      	ldr	r3, [pc, #56]	; (cd0c <usbdc_get_dev_desc+0x6c>)
    ccd4:	681b      	ldr	r3, [r3, #0]
    ccd6:	685b      	ldr	r3, [r3, #4]
    ccd8:	2201      	movs	r2, #1
    ccda:	4619      	mov	r1, r3
    ccdc:	4b0c      	ldr	r3, [pc, #48]	; (cd10 <usbdc_get_dev_desc+0x70>)
    ccde:	4798      	blx	r3
    cce0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	2b00      	cmp	r3, #0
    cce6:	d101      	bne.n	ccec <usbdc_get_dev_desc+0x4c>
		return false;
    cce8:	2300      	movs	r3, #0
    ccea:	e00b      	b.n	cd04 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    ccec:	897a      	ldrh	r2, [r7, #10]
    ccee:	79f8      	ldrb	r0, [r7, #7]
    ccf0:	2300      	movs	r3, #0
    ccf2:	68f9      	ldr	r1, [r7, #12]
    ccf4:	4c07      	ldr	r4, [pc, #28]	; (cd14 <usbdc_get_dev_desc+0x74>)
    ccf6:	47a0      	blx	r4
    ccf8:	4603      	mov	r3, r0
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	d001      	beq.n	cd02 <usbdc_get_dev_desc+0x62>
		return false;
    ccfe:	2300      	movs	r3, #0
    cd00:	e000      	b.n	cd04 <usbdc_get_dev_desc+0x64>
	}
	return true;
    cd02:	2301      	movs	r3, #1
}
    cd04:	4618      	mov	r0, r3
    cd06:	3714      	adds	r7, #20
    cd08:	46bd      	mov	sp, r7
    cd0a:	bd90      	pop	{r4, r7, pc}
    cd0c:	20000f00 	.word	0x20000f00
    cd10:	0000da15 	.word	0x0000da15
    cd14:	0000d785 	.word	0x0000d785

0000cd18 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cd18:	b590      	push	{r4, r7, lr}
    cd1a:	b087      	sub	sp, #28
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	4603      	mov	r3, r0
    cd20:	6039      	str	r1, [r7, #0]
    cd22:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cd24:	2300      	movs	r3, #0
    cd26:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cd28:	683b      	ldr	r3, [r7, #0]
    cd2a:	799a      	ldrb	r2, [r3, #6]
    cd2c:	79db      	ldrb	r3, [r3, #7]
    cd2e:	021b      	lsls	r3, r3, #8
    cd30:	4313      	orrs	r3, r2
    cd32:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    cd34:	683b      	ldr	r3, [r7, #0]
    cd36:	885b      	ldrh	r3, [r3, #2]
    cd38:	b29b      	uxth	r3, r3
    cd3a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cd3c:	8a7a      	ldrh	r2, [r7, #18]
    cd3e:	4b1e      	ldr	r3, [pc, #120]	; (cdb8 <usbdc_get_cfg_desc+0xa0>)
    cd40:	7f1b      	ldrb	r3, [r3, #28]
    cd42:	3b01      	subs	r3, #1
    cd44:	4013      	ands	r3, r2
    cd46:	2b00      	cmp	r3, #0
    cd48:	bf0c      	ite	eq
    cd4a:	2301      	moveq	r3, #1
    cd4c:	2300      	movne	r3, #0
    cd4e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cd50:	697b      	ldr	r3, [r7, #20]
    cd52:	2b00      	cmp	r3, #0
    cd54:	d10c      	bne.n	cd70 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    cd56:	4b18      	ldr	r3, [pc, #96]	; (cdb8 <usbdc_get_cfg_desc+0xa0>)
    cd58:	681b      	ldr	r3, [r3, #0]
    cd5a:	6818      	ldr	r0, [r3, #0]
    cd5c:	4b16      	ldr	r3, [pc, #88]	; (cdb8 <usbdc_get_cfg_desc+0xa0>)
    cd5e:	681b      	ldr	r3, [r3, #0]
    cd60:	6859      	ldr	r1, [r3, #4]
    cd62:	7c3b      	ldrb	r3, [r7, #16]
    cd64:	3301      	adds	r3, #1
    cd66:	b2db      	uxtb	r3, r3
    cd68:	461a      	mov	r2, r3
    cd6a:	4b14      	ldr	r3, [pc, #80]	; (cdbc <usbdc_get_cfg_desc+0xa4>)
    cd6c:	4798      	blx	r3
    cd6e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    cd70:	697b      	ldr	r3, [r7, #20]
    cd72:	2b00      	cmp	r3, #0
    cd74:	d101      	bne.n	cd7a <usbdc_get_cfg_desc+0x62>
		return false;
    cd76:	2300      	movs	r3, #0
    cd78:	e019      	b.n	cdae <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    cd7a:	6978      	ldr	r0, [r7, #20]
    cd7c:	4b10      	ldr	r3, [pc, #64]	; (cdc0 <usbdc_get_cfg_desc+0xa8>)
    cd7e:	4798      	blx	r3
    cd80:	4603      	mov	r3, r0
    cd82:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cd84:	8a7a      	ldrh	r2, [r7, #18]
    cd86:	89fb      	ldrh	r3, [r7, #14]
    cd88:	429a      	cmp	r2, r3
    cd8a:	d802      	bhi.n	cd92 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cd8c:	2300      	movs	r3, #0
    cd8e:	747b      	strb	r3, [r7, #17]
    cd90:	e001      	b.n	cd96 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cd92:	89fb      	ldrh	r3, [r7, #14]
    cd94:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cd96:	8a7a      	ldrh	r2, [r7, #18]
    cd98:	7c7b      	ldrb	r3, [r7, #17]
    cd9a:	79f8      	ldrb	r0, [r7, #7]
    cd9c:	6979      	ldr	r1, [r7, #20]
    cd9e:	4c09      	ldr	r4, [pc, #36]	; (cdc4 <usbdc_get_cfg_desc+0xac>)
    cda0:	47a0      	blx	r4
    cda2:	4603      	mov	r3, r0
    cda4:	2b00      	cmp	r3, #0
    cda6:	d001      	beq.n	cdac <usbdc_get_cfg_desc+0x94>
		return false;
    cda8:	2300      	movs	r3, #0
    cdaa:	e000      	b.n	cdae <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cdac:	2301      	movs	r3, #1
}
    cdae:	4618      	mov	r0, r3
    cdb0:	371c      	adds	r7, #28
    cdb2:	46bd      	mov	sp, r7
    cdb4:	bd90      	pop	{r4, r7, pc}
    cdb6:	bf00      	nop
    cdb8:	20000f00 	.word	0x20000f00
    cdbc:	0000dad5 	.word	0x0000dad5
    cdc0:	0000cc81 	.word	0x0000cc81
    cdc4:	0000d785 	.word	0x0000d785

0000cdc8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cdc8:	b590      	push	{r4, r7, lr}
    cdca:	b085      	sub	sp, #20
    cdcc:	af00      	add	r7, sp, #0
    cdce:	4603      	mov	r3, r0
    cdd0:	6039      	str	r1, [r7, #0]
    cdd2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cdd4:	683b      	ldr	r3, [r7, #0]
    cdd6:	799a      	ldrb	r2, [r3, #6]
    cdd8:	79db      	ldrb	r3, [r3, #7]
    cdda:	021b      	lsls	r3, r3, #8
    cddc:	4313      	orrs	r3, r2
    cdde:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cde0:	683b      	ldr	r3, [r7, #0]
    cde2:	885b      	ldrh	r3, [r3, #2]
    cde4:	b29b      	uxth	r3, r3
    cde6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cde8:	89fa      	ldrh	r2, [r7, #14]
    cdea:	4b1a      	ldr	r3, [pc, #104]	; (ce54 <usbdc_get_str_desc+0x8c>)
    cdec:	7f1b      	ldrb	r3, [r3, #28]
    cdee:	3b01      	subs	r3, #1
    cdf0:	4013      	ands	r3, r2
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	bf0c      	ite	eq
    cdf6:	2301      	moveq	r3, #1
    cdf8:	2300      	movne	r3, #0
    cdfa:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cdfc:	4b15      	ldr	r3, [pc, #84]	; (ce54 <usbdc_get_str_desc+0x8c>)
    cdfe:	681b      	ldr	r3, [r3, #0]
    ce00:	6818      	ldr	r0, [r3, #0]
    ce02:	4b14      	ldr	r3, [pc, #80]	; (ce54 <usbdc_get_str_desc+0x8c>)
    ce04:	681b      	ldr	r3, [r3, #0]
    ce06:	685b      	ldr	r3, [r3, #4]
    ce08:	7b3a      	ldrb	r2, [r7, #12]
    ce0a:	4619      	mov	r1, r3
    ce0c:	4b12      	ldr	r3, [pc, #72]	; (ce58 <usbdc_get_str_desc+0x90>)
    ce0e:	4798      	blx	r3
    ce10:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    ce12:	68bb      	ldr	r3, [r7, #8]
    ce14:	2b00      	cmp	r3, #0
    ce16:	d101      	bne.n	ce1c <usbdc_get_str_desc+0x54>
		return false;
    ce18:	2300      	movs	r3, #0
    ce1a:	e017      	b.n	ce4c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    ce1c:	68bb      	ldr	r3, [r7, #8]
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	b29b      	uxth	r3, r3
    ce22:	89fa      	ldrh	r2, [r7, #14]
    ce24:	429a      	cmp	r2, r3
    ce26:	d802      	bhi.n	ce2e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    ce28:	2300      	movs	r3, #0
    ce2a:	737b      	strb	r3, [r7, #13]
    ce2c:	e002      	b.n	ce34 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    ce2e:	68bb      	ldr	r3, [r7, #8]
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    ce34:	89fa      	ldrh	r2, [r7, #14]
    ce36:	7b7b      	ldrb	r3, [r7, #13]
    ce38:	79f8      	ldrb	r0, [r7, #7]
    ce3a:	68b9      	ldr	r1, [r7, #8]
    ce3c:	4c07      	ldr	r4, [pc, #28]	; (ce5c <usbdc_get_str_desc+0x94>)
    ce3e:	47a0      	blx	r4
    ce40:	4603      	mov	r3, r0
    ce42:	2b00      	cmp	r3, #0
    ce44:	d001      	beq.n	ce4a <usbdc_get_str_desc+0x82>
		return false;
    ce46:	2300      	movs	r3, #0
    ce48:	e000      	b.n	ce4c <usbdc_get_str_desc+0x84>
	}
	return true;
    ce4a:	2301      	movs	r3, #1
}
    ce4c:	4618      	mov	r0, r3
    ce4e:	3714      	adds	r7, #20
    ce50:	46bd      	mov	sp, r7
    ce52:	bd90      	pop	{r4, r7, pc}
    ce54:	20000f00 	.word	0x20000f00
    ce58:	0000db4d 	.word	0x0000db4d
    ce5c:	0000d785 	.word	0x0000d785

0000ce60 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    ce60:	b580      	push	{r7, lr}
    ce62:	b084      	sub	sp, #16
    ce64:	af00      	add	r7, sp, #0
    ce66:	4603      	mov	r3, r0
    ce68:	6039      	str	r1, [r7, #0]
    ce6a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    ce6c:	683b      	ldr	r3, [r7, #0]
    ce6e:	885b      	ldrh	r3, [r3, #2]
    ce70:	b29b      	uxth	r3, r3
    ce72:	0a1b      	lsrs	r3, r3, #8
    ce74:	b29b      	uxth	r3, r3
    ce76:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    ce78:	7bfb      	ldrb	r3, [r7, #15]
    ce7a:	2b02      	cmp	r3, #2
    ce7c:	d00d      	beq.n	ce9a <usbdc_get_desc_req+0x3a>
    ce7e:	2b03      	cmp	r3, #3
    ce80:	d012      	beq.n	cea8 <usbdc_get_desc_req+0x48>
    ce82:	2b01      	cmp	r3, #1
    ce84:	d002      	beq.n	ce8c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ce86:	bf00      	nop
	}
	return false;
    ce88:	2300      	movs	r3, #0
    ce8a:	e013      	b.n	ceb4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ce8c:	79fb      	ldrb	r3, [r7, #7]
    ce8e:	6839      	ldr	r1, [r7, #0]
    ce90:	4618      	mov	r0, r3
    ce92:	4b0a      	ldr	r3, [pc, #40]	; (cebc <usbdc_get_desc_req+0x5c>)
    ce94:	4798      	blx	r3
    ce96:	4603      	mov	r3, r0
    ce98:	e00c      	b.n	ceb4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ce9a:	79fb      	ldrb	r3, [r7, #7]
    ce9c:	6839      	ldr	r1, [r7, #0]
    ce9e:	4618      	mov	r0, r3
    cea0:	4b07      	ldr	r3, [pc, #28]	; (cec0 <usbdc_get_desc_req+0x60>)
    cea2:	4798      	blx	r3
    cea4:	4603      	mov	r3, r0
    cea6:	e005      	b.n	ceb4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cea8:	79fb      	ldrb	r3, [r7, #7]
    ceaa:	6839      	ldr	r1, [r7, #0]
    ceac:	4618      	mov	r0, r3
    ceae:	4b05      	ldr	r3, [pc, #20]	; (cec4 <usbdc_get_desc_req+0x64>)
    ceb0:	4798      	blx	r3
    ceb2:	4603      	mov	r3, r0
}
    ceb4:	4618      	mov	r0, r3
    ceb6:	3710      	adds	r7, #16
    ceb8:	46bd      	mov	sp, r7
    ceba:	bd80      	pop	{r7, pc}
    cebc:	0000cca1 	.word	0x0000cca1
    cec0:	0000cd19 	.word	0x0000cd19
    cec4:	0000cdc9 	.word	0x0000cdc9

0000cec8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cec8:	b590      	push	{r4, r7, lr}
    ceca:	b085      	sub	sp, #20
    cecc:	af00      	add	r7, sp, #0
    cece:	4603      	mov	r3, r0
    ced0:	6039      	str	r1, [r7, #0]
    ced2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ced4:	683b      	ldr	r3, [r7, #0]
    ced6:	781b      	ldrb	r3, [r3, #0]
    ced8:	f003 031f 	and.w	r3, r3, #31
    cedc:	2b00      	cmp	r3, #0
    cede:	db1b      	blt.n	cf18 <usbdc_get_status_req+0x50>
    cee0:	2b01      	cmp	r3, #1
    cee2:	dd02      	ble.n	ceea <usbdc_get_status_req+0x22>
    cee4:	2b02      	cmp	r3, #2
    cee6:	d003      	beq.n	cef0 <usbdc_get_status_req+0x28>
    cee8:	e016      	b.n	cf18 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ceea:	2300      	movs	r3, #0
    ceec:	60fb      	str	r3, [r7, #12]
		break;
    ceee:	e015      	b.n	cf1c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cef0:	683b      	ldr	r3, [r7, #0]
    cef2:	889b      	ldrh	r3, [r3, #4]
    cef4:	b29b      	uxth	r3, r3
    cef6:	b2db      	uxtb	r3, r3
    cef8:	2102      	movs	r1, #2
    cefa:	4618      	mov	r0, r3
    cefc:	4b0f      	ldr	r3, [pc, #60]	; (cf3c <usbdc_get_status_req+0x74>)
    cefe:	4798      	blx	r3
    cf00:	4603      	mov	r3, r0
    cf02:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cf04:	68fb      	ldr	r3, [r7, #12]
    cf06:	2b00      	cmp	r3, #0
    cf08:	da01      	bge.n	cf0e <usbdc_get_status_req+0x46>
			return false;
    cf0a:	2300      	movs	r3, #0
    cf0c:	e012      	b.n	cf34 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cf0e:	68fb      	ldr	r3, [r7, #12]
    cf10:	f003 0301 	and.w	r3, r3, #1
    cf14:	60fb      	str	r3, [r7, #12]
		break;
    cf16:	e001      	b.n	cf1c <usbdc_get_status_req+0x54>
	default:
		return false;
    cf18:	2300      	movs	r3, #0
    cf1a:	e00b      	b.n	cf34 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cf1c:	4b08      	ldr	r3, [pc, #32]	; (cf40 <usbdc_get_status_req+0x78>)
    cf1e:	695b      	ldr	r3, [r3, #20]
    cf20:	89ba      	ldrh	r2, [r7, #12]
    cf22:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cf24:	4b06      	ldr	r3, [pc, #24]	; (cf40 <usbdc_get_status_req+0x78>)
    cf26:	6959      	ldr	r1, [r3, #20]
    cf28:	79f8      	ldrb	r0, [r7, #7]
    cf2a:	2300      	movs	r3, #0
    cf2c:	2202      	movs	r2, #2
    cf2e:	4c05      	ldr	r4, [pc, #20]	; (cf44 <usbdc_get_status_req+0x7c>)
    cf30:	47a0      	blx	r4
	return true;
    cf32:	2301      	movs	r3, #1
}
    cf34:	4618      	mov	r0, r3
    cf36:	3714      	adds	r7, #20
    cf38:	46bd      	mov	sp, r7
    cf3a:	bd90      	pop	{r4, r7, pc}
    cf3c:	00003ad1 	.word	0x00003ad1
    cf40:	20000f00 	.word	0x20000f00
    cf44:	0000d785 	.word	0x0000d785

0000cf48 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cf48:	b590      	push	{r4, r7, lr}
    cf4a:	b085      	sub	sp, #20
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cf50:	4b1f      	ldr	r3, [pc, #124]	; (cfd0 <usbdc_get_interface+0x88>)
    cf52:	691b      	ldr	r3, [r3, #16]
    cf54:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cf56:	4b1e      	ldr	r3, [pc, #120]	; (cfd0 <usbdc_get_interface+0x88>)
    cf58:	7f5b      	ldrb	r3, [r3, #29]
    cf5a:	461a      	mov	r2, r3
    cf5c:	687b      	ldr	r3, [r7, #4]
    cf5e:	889b      	ldrh	r3, [r3, #4]
    cf60:	b29b      	uxth	r3, r3
    cf62:	fa42 f303 	asr.w	r3, r2, r3
    cf66:	f003 0301 	and.w	r3, r3, #1
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d128      	bne.n	cfc0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cf6e:	4b18      	ldr	r3, [pc, #96]	; (cfd0 <usbdc_get_interface+0x88>)
    cf70:	695b      	ldr	r3, [r3, #20]
    cf72:	2200      	movs	r2, #0
    cf74:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf76:	4b16      	ldr	r3, [pc, #88]	; (cfd0 <usbdc_get_interface+0x88>)
    cf78:	6959      	ldr	r1, [r3, #20]
    cf7a:	2300      	movs	r3, #0
    cf7c:	2201      	movs	r2, #1
    cf7e:	2000      	movs	r0, #0
    cf80:	4c14      	ldr	r4, [pc, #80]	; (cfd4 <usbdc_get_interface+0x8c>)
    cf82:	47a0      	blx	r4
		return true;
    cf84:	2301      	movs	r3, #1
    cf86:	e01f      	b.n	cfc8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cf88:	68fb      	ldr	r3, [r7, #12]
    cf8a:	685b      	ldr	r3, [r3, #4]
    cf8c:	687a      	ldr	r2, [r7, #4]
    cf8e:	2102      	movs	r1, #2
    cf90:	68f8      	ldr	r0, [r7, #12]
    cf92:	4798      	blx	r3
    cf94:	60b8      	str	r0, [r7, #8]
    cf96:	68bb      	ldr	r3, [r7, #8]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	da03      	bge.n	cfa4 <usbdc_get_interface+0x5c>
			func = func->next;
    cf9c:	68fb      	ldr	r3, [r7, #12]
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	60fb      	str	r3, [r7, #12]
    cfa2:	e00d      	b.n	cfc0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cfa4:	4b0a      	ldr	r3, [pc, #40]	; (cfd0 <usbdc_get_interface+0x88>)
    cfa6:	695b      	ldr	r3, [r3, #20]
    cfa8:	68ba      	ldr	r2, [r7, #8]
    cfaa:	b2d2      	uxtb	r2, r2
    cfac:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cfae:	4b08      	ldr	r3, [pc, #32]	; (cfd0 <usbdc_get_interface+0x88>)
    cfb0:	6959      	ldr	r1, [r3, #20]
    cfb2:	2300      	movs	r3, #0
    cfb4:	2201      	movs	r2, #1
    cfb6:	2000      	movs	r0, #0
    cfb8:	4c06      	ldr	r4, [pc, #24]	; (cfd4 <usbdc_get_interface+0x8c>)
    cfba:	47a0      	blx	r4
			return true;
    cfbc:	2301      	movs	r3, #1
    cfbe:	e003      	b.n	cfc8 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cfc0:	68fb      	ldr	r3, [r7, #12]
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d1e0      	bne.n	cf88 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cfc6:	2300      	movs	r3, #0
}
    cfc8:	4618      	mov	r0, r3
    cfca:	3714      	adds	r7, #20
    cfcc:	46bd      	mov	sp, r7
    cfce:	bd90      	pop	{r4, r7, pc}
    cfd0:	20000f00 	.word	0x20000f00
    cfd4:	0000d785 	.word	0x0000d785

0000cfd8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cfd8:	b590      	push	{r4, r7, lr}
    cfda:	b083      	sub	sp, #12
    cfdc:	af00      	add	r7, sp, #0
    cfde:	4603      	mov	r3, r0
    cfe0:	6039      	str	r1, [r7, #0]
    cfe2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cfe4:	683b      	ldr	r3, [r7, #0]
    cfe6:	785b      	ldrb	r3, [r3, #1]
    cfe8:	2b0a      	cmp	r3, #10
    cfea:	d83a      	bhi.n	d062 <usbdc_get_req+0x8a>
    cfec:	a201      	add	r2, pc, #4	; (adr r2, cff4 <usbdc_get_req+0x1c>)
    cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cff2:	bf00      	nop
    cff4:	0000d04b 	.word	0x0000d04b
    cff8:	0000d063 	.word	0x0000d063
    cffc:	0000d063 	.word	0x0000d063
    d000:	0000d063 	.word	0x0000d063
    d004:	0000d063 	.word	0x0000d063
    d008:	0000d063 	.word	0x0000d063
    d00c:	0000d021 	.word	0x0000d021
    d010:	0000d063 	.word	0x0000d063
    d014:	0000d02f 	.word	0x0000d02f
    d018:	0000d063 	.word	0x0000d063
    d01c:	0000d059 	.word	0x0000d059
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    d020:	79fb      	ldrb	r3, [r7, #7]
    d022:	6839      	ldr	r1, [r7, #0]
    d024:	4618      	mov	r0, r3
    d026:	4b11      	ldr	r3, [pc, #68]	; (d06c <usbdc_get_req+0x94>)
    d028:	4798      	blx	r3
    d02a:	4603      	mov	r3, r0
    d02c:	e01a      	b.n	d064 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    d02e:	4b10      	ldr	r3, [pc, #64]	; (d070 <usbdc_get_req+0x98>)
    d030:	695b      	ldr	r3, [r3, #20]
    d032:	4a0f      	ldr	r2, [pc, #60]	; (d070 <usbdc_get_req+0x98>)
    d034:	7ed2      	ldrb	r2, [r2, #27]
    d036:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    d038:	4b0d      	ldr	r3, [pc, #52]	; (d070 <usbdc_get_req+0x98>)
    d03a:	6959      	ldr	r1, [r3, #20]
    d03c:	79f8      	ldrb	r0, [r7, #7]
    d03e:	2300      	movs	r3, #0
    d040:	2201      	movs	r2, #1
    d042:	4c0c      	ldr	r4, [pc, #48]	; (d074 <usbdc_get_req+0x9c>)
    d044:	47a0      	blx	r4
		return true;
    d046:	2301      	movs	r3, #1
    d048:	e00c      	b.n	d064 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    d04a:	79fb      	ldrb	r3, [r7, #7]
    d04c:	6839      	ldr	r1, [r7, #0]
    d04e:	4618      	mov	r0, r3
    d050:	4b09      	ldr	r3, [pc, #36]	; (d078 <usbdc_get_req+0xa0>)
    d052:	4798      	blx	r3
    d054:	4603      	mov	r3, r0
    d056:	e005      	b.n	d064 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    d058:	6838      	ldr	r0, [r7, #0]
    d05a:	4b08      	ldr	r3, [pc, #32]	; (d07c <usbdc_get_req+0xa4>)
    d05c:	4798      	blx	r3
    d05e:	4603      	mov	r3, r0
    d060:	e000      	b.n	d064 <usbdc_get_req+0x8c>
	default:
		return false;
    d062:	2300      	movs	r3, #0
	}
}
    d064:	4618      	mov	r0, r3
    d066:	370c      	adds	r7, #12
    d068:	46bd      	mov	sp, r7
    d06a:	bd90      	pop	{r4, r7, pc}
    d06c:	0000ce61 	.word	0x0000ce61
    d070:	20000f00 	.word	0x20000f00
    d074:	0000d785 	.word	0x0000d785
    d078:	0000cec9 	.word	0x0000cec9
    d07c:	0000cf49 	.word	0x0000cf49

0000d080 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d080:	b590      	push	{r4, r7, lr}
    d082:	b083      	sub	sp, #12
    d084:	af00      	add	r7, sp, #0
    d086:	4603      	mov	r3, r0
    d088:	6039      	str	r1, [r7, #0]
    d08a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d08c:	683b      	ldr	r3, [r7, #0]
    d08e:	781b      	ldrb	r3, [r3, #0]
    d090:	f003 031f 	and.w	r3, r3, #31
    d094:	2b02      	cmp	r3, #2
    d096:	d116      	bne.n	d0c6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d098:	683b      	ldr	r3, [r7, #0]
    d09a:	88db      	ldrh	r3, [r3, #6]
    d09c:	b29b      	uxth	r3, r3
    d09e:	2b00      	cmp	r3, #0
    d0a0:	d001      	beq.n	d0a6 <usbdc_clear_ftr_req+0x26>
			return false;
    d0a2:	2300      	movs	r3, #0
    d0a4:	e010      	b.n	d0c8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d0a6:	683b      	ldr	r3, [r7, #0]
    d0a8:	889b      	ldrh	r3, [r3, #4]
    d0aa:	b29b      	uxth	r3, r3
    d0ac:	b2db      	uxtb	r3, r3
    d0ae:	2100      	movs	r1, #0
    d0b0:	4618      	mov	r0, r3
    d0b2:	4b07      	ldr	r3, [pc, #28]	; (d0d0 <usbdc_clear_ftr_req+0x50>)
    d0b4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d0b6:	79f8      	ldrb	r0, [r7, #7]
    d0b8:	2301      	movs	r3, #1
    d0ba:	2200      	movs	r2, #0
    d0bc:	2100      	movs	r1, #0
    d0be:	4c05      	ldr	r4, [pc, #20]	; (d0d4 <usbdc_clear_ftr_req+0x54>)
    d0c0:	47a0      	blx	r4
		return true;
    d0c2:	2301      	movs	r3, #1
    d0c4:	e000      	b.n	d0c8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d0c6:	2300      	movs	r3, #0
	}
}
    d0c8:	4618      	mov	r0, r3
    d0ca:	370c      	adds	r7, #12
    d0cc:	46bd      	mov	sp, r7
    d0ce:	bd90      	pop	{r4, r7, pc}
    d0d0:	00003ad1 	.word	0x00003ad1
    d0d4:	0000d785 	.word	0x0000d785

0000d0d8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d0d8:	b590      	push	{r4, r7, lr}
    d0da:	b083      	sub	sp, #12
    d0dc:	af00      	add	r7, sp, #0
    d0de:	4603      	mov	r3, r0
    d0e0:	6039      	str	r1, [r7, #0]
    d0e2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d0e4:	683b      	ldr	r3, [r7, #0]
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	f003 031f 	and.w	r3, r3, #31
    d0ec:	2b02      	cmp	r3, #2
    d0ee:	d116      	bne.n	d11e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d0f0:	683b      	ldr	r3, [r7, #0]
    d0f2:	88db      	ldrh	r3, [r3, #6]
    d0f4:	b29b      	uxth	r3, r3
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d001      	beq.n	d0fe <usbdc_set_ftr_req+0x26>
			return false;
    d0fa:	2300      	movs	r3, #0
    d0fc:	e010      	b.n	d120 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d0fe:	683b      	ldr	r3, [r7, #0]
    d100:	889b      	ldrh	r3, [r3, #4]
    d102:	b29b      	uxth	r3, r3
    d104:	b2db      	uxtb	r3, r3
    d106:	2101      	movs	r1, #1
    d108:	4618      	mov	r0, r3
    d10a:	4b07      	ldr	r3, [pc, #28]	; (d128 <usbdc_set_ftr_req+0x50>)
    d10c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d10e:	79f8      	ldrb	r0, [r7, #7]
    d110:	2301      	movs	r3, #1
    d112:	2200      	movs	r2, #0
    d114:	2100      	movs	r1, #0
    d116:	4c05      	ldr	r4, [pc, #20]	; (d12c <usbdc_set_ftr_req+0x54>)
    d118:	47a0      	blx	r4
		return true;
    d11a:	2301      	movs	r3, #1
    d11c:	e000      	b.n	d120 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d11e:	2300      	movs	r3, #0
	}
}
    d120:	4618      	mov	r0, r3
    d122:	370c      	adds	r7, #12
    d124:	46bd      	mov	sp, r7
    d126:	bd90      	pop	{r4, r7, pc}
    d128:	00003ad1 	.word	0x00003ad1
    d12c:	0000d785 	.word	0x0000d785

0000d130 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d136:	4b0a      	ldr	r3, [pc, #40]	; (d160 <usbdc_unconfig+0x30>)
    d138:	691b      	ldr	r3, [r3, #16]
    d13a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d13c:	e008      	b.n	d150 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d13e:	687b      	ldr	r3, [r7, #4]
    d140:	685b      	ldr	r3, [r3, #4]
    d142:	2200      	movs	r2, #0
    d144:	2101      	movs	r1, #1
    d146:	6878      	ldr	r0, [r7, #4]
    d148:	4798      	blx	r3
		func = func->next;
    d14a:	687b      	ldr	r3, [r7, #4]
    d14c:	681b      	ldr	r3, [r3, #0]
    d14e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	2b00      	cmp	r3, #0
    d154:	d1f3      	bne.n	d13e <usbdc_unconfig+0xe>
	}
}
    d156:	bf00      	nop
    d158:	3708      	adds	r7, #8
    d15a:	46bd      	mov	sp, r7
    d15c:	bd80      	pop	{r7, pc}
    d15e:	bf00      	nop
    d160:	20000f00 	.word	0x20000f00

0000d164 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d164:	b580      	push	{r7, lr}
    d166:	b088      	sub	sp, #32
    d168:	af00      	add	r7, sp, #0
    d16a:	4603      	mov	r3, r0
    d16c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d16e:	2300      	movs	r3, #0
    d170:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d172:	23ff      	movs	r3, #255	; 0xff
    d174:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d176:	79fb      	ldrb	r3, [r7, #7]
    d178:	2b00      	cmp	r3, #0
    d17a:	d103      	bne.n	d184 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d17c:	4b2e      	ldr	r3, [pc, #184]	; (d238 <usbdc_set_config+0xd4>)
    d17e:	4798      	blx	r3
		return true;
    d180:	2301      	movs	r3, #1
    d182:	e055      	b.n	d230 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d184:	69bb      	ldr	r3, [r7, #24]
    d186:	2b00      	cmp	r3, #0
    d188:	d10a      	bne.n	d1a0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d18a:	4b2c      	ldr	r3, [pc, #176]	; (d23c <usbdc_set_config+0xd8>)
    d18c:	681b      	ldr	r3, [r3, #0]
    d18e:	6818      	ldr	r0, [r3, #0]
    d190:	4b2a      	ldr	r3, [pc, #168]	; (d23c <usbdc_set_config+0xd8>)
    d192:	681b      	ldr	r3, [r3, #0]
    d194:	685b      	ldr	r3, [r3, #4]
    d196:	79fa      	ldrb	r2, [r7, #7]
    d198:	4619      	mov	r1, r3
    d19a:	4b29      	ldr	r3, [pc, #164]	; (d240 <usbdc_set_config+0xdc>)
    d19c:	4798      	blx	r3
    d19e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d1a0:	69bb      	ldr	r3, [r7, #24]
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d101      	bne.n	d1aa <usbdc_set_config+0x46>
		return false;
    d1a6:	2300      	movs	r3, #0
    d1a8:	e042      	b.n	d230 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d1aa:	69b8      	ldr	r0, [r7, #24]
    d1ac:	4b25      	ldr	r3, [pc, #148]	; (d244 <usbdc_set_config+0xe0>)
    d1ae:	4798      	blx	r3
    d1b0:	4603      	mov	r3, r0
    d1b2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d1b4:	8abb      	ldrh	r3, [r7, #20]
    d1b6:	69ba      	ldr	r2, [r7, #24]
    d1b8:	4413      	add	r3, r2
    d1ba:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d1bc:	693b      	ldr	r3, [r7, #16]
    d1be:	2204      	movs	r2, #4
    d1c0:	4619      	mov	r1, r3
    d1c2:	69b8      	ldr	r0, [r7, #24]
    d1c4:	4b20      	ldr	r3, [pc, #128]	; (d248 <usbdc_set_config+0xe4>)
    d1c6:	4798      	blx	r3
    d1c8:	4603      	mov	r3, r0
    d1ca:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d1cc:	e02c      	b.n	d228 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d1ce:	68fb      	ldr	r3, [r7, #12]
    d1d0:	3302      	adds	r3, #2
    d1d2:	781b      	ldrb	r3, [r3, #0]
    d1d4:	7dfa      	ldrb	r2, [r7, #23]
    d1d6:	429a      	cmp	r2, r3
    d1d8:	d018      	beq.n	d20c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d1da:	68fb      	ldr	r3, [r7, #12]
    d1dc:	789b      	ldrb	r3, [r3, #2]
    d1de:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d1e0:	4b16      	ldr	r3, [pc, #88]	; (d23c <usbdc_set_config+0xd8>)
    d1e2:	691b      	ldr	r3, [r3, #16]
    d1e4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d1e6:	e00c      	b.n	d202 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d1e8:	69fb      	ldr	r3, [r7, #28]
    d1ea:	685b      	ldr	r3, [r3, #4]
    d1ec:	f107 020c 	add.w	r2, r7, #12
    d1f0:	2100      	movs	r1, #0
    d1f2:	69f8      	ldr	r0, [r7, #28]
    d1f4:	4798      	blx	r3
    d1f6:	4603      	mov	r3, r0
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d006      	beq.n	d20a <usbdc_set_config+0xa6>
					func = func->next;
    d1fc:	69fb      	ldr	r3, [r7, #28]
    d1fe:	681b      	ldr	r3, [r3, #0]
    d200:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d202:	69fb      	ldr	r3, [r7, #28]
    d204:	2b00      	cmp	r3, #0
    d206:	d1ef      	bne.n	d1e8 <usbdc_set_config+0x84>
    d208:	e000      	b.n	d20c <usbdc_set_config+0xa8>
				} else {
					break;
    d20a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d20c:	68fb      	ldr	r3, [r7, #12]
    d20e:	4618      	mov	r0, r3
    d210:	4b0e      	ldr	r3, [pc, #56]	; (d24c <usbdc_set_config+0xe8>)
    d212:	4798      	blx	r3
    d214:	4603      	mov	r3, r0
    d216:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d218:	68fb      	ldr	r3, [r7, #12]
    d21a:	6939      	ldr	r1, [r7, #16]
    d21c:	2204      	movs	r2, #4
    d21e:	4618      	mov	r0, r3
    d220:	4b09      	ldr	r3, [pc, #36]	; (d248 <usbdc_set_config+0xe4>)
    d222:	4798      	blx	r3
    d224:	4603      	mov	r3, r0
    d226:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d228:	68fb      	ldr	r3, [r7, #12]
    d22a:	2b00      	cmp	r3, #0
    d22c:	d1cf      	bne.n	d1ce <usbdc_set_config+0x6a>
	}
	return true;
    d22e:	2301      	movs	r3, #1
}
    d230:	4618      	mov	r0, r3
    d232:	3720      	adds	r7, #32
    d234:	46bd      	mov	sp, r7
    d236:	bd80      	pop	{r7, pc}
    d238:	0000d131 	.word	0x0000d131
    d23c:	20000f00 	.word	0x20000f00
    d240:	0000dad5 	.word	0x0000dad5
    d244:	0000cc81 	.word	0x0000cc81
    d248:	0000da15 	.word	0x0000da15
    d24c:	0000cc5d 	.word	0x0000cc5d

0000d250 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d250:	b580      	push	{r7, lr}
    d252:	b082      	sub	sp, #8
    d254:	af00      	add	r7, sp, #0
    d256:	4603      	mov	r3, r0
    d258:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d25a:	79fb      	ldrb	r3, [r7, #7]
    d25c:	4618      	mov	r0, r3
    d25e:	4b03      	ldr	r3, [pc, #12]	; (d26c <usbdc_set_address+0x1c>)
    d260:	4798      	blx	r3
}
    d262:	bf00      	nop
    d264:	3708      	adds	r7, #8
    d266:	46bd      	mov	sp, r7
    d268:	bd80      	pop	{r7, pc}
    d26a:	bf00      	nop
    d26c:	000036ed 	.word	0x000036ed

0000d270 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d270:	b590      	push	{r4, r7, lr}
    d272:	b087      	sub	sp, #28
    d274:	af00      	add	r7, sp, #0
    d276:	4603      	mov	r3, r0
    d278:	460a      	mov	r2, r1
    d27a:	80fb      	strh	r3, [r7, #6]
    d27c:	4613      	mov	r3, r2
    d27e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d280:	2300      	movs	r3, #0
    d282:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d284:	693b      	ldr	r3, [r7, #16]
    d286:	2b00      	cmp	r3, #0
    d288:	d10b      	bne.n	d2a2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d28a:	4b43      	ldr	r3, [pc, #268]	; (d398 <usbdc_set_interface+0x128>)
    d28c:	681b      	ldr	r3, [r3, #0]
    d28e:	6818      	ldr	r0, [r3, #0]
    d290:	4b41      	ldr	r3, [pc, #260]	; (d398 <usbdc_set_interface+0x128>)
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	6859      	ldr	r1, [r3, #4]
    d296:	4b40      	ldr	r3, [pc, #256]	; (d398 <usbdc_set_interface+0x128>)
    d298:	7edb      	ldrb	r3, [r3, #27]
    d29a:	461a      	mov	r2, r3
    d29c:	4b3f      	ldr	r3, [pc, #252]	; (d39c <usbdc_set_interface+0x12c>)
    d29e:	4798      	blx	r3
    d2a0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d2a2:	693b      	ldr	r3, [r7, #16]
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	d101      	bne.n	d2ac <usbdc_set_interface+0x3c>
		return false;
    d2a8:	2300      	movs	r3, #0
    d2aa:	e071      	b.n	d390 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d2ac:	693b      	ldr	r3, [r7, #16]
    d2ae:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d2b0:	6938      	ldr	r0, [r7, #16]
    d2b2:	4b3b      	ldr	r3, [pc, #236]	; (d3a0 <usbdc_set_interface+0x130>)
    d2b4:	4798      	blx	r3
    d2b6:	4603      	mov	r3, r0
    d2b8:	461a      	mov	r2, r3
    d2ba:	693b      	ldr	r3, [r7, #16]
    d2bc:	4413      	add	r3, r2
    d2be:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d2c0:	68bb      	ldr	r3, [r7, #8]
    d2c2:	68f9      	ldr	r1, [r7, #12]
    d2c4:	2204      	movs	r2, #4
    d2c6:	4618      	mov	r0, r3
    d2c8:	4b36      	ldr	r3, [pc, #216]	; (d3a4 <usbdc_set_interface+0x134>)
    d2ca:	4798      	blx	r3
    d2cc:	6138      	str	r0, [r7, #16]
    d2ce:	693b      	ldr	r3, [r7, #16]
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d113      	bne.n	d2fc <usbdc_set_interface+0x8c>
		return false;
    d2d4:	2300      	movs	r3, #0
    d2d6:	e05b      	b.n	d390 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d2d8:	68bb      	ldr	r3, [r7, #8]
    d2da:	4618      	mov	r0, r3
    d2dc:	4b32      	ldr	r3, [pc, #200]	; (d3a8 <usbdc_set_interface+0x138>)
    d2de:	4798      	blx	r3
    d2e0:	4603      	mov	r3, r0
    d2e2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d2e4:	68bb      	ldr	r3, [r7, #8]
    d2e6:	68f9      	ldr	r1, [r7, #12]
    d2e8:	2204      	movs	r2, #4
    d2ea:	4618      	mov	r0, r3
    d2ec:	4b2d      	ldr	r3, [pc, #180]	; (d3a4 <usbdc_set_interface+0x134>)
    d2ee:	4798      	blx	r3
    d2f0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d2f2:	693b      	ldr	r3, [r7, #16]
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d101      	bne.n	d2fc <usbdc_set_interface+0x8c>
			return false;
    d2f8:	2300      	movs	r3, #0
    d2fa:	e049      	b.n	d390 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d2fc:	693b      	ldr	r3, [r7, #16]
    d2fe:	3302      	adds	r3, #2
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	b29b      	uxth	r3, r3
    d304:	88ba      	ldrh	r2, [r7, #4]
    d306:	429a      	cmp	r2, r3
    d308:	d1e6      	bne.n	d2d8 <usbdc_set_interface+0x68>
    d30a:	693b      	ldr	r3, [r7, #16]
    d30c:	3303      	adds	r3, #3
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	b29b      	uxth	r3, r3
    d312:	88fa      	ldrh	r2, [r7, #6]
    d314:	429a      	cmp	r2, r3
    d316:	d1df      	bne.n	d2d8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d318:	693b      	ldr	r3, [r7, #16]
    d31a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d31c:	4b1e      	ldr	r3, [pc, #120]	; (d398 <usbdc_set_interface+0x128>)
    d31e:	691b      	ldr	r3, [r3, #16]
    d320:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d322:	e031      	b.n	d388 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d324:	697b      	ldr	r3, [r7, #20]
    d326:	685b      	ldr	r3, [r3, #4]
    d328:	f107 0208 	add.w	r2, r7, #8
    d32c:	2101      	movs	r1, #1
    d32e:	6978      	ldr	r0, [r7, #20]
    d330:	4798      	blx	r3
    d332:	4603      	mov	r3, r0
    d334:	2b00      	cmp	r3, #0
    d336:	d003      	beq.n	d340 <usbdc_set_interface+0xd0>
			func = func->next;
    d338:	697b      	ldr	r3, [r7, #20]
    d33a:	681b      	ldr	r3, [r3, #0]
    d33c:	617b      	str	r3, [r7, #20]
    d33e:	e023      	b.n	d388 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d340:	697b      	ldr	r3, [r7, #20]
    d342:	685b      	ldr	r3, [r3, #4]
    d344:	f107 0208 	add.w	r2, r7, #8
    d348:	2100      	movs	r1, #0
    d34a:	6978      	ldr	r0, [r7, #20]
    d34c:	4798      	blx	r3
    d34e:	4603      	mov	r3, r0
    d350:	2b00      	cmp	r3, #0
    d352:	d117      	bne.n	d384 <usbdc_set_interface+0x114>
			if (alt_set) {
    d354:	88fb      	ldrh	r3, [r7, #6]
    d356:	2b00      	cmp	r3, #0
    d358:	d00c      	beq.n	d374 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d35a:	4b0f      	ldr	r3, [pc, #60]	; (d398 <usbdc_set_interface+0x128>)
    d35c:	7f5b      	ldrb	r3, [r3, #29]
    d35e:	b25a      	sxtb	r2, r3
    d360:	88bb      	ldrh	r3, [r7, #4]
    d362:	2101      	movs	r1, #1
    d364:	fa01 f303 	lsl.w	r3, r1, r3
    d368:	b25b      	sxtb	r3, r3
    d36a:	4313      	orrs	r3, r2
    d36c:	b25b      	sxtb	r3, r3
    d36e:	b2da      	uxtb	r2, r3
    d370:	4b09      	ldr	r3, [pc, #36]	; (d398 <usbdc_set_interface+0x128>)
    d372:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d374:	2300      	movs	r3, #0
    d376:	2200      	movs	r2, #0
    d378:	2100      	movs	r1, #0
    d37a:	2000      	movs	r0, #0
    d37c:	4c0b      	ldr	r4, [pc, #44]	; (d3ac <usbdc_set_interface+0x13c>)
    d37e:	47a0      	blx	r4
			return true;
    d380:	2301      	movs	r3, #1
    d382:	e005      	b.n	d390 <usbdc_set_interface+0x120>
		} else {
			return false;
    d384:	2300      	movs	r3, #0
    d386:	e003      	b.n	d390 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d388:	697b      	ldr	r3, [r7, #20]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d1ca      	bne.n	d324 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d38e:	2300      	movs	r3, #0
}
    d390:	4618      	mov	r0, r3
    d392:	371c      	adds	r7, #28
    d394:	46bd      	mov	sp, r7
    d396:	bd90      	pop	{r4, r7, pc}
    d398:	20000f00 	.word	0x20000f00
    d39c:	0000dad5 	.word	0x0000dad5
    d3a0:	0000cc81 	.word	0x0000cc81
    d3a4:	0000da15 	.word	0x0000da15
    d3a8:	0000cc5d 	.word	0x0000cc5d
    d3ac:	0000d785 	.word	0x0000d785

0000d3b0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d3b0:	b590      	push	{r4, r7, lr}
    d3b2:	b083      	sub	sp, #12
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	4603      	mov	r3, r0
    d3b8:	6039      	str	r1, [r7, #0]
    d3ba:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d3bc:	683b      	ldr	r3, [r7, #0]
    d3be:	785b      	ldrb	r3, [r3, #1]
    d3c0:	3b01      	subs	r3, #1
    d3c2:	2b0a      	cmp	r3, #10
    d3c4:	d85b      	bhi.n	d47e <usbdc_set_req+0xce>
    d3c6:	a201      	add	r2, pc, #4	; (adr r2, d3cc <usbdc_set_req+0x1c>)
    d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3cc:	0000d44b 	.word	0x0000d44b
    d3d0:	0000d47f 	.word	0x0000d47f
    d3d4:	0000d459 	.word	0x0000d459
    d3d8:	0000d47f 	.word	0x0000d47f
    d3dc:	0000d3f9 	.word	0x0000d3f9
    d3e0:	0000d47f 	.word	0x0000d47f
    d3e4:	0000d47f 	.word	0x0000d47f
    d3e8:	0000d47f 	.word	0x0000d47f
    d3ec:	0000d413 	.word	0x0000d413
    d3f0:	0000d47f 	.word	0x0000d47f
    d3f4:	0000d467 	.word	0x0000d467
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3f8:	79f8      	ldrb	r0, [r7, #7]
    d3fa:	2301      	movs	r3, #1
    d3fc:	2200      	movs	r2, #0
    d3fe:	2100      	movs	r1, #0
    d400:	4c21      	ldr	r4, [pc, #132]	; (d488 <usbdc_set_req+0xd8>)
    d402:	47a0      	blx	r4
    d404:	4603      	mov	r3, r0
    d406:	2b00      	cmp	r3, #0
    d408:	bf0c      	ite	eq
    d40a:	2301      	moveq	r3, #1
    d40c:	2300      	movne	r3, #0
    d40e:	b2db      	uxtb	r3, r3
    d410:	e036      	b.n	d480 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d412:	683b      	ldr	r3, [r7, #0]
    d414:	885b      	ldrh	r3, [r3, #2]
    d416:	b29b      	uxth	r3, r3
    d418:	b2db      	uxtb	r3, r3
    d41a:	4618      	mov	r0, r3
    d41c:	4b1b      	ldr	r3, [pc, #108]	; (d48c <usbdc_set_req+0xdc>)
    d41e:	4798      	blx	r3
    d420:	4603      	mov	r3, r0
    d422:	f083 0301 	eor.w	r3, r3, #1
    d426:	b2db      	uxtb	r3, r3
    d428:	2b00      	cmp	r3, #0
    d42a:	d001      	beq.n	d430 <usbdc_set_req+0x80>
			return false;
    d42c:	2300      	movs	r3, #0
    d42e:	e027      	b.n	d480 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d430:	79f8      	ldrb	r0, [r7, #7]
    d432:	2301      	movs	r3, #1
    d434:	2200      	movs	r2, #0
    d436:	2100      	movs	r1, #0
    d438:	4c13      	ldr	r4, [pc, #76]	; (d488 <usbdc_set_req+0xd8>)
    d43a:	47a0      	blx	r4
    d43c:	4603      	mov	r3, r0
    d43e:	2b00      	cmp	r3, #0
    d440:	bf0c      	ite	eq
    d442:	2301      	moveq	r3, #1
    d444:	2300      	movne	r3, #0
    d446:	b2db      	uxtb	r3, r3
    d448:	e01a      	b.n	d480 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d44a:	79fb      	ldrb	r3, [r7, #7]
    d44c:	6839      	ldr	r1, [r7, #0]
    d44e:	4618      	mov	r0, r3
    d450:	4b0f      	ldr	r3, [pc, #60]	; (d490 <usbdc_set_req+0xe0>)
    d452:	4798      	blx	r3
    d454:	4603      	mov	r3, r0
    d456:	e013      	b.n	d480 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d458:	79fb      	ldrb	r3, [r7, #7]
    d45a:	6839      	ldr	r1, [r7, #0]
    d45c:	4618      	mov	r0, r3
    d45e:	4b0d      	ldr	r3, [pc, #52]	; (d494 <usbdc_set_req+0xe4>)
    d460:	4798      	blx	r3
    d462:	4603      	mov	r3, r0
    d464:	e00c      	b.n	d480 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d466:	683b      	ldr	r3, [r7, #0]
    d468:	885b      	ldrh	r3, [r3, #2]
    d46a:	b29a      	uxth	r2, r3
    d46c:	683b      	ldr	r3, [r7, #0]
    d46e:	889b      	ldrh	r3, [r3, #4]
    d470:	b29b      	uxth	r3, r3
    d472:	4619      	mov	r1, r3
    d474:	4610      	mov	r0, r2
    d476:	4b08      	ldr	r3, [pc, #32]	; (d498 <usbdc_set_req+0xe8>)
    d478:	4798      	blx	r3
    d47a:	4603      	mov	r3, r0
    d47c:	e000      	b.n	d480 <usbdc_set_req+0xd0>
	default:
		return false;
    d47e:	2300      	movs	r3, #0
	}
}
    d480:	4618      	mov	r0, r3
    d482:	370c      	adds	r7, #12
    d484:	46bd      	mov	sp, r7
    d486:	bd90      	pop	{r4, r7, pc}
    d488:	0000d785 	.word	0x0000d785
    d48c:	0000d165 	.word	0x0000d165
    d490:	0000d081 	.word	0x0000d081
    d494:	0000d0d9 	.word	0x0000d0d9
    d498:	0000d271 	.word	0x0000d271

0000d49c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d49c:	b580      	push	{r7, lr}
    d49e:	b082      	sub	sp, #8
    d4a0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d4a2:	4b0a      	ldr	r3, [pc, #40]	; (d4cc <usbdc_sof_notify+0x30>)
    d4a4:	685b      	ldr	r3, [r3, #4]
    d4a6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d4a8:	e009      	b.n	d4be <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d4aa:	687b      	ldr	r3, [r7, #4]
    d4ac:	685b      	ldr	r3, [r3, #4]
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	d002      	beq.n	d4b8 <usbdc_sof_notify+0x1c>
			sof->cb();
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	685b      	ldr	r3, [r3, #4]
    d4b6:	4798      	blx	r3
		}
		sof = sof->next;
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d4be:	687b      	ldr	r3, [r7, #4]
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d1f2      	bne.n	d4aa <usbdc_sof_notify+0xe>
	}
}
    d4c4:	bf00      	nop
    d4c6:	3708      	adds	r7, #8
    d4c8:	46bd      	mov	sp, r7
    d4ca:	bd80      	pop	{r7, pc}
    d4cc:	20000f00 	.word	0x20000f00

0000d4d0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b084      	sub	sp, #16
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	4603      	mov	r3, r0
    d4d8:	6039      	str	r1, [r7, #0]
    d4da:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d4dc:	4b0b      	ldr	r3, [pc, #44]	; (d50c <usbdc_change_notify+0x3c>)
    d4de:	68db      	ldr	r3, [r3, #12]
    d4e0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d4e2:	e00c      	b.n	d4fe <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d4e4:	68fb      	ldr	r3, [r7, #12]
    d4e6:	685b      	ldr	r3, [r3, #4]
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	d005      	beq.n	d4f8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d4ec:	68fb      	ldr	r3, [r7, #12]
    d4ee:	685b      	ldr	r3, [r3, #4]
    d4f0:	79fa      	ldrb	r2, [r7, #7]
    d4f2:	6839      	ldr	r1, [r7, #0]
    d4f4:	4610      	mov	r0, r2
    d4f6:	4798      	blx	r3
		}
		cg = cg->next;
    d4f8:	68fb      	ldr	r3, [r7, #12]
    d4fa:	681b      	ldr	r3, [r3, #0]
    d4fc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d4fe:	68fb      	ldr	r3, [r7, #12]
    d500:	2b00      	cmp	r3, #0
    d502:	d1ef      	bne.n	d4e4 <usbdc_change_notify+0x14>
	}
}
    d504:	bf00      	nop
    d506:	3710      	adds	r7, #16
    d508:	46bd      	mov	sp, r7
    d50a:	bd80      	pop	{r7, pc}
    d50c:	20000f00 	.word	0x20000f00

0000d510 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d510:	b580      	push	{r7, lr}
    d512:	b084      	sub	sp, #16
    d514:	af00      	add	r7, sp, #0
    d516:	4603      	mov	r3, r0
    d518:	6039      	str	r1, [r7, #0]
    d51a:	71fb      	strb	r3, [r7, #7]
    d51c:	4613      	mov	r3, r2
    d51e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d520:	4b12      	ldr	r3, [pc, #72]	; (d56c <usbdc_request_handler+0x5c>)
    d522:	689b      	ldr	r3, [r3, #8]
    d524:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d526:	e019      	b.n	d55c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	685b      	ldr	r3, [r3, #4]
    d52c:	2b00      	cmp	r3, #0
    d52e:	d012      	beq.n	d556 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d530:	68fb      	ldr	r3, [r7, #12]
    d532:	685b      	ldr	r3, [r3, #4]
    d534:	79ba      	ldrb	r2, [r7, #6]
    d536:	79f8      	ldrb	r0, [r7, #7]
    d538:	6839      	ldr	r1, [r7, #0]
    d53a:	4798      	blx	r3
    d53c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d53e:	68bb      	ldr	r3, [r7, #8]
    d540:	2b00      	cmp	r3, #0
    d542:	d101      	bne.n	d548 <usbdc_request_handler+0x38>
				return true;
    d544:	2301      	movs	r3, #1
    d546:	e00d      	b.n	d564 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d548:	68bb      	ldr	r3, [r7, #8]
    d54a:	f113 0f0a 	cmn.w	r3, #10
    d54e:	d002      	beq.n	d556 <usbdc_request_handler+0x46>
				return -1;
    d550:	f04f 33ff 	mov.w	r3, #4294967295
    d554:	e006      	b.n	d564 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	681b      	ldr	r3, [r3, #0]
    d55a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d55c:	68fb      	ldr	r3, [r7, #12]
    d55e:	2b00      	cmp	r3, #0
    d560:	d1e2      	bne.n	d528 <usbdc_request_handler+0x18>
	}
	return false;
    d562:	2300      	movs	r3, #0
}
    d564:	4618      	mov	r0, r3
    d566:	3710      	adds	r7, #16
    d568:	46bd      	mov	sp, r7
    d56a:	bd80      	pop	{r7, pc}
    d56c:	20000f00 	.word	0x20000f00

0000d570 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d570:	b580      	push	{r7, lr}
    d572:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d574:	4b01      	ldr	r3, [pc, #4]	; (d57c <usbd_sof_cb+0xc>)
    d576:	4798      	blx	r3
}
    d578:	bf00      	nop
    d57a:	bd80      	pop	{r7, pc}
    d57c:	0000d49d 	.word	0x0000d49d

0000d580 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d580:	b580      	push	{r7, lr}
    d582:	b082      	sub	sp, #8
    d584:	af00      	add	r7, sp, #0
    d586:	4603      	mov	r3, r0
    d588:	6039      	str	r1, [r7, #0]
    d58a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d58c:	79fb      	ldrb	r3, [r7, #7]
    d58e:	2200      	movs	r2, #0
    d590:	6839      	ldr	r1, [r7, #0]
    d592:	4618      	mov	r0, r3
    d594:	4b14      	ldr	r3, [pc, #80]	; (d5e8 <usbdc_cb_ctl_req+0x68>)
    d596:	4798      	blx	r3
    d598:	4603      	mov	r3, r0
    d59a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d59e:	d00b      	beq.n	d5b8 <usbdc_cb_ctl_req+0x38>
    d5a0:	2b01      	cmp	r3, #1
    d5a2:	d007      	beq.n	d5b4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d5a4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d5a6:	683b      	ldr	r3, [r7, #0]
    d5a8:	781b      	ldrb	r3, [r3, #0]
    d5aa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d5ae:	2b00      	cmp	r3, #0
    d5b0:	d007      	beq.n	d5c2 <usbdc_cb_ctl_req+0x42>
    d5b2:	e003      	b.n	d5bc <usbdc_cb_ctl_req+0x3c>
		return true;
    d5b4:	2301      	movs	r3, #1
    d5b6:	e013      	b.n	d5e0 <usbdc_cb_ctl_req+0x60>
		return false;
    d5b8:	2300      	movs	r3, #0
    d5ba:	e011      	b.n	d5e0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d5bc:	2b80      	cmp	r3, #128	; 0x80
    d5be:	d007      	beq.n	d5d0 <usbdc_cb_ctl_req+0x50>
    d5c0:	e00d      	b.n	d5de <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d5c2:	79fb      	ldrb	r3, [r7, #7]
    d5c4:	6839      	ldr	r1, [r7, #0]
    d5c6:	4618      	mov	r0, r3
    d5c8:	4b08      	ldr	r3, [pc, #32]	; (d5ec <usbdc_cb_ctl_req+0x6c>)
    d5ca:	4798      	blx	r3
    d5cc:	4603      	mov	r3, r0
    d5ce:	e007      	b.n	d5e0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d5d0:	79fb      	ldrb	r3, [r7, #7]
    d5d2:	6839      	ldr	r1, [r7, #0]
    d5d4:	4618      	mov	r0, r3
    d5d6:	4b06      	ldr	r3, [pc, #24]	; (d5f0 <usbdc_cb_ctl_req+0x70>)
    d5d8:	4798      	blx	r3
    d5da:	4603      	mov	r3, r0
    d5dc:	e000      	b.n	d5e0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d5de:	2300      	movs	r3, #0
	}
}
    d5e0:	4618      	mov	r0, r3
    d5e2:	3708      	adds	r7, #8
    d5e4:	46bd      	mov	sp, r7
    d5e6:	bd80      	pop	{r7, pc}
    d5e8:	0000d511 	.word	0x0000d511
    d5ec:	0000d3b1 	.word	0x0000d3b1
    d5f0:	0000cfd9 	.word	0x0000cfd9

0000d5f4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d5f4:	b580      	push	{r7, lr}
    d5f6:	b082      	sub	sp, #8
    d5f8:	af00      	add	r7, sp, #0
    d5fa:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d5fc:	687b      	ldr	r3, [r7, #4]
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	2b00      	cmp	r3, #0
    d602:	d135      	bne.n	d670 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d604:	687b      	ldr	r3, [r7, #4]
    d606:	785b      	ldrb	r3, [r3, #1]
    d608:	2b05      	cmp	r3, #5
    d60a:	d019      	beq.n	d640 <usbdc_ctrl_status_end+0x4c>
    d60c:	2b09      	cmp	r3, #9
    d60e:	d000      	beq.n	d612 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d610:	e02f      	b.n	d672 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d612:	687b      	ldr	r3, [r7, #4]
    d614:	885b      	ldrh	r3, [r3, #2]
    d616:	b29b      	uxth	r3, r3
    d618:	b2da      	uxtb	r2, r3
    d61a:	4b17      	ldr	r3, [pc, #92]	; (d678 <usbdc_ctrl_status_end+0x84>)
    d61c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d61e:	687b      	ldr	r3, [r7, #4]
    d620:	885b      	ldrh	r3, [r3, #2]
    d622:	b29b      	uxth	r3, r3
    d624:	2b00      	cmp	r3, #0
    d626:	d001      	beq.n	d62c <usbdc_ctrl_status_end+0x38>
    d628:	2204      	movs	r2, #4
    d62a:	e000      	b.n	d62e <usbdc_ctrl_status_end+0x3a>
    d62c:	2203      	movs	r2, #3
    d62e:	4b12      	ldr	r3, [pc, #72]	; (d678 <usbdc_ctrl_status_end+0x84>)
    d630:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d632:	4b11      	ldr	r3, [pc, #68]	; (d678 <usbdc_ctrl_status_end+0x84>)
    d634:	7e9b      	ldrb	r3, [r3, #26]
    d636:	4619      	mov	r1, r3
    d638:	2001      	movs	r0, #1
    d63a:	4b10      	ldr	r3, [pc, #64]	; (d67c <usbdc_ctrl_status_end+0x88>)
    d63c:	4798      	blx	r3
		break;
    d63e:	e018      	b.n	d672 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d640:	687b      	ldr	r3, [r7, #4]
    d642:	885b      	ldrh	r3, [r3, #2]
    d644:	b29b      	uxth	r3, r3
    d646:	b2db      	uxtb	r3, r3
    d648:	4618      	mov	r0, r3
    d64a:	4b0d      	ldr	r3, [pc, #52]	; (d680 <usbdc_ctrl_status_end+0x8c>)
    d64c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d64e:	687b      	ldr	r3, [r7, #4]
    d650:	885b      	ldrh	r3, [r3, #2]
    d652:	b29b      	uxth	r3, r3
    d654:	2b00      	cmp	r3, #0
    d656:	d001      	beq.n	d65c <usbdc_ctrl_status_end+0x68>
    d658:	2203      	movs	r2, #3
    d65a:	e000      	b.n	d65e <usbdc_ctrl_status_end+0x6a>
    d65c:	2202      	movs	r2, #2
    d65e:	4b06      	ldr	r3, [pc, #24]	; (d678 <usbdc_ctrl_status_end+0x84>)
    d660:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d662:	4b05      	ldr	r3, [pc, #20]	; (d678 <usbdc_ctrl_status_end+0x84>)
    d664:	7e9b      	ldrb	r3, [r3, #26]
    d666:	4619      	mov	r1, r3
    d668:	2001      	movs	r0, #1
    d66a:	4b04      	ldr	r3, [pc, #16]	; (d67c <usbdc_ctrl_status_end+0x88>)
    d66c:	4798      	blx	r3
		break;
    d66e:	e000      	b.n	d672 <usbdc_ctrl_status_end+0x7e>
		return;
    d670:	bf00      	nop
	}
}
    d672:	3708      	adds	r7, #8
    d674:	46bd      	mov	sp, r7
    d676:	bd80      	pop	{r7, pc}
    d678:	20000f00 	.word	0x20000f00
    d67c:	0000d4d1 	.word	0x0000d4d1
    d680:	0000d251 	.word	0x0000d251

0000d684 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d684:	b580      	push	{r7, lr}
    d686:	b082      	sub	sp, #8
    d688:	af00      	add	r7, sp, #0
    d68a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d68c:	2201      	movs	r2, #1
    d68e:	6879      	ldr	r1, [r7, #4]
    d690:	2000      	movs	r0, #0
    d692:	4b03      	ldr	r3, [pc, #12]	; (d6a0 <usbdc_ctrl_data_end+0x1c>)
    d694:	4798      	blx	r3
	return false;
    d696:	2300      	movs	r3, #0
}
    d698:	4618      	mov	r0, r3
    d69a:	3708      	adds	r7, #8
    d69c:	46bd      	mov	sp, r7
    d69e:	bd80      	pop	{r7, pc}
    d6a0:	0000d511 	.word	0x0000d511

0000d6a4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b082      	sub	sp, #8
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	4603      	mov	r3, r0
    d6ac:	603a      	str	r2, [r7, #0]
    d6ae:	71fb      	strb	r3, [r7, #7]
    d6b0:	460b      	mov	r3, r1
    d6b2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d6b4:	79bb      	ldrb	r3, [r7, #6]
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d002      	beq.n	d6c0 <usbdc_cb_ctl_done+0x1c>
    d6ba:	2b01      	cmp	r3, #1
    d6bc:	d004      	beq.n	d6c8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d6be:	e008      	b.n	d6d2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d6c0:	6838      	ldr	r0, [r7, #0]
    d6c2:	4b06      	ldr	r3, [pc, #24]	; (d6dc <usbdc_cb_ctl_done+0x38>)
    d6c4:	4798      	blx	r3
		break;
    d6c6:	e004      	b.n	d6d2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d6c8:	6838      	ldr	r0, [r7, #0]
    d6ca:	4b05      	ldr	r3, [pc, #20]	; (d6e0 <usbdc_cb_ctl_done+0x3c>)
    d6cc:	4798      	blx	r3
    d6ce:	4603      	mov	r3, r0
    d6d0:	e000      	b.n	d6d4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d6d2:	2300      	movs	r3, #0
}
    d6d4:	4618      	mov	r0, r3
    d6d6:	3708      	adds	r7, #8
    d6d8:	46bd      	mov	sp, r7
    d6da:	bd80      	pop	{r7, pc}
    d6dc:	0000d5f5 	.word	0x0000d5f5
    d6e0:	0000d685 	.word	0x0000d685

0000d6e4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d6e4:	b580      	push	{r7, lr}
    d6e6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d6e8:	4b10      	ldr	r3, [pc, #64]	; (d72c <usbdc_reset+0x48>)
    d6ea:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d6ec:	4b10      	ldr	r3, [pc, #64]	; (d730 <usbdc_reset+0x4c>)
    d6ee:	2202      	movs	r2, #2
    d6f0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d6f2:	4b0f      	ldr	r3, [pc, #60]	; (d730 <usbdc_reset+0x4c>)
    d6f4:	2200      	movs	r2, #0
    d6f6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d6f8:	4b0d      	ldr	r3, [pc, #52]	; (d730 <usbdc_reset+0x4c>)
    d6fa:	2200      	movs	r2, #0
    d6fc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d6fe:	2000      	movs	r0, #0
    d700:	4b0c      	ldr	r3, [pc, #48]	; (d734 <usbdc_reset+0x50>)
    d702:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d704:	4b0a      	ldr	r3, [pc, #40]	; (d730 <usbdc_reset+0x4c>)
    d706:	7f1b      	ldrb	r3, [r3, #28]
    d708:	4618      	mov	r0, r3
    d70a:	4b0b      	ldr	r3, [pc, #44]	; (d738 <usbdc_reset+0x54>)
    d70c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d70e:	4a0b      	ldr	r2, [pc, #44]	; (d73c <usbdc_reset+0x58>)
    d710:	2100      	movs	r1, #0
    d712:	2000      	movs	r0, #0
    d714:	4b0a      	ldr	r3, [pc, #40]	; (d740 <usbdc_reset+0x5c>)
    d716:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d718:	4a0a      	ldr	r2, [pc, #40]	; (d744 <usbdc_reset+0x60>)
    d71a:	2102      	movs	r1, #2
    d71c:	2000      	movs	r0, #0
    d71e:	4b08      	ldr	r3, [pc, #32]	; (d740 <usbdc_reset+0x5c>)
    d720:	4798      	blx	r3
	usb_d_ep_enable(0);
    d722:	2000      	movs	r0, #0
    d724:	4b08      	ldr	r3, [pc, #32]	; (d748 <usbdc_reset+0x64>)
    d726:	4798      	blx	r3
}
    d728:	bf00      	nop
    d72a:	bd80      	pop	{r7, pc}
    d72c:	0000d131 	.word	0x0000d131
    d730:	20000f00 	.word	0x20000f00
    d734:	000037d1 	.word	0x000037d1
    d738:	0000370d 	.word	0x0000370d
    d73c:	0000d581 	.word	0x0000d581
    d740:	00003b25 	.word	0x00003b25
    d744:	0000d6a5 	.word	0x0000d6a5
    d748:	00003821 	.word	0x00003821

0000d74c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d74c:	b580      	push	{r7, lr}
    d74e:	b082      	sub	sp, #8
    d750:	af00      	add	r7, sp, #0
    d752:	4603      	mov	r3, r0
    d754:	6039      	str	r1, [r7, #0]
    d756:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d758:	79fb      	ldrb	r3, [r7, #7]
    d75a:	2b00      	cmp	r3, #0
    d75c:	d002      	beq.n	d764 <usbd_event_cb+0x18>
    d75e:	2b01      	cmp	r3, #1
    d760:	d005      	beq.n	d76e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d762:	e007      	b.n	d774 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d764:	6839      	ldr	r1, [r7, #0]
    d766:	2000      	movs	r0, #0
    d768:	4b04      	ldr	r3, [pc, #16]	; (d77c <usbd_event_cb+0x30>)
    d76a:	4798      	blx	r3
		break;
    d76c:	e002      	b.n	d774 <usbd_event_cb+0x28>
		usbdc_reset();
    d76e:	4b04      	ldr	r3, [pc, #16]	; (d780 <usbd_event_cb+0x34>)
    d770:	4798      	blx	r3
		break;
    d772:	bf00      	nop
	}
}
    d774:	bf00      	nop
    d776:	3708      	adds	r7, #8
    d778:	46bd      	mov	sp, r7
    d77a:	bd80      	pop	{r7, pc}
    d77c:	0000d4d1 	.word	0x0000d4d1
    d780:	0000d6e5 	.word	0x0000d6e5

0000d784 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d784:	b580      	push	{r7, lr}
    d786:	b088      	sub	sp, #32
    d788:	af00      	add	r7, sp, #0
    d78a:	60b9      	str	r1, [r7, #8]
    d78c:	607a      	str	r2, [r7, #4]
    d78e:	461a      	mov	r2, r3
    d790:	4603      	mov	r3, r0
    d792:	73fb      	strb	r3, [r7, #15]
    d794:	4613      	mov	r3, r2
    d796:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d798:	68bb      	ldr	r3, [r7, #8]
    d79a:	617b      	str	r3, [r7, #20]
    d79c:	687b      	ldr	r3, [r7, #4]
    d79e:	61bb      	str	r3, [r7, #24]
    d7a0:	7bfb      	ldrb	r3, [r7, #15]
    d7a2:	773b      	strb	r3, [r7, #28]
    d7a4:	7bbb      	ldrb	r3, [r7, #14]
    d7a6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d7a8:	f107 0314 	add.w	r3, r7, #20
    d7ac:	4618      	mov	r0, r3
    d7ae:	4b03      	ldr	r3, [pc, #12]	; (d7bc <usbdc_xfer+0x38>)
    d7b0:	4798      	blx	r3
    d7b2:	4603      	mov	r3, r0
}
    d7b4:	4618      	mov	r0, r3
    d7b6:	3720      	adds	r7, #32
    d7b8:	46bd      	mov	sp, r7
    d7ba:	bd80      	pop	{r7, pc}
    d7bc:	00003891 	.word	0x00003891

0000d7c0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d7c0:	b580      	push	{r7, lr}
    d7c2:	b082      	sub	sp, #8
    d7c4:	af00      	add	r7, sp, #0
    d7c6:	4603      	mov	r3, r0
    d7c8:	6039      	str	r1, [r7, #0]
    d7ca:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d7cc:	79fb      	ldrb	r3, [r7, #7]
    d7ce:	2b01      	cmp	r3, #1
    d7d0:	d009      	beq.n	d7e6 <usbdc_register_handler+0x26>
    d7d2:	2b02      	cmp	r3, #2
    d7d4:	d00c      	beq.n	d7f0 <usbdc_register_handler+0x30>
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d000      	beq.n	d7dc <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d7da:	e00e      	b.n	d7fa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d7dc:	6839      	ldr	r1, [r7, #0]
    d7de:	4809      	ldr	r0, [pc, #36]	; (d804 <usbdc_register_handler+0x44>)
    d7e0:	4b09      	ldr	r3, [pc, #36]	; (d808 <usbdc_register_handler+0x48>)
    d7e2:	4798      	blx	r3
		break;
    d7e4:	e009      	b.n	d7fa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d7e6:	6839      	ldr	r1, [r7, #0]
    d7e8:	4808      	ldr	r0, [pc, #32]	; (d80c <usbdc_register_handler+0x4c>)
    d7ea:	4b07      	ldr	r3, [pc, #28]	; (d808 <usbdc_register_handler+0x48>)
    d7ec:	4798      	blx	r3
		break;
    d7ee:	e004      	b.n	d7fa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d7f0:	6839      	ldr	r1, [r7, #0]
    d7f2:	4807      	ldr	r0, [pc, #28]	; (d810 <usbdc_register_handler+0x50>)
    d7f4:	4b04      	ldr	r3, [pc, #16]	; (d808 <usbdc_register_handler+0x48>)
    d7f6:	4798      	blx	r3
		break;
    d7f8:	bf00      	nop
	}
}
    d7fa:	bf00      	nop
    d7fc:	3708      	adds	r7, #8
    d7fe:	46bd      	mov	sp, r7
    d800:	bd80      	pop	{r7, pc}
    d802:	bf00      	nop
    d804:	20000f04 	.word	0x20000f04
    d808:	00003c7d 	.word	0x00003c7d
    d80c:	20000f08 	.word	0x20000f08
    d810:	20000f0c 	.word	0x20000f0c

0000d814 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d814:	b580      	push	{r7, lr}
    d816:	b084      	sub	sp, #16
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d81c:	687b      	ldr	r3, [r7, #4]
    d81e:	2b00      	cmp	r3, #0
    d820:	bf14      	ite	ne
    d822:	2301      	movne	r3, #1
    d824:	2300      	moveq	r3, #0
    d826:	b2db      	uxtb	r3, r3
    d828:	f240 3255 	movw	r2, #853	; 0x355
    d82c:	4910      	ldr	r1, [pc, #64]	; (d870 <usbdc_init+0x5c>)
    d82e:	4618      	mov	r0, r3
    d830:	4b10      	ldr	r3, [pc, #64]	; (d874 <usbdc_init+0x60>)
    d832:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d834:	4b10      	ldr	r3, [pc, #64]	; (d878 <usbdc_init+0x64>)
    d836:	4798      	blx	r3
    d838:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d83a:	68fb      	ldr	r3, [r7, #12]
    d83c:	2b00      	cmp	r3, #0
    d83e:	da01      	bge.n	d844 <usbdc_init+0x30>
		return rc;
    d840:	68fb      	ldr	r3, [r7, #12]
    d842:	e010      	b.n	d866 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d844:	2220      	movs	r2, #32
    d846:	2100      	movs	r1, #0
    d848:	480c      	ldr	r0, [pc, #48]	; (d87c <usbdc_init+0x68>)
    d84a:	4b0d      	ldr	r3, [pc, #52]	; (d880 <usbdc_init+0x6c>)
    d84c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d84e:	4a0b      	ldr	r2, [pc, #44]	; (d87c <usbdc_init+0x68>)
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d854:	490b      	ldr	r1, [pc, #44]	; (d884 <usbdc_init+0x70>)
    d856:	2000      	movs	r0, #0
    d858:	4b0b      	ldr	r3, [pc, #44]	; (d888 <usbdc_init+0x74>)
    d85a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d85c:	490b      	ldr	r1, [pc, #44]	; (d88c <usbdc_init+0x78>)
    d85e:	2001      	movs	r0, #1
    d860:	4b09      	ldr	r3, [pc, #36]	; (d888 <usbdc_init+0x74>)
    d862:	4798      	blx	r3

	return 0;
    d864:	2300      	movs	r3, #0
}
    d866:	4618      	mov	r0, r3
    d868:	3710      	adds	r7, #16
    d86a:	46bd      	mov	sp, r7
    d86c:	bd80      	pop	{r7, pc}
    d86e:	bf00      	nop
    d870:	000102f8 	.word	0x000102f8
    d874:	00003ba1 	.word	0x00003ba1
    d878:	000035f9 	.word	0x000035f9
    d87c:	20000f00 	.word	0x20000f00
    d880:	0000fba9 	.word	0x0000fba9
    d884:	0000d571 	.word	0x0000d571
    d888:	000036a5 	.word	0x000036a5
    d88c:	0000d74d 	.word	0x0000d74d

0000d890 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d890:	b580      	push	{r7, lr}
    d892:	b082      	sub	sp, #8
    d894:	af00      	add	r7, sp, #0
    d896:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d898:	6879      	ldr	r1, [r7, #4]
    d89a:	4803      	ldr	r0, [pc, #12]	; (d8a8 <usbdc_register_function+0x18>)
    d89c:	4b03      	ldr	r3, [pc, #12]	; (d8ac <usbdc_register_function+0x1c>)
    d89e:	4798      	blx	r3
}
    d8a0:	bf00      	nop
    d8a2:	3708      	adds	r7, #8
    d8a4:	46bd      	mov	sp, r7
    d8a6:	bd80      	pop	{r7, pc}
    d8a8:	20000f10 	.word	0x20000f10
    d8ac:	00003c7d 	.word	0x00003c7d

0000d8b0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d8b0:	b580      	push	{r7, lr}
    d8b2:	b082      	sub	sp, #8
    d8b4:	af00      	add	r7, sp, #0
    d8b6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d8b8:	4b0f      	ldr	r3, [pc, #60]	; (d8f8 <usbdc_start+0x48>)
    d8ba:	7e9b      	ldrb	r3, [r3, #26]
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d002      	beq.n	d8c6 <usbdc_start+0x16>
		return ERR_BUSY;
    d8c0:	f06f 0303 	mvn.w	r3, #3
    d8c4:	e013      	b.n	d8ee <usbdc_start+0x3e>
	}

	if (desces) {
    d8c6:	687b      	ldr	r3, [r7, #4]
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d00e      	beq.n	d8ea <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d8cc:	4a0a      	ldr	r2, [pc, #40]	; (d8f8 <usbdc_start+0x48>)
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d8d2:	687b      	ldr	r3, [r7, #4]
    d8d4:	681b      	ldr	r3, [r3, #0]
    d8d6:	79da      	ldrb	r2, [r3, #7]
    d8d8:	4b07      	ldr	r3, [pc, #28]	; (d8f8 <usbdc_start+0x48>)
    d8da:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d8dc:	4b06      	ldr	r3, [pc, #24]	; (d8f8 <usbdc_start+0x48>)
    d8de:	2201      	movs	r2, #1
    d8e0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d8e2:	4b06      	ldr	r3, [pc, #24]	; (d8fc <usbdc_start+0x4c>)
    d8e4:	4798      	blx	r3
	return ERR_NONE;
    d8e6:	2300      	movs	r3, #0
    d8e8:	e001      	b.n	d8ee <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d8ea:	f06f 0308 	mvn.w	r3, #8
}
    d8ee:	4618      	mov	r0, r3
    d8f0:	3708      	adds	r7, #8
    d8f2:	46bd      	mov	sp, r7
    d8f4:	bd80      	pop	{r7, pc}
    d8f6:	bf00      	nop
    d8f8:	20000f00 	.word	0x20000f00
    d8fc:	000036c9 	.word	0x000036c9

0000d900 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d900:	b580      	push	{r7, lr}
    d902:	af00      	add	r7, sp, #0
	usb_d_attach();
    d904:	4b01      	ldr	r3, [pc, #4]	; (d90c <usbdc_attach+0xc>)
    d906:	4798      	blx	r3
}
    d908:	bf00      	nop
    d90a:	bd80      	pop	{r7, pc}
    d90c:	000036dd 	.word	0x000036dd

0000d910 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d910:	b480      	push	{r7}
    d912:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d914:	4b03      	ldr	r3, [pc, #12]	; (d924 <usbdc_get_ctrl_buffer+0x14>)
    d916:	695b      	ldr	r3, [r3, #20]
}
    d918:	4618      	mov	r0, r3
    d91a:	46bd      	mov	sp, r7
    d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d920:	4770      	bx	lr
    d922:	bf00      	nop
    d924:	20000f00 	.word	0x20000f00

0000d928 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d928:	b480      	push	{r7}
    d92a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d92c:	4b07      	ldr	r3, [pc, #28]	; (d94c <usbdc_get_state+0x24>)
    d92e:	7e9b      	ldrb	r3, [r3, #26]
    d930:	f003 0310 	and.w	r3, r3, #16
    d934:	2b00      	cmp	r3, #0
    d936:	d001      	beq.n	d93c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d938:	2310      	movs	r3, #16
    d93a:	e001      	b.n	d940 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d93c:	4b03      	ldr	r3, [pc, #12]	; (d94c <usbdc_get_state+0x24>)
    d93e:	7e9b      	ldrb	r3, [r3, #26]
}
    d940:	4618      	mov	r0, r3
    d942:	46bd      	mov	sp, r7
    d944:	f85d 7b04 	ldr.w	r7, [sp], #4
    d948:	4770      	bx	lr
    d94a:	bf00      	nop
    d94c:	20000f00 	.word	0x20000f00

0000d950 <usb_get_u16>:
{
    d950:	b480      	push	{r7}
    d952:	b083      	sub	sp, #12
    d954:	af00      	add	r7, sp, #0
    d956:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d958:	687b      	ldr	r3, [r7, #4]
    d95a:	781b      	ldrb	r3, [r3, #0]
    d95c:	b29a      	uxth	r2, r3
    d95e:	687b      	ldr	r3, [r7, #4]
    d960:	3301      	adds	r3, #1
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	b29b      	uxth	r3, r3
    d966:	021b      	lsls	r3, r3, #8
    d968:	b29b      	uxth	r3, r3
    d96a:	4413      	add	r3, r2
    d96c:	b29b      	uxth	r3, r3
}
    d96e:	4618      	mov	r0, r3
    d970:	370c      	adds	r7, #12
    d972:	46bd      	mov	sp, r7
    d974:	f85d 7b04 	ldr.w	r7, [sp], #4
    d978:	4770      	bx	lr

0000d97a <usb_desc_len>:
{
    d97a:	b480      	push	{r7}
    d97c:	b083      	sub	sp, #12
    d97e:	af00      	add	r7, sp, #0
    d980:	6078      	str	r0, [r7, #4]
	return desc[0];
    d982:	687b      	ldr	r3, [r7, #4]
    d984:	781b      	ldrb	r3, [r3, #0]
}
    d986:	4618      	mov	r0, r3
    d988:	370c      	adds	r7, #12
    d98a:	46bd      	mov	sp, r7
    d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d990:	4770      	bx	lr

0000d992 <usb_desc_type>:
{
    d992:	b480      	push	{r7}
    d994:	b083      	sub	sp, #12
    d996:	af00      	add	r7, sp, #0
    d998:	6078      	str	r0, [r7, #4]
	return desc[1];
    d99a:	687b      	ldr	r3, [r7, #4]
    d99c:	3301      	adds	r3, #1
    d99e:	781b      	ldrb	r3, [r3, #0]
}
    d9a0:	4618      	mov	r0, r3
    d9a2:	370c      	adds	r7, #12
    d9a4:	46bd      	mov	sp, r7
    d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9aa:	4770      	bx	lr

0000d9ac <usb_desc_next>:
{
    d9ac:	b580      	push	{r7, lr}
    d9ae:	b082      	sub	sp, #8
    d9b0:	af00      	add	r7, sp, #0
    d9b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d9b4:	6878      	ldr	r0, [r7, #4]
    d9b6:	4b05      	ldr	r3, [pc, #20]	; (d9cc <usb_desc_next+0x20>)
    d9b8:	4798      	blx	r3
    d9ba:	4603      	mov	r3, r0
    d9bc:	461a      	mov	r2, r3
    d9be:	687b      	ldr	r3, [r7, #4]
    d9c0:	4413      	add	r3, r2
}
    d9c2:	4618      	mov	r0, r3
    d9c4:	3708      	adds	r7, #8
    d9c6:	46bd      	mov	sp, r7
    d9c8:	bd80      	pop	{r7, pc}
    d9ca:	bf00      	nop
    d9cc:	0000d97b 	.word	0x0000d97b

0000d9d0 <usb_cfg_desc_total_len>:
{
    d9d0:	b580      	push	{r7, lr}
    d9d2:	b082      	sub	sp, #8
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d9d8:	687b      	ldr	r3, [r7, #4]
    d9da:	3302      	adds	r3, #2
    d9dc:	4618      	mov	r0, r3
    d9de:	4b03      	ldr	r3, [pc, #12]	; (d9ec <usb_cfg_desc_total_len+0x1c>)
    d9e0:	4798      	blx	r3
    d9e2:	4603      	mov	r3, r0
}
    d9e4:	4618      	mov	r0, r3
    d9e6:	3708      	adds	r7, #8
    d9e8:	46bd      	mov	sp, r7
    d9ea:	bd80      	pop	{r7, pc}
    d9ec:	0000d951 	.word	0x0000d951

0000d9f0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d9f0:	b580      	push	{r7, lr}
    d9f2:	b082      	sub	sp, #8
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d9f8:	6878      	ldr	r0, [r7, #4]
    d9fa:	4b05      	ldr	r3, [pc, #20]	; (da10 <usb_cfg_desc_next+0x20>)
    d9fc:	4798      	blx	r3
    d9fe:	4603      	mov	r3, r0
    da00:	461a      	mov	r2, r3
    da02:	687b      	ldr	r3, [r7, #4]
    da04:	4413      	add	r3, r2
}
    da06:	4618      	mov	r0, r3
    da08:	3708      	adds	r7, #8
    da0a:	46bd      	mov	sp, r7
    da0c:	bd80      	pop	{r7, pc}
    da0e:	bf00      	nop
    da10:	0000d9d1 	.word	0x0000d9d1

0000da14 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    da14:	b580      	push	{r7, lr}
    da16:	b084      	sub	sp, #16
    da18:	af00      	add	r7, sp, #0
    da1a:	60f8      	str	r0, [r7, #12]
    da1c:	60b9      	str	r1, [r7, #8]
    da1e:	4613      	mov	r3, r2
    da20:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da22:	e015      	b.n	da50 <usb_find_desc+0x3c>
		_desc_len_check();
    da24:	68f8      	ldr	r0, [r7, #12]
    da26:	4b0f      	ldr	r3, [pc, #60]	; (da64 <usb_find_desc+0x50>)
    da28:	4798      	blx	r3
    da2a:	4603      	mov	r3, r0
    da2c:	2b01      	cmp	r3, #1
    da2e:	d801      	bhi.n	da34 <usb_find_desc+0x20>
    da30:	2300      	movs	r3, #0
    da32:	e012      	b.n	da5a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    da34:	68f8      	ldr	r0, [r7, #12]
    da36:	4b0c      	ldr	r3, [pc, #48]	; (da68 <usb_find_desc+0x54>)
    da38:	4798      	blx	r3
    da3a:	4603      	mov	r3, r0
    da3c:	461a      	mov	r2, r3
    da3e:	79fb      	ldrb	r3, [r7, #7]
    da40:	4293      	cmp	r3, r2
    da42:	d101      	bne.n	da48 <usb_find_desc+0x34>
			return desc;
    da44:	68fb      	ldr	r3, [r7, #12]
    da46:	e008      	b.n	da5a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    da48:	68f8      	ldr	r0, [r7, #12]
    da4a:	4b08      	ldr	r3, [pc, #32]	; (da6c <usb_find_desc+0x58>)
    da4c:	4798      	blx	r3
    da4e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    da50:	68fa      	ldr	r2, [r7, #12]
    da52:	68bb      	ldr	r3, [r7, #8]
    da54:	429a      	cmp	r2, r3
    da56:	d3e5      	bcc.n	da24 <usb_find_desc+0x10>
	}
	return NULL;
    da58:	2300      	movs	r3, #0
}
    da5a:	4618      	mov	r0, r3
    da5c:	3710      	adds	r7, #16
    da5e:	46bd      	mov	sp, r7
    da60:	bd80      	pop	{r7, pc}
    da62:	bf00      	nop
    da64:	0000d97b 	.word	0x0000d97b
    da68:	0000d993 	.word	0x0000d993
    da6c:	0000d9ad 	.word	0x0000d9ad

0000da70 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    da70:	b580      	push	{r7, lr}
    da72:	b082      	sub	sp, #8
    da74:	af00      	add	r7, sp, #0
    da76:	6078      	str	r0, [r7, #4]
    da78:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    da7a:	e019      	b.n	dab0 <usb_find_ep_desc+0x40>
		_desc_len_check();
    da7c:	6878      	ldr	r0, [r7, #4]
    da7e:	4b12      	ldr	r3, [pc, #72]	; (dac8 <usb_find_ep_desc+0x58>)
    da80:	4798      	blx	r3
    da82:	4603      	mov	r3, r0
    da84:	2b01      	cmp	r3, #1
    da86:	d801      	bhi.n	da8c <usb_find_ep_desc+0x1c>
    da88:	2300      	movs	r3, #0
    da8a:	e018      	b.n	dabe <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    da8c:	6878      	ldr	r0, [r7, #4]
    da8e:	4b0f      	ldr	r3, [pc, #60]	; (dacc <usb_find_ep_desc+0x5c>)
    da90:	4798      	blx	r3
    da92:	4603      	mov	r3, r0
    da94:	2b04      	cmp	r3, #4
    da96:	d010      	beq.n	daba <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    da98:	6878      	ldr	r0, [r7, #4]
    da9a:	4b0c      	ldr	r3, [pc, #48]	; (dacc <usb_find_ep_desc+0x5c>)
    da9c:	4798      	blx	r3
    da9e:	4603      	mov	r3, r0
    daa0:	2b05      	cmp	r3, #5
    daa2:	d101      	bne.n	daa8 <usb_find_ep_desc+0x38>
			return desc;
    daa4:	687b      	ldr	r3, [r7, #4]
    daa6:	e00a      	b.n	dabe <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    daa8:	6878      	ldr	r0, [r7, #4]
    daaa:	4b09      	ldr	r3, [pc, #36]	; (dad0 <usb_find_ep_desc+0x60>)
    daac:	4798      	blx	r3
    daae:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    dab0:	687a      	ldr	r2, [r7, #4]
    dab2:	683b      	ldr	r3, [r7, #0]
    dab4:	429a      	cmp	r2, r3
    dab6:	d3e1      	bcc.n	da7c <usb_find_ep_desc+0xc>
    dab8:	e000      	b.n	dabc <usb_find_ep_desc+0x4c>
			break;
    daba:	bf00      	nop
	}
	return NULL;
    dabc:	2300      	movs	r3, #0
}
    dabe:	4618      	mov	r0, r3
    dac0:	3708      	adds	r7, #8
    dac2:	46bd      	mov	sp, r7
    dac4:	bd80      	pop	{r7, pc}
    dac6:	bf00      	nop
    dac8:	0000d97b 	.word	0x0000d97b
    dacc:	0000d993 	.word	0x0000d993
    dad0:	0000d9ad 	.word	0x0000d9ad

0000dad4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    dad4:	b580      	push	{r7, lr}
    dad6:	b084      	sub	sp, #16
    dad8:	af00      	add	r7, sp, #0
    dada:	60f8      	str	r0, [r7, #12]
    dadc:	60b9      	str	r1, [r7, #8]
    dade:	4613      	mov	r3, r2
    dae0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    dae2:	2202      	movs	r2, #2
    dae4:	68b9      	ldr	r1, [r7, #8]
    dae6:	68f8      	ldr	r0, [r7, #12]
    dae8:	4b15      	ldr	r3, [pc, #84]	; (db40 <usb_find_cfg_desc+0x6c>)
    daea:	4798      	blx	r3
    daec:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    daee:	68fb      	ldr	r3, [r7, #12]
    daf0:	2b00      	cmp	r3, #0
    daf2:	d11a      	bne.n	db2a <usb_find_cfg_desc+0x56>
		return NULL;
    daf4:	2300      	movs	r3, #0
    daf6:	e01f      	b.n	db38 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    daf8:	68f8      	ldr	r0, [r7, #12]
    dafa:	4b12      	ldr	r3, [pc, #72]	; (db44 <usb_find_cfg_desc+0x70>)
    dafc:	4798      	blx	r3
    dafe:	4603      	mov	r3, r0
    db00:	2b01      	cmp	r3, #1
    db02:	d801      	bhi.n	db08 <usb_find_cfg_desc+0x34>
    db04:	2300      	movs	r3, #0
    db06:	e017      	b.n	db38 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    db08:	68fb      	ldr	r3, [r7, #12]
    db0a:	3301      	adds	r3, #1
    db0c:	781b      	ldrb	r3, [r3, #0]
    db0e:	2b02      	cmp	r3, #2
    db10:	d110      	bne.n	db34 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    db12:	68fb      	ldr	r3, [r7, #12]
    db14:	3305      	adds	r3, #5
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	79fa      	ldrb	r2, [r7, #7]
    db1a:	429a      	cmp	r2, r3
    db1c:	d101      	bne.n	db22 <usb_find_cfg_desc+0x4e>
			return desc;
    db1e:	68fb      	ldr	r3, [r7, #12]
    db20:	e00a      	b.n	db38 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    db22:	68f8      	ldr	r0, [r7, #12]
    db24:	4b08      	ldr	r3, [pc, #32]	; (db48 <usb_find_cfg_desc+0x74>)
    db26:	4798      	blx	r3
    db28:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    db2a:	68fa      	ldr	r2, [r7, #12]
    db2c:	68bb      	ldr	r3, [r7, #8]
    db2e:	429a      	cmp	r2, r3
    db30:	d3e2      	bcc.n	daf8 <usb_find_cfg_desc+0x24>
    db32:	e000      	b.n	db36 <usb_find_cfg_desc+0x62>
			break;
    db34:	bf00      	nop
	}
	return NULL;
    db36:	2300      	movs	r3, #0
}
    db38:	4618      	mov	r0, r3
    db3a:	3710      	adds	r7, #16
    db3c:	46bd      	mov	sp, r7
    db3e:	bd80      	pop	{r7, pc}
    db40:	0000da15 	.word	0x0000da15
    db44:	0000d97b 	.word	0x0000d97b
    db48:	0000d9f1 	.word	0x0000d9f1

0000db4c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    db4c:	b580      	push	{r7, lr}
    db4e:	b086      	sub	sp, #24
    db50:	af00      	add	r7, sp, #0
    db52:	60f8      	str	r0, [r7, #12]
    db54:	60b9      	str	r1, [r7, #8]
    db56:	4613      	mov	r3, r2
    db58:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    db5a:	2300      	movs	r3, #0
    db5c:	75fb      	strb	r3, [r7, #23]
    db5e:	e020      	b.n	dba2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    db60:	2203      	movs	r2, #3
    db62:	68b9      	ldr	r1, [r7, #8]
    db64:	68f8      	ldr	r0, [r7, #12]
    db66:	4b13      	ldr	r3, [pc, #76]	; (dbb4 <usb_find_str_desc+0x68>)
    db68:	4798      	blx	r3
    db6a:	60f8      	str	r0, [r7, #12]
		if (desc) {
    db6c:	68fb      	ldr	r3, [r7, #12]
    db6e:	2b00      	cmp	r3, #0
    db70:	d015      	beq.n	db9e <usb_find_str_desc+0x52>
			_desc_len_check();
    db72:	68f8      	ldr	r0, [r7, #12]
    db74:	4b10      	ldr	r3, [pc, #64]	; (dbb8 <usb_find_str_desc+0x6c>)
    db76:	4798      	blx	r3
    db78:	4603      	mov	r3, r0
    db7a:	2b01      	cmp	r3, #1
    db7c:	d801      	bhi.n	db82 <usb_find_str_desc+0x36>
    db7e:	2300      	movs	r3, #0
    db80:	e014      	b.n	dbac <usb_find_str_desc+0x60>
			if (i == str_index) {
    db82:	7dfa      	ldrb	r2, [r7, #23]
    db84:	79fb      	ldrb	r3, [r7, #7]
    db86:	429a      	cmp	r2, r3
    db88:	d101      	bne.n	db8e <usb_find_str_desc+0x42>
				return desc;
    db8a:	68fb      	ldr	r3, [r7, #12]
    db8c:	e00e      	b.n	dbac <usb_find_str_desc+0x60>
			}
			i++;
    db8e:	7dfb      	ldrb	r3, [r7, #23]
    db90:	3301      	adds	r3, #1
    db92:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    db94:	68f8      	ldr	r0, [r7, #12]
    db96:	4b09      	ldr	r3, [pc, #36]	; (dbbc <usb_find_str_desc+0x70>)
    db98:	4798      	blx	r3
    db9a:	60f8      	str	r0, [r7, #12]
    db9c:	e001      	b.n	dba2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    db9e:	2300      	movs	r3, #0
    dba0:	e004      	b.n	dbac <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    dba2:	68fa      	ldr	r2, [r7, #12]
    dba4:	68bb      	ldr	r3, [r7, #8]
    dba6:	429a      	cmp	r2, r3
    dba8:	d3da      	bcc.n	db60 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    dbaa:	2300      	movs	r3, #0
}
    dbac:	4618      	mov	r0, r3
    dbae:	3718      	adds	r7, #24
    dbb0:	46bd      	mov	sp, r7
    dbb2:	bd80      	pop	{r7, pc}
    dbb4:	0000da15 	.word	0x0000da15
    dbb8:	0000d97b 	.word	0x0000d97b
    dbbc:	0000d9ad 	.word	0x0000d9ad

0000dbc0 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    dbc0:	b480      	push	{r7}
    dbc2:	b083      	sub	sp, #12
    dbc4:	af00      	add	r7, sp, #0
    dbc6:	6078      	str	r0, [r7, #4]
    dbc8:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	683a      	ldr	r2, [r7, #0]
    dbce:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    dbd0:	687b      	ldr	r3, [r7, #4]
    dbd2:	4618      	mov	r0, r3
    dbd4:	370c      	adds	r7, #12
    dbd6:	46bd      	mov	sp, r7
    dbd8:	bc80      	pop	{r7}
    dbda:	4770      	bx	lr

0000dbdc <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    dbdc:	b480      	push	{r7}
    dbde:	b083      	sub	sp, #12
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    dbe4:	687b      	ldr	r3, [r7, #4]
    dbe6:	4618      	mov	r0, r3
    dbe8:	370c      	adds	r7, #12
    dbea:	46bd      	mov	sp, r7
    dbec:	bc80      	pop	{r7}
    dbee:	4770      	bx	lr

0000dbf0 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b084      	sub	sp, #16
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	4a14      	ldr	r2, [pc, #80]	; (dc4c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    dbfc:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    dbfe:	687b      	ldr	r3, [r7, #4]
    dc00:	4a12      	ldr	r2, [pc, #72]	; (dc4c <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    dc02:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    dc04:	687b      	ldr	r3, [r7, #4]
    dc06:	691a      	ldr	r2, [r3, #16]
    dc08:	687b      	ldr	r3, [r7, #4]
    dc0a:	330c      	adds	r3, #12
    dc0c:	4619      	mov	r1, r3
    dc0e:	4610      	mov	r0, r2
    dc10:	4b0f      	ldr	r3, [pc, #60]	; (dc50 <_ZN14I2C_Sync_Class4InitEv+0x60>)
    dc12:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    dc14:	687b      	ldr	r3, [r7, #4]
    dc16:	691b      	ldr	r3, [r3, #16]
    dc18:	4618      	mov	r0, r3
    dc1a:	4b0e      	ldr	r3, [pc, #56]	; (dc54 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    dc1c:	4798      	blx	r3
    dc1e:	4603      	mov	r3, r0
    dc20:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    dc22:	7bfb      	ldrb	r3, [r7, #15]
    dc24:	2b00      	cmp	r3, #0
    dc26:	bf0c      	ite	eq
    dc28:	2301      	moveq	r3, #1
    dc2a:	2300      	movne	r3, #0
    dc2c:	b2da      	uxtb	r2, r3
    dc2e:	687b      	ldr	r3, [r7, #4]
    dc30:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
    dc32:	687b      	ldr	r3, [r7, #4]
    dc34:	7a5b      	ldrb	r3, [r3, #9]
    dc36:	b2da      	uxtb	r2, r3
    dc38:	687b      	ldr	r3, [r7, #4]
    dc3a:	721a      	strb	r2, [r3, #8]
	return isOK;
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	7a5b      	ldrb	r3, [r3, #9]
    dc40:	b2db      	uxtb	r3, r3
	
}
    dc42:	4618      	mov	r0, r3
    dc44:	3710      	adds	r7, #16
    dc46:	46bd      	mov	sp, r7
    dc48:	bd80      	pop	{r7, pc}
    dc4a:	bf00      	nop
    dc4c:	20000f20 	.word	0x20000f20
    dc50:	000028db 	.word	0x000028db
    dc54:	00002881 	.word	0x00002881

0000dc58 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    dc58:	b580      	push	{r7, lr}
    dc5a:	b082      	sub	sp, #8
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
    dc60:	460b      	mov	r3, r1
    dc62:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dc64:	687b      	ldr	r3, [r7, #4]
    dc66:	691b      	ldr	r3, [r3, #16]
    dc68:	78fa      	ldrb	r2, [r7, #3]
    dc6a:	b211      	sxth	r1, r2
    dc6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dc70:	4618      	mov	r0, r3
    dc72:	4b03      	ldr	r3, [pc, #12]	; (dc80 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dc74:	4798      	blx	r3
    dc76:	4603      	mov	r3, r0
}
    dc78:	4618      	mov	r0, r3
    dc7a:	3708      	adds	r7, #8
    dc7c:	46bd      	mov	sp, r7
    dc7e:	bd80      	pop	{r7, pc}
    dc80:	000028a1 	.word	0x000028a1

0000dc84 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dc84:	b580      	push	{r7, lr}
    dc86:	b086      	sub	sp, #24
    dc88:	af00      	add	r7, sp, #0
    dc8a:	60f8      	str	r0, [r7, #12]
    dc8c:	60b9      	str	r1, [r7, #8]
    dc8e:	4613      	mov	r3, r2
    dc90:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dc92:	68fb      	ldr	r3, [r7, #12]
    dc94:	68db      	ldr	r3, [r3, #12]
    dc96:	88fa      	ldrh	r2, [r7, #6]
    dc98:	68b9      	ldr	r1, [r7, #8]
    dc9a:	4618      	mov	r0, r3
    dc9c:	4b03      	ldr	r3, [pc, #12]	; (dcac <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dc9e:	4798      	blx	r3
    dca0:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dca2:	697b      	ldr	r3, [r7, #20]
}
    dca4:	4618      	mov	r0, r3
    dca6:	3718      	adds	r7, #24
    dca8:	46bd      	mov	sp, r7
    dcaa:	bd80      	pop	{r7, pc}
    dcac:	0000f951 	.word	0x0000f951

0000dcb0 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dcb0:	b580      	push	{r7, lr}
    dcb2:	b086      	sub	sp, #24
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	60f8      	str	r0, [r7, #12]
    dcb8:	60b9      	str	r1, [r7, #8]
    dcba:	4613      	mov	r3, r2
    dcbc:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dcbe:	68fb      	ldr	r3, [r7, #12]
    dcc0:	68db      	ldr	r3, [r3, #12]
    dcc2:	88fa      	ldrh	r2, [r7, #6]
    dcc4:	68b9      	ldr	r1, [r7, #8]
    dcc6:	4618      	mov	r0, r3
    dcc8:	4b03      	ldr	r3, [pc, #12]	; (dcd8 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dcca:	4798      	blx	r3
    dccc:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dcce:	697b      	ldr	r3, [r7, #20]
}
    dcd0:	4618      	mov	r0, r3
    dcd2:	3718      	adds	r7, #24
    dcd4:	46bd      	mov	sp, r7
    dcd6:	bd80      	pop	{r7, pc}
    dcd8:	0000f9a1 	.word	0x0000f9a1

0000dcdc <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    dcdc:	b480      	push	{r7}
    dcde:	b083      	sub	sp, #12
    dce0:	af00      	add	r7, sp, #0
    dce2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    dce4:	687b      	ldr	r3, [r7, #4]
    dce6:	4618      	mov	r0, r3
    dce8:	370c      	adds	r7, #12
    dcea:	46bd      	mov	sp, r7
    dcec:	bc80      	pop	{r7}
    dcee:	4770      	bx	lr

0000dcf0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    dcf0:	b480      	push	{r7}
    dcf2:	b083      	sub	sp, #12
    dcf4:	af00      	add	r7, sp, #0
    dcf6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    dcf8:	687b      	ldr	r3, [r7, #4]
    dcfa:	4618      	mov	r0, r3
    dcfc:	370c      	adds	r7, #12
    dcfe:	46bd      	mov	sp, r7
    dd00:	bc80      	pop	{r7}
    dd02:	4770      	bx	lr

0000dd04 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
	//i2cClass=i2c;
	isOK=i2cClass->isOK;
	return isOK;
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    dd04:	b480      	push	{r7}
    dd06:	b085      	sub	sp, #20
    dd08:	af00      	add	r7, sp, #0
    dd0a:	60f8      	str	r0, [r7, #12]
    dd0c:	460b      	mov	r3, r1
    dd0e:	607a      	str	r2, [r7, #4]
    dd10:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    dd12:	687b      	ldr	r3, [r7, #4]
    dd14:	681a      	ldr	r2, [r3, #0]
    dd16:	68fb      	ldr	r3, [r7, #12]
    dd18:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
    dd1a:	687b      	ldr	r3, [r7, #4]
    dd1c:	685a      	ldr	r2, [r3, #4]
    dd1e:	68fb      	ldr	r3, [r7, #12]
    dd20:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
    dd22:	68fb      	ldr	r3, [r7, #12]
    dd24:	7afa      	ldrb	r2, [r7, #11]
    dd26:	731a      	strb	r2, [r3, #12]
	i2cClass=i2c;
    dd28:	68fb      	ldr	r3, [r7, #12]
    dd2a:	687a      	ldr	r2, [r7, #4]
    dd2c:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
    dd2e:	68fb      	ldr	r3, [r7, #12]
    dd30:	691b      	ldr	r3, [r3, #16]
    dd32:	7a5b      	ldrb	r3, [r3, #9]
    dd34:	b2da      	uxtb	r2, r3
    dd36:	68fb      	ldr	r3, [r7, #12]
    dd38:	729a      	strb	r2, [r3, #10]
	return isOK;
    dd3a:	68fb      	ldr	r3, [r7, #12]
    dd3c:	7a9b      	ldrb	r3, [r3, #10]
    dd3e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    dd40:	4618      	mov	r0, r3
    dd42:	3714      	adds	r7, #20
    dd44:	46bd      	mov	sp, r7
    dd46:	bc80      	pop	{r7}
    dd48:	4770      	bx	lr

0000dd4a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    dd4a:	b480      	push	{r7}
    dd4c:	b083      	sub	sp, #12
    dd4e:	af00      	add	r7, sp, #0
    dd50:	6078      	str	r0, [r7, #4]
    dd52:	460b      	mov	r3, r1
    dd54:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    dd56:	78fb      	ldrb	r3, [r7, #3]
    dd58:	f003 0307 	and.w	r3, r3, #7
    dd5c:	b2db      	uxtb	r3, r3
}
    dd5e:	4618      	mov	r0, r3
    dd60:	370c      	adds	r7, #12
    dd62:	46bd      	mov	sp, r7
    dd64:	bc80      	pop	{r7}
    dd66:	4770      	bx	lr

0000dd68 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    dd68:	b480      	push	{r7}
    dd6a:	b083      	sub	sp, #12
    dd6c:	af00      	add	r7, sp, #0
    dd6e:	6078      	str	r0, [r7, #4]
    dd70:	4608      	mov	r0, r1
    dd72:	4611      	mov	r1, r2
    dd74:	461a      	mov	r2, r3
    dd76:	4603      	mov	r3, r0
    dd78:	70fb      	strb	r3, [r7, #3]
    dd7a:	460b      	mov	r3, r1
    dd7c:	70bb      	strb	r3, [r7, #2]
    dd7e:	4613      	mov	r3, r2
    dd80:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    dd82:	78fb      	ldrb	r3, [r7, #3]
    dd84:	2b07      	cmp	r3, #7
    dd86:	dc01      	bgt.n	dd8c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    dd88:	78bb      	ldrb	r3, [r7, #2]
    dd8a:	e000      	b.n	dd8e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    dd8c:	787b      	ldrb	r3, [r7, #1]
}
    dd8e:	4618      	mov	r0, r3
    dd90:	370c      	adds	r7, #12
    dd92:	46bd      	mov	sp, r7
    dd94:	bc80      	pop	{r7}
    dd96:	4770      	bx	lr

0000dd98 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    dd98:	b580      	push	{r7, lr}
    dd9a:	b082      	sub	sp, #8
    dd9c:	af00      	add	r7, sp, #0
    dd9e:	6078      	str	r0, [r7, #4]
    dda0:	460b      	mov	r3, r1
    dda2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	691a      	ldr	r2, [r3, #16]
    dda8:	687b      	ldr	r3, [r7, #4]
    ddaa:	7b1b      	ldrb	r3, [r3, #12]
    ddac:	4619      	mov	r1, r3
    ddae:	4610      	mov	r0, r2
    ddb0:	4b0b      	ldr	r3, [pc, #44]	; (dde0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    ddb2:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	691b      	ldr	r3, [r3, #16]
    ddb8:	1cf9      	adds	r1, r7, #3
    ddba:	2201      	movs	r2, #1
    ddbc:	4618      	mov	r0, r3
    ddbe:	4b09      	ldr	r3, [pc, #36]	; (dde4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    ddc0:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	6918      	ldr	r0, [r3, #16]
    ddc6:	687b      	ldr	r3, [r7, #4]
    ddc8:	3304      	adds	r3, #4
    ddca:	2201      	movs	r2, #1
    ddcc:	4619      	mov	r1, r3
    ddce:	4b06      	ldr	r3, [pc, #24]	; (dde8 <_ZN14MCP23008_Class12readRegisterEh+0x50>)
    ddd0:	4798      	blx	r3

	return registerValue;
    ddd2:	687b      	ldr	r3, [r7, #4]
    ddd4:	791b      	ldrb	r3, [r3, #4]
}
    ddd6:	4618      	mov	r0, r3
    ddd8:	3708      	adds	r7, #8
    ddda:	46bd      	mov	sp, r7
    dddc:	bd80      	pop	{r7, pc}
    ddde:	bf00      	nop
    dde0:	0000dc59 	.word	0x0000dc59
    dde4:	0000dc85 	.word	0x0000dc85
    dde8:	0000dcb1 	.word	0x0000dcb1

0000ddec <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    ddec:	b580      	push	{r7, lr}
    ddee:	b082      	sub	sp, #8
    ddf0:	af00      	add	r7, sp, #0
    ddf2:	6078      	str	r0, [r7, #4]
	i2cClass->SetSlaveAddress(i2cAddress);
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	691a      	ldr	r2, [r3, #16]
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	7b1b      	ldrb	r3, [r3, #12]
    ddfc:	4619      	mov	r1, r3
    ddfe:	4610      	mov	r0, r2
    de00:	4b05      	ldr	r3, [pc, #20]	; (de18 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x2c>)
    de02:	4798      	blx	r3
	return readRegister(MCP23008_GPIOA);
    de04:	2109      	movs	r1, #9
    de06:	6878      	ldr	r0, [r7, #4]
    de08:	4b04      	ldr	r3, [pc, #16]	; (de1c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    de0a:	4798      	blx	r3
    de0c:	4603      	mov	r3, r0
}
    de0e:	4618      	mov	r0, r3
    de10:	3708      	adds	r7, #8
    de12:	46bd      	mov	sp, r7
    de14:	bd80      	pop	{r7, pc}
    de16:	bf00      	nop
    de18:	0000dc59 	.word	0x0000dc59
    de1c:	0000dd99 	.word	0x0000dd99

0000de20 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    de20:	b580      	push	{r7, lr}
    de22:	b084      	sub	sp, #16
    de24:	af00      	add	r7, sp, #0
    de26:	6078      	str	r0, [r7, #4]
    de28:	460b      	mov	r3, r1
    de2a:	70fb      	strb	r3, [r7, #3]
    de2c:	4613      	mov	r3, r2
    de2e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	691a      	ldr	r2, [r3, #16]
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	7b1b      	ldrb	r3, [r3, #12]
    de38:	4619      	mov	r1, r3
    de3a:	4610      	mov	r0, r2
    de3c:	4b09      	ldr	r3, [pc, #36]	; (de64 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    de3e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    de40:	78fb      	ldrb	r3, [r7, #3]
    de42:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    de44:	78bb      	ldrb	r3, [r7, #2]
    de46:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    de48:	687b      	ldr	r3, [r7, #4]
    de4a:	691b      	ldr	r3, [r3, #16]
    de4c:	f107 010c 	add.w	r1, r7, #12
    de50:	2202      	movs	r2, #2
    de52:	4618      	mov	r0, r3
    de54:	4b04      	ldr	r3, [pc, #16]	; (de68 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    de56:	4798      	blx	r3
    de58:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    de5a:	4618      	mov	r0, r3
    de5c:	3710      	adds	r7, #16
    de5e:	46bd      	mov	sp, r7
    de60:	bd80      	pop	{r7, pc}
    de62:	bf00      	nop
    de64:	0000dc59 	.word	0x0000dc59
    de68:	0000dc85 	.word	0x0000dc85

0000de6c <_ZN14MCP23008_Class12SetPortInputEv>:
	writeRegister(MCP23008_GPIOA,v);
	return v;
}


void	MCP23008_Class::SetPortInput(void){
    de6c:	b580      	push	{r7, lr}
    de6e:	b084      	sub	sp, #16
    de70:	af00      	add	r7, sp, #0
    de72:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    de74:	2300      	movs	r3, #0
    de76:	73fb      	strb	r3, [r7, #15]
    de78:	7bfb      	ldrb	r3, [r7, #15]
    de7a:	2b07      	cmp	r3, #7
    de7c:	dc0f      	bgt.n	de9e <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    de7e:	7bfb      	ldrb	r3, [r7, #15]
    de80:	2201      	movs	r2, #1
    de82:	4619      	mov	r1, r3
    de84:	6878      	ldr	r0, [r7, #4]
    de86:	4b08      	ldr	r3, [pc, #32]	; (dea8 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    de88:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    de8a:	7bfb      	ldrb	r3, [r7, #15]
    de8c:	2201      	movs	r2, #1
    de8e:	4619      	mov	r1, r3
    de90:	6878      	ldr	r0, [r7, #4]
    de92:	4b06      	ldr	r3, [pc, #24]	; (deac <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    de94:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    de96:	7bfb      	ldrb	r3, [r7, #15]
    de98:	3301      	adds	r3, #1
    de9a:	73fb      	strb	r3, [r7, #15]
    de9c:	e7ec      	b.n	de78 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    de9e:	bf00      	nop
    dea0:	3710      	adds	r7, #16
    dea2:	46bd      	mov	sp, r7
    dea4:	bd80      	pop	{r7, pc}
    dea6:	bf00      	nop
    dea8:	0000df71 	.word	0x0000df71
    deac:	0000e055 	.word	0x0000e055

0000deb0 <_ZN14MCP23008_Class13SetPortOutputEv>:
	{
		SetPortOutput();
	}
	
}
void	MCP23008_Class::SetPortOutput(void){
    deb0:	b580      	push	{r7, lr}
    deb2:	b084      	sub	sp, #16
    deb4:	af00      	add	r7, sp, #0
    deb6:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    deb8:	2300      	movs	r3, #0
    deba:	73fb      	strb	r3, [r7, #15]
    debc:	7bfb      	ldrb	r3, [r7, #15]
    debe:	2b07      	cmp	r3, #7
    dec0:	dc09      	bgt.n	ded6 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    dec2:	7bfb      	ldrb	r3, [r7, #15]
    dec4:	2200      	movs	r2, #0
    dec6:	4619      	mov	r1, r3
    dec8:	6878      	ldr	r0, [r7, #4]
    deca:	4b05      	ldr	r3, [pc, #20]	; (dee0 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    decc:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    dece:	7bfb      	ldrb	r3, [r7, #15]
    ded0:	3301      	adds	r3, #1
    ded2:	73fb      	strb	r3, [r7, #15]
    ded4:	e7f2      	b.n	debc <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    ded6:	bf00      	nop
    ded8:	3710      	adds	r7, #16
    deda:	46bd      	mov	sp, r7
    dedc:	bd80      	pop	{r7, pc}
    dede:	bf00      	nop
    dee0:	0000df71 	.word	0x0000df71

0000dee4 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    dee4:	b580      	push	{r7, lr}
    dee6:	b084      	sub	sp, #16
    dee8:	af00      	add	r7, sp, #0
    deea:	6078      	str	r0, [r7, #4]
    deec:	4608      	mov	r0, r1
    deee:	4611      	mov	r1, r2
    def0:	461a      	mov	r2, r3
    def2:	4603      	mov	r3, r0
    def4:	70fb      	strb	r3, [r7, #3]
    def6:	460b      	mov	r3, r1
    def8:	70bb      	strb	r3, [r7, #2]
    defa:	4613      	mov	r3, r2
    defc:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    defe:	787b      	ldrb	r3, [r7, #1]
    df00:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    df02:	78fb      	ldrb	r3, [r7, #3]
    df04:	4619      	mov	r1, r3
    df06:	6878      	ldr	r0, [r7, #4]
    df08:	4b16      	ldr	r3, [pc, #88]	; (df64 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
    df0a:	4798      	blx	r3
    df0c:	4603      	mov	r3, r0
    df0e:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    df10:	7bfb      	ldrb	r3, [r7, #15]
    df12:	4619      	mov	r1, r3
    df14:	6878      	ldr	r0, [r7, #4]
    df16:	4b14      	ldr	r3, [pc, #80]	; (df68 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
    df18:	4798      	blx	r3
    df1a:	4603      	mov	r3, r0
    df1c:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    df1e:	78bb      	ldrb	r3, [r7, #2]
    df20:	2b00      	cmp	r3, #0
    df22:	d009      	beq.n	df38 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
    df24:	7bba      	ldrb	r2, [r7, #14]
    df26:	7b7b      	ldrb	r3, [r7, #13]
    df28:	4619      	mov	r1, r3
    df2a:	2301      	movs	r3, #1
    df2c:	408b      	lsls	r3, r1
    df2e:	b2db      	uxtb	r3, r3
    df30:	4313      	orrs	r3, r2
    df32:	b2db      	uxtb	r3, r3
    df34:	73bb      	strb	r3, [r7, #14]
    df36:	e00a      	b.n	df4e <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
    df38:	7bba      	ldrb	r2, [r7, #14]
    df3a:	7b7b      	ldrb	r3, [r7, #13]
    df3c:	4619      	mov	r1, r3
    df3e:	2301      	movs	r3, #1
    df40:	408b      	lsls	r3, r1
    df42:	b2db      	uxtb	r3, r3
    df44:	43db      	mvns	r3, r3
    df46:	b2db      	uxtb	r3, r3
    df48:	4013      	ands	r3, r2
    df4a:	b2db      	uxtb	r3, r3
    df4c:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
    df4e:	7bba      	ldrb	r2, [r7, #14]
    df50:	7bfb      	ldrb	r3, [r7, #15]
    df52:	4619      	mov	r1, r3
    df54:	6878      	ldr	r0, [r7, #4]
    df56:	4b05      	ldr	r3, [pc, #20]	; (df6c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
    df58:	4798      	blx	r3
}
    df5a:	bf00      	nop
    df5c:	3710      	adds	r7, #16
    df5e:	46bd      	mov	sp, r7
    df60:	bd80      	pop	{r7, pc}
    df62:	bf00      	nop
    df64:	0000dd4b 	.word	0x0000dd4b
    df68:	0000dd99 	.word	0x0000dd99
    df6c:	0000de21 	.word	0x0000de21

0000df70 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
    df70:	b590      	push	{r4, r7, lr}
    df72:	b085      	sub	sp, #20
    df74:	af02      	add	r7, sp, #8
    df76:	6078      	str	r0, [r7, #4]
    df78:	460b      	mov	r3, r1
    df7a:	70fb      	strb	r3, [r7, #3]
    df7c:	4613      	mov	r3, r2
    df7e:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
    df80:	78bb      	ldrb	r3, [r7, #2]
    df82:	2b01      	cmp	r3, #1
    df84:	bf0c      	ite	eq
    df86:	2301      	moveq	r3, #1
    df88:	2300      	movne	r3, #0
    df8a:	b2db      	uxtb	r3, r3
    df8c:	461a      	mov	r2, r3
    df8e:	78f9      	ldrb	r1, [r7, #3]
    df90:	2300      	movs	r3, #0
    df92:	9300      	str	r3, [sp, #0]
    df94:	2300      	movs	r3, #0
    df96:	6878      	ldr	r0, [r7, #4]
    df98:	4c02      	ldr	r4, [pc, #8]	; (dfa4 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
    df9a:	47a0      	blx	r4
}
    df9c:	bf00      	nop
    df9e:	370c      	adds	r7, #12
    dfa0:	46bd      	mov	sp, r7
    dfa2:	bd90      	pop	{r4, r7, pc}
    dfa4:	0000dee5 	.word	0x0000dee5

0000dfa8 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
    dfa8:	b590      	push	{r4, r7, lr}
    dfaa:	b085      	sub	sp, #20
    dfac:	af00      	add	r7, sp, #0
    dfae:	6078      	str	r0, [r7, #4]
    dfb0:	460b      	mov	r3, r1
    dfb2:	70fb      	strb	r3, [r7, #3]
    dfb4:	4613      	mov	r3, r2
    dfb6:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
    dfb8:	78fb      	ldrb	r3, [r7, #3]
    dfba:	4619      	mov	r1, r3
    dfbc:	6878      	ldr	r0, [r7, #4]
    dfbe:	4b21      	ldr	r3, [pc, #132]	; (e044 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
    dfc0:	4798      	blx	r3
    dfc2:	4603      	mov	r3, r0
    dfc4:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
    dfc6:	78f9      	ldrb	r1, [r7, #3]
    dfc8:	230a      	movs	r3, #10
    dfca:	220a      	movs	r2, #10
    dfcc:	6878      	ldr	r0, [r7, #4]
    dfce:	4c1e      	ldr	r4, [pc, #120]	; (e048 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    dfd0:	47a0      	blx	r4
    dfd2:	4603      	mov	r3, r0
    dfd4:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
    dfd6:	7bfb      	ldrb	r3, [r7, #15]
    dfd8:	4619      	mov	r1, r3
    dfda:	6878      	ldr	r0, [r7, #4]
    dfdc:	4b1b      	ldr	r3, [pc, #108]	; (e04c <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
    dfde:	4798      	blx	r3
    dfe0:	4603      	mov	r3, r0
    dfe2:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
    dfe4:	78bb      	ldrb	r3, [r7, #2]
    dfe6:	2b00      	cmp	r3, #0
    dfe8:	d009      	beq.n	dffe <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
    dfea:	7bba      	ldrb	r2, [r7, #14]
    dfec:	7b7b      	ldrb	r3, [r7, #13]
    dfee:	4619      	mov	r1, r3
    dff0:	2301      	movs	r3, #1
    dff2:	408b      	lsls	r3, r1
    dff4:	b2db      	uxtb	r3, r3
    dff6:	4313      	orrs	r3, r2
    dff8:	b2db      	uxtb	r3, r3
    dffa:	73bb      	strb	r3, [r7, #14]
    dffc:	e00a      	b.n	e014 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
    dffe:	7bba      	ldrb	r2, [r7, #14]
    e000:	7b7b      	ldrb	r3, [r7, #13]
    e002:	4619      	mov	r1, r3
    e004:	2301      	movs	r3, #1
    e006:	408b      	lsls	r3, r1
    e008:	b2db      	uxtb	r3, r3
    e00a:	43db      	mvns	r3, r3
    e00c:	b2db      	uxtb	r3, r3
    e00e:	4013      	ands	r3, r2
    e010:	b2db      	uxtb	r3, r3
    e012:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
    e014:	78f9      	ldrb	r1, [r7, #3]
    e016:	2309      	movs	r3, #9
    e018:	2209      	movs	r2, #9
    e01a:	6878      	ldr	r0, [r7, #4]
    e01c:	4c0a      	ldr	r4, [pc, #40]	; (e048 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
    e01e:	47a0      	blx	r4
    e020:	4603      	mov	r3, r0
    e022:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
    e024:	7bba      	ldrb	r2, [r7, #14]
    e026:	7bfb      	ldrb	r3, [r7, #15]
    e028:	4619      	mov	r1, r3
    e02a:	6878      	ldr	r0, [r7, #4]
    e02c:	4b08      	ldr	r3, [pc, #32]	; (e050 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
    e02e:	4798      	blx	r3
    e030:	4603      	mov	r3, r0
    e032:	2b00      	cmp	r3, #0
    e034:	bf0c      	ite	eq
    e036:	2301      	moveq	r3, #1
    e038:	2300      	movne	r3, #0
    e03a:	b2db      	uxtb	r3, r3
}
    e03c:	4618      	mov	r0, r3
    e03e:	3714      	adds	r7, #20
    e040:	46bd      	mov	sp, r7
    e042:	bd90      	pop	{r4, r7, pc}
    e044:	0000dd4b 	.word	0x0000dd4b
    e048:	0000dd69 	.word	0x0000dd69
    e04c:	0000dd99 	.word	0x0000dd99
    e050:	0000de21 	.word	0x0000de21

0000e054 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
    e054:	b590      	push	{r4, r7, lr}
    e056:	b085      	sub	sp, #20
    e058:	af02      	add	r7, sp, #8
    e05a:	6078      	str	r0, [r7, #4]
    e05c:	460b      	mov	r3, r1
    e05e:	70fb      	strb	r3, [r7, #3]
    e060:	4613      	mov	r3, r2
    e062:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
    e064:	78ba      	ldrb	r2, [r7, #2]
    e066:	78f9      	ldrb	r1, [r7, #3]
    e068:	2306      	movs	r3, #6
    e06a:	9300      	str	r3, [sp, #0]
    e06c:	2306      	movs	r3, #6
    e06e:	6878      	ldr	r0, [r7, #4]
    e070:	4c02      	ldr	r4, [pc, #8]	; (e07c <_ZN14MCP23008_Class6pullUpEhh+0x28>)
    e072:	47a0      	blx	r4
}
    e074:	bf00      	nop
    e076:	370c      	adds	r7, #12
    e078:	46bd      	mov	sp, r7
    e07a:	bd90      	pop	{r4, r7, pc}
    e07c:	0000dee5 	.word	0x0000dee5

0000e080 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e080:	b480      	push	{r7}
    e082:	b085      	sub	sp, #20
    e084:	af00      	add	r7, sp, #0
    e086:	60f8      	str	r0, [r7, #12]
    e088:	460b      	mov	r3, r1
    e08a:	607a      	str	r2, [r7, #4]
    e08c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    e08e:	7afb      	ldrb	r3, [r7, #11]
    e090:	68fa      	ldr	r2, [r7, #12]
    e092:	01db      	lsls	r3, r3, #7
    e094:	4413      	add	r3, r2
    e096:	3318      	adds	r3, #24
    e098:	687a      	ldr	r2, [r7, #4]
    e09a:	601a      	str	r2, [r3, #0]
}
    e09c:	bf00      	nop
    e09e:	3714      	adds	r7, #20
    e0a0:	46bd      	mov	sp, r7
    e0a2:	bc80      	pop	{r7}
    e0a4:	4770      	bx	lr

0000e0a6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    e0a6:	b480      	push	{r7}
    e0a8:	b085      	sub	sp, #20
    e0aa:	af00      	add	r7, sp, #0
    e0ac:	60f8      	str	r0, [r7, #12]
    e0ae:	460b      	mov	r3, r1
    e0b0:	607a      	str	r2, [r7, #4]
    e0b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    e0b4:	7afb      	ldrb	r3, [r7, #11]
    e0b6:	68fa      	ldr	r2, [r7, #12]
    e0b8:	01db      	lsls	r3, r3, #7
    e0ba:	4413      	add	r3, r2
    e0bc:	3314      	adds	r3, #20
    e0be:	687a      	ldr	r2, [r7, #4]
    e0c0:	601a      	str	r2, [r3, #0]
}
    e0c2:	bf00      	nop
    e0c4:	3714      	adds	r7, #20
    e0c6:	46bd      	mov	sp, r7
    e0c8:	bc80      	pop	{r7}
    e0ca:	4770      	bx	lr

0000e0cc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    e0cc:	b580      	push	{r7, lr}
    e0ce:	b082      	sub	sp, #8
    e0d0:	af00      	add	r7, sp, #0
    e0d2:	4603      	mov	r3, r0
    e0d4:	6039      	str	r1, [r7, #0]
    e0d6:	71fb      	strb	r3, [r7, #7]
    e0d8:	4613      	mov	r3, r2
    e0da:	71bb      	strb	r3, [r7, #6]
	if (level) {
    e0dc:	79bb      	ldrb	r3, [r7, #6]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d006      	beq.n	e0f0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    e0e2:	79fb      	ldrb	r3, [r7, #7]
    e0e4:	683a      	ldr	r2, [r7, #0]
    e0e6:	4619      	mov	r1, r3
    e0e8:	4806      	ldr	r0, [pc, #24]	; (e104 <_gpio_set_level+0x38>)
    e0ea:	4b07      	ldr	r3, [pc, #28]	; (e108 <_gpio_set_level+0x3c>)
    e0ec:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    e0ee:	e005      	b.n	e0fc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    e0f0:	79fb      	ldrb	r3, [r7, #7]
    e0f2:	683a      	ldr	r2, [r7, #0]
    e0f4:	4619      	mov	r1, r3
    e0f6:	4803      	ldr	r0, [pc, #12]	; (e104 <_gpio_set_level+0x38>)
    e0f8:	4b04      	ldr	r3, [pc, #16]	; (e10c <_gpio_set_level+0x40>)
    e0fa:	4798      	blx	r3
}
    e0fc:	bf00      	nop
    e0fe:	3708      	adds	r7, #8
    e100:	46bd      	mov	sp, r7
    e102:	bd80      	pop	{r7, pc}
    e104:	41008000 	.word	0x41008000
    e108:	0000e081 	.word	0x0000e081
    e10c:	0000e0a7 	.word	0x0000e0a7

0000e110 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    e110:	b580      	push	{r7, lr}
    e112:	b082      	sub	sp, #8
    e114:	af00      	add	r7, sp, #0
    e116:	4603      	mov	r3, r0
    e118:	460a      	mov	r2, r1
    e11a:	71fb      	strb	r3, [r7, #7]
    e11c:	4613      	mov	r3, r2
    e11e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    e120:	79fb      	ldrb	r3, [r7, #7]
    e122:	115b      	asrs	r3, r3, #5
    e124:	b2d8      	uxtb	r0, r3
    e126:	79fb      	ldrb	r3, [r7, #7]
    e128:	f003 031f 	and.w	r3, r3, #31
    e12c:	2201      	movs	r2, #1
    e12e:	fa02 f303 	lsl.w	r3, r2, r3
    e132:	79ba      	ldrb	r2, [r7, #6]
    e134:	4619      	mov	r1, r3
    e136:	4b03      	ldr	r3, [pc, #12]	; (e144 <gpio_set_pin_level+0x34>)
    e138:	4798      	blx	r3
}
    e13a:	bf00      	nop
    e13c:	3708      	adds	r7, #8
    e13e:	46bd      	mov	sp, r7
    e140:	bd80      	pop	{r7, pc}
    e142:	bf00      	nop
    e144:	0000e0cd 	.word	0x0000e0cd

0000e148 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
    e148:	b580      	push	{r7, lr}
    e14a:	b082      	sub	sp, #8
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
    e150:	6039      	str	r1, [r7, #0]
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	3318      	adds	r3, #24
    e156:	4618      	mov	r0, r3
    e158:	4b08      	ldr	r3, [pc, #32]	; (e17c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
    e15a:	4798      	blx	r3
{
	appParameters=defaultParameters;
    e15c:	687b      	ldr	r3, [r7, #4]
    e15e:	4a08      	ldr	r2, [pc, #32]	; (e180 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
    e160:	7812      	ldrb	r2, [r2, #0]
    e162:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
    e164:	687b      	ldr	r3, [r7, #4]
    e166:	683a      	ldr	r2, [r7, #0]
    e168:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
    e16a:	4b06      	ldr	r3, [pc, #24]	; (e184 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
    e16c:	681a      	ldr	r2, [r3, #0]
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	4618      	mov	r0, r3
    e176:	3708      	adds	r7, #8
    e178:	46bd      	mov	sp, r7
    e17a:	bd80      	pop	{r7, pc}
    e17c:	0000f839 	.word	0x0000f839
    e180:	00010310 	.word	0x00010310
    e184:	20000fa0 	.word	0x20000fa0

0000e188 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
    e188:	b580      	push	{r7, lr}
    e18a:	b082      	sub	sp, #8
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
    e190:	687b      	ldr	r3, [r7, #4]
    e192:	3318      	adds	r3, #24
    e194:	4618      	mov	r0, r3
    e196:	4b03      	ldr	r3, [pc, #12]	; (e1a4 <_ZN16FlashMemoryClassD1Ev+0x1c>)
    e198:	4798      	blx	r3
{
} //~FlashMemoryClass
    e19a:	687b      	ldr	r3, [r7, #4]
    e19c:	4618      	mov	r0, r3
    e19e:	3708      	adds	r7, #8
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd80      	pop	{r7, pc}
    e1a4:	0000f859 	.word	0x0000f859

0000e1a8 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b082      	sub	sp, #8
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
	garbage=spi.Enable();
    e1b0:	687b      	ldr	r3, [r7, #4]
    e1b2:	3318      	adds	r3, #24
    e1b4:	4618      	mov	r0, r3
    e1b6:	4b05      	ldr	r3, [pc, #20]	; (e1cc <_ZN16FlashMemoryClass9flashOpenEv+0x24>)
    e1b8:	4798      	blx	r3
    e1ba:	4603      	mov	r3, r0
    e1bc:	461a      	mov	r2, r3
    e1be:	687b      	ldr	r3, [r7, #4]
    e1c0:	609a      	str	r2, [r3, #8]
	
	
}
    e1c2:	bf00      	nop
    e1c4:	3708      	adds	r7, #8
    e1c6:	46bd      	mov	sp, r7
    e1c8:	bd80      	pop	{r7, pc}
    e1ca:	bf00      	nop
    e1cc:	0000f86d 	.word	0x0000f86d

0000e1d0 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	spi.Read((uint8_t *)dest, (uint16_t)size);
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	6078      	str	r0, [r7, #4]
	garbage=0;
    e1d8:	687b      	ldr	r3, [r7, #4]
    e1da:	2200      	movs	r2, #0
    e1dc:	609a      	str	r2, [r3, #8]
		gpio_set_pin_level(CS_FLASH,
		// <y> Initial level
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
    e1de:	2100      	movs	r1, #0
    e1e0:	200f      	movs	r0, #15
    e1e2:	4b05      	ldr	r3, [pc, #20]	; (e1f8 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e1e4:	4798      	blx	r3
		gpio_set_pin_level(CS_FRAM,true);
    e1e6:	2101      	movs	r1, #1
    e1e8:	2013      	movs	r0, #19
    e1ea:	4b03      	ldr	r3, [pc, #12]	; (e1f8 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x28>)
    e1ec:	4798      	blx	r3
}
    e1ee:	bf00      	nop
    e1f0:	3708      	adds	r7, #8
    e1f2:	46bd      	mov	sp, r7
    e1f4:	bd80      	pop	{r7, pc}
    e1f6:	bf00      	nop
    e1f8:	0000e111 	.word	0x0000e111

0000e1fc <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
    e1fc:	b580      	push	{r7, lr}
    e1fe:	b082      	sub	sp, #8
    e200:	af00      	add	r7, sp, #0
    e202:	6078      	str	r0, [r7, #4]
	garbage=0;
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	2200      	movs	r2, #0
    e208:	609a      	str	r2, [r3, #8]
	gpio_set_pin_level(CS_FLASH,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
    e20a:	2101      	movs	r1, #1
    e20c:	200f      	movs	r0, #15
    e20e:	4b05      	ldr	r3, [pc, #20]	; (e224 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e210:	4798      	blx	r3
	gpio_set_pin_level(CS_FRAM,true);
    e212:	2101      	movs	r1, #1
    e214:	2013      	movs	r0, #19
    e216:	4b03      	ldr	r3, [pc, #12]	; (e224 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x28>)
    e218:	4798      	blx	r3
}
    e21a:	bf00      	nop
    e21c:	3708      	adds	r7, #8
    e21e:	46bd      	mov	sp, r7
    e220:	bd80      	pop	{r7, pc}
    e222:	bf00      	nop
    e224:	0000e111 	.word	0x0000e111

0000e228 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
    e228:	b580      	push	{r7, lr}
    e22a:	b082      	sub	sp, #8
    e22c:	af00      	add	r7, sp, #0
    e22e:	6078      	str	r0, [r7, #4]
    e230:	460b      	mov	r3, r1
    e232:	70fb      	strb	r3, [r7, #3]
	//WaitBusy();
	spi.Write(&byte,1);
    e234:	687b      	ldr	r3, [r7, #4]
    e236:	3318      	adds	r3, #24
    e238:	1cf9      	adds	r1, r7, #3
    e23a:	2201      	movs	r2, #1
    e23c:	4618      	mov	r0, r3
    e23e:	4b03      	ldr	r3, [pc, #12]	; (e24c <_ZN16FlashMemoryClass9Send_ByteEh+0x24>)
    e240:	4798      	blx	r3
	return byte;
    e242:	78fb      	ldrb	r3, [r7, #3]
}
    e244:	4618      	mov	r0, r3
    e246:	3708      	adds	r7, #8
    e248:	46bd      	mov	sp, r7
    e24a:	bd80      	pop	{r7, pc}
    e24c:	0000f8a9 	.word	0x0000f8a9

0000e250 <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
    e250:	b580      	push	{r7, lr}
    e252:	b084      	sub	sp, #16
    e254:	af00      	add	r7, sp, #0
    e256:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	//WaitBusy();
	spi.Read(&byte,1);
    e258:	687b      	ldr	r3, [r7, #4]
    e25a:	3318      	adds	r3, #24
    e25c:	f107 010f 	add.w	r1, r7, #15
    e260:	2201      	movs	r2, #1
    e262:	4618      	mov	r0, r3
    e264:	4b03      	ldr	r3, [pc, #12]	; (e274 <_ZN16FlashMemoryClass8Get_ByteEv+0x24>)
    e266:	4798      	blx	r3
	
	return byte;
    e268:	7bfb      	ldrb	r3, [r7, #15]
}
    e26a:	4618      	mov	r0, r3
    e26c:	3710      	adds	r7, #16
    e26e:	46bd      	mov	sp, r7
    e270:	bd80      	pop	{r7, pc}
    e272:	bf00      	nop
    e274:	0000f8ed 	.word	0x0000f8ed

0000e278 <_ZN16FlashMemoryClass4WRENEv>:

void FlashMemoryClass::WREN(void)
{
    e278:	b580      	push	{r7, lr}
    e27a:	b082      	sub	sp, #8
    e27c:	af00      	add	r7, sp, #0
    e27e:	6078      	str	r0, [r7, #4]
	do
	{
		CE_Low_Flash();			// enable device
    e280:	6878      	ldr	r0, [r7, #4]
    e282:	4b0d      	ldr	r3, [pc, #52]	; (e2b8 <_ZN16FlashMemoryClass4WRENEv+0x40>)
    e284:	4798      	blx	r3
		Send_Byte(kFlashWREnable);	// send WREN command
    e286:	2106      	movs	r1, #6
    e288:	6878      	ldr	r0, [r7, #4]
    e28a:	4b0c      	ldr	r3, [pc, #48]	; (e2bc <_ZN16FlashMemoryClass4WRENEv+0x44>)
    e28c:	4798      	blx	r3
		//WaitBusy();
		CE_High_Flash();
    e28e:	6878      	ldr	r0, [r7, #4]
    e290:	4b0b      	ldr	r3, [pc, #44]	; (e2c0 <_ZN16FlashMemoryClass4WRENEv+0x48>)
    e292:	4798      	blx	r3
		status=ReadStatusRegister();
    e294:	6878      	ldr	r0, [r7, #4]
    e296:	4b0b      	ldr	r3, [pc, #44]	; (e2c4 <_ZN16FlashMemoryClass4WRENEv+0x4c>)
    e298:	4798      	blx	r3
    e29a:	4603      	mov	r3, r0
    e29c:	461a      	mov	r2, r3
    e29e:	687b      	ldr	r3, [r7, #4]
    e2a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	} while ((status&&(0x02))==0);
    e2a4:	687b      	ldr	r3, [r7, #4]
    e2a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d100      	bne.n	e2b0 <_ZN16FlashMemoryClass4WRENEv+0x38>
	do
    e2ae:	e7e7      	b.n	e280 <_ZN16FlashMemoryClass4WRENEv+0x8>

}
    e2b0:	bf00      	nop
    e2b2:	3708      	adds	r7, #8
    e2b4:	46bd      	mov	sp, r7
    e2b6:	bd80      	pop	{r7, pc}
    e2b8:	0000e1d1 	.word	0x0000e1d1
    e2bc:	0000e229 	.word	0x0000e229
    e2c0:	0000e1fd 	.word	0x0000e1fd
    e2c4:	0000e4a5 	.word	0x0000e4a5

0000e2c8 <_ZN16FlashMemoryClass4WRDIEv>:


void FlashMemoryClass::WRDI(void)
{
    e2c8:	b580      	push	{r7, lr}
    e2ca:	b082      	sub	sp, #8
    e2cc:	af00      	add	r7, sp, #0
    e2ce:	6078      	str	r0, [r7, #4]
	CE_Low_Flash();			// enable device
    e2d0:	6878      	ldr	r0, [r7, #4]
    e2d2:	4b06      	ldr	r3, [pc, #24]	; (e2ec <_ZN16FlashMemoryClass4WRDIEv+0x24>)
    e2d4:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
    e2d6:	2104      	movs	r1, #4
    e2d8:	6878      	ldr	r0, [r7, #4]
    e2da:	4b05      	ldr	r3, [pc, #20]	; (e2f0 <_ZN16FlashMemoryClass4WRDIEv+0x28>)
    e2dc:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
    e2de:	6878      	ldr	r0, [r7, #4]
    e2e0:	4b04      	ldr	r3, [pc, #16]	; (e2f4 <_ZN16FlashMemoryClass4WRDIEv+0x2c>)
    e2e2:	4798      	blx	r3
	
}
    e2e4:	bf00      	nop
    e2e6:	3708      	adds	r7, #8
    e2e8:	46bd      	mov	sp, r7
    e2ea:	bd80      	pop	{r7, pc}
    e2ec:	0000e1d1 	.word	0x0000e1d1
    e2f0:	0000e229 	.word	0x0000e229
    e2f4:	0000e1fd 	.word	0x0000e1fd

0000e2f8 <_ZN16FlashMemoryClass10eraseFlashEmm>:
		return *srcPtr;

	}
	
void FlashMemoryClass::eraseFlash(uint32_t dest, uint32_t size)
	{
    e2f8:	b580      	push	{r7, lr}
    e2fa:	b086      	sub	sp, #24
    e2fc:	af00      	add	r7, sp, #0
    e2fe:	60f8      	str	r0, [r7, #12]
    e300:	60b9      	str	r1, [r7, #8]
    e302:	607a      	str	r2, [r7, #4]
	uint32_t	eraseRemaining = size;
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	617b      	str	r3, [r7, #20]
	uint32_t	eraseAddress = dest;
    e308:	68bb      	ldr	r3, [r7, #8]
    e30a:	613b      	str	r3, [r7, #16]
	flashOpen();
    e30c:	68f8      	ldr	r0, [r7, #12]
    e30e:	4b21      	ldr	r3, [pc, #132]	; (e394 <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    e310:	4798      	blx	r3
	while (eraseRemaining > 0)
    e312:	697b      	ldr	r3, [r7, #20]
    e314:	2b00      	cmp	r3, #0
    e316:	d035      	beq.n	e384 <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>
	{
	WREN();
    e318:	68f8      	ldr	r0, [r7, #12]
    e31a:	4b1f      	ldr	r3, [pc, #124]	; (e398 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    e31c:	4798      	blx	r3
	if (eraseRemaining <= 4 * 1024)
    e31e:	697b      	ldr	r3, [r7, #20]
    e320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    e324:	d806      	bhi.n	e334 <_ZN16FlashMemoryClass10eraseFlashEmm+0x3c>
		{
		Sector_Erase(eraseAddress);
    e326:	6939      	ldr	r1, [r7, #16]
    e328:	68f8      	ldr	r0, [r7, #12]
    e32a:	4b1c      	ldr	r3, [pc, #112]	; (e39c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e32c:	4798      	blx	r3
		eraseRemaining = 0;
    e32e:	2300      	movs	r3, #0
    e330:	617b      	str	r3, [r7, #20]
    e332:	e020      	b.n	e376 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}
	else if (eraseRemaining < 64 * 1024)
    e334:	697b      	ldr	r3, [r7, #20]
    e336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e33a:	d20c      	bcs.n	e356 <_ZN16FlashMemoryClass10eraseFlashEmm+0x5e>
		{
		Sector_Erase(eraseAddress);
    e33c:	6939      	ldr	r1, [r7, #16]
    e33e:	68f8      	ldr	r0, [r7, #12]
    e340:	4b16      	ldr	r3, [pc, #88]	; (e39c <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    e342:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    e344:	693b      	ldr	r3, [r7, #16]
    e346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e34a:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (4 * 1024);
    e34c:	697b      	ldr	r3, [r7, #20]
    e34e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    e352:	617b      	str	r3, [r7, #20]
    e354:	e00f      	b.n	e376 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		}

	else if (eraseRemaining >= 64 * 1024)
    e356:	697b      	ldr	r3, [r7, #20]
    e358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    e35c:	d30b      	bcc.n	e376 <_ZN16FlashMemoryClass10eraseFlashEmm+0x7e>
		{
		Block_Erase_64K(eraseAddress);
    e35e:	6939      	ldr	r1, [r7, #16]
    e360:	68f8      	ldr	r0, [r7, #12]
    e362:	4b0f      	ldr	r3, [pc, #60]	; (e3a0 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa8>)
    e364:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    e366:	693b      	ldr	r3, [r7, #16]
    e368:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e36c:	613b      	str	r3, [r7, #16]
		eraseRemaining -= (64 * 1024);
    e36e:	697b      	ldr	r3, [r7, #20]
    e370:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    e374:	617b      	str	r3, [r7, #20]
		Block_Erase_32K(eraseAddress);
		eraseAddress += (32 * 1024);
		eraseRemaining -= (32 * 1024);
		}
*/
	WaitBusy();
    e376:	68f8      	ldr	r0, [r7, #12]
    e378:	4b0a      	ldr	r3, [pc, #40]	; (e3a4 <_ZN16FlashMemoryClass10eraseFlashEmm+0xac>)
    e37a:	4798      	blx	r3
	WRDI();
    e37c:	68f8      	ldr	r0, [r7, #12]
    e37e:	4b0a      	ldr	r3, [pc, #40]	; (e3a8 <_ZN16FlashMemoryClass10eraseFlashEmm+0xb0>)
    e380:	4798      	blx	r3
	while (eraseRemaining > 0)
    e382:	e7c6      	b.n	e312 <_ZN16FlashMemoryClass10eraseFlashEmm+0x1a>
	}
	flashClose();
    e384:	68f8      	ldr	r0, [r7, #12]
    e386:	4b09      	ldr	r3, [pc, #36]	; (e3ac <_ZN16FlashMemoryClass10eraseFlashEmm+0xb4>)
    e388:	4798      	blx	r3
}
    e38a:	bf00      	nop
    e38c:	3718      	adds	r7, #24
    e38e:	46bd      	mov	sp, r7
    e390:	bd80      	pop	{r7, pc}
    e392:	bf00      	nop
    e394:	0000e1a9 	.word	0x0000e1a9
    e398:	0000e279 	.word	0x0000e279
    e39c:	0000e541 	.word	0x0000e541
    e3a0:	0000e3b1 	.word	0x0000e3b1
    e3a4:	0000e40d 	.word	0x0000e40d
    e3a8:	0000e2c9 	.word	0x0000e2c9
    e3ac:	0000e51d 	.word	0x0000e51d

0000e3b0 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
    e3b0:	b580      	push	{r7, lr}
    e3b2:	b082      	sub	sp, #8
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	6078      	str	r0, [r7, #4]
    e3b8:	6039      	str	r1, [r7, #0]

		CE_Low_Flash();				// enable device
    e3ba:	6878      	ldr	r0, [r7, #4]
    e3bc:	4b10      	ldr	r3, [pc, #64]	; (e400 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x50>)
    e3be:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
    e3c0:	21d8      	movs	r1, #216	; 0xd8
    e3c2:	6878      	ldr	r0, [r7, #4]
    e3c4:	4b0f      	ldr	r3, [pc, #60]	; (e404 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e3c6:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e3c8:	683b      	ldr	r3, [r7, #0]
    e3ca:	0c1b      	lsrs	r3, r3, #16
    e3cc:	b2db      	uxtb	r3, r3
    e3ce:	4619      	mov	r1, r3
    e3d0:	6878      	ldr	r0, [r7, #4]
    e3d2:	4b0c      	ldr	r3, [pc, #48]	; (e404 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e3d4:	4798      	blx	r3
		Send_Byte(((Dst & 0xFFFF) >> 8));
    e3d6:	683b      	ldr	r3, [r7, #0]
    e3d8:	0a1b      	lsrs	r3, r3, #8
    e3da:	b2db      	uxtb	r3, r3
    e3dc:	4619      	mov	r1, r3
    e3de:	6878      	ldr	r0, [r7, #4]
    e3e0:	4b08      	ldr	r3, [pc, #32]	; (e404 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e3e2:	4798      	blx	r3
		Send_Byte(Dst & 0xFF);
    e3e4:	683b      	ldr	r3, [r7, #0]
    e3e6:	b2db      	uxtb	r3, r3
    e3e8:	4619      	mov	r1, r3
    e3ea:	6878      	ldr	r0, [r7, #4]
    e3ec:	4b05      	ldr	r3, [pc, #20]	; (e404 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x54>)
    e3ee:	4798      	blx	r3
		CE_High_Flash();				// disable device
    e3f0:	6878      	ldr	r0, [r7, #4]
    e3f2:	4b05      	ldr	r3, [pc, #20]	; (e408 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x58>)
    e3f4:	4798      	blx	r3
		
}
    e3f6:	bf00      	nop
    e3f8:	3708      	adds	r7, #8
    e3fa:	46bd      	mov	sp, r7
    e3fc:	bd80      	pop	{r7, pc}
    e3fe:	bf00      	nop
    e400:	0000e1d1 	.word	0x0000e1d1
    e404:	0000e229 	.word	0x0000e229
    e408:	0000e1fd 	.word	0x0000e1fd

0000e40c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    e40c:	b580      	push	{r7, lr}
    e40e:	b082      	sub	sp, #8
    e410:	af00      	add	r7, sp, #0
    e412:	6078      	str	r0, [r7, #4]
	status = ReadStatusRegister();
    e414:	6878      	ldr	r0, [r7, #4]
    e416:	4b0f      	ldr	r3, [pc, #60]	; (e454 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e418:	4798      	blx	r3
    e41a:	4603      	mov	r3, r0
    e41c:	461a      	mov	r2, r3
    e41e:	687b      	ldr	r3, [r7, #4]
    e420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e424:	687b      	ldr	r3, [r7, #4]
    e426:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e42a:	f003 0301 	and.w	r3, r3, #1
    e42e:	2b00      	cmp	r3, #0
    e430:	d008      	beq.n	e444 <_ZN16FlashMemoryClass8WaitBusyEv+0x38>
			status = ReadStatusRegister();
    e432:	6878      	ldr	r0, [r7, #4]
    e434:	4b07      	ldr	r3, [pc, #28]	; (e454 <_ZN16FlashMemoryClass8WaitBusyEv+0x48>)
    e436:	4798      	blx	r3
    e438:	4603      	mov	r3, r0
    e43a:	461a      	mov	r2, r3
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    e442:	e7ef      	b.n	e424 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
		}
		
		return	status;
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e44a:	4618      	mov	r0, r3
    e44c:	3708      	adds	r7, #8
    e44e:	46bd      	mov	sp, r7
    e450:	bd80      	pop	{r7, pc}
    e452:	bf00      	nop
    e454:	0000e4a5 	.word	0x0000e4a5

0000e458 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    e458:	b580      	push	{r7, lr}
    e45a:	b082      	sub	sp, #8
    e45c:	af00      	add	r7, sp, #0
    e45e:	6078      	str	r0, [r7, #4]
	
	flashOpen();
    e460:	6878      	ldr	r0, [r7, #4]
    e462:	4b0d      	ldr	r3, [pc, #52]	; (e498 <_ZN16FlashMemoryClass7IsReadyEv+0x40>)
    e464:	4798      	blx	r3
	status = ReadStatusRegister();
    e466:	6878      	ldr	r0, [r7, #4]
    e468:	4b0c      	ldr	r3, [pc, #48]	; (e49c <_ZN16FlashMemoryClass7IsReadyEv+0x44>)
    e46a:	4798      	blx	r3
    e46c:	4603      	mov	r3, r0
    e46e:	461a      	mov	r2, r3
    e470:	687b      	ldr	r3, [r7, #4]
    e472:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	flashClose();
    e476:	6878      	ldr	r0, [r7, #4]
    e478:	4b09      	ldr	r3, [pc, #36]	; (e4a0 <_ZN16FlashMemoryClass7IsReadyEv+0x48>)
    e47a:	4798      	blx	r3
	return	(status&0x01)==0;
    e47c:	687b      	ldr	r3, [r7, #4]
    e47e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    e482:	f003 0301 	and.w	r3, r3, #1
    e486:	2b00      	cmp	r3, #0
    e488:	bf0c      	ite	eq
    e48a:	2301      	moveq	r3, #1
    e48c:	2300      	movne	r3, #0
    e48e:	b2db      	uxtb	r3, r3
}
    e490:	4618      	mov	r0, r3
    e492:	3708      	adds	r7, #8
    e494:	46bd      	mov	sp, r7
    e496:	bd80      	pop	{r7, pc}
    e498:	0000e1a9 	.word	0x0000e1a9
    e49c:	0000e4a5 	.word	0x0000e4a5
    e4a0:	0000e51d 	.word	0x0000e51d

0000e4a4 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    e4a4:	b580      	push	{r7, lr}
    e4a6:	b082      	sub	sp, #8
    e4a8:	af00      	add	r7, sp, #0
    e4aa:	6078      	str	r0, [r7, #4]
			status=ReadSingleRegister(kFlashReadSR);
    e4ac:	2105      	movs	r1, #5
    e4ae:	6878      	ldr	r0, [r7, #4]
    e4b0:	4b06      	ldr	r3, [pc, #24]	; (e4cc <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x28>)
    e4b2:	4798      	blx	r3
    e4b4:	4603      	mov	r3, r0
    e4b6:	461a      	mov	r2, r3
    e4b8:	687b      	ldr	r3, [r7, #4]
    e4ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		return status;
    e4be:	687b      	ldr	r3, [r7, #4]
    e4c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    e4c4:	4618      	mov	r0, r3
    e4c6:	3708      	adds	r7, #8
    e4c8:	46bd      	mov	sp, r7
    e4ca:	bd80      	pop	{r7, pc}
    e4cc:	0000e4d1 	.word	0x0000e4d1

0000e4d0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
    e4d0:	b580      	push	{r7, lr}
    e4d2:	b084      	sub	sp, #16
    e4d4:	af00      	add	r7, sp, #0
    e4d6:	6078      	str	r0, [r7, #4]
    e4d8:	460b      	mov	r3, r1
    e4da:	70fb      	strb	r3, [r7, #3]
	uint8_t b = 0;
    e4dc:	2300      	movs	r3, #0
    e4de:	73fb      	strb	r3, [r7, #15]
	CE_Low_Flash();			// enable device
    e4e0:	6878      	ldr	r0, [r7, #4]
    e4e2:	4b0a      	ldr	r3, [pc, #40]	; (e50c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x3c>)
    e4e4:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
    e4e6:	78fb      	ldrb	r3, [r7, #3]
    e4e8:	4619      	mov	r1, r3
    e4ea:	6878      	ldr	r0, [r7, #4]
    e4ec:	4b08      	ldr	r3, [pc, #32]	; (e510 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x40>)
    e4ee:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
    e4f0:	6878      	ldr	r0, [r7, #4]
    e4f2:	4b08      	ldr	r3, [pc, #32]	; (e514 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x44>)
    e4f4:	4798      	blx	r3
    e4f6:	4603      	mov	r3, r0
    e4f8:	73fb      	strb	r3, [r7, #15]
	CE_High_Flash();			// disable device
    e4fa:	6878      	ldr	r0, [r7, #4]
    e4fc:	4b06      	ldr	r3, [pc, #24]	; (e518 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x48>)
    e4fe:	4798      	blx	r3
	return b;
    e500:	7bfb      	ldrb	r3, [r7, #15]
}
    e502:	4618      	mov	r0, r3
    e504:	3710      	adds	r7, #16
    e506:	46bd      	mov	sp, r7
    e508:	bd80      	pop	{r7, pc}
    e50a:	bf00      	nop
    e50c:	0000e1d1 	.word	0x0000e1d1
    e510:	0000e229 	.word	0x0000e229
    e514:	0000e251 	.word	0x0000e251
    e518:	0000e1fd 	.word	0x0000e1fd

0000e51c <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    e51c:	b580      	push	{r7, lr}
    e51e:	b082      	sub	sp, #8
    e520:	af00      	add	r7, sp, #0
    e522:	6078      	str	r0, [r7, #4]
	garbage=0;
    e524:	687b      	ldr	r3, [r7, #4]
    e526:	2200      	movs	r2, #0
    e528:	609a      	str	r2, [r3, #8]
		spi.Disable();
    e52a:	687b      	ldr	r3, [r7, #4]
    e52c:	3318      	adds	r3, #24
    e52e:	4618      	mov	r0, r3
    e530:	4b02      	ldr	r3, [pc, #8]	; (e53c <_ZN16FlashMemoryClass10flashCloseEv+0x20>)
    e532:	4798      	blx	r3
	}
    e534:	bf00      	nop
    e536:	3708      	adds	r7, #8
    e538:	46bd      	mov	sp, r7
    e53a:	bd80      	pop	{r7, pc}
    e53c:	0000f931 	.word	0x0000f931

0000e540 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    e540:	b580      	push	{r7, lr}
    e542:	b082      	sub	sp, #8
    e544:	af00      	add	r7, sp, #0
    e546:	6078      	str	r0, [r7, #4]
    e548:	6039      	str	r1, [r7, #0]
	CE_Low_Flash();				// enable device
    e54a:	6878      	ldr	r0, [r7, #4]
    e54c:	4b10      	ldr	r3, [pc, #64]	; (e590 <_ZN16FlashMemoryClass12Sector_EraseEm+0x50>)
    e54e:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    e550:	2120      	movs	r1, #32
    e552:	6878      	ldr	r0, [r7, #4]
    e554:	4b0f      	ldr	r3, [pc, #60]	; (e594 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e556:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    e558:	683b      	ldr	r3, [r7, #0]
    e55a:	0c1b      	lsrs	r3, r3, #16
    e55c:	b2db      	uxtb	r3, r3
    e55e:	4619      	mov	r1, r3
    e560:	6878      	ldr	r0, [r7, #4]
    e562:	4b0c      	ldr	r3, [pc, #48]	; (e594 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e564:	4798      	blx	r3
	Send_Byte(((Dst & 0xFFFF) >> 8));
    e566:	683b      	ldr	r3, [r7, #0]
    e568:	0a1b      	lsrs	r3, r3, #8
    e56a:	b2db      	uxtb	r3, r3
    e56c:	4619      	mov	r1, r3
    e56e:	6878      	ldr	r0, [r7, #4]
    e570:	4b08      	ldr	r3, [pc, #32]	; (e594 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e572:	4798      	blx	r3
	Send_Byte(Dst & 0xFF);
    e574:	683b      	ldr	r3, [r7, #0]
    e576:	b2db      	uxtb	r3, r3
    e578:	4619      	mov	r1, r3
    e57a:	6878      	ldr	r0, [r7, #4]
    e57c:	4b05      	ldr	r3, [pc, #20]	; (e594 <_ZN16FlashMemoryClass12Sector_EraseEm+0x54>)
    e57e:	4798      	blx	r3
	CE_High_Flash();				// disable device
    e580:	6878      	ldr	r0, [r7, #4]
    e582:	4b05      	ldr	r3, [pc, #20]	; (e598 <_ZN16FlashMemoryClass12Sector_EraseEm+0x58>)
    e584:	4798      	blx	r3
}
    e586:	bf00      	nop
    e588:	3708      	adds	r7, #8
    e58a:	46bd      	mov	sp, r7
    e58c:	bd80      	pop	{r7, pc}
    e58e:	bf00      	nop
    e590:	0000e1d1 	.word	0x0000e1d1
    e594:	0000e229 	.word	0x0000e229
    e598:	0000e1fd 	.word	0x0000e1fd

0000e59c <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e59c:	b580      	push	{r7, lr}
    e59e:	b086      	sub	sp, #24
    e5a0:	af00      	add	r7, sp, #0
    e5a2:	60f8      	str	r0, [r7, #12]
    e5a4:	60b9      	str	r1, [r7, #8]
    e5a6:	607a      	str	r2, [r7, #4]
    e5a8:	603b      	str	r3, [r7, #0]
	uint32_t	w;
	while(!IsReady());
    e5aa:	68f8      	ldr	r0, [r7, #12]
    e5ac:	4b2b      	ldr	r3, [pc, #172]	; (e65c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc0>)
    e5ae:	4798      	blx	r3
    e5b0:	4603      	mov	r3, r0
    e5b2:	f083 0301 	eor.w	r3, r3, #1
    e5b6:	b2db      	uxtb	r3, r3
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d000      	beq.n	e5be <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x22>
    e5bc:	e7f5      	b.n	e5aa <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
    e5be:	68f8      	ldr	r0, [r7, #12]
    e5c0:	4b27      	ldr	r3, [pc, #156]	; (e660 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc4>)
    e5c2:	4798      	blx	r3
	WREN();
    e5c4:	68f8      	ldr	r0, [r7, #12]
    e5c6:	4b27      	ldr	r3, [pc, #156]	; (e664 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xc8>)
    e5c8:	4798      	blx	r3
	CE_Low_Flash();
    e5ca:	68f8      	ldr	r0, [r7, #12]
    e5cc:	4b26      	ldr	r3, [pc, #152]	; (e668 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xcc>)
    e5ce:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    e5d0:	68fb      	ldr	r3, [r7, #12]
    e5d2:	2202      	movs	r2, #2
    e5d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	0c1b      	lsrs	r3, r3, #16
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	68fb      	ldr	r3, [r7, #12]
    e5e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	0a1b      	lsrs	r3, r3, #8
    e5e8:	b2da      	uxtb	r2, r3
    e5ea:	68fb      	ldr	r3, [r7, #12]
    e5ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	localBuffer[3]=(uint8_t)(addr&0xFF);
    e5f0:	687b      	ldr	r3, [r7, #4]
    e5f2:	b2da      	uxtb	r2, r3
    e5f4:	68fb      	ldr	r3, [r7, #12]
    e5f6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	for (uint32_t i = 4; i <(size)+4; i++)
    e5fa:	2304      	movs	r3, #4
    e5fc:	617b      	str	r3, [r7, #20]
    e5fe:	683b      	ldr	r3, [r7, #0]
    e600:	1d1a      	adds	r2, r3, #4
    e602:	697b      	ldr	r3, [r7, #20]
    e604:	429a      	cmp	r2, r3
    e606:	d90e      	bls.n	e626 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8a>
	{
		localBuffer[i]=*p;
    e608:	68bb      	ldr	r3, [r7, #8]
    e60a:	7819      	ldrb	r1, [r3, #0]
    e60c:	68fa      	ldr	r2, [r7, #12]
    e60e:	697b      	ldr	r3, [r7, #20]
    e610:	4413      	add	r3, r2
    e612:	3334      	adds	r3, #52	; 0x34
    e614:	460a      	mov	r2, r1
    e616:	701a      	strb	r2, [r3, #0]
		p++;
    e618:	68bb      	ldr	r3, [r7, #8]
    e61a:	3301      	adds	r3, #1
    e61c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 4; i <(size)+4; i++)
    e61e:	697b      	ldr	r3, [r7, #20]
    e620:	3301      	adds	r3, #1
    e622:	617b      	str	r3, [r7, #20]
    e624:	e7eb      	b.n	e5fe <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x62>
	}


	w=spi.Write(&localBuffer[0],size+4);
    e626:	68fb      	ldr	r3, [r7, #12]
    e628:	f103 0018 	add.w	r0, r3, #24
    e62c:	68fb      	ldr	r3, [r7, #12]
    e62e:	f103 0134 	add.w	r1, r3, #52	; 0x34
    e632:	683b      	ldr	r3, [r7, #0]
    e634:	3304      	adds	r3, #4
    e636:	461a      	mov	r2, r3
    e638:	4b0c      	ldr	r3, [pc, #48]	; (e66c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd0>)
    e63a:	4798      	blx	r3
    e63c:	4603      	mov	r3, r0
    e63e:	613b      	str	r3, [r7, #16]

	CE_High_Flash();
    e640:	68f8      	ldr	r0, [r7, #12]
    e642:	4b0b      	ldr	r3, [pc, #44]	; (e670 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd4>)
    e644:	4798      	blx	r3
	WRDI();
    e646:	68f8      	ldr	r0, [r7, #12]
    e648:	4b0a      	ldr	r3, [pc, #40]	; (e674 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xd8>)
    e64a:	4798      	blx	r3
	flashClose();
    e64c:	68f8      	ldr	r0, [r7, #12]
    e64e:	4b0a      	ldr	r3, [pc, #40]	; (e678 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xdc>)
    e650:	4798      	blx	r3
	return	w;
    e652:	693b      	ldr	r3, [r7, #16]
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    e654:	4618      	mov	r0, r3
    e656:	3718      	adds	r7, #24
    e658:	46bd      	mov	sp, r7
    e65a:	bd80      	pop	{r7, pc}
    e65c:	0000e459 	.word	0x0000e459
    e660:	0000e1a9 	.word	0x0000e1a9
    e664:	0000e279 	.word	0x0000e279
    e668:	0000e1d1 	.word	0x0000e1d1
    e66c:	0000f8a9 	.word	0x0000f8a9
    e670:	0000e1fd 	.word	0x0000e1fd
    e674:	0000e2c9 	.word	0x0000e2c9
    e678:	0000e51d 	.word	0x0000e51d

0000e67c <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    e67c:	b580      	push	{r7, lr}
    e67e:	b086      	sub	sp, #24
    e680:	af00      	add	r7, sp, #0
    e682:	60f8      	str	r0, [r7, #12]
    e684:	60b9      	str	r1, [r7, #8]
    e686:	607a      	str	r2, [r7, #4]
    e688:	603b      	str	r3, [r7, #0]
	uint8_t	dummy;
	while(!IsReady());
    e68a:	68f8      	ldr	r0, [r7, #12]
    e68c:	4b21      	ldr	r3, [pc, #132]	; (e714 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x98>)
    e68e:	4798      	blx	r3
    e690:	4603      	mov	r3, r0
    e692:	f083 0301 	eor.w	r3, r3, #1
    e696:	b2db      	uxtb	r3, r3
    e698:	2b00      	cmp	r3, #0
    e69a:	d000      	beq.n	e69e <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x22>
    e69c:	e7f5      	b.n	e68a <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    e69e:	68f8      	ldr	r0, [r7, #12]
    e6a0:	4b1d      	ldr	r3, [pc, #116]	; (e718 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x9c>)
    e6a2:	4798      	blx	r3
	CE_Low_Flash();
    e6a4:	68f8      	ldr	r0, [r7, #12]
    e6a6:	4b1d      	ldr	r3, [pc, #116]	; (e71c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa0>)
    e6a8:	4798      	blx	r3
	instruction[0]=kFlashRead;
    e6aa:	68fb      	ldr	r3, [r7, #12]
    e6ac:	2203      	movs	r2, #3
    e6ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	0c1b      	lsrs	r3, r3, #16
    e6b6:	b2da      	uxtb	r2, r3
    e6b8:	68fb      	ldr	r3, [r7, #12]
    e6ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	0a1b      	lsrs	r3, r3, #8
    e6c2:	b2da      	uxtb	r2, r3
    e6c4:	68fb      	ldr	r3, [r7, #12]
    e6c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	instruction[3]=(uint8_t)(addr&0xFF);
    e6ca:	687b      	ldr	r3, [r7, #4]
    e6cc:	b2da      	uxtb	r2, r3
    e6ce:	68fb      	ldr	r3, [r7, #12]
    e6d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		
	uint32_t	r=spi.Write(instruction,4);
    e6d4:	68fb      	ldr	r3, [r7, #12]
    e6d6:	f103 0018 	add.w	r0, r3, #24
    e6da:	68fb      	ldr	r3, [r7, #12]
    e6dc:	3348      	adds	r3, #72	; 0x48
    e6de:	2204      	movs	r2, #4
    e6e0:	4619      	mov	r1, r3
    e6e2:	4b0f      	ldr	r3, [pc, #60]	; (e720 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa4>)
    e6e4:	4798      	blx	r3
    e6e6:	4603      	mov	r3, r0
    e6e8:	617b      	str	r3, [r7, #20]
	r=spi.Read(p,size);
    e6ea:	68fb      	ldr	r3, [r7, #12]
    e6ec:	3318      	adds	r3, #24
    e6ee:	683a      	ldr	r2, [r7, #0]
    e6f0:	68b9      	ldr	r1, [r7, #8]
    e6f2:	4618      	mov	r0, r3
    e6f4:	4b0b      	ldr	r3, [pc, #44]	; (e724 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xa8>)
    e6f6:	4798      	blx	r3
    e6f8:	4603      	mov	r3, r0
    e6fa:	617b      	str	r3, [r7, #20]
	CE_High_Flash();
    e6fc:	68f8      	ldr	r0, [r7, #12]
    e6fe:	4b0a      	ldr	r3, [pc, #40]	; (e728 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xac>)
    e700:	4798      	blx	r3
	flashClose();
    e702:	68f8      	ldr	r0, [r7, #12]
    e704:	4b09      	ldr	r3, [pc, #36]	; (e72c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xb0>)
    e706:	4798      	blx	r3
	
	return	r;
    e708:	697b      	ldr	r3, [r7, #20]
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    e70a:	4618      	mov	r0, r3
    e70c:	3718      	adds	r7, #24
    e70e:	46bd      	mov	sp, r7
    e710:	bd80      	pop	{r7, pc}
    e712:	bf00      	nop
    e714:	0000e459 	.word	0x0000e459
    e718:	0000e1a9 	.word	0x0000e1a9
    e71c:	0000e1d1 	.word	0x0000e1d1
    e720:	0000f8a9 	.word	0x0000f8a9
    e724:	0000f8ed 	.word	0x0000f8ed
    e728:	0000e1fd 	.word	0x0000e1fd
    e72c:	0000e51d 	.word	0x0000e51d

0000e730 <_Z41__static_initialization_and_destruction_0ii>:
    e730:	b580      	push	{r7, lr}
    e732:	b082      	sub	sp, #8
    e734:	af00      	add	r7, sp, #0
    e736:	6078      	str	r0, [r7, #4]
    e738:	6039      	str	r1, [r7, #0]
    e73a:	687b      	ldr	r3, [r7, #4]
    e73c:	2b01      	cmp	r3, #1
    e73e:	d10d      	bne.n	e75c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e740:	683b      	ldr	r3, [r7, #0]
    e742:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e746:	4293      	cmp	r3, r2
    e748:	d108      	bne.n	e75c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e74a:	4906      	ldr	r1, [pc, #24]	; (e764 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e74c:	4806      	ldr	r0, [pc, #24]	; (e768 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e74e:	4b07      	ldr	r3, [pc, #28]	; (e76c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e750:	4798      	blx	r3
    e752:	4a07      	ldr	r2, [pc, #28]	; (e770 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e754:	4907      	ldr	r1, [pc, #28]	; (e774 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e756:	4804      	ldr	r0, [pc, #16]	; (e768 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e758:	4b07      	ldr	r3, [pc, #28]	; (e778 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e75a:	4798      	blx	r3
    e75c:	bf00      	nop
    e75e:	3708      	adds	r7, #8
    e760:	46bd      	mov	sp, r7
    e762:	bd80      	pop	{r7, pc}
    e764:	20001328 	.word	0x20001328
    e768:	20000fa4 	.word	0x20000fa4
    e76c:	0000e149 	.word	0x0000e149
    e770:	20000000 	.word	0x20000000
    e774:	0000e189 	.word	0x0000e189
    e778:	0000f9f1 	.word	0x0000f9f1

0000e77c <_GLOBAL__sub_I_flashLayout>:
    e77c:	b580      	push	{r7, lr}
    e77e:	af00      	add	r7, sp, #0
    e780:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e784:	2001      	movs	r0, #1
    e786:	4b01      	ldr	r3, [pc, #4]	; (e78c <_GLOBAL__sub_I_flashLayout+0x10>)
    e788:	4798      	blx	r3
    e78a:	bd80      	pop	{r7, pc}
    e78c:	0000e731 	.word	0x0000e731

0000e790 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e790:	b480      	push	{r7}
    e792:	b083      	sub	sp, #12
    e794:	af00      	add	r7, sp, #0
    e796:	6078      	str	r0, [r7, #4]
    e798:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e79a:	687b      	ldr	r3, [r7, #4]
    e79c:	683a      	ldr	r2, [r7, #0]
    e79e:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    e7a0:	4a06      	ldr	r2, [pc, #24]	; (e7bc <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    e7a2:	687b      	ldr	r3, [r7, #4]
    e7a4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e7a6:	687b      	ldr	r3, [r7, #4]
    e7a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e7ac:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    e7ae:	687b      	ldr	r3, [r7, #4]
    e7b0:	4618      	mov	r0, r3
    e7b2:	370c      	adds	r7, #12
    e7b4:	46bd      	mov	sp, r7
    e7b6:	bc80      	pop	{r7}
    e7b8:	4770      	bx	lr
    e7ba:	bf00      	nop
    e7bc:	20000ff4 	.word	0x20000ff4

0000e7c0 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e7c0:	b480      	push	{r7}
    e7c2:	b083      	sub	sp, #12
    e7c4:	af00      	add	r7, sp, #0
    e7c6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e7c8:	687b      	ldr	r3, [r7, #4]
    e7ca:	2200      	movs	r2, #0
    e7cc:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e7ce:	687b      	ldr	r3, [r7, #4]
    e7d0:	4618      	mov	r0, r3
    e7d2:	370c      	adds	r7, #12
    e7d4:	46bd      	mov	sp, r7
    e7d6:	bc80      	pop	{r7}
    e7d8:	4770      	bx	lr
	...

0000e7dc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e7dc:	b580      	push	{r7, lr}
    e7de:	b086      	sub	sp, #24
    e7e0:	af00      	add	r7, sp, #0
    e7e2:	60f8      	str	r0, [r7, #12]
    e7e4:	60b9      	str	r1, [r7, #8]
    e7e6:	607a      	str	r2, [r7, #4]
    e7e8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e7ea:	68f8      	ldr	r0, [r7, #12]
    e7ec:	4b0d      	ldr	r3, [pc, #52]	; (e824 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e7ee:	4798      	blx	r3
	task->interval = interval;
    e7f0:	68fb      	ldr	r3, [r7, #12]
    e7f2:	699b      	ldr	r3, [r3, #24]
    e7f4:	687a      	ldr	r2, [r7, #4]
    e7f6:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e7f8:	68fb      	ldr	r3, [r7, #12]
    e7fa:	699b      	ldr	r3, [r3, #24]
    e7fc:	68ba      	ldr	r2, [r7, #8]
    e7fe:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e800:	68fb      	ldr	r3, [r7, #12]
    e802:	699b      	ldr	r3, [r3, #24]
    e804:	78fa      	ldrb	r2, [r7, #3]
    e806:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e808:	68fb      	ldr	r3, [r7, #12]
    e80a:	68da      	ldr	r2, [r3, #12]
    e80c:	68fb      	ldr	r3, [r7, #12]
    e80e:	699b      	ldr	r3, [r3, #24]
    e810:	4619      	mov	r1, r3
    e812:	4610      	mov	r0, r2
    e814:	4b04      	ldr	r3, [pc, #16]	; (e828 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e816:	4798      	blx	r3
    e818:	6178      	str	r0, [r7, #20]
	
	return status;
    e81a:	697b      	ldr	r3, [r7, #20]
}
    e81c:	4618      	mov	r0, r3
    e81e:	3718      	adds	r7, #24
    e820:	46bd      	mov	sp, r7
    e822:	bd80      	pop	{r7, pc}
    e824:	0000e8a1 	.word	0x0000e8a1
    e828:	00002edd 	.word	0x00002edd

0000e82c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
    e82c:	b580      	push	{r7, lr}
    e82e:	b086      	sub	sp, #24
    e830:	af00      	add	r7, sp, #0
    e832:	60f8      	str	r0, [r7, #12]
    e834:	60b9      	str	r1, [r7, #8]
    e836:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
    e838:	687a      	ldr	r2, [r7, #4]
    e83a:	68b9      	ldr	r1, [r7, #8]
    e83c:	68f8      	ldr	r0, [r7, #12]
    e83e:	4b0c      	ldr	r3, [pc, #48]	; (e870 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
    e840:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
    e842:	68fb      	ldr	r3, [r7, #12]
    e844:	68db      	ldr	r3, [r3, #12]
    e846:	681b      	ldr	r3, [r3, #0]
    e848:	699b      	ldr	r3, [r3, #24]
    e84a:	68fa      	ldr	r2, [r7, #12]
    e84c:	68d2      	ldr	r2, [r2, #12]
    e84e:	3204      	adds	r2, #4
    e850:	4610      	mov	r0, r2
    e852:	4798      	blx	r3
    e854:	4603      	mov	r3, r0
    e856:	2b00      	cmp	r3, #0
    e858:	d105      	bne.n	e866 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
    e85a:	68fb      	ldr	r3, [r7, #12]
    e85c:	68db      	ldr	r3, [r3, #12]
    e85e:	4618      	mov	r0, r3
    e860:	4b04      	ldr	r3, [pc, #16]	; (e874 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
    e862:	4798      	blx	r3
    e864:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
    e866:	697b      	ldr	r3, [r7, #20]
}
    e868:	4618      	mov	r0, r3
    e86a:	3718      	adds	r7, #24
    e86c:	46bd      	mov	sp, r7
    e86e:	bd80      	pop	{r7, pc}
    e870:	0000e879 	.word	0x0000e879
    e874:	00002e09 	.word	0x00002e09

0000e878 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e878:	b590      	push	{r4, r7, lr}
    e87a:	b087      	sub	sp, #28
    e87c:	af00      	add	r7, sp, #0
    e87e:	60f8      	str	r0, [r7, #12]
    e880:	60b9      	str	r1, [r7, #8]
    e882:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e884:	2301      	movs	r3, #1
    e886:	687a      	ldr	r2, [r7, #4]
    e888:	68b9      	ldr	r1, [r7, #8]
    e88a:	68f8      	ldr	r0, [r7, #12]
    e88c:	4c03      	ldr	r4, [pc, #12]	; (e89c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    e88e:	47a0      	blx	r4
    e890:	6178      	str	r0, [r7, #20]
		return status;
    e892:	697b      	ldr	r3, [r7, #20]
}
    e894:	4618      	mov	r0, r3
    e896:	371c      	adds	r7, #28
    e898:	46bd      	mov	sp, r7
    e89a:	bd90      	pop	{r4, r7, pc}
    e89c:	0000e7dd 	.word	0x0000e7dd

0000e8a0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
		status=timer_start(timer_descr);
	}
	
	return status;
}
void	Timer_Class::ChooseAvailableTimerTask(void){
    e8a0:	b480      	push	{r7}
    e8a2:	b085      	sub	sp, #20
    e8a4:	af00      	add	r7, sp, #0
    e8a6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e8a8:	2300      	movs	r3, #0
    e8aa:	73fb      	strb	r3, [r7, #15]
    e8ac:	7bfb      	ldrb	r3, [r7, #15]
    e8ae:	2b0f      	cmp	r3, #15
    e8b0:	dc1c      	bgt.n	e8ec <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    e8b2:	7bfb      	ldrb	r3, [r7, #15]
    e8b4:	f003 030f 	and.w	r3, r3, #15
    e8b8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    e8ba:	7bba      	ldrb	r2, [r7, #14]
    e8bc:	490f      	ldr	r1, [pc, #60]	; (e8fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e8be:	4613      	mov	r3, r2
    e8c0:	009b      	lsls	r3, r3, #2
    e8c2:	4413      	add	r3, r2
    e8c4:	009b      	lsls	r3, r3, #2
    e8c6:	440b      	add	r3, r1
    e8c8:	330c      	adds	r3, #12
    e8ca:	681b      	ldr	r3, [r3, #0]
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d109      	bne.n	e8e4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    e8d0:	7bba      	ldrb	r2, [r7, #14]
    e8d2:	4613      	mov	r3, r2
    e8d4:	009b      	lsls	r3, r3, #2
    e8d6:	4413      	add	r3, r2
    e8d8:	009b      	lsls	r3, r3, #2
    e8da:	4a08      	ldr	r2, [pc, #32]	; (e8fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e8dc:	441a      	add	r2, r3
    e8de:	687b      	ldr	r3, [r7, #4]
    e8e0:	619a      	str	r2, [r3, #24]
			return;
    e8e2:	e006      	b.n	e8f2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e8e4:	7bfb      	ldrb	r3, [r7, #15]
    e8e6:	3301      	adds	r3, #1
    e8e8:	73fb      	strb	r3, [r7, #15]
    e8ea:	e7df      	b.n	e8ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    e8ec:	687b      	ldr	r3, [r7, #4]
    e8ee:	4a03      	ldr	r2, [pc, #12]	; (e8fc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    e8f0:	619a      	str	r2, [r3, #24]

}
    e8f2:	3714      	adds	r7, #20
    e8f4:	46bd      	mov	sp, r7
    e8f6:	bc80      	pop	{r7}
    e8f8:	4770      	bx	lr
    e8fa:	bf00      	nop
    e8fc:	20000ff8 	.word	0x20000ff8

0000e900 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    e900:	b580      	push	{r7, lr}
    e902:	b082      	sub	sp, #8
    e904:	af00      	add	r7, sp, #0
    e906:	6078      	str	r0, [r7, #4]
    e908:	6039      	str	r1, [r7, #0]
    e90a:	687b      	ldr	r3, [r7, #4]
    e90c:	2b01      	cmp	r3, #1
    e90e:	d131      	bne.n	e974 <_Z41__static_initialization_and_destruction_0ii+0x74>
    e910:	683b      	ldr	r3, [r7, #0]
    e912:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e916:	4293      	cmp	r3, r2
    e918:	d12c      	bne.n	e974 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e91a:	4918      	ldr	r1, [pc, #96]	; (e97c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e91c:	4818      	ldr	r0, [pc, #96]	; (e980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e91e:	4b19      	ldr	r3, [pc, #100]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e920:	4798      	blx	r3
    e922:	4a19      	ldr	r2, [pc, #100]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e924:	4919      	ldr	r1, [pc, #100]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e926:	4816      	ldr	r0, [pc, #88]	; (e980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
    e928:	4b19      	ldr	r3, [pc, #100]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e92a:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    e92c:	4919      	ldr	r1, [pc, #100]	; (e994 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    e92e:	481a      	ldr	r0, [pc, #104]	; (e998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    e930:	4b14      	ldr	r3, [pc, #80]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e932:	4798      	blx	r3
    e934:	4a14      	ldr	r2, [pc, #80]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e936:	4915      	ldr	r1, [pc, #84]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e938:	4817      	ldr	r0, [pc, #92]	; (e998 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    e93a:	4b15      	ldr	r3, [pc, #84]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e93c:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    e93e:	4917      	ldr	r1, [pc, #92]	; (e99c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    e940:	4817      	ldr	r0, [pc, #92]	; (e9a0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    e942:	4b10      	ldr	r3, [pc, #64]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e944:	4798      	blx	r3
    e946:	4a10      	ldr	r2, [pc, #64]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e948:	4910      	ldr	r1, [pc, #64]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e94a:	4815      	ldr	r0, [pc, #84]	; (e9a0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    e94c:	4b10      	ldr	r3, [pc, #64]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e94e:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    e950:	4914      	ldr	r1, [pc, #80]	; (e9a4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    e952:	4815      	ldr	r0, [pc, #84]	; (e9a8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e954:	4b0b      	ldr	r3, [pc, #44]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e956:	4798      	blx	r3
    e958:	4a0b      	ldr	r2, [pc, #44]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e95a:	490c      	ldr	r1, [pc, #48]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e95c:	4812      	ldr	r0, [pc, #72]	; (e9a8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    e95e:	4b0c      	ldr	r3, [pc, #48]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e960:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    e962:	4912      	ldr	r1, [pc, #72]	; (e9ac <_Z41__static_initialization_and_destruction_0ii+0xac>)
    e964:	4812      	ldr	r0, [pc, #72]	; (e9b0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e966:	4b07      	ldr	r3, [pc, #28]	; (e984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    e968:	4798      	blx	r3
    e96a:	4a07      	ldr	r2, [pc, #28]	; (e988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    e96c:	4907      	ldr	r1, [pc, #28]	; (e98c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    e96e:	4810      	ldr	r0, [pc, #64]	; (e9b0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    e970:	4b07      	ldr	r3, [pc, #28]	; (e990 <_Z41__static_initialization_and_destruction_0ii+0x90>)
    e972:	4798      	blx	r3
    e974:	bf00      	nop
    e976:	3708      	adds	r7, #8
    e978:	46bd      	mov	sp, r7
    e97a:	bd80      	pop	{r7, pc}
    e97c:	20001308 	.word	0x20001308
    e980:	2000113c 	.word	0x2000113c
    e984:	0000e791 	.word	0x0000e791
    e988:	20000000 	.word	0x20000000
    e98c:	0000e7c1 	.word	0x0000e7c1
    e990:	0000f9f1 	.word	0x0000f9f1
    e994:	2000137c 	.word	0x2000137c
    e998:	20001158 	.word	0x20001158
    e99c:	20001480 	.word	0x20001480
    e9a0:	20001174 	.word	0x20001174
    e9a4:	2000139c 	.word	0x2000139c
    e9a8:	20001190 	.word	0x20001190
    e9ac:	20001400 	.word	0x20001400
    e9b0:	200011ac 	.word	0x200011ac

0000e9b4 <_GLOBAL__sub_I_ptrTimerClass>:
    e9b4:	b580      	push	{r7, lr}
    e9b6:	af00      	add	r7, sp, #0
    e9b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9bc:	2001      	movs	r0, #1
    e9be:	4b01      	ldr	r3, [pc, #4]	; (e9c4 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e9c0:	4798      	blx	r3
    e9c2:	bd80      	pop	{r7, pc}
    e9c4:	0000e901 	.word	0x0000e901

0000e9c8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e9c8:	b480      	push	{r7}
    e9ca:	b083      	sub	sp, #12
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	6078      	str	r0, [r7, #4]
    e9d0:	4a05      	ldr	r2, [pc, #20]	; (e9e8 <_ZN5PrintC1Ev+0x20>)
    e9d2:	687b      	ldr	r3, [r7, #4]
    e9d4:	601a      	str	r2, [r3, #0]
    e9d6:	687b      	ldr	r3, [r7, #4]
    e9d8:	2200      	movs	r2, #0
    e9da:	605a      	str	r2, [r3, #4]
    e9dc:	687b      	ldr	r3, [r7, #4]
    e9de:	4618      	mov	r0, r3
    e9e0:	370c      	adds	r7, #12
    e9e2:	46bd      	mov	sp, r7
    e9e4:	bc80      	pop	{r7}
    e9e6:	4770      	bx	lr
    e9e8:	00010390 	.word	0x00010390

0000e9ec <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e9ec:	b480      	push	{r7}
    e9ee:	b083      	sub	sp, #12
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	6078      	str	r0, [r7, #4]
    e9f4:	2300      	movs	r3, #0
    e9f6:	4618      	mov	r0, r3
    e9f8:	370c      	adds	r7, #12
    e9fa:	46bd      	mov	sp, r7
    e9fc:	bc80      	pop	{r7}
    e9fe:	4770      	bx	lr

0000ea00 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    ea00:	b480      	push	{r7}
    ea02:	b083      	sub	sp, #12
    ea04:	af00      	add	r7, sp, #0
    ea06:	6078      	str	r0, [r7, #4]
    ea08:	bf00      	nop
    ea0a:	370c      	adds	r7, #12
    ea0c:	46bd      	mov	sp, r7
    ea0e:	bc80      	pop	{r7}
    ea10:	4770      	bx	lr
	...

0000ea14 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	4618      	mov	r0, r3
    ea20:	4b06      	ldr	r3, [pc, #24]	; (ea3c <_ZN6StreamC1Ev+0x28>)
    ea22:	4798      	blx	r3
    ea24:	4a06      	ldr	r2, [pc, #24]	; (ea40 <_ZN6StreamC1Ev+0x2c>)
    ea26:	687b      	ldr	r3, [r7, #4]
    ea28:	601a      	str	r2, [r3, #0]
    ea2a:	687b      	ldr	r3, [r7, #4]
    ea2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ea30:	609a      	str	r2, [r3, #8]
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	4618      	mov	r0, r3
    ea36:	3708      	adds	r7, #8
    ea38:	46bd      	mov	sp, r7
    ea3a:	bd80      	pop	{r7, pc}
    ea3c:	0000e9c9 	.word	0x0000e9c9
    ea40:	00010354 	.word	0x00010354

0000ea44 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    ea44:	b480      	push	{r7}
    ea46:	b083      	sub	sp, #12
    ea48:	af00      	add	r7, sp, #0
    ea4a:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    ea4c:	4b06      	ldr	r3, [pc, #24]	; (ea68 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ea4e:	681b      	ldr	r3, [r3, #0]
    ea50:	2201      	movs	r2, #1
    ea52:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    ea54:	4b04      	ldr	r3, [pc, #16]	; (ea68 <_ZL10USBTimeoutPK10timer_task+0x24>)
    ea56:	681b      	ldr	r3, [r3, #0]
    ea58:	2200      	movs	r2, #0
    ea5a:	741a      	strb	r2, [r3, #16]
	
}
    ea5c:	bf00      	nop
    ea5e:	370c      	adds	r7, #12
    ea60:	46bd      	mov	sp, r7
    ea62:	bc80      	pop	{r7}
    ea64:	4770      	bx	lr
    ea66:	bf00      	nop
    ea68:	200011c8 	.word	0x200011c8

0000ea6c <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ea6c:	b480      	push	{r7}
    ea6e:	b083      	sub	sp, #12
    ea70:	af00      	add	r7, sp, #0
    ea72:	4603      	mov	r3, r0
    ea74:	603a      	str	r2, [r7, #0]
    ea76:	71fb      	strb	r3, [r7, #7]
    ea78:	460b      	mov	r3, r1
    ea7a:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    ea7c:	4b08      	ldr	r3, [pc, #32]	; (eaa0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ea7e:	681b      	ldr	r3, [r3, #0]
    ea80:	2201      	movs	r2, #1
    ea82:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    ea84:	4b06      	ldr	r3, [pc, #24]	; (eaa0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ea86:	681b      	ldr	r3, [r3, #0]
    ea88:	2201      	movs	r2, #1
    ea8a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    ea8c:	4b04      	ldr	r3, [pc, #16]	; (eaa0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    ea8e:	681b      	ldr	r3, [r3, #0]
    ea90:	2201      	movs	r2, #1
    ea92:	741a      	strb	r2, [r3, #16]


	return false;
    ea94:	2300      	movs	r3, #0
}
    ea96:	4618      	mov	r0, r3
    ea98:	370c      	adds	r7, #12
    ea9a:	46bd      	mov	sp, r7
    ea9c:	bc80      	pop	{r7}
    ea9e:	4770      	bx	lr
    eaa0:	200011c8 	.word	0x200011c8

0000eaa4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    eaa4:	b480      	push	{r7}
    eaa6:	b083      	sub	sp, #12
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	4603      	mov	r3, r0
    eaac:	603a      	str	r2, [r7, #0]
    eaae:	71fb      	strb	r3, [r7, #7]
    eab0:	460b      	mov	r3, r1
    eab2:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    eab4:	4b08      	ldr	r3, [pc, #32]	; (ead8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	2201      	movs	r2, #1
    eaba:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    eabc:	4b06      	ldr	r3, [pc, #24]	; (ead8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    eabe:	681b      	ldr	r3, [r3, #0]
    eac0:	2201      	movs	r2, #1
    eac2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    eac4:	4b04      	ldr	r3, [pc, #16]	; (ead8 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    eac6:	681b      	ldr	r3, [r3, #0]
    eac8:	2201      	movs	r2, #1
    eaca:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    eacc:	2300      	movs	r3, #0
}
    eace:	4618      	mov	r0, r3
    ead0:	370c      	adds	r7, #12
    ead2:	46bd      	mov	sp, r7
    ead4:	bc80      	pop	{r7}
    ead6:	4770      	bx	lr
    ead8:	200011c8 	.word	0x200011c8

0000eadc <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    eadc:	b580      	push	{r7, lr}
    eade:	b082      	sub	sp, #8
    eae0:	af00      	add	r7, sp, #0
    eae2:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    eae4:	793b      	ldrb	r3, [r7, #4]
    eae6:	f003 0301 	and.w	r3, r3, #1
    eaea:	b2db      	uxtb	r3, r3
    eaec:	2b00      	cmp	r3, #0
    eaee:	d013      	beq.n	eb18 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    eaf0:	490c      	ldr	r1, [pc, #48]	; (eb24 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    eaf2:	2000      	movs	r0, #0
    eaf4:	4b0c      	ldr	r3, [pc, #48]	; (eb28 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    eaf6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    eaf8:	490c      	ldr	r1, [pc, #48]	; (eb2c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    eafa:	2001      	movs	r0, #1
    eafc:	4b0a      	ldr	r3, [pc, #40]	; (eb28 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    eafe:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    eb00:	4b0b      	ldr	r3, [pc, #44]	; (eb30 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    eb02:	681b      	ldr	r3, [r3, #0]
    eb04:	2201      	movs	r2, #1
    eb06:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    eb08:	4b09      	ldr	r3, [pc, #36]	; (eb30 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    eb0a:	681b      	ldr	r3, [r3, #0]
    eb0c:	2201      	movs	r2, #1
    eb0e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    eb10:	4b07      	ldr	r3, [pc, #28]	; (eb30 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    eb12:	681b      	ldr	r3, [r3, #0]
    eb14:	2201      	movs	r2, #1
    eb16:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    eb18:	2300      	movs	r3, #0
}
    eb1a:	4618      	mov	r0, r3
    eb1c:	3708      	adds	r7, #8
    eb1e:	46bd      	mov	sp, r7
    eb20:	bd80      	pop	{r7, pc}
    eb22:	bf00      	nop
    eb24:	0000ea6d 	.word	0x0000ea6d
    eb28:	0000cb89 	.word	0x0000cb89
    eb2c:	0000eaa5 	.word	0x0000eaa5
    eb30:	200011c8 	.word	0x200011c8

0000eb34 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    eb34:	b580      	push	{r7, lr}
    eb36:	b082      	sub	sp, #8
    eb38:	af00      	add	r7, sp, #0
    eb3a:	6078      	str	r0, [r7, #4]
    eb3c:	687b      	ldr	r3, [r7, #4]
    eb3e:	4618      	mov	r0, r3
    eb40:	4b0a      	ldr	r3, [pc, #40]	; (eb6c <_ZN9CDC_ClassC1Ev+0x38>)
    eb42:	4798      	blx	r3
    eb44:	687b      	ldr	r3, [r7, #4]
    eb46:	3310      	adds	r3, #16
    eb48:	4618      	mov	r0, r3
    eb4a:	4b09      	ldr	r3, [pc, #36]	; (eb70 <_ZN9CDC_ClassC1Ev+0x3c>)
    eb4c:	4798      	blx	r3
    eb4e:	4a09      	ldr	r2, [pc, #36]	; (eb74 <_ZN9CDC_ClassC1Ev+0x40>)
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    eb54:	687b      	ldr	r3, [r7, #4]
    eb56:	f04f 32ff 	mov.w	r2, #4294967295
    eb5a:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    eb5c:	4a06      	ldr	r2, [pc, #24]	; (eb78 <_ZN9CDC_ClassC1Ev+0x44>)
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    eb62:	687b      	ldr	r3, [r7, #4]
    eb64:	4618      	mov	r0, r3
    eb66:	3708      	adds	r7, #8
    eb68:	46bd      	mov	sp, r7
    eb6a:	bd80      	pop	{r7, pc}
    eb6c:	0000ea15 	.word	0x0000ea15
    eb70:	0000f395 	.word	0x0000f395
    eb74:	00010324 	.word	0x00010324
    eb78:	200011c8 	.word	0x200011c8

0000eb7c <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    eb7c:	b580      	push	{r7, lr}
    eb7e:	b082      	sub	sp, #8
    eb80:	af00      	add	r7, sp, #0
    eb82:	6078      	str	r0, [r7, #4]
    eb84:	4a06      	ldr	r2, [pc, #24]	; (eba0 <_ZN9CDC_ClassD1Ev+0x24>)
    eb86:	687b      	ldr	r3, [r7, #4]
    eb88:	601a      	str	r2, [r3, #0]
    eb8a:	687b      	ldr	r3, [r7, #4]
    eb8c:	3310      	adds	r3, #16
    eb8e:	4618      	mov	r0, r3
    eb90:	4b04      	ldr	r3, [pc, #16]	; (eba4 <_ZN9CDC_ClassD1Ev+0x28>)
    eb92:	4798      	blx	r3
{
} //~CDC_Class
    eb94:	687b      	ldr	r3, [r7, #4]
    eb96:	4618      	mov	r0, r3
    eb98:	3708      	adds	r7, #8
    eb9a:	46bd      	mov	sp, r7
    eb9c:	bd80      	pop	{r7, pc}
    eb9e:	bf00      	nop
    eba0:	00010324 	.word	0x00010324
    eba4:	0000f3b5 	.word	0x0000f3b5

0000eba8 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    eba8:	b580      	push	{r7, lr}
    ebaa:	b082      	sub	sp, #8
    ebac:	af00      	add	r7, sp, #0
    ebae:	6078      	str	r0, [r7, #4]
	
	OnInit();
    ebb0:	687b      	ldr	r3, [r7, #4]
    ebb2:	3310      	adds	r3, #16
    ebb4:	4618      	mov	r0, r3
    ebb6:	4b09      	ldr	r3, [pc, #36]	; (ebdc <_ZN9CDC_Class4InitEv+0x34>)
    ebb8:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    ebba:	4909      	ldr	r1, [pc, #36]	; (ebe0 <_ZN9CDC_Class4InitEv+0x38>)
    ebbc:	2003      	movs	r0, #3
    ebbe:	4b09      	ldr	r3, [pc, #36]	; (ebe4 <_ZN9CDC_Class4InitEv+0x3c>)
    ebc0:	4798      	blx	r3
	delay_ms(100);
    ebc2:	2064      	movs	r0, #100	; 0x64
    ebc4:	4b08      	ldr	r3, [pc, #32]	; (ebe8 <_ZN9CDC_Class4InitEv+0x40>)
    ebc6:	4798      	blx	r3
		
	if (connected)
    ebc8:	687b      	ldr	r3, [r7, #4]
    ebca:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    ebcc:	2064      	movs	r0, #100	; 0x64
    ebce:	4b06      	ldr	r3, [pc, #24]	; (ebe8 <_ZN9CDC_Class4InitEv+0x40>)
    ebd0:	4798      	blx	r3

	

}
    ebd2:	bf00      	nop
    ebd4:	3708      	adds	r7, #8
    ebd6:	46bd      	mov	sp, r7
    ebd8:	bd80      	pop	{r7, pc}
    ebda:	bf00      	nop
    ebdc:	0000f3c9 	.word	0x0000f3c9
    ebe0:	0000eadd 	.word	0x0000eadd
    ebe4:	0000cb89 	.word	0x0000cb89
    ebe8:	00002341 	.word	0x00002341

0000ebec <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    ebec:	b580      	push	{r7, lr}
    ebee:	b082      	sub	sp, #8
    ebf0:	af00      	add	r7, sp, #0
    ebf2:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    ebf4:	4b03      	ldr	r3, [pc, #12]	; (ec04 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    ebf6:	4798      	blx	r3
    ebf8:	4603      	mov	r3, r0
	
}
    ebfa:	4618      	mov	r0, r3
    ebfc:	3708      	adds	r7, #8
    ebfe:	46bd      	mov	sp, r7
    ec00:	bd80      	pop	{r7, pc}
    ec02:	bf00      	nop
    ec04:	0000cc01 	.word	0x0000cc01

0000ec08 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    ec08:	b580      	push	{r7, lr}
    ec0a:	b084      	sub	sp, #16
    ec0c:	af00      	add	r7, sp, #0
    ec0e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    ec10:	687b      	ldr	r3, [r7, #4]
    ec12:	699b      	ldr	r3, [r3, #24]
    ec14:	f1b3 3fff 	cmp.w	r3, #4294967295
    ec18:	bf14      	ite	ne
    ec1a:	2301      	movne	r3, #1
    ec1c:	2300      	moveq	r3, #0
    ec1e:	b2db      	uxtb	r3, r3
    ec20:	2b00      	cmp	r3, #0
    ec22:	d002      	beq.n	ec2a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    ec24:	687b      	ldr	r3, [r7, #4]
    ec26:	699b      	ldr	r3, [r3, #24]
    ec28:	e011      	b.n	ec4e <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    ec2a:	687b      	ldr	r3, [r7, #4]
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	331c      	adds	r3, #28
    ec30:	681b      	ldr	r3, [r3, #0]
    ec32:	f107 010f 	add.w	r1, r7, #15
    ec36:	2201      	movs	r2, #1
    ec38:	6878      	ldr	r0, [r7, #4]
    ec3a:	4798      	blx	r3
    ec3c:	4602      	mov	r2, r0
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    ec42:	7bfb      	ldrb	r3, [r7, #15]
    ec44:	461a      	mov	r2, r3
    ec46:	687b      	ldr	r3, [r7, #4]
    ec48:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    ec4a:	687b      	ldr	r3, [r7, #4]
    ec4c:	699b      	ldr	r3, [r3, #24]
}
    ec4e:	4618      	mov	r0, r3
    ec50:	3710      	adds	r7, #16
    ec52:	46bd      	mov	sp, r7
    ec54:	bd80      	pop	{r7, pc}
	...

0000ec58 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    ec58:	b580      	push	{r7, lr}
    ec5a:	b086      	sub	sp, #24
    ec5c:	af00      	add	r7, sp, #0
    ec5e:	60f8      	str	r0, [r7, #12]
    ec60:	60b9      	str	r1, [r7, #8]
    ec62:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    ec64:	68fb      	ldr	r3, [r7, #12]
    ec66:	7c1b      	ldrb	r3, [r3, #16]
    ec68:	b2db      	uxtb	r3, r3
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d02e      	beq.n	eccc <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ec6e:	687a      	ldr	r2, [r7, #4]
    ec70:	4613      	mov	r3, r2
    ec72:	009b      	lsls	r3, r3, #2
    ec74:	4413      	add	r3, r2
    ec76:	005b      	lsls	r3, r3, #1
    ec78:	461a      	mov	r2, r3
    ec7a:	4918      	ldr	r1, [pc, #96]	; (ecdc <_ZN9CDC_Class8readDataEPvl+0x84>)
    ec7c:	4818      	ldr	r0, [pc, #96]	; (ece0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ec7e:	4b19      	ldr	r3, [pc, #100]	; (ece4 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    ec80:	4798      	blx	r3
		rxReady=false;
    ec82:	68fb      	ldr	r3, [r7, #12]
    ec84:	2200      	movs	r2, #0
    ec86:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    ec88:	687b      	ldr	r3, [r7, #4]
    ec8a:	4619      	mov	r1, r3
    ec8c:	68b8      	ldr	r0, [r7, #8]
    ec8e:	4b16      	ldr	r3, [pc, #88]	; (ece8 <_ZN9CDC_Class8readDataEPvl+0x90>)
    ec90:	4798      	blx	r3
    ec92:	4603      	mov	r3, r0
    ec94:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    ec96:	68fb      	ldr	r3, [r7, #12]
    ec98:	7d5b      	ldrb	r3, [r3, #21]
    ec9a:	b2db      	uxtb	r3, r3
    ec9c:	f083 0301 	eor.w	r3, r3, #1
    eca0:	b2db      	uxtb	r3, r3
    eca2:	2b00      	cmp	r3, #0
    eca4:	d006      	beq.n	ecb4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    eca6:	68fb      	ldr	r3, [r7, #12]
    eca8:	7c1b      	ldrb	r3, [r3, #16]
    ecaa:	b2db      	uxtb	r3, r3
    ecac:	2b00      	cmp	r3, #0
    ecae:	d001      	beq.n	ecb4 <_ZN9CDC_Class8readDataEPvl+0x5c>
    ecb0:	2301      	movs	r3, #1
    ecb2:	e000      	b.n	ecb6 <_ZN9CDC_Class8readDataEPvl+0x5e>
    ecb4:	2300      	movs	r3, #0
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d000      	beq.n	ecbc <_ZN9CDC_Class8readDataEPvl+0x64>
    ecba:	e7ec      	b.n	ec96 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    ecbc:	4808      	ldr	r0, [pc, #32]	; (ece0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ecbe:	4b0b      	ldr	r3, [pc, #44]	; (ecec <_ZN9CDC_Class8readDataEPvl+0x94>)
    ecc0:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ecc2:	4906      	ldr	r1, [pc, #24]	; (ecdc <_ZN9CDC_Class8readDataEPvl+0x84>)
    ecc4:	4806      	ldr	r0, [pc, #24]	; (ece0 <_ZN9CDC_Class8readDataEPvl+0x88>)
    ecc6:	4b0a      	ldr	r3, [pc, #40]	; (ecf0 <_ZN9CDC_Class8readDataEPvl+0x98>)
    ecc8:	4798      	blx	r3
    ecca:	e001      	b.n	ecd0 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    eccc:	2300      	movs	r3, #0
    ecce:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    ecd0:	7dfb      	ldrb	r3, [r7, #23]
}
    ecd2:	4618      	mov	r0, r3
    ecd4:	3718      	adds	r7, #24
    ecd6:	46bd      	mov	sp, r7
    ecd8:	bd80      	pop	{r7, pc}
    ecda:	bf00      	nop
    ecdc:	0000ea45 	.word	0x0000ea45
    ece0:	20001284 	.word	0x20001284
    ece4:	0000f635 	.word	0x0000f635
    ece8:	0000cadd 	.word	0x0000cadd
    ecec:	0000f555 	.word	0x0000f555
    ecf0:	0000f699 	.word	0x0000f699

0000ecf4 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    ecf4:	b580      	push	{r7, lr}
    ecf6:	b086      	sub	sp, #24
    ecf8:	af00      	add	r7, sp, #0
    ecfa:	60f8      	str	r0, [r7, #12]
    ecfc:	60b9      	str	r1, [r7, #8]
    ecfe:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    ed00:	68fb      	ldr	r3, [r7, #12]
    ed02:	2200      	movs	r2, #0
    ed04:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    ed06:	687b      	ldr	r3, [r7, #4]
    ed08:	4619      	mov	r1, r3
    ed0a:	68b8      	ldr	r0, [r7, #8]
    ed0c:	4b04      	ldr	r3, [pc, #16]	; (ed20 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    ed0e:	4798      	blx	r3
    ed10:	4603      	mov	r3, r0
    ed12:	617b      	str	r3, [r7, #20]
	return r;
    ed14:	697b      	ldr	r3, [r7, #20]
}
    ed16:	4618      	mov	r0, r3
    ed18:	3718      	adds	r7, #24
    ed1a:	46bd      	mov	sp, r7
    ed1c:	bd80      	pop	{r7, pc}
    ed1e:	bf00      	nop
    ed20:	0000cadd 	.word	0x0000cadd

0000ed24 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    ed24:	b580      	push	{r7, lr}
    ed26:	b084      	sub	sp, #16
    ed28:	af00      	add	r7, sp, #0
    ed2a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    ed2c:	687b      	ldr	r3, [r7, #4]
    ed2e:	2200      	movs	r2, #0
    ed30:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    ed32:	f107 030f 	add.w	r3, r7, #15
    ed36:	2101      	movs	r1, #1
    ed38:	4618      	mov	r0, r3
    ed3a:	4b08      	ldr	r3, [pc, #32]	; (ed5c <_ZN9CDC_Class4readEv+0x38>)
    ed3c:	4798      	blx	r3
	while(!rxReady);
    ed3e:	687b      	ldr	r3, [r7, #4]
    ed40:	7d5b      	ldrb	r3, [r3, #21]
    ed42:	b2db      	uxtb	r3, r3
    ed44:	f083 0301 	eor.w	r3, r3, #1
    ed48:	b2db      	uxtb	r3, r3
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d000      	beq.n	ed50 <_ZN9CDC_Class4readEv+0x2c>
    ed4e:	e7f6      	b.n	ed3e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    ed50:	7bfb      	ldrb	r3, [r7, #15]
}
    ed52:	4618      	mov	r0, r3
    ed54:	3710      	adds	r7, #16
    ed56:	46bd      	mov	sp, r7
    ed58:	bd80      	pop	{r7, pc}
    ed5a:	bf00      	nop
    ed5c:	0000cadd 	.word	0x0000cadd

0000ed60 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    ed60:	b580      	push	{r7, lr}
    ed62:	b082      	sub	sp, #8
    ed64:	af00      	add	r7, sp, #0
    ed66:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    ed68:	687b      	ldr	r3, [r7, #4]
    ed6a:	331c      	adds	r3, #28
    ed6c:	2140      	movs	r1, #64	; 0x40
    ed6e:	4618      	mov	r0, r3
    ed70:	4b02      	ldr	r3, [pc, #8]	; (ed7c <_ZN9CDC_Class5flushEv+0x1c>)
    ed72:	4798      	blx	r3
}
    ed74:	bf00      	nop
    ed76:	3708      	adds	r7, #8
    ed78:	46bd      	mov	sp, r7
    ed7a:	bd80      	pop	{r7, pc}
    ed7c:	0000cb21 	.word	0x0000cb21

0000ed80 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    ed80:	b580      	push	{r7, lr}
    ed82:	b082      	sub	sp, #8
    ed84:	af00      	add	r7, sp, #0
    ed86:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    ed88:	4b02      	ldr	r3, [pc, #8]	; (ed94 <_ZN9CDC_Class5clearEv+0x14>)
    ed8a:	4798      	blx	r3
}
    ed8c:	bf00      	nop
    ed8e:	3708      	adds	r7, #8
    ed90:	46bd      	mov	sp, r7
    ed92:	bd80      	pop	{r7, pc}
    ed94:	0000cb65 	.word	0x0000cb65

0000ed98 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    ed98:	b580      	push	{r7, lr}
    ed9a:	b082      	sub	sp, #8
    ed9c:	af00      	add	r7, sp, #0
    ed9e:	6078      	str	r0, [r7, #4]
    eda0:	460b      	mov	r3, r1
    eda2:	70fb      	strb	r3, [r7, #3]
	if (connected){
    eda4:	687b      	ldr	r3, [r7, #4]
    eda6:	7c1b      	ldrb	r3, [r3, #16]
    eda8:	b2db      	uxtb	r3, r3
    edaa:	2b00      	cmp	r3, #0
    edac:	d012      	beq.n	edd4 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	7d1b      	ldrb	r3, [r3, #20]
    edb2:	b2db      	uxtb	r3, r3
    edb4:	f083 0301 	eor.w	r3, r3, #1
    edb8:	b2db      	uxtb	r3, r3
    edba:	2b00      	cmp	r3, #0
    edbc:	d000      	beq.n	edc0 <_ZN9CDC_Class5writeEh+0x28>
    edbe:	e7f6      	b.n	edae <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    edc0:	687b      	ldr	r3, [r7, #4]
    edc2:	681b      	ldr	r3, [r3, #0]
    edc4:	3324      	adds	r3, #36	; 0x24
    edc6:	681b      	ldr	r3, [r3, #0]
    edc8:	1cf9      	adds	r1, r7, #3
    edca:	2201      	movs	r2, #1
    edcc:	6878      	ldr	r0, [r7, #4]
    edce:	4798      	blx	r3
    edd0:	4603      	mov	r3, r0
    edd2:	e000      	b.n	edd6 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    edd4:	2300      	movs	r3, #0
	}
		
}
    edd6:	4618      	mov	r0, r3
    edd8:	3708      	adds	r7, #8
    edda:	46bd      	mov	sp, r7
    eddc:	bd80      	pop	{r7, pc}
	...

0000ede0 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    ede0:	b580      	push	{r7, lr}
    ede2:	b086      	sub	sp, #24
    ede4:	af00      	add	r7, sp, #0
    ede6:	60f8      	str	r0, [r7, #12]
    ede8:	60b9      	str	r1, [r7, #8]
    edea:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    edec:	68fb      	ldr	r3, [r7, #12]
    edee:	7c1b      	ldrb	r3, [r3, #16]
    edf0:	b2db      	uxtb	r3, r3
    edf2:	2b00      	cmp	r3, #0
    edf4:	d02f      	beq.n	ee56 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    edf6:	687a      	ldr	r2, [r7, #4]
    edf8:	4613      	mov	r3, r2
    edfa:	009b      	lsls	r3, r3, #2
    edfc:	4413      	add	r3, r2
    edfe:	005b      	lsls	r3, r3, #1
    ee00:	461a      	mov	r2, r3
    ee02:	4917      	ldr	r1, [pc, #92]	; (ee60 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ee04:	4817      	ldr	r0, [pc, #92]	; (ee64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ee06:	4b18      	ldr	r3, [pc, #96]	; (ee68 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ee08:	4798      	blx	r3
		txReady=false;
    ee0a:	68fb      	ldr	r3, [r7, #12]
    ee0c:	2200      	movs	r2, #0
    ee0e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ee10:	687b      	ldr	r3, [r7, #4]
    ee12:	4619      	mov	r1, r3
    ee14:	68b8      	ldr	r0, [r7, #8]
    ee16:	4b15      	ldr	r3, [pc, #84]	; (ee6c <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    ee18:	4798      	blx	r3
    ee1a:	4603      	mov	r3, r0
    ee1c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    ee1e:	68fb      	ldr	r3, [r7, #12]
    ee20:	7d1b      	ldrb	r3, [r3, #20]
    ee22:	b2db      	uxtb	r3, r3
    ee24:	f083 0301 	eor.w	r3, r3, #1
    ee28:	b2db      	uxtb	r3, r3
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d006      	beq.n	ee3c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ee2e:	68fb      	ldr	r3, [r7, #12]
    ee30:	7c1b      	ldrb	r3, [r3, #16]
    ee32:	b2db      	uxtb	r3, r3
    ee34:	2b00      	cmp	r3, #0
    ee36:	d001      	beq.n	ee3c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ee38:	2301      	movs	r3, #1
    ee3a:	e000      	b.n	ee3e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    ee3c:	2300      	movs	r3, #0
    ee3e:	2b00      	cmp	r3, #0
    ee40:	d000      	beq.n	ee44 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    ee42:	e7ec      	b.n	ee1e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    ee44:	4807      	ldr	r0, [pc, #28]	; (ee64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ee46:	4b0a      	ldr	r3, [pc, #40]	; (ee70 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    ee48:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ee4a:	4905      	ldr	r1, [pc, #20]	; (ee60 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ee4c:	4805      	ldr	r0, [pc, #20]	; (ee64 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ee4e:	4b09      	ldr	r3, [pc, #36]	; (ee74 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    ee50:	4798      	blx	r3
		return r;
    ee52:	697b      	ldr	r3, [r7, #20]
    ee54:	e000      	b.n	ee58 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    ee56:	2300      	movs	r3, #0
	}
	

}
    ee58:	4618      	mov	r0, r3
    ee5a:	3718      	adds	r7, #24
    ee5c:	46bd      	mov	sp, r7
    ee5e:	bd80      	pop	{r7, pc}
    ee60:	0000ea45 	.word	0x0000ea45
    ee64:	20001284 	.word	0x20001284
    ee68:	0000f635 	.word	0x0000f635
    ee6c:	0000cb21 	.word	0x0000cb21
    ee70:	0000f555 	.word	0x0000f555
    ee74:	0000f699 	.word	0x0000f699

0000ee78 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b086      	sub	sp, #24
    ee7c:	af00      	add	r7, sp, #0
    ee7e:	60f8      	str	r0, [r7, #12]
    ee80:	60b9      	str	r1, [r7, #8]
    ee82:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    ee84:	68fb      	ldr	r3, [r7, #12]
    ee86:	2200      	movs	r2, #0
    ee88:	751a      	strb	r2, [r3, #20]

 	if (connected){
    ee8a:	68fb      	ldr	r3, [r7, #12]
    ee8c:	7c1b      	ldrb	r3, [r3, #16]
    ee8e:	b2db      	uxtb	r3, r3
    ee90:	2b00      	cmp	r3, #0
    ee92:	d02a      	beq.n	eeea <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ee94:	687a      	ldr	r2, [r7, #4]
    ee96:	4613      	mov	r3, r2
    ee98:	009b      	lsls	r3, r3, #2
    ee9a:	4413      	add	r3, r2
    ee9c:	005b      	lsls	r3, r3, #1
    ee9e:	461a      	mov	r2, r3
    eea0:	4915      	ldr	r1, [pc, #84]	; (eef8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    eea2:	4816      	ldr	r0, [pc, #88]	; (eefc <_ZN9CDC_Class5writeEPKhj+0x84>)
    eea4:	4b16      	ldr	r3, [pc, #88]	; (ef00 <_ZN9CDC_Class5writeEPKhj+0x88>)
    eea6:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    eea8:	6879      	ldr	r1, [r7, #4]
    eeaa:	68b8      	ldr	r0, [r7, #8]
    eeac:	4b15      	ldr	r3, [pc, #84]	; (ef04 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    eeae:	4798      	blx	r3
    eeb0:	4603      	mov	r3, r0
    eeb2:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    eeb4:	68fb      	ldr	r3, [r7, #12]
    eeb6:	7d1b      	ldrb	r3, [r3, #20]
    eeb8:	b2db      	uxtb	r3, r3
    eeba:	f083 0301 	eor.w	r3, r3, #1
    eebe:	b2db      	uxtb	r3, r3
    eec0:	2b00      	cmp	r3, #0
    eec2:	d006      	beq.n	eed2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    eec4:	68fb      	ldr	r3, [r7, #12]
    eec6:	7c1b      	ldrb	r3, [r3, #16]
    eec8:	b2db      	uxtb	r3, r3
    eeca:	2b00      	cmp	r3, #0
    eecc:	d001      	beq.n	eed2 <_ZN9CDC_Class5writeEPKhj+0x5a>
    eece:	2301      	movs	r3, #1
    eed0:	e000      	b.n	eed4 <_ZN9CDC_Class5writeEPKhj+0x5c>
    eed2:	2300      	movs	r3, #0
    eed4:	2b00      	cmp	r3, #0
    eed6:	d000      	beq.n	eeda <_ZN9CDC_Class5writeEPKhj+0x62>
    eed8:	e7ec      	b.n	eeb4 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    eeda:	4808      	ldr	r0, [pc, #32]	; (eefc <_ZN9CDC_Class5writeEPKhj+0x84>)
    eedc:	4b0a      	ldr	r3, [pc, #40]	; (ef08 <_ZN9CDC_Class5writeEPKhj+0x90>)
    eede:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    eee0:	4905      	ldr	r1, [pc, #20]	; (eef8 <_ZN9CDC_Class5writeEPKhj+0x80>)
    eee2:	4806      	ldr	r0, [pc, #24]	; (eefc <_ZN9CDC_Class5writeEPKhj+0x84>)
    eee4:	4b09      	ldr	r3, [pc, #36]	; (ef0c <_ZN9CDC_Class5writeEPKhj+0x94>)
    eee6:	4798      	blx	r3
    eee8:	e001      	b.n	eeee <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    eeea:	2300      	movs	r3, #0
    eeec:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    eeee:	697b      	ldr	r3, [r7, #20]
}
    eef0:	4618      	mov	r0, r3
    eef2:	3718      	adds	r7, #24
    eef4:	46bd      	mov	sp, r7
    eef6:	bd80      	pop	{r7, pc}
    eef8:	0000ea45 	.word	0x0000ea45
    eefc:	20001284 	.word	0x20001284
    ef00:	0000f635 	.word	0x0000f635
    ef04:	0000cb21 	.word	0x0000cb21
    ef08:	0000f555 	.word	0x0000f555
    ef0c:	0000f699 	.word	0x0000f699

0000ef10 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    ef10:	b480      	push	{r7}
    ef12:	b083      	sub	sp, #12
    ef14:	af00      	add	r7, sp, #0
    ef16:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    ef18:	687b      	ldr	r3, [r7, #4]
    ef1a:	7d5b      	ldrb	r3, [r3, #21]
    ef1c:	b2db      	uxtb	r3, r3
    ef1e:	2b00      	cmp	r3, #0
    ef20:	d006      	beq.n	ef30 <_ZN9CDC_Class9availableEv+0x20>
    ef22:	687b      	ldr	r3, [r7, #4]
    ef24:	7d1b      	ldrb	r3, [r3, #20]
    ef26:	b2db      	uxtb	r3, r3
    ef28:	2b00      	cmp	r3, #0
    ef2a:	d001      	beq.n	ef30 <_ZN9CDC_Class9availableEv+0x20>
    ef2c:	2301      	movs	r3, #1
    ef2e:	e000      	b.n	ef32 <_ZN9CDC_Class9availableEv+0x22>
    ef30:	2300      	movs	r3, #0
    ef32:	2b00      	cmp	r3, #0
    ef34:	d001      	beq.n	ef3a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    ef36:	2301      	movs	r3, #1
    ef38:	e000      	b.n	ef3c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    ef3a:	2300      	movs	r3, #0
	}
	
}
    ef3c:	4618      	mov	r0, r3
    ef3e:	370c      	adds	r7, #12
    ef40:	46bd      	mov	sp, r7
    ef42:	bc80      	pop	{r7}
    ef44:	4770      	bx	lr
	...

0000ef48 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    ef48:	b580      	push	{r7, lr}
    ef4a:	b082      	sub	sp, #8
    ef4c:	af00      	add	r7, sp, #0
    ef4e:	6078      	str	r0, [r7, #4]
    ef50:	6039      	str	r1, [r7, #0]
    ef52:	687b      	ldr	r3, [r7, #4]
    ef54:	2b01      	cmp	r3, #1
    ef56:	d10c      	bne.n	ef72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ef58:	683b      	ldr	r3, [r7, #0]
    ef5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef5e:	4293      	cmp	r3, r2
    ef60:	d107      	bne.n	ef72 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    ef62:	4806      	ldr	r0, [pc, #24]	; (ef7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ef64:	4b06      	ldr	r3, [pc, #24]	; (ef80 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ef66:	4798      	blx	r3
    ef68:	4a06      	ldr	r2, [pc, #24]	; (ef84 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ef6a:	4907      	ldr	r1, [pc, #28]	; (ef88 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ef6c:	4803      	ldr	r0, [pc, #12]	; (ef7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    ef6e:	4b07      	ldr	r3, [pc, #28]	; (ef8c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ef70:	4798      	blx	r3
    ef72:	bf00      	nop
    ef74:	3708      	adds	r7, #8
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	bf00      	nop
    ef7c:	200011cc 	.word	0x200011cc
    ef80:	0000eb35 	.word	0x0000eb35
    ef84:	20000000 	.word	0x20000000
    ef88:	0000eb7d 	.word	0x0000eb7d
    ef8c:	0000f9f1 	.word	0x0000f9f1

0000ef90 <_GLOBAL__sub_I_ptrCDCClass>:
    ef90:	b580      	push	{r7, lr}
    ef92:	af00      	add	r7, sp, #0
    ef94:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ef98:	2001      	movs	r0, #1
    ef9a:	4b01      	ldr	r3, [pc, #4]	; (efa0 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    ef9c:	4798      	blx	r3
    ef9e:	bd80      	pop	{r7, pc}
    efa0:	0000ef49 	.word	0x0000ef49

0000efa4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    efa4:	b590      	push	{r4, r7, lr}
    efa6:	b083      	sub	sp, #12
    efa8:	af00      	add	r7, sp, #0
    efaa:	6078      	str	r0, [r7, #4]
    efac:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    efae:	683b      	ldr	r3, [r7, #0]
    efb0:	2b00      	cmp	r3, #0
    efb2:	d101      	bne.n	efb8 <_ZN5Print5writeEPKc+0x14>
    efb4:	2300      	movs	r3, #0
    efb6:	e00c      	b.n	efd2 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    efb8:	687b      	ldr	r3, [r7, #4]
    efba:	681b      	ldr	r3, [r3, #0]
    efbc:	3304      	adds	r3, #4
    efbe:	681c      	ldr	r4, [r3, #0]
    efc0:	6838      	ldr	r0, [r7, #0]
    efc2:	4b06      	ldr	r3, [pc, #24]	; (efdc <_ZN5Print5writeEPKc+0x38>)
    efc4:	4798      	blx	r3
    efc6:	4603      	mov	r3, r0
    efc8:	461a      	mov	r2, r3
    efca:	6839      	ldr	r1, [r7, #0]
    efcc:	6878      	ldr	r0, [r7, #4]
    efce:	47a0      	blx	r4
    efd0:	4603      	mov	r3, r0
    }
    efd2:	4618      	mov	r0, r3
    efd4:	370c      	adds	r7, #12
    efd6:	46bd      	mov	sp, r7
    efd8:	bd90      	pop	{r4, r7, pc}
    efda:	bf00      	nop
    efdc:	0000fc81 	.word	0x0000fc81

0000efe0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    efe0:	b580      	push	{r7, lr}
    efe2:	b086      	sub	sp, #24
    efe4:	af00      	add	r7, sp, #0
    efe6:	60f8      	str	r0, [r7, #12]
    efe8:	60b9      	str	r1, [r7, #8]
    efea:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    efec:	2300      	movs	r3, #0
    efee:	617b      	str	r3, [r7, #20]
  while (size--) {
    eff0:	687b      	ldr	r3, [r7, #4]
    eff2:	1e5a      	subs	r2, r3, #1
    eff4:	607a      	str	r2, [r7, #4]
    eff6:	2b00      	cmp	r3, #0
    eff8:	bf14      	ite	ne
    effa:	2301      	movne	r3, #1
    effc:	2300      	moveq	r3, #0
    effe:	b2db      	uxtb	r3, r3
    f000:	2b00      	cmp	r3, #0
    f002:	d016      	beq.n	f032 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    f004:	68fb      	ldr	r3, [r7, #12]
    f006:	681b      	ldr	r3, [r3, #0]
    f008:	681a      	ldr	r2, [r3, #0]
    f00a:	68bb      	ldr	r3, [r7, #8]
    f00c:	1c59      	adds	r1, r3, #1
    f00e:	60b9      	str	r1, [r7, #8]
    f010:	781b      	ldrb	r3, [r3, #0]
    f012:	4619      	mov	r1, r3
    f014:	68f8      	ldr	r0, [r7, #12]
    f016:	4790      	blx	r2
    f018:	4603      	mov	r3, r0
    f01a:	2b00      	cmp	r3, #0
    f01c:	bf14      	ite	ne
    f01e:	2301      	movne	r3, #1
    f020:	2300      	moveq	r3, #0
    f022:	b2db      	uxtb	r3, r3
    f024:	2b00      	cmp	r3, #0
    f026:	d003      	beq.n	f030 <_ZN5Print5writeEPKhj+0x50>
    f028:	697b      	ldr	r3, [r7, #20]
    f02a:	3301      	adds	r3, #1
    f02c:	617b      	str	r3, [r7, #20]
  while (size--) {
    f02e:	e7df      	b.n	eff0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    f030:	bf00      	nop
  }
  return n;
    f032:	697b      	ldr	r3, [r7, #20]
}
    f034:	4618      	mov	r0, r3
    f036:	3718      	adds	r7, #24
    f038:	46bd      	mov	sp, r7
    f03a:	bd80      	pop	{r7, pc}

0000f03c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    f03c:	b580      	push	{r7, lr}
    f03e:	b082      	sub	sp, #8
    f040:	af00      	add	r7, sp, #0
    f042:	6078      	str	r0, [r7, #4]
    f044:	6039      	str	r1, [r7, #0]
  return write(str);
    f046:	6839      	ldr	r1, [r7, #0]
    f048:	6878      	ldr	r0, [r7, #4]
    f04a:	4b03      	ldr	r3, [pc, #12]	; (f058 <_ZN5Print5printEPKc+0x1c>)
    f04c:	4798      	blx	r3
    f04e:	4603      	mov	r3, r0
}
    f050:	4618      	mov	r0, r3
    f052:	3708      	adds	r7, #8
    f054:	46bd      	mov	sp, r7
    f056:	bd80      	pop	{r7, pc}
    f058:	0000efa5 	.word	0x0000efa5

0000f05c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    f05c:	b580      	push	{r7, lr}
    f05e:	b082      	sub	sp, #8
    f060:	af00      	add	r7, sp, #0
    f062:	6078      	str	r0, [r7, #4]
    f064:	460b      	mov	r3, r1
    f066:	70fb      	strb	r3, [r7, #3]
  return write(c);
    f068:	687b      	ldr	r3, [r7, #4]
    f06a:	681b      	ldr	r3, [r3, #0]
    f06c:	681b      	ldr	r3, [r3, #0]
    f06e:	78fa      	ldrb	r2, [r7, #3]
    f070:	4611      	mov	r1, r2
    f072:	6878      	ldr	r0, [r7, #4]
    f074:	4798      	blx	r3
    f076:	4603      	mov	r3, r0
}
    f078:	4618      	mov	r0, r3
    f07a:	3708      	adds	r7, #8
    f07c:	46bd      	mov	sp, r7
    f07e:	bd80      	pop	{r7, pc}

0000f080 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
    f080:	b580      	push	{r7, lr}
    f082:	b084      	sub	sp, #16
    f084:	af00      	add	r7, sp, #0
    f086:	60f8      	str	r0, [r7, #12]
    f088:	460b      	mov	r3, r1
    f08a:	607a      	str	r2, [r7, #4]
    f08c:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
    f08e:	7afb      	ldrb	r3, [r7, #11]
    f090:	687a      	ldr	r2, [r7, #4]
    f092:	4619      	mov	r1, r3
    f094:	68f8      	ldr	r0, [r7, #12]
    f096:	4b03      	ldr	r3, [pc, #12]	; (f0a4 <_ZN5Print5printEhi+0x24>)
    f098:	4798      	blx	r3
    f09a:	4603      	mov	r3, r0
}
    f09c:	4618      	mov	r0, r3
    f09e:	3710      	adds	r7, #16
    f0a0:	46bd      	mov	sp, r7
    f0a2:	bd80      	pop	{r7, pc}
    f0a4:	0000f155 	.word	0x0000f155

0000f0a8 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    f0a8:	b580      	push	{r7, lr}
    f0aa:	b084      	sub	sp, #16
    f0ac:	af00      	add	r7, sp, #0
    f0ae:	60f8      	str	r0, [r7, #12]
    f0b0:	60b9      	str	r1, [r7, #8]
    f0b2:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    f0b4:	687a      	ldr	r2, [r7, #4]
    f0b6:	68b9      	ldr	r1, [r7, #8]
    f0b8:	68f8      	ldr	r0, [r7, #12]
    f0ba:	4b03      	ldr	r3, [pc, #12]	; (f0c8 <_ZN5Print5printEii+0x20>)
    f0bc:	4798      	blx	r3
    f0be:	4603      	mov	r3, r0
}
    f0c0:	4618      	mov	r0, r3
    f0c2:	3710      	adds	r7, #16
    f0c4:	46bd      	mov	sp, r7
    f0c6:	bd80      	pop	{r7, pc}
    f0c8:	0000f0cd 	.word	0x0000f0cd

0000f0cc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    f0cc:	b580      	push	{r7, lr}
    f0ce:	b086      	sub	sp, #24
    f0d0:	af00      	add	r7, sp, #0
    f0d2:	60f8      	str	r0, [r7, #12]
    f0d4:	60b9      	str	r1, [r7, #8]
    f0d6:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    f0d8:	687b      	ldr	r3, [r7, #4]
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d109      	bne.n	f0f2 <_ZN5Print5printEli+0x26>
    return write(n);
    f0de:	68fb      	ldr	r3, [r7, #12]
    f0e0:	681b      	ldr	r3, [r3, #0]
    f0e2:	681b      	ldr	r3, [r3, #0]
    f0e4:	68ba      	ldr	r2, [r7, #8]
    f0e6:	b2d2      	uxtb	r2, r2
    f0e8:	4611      	mov	r1, r2
    f0ea:	68f8      	ldr	r0, [r7, #12]
    f0ec:	4798      	blx	r3
    f0ee:	4603      	mov	r3, r0
    f0f0:	e028      	b.n	f144 <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
    f0f2:	687b      	ldr	r3, [r7, #4]
    f0f4:	2b0a      	cmp	r3, #10
    f0f6:	d11d      	bne.n	f134 <_ZN5Print5printEli+0x68>
    if (n < 0) {
    f0f8:	68bb      	ldr	r3, [r7, #8]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	da12      	bge.n	f124 <_ZN5Print5printEli+0x58>
      int t = print('-');
    f0fe:	212d      	movs	r1, #45	; 0x2d
    f100:	68f8      	ldr	r0, [r7, #12]
    f102:	4b12      	ldr	r3, [pc, #72]	; (f14c <_ZN5Print5printEli+0x80>)
    f104:	4798      	blx	r3
    f106:	4603      	mov	r3, r0
    f108:	617b      	str	r3, [r7, #20]
      n = -n;
    f10a:	68bb      	ldr	r3, [r7, #8]
    f10c:	425b      	negs	r3, r3
    f10e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    f110:	68bb      	ldr	r3, [r7, #8]
    f112:	220a      	movs	r2, #10
    f114:	4619      	mov	r1, r3
    f116:	68f8      	ldr	r0, [r7, #12]
    f118:	4b0d      	ldr	r3, [pc, #52]	; (f150 <_ZN5Print5printEli+0x84>)
    f11a:	4798      	blx	r3
    f11c:	4602      	mov	r2, r0
    f11e:	697b      	ldr	r3, [r7, #20]
    f120:	4413      	add	r3, r2
    f122:	e00f      	b.n	f144 <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
    f124:	68bb      	ldr	r3, [r7, #8]
    f126:	220a      	movs	r2, #10
    f128:	4619      	mov	r1, r3
    f12a:	68f8      	ldr	r0, [r7, #12]
    f12c:	4b08      	ldr	r3, [pc, #32]	; (f150 <_ZN5Print5printEli+0x84>)
    f12e:	4798      	blx	r3
    f130:	4603      	mov	r3, r0
    f132:	e007      	b.n	f144 <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
    f134:	68bb      	ldr	r3, [r7, #8]
    f136:	687a      	ldr	r2, [r7, #4]
    f138:	b2d2      	uxtb	r2, r2
    f13a:	4619      	mov	r1, r3
    f13c:	68f8      	ldr	r0, [r7, #12]
    f13e:	4b04      	ldr	r3, [pc, #16]	; (f150 <_ZN5Print5printEli+0x84>)
    f140:	4798      	blx	r3
    f142:	4603      	mov	r3, r0
  }
}
    f144:	4618      	mov	r0, r3
    f146:	3718      	adds	r7, #24
    f148:	46bd      	mov	sp, r7
    f14a:	bd80      	pop	{r7, pc}
    f14c:	0000f05d 	.word	0x0000f05d
    f150:	0000f199 	.word	0x0000f199

0000f154 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    f154:	b580      	push	{r7, lr}
    f156:	b084      	sub	sp, #16
    f158:	af00      	add	r7, sp, #0
    f15a:	60f8      	str	r0, [r7, #12]
    f15c:	60b9      	str	r1, [r7, #8]
    f15e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    f160:	687b      	ldr	r3, [r7, #4]
    f162:	2b00      	cmp	r3, #0
    f164:	d109      	bne.n	f17a <_ZN5Print5printEmi+0x26>
    f166:	68fb      	ldr	r3, [r7, #12]
    f168:	681b      	ldr	r3, [r3, #0]
    f16a:	681b      	ldr	r3, [r3, #0]
    f16c:	68ba      	ldr	r2, [r7, #8]
    f16e:	b2d2      	uxtb	r2, r2
    f170:	4611      	mov	r1, r2
    f172:	68f8      	ldr	r0, [r7, #12]
    f174:	4798      	blx	r3
    f176:	4603      	mov	r3, r0
    f178:	e007      	b.n	f18a <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    f17a:	687b      	ldr	r3, [r7, #4]
    f17c:	b2db      	uxtb	r3, r3
    f17e:	461a      	mov	r2, r3
    f180:	68b9      	ldr	r1, [r7, #8]
    f182:	68f8      	ldr	r0, [r7, #12]
    f184:	4b03      	ldr	r3, [pc, #12]	; (f194 <_ZN5Print5printEmi+0x40>)
    f186:	4798      	blx	r3
    f188:	4603      	mov	r3, r0
}
    f18a:	4618      	mov	r0, r3
    f18c:	3710      	adds	r7, #16
    f18e:	46bd      	mov	sp, r7
    f190:	bd80      	pop	{r7, pc}
    f192:	bf00      	nop
    f194:	0000f199 	.word	0x0000f199

0000f198 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    f198:	b580      	push	{r7, lr}
    f19a:	b08e      	sub	sp, #56	; 0x38
    f19c:	af00      	add	r7, sp, #0
    f19e:	60f8      	str	r0, [r7, #12]
    f1a0:	60b9      	str	r1, [r7, #8]
    f1a2:	4613      	mov	r3, r2
    f1a4:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    f1a6:	f107 0310 	add.w	r3, r7, #16
    f1aa:	3320      	adds	r3, #32
    f1ac:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    f1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1b0:	2200      	movs	r2, #0
    f1b2:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    f1b4:	79fb      	ldrb	r3, [r7, #7]
    f1b6:	2b01      	cmp	r3, #1
    f1b8:	dc01      	bgt.n	f1be <_ZN5Print11printNumberEmh+0x26>
    f1ba:	230a      	movs	r3, #10
    f1bc:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
    f1be:	79fa      	ldrb	r2, [r7, #7]
    f1c0:	68bb      	ldr	r3, [r7, #8]
    f1c2:	fbb3 f1f2 	udiv	r1, r3, r2
    f1c6:	fb02 f201 	mul.w	r2, r2, r1
    f1ca:	1a9b      	subs	r3, r3, r2
    f1cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
    f1d0:	79fb      	ldrb	r3, [r7, #7]
    f1d2:	68ba      	ldr	r2, [r7, #8]
    f1d4:	fbb2 f3f3 	udiv	r3, r2, r3
    f1d8:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    f1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f1dc:	3b01      	subs	r3, #1
    f1de:	637b      	str	r3, [r7, #52]	; 0x34
    f1e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f1e4:	2b09      	cmp	r3, #9
    f1e6:	dc04      	bgt.n	f1f2 <_ZN5Print11printNumberEmh+0x5a>
    f1e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f1ec:	3330      	adds	r3, #48	; 0x30
    f1ee:	b2db      	uxtb	r3, r3
    f1f0:	e003      	b.n	f1fa <_ZN5Print11printNumberEmh+0x62>
    f1f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    f1f6:	3337      	adds	r3, #55	; 0x37
    f1f8:	b2db      	uxtb	r3, r3
    f1fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f1fc:	7013      	strb	r3, [r2, #0]
  } while(n);
    f1fe:	68bb      	ldr	r3, [r7, #8]
    f200:	2b00      	cmp	r3, #0
    f202:	d000      	beq.n	f206 <_ZN5Print11printNumberEmh+0x6e>
  do {
    f204:	e7db      	b.n	f1be <_ZN5Print11printNumberEmh+0x26>

  return write(str);
    f206:	6b79      	ldr	r1, [r7, #52]	; 0x34
    f208:	68f8      	ldr	r0, [r7, #12]
    f20a:	4b03      	ldr	r3, [pc, #12]	; (f218 <_ZN5Print11printNumberEmh+0x80>)
    f20c:	4798      	blx	r3
    f20e:	4603      	mov	r3, r0
}
    f210:	4618      	mov	r0, r3
    f212:	3738      	adds	r7, #56	; 0x38
    f214:	46bd      	mov	sp, r7
    f216:	bd80      	pop	{r7, pc}
    f218:	0000efa5 	.word	0x0000efa5

0000f21c <hri_port_read_DIR_reg>:
{
    f21c:	b480      	push	{r7}
    f21e:	b083      	sub	sp, #12
    f220:	af00      	add	r7, sp, #0
    f222:	6078      	str	r0, [r7, #4]
    f224:	460b      	mov	r3, r1
    f226:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f228:	78fb      	ldrb	r3, [r7, #3]
    f22a:	687a      	ldr	r2, [r7, #4]
    f22c:	01db      	lsls	r3, r3, #7
    f22e:	4413      	add	r3, r2
    f230:	681b      	ldr	r3, [r3, #0]
}
    f232:	4618      	mov	r0, r3
    f234:	370c      	adds	r7, #12
    f236:	46bd      	mov	sp, r7
    f238:	bc80      	pop	{r7}
    f23a:	4770      	bx	lr

0000f23c <hri_port_read_OUT_reg>:
{
    f23c:	b480      	push	{r7}
    f23e:	b083      	sub	sp, #12
    f240:	af00      	add	r7, sp, #0
    f242:	6078      	str	r0, [r7, #4]
    f244:	460b      	mov	r3, r1
    f246:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f248:	78fb      	ldrb	r3, [r7, #3]
    f24a:	687a      	ldr	r2, [r7, #4]
    f24c:	01db      	lsls	r3, r3, #7
    f24e:	4413      	add	r3, r2
    f250:	3310      	adds	r3, #16
    f252:	681b      	ldr	r3, [r3, #0]
}
    f254:	4618      	mov	r0, r3
    f256:	370c      	adds	r7, #12
    f258:	46bd      	mov	sp, r7
    f25a:	bc80      	pop	{r7}
    f25c:	4770      	bx	lr

0000f25e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f25e:	b480      	push	{r7}
    f260:	b083      	sub	sp, #12
    f262:	af00      	add	r7, sp, #0
    f264:	6078      	str	r0, [r7, #4]
    f266:	460b      	mov	r3, r1
    f268:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f26a:	78fb      	ldrb	r3, [r7, #3]
    f26c:	687a      	ldr	r2, [r7, #4]
    f26e:	01db      	lsls	r3, r3, #7
    f270:	4413      	add	r3, r2
    f272:	3320      	adds	r3, #32
    f274:	681b      	ldr	r3, [r3, #0]
}
    f276:	4618      	mov	r0, r3
    f278:	370c      	adds	r7, #12
    f27a:	46bd      	mov	sp, r7
    f27c:	bc80      	pop	{r7}
    f27e:	4770      	bx	lr

0000f280 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f280:	b580      	push	{r7, lr}
    f282:	b086      	sub	sp, #24
    f284:	af00      	add	r7, sp, #0
    f286:	4603      	mov	r3, r0
    f288:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f28a:	f107 030c 	add.w	r3, r7, #12
    f28e:	4618      	mov	r0, r3
    f290:	4b13      	ldr	r3, [pc, #76]	; (f2e0 <_gpio_get_level+0x60>)
    f292:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f294:	79fb      	ldrb	r3, [r7, #7]
    f296:	4619      	mov	r1, r3
    f298:	4812      	ldr	r0, [pc, #72]	; (f2e4 <_gpio_get_level+0x64>)
    f29a:	4b13      	ldr	r3, [pc, #76]	; (f2e8 <_gpio_get_level+0x68>)
    f29c:	4798      	blx	r3
    f29e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f2a0:	79fb      	ldrb	r3, [r7, #7]
    f2a2:	4619      	mov	r1, r3
    f2a4:	480f      	ldr	r0, [pc, #60]	; (f2e4 <_gpio_get_level+0x64>)
    f2a6:	4b11      	ldr	r3, [pc, #68]	; (f2ec <_gpio_get_level+0x6c>)
    f2a8:	4798      	blx	r3
    f2aa:	4602      	mov	r2, r0
    f2ac:	697b      	ldr	r3, [r7, #20]
    f2ae:	43db      	mvns	r3, r3
    f2b0:	4013      	ands	r3, r2
    f2b2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f2b4:	79fb      	ldrb	r3, [r7, #7]
    f2b6:	4619      	mov	r1, r3
    f2b8:	480a      	ldr	r0, [pc, #40]	; (f2e4 <_gpio_get_level+0x64>)
    f2ba:	4b0d      	ldr	r3, [pc, #52]	; (f2f0 <_gpio_get_level+0x70>)
    f2bc:	4798      	blx	r3
    f2be:	4602      	mov	r2, r0
    f2c0:	697b      	ldr	r3, [r7, #20]
    f2c2:	4013      	ands	r3, r2
    f2c4:	693a      	ldr	r2, [r7, #16]
    f2c6:	4313      	orrs	r3, r2
    f2c8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f2ca:	f107 030c 	add.w	r3, r7, #12
    f2ce:	4618      	mov	r0, r3
    f2d0:	4b08      	ldr	r3, [pc, #32]	; (f2f4 <_gpio_get_level+0x74>)
    f2d2:	4798      	blx	r3

	return tmp;
    f2d4:	693b      	ldr	r3, [r7, #16]
}
    f2d6:	4618      	mov	r0, r3
    f2d8:	3718      	adds	r7, #24
    f2da:	46bd      	mov	sp, r7
    f2dc:	bd80      	pop	{r7, pc}
    f2de:	bf00      	nop
    f2e0:	0000bcfd 	.word	0x0000bcfd
    f2e4:	41008000 	.word	0x41008000
    f2e8:	0000f21d 	.word	0x0000f21d
    f2ec:	0000f25f 	.word	0x0000f25f
    f2f0:	0000f23d 	.word	0x0000f23d
    f2f4:	0000bd23 	.word	0x0000bd23

0000f2f8 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b082      	sub	sp, #8
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	4603      	mov	r3, r0
    f300:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f302:	79fb      	ldrb	r3, [r7, #7]
    f304:	115b      	asrs	r3, r3, #5
    f306:	b2db      	uxtb	r3, r3
    f308:	4618      	mov	r0, r3
    f30a:	4b09      	ldr	r3, [pc, #36]	; (f330 <gpio_get_pin_level+0x38>)
    f30c:	4798      	blx	r3
    f30e:	4601      	mov	r1, r0
    f310:	79fb      	ldrb	r3, [r7, #7]
    f312:	f003 031f 	and.w	r3, r3, #31
    f316:	2201      	movs	r2, #1
    f318:	fa02 f303 	lsl.w	r3, r2, r3
    f31c:	400b      	ands	r3, r1
    f31e:	2b00      	cmp	r3, #0
    f320:	bf14      	ite	ne
    f322:	2301      	movne	r3, #1
    f324:	2300      	moveq	r3, #0
    f326:	b2db      	uxtb	r3, r3
}
    f328:	4618      	mov	r0, r3
    f32a:	3708      	adds	r7, #8
    f32c:	46bd      	mov	sp, r7
    f32e:	bd80      	pop	{r7, pc}
    f330:	0000f281 	.word	0x0000f281

0000f334 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    f334:	b480      	push	{r7}
    f336:	b083      	sub	sp, #12
    f338:	af00      	add	r7, sp, #0
    f33a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    f33c:	4b06      	ldr	r3, [pc, #24]	; (f358 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f33e:	681b      	ldr	r3, [r3, #0]
    f340:	2201      	movs	r2, #1
    f342:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    f344:	4b04      	ldr	r3, [pc, #16]	; (f358 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    f346:	681b      	ldr	r3, [r3, #0]
    f348:	2200      	movs	r2, #0
    f34a:	705a      	strb	r2, [r3, #1]
}
    f34c:	bf00      	nop
    f34e:	370c      	adds	r7, #12
    f350:	46bd      	mov	sp, r7
    f352:	bc80      	pop	{r7}
    f354:	4770      	bx	lr
    f356:	bf00      	nop
    f358:	2000122c 	.word	0x2000122c

0000f35c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    f35c:	b580      	push	{r7, lr}
    f35e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    f360:	2040      	movs	r0, #64	; 0x40
    f362:	4b0a      	ldr	r3, [pc, #40]	; (f38c <_ZL10USBPluggedv+0x30>)
    f364:	4798      	blx	r3
    f366:	4603      	mov	r3, r0
    f368:	2b00      	cmp	r3, #0
    f36a:	d004      	beq.n	f376 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    f36c:	4b08      	ldr	r3, [pc, #32]	; (f390 <_ZL10USBPluggedv+0x34>)
    f36e:	681b      	ldr	r3, [r3, #0]
    f370:	2201      	movs	r2, #1
    f372:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    f374:	e007      	b.n	f386 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    f376:	4b06      	ldr	r3, [pc, #24]	; (f390 <_ZL10USBPluggedv+0x34>)
    f378:	681b      	ldr	r3, [r3, #0]
    f37a:	2200      	movs	r2, #0
    f37c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    f37e:	4b04      	ldr	r3, [pc, #16]	; (f390 <_ZL10USBPluggedv+0x34>)
    f380:	681b      	ldr	r3, [r3, #0]
    f382:	2200      	movs	r2, #0
    f384:	701a      	strb	r2, [r3, #0]
}
    f386:	bf00      	nop
    f388:	bd80      	pop	{r7, pc}
    f38a:	bf00      	nop
    f38c:	0000f2f9 	.word	0x0000f2f9
    f390:	2000122c 	.word	0x2000122c

0000f394 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    f394:	b480      	push	{r7}
    f396:	b083      	sub	sp, #12
    f398:	af00      	add	r7, sp, #0
    f39a:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    f39c:	4a04      	ldr	r2, [pc, #16]	; (f3b0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    f3a2:	687b      	ldr	r3, [r7, #4]
    f3a4:	4618      	mov	r0, r3
    f3a6:	370c      	adds	r7, #12
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bc80      	pop	{r7}
    f3ac:	4770      	bx	lr
    f3ae:	bf00      	nop
    f3b0:	2000122c 	.word	0x2000122c

0000f3b4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    f3b4:	b480      	push	{r7}
    f3b6:	b083      	sub	sp, #12
    f3b8:	af00      	add	r7, sp, #0
    f3ba:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    f3bc:	687b      	ldr	r3, [r7, #4]
    f3be:	4618      	mov	r0, r3
    f3c0:	370c      	adds	r7, #12
    f3c2:	46bd      	mov	sp, r7
    f3c4:	bc80      	pop	{r7}
    f3c6:	4770      	bx	lr

0000f3c8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    f3c8:	b580      	push	{r7, lr}
    f3ca:	b082      	sub	sp, #8
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    f3d0:	491f      	ldr	r1, [pc, #124]	; (f450 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    f3d2:	2040      	movs	r0, #64	; 0x40
    f3d4:	4b1f      	ldr	r3, [pc, #124]	; (f454 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    f3d6:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    f3d8:	481f      	ldr	r0, [pc, #124]	; (f458 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f3da:	4b20      	ldr	r3, [pc, #128]	; (f45c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    f3dc:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    f3de:	2040      	movs	r0, #64	; 0x40
    f3e0:	4b1f      	ldr	r3, [pc, #124]	; (f460 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    f3e2:	4798      	blx	r3
    f3e4:	4603      	mov	r3, r0
    f3e6:	461a      	mov	r2, r3
    f3e8:	687b      	ldr	r3, [r7, #4]
    f3ea:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	78db      	ldrb	r3, [r3, #3]
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d024      	beq.n	f43e <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	2200      	movs	r2, #0
    f3f8:	709a      	strb	r2, [r3, #2]
			plugged=true;
    f3fa:	687b      	ldr	r3, [r7, #4]
    f3fc:	2201      	movs	r2, #1
    f3fe:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    f400:	f44f 7216 	mov.w	r2, #600	; 0x258
    f404:	4917      	ldr	r1, [pc, #92]	; (f464 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    f406:	4814      	ldr	r0, [pc, #80]	; (f458 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f408:	4b17      	ldr	r3, [pc, #92]	; (f468 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    f40a:	4798      	blx	r3
			usbTerminalTimer.Start();
    f40c:	4812      	ldr	r0, [pc, #72]	; (f458 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f40e:	4b17      	ldr	r3, [pc, #92]	; (f46c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    f410:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    f412:	4817      	ldr	r0, [pc, #92]	; (f470 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    f414:	4b17      	ldr	r3, [pc, #92]	; (f474 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    f416:	4798      	blx	r3
    f418:	4603      	mov	r3, r0
    f41a:	f083 0301 	eor.w	r3, r3, #1
    f41e:	b2db      	uxtb	r3, r3
    f420:	2b00      	cmp	r3, #0
    f422:	d008      	beq.n	f436 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    f424:	687b      	ldr	r3, [r7, #4]
    f426:	789b      	ldrb	r3, [r3, #2]
    f428:	b2db      	uxtb	r3, r3
    f42a:	2b00      	cmp	r3, #0
    f42c:	d0f1      	beq.n	f412 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    f42e:	687b      	ldr	r3, [r7, #4]
    f430:	2200      	movs	r2, #0
    f432:	701a      	strb	r2, [r3, #0]
					return;
    f434:	e009      	b.n	f44a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    f436:	4808      	ldr	r0, [pc, #32]	; (f458 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    f438:	4b0f      	ldr	r3, [pc, #60]	; (f478 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    f43a:	4798      	blx	r3
    f43c:	e005      	b.n	f44a <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    f43e:	687b      	ldr	r3, [r7, #4]
    f440:	2200      	movs	r2, #0
    f442:	701a      	strb	r2, [r3, #0]
			plugged=false;
    f444:	687b      	ldr	r3, [r7, #4]
    f446:	2200      	movs	r2, #0
    f448:	705a      	strb	r2, [r3, #1]
		}
		
}
    f44a:	3708      	adds	r7, #8
    f44c:	46bd      	mov	sp, r7
    f44e:	bd80      	pop	{r7, pc}
    f450:	0000f35d 	.word	0x0000f35d
    f454:	000023d5 	.word	0x000023d5
    f458:	20001284 	.word	0x20001284
    f45c:	0000f4f9 	.word	0x0000f4f9
    f460:	0000f2f9 	.word	0x0000f2f9
    f464:	0000f335 	.word	0x0000f335
    f468:	0000f60d 	.word	0x0000f60d
    f46c:	0000f531 	.word	0x0000f531
    f470:	200011cc 	.word	0x200011cc
    f474:	0000ebed 	.word	0x0000ebed
    f478:	0000f555 	.word	0x0000f555

0000f47c <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    f47c:	b580      	push	{r7, lr}
    f47e:	b082      	sub	sp, #8
    f480:	af00      	add	r7, sp, #0
    f482:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    f484:	4b04      	ldr	r3, [pc, #16]	; (f498 <_ZL7task_cbPK10timer_task+0x1c>)
    f486:	681b      	ldr	r3, [r3, #0]
    f488:	4618      	mov	r0, r3
    f48a:	4b04      	ldr	r3, [pc, #16]	; (f49c <_ZL7task_cbPK10timer_task+0x20>)
    f48c:	4798      	blx	r3
}
    f48e:	bf00      	nop
    f490:	3708      	adds	r7, #8
    f492:	46bd      	mov	sp, r7
    f494:	bd80      	pop	{r7, pc}
    f496:	bf00      	nop
    f498:	20001230 	.word	0x20001230
    f49c:	0000f57d 	.word	0x0000f57d

0000f4a0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    f4a0:	b480      	push	{r7}
    f4a2:	b083      	sub	sp, #12
    f4a4:	af00      	add	r7, sp, #0
    f4a6:	6078      	str	r0, [r7, #4]
    f4a8:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    f4aa:	687b      	ldr	r3, [r7, #4]
    f4ac:	683a      	ldr	r2, [r7, #0]
    f4ae:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    f4b0:	4a08      	ldr	r2, [pc, #32]	; (f4d4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    f4b2:	687b      	ldr	r3, [r7, #4]
    f4b4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    f4b6:	687b      	ldr	r3, [r7, #4]
    f4b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f4bc:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    f4be:	687b      	ldr	r3, [r7, #4]
    f4c0:	689b      	ldr	r3, [r3, #8]
    f4c2:	4a05      	ldr	r2, [pc, #20]	; (f4d8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    f4c4:	60da      	str	r2, [r3, #12]
} //Timer_Class
    f4c6:	687b      	ldr	r3, [r7, #4]
    f4c8:	4618      	mov	r0, r3
    f4ca:	370c      	adds	r7, #12
    f4cc:	46bd      	mov	sp, r7
    f4ce:	bc80      	pop	{r7}
    f4d0:	4770      	bx	lr
    f4d2:	bf00      	nop
    f4d4:	20001230 	.word	0x20001230
    f4d8:	0000f47d 	.word	0x0000f47d

0000f4dc <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    f4dc:	b480      	push	{r7}
    f4de:	b083      	sub	sp, #12
    f4e0:	af00      	add	r7, sp, #0
    f4e2:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    f4e4:	687b      	ldr	r3, [r7, #4]
    f4e6:	2200      	movs	r2, #0
    f4e8:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	4618      	mov	r0, r3
    f4ee:	370c      	adds	r7, #12
    f4f0:	46bd      	mov	sp, r7
    f4f2:	bc80      	pop	{r7}
    f4f4:	4770      	bx	lr
	...

0000f4f8 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    f4f8:	b580      	push	{r7, lr}
    f4fa:	b082      	sub	sp, #8
    f4fc:	af00      	add	r7, sp, #0
    f4fe:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    f500:	687b      	ldr	r3, [r7, #4]
    f502:	2200      	movs	r2, #0
    f504:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    f506:	6878      	ldr	r0, [r7, #4]
    f508:	4b08      	ldr	r3, [pc, #32]	; (f52c <_ZN17TimerSerial_Class4InitEv+0x34>)
    f50a:	4798      	blx	r3
    f50c:	4603      	mov	r3, r0
    f50e:	2b00      	cmp	r3, #0
    f510:	bf0c      	ite	eq
    f512:	2301      	moveq	r3, #1
    f514:	2300      	movne	r3, #0
    f516:	b2da      	uxtb	r2, r3
    f518:	687b      	ldr	r3, [r7, #4]
    f51a:	709a      	strb	r2, [r3, #2]
	return isOK;
    f51c:	687b      	ldr	r3, [r7, #4]
    f51e:	789b      	ldrb	r3, [r3, #2]
    f520:	b2db      	uxtb	r3, r3
}
    f522:	4618      	mov	r0, r3
    f524:	3708      	adds	r7, #8
    f526:	46bd      	mov	sp, r7
    f528:	bd80      	pop	{r7, pc}
    f52a:	bf00      	nop
    f52c:	0000f531 	.word	0x0000f531

0000f530 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    f530:	b580      	push	{r7, lr}
    f532:	b084      	sub	sp, #16
    f534:	af00      	add	r7, sp, #0
    f536:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    f538:	687b      	ldr	r3, [r7, #4]
    f53a:	691b      	ldr	r3, [r3, #16]
    f53c:	4618      	mov	r0, r3
    f53e:	4b04      	ldr	r3, [pc, #16]	; (f550 <_ZN17TimerSerial_Class5StartEv+0x20>)
    f540:	4798      	blx	r3
    f542:	60f8      	str	r0, [r7, #12]
	return status;
    f544:	68fb      	ldr	r3, [r7, #12]
	
}
    f546:	4618      	mov	r0, r3
    f548:	3710      	adds	r7, #16
    f54a:	46bd      	mov	sp, r7
    f54c:	bd80      	pop	{r7, pc}
    f54e:	bf00      	nop
    f550:	00002e09 	.word	0x00002e09

0000f554 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    f554:	b580      	push	{r7, lr}
    f556:	b084      	sub	sp, #16
    f558:	af00      	add	r7, sp, #0
    f55a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    f55c:	687b      	ldr	r3, [r7, #4]
    f55e:	691b      	ldr	r3, [r3, #16]
    f560:	4618      	mov	r0, r3
    f562:	4b05      	ldr	r3, [pc, #20]	; (f578 <_ZN17TimerSerial_Class4StopEv+0x24>)
    f564:	4798      	blx	r3
    f566:	60f8      	str	r0, [r7, #12]
	timeout=0;
    f568:	687b      	ldr	r3, [r7, #4]
    f56a:	2200      	movs	r2, #0
    f56c:	705a      	strb	r2, [r3, #1]
	return status;
    f56e:	68fb      	ldr	r3, [r7, #12]
}
    f570:	4618      	mov	r0, r3
    f572:	3710      	adds	r7, #16
    f574:	46bd      	mov	sp, r7
    f576:	bd80      	pop	{r7, pc}
    f578:	00002e71 	.word	0x00002e71

0000f57c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    f57c:	b480      	push	{r7}
    f57e:	b083      	sub	sp, #12
    f580:	af00      	add	r7, sp, #0
    f582:	6078      	str	r0, [r7, #4]
	timeout=1;
    f584:	687b      	ldr	r3, [r7, #4]
    f586:	2201      	movs	r2, #1
    f588:	705a      	strb	r2, [r3, #1]
}
    f58a:	bf00      	nop
    f58c:	370c      	adds	r7, #12
    f58e:	46bd      	mov	sp, r7
    f590:	bc80      	pop	{r7}
    f592:	4770      	bx	lr

0000f594 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    f594:	b580      	push	{r7, lr}
    f596:	b086      	sub	sp, #24
    f598:	af00      	add	r7, sp, #0
    f59a:	60f8      	str	r0, [r7, #12]
    f59c:	60b9      	str	r1, [r7, #8]
    f59e:	607a      	str	r2, [r7, #4]
    f5a0:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    f5a2:	68f8      	ldr	r0, [r7, #12]
    f5a4:	4b0d      	ldr	r3, [pc, #52]	; (f5dc <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    f5a6:	4798      	blx	r3
	task->interval = interval;
    f5a8:	68fb      	ldr	r3, [r7, #12]
    f5aa:	689b      	ldr	r3, [r3, #8]
    f5ac:	687a      	ldr	r2, [r7, #4]
    f5ae:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    f5b0:	68fb      	ldr	r3, [r7, #12]
    f5b2:	689b      	ldr	r3, [r3, #8]
    f5b4:	68ba      	ldr	r2, [r7, #8]
    f5b6:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    f5b8:	68fb      	ldr	r3, [r7, #12]
    f5ba:	689b      	ldr	r3, [r3, #8]
    f5bc:	78fa      	ldrb	r2, [r7, #3]
    f5be:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    f5c0:	68fb      	ldr	r3, [r7, #12]
    f5c2:	691a      	ldr	r2, [r3, #16]
    f5c4:	68fb      	ldr	r3, [r7, #12]
    f5c6:	689b      	ldr	r3, [r3, #8]
    f5c8:	4619      	mov	r1, r3
    f5ca:	4610      	mov	r0, r2
    f5cc:	4b04      	ldr	r3, [pc, #16]	; (f5e0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    f5ce:	4798      	blx	r3
    f5d0:	6178      	str	r0, [r7, #20]
	
	return status;
    f5d2:	697b      	ldr	r3, [r7, #20]
}
    f5d4:	4618      	mov	r0, r3
    f5d6:	3718      	adds	r7, #24
    f5d8:	46bd      	mov	sp, r7
    f5da:	bd80      	pop	{r7, pc}
    f5dc:	0000f6f1 	.word	0x0000f6f1
    f5e0:	00002edd 	.word	0x00002edd

0000f5e4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    f5e4:	b590      	push	{r4, r7, lr}
    f5e6:	b087      	sub	sp, #28
    f5e8:	af00      	add	r7, sp, #0
    f5ea:	60f8      	str	r0, [r7, #12]
    f5ec:	60b9      	str	r1, [r7, #8]
    f5ee:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    f5f0:	2301      	movs	r3, #1
    f5f2:	687a      	ldr	r2, [r7, #4]
    f5f4:	68b9      	ldr	r1, [r7, #8]
    f5f6:	68f8      	ldr	r0, [r7, #12]
    f5f8:	4c03      	ldr	r4, [pc, #12]	; (f608 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    f5fa:	47a0      	blx	r4
    f5fc:	6178      	str	r0, [r7, #20]
		return status;
    f5fe:	697b      	ldr	r3, [r7, #20]
}
    f600:	4618      	mov	r0, r3
    f602:	371c      	adds	r7, #28
    f604:	46bd      	mov	sp, r7
    f606:	bd90      	pop	{r4, r7, pc}
    f608:	0000f595 	.word	0x0000f595

0000f60c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    f60c:	b590      	push	{r4, r7, lr}
    f60e:	b087      	sub	sp, #28
    f610:	af00      	add	r7, sp, #0
    f612:	60f8      	str	r0, [r7, #12]
    f614:	60b9      	str	r1, [r7, #8]
    f616:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f618:	2300      	movs	r3, #0
    f61a:	687a      	ldr	r2, [r7, #4]
    f61c:	68b9      	ldr	r1, [r7, #8]
    f61e:	68f8      	ldr	r0, [r7, #12]
    f620:	4c03      	ldr	r4, [pc, #12]	; (f630 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    f622:	47a0      	blx	r4
    f624:	6178      	str	r0, [r7, #20]
	return status;
    f626:	697b      	ldr	r3, [r7, #20]
}
    f628:	4618      	mov	r0, r3
    f62a:	371c      	adds	r7, #28
    f62c:	46bd      	mov	sp, r7
    f62e:	bd90      	pop	{r4, r7, pc}
    f630:	0000f595 	.word	0x0000f595

0000f634 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    f634:	b590      	push	{r4, r7, lr}
    f636:	b087      	sub	sp, #28
    f638:	af00      	add	r7, sp, #0
    f63a:	60f8      	str	r0, [r7, #12]
    f63c:	60b9      	str	r1, [r7, #8]
    f63e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    f640:	2300      	movs	r3, #0
    f642:	687a      	ldr	r2, [r7, #4]
    f644:	68b9      	ldr	r1, [r7, #8]
    f646:	68f8      	ldr	r0, [r7, #12]
    f648:	4c06      	ldr	r4, [pc, #24]	; (f664 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    f64a:	47a0      	blx	r4
    f64c:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    f64e:	68fb      	ldr	r3, [r7, #12]
    f650:	691b      	ldr	r3, [r3, #16]
    f652:	4618      	mov	r0, r3
    f654:	4b04      	ldr	r3, [pc, #16]	; (f668 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    f656:	4798      	blx	r3
    f658:	6178      	str	r0, [r7, #20]
	return status;
    f65a:	697b      	ldr	r3, [r7, #20]
}
    f65c:	4618      	mov	r0, r3
    f65e:	371c      	adds	r7, #28
    f660:	46bd      	mov	sp, r7
    f662:	bd90      	pop	{r4, r7, pc}
    f664:	0000f595 	.word	0x0000f595
    f668:	00002e09 	.word	0x00002e09

0000f66c <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    f66c:	b580      	push	{r7, lr}
    f66e:	b082      	sub	sp, #8
    f670:	af00      	add	r7, sp, #0
    f672:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    f674:	687b      	ldr	r3, [r7, #4]
    f676:	691a      	ldr	r2, [r3, #16]
    f678:	687b      	ldr	r3, [r7, #4]
    f67a:	689b      	ldr	r3, [r3, #8]
    f67c:	4619      	mov	r1, r3
    f67e:	4610      	mov	r0, r2
    f680:	4b04      	ldr	r3, [pc, #16]	; (f694 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    f682:	4798      	blx	r3
	task->cb=NULL;
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	689b      	ldr	r3, [r3, #8]
    f688:	2200      	movs	r2, #0
    f68a:	60da      	str	r2, [r3, #12]
}
    f68c:	bf00      	nop
    f68e:	3708      	adds	r7, #8
    f690:	46bd      	mov	sp, r7
    f692:	bd80      	pop	{r7, pc}
    f694:	00002fe1 	.word	0x00002fe1

0000f698 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f698:	b580      	push	{r7, lr}
    f69a:	b082      	sub	sp, #8
    f69c:	af00      	add	r7, sp, #0
    f69e:	6078      	str	r0, [r7, #4]
    f6a0:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f6a2:	6839      	ldr	r1, [r7, #0]
    f6a4:	6878      	ldr	r0, [r7, #4]
    f6a6:	4b0f      	ldr	r3, [pc, #60]	; (f6e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f6a8:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	691b      	ldr	r3, [r3, #16]
    f6ae:	f103 0218 	add.w	r2, r3, #24
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	689b      	ldr	r3, [r3, #8]
    f6b6:	4619      	mov	r1, r3
    f6b8:	4610      	mov	r0, r2
    f6ba:	4b0b      	ldr	r3, [pc, #44]	; (f6e8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f6bc:	4798      	blx	r3
    f6be:	4603      	mov	r3, r0
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d007      	beq.n	f6d4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f6c4:	687b      	ldr	r3, [r7, #4]
    f6c6:	691a      	ldr	r2, [r3, #16]
    f6c8:	687b      	ldr	r3, [r7, #4]
    f6ca:	689b      	ldr	r3, [r3, #8]
    f6cc:	4619      	mov	r1, r3
    f6ce:	4610      	mov	r0, r2
    f6d0:	4b06      	ldr	r3, [pc, #24]	; (f6ec <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f6d2:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	689b      	ldr	r3, [r3, #8]
    f6d8:	2200      	movs	r2, #0
    f6da:	60da      	str	r2, [r3, #12]
}
    f6dc:	bf00      	nop
    f6de:	3708      	adds	r7, #8
    f6e0:	46bd      	mov	sp, r7
    f6e2:	bd80      	pop	{r7, pc}
    f6e4:	0000f749 	.word	0x0000f749
    f6e8:	00003bc9 	.word	0x00003bc9
    f6ec:	00002fe1 	.word	0x00002fe1

0000f6f0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f6f0:	b480      	push	{r7}
    f6f2:	b085      	sub	sp, #20
    f6f4:	af00      	add	r7, sp, #0
    f6f6:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f6f8:	2300      	movs	r3, #0
    f6fa:	73fb      	strb	r3, [r7, #15]
    f6fc:	7bfb      	ldrb	r3, [r7, #15]
    f6fe:	2b03      	cmp	r3, #3
    f700:	dc18      	bgt.n	f734 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    f702:	7bfa      	ldrb	r2, [r7, #15]
    f704:	490f      	ldr	r1, [pc, #60]	; (f744 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f706:	4613      	mov	r3, r2
    f708:	009b      	lsls	r3, r3, #2
    f70a:	4413      	add	r3, r2
    f70c:	009b      	lsls	r3, r3, #2
    f70e:	440b      	add	r3, r1
    f710:	330c      	adds	r3, #12
    f712:	681b      	ldr	r3, [r3, #0]
    f714:	2b00      	cmp	r3, #0
    f716:	d109      	bne.n	f72c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    f718:	7bfa      	ldrb	r2, [r7, #15]
    f71a:	4613      	mov	r3, r2
    f71c:	009b      	lsls	r3, r3, #2
    f71e:	4413      	add	r3, r2
    f720:	009b      	lsls	r3, r3, #2
    f722:	4a08      	ldr	r2, [pc, #32]	; (f744 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f724:	441a      	add	r2, r3
    f726:	687b      	ldr	r3, [r7, #4]
    f728:	609a      	str	r2, [r3, #8]
			return;
    f72a:	e006      	b.n	f73a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f72c:	7bfb      	ldrb	r3, [r7, #15]
    f72e:	3301      	adds	r3, #1
    f730:	73fb      	strb	r3, [r7, #15]
    f732:	e7e3      	b.n	f6fc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    f734:	687b      	ldr	r3, [r7, #4]
    f736:	4a03      	ldr	r2, [pc, #12]	; (f744 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    f738:	609a      	str	r2, [r3, #8]

}
    f73a:	3714      	adds	r7, #20
    f73c:	46bd      	mov	sp, r7
    f73e:	bc80      	pop	{r7}
    f740:	4770      	bx	lr
    f742:	bf00      	nop
    f744:	20001234 	.word	0x20001234

0000f748 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f748:	b480      	push	{r7}
    f74a:	b085      	sub	sp, #20
    f74c:	af00      	add	r7, sp, #0
    f74e:	6078      	str	r0, [r7, #4]
    f750:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f752:	2300      	movs	r3, #0
    f754:	73fb      	strb	r3, [r7, #15]
    f756:	7bfb      	ldrb	r3, [r7, #15]
    f758:	2b03      	cmp	r3, #3
    f75a:	dc19      	bgt.n	f790 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    f75c:	7bfa      	ldrb	r2, [r7, #15]
    f75e:	490e      	ldr	r1, [pc, #56]	; (f798 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f760:	4613      	mov	r3, r2
    f762:	009b      	lsls	r3, r3, #2
    f764:	4413      	add	r3, r2
    f766:	009b      	lsls	r3, r3, #2
    f768:	440b      	add	r3, r1
    f76a:	330c      	adds	r3, #12
    f76c:	681a      	ldr	r2, [r3, #0]
    f76e:	683b      	ldr	r3, [r7, #0]
    f770:	429a      	cmp	r2, r3
    f772:	d109      	bne.n	f788 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    f774:	7bfa      	ldrb	r2, [r7, #15]
    f776:	4613      	mov	r3, r2
    f778:	009b      	lsls	r3, r3, #2
    f77a:	4413      	add	r3, r2
    f77c:	009b      	lsls	r3, r3, #2
    f77e:	4a06      	ldr	r2, [pc, #24]	; (f798 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    f780:	441a      	add	r2, r3
    f782:	687b      	ldr	r3, [r7, #4]
    f784:	609a      	str	r2, [r3, #8]
			return;
    f786:	e003      	b.n	f790 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    f788:	7bfb      	ldrb	r3, [r7, #15]
    f78a:	3301      	adds	r3, #1
    f78c:	73fb      	strb	r3, [r7, #15]
    f78e:	e7e2      	b.n	f756 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    f790:	3714      	adds	r7, #20
    f792:	46bd      	mov	sp, r7
    f794:	bc80      	pop	{r7}
    f796:	4770      	bx	lr
    f798:	20001234 	.word	0x20001234

0000f79c <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f79c:	b580      	push	{r7, lr}
    f79e:	b082      	sub	sp, #8
    f7a0:	af00      	add	r7, sp, #0
    f7a2:	6078      	str	r0, [r7, #4]
    f7a4:	6039      	str	r1, [r7, #0]
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	2b01      	cmp	r3, #1
    f7aa:	d116      	bne.n	f7da <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f7ac:	683b      	ldr	r3, [r7, #0]
    f7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7b2:	4293      	cmp	r3, r2
    f7b4:	d111      	bne.n	f7da <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f7b6:	490b      	ldr	r1, [pc, #44]	; (f7e4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f7b8:	480b      	ldr	r0, [pc, #44]	; (f7e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f7ba:	4b0c      	ldr	r3, [pc, #48]	; (f7ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f7bc:	4798      	blx	r3
    f7be:	4a0c      	ldr	r2, [pc, #48]	; (f7f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f7c0:	490c      	ldr	r1, [pc, #48]	; (f7f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f7c2:	4809      	ldr	r0, [pc, #36]	; (f7e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f7c4:	4b0c      	ldr	r3, [pc, #48]	; (f7f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f7c6:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f7c8:	490c      	ldr	r1, [pc, #48]	; (f7fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f7ca:	480d      	ldr	r0, [pc, #52]	; (f800 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f7cc:	4b07      	ldr	r3, [pc, #28]	; (f7ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f7ce:	4798      	blx	r3
    f7d0:	4a07      	ldr	r2, [pc, #28]	; (f7f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f7d2:	4908      	ldr	r1, [pc, #32]	; (f7f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f7d4:	480a      	ldr	r0, [pc, #40]	; (f800 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f7d6:	4b08      	ldr	r3, [pc, #32]	; (f7f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f7d8:	4798      	blx	r3
    f7da:	bf00      	nop
    f7dc:	3708      	adds	r7, #8
    f7de:	46bd      	mov	sp, r7
    f7e0:	bd80      	pop	{r7, pc}
    f7e2:	bf00      	nop
    f7e4:	20001420 	.word	0x20001420
    f7e8:	20001284 	.word	0x20001284
    f7ec:	0000f4a1 	.word	0x0000f4a1
    f7f0:	20000000 	.word	0x20000000
    f7f4:	0000f4dd 	.word	0x0000f4dd
    f7f8:	0000f9f1 	.word	0x0000f9f1
    f7fc:	20001358 	.word	0x20001358
    f800:	200012a4 	.word	0x200012a4

0000f804 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    f804:	b580      	push	{r7, lr}
    f806:	af00      	add	r7, sp, #0
    f808:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f80c:	2001      	movs	r0, #1
    f80e:	4b01      	ldr	r3, [pc, #4]	; (f814 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    f810:	4798      	blx	r3
    f812:	bd80      	pop	{r7, pc}
    f814:	0000f79d 	.word	0x0000f79d

0000f818 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    f818:	b480      	push	{r7}
    f81a:	b083      	sub	sp, #12
    f81c:	af00      	add	r7, sp, #0
    f81e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    f820:	2300      	movs	r3, #0
	}
    f822:	4618      	mov	r0, r3
    f824:	370c      	adds	r7, #12
    f826:	46bd      	mov	sp, r7
    f828:	bc80      	pop	{r7}
    f82a:	4770      	bx	lr

0000f82c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    f82c:	b480      	push	{r7}
    f82e:	af00      	add	r7, sp, #0
		}
    f830:	bf00      	nop
    f832:	46bd      	mov	sp, r7
    f834:	bc80      	pop	{r7}
    f836:	4770      	bx	lr

0000f838 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    f838:	b480      	push	{r7}
    f83a:	b083      	sub	sp, #12
    f83c:	af00      	add	r7, sp, #0
    f83e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    f840:	4a04      	ldr	r2, [pc, #16]	; (f854 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    f846:	687b      	ldr	r3, [r7, #4]
    f848:	4618      	mov	r0, r3
    f84a:	370c      	adds	r7, #12
    f84c:	46bd      	mov	sp, r7
    f84e:	bc80      	pop	{r7}
    f850:	4770      	bx	lr
    f852:	bf00      	nop
    f854:	200012c4 	.word	0x200012c4

0000f858 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    f858:	b480      	push	{r7}
    f85a:	b083      	sub	sp, #12
    f85c:	af00      	add	r7, sp, #0
    f85e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    f860:	687b      	ldr	r3, [r7, #4]
    f862:	4618      	mov	r0, r3
    f864:	370c      	adds	r7, #12
    f866:	46bd      	mov	sp, r7
    f868:	bc80      	pop	{r7}
    f86a:	4770      	bx	lr

0000f86c <_ZN13SPI_Syn_Class6EnableEv>:
	ptrSPISync=this;
	SPI=spiDesc;
}


int32_t SPI_Syn_Class::Enable(){
    f86c:	b580      	push	{r7, lr}
    f86e:	b082      	sub	sp, #8
    f870:	af00      	add	r7, sp, #0
    f872:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	68da      	ldr	r2, [r3, #12]
    f878:	687b      	ldr	r3, [r7, #4]
    f87a:	3310      	adds	r3, #16
    f87c:	4619      	mov	r1, r3
    f87e:	4610      	mov	r0, r2
    f880:	4b07      	ldr	r3, [pc, #28]	; (f8a0 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
    f882:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    f884:	687b      	ldr	r3, [r7, #4]
    f886:	68db      	ldr	r3, [r3, #12]
    f888:	4618      	mov	r0, r3
    f88a:	4b06      	ldr	r3, [pc, #24]	; (f8a4 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
    f88c:	4798      	blx	r3
	ready=true;
    f88e:	687b      	ldr	r3, [r7, #4]
    f890:	2201      	movs	r2, #1
    f892:	701a      	strb	r2, [r3, #0]
	return 0;
    f894:	2300      	movs	r3, #0
}
    f896:	4618      	mov	r0, r3
    f898:	3708      	adds	r7, #8
    f89a:	46bd      	mov	sp, r7
    f89c:	bd80      	pop	{r7, pc}
    f89e:	bf00      	nop
    f8a0:	00002d19 	.word	0x00002d19
    f8a4:	00002b8d 	.word	0x00002b8d

0000f8a8 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
    f8a8:	b580      	push	{r7, lr}
    f8aa:	b086      	sub	sp, #24
    f8ac:	af00      	add	r7, sp, #0
    f8ae:	60f8      	str	r0, [r7, #12]
    f8b0:	60b9      	str	r1, [r7, #8]
    f8b2:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
    f8b4:	68fb      	ldr	r3, [r7, #12]
    f8b6:	2201      	movs	r2, #1
    f8b8:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
    f8ba:	68fb      	ldr	r3, [r7, #12]
    f8bc:	691b      	ldr	r3, [r3, #16]
    f8be:	687a      	ldr	r2, [r7, #4]
    f8c0:	b292      	uxth	r2, r2
    f8c2:	68b9      	ldr	r1, [r7, #8]
    f8c4:	4618      	mov	r0, r3
    f8c6:	4b08      	ldr	r3, [pc, #32]	; (f8e8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
    f8c8:	4798      	blx	r3
    f8ca:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
    f8cc:	697b      	ldr	r3, [r7, #20]
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	bf14      	ite	ne
    f8d2:	2301      	movne	r3, #1
    f8d4:	2300      	moveq	r3, #0
    f8d6:	b2da      	uxtb	r2, r3
    f8d8:	68fb      	ldr	r3, [r7, #12]
    f8da:	761a      	strb	r2, [r3, #24]
	 return w;
    f8dc:	697b      	ldr	r3, [r7, #20]
	
}
    f8de:	4618      	mov	r0, r3
    f8e0:	3718      	adds	r7, #24
    f8e2:	46bd      	mov	sp, r7
    f8e4:	bd80      	pop	{r7, pc}
    f8e6:	bf00      	nop
    f8e8:	0000f951 	.word	0x0000f951

0000f8ec <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
    f8ec:	b580      	push	{r7, lr}
    f8ee:	b086      	sub	sp, #24
    f8f0:	af00      	add	r7, sp, #0
    f8f2:	60f8      	str	r0, [r7, #12]
    f8f4:	60b9      	str	r1, [r7, #8]
    f8f6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
    f8f8:	68fb      	ldr	r3, [r7, #12]
    f8fa:	2201      	movs	r2, #1
    f8fc:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
    f8fe:	68fb      	ldr	r3, [r7, #12]
    f900:	691b      	ldr	r3, [r3, #16]
    f902:	687a      	ldr	r2, [r7, #4]
    f904:	b292      	uxth	r2, r2
    f906:	68b9      	ldr	r1, [r7, #8]
    f908:	4618      	mov	r0, r3
    f90a:	4b08      	ldr	r3, [pc, #32]	; (f92c <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
    f90c:	4798      	blx	r3
    f90e:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
    f910:	697b      	ldr	r3, [r7, #20]
    f912:	2b00      	cmp	r3, #0
    f914:	bf14      	ite	ne
    f916:	2301      	movne	r3, #1
    f918:	2300      	moveq	r3, #0
    f91a:	b2da      	uxtb	r2, r3
    f91c:	68fb      	ldr	r3, [r7, #12]
    f91e:	765a      	strb	r2, [r3, #25]
	return  r;
    f920:	697b      	ldr	r3, [r7, #20]
}
    f922:	4618      	mov	r0, r3
    f924:	3718      	adds	r7, #24
    f926:	46bd      	mov	sp, r7
    f928:	bd80      	pop	{r7, pc}
    f92a:	bf00      	nop
    f92c:	0000f9a1 	.word	0x0000f9a1

0000f930 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
    f930:	b580      	push	{r7, lr}
    f932:	b082      	sub	sp, #8
    f934:	af00      	add	r7, sp, #0
    f936:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
    f938:	687b      	ldr	r3, [r7, #4]
    f93a:	68db      	ldr	r3, [r3, #12]
    f93c:	4618      	mov	r0, r3
    f93e:	4b03      	ldr	r3, [pc, #12]	; (f94c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
    f940:	4798      	blx	r3
	
}
    f942:	bf00      	nop
    f944:	3708      	adds	r7, #8
    f946:	46bd      	mov	sp, r7
    f948:	bd80      	pop	{r7, pc}
    f94a:	bf00      	nop
    f94c:	00002bc9 	.word	0x00002bc9

0000f950 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    f950:	b580      	push	{r7, lr}
    f952:	b084      	sub	sp, #16
    f954:	af00      	add	r7, sp, #0
    f956:	60f8      	str	r0, [r7, #12]
    f958:	60b9      	str	r1, [r7, #8]
    f95a:	4613      	mov	r3, r2
    f95c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f95e:	68fb      	ldr	r3, [r7, #12]
    f960:	2b00      	cmp	r3, #0
    f962:	d004      	beq.n	f96e <io_write+0x1e>
    f964:	68bb      	ldr	r3, [r7, #8]
    f966:	2b00      	cmp	r3, #0
    f968:	d001      	beq.n	f96e <io_write+0x1e>
    f96a:	2301      	movs	r3, #1
    f96c:	e000      	b.n	f970 <io_write+0x20>
    f96e:	2300      	movs	r3, #0
    f970:	f003 0301 	and.w	r3, r3, #1
    f974:	b2db      	uxtb	r3, r3
    f976:	2234      	movs	r2, #52	; 0x34
    f978:	4907      	ldr	r1, [pc, #28]	; (f998 <io_write+0x48>)
    f97a:	4618      	mov	r0, r3
    f97c:	4b07      	ldr	r3, [pc, #28]	; (f99c <io_write+0x4c>)
    f97e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    f980:	68fb      	ldr	r3, [r7, #12]
    f982:	681b      	ldr	r3, [r3, #0]
    f984:	88fa      	ldrh	r2, [r7, #6]
    f986:	68b9      	ldr	r1, [r7, #8]
    f988:	68f8      	ldr	r0, [r7, #12]
    f98a:	4798      	blx	r3
    f98c:	4603      	mov	r3, r0
}
    f98e:	4618      	mov	r0, r3
    f990:	3710      	adds	r7, #16
    f992:	46bd      	mov	sp, r7
    f994:	bd80      	pop	{r7, pc}
    f996:	bf00      	nop
    f998:	000103a0 	.word	0x000103a0
    f99c:	00003ba1 	.word	0x00003ba1

0000f9a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    f9a0:	b580      	push	{r7, lr}
    f9a2:	b084      	sub	sp, #16
    f9a4:	af00      	add	r7, sp, #0
    f9a6:	60f8      	str	r0, [r7, #12]
    f9a8:	60b9      	str	r1, [r7, #8]
    f9aa:	4613      	mov	r3, r2
    f9ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    f9ae:	68fb      	ldr	r3, [r7, #12]
    f9b0:	2b00      	cmp	r3, #0
    f9b2:	d004      	beq.n	f9be <io_read+0x1e>
    f9b4:	68bb      	ldr	r3, [r7, #8]
    f9b6:	2b00      	cmp	r3, #0
    f9b8:	d001      	beq.n	f9be <io_read+0x1e>
    f9ba:	2301      	movs	r3, #1
    f9bc:	e000      	b.n	f9c0 <io_read+0x20>
    f9be:	2300      	movs	r3, #0
    f9c0:	f003 0301 	and.w	r3, r3, #1
    f9c4:	b2db      	uxtb	r3, r3
    f9c6:	223d      	movs	r2, #61	; 0x3d
    f9c8:	4907      	ldr	r1, [pc, #28]	; (f9e8 <io_read+0x48>)
    f9ca:	4618      	mov	r0, r3
    f9cc:	4b07      	ldr	r3, [pc, #28]	; (f9ec <io_read+0x4c>)
    f9ce:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    f9d0:	68fb      	ldr	r3, [r7, #12]
    f9d2:	685b      	ldr	r3, [r3, #4]
    f9d4:	88fa      	ldrh	r2, [r7, #6]
    f9d6:	68b9      	ldr	r1, [r7, #8]
    f9d8:	68f8      	ldr	r0, [r7, #12]
    f9da:	4798      	blx	r3
    f9dc:	4603      	mov	r3, r0
}
    f9de:	4618      	mov	r0, r3
    f9e0:	3710      	adds	r7, #16
    f9e2:	46bd      	mov	sp, r7
    f9e4:	bd80      	pop	{r7, pc}
    f9e6:	bf00      	nop
    f9e8:	000103a0 	.word	0x000103a0
    f9ec:	00003ba1 	.word	0x00003ba1

0000f9f0 <__aeabi_atexit>:
    f9f0:	460b      	mov	r3, r1
    f9f2:	4601      	mov	r1, r0
    f9f4:	4618      	mov	r0, r3
    f9f6:	f000 b801 	b.w	f9fc <__cxa_atexit>
    f9fa:	bf00      	nop

0000f9fc <__cxa_atexit>:
    f9fc:	4613      	mov	r3, r2
    f9fe:	460a      	mov	r2, r1
    fa00:	4601      	mov	r1, r0
    fa02:	2002      	movs	r0, #2
    fa04:	f000 b9aa 	b.w	fd5c <__register_exitproc>

0000fa08 <ffs>:
    fa08:	b140      	cbz	r0, fa1c <ffs+0x14>
    fa0a:	2300      	movs	r3, #0
    fa0c:	fa40 f103 	asr.w	r1, r0, r3
    fa10:	1c5a      	adds	r2, r3, #1
    fa12:	07c9      	lsls	r1, r1, #31
    fa14:	4613      	mov	r3, r2
    fa16:	d5f9      	bpl.n	fa0c <ffs+0x4>
    fa18:	4610      	mov	r0, r2
    fa1a:	4770      	bx	lr
    fa1c:	4602      	mov	r2, r0
    fa1e:	4610      	mov	r0, r2
    fa20:	4770      	bx	lr
    fa22:	bf00      	nop

0000fa24 <__libc_init_array>:
    fa24:	b570      	push	{r4, r5, r6, lr}
    fa26:	4e0f      	ldr	r6, [pc, #60]	; (fa64 <__libc_init_array+0x40>)
    fa28:	4d0f      	ldr	r5, [pc, #60]	; (fa68 <__libc_init_array+0x44>)
    fa2a:	1b76      	subs	r6, r6, r5
    fa2c:	10b6      	asrs	r6, r6, #2
    fa2e:	bf18      	it	ne
    fa30:	2400      	movne	r4, #0
    fa32:	d005      	beq.n	fa40 <__libc_init_array+0x1c>
    fa34:	3401      	adds	r4, #1
    fa36:	f855 3b04 	ldr.w	r3, [r5], #4
    fa3a:	4798      	blx	r3
    fa3c:	42a6      	cmp	r6, r4
    fa3e:	d1f9      	bne.n	fa34 <__libc_init_array+0x10>
    fa40:	4e0a      	ldr	r6, [pc, #40]	; (fa6c <__libc_init_array+0x48>)
    fa42:	4d0b      	ldr	r5, [pc, #44]	; (fa70 <__libc_init_array+0x4c>)
    fa44:	1b76      	subs	r6, r6, r5
    fa46:	f000 fcb7 	bl	103b8 <_init>
    fa4a:	10b6      	asrs	r6, r6, #2
    fa4c:	bf18      	it	ne
    fa4e:	2400      	movne	r4, #0
    fa50:	d006      	beq.n	fa60 <__libc_init_array+0x3c>
    fa52:	3401      	adds	r4, #1
    fa54:	f855 3b04 	ldr.w	r3, [r5], #4
    fa58:	4798      	blx	r3
    fa5a:	42a6      	cmp	r6, r4
    fa5c:	d1f9      	bne.n	fa52 <__libc_init_array+0x2e>
    fa5e:	bd70      	pop	{r4, r5, r6, pc}
    fa60:	bd70      	pop	{r4, r5, r6, pc}
    fa62:	bf00      	nop
    fa64:	000103c4 	.word	0x000103c4
    fa68:	000103c4 	.word	0x000103c4
    fa6c:	000103e8 	.word	0x000103e8
    fa70:	000103c4 	.word	0x000103c4

0000fa74 <memcpy>:
    fa74:	4684      	mov	ip, r0
    fa76:	ea41 0300 	orr.w	r3, r1, r0
    fa7a:	f013 0303 	ands.w	r3, r3, #3
    fa7e:	d16d      	bne.n	fb5c <memcpy+0xe8>
    fa80:	3a40      	subs	r2, #64	; 0x40
    fa82:	d341      	bcc.n	fb08 <memcpy+0x94>
    fa84:	f851 3b04 	ldr.w	r3, [r1], #4
    fa88:	f840 3b04 	str.w	r3, [r0], #4
    fa8c:	f851 3b04 	ldr.w	r3, [r1], #4
    fa90:	f840 3b04 	str.w	r3, [r0], #4
    fa94:	f851 3b04 	ldr.w	r3, [r1], #4
    fa98:	f840 3b04 	str.w	r3, [r0], #4
    fa9c:	f851 3b04 	ldr.w	r3, [r1], #4
    faa0:	f840 3b04 	str.w	r3, [r0], #4
    faa4:	f851 3b04 	ldr.w	r3, [r1], #4
    faa8:	f840 3b04 	str.w	r3, [r0], #4
    faac:	f851 3b04 	ldr.w	r3, [r1], #4
    fab0:	f840 3b04 	str.w	r3, [r0], #4
    fab4:	f851 3b04 	ldr.w	r3, [r1], #4
    fab8:	f840 3b04 	str.w	r3, [r0], #4
    fabc:	f851 3b04 	ldr.w	r3, [r1], #4
    fac0:	f840 3b04 	str.w	r3, [r0], #4
    fac4:	f851 3b04 	ldr.w	r3, [r1], #4
    fac8:	f840 3b04 	str.w	r3, [r0], #4
    facc:	f851 3b04 	ldr.w	r3, [r1], #4
    fad0:	f840 3b04 	str.w	r3, [r0], #4
    fad4:	f851 3b04 	ldr.w	r3, [r1], #4
    fad8:	f840 3b04 	str.w	r3, [r0], #4
    fadc:	f851 3b04 	ldr.w	r3, [r1], #4
    fae0:	f840 3b04 	str.w	r3, [r0], #4
    fae4:	f851 3b04 	ldr.w	r3, [r1], #4
    fae8:	f840 3b04 	str.w	r3, [r0], #4
    faec:	f851 3b04 	ldr.w	r3, [r1], #4
    faf0:	f840 3b04 	str.w	r3, [r0], #4
    faf4:	f851 3b04 	ldr.w	r3, [r1], #4
    faf8:	f840 3b04 	str.w	r3, [r0], #4
    fafc:	f851 3b04 	ldr.w	r3, [r1], #4
    fb00:	f840 3b04 	str.w	r3, [r0], #4
    fb04:	3a40      	subs	r2, #64	; 0x40
    fb06:	d2bd      	bcs.n	fa84 <memcpy+0x10>
    fb08:	3230      	adds	r2, #48	; 0x30
    fb0a:	d311      	bcc.n	fb30 <memcpy+0xbc>
    fb0c:	f851 3b04 	ldr.w	r3, [r1], #4
    fb10:	f840 3b04 	str.w	r3, [r0], #4
    fb14:	f851 3b04 	ldr.w	r3, [r1], #4
    fb18:	f840 3b04 	str.w	r3, [r0], #4
    fb1c:	f851 3b04 	ldr.w	r3, [r1], #4
    fb20:	f840 3b04 	str.w	r3, [r0], #4
    fb24:	f851 3b04 	ldr.w	r3, [r1], #4
    fb28:	f840 3b04 	str.w	r3, [r0], #4
    fb2c:	3a10      	subs	r2, #16
    fb2e:	d2ed      	bcs.n	fb0c <memcpy+0x98>
    fb30:	320c      	adds	r2, #12
    fb32:	d305      	bcc.n	fb40 <memcpy+0xcc>
    fb34:	f851 3b04 	ldr.w	r3, [r1], #4
    fb38:	f840 3b04 	str.w	r3, [r0], #4
    fb3c:	3a04      	subs	r2, #4
    fb3e:	d2f9      	bcs.n	fb34 <memcpy+0xc0>
    fb40:	3204      	adds	r2, #4
    fb42:	d008      	beq.n	fb56 <memcpy+0xe2>
    fb44:	07d2      	lsls	r2, r2, #31
    fb46:	bf1c      	itt	ne
    fb48:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fb4c:	f800 3b01 	strbne.w	r3, [r0], #1
    fb50:	d301      	bcc.n	fb56 <memcpy+0xe2>
    fb52:	880b      	ldrh	r3, [r1, #0]
    fb54:	8003      	strh	r3, [r0, #0]
    fb56:	4660      	mov	r0, ip
    fb58:	4770      	bx	lr
    fb5a:	bf00      	nop
    fb5c:	2a08      	cmp	r2, #8
    fb5e:	d313      	bcc.n	fb88 <memcpy+0x114>
    fb60:	078b      	lsls	r3, r1, #30
    fb62:	d08d      	beq.n	fa80 <memcpy+0xc>
    fb64:	f010 0303 	ands.w	r3, r0, #3
    fb68:	d08a      	beq.n	fa80 <memcpy+0xc>
    fb6a:	f1c3 0304 	rsb	r3, r3, #4
    fb6e:	1ad2      	subs	r2, r2, r3
    fb70:	07db      	lsls	r3, r3, #31
    fb72:	bf1c      	itt	ne
    fb74:	f811 3b01 	ldrbne.w	r3, [r1], #1
    fb78:	f800 3b01 	strbne.w	r3, [r0], #1
    fb7c:	d380      	bcc.n	fa80 <memcpy+0xc>
    fb7e:	f831 3b02 	ldrh.w	r3, [r1], #2
    fb82:	f820 3b02 	strh.w	r3, [r0], #2
    fb86:	e77b      	b.n	fa80 <memcpy+0xc>
    fb88:	3a04      	subs	r2, #4
    fb8a:	d3d9      	bcc.n	fb40 <memcpy+0xcc>
    fb8c:	3a01      	subs	r2, #1
    fb8e:	f811 3b01 	ldrb.w	r3, [r1], #1
    fb92:	f800 3b01 	strb.w	r3, [r0], #1
    fb96:	d2f9      	bcs.n	fb8c <memcpy+0x118>
    fb98:	780b      	ldrb	r3, [r1, #0]
    fb9a:	7003      	strb	r3, [r0, #0]
    fb9c:	784b      	ldrb	r3, [r1, #1]
    fb9e:	7043      	strb	r3, [r0, #1]
    fba0:	788b      	ldrb	r3, [r1, #2]
    fba2:	7083      	strb	r3, [r0, #2]
    fba4:	4660      	mov	r0, ip
    fba6:	4770      	bx	lr

0000fba8 <memset>:
    fba8:	b470      	push	{r4, r5, r6}
    fbaa:	0786      	lsls	r6, r0, #30
    fbac:	d046      	beq.n	fc3c <memset+0x94>
    fbae:	1e54      	subs	r4, r2, #1
    fbb0:	2a00      	cmp	r2, #0
    fbb2:	d041      	beq.n	fc38 <memset+0x90>
    fbb4:	b2ca      	uxtb	r2, r1
    fbb6:	4603      	mov	r3, r0
    fbb8:	e002      	b.n	fbc0 <memset+0x18>
    fbba:	f114 34ff 	adds.w	r4, r4, #4294967295
    fbbe:	d33b      	bcc.n	fc38 <memset+0x90>
    fbc0:	f803 2b01 	strb.w	r2, [r3], #1
    fbc4:	079d      	lsls	r5, r3, #30
    fbc6:	d1f8      	bne.n	fbba <memset+0x12>
    fbc8:	2c03      	cmp	r4, #3
    fbca:	d92e      	bls.n	fc2a <memset+0x82>
    fbcc:	b2cd      	uxtb	r5, r1
    fbce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    fbd2:	2c0f      	cmp	r4, #15
    fbd4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    fbd8:	d919      	bls.n	fc0e <memset+0x66>
    fbda:	f103 0210 	add.w	r2, r3, #16
    fbde:	4626      	mov	r6, r4
    fbe0:	3e10      	subs	r6, #16
    fbe2:	2e0f      	cmp	r6, #15
    fbe4:	f842 5c10 	str.w	r5, [r2, #-16]
    fbe8:	f842 5c0c 	str.w	r5, [r2, #-12]
    fbec:	f842 5c08 	str.w	r5, [r2, #-8]
    fbf0:	f842 5c04 	str.w	r5, [r2, #-4]
    fbf4:	f102 0210 	add.w	r2, r2, #16
    fbf8:	d8f2      	bhi.n	fbe0 <memset+0x38>
    fbfa:	f1a4 0210 	sub.w	r2, r4, #16
    fbfe:	f022 020f 	bic.w	r2, r2, #15
    fc02:	f004 040f 	and.w	r4, r4, #15
    fc06:	3210      	adds	r2, #16
    fc08:	2c03      	cmp	r4, #3
    fc0a:	4413      	add	r3, r2
    fc0c:	d90d      	bls.n	fc2a <memset+0x82>
    fc0e:	461e      	mov	r6, r3
    fc10:	4622      	mov	r2, r4
    fc12:	3a04      	subs	r2, #4
    fc14:	2a03      	cmp	r2, #3
    fc16:	f846 5b04 	str.w	r5, [r6], #4
    fc1a:	d8fa      	bhi.n	fc12 <memset+0x6a>
    fc1c:	1f22      	subs	r2, r4, #4
    fc1e:	f022 0203 	bic.w	r2, r2, #3
    fc22:	3204      	adds	r2, #4
    fc24:	4413      	add	r3, r2
    fc26:	f004 0403 	and.w	r4, r4, #3
    fc2a:	b12c      	cbz	r4, fc38 <memset+0x90>
    fc2c:	b2c9      	uxtb	r1, r1
    fc2e:	441c      	add	r4, r3
    fc30:	f803 1b01 	strb.w	r1, [r3], #1
    fc34:	429c      	cmp	r4, r3
    fc36:	d1fb      	bne.n	fc30 <memset+0x88>
    fc38:	bc70      	pop	{r4, r5, r6}
    fc3a:	4770      	bx	lr
    fc3c:	4614      	mov	r4, r2
    fc3e:	4603      	mov	r3, r0
    fc40:	e7c2      	b.n	fbc8 <memset+0x20>
    fc42:	bf00      	nop
	...

0000fc80 <strlen>:
    fc80:	f890 f000 	pld	[r0]
    fc84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    fc88:	f020 0107 	bic.w	r1, r0, #7
    fc8c:	f06f 0c00 	mvn.w	ip, #0
    fc90:	f010 0407 	ands.w	r4, r0, #7
    fc94:	f891 f020 	pld	[r1, #32]
    fc98:	f040 8049 	bne.w	fd2e <strlen+0xae>
    fc9c:	f04f 0400 	mov.w	r4, #0
    fca0:	f06f 0007 	mvn.w	r0, #7
    fca4:	e9d1 2300 	ldrd	r2, r3, [r1]
    fca8:	f891 f040 	pld	[r1, #64]	; 0x40
    fcac:	f100 0008 	add.w	r0, r0, #8
    fcb0:	fa82 f24c 	uadd8	r2, r2, ip
    fcb4:	faa4 f28c 	sel	r2, r4, ip
    fcb8:	fa83 f34c 	uadd8	r3, r3, ip
    fcbc:	faa2 f38c 	sel	r3, r2, ip
    fcc0:	bb4b      	cbnz	r3, fd16 <strlen+0x96>
    fcc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fcc6:	fa82 f24c 	uadd8	r2, r2, ip
    fcca:	f100 0008 	add.w	r0, r0, #8
    fcce:	faa4 f28c 	sel	r2, r4, ip
    fcd2:	fa83 f34c 	uadd8	r3, r3, ip
    fcd6:	faa2 f38c 	sel	r3, r2, ip
    fcda:	b9e3      	cbnz	r3, fd16 <strlen+0x96>
    fcdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    fce0:	fa82 f24c 	uadd8	r2, r2, ip
    fce4:	f100 0008 	add.w	r0, r0, #8
    fce8:	faa4 f28c 	sel	r2, r4, ip
    fcec:	fa83 f34c 	uadd8	r3, r3, ip
    fcf0:	faa2 f38c 	sel	r3, r2, ip
    fcf4:	b97b      	cbnz	r3, fd16 <strlen+0x96>
    fcf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    fcfa:	f101 0120 	add.w	r1, r1, #32
    fcfe:	fa82 f24c 	uadd8	r2, r2, ip
    fd02:	f100 0008 	add.w	r0, r0, #8
    fd06:	faa4 f28c 	sel	r2, r4, ip
    fd0a:	fa83 f34c 	uadd8	r3, r3, ip
    fd0e:	faa2 f38c 	sel	r3, r2, ip
    fd12:	2b00      	cmp	r3, #0
    fd14:	d0c6      	beq.n	fca4 <strlen+0x24>
    fd16:	2a00      	cmp	r2, #0
    fd18:	bf04      	itt	eq
    fd1a:	3004      	addeq	r0, #4
    fd1c:	461a      	moveq	r2, r3
    fd1e:	ba12      	rev	r2, r2
    fd20:	fab2 f282 	clz	r2, r2
    fd24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    fd28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    fd2c:	4770      	bx	lr
    fd2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    fd32:	f004 0503 	and.w	r5, r4, #3
    fd36:	f1c4 0000 	rsb	r0, r4, #0
    fd3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    fd3e:	f014 0f04 	tst.w	r4, #4
    fd42:	f891 f040 	pld	[r1, #64]	; 0x40
    fd46:	fa0c f505 	lsl.w	r5, ip, r5
    fd4a:	ea62 0205 	orn	r2, r2, r5
    fd4e:	bf1c      	itt	ne
    fd50:	ea63 0305 	ornne	r3, r3, r5
    fd54:	4662      	movne	r2, ip
    fd56:	f04f 0400 	mov.w	r4, #0
    fd5a:	e7a9      	b.n	fcb0 <strlen+0x30>

0000fd5c <__register_exitproc>:
    fd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fd60:	4d2c      	ldr	r5, [pc, #176]	; (fe14 <__register_exitproc+0xb8>)
    fd62:	4606      	mov	r6, r0
    fd64:	6828      	ldr	r0, [r5, #0]
    fd66:	4698      	mov	r8, r3
    fd68:	460f      	mov	r7, r1
    fd6a:	4691      	mov	r9, r2
    fd6c:	f000 f882 	bl	fe74 <__retarget_lock_acquire_recursive>
    fd70:	4b29      	ldr	r3, [pc, #164]	; (fe18 <__register_exitproc+0xbc>)
    fd72:	681c      	ldr	r4, [r3, #0]
    fd74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d03e      	beq.n	fdfa <__register_exitproc+0x9e>
    fd7c:	685a      	ldr	r2, [r3, #4]
    fd7e:	2a1f      	cmp	r2, #31
    fd80:	dc1c      	bgt.n	fdbc <__register_exitproc+0x60>
    fd82:	f102 0e01 	add.w	lr, r2, #1
    fd86:	b176      	cbz	r6, fda6 <__register_exitproc+0x4a>
    fd88:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    fd8c:	2401      	movs	r4, #1
    fd8e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    fd92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    fd96:	4094      	lsls	r4, r2
    fd98:	4320      	orrs	r0, r4
    fd9a:	2e02      	cmp	r6, #2
    fd9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    fda0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fda4:	d023      	beq.n	fdee <__register_exitproc+0x92>
    fda6:	3202      	adds	r2, #2
    fda8:	f8c3 e004 	str.w	lr, [r3, #4]
    fdac:	6828      	ldr	r0, [r5, #0]
    fdae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    fdb2:	f000 f861 	bl	fe78 <__retarget_lock_release_recursive>
    fdb6:	2000      	movs	r0, #0
    fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fdbc:	4b17      	ldr	r3, [pc, #92]	; (fe1c <__register_exitproc+0xc0>)
    fdbe:	b30b      	cbz	r3, fe04 <__register_exitproc+0xa8>
    fdc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    fdc4:	f7ff fd28 	bl	f818 <malloc>
    fdc8:	4603      	mov	r3, r0
    fdca:	b1d8      	cbz	r0, fe04 <__register_exitproc+0xa8>
    fdcc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    fdd0:	6002      	str	r2, [r0, #0]
    fdd2:	2100      	movs	r1, #0
    fdd4:	6041      	str	r1, [r0, #4]
    fdd6:	460a      	mov	r2, r1
    fdd8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    fddc:	f04f 0e01 	mov.w	lr, #1
    fde0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    fde4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    fde8:	2e00      	cmp	r6, #0
    fdea:	d0dc      	beq.n	fda6 <__register_exitproc+0x4a>
    fdec:	e7cc      	b.n	fd88 <__register_exitproc+0x2c>
    fdee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    fdf2:	430c      	orrs	r4, r1
    fdf4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    fdf8:	e7d5      	b.n	fda6 <__register_exitproc+0x4a>
    fdfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    fdfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    fe02:	e7bb      	b.n	fd7c <__register_exitproc+0x20>
    fe04:	6828      	ldr	r0, [r5, #0]
    fe06:	f000 f837 	bl	fe78 <__retarget_lock_release_recursive>
    fe0a:	f04f 30ff 	mov.w	r0, #4294967295
    fe0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe12:	bf00      	nop
    fe14:	20000608 	.word	0x20000608
    fe18:	000103b4 	.word	0x000103b4
    fe1c:	0000f819 	.word	0x0000f819

0000fe20 <register_fini>:
    fe20:	4b02      	ldr	r3, [pc, #8]	; (fe2c <register_fini+0xc>)
    fe22:	b113      	cbz	r3, fe2a <register_fini+0xa>
    fe24:	4802      	ldr	r0, [pc, #8]	; (fe30 <register_fini+0x10>)
    fe26:	f000 b805 	b.w	fe34 <atexit>
    fe2a:	4770      	bx	lr
    fe2c:	00000000 	.word	0x00000000
    fe30:	0000fe41 	.word	0x0000fe41

0000fe34 <atexit>:
    fe34:	2300      	movs	r3, #0
    fe36:	4601      	mov	r1, r0
    fe38:	461a      	mov	r2, r3
    fe3a:	4618      	mov	r0, r3
    fe3c:	f7ff bf8e 	b.w	fd5c <__register_exitproc>

0000fe40 <__libc_fini_array>:
    fe40:	b538      	push	{r3, r4, r5, lr}
    fe42:	4c0a      	ldr	r4, [pc, #40]	; (fe6c <__libc_fini_array+0x2c>)
    fe44:	4d0a      	ldr	r5, [pc, #40]	; (fe70 <__libc_fini_array+0x30>)
    fe46:	1b64      	subs	r4, r4, r5
    fe48:	10a4      	asrs	r4, r4, #2
    fe4a:	d00a      	beq.n	fe62 <__libc_fini_array+0x22>
    fe4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    fe50:	3b01      	subs	r3, #1
    fe52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    fe56:	3c01      	subs	r4, #1
    fe58:	f855 3904 	ldr.w	r3, [r5], #-4
    fe5c:	4798      	blx	r3
    fe5e:	2c00      	cmp	r4, #0
    fe60:	d1f9      	bne.n	fe56 <__libc_fini_array+0x16>
    fe62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fe66:	f000 babf 	b.w	103e8 <_fini>
    fe6a:	bf00      	nop
    fe6c:	000103f8 	.word	0x000103f8
    fe70:	000103f4 	.word	0x000103f4

0000fe74 <__retarget_lock_acquire_recursive>:
    fe74:	4770      	bx	lr
    fe76:	bf00      	nop

0000fe78 <__retarget_lock_release_recursive>:
    fe78:	4770      	bx	lr
    fe7a:	bf00      	nop
    fe7c:	00000a0d 	.word	0x00000a0d
    fe80:	202a2a2a 	.word	0x202a2a2a
    fe84:	72617453 	.word	0x72617453
    fe88:	20705574 	.word	0x20705574
    fe8c:	6f676c41 	.word	0x6f676c41
    fe90:	68746972 	.word	0x68746972
    fe94:	206e656d 	.word	0x206e656d
    fe98:	74736554 	.word	0x74736554
    fe9c:	2a2a2a20 	.word	0x2a2a2a20
    fea0:	00000000 	.word	0x00000000
    fea4:	202a2a2a 	.word	0x202a2a2a
    fea8:	65746144 	.word	0x65746144
    feac:	0020203a 	.word	0x0020203a
    feb0:	2074634f 	.word	0x2074634f
    feb4:	32203832 	.word	0x32203832
    feb8:	00303230 	.word	0x00303230
    febc:	6d695420 	.word	0x6d695420
    fec0:	00203a65 	.word	0x00203a65
    fec4:	303a3731 	.word	0x303a3731
    fec8:	30323a34 	.word	0x30323a34
    fecc:	00000000 	.word	0x00000000
    fed0:	62616e45 	.word	0x62616e45
    fed4:	676e696c 	.word	0x676e696c
    fed8:	61654820 	.word	0x61654820
    fedc:	3a726574 	.word	0x3a726574
    fee0:	00000020 	.word	0x00000020
    fee4:	00092e20 	.word	0x00092e20
    fee8:	74616548 	.word	0x74616548
    feec:	00207265 	.word	0x00207265
    fef0:	61745320 	.word	0x61745320
    fef4:	20737574 	.word	0x20737574
    fef8:	0000003a 	.word	0x0000003a
    fefc:	682f2e2e 	.word	0x682f2e2e
    ff00:	702f6c70 	.word	0x702f6c70
    ff04:	2f74726f 	.word	0x2f74726f
    ff08:	5f6c7068 	.word	0x5f6c7068
    ff0c:	6f697067 	.word	0x6f697067
    ff10:	7361625f 	.word	0x7361625f
    ff14:	00682e65 	.word	0x00682e65
    ff18:	682f2e2e 	.word	0x682f2e2e
    ff1c:	692f6c61 	.word	0x692f6c61
    ff20:	756c636e 	.word	0x756c636e
    ff24:	682f6564 	.word	0x682f6564
    ff28:	775f6c61 	.word	0x775f6c61
    ff2c:	682e7464 	.word	0x682e7464
    ff30:	00000000 	.word	0x00000000
    ff34:	682f2e2e 	.word	0x682f2e2e
    ff38:	732f6c61 	.word	0x732f6c61
    ff3c:	682f6372 	.word	0x682f6372
    ff40:	635f6c61 	.word	0x635f6c61
    ff44:	6e656c61 	.word	0x6e656c61
    ff48:	2e726164 	.word	0x2e726164
    ff4c:	00000063 	.word	0x00000063
    ff50:	682f2e2e 	.word	0x682f2e2e
    ff54:	732f6c61 	.word	0x732f6c61
    ff58:	682f6372 	.word	0x682f6372
    ff5c:	635f6c61 	.word	0x635f6c61
    ff60:	615f6e61 	.word	0x615f6e61
    ff64:	636e7973 	.word	0x636e7973
    ff68:	0000632e 	.word	0x0000632e
    ff6c:	682f2e2e 	.word	0x682f2e2e
    ff70:	732f6c61 	.word	0x732f6c61
    ff74:	682f6372 	.word	0x682f6372
    ff78:	635f6c61 	.word	0x635f6c61
    ff7c:	735f6372 	.word	0x735f6372
    ff80:	2e636e79 	.word	0x2e636e79
    ff84:	00000063 	.word	0x00000063
    ff88:	682f2e2e 	.word	0x682f2e2e
    ff8c:	732f6c61 	.word	0x732f6c61
    ff90:	682f6372 	.word	0x682f6372
    ff94:	695f6c61 	.word	0x695f6c61
    ff98:	6d5f6332 	.word	0x6d5f6332
    ff9c:	7973615f 	.word	0x7973615f
    ffa0:	632e636e 	.word	0x632e636e
    ffa4:	00000000 	.word	0x00000000
    ffa8:	682f2e2e 	.word	0x682f2e2e
    ffac:	732f6c61 	.word	0x732f6c61
    ffb0:	682f6372 	.word	0x682f6372
    ffb4:	695f6c61 	.word	0x695f6c61
    ffb8:	6d5f6332 	.word	0x6d5f6332
    ffbc:	6e79735f 	.word	0x6e79735f
    ffc0:	00632e63 	.word	0x00632e63
    ffc4:	682f2e2e 	.word	0x682f2e2e
    ffc8:	732f6c61 	.word	0x732f6c61
    ffcc:	682f6372 	.word	0x682f6372
    ffd0:	705f6c61 	.word	0x705f6c61
    ffd4:	632e6d77 	.word	0x632e6d77
    ffd8:	00000000 	.word	0x00000000
    ffdc:	682f2e2e 	.word	0x682f2e2e
    ffe0:	732f6c61 	.word	0x732f6c61
    ffe4:	682f6372 	.word	0x682f6372
    ffe8:	715f6c61 	.word	0x715f6c61
    ffec:	5f697073 	.word	0x5f697073
    fff0:	636e7973 	.word	0x636e7973
    fff4:	0000632e 	.word	0x0000632e
    fff8:	682f2e2e 	.word	0x682f2e2e
    fffc:	732f6c61 	.word	0x732f6c61
   10000:	682f6372 	.word	0x682f6372
   10004:	735f6c61 	.word	0x735f6c61
   10008:	6d5f6970 	.word	0x6d5f6970
   1000c:	6e79735f 	.word	0x6e79735f
   10010:	00632e63 	.word	0x00632e63
   10014:	682f2e2e 	.word	0x682f2e2e
   10018:	732f6c61 	.word	0x732f6c61
   1001c:	682f6372 	.word	0x682f6372
   10020:	745f6c61 	.word	0x745f6c61
   10024:	72656d69 	.word	0x72656d69
   10028:	0000632e 	.word	0x0000632e
   1002c:	682f2e2e 	.word	0x682f2e2e
   10030:	752f6c61 	.word	0x752f6c61
   10034:	736c6974 	.word	0x736c6974
   10038:	6372732f 	.word	0x6372732f
   1003c:	6974752f 	.word	0x6974752f
   10040:	6c5f736c 	.word	0x6c5f736c
   10044:	2e747369 	.word	0x2e747369
   10048:	00000063 	.word	0x00000063

0001004c <_map>:
   1004c:	00000000 00000040 00000003 00000003     ....@...........
   1005c:	00000004 00000004 00000005 00000005     ................
   1006c:	00000006 00000056 00000007 00000057     ....V.......W...
   1007c:	00000008 00000028 00000009 00000029     ....(.......)...
   1008c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   1009c:	632e6369 00000000                       ic.c....

000100a4 <user_mux_confs>:
   100a4:	00020100 00000000 00000000 00000000     ................
	...

000100e8 <channel_confs>:
   100e8:	0660065f 00000000 00000000 00000000     _.`.............
	...

00010128 <interrupt_cfg>:
	...
   101a8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   101b8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   101c8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   101d8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   101e8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   101f8:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   10208:	43000400 43000800 43000c00              ...C...C...C

00010214 <sercomspi_regs>:
   10214:	0020000c 00020000 00000000 01ff0001     .. .............
   10224:	30000c04 02000000 00000000 ff00ef00     ...0............
   10234:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   10244:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   10254:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   10264:	43001400 43001800                       ...C...C

0001026c <_usb_ep_cfgs>:
   1026c:	20000aa4 00000000 00000040 20000ae4     ... ....@...... 
   1027c:	20000b24 00400040 20000b64 20000ba4     $.. @.@.d.. ... 
   1028c:	00400040 20000be4 20000c24 00400040     @.@.... $.. @.@.
   1029c:	20000c64 20000ca4 00400040 00000804     d.. ... @.@.....
   102ac:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   102bc:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   102cc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   102dc:	7361625f 00682e65                       _base.h.

000102e4 <n25q256a_interface>:
   102e4:	0000c13d 0000c1e1 0000c2f1 0000c4a9     =...............
   102f4:	0000c539 752f2e2e 642f6273 63697665     9...../usb/devic
   10304:	73752f65 2e636462 00000063              e/usbdc.c...

00010310 <defaultParameters>:
   10310:	00000040                                @...

00010314 <defaultPreferences>:
   10314:	000000fa 00000032                       ....2...

0001031c <_ZTV9CDC_Class>:
	...
   10324:	0000ed99 0000ee79 0000e9ed 0000ed61     ....y.......a...
   10334:	0000ef11 0000ed25 0000ec09 0000ec59     ....%.......Y...
   10344:	0000ed81 0000ede1                       ........

0001034c <_ZTV6Stream>:
	...
   10354:	0000f82d 0000efe1 0000e9ed 0000ea01     -...............
   10364:	0000f82d 0000f82d 0000f82d 2e257830     -...-...-...0x%.
   10374:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   10384:	0066766f                                ovf.

00010388 <_ZTV5Print>:
	...
   10390:	0000f82d 0000efe1 0000e9ed 0000ea01     -...............
   103a0:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   103b0:	00632e6f                                o.c.

000103b4 <_global_impure_ptr>:
   103b4:	200001e0                                ... 

000103b8 <_init>:
   103b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103ba:	bf00      	nop
   103bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   103be:	bc08      	pop	{r3}
   103c0:	469e      	mov	lr, r3
   103c2:	4770      	bx	lr

000103c4 <__init_array_start>:
   103c4:	0000fe21 	.word	0x0000fe21

000103c8 <__frame_dummy_init_array_entry>:
   103c8:	00000289 00000511 00000641 00000925     ........A...%...
   103d8:	0000e77d 0000e9b5 0000ef91 0000f805     }...............

000103e8 <_fini>:
   103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103ea:	bf00      	nop
   103ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   103ee:	bc08      	pop	{r3}
   103f0:	469e      	mov	lr, r3
   103f2:	4770      	bx	lr

000103f4 <__fini_array_start>:
   103f4:	00000265 	.word	0x00000265
